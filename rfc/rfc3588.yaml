- title: __initial_text__
  contents:
  - '                         Diameter Base Protocol

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2003).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   The Diameter base protocol is intended to provide an Authentication,\n\
    \   Authorization and Accounting (AAA) framework for applications such as\n  \
    \ network access or IP mobility.  Diameter is also intended to work in\n   both\
    \ local Authentication, Authorization & Accounting and roaming\n   situations.\
    \  This document specifies the message format, transport,\n   error reporting,\
    \ accounting and security services to be used by all\n   Diameter applications.\
    \  The Diameter base application needs to be\n   supported by all Diameter implementations.\n"
- title: Conventions Used In This Document
  contents:
  - "Conventions Used In This Document\n   The key words \"MUST\", \"MUST NOT\", \"\
    REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in BCP 14, RFC 2119\n   [KEYWORD].\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction.................................................\
    \   6\n       1.1.   Diameter Protocol.....................................  \
    \ 9\n              1.1.1.   Description of the Document Set..............  10\n\
    \       1.2.   Approach to Extensibility.............................  11\n  \
    \            1.2.1.   Defining New AVP Values......................  11\n    \
    \          1.2.2.   Creating New AVPs............................  11\n      \
    \        1.2.3.   Creating New Authentication Applications.....  11\n        \
    \      1.2.4.   Creating New Accounting Applications.........  12\n          \
    \    1.2.5.   Application Authentication Procedures........  14\n       1.3. \
    \  Terminology...........................................  14\n   2.  Protocol\
    \ Overview............................................  18\n       2.1.   Transport.............................................\
    \  20\n              2.1.1.   SCTP Guidelines..............................  21\n\
    \       2.2.   Securing Diameter Messages............................  21\n  \
    \     2.3.   Diameter Application Compliance.......................  21\n    \
    \   2.4.   Application Identifiers...............................  22\n      \
    \ 2.5.   Connections vs. Sessions..............................  22\n       2.6.\
    \   Peer Table............................................  23\n       2.7.  \
    \ Realm-Based Routing Table.............................  24\n       2.8.   Role\
    \ of Diameter Agents...............................  25\n              2.8.1.\
    \   Relay Agents.................................  26\n              2.8.2.  \
    \ Proxy Agents.................................  27\n              2.8.3.   Redirect\
    \ Agents..............................  28\n              2.8.4.   Translation\
    \ Agents...........................  29\n       2.9.   End-to-End Security Framework.........................\
    \  30\n       2.10.  Diameter Path Authorization...........................  30\n\
    \   3.  Diameter Header..............................................  32\n  \
    \     3.1.   Command Codes.........................................  35\n    \
    \   3.2.   Command Code ABNF specification.......................  36\n      \
    \ 3.3.   Diameter Command Naming Conventions...................  38\n   4.  Diameter\
    \ AVPs................................................  38\n       4.1.   AVP\
    \ Header............................................  39\n              4.1.1.\
    \   Optional Header Elements.....................  41\n       4.2.   Basic AVP\
    \ Data Formats................................  41\n       4.3.   Derived AVP\
    \ Data Formats..............................  42\n       4.4.   Grouped AVP Values....................................\
    \  49\n              4.4.1.   Example AVP with a Grouped Data Type.........  50\n\
    \       4.5.   Diameter Base Protocol AVPs...........................  53\n  \
    \ 5.  Diameter Peers...............................................  56\n    \
    \   5.1.   Peer Connections......................................  56\n      \
    \ 5.2.   Diameter Peer Discovery...............................  56\n       5.3.\
    \   Capabilities Exchange.................................  59\n             \
    \ 5.3.1.   Capabilities-Exchange-Request................  60\n              5.3.2.\
    \   Capabilities-Exchange-Answer.................  60\n              5.3.3.  \
    \ Vendor-Id AVP................................  61\n              5.3.4.   Firmware-Revision\
    \ AVP........................  61\n              5.3.5.   Host-IP-Address AVP..........................\
    \  62\n              5.3.6.   Supported-Vendor-Id AVP......................  62\n\
    \              5.3.7.   Product-Name AVP.............................  62\n  \
    \     5.4.   Disconnecting Peer Connections........................  62\n    \
    \          5.4.1.   Disconnect-Peer-Request......................  63\n      \
    \        5.4.2.   Disconnect-Peer-Answer.......................  63\n        \
    \      5.4.3.   Disconnect-Cause AVP.........................  63\n       5.5.\
    \   Transport Failure Detection...........................  64\n             \
    \ 5.5.1.   Device-Watchdog-Request......................  64\n              5.5.2.\
    \   Device-Watchdog-Answer.......................  64\n              5.5.3.  \
    \ Transport Failure Algorithm..................  65\n              5.5.4.   Failover\
    \ and Failback Procedures.............  65\n       5.6.   Peer State Machine....................................\
    \  66\n              5.6.1.   Incoming connections.........................  68\n\
    \              5.6.2.   Events.......................................  69\n  \
    \            5.6.3.   Actions......................................  70\n    \
    \          5.6.4.   The Election Process.........................  71\n   6. \
    \ Diameter Message Processing..................................  71\n       6.1.\
    \   Diameter Request Routing Overview.....................  71\n             \
    \ 6.1.1.   Originating a Request........................  73\n              6.1.2.\
    \   Sending a Request............................  73\n              6.1.3.  \
    \ Receiving Requests...........................  73\n              6.1.4.   Processing\
    \ Local Requests....................  73\n              6.1.5.   Request Forwarding...........................\
    \  74\n              6.1.6.   Request Routing..............................  74\n\
    \              6.1.7.   Redirecting Requests.........................  74\n  \
    \            6.1.8.   Relaying and Proxying Requests...............  75\n    \
    \   6.2.   Diameter Answer Processing............................  76\n      \
    \        6.2.1.   Processing Received Answers..................  77\n        \
    \      6.2.2.   Relaying and Proxying Answers................  77\n       6.3.\
    \   Origin-Host AVP.......................................  77\n       6.4.  \
    \ Origin-Realm AVP......................................  78\n       6.5.   Destination-Host\
    \ AVP..................................  78\n       6.6.   Destination-Realm AVP.................................\
    \  78\n       6.7.   Routing AVPs..........................................  78\n\
    \              6.7.1.   Route-Record AVP.............................  79\n  \
    \            6.7.2.   Proxy-Info AVP...............................  79\n    \
    \          6.7.3.   Proxy-Host AVP...............................  79\n      \
    \        6.7.4.   Proxy-State AVP..............................  79\n       6.8.\
    \   Auth-Application-Id AVP...............................  79\n       6.9.  \
    \ Acct-Application-Id AVP...............................  79\n       6.10.  Inband-Security-Id\
    \ AVP................................  79\n       6.11.  Vendor-Specific-Application-Id\
    \ AVP....................  80\n       6.12.  Redirect-Host AVP.....................................\
    \  80\n       6.13.  Redirect-Host-Usage AVP...............................  80\n\
    \       6.14.  Redirect-Max-Cache-Time AVP...........................  81\n  \
    \     6.15.  E2E-Sequence AVP......................................  82\n   7.\
    \  Error Handling...............................................  82\n       7.1.\
    \   Result-Code AVP.......................................  84\n             \
    \ 7.1.1.   Informational................................  84\n              7.1.2.\
    \   Success......................................  84\n              7.1.3.  \
    \ Protocol Errors..............................  85\n              7.1.4.   Transient\
    \ Failures...........................  86\n              7.1.5.   Permanent Failures...........................\
    \  86\n       7.2.   Error Bit.............................................  88\n\
    \       7.3.   Error-Message AVP.....................................  89\n  \
    \     7.4.   Error-Reporting-Host AVP..............................  89\n    \
    \   7.5.   Failed-AVP AVP........................................  89\n      \
    \ 7.6.   Experimental-Result AVP...............................  90\n       7.7.\
    \   Experimental-Result-Code AVP..........................  90\n   8.  Diameter\
    \ User Sessions.......................................  90\n       8.1.   Authorization\
    \ Session State Machine...................  92\n       8.2.   Accounting Session\
    \ State Machine......................  96\n       8.3.   Server-Initiated Re-Auth..............................\
    \ 101\n              8.3.1.   Re-Auth-Request.............................. 102\n\
    \              8.3.2.   Re-Auth-Answer............................... 102\n  \
    \     8.4.   Session Termination................................... 103\n    \
    \          8.4.1.   Session-Termination-Request.................. 104\n      \
    \        8.4.2.   Session-Termination-Answer................... 105\n       8.5.\
    \   Aborting a Session.................................... 105\n             \
    \ 8.5.1.   Abort-Session-Request........................ 106\n              8.5.2.\
    \   Abort-Session-Answer......................... 106\n       8.6.   Inferring\
    \ Session Termination from Origin-State-Id.... 107\n       8.7.   Auth-Request-Type\
    \ AVP................................. 108\n       8.8.   Session-Id AVP........................................\
    \ 108\n       8.9.   Authorization-Lifetime AVP............................ 109\n\
    \       8.10.  Auth-Grace-Period AVP................................. 110\n  \
    \     8.11.  Auth-Session-State AVP................................ 110\n    \
    \   8.12.  Re-Auth-Request-Type AVP.............................. 110\n      \
    \ 8.13.  Session-Timeout AVP................................... 111\n       8.14.\
    \  User-Name AVP......................................... 111\n       8.15.  Termination-Cause\
    \ AVP................................. 111\n       8.16.  Origin-State-Id AVP...................................\
    \ 112\n       8.17.  Session-Binding AVP................................... 113\n\
    \       8.18.  Session-Server-Failover AVP........................... 113\n  \
    \     8.19.  Multi-Round-Time-Out AVP.............................. 114\n    \
    \   8.20.  Class AVP............................................. 114\n      \
    \ 8.21.  Event-Timestamp AVP................................... 115\n   9.  Accounting...................................................\
    \ 115\n       9.1.   Server Directed Model................................. 115\n\
    \       9.2.   Protocol Messages..................................... 116\n  \
    \     9.3.   Application Document Requirements..................... 116\n    \
    \   9.4.   Fault Resilience...................................... 116\n      \
    \ 9.5.   Accounting Records.................................... 117\n       9.6.\
    \   Correlation of Accounting Records..................... 118\n       9.7.  \
    \ Accounting Command-Codes.............................. 119\n              9.7.1.\
    \   Accounting-Request........................... 119\n              9.7.2.  \
    \ Accounting-Answer............................ 120\n       9.8.   Accounting\
    \ AVPs....................................... 121\n              9.8.1.   Accounting-Record-Type\
    \ AVP................... 121\n              9.8.2.   Acct-Interim-Interval AVP....................\
    \ 122\n              9.8.3.   Accounting-Record-Number AVP................. 123\n\
    \              9.8.4.   Acct-Session-Id AVP.......................... 123\n  \
    \            9.8.5.   Acct-Multi-Session-Id AVP.................... 123\n    \
    \          9.8.6.   Accounting-Sub-Session-Id AVP................ 123\n      \
    \        9.8.7.   Accounting-Realtime-Required AVP............. 123\n   10. AVP\
    \ Occurrence Table......................................... 124\n       10.1.\
    \  Base Protocol Command AVP Table....................... 124\n       10.2.  Accounting\
    \ AVP Table.................................. 126\n   11. IANA Considerations..........................................\
    \ 127\n       11.1.  AVP Header............................................ 127\n\
    \              11.1.1.  AVP Code..................................... 127\n  \
    \            11.1.2.  AVP Flags.................................... 128\n    \
    \   11.2.  Diameter Header....................................... 128\n      \
    \        11.2.1.  Command Codes................................ 128\n        \
    \      11.2.2.  Command Flags................................ 129\n       11.3.\
    \  Application Identifiers............................... 129\n       11.4.  AVP\
    \ Values............................................ 129\n              11.4.1.\
    \  Result-Code AVP Values....................... 129\n              11.4.2.  Accounting-Record-Type\
    \ AVP Values............ 130\n              11.4.3.  Termination-Cause AVP Values.................\
    \ 130\n              11.4.4.  Redirect-Host-Usage AVP Values............... 130\n\
    \              11.4.5.  Session-Server-Failover AVP Values........... 130\n  \
    \            11.4.6.  Session-Binding AVP Values................... 130\n    \
    \          11.4.7.  Disconnect-Cause AVP Values.................. 130\n      \
    \        11.4.8.  Auth-Request-Type AVP Values................. 130\n        \
    \      11.4.9.  Auth-Session-State AVP Values................ 130\n          \
    \    11.4.10. Re-Auth-Request-Type AVP Values.............. 131\n            \
    \  11.4.11. Accounting-Realtime-Required AVP Values...... 131\n       11.5.  Diameter\
    \ TCP/SCTP Port Numbers........................ 131\n       11.6.  NAPTR Service\
    \ Fields.................................. 131\n   12. Diameter Protocol Related\
    \ Configurable Parameters............ 131\n   13. Security Considerations......................................\
    \ 132\n       13.1.  IPsec Usage........................................... 133\n\
    \       13.2.  TLS Usage............................................. 134\n  \
    \     13.3.  Peer-to-Peer Considerations........................... 134\n   14.\
    \ References................................................... 136\n       14.1.\
    \  Normative References.................................. 136\n       14.2.  Informative\
    \ References................................ 138\n   15. Acknowledgements.............................................\
    \ 140\n   Appendix A.  Diameter Service Template........................... 141\n\
    \   Appendix B.  NAPTR Example....................................... 142\n  \
    \ Appendix C.  Duplicate Detection................................. 143\n   Appendix\
    \ D.  Intellectual Property Statement..................... 145\n   Authors' Addresses...............................................\
    \ 146\n   Full Copyright Statement......................................... 147\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Authentication, Authorization and Accounting (AAA) protocols\
    \ such as\n   TACACS [TACACS] and RADIUS [RADIUS] were initially deployed to\n\
    \   provide dial-up PPP [PPP] and terminal server access.  Over time,\n   with\
    \ the growth of the Internet and the introduction of new access\n   technologies,\
    \ including wireless, DSL, Mobile IP and Ethernet,\n   routers and network access\
    \ servers (NAS) have increased in complexity\n   and density, putting new demands\
    \ on AAA protocols.\n   Network access requirements for AAA protocols are summarized\
    \ in\n   [AAAREQ].  These include:\n   Failover\n      [RADIUS] does not define\
    \ failover mechanisms, and as a result,\n      failover behavior differs between\
    \ implementations.  In order to\n      provide well defined failover behavior,\
    \ Diameter supports\n      application-layer acknowledgements, and defines failover\n\
    \      algorithms and the associated state machine.  This is described in\n  \
    \    Section 5.5 and [AAATRANS].\n   Transmission-level security\n      [RADIUS]\
    \ defines an application-layer authentication and integrity\n      scheme that\
    \ is required only for use with Response packets.  While\n      [RADEXT] defines\
    \ an additional authentication and integrity\n      mechanism, use is only required\
    \ during Extensible Authentication\n      Protocol (EAP) sessions.  While attribute-hiding\
    \ is supported,\n      [RADIUS] does not provide support for per-packet confidentiality.\n\
    \      In accounting, [RADACCT] assumes that replay protection is\n      provided\
    \ by the backend billing server, rather than within the\n      protocol itself.\n\
    \      While [RFC3162] defines the use of IPsec with RADIUS, support for\n   \
    \   IPsec is not required.  Since within [IKE] authentication occurs\n      only\
    \ within Phase 1 prior to the establishment of IPsec SAs in\n      Phase 2, it\
    \ is typically not possible to define separate trust or\n      authorization schemes\
    \ for each application.  This limits the\n      usefulness of IPsec in inter-domain\
    \ AAA applications (such as\n      roaming) where it may be desirable to define\
    \ a distinct\n      certificate hierarchy for use in a AAA deployment.  In order\
    \ to\n      provide universal support for transmission-level security, and\n \
    \     enable both intra- and inter-domain AAA deployments, IPsec support\n   \
    \   is mandatory in Diameter, and TLS support is optional.  Security\n      is\
    \ discussed in Section 13.\n   Reliable transport\n      RADIUS runs over UDP,\
    \ and does not define retransmission behavior;\n      as a result, reliability\
    \ varies between implementations.  As\n      described in [ACCMGMT], this is a\
    \ major issue in accounting, where\n      packet loss may translate directly into\
    \ revenue loss.  In order to\n      provide well defined transport behavior, Diameter\
    \ runs over\n      reliable transport mechanisms (TCP, SCTP) as defined in\n \
    \     [AAATRANS].\n   Agent support\n      [RADIUS] does not provide for explicit\
    \ support for agents,\n      including Proxies, Redirects and Relays.  Since the\
    \ expected\n      behavior is not defined, it varies between implementations.\n\
    \      Diameter defines agent behavior explicitly; this is described in\n    \
    \  Section 2.8.\n   Server-initiated messages\n      While RADIUS server-initiated\
    \ messages are defined in [DYNAUTH],\n      support is optional.  This makes it\
    \ difficult to implement\n      features such as unsolicited disconnect or\n \
    \     reauthentication/reauthorization on demand across a heterogeneous\n    \
    \  deployment.  Support for server-initiated messages is mandatory in\n      Diameter,\
    \ and is described in Section 8.\n   Auditability\n      RADIUS does not define\
    \ data-object security mechanisms, and as a\n      result, untrusted proxies may\
    \ modify attributes or even packet\n      headers without being detected.  Combined\
    \ with lack of support for\n      capabilities negotiation, this makes it very\
    \ difficult to\n      determine what occurred in the event of a dispute.  While\n\
    \      implementation of data object security is not mandatory within\n      Diameter,\
    \ these capabilities are supported, and are described in\n      [AAACMS].\n  \
    \ Transition support\n      While Diameter does not share a common protocol data\
    \ unit (PDU)\n      with RADIUS, considerable effort has been expended in enabling\n\
    \      backward compatibility with RADIUS, so that the two protocols may\n   \
    \   be deployed in the same network.  Initially, it is expected that\n      Diameter\
    \ will be deployed within new network devices, as well as\n      within gateways\
    \ enabling communication between legacy RADIUS\n      devices and Diameter agents.\
    \  This capability, described in\n      [NASREQ], enables Diameter support to\
    \ be added to legacy networks,\n      by addition of a gateway or server speaking\
    \ both RADIUS and\n      Diameter.\n   In addition to addressing the above requirements,\
    \ Diameter also\n   provides support for the following:\n   Capability negotiation\n\
    \      RADIUS does not support error messages, capability negotiation, or\n  \
    \    a mandatory/non-mandatory flag for attributes.  Since RADIUS\n      clients\
    \ and servers are not aware of each other's capabilities,\n      they may not\
    \ be able to successfully negotiate a mutually\n      acceptable service, or in\
    \ some cases, even be aware of what\n      service has been implemented.  Diameter\
    \ includes support for error\n      handling (Section 7), capability negotiation\
    \ (Section 5.3), and\n      mandatory/non-mandatory attribute-value pairs (AVPs)\
    \ (Section\n      4.1).\n   Peer discovery and configuration\n      RADIUS implementations\
    \ typically require that the name or address\n      of servers or clients be manually\
    \ configured, along with the\n      corresponding shared secrets.  This results\
    \ in a large\n      administrative burden, and creates the temptation to reuse\
    \ the\n      RADIUS shared secret, which can result in major security\n      vulnerabilities\
    \ if the Request Authenticator is not globally and\n      temporally unique as\
    \ required in [RADIUS].  Through DNS, Diameter\n      enables dynamic discovery\
    \ of peers.  Derivation of dynamic session\n      keys is enabled via transmission-level\
    \ security.\n   Roaming support\n      The ROAMOPS WG provided a survey of roaming\
    \ implementations\n      [ROAMREV], detailed roaming requirements [ROAMCRIT],\
    \ defined the\n      Network Access Identifier (NAI) [NAI], and documented existing\n\
    \      implementations (and imitations) of RADIUS-based roaming\n      [PROXYCHAIN].\
    \  In order to improve scalability, [PROXYCHAIN]\n      introduced the concept\
    \ of proxy chaining via an intermediate\n      server, facilitating roaming between\
    \ providers.  However, since\n      RADIUS does not provide explicit support for\
    \ proxies, and lacks\n      auditability and transmission-level security features,\
    \ RADIUS-\n      based roaming is vulnerable to attack from external parties as\n\
    \      well as susceptible to fraud perpetrated by the roaming partners\n    \
    \  themselves.  As a result, it is not suitable for wide-scale\n      deployment\
    \ on the Internet [PROXYCHAIN].  By providing explicit\n      support for inter-domain\
    \ roaming and message routing (Sections 2.7\n      and 6), auditability [AAACMS],\
    \ and transmission-layer security\n      (Section 13) features, Diameter addresses\
    \ these limitations and\n      provides for secure and scalable roaming.\n   In\
    \ the decade since AAA protocols were first introduced, the\n   capabilities of\
    \ Network Access Server (NAS) devices have increased\n   substantially.  As a\
    \ result, while Diameter is a considerably more\n   sophisticated protocol than\
    \ RADIUS, it remains feasible to implement\n   within embedded devices, given\
    \ improvements in processor speeds and\n   the widespread availability of embedded\
    \ IPsec and TLS\n   implementations.\n"
- title: 1.1.  Diameter Protocol
  contents:
  - "1.1.  Diameter Protocol\n   The Diameter base protocol provides the following\
    \ facilities:\n   -  Delivery of AVPs (attribute value pairs)\n   -  Capabilities\
    \ negotiation\n   -  Error notification\n   -  Extensibility, through addition\
    \ of new commands and AVPs (required\n      in [AAAREQ]).\n   -  Basic services\
    \ necessary for applications, such as handling of\n      user sessions or accounting\n\
    \   All data delivered by the protocol is in the form of an AVP.  Some of\n  \
    \ these AVP values are used by the Diameter protocol itself, while\n   others\
    \ deliver data associated with particular applications that\n   employ Diameter.\
    \  AVPs may be added arbitrarily to Diameter messages,\n   so long as the required\
    \ AVPs are included and AVPs that are\n   explicitly excluded are not included.\
    \  AVPs are used by the base\n   Diameter protocol to support the following required\
    \ features:\n   -  Transporting of user authentication information, for the purposes\n\
    \      of enabling the Diameter server to authenticate the user.\n   -  Transporting\
    \ of service specific authorization information,\n      between client and servers,\
    \ allowing the peers to decide whether a\n      user's access request should be\
    \ granted.\n   -  Exchanging resource usage information, which MAY be used for\n\
    \      accounting purposes, capacity planning, etc.\n   -  Relaying, proxying\
    \ and redirecting of Diameter messages through a\n      server hierarchy.\n  \
    \ The Diameter base protocol provides the minimum requirements needed\n   for\
    \ a AAA protocol, as required by [AAAREQ].  The base protocol may\n   be used\
    \ by itself for accounting purposes only, or it may be used\n   with a Diameter\
    \ application, such as Mobile IPv4 [DIAMMIP], or\n   network access [NASREQ].\
    \  It is also possible for the base protocol\n   to be extended for use in new\
    \ applications, via the addition of new\n   commands or AVPs.  At this time the\
    \ focus of Diameter is network\n   access and accounting applications.  A truly\
    \ generic AAA protocol\n   used by many applications might provide functionality\
    \ not provided by\n   Diameter.  Therefore, it is imperative that the designers\
    \ of new\n   applications understand their requirements before using Diameter.\n\
    \   See Section 2.4 for more information on Diameter applications.\n   Any node\
    \ can initiate a request.  In that sense, Diameter is a peer-\n   to-peer protocol.\
    \  In this document, a Diameter Client is a device at\n   the edge of the network\
    \ that performs access control, such as a\n   Network Access Server (NAS) or a\
    \ Foreign Agent (FA).  A Diameter\n   client generates Diameter messages to request\
    \ authentication,\n   authorization, and accounting services for the user.  A\
    \ Diameter\n   agent is a node that does not authenticate and/or authorize messages\n\
    \   locally; agents include proxies, redirects and relay agents.  A\n   Diameter\
    \ server performs authentication and/or authorization of the\n   user.  A Diameter\
    \ node MAY act as an agent for certain requests while\n   acting as a server for\
    \ others.\n   The Diameter protocol also supports server-initiated messages, such\n\
    \   as a request to abort service to a particular user.\n"
- title: 1.1.1.  Description of the Document Set
  contents:
  - "1.1.1.  Description of the Document Set\n   Currently, the Diameter specification\
    \ consists of a base\n   specification (this document), Transport Profile [AAATRANS]\
    \ and\n   applications: Mobile IPv4 [DIAMMIP], and NASREQ [NASREQ].\n   The Transport\
    \ Profile document [AAATRANS] discusses transport layer\n   issues that arise\
    \ with AAA protocols and recommendations on how to\n   overcome these issues.\
    \  This document also defines the Diameter\n   failover algorithm and state machine.\n\
    \   The Mobile IPv4 [DIAMMIP] application defines a Diameter application\n   that\
    \ allows a Diameter server to perform AAA functions for Mobile\n   IPv4 services\
    \ to a mobile node.\n   The NASREQ [NASREQ] application defines a Diameter Application\
    \ that\n   allows a Diameter server to be used in a PPP/SLIP Dial-Up and\n   Terminal\
    \ Server Access environment.  Consideration was given for\n   servers that need\
    \ to perform protocol conversion between Diameter and\n   RADIUS.\n   In summary,\
    \ this document defines the base protocol specification for\n   AAA, which includes\
    \ support for accounting.  The Mobile IPv4 and the\n   NASREQ  documents describe\
    \ applications that use this base\n   specification for Authentication, Authorization\
    \ and Accounting.\n"
- title: 1.2.  Approach to Extensibility
  contents:
  - "1.2.  Approach to Extensibility\n   The Diameter protocol is designed to be extensible,\
    \ using several\n   mechanisms, including:\n      -  Defining new AVP values\n\
    \      -  Creating new AVPs\n      -  Creating new authentication/authorization\
    \ applications\n      -  Creating new accounting applications\n      -  Application\
    \ authentication procedures\n   Reuse of existing AVP values, AVPs and Diameter\
    \ applications are\n   strongly recommended.  Reuse simplifies standardization\
    \ and\n   implementation and avoids potential interoperability issues.  It is\n\
    \   expected that command codes are reused; new command codes can only be\n  \
    \ created by IETF Consensus (see Section 11.2.1).\n"
- title: 1.2.1.  Defining New AVP Values
  contents:
  - "1.2.1.  Defining New AVP Values\n   New applications should attempt to reuse\
    \ AVPs defined in existing\n   applications when possible, as opposed to creating\
    \ new AVPs.  For\n   AVPs of type Enumerated, an application may require a new\
    \ value to\n   communicate some service-specific information.\n   In order to\
    \ allocate a new AVP value, a request MUST be sent to IANA\n   [IANA], along with\
    \ an explanation of the new AVP value.  IANA\n   considerations for Diameter are\
    \ discussed in Section 11.\n"
- title: 1.2.2.  Creating New AVPs
  contents:
  - "1.2.2.  Creating New AVPs\n   When no existing AVP can be used, a new AVP should\
    \ be created.  The\n   new AVP being defined MUST use one of the data types listed\
    \ in\n   Section 4.2.\n   In the event that a logical grouping of AVPs is necessary,\
    \ and\n   multiple \"groups\" are possible in a given command, it is recommended\n\
    \   that a Grouped AVP be used (see Section 4.4).\n   In order to create a new\
    \ AVP, a request MUST be sent to IANA, with a\n   specification for the AVP. \
    \ The request MUST include the commands\n   that would make use of the AVP.\n"
- title: 1.2.3.  Creating New Authentication Applications
  contents:
  - "1.2.3.  Creating New Authentication Applications\n   Every Diameter application\
    \ specification MUST have an IANA assigned\n   Application Identifier (see Section\
    \ 2.4) or a vendor specific\n   Application Identifier.\n   Should a new Diameter\
    \ usage scenario find itself unable to fit within\n   an existing application\
    \ without requiring major changes to the\n   specification, it may be desirable\
    \ to create a new Diameter\n   application.  Major changes to an application include:\n\
    \   -  Adding new AVPs to the command, which have the \"M\" bit set.\n   -  Requiring\
    \ a command that has a different number of round trips to\n      satisfy a request\
    \ (e.g., application foo has a command that\n      requires one round trip, but\
    \ new application bar has a command\n      that requires two round trips to complete).\n\
    \   -  Adding support for an authentication method requiring definition\n    \
    \  of new AVPs for use with the application.  Since a new EAP\n      authentication\
    \ method can be supported within Diameter without\n      requiring new AVPs, addition\
    \ of EAP methods does not require the\n      creation of a new authentication\
    \ application.\n   Creation of a new application should be viewed as a last resort.\
    \  An\n   implementation MAY add arbitrary non-mandatory AVPs to any command\n\
    \   defined in an application, including vendor-specific AVPs without\n   needing\
    \ to define a new application.  Please refer to Section 11.1.1\n   for details.\n\
    \   In order to justify allocation of a new application identifier,\n   Diameter\
    \ applications MUST define one Command Code, or add new\n   mandatory AVPs to\
    \ the ABNF.\n   The expected AVPs MUST be defined in an ABNF [ABNF] grammar (see\n\
    \   Section 3.2).  If the Diameter application has accounting\n   requirements,\
    \ it MUST also specify the AVPs that are to be present in\n   the Diameter Accounting\
    \ messages (see Section 9.3).  However, just\n   because a new authentication\
    \ application id is required, does not\n   imply that a new accounting application\
    \ id is required.\n   When possible, a new Diameter application SHOULD reuse existing\n\
    \   Diameter AVPs, in order to avoid defining multiple AVPs that carry\n   similar\
    \ information.\n"
- title: 1.2.4.  Creating New Accounting Applications
  contents:
  - "1.2.4.  Creating New Accounting Applications\n   There are services that only\
    \ require Diameter accounting.  Such\n   services need to define the AVPs carried\
    \ in the Accounting-Request\n   (ACR)/ Accounting-Answer (ACA) messages, but do\
    \ not need to define\n   new command codes.  An implementation MAY add arbitrary\
    \ non-mandatory\n   AVPs (AVPs with the \"M\" bit not set) to any command defined\
    \ in an\n   application, including vendor-specific AVPs, without needing to\n\
    \   define a new accounting application.  Please refer to Section 11.1.1\n   for\
    \ details.\n   Application Identifiers are still required for Diameter capability\n\
    \   exchange.  Every Diameter accounting application specification MUST\n   have\
    \ an IANA assigned Application Identifier (see Section 2.4) or a\n   vendor specific\
    \ Application Identifier.\n   Every Diameter implementation MUST support accounting.\
    \  Basic\n   accounting support is sufficient to handle any application that uses\n\
    \   the ACR/ACA commands defined in this document, as long as no new\n   mandatory\
    \ AVPs are added.  A mandatory AVP is defined as one which\n   has the \"M\" bit\
    \ set when sent within an accounting command,\n   regardless of whether it is\
    \ required or optional within the ABNF for\n   the accounting application.\n \
    \  The creation of a new accounting application should be viewed as a\n   last\
    \ resort and MUST NOT be used unless a new command or additional\n   mechanisms\
    \ (e.g., application defined state machine) is defined\n   within the application,\
    \ or new mandatory AVPs are added to the ABNF.\n   Within an accounting command,\
    \ setting the \"M\" bit implies that a\n   backend server (e.g., billing server)\
    \ or the accounting server itself\n   MUST understand the AVP in order to compute\
    \ a correct bill.  If the\n   AVP is not relevant to the billing process, when\
    \ the AVP is included\n   within an accounting command, it MUST NOT have the \"\
    M\" bit set, even\n   if the \"M\" bit is set when the same AVP is used within\
    \ other Diameter\n   commands (i.e., authentication/authorization commands).\n\
    \   A DIAMETER base accounting implementation MUST be configurable to\n   advertise\
    \ supported accounting applications in order to prevent the\n   accounting server\
    \ from accepting accounting requests for unbillable\n   services.  The combination\
    \ of the home domain and the accounting\n   application Id can be used in order\
    \ to route the request to the\n   appropriate accounting server.\n   When possible,\
    \ a new Diameter accounting application SHOULD attempt\n   to reuse existing AVPs,\
    \ in order to avoid defining multiple AVPs that\n   carry similar information.\n\
    \   If the base accounting is used without any mandatory AVPs, new\n   commands\
    \ or additional mechanisms (e.g., application defined state\n   machine), then\
    \ the base protocol defined standard accounting\n   application Id (Section 2.4)\
    \ MUST be used in ACR/ACA commands.\n"
- title: 1.2.5.  Application Authentication Procedures
  contents:
  - "1.2.5.  Application Authentication Procedures\n   When possible, applications\
    \ SHOULD be designed such that new\n   authentication methods MAY be added without\
    \ requiring changes to the\n   application.  This MAY require that new AVP values\
    \ be assigned to\n   represent the new authentication transform, or any other\
    \ scheme that\n   produces similar results.  When possible, authentication frameworks,\n\
    \   such as Extensible Authentication Protocol [EAP], SHOULD be used.\n"
- title: 1.3.  Terminology
  contents:
  - "1.3.  Terminology\n   AAA\n      Authentication, Authorization and Accounting.\n\
    \   Accounting\n      The act of collecting information on resource usage for\
    \ the\n      purpose of capacity planning, auditing, billing or cost\n      allocation.\n\
    \   Accounting Record\n      An accounting record represents a summary of the\
    \ resource\n      consumption of a user over the entire session.  Accounting servers\n\
    \      creating the accounting record may do so by processing interim\n      accounting\
    \ events or accounting events from several devices\n      serving the same user.\n\
    \   Authentication\n      The act of verifying the identity of an entity (subject).\n\
    \   Authorization\n      The act of determining whether a requesting entity (subject)\
    \ will\n      be allowed access to a resource (object).\n   AVP\n      The Diameter\
    \ protocol consists of a header followed by one or more\n      Attribute-Value-Pairs\
    \ (AVPs).  An AVP includes a header and is\n      used to encapsulate protocol-specific\
    \ data (e.g., routing\n      information) as well as authentication, authorization\
    \ or\n      accounting information.\n   Broker\n      A broker is a business term\
    \ commonly used in AAA infrastructures.\n      A broker is either a relay, proxy\
    \ or redirect agent, and MAY be\n      operated by roaming consortiums.  Depending\
    \ on the business model,\n      a broker may either choose to  deploy relay agents\
    \ or proxy\n      agents.\n   Diameter Agent\n      A Diameter Agent is a Diameter\
    \ node that provides either relay,\n      proxy, redirect or translation services.\n\
    \   Diameter Client\n      A Diameter Client is a device at the edge of the network\
    \ that\n      performs access control.  An example of a Diameter client is a\n\
    \      Network Access Server (NAS) or a Foreign Agent (FA).\n   Diameter Node\n\
    \      A Diameter node is a host process that implements the Diameter\n      protocol,\
    \ and acts either as a Client, Agent or Server.\n   Diameter Peer\n      A Diameter\
    \ Peer is a Diameter Node to which a given Diameter Node\n      has a direct transport\
    \ connection.\n   Diameter Security Exchange\n      A Diameter Security Exchange\
    \ is a process through which two\n      Diameter nodes establish end-to-end security.\n\
    \   Diameter Server\n      A Diameter Server is one that handles authentication,\n\
    \      authorization and accounting requests for a particular realm.  By\n   \
    \   its very nature, a Diameter Server MUST support Diameter\n      applications\
    \ in addition to the base protocol.\n   Downstream\n      Downstream is used to\
    \ identify the direction of a particular\n      Diameter message from the home\
    \ server towards the access device.\n   End-to-End Security\n      TLS and IPsec\
    \ provide hop-by-hop security, or security across a\n      transport connection.\
    \  When relays or proxy are involved, this\n      hop-by-hop security does not\
    \ protect the entire Diameter user\n      session.  End-to-end security is security\
    \ between two Diameter\n      nodes, possibly communicating through Diameter Agents.\
    \  This\n      security protects the entire Diameter communications path from\
    \ the\n      originating Diameter node to the terminating Diameter node.\n   Home\
    \ Realm\n      A Home Realm is the administrative domain with which the user\n\
    \      maintains an account relationship.\n   Home Server\n      See Diameter\
    \ Server.\n   Interim accounting\n      An interim accounting message provides\
    \ a snapshot of usage during\n      a user's session.  It is typically implemented\
    \ in order to provide\n      for partial accounting of a user's session in the\
    \ case of a device\n      reboot or other network problem prevents the reception\
    \ of a\n      session summary message or session record.\n   Local Realm\n   \
    \   A local realm is the administrative domain providing services to a\n     \
    \ user.  An administrative domain MAY act as a local realm for\n      certain\
    \ users, while being a home realm for others.\n   Multi-session\n      A multi-session\
    \ represents a logical linking of several sessions.\n      Multi-sessions are\
    \ tracked by using the Acct-Multi-Session-Id.  An\n      example of a multi-session\
    \ would be a Multi-link PPP bundle.  Each\n      leg of the bundle would be a\
    \ session while the entire bundle would\n      be a multi-session.\n   Network\
    \ Access Identifier\n      The Network Access Identifier, or NAI [NAI], is used\
    \ in the\n      Diameter protocol to extract a user's identity and realm.  The\n\
    \      identity is used to identify the user during authentication and/or\n  \
    \    authorization, while the realm is used for message routing\n      purposes.\n\
    \   Proxy Agent or Proxy\n      In addition to forwarding requests and responses,\
    \ proxies make\n      policy decisions relating to resource usage and provisioning.\n\
    \      This is typically accomplished by tracking the state of NAS\n      devices.\
    \  While proxies typically do not respond to client\n      Requests prior to receiving\
    \ a Response from the server, they may\n      originate Reject messages in cases\
    \ where policies are violated.\n      As a result, proxies need to understand\
    \ the semantics of the\n      messages passing through them, and may not support\
    \ all Diameter\n      applications.\n   Realm\n      The string in the NAI that\
    \ immediately follows the '@' character.\n      NAI realm names are required to\
    \ be unique, and are piggybacked on\n      the administration of the DNS namespace.\
    \  Diameter makes use of\n      the realm, also loosely referred to as domain,\
    \ to determine\n      whether messages can be satisfied locally, or whether they\
    \ must be\n      routed or redirected.  In RADIUS, realm names are not necessarily\n\
    \      piggybacked on the DNS namespace but may be independent of it.\n   Real-time\
    \ Accounting\n      Real-time accounting involves the processing of information\
    \ on\n      resource usage within a defined time window.  Time constraints are\n\
    \      typically imposed in order to limit financial risk.\n   Relay Agent or\
    \ Relay\n      Relays forward requests and responses based on routing-related\n\
    \      AVPs and realm routing table entries.  Since relays do not make\n     \
    \ policy decisions, they do not examine or alter non-routing AVPs.\n      As a\
    \ result, relays never originate messages, do not need to\n      understand the\
    \ semantics of messages or non-routing AVPs, and are\n      capable of handling\
    \ any Diameter application or message type.\n      Since relays make decisions\
    \ based on information in routing AVPs\n      and realm forwarding tables they\
    \ do not keep state on NAS resource\n      usage or sessions in progress.\n  \
    \ Redirect Agent\n      Rather than forwarding requests and responses between\
    \ clients and\n      servers, redirect agents refer clients to servers and allow\
    \ them\n      to communicate directly.  Since redirect agents do not sit in the\n\
    \      forwarding path, they do not alter any AVPs transiting between\n      client\
    \ and server.  Redirect agents do not originate messages and\n      are capable\
    \ of handling any message type, although they may be\n      configured only to\
    \ redirect messages of certain types, while\n      acting as relay or proxy agents\
    \ for other types.  As with proxy\n      agents, redirect agents do not keep state\
    \ with respect to sessions\n      or NAS resources.\n   Roaming Relationships\n\
    \      Roaming relationships include relationships between companies and\n   \
    \   ISPs, relationships among peer ISPs within a roaming consortium,\n      and\
    \ relationships between an ISP and a roaming consortium.\n   Security Association\n\
    \      A security association is an association between two endpoints in\n   \
    \   a Diameter session which allows the endpoints to communicate with\n      integrity\
    \ and confidentially, even in the presence of relays\n      and/or proxies.\n\
    \   Session\n      A session is a related progression of events devoted to a\n\
    \      particular activity.  Each application SHOULD provide guidelines\n    \
    \  as to when a session begins and ends.  All Diameter packets with\n      the\
    \ same Session-Identifier are considered to be part of the same\n      session.\n\
    \   Session state\n      A stateful agent is one that maintains session state\
    \ information,\n      by keeping track of all authorized active sessions.  Each\n\
    \      authorized session is bound to a particular service, and its state\n  \
    \    is considered active either until it is notified otherwise, or by\n     \
    \ expiration.\n   Sub-session\n      A sub-session represents a distinct service\
    \ (e.g., QoS or data\n      characteristics) provided to a given session.  These\
    \ services may\n      happen concurrently (e.g., simultaneous voice and data transfer\n\
    \      during the same session) or serially.  These changes in sessions\n    \
    \  are tracked with the Accounting-Sub-Session-Id.\n   Transaction state\n   \
    \   The Diameter protocol requires that agents maintain transaction\n      state,\
    \ which is used for failover purposes.  Transaction state\n      implies that\
    \ upon forwarding a request, the Hop-by-Hop identifier\n      is saved; the field\
    \ is replaced with a locally unique identifier,\n      which is restored to its\
    \ original value when the corresponding\n      answer is received.  The request's\
    \ state is released upon receipt\n      of the answer.  A stateless agent is one\
    \ that only maintains\n      transaction state.\n   Translation Agent\n      A\
    \ translation agent is a stateful Diameter node that performs\n      protocol\
    \ translation between Diameter and another AAA protocol,\n      such as RADIUS.\n\
    \   Transport Connection\n      A transport connection is a TCP or SCTP connection\
    \ existing\n      directly between two Diameter peers, otherwise known as a Peer-\n\
    \      to-Peer Connection.\n   Upstream\n      Upstream is used to identify the\
    \ direction of a particular\n      Diameter message from the access device towards\
    \ the home server.\n   User\n      The entity requesting or using some resource,\
    \ in support of which\n      a Diameter client has generated a request.\n"
- title: 2.  Protocol Overview
  contents:
  - "2.  Protocol Overview\n   The base Diameter protocol may be used by itself for\
    \ accounting\n   applications, but for use in authentication and authorization\
    \ it is\n   always extended for a particular application.  Two Diameter\n   applications\
    \ are defined by companion documents:  NASREQ [NASREQ],\n   Mobile IPv4 [DIAMMIP].\
    \  These applications are introduced in this\n   document but specified elsewhere.\
    \  Additional Diameter applications\n   MAY be defined in the future (see Section\
    \ 11.3).\n   Diameter Clients MUST support the base protocol, which includes\n\
    \   accounting.  In addition, they MUST fully support each Diameter\n   application\
    \ that is needed to implement the client's service, e.g.,\n   NASREQ and/or Mobile\
    \ IPv4.  A Diameter Client that does not support\n   both NASREQ and Mobile IPv4,\
    \ MUST be referred to as \"Diameter X\n   Client\" where X is the application\
    \ which it supports, and not a\n   \"Diameter Client\".\n   Diameter Servers MUST\
    \ support the base protocol, which includes\n   accounting.  In addition, they\
    \ MUST fully support each Diameter\n   application that is needed to implement\
    \ the intended service, e.g.,\n   NASREQ and/or Mobile IPv4.  A Diameter Server\
    \ that does not support\n   both NASREQ and Mobile IPv4, MUST be referred to as\
    \ \"Diameter X\n   Server\" where X is the application which it supports, and\
    \ not a\n   \"Diameter Server\".\n   Diameter Relays and redirect agents are,\
    \ by definition, protocol\n   transparent, and MUST transparently support the\
    \ Diameter base\n   protocol, which includes accounting, and all Diameter applications.\n\
    \   Diameter proxies MUST support the base protocol, which includes\n   accounting.\
    \  In addition, they MUST fully support each Diameter\n   application that is\
    \ needed to implement proxied services, e.g.,\n   NASREQ and/or Mobile IPv4. \
    \ A Diameter proxy which does not support\n   also both NASREQ and Mobile IPv4,\
    \ MUST be referred to as \"Diameter X\n   Proxy\" where X is the application which\
    \ it supports, and not a\n   \"Diameter Proxy\".\n   The base Diameter protocol\
    \ concerns itself with capabilities\n   negotiation, how messages are sent and\
    \ how peers may eventually be\n   abandoned.  The base protocol also defines certain\
    \ rules that apply\n   to all exchanges of messages between Diameter nodes.\n\
    \   Communication between Diameter peers begins with one peer sending a\n   message\
    \ to another Diameter peer.  The set of AVPs included in the\n   message is determined\
    \ by a particular Diameter application.  One AVP\n   that is included to reference\
    \ a user's session is the Session-Id.\n   The initial request for authentication\
    \ and/or authorization of a user\n   would include the Session-Id.  The Session-Id\
    \ is then used in all\n   subsequent messages to identify the user's session (see\
    \ Section 8 for\n   more information).  The communicating party may accept the\
    \ request,\n   or reject it by returning an answer message with the Result-Code\
    \ AVP\n   set to indicate an error occurred.  The specific behavior of the\n \
    \  Diameter server or client receiving a request depends on the Diameter\n   application\
    \ employed.\n   Session state (associated with a Session-Id) MUST be freed upon\n\
    \   receipt of the Session-Termination-Request, Session-Termination-\n   Answer,\
    \ expiration of authorized service time in the Session-Timeout\n   AVP, and according\
    \ to rules established in a particular Diameter\n   application.\n"
- title: 2.1.  Transport
  contents:
  - "2.1.  Transport\n   Transport profile is defined in [AAATRANS].\n   The base\
    \ Diameter protocol is run on port 3868 of both TCP [TCP] and\n   SCTP [SCTP]\
    \ transport protocols.\n   Diameter clients MUST support either TCP or SCTP, while\
    \ agents and\n   servers MUST support both.  Future versions of this specification\
    \ MAY\n   mandate that clients support SCTP.\n   A Diameter node MAY initiate\
    \ connections from a source port other\n   than the one that it declares it accepts\
    \ incoming connections on, and\n   MUST be prepared to receive connections on\
    \ port 3868.  A given\n   Diameter instance of the peer state machine MUST NOT\
    \ use more than\n   one transport connection to communicate with a given peer,\
    \ unless\n   multiple instances exist on the peer in which case a separate\n \
    \  connection per process is allowed.\n   When no transport connection exists\
    \ with a peer, an attempt to\n   connect SHOULD be periodically made.  This behavior\
    \ is handled via\n   the Tc timer, whose recommended value is 30 seconds.  There\
    \ are\n   certain exceptions to this rule, such as when a peer has terminated\n\
    \   the transport connection stating that it does not wish to\n   communicate.\n\
    \   When connecting to a peer and either zero or more transports are\n   specified,\
    \ SCTP SHOULD be tried first, followed by TCP.  See Section\n   5.2 for more information\
    \ on peer discovery.\n   Diameter implementations SHOULD be able to interpret\
    \ ICMP protocol\n   port unreachable messages as explicit indications that the\
    \ server is\n   not reachable, subject to security policy on trusting such messages.\n\
    \   Diameter implementations SHOULD also be able to interpret a reset\n   from\
    \ the transport and timed-out connection attempts.\n   If Diameter receives data\
    \ up from TCP that cannot be parsed or\n   identified as a Diameter error made\
    \ by the peer, the stream is\n   compromised and cannot be recovered.  The transport\
    \ connection MUST\n   be closed using a RESET call (send a TCP RST bit) or an\
    \ SCTP ABORT\n   message (graceful closure is compromised).\n"
- title: 2.1.1.  SCTP Guidelines
  contents:
  - "2.1.1.  SCTP Guidelines\n   The following are guidelines for Diameter implementations\
    \ that\n   support SCTP:\n   1. For interoperability: All Diameter nodes MUST\
    \ be prepared to\n      receive Diameter messages on any SCTP stream in the association.\n\
    \   2. To prevent blocking: All Diameter nodes SHOULD utilize all SCTP\n     \
    \ streams available to the association to prevent head-of-the-line\n      blocking.\n"
- title: 2.2.  Securing Diameter Messages
  contents:
  - "2.2.  Securing Diameter Messages\n   Diameter clients, such as Network Access\
    \ Servers (NASes) and Mobility\n   Agents MUST support IP Security [SECARCH],\
    \ and MAY support TLS [TLS].\n   Diameter servers MUST support TLS and IPsec.\
    \  The Diameter protocol\n   MUST NOT be used without any security mechanism (TLS\
    \ or IPsec).\n   It is suggested that IPsec can be used primarily at the edges\
    \ and in\n   intra-domain traffic, such as using pre-shared keys between a NAS\
    \ a\n   local AAA proxy.  This also eases the requirements on the NAS to\n   support\
    \ certificates.  It is also suggested that inter-domain traffic\n   would primarily\
    \ use TLS.  See Sections 13.1 and 13.2 for more details\n   on IPsec and TLS usage.\n"
- title: 2.3.  Diameter Application Compliance
  contents:
  - "2.3.  Diameter Application Compliance\n   Application Identifiers are advertised\
    \ during the capabilities\n   exchange phase (see Section 5.3).  For a given application,\n\
    \   advertising support of an application implies that the sender\n   supports\
    \ all command codes, and the AVPs specified in the associated\n   ABNFs, described\
    \ in the specification.\n   An implementation MAY add arbitrary non-mandatory\
    \ AVPs to any command\n   defined in an application, including vendor-specific\
    \ AVPs.  Please\n   refer to Section 11.1.1 for details.\n"
- title: 2.4.  Application Identifiers
  contents:
  - "2.4.  Application Identifiers\n   Each Diameter application MUST have an IANA\
    \ assigned Application\n   Identifier (see Section 11.3).  The base protocol does\
    \ not require an\n   Application Identifier since its support is mandatory.  During\
    \ the\n   capabilities exchange, Diameter nodes inform their peers of locally\n\
    \   supported applications.  Furthermore, all Diameter messages contain\n   an\
    \ Application Identifier, which is used in the message forwarding\n   process.\n\
    \   The following Application Identifier values are defined:\n      Diameter Common\
    \ Messages      0\n      NASREQ                        1 [NASREQ]\n      Mobile-IP\
    \                     2 [DIAMMIP]\n      Diameter Base Accounting      3\n   \
    \   Relay                         0xffffffff\n   Relay and redirect agents MUST\
    \ advertise the Relay Application\n   Identifier, while all other Diameter nodes\
    \ MUST advertise locally\n   supported applications.  The receiver of a Capabilities\
    \ Exchange\n   message advertising Relay service MUST assume that the sender\n\
    \   supports all current and future applications.\n   Diameter relay and proxy\
    \ agents are responsible for finding an\n   upstream server that supports the\
    \ application of a particular\n   message.  If none can be found, an error message\
    \ is returned with the\n   Result-Code AVP set to DIAMETER_UNABLE_TO_DELIVER.\n"
- title: 2.5.  Connections vs. Sessions
  contents:
  - "2.5.  Connections vs. Sessions\n   This section attempts to provide the reader\
    \ with an understanding of\n   the difference between connection and session,\
    \ which are terms used\n   extensively throughout this document.\n   A connection\
    \ is a transport level connection between two peers, used\n   to send and receive\
    \ Diameter messages.  A session is a logical\n   concept at the application layer,\
    \ and is shared between an access\n   device and a server, and is identified via\
    \ the Session-Id AVP\n          +--------+          +-------+          +--------+\n\
    \          | Client |          | Relay |          | Server |\n          +--------+\
    \          +-------+          +--------+\n                   <---------->    \
    \   <---------->\n                peer connection A   peer connection B\n    \
    \               <----------------------------->\n                           User\
    \ session x\n               Figure 1: Diameter connections and sessions\n   In\
    \ the example provided in Figure 1, peer connection A is established\n   between\
    \ the Client and its local Relay.  Peer connection B is\n   established between\
    \ the Relay and the Server.  User session X spans\n   from the Client via the\
    \ Relay to the Server.  Each \"user\" of a\n   service causes an auth request\
    \ to be sent, with a unique session\n   identifier. Once accepted by the server,\
    \ both the client and the\n   server are aware of the session.  It is important\
    \ to note that there\n   is no relationship between a connection and a session,\
    \ and that\n   Diameter messages for multiple sessions are all multiplexed through\
    \ a\n   single connection.\n"
- title: 2.6.  Peer Table
  contents:
  - "2.6.  Peer Table\n   The Diameter Peer Table is used in message forwarding, and\
    \ referenced\n   by the Realm Routing Table.  A Peer Table entry contains the\n\
    \   following fields:\n   Host identity\n      Following the conventions described\
    \ for the DiameterIdentity\n      derived AVP data format in Section 4.4. This\
    \ field contains the\n      contents of the Origin-Host (Section 6.3) AVP found\
    \ in the CER or\n      CEA message.\n   StatusT\n      This is the state of the\
    \ peer entry, and MUST match one of the\n      values listed in Section 5.6.\n\
    \   Static or Dynamic\n      Specifies whether a peer entry was statically configured,\
    \ or\n      dynamically discovered.\n   Expiration time\n      Specifies the time\
    \ at which dynamically discovered peer table\n      entries are to be either refreshed,\
    \ or expired.\n   TLS Enabled\n      Specifies whether TLS is to be used when\
    \ communicating with the\n      peer.\n   Additional security information, when\
    \ needed (e.g., keys,\n   certificates)\n"
- title: 2.7.  Realm-Based Routing Table
  contents:
  - "2.7.  Realm-Based Routing Table\n   All Realm-Based routing lookups are performed\
    \ against what is\n   commonly known as the Realm Routing Table (see Section 12).\
    \  A Realm\n   Routing Table Entry contains the following fields:\n   Realm Name\n\
    \      This is the field that is typically used as a primary key in the\n    \
    \  routing table lookups.  Note that some implementations perform\n      their\
    \ lookups based on longest-match-from-the-right on the realm\n      rather than\
    \ requiring an exact match.\n   Application Identifier\n      An application is\
    \ identified by a vendor id and an application id.\n      For all IETF standards\
    \ track Diameter applications, the vendor id\n      is zero.  A route entry can\
    \ have a different destination based on\n      the application identification\
    \ AVP of the message.  This field\n      MUST be used as a secondary key field\
    \ in routing table lookups.\n   Local Action\n      The Local Action field is\
    \ used to identify how a message should be\n      treated.  The following actions\
    \ are supported:\n      1. LOCAL - Diameter messages that resolve to a route entry\
    \ with\n         the Local Action set to Local can be satisfied locally, and do\n\
    \         not need to be routed to another server.\n      2. RELAY - All Diameter\
    \ messages that fall within this category\n         MUST be routed to a next hop\
    \ server, without modifying any\n         non-routing AVPs.  See Section 6.1.8\
    \ for relaying guidelines\n      3. PROXY - All Diameter messages that fall within\
    \ this category\n         MUST be routed to a next hop server.  The local server\
    \ MAY\n         apply its local policies to the message by including new AVPs\n\
    \         to the message prior to routing.  See Section 6.1.8 for\n         proxying\
    \ guidelines.\n      4. REDIRECT - Diameter messages that fall within this category\n\
    \         MUST have the identity of the home Diameter server(s) appended,\n  \
    \       and returned to the sender of the message.  See Section 6.1.7\n      \
    \   for redirect guidelines.\n   Server Identifier\n      One or more servers\
    \ the message is to be routed to.  These servers\n      MUST also be present in\
    \ the Peer table. When the Local Action is\n      set to RELAY or PROXY, this\
    \ field contains the identity of the\n      server(s) the message must be routed\
    \ to.  When the Local Action\n      field is set to REDIRECT, this field contains\
    \ the identity of one\n      or more servers the message should be redirected\
    \ to.\n   Static or Dynamic\n      Specifies whether a route entry was statically\
    \ configured, or\n      dynamically discovered.\n   Expiration time\n      Specifies\
    \ the time which a dynamically discovered route table\n      entry expires.\n\
    \   It is important to note that Diameter agents MUST support at least\n   one\
    \ of the LOCAL, RELAY, PROXY or REDIRECT modes of operation.\n   Agents do not\
    \ need to support all modes of operation in order to\n   conform with the protocol\
    \ specification, but MUST follow the protocol\n   compliance guidelines in Section\
    \ 2.  Relay agents MUST NOT reorder\n   AVPs, and proxies MUST NOT reorder AVPs.\n\
    \   The routing table MAY include a default entry that MUST be used for\n   any\
    \ requests not matching any of the other entries.  The routing\n   table MAY consist\
    \ of only such an entry.\n   When a request is routed, the target server MUST\
    \ have advertised the\n   Application Identifier (see Section 2.4) for the given\
    \ message, or\n   have advertised itself as a relay or proxy agent.  Otherwise,\
    \ an\n   error is returned with the Result-Code AVP set to\n   DIAMETER_UNABLE_TO_DELIVER.\n"
- title: 2.8.  Role of Diameter Agents
  contents:
  - "2.8.  Role of Diameter Agents\n   In addition to client and servers, the Diameter\
    \ protocol introduces\n   relay, proxy, redirect, and translation agents, each\
    \ of which is\n   defined in Section 1.3.  These Diameter agents are useful for\
    \ several\n   reasons:\n   -  They can distribute administration of systems to\
    \ a configurable\n      grouping, including the maintenance of security associations.\n\
    \   -  They can be used for concentration of requests from an number of\n    \
    \  co-located or distributed NAS equipment sets to a set of like user\n      groups.\n\
    \   -  They can do value-added processing to the requests or responses.\n   -\
    \  They can be used for load balancing.\n   -  A complex network will have multiple\
    \ authentication sources, they\n      can sort requests and forward towards the\
    \ correct target.\n   The Diameter protocol requires that agents maintain transaction\n\
    \   state, which is used for failover purposes.  Transaction state\n   implies\
    \ that upon forwarding a request, its Hop-by-Hop identifier is\n   saved; the\
    \ field is replaced with a locally unique identifier, which\n   is restored to\
    \ its original value when the corresponding answer is\n   received.  The request's\
    \ state is released upon receipt of the\n   answer.  A stateless agent is one\
    \ that only maintains transaction\n   state.\n   The Proxy-Info AVP allows stateless\
    \ agents to add local state to a\n   Diameter request, with the guarantee that\
    \ the same state will be\n   present in the answer.  However, the protocol's failover\
    \ procedures\n   require that agents maintain a copy of pending requests.\n  \
    \ A stateful agent is one that maintains session state information; by\n   keeping\
    \ track of all authorized active sessions.  Each authorized\n   session is bound\
    \ to a particular service, and its state is considered\n   active either until\
    \ it is notified otherwise, or by expiration.  Each\n   authorized session has\
    \ an expiration, which is communicated by\n   Diameter servers via the Session-Timeout\
    \ AVP.\n   Maintaining session state MAY be useful in certain applications, such\n\
    \   as:\n   -  Protocol translation (e.g., RADIUS <-> Diameter)\n   -  Limiting\
    \ resources authorized to a particular user\n   -  Per user or transaction auditing\n\
    \   A Diameter agent MAY act in a stateful manner for some requests and\n   be\
    \ stateless for others.  A Diameter implementation MAY act as one\n   type of\
    \ agent for some requests, and as another type of agent for\n   others.\n"
- title: 2.8.1.  Relay Agents
  contents:
  - "2.8.1.  Relay Agents\n   Relay Agents are Diameter agents that accept requests\
    \ and route\n   messages to other Diameter nodes based on information found in\
    \ the\n   messages (e.g., Destination-Realm).  This routing decision is\n   performed\
    \ using a list of supported realms, and known peers.  This is\n   known as the\
    \ Realm Routing Table, as is defined further in Section\n   2.7.\n   Relays MAY\
    \ be used to aggregate requests from multiple Network Access\n   Servers (NASes)\
    \ within a common geographical area (POP).  The use of\n   Relays is advantageous\
    \ since it eliminates the need for NASes to be\n   configured with the necessary\
    \ security information they would\n   otherwise require to communicate with Diameter\
    \ servers in other\n   realms.  Likewise, this reduces the configuration load\
    \ on Diameter\n   servers that would otherwise be necessary when NASes are added,\n\
    \   changed or deleted.\n   Relays modify Diameter messages by inserting and removing\
    \ routing\n   information, but do not modify any other portion of a message.\n\
    \   Relays SHOULD NOT maintain session state but MUST maintain\n   transaction\
    \ state.\n    +------+    --------->     +------+     --------->    +------+\n\
    \    |      |    1. Request     |      |     2. Request    |      |\n    | NAS\
    \  |                   | DRL  |                   | HMS  |\n    |      |    4.\
    \ Answer      |      |     3. Answer     |      |\n    +------+    <---------\
    \     +------+     <---------    +------+\n   example.net                example.net\
    \                example.com\n                  Figure 2: Relaying of Diameter\
    \ messages\n   The example provided in Figure 2 depicts a request issued from\
    \ NAS,\n   which is an access device, for the user bob@example.com.  Prior to\n\
    \   issuing the request, NAS performs a Diameter route lookup, using\n   \"example.com\"\
    \ as the key, and determines that the message is to be\n   relayed to DRL, which\
    \ is a Diameter Relay.  DRL performs the same\n   route lookup as NAS, and relays\
    \ the message to HMS, which is\n   example.com's Home Diameter Server.  HMS identifies\
    \ that the request\n   can be locally supported (via the realm), processes the\n\
    \   authentication and/or authorization request, and replies with an\n   answer,\
    \ which is routed back to NAS using saved transaction state.\n   Since Relays\
    \ do not perform any application level processing, they\n   provide relaying services\
    \ for all Diameter applications, and\n   therefore MUST advertise the Relay Application\
    \ Identifier.\n"
- title: 2.8.2.  Proxy Agents
  contents:
  - "2.8.2.  Proxy Agents\n   Similarly to relays, proxy agents route Diameter messages\
    \ using the\n   Diameter Routing Table.  However, they differ since they modify\n\
    \   messages to implement policy enforcement.  This requires that proxies\n  \
    \ maintain the state of their downstream peers (e.g., access devices)\n   to enforce\
    \ resource usage, provide admission control, and\n   provisioning.\n   It is important\
    \ to note that although proxies MAY provide a value-add\n   function for NASes,\
    \ they do not allow access devices to use end-to-\n   end security, since modifying\
    \ messages breaks authentication.\n   Proxies MAY be used in call control centers\
    \ or access ISPs that\n   provide outsourced connections, they can monitor the\
    \ number and types\n   of ports in use, and make allocation and admission decisions\n\
    \   according to their configuration.\n   Proxies that wish to limit resources\
    \ MUST maintain session state.\n   All proxies MUST maintain transaction state.\n\
    \   Since enforcing policies requires an understanding of the service\n   being\
    \ provided, Proxies MUST only advertise the Diameter applications\n   they support.\n"
- title: 2.8.3.  Redirect Agents
  contents:
  - "2.8.3.  Redirect Agents\n   Redirect agents are useful in scenarios where the\
    \ Diameter routing\n   configuration needs to be centralized.  An example is a\
    \ redirect\n   agent that provides services to all members of a consortium, but\
    \ does\n   not wish to be burdened with relaying all messages between realms.\n\
    \   This scenario is advantageous since it does not require that the\n   consortium\
    \ provide routing updates to its members when changes are\n   made to a member's\
    \ infrastructure.\n   Since redirect agents do not relay messages, and only return\
    \ an\n   answer with the information necessary for Diameter agents to\n   communicate\
    \ directly, they do not modify messages.  Since redirect\n   agents do not receive\
    \ answer messages, they cannot maintain session\n   state.  Further, since redirect\
    \ agents never relay requests, they are\n   not required to maintain transaction\
    \ state.\n   The example provided in Figure 3 depicts a request issued from the\n\
    \   access device, NAS, for the user bob@example.com.  The message is\n   forwarded\
    \ by the NAS to its relay, DRL, which does not have a routing\n   entry in its\
    \ Diameter Routing Table for example.com.  DRL has a\n   default route configured\
    \ to DRD, which is a redirect agent that\n   returns a redirect notification to\
    \ DRL, as well as HMS' contact\n   information.  Upon receipt of the redirect\
    \ notification, DRL\n   establishes a transport connection with HMS, if one doesn't\
    \ already\n   exist, and forwards the request to it.\n                       \
    \        +------+\n                               |      |\n                 \
    \              | DRD  |\n                               |      |\n           \
    \                    +------+\n                                ^    |\n      \
    \              2. Request  |    | 3. Redirection\n                           \
    \     |    |    Notification\n                                |    v\n    +------+\
    \    --------->     +------+     --------->    +------+\n    |      |    1. Request\
    \     |      |     4. Request    |      |\n    | NAS  |                   | DRL\
    \  |                   | HMS  |\n    |      |    6. Answer      |      |     5.\
    \ Answer     |      |\n    +------+    <---------     +------+     <---------\
    \    +------+\n   example.net                example.net               example.com\n\
    \                 Figure 3: Redirecting a Diameter Message\n   Since redirect\
    \ agents do not perform any application level\n   processing, they provide relaying\
    \ services for all Diameter\n   applications, and therefore MUST advertise the\
    \ Relay Application\n   Identifier.\n"
- title: 2.8.4.  Translation Agents
  contents:
  - "2.8.4.  Translation Agents\n   A translation agent is a device that provides\
    \ translation between two\n   protocols (e.g., RADIUS<->Diameter, TACACS+<->Diameter).\
    \  Translation\n   agents are likely to be used as aggregation servers to communicate\n\
    \   with a Diameter infrastructure, while allowing for the embedded\n   systems\
    \ to be migrated at a slower pace.\n   Given that the Diameter protocol introduces\
    \ the concept of long-lived\n   authorized sessions, translation agents MUST be\
    \ session stateful and\n   MUST maintain transaction state.\n   Translation of\
    \ messages can only occur if the agent recognizes the\n   application of a particular\
    \ request, and therefore translation agents\n   MUST only advertise their locally\
    \ supported applications.\n    +------+    --------->     +------+     --------->\
    \    +------+\n    |      |  RADIUS Request   |      |  Diameter Request |   \
    \   |\n    | NAS  |                   | TLA  |                   | HMS  |\n  \
    \  |      |  RADIUS Answer    |      |  Diameter Answer  |      |\n    +------+\
    \    <---------     +------+     <---------    +------+\n   example.net      \
    \          example.net               example.com\n                Figure 4: Translation\
    \ of RADIUS to Diameter\n"
- title: 2.9.  End-to-End Security Framework
  contents:
  - "2.9.  End-to-End Security Framework\n   End-to-end security services include\
    \ confidentiality and message\n   origin authentication.  These services are provided\
    \ by supporting AVP\n   integrity and confidentiality between two peers, communicating\n\
    \   through agents.\n   End-to-end security is provided via the End-to-End security\n\
    \   extension, described in [AAACMS].  The circumstances requiring the\n   use\
    \ of end-to-end security are determined by policy on each of the\n   peers. Security\
    \ policies, which are not the subject of\n   standardization, may be applied by\
    \ next hop Diameter peer or by\n   destination realm.  For example, where TLS\
    \ or IPsec transmission-\n   level security is sufficient, there may be no need\
    \ for end-to-end\n   security.\n   End-to-end security policies include:\n   -\
    \  Never use end-to-end security.\n   -  Use end-to-end security on messages containing\
    \ sensitive AVPs.\n      Which AVPs are sensitive is determined by service provider\
    \ policy.\n      AVPs containing keys and passwords should be considered sensitive.\n\
    \      Accounting AVPs may be considered sensitive.  Any AVP for which\n     \
    \ the P bit may be set or which may be encrypted may be considered\n      sensitive.\n\
    \   -  Always use end-to-end security.\n   It is strongly RECOMMENDED that all\
    \ Diameter implementations support\n   end-to-end security.\n"
- title: 2.10.  Diameter Path Authorization
  contents:
  - "2.10.  Diameter Path Authorization\n   As noted in Section 2.2, Diameter requires\
    \ transmission level\n   security to be used on each connection (TLS or IPsec).\
    \  Therefore,\n   each connection is authenticated, replay and integrity protected\
    \ and\n   confidential on a per-packet basis.\n   In addition to authenticating\
    \ each connection, each connection as\n   well as the entire session MUST also\
    \ be authorized.  Before\n   initiating a connection, a Diameter Peer MUST check\
    \ that its peers\n   are authorized to act in their roles.  For example, a Diameter\
    \ peer\n   may be authentic, but that does not mean that it is authorized to act\n\
    \   as a Diameter Server advertising a set of Diameter applications.\n   Prior\
    \ to bringing up a connection, authorization checks are performed\n   at each\
    \ connection along the path.  Diameter capabilities negotiation\n   (CER/CEA)\
    \ also MUST be carried out, in order to determine what\n   Diameter applications\
    \ are supported by each peer.  Diameter sessions\n   MUST be routed only through\
    \ authorized nodes that have advertised\n   support for the Diameter application\
    \ required by the session.\n   As noted in Section 6.1.8, a relay or proxy agent\
    \ MUST append a\n   Route-Record AVP to all requests forwarded.  The AVP contains\
    \ the\n   identity of the peer the request was received from.\n   The home Diameter\
    \ server, prior to authorizing a session, MUST check\n   the Route-Record AVPs\
    \ to make sure that the route traversed by the\n   request is acceptable.  For\
    \ example, administrators within the home\n   realm may not wish to honor requests\
    \ that have been routed through an\n   untrusted realm.  By authorizing a request,\
    \ the home Diameter server\n   is implicitly indicating its willingness to engage\
    \ in the business\n   transaction as specified by the contractual relationship\
    \ between the\n   server and the previous hop.  A DIAMETER_AUTHORIZATION_REJECTED\
    \ error\n   message (see Section 7.1.5) is sent if the route traversed by the\n\
    \   request is unacceptable.\n   A home realm may also wish to check that each\
    \ accounting request\n   message corresponds to a Diameter response authorizing\
    \ the session.\n   Accounting requests without corresponding authorization responses\n\
    \   SHOULD be subjected to further scrutiny, as should accounting\n   requests\
    \ indicating a difference between the requested and provided\n   service.\n  \
    \ Similarly, the local Diameter agent, on receiving a Diameter response\n   authorizing\
    \ a session, MUST check the Route-Record AVPs to make sure\n   that the route\
    \ traversed by the response is acceptable.  At each\n   step, forwarding of an\
    \ authorization response is considered evidence\n   of a willingness to take on\
    \ financial risk relative to the session.\n   A local realm may wish to limit\
    \ this exposure, for example, by\n   establishing credit limits for intermediate\
    \ realms and refusing to\n   accept responses which would violate those limits.\
    \  By issuing an\n   accounting request corresponding to the authorization response,\
    \ the\n   local realm implicitly indicates its agreement to provide the service\n\
    \   indicated in the authorization response.  If the service cannot be\n   provided\
    \ by the local realm, then a DIAMETER_UNABLE_TO_COMPLY error\n   message MUST\
    \ be sent within the accounting request; a Diameter client\n   receiving an authorization\
    \ response for a service that it cannot\n   perform MUST NOT substitute an alternate\
    \ service, and then send\n   accounting requests for the alternate service instead.\n"
- title: 3.  Diameter Header
  contents:
  - "3.  Diameter Header\n   A summary of the Diameter header format is shown below.\
    \  The fields\n   are transmitted in network byte order.\n    0              \
    \     1                   2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |    Version    |                 Message Length                |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | command flags |                  Command-Code                 |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                         Application-ID                        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                      Hop-by-Hop Identifier                    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                      End-to-End Identifier                    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  AVPs ...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-\n   Version\n      This Version\
    \ field MUST be set to 1 to indicate Diameter Version\n      1.\n   Message Length\n\
    \      The Message Length field is three octets and indicates the length\n   \
    \   of the Diameter message including the header fields.\n   Command Flags\n \
    \     The Command Flags field is eight bits.  The following bits are\n      assigned:\n\
    \       0 1 2 3 4 5 6 7\n      +-+-+-+-+-+-+-+-+\n      |R P E T r r r r|\n  \
    \    +-+-+-+-+-+-+-+-+\n      R(equest)   - If set, the message is a request.\
    \  If cleared, the\n                    message is an answer.\n      P(roxiable)\
    \ - If set, the message MAY be proxied, relayed or\n                    redirected.\
    \  If cleared, the message MUST be\n                    locally processed.\n \
    \     E(rror)     - If set, the message contains a protocol error,\n         \
    \           and the message will not conform to the ABNF\n                   \
    \ described for this command.  Messages with the 'E'\n                    bit\
    \ set are commonly referred to as error\n                    messages.  This bit\
    \ MUST NOT be set in request\n                    messages.  See Section 7.2.\n\
    \      T(Potentially re-transmitted message)\n                  - This flag is\
    \ set after a link failover procedure,\n                    to aid the removal\
    \ of duplicate requests.  It is\n                    set when resending requests\
    \ not yet acknowledged,\n                    as an indication of a possible duplicate\
    \ due to a\n                    link failure.  This bit MUST be cleared when\n\
    \                    sending a request for the first time, otherwise\n       \
    \             the sender MUST set this flag.  Diameter agents\n              \
    \      only need to be concerned about the number of\n                    requests\
    \ they send based on a single received\n                    request; retransmissions\
    \ by other entities need\n                    not be tracked.  Diameter agents\
    \ that receive a\n                    request with the T flag set, MUST keep the\
    \ T flag\n                    set in the forwarded request.  This flag MUST NOT\n\
    \                    be set if an error answer message (e.g., a\n            \
    \        protocol error) has been received for the earlier\n                 \
    \   message.  It can be set only in cases where no\n                    answer\
    \ has been received from the server for a\n                    request and the\
    \ request is sent again.  This flag\n                    MUST NOT be set in answer\
    \ messages.\n      r(eserved)  - these flag bits are reserved for future use,\
    \ and\n                    MUST be set to zero, and ignored by the receiver.\n\
    \   Command-Code\n      The Command-Code field is three octets, and is used in\
    \ order to\n      communicate the command associated with the message.  The 24-bit\n\
    \      address space is managed by IANA (see Section 11.2.1).\n      Command-Code\
    \ values 16,777,214 and 16,777,215 (hexadecimal values\n      FFFFFE -FFFFFF)\
    \ are reserved for experimental use (See Section\n      11.3).\n   Application-ID\n\
    \      Application-ID is four octets and is used to identify to which\n      application\
    \ the message is applicable for.  The application can be\n      an authentication\
    \ application, an accounting application or a\n      vendor specific application.\
    \  See Section 11.3 for the possible\n      values that the application-id may\
    \ use.\n      The application-id in the header MUST be the same as what is\n \
    \     contained in any relevant AVPs contained in the message.\n   Hop-by-Hop\
    \ Identifier\n      The Hop-by-Hop Identifier is an unsigned 32-bit integer field\
    \ (in\n      network byte order) and aids in matching requests and replies.\n\
    \      The sender MUST ensure that the Hop-by-Hop identifier in a request\n  \
    \    is unique on a given connection at any given time, and MAY attempt\n    \
    \  to ensure that the number is unique across reboots.  The sender of\n      an\
    \ Answer message MUST ensure that the Hop-by-Hop Identifier field\n      contains\
    \ the same value that was found in the corresponding\n      request.  The Hop-by-Hop\
    \ identifier is normally a monotonically\n      increasing number, whose start\
    \ value was randomly generated.  An\n      answer message that is received with\
    \ an unknown Hop-by-Hop\n      Identifier MUST be discarded.\n   End-to-End Identifier\n\
    \      The End-to-End Identifier is an unsigned 32-bit integer field (in\n   \
    \   network byte order) and is used to detect duplicate messages.\n      Upon\
    \ reboot implementations MAY set the high order 12 bits to\n      contain the\
    \ low order 12 bits of current time, and the low order\n      20 bits to a random\
    \ value.  Senders of request messages MUST\n      insert a unique identifier on\
    \ each message.  The identifier MUST\n      remain locally unique for a period\
    \ of at least 4 minutes, even\n      across reboots.  The originator of an Answer\
    \ message MUST ensure\n      that the End-to-End Identifier field contains the\
    \ same value that\n      was found in the corresponding request.  The End-to-End\
    \ Identifier\n      MUST NOT be modified by Diameter agents of any kind.  The\n\
    \      combination of the Origin-Host (see Section 6.3) and this field is\n  \
    \    used to detect duplicates.  Duplicate requests SHOULD cause the\n      same\
    \ answer to be transmitted (modulo the hop-by-hop Identifier\n      field and\
    \ any routing AVPs that may be present), and MUST NOT\n      affect any state\
    \ that was set when the original request was\n      processed.  Duplicate answer\
    \ messages that are to be locally\n      consumed (see Section 6.2) SHOULD be\
    \ silently discarded.\n   AVPs\n      AVPs are a method of encapsulating information\
    \ relevant to the\n      Diameter message.  See Section 4 for more information\
    \ on AVPs.\n"
- title: 3.1.  Command Codes
  contents:
  - "3.1.  Command Codes\n   Each command Request/Answer pair is assigned a command\
    \ code, and the\n   sub-type (i.e., request or answer) is identified via the 'R'\
    \ bit in\n   the Command Flags field of the Diameter header.\n   Every Diameter\
    \ message MUST contain a command code in its header's\n   Command-Code field,\
    \ which is used to determine the action that is to\n   be taken for a particular\
    \ message.  The following Command Codes are\n   defined in the Diameter base protocol:\n\
    \   Command-Name             Abbrev.    Code       Reference\n   --------------------------------------------------------\n\
    \   Abort-Session-Request     ASR       274           8.5.1\n   Abort-Session-Answer\
    \      ASA       274           8.5.2\n   Accounting-Request        ACR       271\
    \           9.7.1\n   Accounting-Answer         ACA       271           9.7.2\n\
    \   Capabilities-Exchange-    CER       257           5.3.1\n      Request\n \
    \  Capabilities-Exchange-    CEA       257           5.3.2\n      Answer\n   Device-Watchdog-Request\
    \   DWR       280           5.5.1\n   Device-Watchdog-Answer    DWA       280\
    \           5.5.2\n   Disconnect-Peer-Request   DPR       282           5.4.1\n\
    \   Disconnect-Peer-Answer    DPA       282           5.4.2\n   Re-Auth-Request\
    \           RAR       258           8.3.1\n   Re-Auth-Answer            RAA  \
    \     258           8.3.2\n   Session-Termination-      STR       275        \
    \   8.4.1\n      Request\n   Session-Termination-      STA       275         \
    \  8.4.2\n      Answer\n"
- title: 3.2.  Command Code ABNF specification
  contents:
  - "3.2.  Command Code ABNF specification\n   Every Command Code defined MUST include\
    \ a corresponding ABNF\n   specification, which is used to define the AVPs that\
    \ MUST or MAY be\n   present.  The following format is used in the definition:\n\
    \   command-def      = command-name \"::=\" diameter-message\n   command-name\
    \     = diameter-name\n   diameter-name    = ALPHA *(ALPHA / DIGIT / \"-\")\n\
    \   diameter-message = header  [ *fixed] [ *required] [ *optional]\n         \
    \             [ *fixed]\n   header           = \"<\" Diameter-Header:\" command-id\n\
    \                      [r-bit] [p-bit] [e-bit] [application-id]\">\"\n   application-id\
    \   = 1*DIGIT\n   command-id       = 1*DIGIT\n                      ; The Command\
    \ Code assigned to the command\n   r-bit            = \", REQ\"\n            \
    \          ; If present, the 'R' bit in the Command\n                      ; Flags\
    \ is set, indicating that the message\n                      ; is a request, as\
    \ opposed to an answer.\n   p-bit            = \", PXY\"\n                   \
    \   ; If present, the 'P' bit in the Command\n                      ; Flags is\
    \ set, indicating that the message\n                      ; is proxiable.\n  \
    \ e-bit            = \", ERR\"\n                      ; If present, the 'E' bit\
    \ in the Command\n                      ; Flags is set, indicating that the answer\n\
    \                      ; message contains a Result-Code AVP in\n             \
    \         ; the \"protocol error\" class.\n   fixed            = [qual] \"<\"\
    \ avp-spec \">\"\n                      ; Defines the fixed position of an AVP\n\
    \   required         = [qual] \"{\" avp-spec \"}\"\n                      ; The\
    \ AVP MUST be present and can appear\n                      ; anywhere in the\
    \ message.\n   optional         = [qual] \"[\" avp-name \"]\"\n              \
    \        ; The avp-name in the 'optional' rule cannot\n                      ;\
    \ evaluate to any AVP Name which is included\n                      ; in a fixed\
    \ or required rule.  The AVP can\n                      ; appear anywhere in the\
    \ message.\n   qual             = [min] \"*\" [max]\n                      ; See\
    \ ABNF conventions, RFC 2234 Section 6.6.\n                      ; The absence\
    \ of any qualifiers depends on whether\n                      ; it precedes a\
    \ fixed, required, or optional\n                      ; rule.  If a fixed or required\
    \ rule has no\n                      ; qualifier, then exactly one such AVP MUST\n\
    \                      ; be present.  If an optional rule has no\n           \
    \           ; qualifier, then 0 or 1 such AVP may be\n                      ;\
    \ present.\n                      ;\n                      ; NOTE:  \"[\" and\
    \ \"]\" have a different meaning\n                      ; than in ABNF (see the\
    \ optional rule, above).\n                      ; These braces cannot be used\
    \ to express\n                      ; optional fixed rules (such as an optional\n\
    \                      ; ICV at the end).  To do this, the convention\n      \
    \                ; is '0*1fixed'.\n   min              = 1*DIGIT\n           \
    \           ; The minimum number of times the element may\n                  \
    \    ; be present.  The default value is zero.\n   max              = 1*DIGIT\n\
    \                      ; The maximum number of times the element may\n       \
    \               ; be present.  The default value is infinity.  A\n           \
    \           ; value of zero implies the AVP MUST NOT be\n                    \
    \  ; present.\n   avp-spec         = diameter-name\n                      ; The\
    \ avp-spec has to be an AVP Name, defined\n                      ; in the base\
    \ or extended Diameter\n                      ; specifications.\n   avp-name \
    \        = avp-spec / \"AVP\"\n                      ; The string \"AVP\" stands\
    \ for *any* arbitrary\n                      ; AVP Name, which does not conflict\
    \ with the\n                      ; required or fixed position AVPs defined in\n\
    \                      ; the command code definition.\n   The following is a definition\
    \ of a fictitious command code:\n   Example-Request ::= < \"Diameter-Header: 9999999,\
    \ REQ, PXY >\n                       { User-Name }\n                     * { Origin-Host\
    \ }\n                     * [ AVP\n"
- title: 3.3.  Diameter Command Naming Conventions
  contents:
  - "3.3.  Diameter Command Naming Conventions\n   Diameter command names typically\
    \ includes one or more English words\n   followed by the verb Request or Answer.\
    \  Each English word is\n   delimited by a hyphen.  A three-letter acronym for\
    \ both the request\n   and answer is also normally provided.\n   An example is\
    \ a message set used to terminate a session.  The command\n   name is Session-Terminate-Request\
    \ and Session-Terminate-Answer, while\n   the acronyms are STR and STA, respectively.\n\
    \   Both the request and the answer for a given command share the same\n   command\
    \ code.  The request is identified by the R(equest) bit in the\n   Diameter header\
    \ set to one (1), to ask that a particular action be\n   performed, such as authorizing\
    \ a user or terminating a session.  Once\n   the receiver has completed the request\
    \ it issues the corresponding\n   answer, which includes a result code that communicates\
    \ one of the\n   following:\n   -  The request was successful\n   -  The request\
    \ failed\n   -  An additional request must be sent to provide information the\
    \ peer\n      requires prior to returning a successful or failed answer.\n   -\
    \  The receiver could not process the request, but provides\n      information\
    \ about a Diameter peer that is able to satisfy the\n      request, known as redirect.\n\
    \   Additional information, encoded within AVPs, MAY also be included in\n   answer\
    \  messages.\n"
- title: 4.  Diameter AVPs
  contents:
  - "4.  Diameter AVPs\n   Diameter AVPs carry specific authentication, accounting,\n\
    \   authorization, routing and security information as well as\n   configuration\
    \ details for the request and reply.\n   Some AVPs MAY be listed more than once.\
    \  The effect of such an AVP is\n   specific, and is specified in each case by\
    \ the AVP description.\n   Each AVP of type OctetString MUST be padded to align\
    \ on a 32-bit\n   boundary, while other AVP types align naturally.  A number of\
    \ zero-\n   valued bytes are added to the end of the AVP Data field till a word\n\
    \   boundary is reached.  The length of the padding is not reflected in\n   the\
    \ AVP Length field.\n"
- title: 4.1.  AVP Header
  contents:
  - "4.1.  AVP Header\n   The fields in the AVP header MUST be sent in network byte\
    \ order.  The\n   format of the header is:\n    0                   1        \
    \           2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\
    \ 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                           AVP Code                            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |V M P r r r r r|                  AVP Length                   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                        Vendor-ID (opt)                        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |    Data ...\n   +-+-+-+-+-+-+-+-+\n   AVP Code\n      The AVP Code, combined\
    \ with the Vendor-Id field, identifies the\n      attribute uniquely.  AVP numbers\
    \ 1 through 255 are reserved for\n      backward compatibility with RADIUS, without\
    \ setting the Vendor-Id\n      field.  AVP numbers 256 and above are used for\
    \ Diameter, which are\n      allocated by IANA (see Section 11.1).\n   AVP Flags\n\
    \      The AVP Flags field informs the receiver how each attribute must\n    \
    \  be handled.  The 'r' (reserved) bits are unused and SHOULD be set\n      to\
    \ 0.  Note that subsequent Diameter applications MAY define\n      additional\
    \ bits within the AVP Header, and an unrecognized bit\n      SHOULD be considered\
    \ an error.  The 'P' bit indicates the need for\n      encryption for end-to-end\
    \ security.\n      The 'M' Bit, known as the Mandatory bit, indicates whether\
    \ support\n      of the AVP is required.  If an AVP with the 'M' bit set is\n\
    \      received by a Diameter client, server, proxy, or translation agent\n  \
    \    and either the AVP or its value is unrecognized, the message MUST\n     \
    \ be rejected.  Diameter Relay and redirect agents MUST NOT reject\n      messages\
    \ with unrecognized AVPs.\n      The 'M' bit MUST be set according to the rules\
    \ defined for the AVP\n      containing it.  In order to preserve interoperability,\
    \ a Diameter\n      implementation MUST be able to exclude from a Diameter message\
    \ any\n      Mandatory AVP which is neither defined in the base Diameter\n   \
    \   protocol nor in any of the Diameter Application specifications\n      governing\
    \ the message in which it appears.  It MAY do this in one\n      of the following\
    \ ways:\n      1) If a message is rejected because it contains a Mandatory AVP\n\
    \         which is neither defined in the base Diameter standard nor in\n    \
    \     any of the Diameter Application specifications governing the\n         message\
    \ in which it appears, the implementation may resend the\n         message without\
    \ the AVP, possibly inserting additional standard\n         AVPs instead.\n  \
    \    2) A configuration option may be provided on a system wide, per\n       \
    \  peer, or per realm basis that would allow/prevent particular\n         Mandatory\
    \ AVPs to be sent.  Thus an administrator could change\n         the configuration\
    \ to avoid interoperability problems.\n      Diameter implementations are required\
    \ to support all Mandatory\n      AVPs which are allowed by the message's formal\
    \ syntax and defined\n      either in the base Diameter standard or in one of\
    \ the Diameter\n      Application specifications governing the message.\n    \
    \  AVPs with the 'M' bit cleared are informational only and a\n      receiver\
    \ that receives a message with such an AVP that is not\n      supported, or whose\
    \ value is not supported, MAY simply ignore the\n      AVP.\n      The 'V' bit,\
    \ known as the Vendor-Specific bit, indicates whether\n      the optional Vendor-ID\
    \ field is present in the AVP header.  When\n      set the AVP Code belongs to\
    \ the specific vendor code address\n      space.\n      Unless otherwise noted,\
    \ AVPs will have the following default AVP\n      Flags field settings:\n    \
    \     The 'M' bit MUST be set.  The 'V' bit MUST NOT be set.\n   AVP Length\n\
    \      The AVP Length field is three octets, and indicates the number of\n   \
    \   octets in this AVP including the AVP Code, AVP Length, AVP Flags,\n      Vendor-ID\
    \ field (if present) and the AVP data.  If a message is\n      received with an\
    \ invalid attribute length, the message SHOULD be\n      rejected.\n"
- title: 4.1.1.  Optional Header Elements
  contents:
  - "4.1.1.  Optional Header Elements\n   The AVP Header contains one optional field.\
    \  This field is only\n   present if the respective bit-flag is enabled.\n   Vendor-ID\n\
    \      The Vendor-ID field is present if the 'V' bit is set in the AVP\n     \
    \ Flags field.  The optional four-octet Vendor-ID field contains the\n      IANA\
    \ assigned \"SMI Network Management Private Enterprise Codes\"\n      [ASSIGNNO]\
    \ value, encoded in network byte order.  Any vendor\n      wishing to implement\
    \ a vendor-specific Diameter AVP MUST use their\n      own Vendor-ID along with\
    \ their privately managed AVP address\n      space, guaranteeing that they will\
    \ not collide with any other\n      vendor's vendor-specific AVP(s), nor with\
    \ future IETF\n      applications.\n      A vendor ID value of zero (0) corresponds\
    \ to the IETF adopted AVP\n      values, as managed by the IANA.  Since the absence\
    \ of the vendor\n      ID field implies that the AVP in question is not vendor\
    \ specific,\n      implementations MUST NOT use the zero (0) vendor ID.\n"
- title: 4.2.  Basic AVP Data Formats
  contents:
  - "4.2.  Basic AVP Data Formats\n   The Data field is zero or more octets and contains\
    \ information\n   specific to the Attribute.  The format and length of the Data\
    \ field\n   is determined by the AVP Code and AVP Length fields.  The format of\n\
    \   the Data field MUST be one of the following base data types or a data\n  \
    \ type derived from the base data types.  In the event that a new Basic\n   AVP\
    \ Data Format is needed, a new version of this RFC must be created.\n   OctetString\n\
    \      The data contains arbitrary data of variable length.  Unless\n      otherwise\
    \ noted, the AVP Length field MUST be set to at least 8\n      (12 if the 'V'\
    \ bit is enabled).  AVP Values of this type that are\n      not a multiple of\
    \ four-octets in length is followed by the\n      necessary padding so that the\
    \ next AVP (if any) will start on a\n      32-bit boundary.\n   Integer32\n  \
    \    32 bit signed value, in network byte order.  The AVP Length field\n     \
    \ MUST be set to 12 (16 if the 'V' bit is enabled).\n   Integer64\n      64 bit\
    \ signed value, in network byte order.  The AVP Length field\n      MUST be set\
    \ to 16 (20 if the 'V' bit is enabled).\n   Unsigned32\n      32 bit unsigned\
    \ value, in network byte order.  The AVP Length\n      field MUST be set to 12\
    \ (16 if the 'V' bit is enabled).\n   Unsigned64\n      64 bit unsigned value,\
    \ in network byte order.  The AVP Length\n      field MUST be set to 16 (20 if\
    \ the 'V' bit is enabled).\n   Float32\n      This represents floating point values\
    \ of single precision as\n      described by [FLOATPOINT].  The 32-bit value is\
    \ transmitted in\n      network byte order.  The AVP Length field MUST be set\
    \ to 12 (16 if\n      the 'V' bit is enabled).\n   Float64\n      This represents\
    \ floating point values of double precision as\n      described by [FLOATPOINT].\
    \  The 64-bit value is transmitted in\n      network byte order.  The AVP Length\
    \ field MUST be set to 16 (20 if\n      the 'V' bit is enabled).\n   Grouped\n\
    \      The Data field is specified as a sequence of AVPs.  Each of these\n   \
    \   AVPs follows - in the order in which they are specified -\n      including\
    \ their headers and padding.  The AVP Length field is set\n      to 8 (12 if the\
    \ 'V' bit is enabled) plus the total length of all\n      included AVPs, including\
    \ their headers and padding.  Thus the AVP\n      length field of an AVP of type\
    \ Grouped is always a multiple of 4.\n"
- title: 4.3.  Derived AVP Data Formats
  contents:
  - "4.3.  Derived AVP Data Formats\n   In addition to using the Basic AVP Data Formats,\
    \ applications may\n   define data formats derived from the Basic AVP Data Formats.\
    \  An\n   application that defines new AVP Derived Data Formats MUST include\n\
    \   them in a section entitled \"AVP Derived Data Formats\", using the same\n\
    \   format as the definitions below.  Each new definition must be either\n   defined\
    \ or listed with a reference to the RFC that defines the\n   format.\n   The below\
    \ AVP Derived Data Formats are commonly used by applications.\n   Address\n  \
    \    The Address format is derived from the OctetString AVP Base\n      Format.\
    \  It is a discriminated union, representing, for example a\n      32-bit (IPv4)\
    \ [IPV4] or 128-bit (IPv6) [IPV6] address, most\n      significant octet first.\
    \  The first two octets of the Address\n      AVP represents the AddressType,\
    \ which contains an Address Family\n      defined in [IANAADFAM].  The AddressType\
    \ is used to discriminate\n      the content and format of the remaining octets.\n\
    \   Time\n      The Time format is derived from the OctetString AVP Base Format.\n\
    \      The string MUST contain four octets, in the same format as the\n      first\
    \ four bytes are in the NTP timestamp format.  The NTP\n      Timestamp format\
    \ is defined in chapter 3 of [SNTP].\n      This represents the number of seconds\
    \ since 0h on 1 January 1900\n      with respect to the Coordinated Universal\
    \ Time (UTC).\n      On 6h 28m 16s UTC, 7 February 2036 the time value will overflow.\n\
    \      SNTP [SNTP] describes a procedure to extend the time to 2104.\n      This\
    \ procedure MUST be supported by all DIAMETER nodes.\n   UTF8String\n      The\
    \ UTF8String format is derived from the OctetString AVP Base\n      Format.  This\
    \ is a human readable string represented using the\n      ISO/IEC IS 10646-1 character\
    \ set, encoded as an OctetString using\n      the UTF-8 [UFT8] transformation\
    \ format described in RFC 2279.\n      Since additional code points are added\
    \ by amendments to the 10646\n      standard from time to time, implementations\
    \ MUST be prepared to\n      encounter any code point from 0x00000001 to 0x7fffffff.\
    \  Byte\n      sequences that do not correspond to the valid encoding of a code\n\
    \      point into UTF-8 charset or are outside this range are prohibited.\n  \
    \    The use of control codes SHOULD be avoided.  When it is necessary\n     \
    \ to represent a new line, the control code sequence CR LF SHOULD be\n      used.\n\
    \      The use of leading or trailing white space SHOULD be avoided.\n      For\
    \ code points not directly supported by user interface hardware\n      or software,\
    \ an alternative means of entry and display, such as\n      hexadecimal, MAY be\
    \ provided.\n      For information encoded in 7-bit US-ASCII, the UTF-8 charset\
    \ is\n      identical to the US-ASCII charset.\n      UTF-8 may require multiple\
    \ bytes to represent a single character /\n      code point; thus the length of\
    \ an UTF8String in octets may be\n      different from the number of characters\
    \ encoded.\n      Note that the AVP Length field of an UTF8String is measured\
    \ in\n      octets, not characters.\n   DiameterIdentity\n      The DiameterIdentity\
    \ format is derived from the OctetString AVP\n      Base Format.\n         DiameterIdentity\
    \  = FQDN\n      DiameterIdentity value is used to uniquely identify a Diameter\n\
    \      node for purposes of duplicate connection and routing loop\n      detection.\n\
    \      The contents of the string MUST be the FQDN of the Diameter node.\n   \
    \   If multiple Diameter nodes run on the same host, each Diameter\n      node\
    \ MUST be assigned a unique DiameterIdentity.  If a Diameter\n      node can be\
    \ identified by several FQDNs, a single FQDN should be\n      picked at startup,\
    \ and used as the only DiameterIdentity for that\n      node, whatever the connection\
    \ it is sent on.\n   DiameterURI\n      The DiameterURI MUST follow the Uniform\
    \ Resource Identifiers (URI)\n      syntax [URI] rules specified below:\n    \
    \  \"aaa://\" FQDN [ port ] [ transport ] [ protocol ]\n                     \
    \ ; No transport security\n      \"aaas://\" FQDN [ port ] [ transport ] [ protocol\
    \ ]\n                      ; Transport security used\n      FQDN             \
    \  = Fully Qualified Host Name\n      port               = \":\" 1*DIGIT\n   \
    \                   ; One of the ports used to listen for\n                  \
    \    ; incoming connections.\n                      ; If absent,\n           \
    \           ; the default Diameter port (3868) is\n                      ; assumed.\n\
    \      transport          = \";transport=\" transport-protocol\n             \
    \         ; One of the transports used to listen\n                      ; for\
    \ incoming connections.  If absent,\n                      ; the default SCTP\
    \ [SCTP] protocol is\n                      ; assumed.  UDP MUST NOT be used when\n\
    \                      ; the aaa-protocol field is set to\n                  \
    \    ; diameter.\n      transport-protocol = ( \"tcp\" / \"sctp\" / \"udp\" )\n\
    \      protocol           = \";protocol=\" aaa-protocol\n                    \
    \  ; If absent, the default AAA protocol\n                      ; is diameter.\n\
    \      aaa-protocol       = ( \"diameter\" / \"radius\" / \"tacacs+\" )\n    \
    \  The following are examples of valid Diameter host identities:\n      aaa://host.example.com;transport=tcp\n\
    \      aaa://host.example.com:6666;transport=tcp\n      aaa://host.example.com;protocol=diameter\n\
    \      aaa://host.example.com:6666;protocol=diameter\n      aaa://host.example.com:6666;transport=tcp;protocol=diameter\n\
    \      aaa://host.example.com:1813;transport=udp;protocol=radius\n   Enumerated\n\
    \      Enumerated is derived from the Integer32 AVP Base Format.  The\n      definition\
    \ contains a list of valid values and their\n      interpretation and is described\
    \ in the Diameter application\n      introducing the AVP.\n   IPFilterRule\n \
    \     The IPFilterRule format is derived from the OctetString AVP Base\n     \
    \ Format.  It uses the ASCII charset.  Packets may be filtered based\n      on\
    \ the following information that is associated with it:\n         Direction  \
    \                        (in or out)\n         Source and destination IP address\
    \  (possibly masked)\n         Protocol\n         Source and destination port\
    \        (lists or ranges)\n         TCP flags\n         IP fragment flag\n  \
    \       IP options\n         ICMP types\n      Rules for the appropriate direction\
    \ are evaluated in order, with\n      the first matched rule terminating the evaluation.\
    \  Each packet is\n      evaluated once.  If no rule matches, the packet is dropped\
    \ if the\n      last rule evaluated was a permit, and passed if the last rule\
    \ was\n      a deny.\n      IPFilterRule filters MUST follow the format:\n   \
    \      action dir proto from src to dst [options]\n         action       permit\
    \ - Allow packets that match the rule.\n                      deny   - Drop packets\
    \ that match the rule.\n         dir          \"in\" is from the terminal, \"\
    out\" is to the\n                      terminal.\n         proto        An IP\
    \ protocol specified by number.  The \"ip\"\n                      keyword means\
    \ any protocol will match.\n         src and dst  <address/mask> [ports]\n   \
    \                   The <address/mask> may be specified as:\n                \
    \      ipno       An IPv4 or IPv6 number in dotted-\n                        \
    \         quad or canonical IPv6 form.  Only\n                               \
    \  this exact IP number will match the\n                                 rule.\n\
    \                      ipno/bits  An IP number as above with a mask\n        \
    \                         width of the form 1.2.3.4/24.  In\n                \
    \                 this case, all IP numbers from\n                           \
    \      1.2.3.0 to 1.2.3.255 will match.\n                                 The\
    \ bit width MUST be valid for the\n                                 IP version\
    \ and the IP number MUST\n                                 NOT have bits set beyond\
    \ the mask.\n                                 For a match to occur, the same IP\n\
    \                                 version must be present in the\n           \
    \                      packet that was used in describing\n                  \
    \               the IP address.  To test for a\n                             \
    \    particular IP version, the bits part\n                                 can\
    \ be set to zero.  The keyword\n                                 \"any\" is 0.0.0.0/0\
    \ or the IPv6\n                                 equivalent.  The keyword \"assigned\"\
    \n                                 is the address or set of addresses\n      \
    \                           assigned to the terminal.  For IPv4,\n           \
    \                      a typical first rule is often \"deny\n                \
    \                 in ip! assigned\"\n                      The sense of the match\
    \ can be inverted by\n                      preceding an address with the not\
    \ modifier (!),\n                      causing all other addresses to be matched\n\
    \                      instead.  This does not affect the selection of\n     \
    \                 port numbers.\n                      With the TCP, UDP and SCTP\
    \ protocols, optional\n                      ports may be specified as:\n    \
    \                     {port/port-port}[,ports[,...]]\n                      The\
    \ '-' notation specifies a range of ports\n                      (including boundaries).\n\
    \                      Fragmented packets that have a non-zero offset\n      \
    \                (i.e., not the first fragment) will never match\n           \
    \           a rule that has one or more port\n                      specifications.\
    \  See the frag option for\n                      details on matching fragmented\
    \ packets.\n         options:\n            frag    Match if the packet is a fragment\
    \ and this is not\n                    the first fragment of the datagram.  frag\
    \ may not\n                    be used in conjunction with either tcpflags or\n\
    \                    TCP/UDP port specifications.\n            ipoptions spec\n\
    \                    Match if the IP header contains the comma\n             \
    \       separated list of options specified in spec.  The\n                  \
    \  supported IP options are:\n                    ssrr (strict source route),\
    \ lsrr (loose source\n                    route), rr (record packet route) and\
    \ ts\n                    (timestamp).  The absence of a particular option\n \
    \                   may be denoted with a '!'.\n            tcpoptions spec\n\
    \                    Match if the TCP header contains the comma\n            \
    \        separated list of options specified in spec.  The\n                 \
    \   supported TCP options are:\n                    mss (maximum segment size),\
    \ window (tcp window\n                    advertisement), sack (selective ack),\
    \ ts (rfc1323\n                    timestamp) and cc (rfc1644 t/tcp connection\n\
    \                    count).  The absence of a particular option may\n       \
    \             be denoted with a '!'.\n            established\n              \
    \      TCP packets only.  Match packets that have the RST\n                  \
    \  or ACK bits set.\n            setup   TCP packets only.  Match packets that\
    \ have the SYN\n                    bit set but no ACK bit.\n            tcpflags\
    \ spec\n                    TCP packets only.  Match if the TCP header\n     \
    \               contains the comma separated list of flags\n                 \
    \   specified in spec.  The supported TCP flags are:\n                    fin,\
    \ syn, rst, psh, ack and urg.  The absence of a\n                    particular\
    \ flag may be denoted with a '!'.  A rule\n                    that contains a\
    \ tcpflags specification can never\n                    match a fragmented packet\
    \ that has a non-zero\n                    offset.  See the frag option for details\
    \ on\n                    matching fragmented packets.\n            icmptypes\
    \ types\n                    ICMP packets only.  Match if the ICMP type is in\n\
    \                    the list types.  The list may be specified as any\n     \
    \               combination of ranges or individual types\n                  \
    \  separated by commas.  Both the numeric values and\n                    the\
    \ symbolic values listed below can be used.  The\n                    supported\
    \ ICMP types are:\n                    echo reply (0), destination unreachable\
    \ (3),\n                    source quench (4), redirect (5), echo request\n  \
    \                  (8), router advertisement (9), router\n                   \
    \ solicitation (10), time-to-live exceeded (11), IP\n                    header\
    \ bad (12), timestamp request (13),\n                    timestamp reply (14),\
    \ information request (15),\n                    information reply (16), address\
    \ mask request (17)\n                    and address mask reply (18).\n   There\
    \ is one kind of packet that the access device MUST always\n   discard, that is\
    \ an IP fragment with a fragment offset of one. This\n   is a valid packet, but\
    \ it only has one use, to try to circumvent\n   firewalls.\n      An access device\
    \ that is unable to interpret or apply a deny rule\n      MUST terminate the session.\
    \  An access device that is unable to\n      interpret or apply a permit rule\
    \ MAY apply a more restrictive\n      rule.  An access device MAY apply deny rules\
    \ of its own before the\n      supplied rules, for example to protect the access\
    \ device owner's\n      infrastructure.\n   The rule syntax is a modified subset\
    \ of ipfw(8) from FreeBSD, and the\n   ipfw.c code may provide a useful base for\
    \ implementations.\n   QoSFilterRule\n      The QosFilterRule format is derived\
    \ from the OctetString AVP Base\n      Format.  It uses the ASCII charset.  Packets\
    \ may be marked or\n      metered based on the following information that is associated\
    \ with\n      it:\n         Direction                          (in or out)\n \
    \        Source and destination IP address  (possibly masked)\n         Protocol\n\
    \         Source and destination port        (lists or ranges)\n         DSCP\
    \ values                        (no mask or range)\n      Rules for the appropriate\
    \ direction are evaluated in order, with\n      the first matched rule terminating\
    \ the evaluation.  Each packet is\n      evaluated once.  If no rule matches,\
    \ the packet is treated as best\n      effort.  An access device that is unable\
    \ to interpret or apply a\n      QoS rule SHOULD NOT terminate the session.\n\
    \   QoSFilterRule filters MUST follow the format:\n   action dir proto from src\
    \ to dst [options]\n                tag    - Mark packet with a specific DSCP\n\
    \                         [DIFFSERV].  The DSCP option MUST be\n             \
    \            included.\n                meter  - Meter traffic.  The metering\
    \ options\n                         MUST be included.\n   dir          The format\
    \ is as described under IPFilterRule.\n                proto        The format\
    \ is as described under\n                IPFilterRule.\n                src and\
    \ dst  The format is as described under\n                IPFilterRule.\n"
- title: 4.4.  Grouped AVP Values
  contents:
  - "4.4.  Grouped AVP Values\n   The Diameter protocol allows AVP values of type\
    \ 'Grouped.'  This\n   implies that the Data field is actually a sequence of AVPs.\
    \  It is\n   possible to include an AVP with a Grouped type within a Grouped type,\n\
    \   that is, to nest them.  AVPs within an AVP of type Grouped have the\n   same\
    \ padding requirements as non-Grouped AVPs, as defined in Section\n   4.\n   The\
    \ AVP Code numbering space of all AVPs included in a Grouped AVP is\n   the same\
    \ as for non-grouped AVPs.  Further, if any of the AVPs\n   encapsulated within\
    \ a Grouped AVP has the 'M' (mandatory) bit set,\n   the Grouped AVP itself MUST\
    \ also include the 'M' bit set.\n   Every Grouped AVP defined MUST include a corresponding\
    \ grammar, using\n   ABNF [ABNF] (with modifications), as defined below.\n   \
    \   grouped-avp-def  = name \"::=\" avp\n      name-fmt         = ALPHA *(ALPHA\
    \ / DIGIT / \"-\")\n      name             = name-fmt\n                      \
    \   ; The name has to be the name of an AVP,\n                         ; defined\
    \ in the base or extended Diameter\n                         ; specifications.\n\
    \      avp              = header  [ *fixed] [ *required] [ *optional]\n      \
    \                   [ *fixed]\n      header           = \"<\" \"AVP-Header:\"\
    \ avpcode [vendor] \">\"\n      avpcode          = 1*DIGIT\n                 \
    \        ; The AVP Code assigned to the Grouped AVP\n      vendor           =\
    \ 1*DIGIT\n                         ; The Vendor-ID assigned to the Grouped AVP.\n\
    \                         ; If absent, the default value of zero is\n        \
    \                 ; used.\n"
- title: 4.4.1.  Example AVP with a Grouped Data type
  contents:
  - "4.4.1.  Example AVP with a Grouped Data type\n   The Example-AVP (AVP Code 999999)\
    \ is of type Grouped and is used to\n   clarify how Grouped AVP values work. \
    \ The Grouped Data field has the\n   following ABNF grammar:\n      Example-AVP\
    \  ::= < AVP Header: 999999 >\n                       { Origin-Host }\n      \
    \               1*{ Session-Id }\n                      *[ AVP ]\n   An Example-AVP\
    \ with Grouped Data follows.\n   The Origin-Host AVP is required (Section 6.3).\
    \  In this case:\n      Origin-Host = \"example.com\".\n   One or more Session-Ids\
    \ must follow.  Here there are two:\n      Session-Id =\n        \"grump.example.com:33041;23432;893;0AF3B81\"\
    \n      Session-Id =\n        \"grump.example.com:33054;23561;2358;0AF3B82\"\n\
    \   optional AVPs included are\n      Recovery-Policy = <binary>\n         2163bc1d0ad82371f6bc09484133c3f09ad74a0dd5346d54195a7cf0b35\n\
    \         2cabc881839a4fdcfbc1769e2677a4c1fb499284c5f70b48f58503a45c5\n      \
    \   c2d6943f82d5930f2b7c1da640f476f0e9c9572a50db8ea6e51e1c2c7bd\n         f8bb43dc995144b8dbe297ac739493946803e1cee3e15d9b765008a1b2a\n\
    \         cf4ac777c80041d72c01e691cf751dbf86e85f509f3988e5875dc905119\n      \
    \   26841f00f0e29a6d1ddc1a842289d440268681e052b30fb638045f7779c\n         1d873c784f054f688f5001559ecff64865ef975f3e60d2fd7966b8c7f92\n\
    \      Futuristic-Acct-Record = <binary>\n         fe19da5802acd98b07a5b86cb4d5d03f0314ab9ef1ad0b67111ff3b90a0\n\
    \         57fe29620bf3585fd2dd9fcc38ce62f6cc208c6163c008f4258d1bc88b8\n      \
    \   17694a74ccad3ec69269461b14b2e7a4c111fb239e33714da207983f58c\n         41d018d56fe938f3cbf089aac12a912a2f0d1923a9390e5f789cb2e5067\n\
    \         d3427475e49968f841\n   The data for the optional AVPs is represented\
    \ in hex since the format\n   of these AVPs is neither known at the time of definition\
    \ of the\n   Example-AVP group, nor (likely) at the time when the example instance\n\
    \   of this AVP is interpreted - except by Diameter implementations which\n  \
    \ support the same set of AVPs.  The encoding example illustrates how\n   padding\
    \ is used and how length fields are calculated.  Also note that\n   AVPs may be\
    \ present in the Grouped AVP value which the receiver\n   cannot interpret (here,\
    \ the Recover-Policy and Futuristic-Acct-Record\n   AVPs).\n   This AVP would\
    \ be encoded as follows:\n           0       1       2       3       4       5\
    \       6       7\n       +-------+-------+-------+-------+-------+-------+-------+-------+\n\
    \     0 |     Example AVP Header (AVP Code = 999999), Length = 468      |\n  \
    \     +-------+-------+-------+-------+-------+-------+-------+-------+\n    \
    \ 8 |     Origin-Host AVP Header (AVP Code = 264), Length = 19      |\n      \
    \ +-------+-------+-------+-------+-------+-------+-------+-------+\n    16 |\
    \  'e'  |  'x'  |  'a'  |  'm'  |  'p'  |  'l'  |  'e'  |  '.'  |\n       +-------+-------+-------+-------+-------+-------+-------+-------+\n\
    \    24 |  'c'  |  'o'  |  'm'  |Padding|     Session-Id AVP Header     |\n  \
    \     +-------+-------+-------+-------+-------+-------+-------+-------+\n    32\
    \ | (AVP Code = 263), Length = 50 |  'g'  |  'r'  |  'u'  |  'm'  |\n       +-------+-------+-------+-------+-------+-------+-------+-------+\n\
    \                                     . . .\n       +-------+-------+-------+-------+-------+-------+-------+-------+\n\
    \    64 |  'A'  |  'F'  |  '3'  |  'B'  |  '8'  |  '1'  |Padding|Padding|\n  \
    \     +-------+-------+-------+-------+-------+-------+-------+-------+\n    72\
    \ |     Session-Id AVP Header (AVP Code = 263), Length = 51       |\n       +-------+-------+-------+-------+-------+-------+-------+-------+\n\
    \    80 |  'g'  |  'r'  |  'u'  |  'm'  |  'p'  |  '.'  |  'e'  |  'x'  |\n  \
    \     +-------+-------+-------+-------+-------+-------+-------+-------+\n    \
    \                                 . . .\n       +-------+-------+-------+-------+-------+-------+-------+-------+\n\
    \   104 |  '0'  |  'A'  |  'F'  |  '3'  |  'B'  |  '8'  |  '2'  |Padding|\n  \
    \     +-------+-------+-------+-------+-------+-------+-------+-------+\n   112\
    \ |   Recovery-Policy Header (AVP Code = 8341), Length = 223      |\n       +-------+-------+-------+-------+-------+-------+-------+-------+\n\
    \   120 |  0x21 | 0x63  | 0xbc  | 0x1d  | 0x0a  | 0xd8  | 0x23  | 0x71  |\n  \
    \     +-------+-------+-------+-------+-------+-------+-------+-------+\n    \
    \                                 . . .\n       +-------+-------+-------+-------+-------+-------+-------+-------+\n\
    \   320 |  0x2f | 0xd7  | 0x96  | 0x6b  | 0x8c  | 0x7f  | 0x92  |Padding|\n  \
    \     +-------+-------+-------+-------+-------+-------+-------+-------+\n   328\
    \ | Futuristic-Acct-Record Header (AVP Code = 15930), Length = 137|\n       +-------+-------+-------+-------+-------+-------+-------+-------+\n\
    \   336 |  0xfe | 0x19  | 0xda  | 0x58  | 0x02  | 0xac  | 0xd9  | 0x8b  |\n  \
    \     +-------+-------+-------+-------+-------+-------+-------+-------+\n    \
    \                                 . . .\n       +-------+-------+-------+-------+-------+-------+-------+-------+\n\
    \   464 |  0x41 |Padding|Padding|Padding|\n       +-------+-------+-------+-------+\n"
- title: 4.5.  Diameter Base Protocol AVPs
  contents:
  - "4.5.  Diameter Base Protocol AVPs\n   The following table describes the Diameter\
    \ AVPs defined in the base\n   protocol, their AVP Code values, types, possible\
    \ flag values and\n   whether the AVP MAY be encrypted.  For the originator of\
    \ a Diameter\n   message, \"Encr\" (Encryption) means that if a message containing\
    \ that\n   AVP is to be sent via a  Diameter agent (proxy, redirect or relay)\n\
    \   then the message MUST NOT be sent unless there is end-to-end security\n  \
    \ between the originator and the recipient and integrity /\n   confidentiality\
    \ protection is offered for this AVP OR the originator\n   has locally trusted\
    \ configuration that indicates that end-to-end\n   security is not needed.  Similarly,\
    \ for the originator of a Diameter\n   message, a \"P\" in the \"MAY\" column\
    \ means that if a message containing\n   that AVP is to be sent via a  Diameter\
    \ agent (proxy, redirect or\n   relay) then the message MUST NOT be sent unless\
    \ there is end-to-end\n   security between the originator and the recipient or\
    \ the originator\n   has locally trusted configuration that indicates that end-to-end\n\
    \   security is not needed.\n   Due to space constraints, the short form DiamIdent\
    \ is used to\n   represent DiameterIdentity.\n                               \
    \             +---------------------+\n                                      \
    \      |    AVP Flag rules   |\n                                            |----+-----+----+-----|----+\n\
    \                   AVP  Section             |    |     |SHLD| MUST|    |\n  \
    \ Attribute Name  Code Defined  Data Type  |MUST| MAY | NOT|  NOT|Encr|\n   -----------------------------------------|----+-----+----+-----|----|\n\
    \   Acct-             85  9.8.2   Unsigned32 | M  |  P  |    |  V  | Y  |\n  \
    \   Interim-Interval                       |    |     |    |     |    |\n   Accounting-\
    \      483  9.8.7   Enumerated | M  |  P  |    |  V  | Y  |\n     Realtime-Required\
    \                      |    |     |    |     |    |\n   Acct-            50  \
    \ 9.8.5   UTF8String | M  |  P  |    |  V  | Y  |\n     Multi-Session-Id     \
    \                  |    |     |    |     |    |\n   Accounting-      485  9.8.3\
    \   Unsigned32 | M  |  P  |    |  V  | Y  |\n     Record-Number              \
    \            |    |     |    |     |    |\n   Accounting-      480  9.8.1   Enumerated\
    \ | M  |  P  |    |  V  | Y  |\n     Record-Type                            |\
    \    |     |    |     |    |\n   Accounting-       44  9.8.4   OctetString| M\
    \  |  P  |    |  V  | Y  |\n    Session-Id                              |    |\
    \     |    |     |    |\n   Accounting-      287  9.8.6   Unsigned64 | M  |  P\
    \  |    |  V  | Y  |\n     Sub-Session-Id                         |    |     |\
    \    |     |    |\n   Acct-            259  6.9     Unsigned32 | M  |  P  |  \
    \  |  V  | N  |\n     Application-Id                         |    |     |    |\
    \     |    |\n   Auth-            258  6.8     Unsigned32 | M  |  P  |    |  V\
    \  | N  |\n     Application-Id                         |    |     |    |     |\
    \    |\n   Auth-Request-    274  8.7     Enumerated | M  |  P  |    |  V  | N\
    \  |\n      Type                                  |    |     |    |     |    |\n\
    \   Authorization-   291  8.9     Unsigned32 | M  |  P  |    |  V  | N  |\n  \
    \   Lifetime                               |    |     |    |     |    |\n   Auth-Grace-\
    \      276  8.10    Unsigned32 | M  |  P  |    |  V  | N  |\n     Period     \
    \                            |    |     |    |     |    |\n   Auth-Session-  \
    \  277  8.11    Enumerated | M  |  P  |    |  V  | N  |\n     State          \
    \                        |    |     |    |     |    |\n   Re-Auth-Request- 285\
    \  8.12    Enumerated | M  |  P  |    |  V  | N  |\n     Type                \
    \                   |    |     |    |     |    |\n   Class             25  8.20\
    \    OctetString| M  |  P  |    |  V  | Y  |\n   Destination-Host 293  6.5   \
    \  DiamIdent  | M  |  P  |    |  V  | N  |\n   Destination-     283  6.6     DiamIdent\
    \  | M  |  P  |    |  V  | N  |\n     Realm                                  |\
    \    |     |    |     |    |\n   Disconnect-Cause 273  5.4.3   Enumerated | M\
    \  |  P  |    |  V  | N  |\n   E2E-Sequence AVP 300  6.15    Grouped    | M  |\
    \  P  |    |  V  | Y  |\n   Error-Message    281  7.3     UTF8String |    |  P\
    \  |    | V,M | N  |\n   Error-Reporting- 294  7.4     DiamIdent  |    |  P  |\
    \    | V,M | N  |\n     Host                                   |    |     |  \
    \  |     |    |\n   Event-Timestamp   55  8.21    Time       | M  |  P  |    |\
    \  V  | N  |\n   Experimental-    297  7.6     Grouped    | M  |  P  |    |  V\
    \  | N  |\n      Result                                |    |     |    |     |\
    \    |\n   -----------------------------------------|----+-----+----+-----|----|\n\
    \                                            +---------------------+\n       \
    \                                     |    AVP Flag rules   |\n              \
    \                              |----+-----+----+-----|----+\n                \
    \   AVP  Section             |    |     |SHLD| MUST|MAY |\n   Attribute Name \
    \ Code Defined  Data Type  |MUST| MAY | NOT|  NOT|Encr|\n   -----------------------------------------|----+-----+----+-----|----|\n\
    \   Experimental-    298  7.7     Unsigned32 | M  |  P  |    |  V  | N  |\n  \
    \    Result-Code                           |    |     |    |     |    |\n   Failed-AVP\
    \       279  7.5     Grouped    | M  |  P  |    |  V  | N  |\n   Firmware-   \
    \     267  5.3.4   Unsigned32 |    |     |    |P,V,M| N  |\n     Revision    \
    \                           |    |     |    |     |    |\n   Host-IP-Address \
    \ 257  5.3.5   Address    | M  |  P  |    |  V  | N  |\n   Inband-Security   \
    \                       | M  |  P  |    |  V  | N  |\n      -Id           299\
    \  6.10    Unsigned32 |    |     |    |     |    |\n   Multi-Round-     272  8.19\
    \    Unsigned32 | M  |  P  |    |  V  | Y  |\n     Time-Out                  \
    \             |    |     |    |     |    |\n   Origin-Host      264  6.3     DiamIdent\
    \  | M  |  P  |    |  V  | N  |\n   Origin-Realm     296  6.4     DiamIdent  |\
    \ M  |  P  |    |  V  | N  |\n   Origin-State-Id  278  8.16    Unsigned32 | M\
    \  |  P  |    |  V  | N  |\n   Product-Name     269  5.3.7   UTF8String |    |\
    \     |    |P,V,M| N  |\n   Proxy-Host       280  6.7.3   DiamIdent  | M  |  \
    \   |    | P,V | N  |\n   Proxy-Info       284  6.7.2   Grouped    | M  |    \
    \ |    | P,V | N  |\n   Proxy-State       33  6.7.4   OctetString| M  |     |\
    \    | P,V | N  |\n   Redirect-Host    292  6.12    DiamURI    | M  |  P  |  \
    \  |  V  | N  |\n   Redirect-Host-   261  6.13    Enumerated | M  |  P  |    |\
    \  V  | N  |\n      Usage                                 |    |     |    |  \
    \   |    |\n   Redirect-Max-    262  6.14    Unsigned32 | M  |  P  |    |  V \
    \ | N  |\n      Cache-Time                            |    |     |    |     |\
    \    |\n   Result-Code      268  7.1     Unsigned32 | M  |  P  |    |  V  | N\
    \  |\n   Route-Record     282  6.7.1   DiamIdent  | M  |     |    | P,V | N  |\n\
    \   Session-Id       263  8.8     UTF8String | M  |  P  |    |  V  | Y  |\n  \
    \ Session-Timeout   27  8.13    Unsigned32 | M  |  P  |    |  V  | N  |\n   Session-Binding\
    \  270  8.17    Unsigned32 | M  |  P  |    |  V  | Y  |\n   Session-Server-  271\
    \  8.18    Enumerated | M  |  P  |    |  V  | Y  |\n     Failover            \
    \                   |    |     |    |     |    |\n   Supported-       265  5.3.6\
    \   Unsigned32 | M  |  P  |    |  V  | N  |\n     Vendor-Id                  \
    \            |    |     |    |     |    |\n   Termination-     295  8.15    Enumerated\
    \ | M  |  P  |    |  V  | N  |\n      Cause                                 |\
    \    |     |    |     |    |\n   User-Name          1  8.14    UTF8String | M\
    \  |  P  |    |  V  | Y  |\n   Vendor-Id        266  5.3.3   Unsigned32 | M  |\
    \  P  |    |  V  | N  |\n   Vendor-Specific- 260  6.11    Grouped    | M  |  P\
    \  |    |  V  | N  |\n      Application-Id                        |    |     |\
    \    |     |    |\n   -----------------------------------------|----+-----+----+-----|----|\n"
- title: 5.  Diameter Peers
  contents:
  - "5.  Diameter Peers\n   This section describes how Diameter nodes establish connections\
    \ and\n   communicate with peers.\n"
- title: 5.1.  Peer Connections
  contents:
  - "5.1.  Peer Connections\n   Although a Diameter node may have many possible peers\
    \ that it is able\n   to communicate with, it may not be economical to have an\
    \ established\n   connection to all of them.  At a minimum, a Diameter node SHOULD\
    \ have\n   an established connection with two peers per realm, known as the\n\
    \   primary and secondary peers.  Of course, a node MAY have additional\n   connections,\
    \ if it is deemed necessary.  Typically, all messages for\n   a realm are sent\
    \ to the primary peer, but in the event that failover\n   procedures are invoked,\
    \ any pending requests are sent to the\n   secondary peer.  However, implementations\
    \ are free to load balance\n   requests between a set of peers.\n   Note that\
    \ a given peer MAY act as a primary for a given realm, while\n   acting as a secondary\
    \ for another realm.\n   When a peer is deemed suspect, which could occur for\
    \ various reasons,\n   including not receiving a DWA within an allotted timeframe,\
    \ no new\n   requests should be forwarded to the peer, but failover procedures\
    \ are\n   invoked.  When an active peer is moved to this mode, additional\n  \
    \ connections SHOULD be established to ensure that the necessary number\n   of\
    \ active connections exists.\n   There are two ways that a peer is removed from\
    \ the suspect peer list:\n   1. The peer is no longer reachable, causing the transport\
    \ connection\n      to be shutdown.  The peer is moved to the closed state.\n\
    \   2. Three watchdog messages are exchanged with accepted round trip\n      times,\
    \ and the connection to the peer is considered stabilized.\n      In the event\
    \ the peer being removed is either the primary or\n      secondary, an alternate\
    \ peer SHOULD replace the deleted peer, and\n      assume the role of either primary\
    \ or secondary.\n"
- title: 5.2.  Diameter Peer Discovery
  contents:
  - "5.2.  Diameter Peer Discovery\n   Allowing for dynamic Diameter agent discovery\
    \ will make it possible\n   for simpler and more robust deployment of Diameter\
    \ services.  In\n   order to promote interoperable implementations of Diameter\
    \ peer\n   discovery, the following mechanisms are described.  These are based\n\
    \   on existing IETF standards.  The first option (manual configuration)\n   MUST\
    \ be supported by all DIAMETER nodes, while the latter two options\n   (SRVLOC\
    \ and DNS) MAY be supported.\n   There are two cases where Diameter peer discovery\
    \ may be performed.\n   The first is when a Diameter client needs to discover\
    \ a first-hop\n   Diameter agent.  The second case is when a Diameter agent needs\
    \ to\n   discover another agent - for further handling of a Diameter\n   operation.\
    \  In both cases, the following 'search order' is\n   recommended:\n   1. The\
    \ Diameter implementation consults its list of static (manually)\n      configured\
    \ Diameter agent locations.  These will be used if they\n      exist and respond.\n\
    \   2. The Diameter implementation uses SLPv2 [SLP] to discover Diameter\n   \
    \   services.  The Diameter service template [TEMPLATE] is included in\n     \
    \ Appendix A.\n      It is recommended that SLPv2 security be deployed (this requires\n\
    \      distributing keys to SLPv2 agents).  This is discussed further in\n   \
    \   Appendix A.  SLPv2 security SHOULD be used (requiring distribution\n     \
    \ of keys to SLPv2 agents) in order to ensure that discovered peers\n      are\
    \ authorized for their roles.  SLPv2 is discussed further in\n      Appendix A.\n\
    \   3. The Diameter implementation performs a NAPTR query for a server in\n  \
    \    a particular realm.  The Diameter implementation has to know in\n      advance\
    \ which realm to look for a Diameter agent in.  This could\n      be deduced,\
    \ for example, from the 'realm' in a NAI that a Diameter\n      implementation\
    \ needed to perform a Diameter operation on.\n      3.1 The services relevant\
    \ for the task of transport protocol\n          selection are those with NAPTR\
    \ service fields with values\n          \"AAA+D2x\", where x is a letter that\
    \ corresponds to a transport\n          protocol supported by the domain.  This\
    \ specification defines\n          D2T for TCP and D2S for SCTP.  We also establish\
    \ an IANA\n          registry for NAPTR service name to transport protocol\n \
    \         mappings.\n          These NAPTR records provide a mapping from a domain,\
    \ to the\n          SRV record for contacting a server with the specific transport\n\
    \          protocol in the NAPTR services field.  The resource record\n      \
    \    will contain an empty regular expression and a replacement\n          value,\
    \ which is the SRV record for that particular transport\n          protocol. \
    \ If the server supports multiple transport\n          protocols, there will be\
    \ multiple NAPTR records, each with a\n          different service value.  As\
    \ per RFC 2915 [NAPTR], the client\n          discards any records whose services\
    \ fields are not applicable.\n          For the purposes of this specification,\
    \ several rules are\n          defined.\n      3.2 A client MUST discard any service\
    \ fields that identify a\n          resolution service whose value is not \"D2X\"\
    , for values of X\n          that indicate transport protocols supported by the\
    \ client.\n          The NAPTR processing as described in RFC 2915 will result\
    \ in\n          discovery of the most preferred transport protocol of the\n  \
    \        server that is supported by the client, as well as an SRV\n         \
    \ record for the server.\n          The domain suffixes in the NAPTR replacement\
    \ field SHOULD\n          match the domain of the original query.\n   4. If no\
    \ NAPTR records are found, the requester queries for those\n      address records\
    \ for the destination address,\n      '_diameter._sctp'.realm or '_diameter._tcp'.realm.\
    \  Address\n      records include A RR's, AAAA RR's or other similar records,\
    \ chosen\n      according to the requestor's network protocol capabilities.  If\n\
    \      the DNS server returns no address records, the requestor gives up.\n  \
    \    If the server is using a site certificate, the domain name in the\n     \
    \ query and the domain name in the replacement field MUST both be\n      valid\
    \ based on the site certificate handed out by the server in\n      the TLS or\
    \ IKE exchange.  Similarly, the domain name in the SRV\n      query and the domain\
    \ name in the target in the SRV record MUST\n      both be valid based on the\
    \ same site certificate.  Otherwise, an\n      attacker could modify the DNS records\
    \ to contain replacement\n      values in a different domain, and the client could\
    \ not validate\n      that this was the desired behavior, or the result of an\
    \ attack\n      Also, the Diameter Peer MUST check to make sure that the\n   \
    \   discovered peers are authorized to act in its role.\n      Authentication\
    \ via IKE or TLS, or validation of DNS RRs via DNSSEC\n      is not sufficient\
    \ to conclude this.  For example, a web server may\n      have obtained a valid\
    \ TLS certificate, and secured RRs may be\n      included in the DNS, but this\
    \ does not imply that it is authorized\n      to act as a Diameter Server.\n \
    \     Authorization can be achieved for example, by configuration of a\n     \
    \ Diameter Server CA.  Alternatively this can be achieved by\n      definition\
    \ of OIDs within TLS or IKE certificates so as to signify\n      Diameter Server\
    \ authorization.\n   A dynamically discovered peer causes an entry in the Peer\
    \ Table (see\n   Section 2.6) to be created.  Note that entries created via DNS\
    \ MUST\n   expire (or be refreshed) within the DNS TTL.  If a peer is discovered\n\
    \   outside of the local realm, a routing table entry (see Section 2.7)\n   for\
    \ the peer's realm is created.  The routing table entry's\n   expiration MUST\
    \ match the peer's expiration value.\n"
- title: 5.3.  Capabilities Exchange
  contents:
  - "5.3.  Capabilities Exchange\n   When two Diameter peers establish a transport\
    \ connection, they MUST\n   exchange the Capabilities Exchange messages, as specified\
    \ in the peer\n   state machine (see Section 5.6).  This message allows the discovery\n\
    \   of a peer's identity and its capabilities (protocol version number,\n   supported\
    \ Diameter applications, security mechanisms, etc.)\n   The receiver only issues\
    \ commands to its peers that have advertised\n   support for the Diameter application\
    \ that defines the command.  A\n   Diameter node MUST cache the supported applications\
    \ in order to\n   ensure that unrecognized commands and/or AVPs are not unnecessarily\n\
    \   sent to a peer.\n   A receiver of a Capabilities-Exchange-Req (CER) message\
    \ that does not\n   have any applications in common with the sender MUST return\
    \ a\n   Capabilities-Exchange-Answer (CEA) with the Result-Code AVP set to\n \
    \  DIAMETER_NO_COMMON_APPLICATION, and SHOULD disconnect the transport\n   layer\
    \ connection.  Note that receiving a CER or CEA from a peer\n   advertising itself\
    \ as a Relay (see Section 2.4) MUST be interpreted\n   as having common applications\
    \ with the peer.\n   Similarly, a receiver of a Capabilities-Exchange-Req (CER)\
    \ message\n   that does not have any security mechanisms in common with the sender\n\
    \   MUST return a Capabilities-Exchange-Answer (CEA) with the Result-Code\n  \
    \ AVP set to DIAMETER_NO_COMMON_SECURITY, and SHOULD disconnect the\n   transport\
    \ layer connection.\n   CERs received from unknown peers MAY be silently discarded,\
    \ or a CEA\n   MAY be issued with the Result-Code AVP set to DIAMETER_UNKNOWN_PEER.\n\
    \   In both cases, the transport connection is closed.  If the local\n   policy\
    \ permits receiving CERs from unknown hosts, a successful CEA\n   MAY be returned.\
    \  If a CER from an unknown peer is answered with a\n   successful CEA, the lifetime\
    \ of the peer entry is equal to the\n   lifetime of the transport connection.\
    \  In case of a transport\n   failure, all the pending transactions destined to\
    \ the unknown peer\n   can be discarded.\n   The CER and CEA messages MUST NOT\
    \ be proxied, redirected or relayed.\n   Since the CER/CEA messages cannot be\
    \ proxied, it is still possible\n   that an upstream agent receives a message\
    \ for which it has no\n   available peers to handle the application that corresponds\
    \ to the\n   Command-Code.  In such instances, the 'E' bit is set in the answer\n\
    \   message (see Section 7.) with the Result-Code AVP set to\n   DIAMETER_UNABLE_TO_DELIVER\
    \ to inform the downstream to take action\n   (e.g., re-routing request to an\
    \ alternate peer).\n   With the exception of the Capabilities-Exchange-Request\
    \ message, a\n   message of type Request that includes the Auth-Application-Id\
    \ or\n   Acct-Application-Id AVPs, or a message with an application-specific\n\
    \   command code, MAY only be forwarded to a host that has explicitly\n   advertised\
    \ support for the application (or has advertised the Relay\n   Application Identifier).\n"
- title: 5.3.1.  Capabilities-Exchange-Request
  contents:
  - "5.3.1.  Capabilities-Exchange-Request\n   The Capabilities-Exchange-Request (CER),\
    \ indicated by the Command-\n   Code set to 257 and the Command Flags' 'R' bit\
    \ set, is sent to\n   exchange local capabilities.  Upon detection of a transport\
    \ failure,\n   this message MUST NOT be sent to an alternate peer.\n   When Diameter\
    \ is run over SCTP [SCTP], which allows for connections\n   to span multiple interfaces\
    \ and multiple IP addresses, the\n   Capabilities-Exchange-Request message MUST\
    \ contain one Host-IP-\n   Address AVP for each potential IP address that MAY\
    \ be locally used\n   when transmitting Diameter messages.\n   Message Format\n\
    \      <CER> ::= < Diameter Header: 257, REQ >\n                { Origin-Host\
    \ }\n                { Origin-Realm }\n             1* { Host-IP-Address }\n \
    \               { Vendor-Id }\n                { Product-Name }\n            \
    \    [ Origin-State-Id ]\n              * [ Supported-Vendor-Id ]\n          \
    \    * [ Auth-Application-Id ]\n              * [ Inband-Security-Id ]\n     \
    \         * [ Acct-Application-Id ]\n              * [ Vendor-Specific-Application-Id\
    \ ]\n                [ Firmware-Revision ]\n              * [ AVP ]\n"
- title: 5.3.2.  Capabilities-Exchange-Answer
  contents:
  - "5.3.2.  Capabilities-Exchange-Answer\n   The Capabilities-Exchange-Answer (CEA),\
    \ indicated by the Command-Code\n   set to 257 and the Command Flags' 'R' bit\
    \ cleared, is sent in\n   response to a CER message.\n   When Diameter is run\
    \ over SCTP [SCTP], which allows connections to\n   span multiple interfaces,\
    \ hence, multiple IP addresses, the\n   Capabilities-Exchange-Answer message MUST\
    \ contain one Host-IP-Address\n   AVP for each potential IP address that MAY be\
    \ locally used when\n   transmitting Diameter messages.\n   Message Format\n \
    \     <CEA> ::= < Diameter Header: 257 >\n                { Result-Code }\n  \
    \              { Origin-Host }\n                { Origin-Realm }\n           \
    \  1* { Host-IP-Address }\n                { Vendor-Id }\n                { Product-Name\
    \ }\n                [ Origin-State-Id ]\n                [ Error-Message ]\n\
    \              * [ Failed-AVP ]\n              * [ Supported-Vendor-Id ]\n   \
    \           * [ Auth-Application-Id ]\n              * [ Inband-Security-Id ]\n\
    \              * [ Acct-Application-Id ]\n              * [ Vendor-Specific-Application-Id\
    \ ]\n                [ Firmware-Revision ]\n              * [ AVP ]\n"
- title: 5.3.3.  Vendor-Id AVP
  contents:
  - "5.3.3.  Vendor-Id AVP\n   The Vendor-Id AVP (AVP Code 266) is of type Unsigned32\
    \ and contains\n   the IANA \"SMI Network Management Private Enterprise Codes\"\
    \ [ASSIGNNO]\n   value assigned to the vendor of the Diameter application.  In\n\
    \   combination with the Supported-Vendor-Id AVP (Section 5.3.6), this\n   MAY\
    \ be used in order to know which vendor specific attributes may be\n   sent to\
    \ the peer.  It is also envisioned that the combination of the\n   Vendor-Id,\
    \ Product-Name (Section 5.3.7) and the Firmware-Revision\n   (Section 5.3.4) AVPs\
    \ MAY provide very useful debugging information.\n   A Vendor-Id value of zero\
    \ in the CER or CEA messages is reserved and\n   indicates that this field is\
    \ ignored.\n"
- title: 5.3.4.  Firmware-Revision AVP
  contents:
  - "5.3.4.  Firmware-Revision AVP\n   The Firmware-Revision AVP (AVP Code 267) is\
    \ of type Unsigned32 and is\n   used to inform a Diameter peer of the firmware\
    \ revision of the\n   issuing device.\n   For devices that do not have a firmware\
    \ revision (general purpose\n   computers running Diameter software modules, for\
    \ instance), the\n   revision of the Diameter software module may be reported\
    \ instead.\n"
- title: 5.3.5.  Host-IP-Address AVP
  contents:
  - "5.3.5.  Host-IP-Address AVP\n   The Host-IP-Address AVP (AVP Code 257) is of\
    \ type Address and is used\n   to inform a Diameter peer of the sender's IP address.\
    \  All source\n   addresses that a Diameter node expects to use with SCTP [SCTP]\
    \ MUST\n   be advertised in the CER and CEA messages by including a Host-IP-\n\
    \   Address AVP for each address.  This AVP MUST ONLY be used in the CER\n   and\
    \ CEA messages.\n"
- title: 5.3.6.  Supported-Vendor-Id AVP
  contents:
  - "5.3.6.  Supported-Vendor-Id AVP\n   The Supported-Vendor-Id AVP (AVP Code 265)\
    \ is of type Unsigned32 and\n   contains the IANA \"SMI Network Management Private\
    \ Enterprise Codes\"\n   [ASSIGNNO] value assigned to a vendor other than the\
    \ device vendor.\n   This is used in the CER and CEA messages in order to inform\
    \ the peer\n   that the sender supports (a subset of) the vendor-specific AVPs\n\
    \   defined by the vendor identified in this AVP.\n"
- title: 5.3.7.  Product-Name AVP
  contents:
  - "5.3.7.  Product-Name AVP\n   The Product-Name AVP (AVP Code 269) is of type UTF8String,\
    \ and\n   contains the vendor assigned name for the product.  The Product-Name\n\
    \   AVP SHOULD remain constant across firmware revisions for the same\n   product.\n"
- title: 5.4.  Disconnecting Peer connections
  contents:
  - "5.4.  Disconnecting Peer connections\n   When a Diameter node disconnects one\
    \ of its transport connections,\n   its peer cannot know the reason for the disconnect,\
    \ and will most\n   likely assume that a connectivity problem occurred, or that\
    \ the peer\n   has rebooted.  In these cases, the peer may periodically attempt\
    \ to\n   reconnect, as stated in Section 2.1.  In the event that the\n   disconnect\
    \ was a result of either a shortage of internal resources,\n   or simply that\
    \ the node in question has no intentions of forwarding\n   any Diameter messages\
    \ to the peer in the foreseeable future, a\n   periodic connection request would\
    \ not be welcomed.  The\n   Disconnection-Reason AVP contains the reason the Diameter\
    \ node issued\n   the Disconnect-Peer-Request message.\n   The Disconnect-Peer-Request\
    \ message is used by a Diameter node to\n   inform its peer of its intent to disconnect\
    \ the transport layer, and\n   that the peer shouldn't reconnect unless it has\
    \ a valid reason to do\n   so (e.g., message to be forwarded).  Upon receipt of\
    \ the message, the\n   Disconnect-Peer-Answer is returned, which SHOULD contain\
    \ an error if\n   messages have recently been forwarded, and are likely in flight,\n\
    \   which would otherwise cause a race condition.\n   The receiver of the Disconnect-Peer-Answer\
    \ initiates the transport\n   disconnect.\n"
- title: 5.4.1.  Disconnect-Peer-Request
  contents:
  - "5.4.1.  Disconnect-Peer-Request\n   The Disconnect-Peer-Request (DPR), indicated\
    \ by the Command-Code set\n   to 282 and the Command Flags' 'R' bit set, is sent\
    \ to a peer to\n   inform its intentions to shutdown the transport connection.\
    \  Upon\n   detection of a transport failure, this message MUST NOT be sent to\
    \ an\n   alternate peer.\n   Message Format\n      <DPR>  ::= < Diameter Header:\
    \ 282, REQ >\n                 { Origin-Host }\n                 { Origin-Realm\
    \ }\n                 { Disconnect-Cause }\n"
- title: 5.4.2.  Disconnect-Peer-Answer
  contents:
  - "5.4.2.  Disconnect-Peer-Answer\n   The Disconnect-Peer-Answer (DPA), indicated\
    \ by the Command-Code set\n   to 282 and the Command Flags' 'R' bit cleared, is\
    \ sent as a response\n   to the Disconnect-Peer-Request message.  Upon receipt\
    \ of this\n   message, the transport connection is shutdown.\n   Message Format\n\
    \      <DPA>  ::= < Diameter Header: 282 >\n                 { Result-Code }\n\
    \                 { Origin-Host }\n                 { Origin-Realm }\n       \
    \          [ Error-Message ]\n               * [ Failed-AVP ]\n"
- title: 5.4.3.  Disconnect-Cause AVP
  contents:
  - "5.4.3.  Disconnect-Cause AVP\n   The Disconnect-Cause AVP (AVP Code 273) is of\
    \ type Enumerated.  A\n   Diameter node MUST include this AVP in the Disconnect-Peer-Request\n\
    \   message to inform the peer of the reason for its intention to\n   shutdown\
    \ the transport connection.  The following values are\n   supported:\n   REBOOTING\
    \                         0\n      A scheduled reboot is imminent.\n   BUSY  \
    \                            1\n      The peer's internal resources are constrained,\
    \ and it has\n      determined that the transport connection needs to be closed.\n\
    \   DO_NOT_WANT_TO_TALK_TO_YOU        2\n      The peer has determined that it\
    \ does not see a need for the\n      transport connection to exist, since it does\
    \ not expect any\n      messages to be exchanged in the near future.\n"
- title: 5.5.  Transport Failure Detection
  contents:
  - "5.5.  Transport Failure Detection\n   Given the nature of the Diameter protocol,\
    \ it is recommended that\n   transport failures be detected as soon as possible.\
    \  Detecting such\n   failures will minimize the occurrence of messages sent to\
    \ unavailable\n   agents, resulting in unnecessary delays, and will provide better\n\
    \   failover performance.  The Device-Watchdog-Request and Device-\n   Watchdog-Answer\
    \ messages, defined in this section, are used to pro-\n   actively detect transport\
    \ failures.\n"
- title: 5.5.1.  Device-Watchdog-Request
  contents:
  - "5.5.1.  Device-Watchdog-Request\n   The Device-Watchdog-Request (DWR), indicated\
    \ by the Command-Code set\n   to 280 and the Command Flags' 'R' bit set, is sent\
    \ to a peer when no\n   traffic has been exchanged between two peers (see Section\
    \ 5.5.3).\n   Upon detection of a transport failure, this message MUST NOT be\
    \ sent\n   to an alternate peer.\n   Message Format\n      <DWR>  ::= < Diameter\
    \ Header: 280, REQ >\n                 { Origin-Host }\n                 { Origin-Realm\
    \ }\n                 [ Origin-State-Id ]\n"
- title: 5.5.2.  Device-Watchdog-Answer
  contents:
  - "5.5.2.  Device-Watchdog-Answer\n   The Device-Watchdog-Answer (DWA), indicated\
    \ by the Command-Code set\n   to 280 and the Command Flags' 'R' bit cleared, is\
    \ sent as a response\n   to the Device-Watchdog-Request message.\n   Message Format\n\
    \      <DWA>  ::= < Diameter Header: 280 >\n                 { Result-Code }\n\
    \                 { Origin-Host }\n                 { Origin-Realm }\n       \
    \          [ Error-Message ]\n               * [ Failed-AVP ]\n              \
    \   [ Original-State-Id ]\n"
- title: 5.5.3.  Transport Failure Algorithm
  contents:
  - "5.5.3.  Transport Failure Algorithm\n   The transport failure algorithm is defined\
    \ in [AAATRANS].  All\n   Diameter implementations MUST support the algorithm\
    \ defined in the\n   specification in order to be compliant to the Diameter base\
    \ protocol.\n"
- title: 5.5.4.  Failover and Failback Procedures
  contents:
  - "5.5.4.  Failover and Failback Procedures\n   In the event that a transport failure\
    \ is detected with a peer, it is\n   necessary for all pending request messages\
    \ to be forwarded to an\n   alternate agent, if possible.  This is commonly referred\
    \ to as\n   failover.\n   In order for a Diameter node to perform failover procedures,\
    \ it is\n   necessary for the node to maintain a pending message queue for a\n\
    \   given peer.  When an answer message is received, the corresponding\n   request\
    \ is removed from the queue.  The Hop-by-Hop Identifier field\n   is used to match\
    \ the answer with the queued request.\n   When a transport failure is detected,\
    \ if possible all messages in the\n   queue are sent to an alternate agent with\
    \ the T flag set.  On booting\n   a Diameter client or agent, the T flag is also\
    \ set on any records\n   still remaining to be transmitted in non-volatile storage.\
    \  An\n   example of a case where it is not possible to forward the message to\n\
    \   an alternate server is when the message has a fixed destination, and\n   the\
    \ unavailable peer is the message's final destination (see\n   Destination-Host\
    \ AVP).  Such an error requires that the agent return\n   an answer message with\
    \ the 'E' bit set and the Result-Code AVP set to\n   DIAMETER_UNABLE_TO_DELIVER.\n\
    \   It is important to note that multiple identical requests or answers\n   MAY\
    \ be received as a result of a failover.  The End-to-End Identifier\n   field\
    \ in the Diameter header along with the Origin-Host AVP MUST be\n   used to identify\
    \ duplicate messages.\n   As described in Section 2.1, a connection request should\
    \ be\n   periodically attempted with the failed peer in order to re-establish\n\
    \   the transport connection.  Once a connection has been successfully\n   established,\
    \ messages can once again be forwarded to the peer.  This\n   is commonly referred\
    \ to as failback.\n"
- title: 5.6.  Peer State Machine
  contents:
  - "5.6.  Peer State Machine\n   This section contains a finite state machine that\
    \ MUST be observed by\n   all Diameter implementations.  Each Diameter node MUST\
    \ follow the\n   state machine described below when communicating with each peer.\n\
    \   Multiple actions are separated by commas, and may continue on\n   succeeding\
    \ lines, as space requires.  Similarly, state and next state\n   may also span\
    \ multiple lines, as space requires.\n   This state machine is closely coupled\
    \ with the state machine\n   described in [AAATRANS], which is used to open, close,\
    \ failover,\n   probe, and reopen transport connections.  Note in particular that\n\
    \   [AAATRANS] requires the use of watchdog messages to probe\n   connections.\
    \  For Diameter, DWR and DWA messages are to be used.\n   I- is used to represent\
    \ the initiator (connecting) connection, while\n   the R- is used to represent\
    \ the responder (listening) connection.\n   The lack of a prefix indicates that\
    \ the event or action is the same\n   regardless of the connection on which the\
    \ event occurred.\n   The stable states that a state machine may be in are Closed,\
    \ I-Open\n   and R-Open; all other states are intermediate.  Note that I-Open\
    \ and\n   R-Open are equivalent except for whether the initiator or responder\n\
    \   transport connection is used for communication.\n   A CER message is always\
    \ sent on the initiating connection immediately\n   after the connection request\
    \ is successfully completed.  In the case\n   of an election, one of the two connections\
    \ will shut down.  The\n   responder connection will survive if the Origin-Host\
    \ of the local\n   Diameter entity is higher than that of the peer; the initiator\n\
    \   connection will survive if the peer's Origin-Host is higher.  All\n   subsequent\
    \ messages are sent on the surviving connection.  Note that\n   the results of\
    \ an election on one peer are guaranteed to be the\n   inverse of the results\
    \ on the other.\n   For TLS usage, a TLS handshake will begin when both ends are\
    \ in the\n   open state.  If the TLS handshake is successful, all further messages\n\
    \   will be sent via TLS.  If the handshake fails, both ends move to the\n   closed\
    \ state.\n   The state machine constrains only the behavior of a Diameter\n  \
    \ implementation as seen by Diameter peers through events on the wire.\n   Any\
    \ implementation that produces equivalent results is considered\n   compliant.\n\
    \   state            event              action         next state\n   -----------------------------------------------------------------\n\
    \   Closed           Start            I-Snd-Conn-Req   Wait-Conn-Ack\n       \
    \             R-Conn-CER       R-Accept,        R-Open\n                     \
    \                Process-CER,\n                                     R-Snd-CEA\n\
    \   Wait-Conn-Ack    I-Rcv-Conn-Ack   I-Snd-CER        Wait-I-CEA\n          \
    \          I-Rcv-Conn-Nack  Cleanup          Closed\n                    R-Conn-CER\
    \       R-Accept,        Wait-Conn-Ack/\n                                    \
    \ Process-CER      Elect\n                    Timeout          Error         \
    \   Closed\n   Wait-I-CEA       I-Rcv-CEA        Process-CEA      I-Open\n   \
    \                 R-Conn-CER       R-Accept,        Wait-Returns\n           \
    \                          Process-CER,\n                                    \
    \ Elect\n                    I-Peer-Disc      I-Disc           Closed\n      \
    \              I-Rcv-Non-CEA    Error            Closed\n                    Timeout\
    \          Error            Closed\n   Wait-Conn-Ack/   I-Rcv-Conn-Ack   I-Snd-CER,Elect\
    \  Wait-Returns\n   Elect            I-Rcv-Conn-Nack  R-Snd-CEA        R-Open\n\
    \                    R-Peer-Disc      R-Disc           Wait-Conn-Ack\n       \
    \             R-Conn-CER       R-Reject         Wait-Conn-Ack/\n             \
    \                                         Elect\n                    Timeout \
    \         Error            Closed\n   Wait-Returns     Win-Election     I-Disc,R-Snd-CEA\
    \ R-Open\n                    I-Peer-Disc      I-Disc,          R-Open\n     \
    \                                R-Snd-CEA\n                    I-Rcv-CEA    \
    \    R-Disc           I-Open\n                    R-Peer-Disc      R-Disc    \
    \       Wait-I-CEA\n                    R-Conn-CER       R-Reject         Wait-Returns\n\
    \                    Timeout          Error            Closed\n   R-Open     \
    \      Send-Message     R-Snd-Message    R-Open\n                    R-Rcv-Message\
    \    Process          R-Open\n                    R-Rcv-DWR        Process-DWR,\
    \     R-Open\n                                     R-Snd-DWA\n               \
    \     R-Rcv-DWA        Process-DWA      R-Open\n                    R-Conn-CER\
    \       R-Reject         R-Open\n                    Stop             R-Snd-DPR\
    \        Closing\n                    R-Rcv-DPR        R-Snd-DPA,       Closed\n\
    \                                           R-Disc\n                    R-Peer-Disc\
    \      R-Disc           Closed\n                    R-Rcv-CER        R-Snd-CEA\
    \        R-Open\n                    R-Rcv-CEA        Process-CEA      R-Open\n\
    \   I-Open           Send-Message     I-Snd-Message    I-Open\n              \
    \      I-Rcv-Message    Process          I-Open\n                    I-Rcv-DWR\
    \        Process-DWR,     I-Open\n                                     I-Snd-DWA\n\
    \                    I-Rcv-DWA        Process-DWA      I-Open\n              \
    \      R-Conn-CER       R-Reject         I-Open\n                    Stop    \
    \         I-Snd-DPR        Closing\n                    I-Rcv-DPR        I-Snd-DPA,\
    \       Closed\n                                     I-Disc\n                \
    \    I-Peer-Disc      I-Disc           Closed\n                    I-Rcv-CER \
    \       I-Snd-CEA        I-Open\n                    I-Rcv-CEA        Process-CEA\
    \      I-Open\n   Closing          I-Rcv-DPA        I-Disc           Closed\n\
    \                    R-Rcv-DPA        R-Disc           Closed\n              \
    \      Timeout          Error            Closed\n                    I-Peer-Disc\
    \      I-Disc           Closed\n                    R-Peer-Disc      R-Disc  \
    \         Closed\n"
- title: 5.6.1.  Incoming connections
  contents:
  - "5.6.1.  Incoming connections\n   When a connection request is received from a\
    \ Diameter peer, it is\n   not, in the general case, possible to know the identity\
    \ of that peer\n   until a CER is received from it.  This is because host and\
    \ port\n   determine the identity of a Diameter peer; and the source port of an\n\
    \   incoming connection is arbitrary.  Upon receipt of CER, the identity\n   of\
    \ the connecting peer can be uniquely determined from Origin-Host.\n   For this\
    \ reason, a Diameter peer must employ logic separate from the\n   state machine\
    \ to receive connection requests, accept them, and await\n   CER.  Once CER arrives\
    \ on a new connection, the Origin-Host that\n   identifies the peer is used to\
    \ locate the state machine associated\n   with that peer, and the new connection\
    \ and CER are passed to the\n   state machine as an R-Conn-CER event.\n   The\
    \ logic that handles incoming connections SHOULD close and discard\n   the connection\
    \ if any message other than CER arrives, or if an\n   implementation-defined timeout\
    \ occurs prior to receipt of CER.\n   Because handling of incoming connections\
    \ up to and including receipt\n   of CER requires logic, separate from that of\
    \ any individual state\n   machine associated with a particular peer, it is described\
    \ separately\n   in this section rather than in the state machine above.\n"
- title: 5.6.2.  Events
  contents:
  - "5.6.2.  Events\n   Transitions and actions in the automaton are caused by events.\
    \  In\n   this section, we will ignore the -I and -R prefix, since the actual\n\
    \   event would be identical, but would occur on one of two possible\n   connections.\n\
    \   Start          The Diameter application has signaled that a\n            \
    \      connection should be initiated with the peer.\n   R-Conn-CER     An acknowledgement\
    \ is received stating that the\n                  transport connection has been\
    \ established, and the\n                  associated CER has arrived.\n   Rcv-Conn-Ack\
    \   A positive acknowledgement is received confirming that\n                 \
    \ the transport connection is established.\n   Rcv-Conn-Nack  A negative acknowledgement\
    \ was received stating that\n                  the transport connection was not\
    \ established.\n   Timeout        An application-defined timer has expired while\
    \ waiting\n                  for some event.\n   Rcv-CER        A CER message\
    \ from the peer was received.\n   Rcv-CEA        A CEA message from the peer was\
    \ received.\n   Rcv-Non-CEA    A message other than CEA from the peer was received.\n\
    \   Peer-Disc      A disconnection indication from the peer was received.\n  \
    \ Rcv-DPR        A DPR message from the peer was received.\n   Rcv-DPA       \
    \ A DPA message from the peer was received.\n   Win-Election   An election was\
    \ held, and the local node was the\n                  winner.\n   Send-Message\
    \   A message is to be sent.\n   Rcv-Message    A message other than CER, CEA,\
    \ DPR, DPA, DWR or DWA\n                  was received.\n   Stop           The\
    \ Diameter application has signaled that a\n                  connection should\
    \ be terminated (e.g., on system\n                  shutdown).\n"
- title: 5.6.3.  Actions
  contents:
  - "5.6.3.  Actions\n   Actions in the automaton are caused by events and typically\
    \ indicate\n   the transmission of packets and/or an action to be taken on the\n\
    \   connection.  In this section we will ignore the I- and R-prefix,\n   since\
    \ the actual action would be identical, but would occur on one of\n   two possible\
    \ connections.\n   Snd-Conn-Req   A transport connection is initiated with the\
    \ peer.\n   Accept         The incoming connection associated with the R-Conn-CER\n\
    \                  is accepted as the responder connection.\n   Reject       \
    \  The incoming connection associated with the R-Conn-CER\n                  is\
    \ disconnected.\n   Process-CER    The CER associated with the R-Conn-CER is processed.\n\
    \   Snd-CER        A CER message is sent to the peer.\n   Snd-CEA        A CEA\
    \ message is sent to the peer.\n   Cleanup        If necessary, the connection\
    \ is shutdown, and any\n                  local resources are freed.\n   Error\
    \          The transport layer connection is disconnected, either\n          \
    \        politely or abortively, in response to an error\n                  condition.\
    \  Local resources are freed.\n   Process-CEA    A received CEA is processed.\n\
    \   Snd-DPR        A DPR message is sent to the peer.\n   Snd-DPA        A DPA\
    \ message is sent to the peer.\n   Disc           The transport layer connection\
    \ is disconnected, and\n                  local resources are freed.\n   Elect\
    \          An election occurs (see Section 5.6.4 for more\n                  information).\n\
    \   Snd-Message    A message is sent.\n   Snd-DWR        A DWR message is sent.\n\
    \   Snd-DWA        A DWA message is sent.\n   Process-DWR    The DWR message is\
    \ serviced.\n   Process-DWA    The DWA message is serviced.\n   Process      \
    \  A message is serviced.\n"
- title: 5.6.4.  The Election Process
  contents:
  - "5.6.4.  The Election Process\n   The election is performed on the responder.\
    \  The responder compares\n   the Origin-Host received in the CER sent by its\
    \ peer with its own\n   Origin-Host.  If the local Diameter entity's Origin-Host\
    \ is higher\n   than the peer's, a Win-Election event is issued locally.\n   The\
    \ comparison proceeds by considering the shorter OctetString to be\n   padded\
    \ with zeros so that it length is the same as the length of the\n   longer, then\
    \ performing an octet-by-octet unsigned comparison with\n   the first octet being\
    \ most significant.  Any remaining octets are\n   assumed to have value 0x80.\n"
- title: 6.  Diameter message processing
  contents:
  - "6.  Diameter message processing\n   This section describes how Diameter requests\
    \ and answers are created\n   and processed.\n"
- title: 6.1.  Diameter Request Routing Overview
  contents:
  - "6.1.  Diameter Request Routing Overview\n   A request is sent towards its final\
    \ destination using a combination\n   of the Destination-Realm and Destination-Host\
    \ AVPs, in one of these\n   three combinations:\n   -  a request that is not able\
    \ to be proxied (such as CER) MUST NOT\n      contain either Destination-Realm\
    \ or Destination-Host AVPs.\n   -  a request that needs to be sent to a home server\
    \ serving a\n      specific realm, but not to a specific server (such as the first\n\
    \      request of a series of round-trips), MUST contain a Destination-\n    \
    \  Realm AVP, but MUST NOT contain a Destination-Host AVP.\n   -  otherwise, a\
    \ request that needs to be sent to a specific home\n      server among those serving\
    \ a given realm, MUST contain both the\n      Destination-Realm and Destination-Host\
    \ AVPs.\n   The Destination-Host AVP is used as described above when the\n   destination\
    \ of the request is fixed, which includes:\n   -  Authentication requests that\
    \ span multiple round trips\n   -  A Diameter message that uses a security mechanism\
    \ that makes use\n      of a pre-established session key shared between the source\
    \ and the\n      final destination of the message.\n   -  Server initiated messages\
    \ that MUST be received by a specific\n      Diameter client (e.g., access device),\
    \ such as the Abort-Session-\n      Request message, which is used to request\
    \ that a particular user's\n      session be terminated.\n   Note that an agent\
    \ can forward a request to a host described in the\n   Destination-Host AVP only\
    \ if the host in question is included in its\n   peer table (see Section 2.7).\
    \  Otherwise, the request is routed based\n   on the Destination-Realm only (see\
    \ Sections 6.1.6).\n   The Destination-Realm AVP MUST be present if the message\
    \ is\n   proxiable.  Request messages that may be forwarded by Diameter agents\n\
    \   (proxies, redirects or relays) MUST also contain an Acct-\n   Application-Id\
    \ AVP, an Auth-Application-Id AVP or a Vendor-Specific-\n   Application-Id AVP.\
    \  A message that MUST NOT be forwarded by Diameter\n   agents (proxies, redirects\
    \ or relays) MUST not include the\n   Destination-Realm in its ABNF.  The value\
    \ of the Destination-Realm\n   AVP MAY be extracted from the User-Name AVP, or\
    \ other application-\n   specific methods.\n   When a message is received, the\
    \ message is processed in the following\n   order:\n   1. If the message is destined\
    \ for the local host, the procedures\n      listed in Section 6.1.4 are followed.\n\
    \   2. If the message is intended for a Diameter peer with whom the local\n  \
    \    host is able to directly communicate, the procedures listed in\n      Section\
    \ 6.1.5 are followed.  This is known as Request Forwarding.\n   3. The procedures\
    \ listed in Section 6.1.6 are followed, which is\n      known as Request Routing.\n\
    \   4. If none of the above is successful, an answer is returned with the\n  \
    \    Result-Code set to DIAMETER_UNABLE_TO_DELIVER, with the E-bit set.\n   For\
    \ routing of Diameter messages to work within an administrative\n   domain, all\
    \ Diameter nodes within the realm MUST be peers.\n   Note the processing rules\
    \ contained in this section are intended to\n   be used as general guidelines\
    \ to Diameter developers.  Certain\n   implementations MAY use different methods\
    \ than the ones described\n   here, and still comply with the protocol specification.\
    \  See Section\n   7 for more detail on error handling.\n"
- title: 6.1.1.  Originating a Request
  contents:
  - "6.1.1.  Originating a Request\n   When creating a request, in addition to any\
    \ other procedures\n   described in the application definition for that specific\
    \ request,\n   the following procedures MUST be followed:\n   -  the Command-Code\
    \ is set to the appropriate value\n   -  the 'R' bit is set\n   -  the End-to-End\
    \ Identifier is set to a locally unique value\n   -  the Origin-Host and Origin-Realm\
    \ AVPs MUST be set to the\n      appropriate values, used to identify the source\
    \ of the message\n   -  the Destination-Host and Destination-Realm AVPs MUST be\
    \ set to the\n      appropriate values as described in Section 6.1.\n   -  an\
    \ Acct-Application-Id AVP, an Auth-Application-Id or a Vendor-\n      Specific-Application-Id\
    \ AVP must be included if the request is\n      proxiable.\n"
- title: 6.1.2.  Sending a Request
  contents:
  - "6.1.2.  Sending a Request\n   When sending a request, originated either locally,\
    \ or as the result\n   of a forwarding or routing operation, the following procedures\
    \ MUST\n   be followed:\n   -  the Hop-by-Hop Identifier should be set to a locally\
    \ unique value\n   -  The message should be saved in the list of pending requests.\n\
    \   Other actions to perform on the message based on the particular role\n   the\
    \ agent is playing are described in the following sections.\n"
- title: 6.1.3.  Receiving Requests
  contents:
  - "6.1.3.  Receiving Requests\n   A relay or proxy agent MUST check for forwarding\
    \ loops when receiving\n   requests.  A loop is detected if the server finds its\
    \ own identity in\n   a Route-Record AVP.  When such an event occurs, the agent\
    \ MUST answer\n   with the Result-Code AVP set to DIAMETER_LOOP_DETECTED.\n"
- title: 6.1.4.  Processing Local Requests
  contents:
  - "6.1.4.  Processing Local Requests\n   A request is known to be for local consumption\
    \ when one of the\n   following conditions occur:\n   -  The Destination-Host\
    \ AVP contains the local host's identity,\n   -  The Destination-Host AVP is not\
    \ present, the Destination-Realm AVP\n      contains a realm the server is configured\
    \ to process locally, and\n      the Diameter application is locally supported,\
    \ or\n   -  Both the Destination-Host and the Destination-Realm are not\n    \
    \  present.\n   When a request is locally processed, the rules in Section 6.2\
    \ should\n   be used to generate the corresponding answer.\n"
- title: 6.1.5.  Request Forwarding
  contents:
  - "6.1.5.  Request Forwarding\n   Request forwarding is done using the Diameter\
    \ Peer Table.  The\n   Diameter peer table contains all of the peers that the\
    \ local node is\n   able to directly communicate with.\n   When a request is received,\
    \ and the host encoded in the Destination-\n   Host AVP is one that is present\
    \ in the peer table, the message SHOULD\n   be forwarded to the peer.\n"
- title: 6.1.6.  Request Routing
  contents:
  - "6.1.6.  Request Routing\n   Diameter request message routing is done via realms\
    \ and applications.\n   A Diameter message that may be forwarded by Diameter agents\
    \ (proxies,\n   redirects or relays) MUST include the target realm in the\n  \
    \ Destination-Realm AVP and one of the application identification AVPs\n   Auth-Application-Id,\
    \ Acct-Application-Id or Vendor-Specific-\n   Application-Id.  The realm MAY be\
    \ retrieved from the User-Name AVP,\n   which is in the form of a Network Access\
    \ Identifier (NAI).  The realm\n   portion of the NAI is inserted in the Destination-Realm\
    \ AVP.\n   Diameter agents MAY have a list of locally supported realms and\n \
    \  applications, and MAY have a list of externally supported realms and\n   applications.\
    \  When a request is received that includes a realm\n   and/or application that\
    \ is not locally supported, the message is\n   routed to the peer configured in\
    \ the Realm Routing Table (see Section\n   2.7).\n"
- title: 6.1.7.  Redirecting requests
  contents:
  - "6.1.7.  Redirecting requests\n   When a redirect agent receives a request whose\
    \ routing entry is set\n   to REDIRECT, it MUST reply with an answer message with\
    \ the 'E' bit\n   set, while maintaining the Hop-by-Hop Identifier in the header,\
    \ and\n   include the Result-Code AVP to DIAMETER_REDIRECT_INDICATION.  Each of\n\
    \   the servers associated with the routing entry are added in separate\n   Redirect-Host\
    \ AVP.\n                  +------------------+\n                  |     Diameter\
    \     |\n                  |  Redirect Agent  |\n                  +------------------+\n\
    \                   ^    |    2. command + 'E' bit\n    1. Request     |    |\
    \    Result-Code =\n   joe@example.com |    |    DIAMETER_REDIRECT_INDICATION\
    \ +\n                   |    |    Redirect-Host AVP(s)\n                   | \
    \   v\n               +-------------+  3. Request  +-------------+\n         \
    \      | example.com |------------->| example.net |\n               |    Relay\
    \    |              |   Diameter  |\n               |    Agent    |<-------------|\
    \    Server   |\n               +-------------+  4. Answer   +-------------+\n\
    \                     Figure 5: Diameter Redirect Agent\n   The receiver of the\
    \ answer message with the 'E' bit set, and the\n   Result-Code AVP set to DIAMETER_REDIRECT_INDICATION\
    \ uses the hop-by-\n   hop field in the Diameter header to identify the request\
    \ in the\n   pending message queue (see Section 5.3) that is to be redirected.\
    \  If\n   no transport connection exists with the new agent, one is created,\n\
    \   and the request is sent directly to it.\n   Multiple Redirect-Host AVPs are\
    \ allowed.  The receiver of the answer\n   message with the 'E' bit set selects\
    \ exactly one of these hosts as\n   the destination of the redirected message.\n"
- title: 6.1.8.  Relaying and Proxying Requests
  contents:
  - "6.1.8.  Relaying and Proxying Requests\n   A relay or proxy agent MUST append\
    \ a Route-Record AVP to all requests\n   forwarded.  The AVP contains the identity\
    \ of the peer the request was\n   received from.\n   The Hop-by-Hop identifier\
    \ in the request is saved, and replaced with\n   a locally unique value.  The\
    \ source of the request is also saved,\n   which includes the IP address, port\
    \ and protocol.\n   A relay or proxy agent MAY include the Proxy-Info AVP in requests\
    \ if\n   it requires access to any local state information when the\n   corresponding\
    \ response is received.  Proxy-Info AVP has certain\n   security implications\
    \ and SHOULD contain an embedded HMAC with a\n   node-local key.  Alternatively,\
    \ it MAY simply use local storage to\n   store state information.\n   The message\
    \ is then forwarded to the next hop, as identified in the\n   Realm Routing Table.\n\
    \   Figure 6 provides an example of message routing using the procedures\n   listed\
    \ in these sections.\n        (Origin-Host=nas.mno.net)    (Origin-Host=nas.mno.net)\n\
    \        (Origin-Realm=mno.net)       (Origin-Realm=mno.net)\n        (Destination-Realm=example.com)\
    \  (Destination-\n                                         Realm=example.com)\n\
    \                                     (Route-Record=nas.example.net)\n    +------+\
    \      ------>      +------+      ------>      +------+\n    |      |     (Request)\
    \     |      |      (Request)    |      |\n    | NAS  +-------------------+ DRL\
    \  +-------------------+ HMS  |\n    |      |                   |      |     \
    \              |      |\n    +------+     <------       +------+     <------ \
    \      +------+\n   example.net    (Answer)   example.net     (Answer)   example.com\n\
    \        (Origin-Host=hms.example.com)   (Origin-Host=hms.example.com)\n     \
    \   (Origin-Realm=example.com)      (Origin-Realm=example.com)\n             \
    \     Figure 6: Routing of Diameter messages\n"
- title: 6.2.  Diameter Answer Processing
  contents:
  - "6.2.  Diameter Answer Processing\n   When a request is locally processed, the\
    \ following procedures MUST be\n   applied to create the associated answer, in\
    \ addition to any\n   additional procedures that MAY be discussed in the Diameter\n\
    \   application defining the command:\n   -  The same Hop-by-Hop identifier in\
    \ the request is used in the\n      answer.\n   -  The local host's identity is\
    \ encoded in the Origin-Host AVP.\n   -  The Destination-Host and Destination-Realm\
    \ AVPs MUST NOT be\n      present in the answer message.\n   -  The Result-Code\
    \ AVP is added with its value indicating success or\n      failure.\n   -  If\
    \ the Session-Id is present in the request, it MUST be included\n      in the\
    \ answer.\n   -  Any Proxy-Info AVPs in the request MUST be added to the answer\n\
    \      message, in the same order they were present in the request.\n   -  The\
    \ 'P' bit is set to the same value as the one in the request.\n   -  The same\
    \ End-to-End identifier in the request is used in the\n      answer.\n   Note\
    \ that the error messages (see Section 7.3) are also subjected to\n   the above\
    \ processing rules.\n"
- title: 6.2.1.  Processing received Answers
  contents:
  - "6.2.1.  Processing received Answers\n   A Diameter client or proxy MUST match\
    \ the Hop-by-Hop Identifier in an\n   answer received against the list of pending\
    \ requests.  The\n   corresponding message should be removed from the list of\
    \ pending\n   requests.  It SHOULD ignore answers received that do not match a\n\
    \   known Hop-by-Hop Identifier.\n"
- title: 6.2.2.  Relaying and Proxying Answers
  contents:
  - "6.2.2.  Relaying and Proxying Answers\n   If the answer is for a request which\
    \ was proxied or relayed, the\n   agent MUST restore the original value of the\
    \ Diameter header's Hop-\n   by-Hop Identifier field.\n   If the last Proxy-Info\
    \ AVP in the message is targeted to the local\n   Diameter server, the AVP MUST\
    \ be removed before the answer is\n   forwarded.\n   If a relay or proxy agent\
    \ receives an answer with a Result-Code AVP\n   indicating a failure, it MUST\
    \ NOT modify the contents of the AVP.\n   Any additional local errors detected\
    \ SHOULD be logged, but not\n   reflected in the Result-Code AVP.  If the agent\
    \ receives an answer\n   message with a Result-Code AVP indicating success, and\
    \ it wishes to\n   modify the AVP to indicate an error, it MUST modify the Result-Code\n\
    \   AVP to contain the appropriate error in the message destined towards\n   the\
    \ access device as well as include the Error-Reporting-Host AVP and\n   it MUST\
    \ issue an STR on behalf of the access device.\n   The agent MUST then send the\
    \ answer to the host that it received the\n   original request from.\n"
- title: 6.3.  Origin-Host AVP
  contents:
  - "6.3.  Origin-Host AVP\n   The Origin-Host AVP (AVP Code 264) is of type DiameterIdentity,\
    \ and\n   MUST be present in all Diameter messages.  This AVP identifies the\n\
    \   endpoint that originated the Diameter message.  Relay agents MUST NOT\n  \
    \ modify this AVP.\n   The value of the Origin-Host AVP is guaranteed to be unique\
    \ within a\n   single host.\n   Note that the Origin-Host AVP may resolve to more\
    \ than one address as\n   the Diameter peer may support more than one address.\n\
    \   This AVP SHOULD be placed as close to the Diameter header as\n   possible.\
    \ 6.10\n"
- title: 6.4.  Origin-Realm AVP
  contents:
  - "6.4.  Origin-Realm AVP\n   The Origin-Realm AVP (AVP Code 296) is of type DiameterIdentity.\n\
    \   This AVP contains the Realm of the originator of any Diameter message\n  \
    \ and MUST be present in all messages.\n   This AVP SHOULD be placed as close\
    \ to the Diameter header as\n   possible.\n"
- title: 6.5.  Destination-Host AVP
  contents:
  - "6.5.  Destination-Host AVP\n   The Destination-Host AVP (AVP Code 293) is of\
    \ type DiameterIdentity.\n   This AVP MUST be present in all unsolicited agent\
    \ initiated messages,\n   MAY be present in request messages, and MUST NOT be\
    \ present in Answer\n   messages.\n   The absence of the Destination-Host AVP\
    \ will cause a message to be\n   sent to any Diameter server supporting the application\
    \ within the\n   realm specified in Destination-Realm AVP.\n   This AVP SHOULD\
    \ be placed as close to the Diameter header as\n   possible.\n"
- title: 6.6.  Destination-Realm AVP
  contents:
  - "6.6.  Destination-Realm AVP\n   The Destination-Realm AVP (AVP Code 283) is of\
    \ type DiameterIdentity,\n   and contains the realm the message is to be routed\
    \ to.  The\n   Destination-Realm AVP MUST NOT be present in Answer messages.\n\
    \   Diameter Clients insert the realm portion of the User-Name AVP.\n   Diameter\
    \ servers initiating a request message use the value of the\n   Origin-Realm AVP\
    \ from a previous message received from the intended\n   target host (unless it\
    \ is known a priori).  When present, the\n   Destination-Realm AVP is used to\
    \ perform message routing decisions.\n   Request messages whose ABNF does not\
    \ list the Destination-Realm AVP\n   as a mandatory AVP are inherently non-routable\
    \ messages.\n   This AVP SHOULD be placed as close to the Diameter header as\n\
    \   possible.\n"
- title: 6.7.  Routing AVPs
  contents:
  - "6.7.  Routing AVPs\n   The AVPs defined in this section are Diameter AVPs used\
    \ for routing\n   purposes.  These AVPs change as Diameter messages are processed\
    \ by\n   agents, and therefore MUST NOT be protected by end-to-end security.\n"
- title: 6.7.1.  Route-Record AVP
  contents:
  - "6.7.1.  Route-Record AVP\n   The Route-Record AVP (AVP Code 282) is of type DiameterIdentity.\
    \  The\n   identity added in this AVP MUST be the same as the one received in\n\
    \   the Origin-Host of the Capabilities Exchange message.\n"
- title: 6.7.2.  Proxy-Info AVP
  contents:
  - "6.7.2.  Proxy-Info AVP\n   The Proxy-Info AVP (AVP Code 284) is of type Grouped.\
    \  The Grouped\n   Data field has the following ABNF grammar:\n      Proxy-Info\
    \ ::= < AVP Header: 284 >\n                     { Proxy-Host }\n             \
    \        { Proxy-State }\n                   * [ AVP ]\n"
- title: 6.7.3.  Proxy-Host AVP
  contents:
  - "6.7.3.  Proxy-Host AVP\n   The Proxy-Host AVP (AVP Code 280) is of type DiameterIdentity.\
    \  This\n   AVP contains the identity of the host that added the Proxy-Info AVP.\n"
- title: 6.7.4.  Proxy-State AVP
  contents:
  - "6.7.4.  Proxy-State AVP\n   The Proxy-State AVP (AVP Code 33) is of type OctetString,\
    \ and\n   contains state local information, and MUST be treated as opaque data.\n"
- title: 6.8.  Auth-Application-Id AVP
  contents:
  - "6.8.  Auth-Application-Id AVP\n   The Auth-Application-Id AVP (AVP Code 258)\
    \ is of type Unsigned32 and\n   is used in order to advertise support of the Authentication\
    \ and\n   Authorization portion of an application (see Section 2.4).  The\n  \
    \ Auth-Application-Id MUST also be present in all Authentication and/or\n   Authorization\
    \ messages that are defined in a separate Diameter\n   specification and have\
    \ an Application ID assigned.\n"
- title: 6.9.  Acct-Application-Id AVP
  contents:
  - "6.9.  Acct-Application-Id AVP\n   The Acct-Application-Id AVP (AVP Code 259)\
    \ is of type Unsigned32 and\n   is used in order to advertise support of the Accounting\
    \ portion of an\n   application (see Section 2.4).  The Acct-Application-Id MUST\
    \ also be\n   present in all Accounting messages.  Exactly one of the Auth-\n\
    \   Application-Id and Acct-Application-Id AVPs MAY be present.\n"
- title: 6.10.  Inband-Security-Id AVP
  contents:
  - "6.10.  Inband-Security-Id AVP\n   The Inband-Security-Id AVP (AVP Code 299) is\
    \ of type Unsigned32 and\n   is used in order to advertise support of the Security\
    \ portion of the\n   application.\n   Currently, the following values are supported,\
    \ but there is ample\n   room to add new security Ids.\n   NO_INBAND_SECURITY\
    \                0\n      This peer does not support TLS.  This is the default\
    \ value, if the\n      AVP is omitted.\n   TLS                               1\n\
    \      This node supports TLS security, as defined by [TLS].\n"
- title: 6.11.  Vendor-Specific-Application-Id AVP
  contents:
  - "6.11.  Vendor-Specific-Application-Id AVP\n   The Vendor-Specific-Application-Id\
    \ AVP (AVP Code 260) is of type\n   Grouped and is used to advertise support of\
    \ a vendor-specific\n   Diameter Application.  Exactly one of the Auth-Application-Id\
    \ and\n   Acct-Application-Id AVPs MAY be present.\n   This AVP MUST also be present\
    \ as the first AVP in all experimental\n   commands defined in the vendor-specific\
    \ application.\n   This AVP SHOULD be placed as close to the Diameter header as\n\
    \   possible.\n   AVP Format\n   <Vendor-Specific-Application-Id> ::= < AVP Header:\
    \ 260 >\n                                     1* [ Vendor-Id ]\n             \
    \                        0*1{ Auth-Application-Id }\n                        \
    \             0*1{ Acct-Application-Id }\n"
- title: 6.12.  Redirect-Host AVP
  contents:
  - "6.12.  Redirect-Host AVP\n   One or more of instances of this AVP MUST be present\
    \ if the answer\n   message's 'E' bit is set and the Result-Code AVP is set to\n\
    \   DIAMETER_REDIRECT_INDICATION.\n   Upon receiving the above, the receiving\
    \ Diameter node SHOULD forward\n   the request directly to one of the hosts identified\
    \ in these AVPs.\n   The server contained in the selected Redirect-Host AVP SHOULD\
    \ be used\n   for all messages pertaining to this session.\n"
- title: 6.13.  Redirect-Host-Usage AVP
  contents:
  - "6.13.  Redirect-Host-Usage AVP\n   The Redirect-Host-Usage AVP (AVP Code 261)\
    \ is of type Enumerated.\n   This AVP MAY be present in answer messages whose\
    \ 'E' bit is set and\n   the Result-Code AVP is set to DIAMETER_REDIRECT_INDICATION.\n\
    \   When present, this AVP dictates how the routing entry resulting from\n   the\
    \ Redirect-Host is to be used.  The following values are supported:\n   DONT_CACHE\
    \                        0\n      The host specified in the Redirect-Host AVP\
    \ should not be cached.\n      This is the default value.\n   ALL_SESSION    \
    \                   1\n      All messages within the same session, as defined\
    \ by the same value\n      of the Session-ID AVP MAY be sent to the host specified\
    \ in the\n      Redirect-Host AVP.\n   ALL_REALM                         2\n \
    \     All messages destined for the realm requested MAY be sent to the\n     \
    \ host specified in the Redirect-Host AVP.\n   REALM_AND_APPLICATION         \
    \    3\n      All messages for the application requested to the realm specified\n\
    \      MAY be sent to the host specified in the Redirect-Host AVP.\n   ALL_APPLICATION\
    \                   4\n      All messages for the application requested MAY be\
    \ sent to the host\n      specified in the Redirect-Host AVP.\n   ALL_HOST   \
    \                       5\n      All messages that would be sent to the host that\
    \ generated the\n      Redirect-Host MAY be sent to the host specified in the\
    \ Redirect-\n      Host AVP.\n   ALL_USER                          6\n      All\
    \ messages for the user requested MAY be sent to the host\n      specified in\
    \ the Redirect-Host AVP.\n"
- title: 6.14.  Redirect-Max-Cache-Time AVP
  contents:
  - "6.14.  Redirect-Max-Cache-Time AVP\n   The Redirect-Max-Cache-Time AVP (AVP Code\
    \ 262) is of type Unsigned32.\n   This AVP MUST be present in answer messages\
    \ whose 'E' bit is set, the\n   Result-Code AVP is set to DIAMETER_REDIRECT_INDICATION\
    \ and the\n   Redirect-Host-Usage AVP set to a non-zero value.\n   This AVP contains\
    \ the maximum number of seconds the peer and route\n   table entries, created\
    \ as a result of the Redirect-Host, will be\n   cached.  Note that once a host\
    \ created due to a redirect indication\n   is no longer reachable, any associated\
    \ peer and routing table entries\n   MUST be deleted.\n"
- title: 6.15.  E2E-Sequence AVP
  contents:
  - "6.15.  E2E-Sequence AVP\n   The E2E-Sequence AVP (AVP Code 300) provides anti-replay\
    \ protection\n   for end to end messages and is of type grouped.  It contains\
    \ a random\n   value (an OctetString with a nonce) and counter (an Integer). \
    \ For\n   each end-to-end peer with which a node communicates (or remembers\n\
    \   communicating) a different nonce value MUST be used and the counter\n   is\
    \ initiated at zero and increases by one each time this AVP is\n   emitted to\
    \ that peer.  This AVP MUST be included in all messages\n   which use end-to-end\
    \ protection (e.g., CMS signing or encryption).\n"
- title: 7.  Error Handling
  contents:
  - "7.  Error Handling\n   There are two different types of errors in Diameter; protocol\
    \ and\n   application errors.  A protocol error is one that occurs at the base\n\
    \   protocol level, and MAY require per hop attention (e.g., message\n   routing\
    \ error).  Application errors, on the other hand, generally\n   occur due to a\
    \ problem with a function specified in a Diameter\n   application (e.g., user\
    \ authentication, Missing AVP).\n   Result-Code AVP values that are used to report\
    \ protocol errors MUST\n   only be present in answer messages whose 'E' bit is\
    \ set.  When a\n   request message is received that causes a protocol error, an\
    \ answer\n   message is returned with the 'E' bit set, and the Result-Code AVP\
    \ is\n   set to the appropriate protocol error value.  As the answer is sent\n\
    \   back towards the originator of the request, each proxy or relay agent\n  \
    \ MAY take action on the message.\n                          1. Request      \
    \  +---------+ Link Broken\n                +-------------------------->|Diameter\
    \ |----///----+\n                |     +---------------------|         |     \
    \      v\n         +------+--+  | 2. answer + 'E' set | Relay 2 |     +--------+\n\
    \         |Diameter |<-+ (Unable to Forward) +---------+     |Diameter|\n    \
    \     |         |                                        |  Home  |\n        \
    \ | Relay 1 |--+                     +---------+     | Server |\n         +---------+\
    \  |   3. Request        |Diameter |     +--------+\n                      +-------------------->|\
    \         |           ^\n                                            | Relay 3\
    \ |-----------+\n                                            +---------+\n   \
    \        Figure 7:  Example of Protocol Error causing answer message\n   Figure\
    \ 7 provides an example of a message forwarded upstream by a\n   Diameter relay.\
    \  When the message is received by Relay 2, and it\n   detects that it cannot\
    \ forward the request to the home server, an\n   answer message is returned with\
    \ the 'E' bit set and the Result-Code\n   AVP set to DIAMETER_UNABLE_TO_DELIVER.\
    \  Given that this error falls\n   within the protocol error category, Relay 1\
    \ would take special\n   action, and given the error, attempt to route the message\
    \ through its\n   alternate Relay 3.\n         +---------+ 1. Request  +---------+\
    \ 2. Request  +---------+\n         | Access  |------------>|Diameter |------------>|Diameter\
    \ |\n         |         |             |         |             |  Home   |\n  \
    \       | Device  |<------------|  Relay  |<------------| Server  |\n        \
    \ +---------+  4. Answer  +---------+  3. Answer  +---------+\n              \
    \      (Missing AVP)           (Missing AVP)\n              Figure 8: Example\
    \ of Application Error Answer message\n   Figure 8 provides an example of a Diameter\
    \ message that caused an\n   application error.  When application errors occur,\
    \ the Diameter\n   entity reporting the error clears the 'R' bit in the Command\
    \ Flags,\n   and adds the Result-Code AVP with the proper value.  Application\n\
    \   errors do not require any proxy or relay agent involvement, and\n   therefore\
    \ the message would be forwarded back to the originator of\n   the request.\n\
    \   There are certain Result-Code AVP application errors that require\n   additional\
    \ AVPs to be present in the answer.  In these cases, the\n   Diameter node that\
    \ sets the Result-Code AVP to indicate the error\n   MUST add the AVPs.  Examples\
    \ are:\n   -  An unrecognized AVP is received with the 'M' bit (Mandatory bit)\n\
    \      set, causes an answer to be sent with the Result-Code AVP set to\n    \
    \  DIAMETER_AVP_UNSUPPORTED, and the Failed-AVP AVP containing the\n      offending\
    \ AVP.\n   -  An AVP that is received with an unrecognized value causes an\n \
    \     answer to be returned with the Result-Code AVP set to\n      DIAMETER_INVALID_AVP_VALUE,\
    \ with the Failed-AVP AVP containing the\n      AVP causing the error.\n   - \
    \ A command is received with an AVP that is omitted, yet is\n      mandatory according\
    \ to the command's ABNF.  The receiver issues an\n      answer with the Result-Code\
    \ set to DIAMETER_MISSING_AVP, and\n      creates an AVP with the AVP Code and\
    \ other fields set as expected\n      in the missing AVP.  The created AVP is\
    \ then added to the Failed-\n      AVP AVP.\n   The Result-Code AVP describes\
    \ the error that the Diameter node\n   encountered in its processing.  In case\
    \ there are multiple errors,\n   the Diameter node MUST report only the first\
    \ error it encountered\n   (detected possibly in some implementation dependent\
    \ order).  The\n   specific errors that can be described by this AVP are described\
    \ in\n   the following section.\n"
- title: 7.1.  Result-Code AVP
  contents:
  - "7.1.  Result-Code AVP\n   The Result-Code AVP (AVP Code 268) is of type Unsigned32\
    \ and\n   indicates whether a particular request was completed successfully or\n\
    \   whether an error occurred.  All Diameter answer messages defined in\n   IETF\
    \ applications MUST include one Result-Code AVP.  A non-successful\n   Result-Code\
    \ AVP (one containing a non 2xxx value other than\n   DIAMETER_REDIRECT_INDICATION)\
    \ MUST include the Error-Reporting-Host\n   AVP if the host setting the Result-Code\
    \ AVP is different from the\n   identity encoded in the Origin-Host AVP.\n   The\
    \ Result-Code data field contains an IANA-managed 32-bit address\n   space representing\
    \ errors (see Section 11.4).  Diameter provides the\n   following classes of errors,\
    \ all identified by the thousands digit in\n   the decimal notation:\n      -\
    \  1xxx (Informational)\n      -  2xxx (Success)\n      -  3xxx (Protocol Errors)\n\
    \      -  4xxx (Transient Failures)\n      -  5xxx (Permanent Failure)\n   A non-recognized\
    \ class (one whose first digit is not defined in this\n   section) MUST be handled\
    \ as a permanent failure.\n"
- title: 7.1.1.  Informational
  contents:
  - "7.1.1.  Informational\n   Errors that fall within this category are used to inform\
    \ the\n   requester that a request could not be satisfied, and additional\n  \
    \ action is required on its part before access is granted.\n   DIAMETER_MULTI_ROUND_AUTH\
    \         1001\n      This informational error is returned by a Diameter server\
    \ to\n      inform the access device that the authentication mechanism being\n\
    \      used requires multiple round trips, and a subsequent request needs\n  \
    \    to be issued in order for access to be granted.\n"
- title: 7.1.2.  Success
  contents:
  - "7.1.2.  Success\n   Errors that fall within the Success category are used to\
    \ inform a\n   peer that a request has been successfully completed.\n   DIAMETER_SUCCESS\
    \                   2001\n      The Request was successfully completed.\n   DIAMETER_LIMITED_SUCCESS\
    \           2002\n      When returned, the request was successfully completed,\
    \ but\n      additional processing is required by the application in order to\n\
    \      provide service to the user.\n"
- title: 7.1.3.  Protocol Errors
  contents:
  - "7.1.3.  Protocol Errors\n   Errors that fall within the Protocol Error category\
    \ SHOULD be treated\n   on a per-hop basis, and Diameter proxies MAY attempt to\
    \ correct the\n   error, if it is possible.  Note that these and only these errors\
    \ MUST\n   only be used in answer messages whose 'E' bit is set.\n   DIAMETER_COMMAND_UNSUPPORTED\
    \       3001\n      The Request contained a Command-Code that the receiver did\
    \ not\n      recognize or support.  This MUST be used when a Diameter node\n \
    \     receives an experimental command that it does not understand.\n   DIAMETER_UNABLE_TO_DELIVER\
    \         3002\n      This error is given when Diameter can not deliver the message\
    \ to\n      the destination, either because no host within the realm\n      supporting\
    \ the required application was available to process the\n      request, or because\
    \ Destination-Host AVP was given without the\n      associated Destination-Realm\
    \ AVP.\n   DIAMETER_REALM_NOT_SERVED          3003\n      The intended realm of\
    \ the request is not recognized.\n   DIAMETER_TOO_BUSY                  3004\n\
    \      When returned, a Diameter node SHOULD attempt to send the message\n   \
    \   to an alternate peer.  This error MUST only be used when a\n      specific\
    \ server is requested, and it cannot provide the requested\n      service.\n \
    \  DIAMETER_LOOP_DETECTED             3005\n      An agent detected a loop while\
    \ trying to get the message to the\n      intended recipient.  The message MAY\
    \ be sent to an alternate peer,\n      if one is available, but the peer reporting\
    \ the error has\n      identified a configuration problem.\n   DIAMETER_REDIRECT_INDICATION\
    \       3006\n      A redirect agent has determined that the request could not\
    \ be\n      satisfied locally and the initiator of the request should direct\n\
    \      the request directly to the server, whose contact information has\n   \
    \   been added to the response.  When set, the Redirect-Host AVP MUST\n      be\
    \ present.\n   DIAMETER_APPLICATION_UNSUPPORTED   3007\n      A request was sent\
    \ for an application that is not supported.\n   DIAMETER_INVALID_HDR_BITS    \
    \      3008\n      A request was received whose bits in the Diameter header were\n\
    \      either set to an invalid combination, or to a value that is\n      inconsistent\
    \ with the command code's definition.\n   DIAMETER_INVALID_AVP_BITS          3009\n\
    \      A request was received that included an AVP whose flag bits are\n     \
    \ set to an unrecognized value, or that is inconsistent with the\n      AVP's\
    \ definition.\n   DIAMETER_UNKNOWN_PEER              3010\n      A CER was received\
    \ from an unknown peer.\n"
- title: 7.1.4.  Transient Failures
  contents:
  - "7.1.4.  Transient Failures\n      Errors that fall within the transient failures\
    \ category are used\n      to inform a peer that the request could not be satisfied\
    \ at the\n      time it was received, but MAY be able to satisfy the request in\n\
    \      the future.\n   DIAMETER_AUTHENTICATION_REJECTED   4001\n      The authentication\
    \ process for the user failed, most likely due to\n      an invalid password used\
    \ by the user.  Further attempts MUST only\n      be tried after prompting the\
    \ user for a new password.\n   DIAMETER_OUT_OF_SPACE              4002\n     \
    \ A Diameter node received the accounting request but was unable to\n      commit\
    \ it to stable storage due to a temporary lack of space.\n   ELECTION_LOST   \
    \                   4003\n      The peer has determined that it has lost the election\
    \ process and\n      has therefore disconnected the transport connection.\n"
- title: 7.1.5.  Permanent Failures
  contents:
  - "7.1.5.  Permanent Failures\n      Errors that fall within the permanent failures\
    \ category are used\n      to inform the peer that the request failed, and should\
    \ not be\n      attempted again.\n   DIAMETER_AVP_UNSUPPORTED           5001\n\
    \      The peer received a message that contained an AVP that is not\n      recognized\
    \ or supported and was marked with the Mandatory bit.  A\n      Diameter message\
    \ with this error MUST contain one or more Failed-\n      AVP AVP containing the\
    \ AVPs that caused the failure.\n   DIAMETER_UNKNOWN_SESSION_ID        5002\n\
    \      The request contained an unknown Session-Id.\n   DIAMETER_AUTHORIZATION_REJECTED\
    \    5003\n      A request was received for which the user could not be authorized.\n\
    \      This error could occur if the service requested is not permitted\n    \
    \  to the user.\n   DIAMETER_INVALID_AVP_VALUE         5004\n      The request\
    \ contained an AVP with an invalid value in its data\n      portion.  A Diameter\
    \ message indicating this error MUST include\n      the offending AVPs within\
    \ a Failed-AVP AVP.\n   DIAMETER_MISSING_AVP               5005\n      The request\
    \ did not contain an AVP that is required by the Command\n      Code definition.\
    \  If this value is sent in the Result-Code AVP, a\n      Failed-AVP AVP SHOULD\
    \ be included in the message.  The Failed-AVP\n      AVP MUST contain an example\
    \ of the missing AVP complete with the\n      Vendor-Id if applicable.  The value\
    \ field of the missing AVP\n      should be of correct minimum length and contain\
    \ zeroes.\n   DIAMETER_RESOURCES_EXCEEDED        5006\n      A request was received\
    \ that cannot be authorized because the user\n      has already expended allowed\
    \ resources.  An example of this error\n      condition is a user that is restricted\
    \ to one dial-up PPP port,\n      attempts to establish a second PPP connection.\n\
    \   DIAMETER_CONTRADICTING_AVPS        5007\n      The Home Diameter server has\
    \ detected AVPs in the request that\n      contradicted each other, and is not\
    \ willing to provide service to\n      the user.  One or more Failed-AVP AVPs\
    \ MUST be present, containing\n      the AVPs that contradicted each other.\n\
    \   DIAMETER_AVP_NOT_ALLOWED           5008\n      A message was received with\
    \ an AVP that MUST NOT be present.  The\n      Failed-AVP AVP MUST be included\
    \ and contain a copy of the\n      offending AVP.\n   DIAMETER_AVP_OCCURS_TOO_MANY_TIMES\
    \ 5009\n      A message was received that included an AVP that appeared more\n\
    \      often than permitted in the message definition.  The Failed-AVP\n     \
    \ AVP MUST be included and contain a copy of the first instance of\n      the\
    \ offending AVP that exceeded the maximum number of occurrences\n   DIAMETER_NO_COMMON_APPLICATION\
    \     5010\n      This error is returned when a CER message is received, and there\n\
    \      are no common applications supported between the peers.\n   DIAMETER_UNSUPPORTED_VERSION\
    \       5011\n      This error is returned when a request was received, whose\
    \ version\n      number is unsupported.\n   DIAMETER_UNABLE_TO_COMPLY        \
    \  5012\n      This error is returned when a request is rejected for unspecified\n\
    \      reasons.\n   DIAMETER_INVALID_BIT_IN_HEADER     5013\n      This error\
    \ is returned when an unrecognized bit in the Diameter\n      header is set to\
    \ one (1).\n   DIAMETER_INVALID_AVP_LENGTH        5014\n      The request contained\
    \ an AVP with an invalid length.  A Diameter\n      message indicating this error\
    \ MUST include the offending AVPs\n      within a Failed-AVP AVP.\n   DIAMETER_INVALID_MESSAGE_LENGTH\
    \    5015\n      This error is returned when a request is received with an invalid\n\
    \      message length.\n   DIAMETER_INVALID_AVP_BIT_COMBO     5016\n      The\
    \ request contained an AVP with which is not allowed to have the\n      given\
    \ value in the AVP Flags field.  A Diameter message indicating\n      this error\
    \ MUST include the offending AVPs within a Failed-AVP\n      AVP.\n   DIAMETER_NO_COMMON_SECURITY\
    \        5017\n      This error is returned when a CER message is received, and\
    \ there\n      are no common security mechanisms supported between the peers.\
    \  A\n      Capabilities-Exchange-Answer (CEA) MUST be returned with the\n   \
    \   Result-Code AVP set to DIAMETER_NO_COMMON_SECURITY.\n"
- title: 7.2.  Error Bit
  contents:
  - "7.2.  Error Bit\n   The 'E' (Error Bit) in the Diameter header is set when the\
    \ request\n   caused a protocol-related error (see Section 7.1.3).  A message\
    \ with\n   the 'E' bit MUST NOT be sent as a response to an answer message.\n\
    \   Note that a message with the 'E' bit set is still subjected to the\n   processing\
    \ rules defined in Section 6.2.  When set, the answer\n   message will not conform\
    \ to the ABNF specification for the command,\n   and will instead conform to the\
    \ following ABNF:\n   Message Format\n   <answer-message> ::= < Diameter Header:\
    \ code, ERR [PXY] >\n                     0*1< Session-Id >\n                \
    \        { Origin-Host }\n                        { Origin-Realm }\n         \
    \               { Result-Code }\n                        [ Origin-State-Id ]\n\
    \                        [ Error-Reporting-Host ]\n                        [ Proxy-Info\
    \ ]\n                      * [ AVP ]\n   Note that the code used in the header\
    \ is the same than the one found\n   in the request message, but with the 'R'\
    \ bit cleared and the 'E' bit\n   set.  The 'P' bit in the header is set to the\
    \ same value as the one\n   found in the request message.\n"
- title: 7.3.  Error-Message AVP
  contents:
  - "7.3.  Error-Message AVP\n   The Error-Message AVP (AVP Code 281) is of type UTF8String.\
    \  It MAY\n   accompany a Result-Code AVP as a human readable error message. \
    \ The\n   Error-Message AVP is not intended to be useful in real-time, and\n \
    \  SHOULD NOT be expected to be parsed by network entities.\n"
- title: 7.4.  Error-Reporting-Host AVP
  contents:
  - "7.4.  Error-Reporting-Host AVP\n   The Error-Reporting-Host AVP (AVP Code 294)\
    \ is of type\n   DiameterIdentity.  This AVP contains the identity of the Diameter\n\
    \   host that sent the Result-Code AVP to a value other than 2001\n   (Success),\
    \ only if the host setting the Result-Code is different from\n   the one encoded\
    \ in the Origin-Host AVP.  This AVP is intended to be\n   used for troubleshooting\
    \ purposes, and MUST be set when the Result-\n   Code AVP indicates a failure.\n"
- title: 7.5.  Failed-AVP AVP
  contents:
  - "7.5.  Failed-AVP AVP\n   The Failed-AVP AVP (AVP Code 279) is of type Grouped\
    \ and provides\n   debugging information in cases where a request is rejected\
    \ or not\n   fully processed due to erroneous information in a specific AVP. \
    \ The\n   value of the Result-Code AVP will provide information on the reason\n\
    \   for the Failed-AVP AVP.\n   The possible reasons for this AVP are the presence\
    \ of an improperly\n   constructed AVP, an unsupported or unrecognized AVP, an\
    \ invalid AVP\n   value, the omission of a required AVP, the presence of an explicitly\n\
    \   excluded AVP (see tables in Section 10), or the presence of two or\n   more\
    \ occurrences of an AVP which is restricted to 0, 1, or 0-1\n   occurrences.\n\
    \   A Diameter message MAY contain one Failed-AVP AVP, containing the\n   entire\
    \ AVP that could not be processed successfully.  If the failure\n   reason is\
    \ omission of a required AVP, an AVP with the missing AVP\n   code, the missing\
    \ vendor id, and a zero filled payload of the minimum\n   required length for\
    \ the omitted AVP will be added.\n   AVP Format\n      <Failed-AVP> ::= < AVP\
    \ Header: 279 >\n                    1* {AVP}\n"
- title: 7.6.  Experimental-Result AVP
  contents:
  - "7.6.  Experimental-Result AVP\n   The Experimental-Result AVP (AVP Code 297)\
    \ is of type Grouped, and\n   indicates whether a particular vendor-specific request\
    \ was completed\n   successfully or whether an error occurred.  Its Data field\
    \ has the\n   following ABNF grammar:\n   AVP Format\n      Experimental-Result\
    \ ::= < AVP Header: 297 >\n                                 { Vendor-Id }\n  \
    \                               { Experimental-Result-Code }\n   The Vendor-Id\
    \ AVP (see Section 5.3.3) in this grouped AVP identifies\n   the vendor responsible\
    \ for the assignment of the result code which\n   follows.  All Diameter answer\
    \ messages defined in vendor-specific\n   applications MUST include either one\
    \ Result-Code AVP or one\n   Experimental-Result AVP.\n"
- title: 7.7.  Experimental-Result-Code AVP
  contents:
  - "7.7.  Experimental-Result-Code AVP\n   The Experimental-Result-Code AVP (AVP\
    \ Code 298) is of type Unsigned32\n   and contains a vendor-assigned value representing\
    \ the result of\n   processing the request.\n   It is recommended that vendor-specific\
    \ result codes follow the same\n   conventions given for the Result-Code AVP regarding\
    \ the different\n   types of result codes and the handling of errors (for non\
    \ 2xxx\n   values).\n"
- title: 8.  Diameter User Sessions
  contents:
  - "8.  Diameter User Sessions\n   Diameter can provide two different types of services\
    \ to applications.\n   The first involves authentication and authorization, and\
    \ can\n   optionally make use of accounting.  The second only makes use of\n \
    \  accounting.\n   When a service makes use of the authentication and/or authorization\n\
    \   portion of an application, and a user requests access to the network,\n  \
    \ the Diameter client issues an auth request to its local server.  The\n   auth\
    \ request is defined in a service specific Diameter application\n   (e.g., NASREQ).\
    \  The request contains a Session-Id AVP, which is used\n   in subsequent messages\
    \ (e.g., subsequent authorization, accounting,\n   etc) relating to the user's\
    \ session.  The Session-Id AVP is a means\n   for the client and servers to correlate\
    \ a Diameter message with a\n   user session.\n   When a Diameter server authorizes\
    \ a user to use network resources for\n   a finite amount of time, and it is willing\
    \ to extend the\n   authorization via a future request, it MUST add the Authorization-\n\
    \   Lifetime AVP to the answer message.  The Authorization-Lifetime AVP\n   defines\
    \ the maximum number of seconds a user MAY make use of the\n   resources before\
    \ another authorization request is expected by the\n   server.  The Auth-Grace-Period\
    \ AVP contains the number of seconds\n   following the expiration of the Authorization-Lifetime,\
    \ after which\n   the server will release all state information related to the\
    \ user's\n   session.  Note that if payment for services is expected by the\n\
    \   serving realm from the user's home realm, the Authorization-Lifetime\n   AVP,\
    \ combined with the Auth-Grace-Period AVP, implies the maximum\n   length of the\
    \ session the home realm is willing to be fiscally\n   responsible for.  Services\
    \ provided past the expiration of the\n   Authorization-Lifetime and Auth-Grace-Period\
    \ AVPs are the\n   responsibility of the access device.  Of course, the actual\
    \ cost of\n   services rendered is clearly outside the scope of the protocol.\n\
    \   An access device that does not expect to send a re-authorization or a\n  \
    \ session termination request to the server MAY include the Auth-\n   Session-State\
    \ AVP with the value set to NO_STATE_MAINTAINED as a hint\n   to the server. \
    \ If the server accepts the hint, it agrees that since\n   no session termination\
    \ message will be received once service to the\n   user is terminated, it cannot\
    \ maintain state for the session.  If the\n   answer message from the server contains\
    \ a different value in the\n   Auth-Session-State AVP (or the default value if\
    \ the AVP is absent),\n   the access device MUST follow the server's directives.\
    \  Note that the\n   value NO_STATE_MAINTAINED MUST NOT be set in subsequent re-\n\
    \   authorization requests and answers.\n   The base protocol does not include\
    \ any authorization request\n   messages, since these are largely application-specific\
    \ and are\n   defined in a Diameter application document.  However, the base\n\
    \   protocol does define a set of messages that is used to terminate user\n  \
    \ sessions.  These are used to allow servers that maintain state\n   information\
    \ to free resources.\n   When a service only makes use of the Accounting portion\
    \ of the\n   Diameter protocol, even in combination with an application, the\n\
    \   Session-Id is still used to identify user sessions.  However, the\n   session\
    \ termination messages are not used, since a session is\n   signaled as being\
    \ terminated by issuing an accounting stop message.\n"
- title: 8.1.  Authorization Session State Machine
  contents:
  - "8.1.  Authorization Session State Machine\n   This section contains a set of\
    \ finite state machines, representing\n   the life cycle of Diameter sessions,\
    \ and which MUST be observed by\n   all Diameter implementations that make use\
    \ of the authentication\n   and/or authorization portion of a Diameter application.\
    \  The term\n   Service-Specific below refers to a message defined in a Diameter\n\
    \   application (e.g., Mobile IPv4, NASREQ).\n   There are four different authorization\
    \ session state machines\n   supported in the Diameter base protocol.  The first\
    \ two describe a\n   session in which the server is maintaining session state,\
    \ indicated\n   by the value of the Auth-Session-State AVP (or its absence). \
    \ One\n   describes the session from a client perspective, the other from a\n\
    \   server perspective.  The second two state machines are used when the\n   server\
    \ does not maintain session state.  Here again, one describes\n   the session\
    \ from a client perspective, the other from a server\n   perspective.\n   When\
    \ a session is moved to the Idle state, any resources that were\n   allocated\
    \ for the particular session must be released.  Any event not\n   listed in the\
    \ state machines MUST be considered as an error\n   condition, and an answer,\
    \ if applicable, MUST be returned to the\n   originator of the message.\n   In\
    \ the state table, the event 'Failure to send X' means that the\n   Diameter agent\
    \ is unable to send command X to the desired\n   destination.  This could be due\
    \ to the peer being down, or due to the\n   peer sending back a transient failure\
    \ or temporary protocol error\n   notification DIAMETER_TOO_BUSY or DIAMETER_LOOP_DETECTED\
    \ in the\n   Result-Code AVP of the corresponding Answer command.  The event 'X\n\
    \   successfully sent' is the complement of 'Failure to send X'.\n   The following\
    \ state machine is observed by a client when state is\n   maintained on the server:\n\
    \                           CLIENT, STATEFUL\n   State     Event             \
    \             Action     New State\n   -------------------------------------------------------------\n\
    \   Idle      Client or Device Requests      Send       Pending\n            \
    \ access                         service\n                                   \
    \         specific\n                                            auth req\n   Idle\
    \      ASR Received                   Send ASA   Idle\n             for unknown\
    \ session            with\n                                            Result-Code\n\
    \                                            = UNKNOWN_\n                    \
    \                        SESSION_ID\n   Pending   Successful Service-specific\
    \    Grant      Open\n             authorization answer           Access\n   \
    \          received with default\n             Auth-Session-State value\n   Pending\
    \   Successful Service-specific    Sent STR   Discon\n             authorization\
    \ answer received\n             but service not provided\n   Pending   Error processing\
    \ successful    Sent STR   Discon\n             Service-specific authorization\n\
    \             answer\n   Pending   Failed Service-specific        Cleanup    Idle\n\
    \             authorization answer received\n   Open      User or client device\
    \          Send       Open\n             requests access to service     service\n\
    \                                            specific\n                      \
    \                      auth req\n   Open      Successful Service-specific    Provide\
    \    Open\n             authorization answer received  Service\n   Open      Failed\
    \ Service-specific        Discon.    Idle\n             authorization answer \
    \          user/device\n             received.\n   Open      Session-Timeout Expires\
    \ on     Send STR   Discon\n             Access Device\n   Open      ASR Received,\
    \                  Send ASA   Discon\n             client will comply with   \
    \     with\n             request to end the session     Result-Code\n        \
    \                                    = SUCCESS,\n                            \
    \                Send STR.\n   Open      ASR Received,                  Send ASA\
    \   Open\n             client will not comply with    with\n             request\
    \ to end the session     Result-Code\n                                       \
    \     != SUCCESS\n   Open      Authorization-Lifetime +       Send STR   Discon\n\
    \             Auth-Grace-Period expires on\n             access device\n   Discon\
    \    ASR Received                   Send ASA   Discon\n   Discon    STA Received\
    \                   Discon.    Idle\n                                        \
    \    user/device\n   The following state machine is observed by a server when\
    \ it is\n   maintaining state for the session:\n                          SERVER,\
    \ STATEFUL\n   State     Event                          Action     New State\n\
    \   -------------------------------------------------------------\n   Idle   \
    \   Service-specific authorization Send       Open\n             request received,\
    \ and          successful\n             user is authorized             serv.\n\
    \                                            specific answer\n   Idle      Service-specific\
    \ authorization Send       Idle\n             request received, and          failed\
    \ serv.\n             user is not authorized         specific answer\n   Open\
    \      Service-specific authorization Send       Open\n             request received,\
    \ and user     successful\n             is authorized                  serv. specific\n\
    \                                                  answer\n   Open      Service-specific\
    \ authorization Send       Idle\n             request received, and user     failed\
    \ serv.\n             is not authorized              specific\n              \
    \                              answer,\n                                     \
    \       Cleanup\n   Open      Home server wants to           Send ASR   Discon\n\
    \             terminate the service\n   Open      Authorization-Lifetime (and\
    \    Cleanup    Idle\n             Auth-Grace-Period) expires\n             on\
    \ home server.\n   Open      Session-Timeout expires on     Cleanup    Idle\n\
    \             home server\n   Discon    Failure to send ASR            Wait, \
    \     Discon\n                                            resend ASR\n   Discon\
    \    ASR successfully sent and      Cleanup    Idle\n             ASA Received\
    \ with Result-Code\n   Not       ASA Received                   None       No\
    \ Change.\n   Discon\n   Any       STR Received                   Send STA,  Idle\n\
    \                                            Cleanup.\n   The following state\
    \ machine is observed by a client when state is not\n   maintained on the server:\n\
    \                           CLIENT, STATELESS\n   State     Event            \
    \              Action     New State\n   -------------------------------------------------------------\n\
    \   Idle      Client or Device Requests      Send       Pending\n            \
    \ access                         service\n                                   \
    \         specific\n                                            auth req\n   Pending\
    \   Successful Service-specific    Grant      Open\n             authorization\
    \ answer           Access\n             received with Auth-Session-\n        \
    \     State set to\n             NO_STATE_MAINTAINED\n   Pending   Failed Service-specific\
    \        Cleanup    Idle\n             authorization answer\n             received\n\
    \   Open      Session-Timeout Expires on     Discon.    Idle\n             Access\
    \ Device                  user/device\n   Open      Service to user is terminated\
    \  Discon.    Idle\n                                            user/device\n\
    \   The following state machine is observed by a server when it is not\n   maintaining\
    \ state for the session:\n                           SERVER, STATELESS\n   State\
    \     Event                          Action     New State\n   -------------------------------------------------------------\n\
    \   Idle      Service-specific authorization Send serv. Idle\n             request\
    \ received, and          specific\n             successfully processed       \
    \  answer\n"
- title: 8.2.  Accounting Session State Machine
  contents:
  - "8.2.  Accounting Session State Machine\n   The following state machines MUST\
    \ be supported for applications that\n   have an accounting portion or that require\
    \ only accounting services.\n   The first state machine is to be observed by clients.\n\
    \   See Section 9.7 for Accounting Command Codes and Section 9.8 for\n   Accounting\
    \ AVPs.\n   The server side in the accounting state machine depends in some cases\n\
    \   on the particular application.  The Diameter base protocol defines a\n   default\
    \ state machine that MUST be followed by all applications that\n   have not specified\
    \ other state machines.  This is the second state\n   machine in this section\
    \ described below.\n   The default server side state machine requires the reception\
    \ of\n   accounting records in any order and at any time, and does not place\n\
    \   any standards requirement on the processing of these records.\n   Implementations\
    \ of Diameter MAY perform checking, ordering,\n   correlation, fraud detection,\
    \ and other tasks based on these records.\n   Both base Diameter AVPs as well\
    \ as application specific AVPs MAY be\n   inspected as a part of these tasks.\
    \  The tasks can happen either\n   immediately after record reception or in a\
    \ post-processing phase.\n   However, as these tasks are typically application\
    \ or even policy\n   dependent, they are not standardized by the Diameter specifications.\n\
    \   Applications MAY define requirements on when to accept accounting\n   records\
    \ based on the used value of Accounting-Realtime-Required AVP,\n   credit limits\
    \ checks, and so on.\n   However, the Diameter base protocol defines one optional\
    \ server side\n   state machine that MAY be followed by applications that require\n\
    \   keeping track of the session state at the accounting server.  Note\n   that\
    \ such tracking is incompatible with the ability to sustain long\n   duration\
    \ connectivity problems.  Therefore, the use of this state\n   machine is recommended\
    \ only in applications where the value of the\n   Accounting-Realtime-Required\
    \ AVP is DELIVER_AND_GRANT, and hence\n   accounting connectivity problems are\
    \ required to cause the serviced\n   user to be disconnected.  Otherwise, records\
    \ produced by the client\n   may be lost by the server which no longer accepts\
    \ them after the\n   connectivity is re-established.  This state machine is the\
    \ third\n   state machine in this section.  The state machine is supervised by\
    \ a\n   supervision session timer Ts, which the value should be reasonably\n \
    \  higher than the Acct_Interim_Interval value.  Ts MAY be set to two\n   times\
    \ the value of the Acct_Interim_Interval so as to avoid the\n   accounting session\
    \ in the Diameter server to change to Idle state in\n   case of short transient\
    \ network failure.\n   Any event not listed in the state machines MUST be considered\
    \ as an\n   error condition, and a corresponding answer, if applicable, MUST be\n\
    \   returned to the originator of the message.\n   In the state table, the event\
    \ 'Failure to send' means that the\n   Diameter client is unable to communicate\
    \ with the desired\n   destination.  This could be due to the peer being down,\
    \ or due to the\n   peer sending back a transient failure or temporary protocol\
    \ error\n   notification DIAMETER_OUT_OF_SPACE, DIAMETER_TOO_BUSY, or\n   DIAMETER_LOOP_DETECTED\
    \ in the Result-Code AVP of the Accounting\n   Answer command.\n   The event 'Failed\
    \ answer' means that the Diameter client received a\n   non-transient failure\
    \ notification in the Accounting Answer command.\n   Note that the action 'Disconnect\
    \ user/dev' MUST have an effect also\n   to the authorization session state table,\
    \ e.g., cause the STR message\n   to be sent, if the given application has both\n\
    \   authentication/authorization and accounting portions.\n   The states PendingS,\
    \ PendingI, PendingL, PendingE and PendingB stand\n   for pending states to wait\
    \ for an answer to an accounting request\n   related to a Start, Interim, Stop,\
    \ Event or buffered record,\n   respectively.\n                         CLIENT,\
    \ ACCOUNTING\n   State     Event                          Action     New State\n\
    \   -------------------------------------------------------------\n   Idle   \
    \   Client or device requests      Send       PendingS\n             access  \
    \                       accounting\n                                         \
    \   start req.\n   Idle      Client or device requests      Send       PendingE\n\
    \             a one-time service             accounting\n                    \
    \                        event req\n   Idle      Records in storage          \
    \   Send       PendingB\n                                            record\n\
    \   PendingS  Successful accounting                     Open\n             start\
    \ answer received\n   PendingS  Failure to send and buffer     Store      Open\n\
    \             space available and realtime   Start\n             not equal to\
    \ DELIVER_AND_GRANT Record\n   PendingS  Failure to send and no buffer       \
    \      Open\n             space available and realtime\n             equal to\
    \ GRANT_AND_LOSE\n   PendingS  Failure to send and no buffer  Disconnect Idle\n\
    \             space available and realtime   user/dev\n             not equal\
    \ to\n             GRANT_AND_LOSE\n   PendingS  Failed accounting start answer\
    \            Open\n             received and realtime equal\n             to GRANT_AND_LOSE\n\
    \   PendingS  Failed accounting start answer Disconnect Idle\n             received\
    \ and realtime not      user/dev\n             equal to GRANT_AND_LOSE\n   PendingS\
    \  User service terminated        Store      PendingS\n                      \
    \                      stop\n                                            record\n\
    \   Open      Interim interval elapses       Send       PendingI\n           \
    \                                 accounting\n                               \
    \             interim\n                                            record\n  \
    \ Open      User service terminated        Send       PendingL\n             \
    \                               accounting\n                                 \
    \           stop req.\n   PendingI  Successful accounting interim            \
    \ Open\n             answer received\n   PendingI  Failure to send and (buffer\
    \    Store      Open\n             space available or old record  interim\n  \
    \           can be overwritten) and        record\n             realtime not equal\
    \ to\n             DELIVER_AND_GRANT\n   PendingI  Failure to send and no buffer\
    \             Open\n             space available and realtime\n             equal\
    \ to GRANT_AND_LOSE\n   PendingI  Failure to send and no buffer  Disconnect Idle\n\
    \             space available and realtime   user/dev\n             not equal\
    \ to GRANT_AND_LOSE\n   PendingI  Failed accounting interim                 Open\n\
    \             answer received and realtime\n             equal to GRANT_AND_LOSE\n\
    \   PendingI  Failed accounting interim      Disconnect Idle\n             answer\
    \ received and realtime   user/dev\n             not equal to GRANT_AND_LOSE\n\
    \   PendingI  User service terminated        Store      PendingI\n           \
    \                                 stop\n                                     \
    \       record\n   PendingE  Successful accounting                     Idle\n\
    \             event answer received\n   PendingE  Failure to send and buffer \
    \    Store      Idle\n             space available                event\n    \
    \                                        record\n   PendingE  Failure to send\
    \ and no buffer             Idle\n             space available\n   PendingE  Failed\
    \ accounting event answer            Idle\n             received\n   PendingB\
    \  Successful accounting answer   Delete     Idle\n             received     \
    \                  record\n   PendingB  Failure to send                      \
    \     Idle\n   PendingB  Failed accounting answer       Delete     Idle\n    \
    \         received                       record\n   PendingL  Successful accounting\
    \                     Idle\n             stop answer received\n   PendingL  Failure\
    \ to send and buffer     Store      Idle\n             space available       \
    \         stop\n                                            record\n   PendingL\
    \  Failure to send and no buffer             Idle\n             space available\n\
    \   PendingL  Failed accounting stop answer             Idle\n             received\n\
    \                    SERVER, STATELESS ACCOUNTING\n   State     Event        \
    \                  Action     New State\n   -------------------------------------------------------------\n\
    \   Idle      Accounting start request       Send       Idle\n             received,\
    \ and successfully     accounting\n             processed.                   \
    \  start\n                                            answer\n   Idle      Accounting\
    \ event request       Send       Idle\n             received, and successfully\
    \     accounting\n             processed.                     event\n        \
    \                                    answer\n   Idle      Interim record received,\
    \       Send       Idle\n             and successfully processed.    accounting\n\
    \                                            interim\n                       \
    \                     answer\n   Idle      Accounting stop request        Send\
    \       Idle\n             received, and successfully     accounting\n       \
    \      processed                      stop answer\n   Idle      Accounting request\
    \ received,   Send       Idle\n             no space left to store         accounting\n\
    \             records                        answer,\n                       \
    \                     Result-Code\n                                          \
    \  = OUT_OF_\n                                            SPACE\n            \
    \             SERVER, STATEFUL ACCOUNTING\n   State     Event                \
    \          Action     New State\n   -------------------------------------------------------------\n\
    \   Idle      Accounting start request       Send       Open\n             received,\
    \ and successfully     accounting\n             processed.                   \
    \  start\n                                            answer,\n              \
    \                              Start Ts\n   Idle      Accounting event request\
    \       Send       Idle\n             received, and successfully     accounting\n\
    \             processed.                     event\n                         \
    \                   answer\n   Idle      Accounting request received,   Send \
    \      Idle\n             no space left to store         accounting\n        \
    \     records                        answer,\n                               \
    \             Result-Code\n                                            = OUT_OF_\n\
    \                                            SPACE\n   Open      Interim record\
    \ received,       Send       Open\n             and successfully processed.  \
    \  accounting\n                                            interim\n         \
    \                                   answer,\n                                \
    \            Restart Ts\n   Open      Accounting stop request        Send    \
    \   Idle\n             received, and successfully     accounting\n           \
    \  processed                      stop answer,\n                             \
    \               Stop Ts\n   Open      Accounting request received,   Send    \
    \   Idle\n             no space left to store         accounting\n           \
    \  records                        answer,\n                                  \
    \          Result-Code\n                                            = OUT_OF_\n\
    \                                            SPACE,\n                        \
    \                    Stop Ts\n   Open      Session supervision timer Ts   Stop\
    \ Ts    Idle\n             expired\n"
- title: 8.3.  Server-Initiated Re-Auth
  contents:
  - "8.3.  Server-Initiated Re-Auth\n   A Diameter server may initiate a re-authentication\
    \ and/or re-\n   authorization service for a particular session by issuing a Re-Auth-\n\
    \   Request (RAR).\n   For example, for pre-paid services, the Diameter server\
    \ that\n   originally authorized a session may need some confirmation that the\n\
    \   user is still using the services.\n   An access device that receives a RAR\
    \ message with Session-Id equal to\n   a currently active session MUST initiate\
    \ a re-auth towards the user,\n   if the service supports this particular feature.\
    \  Each Diameter\n   application MUST state whether service-initiated re-auth\
    \ is\n   supported, since some applications do not allow access devices to\n \
    \  prompt the user for re-auth.\n"
- title: 8.3.1.  Re-Auth-Request
  contents:
  - "8.3.1.  Re-Auth-Request\n   The Re-Auth-Request (RAR), indicated by the Command-Code\
    \ set to 258\n   and the message flags' 'R' bit set, may be sent by any server\
    \ to the\n   access device that is providing session service, to request that\
    \ the\n   user be re-authenticated and/or re-authorized.\n   Message Format\n\
    \      <RAR>  ::= < Diameter Header: 258, REQ, PXY >\n                 < Session-Id\
    \ >\n                 { Origin-Host }\n                 { Origin-Realm }\n   \
    \              { Destination-Realm }\n                 { Destination-Host }\n\
    \                 { Auth-Application-Id }\n                 { Re-Auth-Request-Type\
    \ }\n                 [ User-Name ]\n                 [ Origin-State-Id ]\n  \
    \             * [ Proxy-Info ]\n               * [ Route-Record ]\n          \
    \     * [ AVP ]\n"
- title: 8.3.2.  Re-Auth-Answer
  contents:
  - "8.3.2.  Re-Auth-Answer\n   The Re-Auth-Answer (RAA), indicated by the Command-Code\
    \ set to 258\n   and the message flags' 'R' bit clear, is sent in response to\
    \ the RAR.\n   The Result-Code AVP MUST be present, and indicates the disposition\
    \ of\n   the request.\n   A successful RAA message MUST be followed by an application-specific\n\
    \   authentication and/or authorization message.\n   Message Format\n      <RAA>\
    \  ::= < Diameter Header: 258, PXY >\n                 < Session-Id >\n      \
    \           { Result-Code }\n                 { Origin-Host }\n              \
    \   { Origin-Realm }\n                 [ User-Name ]\n                 [ Origin-State-Id\
    \ ]\n                 [ Error-Message ]\n                 [ Error-Reporting-Host\
    \ ]\n               * [ Failed-AVP ]\n               * [ Redirect-Host ]\n   \
    \              [ Redirect-Host-Usage ]\n                 [ Redirect-Host-Cache-Time\
    \ ]\n               * [ Proxy-Info ]\n               * [ AVP ]\n"
- title: 8.4.  Session Termination
  contents:
  - "8.4.  Session Termination\n   It is necessary for a Diameter server that authorized\
    \ a session, for\n   which it is maintaining state, to be notified when that session\
    \ is no\n   longer active, both for tracking purposes as well as to allow\n  \
    \ stateful agents to release any resources that they may have provided\n   for\
    \ the user's session.  For sessions whose state is not being\n   maintained, this\
    \ section is not used.\n   When a user session that required Diameter authorization\
    \ terminates,\n   the access device that provided the service MUST issue a Session-\n\
    \   Termination-Request (STR) message to the Diameter server that\n   authorized\
    \ the service, to notify it that the session is no longer\n   active.  An STR\
    \ MUST be issued when a user session terminates for any\n   reason, including\
    \ user logoff, expiration of Session-Timeout,\n   administrative action, termination\
    \ upon receipt of an Abort-Session-\n   Request (see below), orderly shutdown\
    \ of the access device, etc.\n   The access device also MUST issue an STR for\
    \ a session that was\n   authorized but never actually started.  This could occur,\
    \ for\n   example, due to a sudden resource shortage in the access device, or\n\
    \   because the access device is unwilling to provide the type of service\n  \
    \ requested in the authorization, or because the access device does not\n   support\
    \ a mandatory AVP returned in the authorization, etc.\n   It is also possible\
    \ that a session that was authorized is never\n   actually started due to action\
    \ of a proxy.  For example, a proxy may\n   modify an authorization answer, converting\
    \ the result from success to\n   failure, prior to forwarding the message to the\
    \ access device.  If\n   the answer did not contain an Auth-Session-State AVP\
    \ with the value\n   NO_STATE_MAINTAINED, a proxy that causes an authorized session\
    \ not to\n   be started MUST issue an STR to the Diameter server that authorized\n\
    \   the session, since the access device has no way of knowing that the\n   session\
    \ had been authorized.\n   A Diameter server that receives an STR message MUST\
    \ clean up\n   resources (e.g., session state) associated with the Session-Id\n\
    \   specified in the STR, and return a Session-Termination-Answer.\n   A Diameter\
    \ server also MUST clean up resources when the Session-\n   Timeout expires, or\
    \ when the Authorization-Lifetime and the Auth-\n   Grace-Period AVPs expires\
    \ without receipt of a re-authorization\n   request, regardless of whether an\
    \ STR for that session is received.\n   The access device is not expected to provide\
    \ service beyond the\n   expiration of these timers; thus, expiration of either\
    \ of these\n   timers implies that the access device may have unexpectedly shut\n\
    \   down.\n"
- title: 8.4.1.  Session-Termination-Request
  contents:
  - "8.4.1.  Session-Termination-Request\n   The Session-Termination-Request (STR),\
    \ indicated by the Command-Code\n   set to 275 and the Command Flags' 'R' bit\
    \ set, is sent by the access\n   device to inform the Diameter Server that an\
    \ authenticated and/or\n   authorized session is being terminated.\n   Message\
    \ Format\n      <STR> ::= < Diameter Header: 275, REQ, PXY >\n               \
    \ < Session-Id >\n                { Origin-Host }\n                { Origin-Realm\
    \ }\n                { Destination-Realm }\n                { Auth-Application-Id\
    \ }\n                { Termination-Cause }\n                [ User-Name ]\n  \
    \              [ Destination-Host ]\n              * [ Class ]\n             \
    \   [ Origin-State-Id ]\n              * [ Proxy-Info ]\n              * [ Route-Record\
    \ ]\n              * [ AVP ]\n"
- title: 8.4.2.  Session-Termination-Answer
  contents:
  - "8.4.2.  Session-Termination-Answer\n   The Session-Termination-Answer (STA),\
    \ indicated by the Command-Code\n   set to 275 and the message flags' 'R' bit\
    \ clear, is sent by the\n   Diameter Server to acknowledge the notification that\
    \ the session has\n   been terminated.  The Result-Code AVP MUST be present, and\
    \ MAY\n   contain an indication that an error occurred while servicing the STR.\n\
    \   Upon sending or receipt of the STA, the Diameter Server MUST release\n   all\
    \ resources for the session indicated by the Session-Id AVP.  Any\n   intermediate\
    \ server in the Proxy-Chain MAY also release any\n   resources, if necessary.\n\
    \   Message Format\n      <STA>  ::= < Diameter Header: 275, PXY >\n         \
    \        < Session-Id >\n                 { Result-Code }\n                 {\
    \ Origin-Host }\n                 { Origin-Realm }\n                 [ User-Name\
    \ ]\n               * [ Class ]\n                 [ Error-Message ]\n        \
    \         [ Error-Reporting-Host ]\n               * [ Failed-AVP ]\n        \
    \         [ Origin-State-Id ]\n               * [ Redirect-Host ]\n          \
    \       [ Redirect-Host-Usage ]\n                                    ^\n     \
    \            [ Redirect-Max-Cache-Time ]\n               * [ Proxy-Info ]\n  \
    \             * [ AVP ]\n"
- title: 8.5.  Aborting a Session
  contents:
  - "8.5.  Aborting a Session\n   A Diameter server may request that the access device\
    \ stop providing\n   service for a particular session by issuing an Abort-Session-Request\n\
    \   (ASR).\n   For example, the Diameter server that originally authorized the\n\
    \   session may be required to cause that session to be stopped for\n   credit\
    \ or other reasons that were not anticipated when the session\n   was first authorized.\
    \  On the other hand, an operator may maintain a\n   management server for the\
    \ purpose of issuing ASRs to administratively\n   remove users from the network.\n\
    \   An access device that receives an ASR with Session-ID equal to a\n   currently\
    \ active session MAY stop the session.  Whether the access\n   device stops the\
    \ session or not is implementation- and/or\n   configuration-dependent.  For example,\
    \ an access device may honor\n   ASRs from certain agents only.  In any case,\
    \ the access device MUST\n   respond with an Abort-Session-Answer, including a\
    \ Result-Code AVP to\n   indicate what action it took.\n   Note that if the access\
    \ device does stop the session upon receipt of\n   an ASR, it issues an STR to\
    \ the authorizing server (which may or may\n   not be the agent issuing the ASR)\
    \ just as it would if the session\n   were terminated for any other reason.\n"
- title: 8.5.1.  Abort-Session-Request
  contents:
  - "8.5.1.  Abort-Session-Request\n   The Abort-Session-Request (ASR), indicated\
    \ by the Command-Code set to\n   274 and the message flags' 'R' bit set, may be\
    \ sent by any server to\n   the access device that is providing session service,\
    \ to request that\n   the session identified by the Session-Id be stopped.\n \
    \  Message Format\n      <ASR>  ::= < Diameter Header: 274, REQ, PXY >\n     \
    \            < Session-Id >\n                 { Origin-Host }\n              \
    \   { Origin-Realm }\n                 { Destination-Realm }\n               \
    \  { Destination-Host }\n                 { Auth-Application-Id }\n          \
    \       [ User-Name ]\n                 [ Origin-State-Id ]\n               *\
    \ [ Proxy-Info ]\n               * [ Route-Record ]\n               * [ AVP ]\n"
- title: 8.5.2.  Abort-Session-Answer
  contents:
  - "8.5.2.  Abort-Session-Answer\n   The Abort-Session-Answer (ASA), indicated by\
    \ the Command-Code set to\n   274 and the message flags' 'R' bit clear, is sent\
    \ in response to the\n   ASR.  The Result-Code AVP MUST be present, and indicates\
    \ the\n   disposition of the request.\n   If the session identified by Session-Id\
    \ in the ASR was successfully\n   terminated, Result-Code is set to DIAMETER_SUCCESS.\
    \  If the session\n   is not currently active, Result-Code is set to\n   DIAMETER_UNKNOWN_SESSION_ID.\
    \  If the access device does not stop the\n   session for any other reason, Result-Code\
    \ is set to\n   DIAMETER_UNABLE_TO_COMPLY.\n   Message Format\n      <ASA>  ::=\
    \ < Diameter Header: 274, PXY >\n                 < Session-Id >\n           \
    \      { Result-Code }\n                 { Origin-Host }\n                 { Origin-Realm\
    \ }\n                 [ User-Name ]\n                 [ Origin-State-Id ]\n  \
    \               [ Error-Message ]\n                 [ Error-Reporting-Host ]\n\
    \               * [ Failed-AVP ]\n               * [ Redirect-Host ]\n       \
    \          [ Redirect-Host-Usage ]\n                 [ Redirect-Max-Cache-Time\
    \ ]\n               * [ Proxy-Info ]\n               * [ AVP ]\n"
- title: 8.6.  Inferring Session Termination from Origin-State-Id
  contents:
  - "8.6.  Inferring Session Termination from Origin-State-Id\n   Origin-State-Id\
    \ is used to allow rapid detection of terminated\n   sessions for which no STR\
    \ would have been issued, due to\n   unanticipated shutdown of an access device.\n\
    \   By including Origin-State-Id in CER/CEA messages, an access device\n   allows\
    \ a next-hop server to determine immediately upon connection\n   whether the device\
    \ has lost its sessions since the last connection.\n   By including Origin-State-Id\
    \ in request messages, an access device\n   also allows a server with which it\
    \ communicates via proxy to make\n   such a determination.  However, a server\
    \ that is not directly\n   connected with the access device will not discover\
    \ that the access\n   device has been restarted unless and until it receives a\
    \ new request\n   from the access device.  Thus, use of this mechanism across\
    \ proxies\n   is opportunistic rather than reliable, but useful nonetheless.\n\
    \   When a Diameter server receives an Origin-State-Id that is greater\n   than\
    \ the Origin-State-Id previously received from the same issuer, it\n   may assume\
    \ that the issuer has lost state since the previous message\n   and that all sessions\
    \ that were active under the lower Origin-State-\n   Id have been terminated.\
    \  The Diameter server MAY clean up all\n   session state associated with such\
    \ lost sessions, and MAY also issues\n   STRs for all such lost sessions that\
    \ were authorized on upstream\n   servers, to allow session state to be cleaned\
    \ up globally.\n"
- title: 8.7.  Auth-Request-Type AVP
  contents:
  - "8.7.  Auth-Request-Type AVP\n   The Auth-Request-Type AVP (AVP Code 274) is of\
    \ type Enumerated and is\n   included in application-specific auth requests to\
    \ inform the peers\n   whether a user is to be authenticated only, authorized\
    \ only or both.\n   Note any value other than both MAY cause RADIUS interoperability\n\
    \   issues.  The following values are defined:\n   AUTHENTICATE_ONLY         \
    \ 1\n      The request being sent is for authentication only, and MUST\n     \
    \ contain the relevant application specific authentication AVPs that\n      are\
    \ needed by the Diameter server to authenticate the user.\n   AUTHORIZE_ONLY \
    \            2\n      The request being sent is for authorization only, and MUST\
    \ contain\n      the application specific authorization AVPs that are necessary\
    \ to\n      identify the service being requested/offered.\n   AUTHORIZE_AUTHENTICATE\
    \     3\n      The request contains a request for both authentication and\n  \
    \    authorization.  The request MUST include both the relevant\n      application\
    \ specific authentication information, and authorization\n      information necessary\
    \ to identify the service being\n      requested/offered.\n"
- title: 8.8.  Session-Id AVP
  contents:
  - "8.8.  Session-Id AVP\n   The Session-Id AVP (AVP Code 263) is of type UTF8String\
    \ and is used\n   to identify a specific session (see Section 8).  All messages\n\
    \   pertaining to a specific session MUST include only one Session-Id AVP\n  \
    \ and the same value MUST be used throughout the life of a session.\n   When present,\
    \ the Session-Id SHOULD appear immediately following the\n   Diameter Header (see\
    \ Section 3).\n   The Session-Id MUST be globally and eternally unique, as it\
    \ is meant\n   to uniquely identify a user session without reference to any other\n\
    \   information, and may be needed to correlate historical authentication\n  \
    \ information with accounting information.  The Session-Id includes a\n   mandatory\
    \ portion and an implementation-defined portion; a\n   recommended format for\
    \ the implementation-defined portion is outlined\n   below.\n   The Session-Id\
    \ MUST begin with the sender's identity encoded in the\n   DiameterIdentity type\
    \ (see Section 4.4).  The remainder of the\n   Session-Id is delimited by a \"\
    ;\" character, and MAY be any sequence\n   that the client can guarantee to be\
    \ eternally unique; however, the\n   following format is recommended, (square\
    \ brackets [] indicate an\n   optional element):\n   <DiameterIdentity>;<high\
    \ 32 bits>;<low 32 bits>[;<optional value>]\n   <high 32 bits> and <low 32 bits>\
    \ are decimal representations of the\n   high and low 32 bits of a monotonically\
    \ increasing 64-bit value.  The\n   64-bit value is rendered in two part to simplify\
    \ formatting by 32-bit\n   processors.  At startup, the high 32 bits of the 64-bit\
    \ value MAY be\n   initialized to the time, and the low 32 bits MAY be initialized\
    \ to\n   zero.  This will for practical purposes eliminate the possibility of\n\
    \   overlapping Session-Ids after a reboot, assuming the reboot process\n   takes\
    \ longer than a second.  Alternatively, an implementation MAY\n   keep track of\
    \ the increasing value in non-volatile memory.\n   <optional value> is implementation\
    \ specific but may include a modem's\n   device Id, a layer 2 address, timestamp,\
    \ etc.\n   Example, in which there is no optional value:\n      accesspoint7.acme.com;1876543210;523\n\
    \   Example, in which there is an optional value:\n      accesspoint7.acme.com;1876543210;523;mobile@200.1.1.88\n\
    \   The Session-Id is created by the Diameter application initiating the\n   session,\
    \ which in most cases is done by the client.  Note that a\n   Session-Id MAY be\
    \ used for both the authorization and accounting\n   commands of a given application.\n"
- title: 8.9.  Authorization-Lifetime AVP
  contents:
  - "8.9.  Authorization-Lifetime AVP\n   The Authorization-Lifetime AVP (AVP Code\
    \ 291) is of type Unsigned32\n   and contains the maximum number of seconds of\
    \ service to be provided\n   to the user before the user is to be re-authenticated\
    \ and/or re-\n   authorized.  Great care should be taken when the Authorization-\n\
    \   Lifetime value is determined, since a low, non-zero, value could\n   create\
    \ significant Diameter traffic, which could congest both the\n   network and the\
    \ agents.\n   A value of zero (0) means that immediate re-auth is necessary by\
    \ the\n   access device.  This is typically used in cases where multiple\n   authentication\
    \ methods are used, and a successful auth response with\n   this AVP set to zero\
    \ is used to signal that the next authentication\n   method is to be immediately\
    \ initiated.  The absence of this AVP, or a\n   value of all ones (meaning all\
    \ bits in the 32 bit field are set to\n   one) means no re-auth is expected.\n\
    \   If both this AVP and the Session-Timeout AVP are present in a\n   message,\
    \ the value of the latter MUST NOT be smaller than the\n   Authorization-Lifetime\
    \ AVP.\n   An Authorization-Lifetime AVP MAY be present in re-authorization\n\
    \   messages, and contains the number of seconds the user is authorized\n   to\
    \ receive service from the time the re-auth answer message is\n   received by\
    \ the access device.\n   This AVP MAY be provided by the client as a hint of the\
    \ maximum\n   lifetime that it is willing to accept.  However, the server MAY\n\
    \   return a value that is equal to, or smaller, than the one provided by\n  \
    \ the client.\n"
- title: 8.10.  Auth-Grace-Period AVP
  contents:
  - "8.10.  Auth-Grace-Period AVP\n   The Auth-Grace-Period AVP (AVP Code 276) is\
    \ of type Unsigned32 and\n   contains the number of seconds the Diameter server\
    \ will wait\n   following the expiration of the Authorization-Lifetime AVP before\n\
    \   cleaning up resources for the session.\n"
- title: 8.11.  Auth-Session-State AVP
  contents:
  - "8.11.  Auth-Session-State AVP\n   The Auth-Session-State AVP (AVP Code 277) is\
    \ of type Enumerated and\n   specifies whether state is maintained for a particular\
    \ session.  The\n   client MAY include this AVP in requests as a hint to the server,\
    \ but\n   the value in the server's answer message is binding.  The following\n\
    \   values are supported:\n   STATE_MAINTAINED              0\n      This value\
    \ is used to specify that session state is being\n      maintained, and the access\
    \ device MUST issue a session termination\n      message when service to the user\
    \ is terminated.  This is the\n      default value.\n   NO_STATE_MAINTAINED  \
    \         1\n      This value is used to specify that no session termination messages\n\
    \      will be sent by the access device upon expiration of the\n      Authorization-Lifetime.\n"
- title: 8.12.  Re-Auth-Request-Type AVP
  contents:
  - "8.12.  Re-Auth-Request-Type AVP\n   The Re-Auth-Request-Type AVP (AVP Code 285)\
    \ is of type Enumerated and\n   is included in application-specific auth answers\
    \ to inform the client\n   of the action expected upon expiration of the Authorization-Lifetime.\n\
    \   If the answer message contains an Authorization-Lifetime AVP with a\n   positive\
    \ value, the Re-Auth-Request-Type AVP MUST be present in an\n   answer message.\
    \  The following values are defined:\n   AUTHORIZE_ONLY             0\n      An\
    \ authorization only re-auth is expected upon expiration of the\n      Authorization-Lifetime.\
    \  This is the default value if the AVP is\n      not present in answer messages\
    \ that include the Authorization-\n      Lifetime.\n   AUTHORIZE_AUTHENTICATE\
    \     1\n      An authentication and authorization re-auth is expected upon\n\
    \      expiration of the Authorization-Lifetime.\n"
- title: 8.13.  Session-Timeout AVP
  contents:
  - "8.13.  Session-Timeout AVP\n   The Session-Timeout AVP (AVP Code 27) [RADIUS]\
    \ is of type Unsigned32\n   and contains the maximum number of seconds of service\
    \ to be provided\n   to the user before termination of the session.  When both\
    \ the\n   Session-Timeout and the Authorization-Lifetime AVPs are present in an\n\
    \   answer message, the former MUST be equal to or greater than the value\n  \
    \ of the latter.\n   A session that terminates on an access device due to the\
    \ expiration\n   of the Session-Timeout MUST cause an STR to be issued, unless\
    \ both\n   the access device and the home server had previously agreed that no\n\
    \   session termination messages would be sent (see Section 8.9).\n   A Session-Timeout\
    \ AVP MAY be present in a re-authorization answer\n   message, and contains the\
    \ remaining number of seconds from the\n   beginning of the re-auth.\n   A value\
    \ of zero, or the absence of this AVP, means that this session\n   has an unlimited\
    \ number of seconds before termination.\n   This AVP MAY be provided by the client\
    \ as a hint of the maximum\n   timeout that it is willing to accept.  However,\
    \ the server MAY return\n   a value that is equal to, or smaller, than the one\
    \ provided by the\n   client.\n"
- title: 8.14.  User-Name AVP
  contents:
  - "8.14.  User-Name AVP\n   The User-Name AVP (AVP Code 1) [RADIUS] is of type UTF8String,\
    \ which\n   contains the User-Name, in a format consistent with the NAI\n   specification\
    \ [NAI].\n"
- title: 8.15.  Termination-Cause AVP
  contents:
  - "8.15.  Termination-Cause AVP\n   The Termination-Cause AVP (AVP Code 295) is\
    \ of type Enumerated, and\n   is used to indicate the reason why a session was\
    \ terminated on the\n   access device.  The following values are defined:\n  \
    \ DIAMETER_LOGOUT                   1\n      The user initiated a disconnect\n\
    \   DIAMETER_SERVICE_NOT_PROVIDED     2\n      This value is used when the user\
    \ disconnected prior to the receipt\n      of the authorization answer message.\n\
    \   DIAMETER_BAD_ANSWER               3\n      This value indicates that the authorization\
    \ answer received by the\n      access device was not processed successfully.\n\
    \   DIAMETER_ADMINISTRATIVE           4\n      The user was not granted access,\
    \ or was disconnected, due to\n      administrative reasons, such as the receipt\
    \ of a Abort-Session-\n      Request message.\n   DIAMETER_LINK_BROKEN       \
    \       5\n      The communication to the user was abruptly disconnected.\n  \
    \ DIAMETER_AUTH_EXPIRED             6\n      The user's access was terminated\
    \ since its authorized session time\n      has expired.\n   DIAMETER_USER_MOVED\
    \               7\n      The user is receiving services from another access device.\n\
    \   DIAMETER_SESSION_TIMEOUT          8\n      The user's session has timed out,\
    \ and service has been terminated.\n"
- title: 8.16.  Origin-State-Id AVP
  contents:
  - "8.16.  Origin-State-Id AVP\n   The Origin-State-Id AVP (AVP Code 278), of type\
    \ Unsigned32, is a\n   monotonically increasing value that is advanced whenever\
    \ a Diameter\n   entity restarts with loss of previous state, for example upon\
    \ reboot.\n   Origin-State-Id MAY be included in any Diameter message, including\n\
    \   CER.\n   A Diameter entity issuing this AVP MUST create a higher value for\n\
    \   this AVP each time its state is reset.  A Diameter entity MAY set\n   Origin-State-Id\
    \ to the time of startup, or it MAY use an incrementing\n   counter retained in\
    \ non-volatile memory across restarts.\n   The Origin-State-Id, if present, MUST\
    \ reflect the state of the entity\n   indicated by Origin-Host.  If a proxy modifies\
    \ Origin-Host, it MUST\n   either remove Origin-State-Id or modify it appropriately\
    \ as well.\n   Typically, Origin-State-Id is used by an access device that always\n\
    \   starts up with no active sessions; that is, any session active prior\n   to\
    \ restart will have been lost.  By including Origin-State-Id in a\n   message,\
    \ it allows other Diameter entities to infer that sessions\n   associated with\
    \ a lower Origin-State-Id are no longer active.  If an\n   access device does\
    \ not intend for such inferences to be made, it MUST\n   either not include Origin-State-Id\
    \ in any message, or set its value\n   to 0.\n"
- title: 8.17.  Session-Binding AVP
  contents:
  - "8.17.  Session-Binding AVP\n   The Session-Binding AVP (AVP Code 270) is of type\
    \ Unsigned32, and MAY\n   be present in application-specific authorization answer\
    \ messages.  If\n   present, this AVP MAY inform the Diameter client that all\
    \ future\n   application-specific re-auth messages for this session MUST be sent\n\
    \   to the same authorization server.  This AVP MAY also specify that a\n   Session-Termination-Request\
    \ message for this session MUST be sent to\n   the same authorizing server.\n\
    \   This field is a bit mask, and the following bits have been defined:\n   RE_AUTH\
    \                    1\n      When set, future re-auth messages for this session\
    \ MUST NOT\n      include the Destination-Host AVP.  When cleared, the default\n\
    \      value, the Destination-Host AVP MUST be present in all re-auth\n      messages\
    \ for this session.\n   STR                        2\n      When set, the STR\
    \ message for this session MUST NOT include the\n      Destination-Host AVP. \
    \ When cleared, the default value, the\n      Destination-Host AVP MUST be present\
    \ in the STR message for this\n      session.\n   ACCOUNTING                 4\n\
    \      When set, all accounting messages for this session MUST NOT\n      include\
    \ the Destination-Host AVP.  When cleared, the default\n      value, the Destination-Host\
    \ AVP, if known, MUST be present in all\n      accounting messages for this session.\n"
- title: 8.18.  Session-Server-Failover AVP
  contents:
  - "8.18.  Session-Server-Failover AVP\n   The Session-Server-Failover AVP (AVP Code\
    \ 271) is of type Enumerated,\n   and MAY be present in application-specific authorization\
    \ answer\n   messages that either do not include the Session-Binding AVP or\n\
    \   include the Session-Binding AVP with any of the bits set to a zero\n   value.\
    \  If present, this AVP MAY inform the Diameter client that if a\n   re-auth or\
    \ STR message fails due to a delivery problem, the Diameter\n   client SHOULD\
    \ issue a subsequent message without the Destination-Host\n   AVP.  When absent,\
    \ the default value is REFUSE_SERVICE.\n   The following values are supported:\n\
    \   REFUSE_SERVICE             0\n      If either the re-auth or the STR message\
    \ delivery fails, terminate\n      service with the user, and do not attempt any\
    \ subsequent attempts.\n   TRY_AGAIN                  1\n      If either the re-auth\
    \ or the STR message delivery fails, resend\n      the failed message without\
    \ the Destination-Host AVP present.\n   ALLOW_SERVICE              2\n      If\
    \ re-auth message delivery fails, assume that re-authorization\n      succeeded.\
    \  If STR message delivery fails, terminate the session.\n   TRY_AGAIN_ALLOW_SERVICE\
    \    3\n      If either the re-auth or the STR message delivery fails, resend\n\
    \      the failed message without the Destination-Host AVP present.  If\n    \
    \  the second delivery fails for re-auth, assume re-authorization\n      succeeded.\
    \  If the second delivery fails for STR, terminate the\n      session.\n"
- title: 8.19.  Multi-Round-Time-Out AVP
  contents:
  - "8.19.  Multi-Round-Time-Out AVP\n   The Multi-Round-Time-Out AVP (AVP Code 272)\
    \ is of type Unsigned32,\n   and SHOULD be present in application-specific authorization\
    \ answer\n   messages whose Result-Code AVP is set to DIAMETER_MULTI_ROUND_AUTH.\n\
    \   This AVP contains the maximum number of seconds that the access\n   device\
    \ MUST provide the user in responding to an authentication\n   request.\n"
- title: 8.20.  Class AVP
  contents:
  - "8.20.  Class AVP\n   The Class AVP (AVP Code 25) is of type OctetString and is\
    \ used to by\n   Diameter servers to return state information to the access device.\n\
    \   When one or more Class AVPs are present in application-specific\n   authorization\
    \ answer messages, they MUST be present in subsequent\n   re-authorization, session\
    \ termination and accounting messages.  Class\n   AVPs found in a re-authorization\
    \ answer message override the ones\n   found in any previous authorization answer\
    \ message.  Diameter server\n   implementations SHOULD NOT return Class AVPs that\
    \ require more than\n   4096 bytes of storage on the Diameter client.  A Diameter\
    \ client that\n   receives Class AVPs whose size exceeds local available storage\
    \ MUST\n   terminate the session.\n"
- title: 8.21.  Event-Timestamp AVP
  contents:
  - "8.21.  Event-Timestamp AVP\n   The Event-Timestamp (AVP Code 55) is of type Time,\
    \ and MAY be\n   included in an Accounting-Request and Accounting-Answer messages\
    \ to\n   record the time that the reported event occurred, in seconds since\n\
    \   January 1, 1900 00:00 UTC.\n"
- title: 9.  Accounting
  contents:
  - "9.  Accounting\n   This accounting protocol is based on a server directed model\
    \ with\n   capabilities for real-time delivery of accounting information.\n  \
    \ Several fault resilience methods [ACCMGMT] have been built in to the\n   protocol\
    \ in order minimize loss of accounting data in various fault\n   situations and\
    \ under different assumptions about the capabilities of\n   the used devices.\n"
- title: 9.1.  Server Directed Model
  contents:
  - "9.1.  Server Directed Model\n   The server directed model means that the device\
    \ generating the\n   accounting data gets information from either the authorization\
    \ server\n   (if contacted) or the accounting server regarding the way accounting\n\
    \   data shall be forwarded.  This information includes accounting record\n  \
    \ timeliness requirements.\n   As discussed in [ACCMGMT], real-time transfer of\
    \ accounting records\n   is a requirement, such as the need to perform credit\
    \ limit checks and\n   fraud detection.  Note that batch accounting is not a requirement,\n\
    \   and is therefore not supported by Diameter.  Should batched\n   accounting\
    \ be required in the future, a new Diameter application will\n   need to be created,\
    \ or it could be handled using another protocol.\n   Note, however, that even\
    \ if at the Diameter layer accounting requests\n   are processed one by one, transport\
    \ protocols used under Diameter\n   typically batch several requests in the same\
    \ packet under heavy\n   traffic conditions.  This may be sufficient for many\
    \ applications.\n   The authorization server (chain) directs the selection of\
    \ proper\n   transfer strategy, based on its knowledge of the user and\n   relationships\
    \ of roaming partnerships.  The server (or agents) uses\n   the Acct-Interim-Interval\
    \ and Accounting-Realtime-Required AVPs to\n   control the operation of the Diameter\
    \ peer operating as a client.\n   The Acct-Interim-Interval AVP, when present,\
    \ instructs the Diameter\n   node acting as a client to produce accounting records\
    \ continuously\n   even during a session.  Accounting-Realtime-Required AVP is\
    \ used to\n   control the behavior of the client when the transfer of accounting\n\
    \   records from the Diameter client is delayed or unsuccessful.\n   The Diameter\
    \ accounting server MAY override the interim interval or\n   the realtime requirements\
    \ by including the Acct-Interim-Interval or\n   Accounting-Realtime-Required AVP\
    \ in the Accounting-Answer message.\n   When one of these AVPs is present, the\
    \ latest value received SHOULD\n   be used in further accounting activities for\
    \ the same session.\n"
- title: 9.2.  Protocol Messages
  contents:
  - "9.2.  Protocol Messages\n   A Diameter node that receives a successful authentication\
    \ and/or\n   authorization messages from the Home AAA server MUST collect\n  \
    \ accounting information for the session.  The Accounting-Request\n   message\
    \ is used to transmit the accounting information to the Home\n   AAA server, which\
    \ MUST reply with the Accounting-Answer message to\n   confirm reception.  The\
    \ Accounting-Answer message includes the\n   Result-Code AVP, which MAY indicate\
    \ that an error was present in the\n   accounting message.  A rejected Accounting-Request\
    \ message MAY cause\n   the user's session to be terminated, depending on the\
    \ value of the\n   Accounting-Realtime-Required AVP received earlier for the session\
    \ in\n   question.\n   Each Diameter Accounting protocol message MAY be compressed,\
    \ in order\n   to reduce network bandwidth usage.  If IPsec and IKE are used to\n\
    \   secure the Diameter session, then IP compression [IPComp] MAY be used\n  \
    \ and IKE [IKE] MAY be used to negotiate the compression parameters.\n   If TLS\
    \ is used to secure the Diameter session, then TLS compression\n   [TLS] MAY be\
    \ used.\n"
- title: 9.3.  Application document requirements
  contents:
  - "9.3.  Application document requirements\n   Each Diameter application (e.g.,\
    \ NASREQ, MobileIP), MUST define their\n   Service-Specific AVPs that MUST be\
    \ present in the Accounting-Request\n   message in a section entitled \"Accounting\
    \ AVPs\".  The application\n   MUST assume that the AVPs described in this document\
    \ will be present\n   in all Accounting messages, so only their respective service-specific\n\
    \   AVPs need to be defined in this section.\n"
- title: 9.4.  Fault Resilience
  contents:
  - "9.4.  Fault Resilience\n   Diameter Base protocol mechanisms are used to overcome\
    \ small message\n   loss and network faults of temporary nature.\n   Diameter\
    \ peers acting as clients MUST implement the use of failover\n   to guard against\
    \ server failures and certain network failures.\n   Diameter peers acting as agents\
    \ or related off-line processing\n   systems MUST detect duplicate accounting\
    \ records caused by the\n   sending of same record to several servers and duplication\
    \ of messages\n   in transit.  This detection MUST be based on the inspection\
    \ of the\n   Session-Id and Accounting-Record-Number AVP pairs.  Appendix C\n\
    \   discusses duplicate detection needs and implementation issues.\n   Diameter\
    \ clients MAY have non-volatile memory for the safe storage of\n   accounting\
    \ records over reboots or extended network failures, network\n   partitions, and\
    \ server failures.  If such memory is available, the\n   client SHOULD store new\
    \ accounting records there as soon as the\n   records are created and until a\
    \ positive acknowledgement of their\n   reception from the Diameter Server has\
    \ been received.  Upon a reboot,\n   the client MUST starting sending the records\
    \ in the non-volatile\n   memory to the accounting server with appropriate modifications\
    \ in\n   termination cause, session length, and other relevant information in\n\
    \   the records.\n   A further application of this protocol may include AVPs to\
    \ control\n   how many accounting records may at most be stored in the Diameter\n\
    \   client without committing them to the non-volatile memory or\n   transferring\
    \ them to the Diameter server.\n   The client SHOULD NOT remove the accounting\
    \ data from any of its\n   memory areas before the correct Accounting-Answer has\
    \ been received.\n   The client MAY remove oldest, undelivered or yet unacknowledged\n\
    \   accounting data if it runs out of resources such as memory.  It is an\n  \
    \ implementation dependent matter for the client to accept new sessions\n   under\
    \ this condition.\n"
- title: 9.5.  Accounting Records
  contents:
  - "9.5.  Accounting Records\n   In all accounting records, the Session-Id AVP MUST\
    \ be present; the\n   User-Name AVP MUST be present if it is available to the\
    \ Diameter\n   client.  If strong authentication across agents is required, end-to-\n\
    \   end security may be used for authentication purposes.\n   Different types\
    \ of accounting records are sent depending on the\n   actual type of accounted\
    \ service and the authorization server's\n   directions for interim accounting.\
    \  If the accounted service is a\n   one-time event, meaning that the start and\
    \ stop of the event are\n   simultaneous, then the Accounting-Record-Type AVP\
    \ MUST be present and\n   set to the value EVENT_RECORD.\n   If the accounted\
    \ service is of a measurable length, then the AVP MUST\n   use the values START_RECORD,\
    \ STOP_RECORD, and possibly,\n   INTERIM_RECORD.  If the authorization server\
    \ has not directed interim\n   accounting to be enabled for the session, two accounting\
    \ records MUST\n   be generated for each service of type session.  When the initial\n\
    \   Accounting-Request for a given session is sent, the Accounting-\n   Record-Type\
    \ AVP MUST be set to the value START_RECORD.  When the last\n   Accounting-Request\
    \ is sent, the value MUST be STOP_RECORD.\n   If the authorization server has\
    \ directed interim accounting to be\n   enabled, the Diameter client MUST produce\
    \ additional records between\n   the START_RECORD and STOP_RECORD, marked INTERIM_RECORD.\
    \  The\n   production of these records is directed by Acct-Interim-Interval as\n\
    \   well as any re-authentication or re-authorization of the session. The\n  \
    \ Diameter client MUST overwrite any previous interim accounting\n   records that\
    \ are locally stored for delivery, if a new record is\n   being generated for\
    \ the same session.  This ensures that only one\n   pending interim record can\
    \ exist on an access device for any given\n   session.\n   A particular value\
    \ of Accounting-Sub-Session-Id MUST appear only in\n   one sequence of accounting\
    \ records from a DIAMETER client, except for\n   the purposes of retransmission.\
    \  The one sequence that is sent MUST\n   be either one record with Accounting-Record-Type\
    \ AVP set to the value\n   EVENT_RECORD, or several records starting with one\
    \ having the value\n   START_RECORD, followed by zero or more INTERIM_RECORD and\
    \ a single\n   STOP_RECORD.  A particular Diameter application specification MUST\n\
    \   define the type of sequences that MUST be used.\n"
- title: 9.6.  Correlation of Accounting Records
  contents:
  - "9.6.  Correlation of Accounting Records\n   The Diameter protocol's Session-Id\
    \ AVP, which is globally unique (see\n   Section 8.8), is used during the authorization\
    \ phase to identify a\n   particular session.  Services that do not require any\
    \ authorization\n   still use the Session-Id AVP to identify sessions.  Accounting\n\
    \   messages MAY use a different Session-Id from that sent in\n   authorization\
    \ messages.  Specific applications MAY require different\n   a Session-ID for\
    \ accounting messages.\n   However, there are certain applications that require\
    \ multiple\n   accounting sub-sessions.  Such applications would send messages\
    \ with\n   a constant Session-Id AVP, but a different Accounting-Sub-Session-Id\n\
    \   AVP.  In these cases, correlation is performed using the Session-Id.\n   It\
    \ is important to note that receiving a STOP_RECORD with no\n   Accounting-Sub-Session-Id\
    \ AVP when sub-sessions were originally used\n   in the START_RECORD messages\
    \ implies that all sub-sessions are\n   terminated.\n   Furthermore, there are\
    \ certain applications where a user receives\n   service from different access\
    \ devices (e.g., Mobile IPv4), each with\n   their own unique Session-Id.  In\
    \ such cases, the Acct-Multi-Session-\n   Id AVP is used for correlation.  During\
    \ authorization, a server that\n   determines that a request is for an existing\
    \ session SHOULD include\n   the Acct-Multi-Session-Id AVP, which the access device\
    \ MUST include\n   in all subsequent accounting messages.\n   The Acct-Multi-Session-Id\
    \ AVP MAY include the value of the original\n   Session-Id.  It's contents are\
    \ implementation specific, but MUST be\n   globally unique across other Acct-Multi-Session-Id,\
    \ and MUST NOT\n   change during the life of a session.\n   A Diameter application\
    \ document MUST define the exact concept of a\n   session that is being accounted,\
    \ and MAY define the concept of a\n   multi-session.  For instance, the NASREQ\
    \ DIAMETER application treats\n   a single PPP connection to a Network Access\
    \ Server as one session,\n   and a set of Multilink PPP sessions as one multi-session.\n"
- title: 9.7.  Accounting Command-Codes
  contents:
  - "9.7.  Accounting Command-Codes\n   This section defines Command-Code values that\
    \ MUST be supported by\n   all Diameter implementations that provide Accounting\
    \ services.\n"
- title: 9.7.1.  Accounting-Request
  contents:
  - "9.7.1.  Accounting-Request\n   The Accounting-Request (ACR) command, indicated\
    \ by the Command-Code\n   field set to 271 and the Command Flags' 'R' bit set,\
    \ is sent by a\n   Diameter node, acting as a client, in order to exchange accounting\n\
    \   information with a peer.\n   One of Acct-Application-Id and Vendor-Specific-Application-Id\
    \ AVPs\n   MUST be present.  If the Vendor-Specific-Application-Id grouped AVP\n\
    \   is present, it must have an Acct-Application-Id inside.\n   The AVP listed\
    \ below SHOULD include service specific accounting AVPs,\n   as described in Section\
    \ 9.3.\n   Message Format\n      <ACR> ::= < Diameter Header: 271, REQ, PXY >\n\
    \                < Session-Id >\n                { Origin-Host }\n           \
    \     { Origin-Realm }\n                { Destination-Realm }\n              \
    \  { Accounting-Record-Type }\n                { Accounting-Record-Number }\n\
    \                [ Acct-Application-Id ]\n                [ Vendor-Specific-Application-Id\
    \ ]\n                [ User-Name ]\n                [ Accounting-Sub-Session-Id\
    \ ]\n                [ Acct-Session-Id ]\n                [ Acct-Multi-Session-Id\
    \ ]\n                [ Acct-Interim-Interval ]\n                [ Accounting-Realtime-Required\
    \ ]\n                [ Origin-State-Id ]\n                [ Event-Timestamp ]\n\
    \              * [ Proxy-Info ]\n              * [ Route-Record ]\n          \
    \    * [ AVP ]\n"
- title: 9.7.2.  Accounting-Answer
  contents:
  - "9.7.2.  Accounting-Answer\n   The Accounting-Answer (ACA) command, indicated\
    \ by the Command-Code\n   field set to 271 and the Command Flags' 'R' bit cleared,\
    \ is used to\n   acknowledge an Accounting-Request command.  The Accounting-Answer\n\
    \   command contains the same Session-Id and includes the usage AVPs only\n  \
    \ if CMS is in use when sending this command.  Note that the inclusion\n   of\
    \ the usage AVPs when CMS is not being used leads to unnecessarily\n   large answer\
    \ messages, and can not be used as a server's proof of the\n   receipt of these\
    \ AVPs in an end-to-end fashion.  If the Accounting-\n   Request was protected\
    \ by end-to-end security, then the corresponding\n   ACA message MUST be protected\
    \ by end-to-end security.\n   Only the target Diameter Server, known as the home\
    \ Diameter Server,\n   SHOULD respond with the Accounting-Answer command.\n  \
    \ One of Acct-Application-Id and Vendor-Specific-Application-Id AVPs\n   MUST\
    \ be present.  If the Vendor-Specific-Application-Id grouped AVP\n   is present,\
    \ it must have an Acct-Application-Id inside.\n   The AVP listed below SHOULD\
    \ include service specific accounting AVPs,\n   as described in Section 9.3.\n\
    \   Message Format\n      <ACA> ::= < Diameter Header: 271, PXY >\n          \
    \      < Session-Id >\n                { Result-Code }\n                { Origin-Host\
    \ }\n                { Origin-Realm }\n                { Accounting-Record-Type\
    \ }\n                { Accounting-Record-Number }\n                [ Acct-Application-Id\
    \ ]\n                [ Vendor-Specific-Application-Id ]\n                [ User-Name\
    \ ]\n                [ Accounting-Sub-Session-Id ]\n                [ Acct-Session-Id\
    \ ]\n                [ Acct-Multi-Session-Id ]\n                [ Error-Reporting-Host\
    \ ]\n                [ Acct-Interim-Interval ]\n                [ Accounting-Realtime-Required\
    \ ]\n                [ Origin-State-Id ]\n                [ Event-Timestamp ]\n\
    \              * [ Proxy-Info ]\n              * [ AVP ]\n"
- title: 9.8.  Accounting AVPs
  contents:
  - "9.8.  Accounting AVPs\n   This section contains AVPs that describe accounting\
    \ usage information\n   related to a specific session.\n"
- title: 9.8.1.  Accounting-Record-Type AVP
  contents:
  - "9.8.1.  Accounting-Record-Type AVP\n   The Accounting-Record-Type AVP (AVP Code\
    \ 480) is of type Enumerated\n   and contains the type of accounting record being\
    \ sent.  The following\n   values are currently defined for the Accounting-Record-Type\
    \ AVP:\n   EVENT_RECORD                    1\n      An Accounting Event Record\
    \ is used to indicate that a one-time\n      event has occurred (meaning that\
    \ the start and end of the event\n      are simultaneous).  This record contains\
    \ all information relevant\n      to the service, and is the only record of the\
    \ service.\n   START_RECORD                    2\n      An Accounting Start, Interim,\
    \ and Stop Records are used to\n      indicate that a service of a measurable\
    \ length has been given.  An\n      Accounting Start Record is used to initiate\
    \ an accounting session,\n      and contains accounting information that is relevant\
    \ to the\n      initiation of the session.\n   INTERIM_RECORD                \
    \  3\n      An Interim Accounting Record contains cumulative accounting\n    \
    \  information for an existing accounting session.  Interim\n      Accounting\
    \ Records SHOULD be sent every time a re-authentication\n      or re-authorization\
    \ occurs.  Further, additional interim record\n      triggers MAY be defined by\
    \ application-specific Diameter\n      applications.  The selection of whether\
    \ to use INTERIM_RECORD\n      records is done by the Acct-Interim-Interval AVP.\n\
    \   STOP_RECORD                     4\n      An Accounting Stop Record is sent\
    \ to terminate an accounting\n      session and contains cumulative accounting\
    \ information relevant to\n      the existing session.\n"
- title: 9.8.2.  Acct-Interim-Interval
  contents:
  - "9.8.2.  Acct-Interim-Interval\n   The Acct-Interim-Interval AVP (AVP Code 85)\
    \ is of type Unsigned32 and\n   is sent from the Diameter home authorization server\
    \ to the Diameter\n   client.  The client uses information in this AVP to decide\
    \ how and\n   when to produce accounting records.  With different values in this\n\
    \   AVP, service sessions can result in one, two, or two+N accounting\n   records,\
    \ based on the needs of the home-organization.  The following\n   accounting record\
    \ production behavior is directed by the inclusion of\n   this AVP:\n   1. The\
    \ omission of the Acct-Interim-Interval AVP or its inclusion\n      with Value\
    \ field set to 0 means that EVENT_RECORD, START_RECORD,\n      and STOP_RECORD\
    \ are produced, as appropriate for the service.\n   2. The inclusion of the AVP\
    \ with Value field set to a non-zero value\n      means that INTERIM_RECORD records\
    \ MUST be produced between the\n      START_RECORD and STOP_RECORD records.  The\
    \ Value field of this AVP\n      is the nominal interval between these records\
    \ in seconds.  The\n      Diameter node that originates the accounting information,\
    \ known as\n      the client, MUST produce the first INTERIM_RECORD record roughly\n\
    \      at the time when this nominal interval has elapsed from the\n      START_RECORD,\
    \ the next one again as the interval has elapsed once\n      more, and so on until\
    \ the session ends and a STOP_RECORD record is\n      produced.\n      The client\
    \ MUST ensure that the interim record production times\n      are randomized so\
    \ that large accounting message storms are not\n      created either among records\
    \ or around a common service start\n      time.\n"
- title: 9.8.3.  Accounting-Record-Number AVP
  contents:
  - "9.8.3.  Accounting-Record-Number AVP\n   The Accounting-Record-Number AVP (AVP\
    \ Code 485) is of type Unsigned32\n   and identifies this record within one session.\
    \  As Session-Id AVPs\n   are globally unique, the combination of Session-Id and\
    \ Accounting-\n   Record-Number AVPs is also globally unique, and can be used\
    \ in\n   matching accounting records with confirmations.  An easy way to\n   produce\
    \ unique numbers is to set the value to 0 for records of type\n   EVENT_RECORD\
    \ and START_RECORD, and set the value to 1 for the first\n   INTERIM_RECORD, 2\
    \ for the second, and so on until the value for\n   STOP_RECORD is one more than\
    \ for the last INTERIM_RECORD.\n"
- title: 9.8.4.  Acct-Session-Id AVP
  contents:
  - "9.8.4.  Acct-Session-Id AVP\n   The Acct-Session-Id AVP (AVP Code 44) is of type\
    \ OctetString is only\n   used when RADIUS/Diameter translation occurs.  This\
    \ AVP contains the\n   contents of the RADIUS Acct-Session-Id attribute.\n"
- title: 9.8.5.  Acct-Multi-Session-Id AVP
  contents:
  - "9.8.5.  Acct-Multi-Session-Id AVP\n   The Acct-Multi-Session-Id AVP (AVP Code\
    \ 50) is of type UTF8String,\n   following the format specified in Section 8.8.\
    \  The Acct-Multi-\n   Session-Id AVP is used to link together multiple related\
    \ accounting\n   sessions, where each session would have a unique Session-Id,\
    \ but the\n   same Acct-Multi-Session-Id AVP.  This AVP MAY be returned by the\n\
    \   Diameter server in an authorization answer, and MUST be used in all\n   accounting\
    \ messages for the given session.\n"
- title: 9.8.6.  Accounting-Sub-Session-Id AVP
  contents:
  - "9.8.6.  Accounting-Sub-Session-Id AVP\n   The Accounting-Sub-Session-Id AVP (AVP\
    \ Code 287) is of type\n   Unsigned64 and contains the accounting sub-session\
    \ identifier.  The\n   combination of the Session-Id and this AVP MUST be unique\
    \ per sub-\n   session, and the value of this AVP MUST be monotonically increased\
    \ by\n   one for all new sub-sessions.  The absence of this AVP implies no\n \
    \  sub-sessions are in use, with the exception of an Accounting-Request\n   whose\
    \ Accounting-Record-Type is set to STOP_RECORD.  A STOP_RECORD\n   message with\
    \ no Accounting-Sub-Session-Id AVP present will signal the\n   termination of\
    \ all sub-sessions for a given Session-Id.\n"
- title: 9.8.7.  Accounting-Realtime-Required AVP
  contents:
  - "9.8.7.  Accounting-Realtime-Required AVP\n   The Accounting-Realtime-Required\
    \ AVP (AVP Code 483) is of type\n   Enumerated and is sent from the Diameter home\
    \ authorization server to\n   the Diameter client or in the Accounting-Answer\
    \ from the accounting\n   server.  The client uses information in this AVP to\
    \ decide what to do\n   if the sending of accounting records to the accounting\
    \ server has\n   been temporarily prevented due to, for instance, a network problem.\n\
    \   DELIVER_AND_GRANT                           1\n      The AVP with Value field\
    \ set to DELIVER_AND_GRANT means that the\n      service MUST only be granted\
    \ as long as there is a connection to\n      an accounting server.  Note that\
    \ the set of alternative accounting\n      servers are treated as one server in\
    \ this sense.  Having to move\n      the accounting record stream to a backup\
    \ server is not a reason to\n      discontinue the service to the user.\n   GRANT_AND_STORE\
    \                             2\n      The AVP with Value field set to GRANT_AND_STORE\
    \ means that service\n      SHOULD be granted if there is a connection, or as\
    \ long as records\n      can still be stored as described in Section 9.4.\n  \
    \    This is the default behavior if the AVP isn't included in the\n      reply\
    \ from the authorization server.\n   GRANT_AND_LOSE                          \
    \    3\n      The AVP with Value field set to GRANT_AND_LOSE means that service\n\
    \      SHOULD be granted even if the records can not be delivered or\n      stored.\n"
- title: 10.  AVP Occurrence Table
  contents:
  - "10.  AVP Occurrence Table\n   The following tables presents the AVPs defined\
    \ in this document, and\n   specifies in which Diameter messages they MAY, or\
    \ MAY NOT be present.\n   Note that AVPs that can only be present within a Grouped\
    \ AVP are not\n   represented in this table.\n   The table uses the following\
    \ symbols:\n   0     The AVP MUST NOT be present in the message.\n   0+    Zero\
    \ or more instances of the AVP MAY be present in the\n         message.\n   0-1\
    \   Zero or one instance of the AVP MAY be present in the\n         message. \
    \ It is considered an error if there are more than\n         one instance of the\
    \ AVP.\n   1     One instance of the AVP MUST be present in the message.\n   1+\
    \    At least one instance of the AVP MUST be present in the\n         message.\n"
- title: 10.1.  Base Protocol Command AVP Table
  contents:
  - "10.1.  Base Protocol Command AVP Table\n   The table in this section is limited\
    \ to the non-accounting Command\n   Codes defined in this specification.\n   \
    \                    +-----------------------------------------------+\n     \
    \                  |                  Command-Code                 |\n       \
    \                +---+---+---+---+---+---+---+---+---+---+---+---+\n   Attribute\
    \ Name      |CER|CEA|DPR|DPA|DWR|DWA|RAR|RAA|ASR|ASA|STR|STA|\n   --------------------+---+---+---+---+---+---+---+---+---+---+---+---+\n\
    \   Acct-Interim-       |0  |0  |0  |0  |0  |0  |0-1|0  |0  |0  |0  |0  |\n  \
    \   Interval          |   |   |   |   |   |   |   |   |   |   |   |   |\n   Accounting-Realtime-|0\
    \  |0  |0  |0  |0  |0  |0-1|0  |0  |0  |0  |0  |\n     Required          |   |\
    \   |   |   |   |   |   |   |   |   |   |   |\n   Acct-Application-Id |0+ |0+\
    \ |0  |0  |0  |0  |0  |0  |0  |0  |0  |0  |\n   Auth-Application-Id |0+ |0+ |0\
    \  |0  |0  |0  |1  |0  |1  |0  |1  |0  |\n   Auth-Grace-Period   |0  |0  |0  |0\
    \  |0  |0  |0  |0  |0  |0  |0  |0  |\n   Auth-Request-Type   |0  |0  |0  |0  |0\
    \  |0  |0  |0  |0  |0  |0  |0  |\n   Auth-Session-State  |0  |0  |0  |0  |0  |0\
    \  |0  |0  |0  |0  |0  |0  |\n   Authorization-      |0  |0  |0  |0  |0  |0  |0\
    \  |0  |0  |0  |0  |0  |\n     Lifetime          |   |   |   |   |   |   |   |\
    \   |   |   |   |   |\n   Class               |0  |0  |0  |0  |0  |0  |0  |0 \
    \ |0  |0  |0+ |0+ |\n   Destination-Host    |0  |0  |0  |0  |0  |0  |1  |0  |1\
    \  |0  |0-1|0  |\n   Destination-Realm   |0  |0  |0  |0  |0  |0  |1  |0  |1  |0\
    \  |1  |0  |\n   Disconnect-Cause    |0  |0  |1  |0  |0  |0  |0  |0  |0  |0  |0\
    \  |0  |\n   Error-Message       |0  |0-1|0  |0-1|0  |0-1|0  |0-1|0  |0-1|0  |0-1|\n\
    \   Error-Reporting-Host|0  |0  |0  |0  |0  |0  |0  |0-1|0  |0-1|0  |0-1|\n  \
    \ Failed-AVP          |0  |0+ |0  |0+ |0  |0+ |0  |0+ |0  |0+ |0  |0+ |\n   Firmware-Revision\
    \   |0-1|0-1|0  |0  |0  |0  |0  |0  |0  |0  |0  |0  |\n   Host-IP-Address    \
    \ |1+ |1+ |0  |0  |0  |0  |0  |0  |0  |0  |0  |0  |\n   Inband-Security-Id  |0+\
    \ |0+ |0  |0  |0  |0  |0  |0  |0  |0  |0  |0  |\n   Multi-Round-Time-Out|0  |0\
    \  |0  |0  |0  |0  |0  |0  |0  |0  |0  |0  |\n   Origin-Host         |1  |1  |1\
    \  |1  |1  |1  |1  |1  |1  |1  |1  |1  |\n   Origin-Realm        |1  |1  |1  |1\
    \  |1  |1  |1  |1  |1  |1  |1  |1  |\n   Origin-State-Id     |0-1|0-1|0  |0  |0-1|0-1|0-1|0-1|0-1|0-1|0-1|0-1|\n\
    \   Product-Name        |1  |1  |0  |0  |0  |0  |0  |0  |0  |0  |0  |0  |\n  \
    \ Proxy-Info          |0  |0  |0  |0  |0  |0  |0+ |0+ |0+ |0+ |0+ |0+ |\n   Redirect-Host\
    \       |0  |0  |0  |0  |0  |0  |0  |0+ |0  |0+ |0  |0+ |\n   Redirect-Host-Usage\
    \ |0  |0  |0  |0  |0  |0  |0  |0-1|0  |0-1|0  |0-1|\n   Redirect-Max-Cache- |0\
    \  |0  |0  |0  |0  |0  |0  |0-1|0  |0-1|0  |0-1|\n     Time              |   |\
    \   |   |   |   |   |   |   |   |   |   |   |\n   Result-Code         |0  |1 \
    \ |0  |1  |0  |1  |0  |1  |0  |0  |0  |1  |\n   Re-Auth-Request-Type|0  |0  |0\
    \  |0  |0  |0  |1  |0  |0  |0  |0  |0  |\n   Route-Record        |0  |0  |0  |0\
    \  |0  |0  |0+ |0  |0+ |0  |0+ |0  |\n   Session-Binding     |0  |0  |0  |0  |0\
    \  |0  |0  |0  |0  |0  |0  |0  |\n   Session-Id          |0  |0  |0  |0  |0  |0\
    \  |1  |1  |1  |1  |1  |1  |\n   Session-Server-     |0  |0  |0  |0  |0  |0  |0\
    \  |0  |0  |0  |0  |0  |\n     Failover          |   |   |   |   |   |   |   |\
    \   |   |   |   |   |\n   Session-Timeout     |0  |0  |0  |0  |0  |0  |0  |0 \
    \ |0  |0  |0  |0  |\n   Supported-Vendor-Id |0+ |0+ |0  |0  |0  |0  |0  |0  |0\
    \  |0  |0  |0  |\n   Termination-Cause   |0  |0  |0  |0  |0  |0  |0  |0  |0  |0\
    \  |1  |0  |\n   User-Name           |0  |0  |0  |0  |0  |0  |0-1|0-1|0-1|0-1|0-1|0-1|\n\
    \   Vendor-Id           |1  |1  |0  |0  |0  |0  |0  |0  |0  |0  |0  |0  |\n  \
    \ Vendor-Specific-    |0+ |0+ |0  |0  |0  |0  |0  |0  |0  |0  |0  |0  |\n    \
    \ Application-Id    |   |   |   |   |   |   |   |   |   |   |   |   |\n   --------------------+---+---+---+---+---+---+---+---+---+---+---+---+\n"
- title: 10.2.  Accounting AVP Table
  contents:
  - "10.2.  Accounting AVP Table\n   The table in this section is used to represent\
    \ which AVPs defined in\n   this document are to be present in the Accounting\
    \ messages.  These\n   AVP occurrence requirements are guidelines, which may be\
    \ expanded,\n   and/or overridden by application-specific requirements in the\n\
    \   Diameter applications documents.\n                                 +-----------+\n\
    \                                 |  Command  |\n                            \
    \     |    Code   |\n                                 +-----+-----+\n   Attribute\
    \ Name                | ACR | ACA |\n   ------------------------------+-----+-----+\n\
    \   Acct-Interim-Interval         | 0-1 | 0-1 |\n   Acct-Multi-Session-Id    \
    \     | 0-1 | 0-1 |\n   Accounting-Record-Number      | 1   | 1   |\n   Accounting-Record-Type\
    \        | 1   | 1   |\n   Acct-Session-Id               | 0-1 | 0-1 |\n   Accounting-Sub-Session-Id\
    \     | 0-1 | 0-1 |\n   Accounting-Realtime-Required  | 0-1 | 0-1 |\n   Acct-Application-Id\
    \           | 0-1 | 0-1 |\n   Auth-Application-Id           | 0   | 0   |\n  \
    \ Class                         | 0+  | 0+  |\n   Destination-Host           \
    \   | 0-1 | 0   |\n   Destination-Realm             | 1   | 0   |\n   Error-Reporting-Host\
    \          | 0   | 0+  |\n   Event-Timestamp               | 0-1 | 0-1 |\n   Origin-Host\
    \                   | 1   | 1   |\n   Origin-Realm                  | 1   | 1\
    \   |\n   Proxy-Info                    | 0+  | 0+  |\n   Route-Record       \
    \           | 0+  | 0+  |\n   Result-Code                   | 0   | 1   |\n  \
    \ Session-Id                    | 1   | 1   |\n   Termination-Cause          \
    \   | 0-1 | 0-1 |\n   User-Name                     | 0-1 | 0-1 |\n   Vendor-Specific-Application-Id|\
    \ 0-1 | 0-1 |\n   ------------------------------+-----+-----+\n"
- title: 11.  IANA Considerations
  contents:
  - "11.  IANA Considerations\n   This section provides guidance to the Internet Assigned\
    \ Numbers\n   Authority (IANA) regarding registration of values related to the\n\
    \   Diameter protocol, in accordance with BCP 26 [IANA].  The following\n   policies\
    \ are used here with the meanings defined in BCP 26: \"Private\n   Use\", \"First\
    \ Come First Served\", \"Expert Review\", \"Specification\n   Required\", \"IETF\
    \ Consensus\", \"Standards Action\".\n   This section explains the criteria to\
    \ be used by the IANA for\n   assignment of numbers within namespaces defined\
    \ within this document.\n   Diameter is not intended as a general purpose protocol,\
    \ and\n   allocations SHOULD NOT be made for purposes unrelated to\n   authentication,\
    \ authorization or accounting.\n   For registration requests where a Designated\
    \ Expert should be\n   consulted, the responsible IESG area director should appoint\
    \ the\n   Designated Expert.  For Designated Expert with Specification\n   Required,\
    \ the request is posted to the AAA WG mailing list (or, if it\n   has been disbanded,\
    \ a successor designated by the Area Director) for\n   comment and review, and\
    \ MUST include a pointer to a public\n   specification. Before a period of 30\
    \ days has passed, the Designated\n   Expert will either approve or deny the registration\
    \ request and\n   publish a notice of the decision to the AAA WG mailing list\
    \ or its\n   successor.  A denial notice must be justified by an explanation and,\n\
    \   in the cases  where it is possible, concrete suggestions on how the\n   request\
    \ can be modified so as to become acceptable.\n"
- title: 11.1.  AVP Header
  contents:
  - "11.1.  AVP Header\n   As defined in Section 4, the AVP header contains three\
    \ fields that\n   requires IANA namespace management; the AVP Code, Vendor-ID\
    \ and Flags\n   field.\n"
- title: 11.1.1.  AVP Codes
  contents:
  - "11.1.1.  AVP Codes\n   The AVP Code namespace is used to identify attributes.\
    \  There are\n   multiple namespaces.  Vendors can have their own AVP Codes namespace\n\
    \   which will be identified by their Vendor-ID (also known as\n   Enterprise-Number)\
    \ and they control the assignments of their vendor-\n   specific AVP codes within\
    \ their own namespace.  The absence of a\n   Vendor-ID or a Vendor-ID value of\
    \ zero (0) identifies the IETF IANA\n   controlled AVP Codes namespace.  The AVP\
    \ Codes and sometimes also\n   possible values in an AVP are controlled and maintained\
    \ by IANA.\n   AVP Code 0 is not used. AVP Codes 1-255 are managed separately\
    \ as\n   RADIUS Attribute Types [RADTYPE].  This document defines the AVP\n  \
    \ Codes 257-274, 276-285, 287, 291-300, 480, 483 and 485-486.  See\n   Section\
    \ 4.5 for the assignment of the namespace in this\n   specification.\n   AVPs\
    \ may be allocated following Designated Expert with Specification\n   Required\
    \ [IANA].  Release of blocks of AVPs (more than 3 at a time\n   for a given purpose)\
    \ should require IETF Consensus.\n   Note that Diameter defines a mechanism for\
    \ Vendor-Specific AVPs,\n   where the Vendor-Id field in the AVP header is set\
    \ to a non-zero\n   value.  Vendor-Specific AVPs codes are for Private Use and\
    \ should be\n   encouraged instead of allocation of global attribute types, for\n\
    \   functions specific only to one vendor's implementation of Diameter,\n   where\
    \ no interoperability is deemed useful.  Where a Vendor-Specific\n   AVP is implemented\
    \ by more than one vendor, allocation of global AVPs\n   should be encouraged\
    \ instead.\n"
- title: 11.1.2.  AVP Flags
  contents:
  - "11.1.2.  AVP Flags\n   There are 8 bits in the AVP Flags field of the AVP header,\
    \ defined in\n   Section 4.  This document assigns bit 0 ('V'endor Specific),\
    \ bit 1\n   ('M'andatory) and bit 2 ('P'rotected).  The remaining bits should\n\
    \   only be assigned via a Standards Action [IANA].\n"
- title: 11.2.  Diameter Header
  contents:
  - "11.2.  Diameter Header\n   As defined in Section 3, the Diameter header contains\
    \ two fields that\n   require IANA namespace management; Command Code and Command\
    \ Flags.\n"
- title: 11.2.1.  Command Codes
  contents:
  - "11.2.1.  Command Codes\n   The Command Code namespace is used to identify Diameter\
    \ commands.\n   The values 0-255 are reserved for RADIUS backward compatibility,\
    \ and\n   are defined as \"RADIUS Packet Type Codes\" in [RADTYPE].  Values 256-\n\
    \   16,777,213 are for permanent, standard commands, allocated by IETF\n   Consensus\
    \ [IANA].  This document defines the Command Codes 257, 258,\n   271, 274-275,\
    \ 280 and 282.  See Section 3.1 for the assignment of the\n   namespace in this\
    \ specification.\n   The values 16,777,214 and 16,777,215 (hexadecimal values\
    \ 0xfffffe -\n   0xffffff) are reserved for experimental commands.  As these codes\
    \ are\n   only for experimental and testing purposes, no guarantee is made for\n\
    \   interoperability between Diameter peers using experimental commands,\n   as\
    \ outlined in [IANA-EXP].\n"
- title: 11.2.2.  Command Flags
  contents:
  - "11.2.2.  Command Flags\n   There are eight bits in the Command Flags field of\
    \ the Diameter\n   header.  This document assigns bit 0 ('R'equest), bit 1 ('P'roxy),\n\
    \   bit 2 ('E'rror) and bit 3 ('T').  Bits 4 through 7 MUST only be\n   assigned\
    \ via a Standards Action [IANA].\n"
- title: 11.3.  Application Identifiers
  contents:
  - "11.3.  Application Identifiers\n   As defined in Section 2.4, the Application\
    \ Identifier is used to\n   identify a specific Diameter Application.  There are\
    \ standards-track\n   application ids and vendor specific application ids.\n \
    \  IANA [IANA] has assigned the range 0x00000001 to 0x00ffffff for\n   standards-track\
    \ applications; and 0x01000000 - 0xfffffffe for vendor\n   specific applications,\
    \ on a first-come, first-served basis.  The\n   following values are allocated.\n\
    \      Diameter Common Messages            0\n      NASREQ                   \
    \           1 [NASREQ]\n      Mobile-IP                           2 [DIAMMIP]\n\
    \      Diameter Base Accounting            3\n      Relay                    \
    \           0xffffffff\n   Assignment of standards-track application IDs are by\
    \ Designated\n   Expert with Specification Required [IANA].\n   Both Application-Id\
    \ and Acct-Application-Id AVPs use the same\n   Application Identifier space.\n\
    \   Vendor-Specific Application Identifiers, are for Private Use.\n   Vendor-Specific\
    \ Application Identifiers are assigned on a First Come,\n   First Served basis\
    \ by IANA.\n"
- title: 11.4.  AVP Values
  contents:
  - "11.4.  AVP Values\n   Certain AVPs in Diameter define a list of values with various\n\
    \   meanings.  For attributes other than those specified in this section,\n  \
    \ adding additional values to the list can be done on a First Come,\n   First\
    \ Served basis by IANA.\n"
- title: 11.4.1.  Result-Code AVP Values
  contents:
  - "11.4.1.  Result-Code AVP Values\n   As defined in Section 7.1, the Result-Code\
    \ AVP (AVP Code 268) defines\n   the values 1001, 2001-2002, 3001-3010, 4001-4002\
    \ and 5001-5017.\n   All remaining values are available for assignment via IETF\
    \ Consensus\n   [IANA].\n"
- title: 11.4.2.  Accounting-Record-Type AVP Values
  contents:
  - "11.4.2.  Accounting-Record-Type AVP Values\n   As defined in Section 9.8.1, the\
    \ Accounting-Record-Type AVP (AVP Code\n   480) defines the values 1-4.  All remaining\
    \ values are available for\n   assignment via IETF Consensus [IANA].\n"
- title: 11.4.3.  Termination-Cause AVP Values
  contents:
  - "11.4.3.  Termination-Cause AVP Values\n   As defined in Section 8.15, the Termination-Cause\
    \ AVP (AVP Code 295)\n   defines the values 1-8.  All remaining values are available\
    \ for\n   assignment via IETF Consensus [IANA].\n"
- title: 11.4.4.  Redirect-Host-Usage AVP Values
  contents:
  - "11.4.4.  Redirect-Host-Usage AVP Values\n   As defined in Section 6.13, the Redirect-Host-Usage\
    \ AVP (AVP Code\n   261) defines the values 0-5.  All remaining values are available\
    \ for\n   assignment via IETF Consensus [IANA].\n"
- title: 11.4.5.  Session-Server-Failover AVP Values
  contents:
  - "11.4.5.  Session-Server-Failover AVP Values\n   As defined in Section 8.18, the\
    \ Session-Server-Failover AVP (AVP Code\n   271) defines the values 0-3.  All\
    \ remaining values are available for\n   assignment via IETF Consensus [IANA].\n"
- title: 11.4.6.  Session-Binding AVP Values
  contents:
  - "11.4.6.  Session-Binding AVP Values\n   As defined in Section 8.17, the Session-Binding\
    \ AVP (AVP Code 270)\n   defines the bits 1-4.  All remaining bits are available\
    \ for\n   assignment via IETF Consensus [IANA].\n"
- title: 11.4.7.  Disconnect-Cause AVP Values
  contents:
  - "11.4.7.  Disconnect-Cause AVP Values\n   As defined in Section 5.4.3, the Disconnect-Cause\
    \ AVP (AVP Code 273)\n   defines the values 0-2.  All remaining values are available\
    \ for\n   assignment via IETF Consensus [IANA].\n"
- title: 11.4.8.  Auth-Request-Type AVP Values
  contents:
  - "11.4.8.  Auth-Request-Type AVP Values\n   As defined in Section 8.7, the Auth-Request-Type\
    \ AVP (AVP Code 274)\n   defines the values 1-3.  All remaining values are available\
    \ for\n   assignment via IETF Consensus [IANA].\n"
- title: 11.4.9.  Auth-Session-State AVP Values
  contents:
  - "11.4.9.  Auth-Session-State AVP Values\n   As defined in Section 8.11, the Auth-Session-State\
    \ AVP (AVP Code 277)\n   defines the values 0-1.  All remaining values are available\
    \ for\n   assignment via IETF Consensus [IANA].\n"
- title: 11.4.10.  Re-Auth-Request-Type AVP Values
  contents:
  - "11.4.10.  Re-Auth-Request-Type AVP Values\n   As defined in Section 8.12, the\
    \ Re-Auth-Request-Type AVP (AVP Code\n   285) defines the values 0-1.  All remaining\
    \ values are available for\n   assignment via IETF Consensus [IANA].\n"
- title: 11.4.11.  Accounting-Realtime-Required AVP Values
  contents:
  - "11.4.11.  Accounting-Realtime-Required AVP Values\n   As defined in Section 9.8.7,\
    \ the Accounting-Realtime-Required AVP\n   (AVP Code 483) defines the values 1-3.\
    \  All remaining values are\n   available for assignment via IETF Consensus [IANA].\n"
- title: 11.4.12.   Inband-Security-Id AVP (code 299)
  contents:
  - "11.4.12.   Inband-Security-Id AVP (code 299)\n   As defined in Section 6.10,\
    \ the Inband-Security-Id AVP (AVP Code 299)\n   defines the values 0-1.  All remaining\
    \ values are available for\n   assignment via IETF Consensus [IANA].\n"
- title: 11.5.  Diameter TCP/SCTP Port Numbers
  contents:
  - "11.5.  Diameter TCP/SCTP Port Numbers\n   The IANA has assigned TCP and SCTP\
    \ port number 3868 to Diameter.\n"
- title: 11.6.  NAPTR Service Fields
  contents:
  - "11.6.  NAPTR Service Fields\n   The registration in the RFC MUST include the\
    \ following information:\n   Service Field: The service field being registered.\
    \  An example for a\n   new fictitious transport protocol called NCTP might be\
    \ \"AAA+D2N\".\n   Protocol: The specific transport protocol associated with that\n\
    \   service field.  This MUST include the name and acronym for the\n   protocol,\
    \ along with reference to a document that describes the\n   transport protocol.\
    \  For example - \"New Connectionless Transport\n   Protocol (NCTP), RFC 5766\"\
    .\n   Name and Contact Information: The name, address, email address and\n   telephone\
    \ number for the person performing the registration.\n   The following values\
    \ have been placed into the registry:\n      Services Field               Protocol\n\
    \      AAA+D2T                       TCP\n      AAA+D2S                      \
    \ SCTP\n"
- title: 12.  Diameter protocol related configurable parameters
  contents:
  - "12.  Diameter protocol related configurable parameters\n   This section contains\
    \ the configurable parameters that are found\n   throughout this document:\n \
    \  Diameter Peer\n      A Diameter entity MAY communicate with peers that are\
    \ statically\n      configured.  A statically configured Diameter peer would require\n\
    \      that either the IP address or the fully qualified domain name\n      (FQDN)\
    \ be supplied, which would then be used to resolve through\n      DNS.\n   Realm\
    \ Routing Table\n      A Diameter proxy server routes messages based on the realm\
    \ portion\n      of a Network Access Identifier (NAI).  The server MUST have a\n\
    \      table of Realm Names, and the address of the peer to which the\n      message\
    \ must be forwarded to.  The routing table MAY also include\n      a \"default\
    \ route\", which is typically used for all messages that\n      cannot be locally\
    \ processed.\n   Tc timer\n      The Tc timer controls the frequency that transport\
    \ connection\n      attempts are done to a peer with whom no active transport\n\
    \      connection exists.  The recommended value is 30 seconds.\n"
- title: 13.  Security Considerations
  contents:
  - "13.  Security Considerations\n   The Diameter base protocol assumes that messages\
    \ are secured by using\n   either IPSec or TLS.  This security mechanism is acceptable\
    \ in\n   environments where there is no untrusted third party agent.  In other\n\
    \   situations, end-to-end security is needed.\n   Diameter clients, such as Network\
    \ Access Servers (NASes) and Mobility\n   Agents MUST support IP Security [SECARCH]\
    \ and MAY support TLS [TLS].\n   Diameter servers MUST support TLS and IPsec.\
    \  Diameter\n   implementations MUST use transmission-level security of some kind\n\
    \   (IPsec or TLS) on each connection.\n   If a Diameter connection is not protected\
    \ by IPsec, then the CER/CEA\n   exchange MUST include an Inband-Security-ID AVP\
    \ with a value of TLS.\n   For TLS usage, a TLS handshake will begin when both\
    \ ends are in the\n   open state, after completion of the CER/CEA exchange.  If\
    \ the TLS\n   handshake is successful, all further messages will be sent via TLS.\n\
    \   If the handshake fails, both ends move to the closed state.\n   It is suggested\
    \ that IPsec be used primarily at the edges for intra-\n   domain exchanges. \
    \ For NAS devices without certificate support, pre-\n   shared keys can be used\
    \ between the NAS and a local AAA proxy.\n   For protection of inter-domain exchanges,\
    \ TLS is recommended.  See\n   Sections 13.1 and 13.2 for more details on IPsec\
    \ and TLS usage.\n"
- title: 13.1.  IPsec Usage
  contents:
  - "13.1.  IPsec Usage\n   All Diameter implementations MUST support IPsec ESP [IPsec]\
    \ in\n   transport mode with non-null encryption and authentication algorithms\n\
    \   to provide per-packet authentication, integrity protection and\n   confidentiality,\
    \ and MUST support the replay protection mechanisms of\n   IPsec.\n   Diameter\
    \ implementations MUST support IKE for peer authentication,\n   negotiation of\
    \ security associations, and key management, using the\n   IPsec DOI [IPSECDOI].\
    \  Diameter implementations MUST support peer\n   authentication using a pre-shared\
    \ key, and MAY support certificate-\n   based peer authentication using digital\
    \ signatures.  Peer\n   authentication using the public key encryption methods\
    \ outlined in\n   IKE's Sections 5.2 and 5.3 [IKE] SHOULD NOT be used.\n   Conformant\
    \ implementations MUST support both IKE Main Mode and\n   Aggressive Mode.  When\
    \ pre-shared keys are used for authentication,\n   IKE Aggressive Mode SHOULD\
    \ be used, and IKE Main Mode SHOULD NOT be\n   used.  When digital signatures\
    \ are used for authentication, either\n   IKE Main Mode or IKE Aggressive Mode\
    \ MAY be used.\n   When digital signatures are used to achieve authentication,\
    \ an IKE\n   negotiator SHOULD use IKE Certificate Request Payload(s) to specify\n\
    \   the certificate authority (or authorities) that are trusted in\n   accordance\
    \ with its local policy.  IKE negotiators SHOULD use\n   pertinent certificate\
    \ revocation checks before accepting a PKI\n   certificate for use in IKE's authentication\
    \ procedures.\n   The Phase 2 Quick Mode exchanges used to negotiate protection\
    \ for\n   Diameter connections MUST explicitly carry the Identity Payload\n  \
    \ fields (IDci and IDcr).  The DOI provides for several types of\n   identification\
    \ data.  However, when used in conformant\n   implementations, each ID Payload\
    \ MUST carry a single IP address and a\n   single non-zero port number, and MUST\
    \ NOT use the IP Subnet or IP\n   Address Range formats.  This allows the Phase\
    \ 2 security association\n   to correspond to specific TCP and SCTP connections.\n\
    \   Since IPsec acceleration hardware may only be able to handle a\n   limited\
    \ number of active IKE Phase 2 SAs, Phase 2 delete messages may\n   be sent for\
    \ idle SAs, as a means of keeping the number of active\n   Phase 2 SAs to a minimum.\
    \  The receipt of an IKE Phase 2 delete\n   message SHOULD NOT be interpreted\
    \ as a reason for tearing down a\n   Diameter connection.  Rather, it is preferable\
    \ to leave the\n   connection up, and if additional traffic is sent on it, to\
    \ bring up\n   another IKE Phase 2 SA to protect it.  This avoids the potential\
    \ for\n   continually bringing connections up and down.\n"
- title: 13.2.  TLS Usage
  contents:
  - "13.2.  TLS Usage\n   A Diameter node that initiates a connection to another Diameter\
    \ node\n   acts as a TLS client according to [TLS], and a Diameter node that\n\
    \   accepts a connection acts as a TLS server.  Diameter nodes\n   implementing\
    \ TLS for security MUST mutually authenticate as part of\n   TLS session establishment.\
    \  In order to ensure mutual authentication,\n   the Diameter node acting as TLS\
    \ server must request a certificate\n   from the Diameter node acting as TLS client,\
    \ and the Diameter node\n   acting as TLS client MUST be prepared to supply a\
    \ certificate on\n   request.\n   Diameter nodes MUST be able to negotiate the\
    \ following TLS cipher\n   suites:\n      TLS_RSA_WITH_RC4_128_MD5\n      TLS_RSA_WITH_RC4_128_SHA\n\
    \      TLS_RSA_WITH_3DES_EDE_CBC_SHA\n   Diameter nodes SHOULD be able to negotiate\
    \ the following TLS cipher\n   suite:\n      TLS_RSA_WITH_AES_128_CBC_SHA\n  \
    \ Diameter nodes MAY negotiate other TLS cipher suites.\n"
- title: 13.3.  Peer-to-Peer Considerations
  contents:
  - "13.3.  Peer-to-Peer Considerations\n   As with any peer-to-peer protocol, proper\
    \ configuration of the trust\n   model within a Diameter peer is essential to\
    \ security.  When\n   certificates are used, it is necessary to configure the\
    \ root\n   certificate authorities trusted by the Diameter peer.  These root CAs\n\
    \   are likely to be unique to Diameter usage and distinct from the root\n   CAs\
    \ that might be trusted for other purposes such as Web browsing.\n   In general,\
    \ it is expected that those root CAs will be configured so\n   as to reflect the\
    \ business relationships between the organization\n   hosting the Diameter peer\
    \ and other organizations.  As a result, a\n   Diameter peer will typically not\
    \ be configured to allow connectivity\n   with any arbitrary peer.  When certificate\
    \ authentication Diameter\n   peers may not be known beforehand, and therefore\
    \ peer discovery may\n   be required.\n   Note that IPsec is considerably less\
    \ flexible than TLS when it comes\n   to configuring root CAs.  Since use of Port\
    \ identifiers is prohibited\n   within IKE Phase 1, within IPsec it is not possible\
    \ to uniquely\n   configure trusted root CAs for each application individually;\
    \ the\n   same policy must be used for all applications.  This implies, for\n\
    \   example, that a root CA trusted for use with Diameter must also be\n   trusted\
    \ to protect SNMP.  These restrictions can be awkward at best.\n   Since TLS supports\
    \ application-level granularity in certificate\n   policy, TLS SHOULD be used\
    \ to protect Diameter connections between\n   administrative domains.  IPsec is\
    \ most appropriate for intra-domain\n   usage when pre-shared keys are used as\
    \ a security mechanism.\n   When pre-shared key authentication is used with IPsec\
    \ to protect\n   Diameter, unique pre-shared keys are configured with Diameter\
    \ peers,\n   who are identified by their IP address (Main Mode), or possibly their\n\
    \   FQDN (Aggressive Mode).  As a result, it is necessary for the set of\n   Diameter\
    \ peers to be known beforehand.  Therefore, peer discovery is\n   typically not\
    \ necessary.\n   The following is intended to provide some guidance on the issue.\n\
    \   It is recommended that a Diameter peer implement the same security\n   mechanism\
    \ (IPsec or TLS) across all its peer-to-peer connections.\n   Inconsistent use\
    \ of security mechanisms can result in redundant\n   security mechanisms being\
    \ used (e.g., TLS over IPsec) or worse,\n   potential security vulnerabilities.\
    \  When IPsec is used with\n   Diameter, a typical security policy for outbound\
    \ traffic is \"Initiate\n   IPsec, from me to any, destination port Diameter\"\
    ; for inbound\n   traffic, the policy would be \"Require IPsec, from any to me,\n\
    \   destination port Diameter\".\n   This policy causes IPsec to be used whenever\
    \ a Diameter peer\n   initiates a connection to another Diameter peer, and to\
    \ be required\n   whenever an inbound Diameter connection occurs.  This policy\
    \ is\n   attractive, since it does not require policy to be set for each peer\n\
    \   or dynamically modified each time a new Diameter connection is\n   created;\
    \ an IPsec SA is automatically created based on a simple\n   static policy.  Since\
    \ IPsec extensions are typically not available to\n   the sockets API on most\
    \ platforms, and IPsec policy functionality is\n   implementation dependent, use\
    \ of a simple static policy is the often\n   the simplest route to IPsec-enabling\
    \ a Diameter implementation.\n   One implication of the recommended policy is\
    \ that if a node is using\n   both TLS and IPsec, there is not a convenient way\
    \ in which to use\n   either TLS or IPsec, but not both, without reserving an\
    \ additional\n   port for TLS usage.  Since Diameter uses the same port for TLS\
    \ and\n   non-TLS usage, where the recommended IPsec policy is put in place, a\n\
    \   TLS-protected connection will match the IPsec policy, and both IPsec\n   and\
    \ TLS will be used to protect the Diameter connection.  To avoid\n   this, it\
    \ would be necessary to plumb peer-specific policies either\n   statically or\
    \ dynamically.\n   If IPsec is used to secure Diameter peer-to-peer connections,\
    \ IPsec\n   policy SHOULD be set so as to require IPsec protection for inbound\n\
    \   connections, and to initiate IPsec protection for outbound\n   connections.\
    \  This can be accomplished via use of inbound and\n   outbound filter policy.\n"
- title: 14.  References
  contents:
  - '14.  References

    '
- title: 14.1.  Normative References
  contents:
  - "14.1.  Normative References\n   [AAATRANS]     Aboba, B. and J. Wood, \"Authentication,\
    \ Authorization\n                  and Accounting (AAA) Transport Profile\", RFC\
    \ 3539,\n                  June 2003.\n   [ABNF]         Crocker, D. and P. Overell,\
    \ \"Augmented BNF for Syntax\n                  Specifications: ABNF\", RFC 2234,\
    \ November 1997.\n   [ASSIGNNO]     Reynolds, J., \"Assigned Numbers: RFC 1700\
    \ is Replaced\n                  by an On-line Database\", RFC 3232, January 2002.\n\
    \   [DIFFSERV]     Nichols, K., Blake, S., Baker, F. and D. Black,\n         \
    \         \"Definition of the Differentiated Services Field (DS\n            \
    \      Field) in the IPv4 and IPv6 Headers\", RFC 2474,\n                  December\
    \ 1998.\n   [DIFFSERVAF]   Heinanen, J., Baker, F., Weiss, W. and J. Wroclawski,\n\
    \                  \"Assured Forwarding PHB Group\", RFC 2597, June 1999.\n  \
    \ [DIFFSERVEF]   Davie, B., Charny, A., Bennet, J., Benson, K., Le\n         \
    \         Boudec, J., Courtney, W., Davari, S., Firoiu, V. and\n             \
    \     D. Stiliadis, \"An Expedited Forwarding PHB\", RFC 3246,\n             \
    \     March 2002.\n   [DNSSRV]       Gulbrandsen, A., Vixie, P. and L. Esibov,\
    \ \"A DNS RR\n                  for specifying the location of services (DNS SRV)\"\
    ,\n                  RFC 2782, February 2000.\n   [EAP]          Blunk, L. and\
    \ J. Vollbrecht, \"PPP Extensible\n                  Authentication Protocol (EAP)\"\
    , RFC 2284, March 1998.\n   [FLOATPOINT]   Institute of Electrical and Electronics\
    \ Engineers,\n                  \"IEEE Standard for Binary Floating-Point Arithmetic\"\
    ,\n                  ANSI/IEEE Standard 754-1985, August 1985.\n   [IANA]    \
    \     Narten, T. and H. Alvestrand, \"Guidelines for Writing\n               \
    \   an IANA Considerations Section in RFCs\", BCP 26, RFC\n                  2434,\
    \ October 1998.\n   [IANAADFAM]    IANA; \"Address Family Numbers\",\n       \
    \           http://www.iana.org/assignments/address-family-numbers\n   [IANAWEB]\
    \      IANA, \"Number assignment\", http://www.iana.org\n   [IKE]          Harkins,\
    \ D. and D. Carrel, \"The Internet Key Exchange\n                  (IKE)\", RFC\
    \ 2409, November 1998.\n   [IPComp]       Shacham, A., Monsour, R., Pereira, R.\
    \ and M. Thomas,\n                  \"IP Payload Compression Protocol (IPComp)\"\
    , RFC 3173,\n                  September 2001.\n   [IPSECDOI]     Piper, D., \"\
    The Internet IP Security Domain of\n                  Interpretation for ISAKMP\"\
    , RFC 2407, November 1998.\n   [IPV4]         Postel, J., \"Internet Protocol\"\
    , STD 5, RFC 791,\n                  September 1981.\n   [IPV6]         Hinden,\
    \ R. and S. Deering, \"IP Version 6 Addressing\n                  Architecture\"\
    , RFC 2373, July 1998.\n   [KEYWORDS]     Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n                  Requirement Levels\", BCP 14, RFC 2119,\
    \ March 1997.\n   [NAI]          Aboba, B. and M. Beadles, \"The Network Access\n\
    \                  Identifier\", RFC 2486, January 1999.\n   [NAPTR]        Mealling,\
    \ M. and R. Daniel, \"The naming authority\n                  pointer (NAPTR)\
    \ DNS resource record,\" RFC 2915,\n                  September 2000.\n   [RADTYPE]\
    \      IANA, \"RADIUS Types\",\n                  http://www.iana.org/assignments/radius-types\n\
    \   [SCTP]         Stewart, R., Xie, Q., Morneault, K., Sharp, C.,\n         \
    \         Schwarzbauer, H., Taylor, T., Rytina, I., Kalla, M.,\n             \
    \     Zhang, L. and V. Paxson, \"Stream Control Transmission\n               \
    \   Protocol\", RFC 2960, October 2000.\n   [SLP]          Veizades, J., Guttman,\
    \ E., Perkins, C. and M. Day,\n                  \"Service Location Protocol,\
    \ Version 2\", RFC 2165, June\n                  1999.\n   [SNTP]         Mills,\
    \ D., \"Simple Network Time Protocol (SNTP)\n                  Version 4 for IPv4,\
    \ IPv6 and OSI\", RFC 2030, October\n                  1996.\n   [TCP]       \
    \   Postel, J. \"Transmission Control Protocol\", STD 7, RFC\n               \
    \   793, January 1981.\n   [TEMPLATE]     Guttman, E., Perkins, C. and J. Kempf,\
    \ \"Service\n                  Templates and Service: Schemes\", RFC 2609, June\
    \ 1999.\n   [TLS]          Dierks, T. and C. Allen, \"The TLS Protocol Version\n\
    \                  1.0\", RFC 2246, January 1999.\n   [TLSSCTP]      Jungmaier,\
    \ A., Rescorla, E. and M. Tuexen, \"Transport\n                  Layer Security\
    \ over Stream Control Transmission\n                  Protocol\", RFC 3436, December\
    \ 2002.\n   [URI]          Berners-Lee, T., Fielding, R. and L. Masinter,\n  \
    \                \"Uniform Resource Identifiers (URI): Generic Syntax\",\n   \
    \               RFC 2396, August 1998.\n   [UTF8]         Yergeau, F., \"UTF-8,\
    \ a transformation format of ISO\n                  10646\", RFC 2279, January\
    \ 1998.\n"
- title: 14.2.  Informative References
  contents:
  - "14.2.  Informative References\n   [AAACMS]       P. Calhoun, W. Bulley, S. Farrell,\
    \ \"Diameter CMS\n                  Security Application\", Work in Progress.\n\
    \   [AAAREQ]       Aboba, B., Calhoun, P., Glass, S., Hiller, T., McCann,\n  \
    \                P., Shiino, H., Zorn, G., Dommety, G., Perkins, C.,\n       \
    \           Patil, B., Mitton, D., Manning, S., Beadles, M.,\n               \
    \   Walsh, P., Chen, X., Sivalingham, S., Hameed, A.,\n                  Munson,\
    \ M., Jacobs, S., Lim, B., Hirschman, B., Hsu,\n                  R., Xu, Y.,\
    \ Campbell, E., Baba, S. and E. Jaques,\n                  \"Criteria for Evaluating\
    \ AAA Protocols for Network\n                  Access\", RFC 2989, November 2000.\n\
    \   [ACCMGMT]      Aboba, B., Arkko, J. and D. Harrington. \"Introduction\n  \
    \                to Accounting Management\", RFC 2975, October 2000.\n   [CDMA2000]\
    \     Hiller, T., Walsh, P., Chen, X., Munson, M., Dommety,\n                \
    \  G., Sivalingham, S., Lim, B., McCann, P., Shiino, H.,\n                  Hirschman,\
    \ B., Manning, S., Hsu, R., Koo, H., Lipford,\n                  M., Calhoun,\
    \ P., Lo, C., Jaques, E., Campbell, E., Xu,\n                  Y., Baba, S., Ayaki,\
    \ T., Seki, T. and A.  Hameed,\n                  \"CDMA2000 Wireless Data Requirements\
    \ for AAA\", RFC\n                  3141, June 2001.\n   [DIAMMIP]      P. Calhoun,\
    \ C. Perkins, \"Diameter Mobile IP\n                  Application\", Work in Progress.\n\
    \   [DYNAUTH]      Chiba, M., Dommety, G., Eklund, M., Mitton, D. and B.\n   \
    \               Aboba, \"Dynamic Authorization Extensions to Remote\n        \
    \          Authentication Dial In User Service (RADIUS)\", RFC\n             \
    \     3576, July 2003.\n   [IANA-EXP]     T. Narten, \"Assigning Experimental\
    \ and Testing Numbers\n                  Considered Useful\", Work in Progress.\n\
    \   [MIPV4]        Perkins, C., \"IP Mobility Support for IPv4\", RFC 3344,\n\
    \                  August 2002.\n   [MIPREQ]       Glass, S., Hiller, T., Jacobs,\
    \ S. and C. Perkins,\n                  \"Mobile IP Authentication, Authorization,\
    \ and\n                  Accounting Requirements\", RFC 2977, October 2000.\n\
    \   [NASNG]        Mitton, D. and M. Beadles, \"Network Access Server\n      \
    \            Requirements Next Generation (NASREQNG) NAS Model\",\n          \
    \        RFC 2881, July 2000.\n   [NASREQ]       P. Calhoun, W. Bulley, A. Rubens,\
    \ J. Haag, \"Diameter\n                  NASREQ Application\", Work in Progress.\n\
    \   [NASCRIT]      Beadles, M. and D. Mitton, \"Criteria for Evaluating\n    \
    \              Network Access Server Protocols\", RFC 3169, September\n      \
    \            2001.\n   [PPP]          Simpson, W., \"The Point-to-Point Protocol\
    \ (PPP)\", STD\n                  51, RFC 1661, July 1994.\n   [PROXYCHAIN]  \
    \ Aboba, B. and J. Vollbrecht, \"Proxy Chaining and\n                  Policy\
    \ Implementation in Roaming\", RFC 2607, June\n                  1999.\n   [RADACCT]\
    \      Rigney, C., \"RADIUS Accounting\", RFC 2866, June 2000.\n   [RADEXT]  \
    \     Rigney, C., Willats, W. and P. Calhoun, \"RADIUS\n                  Extensions\"\
    , RFC 2869, June 2000.\n   [RADIUS]       Rigney, C., Willens, S., Rubens, A.\
    \ and W. Simpson,\n                  \"Remote Authentication Dial In User Service\
    \ (RADIUS)\",\n                  RFC 2865, June 2000.\n   [ROAMREV]      Aboba,\
    \ B., Lu, J., Alsop, J., Ding, J. and W. Wang,\n                  \"Review of\
    \ Roaming Implementations\", RFC 2194,\n                  September 1997.\n  \
    \ [ROAMCRIT]     Aboba, B. and G. Zorn, \"Criteria for Evaluating\n          \
    \        Roaming Protocols\", RFC 2477, January 1999.\n   [SECARCH]      Kent,\
    \ S. and R. Atkinson, \"Security Architecture for\n                  the Internet\
    \ Protocol\", RFC 2401, November 1998.\n   [TACACS]       Finseth, C., \"An Access\
    \ Control Protocol, Sometimes\n                  Called TACACS\", RFC 1492, July\
    \ 1993.\n"
- title: 15.  Acknowledgements
  contents:
  - "15.  Acknowledgements\n   The authors would like to thank Nenad Trifunovic, Tony\
    \ Johansson and\n   Pankaj Patel for their participation in the pre-IETF Document\
    \ Reading\n   Party.  Allison Mankin, Jonathan Wood and Bernard Aboba provided\n\
    \   invaluable assistance in working out transport issues, and similarly\n   with\
    \ Steven Bellovin in the security area.\n   Paul Funk and David Mitton were instrumental\
    \ in getting the Peer\n   State Machine correct, and our deep thanks go to them\
    \ for their time.\n   Text in this document was also provided by Paul Funk, Mark\
    \ Eklund,\n   Mark Jones and Dave Spence.  Jacques Caron provided many great\n\
    \   comments as a result of a thorough review of the spec.\n   The authors would\
    \ also like to acknowledge the following people for\n   their contribution in\
    \ the development of the Diameter protocol:\n   Allan C. Rubens, Haseeb Akhtar,\
    \ William Bulley, Stephen Farrell,\n   David Frascone, Daniel C. Fox, Lol Grant,\
    \ Ignacio Goyret, Nancy\n   Greene, Peter Heitman, Fredrik Johansson, Mark Jones,\
    \ Martin Julien,\n   Bob Kopacz, Paul Krumviede, Fergal Ladley, Ryan Moats, Victor\
    \ Muslin,\n   Kenneth Peirce, John Schnizlein, Sumit Vakil, John R. Vollbrecht\
    \ and\n   Jeff Weisberg.\n   Finally, Pat Calhoun would like to thank Sun Microsystems\
    \ since most\n   of the effort put into this document was done while he was in\
    \ their\n   employ.\n"
- title: Appendix A.  Diameter Service Template
  contents:
  - "Appendix A.  Diameter Service Template\n   The following service template describes\
    \ the attributes used by\n   Diameter servers to advertise themselves.  This simplifies\
    \ the\n   process of selecting an appropriate server to communicate with.  A\n\
    \   Diameter client can request specific Diameter servers based on\n   characteristics\
    \ of the Diameter service desired (for example, an AAA\n   server to use for accounting.)\n\
    \   Name of submitter:  \"Erik Guttman\" <Erik.Guttman@sun.com> Language of\n\
    \   service template:  en\n   Security Considerations:\n      Diameter clients\
    \ and servers use various cryptographic mechanisms\n      to protect communication\
    \ integrity, confidentiality as well as\n      perform end-point authentication.\
    \  It would thus be difficult if\n      not impossible for an attacker to advertise\
    \ itself using SLPv2 and\n      pose as a legitimate Diameter peer without proper\
    \ preconfigured\n      secrets or cryptographic keys.  Still, as Diameter services\
    \ are\n      vital for network operation it is important to use SLPv2\n      authentication\
    \ to prevent an attacker from modifying or\n      eliminating service advertisements\
    \ for legitimate Diameter\n      servers.\n   Template text:\n   -------------------------template\
    \ begins here-----------------------\n   template-type=service:diameter\n   template-version=0.0\n\
    \   template-description=\n     The Diameter protocol is defined by RFC 3588.\n\
    \   template-url-syntax=\n     url-path= ; The Diameter URL format is described\
    \ in Section 2.9.\n               ; Example: 'aaa://aaa.example.com:1812;transport=tcp\n\
    \      supported-auth-applications= string L M\n      # This attribute lists the\
    \ Diameter applications supported by the\n      # AAA implementation.  The applications\
    \ currently defined are:\n      #  Application Name     Defined by\n      #  ----------------\
    \     -----------------------------------\n      #  NASREQ               Diameter\
    \ Network Access Server Application\n      #  MobileIP             Diameter Mobile\
    \ IP Application\n      #\n      # Notes:\n      #   . Diameter implementations\
    \ support one or more applications.\n      #   . Additional applications may be\
    \ defined in the future.\n      #     An updated service template will be created\
    \ at that time.\n      #\n      NASREQ,MobileIP\n      supported-acct-applications=\
    \ string L M\n      # This attribute lists the Diameter applications supported\
    \ by the\n      # AAA implementation.  The applications currently defined are:\n\
    \      #  Application Name     Defined by\n      #  ----------------     -----------------------------------\n\
    \      #  NASREQ               Diameter Network Access Server Application\n  \
    \    #  MobileIP             Diameter Mobile IP Application\n      #\n      #\
    \ Notes:\n      #   . Diameter implementations support one or more applications.\n\
    \      #   . Additional applications may be defined in the future.\n      #  \
    \   An updated service template will be created at that time.\n      #\n     \
    \ NASREQ,MobileIP\n      supported-transports= string L M\n      SCTP\n      #\
    \ This attribute lists the supported transports that the Diameter\n      # implementation\
    \ accepts.  Note that a compliant Diameter\n      # implementation MUST support\
    \ SCTP, though it MAY support other\n      # transports, too.\n      SCTP,TCP\n\
    \   -------------------------template ends here-----------------------\n"
- title: Appendix B.  NAPTR Example
  contents:
  - "Appendix B.  NAPTR Example\n   As an example, consider a client that wishes to\
    \ resolve aaa:ex.com.\n   The client performs a NAPTR query for that domain, and\
    \ the following\n   NAPTR records are returned:\n   ;;          order pref flags\
    \ service           regexp  replacement\n      IN NAPTR 50   50  \"s\"  \"AAA+D2S\"\
    \           \"\"\n      _diameter._sctp.example.com IN NAPTR 100  50  \"s\"  \"\
    AAA+D2T\"\n      \"\"  _aaa._tcp.example.com\n   This indicates that the server\
    \ supports SCTP, and TCP, in that order.\n   If the client supports over SCTP,\
    \ SCTP will be used, targeted to a\n   host determined by an SRV lookup of _diameter._sctp.ex.com.\
    \ That\n   lookup would return:\n   ;;          Priority Weight Port   Target\n\
    \      IN SRV  0        1      5060   server1.example.com IN SRV  0\n      2 \
    \     5060   server2.example.com\n"
- title: Appendix C.  Duplicate Detection
  contents:
  - "Appendix C.  Duplicate Detection\n   As described in Section 9.4, accounting\
    \ record duplicate detection is\n   based on session identifiers.  Duplicates\
    \ can appear for various\n   reasons:\n   -  Failover to an alternate server.\
    \  Where close to real-time\n      performance is required, failover thresholds\
    \ need to be kept low\n      and this may lead to an increased likelihood of duplicates.\n\
    \      Failover can occur at the client or within Diameter agents.\n   -  Failure\
    \ of a client or agent after sending of a record from non-\n      volatile memory,\
    \ but prior to receipt of an application layer ACK\n      and deletion of the\
    \ record. record to be sent.  This will result\n      in retransmission of the\
    \ record soon after the client or agent has\n      rebooted.\n   -  Duplicates\
    \ received from RADIUS gateways.  Since the\n      retransmission behavior of\
    \ RADIUS is not defined within [RFC2865],\n      the likelihood of duplication\
    \ will vary according to the\n      implementation.\n   -  Implementation problems\
    \ and misconfiguration.\n   The T flag is used as an indication of an application\
    \ layer\n   retransmission event, e.g., due to failover to an alternate server.\n\
    \   It is defined only for request messages sent by Diameter clients or\n   agents.\
    \  For instance, after a reboot, a client may not know whether\n   it has already\
    \ tried to send the accounting records in its non-\n   volatile memory before\
    \ the reboot occurred.  Diameter servers MAY use\n   the T flag as an aid when\
    \ processing requests and detecting duplicate\n   messages.  However, servers\
    \ that do this MUST ensure that duplicates\n   are found even when the first transmitted\
    \ request arrives at the\n   server after the retransmitted request.  It can be\
    \ used only in cases\n   where no answer has been received from the Server for\
    \ a request and\n   the request is sent again, (e.g., due to a failover to an\
    \ alternate\n   peer, due to a recovered primary peer or due to a client re-sending\
    \ a\n   stored record from non-volatile memory such as after reboot of a\n   client\
    \ or agent).\n   In some cases the Diameter accounting server can delay the duplicate\n\
    \   detection and accounting record processing until a post-processing\n   phase\
    \ takes place.  At that time records are likely to be sorted\n   according to\
    \ the included User-Name and duplicate elimination is easy\n   in this case. \
    \ In other situations it may be necessary to perform\n   real-time duplicate detection,\
    \ such as when credit limits are imposed\n   or real-time fraud detection is desired.\n\
    \   In general, only generation of duplicates due to failover or re-\n   sending\
    \ of records in non-volatile storage can be reliably detected\n   by Diameter\
    \ clients or agents.  In such cases the Diameter client or\n   agents can mark\
    \ the message as possible duplicate by setting the T\n   flag.  Since the Diameter\
    \ server is responsible for duplicate\n   detection, it can choose to make use\
    \ of the T flag or not, in order\n   to optimize duplicate detection.  Since the\
    \ T flag does not affect\n   interoperability, and may not be needed by some servers,\
    \ generation\n   of the T flag is REQUIRED for Diameter clients and agents, but\
    \ MAY be\n   implemented by Diameter servers.\n   As an example, it can be usually\
    \ be assumed that duplicates appear\n   within a time window of longest recorded\
    \ network partition or device\n   fault, perhaps a day.  So only records within\
    \ this time window need\n   to be looked at in the backward direction.  Secondly,\
    \ hashing\n   techniques or other schemes, such as the use of the T flag in the\n\
    \   received messages, may be used to eliminate the need to do a full\n   search\
    \ even in this set except for rare cases.\n   The following is an example of how\
    \ the T flag may be used by the\n   server to detect duplicate requests.\n   \
    \   A Diameter server MAY check the T flag of the received message to\n      determine\
    \ if the record is a possible duplicate.  If the T flag is\n      set in the request\
    \ message, the server searches for a duplicate\n      within a configurable duplication\
    \ time window backward and\n      forward.  This limits database searching to\
    \ those records where\n      the T flag is set.  In a well run network, network\
    \ partitions and\n      device faults will presumably be rare events, so this\
    \ approach\n      represents a substantial optimization of the duplicate detection\n\
    \      process.  During failover, it is possible for the original record\n   \
    \   to be received after the T flag marked record, due to differences\n      in\
    \ network delays experienced along the path by the original and\n      duplicate\
    \ transmissions.  The likelihood of this occurring\n      increases as the failover\
    \ interval is decreased.  In order to be\n      able to detect out of order duplicates,\
    \ the Diameter server should\n      use backward and forward time windows when\
    \ performing duplicate\n      checking for the T flag marked request.  For example,\
    \ in order to\n      allow time for the original record to exit the network and\
    \ be\n      recorded by the accounting server, the Diameter server can delay\n\
    \      processing records with the T flag set until a time period\n      TIME_WAIT\
    \ + RECORD_PROCESSING_TIME has elapsed after the closing\n      of the original\
    \ transport connection.  After this time period has\n      expired, then it may\
    \ check the T flag marked records against the\n      database with relative assurance\
    \ that the original records, if\n      sent, have been received and recorded.\n"
- title: Appendix D.  Intellectual Property Statement
  contents:
  - "Appendix D.  Intellectual Property Statement\n   The IETF takes no position regarding\
    \ the validity or scope of any\n   intellectual property or other rights that\
    \ might be claimed to\n   pertain to the implementation or use of the technology\
    \ described in\n   this document or the extent to which any license under such\
    \ rights\n   might or might not be available; neither does it represent that it\n\
    \   has made any effort to identify any such rights.  Information on the\n   IETF's\
    \ procedures with respect to rights in standards-track and\n   standards-related\
    \ documentation can be found in BCP-11.  Copies of\n   claims of rights made available\
    \ for publication and any assurances of\n   licenses to be made available, or\
    \ the result of an attempt made to\n   obtain a general license or permission\
    \ for the use of such\n   proprietary rights by implementers or users of this\
    \ specification can\n   be obtained from the IETF Secretariat.\n   The IETF invites\
    \ any interested party to bring to its attention any\n   copyrights, patents or\
    \ patent applications, or other proprietary\n   rights which may cover technology\
    \ that may be required to practice\n   this standard.  Please address the information\
    \ to the IETF Executive\n   Director.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Pat R. Calhoun\n   Airespace, Inc.\n   110 Nortech Parkway\n\
    \   San Jose, California, 95134\n   USA\n   Phone:  +1 408-635-2023\n   Fax: \
    \ +1 408-635-2020\n   EMail:  pcalhoun@airespace.com\n   John Loughney\n   Nokia\
    \ Research Center\n   Itamerenkatu 11-13\n   00180 Helsinki\n   Finland\n   Phone:\
    \  +358 50 483 6242\n   EMail:  john.Loughney@nokia.com\n   Jari Arkko\n   Ericsson\n\
    \   02420 Jorvas\n   Finland\n   Phone: +358 40 5079256\n   EMail: Jari.Arkko@ericsson.com\n\
    \   Erik Guttman\n   Sun Microsystems, Inc.\n   Eichhoelzelstr. 7\n   74915 Waibstadt\n\
    \   Germany\n   Phone:  +49 7263 911 701\n   EMail:  erik.guttman@sun.com\n  \
    \ Glen Zorn\n   Cisco Systems, Inc.\n   500 108th Avenue N.E., Suite 500\n   Bellevue,\
    \ WA 98004\n   USA\n   Phone:  +1 425 438 8218\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2003).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
