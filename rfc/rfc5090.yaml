- contents:
  - '               RADIUS Extension for Digest Authentication

    '
  title: __initial_text__
- contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of This Memo
- contents:
  - "Abstract\n   This document defines an extension to the Remote Authentication\n
    \  Dial-In User Service (RADIUS) protocol to enable support of Digest\n   Authentication,
    for use with HTTP-style protocols like the Session\n   Initiation Protocol (SIP)
    and HTTP.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n
    \     1.1. Motivation .................................................3\n      1.2.
    Terminology ................................................3\n      1.3. Overview
    ...................................................4\n   2. Detailed Description
    ............................................6\n      2.1. RADIUS Client Behavior
    .....................................6\n      2.2. RADIUS Server Behavior .....................................9\n
    \  3. New RADIUS Attributes ..........................................12\n      3.1.
    Digest-Response Attribute .................................12\n      3.2. Digest-Realm
    Attribute ....................................13\n      3.3. Digest-Nonce Attribute
    ....................................13\n      3.4. Digest-Response-Auth Attribute
    ............................14\n      3.5. Digest-Nextnonce Attribute ................................14\n
    \     3.6. Digest-Method Attribute ...................................15\n      3.7.
    Digest-URI Attribute ......................................15\n      3.8. Digest-Qop
    Attribute ......................................15\n      3.9. Digest-Algorithm
    Attribute ................................16\n      3.10. Digest-Entity-Body-Hash
    Attribute ........................16\n      3.11. Digest-CNonce Attribute ..................................17\n
    \     3.12. Digest-Nonce-Count Attribute .............................17\n      3.13.
    Digest-Username Attribute ................................17\n      3.14. Digest-Opaque
    Attribute ..................................18\n      3.15. Digest-Auth-Param
    Attribute ..............................18\n      3.16. Digest-AKA-Auts Attribute
    ................................19\n      3.17. Digest-Domain Attribute ..................................19\n
    \     3.18. Digest-Stale Attribute ...................................20\n      3.19.
    Digest-HA1 Attribute .....................................20\n      3.20. SIP-AOR
    Attribute ........................................21\n   4. Diameter Compatibility
    .........................................21\n   5. Table of Attributes ............................................21\n
    \  6. Examples .......................................................23\n   7.
    IANA Considerations ............................................27\n   8. Security
    Considerations ........................................28\n      8.1. Denial of
    Service .........................................28\n      8.2. Confidentiality
    and Data Integrity ........................28\n   9. References .....................................................29\n
    \     9.1. Normative References ......................................29\n      9.2.
    Informative References ....................................30\n   Appendix A -
    Changes from RFC 4590 ................................31\n   Acknowledgements
    ..................................................31\n"
  title: Table of Contents
- contents:
  - '1.  Introduction

    '
  - contents:
    - "1.1.  Motivation\n   The HTTP Digest Authentication mechanism, defined in [RFC2617],
      was\n   subsequently adapted for use with SIP [RFC3261].  Due to the\n   limitations
      and weaknesses of Digest Authentication (see [RFC2617],\n   Section 4), additional
      authentication and encryption mechanisms are\n   defined in SIP [RFC3261], including
      Transport Layer Security (TLS)\n   [RFC4346] and Secure MIME (S/MIME) [RFC3851].
      \ However, Digest\n   Authentication support is mandatory in SIP implementations,
      and\n   Digest Authentication is the preferred way for a SIP UA to\n   authenticate
      itself to a proxy server.  Digest Authentication is used\n   in other protocols
      as well.\n   To simplify the provisioning of users, there is a need to support\n
      \  this authentication mechanism within Authentication, Authorization,\n   and
      Accounting (AAA) protocols such as RADIUS [RFC2865] and Diameter\n   [RFC3588].\n
      \  This document defines an extension to the RADIUS protocol to enable\n   support
      of Digest Authentication for use with SIP, HTTP, and other\n   HTTP-style protocols
      using this authentication method.  Support for\n   Digest mechanisms such as
      Authentication and Key Agreement (AKA)\n   [RFC3310] is also supported.  A companion
      document [RFC4740] defines\n   support for Digest Authentication within Diameter.\n"
    title: 1.1.  Motivation
  - contents:
    - "1.2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
      \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and
      \"OPTIONAL\" in this\n   document are to be interpreted as described in [RFC2119].\n
      \  The use of normative requirement key words in this document shall\n   apply
      only to RADIUS client and RADIUS server implementations that\n   include the
      features described in this document.  This document\n   creates no normative
      requirements for existing implementations.\n   HTTP-style protocol\n      The
      term \"HTTP-style\" denotes any protocol that uses HTTP-like\n      headers
      and uses HTTP Digest Authentication as described in\n      [RFC2617].  Examples
      are HTTP and the Session Initiation Protocol\n      (SIP).\n   NAS  (Network
      Access Server)\n      The RADIUS client.\n   nonce\n      An unpredictable value
      used to prevent replay attacks.  The nonce\n      generator may use cryptographic
      mechanisms to produce nonces it\n      can recognize without maintaining state.\n
      \  protection space\n      HTTP-style protocols differ in their definition of
      the protection\n      space.  For HTTP, it is defined as the combination of
      the realm\n      and canonical root URL of the requested resource for which
      the use\n      is authorized by the RADIUS server.  In the case of SIP, the
      realm\n      string alone defines the protection space.\n   SIP UA (SIP User
      Agent)\n      An Internet endpoint that uses the Session Initiation Protocol.\n
      \  SIP UAS (SIP User Agent Server)\n      A logical entity that generates a
      response to a SIP (Session\n      Initiation Protocol) request.\n"
    title: 1.2.  Terminology
  - contents:
    - "1.3.  Overview\n   HTTP Digest is a challenge-response protocol used to authenticate
      a\n   client's request to access some resource on a server.  Figure 1 shows\n
      \  a single HTTP Digest transaction.\n                              HTTP/SIP..\n
      \              +------------+  (1)     +------------+\n               |            |--------->|
      \           |\n               | HTTP-style |  (2)     | HTTP-style |\n               |
      client     |<---------| server     |\n               |            |  (3)     |
      \           |\n               |            |--------->|            |\n               |
      \           |  (4)     |            |\n               |            |<---------|
      \           |\n               +------------+          +------------+\n               Figure
      1: Digest Operation without RADIUS\n   If the client sends a request without
      any credentials (1), the server\n   will reply with an error response (2) containing
      a nonce.  The client\n   creates a cryptographic digest from parts of the request,
      from the\n   nonce it received from the server, and from a shared secret.  The\n
      \  client retransmits the request (3) to the server, but now includes\n   the
      digest within the packet.  The server does the same digest\n   calculation as
      the client and compares the result with the digest it\n   received in (3).  If
      the digest values are identical, the server\n   grants access to the resource
      and sends a positive response to the\n   client (4).  If the digest values differ,
      the server sends a negative\n   response to the client (4).\n   Instead of maintaining
      a local user database, the server could use\n   RADIUS to access a centralized
      user database.  However, RADIUS\n   [RFC2865] does not include support for HTTP
      Digest Authentication.\n   The RADIUS client cannot use the User-Password Attribute,
      since it\n   does not receive a password from the HTTP-style client.  The CHAP-\n
      \  Challenge and CHAP-Password attributes described in [RFC1994] are\n   also
      not suitable since the Challenge Handshake Authentication\n   Protocol (CHAP)
      algorithm is not compatible with HTTP Digest.\n   This document defines new
      attributes that enable the RADIUS server to\n   perform the digest calculation
      defined in [RFC2617], providing\n   support for Digest Authentication as a native
      authentication\n   mechanism within RADIUS.\n   The nonces required by the digest
      algorithm are generated by the\n   RADIUS server.  Generating them in the RADIUS
      client would save a\n   round-trip, but introduce security and operational issues.
      \ Some\n   digest algorithms -- e.g., AKA [RFC3310] -- would not work.\n   Figure
      2 depicts a scenario in which the HTTP-style server defers\n   authentication
      to a RADIUS server.  Entities A and B communicate\n   using HTTP or SIP, while
      entities B and C communicate using RADIUS.\n                       HTTP/SIP
      \          RADIUS\n               +-----+    (1)    +-----+           +-----+\n
      \              |     |==========>|     |    (2)    |     |\n               |
      \    |           |     |---------->|     |\n               |     |           |
      \    |    (3)    |     |\n               |     |    (4)    |     |<----------|
      \    |\n               |     |<==========|     |           |     |\n               |
      \    |    (5)    |     |           |     |\n               |     |==========>|
      \    |           |     |\n               |  A  |           |  B  |    (6)    |
      \ C  |\n               |     |           |     |---------->|     |\n               |
      \    |           |     |    (7)    |     |\n               |     |           |
      \    |<----------|     |\n               |     |    (8)    |     |           |
      \    |\n               |     |<==========|     |           |     |\n               +-----+
      \          +-----+           +-----+\n                ====> HTTP/SIP\n                ---->
      RADIUS\n                     Figure 2: HTTP Digest over RADIUS\n   The entities
      have the following roles:\n   A: HTTP client / SIP UA\n   B: {HTTP server /
      HTTP proxy server / SIP proxy server / SIP UAS}\n      acting also as a RADIUS
      NAS\n   C: RADIUS server\n   The following messages are sent in this scenario:\n
      \  A sends B an HTTP/SIP request without an Authorization header (step\n   1).
      \ B sends an Access-Request packet with the newly defined Digest-\n   Method
      and Digest-URI attributes but without a Digest-Nonce Attribute\n   to the RADIUS
      server, C (step 2).  C chooses a nonce and responds\n   with an Access-Challenge
      (step 3).  This Access-Challenge contains\n   Digest attributes, from which
      B takes values to construct an HTTP/SIP\n   \"(Proxy) Authorization required\"
      response.  B sends this response to\n   A (step 4).  A resends its request with
      its credentials (step 5).  B\n   sends an Access-Request to C (step 6).  C checks
      the credentials and\n   replies with Access-Accept or Access-Reject (step 7).
      \ Depending on\n   C's result, B processes A's request or rejects it with a
      \"(Proxy)\n   Authorization required\" response (step 8).\n"
    title: 1.3.  Overview
  title: 1.  Introduction
- contents:
  - '2.  Detailed Description

    '
  - contents:
    - "2.1.  RADIUS Client Behavior\n   The attributes described in this document
      are sent in cleartext.\n   Therefore, were a RADIUS client to accept secure
      connections (HTTPS\n   or SIPS) from HTTP-style clients, this could result in
      information\n   intentionally protected by HTTP-style clients being sent in
      the clear\n   during RADIUS exchange.\n"
    - contents:
      - "2.1.1.  Credential Selection\n   On reception of an HTTP-style request message,
        the RADIUS client\n   checks whether it is authorized to authenticate the
        request.  Where\n   an HTTP-style request traverses several proxies, and each
        of the\n   proxies requests to authenticate the HTTP-style client, the request\n
        \  at the HTTP-style server may contain multiple credential sets.\n   The
        RADIUS client can use the realm directive in HTTP to determine\n   which credentials
        are applicable.  Where none of the realms are of\n   interest, the RADIUS
        client MUST behave as though no relevant\n   credentials were sent.  In all
        situations, the RADIUS client MUST\n   send zero or exactly one credential
        to the RADIUS server.  The RADIUS\n   client MUST choose the credential of
        the (Proxy-)Authorization header\n   if the realm directive matches its locally
        configured realm.\n"
      title: 2.1.1.  Credential Selection
    - contents:
      - "2.1.2.  Constructing an Access-Request\n   If a matching (Proxy-)Authorization
        header is present and contains\n   HTTP Digest information, the RADIUS client
        checks the nonce\n   parameter.\n   If the RADIUS client recognizes the nonce,
        it takes the header\n   directives and puts them into a RADIUS Access-Request
        packet.  It\n   puts the response directive into a Digest-Response Attribute
        and the\n   realm, nonce, digest-uri, qop, algorithm, cnonce, nc, username,
        and\n   opaque directives into the respective Digest-Realm, Digest-Nonce,\n
        \  Digest-URI, Digest-Qop, Digest-Algorithm, Digest-CNonce, Digest-\n   Nonce-Count,
        Digest-Username, and Digest-Opaque attributes.  The\n   RADIUS client puts
        the request method into the Digest-Method\n   Attribute.\n   Due to HTTP syntactic
        requirements, quoted strings found in HTTP\n   Digest directives may contain
        escaped quote and backslash characters.\n   When translating these directives
        into RADIUS attributes, the RADIUS\n   client only removes the leading and
        trailing quote characters which\n   surround the directive value, it does
        not unescape anything within\n   the string.  See Section 3 for an example.\n
        \  If the Quality of Protection (qop) directive's value is 'auth-int',\n   the
        RADIUS client calculates H(entity-body) as described in\n   [RFC2617], Section
        3.2.1, and puts the result in a Digest-Entity-\n   Body-Hash Attribute.\n
        \  The RADIUS client adds a Message-Authenticator Attribute, defined in\n
        \  [RFC3579], and sends the Access-Request packet to the RADIUS server.\n
        \  The RADIUS server processes the packet and responds with an Access-\n   Accept
        or an Access-Reject.\n"
      title: 2.1.2.  Constructing an Access-Request
    - contents:
      - "2.1.3.  Constructing an Authentication-Info Header\n   After having received
        an Access-Accept from the RADIUS server, the\n   RADIUS client constructs
        an Authentication-Info header:\n   o  If the Access-Accept packet contains
        a Digest-Response-Auth\n      Attribute, the RADIUS client checks the Digest-Qop
        Attribute:\n      *  If the Digest-Qop Attribute's value is 'auth' or not
        specified,\n         the RADIUS client puts the Digest-Response-Auth Attribute's\n
        \        content into the Authentication-Info header's rspauth directive\n
        \        of the HTTP-style response.\n      *  If the Digest-Qop Attribute's
        value is 'auth-int', the RADIUS\n         client ignores the Access-Accept
        packet and behaves as if it\n         had received an Access-Reject packet
        (Digest-Response-Auth\n         can't be correct as the RADIUS server does
        not know the\n         contents of the HTTP-style response's body).\n   o
        \ If the Access-Accept packet contains a Digest-HA1 Attribute, the\n      RADIUS
        client checks the qop and algorithm directives in the\n      Authorization
        header of the HTTP-style request it wants to\n      authorize:\n      *  If
        the qop directive is missing or its value is 'auth', the\n         RADIUS
        client ignores the Digest-HA1 Attribute.  It does not\n         include an
        Authentication-Info header in its HTTP-style\n         response.\n      *
        \ If the qop directive's value is 'auth-int' and at least one of\n         the
        following conditions is true, the RADIUS client calculates\n         the contents
        of the HTTP-style response's rspauth directive:\n         +  The algorithm
        directive's value is 'MD5-sess' or 'AKAv1-\n            MD5-sess'.\n         +
        \ IP Security (IPsec) is configured to protect traffic between\n            the
        RADIUS client and RADIUS server with IPsec (see Section\n            8).\n
        \        The RADIUS client creates the HTTP-style response message and\n         calculates
        the hash of this message's body.  It uses the result\n         and the Digest-URI
        Attribute's value of the corresponding\n         Access-Request packet to
        perform the H(A2) calculation.  It\n         takes the Digest-Nonce, Digest-Nonce-Count,
        Digest-CNonce, and\n         Digest-Qop values of the corresponding Access-Request
        and the\n         Digest-HA1 Attribute's value to finish the computation of
        the\n         rspauth value.\n   o  If the Access-Accept packet contains neither
        a Digest-Response-\n      Auth nor a Digest-HA1 Attribute, the RADIUS client
        will not create\n      an Authentication-Info header for its HTTP-style response.\n
        \  When the RADIUS server provides a Digest-Nextnonce Attribute in the\n   Access-Accept
        packet, the RADIUS client puts the contents of this\n   attribute into a nextnonce
        directive.  Now it can send an HTTP-style\n   response.\n"
      title: 2.1.3.  Constructing an Authentication-Info Header
    - contents:
      - "2.1.4.  Failed Authentication\n   If the RADIUS client did receive an HTTP-style
        request without a\n   (Proxy-)Authorization header matching its locally configured
        realm\n   value, it obtains a new nonce and sends an error response (401 or\n
        \  407) containing a (Proxy-)Authenticate header.\n   If the RADIUS client
        receives an Access-Challenge packet in response\n   to an Access-Request containing
        a Digest-Nonce Attribute, the RADIUS\n   server did not accept the nonce.
        \ If a Digest-Stale Attribute is\n   present in the Access-Challenge and has
        a value of 'true' (without\n   surrounding quotes), the RADIUS client sends
        an error response (401\n   or 407) containing a WWW-/Proxy-Authenticate header
        with the stale\n   directive set to 'true' and the digest directives derived
        from the\n   Digest-* attributes.\n   If the RADIUS client receives an Access-Reject
        from the RADIUS\n   server, it sends an error response to the HTTP-style request
        it has\n   received.  If the RADIUS client does not receive a response, it\n
        \  retransmits or fails over to another RADIUS server as described in\n   [RFC2865].\n"
      title: 2.1.4.  Failed Authentication
    - contents:
      - "2.1.5.  Obtaining Nonces\n   The RADIUS client has two ways to obtain nonces:
        it has received one\n   in a Digest-Nextnonce Attribute of a previously received
        Access-\n   Accept packet, or it asks the RADIUS server for one.  To do the\n
        \  latter, it sends an Access-Request containing a Digest-Method and a\n   Digest-URI
        Attribute, but without a Digest-Nonce Attribute.  It adds\n   a Message-Authenticator
        (see [RFC3579]) Attribute to the Access-\n   Request packet.  The RADIUS server
        chooses a nonce and responds with\n   an Access-Challenge containing a Digest-Nonce
        Attribute.\n   The RADIUS client constructs a (Proxy-)Authenticate header
        using the\n   received Digest-Nonce and Digest-Realm attributes to fill the
        nonce\n   and realm directives.  The RADIUS server can send Digest-Qop,\n
        \  Digest-Algorithm, Digest-Domain, and Digest-Opaque attributes in the\n
        \  Access-Challenge carrying the nonce.  If these attributes are\n   present,
        the client MUST use them.\n"
      title: 2.1.5.  Obtaining Nonces
    title: 2.1.  RADIUS Client Behavior
  - contents:
    - "2.2.  RADIUS Server Behavior\n   If the RADIUS server receives an Access-Request
      packet with a\n   Digest-Method and a Digest-URI Attribute but without a Digest-Nonce\n
      \  Attribute, it chooses a nonce.  It puts the nonce into a Digest-Nonce\n   Attribute
      and sends it in an Access-Challenge packet to the RADIUS\n   client.  The RADIUS
      server MUST add Digest-Realm, Message-\n   Authenticator (see [RFC3579]), SHOULD
      add Digest-Algorithm and one or\n   more Digest-Qop, and MAY add Digest-Domain
      or Digest-Opaque\n   attributes to the Access-Challenge packet.\n"
    - contents:
      - "2.2.1.  General Attribute Checks\n   If the RADIUS server receives an Access-Request
        packet containing a\n   Digest-Response Attribute, it looks for the following
        attributes:\n   Digest-Realm, Digest-Nonce, Digest-Method, Digest-URI, Digest-Qop,\n
        \  Digest-Algorithm, and Digest-Username.  Depending on the content of\n   Digest-Algorithm
        and Digest-Qop, it looks for Digest-Entity-Body-\n   Hash, Digest-CNonce,
        and Digest-AKA-Auts, too.  See [RFC2617] and\n   [RFC3310] for details.  If
        the Digest-Algorithm Attribute is missing,\n   'MD5' is assumed.  If the RADIUS
        server has issued a Digest-Opaque\n   Attribute along with the nonce, the
        Access-Request MUST have a\n   matching Digest-Opaque Attribute.\n   If mandatory
        attributes are missing, it MUST respond with an Access-\n   Reject packet.\n
        \  The RADIUS server removes '\\' characters that escape quote and '\\'\n
        \  characters from the text values it has received in the Digest-*\n   attributes.\n
        \  If the mandatory attributes are present, the RADIUS server MUST check\n
        \  if the RADIUS client is authorized to serve users of the realm\n   mentioned
        in the Digest-Realm Attribute.  If the RADIUS client is not\n   authorized,
        the RADIUS server MUST send an Access-Reject.  The RADIUS\n   server SHOULD
        log the event so as to notify the operator, and MAY\n   take additional action
        such as sending an Access-Reject in response\n   to all future requests from
        this client, until this behavior is reset\n   by management action.\n   The
        RADIUS server determines the age of the nonce in the Digest-Nonce\n   by using
        an embedded timestamp or by looking it up in a local table.\n   The RADIUS
        server MUST check the integrity of the nonce if it embeds\n   the timestamp
        in the nonce.  Section 2.2.2 describes how the server\n   handles old nonces.\n"
      title: 2.2.1.  General Attribute Checks
    - contents:
      - "2.2.2.  Authentication\n   If the Access-Request message passes the checks
        described above, the\n   RADIUS server calculates the digest response as described
        in\n   [RFC2617].  To look up the password, the RADIUS server uses the\n   RADIUS
        User-Name Attribute.  The RADIUS server MUST check if the user\n   identified
        by the User-Name Attribute:\n   o  is authorized to access the protection
        space and\n   o  is authorized to use the URI included in the SIP-AOR Attribute,
        if\n      this attribute is present.\n   If any of those checks fails, the
        RADIUS server MUST send an Access-\n   Reject.\n   Correlation between User-Name
        and SIP-AOR AVP values is required just\n   to avoid any user from registering
        or misusing a SIP-AOR that has\n   been allocated to a different user.\n   All
        values required for the digest calculation are taken from the\n   Digest attributes
        described in this document.  If the calculated\n   digest response equals
        the value received in the Digest-Response\n   Attribute, the authentication
        was successful.\n   If the response values match, but the RADIUS server considers
        the\n   nonce in the Digest-Nonce Attribute too old, it sends an Access-\n
        \  Challenge packet containing a new nonce and a Digest-Stale Attribute\n
        \  with a value of 'true' (without surrounding quotes).\n   If the response
        values don't match, the RADIUS server responds with\n   an Access-Reject.\n"
      title: 2.2.2.  Authentication
    - contents:
      - "2.2.3.  Constructing the Reply\n   If the authentication was successful,
        the RADIUS server adds an\n   attribute to the Access-Accept packet that can
        be used by the RADIUS\n   client to construct an Authentication-Info header:\n
        \  o  If the Digest-Qop Attribute's value is 'auth' or unspecified, the\n
        \     RADIUS server SHOULD put a Digest-Response-Auth Attribute into the\n
        \     Access-Accept packet.\n   o  If the Digest-Qop Attribute's value is
        'auth-int' and at least one\n      of the following conditions is true, the
        RADIUS server SHOULD put\n      a Digest-HA1 Attribute into the Access-Accept
        packet:\n      *  The Digest-Algorithm Attribute's value is 'MD5-sess' or\n
        \        'AKAv1-MD5-sess'.\n      *  IPsec is configured to protect traffic
        between the RADIUS\n         client and RADIUS server with IPsec (see Section
        8).\n   In all other cases, Digest-Response-Auth or Digest-HA1 MUST NOT be\n
        \  sent.\n   RADIUS servers MAY construct a Digest-Nextnonce Attribute and
        add it\n   to the Access-Accept packet.  This is useful to limit the lifetime
        of\n   a nonce and to save a round-trip in future requests (see nextnonce\n
        \  discussion in [RFC2617], Section 3.2.3).  The RADIUS server adds a\n   Message-Authenticator
        Attribute (see [RFC3579]) and sends the\n   Access-Accept packet to the RADIUS
        client.\n   If the RADIUS server does not accept the nonce received in an\n
        \  Access-Request packet but authentication was successful, the RADIUS\n   server
        MUST send an Access-Challenge packet containing a Digest-Stale\n   Attribute
        set to 'true' (without surrounding quotes).  The RADIUS\n   server MUST add
        Message-Authenticator (see [RFC3579]), Digest-Nonce,\n   Digest-Realm, SHOULD
        add Digest-Algorithm and one or more Digest-\n   Qops, and MAY add Digest-Domain
        or Digest-Opaque attributes to the\n   Access-Challenge packet.\n"
      title: 2.2.3.  Constructing the Reply
    title: 2.2.  RADIUS Server Behavior
  title: 2.  Detailed Description
- contents:
  - "3.  New RADIUS Attributes\n   If not stated otherwise, the attributes have the
    following format:\n   0                   1                   2\n   0 1 2 3 4
    5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |     Type      |  Length       | Text ...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  Quote and backslash characters in Digest-* attributes representing\n   HTTP-style
    directives with a quoted-string syntax are escaped.  The\n   surrounding quotes
    are removed.  They are syntactical delimiters that\n   are redundant in RADIUS.
    \ For example, the directive\n   realm=\"the \\\"example\\\" value\"\n   is represented
    as follows:\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |
    Digest-Realm  |       23      | the \\\"example\\\" value |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
  - contents:
    - "3.1.  Digest-Response Attribute\n   Description\n         If this attribute
      is present in an Access-Request message, a\n         RADIUS server implementing
      this specification MUST treat the\n         Access-Request as a request for
      Digest Authentication.  When a\n         RADIUS client receives a (Proxy-)Authorization
      header, it puts\n         the request-digest value into a Digest-Response Attribute.\n
      \        This attribute (which enables the user to prove possession of\n         the
      password) MUST only be used in Access-Request packets.\n   Type\n         103
      for Digest-Response.\n   Length\n         >= 3\n   Text\n         When using
      HTTP Digest, the text field is 32 octets long and\n         contains a hexadecimal
      representation of a 16-octet digest\n         value as it was calculated by
      the authenticated client.  Other\n         digest algorithms MAY define different
      digest lengths.  The\n         text field MUST be copied from request-digest
      of digest-\n         response [RFC2617] without surrounding quotes.\n"
    title: 3.1.  Digest-Response Attribute
  - contents:
    - "3.2.  Digest-Realm Attribute\n   Description\n         This attribute describes
      a protection space component of the\n         RADIUS server.  HTTP-style protocols
      differ in their definition\n         of the protection space.  See [RFC2617],
      Section 1.2, for\n         details.  It MUST only be used in Access-Request,
      Access-\n         Challenge, and Accounting-Request packets.\n   Type\n         104
      for Digest-Realm\n   Length\n         >= 3\n   Text\n         In Access-Requests,
      the RADIUS client takes the value of the\n         realm directive (realm-value
      according to [RFC2617]) without\n         surrounding quotes from the HTTP-style
      request it wants to\n         authenticate.  In Access-Challenge packets, the
      RADIUS server\n         puts the expected realm value into this attribute.\n"
    title: 3.2.  Digest-Realm Attribute
  - contents:
    - "3.3.  Digest-Nonce Attribute\n   Description\n         This attribute holds
      a nonce to be used in the HTTP Digest\n         calculation.  If the Access-Request
      had a Digest-Method and a\n         Digest-URI but no Digest-Nonce Attribute,
      the RADIUS server\n         MUST put a Digest-Nonce Attribute into its Access-Challenge\n
      \        packet.  This attribute MUST only be used in Access-Request and\n         Access-Challenge
      packets.\n   Type\n         105 for Digest-Nonce\n   Length\n         >= 3\n
      \  Text\n         In Access-Requests, the RADIUS client takes the value of the\n
      \        nonce directive (nonce-value in [RFC2617]) without surrounding\n         quotes
      from the HTTP-style request it wants to authenticate.\n         In Access-Challenge
      packets, the attribute contains the nonce\n         selected by the RADIUS server.\n"
    title: 3.3.  Digest-Nonce Attribute
  - contents:
    - "3.4.  Digest-Response-Auth Attribute\n   Description\n         This attribute
      enables the RADIUS server to prove possession of\n         the password.  If
      the previously received Digest-Qop Attribute\n         was 'auth-int' (without
      surrounding quotes), the RADIUS server\n         MUST send a Digest-HA1 Attribute
      instead of a Digest-Response-\n         Auth Attribute.  The Digest-Response-Auth
      Attribute MUST only\n         be used in Access-Accept packets.  The RADIUS
      client puts the\n         attribute value without surrounding quotes into the
      rspauth\n         directive of the Authentication-Info header.\n   Type\n         106
      for Digest-Response-Auth.\n   Length\n         >= 3\n   Text\n         The RADIUS
      server calculates a digest according to Section\n         3.2.3 of [RFC2617]
      and copies the result into this attribute.\n         Digest algorithms other
      than the one defined in [RFC2617] MAY\n         define digest lengths other
      than 32.\n"
    title: 3.4.  Digest-Response-Auth Attribute
  - contents:
    - "3.5.  Digest-Nextnonce Attribute\n   This attribute holds a nonce to be used
      in the HTTP Digest\n   calculation.\n   Description\n         The RADIUS server
      MAY put a Digest-Nextnonce Attribute into an\n         Access-Accept packet.
      \ If this attribute is present, the RADIUS\n         client MUST put the contents
      of this attribute into the\n         nextnonce directive of an Authentication-Info
      header in its\n         HTTP-style response.  This attribute MUST only be used
      in\n         Access-Accept packets.\n   Type\n         107 for Digest-Nextnonce\n
      \  Length\n         >= 3\n   Text\n         It is recommended that this text
      be base64 or hexadecimal data.\n"
    title: 3.5.  Digest-Nextnonce Attribute
  - contents:
    - "3.6.  Digest-Method Attribute\n   Description\n         This attribute holds
      the method value to be used in the HTTP\n         Digest calculation.  This
      attribute MUST only be used in\n         Access-Request and Accounting-Request
      packets.\n   Type\n         108 for Digest-Method\n   Length\n         >= 3\n
      \  Text\n         In Access-Requests, the RADIUS client takes the value of the\n
      \        request method from the HTTP-style request it wants to\n         authenticate.\n"
    title: 3.6.  Digest-Method Attribute
  - contents:
    - "3.7.  Digest-URI Attribute\n   Description\n         This attribute is used
      to transport the contents of the\n         digest-uri directive or the URI of
      the HTTP-style request.  It\n         MUST only be used in Access-Request and
      Accounting-Request\n         packets.\n   Type\n         109 for Digest-URI\n
      \  Length\n         >= 3\n   Text\n         If the HTTP-style request has an
      Authorization header, the\n         RADIUS client puts the value of the uri
      directive found in the\n         HTTP-style request Authorization header (known
      as \"digest-uri-\n         value\" in Section 3.2.2 of [RFC2617]) without surrounding\n
      \        quotes into this attribute.  If there is no Authorization\n         header,
      the RADIUS client takes the value of the request URI\n         from the HTTP-style
      request it wants to authenticate.\n"
    title: 3.7.  Digest-URI Attribute
  - contents:
    - "3.8.  Digest-Qop Attribute\n   Description\n         This attribute holds the
      Quality of Protection parameter that\n         influences the HTTP Digest calculation.
      \ This attribute MUST\n         only be used in Access-Request, Access-Challenge,
      and\n         Accounting-Request packets.  A RADIUS client SHOULD insert one\n
      \        of the Digest-Qop attributes it has received in a previous\n         Access-Challenge
      packet.  RADIUS servers SHOULD insert at least\n         one Digest-Qop Attribute
      in an Access-Challenge packet.\n         Digest-Qop is optional in order to
      preserve backward\n         compatibility with a minimal implementation of [RFC2069].\n
      \  Type\n         110 for Digest-Qop\n   Length\n         >= 3\n   Text\n         In
      Access-Requests, the RADIUS client takes the value of the\n         qop directive
      (qop-value as described in [RFC2617]) from the\n         HTTP-style request
      it wants to authenticate.  In Access-\n         Challenge packets, the RADIUS
      server puts a desired qop-value\n         into this attribute.  If the RADIUS
      server supports more than\n         one \"quality of protection\" value, it
      puts each qop-value into\n         a separate Digest-Qop Attribute.\n"
    title: 3.8.  Digest-Qop Attribute
  - contents:
    - "3.9.  Digest-Algorithm Attribute\n   Description\n         This attribute holds
      the algorithm parameter that influences\n         the HTTP Digest calculation.
      \ It MUST only be used in Access-\n         Request, Access-Challenge and Accounting-Request
      packets.  If\n         this attribute is missing, MD5 is assumed.\n   Type\n
      \        111 for Digest-Algorithm\n   Length\n         >= 3\n   Text\n         In
      Access-Requests, the RADIUS client takes the value of the\n         algorithm
      directive (as described in [RFC2617], Section 3.2.1)\n         from the HTTP-style
      request it wants to authenticate.  In\n         Access-Challenge packets, the
      RADIUS server SHOULD put the\n         desired algorithm into this attribute.\n"
    title: 3.9.  Digest-Algorithm Attribute
  - contents:
    - "3.10.  Digest-Entity-Body-Hash Attribute\n   Description\n         When using
      the qop-value 'auth-int', a hash of the HTTP-style\n         message body's
      contents is required for digest calculation.\n         Instead of sending the
      complete body of the message, only its\n         hash value is sent.  This hash
      value can be used directly in\n         the digest calculation.\n         The
      clarifications described in section 22.4 of [RFC3261] about\n         the hash
      of empty entity bodies apply to the Digest-Entity-\n         Body-Hash Attribute.
      \ This attribute MUST only be sent in\n         Access-Request packets.\n   Type\n
      \        112 for Digest-Entity-Body-Hash\n   Length\n         >= 3\n   Text\n
      \        The attribute holds the hexadecimal representation of\n         H(entity-body).
      \ This hash is required by certain\n         authentication mechanisms, such
      as HTTP Digest with quality of\n         protection set to 'auth-int'.  RADIUS
      clients MUST use this\n         attribute to transport the hash of the entity
      body when HTTP\n         Digest is the authentication mechanism and the RADIUS
      server\n         requires that the integrity of the entity body (e.g., qop\n
      \        parameter set to 'auth-int') be verified.  Extensions to this\n         document
      may define support for authentication mechanisms other\n         than HTTP Digest.\n"
    title: 3.10.  Digest-Entity-Body-Hash Attribute
  - contents:
    - "3.11.  Digest-CNonce Attribute\n   Description\n         This attribute holds
      the client nonce parameter that is used in\n         the HTTP Digest calculation.
      \ It MUST only be used in Access-\n         Request packets.\n   Type\n         113
      for Digest-CNonce\n   Length\n         >= 3\n   Text\n         This attribute
      includes the value of the cnonce-value [RFC2617]\n         without surrounding
      quotes, taken from the HTTP-style request.\n"
    title: 3.11.  Digest-CNonce Attribute
  - contents:
    - "3.12.  Digest-Nonce-Count Attribute\n   Description\n         This attribute
      includes the nonce count parameter that is used\n         to detect replay attacks.
      \ The attribute MUST only be used in\n         Access-Request packets.\n   Type\n
      \        114 for Digest-Nonce-Count\n   Length\n         10\n   Text\n         In
      Access-Requests, the RADIUS client takes the value of the nc\n         directive
      (nc-value according to [RFC2617]) without surrounding\n         quotes from
      the HTTP-style request it wants to authenticate.\n"
    title: 3.12.  Digest-Nonce-Count Attribute
  - contents:
    - "3.13.  Digest-Username Attribute\n   Description\n         This attribute holds
      the user name used in the HTTP Digest\n         calculation.  The RADIUS server
      MUST use this attribute only\n         for the purposes of calculating the digest.
      \ In order to\n         determine the appropriate user credentials, the RADIUS
      server\n         MUST use the User-Name (1) Attribute, and MUST NOT use the\n
      \        Digest-Username Attribute.  This attribute MUST only be used in\n         Access-Request
      and Accounting-Request packets.\n   Type\n         115 for Digest-Username\n
      \  Length\n         >= 3\n   Text\n         In Access-Requests, the RADIUS client
      takes the value of the\n         username directive (username-value according
      to [RFC2617])\n         without surrounding quotes from the HTTP-style request
      it wants\n         to authenticate.\n"
    title: 3.13.  Digest-Username Attribute
  - contents:
    - "3.14.  Digest-Opaque Attribute\n   Description\n         This attribute holds
      the opaque parameter that is passed to the\n         HTTP-style client.  The
      HTTP-style client will pass this value\n         back to the server (i.e., the
      RADIUS client) without\n         modification.  This attribute MUST only be
      used in Access-\n         Request and Access-Challenge packets.\n   Type\n         116
      for Digest-Opaque\n   Length\n         >= 3\n   Text\n         In Access-Requests,
      the RADIUS client takes the value of the\n         opaque directive (opaque-value
      according to [RFC2617]) without\n         surrounding quotes from the HTTP-style
      request it wants to\n         authenticate and puts it into this attribute.
      \ In Access-\n         Challenge packets, the RADIUS server MAY include this\n
      \        attribute.\n"
    title: 3.14.  Digest-Opaque Attribute
  - contents:
    - "3.15.  Digest-Auth-Param Attribute\n   Description\n         This attribute
      is a placeholder for future extensions and\n         corresponds to the auth-param
      parameter defined in Section\n         3.2.1 of [RFC2617].  The Digest-Auth-Param
      is the mechanism\n         whereby the RADIUS client and RADIUS server can exchange
      auth-\n         param extension parameters contained within Digest headers that\n
      \        are not understood by the RADIUS client and for which there are\n         no
      corresponding stand-alone attributes.\n         Unlike the previously listed
      Digest-* attributes, the Digest-\n         Auth-Param contains not only the
      value but also the parameter\n         name, since the parameter name is unknown
      to the RADIUS client.\n         If the Digest header contains several unknown
      parameters, then\n         the RADIUS implementation MUST repeat this attribute,
      and each\n         instance MUST contain one different unknown Digest\n         parameter/value
      combination.  This attribute MUST ONLY be used\n         in Access-Request,
      Access-Challenge, Access-Accept, and\n         Accounting-Request packets.\n
      \  Type\n         117 for Digest-Auth-Param\n   Length\n         >= 3\n   Text\n
      \        The text consists of the whole parameter, including its name,\n         the
      equal sign ('='), and quotes.\n"
    title: 3.15.  Digest-Auth-Param Attribute
  - contents:
    - "3.16.  Digest-AKA-Auts Attribute\n   Description\n         This attribute holds
      the auts parameter that is used in the\n         Digest AKA [RFC3310] calculation.
      \ It is only used if the\n         algorithm of the digest-response denotes
      a version of AKA\n         Digest [RFC3310].  This attribute MUST only be used
      in Access-\n         Request packets.\n   Type\n         118 for Digest-AKA-Auts\n
      \  Length\n         >= 3\n   Text\n         In Access-Requests, the RADIUS client
      takes the value of the\n         auts directive (auts-param according to Section
      3.4 of\n         [RFC3310]) without surrounding quotes from the HTTP-style\n
      \        request it wants to authenticate.\n"
    title: 3.16.  Digest-AKA-Auts Attribute
  - contents:
    - "3.17.  Digest-Domain Attribute\n   Description\n         When a RADIUS client
      has asked for a nonce, the RADIUS server\n         MAY send one or more Digest-Domain
      attributes in its Access-\n         Challenge packet.  The RADIUS client puts
      them into the quoted,\n         space-separated list of URIs of the domain directive
      of a WWW-\n         Authenticate header.  Together with Digest-Realm, the URIs
      in\n         the list define the protection space (see [RFC2617], Section\n
      \        3.2.1) for some HTTP-style protocols.  This attribute MUST only\n         be
      used in Access-Challenge and Accounting-Request packets.\n   Type\n         119
      for Digest-Domain\n   Length\n         3\n   Text\n         This attribute consists
      of a single URI that defines a\n         protection space component.\n"
    title: 3.17.  Digest-Domain Attribute
  - contents:
    - "3.18.  Digest-Stale Attribute\n   Description\n         This attribute is sent
      by a RADIUS server in order to notify\n         the RADIUS client whether it
      has accepted a nonce.  If the\n         nonce presented by the RADIUS client
      was stale, the value is\n         'true' and is 'false' otherwise.  The RADIUS
      client puts the\n         content of this attribute into a stale directive of
      the WWW-\n         Authenticate header in the HTTP-style response to the request\n
      \        it wants to authenticate.  The attribute MUST only be used in\n         Access-Challenge
      packets.\n   Type\n         120 for Digest-Stale\n   Length\n         3\n   Text\n
      \        The attribute has either the value 'true' or 'false' (both\n         values
      without surrounding quotes).\n"
    title: 3.18.  Digest-Stale Attribute
  - contents:
    - "3.19.  Digest-HA1 Attribute\n   Description\n         This attribute is used
      to allow the generation of an\n         Authentication-Info header, even if
      the HTTP-style response's\n         body is required for the calculation of
      the rspauth value.  It\n         SHOULD be used in Access-Accept packets if
      the required quality\n         of protection (qop) is 'auth-int'.\n         This
      attribute MUST NOT be sent if the qop parameter was not\n         specified
      or has a value of 'auth' (in this case, use Digest-\n         Response-Auth
      instead).\n         The Digest-HA1 Attribute MUST only be sent by the RADIUS
      server\n         or processed by the RADIUS client if at least one of the\n
      \        following conditions is true:\n         +  The Digest-Algorithm Attribute's
      value is 'MD5-sess' or\n            'AKAv1-MD5-sess'.\n         +  IPsec is
      configured to protect traffic between the RADIUS\n            client and RADIUS
      server with IPsec (see Section 8).\n         This attribute MUST only be used
      in Access-Accept packets.\n   Type\n         121 for Digest-HA1\n   Length\n
      \        >= 3\n   Text\n         This attribute contains the hexadecimal representation
      of H(A1)\n         as described in [RFC2617], Sections 3.1.3, 3.2.1, and 3.2.2.2.\n"
    title: 3.19.  Digest-HA1 Attribute
  - contents:
    - "3.20.  SIP-AOR Attribute\n   Description\n         This attribute is used for
      the authorization of SIP messages.\n         The SIP-AOR Attribute identifies
      the URI, the use of which must\n         be authenticated and authorized.  The
      RADIUS server uses this\n         attribute to authorize the processing of the
      SIP request.  The\n         SIP-AOR can be derived from, for example, the To
      header field\n         in a SIP REGISTER request (user under registration),
      or the\n         From header field in other SIP requests.  However, the exact\n
      \        mapping of this attribute to SIP can change due to new\n         developments
      in the protocol.  This attribute MUST only be used\n         when the RADIUS
      client wants to authorize SIP users and MUST\n         only be used in Access-Request
      packets.\n   Type\n         122 for SIP-AOR\n   Length\n         >= 3\n   Text\n
      \        The syntax of this attribute corresponds either to a SIP URI\n         (with
      the format defined in [RFC3261] or a tel URI (with the\n         format defined
      in [RFC3966]).\n         The SIP-AOR Attribute holds the complete URI, including\n
      \        parameters and other parts.  It is up to the RADIUS server as\n         to
      which components of the URI are regarded in the\n         authorization decision.\n"
    title: 3.20.  SIP-AOR Attribute
  title: 3.  New RADIUS Attributes
- contents:
  - "4.  Diameter Compatibility\n   This document defines support for Digest Authentication
    in RADIUS.  A\n   companion document \"Diameter Session Initiation Protocol (SIP)\n
    \  Application\" [RFC4740] defines support for Digest Authentication in\n   Diameter,
    and addresses compatibility issues between RADIUS and\n   Diameter.\n"
  title: 4.  Diameter Compatibility
- contents:
  - "5.  Table of Attributes\n   The following table provides a guide to which attributes
    may be found\n   in which kinds of packets, and in what quantity.\n Access- Access-
    Access- Access-    Acct-\n Request Accept  Reject  Challenge  Req   #  Attribute\n
    \ 0-1      0      0      0          0-1   1  User-Name\n  0-1      0      0      1
    \         0    24  State [4]\n  1        1      1      1          0-1  80  Message-Authenticator\n
    \ 0-1      0      0      0          0   103  Digest-Response\n  0-1      0      0
    \     1          0-1 104  Digest-Realm\n  0-1      0      0      1          0
    \  105  Digest-Nonce\n  0        0-1    0      0          0   106  Digest-Response-Auth
    [1][2]\n  0        0-1    0      0          0   107  Digest-Nextnonce\n  1        0
    \     0      0          0-1 108  Digest-Method\n  0-1      0      0      0          0-1
    109  Digest-URI\n  0-1      0      0      0+         0-1 110  Digest-Qop\n  0-1
    \     0      0      0-1        0-1 111  Digest-Algorithm [3]\n  0-1      0      0
    \     0          0   112  Digest-Entity-Body-Hash\n  0-1      0      0      0
    \         0   113  Digest-CNonce\n  0-1      0      0      0          0   114
    \ Digest-Nonce-Count\n  0-1      0      0      0          0-1 115  Digest-Username\n
    \ 0-1      0      0      0-1        0   116  Digest-Opaque\n  0+       0+     0
    \     0+         0+  117  Digest-Auth-Param\n  0-1      0      0      0          0
    \  118  Digest-AKA-Auts\n  0        0      0      0+         0+  119  Digest-Domain\n
    \ 0        0      0      0-1        0   120  Digest-Stale\n  0        0-1    0
    \     0          0   121  Digest-HA1 [1][2]\n  0-1      0      0      0          0
    \  122  SIP-AOR\n   The following table defines the meaning of the above table
    entries.\n      0     This attribute MUST NOT be present in the packet.\n      0+
    \   Zero or more instances of this attribute MAY be\n            present in the
    packet.\n      0-1   Zero or one instance of this attribute MAY be\n            present
    in the packet.\n   [Note 1] Digest-HA1 MUST be used instead of Digest-Response-Auth
    if\n            Digest-Qop is 'auth-int'.\n   [Note 2] Digest-Response-Auth MUST
    be used instead of Digest-HA1 if\n            Digest-Qop is 'auth'.\n   [Note
    3] If Digest-Algorithm is missing, 'MD5' is assumed.\n   [Note 4] An Access-Challenge
    MUST contain a State attribute, which is\n            copied to the subsequent
    Access-Request.  A server receiving\n            an Access-Request that contains
    a State attribute MUST\n            respond with either an Access-Accept or an
    Access-Reject;\n            the server MUST NOT respond with an Access-Challenge.\n"
  title: 5.  Table of Attributes
- contents:
  - "6.  Examples\n   This is an example selected from the traffic between a softphone
    (A),\n   a Proxy Server (B), and an example.com RADIUS server (C).  The\n   communication
    between the Proxy Server and a SIP Public Switched\n   Telephone Network (PSTN)
    gateway is omitted for brevity.  The SIP\n   messages are not shown completely.\n
    \  The password of user '12345678' is 'secret'.  The shared secret\n   between
    the RADIUS client and server is 'secret'.  To ease testing,\n   only the last
    byte of the RADIUS authenticator changes between\n   requests.  In a real implementation,
    this would be a serious flaw.\n   A->B\n      INVITE sip:97226491335@example.com
    SIP/2.0\n      From: <sip:12345678@example.com>\n      To: <sip:97226491335@example.com>\n
    \  B->A\n      SIP/2.0 100 Trying\n   B->C\n      Code = Access-Request (1)\n
    \     Packet identifier = 0x7c (124)\n      Length = 97\n      Authenticator =
    F5E55840E324AA49D216D9DBD069807C\n      NAS-IP-Address = 192.0.2.38\n      NAS-Port
    = 5\n      User-Name = 12345678\n      Digest-Method = INVITE\n      Digest-URI
    = sip:97226491335@example.com\n      Message-Authenticator = 7600D5B0BDC33987A60D5C6167B28B3B\n
    \  C->B\n      Code = Access-challenge (11)\n      Packet identifier = 0x7c (124)\n
    \     Length = 72\n      Authenticator = EBE20199C26EFEAD69BF8AB0E786CA4D\n      Digest-Nonce
    = 3bada1a0\n      Digest-Realm = example.com\n      Digest-Qop = auth\n      Digest-Algorithm
    = MD5\n      Message-Authenticator = 5DA18ED3BBC9513DCBDE0A37F51B7DE3\n   B->A\n
    \     SIP/2.0 407 Proxy Authentication Required\n      Proxy-Authenticate: Digest
    realm=\"example.com\"\n           ,nonce=\"3bada1a0\",qop=auth,algorithm=MD5\n
    \     Content-Length: 0\n   A->B\n      ACK sip:97226491335@example.com SIP/2.0\n
    \  A->B\n      INVITE sip:97226491335@example.com SIP/2.0\n      Proxy-Authorization:
    Digest nonce=\"3bada1a0\"\n           ,realm=\"example.com\"\n           ,response=\"756933f735fcd93f90a4bbdd5467f263\"\n
    \          ,uri=\"sip:97226491335@example.com\",username=\"12345678\"\n           ,qop=auth,algorithm=MD5\n
    \          ,cnonce=\"56593a80,nc=\"00000001\"\n      From: <sip:12345678@example.com>\n
    \     To: <sip:97226491335@example.com>\n   B->C\n      Code = Access-Request
    (1)\n      Packet identifier = 0x7d (125)\n      Length = 221\n      Authenticator
    = F5E55840E324AA49D216D9DBD069807D\n      NAS-IP-Address = 192.0.2.38\n      NAS-Port
    = 5\n      User-Name = 12345678\n      Digest-Method = INVITE\n      Digest-URI
    = sip:97226491335@example.com\n      Digest-Realm = example.com\n      Digest-Qop
    = auth\n      Digest-Algorithm = MD5\n      Digest-CNonce = 56593a80\n      Digest-Nonce
    = 3bada1a0\n      Digest-Nonce-Count = 00000001\n      Digest-Response = 756933f735fcd93f90a4bbdd5467f263\n
    \     Digest-Username = 12345678\n      SIP-AOR = sip:12345678@example.com\n      Message-Authenticator
    = B6C7F7F8D11EF261A26933D234561A60\n   C->B\n      Code = Access-Accept (2)\n
    \     Packet identifier = 0x7d (125)\n      Length = 72\n      Authenticator =
    FFDD74D6470D21CB6FC4D6056BE245D2\n      Digest-Response-Auth = f847de948d12285f8f4199e366f1af21\n
    \     Message-Authenticator = 7B76E2F10A7067AF601938BF13B0A62E\n   B->A\n      SIP/2.0
    180 Ringing\n   B->A\n      SIP/2.0 200 OK\n   A->B\n      ACK sip:97226491335@example.com
    SIP/2.0\n   A second example shows the traffic between a web browser (A), a web\n
    \  server (B), and a RADIUS server (C).\n   A->B\n      GET /index.html HTTP/1.1\n
    \  B->C\n      Code = Access-Request (1)\n      Packet identifier = 0x7e (126)\n
    \     Length = 68\n      Authenticator = F5E55840E324AA49D216D9DBD069807E\n      NAS-IP-Address
    = 192.0.2.38\n      NAS-Port = 5\n      Digest-Method = GET\n      Digest-URI
    = /index.html\n      Message-Authenticator = 690BFC95E88DF3B185F15CD78E469992\n
    \  C->B\n      Code = Access-challenge (11)\n      Packet identifier = 0x7e (126)\n
    \     Length = 72\n      Authenticator = 2EE5EB01C02C773B6C6EC8515F565E8E\n      Digest-Nonce
    = a3086ac8\n      Digest-Realm = example.com\n      Digest-Qop = auth\n      Digest-Algorithm
    = MD5\n      Message-Authenticator = 646DB2B0AF9E72FFF2CF7FEB33C4952A\n   B->A\n
    \     HTTP/1.1 401 Authentication Required\n      WWW-Authenticate: Digest realm=\"example.com\",\n
    \         nonce=\"a3086ac8\",qop=auth,algorithm=MD5\n      Content-Length: 0\n
    \  A->B\n      GET /index.html HTTP/1.1\n      Authorization: Digest = algorithm=MD5,qop=auth,nonce=\"a3086ac8\"\n
    \          ,nc=\"00000001\",cnonce=\"56593a80\"\n           ,realm=\"example.com\"\n
    \          ,response=\"a4fac45c27a30f4f244c54a2e99fa117\"\n           ,uri=\"/index.html\",username=\"12345678\"\n
    \  B->C\n      Code = Access-Request (1)\n      Packet identifier = 0x7f (127)\n
    \     Length = 176\n      Authenticator = F5E55840E324AA49D216D9DBD069807F\n      NAS-IP-Address
    = 192.0.2.38\n      NAS-Port = 5\n      User-Name = 12345678\n      Digest-Method
    = GET\n      Digest-URI = /index.html\n      Digest-Realm = example.com\n      Digest-Qop
    = auth\n      Digest-Algorithm = MD5\n      Digest-CNonce = 56593a80\n      Digest-Nonce
    = a3086ac8\n      Digest-Nonce-Count = 00000001\n      Digest-Response = a4fac45c27a30f4f244c54a2e99fa117\n
    \     Digest-Username = 12345678\n      Message-Authenticator = 237D85C1478C70C67EEAF22A9C456821\n
    \  C->B\n      Code = Access-Accept (2)\n      Packet identifier = 0x7f (127)\n
    \     Length = 72\n      Authenticator = 6364FA6ED66012847C05A0895607C694\n      Digest-Response-Auth
    = 08c4e942d1d0a191de8b3aa98cd35147\n      Message-Authenticator = 43795A3166492AD2A890AD57D5F97D56\n
    \  B->A\n      HTTP/1.1 200 OK\n      ...\n      <html>\n      ...\n"
  title: 6.  Examples
- contents:
  - "7.  IANA Considerations\n   The following values from the RADIUS Attribute Types
    number space\n   were assigned in [RFC4590].  This document requests that the
    values\n   in the table below be entered within the existing registry.\n   Attribute
    \              #\n   ---------------        ----\n   Digest-Response         103\n
    \  Digest-Realm            104\n   Digest-Nonce            105\n   Digest-Response-Auth
    \   106\n   Digest-Nextnonce        107\n   Digest-Method           108\n   Digest-URI
    \             109\n   Digest-Qop              110\n   Digest-Algorithm        111\n
    \  Digest-Entity-Body-Hash 112\n   Digest-CNonce           113\n   Digest-Nonce-Count
    \     114\n   Digest-Username         115\n   Digest-Opaque           116\n   Digest-Auth-Param
    \      117\n   Digest-AKA-Auts         118\n   Digest-Domain           119\n   Digest-Stale
    \           120\n   Digest-HA1              121\n   SIP-AOR                 122\n"
  title: 7.  IANA Considerations
- contents:
  - "8.  Security Considerations\n   The RADIUS extensions described in this document
    enable RADIUS to\n   transport the data that is required to perform a digest calculation.\n
    \  As a result, RADIUS inherits the vulnerabilities of HTTP Digest (see\n   [RFC2617],
    Section 4) in addition to RADIUS security vulnerabilities\n   described in [RFC2865],
    Section 8, and [RFC3579], Section 4.\n   An attacker compromising a RADIUS client
    or proxy can carry out man-\n   in-the-middle attacks even if the paths between
    A, B and B, C (Figure\n   2) have been secured with TLS or IPsec.\n   The RADIUS
    server MUST check the Digest-Realm Attribute it has\n   received from a client.
    \ If the RADIUS client is not authorized to\n   serve HTTP-style clients of that
    realm, it might be compromised.\n"
  - contents:
    - "8.1.  Denial of Service\n   RADIUS clients implementing the extension described
      in this document\n   may authenticate HTTP-style requests received over the
      Internet.  As\n   compared with the use of RADIUS to authenticate link-layer
      network\n   access, attackers may find it easier to cover their tracks in such
      a\n   scenario.\n   An attacker can attempt a denial-of-service attack on one
      or more\n   RADIUS servers by sending a large number of HTTP-style requests.
      \ To\n   make simple denial-of-service attacks more difficult, the RADIUS\n
      \  server MUST check whether it has generated the nonce received from an\n   HTTP-style
      client.  This SHOULD be done statelessly.  For example, a\n   nonce could consist
      of a cryptographically random part and some kind\n   of signature provided by
      the RADIUS client, as described in\n   [RFC2617], Section 3.2.1.\n"
    title: 8.1.  Denial of Service
  - contents:
    - "8.2.  Confidentiality and Data Integrity\n   The attributes described in this
      document are sent in cleartext.\n   RADIUS servers SHOULD include Digest-Qop
      and Digest-Algorithm\n   attributes in Access-Challenge messages.  A man in
      the middle can\n   modify or remove those attributes in a bidding down attack,
      causing\n   the RADIUS client to use a weaker authentication scheme than\n   intended.\n
      \  The Message-Authenticator Attribute, described in [RFC3579], Section\n   3.2
      MUST be included in Access-Request, Access-Challenge, Access-\n   Reject, and
      Access-Accept messages that contain attributes described\n   in this specification.\n
      \  The Digest-HA1 Attribute contains no random components if the\n   algorithm
      is 'MD5' or 'AKAv1-MD5'.  This makes offline dictionary\n   attacks easier and
      enables replay attacks.\n   Some parameter combinations require the protection
      of RADIUS packets\n   against eavesdropping and tampering.  Implementations
      SHOULD try to\n   determine automatically whether IPsec is configured to protect\n
      \  traffic between the RADIUS client and the RADIUS server.  If this is\n   not
      possible, the implementation checks a configuration parameter\n   telling it
      whether IPsec will protect RADIUS traffic.  The default\n   value of this configuration
      parameter tells the implementation that\n   RADIUS packets will not be protected.\n
      \  HTTP-style clients can use TLS with server-side certificates together\n   with
      HTTP-Digest Authentication.  Instead of TLS, IPsec can be used,\n   too.  TLS
      or IPsec secure the connection while Digest Authentication\n   authenticates
      the user.  The RADIUS transaction can be regarded as\n   one leg on the path
      between the HTTP-style client and the HTTP-style\n   server.  To prevent RADIUS
      from representing the weak link, a RADIUS\n   client receiving an HTTP-style
      request via TLS or IPsec could use an\n   equally secure connection to the RADIUS
      server.  There are several\n   ways to achieve this, for example:\n   o  The
      RADIUS client may reject HTTP-style requests received over TLS\n      or IPsec.\n
      \  o  The RADIUS client may require that traffic be sent and received\n      over
      IPsec.\n   RADIUS over IPsec, if used, MUST conform to the requirements\n   described
      in [RFC3579], Section 4.2.\n"
    title: 8.2.  Confidentiality and Data Integrity
  title: 8.  Security Considerations
- contents:
  - '9.  References

    '
  - contents:
    - "9.1.  Normative References\n   [RFC2119] Bradner, S., \"Key words for use in
      RFCs to Indicate\n             Requirement Levels\", BCP 14, RFC 2119, March
      1997.\n   [RFC2617] Franks, J., Hallam-Baker, P., Hostetler, J., Lawrence, S.,\n
      \            Leach, P., Luotonen, A., and L. Stewart, \"HTTP\n             Authentication:
      Basic and Digest Access Authentication\",\n             RFC 2617, June 1999.\n
      \  [RFC2865] Rigney, C., Willens, S., Rubens, A., and W. Simpson,\n             \"Remote
      Authentication Dial In User Service (RADIUS)\", RFC\n             2865, June
      2000.\n   [RFC3261] Rosenberg, J., Schulzrinne, H., Camarillo, G., Johnston,\n
      \            A., Peterson, J., Sparks, R., Handley, M., and E. Schooler,\n             \"SIP:
      Session Initiation Protocol\", RFC 3261, June 2002.\n   [RFC3579] Aboba, B.
      and P. Calhoun, \"RADIUS (Remote Authentication\n             Dial In User Service)
      Support For Extensible Authentication\n             Protocol (EAP)\", RFC 3579,
      September 2003.\n   [RFC3966] Schulzrinne, H., \"The tel URI for Telephone Numbers\",
      RFC\n             3966, December 2004.\n"
    title: 9.1.  Normative References
  - contents:
    - "9.2.  Informative References\n   [RFC1994] Simpson, W., \"PPP Challenge Handshake
      Authentication\n             Protocol (CHAP)\", RFC 1994, August 1996.\n   [RFC2069]
      Franks, J., Hallam-Baker, P., Hostetler, J., Leach, P.,\n             Luotonen,
      A., Sink, E., and L. Stewart, \"An Extension to\n             HTTP : Digest
      Access Authentication\", RFC 2069, January\n             1997.\n   [RFC3310]
      Niemi, A., Arkko, J., and V. Torvinen, \"Hypertext Transfer\n             Protocol
      (HTTP) Digest Authentication Using Authentication\n             and Key Agreement
      (AKA)\", RFC 3310, September 2002.\n   [RFC3588] Calhoun, P., Loughney, J.,
      Guttman, E., Zorn, G., and J.\n             Arkko, \"Diameter Base Protocol\",
      RFC 3588, September 2003.\n   [RFC3851] Ramsdell, B., Ed., \"Secure/Multipurpose
      Internet Mail\n             Extensions (S/MIME) Version 3.1 Message Specification\",
      RFC\n             3851, July 2004.\n   [RFC4346] Dierks, T. and E. Rescorla,
      \"The Transport Layer Security\n             (TLS) Protocol Version 1.1\", RFC
      4346, April 2006.\n   [RFC4590] Sterman, B., Sadolevsky, D., Schwartz, D., Williams,
      D.,\n             and W. Beck, \"RADIUS Extension for Digest Authentication\",\n
      \            RFC 4590, July 2006.\n   [RFC4740] Garcia-Martin, M., Ed., Belinchon,
      M., Pallares-Lopez, M.,\n             Canales-Valenzuela, C., and K. Tammi,
      \"Diameter Session\n             Initiation Protocol (SIP) Application\", RFC
      4740, November\n             2006.\n"
    title: 9.2.  Informative References
  title: 9.  References
- contents:
  - "Appendix A - Changes from RFC 4590\n   This Appendix lists the major changes
    between [RFC4590] and this\n   document.  Minor changes, including style, grammar,
    spelling, and\n   editorial changes are not mentioned here.\n   o  The Table of
    Attributes (Section 5) now indicates that the\n      Digest-Method Attribute is
    required within an Access-Request.\n      Also, an entry has been added for the
    State attribute.  The table\n      also includes entries for Accounting-Request
    messages.  As noted\n      in the examples, the User-Name Attribute is not necessary
    when\n      requesting a nonce.\n   o  Two errors in attribute assignment have
    been corrected within the\n      IANA Considerations (Section 7).  Digest-Response-Auth
    is assigned\n      attribute 106, and Digest-Nextnonce is assigned attribute 107.\n
    \  o Several errors in the examples section have been corrected.\n"
  title: Appendix A - Changes from RFC 4590
- contents:
  - "Acknowledgments\n   The authors would like to thank Mike McCauley for his help
    in working\n   through the details of the examples.\n   We would like to acknowledge
    Kevin McDermott (Cisco Systems) for\n   providing comments and experimental implementation.\n
    \  Many thanks to all reviewers, especially to Miguel Garcia, Jari\n   Arkko,
    Avi Lior, and Jun Wang.\n"
  title: Acknowledgments
- contents:
  - "Authors' Addresses\n   Baruch Sterman\n   Kayote Networks\n   P.O. Box 1373\n
    \  Efrat  90435\n   Israel\n   EMail: baruch@kayote.com\n   Daniel Sadolevsky\n
    \  SecureOL, Inc.\n   Jerusalem Technology Park\n   P.O. Box 16120\n   Jerusalem
    \ 91160\n   Israel\n   EMail: dscreat@dscreat.com\n   David Schwartz\n   Kayote
    Networks\n   P.O. Box 1373\n   Efrat  90435\n   Israel\n   EMail: david@kayote.com\n
    \  David Williams\n   Cisco Systems\n   7025 Kit Creek Road\n   P.O. Box 14987\n
    \  Research Triangle Park  NC 27709\n   USA\n   EMail: dwilli@cisco.com\n   Wolfgang
    Beck\n   Deutsche Telekom AG\n   Deutsche Telekom Allee 7\n   Darmstadt  64295\n
    \  Germany\n   EMail: beckw@t-systems.com\n"
  title: Authors' Addresses
- contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2008).\n   This document
    is subject to the rights, licenses and restrictions\n   contained in BCP 78, and
    except as set forth therein, the authors\n   retain all their rights.\n   This
    document and the information contained herein are provided on an\n   \"AS IS\"
    basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n   OR IS SPONSORED
    BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE INTERNET ENGINEERING
    TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED, INCLUDING BUT NOT
    LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION HEREIN WILL NOT INFRINGE
    ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR
    PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or
    scope of any\n   Intellectual Property Rights or other rights that might be claimed
    to\n   pertain to the implementation or use of the technology described in\n   this
    document or the extent to which any license under such rights\n   might or might
    not be available; nor does it represent that it has\n   made any independent effort
    to identify any such rights.  Information\n   on the procedures with respect to
    rights in RFC documents can be\n   found in BCP 78 and BCP 79.\n   Copies of IPR
    disclosures made to the IETF Secretariat and any\n   assurances of licenses to
    be made available, or the result of an\n   attempt made to obtain a general license
    or permission for the use of\n   such proprietary rights by implementers or users
    of this\n   specification can be obtained from the IETF on-line IPR repository
    at\n   http://www.ietf.org/ipr.\n   The IETF invites any interested party to bring
    to its attention any\n   copyrights, patents or patent applications, or other
    proprietary\n   rights that may cover technology that may be required to implement\n
    \  this standard.  Please address the information to the IETF at\n   ietf-ipr@ietf.org.\n"
  title: Intellectual Property
