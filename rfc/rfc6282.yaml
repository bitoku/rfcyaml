- title: __initial_text__
  contents:
  - "                 Compression Format for IPv6 Datagrams\n                   over\
    \ IEEE 802.15.4-Based Networks\n"
- title: Abstract
  contents:
  - "Abstract\n   This document updates RFC 4944, \"Transmission of IPv6 Packets over\n\
    \   IEEE 802.15.4 Networks\".  This document specifies an IPv6 header\n   compression\
    \ format for IPv6 packet delivery in Low Power Wireless\n   Personal Area Networks\
    \ (6LoWPANs).  The compression format relies on\n   shared context to allow compression\
    \ of arbitrary prefixes.  How the\n   information is maintained in that shared\
    \ context is out of scope.\n   This document specifies compression of multicast\
    \ addresses and a\n   framework for compressing next headers.  UDP header compression\
    \ is\n   specified within this framework.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6282.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2011 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \      1.1. Requirements Language ......................................4\n  \
    \ 2. Specific Updates to RFC 4944 ....................................4\n   3.\
    \ IPv6 Header Compression .........................................5\n      3.1.\
    \ LOWPAN_IPHC Encoding Format ................................6\n           3.1.1.\
    \ Base Format .........................................6\n           3.1.2. Context\
    \ Identifier Extension .......................10\n      3.2. IPv6 Header Encoding\
    \ ......................................11\n           3.2.1. Traffic Class and\
    \ Flow Label Compression ...........11\n           3.2.2. Deriving IIDs from the\
    \ Encapsulating Header ........12\n           3.2.3. Stateless Multicast Address\
    \ Compression ............13\n           3.2.4. Stateful Multicast Address Compression\
    \ .............14\n   4. IPv6 Next Header Compression ...................................15\n\
    \      4.1. LOWPAN_NHC Format .........................................15\n  \
    \    4.2. IPv6 Extension Header Compression .........................15\n    \
    \  4.3. UDP Header Compression ....................................17\n      \
    \     4.3.1. Compressing UDP Ports ..............................17\n        \
    \   4.3.2. Compressing UDP Checksum ...........................18\n          \
    \ 4.3.3. UDP LOWPAN_NHC Format ..............................20\n   5. IANA Considerations\
    \ ............................................20\n   6. Security Considerations\
    \ ........................................21\n   7. Acknowledgements ...............................................22\n\
    \   8. References .....................................................22\n  \
    \    8.1. Normative References ......................................22\n    \
    \  8.2. Informative References ....................................23\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The [IEEE802.15.4] standard specifies an MTU of 127 bytes,\
    \ yielding\n   about 80 octets of actual Media Access Control (MAC) payload with\n\
    \   security enabled, on a wireless link with a link throughput of 250\n   kbps\
    \ or less.  The 6LoWPAN adaptation format [RFC4944] was specified\n   to carry\
    \ IPv6 datagrams over such constrained links, taking into\n   account limited\
    \ bandwidth, memory, or energy resources that are\n   expected in applications\
    \ such as wireless sensor networks.  [RFC4944]\n   defines a Mesh Addressing header\
    \ to support sub-IP forwarding, a\n   Fragmentation header to support the IPv6\
    \ minimum MTU requirement\n   [RFC2460], and stateless header compression for\
    \ IPv6 datagrams\n   (LOWPAN_HC1 and LOWPAN_HC2) to reduce the relatively large\
    \ IPv6 and\n   UDP headers down to (in the best case) several bytes.\n   LOWPAN_HC1\
    \ and LOWPAN_HC2 are insufficient for most practical uses of\n   IPv6 in 6LoWPANs.\
    \  LOWPAN_HC1 is most effective for link-local\n   unicast communication, where\
    \ IPv6 addresses carry the link-local\n   prefix and an Interface Identifier (IID)\
    \ directly derived from IEEE\n   802.15.4 addresses.  In this case, both addresses\
    \ may be completely\n   elided.  However, though link-local addresses are commonly\
    \ used for\n   local protocol interactions such as IPv6 Neighbor Discovery\n \
    \  [RFC4861], DHCPv6 [RFC3315], or routing protocols, they are usually\n   not\
    \ used for application-layer data traffic, so the actual value of\n   this compression\
    \ mechanism is limited.\n   Routable addresses must be used when communicating\
    \ with devices\n   external to the 6LoWPAN or in a route-over configuration where\
    \ IP\n   forwarding occurs within the 6LoWPAN.  For routable addresses,\n   LOWPAN_HC1\
    \ requires both IPv6 source and destination addresses to\n   carry the prefix\
    \ in-line.  In cases where the Mesh Addressing header\n   is not used, the IID\
    \ of a routable address must be carried in-line.\n   However, LOWPAN_HC1 requires\
    \ 64 bits for the IID when carried in-line\n   and cannot be shortened even when\
    \ it is derived from the IEEE\n   802.15.4 16-bit short address.  When the destination\
    \ is an IPv6\n   multicast address, LOWPAN_HC1 requires the full 128-bit address\
    \ to be\n   carried in-line.\n   As a result, this document defines an encoding\
    \ format, LOWPAN_IPHC,\n   for effective compression of Unique Local, Global,\
    \ and multicast IPv6\n   Addresses based on shared state within contexts.  In\
    \ addition, this\n   document also introduces a number of additional improvements\
    \ over the\n   header compression format defined in [RFC4944].\n   LOWPAN_IPHC\
    \ allows for compression of some commonly used IPv6 Hop\n   Limit values.  If\
    \ the 6LoWPAN is a mesh-under stub, a Hop Limit of 1\n   for inbound and a default\
    \ value such as 64 for outbound are usually\n   enough for application-layer data\
    \ traffic.  Additionally, a Hop Limit\n   value of 255 is often used to verify\
    \ that a communication occurs over\n   a single-hop.  This specification enables\
    \ compression of the IPv6 Hop\n   Limit field in those common cases, whereas LOWPAN_HC1\
    \ does not.\n   This document also defines LOWPAN_NHC, an encoding format for\n\
    \   arbitrary next headers.  LOWPAN_IPHC indicates whether the following\n   header\
    \ is encoded using LOWPAN_NHC.  If so, the bits immediately\n   following the\
    \ compressed IPv6 header start the LOWPAN_NHC encoding.\n   In contrast, LOWPAN_HC1\
    \ could be extended to support compression of\n   next headers using LOWPAN_HC2,\
    \ but only for UDP, TCP, and ICMPv6.\n   Furthermore, the LOWPAN_HC2 octet sits\
    \ between the LOWPAN_HC1 octet\n   and uncompressed IPv6 header fields.  This\
    \ specification moves the\n   next header encoding bits to follow all IPv6-related\
    \ bits, allowing\n   for a properly layered structure and direct support for IPv6\n\
    \   extension headers.\n   Using LOWPAN_NHC, this document defines a compression\
    \ mechanism for\n   UDP.  While [RFC4944] defines a compression mechanism for\
    \ UDP, that\n   mechanism does not enable checksum compression when rendered possible\n\
    \   by additional upper-layer mechanisms such as upper-layer Message\n   Integrity\
    \ Check (MIC).  This specification adds the capability to\n   elide the UDP checksum\
    \ over the 6LoWPAN, which enables saving of a\n   further two octets.\n   Also,\
    \ using LOWPAN_NHC, this document defines encoding formats for\n   IPv6-in-IPv6\
    \ encapsulation as well as IPv6 Extension Headers.  With\n   LOWPAN_HC1 and LOWPAN_HC2,\
    \ chains of next headers cannot be encoded\n   efficiently.\n"
- title: 1.1.  Requirements Language
  contents:
  - "1.1.  Requirements Language\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in RFC 2119 [RFC2119].\n"
- title: 2.  Specific Updates to RFC 4944
  contents:
  - "2.  Specific Updates to RFC 4944\n   This document specifies a header compression\
    \ format that is intended\n   to replace that defined in Section 10 of [RFC4944].\
    \  Implementation\n   of Section 10 of [RFC4944] is now NOT RECOMMENDED.  New\n\
    \   implementations MAY implement decompression according to Section 10\n   of\
    \ [RFC4944] but SHOULD NOT send packets compressed according to\n   Section 10\
    \ of [RFC4944].\n   A compliant implementation of [RFC4944] as updated by this\
    \ document\n   MUST be able to properly process a packet received that makes use\
    \ of\n   the provisions of this document.  A compliant implementation MAY\n  \
    \ implement additional LOWPAN_NHC types (Section 4) that may be\n   registered\
    \ (Section 5) in the future.  It is out of scope of this\n   document how a compressor\
    \ learns that a decompressor has additional\n   capabilities.\n   Section 5.3\
    \ of [RFC4944] also defines how to fragment compressed IPv6\n   datagrams that\
    \ do not fit within a single link frame.  Section 5.3 of\n   [RFC4944] defines\
    \ the fragment header's datagram_size and\n   datagram_offset values as the size\
    \ and offset of the IPv6 datagram\n   before compression.  As a result, all fragment\
    \ payload outside the\n   first fragment must carry their respective portions\
    \ of the IPv6\n   datagram before compression.  This document does not change\
    \ that\n   requirement.  When using the fragmentation mechanism described in\n\
    \   Section 5.3 of [RFC4944], any header that cannot fit within the first\n  \
    \ fragment MUST NOT be compressed.\n   The header compression format defined in\
    \ this document preempts the\n   ESC dispatch value defined in Section 5.1 of\
    \ [RFC4944].  Instead, the\n   value of 01 000000 is reserved as a replacement\
    \ value for ESC, to be\n   finally assigned with the first assignment of extension\
    \ bytes.\n"
- title: 3.  IPv6 Header Compression
  contents:
  - "3.  IPv6 Header Compression\n   In this section, we define the LOWPAN_IPHC encoding\
    \ format for\n   compressing the IPv6 header.  To enable effective compression,\n\
    \   LOWPAN_IPHC relies on information pertaining to the entire 6LoWPAN.\n   LOWPAN_IPHC\
    \ assumes the following will be the common case for 6LoWPAN\n   communication:\
    \ Version is 6; Traffic Class and Flow Label are both\n   zero; Payload Length\
    \ can be inferred from lower layers from either\n   the 6LoWPAN Fragmentation\
    \ header or the IEEE 802.15.4 header; Hop\n   Limit will be set to a well-known\
    \ value by the source; addresses\n   assigned to 6LoWPAN interfaces will be formed\
    \ using the link-local\n   prefix or a small set of routable prefixes assigned\
    \ to the entire\n   6LoWPAN; addresses assigned to 6LoWPAN interfaces are formed\
    \ with an\n   IID derived directly from either the 64-bit extended or the 16-bit\n\
    \   short IEEE 802.15.4 addresses.\n    +-------------------------------------+----------------------------\n\
    \    | Dispatch + LOWPAN_IPHC (2-3 octets) | In-line IPv6 Header Fields\n    +-------------------------------------+----------------------------\n\
    \                       Figure 1: LOWPAN_IPHC Header\n   The LOWPAN_IPHC encoding\
    \ utilizes 13 bits, 5 of which are taken from\n   the rightmost bits of the dispatch\
    \ type.  The encoding may be\n   extended by another octet to support additional\
    \ contexts.  Any\n   information from the uncompressed IPv6 header fields carried\
    \ in-line\n   follow the LOWPAN_IPHC encoding, as shown in Figure 1.  In the best\n\
    \   case, the LOWPAN_IPHC can compress the IPv6 header down to two octets\n  \
    \ (the dispatch octet and the LOWPAN_IPHC encoding) with link-local\n   communication.\n\
    \   When routing over multiple IP hops, LOWPAN_IPHC can compress the IPv6\n  \
    \ header down to 7 octets (1-octet dispatch, 1-octet LOWPAN_IPHC,\n   1-octet\
    \ Hop Limit, 2-octet Source Address, and 2-octet Destination\n   Address).  The\
    \ Hop Limit may not be compressed because it needs to\n   decremented at each\
    \ hop and may take any value.  Stateful address\n   compression must be applied\
    \ to the source and destination IPv6\n   addresses because they do not statelessly\
    \ match the source and\n   destination link-layer addresses on intermediate hops.\n"
- title: 3.1.  LOWPAN_IPHC Encoding Format
  contents:
  - "3.1.  LOWPAN_IPHC Encoding Format\n   This section specifies the format of the\
    \ LOWPAN_IPHC encoding that\n   describes how an IPv6 header is compressed.  The\
    \ encoding can be 2\n   octets long for the base encoding or 3 octets long when\
    \ an additional\n   context encoding is present.  The IPv6 header fields that\
    \ are not\n   fully elided are placed immediately after the LOWPAN_IPHC, either\
    \ in\n   a compressed form if the field is partially elided or literally.\n"
- title: 3.1.1.  Base Format
  contents:
  - "3.1.1.  Base Format\n       0                                       1\n     \
    \  0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5\n     +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n\
    \     | 0 | 1 | 1 |  TF   |NH | HLIM  |CID|SAC|  SAM  | M |DAC|  DAM  |\n    \
    \ +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n        \
    \            Figure 2: LOWPAN_IPHC base Encoding\n   TF: Traffic Class, Flow Label:\
    \  As specified in [RFC3168], the 8-bit\n      IPv6 Traffic Class field is split\
    \ into two fields: 2-bit Explicit\n      Congestion Notification (ECN) and 6-bit\
    \ Differentiated Services\n      Code Point (DSCP).\n      00:  ECN + DSCP + 4-bit\
    \ Pad + Flow Label (4 bytes)\n      01:  ECN + 2-bit Pad + Flow Label (3 bytes),\
    \ DSCP is elided.\n      10:  ECN + DSCP (1 byte), Flow Label is elided.\n   \
    \   11:  Traffic Class and Flow Label are elided.\n   NH: Next Header:\n     \
    \ 0: Full 8 bits for Next Header are carried in-line.\n      1: The Next Header\
    \ field is compressed and the next header is\n         encoded using LOWPAN_NHC,\
    \ which is discussed in Section 4.1.\n   HLIM: Hop Limit:\n      00:  The Hop\
    \ Limit field is carried in-line.\n      01:  The Hop Limit field is compressed\
    \ and the hop limit is 1.\n      10:  The Hop Limit field is compressed and the\
    \ hop limit is 64.\n      11:  The Hop Limit field is compressed and the hop limit\
    \ is 255.\n   CID: Context Identifier Extension:\n      0: No additional 8-bit\
    \ Context Identifier Extension is used.  If\n         context-based compression\
    \ is specified in either Source Address\n         Compression (SAC) or Destination\
    \ Address Compression (DAC),\n         context 0 is used.\n      1: An additional\
    \ 8-bit Context Identifier Extension field\n         immediately follows the Destination\
    \ Address Mode (DAM) field.\n   SAC: Source Address Compression\n      0: Source\
    \ address compression uses stateless compression.\n      1: Source address compression\
    \ uses stateful, context-based\n         compression.\n   SAM: Source Address\
    \ Mode:\n      If SAC=0:\n         00:  128 bits.  The full address is carried\
    \ in-line.\n         01:  64 bits.  The first 64-bits of the address are elided.\n\
    \            The value of those bits is the link-local prefix padded with\n  \
    \          zeros.  The remaining 64 bits are carried in-line.\n         10:  16\
    \ bits.  The first 112 bits of the address are elided.\n            The value\
    \ of the first 64 bits is the link-local prefix\n            padded with zeros.\
    \  The following 64 bits are 0000:00ff:\n            fe00:XXXX, where XXXX are\
    \ the 16 bits carried in-line.\n         11:  0 bits.  The address is fully elided.\
    \  The first 64 bits\n            of the address are the link-local prefix padded\
    \ with zeros.\n            The remaining 64 bits are computed from the encapsulating\n\
    \            header (e.g., 802.15.4 or IPv6 source address) as specified\n   \
    \         in Section 3.2.2.\n      If SAC=1:\n         00:  The UNSPECIFIED address,\
    \ ::\n         01:  64 bits.  The address is derived using context information\n\
    \            and the 64 bits carried in-line.  Bits covered by context\n     \
    \       information are always used.  Any IID bits not covered by\n          \
    \  context information are taken directly from the\n            corresponding\
    \ bits carried in-line.  Any remaining bits are\n            zero.\n         10:\
    \  16 bits.  The address is derived using context information\n            and\
    \ the 16 bits carried in-line.  Bits covered by context\n            information\
    \ are always used.  Any IID bits not covered by\n            context information\
    \ are taken directly from their\n            corresponding bits in the 16-bit\
    \ to IID mapping given by\n            0000:00ff:fe00:XXXX, where XXXX are the\
    \ 16 bits carried in-\n            line.  Any remaining bits are zero.\n     \
    \    11:  0 bits.  The address is fully elided and is derived using\n        \
    \    context information and the encapsulating header (e.g.,\n            802.15.4\
    \ or IPv6 source address).  Bits covered by context\n            information are\
    \ always used.  Any IID bits not covered by\n            context information are\
    \ computed from the encapsulating\n            header as specified in Section\
    \ 3.2.2.  Any remaining bits\n            are zero.\n   M: Multicast Compression\n\
    \      0: Destination address is not a multicast address.\n      1: Destination\
    \ address is a multicast address.\n   DAC: Destination Address Compression\n \
    \     0: Destination address compression uses stateless compression.\n      1:\
    \ Destination address compression uses stateful, context-based\n         compression.\n\
    \   DAM: Destination Address Mode:\n      If M=0 and DAC=0  This case matches\
    \ SAC=0 but for the destination\n         address:\n         00:  128 bits.  The\
    \ full address is carried in-line.\n         01:  64 bits.  The first 64-bits\
    \ of the address are elided.\n            The value of those bits is the link-local\
    \ prefix padded with\n            zeros.  The remaining 64 bits are carried in-line.\n\
    \         10:  16 bits.  The first 112 bits of the address are elided.\n     \
    \       The value of the first 64 bits is the link-local prefix\n            padded\
    \ with zeros.  The following 64 bits are 0000:00ff:\n            fe00:XXXX, where\
    \ XXXX are the 16 bits carried in-line.\n         11:  0 bits.  The address is\
    \ fully elided.  The first 64 bits\n            of the address are the link-local\
    \ prefix padded with zeros.\n            The remaining 64 bits are computed from\
    \ the encapsulating\n            header (e.g., 802.15.4 or IPv6 destination address)\
    \ as\n            specified in Section 3.2.2.\n      If M=0 and DAC=1:\n     \
    \    00:  Reserved.\n         01:  64 bits.  The address is derived using context\
    \ information\n            and the 64 bits carried in-line.  Bits covered by context\n\
    \            information are always used.  Any IID bits not covered by\n     \
    \       context information are taken directly from the\n            corresponding\
    \ bits carried in-line.  Any remaining bits are\n            zero.\n         10:\
    \  16 bits.  The address is derived using context information\n            and\
    \ the 16 bits carried in-line.  Bits covered by context\n            information\
    \ are always used.  Any IID bits not covered by\n            context information\
    \ are taken directly from their\n            corresponding bits in the 16-bit\
    \ to IID mapping given by\n            0000:00ff:fe00:XXXX, where XXXX are the\
    \ 16 bits carried in-\n            line.  Any remaining bits are zero.\n     \
    \    11:  0 bits.  The address is fully elided and is derived using\n        \
    \    context information and the encapsulating header (e.g.\n            802.15.4\
    \ or IPv6 destination address).  Bits covered by\n            context information\
    \ are always used.  Any IID bits not\n            covered by context information\
    \ are computed from the\n            encapsulating header as specified in Section\
    \ 3.2.2.  Any\n            remaining bits are zero.\n      If M=1 and DAC=0:\n\
    \         00:  128 bits.  The full address is carried in-line.\n         01: \
    \ 48 bits.  The address takes the form ffXX::00XX:XXXX:XXXX.\n         10:  32\
    \ bits.  The address takes the form ffXX::00XX:XXXX.\n         11:  8 bits.  The\
    \ address takes the form ff02::00XX.\n      If M=1 and DAC=1:\n         00:  48\
    \ bits.  This format is designed to match Unicast-Prefix-\n            based IPv6\
    \ Multicast Addresses as defined in [RFC3306] and\n            [RFC3956].  The\
    \ multicast address takes the form ffXX:XXLL:\n            PPPP:PPPP:PPPP:PPPP:XXXX:XXXX.\
    \ where the X are the nibbles\n            that are carried in-line, in the order\
    \ in which they appear\n            in this format.  P denotes nibbles used to\
    \ encode the prefix\n            itself.  L denotes nibbles used to encode the\
    \ prefix length.\n            The prefix information P and L is taken from the\
    \ specified\n            context.\n         01:  reserved\n         10:  reserved\n\
    \         11:  reserved\n"
- title: 3.1.2.  Context Identifier Extension
  contents:
  - "3.1.2.  Context Identifier Extension\n   This specification expects that a conceptual\
    \ context is shared\n   between the node that compresses a packet and the node(s)\
    \ that needs\n   to expand it.  How the contexts are shared and maintained is\
    \ out of\n   scope.  What information is contained within a context information\
    \ is\n   out of scope.  Actions in response to unknown and/or invalid contexts\n\
    \   are out of scope.  The specification enables a node to use up to 16\n   contexts.\
    \  The context used to encode the source address does not\n   have to be the same\
    \ as the context used to encode the destination\n   address.\n   If the CID field\
    \ is set to '1' in the LOWPAN_IPHC encoding, then an\n   additional octet extends\
    \ the LOWPAN_IPHC encoding following the DAM\n   bits but before the IPv6 header\
    \ fields that are carried in-line.  The\n   additional octet identifies the pair\
    \ of contexts to be used when the\n   IPv6 source and/or destination address is\
    \ compressed.  The context\n   identifier is 4 bits for each address, supporting\
    \ up to 16 contexts.\n   Context 0 is the default context.  The encoding is shown\
    \ in Figure 3.\n                       0   1   2   3   4   5   6   7\n       \
    \              +---+---+---+---+---+---+---+---+\n                     |     \
    \ SCI      |      DCI      |\n                     +---+---+---+---+---+---+---+---+\n\
    \                      Figure 3: LOWPAN_IPHC Encoding\n   SCI: Source Context\
    \ Identifier.  Identifies the prefix that is used\n      when the IPv6 source\
    \ address is statefully compressed.\n   DCI: Destination Context Identifier. \
    \ Identifies the prefix that is\n      used when the IPv6 destination address\
    \ is statefully compressed.\n"
- title: 3.2.  IPv6 Header Encoding
  contents:
  - "3.2.  IPv6 Header Encoding\n   Fields carried in-line (in part or in whole) appear\
    \ in the same order\n   as they do in the IPv6 header format [RFC2460].  The Version\
    \ field is\n   always elided.  Unicast IPv6 addresses may be compressed to 64\
    \ or 16\n   bits or completely elided.  Multicast IPv6 addresses may be\n   compressed\
    \ to 8, 32, or 48 bits.  The IPv6 Payload Length field MUST\n   always be elided\
    \ and inferred from lower layers using the 6LoWPAN\n   Fragmentation header or\
    \ the IEEE 802.15.4 header.\n"
- title: 3.2.1.  Traffic Class and Flow Label Compression
  contents:
  - "3.2.1.  Traffic Class and Flow Label Compression\n   The Traffic Class field\
    \ in the IPv6 header comprises 6 bits of\n   Diffserv extension [RFC2474] and\
    \ 2 bits of Explicit Congestion\n   Notification (ECN) [RFC3168].  The TF field\
    \ in the LOWPAN_IPHC\n   encoding indicates whether the Traffic Class and Flow\
    \ Label are\n   carried in-line in the compressed IPv6 header.  When Flow Label\
    \ is\n   included while the Traffic Class is compressed, an additional 4 bits\n\
    \   are included to maintain byte alignment.  Two of the 4 bits contain\n   the\
    \ ECN bits from the Traffic Class field.\n   To ensure that the ECN bits appear\
    \ in the same location for all\n   encodings that include them, the Traffic Class\
    \ field is rotated right\n   by 2 bits in the compressed IPv6 header.  The encodings\
    \ are shown\n   below:\n                          1                   2      \
    \             3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7\
    \ 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |ECN|   DSCP    |  rsv  |             Flow Label                |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      Figure\
    \ 4: TF = 00: Traffic Class and Flow Label carried in-line\n                 \
    \         1                   2\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\
    \ 0 1 2 3\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |ECN|rsv|\
    \             Flow Label                |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \               Figure 5: TF = 01: Flow Label carried in-line\n      0 1 2 3 4\
    \ 5 6 7\n     +-+-+-+-+-+-+-+-+\n     |ECN|   DSCP    |\n     +-+-+-+-+-+-+-+-+\n\
    \             Figure 6: TF = 10: Traffic Class carried in-line\n"
- title: 3.2.2.  Deriving IIDs from the Encapsulating Header
  contents:
  - "3.2.2.  Deriving IIDs from the Encapsulating Header\n   LOWPAN_IPHC elides the\
    \ IIDs of source or destination addresses when\n   SAM = 3 or DAM = 3, respectively.\
    \  In this mode, the IID is derived\n   from the encapsulating header.  When the\
    \ encapsulating header carries\n   IPv6 addresses, bits for the source and destination\
    \ addresses are\n   copied from the source and destination addresses of the encapsulating\n\
    \   IPv6 header.\n   The remainder of this section defines the mapping from IEEE\
    \ 802.15.4\n   [IEEE802.15.4] link-layer addresses to IIDs for both short and\n\
    \   extended IEEE 802.15.4 addresses.  IID bits not covered by the\n   context\
    \ information MAY be elided if they match the link-layer\n   address mapping and\
    \ MUST NOT be elided if they do not.\n   An extended IEEE 802.15.4 address takes\
    \ the form of an IEEE EUI-64\n   address.  Generating an IID from an extended\
    \ address is identical to\n   that defined in Appendix A of [RFC4291].  The only\
    \ change needed to\n   transform an IEEE EUI-64 identifier to an interface identifier\
    \ is to\n   invert the universal/local bit.\n   A short IEEE 802.15.4 address\
    \ is 16 bits in length.  Short addresses\n   are mapped into the restricted space\
    \ of IEEE EUI-64 addresses by\n   setting the middle 16 bits to 0xfffe, the bottom\
    \ 16 bits to the short\n   address, and all other bits to zero.  As a result,\
    \ an IID generated\n   from a short address has the form:\n      0000:00ff:fe00:XXXX\n\
    \   where XXXX carries the short address.  The universal/local bit is\n   zero\
    \ to indicate local scope.\n   This mapping for non-EUI-64 identifiers differs\
    \ from that presented\n   in Appendix A of [RFC4291].  Using the restricted space\
    \ ensures no\n   overlap with IIDs generated from unrestricted IEEE EUI-64 addresses.\n\
    \   Also, including 0xfffe in the middle of the IID helps avoid overlap\n   with\
    \ other locally managed IIDs.\n   This mapping from a short IEEE 802.15.4 address\
    \ to 64-bit IIDs is\n   also used to reconstruct any part of an IID not covered\
    \ by context\n   information.\n"
- title: 3.2.3.  Stateless Multicast Address Compression
  contents:
  - "3.2.3.  Stateless Multicast Address Compression\n   LOWPAN_IPHC supports stateless\
    \ compression of multicast addresses\n   when M = 1 and DAC = 0.  An IPv6 multicast\
    \ address may be compressed\n   down to 48, 32, or 8 bits using stateless compression.\
    \  The format\n   supports compression of the Solicited-Node Multicast Address\
    \ (ff02::\n   1:ffXX:XXXX) as well as any IPv6 multicast address where the upper\n\
    \   bits of the multicast group identifier are zero.  The 8-bit\n   compressed\
    \ form only carries the least-significant bits of the\n   multicast group identifier.\
    \  The 48- and 32-bit compressed forms\n   carry the multicast scope and flags\
    \ in-line, in addition to the\n   least-significant bits of the multicast group\
    \ identifier.\n                          1                   2               \
    \    3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n\
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \ | Flags | Scope |              Group Identifier                 |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |        Group Identifier       |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \          Figure 7: DAM = 01. 48-bit Compressed Multicast Address\n         \
    \                 (ffFS::00GG:GGGG:GGGG)\n                          1        \
    \           2                   3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8\
    \ 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     | Flags | Scope |              Group Identifier                 |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n        \
    \  Figure 8: DAM = 10. 32-bit Compressed Multicast Address\n                 \
    \            (ffFS::00GG:GGGG)\n      0 1 2 3 4 5 6 7\n     +-+-+-+-+-+-+-+-+\n\
    \     |   Group ID    |\n     +-+-+-+-+-+-+-+-+\n     Figure 9: DAM = 11. 8-bit\
    \ Compressed Multicast Address (ff02::GG)\n"
- title: 3.2.4.  Stateful Multicast Address Compression
  contents:
  - "3.2.4.  Stateful Multicast Address Compression\n   LOWPAN_IPHC supports stateful\
    \ compression of multicast addresses when\n   M = 1 and DAC = 1.  This document\
    \ currently defines DAM = 00:\n   context-based compression of Unicast-Prefix-based\
    \ IPv6 Multicast\n   Addresses [RFC3306][RFC3956].  In particular, the Prefix\
    \ Length and\n   Network Prefix can be taken from a context.  As a result, LOWPAN_IPHC\n\
    \   can compress a Unicast-Prefix-based IPv6 Multicast Address down to 6\n   octets\
    \ by only carrying the 4-bit Flags, 4-bit Scope, 8-bit\n   Rendezvous Point Interface\
    \ ID (RIID), and 32-bit Group Identifier in-\n   line.\n                     \
    \     1                   2                   3\n      0 1 2 3 4 5 6 7 8 9 0 1\
    \ 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     | Flags | Scope | Rsvd / RIID   |       Group Identifier        |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  \
    \      Group Identifier       |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \     Figure 10: DAM = 00.  Unicast-Prefix-based IPv6 Multicast\n            \
    \                Address Compression\n   Note that the Reserved field MUST carry\
    \ the reserved bits from the\n   multicast address format as described in [RFC3306].\
    \  When a\n   Rendezvous Point is encoded in the multicast address as described\
    \ in\n   [RFC3956], the Reserved field carries the RIID bits in-line.\n"
- title: 4.  IPv6 Next Header Compression
  contents:
  - "4.  IPv6 Next Header Compression\n   LOWPAN_IPHC elides the IPv6 Next Header\
    \ field when the NH bit is set\n   to 1.  This also indicates the use of 6LoWPAN\
    \ next header\n   compression, LOWPAN_NHC.  The value of IPv6 Next Header is recovered\n\
    \   from the first bits in the LOWPAN_NHC encoding.  The following bits\n   are\
    \ specific to the IPv6 Next Header value.  Figure 11 shows the\n   structure of\
    \ an IPv6 datagram compressed using LOWPAN_IPHC and\n   LOWPAN_NHC.\n   +-------------+-------------+-------------+-----------------+--------\n\
    \   | LOWPAN_IPHC | In-line     | LOWPAN_NHC  | In-line Next    | Payload\n  \
    \ |   Encoding  |   IP Fields |   Encoding  |   Header Fields |\n   +-------------+-------------+-------------+-----------------+--------\n\
    \      Figure 11: Typical LOWPAN_IPHC/LOWPAN_NHC Header Configuration\n"
- title: 4.1.  LOWPAN_NHC Format
  contents:
  - "4.1.  LOWPAN_NHC Format\n   Compression formats for different next headers are\
    \ identified by a\n   variable-length bit-pattern immediately following the LOWPAN_IPHC\n\
    \   compressed header.  When defining a next header compression format,\n   the\
    \ number of bits used SHOULD be determined by the perceived\n   frequency of using\
    \ that format.  However, the number of bits and any\n   remaining encoding bits\
    \ SHOULD respect octet alignment.  The\n   following bits are specific to the\
    \ next header compression format.\n   This document defines a compression format\
    \ for IPv6 Extension and UDP\n   headers.\n               +----------------+---------------------------\n\
    \               | var-len NHC ID | compressed next header...\n               +----------------+---------------------------\n\
    \                      Figure 12: LOWPAN_NHC Encoding\n"
- title: 4.2.  IPv6 Extension Header Compression
  contents:
  - "4.2.  IPv6 Extension Header Compression\n   A necessary property of encoding\
    \ headers using LOWPAN_NHC is that the\n   immediately preceding header must be\
    \ encoded using either LOWPAN_IPHC\n   or LOWPAN_NHC.  In other words, all headers\
    \ encoded using the 6LoWPAN\n   encoding format defined in this document must\
    \ be contiguous.  As a\n   result, this document defines a set of LOWPAN_NHC encodings\
    \ for\n   selected IPv6 Extension Headers such that the UDP Header Compression\n\
    \   defined in Section 4.3 may be used in the presence of those extension\n  \
    \ headers.\n   The LOWPAN_NHC encodings for IPv6 Extension Headers are composed\
    \ of a\n   single LOWPAN_NHC octet followed by the IPv6 Extension Header.  The\n\
    \   format of the LOWPAN_NHC octet is shown in Figure 13.  The first 7\n   bits\
    \ serve as an identifier for the IPv6 Extension Header immediately\n   following\
    \ the LOWPAN_NHC octet.  The remaining bit indicates whether\n   or not the following\
    \ header utilizes LOWPAN_NHC encoding.\n                       0   1   2   3 \
    \  4   5   6   7\n                     +---+---+---+---+---+---+---+---+\n   \
    \                  | 1 | 1 | 1 | 0 |    EID    |NH |\n                     +---+---+---+---+---+---+---+---+\n\
    \                 Figure 13: IPv6 Extension Header Encoding\n   EID: IPv6 Extension\
    \ Header ID:\n      0: IPv6 Hop-by-Hop Options Header [RFC2460]\n      1: IPv6\
    \ Routing Header [RFC2460]\n      2: IPv6 Fragment Header [RFC2460]\n      3:\
    \ IPv6 Destination Options Header [RFC2460]\n      4: IPv6 Mobility Header [RFC6275]\n\
    \      5: Reserved\n      6: Reserved\n      7: IPv6 Header\n   NH: Next Header:\n\
    \      0: Full 8 bits for Next Header are carried in-line.\n      1: The Next\
    \ Header field is elided and the next header is encoded\n         using LOWPAN_NHC,\
    \ which is discussed in Section 4.1.\n   For the most part, the IPv6 Extension\
    \ Header is carried unmodified in\n   the bytes immediately following the LOWPAN_NHC\
    \ octet, with two\n   important exceptions: Length field and Next Header field.\n\
    \   The Next Header field contained in IPv6 Extension Headers is elided\n   when\
    \ the NH bit is set in the LOWPAN_NHC encoding octet.  Note that\n   doing so\
    \ allows LOWPAN_NHC to utilize no more overhead than the non-\n   encoded IPv6\
    \ Extension Header.\n   The Length field contained in a compressed IPv6 Extension\
    \ Header\n   indicates the number of octets that pertain to the (compressed)\n\
    \   extension header following the Length field.  Note that this changes\n   the\
    \ Length field definition in [RFC2460] from indicating the header\n   size in\
    \ 8-octet units, not including the first 8 octets.  Changing\n   the Length field\
    \ to be in units of octets removes wasteful internal\n   fragmentation.\n   IPv6\
    \ Hop-by-Hop and Destination Options Headers may use a trailing\n   Pad1 or PadN\
    \ to achieve 8-octet alignment.  When there is a single\n   trailing Pad1 or PadN\
    \ option of 7 octets or less and the containing\n   header is a multiple of 8\
    \ octets, the trailing Pad1 or PadN option\n   MAY be elided by the compressor.\
    \  A decompressor MUST ensure that the\n   containing header is padded out to\
    \ a multiple of 8 octets in length,\n   using a Pad1 or PadN option if necessary.\
    \  Note that Pad1 and PadN\n   options that appear in locations other than the\
    \ end MUST be carried\n   in-line as they are used to align subsequent options.\n\
    \   Note that specifying units in octets means that LOWPAN_NHC MUST NOT\n   be\
    \ used to encode IPv6 Extension Headers that have more than 255\n   octets following\
    \ the Length field after compression.\n   When the identified next header is an\
    \ IPv6 Header (EID=7), the NH bit\n   of the LOWPAN_NHC encoding is unused and\
    \ MUST be set to zero.  The\n   following bytes MUST be encoded using LOWPAN_IPHC\
    \ as defined in\n   Section 3.\n"
- title: 4.3.  UDP Header Compression
  contents:
  - "4.3.  UDP Header Compression\n   This document defines a compression format for\
    \ UDP headers using\n   LOWPAN_NHC.  The UDP compression format is shown in Figure\
    \ 14.  Bits\n   0 through 4 represent the NHC ID and '11110' indicates the specific\n\
    \   UDP header compression encoding defined in this section.\n"
- title: 4.3.1.  Compressing UDP Ports
  contents:
  - "4.3.1.  Compressing UDP Ports\n   This specification allows a particular range\
    \ of ports number (0xf0b0\n   to 0xf0bf) to be compressed down to 4 bits.  This\
    \ is a stateless\n   compression that is inherited from [RFC4944], as opposed\
    \ to a new\n   stateful compression.\n   The range of ports compressible down\
    \ to 4 bits is not in a reserved\n   range.  A network stack implementation that\
    \ is designed to\n   communicate over a 6LoWPAN should avoid using those ports\
    \ as dynamic\n   ports whenever possible.\n   Considering that this represents\
    \ only 16 contiguous ports, it can be\n   expected that many incompatible applications\
    \ will use the same value\n   of port numbers for their own end-to-end needs.\
    \  Thus, a port number\n   in the (0xf0b0 to 0xf0bf) range provides very little\
    \ information\n   about the application at the remote end.\n   The overloading\
    \ of the 0xf0bX ports increases the risk of getting the\n   wrong type of payload\
    \ and misinterpreting the content compared to\n   ports that are reserved at IANA.\
    \  As a result, it is recommended that\n   the use of those ports be associated\
    \ with a mechanism such as a\n   Transport Layer Security (TLS) [RFC5246] Message\
    \ Integrity Check\n   (MIC) that makes sure that the content is what is expected\
    \ and is\n   checked.\n"
- title: 4.3.2.  Compressing UDP Checksum
  contents:
  - "4.3.2.  Compressing UDP Checksum\n   The UDP checksum operation is mandatory\
    \ with IPv6 [RFC2460] for all\n   packets.  For that reason, [RFC4944] disallows\
    \ the compression of the\n   UDP checksum.\n   With this specification, a compressor\
    \ in the source transport\n   endpoint MAY elide the UDP Checksum if it is authorized\
    \ by the upper\n   layer.  The compressor MUST NOT set the C bit unless it has\
    \ received\n   such authorization.  Requiring upper-layer authorization ensures\
    \ that\n   the intended transport peer will have sufficient means to deal with\n\
    \   any data corruption that occurs before reaching the destination.  The\n  \
    \ upper layer MUST NOT provide the authorization unless one of the\n   following\
    \ cases is satisfied:\n   Tunneling:  In this case, 6LoWPAN is deployed as a wireless\
    \ pseudo-\n      fieldbus by tunneling existing field protocols over UDP.  If\
    \ the\n      tunneled Protocol Data Unit (PDU) possesses its own addressing,\n\
    \      security and integrity check (e.g., IPsec Encapsulating Security\n    \
    \  Payload tunnel mode [RFC4303] or IP over UDP encapsulation), the\n      tunneling\
    \ mechanism MAY authorize eliding the UDP checksum in\n      order to save on\
    \ the encapsulation overhead.\n   Message Integrity Check:  In this case, either\
    \ IPsec Authentication\n      Header [RFC4302] or some other form of integrity\
    \ check in the UDP\n      payload that covers at least the same information as\
    \ the UDP\n      checksum (pseudo-header, data) and has at least the same strength.\n\
    \   To help ensure that the UDP Checksum will be properly restored when\n   expanding\
    \ a 6LoWPAN packet, an additional integrity check (e.g., a\n   Layer 2 (L2) Message\
    \ Integrity Check) MUST be used whenever\n   transmitting link frames that carry\
    \ a compressed UDP datagram that\n   elides the checksum.  Without this additional\
    \ integrity check, a UDP\n   packet may be delivered to an unintended destination\
    \ since corruption\n   in data covered by the pseudo-header can go undetected.\n\
    \   A compressor MUST verify the UDP Checksum before it is elided and\n   MUST\
    \ ensure that the additional integrity check is in place before\n   verifying\
    \ and eliding the checksum.  If verification of the UDP\n   Checksum fails, the\
    \ compressor MUST drop the packet.\n   A decompressor that expands a 6LoWPAN packet\
    \ with the C bit set MUST\n   compute the UDP Checksum on behalf of the source\
    \ node and place that\n   value in the restored UDP header as specified in the\
    \ incumbent\n   standards [RFC0768], [RFC2460].  The decompressor MUST unambiguously\n\
    \   determine that an additional integrity check was put in place by the\n   compressor\
    \ and verify the integrity check and SHOULD do so after\n   restoring the UDP\
    \ Checksum.  If the decompressor cannot unambiguously\n   determine the presence\
    \ of an integrity check or verification fails,\n   the decompressor MUST drop\
    \ the packet.\n   The recommended ordering of computing and verifying the UDP\
    \ Checksum\n   and additional integrity check ensures that data is never stored\n\
    \   unprotected in memory.  In practice, functionality separation between\n  \
    \ layers may preclude the recommended ordering.  However, implementors\n   should\
    \ take special note and understand the risks when dealing with\n   unprotected\
    \ data covered by the pseudo-header.\n   To allow intermediate nodes to compress\
    \ the UDP Checksum, a\n   forwarding node MAY infer upper-layer authorization\
    \ for an incoming\n   packet if it has the C bit set and it can unambiguously\
    \ determine\n   that an integrity check covering the same data as the UDP Checksum\n\
    \   was in place while the UDP Checksum was elided.  A forwarding node\n   MUST\
    \ NOT infer authorization if it cannot unambiguously determine the\n   presence\
    \ of and verify an integrity check while the UDP Checksum was\n   elided.\n"
- title: 4.3.3.  UDP LOWPAN_NHC Format
  contents:
  - "4.3.3.  UDP LOWPAN_NHC Format\n                       0   1   2   3   4   5 \
    \  6   7\n                     +---+---+---+---+---+---+---+---+\n           \
    \          | 1 | 1 | 1 | 1 | 0 | C |   P   |\n                     +---+---+---+---+---+---+---+---+\n\
    \                      Figure 14: UDP Header Encoding\n   C: Checksum:\n     \
    \ 0: All 16 bits of Checksum are carried in-line.\n      1: All 16 bits of Checksum\
    \ are elided.  The Checksum is recovered\n         by recomputing it on the 6LoWPAN\
    \ termination point.\n   P: Ports:\n      00:  All 16 bits for both Source Port\
    \ and Destination Port are\n         carried in-line.\n      01:  All 16 bits\
    \ for Source Port are carried in-line.  First 8\n         bits of Destination\
    \ Port is 0xf0 and elided.  The remaining 8\n         bits of Destination Port\
    \ are carried in-line.\n      10:  First 8 bits of Source Port are 0xf0 and elided.\
    \  The\n         remaining 8 bits of Source Port are carried in-line.  All 16\n\
    \         bits for Destination Port are carried in-line.\n      11:  First 12\
    \ bits of both Source Port and Destination Port are\n         0xf0b and elided.\
    \  The remaining 4 bits for each are carried\n         in-line.\n   Fields carried\
    \ in-line (in part or in whole) appear in the same order\n   as they do in the\
    \ UDP header format [RFC0768].  The UDP Length field\n   MUST always be elided\
    \ and is inferred from lower layers using the\n   6LoWPAN Fragmentation header\
    \ or the IEEE 802.15.4 header.\n"
- title: 5.  IANA Considerations
  contents:
  - "5.  IANA Considerations\n   This document defines a new IPv6 header compression\
    \ format for\n   6LoWPAN.  The document allocates the following 32 Dispatch type\
    \ field\n   values for LOWPAN_IPHC:\n     01 100000\n      through\n     01 111111\n\
    \   This assignment preempts the assignment of 01 111111 for ESC\n   [RFC4944];\
    \ this preemption is possible because extension bytes that\n   would enable the\
    \ use of ESC have not been allocated yet.  Instead,\n   the value:\n     01 000000\n\
    \   is reserved as a replacement value for ESC, to be finally assigned\n   with\
    \ the first assignment of extension bytes.\n   This document also creates a new\
    \ IANA registry for the LOWPAN_NHC\n   header type, with the following initial\
    \ content:\n     00000000 to 11011111: (unassigned)\n     1110000N: IPv6 Hop-by-Hop\
    \ Options Header       [RFC6282]\n     1110001N: IPv6 Routing Header         \
    \         [RFC6282]\n     1110010N: IPv6 Fragment Header                 [RFC6282]\n\
    \     1110011N: IPv6 Destination Options Header      [RFC6282]\n     1110100N:\
    \ IPv6 Mobility Header                 [RFC6282]\n     1110111N: IPv6 Header \
    \                         [RFC6282]\n     11110CPP: UDP Header               \
    \            [RFC6282]\n     11111000 to 11111110: (unassigned)\n   Capital letters\
    \ in bit positions represent class-specific bit\n   assignments.  N indicates\
    \ whether or not additional LOWPAN_NHC\n   encodings follow, as defined in Section\
    \ 4.2.  CPP represents\n   variables specific to UDP header compression defined\
    \ in Section 4.3.\n   The policy for this registry [RFC5226] is IETF Review. \
    \ In this\n   process, new values SHOULD be assigned in a way that preserves the\n\
    \   NHC ID abstraction of Section 4 (i.e., k one-bits followed by one\n   zero-bit\
    \ identify the general class of NHC, followed by class-\n   specific bit assignments).\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   The definition of LOWPAN_IPHC permits the compression\
    \ of header\n   information on communication that could take place in its absence,\n\
    \   albeit in a less efficient form.  It recognizes that a IEEE 802.15.4\n   PAN\
    \ may have associated with it a number of prefixes through shared\n   context.\
    \  How the shared context is assigned and managed is beyond\n   the scope of this\
    \ document.\n   The overloading of the 0xf0bX ports increases the risk of getting\
    \ the\n   wrong type of payload and misinterpreting the content compared to\n\
    \   ports that reserved at IANA.  It is thus recommended that the use of\n   those\
    \ ports be associated with a mechanism such as a Transport Layer\n   Security\
    \ (TLS) [RFC5246] Message Integrity Check (MIC) that validates\n   that the content\
    \ is expected and checked for integrity.\n"
- title: 7.  Acknowledgements
  contents:
  - "7.  Acknowledgements\n   Thanks to Julien Abeille, Robert Assimiti, Dominique\
    \ Barthel, Carsten\n   Bormann, Robert Cragie, Stephen Dawson-Haggerty, Mathilde\
    \ Durvy, Erik\n   Nordmark, Christos Polyzois, Joseph Reddy, Shoichi Sakane, Zach\n\
    \   Shelby, Dario Tedeschi, Tony Viscardi, and Jay Werb for useful design\n  \
    \ consideration and implementation feedback.  Special thanks to David\n   Black,\
    \ Lars Eggert, and Carsten Bormann for their contribution in\n   closing the security\
    \ issues around UDP compression.\n"
- title: 8.  References
  contents:
  - '8.  References

    '
- title: 8.1.  Normative References
  contents:
  - "8.1.  Normative References\n   [RFC0768]       Postel, J., \"User Datagram Protocol\"\
    , STD 6, RFC 768,\n                   August 1980.\n   [RFC2119]       Bradner,\
    \ S., \"Key words for use in RFCs to Indicate\n                   Requirement\
    \ Levels\", BCP 14, RFC 2119, March 1997.\n   [RFC2460]       Deering, S. and\
    \ R. Hinden, \"Internet Protocol,\n                   Version 6 (IPv6) Specification\"\
    , RFC 2460,\n                   December 1998.\n   [RFC2474]       Nichols, K.,\
    \ Blake, S., Baker, F., and D. Black,\n                   \"Definition of the\
    \ Differentiated Services Field (DS\n                   Field) in the IPv4 and\
    \ IPv6 Headers\", RFC 2474,\n                   December 1998.\n   [RFC3168] \
    \      Ramakrishnan, K., Floyd, S., and D. Black, \"The\n                   Addition\
    \ of Explicit Congestion Notification (ECN) to\n                   IP\", RFC 3168,\
    \ September 2001.\n   [RFC4291]       Hinden, R. and S. Deering, \"IP Version\
    \ 6 Addressing\n                   Architecture\", RFC 4291, February 2006.\n\
    \   [RFC4944]       Montenegro, G., Kushalnagar, N., Hui, J., and D.\n       \
    \            Culler, \"Transmission of IPv6 Packets over IEEE\n              \
    \     802.15.4 Networks\", RFC 4944, September 2007.\n   [RFC5226]       Narten,\
    \ T. and H. Alvestrand, \"Guidelines for Writing\n                   an IANA Considerations\
    \ Section in RFCs\", BCP 26,\n                   RFC 5226, May 2008.\n   [RFC6275]\
    \       Perkins, C., Ed., Johnson, D., and J. Arkko,\n                   \"Mobility\
    \ Support in IPv6\", RFC 6275, July 2011.\n"
- title: 8.2.  Informative References
  contents:
  - "8.2.  Informative References\n   [IEEE802.15.4]  IEEE Computer Society, \"IEEE\
    \ Std. 802.15.4-2006\",\n                   October 2006.\n   [RFC3306]      \
    \ Haberman, B. and D. Thaler, \"Unicast-Prefix-based\n                   IPv6\
    \ Multicast Addresses\", RFC 3306, August 2002.\n   [RFC3315]       Droms, R.,\
    \ Bound, J., Volz, B., Lemon, T., Perkins,\n                   C., and M. Carney,\
    \ \"Dynamic Host Configuration\n                   Protocol for IPv6 (DHCPv6)\"\
    , RFC 3315, July 2003.\n   [RFC3956]       Savola, P. and B. Haberman, \"Embedding\
    \ the Rendezvous\n                   Point (RP) Address in an IPv6 Multicast Address\"\
    ,\n                   RFC 3956, November 2004.\n   [RFC4302]       Kent, S., \"\
    IP Authentication Header\", RFC 4302,\n                   December 2005.\n   [RFC4303]\
    \       Kent, S., \"IP Encapsulating Security Payload (ESP)\",\n             \
    \      RFC 4303, December 2005.\n   [RFC4861]       Narten, T., Nordmark, E.,\
    \ Simpson, W., and H.\n                   Soliman, \"Neighbor Discovery for IP\
    \ version 6\n                   (IPv6)\", RFC 4861, September 2007.\n   [RFC5246]\
    \       Dierks, T. and E. Rescorla, \"The Transport Layer\n                  \
    \ Security (TLS) Protocol Version 1.2\", RFC 5246,\n                   August\
    \ 2008.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Jonathan W. Hui (editor)\n   Arch Rock Corporation\n \
    \  501 2nd St. Ste. 410\n   San Francisco, California  94107\n   USA\n   Phone:\
    \ +415 692 0828\n   EMail: jhui@archrock.com\n   Pascal Thubert\n   Cisco Systems\n\
    \   Village d'Entreprises Green Side\n   400, Avenue de Roumanille\n   Batiment\
    \ T3\n   Biot - Sophia Antipolis  06410\n   FRANCE\n   Phone: +33 4 97 23 26 34\n\
    \   EMail: pthubert@cisco.com\n"
