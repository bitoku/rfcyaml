This document defines a MIME Content Type for holding directory information.
The definition is independent of any particular directory service or protocol.
The text/directory Content Type is defined for holding a variety of directory information, for example, name, or email address, or logo.
The text/directory Content Type can also be used as the root body part in a multipart/related Content  Type for handling more complicated situations, especially those in which non textual information that already has a natural MIME representation, for example, a photograph or sound, is to be represented.
The text/directory Content Type defines a general framework and format for holding directory information in a simple "type:value" form.
We refer to "type" in this context meaning a property or attribute with which the value is associated.
Mechanisms are defined to specify alternate languages, encodings and other meta information.
This document also defines the procedure by which particular formats, called profiles, for carrying application specific information within a text/directory Content Type can be defined and registered, and the conventions such formats must follow.
It is expected that other documents will be produced that define such formats for various applications (e.g., white pages).
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY" and "OPTIONAL" in this document are to be interpreted as described in [RFC 2119].
Need for a MIME Directory Type For purposes of this document, a directory is a special purpose database that contains typed information.
A directory usually supports both read and search of the information it contains, and can support creation and modification of the information as well.
Directory information is usually accessed far more often than it is updated.
Directories can be local or global in scope.
They can be distributed or centralized.
The information they contain can be replicated, with weak or strong consistency requirements.
There are several situations in which users of Internet mail might wish to exchange directory information: the email analogy of a "business card" exchange; the conveyance of directory information to a user having only email access to the Internet; the provision of machine parseable address information when purchasing goods or services over the Internet; etc.
As MIME [RFC 2045, RFC 2046] is used increasingly by other protocols,
most notably HTTP, it can also be useful for these protocols to carry directory information in MIME format.
Such a format, for example, could be used to represent URC (uniform resource characteristics) information about resources on the World Wide Web, or to provide a rudimentary directory service over HTTP.
The scheme defined here for representing directory information in a MIME Content Type has two parts.
First, the text/directory Content  Type is defined for use in holding directory information within a single body part, for example name, title, or email address.
In its simplest form, the format uses a "type:value" approach, which should be easily parseable by existing MIME implementations and understandable by users.
More complicated situations can be represented also.
This document defines the general form the information in the Content Type should have, and the procedure by which specific types and values (properties) for particular applications can be defined.
The framework is general enough to handle information from any number of end directory services, including LDAP [RFC 1777, RFC 1778], WHOIS  [RFC 1835], and X.500 [X500].
Directory entries can include far more than just textual information.
Some such information (e.g., an image or sound) overlaps with predefined MIME Content Types.
In these cases it can be desirable to include the information in its well known MIME format.
This situation is handled by using a multipart/related Content Type as defined in [RFC 2112].
The root component of this type is a text/directory body part specifying any in line information, and for information contained in other Content Types, the Content IDs (in URI form) of those parts.
In some applications, it can be useful to include a pointer (e.g, a URI) to some directory information rather than the information itself.
This document defines a general mechanism for accomplishing this.
The text/directory Content Type is used to hold basic directory information and URIs referencing other information, including other MIME body parts holding supplementary or non textual directory information, such as an image or sound.
It is defined as follows, using the MIME media type registration template from [RFC 2048].
To: ietf types@uninett.no Subject: Registration of MIME media type text/directory 5.1.
MIME media type name MIME media type name: text 5.2.
MIME subtype name MIME subtype name: directory 5.3.
: charset The "charset" parameter is as defined in [RFC 2046] for other body parts.
It is used to identify the default character set used within the body part.
: profile The "profile" parameter is used to convey the type(s) of entity(ies) to which the directory information pertains and the likely set of information associated with the entity(ies).
It is intended only as a guide to applications interpreting the information contained within the body part.
It SHOULD NOT be used to exclude or require particular pieces of information unless a profile definition specifically calls for this behavior.
Unless specifically forbidden by a particular profile definition, a text/directory content type can contain arbitrary attribute/value pairs.
The value of the "profile" parameter is defined as follows.
Profile names are case insensitive (i.e., the profile name "vCard" is the same as "VCARD" and "vcard" and "vcArD").
a publicly defined extension token, registered with IANA, as specified in Section 9 of this document> 5.5.
The default encoding is 8bit.
Otherwise, as specified by the Content Transfer Encoding header field.
Security considerations Directory information can be public or it can be protected from unauthorized access by the directory service in which it resides.
Once the information leaves its native service, there can be no guarantee that the same care will be taken by all services handling the information.
Furthermore, this specification defines no access control mechanism by which information can be protected, or by which access control information can be conveyed.
Note that the integrity and privacy of a text/directory body part can be protected by enclosing it within an appropriate MIME based security mechanism.
In order to make sense of directory information, applications must share a common understanding of the types of information contained within the Content Type (the directory schema).
This schema information is not defined in this document, but rather in companion documents (e.g., [MIME VCARD])
that follow the requirements specified in this document, or in bilateral agreements between communicating parties.
The text/directory Content Type contains directory information, typically pertaining to a single directory entity or group of entities.
The content consists of one or more lines in the format given below.
Line delimiting and folding Individual lines within the MIME text/directory Content Type body are delimited by the [RFC 822] line break, which is a CRLF sequence (ASCII decimal 13, followed by ASCII decimal 10).
Long logical lines of text can be split into a multiple physical line representation using the following folding technique.
A logical line MAY be continued on the next physical line anywhere between two characters by inserting a CRLF immediately followed by a single white space character (space, ASCII decimal 32, or horizontal tab, ASCII decimal 9).
At least one character must be present on the folded line.
Any sequence of CRLF followed immediately by a single white space character is ignored (removed) when processing the content type.
This is a long description that exists on a long line.
This is a long description that exists on a long line.
It could also be represented as: DESCRIPTION
:This is a long descrip tion that exists n a long line.
The process of moving from this folded multiple line representation of a type definition to its single line representation is called unfolding.
Unfolding is accomplished by regarding CRLF immediately followed by a white space character (namely HTAB ASCII
decimal 9 or SPACE ASCII decimal 32) as equivalent to no characters at all (i.e., the CRLF and single white space character are removed).
The following ABNF uses the notation of RFC 2234, which also defines CRLF, WSP, DQUOTE, VCHAR, ALPHA, and DIGIT.
After the unfolding of any folded lines as described above, the syntax for a line of this content type is as follows:
; When generating a content line, lines longer than 75 ; characters SHOULD be folded according to the folding ; procedure described above.
; valuespec defined in section 5.8.4 quoted string
NON ASCII ; Any character except CTLs, DQUOTE SAFE CHAR
WSP / %x21 / %x23 2B / %x2D 39 / %x3C
/ VCHAR / NON ASCII ; any textual character A line that begins with a white space character is a continuation of the previous line, as described above.
The white space character and immediately preceeding CRLF should be discarded when reconstructing the original line.
Note that this line folding convention differs from that found in RFC 822, in that the sequence <CRLF><WSP> found anywhere in the content indicates a continued line and should be removed.
Various type names and the format of the corresponding values are defined as specified in Section 11.
Specifications MAY impose ordering on the type constructs within a body part, though none is required by default.
The various x name constructs are used for bilaterally agreed upon type names, parameter names and parameter values, or for use in experimental settings.
Type names and parameter names are case insensitive (e.g., the type name "fn" is the same as "FN" and "Fn").
Parameter values MAY be case sensitive or case insensitive, depending on their definition.
The group construct is used to group related attributes together.
The group name is a syntactic convention used to indicate that all type names prefaced with the same group name SHOULD be grouped together when displayed by an application.
It has no other significance.
Each attribute defined in the text/directory body MAY have multiple values, if allowed in the definition of the profile in which the attribute is used.
The general rule for encoding multi valued items is to simply create a new content line for each value (including the type name).
This approach has been taken for several of the content types defined below (date, time, integer, float), for space saving reasons.
The following parameters and value types are defined for general use.
encodingparm / valuetypeparm / languageparm / contextparm encodingparm
x name / iana token  ; registered as described in ; section 15 of this document languageparm
There is no concept of "default" language, except as specified by any "Content Language" MIME header parameter that is present.
The value of the "language" type parameter is a language tag as defined in Section 2 of [RFC 1766].
The "context" type parameter is used to identify a context (e.g., a protocol) used in interpreting the value.
This is used, for example, in the "source" type, defined below.
The "encoding" type parameter is used to specify an alternate encoding for a value.
If the value contains a CRLF, it must be encoded, since CRLF is used to separate lines in the content type itself.
Currently, only the "b" encoding is supported.
The "b" encoding can also be useful for binary values that are mixed with other text information in the body part (e.g., a certificate).
Using a per value "b" encoding in this case leaves the other information in a more readable form.
The encoded base 64 value can be split across multiple physical lines in the content type by using the line folding technique described above.
The Content Transfer Encoding header field is used to specify the encoding used for the body part as a whole.
The "encoding" type parameter is used to specify an encoding for a particular value (e.g., a certificate).
In this case, the Content Transfer Encoding header might specify "8bit", while the one certificate value might specify an encoding of "b" via an "encoding b" type parameter.
The Content Transfer Encoding and the encodings of individual types given by the "encoding" type parameter are independent of one another.
When encoding a text/directory body part for transmission, individual type encodings are performed first, then the entire body part is encoded according to the Content Transfer Encoding.
When decoding a text/directory body part, the Content Transfer Encoding is decoded first, and then any individual types with an "encoding" type parameter are decoded.
The "value" parameter is optional, and is used to identify the value type (data type) and format of the value.
The use of these predefined formats is encouraged even if the value parameter is not explicity used.
By defining a standard set of value types and their formats, existing parsing and processing code can be leveraged.
Including the value type explicitly as part of each property provides an extra hint to keep parsing simple and support more generalized applications.
For example a search engine would not have to know the particular value types for all of the items for which it is searching.
Because the value type is explicit in the definition, the search engine could look for dates in any item type and provide results that can still be interpreted.
The format for values corresponding to the predefined valuetype specifications given above are defined.
; \n or \N can be used to encode a newline.
<a publicly defined valuetype format, registered with IANA, as defined in section 15 of this document> Some specific notes on the value types and formats: "text": The "text" value type should be used to identify values that contain human readable text.
The character set and language in which the text is represented is controlled by the charset content header and the language type parameter and content header.
Examples for "text": this is a text value
this is one value,this is another this is a single value\, with a comma encoded A formatted text line break in a text value type
MUST be represented as the character sequence backslash (ASCII decimal 92) followed by a Latin small letter n (ASCII decimal 110) or a Latin capital letter N (ASCII decimal 78), that is "\n" or "\N".
For example a multiple line DESCRIPTION value of: Mythical Manager Hyjinx Software Division BabsCo, Inc. could be represented as: DESCRIPTION:
Mythical Manager\nHyjinx Software Division\n BabsCo\, Inc.\n demonstrating the \n literal formatted line break technique,
the CRLF followed by space line folding technique, and the backslash escape technique.
"uri": The "uri" value type should be used to identify values that are referenced by a URI (including a Content ID URI), instead of encoded in line.
These value references might be used if the value is too large, or otherwise undesirable to include directly.
The format for the URI is as defined in RFC 1738.
Examples for "uri": http://www.foobar.com/my/picture.jpg ldap://ldap.foobar.com/cn babs%20jensen "date", "time", and "date time": Each of these value types is based on a subset of the definitions in ISO 8601 standard.
Profiles MAY place further restrictions on "date" and "time" values.
Multiple "date" and "time" values can be specified using the comma separated notation, unless restricted by a profile.
Examples for "date": 1985 04 12 1996 08 05,1996
11 11 19850412 Examples for "time": 10:22:00 102200
08:00 Examples for "date time": 1996 10 22T14:00:00Z 1996 08 11T12:34:56Z 19960811T123456Z 1996 10 22T14:00:00Z,1996 08 11T12:34:56Z "boolean": The "boolean" value type is used to express boolen values.
These values are case insensitive.
TRUE false True "integer": The "integer" value type is used to express signed integers in decimal format.
Multiple "integer" values can be specified using the comma separated notation, unless restricted by a profile.
Examples: 1234567890  1234556790  1234556790,432109876 "float": The "float" value type is used to express real numbers.
Multiple "float" values can be specified using the comma separated notation, unless restricted by a profile.
Examples: 20.30 1000000.0000001 1.333,3.14 5.9.
Applications which use this media type Applications which use this media type: Various 5.10.
Person & email address to contact for further information Tim Howes Netscape Communications Corp. 501 East Middlefield Rd.
Intended usage Intended usage: COMMON 5.13.
Author/Change controller Tim Howes Netscape Communications Corp.
415 937 3419 Mark Smith Netscape Communications Corp. 501 East Middlefield Rd.
Mountain View, CA 94041 USA
415 937 3477 Frank Dawson Lotus Development Corporation 6544
Battleford Drive Raleigh, NC 27613
1 919 676 9515 6.
The following types are generally useful regardless of the profile being carried and are defined below using the text/directory MIME type registration template defined in Section 11.1 of this document.
These types MAY be included in any profile, unless explicitly forbidden in the profile definition.
Registration of text/directory MIME type SOURCE Type name: SOURCE Type purpose:
To identify the source of directory information contained in the content type.
: The SOURCE type is used to provide the means by which applications knowledgable in the given directory service protocol can obtain additional or more up to date information from the directory service.
It contains a URI as defined in [RFC 1738] and/or other information referencing the directory entity or entities to which the information pertains.
When directory information is available from more than one source, the sending entity can pick what it considers to be the best source, or multiple SOURCE types can be included.
The interpretation of the value for a SOURCE type can depend on the setting of the CONTEXT type parameter.
The value of the CONTEXT type parameter MUST be compatible with the value of the uri prefix.
Registration of text/directory MIME type NAME Type name: NAME Type purpose: To identify the displayable name of the directory entity to which information in the content type pertains.
text Type special notes: The NAME type is used to convey the display name of the entity to which the directory information pertains.
Babs Jensen's Contact Information 6.3.
Registration of text/directory MIME type PROFILE Type name: PROFILE Type purpose: To identify the type of directory entity to which information in the content type pertains.
A profile name, registered as described in Section 9 of this document or bilaterally agreed upon as described in Section 5.
Type special notes: The PROFILE type is used to convey the type of the entity to which the directory information in the rest of the body part pertains.
It should be the same as the "profile" header parameter, if present.
Registration of text/directory MIME type BEGIN Type name: BEGIN Type purpose: To denote the beginning of a syntactic entity within a text/directory content type.
8bit Type valuetype: text, containing a profile name, registered as described in Section 9 of this document or bilaterally agreed upon as described in Section 5.
The BEGIN type is used in conjunction with the END type to delimit a profile containing a related set of properties within an text/directory content type.
This construct can be used instead of or in addition to wrapping separate sets of information inside additional MIME headers.
It is provided for applications that wish to define content that can contain multiple entities within the same text/directory content type or to define content that can be identifiable outside of a MIME environment.
Registration of text/directory MIME type END Type name: END Type purpose:
To denote the end of a syntactic entity within a text/directory content type.
8bit Type valuetype: text, containing a profile name, registered as described in Section 9 of this document or bilaterally agreed upon as described in Section 5.
Type special notes: The END type is used in conjunction with the BEGIN type to delimit a profile containing a related set of properties within an text/directory content type.
This construct can be used instead of or in addition to wrapping separate sets of information inside additional MIME headers.
It is provided for applications that wish to define content that can contain multiple entities within the same text/directory content type or to define content that can be identifiable outside of a MIME environment.
Type example: END: VCARD 7.
Use of the multipart/related Content Type
The multipart/related Content Type can be used to hold directory information comprised of both text and non text information or directory information that already has a natural MIME representation.
The root body part within the multipart/related body part is specified as defined in [RFC 2112] by a "start" parameter, or it is the first body part in the absence of such a parameter.
The root body part must have a Content Type of "text/directory".
This part holds inline information and makes reference to subsequent body parts holding additional text or non text directory information via their Content ID URIs as explained in Section 5.
The body parts referred to do not have to be in any particular order, except as noted above for the root body part.
The following examples are for illustrative purposes only and are not part of the definition.
The first example illustrates simple use of the text/directory Content Type.
Note that no "profile" parameter is given
, so an application may not know what kind of directory entity the information applies to.
Note also the use of both hypothetical official and bilaterally agreed upon types.
whatever MIME Version: 1.0 Message ID: <id1@host.net
> Content Type: text/directory Content ID:
Jensen email:babs@umich.edu phone: 1 313 747 4454
The next example illustrates the use of the Quoted Printable transfer encoding defined in [RFC 2045] to include non ASCII character in some of the information returned, and the use of the optional "name" and "source" types.
It also illustrates the use of an "encoding" type parameter to encode a certificate value in "b".
A "vCard" profile [MIME  VCARD] is used for the example.
Content Type: text/directory; charset "iso 8859 1"; profile "vCard" Content ID:
ldap://cn bjorn%20Jensen, o university%20of%20Michigan, c US name:
tel;type work,voice,msg: 1 313 747 4454 key;type x509;encoding B:dGhpcyBjb3VsZCBiZSAKbXkgY2VydGlmaWNhdGUK end:
The next example illustrates the use of multi valued type parameters, the "language" type parameter, the "value" type parameter, folding of long lines, the \n encoding for formatted lines, attribute grouping, and the inline "b" encoding.
A "vCard" profile [MIME VCARD] is used for the example.
Content Type: text/directory; profile "vcard"; charset iso 8859 1 Content ID: <id3@host.com> Content Transfer Encoding:
vcard source:ldap://cn Meister%20Berger,o Universitaet%20Goerlitz,c DE name:
Mayor title;language de;value text:Burgermeister note:
The Mayor of the great city of Goerlitz in the great country of Germany.
email;internet:mb@goerlitz.de home.tel;type fax,voice,msg: 49 3581 123456
Goerlitz\n Deutschland key;type X509;encoding b:
The final example illustrates the use of the multipart/related Content Type to include non textual directory data via the "uri" encoding to refer to other body parts within the same message, or to external values.
Note that no "profile" parameter is given
, so an application may not know what kind of directory entity the information applies to.
Note also the use of both hypothetical official and bilaterally agreed upon types.
Content Type: multipart/related; boundary woof; type "text/directory"; start "<id5@host.com>
woof Content Type: text/directory; charset "iso 8859 1" Content ID:
Jensen email:bjorn@umich.edu image;value uri:cid:id6@host.com image;value
1 313 747 4454  woof Content Type: image/jpeg Content ID:
woof Content Type: message/external body; name "myvoice.au"; site "myhost.com"; access type ANON FTP; directory "pub/myname"; mode "image" Content Type: audio/basic Content ID:
This section defines procedures by which new profiles are registered with the IANA and made available to the Internet community.
Note that non IANA profiles can be used by bilateral agreement, provided the associated profile names follow the "X " convention defined above.
The procedures defined here are designed to allow public comment and review of new profiles, while posing only a small impediment to the definition of new profiles.
Registration of a new profile is accomplished by the following steps.
A profile is defined by completing the following template.
Registration of text/directory MIME profile XXX Profile name: Profile purpose:
Intended usage: (one of COMMON, LIMITED USE or OBSOLETE)
The explanation of what goes in each field in the template follows.
The name of the profile as it will appear in the text/directory MIME Content Type "profile" header parameter, or the predefined "profile" type name.
Profile purpose: The purpose of the profile (e.g., to represent information about people, printers, documents, etc.).
Give a short but clear description.
The list of types associated with the profile.
This list of types is to be expected but not required in the profile, unless otherwise noted in the profile definition.
Other types not mentioned in the profile definition MAY also be present.
Note that any new types referenced by the profile MUST be defined separately as described in Section 10.
Any special notes about the profile, how it is to be used, etc.
This section of the template can also be used to define an ordering on the types that appear in the Content Type, if such an ordering is required.
The profile description must be posted to the new profile discussion list, ietf mime direct@imc.org 9.3.
Discussion on the new profile must be allowed to take place on the list for a minimum of two weeks.
Consensus must be reached on the profile before proceeding to step 4.
Submit the profile for approval
Once the two week comment period has elapsed, and the proposer is convinced consensus has been reached on the profile, the registration application should be submitted to the Profile Reviewer for approval.
The Profile Reviewer is appointed by the Application Area Directors and can either accept or reject the profile registration.
An accepted registration is passed on by the Profile Reviewer to the IANA for inclusion in the official IANA profile registry.
The registration may be rejected for any of the following reasons.
1) Insufficient comment period; 2) Consensus not reached; 3) Technical deficiencies raised on the list or elsewhere have not been addressed.
The Profile Reviewer's decision to reject a profile can be appealed by the proposer to the IESG, or the objections raised can be addressed by the proposer and the profile resubmitted.
Existing profiles can be changed using the same process by which they were registered.
the change Allow a comment period Submit the changed profile for approval
Note that the original author or any other interested party can propose a change to an existing profile, but that such changes should only be proposed when there are serious omissions or errors in the published specification.
The Profile Reviewer can object to a change if it is not backwards compatible, but is not required to do so.
Profile definitions can never be deleted from the IANA registry, but profiles which are no longer believed to be useful can be declared OBSOLETE by a change to their "intended use" field.
Registration of new types This section defines procedures by which new types are registered with the IANA.
Note that non IANA types can be used by bilateral agreement, provided the associated types names follow the "X " convention defined above.
The procedures defined here are designed to allow public comment and review of new types, while posing only a small impediment to the definition of new types.
Registration of a new type is accomplished by the following steps.
A type is defined by completing the following template.
Registration of text/directory MIME type XXX Type name: Type purpose:
Intended usage: (one of COMMON, LIMITED USE or OBSOLETE)
The meaning of each field in the template is as follows.
Type purpose: The purpose of the type (e.g., to represent a name, postal address, IP address, etc.).
Give a short but clear description.
The default encoding a value of the type must have in the body of a text/directory MIME Content Type.
The format a value of the type must have in the body of a text/directory MIME Content Type.
This description must be precise and must not violate the general encoding rules defined in section 5 of this document.
Any special notes about the type, how it is to be used, etc.
The type description must be posted to the new type discussion list, ietf mime direct@imc.org 11.3.
Discussion on the new type must be allowed to take place on the list for a minimum of two weeks.
Consensus must be reached on the type before proceeding to step 4.
Submit the type for approval
Once the two week comment period has elapsed, and the proposer is convinced consensus has been reached on the type, the registration application should be submitted to the Profile Reviewer for approval.
The Profile Reviewer is appointed by the Application Area Directors and can either accept or reject the type registration.
An accepted registration is passed on by the Profile Reviewer to the IANA for inclusion in the official IANA profile registry.
The registration can be rejected for any of the following reasons.
1) Insufficient comment period; 2) Consensus not reached; 3) Technical deficiencies raised on the list or elsewhere have not been addressed.
The Profile Reviewer's decision to reject a type can be appealed by the proposer to the IESG, or the objections raised can be addressed by the proposer and the type resubmitted.
Existing types can be changed using the same process by which they were registered.
the change Allow a comment period Submit the type for approval
Note that the original author or any other interested party can propose a change to an existing type, but that such changes should only be proposed when there are serious omissions or errors in the published specification.
The Profile Reviewer can object to a change if it is not backwards compatible, but is not required to do so.
Type definitions can never be deleted from the IANA registry, but types which are nolonger believed to be useful can be declared OBSOLETE by a change to their "intended use" field.
Registration of new parameters This section defines procedures by which new parameters are registered with the IANA and made available to the Internet community.
Note that non IANA parameters can be used by bilateral agreement, provided the associated parameters names follow the "X " convention defined above.
The procedures defined here are designed to allow public comment and review of new parameters, while posing only a small impediment to the definition of new parameters.
Registration of a new parameter is accomplished by the following steps.
A parameter is defined by completing the following template.
Registration of text/directory MIME type parameter XXX Parameter name:
Intended usage: (one of COMMON, LIMITED USE or OBSOLETE)
The explanation of what goes in each field in the template follows.
The name of the parameter as it will appear in the text/directory MIME Content Type.
Parameter purpose: The purpose of the parameter (e.g., to represent the format of an image, type of a phone number, etc.).
Give a short but clear description.
If defining a general paramemter like "format" or "type" keep in mind that other applications might wish to extend its use.
The list or description of values associated with the parameter.
Any special notes about the parameter, how it is to be used, etc.
The parameter description must be posted to the new parameter discussion list, ietf mime direct@imc.org 13.3.
Discussion on the new parameter must be allowed to take place on the list for a minimum of two weeks.
Consensus must be reached on the parameter before proceeding to step 4.
Submit the parameter for approval
Once the two week comment period has elapsed, and the proposer is convinced consensus has been reached on the parameter, the registration application should be submitted to the Profile Reviewer for approval.
The Profile Reviewer is appointed by the Application Area Directors and can either accept or reject the parameter registration.
An accepted registration is passed on by the Profile Reviewer to the IANA for inclusion in the official IANA parameter registry.
The registration can be rejected for any of the following reasons.
1) Insufficient comment period; 2) Consensus not reached; 3) Technical deficiencies raised on the list or elsewhere have not been addressed.
The Profile Reviewer's decision to reject a profile can be appealed by the proposer to the IESG, or the objections raised can be addressed by the proposer and the parameter registration resubmitted.
Existing parameters can be changed using the same process by which they were registered.
the change Allow a comment period Submit the parameter for approval
Note that the original author or any other interested party can propose a change to an existing parameter, but that such changes should only be proposed when there are serious omissions or errors in the published specification.
The Profile Reviewer can object to a change if it is not backwards compatible, but is not required to do so.
Parameter definitions can never be deleted from the IANA registry, but parameters which are nolonger believed to be useful can be declared OBSOLETE by a change to their "intended use" field.
Registration of new value types This section defines procedures by which new value types are registered with the IANA and made available to the Internet community.
Note that non IANA value types can be used by bilateral agreement, provided the associated value types names follow the "X " convention defined above.
The procedures defined here are designed to allow public comment and review of new value types, while posing only a small impediment to the definition of new value types.
Registration of a new value types is accomplished by the following steps.
A value type is defined by completing the following template.
Registration of text/directory MIME value type XXX value type name: value type purpose: value type format: value type special notes (optional):
Intended usage: (one of COMMON, LIMITED USE or OBSOLETE)
The explanation of what goes in each field in the template follows.
The name of the value type as it will appear in the text/directory MIME Content Type. value type purpose: The purpose of the value type.
Give a short but clear description.
The definition of the format for the value, usually using ABNF grammar.
Any special notes about the value type, how it is to be used, etc.
Post the value type definition
The value type description must be posted to the new value type discussion list, ietf mime direct@imc.org 15.3.
Discussion on the new value type must be allowed to take place on the list for a minimum of two weeks.
Consensus must be reached before proceeding to step 4.
Submit the value type for approval
Once the two week comment period has elapsed, and the proposer is convinced consensus has been reached on the value type, the registration application should be submitted to the Profile Reviewer for approval.
The Profile Reviewer is appointed by the Application Area Directors and can either accept or reject the value type registration.
An accepted registration should be passed on by the Profile Reviewer to the IANA for inclusion in the official IANA value type registry.
The registration can be rejected for any of the following reasons.
1) Insufficient comment period; 2) Consensus not reached; 3) Technical deficiencies raised on the list or elsewhere have not been addressed.
The Profile Reviewer's decision to reject a profile can be appealed by the proposer to the IESG, or the objections raised can be addressed by the proposer and the value type registration resubmitted.
Security Considerations Internet mail is subject to many well known security attacks, including monitoring, replay, and forgery.
Care should be taken by any directory service in allowing information to leave the scope of the service itself, where any access controls can no longer be guaranteed.
Applications should also take care to display directory data in a "safe" environment (e.g., PostScript valued types).
