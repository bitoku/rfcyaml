- title: __initial_text__
  contents:
  - '                    Updates to the Opus Audio Codec

    '
- title: Abstract
  contents:
  - "Abstract\n   This document addresses minor issues that were found in the\n  \
    \ specification of the Opus audio codec in RFC 6716.  It updates the\n   normative\
    \ decoder implementation included in Appendix A of RFC 6716.\n   The changes fix\
    \ real and potential security-related issues, as well\n   as minor quality-related\
    \ issues.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 7841.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8251.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2017 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (https://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   2\n   2.  Terminology . . . . . . . . . . . . . . . . . . . . .\
    \ . . . .   3\n   3.  Stereo State Reset in SILK  . . . . . . . . . . . . . .\
    \ . . .   3\n   4.  Parsing of the Opus Packet Padding  . . . . . . . . . . .\
    \ . .   4\n   5.  Resampler Buffer  . . . . . . . . . . . . . . . . . . . . .\
    \ .   4\n   6.  Integer Wrap-Around in Inverse Gain Computation . . . . . . .\
    \   6\n   7.  Integer Wrap-Around in LSF Decoding . . . . . . . . . . . . .  \
    \ 7\n   8.  Cap on Band Energy  . . . . . . . . . . . . . . . . . . . . .   7\n\
    \   9.  Hybrid Folding  . . . . . . . . . . . . . . . . . . . . . . .   8\n  \
    \ 10. Downmix to Mono . . . . . . . . . . . . . . . . . . . . . . .   9\n   11.\
    \ New Test Vectors  . . . . . . . . . . . . . . . . . . . . . .   9\n   12. Security\
    \ Considerations . . . . . . . . . . . . . . . . . . .  11\n   13. IANA Considerations\
    \ . . . . . . . . . . . . . . . . . . . . .  11\n   14. Normative References \
    \ . . . . . . . . . . . . . . . . . . . .  11\n   Acknowledgements  . . . . .\
    \ . . . . . . . . . . . . . . . . . . .  11\n   Authors' Addresses  . . . . .\
    \ . . . . . . . . . . . . . . . . . .  12\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document addresses minor issues that were discovered\
    \ in the\n   reference implementation of the Opus codec.  Unlike most IETF\n \
    \  specifications, RFC 6716 [RFC6716] defines Opus in terms of a\n   normative\
    \ reference decoder implementation rather than from the\n   associated text description.\
    \  Appendix A of that RFC includes the\n   reference decoder implementation, which\
    \ is why only issues affecting\n   the decoder are listed here.  An up-to-date\
    \ implementation of the\n   Opus encoder can be found at <https://opus-codec.org/>.\n\
    \   Some of the changes in this document update normative behavior in a\n   way\
    \ that requires new test vectors.  Only the C implementation is\n   affected,\
    \ not the English text of the specification.  This\n   specification remains fully\
    \ compatible with RFC 6716 [RFC6716].\n   Note: Due to RFC formatting conventions,\
    \ lines exceeding the column\n   width in the patch are split using a backslash\
    \ character.  The\n   backslashes at the end of a line and the white space at\
    \ the beginning\n   of the following line are not part of the patch.  Referenced\
    \ line\n   numbers are approximations.  A properly formatted patch including all\n\
    \   changes is available at <https://www.ietf.org/proceedings/98/slides/\n   materials-98-codec-opus-update-00.patch>\
    \ and has a SHA-1 hash of\n   029e3aa88fc342c91e67a21e7bfbc9458661cd5f.\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\"\
    , \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted as described\
    \ in\n   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all\n\
    \   capitals, as shown here.\n"
- title: 3.  Stereo State Reset in SILK
  contents:
  - "3.  Stereo State Reset in SILK\n   The reference implementation does not reinitialize\
    \ the stereo state\n   during a mode switch.  The old stereo memory can produce\
    \ a brief\n   impulse (i.e., single sample) in the decoded audio.  This can be\n\
    \   fixed by changing silk/dec_API.c around line 72:\n   <CODE BEGINS>\n     \
    \   for( n = 0; n < DECODER_NUM_CHANNELS; n++ ) {\n            ret  = silk_init_decoder(\
    \ &channel_state[ n ] );\n        }\n   +    silk_memset(&((silk_decoder *)decState)->sStereo,\
    \ 0,\n   +                sizeof(((silk_decoder *)decState)->sStereo));\n   +\
    \    /* Not strictly needed, but it's cleaner that way */\n   +    ((silk_decoder\
    \ *)decState)->prev_decode_only_middle = 0;\n        return ret;\n    }\n   <CODE\
    \ ENDS>\n   This change affects the normative output of the decoder, but the\n\
    \   amount of change is within the tolerance and is too small to make the\n  \
    \ test vector check fail.\n"
- title: 4.  Parsing of the Opus Packet Padding
  contents:
  - "4.  Parsing of the Opus Packet Padding\n   It was discovered that some invalid\
    \ packets of a very large size\n   could trigger an out-of-bounds read in the\
    \ Opus packet parsing code\n   responsible for padding.  This is due to an integer\
    \ overflow if the\n   signaled padding exceeds 2^31-1 bytes (the actual packet\
    \ may be\n   smaller).  The code can be fixed by decrementing the (signed) len\n\
    \   value, instead of incrementing a separate padding counter.  This is\n   done\
    \ by applying the following changes around line 596 of\n   src/opus_decoder.c:\n\
    \   <CODE BEGINS>\n          /* Padding flag is bit 6 */\n          if (ch&0x40)\n\
    \          {\n   -         int padding=0;\n             int p;\n             do\
    \ {\n                if (len<=0)\n                   return OPUS_INVALID_PACKET;\n\
    \                p = *data++;\n                len--;\n   -            padding\
    \ += p==255 ? 254: p;\n   +            len -= p==255 ? 254: p;\n             }\
    \ while (p==255);\n   -         len -= padding;\n          }\n   <CODE ENDS>\n\
    \   This packet-parsing issue is limited to reading memory up to about 60\n  \
    \ KB beyond the compressed buffer.  This can only be triggered by a\n   compressed\
    \ packet more than about 16 MB long, so it's not a problem\n   for RTP.  In theory,\
    \ it could crash a file decoder (e.g., Opus in\n   Ogg) if the memory just after\
    \ the incoming packet is out of range,\n   but our attempts to trigger such a\
    \ crash in a production application\n   built using an affected version of the\
    \ Opus decoder failed.\n"
- title: 5.  Resampler Buffer
  contents:
  - "5.  Resampler Buffer\n   The SILK resampler had the following issues:\n   1.\
    \  The calls to memcpy() were using sizeof(opus_int32), but the type\n       of\
    \ the local buffer was opus_int16.\n   2.  Because the size was wrong, this potentially\
    \ allowed the source\n       and destination regions of the memcpy() to overlap\
    \ on the copy\n       from \"buf\" to \"buf\".  We believe that nSamplesIn (number\
    \ of input\n       samples) is at least fs_in_khZ (sampling rate in kHz), which\
    \ is\n       at least 8.  Since RESAMPLER_ORDER_FIR_12 is only 8, that should\n\
    \       not be a problem once the type size is fixed.\n   3.  The size of the\
    \ buffer used RESAMPLER_MAX_BATCH_SIZE_IN, but the\n       data stored in it was\
    \ actually twice the input batch size\n       (nSamplesIn<<1).\n   The code can\
    \ be fixed by applying the following changes around line\n   78 of silk/resampler_private_IIR_FIR.c:\n\
    \   <CODE BEGINS>\n    )\n    {\n        silk_resampler_state_struct *S = \\\n\
    \   (silk_resampler_state_struct *)SS;\n        opus_int32 nSamplesIn;\n     \
    \   opus_int32 max_index_Q16, index_increment_Q16;\n   -    opus_int16 buf[ RESAMPLER_MAX_BATCH_SIZE_IN\
    \ + \\\n   RESAMPLER_ORDER_FIR_12 ];\n   +    opus_int16 buf[ 2*RESAMPLER_MAX_BATCH_SIZE_IN\
    \ + \\\n   RESAMPLER_ORDER_FIR_12 ];\n        /* Copy buffered samples to start\
    \ of buffer */\n   -    silk_memcpy( buf, S->sFIR, RESAMPLER_ORDER_FIR_12 \\\n\
    \   * sizeof( opus_int32 ) );\n   +    silk_memcpy( buf, S->sFIR, RESAMPLER_ORDER_FIR_12\
    \ \\\n   * sizeof( opus_int16 ) );\n        /* Iterate over blocks of frameSizeIn\
    \ input samples */\n        index_increment_Q16 = S->invRatio_Q16;\n        while(\
    \ 1 ) {\n            nSamplesIn = silk_min( inLen, S->batchSize );\n         \
    \   /* Upsample 2x */\n            silk_resampler_private_up2_HQ( S->sIIR, &buf[\
    \ \\\n   RESAMPLER_ORDER_FIR_12 ], in, nSamplesIn );\n            max_index_Q16\
    \ = silk_LSHIFT32( nSamplesIn, 16 + 1 \\\n   );         /* + 1 because 2x upsampling\
    \ */\n            out = silk_resampler_private_IIR_FIR_INTERPOL( out, \\\n   buf,\
    \ max_index_Q16, index_increment_Q16 );\n            in += nSamplesIn;\n     \
    \       inLen -= nSamplesIn;\n            if( inLen > 0 ) {\n                /*\
    \ More iterations to do; copy last part of \\\n   filtered signal to beginning\
    \ of buffer */\n   -            silk_memcpy( buf, &buf[ nSamplesIn << 1 ], \\\n\
    \   RESAMPLER_ORDER_FIR_12 * sizeof( opus_int32 ) );\n   +            silk_memmove(\
    \ buf, &buf[ nSamplesIn << 1 ], \\\n   RESAMPLER_ORDER_FIR_12 * sizeof( opus_int16\
    \ ) );\n            } else {\n                break;\n            }\n        }\n\
    \        /* Copy last part of filtered signal to the state for \\\n   the next\
    \ call */\n   -    silk_memcpy( S->sFIR, &buf[ nSamplesIn << 1 ], \\\n   RESAMPLER_ORDER_FIR_12\
    \ * sizeof( opus_int32 ) );\n   +    silk_memcpy( S->sFIR, &buf[ nSamplesIn <<\
    \ 1 ], \\\n   RESAMPLER_ORDER_FIR_12 * sizeof( opus_int16 ) );\n    }\n   <CODE\
    \ ENDS>\n"
- title: 6.  Integer Wrap-Around in Inverse Gain Computation
  contents:
  - "6.  Integer Wrap-Around in Inverse Gain Computation\n   It was discovered through\
    \ decoder fuzzing that some bitstreams could\n   produce integer values exceeding\
    \ 32 bits in\n   LPC_inverse_pred_gain_QA(), causing a wrap-around.  The C standard\n\
    \   considers this behavior as undefined.  The following patch around\n   line\
    \ 87 of silk/LPC_inv_pred_gain.c detects values that do not fit in\n   a 32-bit\
    \ integer and considers the corresponding filters unstable:\n  <CODE BEGINS>\n\
    \           /* Update AR coefficient */\n           for( n = 0; n < k; n++ ) {\n\
    \  -            tmp_QA = Aold_QA[ n ] - MUL32_FRAC_Q( \\\n  Aold_QA[ k - n - 1\
    \ ], rc_Q31, 31 );\n  -            Anew_QA[ n ] = MUL32_FRAC_Q( tmp_QA, rc_mult2\
    \ , mult2Q );\n  +            opus_int64 tmp64;\n  +            tmp_QA = silk_SUB_SAT32(\
    \ Aold_QA[ n ], MUL32_FRAC_Q( \\\n  Aold_QA[ k - n - 1 ], rc_Q31, 31 ) );\n  +\
    \            tmp64 = silk_RSHIFT_ROUND64( silk_SMULL( tmp_QA, \\\n  rc_mult2 ),\
    \ mult2Q);\n  +            if( tmp64 > silk_int32_MAX || tmp64 < silk_int32_MIN\
    \ ) {\n  +               return 0;\n  +            }\n  +            Anew_QA[\
    \ n ] = ( opus_int32 )tmp64;\n           }\n  <CODE ENDS>\n"
- title: 7.  Integer Wrap-Around in LSF Decoding
  contents:
  - "7.  Integer Wrap-Around in LSF Decoding\n   It was discovered -- also from decoder\
    \ fuzzing -- that an integer\n   wrap-around could occur when decoding bitstreams\
    \ with extremely large\n   values for the high Line Spectral Frequency (LSF) parameters.\
    \  The\n   end result of the wrap-around is an illegal read access on the stack,\n\
    \   which the authors do not believe is exploitable but should\n   nonetheless\
    \ be fixed.  The following patch around line 137 of silk/\n   NLSF_stabilize.c\
    \ prevents the problem:\n   <CODE BEGINS>\n              /* Keep delta_min distance\
    \ between the NLSFs */\n            for( i = 1; i < L; i++ )\n   -           \
    \ NLSF_Q15[i] = silk_max_int( NLSF_Q15[i], \\\n   NLSF_Q15[i-1] + NDeltaMin_Q15[i]\
    \ );\n   +            NLSF_Q15[i] = silk_max_int( NLSF_Q15[i], \\\n   silk_ADD_SAT16(\
    \ NLSF_Q15[i-1], NDeltaMin_Q15[i] ) );\n            /* Last NLSF should be no\
    \ higher than 1 - NDeltaMin[L] */\n   <CODE ENDS>\n"
- title: 8.  Cap on Band Energy
  contents:
  - "8.  Cap on Band Energy\n   On extreme bitstreams, it is possible for log-domain\
    \ band energy\n   levels to exceed the maximum single-precision floating point\
    \ value\n   once converted to a linear scale.  This would later cause the decoded\n\
    \   values to be NaN (not a number), possibly causing problems in the\n   software\
    \ using the PCM values.  This can be avoided with the\n   following patch around\
    \ line 552 of celt/quant_bands.c:\n   <CODE BEGINS>\n          {\n           \
    \  opus_val16 lg = ADD16(oldEBands[i+c*m->nbEBands],\n                       \
    \      SHL16((opus_val16)eMeans[i],6));\n   +         lg = MIN32(QCONST32(32.f,\
    \ 16), lg);\n             eBands[i+c*m->nbEBands] = PSHR32(celt_exp2(lg),4);\n\
    \          }\n          for (;i<m->nbEBands;i++)\n   <CODE ENDS>\n"
- title: 9.  Hybrid Folding
  contents:
  - "9.  Hybrid Folding\n   When encoding in hybrid mode at low bitrate, we sometimes\
    \ only have\n   enough bits to code a single Constrained-Energy Lapped Transform\n\
    \   (CELT) band (8 - 9.6 kHz).  When that happens, the second band (CELT\n   band\
    \ 18, from 9.6 - 12 kHz) cannot use folding because it is wider\n   than the amount\
    \ already coded and falls back to white noise.  Because\n   it can also happen\
    \ on transients (e.g., stops), it can cause audible\n   pre-echo.\n   To address\
    \ the issue, we change the folding behavior so that it is\n   never forced to\
    \ fall back to Linear Congruential Generator (LCG) due\n   to the first band not\
    \ containing enough coefficients to fold onto the\n   second band.  This is achieved\
    \ by simply repeating part of the first\n   band in the folding of the second\
    \ band.  This changes the code in\n   celt/bands.c around line 1237:\n  <CODE\
    \ BEGINS>\n            b = 0;\n         }\n  -      if (resynth && M*eBands[i]-N\
    \ >= M*eBands[start] && \\\n  (update_lowband || lowband_offset==0))\n  +    \
    \  if (resynth && (M*eBands[i]-N >= M*eBands[start] || \\\n  i==start+1) && (update_lowband\
    \ || lowband_offset==0))\n               lowband_offset = i;\n  +      if (i ==\
    \ start+1)\n  +      {\n  +         int n1, n2;\n  +         int offset;\n  +\
    \         n1 = M*(eBands[start+1]-eBands[start]);\n  +         n2 = M*(eBands[start+2]-eBands[start+1]);\n\
    \  +         offset = M*eBands[start];\n  +         /* Duplicate enough of the\
    \ first band folding data to \\\n  be able to fold the second band.\n  +     \
    \       Copies no data for CELT-only mode. */\n  +         OPUS_COPY(&norm[offset+n1],\
    \ &norm[offset+2*n1 - n2], n2-n1);\n  +         if (C==2)\n  +            OPUS_COPY(&norm2[offset+n1],\
    \ &norm2[offset+2*n1 - n2], \\\n  n2-n1);\n  +      }\n  +\n         tf_change\
    \ = tf_res[i];\n         if (i>=m->effEBands)\n         {\n  <CODE ENDS>\n   as\
    \ well as around line 1260:\n   <CODE BEGINS>\n             fold_start = lowband_offset;\n\
    \             while(M*eBands[--fold_start] > effective_lowband);\n           \
    \  fold_end = lowband_offset-1;\n   -         while(M*eBands[++fold_end] < effective_lowband+N);\n\
    \   +         while(++fold_end < i && M*eBands[fold_end] < \\\n   effective_lowband+N);\n\
    \             x_cm = y_cm = 0;\n             fold_i = fold_start; do {\n     \
    \          x_cm |= collapse_masks[fold_i*C+0];\n   <CODE ENDS>\n   The fix does\
    \ not impact compatibility, because the improvement does\n   not depend on the\
    \ encoder doing anything special.  There is also no\n   reasonable way for an\
    \ encoder to use the original behavior to improve\n   quality over the proposed\
    \ change.\n"
- title: 10.  Downmix to Mono
  contents:
  - "10.  Downmix to Mono\n   The last issue is not strictly a bug, but it is an issue\
    \ that has\n   been reported when downmixing an Opus decoded stream to mono, whether\n\
    \   this is done inside the decoder or as a post-processing step on the\n   stereo\
    \ decoder output.  Opus intensity stereo allows optionally\n   coding the two\
    \ channels 180 degrees out of phase on a per-band basis.\n   This provides better\
    \ stereo quality than forcing the two channels to\n   be in phase, but when the\
    \ output is downmixed to mono, the energy in\n   the affected bands is canceled,\
    \ sometimes resulting in audible\n   artifacts.\n   As a work-around for this\
    \ issue, the decoder MAY choose not to apply\n   the 180-degree phase shift. \
    \ This can be useful when downmixing to\n   mono inside or outside of the decoder\
    \ (e.g., requested explicitly\n   from an API).\n"
- title: 11.  New Test Vectors
  contents:
  - "11.  New Test Vectors\n   Changes in Sections 9 and 10 have sufficient impact\
    \ on the test\n   vectors to make them fail.  For this reason, this document also\n\
    \   updates the Opus test vectors.  The new test vectors now include two\n   decoded\
    \ outputs for the same bitstream.  The outputs with suffix 'm'\n   do not apply\
    \ the CELT 180-degree phase shift as allowed in\n   Section 10, while the outputs\
    \ without the suffix do.  An\n   implementation is compliant as long as it passes\
    \ either set of\n   vectors.\n   Any Opus implementation that passes either the\
    \ original test vectors\n   from RFC 6716 [RFC6716] or one of the new sets of\
    \ test vectors is\n   compliant with the Opus specification.  However, newer\n\
    \   implementations SHOULD be based on the new test vectors rather than\n   the\
    \ old ones.\n   The new test vectors are located at\n   <https://www.ietf.org/proceedings/98/slides/materials-98-codec-opus-\n\
    \   newvectors-00.tar.gz>.  The SHA-1 hashes of the test vectors are:\n   e49b2862ceec7324790ed8019eb9744596d5be01\
    \  testvector01.bit\n   b809795ae1bcd606049d76de4ad24236257135e0  testvector02.bit\n\
    \   e0c4ecaeab44d35a2f5b6575cd996848e5ee2acc  testvector03.bit\n   a0f870cbe14ebb71fa9066ef3ee96e59c9a75187\
    \  testvector04.bit\n   9b3d92b48b965dfe9edf7b8a85edd4309f8cf7c8  testvector05.bit\n\
    \   28e66769ab17e17f72875283c14b19690cbc4e57  testvector06.bit\n   bacf467be3215fc7ec288f29e2477de1192947a6\
    \  testvector07.bit\n   ddbe08b688bbf934071f3893cd0030ce48dba12f  testvector08.bit\n\
    \   3932d9d61944dab1201645b8eeaad595d5705ecb  testvector09.bit\n   521eb2a1e0cc9c31b8b740673307c2d3b10c1900\
    \  testvector10.bit\n   6bc8f3146fcb96450c901b16c3d464ccdf4d5d96  testvector11.bit\n\
    \   338c3f1b4b97226bc60bc41038becbc6de06b28f  testvector12.bit\n   f5ef93884da6a814d311027918e9afc6f2e5c2c8\
    \  testvector01.dec\n   48ac1ff1995250a756e1e17bd32acefa8cd2b820  testvector02.dec\n\
    \   d15567e919db2d0e818727092c0af8dd9df23c95  testvector03.dec\n   1249dd28f5bd1e39a66fd6d99449dca7a8316342\
    \  testvector04.dec\n   b85675d81deef84a112c466cdff3b7aaa1d2fc76  testvector05.dec\n\
    \   55f0b191e90bfa6f98b50d01a64b44255cb4813e  testvector06.dec\n   61e8b357ab090b1801eeb578a28a6ae935e25b7b\
    \  testvector07.dec\n   a58539ee5321453b2ddf4c0f2500e856b3966862  testvector08.dec\n\
    \   bb96aad2cde188555862b7bbb3af6133851ef8f4  testvector09.dec\n   1b6cdf0413ac9965b16184b1bea129b5c0b2a37a\
    \  testvector10.dec\n   b1fff72b74666e3027801b29dbc48b31f80dee0d  testvector11.dec\n\
    \   98e09bbafed329e341c3b4052e9c4ba5fc83f9b1  testvector12.dec\n   1e7d984ea3fbb16ba998aea761f4893fbdb30157\
    \  testvector01m.dec\n   48ac1ff1995250a756e1e17bd32acefa8cd2b820  testvector02m.dec\n\
    \   d15567e919db2d0e818727092c0af8dd9df23c95  testvector03m.dec\n   1249dd28f5bd1e39a66fd6d99449dca7a8316342\
    \  testvector04m.dec\n   d70b0bad431e7d463bc3da49bd2d49f1c6d0a530  testvector05m.dec\n\
    \   6ac1648c3174c95fada565161a6c78bdbe59c77d  testvector06m.dec\n   fc5e2f709693738324fb4c8bdc0dad6dda04e713\
    \  testvector07m.dec\n   aad2ba397bf1b6a18e8e09b50e4b19627d479f00  testvector08m.dec\n\
    \   6feb7a7b9d7cdc1383baf8d5739e2a514bd0ba08  testvector09m.dec\n   1b6cdf0413ac9965b16184b1bea129b5c0b2a37a\
    \  testvector10m.dec\n   fd3d3a7b0dfbdab98d37ed9aa04b659b9fefbd18  testvector11m.dec\n\
    \   98e09bbafed329e341c3b4052e9c4ba5fc83f9b1  testvector12m.dec\n   Note that\
    \ the decoder input bitstream files (.bit) are unchanged.\n"
- title: 12.  Security Considerations
  contents:
  - "12.  Security Considerations\n   This document fixes two security issues reported\
    \ on Opus that affect\n   the reference implementation in RFC 6716 [RFC6716]:\
    \ CVE-2013-0899\n   <https://nvd.nist.gov/vuln/detail/CVE-2013-0899> and CVE-2017-0381\n\
    \   <https://nvd.nist.gov/vuln/detail/CVE-2017-0381>.  CVE-2013-0899\n   theoretically\
    \ could have caused an information leak.  The leaked\n   information would have\
    \ gone through the decoder process before being\n   accessible to the attacker.\
    \  The update in Section 4 fixes this.\n   CVE-2017-0381 could have resulted in\
    \ a 16-bit out-of-bounds read from\n   a fixed location.  The update in Section\
    \ 7 fixes this.  Beyond the\n   two fixed Common Vulnerabilities and Exposures\
    \ (CVEs), this document\n   adds no new security considerations beyond those in\
    \ RFC 6716\n   [RFC6716].\n"
- title: 13.  IANA Considerations
  contents:
  - "13.  IANA Considerations\n   This document does not require any IANA actions.\n"
- title: 14.  Normative References
  contents:
  - "14.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n  \
    \            DOI 10.17487/RFC2119, March 1997,\n              <https://www.rfc-editor.org/info/rfc2119>.\n\
    \   [RFC6716]  Valin, JM., Vos, K., and T. Terriberry, \"Definition of the\n \
    \             Opus Audio Codec\", RFC 6716, DOI 10.17487/RFC6716,\n          \
    \    September 2012, <https://www.rfc-editor.org/info/rfc6716>.\n   [RFC8174]\
    \  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n              2119\
    \ Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n              May 2017,\
    \ <https://www.rfc-editor.org/info/rfc8174>.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   We would like to thank Juri Aedla for reporting the issue\
    \ with the\n   parsing of the Opus padding.  Thanks to Felicia Lim for reporting\
    \ the\n   LSF integer overflow issue.  Also, thanks to Tina le Grand, Jonathan\n\
    \   Lennox, and Mark Harris for their feedback on this document.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Jean-Marc Valin\n   Mozilla Corporation\n   331 E. Evelyn\
    \ Avenue\n   Mountain View, CA  94041\n   United States of America\n   Phone:\
    \ +1 650 903-0800\n   Email: jmvalin@jmvalin.ca\n   Koen Vos\n   vocTone\n   Email:\
    \ koenvos74@gmail.com\n"
