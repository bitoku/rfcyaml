- contents:
  - "        Encoding of Attributes for MPLS LSP Establishment Using\n      Resource
    Reservation Protocol Traffic Engineering (RSVP-TE)\n"
  title: __initial_text__
- contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2009 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents
    (http://trustee.ietf.org/\n   license-info) in effect on the date of publication
    of this document.\n   Please review these documents carefully, as they describe
    your rights\n   and restrictions with respect to this document.\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   Multiprotocol Label Switching (MPLS) Label Switched Paths (LSPs)
    may\n   be established using the Resource Reservation Protocol Traffic\n   Engineering
    (RSVP-TE) extensions.  This protocol includes an object\n   (the SESSION_ATTRIBUTE
    object) that carries a Flags field used to\n   indicate options and attributes
    of the LSP.  That Flags field has\n   eight bits, allowing for eight options to
    be set.  Recent proposals\n   in many documents that extend RSVP-TE have suggested
    uses for each of\n   the previously unused bits.\n   This document defines a new
    object for RSVP-TE messages that allows\n   the signaling of further attribute
    bits and also the carriage of\n   arbitrary attribute parameters to make RSVP-TE
    easily extensible to\n   support new requirements.  Additionally, this document
    defines a way\n   to record the attributes applied to the LSP on a hop-by-hop
    basis.\n   The object mechanisms defined in this document are equally applicable\n
    \  to Generalized MPLS (GMPLS) Packet Switch Capable (PSC) LSPs and to\n   GMPLS
    non-PSC LSPs.\n   This document replaces and obsoletes the previous version of
    this\n   work, published as RFC 4420.  The only change is in the encoding of\n
    \  the Type-Length-Variable (TLV) data structures.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1. Introduction and Problem Statement ..............................4\n
    \     1.1. Applicability to Generalized MPLS ..........................5\n      1.2.
    A Rejected Alternate Solution ..............................5\n   2. Terminology
    .....................................................6\n   3. Attributes TLVs
    .................................................6\n      3.1. Attribute Flags
    TLV ........................................7\n   4. LSP_ATTRIBUTES Object ...........................................8\n
    \     4.1. Format .....................................................9\n      4.2.
    Generic Processing Rules for Path Messages .................9\n      4.3. Generic
    Processing Rules for Resv Messages .................9\n   5. LSP_REQUIRED_ATTRIBUTES
    Object .................................10\n      5.1. Format ....................................................11\n
    \     5.2. Generic Processing Rules ..................................11\n   6.
    Inheritance Rules ..............................................11\n   7. Recording
    Attributes Per LSP ...................................12\n      7.1. Requirements
    ..............................................12\n      7.2. RRO Attributes Subobject
    ..................................12\n      7.3. Procedures ................................................13\n
    \          7.3.1. Subobject Presence Rules ...........................13\n           7.3.2.
    Reporting Compliance with LSP Attributes ...........14\n           7.3.3. Reporting
    Per-Hop Attributes .......................14\n           7.3.4. Default Behavior
    ...................................14\n   8. Summary of Attribute Bit Allocation
    ............................14\n   9. Message Formats ................................................15\n
    \  10. Guidance for Key Application Scenarios ........................16\n      10.1.
    Communicating to Egress LSRs .............................16\n      10.2. Communicating
    to Key Transit LSRs ........................17\n      10.3. Communicating to All
    LSRs ................................17\n   11. IANA Considerations ...........................................17\n
    \     11.1. New RSVP C-Nums and C-Types ..............................17\n      11.2.
    New TLV Space ............................................18\n      11.3. Attribute
    Flags ..........................................19\n      11.4. New Error Codes
    ..........................................19\n      11.5. New Record Route Subobject
    Identifier ....................19\n   12. Security Considerations .......................................20\n
    \  13. Acknowledgements ..............................................20\n   14.
    Changes from RFC 4420 to RFC 5420 .............................20\n   15. Normative
    References ..........................................21\n   16. Informative References
    ........................................21\n"
  title: Table of Contents
- contents:
  - "1.  Introduction and Problem Statement\n   This document replaces and obsoletes
    the previous version of this\n   work, published as RFC 4420 [RFC4420].  The only
    change is in the\n   encoding of the Type-Length-Variable (TLV) data structures
    presented\n   in Section 3.  See Section 14 for a summary of changes.\n   Traffic-Engineered
    Multiprotocol Label Switching (MPLS) Label\n   Switched Paths (LSPs) [RFC3031]
    may be set up using the Path message\n   of the RSVP-TE signaling protocol [RFC3209].
    \ The Path message\n   includes the SESSION_ATTRIBUTE object, which carries a
    Flags field\n   used to indicate desired options and attributes of the LSP.\n
    \  The Flags field in the SESSION_ATTRIBUTE object has eight bits.  Just\n   three
    of those bits are assigned in [RFC3209].  A further two bits\n   are assigned
    in [RFC4090] for fast re-reroute functionality, leaving\n   only three bits available.
    \ Several recent proposals and Internet\n   Drafts have demonstrated that there
    is a high demand for the use of\n   the other three bits.  Some, if not all, of
    those proposals are\n   likely to go forward as RFCs, resulting in depletion or
    near\n   depletion of the Flags field and a consequent difficulty in signaling\n
    \  new options and attributes that may be developed in the future.\n   This document
    defines a new object for RSVP-TE messages that allows\n   the signaling of further
    attributes bits.  The new object is\n   constructed from TLVs, and a new TLV is
    defined to carry a variable\n   number of attributes bits.\n   The new RSVP-TE
    message object is quite flexible, due to the use of\n   the TLV format and allows:\n
    \  - future specification of bit flags\n   - additional options and attribute
    parameters carried in TLV format\n   Note that the LSP Attributes defined in this
    document are\n   specifically scoped to an LSP.  They may be set differently on\n
    \  separate LSPs with the same Tunnel ID between the same source and\n   destination
    (that is, within the same session).\n   It is noted that some options and attributes
    do not need to be acted\n   on by all Label Switched Routers (LSRs) along the
    path of the LSP.\n   In particular, these options and attributes may apply only
    to key\n   LSRs on the path, such as the ingress LSR and egress LSR.  Special\n
    \  transit LSRs, such as Area or Autonomous System Border Routers (ABRs\n   or
    ASBRs), may also fall into this category.  This means that the new\n   options
    and attributes should be signaled transparently, and only\n   examined at those
    points that need to act on them.\n   On the other hand, other options and attributes
    may require action at\n   all transit LSRs along the path of the LSP.  Inability
    to support the\n   required attributes by one of those transit LSRs may require
    the LSR\n   to refuse the establishment of the LSP.\n   These considerations are
    particularly important in the context of\n   backward compatibility.  In general,
    it should be possible to provide\n   new MPLS services across a legacy network
    without upgrading those\n   LSRs that do not need to participate actively in the
    new services.\n   Moreover, some features just require action on specific intermediate\n
    \  hops, not on every visited LSR.\n   Note that options already specified for
    the SESSION_ATTRIBUTE object\n   in preexisting RFCs are not migrated to the new
    mechanisms described\n   in this document.\n   RSVP includes a way for unrecognized
    objects to be transparently\n   forwarded by transit nodes without them refusing
    the incoming\n   protocol messages and without the objects being stripped from
    the\n   outgoing protocol message (see [RFC2205], Section 3.10).  This\n   capability
    extends to RSVP-TE and provides a good way to ensure that\n   only those LSRs
    that understand a particular object examine it.\n   This document distinguishes
    between options and attributes that are\n   only required at key LSRs along the
    path of the LSP, and those that\n   must be acted on by every LSR along the LSP.
    \ Two LSP Attributes\n   objects are defined in this document; using the C-Num
    definition\n   rules inherited from [RFC2205], the first is passed transparently
    by\n   LSRs that do not recognize it, and the second causes LSP setup\n   failure
    with the generation of a PathErr message with an appropriate\n   Error Code if
    an LSR does not recognize it.\n"
  - contents:
    - "1.1.  Applicability to Generalized MPLS\n   The RSVP-TE signaling protocol
      also forms the basis of a signaling\n   protocol for Generalized MPLS (GMPLS)
      as described in [RFC3471] and\n   [RFC3473].  The extensions described in this
      document are equally\n   applicable to MPLS and GMPLS.\n"
    title: 1.1.  Applicability to Generalized MPLS
  - contents:
    - "1.2.  A Rejected Alternate Solution\n   A rejected alternate solution was to
      define a new C-Type for the\n   existing SESSION_ATTRIBUTE object.  This new
      C-Type could allow a\n   larger Flags field and address the immediate problem.\n
      \  This solution was rejected because:\n   - A new C-Type is not backward compatible
      with deployed\n     implementations that expect to see a C-Type of 1 or 7.  It
      is\n     important that any solution be capable of carrying new attributes\n
      \    transparently across legacy LSRs if those LSRs are not required to\n     act
      on the attributes.\n   - Support for arbitrary attributes parameters through
      TLVs would have\n     meant a significant change of substance to the existing
      object.\n"
    title: 1.2.  A Rejected Alternate Solution
  title: 1.  Introduction and Problem Statement
- contents:
  - "2.  Terminology\n   This document uses terminology from the MPLS architecture
    document\n   [RFC3031] and from the RSVP-TE protocol specification [RFC3209],\n
    \  which inherits from the RSVP specification [RFC2205].  It also makes\n   use
    of the Generalized MPLS RSVP-TE terminology introduced in\n   [RFC3471] and [RFC3473].\n
    \  The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n
    \  \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this\n
    \  document are to be interpreted as described in [RFC2119].\n"
  title: 2.  Terminology
- contents:
  - "3.  Attributes TLVs\n   Attributes carried by the new objects defined in this
    document are\n   encoded within TLVs.  One or more TLVs may be present in each
    object.\n   There are no ordering rules for TLVs, and no interpretation should
    be\n   placed on the order in which TLVs are received.\n   Each TLV is encoded
    as follows.\n    0                   1                   2                   3\n
    \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |             Type              |           Length              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |                                                               |\n   //                            Value
    \                           //\n   |                                                               |\n
    \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      Type\n
    \        The identifier of the TLV.\n      Length\n         Indicates the total
    length of the TLV in octets.  That is, the\n         combined length of the Type,
    Length, and Value fields, i.e.,\n         four plus the length of the Value field
    in octets.\n         The entire TLV MUST be padded with between zero and three\n
    \        trailing zeros to make it four-octet aligned.  The Length field\n         does
    not count any padding.\n      Value\n         The data carried in the TLV.\n"
  - contents:
    - "3.1.  Attribute Flags TLV\n   This document defines only one TLV type value.
      \ Type 1 indicates the\n   Attribute Flags TLV.  Other TLV types may be defined
      in the future\n   with type values assigned by IANA (see Section 11.2).\n   The
      Attribute Flags TLV may be present in an LSP_ATTRIBUTES object\n   and/or an
      LSP_REQUIRED_ATTRIBUTES object, defined in Sections 4 and\n   5.  The bits in
      the TLV represent the same attributes regardless of\n   which object carries
      the TLV.  Documents that define individual bits\n   MUST specify whether the
      bit may be set in one object, the other, or\n   both.  It is not expected that
      a bit will be set in both objects on a\n   single Path message at the same time,
      but this is not ruled out by\n   this document.\n   The Attribute Flags TLV
      Value field is an array of units of 32 flags\n   numbered from the most significant
      bit as bit zero.  The Length field\n   for this TLV is therefore always a multiple
      of four bytes, regardless\n   of the number of bits carried, and no padding
      is required.\n   Unassigned bits are considered as reserved and MUST be set
      to zero on\n   transmission by the originator of the object.  Bits not contained
      in\n   the TLV MUST be assumed to be set to zero.  If the TLV is absent\n   either
      because it is not contained in the LSP_ATTRIBUTES or\n   LSP_REQUIRED_ATTRIBUTES
      object, or because those objects are\n   themselves absent, all processing MUST
      be performed as though the\n   bits were present and set to zero.  That is to
      say, assigned bits\n   that are not present either because the TLV is deliberately\n
      \  foreshortened or because the TLV is not included MUST be treated as\n   though
      they are present and are set to zero.\n   No bits are defined in this document.
      \ The assignment of bits is\n   managed by IANA (see Section 11.3).\n"
    title: 3.1.  Attribute Flags TLV
  title: 3.  Attributes TLVs
- contents:
  - "4.  LSP_ATTRIBUTES Object\n   The LSP_ATTRIBUTES object is used to signal attributes
    required in\n   support of an LSP, or to indicate the nature or use of an LSP
    where\n   that information is not required to be acted on by all transit LSRs.\n
    \  Specifically, if an LSR does not support the object, it forwards it\n   unexamined
    and unchanged.  This facilitates the exchange of\n   attributes across legacy
    networks that do not support this new\n   object.\n   This object effectively
    extends the Flags field in the\n   SESSION_ATTRIBUTE object and allows for the
    future inclusion of more\n   complex objects through TLVs.\n   Note that some
    function may require an LSR to inspect both the\n   SESSION_ATTRIBUTE object and
    the LSP_ATTRIBUTES or\n   LSP_REQUIRED_ATTRIBUTES object.\n   The LSP_ATTRIBUTES
    object may also be used to report LSP operational\n   state on a Resv message
    even when no LSP_ATTRIBUTES or\n   LSP_REQUIRED_ATTRIBUTES object was carried
    on the corresponding Path\n   message.  The object is added or updated by LSRs
    that support the\n   object.  LSRs that do not understand the object or have nothing
    to\n   report do not add the object and forward it unchanged on Resv\n   messages
    that they generate.\n   The LSP_ATTRIBUTES object class is 197 of the form 11bbbbbb.
    \ This\n   C-Num value (see [RFC2205], Section 3.10) ensures that LSRs that do\n
    \  not recognize the object pass it on transparently.\n   One C-Type is defined,
    C-Type = 1 for LSP Attributes.\n   This object is optional and may be placed on
    Path messages to convey\n   additional information about the desired attributes
    of the LSP, and\n   on Resv messages to report operational state.\n"
  - contents:
    - "4.1.  Format\n   LSP_ATTRIBUTES class = 197, C-Type = 1\n    0                   1
      \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
      5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                                                               |\n   //
      \                      Attributes TLVs                       //\n   |                                                               |\n
      \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   The
      Attributes TLVs are encoded as described in Section 3.\n"
    title: 4.1.  Format
  - contents:
    - "4.2.  Generic Processing Rules for Path Messages\n   An LSR that does not support
      this object is required to pass it on\n   unaltered, as indicated by the C-Num
      and the rules defined in\n   [RFC2205].\n   An LSR that does support this object
      but does not recognize a TLV\n   type code carried in this object MUST pass
      the TLV on unaltered in\n   the LSP_ATTRIBUTES object that it places in the
      Path message that it\n   sends downstream.\n   An LSR that does support this
      object and recognizes a TLV but does\n   not support the attribute defined by
      the TLV MUST act as specified in\n   the document that defines the TLV.\n   An
      LSR that supports the Attribute Flags TLV but does not recognize a\n   bit set
      in the Attribute Flags TLV MUST forward the TLV unchanged.\n   An LSR that supports
      the Attribute Flags TLV and recognizes a bit\n   that is set but does not support
      the indicated attribute MUST act as\n   specified in the document that defines
      the bit.\n"
    title: 4.2.  Generic Processing Rules for Path Messages
  - contents:
    - "4.3.  Generic Processing Rules for Resv Messages\n   An LSR that wishes to
      report operational status of an LSP may include\n   this object in a Resv message,
      or update the object that is already\n   carried in a Resv message.\n   Note
      that this usage reports the state of the entire LSP and not the\n   state of
      the LSP at an individual LSR.  This latter function is\n   achieved using the
      LSP Attributes subobject of the Record Route\n   object (RRO) as described in
      Section 7.\n   The bits in the Attributes TLV may be used to report operational\n
      \  status for the whole LSP.  For example, an egress LSR may report a\n   particular
      status by setting a bit.  LSRs within the network that\n   determine that this
      status has not been achieved may clear the bit as\n   they forward the Resv
      message.\n   Observe that LSRs that do not support the object or do not support\n
      \  the function characterized by a particular bit in the Attributes TLV\n   will
      not clear the bit when forwarding the Resv.  Thus, care must be\n   taken in
      defining the usage of this object on a Resv.  The usage of\n   an individual
      bit in the Attributes TLV of the LSP_ATTRIBUTES object\n   on a Resv must be
      fully defined in the document that defines the bit.\n   Additional TLVs may
      also be defined to be carried in this object on a\n   Resv.\n   An LSR that
      does not support this object will pass it on unaltered\n   because of the C-Num.\n"
    title: 4.3.  Generic Processing Rules for Resv Messages
  title: 4.  LSP_ATTRIBUTES Object
- contents:
  - "5.  LSP_REQUIRED_ATTRIBUTES Object\n   The LSP_REQUIRED_ATTRIBUTES object is
    used to signal attributes\n   required in support of an LSP, or to indicate the
    nature or use of an\n   LSP where that information MUST be inspected at each transit
    LSR.\n   Specifically, each transit LSR MUST examine the attributes in the\n   LSP_REQUIRED_ATTRIBUTES
    object and MUST NOT forward the object\n   without acting on its contents.\n   This
    object effectively extends the Flags field in the\n   SESSION_ATTRIBUTE object
    and allows for the future inclusion of more\n   complex objects through TLVs.
    \ It complements the LSP_ATTRIBUTES\n   object.\n   The LSP_REQUIRED_ATTRIBUTES
    object class is 67 of the form 0bbbbbbb.\n   This C-Num value ensures that LSRs
    that do not recognize the object\n   reject the LSP setup, effectively saying
    that they do not support the\n   attributes requested.  This means that this object
    SHOULD only be\n   used for attributes that require support at some transit LSRs
    and so\n   require examination at all transit LSRs.  See Section 4 for how end-\n
    \  to-end and selective attributes are signaled.\n   One C-Type is defined, C-Type
    = 1 for LSP Required Attributes.\n   This object is optional and may be placed
    on Path messages to convey\n   additional information about the desired attributes
    of the LSP.\n"
  - contents:
    - "5.1.  Format\n   LSP_REQUIRED_ATTRIBUTES class = 67, C-Type = 1\n    0                   1
      \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
      5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                                                               |\n   //
      \                     Attributes TLVs                        //\n   |                                                               |\n
      \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   The
      Attributes TLVs are encoded as described in Section 3.\n"
    title: 5.1.  Format
  - contents:
    - "5.2.  Generic Processing Rules\n   An LSR that does not support this object
      will use a PathErr to reject\n   the Path message based on the C-Num using the
      Error Code \"Unknown\n   Object Class\".\n   An LSR that does not recognize
      a TLV type code carried in this object\n   MUST reject the Path message using
      a PathErr with Error Code \"Unknown\n   Attributes TLV\" and Error Value set
      to the value of the unknown TLV\n   type code.\n   An LSR that does not recognize
      a bit set in the Attribute Flags TLV\n   MUST reject the Path message using
      a PathErr with Error Code \"Unknown\n   Attributes Bit\" and Error Value set
      to the bit number of the unknown\n   bit in the Attribute Flags.\n   An LSR
      that recognizes an attribute (however encoded) but does not\n   support that
      attribute MUST act according to the behavior specified\n   in the document that
      defines that specific attribute.\n   Note that this object is not used on a
      Resv.  In order to report the\n   status of an LSP, either the LSP_ATTRIBUTES
      object on a Resv or the\n   Attributes subobject in the Record Route object
      (see Section 7) must\n   be used.\n"
    title: 5.2.  Generic Processing Rules
  title: 5.  LSP_REQUIRED_ATTRIBUTES Object
- contents:
  - "6.  Inheritance Rules\n   In certain circumstances, when reaching an LSP region
    boundary, a\n   forwarding adjacency LSP (FA-LSP; see [RFC4206]) is initially
    set up\n   to allow the establishment of the LSP carrying the LSP_ATTRIBUTES\n
    \  and/or LSP_REQUIRED_ATTRIBUTES objects.  In this case, when the\n   boundary
    LSR supports LSP_ATTRIBUTES and LSP_REQUIRED_ATTRIBUTES\n   processing, the FA-LSP
    MAY, upon local policy, inherit a subset of\n   the Attributes TLVs, in particular
    when the FA-LSP belongs to the\n   same switching capability class as the triggering
    LSP.\n   When these conditions are met, the LSP_ATTRIBUTES and/or\n   LSP_REQUIRED_ATTRIBUTES
    objects are simply copied with the inherited\n   Attributes TLVs in the Path message
    used to establish the FA-LSP.  By\n   default (and in order to simplify deployment),
    none of the incoming\n   LSP Attributes TLVs are considered as inheritable.  Note
    that when\n   the FA-LSP establishment itself requires one or more Attributes
    TLVs,\n   an 'OR' operation is performed with the inherited set of values.\n   Documents
    that define individual bits for the LSP Attribute Flags TLV\n   MUST specify whether
    or not these bits MAY be inherited (including\n   the condition to be met in order
    for this inheritance to occur).  The\n   same applies for any other TLV that will
    be defined following the\n   rules specified in Section 3.\n"
  title: 6.  Inheritance Rules
- contents:
  - '7.  Recording Attributes Per LSP

    '
  - contents:
    - "7.1.  Requirements\n   In some circumstances, it is useful to determine which
      of the\n   requested LSP attributes have been applied at which LSRs along the\n
      \  path of the LSP.  For example, an attribute may be requested in the\n   LSP_ATTRIBUTES
      object such that LSRs that do not support the object\n   are not required to
      support the attribute or provide the requested\n   function.  In this case,
      it may be useful to the ingress LSR to know\n   which LSRs acted on the request
      and which ignored it.\n   Additionally, there may be other qualities that need
      to be reported\n   on a hop-by-hop basis.  These are currently indicated in
      the Flags\n   field of RRO subobjects.  Since there are only eight bits available\n
      \  in this field, and since some are already assigned and there is also\n   likely
      to be an increase in allocations in new documents, there is a\n   need for some
      other method to report per-hop attributes.\n"
    title: 7.1.  Requirements
  - contents:
    - "7.2.  RRO Attributes Subobject\n   The RRO Attributes subobject may be carried
      in the RECORD_ROUTE\n   object if it is present.  The subobject uses the standard
      format of\n   an RRO subobject.\n   The length is variable, as for the Attribute
      Flags TLV.  The content\n   is the same as the Attribute Flags TLV -- that is,
      it is a series of\n   bit flags.\n   There is a one-to-one correspondence between
      bits in the Attribute\n   Flags TLV and the RRO Attributes subobject.  If a
      bit is only\n   required in one of the two places, it is reserved in the other
      place.\n   See the procedures sections, below, for more information.\n    0
      \                  1                   2                   3\n    0 1 2 3 4
      5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |      Type     |     Length    |           Reserved            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                                                               |\n   //
      \                      Attribute Flags                       //\n   |                                                               |\n
      \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      Type\n
      \        0x05\n      Length\n         The Length contains the total length of
      the subobject in bytes,\n         including the Type and Length fields.  This
      length must be a\n         multiple of four and must be at least eight.\n      Attribute
      Flags\n         The attribute flags recorded for the specific hop.\n"
    title: 7.2.  RRO Attributes Subobject
  - contents:
    - '7.3.  Procedures

      '
    - contents:
      - "7.3.1.  Subobject Presence Rules\n   As will be clear from [RFC3209], the
        RECORD_ROUTE object is managed\n   as a \"stack\", with each LSR adding subobjects
        to the start of the\n   object.  The Attributes subobject is pushed onto the
        RECORD_ROUTE\n   object immediately prior to pushing the node's IP address
        or link\n   identifier.  Thus, if label recording is being used, the Attributes\n
        \  subobject SHOULD be pushed onto the RECORD_ROUTE object after the\n   Record
        Label subobject(s).\n   A node MUST NOT push an Attributes subobject onto
        the RECORD_ROUTE\n   object without also pushing an IPv4, IPv6, or Unnumbered
        Interface ID\n   subobject.\n   This means that an Attributes subobject is
        bound to the LSR\n   identified by the subobject found in the RRO immediately
        before the\n   Attributes subobject.\n   If the new subobject causes the RRO
        to be too big to fit in a Path\n   (or Resv) message, the processing MUST
        be as described in Section\n   4.4.3 of [RFC3209].\n   If more than one Attributes
        subobject is found between a pair of\n   subobjects that identify LSRs, only
        the first one found (that is, the\n   nearest to the top of the stack) SHALL
        have any meaning within the\n   context of this document.  All such subobjects
        MUST be forwarded\n   unmodified by transit LSRs.\n"
      title: 7.3.1.  Subobject Presence Rules
    - contents:
      - "7.3.2.  Reporting Compliance with LSP Attributes\n   To report compliance
        with an attribute requested in the Attribute\n   Flags TLV, an LSR MAY set
        the corresponding bit (see Section 8) in\n   the Attributes subobject.  To
        report non-compliance, an LSR MAY clear\n   the corresponding bit in the Attributes
        subobject.\n   The requirement to report compliance MUST be specified in the\n
        \  document that defines the usage of any bit.  This will reduce to a\n   statement
        of whether hop-by-hop acknowledgement is required.\n"
      title: 7.3.2.  Reporting Compliance with LSP Attributes
    - contents:
      - "7.3.3.  Reporting Per-Hop Attributes\n   To report a per-hop attribute, an
        LSR sets the appropriate bit in the\n   Attributes subobject.\n   The requirement
        to report a per-hop attribute MUST be specified in\n   the document that defines
        the usage of the bit.\n"
      title: 7.3.3.  Reporting Per-Hop Attributes
    - contents:
      - "7.3.4.  Default Behavior\n   By default, all bits in an Attributes subobject
        SHOULD be set to\n   zero.\n   If a received Attributes subobject is not long
        enough to include a\n   specific numbered bit, that bit MUST be treated as
        though present and\n   as if set to zero.\n   If the RRO subobject is not
        present for a hop in the LSP, all bits\n   MUST be assumed to be set to zero.\n"
      title: 7.3.4.  Default Behavior
    title: 7.3.  Procedures
  title: 7.  Recording Attributes Per LSP
- contents:
  - "8.  Summary of Attribute Bit Allocation\n   This document defines two uses of
    per-LSP attribute flag bit fields.\n   The bit numbering in the Attribute Flags
    TLV and the RRO Attributes\n   subobject is identical.  That is, the same attribute
    is indicated by\n   the same bit in both places.  This means that only a single
    registry\n   of bits is maintained.\n   The consequence is a degree of clarity
    in implementation and\n   registration.\n   Note, however, that it is not always
    the case that a bit will be used\n   in both the Attribute Flags TLV and the RRO
    Attributes subobject.\n   For example, an attribute may be requested using the
    Attribute Flags\n   TLV, but there is no requirement to report the handling of
    the\n   attribute on a hop-by-hop basis.  Conversely, there may be a\n   requirement
    to report the attributes of an LSP on a hop-by-hop basis,\n   but there is no
    corresponding request attribute.\n   In these cases, a single bit number is still
    assigned for both the\n   Attribute Flags TLV and the RRO Attributes subobject,
    even though the\n   bit may be irrelevant in either the Attribute Flags or the
    RRO\n   Attributes subobject.  The document that defines the usage of the new\n
    \  bit MUST state in which places it is used and MUST handle a default\n   setting
    of zero.\n"
  title: 8.  Summary of Attribute Bit Allocation
- contents:
  - "9.  Message Formats\n   The LSP_ATTRIBUTES object and the LSP_REQUIRED_ATTRIBUTES
    object MAY\n   be carried in a Path message.  The LSP_ATTRIBUTES object MAY be\n
    \  carried in a Resv message.\n   The order of objects in RSVP-TE messages is
    recommended, but\n   implementations must be capable of receiving the objects
    in any\n   meaningful order.\n   On a Path message, the LSP_ATTRIBUTES object
    and\n   LSP_REQUIRED_ATTRIBUTES objects are RECOMMENDED to be placed\n   immediately
    after the SESSION_ATTRIBUTE object if it is present, or\n   otherwise immediately
    after the LABEL_REQUEST object.\n   If both the LSP_ATTRIBUTES object and the
    LSP_REQUIRED_ATTRIBUTES\n   object are present, the LSP_REQUIRED_ATTRIBUTES object
    is RECOMMENDED\n   to be placed first.\n   LSRs MUST be prepared to receive these
    objects in any order in any\n   position within a Path message.  Subsequent instances
    of these\n   objects within a Path message SHOULD be ignored and MUST be forwarded\n
    \  unchanged.\n   On a Resv message, the LSP_ATTRIBUTES object is placed in the
    flow\n   descriptor and is associated with the FILTER_SPEC object that\n   precedes
    it.  It is RECOMMENDED that the LSP_ATTRIBUTES object be\n   placed immediately
    after the LABEL object.\n   LSRs MUST be prepared to receive this object in any
    order in any\n   position within a Resv message, subject to the previous note.
    \ Only\n   one instance of the LSP_ATTRIBUTES object is meaningful within the\n
    \  context of a FILTER_SPEC object.  Subsequent instances of the object\n   SHOULD
    be ignored and MUST be forwarded unchanged.\n"
  title: 9.  Message Formats
- contents:
  - "10.  Guidance for Key Application Scenarios\n   As described in the Introduction
    section of this document, it may be\n   that requested LSP attributes need to
    be acted on by only the egress\n   LSR of the LSP, by certain key transit points
    (such as ABRs and\n   ASBRs), or by all LSRs along the LSP.  This section briefly
    describes\n   how each of these scenarios is met.  This section is informational\n
    \  and does not define any new procedures.\n"
  - contents:
    - "10.1.  Communicating to Egress LSRs\n   When communicating LSP attributes that
      must be acted on only by the\n   LSP egress LSR, the attributes should be communicated
      in the\n   LSP_ATTRIBUTES object.  Because of its C-Num, this object may be\n
      \  ignored (passed onwards, untouched) by transit LSRs that do not\n   understand
      it.  This means that the Path message will not be rejected\n   by LSRs that
      do not understand the object.  In this way, the\n   requested LSP attributes
      are guaranteed to reach the egress LSR.\n   Attributes are set within the LSP_ATTRIBUTES
      object according to\n   which LSP attributes are required.  Each attribute is
      defined in some\n   RFC and is accompanied by a statement of what the expected
      behavior\n   is.  This behavior will include whether the attribute must be acted\n
      \  on by any LSR that recognizes it, or specifically by the egress LSR.\n   Thus,
      any attribute that must be acted on only by an egress LSR will\n   be defined
      in this way -- any transit LSR seeing this attribute\n   either will understand
      the semantics of the attribute and ignore it\n   (forwarding it, unchanged)
      or will not understand the attribute and\n   ignore it (forwarding it, unchanged)
      according to the rules of the\n   LSP_ATTRIBUTES object.\n   The remaining issue
      is how the ingress LSR can know whether the\n   egress LSR has acted correctly
      on the required LSP attribute.\n   Another part of the definition of the attribute
      (in the defining RFC)\n   is whether reporting is required.  If reporting is
      required, the\n   egress LSR is required to use the RRO Attributes subobject
      to report\n   whether it has acted on the received attribute.\n   If an egress
      LSR understands a received attribute as mandatory for an\n   egress LSR but
      does not wish to satisfy the request, it will reject\n   the Path message.  If
      an egress LSR understands the attribute but\n   believes it to be optional and
      does not wish to satisfy the request,\n   it will report its non-compliance
      in the RRO Attributes subobject.\n   If the egress LSR does not understand the
      received attribute, it may\n   report non-compliance in the RRO Attributes subobject
      explicitly, or\n   it may omit the RRO Attributes subobject, implying that it
      has not\n   satisfied the request.\n"
    title: 10.1.  Communicating to Egress LSRs
  - contents:
    - "10.2.  Communicating to Key Transit LSRs\n   Processing for key transit LSRs
      (such as ABRs and ASBRs) follows\n   exactly as for egress LSR.  The only difference
      is that the\n   definition of the LSP attribute in the defining RFC will state
      that\n   the attribute must be acted on by these transit LSRs.\n"
    title: 10.2.  Communicating to Key Transit LSRs
  - contents:
    - "10.3.  Communicating to All LSRs\n   In order to force all LSRs to examine
      the LSP attributes, the\n   LSP_REQUIRED_ATTRIBUTES object is used.  The C-Num
      of this object is\n   such that any LSR that does not recognize the object must
      reject a\n   received Path message containing the object.\n   An LSR that recognizes
      the LSP_REQUIRED_ATTRIBUTES object but does\n   not recognize an attribute will
      reject the Path message.\n   An LSR that recognizes an attribute but does not
      wish to support the\n   attribute reacts according to the definition of the
      attribute in the\n   defining RFC.  This may allow the LSR to ignore the attribute
      and\n   forward it unchanged, or may require it to fail the LSP setup.  The\n
      \  LSR may additionally be required to report whether it supports the\n   attribute
      using the RRO Attributes subobject.\n"
    title: 10.3.  Communicating to All LSRs
  title: 10.  Guidance for Key Application Scenarios
- contents:
  - "11.  IANA Considerations\n   The IANA allocations made for RFC 4420 [RFC4420]
    now apply to this\n   document and are listed here for completeness.\n   IANA
    has updated the registry entries created for RFC 4420 to\n   reference this document,
    which is now the normative reference for\n   those entries.  This document makes
    no further requests for IANA\n   action.\n"
  - contents:
    - "11.1.  New RSVP C-Nums and C-Types\n   Two new RSVP C-Nums are defined in this
      document and have been\n   assigned by IANA.\n   o LSP_ATTRIBUTES object\n     The
      C-Num (value 197) is of the form 11bbbbbb so that LSRs that do\n     not recognize
      the object will ignore the object but forward it,\n     unexamined and unmodified,
      in all messages resulting from this\n     message.\n     One C-Type is defined
      for this object and has been assigned by\n     IANA.\n     o LSP Attributes
      TLVs\n       C-Type value 1.\n   o LSP_REQUIRED_ATTRIBUTES object\n     The
      C-Num (value 67) is of the form 0bbbbbbb so that LSRs that do\n     not recognize
      the object will reject the message that carries it\n     with an \"Unknown Object
      Class\" error.\n     One C-Type is defined for this object and has been assigned
      by\n     IANA.\n     o LSP Required Attributes TLVs\n       C-Type value 1.\n"
    title: 11.1.  New RSVP C-Nums and C-Types
  - contents:
    - "11.2.  New TLV Space\n   The two new objects referenced above are constructed
      from TLVs.  Each\n   TLV includes a 16-bit type identifier (the T-field).  The
      same\n   T-field values are applicable to both objects.\n   The IANA has created
      a new registry and will manage TLV type\n   identifiers as follows:\n   - TLV
      Type (T-field value)\n   - TLV Name\n   - Whether allowed on LSP_ATTRIBUTES
      object\n   - Whether allowed on LSP_REQUIRED_ATTRIBUTES object\n   This document
      defines one TLV type as follows:\n   - TLV Type = 1\n   - TLV Name = Attribute
      Flags TLV\n   - allowed on LSP_ATTRIBUTES object\n   - allowed on LSP_REQUIRED_ATTRIBUTES
      object\n   New TLV type values may be allocated only by an IETF Consensus\n
      \  action.\n"
    title: 11.2.  New TLV Space
  - contents:
    - "11.3.  Attribute Flags\n   This document provides new attributes bit flags
      for use in other\n   documents that specify new RSVP-TE attributes.  These flags
      are\n   present in the Attribute Flags TLV referenced in the previous\n   section.\n
      \  The IANA has created a new registry and will manage the space of\n   attributes
      bit flags, numbering them in the usual IETF notation:\n   starting at zero and
      continuing at least through 31.\n   New bit numbers may be allocated only by
      an IETF Consensus action.\n   Each bit should be tracked with the following
      qualities:\n   - Bit number\n   - Defining RFC\n   - Name of bit\n   - Whether
      there is meaning in the Attribute Flags TLV on a Path\n   - Whether there is
      meaning in the Attribute Flags TLV on a Resv\n   - Whether there is meaning
      in the RRO Attributes subobject\n   Note that this means that all bits in the
      Attribute Flags TLV and the\n   RRO Attributes subobject use the same bit number,
      regardless of\n   whether they are used in one or both places.  Thus, only one
      list of\n   bits is required to be maintained.  (It would be meaningless in
      the\n   context of this document for a bit to have no meaning in either the\n
      \  Attribute Flags TLV or the RRO Attributes subobject.)\n"
    title: 11.3.  Attribute Flags
  - contents:
    - "11.4.  New Error Codes\n   This document defines the following new Error Codes
      and Error Values.\n   Numeric values have been assigned by IANA.\n   Error Code
      \                    Error Value\n   29 \"Unknown Attributes TLV\"    Identifies
      the unknown TLV type code.\n   30 \"Unknown Attributes Bit\"    Identifies the
      unknown Attribute Bit.\n"
    title: 11.4.  New Error Codes
  - contents:
    - "11.5.  New Record Route Subobject Identifier\n   A new subobject is defined
      for inclusion in the RECORD_ROUTE object.\n   The RRO Attributes subobject is
      identified by a Type value of 5.\n"
    title: 11.5.  New Record Route Subobject Identifier
  title: 11.  IANA Considerations
- contents:
  - "12.  Security Considerations\n   This document adds two new objects to the RSVP
    Path message as used\n   in MPLS and GMPLS signaling, and a new subobject to the
    RECORD_ROUTE\n   object carried on many RSVP messages.  It does not introduce
    any new\n   direct security issues, and the reader is referred to the security\n
    \  considerations expressed in [RFC2205], [RFC3209], and [RFC3473].\n   It is
    of passing note that any signaling request that indicates the\n   functional preferences
    or attributes of an MPLS LSP may provide\n   anyone with unauthorized access to
    the contents of the message with\n   information about the LSP that an administrator
    may wish to keep\n   secret.  Although this document adds new objects for signaling\n
    \  desired LSP attributes, it does not contribute to this issue, which\n   can
    only be satisfactorily handled by encrypting the content of the\n   signaling
    message.\n   Similarly, the addition of attribute-recording information to the
    RRO\n   may reveal information about the status of the LSP and the\n   capabilities
    of individual LSRs that operators wish to keep secret.\n   The same strategy that
    applies to other RRO subobjects also applies\n   here.  Note, however, that there
    is a tension between notifying the\n   head end of the LSP status at transit LSRs,
    and hiding the existence\n   or identity of the transit LSRs.\n"
  title: 12.  Security Considerations
- contents:
  - "13.  Acknowledgements\n   Credit to the OSPF Working Group for inspiration from
    their solution\n   to a similar problem.  Thanks to Rahul Aggarwal for his careful\n
    \  review and support of this work.  Thanks also to Raymond Zhang,\n   Kireeti
    Kompella, Philip Matthews, Jim Gibson, and Alan Kullberg for\n   their input.
    \ As so often, thanks to John Drake for useful offline\n   discussions.  Thanks
    to Mike Shand for providing the Routing\n   Directorate review and to Joel Halpern
    for the General Area review --\n   both picked up on some unclarities.\n   Thanks
    to the OIF for noticing the discrepancy in RFC 4420 that is\n   fixed in this
    document.  Alfred Hoenes noted several typographical\n   errors.\n"
  title: 13.  Acknowledgements
- contents:
  - "14.  Changes from RFC 4420 to RFC 5420\n   This document obsoletes RFC 4420 [RFC4420].
    \ The only change is in\n   Section 3.  Section 3 describes the semantic of the
    Length field of\n   the Attributes TLV.\n   Prior to the change, the Length field
    indicated the length of the\n   Value field only.  After the change, as described
    in Section 3, the\n   Length field indicates the length of the whole TLV.  This
    change\n   means that this document is consistent with the subobject format\n
    \  defined in [RFC3209] and the TLV format defined in [RFC3471].\n   In addition,
    the RFC Editor made many editorial changes to improve\n   the text and readability.
    These changes can be observed by comparing\n   the text of this document with
    that of [RFC4420].\n"
  title: 14.  Changes from RFC 4420 to RFC 5420
- contents:
  - "15.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in
    RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March
    1997.\n   [RFC2205]  Braden, R., Ed., Zhang, L., Berson, S., Herzog, S., and S.\n
    \             Jamin, \"Resource ReSerVation Protocol (RSVP) -- Version 1\n              Functional
    Specification\", RFC 2205, September 1997.\n   [RFC3209]  Awduche, D., Berger,
    L., Gan, D., Li, T., Srinivasan, V.,\n              and G. Swallow, \"RSVP-TE:
    Extensions to RSVP for LSP\n              Tunnels\", RFC 3209, December 2001.\n
    \  [RFC3471]  Berger, L., Ed., \"Generalized Multi-Protocol Label\n              Switching
    (GMPLS) Signaling Functional Description\", RFC\n              3471, January 2003.\n
    \  [RFC3473]  Berger, L., Ed., \"Generalized Multi-Protocol Label\n              Switching
    (GMPLS) Signaling Resource ReserVation\n              Protocol-Traffic Engineering
    (RSVP-TE) Extensions\", RFC\n              3473, January 2003.\n"
  title: 15.  Normative References
- contents:
  - "16.  Informative References\n   [RFC3031]  Rosen, E., Viswanathan, A., and R.
    Callon, \"Multiprotocol\n              Label Switching Architecture\", RFC 3031,
    January 2001.\n   [RFC4090]  Pan, P., Ed., Swallow, G., Ed., and A. Atlas, Ed.,
    \"Fast\n              Reroute Extensions to RSVP-TE for LSP Tunnels\", RFC 4090,\n
    \             May 2005.\n   [RFC4206]  Kompella, K. and Y. Rekhter, \"Label Switched
    Paths (LSP)\n              Hierarchy with Generalized Multi-Protocol Label Switching\n
    \             (GMPLS) Traffic Engineering (TE)\", RFC 4206, October 2005.\n   [RFC4420]
    \ Farrel, A., Ed., Papadimitriou, D., Vasseur, J.-P., and A.\n              Ayyangar,
    \"Encoding of Attributes for Multiprotocol Label\n              Switching (MPLS)
    Label Switched Path (LSP) Establishment\n              Using Resource ReserVation
    Protocol-Traffic Engineering\n              (RSVP-TE)\", RFC 4420, February 2006.\n"
  title: 16.  Informative References
- contents:
  - "Authors' Addresses\n   Adrian Farrel\n   Old Dog Consulting\n   Phone:  +44 (0)
    1978 860944\n   EMail:  adrian@olddog.co.uk\n   Dimitri Papadimitriou\n   Alcatel\n
    \  Fr. Wellesplein 1,\n   B-2018 Antwerpen, Belgium\n   Phone:  +32 3 240-8491\n
    \  EMail:  dimitri.papadimitriou@alcatel.be\n   Jean Philippe Vasseur\n   Cisco
    Systems, Inc.\n   1414 Massachusetts Avenue\n   Boxborough, MA - 01719\n   USA\n
    \  EMail: jpv@cisco.com\n   Arthi Ayyangar\n   Juniper Networks, Inc.\n   1194
    N.Mathilda Ave\n   Sunnyvale, CA 94089\n   USA\n   EMail: arthi@juniper.net\n"
  title: Authors' Addresses
