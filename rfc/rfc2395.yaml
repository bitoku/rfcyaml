- title: __initial_text__
  contents:
  - '                    IP Payload Compression Using LZS

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1998).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes a compression method based on the LZS\n\
    \   compression algorithm. This document defines the application of the\n   LZS\
    \ algorithm to the IP Payload Compression Protocol [IPCOMP].\n   [IPCOMP] defines\
    \ a method for applying lossless compression to the\n   payloads of Internet Protocol\
    \ datagrams.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction...................................................2\n\
    \      1.1 General....................................................2\n    \
    \  1.2 Background of LZS Compression..............................2\n      1.3\
    \ Licensing..................................................3\n      1.4 Specification\
    \ of Requirements..............................3\n   2. Compression Process............................................3\n\
    \      2.1 Compression History........................................3\n    \
    \  2.2 Compression Encoding Format................................3\n      2.3\
    \ Padding....................................................4\n   3. Decompression\
    \ Process..........................................4\n   4. IPComp Association\
    \ (IPCA) Parameters...........................4\n      4.1 ISAKMP Transform ID........................................5\n\
    \      4.2 ISAKMP Security Association Attributes.....................5\n    \
    \  4.3 Manual configuration.......................................5\n      4.4\
    \ Minimum packet size threshold..............................5\n      4.5 Compressibility\
    \ test.......................................5\n   5. Security Considerations........................................5\n\
    \   6. Acknowledgements...............................................5\n   7.\
    \ References.....................................................6\n   8. Authors'\
    \ Addresses.............................................7\n   9. Appendix: Compression\
    \ Efficiency versus Datagram Size..........8\n   10. Full Copyright Statement......................................9\n"
- title: 1. Introduction
  contents:
  - '1. Introduction

    '
- title: 1.1 General
  contents:
  - "1.1 General\n   This document specifies the application of LZS compression, a\n\
    \   lossless compression algorithm, to IP datagram payloads. This\n   document\
    \ is to be used in conjunction with the IP Payload Compression\n   Protocol [IPCOMP].\
    \  This specification assumes a thorough\n   understanding of the IPComp protocol.\n"
- title: 1.2 Background of LZS Compression
  contents:
  - "1.2 Background of LZS Compression\n   Starting with a sliding window compression\
    \ history, similar to [LZ1],\n   Hi/fn developed a new, enhanced compression algorithm\
    \ identified as\n   LZS. The LZS algorithm is a general purpose lossless compression\n\
    \   algorithm for use with a wide variety of data types.  Its encoding\n   method\
    \ is very efficient, providing compression for strings as short\n   as two octets\
    \ in length.\n   The LZS algorithm uses a sliding window of 2,048 bytes.  During\n\
    \   compression, redundant sequences of data are replaced with tokens\n   that\
    \ represent those sequences. During decompression, the original\n   sequences\
    \ are substituted for the tokens in such a way that the\n   original data is exactly\
    \ recovered. LZS differs from lossy\n   compression algorithms, such as those\
    \ often used for video\n   compression, that do not exactly reproduce the original\
    \ data.\n   The details of LZS compression can be found in [ANSI94].\n   The efficiency\
    \ of the LZS algorithm depends on the degree of\n   redundancy in the original\
    \ data.  A table of compression ratios for\n   the [Calgary] Corpus file set is\
    \ provided in the appendix in Section\n   7.\n"
- title: 1.3 Licensing
  contents:
  - "1.3 Licensing\n   Hi/fn, Inc. holds patents on the LZS algorithm. Licenses for\
    \ a\n   reference implementation are available for use in IPPCP, IPSec, TLS\n\
    \   and PPP applications at no cost.  Source and object licenses are\n   available\
    \ on a non-discriminatory basis. Hardware implementations are\n   also available.\
    \  For more information, contact Hi/fn at the address\n   listed with the authors'\
    \ addresses.\n"
- title: 1.4 Specification of Requirements
  contents:
  - "1.4 Specification of Requirements\n   The key words \"MUST\", \"MUST NOT\", \"\
    REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC-2119].\n"
- title: 2. Compression Process
  contents:
  - '2. Compression Process

    '
- title: 2.1 Compression History
  contents:
  - "2.1 Compression History\n   The sender MUST reset the compression history prior\
    \ to processing\n   each datagram's payload. This ensures that each datagram's\
    \ payload\n   can be decompressed independently of any other, as is needed when\n\
    \   datagrams are received out of order.\n   The sender MUST flush the compressor\
    \ each time it transmits a\n   compressed datagram.  Flushing means that all data\
    \ going into the\n   compressor is included in the output, i.e., no data is held\
    \ back in\n   the hope of achieving better compression.  Flushing is necessary\
    \ to\n   prevent a datagram's data from spilling over into a later datagram.\n"
- title: 2.2 Compression Encoding Format
  contents:
  - "2.2 Compression Encoding Format\n   The input to the payload compression algorithm\
    \ is an IP datagram\n   payload. The output of the algorithm is a new (and hopefully\
    \ smaller)\n   payload. The output payload contains the input payload's data in\n\
    \   either compressed or uncompressed format. The input and output\n   payloads\
    \ are each an integral number of bytes in length.\n   If the uncompressed form\
    \ is used, the output payload is identical to\n   the input payload and the IPComp\
    \ header is omitted.  If the\n   compressed form is used, the output payload is\
    \ prepended with the\n   IPComp header and encoded as defined in [ANSI94], which\
    \ is repeated\n   here for informational purposes ONLY.\n   <Compressed Stream>\
    \ := [<Compressed String>] <End Marker>\n   <Compressed String> := 0 <Raw Byte>\
    \ | 1 <Compressed Bytes>\n   <Raw Byte> := <b><b><b><b><b><b><b><b>          (8-bit\
    \ byte)\n   <Compressed Bytes> := <Offset> <Length>\n   <Offset> := 1 <b><b><b><b><b><b><b>\
    \ |           (7-bit offset)\n               0 <b><b><b><b><b><b><b><b><b><b><b>\
    \ (11-bit offset)\n   <End Marker> := 110000000\n   <b> := 1 | 0\n   <Length>\
    \ :=\n   00        = 2     1111 0110      = 14\n   01        = 3     1111 0111\
    \      = 15\n   10        = 4     1111 1000      = 16\n   1100      = 5     1111\
    \ 1001      = 17\n   1101      = 6     1111 1010      = 18\n   1110      = 7 \
    \    1111 1011      = 19\n   1111 0000 = 8     1111 1100      = 20\n   1111 0001\
    \ = 9     1111 1101      = 21\n   1111 0010 = 10    1111 1110      = 22\n   1111\
    \ 0011 = 11    1111 1111 0000 = 23\n   1111 0100 = 12    1111 1111 0001 = 24\n\
    \   1111 0101 = 13     ...\n"
- title: 2.3 Padding
  contents:
  - "2.3 Padding\n   A datagram payload compressed using LZS always ends with the\
    \ last\n   compressed data byte (also known as the <end marker>), which is used\n\
    \   to disambiguate padding.  This allows trailing bits as well as bytes\n   to\
    \ be considered padding.\n   The size of a compressed payload MUST be in whole\
    \ octet units.\n"
- title: 3. Decompression Process
  contents:
  - "3. Decompression Process\n   If the received datagram is compressed, the receiver\
    \ MUST reset the\n   decompression history prior to processing the datagram. This\
    \ ensures\n   that each datagram can be decompressed independently of any other,\
    \ as\n   is needed when datagrams are received out of order. Following the\n \
    \  reset of the decompression history, the receiver decompresses the\n   Payload\
    \ Data field according to the encoding specified in section 3.2\n   of [ANSI94].\n\
    \   If the received datagram is not compressed, the receiver needs to\n   perform\
    \ no decompression processing and the Payload Data field of the\n   datagram is\
    \ ready for processing by the next protocol layer.\n"
- title: 4. IPComp Association (IPCA) Parameters
  contents:
  - "4. IPComp Association (IPCA) Parameters\n   ISAKMP MAY be used to negotiate the\
    \ use of the LZS compression method\n   to establish an IPCA, as defined in [IPCOMP].\n"
- title: 4.1 ISAKMP Transform ID
  contents:
  - "4.1 ISAKMP Transform ID\n   The LZS Transform ID as IPCOMP_LZS, as specified\
    \ in The Internet IP\n   Security Domain of Interpretation [SECDOI].  This value\
    \ is used to\n   negotiate the LZS compression algorithm under the ISAKMP protocol.\n"
- title: 4.2 ISAKMP Security Association Attributes
  contents:
  - "4.2 ISAKMP Security Association Attributes\n   There are no other parameters\
    \ required for LZS compression negotiated\n   under ISAKMP.\n"
- title: 4.3 Manual configuration
  contents:
  - "4.3 Manual configuration\n   The CPI value IPCOMP_LZS is used for a manually\
    \ configured IPComp\n   Compression Associations.\n"
- title: 4.4 Minimum packet size threshold
  contents:
  - "4.4 Minimum packet size threshold\n   As stated in [IPCOMP], small packets may\
    \ not compress well.  Informal\n   tests using the LZS algorithm over the Calgary\
    \ Corpus data set show\n   that the average payload size that may produce expanded\
    \ data is\n   approximately 90 bytes.  Thus implementations may not want to attempt\n\
    \   to compress payloads smaller than 90 bytes.\n"
- title: 4.5 Compressibility test
  contents:
  - "4.5 Compressibility test\n   There is no adaptive algorithm embodied in the LZS\
    \ algorithm, for\n   compressibility testing, as referenced in [IPCOMP].\n"
- title: 5. Security Considerations
  contents:
  - "5. Security Considerations\n   This document does not add any further security\
    \ considerations that\n   [IPCOMP] and [Deutsch96] have already declared.\n"
- title: 6. Acknowledgments
  contents:
  - "6. Acknowledgments\n   The LZS details presented here are similar to those in\
    \ PPP LZS-DCP\n   Compression Protocol (LZS-DCP), [RFC-1967].\n   The author wishes\
    \ to thank the participants of the IPPCP working\n   group mailing list whose\
    \ discussion is currently active and is\n   working to generate the protocol specification\
    \ for integrating\n   compression with IP.\n"
- title: 7. References
  contents:
  - "7. References\n   [AH]       Kent, S., and R., Atkinson, \"IP Authentication\
    \ Header\",\n              RFC 2402, November 1998.\n   [ANSI94]   American National\
    \ Standards Institute, Inc., \"Data\n              Compression Method for Information\
    \ Systems,\" ANSI X3.241-\n              1994, August 1994.\n   [Calgary]  Text\
    \ Compression Corpus, University of Calgary, available\n              at ftp://ftp.cpsc.ucalgary.ca/pub/projects/text.\n\
    \              compression.corpus.\n   [IPCOMP]   Shacham, A., \"IP Payload Compression\
    \ Protocol (IPComp)\",\n              RFC 2393, December 1998.\n   [LZ1]     \
    \ Lempel, A., and Ziv, J., \"A Universal Algorithm for\n              Sequential\
    \ Data Compression\", IEEE Transactions On\n              Information Theory,\
    \ Vol.  IT-23, No. 3, May 1977.\n   [RFC-1962] Rand, D., \"The PPP Compression\
    \ Control Protocol (CCP)\",\n              RFC 1962, June 1996.\n   [RFC-1967]\
    \ Schneider, K., and R. Friend, \"PPP LZS-DCP Compression\n              Protocol\
    \ (LZS-DCP)\", RFC 1967, August 1996.\n   [RFC-2003] Perkins, C., \"IP Encapsulation\
    \ within IP\", RFC 2003,\n              October 1996.\n   [RFC-2119] Bradner,\
    \ S., \"Key words for use in RFCs to Indicate\n              Requirement Levels\"\
    , BCP 14, RFC 2119, March 1997.\n   [SECDOI]   Piper, D., \"The Internet IP Security\
    \ Domain of\n              Interpretation for ISAKMP\", RFC 2407, November 1998.\n"
- title: 8. Authors' Addresses
  contents:
  - "8. Authors' Addresses\n   Robert Friend\n   Hi/fn Inc.\n   5973 Avenida Encinas\n\
    \   Suite 110\n   Carlsbad, CA  92008\n   EMail: rfriend@hifn.com\n   Robert Monsour\n\
    \   Hi/fn Inc.\n   2105 Hamilton Avenue\n   Suite 230\n   San Jose, CA 95125\n\
    \   EMail: rmonsour@hifn.com\n"
- title: '9. Appendix: Compression Efficiency versus Datagram Size'
  contents:
  - "9. Appendix: Compression Efficiency versus Datagram Size\n   The following table\
    \ offers some guidance on the compression\n   efficiency that can be achieved\
    \ as a function of datagram size.  Each\n   entry in the table shows the compression\
    \ ratio that was achieved when\n   LZS was applied to a test file using datagrams\
    \ of a specified size.\n   The test file was the University of Calgary Text Compression\
    \ Corpus\n   [Calgary].  The Calgary Corpus consists of 18 files with a total\
    \ size\n   (all files) of 3.278MB.\n    Datagram size,|\n    bytes         | \
    \ 64   128   256   512  1024  2048  4096  8192 16384\n    --------------|----------------------------------------------------\n\
    \    Compression   |1.18  1.28  1.43  1.58  1.74  1.91  2.04  2.11  2.14\n   \
    \ ratio         |\n"
- title: 10.  Full Copyright Statement
  contents:
  - "10.  Full Copyright Statement\n   Copyright (C) The Internet Society (1998).\
    \  All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
