- title: __initial_text__
  contents:
  - '               The Message Session Relay Protocol (MSRP)

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes the Message Session Relay Protocol, a\n\
    \   protocol for transmitting a series of related instant messages in the\n  \
    \ context of a session.  Message sessions are treated like any other\n   media\
    \ stream when set up via a rendezvous or session creation\n   protocol such as\
    \ the Session Initiation Protocol.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................4\n\
    \   2. Conventions .....................................................5\n  \
    \ 3. Applicability of MSRP ...........................................5\n   4.\
    \ Protocol Overview ...............................................6\n   5. Key\
    \ Concepts ....................................................9\n      5.1. MSRP\
    \ Framing and Message Chunking ..........................9\n      5.2. MSRP Addressing\
    \ ...........................................10\n      5.3. MSRP Transaction and\
    \ Report Model .........................11\n      5.4. MSRP Connection Model .....................................12\n\
    \   6. MSRP URIs ......................................................14\n  \
    \    6.1. MSRP URI Comparison .......................................15\n    \
    \  6.2. Resolving MSRP Host Device ................................16\n   7. Method-Specific\
    \ Behavior .......................................17\n      7.1. Constructing\
    \ Requests .....................................17\n           7.1.1. Sending\
    \ SEND Requests ..............................18\n           7.1.2. Sending REPORT\
    \ Requests ............................21\n           7.1.3. Generating Success\
    \ Reports .........................22\n           7.1.4. Generating Failure Reports\
    \ .........................23\n      7.2. Constructing Responses ....................................24\n\
    \      7.3. Receiving Requests ........................................25\n  \
    \         7.3.1. Receiving SEND Requests ............................25\n    \
    \       7.3.2. Receiving REPORT Requests ..........................27\n   8. Using\
    \ MSRP with SIP and SDP ....................................27\n      8.1. SDP\
    \ Connection and Media-Lines ............................28\n      8.2. URI Negotiations\
    \ ..........................................29\n      8.3. Path Attributes with\
    \ Multiple URIs ........................30\n      8.4. Updated SDP Offers ........................................31\n\
    \      8.5. Connection Negotiation ....................................31\n  \
    \    8.6. Content Type Negotiation ..................................32\n    \
    \  8.7. Example SDP Exchange ......................................34\n      8.8.\
    \ MSRP User Experience with SIP .............................35\n      8.9. SDP\
    \ Direction Attribute and MSRP ..........................35\n   9. Formal Syntax\
    \ ..................................................36\n   10. Response Code Descriptions\
    \ ....................................38\n      10.1. 200 ......................................................38\n\
    \      10.2. 400 ......................................................38\n  \
    \    10.3. 403 ......................................................38\n    \
    \  10.4. 408 ......................................................39\n      10.5.\
    \ 413 ......................................................39\n      10.6. 415\
    \ ......................................................39\n      10.7. 423 ......................................................39\n\
    \      10.8. 481 ......................................................39\n  \
    \    10.9. 501 ......................................................39\n    \
    \  10.10. 506 .....................................................40\n   11.\
    \ Examples ......................................................40\n      11.1.\
    \ Basic IM Session .........................................40\n      11.2. Message\
    \ with XHTML Content ...............................42\n      11.3. Chunked Message\
    \ ..........................................43\n      11.4. Chunked Message with\
    \ Message/CPIM Payload ................43\n      11.5. System Message ...........................................44\n\
    \      11.6. Positive Report ..........................................44\n  \
    \    11.7. Forked IM ................................................45\n   12.\
    \ Extensibility .................................................48\n   13. CPIM\
    \ Compatibility ............................................48\n   14. Security\
    \ Considerations .......................................49\n      14.1. Secrecy\
    \ of the MSRP URI ..................................50\n      14.2. Transport\
    \ Level Protection ...............................50\n      14.3. S/MIME ...................................................51\n\
    \      14.4. Using TLS in Peer-to-Peer Mode ...........................52\n  \
    \    14.5. Other Security Concerns ..................................53\n   15.\
    \ IANA Considerations ...........................................55\n      15.1.\
    \ MSRP Method Names ........................................55\n      15.2. MSRP\
    \ Header Fields .......................................55\n      15.3. MSRP Status\
    \ Codes ........................................56\n      15.4. MSRP Port ................................................56\n\
    \      15.5. URI Schema ...............................................56\n  \
    \         15.5.1. MSRP Scheme .......................................56\n    \
    \       15.5.2. MSRPS Scheme ......................................57\n      15.6.\
    \ SDP Transport Protocol ...................................57\n      15.7. SDP\
    \ Attribute Names ......................................58\n           15.7.1.\
    \ Accept Types ......................................58\n           15.7.2. Wrapped\
    \ Types .....................................58\n           15.7.3. Max Size ..........................................58\n\
    \           15.7.4. Path ..............................................58\n  \
    \ 16. Contributors and Acknowledgments ..............................59\n   17.\
    \ References ....................................................59\n      17.1.\
    \ Normative References .....................................59\n      17.2. Informative\
    \ References ...................................60\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   A series of related instant messages between two or more\
    \ parties can\n   be viewed as part of a \"message session\", that is, a conversational\n\
    \   exchange of messages with a definite beginning and end.  This is in\n   contrast\
    \ to individual messages each sent independently.  Messaging\n   schemes that\
    \ track only individual messages can be described as\n   \"page-mode\" messaging,\
    \ whereas messaging that is part of a \"session\"\n   with a definite start and\
    \ end is called \"session-mode\" messaging.\n   Page-mode messaging is enabled\
    \ in SIP via the SIP [4] MESSAGE method\n   [22].  Session-mode messaging has\
    \ a number of benefits over page-mode\n   messaging, however, such as explicit\
    \ rendezvous, tighter integration\n   with other media-types, direct client-to-client\
    \ operation, and\n   brokered privacy and security.\n   This document defines\
    \ a session-oriented instant message transport\n   protocol called the Message\
    \ Session Relay Protocol (MSRP), whose\n   sessions can be negotiated with an\
    \ offer or answer [3] using the\n   Session Description Protocol (SDP) [2].  The\
    \ exchange is carried by\n   some signaling protocol, such as SIP [4].  This allows\
    \ a\n   communication user agent to offer a messaging session as one of the\n\
    \   possible media-types in a session.  For instance, Alice may want to\n   communicate\
    \ with Bob.  Alice doesn't know at the moment whether Bob\n   has his phone or\
    \ his IM client handy, but she's willing to use\n   either.  She sends an invitation\
    \ to a session to the address of\n   record she has for Bob, sip:bob@example.com.\
    \  Her invitation offers\n   both voice and an IM session.  The SIP services at\
    \ example.com\n   forward the invitation to Bob at his currently registered clients.\n\
    \   Bob accepts the invitation at his IM client, and they begin a\n   threaded\
    \ chat conversation.\n   When a user uses an Instant Messaging (IM) URL, RFC 3861\
    \ [32] defines\n   how DNS can be used to map this to a particular protocol to\
    \ establish\n   the session such as SIP.  SIP can use an offer/answer model to\n\
    \   transport the MSRP URIs for the media in SDP.  This document defines\n   how\
    \ the offer/answer exchange works to establish MSRP connections and\n   how messages\
    \ are sent across the MSRP, but it does not deal with the\n   issues of mapping\
    \ an IM URL to a session establishment protocol.\n   This session model allows\
    \ message sessions to be integrated into\n   advanced communications applications\
    \ with little to no additional\n   protocol development.  For example, during\
    \ the above chat session,\n   Bob decides Alice really needs to be talking to\
    \ Carol.  Bob can\n   transfer [21] Alice to Carol, introducing them into their\
    \ own\n   messaging session.  Messaging sessions can then be easily integrated\n\
    \   into call-center and dispatch environments using third-party call\n   control\
    \ [20] and conferencing [19] applications.\n   This document specifies MSRP behavior\
    \ only for peer-to-peer sessions,\n   that is, sessions crossing only a single\
    \ hop.  MSRP relay devices\n   [23] (referred to herein as \"relays\") are specified\
    \ in a separate\n   document.  An endpoint that implements this specification,\
    \ but not\n   the relay specification, will be unable to introduce relays into\
    \ the\n   message path, but will still be able to interoperate with peers that\n\
    \   do use relays.\n"
- title: 2.  Conventions
  contents:
  - "2.  Conventions\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and\
    \ \"OPTIONAL\" in this\n   document are to be interpreted as described in RFC\
    \ 2119 [5].\n   This document consistently refers to a \"message\" as a complete\
    \ unit\n   of MIME or text content.  In some cases, a message is split and\n \
    \  delivered in more than one MSRP request.  Each of these portions of\n   the\
    \ complete message is called a \"chunk\".\n"
- title: 3.  Applicability of MSRP
  contents:
  - "3.  Applicability of MSRP\n   MSRP is not designed for use as a standalone protocol.\
    \  MSRP MUST be\n   used only in the context of a rendezvous mechanism meeting\
    \ the\n   following requirements:\n   o  The rendezvous mechanism MUST provide\
    \ both MSRP URIs associated\n      with an MSRP session to each of the participating\
    \ endpoints.  The\n      rendezvous mechanism MUST implement mechanisms to protect\
    \ the\n      confidentiality of these URIs -- they MUST NOT be made available\n\
    \      to an untrusted third party or be easily discoverable.\n   o  The rendezvous\
    \ mechanism MUST provide mechanisms for the\n      negotiation of any supported\
    \ MSRP extensions that are not\n      backwards compatible.\n   o  The rendezvous\
    \ mechanism MUST be able to natively transport im:\n      URIs or automatically\
    \ translate im: URIs [27] into the addressing\n      identifiers of the rendezvous\
    \ protocol.\n   To use a rendezvous mechanism with MSRP, an RFC MUST be prepared\
    \ that\n   describes how it exchanges MSRP URIs and meets these requirements\n\
    \   listed here.  This document provides such a description for the use\n   of\
    \ MSRP in the context of SIP and SDP.\n   SIP meets these requirements for a rendezvous\
    \ mechanism.  The MSRP\n   URIs are exchanged using SDP in an offer/answer exchange\
    \ via SIP.\n   The exchanged SDP can also be used to negotiate MSRP extensions.\n\
    \   This SDP can be secured using any of the mechanisms available in SIP,\n  \
    \ including using the sips mechanism to ensure transport security\n   across intermediaries\
    \ and Secure/Multipurpose Internet Mail\n   Extensions (S/MIME) for end-to-end\
    \ protection of the SDP body.  SIP\n   can carry arbitrary URIs (including im:\
    \ URIs) in the Request-URI, and\n   procedures are available to map im: URIs to\
    \ sip: or sips: URIs.  It\n   is expected that initial deployments of MSRP will\
    \ use SIP as its\n   rendezvous mechanism.\n"
- title: 4.  Protocol Overview
  contents:
  - "4.  Protocol Overview\n   MSRP is a text-based, connection-oriented protocol\
    \ for exchanging\n   arbitrary (binary) MIME [8] content, especially instant messages.\n\
    \   This section is a non-normative overview of how MSRP works and how it\n  \
    \ is used with SIP.\n   MSRP sessions are typically arranged using SIP the same\
    \ way a session\n   of audio or video media is set up.  One SIP user agent (Alice)\
    \ sends\n   the other (Bob) a SIP invitation containing an offered session-\n\
    \   description that includes a session of MSRP.  The receiving SIP user\n   agent\
    \ can accept the invitation and include an answer session-\n   description that\
    \ acknowledges the choice of media.  Alice's session\n   description contains\
    \ an MSRP URI that describes where she is willing\n   to receive MSRP requests\
    \ from Bob, and vice versa.  (Note: Some lines\n   in the examples are removed\
    \ for clarity and brevity.)\n       Alice sends to Bob:\n   INVITE sip:bob@biloxi.example.com\
    \ SIP/2.0\n   To: <sip:bob@biloxi.example.com>\n   From: <sip:alice@atlanta.example.com>;tag=786\n\
    \   Call-ID: 3413an89KU\n   Content-Type: application/sdp\n   c=IN IP4 atlanta.example.com\n\
    \   m=message 7654 TCP/MSRP *\n   a=accept-types:text/plain\n   a=path:msrp://atlanta.example.com:7654/jshA7weztas;tcp\n\
    \       Bob sends to Alice:\n   SIP/2.0 200 OK\n   To: <sip:bob@biloxi.example.com>;tag=087js\n\
    \   From: <sip:alice@atlanta.example.com>;tag=786\n   Call-ID: 3413an89KU\n  \
    \ Content-Type: application/sdp\n   c=IN IP4 biloxi.example.com\n   m=message\
    \ 12763 TCP/MSRP *\n   a=accept-types:text/plain\n   a=path:msrp://biloxi.example.com:12763/kjhd37s2s20w2a;tcp\n\
    \       Alice sends to Bob:\n   ACK sip:bob@biloxi SIP/2.0\n   To: <sip:bob@biloxi.example.com>;tag=087js\n\
    \   From: <sip:alice@atlanta.example.com>;tag=786\n   Call-ID: 3413an89KU\n  \
    \                        Figure 1: Session Setup\n   MSRP defines two request\
    \ types, or methods.  SEND requests are used\n   to deliver a complete message\
    \ or a chunk (a portion of a complete\n   message), while REPORT requests report\
    \ on the status of a previously\n   sent message, or a range of bytes inside a\
    \ message.  When Alice\n   receives Bob's answer, she checks to see if she has\
    \ an existing\n   connection to Bob.  If not, she opens a new connection to Bob\
    \ using\n   the URI he provided in the SDP.  Alice then delivers a SEND request\n\
    \   to Bob with her initial message, and Bob replies indicating that\n   Alice's\
    \ request was received successfully.\n   MSRP a786hjs2 SEND\n   To-Path: msrp://biloxi.example.com:12763/kjhd37s2s20w2a;tcp\n\
    \   From-Path: msrp://atlanta.example.com:7654/jshA7weztas;tcp\n   Message-ID:\
    \ 87652491\n   Byte-Range: 1-25/25\n   Content-Type: text/plain\n   Hey Bob, are\
    \ you there?\n   -------a786hjs2$\n   MSRP a786hjs2 200 OK\n   To-Path: msrp://atlanta.example.com:7654/jshA7weztas;tcp\n\
    \   From-Path: msrp://biloxi.example.com:12763/kjhd37s2s20w2a;tcp\n   -------a786hjs2$\n\
    \                      Figure 2: Example MSRP Exchange\n   Alice's request begins\
    \ with the MSRP start line, which contains a\n   transaction identifier that is\
    \ also used for request framing.  Next\n   she includes the path of URIs to the\
    \ destination in the To-Path\n   header field, and her own URI in the From-Path\
    \ header field.  In this\n   typical case, there is just one \"hop\", so there\
    \ is only one URI in\n   each path header field.  She also includes a message\
    \ ID, which she\n   can use to correlate status reports with the original message.\
    \  Next\n   she puts the actual content.  Finally, she closes the request with\
    \ an\n   end-line of seven hyphens, the transaction identifier, and a \"$\" to\n\
    \   indicate that this request contains the end of a complete message.\n   If\
    \ Alice wants to deliver a very large message, she can split the\n   message into\
    \ chunks and deliver each chunk in a separate SEND\n   request.  The message ID\
    \ corresponds to the whole message, so the\n   receiver can also use it to reassemble\
    \ the message and tell which\n   chunks belong with which message.  Chunking is\
    \ described in more\n   detail in Section 5.1.  The Byte-Range header field identifies\
    \ the\n   portion of the message carried in this chunk and the total size of\n\
    \   the message.\n   Alice can also specify what type of reporting she would like\
    \ in\n   response to her request.  If Alice requests positive acknowledgments,\n\
    \   Bob sends a REPORT request to Alice confirming the delivery of her\n   complete\
    \ message.  This is especially useful if Alice sent a series\n   of SEND requests\
    \ containing chunks of a single message.  More on\n   requesting types of reports\
    \ and errors is described in Section 5.3.\n   Alice and Bob choose their MSRP\
    \ URIs in such a way that it is\n   difficult to guess the exact URI.  Alice and\
    \ Bob can reject requests\n   to URIs they are not expecting to service and can\
    \ correlate the\n   specific URI with the probable sender.  Alice and Bob can\
    \ also use\n   TLS [1] to provide channel security over this hop.  To receive\
    \ MSRP\n   requests over a TLS protected connection, Alice or Bob could\n   advertise\
    \ URIs with the \"msrps\" scheme instead of \"msrp\".\n   MSRP is designed with\
    \ the expectation that MSRP can carry URIs for\n   nodes on the far side of relays.\
    \  For this reason, a URI with the\n   \"msrps\" scheme makes no assertion about\
    \ the security properties of\n   other hops, just the next hop.  The user agent\
    \ knows the URI for each\n   hop, so it can verify that each URI has the desired\
    \ security\n   properties.\n   MSRP URIs are discussed in more detail in Section\
    \ 6.\n   An adjacent pair of busy MSRP nodes (for example, two relays) can\n \
    \  easily have several sessions, and exchange traffic for several\n   simultaneous\
    \ users.  The nodes can use existing connections to carry\n   new traffic with\
    \ the same destination host, port, transport protocol,\n   and scheme.  MSRP nodes\
    \ can keep track of how many sessions are using\n   a particular connection and\
    \ close these connections when no sessions\n   have used them for some period\
    \ of time.  Connection management is\n   discussed in more detail in Section 5.4.\n"
- title: 5.  Key Concepts
  contents:
  - '5.  Key Concepts

    '
- title: 5.1.  MSRP Framing and Message Chunking
  contents:
  - "5.1.  MSRP Framing and Message Chunking\n   Messages sent using MSRP can be very\
    \ large and can be delivered in\n   several SEND requests, where each SEND request\
    \ contains one chunk of\n   the overall message.  Long chunks may be interrupted\
    \ in mid-\n   transmission to ensure fairness across shared transport connections.\n\
    \   To support this, MSRP uses a boundary-based framing mechanism.  The\n   start\
    \ line of an MSRP request contains a unique identifier that is\n   also used to\
    \ indicate the end of the request.  Included at the end of\n   the end-line, there\
    \ is a flag that indicates whether this is the last\n   chunk of data for this\
    \ message or whether the message will be\n   continued in a subsequent chunk.\
    \  There is also a Byte-Range header\n   field in the request that indicates the\
    \ overall position of this\n   chunk inside the complete message.\n   For example,\
    \ the following snippet of two SEND requests demonstrates\n   a message that contains\
    \ the text \"abcdEFGH\" being sent as two chunks.\n    MSRP dkei38sd SEND\n  \
    \  Message-ID: 4564dpWd\n    Byte-Range: 1-*/8\n    Content-Type: text/plain\n\
    \    abcd\n    -------dkei38sd+\n    MSRP dkei38ia SEND\n    Message-ID: 4564dpWd\n\
    \    Byte-Range: 5-8/8\n    Content-Type: text/plain\n    EFGH\n    -------dkei38ia$\n\
    \                  Figure 3: Breaking a Message into Chunks\n   This chunking\
    \ mechanism allows a sender to interrupt a chunk part of\n   the way through sending\
    \ it.  The ability to interrupt messages allows\n   multiple sessions to share\
    \ a TCP connection, and for large messages\n   to be sent efficiently while not\
    \ blocking other messages that share\n   the same connection, or even the same\
    \ MSRP session.  Any chunk that\n   is larger than 2048 octets MUST be interruptible.\
    \  While MSRP would\n   be simpler to implement if each MSRP session used its\
    \ own TCP\n   connection, there are compelling reasons to conserve connections.\n\
    \   For example, the TCP peer may be a relay device that connects to many\n  \
    \ other peers.  Such a device will scale better if each peer does not\n   create\
    \ a large number of connections.  (Note that in the above\n   example, the initial\
    \ chunk was interruptible for the sake of example,\n   even though its size is\
    \ well below the limit for which\n   interruptibility would be required.)\n  \
    \ The chunking mechanism only applies to the SEND method, as it is the\n   only\
    \ method used to transfer message content.\n"
- title: 5.2.  MSRP Addressing
  contents:
  - "5.2.  MSRP Addressing\n   MSRP entities are addressed using URIs.  The MSRP URI\
    \ schemes are\n   defined in Section 6.  The syntax of the To-Path and From-Path\
    \ header\n   fields each allows for a list of URIs.  This was done to allow the\n\
    \   protocol to work with relays, which are defined in a separate\n   document,\
    \ to provide a complete path to the end recipient.  When two\n   MSRP nodes communicate\
    \ directly, they need only one URI in the To-\n   Path list and one URI in the\
    \ From-Path list.\n"
- title: 5.3.  MSRP Transaction and Report Model
  contents:
  - "5.3.  MSRP Transaction and Report Model\n   A sender sends MSRP requests to a\
    \ receiver.  The receiver MUST\n   quickly accept or reject the request.  If the\
    \ receiver initially\n   accepted the request, it still may then do things that\
    \ take\n   significant time to succeed or fail.  For example, if the receiver\
    \ is\n   an MSRP to Extensible Messaging and Presence Protocol (XMPP) [30]\n \
    \  gateway, it may forward the message over XMPP.  The XMPP side may\n   later\
    \ indicate that the request did not work.  At this point, the\n   MSRP receiver\
    \ may need to indicate that the request did not succeed.\n   There are two important\
    \ concepts here: first, the hop-by-hop delivery\n   of the request may succeed\
    \ or fail; second, the end result of the\n   request may or may not be successfully\
    \ processed.  The first type of\n   status is referred to as \"transaction status\"\
    \ and may be returned in\n   response to a request.  The second type of status\
    \ is referred to as\n   \"delivery status\" and may be returned in a REPORT transaction.\n\
    \   The original sender of a request can indicate if they wish to receive\n  \
    \ reports for requests that fail, and can independently indicate if\n   they wish\
    \ to receive reports for requests that succeed.  A receiver\n   only sends a success\
    \ REPORT if it knows that the request was\n   successfully delivered, and the\
    \ sender requested a success report.  A\n   receiver only sends a failure REPORT\
    \ if the request failed to be\n   delivered and the sender requested failure reports.\n\
    \      This document describes the behavior of MSRP endpoints.  MSRP\n      relays\
    \ will introduce additional conditions that indicate a\n      failure REPORT should\
    \ be sent, such as the failure to receive a\n      positive response from the\
    \ next hop.\n   Two header fields control the sender's desire to receive reports.\n\
    \   The Success-Report header field can have a value of \"yes\" or \"no\" and\n\
    \   the Failure-Report header field can have a value of \"yes\", \"no\", or\n\
    \   \"partial\".\n   The combinations of reporting are needed to meet the various\n\
    \   scenarios of currently deployed IM systems.  Success-Report might be\n   \"\
    no\" in many public systems to reduce load, but might be \"yes\" in\n   certain\
    \ enterprise systems, such as systems used for securities\n   trading.  A Failure-Report\
    \ value of \"no\" is useful for sending system\n   messages such as \"the system\
    \ is going down in 5 minutes\" without\n   causing a response explosion to the\
    \ sender.  A Failure-Report of\n   \"yes\" is used by many systems that wish to\
    \ notify the user if the\n   message failed.  A Failure-Report of \"partial\"\
    \ is a way to report\n   errors other than timeouts.  Timeout error reporting\
    \ requires the\n   sending hop to run a timer and the receiving hop to send an\n\
    \   acknowledgment to stop the timer.  Some systems don't want the\n   overhead\
    \ of doing this.  \"Partial\" allows them to choose not to do\n   so, but still\
    \ allows error responses to be sent in many cases.\n      The term \"partial\"\
    \ denotes that the hop-by-hop acknowledgment\n      mechanism that would be required\
    \ with a Failure-Report value of\n      \"yes\" is not invoked.  Thus, each device\
    \ uses only \"part\" of the\n      set of error detection tools available to them.\
    \  This allows a\n      compromise between no reporting of failures at all, and\
    \ reporting\n      every possible failure.  For example, with \"partial\", a sending\n\
    \      device does not have to keep transaction state around waiting for\n   \
    \   a positive acknowledgment.  But it still allows devices to report\n      other\
    \ types of errors.  The receiving device could still report a\n      policy violation\
    \ such as an unacceptable content-type, or an ICMP\n      error trying to connect\
    \ to a downstream device.\n"
- title: 5.4.  MSRP Connection Model
  contents:
  - "5.4.  MSRP Connection Model\n   When an MSRP endpoint wishes to send a request\
    \ to a peer identified\n   by an MSRP URI, it first needs a transport connection,\
    \ with the\n   appropriate security properties, to the host specified in the URI.\n\
    \   If the sender already has such a connection, that is, one associated\n   with\
    \ the same host, port, and URI scheme, then it SHOULD reuse that\n   connection.\n\
    \   When a new MSRP session is created, the initiating endpoint MUST act\n   as\
    \ the \"active\" endpoint, meaning that it is responsible for opening\n   the\
    \ transport connection to the answerer, if a new connection is\n   required. \
    \ However, this requirement MAY be weakened if standardized\n   mechanisms for\
    \ negotiating the connection direction become available\n   and are implemented\
    \ by both parties to the connection.\n   Likewise, the active endpoint MUST immediately\
    \ issue a SEND request.\n   This initial SEND request MAY have a body if the sender\
    \ has content\n   to send, or it MAY have no body at all.\n      The first SEND\
    \ request serves to bind a connection to an MSRP\n      session from the perspective\
    \ of the passive endpoint.  If the\n      connection is not authenticated with\
    \ TLS, and the active endpoint\n      did not send an immediate request, the passive\
    \ endpoint would have\n      no way to determine who had connected, and would\
    \ not be able to\n      safely send any requests towards the active party until\
    \ after the\n      active party sends its first request.\n   When an element needs\
    \ to form a new connection, it looks at the URI\n   to decide on the type of connection\
    \ (TLS, TCP, etc.) then connects to\n   the host indicated by the URI, following\
    \ the URI resolution rules in\n   Section 6.2.  Connections using the \"msrps\"\
    \ scheme MUST use TLS.  The\n   SubjectAltName in the received certificate MUST\
    \ match the hostname\n   part of the URI and the certificate MUST be valid according\
    \ to RFC\n   3280 [16], including having a date that is valid and being signed\
    \ by\n   an acceptable certification authority.  At this point, the device\n \
    \  that initiated the connection can assume that this connection is with\n   the\
    \ correct host.\n   The rules on certificate name matching and CA signing MAY\
    \ be relaxed\n   when using TLS peer-to-peer.  In this case, a mechanism to ensure\n\
    \   that the peer used a correct certificate MUST be used.  See Section\n   14.4\
    \ for details.\n   If the connection used mutual TLS authentication, and the TLS\
    \ client\n   presented a valid certificate, then the element accepting the\n \
    \  connection can verify the identity of the connecting device by\n   comparing\
    \ the hostname part of the target URI in the SDP provided by\n   the peer device\
    \ against the SubjectAltName in the client certificate.\n   When mutual TLS authentication\
    \ is not used, the listening device MUST\n   wait until it receives a request\
    \ on the connection, at which time it\n   infers the identity of the connecting\
    \ device from the associated\n   session description.\n   When the first request\
    \ arrives, its To-Path header field should\n   contain a URI that the listening\
    \ element provided in the SDP for a\n   session.  The element that accepted the\
    \ connection looks up the URI\n   in the received request, and determines which\
    \ session it matches.  If\n   a match exists, the node MUST assume that the host\
    \ that formed the\n   connection is the host to which this URI was given.  If\
    \ no match\n   exists, the node MUST reject the request with a 481 response. \
    \ The\n   node MUST also check to make sure the session is not already in use\n\
    \   on another connection.  If the session is already in use, it MUST\n   reject\
    \ the request with a 506 response.\n      If it were legal to have multiple connections\
    \ associated with the\n      same session, a security problem would exist.  If\
    \ the initial SEND\n      request is not protected, an eavesdropper might learn\
    \ the URI, and\n      use it to insert messages into the session via a different\n\
    \      connection.\n   If a connection fails for any reason, then an MSRP endpoint\
    \ MUST\n   consider any sessions associated with the connection as also having\n\
    \   failed.  When either endpoint notices such a failure, it MAY attempt\n   to\
    \ re-create any such sessions.  If it chooses to do so, it MUST use\n   a new\
    \ SDP exchange, for example, in a SIP re-INVITE.  If a\n   replacement session\
    \ is successfully created, endpoints MAY attempt to\n   resend any content for\
    \ which delivery on the original session could\n   not be confirmed.  If it does\
    \ this, the Message-ID values for the\n   resent messages MUST match those used\
    \ in the initial attempts.  If\n   the receiving endpoint receives more than one\
    \ message with the same\n   Message-ID, it SHOULD assume that the messages are\
    \ duplicates.  The\n   specific action that an endpoint takes when it receives\
    \ a duplicate\n   message is a matter of local policy, except that it SHOULD NOT\n\
    \   present the duplicate messages to the user without warning of the\n   duplication.\
    \  Note that acknowledgments as needed based on the\n   Failure-Report and Success-Report\
    \ settings are still necessary even\n   for requests containing duplicate content.\n\
    \   When endpoints create a new session in this fashion, the chunks for a\n  \
    \ given logical message MAY be split across the sessions.  However,\n   endpoints\
    \ SHOULD NOT split chunks between sessions under non-failure\n   circumstances.\n\
    \   If an endpoint attempts to re-create a failed session in this manner,\n  \
    \ it MUST NOT assume that the MSRP URIs in the SDP will be the same as\n   the\
    \ old ones.\n   A connection SHOULD NOT be closed while there are sessions associated\n\
    \   with it.\n"
- title: 6.  MSRP URIs
  contents:
  - "6.  MSRP URIs\n   URIs using the \"msrp\" and \"msrps\" schemes are used to identify\
    \ a\n   session of instant messages at a particular MSRP device, as well as\n\
    \   to identify an MSRP relay in general.  This document describes the\n   former\
    \ usage; the latter usage is described in the MSRP relay\n   specification [23].\
    \  MSRP URIs that identify sessions are ephemeral;\n   an MSRP device will use\
    \ a different MSRP URI for each distinct\n   session.  An MSRP URI that identifies\
    \ a session has no meaning\n   outside the scope of that session.\n   An MSRP\
    \ URI follows a subset of the URI syntax in Appendix A of RFC\n   3986 [10], with\
    \ a scheme of \"msrp\" or \"msrps\".  The syntax is\n   described in Section 9.\n\
    \   MSRP URIs are primarily expected to be generated and exchanged\n   between\
    \ systems, and are not intended for \"human consumption\".\n   Therefore, they\
    \ are encoded entirely in US-ASCII.\n   The constructions for \"authority\", \"\
    userinfo\", and \"unreserved\" are\n   detailed in RFC 3986 [10].  URIs designating\
    \ MSRP over TCP MUST\n   include the \"tcp\" transport parameter.\n      Since\
    \ this document only specifies MSRP over TCP, all MSRP URIs\n      herein use\
    \ the \"tcp\" transport parameter.  Documents that provide\n      bindings on\
    \ other transports should define respective parameters\n      for those transports.\n\
    \   The MSRP URI authority field identifies a participant in a particular\n  \
    \ MSRP session.  If the authority field contains a numeric IP address,\n   it\
    \ MUST also contain a port.  The session-id part identifies a\n   particular session\
    \ of the participant.  The absence of the session-id\n   part indicates a reference\
    \ to an MSRP host device, but does not refer\n   to a particular session at that\
    \ device.  A particular value of\n   session-id is only meaningful in the context\
    \ of the associated\n   authority; thus, the authority component can be thought\
    \ of as\n   identifying the \"authority\" governing a namespace for the session-id.\n\
    \   A scheme of \"msrps\" indicates that the underlying connection MUST be\n \
    \  protected with TLS.\n   MSRP has an IANA-registered recommended port defined\
    \ in Section 15.4.\n   This value is not a default, as the URI negotiation process\
    \ described\n   herein will always include explicit port numbers.  However, the\
    \ URIs\n   SHOULD be configured so that the recommended port is used whenever\n\
    \   appropriate.  This makes life easier for network administrators who\n   need\
    \ to manage firewall policy for MSRP.\n   The authority component will typically\
    \ not contain a userinfo\n   component, but MAY do so to indicate a user account\
    \ for which the\n   session is valid.  Note that this is not the same thing as\n\
    \   identifying the session itself.  A userinfo part MUST NOT contain\n   password\
    \ information.\n   The following is an example of a typical MSRP URI:\n      msrp://host.example.com:8493/asfd34;tcp\n"
- title: 6.1.  MSRP URI Comparison
  contents:
  - "6.1.  MSRP URI Comparison\n   In the context of the MSRP protocol, MSRP URI comparisons\
    \ MUST be\n   performed according to the following rules:\n   1.  The scheme MUST\
    \ match.  Scheme comparison is case insensitive.\n   2.  If the authority component\
    \ contains an explicit IP address and/or\n       port, these are compared for\
    \ address and port equivalence.\n       Percent-encoding normalization [10] applies;\
    \ that is, if any\n       percent-encoded nonreserved characters exist in the\
    \ authority\n       component, they must be decoded prior to comparison.  Userinfo\n\
    \       parts are not considered for URI comparison.  Otherwise, the\n       authority\
    \ component is compared as a case-insensitive character\n       string.\n   3.\
    \  If the port exists explicitly in either URI, then it MUST match\n       exactly.\
    \  A URI with an explicit port is never equivalent to\n       another with no\
    \ port specified.\n   4.  The session-id part is compared as case sensitive. \
    \ A URI without\n       a session-id part is never equivalent to one that includes\
    \ one.\n   5.  URIs with different \"transport\" parameters never match.  Two\
    \ URIs\n       that are identical except for transport are not equivalent.  The\n\
    \       transport parameter is case insensitive.\n   Path normalization [10] is\
    \ not relevant for MSRP URIs.\n"
- title: 6.2.  Resolving MSRP Host Device
  contents:
  - "6.2.  Resolving MSRP Host Device\n   An MSRP host device is identified by the\
    \ authority component of an\n   MSRP URI.\n   If the authority component contains\
    \ a numeric IP address and port,\n   they MUST be used as listed.\n   If the authority\
    \ component contains a host name and a port, the\n   connecting device MUST determine\
    \ a host address by doing an A or AAAA\n   DNS query and use the port as listed.\n\
    \   If a connection attempt fails, the device SHOULD attempt to connect\n   to\
    \ the addresses returned in any additional A or AAAA records, in the\n   order\
    \ the records were presented.\n      This process assumes that the connection\
    \ port is always known\n      prior to resolution.  This is always true for the\
    \ MSRP URI uses\n      described in this document, that is, URIs exchanged in\
    \ the SDP\n      offer and answer.  The introduction of relays creates situations\n\
    \      where this is not the case.  For example, when a user configures\n    \
    \  her client to use a relay, it is desirable that the relay's MSRP\n      URI\
    \ is easy to remember and communicate to humans.  Often this\n      type of MSRP\
    \ will omit the port number.  Therefore, the relay\n      specification [23] describes\
    \ additional steps to resolve the port\n      number.\n   MSRP devices MAY use\
    \ other methods for discovering other such\n   devices, when appropriate.  For\
    \ example, MSRP endpoints may use other\n   mechanisms to discover relays, which\
    \ are beyond the scope of this\n   document.\n"
- title: 7.  Method-Specific Behavior
  contents:
  - '7.  Method-Specific Behavior

    '
- title: 7.1.  Constructing Requests
  contents:
  - "7.1.  Constructing Requests\n   To form a new request, the sender creates a transaction\
    \ identifier\n   and uses this and the method name to create an MSRP request start\n\
    \   line.  The transaction identifier MUST NOT collide with that of other\n  \
    \ transactions that exist at the same time.  Therefore, it MUST contain\n   at\
    \ least 64 bits of randomness.\n   Next, the sender places the target path in\
    \ a To-Path header field,\n   and the sender's URI in a From-Path header field.\
    \  If multiple URIs\n   are present in the To-Path, the leftmost is the first\
    \ URI visited;\n   the rightmost URI is the last URI visited.  The processing\
    \ then\n   becomes method specific.  Additional method-specific header fields\n\
    \   are added as described in the following sections.\n   After any method-specific\
    \ header fields are added, processing\n   continues to handle a body, if present.\
    \  If the request has a body,\n   it MUST contain a Content-Type header field.\
    \  It may contain other\n   MIME-specific header fields.  The Content-Type header\
    \ field MUST be\n   the last field in the message header section.  The body MUST\
    \ be\n   separated from the header fields with an extra CRLF.\n   Non-SEND requests\
    \ are not intended to carry message content, and are\n   therefore not interruptible.\
    \  Non-SEND request bodies MUST NOT be\n   larger than 10240 octets.\n      Although\
    \ this document does not discuss any particular usage of\n      bodies in non-SEND\
    \ requests, they may be useful in the future for\n      carrying security or identity\
    \ information, information about a\n      message in progress, etc.  The 10K size\
    \ limit was chosen to be\n      large enough for most of such applications, but\
    \ small enough to\n      avoid the fairness issues caused by sending arbitrarily\
    \ large\n      content in non-interruptible method bodies.\n   A request with\
    \ no body MUST NOT include a Content-Type or any other\n   MIME-specific header\
    \ fields.  A request without a body MUST contain\n   an end-line after the final\
    \ header field.  No extra CRLF will be\n   present between the header section\
    \ and the end-line.\n      Requests with no bodies are useful when a client wishes\
    \ to send\n      \"traffic\", but does not wish to send content to be rendered\
    \ to the\n      peer user.  For example, the active endpoint sends a SEND request\n\
    \      immediately upon establishing a connection.  If it has nothing to\n   \
    \   say at the moment, it can send a request with no body.  Bodiless\n      requests\
    \ may also be used in certain applications to keep Network\n      Address Translation\
    \ (NAT) bindings alive, etc.\n      Bodiless requests are distinct from requests\
    \ with empty bodies.  A\n      request with an empty body will have a Content-Type\
    \ header field\n      value and will generally be rendered to the recipient according\
    \ to\n      the rules for that type.\n   The end-line that terminates the request\
    \ MUST be composed of seven\n   \"-\" (minus sign) characters, the transaction\
    \ ID as used in the start\n   line, and a flag character.  If a body is present,\
    \ the end-line MUST\n   be preceded by a CRLF that is not part of the body.  If\
    \ the chunk\n   represents the data that forms the end of the complete message,\
    \ the\n   flag value MUST be a \"$\".  If the sender is aborting an incomplete\n\
    \   message, and intends to send no further chunks in that message, the\n   flag\
    \ MUST be a \"#\".  Otherwise, the flag MUST be a \"+\".\n   If the request contains\
    \ a body, the sender MUST ensure that the end-\n   line (seven hyphens, the transaction\
    \ identifier, and a continuation\n   flag) is not present in the body.  If the\
    \ end-line is present in the\n   body, the sender MUST choose a new transaction\
    \ identifier that is not\n   present in the body, and add a CRLF if needed, and\
    \ the end-line,\n   including the \"$\", \"#\", or \"+\" character.\n   Some implementations\
    \ may choose to scan for the closing sequence as\n   they send the body, and if\
    \ it is encountered, simply interrupt the\n   chunk at that point and start a\
    \ new transaction with a different\n   transaction identifier to carry the rest\
    \ of the body.  Other\n   implementations may choose to scan the data and ensure\
    \ that the body\n   does not contain the transaction identifier before they start\
    \ sending\n   the transaction.\n   Once a request is ready for delivery, the sender\
    \ follows the\n   connection management (Section 5.4) rules to forward the request\
    \ over\n   an existing open connection or create a new connection.\n"
- title: 7.1.1.  Sending SEND Requests
  contents:
  - "7.1.1.  Sending SEND Requests\n   When an endpoint has a message to deliver,\
    \ it first generates a new\n   Message-ID.  The value MUST be highly unlikely\
    \ to be repeated by\n   another endpoint instance, or by the same instance in\
    \ the future.  If\n   necessary, the endpoint breaks the message into chunks.\
    \  It then\n   generates a SEND request for each chunk, following the procedures\
    \ for\n   constructing requests (Section 7.1).\n      The Message-ID header field\
    \ provides a unique message identifier\n      that refers to a particular version\
    \ of a particular message.  The\n      term \"Message\" in this context refers\
    \ to a unit of content that\n      the sender wishes to convey to the recipient.\
    \  While such a\n      message may be broken into chunks, the Message-ID refers\
    \ to the\n      entire message, not a chunk of the message.\n      The uniqueness\
    \ of the message identifier is ensured by the host\n      that generates it. \
    \ This message identifier is intended to be\n      machine readable and not necessarily\
    \ meaningful to humans.  A\n      message identifier pertains to exactly one version\
    \ of a particular\n      message; subsequent revisions to the message each receive\
    \ new\n      message identifiers.  Endpoints can ensure sufficient uniqueness\n\
    \      in any number of ways, the selection of which is an implementation\n  \
    \    choice.  For example, an endpoint could concatenate an instance\n      identifier\
    \ such as a MAC address, its idea of the number of\n      seconds since the epoch,\
    \ a process ID, and a monotonically\n      increasing 16-bit integer, all base-64\
    \ encoded.  Alternately, an\n      endpoint without an on-board clock could simply\
    \ use a 64-bit\n      random number.\n   Each chunk of a message MUST contain\
    \ a Message-ID header field\n   containing the Message-ID.  If the sender wishes\
    \ non-default status\n   reporting, it MUST insert a Failure-Report and/or Success-Report\n\
    \   header field with an appropriate value.  All chunks of the same\n   message\
    \ MUST use the same Failure-Report and Success-Report values in\n   their SEND\
    \ requests.\n   If success reports are requested, i.e., the value of the Success-\n\
    \   Report header field is \"yes\", the sending device MAY wish to run a\n   timer\
    \ of some value that makes sense for its application and take\n   action if a\
    \ success report is not received in this time.  There is no\n   universal value\
    \ for this timer.  For many IM applications, it may be\n   2 minutes while for\
    \ some trading systems it may be under a second.\n   Regardless of whether such\
    \ a timer is used, if the success report has\n   not been received by the time\
    \ the session is ended, the device SHOULD\n   inform the user.\n   If the value\
    \ of \"Failure-Report\" is set to \"yes\", then the sender of\n   the request\
    \ runs a timer.  If a 200 response to the transaction is\n   not received within\
    \ 30 seconds from the time the last byte of the\n   transaction is sent, or submitted\
    \ to the operating system for\n   sending, the element MUST inform the user that\
    \ the request probably\n   failed.  If the value is set to \"partial\", then the\
    \ element sending\n   the transaction does not have to run a timer, but MUST inform\
    \ the\n   user if it receives a non-recoverable error response to the\n   transaction.\
    \  Regardless of the Failure-Report value, there is no\n   requirement to wait\
    \ for a response prior to sending the next request.\n      The treatment of timers\
    \ for success reports and failure reports is\n      intentionally inconsistent.\
    \  An explicit timeout value makes sense\n      for failure reports since such\
    \ reports will usually refer to a\n      message \"chunk\" that is acknowledged\
    \ on a hop-by-hop basis.  This\n      is not the case for success reports, which\
    \ are end-to-end and may\n      refer to the entire message content, which can\
    \ be arbitrarily\n      large.\n   If no Success-Report header field is present\
    \ in a SEND request, it\n   MUST be treated the same as a Success-Report header\
    \ field with a\n   value of \"no\".  If no Failure-Report header field is present,\
    \ it MUST\n   be treated the same as a Failure-Report header field with a value\
    \ of\n   \"yes\".  If an MSRP endpoint receives a REPORT for a Message-ID it\n\
    \   does not recognize, it SHOULD silently ignore the REPORT.\n   The Byte-Range\
    \ header field value contains a starting value (range-\n   start) followed by\
    \ a \"-\", an ending value (range-end) followed by a\n   \"/\", and finally the\
    \ total length.  The first octet in the message\n   has a position of one, rather\
    \ than a zero.\n   The first chunk of the message SHOULD, and all subsequent chunks\n\
    \   MUST, include a Byte-Range header field.  The range-start field MUST\n   indicate\
    \ the position of the first byte in the body in the overall\n   message (for the\
    \ first chunk this field will have a value of one).\n   The range-end field SHOULD\
    \ indicate the position of the last byte in\n   the body, if known.  It MUST take\
    \ the value of \"*\" if the position is\n   unknown, or if the request needs to\
    \ be interruptible.  The total\n   field SHOULD contain the total size of the\
    \ message, if known.  The\n   total field MAY contain a \"*\" if the total size\
    \ of the message is not\n   known in advance.  The sender MUST send all chunks\
    \ in Byte-Range\n   order.  (However, the receiver cannot assume that the requests\
    \ will\n   be delivered in order, as intervening relays may have changed the\n\
    \   order.)\n   There are some circumstances where an endpoint may choose to send\
    \ an\n   empty SEND request.  For the sake of consistency, a Byte-Range header\n\
    \   field referring to nonexistent or zero-length content MUST still have\n  \
    \ a range-start value of 1.  For example, \"1-0/0\".\n   To ensure fairness over\
    \ a connection, senders MUST NOT send chunks\n   with a body larger than 2048\
    \ octets unless they are prepared to\n   interrupt them (meaning that any chunk\
    \ with a body of greater than\n   2048 octets will have a \"*\" character in the\
    \ range-end field).  A\n   sender can use one of the following two strategies\
    \ to satisfy this\n   requirement.  The sender is STRONGLY RECOMMENDED to send\
    \ messages\n   larger than 2048 octets using as few chunks as possible, interrupting\n\
    \   chunks (at least 2048 octets long) only when other traffic is waiting\n  \
    \ to use the same connection.  Alternatively, the sender MAY simply\n   send chunks\
    \ in 2048-octet increments until the final chunk.  Note\n   that the former strategy\
    \ results in markedly more efficient use of\n   the connection.  All MSRP nodes\
    \ MUST be able to receive chunks of any\n   size from zero octets to the maximum\
    \ number of octets they can\n   receive for a complete message.  Senders SHOULD\
    \ NOT break messages\n   into chunks smaller than 2048 octets, except for the\
    \ final chunk of a\n   complete message.\n   A SEND request is interrupted while\
    \ a body is in the process of being\n   written to the connection by simply noting\
    \ how much of the message\n   has already been written to the connection, then\
    \ writing out the end-\n   line to end the chunk.  It can then be resumed in a\
    \ another chunk\n   with the same Message-ID and a Byte-Range header field range\
    \ start\n   field containing the position of the first byte after the\n   interruption\
    \ occurred.\n   SEND requests larger than 2048 octets MUST be interrupted if the\n\
    \   sender needs to send pending responses or REPORT requests.  If\n   multiple\
    \ SEND requests from different sessions are concurrently being\n   sent over the\
    \ same connection, the device SHOULD implement some\n   scheme to alternate between\
    \ them such that each concurrent request\n   gets a chance to send some fair portion\
    \ of data at regular intervals\n   suitable to the application.\n   The sender\
    \ MUST NOT assume that a message is received by the peer\n   with the same chunk\
    \ allocation with which it was sent.  An\n   intervening relay could possibly\
    \ break SEND requests into smaller\n   chunks, or aggregate multiple chunks into\
    \ larger ones.\n   The default disposition of messages is to be rendered to the\
    \ user.\n   If the sender wants a different disposition, it MAY insert a Content-\n\
    \   Disposition [9] header field.  Values MAY include any from RFC 2183\n   [9]\
    \ or the IANA registry it defines.  Since MSRP can carry unencoded\n   binary\
    \ payloads, transfer encoding is always \"binary\", and transfer-\n   encoding\
    \ parameters MUST NOT be present.\n"
- title: 7.1.2.  Sending REPORT Requests
  contents:
  - "7.1.2.  Sending REPORT Requests\n   REPORT requests are similar to SEND requests,\
    \ except that report\n   requests MUST NOT include Success-Report or Failure-Report\
    \ header\n   fields, and MUST contain a Status header field.  REPORT requests\
    \ MUST\n   contain the Message-ID header field from the original SEND request.\n\
    \   If an MSRP element receives a REPORT for a Message-ID it does not\n   recognize,\
    \ it SHOULD silently ignore the REPORT.\n   An MSRP endpoint MUST be able to generate\
    \ success REPORT requests.\n   REPORT requests will normally not include a body,\
    \ as the REPORT\n   request header fields can carry sufficient information in\
    \ most cases.\n   However, REPORT requests MAY include a body containing additional\n\
    \   information about the status of the associated SEND request.  Such a\n   body\
    \ is informational only, and the sender of the REPORT request\n   SHOULD NOT assume\
    \ that the recipient pays any attention to the body.\n   REPORT requests are not\
    \ interruptible.\n   Success-Report and Failure-Report header fields MUST NOT\
    \ be present\n   in REPORT requests.  MSRP nodes MUST NOT send REPORT requests\
    \ in\n   response to REPORT requests.  MSRP nodes MUST NOT send MSRP responses\n\
    \   to REPORT requests.\n   Endpoints SHOULD NOT send REPORT requests if they\
    \ have reason to\n   believe the request will not be delivered.  For example,\
    \ they SHOULD\n   NOT send a REPORT request for a session that is no longer valid.\n"
- title: 7.1.3.  Generating Success Reports
  contents:
  - "7.1.3.  Generating Success Reports\n   When an endpoint receives a message in\
    \ one or more chunks that\n   contain a Success-Report value of \"yes\", it MUST\
    \ send a success\n   report or reports covering all bytes that are received successfully.\n\
    \   The success reports are sent in the form of REPORT requests,\n   following\
    \ the normal procedures (Section 7.1), with a few additional\n   requirements.\n\
    \   The receiver MAY wait until it receives the last chunk of a message,\n   and\
    \ send a success report that covers the complete message.\n   Alternately, it\
    \ MAY generate incremental success REPORTs as the\n   chunks are received.  These\
    \ can be sent periodically and cover all\n   the bytes that have been received\
    \ so far, or they can be sent after a\n   chunk arrives and cover just the part\
    \ from that chunk.\n      It is helpful to think of a success REPORT as reporting\
    \ on a\n      particular range of bytes, rather than on a particular chunk sent\n\
    \      by a client.  The sending client cannot depend on the Byte-Range\n    \
    \  header field in a given success report matching that of a\n      particular\
    \ SEND request.  For example, an intervening MSRP relay\n      may break chunks\
    \ into smaller chunks, or aggregate multiple chunks\n      into larger ones. \
    \ A side effect of this is, even if no relay is\n      used, the receiving client\
    \ may report on byte ranges that do not\n      exactly match those in the original\
    \ chunks sent by the sender.  It\n      can wait until all bytes in a message\
    \ are received and report on\n      the whole, it can report as it receives each\
    \ chunk, or it can\n      report on any other received range.  Reporting on ranges\
    \ smaller\n      than the entire message contents allows certain improved user\n\
    \      experiences for the sender.  For example, a sending client could\n    \
    \  display incremental status information showing which ranges of\n      bytes\
    \ have been acknowledged by the receiver.  However, the choice\n      on whether\
    \ to report incrementally is entirely up to the receiving\n      client.  There\
    \ is no mechanism for the sender to assert its desire\n      to receive incremental\
    \ reports or not.  Since the presence of a\n      relay can cause the receiver\
    \ to see a very different chunk\n      allocation than the sender, such a mechanism\
    \ would be of\n      questionable value.\n   When generating a REPORT request,\
    \ the endpoint inserts a To-Path\n   header field containing the From-Path value\
    \ from the original\n   request, and a From-Path header field containing the URI\
    \ identifying\n   itself in the session.  The endpoint then inserts a Status header\n\
    \   field with a namespace of \"000\", a status-code of \"200\", and an\n   implementation-defined\
    \ comment phrase.  It also inserts a Message-ID\n   header field containing the\
    \ value from the original request.\n      The namespace field denotes the context\
    \ of the status-code field.\n      The namespace value of \"000\" means the status-code\
    \ should be\n      interpreted in the same way as the matching MSRP transaction\n\
    \      response code.  If a future specification uses the status-code\n      field\
    \ for some other purpose, it MUST define a new namespace field\n      value.\n\
    \   The endpoint MUST NOT send a success report for a SEND request that\n   either\
    \ contained no Success-Report header field or contained such a\n   field with\
    \ a value of \"no\".  That is, if no Success-Report header\n   field is present,\
    \ it is treated identically to one with a value of\n   \"no\".\n"
- title: 7.1.4.  Generating Failure Reports
  contents:
  - "7.1.4.  Generating Failure Reports\n   If an MSRP endpoint receives a SEND request\
    \ that it cannot process\n   for some reason, and the Failure-Report header field\
    \ either was not\n   present in the original request or had a value of \"yes\"\
    , it SHOULD\n   simply include the appropriate error code in the transaction\n\
    \   response.  However, there may be situations where the error cannot be\n  \
    \ determined quickly, such as when the endpoint is a gateway that waits\n   for\
    \ a downstream network to indicate an error.  In this situation, it\n   MAY send\
    \ a 200 OK response to the request, and then send a failure\n   REPORT request\
    \ when the error is detected.\n   If the endpoint receives a SEND request with\
    \ a Failure-Report header\n   field value of \"no\", then it MUST NOT send a failure\
    \ REPORT request,\n   and MUST NOT send a transaction response.  If the value\
    \ is \"partial\",\n   it MUST NOT send a 200 transaction response to the request,\
    \ but\n   SHOULD send an appropriate non-200 class response if a failure\n   occurs.\n\
    \   As stated above, if no Failure-Report header field is present, it\n   MUST\
    \ be treated the same as a Failure-Report header field with a\n   value of \"\
    yes\".\n   Construction of failure REPORT requests is identical to that for\n\
    \   success REPORT requests, except the Status header field code field\n   MUST\
    \ contain the appropriate error code.  Any error response code\n   defined in\
    \ this specification MAY also be used in failure reports.\n   If a failure REPORT\
    \ request is sent in response to a SEND request\n   that contained a chunk, it\
    \ MUST include a Byte-Range header field\n   indicating the actual range being\
    \ reported on.  It can take the\n   range-start and total values from the original\
    \ SEND request, but MUST\n   calculate the range-end field from the actual body\
    \ data.\n      This section only describes failure report generation behavior\
    \ for\n      MSRP endpoints.  Relay behavior is beyond the scope of this\n   \
    \   document, and will be considered in a separate document [23].  We\n      expect\
    \ failure reports to be more commonly generated by relays\n      than by endpoints.\n"
- title: 7.2.  Constructing Responses
  contents:
  - "7.2.  Constructing Responses\n   If an MSRP endpoint receives a request that\
    \ either contains a\n   Failure-Report header field value of \"yes\" or does not\
    \ contain a\n   Failure-Report header field at all, it MUST immediately generate\
    \ a\n   response.  Likewise, if an MSRP endpoint receives a request that\n   contains\
    \ a Failure-Report header field value of \"partial\", and the\n   receiver is\
    \ unable to process the request, it SHOULD immediately\n   generate a response.\n\
    \   To construct the response, the endpoint first creates the response\n   start\
    \ line, inserting the appropriate response code and optionally a\n   comment.\
    \  The transaction identifier in the response start line MUST\n   match the transaction\
    \ identifier from the original request.\n   The endpoint then inserts an appropriate\
    \ To-Path header field.  If\n   the request triggering the response was a SEND\
    \ request, the To-Path\n   header field is formed by copying the first (leftmost)\
    \ URI in the\n   From-Path header field of the request. (Responses to SEND requests\n\
    \   are returned only to the previous hop.) For responses to all other\n   request\
    \ methods, the To-Path header field contains the full path back\n   to the original\
    \ sender.  This full path is generated by copying the\n   list of URIs from the\
    \ From-Path of the original request into the To-\n   Path of the response. (Legal\
    \ REPORT requests do not request\n   responses, so this specification doesn't\
    \ exercise the behavior\n   described above; however, we expect that extensions\
    \ for gateways and\n   relays will need such behavior.)\n   Finally, the endpoint\
    \ inserts a From-Path header field containing the\n   URI that identifies it in\
    \ the context of the session, followed by the\n   end-line after the last header\
    \ field.  Since a response is never\n   chunked, the continuation flag in the\
    \ end-line will always contain a\n   dollar sign (\"$\").  The response MUST be\
    \ transmitted back on the same\n   connection on which the original request arrived.\n"
- title: 7.3.  Receiving Requests
  contents:
  - "7.3.  Receiving Requests\n   The receiving endpoint MUST first check the URI\
    \ in the To-Path to\n   make sure the request belongs to an existing session.\
    \  When the\n   request is received, the To-Path will have exactly one URI, which\n\
    \   MUST map to an existing session that is associated with the\n   connection\
    \ on which the request arrived.  If this is not true, then\n   the receiver MUST\
    \ generate a 481 error and ignore the request.  Note\n   that if the Failure-Report\
    \ header field had a value of \"no\", then no\n   error report would be sent.\n\
    \   Further request processing by the receiver is method specific.\n"
- title: 7.3.1.  Receiving SEND Requests
  contents:
  - "7.3.1.  Receiving SEND Requests\n   When the receiving endpoint receives a SEND\
    \ request, it first\n   determines if it contains a complete message or a chunk\
    \ from a larger\n   message.  If the request contains no Byte-Range header field,\
    \ or\n   contains one with a range-start value of \"1\", and the closing line\n\
    \   continuation flag has a value of \"$\", then the request contained the\n \
    \  entire message.  Otherwise, the receiver looks at the Message-ID\n   value\
    \ to associate chunks together into the original message.  The\n   receiver forms\
    \ a virtual buffer to receive the message, keeping track\n   of which bytes have\
    \ been received and which are missing.  The\n   receiver takes the data from the\
    \ request and places it in the\n   appropriate place in the buffer.  The receiver\
    \ SHOULD determine the\n   actual length of each chunk by inspecting the payload\
    \ itself; it is\n   possible the body is shorter than the range-end field indicates.\n\
    \   This can occur if the sender interrupted a SEND request unexpectedly.\n  \
    \ It is worth noting that the chunk that has a termination character of\n   \"\
    $\" defines the total length of the message.\n      It is technically illegal\
    \ for the sender to prematurely interrupt\n      a request that had anything other\
    \ than \"*\" in the last-byte\n      position of the Byte-Range header field.\
    \  But having the receiver\n      calculate a chunk length based on actual content\
    \ adds resilience\n      in the face of sender errors.  Since this should never\
    \ happen with\n      compliant senders, this only has a \"SHOULD\" strength.\n\
    \   Receivers MUST not assume that the chunks will be delivered in order\n   or\
    \ that they will receive all the chunks with \"+\" flags before they\n   receive\
    \ the chunk with the \"$\" flag.  In certain cases of connection\n   failure,\
    \ it is possible for information to be duplicated.  If chunk\n   data is received\
    \ that overlaps already received data for the same\n   message, the last chunk\
    \ received SHOULD take precedence (even though\n   this may not have been the\
    \ last chunk transmitted).  For example, if\n   bytes 1 to 100 were received and\
    \ a chunk arrives that contains bytes\n   50 to 150, this second chunk will overwrite\
    \ bytes 50 to 100 of the\n   data that had already been received.  Although other\
    \ schemes work,\n   this is the easiest for the receiver and results in consistent\n\
    \   behavior between clients.\n      There are situations in which the receiver\
    \ may not be able to give\n      precedence to the last chunk received when chunks\
    \ overlap.  For\n      example, the recipient might incrementally render chunks\
    \ as they\n      arrive.  If a new chunk arrives that overlaps with a previously\n\
    \      rendered chunk, it would be too late to \"take back\" any\n      conflicting\
    \ data from the first chunk.  Therefore, the requirement\n      to give precedence\
    \ to the most recent chunk is specified at a\n      \"SHOULD\" strength.  This\
    \ requirement is not intended to disallow\n      applications where this behavior\
    \ does not make sense.\n   The seven \"-\" in the end-line are used so that the\
    \ receiver can\n   search for the value \"----\", 32 bits at a time to find the\
    \ probable\n   location of the end-line.  This allows most processors to locate\
    \ the\n   boundaries and copy the memory at the same rate that a normal memory\n\
    \   copy could be done.  This approach results in a system that is as\n   fast\
    \ as framing based on specifying the body length in the header\n   fields of the\
    \ request, but also allows for the interruption of\n   messages.\n   What is done\
    \ with the body is outside the scope of MSRP and largely\n   determined by the\
    \ MIME Content-Type and Content-Disposition.  The\n   body MAY be rendered after\
    \ the whole message is received or partially\n   rendered as it is being received.\n\
    \   If the SEND request contained a Content-Type header field indicating\n   an\
    \ unsupported media-type, and the Failure-Report value is not \"no\",\n   the\
    \ receiver MUST generate a response with a status code of 415.  All\n   MSRP endpoints\
    \ MUST be able to receive the multipart/mixed [15] and\n   multipart/alternative\
    \ [15] media-types.\n   If the Success-Report header field was set to \"yes\"\
    , the receiver\n   must construct and send one or more success reports, as described\
    \ in\n   Section 7.1.3.\n"
- title: 7.3.2.  Receiving REPORT Requests
  contents:
  - "7.3.2.  Receiving REPORT Requests\n   When an endpoint receives a REPORT request,\
    \ it correlates the report\n   to the original SEND request using the Message-ID\
    \ and the Byte-Range,\n   if present.  If it requested success reports, then it\
    \ SHOULD keep\n   enough state about each outstanding sent message so that it\
    \ can\n   correlate REPORT requests to the original messages.\n   An endpoint\
    \ that receives a REPORT request containing a Status header\n   field with a namespace\
    \ field of \"000\" MUST interpret the report in\n   exactly the same way it would\
    \ interpret an MSRP transaction response\n   with a response code matching the\
    \ status-code field.\n   It is possible to receive a failure report or a failure\
    \ transaction\n   response for a chunk that is currently being delivered.  In\
    \ this\n   case, the entire message corresponding to that chunk SHOULD be\n  \
    \ aborted, by including the \"#\" character in the continuation field of\n   the\
    \ end-line.\n   It is possible that an endpoint will receive a REPORT request\
    \ on a\n   session that is no longer valid.  The endpoint's behavior if this\n\
    \   happens is a matter of local policy.  The endpoint is not required to\n  \
    \ take any steps to facilitate such late delivery; i.e., it is not\n   expected\
    \ to keep a connection active in case late REPORTs might\n   arrive.\n   When\
    \ an endpoint that sent a SEND request receives a failure REPORT\n   indicating\
    \ that a particular byte range was not received, it MUST\n   treat the session\
    \ as failed.  If it wishes to recover, it MUST first\n   re-negotiate the URIs\
    \ at the signaling level then resend that range\n   of bytes of the message on\
    \ the resulting new session.\n   MSRP nodes MUST NOT send MSRP REPORT requests\
    \ in response to other\n   REPORT requests.\n"
- title: 8.  Using MSRP with SIP and SDP
  contents:
  - "8.  Using MSRP with SIP and SDP\n   MSRP sessions will typically be initiated\
    \ using the Session\n   Description Protocol (SDP) [2] via the SIP offer/answer\
    \ mechanism\n   [3].\n   This document defines a handful of new SDP parameters\
    \ to set up MSRP\n   sessions.  These are detailed below and in the IANA Considerations\n\
    \   section.\n   An MSRP media-line (that is, a media-line proposing MSRP) in\
    \ the\n   session description is accompanied by a mandatory \"path\" attribute.\n\
    \   This attribute contains a space-separated list of URIs to be visited\n   to\
    \ contact the user agent advertising this session description.  If\n   more than\
    \ one URI is present, the leftmost URI is the first URI to be\n   visited to reach\
    \ the target resource.  (The path list can contain\n   multiple URIs to allow\
    \ for the deployment of gateways or relays in\n   the future.)  MSRP implementations\
    \ that can accept incoming\n   connections without the need for relays will typically\
    \ only provide a\n   single URI here.\n   An MSRP media line is also accompanied\
    \ by an \"accept-types\"\n   attribute, and optionally an \"accept-wrapped-types\"\
    \ attribute.  These\n   attributes are used to specify the media-types that are\
    \ acceptable to\n   the endpoint.\n"
- title: 8.1.  SDP Connection and Media-Lines
  contents:
  - "8.1.  SDP Connection and Media-Lines\n   An SDP connection-line takes the following\
    \ format:\n   c=<network type> <address type> <connection address>\n         \
    \         Figure 4: Standard SDP Connection Line\n   The network type and address\
    \ type fields are used as normal for SDP.\n   The connection address field MUST\
    \ be set to the IP address or fully\n   qualified domain name from the MSRP URI\
    \ identifying the endpoint in\n   its path attribute.\n   The general format of\
    \ an SDP media-line is:\n   m=<media> <port> <protocol> <format list>\n      \
    \               Figure 5: Standard SDP Media Line\n   An offered or accepted media-line\
    \ for MSRP over TCP MUST include a\n   protocol field value of \"TCP/MSRP\", or\
    \ \"TCP/TLS/MSRP\" for TLS.  The\n   media field value MUST be \"message\".  The\
    \ format list field MUST be\n   set to \"*\".\n   The port field value MUST match\
    \ the port value used in the endpoint's\n   MSRP URI in the path attribute, except\
    \ that, as described in [3], a\n   user agent that wishes to accept an offer,\
    \ but not a specific media-\n   line, MUST set the port number of that media-line\
    \ to zero (0) in the\n   response.  Since MSRP allows multiple sessions to share\
    \ the same TCP\n   connection, multiple m-lines in a single SDP document may share\
    \ the\n   same port field value; MSRP devices MUST NOT assume any particular\n\
    \   relationship between m-lines on the sole basis that they have\n   matching\
    \ port field values.\n      MSRP devices do not use the c-line address field,\
    \ or the m-line\n      port and format list fields to determine where to connect.\n\
    \      Rather, they use the attributes defined in this specification.\n      The\
    \ connection information is copied to the c-line and m-line for\n      purposes\
    \ of backwards compatibility with conventional SDP usages.\n      While MSRP could\
    \ theoretically carry any media-type, \"message\" is\n      appropriate.\n"
- title: 8.2.  URI Negotiations
  contents:
  - "8.2.  URI Negotiations\n   Each endpoint in an MSRP session is identified by\
    \ a URI.  These URIs\n   are negotiated in the SDP exchange.  Each SDP offer or\
    \ answer that\n   proposes MSRP MUST contain a \"path\" attribute containing one\
    \ or more\n   MSRP URIs.  The path attribute is used in an SDP a-line, and has\
    \ the\n   following syntax:\n        path = path-label \":\" path-list\n     \
    \   path-label = \"path\"\n        path-list= MSRP-URI *(SP MSRP-URI)\n      \
    \                      Figure 6: Path Attribute\n   where MSRP-URI is an \"msrp\"\
    \ or \"msrps\" URI as defined in Section 6.\n   MSRP URIs included in an SDP offer\
    \ or answer MUST include explicit\n   port numbers.\n   An MSRP device uses the\
    \ URI to determine a host address, port,\n   transport, and protection level when\
    \ connecting, and to identify the\n   target when sending requests and responses.\n\
    \   The offerer and answerer each selects a URI to represent itself and\n   sends\
    \ that URI to its peer in the SDP document.  Each peer stores the\n   path value\
    \ received from the other peer and uses that value as the\n   target for requests\
    \ inside the resulting session.  If the path\n   attribute received from the peer\
    \ contains more than one URI, then the\n   target URI is the rightmost, while\
    \ the leftmost entry represents the\n   adjacent hop.  If only one entry is present,\
    \ then it is both the peer\n   and adjacent hop URI.  The target path is the entire\
    \ path attribute\n   value received from the peer.\n   The following example shows\
    \ an SDP offer with a session URI of\n   \"msrp://alice.example.com:7394/2s93i9ek2a;tcp\"\
    \n    v=0\n    o=alice 2890844526 2890844527 IN IP4 alice.example.com\n    s=\
    \ -\n    c=IN IP4 alice.example.com\n    t=0 0\n    m=message 7394 TCP/MSRP *\n\
    \    a=accept-types:text/plain\n    a=path:msrp://alice.example.com:7394/2s93i9ek2a;tcp\n\
    \                 Figure 7: Example SDP with Path Attribute\n   The rightmost\
    \ URI in the path attribute MUST identify the endpoint\n   that generated the\
    \ SDP document, or some other location where that\n   endpoint wishes to receive\
    \ requests associated with the session.  It\n   MUST be assigned for this particular\
    \ session, and MUST NOT duplicate\n   any URI in use for any other session in\
    \ which the endpoint is\n   currently participating.  It SHOULD be hard to guess,\
    \ and protected\n   from eavesdroppers.  This is discussed in more detail in Section\
    \ 14.\n"
- title: 8.3.  Path Attributes with Multiple URIs
  contents:
  - "8.3.  Path Attributes with Multiple URIs\n   As mentioned previously, this document\
    \ describes MSRP for peer-to-\n   peer scenarios, that is, when no relays are\
    \ used.  The use of relays\n   is described in a separate document [23].  In order\
    \ to allow an MSRP\n   device that only implements the core specification to interoperate\n\
    \   with devices that use relays, this document must include a few\n   assumptions\
    \ about how relays work.\n   An endpoint that uses one or more relays will indicate\
    \ that by\n   putting a URI for each device in the relay chain into the SDP path\n\
    \   attribute.  The final entry will point to the endpoint itself.  The\n   other\
    \ entries will indicate each proposed relay, in order.  The first\n   entry will\
    \ point to the first relay in the chain from the perspective\n   of the peer,\
    \ that is, the relay to which the peer device, or a relay\n   operating on its\
    \ behalf, should connect.\n   Endpoints that do not wish to insert a relay, including\
    \ those that do\n   not support relays at all, will put exactly one URI into the\
    \ path\n   attribute.  This URI represents both the endpoint for the session and\n\
    \   the connection point.\n   Even though endpoints that implement only this specification\
    \ will\n   never introduce a relay, they need to be able to interoperate with\n\
    \   other endpoints that do use relays.  Therefore, they MUST be prepared\n  \
    \ to receive more than one URI in the SDP path attribute.  When an\n   endpoint\
    \ receives more than one URI in a path attribute, only the\n   first entry is\
    \ relevant for purposes of resolving the address and\n   port, and establishing\
    \ the network connection, as it describes the\n   first adjacent hop.\n   If an\
    \ endpoint puts more than one URI in a path attribute, the final\n   URI in the\
    \ path attribute (the peer URI) identifies the session, and\n   MUST not duplicate\
    \ the URI of any other session in which the endpoint\n   is currently participating.\
    \  Uniqueness requirements for other\n   entries in the path attribute are out\
    \ of scope for this document.\n"
- title: 8.4.  Updated SDP Offers
  contents:
  - "8.4.  Updated SDP Offers\n   MSRP endpoints may sometimes need to send additional\
    \ SDP exchanges\n   for an existing session.  They may need to send periodic exchanges\n\
    \   with no change to refresh state in the network, for example, SIP\n   session\
    \ timers or the SIP UPDATE [24] request.  They may need to\n   change some other\
    \ stream in a session without affecting the MSRP\n   stream, or they may need\
    \ to change an MSRP stream without affecting\n   some other stream.\n   Either\
    \ peer may initiate an updated exchange at any time.  The\n   endpoint that sends\
    \ the new offer assumes the role of offerer for all\n   purposes.  The answerer\
    \ MUST respond with a path attribute that\n   represents a valid path to itself\
    \ at the time of the updated\n   exchange.  This new path may be the same as its\
    \ previous path, but\n   may be different.  The new offerer MUST NOT assume that\
    \ the peer will\n   answer with the same path it used previously.\n   If either\
    \ party wishes to send an SDP document that changes nothing\n   at all, then it\
    \ MUST use the same o-line as in the previous exchange.\n"
- title: 8.5.  Connection Negotiation
  contents:
  - "8.5.  Connection Negotiation\n   Previous versions of this document included\
    \ a mechanism to negotiate\n   the direction for any required TCP connection.\
    \  The mechanism was\n   loosely based on the Connection-Oriented Media (COMEDIA)\
    \ [26] work\n   done by the MMUSIC working group.  The primary motivation was\
    \ to\n   allow MSRP sessions to succeed in situations where the offerer could\n\
    \   not accept connections but the answerer could.  For example, the\n   offerer\
    \ might be behind a NAT, while the answerer might have a\n   globally routable\
    \ address.\n   The SIMPLE working group chose to remove that mechanism from MSRP,\
    \ as\n   it added a great deal of complexity to connection management.\n   Instead,\
    \ MSRP now specifies a default connection direction.  The\n   party that sent\
    \ the original offer is responsible for connecting to\n   its peer.\n"
- title: 8.6.  Content Type Negotiation
  contents:
  - "8.6.  Content Type Negotiation\n   An SDP media-line proposing MSRP MUST be accompanied\
    \ by an accept-\n   types attribute.\n   An entry of \"*\" in the accept-types\
    \ attribute indicates that the\n   sender may attempt to send content with media-types\
    \ that have not\n   been explicitly listed.  Likewise, an entry with an explicit\
    \ type and\n   a \"*\" character as the subtype indicates that the sender may\
    \ attempt\n   to send content with any subtype of that type.  If the receiver\n\
    \   receives an MSRP request and is able to process the media-type, it\n   does\
    \ so.  If not, it will respond with a 415 response.  Note that all\n   explicit\
    \ entries SHOULD be considered preferred over any non-listed\n   types.  This\
    \ feature is needed as, otherwise, the list of formats for\n   rich IM devices\
    \ may be prohibitively large.\n   This specification requires the support of certain\
    \ data formats.\n   Mandatory formats MUST be signaled like any other, either\
    \ explicitly\n   or by the use of a \"*\".\n   The accept-types attribute may\
    \ include container types, that is, MIME\n   formats that contain other types\
    \ internally.  If compound types are\n   used, the types listed in the accept-types\
    \ attribute may be used as\n   the root payload or may be wrapped in a listed\
    \ container type.  Any\n   container types MUST also be listed in the accept-types\
    \ attribute.\n   Occasionally, an endpoint will need to specify a MIME media-type\
    \ that\n   can only be used if wrapped inside a listed container type.\n   Endpoints\
    \ MAY specify media-types that are only allowed when wrapped\n   inside compound\
    \ types using the \"accept-wrapped-types\" attribute in\n   an SDP a-line.\n \
    \  The semantics for accept-wrapped-types are identical to those of the\n   accept-types\
    \ attribute, with the exception that the specified types\n   may only be used\
    \ when wrapped inside container types listed in the\n   accept-types attribute.\
    \  Only types listed in the accept-types\n   attribute may be used as the \"root\"\
    \ type for the entire body.  Since\n   any type listed in accept-types may be\
    \ both used as a root body and\n   wrapped in other bodies, format entries from\
    \ accept-types SHOULD NOT\n   be repeated in this attribute.\n   This approach\
    \ does not allow for specifying distinct lists of\n   acceptable wrapped types\
    \ for different types of containers.  If an\n   endpoint understands a media-type\
    \ in the context of one wrapper, it\n   is assumed to understand it in the context\
    \ of any other acceptable\n   wrappers, subject to any constraints defined by\
    \ the wrapper types\n   themselves.\n      The approach of specifying types that\
    \ are only allowed inside of\n      containers separately from the primary payload\
    \ types allows an\n      endpoint to force the use of certain wrappers.  For example,\
    \ a\n      Common Presence and Instant Messaging (CPIM) [12] gateway device\n\
    \      may require all messages to be wrapped inside message/cpim bodies,\n  \
    \    but may allow several content types inside the wrapper.  If the\n      gateway\
    \ were to specify the wrapped types in the accept-types\n      attribute, its\
    \ peer might attempt to use those types without the\n      wrapper.\n   If the\
    \ recipient of an offer does not understand any of the payload\n   types indicated\
    \ in the offered SDP, it SHOULD indicate that using the\n   appropriate mechanism\
    \ of the rendezvous protocol.  For example, in\n   SIP, it SHOULD return a SIP\
    \ 488 response.\n   An MSRP endpoint MUST NOT send content of a type not signaled\
    \ by the\n   peer in either an accept-types or an accept-wrapped-types attribute.\n\
    \   Furthermore, it MUST NOT send a top-level (i.e., not wrapped) MIME\n   document\
    \ of a type not signaled in the accept-types attribute.  In\n   either case, the\
    \ signaling could be explicit, or implicit through the\n   use of the \"*\" character.\n\
    \   An endpoint MAY indicate the maximum size message it wishes to\n   receive\
    \ using the max-size a-line attribute.  Max-size refers to the\n   complete message\
    \ in octets, not the size of any one chunk.  Senders\n   SHOULD NOT exceed the\
    \ max-size limit for any message sent in the\n   resulting session.  However,\
    \ the receiver should consider max-size\n   value as a hint.\n   Media format\
    \ entries may include parameters.  The interpretation of\n   such parameters varies\
    \ between media-types.  For the purposes of\n   media-type negotiation, a format-entry\
    \ with one or more parameters is\n   assumed to match the same format-entry with\
    \ no parameters.\n   The formal syntax for these attributes is as follows:\n \
    \       accept-types = accept-types-label \":\" format-list\n        accept-types-label\
    \ = \"accept-types\"\n        accept-wrapped-types = wrapped-types-label \":\"\
    \ format-list\n        wrapped-types-label = \"accept-wrapped-types\"\n      \
    \  format-list = format-entry *( SP format-entry)\n        format-entry = ( (\
    \ (type \"/\" subtype)\n                         / (type \"/\" \"*\") )\n    \
    \                     *( \";\" type-param ) )\n                        / (\"*\"\
    )\n        type = token\n        subtype = token\n        type-param = parm-attribute\
    \ \"=\" parm-value\n        parm-attribute = token\n        parm-value = token\
    \ / quoted-string\n        max-size = max-size-label \":\" max-size-value\n  \
    \      max-size-label = \"max-size\"\n        max-size-value = 1*(DIGIT) ; max\
    \ size in octets\n                           Figure 8: Attribute Syntax\n"
- title: 8.7.  Example SDP Exchange
  contents:
  - "8.7.  Example SDP Exchange\n   Endpoint A wishes to invite Endpoint B to an MSRP\
    \ session.  A offers\n   the following session description:\n    v=0\n    o=usera\
    \ 2890844526 2890844527 IN IP4 alice.example.com\n    s= -\n    c=IN IP4 alice.example.com\n\
    \    t=0 0\n    m=message 7394 TCP/MSRP *\n    a=accept-types:message/cpim text/plain\
    \ text/html\n    a=path:msrp://alice.example.com:7394/2s93i93idj;tcp\n       \
    \                Figure 9: SDP from Endpoint A\n   B responds with its own URI:\n\
    \    v=0\n    o=userb 2890844530 2890844532 IN IP4 bob.example.com\n    s= -\n\
    \    c=IN IP4 bob.example.com\n    t=0 0\n    m=message 8493 TCP/MSRP *\n    a=accept-types:message/cpim\
    \ text/plain\n    a=path:msrp://bob.example.com:8493/si438dsaodes;tcp\n      \
    \                 Figure 10: SDP from Endpoint B\n"
- title: 8.8.  MSRP User Experience with SIP
  contents:
  - "8.8.  MSRP User Experience with SIP\n   In typical SIP applications, when an\
    \ endpoint receives an INVITE\n   request, it alerts the user, and waits for user\
    \ input before\n   responding.  This is analogous to the typical telephone user\n\
    \   experience, where the callee \"answers\" the call.\n   In contrast, the typical\
    \ user experience for instant messaging\n   applications is that the initial received\
    \ message is immediately\n   displayed to the user, without waiting for the user\
    \ to \"join\" the\n   conversation.  Therefore, the principle of least surprise\
    \ would\n   suggest that MSRP endpoints using SIP signaling SHOULD allow a mode\n\
    \   where the endpoint quietly accepts the session and begins displaying\n   messages.\n\
    \      This guideline may not make sense for all situations, such as for\n   \
    \   mixed-media applications, where both MSRP and audio sessions are\n      offered\
    \ in the same INVITE.  In general, good application design\n      should take\
    \ precedence.\n   SIP INVITE requests may be forked by a SIP proxy, resulting\
    \ in more\n   than one endpoint receiving the same INVITE.  SIP early media [29]\n\
    \   techniques can be used to establish a preliminary session with each\n   endpoint\
    \ so the initial message(s) are displayed on each endpoint,\n   and canceling\
    \ the INVITE transaction for any endpoints that do not\n   send MSRP traffic after\
    \ some period of time, so that they cease\n   receiving MSRP traffic from the\
    \ inviter.\n"
- title: 8.9.  SDP Direction Attribute and MSRP
  contents:
  - "8.9.  SDP Direction Attribute and MSRP\n   SDP defines a number of attributes\
    \ that modify the direction of media\n   flows.  These are the \"sendonly\", \"\
    recvonly\", \"inactive\", and\n   \"sendrecv\" attributes.\n   If a \"sendonly\"\
    \ or \"recvonly\" attribute modifies an MSRP media\n   description line, the attribute\
    \ indicates the direction of MSRP SEND\n   requests that contain regular message\
    \ payloads.  Unless otherwise\n   specified, these attributes do not affect the\
    \ direction of other\n   types of requests, such as REPORT.  SEND requests that\
    \ contain some\n   kind of control or reporting protocol rather than regular message\n\
    \   payload (e.g., Instant Message Delivery Notification (IMDN) reports)\n   should\
    \ be generated according to the protocol rules as if no\n   direction attribute\
    \ were present.\n"
- title: 9.  Formal Syntax
  contents:
  - "9.  Formal Syntax\n   MSRP is a text protocol that uses the UTF-8 [14] transformation\n\
    \   format.\n   The following syntax specification uses the augmented Backus-Naur\n\
    \   Form (BNF) as described in RFC 4234 [6].\n   msrp-req-or-resp = msrp-request\
    \ / msrp-response\n   msrp-request = req-start headers [content-stuff] end-line\n\
    \   msrp-response = resp-start headers end-line\n   req-start  = pMSRP SP transact-id\
    \ SP method CRLF\n   resp-start = pMSRP SP transact-id SP status-code [SP comment]\
    \ CRLF\n   comment = utf8text\n   pMSRP = %x4D.53.52.50 ; MSRP in caps\n   transact-id\
    \ = ident\n   method = mSEND / mREPORT / other-method\n   mSEND = %x53.45.4e.44\
    \ ; SEND in caps\n   mREPORT = %x52.45.50.4f.52.54; REPORT in caps\n   other-method\
    \ = 1*UPALPHA\n   status-code = 3DIGIT ; any code defined in this document\n \
    \                       ; or an extension document\n   MSRP-URI = msrp-scheme\
    \ \"://\" authority\n       [\"/\" session-id] \";\" transport *( \";\" URI-parameter)\n\
    \                        ; authority as defined in RFC3986\n   msrp-scheme = \"\
    msrp\" / \"msrps\"\n   session-id = 1*( unreserved / \"+\" / \"=\" / \"/\" )\n\
    \                        ; unreserved as defined in RFC3986\n   transport = \"\
    tcp\" / 1*ALPHANUM\n   URI-parameter = token [\"=\" token]\n   headers = To-Path\
    \ CRLF From-Path CRLF 1*( header CRLF )\n   header  =   Message-ID\n    / Success-Report\n\
    \    / Failure-Report\n    / Byte-Range\n    / Status\n    / ext-header\n   To-Path\
    \ = \"To-Path:\" SP MSRP-URI *( SP MSRP-URI )\n   From-Path = \"From-Path:\" SP\
    \ MSRP-URI *( SP MSRP-URI )\n   Message-ID = \"Message-ID:\" SP ident\n   Success-Report\
    \ = \"Success-Report:\" SP (\"yes\" / \"no\" )\n   Failure-Report = \"Failure-Report:\"\
    \ SP (\"yes\" / \"no\" / \"partial\" )\n   Byte-Range = \"Byte-Range:\" SP range-start\
    \ \"-\" range-end \"/\" total\n   range-start = 1*DIGIT\n   range-end   = 1*DIGIT\
    \ / \"*\"\n   total       = 1*DIGIT / \"*\"\n   Status = \"Status:\" SP namespace\
    \ SP status-code [SP comment]\n   namespace = 3(DIGIT); \"000\" for all codes\
    \ defined in this document.\n   ident = ALPHANUM  3*31ident-char\n   ident-char\
    \ = ALPHANUM / \".\" / \"-\" / \"+\" / \"%\" / \"=\"\n   content-stuff = *(Other-Mime-header\
    \ CRLF)\n                   Content-Type 2CRLF data CRLF\n   Content-Type = \"\
    Content-Type:\" SP media-type\n   media-type = type \"/\" subtype *( \";\" gen-param\
    \ )\n   type = token\n   subtype = token\n   gen-param = pname [ \"=\" pval ]\n\
    \   pname = token\n   pval  = token / quoted-string\n   token = 1*(%x21 / %x23-27\
    \ / %x2A-2B / %x2D-2E\n              / %x30-39 / %x41-5A / %x5E-7E)\n        \
    \      ; token is compared case-insensitive\n   quoted-string = DQUOTE *(qdtext\
    \ / qd-esc) DQUOTE\n   qdtext = SP / HTAB / %x21 / %x23-5B / %x5D-7E\n       \
    \        / UTF8-NONASCII\n   qd-esc = (BACKSLASH BACKSLASH) / (BACKSLASH DQUOTE)\n\
    \   BACKSLASH = \"\\\"\n   UPALPHA  = %x41-5A\n   ALPHANUM = ALPHA / DIGIT\n \
    \  Other-Mime-header = (Content-ID\n    / Content-Description\n    / Content-Disposition\n\
    \    / mime-extension-field)\n       ; Content-ID, and Content-Description are\
    \ defined in RFC2045.\n       ; Content-Disposition is defined in RFC2183\n  \
    \     ; MIME-extension-field indicates additional MIME extension\n       ; header\
    \ fields as described in RFC2045\n   data = *OCTET\n   end-line = \"-------\"\
    \ transact-id continuation-flag CRLF\n   continuation-flag = \"+\" / \"$\" / \"\
    #\"\n   ext-header = hname \":\" SP hval CRLF\n   hname = ALPHA *token\n   hval\
    \ = utf8text\n   utf8text = *(HTAB / %x20-7E / UTF8-NONASCII)\n   UTF8-NONASCII\
    \ = %xC0-DF 1UTF8-CONT\n                 / %xE0-EF 2UTF8-CONT\n              \
    \   / %xF0-F7 3UTF8-CONT\n                 / %xF8-Fb 4UTF8-CONT\n            \
    \     / %xFC-FD 5UTF8-CONT\n   UTF8-CONT     = %x80-BF\n                     \
    \      Figure 11: MSRP ABNF\n"
- title: 10.  Response Code Descriptions
  contents:
  - "10.  Response Code Descriptions\n   This section summarizes the semantics of\
    \ various response codes that\n   may be used in MSRP transaction responses. \
    \ These codes may also be\n   used in the Status header field in REPORT requests.\n"
- title: 10.1.  200
  contents:
  - "10.1.  200\n   The 200 response code indicates a successful transaction.\n"
- title: 10.2.  400
  contents:
  - "10.2.  400\n   A 400 response indicates that a request was unintelligible.  The\n\
    \   sender may retry the request after correcting the error.\n"
- title: 10.3.  403
  contents:
  - "10.3.  403\n   A 403 response indicates that the attempted action is not allowed.\n\
    \   The sender should not try the request again.\n"
- title: 10.4.  408
  contents:
  - "10.4.  408\n   A 408 response indicates that a downstream transaction did not\n\
    \   complete in the allotted time.  It is never sent by any elements\n   described\
    \ in this specification.  However, 408 is used in the MSRP\n   relay extension;\
    \ therefore, MSRP endpoints may receive it.  An\n   endpoint MUST treat a 408\
    \ response in the same manner as it would\n   treat a local timeout.\n"
- title: 10.5.  413
  contents:
  - "10.5.  413\n   A 413 response indicates that the receiver wishes the sender to\
    \ stop\n   sending the particular message.  Typically, a 413 is sent in response\n\
    \   to a chunk of an undesired message.\n   If a message sender receives a 413\
    \ in a response, or in a REPORT\n   request, it MUST NOT send any further chunks\
    \ in the message, that is,\n   any further chunks with the same Message-ID value.\
    \  If the sender\n   receives the 413 while in the process of sending a chunk,\
    \ and the\n   chunk is interruptible, the sender MUST interrupt it.\n"
- title: 10.6.  415
  contents:
  - "10.6.  415\n   A 415 response indicates that the SEND request contained a media\
    \ type\n   that is not understood by the receiver.  The sender should not send\n\
    \   any further messages with the same content-type for the duration of\n   the\
    \ session.\n"
- title: 10.7.  423
  contents:
  - "10.7.  423\n   A 423 response indicates that one of the requested parameters\
    \ is out\n   of bounds.  It is used by the relay extensions to this document.\n"
- title: 10.8.  481
  contents:
  - "10.8.  481\n   A 481 response indicates that the indicated session does not exist.\n\
    \   The sender should terminate the session.\n"
- title: 10.9.  501
  contents:
  - "10.9.  501\n   A 501 response indicates that the recipient does not understand\
    \ the\n   request method.\n      The 501 response code exists to allow some degree\
    \ of method\n      extensibility.  It is not intended as a license to ignore methods\n\
    \      defined in this document; rather, it is a mechanism to report lack\n  \
    \    of support of extension methods.\n"
- title: 10.10.  506
  contents:
  - "10.10.  506\n   A 506 response indicates that a request arrived on a session\
    \ that is\n   already bound to another network connection.  The sender should\
    \ cease\n   sending messages for that session on this connection.\n"
- title: 11.  Examples
  contents:
  - '11.  Examples

    '
- title: 11.1.  Basic IM Session
  contents:
  - "11.1.  Basic IM Session\n   This section shows an example flow for the most common\
    \ scenario.  The\n   example assumes SIP is used to transport the SDP exchange.\
    \  Details\n   of the SIP messages and SIP proxy infrastructure are omitted for\
    \ the\n   sake of brevity.  In the example, assume that the offerer is\n   sip:alice@example.com\
    \ and the answerer is sip:bob@example.com.\n           Alice                 \
    \    Bob\n             |                        |\n             |            \
    \            |\n             |(1) (SIP) INVITE        |\n             |----------------------->|\n\
    \             |(2) (SIP) 200 OK        |\n             |<-----------------------|\n\
    \             |(3) (SIP) ACK           |\n             |----------------------->|\n\
    \             |(4) (MSRP) SEND         |\n             |----------------------->|\n\
    \             |(5) (MSRP) 200 OK       |\n             |<-----------------------|\n\
    \             |(6) (MSRP) SEND         |\n             |<-----------------------|\n\
    \             |(7) (MSRP) 200 OK       |\n             |----------------------->|\n\
    \             |(8) (SIP) BYE           |\n             |----------------------->|\n\
    \             |(9) (SIP) 200 OK        |\n             |<-----------------------|\n\
    \             |                        |\n             |                     \
    \   |\n                        Figure 12: Basic IM Session Example\n   1.  Alice\
    \ constructs a local URI of\n       msrp://alicepc.example.com:7777/iau39soe2843z;tcp\
    \ .\n       Alice->Bob (SIP): INVITE sip:bob@example.com\n       v=0\n       o=alice\
    \ 2890844557 2890844559 IN IP4 alicepc.example.com\n       s= -\n       c=IN IP4\
    \ alicepc.example.com\n       t=0 0\n       m=message 7777 TCP/MSRP *\n      \
    \ a=accept-types:text/plain\n       a=path:msrp://alicepc.example.com:7777/iau39soe2843z;tcp\n\
    \   2.  Bob listens on port 8888, and sends the following response:\n       Bob->Alice\
    \ (SIP): 200 OK\n       v=0\n       o=bob 2890844612 2890844616 IN IP4 bob.example.com\n\
    \       s= -\n       c=IN IP4 bob.example.com\n       t=0 0\n       m=message\
    \ 8888 TCP/MSRP *\n       a=accept-types:text/plain\n       a=path:msrp://bob.example.com:8888/9di4eae923wzd;tcp\n\
    \   3.  Alice->Bob (SIP): ACK sip:bob@example.com\n   4.  (Alice opens connection\
    \ to Bob.)  Alice->Bob (MSRP):\n       MSRP d93kswow SEND\n       To-Path: msrp://bob.example.com:8888/9di4eae923wzd;tcp\n\
    \       From-Path: msrp://alicepc.example.com:7777/iau39soe2843z;tcp\n       Message-ID:\
    \ 12339sdqwer\n       Byte-Range: 1-16/16\n       Content-Type: text/plain\n \
    \      Hi, I'm Alice!\n       -------d93kswow$\n   5.  Bob->Alice (MSRP):\n  \
    \     MSRP d93kswow 200 OK\n       To-Path: msrp://alicepc.example.com:7777/iau39soe2843z;tcp\n\
    \       From-Path: msrp://bob.example.com:8888/9di4eae923wzd;tcp\n       -------d93kswow$\n\
    \   6.  Bob->Alice (MSRP):\n       MSRP dkei38sd SEND\n       To-Path: msrp://alicepc.example.com:7777/iau39soe2843z;tcp\n\
    \       From-Path: msrp://bob.example.com:8888/9di4eae923wzd;tcp\n       Message-ID:\
    \ 456s9wlk3\n       Byte-Range: 1-21/21\n       Content-Type: text/plain\n   \
    \    Hi, Alice!  I'm Bob!\n       -------dkei38sd$\n   7.  Alice->Bob (MSRP):\n\
    \       MSRP dkei38sd 200 OK\n       To-Path: msrp://bob.example.com:8888/9di4eae923wzd;tcp\n\
    \       From-Path: msrp://alicepc.example.com:7777/iau39soe2843z;tcp\n       -------dkei38sd$\n\
    \   8.  Alice->Bob (SIP): BYE sip:bob@example.com\n       Alice invalidates local\
    \ session state.\n   9.  Bob invalidates local state for the session.\n      \
    \ Bob->Alice (SIP): 200 OK\n"
- title: 11.2.  Message with XHTML Content
  contents:
  - "11.2.  Message with XHTML Content\n   MSRP dsdfoe38sd SEND\n   To-Path: msrp://alice.example.com:7777/iau39soe2843z;tcp\n\
    \   From-Path: msrp://bob.example.com:8888/9di4eae923wzd;tcp\n   Message-ID: 456so39s\n\
    \   Byte-Range: 1-374/374\n   Content-Type: application/xhtml+xml\n   <?xml version=\"\
    1.0\" encoding=\"UTF-8\"?>\n   <!DOCTYPE html\n   PUBLIC \"-//W3C//DTD XHTML 1.0\
    \ Strict//EN\"\n   \"_http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd_\">\n\
    \   <html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\n\
    \     <head>\n       <title>FY2005 Results</title>\n   </head>\n     <body>\n\
    \      <p>See the results at <a\n   href=\"http://example.org/\">example.org</a>.</p>\n\
    \     </body>\n   </html>\n   -------dsdfoe38sd$\n                   Figure 13:\
    \ Example Message with XHTML\n"
- title: 11.3.  Chunked Message
  contents:
  - "11.3.  Chunked Message\n   For an example of a chunked message, see the example\
    \ in Section 5.1.\n"
- title: 11.4.  Chunked Message with Message/CPIM Payload
  contents:
  - "11.4.  Chunked Message with Message/CPIM Payload\n   This example shows a chunked\
    \ message containing a CPIM message that\n   wraps a text/plain payload.  It is\
    \ worth noting that MSRP considers\n   the complete CPIM message before chunking\
    \ the message; thus, the CPIM\n   headers are included in only the first chunk.\
    \  The MSRP Content-Type\n   and Byte-Range headers, present in both chunks, refer\
    \ to the whole\n   CPIM message.\n      MSRP d93kswow SEND\n      To-Path: msrp://bobpc.example.com:8888/9di4eae923wzd;tcp\n\
    \      From-Path: msrp://alicepc.example.com:7654/iau39soe2843z;tcp\n      Message-ID:\
    \ 12339sdqwer\n      Byte-Range: 1-137/148\n      Content-Type: message/cpim\n\
    \      To: Bob <sip:bob@example.com>\n      From: Alice <sip:alice@example.com>\n\
    \      DateTime: 2006-05-15T15:02:31-03:00\n      Content-Type: text/plain\n \
    \     ABCD\n      -------d93kswow+\n                            Figure 14: First\
    \ Chunk\n   Alice sends the second and last chunk.\n      MSRP op2nc9a SEND\n\
    \      To-Path: msrp://bobpc.example.com:8888/9di4eae923wzd;tcp\n      From-Path:\
    \ msrp://alicepc.example.com:7654/iau39soe2843z;tcp\n      Message-ID: 12339sdqwer\n\
    \      Byte-Range: 138-148/148\n      Content-Type: message/cpim\n      1234567890\n\
    \      -------op2nc9a$\n                           Figure 15: Second Chunk\n"
- title: 11.5.  System Message
  contents:
  - "11.5.  System Message\n   Sysadmin->Alice (MSRP):\n   MSRP d93kswow SEND\n  \
    \ To-Path: msrp://alicepc.example.com:8888/9di4eae923wzd;tcp\n   From-Path: msrp://example.com:7777/iau39soe2843z;tcp\n\
    \   Message-ID: 12339sdqwer\n   Byte-Range: 1-38/38\n   Failure-Report: no\n \
    \  Success-Report: no\n   Content-Type: text/plain\n   This conference will end\
    \ in 5 minutes\n   -------d93kswow$\n"
- title: 11.6.  Positive Report
  contents:
  - "11.6.  Positive Report\n   Alice->Bob (MSRP):\n   MSRP d93kswow SEND\n   To-Path:\
    \ msrp://bob.example.com:8888/9di4eae923wzd;tcp\n   From-Path: msrp://alicepc.example.com:7777/iau39soe2843z;tcp\n\
    \   Message-ID: 12339sdqwer\n   Byte-Range: 1-106/106\n   Success-Report: yes\n\
    \   Failure-Report: no\n   Content-Type: text/html\n   <html><body>\n   <p>Here\
    \ is that important link...\n   <a href=\"http://www.example.com/foobar\">foobar</a>\n\
    \   </p>\n   </body></html>\n   -------d93kswow$\n                      Figure\
    \ 16: Initial SEND Request\n   Bob->Alice (MSRP):\n   MSRP dkei38sd REPORT\n \
    \  To-Path: msrp://alicepc.example.com:7777/iau39soe2843z;tcp\n   From-Path: msrp://bob.example.com:8888/9di4eae923wzd;tcp\n\
    \   Message-ID: 12339sdqwer\n   Byte-Range: 1-106/106\n   Status: 000 200 OK\n\
    \   -------dkei38sd$\n                         Figure 17: Success Report\n"
- title: 11.7.  Forked IM
  contents:
  - "11.7.  Forked IM\n   Traditional IM systems generally do a poor job of handling\
    \ multiple\n   simultaneous IM clients online for the same person.  While some\
    \ do a\n   better job than many existing systems, handling of multiple clients\n\
    \   is fairly crude.  This becomes a much more significant issue when\n   always-on\
    \ mobile devices are available, but it is desirable to use\n   them only if another\
    \ IM client is not available.\n   Using SIP makes rendezvous decisions explicit,\
    \ deterministic, and\n   very flexible.  In contrast, \"page-mode\" IM systems\
    \ use implicit\n   implementation-specific decisions that IM clients cannot influence.\n\
    \   With SIP session-mode messaging, rendezvous decisions can be under\n   control\
    \ of the client in a predictable, interoperable way for any\n   host that implements\
    \ callee capabilities [31].  As a result,\n   rendezvous policy is managed consistently\
    \ for each address of record.\n   The following example shows Juliet with several\
    \ IM clients where she\n   can be reached.  Each of these has a unique SIP contact\
    \ and MSRP\n   session.  The example takes advantage of SIP's capability to \"\
    fork\"\n   an invitation to several contacts in parallel, in sequence, or in\n\
    \   combination.  Juliet has registered from her chamber, the balcony,\n   her\
    \ PDA, and as a last resort, you can leave a message with her\n   nurse.  Juliet's\
    \ contacts are listed below.  The q-values express\n   relative preference (q=1.0\
    \ is the highest preference).\n   When Romeo opens his IM program, he selects\
    \ Juliet and types the\n   message \"art thou hither?\" (instead of \"you there?\"\
    ).  His client\n   sends a SIP invitation to sip:juliet@thecapulets.example.com.\
    \  The\n   proxy there tries first the balcony and the chamber simultaneously.\n\
    \   A client is running on each of those systems, both of which set up\n   early\
    \ sessions of MSRP with Romeo's client.  The client automatically\n   sends the\
    \ message over MSRP to the two MSRP URIs involved.  After a\n   delay of a several\
    \ seconds with no reply or activity from Juliet, the\n   proxy cancels the invitation\
    \ at her first two contacts, and forwards\n   the invitation on to Juliet's PDA.\
    \  Since her father is talking to\n   her about her wedding, she selects \"Do\
    \ Not Disturb\" on her PDA, which\n   sends a \"Busy Here\" response.  The proxy\
    \ then tries the nurse, who\n   answers and tells Romeo what is going on.\n  \
    \  Romeo       Juliet's     Juliet/      Juliet/      Juliet/     Nurse\n    \
    \             Proxy       balcony      chamber       PDA\n      |            |\
    \            |            |           |           |\n      |--INVITE--->|    \
    \        |            |           |           |\n      |            |--INVITE--->|\
    \            |           |           |\n      |            |<----180----|    \
    \        |           |           |\n      |<----180----|            |        \
    \    |           |           |\n      |---PRACK---------------->|            |\
    \           |           |\n      |<----200-----------------|            |    \
    \       |           |\n      |<===Early MSRP Session==>| art thou hither?    \
    \   |           |\n      |            |            |            |           |\
    \           |\n      |            |--INVITE---------------->|           |    \
    \       |\n      |            |<----180-----------------|           |        \
    \   |\n      |<----180----|            |            |           |           |\n\
    \      |---PRACK----------------------------->|           |           |\n    \
    \  |<----200------------------------------|           |           |\n      |<========Early\
    \ MSRP Session==========>| art thou hither?      |\n      |            |     \
    \       |            |           |           |\n      |            |         \
    \   |            |           |           |\n      |            | .... Time Passes\
    \ ....   |           |           |\n      |            |            |        \
    \    |           |           |\n      |            |            |            |\
    \           |           |\n      |            |--CANCEL--->|            |    \
    \       |           |\n      |            |<---200-----|            |        \
    \   |           |\n      |            |<---487-----|            |           |\
    \           |\n      |            |----ACK---->|            |           |    \
    \       |\n      |            |--CANCEL---------------->|           |        \
    \   |\n      |            |<---200------------------|           |           |\n\
    \      |            |<---487------------------|           |           |\n    \
    \  |            |----ACK----------------->|           |           |\n      | \
    \           |--INVITE---------------------------->|  romeo wants\n      |    \
    \        |            |            |           |  to IM w/ you\n      |      \
    \      |<---486 Busy Here--------------------|           |\n      |          \
    \  |----ACK----------------------------->|           |\n      |            | \
    \           |            |           |           |\n      |            |--INVITE---------------------------------------->|\n\
    \      |            |<---200 OK---------------------------------------|\n    \
    \  |<--200 OK---|            |            |           |           |\n      |---ACK------------------------------------------------------->|\n\
    \      |<================MSRP Session================================>|\n    \
    \  |            |            |            |           |           |\n      | \
    \                                        Hi Romeo, Juliet is  |\n      |     \
    \                                    with her father now  |\n      |         \
    \                                can I take a message?|\n      |             \
    \                                                 |\n      |  Tell her to go to\
    \ confession tomorrow....                   |\n                        Figure\
    \ 18: Forking Example\n"
- title: 12.  Extensibility
  contents:
  - "12.  Extensibility\n   MSRP was designed to be only minimally extensible.  New\
    \ MSRP methods,\n   header fields, and status codes can be defined in standards-track\n\
    \   RFCs.  MSRP does not contain a version number or any negotiation\n   mechanism\
    \ to require or discover new features.  If an extension is\n   specified in the\
    \ future that requires negotiation, the specification\n   will need to describe\
    \ how the extension is to be negotiated in the\n   encapsulating signaling protocol.\
    \  If a non-interoperable update or\n   extension occurs in the future, it will\
    \ be treated as a new protocol,\n   and MUST describe how its use will be signaled.\n\
    \   In order to allow extension header fields without breaking\n   interoperability,\
    \ if an MSRP device receives a request or response\n   containing a header field\
    \ that it does not understand, it MUST ignore\n   the header field and process\
    \ the request or response as if the header\n   field was not present.  If an MSRP\
    \ device receives a request with an\n   unknown method, it MUST return a 501 response.\n\
    \   MSRP was designed to use lists of URIs instead of a single URI in the\n  \
    \ To-Path and From-Path header fields in anticipation of relay or\n   gateway\
    \ functionality being added.  In addition, \"msrp\" and \"msrps\"\n   URIs can\
    \ contain parameters that are extensible.\n"
- title: 13.  CPIM Compatibility
  contents:
  - "13.  CPIM Compatibility\n   MSRP sessions may go to a gateway to other Common\
    \ Profile for Instant\n   Messaging (CPIM) [27] compatible protocols.  If this\
    \ occurs, the\n   gateway MUST maintain session state, and MUST translate between\
    \ the\n   MSRP session semantics and CPIM semantics, which do not include a\n\
    \   concept of sessions.  Furthermore, when one endpoint of the session\n   is\
    \ a CPIM gateway, instant messages SHOULD be wrapped in\n   \"message/cpim\" [12]\
    \ bodies.  Such a gateway MUST include\n   \"message/cpim\" as the first entry\
    \ in its SDP accept-types attribute.\n   MSRP endpoints sending instant messages\
    \ to a peer that has included\n   \"message/cpim\" as the first entry in the accept-types\
    \ attribute\n   SHOULD encapsulate all instant message bodies in \"message/ cpim\"\
    \n   wrappers.  All MSRP endpoints MUST support the message/cpim type, and\n \
    \  SHOULD support the S/MIME[7] features of that format.\n   If a message is to\
    \ be wrapped in a message/cpim envelope, the\n   wrapping MUST be done prior to\
    \ breaking the message into chunks, if\n   needed.\n   All MSRP endpoints MUST\
    \ recognize the From, To, DateTime, and Require\n   header fields as defined in\
    \ RFC 3862.  Such applications SHOULD\n   recognize the CC header field, and MAY\
    \ recognize the Subject header\n   field.  Any MSRP application that recognizes\
    \ any message/cpim header\n   field MUST understand the NS (name space) header\
    \ field.\n   All message/cpim body parts sent by an MSRP endpoint MUST include\
    \ the\n   From and To header fields.  If the message/cpim body part is\n   protected\
    \ using S/MIME, then it MUST also include the DateTime header\n   field.\n   The\
    \ NS, To, and CC header fields may occur multiple times.  Other\n   header fields\
    \ defined in RFC 3862 MUST NOT occur more than once in a\n   given message/cpim\
    \ body part in an MSRP message.  The Require header\n   field MAY include multiple\
    \ values.  The NS header field MAY occur\n   zero or more times, depending on\
    \ how many name spaces are being\n   referenced.\n   Extension header fields MAY\
    \ occur more than once, depending on the\n   definition of such header fields.\n\
    \      Using message/cpim envelopes is also useful if an MSRP device\n      wishes\
    \ to send a message on behalf of some other identity.  The\n      device may add\
    \ a message/cpim envelope with the appropriate From\n      header field value.\n"
- title: 14.  Security Considerations
  contents:
  - "14.  Security Considerations\n   Instant messaging systems are used to exchange\
    \ a variety of sensitive\n   information ranging from personal conversations,\
    \ to corporate\n   confidential information, to account numbers and other financial\n\
    \   trading information.  IM is used by individuals, corporations, and\n   governments\
    \ for communicating important information.  IM systems need\n   to provide the\
    \ properties of integrity and confidentiality for the\n   exchanged information,\
    \ and the knowledge that you are communicating\n   with the correct party, and\
    \ they need to allow the possibility of\n   anonymous communication.  MSRP pushes\
    \ many of the hard problems to\n   SIP when SIP sets up the session, but some\
    \ of the problems remain.\n   Spam and Denial of Service (DoS) attacks are also\
    \ very relevant to IM\n   systems.\n   MSRP needs to provide confidentiality and\
    \ integrity for the messages\n   it transfers.  It also needs to provide assurances\
    \ that the connected\n   host is the host that it meant to connect to and that\
    \ the connection\n   has not been hijacked.\n"
- title: 14.1.  Secrecy of the MSRP URI
  contents:
  - "14.1.  Secrecy of the MSRP URI\n   When an endpoint sends an MSRP URI to its\
    \ peer in a rendezvous\n   protocol, that URI is effectively a secret shared between\
    \ the peers.\n   If an attacker learns or guesses the URI prior to the completion\
    \ of\n   session setup, it may be able to impersonate one of the peers.\n   Assuming\
    \ the URI exchange in the rendezvous protocol is sufficiently\n   protected, it\
    \ is critical that the URI remain difficult to \"guess\"\n   via brute force methods.\
    \  Most components of the URI, such as the\n   scheme and the authority components,\
    \ are common knowledge.  The\n   secrecy is entirely provided by the session-id\
    \ component.\n   Therefore, when an MSRP device generates an MSRP URI to be used\
    \ in\n   the initiation of an MSRP session, the session-id component MUST\n  \
    \ contain at least 80 bits of randomness.\n"
- title: 14.2.  Transport Level Protection
  contents:
  - "14.2.  Transport Level Protection\n   When using only TCP connections, MSRP security\
    \ is fairly weak.  If\n   host A is contacting host B, B passes its hostname and\
    \ a secret to A\n   using a rendezvous protocol.  Although MSRP requires the use\
    \ of a\n   rendezvous protocol with the ability to protect this exchange, there\n\
    \   is no guarantee that the protection will be used all the time.  If\n   such\
    \ protection is not used, anyone can see this secret.  Host A then\n   connects\
    \ to the provided hostname and passes the secret in the clear\n   across the connection\
    \ to B.  Host A assumes that it is talking to B\n   based on where it sent the\
    \ SYN packet and then delivers the secret in\n   plain text across the connections.\
    \  Host B assumes it is talking to A\n   because the host on the other end of\
    \ the connection delivered the\n   secret.  An attacker that could ACK the SYN\
    \ packet could insert\n   itself as a man-in-the-middle in the connection.\n \
    \  When using TLS connections, the security is significantly improved.\n   We\
    \ assume that the host accepting the connection has a certificate\n   from a well-known\
    \ certification authority.  Furthermore, we assume\n   that the signaling to set\
    \ up the session is protected by the\n   rendezvous protocol.  In this case, when\
    \ host A contacts host B, the\n   secret is passed through a confidential channel\
    \ to A.  A connects\n   with TLS to B.  B presents a valid certificate, so A knows\
    \ it really\n   is connected to B.  A then delivers the secret provided by B,\
    \ so that\n   B can verify it is connected to A.  In this case, a rogue SIP Proxy\n\
    \   can see the secret in the SIP signaling traffic and could potentially\n  \
    \ insert itself as a man-in-the-middle.\n   Realistically, using TLS with certificates\
    \ from well-known\n   certification authorities is difficult for peer-to-peer\
    \ connections,\n   as the types of hosts that end clients use for sending instant\n\
    \   messages are unlikely to have long-term stable IP addresses or DNS\n   names\
    \ that the certificates can bind to.  In addition, the cost of\n   server certificates\
    \ from well-known certification authorities is\n   currently expensive enough\
    \ to discourage their use for each client.\n   Using TLS in a peer-to-peer mode\
    \ without well-known certificates is\n   discussed in Section 14.4.\n   TLS becomes\
    \ much more practical when some form of relay is\n   introduced.  Clients can\
    \ then form TLS connections to relays, which\n   are much more likely to have\
    \ TLS certificates.  While this\n   specification does not address such relays,\
    \ they are described by a\n   companion document [23].  That document makes extensive\
    \ use of TLS to\n   protect traffic between clients and relays, and between one\
    \ relay and\n   another.\n   TLS is used to authenticate devices and to provide\
    \ integrity and\n   confidentiality for the header fields being transported. \
    \ MSRP\n   elements MUST implement TLS and MUST also implement the TLS\n   ClientExtendedHello\
    \ extended hello information for server name\n   indication as described in [11].\
    \  A TLS cipher-suite of\n   TLS_RSA_WITH_AES_128_CBC_SHA [13] MUST be supported\
    \ (other cipher-\n   suites MAY also be supported).\n"
- title: 14.3.  S/MIME
  contents:
  - "14.3.  S/MIME\n   The only strong security for non-TLS connections is achieved\
    \ using\n   S/MIME.\n   Since MSRP carries arbitrary MIME content, it can trivially\
    \ carry\n   S/MIME protected messages as well.  All MSRP implementations MUST\n\
    \   support the multipart/signed media-type even if they do not support\n   S/MIME.\
    \  Since SIP can carry a session key, S/MIME messages in the\n   context of a\
    \ session could also be protected using a key-wrapped\n   shared secret [28] provided\
    \ in the session setup.  MSRP can carry\n   unencoded binary payloads.  Therefore,\
    \ MIME bodies MUST be\n   transferred with a transfer encoding of binary.  If\
    \ a message is both\n   signed and encrypted, it SHOULD be signed first, then\
    \ encrypted.  If\n   S/MIME is supported, SHA-1, SHA-256, RSA, and AES-128 MUST\
    \ be\n   supported.  For RSA, implementations MUST support key sizes of at\n \
    \  least 1024 bits and SHOULD support key sizes of 2048 bits or more.\n   This\
    \ does not actually require the endpoint to have certificates from\n   a well-known\
    \ certification authority.  When MSRP is used with SIP,\n   the Identity [17]\
    \ and Certificates [25] mechanisms provide S/MIME-\n   based delivery of a secret\
    \ between A and B.  No SIP intermediary\n   except the explicitly trusted authentication\
    \ service (one per user)\n   can see the secret.  The S/MIME encryption of the\
    \ SDP can also be\n   used by SIP to exchange keying material that can be used\
    \ in MSRP.\n   The MSRP session can then use S/MIME with this keying material\
    \ to\n   sign and encrypt messages sent over MSRP.  The connection can still\n\
    \   be hijacked since the secret is sent in clear text to the other end\n   of\
    \ the TCP connection, but the consequences are mitigated if all the\n   MSRP content\
    \ is signed and encrypted with S/MIME.  Although out of\n   scope for this document,\
    \ the SIP negotiation of an MSRP session can\n   negotiate symmetric keying material\
    \ to be used with S/MIME for\n   integrity and privacy.\n"
- title: 14.4.  Using TLS in Peer-to-Peer Mode
  contents:
  - "14.4.  Using TLS in Peer-to-Peer Mode\n   TLS can be used with a self-signed\
    \ certificate as long as there is a\n   mechanism for both sides to ascertain\
    \ that the other side used the\n   correct certificate.  When used with SDP and\
    \ SIP, the correct\n   certificate can be verified by passing a fingerprint of\
    \ the\n   certificate in the SDP and ensuring that the SDP has suitable\n   integrity\
    \ protection.  When SIP is used to transport the SDP, the\n   integrity can be\
    \ provided by the SIP Identity mechanism [17].  The\n   rest of this section describes\
    \ the details of this approach.\n   If self-signed certificates are used, the\
    \ content of the\n   subjectAltName attribute inside the certificate MAY use the\
    \ URI of\n   the user.  In SIP, this URI of the user is the User's Address of\n\
    \   Record (AOR).  This is useful for debugging purposes only and is not\n   required\
    \ to bind the certificate to one of the communication\n   endpoints.  Unlike normal\
    \ TLS operations in this protocol, when doing\n   peer-to-peer TLS, the subjectAltName\
    \ is not an important component of\n   the certificate verification.  If the endpoint\
    \ is also able to make\n   anonymous sessions, a distinct, unique certificate\
    \ MUST be used for\n   this purpose.  For a client that works with multiple users,\
    \ each user\n   SHOULD have its own certificate.  Because the generation of\n\
    \   public/private key pairs is relatively expensive, endpoints are not\n   required\
    \ to generate certificates for each session.\n   A certificate fingerprint is\
    \ the output of a one-way hash function\n   computed over the Distinguished Encoding\
    \ Rules (DER) form of the\n   certificate.  The endpoint MUST use the certificate\
    \ fingerprint\n   attribute as specified in [18] and MUST include this in the\
    \ SDP.  The\n   certificate presented during the TLS handshake needs to match\
    \ the\n   fingerprint exchanged via the SDP, and if the fingerprint does not\n\
    \   match the hashed certificate then the endpoint MUST tear down the\n   media\
    \ session immediately.\n   When using SIP, the integrity of the fingerprint can\
    \ be ensured\n   through the SIP Identity mechanism [17].  When a client wishes\
    \ to use\n   SIP to set up a secure MSRP session with another endpoint, it sends\n\
    \   an SDP offer in a SIP message to the other endpoint.  This offer\n   includes,\
    \ as part of the SDP payload, the fingerprint of the\n   certificate that the\
    \ endpoint wants to use.  The SIP message\n   containing the offer is sent to\
    \ the offerer's SIP proxy, which will\n   add an Identity header according to\
    \ the procedures outlined in [17].\n   When the far endpoint receives the SIP\
    \ message, it can verify the\n   identity of the sender using the Identity header.\
    \  Since the Identity\n   header is a digital signature across several SIP headers,\
    \ in addition\n   to the body or bodies of the SIP message, the receiver can also\
    \ be\n   certain that the message has not been tampered with after the digital\n\
    \   signature was added to the SIP message.\n   An example of SDP with a fingerprint\
    \ attribute is shown in the\n   following figure.  Note the fingerprint is shown\
    \ spread over two\n   lines due to formatting consideration but should all be\
    \ on one line.\n   c=IN IP4 atlanta.example.com\n   m=message 7654 TCP/TLS/MSRP\
    \ *\n   a=accept-types:text/plain\n   a=path:msrps://atlanta.example.com:7654/jshA7weso3ks;tcp\n\
    \   a=fingerprint:SHA-1 \\\n         4A:AD:B9:B1:3F:82:18:3B:54:02:12:DF:3E:5D:49:6B:19:E5:7C:AB\n\
    \                 Figure 19: SDP with Fingerprint Attribute\n"
- title: 14.5.  Other Security Concerns
  contents:
  - "14.5.  Other Security Concerns\n   MSRP cannot be used as an amplifier for DoS\
    \ attacks, but it can be\n   used to form a distributed attack to consume TCP\
    \ connection resources\n   on servers.  The attacker, Mallory, sends a SIP INVITE\
    \ with no offer\n   to Alice.  Alice returns a 200 with an offer and Mallory returns\
    \ an\n   answer with SDP indicating that his MSRP address is the address of\n\
    \   Tom.  Since Alice sent the offer, Alice will initiate a connection to\n  \
    \ Tom using up resources on Tom's server.  Given the huge number of IM\n   clients,\
    \ and the relatively few TCP connections that most servers\n   support, this is\
    \ a fairly straightforward attack.\n   SIP is attempting to address issues in\
    \ dealing with spam.  The spam\n   issue is probably best dealt with at the SIP\
    \ level when an MSRP\n   session is initiated and not at the MSRP level.\n   If\
    \ a sender chooses to employ S/MIME to protect a message, all S/MIME\n   operations\
    \ apply to the complete message, prior to any breaking of\n   the message into\
    \ chunks.\n   The signaling will have set up the session to or from some specific\n\
    \   URIs that will often have \"im:\" or \"sip:\" URI schemes.  When the\n   signaling\
    \ has been set up to a specific end user, and S/MIME is\n   implemented, then\
    \ the client needs to verify that the name in the\n   SubjectAltName of the certificate\
    \ contains an entry that matches the\n   URI that was used for the other end in\
    \ the signaling.  There are some\n   cases, such as IM conferencing, where the\
    \ S/MIME certificate name and\n   the signaled identity will not match.  In these\
    \ cases, the client\n   should ensure that the user is informed that the message\
    \ came from\n   the user identified in the certificate and does not assume that\
    \ the\n   message came from the party they signaled.\n   In some cases, a sending\
    \ device may need to attribute a message to\n   some other identity, and may use\
    \ different identities for different\n   messages in the same session.  For example,\
    \ a conference server may\n   send messages on behalf of multiple users on the\
    \ same session.\n   Rather than add additional header fields to MSRP for this\
    \ purpose,\n   MSRP relies on the message/cpim format for this purpose.  The sender\n\
    \   may envelop such a message in a message/cpim body, and place the\n   actual\
    \ sender identity in the From field.  The trustworthiness of\n   such an attribution\
    \ is affected by the security properties of the\n   session in the same way that\
    \ the trustworthiness of the identity of\n   the actual peer is affected, with\
    \ the additional issue of determining\n   whether the recipient trusts the sender\
    \ to assert the identity.\n   This approach can result in nesting of message/cpim\
    \ envelopes.  For\n   example, a message originates from a CPIM gateway, and is\
    \ then\n   forwarded by a conference server onto a new session.  Both the\n  \
    \ gateway and the conference server introduce envelopes.  In this case,\n   the\
    \ recipient client SHOULD indicate the chain of identity assertions\n   to the\
    \ user, rather than allow the user to assume that either the\n   gateway or the\
    \ conference server originated the message.\n   It is possible that a recipient\
    \ might receive messages that are\n   attributed to the same sender via different\
    \ MSRP sessions.  For\n   example, Alice might be in a conversation with Bob via\
    \ an MSRP\n   session over a TLS protected channel.  Alice might then receive\
    \ a\n   different message from Bob over a different session, perhaps with a\n\
    \   conference server that asserts Bob's identity in a message/cpim\n   envelope\
    \ signed by the server.\n   MSRP does not prohibit multiple simultaneous sessions\
    \ between the\n   same pair of identities.  Nor does it prohibit an endpoint sending\
    \ a\n   message on behalf of another identity, such as may be the case for a\n\
    \   conference server.  The recipient's endpoint should determine its\n   level\
    \ of trust of the authenticity of the sender independently for\n   each session.\
    \  The fact that an endpoint trusts the authenticity of\n   the sender on any\
    \ given session should not affect the level of trust\n   it assigns for apparently\
    \ the same sender on a different session.\n   When MSRP clients form or acquire\
    \ a certificate, they SHOULD ensure\n   that the subjectAltName has a GeneralName\
    \ entry of type\n   uniformResourceIdentifier for each URI corresponding to this\
    \ client\n   and should always include an \"im:\" URI.  It is fine if the\n  \
    \ certificate contains other URIs such as \"sip:\" or \"xmpp:\" URIs.\n   MSRP\
    \ implementors should be aware of a potential attack on MSRP\n   devices that\
    \ involves placing very large values in the byte-range\n   header field, potentially\
    \ causing the device to allocate very large\n   memory buffers to hold the message.\
    \  Implementations SHOULD apply\n   some degree of sanity checking on byte-range\
    \ values before allocating\n   such buffers.\n"
- title: 15.  IANA Considerations
  contents:
  - "15.  IANA Considerations\n   This specification instructs IANA to create a new\
    \ registry for MSRP\n   parameters.  The MSRP Parameter registry is a container\
    \ for sub-\n   registries.  This section further introduces sub-registries for\
    \ MSRP\n   method names, status codes, and header field names.\n   Additionally,\
    \ Section 15.4 through Section 15.7 register new\n   parameters in existing IANA\
    \ registries.\n"
- title: 15.1.  MSRP Method Names
  contents:
  - "15.1.  MSRP Method Names\n   This specification establishes the Methods sub-registry\
    \ under MSRP\n   Parameters and initiates its population as follows.  New parameters\n\
    \   in this sub-registry must be published in an RFC (either as an IETF\n   submission\
    \ or RFC Editor submission).\n      SEND - [RFC4975]\n      REPORT - [RFC4975]\n\
    \   The following information MUST be provided in an RFC publication in\n   order\
    \ to register a new MSRP method:\n   o  The method name.\n   o  The RFC number\
    \ in which the method is registered.\n"
- title: 15.2.  MSRP Header Fields
  contents:
  - "15.2.  MSRP Header Fields\n   This specification establishes the header field-Field\
    \ sub-registry\n   under MSRP Parameters.  New parameters in this sub-registry\
    \ must be\n   published in an RFC (either as an IETF submission or RFC Editor\n\
    \   submission).  Its initial population is defined as follows:\n      To-Path\
    \ - [RFC4975]\n      From-Path - [RFC4975]\n      Message-ID - [RFC4975]\n   \
    \   Success-Report - [RFC4975]\n      Failure-Report - [RFC4975]\n      Byte-Range\
    \ - [RFC4975]\n      Status - [RFC4975]\n   The following information MUST be\
    \ provided in an RFC publication in\n   order to register a new MSRP header field:\n\
    \   o  The header field name.\n   o  The RFC number in which the method is registered.\n"
- title: 15.3.  MSRP Status Codes
  contents:
  - "15.3.  MSRP Status Codes\n   This specification establishes the Status-Code sub-registry\
    \ under\n   MSRP Parameters.  New parameters in this sub-registry must be\n  \
    \ published in an RFC (either as an IETF submission or RFC Editor\n   submission).\
    \  Its initial population is defined in Section 10.  It\n   takes the following\
    \ format:\n      Code [RFC Number]\n   The following information MUST be provided\
    \ in an RFC publication in\n   order to register a new MSRP status code:\n   o\
    \  The status code number.\n   o  The RFC number in which the method is registered.\n"
- title: 15.4.  MSRP Port
  contents:
  - "15.4.  MSRP Port\n   MSRP uses TCP port 2855, from the \"registered\" port range.\
    \  Usage of\n   this value is described in Section 6.\n"
- title: 15.5.  URI Schema
  contents:
  - "15.5.  URI Schema\n   This document requests permanent registration the URI schemes\
    \ of\n   \"msrp\" and \"msrps\".\n"
- title: 15.5.1.  MSRP Scheme
  contents:
  - "15.5.1.  MSRP Scheme\n   URI Scheme Name:  \"msrp\"\n   URI Scheme Syntax:  See\
    \ the ABNF construction for \"MSRP-URI\" in\n      Section 9 of RFC 4975.\n  \
    \ URI Scheme Semantics:  See Section 6 of RFC 4975.\n   Encoding Considerations:\
    \  See Section 6 of RFC 4975.\n   Applications/Protocols that use this URI Scheme:\
    \  The Message Session\n      Relay Protocol (MSRP).\n   Interoperability Considerations:\
    \  MSRP URIs are expected to be used\n      only by implementations of MSRP. \
    \ No additional interoperability\n      issues are expected.\n   Security Considerations:\
    \  See Section 14.1 of RFC 4975 for specific\n      security considerations for\
    \ MSRP URIs, and Section 14 of RFC 4975\n      for security considerations for\
    \ MSRP in general.\n   Contact:  Ben Campbell (ben@estacado.net).\n   Author/Change\
    \ Controller:  This is a permanent registration request.\n      Change control\
    \ does not apply.\n"
- title: 15.5.2.  MSRPS Scheme
  contents:
  - "15.5.2.  MSRPS Scheme\n   URI Scheme Name:  \"msrps\"\n   URI Scheme Syntax:\
    \  See the ABNF construction for \"MSRP-URI\" in\n      Section 9 of RFC 4975.\n\
    \   URI Scheme Semantics:  See Section 6 of RFC 4975.\n   Encoding Considerations:\
    \  See Section 6 of RFC 4975.\n   Applications/Protocols that use this URI Scheme:\
    \  The Message Session\n      Relay Protocol (MSRP).\n   Interoperability Considerations:\
    \  MSRP URIs are expected to be used\n      only by implementations of MSRP. \
    \ No additional interoperability\n      issues are expected.\n   Security Considerations:\
    \  See Section 14.1 of RFC 4975 for specific\n      security considerations for\
    \ MSRP URIs, and Section 14 of RFC 4975\n      for security considerations for\
    \ MSRP in general.\n   Contact:  Ben Campbell (ben@estacado.net).\n   Author/Change\
    \ Controller:  This is a permanent registration request.\n      Change control\
    \ does not apply.\n"
- title: 15.6.  SDP Transport Protocol
  contents:
  - "15.6.  SDP Transport Protocol\n   MSRP defines the new SDP protocol field values\
    \ \"TCP/MSRP\" and \"TCP/\n   TLS/MSRP\", which should be registered in the sdp-parameters\
    \ registry\n   under \"proto\".  This first value indicates the MSRP protocol\
    \ when TCP\n   is used as an underlying transport.  The second indicates that\
    \ TLS\n   over TCP is used.\n   Specifications defining new protocol values must\
    \ define the rules for\n   the associated media format namespace.  The \"TCP/MSRP\"\
    \ and \"TCP/TLS/\n   MSRP\" protocol values allow only one value in the format\
    \ field (fmt),\n   which is a single occurrence of \"*\".  Actual format determination\
    \ is\n   made using the \"accept-types\" and \"accept-wrapped-types\" attributes.\n"
- title: 15.7.  SDP Attribute Names
  contents:
  - "15.7.  SDP Attribute Names\n   This document registers the following SDP attribute\
    \ parameter names\n   in the sdp-parameters registry.  These names are to be used\
    \ in the\n   SDP att-name field.\n"
- title: 15.7.1.  Accept Types
  contents:
  - "15.7.1.  Accept Types\n   Contact Information:  Ben Campbell (ben@estacado.net)\n\
    \   Attribute-name:   accept-types\n   Long-form Attribute Name:  Acceptable media\
    \ types\n   Type:  Media level\n   Subject to Charset Attribute:  No\n   Purpose\
    \ and Appropriate Values:  The \"accept-types\" attribute\n      contains a list\
    \ of media types that the endpoint is willing to\n      receive.  It may contain\
    \ zero or more registered media-types, or\n      \"*\" in a space-delimited string.\n"
- title: 15.7.2.  Wrapped Types
  contents:
  - "15.7.2.  Wrapped Types\n   Contact Information:  Ben Campbell (ben@estacado.net)\n\
    \   Attribute-name:   accept-wrapped-types\n   Long-form Attribute Name:  Acceptable\
    \ media types Inside Wrappers\n   Type:  Media level\n   Subject to Charset Attribute:\
    \  No\n   Purpose and Appropriate Values:  The \"accept-wrapped-types\" attribute\n\
    \      contains a list of media types that the endpoint is willing to\n      receive\
    \ in an MSRP message with multipart content, but may not be\n      used as the\
    \ outermost type of the message.  It may contain zero or\n      more registered\
    \ media-types, or \"*\" in a space-delimited string.\n"
- title: 15.7.3.  Max Size
  contents:
  - "15.7.3.  Max Size\n   Contact Information:  Ben Campbell (ben@estacado.net)\n\
    \   Attribute-name:   max-size\n   Long-form Attribute Name:  Maximum message\
    \ size\n   Type:  Media level\n   Subject to Charset Attribute:  No\n   Purpose\
    \ and Appropriate Values:  The \"max-size\" attribute indicates\n      the largest\
    \ message an endpoint wishes to accept.  It may take any\n      whole numeric\
    \ value, specified in octets.\n"
- title: 15.7.4.  Path
  contents:
  - "15.7.4.  Path\n   Contact Information:  Ben Campbell (ben@estacado.net)\n   Attribute-name:\
    \   path\n   Long-form Attribute Name:  MSRP URI Path\n   Type:  Media level\n\
    \   Subject to Charset Attribute:  No\n   Purpose and Appropriate Values:  The\
    \ \"path\" attribute indicates a\n      series of MSRP devices that must be visited\
    \ by messages sent in\n      the session, including the final endpoint.  The attribute\
    \ contains\n      one or more MSRP URIs, delimited by the space character.\n"
- title: 16.  Contributors and Acknowledgments
  contents:
  - "16.  Contributors and Acknowledgments\n   In addition to the editors, the following\
    \ people contributed\n   extensive work to this document: Chris Boulton, Paul\
    \ Kyzivat, Orit\n   Levin, Hans Persson, Adam Roach, Jonathan Rosenberg, and Robert\n\
    \   Sparks.\n   The following people contributed substantial discussion and feedback\n\
    \   to this ongoing effort: Eric Burger, Allison Mankin, Jon Peterson,\n   Brian\
    \ Rosen, Dean Willis, Aki Niemi, Hisham Khartabil, Pekka Pessi,\n   Miguel Garcia,\
    \ Peter Ridler, Sam Hartman, and Jean Mahoney.\n"
- title: 17.  References
  contents:
  - '17.  References

    '
- title: 17.1.  Normative References
  contents:
  - "17.1.  Normative References\n   [1]   Dierks, T. and E. Rescorla, \"The Transport\
    \ Layer Security (TLS)\n         Protocol Version 1.1\", RFC 4346, April 2006.\n\
    \   [2]   Handley, M., Jacobson, V., and C. Perkins, \"SDP: Session\n        \
    \ Description Protocol\", RFC 4566, July 2006.\n   [3]   Rosenberg, J. and H.\
    \ Schulzrinne, \"An Offer/Answer Model with\n         Session Description Protocol\
    \ (SDP)\", RFC 3264, June 2002.\n   [4]   Rosenberg, J., Schulzrinne, H., Camarillo,\
    \ G., Johnston, A.,\n         Peterson, J., Sparks, R., Handley, M., and E. Schooler,\
    \ \"SIP:\n         Session Initiation Protocol\", RFC 3261, June 2002.\n   [5]\
    \   Bradner, S., \"Key words for use in RFCs to Indicate Requirement\n       \
    \  Levels\", BCP 14, RFC 2119, March 1997.\n   [6]   Crocker, D. and P. Overell,\
    \ \"Augmented BNF for Syntax\n         Specifications: ABNF\", RFC 4234, October\
    \ 2005.\n   [7]   Ramsdell, B., \"Secure/Multipurpose Internet Mail Extensions\n\
    \         (S/MIME) Version 3.1 Message Specification\", RFC 3851, July\n     \
    \    2004.\n   [8]   Freed, N. and N. Borenstein, \"Multipurpose Internet Mail\n\
    \         Extensions (MIME) Part One: Format of Internet Message Bodies\",\n \
    \        RFC 2045, November 1996.\n   [9]   Troost, R., Dorner, S., and K. Moore,\
    \ \"Communicating\n         Presentation Information in Internet Messages: The\
    \ Content-\n         Disposition Header Field\", RFC 2183, August 1997.\n   [10]\
    \  Berners-Lee, T., Fielding, R., and L. Masinter, \"Uniform\n         Resource\
    \ Identifier (URI): Generic Syntax\", STD 66, RFC 3986,\n         January 2005.\n\
    \   [11]  Blake-Wilson, S., Nystrom, M., Hopwood, D., Mikkelsen, J., and\n   \
    \      T. Wright, \"Transport Layer Security (TLS) Extensions\", RFC\n       \
    \  4366, April 2006.\n   [12]  Klyne, G. and D. Atkins, \"Common Presence and\
    \ Instant Messaging\n         (CPIM): Message Format\", RFC 3862, August 2004.\n\
    \   [13]  Chown, P., \"Advanced Encryption Standard (AES) Ciphersuites for\n \
    \        Transport Layer Security (TLS)\", RFC 3268, June 2002.\n   [14]  Yergeau,\
    \ F., \"UTF-8, a transformation format of ISO 10646\", STD\n         63, RFC 3629,\
    \ November 2003.\n   [15]  Freed, N. and N. Borenstein, \"Multipurpose Internet\
    \ Mail\n         Extensions (MIME) Part Two: Media Types\", RFC 2046, November\n\
    \         1996.\n   [16]  Housley, R., Polk, W., Ford, W., and D. Solo, \"Internet\
    \ X.509\n         Public Key Infrastructure Certificate and Certificate\n    \
    \     Revocation List (CRL) Profile\", RFC 3280, April 2002.\n   [17]  Peterson,\
    \ J. and  C. Jennings, \"Enhancements for Authenticated\n         Identity Management\
    \ in the Session Initiation Protocol (SIP)\",\n         RFC 4474, August 2006.\n\
    \   [18]  Lennox, J., \"Connection-Oriented Media Transport over the\n       \
    \  Transport Layer Security (TLS) Protocol in the Session\n         Description\
    \ Protocol (SDP)\", RFC 4572, July 2006.\n"
- title: 17.2.  Informative References
  contents:
  - "17.2.  Informative References\n   [19]  Johnston, A. and O. Levin, \"Session\
    \ Initiation Protocol (SIP)\n         Call Control - Conferencing for User Agents\"\
    , BCP 119, RFC\n         4579, August 2006.\n   [20]  Rosenberg, J., Peterson,\
    \ J., Schulzrinne, H., and G. Camarillo,\n         \"Best Current Practices for\
    \ Third Party Call Control (3pcc) in\n         the Session Initiation Protocol\
    \ (SIP)\", BCP 85, RFC 3725, April\n         2004.\n   [21]  Sparks, R., Johnston,\
    \ A., and D. Petrie, \"Session Initiation\n         Protocol Call Control - Transfer\"\
    , Work in Progress, October\n         2006.\n   [22]  Campbell, B., Rosenberg,\
    \ J., Schulzrinne, H., Huitema, C., and\n         D. Gurle, \"Session Initiation\
    \ Protocol (SIP) Extension for\n         Instant Messaging\", RFC 3428, December\
    \ 2002.\n   [23]  Jennings, C., Mahy, R., and A. Roach, \"Relay Extensions for\
    \ the\n         Message Session Relay Protocol (MSRP)\", RFC 4976, September\n\
    \         2007.\n   [24]  Rosenberg, J., \"The Session Initiation Protocol (SIP)\
    \ UPDATE\n         Method\", RFC 3311, October 2002.\n   [25]  Jennings, C., Peterson,\
    \ J., and J. Fischl, \"Certificate\n         Management Service for SIP\", Work\
    \ in Progress, July 2007.\n   [26]  Yon, D. and G. Camarillo, \"TCP-Based Media\
    \ Transport in the\n         Session Description Protocol (SDP)\", RFC 4145, September\
    \ 2005.\n   [27]  Peterson, J., \"Common Profile for Instant Messaging (CPIM)\"\
    ,\n         RFC 3860, August 2004.\n   [28]  Housley, R., \"Triple-DES and RC2\
    \ Key Wrapping\", RFC 3217,\n         December 2001.\n   [29]  Camarillo, G. and\
    \ H. Schulzrinne, \"Early Media and Ringing Tone\n         Generation in the Session\
    \ Initiation Protocol (SIP)\", RFC 3960,\n         December 2004.\n   [30]  Saint-Andre,\
    \ P., \"Extensible Messaging and Presence Protocol\n         (XMPP): Instant Messaging\
    \ and Presence\", RFC 3921, October\n         2004.\n   [31]  Rosenberg, J., Schulzrinne,\
    \ H., and P. Kyzivat, \"Indicating\n         User Agent Capabilities in the Session\
    \ Initiation Protocol\n         (SIP)\", RFC 3840, August 2004.\n   [32]  Peterson,\
    \ J., \"Address Resolution for Instant Messaging and\n         Presence\", RFC\
    \ 3861, August 2004.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Ben Campbell (editor)\n   Estacado Systems\n   17210 Campbell\
    \ Road\n   Suite 250\n   Dallas, TX  75252\n   USA\n   EMail: ben@estacado.net\n\
    \   Rohan Mahy (editor)\n   Plantronics\n   345 Encincal Street\n   Santa Cruz,\
    \ CA  95060\n   USA\n   EMail: rohan@ekabal.com\n   Cullen Jennings (editor)\n\
    \   Cisco Systems, Inc.\n   170 West Tasman Dr.\n   MS: SJC-21/2\n   San Jose,\
    \ CA  95134\n   USA\n   Phone: +1 408 421-9990\n   EMail: fluffy@cisco.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2007).\n   This document\
    \ is subject to the rights, licenses and restrictions\n   contained in BCP 78,\
    \ and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE\
    \ INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED,\
    \ INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION\
    \ HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY\
    \ OR FITNESS FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
