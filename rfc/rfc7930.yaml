- title: __initial_text__
  contents:
  - '                   Larger Packets for RADIUS over TCP

    '
- title: Abstract
  contents:
  - "Abstract\n   The RADIUS-over-TLS experiment described in RFC 6614 has opened\n\
    \   RADIUS to new use cases where the 4096-octet maximum size limit of a\n   RADIUS\
    \ packet proves problematic.  This specification extends the\n   RADIUS-over-TCP\
    \ experiment (RFC 6613) to permit larger RADIUS\n   packets.  This specification\
    \ compliments other ongoing work to permit\n   fragmentation of RADIUS authorization\
    \ information.  This document\n   registers a new RADIUS code, an action that\
    \ required IESG approval.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for examination, experimental implementation, and\n   evaluation.\n\
    \   This document defines an Experimental Protocol for the Internet\n   community.\
    \  This document is a product of the Internet Engineering\n   Task Force (IETF).\
    \  It represents the consensus of the IETF\n   community.  It has received public\
    \ review and has been approved for\n   publication by the Internet Engineering\
    \ Steering Group (IESG).  Not\n   all documents approved by the IESG are a candidate\
    \ for any level of\n   Internet Standard; see Section 2 of RFC 7841.\n   Information\
    \ about the current status of this document, any errata,\n   and how to provide\
    \ feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7930.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2016 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   3\n     1.1.  Requirements Notation . . . . . . . . . . . . . .\
    \ . . . .   3\n   2.  Changes to Packet Processing  . . . . . . . . . . . . .\
    \ . . .   4\n     2.1.  Status-Server Considerations  . . . . . . . . . . . .\
    \ . .   4\n   3.  Forward and Backward Compatibility  . . . . . . . . . . . .\
    \ .   5\n     3.1.  Rationale . . . . . . . . . . . . . . . . . . . . . . . .\
    \   6\n     3.2.  Discovery . . . . . . . . . . . . . . . . . . . . . . . .  \
    \ 7\n   4.  Protocol-Error Code . . . . . . . . . . . . . . . . . . . . .   7\n\
    \   5.  Too Big Response  . . . . . . . . . . . . . . . . . . . . . .   7\n  \
    \ 6.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .   8\n   7.\
    \  Security Considerations . . . . . . . . . . . . . . . . . . .   9\n   8.  References\
    \  . . . . . . . . . . . . . . . . . . . . . . . . .   9\n     8.1.  Normative\
    \ References  . . . . . . . . . . . . . . . . . .   9\n     8.2.  Informative\
    \ References  . . . . . . . . . . . . . . . . .  10\n   Acknowledgements  . .\
    \ . . . . . . . . . . . . . . . . . . . . . .  10\n   Author's Address  . . .\
    \ . . . . . . . . . . . . . . . . . . . . .  10\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The experiment with Remote Authentication Dial-In User Service\n\
    \   (RADIUS) over Transport Layer Security (TLS) [RFC6614] provides\n   strong\
    \ confidentiality and integrity for RADIUS [RFC2865].  This\n   enhanced security\
    \ has opened new opportunities for using RADIUS to\n   convey additional authorization\
    \ information.  As an example,\n   [RFC7833] describes a mechanism for using RADIUS\
    \ to carry Security\n   Assertion Markup Language (SAML) messages in RADIUS. \
    \ Many attributes\n   carried in these SAML messages will require confidentiality\
    \ or\n   integrity such as that provided by TLS.\n   These new use cases involve\
    \ carrying additional information in RADIUS\n   packets.  The maximum packet length\
    \ of 4096 octets is proving\n   insufficient for some SAML messages and for other\
    \ structures that may\n   be carried in RADIUS.\n   One approach is to fragment\
    \ a RADIUS message across multiple packets\n   at the RADIUS layer.  RADIUS fragmentation\
    \ [RFC7499] provides a\n   mechanism to split authorization information across\
    \ multiple RADIUS\n   messages.  That mechanism is necessary in order to split\n\
    \   authorization information across existing unmodified proxies.\n   However,\
    \ there are some significant disadvantages to RADIUS\n   fragmentation.  First,\
    \ RADIUS is a lock-step protocol, and only one\n   fragment can be in transit\
    \ at a time as part of a given request.\n   Also, there is no current mechanism\
    \ to discover the Path Maximum\n   Transmission Unit (PMTU) across the entire\
    \ path that the fragment\n   will travel.  As a result, fragmentation is likely\
    \ both at the RADIUS\n   layer and at the transport layer.  When TCP is used,\
    \ much better\n   transport characteristics can be achieved by fragmentation only\
    \ at\n   the TCP layer.  This specification provides a mechanism to achieve\n\
    \   these better transport characteristics when TCP is used.  As part of\n   this\
    \ specification, a new RADIUS code is registered.\n   This specification is published\
    \ as an Experimental specification\n   because the TCP extensions to RADIUS are\
    \ currently experimental.  The\n   need for this specification arises from operational\
    \ experience with\n   the TCP extensions.  However, this specification introduces\
    \ no new\n   experimental evaluation criteria beyond those in the base TCP\n \
    \  specification; this specification can be evaluated along with that\n   one\
    \ for advancement on the Standards Track.\n"
- title: 1.1.  Requirements Notation
  contents:
  - "1.1.  Requirements Notation\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n"
- title: 2.  Changes to Packet Processing
  contents:
  - "2.  Changes to Packet Processing\n   The maximum length of a RADIUS message is\
    \ increased from 4096 to\n   65535.  A RADIUS Server implementing this specification\
    \ MUST be able\n   to receive a RADIUS packet of maximum length.  Servers MAY\
    \ have a\n   maximum size over which they choose to return an error, as discussed\n\
    \   in Section 5, rather than processing a received packet; this size\n   MUST\
    \ be at least 4096 octets.\n   Clients implementing this specification MUST be\
    \ able to receive a\n   RADIUS packet of maximum length; that is, clients MUST\
    \ NOT close a\n   TCP connection simply because a large packet is sent over it.\n\
    \   Clients MAY include the Response-Length attribute defined in\n   Section 6\
    \ to indicate the maximum size of a packet that they can\n   successfully process.\
    \  Clients MAY silently discard a packet greater\n   than some configured size;\
    \ this size MUST be at least 4096 octets.\n   Clients MUST NOT retransmit an unmodified\
    \ request whose response is\n   larger than the client can process, as subsequent\
    \ responses will\n   likely continue to be too large.\n   Proxies MUST be able\
    \ to receive a RADIUS packet of maximum length\n   without closing the TCP connection.\
    \  Proxies SHOULD be able to\n   process and forward packets of maximum length.\
    \  When a proxy receives\n   a request over a transport with a 4096-octet maximum\
    \ length and the\n   proxy forwards that request over a transport with a larger\
    \ maximum\n   length, the proxy MUST include the Response-Length attribute with\
    \ a\n   value of 4096.\n"
- title: 2.1.  Status-Server Considerations
  contents:
  - "2.1.  Status-Server Considerations\n   This section extends processing of Status-Server\
    \ messages as\n   described in Sections 4.1 and 4.2 of [RFC5997].\n   Clients\
    \ implementing this specification SHOULD include the Response-\n   Length attribute\
    \ in Status-Server requests.  Servers are already\n   required to ignore unknown\
    \ attributes received in this message.  By\n   including the attribute, the client\
    \ indicates how large of a response\n   it can process to its Status-Server request.\
    \  It is very unlikely\n   that a response to Status-Server is greater than 4096\
    \ octets.\n   However, the client also indicates support for this specification,\n\
    \   which triggers the server behavior below.\n   If a server implementing this\
    \ specification receives a Response-\n   Length attribute in a Status-Server request,\
    \ it MUST include a\n   Response-Length attribute indicating the maximum size\
    \ request it can\n   process in its response to the Status-Server request.\n"
- title: 3.  Forward and Backward Compatibility
  contents:
  - "3.  Forward and Backward Compatibility\n   An implementation of [RFC6613] will\
    \ silently discard any RADIUS\n   packet larger than 4096 octets and will close\
    \ the TCP connection.\n   This section provides guidelines for interoperability\
    \ with these\n   implementations.  These guidelines are stated at the SHOULD level.\n\
    \   In some environments, support for large packets will be important\n   enough\
    \ that roaming or other agreements will mandate their support.\n   In these environments,\
    \ all implementations might be required to\n   support this specification, thus\
    \ removing the need for\n   interoperability with RFC 6613.  It is likely that\
    \ these guidelines\n   will be relaxed to the MAY level and support for this specification\n\
    \   made a requirement if RADIUS over TLS and TCP are moved to the\n   Standards\
    \ Track in the future.\n   Clients SHOULD provide configuration for the maximum\
    \ size of a\n   request sent to each server.  Servers SHOULD provide configuration\n\
    \   for the maximum size of a response sent to each client.  If dynamic\n   discovery\
    \ mechanisms are supported, configuration SHOULD be provided\n   for the default\
    \ maximum size of RADIUS packets sent to clients and\n   servers.  If an implementation\
    \ provides more granular configuration\n   for some classes of dynamic resources,\
    \ then the implementation SHOULD\n   also provide configuration of default maximum\
    \ packet sizes at the\n   same granularity.  As an example, an implementation\
    \ that provided\n   granular configuration for resources using a particular trust\
    \ anchor\n   or belonging to a particular roaming consortium SHOULD provide\n\
    \   default packet size configuration at the same granularity.\n   If a client\
    \ sends a request larger than 4096 octets and the TCP\n   connection is closed\
    \ without a response, the client SHOULD treat the\n   request as if a \"Request\
    \ Too Big\" error (Section 5) specifying a\n   maximum size of 4096 is received.\
    \  Clients or proxies sending\n   multiple requests over a single TCP connection\
    \ without waiting for\n   responses SHOULD implement capability discovery as discussed\
    \ in\n   Section 3.2.\n   By default, a server SHOULD NOT generate a response\
    \ larger than 4096\n   octets.  The Response-Length attribute MAY be included\
    \ in a request\n   to indicate that larger responses are acceptable.  Other attributes\n\
    \   or configurations MAY be used as an indicator that large responses\n   are\
    \ likely to be acceptable.\n   A proxy that implements both this specification\
    \ and RADIUS\n   fragmentation [RFC7499] SHOULD use RADIUS fragmentation when\
    \ the\n   following conditions are met:\n   1.  A RADIUS packet is being forwarded\
    \ towards a next hop whose\n       configuration does not support a packet that\
    \ large.\n   2.  RADIUS fragmentation can be used for the packet in question.\n"
- title: 3.1.  Rationale
  contents:
  - "3.1.  Rationale\n   The interoperability challenge appears at first significant.\
    \  This\n   specification proposes to introduce behavior where new\n   implementations\
    \ will fail to function with existing implementations.\n   However, these capabilities\
    \ are introduced to support new use cases.\n   If an implementation has 10000\
    \ octets of attributes to send, it\n   cannot, in general, trim down the response\
    \ to something that can be\n   sent.  Under this specification, a large packet\
    \ would be generated\n   that will be silently discarded by an existing implementation.\n\
    \   Without this specification, no packet is generated because the\n   required\
    \ attributes cannot be sent.\n   The biggest risk to interoperability would be\
    \ if requests and\n   responses are expanded to include additional information\
    \ that is not\n   strictly necessary.  So, avoiding creating situations where\
    \ large\n   packets are sent to existing implementations is mostly an operational\n\
    \   matter.  Interoperability is most impacted when the size of packets\n   in\
    \ existing use cases is significantly increased and least impacted\n   when large\
    \ packets are used for new use cases where the deployment is\n   likely to require\
    \ updated RADIUS implementations.\n   There is a special challenge for proxies\
    \ or clients with a high\n   request volume.  When an implementation of RFC 6613\
    \ receives a packet\n   that is too large, it closes the connection and does not\
    \ respond to\n   any requests in process.  Such a client would lose requests and\
    \ might\n   find it difficult to distinguish \"Request Too Big\" situations from\n\
    \   other failures.  In these cases, the discovery mechanism described in\n  \
    \ Section 3.2 can be used.\n   Also, RFC 6613 is an experiment.  Part of running\
    \ that experiment is\n   to evaluate whether additional changes are required to\
    \ RADIUS.  A\n   lower bar for interoperability should apply to changes to\n \
    \  Experimental protocols than Standard protocols.\n   This specification provides\
    \ good facilities to enable implementations\n   to understand packet size when\
    \ proxying to/from Standards Track UDP\n   RADIUS.\n"
- title: 3.2.  Discovery
  contents:
  - "3.2.  Discovery\n   As discussed in Section 2.1, a client MAY send a Status-Server\n\
    \   message to discover whether an authentication or accounting server\n   supports\
    \ this specification.  The client includes a Response-Length\n   attribute; this\
    \ signals the server to include a Response-Length\n   attribute indicating the\
    \ maximum packet size the server can process.\n   In this one instance, Response-Length\
    \ indicates the size of a request\n   that can be processed rather than a response.\n"
- title: 4.  Protocol-Error Code
  contents:
  - "4.  Protocol-Error Code\n   This document defines a new RADIUS code, 52, called\
    \ Protocol-Error.\n   This packet code may be used in response to any request\
    \ packet, such\n   as Access-Request, Accounting-Request, CoA-Request, or Disconnect-\n\
    \   Request.  It is a response packet sent by a server to a client.  The\n   packet\
    \ indicates to the client that the server is unable to process\n   the request\
    \ for some reason.\n   A Protocol-Error packet MUST contain an Original-Packet-Code\n\
    \   attribute, along with an Error-Cause attribute.  Other attributes MAY\n  \
    \ be included if desired.  The Original-Packet-Code contains the code\n   from\
    \ the request that generated the protocol error so that clients\n   can disambiguate\
    \ requests with different codes and the same ID.\n   Regardless of the original\
    \ packet code, the RADIUS Server calculates\n   the Message-Authenticator attribute\
    \ as if the original packet were an\n   Access-Request packet.  The identifier\
    \ is copied from the original\n   request.\n   Clients processing Protocol-Error\
    \ MUST ignore unknown or unexpected\n   attributes.\n   This RADIUS code is hop\
    \ by hop.  Proxies MUST NOT forward a Protocol-\n   Error packet they receive.\n"
- title: 5.  Too Big Response
  contents:
  - "5.  Too Big Response\n   When a RADIUS Server receives a request that is larger\
    \ than can be\n   processed, it generates a Protocol-Error response as follows:\n\
    \      The code is Protocol-Error.\n      The Response-Length attribute MUST be\
    \ included and its value is\n      the maximum size of request that will be processed.\n\
    \      The Error-Cause attribute is included with a value of 601.\n      The Original-Packet-Code\
    \ attribute is copied from the request.\n   Clients will not typically be able\
    \ to adjust and resend requests when\n   this error is received.  In some cases,\
    \ the client can fall back to\n   RADIUS fragmentation.  In other cases, this\
    \ code will provide for\n   better client error reporting and will avoid retransmitting\
    \ requests\n   guaranteed to fail.\n"
- title: 6.  IANA Considerations
  contents:
  - "6.  IANA Considerations\n   A new RADIUS Packet Type Code is registered in the\
    \ \"RADIUS Packet\n   Type Codes\" registry discussed in Section 2.1 of RFC 3575\
    \ [RFC3575].\n   The name is \"Protocol-Error\" and the code is 52.\n   The following\
    \ RADIUS attribute Type values [RFC3575] are assigned.\n   The assignment rules\
    \ in Section 10.3 of [RFC6929] are used.\n   +----------------------+-----------+--------------------------------+\n\
    \   | Name                 | Attribute | Description                    |\n  \
    \ +----------------------+-----------+--------------------------------+\n   |\
    \ Response-Length      | 241.3     | An attribute of type \"integer\" |\n   |\
    \                      |           | per Section 5 of RFC 2865      |\n   |  \
    \                    |           | containing maximum response    |\n   |    \
    \                  |           | length.                        |\n   |      \
    \                |           |                                |\n   | Original-Packet-Code\
    \ | 241.4     | An integer attribute           |\n   |                      |\
    \           | containing the code from a     |\n   |                      |  \
    \         | packet resulting in a          |\n   |                      |    \
    \       | Protocol-Error response.       |\n   +----------------------+-----------+--------------------------------+\n\
    \   The Response-Length attribute MAY be included in any RADIUS request.\n   In\
    \ this context, it indicates the maximum length of a response the\n   client is\
    \ prepared to receive.  Values are between 4096 and 65535.\n   The attribute MAY\
    \ also be included in a response to a Status-Server\n   message.  In this case,\
    \ the attribute indicates the maximum size\n   RADIUS request that is permitted.\n\
    \   A new Error-Cause value is registered in the \"Values for RADIUS\n   Attribute\
    \ 101, Error-Cause Attribute\" registry at\n   <http://www.iana.org/assignments/radius-types>\
    \ for \"Response Too Big\"\n   with value 601.  The range of valid values for\
    \ the Error-Cause\n   attribute in the \"Values for RADIUS Attribute 101, Error-Cause\n\
    \   Attribute\" registry originally defined in RFC 5176 are extended.  Two\n \
    \  new ranges are defined:\n      6xx fatal errors committed by a RADIUS server\n\
    \      7xx fatal errors committed by a RADIUS client\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   This specification updates [RFC6613] and will\
    \ be used with [RFC6614].\n   When used over plain TCP, this specification creates\
    \ new\n   opportunities for an on-path attacker to impact availability.  These\n\
    \   attacks can be entirely mitigated by using TLS.  If these attacks are\n  \
    \ acceptable, then this specification can be used over TCP without TLS.\n"
- title: 8.  References
  contents:
  - '8.  References

    '
- title: 8.1.  Normative References
  contents:
  - "8.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n  \
    \            DOI 10.17487/RFC2119, March 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n\
    \   [RFC2865]  Rigney, C., Willens, S., Rubens, A., and W. Simpson,\n        \
    \      \"Remote Authentication Dial In User Service (RADIUS)\",\n            \
    \  RFC 2865, DOI 10.17487/RFC2865, June 2000,\n              <http://www.rfc-editor.org/info/rfc2865>.\n\
    \   [RFC3575]  Aboba, B., \"IANA Considerations for RADIUS (Remote\n         \
    \     Authentication Dial In User Service)\", RFC 3575,\n              DOI 10.17487/RFC3575,\
    \ July 2003,\n              <http://www.rfc-editor.org/info/rfc3575>.\n   [RFC5997]\
    \  DeKok, A., \"Use of Status-Server Packets in the Remote\n              Authentication\
    \ Dial In User Service (RADIUS) Protocol\",\n              RFC 5997, DOI 10.17487/RFC5997,\
    \ August 2010,\n              <http://www.rfc-editor.org/info/rfc5997>.\n   [RFC6613]\
    \  DeKok, A., \"RADIUS over TCP\", RFC 6613,\n              DOI 10.17487/RFC6613,\
    \ May 2012,\n              <http://www.rfc-editor.org/info/rfc6613>.\n   [RFC6614]\
    \  Winter, S., McCauley, M., Venaas, S., and K. Wierenga,\n              \"Transport\
    \ Layer Security (TLS) Encryption for RADIUS\",\n              RFC 6614, DOI 10.17487/RFC6614,\
    \ May 2012,\n              <http://www.rfc-editor.org/info/rfc6614>.\n   [RFC6929]\
    \  DeKok, A. and A. Lior, \"Remote Authentication Dial In User\n             \
    \ Service (RADIUS) Protocol Extensions\", RFC 6929,\n              DOI 10.17487/RFC6929,\
    \ April 2013,\n              <http://www.rfc-editor.org/info/rfc6929>.\n"
- title: 8.2.  Informative References
  contents:
  - "8.2.  Informative References\n   [RFC7499]  Perez-Mendez, A., Ed., Marin-Lopez,\
    \ R., Pereniguez-Garcia,\n              F., Lopez-Millan, G., Lopez, D., and A.\
    \ DeKok, \"Support of\n              Fragmentation of RADIUS Packets\", RFC 7499,\n\
    \              DOI 10.17487/RFC7499, April 2015,\n              <http://www.rfc-editor.org/info/rfc7499>.\n\
    \   [RFC7833]  Howlett, J., Hartman, S., and A. Perez-Mendez, Ed., \"A\n     \
    \         RADIUS Attribute, Binding, Profiles, Name Identifier\n             \
    \ Format, and Confirmation Methods for the Security\n              Assertion Markup\
    \ Language (SAML)\", RFC 7833,\n              DOI 10.17487/RFC7833, May 2016,\n\
    \              <http://www.rfc-editor.org/info/rfc7833>.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   Sam Hartman's time on this document was funded by JANET\
    \ as part of\n   Project Moonshot.\n   Alan DeKok provided valuable review and\
    \ text for the Protocol-Error\n   packet code.\n   Alejandro Perez Mendez provided\
    \ valuable review comments.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Sam Hartman\n   Painless Security\n   Email: hartmans-ietf@mit.edu\n"
