- title: __initial_text__
  contents:
  - '                         Using RPSL in Practice

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1999).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document is a tutorial on using the Routing Policy Specification\n\
    \   Language (RPSL) to describe routing policies in the Internet Routing\n   Registry\
    \ (IRR). We explain how to specify various routing policies\n   and configurations\
    \ using RPSL, how to register these policies in the\n   IRR, and how to analyze\
    \ them using the routing policy analysis tools,\n   for example to generate vendor\
    \ specific router configurations.\n"
- title: 1 Introduction
  contents:
  - "1 Introduction\n   This document is a tutorial on RPSL and is targeted towards\
    \ an\n   Internet/Network Service Provider (ISP/NSP) engineer who understands\n\
    \   Internet routing, but is new to RPSL and to the IRR. Readers are\n   referred\
    \ to the RPSL reference document (RFC 2622) [1] for\n   completeness.  It is also\
    \ good to have that document at hand while\n   working through this tutorial.\n\
    \   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\"\
    ,\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in\
    \ this\n   document are to be interpreted as described in RFC 2119.\n   The IRR\
    \ is a repository of routing policies.  Currently, the IRR\n   repository is a\
    \ set of five repositories maintained at the following\n   sites:  the CA*Net\
    \ registry in Canada, the ANS, CW and RADB\n   registries in the United States\
    \ of America, and the RIPE registry in\n   Europe.  The five repositories are\
    \ run independently.  However, each\n   site exchanges its data with the others\
    \ regularly (at least once a\n   day and as often as every ten minutes).  CW,\
    \ CA*Net and ANS are\n   private registries which contain the routing policies\
    \ of the networks\n   and the customer networks of CW, CA*Net, and ANS respectively.\
    \  RADB\n   and RIPE are both public registries, and any ISP can publish their\n\
    \   policies in these registries.\n   The registries all maintain up-to-date copies\
    \ of one another's data.\n   At any of the sites, the five registries can be inspected\
    \ as a set.\n   One should refrain from registering his/her data in more than\
    \ one of\n   the registries, as this practice leads almost invariably to\n   inconsistencies\
    \ in the data.  The user trying to interpret the data\n   is left in a confusing\
    \ (at best) situation.  CW, ANS and CA*Net\n   customers are generally required\
    \ to register their policies in their\n   provider's registry.  Others may register\
    \ policies either at the RIPE\n   or RADB registry, as preferred.\n   RPSL is\
    \ based on RIPE-181 [2, 3], a language used to register routing\n   policies and\
    \ configurations in the IRR. Operational use of RIPE-181\n   has shown that it\
    \ is sometimes difficult (or impossible) to express a\n   routing policy which\
    \ is used in practice.  RPSL has been developed to\n   address these shortcomings\
    \ and to provide a language which can be\n   further extended as the need arises.\
    \  RPSL obsoletes RIPE-181.\n   RPSL constructs are expressed in one or more database\
    \ \"objects\" which\n   are registered in one of the registries described above.\
    \  Each\n   database object contains some routing policy information and some\n\
    \   necessary administrative data.  For example, an address prefix routed\n  \
    \ in the inter-domain mesh is specified in a route object, and the\n   peering\
    \ policies of an AS are specified in an aut-num object.  The\n   database objects\
    \ are related to each other by reference.  For\n   example, a route object must\
    \ refer to the aut-num object for the AS\n   in which it is originated.  Implicitly,\
    \ these relationships define\n   sets of objects, which can be used to specify\
    \ policies effecting all\n   members.  For example, we can specify a policy for\
    \ all routes of an\n   ISP, by referring to the AS number in which the routes\
    \ are registered\n   to be originated.\n   When objects are registered in the\
    \ IRR, they become available for\n   others to query using a whois service.  Figure\
    \ 1 illustrates the use\n   of the whois command to obtain the route object for\
    \ 128.223.0.0/16.\n   The output of the whois command is the ASCII representation\
    \ of the\n   route object.  The syntax and semantics of the route object are\n\
    \   described in Appendix A.3.  Registered policies can also be compared\n   with\
    \ others for consistency and they can be used to diagnose\n   operational routing\
    \ problems in the Internet.\n      % whois -h whois.ra.net 128.223.0.0/16\n  \
    \      route:       128.223.0.0/16\n        descr:       UONet\n        descr:\
    \       University of Oregon\n        descr:       Computing Center\n        descr:\
    \       Eugene, OR 97403-1212\n        descr:       USA\n        origin:     \
    \ AS3582\n        mnt-by:      MAINT-AS3582\n        changed:     meyer@ns.uoregon.edu\
    \ 19960222\n        source:      RADB\n      Figure 1:  whois command and a route\
    \ object.\n   The RAToolSet [6] is a suite of tools which can be used to analyze\n\
    \   the routing registry data.  It includes tools to configure routers\n   (RtConfig),\
    \ tools to analyze paths on the Internet (prpath and\n   prtraceroute), and tools\
    \ to compare, validate and register RPSL\n   objects (roe, aoe and prcheck).\n\
    \   In the following section, we will describe how common routing\n   policies\
    \ can be expressed in RPSL. The objects themselves are\n   described in Appendix\
    \ A.  Authoritative information on the IRR\n   objects, however, should be sought\
    \ in RFC-2622, and authoritative\n   information on general database objects (person,\
    \ role, and\n   maintainers) and on querying and updating the registry databases,\n\
    \   should be sought in RIPE-157 [4].  Section 3.2 describes the use of\n   RtConfig\
    \ to generate vendor specific router configurations.\n"
- title: 2 Specifying Policy in RPSL
  contents:
  - "2 Specifying Policy in RPSL\n   The key purpose of RPSL is to allow you to specify\
    \ your routing\n   configuration in the public Internet Routing Registry (IRR),\
    \ so that\n   you and others can check your policies and announcements for\n \
    \  consistency.  Moreover, in the process of setting policies and\n   configuring\
    \ routers, you take the policies and configurations of\n   others into account.\n\
    \   In this section, we begin by showing how some simple peering policies\n  \
    \ can be expressed in RPSL. We will build on that to introduce various\n   database\
    \ objects that will be needed in order to register policies in\n   the IRR, and\
    \ to show how more complex policies can be expressed.\n"
- title: 2.1 Common Peering Policies
  contents:
  - "2.1 Common Peering Policies\n   The peering policies of an AS are registered\
    \ in an aut-num object\n   which looks something like that in Figure 2.  We will\
    \ focus on the\n   semantics of the import and export attributes in which peering\n\
    \   policies are expressed.  We will also describe some of the other key\n   attributes\
    \ in the aut-num object, but the reader should refer to\n   RFC-2622 or to RIPE-157\
    \ for the definitive descriptions.\n      aut-num:     AS2\n      as-name:   \
    \  CAT-NET\n      descr:       Catatonic State University\n      import:     \
    \ from AS1 accept ANY\n      import:      from AS3 accept <^AS3+$>\n      export:\
    \      to AS3 announce ANY\n      export:      to AS1 announce AS2 AS3\n     \
    \ admin-c:     AO36-RIPE\n      tech-c:      CO19-RIPE\n      mnt-by:      OPS4-RIPE\n\
    \      changed:     orange@ripe.net\n      source:      RIPE\n      Figure 2:\
    \  Autonomous System Object\n   Now consider Figure 3 (AS4 and AS5 in the figure\
    \ will be discussed\n   later).  The peering policies expressed in the AS2 aut-num\
    \ object in\n   Figure 2 are typical for a small service provider providing\n\
    \   connectivity for a customer AS3 and using AS1 for transit.  That is,\n   AS2\
    \ only accepts announcements from AS3 which:\n   o  are originated in AS3; and\n\
    \   o  have paths composed of only AS3's (^ in <^AS3+$> means that AS3 is\n  \
    \    the first member of the path, + means that AS3 occurs one or more\n     \
    \ times in the path, and $ means that no other AS can be present in\n      the\
    \ path after AS3) (1).\n   To AS1, AS2 announces only those routes which originate\
    \ in their AS\n   or in their customer's AS.\n      AS1--------AS2--------AS3\n\
    \                  |          |\n                  |          |\n            \
    \     AS4--------AS5\n      Figure 3:  Some Neighboring ASes.\n   In the example\
    \ above, \"accept ANY\" in the import attribute indicates\n   that AS2 will accept\
    \ any announcements that AS1 sends, and \"announce\n   ANY\" in the export attribute\
    \ indicates that any route that AS2 has in\n   its routing table will be passed\
    \ on to AS3.  Assuming that AS1\n   announces \"ANY\" to AS2, AS2 is taking full\
    \ routing from AS1.\n   Note that with this peering arrangement, if AS1 adds or\
    \ deletes route\n   objects, there is no need to update any of the aut-num objects\
    \ to\n   continue the full routing policy.  Added (or deleted) route objects\n\
    \   will implicitly update AS1's and AS2's policies.\n   While the peering policy\
    \ specified in Figure 2 for AS2 is common, in\n   practice many peering agreements\
    \ are more complex.  Before we\n   consider more examples, however, let's first\
    \ consider the aut-num\n   object itself.  Note that it is just a set of attribute\
    \ labels and\n   values which can be submitted to one of the registry databases.\
    \  This\n   particular object is specified as being in (or headed for) the RIPE\n\
    \   registry (see the last line in Figure 2).  The source should be\n   specified\
    \ as one of ANS, CANET, CW, RADB, or RIPE depending on the\n   registry in which\
    \ the object is maintained.  The source attribute\n   must be specified in every\
    \ database object.\n   It is also worth noting that this object is \"maintained\
    \ by\" OPS4-RIPE\n   (the value of the mnt-by attribute), which references a \"\
    mntner\"\n   object.  Because the aut-num object may be used for router\n   configuration\
    \ and other operational purposes, the readers need to be\n   able to count on\
    \ the validity of its contents.  It is therefore\n   required that a mntner be\
    \ specified in the aut-num and in most other\n   database objects, which means\
    \ you must create a mntner object before\n   you can register your peering policies.\
    \  For brief information on the\n   \"mntner\" object and object writeability,\
    \ see Appendix A of this\n   document.  For more extensive information on how\
    \ to set up and use a\n   mntner to protect your database objects, see Section\
    \ 2.3 of RIPE-157.\n"
- title: 2.2 ISP Customer - Transit Provider Policies
  contents:
  - "2.2 ISP Customer - Transit Provider Policies\n   It is not uncommon for an ISP\
    \ to acquire connectivity from a transit\n   provider which announces all routes\
    \ to it, which it in turn passes on\n   to its customers to allow them to access\
    \ hosts on the global\n   Internet.  Meanwhile, the ISP will generally announce\
    \ the routes of\n   its customers networks to the transit ISP, making them accessible\
    \ on\n   the global Internet.  This is the service that is specified in Figure\n\
    \   2 for AS3.\n   Consider again Figure 3.  Suppose now that AS2 wants to provide\
    \ the\n   same service to AS4.  Clearly, it would be easy to modify the import\n\
    \   and export lines in the aut-num object for AS2 (Figure 2) to those\n   shown\
    \ in Figure 4.\n      import:      from AS1 accept ANY\n      import:      from\
    \ AS3 accept <^AS3+$>\n      import:      from AS4 accept <^AS4+$>\n      export:\
    \      to AS3 announce ANY\n      export:      to AS4 announce ANY\n      export:\
    \      to AS1 announce AS2 AS3 AS4\n      Figure 4:  Policy for AS3 and AS4 in\
    \ the AS2 as-num object\n   These changes are trivial to make of course, but clearly\
    \ as the\n   number of AS2 customers grows, it becomes more difficult to keep\n\
    \   track of, and to prevent errors.  Note also that if AS1 is selective\n   about\
    \ only accepting routes from the customers of AS2 from AS2, the\n   aut-num object\
    \ for AS1 would have to be adjusted to accommodate AS2's\n   new customer.\n \
    \  By using the RPSL \"as-set\" object, we can simplify this\n   significantly.\
    \  In Figure 5, we describe the customers of AS2.\n   Having this set to work\
    \ with, we can now rewrite the policies in\n   Figure 2 as shown in Figure 6.\n\
    \      as-set:      AS2:AS-CUSTOMERS\n      members:     AS3 AS4\n      changed:\
    \     orange@ripe.net\n      source:      RIPE\n      Figure 5:  The as-set object\n\
    \      import:      from AS1 accept ANY\n      import:      from AS2:AS-CUSTOMERS\
    \ accept <^AS2:AS-CUSTOMERS+$>\n      export:      to AS2:AS-CUSTOMERS announce\
    \ ANY\n      export:      to AS1 announce AS2 AS2:AS-CUSTOMERS\n      Figure 6:\
    \  Policy in the AS2 aut-num object for all AS2 customers\n   Note that if the\
    \ aut-num object for AS1 contains the line:\n      import:      from AS2 accept\
    \ <^AS2+ AS2:AS-CUSTOMERS*$>\n   then no changes will need to be made to the aut-num\
    \ objects for AS1\n   or AS2 as the AS2 customer base grows.  The AS numbers for\
    \ new\n   customers can simply be added to the as-set AS2:AS-CUSTOMERS, and\n\
    \   everything will work as for the existing customers.  Clearly in terms\n  \
    \ of readability, scalability and maintainability, this is a far better\n   mechanism\
    \ when compared to adding policy for the customer AS's to the\n   aut-num objects\
    \ directly.  The policy in this particular example\n   states that AS1 will accept\
    \ route announcements from AS2 in which the\n   first element of the path is AS2,\
    \ followed by more occurrences of\n   AS2, and then 0 or more occurrences of any\
    \ AS2 customer (e.g.  any\n   member of the as-set AS2:AS-CUSTOMERS).\n   Alternatively,\
    \ one may wish to limit the routes one accepts from a\n   peer, especially if\
    \ the peer is a customer.  This is recommended for\n   several reasons, such as\
    \ preventing the improper use of unassigned\n   address space, and of course malicious\
    \ use of another organization's\n   address space.\n   Such filtering can be expressed\
    \ in various ways in RPSL. Suppose the\n   address space 7.7.0.0/16 has been allocated\
    \ to the ISP managing AS3\n   for assignment to its customers.  AS3 may want to\
    \ announce part or\n   all of this block on the global Internet.  Suppose AS2\
    \ wants to be\n   certain that it only accepts announcements from AS3 for address\
    \ space\n   that has been properly allocated to AS3.  AS2 might then modify the\n\
    \   AS3 import line in Figure 2 to read:\n      import:      from AS3 accept {\
    \ 7.7.0.0/16^16-19 }\n   which states that route announcements for this address\
    \ block will be\n   accepted from AS3 if they are of length upto /19.  This of\
    \ course\n   will have to be modified if and when AS3 gets more address space.\n\
    \   Moreover, it is again clear that for an ISP with a growing or\n   changing\
    \ customer base, this mechanism will not scale well.\n      route-set:   AS2:RS-ROUTES:AS3\n\
    \      members:     7.7.0.0/16^16-19\n      changed:     orange@ripe.net\n   \
    \   source:      RIPE\n      Figure 7:  The route-set object\n   Luckily RPSL\
    \ supports the notion of a \"route-set\" which, as shown in\n   Figure 7, can\
    \ be used to specify the set of routes that will be\n   accepted from a given\
    \ customer.  Given this set (and a similar one\n   for AS4), the manager of AS2\
    \ can now filter on the address space that\n   will be accepted from their customers\
    \ by modifying the import lines\n   in the AS2 aut-num object as shown in Figure\
    \ 8.\n      import:      from AS1 accept ANY\n      import:      from AS3 accept\
    \ AS2:RS-ROUTES:AS3\n      import:      from AS4 accept AS2:RS-ROUTES:AS4\n  \
    \    export:      to AS2:AS-CUSTOMERS announce ANY\n      export:      to AS1\
    \ announce AS2 AS2:AS-CUSTOMERS\n      Figure 8:  Policy in the AS2 aut-num object\
    \ for address based\n                 filtering on AS2 customers\n   Note that\
    \ this is now only slightly more complex than the example in\n   Figure 6.  Furthermore,\
    \ nothing need be changed in the AS2 aut-num\n   object due to address space changes\
    \ for a customer, and this\n   filtering can be supported without any changes\
    \ to the AS1 aut-num\n   object.  The additional complexity is due to the two\
    \ route set names\n   being different, otherwise we could have combined the two\
    \ import\n   statements into one.  Please note that the set names are constructed\n\
    \   hierarchically.  The first AS number denotes whose sets these are,\n   and\
    \ the last AS number parameterize these sets for each peer.  RPSL\n   allows the\
    \ peer's AS number to be replaced by the keyword PeerAS.\n   Hence,\n      import:\
    \      from AS3 accept AS2:RS-ROUTES:PeerAS\n      import:      from AS4 accept\
    \ AS2:RS-ROUTES:PeerAS\n   has the same meaning as the corresponding import statements\
    \ in Figure\n   6.  This lets us combine the two import statements into one as\
    \ shown\n   in Figure 9.\n      import:      from AS1 accept ANY\n      import:\
    \      from AS2:AS-CUSTOMERS accept AS2:RS-ROUTES:PeerAS\n      export:      to\
    \ AS2:AS-CUSTOMERS announce ANY\n      export:      to AS1 announce AS2 AS2:AS-CUSTOMERS\n\
    \      Figure 9:  Policy in the AS2 aut-num object using PeerAS\n"
- title: 2.3 Including Interfaces in Peering Definitions
  contents:
  - "2.3 Including Interfaces in Peering Definitions\n   In the above examples peerings\
    \ were only given among ASes.  However,\n   the peerings may be described in much\
    \ more detail by RPSL, where\n   peerings can be specified between physical routers\
    \ using IP addresses\n   in the import and export attributes.  Figure 10 shows\
    \ a simple\n   example in which AS1 and AS2 are connected to an exchange point\
    \ IX.\n   While AS1 has only one connection to the exchange point via a router\n\
    \   interface with IP address 7.7.7.1, AS2 has two different connections\n   with\
    \ IP address 7.7.7.2 and 7.7.7.3.  The first AS may then define\n   its routing\
    \ policy in more detail by specifying its boundary router.\n      +--------------------+\
    \                +--------------------+\n      |            7.7.7.1 |-----+  \
    \  +-----| 7.7.7.2            |\n      |                    |     |    |     |\
    \                    |\n      | AS1                |    ========    |        \
    \        AS2 |\n      |                    |    IX    |     |                \
    \    |\n      |                    |          +-----| 7.7.7.3            |\n \
    \     +--------------------+                +--------------------+\n      Figure\
    \ 10:  Including interfaces in peerings definitions\n      aut-num:   AS1\n  \
    \    import:    from AS2 at 7.7.7.1 accept <^AS2+$>\n   Because AS1 has only one\
    \ connection to the exchange point in this\n   example, this specification does\
    \ not differ from that in which no\n   boundary router is specified.  However,\
    \ AS1 might want to choose to\n   accept only those announcements from AS2 which\
    \ come from the router\n   with IP address 7.7.7.2 and disregard those announcements\
    \ from router\n   7.7.7.3.  AS1 can specify this routing policy as follows:\n\
    \      aut-num:   AS1\n      import:    from AS2 7.7.7.2 at 7.7.7.1 accept <^AS2+$>\n\
    \   By selecting certain pairs of routers in a peering specification,\n   others\
    \ can be denied.  If no routers are included in a policy clause\n   then it is\
    \ assumed that the policy applies to all peerings among the\n   ASes involved.\n"
- title: 2.4 Describing Simple Backup Connections
  contents:
  - "2.4 Describing Simple Backup Connections\n   The specification of peerings among\
    \ ASes is not limited to one router\n   for each AS. In figure 10 one of the two\
    \ connections of AS2 to the\n   exchange point IX might be used as backup in case\
    \ the other\n   connection fails.  Let us assume that AS1 wants to use the connection\n\
    \   to router 7.7.7.2 of AS2 during regular operations, and router\n   7.7.7.3\
    \ as backup.  In a router configuration this may be done by\n   setting a local\
    \ preference.  The equivalent in RPSL is a\n   corresponding action definition\
    \ in the peering description.  The\n   action definitions are inserted directly\
    \ before the accept keyword.\n      aut-num:   AS1\n      import:    from AS2\
    \ 7.7.7.2 at 7.7.7.1 action pref=10;\n                 from AS2 7.7.7.3 at 7.7.7.1\
    \ action pref=20;\n                 accept <^AS2+$>\n   pref is opposite to local-pref\
    \ in that the smaller values are\n   preferred over larger values.  Actions may\
    \ also be defined without\n   specifying IP addresses of routers.  If no routers\
    \ are included in\n   the policy clause then it is assumed that the actions are\
    \ carried out\n   for all peerings among the ASes involved.\n   In the previous\
    \ example AS1 controls where it sends its traffic and\n   which connection is\
    \ used as backup.  However, AS2 may also define a\n   backup connection in an\
    \ export clause:\n      aut-num:   AS2\n      export:    to AS1 7.7.7.1 at 7.7.7.2\
    \ action med=10;\n                 to AS1 7.7.7.1 at 7.7.7.3 action med=20;\n\
    \                 announce <^AS2+$>\n   The definition given here for AS2 is the\
    \ symmetric counterpart to the\n   routing policy of AS1.  The selection of routing\
    \ information is done\n   by setting the multi exit discriminator metric med.\
    \  Actually, med\n   metrics will not be used in practice like this; they are\
    \ more\n   suitable for load balancing including backups.  For more details on\n\
    \   med metrics refer to the BGP-4 RFC [7].  To use the med to achieve\n   load\
    \ balancing, one often sets it to the \"IGP metric\".  This is\n   specified in\
    \ RPSL as:\n      aut-num:   AS2\n      export:    to AS1 action med=igp_cost;\
    \ announce <^AS2+$>\n   Hence, both routers will set the med to the IGP metric\
    \ at that\n   router, causing some routes to be preferred at one of the routers\
    \ and\n   other routes at the other router.\n"
- title: 2.5 Multi-Home Routing Policies using the community Attribute
  contents:
  - "2.5 Multi-Home Routing Policies using the community Attribute\n   RFC 1998 [9]\
    \ describes the use of the BGP community attribute to\n   provide support for\
    \ load balancing and backup connections of multi-\n   homed autonomous systems.\
    \  In this section, we use stepwise\n   refinement of an example to illustrate\
    \ how those policies might be\n   specified using RPSL.\n   The basic premise\
    \ of RFC 1998 is to use the BGP community attribute\n   to allow a customer to\
    \ configure the BGP \"LOCAL_PREF\" on a provider's\n   routers.  This will allow\
    \ the customer to influence the provider's\n   route selection, normally by lowering\
    \ the BGP \"LOCAL_PREF\" to\n   indicate backup arrangements.\n   In this example,\
    \ we illustrate how AS1 (the provider) might specify\n   their policy so that\
    \ a customer (AS4) connected to two of AS1's\n   direct customers (AS2 and AS3)\
    \ might signal to AS1 which connection\n   is to be preferred.\n   AS1's base\
    \ policy is to only accept routes from customers that are\n   originated by the\
    \ customer, or by the customer's customers.  This\n   leads to a policy such as:\n\
    \      aut-num:     AS1\n      import:      from AS2\n                   accept\
    \ (AS2 OR AS4) AND <^AS2+ AS4*$>\n      import:      from AS3\n              \
    \     accept (AS3 OR AS4) AND <^AS3+ AS4*$>\n      import:      from AS5\n   \
    \                accept AS5 AND <^AS5+$>\n   Note that AS4 is a customer of AS2\
    \ and AS3, and AS5 does not have its\n   own customers.\n   Now suppose we want\
    \ to add some policy to describe that if a customer\n   tags a route with community\
    \ 1:1 then AS1 will act on this to reduce\n   the BGP \"LOCAL_PREF\" by 10.\n\
    \   aut-num: AS1\n   import:  from AS2\n            action pref=10;\n        \
    \    accept (AS2 OR AS4) AND <^AS2+ AS4*$>\n                    AND community.contains(1:1)\n\
    \   import:  from AS2\n            action pref=0;\n            accept (AS2 OR\
    \ AS4) AND <^AS2+ AS4*$>\n   import:  from AS3\n            action pref=10;\n\
    \            accept (AS3 OR AS4) AND <^AS3+ AS4*$>\n                    AND community.contains(1:1)\n\
    \   import:  from AS3\n            action pref=0;\n            accept (AS3 OR\
    \ AS4) AND <^AS3+ AS4*$>\n   import:  from AS5\n            action pref=10;\n\
    \            accept AS5 AND <^AS5+$> AND community.contains(1:1)\n   import: \
    \ from AS5\n            action pref=0;\n            accept AS5 AND <^AS5+$>\n\
    \   We can see here that basically we are adding identical statements for\n  \
    \ each peering to the policy.  This is the ideal candidate for RPSL's\n   refine\
    \ statement.  This will make the policy more concise and avoid\n   some of the\
    \ potential for errors as more peering statements are added\n   in the future:\n\
    \      aut-num:     AS1\n      import: {\n                   from AS-ANY\n   \
    \                     action pref=10;\n                        accept community.contains(1:1);\n\
    \                   from AS-ANY\n                        action pref=0;\n    \
    \                    accept ANY;\n               } refine {\n                \
    \   from AS2 accept (AS2 OR AS4) AND <^AS2+ AS4*$>;\n                   from AS3\
    \ accept (AS3 OR AS4) AND <^AS3+ AS4*$>;\n                   from AS5 accept AS5\
    \ AND <^AS5+$>;\n               }\n   Now, we can clearly see that any route that\
    \ has been accepted from a\n   customer that contains the community 1:1 will have\
    \ it's local\n   preference value reduced by 10.\n   The refinement has cleaned\
    \ up some of the policy but we still have a\n   large number of individual policies\
    \ representing the same basic\n   provider policy \"from the customer, accept\
    \ customer routes\".  These\n   can be simplified by using AS sets.\n   First,\
    \ we will collect together all of AS1's customers into a single\n   AS set, AS1:AS-CUSTOMERS.\
    \ We use a hierarchical set name that start\n   with AS1 to avoid possible set\
    \ name clashes in IRR with other ASes:\n    as-set:      AS1:AS-CUSTOMERS\n  \
    \  members:     AS2, AS3, AS5\n   We also define one set for each customer which\
    \ lists the AS numbers\n   of any of their customers.\n    as-set:      AS1:AS-CUSTOMERS:AS2\n\
    \    members:     AS4\n    as-set:      AS1:AS-CUSTOMERS:AS3\n    members:   \
    \  AS4\n    as-set:      AS1:AS-CUSTOMERS:AS5\n    members:     # AS5 has no customers\
    \ yet, so keep blank for now\n   We can now use the keyword PeerAS with these\
    \ AS sets to simplify the\n   policy further:\n      aut-num:     AS1\n      import:\
    \ {\n                   from AS-ANY\n                        action pref=10;\n\
    \                        accept community.contains(1:1);\n                   from\
    \ AS-ANY\n                        action pref=0;\n                        accept\
    \ ANY;\n              } refine {\n                   from AS1:AS-CUSTOMERS\n \
    \                       accept (PeerAS OR AS1:AS-CUSTOMER:PeerAS)\n          \
    \                     AND <^PeerAS+ AS1:AS-CUSTOMER:PeerAS*$>\n              }\n\
    \   The use of PeerAS with AS1:AS-CUSTOMERS is basically equivalent to\n   looping\
    \ over the members of AS1:AS-CUSTOMERS, expanding the policy by\n   replacing\
    \ PeerAS with a member from the set AS1:AS-CUSTOMERS.\n   To illustrate how this\
    \ policy might be utilised by AS4, we present\n   the following policy fragment:\n\
    \      aut-num: AS4\n      export: to AS2\n              action community.append(1:1);\n\
    \              announce AS1\n      export: to AS3\n              announce AS1\n\
    \   Here, AS4 is signalling AS1 to prefer the routes from AS3.\n"
- title: 3 Tools
  contents:
  - "3 Tools\n   In this section, we briefly introduce a number of tools which can\
    \ be\n   used to inspect data in the database, to determine optimal routing\n\
    \   policies, and enter new data.\n"
- title: 3.1 The aut-num Object Editor
  contents:
  - "3.1 The aut-num Object Editor\n   All the examples shown in the previous sections\
    \ may well be edited by\n   hand.  They may be extracted one by one from the IRR\
    \ using the whois\n   program, edited, and then handed back to the registry robots.\n\
    \   However, again the RAToolSet [6] provides a very nice tool which\n   makes\
    \ working with aut-num objects much easier:  the aut-num object\n   editor aoe.\n\
    \   The aut-num object editor has a graphical user interface to view and\n   manipulate\
    \ aut-num objects registered at any IRR. New aut-num objects\n   may be generated\
    \ using templates and submitted to the registries.\n   Moreover, the routing policy\
    \ from the databases may be compared to\n   real life peerings.  Therefore, aoe\
    \ is highly recommended as an\n   interface to the IRR for aut-num objects.  Further\
    \ information on aoe\n   is available together with the RAToolSet [6].\n"
- title: 3.2 Router Configuration Using RtConfig
  contents:
  - "3.2 Router Configuration Using RtConfig\n   RtConfig is a tool developed by the\
    \ Routing Arbiter project [8] to\n   generate vendor specific router configurations\
    \ from the policy data\n   held in the various IRRs.  RtConfig currently supports\
    \ Cisco, gated\n   and RSd configuration formats.  It has been publicly available\
    \ since\n   late 1994, and is currently being used by many sites for router\n\
    \   configuration.  The next section describes a methodology for\n   generating\
    \ vendor specific router configurations using RtConfig (2).\n"
- title: 3.3 Using RtConfig
  contents:
  - "3.3 Using RtConfig\n   The general paradigm for using RtConfig involves registering\
    \ policy\n   in an IRR, building a RtConfig source file, then running running\n\
    \   RtConfig against the source file and the IRR database to create\n   vendor\
    \ specific router configuration for the specified policy.  The\n   source file\
    \ will contain vendor specific commands as well as RtConfig\n   commands.  To\
    \ make a source file, pick up one of your router\n   configuration files and replace\
    \ the vendor specific policy\n   configuration commands with the RtConfig commands.\n\
    \   Commands beginning with @RtConfig instruct RtConfig to perform\n   special\
    \ operations.  An example source file is shown in Figure 11.\n   In this example,\
    \ commands such as \"@RtConfig import AS3582\n   198.32.162.1 AS3701 198.32.162.2\"\
    \ instruct RtConfig to generate\n   vendor specific import policies where the\
    \ router 198.32.162.1 in\n   AS3582 is importing routes from router 198.32.162.2\
    \ in AS3701.  The\n   other @RtConfig commands instruct the RtConfig to use certain\
    \ names\n   and numbers in the output that it generates (please refer to RtConfig\n\
    \   manual [8] for additional information).\n   Once a source file is created,\
    \ the file is processed by RtConfig (the\n   default IRR is the RADB, and the\
    \ default vendor is Cisco; however,\n   command line options can be used to override\
    \ these values).  The\n   result of running RtConfig on the source file in Figure\
    \ 11 is shown\n   in Figure 19 in Appendix B.\n      router    bgp 3582\n    \
    \  network   128.223.0.0\n      !\n      !       Start with access-list 100\n\
    \      !\n      @RtConfig set cisco_access_list_no = 100\n      !\n      !   \
    \    NERO\n      neighbor 198.32.162.2 remote-as 3701\n      @RtConfig set cisco_map_name\
    \ = \"AS3701-EXPORT\"\n      @RtConfig export AS3582 198.32.162.1 AS3701 198.32.162.2\n\
    \      @RtConfig set cisco_map_name = \"AS3701-IMPORT\"\n      @RtConfig import\
    \ AS3582 198.32.162.1 AS3701 198.32.162.2\n      !\n      !       WNA/VERIO\n\
    \      neighbor 198.32.162.6 remote-as 2914\n      @RtConfig set cisco_map_name\
    \ = \"AS2914-EXPORT\"\n      @RtConfig export AS3582 198.32.162.1 AS2914 198.32.162.6\n\
    \      @RtConfig set cisco_map_name = \"AS2914-IMPORT\"\n      @RtConfig import\
    \ AS3582 198.32.162.1 AS2914 198.32.162.6\n      Figure 11:  RtConfig Template\
    \ File\n"
- title: A RPSL Database Objects
  contents:
  - "A RPSL Database Objects\n      In this appendix, we introduce the RPSL objects\
    \ required to implement many\n      typical Internet routing policies.  RFC-2622\
    \ and RIPE-157 provide the\n      authoritative description for these objects\
    \ and for the RPSL syntax, but\n      this appendix will often be sufficient in\
    \ practice.\n   The frequently needed objects are:\n      o  maintainer objects\
    \ (mntner)\n      o  autonomous system number objects (aut-num)\n      o  route\
    \ objects (route)\n      o  set objects (as-set, route-set)\n   and they are described\
    \ in the following sections.  To make your\n   routing policies and configuration\
    \ public, these objects should be\n   registered in exactly one of the IRR registries.\n\
    \   In general, you can register your information by sending the\n   appropriate\
    \ objects to an email address for the registry you use.\n   The email should consist\
    \ of the objects you want to have registered\n   or modified, separated by empty\
    \ lines, and preceded by some kind of\n   authentication details (see below).\
    \  The registry robot processes\n   your mail and enters new objects into the\
    \ database, deletes old ones\n   (upon request), or makes the requested modifications.\n\
    \   You will receive a response indicating the status of your submission.\n  \
    \ As the emails are handled automatically, the response is generally\n   very\
    \ fast.  However, it should be remembered that a significant\n   number of updates\
    \ are also sometimes submitted to the database (by\n   other robots), so the response\
    \ time cannot be guaranteed.  The email\n   addresses for submitting objects to\
    \ the existing registries are\n   listed in Figure 12.\n               ANS   \
    \ auto-dbm@ans.net\n               CANET  auto-dbm@canet.net\n               CW\
    \     auto-rr@cw.net\n               RADB   auto-dbm@ra.net\n               RIPE\
    \   auto-dbm@ripe.net\n      Figure 12:  Email addresses to register policy objects\
    \ in IRR.\n   Because it is required that a maintainer be specified in many of\
    \ the\n   database objects, a mntner is usually the first to be created.  To\n\
    \   have it properly authenticated, a mntner object is added manually by\n   registry\
    \ staff.  Thereafter, all database submissions, deletions and\n   modifications\
    \ should be done through the registry robot.\n   Each of the registries can provide\
    \ additional information and support\n   for users.  For the public registries\
    \ this support is available from\n   the email addresses listed in Figure 13.\n\
    \               RADB  db-admin@ra.net\n               RIPE  ripe-dbm@ripe.net\n\
    \            Figure 13:  Support email addresses.\n   If you are using one of\
    \ the private registries, your service provider\n   should be able to address\
    \ your questions.\n"
- title: A.1 The Maintainer Object
  contents:
  - "A.1 The Maintainer Object\n   The maintainer object is used to introduce some\
    \ kind of authorization\n   for registrations.  It lists various contact persons\
    \ and describes\n   security mechanisms that will be applied when updating objects\
    \ in the\n   IRR.  Registering a mntner object is the first step in creating\n\
    \   policies for an AS. An example is shown in Figure 14.  The maintainer\n  \
    \ is called MAINT-AS3701.  The contact person here is the same for\n   administrative\
    \ (admin-c) and technical (tech-c) issues and is\n   referenced by the NIC-handle\
    \ DMM65.  NIC-handles are unique\n   identifiers for persons in registries.  Refer\
    \ to registry\n   documentation for further details on person objects and usage\
    \ of\n   NIC-handles.\n   The example shows two authentication mechanisms:  CRYPT-PW\
    \ and MAIL-\n   FROM.  CRYPT-PW takes as its argument a password that is encrypted\n\
    \   with Unix crypt (3) routine.  When sending updates, the maintainer\n   adds\
    \ the field password:  <cleartext password> to the beginning of\n   any requests\
    \ that are to be authenticated.  MAIL-FROM takes an\n   argument that is a regular\
    \ expression which covers a set of mail\n   addresses.  Only users with any of\
    \ these mail addresses are\n   authorized to work with objects secured by the\
    \ corresponding\n   maintainer (3).\n   The security mechanisms of the mntner\
    \ object will only be applied on\n   those objects referencing a specific mntner\
    \ object.  The reference is\n   done by adding the attribute mnt-by to an object\
    \ using the name of\n   the mntner object as its value.  In Figure 14, the maintainer\
    \ MAINT-\n   AS3701 is maintained by itself.\n      mntner:      MAINT-AS3701\n\
    \      descr:       Network for Research and Engineering in Oregon\n      remark:\
    \      Internal Backbone\n      admin-c:     DMM65\n      tech-c:      DMM65\n\
    \      upd-to:      noc@nero.net\n      auth:        CRYPT-PW  949WK1mirBy6c\n\
    \      auth:        MAIL-FROM .*@nero.net\n      notify:      noc@nero.net\n \
    \     mnt-by:      MAINT-AS3701\n      changed:     meyer@antc.uoregon.edu 970318\n\
    \      source:      RADB\n      Figure 14:  Maintainer Object\n"
- title: A.2 The Autonomous System Object
  contents:
  - "A.2 The Autonomous System Object\n   The autonomous system object describes the\
    \ import and export policies\n   of an AS. Each organization registers an autonomous\
    \ system object\n   (aut-num) in the IRR for its AS. Figure 15 shows the aut-num\
    \ for\n   AS3582 (UONET).\n   The autonomous system object lists contacts (admin-c,\
    \ tech-c) and is\n   maintained by (mnt-by) MAINT-AS3701 which is the maintainer\
    \ displayed\n   in Figure 14.\n   The most important attributes of the aut-num\
    \ object are import and\n   export.  The import clause of an aut-num specifies\
    \ import policies,\n   while the export clause specifies export policies.  The\
    \ corresponding\n   clauses allow a very detailed description of the routing policy\
    \ of\n   the AS specified.  The details are given in section 2.\n   With these\
    \ clauses, an aut-num object shows its relationship to other\n   autonomous systems\
    \ by describing its peerings.  In addition, it also\n   defines a routing entity\
    \ comprising a group of IP networks which are\n   handled according to the rules\
    \ defined in the aut-num object.\n   Therefore, it is closely linked to route\
    \ objects.\n   In this example, AS3582 imports all routes from AS3701 by using\
    \ the\n   keyword ANY. AS3582 imports only internal routes from AS4222, AS5650,\n\
    \   and AS1798.  The import policy for for AS2914 is slightly more\n   complex.\
    \  Since AS2914 provides transit to various other ASes, AS3582\n   accepts routes\
    \ with ASPATHs that begin with AS2194 followed by\n   members of AS-WNA, which\
    \ is an as set (see section A.4.1 below)\n   describing those customers that transit\
    \ AS2914.\n   Since AS3582 is a multi-homed stub AS (i.e., it does not provide\n\
    \   transit), its export policy consists simply of \"announce AS3582\"\n   clauses;\
    \ that is, announce internal routes of AS3582.  These routes\n   are those in\
    \ route objects where the origin attribute is AS3582.\n      aut-num:     AS3582\n\
    \      as-name:     UONET\n      descr:       University of Oregon, Eugene OR\n\
    \      import:      from AS3701 accept ANY\n      import:      from AS4222 accept\
    \ <^AS4222+$>\n      import:      from AS5650 accept <^AS5650+$>\n      import:\
    \      from AS2914 accept <^AS2914+ (AS-WNA)*$>\n      import:      from AS1798\
    \ accept <^AS1798+$>\n      export:      to AS3701 announce AS3582\n      export:\
    \      to AS4222 announce AS3582\n      export:      to AS5650 announce AS3582\n\
    \      export:      to AS2914 announce AS3582\n      export:      to AS1798 announce\
    \ AS3582\n      admin-c:     DMM65\n      tech-c:      DMM65\n      notify:  \
    \    nethelp@ns.uoregon.edu\n      mnt-by:      MAINT-AS3582\n      changed: \
    \    meyer@antc.uoregon.edu 970316\n      source:      RADB\n      Figure 15:\
    \  Autonomous System Object\n   The aut-num object forms the basis of a scalable\
    \ and maintainable\n   router\n      route:       128.223.0.0/16\n      origin:\
    \      AS3582\n      descr:       UONet\n      descr:       University of Oregon\n\
    \      descr:       Computing Center\n      descr:       Eugene, OR 97403-1212\n\
    \      descr:       USA\n      mnt-by:      MAINT-AS3582\n      changed:     meyer@ns.uoregon.edu\
    \ 960222\n      source:      RADB\n      Figure 16:  Example of a route object\n\
    \   configuration system.  For example, if AS3582 originates a new route,\n  \
    \ it need only create a route object for that route with origin AS3582.\n   AS3582\
    \ can now build configuration using this route object without\n   changing its\
    \ aut-num object.\n   Similarly, if for example, AS3701 originates a new route,\
    \ it need\n   only create a route object for that route with origin AS3701.  Both\n\
    \   AS3701 and AS3582 can now build configuration using this route object\n  \
    \ without modifying its aut-num object.\n"
- title: A.3 The Route Object
  contents:
  - "A.3 The Route Object\n   In contrast to aut-num objects which describe propagation\
    \ of routing\n   information for an autonomous system as a whole, route objects\
    \ define\n   single routes from an AS. An example is given in Figure 16.\n   This\
    \ route object is maintained by MAINT-AS3582 and references AS3582\n   by the\
    \ origin attribute.  By this reference it is grouped together\n   with other routes\
    \ of the same origin AS, becoming member of the\n   routing entity denoted by\
    \ AS3582.  The routing policies can then be\n   defined in the aut-num objects\
    \ for this group of routes.\n   Consequently, the route objects give the routes\
    \ from this AS which\n   are distributed to peer ASes according to the rules of\
    \ the routing\n   policy.  Therefore, for any route in the routing tables of the\n\
    \   backbone routers a route object must exist in one of the registries\n   in\
    \ IRR. route objects must be registered in the IRR only for the\n   routes seen\
    \ outside your AS. Normally, this set of external routes is\n   different from\
    \ the routes internally visible within your AS. One of\n   the major reasons is\
    \ that external peers need no information at all\n   about your internal routing\
    \ specifics.  Therefore, external routes\n   are in general aggregated combinations\
    \ of internal routes, having\n   shorter IP prefixes where applicable according\
    \ to the CIDR rules.\n   Please see the CIDR FAQ [5] for a tutorial introduction\
    \ to CIDR. It\n   is strongly recommended that you aggregate your routes as much\
    \ as\n   possible, thereby minimizing the number of routes you inject into the\n\
    \   global routing table and at the same time reducing the corresponding\n   number\
    \ of route objects in the IRR.\n   While you may easily query single route objects\
    \ using the whois\n   program, and submit objects via mail to the registry robots,\
    \ this\n   becomes kind of awkward for larger sets.  The RAToolSet [6] offers\n\
    \   several tools to make handling of route objects easier.  If you want\n   to\
    \ read policy data from the IRR and process it by other programs,\n   you might\
    \ be interested in using peval which is a low level policy\n   evaluation tool.\
    \  As an example, the command\n      peval -h whois.ra.net AS3582\n   will give\
    \ you all route objects from AS3582 registered with RADB.\n   A much more sophisticated\
    \ tool from the RAToolSet to handle route\n   objects interactively is the route\
    \ object editor roe.  It has a\n   graphical user interface to view and manipulate\
    \ route objects\n   registered at any IRR. New route objects may be generated\
    \ from\n   templates and submitted to the registries.  Moreover, the route\n \
    \  objects from the databases may be compared to real life routes.\n   Therefore,\
    \ roe is highly recommended as an interface to the IRR for\n   route objects.\
    \  Further information on peval and roe is available\n   together with the RAToolSet\
    \ [6].\n"
- title: A.4 Set Objects
  contents:
  - "A.4 Set Objects\n   With routing policies it is often necessary to reference\
    \ groups of\n   autonomous systems or routes which have identical properties\n\
    \   regarding a specific policy.  To make working with such groups easier\n  \
    \ RPSL allows to combine them in set objects.  There are two basic\n   types of\
    \ predefined set objects, as-set, and route-set.  The RPSL set\n   objects are\
    \ described below.\n"
- title: A.4.1 AS-SET Object
  contents:
  - "A.4.1 AS-SET Object\n   Autonomous system set objects (as-set) are used to group\
    \ autonomous\n   system objects into named sets.  An as-set has an RPSL name that\n\
    \   starts with \"AS-\".  In the example in Figure 17, an as-set called\n   AS-NERO-PARTNERS\
    \ and containing AS3701, AS4201, AS3582, AS4222,\n   AS1798 is defined.  The as-set\
    \ is the RPSL replacement for the RIPE-\n   181 as-macro.  It has been extended\
    \ to include ASes in the set\n   indirectly by referencing as set names in the\
    \ aut-num objects.\n   AS-SETs are particularly useful when specifying policies\
    \ for groups\n   such as customers, providers, or for transit.  You are encouraged\
    \ to\n   register sets for these groups because it is most likely that you\n \
    \  will treat them alike, i.e. you will have a very similar routing\n   policy\
    \ for all your customers which have an autonomous system of\n   their own.  You\
    \ may as well discover that this is also true for the\n   providers you are peering\
    \ with, and it is most convenient to have the\n   ASes combined in one as-set\
    \ for which you offer transit.  For\n   example, if a transit provider specifies\
    \ its import policy using its\n   customer's as-set (i.e., its import clause for\
    \ the customer contains\n   the customer's as-set), then that customer can modify\
    \ the set of ASes\n   that its transit provider accepts from it.  Again, this\
    \ can be\n   accomplished without requiring the customer or the transit provider\n\
    \   to modify its aut-num object.\n      as-set:    AS3582:AS-PARTNERS\n     \
    \ members:   AS3701, AS4201, AS3582, AS4222, AS1798\n                        \
    \  Figure 17:  as-set Object\n   The ASes of the set are simply compiled in a\
    \ comma delimited list\n   following the members attribute of the as-set.  This\
    \ list may also\n   contain other AS-SET names.\n"
- title: A.4.2 ROUTE-SET Object
  contents:
  - "A.4.2 ROUTE-SET Object\n   A route-set is a way to name a group of routes.  The\
    \ syntax is\n   similar to the as-set.  A route-set has an RPSL name that starts\
    \ with\n   \"RS-\".  The members attribute lists the members of the set.  The\n\
    \   value of a members attribute is a list of address prefixes, or\n   route-set\
    \ names.  The members of the route-set are the address\n   prefixes or the names\
    \ of other route sets specified.\n   Figure 18 presents some example route-set\
    \ objects.  The set rs-uo\n   contains two address prefixes, namely 128.223.0.0/16\
    \ and\n   198.32.162.0/24.  The set rs-bar contains the members of the set rs-\n\
    \   uo and the address prefix 128.7.0.0/16.  The set rs-martians\n   illustrate\
    \ the use of range operators.  0.0.0.0/0^32 are the length\n   32 more specifics\
    \ of 0.0.0.0/0, i.e. the host routes; 224.0.0.0/3^+\n   are the more specifics\
    \ of 224.0.0.0/3, i.e. the routes falling into\n   the multicast address space.\
    \  For more complete list of range\n   operators please refer to RFC-2622.\n \
    \     route-set: rs-uo\n      members: 128.223.0.0/16, 198.32.162.0/24\n     \
    \ route-set: rs-bar\n      members: 128.7.0.0/16, rs-uo\n      route-set: rs-martians\n\
    \      remarks: routes not accepted from any peer\n      members: 0.0.0.0/0, \
    \             # default route\n               0.0.0.0/0^32,           # host routes\n\
    \               224.0.0.0/3^+,          # multicast routes\n               127.0.0.0/8^9-32,\
    \ . . .\n                        Figure 18:  route-set Objects\n"
- title: 'B Output of RtConfig:  An Example'
  contents:
  - "B Output of RtConfig:  An Example\n      In Figure 19, you see the result of\
    \ running RtConfig on the source\n      file in Figure 11.\n      router    bgp\
    \ 3582\n      network   128.223.0.0\n      !\n      !       NERO\n      neighbor\
    \ 198.32.162.2 remote-as 3701\n      no access-list 100\n      access-list 100\
    \ permit ip 128.223.0.0   0.0.0.0   255.255.0.0   0.0.0.0\n      access-list 100\
    \ deny ip 0.0.0.0 255.255.255.255 0.0.0.0 255.255.255.255\n      !\n      no route-map\
    \ AS3701-EXPORT\n      route-map AS3701-EXPORT permit 1\n       match ip address\
    \ 100\n      !\n      router bgp 3582\n      neighbor 198.32.162.2 route-map AS3701-EXPORT\
    \ out\n      !\n      no route-map AS3701-IMPORT\n      route-map AS3701-IMPORT\
    \ permit 1\n       set local-preference 1000\n      !\n      router bgp 3582\n\
    \      neighbor 198.32.162.2 route-map AS3701-IMPORT in\n      !\n      !    \
    \   WNA/VERIO\n      neighbor 198.32.162.6 remote-as 2914\n      !\n      no route-map\
    \ AS2914-EXPORT\n      route-map AS2914-EXPORT permit 1\n       match ip address\
    \ 100\n      !\n      router bgp 3582\n      neighbor 198.32.162.6 route-map AS2914-EXPORT\
    \ out\n      no ip as-path access-list  100\n      ip as-path access-list 100\
    \ permit ^_2914(((_[0-9]+))*_             \\\n            (13|22|97|132|175|668|1914|2905|2914|3361|3381|3791|3937|\
    \    \\\n             4178|4354|4571|4674|4683|5091|5303|5798|5855|5856|5881|6083\
    \ \\\n             |6188|6971|7790|7951|8028))?$\n      !\n      no route-map\
    \ AS2914-IMPORT\n      route-map AS2914-IMPORT permit 1\n       match as-path\
    \ 100\n       set local-preference 998\n      !\n      router bgp 3582\n     \
    \ neighbor 198.32.162.6 route-map AS2914-IMPORT in\n                        Figure\
    \ 19:  Output of RtConfig\n"
- title: Security Considerations
  contents:
  - "Security Considerations\n      This document is a tutorial to RPSL, it does not\
    \ define protocols or\n      standards that need to be secured.\n"
- title: Endnotes
  contents:
  - "Endnotes\n   (1) AS-PATH regular expressions are POSIX compliant regular\n  \
    \     expressions.\n   (2) Discussion of RtConfig internals is beyond the scope\
    \ of this\n       document.\n   (3) Clearly, neither of these mechanisms is sufficient\
    \ to provide\n       strong authentication or authorization.  Other public key\
    \ (e.g.,\n       PGP) authentication mechanisms are available from some of the\n\
    \       IRRs.\n"
- title: References
  contents:
  - "References\n   [1] Alaettinoglu, C., Villamizar, C., Gerich, E., Kessens, D.,\
    \ Meyer,\n       D., Bates, T., Karrenberg, D. and M. Terpstra, \"Routing Policy\n\
    \       Specification Language (RPSL)\", RFC 2622, June 1999.\n   [2] Bates, T.,\
    \ Jouanigot, J-M., Karrenberg, D., Lothberg, P. and M.\n       Terpstra, \"Representation\
    \ of IP Routing Policies in the RIPE\n       database\", Technical Report ripe-81,\
    \ RIPE, RIPE NCC, Amsterdam,\n       Netherlands, February 1993.\n   [3] T. Bates,\
    \ E. Gerich, J. Joncharay, J-M. Jouanigot, D. Karrenberg,\n       M.  Terpstra,\
    \ and J. Yu. Representation of IP Routing Policies in\n       a Routing Registry,\
    \ Technical Report ripe-181, RIPE, RIPE NCC,\n       Amsterdam, Netherlands, October\
    \ 1994.\n   [4] A. M. R. Magee. RIPE NCC Database Documentation. Technical Report\n\
    \       RIPE-157, RIPE NCC, Amsterdam, Netherlands, May 1997.\n   [5] Hank Nussbacher.\
    \ The CIDR FAQ. Tel Aviv University and IBM\n       Israel.  http://www.ibm.net.il/~hank/cidr.html\n\
    \   [6] The RAToolSet. http://www.ra.net/ra/RAToolSet/\n   [7] Rekhter Y. and\
    \ T. Li, \"A Border Gateway Protocol 4 (BGP-4)\", RFC\n       1654, July 1994.\n\
    \   [8] RtConfig as part of the RAToolSet.\n       http://www.ra.net/ra/RAToolSet/RtConfig.html\n\
    \   [9] Chen, E. and T. Bates, \"An Application of the BGP Community\n       Attribute\
    \ in Multi-Home Routing\", RFC 1998, August 1996.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   David Meyer\n   Cisco Systems\n   EMail: dmm@cisco.com\n\
    \   Joachim Schmitz\n   America On-Line\n   EMail: SchmitzJo@aol.com\n   Carol\
    \ Orange\n   RIPE NCC\n   EMail: orange@spiritone.com\n   Mark Prior\n   connect.com.au\
    \ pty ltd\n   EMail: mrp@connect.com.au\n   Cengiz Alaettinoglu\n   USC/Information\
    \ Sciences Institute\n   EMail: cengiz@isi.edu\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (1999).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
