- title: __initial_text__
  contents:
  - '              INTERACTIVE MAIL ACCESS PROTOCOL - VERSION 2

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This RFC suggests a method for personal computers and\
    \ workstations to\n   dynamically access mail from a mailbox server (\"repository\"\
    ).  It\n   obosoletes RFC 1064.  This RFC specifies an Experimental Protocol for\n\
    \   the Internet community.  Discussion and suggestions for improvement\n   are\
    \ requested.  Please refer to the current edition of the \"IAB\n   Official Protocol\
    \ Standards\" for the standardization state and status\n   of this protocol. \
    \ Distribution of this memo is unlimited.\n"
- title: Introduction
  contents:
  - "Introduction\n   The intent of the Interactive Mail Access Protocol, Version\
    \ 2 (IMAP2)\n   is to allow a workstation, personal computer, or similar small\n\
    \   machine to access electronic mail from a mailbox server.  Since the\n   distinction\
    \ between personal computers and workstations is blurring\n   over time, it is\
    \ desirable to have a single solution that addresses\n   the need in a general\
    \ fashion.  IMAP2 is the \"glue\" of a distributed\n   electronic mail system\
    \ consisting of a family of client and server\n   implementations on a wide variety\
    \ of platforms, from small single-\n   tasking personal computing engines to complex\
    \ multi-user timesharing\n   systems.\n   Although different in many ways from\
    \ the Post Office Protocols (POP2\n   and POP3, hereafter referred to collectively\
    \ as \"POP\") described in\n   RFC 937 and RFC 1081, IMAP2 may be thought of as\
    \ a functional\n   superset of these.  RFC 937 was used as a model for this RFC.\
    \  There\n   was a cognizant reason for this; POP deals with a similar problem,\n\
    \   albeit with a less comprehensive solution, and it was desirable to\n   offer\
    \ a basis for comparison.\n   Like POP, IMAP2 specifies a means of accessing stored\
    \ mail and not of\n   posting mail; this function is handled by a mail transfer\
    \ protocol\n   such as SMTP (RFC 821).\n   This protocol assumes a reliable data\
    \ stream such as provided by TCP\n   or any similar protocol.  When TCP is used,\
    \ the IMAP2 server listens\n   on port 143.\n"
- title: System Model and Philosophy
  contents:
  - "System Model and Philosophy\n   Electronic mail is a primary means of communication\
    \ for the widely\n   spread Internet community.  The advent of distributed personal\n\
    \   computers and workstations has forced a significant rethinking of the\n  \
    \ mechanisms employed to manage electronic mail.  With mainframes, each\n   user\
    \ tends to receive and process mail at the computer he uses most\n   of the time,\
    \ his \"primary host\".  The first inclination of many users\n   when an independent\
    \ workstation is placed in front of them is to\n   begin receiving mail at the\
    \ workstation, and many vendors have\n   implemented facilities to do this.  However,\
    \ this approach has\n   several disadvantages:\n      (1) Personal computers and\
    \ many workstations have a software\n      design that gives full control of all\
    \ aspects of the system to the\n      user at the console.  As a result, background\
    \ tasks such as\n      receiving mail may not run for long periods of time; either\n\
    \      because the user is asking to use all the machine's resources, or\n   \
    \   because the user has (perhaps accidentally) manipulated the\n      environment\
    \ in such a way that it prevents mail reception.  In\n      many personal computers,\
    \ the operating system is single-tasking\n      and this is the only mode of operation.\
    \  Any of these conditions\n      could lead to repeated failed delivery attempts\
    \ by outside agents.\n      (2) The hardware failure of a single machine can keep\
    \ its user\n      \"off the air\" for a considerable time, since repair of individual\n\
    \      units may be delayed.  Given the growing number of personal\n      computers\
    \ and workstations spread throughout office environments,\n      quick repair\
    \ of such systems is not assured.  On the other hand, a\n      central mainframe\
    \ is generally repaired soon after failure.\n      (3) Personal computers and\
    \ workstations are often not backed up\n      with as much diligence as a central\
    \ mainframe, if at all.\n      (4) It is more difficult to keep track of mailing\
    \ addresses when\n      each person is associated with a distinct machine.  Consider\
    \ the\n      difficulty in keeping track of many postal addresses or phone\n \
    \     numbers, particularly if there was no single address or phone\n      number\
    \ for an organization through which you could reach any\n      person in that\
    \ organization.  Traditionally, electronic mail on\n      the ARPANET involved\
    \ remembering a name and one of several \"hosts\"\n      (machines) whose name\
    \ reflected the organization in which the\n      individual worked.  This was\
    \ suitable at a time when most\n      organizations had only one central host.\
    \  It is less satisfactory\n      today unless the concept of a host is changed\
    \ to refer to an\n      organizational entity and not a particular machine.\n\
    \      (5) It is difficult to keep a multitude of heterogeneous machines\n   \
    \   working properly with complex mailing protocols, making it\n      difficult\
    \ to move forward as progress is made in electronic\n      communication and as\
    \ new standards emerge.  Each system has to\n      worry about receiving incoming\
    \ mail, routing and delivering\n      outgoing mail, formatting, storing, and\
    \ providing for the\n      stability of mailboxes over a variety of possible filing\
    \ and\n      mailing protocols.\n   Consequently, while a personal computer or\
    \ workstation may be viewed\n   as an Internet host in the sense that it implements\
    \ TCP/IP, it should\n   not be viewed as the entity that contains the user's mailbox.\n\
    \   Instead, a mail server machine (\"server\", sometimes called a\n   \"repository\"\
    ) should hold the mailbox, and the personal computer or\n   workstation (hereafter\
    \ referred to as a \"client\") should access the\n   mailbox via mail transactions.\n\
    \   Because the mail server machine is isolated from direct user\n   manipulation,\
    \ it should achieve high software reliability easily,\n   and, as a shared resource,\
    \ it should also achieve high hardware\n   reliability, perhaps through redundancy.\
    \  The mail server may be\n   accessed from arbitrary locations, allowing users\
    \ to read mail across\n   campus, town, or country using commonly available clients.\n\
    \   Furthermore, the same user may access his mailbox from different\n   clients\
    \ at different times, and multiple users may access the same\n   mailbox simultaneously.\n\
    \   The mail server acts an an interface among users, data storage, and\n   other\
    \ mailers.  A mail access protocol retrieves messages, accesss\n   and changes\
    \ properties of messages, and otherwise manages mailboxes.\n   This differs from\
    \ some approaches (e.g., Unix mail via NFS) in that\n   the mail access protocol\
    \ is used for all message manipulations,\n   isolating the user and the client\
    \ from all knowledge of how the data\n   storage is used.  This means that the\
    \ mail server can use the data\n   storage in whatever way is most efficient to\
    \ organize the mail in\n   that particular environment, without having to worry\
    \ about storage\n   representation compatibility across different machines.\n\
    \   A mail access protocol further differs in that it transmits\n   information\
    \ only on demand.  A well-designed mail access protocol\n   requires considerably\
    \ less network traffic than Unix mail via NFS,\n   particularly when the mail\
    \ file is large.  The result is that a mail\n   access protocol can scale well\
    \ to situations of large mailboxes or\n   networks with high latency or low speed.\n\
    \   In defining a mail access protocol, it is important to keep in mind\n   that\
    \ the client and server form a macrosystem, in which it should be\n   possible\
    \ to exploit the strong points of both while compensating for\n   each other's\
    \ weaknesses.  Furthermore, it is desirable to allow for a\n   growth path beyond\
    \ the hoary text-only RFC 822 protocol, specifically\n   in the area of attachments\
    \ and multi-media mail, to ease the eventual\n   transition to ISO solutions.\n\
    \   Unlike POP, IMAP2 has extensive features for remote searching and\n   parsing\
    \ of messages on the server.  A free text search (optionally\n   with other searching)\
    \ can be made in the entire mailbox by the server\n   and the results made available\
    \ to the client without the client\n   having to transfer the entire mailbox and\
    \ searching itself.  Since\n   remote parsing of a message into a structured (and\
    \ standard format)\n   \"envelope\" is available, a client can display envelope\
    \ information\n   and implement commands such as REPLY without having any understanding\n\
    \   of how to parse RFC 822, etc. headers.  The effect of this is\n   twofold:\
    \ it further improves the ability to scale well in instances\n   where network\
    \ traffic must be reduced, and it reduces the complexity\n   of the client program.\n\
    \   Additionally, IMAP2 offers several facilities for managing individual\n  \
    \ message state and the mailbox as a whole beyond the simple \"delete\n   message\"\
    \ functionality of POP.  Another benefit of IMAP2 is the use\n   of tagged responses\
    \ to reduce the possibility of synchronization\n   errors and the concept of state\
    \ on the client (a \"local cache\") that\n   the server may update without explicit\
    \ request by the client.  These\n   concepts and how they are used are explained\
    \ under \"Implementation\n   Discussion\" below.\n   In spite of this functional\
    \ richness, IMAP2 is a small protocol.\n   Although servers should implement the\
    \ full set of IMAP2 functions, a\n   simple client can be written that uses IMAP2\
    \ in much the way as a POP\n   client.\n   A related protocol to POP and IMAP2\
    \ is the DMSP protocol of PCMAIL\n   (RFC 1056).  IMAP2 differs from DMSP more\
    \ fundamentally, reflecting a\n   differing architecture from PCMAIL.  PCMAIL\
    \ is either an online\n   (\"interactive mode\"), or offline (\"batch mode\")\
    \ system with long-term\n   shared state.  Some POP based systems are also offline;\
    \ in such\n   systems, since there is no long-term shared state POP is little\
    \ more\n   than a download mechanism of the \"mail file\" to the client.  IMAP2-\n\
    \   based software is primarily an online system in which real-time and\n   simultaneous\
    \ mail access were considered important.\n   In PCMAIL, there is a long-term client/server\
    \ relationship in which\n   some mailbox state is preserved on the client.  There\
    \ is a\n   registration of clients used by a particular user, and the client\n\
    \   keeps a set of \"descriptors\" for each message that summarize the\n   message.\
    \  The server and client synchronize their states when the\n   DMSP connection\
    \ starts up, and, if a client has not accessed the\n   server for a while, the\
    \ client does a complete reset (reload) of its\n   state from the server.\n  \
    \ In IMAP2-based software, the client/server relationship lasts only\n   for the\
    \ duration of the TCP connection.  All mailbox state is\n   maintained on the\
    \ server.  There is no registration of clients.  The\n   function of a descriptor\
    \ is handled by a structured representation of\n   the message \"envelope\" as\
    \ noted above.  There is no client/server\n   synchronization since the client\
    \ does not remember state between\n   IMAP2 connections.  This is not a problem\
    \ since in general the client\n   never needs the entire state of the mailbox\
    \ in a single session,\n   therefore there isn't much overhead in fetching the\
    \ state information\n   that is needed as it is needed.\n   There are also some\
    \ functional differences between IMAP2 and DMSP.\n   DMSP has functions for sending\
    \ messages, printing messages, listing\n   mailboxes, and changing passwords;\
    \ these are done outside IMAP2.\n   DMSP has 16 binary flags of which 8 are defined\
    \ by the system.  IMAP2\n   has flag names; there are currently 5 defined system\
    \ flag names and a\n   facility for some number (30 in the current implementations)\
    \ of user\n   flag names.  IMAP2 has a sophisticated message search facility in\
    \ the\n   server to identify interesting messages based on dates, addresses,\n\
    \   flag status, or textual contents without compelling the client to\n   fetch\
    \ this data for every message.\n   It was felt that maintaining state on the client\
    \ is advantageous only\n   in those cases where the client is only used by a single\
    \ user, or if\n   there is some means on the client to restrict access to another\n\
    \   user's data.  It can be a serious disadvantage in an environment in\n   which\
    \ multiple users routinely use the same client, the same user\n   routinely uses\
    \ different clients, and where there are no access\n   restrictions on the client.\
    \  It was also observed that most user mail\n   access is to a small set of \"\
    interesting\" messages, which were either\n   new mail or mail based on some user-selected\
    \ criteria.  Consequently,\n   IMAP2 was designed to easily identify those \"\
    interesting\" messages so\n   that the client could fetch the state of those messages\
    \ and not those\n   that were not \"interesting\".\n"
- title: The Protocol
  contents:
  - "The Protocol\n   The IMAP2 protocol consists of a sequence of client commands\
    \ and\n   server responses, with server data interspersed between the\n   responses.\
    \  Unlike most Internet protocols, commands and responses\n   are tagged.  That\
    \ is, a command begins with a unique identifier\n   (typically a short alphanumeric\
    \ sequence such as a Lisp \"gensym\"\n   function would generate e.g., A0001,\
    \ A0002, etc.), called a tag.  The\n   response to this command is given the same\
    \ tag from the server.\n   Additionally, the server may send an arbitrary amount\
    \ of \"unsolicited\n   data\", which is identified by the special reserved tag\
    \ of \"*\".  There\n   is another special reserved tag, \"+\", discussed below.\n\
    \   The server must be listening for a connection.  When a connection is\n   opened\
    \ the server sends an unsolicited OK response as a greeting\n   message and then\
    \ waits for commands.\n   The client opens a connection and waits for the greeting.\
    \  The client\n   must not send any commands until it has received the greeting\
    \ from\n   the server.\n   Once the greeting has been received, the client may\
    \ begin sending\n   commands and is not under any obligation to wait for a server\n\
    \   response to this command before sending another command, within the\n   constraints\
    \ of TCP flow control.  When commands are received the\n   server acts on them\
    \ and responds with command responses, often\n   interspersed with data.  The\
    \ effect of a command can not be\n   considered complete until a command response\
    \ with a tag matching the\n   command is received from the server.\n   Although\
    \ all known IMAP2 servers at the time of this writing process\n   commands to\
    \ completion before processing the next command, it is not\n   required that a\
    \ server do so.  However, many commands can affect the\n   results of other commands,\
    \ creating processing-order dependencies\n   (or, for SEARCH and FIND, ambiguities\
    \ about which data is associated\n   with which command).  All implementations\
    \ that operate in a non-\n   lockstep fashion must recognize such dependencies\
    \ and defer or\n   synchronize execution as necessary.  In general, such multi-\n\
    \   processing is limited to consecutive FETCH commands.\n   Generally, the first\
    \ command from the client is a LOGIN command with\n   user name and password arguments\
    \ to establish identity and access\n   authorization, unless this has already\
    \ been accomplished through\n   other means, e.g. Kerberos.  Until identity and\
    \ access authorization\n   have been established, no operations other than LOGIN\
    \ or LOGOUT are\n   permitted.\n   Once identity and authorization have been established,\
    \ the client\n   must send a SELECT command to access the desired mailbox; no\
    \ mailbox\n   is selected by default.  SELECT's argument is implementation-\n\
    \   dependent; however the word \"INBOX\" must be implemented to mean the\n  \
    \ primary or default mailbox for this user, independent of any other\n   server\
    \ semantics.  On a successful SELECT, the server will send a\n   list of valid\
    \ flags, number of messages, and number of messages\n   arrived since last access\
    \ for this mailbox as unsolicited data,\n   followed by an OK response.  The client\
    \ may terminate access to this\n   mailbox and access a different one with another\
    \ SELECT command.\n   The client reads mailbox information with FETCH commands.\
    \  The actual\n   data is transmitted via the unsolicited data mechanism (that\
    \ is,\n   FETCH should be viewed as instructing the server to include the\n  \
    \ desired data along with any other data it wishes to transmit to the\n   client).\
    \  There are three major categories of data that may be\n   fetched.\n   The first\
    \ category is data that is associated with a message as an\n   entity in the mailbox.\
    \  There are now three such items of data: the\n   \"internal date\", the \"RFC\
    \ 822 size\", and the \"flags\".  The internal\n   date is the date and time that\
    \ the message was placed in the mailbox.\n   The RFC 822 size is subject to deletion\
    \ in the future; it is the size\n   in bytes of the message, expressed as an RFC\
    \ 822 text string.\n   Current clients only use it as part of a status display\
    \ line.  The\n   flags are a list of status flags associated with the message\
    \ (see\n   below).  All the first category data can be fetched by using the\n\
    \   macro-fetch word \"FAST\"; that is, \"FAST\" expands to \"(FLAGS\n   INTERNALDATE\
    \ RFC822.SIZE)\".\n   The second category is that data that describes the composition\
    \ and\n   delivery information of a message; that is, information such as the\n\
    \   message sender, recipient lists, message-ID, subject, etc.  This is\n   the\
    \ information that is stored in the message header in RFC 822\n   format message\
    \ and is traditionally called the \"envelope\".  [Note:\n   this should not be\
    \ confused with the SMTP (RFC 821) envelope, which\n   is strictly limited to\
    \ delivery information.]  IMAP2 defines a\n   structured and unambiguous representation\
    \ for the envelope that is\n   particularly suited for Lisp-based parsers.  A\
    \ client can use the\n   envelope for operations such as replying and not worry\
    \ about RFC 822\n   at all.  Envelopes are discussed in more detail below.  The\
    \ first two\n   categories of data can be fetched together by using the macro-fetch\n\
    \   word \"ALL\"; that is, \"ALL\" expands to \"(FLAGS INTERNALDATE\n   RFC822.SIZE\
    \ ENVELOPE)\".\n   The third category is that data that is intended for direct\
    \ human\n   viewing.  The present RFC 822 based IMAP2 defines three such items:\n\
    \   RFC822.HEADER, RFC822.TEXT, and RFC822 (the latter being the two\n   former\
    \ appended together in a single text string).  RFC822.HEADER is\n   the \"raw\"\
    , unprocessed RFC 822 format header of the message.\n   Fetching \"RFC822\" is\
    \ equivalent to fetching the RFC 822\n   representation of the message as stored\
    \ on the mailbox without any\n   filtering or processing.\n   An intelligent client\
    \ will \"FETCH ALL\" for some (or all) of the\n   messages in the mailbox for\
    \ use as a presentation menu, and when the\n   user wishes to read a particular\
    \ message will \"FETCH RFC822.TEXT\" to\n   get the message body.  A more primitive\
    \ client could, of course,\n   simply \"FETCH RFC822\" a`la POP-type functionality.\n\
    \   The client can alter certain data (currently only the flags) by a\n   STORE\
    \ command.  As an example, a message is deleted from a mailbox by\n   a STORE\
    \ command that includes the \\DELETED flag as a flag being set.\n   Other client\
    \ operations include copying a message to another mailbox\n   (COPY command),\
    \ permanently removing deleted messages (EXPUNGE\n   command), checking for new\
    \ messages (CHECK command), and searching\n   for messages that match certain\
    \ criteria (SEARCH command).\n   The client terminates the session with the LOGOUT\
    \ command.  The\n   server returns a \"BYE\" followed by an \"OK\".\n   A Typical\
    \ Scenario\n           Client                          Server\n           ------\
    \                          ------\n                                       {Wait\
    \ for Connection}\n       {Open Connection}        -->\n                     \
    \              <-- * OK IMAP2 Server Ready\n                                 \
    \      {Wait for command}\n       A001 LOGIN Fred Secret   -->\n             \
    \                      <-- A001 OK User Fred logged in\n                     \
    \                  {Wait for command}\n       A002 SELECT INBOX        -->\n \
    \                                  <-- * FLAGS (Meeting Notice \\Answered\n  \
    \                                              \\Flagged \\Deleted \\Seen)\n \
    \                                  <-- * 19 EXISTS\n                         \
    \          <-- * 2 RECENT\n                                   <-- A0002 OK Select\
    \ complete\n                                       {Wait for command}\n      \
    \ A003 FETCH 1:19 ALL      -->\n                                   <-- * 1 Fetch\
    \ (......)\n                                           ...\n                 \
    \                  <-- * 18 Fetch (......)\n                                 \
    \  <-- * 19 Fetch (......)\n                                   <-- A003 OK Fetch\
    \ complete\n                                       {Wait for command}\n      \
    \ A004 FETCH 8 RFC822.TEXT -->\n                                   <-- * 8 Fetch\
    \ (RFC822.TEXT {893}\n                                           ...893 characters\
    \ of text...\n                                   <-- )\n                     \
    \              <-- A004 OK Fetch complete\n                                  \
    \     {Wait for command}\n       A005 STORE 8 +Flags \\Deleted -->\n         \
    \                          <-- * 8 Store (Flags (\\Deleted\n                 \
    \                                 \\Seen))\n                                 \
    \  <-- A005 OK Store complete\n                                       {Wait for\
    \ command}\n       A006 EXPUNGE             -->\n                            \
    \       <-- * 19 EXISTS\n                                   <-- * 8 EXPUNGE\n\
    \                                   <-- * 18 EXISTS\n                        \
    \           <-- A006 Expunge complete\n                                      \
    \ {Wait for command}\n       A007 LOGOUT              -->\n                  \
    \                 <-- * BYE IMAP2 server quitting\n                          \
    \         <-- A007 OK Logout complete\n       {Close Connection}       --><--\
    \ {Close connection}\n                                       {Go back to start}\n"
- title: Conventions
  contents:
  - "Conventions\n   The following terms are used in a meta-sense in the syntax\n\
    \   specification below:\n      An ASCII-STRING is a sequence of arbitrary ASCII\
    \ characters.\n      An ATOM is a sequence of ASCII characters delimited by SP\
    \ or CRLF.\n      A CHARACTER is any ASCII character except \"\"\"\", \"{\", CR,\
    \ LF, \"%\",\n      or \"\\\".\n      A CRLF is an ASCII carriage-return character\
    \ followed immediately\n      by an ASCII linefeed character.\n      A NUMBER\
    \ is a sequence of the ASCII characters that represent\n      decimal numerals\
    \ (\"0\" through \"9\"), delimited by SP, CRLF, \",\", or\n      \":\".\n    \
    \  A SP is the ASCII space character.\n      A TEXT_LINE is a human-readable sequence\
    \ of ASCII characters up to\n      but not including a terminating CRLF.\n   A\
    \ common field in the IMAP2 protocol is a STRING, which may be an\n   ATOM, QUOTED-STRING\
    \ (a sequence of CHARACTERs inside double-quotes),\n   or a LITERAL.  A literal\
    \ consists of an open brace (\"{\"), a number, a\n   close brace (\"}\"), a CRLF,\
    \ and then an ASCII-STRING of n characters,\n   where n is the value of the number\
    \ inside the brace.  In general, a\n   string should be represented as an ATOM\
    \ or QUOTED-STRING if at all\n   possible.  The semantics for QUOTED-STRING or\
    \ LITERAL are checked\n   before those for ATOM; therefore an ATOM used in a STRING\
    \ may only\n   contain CHARACTERs.  Literals are most often sent from the server\
    \ to\n   the client; in the rare case of a client to server literal there is a\n\
    \   special consideration (see the \"+ text\" response below).\n   Another important\
    \ field is the SEQUENCE, which identifies a set of\n   messages by consecutive\
    \ numbers from 1 to n where n is the number of\n   messages in the mailbox.  A\
    \ sequence may consist of a single number,\n   a pair of numbers delimited by\
    \ colon (equivalent to all numbers\n   between those two numbers), or a list of\
    \ single numbers or number\n   pairs.  For example, the sequence 2,4:7,9,12:15\
    \ is equivalent to\n   2,4,5,6,7,9,12,13,14,15 and identifies all those messages.\n"
- title: Definitions of Commands and Responses
  contents:
  - "Definitions of Commands and Responses\n     Summary of Commands and Responses\n\
    \       Commands                            ||      Responses\n       --------\
    \                            ||      -------\n       tag NOOP                \
    \            ||      tag OK text\n       tag LOGIN user password             ||\
    \      tag NO text\n       tag LOGOUT                          ||      tag BAD\
    \ text\n       tag SELECT mailbox                  ||      * number message_data\n\
    \       tag BBOARD bulletin_board           ||      * FLAGS flag_list\n      \
    \ tag FIND MAILBOXES pattern          ||      * SEARCH sequence\n       tag FIND\
    \ BBOARDS pattern            ||      * BBOARD string\n       tag CHECK       \
    \                    ||      * MAILBOX string\n       tag EXPUNGE            \
    \             ||      * BYE text\n       tag COPY sequence mailbox           ||\
    \      * OK text\n       tag FETCH sequence data             ||      * NO text\n\
    \       tag STORE sequence data value       ||      * BAD text\n       tag SEARCH\
    \ search_program           ||      + text\n"
- title: Commands
  contents:
  - "Commands\n   tag NOOP\n      The NOOP command returns an OK to the client.  By\
    \ itself, it does\n      nothing, but certain things may happen as side effects.\
    \  For\n      example, server implementations that implicitly check the mailbox\n\
    \      for new mail may do so as a result of this command.  The primary\n    \
    \  use of this command is to for the client to see if the server is\n      still\
    \ alive (and notify the server that the client is still alive,\n      for those\
    \ servers that have inactivity autologout timers).\n   tag LOGIN user password\n\
    \      The LOGIN command identifies the user to the server and carries\n     \
    \ the password authenticating this user.  This information is used\n      by the\
    \ server to control access to the mailboxes.\n      EXAMPLE:  A001 LOGIN SMITH\
    \ SESAME\n      logs in as user SMITH with password SESAME.\n   tag LOGOUT\n \
    \     The LOGOUT command informs the server that the client is done with\n   \
    \   the session.  The server should send an unsolicited BYE response\n      before\
    \ the (tagged) OK response, and then close the network\n      connection.\n  \
    \ tag SELECT mailbox\n      The SELECT command selects a particular mailbox. \
    \ The server must\n      check that the user is permitted read access to this\
    \ mailbox.\n      Before returning an OK to the client, the server must send the\n\
    \      following unsolicited data to the client:\n         FLAGS        mailbox's\
    \ defined flags\n         <n> EXISTS   the number of messages in the mailbox\n\
    \         <n> RECENT   the number of new messages in the mailbox\n      in order\
    \ to define the initial state of the mailbox at the client.\n      Multiple SELECT\
    \ commands are permitted in a session, in which case\n      the previous mailbox\
    \ is automatically deselected when a new SELECT\n      is made.\n      The default\
    \ mailbox for the SELECT command is INBOX, which is a\n      special name reserved\
    \ to mean \"the primary mailbox for this user\n      on this server\".  The format\
    \ of other mailbox names is operating\n      system dependent (as of this writing,\
    \ it reflects the filename\n      path of the mailbox file on the current servers).\n\
    \      It is customary, although not required, for the text of an OK\n      response\
    \ to the SELECT command to begin with either \"[READ-ONLY]\"\n      or \"[READ-WRITE]\"\
    \ to show the mailbox's access status.\n      EXAMPLE: A002 SELECT INBOX\n   \
    \   selects the default mailbox.\n   tag BBOARD bulletin_board\n      The BBOARD\
    \ command is equivalent to SELECT, and returns the same\n      output.  However,\
    \ it differs from SELECT in that its argument is a\n      shared mailbox (bulletin\
    \ board) name instead of an ordinary\n      mailbox.  The format of a bulletin\
    \ name is implementation\n      specific, although it is strongly encouraged to\
    \ use something that\n      resembles a name in a generic sense and not a file\
    \ or mailbox name\n      on the particular system.  There is no requirement that\
    \ a bulletin\n      board name be a mailbox name or a file name (in particular,\
    \ Unix\n      netnews has a completely different namespace from mailbox or file\n\
    \      names).\n      Support for BBOARD is optional.\n   tag FIND MAILBOXES pattern\n\
    \      The FIND MAILBOXES command accepts as an argument a pattern\n      (including\
    \ wildcards) that specifies some set of mailbox names\n      that are usable by\
    \ the SELECT command.  The format of mailboxes is\n      implementation dependent.\
    \  The special mailbox name INBOX is not\n      included in the output.\n    \
    \  Two wildcard characters are defined; \"*\" specifies any number\n      (including\
    \ zero) characters may match at this position and \"%\"\n      specifies a single\
    \ character may match at this position.  For\n      example, FOO*BAR will match\
    \ FOOBAR, FOOD.ON.THE.BAR and FOO.BAR,\n      whereas FOO%BAR will match only\
    \ FOO.BAR.  \"*\" will match all\n      mailboxes.\n      The FIND MAILBOXES command\
    \ will return some set of unsolicited\n      MAILBOX replies that have as their\
    \ value a single mailbox name.\n      EXAMPLE:  A002 FIND MAILBOXES *\n      \
    \          * MAILBOX FOOBAR\n                * MAILBOX GENERAL\n             \
    \   A002 FIND completed\n      Although the use of explicit file or path names\
    \ for mailboxes is\n      discouraged by this standard, it may be unavoidable.\
    \  It is\n      important that the value returned in the MAILBOX unsolicited reply\n\
    \      be usable in the SELECT command without remembering any path\n      specification\
    \ that may have been used in the FIND MAILBOXES\n      pattern.\n      Support\
    \ for FIND MAILBOXES is optional.  If a client's attempt\n      returns BAD as\
    \ a response then the client can make no assumptions\n      about what mailboxes\
    \ exist on the server other than INBOX.\n   tag FIND BBOARDS pattern\n      The\
    \ FIND BBOARDS command accepts as an argument a pattern that\n      specifies\
    \ some set of bulletin board names that are usable by the\n      BBOARD command.\
    \  Wildcards are permitted as in FIND MAILBOXES.\n      The FIND BBOARDS command\
    \ will return some set of unsolicited\n      BBOARD replies that have as their\
    \ value a single bulletin board\n      name.\n      EXAMPLE:  A002 FIND BBOARDS\
    \ *\n                * BBOARD FOOBAR\n                * BBOARD GENERAL\n     \
    \           A002 FIND completed\n      Support for FIND BBOARDS is optional. \
    \ If a client's attempt\n      returns BAD as a response then the client can make\
    \ no assumptions\n      about what bulletin boards exist on the server, or that\
    \ they exist\n      at all.\n   tag CHECK\n      The CHECK command forces a check\
    \ for new messages and a rescan of\n      the mailbox for internal change for\
    \ those implementations that\n      allow multiple simultaneous read/write access\
    \ to the same mailbox.\n      It is recommend that periodic implicit checks for\
    \ new mail be done\n      by servers as well.  The server should send unsolicited\
    \ EXISTS and\n      RECENT responses with the current status before returning\
    \ an OK to\n      the client.\n   tag EXPUNGE\n      The EXPUNGE command permanently\
    \ removes all messages with the\n      \\DELETED flag set in its flags from the\
    \ mailbox.  Before returning\n      an OK to the client, for each message that\
    \ is removed, an\n      unsolicited EXPUNGE response is sent.  The message number\
    \ for each\n      successive message in the mailbox is immediately decremented\
    \ by 1;\n      this means that if the last 5 messages in a 9-message mail file\n\
    \      are expunged you will receive 5 unsolicited EXPUNGE responses for\n   \
    \   message 5.  To ensure mailbox integrity and server/client\n      synchronization,\
    \ it is recommended that the server do an implicit\n      check before commencing\
    \ the expunge and again when the expunge is\n      completed.  Furthermore, if\
    \ the server allows multiple\n      simultaneous access to the same mail file\
    \ the server must lock the\n      mail file for exclusive access while an expunge\
    \ is taking place.\n      EXPUNGE is not allowed if the user does not have write\
    \ access to\n      this mailbox.\n   tag COPY sequence mailbox\n      The COPY\
    \ command copies the specified message(s) to the specified\n      destination\
    \ mailbox.  If the destination mailbox does not exist,\n      the server should\
    \ create it.  Before returning an OK to the\n      client, the server should return\
    \ an unsolicited <n> COPY response\n      for each message copied.  A copy should\
    \ set the \\SEEN flag for all\n      messages that were successfully copied (provided,\
    \ of course, that\n      the user has write access to this mailbox).\n      EXAMPLE:\
    \  A003 COPY 2:4 MEETING\n      copies messages 2, 3, and 4 to mailbox \"MEETING\"\
    .\n      COPY is not allowed if the user does not have write access to the\n \
    \     destination mailbox.\n   tag FETCH sequence data\n      The FETCH command\
    \ retrieves data associated with a message in the\n      mailbox.  The data items\
    \ to be fetched may be either a single atom\n      or an S-expression list.  The\
    \ currently defined data items that\n      can be fetched are:\n      ALL    \
    \         Macro equivalent to:\n                      (FLAGS INTERNALDATE RFC822.SIZE\
    \ ENVELOPE)\n      ENVELOPE        The envelope of the message.  The envelope\
    \ is\n                      computed by the server by parsing the RFC 822\n  \
    \                    header into the component parts, defaulting\n           \
    \           various fields as necessary.\n      FAST            Macro equivalent\
    \ to:\n                      (FLAGS INTERNALDATE RFC822.SIZE)\n      FLAGS   \
    \        The flags that are set for this message.\n                      This\
    \ may include the following system flags:\n                              \\RECENT\
    \    Message arrived since the\n                                          previous\
    \ time this mailbox\n                                          was read\n    \
    \                          \\SEEN      Message has been read\n               \
    \               \\ANSWERED  Message has been answered\n                      \
    \        \\FLAGGED   Message is \"flagged\" for\n                            \
    \              urgent/special attention\n                              \\DELETED\
    \   Message is \"deleted\" for\n                                          removal\
    \ by later EXPUNGE\n      INTERNALDATE    The date and time the message was written\
    \ to\n                      the mailbox.\n      RFC822          The message in\
    \ RFC 822 format.  The \\SEEN\n                      flag is implicitly set; if\
    \ this causes the\n                      flags to change they should be included\
    \ as\n                      part of the fetch results.  This is the\n        \
    \              concatenation of RFC822.HEADER and RFC822.TEXT.\n      RFC822.HEADER\
    \   The \"raw\" RFC 822 format header of the message\n                      as\
    \ stored on the server.\n      RFC822.SIZE     The number of characters in the\
    \ message as\n                      expressed in RFC 822 format.\n      RFC822.TEXT\
    \     The text body of the message, omitting the\n                      RFC 822\
    \ header.  The \\SEEN flag is implicitly\n                      set as with RFC822\
    \ above.\n      EXAMPLES:\n      A003 FETCH 2:4 ALL\n         fetches the flags,\
    \ internal date, RFC 822 size, and envelope\n         for messages 2, 3, and 4.\n\
    \      A004 FETCH 3 RFC822\n         fetches the RFC 822 representation for message\
    \ 3.\n      A005 FETCH 4 (FLAGS RFC822.HEADER)\n         fetches the flags and\
    \ RFC 822 format header for message 4.\n      Note: An attempt to FETCH already-transmitted\
    \ data may have no\n      result.  See the Implementation Discussion below.\n\
    \   tag STORE sequence data value\n      The STORE command alters data associated\
    \ with a message in the\n      mailbox.  The currently defined data items that\
    \ can be stored are:\n         FLAGS           Replace the flags for the message\
    \ with the\n                         argument (in flag list format).\n       \
    \  +FLAGS          Add the flags in the argument to the\n                    \
    \     message's flag list.\n         -FLAGS          Remove the flags in the argument\
    \ from the\n                         message's flag list.\n      STORE is not\
    \ allowed if the user does not have write access to\n      this mailbox.\n   \
    \   EXAMPLE:  A003 STORE 2:4 +FLAGS (\\DELETED)\n      marks messages 2, 3, and\
    \ 4 for deletion.\n   tag SEARCH search_criteria\n      The SEARCH command searches\
    \ the mailbox for messages that match\n      the given set of criteria.  The unsolicited\
    \ SEARCH <1#number>\n      response from the server is a list of messages that\
    \ express the\n      intersection (AND function) of all the messages which match\
    \ that\n      criteria.  For example,\n              A003 SEARCH DELETED FROM\
    \ \"SMITH\" SINCE 1-OCT-87\n      returns the message numbers for all deleted\
    \ messages from Smith\n      that were placed in the mail file since October 1,\
    \ 1987.\n      In all search criteria which use strings, a message matches the\n\
    \      criteria if the string is a case-independent substring of that\n      field.\
    \  The currently defined criteria are:\n      ALL             All messages in\
    \ the mailbox; the default\n                      initial criterion for ANDing.\n\
    \      ANSWERED        Messages with the \\ANSWERED flag set.\n      BCC string\
    \      Messages which contain the specified string\n                      in the\
    \ envelope's BCC field.\n      BEFORE date     Messages whose internal date is\
    \ earlier than\n                      the specified date.\n      BODY string \
    \    Messages which contain the specified string\n                      in the\
    \ body of the message.\n      CC string       Messages which contain the specified\
    \ string\n                      in the envelope's CC field.\n      DELETED   \
    \      Messages with the \\DELETED flag set.\n      FLAGGED         Messages with\
    \ the \\FLAGGED flag set.\n      FROM string     Messages which contain the specified\
    \ string\n                      in the envelope's FROM field.\n      KEYWORD flag\
    \    Messages with the specified flag set.\n      NEW             Messages which\
    \ have the \\RECENT flag set but\n                      not the \\SEEN flag. \
    \ This is functionally\n                      equivalent to \"RECENT UNSEEN\"\
    .\n      OLD             Messages which do not have the \\RECENT flag\n      \
    \                set.\n      ON date         Messages whose internal date is the\
    \ same as\n                      the specified date.\n      RECENT          Messages\
    \ which have the \\RECENT flag set.\n      SEEN            Messages which have\
    \ the \\SEEN flag set.\n      SINCE date      Messages whose internal date is\
    \ later than\n                      the specified date.\n      SUBJECT string\
    \  Messages which contain the specified string\n                      in the envelope's\
    \ SUBJECT field.\n      TEXT string     Messages which contain the specified string.\n\
    \      TO string       Messages which contain the specified string in\n      \
    \                the envelope's TO field.\n      UNANSWERED      Messages which\
    \ do not have the \\ANSWERED flag\n                      set.\n      UNDELETED\
    \       Messages which do not have the \\DELETED flag\n                      set.\n\
    \      UNFLAGGED       Messages which do not have the \\FLAGGED flag\n       \
    \               set.\n      UNKEYWORD flag  Messages which do not have the specified\
    \ flag\n                      set.\n      UNSEEN          Messages which do not\
    \ have the \\SEEN flag set.\n"
- title: Responses
  contents:
  - "Responses\n   tag OK text\n      This response identifies successful completion\
    \ of the command with\n      that tag.  The text is a line of human-readable text\
    \ that may be\n      useful in a protocol telemetry log for debugging purposes.\n\
    \   tag NO text\n      This response identifies unsuccessful completion of the\
    \ command\n      with that tag.  The text is a line of human-readable text that\n\
    \      probably should be displayed to the user in an error report by the\n  \
    \    client.\n   tag BAD text\n      This response identifies faulty protocol\
    \ received from the client;\n      The text is a line of human-readable text that\
    \ should be recorded\n      in any telemetry as part of a bug report to the maintainer\
    \ of the\n      client.\n   * number message_data\n      This response occurs\
    \ as a result of several different commands.\n      The message_data is one of\
    \ the following:\n      EXISTS  The specified number of messages exists in the\
    \ mailbox.\n      RECENT  The specified number of messages have arrived since\
    \ the\n              previous time this mailbox was read.\n      EXPUNGE The specified\
    \ message number has been permanently\n              removed from the mailbox,\
    \ and the next message in the\n              mailbox (if any) becomes that message\
    \ number.\n      STORE data\n              Obsolete and functionally equivalent\
    \ to FETCH.\n      FETCH data\n              This is the principle means by which\
    \ data about a\n              message is returned to the client.  The data is\
    \ in a\n              Lisp-like S-expression property list form.  The current\n\
    \              properties are:\n         ENVELOPE     An S-expression format list\
    \ that describes the\n                      envelope of a message.  The envelope\
    \ is computed\n                      by the server by parsing the RFC 822 header\
    \ into\n                      the component parts, defaulting various fields\n\
    \                      as necessary.\n                      The fields of the\
    \ envelope are in the following\n                      order: date, subject, from,\
    \ sender, reply-to, to,\n                      cc, bcc, in-reply-to, and message-id.\
    \  The date,\n                      subject, in-reply-to, and message-id fields\
    \ are\n                      strings.  The from, sender, reply-to, to, cc,\n \
    \                     and bcc fields are lists of addresses.\n               \
    \       An address is an S-expression format list that\n                     \
    \ describes an electronic mail address.  The fields\n                      of\
    \ an address are in the following order:\n                      personal name,\
    \ source-route (a.k.a. the\n                      at-domain-list in SMTP), mailbox\
    \ name, and\n                      host name.\n                      Any field\
    \ of an envelope or address that is\n                      not applicable is presented\
    \ as the atom NIL.\n                      Note that the server must default the\
    \ reply-to\n                      and sender fields from the from field; a client\
    \ is\n                      not expected to know to do this.\n         FLAGS \
    \       An S-expression format list of flags that are set\n                  \
    \    for this message.  This may include the following\n                     \
    \ system flags:\n                      \\RECENT       Message arrived since the\n\
    \                                     previous time this mailbox\n           \
    \                          was read\n                      \\SEEN         Message\
    \ has been read\n                      \\ANSWERED     Message has been answered\n\
    \                      \\FLAGGED      Message is \"flagged\" for\n           \
    \                          urgent/special attention\n                      \\\
    DELETED      Message is \"deleted\" for\n                                    \
    \ removal by later EXPUNGE\n         INTERNALDATE  A string containing the date\
    \ and time the\n                       message was written to the mailbox.\n \
    \        RFC822        A string expressing the message in RFC 822\n          \
    \             format.\n         RFC822.HEADER A string expressing the RFC 822\
    \ format\n                       header of the message\n         RFC822.SIZE \
    \  A number indicating the number of\n                       characters in the\
    \ message as expressed\n                       in RFC 822 format.\n         RFC822.TEXT\
    \   A string expressing the text body of the\n                       message,\
    \ omitting the RFC 822 header.\n   * FLAGS flag_list\n      This response occurs\
    \ as a result of a SELECT command.  The flag\n      list are the list of flags\
    \ (at a minimum, the system-defined\n      flags) that are applicable for this\
    \ mailbox.  Flags other than the\n      system flags are a function of the server\
    \ implementation.\n   * SEARCH number(s)\n      This response occurs as a result\
    \ of a SEARCH command.  The\n      number(s) refer to those messages that match\
    \ the search criteria.\n      Each number is delimited by a space, e.g., \"SEARCH\
    \ 2 3 6\".\n   * BBOARD string\n      This response occurs as a result of a FIND\
    \ BBOARDS command.  The\n      string is a bulletin board name that matches the\
    \ pattern in the\n      command.\n   * MAILBOX string\n      This response occurs\
    \ as a result of a FIND MAILBOXES command.  The\n      string is a mailbox name\
    \ that matches the pattern in the command.\n   * BYE text\n      This response\
    \ identifies that the server is about to close the\n      connection.  The text\
    \ is a line of human-readable text that should\n      be displayed to the user\
    \ in a status report by the client.  This\n      may be sent as part of a normal\
    \ logout sequence, or as a panic\n      shutdown announcement by the server. \
    \ It is also used by some\n      servers as an announcement of an inactivity autologout.\n\
    \   * OK text\n      This response identifies normal operation on the server.\
    \  No\n      special action by the client is called for, however, the text\n \
    \     should be displayed to the user in some fashion.  This is\n      currently\
    \ only used by servers at startup as a greeting message to\n      show they are\
    \ ready to accept the first command.\n   * NO text\n      This response identifies\
    \ a warning from the server that does not\n      affect the overall results of\
    \ any particular request.  The text is\n      a line of human-readable text that\
    \ should be presented to the user\n      as a warning of improper operation.\n\
    \   * BAD text\n      This response identifies a serious error at the server;\
    \ it may\n      also indicate faulty protocol from the client in which a tag could\n\
    \      not be parsed.  The text is a line of human-readable text that\n      should\
    \ be presented to the user as a serious or possibly fatal\n      error.  It should\
    \ also be recorded in any telemetry as part of a\n      bug report to the maintainer\
    \ of the client and server.\n   + text\n      This response identifies that the\
    \ server is ready to accept the\n      text of a literal from the client.  Normally,\
    \ a command from the\n      client is a single text line.  If the server detects\
    \ an error in\n      the command, it can simply discard the remainder of the line.\
    \  It\n      cannot do this for commands that contain literals, since a literal\n\
    \      can be an arbitrarily long amount of text, and the server may not\n   \
    \   even be expecting a literal.  This mechanism is provided so the\n      client\
    \ knows not to send a literal until the server expects it,\n      preserving client/server\
    \ synchronization.\n      In practice, this condition is rarely encountered. \
    \ In the current\n      protocol, the only client command likely to contain a\
    \ literal is\n      the LOGIN command.  Consider a server that validates the user\n\
    \      before checking the password.  If the password contains \"funny\"\n   \
    \   characters and hence is sent as a literal, then if the user is\n      invalid\
    \ an error would occur before the password is parsed.\n      No such synchronization\
    \ protection is provided for literals sent\n      from the server to the client,\
    \ for performance reasons.  Any\n      synchronization problems in this direction\
    \ would be caused by a\n      bug in the client or server.\n"
- title: Sample IMAP2 session
  contents:
  - "Sample IMAP2 session\n   The following is a transcript of an IMAP2 session. \
    \ Server output is\n   identified by \"S:\" and client output by \"U:\".  In cases\
    \ where lines\n   are too long to fit within the boundaries of this document,\
    \ the line\n   is continued on the next line.\n   S:   * OK SUMEX-AIM.Stanford.EDU\
    \ Interim Mail Access Protocol II Service\n         6.1(349) at Thu, 9 Jun 88\
    \ 14:58:30 PDT\n   U:   a001 login crispin secret\n   S:   a002 OK User CRISPIN\
    \ logged in at Thu, 9 Jun 88 14:58:42 PDT, job 76\n   U:   a002 select inbox\n\
    \   S:   * FLAGS (Bugs SF Party Skating Meeting Flames Request AI Question\n \
    \        Note \\XXXX \\YYYY \\Answered \\Flagged \\Deleted \\Seen)\n   S:   *\
    \ 16 EXISTS\n   S:   * 0 RECENT\n   S:   a002 OK Select complete\n   U:   a003\
    \ fetch 16 all\n   S:   * 16 Fetch (Flags (\\Seen) InternalDate \" 9-Jun-88 12:55:44\
    \ PDT\"\n         RFC822.Size 637 Envelope (\"Sat, 4 Jun 88 13:27:11 PDT\"\n \
    \        \"INFO-MAC Mail Message\" ((\"Larry Fagan\" NIL \"FAGAN\"\n         \"\
    SUMEX-AIM.Stanford.EDU\")) ((\"Larry Fagan\" NIL \"FAGAN\"\n         \"SUMEX-AIM.Stanford.EDU\"\
    )) ((\"Larry Fagan\" NIL \"FAGAN\"\n         \"SUMEX-AIM.Stanford.EDU\")) ((NIL\
    \ NIL \"rindflEISCH\"\n         \"SUMEX-AIM.Stanford.EDU\")) NIL NIL NIL\n   \
    \      \"<12403828905.13.FAGAN@SUMEX-AIM.Stanford.EDU>\"))\n   S:   a003 OK Fetch\
    \ completed\n   U:   a004 fetch 16 rfc822\n   S:   * 16 Fetch (RFC822 {637}\n\
    \   S:   Mail-From: RINDFLEISCH created at  9-Jun-88 12:55:43\n   S:   Mail-From:\
    \ FAGAN created at  4-Jun-88 13:27:12\n   S:   Date: Sat, 4 Jun 88 13:27:11 PDT\n\
    \   S:   From: Larry Fagan  <FAGAN@SUMEX-AIM.Stanford.EDU>\n   S:   To: rindflEISCH@SUMEX-AIM.Stanford.EDU\n\
    \   S:   Subject: INFO-MAC Mail Message\n   S:   Message-ID: <12403828905.13.FAGAN@SUMEX-AIM.Stanford.EDU>\n\
    \   S:   ReSent-Date: Thu, 9 Jun 88 12:55:43 PDT\n   S:   ReSent-From: TC Rindfleisch\
    \ <Rindfleisch@SUMEX-AIM.Stanford.EDU>\n   S:   ReSent-To: Yeager@SUMEX-AIM.Stanford.EDU,\n\
    \         Crispin@SUMEX-AIM.Stanford.EDU\n   S:   ReSent-Message-ID:\n       \
    \  <12405133897.80.RINDFLEISCH@SUMEX-AIM.Stanford.EDU>\n   S:\n   S:   The file\
    \ is <info-mac>usenetv4-55.arc  ...\n   S:   Larry\n   S:   -------\n   S:   )\n\
    \   S:   a004 OK Fetch completed\n   U:   a005 logout\n   S:   * BYE DEC-20 IMAP\
    \ II server terminating connection\n   S:   a005 OK SUMEX-AIM.Stanford.EDU Interim\
    \ Mail Access Protocol\n         Service logout\n"
- title: Implementation Discussion
  contents:
  - "Implementation Discussion\n   There are several advantages to the scheme of tags\
    \ and unsolicited\n   responses.  First, the infamous synchronization problems\
    \ of SMTP and\n   similar protocols do not happen with tagged commands; a command\
    \ is\n   not considered satisfied until a response with the same tag is seen.\n\
    \   Tagging allows an arbitrary amount of other responses (\"unsolicited\"\n \
    \  data) to be sent by the server with no possibility of the client\n   losing\
    \ synchronization.  Compare this with the problems that FTP or\n   SMTP clients\
    \ have with continuation, partial completion, and\n   commentary reply codes.\n\
    \   Another advantage is that a non-lockstep client implementation is\n   possible.\
    \  The client could send a command, and entrust the handling\n   of the server\
    \ responses to a different process that would signal the\n   client when the tagged\
    \ response comes in.  Under certain\n   circumstances, the client may have more\
    \ than one command outstanding.\n   It was observed that synchronization problems\
    \ can occur with literals\n   if the literal is not recognized as such.  Fortunately,\
    \ the cases in\n   which this can happen are rare; a mechanism (the special \"\
    +\" tag\n   response) was introduced to handle those few cases.  The proper way\n\
    \   to address this problem is probably to move towards a record-oriented\n  \
    \ architecture instead of the text stream model provided by TCP.\n   An IMAP2\
    \ client must maintain a local cache of data from the mailbox.\n   This cache\
    \ is an incomplete model of the mailbox, and at startup is\n   empty.  A listener\
    \ processes all unsolicited data, and updates the\n   cache based on this data.\
    \  If a tagged response arrives, the listener\n   unblocks the process that sent\
    \ the tagged request.\n   Unsolicited data needs some discussion.  Unlike most\
    \ protocols, in\n   which the server merely does the client's bidding, an IMAP2\
    \ server\n   has a semi-autonomous role.  By sending \"unsolicited data\", the\n\
    \   server is in effect sending a command to the client -- to update or\n   extend\
    \ the client's cache with new information from the server.  In\n   other words,\
    \ a \"fetch\" command is merely a request to the server to\n   ensure that the\
    \ client's cache has the most up-to-date version of the\n   requested information.\
    \  A server acknowledgement to the \"fetch\" is a\n   statement that all the requested\
    \ data has been sent.\n   Although no current server does this, a server is not\
    \ obliged by the\n   protocol to send data that it has already sent and is unchanged.\
    \  An\n   exception to this is the actual message text fetching operations\n \
    \  (RFC822, RFC822.HEADER, and RFC822.TEXT), owing to the possibly\n   excessive\
    \ resource consumption of maintaining this data in a cache.\n   It can not be\
    \ assumed that a FETCH will transmit any data; only that\n   an OK to the FETCH\
    \ means that the client's cache has the most up-to-\n   date information.\n  \
    \ When a mailbox is selected, the initial unsolicited data from the\n   server\
    \ arrives.  The first piece of data is the number of messages.\n   By sending\
    \ a new EXISTS unsolicited data message the server causes\n   the client to resize\
    \ its cache (this is how newly arrived mail is\n   handled).  If the client attempts\
    \ to access information from the\n   cache, it will encounter empty spots that\
    \ will trigger \"fetch\"\n   requests.  The request would be sent, some unsolicited\
    \ data including\n   the answer to the fetch will flow back, and then the \"fetch\"\
    \ response\n   will unblock the client.\n   People familiar with demand-paged\
    \ virtual memory operating system\n   design will recognize this model as being\
    \ similar to page-fault\n   handling on a demand-paged system.\n"
- title: Formal Syntax
  contents:
  - "Formal Syntax\n   The following syntax specification uses the augmented Backus-Naur\n\
    \   Form (BNF) notation as specified in RFC 822 with one exception; the\n   delimiter\
    \ used with the \"#\" construct is a single space (SP) and not\n   a comma.\n\
    \   address         ::= \"(\" addr_name SP addr_adl SP addr_mailbox SP\n     \
    \                  addr_host \")\"\n   addr_adl        ::= nil / string\n   addr_host\
    \       ::= nil / string\n   addr_mailbox    ::= nil / string\n   addr_name  \
    \     ::= nil / string\n   bboard          ::= \"BBOARD\" SP string\n   check\
    \           ::= \"CHECK\"\n   copy            ::= \"COPY\" SP sequence SP mailbox\n\
    \   data            ::= (\"FLAGS\" SP flag_list / \"SEARCH\" SP 1#number /\n \
    \                      \"BYE\" SP text_line / \"OK\" SP text_line /\n        \
    \               \"NO\" SP text_line / \"BAD\" SP text_line)\n   date         \
    \   ::= string in form \"dd-mmm-yy hh:mm:ss-zzz\"\n   envelope        ::= \"(\"\
    \ env_date SP env_subject SP env_from SP\n                       env_sender SP\
    \ env_reply-to SP env_to SP\n                       env_cc SP env_bcc SP env_in-reply-to\
    \ SP\n                       env_message-id \")\"\n   env_bcc         ::= nil\
    \ / \"(\" 1*address \")\"\n   env_cc          ::= nil / \"(\" 1*address \")\"\n\
    \   env_date        ::= string\n   env_from        ::= nil / \"(\" 1*address \"\
    )\"\n   env_in-reply-to ::= nil / string\n   env_message-id  ::= nil / string\n\
    \   env_reply-to    ::= nil / \"(\" 1*address \")\"\n   env_sender      ::= nil\
    \ / \"(\" 1*address \")\"\n   env_subject     ::= nil / string\n   env_to    \
    \      ::= nil / \"(\" 1*address \")\"\n   expunge         ::= \"EXPUNGE\"\n \
    \  fetch           ::= \"FETCH\" SP sequence SP (\"ALL\" / \"FAST\" /\n      \
    \                 fetch_att / \"(\" 1#fetch_att \")\")\n   fetch_att       ::=\
    \ \"ENVELOPE\" / \"FLAGS\" / \"INTERNALDATE\" /\n                       \"RFC822\"\
    \ / \"RFC822.HEADER\" / \"RFC822.SIZE\" /\n                       \"RFC822.TEXT\"\
    \n   find            ::= \"FIND\" SP find_option SP string\n   find_option   \
    \  ::= \"MAILBOXES\" / \"BBOARDS\"\n   flag_list       ::= ATOM / \"(\" 1#ATOM\
    \ \")\"\n   literal         ::= \"{\" NUMBER \"}\" CRLF ASCII-STRING\n   login\
    \           ::= \"LOGIN\" SP userid SP password\n   logout          ::= \"LOGOUT\"\
    \n   mailbox         ::= \"INBOX\" / string\n   msg_copy        ::= \"COPY\"\n\
    \   msg_data        ::= (msg_exists / msg_recent / msg_expunge /\n           \
    \            msg_fetch / msg_copy)\n   msg_exists      ::= \"EXISTS\"\n   msg_expunge\
    \     ::= \"EXPUNGE\"\n   msg_fetch       ::= (\"FETCH\" / \"STORE\") SP \"(\"\
    \ 1#(\"ENVELOPE\" SP\n                        envelope / \"FLAGS\" SP \"(\" 1#(recent_flag\n\
    \                        flag_list) \")\" / \"INTERNALDATE\" SP date /\n     \
    \                   \"RFC822\" SP string / \"RFC822.HEADER\" SP string /\n   \
    \                     \"RFC822.SIZE\" SP NUMBER / \"RFC822.TEXT\" SP\n       \
    \                 string) \")\"\n   msg_recent      ::= \"RECENT\"\n   msg_num\
    \         ::= NUMBER\n   nil             ::= \"NIL\"\n   noop            ::= \"\
    NOOP\"\n   password        ::= string\n   recent_flag     ::= \"\\RECENT\"\n \
    \  ready           ::= \"+\" SP text_line\n   request         ::= tag SP (noop\
    \ / login / logout / select / check /\n                       expunge / copy /\
    \ fetch / store / search / find /\n                       bboard) CRLF\n   response\
    \        ::= tag SP (\"OK\" / \"NO\" / \"BAD\") SP text_line CRLF\n   search \
    \         ::= \"SEARCH\" SP 1#(\"ALL\" / \"ANSWERED\" /\n                    \
    \   \"BCC\" SP string / \"BEFORE\" SP string /\n                       \"BODY\"\
    \ SP string / \"CC\" SP string / \"DELETED\" /\n                       \"FLAGGED\"\
    \ / \"KEYWORD\" SP atom / \"NEW\" / \"OLD\" /\n                       \"ON\" SP\
    \ string / \"RECENT\" / \"SEEN\" /\n                       \"SINCE\" SP string\
    \ / \"TEXT\" SP string /\n                       \"TO\" SP string / \"UNANSWERED\"\
    \ / \"UNDELETED\" /\n                       \"UNFLAGGED\" / \"UNKEYWORD\" / \"\
    UNSEEN\")\n   select          ::= \"SELECT\" SP mailbox\n   sequence        ::=\
    \ NUMBER / (NUMBER \",\" sequence) / (NUMBER \":\"\n                       sequence)\n\
    \   store           ::= \"STORE\" SP sequence SP store_att\n   store_att     \
    \  ::= (\"+FLAGS\" SP flag_list / \"-FLAGS\" SP flag_list /\n                \
    \       \"FLAGS\" SP flag_list)\n   string          ::= atom / \"\"\"\" 1*character\
    \ \"\"\"\" / literal\n   system_flags    ::= \"\\ANSWERED\" SP \"\\FLAGGED\" SP\
    \ \"\\DELETED\" SP\n                       \"\\SEEN\"\n   tag             ::=\
    \ atom\n   unsolicited     ::= \"*\" SP (msg_num SP msg_data / data) CRLF\n  \
    \ userid          ::= string\n"
- title: Implementation Status
  contents:
  - "Implementation Status\n   This information is current as of this writing.\n \
    \  The University of Washington has developed an electronic mail client\n   library\
    \ called the \"C-Client\". It provides complete IMAP2, SMTP, and\n   local mailbox\
    \ (both /usr/spool/mail and mail.txt formats) services in\n   a well-defined way\
    \ to a user interface main program.  Using the C-\n   Client, the University of\
    \ Washington has created an operational\n   client for BSD Unix and two operational\
    \ clients (one basic, one\n   advanced) for the NeXT.\n   Stanford University/SUMEX\
    \ has developed operational IMAP2 clients for\n   Xerox Lisp machines, Texas Instruments\
    \ Explorers, and the Apple\n   Macintosh.  The core of the Macintosh client is\
    \ an early version of\n   the C-Client.  SUMEX has also developed IMAP2 servers\
    \ for TOPS-20 and\n   BSD Unix.\n   All of the above software is in production\
    \ use, with enthusiastic\n   local user communities.  Active development continues\
    \ on the\n   Macintosh and C-Client based clients and the BSD Unix server.  This\n\
    \   software is freely available from the University of Washington and\n   SUMEX.\n\
    \   IMAP2 software exists for other platforms; for example Nippon\n   Telephone\
    \ and Telegraph (NTT) has developed an operational IMAP2\n   client for the NTT\
    \ ELIS.  Several organizations are working on a PC\n   client.\n   IMAP2 can be\
    \ used to access mailboxes at very remote sites, where\n   echo delays and frequent\
    \ outages make TELNET and running a local mail\n   reader intolerable.  For example,\
    \ from a desktop workstation on the\n   University of Washington local network\
    \ the author routinely uses\n   IMAP2 to read and manage mailboxes on various\
    \ University of\n   Washington local servers, at two systems at Stanford University,\
    \ at a\n   Milnet site, and at a site in Tokyo, Japan.\n   This specification\
    \ does not make any formal definition of size\n   restrictions, but the DEC-20\
    \ server has the following limitations:\n    . length of a mailbox: 7,077,888\
    \ characters\n    . maximum number of messages: 18,432 messages\n    . length\
    \ of a command line: 10,000 characters\n    . length of the local host name: 64\
    \ characters\n    . length of a \"short\" argument: 39 characters\n    . length\
    \ of a \"long\" argument: 491,520 characters\n    . maximum amount of data output\
    \ in a single fetch:\n      655,360 characters\n   To date, nobody has run up\
    \ against any of these limitations, many of\n   which are substantially larger\
    \ than most current user mail reading\n   programs.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   Bill Yeager and Rich Acuff both contributed invaluable suggestions\
    \ in\n   the evolution of IMAP2 from the original IMAP.  James Rice pointed\n\
    \   out several ambiguities in the previous IMAP2 specification and\n   otherwise\
    \ would not allow me to leave bad enough along.  Laurence\n   Lundblade reviewed\
    \ a draft of this version and made several helpful\n   suggestions.\n   Many dedicated\
    \ individuals have worked on IMAP2 software, including:\n   Mark Crispin, Frank\
    \ Gilmurray, Christopher Lane, Hiroshi Okuno,\n   Christopher Schmidt, and Bill\
    \ Yeager.\n   Any mistakes, flaws, or sins of omission in this IMAP2 protocol\n\
    \   specification are, however, strictly my own; and the mention of any\n   name\
    \ above does not imply an endorsement.\n"
- title: Security Considerations
  contents:
  - "Security Considerations\n   Security issues are not discussed in this memo.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Mark R. Crispin\n   Panda Programming\n   6158 Lariat Loop\
    \ NE\n   Bainbridge Island, WA 98110-2020\n   Phone: (206) 842-2385\n   EMail:\
    \ mrc@Tomobiki-Cho.CAC.Washington.EDU\n"
