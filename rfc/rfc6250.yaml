- title: __initial_text__
  contents:
  - ''
- title: Internet Architecture Board (IAB)                              D. Thaler
  contents:
  - "Internet Architecture Board (IAB)                              D. Thaler\n  \
    \                     Evolution of the IP Model\n"
- title: Abstract
  contents:
  - "Abstract\n   This RFC attempts to document various aspects of the IP service\
    \ model\n   and how it has evolved over time.  In particular, it attempts to\n\
    \   document the properties of the IP layer as they are seen by upper-\n   layer\
    \ protocols and applications, especially properties that were\n   (and, at times,\
    \ still are) incorrectly perceived to exist as well as\n   properties that would\
    \ cause problems if changed.  The discussion of\n   these properties is organized\
    \ around evaluating a set of claims, or\n   misconceptions.  Finally, this document\
    \ provides some guidance to\n   protocol designers and implementers.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Architecture Board (IAB)\n   and represents information that\
    \ the IAB has deemed valuable to\n   provide for permanent record.  Documents\
    \ approved for publication by\n   the IAB are not a candidate for any level of\
    \ Internet Standard; see\n   Section 2 of RFC 5741.\n   Information about the\
    \ current status of this document, any errata,\n   and how to provide feedback\
    \ on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6250.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2011 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \   2. The IP Service Model ............................................4\n  \
    \    2.1. Links and Subnets ..........................................5\n   3.\
    \ Common Application Misconceptions ...............................5\n      3.1.\
    \ Misconceptions about Routing ...............................5\n           3.1.1.\
    \ Claim: Reachability is symmetric ....................5\n           3.1.2. Claim:\
    \ Reachability is transitive ...................6\n           3.1.3. Claim: Error\
    \ messages can be received in\n                  response to data packets ............................7\n\
    \           3.1.4. Claim: Multicast is supported within a link .........7\n  \
    \         3.1.5. Claim: IPv4 broadcast is supported ..................8\n    \
    \       3.1.6. Claim: Multicast/broadcast is less expensive\n                \
    \  than replicated unicast .............................8\n           3.1.7. Claim:\
    \ The end-to-end latency of the first\n                  packet to a destination\
    \ is typical ..................8\n           3.1.8. Claim: Reordering is rare\
    \ ...........................9\n           3.1.9. Claim: Loss is rare and probabilistic,\
    \ not\n                  deterministic .......................................9\n\
    \           3.1.10. Claim: An end-to-end path exists at a\n                  \
    \ single point in time ..............................10\n           3.1.11. Discussion\
    \ ........................................10\n      3.2. Misconceptions about\
    \ Addressing ...........................11\n           3.2.1. Claim: Addresses\
    \ are stable over long\n                  periods of time ....................................11\n\
    \           3.2.2. Claim: An address is four bytes long ...............12\n  \
    \         3.2.3. Claim: A host has only one address on one interface 12\n    \
    \       3.2.4. Claim: A non-multicast/broadcast address\n                  identifies\
    \ a single host over a long period of time 13\n           3.2.5. Claim: An address\
    \ can be used as an\n                  indication of physical location ....................14\n\
    \           3.2.6. Claim: An address used by an application is\n             \
    \     the same as the address used for routing ...........14\n           3.2.7.\
    \ Claim: A subnet is smaller than a link .............14\n           3.2.8. Claim:\
    \ Selecting a local address selects\n                  the interface ......................................15\n\
    \           3.2.9. Claim: An address is part of an on-link\n                 \
    \ subnet prefix ......................................15\n           3.2.10. Discussion\
    \ ........................................15\n      3.3. Misconceptions about\
    \ Upper-Layer Extensibility ............16\n           3.3.1. Claim: New transport-layer\
    \ protocols can\n                  work across the Internet ...........................16\n\
    \           3.3.2. Claim: If one stream between a pair of\n                  addresses\
    \ can get through, then so can another .....17\n           3.3.3. Discussion .........................................17\n\
    \      3.4. Misconceptions about Security .............................17\n  \
    \         3.4.1. Claim: Packets are unmodified in transit ...........17\n    \
    \       3.4.2. Claim: Packets are private .........................18\n      \
    \     3.4.3. Claim: Source addresses are not forged .............18\n        \
    \   3.4.4. Discussion .........................................18\n   4. Security\
    \ Considerations ........................................18\n   5. Conclusion\
    \ .....................................................19\n   6. Acknowledgements\
    \ ...............................................20\n   7. IAB Members at the\
    \ Time of This Writing ........................20\n   8. IAB Members at the Time\
    \ of Approval ............................20\n   9. References .....................................................20\n\
    \      9.1. Normative References ......................................20\n  \
    \    9.2. Informative References ....................................21\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Since the Internet Protocol was first published as [IEN028]\
    \ in 1978,\n   IP has provided a network-layer connectivity service to upper-layer\n\
    \   protocols and applications.  The basic IP service model was\n   documented\
    \ in the original IENs (and subsequently in the RFCs that\n   obsolete them).\
    \  However, since the mantra has been \"Everything Over\n   IP\", the IP service\
    \ model has evolved significantly over the past 30\n   years to enable new behaviors\
    \ that the original definition did not\n   envision.  For example, by 1989 there\
    \ was already some confusion and\n   so [RFC1122] clarified many things and extended\
    \ the model.  In 2004,\n   [RFC3819] advised link-layer protocol designers on\
    \ a number of issues\n   that affect upper layers and is the closest in intent\
    \ to this\n   document.  Today's IP service model is not well documented in a\n\
    \   single place, but is either implicit or discussed piecemeal in many\n   different\
    \ RFCs.  As a result, today's IP service model is actually\n   not well known,\
    \ or at least is often misunderstood.\n   In the early days of IP, changing or\
    \ extending the basic IP service\n   model was easier since it was not as widely\
    \ deployed and there were\n   fewer implementations.  Today, the ossification\
    \ of the Internet makes\n   evolving the IP model even more difficult.  Thus,\
    \ it is important to\n   understand the evolution of the IP model for two reasons:\n\
    \   1.  To clarify what properties can and cannot be depended upon by\n      \
    \ upper-layer protocols and applications.  There are many\n       misconceptions\
    \ on which applications may be based and which are\n       problematic.\n   2.\
    \  To document lessons for future evolution to take into account.\n       It is\
    \ important that the service model remain consistent, rather\n       than evolving\
    \ in two opposing directions.  It is sometimes the\n       case in IETF Working\
    \ Groups today that directions are considered\n       or even taken that would\
    \ change the IP service model.  Doing this\n       without understanding the implications\
    \ on applications can be\n       dangerous.\n   This RFC attempts to document\
    \ various aspects of the IP service model\n   and how it has evolved over time.\
    \  In particular, it attempts to\n   document the properties of the IP layer,\
    \ as seen by upper-layer\n   protocols and applications, especially properties\
    \ that were (and at\n   times still are) incorrectly perceived to exist.  It also\
    \ highlights\n   properties that would cause problems if changed.\n"
- title: 2.  The IP Service Model
  contents:
  - "2.  The IP Service Model\n   In this document, we use the term \"IP service model\"\
    \ to refer to the\n   model exposed by IP to higher-layer protocols and applications.\
    \  This\n   is depicted in Figure 1 by the horizontal line.\n    +-------------+\
    \                                  +-------------+\n    | Application |      \
    \                            | Application |\n    +------+------+            \
    \                      +------+------+\n           |                         \
    \                       |\n    +------+------+                               \
    \   +------+------+\n    | Upper-Layer |                                  | Upper-Layer\
    \ |\n    |  Protocol   |                                  |  Protocol   |\n  \
    \  +------+------+                                  +------+------+\n        \
    \   |                                                |\n   ------------------------------------------------------------------\n\
    \           |                                                |\n        +--+--+\
    \                  +-----+                 +--+--+\n        | IP  |          \
    \        | IP  |                 | IP  |\n        +--+--+                  +--+--+\
    \                 +--+--+\n           |                        |             \
    \          |\n     +-----+------+           +-----+------+          +-----+------+\n\
    \     | Link Layer |           | Link Layer |          | Link Layer |\n     +-----+------+\
    \           +--+-----+---+          +-----+------+\n           |             \
    \        |     |                    |\n           +---------------------+    \
    \ +--------------------+\n         Source                                    \
    \    Destination\n                             IP Service Model\n            \
    \                     Figure 1\n   The foundation of the IP service model today\
    \ is documented in Section\n   2.2 of [RFC0791].  Generally speaking, IP provides\
    \ a connectionless\n   delivery service for variable size packets, which does\
    \ not guarantee\n   ordering, delivery, or lack of duplication, but is merely\
    \ best effort\n   (although some packets may get better service than others).\
    \  Senders\n   can send to a destination address without signaling a priori, and\n\
    \   receivers just listen on an already provisioned address, without\n   signaling\
    \ a priori.\n   Architectural principles of the IP model are further discussed\
    \ in\n   [RFC1958] and in Sections 5 and 6 of [NEWARCH].\n"
- title: 2.1.  Links and Subnets
  contents:
  - "2.1.  Links and Subnets\n   Section 2.1 of [RFC4903] discusses the terms \"link\"\
    \ and \"subnet\" with\n   respect to the IP model.\n   A \"link\" in the IP service\
    \ model refers to the topological area\n   within which a packet with an IPv4\
    \ Time to Live (TTL) or IPv6 Hop\n   Limit of 1 can be delivered.  That is, where\
    \ no IP-layer forwarding\n   (which entails a TTL/Hop Limit decrement) occurs\
    \ between two nodes.\n   A \"subnet\" in the IP service model refers to the topological\
    \ area\n   within which addresses from the same subnet prefix are assigned to\n\
    \   interfaces.\n"
- title: 3.  Common Application Misconceptions
  contents:
  - "3.  Common Application Misconceptions\n   Below is a list of properties that\
    \ are often assumed by applications\n   and upper-layer protocols, but which have\
    \ become less true over time.\n"
- title: 3.1.  Misconceptions about Routing
  contents:
  - '3.1.  Misconceptions about Routing

    '
- title: '3.1.1.  Claim: Reachability is symmetric'
  contents:
  - "3.1.1.  Claim: Reachability is symmetric\n   Many applications assume that if\
    \ a host A can contact a host B, then\n   the reverse is also true.  Examples\
    \ of this behavior include request-\n   response patterns, which require reverse\
    \ reachability only after\n   forward reachability, as well as callbacks (e.g.,\
    \ as used by the File\n   Transfer Protocol (FTP) [RFC0959]).\n   Originally,\
    \ it was the case that reachability was symmetric (although\n   the path taken\
    \ may not be), both within a link and across the\n   Internet.  With the advent\
    \ of technologies such as Network Address\n   Translators (NATs) and firewalls\
    \ (as in the following example\n   figure), this can no longer be assumed.  Today,\
    \ host-to-host\n   connectivity is challenging if not impossible in general. \
    \ It is\n   relatively easy to initiate communication from hosts (A-E in the\n\
    \   example diagram) to servers (S), but not vice versa, nor between\n   hosts\
    \ A-E.  For a longer discussion on peer-to-peer connectivity, see\n   Appendix\
    \ A of [RFC5694].\n           __________                                 ___ \
    \      ___\n          /          \\             ___        ___    /   \\ ____|FW\
    \ |__A\n         /            \\    ___    /   \\ _____|NAT|__|     |    |___|\n\
    \        |              |__|NAT|__|     |     |___|  |     |__B\n        |   \
    \           |  |___|  |     |__C          \\___/\n        |              |   \
    \       \\___/               ___\n     S__|   Internet   |           ___     \
    \   ___    /   \\\n        |              |   ___    /   \\ _____|NAT|__|    \
    \ |__D\n        |              |__|FW |__|     |     |___|  |     |\n        |\
    \              |  |___|  |     |__E          \\___/\n         \\            /\
    \           \\___/\n          \\__________/\n                                \
    \ Figure 2\n   However, it is still the case that if a request can be sent, then\
    \ a\n   reply to that request can generally be received, but an unsolicited\n\
    \   request in the other direction may not be received.  [RFC2993]\n   discusses\
    \ this in more detail.\n   There are also links (e.g., satellite) that were defined\
    \ as\n   unidirectional links and hence an address on such a link results in\n\
    \   asymmetric reachability.  [RFC3077] explicitly addresses this problem\n  \
    \ for multihomed hosts by tunneling packets over another interface in\n   order\
    \ to restore symmetric reachability.\n   Finally, even with common wireless networks\
    \ such as 802.11, this\n   assumption may not be true, as discussed in Section\
    \ 5.5 of\n   [WIRELESS].\n"
- title: '3.1.2.  Claim: Reachability is transitive'
  contents:
  - "3.1.2.  Claim: Reachability is transitive\n   Many applications assume that if\
    \ a host A can contact host B, and B\n   can contact C, then host A can contact\
    \ C.  Examples of this behavior\n   include applications and protocols that use\
    \ referrals.\n   Originally, it was the case that reachability was transitive,\
    \ both\n   within a link and across the Internet.  With the advent of\n   technologies\
    \ such as NATs and firewalls and various routing policies,\n   this can no longer\
    \ be assumed across the Internet, but it is often\n   still true within a link.\
    \  As a result, upper-layer protocols and\n   applications may be relying on transitivity\
    \ within a link.  However,\n   some radio technologies, such as 802.11 ad hoc\
    \ mode, violate this\n   assumption within a link.\n"
- title: '3.1.3.  Claim: Error messages can be received in response to data'
  contents:
  - "3.1.3.  Claim: Error messages can be received in response to data\n        packets\n\
    \   Some upper-layer protocols and applications assume that ICMP error\n   messages\
    \ will be received in response to packets sent that cannot be\n   delivered. \
    \ Examples of this include the use of Path MTU Discovery\n   [RFC1191] [RFC1981]\
    \ relying on messages indicating packets were too\n   big, and traceroute and\
    \ the use of expanding ring search [RFC1812]\n   relying on messages indicating\
    \ packets reached their TTL/Hop Limit.\n   Originally, this assumption largely\
    \ held, but many ICMP senders then\n   chose to rate-limit responses in order\
    \ to mitigate denial-of-service\n   attacks, and many firewalls now block ICMP\
    \ messages entirely.  For a\n   longer discussion, see Section 2.1 of [RFC2923].\n\
    \   This led to an alternate mechanism for Path MTU Discovery that does\n   not\
    \ rely on this assumption being true [RFC4821] and guidance to\n   firewall administrators\
    \ ([RFC4890] and Section 3.1.1 of [RFC2979]).\n"
- title: '3.1.4.  Claim: Multicast is supported within a link'
  contents:
  - "3.1.4.  Claim: Multicast is supported within a link\n   [RFC1112] introduced\
    \ multicast to the IP service model.  In this\n   evolution, senders still just\
    \ send to a destination address without\n   signaling a priori, but in contrast\
    \ to the original IP model,\n   receivers must signal to the network before they\
    \ can receive traffic\n   to a multicast address.\n   Today, many applications\
    \ and protocols use multicast addresses,\n   including protocols for address configuration,\
    \ service discovery,\n   etc.  (See [MCAST4] and [MCAST6] for those that use well-known\n\
    \   addresses.)\n   Most of these only assume that multicast works within a link\
    \ and may\n   or may not function across a wider area.  While network-layer\n\
    \   multicast works over most link types, there are Non-Broadcast Multi-\n   Access\
    \ (NBMA) links over which multicast does not work (e.g., X.25,\n   ATM, frame\
    \ relay, 6to4, Intra-Site Automatic Tunnel Addressing\n   Protocol (ISATAP), Teredo)\
    \ and this can interfere with some protocols\n   and applications.  Similarly,\
    \ there are links such as 802.11 ad hoc\n   mode where multicast packets may not\
    \ get delivered to all receivers\n   on the link.  [RFC4861] states:\n      Note\
    \ that all link types (including NBMA) are expected to provide\n      multicast\
    \ service for applications that need it (e.g., using\n      multicast servers).\n\
    \   and its predecessor [RFC2461] contained similar wording.\n   However, not\
    \ all link types today meet this expectation.\n"
- title: '3.1.5.  Claim: IPv4 broadcast is supported'
  contents:
  - "3.1.5.  Claim: IPv4 broadcast is supported\n   IPv4 broadcast support was originally\
    \ defined on a link, across a\n   network, and for subnet-directed broadcast,\
    \ and it is used by many\n   applications and protocols.  For security reasons,\
    \ however, [RFC2644]\n   deprecated the forwarding of broadcast packets.  Thus,\
    \ since 1999,\n   broadcast can only be relied on within a link.  Still, there\
    \ exist\n   NBMA links over which broadcast does not work, and there exist some\n\
    \   \"semi-broadcast\" links (e.g., 802.11 ad hoc mode) where broadcast\n   packets\
    \ may not get delivered to all nodes on the link.  Another case\n   where broadcast\
    \ fails to work is when a /32 or /31 is assigned to a\n   point-to-point interface\
    \ (e.g., [RFC3021]), leaving no broadcast\n   address available.\n   To a large\
    \ extent, the addition of link-scoped multicast to the IP\n   service model obsoleted\
    \ the need for broadcast.  It is also worth\n   noting that the broadcast API\
    \ model used by most platforms allows\n   receivers to just listen on an already\
    \ provisioned address, without\n   signaling a priori, but in contrast to the\
    \ unicast API model, senders\n   must signal to the local IP stack (SO_BROADCAST)\
    \ before they can send\n   traffic to a broadcast address.  However, from the\
    \ network's\n   perspective, the host still sends without signaling a priori.\n"
- title: '3.1.6.  Claim: Multicast/broadcast is less expensive than replicated'
  contents:
  - "3.1.6.  Claim: Multicast/broadcast is less expensive than replicated\n      \
    \  unicast\n   Some applications and upper-layer protocols that use multicast\
    \ or\n   broadcast do so not because they do not know the addresses of\n   receivers,\
    \ but simply to avoid sending multiple copies of the same\n   packet over the\
    \ same link.\n   In wired networks, sending a single multicast packet on a link\
    \ is\n   generally less expensive than sending multiple unicast packets.  This\n\
    \   may not be true for wireless networks, where implementations can only\n  \
    \ send multicast at the basic rate, regardless of the negotiated rates\n   of\
    \ potential receivers.  As a result, replicated unicast may achieve\n   much higher\
    \ throughput across such links than multicast/broadcast\n   traffic.\n"
- title: '3.1.7.  Claim: The end-to-end latency of the first packet to a'
  contents:
  - "3.1.7.  Claim: The end-to-end latency of the first packet to a\n        destination\
    \ is typical\n   Many applications and protocols choose a destination address\
    \ by\n   sending a message to each of a number of candidates, picking the\n  \
    \ first one to respond, and then using that destination for subsequent\n   communication.\
    \  If the end-to-end latency of the first packet to each\n   destination is atypical,\
    \ this can result in a highly non-optimal\n   destination being chosen, with much\
    \ longer paths (and hence higher\n   load on the Internet) and lower throughput.\n\
    \   Today, there are a number of reasons this is not true.  First, when\n   sending\
    \ to a new destination there may be some startup latency\n   resulting from the\
    \ link-layer or network-layer mechanism in use, such\n   as the Address Resolution\
    \ Protocol (ARP), for instance.  In addition,\n   the first packet may follow\
    \ a different path from subsequent packets.\n   For example, protocols such as\
    \ Mobile IPv6 [RFC3775], Protocol\n   Independent Multicast - Sparse Mode (PIM-SM)\
    \ [RFC4601], and the\n   Multicast Source Discovery Protocol (MSDP) [RFC3618]\
    \ send packets on\n   one path, and then allow immediately switching to a shorter\
    \ path,\n   resulting in a large latency difference.  There are various proposals\n\
    \   currently being evaluated by the IETF Routing Research Group that\n   result\
    \ in similar path switching.\n"
- title: '3.1.8.  Claim: Reordering is rare'
  contents:
  - "3.1.8.  Claim: Reordering is rare\n   As discussed in [REORDER], [RFC2991], and\
    \ Section 15 of [RFC3819],\n   there are a number of effects of reordering.  For\
    \ example, reordering\n   increases buffering requirements (and jitter) in many\
    \ applications\n   and in devices that do packet reassembly.  In particular, TCP\n\
    \   [RFC0793] is adversely affected by reordering since it enters fast-\n   retransmit\
    \ when three packets are received before a late packet,\n   which drastically\
    \ lowers throughput.  Finally, some NATs and\n   firewalls assume that the initial\
    \ fragment arrives first, resulting\n   in packet loss when this is not the case.\n\
    \   Today, there are a number of things that cause reordering.  For\n   example,\
    \ some routers do per-packet, round-robin load balancing,\n   which, depending\
    \ on the topology, can result in a great deal of\n   reordering.  As another example,\
    \ when a packet is fragmented at the\n   sender, some hosts send the last fragment\
    \ first.  Finally, as\n   discussed in Section 3.1.7, protocols that do path switching\
    \ after\n   the first packet result in deterministic reordering within the first\n\
    \   burst of packets.\n"
- title: '3.1.9.  Claim: Loss is rare and probabilistic, not deterministic'
  contents:
  - "3.1.9.  Claim: Loss is rare and probabilistic, not deterministic\n   In the original\
    \ IP model, senders just send, without signaling the\n   network a priori.  This\
    \ works to a degree.  In practice, the last hop\n   (and in rare cases, other\
    \ hops) of the path needs to resolve next hop\n   information (e.g., the link-layer\
    \ address of the destination) on\n   demand, which results in queuing traffic,\
    \ and if the queue fills up,\n   some traffic gets dropped.  This means that bursty\
    \ sources can be\n   problematic (and indeed a single large packet that gets fragmented\n\
    \   becomes such a burst).  The problem is rarely observed in practice\n   today,\
    \ either because the resolution within the last hop happens very\n   quickly,\
    \ or because bursty applications are rarer.  However, any\n   protocol that significantly\
    \ increases such delays or adds new\n   resolutions would be a change to the classic\
    \ IP model and may\n   adversely impact upper-layer protocols and applications\
    \ that result\n   in bursts of packets.\n   In addition, mechanisms that simply\
    \ drop the first packet, rather\n   than queuing it, also break this assumption.\
    \  Similar to the result\n   of reordering, they can result in a highly non-optimal\
    \ destination\n   being chosen by applications that use the first one to respond.\
    \  Two\n   examples of mechanisms that appear to do this are network interface\n\
    \   cards that support a \"Wake-on-LAN\" capability where any packet that\n  \
    \ matches a specified pattern will wake up a machine in a power-\n   conserving\
    \ mode, but only after dropping the matching packet, and\n   MSDP, where encapsulating\
    \ data packets is optional, but doing so\n   enables bursty sources to be accommodated\
    \ while a multicast tree is\n   built back to the source's domain.\n"
- title: '3.1.10.  Claim: An end-to-end path exists at a single point in time'
  contents:
  - "3.1.10.  Claim: An end-to-end path exists at a single point in time\n   In classic\
    \ IP, applications assume that either an end-to-end path\n   exists to a destination\
    \ or that the packet will be dropped.  In\n   addition, IP today tends to assume\
    \ that the packet delay is\n   relatively short (since the \"Time\"-to-Live is\
    \ just a hop count).  In\n   IP's earlier history, the TTL field was expected\
    \ to also be\n   decremented each second (not just each hop).\n   In general,\
    \ this assumption is still true today.  However, the IRTF\n   Delay Tolerant Networking\
    \ Research Group is investigating ways for\n   applications to use IP in networks\
    \ where this assumption is not true,\n   such as store-and-forward networks (e.g.,\
    \ packets carried by vehicles\n   or animals).\n"
- title: 3.1.11.  Discussion
  contents:
  - "3.1.11.  Discussion\n   The reasons why the assumptions listed above are increasingly\
    \ less\n   true can be divided into two categories: effects caused by attributes\n\
    \   of link-layer technologies and effects caused by network-layer\n   technologies.\n\
    \   RFC 3819 [RFC3819] advises link-layer protocol designers to minimize\n   these\
    \ effects.  Generally, the link-layer causes are not\n   intentionally trying\
    \ to break IP, but rather adding IP over the\n   technology introduces the problem.\
    \  Hence, where the link-layer\n   protocol itself does not do so, when specifying\
    \ how IP is defined\n   over such a link protocol, designers should compensate\
    \ to the maximum\n   extent possible.  As examples, [RFC3077] and [RFC2491] compensate\
    \ for\n   the lack of symmetric reachability and the lack of link-layer\n   multicast,\
    \ respectively.  That is, when IP is defined over a link\n   type, the protocol\
    \ designers should attempt to restore the\n   assumptions listed in this document.\
    \  For example, since an\n   implementation can distinguish between 802.11 ad\
    \ hoc mode versus\n   infrastructure mode, it may be possible to define a mechanism\
    \ below\n   IP to compensate for the lack of transitivity over such links.\n \
    \  At the network layer, as a general principle, we believe that\n   reachability\
    \ is good.  For security reasons ([RFC4948]), however, it\n   is desirable to\
    \ restrict reachability by unauthorized parties; indeed\n   IPsec, an integral\
    \ part of the IP model, provides one means to do so.\n   Where there are issues\
    \ with asymmetry, non-transitivity, and so\n   forth, which are not direct results\
    \ of restricting reachability to\n   only authorized parties (for some definition\
    \ of authorized), the IETF\n   should attempt to avoid or solve such issues. \
    \ Similar to the\n   principle outlined in Section 3.9 of [RFC1958], the general\
    \ theme\n   when defining a protocol is to be liberal in what effects you accept,\n\
    \   and conservative in what effects you cause.\n   However, in being liberal\
    \ in what effects you accept, it is also\n   important to remember that diagnostics\
    \ are important, and being too\n   liberal can mask problems.  Thus, a tussle\
    \ exists between the desire\n   to provide a better experience to one's own users\
    \ or applications and\n   thus be more successful ([RFC5218]), versus the desire\
    \ to put\n   pressure on getting problems fixed.  One solution is to provide a\n\
    \   separate \"pedantic mode\" that can be enabled to see the problems\n   rather\
    \ than mask them.\n"
- title: 3.2.  Misconceptions about Addressing
  contents:
  - '3.2.  Misconceptions about Addressing

    '
- title: '3.2.1.  Claim: Addresses are stable over long periods of time'
  contents:
  - "3.2.1.  Claim: Addresses are stable over long periods of time\n   Originally,\
    \ addresses were manually configured on fixed machines, and\n   hence addresses\
    \ were very stable.  With the advent of technologies\n   such as DHCP, roaming,\
    \ and wireless, addresses can no longer be\n   assumed to be stable for long periods\
    \ of time.  However, the APIs\n   provided to applications today typically still\
    \ assume stable\n   addresses (e.g., address lifetimes are not exposed to applications\n\
    \   that get addresses).  This can cause problems when addresses become\n   stale.\n\
    \   For example, many applications resolve names to addresses and then\n   cache\
    \ them without any notion of lifetime.  In fact, the classic name\n   resolution\
    \ APIs do not even provide applications with the lifetime of\n   entries.\n  \
    \ Proxy Mobile IPv6 [RFC5213] tries to restore this assumption to some\n   extent\
    \ by preserving the same address while roaming around a local\n   area.  The issue\
    \ of roaming between different networks has been known\n   since at least 1980\
    \ when [IEN135] proposed a mobility solution that\n   attempted to restore this\
    \ assumption by adding an additional address\n   that can be used by applications,\
    \ which is stable while roaming\n   anywhere with Internet connectivity.  More\
    \ recent protocols such as\n   Mobile IPv6 (MIP6) [RFC3775] and the Host Identity\
    \ Protocol (HIP)\n   [RFC4423] follow in this same vein.\n"
- title: '3.2.2.  Claim: An address is four bytes long'
  contents:
  - "3.2.2.  Claim: An address is four bytes long\n   Many applications and protocols\
    \ were designed to only support\n   addresses that are four bytes long.  Although\
    \ this was sufficient for\n   IPv4, the advent of IPv6 made this assumption invalid\
    \ and with the\n   exhaustion of IPv4 address space this assumption will become\n\
    \   increasingly less true.  There have been some attempts to try to\n   mitigate\
    \ this problem with limited degrees of success in constrained\n   cases.  For\
    \ example, \"Bump-In-the-Stack\" [RFC2767] and \"Bump-in-the-\n   API\" [RFC3338]\
    \ attempt to provide four-byte \"IPv4\" addresses for IPv6\n   destinations, but\
    \ have many limitations including (among a number of\n   others) all the problems\
    \ of NATs.\n"
- title: '3.2.3.  Claim: A host has only one address on one interface'
  contents:
  - "3.2.3.  Claim: A host has only one address on one interface\n   Although many\
    \ applications assume this (e.g., by calling a name\n   resolution function such\
    \ as gethostbyname and then just using the\n   first address returned), it was\
    \ never really true to begin with, even\n   if it was the common case.  Even [RFC0791]\
    \ states:\n      ... provision must be made for a host to have several physical\n\
    \      interfaces to the network with each having several logical\n      Internet\
    \ addresses.\n   However, this assumption is increasingly less true today, with\
    \ the\n   advent of multiple interfaces (e.g., wired and wireless), dual-IPv4/\n\
    \   IPv6 nodes, multiple IPv6 addresses on the same interface (e.g.,\n   link-local\
    \ and global), etc.  Similarly, many protocol specifications\n   such as DHCP\
    \ only describe operations for a single interface, whereas\n   obtaining host-wide\
    \ configuration from multiple interfaces presents a\n   merging problem for nodes\
    \ in practice.  Too often, this problem is\n   simply ignored by Working Groups,\
    \ and applications and users suffer\n   as a result from poor merging algorithms.\n\
    \   One use of protocols such as MIP6 and HIP is to make this assumption\n   somewhat\
    \ more true by adding an additional \"address\" that can be the\n   one used by\
    \ such applications, and the protocol will deal with the\n   complexity of multiple\
    \ physical interfaces and addresses.\n"
- title: '3.2.4.  Claim: A non-multicast/broadcast address identifies a single'
  contents:
  - "3.2.4.  Claim: A non-multicast/broadcast address identifies a single\n      \
    \  host over a long period of time\n   Many applications and upper-layer protocols\
    \ maintain a communication\n   session with a destination over some period of\
    \ time.  If that address\n   is reassigned to another host, or if that address\
    \ is assigned to\n   multiple hosts and the host at which packets arrive changes,\
    \ such\n   applications can have problems.\n   In addition, many security mechanisms\
    \ and configurations assume that\n   one can block traffic by IP address, implying\
    \ that a single attacker\n   can be identified by IP address.  If that IP address\
    \ can also\n   identify many legitimate hosts, applying such a block can result\
    \ in\n   denial of service.\n   [RFC1546] introduced the notion of anycast to\
    \ the IP service model.\n   It states:\n      Because anycasting is stateless\
    \ and does not guarantee delivery of\n      multiple anycast datagrams to the\
    \ same system, an application\n      cannot be sure that it is communicating with\
    \ the same peer in two\n      successive UDP transmissions or in two successive\
    \ TCP connections\n      to the same anycast address.\n      The obvious solutions\
    \ to these issues are to require applications\n      which wish to maintain state\
    \ to learn the unicast address of their\n      peer on the first exchange of UDP\
    \ datagrams or during the first\n      TCP connection and use the unicast address\
    \ in future\n      conversations.\n   The issues with anycast are further discussed\
    \ in [RFC4786] and\n   [ANYCAST].\n   Another mechanism by which multiple hosts\
    \ use the same address is as\n   a result of scoped addresses, as defined for\
    \ both IPv4 [RFC1918]\n   [RFC3927] and IPv6 [RFC4007].  Because such addresses\
    \ can be reused\n   within multiple networks, hosts in different networks can\
    \ use the\n   same address.  As a result, a host that is multihomed to two such\n\
    \   networks cannot use the destination address to uniquely identify a\n   peer.\
    \  For example, a host can no longer use a 5-tuple to uniquely\n   identify a\
    \ TCP connection.  This is why IPv6 added the concept of a\n   \"zone index\"\
    .\n   Yet another example is that, in some high-availability solutions, one\n\
    \   host takes over the IP address of another failed host.\n   See [RFC2101],\
    \ [RFC2775], and [SHARED-ADDRESSING] for additional\n   discussion on address\
    \ uniqueness.\n"
- title: '3.2.5.  Claim: An address can be used as an indication of physical'
  contents:
  - "3.2.5.  Claim: An address can be used as an indication of physical\n        location\n\
    \   Some applications attempt to use an address to infer some information\n  \
    \ about the physical location of the host with that address.  For\n   example,\
    \ geo-location services are often used to provide targeted\n   content or ads.\n\
    \   Various forms of tunneling have made this assumption less true, and\n   this\
    \ will become increasingly less true as the use of IPv4 NATs for\n   large networks\
    \ continues to increase.  See Section 7 of\n   [SHARED-ADDRESSING] for a longer\
    \ discussion.\n"
- title: '3.2.6.  Claim: An address used by an application is the same as the'
  contents:
  - "3.2.6.  Claim: An address used by an application is the same as the\n       \
    \ address used for routing\n   Some applications assume that the address the application\
    \ uses is the\n   same as that used by routing.  For example, some applications\
    \ use raw\n   sockets to read/write packet headers, including the source and\n\
    \   destination addresses in the IP header.  As another example, some\n   applications\
    \ make assumptions about locality (e.g., whether the\n   destination is on the\
    \ same subnet) by comparing addresses.\n   Protocols such as Mobile IPv6 and HIP\
    \ specifically break this\n   assumption (in an attempt to restore other assumptions\
    \ as discussed\n   above).  Recently, the IRTF Routing Research Group has been\n\
    \   evaluating a number of possible mechanisms, some of which would also\n   break\
    \ this assumption, while others preserve this assumption near the\n   edges of\
    \ the network and only break it in the core of the Internet.\n   Breaking this\
    \ assumption is sometimes referred to as an \"identifier/\n   locator\" split.\
    \  However, as originally defined in 1978 ([IEN019],\n   [IEN023]), an address\
    \ was originally defined as only a locator,\n   whereas names were defined to\
    \ be the identifiers.  However, the TCP\n   protocol then used addresses as identifiers.\n\
    \   Finally, in a liberal sense, any tunneling mechanism might be said to\n  \
    \ break this assumption, although, in practice, applications that make\n   this\
    \ assumption will continue to work, since the address of the\n   inside of the\
    \ tunnel is still used for routing as expected.\n"
- title: '3.2.7.  Claim: A subnet is smaller than a link'
  contents:
  - "3.2.7.  Claim: A subnet is smaller than a link\n   In the classic IP model, a\
    \ \"subnet\" is smaller than, or equal to, a\n   \"link\".  Destinations with\
    \ addresses in the same on-link subnet\n   prefix can be reached with TTL (or\
    \ Hop Count) = 1.  Link-scoped\n   multicast packets, and all-ones broadcast packets\
    \ will be delivered\n   (in a best-effort fashion) to all listening nodes on the\
    \ link.\n   Subnet broadcast packets will be delivered (in a best effort fashion)\n\
    \   to all listening nodes in the subnet.  There have been some efforts\n   in\
    \ the past (e.g., [RFC0925], [RFC3069]) to allow multi-link subnets\n   and change\
    \ the above service model, but the adverse impact on\n   applications that have\
    \ such assumptions recommend against changing\n   this assumption.\n   [RFC4903]\
    \ discusses this topic in more detail and surveys a number of\n   protocols and\
    \ applications that depend on this assumption.\n   Specifically, some applications\
    \ assume that, if a destination address\n   is in the same on-link subnet prefix\
    \ as the local machine, then\n   therefore packets can be sent with TTL=1, or\
    \ that packets can be\n   received with TTL=255, or link-scoped multicast or broadcast\
    \ can be\n   used to reach the destination.\n"
- title: '3.2.8.  Claim: Selecting a local address selects the interface'
  contents:
  - "3.2.8.  Claim: Selecting a local address selects the interface\n   Some applications\
    \ assume that binding to a given local address\n   constrains traffic reception\
    \ to the interface with that address, and\n   that traffic from that address will\
    \ go out on that address's\n   interface.  However, Section 3.3.4.2 of [RFC1122]\
    \ defines two models:\n   the Strong End System (or strong host) model where this\
    \ is true, and\n   the Weak End System (or weak host) model where this is not\
    \ true.  In\n   fact, any router is inherently a weak host implementation, since\n\
    \   packets can be forwarded between interfaces.\n"
- title: '3.2.9.  Claim: An address is part of an on-link subnet prefix'
  contents:
  - "3.2.9.  Claim: An address is part of an on-link subnet prefix\n   To some extent,\
    \ this was never true, in that there were cases in IPv4\n   where the \"mask\"\
    \ was 255.255.255.255, such as on a point-to-point\n   link where the two endpoints\
    \ had addresses out of unrelated address\n   spaces, and no on-link subnet prefix\
    \ existed on the link.  However,\n   this didn't stop many platforms and applications\
    \ from assuming that\n   every address had a \"mask\" (or prefix) that was on-link.\
    \  The\n   assumption of whether a subnet is on-link (in which case one can send\n\
    \   directly to the destination after using ARP/ND) or off-link (in which\n  \
    \ case one just sends to a router) has evolved over the years, and it\n   can\
    \ no longer be assumed that an address has an on-link prefix.  In\n   1998, [RFC2461]\
    \ introduced the distinction as part of the core IPv6\n   protocol suite.  This\
    \ topic is discussed further in [ON-OFF-LINK],\n   and [RFC4903] also touches\
    \ on this topic with respect to the service\n   model seen by applications.\n"
- title: 3.2.10.  Discussion
  contents:
  - "3.2.10.  Discussion\n   Section 4.1 of RFC 1958 [RFC1958] states: \"In general,\
    \ user\n   applications should use names rather than addresses\".\n   We emphasize\
    \ the above point, which is too often ignored.  Many\n   commonly used APIs unnecessarily\
    \ expose addresses to applications\n   that already use names.  Similarly, some\
    \ protocols are defined to\n   carry addresses, rather than carrying names (instead\
    \ of or in\n   addition to addresses).  Protocols and applications that are already\n\
    \   dependent on a naming system should be designed in such a way that\n   they\
    \ avoid or minimize any dependence on the notion of addresses.\n   One challenge\
    \ is that many hosts today do not have names that can be\n   resolved.  For example,\
    \ a host may not have a fully qualified domain\n   name (FQDN) or a Domain Name\
    \ System (DNS) server that will host its\n   name.\n   Applications that, for\
    \ whatever reason, cannot use names should be\n   IP-version agnostic.\n"
- title: 3.3.  Misconceptions about Upper-Layer Extensibility
  contents:
  - '3.3.  Misconceptions about Upper-Layer Extensibility

    '
- title: '3.3.1.  Claim: New transport-layer protocols can work across the'
  contents:
  - "3.3.1.  Claim: New transport-layer protocols can work across the\n        Internet\n\
    \   IP was originally designed to support the addition of new transport-\n   layer\
    \ protocols, and [PROTOCOLS] lists many such protocols.\n   However, as discussed\
    \ in [WAIST-HOURGLASS], NATs and firewalls today\n   break this assumption and\
    \ often only allow UDP and TCP (or even just\n   HTTP).\n   Hence, while new protocols\
    \ may work from some places, they will not\n   necessarily work from everywhere,\
    \ such as from behind such NATs and\n   firewalls.\n   Since even UDP and TCP\
    \ may not work from everywhere, it may be\n   necessary for applications to support\
    \ \"HTTP failover\" modes.  The use\n   of HTTP as a \"transport of last resort\"\
    \ has become common (e.g.,\n   [BOSH] among others) even in situations where it\
    \ is sub-optimal, such\n   as in real-time communications or where bidirectional\
    \ communication\n   is required.  Also, the IETF HyBi Working Group is now in\
    \ the process\n   of designing a standards-based solution for layering other protocols\n\
    \   on top of HTTP.  As a result of having to support HTTP failover,\n   applications\
    \ may have to be engineered to sustain higher latency.\n"
- title: '3.3.2.  Claim: If one stream between a pair of addresses can get'
  contents:
  - "3.3.2.  Claim: If one stream between a pair of addresses can get\n        through,\
    \ then so can another\n   Some applications and protocols use multiple upper-layer\
    \ streams of\n   data between the same pair of addresses and initiated by the\
    \ same\n   party.  Passive-mode FTP [RFC0959], and RTP [RFC3550], are two\n  \
    \ examples of such protocols, which use separate streams for data\n   versus control\
    \ channels.\n   Today, there are many reasons why this may not be true.  Firewalls,\n\
    \   for example, may selectively allow/block specific protocol numbers\n   and/or\
    \ values in upper-layer protocol fields (such as port numbers).\n   Similarly,\
    \ middleboxes such as NATs that create per-stream state may\n   cause other streams\
    \ to fail once they run out of space to store\n   additional stream state.\n"
- title: 3.3.3.  Discussion
  contents:
  - "3.3.3.  Discussion\n   Section 5.1 of [NEWARCH] discusses the primary requirements\
    \ of the\n   original Internet architecture, including Service Generality.  It\n\
    \   states:\n      This goal was to support the widest possible range of\n   \
    \   applications, by supporting a variety of types of service at the\n      transport\
    \ level.  Services might be distinguished by speed,\n      latency, or reliability,\
    \ for example.  Service types might include\n      virtual circuit service, which\
    \ provides reliable, full-duplex byte\n      streams, and also datagram service,\
    \ which delivers individual\n      packets with no guarantees of reliability or\
    \ ordering.  The\n      requirement for datagram service was motivated by early\
    \ ARPAnet\n      experiments with packet speech (using IMP Type 3 messages).\n\
    \   The reasons that the assumptions in this section are becoming less\n   true\
    \ are due to network-layer (or higher-layer) techniques being\n   introduced that\
    \ interfere with the original requirement.  Generally,\n   these are done either\
    \ in the name of security or as a side effect of\n   solving some other problem\
    \ such as address shortage.  Work is needed\n   to investigate ways to restore\
    \ the original behavior while still\n   meeting today's security requirements.\n"
- title: 3.4.  Misconceptions about Security
  contents:
  - '3.4.  Misconceptions about Security

    '
- title: '3.4.1.  Claim: Packets are unmodified in transit'
  contents:
  - "3.4.1.  Claim: Packets are unmodified in transit\n   Some applications and upper-layer\
    \ protocols assume that a packet is\n   unmodified in transit, except for a few\
    \ well-defined fields (e.g.,\n   TTL).  Examples of this behavior include protocols\
    \ that define their\n   own integrity-protection mechanism such as a checksum.\n\
    \   This assumption is broken by NATs as discussed in [RFC2993] and other\n  \
    \ middleboxes that modify the contents of packets.  There are many\n   tunneling\
    \ technologies (e.g., [RFC4380]) that attempt to restore this\n   assumption to\
    \ some extent.\n   The IPsec architecture [RFC4301] added security to the IP model,\n\
    \   providing a way to address this problem without changing\n   applications,\
    \ although transport-mode IPsec is not currently widely\n   used over the Internet.\n"
- title: '3.4.2.  Claim: Packets are private'
  contents:
  - "3.4.2.  Claim: Packets are private\n   The assumption that data is private has\
    \ never really been true.\n   However, many old applications and protocols (e.g.,\
    \ FTP) transmit\n   passwords or other sensitive data in the clear.\n   IPsec\
    \ provides a way to address this problem without changing\n   applications, although\
    \ it is not yet widely deployed, and doing\n   encryption/decryption for all packets\
    \ can be computationally\n   expensive.\n"
- title: '3.4.3.  Claim: Source addresses are not forged'
  contents:
  - "3.4.3.  Claim: Source addresses are not forged\n   Most applications and protocols\
    \ use the source address of some\n   incoming packet when generating a response,\
    \ and hence assume that it\n   has not been forged (and as a result can often\
    \ be vulnerable to\n   various types of attacks such as reflection attacks).\n\
    \   Various mechanisms that restore this assumption include, for example,\n  \
    \ IPsec and Cryptographically Generated Addresses (CGAs) [RFC3972].\n"
- title: 3.4.4.  Discussion
  contents:
  - "3.4.4.  Discussion\n   A good discussion of threat models and common tools can\
    \ be found in\n   [RFC3552].  Protocol designers and applications developers are\n\
    \   encouraged to be familiar with that document.\n"
- title: 4.  Security Considerations
  contents:
  - "4.  Security Considerations\n   This document discusses assumptions about the\
    \ IP service model made\n   by many applications and upper-layer protocols.  Whenever\
    \ these\n   assumptions are broken, if the application or upper-layer protocol\n\
    \   has some security-related behavior that is based on the assumption,\n   then\
    \ security can be affected.\n   For example, if an application assumes that binding\
    \ to the IP address\n   of a \"trusted\" interface means that it will never receive\
    \ traffic\n   from an \"untrusted\" interface, and that assumption is broken (as\n\
    \   discussed in Section 3.2.8), then an attacker could get access to\n   private\
    \ information.\n   As a result, great care should be taken when expanding the\
    \ extent to\n   which an assumption is false.  On the other hand, application\
    \ and\n   upper-layer protocol developers should carefully consider the impact\n\
    \   of basing their security on any of the assumptions enumerated in this\n  \
    \ document.\n   It is also worth noting that many of the changes that have occurred\n\
    \   over time (e.g., firewalls, dropping directed broadcasts, etc.) that\n   are\
    \ discussed in this document were done in the interest of improving\n   security\
    \ at the expense of breaking some applications.\n"
- title: 5.  Conclusion
  contents:
  - "5.  Conclusion\n   Because a huge number of applications already exist that use\
    \ TCP/IP\n   for business-critical operations, any changes to the service model\n\
    \   need to be done with extreme care.  Extensions that merely add\n   additional\
    \ optional functionality without impacting any existing\n   applications are much\
    \ safer than extensions that change one or more\n   of the core assumptions discussed\
    \ above.  Any changes to the above\n   assumptions should only be done in accordance\
    \ with some mechanism to\n   minimize or mitigate the risks of breaking mission-critical\n\
    \   applications.  Historically, changes have been done without regard to\n  \
    \ such considerations and, as a result, the situation for applications\n   today\
    \ is already problematic.  The key to maintaining an\n   interoperable Internet\
    \ is documenting and maintaining invariants that\n   higher layers can depend\
    \ on, and being very judicious with changes.\n   In general, lower-layer protocols\
    \ should document the contract they\n   provide to higher layers; that is, what\
    \ assumptions the upper layer\n   can rely on (sometimes this is done in the form\
    \ of an applicability\n   statement).  Conversely, higher-layer protocols should\
    \ document the\n   assumptions they rely on from the lower layer (sometimes this\
    \ is done\n   in the form of requirements).\n   We must also recognize that a\
    \ successful architecture often evolves\n   as success brings growth and as technology\
    \ moves forward.  As a\n   result, the various assumptions made should be periodically\
    \ reviewed\n   when updating protocols.\n"
- title: 6.  Acknowledgements
  contents:
  - "6.  Acknowledgements\n   Chris Hopps, Dow Street, Phil Hallam-Baker, and others\
    \ provided\n   helpful discussion on various points that led to this document.\
    \  Iain\n   Calder, Brian Carpenter, Jonathan Rosenberg, Erik Nordmark, Alain\n\
    \   Durand, and Iljitsch van Beijnum also provided valuable feedback.\n"
- title: 7.  IAB Members at the Time of This Writing
  contents:
  - "7.  IAB Members at the Time of This Writing\n   Loa Andersson\n   Gonzalo Camarillo\n\
    \   Stuart Cheshire\n   Russ Housley\n   Olaf Kolkman\n   Gregory Lebovitz\n \
    \  Barry Leiba\n   Kurtis Lindqvist\n   Andrew Malis\n   Danny McPherson\n   David\
    \ Oran\n   Dave Thaler\n   Lixia Zhang\n"
- title: 8.  IAB Members at the Time of Approval
  contents:
  - "8.  IAB Members at the Time of Approval\n   Bernard Aboba\n   Marcelo Bagnulo\n\
    \   Ross Callon\n   Spencer Dawkins\n   Russ Housley\n   John Klensin\n   Olaf\
    \ Kolkman\n   Danny McPherson\n   Jon Peterson\n   Andrei Robachevsky\n   Dave\
    \ Thaler\n   Hannes Tschofenig\n"
- title: 9.  References
  contents:
  - '9.  References

    '
- title: 9.1.  Normative References
  contents:
  - "9.1.  Normative References\n   [RFC0791]  Postel, J., \"Internet Protocol\",\
    \ STD 5, RFC 791,\n              September 1981.\n   [RFC1112]  Deering, S., \"\
    Host extensions for IP multicasting\", STD 5,\n              RFC 1112, August\
    \ 1989.\n   [RFC1122]  Braden, R., \"Requirements for Internet Hosts -\n     \
    \         Communication Layers\", STD 3, RFC 1122, October 1989.\n   [RFC1546]\
    \  Partridge, C., Mendez, T., and W. Milliken, \"Host\n              Anycasting\
    \ Service\", RFC 1546, November 1993.\n   [RFC2461]  Narten, T., Nordmark, E.,\
    \ and W. Simpson, \"Neighbor\n              Discovery for IP Version 6 (IPv6)\"\
    , RFC 2461,\n              December 1998.\n   [RFC2644]  Senie, D., \"Changing\
    \ the Default for Directed Broadcasts\n              in Routers\", BCP 34, RFC\
    \ 2644, August 1999.\n   [RFC4301]  Kent, S. and K. Seo, \"Security Architecture\
    \ for the\n              Internet Protocol\", RFC 4301, December 2005.\n   [RFC4861]\
    \  Narten, T., Nordmark, E., Simpson, W., and H. Soliman,\n              \"Neighbor\
    \ Discovery for IP version 6 (IPv6)\", RFC 4861,\n              September 2007.\n"
- title: 9.2.  Informative References
  contents:
  - "9.2.  Informative References\n   [ANYCAST]  McPherson, D. and D. Oran, \"Architectural\
    \ Considerations\n              of IP Anycast\", Work in Progress, February 2010.\n\
    \   [BOSH]     Paterson, I., Smith, D., Saint-Andre, P., and J. Moffitt,\n   \
    \           \"Bidirectional-streams Over Synchronous HTTP (BOSH)\",\n        \
    \      XEP 0124, 2010,\n              <http://xmpp.org/extensions/xep-0124.html>.\n\
    \   [IEN019]   Shoch, J., \"A note on Inter-Network Naming, Addressing,\n    \
    \          and Routing\", IEN 19, January 1978,\n              <http://www.rfc-editor.org/ien/ien19.txt>.\n\
    \   [IEN023]   Cohen, D., \"On Names, Addresses and Routings\", IEN 23,\n    \
    \          January 1978, <http://www.rfc-editor.org/ien/ien23.txt>.\n   [IEN028]\
    \   Postel, J., \"Draft Internetwork Protocol Specification\",\n             \
    \ IEN 28, February 1978,\n              <http://www.rfc-editor.org/ien/ien28.pdf>.\n\
    \   [IEN135]   Sunshine, C. and J. Postel, \"Addressing Mobile Hosts in\n    \
    \          the ARPA Internet Environment\", IEN 135, March 1980,\n           \
    \   <http://www.rfc-editor.org/ien/ien135.txt>.\n   [MCAST4]   Internet Assigned\
    \ Numbers Authority, \"IPv4 Multicast\n              Addresses\",\n          \
    \    <http://www.iana.org/assignments/multicast-addresses>.\n   [MCAST6]   Internet\
    \ Assigned Numbers Authority, \"INTERNET PROTOCOL\n              VERSION 6 MULTICAST\
    \ ADDRESSES\",\n              <http://www.iana.org/assignments/\n            \
    \  ipv6-multicast-addresses>.\n   [NEWARCH]  Clark, D., et al., \"New Arch: Future\
    \ Generation Internet\n              Architecture\", Air Force Research Laboratory\
    \ Technical\n              Report AFRL-IF-RS-TR-2004-235, August 2004, <http://\n\
    \              www.dtic.mil/cgi-bin/\n              GetTRDoc?AD=ADA426770&Location=U2&doc=GetTRDoc.pdf>.\n\
    \   [ON-OFF-LINK]\n              Singh, H., Beebee, W., and E. Nordmark, \"IPv6\
    \ Subnet\n              Model\", Work in Progress, February 2008.\n   [PROTOCOLS]\n\
    \              Internet Assigned Numbers Authority, \"Protocol Numbers\",\n  \
    \            <http://www.iana.org/assignments/protocol-numbers>.\n   [REORDER]\
    \  Bennett, J., Partridge, C., and N. Shectman, \"Packet\n              reordering\
    \ is not pathological network behavior\", IEEE/ACM\n              Transactions\
    \ on Networking, Vol. 7, No. 6, December 1999.\n   [RFC0793]  Postel, J., \"Transmission\
    \ Control Protocol\", STD 7,\n              RFC 793, September 1981.\n   [RFC0925]\
    \  Postel, J., \"Multi-LAN address resolution\", RFC 925,\n              October\
    \ 1984.\n   [RFC0959]  Postel, J. and J. Reynolds, \"File Transfer Protocol\"\
    ,\n              STD 9, RFC 959, October 1985.\n   [RFC1191]  Mogul, J. and S.\
    \ Deering, \"Path MTU discovery\", RFC 1191,\n              November 1990.\n \
    \  [RFC1812]  Baker, F., \"Requirements for IP Version 4 Routers\",\n        \
    \      RFC 1812, June 1995.\n   [RFC1918]  Rekhter, Y., Moskowitz, R., Karrenberg,\
    \ D., Groot, G., and\n              E. Lear, \"Address Allocation for Private\
    \ Internets\",\n              BCP 5, RFC 1918, February 1996.\n   [RFC1958]  Carpenter,\
    \ B., \"Architectural Principles of the Internet\",\n              RFC 1958, June\
    \ 1996.\n   [RFC1981]  McCann, J., Deering, S., and J. Mogul, \"Path MTU Discovery\n\
    \              for IP version 6\", RFC 1981, August 1996.\n   [RFC2101]  Carpenter,\
    \ B., Crowcroft, J., and Y. Rekhter, \"IPv4\n              Address Behaviour Today\"\
    , RFC 2101, February 1997.\n   [RFC2491]  Armitage, G., Schulter, P., Jork, M.,\
    \ and G. Harter, \"IPv6\n              over Non-Broadcast Multiple Access (NBMA)\
    \ networks\",\n              RFC 2491, January 1999.\n   [RFC2767]  Tsuchiya,\
    \ K., HIGUCHI, H., and Y. Atarashi, \"Dual Stack\n              Hosts using the\
    \ \"Bump-In-the-Stack\" Technique (BIS)\",\n              RFC 2767, February 2000.\n\
    \   [RFC2775]  Carpenter, B., \"Internet Transparency\", RFC 2775,\n         \
    \     February 2000.\n   [RFC2923]  Lahey, K., \"TCP Problems with Path MTU Discovery\"\
    ,\n              RFC 2923, September 2000.\n   [RFC2979]  Freed, N., \"Behavior\
    \ of and Requirements for Internet\n              Firewalls\", RFC 2979, October\
    \ 2000.\n   [RFC2991]  Thaler, D. and C. Hopps, \"Multipath Issues in Unicast\
    \ and\n              Multicast Next-Hop Selection\", RFC 2991, November 2000.\n\
    \   [RFC2993]  Hain, T., \"Architectural Implications of NAT\", RFC 2993,\n  \
    \            November 2000.\n   [RFC3021]  Retana, A., White, R., Fuller, V.,\
    \ and D. McPherson,\n              \"Using 31-Bit Prefixes on IPv4 Point-to-Point\
    \ Links\",\n              RFC 3021, December 2000.\n   [RFC3069]  McPherson, D.\
    \ and B. Dykes, \"VLAN Aggregation for\n              Efficient IP Address Allocation\"\
    , RFC 3069, February 2001.\n   [RFC3077]  Duros, E., Dabbous, W., Izumiyama, H.,\
    \ Fujii, N., and Y.\n              Zhang, \"A Link-Layer Tunneling Mechanism for\n\
    \              Unidirectional Links\", RFC 3077, March 2001.\n   [RFC3338]  Lee,\
    \ S., Shin, M-K., Kim, Y-J., Nordmark, E., and A.\n              Durand, \"Dual\
    \ Stack Hosts Using \"Bump-in-the-API\" (BIA)\",\n              RFC 3338, October\
    \ 2002.\n   [RFC3550]  Schulzrinne, H., Casner, S., Frederick, R., and V.\n  \
    \            Jacobson, \"RTP: A Transport Protocol for Real-Time\n           \
    \   Applications\", STD 64, RFC 3550, July 2003.\n   [RFC3552]  Rescorla, E. and\
    \ B. Korver, \"Guidelines for Writing RFC\n              Text on Security Considerations\"\
    , BCP 72, RFC 3552,\n              July 2003.\n   [RFC3618]  Fenner, B. and D.\
    \ Meyer, \"Multicast Source Discovery\n              Protocol (MSDP)\", RFC 3618,\
    \ October 2003.\n   [RFC3775]  Johnson, D., Perkins, C., and J. Arkko, \"Mobility\
    \ Support\n              in IPv6\", RFC 3775, June 2004.\n   [RFC3819]  Karn,\
    \ P., Bormann, C., Fairhurst, G., Grossman, D.,\n              Ludwig, R., Mahdavi,\
    \ J., Montenegro, G., Touch, J., and L.\n              Wood, \"Advice for Internet\
    \ Subnetwork Designers\", BCP 89,\n              RFC 3819, July 2004.\n   [RFC3927]\
    \  Cheshire, S., Aboba, B., and E. Guttman, \"Dynamic\n              Configuration\
    \ of IPv4 Link-Local Addresses\", RFC 3927,\n              May 2005.\n   [RFC3972]\
    \  Aura, T., \"Cryptographically Generated Addresses (CGA)\",\n              RFC\
    \ 3972, March 2005.\n   [RFC4007]  Deering, S., Haberman, B., Jinmei, T., Nordmark,\
    \ E., and\n              B. Zill, \"IPv6 Scoped Address Architecture\", RFC 4007,\n\
    \              March 2005.\n   [RFC4380]  Huitema, C., \"Teredo: Tunneling IPv6\
    \ over UDP through\n              Network Address Translations (NATs)\", RFC 4380,\n\
    \              February 2006.\n   [RFC4423]  Moskowitz, R. and P. Nikander, \"\
    Host Identity Protocol\n              (HIP) Architecture\", RFC 4423, May 2006.\n\
    \   [RFC4601]  Fenner, B., Handley, M., Holbrook, H., and I. Kouvelas,\n     \
    \         \"Protocol Independent Multicast - Sparse Mode (PIM-SM):\n         \
    \     Protocol Specification (Revised)\", RFC 4601, August 2006.\n   [RFC4786]\
    \  Abley, J. and K. Lindqvist, \"Operation of Anycast\n              Services\"\
    , BCP 126, RFC 4786, December 2006.\n   [RFC4821]  Mathis, M. and J. Heffner,\
    \ \"Packetization Layer Path MTU\n              Discovery\", RFC 4821, March 2007.\n\
    \   [RFC4890]  Davies, E. and J. Mohacsi, \"Recommendations for Filtering\n  \
    \            ICMPv6 Messages in Firewalls\", RFC 4890, May 2007.\n   [RFC4903]\
    \  Thaler, D., \"Multi-Link Subnet Issues\", RFC 4903,\n              June 2007.\n\
    \   [RFC4948]  Andersson, L., Davies, E., and L. Zhang, \"Report from the\n  \
    \            IAB workshop on Unwanted Traffic March 9-10, 2006\",\n          \
    \    RFC 4948, August 2007.\n   [RFC5213]  Gundavelli, S., Leung, K., Devarapalli,\
    \ V., Chowdhury, K.,\n              and B. Patil, \"Proxy Mobile IPv6\", RFC 5213,\
    \ August 2008.\n   [RFC5218]  Thaler, D. and B. Aboba, \"What Makes For a Successful\n\
    \              Protocol?\", RFC 5218, July 2008.\n   [RFC5694]  Camarillo, G.\
    \ and IAB, \"Peer-to-Peer (P2P) Architecture:\n              Definition, Taxonomies,\
    \ Examples, and Applicability\",\n              RFC 5694, November 2009.\n   [SHARED-ADDRESSING]\n\
    \              Ford, M., Boucadair, M., Durand, A., Levis, P., and P.\n      \
    \        Roberts, \"Issues with IP Address Sharing\", Work\n              in Progress,\
    \ March 2011.\n   [WAIST-HOURGLASS]\n              Rosenberg, J., \"UDP and TCP\
    \ as the New Waist of the\n              Internet Hourglass\", Work in Progress,\
    \ February 2008.\n   [WIRELESS]\n              Kotz, D., Newport, C., and C. Elliott,\
    \ \"The mistaken\n              axioms of wireless-network research\", Dartmouth\
    \ College\n              Computer Science Technical Report TR2003-467, July 2003,\
    \ <\n              http://www.cs.dartmouth.edu/cms_file/SYS_techReport/337/\n\
    \              TR2003-467.pdf>.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Dave Thaler\n   One Microsoft Way\n   Redmond, WA  98052\n\
    \   USA\n   Phone: +1 425 703 8835\n   EMail: dthaler@microsoft.com\n   Internet\
    \ Architecture Board\n   EMail: iab@iab.org\n"
