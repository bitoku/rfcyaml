- title: __initial_text__
  contents:
  - "  Generic Security Service Application Program Interface (GSS-API) Key\n    \
    \                      Exchange with SHA-2\n"
- title: Abstract
  contents:
  - "Abstract\n   This document specifies additions and amendments to RFC 4462.  It\n\
    \   defines a new key exchange method that uses SHA-2 for integrity and\n   deprecates\
    \ weak Diffie-Hellman (DH) groups.  The purpose of this\n   specification is to\
    \ modernize the cryptographic primitives used by\n   Generic Security Service\
    \ (GSS) key exchanges.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 7841.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8732.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2020 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (https://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction\n   2.  Rationale\n   3.  Document Conventions\n\
    \   4.  New Diffie-Hellman Key Exchange Methods\n   5.  New Elliptic Curve Diffie-Hellman\
    \ Key Exchange Methods\n     5.1.  Generic GSS-API Key Exchange with ECDH\n  \
    \   5.2.  ECDH Key Exchange Methods\n   6.  Deprecated Algorithms\n   7.  IANA\
    \ Considerations\n   8.  Security Considerations\n     8.1.  New Finite Field\
    \ DH Mechanisms\n     8.2.  New Elliptic Curve DH Mechanisms\n     8.3.  GSS-API\
    \ Delegation\n   9.  References\n     9.1.  Normative References\n     9.2.  Informative\
    \ References\n   Authors' Addresses\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Secure Shell (SSH) Generic Security Service Application\
    \ Program\n   Interface (GSS-API) methods [RFC4462] allow the use of GSS-API\n\
    \   [RFC2743] for authentication and key exchange in SSH.  [RFC4462]\n   defines\
    \ three exchange methods all based on DH groups and SHA-1.\n   This document updates\
    \ [RFC4462] with new methods intended to support\n   environments that desire\
    \ to use the SHA-2 cryptographic hash\n   functions.\n"
- title: 2.  Rationale
  contents:
  - "2.  Rationale\n   Due to security concerns with SHA-1 [RFC6194] and with modular\n\
    \   exponentiation (MODP) groups with less than 2048 bits\n   [NIST-SP-800-131Ar2],\
    \ we propose the use of hashes based on SHA-2\n   [RFC6234] with DH group14, group15,\
    \ group16, group17, and group18\n   [RFC3526].  Additionally, we add support for\
    \ key exchange based on\n   Elliptic Curve Diffie-Hellman with the NIST P-256,\
    \ P-384, and P-521\n   [SEC2v2], as well as the X25519 and X448 [RFC7748] curves.\
    \  Following\n   the practice of [RFC8268], only SHA-256 and SHA-512 hashes are\
    \ used\n   for DH groups.  For NIST curves, the same curve-to-hashing algorithm\n\
    \   pairing used in [RFC5656] is adopted for consistency.\n"
- title: 3.  Document Conventions
  contents:
  - "3.  Document Conventions\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    NOT RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted\
    \ as described in\n   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear\
    \ in all\n   capitals, as shown here.\n"
- title: 4.  New Diffie-Hellman Key Exchange Methods
  contents:
  - "4.  New Diffie-Hellman Key Exchange Methods\n   This document adopts the same\
    \ naming convention defined in [RFC4462]\n   to define families of methods that\
    \ cover any GSS-API mechanism used\n   with a specific Diffie-Hellman group and\
    \ SHA-2 hash combination.\n       | Key Exchange Method Name | Implementation\
    \ Recommendations |\n       | gss-group14-sha256-*     | SHOULD/RECOMMENDED  \
    \           |\n       | gss-group15-sha512-*     | MAY/OPTIONAL              \
    \     |\n       | gss-group16-sha512-*     | SHOULD/RECOMMENDED             |\n\
    \       | gss-group17-sha512-*     | MAY/OPTIONAL                   |\n      \
    \ | gss-group18-sha512-*     | MAY/OPTIONAL                   |\n            \
    \        Table 1: New Key Exchange Algorithms\n   Each key exchange method prefix\
    \ is registered by this document.  The\n   IESG is the change controller of all\
    \ these key exchange methods; this\n   does NOT imply that the IESG is considered\
    \ to be in control of the\n   corresponding GSS-API mechanism.\n   Each method\
    \ in any family of methods (Table 2) specifies GSS-API-\n   authenticated Diffie-Hellman\
    \ key exchanges as described in\n   Section 2.1 of [RFC4462].  The method name\
    \ for each method (Table 1)\n   is the concatenation of the family name prefix\
    \ with the base64\n   encoding of the MD5 hash [RFC1321] of the ASN.1 DER encoding\n\
    \   [ISO-IEC-8825-1] of the corresponding GSS-API mechanism's OID.\n   Base64\
    \ encoding is described in Section 4 of [RFC4648].\n     | Family Name Prefix\
    \  | Hash Function | Group    | Reference    |\n     | gss-group14-sha256- | SHA-256\
    \       | 2048-bit | Section 3 of |\n     | gss-group15-sha512- | SHA-512    \
    \   | 3072-bit | Section 4 of |\n     | gss-group16-sha512- | SHA-512       |\
    \ 4096-bit | Section 5 of |\n     | gss-group17-sha512- | SHA-512       | 6144-bit\
    \ | Section 6 of |\n     | gss-group18-sha512- | SHA-512       | 8192-bit | Section\
    \ 7 of |\n                     Table 2: Family Method References\n"
- title: 5.  New Elliptic Curve Diffie-Hellman Key Exchange Methods
  contents:
  - "5.  New Elliptic Curve Diffie-Hellman Key Exchange Methods\n   In [RFC5656],\
    \ new SSH key exchange algorithms based on elliptic curve\n   cryptography are\
    \ introduced.  We reuse much of Section 4 of [RFC5656]\n   to define GSS-API-authenticated\
    \ Elliptic Curve Diffie-Hellman (ECDH)\n   key exchanges.\n   Additionally, we\
    \ also utilize the curves defined in [RFC8731] to\n   complement the three classic\
    \ NIST-defined curves required by\n   [RFC5656].\n"
- title: 5.1.  Generic GSS-API Key Exchange with ECDH
  contents:
  - "5.1.  Generic GSS-API Key Exchange with ECDH\n   This section reuses much of\
    \ the scheme defined in Section 2.1 of\n   [RFC4462] and combines it with the\
    \ scheme defined in Section 4 of\n   [RFC5656]; in particular, all checks and\
    \ verification steps\n   prescribed in Section 4 of [RFC5656] apply here as well.\n\
    \   The key-agreement schemes \"ECDHE-Curve25519\" and \"ECDHE-Curve448\"\n  \
    \ perform the Diffie-Hellman protocol using the functions X25519 and\n   X448,\
    \ respectively.  Implementations MUST compute these functions\n   using the algorithms\
    \ described in [RFC7748].  When they do so,\n   implementations MUST check whether\
    \ the computed Diffie-Hellman shared\n   secret is the all-zero value and abort\
    \ if so, as described in\n   Section 6 of [RFC7748].  Alternative implementations\
    \ of these\n   functions SHOULD abort when either the client or the server input\n\
    \   forces the shared secret to one of a small set of values, as\n   described\
    \ in Sections 6 and 7 of [RFC7748].\n   This section defers to [RFC7546] as the\
    \ source of information on GSS-\n   API context establishment operations, Section\
    \ 3 being the most\n   relevant.  All security considerations described in [RFC7546]\
    \ apply\n   here, too.\n   The parties each generate an ephemeral key pair, according\
    \ to\n   Section 3.2.1 of [SEC1v2].  Keys are verified upon receipt by the\n \
    \  parties according to Section 3.2.3.1 of [SEC1v2].\n   For NIST curves, the\
    \ keys use the uncompressed point representation\n   and MUST be converted using\
    \ the algorithm in Section 2.3.4 of\n   [SEC1v2].  If the conversion fails or\
    \ the point is transmitted using\n   the compressed representation, the key exchange\
    \ MUST fail.\n   A GSS context is established according to Section 4 of [RFC5656];\
    \ the\n   client initiates the establishment using GSS_Init_sec_context(), and\n\
    \   the server responds to it using GSS_Accept_sec_context().  For the\n   negotiation,\
    \ the client MUST set mutual_req_flag and integ_req_flag\n   to \"true\".  In\
    \ addition, deleg_req_flag MAY be set to \"true\" to\n   request access delegation,\
    \ if requested by the user.  Since the key\n   exchange process authenticates\
    \ only the host, the setting of\n   anon_req_flag is immaterial to this process.\
    \  If the client does not\n   support the \"gssapi-keyex\" user authentication\
    \ method described in\n   Section 4 of [RFC4462], or does not intend to use that\
    \ method in\n   conjunction with the GSS-API context established during key exchange,\n\
    \   then anon_req_flag SHOULD be set to \"true\".  Otherwise, this flag MAY\n\
    \   be set to \"true\" if the client wishes to hide its identity.  This key\n\
    \   exchange process will exchange only a single message token once the\n   context\
    \ has been established; therefore, the replay_det_req_flag and\n   sequence_req_flag\
    \ SHOULD be set to \"false\".\n   The client MUST include its public key with\
    \ the first message it\n   sends to the server during this process; if the server\
    \ receives more\n   than one key or none at all, the key exchange MUST fail.\n\
    \   During GSS context establishment, multiple tokens may be exchanged by\n  \
    \ the client and the server.  When the GSS context is established\n   (major_status\
    \ is GSS_S_COMPLETE), the parties check that mutual_state\n   and integ_avail\
    \ are both \"true\".  If not, the key exchange MUST fail.\n   Once a party receives\
    \ the peer's public key, it proceeds to compute a\n   shared secret K.  For NIST\
    \ curves, the computation is done according\n   to Section 3.3.1 of [SEC1v2],\
    \ and the resulting value z is converted\n   to the octet string K using the conversion\
    \ defined in Section 2.3.5\n   of [SEC1v2].  For curve25519 and curve448, the\
    \ algorithms in\n   Section 6 of [RFC7748] are used instead.\n   To verify the\
    \ integrity of the handshake, peers use the hash function\n   defined by the selected\
    \ key exchange method to calculate H:\n   H = hash(V_C || V_S || I_C || I_S ||\
    \ K_S || Q_C || Q_S || K).\n   The server uses the GSS_GetMIC() call with H as\
    \ the payload to\n   generate a Message Integrity Code (MIC).  The GSS_VerifyMIC()\
    \ call is\n   used by the client to verify the MIC.\n   If any GSS_Init_sec_context()\
    \ or GSS_Accept_sec_context() returns a\n   major_status other than GSS_S_COMPLETE\
    \ or GSS_S_CONTINUE_NEEDED, or\n   any other GSS-API call returns a major_status\
    \ other than\n   GSS_S_COMPLETE, the key exchange MUST fail.  The same recommendations\n\
    \   expressed in Section 2.1 of [RFC4462] are followed with regard to\n   error\
    \ reporting.\n   The following is an overview of the key exchange process:\n \
    \      Client                                                Server\n       Generates\
    \ ephemeral key pair.\n       Calls GSS_Init_sec_context().\n       SSH_MSG_KEXGSS_INIT\
    \  --------------->\n   (Optional)                  <------------- SSH_MSG_KEXGSS_HOSTKEY\n\
    \   (Loop)\n   |   Calls GSS_Init_sec_context().\n   |   SSH_MSG_KEXGSS_CONTINUE\
    \ ------------>\n       Verifies received key.\n       Computes shared secret.\n\
    \       Computes hash H.\n       Calls GSS_VerifyMIC( MIC, H ).\n   This is implemented\
    \ with the following messages:\n   The client sends:\n       byte      SSH_MSG_KEXGSS_INIT\n\
    \       string    output_token (from GSS_Init_sec_context())\n       string  \
    \  Q_C, client's ephemeral public key octet string\n   The server may respond\
    \ with:\n       byte     SSH_MSG_KEXGSS_HOSTKEY\n       string   server public\
    \ host key and certificates (K_S)\n   The server sends:\n       byte     SSH_MSG_KEXGSS_CONTINUE\n\
    \       string   output_token (from GSS_Accept_sec_context())\n   Each time the\
    \ client receives the message described above, it makes\n   another call to GSS_Init_sec_context().\n\
    \   The client sends:\n       byte      SSH_MSG_KEXGSS_CONTINUE\n       string\
    \    output_token (from GSS_Init_sec_context())\n   As the final message, the\
    \ server sends the following if an\n   output_token is produced:\n       byte\
    \      SSH_MSG_KEXGSS_COMPLETE\n       string    Q_S, server's ephemeral public\
    \ key octet string\n       string    mic_token (MIC of H)\n       boolean   TRUE\n\
    \       string    output_token (from GSS_Accept_sec_context())\n   If no output_token\
    \ is produced, the server sends:\n       byte      SSH_MSG_KEXGSS_COMPLETE\n \
    \      string    Q_S, server's ephemeral public key octet string\n       string\
    \    mic_token (MIC of H)\n       boolean   FALSE\n   The hash H is computed as\
    \ the HASH hash of the concatenation of the\n   following:\n       string    V_C,\
    \ the client's version string (CR, NL excluded)\n       string    V_S, server's\
    \ version string (CR, NL excluded)\n       string    I_C, payload of the client's\
    \ SSH_MSG_KEXINIT\n       string    I_S, payload of the server's SSH_MSG_KEXINIT\n\
    \       string    K_S, server's public host key\n       string    Q_C, client's\
    \ ephemeral public key octet string\n       string    Q_S, server's ephemeral\
    \ public key octet string\n       mpint     K,   shared secret\n   This value\
    \ is called the \"exchange hash\", and it is used to\n   authenticate the key\
    \ exchange.  The exchange hash SHOULD be kept\n   secret.  If no SSH_MSG_KEXGSS_HOSTKEY\
    \ message has been sent by the\n   server or received by the client, then the\
    \ empty string is used in\n   place of K_S when computing the exchange hash.\n\
    \   Since this key exchange method does not require the host key to be\n   used\
    \ for any encryption operations, the SSH_MSG_KEXGSS_HOSTKEY\n   message is OPTIONAL.\
    \  If the \"null\" host key algorithm described in\n   Section 5 of [RFC4462]\
    \ is used, this message MUST NOT be sent.\n   If the client receives an SSH_MSG_KEXGSS_CONTINUE\
    \ message after a\n   call to GSS_Init_sec_context() has returned a major_status\
    \ code of\n   GSS_S_COMPLETE, a protocol error has occurred, and the key exchange\n\
    \   MUST fail.\n   If the client receives an SSH_MSG_KEXGSS_COMPLETE message and\
    \ a call\n   to GSS_Init_sec_context() does not result in a major_status code\
    \ of\n   GSS_S_COMPLETE, a protocol error has occurred, and the key exchange\n\
    \   MUST fail.\n"
- title: 5.2.  ECDH Key Exchange Methods
  contents:
  - "5.2.  ECDH Key Exchange Methods\n       | Key Exchange Method Name | Implementation\
    \ Recommendations |\n       | gss-nistp256-sha256-*    | SHOULD/RECOMMENDED  \
    \           |\n       | gss-nistp384-sha384-*    | MAY/OPTIONAL              \
    \     |\n       | gss-nistp521-sha512-*    | MAY/OPTIONAL                   |\n\
    \       | gss-curve25519-sha256-*  | SHOULD/RECOMMENDED             |\n      \
    \ | gss-curve448-sha512-*    | MAY/OPTIONAL                   |\n            \
    \         Table 3: New Key Exchange Methods\n   Each key exchange method prefix\
    \ is registered by this document.  The\n   IESG is the change controller of all\
    \ these key exchange methods; this\n   does NOT imply that the IESG is considered\
    \ to be in control of the\n   corresponding GSS-API mechanism.\n   Each method\
    \ in any family of methods (Table 4) specifies GSS-API-\n   authenticated Elliptic\
    \ Curve Diffie-Hellman key exchanges as\n   described in Section 5.1.  The method\
    \ name for each method (Table 3)\n   is the concatenation of the family method\
    \ name with the base64\n   encoding of the MD5 hash [RFC1321] of the ASN.1 DER\
    \ encoding\n   [ISO-IEC-8825-1] of the corresponding GSS-API mechanism's OID.\n\
    \   Base64 encoding is described in Section 4 of [RFC4648].\n   | Family Name\
    \ Prefix     | Hash     | Parameters /  | Definition    |\n   |              \
    \          | Function | Function Name |               |\n   | gss-nistp256-sha256-\
    \   | SHA-256  | secp256r1     | Section       |\n   | gss-nistp384-sha384-  \
    \ | SHA-384  | secp384r1     | Section       |\n   | gss-nistp521-sha512-   |\
    \ SHA-512  | secp521r1     | Section       |\n   | gss-curve25519-sha256- | SHA-256\
    \  | X22519        | Section 5     |\n   | gss-curve448-sha512-   | SHA-512  |\
    \ X448          | Section 5     |\n                     Table 4: Family Method\
    \ References\n"
- title: 6.  Deprecated Algorithms
  contents:
  - "6.  Deprecated Algorithms\n   Because they have small key lengths and are no\
    \ longer strong in the\n   face of brute-force attacks, the algorithms in the\
    \ following table\n   are considered deprecated and SHOULD NOT be used.\n    \
    \   | Key Exchange Method Name | Implementation Recommendations |\n       | gss-group1-sha1-*\
    \        | SHOULD NOT                     |\n       | gss-group14-sha1-*     \
    \  | SHOULD NOT                     |\n       | gss-gex-sha1-*           | SHOULD\
    \ NOT                     |\n                       Table 5: Deprecated Algorithms\n"
- title: 7.  IANA Considerations
  contents:
  - "7.  IANA Considerations\n   This document augments the SSH key exchange message\
    \ names that were\n   defined in [RFC4462] (see and Section 6); IANA has listed\
    \ this\n   document as reference for those entries in the \"SSH Protocol\n   Parameters\"\
    \ [IANA-KEX-NAMES] registry.\n   In addition, IANA has updated the registry to\
    \ include the SSH key\n   exchange message names described in Sections 4 and 5.\n\
    \                 | Key Exchange Method Name | Reference |\n                 |\
    \ gss-group1-sha1-*        | RFC 8732  |\n                 | gss-group14-sha1-*\
    \       | RFC 8732  |\n                 | gss-gex-sha1-*           | RFC 8732\
    \  |\n                 | gss-group14-sha256-*     | RFC 8732  |\n            \
    \     | gss-group15-sha512-*     | RFC 8732  |\n                 | gss-group16-sha512-*\
    \     | RFC 8732  |\n                 | gss-group17-sha512-*     | RFC 8732  |\n\
    \                 | gss-group18-sha512-*     | RFC 8732  |\n                 |\
    \ gss-nistp256-sha256-*    | RFC 8732  |\n                 | gss-nistp384-sha384-*\
    \    | RFC 8732  |\n                 | gss-nistp521-sha512-*    | RFC 8732  |\n\
    \                 | gss-curve25519-sha256-*  | RFC 8732  |\n                 |\
    \ gss-curve448-sha512-*    | RFC 8732  |\n                    Table 6: Additions/Changes\
    \ to the\n                    Key Exchange Method Names Registry\n"
- title: 8.  Security Considerations
  contents:
  - '8.  Security Considerations

    '
- title: 8.1.  New Finite Field DH Mechanisms
  contents:
  - "8.1.  New Finite Field DH Mechanisms\n   Except for the use of a different secure\
    \ hash function and larger DH\n   groups, no significant changes have been made\
    \ to the protocol\n   described by [RFC4462]; therefore, all the original security\n\
    \   considerations apply.\n"
- title: 8.2.  New Elliptic Curve DH Mechanisms
  contents:
  - "8.2.  New Elliptic Curve DH Mechanisms\n   Although a new cryptographic primitive\
    \ is used with these methods,\n   the actual key exchange closely follows the\
    \ key exchange defined in\n   [RFC5656]; therefore, all the original security\
    \ considerations, as\n   well as those expressed in [RFC5656], apply.\n"
- title: 8.3.  GSS-API Delegation
  contents:
  - "8.3.  GSS-API Delegation\n   Some GSS-API mechanisms can act on a request to\
    \ delegate credentials\n   to the target host when the deleg_req_flag is set.\
    \  In this case,\n   extra care must be taken to ensure that the acceptor being\n\
    \   authenticated matches the target the user intended.  Some mechanism\n   implementations\
    \ (such as commonly used krb5 libraries) may use\n   insecure DNS resolution to\
    \ canonicalize the target name; in these\n   cases, spoofing a DNS response that\
    \ points to an attacker-controlled\n   machine may result in the user silently\
    \ delegating credentials to the\n   attacker, who can then impersonate the user\
    \ at will.\n"
- title: 9.  References
  contents:
  - '9.  References

    '
- title: 9.1.  Normative References
  contents:
  - "9.1.  Normative References\n   [RFC1321]  Rivest, R., \"The MD5 Message-Digest\
    \ Algorithm\", RFC 1321,\n              DOI 10.17487/RFC1321, April 1992,\n  \
    \            <https://www.rfc-editor.org/info/rfc1321>.\n   [RFC2119]  Bradner,\
    \ S., \"Key words for use in RFCs to Indicate\n              Requirement Levels\"\
    , BCP 14, RFC 2119,\n              DOI 10.17487/RFC2119, March 1997,\n       \
    \       <https://www.rfc-editor.org/info/rfc2119>.\n   [RFC2743]  Linn, J., \"\
    Generic Security Service Application Program\n              Interface Version\
    \ 2, Update 1\", RFC 2743,\n              DOI 10.17487/RFC2743, January 2000,\n\
    \              <https://www.rfc-editor.org/info/rfc2743>.\n   [RFC3526]  Kivinen,\
    \ T. and M. Kojo, \"More Modular Exponential (MODP)\n              Diffie-Hellman\
    \ groups for Internet Key Exchange (IKE)\",\n              RFC 3526, DOI 10.17487/RFC3526,\
    \ May 2003,\n              <https://www.rfc-editor.org/info/rfc3526>.\n   [RFC4462]\
    \  Hutzelman, J., Salowey, J., Galbraith, J., and V. Welch,\n              \"\
    Generic Security Service Application Program Interface\n              (GSS-API)\
    \ Authentication and Key Exchange for the Secure\n              Shell (SSH) Protocol\"\
    , RFC 4462, DOI 10.17487/RFC4462, May\n              2006, <https://www.rfc-editor.org/info/rfc4462>.\n\
    \   [RFC4648]  Josefsson, S., \"The Base16, Base32, and Base64 Data\n        \
    \      Encodings\", RFC 4648, DOI 10.17487/RFC4648, October 2006,\n          \
    \    <https://www.rfc-editor.org/info/rfc4648>.\n   [RFC5656]  Stebila, D. and\
    \ J. Green, \"Elliptic Curve Algorithm\n              Integration in the Secure\
    \ Shell Transport Layer\",\n              RFC 5656, DOI 10.17487/RFC5656, December\
    \ 2009,\n              <https://www.rfc-editor.org/info/rfc5656>.\n   [RFC7546]\
    \  Kaduk, B., \"Structure of the Generic Security Service\n              (GSS)\
    \ Negotiation Loop\", RFC 7546, DOI 10.17487/RFC7546,\n              May 2015,\
    \ <https://www.rfc-editor.org/info/rfc7546>.\n   [RFC7748]  Langley, A., Hamburg,\
    \ M., and S. Turner, \"Elliptic Curves\n              for Security\", RFC 7748,\
    \ DOI 10.17487/RFC7748, January\n              2016, <https://www.rfc-editor.org/info/rfc7748>.\n\
    \   [RFC8174]  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n     \
    \         2119 Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n        \
    \      May 2017, <https://www.rfc-editor.org/info/rfc8174>.\n   [RFC8731]  Adamantiadis,\
    \ A., Josefsson, S., and M. Baushke, \"Secure\n              Shell (SSH) Key Exchange\
    \ Method Using Curve25519 and\n              Curve448\", RFC 8731, DOI 10.17487/RFC8731,\
    \ February 2020,\n              <https://www.rfc-editor.org/info/rfc8731>.\n \
    \  [SEC1v2]   Standards for Efficient Cryptography Group, \"SEC 1:\n         \
    \     Elliptic Curve Cryptography\", Version 2.0, May 2009.\n   [SEC2v2]   Standards\
    \ for Elliptic Cryptography Group, \"SEC 2:\n              Recommended Elliptic\
    \ Curve Domain Parameters\",\n              Version 2.0, January 2010.\n"
- title: 9.2.  Informative References
  contents:
  - "9.2.  Informative References\n   [IANA-KEX-NAMES]\n              IANA, \"Secure\
    \ Shell (SSH) Protocol Parameters: Key\n              Exchange Method Names\"\
    ,\n              <https://www.iana.org/assignments/ssh-parameters/>.\n   [ISO-IEC-8825-1]\n\
    \              ITU-T, \"Information technology -- ASN.1 encoding rules:\n    \
    \          Specification of Basic Encoding Rules (BER), Canonical\n          \
    \    Encoding Rules (CER) and Distinguished Encoding Rules\n              (DER)\"\
    , ISO/IEC 8825-1:2015, ITU-T Recommendation X.690,\n              November 2015,\n\
    \              <http://standards.iso.org/ittf/PubliclyAvailableStandards/\n  \
    \            c068345_ISO_IEC_8825-1_2015.zip>.\n   [NIST-SP-800-131Ar2]\n    \
    \          National Institute of Standards and Technology,\n              \"Transitioning\
    \ of the Use of Cryptographic Algorithms and\n              Key Lengths\", DOI\
    \ 10.6028/NIST.SP.800-131Ar2, NIST Special\n              Publication 800-131A\
    \ Revision 2, November 2015,\n              <https://nvlpubs.nist.gov/nistpubs/SpecialPublications/\n\
    \              NIST.SP.800-131Ar2.pdf>.\n   [RFC6194]  Polk, T., Chen, L., Turner,\
    \ S., and P. Hoffman, \"Security\n              Considerations for the SHA-0 and\
    \ SHA-1 Message-Digest\n              Algorithms\", RFC 6194, DOI 10.17487/RFC6194,\
    \ March 2011,\n              <https://www.rfc-editor.org/info/rfc6194>.\n   [RFC6234]\
    \  Eastlake 3rd, D. and T. Hansen, \"US Secure Hash Algorithms\n             \
    \ (SHA and SHA-based HMAC and HKDF)\", RFC 6234,\n              DOI 10.17487/RFC6234,\
    \ May 2011,\n              <https://www.rfc-editor.org/info/rfc6234>.\n   [RFC8268]\
    \  Baushke, M., \"More Modular Exponentiation (MODP) Diffie-\n              Hellman\
    \ (DH) Key Exchange (KEX) Groups for Secure Shell\n              (SSH)\", RFC\
    \ 8268, DOI 10.17487/RFC8268, December 2017,\n              <https://www.rfc-editor.org/info/rfc8268>.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Simo Sorce\n   Red Hat, Inc.\n   140 Broadway, 24th Floor\n\
    \   New York, NY 10025\n   United States of America\n   Email: simo@redhat.com\n\
    \   Hubert Kario\n   Red Hat, Inc.\n   Purkynova 115\n   612 00 Brno\n"
