- title: __initial_text__
  contents:
  - '                           RESTCONF Protocol

    '
- title: Abstract
  contents:
  - "Abstract\n   This document describes an HTTP-based protocol that provides a\n\
    \   programmatic interface for accessing data defined in YANG, using the\n   datastore\
    \ concepts defined in the Network Configuration Protocol\n   (NETCONF).\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 7841.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc8040.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2017 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................5\n\
    \      1.1. Terminology ................................................5\n  \
    \         1.1.1. NETCONF .............................................6\n    \
    \       1.1.2. HTTP ................................................6\n      \
    \     1.1.3. YANG ................................................7\n        \
    \   1.1.4. NETCONF Notifications ...............................7\n          \
    \ 1.1.5. Terms ...............................................8\n           1.1.6.\
    \ URI Template and Examples ..........................10\n           1.1.7. Tree\
    \ Diagrams ......................................11\n      1.2. Subset of NETCONF\
    \ Functionality ...........................11\n      1.3. Data-Model-Driven API\
    \ .....................................12\n      1.4. Coexistence with NETCONF\
    \ ..................................13\n      1.5. RESTCONF Extensibility ....................................14\n\
    \   2. Transport Protocol .............................................15\n  \
    \    2.1. Integrity and Confidentiality .............................15\n    \
    \  2.2. HTTPS with X.509v3 Certificates ...........................16\n      2.3.\
    \ Certificate Validation ....................................16\n      2.4. Authenticated\
    \ Server Identity .............................16\n      2.5. Authenticated Client\
    \ Identity .............................16\n   3. Resources ......................................................17\n\
    \      3.1. Root Resource Discovery ...................................18\n  \
    \    3.2. RESTCONF Media Types ......................................20\n    \
    \  3.3. API Resource ..............................................20\n      \
    \     3.3.1. {+restconf}/data ...................................21\n        \
    \   3.3.2. {+restconf}/operations .............................22\n          \
    \ 3.3.3. {+restconf}/yang-library-version ...................22\n      3.4. Datastore\
    \ Resource ........................................23\n           3.4.1. Edit\
    \ Collision Prevention ..........................23\n      3.5. Data Resource\
    \ .............................................24\n           3.5.1. Timestamp\
    \ ..........................................25\n           3.5.2. Entity-Tag .........................................25\n\
    \           3.5.3. Encoding Data Resource Identifiers in the\n               \
    \   Request URI ........................................26\n           3.5.4.\
    \ Default Handling ...................................29\n      3.6. Operation\
    \ Resource ........................................30\n           3.6.1. Encoding\
    \ Operation Resource Input Parameters .......31\n           3.6.2. Encoding Operation\
    \ Resource Output Parameters ......36\n           3.6.3. Encoding Operation Resource\
    \ Errors .................38\n      3.7. Schema Resource ...........................................40\n\
    \      3.8. Event Stream Resource .....................................41\n  \
    \    3.9. \"errors\" YANG Data Template ...............................41\n  \
    \ 4. RESTCONF Methods ...............................................42\n    \
    \  4.1. OPTIONS ...................................................43\n      4.2.\
    \ HEAD ......................................................43\n      4.3. GET\
    \ .......................................................43\n      4.4. POST ......................................................45\n\
    \           4.4.1. Create Resource Mode ...............................45\n  \
    \         4.4.2. Invoke Operation Mode ..............................47\n    \
    \  4.5. PUT .......................................................48\n      4.6.\
    \ PATCH .....................................................50\n           4.6.1.\
    \ Plain Patch ........................................50\n      4.7. DELETE ....................................................51\n\
    \      4.8. Query Parameters ..........................................52\n  \
    \         4.8.1. The \"content\" Query Parameter ......................54\n  \
    \         4.8.2. The \"depth\" Query Parameter ........................54\n  \
    \         4.8.3. The \"fields\" Query Parameter .......................55\n  \
    \         4.8.4. The \"filter\" Query Parameter .......................56\n  \
    \         4.8.5. The \"insert\" Query Parameter .......................57\n  \
    \         4.8.6. The \"point\" Query Parameter ........................57\n  \
    \         4.8.7. The \"start-time\" Query Parameter ...................58\n  \
    \         4.8.8. The \"stop-time\" Query Parameter ....................58\n  \
    \         4.8.9. The \"with-defaults\" Query Parameter ................59\n  \
    \ 5. Messages .......................................................60\n    \
    \  5.1. Request URI Structure .....................................61\n      5.2.\
    \ Message Encoding ..........................................62\n      5.3. RESTCONF\
    \ Metadata .........................................63\n           5.3.1. XML\
    \ Metadata Encoding Example ......................64\n           5.3.2. JSON Metadata\
    \ Encoding Example .....................65\n      5.4. Return Status .............................................65\n\
    \      5.5. Message Caching ...........................................66\n  \
    \ 6. Notifications ..................................................66\n    \
    \  6.1. Server Support ............................................66\n      6.2.\
    \ Event Streams .............................................67\n      6.3. Subscribing\
    \ to Receive Notifications ......................68\n           6.3.1. NETCONF\
    \ Event Stream ...............................70\n      6.4. Receiving Event Notifications\
    \ .............................70\n   7. Error Reporting ................................................73\n\
    \      7.1. Error Response Message ....................................75\n  \
    \ 8. RESTCONF Module ................................................79\n   9.\
    \ RESTCONF Monitoring ............................................85\n      9.1.\
    \ restconf-state/capabilities ...............................86\n           9.1.1.\
    \ Query Parameter URIs ...............................87\n           9.1.2. The\
    \ \"defaults\" Protocol Capability URI .............87\n      9.2. restconf-state/streams\
    \ ....................................88\n      9.3. RESTCONF Monitoring Module\
    \ ................................89\n   10. YANG Module Library ...........................................93\n\
    \      10.1. modules-state/module .....................................93\n  \
    \ 11. IANA Considerations ...........................................94\n    \
    \  11.1. The \"restconf\" Relation Type .............................94\n    \
    \  11.2. Registrations for New URIs and YANG Modules ..............94\n      11.3.\
    \ Media Types ..............................................95\n           11.3.1.\
    \ Media Type \"application/yang-data+xml\" ............95\n           11.3.2.\
    \ Media Type \"application/yang-data+json\" ...........96\n      11.4. RESTCONF\
    \ Capability URNs .................................97\n      11.5. Registration\
    \ of \"restconf\" URN Sub-namespace .............98\n   12. Security Considerations\
    \ .......................................99\n   13. References ...................................................100\n\
    \      13.1. Normative References ....................................100\n  \
    \    13.2. Informative References ..................................104\n   Appendix\
    \ A. Example YANG Module ..................................105\n     A.1. \"example-jukebox\"\
    \ YANG Module .............................106\n   Appendix B. RESTCONF Message\
    \ Examples ............................112\n     B.1. Resource Retrieval Examples\
    \ ...............................112\n       B.1.1. Retrieve the Top-Level API\
    \ Resource ...................112\n       B.1.2. Retrieve the Server Module Information\
    \ ................114\n       B.1.3. Retrieve the Server Capability Information\
    \ ............117\n     B.2. Data Resource and Datastore Resource Examples .............118\n\
    \       B.2.1. Create New Data Resources .............................118\n  \
    \     B.2.2. Detect Datastore Resource Entity-Tag Change ...........119\n    \
    \   B.2.3. Edit a Datastore Resource .............................121\n      \
    \ B.2.4. Replace a Datastore Resource ..........................122\n       B.2.5.\
    \ Edit a Data Resource ..................................122\n     B.3. Query\
    \ Parameter Examples ..................................123\n       B.3.1. \"content\"\
    \ Parameter ...................................123\n       B.3.2. \"depth\" Parameter\
    \ .....................................126\n       B.3.3. \"fields\" Parameter\
    \ ....................................130\n       B.3.4. \"insert\" Parameter\
    \ ....................................132\n       B.3.5. \"point\" Parameter .....................................133\n\
    \       B.3.6. \"filter\" Parameter ....................................134\n\
    \       B.3.7. \"start-time\" Parameter ................................134\n\
    \       B.3.8. \"stop-time\" Parameter .................................135\n\
    \       B.3.9. \"with-defaults\" Parameter .............................135\n\
    \   Acknowledgements .................................................137\n  \
    \ Authors' Addresses ...............................................137\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   There is a need for standard mechanisms to allow Web applications\
    \ to\n   access the configuration data, state data, data-model-specific Remote\n\
    \   Procedure Call (RPC) operations, and event notifications within a\n   networking\
    \ device, in a modular and extensible manner.\n   This document defines a protocol\
    \ based on HTTP [RFC7230] called\n   \"RESTCONF\", for configuring data defined\
    \ in YANG version 1 [RFC6020]\n   or YANG version 1.1 [RFC7950], using the datastore\
    \ concepts defined\n   in the Network Configuration Protocol (NETCONF) [RFC6241].\n\
    \   NETCONF defines configuration datastores and a set of Create, Read,\n   Update,\
    \ Delete (CRUD) operations that can be used to access these\n   datastores.  NETCONF\
    \ also defines a protocol for invoking these\n   operations.  The YANG language\
    \ defines the syntax and semantics of\n   datastore content, configuration, state\
    \ data, RPC operations, and\n   event notifications.\n   RESTCONF uses HTTP methods\
    \ to provide CRUD operations on a conceptual\n   datastore containing YANG-defined\
    \ data, which is compatible with a\n   server that implements NETCONF datastores.\n\
    \   If a RESTCONF server is co-located with a NETCONF server, then there\n   are\
    \ protocol interactions with the NETCONF protocol; these\n   interactions are\
    \ described in Section 1.4.  The RESTCONF server MAY\n   provide access to specific\
    \ datastores using operation resources, as\n   described in Section 3.6.  The\
    \ RESTCONF protocol does not specify any\n   mandatory operation resources.  The\
    \ semantics of each operation\n   resource determine if and how datastores are\
    \ accessed.\n   Configuration data and state data are exposed as resources that\
    \ can\n   be retrieved with the GET method.  Resources representing\n   configuration\
    \ data can be modified with the DELETE, PATCH, POST, and\n   PUT methods.  Data\
    \ is encoded with either XML [W3C.REC-xml-20081126]\n   or JSON [RFC7159].\n \
    \  Data-model-specific RPC operations defined with the YANG \"rpc\" or\n   \"\
    action\" statements can be invoked with the POST method.  Data-model-\n   specific\
    \ event notifications defined with the YANG \"notification\"\n   statement can\
    \ be accessed.\n"
- title: 1.1.  Terminology
  contents:
  - "1.1.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"\
    SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\"\
    , and \"OPTIONAL\" in this\n   document are to be interpreted as described in\
    \ [RFC2119].\n"
- title: 1.1.1.  NETCONF
  contents:
  - "1.1.1.  NETCONF\n   The following terms are defined in [RFC6241]:\n   o  candidate\
    \ configuration datastore\n   o  configuration data\n   o  datastore\n   o  configuration\
    \ datastore\n   o  running configuration datastore\n   o  startup configuration\
    \ datastore\n   o  state data\n   o  user\n"
- title: 1.1.2.  HTTP
  contents:
  - "1.1.2.  HTTP\n   The following terms are defined in [RFC3986]:\n   o  fragment\n\
    \   o  path\n   o  query\n   The following terms are defined in [RFC7230]:\n \
    \  o  header field\n   o  message-body\n   o  request-line\n   o  request URI\n\
    \   o  status-line\n   The following terms are defined in [RFC7231]:\n   o  method\n\
    \   o  request\n   o  resource\n   The following term is defined in [RFC7232]:\n\
    \   o  entity-tag\n"
- title: 1.1.3.  YANG
  contents:
  - "1.1.3.  YANG\n   The following terms are defined in [RFC7950]:\n   o  action\n\
    \   o  container\n   o  data node\n   o  key leaf\n   o  leaf\n   o  leaf-list\n\
    \   o  list\n   o  mandatory node\n   o  ordered-by user\n   o  presence container\n\
    \   o  RPC operation\n   o  top-level data node\n"
- title: 1.1.4.  NETCONF Notifications
  contents:
  - "1.1.4.  NETCONF Notifications\n   The following term is defined in [RFC5277]:\n\
    \   o  notification replay\n"
- title: 1.1.5.  Terms
  contents:
  - "1.1.5.  Terms\n   The following terms are used within this document:\n   o  API\
    \ resource: the resource that models the RESTCONF root resource\n      and the\
    \ sub-resources to access YANG-defined content.  It is\n      defined with the\
    \ YANG data template named \"yang-api\" in the\n      \"ietf-restconf\" module.\n\
    \   o  client: a RESTCONF client.\n   o  data resource: a resource that models\
    \ a YANG data node.  It is\n      defined with YANG data definition statements.\n\
    \   o  datastore resource: the resource that models a programmatic\n      interface\
    \ using NETCONF datastore concepts.  By default, RESTCONF\n      methods access\
    \ a unified view of the underlying datastore\n      implementation on the server.\
    \  It is defined as a sub-resource\n      within the API resource.\n   o  edit\
    \ operation: a RESTCONF operation on a data resource using\n      either a POST,\
    \ PUT, PATCH, or DELETE method.  This is not the same\n      as the NETCONF edit\
    \ operation (i.e., one of the values for the\n      \"nc:operation\" attribute:\
    \ \"create\", \"replace\", \"merge\", \"delete\",\n      or \"remove\").\n   o\
    \  event stream resource: a resource that represents an SSE\n      (Server-Sent\
    \ Events) event stream.  The content consists of text\n      using the media type\
    \ \"text/event-stream\", as defined by the SSE\n      specification [W3C.REC-eventsource-20150203].\
    \  Event stream\n      contents are described in Section 3.8.\n   o  media type:\
    \ HTTP uses Internet media types [RFC2046] in the\n      \"Content-Type\" and\
    \ \"Accept\" header fields in order to provide open\n      and extensible data\
    \ typing and type negotiation.\n   o  NETCONF client: a client that implements\
    \ the NETCONF protocol.\n      Called \"client\" in [RFC6241].\n   o  NETCONF\
    \ server: a server that implements the NETCONF protocol.\n      Called \"server\"\
    \ in [RFC6241].\n   o  operation: the conceptual RESTCONF operation for a message,\n\
    \      derived from the HTTP method, request URI, header fields, and\n      message-body.\n\
    \   o  operation resource: a resource that models a data-model-specific\n    \
    \  operation that is in turn defined with a YANG \"rpc\" or \"action\"\n     \
    \ statement.  It is invoked with the POST method.\n   o  patch: a PATCH method\
    \ on the target datastore or data resource.\n      The media type of the message-body\
    \ content will identify the patch\n      type in use.\n   o  plain patch: a specific\
    \ media type for use with the PATCH method;\n      see Section 4.6.1.  It can\
    \ be used for simple \"merge\" edit\n      operations.  It is specified by a request\
    \ Content-Type of\n      \"application/yang-data+xml\" or \"application/yang-data+json\"\
    .\n   o  query parameter: a parameter (and its value, if any), encoded\n     \
    \ within the query component of the request URI.\n   o  resource type: one of\
    \ the RESTCONF resource classes defined in\n      this document.  One of \"api\"\
    , \"datastore\", \"data\", \"operation\",\n      \"schema\", or \"event stream\"\
    .\n   o  RESTCONF capability: an optional RESTCONF protocol feature that is\n\
    \      advertised by a particular server if the feature is supported on\n    \
    \  that server.  The feature is identified by an IANA-registered\n      NETCONF\
    \ Capability URI and advertised with an entry in the\n      \"capability\" leaf-list\
    \ defined in Section 9.3.\n   o  RESTCONF client: a client that implements the\
    \ RESTCONF protocol.\n   o  RESTCONF server: a server that implements the RESTCONF\
    \ protocol.\n   o  retrieval request: a request using the GET or HEAD methods.\n\
    \   o  schema resource: a resource that is used by the client to retrieve\n  \
    \    a YANG schema with the GET method.  It has a representation with\n      the\
    \ media type \"application/yang\".\n   o  server: a RESTCONF server.\n   o  \"\
    stream\" list: the set of data resource instances that describe\n      the event\
    \ stream resources available from the server.  This\n      information is defined\
    \ in the \"ietf-restconf-monitoring\" module as\n      the \"stream\" list.  It\
    \ can be retrieved using the target resource\n      \"{+restconf}/data/ietf-restconf-monitoring:restconf-state/streams/\n\
    \      stream\".  The \"stream\" list contains information about each\n      stream,\
    \ such as the URL to retrieve the event stream data.\n   o  stream resource: an\
    \ event stream resource.\n   o  target resource: the resource that is associated\
    \ with a particular\n      message, identified by the \"path\" component of the\
    \ request URI.\n   o  yang-data extension: a YANG external statement that conforms\
    \ to\n      the \"yang-data\" extension statement, found in Section 8.  The\n\
    \      yang-data extension is used to define YANG data structures that\n     \
    \ are meant to be used as YANG data templates.  These data\n      structures are\
    \ not intended to be implemented as part of a\n      configuration datastore or\
    \ as an operational state within the\n      server, so normal YANG data definition\
    \ statements cannot be used.\n   o  YANG data template: a schema for modeling\
    \ protocol message\n      components as conceptual data structures using YANG.\
    \  This allows\n      the messages to be defined in an encoding-independent manner.\n\
    \      Each YANG data template is defined with the \"yang-data\" extension,\n\
    \      found in Section 8.  Representations of instances conforming to a\n   \
    \   particular YANG data template can be defined for YANG.  The XML\n      representation\
    \ is defined in YANG version 1.1 [RFC7950] and\n      supported with the \"application/yang-data+xml\"\
    \ media type.  The\n      JSON representation is defined in \"JSON Encoding of\
    \ Data Modeled\n      with YANG\" [RFC7951] and supported with the\n      \"application/yang-data+json\"\
    \ media type.\n"
- title: 1.1.6.  URI Template and Examples
  contents:
  - "1.1.6.  URI Template and Examples\n   Throughout this document, the URI template\
    \ [RFC6570] syntax\n   \"{+restconf}\" is used to refer to the RESTCONF root resource\
    \ outside\n   of an example.  See Section 3.1 for details.\n   For simplicity,\
    \ all of the examples in this document use \"/restconf\"\n   as the discovered\
    \ RESTCONF API root path.  Many of the examples\n   throughout the document are\
    \ based on the \"example-jukebox\" YANG\n   module defined in Appendix A.1.\n\
    \   Many protocol header lines and message-body text within examples\n   throughout\
    \ the document are split into multiple lines for display\n   purposes only.  When\
    \ a line ends with a backslash (\"\\\") as the last\n   character, the line is\
    \ wrapped for display purposes.  It is to be\n   considered to be joined to the\
    \ next line by deleting the backslash,\n   the following line break, and the leading\
    \ whitespace of the\n   next line.\n"
- title: 1.1.7.  Tree Diagrams
  contents:
  - "1.1.7.  Tree Diagrams\n   A simplified graphical representation of the data model\
    \ is used in\n   this document.  The meanings of the symbols in these diagrams\
    \ are as\n   follows:\n   o  Brackets \"[\" and \"]\" enclose list keys.\n   o\
    \  Abbreviations before data node names: \"rw\" means configuration\n      data\
    \ (read-write), \"ro\" means state data (read-only), and \"x\"\n      means operation\
    \ resource (executable).\n   o  Symbols after data node names: \"?\" means an\
    \ optional node, \"!\"\n      means a presence container, and \"*\" denotes a\
    \ list and leaf-list.\n   o  Parentheses enclose choice and case nodes, and case\
    \ nodes are also\n      marked with a colon (\":\").\n   o  Ellipsis (\"...\"\
    ) stands for contents of subtrees that are not\n      shown.\n"
- title: 1.2.  Subset of NETCONF Functionality
  contents:
  - "1.2.  Subset of NETCONF Functionality\n   RESTCONF does not need to mirror the\
    \ full functionality of the\n   NETCONF protocol, but it does need to be compatible\
    \ with NETCONF.\n   RESTCONF achieves this by implementing a subset of the interaction\n\
    \   capabilities provided by the NETCONF protocol -- for instance, by\n   eliminating\
    \ datastores and explicit locking.\n   RESTCONF uses HTTP methods to implement\
    \ the equivalent of NETCONF\n   operations, enabling basic CRUD operations on\
    \ a hierarchy of\n   conceptual resources.\n   The HTTP POST, PUT, PATCH, and\
    \ DELETE methods are used to edit data\n   resources represented by YANG data\
    \ models.  These basic edit\n   operations allow the running configuration to\
    \ be altered by a\n   RESTCONF client.\n   RESTCONF is not intended to replace\
    \ NETCONF, but rather to provide an\n   HTTP interface that follows Representational\
    \ State Transfer (REST)\n   principles [REST-Dissertation] and is compatible with\
    \ the NETCONF\n   datastore model.\n"
- title: 1.3.  Data-Model-Driven API
  contents:
  - "1.3.  Data-Model-Driven API\n   RESTCONF combines the simplicity of HTTP with\
    \ the predictability and\n   automation potential of a schema-driven API.  Knowing\
    \ the YANG\n   modules used by the server, a client can derive all management\n\
    \   resource URLs and the proper structure of all RESTCONF requests and\n   responses.\
    \  This strategy obviates the need for responses provided by\n   the server to\
    \ contain Hypermedia as the Engine of Application State\n   (HATEOAS) links, originally\
    \ described in Roy Fielding's doctoral\n   dissertation [REST-Dissertation], because\
    \ the client can determine\n   the links it needs from the YANG modules.\n   RESTCONF\
    \ utilizes the YANG library [RFC7895] to allow a client to\n   discover the YANG\
    \ module conformance information for the server, in\n   case the client wants\
    \ to use it.\n   The server can optionally support the retrieval of the YANG modules\n\
    \   it uses, as identified in its YANG library.  See Section 3.7 for\n   details.\n\
    \   The URIs for data-model-specific RPC operations and datastore content\n  \
    \ are predictable, based on the YANG module definitions.\n   The RESTCONF protocol\
    \ operates on a conceptual datastore defined with\n   the YANG data modeling language.\
    \  The server lists each YANG module\n   it supports using the \"ietf-yang-library\"\
    \ YANG module defined in\n   [RFC7895].  The server MUST implement the \"ietf-yang-library\"\
    \ module,\n   which MUST identify all of the YANG modules used by the server,\
    \ in\n   the \"modules-state/module\" list.  The conceptual datastore contents,\n\
    \   data-model-specific RPC operations, and event notifications are\n   identified\
    \ by this set of YANG modules.\n   The classification of data as configuration\
    \ data or non-configuration\n   data is derived from the YANG \"config\" statement.\
    \  Behavior related\n   to the ordering of data is derived from the YANG \"ordered-by\"\
    \n   statement.  Non-configuration data is also called \"state data\".\n   The\
    \ RESTCONF datastore editing model is simple and direct, similar to\n   the behavior\
    \ of the :writable-running capability in NETCONF.  Each\n   RESTCONF edit of a\
    \ data resource within the datastore resource is\n   activated upon successful\
    \ completion of the edit.\n"
- title: 1.4.  Coexistence with NETCONF
  contents:
  - "1.4.  Coexistence with NETCONF\n   RESTCONF can be implemented on a device that\
    \ supports the NETCONF\n   protocol.\n   The following figure shows the system\
    \ components if a RESTCONF server\n   is co-located with a NETCONF server:\n \
    \        +-----------+           +-----------------+\n         |  Web app  | <------->\
    \ |                 |\n         +-----------+  RESTCONF | network device  |\n\
    \                                 |                 |\n         +-----------+\
    \           |   +-----------+ |\n         | NETCONF   | <-------> |   | datastore\
    \ | |\n         | Client    |  NETCONF  |   |           | |\n         +-----------+\
    \           |   +-----------+ |\n                                 +-----------------+\n\
    \   The following figure shows the system components if a RESTCONF server\n  \
    \ is implemented in a device that does not have a NETCONF server:\n         +-----------+\
    \           +-----------------+\n         |  Web app  | <-------> |          \
    \       |\n         +-----------+  RESTCONF | network device  |\n            \
    \                     |                 |\n                                 +-----------------+\n\
    \   There are interactions between the NETCONF protocol and RESTCONF\n   protocol\
    \ related to edit operations.  It is possible that locks are\n   in use on a RESTCONF\
    \ server, even though RESTCONF cannot manipulate\n   locks.  In such a case, the\
    \ RESTCONF protocol will not be granted\n   write access to data resources within\
    \ a datastore.\n   If the NETCONF server supports :writable-running, all edits\
    \ to\n   configuration nodes in {+restconf}/data are performed in the running\n\
    \   configuration datastore.  The URI template \"{+restconf}\" is defined\n  \
    \ in Section 1.1.6.\n   Otherwise, if the device supports :candidate, all edits\
    \ to\n   configuration nodes in {+restconf}/data are performed in the\n   candidate\
    \ configuration datastore.  The candidate MUST be\n   automatically committed\
    \ to running immediately after each successful\n   edit.  Any edits from other\
    \ sources that are in the candidate\n   datastore will also be committed.  If\
    \ a confirmed commit procedure is\n   in progress by any NETCONF client, then\
    \ any new commit will act as\n   the confirming commit.  If the NETCONF server\
    \ is expecting a\n   \"persist-id\" parameter to complete the confirmed commit\
    \ procedure,\n   then the RESTCONF edit operation MUST fail with a \"409 Conflict\"\
    \n   status-line.  The error-tag \"in-use\" is used in this case.\n   If the NETCONF\
    \ server supports :startup, the RESTCONF server MUST\n   automatically update\
    \ the non-volatile startup configuration\n   datastore, after the \"running\"\
    \ datastore has been altered as a\n   consequence of a RESTCONF edit operation.\n\
    \   If a datastore that would be modified by a RESTCONF operation has an\n   active\
    \ lock from a NETCONF client, the RESTCONF edit operation MUST\n   fail with a\
    \ \"409 Conflict\" status-line.  The error-tag value \"in-use\"\n   is returned\
    \ in this case.\n"
- title: 1.5.  RESTCONF Extensibility
  contents:
  - "1.5.  RESTCONF Extensibility\n   There are two extensibility mechanisms built\
    \ into RESTCONF:\n   o  protocol version\n   o  optional capabilities\n   This\
    \ document defines version 1 of the RESTCONF protocol.  If a\n   future version\
    \ of this protocol is defined, then that document will\n   specify how the new\
    \ version of RESTCONF is identified.  It is\n   expected that a different RESTCONF\
    \ root resource will be used, which\n   will be located using a different link\
    \ relation (see Section 3.1).\n   The server will advertise all protocol versions\
    \ that it supports in\n   its host-meta data.\n   In this example, the server\
    \ supports both RESTCONF version 1 and a\n   fictitious version 2.\n   The client\
    \ might send the following:\n      GET /.well-known/host-meta HTTP/1.1\n     \
    \ Host: example.com\n      Accept: application/xrd+xml\n   The server might respond\
    \ as follows:\n      HTTP/1.1 200 OK\n      Content-Type: application/xrd+xml\n\
    \      Content-Length: nnn\n      <XRD xmlns='http://docs.oasis-open.org/ns/xri/xrd-1.0'>\n\
    \          <Link rel='restconf' href='/restconf'/>\n          <Link rel='restconf2'\
    \ href='/restconf2'/>\n      </XRD>\n   RESTCONF also supports a server-defined\
    \ list of optional\n   capabilities, which are listed by a server using the\n\
    \   \"ietf-restconf-monitoring\" module defined in Section 9.3.  This\n   document\
    \ defines several query parameters in Section 4.8.  Each\n   optional parameter\
    \ has a corresponding capability URI, defined in\n   Section 9.1.1, that is advertised\
    \ by the server if supported.\n   The \"capability\" leaf-list can identify any\
    \ sort of server extension.\n   Currently, this extension mechanism is used to\
    \ identify optional\n   query parameters that are supported, but it is not limited\
    \ to that\n   purpose.  For example, the \"defaults\" URI defined in Section 9.1.2\n\
    \   specifies a mandatory URI identifying server default-handling\n   behavior.\n\
    \   A new sub-resource type could be identified with a capability if it\n   is\
    \ optional to implement.  Mandatory protocol features and new\n   resource types\
    \ require a new revision of the RESTCONF protocol.\n"
- title: 2.  Transport Protocol
  contents:
  - '2.  Transport Protocol

    '
- title: 2.1.  Integrity and Confidentiality
  contents:
  - "2.1.  Integrity and Confidentiality\n   HTTP [RFC7230] is an application-layer\
    \ protocol that may be layered\n   on any reliable transport-layer protocol. \
    \ RESTCONF is defined on top\n   of HTTP, but due to the sensitive nature of the\
    \ information conveyed,\n   RESTCONF requires that the transport-layer protocol\
    \ provide both data\n   integrity and confidentiality.  A RESTCONF server MUST\
    \ support the\n   Transport Layer Security (TLS) protocol [RFC5246] and SHOULD\
    \ adhere\n   to [RFC7525].  The RESTCONF protocol MUST NOT be used over HTTP\n\
    \   without using the TLS protocol.\n   RESTCONF does not require a specific version\
    \ of HTTP.  However, it is\n   RECOMMENDED that at least HTTP/1.1 [RFC7230] be\
    \ supported by all\n   implementations.\n"
- title: 2.2.  HTTPS with X.509v3 Certificates
  contents:
  - "2.2.  HTTPS with X.509v3 Certificates\n   Given the nearly ubiquitous support\
    \ for HTTP over TLS [RFC7230],\n   RESTCONF implementations MUST support the \"\
    https\" URI scheme, which\n   has the IANA-assigned default port 443.\n   RESTCONF\
    \ servers MUST present an X.509v3-based certificate when\n   establishing a TLS\
    \ connection with a RESTCONF client.  The use of\n   X.509v3-based certificates\
    \ is consistent with NETCONF over TLS\n   [RFC7589].\n"
- title: 2.3.  Certificate Validation
  contents:
  - "2.3.  Certificate Validation\n   The RESTCONF client MUST either (1) use X.509\
    \ certificate path\n   validation [RFC5280] to verify the integrity of the RESTCONF\
    \ server's\n   TLS certificate or (2) match the server's TLS certificate with\
    \ a\n   certificate obtained by a trusted mechanism (e.g., a pinned\n   certificate).\
    \  If X.509 certificate path validation fails and the\n   presented X.509 certificate\
    \ does not match a certificate obtained by\n   a trusted mechanism, the connection\
    \ MUST be terminated, as described\n   in Section 7.2.1 of [RFC5246].\n"
- title: 2.4.  Authenticated Server Identity
  contents:
  - "2.4.  Authenticated Server Identity\n   The RESTCONF client MUST check the identity\
    \ of the server according\n   to Section 3.1 of [RFC2818].\n"
- title: 2.5.  Authenticated Client Identity
  contents:
  - "2.5.  Authenticated Client Identity\n   The RESTCONF server MUST authenticate\
    \ client access to any protected\n   resource.  If the RESTCONF client is not\
    \ authenticated, the server\n   SHOULD send an HTTP response with a \"401 Unauthorized\"\
    \ status-line,\n   as defined in Section 3.1 of [RFC7235].  The error-tag value\n\
    \   \"access-denied\" is used in this case.\n   To authenticate a client, a RESTCONF\
    \ server SHOULD require\n   authentication based on TLS client certificates (Section\
    \ 7.4.6 of\n   [RFC5246]).  If certificate-based authentication is not feasible\n\
    \   (e.g., because one cannot build the required PKI for clients), then\n   HTTP\
    \ authentication MAY be used.  In the latter case, one of the HTTP\n   authentication\
    \ schemes defined in the \"Hypertext Transfer Protocol\n   (HTTP) Authentication\
    \ Scheme Registry\" (Section 5.1 in [RFC7235])\n   MUST be used.\n   A server\
    \ MAY also support the combination of both client certificates\n   and an HTTP\
    \ client authentication scheme, with the determination of\n   how to process this\
    \ combination left as an implementation decision.\n   The RESTCONF client identity\
    \ derived from the authentication\n   mechanism used is hereafter known as the\
    \ \"RESTCONF username\" and\n   subject to the NETCONF Access Control Model (NACM)\
    \ [RFC6536].  When a\n   client certificate is presented, the RESTCONF username\
    \ MUST be\n   derived using the algorithm defined in Section 7 of [RFC7589]. \
    \ For\n   all other cases, when HTTP authentication is used, the RESTCONF\n  \
    \ username MUST be provided by the HTTP authentication scheme used.\n"
- title: 3.  Resources
  contents:
  - "3.  Resources\n   The RESTCONF protocol operates on a hierarchy of resources,\
    \ starting\n   with the top-level API resource itself (Section 3.1).  Each resource\n\
    \   represents a manageable component within the device.\n   A resource can be\
    \ considered as a collection of data and the set of\n   allowed methods on that\
    \ data.  It can contain nested child resources.\n   The child resource types and\
    \ the methods allowed on them are specific\n   to the data model.\n   A resource\
    \ has a representation associated with a media type\n   identifier, as represented\
    \ by the \"Content-Type\" header field in the\n   HTTP response message.  A resource\
    \ has one or more representations,\n   each associated with a different media\
    \ type.  When a representation\n   of a resource is sent in an HTTP message, the\
    \ associated media type\n   is given in the \"Content-Type\" header.  A resource\
    \ can contain zero\n   or more nested resources.  A resource can be created and\
    \ deleted\n   independently of its parent resource, as long as the parent resource\n\
    \   exists.\n   The RESTCONF resources are accessed via a set of URIs defined\
    \ in this\n   document.  The set of YANG modules supported by the server will\n\
    \   determine the data-model-specific RPC operations, top-level data\n   nodes,\
    \ and event notification messages supported by the server.\n   The RESTCONF protocol\
    \ does not include a data resource discovery\n   mechanism.  Instead, the definitions\
    \ within the YANG modules\n   advertised by the server are used to construct an\
    \ RPC operation or\n   data resource identifier.\n"
- title: 3.1.  Root Resource Discovery
  contents:
  - "3.1.  Root Resource Discovery\n   In line with the best practices defined by\
    \ [RFC7320], RESTCONF\n   enables deployments to specify where the RESTCONF API\
    \ is located.\n   When first connecting to a RESTCONF server, a RESTCONF client\
    \ MUST\n   determine the root of the RESTCONF API.  There MUST be exactly one\n\
    \   \"restconf\" link relation returned by the device.\n   The client discovers\
    \ this by getting the \"/.well-known/host-meta\"\n   resource ([RFC6415]) and\
    \ using the <Link> element containing the\n   \"restconf\" attribute:\n   Example\
    \ returning /restconf:\n   The client might send the following:\n      GET /.well-known/host-meta\
    \ HTTP/1.1\n      Host: example.com\n      Accept: application/xrd+xml\n   The\
    \ server might respond as follows:\n      HTTP/1.1 200 OK\n      Content-Type:\
    \ application/xrd+xml\n      Content-Length: nnn\n      <XRD xmlns='http://docs.oasis-open.org/ns/xri/xrd-1.0'>\n\
    \          <Link rel='restconf' href='/restconf'/>\n      </XRD>\n   After discovering\
    \ the RESTCONF API root, the client MUST use this\n   value as the initial part\
    \ of the path in the request URI, in any\n   subsequent request for a RESTCONF\
    \ resource.\n   In this example, the client would use the path \"/restconf\" as\
    \ the\n   RESTCONF root resource.\n   Example returning /top/restconf:\n   The\
    \ client might send the following:\n      GET /.well-known/host-meta HTTP/1.1\n\
    \      Host: example.com\n      Accept: application/xrd+xml\n   The server might\
    \ respond as follows:\n      HTTP/1.1 200 OK\n      Content-Type: application/xrd+xml\n\
    \      Content-Length: nnn\n      <XRD xmlns='http://docs.oasis-open.org/ns/xri/xrd-1.0'>\n\
    \          <Link rel='restconf' href='/top/restconf'/>\n      </XRD>\n   In this\
    \ example, the client would use the path \"/top/restconf\" as the\n   RESTCONF\
    \ root resource.\n   The client can now determine the operation resources supported\
    \ by the\n   server.  In this example, a custom \"play\" operation is supported:\n\
    \   The client might send the following:\n      GET /top/restconf/operations HTTP/1.1\n\
    \      Host: example.com\n      Accept: application/yang-data+json\n   The server\
    \ might respond as follows:\n      HTTP/1.1 200 OK\n      Date: Thu, 26 Jan 2017\
    \ 20:56:30 GMT\n      Server: example-server\n      Cache-Control: no-cache\n\
    \      Last-Modified: Thu, 26 Jan 2017 16:00:14 GMT\n      Content-Type: application/yang-data+json\n\
    \      { \"operations\" : { \"example-jukebox:play\" : [null] } }\n   If the Extensible\
    \ Resource Descriptor (XRD) contains more than one\n   link relation, then only\
    \ the relation named \"restconf\" is relevant to\n   this specification.\n   Note\
    \ that any given endpoint (host:port) can only support one\n   RESTCONF server,\
    \ due to the root resource discovery mechanism.  This\n   limits the number of\
    \ RESTCONF servers that can run concurrently on a\n   host, since each server\
    \ must use a different port.\n"
- title: 3.2.  RESTCONF Media Types
  contents:
  - "3.2.  RESTCONF Media Types\n   The RESTCONF protocol defines two application-specific\
    \ media types to\n   identify representations of data that conforms to the schema\
    \ for a\n   particular YANG construct.\n   This document defines media types for\
    \ XML and JSON serialization\n   of YANG data.  Other documents MAY define other\
    \ media types for\n   different serializations of YANG data.  The\n   \"application/yang-data+xml\"\
    \ media type is defined in Section 11.3.1.\n   The \"application/yang-data+json\"\
    \ media type is defined in\n   Section 11.3.2.\n"
- title: 3.3.  API Resource
  contents:
  - "3.3.  API Resource\n   The API resource contains the RESTCONF root resource for\
    \ the RESTCONF\n   datastore and operation resources.  It is the top-level resource\n\
    \   located at {+restconf} and has the media type\n   \"application/yang-data+xml\"\
    \ or \"application/yang-data+json\".\n   YANG tree diagram for an API resource:\n\
    \     +---- {+restconf}\n           +---- data\n           | ...\n           +----\
    \ operations?\n           | ...\n           +--ro yang-library-version    string\n\
    \   The \"yang-api\" YANG data template is defined using the \"yang-data\"\n \
    \  extension in the \"ietf-restconf\" module, found in Section 8.  It\n   specifies\
    \ the structure and syntax of the conceptual child resources\n   within the API\
    \ resource.\n   The API resource can be retrieved with the GET method.\n   The\
    \ {+restconf} root resource name used in responses representing the\n   root of\
    \ the \"ietf-restconf\" module MUST identify the \"ietf-restconf\"\n   YANG module.\
    \  For example, a request to GET the root resource\n   \"/restconf\" in JSON format\
    \ will return a representation of the API\n   resource named \"ietf-restconf:restconf\"\
    .\n   This resource has the following child resources:\n        +----------------------+---------------------------------+\n\
    \        | Child Resource       | Description                     |\n        +----------------------+---------------------------------+\n\
    \        | data                 | Contains all data resources     |\n        |\
    \ operations           | Data-model-specific operations  |\n        | yang-library-version\
    \ | \"ietf-yang-library\" module date |\n        +----------------------+---------------------------------+\n\
    \                           RESTCONF API Resource\n"
- title: 3.3.1.  {+restconf}/data
  contents:
  - "3.3.1.  {+restconf}/data\n   This mandatory resource represents the combined\
    \ configuration and\n   state data resources that can be accessed by a client.\
    \  It cannot be\n   created or deleted by the client.  The datastore resource\
    \ type is\n   defined in Section 3.4.\n   Example:\n   This example request by\
    \ the client would retrieve only the\n   non-configuration data nodes that exist\
    \ within the \"library\"\n   resource, using the \"content\" query parameter (see\
    \ Section 4.8.1).\n      GET /restconf/data/example-jukebox:jukebox/library\\\n\
    \          ?content=nonconfig HTTP/1.1\n      Host: example.com\n      Accept:\
    \ application/yang-data+xml\n   The server might respond as follows:\n      HTTP/1.1\
    \ 200 OK\n      Date: Thu, 26 Jan 2017 20:56:30 GMT\n      Server: example-server\n\
    \      Cache-Control: no-cache\n      Content-Type: application/yang-data+xml\n\
    \      <library xmlns=\"https://example.com/ns/example-jukebox\">\n        <artist-count>42</artist-count>\n\
    \        <album-count>59</album-count>\n        <song-count>374</song-count>\n\
    \      </library>\n"
- title: 3.3.2.  {+restconf}/operations
  contents:
  - "3.3.2.  {+restconf}/operations\n   This optional resource is a container that\
    \ provides access to the\n   data-model-specific RPC operations supported by the\
    \ server.  The\n   server MAY omit this resource if no data-model-specific RPC\n\
    \   operations are advertised.\n   Any data-model-specific RPC operations defined\
    \ in the YANG modules\n   advertised by the server MUST be available as child\
    \ nodes of this\n   resource.\n   The access point for each RPC operation is represented\
    \ as an empty\n   leaf.  If an operation resource is retrieved, the empty leaf\n\
    \   representation is returned by the server.\n   Operation resources are defined\
    \ in Section 3.6.\n"
- title: 3.3.3.  {+restconf}/yang-library-version
  contents:
  - "3.3.3.  {+restconf}/yang-library-version\n   This mandatory leaf identifies the\
    \ revision date of the\n   \"ietf-yang-library\" YANG module that is implemented\
    \ by this server.\n   In the example that follows, the revision date for the module\
    \ version\n   found in [RFC7895] is used.\n   Example:\n      GET /restconf/yang-library-version\
    \ HTTP/1.1\n      Host: example.com\n      Accept: application/yang-data+xml\n\
    \   The server might respond as follows:\n      HTTP/1.1 200 OK\n      Date: Thu,\
    \ 26 Jan 2017 20:56:30 GMT\n      Server: example-server\n      Cache-Control:\
    \ no-cache\n      Content-Type: application/yang-data+xml\n      <yang-library-version\n\
    \        xmlns=\"urn:ietf:params:xml:ns:yang:ietf-restconf\">\\\n        2016-06-21\\\
    \n      </yang-library-version>\n"
- title: 3.4.  Datastore Resource
  contents:
  - "3.4.  Datastore Resource\n   The \"{+restconf}/data\" subtree represents the\
    \ datastore resource,\n   which is a collection of configuration data and state\
    \ data nodes.\n   This resource type is an abstraction of the system's underlying\n\
    \   datastore implementation.  The client uses it to edit and retrieve\n   data\
    \ resources, as the conceptual root of all configuration and state\n   data that\
    \ is present on the device.\n   Configuration edit transaction management and\
    \ configuration\n   persistence are handled by the server and not controlled by\
    \ the\n   client.  A datastore resource can be written directly with the POST\n\
    \   and PATCH methods.  Each RESTCONF edit of a datastore resource is\n   saved\
    \ to non-volatile storage by the server if the server supports\n   non-volatile\
    \ storage of configuration data, as described in\n   Section 1.4.\n   If the datastore\
    \ resource represented by the \"{+restconf}/data\"\n   subtree is retrieved, then\
    \ the datastore and its contents are\n   returned by the server.  The datastore\
    \ is represented by a node named\n   \"data\" in the \"ietf-restconf\" module\
    \ namespace.\n"
- title: 3.4.1.  Edit Collision Prevention
  contents:
  - "3.4.1.  Edit Collision Prevention\n   Two edit collision detection and prevention\
    \ mechanisms are provided\n   in RESTCONF for the datastore resource: a timestamp\
    \ and an\n   entity-tag.  Any change to configuration data resources updates the\n\
    \   timestamp and entity-tag of the datastore resource.  In addition, the\n  \
    \ RESTCONF server MUST return an error if the datastore is locked by an\n   external\
    \ source (e.g., NETCONF server).\n"
- title: 3.4.1.1.  Timestamp
  contents:
  - "3.4.1.1.  Timestamp\n   The last change time is maintained, and the \"Last-Modified\"\
    \ header\n   field (Section 2.2 of [RFC7232]) is returned in the response for\
    \ a\n   retrieval request.  The \"If-Unmodified-Since\" header field\n   (Section\
    \ 3.4 of [RFC7232]) can be used in edit operation requests to\n   cause the server\
    \ to reject the request if the resource has been\n   modified since the specified\
    \ timestamp.\n   The server SHOULD maintain a last-modified timestamp for the\n\
    \   datastore resource, defined in Section 3.4.  This timestamp is only\n   affected\
    \ by configuration child data resources and MUST NOT be\n   updated for changes\
    \ to non-configuration child data resources.\n   Last-modified timestamps for\
    \ data resources are discussed in\n   Section 3.5.\n   If the RESTCONF server\
    \ is co-located with a NETCONF server, then the\n   last-modified timestamp MUST\
    \ be for the \"running\" datastore.  Note\n   that it is possible that other protocols\
    \ can cause the last-modified\n   timestamp to be updated.  Such mechanisms are\
    \ out of scope for this\n   document.\n"
- title: 3.4.1.2.  Entity-Tag
  contents:
  - "3.4.1.2.  Entity-Tag\n   The server MUST maintain a unique opaque entity-tag\
    \ for the datastore\n   resource and MUST return it in the \"ETag\" (Section 2.3\
    \ of [RFC7232])\n   header in the response for a retrieval request.  The client\
    \ MAY use\n   an \"If-Match\" header in edit operation requests to cause the server\n\
    \   to reject the request if the resource entity-tag does not match the\n   specified\
    \ value.\n   The server MUST maintain an entity-tag for the top-level\n   {+restconf}/data\
    \ resource.  This entity-tag is only affected by\n   configuration data resources\
    \ and MUST NOT be updated for changes to\n   non-configuration data.  Entity-tags\
    \ for data resources are discussed\n   in Section 3.5.  Note that each representation\
    \ (e.g., XML vs. JSON)\n   requires a different entity-tag.\n   If the RESTCONF\
    \ server is co-located with a NETCONF server, then this\n   entity-tag MUST be\
    \ for the \"running\" datastore.  Note that it is\n   possible that other protocols\
    \ can cause the entity-tag to be updated.\n   Such mechanisms are out of scope\
    \ for this document.\n"
- title: 3.4.1.3.  Update Procedure
  contents:
  - "3.4.1.3.  Update Procedure\n   Changes to configuration data resources affect\
    \ the timestamp and\n   entity-tag for that resource, any ancestor data resources,\
    \ and the\n   datastore resource.\n   For example, an edit to disable an interface\
    \ might be done by setting\n   the leaf \"/interfaces/interface/enabled\" to \"\
    false\".  The \"enabled\"\n   data node and its ancestors (one \"interface\" list\
    \ instance, and the\n   \"interfaces\" container) are considered to be changed.\
    \  The datastore\n   is considered to be changed when any top-level configuration\
    \ data\n   node is changed (e.g., \"interfaces\").\n"
- title: 3.5.  Data Resource
  contents:
  - "3.5.  Data Resource\n   A data resource represents a YANG data node that is a\
    \ descendant node\n   of a datastore resource.  Each YANG-defined data node can\
    \ be uniquely\n   targeted by the request-line of an HTTP method.  Containers,\
    \ leafs,\n   leaf-list entries, list entries, anydata nodes, and anyxml nodes\
    \ are\n   data resources.\n   The representation maintained for each data resource\
    \ is the\n   YANG-defined subtree for that node.  HTTP methods on a data resource\n\
    \   affect both the targeted data node and all of its descendants,\n   if any.\n\
    \   A data resource can be retrieved with the GET method.  Data resources\n  \
    \ are accessed via the \"{+restconf}/data\" URI.  This subtree is used to\n  \
    \ retrieve and edit data resources.\n"
- title: 3.5.1.  Timestamp
  contents:
  - "3.5.1.  Timestamp\n   For configuration data resources, the server MAY maintain\
    \ a\n   last-modified timestamp for the resource and return the\n   \"Last-Modified\"\
    \ header field when it is retrieved with the GET or\n   HEAD methods.\n   The\
    \ \"Last-Modified\" header field can be used by a RESTCONF client in\n   subsequent\
    \ requests, within the \"If-Modified-Since\" and\n   \"If-Unmodified-Since\" header\
    \ fields.\n   If maintained, the resource timestamp MUST be set to the current\
    \ time\n   whenever the resource or any configuration resource within the\n  \
    \ resource is altered.  If not maintained, then the resource timestamp\n   for\
    \ the datastore MUST be used instead.  If the RESTCONF server is\n   co-located\
    \ with a NETCONF server, then the last-modified timestamp\n   for a configuration\
    \ data resource MUST represent the instance within\n   the \"running\" datastore.\n\
    \   This timestamp is only affected by configuration data resources and\n   MUST\
    \ NOT be updated for changes to non-configuration data.\n"
- title: 3.5.2.  Entity-Tag
  contents:
  - "3.5.2.  Entity-Tag\n   For configuration data resources, the server SHOULD maintain\
    \ a\n   resource entity-tag for each resource and return the \"ETag\" header\n\
    \   field when it is retrieved as the target resource with the GET or\n   HEAD\
    \ methods.  If maintained, the resource entity-tag MUST be updated\n   whenever\
    \ the resource or any configuration resource within the\n   resource is altered.\
    \  If not maintained, then the resource entity-tag\n   for the datastore MUST\
    \ be used instead.\n   The \"ETag\" header field can be used by a RESTCONF client\
    \ in\n   subsequent requests, within the \"If-Match\" and \"If-None-Match\" header\n\
    \   fields.\n   This entity-tag is only affected by configuration data resources\
    \ and\n   MUST NOT be updated for changes to non-configuration data.  If the\n\
    \   RESTCONF server is co-located with a NETCONF server, then the\n   entity-tag\
    \ for a configuration data resource MUST represent the\n   instance within the\
    \ \"running\" datastore.\n"
- title: 3.5.3.  Encoding Data Resource Identifiers in the Request URI
  contents:
  - "3.5.3.  Encoding Data Resource Identifiers in the Request URI\n   In YANG, data\
    \ nodes can be identified with an absolute XPath\n   expression, defined in [XPath],\
    \ starting from the document root to\n   the target resource.  In RESTCONF, URI-encoded\
    \ path expressions are\n   used instead.\n   A predictable location for a data\
    \ resource is important, since\n   applications will code to the YANG data model\
    \ module, which uses\n   static naming and defines an absolute path location for\
    \ all data\n   nodes.\n   A RESTCONF data resource identifier is encoded from\
    \ left to right,\n   starting with the top-level data node, according to the \"\
    api-path\"\n   rule in Section 3.5.3.1.  The node name of each ancestor of the\n\
    \   target resource node is encoded in order, ending with the node name\n   for\
    \ the target resource.  If a node in the path is defined in a\n   module other\
    \ than its parent node or its parent is the datastore,\n   then the module name\
    \ followed by a colon character (\":\") MUST be\n   prepended to the node name\
    \ in the resource identifier.  See\n   Section 3.5.3.1 for details.\n   If a data\
    \ node in the path expression is a YANG leaf-list node, then\n   the leaf-list\
    \ value MUST be encoded according to the following rules:\n   o  The identifier\
    \ for the leaf-list MUST be encoded using one path\n      segment [RFC3986].\n\
    \   o  The path segment is constructed by having the leaf-list name,\n      followed\
    \ by an \"=\" character, followed by the leaf-list value\n      (e.g., /restconf/data/top-leaflist=fred).\n\
    \   o  The leaf-list value is specified as a string, using the canonical\n   \
    \   representation for the YANG data type.  Any reserved characters\n      MUST\
    \ be percent-encoded, according to Sections 2.1 and 2.5 of\n      [RFC3986].\n\
    \   o  YANG 1.1 allows duplicate leaf-list values for non-configuration\n    \
    \  data.  In this case, there is no mechanism to specify the exact\n      matching\
    \ leaf-list instance.\n   o  The comma (\",\") character is percent-encoded [RFC3986],\
    \ even\n      though multiple key values are not possible for a leaf-list.  This\n\
    \      is more consistent and avoids special processing rules.\n   If a data node\
    \ in the path expression is a YANG list node, then the\n   key values for the\
    \ list (if any) MUST be encoded according to the\n   following rules:\n   o  The\
    \ key leaf values for a data resource representing a YANG list\n      MUST be\
    \ encoded using one path segment [RFC3986].\n   o  If there is only one key leaf\
    \ value, the path segment is\n      constructed by having the list name, followed\
    \ by an \"=\" character,\n      followed by the single key leaf value.\n   o \
    \ If there are multiple key leaf values, the path segment is\n      constructed\
    \ by having the list name, followed by the value of each\n      leaf identified\
    \ in the \"key\" statement, encoded in the order\n      specified in the YANG\
    \ \"key\" statement.  Each key leaf value except\n      the last one is followed\
    \ by a comma character.\n   o  The key value is specified as a string, using the\
    \ canonical\n      representation for the YANG data type.  Any reserved characters\n\
    \      MUST be percent-encoded, according to Sections 2.1 and 2.5 of\n      [RFC3986].\
    \  The comma (\",\") character MUST be percent-encoded if\n      it is present\
    \ in the key value.\n   o  All of the components in the \"key\" statement MUST\
    \ be encoded.\n      Partial instance identifiers are not supported.\n   o  Missing\
    \ key values are not allowed, so two consecutive commas are\n      interpreted\
    \ as a comma, followed by a zero-length string, followed\n      by a comma.  For\
    \ example, \"list1=foo,,baz\" would be interpreted as\n      a list named \"list1\"\
    \ with three key values, and the second key\n      value is a zero-length string.\n\
    \   o  Note that non-configuration lists are not required to define keys.\n  \
    \    In this case, a single list instance cannot be accessed.\n   o  The \"list-instance\"\
    \ Augmented Backus-Naur Form (ABNF) [RFC5234]\n      rule defined in Section 3.5.3.1\
    \ represents the syntax of a list\n      instance identifier.\n   Examples:\n\
    \      container top {\n          list list1 {\n              key \"key1 key2\
    \ key3\";\n               ...\n               list list2 {\n                 \
    \  key \"key4 key5\";\n                   ...\n                   leaf X { type\
    \ string; }\n               }\n           }\n           leaf-list Y {\n      \
    \       type uint32;\n           }\n       }\n   For the above YANG definition,\
    \ the container \"top\" is defined in the\n   \"example-top\" YANG module, and\
    \ a target resource URI for leaf \"X\"\n   would be encoded as follows:\n    \
    \   /restconf/data/example-top:top/list1=key1,key2,key3/\\\n          list2=key4,key5/X\n\
    \   For the above YANG definition, a target resource URI for\n   leaf-list \"\
    Y\" would be encoded as follows:\n       /restconf/data/example-top:top/Y=instance-value\n\
    \   The following example shows how reserved characters are\n   percent-encoded\
    \ within a key value.  The value of \"key1\" contains\n   a comma, single-quote,\
    \ double-quote, colon, double-quote, space,\n   and forward slash (,'\":\" /).\
    \  Note that double-quote is not a\n   reserved character and does not need to\
    \ be percent-encoded.  The\n   value of \"key2\" is the empty string, and the\
    \ value of \"key3\" is the\n   string \"foo\".\n   Example URL:\n      /restconf/data/example-top:top/list1=%2C%27\"\
    %3A\"%20%2F,,foo\n"
- title: 3.5.3.1.  ABNF for Data Resource Identifiers
  contents:
  - "3.5.3.1.  ABNF for Data Resource Identifiers\n   The \"api-path\" ABNF [RFC5234]\
    \ syntax is used to construct RESTCONF\n   path identifiers.  Note that this syntax\
    \ is used for all resources,\n   and the API path starts with the RESTCONF root\
    \ resource.  Data\n   resources are required to be identified under the \"{+restconf}/data\"\
    \n   subtree.\n   An identifier is not allowed to start with the case-insensitive\n\
    \   string \"XML\", according to YANG identifier rules.  The syntax for\n   \"\
    api-identifier\" and \"key-value\" MUST conform to the JSON identifier\n   encoding\
    \ rules in Section 4 of [RFC7951]: The RESTCONF root resource\n   path is required.\
    \  Additional sub-resource identifiers are optional.\n   The characters in a key\
    \ value string are constrained, and some\n   characters need to be percent-encoded,\
    \ as described in Section 3.5.3.\n   api-path = root *(\"/\" (api-identifier /\
    \ list-instance))\n   root = string  ;; replacement string for {+restconf}\n \
    \  api-identifier = [module-name \":\"] identifier\n   module-name = identifier\n\
    \   list-instance = api-identifier \"=\" key-value *(\",\" key-value)\n   key-value\
    \ = string  ;; constrained chars are percent-encoded\n   string = <an unquoted\
    \ string>\n   identifier = (ALPHA / \"_\")\n                *(ALPHA / DIGIT /\
    \ \"_\" / \"-\" / \".\")\n"
- title: 3.5.4.  Default Handling
  contents:
  - "3.5.4.  Default Handling\n   RESTCONF requires that a server report its default-handling\
    \ mode (see\n   Section 9.1.2 for details).  If the optional \"with-defaults\"\
    \ query\n   parameter is supported by the server, a client may use it to control\n\
    \   the retrieval of default values (see Section 4.8.9 for details).\n   If a\
    \ leaf or leaf-list is missing from the configuration and there is\n   a YANG-defined\
    \ default for that data resource, then the server MUST\n   use the YANG-defined\
    \ default as the configured value.\n   If the target of a GET method is a data\
    \ node that represents a leaf\n   or leaf-list that has a default value and the\
    \ leaf or leaf-list has\n   not been instantiated yet, the server MUST return\
    \ the default value\n   or values that are in use by the server.  In this case,\
    \ the server\n   MUST ignore its \"basic-mode\", described in Section 4.8.9, and\
    \ return\n   the default value.\n   If the target of a GET method is a data node\
    \ that represents a\n   container or list that has any child resources with default\
    \ values,\n   for the child resources that have not been given values yet, the\n\
    \   server MAY return the default values that are in use by the server in\n  \
    \ accordance with its reported default-handling mode and query\n   parameters\
    \ passed by the client.\n"
- title: 3.6.  Operation Resource
  contents:
  - "3.6.  Operation Resource\n   An operation resource represents an RPC operation\
    \ defined with the\n   YANG \"rpc\" statement or a data-model-specific action\
    \ defined with a\n   YANG \"action\" statement.  It is invoked using a POST method\
    \ on the\n   operation resource.\n   An RPC operation is invoked as:\n      POST\
    \ {+restconf}/operations/<operation>\n   The <operation> field identifies the\
    \ module name and rpc identifier\n   string for the desired operation.\n   For\
    \ example, if \"module-A\" defined a \"reset\" RPC operation, then\n   invoking\
    \ the operation would be requested as follows:\n      POST /restconf/operations/module-A:reset\
    \ HTTP/1.1\n      Server: example.com\n   An action is invoked as:\n      POST\
    \ {+restconf}/data/<data-resource-identifier>/<action>\n   where <data-resource-identifier>\
    \ contains the path to the data node\n   where the action is defined, and <action>\
    \ is the name of the action.\n   For example, if \"module-A\" defined a \"reset-all\"\
    \ action in the\n   container \"interfaces\", then invoking this action would\
    \ be requested\n   as follows:\n      POST /restconf/data/module-A:interfaces/reset-all\
    \ HTTP/1.1\n      Server: example.com\n   If the RPC operation is invoked without\
    \ errors and if the \"rpc\" or\n   \"action\" statement has no \"output\" section,\
    \ the response message\n   MUST NOT include a message-body and MUST send a \"\
    204 No Content\"\n   status-line instead.\n   All operation resources representing\
    \ RPC operations supported by the\n   server MUST be identified in the \"{+restconf}/operations\"\
    \ subtree,\n   defined in Section 3.3.2.  Operation resources representing YANG\n\
    \   actions are not identified in this subtree, since they are invoked\n   using\
    \ a URI within the \"{+restconf}/data\" subtree.\n"
- title: 3.6.1.  Encoding Operation Resource Input Parameters
  contents:
  - "3.6.1.  Encoding Operation Resource Input Parameters\n   If the \"rpc\" or \"\
    action\" statement has an \"input\" section, then\n   instances of these input\
    \ parameters are encoded in the module\n   namespace where the \"rpc\" or \"action\"\
    \ statement is defined, in an XML\n   element or JSON object named \"input\",\
    \ which is in the module\n   namespace where the \"rpc\" or \"action\" statement\
    \ is defined.\n   If the \"rpc\" or \"action\" statement has an \"input\" section\
    \ and the\n   \"input\" object tree contains any child data nodes that are considered\n\
    \   mandatory nodes, then a message-body MUST be sent by the client in\n   the\
    \ request.\n   If the \"rpc\" or \"action\" statement has an \"input\" section\
    \ and the\n   \"input\" object tree does not contain any child nodes that are\n\
    \   considered mandatory nodes, then a message-body MAY be sent by the\n   client\
    \ in the request.\n   If the \"rpc\" or \"action\" statement has no \"input\"\
    \ section, the\n   request message MUST NOT include a message-body.\n   Examples:\n\
    \   The following YANG module is used for the RPC operation examples in\n   this\
    \ section.\n   module example-ops {\n     namespace \"https://example.com/ns/example-ops\"\
    ;\n     prefix \"ops\";\n     organization \"Example, Inc.\";\n     contact \"\
    support at example.com\";\n     description \"Example Operations Data Model Module.\"\
    ;\n     revision \"2016-07-07\" {\n       description \"Initial version.\";\n\
    \       reference \"example.com document 3-3373.\";\n     }\n     rpc reboot {\n\
    \       description \"Reboot operation.\";\n       input {\n         leaf delay\
    \ {\n           type uint32;\n           units \"seconds\";\n           default\
    \ 0;\n           description\n             \"Number of seconds to wait before\
    \ initiating the\n              reboot operation.\";\n         }\n         leaf\
    \ message {\n           type string;\n           description\n             \"\
    Log message to display when reboot is started.\";\n         }\n         leaf language\
    \ {\n           type string;\n           description \"Language identifier string.\"\
    ;\n           reference \"RFC 5646.\";\n         }\n       }\n     }\n     rpc\
    \ get-reboot-info {\n       description\n         \"Retrieve parameters used in\
    \ the last reboot operation.\";\n       output {\n         leaf reboot-time {\n\
    \           type uint32;\n           description\n             \"The 'delay' parameter\
    \ used in the last reboot\n              operation.\";\n         }\n         leaf\
    \ message {\n           type string;\n           description\n             \"\
    The 'message' parameter used in the last reboot\n              operation.\";\n\
    \         }\n         leaf language {\n           type string;\n           description\n\
    \             \"The 'language' parameter used in the last reboot\n           \
    \   operation.\";\n         }\n       }\n     }\n   }\n   The following YANG module\
    \ is used for the YANG action examples in\n   this section.\n   module example-actions\
    \ {\n     yang-version 1.1;\n     namespace \"https://example.com/ns/example-actions\"\
    ;\n     prefix \"act\";\n     import ietf-yang-types { prefix yang; }\n     organization\
    \ \"Example, Inc.\";\n     contact \"support at example.com\";\n     description\
    \ \"Example Actions Data Model Module.\";\n     revision \"2016-07-07\" {\n  \
    \     description \"Initial version.\";\n       reference \"example.com document\
    \ 2-9973.\";\n     }\n     container interfaces {\n       description \"System\
    \ interfaces.\";\n       list interface {\n         key name;\n         description\
    \ \"One interface entry.\";\n         leaf name {\n           type string;\n \
    \          description \"Interface name.\";\n         }\n         action reset\
    \ {\n           description \"Reset an interface.\";\n           input {\n   \
    \          leaf delay {\n               type uint32;\n               units \"\
    seconds\";\n               default 0;\n               description\n          \
    \       \"Number of seconds to wait before starting the\n                  interface\
    \ reset.\";\n             }\n           }\n         }\n         action get-last-reset-time\
    \ {\n           description\n             \"Retrieve the last interface reset\
    \ time.\";\n           output {\n             leaf last-reset {\n            \
    \   type yang:date-and-time;\n               mandatory true;\n               description\n\
    \                 \"Date and time of the last interface reset, or\n          \
    \        the last reboot time of the device.\";\n             }\n           }\n\
    \         }\n       }\n     }\n   }\n   RPC Input Example:\n   The client might\
    \ send the following POST request message to invoke\n   the \"reboot\" RPC operation:\n\
    \      POST /restconf/operations/example-ops:reboot HTTP/1.1\n      Host: example.com\n\
    \      Content-Type: application/yang-data+xml\n      <input xmlns=\"https://example.com/ns/example-ops\"\
    >\n       <delay>600</delay>\n       <message>Going down for system maintenance</message>\n\
    \       <language>en-US</language>\n      </input>\n   The server might respond\
    \ as follows:\n      HTTP/1.1 204 No Content\n      Date: Thu, 26 Jan 2017 20:56:30\
    \ GMT\n      Server: example-server\n   The same example request message is shown\
    \ here using JSON encoding:\n      POST /restconf/operations/example-ops:reboot\
    \ HTTP/1.1\n      Host: example.com\n      Content-Type: application/yang-data+json\n\
    \      {\n        \"example-ops:input\" : {\n          \"delay\" : 600,\n    \
    \      \"message\" : \"Going down for system maintenance\",\n          \"language\"\
    \ : \"en-US\"\n        }\n      }\n   Action Input Example:\n   The client might\
    \ send the following POST request message to invoke\n   the \"reset\" action:\n\
    \      POST /restconf/data/example-actions:interfaces/\\\n         interface=eth0/reset\
    \ HTTP/1.1\n      Host: example.com\n      Content-Type: application/yang-data+xml\n\
    \      <input xmlns=\"https://example.com/ns/example-actions\">\n        <delay>600</delay>\n\
    \      </input>\n   The server might respond as follows:\n      HTTP/1.1 204 No\
    \ Content\n      Date: Thu, 26 Jan 2017 20:56:30 GMT\n      Server: example-server\n\
    \   The same example request message is shown here using JSON encoding:\n    \
    \  POST /restconf/data/example-actions:interfaces/\\\n        interface=eth0/reset\
    \ HTTP/1.1\n      Host: example.com\n      Content-Type: application/yang-data+json\n\
    \      { \"example-actions:input\" : {\n          \"delay\" : 600\n        }\n\
    \      }\n"
- title: 3.6.2.  Encoding Operation Resource Output Parameters
  contents:
  - "3.6.2.  Encoding Operation Resource Output Parameters\n   If the \"rpc\" or \"\
    action\" statement has an \"output\" section, then\n   instances of these output\
    \ parameters are encoded in the module\n   namespace where the \"rpc\" or \"action\"\
    \ statement is defined, in an XML\n   element or JSON object named \"output\"\
    , which is in the module\n   namespace where the \"rpc\" or \"action\" statement\
    \ is defined.\n   If the RPC operation is invoked without errors, and if the \"\
    rpc\" or\n   \"action\" statement has an \"output\" section and the \"output\"\
    \ object\n   tree contains any child data nodes that are considered mandatory\n\
    \   nodes, then a response message-body MUST be sent by the server in the\n  \
    \ response.\n   If the RPC operation is invoked without errors, and if the \"\
    rpc\" or\n   \"action\" statement has an \"output\" section and the \"output\"\
    \ object\n   tree does not contain any child nodes that are considered mandatory\n\
    \   nodes, then a response message-body MAY be sent by the server in the\n   response.\n\
    \   The request URI is not returned in the response.  Knowledge of the\n   request\
    \ URI may be needed to associate the output with the specific\n   \"rpc\" or \"\
    action\" statement used in the request.\n   Examples:\n   RPC Output Example:\n\
    \   The \"example-ops\" YANG module defined in Section 3.6.1 is used for\n   this\
    \ example.\n   The client might send the following POST request message to invoke\n\
    \   the \"get-reboot-info\" operation:\n      POST /restconf/operations/example-ops:get-reboot-info\
    \ HTTP/1.1\n      Host: example.com\n      Accept: application/yang-data+json\n\
    \   The server might respond as follows:\n      HTTP/1.1 200 OK\n      Date: Thu,\
    \ 26 Jan 2017 20:56:30 GMT\n      Server: example-server\n      Content-Type:\
    \ application/yang-data+json\n      {\n        \"example-ops:output\" : {\n  \
    \        \"reboot-time\" : 30,\n          \"message\" : \"Going down for system\
    \ maintenance\",\n          \"language\" : \"en-US\"\n        }\n      }\n   The\
    \ same response is shown here using XML encoding:\n      HTTP/1.1 200 OK\n   \
    \   Date: Thu, 26 Jan 2017 20:56:30 GMT\n      Server: example-server\n      Content-Type:\
    \ application/yang-data+xml\n      <output xmlns=\"https://example.com/ns/example-ops\"\
    >\n        <reboot-time>30</reboot-time>\n        <message>Going down for system\
    \ maintenance</message>\n        <language>en-US</language>\n      </output>\n\
    \   Action Output Example:\n   The \"example-actions\" YANG module defined in\
    \ Section 3.6.1 is used\n   for this example.\n   The client might send the following\
    \ POST request message to invoke\n   the \"get-last-reset-time\" action:\n   \
    \   POST /restconf/data/example-actions:interfaces/\\\n         interface=eth0/get-last-reset-time\
    \ HTTP/1.1\n      Host: example.com\n      Accept: application/yang-data+json\n\
    \   The server might respond as follows:\n      HTTP/1.1 200 OK\n      Date: Thu,\
    \ 26 Jan 2017 20:56:30 GMT\n      Server: example-server\n      Content-Type:\
    \ application/yang-data+json\n      {\n        \"example-actions:output\" : {\n\
    \          \"last-reset\" : \"2015-10-10T02:14:11Z\"\n        }\n      }\n"
- title: 3.6.3.  Encoding Operation Resource Errors
  contents:
  - "3.6.3.  Encoding Operation Resource Errors\n   If any errors occur while attempting\
    \ to invoke the operation or\n   action, then an \"errors\" media type is returned\
    \ with the appropriate\n   error status.\n   If (1) the RPC operation input is\
    \ not valid or (2) the RPC operation\n   is invoked but errors occur, then a message-body\
    \ containing an\n   \"errors\" resource MUST be sent by the server, as defined\
    \ in\n   Section 3.9.\n   Using the \"reboot\" RPC operation from the example\
    \ in Section 3.6.1,\n   the client might send the following POST request message:\n\
    \      POST /restconf/operations/example-ops:reboot HTTP/1.1\n      Host: example.com\n\
    \      Content-Type: application/yang-data+xml\n      <input xmlns=\"https://example.com/ns/example-ops\"\
    >\n        <delay>-33</delay>\n        <message>Going down for system maintenance</message>\n\
    \        <language>en-US</language>\n      </input>\n   The server might respond\
    \ with an \"invalid-value\" error:\n      HTTP/1.1 400 Bad Request\n      Date:\
    \ Thu, 26 Jan 2017 20:56:30 GMT\n      Server: example-server\n      Content-Type:\
    \ application/yang-data+xml\n      <errors xmlns=\"urn:ietf:params:xml:ns:yang:ietf-restconf\"\
    >\n        <error>\n          <error-type>protocol</error-type>\n          <error-tag>invalid-value</error-tag>\n\
    \          <error-path xmlns:ops=\"https://example.com/ns/example-ops\">\n   \
    \         /ops:input/ops:delay\n          </error-path>\n          <error-message>Invalid\
    \ input parameter</error-message>\n        </error>\n      </errors>\n   The same\
    \ response is shown here using JSON encoding:\n      HTTP/1.1 400 Bad Request\n\
    \      Date: Thu, 26 Jan 2017 20:56:30 GMT\n      Server: example-server\n   \
    \   Content-Type: application/yang-data+json\n      { \"ietf-restconf:errors\"\
    \ : {\n          \"error\" : [\n            {\n              \"error-type\" :\
    \ \"protocol\",\n              \"error-tag\" : \"invalid-value\",\n          \
    \    \"error-path\" : \"/example-ops:input/delay\",\n              \"error-message\"\
    \ : \"Invalid input parameter\"\n            }\n          ]\n        }\n     \
    \ }\n"
- title: 3.7.  Schema Resource
  contents:
  - "3.7.  Schema Resource\n   The server can optionally support the retrieval of\
    \ the YANG modules\n   it uses.  If retrieval is supported, then the \"schema\"\
    \ leaf MUST be\n   present in the associated \"module\" list entry, defined in\
    \ [RFC7895].\n   To retrieve a YANG module, a client first needs to get the URL\
    \ for\n   retrieving the schema, which is stored in the \"schema\" leaf.  Note\n\
    \   that there is no required structure for this URL.  The URL value\n   shown\
    \ below is just an example.\n   The client might send the following GET request\
    \ message:\n      GET /restconf/data/ietf-yang-library:modules-state/\\\n    \
    \      module=example-jukebox,2016-08-15/schema HTTP/1.1\n      Host: example.com\n\
    \      Accept: application/yang-data+json\n   The server might respond as follows:\n\
    \      HTTP/1.1 200 OK\n      Date: Thu, 26 Jan 2017 20:56:30 GMT\n      Server:\
    \ example-server\n      Content-Type: application/yang-data+json\n      {\n  \
    \      \"ietf-yang-library:schema\" :\n         \"https://example.com/mymodules/example-jukebox/2016-08-15\"\
    \n      }\n   Next, the client needs to retrieve the actual YANG schema.\n   The\
    \ client might send the following GET request message:\n      GET https://example.com/mymodules/example-jukebox/\\\
    \n         2016-08-15 HTTP/1.1\n      Host: example.com\n      Accept: application/yang\n\
    \   The server might respond as follows:\n      HTTP/1.1 200 OK\n      Date: Thu,\
    \ 26 Jan 2017 20:56:30 GMT\n      Server: example-server\n      Content-Type:\
    \ application/yang\n         // entire YANG module contents deleted for this example...\n"
- title: 3.8.  Event Stream Resource
  contents:
  - "3.8.  Event Stream Resource\n   An event stream resource represents a source\
    \ for system-generated\n   event notifications.  Each stream is created and modified\
    \ by the\n   server only.  A client can retrieve a stream resource or initiate\
    \ a\n   long-poll server-sent event stream [W3C.REC-eventsource-20150203],\n \
    \  using the procedure specified in Section 6.3.\n   An event stream functions\
    \ according to the \"NETCONF Event\n   Notifications\" specification [RFC5277].\
    \  The available streams can be\n   retrieved from the \"stream\" list, which\
    \ specifies the syntax and\n   semantics of the stream resources.\n"
- title: 3.9.  "errors" YANG Data Template
  contents:
  - "3.9.  \"errors\" YANG Data Template\n   The \"errors\" YANG data template models\
    \ a collection of error\n   information that is sent as the message-body in a\
    \ server response\n   message if an error occurs while processing a request message.\
    \  It is\n   not considered as a resource type because no instances can be\n \
    \  retrieved with a GET request.\n   The \"ietf-restconf\" YANG module contains\
    \ the \"yang-errors\" YANG data\n   template, which specifies the syntax and semantics\
    \ of an \"errors\"\n   container within a RESTCONF response.  RESTCONF error-handling\n\
    \   behavior is defined in Section 7.\n"
- title: 4.  RESTCONF Methods
  contents:
  - "4.  RESTCONF Methods\n   The RESTCONF protocol uses HTTP methods to identify\
    \ the CRUD\n   operations requested for a particular resource.\n   The following\
    \ table shows how the RESTCONF operations relate to\n   NETCONF protocol operations.\n\
    \   +----------+-------------------------------------------------------+\n   |\
    \ RESTCONF | NETCONF                                               |\n   +----------+-------------------------------------------------------+\n\
    \   | OPTIONS  | none                                                  |\n   |\
    \          |                                                       |\n   | HEAD\
    \     | <get-config>, <get>                                   |\n   |        \
    \  |                                                       |\n   | GET      |\
    \ <get-config>, <get>                                   |\n   |          |   \
    \                                                    |\n   | POST     | <edit-config>\
    \ (nc:operation=\"create\")                 |\n   |          |               \
    \                                        |\n   | POST     | invoke an RPC operation\
    \                               |\n   |          |                           \
    \                            |\n   | PUT      | <copy-config> (PUT on datastore)\
    \                      |\n   |          |                                    \
    \                   |\n   | PUT      | <edit-config> (nc:operation=\"create/replace\"\
    )         |\n   |          |                                                 \
    \      |\n   | PATCH    | <edit-config> (nc:operation depends on PATCH content)\
    \ |\n   |          |                                                       |\n\
    \   | DELETE   | <edit-config> (nc:operation=\"delete\")                 |\n \
    \  +----------+-------------------------------------------------------+\n    \
    \                     CRUD Methods in RESTCONF\n   The \"remove\" edit operation\
    \ attribute for the NETCONF <edit-config>\n   RPC operation is not supported by\
    \ the HTTP DELETE method.  The\n   resource must exist or the DELETE method will\
    \ fail.  The PATCH method\n   is equivalent to a \"merge\" edit operation when\
    \ using a plain patch\n   (see Section 4.6.1); other media types may provide more\
    \ granular\n   control.\n   Access control mechanisms are used to limit what CRUD\
    \ operations can\n   be used.  In particular, RESTCONF is compatible with the\
    \ NETCONF\n   Access Control Model (NACM) [RFC6536], as there is a specific mapping\n\
    \   between RESTCONF and NETCONF operations.  The resource path needs to\n   be\
    \ converted internally by the server to the corresponding YANG\n   instance identifier.\
    \  Using this information, the server can apply\n   the NACM access control rules\
    \ to RESTCONF messages.\n   The server MUST NOT allow any RESTCONF operation for\
    \ any resources\n   that the client is not authorized to access.\n   The implementation\
    \ of all methods (except PATCH [RFC5789]) is defined\n   in [RFC7231].  This section\
    \ defines the RESTCONF protocol usage for\n   each HTTP method.\n"
- title: 4.1.  OPTIONS
  contents:
  - "4.1.  OPTIONS\n   The OPTIONS method is sent by the client to discover which\
    \ methods\n   are supported by the server for a specific resource (e.g., GET,\
    \ POST,\n   DELETE).  The server MUST implement this method.\n   The \"Accept-Patch\"\
    \ header field MUST be supported and returned in the\n   response to the OPTIONS\
    \ request, as defined in [RFC5789].\n"
- title: 4.2.  HEAD
  contents:
  - "4.2.  HEAD\n   The RESTCONF server MUST support the HEAD method.  The HEAD method\
    \ is\n   sent by the client to retrieve just the header fields (which contain\n\
    \   the metadata for a resource) that would be returned for the\n   comparable\
    \ GET method, without the response message-body.  It is\n   supported for all\
    \ resources that support the GET method.\n   The request MUST contain a request\
    \ URI that contains at least the\n   root resource.  The same query parameters\
    \ supported by the GET method\n   are supported by the HEAD method.\n   The access\
    \ control behavior is enforced as if the method was GET\n   instead of HEAD. \
    \ The server MUST respond the same as if the method\n   was GET instead of HEAD,\
    \ except that no response message-body is\n   included.\n"
- title: 4.3.  GET
  contents:
  - "4.3.  GET\n   The RESTCONF server MUST support the GET method.  The GET method\
    \ is\n   sent by the client to retrieve data and metadata for a resource.  It\n\
    \   is supported for all resource types, except operation resources.  The\n  \
    \ request MUST contain a request URI that contains at least the root\n   resource.\n\
    \   The server MUST NOT return any data resources for which the user does\n  \
    \ not have read privileges.  If the user is not authorized to read the\n   target\
    \ resource, an error response containing a \"401 Unauthorized\"\n   status-line\
    \ SHOULD be returned.  The error-tag value \"access-denied\"\n   is returned in\
    \ this case.  A server MAY return a \"404 Not Found\"\n   status-line, as described\
    \ in Section 6.5.4 in [RFC7231].  The\n   error-tag value \"invalid-value\" is\
    \ returned in this case.\n   If the user is authorized to read some but not all\
    \ of the target\n   resource, the unauthorized content is omitted from the response\n\
    \   message-body, and the authorized content is returned to the client.\n   If\
    \ any content is returned to the client, then the server MUST send a\n   valid\
    \ response message-body.  More than one element MUST NOT be\n   returned for XML\
    \ encoding.  If multiple elements are sent in a JSON\n   message-body, then they\
    \ MUST be sent as a JSON array.  In this case,\n   any timestamp or entity-tag\
    \ returned in the response MUST be\n   associated with the first element returned.\n\
    \   If a retrieval request for a data resource representing a YANG\n   leaf-list\
    \ or list object identifies more than one instance and XML\n   encoding is used\
    \ in the response, then an error response containing a\n   \"400 Bad Request\"\
    \ status-line MUST be returned by the server.  The\n   error-tag value \"invalid-value\"\
    \ is used in this case.  Note that a\n   non-configuration list is not required\
    \ to define any keys.  In this\n   case, the retrieval of a single list instance\
    \ is not possible.\n   If a retrieval request for a data resource represents an\
    \ instance\n   that does not exist, then an error response containing a \"404\
    \ Not\n   Found\" status-line MUST be returned by the server.  The error-tag\n\
    \   value \"invalid-value\" is used in this case.\n   If the target resource of\
    \ a retrieval request is for an operation\n   resource, then a \"405 Method Not\
    \ Allowed\" status-line MUST be\n   returned by the server.  The error-tag value\n\
    \   \"operation-not-supported\" is used in this case.\n   Note that the way that\
    \ access control is applied to data resources\n   may not be completely compatible\
    \ with HTTP caching.  The\n   \"Last-Modified\" and \"ETag\" header fields maintained\
    \ for a data\n   resource are not affected by changes to the access control rules\
    \ for\n   that data resource.  It is possible for the representation of a data\n\
    \   resource that is visible to a particular client to be changed without\n  \
    \ detection via the \"Last-Modified\" or \"ETag\" values.\n   Example:\n   The\
    \ client might request the response header fields for an XML\n   representation\
    \ of a specific \"album\" resource:\n      GET /restconf/data/example-jukebox:jukebox/\\\
    \n         library/artist=Foo%20Fighters/album=Wasting%20Light HTTP/1.1\n    \
    \  Host: example.com\n      Accept: application/yang-data+xml\n   The server might\
    \ respond as follows:\n      HTTP/1.1 200 OK\n      Date: Thu, 26 Jan 2017 20:56:30\
    \ GMT\n      Server: example-server\n      Content-Type: application/yang-data+xml\n\
    \      Cache-Control: no-cache\n      ETag: \"a74eefc993a2b\"\n      Last-Modified:\
    \ Thu, 26 Jan 2017 14:02:14 GMT\n      <album xmlns=\"http://example.com/ns/example-jukebox\"\
    \n             xmlns:jbox=\"http://example.com/ns/example-jukebox\">\n       \
    \ <name>Wasting Light</name>\n        <genre>jbox:alternative</genre>\n      \
    \  <year>2011</year>\n      </album>\n   Refer to Appendix B.1 for more resource\
    \ retrieval examples.\n"
- title: 4.4.  POST
  contents:
  - "4.4.  POST\n   The RESTCONF server MUST support the POST method.  The POST method\
    \ is\n   sent by the client to create a data resource or invoke an operation\n\
    \   resource.  The server uses the target resource type to determine how\n   to\
    \ process the request.\n      +-----------+------------------------------------------------+\n\
    \      | Type      | Description                                    |\n      +-----------+------------------------------------------------+\n\
    \      | Datastore | Create a top-level configuration data resource |\n      |\
    \ Data      | Create a configuration data child resource     |\n      | Operation\
    \ | Invoke an RPC operation                        |\n      +-----------+------------------------------------------------+\n\
    \                     Resource Types That Support POST\n"
- title: 4.4.1.  Create Resource Mode
  contents:
  - "4.4.1.  Create Resource Mode\n   If the target resource type is a datastore or\
    \ data resource, then the\n   POST is treated as a request to create a top-level\
    \ resource or child\n   resource, respectively.  The message-body is expected\
    \ to contain the\n   content of a child resource to create within the parent (target\n\
    \   resource).  The message-body MUST contain exactly one instance of the\n  \
    \ expected data resource.  The data model for the child tree is the\n   subtree,\
    \ as defined by YANG for the child resource.\n   The \"insert\" (Section 4.8.5)\
    \ and \"point\" (Section 4.8.6) query\n   parameters MUST be supported by the\
    \ POST method for datastore and\n   data resources.  These parameters are only\
    \ allowed if the list or\n   leaf-list is \"ordered-by user\".\n   If the POST\
    \ method succeeds, a \"201 Created\" status-line is returned\n   and there is\
    \ no response message-body.  A \"Location\" header field\n   identifying the child\
    \ resource that was created MUST be present in\n   the response in this case.\n\
    \   If the data resource already exists, then the POST request MUST fail\n   and\
    \ a \"409 Conflict\" status-line MUST be returned.  The error-tag\n   value \"\
    resource-denied\" is used in this case.\n   If the user is not authorized to create\
    \ the target resource, an error\n   response containing a \"403 Forbidden\" status-line\
    \ SHOULD be returned.\n   The error-tag value \"access-denied\" is used in this\
    \ case.  A server\n   MAY return a \"404 Not Found\" status-line, as described\
    \ in\n   Section 6.5.4 in [RFC7231].  The error-tag value \"invalid-value\" is\n\
    \   used in this case.  All other error responses are handled according\n   to\
    \ the procedures defined in Section 7.\n   Example:\n   To create a new \"jukebox\"\
    \ resource, the client might send the\n   following:\n      POST /restconf/data\
    \ HTTP/1.1\n      Host: example.com\n      Content-Type: application/yang-data+json\n\
    \      { \"example-jukebox:jukebox\" : {} }\n   If the resource is created, the\
    \ server might respond as follows:\n      HTTP/1.1 201 Created\n      Date: Thu,\
    \ 26 Jan 2017 20:56:30 GMT\n      Server: example-server\n      Location: https://example.com/restconf/data/\\\
    \n          example-jukebox:jukebox\n      Last-Modified: Thu, 26 Jan 2017 20:56:30\
    \ GMT\n      ETag: \"b3a3e673be2\"\n   Refer to Appendix B.2.1 for more resource\
    \ creation examples.\n"
- title: 4.4.2.  Invoke Operation Mode
  contents:
  - "4.4.2.  Invoke Operation Mode\n   If the target resource type is an operation\
    \ resource, then the POST\n   method is treated as a request to invoke that operation.\
    \  The\n   message-body (if any) is processed as the operation input parameters.\n\
    \   Refer to Section 3.6 for details on operation resources.\n   If the POST request\
    \ succeeds, a \"200 OK\" status-line is returned if\n   there is a response message-body,\
    \ and a \"204 No Content\" status-line\n   is returned if there is no response\
    \ message-body.\n   If the user is not authorized to invoke the target operation,\
    \ an\n   error response containing a \"403 Forbidden\" status-line SHOULD be\n\
    \   returned.  The error-tag value \"access-denied\" is used in this case.\n \
    \  A server MAY return a \"404 Not Found\" status-line, as described in\n   Section\
    \ 6.5.4 in [RFC7231].  All other error responses are handled\n   according to\
    \ the procedures defined in Section 7.\n   Example:\n   In this example, the client\
    \ is invoking the \"play\" operation defined\n   in the \"example-jukebox\" YANG\
    \ module.\n   A client might send a \"play\" request as follows:\n      POST /restconf/operations/example-jukebox:play\
    \ HTTP/1.1\n      Host: example.com\n      Content-Type: application/yang-data+json\n\
    \      {\n        \"example-jukebox:input\" : {\n          \"playlist\" : \"Foo-One\"\
    ,\n          \"song-number\" : 2\n        }\n      }\n   The server might respond\
    \ as follows:\n      HTTP/1.1 204 No Content\n      Date: Thu, 26 Jan 2017 20:56:30\
    \ GMT\n      Server: example-server\n"
- title: 4.5.  PUT
  contents:
  - "4.5.  PUT\n   The RESTCONF server MUST support the PUT method.  The PUT method\
    \ is\n   sent by the client to create or replace the target data resource.  A\n\
    \   request message-body MUST be present, representing the new data\n   resource,\
    \ or the server MUST return a \"400 Bad Request\" status-line.\n   The error-tag\
    \ value \"invalid-value\" is used in this case.\n   Both the POST and PUT methods\
    \ can be used to create data resources.\n   The difference is that for POST, the\
    \ client does not provide the\n   resource identifier for the resource that will\
    \ be created.  The\n   target resource for the POST method for resource creation\
    \ is the\n   parent of the new resource.  The target resource for the PUT method\n\
    \   for resource creation is the new resource.\n   The PUT method MUST be supported\
    \ for data and datastore resources.  A\n   PUT on the datastore resource is used\
    \ to replace the entire contents\n   of the datastore.  A PUT on a data resource\
    \ only replaces that data\n   resource within the datastore.\n   The \"insert\"\
    \ (Section 4.8.5) and \"point\" (Section 4.8.6) query\n   parameters MUST be supported\
    \ by the PUT method for data resources.\n   These parameters are only allowed\
    \ if the list or leaf-list is\n   \"ordered-by user\".\n   Consistent with [RFC7231],\
    \ if the PUT request creates a new resource,\n   a \"201 Created\" status-line\
    \ is returned.  If an existing resource is\n   modified, a \"204 No Content\"\
    \ status-line is returned.\n   If the user is not authorized to create or replace\
    \ the target\n   resource, an error response containing a \"403 Forbidden\" status-line\n\
    \   SHOULD be returned.  The error-tag value \"access-denied\" is used in\n  \
    \ this case.\n   A server MAY return a \"404 Not Found\" status-line, as described\
    \ in\n   Section 6.5.4 in [RFC7231].  The error-tag value \"invalid-value\" is\n\
    \   used in this case.  All other error responses are handled according\n   to\
    \ the procedures defined in Section 7.\n   If the target resource represents a\
    \ YANG leaf-list, then the PUT\n   method MUST NOT change the value of the leaf-list\
    \ instance.\n   If the target resource represents a YANG list instance, then the\
    \ key\n   leaf values, in message-body representation, MUST be the same as the\n\
    \   key leaf values in the request URI.  The PUT method MUST NOT be used\n   to\
    \ change the key leaf values for a data resource instance.\n   Example:\n   An\
    \ \"album\" child resource defined in the \"example-jukebox\" YANG\n   module\
    \ is replaced, or it is created if it does not already exist.\n   To replace the\
    \ \"album\" resource contents, the client might send the\n   following:\n    \
    \  PUT /restconf/data/example-jukebox:jukebox/\\\n          library/artist=Foo%20Fighters/album=Wasting%20Light\
    \ HTTP/1.1\n      Host: example.com\n      Content-Type: application/yang-data+json\n\
    \      {\n        \"example-jukebox:album\" : [\n          {\n            \"name\"\
    \ : \"Wasting Light\",\n            \"genre\" : \"example-jukebox:alternative\"\
    ,\n            \"year\" : 2011\n          }\n        ]\n      }\n   If the resource\
    \ is updated, the server might respond as follows:\n      HTTP/1.1 204 No Content\n\
    \      Date: Thu, 26 Jan 2017 20:56:30 GMT\n      Server: example-server\n   \
    \   Last-Modified: Thu, 26 Jan 2017 20:56:30 GMT\n      ETag: \"b27480aeda4c\"\
    \n   The same request is shown here using XML encoding:\n      PUT /restconf/data/example-jukebox:jukebox/\\\
    \n          library/artist=Foo%20Fighters/album=Wasting%20Light HTTP/1.1\n   \
    \   Host: example.com\n      Content-Type: application/yang-data+xml\n      <album\
    \ xmlns=\"http://example.com/ns/example-jukebox\"\n             xmlns:jbox=\"\
    http://example.com/ns/example-jukebox\">\n        <name>Wasting Light</name>\n\
    \        <genre>jbox:alternative</genre>\n        <year>2011</year>\n      </album>\n\
    \   Refer to Appendix B.2.4 for an example using the PUT method to\n   replace\
    \ the contents of the datastore resource.\n"
- title: 4.6.  PATCH
  contents:
  - "4.6.  PATCH\n   The RESTCONF server MUST support the PATCH method for a plain\
    \ patch\n   and MAY support additional media types.  The media types for the\n\
    \   PATCH method supported by the server can be discovered by the client\n   by\
    \ sending an OPTIONS request and examining the \"Accept-Patch\" header\n   field\
    \ in the response (see Section 4.1).\n   RESTCONF uses the HTTP PATCH method defined\
    \ in [RFC5789] to provide\n   an extensible framework for resource patching mechanisms.\
    \  Each patch\n   mechanism needs a unique media type.\n   This document defines\
    \ one patch mechanism (Section 4.6.1).  Another\n   patch mechanism, the YANG\
    \ Patch mechanism, is defined in\n   [YANG-Patch].  Other patch mechanisms may\
    \ be defined by future\n   specifications.\n   If the target resource instance\
    \ does not exist, the server MUST NOT\n   create it.\n   If the PATCH request\
    \ succeeds, a \"200 OK\" status-line is returned if\n   there is a message-body,\
    \ and \"204 No Content\" is returned if no\n   response message-body is sent.\n\
    \   If the user is not authorized to alter the target resource, an error\n   response\
    \ containing a \"403 Forbidden\" status-line SHOULD be returned.\n   A server\
    \ MAY return a \"404 Not Found\" status-line, as described in\n   Section 6.5.4\
    \ in [RFC7231].  The error-tag value \"invalid-value\" is\n   used in this case.\
    \  All other error responses are handled according\n   to the procedures defined\
    \ in Section 7.\n"
- title: 4.6.1.  Plain Patch
  contents:
  - "4.6.1.  Plain Patch\n   The plain patch mechanism merges the contents of the\
    \ message-body\n   with the target resource.  The message-body for a plain patch\
    \ MUST be\n   present and MUST be represented by the media type\n   \"application/yang-data+xml\"\
    \ or \"application/yang-data+json\".\n   Plain patch can be used to create or\
    \ update, but not delete, a child\n   resource within the target resource.  Please\
    \ see [YANG-Patch] for an\n   alternate media type supporting the ability to delete\
    \ child\n   resources.  The YANG Patch media type allows multiple suboperations\n\
    \   (e.g., \"merge\", \"delete\") within a single PATCH method.\n   If the target\
    \ resource represents a YANG leaf-list, then the PATCH\n   method MUST NOT change\
    \ the value of the leaf-list instance.\n   If the target resource represents a\
    \ YANG list instance, then the key\n   leaf values, in message-body representation,\
    \ MUST be the same as the\n   key leaf values in the request URI.  The PATCH method\
    \ MUST NOT be\n   used to change the key leaf values for a data resource instance.\n\
    \   After the plain patch is processed by the server, a response will be\n   returned\
    \ to the client, as specified in Section 4.6.\n   Example:\n   To replace just\
    \ the \"year\" field in the \"album\" resource (instead of\n   replacing the entire\
    \ resource with the PUT method), the client might\n   send a plain patch as follows:\n\
    \      PATCH /restconf/data/example-jukebox:jukebox/\\\n          library/artist=Foo%20Fighters/album=Wasting%20Light\
    \ HTTP/1.1\n      Host: example.com\n      If-Match: \"b8389233a4c\"\n      Content-Type:\
    \ application/yang-data+xml\n      <album xmlns=\"http://example.com/ns/example-jukebox\"\
    >\n       <year>2011</year>\n      </album>\n   If the field is updated, the server\
    \ might respond as follows:\n      HTTP/1.1 204 No Content\n      Date: Thu, 26\
    \ Jan 2017 20:56:30 GMT\n      Server: example-server\n      Last-Modified: Thu,\
    \ 26 Jan 2017 20:56:30 GMT\n      ETag: \"b2788923da4c\"\n"
- title: 4.7.  DELETE
  contents:
  - "4.7.  DELETE\n   The RESTCONF server MUST support the DELETE method.  The DELETE\n\
    \   method is used to delete the target resource.  If the DELETE request\n   succeeds,\
    \ a \"204 No Content\" status-line is returned.\n   If the user is not authorized\
    \ to delete the target resource, then an\n   error response containing a \"403\
    \ Forbidden\" status-line SHOULD be\n   returned.  The error-tag value \"access-denied\"\
    \ is returned in this\n   case.  A server MAY return a \"404 Not Found\" status-line,\
    \ as\n   described in Section 6.5.4 in [RFC7231].  The error-tag value\n   \"\
    invalid-value\" is returned in this case.  All other error responses\n   are handled\
    \ according to the procedures defined in Section 7.\n   If the target resource\
    \ represents a configuration leaf-list or list\n   data node, then it MUST represent\
    \ a single YANG leaf-list or list\n   instance.  The server MUST NOT use the DELETE\
    \ method to delete more\n   than one such instance.\n   Example:\n   To delete\
    \ the \"album\" resource with the key \"Wasting Light\", the\n   client might\
    \ send the following:\n      DELETE /restconf/data/example-jukebox:jukebox/\\\n\
    \          library/artist=Foo%20Fighters/album=Wasting%20Light HTTP/1.1\n    \
    \  Host: example.com\n   If the resource is deleted, the server might respond\
    \ as follows:\n      HTTP/1.1 204 No Content\n      Date: Thu, 26 Jan 2017 20:56:30\
    \ GMT\n      Server: example-server\n"
- title: 4.8.  Query Parameters
  contents:
  - "4.8.  Query Parameters\n   Each RESTCONF operation allows zero or more query\
    \ parameters to be\n   present in the request URI.  Which specific parameters\
    \ are allowed\n   will depend on the resource type, and sometimes the specific\
    \ target\n   resource used, in the request.\n   o  Query parameters can be given\
    \ in any order.\n   o  Each parameter can appear at most once in a request URI.\n\
    \   o  If more than one instance of a query parameter is present, then a\n   \
    \   \"400 Bad Request\" status-line MUST be returned by the server.  The\n   \
    \   error-tag value \"invalid-value\" is returned in this case.\n   o  A default\
    \ value may apply if the parameter is missing.\n   o  Query parameter names and\
    \ values are case sensitive.\n   o  A server MUST return an error with a \"400\
    \ Bad Request\" status-line\n      if a query parameter is unexpected.  The error-tag\
    \ value\n      \"invalid-value\" is returned in this case.\n   +---------------+---------+-----------------------------------------+\n\
    \   | Name          | Methods | Description                             |\n  \
    \ +---------------+---------+-----------------------------------------+\n   |\
    \ content       | GET,    | Select config and/or non-config data    |\n   |  \
    \             | HEAD    | resources                               |\n   |    \
    \           |         |                                         |\n   | depth\
    \         | GET,    | Request limited subtree depth in the    |\n   |        \
    \       | HEAD    | reply content                           |\n   |          \
    \     |         |                                         |\n   | fields     \
    \   | GET,    | Request a subset of the target resource |\n   |              \
    \ | HEAD    | contents                                |\n   |               |\
    \         |                                         |\n   | filter        | GET,\
    \    | Boolean notification filter for event   |\n   |               | HEAD  \
    \  | stream resources                        |\n   |               |         |\
    \                                         |\n   | insert        | POST,   | Insertion\
    \ mode for \"ordered-by user\"    |\n   |               | PUT     | data resources\
    \                          |\n   |               |         |                 \
    \                        |\n   | point         | POST,   | Insertion point for\
    \ \"ordered-by user\"   |\n   |               | PUT     | data resources     \
    \                     |\n   |               |         |                      \
    \                   |\n   | start-time    | GET,    | Replay buffer start time\
    \ for event      |\n   |               | HEAD    | stream resources          \
    \              |\n   |               |         |                             \
    \            |\n   | stop-time     | GET,    | Replay buffer stop time for event\
    \       |\n   |               | HEAD    | stream resources                   \
    \     |\n   |               |         |                                      \
    \   |\n   | with-defaults | GET,    | Control the retrieval of default values\
    \ |\n   |               | HEAD    |                                         |\n\
    \   +---------------+---------+-----------------------------------------+\n  \
    \                       RESTCONF Query Parameters\n   Refer to Appendix B.3 for\
    \ examples of query parameter usage.\n   If vendors define additional query parameters,\
    \ they SHOULD use a\n   prefix (such as the enterprise or organization name) for\
    \ query\n   parameter names in order to avoid collisions with other parameters.\n"
- title: 4.8.1.  The "content" Query Parameter
  contents:
  - "4.8.1.  The \"content\" Query Parameter\n   The \"content\" query parameter controls\
    \ how descendant nodes of the\n   requested data nodes will be processed in the\
    \ reply.\n   The allowed values are:\n    +-----------+-----------------------------------------------------+\n\
    \    | Value     | Description                                         |\n   \
    \ +-----------+-----------------------------------------------------+\n    | config\
    \    | Return only configuration descendant data nodes     |\n    |          \
    \ |                                                     |\n    | nonconfig | Return\
    \ only non-configuration descendant data nodes |\n    |           |          \
    \                                           |\n    | all       | Return all descendant\
    \ data nodes                    |\n    +-----------+-----------------------------------------------------+\n\
    \   This parameter is only allowed for GET methods on datastore and data\n   resources.\
    \  A \"400 Bad Request\" status-line is returned if used for\n   other methods\
    \ or resource types.\n   If this query parameter is not present, the default value\
    \ is \"all\".\n   This query parameter MUST be supported by the server.\n"
- title: 4.8.2.  The "depth" Query Parameter
  contents:
  - "4.8.2.  The \"depth\" Query Parameter\n   The \"depth\" query parameter is used\
    \ to limit the depth of subtrees\n   returned by the server.  Data nodes with\
    \ a \"depth\" value greater than\n   the \"depth\" parameter are not returned\
    \ in a response for a GET\n   method.\n   The requested data node has a depth\
    \ level of \"1\".  If the \"fields\"\n   parameter (Section 4.8.3) is used to\
    \ select descendant data nodes,\n   then these nodes and all of their ancestor\
    \ nodes have a \"depth\" value\n   of \"1\".  (This has the effect of including\
    \ the nodes specified by the\n   fields, even if the \"depth\" value is less than\
    \ the actual depth level\n   of the specified fields.)  Any other child node has\
    \ a \"depth\" value\n   that is 1 greater than its parent.\n   The value of the\
    \ \"depth\" parameter is either an integer between 1 and\n   65535 or the string\
    \ \"unbounded\".  \"unbounded\" is the default.\n   This parameter is only allowed\
    \ for GET methods on API, datastore, and\n   data resources.  A \"400 Bad Request\"\
    \ status-line is returned if used\n   for other methods or resource types.\n \
    \  By default, the server will include all sub-resources within a\n   retrieved\
    \ resource that have the same resource type as the requested\n   resource.  The\
    \ exception is the datastore resource.  If this resource\n   type is retrieved,\
    \ then by default the datastore and all child data\n   resources are returned.\n\
    \   If the \"depth\" query parameter URI is listed in the \"capability\"\n   leaf-list\
    \ defined in Section 9.3, then the server supports the\n   \"depth\" query parameter.\n"
- title: 4.8.3.  The "fields" Query Parameter
  contents:
  - "4.8.3.  The \"fields\" Query Parameter\n   The \"fields\" query parameter is\
    \ used to optionally identify data\n   nodes within the target resource to be\
    \ retrieved in a GET method.\n   The client can use this parameter to retrieve\
    \ a subset of all nodes\n   in a resource.\n   The server will return a message-body\
    \ representing the target\n   resource, with descendant nodes pruned as specified\
    \ in the\n   \"fields-expr\" value.  The server does not return a set of separate\n\
    \   sub-resources.\n   A value of the \"fields\" query parameter matches the following\
    \ rule:\n    fields-expr = path \"(\" fields-expr \")\" / path \";\" fields-expr\
    \ / path\n    path = api-identifier [ \"/\" path ]\n   \"api-identifier\" is defined\
    \ in Section 3.5.3.1.\n   \";\" is used to select multiple nodes.  For example,\
    \ to retrieve only\n   the \"genre\" and \"year\" of an album, use \"fields=genre;year\"\
    .\n   Parentheses are used to specify sub-selectors of a node.  Note that\n  \
    \ there is no path separator character \"/\" between a \"path\" field and a\n\
    \   left parenthesis character \"(\".\n   For example, assume that the target\
    \ resource is the \"album\" list.  To\n   retrieve only the \"label\" and \"catalogue-number\"\
    \ of the \"admin\"\n   container within an album, use\n   \"fields=admin(label;catalogue-number)\"\
    .\n   \"/\" is used in a path to retrieve a child node of a node.  For\n   example,\
    \ to retrieve only the \"label\" of an album, use\n   \"fields=admin/label\".\n\
    \   This parameter is only allowed for GET methods on API, datastore, and\n  \
    \ data resources.  A \"400 Bad Request\" status-line is returned if used\n   for\
    \ other methods or resource types.\n   If the \"fields\" query parameter URI is\
    \ listed in the \"capability\"\n   leaf-list defined in Section 9.3, then the\
    \ server supports the\n   \"fields\" parameter.\n"
- title: 4.8.4.  The "filter" Query Parameter
  contents:
  - "4.8.4.  The \"filter\" Query Parameter\n   The \"filter\" query parameter is\
    \ used to indicate which subset of all\n   possible events is of interest.  If\
    \ not present, all events not\n   precluded by other parameters will be sent.\n\
    \   This parameter is only allowed for GET methods on an event stream\n   resource.\
    \  A \"400 Bad Request\" status-line is returned if used for\n   other methods\
    \ or resource types.\n   The format of this parameter is an XPath 1.0 expression\
    \ [XPath] and\n   is evaluated in the following context:\n   o  The set of namespace\
    \ declarations is the set of prefix and\n      namespace pairs for all supported\
    \ YANG modules, where the prefix\n      is the YANG module name and the namespace\
    \ is as defined by the\n      \"namespace\" statement in the YANG module.\n  \
    \ o  The function library is the core function library defined in\n      XPath\
    \ 1.0, plus any functions defined by the data model.\n   o  The set of variable\
    \ bindings is empty.\n   o  The context node is the root node.\n   The \"filter\"\
    \ query parameter is used as defined in Section 3.6 of\n   [RFC5277].  If the\
    \ boolean result of the expression is \"true\" when\n   applied to the conceptual\
    \ \"notification\" document root, then the\n   event notification is delivered\
    \ to the client.\n   If the \"filter\" query parameter URI is listed in the \"\
    capability\"\n   leaf-list defined in Section 9.3, then the server supports the\n\
    \   \"filter\" query parameter.\n"
- title: 4.8.5.  The "insert" Query Parameter
  contents:
  - "4.8.5.  The \"insert\" Query Parameter\n   The \"insert\" query parameter is\
    \ used to specify how a resource should\n   be inserted within an \"ordered-by\
    \ user\" list.\n   The allowed values are:\n   +--------+----------------------------------------------------------+\n\
    \   | Value  | Description                                              |\n  \
    \ +--------+----------------------------------------------------------+\n   |\
    \ first  | Insert the new data as the new first entry.              |\n   |  \
    \      |                                                          |\n   | last\
    \   | Insert the new data as the new last entry.               |\n   |       \
    \ |                                                          |\n   | before |\
    \ Insert the new data before the insertion point, as       |\n   |        | specified\
    \ by the value of the \"point\" parameter.         |\n   |        |          \
    \                                                |\n   | after  | Insert the new\
    \ data after the insertion point, as        |\n   |        | specified by the\
    \ value of the \"point\" parameter.         |\n   +--------+----------------------------------------------------------+\n\
    \   The default value is \"last\".\n   This parameter is only supported for the\
    \ POST and PUT methods.  It is\n   also only supported if the target resource\
    \ is a data resource, and\n   that data represents a YANG list or leaf-list that\
    \ is\n   \"ordered-by user\".\n   If the values \"before\" or \"after\" are used,\
    \ then a \"point\" query\n   parameter for the \"insert\" query parameter MUST\
    \ also be present, or a\n   \"400 Bad Request\" status-line is returned.\n   The\
    \ \"insert\" query parameter MUST be supported by the server.\n"
- title: 4.8.6.  The "point" Query Parameter
  contents:
  - "4.8.6.  The \"point\" Query Parameter\n   The \"point\" query parameter is used\
    \ to specify the insertion point\n   for a data resource that is being created\
    \ or moved within an\n   \"ordered-by user\" list or leaf-list.\n   The value\
    \ of the \"point\" parameter is a string that identifies the\n   path to the insertion\
    \ point object.  The format is the same as a\n   target resource URI string.\n\
    \   This parameter is only supported for the POST and PUT methods.  It is\n  \
    \ also only supported if the target resource is a data resource, and\n   that\
    \ data represents a YANG list or leaf-list that is\n   \"ordered-by user\".\n\
    \   If the \"insert\" query parameter is not present or has a value other\n  \
    \ than \"before\" or \"after\", then a \"400 Bad Request\" status-line is\n  \
    \ returned.\n   This parameter contains the instance identifier of the resource\
    \ to be\n   used as the insertion point for a POST or PUT method.\n   The \"point\"\
    \ query parameter MUST be supported by the server.\n"
- title: 4.8.7.  The "start-time" Query Parameter
  contents:
  - "4.8.7.  The \"start-time\" Query Parameter\n   The \"start-time\" query parameter\
    \ is used to trigger the notification\n   replay feature defined in [RFC5277]\
    \ and indicate that the replay\n   should start at the time specified.  If the\
    \ stream does not support\n   replay per the \"replay-support\" attribute returned\
    \ by the\n   \"stream\" list entry for the stream resource, then the server MUST\n\
    \   return a \"400 Bad Request\" status-line.\n   The value of the \"start-time\"\
    \ parameter is of type \"date-and-time\",\n   defined in the \"ietf-yang-types\"\
    \ YANG module [RFC6991].\n   This parameter is only allowed for GET methods on\
    \ a\n   \"text/event-stream\" data resource.  A \"400 Bad Request\" status-line\n\
    \   is returned if used for other methods or resource types.\n   If this parameter\
    \ is not present, then a replay subscription is not\n   being requested.  It is\
    \ not valid to specify start times that are\n   later than the current time. \
    \ If the value specified is earlier than\n   the log can support, the replay will\
    \ begin with the earliest\n   available notification.  A client can obtain a server's\
    \ current time\n   by examining the \"Date\" header field that the server returns\
    \ in\n   response messages, according to [RFC7231].\n   If this query parameter\
    \ is supported by the server, then the \"replay\"\n   query parameter URI MUST\
    \ be listed in the \"capability\" leaf-list\n   defined in Section 9.3, and the\
    \ \"stop-time\" query parameter MUST also\n   be supported by the server.\n  \
    \ If the \"replay-support\" leaf has the value \"true\" in the \"stream\"\n  \
    \ entry (defined in Section 9.3), then the server MUST support the\n   \"start-time\"\
    \ and \"stop-time\" query parameters for that stream.\n"
- title: 4.8.8.  The "stop-time" Query Parameter
  contents:
  - "4.8.8.  The \"stop-time\" Query Parameter\n   The \"stop-time\" query parameter\
    \ is used with the replay feature to\n   indicate the newest notifications of\
    \ interest.  This parameter MUST\n   be used with, and have a value later than,\
    \ the \"start-time\"\n   parameter.\n   The value of the \"stop-time\" parameter\
    \ is of type \"date-and-time\",\n   defined in the \"ietf-yang-types\" YANG module\
    \ [RFC6991].\n   This parameter is only allowed for GET methods on a\n   \"text/event-stream\"\
    \ data resource.  A \"400 Bad Request\" status-line\n   is returned if used for\
    \ other methods or resource types.\n   If this parameter is not present, the notifications\
    \ will continue\n   until the subscription is terminated.  Values in the future\
    \ are\n   valid.\n   If this query parameter is supported by the server, then\
    \ the \"replay\"\n   query parameter URI MUST be listed in the \"capability\"\
    \ leaf-list\n   defined in Section 9.3, and the \"start-time\" query parameter\
    \ MUST\n   also be supported by the server.\n   If the \"replay-support\" leaf\
    \ is present in the \"stream\" entry\n   (defined in Section 9.3), then the server\
    \ MUST support the\n   \"start-time\" and \"stop-time\" query parameters for that\
    \ stream.\n"
- title: 4.8.9.  The "with-defaults" Query Parameter
  contents:
  - "4.8.9.  The \"with-defaults\" Query Parameter\n   The \"with-defaults\" query\
    \ parameter is used to specify how\n   information about default data nodes should\
    \ be returned in response\n   to GET requests on data resources.\n   If the server\
    \ supports this capability, then it MUST implement the\n   behavior described\
    \ in Section 4.5.1 of [RFC6243], except applied to\n   the RESTCONF GET operation\
    \ instead of the NETCONF operations.\n   +-------------------+-----------------------------------------------+\n\
    \   | Value             | Description                                   |\n  \
    \ +-------------------+-----------------------------------------------+\n   |\
    \ report-all        | All data nodes are reported                   |\n   |  \
    \                 |                                               |\n   | trim\
    \              | Data nodes set to the YANG default are not    |\n   |       \
    \            | reported                                      |\n   |         \
    \          |                                               |\n   | explicit  \
    \        | Data nodes set to the YANG default by the     |\n   |             \
    \      | client are reported                           |\n   |               \
    \    |                                               |\n   | report-all-tagged\
    \ | All data nodes are reported, and defaults are |\n   |                   |\
    \ tagged                                        |\n   +-------------------+-----------------------------------------------+\n\
    \   If the \"with-defaults\" parameter is set to \"report-all\", then the\n  \
    \ server MUST adhere to the default-reporting behavior defined in\n   Section\
    \ 3.1 of [RFC6243].\n   If the \"with-defaults\" parameter is set to \"trim\"\
    , then the server\n   MUST adhere to the default-reporting behavior defined in\
    \ Section 3.2\n   of [RFC6243].\n   If the \"with-defaults\" parameter is set\
    \ to \"explicit\", then the\n   server MUST adhere to the default-reporting behavior\
    \ defined in\n   Section 3.3 of [RFC6243].\n   If the \"with-defaults\" parameter\
    \ is set to \"report-all-tagged\", then\n   the server MUST adhere to the default-reporting\
    \ behavior defined in\n   Section 3.4 of [RFC6243].  Metadata is reported by the\
    \ server as\n   specified in Section 5.3.  The XML encoding for the \"default\"\
    \n   attribute sent by the server for default nodes is defined in\n   Section\
    \ 6 of [RFC6243].  The JSON encoding for the \"default\"\n   attribute MUST use\
    \ the same values, as defined in [RFC6243], but\n   encoded according to the rules\
    \ in [RFC7952].  The module name\n   \"ietf-netconf-with-defaults\" MUST be used\
    \ for the \"default\"\n   attribute.\n   If the \"with-defaults\" parameter is\
    \ not present, then the server MUST\n   adhere to the default-reporting behavior\
    \ defined in its \"basic-mode\"\n   parameter for the \"defaults\" protocol capability\
    \ URI, defined in\n   Section 9.1.2.\n   If the server includes the \"with-defaults\"\
    \ query parameter URI in the\n   \"capability\" leaf-list defined in Section 9.3,\
    \ then the\n   \"with-defaults\" query parameter MUST be supported.\n   Since\
    \ the server does not report the \"also-supported\" parameter as\n   described\
    \ in Section 4.3 of [RFC6243], it is possible that some\n   values for the \"\
    with-defaults\" parameter will not be supported.  If\n   the server does not support\
    \ the requested value of the\n   \"with-defaults\" parameter, the server MUST\
    \ return a response with a\n   \"400 Bad Request\" status-line.  The error-tag\
    \ value \"invalid-value\"\n   is used in this case.\n"
- title: 5.  Messages
  contents:
  - "5.  Messages\n   The RESTCONF protocol uses HTTP messages.  A single HTTP message\n\
    \   corresponds to a single protocol method.  Most messages can perform a\n  \
    \ single task on a single resource, such as retrieving a resource or\n   editing\
    \ a resource.  The exception is the PATCH method, which allows\n   multiple datastore\
    \ edits within a single message.\n"
- title: 5.1.  Request URI Structure
  contents:
  - "5.1.  Request URI Structure\n   Resources are represented with URIs following\
    \ the structure for\n   generic URIs in [RFC3986].\n   A RESTCONF operation is\
    \ derived from the HTTP method and the request\n   URI, using the following conceptual\
    \ fields:\n        <OP> /<restconf>/<path>?<query>\n          ^       ^      \
    \  ^       ^\n          |       |        |       |\n        method  entry  resource\
    \  query\n          M       M        O        O\n       M=mandatory, O=optional\n\
    \       where:\n         <OP> is the HTTP method\n         <restconf> is the RESTCONF\
    \ root resource\n         <path> is the target resource URI\n         <query>\
    \ is the query parameter list\n   o  method: the HTTP method identifying the RESTCONF\
    \ operation\n      requested by the client, to act upon the target resource specified\n\
    \      in the request URI.  RESTCONF operation details are described in\n    \
    \  Section 4.\n   o  entry: the root of the RESTCONF API configured on this HTTP\n\
    \      server, discovered by getting the \"/.well-known/host-meta\"\n      resource,\
    \ as described in Section 3.1.\n   o  resource: the path expression identifying\
    \ the resource that is\n      being accessed by the RESTCONF operation.  If this\
    \ field is not\n      present, then the target resource is the API itself, represented\n\
    \      by the YANG data template named \"yang-api\", found in Section 8.\n   o\
    \  query: the set of parameters associated with the RESTCONF message;\n      see\
    \ Section 3.4 of [RFC3986].  RESTCONF parameters have the\n      familiar form\
    \ of \"name=value\" pairs.  Most query parameters are\n      optional to implement\
    \ by the server and optional to use by the\n      client.  Each optional query\
    \ parameter is identified by a URI.\n      The server MUST list the optional query\
    \ parameter URIs it supports\n      in the \"capability\" leaf-list defined in\
    \ Section 9.3.\n   There is a specific set of parameters defined, although the\
    \ server\n   MAY choose to support query parameters not defined in this document.\n\
    \   The contents of any query parameter value MUST be encoded according\n   to\
    \ Section 3.4 of [RFC3986].  Any reserved characters MUST be\n   percent-encoded,\
    \ according to Sections 2.1 and 2.5 of [RFC3986].\n   Note that the fragment component\
    \ is not used by the RESTCONF\n   protocol.  The fragment is excluded from the\
    \ target URI by a server,\n   as described in Section 5.1 of [RFC7230].\n   When\
    \ new resources are created by the client, a \"Location\" header\n   field is\
    \ returned, which identifies the path of the newly created\n   resource.  The\
    \ client uses this exact path identifier to access the\n   resource once it has\
    \ been created.\n   The target of a RESTCONF operation is a resource.  The \"\
    path\" field\n   in the request URI represents the target resource for the RESTCONF\n\
    \   operation.\n   Refer to Appendix B for examples of RESTCONF request URIs.\n"
- title: 5.2.  Message Encoding
  contents:
  - "5.2.  Message Encoding\n   RESTCONF messages are encoded in HTTP according to\
    \ [RFC7230].  The\n   \"utf-8\" character set is used for all messages.  RESTCONF\
    \ message\n   content is sent in the HTTP message-body.\n   Content is encoded\
    \ in either JSON or XML format.  A server MUST\n   support one of either XML or\
    \ JSON encoding.  A server MAY support\n   both XML and JSON encoding.  A client\
    \ will need to support both XML\n   and JSON to interoperate with all RESTCONF\
    \ servers.\n   XML encoding rules for data nodes are defined in [RFC7950].  The\
    \ same\n   encoding rules are used for all XML content.  JSON encoding rules are\n\
    \   defined in [RFC7951].  Additional JSON encoding rules for metadata\n   are\
    \ defined in [RFC7952].  This encoding is valid JSON, but it also\n   has special\
    \ encoding rules to identify module namespaces and provide\n   consistent type\
    \ processing of YANG data.\n   The request input content encoding format is identified\
    \ with the\n   \"Content-Type\" header field.  This field MUST be present if a\n\
    \   message-body is sent by the client.\n   The server MUST support the \"Accept\"\
    \ header field and the \"406 Not\n   Acceptable\" status-line, as defined in [RFC7231].\
    \  The response\n   output content encoding formats that the client will accept\
    \ are\n   identified with the \"Accept\" header field in the request.  If it is\n\
    \   not specified, the request input encoding format SHOULD be used, or\n   the\
    \ server MAY choose any supported content encoding format.\n   If there was no\
    \ request input, then the default output encoding is\n   XML or JSON, depending\
    \ on server preference.  File extensions encoded\n   in the request are not used\
    \ to identify format encoding.\n   A client can determine if the RESTCONF server\
    \ supports an encoding\n   format by sending a request using a specific format\
    \ in the\n   \"Content-Type\" and/or \"Accept\" header field.  If the server does\
    \ not\n   support the requested input encoding for a request, then it MUST\n \
    \  return an error response with a \"415 Unsupported Media Type\"\n   status-line.\
    \  If the server does not support any of the requested\n   output encodings for\
    \ a request, then it MUST return an error response\n   with a \"406 Not Acceptable\"\
    \ status-line.\n"
- title: 5.3.  RESTCONF Metadata
  contents:
  - "5.3.  RESTCONF Metadata\n   The RESTCONF protocol needs to support the retrieval\
    \ of the same\n   metadata that is used in the NETCONF protocol.  Information\
    \ about\n   default leafs, last-modified timestamps, etc. is commonly used to\n\
    \   annotate representations of the datastore contents.\n   With the XML encoding,\
    \ the metadata is encoded as attributes in XML,\n   according to Section 3.3 of\
    \ [W3C.REC-xml-20081126].  With the JSON\n   encoding, the metadata is encoded\
    \ as specified in [RFC7952].\n   The following examples are based on the example\
    \ in Appendix B.3.9.\n   The \"report-all-tagged\" mode for the \"with-defaults\"\
    \ query parameter\n   requires that a \"default\" attribute be returned for default\
    \ nodes.\n   These examples show that attribute for the \"mtu\" leaf.\n"
- title: 5.3.1.  XML Metadata Encoding Example
  contents:
  - "5.3.1.  XML Metadata Encoding Example\n      GET /restconf/data/interfaces/interface=eth1\n\
    \          ?with-defaults=report-all-tagged HTTP/1.1\n      Host: example.com\n\
    \      Accept: application/yang-data+xml\n   The server might respond as follows:\n\
    \      HTTP/1.1 200 OK\n      Date: Thu, 26 Jan 2017 20:56:30 GMT\n      Server:\
    \ example-server\n      Content-Type: application/yang-data+xml\n      <interface\n\
    \        xmlns=\"urn:example.com:params:xml:ns:yang:example-interface\">\n   \
    \     <name>eth1</name>\n        <mtu xmlns:wd=\"urn:ietf:params:xml:ns:netconf:default:1.0\"\
    \n          wd:default=\"true\">1500</mtu>\n        <status>up</status>\n    \
    \  </interface>\n"
- title: 5.3.2.  JSON Metadata Encoding Example
  contents:
  - "5.3.2.  JSON Metadata Encoding Example\n   Note that RFC 6243 defines the \"\
    default\" attribute with the\n   XML Schema Definition (XSD), not YANG, so the\
    \ YANG module name has to\n   be assigned instead of derived from the YANG module.\
    \  The value\n   \"ietf-netconf-with-defaults\" is assigned for JSON metadata\
    \ encoding.\n      GET /restconf/data/interfaces/interface=eth1\\\n          ?with-defaults=report-all-tagged\
    \ HTTP/1.1\n      Host: example.com\n      Accept: application/yang-data+json\n\
    \   The server might respond as follows:\n      HTTP/1.1 200 OK\n      Date: Thu,\
    \ 26 Jan 2017 20:56:30 GMT\n      Server: example-server\n      Content-Type:\
    \ application/yang-data+json\n      {\n        \"example:interface\" : [\n   \
    \       {\n            \"name\" : \"eth1\",\n            \"mtu\" : 1500,\n   \
    \         \"@mtu\" : {\n               \"ietf-netconf-with-defaults:default\"\
    \ : true\n            },\n            \"status\" : \"up\"\n          }\n     \
    \   ]\n      }\n"
- title: 5.4.  Return Status
  contents:
  - "5.4.  Return Status\n   Each message represents some sort of resource access.\
    \  An HTTP\n   \"status-line\" header field is returned for each request.  If\
    \ a status\n   code in the \"4xx\" range is returned in the status-line, then\
    \ the\n   error information SHOULD be returned in the response, according to\n\
    \   the format defined in Section 7.1.  If a status code in the \"5xx\"\n   range\
    \ is returned in the status-line, then the error information MAY\n   be returned\
    \ in the response, according to the format defined in\n   Section 7.1.  If a status\
    \ code in the \"1xx\", \"2xx\", or \"3xx\" range is\n   returned in the status-line,\
    \ then error information MUST NOT be\n   returned in the response, since these\
    \ ranges do not represent error\n   conditions.\n"
- title: 5.5.  Message Caching
  contents:
  - "5.5.  Message Caching\n   Since the datastore contents change at unpredictable\
    \ times, responses\n   from a RESTCONF server generally SHOULD NOT be cached.\n\
    \   The server MUST include a \"Cache-Control\" header field in every\n   response\
    \ that specifies whether the response should be cached.\n   Instead of relying\
    \ on HTTP caching, the client SHOULD track the\n   \"ETag\" and/or \"Last-Modified\"\
    \ header fields returned by the server\n   for the datastore resource (or data\
    \ resource, if the server supports\n   it).  A retrieval request for a resource\
    \ can include the\n   \"If-None-Match\" and/or \"If-Modified-Since\" header fields,\
    \ which will\n   cause the server to return a \"304 Not Modified\" status-line\
    \ if the\n   resource has not changed.  The client MAY use the HEAD method to\n\
    \   retrieve just the message header fields, which SHOULD include the\n   \"ETag\"\
    \ and \"Last-Modified\" header fields, if this metadata is\n   maintained for\
    \ the target resource.\n   Note that access control can be applied to data resources,\
    \ such that\n   the values in the \"Last-Modified\" and \"ETag\" headers maintained\
    \ for a\n   data resource may not be reliable, as described in Section 4.3.\n"
- title: 6.  Notifications
  contents:
  - "6.  Notifications\n   The RESTCONF protocol supports YANG-defined event notifications.\
    \  The\n   solution preserves aspects of NETCONF event notifications [RFC5277]\n\
    \   while utilizing the Server-Sent Events [W3C.REC-eventsource-20150203]\n  \
    \ transport strategy.\n"
- title: 6.1.  Server Support
  contents:
  - "6.1.  Server Support\n   A RESTCONF server MAY support RESTCONF notifications.\
    \  Clients may\n   determine if a server supports RESTCONF notifications by using\
    \ the\n   HTTP OPTIONS, HEAD, or GET method on the \"stream\" list.  The server\n\
    \   does not support RESTCONF notifications if an HTTP error code is\n   returned\
    \ (e.g., a \"404 Not Found\" status-line).\n"
- title: 6.2.  Event Streams
  contents:
  - "6.2.  Event Streams\n   A RESTCONF server that supports notifications will populate\
    \ a stream\n   resource for each notification delivery service access point. \
    \ A\n   RESTCONF client can retrieve the list of supported event streams from\n\
    \   a RESTCONF server using the GET method on the \"stream\" list.\n   The \"\
    restconf-state/streams\" container definition in the\n   \"ietf-restconf-monitoring\"\
    \ module (defined in Section 9.3) is used to\n   specify the structure and syntax\
    \ of the conceptual child resources\n   within the \"streams\" resource.\n   For\
    \ example:\n   The client might send the following request:\n      GET /restconf/data/ietf-restconf-monitoring:restconf-state/\\\
    \n          streams HTTP/1.1\n      Host: example.com\n      Accept: application/yang-data+xml\n\
    \   The server might send the following response:\n      HTTP/1.1 200 OK\n   \
    \   Content-Type: application/yang-data+xml\n      <streams\n        xmlns=\"\
    urn:ietf:params:xml:ns:yang:ietf-restconf-monitoring\">\n         <stream>\n \
    \           <name>NETCONF</name>\n            <description>default NETCONF event\
    \ stream</description>\n            <replay-support>true</replay-support>\n  \
    \          <replay-log-creation-time>\\\n               2007-07-08T00:00:00Z\\\
    \n            </replay-log-creation-time>\n            <access>\n            \
    \   <encoding>xml</encoding>\n               <location>https://example.com/streams/NETCONF\\\
    \n               </location>\n            </access>\n            <access>\n  \
    \             <encoding>json</encoding>\n               <location>https://example.com/streams/NETCONF-JSON\\\
    \n               </location>\n            </access>\n         </stream>\n    \
    \     <stream>\n            <name>SNMP</name>\n            <description>SNMP notifications</description>\n\
    \            <replay-support>false</replay-support>\n            <access>\n  \
    \             <encoding>xml</encoding>\n               <location>https://example.com/streams/SNMP</location>\n\
    \            </access>\n         </stream>\n         <stream>\n            <name>syslog-critical</name>\n\
    \            <description>Critical and higher severity</description>\n       \
    \     <replay-support>true</replay-support>\n            <replay-log-creation-time>\n\
    \               2007-07-01T00:00:00Z\n            </replay-log-creation-time>\n\
    \            <access>\n               <encoding>xml</encoding>\n             \
    \  <location>\\\n                 https://example.com/streams/syslog-critical\\\
    \n               </location>\n            </access>\n         </stream>\n    \
    \  </streams>\n"
- title: 6.3.  Subscribing to Receive Notifications
  contents:
  - "6.3.  Subscribing to Receive Notifications\n   RESTCONF clients can determine\
    \ the URL for the subscription resource\n   (to receive notifications) by sending\
    \ an HTTP GET request for the\n   \"location\" leaf with the \"stream\" list entry.\
    \  The value returned by\n   the server can be used for the actual notification\
    \ subscription.\n   The client will send an HTTP GET request for the URL returned\
    \ by the\n   server with the \"Accept\" type \"text/event-stream\".\n   The server\
    \ will treat the connection as an event stream, using the\n   Server-Sent Events\
    \ [W3C.REC-eventsource-20150203] transport strategy.\n   The server MAY support\
    \ query parameters for a GET method on this\n   resource.  These parameters are\
    \ specific to each event stream.\n   For example:\n   The client might send the\
    \ following request:\n      GET /restconf/data/ietf-restconf-monitoring:restconf-state/\\\
    \n          streams/stream=NETCONF/access=xml/location HTTP/1.1\n      Host: example.com\n\
    \      Accept: application/yang-data+xml\n   The server might send the following\
    \ response:\n      HTTP/1.1 200 OK\n      Content-Type: application/yang-data+xml\n\
    \      <location\n        xmlns=\"urn:ietf:params:xml:ns:yang:ietf-restconf-monitoring\"\
    >\\\n        https://example.com/streams/NETCONF\\\n      </location>\n   The\
    \ RESTCONF client can then use this URL value to start monitoring\n   the event\
    \ stream:\n      GET /streams/NETCONF HTTP/1.1\n      Host: example.com\n    \
    \  Accept: text/event-stream\n      Cache-Control: no-cache\n      Connection:\
    \ keep-alive\n   A RESTCONF client MAY request that the server compress the events\n\
    \   using the HTTP header field \"Accept-Encoding\".  For instance:\n      GET\
    \ /streams/NETCONF HTTP/1.1\n      Host: example.com\n      Accept: text/event-stream\n\
    \      Cache-Control: no-cache\n      Connection: keep-alive\n      Accept-Encoding:\
    \ gzip, deflate\n"
- title: 6.3.1.  NETCONF Event Stream
  contents:
  - "6.3.1.  NETCONF Event Stream\n   The server SHOULD support the NETCONF event\
    \ stream defined in\n   Section 3.2.3 of [RFC5277].  The notification messages\
    \ for this\n   stream are encoded in XML.\n   The server MAY support additional\
    \ streams that represent the semantic\n   content of the NETCONF event stream,\
    \ but using a representation with\n   a different media type.\n   The server MAY\
    \ support the \"start-time\", \"stop-time\", and \"filter\"\n   query parameters,\
    \ defined in Section 4.8.  Refer to Appendix B.3.6\n   for filter parameter examples.\n"
- title: 6.4.  Receiving Event Notifications
  contents:
  - "6.4.  Receiving Event Notifications\n   RESTCONF notifications are encoded according\
    \ to the definition of the\n   event stream.\n   The structure of the event data\
    \ is based on the <notification>\n   element definition in Section 4 of [RFC5277].\
    \  It MUST conform to the\n   schema for the <notification> element in Section\
    \ 4 of [RFC5277],\n   using the XML namespace as defined in the XSD as follows:\n\
    \     urn:ietf:params:xml:ns:netconf:notification:1.0\n   For JSON-encoding purposes,\
    \ the module name for the \"notification\"\n   element is \"ietf-restconf\".\n\
    \   Two child nodes within the \"notification\" container are expected,\n   representing\
    \ the event time and the event payload.  The \"eventTime\"\n   node is defined\
    \ within the same XML namespace as the <notification>\n   element.  It is defined\
    \ to be within the \"ietf-restconf\" module\n   namespace for JSON-encoding purposes.\n\
    \   The name and namespace of the payload element are determined by the\n   YANG\
    \ module containing the notification-stmt representing the\n   notification message.\n\
    \   In the following example, the YANG module \"example-mod\" is used:\n     module\
    \ example-mod {\n       namespace \"http://example.com/event/1.0\";\n       prefix\
    \ ex;\n       organization \"Example, Inc.\";\n       contact \"support at example.com\"\
    ;\n       description \"Example Notification Data Model Module.\";\n       revision\
    \ \"2016-07-07\" {\n         description \"Initial version.\";\n         reference\
    \ \"example.com document 2-9976.\";\n       }\n       notification event {\n \
    \        description \"Example notification event.\";\n         leaf event-class\
    \ {\n           type string;\n           description \"Event class identifier.\"\
    ;\n         }\n         container reporting-entity {\n           description \"\
    Event specific information.\";\n           leaf card {\n             type string;\n\
    \             description \"Line card identifier.\";\n           }\n         }\n\
    \         leaf severity {\n           type string;\n           description \"\
    Event severity description.\";\n         }\n       }\n     }\n   An example SSE\
    \ event notification encoded using XML:\n      data: <notification\n      data:\
    \    xmlns=\"urn:ietf:params:xml:ns:netconf:notification:1.0\">\n      data: \
    \   <eventTime>2013-12-21T00:01:00Z</eventTime>\n      data:    <event xmlns=\"\
    http://example.com/event/1.0\">\n      data:       <event-class>fault</event-class>\n\
    \      data:       <reporting-entity>\n      data:           <card>Ethernet0</card>\n\
    \      data:       </reporting-entity>\n      data:       <severity>major</severity>\n\
    \      data:     </event>\n      data: </notification>\n   An example SSE event\
    \ notification encoded using JSON:\n      data: {\n      data:   \"ietf-restconf:notification\"\
    \ : {\n      data:     \"eventTime\" : \"2013-12-21T00:01:00Z\",\n      data:\
    \     \"example-mod:event\" : {\n      data:       \"event-class\" : \"fault\"\
    ,\n      data:       \"reporting-entity\" : { \"card\" : \"Ethernet0\" },\n  \
    \    data:       \"severity\" : \"major\"\n      data:     }\n      data:   }\n\
    \      data: }\n   Alternatively, since neither XML nor JSON is whitespace sensitive,\n\
    \   the above messages can be encoded onto a single line.  For example:\n    \
    \  XML:\n      data: <notification xmlns=\"urn:ietf:params:xml:ns:netconf:notif\\\
    \n      ication:1.0\"><eventTime>2013-12-21T00:01:00Z</eventTime><event \\\n \
    \     xmlns=\"http://example.com/event/1.0\"><event-class>fault</event-\\\n  \
    \    class><reportingEntity><card>Ethernet0</card></reporting-entity>\\\n    \
    \  <severity>major</severity></event></notification>\n      JSON:\n      data:\
    \ {\"ietf-restconf:notification\":{\"eventTime\":\"2013-12-21\\\n      T00:01:00Z\"\
    ,\"example-mod:event\":{\"event-class\": \"fault\",\"repor\\\n      tingEntity\"\
    :{\"card\":\"Ethernet0\"},\"severity\":\"major\"}}}\n   The SSE specification\
    \ supports the following additional fields:\n   \"event\", \"id\", and \"retry\"\
    .  A RESTCONF server MAY send the \"retry\"\n   field, and if it does, RESTCONF\
    \ clients SHOULD use it.  A RESTCONF\n   server SHOULD NOT send the \"event\"\
    \ or \"id\" fields, as there are no\n   meaningful values that could be used for\
    \ them that would not be\n   redundant to the contents of the notification itself.\
    \  RESTCONF\n   servers that do not send the \"id\" field also do not need to\
    \ support\n   the HTTP header field \"Last-Event-ID\" [W3C.REC-eventsource-20150203].\n\
    \   RESTCONF servers that do send the \"id\" field SHOULD support the\n   \"start-time\"\
    \ query parameter as the preferred means for a client to\n   specify where to\
    \ restart the event stream.\n"
- title: 7.  Error Reporting
  contents:
  - "7.  Error Reporting\n   HTTP status codes are used to report success or failure\
    \ for RESTCONF\n   operations.  The error information that NETCONF error responses\n\
    \   contain in the <rpc-error> element is adapted for use in RESTCONF,\n   and\
    \ <errors> data tree information is returned for the \"4xx\" and\n   \"5xx\" classes\
    \ of status codes.\n   Since an operation resource is defined with a YANG \"rpc\"\
    \ statement\n   and an action is defined with a YANG \"action\" statement, a mapping\n\
    \   from the NETCONF <error-tag> value to the HTTP status code is needed.\n  \
    \ The specific error-tag and response code to use are specific to the\n   data\
    \ model and might be contained in the YANG \"description\" statement\n   for the\
    \ \"action\" or \"rpc\" statement.\n              +-------------------------+------------------+\n\
    \              | error-tag               | status code      |\n              +-------------------------+------------------+\n\
    \              | in-use                  | 409              |\n              |\
    \                         |                  |\n              | invalid-value\
    \           | 400, 404, or 406 |\n              |                         |  \
    \                |\n              | (request) too-big       | 413            \
    \  |\n              |                         |                  |\n         \
    \     | (response) too-big      | 400              |\n              |        \
    \                 |                  |\n              | missing-attribute    \
    \   | 400              |\n              |                         |          \
    \        |\n              | bad-attribute           | 400              |\n   \
    \           |                         |                  |\n              | unknown-attribute\
    \       | 400              |\n              |                         |      \
    \            |\n              | bad-element             | 400              |\n\
    \              |                         |                  |\n              |\
    \ unknown-element         | 400              |\n              |              \
    \           |                  |\n              | unknown-namespace       | 400\
    \              |\n              |                         |                  |\n\
    \              | access-denied           | 401 or 403       |\n              |\
    \                         |                  |\n              | lock-denied  \
    \           | 409              |\n              |                         |  \
    \                |\n              | resource-denied         | 409            \
    \  |\n              |                         |                  |\n         \
    \     | rollback-failed         | 500              |\n              |        \
    \                 |                  |\n              | data-exists          \
    \   | 409              |\n              |                         |          \
    \        |\n              | data-missing            | 409              |\n   \
    \           |                         |                  |\n              | operation-not-supported\
    \ | 405 or 501       |\n              |                         |            \
    \      |\n              | operation-failed        | 412 or 500       |\n     \
    \         |                         |                  |\n              | partial-operation\
    \       | 500              |\n              |                         |      \
    \            |\n              | malformed-message       | 400              |\n\
    \              +-------------------------+------------------+\n              \
    \    Mapping from <error-tag> to Status Code\n"
- title: 7.1.  Error Response Message
  contents:
  - "7.1.  Error Response Message\n   When an error occurs for a request message on\
    \ any resource type and\n   the status code that will be returned is in the \"\
    4xx\" range (except\n   for status code \"403 Forbidden\"), the server SHOULD\
    \ send a response\n   message-body containing the information described by the\n\
    \   \"yang-errors\" YANG data template within the \"ietf-restconf\" module\n \
    \  found in Section 8.  The Content-Type of this response message MUST\n   be\
    \ \"application/yang-data\", plus, optionally, a structured syntax\n   name suffix.\n\
    \   The client SHOULD specify the desired encoding(s) for response\n   messages\
    \ by specifying the appropriate media type(s) in the\n   \"Accept\" header.  If\
    \ the client did not specify an \"Accept\" header,\n   then the same structured\
    \ syntax name suffix used in the request\n   message SHOULD be used, or the server\
    \ MAY choose any supported\n   message-encoding format.  If there is no request\
    \ message, the server\n   MUST select \"application/yang-data+xml\" or\n   \"\
    application/yang-data+json\", depending on server preference.  All of\n   the\
    \ examples in this document, except for the one below, assume that\n   XML encoding\
    \ will be returned if there is an error.\n   YANG tree diagram for <errors> data:\n\
    \     +---- errors\n           +---- error*\n              +---- error-type  \
    \     enumeration\n              +---- error-tag        string\n             \
    \ +---- error-app-tag?   string\n              +---- error-path?      instance-identifier\n\
    \              +---- error-message?   string\n              +---- error-info?\n\
    \   The semantics and syntax for RESTCONF error messages are defined with\n  \
    \ the \"yang-errors\" YANG data template extension, found in Section 8.\n   Examples:\n\
    \   The following example shows an error returned for a \"lock-denied\"\n   error\
    \ that can occur if a NETCONF client has locked a datastore.  The\n   RESTCONF\
    \ client is attempting to delete a data resource.  Note that\n   an \"Accept\"\
    \ header field is used to specify the desired encoding for\n   the error message.\
    \  There would be no response message-body content\n   if this operation was successful.\n\
    \      DELETE /restconf/data/example-jukebox:jukebox/\\\n         library/artist=Foo%20Fighters/album=Wasting%20Light\
    \ HTTP/1.1\n      Host: example.com\n      Accept: application/yang-data+json\n\
    \   The server might respond as follows:\n      HTTP/1.1 409 Conflict\n      Date:\
    \ Thu, 26 Jan 2017 20:56:30 GMT\n      Server: example-server\n      Content-Type:\
    \ application/yang-data+json\n      {\n        \"ietf-restconf:errors\" : {\n\
    \          \"error\" : [\n            {\n              \"error-type\" : \"protocol\"\
    ,\n              \"error-tag\" : \"lock-denied\",\n              \"error-message\"\
    \ : \"Lock failed; lock already held\"\n            }\n          ]\n        }\n\
    \      }\n   The following example shows an error returned for a \"data-exists\"\
    \n   error on a data resource.  The \"jukebox\" resource already exists, so\n\
    \   it cannot be created.\n   The client might send the following:\n      POST\
    \ /restconf/data/example-jukebox:jukebox HTTP/1.1\n      Host: example.com\n \
    \  The server might respond as follows:\n      HTTP/1.1 409 Conflict\n      Date:\
    \ Thu, 26 Jan 2017 20:56:30 GMT\n      Server: example-server\n      Content-Type:\
    \ application/yang-data+xml\n      <errors xmlns=\"urn:ietf:params:xml:ns:yang:ietf-restconf\"\
    >\n        <error>\n          <error-type>protocol</error-type>\n          <error-tag>data-exists</error-tag>\n\
    \          <error-path\n            xmlns:rc=\"urn:ietf:params:xml:ns:yang:ietf-restconf\"\
    \n            xmlns:jbox=\"https://example.com/ns/example-jukebox\">\\\n     \
    \       /rc:restconf/rc:data/jbox:jukebox\n          </error-path>\n         \
    \ <error-message>\n            Data already exists; cannot create new resource\n\
    \          </error-message>\n        </error>\n      </errors>\n"
- title: 8.  RESTCONF Module
  contents:
  - "8.  RESTCONF Module\n   The \"ietf-restconf\" module defines conceptual definitions\
    \ within an\n   extension and two groupings, which are not meant to be implemented\
    \ as\n   datastore contents by a server.  For example, the \"restconf\"\n   container\
    \ is not intended to be implemented as a top-level data node\n   (under the \"\
    /restconf/data\" URI).\n   Note that the \"ietf-restconf\" module does not have\
    \ any\n   protocol-accessible objects, so no YANG tree diagram is shown.\n   <CODE\
    \ BEGINS>\n   file \"ietf-restconf@2017-01-26.yang\"\n   module ietf-restconf\
    \ {\n     yang-version 1.1;\n     namespace \"urn:ietf:params:xml:ns:yang:ietf-restconf\"\
    ;\n     prefix \"rc\";\n     organization\n       \"IETF NETCONF (Network Configuration)\
    \ Working Group\";\n     contact\n       \"WG Web:   <https://datatracker.ietf.org/wg/netconf/>\n\
    \        WG List:  <mailto:netconf@ietf.org>\n        Author:   Andy Bierman\n\
    \                  <mailto:andy@yumaworks.com>\n        Author:   Martin Bjorklund\n\
    \                  <mailto:mbj@tail-f.com>\n        Author:   Kent Watsen\n  \
    \                <mailto:kwatsen@juniper.net>\";\n     description\n       \"\
    This module contains conceptual YANG specifications\n        for basic RESTCONF\
    \ media type definitions used in\n        RESTCONF protocol messages.\n      \
    \  Note that the YANG definitions within this module do not\n        represent\
    \ configuration data of any kind.\n        The 'restconf-media-type' YANG extension\
    \ statement\n        provides a normative syntax for XML and JSON\n        message-encoding\
    \ purposes.\n        Copyright (c) 2017 IETF Trust and the persons identified\
    \ as\n        authors of the code.  All rights reserved.\n        Redistribution\
    \ and use in source and binary forms, with or\n        without modification, is\
    \ permitted pursuant to, and subject\n        to the license terms contained in,\
    \ the Simplified BSD License\n        set forth in Section 4.c of the IETF Trust's\
    \ Legal Provisions\n        Relating to IETF Documents\n        (http://trustee.ietf.org/license-info).\n\
    \        This version of this YANG module is part of RFC 8040; see\n        the\
    \ RFC itself for full legal notices.\";\n     revision 2017-01-26 {\n       description\n\
    \         \"Initial revision.\";\n       reference\n         \"RFC 8040: RESTCONF\
    \ Protocol.\";\n     }\n     extension yang-data {\n       argument name {\n \
    \        yin-element true;\n       }\n       description\n         \"This extension\
    \ is used to specify a YANG data template that\n          represents conceptual\
    \ data defined in YANG.  It is\n          intended to describe hierarchical data\
    \ independent of\n          protocol context or specific message-encoding format.\n\
    \          Data definition statements within a yang-data extension\n         \
    \ specify the generic syntax for the specific YANG data\n          template, whose\
    \ name is the argument of the 'yang-data'\n          extension statement.\n  \
    \        Note that this extension does not define a media type.\n          A specification\
    \ using this extension MUST specify the\n          message-encoding rules, including\
    \ the content media type.\n          The mandatory 'name' parameter value identifies\
    \ the YANG\n          data template that is being defined.  It contains the\n\
    \          template name.\n          This extension is ignored unless it appears\
    \ as a top-level\n          statement.  It MUST contain data definition statements\n\
    \          that result in exactly one container data node definition.\n      \
    \    An instance of a YANG data template can thus be translated\n          into\
    \ an XML instance document, whose top-level element\n          corresponds to\
    \ the top-level container.\n          The module name and namespace values for\
    \ the YANG module using\n          the extension statement are assigned to instance\
    \ document data\n          conforming to the data definition statements within\n\
    \          this extension.\n          The substatements of this extension MUST\
    \ follow the\n          'data-def-stmt' rule in the YANG ABNF.\n          The\
    \ XPath document root is the extension statement itself,\n          such that\
    \ the child nodes of the document root are\n          represented by the data-def-stmt\
    \ substatements within\n          this extension.  This conceptual document is\
    \ the context\n          for the following YANG statements:\n            - must-stmt\n\
    \            - when-stmt\n            - path-stmt\n            - min-elements-stmt\n\
    \            - max-elements-stmt\n            - mandatory-stmt\n            -\
    \ unique-stmt\n            - ordered-by\n            - instance-identifier data\
    \ type\n          The following data-def-stmt substatements are constrained\n\
    \          when used within a 'yang-data' extension statement.\n            -\
    \ The list-stmt is not required to have a key-stmt defined.\n            - The\
    \ if-feature-stmt is ignored if present.\n            - The config-stmt is ignored\
    \ if present.\n            - The available identity values for any 'identityref'\n\
    \              leaf or leaf-list nodes are limited to the module\n           \
    \   containing this extension statement and the modules\n              imported\
    \ into that module.\n         \";\n     }\n     rc:yang-data yang-errors {\n \
    \      uses errors;\n     }\n     rc:yang-data yang-api {\n       uses restconf;\n\
    \     }\n     grouping errors {\n       description\n         \"A grouping that\
    \ contains a YANG container\n          representing the syntax and semantics of\
    \ a\n          YANG Patch error report within a response message.\";\n       container\
    \ errors {\n         description\n           \"Represents an error report returned\
    \ by the server if\n            a request results in an error.\";\n         list\
    \ error {\n           description\n             \"An entry containing information\
    \ about one\n              specific error that occurred while processing\n   \
    \           a RESTCONF request.\";\n           reference\n             \"RFC 6241,\
    \ Section 4.3.\";\n           leaf error-type {\n             type enumeration\
    \ {\n               enum transport {\n                 description\n         \
    \          \"The transport layer.\";\n               }\n               enum rpc\
    \ {\n                 description\n                   \"The rpc or notification\
    \ layer.\";\n               }\n               enum protocol {\n              \
    \   description\n                   \"The protocol operation layer.\";\n     \
    \          }\n               enum application {\n                 description\n\
    \                   \"The server application layer.\";\n               }\n   \
    \          }\n             mandatory true;\n             description\n       \
    \        \"The protocol layer where the error occurred.\";\n           }\n   \
    \        leaf error-tag {\n             type string;\n             mandatory true;\n\
    \             description\n               \"The enumerated error-tag.\";\n   \
    \        }\n           leaf error-app-tag {\n             type string;\n     \
    \        description\n               \"The application-specific error-tag.\";\n\
    \           }\n           leaf error-path {\n             type instance-identifier;\n\
    \             description\n               \"The YANG instance identifier associated\n\
    \                with the error node.\";\n           }\n           leaf error-message\
    \ {\n             type string;\n             description\n               \"A message\
    \ describing the error.\";\n           }\n           anydata error-info {\n  \
    \            description\n                \"This anydata value MUST represent\
    \ a container with\n                 zero or more data nodes representing additional\n\
    \                 error information.\";\n           }\n         }\n       }\n\
    \     }\n     grouping restconf {\n       description\n         \"Conceptual grouping\
    \ representing the RESTCONF\n          root resource.\";\n       container restconf\
    \ {\n         description\n           \"Conceptual container representing the\
    \ RESTCONF\n            root resource.\";\n         container data {\n       \
    \    description\n             \"Container representing the datastore resource.\n\
    \              Represents the conceptual root of all state data\n            \
    \  and configuration data supported by the server.\n              The child nodes\
    \ of this container can be any data\n              resources that are defined\
    \ as top-level data nodes\n              from the YANG modules advertised by the\
    \ server in\n              the 'ietf-yang-library' module.\";\n         }\n  \
    \       container operations {\n           description\n             \"Container\
    \ for all operation resources.\n              Each resource is represented as\
    \ an empty leaf with the\n              name of the RPC operation from the YANG\
    \ 'rpc' statement.\n              For example, the 'system-restart' RPC operation\
    \ defined\n              in the 'ietf-system' module would be represented as\n\
    \              an empty leaf in the 'ietf-system' namespace.  This is\n      \
    \        a conceptual leaf and will not actually be found in\n              the\
    \ module:\n                 module ietf-system {\n                   leaf system-reset\
    \ {\n                     type empty;\n                   }\n                \
    \ }\n              To invoke the 'system-restart' RPC operation:\n           \
    \      POST /restconf/operations/ietf-system:system-restart\n              To\
    \ discover the RPC operations supported by the server:\n                 GET /restconf/operations\n\
    \              In XML, the YANG module namespace identifies the module:\n    \
    \            <system-restart\n                   xmlns='urn:ietf:params:xml:ns:yang:ietf-system'/>\n\
    \              In JSON, the YANG module name identifies the module:\n        \
    \        { 'ietf-system:system-restart' : [null] }\n             \";\n       \
    \  }\n         leaf yang-library-version {\n           type string {\n       \
    \      pattern '\\d{4}-\\d{2}-\\d{2}';\n           }\n           config false;\n\
    \           mandatory true;\n           description\n             \"Identifies\
    \ the revision date of the 'ietf-yang-library'\n              module that is implemented\
    \ by this RESTCONF server.\n              Indicates the year, month, and day in\
    \ YYYY-MM-DD\n              numeric format.\";\n         }\n       }\n     }\n\
    \   }\n   <CODE ENDS>\n"
- title: 9.  RESTCONF Monitoring
  contents:
  - "9.  RESTCONF Monitoring\n   The \"ietf-restconf-monitoring\" module provides\
    \ information about the\n   RESTCONF protocol capabilities and event streams available\
    \ from the\n   server.  A RESTCONF server MUST implement the\n   \"ietf-restconf-monitoring\"\
    \ module.\n   YANG tree diagram for the \"ietf-restconf-monitoring\" module:\n\
    \      +--ro restconf-state\n         +--ro capabilities\n         |  +--ro capability*\
    \   inet:uri\n         +--ro streams\n            +--ro stream* [name]\n     \
    \          +--ro name                        string\n               +--ro description?\
    \                string\n               +--ro replay-support?             boolean\n\
    \               +--ro replay-log-creation-time?   yang:date-and-time\n       \
    \        +--ro access* [encoding]\n                  +--ro encoding  string\n\
    \                  +--ro location  inet:uri\n"
- title: 9.1.  restconf-state/capabilities
  contents:
  - "9.1.  restconf-state/capabilities\n   This mandatory container holds the RESTCONF\
    \ protocol capability URIs\n   supported by the server.\n   The server MAY maintain\
    \ a last-modified timestamp for this container\n   and return the \"Last-Modified\"\
    \ header field when this data node is\n   retrieved with the GET or HEAD methods.\
    \  Note that the last-modified\n   timestamp for the datastore resource is not\
    \ affected by changes to\n   this subtree.\n   The server SHOULD maintain an entity-tag\
    \ for this container and\n   return the \"ETag\" header field when this data node\
    \ is retrieved with\n   the GET or HEAD methods.  Note that the entity-tag for\
    \ the datastore\n   resource is not affected by changes to this subtree.\n   The\
    \ server MUST include a \"capability\" URI leaf-list entry for the\n   \"defaults\"\
    \ mode used by the server, defined in Section 9.1.2.\n   The server MUST include\
    \ a \"capability\" URI leaf-list entry\n   identifying each supported optional\
    \ protocol feature.  This includes\n   optional query parameters and MAY include\
    \ other capability URIs\n   defined outside this document.\n"
- title: 9.1.1.  Query Parameter URIs
  contents:
  - "9.1.1.  Query Parameter URIs\n   A new set of RESTCONF Capability URIs are defined\
    \ to identify the\n   specific query parameters (defined in Section 4.8) supported\
    \ by the\n   server.\n   The server MUST include a \"capability\" leaf-list entry\
    \ for each\n   optional query parameter that it supports.\n   +----------------+---------+---------------------------------------+\n\
    \   | Name           | Section | URI                                   |\n   |\
    \                |         |                                       |\n   +----------------+---------+---------------------------------------+\n\
    \   | depth          | 4.8.2   | urn:ietf:params:restconf:capability:  |\n   |\
    \                |         | depth:1.0                             |\n   |   \
    \             |         |                                       |\n   | fields\
    \         | 4.8.3   | urn:ietf:params:restconf:capability:  |\n   |          \
    \      |         | fields:1.0                            |\n   |             \
    \   |         |                                       |\n   | filter         |\
    \ 4.8.4   | urn:ietf:params:restconf:capability:  |\n   |                |   \
    \      | filter:1.0                            |\n   |                |      \
    \   |                                       |\n   | replay         | 4.8.7   |\
    \ urn:ietf:params:restconf:capability:  |\n   |                | 4.8.8   | replay:1.0\
    \                            |\n   |                |         |              \
    \                         |\n   | with-defaults  | 4.8.9   | urn:ietf:params:restconf:capability:\
    \  |\n   |                |         | with-defaults:1.0                     |\n\
    \   +----------------+---------+---------------------------------------+\n   \
    \                    RESTCONF Query Parameter URIs\n"
- title: 9.1.2.  The "defaults" Protocol Capability URI
  contents:
  - "9.1.2.  The \"defaults\" Protocol Capability URI\n   This URI identifies the\
    \ \"basic-mode\" default-handling mode that is\n   used by the server for processing\
    \ default leafs in requests for data\n   resources.  This protocol capability\
    \ URI MUST be supported by the\n   server and MUST be listed in the \"capability\"\
    \ leaf-list defined in\n   Section 9.3.\n      +----------+--------------------------------------------------+\n\
    \      | Name     | URI                                              |\n     \
    \ +----------+--------------------------------------------------+\n      | defaults\
    \ | urn:ietf:params:restconf:capability:defaults:1.0 |\n      +----------+--------------------------------------------------+\n\
    \                    RESTCONF \"defaults\" Capability URI\n   The URI MUST contain\
    \ a query parameter named \"basic-mode\" with one of\n   the values listed below:\n\
    \   +------------+------------------------------------------------------+\n  \
    \ | Value      | Description                                          |\n   +------------+------------------------------------------------------+\n\
    \   | report-all | No data nodes are considered default                 |\n  \
    \ |            |                                                      |\n   |\
    \ trim       | Values set to the YANG default-stmt value are        |\n   |  \
    \          | default                                              |\n   |    \
    \        |                                                      |\n   | explicit\
    \   | Values set by the client are never considered        |\n   |           \
    \ | default                                              |\n   +------------+------------------------------------------------------+\n\
    \   The \"basic-mode\" definitions are specified in \"With-defaults\n   Capability\
    \ for NETCONF\" [RFC6243].\n   If the \"basic-mode\" is set to \"report-all\"\
    , then the server MUST\n   adhere to the default-handling behavior defined in\
    \ Section 2.1 of\n   [RFC6243].\n   If the \"basic-mode\" is set to \"trim\",\
    \ then the server MUST adhere to\n   the default-handling behavior defined in\
    \ Section 2.2 of [RFC6243].\n   If the \"basic-mode\" is set to \"explicit\",\
    \ then the server MUST adhere\n   to the default-handling behavior defined in\
    \ Section 2.3 of [RFC6243].\n   Example (split for display purposes only):\n \
    \     urn:ietf:params:restconf:capability:defaults:1.0?\n           basic-mode=explicit\n"
- title: 9.2.  restconf-state/streams
  contents:
  - "9.2.  restconf-state/streams\n   This optional container provides access to the\
    \ event streams\n   supported by the server.  The server MAY omit this container\
    \ if no\n   event streams are supported.\n   The server will populate this container\
    \ with a \"stream\" list entry\n   for each stream type it supports.  Each stream\
    \ contains a leaf called\n   \"events\", which contains a URI that represents\
    \ an event stream\n   resource.\n   Stream resources are defined in Section 3.8.\
    \  Notifications are\n   defined in Section 6.\n"
- title: 9.3.  RESTCONF Monitoring Module
  contents:
  - "9.3.  RESTCONF Monitoring Module\n   The \"ietf-restconf-monitoring\" module\
    \ defines monitoring information\n   for the RESTCONF protocol.\n   The \"ietf-yang-types\"\
    \ and \"ietf-inet-types\" modules from [RFC6991]\n   are used by this module for\
    \ some type definitions.\n   <CODE BEGINS>\n   file \"ietf-restconf-monitoring@2017-01-26.yang\"\
    \n   module ietf-restconf-monitoring {\n     namespace \"urn:ietf:params:xml:ns:yang:ietf-restconf-monitoring\"\
    ;\n     prefix \"rcmon\";\n     import ietf-yang-types { prefix yang; }\n    \
    \ import ietf-inet-types { prefix inet; }\n     organization\n       \"IETF NETCONF\
    \ (Network Configuration) Working Group\";\n     contact\n       \"WG Web:   <https://datatracker.ietf.org/wg/netconf/>\n\
    \        WG List:  <mailto:netconf@ietf.org>\n        Author:   Andy Bierman\n\
    \                  <mailto:andy@yumaworks.com>\n        Author:   Martin Bjorklund\n\
    \                  <mailto:mbj@tail-f.com>\n        Author:   Kent Watsen\n  \
    \                <mailto:kwatsen@juniper.net>\";\n     description\n       \"\
    This module contains monitoring information for the\n        RESTCONF protocol.\n\
    \        Copyright (c) 2017 IETF Trust and the persons identified as\n       \
    \ authors of the code.  All rights reserved.\n        Redistribution and use in\
    \ source and binary forms, with or\n        without modification, is permitted\
    \ pursuant to, and subject\n        to the license terms contained in, the Simplified\
    \ BSD License\n        set forth in Section 4.c of the IETF Trust's Legal Provisions\n\
    \        Relating to IETF Documents\n        (http://trustee.ietf.org/license-info).\n\
    \        This version of this YANG module is part of RFC 8040; see\n        the\
    \ RFC itself for full legal notices.\";\n     revision 2017-01-26 {\n       description\n\
    \         \"Initial revision.\";\n       reference\n         \"RFC 8040: RESTCONF\
    \ Protocol.\";\n     }\n     container restconf-state {\n       config false;\n\
    \       description\n         \"Contains RESTCONF protocol monitoring information.\"\
    ;\n       container capabilities {\n         description\n           \"Contains\
    \ a list of protocol capability URIs.\";\n         leaf-list capability {\n  \
    \         type inet:uri;\n           description\n             \"A RESTCONF protocol\
    \ capability URI.\";\n         }\n       }\n       container streams {\n     \
    \    description\n           \"Container representing the notification event streams\n\
    \            supported by the server.\";\n          reference\n            \"\
    RFC 5277, Section 3.4, <streams> element.\";\n         list stream {\n       \
    \    key name;\n           description\n             \"Each entry describes an\
    \ event stream supported by\n              the server.\";\n           leaf name\
    \ {\n             type string;\n             description\n               \"The\
    \ stream name.\";\n             reference\n               \"RFC 5277, Section\
    \ 3.4, <name> element.\";\n           }\n           leaf description {\n     \
    \        type string;\n             description\n               \"Description\
    \ of stream content.\";\n             reference\n               \"RFC 5277, Section\
    \ 3.4, <description> element.\";\n           }\n           leaf replay-support\
    \ {\n             type boolean;\n             default false;\n             description\n\
    \               \"Indicates if replay buffer is supported for this stream.\n \
    \               If 'true', then the server MUST support the 'start-time'\n   \
    \             and 'stop-time' query parameters for this stream.\";\n         \
    \    reference\n               \"RFC 5277, Section 3.4, <replaySupport> element.\"\
    ;\n           }\n           leaf replay-log-creation-time {\n             when\
    \ \"../replay-support\" {\n               description\n                 \"Only\
    \ present if notification replay is supported.\";\n             }\n          \
    \   type yang:date-and-time;\n             description\n               \"Indicates\
    \ the time the replay log for this stream\n                was created.\";\n \
    \            reference\n               \"RFC 5277, Section 3.4, <replayLogCreationTime>\n\
    \                element.\";\n           }\n           list access {\n       \
    \      key encoding;\n             min-elements 1;\n             description\n\
    \               \"The server will create an entry in this list for each\n    \
    \            encoding format that is supported for this stream.\n            \
    \    The media type 'text/event-stream' is expected\n                for all event\
    \ streams.  This list identifies the\n                subtypes supported for this\
    \ stream.\";\n             leaf encoding {\n               type string;\n    \
    \           description\n                 \"This is the secondary encoding format\
    \ within the\n                  'text/event-stream' encoding used by all streams.\n\
    \                  The type 'xml' is supported for XML encoding.\n           \
    \       The type 'json' is supported for JSON encoding.\";\n             }\n \
    \            leaf location {\n               type inet:uri;\n               mandatory\
    \ true;\n               description\n                 \"Contains a URL that represents\
    \ the entry point\n                  for establishing notification delivery via\n\
    \                  server-sent events.\";\n             }\n           }\n    \
    \     }\n       }\n     }\n   }\n   <CODE ENDS>\n"
- title: 10.  YANG Module Library
  contents:
  - "10.  YANG Module Library\n   The \"ietf-yang-library\" module defined in [RFC7895]\
    \ provides\n   information about the YANG modules and submodules used by the\n\
    \   RESTCONF server.  Implementation is mandatory for RESTCONF servers.\n   All\
    \ YANG modules and submodules used by the server MUST be identified\n   in the\
    \ YANG module library.\n"
- title: 10.1.  modules-state/module
  contents:
  - "10.1.  modules-state/module\n   This mandatory list contains one entry for each\
    \ YANG data model\n   module supported by the server.  There MUST be an instance\
    \ of this\n   list for every YANG module that is used by the server.\n   The contents\
    \ of this list are defined in the \"module\" YANG list\n   statement in [RFC7895].\n\
    \   Note that there are no protocol-accessible objects in the\n   \"ietf-restconf\"\
    \ module to implement, but it is possible that a server\n   will list the \"ietf-restconf\"\
    \ module in the YANG library if it is\n   imported (directly or indirectly) by\
    \ an implemented module.\n"
- title: 11.  IANA Considerations
  contents:
  - '11.  IANA Considerations

    '
- title: 11.1.  The "restconf" Relation Type
  contents:
  - "11.1.  The \"restconf\" Relation Type\n   This specification registers the \"\
    restconf\" relation type in the\n   \"Link Relation Types\" registry defined by\
    \ [RFC5988]:\n      Relation Name: restconf\n      Description: Identifies the\
    \ root of the RESTCONF API as configured\n                   on this HTTP server.\
    \  The \"restconf\" relation\n                   defines the root of the API defined\
    \ in RFC 8040.\n                   Subsequent revisions of RESTCONF will use alternate\n\
    \                   relation values to support protocol versioning.\n      Reference:\
    \ RFC 8040\n"
- title: 11.2.  Registrations for New URIs and YANG Modules
  contents:
  - "11.2.  Registrations for New URIs and YANG Modules\n   This document registers\
    \ two URIs as namespaces in the \"IETF XML\n   Registry\" [RFC3688]:\n     URI:\
    \ urn:ietf:params:xml:ns:yang:ietf-restconf\n     Registrant Contact: The IESG.\n\
    \     XML: N/A; the requested URI is an XML namespace.\n     URI: urn:ietf:params:xml:ns:yang:ietf-restconf-monitoring\n\
    \     Registrant Contact: The IESG.\n     XML: N/A; the requested URI is an XML\
    \ namespace.\n   This document registers two YANG modules in the \"YANG Module\
    \ Names\"\n   registry [RFC6020]:\n     name:         ietf-restconf\n     namespace:\
    \    urn:ietf:params:xml:ns:yang:ietf-restconf\n     prefix:       rc\n     reference:\
    \    RFC 8040\n     name:         ietf-restconf-monitoring\n     namespace:  \
    \  urn:ietf:params:xml:ns:yang:ietf-restconf-monitoring\n     prefix:       rcmon\n\
    \     reference:    RFC 8040\n"
- title: 11.3.  Media Types
  contents:
  - '11.3.  Media Types

    '
- title: 11.3.1.  Media Type "application/yang-data+xml"
  contents:
  - "11.3.1.  Media Type \"application/yang-data+xml\"\n   Type name: application\n\
    \   Subtype name: yang-data+xml\n   Required parameters: None\n   Optional parameters:\
    \ None\n   Encoding considerations: 8-bit\n      Each conceptual YANG data node\
    \ is encoded according to the\n      XML Encoding Rules and Canonical Format for\
    \ the specific\n      YANG data node type defined in [RFC7950].\n   Security considerations:\
    \ Security considerations related\n      to the generation and consumption of\
    \ RESTCONF messages\n      are discussed in Section 12 of RFC 8040.\n      Additional\
    \ security considerations are specific to the\n      semantics of particular YANG\
    \ data models.  Each YANG module\n      is expected to specify security considerations\
    \ for the\n      YANG data defined in that module.\n   Interoperability considerations:\
    \ RFC 8040 specifies the\n      format of conforming messages and the interpretation\n\
    \      thereof.\n   Published specification: RFC 8040\n   Applications that use\
    \ this media type: Instance document\n      data parsers used within a protocol\
    \ or automation tool\n      that utilize YANG-defined data structures.\n   Fragment\
    \ identifier considerations: Fragment identifiers for\n      this type are not\
    \ defined.  All YANG data nodes are\n      accessible as resources using the path\
    \ in the request URI.\n   Additional information:\n      Deprecated alias names\
    \ for this type: N/A\n      Magic number(s): N/A\n      File extension(s): None\n\
    \      Macintosh file type code(s): \"TEXT\"\n   Person & email address to contact\
    \ for further information: See\n      the Authors' Addresses section of RFC 8040.\n\
    \   Intended usage: COMMON\n   Restrictions on usage: N/A\n   Author: See the\
    \ Authors' Addresses section of RFC 8040.\n   Change controller: Internet Engineering\
    \ Task Force\n      (mailto:iesg@ietf.org).\n   Provisional registration? (standards\
    \ tree only): no\n"
- title: 11.3.2.  Media Type "application/yang-data+json"
  contents:
  - "11.3.2.  Media Type \"application/yang-data+json\"\n   Type name: application\n\
    \   Subtype name: yang-data+json\n   Required parameters: None\n   Optional parameters:\
    \ None\n   Encoding considerations: 8-bit\n      Each conceptual YANG data node\
    \ is encoded according to\n      [RFC7951].  A metadata annotation is encoded\
    \ according to\n      [RFC7952].\n   Security considerations: Security considerations\
    \ related\n      to the generation and consumption of RESTCONF messages\n    \
    \  are discussed in Section 12 of RFC 8040.\n      Additional security considerations\
    \ are specific to the\n      semantics of particular YANG data models.  Each YANG\
    \ module\n      is expected to specify security considerations for the\n     \
    \ YANG data defined in that module.\n   Interoperability considerations: RFC 8040\
    \ specifies the format\n      of conforming messages and the interpretation thereof.\n\
    \   Published specification: RFC 8040\n   Applications that use this media type:\
    \ Instance document\n      data parsers used within a protocol or automation tool\n\
    \      that utilize YANG-defined data structures.\n   Fragment identifier considerations:\
    \ The syntax and semantics\n      of fragment identifiers are the same as the\
    \ syntax and semantics\n      specified for the \"application/json\" media type.\n\
    \   Additional information:\n      Deprecated alias names for this type: N/A\n\
    \      Magic number(s): N/A\n      File extension(s): None\n      Macintosh file\
    \ type code(s): \"TEXT\"\n   Person & email address to contact for further information:\
    \ See\n      the Authors' Addresses section of RFC 8040.\n   Intended usage: COMMON\n\
    \   Restrictions on usage: N/A\n   Author: See the Authors' Addresses section\
    \ of RFC 8040.\n   Change controller: Internet Engineering Task Force\n      (mailto:iesg@ietf.org).\n\
    \   Provisional registration? (standards tree only): no\n"
- title: 11.4.  RESTCONF Capability URNs
  contents:
  - "11.4.  RESTCONF Capability URNs\n   This document defines a registry for RESTCONF\
    \ capability identifiers.\n   The name of the registry is \"RESTCONF Capability\
    \ URNs\".  The review\n   policy for this registry is \"IETF Review\" [RFC5226].\
    \  The registry\n   shall record the following for each entry:\n   o  the name\
    \ of the RESTCONF capability.  By convention, this name\n      begins with the\
    \ colon (\":\") character.\n   o  the URN for the RESTCONF capability.\n   o \
    \ the reference for the document registering the value.\n   This document registers\
    \ several capability identifiers in the\n   \"RESTCONF Capability URNs\" registry:\n\
    \   Index           Capability Identifier\n   ---------------------------------------------------------------------\n\
    \   :defaults       urn:ietf:params:restconf:capability:defaults:1.0\n   :depth\
    \          urn:ietf:params:restconf:capability:depth:1.0\n   :fields         urn:ietf:params:restconf:capability:fields:1.0\n\
    \   :filter         urn:ietf:params:restconf:capability:filter:1.0\n   :replay\
    \         urn:ietf:params:restconf:capability:replay:1.0\n   :with-defaults  urn:ietf:params:restconf:capability:with-defaults:1.0\n"
- title: 11.5.  Registration of "restconf" URN Sub-namespace
  contents:
  - "11.5.  Registration of \"restconf\" URN Sub-namespace\n   IANA has registered\
    \ a new URN sub-namespace within the \"IETF URN\n   Sub-namespace for Registered\
    \ Protocol Parameter Identifiers\" registry\n   defined in [RFC3553].\n      Registry\
    \ Name: restconf\n      Specification: RFC 8040\n      Repository: \"RESTCONF\
    \ Capability URNs\" registry (Section 11.4)\n      Index value:  Sub-parameters\
    \ MUST be specified in UTF-8, using\n         standard URI encoding where necessary.\n"
- title: 12.  Security Considerations
  contents:
  - "12.  Security Considerations\n   Section 2.1 states that \"a RESTCONF server\
    \ MUST support the TLS\n   protocol [RFC5246].\"  This language leaves open the\
    \ possibility that\n   a RESTCONF server might also support future versions of\
    \ the TLS\n   protocol.  Of specific concern, TLS 1.3 [TLS1.3] introduces support\n\
    \   for 0-RTT handshakes that can lead to security issues for RESTCONF\n   APIs,\
    \ as described in Appendix B.1 of the TLS 1.3 document.  It is\n   therefore RECOMMENDED\
    \ that RESTCONF servers do not support 0-RTT at\n   all (not even for idempotent\
    \ requests) until an update to this RFC\n   guides otherwise.\n   Section 2.5\
    \ recommends authentication based on TLS client\n   certificates but allows the\
    \ use of any authentication scheme defined\n   in the \"Hypertext Transfer Protocol\
    \ (HTTP) Authentication Scheme\n   Registry\".  Implementations need to be aware\
    \ that the strengths of\n   these methods vary greatly and that some may be considered\n\
    \   experimental.  Selection of any of these schemes SHOULD be performed\n   after\
    \ reading the Security Considerations section of the RFC\n   associated with the\
    \ scheme's registry entry.\n   The \"ietf-restconf-monitoring\" YANG module defined\
    \ in this memo is\n   designed to be accessed via the NETCONF protocol [RFC6241].\
    \  The\n   lowest NETCONF layer is the secure transport layer, and the\n   mandatory-to-implement\
    \ secure transport is Secure Shell (SSH)\n   [RFC6242].  The NETCONF access control\
    \ model [RFC6536] provides the\n   means to restrict access for particular NETCONF\
    \ users to a\n   preconfigured subset of all available NETCONF protocol operations\
    \ and\n   content.\n   The lowest RESTCONF layer is HTTPS, and the mandatory-to-implement\n\
    \   secure transport is TLS [RFC5246].  The RESTCONF protocol uses the\n   NETCONF\
    \ access control model [RFC6536], which provides the means to\n   restrict access\
    \ for particular RESTCONF users to a preconfigured\n   subset of all available\
    \ RESTCONF protocol operations and content.\n   This section provides security\
    \ considerations for the resources\n   defined by the RESTCONF protocol.  Security\
    \ considerations for HTTPS\n   are defined in [RFC7230].  Aside from the \"ietf-restconf-monitoring\"\
    \n   module (Section 9) and the \"ietf-yang-library\" module (Section 10),\n \
    \  RESTCONF does not specify which YANG modules a server needs to\n   support.\
    \  Security considerations for the other modules manipulated\n   by RESTCONF can\
    \ be found in the documents defining those YANG\n   modules.\n   Configuration\
    \ information is by its very nature sensitive.  Its\n   transmission in the clear\
    \ and without integrity checking leaves\n   devices open to classic eavesdropping\
    \ and false data injection\n   attacks.  Configuration information often contains\
    \ passwords, user\n   names, service descriptions, and topological information,\
    \ all of\n   which are sensitive.  There are many patterns of attack that have\n\
    \   been observed through operational practice with existing management\n   interfaces.\
    \  It would be wise for implementers to research them and\n   take them into account\
    \ when implementing this protocol.\n   Different environments may well allow different\
    \ rights prior to, and\n   then after, authentication.  When a RESTCONF operation\
    \ is not\n   properly authorized, the RESTCONF server MUST return a \"401\n  \
    \ Unauthorized\" status-line.  Note that authorization information can\n   be\
    \ exchanged in the form of configuration information, which is all\n   the more\
    \ reason to ensure the security of the connection.  Note that\n   it is possible\
    \ for a client to detect configuration changes in data\n   resources it is not\
    \ authorized to access by monitoring changes in the\n   \"ETag\" and \"Last-Modified\"\
    \ header fields returned by the server for\n   the datastore resource.\n   A RESTCONF\
    \ server implementation SHOULD attempt to prevent system\n   disruption due to\
    \ excessive resource consumption required to fulfill\n   edit requests via the\
    \ POST, PUT, and PATCH methods.  On such an\n   implementation, it may be possible\
    \ to construct an attack that\n   attempts to consume all available memory or\
    \ other resource types.\n"
- title: 13.  References
  contents:
  - '13.  References

    '
- title: 13.1.  Normative References
  contents:
  - "13.1.  Normative References\n   [RFC2046]  Freed, N. and N. Borenstein, \"Multipurpose\
    \ Internet Mail\n              Extensions (MIME) Part Two: Media Types\", RFC\
    \ 2046,\n              DOI 10.17487/RFC2046, November 1996,\n              <http://www.rfc-editor.org/info/rfc2046>.\n\
    \   [RFC2119]  Bradner, S., \"Key words for use in RFCs to Indicate\n        \
    \      Requirement Levels\", BCP 14, RFC 2119,\n              DOI 10.17487/RFC2119,\
    \ March 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n   [RFC3553]\
    \  Mealling, M., Masinter, L., Hardie, T., and G. Klyne, \"An\n              IETF\
    \ URN Sub-namespace for Registered Protocol\n              Parameters\", BCP 73,\
    \ RFC 3553, DOI 10.17487/RFC3553,\n              June 2003, <http://www.rfc-editor.org/info/rfc3553>.\n\
    \   [RFC3688]  Mealling, M., \"The IETF XML Registry\", BCP 81, RFC 3688,\n  \
    \            DOI 10.17487/RFC3688, January 2004,\n              <http://www.rfc-editor.org/info/rfc3688>.\n\
    \   [RFC3986]  Berners-Lee, T., Fielding, R., and L. Masinter, \"Uniform\n   \
    \           Resource Identifier (URI): Generic Syntax\", STD 66,\n           \
    \   RFC 3986, DOI 10.17487/RFC3986, January 2005,\n              <http://www.rfc-editor.org/info/rfc3986>.\n\
    \   [RFC5234]  Crocker, D., Ed., and P. Overell, \"Augmented BNF for\n       \
    \       Syntax Specifications: ABNF\", STD 68, RFC 5234,\n              DOI 10.17487/RFC5234,\
    \ January 2008,\n              <http://www.rfc-editor.org/info/rfc5234>.\n   [RFC5246]\
    \  Dierks, T. and E. Rescorla, \"The Transport Layer Security\n              (TLS)\
    \ Protocol Version 1.2\", RFC 5246,\n              DOI 10.17487/RFC5246, August\
    \ 2008,\n              <http://www.rfc-editor.org/info/rfc5246>.\n   [RFC5277]\
    \  Chisholm, S. and H. Trevino, \"NETCONF Event\n              Notifications\"\
    , RFC 5277, DOI 10.17487/RFC5277, July 2008,\n              <http://www.rfc-editor.org/info/rfc5277>.\n\
    \   [RFC5280]  Cooper, D., Santesson, S., Farrell, S., Boeyen, S.,\n         \
    \     Housley, R., and W. Polk, \"Internet X.509 Public Key\n              Infrastructure\
    \ Certificate and Certificate Revocation List\n              (CRL) Profile\",\
    \ RFC 5280, DOI 10.17487/RFC5280, May 2008,\n              <http://www.rfc-editor.org/info/rfc5280>.\n\
    \   [RFC5789]  Dusseault, L. and J. Snell, \"PATCH Method for HTTP\",\n      \
    \        RFC 5789, DOI 10.17487/RFC5789, March 2010,\n              <http://www.rfc-editor.org/info/rfc5789>.\n\
    \   [RFC5988]  Nottingham, M., \"Web Linking\", RFC 5988,\n              DOI 10.17487/RFC5988,\
    \ October 2010,\n              <http://www.rfc-editor.org/info/rfc5988>.\n   [RFC6020]\
    \  Bjorklund, M., Ed., \"YANG - A Data Modeling Language for\n              the\
    \ Network Configuration Protocol (NETCONF)\", RFC 6020,\n              DOI 10.17487/RFC6020,\
    \ October 2010,\n              <http://www.rfc-editor.org/info/rfc6020>.\n   [RFC6241]\
    \  Enns, R., Ed., Bjorklund, M., Ed., Schoenwaelder, J., Ed.,\n              and\
    \ A. Bierman, Ed., \"Network Configuration Protocol\n              (NETCONF)\"\
    , RFC 6241, DOI 10.17487/RFC6241, June 2011,\n              <http://www.rfc-editor.org/info/rfc6241>.\n\
    \   [RFC6242]  Wasserman, M., \"Using the NETCONF Protocol over Secure\n     \
    \         Shell (SSH)\", RFC 6242, DOI 10.17487/RFC6242, June 2011,\n        \
    \      <http://www.rfc-editor.org/info/rfc6242>.\n   [RFC6243]  Bierman, A. and\
    \ B. Lengyel, \"With-defaults Capability for\n              NETCONF\", RFC 6243,\
    \ DOI 10.17487/RFC6243, June 2011,\n              <http://www.rfc-editor.org/info/rfc6243>.\n\
    \   [RFC6415]  Hammer-Lahav, E., Ed., and B. Cook, \"Web Host Metadata\",\n  \
    \            RFC 6415, DOI 10.17487/RFC6415, October 2011,\n              <http://www.rfc-editor.org/info/rfc6415>.\n\
    \   [RFC6536]  Bierman, A. and M. Bjorklund, \"Network Configuration\n       \
    \       Protocol (NETCONF) Access Control Model\", RFC 6536,\n              DOI\
    \ 10.17487/RFC6536, March 2012,\n              <http://www.rfc-editor.org/info/rfc6536>.\n\
    \   [RFC6570]  Gregorio, J., Fielding, R., Hadley, M., Nottingham, M.,\n     \
    \         and D. Orchard, \"URI Template\", RFC 6570,\n              DOI 10.17487/RFC6570,\
    \ March 2012,\n              <http://www.rfc-editor.org/info/rfc6570>.\n   [RFC6991]\
    \  Schoenwaelder, J., Ed., \"Common YANG Data Types\",\n              RFC 6991,\
    \ DOI 10.17487/RFC6991, July 2013,\n              <http://www.rfc-editor.org/info/rfc6991>.\n\
    \   [RFC7159]  Bray, T., Ed., \"The JavaScript Object Notation (JSON) Data\n \
    \             Interchange Format\", RFC 7159, DOI 10.17487/RFC7159,\n        \
    \      March 2014, <http://www.rfc-editor.org/info/rfc7159>.\n   [RFC7230]  Fielding,\
    \ R., Ed., and J. Reschke, Ed., \"Hypertext\n              Transfer Protocol (HTTP/1.1):\
    \ Message Syntax and Routing\",\n              RFC 7230, DOI 10.17487/RFC7230,\
    \ June 2014,\n              <http://www.rfc-editor.org/info/rfc7230>.\n   [RFC7231]\
    \  Fielding, R., Ed., and J. Reschke, Ed., \"Hypertext\n              Transfer\
    \ Protocol (HTTP/1.1): Semantics and Content\",\n              RFC 7231, DOI 10.17487/RFC7231,\
    \ June 2014,\n              <http://www.rfc-editor.org/info/rfc7231>.\n   [RFC7232]\
    \  Fielding, R., Ed., and J. Reschke, Ed., \"Hypertext\n              Transfer\
    \ Protocol (HTTP/1.1): Conditional Requests\",\n              RFC 7232, DOI 10.17487/RFC7232,\
    \ June 2014,\n              <http://www.rfc-editor.org/info/rfc7232>.\n   [RFC7235]\
    \  Fielding, R., Ed., and J. Reschke, Ed., \"Hypertext\n              Transfer\
    \ Protocol (HTTP/1.1): Authentication\", RFC 7235,\n              DOI 10.17487/RFC7235,\
    \ June 2014,\n              <http://www.rfc-editor.org/info/rfc7235>.\n   [RFC7320]\
    \  Nottingham, M., \"URI Design and Ownership\", BCP 190,\n              RFC 7320,\
    \ DOI 10.17487/RFC7320, July 2014,\n              <http://www.rfc-editor.org/info/rfc7320>.\n\
    \   [RFC7525]  Sheffer, Y., Holz, R., and P. Saint-Andre,\n              \"Recommendations\
    \ for Secure Use of Transport Layer\n              Security (TLS) and Datagram\
    \ Transport Layer Security\n              (DTLS)\", BCP 195, RFC 7525, DOI 10.17487/RFC7525,\n\
    \              May 2015, <http://www.rfc-editor.org/info/rfc7525>.\n   [RFC7589]\
    \  Badra, M., Luchuk, A., and J. Schoenwaelder, \"Using the\n              NETCONF\
    \ Protocol over Transport Layer Security (TLS) with\n              Mutual X.509\
    \ Authentication\", RFC 7589,\n              DOI 10.17487/RFC7589, June 2015,\n\
    \              <http://www.rfc-editor.org/info/rfc7589>.\n   [RFC7895]  Bierman,\
    \ A., Bjorklund, M., and K. Watsen, \"YANG Module\n              Library\", RFC\
    \ 7895, DOI 10.17487/RFC7895, June 2016,\n              <http://www.rfc-editor.org/info/rfc7895>.\n\
    \   [RFC7950]  Bjorklund, M., Ed., \"The YANG 1.1 Data Modeling Language\",\n\
    \              RFC 7950, DOI 10.17487/RFC7950, August 2016,\n              <http://www.rfc-editor.org/info/rfc7950>.\n\
    \   [RFC7951]  Lhotka, L., \"JSON Encoding of Data Modeled with YANG\",\n    \
    \          RFC 7951, DOI 10.17487/RFC7951, August 2016,\n              <http://www.rfc-editor.org/info/rfc7951>.\n\
    \   [RFC7952]  Lhotka, L., \"Defining and Using Metadata with YANG\",\n      \
    \        RFC 7952, DOI 10.17487/RFC7952, August 2016,\n              <http://www.rfc-editor.org/info/rfc7952>.\n\
    \   [W3C.REC-eventsource-20150203]\n              Hickson, I., \"Server-Sent Events\"\
    , World Wide Web\n              Consortium Recommendation REC-eventsource-20150203,\n\
    \              February 2015,\n              <http://www.w3.org/TR/2015/REC-eventsource-20150203>.\n\
    \   [W3C.REC-xml-20081126]\n              Bray, T., Paoli, J., Sperberg-McQueen,\
    \ M., Maler, E.,\n              and F. Yergeau, \"Extensible Markup Language (XML)\
    \ 1.0\n              (Fifth Edition)\", World Wide Web Consortium Recommendation\n\
    \              REC-xml-20081126, November 2008,\n              <http://www.w3.org/TR/2008/REC-xml-20081126>.\n\
    \   [XPath]    Clark, J. and S. DeRose, \"XML Path Language (XPath)\n        \
    \      Version 1.0\", World Wide Web Consortium Recommendation\n             \
    \ REC-xpath-19991116, November 1999,\n              <http://www.w3.org/TR/1999/REC-xpath-19991116>.\n"
- title: 13.2.  Informative References
  contents:
  - "13.2.  Informative References\n   [REST-Dissertation]\n              Fielding,\
    \ R., \"Architectural Styles and the Design of\n              Network-based Software\
    \ Architectures\", 2000.\n   [RFC2818]  Rescorla, E., \"HTTP Over TLS\", RFC 2818,\n\
    \              DOI 10.17487/RFC2818, May 2000,\n              <http://www.rfc-editor.org/info/rfc2818>.\n\
    \   [RFC5226]  Narten, T. and H. Alvestrand, \"Guidelines for Writing an\n   \
    \           IANA Considerations Section in RFCs\", BCP 26, RFC 5226,\n       \
    \       DOI 10.17487/RFC5226, May 2008,\n              <http://www.rfc-editor.org/info/rfc5226>.\n\
    \   [TLS1.3]   Rescorla, E., \"The Transport Layer Security (TLS) Protocol\n \
    \             Version 1.3\", Work in Progress, draft-ietf-tls-tls13-18,\n    \
    \          October 2016.\n   [YANG-Patch]\n              Bierman, A., Bjorklund,\
    \ M., and K. Watsen, \"YANG Patch\n              Media Type\", Work in Progress,\n\
    \              draft-ietf-netconf-yang-patch-14, November 2016.\n"
- title: Appendix A.  Example YANG Module
  contents:
  - "Appendix A.  Example YANG Module\n   The example YANG module used in this document\
    \ represents a simple\n   media jukebox interface.\n   YANG tree diagram for the\
    \ \"example-jukebox\" module:\n      +--rw jukebox!\n         +--rw library\n\
    \         |  +--rw artist* [name]\n         |  |  +--rw name     string\n    \
    \     |  |  +--rw album* [name]\n         |  |     +--rw name     string\n   \
    \      |  |     +--rw genre?   identityref\n         |  |     +--rw year?    uint16\n\
    \         |  |     +--rw admin\n         |  |     |  +--rw label?            \
    \  string\n         |  |     |  +--rw catalogue-number?   string\n         | \
    \ |     +--rw song* [name]\n         |  |        +--rw name        string\n  \
    \       |  |        +--rw location    string\n         |  |        +--rw format?\
    \     string\n         |  |        +--rw length?     uint32\n         |  +--ro\
    \ artist-count?   uint32\n         |  +--ro album-count?    uint32\n         |\
    \  +--ro song-count?     uint32\n         +--rw playlist* [name]\n         | \
    \ +--rw name           string\n         |  +--rw description?   string\n     \
    \    |  +--rw song* [index]\n         |     +--rw index    uint32\n         |\
    \     +--rw id       instance-identifier\n         +--rw player\n            +--rw\
    \ gap?   decimal64\n     rpcs:\n     +---x play\n         +--ro input\n      \
    \      +--ro playlist       string\n            +--ro song-number    uint32\n"
- title: A.1.  "example-jukebox" YANG Module
  contents:
  - "A.1.  \"example-jukebox\" YANG Module\n   module example-jukebox {\n      namespace\
    \ \"http://example.com/ns/example-jukebox\";\n      prefix \"jbox\";\n      organization\
    \ \"Example, Inc.\";\n      contact \"support at example.com\";\n      description\
    \ \"Example Jukebox Data Model Module.\";\n      revision \"2016-08-15\" {\n \
    \       description \"Initial version.\";\n        reference \"example.com document\
    \ 1-4673.\";\n      }\n      identity genre {\n        description\n         \
    \ \"Base for all genre types.\";\n      }\n      // abbreviated list of genre\
    \ classifications\n      identity alternative {\n        base genre;\n       \
    \ description\n          \"Alternative music.\";\n      }\n      identity blues\
    \ {\n        base genre;\n        description\n          \"Blues music.\";\n \
    \     }\n      identity country {\n        base genre;\n        description\n\
    \          \"Country music.\";\n      }\n      identity jazz {\n        base genre;\n\
    \        description\n          \"Jazz music.\";\n      }\n      identity pop\
    \ {\n        base genre;\n        description\n          \"Pop music.\";\n   \
    \   }\n      identity rock {\n        base genre;\n        description\n     \
    \     \"Rock music.\";\n      }\n      container jukebox {\n        presence\n\
    \          \"An empty container indicates that the jukebox\n           service\
    \ is available.\";\n        description\n          \"Represents a 'jukebox' resource,\
    \ with a library, playlists,\n           and a 'play' operation.\";\n        container\
    \ library {\n          description\n            \"Represents the 'jukebox' library\
    \ resource.\";\n          list artist {\n            key name;\n            description\n\
    \              \"Represents one 'artist' resource within the\n               'jukebox'\
    \ library resource.\";\n            leaf name {\n              type string {\n\
    \                length \"1 .. max\";\n              }\n              description\n\
    \                \"The name of the artist.\";\n            }\n            list\
    \ album {\n              key name;\n              description\n              \
    \  \"Represents one 'album' resource within one\n                 'artist' resource,\
    \ within the jukebox library.\";\n              leaf name {\n                type\
    \ string {\n                  length \"1 .. max\";\n                }\n      \
    \          description\n                  \"The name of the album.\";\n      \
    \        }\n              leaf genre {\n                type identityref { base\
    \ genre; }\n                description\n                  \"The genre identifying\
    \ the type of music on\n                   the album.\";\n              }\n  \
    \            leaf year {\n                type uint16 {\n                  range\
    \ \"1900 .. max\";\n                }\n                description\n         \
    \         \"The year the album was released.\";\n              }\n           \
    \   container admin {\n                description\n                  \"Administrative\
    \ information for the album.\";\n                leaf label {\n              \
    \    type string;\n                  description\n                    \"The label\
    \ that released the album.\";\n                }\n                leaf catalogue-number\
    \ {\n                  type string;\n                  description\n         \
    \           \"The album's catalogue number.\";\n                }\n          \
    \    }\n              list song {\n                key name;\n               \
    \ description\n                  \"Represents one 'song' resource within one\n\
    \                   'album' resource, within the jukebox library.\";\n       \
    \         leaf name {\n                  type string {\n                     length\
    \ \"1 .. max\";\n                  }\n                  description\n        \
    \            \"The name of the song.\";\n                }\n                leaf\
    \ location {\n                  type string;\n                  mandatory true;\n\
    \                  description\n                    \"The file location string\
    \ of the\n                     media file for the song.\";\n                }\n\
    \                leaf format {\n                  type string;\n             \
    \     description\n                    \"An identifier string for the media type\n\
    \                     for the file associated with the\n                     'location'\
    \ leaf for this entry.\";\n                }\n                leaf length {\n\
    \                  type uint32;\n                  units \"seconds\";\n      \
    \            description\n                    \"The duration of this song in seconds.\"\
    ;\n                }\n              }   // end list 'song'\n            }   //\
    \ end list 'album'\n          }  // end list 'artist'\n          leaf artist-count\
    \ {\n             type uint32;\n             units \"artists\";\n            \
    \ config false;\n             description\n               \"Number of artists\
    \ in the library.\";\n          }\n          leaf album-count {\n            \
    \ type uint32;\n             units \"albums\";\n             config false;\n \
    \            description\n               \"Number of albums in the library.\"\
    ;\n          }\n          leaf song-count {\n             type uint32;\n     \
    \        units \"songs\";\n             config false;\n             description\n\
    \               \"Number of songs in the library.\";\n          }\n        } \
    \ // end library\n        list playlist {\n          key name;\n          description\n\
    \            \"Example configuration data resource.\";\n          leaf name {\n\
    \            type string;\n            description\n              \"The name of\
    \ the playlist.\";\n          }\n          leaf description {\n            type\
    \ string;\n            description\n              \"A comment describing the playlist.\"\
    ;\n          }\n          list song {\n            key index;\n            ordered-by\
    \ user;\n            description\n              \"Example nested configuration\
    \ data resource.\";\n            leaf index {    // not really needed\n      \
    \        type uint32;\n              description\n                \"An arbitrary\
    \ integer index for this playlist song.\";\n            }\n            leaf id\
    \ {\n              type instance-identifier;\n              mandatory true;\n\
    \              description\n                \"Song identifier.  Must identify\
    \ an instance of\n                 /jukebox/library/artist/album/song/name.\"\
    ;\n            }\n          }\n        }\n        container player {\n       \
    \   description\n            \"Represents the jukebox player resource.\";\n  \
    \        leaf gap {\n            type decimal64 {\n              fraction-digits\
    \ 1;\n              range \"0.0 .. 2.0\";\n            }\n            units \"\
    tenths of seconds\";\n            description\n              \"Time gap between\
    \ each song.\";\n          }\n        }\n      }\n      rpc play {\n        description\n\
    \          \"Control function for the jukebox player.\";\n        input {\n  \
    \        leaf playlist {\n            type string;\n            mandatory true;\n\
    \            description\n              \"The playlist name.\";\n          }\n\
    \          leaf song-number {\n            type uint32;\n            mandatory\
    \ true;\n            description\n              \"Song number in playlist to play.\"\
    ;\n          }\n        }\n      }\n   }\n"
- title: Appendix B.  RESTCONF Message Examples
  contents:
  - "Appendix B.  RESTCONF Message Examples\n   The examples within this document\
    \ use the normative YANG module\n   \"ietf-restconf\" as defined in Section 8\
    \ and the non-normative example\n   YANG module \"example-jukebox\" as defined\
    \ in Appendix A.1.\n   This section shows some typical RESTCONF message exchanges.\n"
- title: B.1.  Resource Retrieval Examples
  contents:
  - 'B.1.  Resource Retrieval Examples

    '
- title: B.1.1.  Retrieve the Top-Level API Resource
  contents:
  - "B.1.1.  Retrieve the Top-Level API Resource\n   The client starts by retrieving\
    \ the RESTCONF root resource:\n      GET /.well-known/host-meta HTTP/1.1\n   \
    \   Host: example.com\n      Accept: application/xrd+xml\n   The server might\
    \ respond as follows:\n      HTTP/1.1 200 OK\n      Content-Type: application/xrd+xml\n\
    \      Content-Length: nnn\n      <XRD xmlns='http://docs.oasis-open.org/ns/xri/xrd-1.0'>\n\
    \          <Link rel='restconf' href='/restconf'/>\n      </XRD>\n   The client\
    \ may then retrieve the top-level API resource, using the\n   root resource \"\
    /restconf\".\n      GET /restconf HTTP/1.1\n      Host: example.com\n      Accept:\
    \ application/yang-data+json\n   The server might respond as follows:\n      HTTP/1.1\
    \ 200 OK\n      Date: Thu, 26 Jan 2017 20:56:30 GMT\n      Server: example-server\n\
    \      Content-Type: application/yang-data+json\n      {\n        \"ietf-restconf:restconf\"\
    \ : {\n          \"data\" : {},\n          \"operations\" : {},\n          \"\
    yang-library-version\" : \"2016-06-21\"\n        }\n      }\n   To request that\
    \ the response content be encoded in XML, the \"Accept\"\n   header can be used,\
    \ as in this example request:\n      GET /restconf HTTP/1.1\n      Host: example.com\n\
    \      Accept: application/yang-data+xml\n   The server will return the same conceptual\
    \ data either way, which\n   might be as follows:\n      HTTP/1.1 200 OK\n   \
    \   Date: Thu, 26 Jan 2017 20:56:30 GMT\n      Server: example-server\n      Cache-Control:\
    \ no-cache\n      Content-Type: application/yang-data+xml\n      <restconf xmlns=\"\
    urn:ietf:params:xml:ns:yang:ietf-restconf\">\n        <data/>\n        <operations/>\n\
    \        <yang-library-version>2016-06-21</yang-library-version>\n      </restconf>\n"
- title: B.1.2.  Retrieve the Server Module Information
  contents:
  - "B.1.2.  Retrieve the Server Module Information\n   It is possible that the YANG\
    \ library module will change over time.\n   The client can retrieve the revision\
    \ date of the \"ietf-yang-library\"\n   module supported by the server from the\
    \ API resource, as described in\n   the previous section.\n   In this example,\
    \ the client is retrieving the module information from\n   the server in JSON\
    \ format:\n      GET /restconf/data/ietf-yang-library:modules-state HTTP/1.1\n\
    \      Host: example.com\n      Accept: application/yang-data+json\n   The server\
    \ might respond as follows:\n      HTTP/1.1 200 OK\n      Date: Thu, 26 Jan 2017\
    \ 20:56:30 GMT\n      Server: example-server\n      Cache-Control: no-cache\n\
    \      Last-Modified: Thu, 26 Jan 2017 14:00:14 GMT\n      Content-Type: application/yang-data+json\n\
    \      {\n        \"ietf-yang-library:modules-state\" : {\n          \"module-set-id\"\
    \ : \"5479120c17a619545ea6aff7aa19838b036ebbd7\",\n          \"module\" : [\n\
    \            {\n              \"name\" : \"foo\",\n              \"revision\"\
    \ : \"2012-01-02\",\n              \"schema\" : \"https://example.com/modules/foo/2012-01-02\"\
    ,\n              \"namespace\" : \"http://example.com/ns/foo\",\n            \
    \  \"feature\" : [ \"feature1\", \"feature2\" ],\n              \"deviation\"\
    \ : [\n                {\n                  \"name\" : \"foo-dev\",\n        \
    \          \"revision\" : \"2012-02-16\"\n                }\n              ],\n\
    \              \"conformance-type\" : \"implement\"\n            },\n        \
    \    {\n              \"name\" : \"ietf-yang-library\",\n              \"revision\"\
    \ : \"2016-06-21\",\n              \"schema\" : \"https://example.com/modules/\\\
    \n                ietf-yang-library/2016-06-21\",\n              \"namespace\"\
    \ :\n                \"urn:ietf:params:xml:ns:yang:ietf-yang-library\",\n    \
    \          \"conformance-type\" : \"implement\"\n            },\n            {\n\
    \              \"name\" : \"foo-types\",\n              \"revision\" : \"2012-01-05\"\
    ,\n              \"schema\" :\n                \"https://example.com/modules/foo-types/2012-01-05\"\
    ,\n              \"namespace\" : \"http://example.com/ns/foo-types\",\n      \
    \        \"conformance-type\" : \"import\"\n            },\n            {\n  \
    \            \"name\" : \"bar\",\n              \"revision\" : \"2012-11-05\"\
    ,\n              \"schema\" : \"https://example.com/modules/bar/2012-11-05\",\n\
    \              \"namespace\" : \"http://example.com/ns/bar\",\n              \"\
    feature\" : [ \"bar-ext\" ],\n              \"conformance-type\" : \"implement\"\
    ,\n              \"submodule\" : [\n                {\n                  \"name\"\
    \ : \"bar-submod1\",\n                  \"revision\" : \"2012-11-05\",\n     \
    \             \"schema\" :\n                   \"https://example.com/modules/bar-submod1/2012-11-05\"\
    \n                },\n                {\n                  \"name\" : \"bar-submod2\"\
    ,\n                  \"revision\" : \"2012-11-05\",\n                  \"schema\"\
    \ :\n                   \"https://example.com/modules/bar-submod2/2012-11-05\"\
    \n                }\n              ]\n            }\n          ]\n        }\n\
    \      }\n"
- title: B.1.3.  Retrieve the Server Capability Information
  contents:
  - "B.1.3.  Retrieve the Server Capability Information\n   In this example, the client\
    \ is retrieving the capability information\n   from the server in XML format,\
    \ and the server supports all of the\n   RESTCONF query parameters, plus one vendor\
    \ parameter:\n      GET /restconf/data/ietf-restconf-monitoring:restconf-state/\\\
    \n          capabilities HTTP/1.1\n      Host: example.com\n      Accept: application/yang-data+xml\n\
    \   The server might respond as follows:\n      HTTP/1.1 200 OK\n      Date: Thu,\
    \ 26 Jan 2017 20:56:30 GMT\n      Server: example-server\n      Cache-Control:\
    \ no-cache\n      Last-Modified: Thu, 26 Jan 2017 16:00:14 GMT\n      Content-Type:\
    \ application/yang-data+xml\n      <capabilities\n          xmlns=\"urn:ietf:params:xml:ns:yang:ietf-restconf-monitoring\"\
    >\n       <capability>\\\n        urn:ietf:params:restconf:capability:defaults:1.0?\\\
    \n           basic-mode=explicit\\\n       </capability>\n       <capability>\\\
    \n        urn:ietf:params:restconf:capability:with-defaults:1.0\\\n       </capability>\n\
    \       <capability>\\\n        urn:ietf:params:restconf:capability:depth:1.0\\\
    \n       </capability>\n       <capability>\\\n        urn:ietf:params:restconf:capability:fields:1.0\\\
    \n       </capability>\n       <capability>\\\n        urn:ietf:params:restconf:capability:filter:1.0\\\
    \n       </capability>\n       <capability>\\\n        urn:ietf:params:restconf:capability:start-time:1.0\\\
    \n       </capability>\n       <capability>\\\n        urn:ietf:params:restconf:capability:stop-time:1.0\\\
    \n       </capability>\n       <capability>\\\n        http://example.com/capabilities/myparam\\\
    \n       </capability>\n      </capabilities>\n"
- title: B.2.  Data Resource and Datastore Resource Examples
  contents:
  - 'B.2.  Data Resource and Datastore Resource Examples

    '
- title: B.2.1.  Create New Data Resources
  contents:
  - "B.2.1.  Create New Data Resources\n   To create a new \"artist\" resource within\
    \ the \"library\" resource, the\n   client might send the following request:\n\
    \      POST /restconf/data/example-jukebox:jukebox/library HTTP/1.1\n      Host:\
    \ example.com\n      Content-Type: application/yang-data+json\n      {\n     \
    \   \"example-jukebox:artist\" : [\n          {\n            \"name\" : \"Foo\
    \ Fighters\"\n          }\n        ]\n      }\n   If the resource is created,\
    \ the server might respond as follows:\n      HTTP/1.1 201 Created\n      Date:\
    \ Thu, 26 Jan 2017 20:56:30 GMT\n      Server: example-server\n      Location:\
    \ https://example.com/restconf/data/\\\n          example-jukebox:jukebox/library/artist=Foo%20Fighters\n\
    \      Last-Modified: Thu, 26 Jan 2017 20:56:30 GMT\n      ETag: \"b3830f23a4c\"\
    \n   To create a new \"album\" resource for this artist within the \"jukebox\"\
    \n   resource, the client might send the following request:\n      POST /restconf/data/example-jukebox:jukebox/\\\
    \n          library/artist=Foo%20Fighters HTTP/1.1\n      Host: example.com\n\
    \      Content-Type: application/yang-data+xml\n      <album xmlns=\"http://example.com/ns/example-jukebox\"\
    >\n        <name>Wasting Light</name>\n        <year>2011</year>\n      </album>\n\
    \   If the resource is created, the server might respond as follows:\n      HTTP/1.1\
    \ 201 Created\n      Date: Thu, 26 Jan 2017 20:56:30 GMT\n      Server: example-server\n\
    \      Location: https://example.com/restconf/data/\\\n          example-jukebox:jukebox/library/artist=Foo%20Fighters/\\\
    \n          album=Wasting%20Light\n      Last-Modified: Thu, 26 Jan 2017 20:56:30\
    \ GMT\n      ETag: \"b8389233a4c\"\n"
- title: B.2.2.  Detect Datastore Resource Entity-Tag Change
  contents:
  - "B.2.2.  Detect Datastore Resource Entity-Tag Change\n   In this example, the\
    \ server just supports the datastore last-changed\n   timestamp.  Assume that\
    \ the client has cached the \"Last-Modified\"\n   header from the response to\
    \ the previous request.  This value is used\n   as in the \"If-Unmodified-Since\"\
    \ header in the following request to\n   patch an \"album\" list entry with a\
    \ key value of \"Wasting Light\".\n   Only the \"genre\" field is being updated.\n\
    \      PATCH /restconf/data/example-jukebox:jukebox/\\\n          library/artist=Foo%20Fighters/album=Wasting%20Light/\\\
    \n          genre HTTP/1.1\n      Host: example.com\n      If-Unmodified-Since:\
    \ Thu, 26 Jan 2017 20:56:30 GMT\n      Content-Type: application/yang-data+json\n\
    \      { \"example-jukebox:genre\" : \"example-jukebox:alternative\" }\n   In\
    \ this example, the datastore resource has changed since the time\n   specified\
    \ in the \"If-Unmodified-Since\" header.  The server might\n   respond as follows:\n\
    \      HTTP/1.1 412 Precondition Failed\n      Date: Thu, 26 Jan 2017 20:56:30\
    \ GMT\n      Server: example-server\n      Last-Modified: Thu, 26 Jan 2017 19:41:00\
    \ GMT\n      ETag: \"b34aed893a4c\"\n"
- title: B.2.3.  Edit a Datastore Resource
  contents:
  - "B.2.3.  Edit a Datastore Resource\n   In this example, assume that there is a\
    \ top-level data resource named\n   \"system\" from the example-system module,\
    \ and this container has a\n   child leaf called \"enable-jukebox-streaming\"\
    :\n      container system {\n        leaf enable-jukebox-streaming {\n       \
    \   type boolean;\n        }\n      }\n   In this example, PATCH is used by the\
    \ client to modify two top-level\n   resources at once, in order to enable jukebox\
    \ streaming and add an\n   \"album\" sub-resource to each of two \"artist\" resources:\n\
    \      PATCH /restconf/data HTTP/1.1\n      Host: example.com\n      Content-Type:\
    \ application/yang-data+xml\n      <data xmlns=\"urn:ietf:params:xml:ns:yang:ietf-restconf\"\
    >\n        <system xmlns=\"http://example.com/ns/example-system\">\n         \
    \ <enable-jukebox-streaming>true</enable-jukebox-streaming>\n        </system>\n\
    \        <jukebox xmlns=\"http://example.com/ns/example-jukebox\">\n         \
    \ <library>\n            <artist>\n              <name>Foo Fighters</name>\n \
    \             <album>\n                <name>One by One</name>\n             \
    \   <year>2012</year>\n              </album>\n            </artist>\n       \
    \     <artist>\n              <name>Nick Cave and the Bad Seeds</name>\n     \
    \         <album>\n                <name>Tender Prey</name>\n                <year>1988</year>\n\
    \              </album>\n            </artist>\n          </library>\n       \
    \ </jukebox>\n      </data>\n"
- title: B.2.4.  Replace a Datastore Resource
  contents:
  - "B.2.4.  Replace a Datastore Resource\n   In this example, the entire configuration\
    \ datastore contents are\n   being replaced.  Any child nodes not present in the\
    \ <data> element\n   but present in the server will be deleted.\n      PUT /restconf/data\
    \ HTTP/1.1\n      Host: example.com\n      Content-Type: application/yang-data+xml\n\
    \      <data xmlns=\"urn:ietf:params:xml:ns:yang:ietf-restconf\">\n        <jukebox\
    \ xmlns=\"http://example.com/ns/example-jukebox\">\n          <library>\n    \
    \        <artist>\n              <name>Foo Fighters</name>\n              <album>\n\
    \                <name>One by One</name>\n                <year>2012</year>\n\
    \              </album>\n            </artist>\n            <artist>\n       \
    \       <name>Nick Cave and the Bad Seeds</name>\n              <album>\n    \
    \            <name>Tender Prey</name>\n                <year>1988</year>\n   \
    \           </album>\n            </artist>\n          </library>\n        </jukebox>\n\
    \      </data>\n"
- title: B.2.5.  Edit a Data Resource
  contents:
  - "B.2.5.  Edit a Data Resource\n   In this example, the client modifies one data\
    \ node by adding an\n   \"album\" sub-resource by sending a PATCH for the data\
    \ resource:\n      PATCH /restconf/data/example-jukebox:jukebox/library/\\\n \
    \        artist=Nick%20Cave%20and%20the%20Bad%20Seeds HTTP/1.1\n      Host: example.com\n\
    \      Content-Type: application/yang-data+xml\n      <artist xmlns=\"http://example.com/ns/example-jukebox\"\
    >\n        <name>Nick Cave and the Bad Seeds</name>\n        <album>\n       \
    \   <name>The Good Son</name>\n          <year>1990</year>\n        </album>\n\
    \      </artist>\n"
- title: B.3.  Query Parameter Examples
  contents:
  - 'B.3.  Query Parameter Examples

    '
- title: B.3.1.  "content" Parameter
  contents:
  - "B.3.1.  \"content\" Parameter\n   The \"content\" parameter is used to select\
    \ the types of data child\n   resources (configuration and/or non-configuration)\
    \ that are returned\n   by the server for a GET method request.\n   In this example,\
    \ a simple YANG list is used that has configuration\n   and non-configuration\
    \ child resources.\n     container events {\n       list event {\n         key\
    \ name;\n         leaf name { type string; }\n         leaf description { type\
    \ string; }\n         leaf event-count {\n           type uint32;\n          \
    \ config false;\n         }\n       }\n     }\n   Example 1: content=all\n   To\
    \ retrieve all of the child resources, the \"content\" parameter is\n   set to\
    \ \"all\", or omitted, since this is the default value.  The\n   client might\
    \ send the following:\n      GET /restconf/data/example-events:events?\\\n   \
    \       content=all HTTP/1.1\n      Host: example.com\n      Accept: application/yang-data+json\n\
    \   The server might respond as follows:\n      HTTP/1.1 200 OK\n      Date: Thu,\
    \ 26 Jan 2017 20:56:30 GMT\n      Server: example-server\n      Cache-Control:\
    \ no-cache\n      Content-Type: application/yang-data+json\n      {\n        \"\
    example-events:events\" : {\n          \"event\" : [\n            {\n        \
    \      \"name\" : \"interface-up\",\n              \"description\" : \"Interface\
    \ up notification count\",\n              \"event-count\" : 42\n            },\n\
    \            {\n              \"name\" : \"interface-down\",\n              \"\
    description\" : \"Interface down notification count\",\n              \"event-count\"\
    \ : 4\n            }\n          ]\n        }\n      }\n   Example 2: content=config\n\
    \   To retrieve only the configuration child resources, the \"content\"\n   parameter\
    \ is set to \"config\".  Note that the \"ETag\" and\n   \"Last-Modified\" headers\
    \ are only returned if the \"content\" parameter\n   value is \"config\".\n  \
    \    GET /restconf/data/example-events:events?\\\n          content=config HTTP/1.1\n\
    \      Host: example.com\n      Accept: application/yang-data+json\n   The server\
    \ might respond as follows:\n      HTTP/1.1 200 OK\n      Date: Thu, 26 Jan 2017\
    \ 20:56:30 GMT\n      Server: example-server\n      Last-Modified: Thu, 26 Jan\
    \ 2017 16:45:20 GMT\n      ETag: \"eeeada438af\"\n      Cache-Control: no-cache\n\
    \      Content-Type: application/yang-data+json\n      {\n        \"example-events:events\"\
    \ : {\n          \"event\" : [\n            {\n              \"name\" : \"interface-up\"\
    ,\n              \"description\" : \"Interface up notification count\"\n     \
    \       },\n            {\n              \"name\" : \"interface-down\",\n    \
    \          \"description\" : \"Interface down notification count\"\n         \
    \   }\n          ]\n        }\n      }\n   Example 3: content=nonconfig\n   To\
    \ retrieve only the non-configuration child resources, the \"content\"\n   parameter\
    \ is set to \"nonconfig\".  Note that configuration ancestors\n   (if any) and\
    \ list key leafs (if any) are also returned.  The client\n   might send the following:\n\
    \      GET /restconf/data/example-events:events?\\\n         content=nonconfig\
    \ HTTP/1.1\n      Host: example.com\n      Accept: application/yang-data+json\n\
    \   The server might respond as follows:\n      HTTP/1.1 200 OK\n      Date: Thu,\
    \ 26 Jan 2017 20:56:30 GMT\n      Server: example-server\n      Cache-Control:\
    \ no-cache\n      Content-Type: application/yang-data+json\n      {\n        \"\
    example-events:events\" : {\n          \"event\" : [\n            {\n        \
    \      \"name\" : \"interface-up\",\n              \"event-count\" : 42\n    \
    \        },\n            {\n              \"name\" : \"interface-down\",\n   \
    \           \"event-count\" : 4\n            }\n          ]\n        }\n     \
    \ }\n"
- title: B.3.2.  "depth" Parameter
  contents:
  - "B.3.2.  \"depth\" Parameter\n   The \"depth\" parameter is used to limit the\
    \ number of levels of child\n   resources that are returned by the server for\
    \ a GET method request.\n   The \"depth\" parameter starts counting levels at\
    \ the level of the\n   target resource that is specified, so that a depth level\
    \ of \"1\"\n   includes just the target resource level itself.  A depth level\
    \ of \"2\"\n   includes the target resource level and its child nodes.\n   This\
    \ example shows how different values of the \"depth\" parameter\n   would affect\
    \ the reply content for the retrieval of the top-level\n   \"jukebox\" data resource.\n\
    \   Example 1: depth=unbounded\n   To retrieve all of the child resources, the\
    \ \"depth\" parameter is not\n   present or is set to the default value \"unbounded\"\
    .\n      GET /restconf/data/example-jukebox:jukebox?\\\n          depth=unbounded\
    \ HTTP/1.1\n      Host: example.com\n      Accept: application/yang-data+json\n\
    \   The server might respond as follows:\n      HTTP/1.1 200 OK\n      Date: Thu,\
    \ 26 Jan 2017 20:56:30 GMT\n      Server: example-server\n      Cache-Control:\
    \ no-cache\n      Content-Type: application/yang-data+json\n      {\n        \"\
    example-jukebox:jukebox\" : {\n          \"library\" : {\n            \"artist\"\
    \ : [\n              {\n                \"name\" : \"Foo Fighters\",\n       \
    \         \"album\" : [\n                  {\n                    \"name\" : \"\
    Wasting Light\",\n                    \"genre\" : \"example-jukebox:alternative\"\
    ,\n                    \"year\" : 2011,\n                    \"song\" : [\n  \
    \                    {\n                        \"name\" : \"Wasting Light\",\n\
    \                        \"location\" :\n                          \"/media/foo/a7/wasting-light.mp3\"\
    ,\n                        \"format\" : \"MP3\",\n                        \"length\"\
    \ : 286\n                      },\n                      {\n                 \
    \       \"name\" : \"Rope\",\n                        \"location\" : \"/media/foo/a7/rope.mp3\"\
    ,\n                        \"format\" : \"MP3\",\n                        \"length\"\
    \ : 259\n                      }\n                    ]\n                  }\n\
    \                ]\n              }\n            ]\n          },\n          \"\
    playlist\" : [\n            {\n              \"name\" : \"Foo-One\",\n       \
    \       \"description\" : \"example playlist 1\",\n              \"song\" : [\n\
    \                {\n                  \"index\" : 1,\n                  \"id\"\
    \ : \"/example-jukebox:jukebox/library\\\n                     /artist[name='Foo\
    \ Fighters']\\\n                     /album[name='Wasting Light']\\\n        \
    \             /song[name='Rope']\"\n                },\n                {\n  \
    \                \"index\" : 2,\n                  \"id\" : \"/example-jukebox:jukebox/library\\\
    \n                     /artist[name='Foo Fighters']\\\n                     /album[name='Wasting\
    \ Light']\\\n                     /song[name='Bridge Burning']\"\n           \
    \     }\n              ]\n            }\n          ],\n          \"player\" :\
    \ {\n            \"gap\" : 0.5\n          }\n        }\n      }\n   Example 2:\
    \ depth=1\n   To determine if one or more resource instances exist for a given\n\
    \   target resource, the value \"1\" is used.\n      GET /restconf/data/example-jukebox:jukebox?depth=1\
    \ HTTP/1.1\n      Host: example.com\n      Accept: application/yang-data+json\n\
    \   The server might respond as follows:\n      HTTP/1.1 200 OK\n      Date: Thu,\
    \ 26 Jan 2017 20:56:30 GMT\n      Server: example-server\n      Cache-Control:\
    \ no-cache\n      Content-Type: application/yang-data+json\n      {\n        \"\
    example-jukebox:jukebox\" : {}\n      }\n   Example 3: depth=3\n   To limit the\
    \ depth level to the target resource plus two child\n   resource layers, the value\
    \ \"3\" is used.\n      GET /restconf/data/example-jukebox:jukebox?depth=3 HTTP/1.1\n\
    \      Host: example.com\n      Accept: application/yang-data+json\n   The server\
    \ might respond as follows:\n      HTTP/1.1 200 OK\n      Date: Thu, 26 Jan 2017\
    \ 20:56:30 GMT\n      Server: example-server\n      Cache-Control: no-cache\n\
    \      Content-Type: application/yang-data+json\n      {\n        \"example-jukebox:jukebox\"\
    \ : {\n          \"library\" : {\n            \"artist\" : {}\n          },\n\
    \          \"playlist\" : [\n            {\n              \"name\" : \"Foo-One\"\
    ,\n              \"description\" : \"example playlist 1\",\n              \"song\"\
    \ : {}\n            }\n          ],\n          \"player\" : {\n            \"\
    gap\" : 0.5\n          }\n        }\n      }\n"
- title: B.3.3.  "fields" Parameter
  contents:
  - "B.3.3.  \"fields\" Parameter\n   In this example, the client is retrieving the\
    \ datastore resource in\n   JSON format, but retrieving only the \"modules-state/module\"\
    \ list, and\n   only the \"name\" and \"revision\" nodes from each list entry.\
    \  Note that\n   the top node returned by the server matches the target resource\
    \ node\n   (which is \"data\" in this example).  The \"module-set-id\" leaf is\
    \ not\n   returned because it is not selected in the fields expression.\n    \
    \  GET /restconf/data?fields=ietf-yang-library:modules-state/\\\n          module(name;revision)\
    \ HTTP/1.1\n      Host: example.com\n      Accept: application/yang-data+json\n\
    \   The server might respond as follows:\n      HTTP/1.1 200 OK\n      Date: Thu,\
    \ 26 Jan 2017 20:56:30 GMT\n      Server: example-server\n      Content-Type:\
    \ application/yang-data+json\n      {\n        \"ietf-restconf:data\" : {\n  \
    \        \"ietf-yang-library:modules-state\" : {\n            \"module\" : [\n\
    \              {\n                \"name\" : \"example-jukebox\",\n          \
    \      \"revision\" : \"2016-08-15\"\n              },\n              {\n    \
    \            \"name\" : \"ietf-inet-types\",\n                \"revision\" : \"\
    2013-07-15\"\n              },\n              {\n                \"name\" : \"\
    ietf-restconf-monitoring\",\n                \"revision\" : \"2017-01-26\"\n \
    \             },\n              {\n                \"name\" : \"ietf-yang-library\"\
    ,\n                \"revision\" : \"2016-06-21\"\n              },\n         \
    \     {\n                \"name\" : \"ietf-yang-types\",\n                \"revision\"\
    \ : \"2013-07-15\"\n              }\n            ]\n          }\n        }\n \
    \     }\n"
- title: B.3.4.  "insert" Parameter
  contents:
  - "B.3.4.  \"insert\" Parameter\n   In this example, a new first song entry in the\
    \ \"Foo-One\" playlist is\n   being created.\n   Request from client:\n      POST\
    \ /restconf/data/example-jukebox:jukebox/\\\n          playlist=Foo-One?insert=first\
    \ HTTP/1.1\n      Host: example.com\n      Content-Type: application/yang-data+json\n\
    \      {\n        \"example-jukebox:song\" : [\n           {\n             \"\
    index\" : 1,\n             \"id\" : \"/example-jukebox:jukebox/library\\\n   \
    \             /artist[name='Foo Fighters']\\\n                /album[name='Wasting\
    \ Light']\\\n                /song[name='Rope']\"\n           }\n         ]\n\
    \      }\n   Response from server:\n      HTTP/1.1 201 Created\n      Date: Thu,\
    \ 26 Jan 2017 20:56:30 GMT\n      Server: example-server\n      Last-Modified:\
    \ Thu, 26 Jan 2017 20:56:30 GMT\n      Location: https://example.com/restconf/data/\\\
    \n          example-jukebox:jukebox/playlist=Foo-One/song=1\n      ETag: \"eeeada438af\"\
    \n"
- title: B.3.5.  "point" Parameter
  contents:
  - "B.3.5.  \"point\" Parameter\n   In this example, the client is inserting a new\
    \ song entry in the\n   \"Foo-One\" playlist after the first song.\n   Request\
    \ from client:\n      POST /restconf/data/example-jukebox:jukebox/\\\n       \
    \   playlist=Foo-One?insert=after&point=\\\n          %2Fexample-jukebox%3Ajukebox\\\
    \n          %2Fplaylist%3DFoo-One%2Fsong%3D1 HTTP/1.1\n      Host: example.com\n\
    \      Content-Type: application/yang-data+json\n      {\n        \"example-jukebox:song\"\
    \ : [\n           {\n             \"index\" : 2,\n             \"id\" : \"/example-jukebox:jukebox/library\\\
    \n                /artist[name='Foo Fighters']\\\n                /album[name='Wasting\
    \ Light']\\\n                /song[name='Bridge Burning']\"\n           }\n  \
    \       ]\n      }\n   Response from server:\n      HTTP/1.1 201 Created\n   \
    \   Date: Thu, 26 Jan 2017 20:56:30 GMT\n      Server: example-server\n      Last-Modified:\
    \ Thu, 26 Jan 2017 20:56:30 GMT\n      Location: https://example.com/restconf/data/\\\
    \n          example-jukebox:jukebox/playlist=Foo-One/song=2\n      ETag: \"abcada438af\"\
    \n"
- title: B.3.6.  "filter" Parameter
  contents:
  - "B.3.6.  \"filter\" Parameter\n   The following URIs show some examples of notification\
    \ filter\n   specifications:\n      // filter = /event/event-class='fault'\n \
    \     GET /streams/NETCONF?filter=%2Fevent%2Fevent-class%3D'fault'\n      // filter\
    \ = /event/severity<=4\n      GET /streams/NETCONF?filter=%2Fevent%2Fseverity%3C%3D4\n\
    \      // filter = /linkUp|/linkDown\n      GET /streams/SNMP?filter=%2FlinkUp%7C%2FlinkDown\n\
    \      // filter = /*/reporting-entity/card!='Ethernet0'\n      GET /streams/NETCONF?\\\
    \n         filter=%2F*%2Freporting-entity%2Fcard%21%3D'Ethernet0'\n      // filter\
    \ = /*/email-addr[contains(.,'company.com')]\n      GET /streams/critical-syslog?\\\
    \n         filter=%2F*%2Femail-addr[contains(.%2C'company.com')]\n      // Note:\
    \ The module name is used as the prefix.\n      // filter = (/example-mod:event1/name='joe'\
    \ and\n      //           /example-mod:event1/status='online')\n      GET /streams/NETCONF?\\\
    \n        filter=(%2Fexample-mod%3Aevent1%2Fname%3D'joe'%20and\\\n           \
    \     %20%2Fexample-mod%3Aevent1%2Fstatus%3D'online')\n      // To get notifications\
    \ from just two modules (e.g., m1 + m2)\n      // filter=(/m1:* or /m2:*)\n  \
    \    GET /streams/NETCONF?filter=(%2Fm1%3A*%20or%20%2Fm2%3A*)\n"
- title: B.3.7.  "start-time" Parameter
  contents:
  - "B.3.7.  \"start-time\" Parameter\n   The following URI shows an example of the\
    \ \"start-time\" query\n   parameter:\n      // start-time = 2014-10-25T10:02:00Z\n\
    \      GET /streams/NETCONF?start-time=2014-10-25T10%3A02%3A00Z\n"
- title: B.3.8.  "stop-time" Parameter
  contents:
  - "B.3.8.  \"stop-time\" Parameter\n   The following URI shows an example of the\
    \ \"stop-time\" query\n   parameter:\n      // start-time = 2014-10-25T10:02:00Z\n\
    \      // stop-time = 2014-10-25T12:31:00Z\n      GET /mystreams/NETCONF?start-time=2014-10-25T10%3A02%3A00Z\\\
    \n         &stop-time=2014-10-25T12%3A31%3A00Z\n"
- title: B.3.9.  "with-defaults" Parameter
  contents:
  - "B.3.9.  \"with-defaults\" Parameter\n   Assume that the server implements the\
    \ module \"example\" defined in\n   Appendix A.1 of [RFC6243], and assume that\
    \ the server's datastore is\n   as defined in Appendix A.2 of [RFC6243].\n   If\
    \ the server's \"basic-mode\" parameter in the \"defaults\" protocol\n   capability\
    \ URI (Section 9.1.2) is \"trim\", the following request for\n   interface \"\
    eth1\" might be as follows:\n   Without query parameter:\n      GET /restconf/data/example:interfaces/interface=eth1\
    \ HTTP/1.1\n      Host: example.com\n      Accept: application/yang-data+json\n\
    \   The server might respond as follows:\n      HTTP/1.1 200 OK\n      Date: Thu,\
    \ 26 Jan 2017 20:56:30 GMT\n      Server: example-server\n      Content-Type:\
    \ application/yang-data+json\n      {\n        \"example:interface\" : [\n   \
    \       {\n            \"name\" : \"eth1\",\n            \"status\" : \"up\"\n\
    \          }\n        ]\n      }\n   Note that the \"mtu\" leaf is missing because\
    \ it is set to the default\n   \"1500\", and the server's default-handling \"\
    basic-mode\" parameter is\n   \"trim\".\n   With query parameter:\n      GET /restconf/data/example:interfaces/interface=eth1\\\
    \n          ?with-defaults=report-all HTTP/1.1\n      Host: example.com\n    \
    \  Accept: application/yang-data+json\n   The server might respond as follows:\n\
    \      HTTP/1.1 200 OK\n      Date: Thu, 26 Jan 2017 20:56:30 GMT\n      Server:\
    \ example-server\n      Content-Type: application/yang-data+json\n      {\n  \
    \      \"example:interface\" : [\n          {\n            \"name\" : \"eth1\"\
    ,\n            \"mtu\" : 1500,\n            \"status\" : \"up\"\n          }\n\
    \        ]\n      }\n   Note that the server returns the \"mtu\" leaf because\
    \ the \"report-all\"\n   mode was requested with the \"with-defaults\" query parameter.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   The authors would like to thank the following people for\
    \ their\n   contributions to this document: Ladislav Lhotka, Juergen\n   Schoenwaelder,\
    \ Rex Fernando, Robert Wilton, and Jonathan Hansford.\n   The authors would like\
    \ to thank the following people for their\n   excellent technical reviews of this\
    \ document: Mehmet Ersue, Mahesh\n   Jethanandani, Qin Wu, Joe Clarke, Bert Wijnen,\
    \ Ladislav Lhotka,\n   Rodney Cummings, Frank Xialiang, Tom Petch, Robert Sparks,\
    \ Balint\n   Uveges, Randy Presuhn, Sue Hares, Mark Nottingham, Benoit Claise,\n\
    \   Dale Worley, and Lionel Morand.\n   Contributions to this material by Andy\
    \ Bierman are based upon work\n   supported by the United States Army, Space &\
    \ Terrestrial\n   Communications Directorate (S&TCD) under Contract\n   No. W15P7T-13-C-A616.\
    \  Any opinions, findings, and conclusions or\n   recommendations expressed in\
    \ this material are those of the author(s)\n   and do not necessarily reflect\
    \ the views of the S&TCD.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Andy Bierman\n   YumaWorks\n   Email: andy@yumaworks.com\n\
    \   Martin Bjorklund\n   Tail-f Systems\n   Email: mbj@tail-f.com\n   Kent Watsen\n\
    \   Juniper Networks\n   Email: kwatsen@juniper.net\n"
