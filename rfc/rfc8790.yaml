- contents:
  - '         FETCH and PATCH with Sensor Measurement Lists (SenML)

    '
  title: __initial_text__
- contents:
  - "Abstract\n   The Sensor Measurement Lists (SenML) media type and data model can
    be\n   used to send collections of resources, such as batches of sensor data\n
    \  or configuration parameters.  The Constrained Application Protocol\n   (CoAP)
    FETCH, PATCH, and iPATCH methods enable accessing and updating\n   parts of a
    resource or multiple resources with one request.  This\n   document defines new
    media types for the CoAP FETCH, PATCH, and\n   iPATCH methods for resources represented
    using the SenML data model.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    7841.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8790.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2020 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (https://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction\n   2.  Terminology\n   3.  Using FETCH
    and (i)PATCH with SenML\n     3.1.  SenML FETCH\n     3.2.  SenML (i)PATCH\n   4.
    \ Fragment Identification\n   5.  Extensibility\n   6.  Security Considerations\n
    \  7.  IANA Considerations\n     7.1.  CoAP Content-Format Registration\n     7.2.
    \ senml-etch+json Media Type\n     7.3.  senml-etch+cbor Media Type\n   8.  References\n
    \    8.1.  Normative References\n     8.2.  Informative References\n   Acknowledgements\n
    \  Authors' Addresses\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   The Sensor Measurement Lists (SenML) media type [RFC8428]
    and data\n   model can be used to transmit collections of resources, such as\n
    \  batches of sensor data or configuration parameters.\n   An example of a SenML
    collection is shown below:\n   [\n    {\"bn\":\"2001:db8::2/3311/0/\", \"n\":\"5850\",
    \"vb\":true},\n    {\"n\":\"5851\", \"v\":42},\n    {\"n\":\"5750\", \"vs\":\"Ceiling
    light\"}\n   ]\n   Here, three resources, \"3311/0/5850\", \"3311/0/5851\", and\n
    \  \"3311/0/5750\", of a dimmable light smart object [IPSO] are\n   represented
    using a single SenML Pack with three SenML Records.  All\n   resources share the
    same base name \"2001:db8::2/3311/0/\"; hence, full\n   names for the resources
    are \"2001:db8::2/3311/0/5850\", etc.\n   The CoAP [RFC7252] FETCH, PATCH, and
    iPATCH methods [RFC8132] enable\n   accessing and updating parts of a resource
    or multiple resources with\n   one request.\n   This document defines two new
    media types, one using the JavaScript\n   Object Notation (JSON) [RFC8259] and
    one using the Concise Binary\n   Object Representation (CBOR) [RFC7049], which
    can be used with the\n   CoAP FETCH, PATCH, and iPATCH methods for resources represented
    using\n   the SenML data model (i.e., for both SenML and Sensor Streaming\n   Measurement
    Lists (SenSML) data).  The rest of the document uses the\n   term \"(i)PATCH\"
    when referring to both methods as the semantics of\n   the new media types are
    the same for the CoAP PATCH and iPATCH\n   methods.\n"
  title: 1.  Introduction
- contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
    \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\",
    \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted as described
    in\n   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all\n   capitals,
    as shown here.\n   Readers should also be familiar with the terms and concepts
    discussed\n   in [RFC8132] and [RFC8428].  The following additional terms are
    used\n   in this document:\n   Fetch Record:  One set of parameters that is used
    to match SenML\n      Record(s).\n   Fetch Pack:  One or more Fetch Records in
    an array structure.\n   Patch Record:  One set of parameters similar to Fetch
    Record but also\n      containing instructions on how to change existing SenML
    Pack(s).\n   Patch Pack:  One or more Patch Records in an array structure.\n   Target
    Record:  A Record in a SenML Pack that matches the selection\n      criteria of
    a Fetch or Patch Record and hence is a target for a\n      Fetch or Patch operation.\n
    \  Target Pack:  A SenML Pack that is a target for a Fetch or Patch\n      operation.\n
    \  (i)PATCH:  A term that refers to both CoAP \"PATCH\" and \"iPATCH\"\n      methods
    when there is no difference in this specification as to\n      which one is used.\n"
  title: 2.  Terminology
- contents:
  - "3.  Using FETCH and (i)PATCH with SenML\n   The FETCH/(i)PATCH media types for
    SenML are modeled as extensions to\n   the SenML media type to enable reuse of
    existing SenML parsers and\n   generators, in particular on constrained devices.
    \ Unless mentioned\n   otherwise, FETCH and PATCH Packs are constructed with the
    same rules\n   and constraints as SenML Packs.\n   The key differences from the
    SenML media type are allowing the use of\n   a \"null\" value for removing Records
    with the (i)PATCH method and the\n   lack of value fields in Fetch Records.  Also,
    the Fetch and Patch\n   Records do not have a default time or base version when
    the fields\n   are omitted.\n"
  - contents:
    - "3.1.  SenML FETCH\n   The FETCH method can be used to select and return a subset
      of\n   Records, in sequence, of one or more SenML Packs.  The SenML Records\n
      \  are selected by giving a set of names that, when resolved, match\n   resolved
      names in a Target SenML Pack.  The names for a Fetch Pack\n   are given using
      the SenML \"name\" and/or \"base name\" fields.  The\n   names are resolved
      by concatenating the base name with the name field\n   as defined in [RFC8428].\n
      \  A Fetch Pack MUST contain at least one Fetch Record.  A Fetch Record\n   MUST
      contain a name and/or base name field.\n   For example, to select the resources
      \"5850\" and \"5851\" from the\n   example in Section 1, the following Fetch
      Pack can be used:\n   [\n    {\"bn\":\"2001:db8::2/3311/0/\", \"n\":\"5850\"},\n
      \   {\"n\":\"5851\"}\n   ]\n   The result of a FETCH request with the example
      above would be:\n   [\n    {\"bn\":\"2001:db8::2/3311/0/\", \"n\":\"5850\",
      \"vb\":true},\n    {\"n\":\"5851\", \"v\":42},\n   ]\n   The SenML time and
      unit fields can be used in a Fetch Record to\n   further narrow the selection
      of matched SenML Records.  When no time\n   or unit is given in a Fetch Record,
      all SenML Records with the given\n   name are matched (i.e., unlike with SenML
      Records, the lack of time\n   field in a Fetch Record does not imply a time
      value of zero).  When\n   time is given in the Fetch Record, a Target Record
      is matched only\n   when its resolved time value and name are equal to those
      of the Fetch\n   Record.  Similarly, when unit is given, a Target Record is
      matched\n   only when its resolved unit and name are equal to those of the Fetch\n
      \  Record.  If both the time and unit are given in the Fetch Record, a\n   Target
      Record is matched only when both are equal to those of the\n   Fetch Record.
      \ Each Target Record MUST be included in the response at\n   most once, even
      if multiple Fetch Records match with the same Target\n   Record.\n   For example,
      if the resource \"5850\" had multiple sensor readings\n   (SenML Records) with
      different time values, the following Fetch Pack\n   can be used to retrieve
      the Record with time \"1.276020091e+09\":\n   [\n    {\"bn\":\"2001:db8::2/3311/0/\",
      \"n\":\"5850\", \"t\":1.276020091e+09}\n   ]\n   The resolved form of Records
      (Section 4.6 of [RFC8428]) is used when\n   comparing the names, times, and
      units of the Target and Fetch Records\n   to accommodate differences in the
      use of the base values.  In the\n   resolved form, the SenML name in the example
      above becomes\n   \"2001:db8::2/3311/0/5850\".  Since there is no base time
      in the Pack,\n   the time in resolved form is equal to the time in the example.\n
      \  If no SenML Records match, an empty SenML Pack (i.e., array with no\n   elements)
      is returned as a response.\n   Fetch Records MUST NOT contain other fields than
      name, base name,\n   time, base time, unit, and base unit.  Implementations
      MUST reject\n   and generate an error for a Fetch Pack with other fields.  [RFC8132],\n
      \  Section 2.2 provides guidance for FETCH request error handling, e.g.,\n   using
      the 4.22 (Unprocessable Entity) CoAP error response code.\n"
    title: 3.1.  SenML FETCH
  - contents:
    - "3.2.  SenML (i)PATCH\n   The (i)PATCH method can be used to change the fields
      of SenML\n   Records, to add new Records, and to remove existing Records.  The\n
      \  names, times, and units of the Patch Records are given and matched in\n   the
      same way as for the Fetch Records, except each Patch Record MUST\n   match at
      most one Target Record.  A Patch Record matching more than\n   one Target Record
      is considered invalid (patching multiple Target\n   Records with one Patch Record
      would result in multiple copies of the\n   same Record).  Patch Packs can also
      include new values and other\n   SenML fields for the Records.  Application
      of Patch Packs is\n   idempotent; hence, the PATCH and iPATCH methods for SenML
      Packs are\n   equivalent.\n   When the name in a Patch Record matches with the
      name in an existing\n   Record, the resolved time values and units (if any)
      are compared.  If\n   the time values and units either do not exist in both
      Records or are\n   equal, the Target Record is replaced with the contents of
      the Patch\n   Record.  All Patch Records MUST contain at least a SenML Value
      or Sum\n   field.\n   If a Patch Record contains a name, or the combination
      of a time\n   value, unit, and name, that does not exist in any existing Record
      in\n   the Pack, the given Record, with all the fields it contains, is added\n
      \  to the Pack.\n   If a Patch Record has a value (\"v\") field with a null
      value, it MUST\n   NOT be added, but the matched Record (if any) is removed
      from the\n   Target Pack.\n   The Patch Records MUST be applied in the same
      sequence as they are in\n   the Patch Pack.  If multiple Patch Packs are being
      processed at the\n   same time, the result MUST be equivalent to applying them
      in one\n   sequence.\n   Implementations MUST reject and generate an error for
      Patch Packs\n   with invalid Records.  If a Patch Pack is rejected, the state
      of the\n   Target Pack is not changed, i.e., either all or none of the Patch\n
      \  Records are applied.  [RFC8132], Section 3.4 provides guidance for\n   error
      handling with PATCH and iPATCH requests, e.g., using the 4.22\n   (Unprocessable
      Entity) and 4.09 (Conflict) CoAP error response codes.\n   For example, the
      following document could be given as an (i)PATCH\n   payload to change/set the
      values of two SenML Records for the example\n   in Section 1:\n   [\n    {\"bn\":\"2001:db8::2/3311/0/\",
      \"n\":\"5850\", \"vb\":false},\n    {\"n\":\"5851\", \"v\":10}\n   ]\n   If
      the request is successful, the resulting representation of the\n   example SenML
      Pack would be as follows:\n   [\n    {\"bn\":\"2001:db8::2/3311/0/\", \"n\":\"5850\",
      \"vb\":false},\n    {\"n\":\"5851\", \"v\":10},\n    {\"n\":\"5750\", \"vs\":\"Ceiling
      light\"}\n   ]\n   As another example, the following document could be given
      as an\n   (i)PATCH payload to remove the two SenML Records:\n   [\n    {\"bn\":\"2001:db8::2/3311/0/\",
      \"n\":\"5850\", \"v\":null},\n    {\"n\":\"5851\", \"v\":null}\n   ]\n"
    title: 3.2.  SenML (i)PATCH
  title: 3.  Using FETCH and (i)PATCH with SenML
- contents:
  - "4.  Fragment Identification\n   Fragment identification for Records of Fetch
    and Patch Packs uses the\n   same mechanism as SenML JSON/CBOR fragment identification
    (see\n   Section 9 of [RFC8428]), i.e., the \"rec\" scheme followed by a comma-\n
    \  separated list of Record positions or range(s) of Records.  For\n   example,
    to select the 3rd and 5th Record of a Fetch or Patch Pack, a\n   fragment identifier
    \"rec=3,5\" can be used in the URI of the Fetch or\n   Patch Pack resource.\n"
  title: 4.  Fragment Identification
- contents:
  - "5.  Extensibility\n   The SenML mandatory-to-understand field extensibility mechanism
    (see\n   Section 4.4 of [RFC8428]) does not apply to Patch Packs, i.e.,\n   unknown
    fields MUST NOT generate an error, but such fields are\n   treated like any other
    field (e.g., added to Patch target Records\n   where applicable).\n   This specification
    allows only a small subset of SenML fields in\n   Fetch Records, but future specifications
    may enable new fields for\n   Fetch Records and possibly also new fields for selecting
    targets for\n   Patch Records.\n"
  title: 5.  Extensibility
- contents:
  - "6.  Security Considerations\n   The security and privacy considerations of SenML
    also apply to the\n   FETCH and (i)PATCH methods.  CoAP's security mechanisms
    are used to\n   provide security for the FETCH and (i)PATCH methods.\n   In FETCH
    and (i)PATCH requests, the client can pass arbitrary names\n   to the target resource
    for manipulation.  The resource implementer\n   must take care to only allow access
    to names that are actually part\n   of (or accessible through) the target resource.
    \ In particular, the\n   receiver needs to ensure that any input does not lead
    to uncontrolled\n   special interpretation by the system.\n   If the client is
    not allowed to do a GET or PUT on the full target\n   resource (and thus all the
    names accessible through it), access\n   control rules must be evaluated for each
    Record in the Pack.\n"
  title: 6.  Security Considerations
- contents:
  - "7.  IANA Considerations\n   This document registers two new media types and CoAP
    Content-Format\n   IDs for both media types.\n"
  - contents:
    - "7.1.  CoAP Content-Format Registration\n   IANA has assigned CoAP Content-Format
      IDs for the SenML PATCH and\n   FETCH media types in the \"CoAP Content-Formats\"
      subregistry, within\n   the \"Constrained RESTful Environments (CoRE) Parameters\"
      registry\n   [RFC7252].  The assigned IDs are shown in Table 1.\n             |
      Media Type                  | Encoding | ID  |\n             | application/senml-etch+json
      | -        | 320 |\n             | application/senml-etch+cbor | -        |
      322 |\n                     Table 1: CoAP Content-Format IDs\n"
    title: 7.1.  CoAP Content-Format Registration
  - contents:
    - "7.2.  senml-etch+json Media Type\n   Type name:  application\n   Subtype name:
      \ senml-etch+json\n   Required parameters:  N/A\n   Optional parameters:  N/A\n
      \  Encoding considerations:  binary\n   Security considerations:  See Section
      6 of RFC 8790.\n   Interoperability considerations:  N/A\n   Published specification:
      \ RFC 8790\n   Applications that use this media type:  Applications that use
      the\n      SenML media type for resource representation.\n   Fragment identifier
      considerations:  Fragment identification for\n      application/senml-etch+json
      is supported by using fragment\n      identifiers as specified by Section 4
      of RFC 8790.\n   Additional information:\n      Deprecated alias names for this
      type:  N/A\n      Magic number(s):  N/A\n      File extension(s):  senml-etchj\n
      \     Windows Clipboard Name:  \"SenML FETCH/PATCH format\"\n      Macintosh
      file type code(s):  N/A\n      Macintosh Universal Type Identifier code:\n         org.ietf.senml-etch-json
      conforms to public.text\n   Person & email address to contact for further information:\n
      \     Ari Ker\xE4nen <ari.keranen@ericsson.com>\n   Intended usage:  COMMON\n
      \  Restrictions on usage:  N/A\n   Author:  Ari Ker\xE4nen <ari.keranen@ericsson.com>\n
      \  Change controller:  IESG\n"
    title: 7.2.  senml-etch+json Media Type
  - contents:
    - "7.3.  senml-etch+cbor Media Type\n   Type name:  application\n   Subtype name:
      \ senml-etch+cbor\n   Required parameters:  N/A\n   Optional parameters:  N/A\n
      \  Encoding considerations:  binary\n   Security considerations:  See Section
      6 of RFC 8790.\n   Interoperability considerations:  N/A\n   Published specification:
      \ RFC 8790\n   Applications that use this media type:  Applications that use
      the\n      SenML media type for resource representation.\n   Fragment identifier
      considerations:  Fragment identification for\n      application/senml-etch+cbor
      is supported by using fragment\n      identifiers as specified by Section 4
      of RFC 8790.\n   Additional information:\n      Deprecated alias names for this
      type:  N/A\n      Magic number(s):  N/A\n      File extension(s):  senml-etchc\n
      \     Macintosh file type code(s):  N/A\n      Macintosh Universal Type Identifier
      code:\n         org.ietf.senml-etch-cbor conforms to public.data\n   Person
      & email address to contact for further information:\n      Ari Ker\xE4nen <ari.keranen@ericsson.com>\n
      \  Intended usage:  COMMON\n   Restrictions on usage:  N/A\n   Author:  Ari
      Ker\xE4nen <ari.keranen@ericsson.com>\n   Change controller:  IESG\n"
    title: 7.3.  senml-etch+cbor Media Type
  title: 7.  IANA Considerations
- contents:
  - '8.  References

    '
  - contents:
    - "8.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use
      in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n
      \             DOI 10.17487/RFC2119, March 1997,\n              <https://www.rfc-editor.org/info/rfc2119>.\n
      \  [RFC7049]  Bormann, C. and P. Hoffman, \"Concise Binary Object\n              Representation
      (CBOR)\", RFC 7049, DOI 10.17487/RFC7049,\n              October 2013, <https://www.rfc-editor.org/info/rfc7049>.\n
      \  [RFC7252]  Shelby, Z., Hartke, K., and C. Bormann, \"The Constrained\n              Application
      Protocol (CoAP)\", RFC 7252,\n              DOI 10.17487/RFC7252, June 2014,\n
      \             <https://www.rfc-editor.org/info/rfc7252>.\n   [RFC8132]  van
      der Stok, P., Bormann, C., and A. Sehgal, \"PATCH and\n              FETCH Methods
      for the Constrained Application Protocol\n              (CoAP)\", RFC 8132,
      DOI 10.17487/RFC8132, April 2017,\n              <https://www.rfc-editor.org/info/rfc8132>.\n
      \  [RFC8174]  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n              2119
      Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n              May 2017,
      <https://www.rfc-editor.org/info/rfc8174>.\n   [RFC8259]  Bray, T., Ed., \"The
      JavaScript Object Notation (JSON) Data\n              Interchange Format\",
      STD 90, RFC 8259,\n              DOI 10.17487/RFC8259, December 2017,\n              <https://www.rfc-editor.org/info/rfc8259>.\n
      \  [RFC8428]  Jennings, C., Shelby, Z., Arkko, J., Keranen, A., and C.\n              Bormann,
      \"Sensor Measurement Lists (SenML)\", RFC 8428,\n              DOI 10.17487/RFC8428,
      August 2018,\n              <https://www.rfc-editor.org/info/rfc8428>.\n"
    title: 8.1.  Normative References
  - contents:
    - "8.2.  Informative References\n   [IPSO]     IPSO, \"IPSO Light Control Smart
      Object\", 2019,\n              <http://www.openmobilealliance.org/tech/profiles/\n
      \             lwm2m/3311.xml>.\n"
    title: 8.2.  Informative References
  title: 8.  References
- contents:
  - "Acknowledgements\n   The use of the FETCH and (i)PATCH methods with SenML was
    first\n   introduced by the OMA SpecWorks Lightweight Machine to Machine\n   (LwM2M)
    v1.1 specification.  This document generalizes the use to any\n   SenML representation.
    \ The authors would like to thank Carsten\n   Bormann, Christian Ams\xFCss, Jaime
    Jim\xE9nez, Klaus Hartke, Michael\n   Richardson, and other participants from
    the IETF CoRE and OMA\n   SpecWorks DMSE working groups who have contributed ideas
    and reviews.\n"
  title: Acknowledgements
- contents:
  - "Authors' Addresses\n   Ari Ker\xE4nen\n   Ericsson\n   FI-02420 Jorvas\n   Finland\n
    \  Email: ari.keranen@ericsson.com\n"
  title: Authors' Addresses
