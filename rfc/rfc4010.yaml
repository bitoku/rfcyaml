- title: __initial_text__
  contents:
  - "                  Use of the SEED Encryption Algorithm\n                 in Cryptographic\
    \ Message Syntax (CMS)\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2005).\n"
- title: Abstract
  contents:
  - "Abstract\n   This document specifies the conventions for using the SEED encryption\n\
    \   algorithm for encryption with the Cryptographic Message Syntax (CMS).\n  \
    \ SEED is added to the set of optional symmetric encryption algorithms\n   in\
    \ CMS by providing two classes of unique object identifiers (OIDs).\n   One OID\
    \ class defines the content encryption algorithms and the other\n   defines the\
    \ key encryption algorithms.\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document specifies the conventions for using the SEED\
    \ encryption\n   algorithm [SEED][TTASSEED] for encryption with the Cryptographic\n\
    \   Message Syntax (CMS)[CMS].  The relevant object identifiers (OIDs)\n   and\
    \ processing steps are provided so that SEED may be used in the CMS\n   specification\
    \ (RFC 3852, RFC 3370) for content and key encryption.\n"
- title: 1.1.  SEED
  contents:
  - "1.1.  SEED\n   SEED is a symmetric encryption algorithm developed by KISA (Korea\n\
    \   Information Security Agency) and a group of experts since 1998.  The\n   input/output\
    \ block size and key length of SEED is 128-bits.  SEED has\n   the 16-round Feistel\
    \ structure.  A 128-bit input is divided into two\n   64-bit blocks and the right\
    \ 64-bit block is an input to the round\n   function, with a 64-bit subkey generated\
    \ from the key scheduling.\n   SEED is easily implemented in various software\
    \ and hardware because\n   it takes less memory to implement than other algorithms\
    \ and generates\n   keys without degrading the security of the algorithm.  In\
    \ particular,\n   it can be effectively adopted in a computing environment with\
    \ a\n   restricted resources, such as mobile devices and smart cards.\n   SEED\
    \ is robust against known attacks including DC (Differential\n   cryptanalysis),\
    \ LC (Linear cryptanalysis), and related key attacks.\n   SEED has gone through\
    \ wide public scrutinizing procedures.  It has\n   been evaluated and is considered\
    \ cryptographically secure by credible\n   organizations such as ISO/IEC JTC 1/SC\
    \ 27 and Japan CRYPTREC\n   (Cryptography Research and Evaluation Committees)\n\
    \   [ISOSEED][CRYPTREC].\n   SEED is a national industrial association standard\
    \ [TTASSEED] and is\n   widely used in South Korea for electronic commerce and\
    \ financial\n   services operated on wired and wireless communications.\n"
- title: 1.2.  Terminology
  contents:
  - "1.2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"\
    SHOULD\", \"SHOULD NOT\",\n   \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this\
    \ document (in uppercase,\n   as shown) are to be interpreted as described in\
    \ [RFC2119].\n"
- title: 2.  Object Identifiers for Content and Key Encryption
  contents:
  - "2.  Object Identifiers for Content and Key Encryption\n   This section provides\
    \ the OIDs and processing information necessary\n   for SEED to be used for content\
    \ and key encryption in CMS.  SEED is\n   added to the set of optional symmetric\
    \ encryption algorithms in CMS\n   by providing two classes of unique object identifiers\
    \ (OIDs).  One\n   OID class defines the content encryption algorithms and the\
    \ other\n   defines the key encryption algorithms.  Thus, a CMS agent can apply\n\
    \   SEED either for content or key encryption by selecting the\n   corresponding\
    \ object identifier, supplying the required parameter,\n   and starting the program\
    \ code.\n"
- title: 2.1.  OIDs for Content Encryption
  contents:
  - "2.1.  OIDs for Content Encryption\n   SEED is added to the set of symmetric content\
    \ encryption algorithms\n   defined in [CMSALG].  The SEED content-encryption\
    \ algorithm in Cipher\n   Block Chaining (CBC) mode has the following object identifier:\n\
    \      id-seedCBC OBJECT IDENTIFIER ::=\n        { iso(1) member-body(2) korea(410)\
    \ kisa(200004)\n          algorithm(1) seedCBC(4) }\n   The AlgorithmIdentifier\
    \ parameters field MUST be present, and the\n   parameters field MUST contain\
    \ the value of Initialization Vector\n   (IV):\n      SeedCBCParameter ::= SeedIV\
    \  --  Initialization Vector\n      SeedIV ::= OCTET STRING (SIZE(16))\n   The\
    \ plain text is padded according to Section 6.3 of [CMS].\n"
- title: 2.2.  OIDs for Key Encryption
  contents:
  - "2.2.  OIDs for Key Encryption\n   The key-wrap/unwrap procedures used to encrypt/decrypt\
    \ a SEED\n   content-encryption key (CEK) with a SEED key-encryption key (KEK)\
    \ are\n   specified in Section 3.  Generation and distribution of key-\n   encryption\
    \ keys are beyond the scope of this document.\n   The SEED key-encryption algorithm\
    \ has the following object\n   identifier:\n      id-npki-app-cmsSeed-wrap OBJECT\
    \ IDENTIFIER ::=\n        { iso(1) member-body(2) korea(410) kisa(200004) npki-app(7)\n\
    \          smime(1) alg(1) cmsSEED-wrap(1) }\n   The parameter associated with\
    \ this object identifier MUST be absent,\n   because the key wrapping procedure\
    \ itself defines how and when to use\n   an IV.\n"
- title: 3.  Key Wrap Algorithm
  contents:
  - "3.  Key Wrap Algorithm\n   SEED key wrapping and unwrapping is done in conformance\
    \ with the AES\n   key wrap algorithm [RFC3394].\n"
- title: 3.1.  Notation and Definitions
  contents:
  - "3.1.  Notation and Definitions\n   The following notation is used in the description\
    \ of the key wrapping\n   algorithms:\n         SEED(K, W)    Encrypt W using\
    \ the SEED codebook with key K\n         SEED-1(K, W)  Decrypt W using the SEED\
    \ codebook with key K\n         MSB(j, W)     Return the most significant j bits\
    \ of W\n         LSB(j, W)     Return the least significant j bits of W\n    \
    \     B1 ^ B2       The bitwise exclusive or (XOR) of B1 and B2\n         B1 |\
    \ B2       Concatenate B1 and B2\n         K             The key-encryption key\
    \ K\n         n             The number of 64-bit key data blocks\n         s \
    \            The number of steps in the wrapping process,\n                  \
    \     s = 6n\n         P[i]          The ith plaintext key data block\n      \
    \   C[i]          The ith ciphertext data block\n         A             The 64-bit\
    \ integrity check register\n         R[i]          An array of 64-bit registers\
    \ where\n                       i = 0, 1, 2, ..., n\n         A[t], R[i][t] The\
    \ contents of registers A and R[i] after\n                       encryption step\
    \ t.\n         IV            The 64-bit initial value used during the\n      \
    \                 wrapping process.\n   In the key wrap algorithm, the concatenation\
    \ function will be used to\n   concatenate 64-bit quantities to form the 128-bit\
    \ input to the SEED\n   codebook.  The extraction functions will be used to split\
    \ the 128-bit\n   output from the SEED codebook into two 64-bit quantities.\n"
- title: 3.2.  SEED Key Wrap
  contents:
  - "3.2.  SEED Key Wrap\n   Key wrapping with SEED is identical to Section 2.2.1\
    \ of [RFC3394]\n   with \"AES\" replaced by \"SEED\".\n   The inputs to the key\
    \ wrapping process are the KEK and the plaintext\n   to be wrapped.  The plaintext\
    \ consists of n 64-bit blocks containing\n   the key data being wrapped.  The\
    \ key wrapping process is described\n   below.\n     Inputs:  Plaintext, n 64-bit\
    \ values {P[1], P[2], ..., P[n]}, and\n              Key, K (the KEK).\n     Outputs:\
    \ Ciphertext, (n+1) 64-bit values {C[0], C[1], ..., C[n]}.\n   1) Initialize variables.\n\
    \     Set A[0] to an initial value (see Section 3.4)\n     For i = 1 to n\n  \
    \     R[0][i] = P[i]\n   2) Calculate intermediate values.\n     For t = 1 to\
    \ s, where s = 6n\n       A[t] = MSB(64, SEED(K, A[t-1] | R[t-1][1])) ^ t\n  \
    \     For i = 1 to n-1\n         R[t][i] = R[t-1][i+1]\n       R[t][n] = LSB(64,\
    \ SEED(K, A[t-1] | R[t-1][1]))\n   3) Output the results.\n     Set C[0] = A[s]\n\
    \     For i = 1 to n\n       C[i] = R[s][i]\n   An alternative description of\
    \ the key wrap algorithm involves\n   indexing rather than shifting.  This approach\
    \ allows one to calculate\n   the wrapped key in place, avoiding the rotation\
    \ in the previous\n   description.  This produces identical results and is more\
    \ easily\n   implemented in software.\n     Inputs:  Plaintext, n 64-bit values\
    \ {P[1], P[2], ..., P[n]}, and\n              Key, K (the KEK).\n     Outputs:\
    \ Ciphertext, (n+1) 64-bit values {C[0], C[1], ..., C[n]}.\n   1) Initialize variables.\n\
    \     Set A = IV, an initial value (see Section 3.4)\n     For i = 1 to n\n  \
    \     R[i] = P[i]\n   2) Calculate intermediate values.\n     For j = 0 to 5\n\
    \       For i=1 to n\n         B = SEED(K, A | R[i])\n         A = MSB(64, B)\
    \ ^ t where t = (n*j)+i\n         R[i] = LSB(64, B)\n   3) Output the results.\n\
    \      Set C[0] = A\n      For i = 1 to n\n        C[i] = R[i]\n"
- title: 3.3.  SEED Key Unwrap
  contents:
  - "3.3.  SEED Key Unwrap\n   Key unwrapping with SEED is identical to Section 2.2.2\
    \ of [RFC3394],\n   with \"AES\" replaced by \"SEED\".\n   The inputs to the unwrap\
    \ process are the KEK and (n+1) 64-bit blocks\n   of ciphertext consisting of\
    \ previously wrapped key.  It returns n\n   blocks of plaintext consisting of\
    \ the n 64-bit blocks of the\n   decrypted key data.\n     Inputs:  Ciphertext,\
    \ (n+1) 64-bit values {C[0], C[1], ..., C[n]},\n              and Key, K (the\
    \ KEK).\n     Outputs: Plaintext, n 64-bit values {P[1], P[2], ..., P[n]}.\n \
    \  1) Initialize variables.\n     Set A[s] = C[0] where s = 6n\n     For i = 1\
    \ to n\n       R[s][i] = C[i]\n   2) Calculate the intermediate values.\n    \
    \ For t = s to 1\n       A[t-1] = MSB(64, SEED-1(K, ((A[t] ^ t) | R[t][n]))\n\
    \       R[t-1][1] = LSB(64, SEED-1(K, ((A[t]^t) | R[t][n]))\n       For i = 2\
    \ to n\n         R[t-1][i] = R[t][i-1]\n   3) Output the results.\n     If A[0]\
    \ is an appropriate initial value (see Section 3.4),\n     Then\n       For i\
    \ = 1 to n\n         P[i] = R[0][i]\n     Else\n       Return an error\n   The\
    \ unwrap algorithm can also be specified as an index based\n   operation, allowing\
    \ the calculations to be carried out in place.\n   Again, this produces the same\
    \ results as the register shifting\n   approach.\n     Inputs:  Ciphertext, (n+1)\
    \ 64-bit values {C[0], C[1], ..., C[n]},\n              and Key, K (the KEK).\n\
    \     Outputs: Plaintext, n 64-bit values {P[0], P[1], ..., P[n]}.\n   1) Initialize\
    \ variables.\n     Set A = C[0]\n     For i = 1 to n\n       R[i] = C[i]\n   2)\
    \ Compute intermediate values.\n     For j = 5 to 0\n       For i = n to 1\n \
    \        B = SEED-1(K, (A ^ t) | R[i]) where t = n*j+i\n         A = MSB(64, B)\n\
    \         R[i] = LSB(64, B)\n   3) Output results.\n     If A is an appropriate\
    \ initial value (see Section 3.4),\n     Then\n       For i = 1 to n\n       \
    \  P[i] = R[i]\n     Else\n       Return an error\n"
- title: 3.4.  Key Data Integrity -- the Initial Value
  contents:
  - "3.4.  Key Data Integrity -- the Initial Value\n   The initial value (IV) refers\
    \ to the value assigned to A[0] in the\n   first step of the wrapping process.\
    \  This value is used to obtain an\n   integrity check on the key data.  In the\
    \ final step of the unwrapping\n   process, the recovered value of A[0] is compared\
    \ to the expected\n   value of A[0].  If there is a match, the key is accepted\
    \ as valid,\n   and the unwrapping algorithm returns it.  If there is not a match,\n\
    \   then the key is rejected, and the unwrapping algorithm returns an\n   error.\n\
    \   The exact properties achieved by this integrity check depend on the\n   definition\
    \ of the initial value.  Different applications may call for\n   somewhat different\
    \ properties; for example, whether there is a need\n   to determine the integrity\
    \ of key data throughout its lifecycle or\n   just when it is unwrapped.  This\
    \ specification defines a default\n   initial value that supports the integrity\
    \ of the key data during the\n   period it is wrapped (in Section 3.4.1).  Provision\
    \ is also made to\n   support alternative initial values (in Section 3.4.2).\n"
- title: 3.4.1.  Default Initial Value
  contents:
  - "3.4.1.  Default Initial Value\n   The default initial value (IV) is defined to\
    \ be the hexadecimal\n   constant:\n     A[0] = IV = A6A6A6A6A6A6A6A6\n   The\
    \ use of a constant as the IV supports a strong integrity check on\n   the key\
    \ data during the period that it is wrapped.  If unwrapping\n   produces A[0]\
    \ = A6A6A6A6A6A6A6A6, then the chance that the key data\n   is corrupt is 2^-64.\
    \  If unwrapping produces A[0] = any other value,\n   then the unwrap must return\
    \ an error and not return any key data.\n"
- title: 3.4.2.  Alternative Initial Values
  contents:
  - "3.4.2.  Alternative Initial Values\n   When the key wrap is used as part of a\
    \ larger key management protocol\n   or system, the desired scope for data integrity\
    \ may be more than just\n   the key data, and the desired duration may be more\
    \ than just the\n   period that it is wrapped.  Also, if the key data is not just\
    \ a SEED\n   key, it may not always be a multiple of 64 bits.  Alternative\n \
    \  definitions of the initial value can be used to address such\n   problems.\
    \  According to RFC 3394 [RFC3394], NIST will define\n   alternative initial values\
    \ in future key management publications as\n   they are needed.  To accommodate\
    \ a set of alternatives that may\n   evolve over time, non-application-specific\
    \ key wrap implementations\n   will require some flexibility in the way the initial\
    \ value is set and\n   tested.\n"
- title: 4.  SMIMECapabilities Attribute
  contents:
  - "4.  SMIMECapabilities Attribute\n   An S/MIME client SHOULD announce the set\
    \ of cryptographic functions\n   it supports by using the S/MIME capabilities\
    \ attribute.  This\n   attribute provides a partial list of OIDs of cryptographic\
    \ functions\n   and MUST be signed by the client.  The functions' OIDs SHOULD\
    \ be\n   logically separated in functional categories and MUST be ordered with\n\
    \   respect to their preference.\n   RFC 3851 [RFC3851], Section 2.5.2 defines\
    \ the SMIMECapabilities\n   signed attribute (defined as a SEQUENCE of SMIMECapability\
    \ SEQUENCEs)\n   to be used to specify a partial list of algorithms that the software\n\
    \   announcing the SMIMECapabilities can support.\n   If an S/MIME client is required\
    \ to support symmetric encryption with\n   SEED, the capabilities attribute MUST\
    \ contain the SEED OID specified\n   above in the category of symmetric algorithms.\
    \  The parameter\n   associated with this OID MUST be SeedSMimeCapability.\n \
    \    SeedSMimeCapabilty ::= NULL\n   The SMIMECapability SEQUENCE representing\
    \ SEED MUST be DER-encoded as\n   the following hexadecimal strings:\n     30\
    \ 0C 06 08 2A 83 1A 8C 9A 44 01 04 05 00\n   When a sending agent creates an encrypted\
    \ message, it has to decide\n   which type of encryption algorithm to use.  In\
    \ general, the decision\n   process involves information obtained from the capabilities\
    \ lists\n   included in messages received from the recipient, as well as other\n\
    \   information, such as private agreements, user preferences and legal\n   restrictions.\
    \  If local policy requires the use of SEED for symmetric\n   encryption, then\
    \ both the sending and receiving S/MIME clients must\n   support it, and SEED\
    \ must be configured as the preferred symmetric\n   algorithm.\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   This document specifies the use of SEED for encrypting\
    \ the content of\n   a CMS message and for encrypting the symmetric key used to\
    \ encrypt\n   the content of a CMS message, with the other mechanisms being the\n\
    \   same as the existing ones.  Therefore, the security considerations\n   described\
    \ in the CMS specifications [CMS][CMSALG] and the AES key\n   wrap algorithm [RFC3394]\
    \ can be applied to this document.  No\n   security problem has been found on\
    \ SEED [CRYPTREC].\n"
- title: 6.  References
  contents:
  - '6.  References

    '
- title: 6.1.  Normative References
  contents:
  - "6.1.  Normative References\n   [TTASSEED]  Telecommunications Technology Association\
    \ (TTA), South\n               Korea, \"128-bit Symmetric Block Cipher (SEED)\"\
    , TTAS.KO-\n               12.0004, September, 1998 (In Korean)\n            \
    \   http://www.tta.or.kr/English/new/main/index.htm\n   [CMS]       Housley, R.,\
    \ \"Cryptographic Message Syntax (CMS)\", RFC\n               3852, July 2004.\n\
    \   [CMSALG]    Housley, R., \"Cryptographic Message Syntax (CMS)\n          \
    \     Algorithms\", RFC 3370, August 2002.\n   [RFC3851]   Ramsdell, B., \"Secure/Multipurpose\
    \ Internet Mail\n               Extensions (S/MIME) Version 3.1 Message Specification\"\
    ,\n               RFC 3851, July 2004.\n   [RFC3394]   Schaad, J. and R. Housley,\
    \ \"Advanced Encryption Standard\n               (AES) Key Wrap Algorithm\", RFC\
    \ 3394, September 2002.\n   [RFC2119]   Bradner, S., \"Key words for use in RFCs\
    \ to Indicate\n               Requirement Levels\", BCP 14, RFC 2119, March 1997.\n"
- title: 6.2.  Informative References
  contents:
  - "6.2.  Informative References\n   [SEED]      Park, J., Lee, S., Kim, J., and\
    \ J. Lee, \"The SEED\n               Encryption Algorithm\", RFC 4009, February\
    \ 2005.\n   [ISOSEED]   ISO/IEC, ISO/IEC JTC1/SC 27 N 256r1, \"National Body\n\
    \               contributions on NP 18033 Encryption algorithms in\n         \
    \      response to document SC 27 N 2563\", October, 2000\n   [CRYPTREC]  Information-technology\
    \ Promotion Agency (IPA), Japan,\n               CRYPTREC. \"SEED Evaluation Report\"\
    , February, 2002\n               http://www.kisa.or.kr\n"
- title: Appendix A.  ASN.1 Module
  contents:
  - "Appendix A.  ASN.1 Module\n     SeedEncryptionAlgorithmInCMS\n         { iso(1)\
    \ member-body(2) us(840) rsadsi(113549) pkcs(1)\n           pkcs9(9) smime(16)\
    \ modules(0) id-mod-cms-seed(24) }\n     DEFINITIONS IMPLICIT TAGS ::=\n     BEGIN\n\
    \       id-seedCBC OBJECT IDENTIFIER ::=\n        { iso(1) member-body(2) korea(410)\
    \ kisa(200004)\n          algorithm(1) seedCBC(4) }\n       --  Initialization\
    \ Vector (IV)\n       SeedCBCParameter ::= SeedIV\n       SeedIV ::= OCTET STRING\
    \ (SIZE(16))\n       -- SEED Key Wrap Algorithm identifiers - Parameter is absent.\n\
    \       id-npki-app-cmsSeed-wrap OBJECT IDENTIFIER ::=\n         { iso(1) member-body(2)\
    \ korea(410) kisa(200004) npki-app(7)\n           smime(1) alg(1) cmsSEED-wrap(1)\
    \ }\n       -- SEED S/MIME Capability parameter\n       SeedSMimeCapability ::=\
    \ NULL\n     END\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Jongwook Park\n   Korea Information Security Agency\n\
    \   78, Garak-Dong, Songpa-Gu, Seoul, 138-803\n   REPUBLIC OF KOREA\n   Phone:\
    \ +82-2-405-5432\n   FAX  : +82-2-405-5499\n   EMail: khopri@kisa.or.kr\n   Sungjae\
    \ Lee\n   Korea Information Security Agency\n   Phone: +82-2-405-5243\n   FAX\
    \  : +82-2-405-5499\n   EMail: sjlee@kisa.or.kr\n   Jeeyeon Kim\n   Korea Information\
    \ Security Agency\n   Phone: +82-2-405-5238\n   FAX  : +82-2-405-5499\n   EMail:\
    \ jykim@kisa.or.kr\n   Jaeil Lee\n   Korea Information Security Agency\n   Phone:\
    \ +82-2-405-5300\n   FAX  : +82-2-405-5499\n   EMail: jilee@kisa.or.kr\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2005).\n   This\
    \ document is subject to the rights, licenses and restrictions\n   contained in\
    \ BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ IETF's procedures with respect to rights in IETF Documents can\n   be found\
    \ in BCP 78 and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat\
    \ and any\n   assurances of licenses to be made available, or the result of an\n\
    \   attempt made to obtain a general license or permission for the use of\n  \
    \ such proprietary rights by implementers or users of this\n   specification can\
    \ be obtained from the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n\
    \   The IETF invites any interested party to bring to its attention any\n   copyrights,\
    \ patents or patent applications, or other proprietary\n   rights that may cover\
    \ technology that may be required to implement\n   this standard.  Please address\
    \ the information to the IETF at ietf-\n   ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
