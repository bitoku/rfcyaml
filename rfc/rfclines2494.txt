Abstract This memo defines a portion of the Management Information Base (MIB) for use with network management protocols in the Internet community.
In particular, it describes objects used for managing DS0 and DS0 Bundle interfaces.
This document is a companion document with Definitions of Managed Objects for the DS1/E1/DS2/E2 (RFC 2495 [17]), DS3/E3 (RFC 2496 [18]), and the work in progress, SONET/SDH Interface Types.
This memo specifies a MIB module in a manner that is both compliant to the SNMPv2 SMI, and semantically identical to the peer SNMPv1 definitions.
The SNMP Management Framework presently consists of five major components:   An overall architecture, described in RFC 2271 [1].
Mechanisms for describing and naming objects and events for the purpose of management.
The first version of this Structure of Management Information (SMI) is called SMIv1 and described in STD 16, RFC 1155 [2], STD 16, RFC 1212 [3] and RFC 1215 [4].
The second version, called SMIv2, is described in RFC 1902 [5], RFC 1903 [6] and RFC 1904 [7].
Message protocols for transferring management information.
The first version of the SNMP message protocol is called SNMPv1 and described in STD 15, RFC 1157 [8].
A second version of the SNMP message protocol, which is not an Internet standards track protocol, is called SNMPv2c and described in RFC 1901 [9] and RFC 1906 [10].
The third version of the message protocol is called SNMPv3 and described in RFC 1906 [10], RFC 2272 [11] and RFC 2274 [12].
Protocol operations for accessing management information.
The first set of protocol operations and associated PDU formats is described in STD 15, RFC 1157 [8].
A second set of protocol operations and associated PDU formats is described in RFC 1905 [13].
A set of fundamental applications described in RFC 2273 [14] and the view based access control mechanism described in RFC 2275 [15].
Managed objects are accessed via a virtual information store, termed the Management Information Base or MIB.
Objects in the MIB are defined using the mechanisms defined in the SMI.
This memo specifies a MIB module that is compliant to the SMIv2.
A MIB conforming to the SMIv1 can be produced through the appropriate translations.
The resulting translated MIB must be semantically equivalent, except where objects or events are omitted because no translation is possible (use of Counter64).
Some machine readable information in SMIv2 will be converted into textual descriptions in SMIv1 during the translation process.
However, this loss of machine readable information is not considered to change the semantics of the MIB.
These objects are used when the particular media being used to realize an interface is a DS0 interface.
At present, this applies to these values of the ifType variable in the Internet standard MIB: ds0 (81) ds0Bundle (82) 2.1.
Please reference The BONDing Spec [20] for definitions of terms used to describe bonding modes.
Use of ifTable for DS0 Layer
The following items are defined in RFC 2233 [16].
Only the ifGeneralInformationGroup and ifCounterDiscontinuityGroup need to be supported.
The value of the Circuit Identifier.
If no Circuit Identifier has been assigned this object should have an octet string with zero length.
This section describes by example how to use ifStackTable to represent the relationship of ds0 and ds0Bundles with ds1 interfaces.
Implementors of the stack table for ds0 and ds0Bundle interfaces should look at the appropriate RFC for the service being stacked on ds0s and ds0Bundles.
Examples given below are for illustration purposes only.
A Frame Relay Service is being carried on 4 ds0s of a ds1.
The assignment of the index values could for example be:
The ifStackTable is then used to show the relationships between the various interfaces.
In the case where the frameRelayService is using a single ds0, then the ds0Bundle is not required.
The assignment of the index values could for example be:
The ifStackTable is then used to show the relationships between the various interfaces.
Usage of Channelization for DS3, DS1
An example is given here to explain the channelization objects in the DS3, DS1, and DS0 MIBs to help the implementor use the objects correctly.
Treatment of E3 and E1 would be similar, with the number of DS0s being different depending on the framing of the E1.
Timeslot 16 is not created for framing types that do not pass data over it.
Assume that a DS3 (with ifIndex 1) is channelized into DS1s (without DS2s).
The object dsx3Channelization is set to enabledDs1.
There will be 28 DS1s in the ifTable.
Assume the entries in the ifTable for the DS1s are created in channel order and the ifIndex values are 2 through 29.
In the DS1 MIB, there will be an entry in the dsx1ChanMappingTable for each ds1.
The entries will be as follows: dsx1ChanMappingTable
In addition, the DS1s are channelized into DS0s.
The object dsx1Channelization is set to enabledDs0 for each DS1.
When this object is set to this value, 24 DS0s are created by the agent.
There will be 24 DS0s in the ifTable for each DS1.
If the dsx1Channelization is set to disabled, the 24 DS0s are destroyed.
Assume the entries in the ifTable are created in channel order and the ifIndex values for the DS0s in the first DS1 are 30 through 53.
In the DS0 MIB, there will be an entry in the dsx0ChanMappingTable for each DS0.
The entries will be as follows: dsx0ChanMappingTable
Usage of ifIndex Mapping for DS0Bundle
An example is given here to explain the ifIndex mapping objects in the DS0Bundle MIB to help the implementor use the objects correctly.
Assume that a DS1 (with ifIndex 1) is channelized into DS0s.
There will be 24 DS0s in the ifTable.
Assume the entries in the ifTable for the DS0s are created in channel order and the ifIndex values are 2 through 25.
Now, assume that there are two bundles on the DS1.
The first one uses channels 1 and 2.
The second uses channels 3 and 4.
There will be two ifTable entries for these bundles, with values of 26 and 27 for ifIndex.
There will be an entry in the dsx0BundleTable for each bundle.
The entries will be as follows:
There will be an entry in the dsx0ConfigTable for each DS0.
The entries will be as follows:
This document contains 2 MIB modules, the DS0 MIB and the DS0Bundle MIB.
The DS0 MIB is used to represent individual DS0s in a DS1 or E1.
Variables in this MIB would be created for each DS0 in the ifTable.
This MIB contains the following group:
This group contains configuration information about a particular DS0.
The DS0Bundle MIB is used to represent collections of DS0s that are used together to carry data within a DS1/E1 at speeds greater than that of a single DS0.
DS0Bundles are created on top of DS0s and are represented that way in the ifStackTable.
This MIB contains the following groups:
This group contains objects used for creating new ds0Bundles.
This group contains information about bonding for a ds0Bundle, if bonding is enabled.
SMI MODULE COMPLIANCE, OBJECT GROUP  FROM SNMPv2
ds0 MODULE IDENTITY LAST UPDATED
Newbridge Networks Corporation 600 March Road Kanata, Ontario, Canada K2
Tel:  1 613 591 3600
The MIB module to describe DS0 interfaces objects.
REVISION "9805242010Z" DESCRIPTION "Initial version of the DS0 MIB."
The DS0 Config Group   Implementation of this group is mandatory for all   systems that use a DS0 Interface.
The DS0 Configuration Table dsx0ConfigTable OBJECT
SEQUENCE OF Dsx0ConfigEntry MAX ACCESS
current DESCRIPTION "The DS0 Configuration table."
An entry in the DS0 Configuration table.
There is an entry in this table for each DS0 interface.
MAX ACCESS  read only STATUS  current DESCRIPTION
"This object indicates the channel number of the ds0 on its DS1/E1."
"This object indicates if Robbed Bit Signalling is turned on or off for a given ds0.
This only applies to DS0s on a DS1 link.
For E1 links the value is always off (false)."
"This object contains the transmission vendor's circuit identifier, for the purpose of facilitating troubleshooting."
"This object contains the code transmitted in the ABCD bits when the ds0 is not connected and dsx0TransmitCodesEnable is enabled.
"This object contains the code transmitted in the ABCD bits when the ds0 is connected and dsx0TransmitCodesEnable is enabled.
MAX ACCESS  read only STATUS  current DESCRIPTION
"This object contains the code being received in the ABCD bits.
"This object determines if the idle and seized codes are transmitted.
If the value of this object is true then the codes are transmitted."
{ dsx0ConfigEntry 7 } dsx0Ds0BundleMappedIfIndex OBJECT TYPE SYNTAX
read only STATUS  current DESCRIPTION
"This object indicates the ifIndex value assigned by the agent for the ds0Bundle(82) ifEntry to which the given ds0(81)
If the given ds0(81) ifEntry does not belong to any ds0Bundle(82) ifEntry, then this object has a value of zero.
While this object provides information that can also be found in the ifStackTable, it provides this same information with a single table lookup, rather than by walking the ifStackTable to find the possibly non existent ds0Bundle(82) ifEntry that may be stacked above the given ds0(81)
"The DS0 Channel Mapping table.
This table maps a DS0 channel number on a particular DS1/E1 into an ifIndex."
An entry in the DS0 Channel Mapping table.
There is an entry in this table corresponding to each ds0 ifEntry within any interface that is channelized to the individual ds0 ifEntry level.
This table is intended to facilitate mapping from channelized interface / channel number to DS0 ifEntry.
(e.g. mapping (DS1 ifIndex, DS0 Channel Number)
While this table provides information that can also be found in the ifStackTable and dsx0ConfigTable, it provides this same information with a single table lookup, rather than by walking the ifStackTable to find the various constituent ds0 ifTable entries, and testing various dsx0ConfigTable entries to check for the entry with the applicable DS0 channel number.
InterfaceIndex MAX ACCESS  read only STATUS  current DESCRIPTION
"This object indicates the ifIndex value assigned by the agent for the individual ds0 ifEntry that corresponds to the given DS0 channel number (specified by the INDEX element dsx0Ds0ChannelNumber) of the given channelized interface (specified by INDEX element ifIndex)."
MODULE COMPLIANCE STATUS  current DESCRIPTION
"The compliance statement for DS0 interfaces."
MODULE    this module MANDATORY GROUPS { ds0ConfigGroup } OBJECT dsx0RobbedBitSignalling MIN ACCESS read only DESCRIPTION
"The ability to set RBS is not required."
dsx0CircuitIdentifier MIN ACCESS read only DESCRIPTION
"The ability to set the circuit identifier is not required."
"The ability to set the idle code is not required."
MIN ACCESS read only DESCRIPTION
"The ability to set the seized code is not required."
MIN ACCESS read only DESCRIPTION
"The ability to enable and disable the transmitting of idle and seized codes is not required."
OBJECT GROUP OBJECTS { dsx0Ds0ChannelNumber, dsx0RobbedBitSignalling, dsx0CircuitIdentifier, dsx0IdleCode, dsx0SeizedCode, dsx0ReceivedCode, dsx0TransmitCodesEnable, dsx0Ds0BundleMappedIfIndex,
dsx0ChanMappedIfIndex } STATUS  current DESCRIPTION
SMI MODULE COMPLIANCE, OBJECT GROUP   FROM SNMPv2
ds0Bundle MODULE IDENTITY LAST UPDATED
Newbridge Networks Corporation 600 March Road Kanata, Ontario, Canada K2
Tel:  1 613 591 3600
The MIB module to describe DS0 Bundle interfaces objects.
REVISION "9805242010Z" DESCRIPTION "Initial version of the DS0BUNDLE MIB."
The DS0 Bundle Table dsx0BundleNextIndex
"This object is used to assist the manager in selecting a value for dsx0BundleIndex.
Because this object is of syntax TestAndIncr (see the SNMPv2 TC document, RFC 1903) it can also be used to avoid race conditions with multiple managers trying to create rows in the table.
If the result of the SET for dsx0BundleNextIndex is not success, this means the value has been changed from index (i.e. another manager used the value), so a new value is required.
The algorithm is: done   false while done   false index
SET (dsx0BundleNextIndex.0 index) if (set failed) done   false else SET(dsx0BundleRowStatus.index
if (set failed) done   false else done   true other error handling" :
{ ds0Bundle 2 } dsx0BundleTable OBJECT
SEQUENCE OF Dsx0BundleEntry MAX ACCESS
"There is an row in this table for each ds0Bundle in the system.
This table can be used to (indirectly) create rows in the ifTable with ifType   'ds0Bundle(82)'."
"There is a row in entry in this table for each ds0Bundle interface.
A unique identifier for a ds0Bundle.
This is not the same value as ifIndex.
This table is not indexed by ifIndex because the manager has to choose the index in a createable row and the agent must be allowed to select ifIndex values."
"This variable contains the transmission vendor's circuit identifier, for the purpose of facilitating troubleshooting."
RowStatus MAX ACCESS  read create
"This object is used to create and delete rows in this table."
SEQUENCE OF Dsx0BondingEntry MAX ACCESS
current DESCRIPTION "The DS0 Bonding table."
An entry in the DS0 Bonding table.
There is a row in this table for each DS0Bundle interface.
INTEGER { none(1), other(2), mode0(3), mode1(4), mode2(5), mode3(6) } MAX ACCESS  read create
"This object indicates which BONDing mode is used, if any, for a ds0Bundle.
Mode0 provides parameter and number exchange with no synchronization.
Mode 1 provides parameter and number exchange.
Mode 1 also provides synchronization during initialization but does not include inband monitoring.
Mode 2 provides all of the above plus inband monitoring.
Mode 2 also steals 1/64th of the bandwidth of each channel (thus not supporting
/s data channels for most values of n).
Mode 3 provides all of the above, but also provides
n x 56/64 kbit/s data channels.
Most common implementations of Mode 3 add an extra channel to support the inband monitoring overhead.
ModeNone should be used when the interface is not performing bandwidth on demand."
read only STATUS  current DESCRIPTION
"This object indicates the current status of the bonding call using this ds0Bundle.
idle(1) should be used when the bonding mode is set to none(1)."
RowStatus MAX ACCESS  read create
"This object is used to create new rows in this table, modify existing rows, and to delete existing rows."
ds0BundleCompliance MODULE COMPLIANCE STATUS  current DESCRIPTION
"The compliance statement for DS0Bundle interfaces."
, destroy(6) } MIN ACCESS  read only DESCRIPTION
"The agent is not required to support a SET operation to this object, and only three of the six enumerated values for the RowStatus textual convention need be supported.
Only supporting createAndGo for a creation process prevents the manager from creating an inactive row in the ds0BundleTable.
Inactive rows in the ds0BundleTable do not make sense."
MIN ACCESS  read only DESCRIPTION
"The agent is not required to support a SET operation to this object."
OBJECT GROUP OBJECTS { dsx0BondMode, dsx0BondStatus, dsx0BondRowStatus } STATUS  current DESCRIPTION
OBJECT GROUP OBJECTS { dsx0BundleNextIndex, dsx0BundleIfIndex,
dsx0BundleCircuitIdentifier, dsx0BundleRowStatus } STATUS  current DESCRIPTION
Security Considerations SNMPv1 by itself is such an insecure environment.
Even if the network itself is secure (for example by using IPSec), even then, there is no control as to who on the secure network is allowed to access and GET (read)
the objects in this MIB.
It is recommended that the implementors consider the security features as provided by the SNMPv3 framework.
Specifically, the use of the User based Security Model RFC 2274 [12] and the View based Access Control Model RFC 2275
It is then a customer/user responsibility to ensure that the SNMP entity giving access to an instance of this MIB, is properly configured to give access to those objects only to those principals (users) that have legitimate rights to access them.
Setting the following objects to an inappropriate value can cause loss of traffic.
In the case of dsx0RobbedBitSignalling, for example, the nature of the traffic flowing on the DS0 can be affected.
Setting the following objects is mischievous, but not harmful to traffic.
