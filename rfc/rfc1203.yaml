- title: __initial_text__
  contents:
  - '              INTERACTIVE MAIL ACCESS PROTOCOL - VERSION 3

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This RFC suggests a method for workstations to access\
    \ mail\n   dynamically from a mailbox server (\"repository\").  This RFC specifies\n\
    \   a standard for the SUMEX-AIM community and an Experimental Protocol\n   for\
    \ the Internet community.  Discussion and suggestions for\n   improvement are\
    \ requested.  Please refer to the current edition of\n   the \"IAB Official Protocol\
    \ Standards\" for the standardization state\n   and status of this protocol. \
    \ Distribution of this memo is unlimited.\n"
- title: Scope
  contents:
  - "Scope\n   The following document is a modified version of RFC 1064, the\n   definition\
    \ of the IMAP2 protocol.  This RFC has been written\n   specifically as a counter\
    \ proposal to RFC 1176, which itself proposes\n   modifications to IMAP2.  Sadly,\
    \ RFC 1176 was made without internal\n   consultation with the IMAP community,\
    \ so we are in a position of\n   feeling we have to present a counter proposal\
    \ to what, if we do not\n   act, will become a de facto standard.  The reasons\
    \ for this counter\n   proposal are numerous but fall mostly into the following\
    \ categories:\n      - IMAP2 is insufficiently powerful for a number of server/client\n\
    \        interactions which we believe to be important.  RFC 1176\n        negligibly\
    \ enhances the functionality of IMAP2.\n      - IMAP2 makes what we believe to\
    \ be an erroneous definition for\n        unsolicited vs. solicited data.  IMAP3\
    \ as specified herein\n        attempts to correct this.  RFC 1176 makes no effort\
    \ to remedy\n        these problems.\n      - RFC 1176 has explicitly modified\
    \ the intent of RFC 1064 by\n        allowing the server to make assumptions about\
    \ the client's\n        caching architecture.  We believe this to be a grave error\n\
    \        and do not support it in this proposal.\n      - RFC 1176 specifies a\
    \ number of \"optional\" features in the\n        protocol without specifying\
    \ a suitable metaprotocol by which\n        servers and clients can adequately\
    \ negotiate over the set of\n        implemented features.  This proposal specifies\
    \ a mechanism\n        by which servers and clients can come to an unambiguous\n\
    \        understanding about which features are usable by each party.\n      -\
    \ RFC 1176 pays only lip-service to being network protocol\n        independent\
    \ and, in fact assumes the use of TCP/IP.  Neither\n        RFC 1064 nor this\
    \ proposal make any such assumption.\n   Although there are numerous other detailed\
    \ objections to RFC 1176, we\n   believe that the above will serve to show that\
    \ we believe strongly in\n   the importance of mailbox abstraction level mail\
    \ protocols and, after\n   a couple of years of use of IMAP2 under RFC 1064 we\
    \ believe that we\n   have a good enough understanding of the issues involved\
    \ to be able to\n   take the next step.\n   It is important to take this next\
    \ step because of the rapid pace of\n   both mail system and user interface development.\
    \  We believe that,\n   for IMAP not to die in its infancy, IMAP must be ready\
    \ to respond to\n   emerging ISO and RFC standards in mail, such as for multi-media\
    \ mail.\n   We believe that RFC 1176 not only provides a very small increment\
    \ in\n   functionality over RFC 1064 but also adds a number of bugs, which\n \
    \  would be detrimental to the IMAP cause.  Thus we propose the\n   following\
    \ definition for IMAP3.\n"
- title: 'Compatibility notes:'
  contents:
  - "Compatibility notes:\n   In revising the IMAP2 protocol it has been our intent,\
    \ wherever\n   possible to make upwards compatible changes to produce IMAP3. \
    \ There\n   were, however, some places that had to be changed incompatibly in\n\
    \   order to compensate for either ambiguities in the IMAP2 protocol as\n   defined\
    \ by RFC 1064 or behavior that proved undesirable in the light\n   of experience.\n\
    \   It is our goal, however, that existing IMAP2 clients should still be\n   supported\
    \ and that, at least for the foreseeable future, all IMAP3\n   servers will support\
    \ IMAP2 behavior as their default mode.\n   The following are the major differences\
    \ between this proposal, RFC\n   1176 and RFC 1064:\n      - In this proposal\
    \ we specify a difference between \"solicited\" and\n        \"unsolicited\" data\
    \ sent from the server.  It is generally the\n        case that data sent by the\
    \ server can be sent either in response\n        to an explicit request by the\
    \ client or by the server of its own\n        volition.  Any data that the server\
    \ is required to sent to the\n        client as the result of a request is said\
    \ to be solicited and\n        carries the same tag as the request that provoked\
    \ it.  Any data\n        sent by the server to the client that is not required\
    \ by the\n        protocol is said to be unsolicited and carries the special \"\
    *\"\n        tag.  RFC 1176 preserves the original RFC 1064 terminology that\n\
    \        calls all such data sent by the server \"unsolicited\" even when\n  \
    \      it is, in fact, solicited.\n      - This proposal introduces the experimental\
    \ concept of\n        distinguishing between Generic, Canonical and Concrete keys,\n\
    \        allowing the mailbox to be viewed as a relational database\n        indexed\
    \ by these keys.  This should allow the IMAP protocol\n        to evolve away\
    \ from its current reliance on RFC 822.  RFC 1176\n        does not have such\
    \ a unifying model.\n      - The SEARCH command has been changed so as to allow\
    \ multiple\n        simultaneous searches to be made and to allow unsolicited\n\
    \        search messages to be sent by the server.  Such a change is\n       \
    \ essential to allow more sophisticated servers that can process\n        commands\
    \ asynchronously, possibly substantially delaying\n        searches over slow\
    \ backing storage media, for example.  It is\n        also important to allow\
    \ servers to be able to send unsolicited\n        search messages that might inform\
    \ the client of interesting\n        patterns of messages, such as new and unseen\
    \ mail.\n      - This proposal introduces a specific protocol for the negotiation\n\
    \        of protocol versions and server features.  This is important\n      \
    \  because it allows client/server pairs to come to an agreement on\n        what\
    \ behavior is really available to it.  RFC 1176 introduces a\n        number of\
    \ \"optional\" commands, which are in some way analogous\n        to \"feature-introduced\"\
    \ commands in this proposal.  The principle\n        distinction between these\
    \ is that in RFC 1176 there is no way\n        for a client to discover the set\
    \ of optional commands, nor is\n        there a way for it to determine whether\
    \ a specific command\n        really is supported, since RFC 1176 requires the\
    \ use of the\n        \"BAD\" response if a feature is not supported.  There is,\n\
    \        therefore, no way for the client to determine why the attempted\n   \
    \     command did not work.  This also means that, for example, a\n        client\
    \ cannot disable certain user commands or make them\n        invisible on menus\
    \ if they are not supported, since there\n        is no way for the client to\
    \ discover whether the commands are\n        indeed supported without trying to\
    \ execute such a command.\n      - This proposal introduces a mechanism for clients\
    \ to create and\n        delete user flags (keywords).  This is nor supported\
    \ in either\n        RFC 1176 or RFC 1064, requiring the user to add keys manually\n\
    \        on the server, generally by editing some form of \"init\" file.\n   \
    \   - RFC 1064 has no mechanism for determining whether a mailbox is\n       \
    \ readonly or not.  RFC 1176 introduces a non-enforced convention\n        of\
    \ encoding data about the readonly status of a mailbox in the\n        SELECT\
    \ message's OK respose comment field.  This is not regular\n        with respect\
    \ to the rest of the protocol, in which the comment\n        field is used for\
    \ no purpose other than documentation.  This\n        proposal introduces specific\
    \ protocol additions for the dynamic\n        determination and modification of\
    \ the readonly/readwrite status\n        of mailboxes.\n"
- title: Introduction
  contents:
  - "Introduction\n   The intent of the Interactive Mail Access Protocol, Version\
    \ 3 (IMAP3)\n   is to allow a (possibly unreliable) workstation or similar machine\
    \ to\n   access electronic mail from a reliable mailbox server in an efficient\n\
    \   manner.\n   Although different in many ways from POP2 (RFC 937), IMAP3 may\
    \ be\n   thought of as a functional superset of POP2, and the POP2 RFC was\n \
    \  used as a model for this RFC.  There was a cognizant reason for this;\n   RFC\
    \ 937 deals with an identical problem and it was desirable to offer\n   a basis\
    \ for comparison.\n   Like POP2, IMAP3 specifies a means of accessing stored mail\
    \ and not\n   of posting mail; this function is handled by a mail transfer protocol\n\
    \   such as SMTP (RFC 821).  A comparison with the DMSP protocol of\n   PCMAIL\
    \ can be found at the end of \"System Model and Philosophy\"\n   section.\n  \
    \ This protocol assumes a reliable data stream such as provided by TCP\n   or\
    \ any similar protocol.  When TCP is used, the IMAP server listens\n   on port\
    \ 220.  When CHAOS is used the IMAP server listens for the\n   logical contact\
    \ name \"IMAP3\".\n   Communication in IMAP is defined to be using the ASCII character\n\
    \   interpretation of data.  Communication using other conventions may be\n  \
    \ possible by the selection of features on some servers.\n"
- title: System Model and Philosophy
  contents:
  - "System Model and Philosophy\n   Electronic mail is a primary means of communication\
    \ for the widely\n   spread SUMEX-AIM community.  The advent of distributed workstations\n\
    \   is forcing a significant rethinking of the mechanisms employed to\n   manage\
    \ such mail.  With mainframes, each user tends to receive and\n   process mail\
    \ at the computer he used most of the time, his \"primary\n   host\".  The first\
    \ inclination of many users when an independent\n   workstation is placed in front\
    \ of them is to begin receiving mail at\n   the workstation, and, in fact, many\
    \ vendors have implemented\n   facilities to do this.  However, this approach\
    \ has several\n   disadvantages:\n      (1)  Workstations (especially Lisp workstations)\
    \ have a software\n           design that gives full control of all aspects of\
    \ the system\n           to the user at the console.  As a result, background\
    \ tasks,\n           like receiving mail, could well be kept from running for\n\
    \           long periods of time either because the user is asking to\n      \
    \     use all of the machine's resources, or because, in the course\n        \
    \   of working, the user has (perhaps accidentally) manipulated\n           the\
    \ environment in such a way as to prevent mail reception.\n           This could\
    \ lead to repeated failed delivery attempts by\n           outside agents.\n \
    \     (2)  The hardware failure of a single workstation could keep its\n     \
    \      user \"off the air\" for a considerable time, since repair of\n       \
    \    individual workstation units might be delayed.  Given the\n           growing\
    \ number of workstations spread throughout office\n           environments, quick\
    \ repair would not be assured, whereas a\n           centralized mainframe is\
    \ generally repaired very soon after\n           failure.\n      (3)  It is more\
    \ difficult to keep track of mailing addresses when\n           each person is\
    \ associated with a distinct machine.  Consider\n           the difficulty in\
    \ keeping track of a large number of postal\n           addresses or phone numbers,\
    \ particularly if there was no\n           single address or phone number for\
    \ an organization through\n           which you could reach any person in that\
    \ organization.\n           Traditionally, electronic mail on the ARPANET involved\n\
    \           remembering a name and one of several \"hosts\" (machines)\n     \
    \      whose name reflected the organization in which the\n           individual\
    \ worked.  This was suitable at a time when most\n           organizations had\
    \ only one central host.  It is less\n           satisfactory today unless the\
    \ concept of a host is changed\n           to refer to an organizational entity\
    \ and not a particular\n           machine.\n      (4)  It is very difficult to\
    \ keep a multitude of heterogeneous\n           workstations working properly\
    \ with complex mailing protocols,\n           making it difficult to move forward\
    \ as progress is made in\n           electronic communication and as new standards\
    \ emerge.  Each\n           system has to worry about receiving incoming mail,\
    \ routing\n           and delivering outgoing mail, formatting, storing, and\n\
    \           providing for the stability of mailboxes over a variety of\n     \
    \      possible filing and mailing protocols.\n   Consequently, while the workstation\
    \ may be viewed as an Internet host\n   in the sense that it implements IP, it\
    \ should not be viewed as the\n   entity which contains the user's mailbox.  Rather,\
    \ a mail server\n   machine (sometimes called a \"repository\") should hold the\
    \ mailbox,\n   and the workstation (hereafter referred to as a \"client\") should\n\
    \   access the mailbox via mail transactions.  Because the mail server\n   machine\
    \ would be isolated from direct user manipulation, it could\n   achieve high software\
    \ reliability easily, and, as a shared resource,\n   it could achieve high hardware\
    \ reliability, perhaps through\n   redundancy.  The mail server could be used\
    \ from arbitrary locations,\n   allowing users to read mail across campus, town,\
    \ or country using\n   more and more commonly available clients.  Furthermore,\
    \ the same user\n   may access his mailbox from different clients at different\
    \ times, and\n   multiple users may access the same mailbox simultaneously.\n\
    \   The mail server acts an an interface among users, data storage, and\n   other\
    \ mailers.  The mail access protocol is used to retrieve\n   messages, access\
    \ and change properties of messages, and manage\n   mailboxes.  This differs from\
    \ some approaches (e.g., Unix mail via\n   NFS) in that the mail access protocol\
    \ is used for all message\n   manipulations, isolating the user and the client\
    \ from all knowledge\n   of how the data storage is used.  This means that the\
    \ mail server can\n   utilize the data storage in whatever way is most efficient\
    \ to\n   organize the mail in that particular environment, without having to\n\
    \   worry about storage representation compatibility across different\n   machines.\n\
    \   In defining a mail access protocol, it is important to keep in mind\n   that\
    \ the client and server form a macrosystem, in which it should be\n   possible\
    \ to exploit the strong points of both while compensating for\n   each other's\
    \ weaknesses.  Furthermore, it's desirable to allow for a\n   growth path beyond\
    \ the hoary text-only RFC 822 protocol.  Unlike\n   POP2, IMAP3 has extensive\
    \ features for remote searching and parsing\n   of messages on the server.  For\
    \ example, a free text search\n   (optionally in conjunction with other searching)\
    \ can be made\n   throughout the entire mailbox by the server and the results\
    \ made\n   available to the client without the client having to transfer the\n\
    \   entire mailbox and searching itself.  Since remote parsing of a\n   message\
    \ into a structured (and standard format) \"envelope\" is\n   available, a client\
    \ can display envelope information and implement\n   commands such as REPLY without\
    \ having any understanding of how to\n   parse RFC 822, etc., headers.\n   Additionally,\
    \ IMAP3 offers several facilities for managing a mailbox\n   beyond the simple\
    \ \"delete message\" functionality of POP2.\n   In spite of this, IMAP3 is a relatively\
    \ simple protocol.  Although\n   servers should implement the full set of IMAP3\
    \ functions, a simple\n   client can be written which uses IMAP3 in much the way\
    \ as a POP2\n   client.\n   IMAP3 differs from the DMSP protocol of PCMAIL (RFC\
    \ 1056) in a more\n   fundamental manner, reflecting the differing architectures\
    \ of IMAP\n   and PCMAIL.  PCMAIL is either an online (\"interactive mode\"),\
    \ or\n   offline (\"batch mode\") system.  IMAP is primarily an online system\
    \ in\n   which real-time and simultaneous mail access were considered\n   important.\n\
    \   In PCMAIL, there is a long-term client/server relationship in which\n   some\
    \ mailbox state is preserved on the client.  There is a\n   registration of clients\
    \ used by a particular user, and the client\n   keeps a set of \"descriptors\"\
    \ for each message which summarize the\n   message.  The server and client synchronize\
    \ their states when the\n   DMSP connection starts up, and, if a client has not\
    \ accessed the\n   server for a while, the client does a complete reset (reload)\
    \ of its\n   state from the server.\n   In IMAP, the client/server relationship\
    \ lasts only for the duration\n   of the IMAP3 connection.  All mailbox state\
    \ is maintained on the\n   server.  There is no registration of clients.  The\
    \ function of a\n   descriptor is handled by a structured representation of the\
    \ message\n   \"envelope\".  This structure makes it unnecessary for a client\
    \ to know\n   anything about RFC 822 parsing.  There is no synchronization since\n\
    \   the client does not remember state between IMAP3 connections.  This\n   is\
    \ not a problem since in general the client never needs the entire\n   state of\
    \ the mailbox in a single session, therefore there isn't much\n   overhead in\
    \ fetching the state information that is needed as it is\n   needed.\n   There\
    \ are also some functional differences between IMAP3 and DMSP.\n   DMSP has functions\
    \ for sending messages, printing messages, and\n   changing passwords, all of\
    \ which are done outside of IMAP3.  DMSP has\n   16 binary flags of which 8 are\
    \ defined by the system.  IMAP has flag\n   names; there are currently 5 defined\
    \ system flag names and a facility\n   for some number (29 in the current implementations)\
    \ of user flag\n   names.  IMAP3 has a sophisticated message search facility in\
    \ the\n   server to identify interesting messages based on dates, addresses,\n\
    \   flag status, or textual contents without compelling the client to\n   fetch\
    \ this data for every message.\n   It was felt that maintaining state on the client\
    \ is advantageous only\n   in those cases where the client is only used by a single\
    \ user, or if\n   there is some means on the client to restrict access to another\n\
    \   user's data.  It can be a serious disadvantage in an environment in\n   which\
    \ multiple users routinely use the same client, the same user\n   routinely uses\
    \ different clients, and where there are no access\n   restrictions on the client.\
    \  It was also observed that most user mail\n   access is to a relatively small\
    \ set of \"interesting\" messages, which\n   were either \"new\" mail or mail\
    \ based upon some user-selected\n   criteria. Consequently, IMAP3 was designed\
    \ to easily identify those\n   \"interesting\" messages so that the client could\
    \ fetch the state of\n   those messages and not those that were not \"interesting\"\
    .\n   One crucial philosophical difference between IMAP and other common\n   mail\
    \ protocols is that IMAP is a mailbox access protocol, not a\n   protocol for\
    \ manipulating mail files.  In the IMAP model, unlike\n   other mail system models\
    \ in which mail is stored in a linear mail\n   file, no specification is made\
    \ for the implementation architecture\n   for mail storage.  Servers may choose\
    \ to implement mailboxes as files\n   but this is a detail of which the client\
    \ can be totally unaware.\n   What is more, in the IMAP model, mailboxes are viewed\
    \ as mappings\n   from keys into values.  There are broadly three types of keys,\n\
    \   generic, canonical and concrete.  Generic keys are generic, mail\n   protocol\
    \ independent keys defined by IMAP which are meaningful across\n   multiple mail\
    \ encoding formats.  An example of such a generic key\n   might be \"TO\", which\
    \ would be associated with the \"To:\" field of an\n   RFC 822 format message.\n\
    \   Canonical keys represent the way in which the server can associate\n   values\
    \ that are generally \"about\" a certain key concept, possibly\n   integrating\
    \ several mail format specific fields, without having to\n   worry the client\
    \ with the particular details of any particular\n   message format.  Thus, the\
    \ canonical TO key (called $TO) could denote\n   anything that could reasonably\
    \ be construed as being directed towards\n   someone.  Hence, in an RFC 822 message\
    \ the server could find the\n   union of the \"To:\", \"Resent-To\", \"Apparently-To:\"\
    \ and \"CC:\" fields to\n   be the appropriate value associated with the canonical\
    \ $TO key.\n   Concrete keys allow the client to gain access to certain mail format\n\
    \   specific concepts, that are not pre-specified by the IMAP protocol,\n   in\
    \ a well defined manner.  For example, If the client asks for the\n   value associated\
    \ with the \"APPARENTLY-TO\" key then, if the message\n   were to be in RFC 822\
    \ format, the server would look for a header\n   field called \"Apparently-To:\"\
    .  If no such field is found or the\n   field is not implemented or meaningful\
    \ for the particular message\n   format then the server will respond with the\
    \ null value, called NIL,\n   indicating the non-existence of the field.\n   Thus,\
    \ IMAP servers are at liberty to implement mailboxes as a\n   relational databases\
    \ if it seems convenient.  Indeed, we anticipate\n   that future mail systems\
    \ will tend to use database technology for the\n   storage and indexing of mailboxes\
    \ as a result of the pressure caused\n   by the increasing size of mailboxes.\n\
    \   Although for historical reasons IMAP is currently somewhat closely\n   associated\
    \ with RFC 822, we anticipate that future developments in\n   IMAP will remove\
    \ these mail format specific components and will move\n   towards the generic\
    \ model mentioned above.  This will allow IMAP more\n   easily to incorporate\
    \ such things as multi-media mail.\n"
- title: The Protocol
  contents:
  - "The Protocol\n   The IMAP3 protocol consists of a sequence of client commands\
    \ and\n   server responses to those commands, with extra information from the\n\
    \   server data being sent asynchronously to and independent to the\n   responses\
    \ to client commands.  Unlike most Internet protocols,\n   commands and responses\
    \ are tagged.  That is, a command begins with a\n   unique identifier (typically\
    \ a short alphanumeric sequence such as a\n   Lisp \"gensym\" function would generate\
    \ e.g., A0001, A0002, etc.),\n   called a tag.  The response to this command is\
    \ given the same tag\n   from the server.\n   We distinguish between data sent\
    \ by the server as the result of a\n   client request, which we term \"SOLICITED\"\
    \ and data sent by the server\n   not as the result of a client request, which\
    \ we term \"UNSOLICITED\".\n   The server may send unsolicited data at any time\
    \ that would not\n   fragment another piece of data on the same stream rendering\
    \ it\n   unintelligible.  The server is contractually required, however, to\n\
    \   return all data that is solicited by the client before the return of\n   the\
    \ completion signal for that command, i.e., all solicited data must\n   be returned\
    \ within the temporal extent of the request/completion\n   acknowledgement wrapper.\
    \  This does not, however, preclude the\n   simultaneous processing of multiple\
    \ requests by the client, it simply\n   requires that the client be confident\
    \ that it has all the requested\n   data when a request finishes.  This allows\
    \ the implementation of both\n   synchronous and asynchronous clients.\n   Solicited\
    \ data is identified by the tag of the initial request by the\n   client.  Unsolicited\
    \ data is identified by the special reserved tag\n   of \"*\".  There is another\
    \ special reserved tag, \"+\", discussed below.\n   Note: the tagging of SOLICITED\
    \ data is only permitted for a selected\n   server version other than 2.0.\n \
    \  No assumptions concerning serial or monolithic processing by the\n   server\
    \ can be made by a correct client.  The server is at liberty to\n   process multiple\
    \ requests by the same client in any order.  This\n   allows servers to process\
    \ costly searches over mailboxes on slow\n   backing storage media in the background,\
    \ while still preserving\n   interactive performance.  Clients can, however, assume\
    \ the\n   serialization of the request/data/completion behavior mentioned\n  \
    \ above.\n   When a connection is opened the server sends an unsolicited OK\n\
    \   response as a greeting message and then waits for commands.  When\n   commands\
    \ are received the server acts on them and responds with\n   responses, often\
    \ interspersed with data.\n   The client opens a connection, waits for the greeting,\
    \ then sends a\n   LOGIN command with user name and password arguments to establish\n\
    \   authorization.  Following an OK response from the server, the client\n   then\
    \ sends a SELECT command to access the desired mailbox.  The\n   user's default\
    \ mailbox has a special reserved name of \"INBOX\" which\n   is independent of\
    \ the operating system that the server is implemented\n   on.  The server will\
    \ generally send a list of valid flags, number of\n   messages, and number of\
    \ messages arrived since last access for this\n   mailbox as solicited data, followed\
    \ by an OK response.  The client\n   may terminate access to this mailbox and\
    \ access a different one with\n   another SELECT command.\n   Because the SELECT\
    \ command affects the state of the server in a\n   fundamental way, the server\
    \ is required to process all outstanding\n   commands for any given mailbox before\
    \ sending the OK tag for the\n   SELECT command.  Thus, the client will always\
    \ know that all responses\n   before an OK SELECT response will refer to the old\
    \ mailbox and all\n   responses following it will apply to the new mailbox.\n\
    \   Because, in the real world, local needs or experimental work will\n   dictate\
    \ that servers will support both supersets of the defined\n   behavior and incompatible\
    \ changes, servers will support a\n   SELECT.VERSION command and a SELECT.FEATURES\
    \ command, the purpose of\n   which is to allow clients to select the overall\
    \ behavior and specific\n   features that they want from a server.  The default\
    \ behavior of any\n   server is to process commands and to have interaction syntax\
    \ the same\n   as is specified by IMAP2 in RFC 1064.  A server may not behave\
    \ in any\n   other manner unless the SELECT.VERSION or SELECT.FEATURES commands\n\
    \   are used to select different behavior.\n   Over time, when groups of generally\
    \ useful changes to the current,\n   default behavior of the server are found,\
    \ these will be collected\n   together and incorporated in such a way that all\
    \ of the features can\n   be selected simply by selecting a particular major version\
    \ number of\n   the protocol.  It should be noted that the version numbers (both\n\
    \   major and minor) selected by the SELECT.VERSION command denote\n   versions\
    \ of the IMAP protocol, not versions of the server per se.\n   Thus, although\
    \ in general changes to the protocol specification will\n   be made in such a\
    \ way that they are upwards compatible, this cannot\n   be guaranteed.  No client\
    \ should rely on tests of the form \"if\n   major_version > 2 then...\" being\
    \ valid for all protocol versions,\n   since incompatible changes might be made\
    \ in the future.\n   The client reads mailbox information by means of FETCH commands.\
    \  The\n   actual data is transmitted via the solicited data mechanism (that is,\n\
    \   FETCH should be viewed as poking the server to include the desired\n   data\
    \ along with any other data it wishes to transmit to the client).\n   There are\
    \ three major categories of data which may be fetched.\n   The first category\
    \ is that data which is associated with a message as\n   an entity in the mailbox.\
    \  There are presently three such items of\n   data: the \"internal date\", the\
    \ \"RFC 822 size\", and the \"flags\".  The\n   internal date is the date and\
    \ time that the message was placed in the\n   mailbox.  The RFC 822 size is subject\
    \ to deletion in the future; it\n   is the size in bytes of the message, expressed\
    \ as an RFC 822 text\n   string.  Current clients only use it as part of a status\
    \ display\n   line.  The flags are a list of status flags associated with the\n\
    \   message (see below).  All of the first category data can be fetched\n   by\
    \ using the macro-fetch word \"FAST\"; that is, \"FAST\" expands to\n   \"(FLAGS\
    \ INTERNALDATE RFC822.SIZE)\".\n   The second category is that data which describes\
    \ the composition and\n   delivery information of a message; that is, information\
    \ such as the\n   message sender, recipient lists, message-ID, subject, etc. \
    \ This is\n   the information which is stored in the message header in RFC 822\n\
    \   format message and is traditionally called the \"envelope\".  [Note:\n   this\
    \ should not be confused with the SMTP (RFC 821) envelope, which\n   is strictly\
    \ limited to delivery information.]  IMAP3 defines a\n   structured and unambiguous\
    \ representation for the envelope which is\n   particularly nice for Lisp-based\
    \ parsers.  A client can use the\n   envelope for operations such as replying\
    \ and not worry about RFC 822\n   at all.  Envelopes are discussed in more detail\
    \ below.  The first and\n   second category data can be fetched together by using\
    \ the macro-fetch\n   word \"ALL\"; that is, \"ALL\" expands to \"(FLAGS INTERNALDATE\n\
    \   RFC822.SIZE ENVELOPE)\".\n   The third category is that data which is intended\
    \ for direct human\n   viewing.  The present RFC 822 based IMAP3 defines three\
    \ such items:\n   RFC822.HEADER, RFC822.TEXT, and RFC822 (the latter being the\
    \ two\n   former appended together in a single text string).  Fetching \"RFC822\"\
    \n   is equivalent to typing the RFC 822 representation of the message as\n  \
    \ stored on the mailbox without any filtering or processing.\n   Typically, a\
    \ client will \"FETCH ALL\" for some or all of the messages\n   in the mailbox\
    \ for use as a presentation menu, and when the user\n    wishes to read a particular\
    \ message will \"FETCH RFC822.TEXT\" to get\n   the message body.  A more primitive\
    \ client could, of course, simply\n   \"FETCH RFC822\" a la POP2-type functionality.\n\
    \   The client can alter certain data by means of a STORE command.  As an\n  \
    \ example, a message is deleted from a mailbox by a STORE command which\n   includes\
    \ the \\DELETED flag as one of the flags being set.\n   Other client operations\
    \ include copying a message to another mailbox\n   (COPY command), permanently\
    \ removing deleted messages (EXPUNGE\n   command), checking for new messages (CHECK\
    \ command), and searching\n   for messages which match certain criteria (SEARCH\
    \ command).\n   The client terminates the session with the LOGOUT command.  The\n\
    \   server returns a \"BYE\" followed by an \"OK\".\n"
- title: A Typical Scenario
  contents:
  - "A Typical Scenario\n        Client                          Server\n        ------\
    \                          ------\n                                    {Wait for\
    \ Connection}\n    {Open Connection}        -->\n                            \
    \    <-- * OK IMAP3 Server Ready\n                                    {Wait for\
    \ command}\n    A001 SUPPORTED.VERSIONS   -->\n                              \
    \  <-- * SUPPORTED.VERSIONS ((2 0 )\n                                        (3\
    \ 0 EIGHT.BIT.TRANSPARENT\n                                             AUTO.SET.SEEN\n\
    \                                             TAGGED.SOLICITED))\n           \
    \                         A001 OK Supported Versions returned.\n             \
    \                       {Wait for command}\n    A002 SELECT.VERSION (3 0) -->\n\
    \                                <-- A002 OK Version 3.0 Selected.\n         \
    \                           {Wait for command}\n    A002 SELECT.FEATURES TAGGED.SOLICITED\
    \ -->\n                                <-- A002 OK Features selected.\n      \
    \                              {Wait for command}\n    A003 LOGIN Fred Secret\
    \   -->\n                                <-- A003 OK User Fred logged in\n   \
    \                                 {Wait for command}\n    A004 SELECT INBOX  \
    \      -->\n                                <-- A004 FLAGS (Meeting Notice \\\
    Answered\n                                             \\Flagged \\Deleted \\\
    Seen)\n                                <-- A004 19 EXISTS\n                  \
    \              <-- A004 2 RECENT\n                                <-- A004 OK\
    \ Select complete\n                                    {Wait for command}\n  \
    \  A005 FETCH 1:19 ALL      -->\n                                <-- A005 1 Fetch\
    \ (......)\n                                        ...\n                    \
    \            <-- A005 18 Fetch (......)\n                                <-- A005\
    \ 19 Fetch (......)\n                                <-- A005 OK Fetch complete\n\
    \                                    {Wait for command}\n    A006 FETCH 8 RFC822.TEXT\
    \ -->\n                                <-- A006 8 Fetch (RFC822.TEXT {893}\n \
    \                                      ...893 characters of text...\n        \
    \                        <-- )\n                                <-- A006 OK Fetch\
    \ complete\n                                    {Wait for command}\n    A007 STORE\
    \ 8 +Flags \\Deleted -->\n                                <-- A007 8 Store (Flags\
    \ (\\Deleted\n                                               \\Seen))\n      \
    \                          <-- A007 OK Store complete\n                      \
    \              {Wait for command}\n    A008 EXPUNGE             -->\n        \
    \                        <-- A008 19 EXISTS\n                                <--\
    \ A008 8 EXPUNGE\n                                <-- A008 18 EXISTS\n       \
    \                         <-- A008 Expunge complete\n                        \
    \            {Wait for command}\n    A009 LOGOUT              -->\n          \
    \                      <-- A009 BYE IMAP3 server quitting\n                  \
    \              <-- A009 OK Logout complete\n    {Close Connection}       --><--\
    \ {Close connection}\n                                    {Go back to start}\n\
    \   A more complex scenario produced by a pipelining multiprocess client.\n  \
    \      Client                          Server\n        ------                \
    \          ------\n                                    {Wait for Connection}\n\
    \    {Open session as above}\n                                <-- A004 19 EXISTS\n\
    \                                <-- A004 2 RECENT\n                         \
    \       <-- A004 OK Select complete\n                                    {Wait\
    \ for command}\n    A005 SEARCH RECENT       -->\n                           \
    \     <-- A005 SEARCH (18 19) (RECENT)\n                                <---A005\
    \ OK Search complete\n    A006 FETCH 18:19 ALL RFC822.TEXT\n    A007 STORE 18:19\
    \ +FLAGS (\\SEEN)\n    A008 FETCH 1:17 ALL      -->\n                        \
    \        <-- A006 18 Fetch (... RFC822.TEXT ...)\n    A009 STORE 18 +FLAGS (\\\
    DELETED)\n                                <-- A006 19 Fetch (... RFC822.TEXT ...)\n\
    \                                <-- A006 OK Fetch complete\n                \
    \                <-- A007 18 STORE (Flags (\\Seen))\n    A010 STORE 19 +FLAGS\
    \ (\\DELETED)\n                                <-- A007 19 STORE (Flags (\\Seen))\n\
    \                                <-- A007 OK Store complete\n                \
    \                <-- A008 1 Fetch (......)\n                                 \
    \      ...\n                                <-- A008 16 Fetch (......)\n     \
    \                           <-- A008 17 Fetch (......)\n                     \
    \           <-- A008 OK Fetch complete\n                                <-- A009\
    \ 18 STORE (Flags (\\Seen\n                                                  \
    \        \\Deleted))\n                                <-- A009 OK Store complete\n\
    \                                <-- A010 19 STORE (Flags (\\Seen\n          \
    \                                                \\Deleted))\n               \
    \                 <-- A010 OK Store complete\n                               \
    \     {Wait for command}\n                                <-- * EXISTS 23\n  \
    \                              <-- * RECENT 4\n                              \
    \  <-- * SEARCH (20 21 22 23) (RECENT)\n   A011 FETCH 20:23 ALL RFC822.TEXT\n"
- title: Conventions
  contents:
  - "Conventions\n   The following terms are used in a meta-sense in the syntax\n\
    \   specification below:\n      An ASCII-STRING is a sequence of arbitrary ASCII\
    \ characters.\n      An ATOM is a sequence of ASCII characters delimited by SP\
    \ or CRLF.\n      A CHARACTER is any ASCII character except \"\"\"\", \"{\", CR,\
    \ LF, \"%\",\n      or \"\\\".\n      A CRLF is an ASCII carriage-return character\
    \ followed immediately\n      by an ASCII linefeed character.\n      A NUMBER\
    \ is a sequence of the ASCII characters which represent\n      decimal numerals\
    \ (\"0\" through \"9\"), delimited by SP, CRLF, \",\", or\n      \":\".\n    \
    \  A SP is the ASCII space character.\n      A TEXT_LINE is a human-readable sequence\
    \ of ASCII characters up to\n      but not including a terminating CRLF.\n   One\
    \ of the most common fields in the IMAP3 protocol is a STRING,\n   which may be\
    \ an ATOM, QUOTED-STRING (a sequence of CHARACTERs inside\n   double-quotes),\
    \ or a LITERAL.  A literal consists of an open brace\n   (\"{\"), a number, a\
    \ close brace (\"}\"), a CRLF, and then an ASCII-\n   STRING of n characters,\
    \ where n is the value of the number inside the\n   brace. In general, a string\
    \ should be represented as an ATOM or\n   QUOTED-STRING if at all possible.  The\
    \ semantics for QUOTED-STRING or\n   LITERAL are checked before those for ATOM;\
    \ therefore an ATOM used in\n   a STRING may only contain CHARACTERs.  Literals\
    \ are most often sent\n   from the server to the client; in the rare case of a\
    \ client to server\n   literal there is a special consideration (see the \"+ text\"\
    \ response\n   below).\n   Another important field is the SEQUENCE, which identifies\
    \ a set of\n   messages by consecutive numbers from 1 to n where n is the number\
    \ of\n   messages in the mailbox.  A sequence may consist of a single number,\n\
    \   a pair of numbers delimited by colon indicating all numbers between\n   those\
    \ two numbers, or a list of single numbers and/or number pairs.\n   For example,\
    \ the sequence 2,4:7,9,12:15 is equivalent to\n   2,4,5,6,7,9,12,13,14,15 and\
    \ identifies all of those messages.\n"
- title: Definitions of Commands and Responses
  contents:
  - "Definitions of Commands and Responses\n   Summary of Commands and Responses\n"
- title: 'Commands:'
  contents:
  - "Commands:\n       tag NOOP\n       tag LOGIN user password\n       tag LOGOUT\n\
    \       tag SELECT mailbox\n       tag CHECK\n       tag EXPUNGE\n       tag COPY\
    \ sequence mailbox\n       tag FETCH sequence data\n       tag STORE sequence\
    \ data value\n       tag SEARCH criteria\n       tag BBOARD bboard\n       tag\
    \ FIND (BBOARDS / MAILBOXES) pattern\n       tag READONLY\n       tag READWRITE\n\
    \       tag SELECT.VERSION (major_version minor_version)\n       tag SELECT.FEATURES\
    \ features\n       tag SUPPORTED.VERSIONS\n       tag FLAGS\n       tag SET.FLAGS\n"
- title: 'Responses (can be either solicited or unsolicited):'
  contents:
  - "Responses (can be either solicited or unsolicited):\n       */tag FLAGS flag_list\n\
    \       */tag SEARCH (numbers) (criteria)\n       */tag EXISTS\n       */tag RECENT\n\
    \       */tag EXPUNGE\n       */tag STORE data\n       */tag FETCH data\n    \
    \   */tag BBOARD bboard_name\n       */tag MAILBOX non_inbox_mailbox_name\n  \
    \     */tag SUPPORTED.VERSIONS version_data\n       */tag READONLY\n       */tag\
    \ READWRITE\n       */tag OK text\n       */tag NO text\n       */tag BAD text\n\
    \       */tag BYE text\n"
- title: 'Responses (can only be solicited):'
  contents:
  - "Responses (can only be solicited):\n       tag COPY message_number\n"
- title: 'Responses (can only be unsolicited):'
  contents:
  - "Responses (can only be unsolicited):\n       + text\n"
- title: Commands
  contents:
  - "Commands\n   tag NOOP\n      The NOOP command returns an OK to the client.  By\
    \ itself, it does\n      nothing, but certain things may happen as side effects.\
    \  For\n      example, server implementations which implicitly check the mailbox\n\
    \      for new mail may do so as a result of this command.  The primary\n    \
    \  use of this command is to for the client to see if the server is\n      still\
    \ alive (and notify the server that the client is still alive,\n      for those\
    \ servers which have inactivity autologout timers).\n   tag LOGIN user password\n\
    \      The LOGIN command identifies the user to the server and carries\n     \
    \ the password authenticating this user.  This information is used\n      by the\
    \ server to control access to the mailboxes.\n      EXAMPLE: A001 LOGIN SMITH\
    \ SESAME logs in as user SMITH with\n      password SESAME.\n   tag LOGOUT\n \
    \     The LOGOUT command indicates the client is done with the session.\n    \
    \  The server sends a solicited BYE response before the (tagged) OK\n      response,\
    \ and then closes the connection.\n   tag SELECT mailbox\n      The SELECT command\
    \ selects a particular mailbox.  The server must\n      check that the user is\
    \ permitted read access to this mailbox.\n      Prior to returning an OK to the\
    \ client, the server must send an\n      solicited FLAGS and <n> EXISTS response\
    \ to the client giving the\n      flags list for this mailbox (simply the system\
    \ flags if this\n      mailbox doesn't have any special flags) and the number\
    \ of messages\n      in the mailbox.  It is also recommended that the server send\
    \ a <n>\n      RECENT unsolicited response to the client for the benefit of\n\
    \      clients which make use of the number of new messages in a mailbox.\n  \
    \    It is further recommended that servers should send an unsolicited\n     \
    \ READONLY message if the mailbox that has been selected is not\n      writable\
    \ by the user.\n      Multiple SELECT commands are permitted in a session, in\
    \ which case\n      the prior mailbox is deselected first.\n      The default\
    \ mailbox for the SELECT command is INBOX, which is a\n      special name reserved\
    \ to mean \"the primary mailbox for this user\n      on this server\".  The format\
    \ of other mailbox names is operating\n      system dependent (as of this writing,\
    \ it reflects the path of the\n      mailbox on the current servers), though it\
    \ could reflect any\n      server-specific naming convention for the namespace\
    \ of mailboxes.\n      Such a namespace need not and should not be viewed as being\n\
    \      equivalent or linked to the server machine's file system.\n      EXAMPLES:\
    \ A002 SELECT INBOX  ;; selects the default mailbox.\n                A002 197\
    \ EXISTS    ;; server says 197 messages in INBOX\n                A002 5 RECENT\
    \      ;; server says 5 are recent.\n                A002 OK Select complete.\n\
    \      or\n                A003 SELECT /usr/fred/my-mail.txt\n               \
    \  ;; select a different user specified mailbox.\n                ...\n   tag\
    \ CHECK\n      The CHECK command forces a check for new messages and a rescan\
    \ of\n      the mailbox for internal change for those implementations which\n\
    \      allow multiple simultaneous read/write access to the same mailbox\n   \
    \   (e.g., TOPS-20).  It is recommend that periodic implicit checks\n      for\
    \ new mail be done by servers as well.  The server must send a\n      solicited\
    \ <n> EXISTS response prior to returning an OK to the\n      client.\n   tag EXPUNGE\n\
    \      The EXPUNGE command permanently removes all messages with the\n      \\\
    DELETED flag set in its flags from the mailbox.  Prior to\n      returning an\
    \ OK to the client, for each message which is removed,\n      a solicited <n>\
    \ EXPUNGE response is sent indicating which message\n      was removed.  The message\
    \ number of each subsequent message in the\n      mailbox is immediately decremented\
    \ by 1; this means that if the\n      last 5 messages in a 9-message mailbox are\
    \ expunged you will\n      receive 5 \"5 EXPUNGE\" responses for message 5.  To\
    \ ensure mailbox\n      integrity and server/client synchronization, it is recommended\n\
    \      that the server do an implicit check prior to commencing the\n      expunge\
    \ and again when the expunge is completed.  Furthermore, if\n      the server\
    \ allows multiple simultaneous access to the same mailbox\n      the server must\
    \ guarantee both the integrity of the mailbox and\n      the views of it held\
    \ by the clients.\n      EXPUNGE is not allowed if the user does not have write\
    \ access to\n      this mailbox.  If a user does not have write access to the\
    \ mailbox\n      then the server is required to signal this fact by replying with\
    \ a\n      NO response with a suitable text string that can be presented to\n\
    \      the user explaining that the mailbox is read-only.  It is further\n   \
    \   recommended that servers send an unsolicited READONLY message to\n      clients\
    \ that attempt an expunge operation on a read only mailbox.\n   tag COPY sequence\
    \ mailbox\n      The COPY command copies the specified message(s) to the specified\n\
    \      destination mailbox.  If the destination mailbox does not exist,\n    \
    \  the server should create it.  Prior to returning an OK to the\n      client,\
    \ the server must return a solicited <n> COPY response for\n      each message\
    \ copied.\n      EXAMPLE: A003 COPY 2:4 MEETING copies messages 2, 3, and 4 to\n\
    \      mailbox \"MEETING\".\n      COPY is not allowed if the user does not have\
    \ write access to the\n      destination mailbox.  If a user does not have write\
    \ access to the\n      destination mailbox then the server is required to signal\
    \ this\n      fact by replying with a NO response with a suitable text string\n\
    \      that can be presented to the user explaining that the mailbox is\n    \
    \  read-only.  It is further recommended that servers send an\n      unsolicited\
    \ READONLY message to clients that attempt to copy to a\n      read only mailbox.\
    \  IMAP3 does not specify \"where\" the message\n      will be put in the mailbox\
    \ to which it has been copied.\n   tag FETCH sequence fetch_att\n      The FETCH\
    \ command retrieves data associated with a message in the\n      mailbox.  The\
    \ data items to be fetched may be either a single atom\n      or an S-expression\
    \ list.  The attributes that can be fetched are\n      any of those mentioned\
    \ specifically below along with any generic,\n      canonical or concrete key.\
    \  The set of predefined generic keys is:\n      {BCC, BODY, CC, FROM, HEADER,\
    \ SIZE, SUBJECT, TEXT, TO}.  The set\n      of predefined canonical keys is {$CC,\
    \ $FROM, $SUBJECT, $TO}.  The\n      value returned by the server for a non-existent\
    \ or non-meaningful\n      key is defined to be the null value, NIL.\n      ALL\
    \             Equivalent to:\n                      (FLAGS INTERNALDATE RFC822.SIZE\
    \ ENVELOPE)\n      ENVELOPE        The envelope of the message.  The envelope\
    \ is\n                      computed by the server by parsing the header,\n  \
    \                    i.e., the RFC 822 header for an RFC822 format\n         \
    \             message, into the component parts, defaulting\n                \
    \      various fields as necessary.\n      FAST            Macro equivalent to:\n\
    \                      (FLAGS INTERNALDATE RFC822.SIZE)\n      FLAGS         \
    \  The flags which are set for this message.\n                      This may include\
    \ the following system flags:\n                              \\RECENT    Message\
    \ arrived since\n                                          last read of this mailbox\n\
    \                              \\SEEN      Message has been read\n           \
    \                   \\ANSWERED  Message has been answered\n                  \
    \            \\FLAGGED   Message is \"flagged\" for\n                        \
    \                  urgent/special attention\n                              \\\
    DELETED   Message is \"deleted\" for\n                                       \
    \   removal by later EXPUNGE\n      INTERNALDATE    The date and time the message\
    \ was written to\n                      the mailbox.\n      RFC822          The\
    \ message in RFC 822 format.\n      RFC822.HEADER   The RFC 822 format header\
    \ of the message.\n      RFC822.SIZE     The number of characters in the message\
    \ as\n                      expressed in RFC 822 format.\n      RFC822.TEXT  \
    \   The text body of the message, omitting the\n                      RFC 822\
    \ header.\n      EXAMPLES:\n      A003 FETCH 2:4 ALL\n         fetches the flags,\
    \ internal date, RFC 822 size, and envelope\n         for messages 2, 3, and 4.\n\
    \      A004 FETCH 3 RFC822\n         fetches the RFC 822 representation for message\
    \ 3.\n      A005 FETCH 4 (FLAGS RFC822.HEADER)\n         fetches the flags and\
    \ RFC 822 format header for message 4.\n      A006 FETCH 42 $SUBJECT\n      A006\
    \ FETCH $SUBJECT \"Some subject text...\"\n      A006 OK FETCH completed ok.\n\
    \         fetches the canonical subject field.\n      A007 FETCH 42 APPARENTLY-TO\n\
    \      A007 FETCH APPARENTLY-TO NIL\n      A007 OK FETCH found no value.\n   \
    \      fetches the concrete apparently-to field.\n   tag STORE sequence data value\n\
    \      The STORE command alters the values associated with particular\n      keys\
    \ for a message in the mailbox.  As is the case for the FETCH\n      command,\
    \ any generic, canonical or concrete key may be used to\n      index the value\
    \ provided.  In addition to these, the following\n      pre-defined keys are provided.\n\
    \   FLAGS           Replace the flags for the message with the\n             \
    \      argument (in flag list format).\n                  The server must respond\
    \ with a solicited STORE FLAGS\n                  message, showing the new state\
    \ of the flags after\n                  the store.\n   +FLAGS          Add the\
    \ flags in the argument to the\n                   message's flag list.\n    \
    \             The server must respond with a solicited STORE FLAGS\n         \
    \        message, showing the new state of the flags after\n                 the\
    \ store.\n  -FLAGS          Remove the flags in the argument from the\n      \
    \            message's flag list.\n                 The server must respond with\
    \ a solicited STORE FLAGS\n                 message, showing the new state of\
    \ the flags after\n                 the store.\n  RFC822.HEADER   Replace the\
    \ header of the message(s) with that\n                  specified.  This allows\
    \ users to use their mailboxes\n                  as databases with header fields\
    \ as keys.\n                  The server must respond with solicited\n       \
    \           STORE RFC822.HEADER, STORE RFC822.SIZE and\n                  STORE\
    \ ENVELOPE messages,  showing the new state\n                  of the reparsed\
    \ header after the store.\n  RFC822.TEXT     Replace the body of the messages\
    \ with that specified.\n                  The server must respond with solicited\n\
    \                  STORE RFC822.TEXT and STORE RFC822.SIZE messages,\n       \
    \           showing the new state of the message after the store.\n         STORE\
    \ is not allowed if the user does not have write access to\n         this mailbox.\n\
    \         The server is required to send a solicited STORE response for\n    \
    \     each store operation that results in a format transformation by\n      \
    \   the server.  For example, the server is required to send a\n         STORE\
    \ FLAGS response when the client performs a STORE +FLAGS or\n         a STORE\
    \ -FLAGS, since the client may not easily be able to know\n         what the result\
    \ of this command will be.  Similarly, if the\n         client emits a STORE FROM\
    \ command then the server should\n         respond with a suitable STORE FROM\
    \ response because the client\n         would be sending a string value to be\
    \ stored and the server\n         should transform this into a set of addresses.\
    \  In general,\n         however, although it is legal for the server to send\
    \ a\n         solicited STORE response for each STORE operation, this is\n   \
    \      discouraged, since it might result in the retransmission of\n         very\
    \ large and unnecessary amounts of data that have been\n         stored.\n   \
    \      EXAMPLE: A003 STORE 2:4 +FLAGS (\\DELETED) marks messages 2, 3,\n     \
    \    and 4 for deletion.\n   tag SEARCH search_criteria\n      The SEARCH command\
    \ searches the mailbox for messages which match\n      the given set of criteria.\
    \  The server response SEARCH (criteria)\n      (numbers) gives the set of messages\
    \ which match the conjunction of\n      the criteria specified.  In addition to\
    \ each of the search\n      criteria there is its logical inverse.  The logical\
    \ inverse\n      criterion is denoted by the ~ (tilda) sign.\n      Thus, no message\
    \ that matches the criterion:\n         FROM crispin\n      will match the criterion:\n\
    \         ~FROM crispin\n      The criteria for the search can be any generic,\
    \ canonical or\n      concrete key.  In addition to these, the following pre-defined\n\
    \      keys are also provided:\n      ALL             All messages in the mailbox;\
    \ the default\n                      initial criterion for ANDing.\n      ANSWERED\
    \        Messages with the \\ANSWERED flag set.\n      BCC string      Messages\
    \ which contain the specified string\n                      in the envelope's\
    \ BCC field.\n      BEFORE date     Messages whose internal date is earlier than\n\
    \                      the specified date.\n      BODY string     Messages which\
    \ contain the specified string\n                      in the body of the message.\n\
    \      CC string       Messages which contain the specified string\n         \
    \             in the envelope's CC field.\n      DELETED         Messages with\
    \ the \\DELETED flag set.\n      FLAGGED         Messages with the \\FLAGGED flag\
    \ set.\n      FROM string     Messages which contain the specified string\n  \
    \                    in the envelope's FROM field.\n      HEADER string   Messages\
    \ which contain the specified string\n                      in the message header.\n\
    \      KEYWORD flag    Messages with the specified flag set.\n      NEW      \
    \       Messages which have the \\RECENT flag set but\n                      not\
    \ the \\SEEN flag.  This is functionally\n                      equivalent to\
    \ \"RECENT UNSEEN\".\n      OLD             Messages which do not have the \\\
    RECENT flag\n                      set.\n      ON date         Messages whose\
    \ internal date is the same as\n                      the specified date.\n  \
    \    RECENT          Messages which have the \\RECENT flag set.\n      SEEN  \
    \          Messages which have the \\SEEN flag set.\n      SINCE date      Messages\
    \ whose internal date is later than\n                      the specified date.\n\
    \      SUBJECT string  Messages which contain the specified string\n         \
    \             in the envelope's SUBJECT field.\n      TEXT string     Messages\
    \ which contain the specified string.\n      TO string       Messages which contain\
    \ the specified string in\n                      the envelope's TO field.\n  \
    \       EXAMPLE:  A003 SEARCH DELETED FROM \"SMITH\" SINCE 1-OCT-87\n        \
    \ returns the message numbers for all deleted messages from Smith\n         that\
    \ were placed in the mailbox since October 1, 1987.\n      Implementation note:\
    \  The UNANSWERED, UNDELETED, UNFLAGGED,\n      UNKEYWORD and UNSEEN criteria,\
    \ described below, are preserved in\n      IMAP3 for IMAP2 compatibility.  They\
    \ are, however, considered\n      obsolete and new Client programs are encouraged\
    \ to use the ~\n      notation for the logical inverses of search criteria with\
    \ a view\n      to the dropping of this outmoded syntax in later versions.\n \
    \     UNANSWERED      Messages which do not have the \\ANSWERED flag\n       \
    \               set.\n      UNDELETED       Messages which do not have the \\\
    DELETED flag\n                      set.\n      UNFLAGGED       Messages which\
    \ do not have the \\FLAGGED flag\n                      set.\n      UNKEYWORD\
    \ flag  Messages which do not have the specified flag\n                      set.\n\
    \      UNSEEN          Messages which do not have the \\SEEN flag set.\n   tag\
    \ READONLY\n      The READONLY command indicates that the client wishes to make\
    \ the\n      mailbox read-only.  The server is required to reply with a\n    \
    \  solicited READONLY or READWRITE response.\n   tag READWRITE\n      The READWRITE\
    \ command indicates that the client wishes to make the\n      mailbox read-write.\
    \  The server is required to reply with a\n      solicited READONLY or READWRITE\
    \ response.\n   tag SUPPORTED.VERSIONS\n      The SUPPORTED.VERSIONS solicits\
    \ from the server a\n      SUPPORTED.VERSIONS message, which encapsulates information\
    \ about\n      which versions and features the server supports.\n   tag SELECT.VERSION\
    \ (major_version minor_version)\n      The SELECT.VERSION command indicates that\
    \ the client wishes to\n      select certain behavior on the part of the server.\
    \  The major and\n      minor versions indicate the specific version of the protocol\
    \ being\n      selected.\n      EXAMPLE: A002 SELECT.VERSION (3 0)\n      A client\
    \ may not request a server version that is not supported by\n      the server,\
    \ i.e., which is specifically mentioned in the response\n      to a SUPPORTED.VERSIONS\
    \ command.  An attempt to do so by a client\n      will result in a NO response\
    \ from the server.  It is an error for\n      the SELECT.VERSION command to be\
    \ used after a mailbox has been\n      selected.  The rationale for this is that\
    \ for some server\n      implementations it might be necessary to spawn separate\
    \ programs\n      to implement widely divergent protocol versions.  Thus, the\
    \ client\n      cannot be allowed to expect any server state to be preserved after\n\
    \      the use of the SELECT.VERSION command.  The default version of all\n  \
    \    servers is 2.0, i.e., IMAP2 as defined by RFC 1064.\n   tag SELECT.FEATURES\
    \ 1#features\n      The SELECT.FEATURES command indicates that the client wishes\
    \ to\n      select certain specific features on the part of the server. A\n  \
    \    client may not request a feature that is not supported by the\n      server,\
    \ i.e., one that is explicitly mentioned in the set of\n      features for the\
    \ selected version returned by the\n      SUPPORTED.VERSIONS command.  An attempt\
    \ to do so by a client will\n      result in a NO response from the server.\n\
    \      EXAMPLE: A002 SELECT.FEATURES AUTO.SET.SEEN ~TAGGED.SOLICITED\n       \
    \       EIGHT.BIT.TRANSPARENT\n      i.e., select the set of features called AUTO.SET.SEEN\
    \ and\n      EIGHT.BIT.TRANSPARENT and deselect the feature called\n      TAGGED.SOLICITED.\
    \  The use of the SELECT.FEATURES command\n      completely resets the set of\
    \ selected features.  Note:  These are\n      only example feature names and are\
    \ not necessarily supported by\n      any server.  See the appendix on features\
    \ for more information on\n      features.  Note:  Some features, when present\
    \ in the server, will\n      cause the upwards compatible extension of the grammar,\
    \ i.e., by\n      adding extra commands.  The server is at liberty not to remove\n\
    \      these upwards compatible extensions to the command tables when a\n    \
    \  feature is disabled.  Thus, it is an error for a client to rely on\n      getting\
    \ a NO or BAD response in any way, for instance to determine\n      the selectedness\
    \ or presence of a feature.\n   tag BBOARD bboard\n      The BBOARD command is\
    \ equivalent to SELECT, except that its\n      argument is a bulletin board (BBoard)\
    \ name.  The format of a\n      BBoard name is implementation specific, although\
    \ it is strongly\n      encouraged to use something that resembles a name in a\
    \ generic\n      sense and not a file or mailbox name on the particular system.\n\
    \      There is no requirement that a BBoard name be a mailbox name or a\n   \
    \   file name (in particular, Unix netnews has a completely different\n      namespace\
    \ from mailbox or file names).\n      The result from the BBOARD command is identical\
    \ from that of the\n      SELECT command.  For example, in the TOPS-20 server\n\
    \      implementation, the command\n         A0002 BBOARD FOO\n      is exactly\
    \ equivalent to the command\n         A0002 SELECT POBOX:<BBOARD>FOO.TXT\n   \
    \      Note: the equivalence in this example is *not* required by the\n      \
    \   protocol, and merely reflects the fuzzy distinction between\n         mailboxes\
    \ and BBoards on TOPS-20.\n   tag FIND (BBOARDS / MAILBOXES) pattern\n      The\
    \ FIND command accepts as arguments the keywords BBOARDS or\n      MAILBOXES and\
    \ a pattern which specifies some set of BBoard/mailbox\n      names which are\
    \ usable by the BBOARD/SELECT command.  Two wildcard\n      characters are defined;\
    \ \"*\" specifies that any number (including\n      zero) characters may match\
    \ at this position and \"%\" specifies that\n      a single character may match\
    \ at this position.  For example,\n      FOO*BAR will match FOOBAR, FOOD.ON.THE.BAR\
    \ and FOO.BAR, whereas\n      FOO%BAR will match only FOO.BAR; furthermore, \"\
    *\" will match all\n      BBoards/mailboxes.  The following quoting convention\
    \ applies to\n      wildcards: \"\\*\" is the literal \"*\" character, \"\\%\"\
    \ is the literal\n      \"%\" character and \"\\\\\" is the literal \"\\\" character.\
    \  Notes: The\n      format of mailboxes is server implementation dependent. \
    \ The\n      special mailbox name INBOX is not included in the output to the\n\
    \      FIND MAILBOXES command.\n      The FIND command solicits any number of\
    \ BBOARD or MAILBOX\n      responses from the server as appropriate.\n      Examples:\n\
    \          A0002 FIND BBOARDS *\n          A0002 BBOARD FOOBAR\n          A0002\
    \ BBOARD GENERAL\n          A0002 OK FIND completed\n      or\n          A0002\
    \ FIND MAILBOXES FOO%BA*\n          A0002 MAILBOX FOO.BAR\n          A0002 MAILBOX\
    \ FOO.BAZZAR\n          A0002 OK FIND completed\n      Note: Although the use\
    \ of explicit file or path names for\n      mailboxes is discouraged by this standard,\
    \ it may be unavoidable.\n      It is important that the value returned in the\
    \ MAILBOX solicited\n      reply be usable in the SELECT command without remembering\
    \ any path\n      specification which may have been used in the FIND MAILBOXES\n\
    \      pattern.\n   tag FLAGS\n      The FLAGS command solicits a FLAGS response\
    \ from the server.\n   tag SET.FLAGS flag_list\n      The SET.FLAGS command defines\
    \ the user specifiable flags for this\n      mailbox, i.e., the keywords.  If\
    \ this set does not include flags\n      formerly sent to the client by the server\
    \ in a FLAGS message then\n      this constitutes a request to delete the flag.\
    \  Any new flags\n      should be created.  This command does not affect the system\n\
    \      defined flags and any system flags that are included in the\n      flag_list\
    \ will be ignored.  The server must respond to this\n      command with a solicited\
    \ FLAGS message.  If the deletion of a flag\n      results in the invalidation\
    \ of the flag sets of any messages then\n      the server is required to send\
    \ solicited STORE FLAGS messages to\n      the client for each modified message.\n"
- title: 'Responses:'
  contents:
  - "Responses:\n   */tag OK text\n      In its solicited form this response identifies\
    \ successful\n      completion of the command with the indicated tag.  The text\
    \ is a\n      line of human-readable text which may be useful in a protocol\n\
    \      telemetry log for debugging purposes.\n      In its unsolicited form, this\
    \ response indicates simply that the\n      server is alive.  No special action\
    \ on the part of the client is\n      called for.  This is presently only used\
    \ by servers at startup as\n      a greeting message indicating that they are\
    \ ready to accept the\n      first command.  This usage, although legal, is by\
    \ no means\n      required.  The text is a line of human-readable text which may\
    \ be\n      logged in protocol telemetry.\n   */tag NO text\n      In its solicited\
    \ form this response identifies unsuccessful\n      completion of the command\
    \ with the indicated tag.  The text is a\n      line of human-readable text which\
    \ probably should be displayed to\n      the user in an error report by the client.\n\
    \      In its unsolicited form this response indicates some operational\n    \
    \  error at the server which cannot be traced to any protocol\n      command.\
    \  The text is a line of human-readable text which should\n      be logged in\
    \ protocol telemetry for the maintainer of the server\n      and/or the client.\n\
    \   */tag BAD text\n      In its solicited form response indicates faulty protocol\
    \ received\n      from the client and indicates a bug.  The text is a line of\n\
    \      human-readable text which should be recorded in any telemetry as\n    \
    \  part of a bug report to the maintainer of the client.\n      In its unsolicited\
    \ form response indicates some protocol error at\n      the server which cannot\
    \ be traced to any protocol command.  The\n      text is a line of human-readable\
    \ text which should be logged in\n      protocol telemetry for the maintainer\
    \ of the server and/or the\n      client.  This generally indicates a protocol\
    \ synchronization\n      problem, and examination of the protocol telemetry is\
    \ advised to\n      determine the cause of the problem.\n   */tag BYE text\n \
    \     This indicates that the server is about to close the connection.\n     \
    \ The text is a line of human-readable text which should be\n      displayed to\
    \ the user in a status report by the client.  IMAP2\n      requires that the server\
    \ emit a solicited BYE response as part of\n      a normal logout sequence.  This\
    \ solicited form is not required\n      under IMAP3, though is still legal for\
    \ compatibility.  In its\n      unsolicited form the BYE response is used as a\
    \ panic shutdown\n      announcement by the server.  It is required to be used\
    \ by any\n      server which performs autologouts due to inactivity.\n   */tag\
    \ number message_data\n      The solicited (tag number message_data) response\
    \ is generated as\n      the result of a number of client requests.  The server\
    \ may also\n      emit any the following at any time as unsolicited data (i.e.,\
    \ *\n      number message_data).  The message_data is one of the following:\n\
    \      EXISTS  The specified number of messages exists in the mailbox.\n     \
    \ RECENT  The specified number of messages have arrived since the\n          \
    \    last time this mailbox was selected with the SELECT\n              command\
    \ or equivalent.\n      EXPUNGE The specified message number has been permanently\n\
    \              removed from the mailbox, and the next message in the\n       \
    \       mailbox (if any) becomes that message number.\n             The server\
    \ must send a solicited EXPUNGE response\n             for each message that it\
    \ expunges as the result\n             of an EXPUNGE command.  Note: future versions\
    \ of the\n             protocol may allow the use of a message sequence\n    \
    \         as a value returned by the EXPUNGE response to allow the\n         \
    \    more efficient compaction of client representations of\n             mailboxes.\n\
    \      STORE data\n             Functionally equivalent to FETCH, only it is sent\
    \ by the\n             server when the state of a mailbox changes.  The server\n\
    \             must send solicited STORE responses as the result of\n         \
    \    any change caused by a STORE command.\n      FETCH data\n              This\
    \ is the principle means by which data about a\n              message is sent\
    \ to the client.  The data is in a\n              Lisp-like S-expression property\
    \ list form.  Just as the\n              FETCH request from the client can fetch\
    \ any generic,\n              canonical or concrete key, so also the FETCH response\n\
    \              can return values for any of these keys as well as for\n      \
    \        the pre-defined attributes mentioned below.  Note that\n            \
    \  the server is permitted to send any unsolicited FETCH\n              or STORE\
    \ messages that it should choose, be they the\n              values associated\
    \ with generic, canonical or concrete\n              keys.  Clients are required\
    \ to ignore any such\n              FETCH responses that it cannot interpret.\
    \  For example,\n              clients are not required to be able to understand,\
    \ i.e.,\n              use fruitfully, the canonical $TO key, but they are\n \
    \             required to be able to ignore an unsolicited $TO message\n     \
    \         correctly.\n         ENVELOPE     An S-expression format list which\
    \ describes the\n                      envelope of a message.  The envelope is\
    \ computed\n                      by the server by parsing the RFC 822 header\
    \ into\n                      the component parts, defaulting various fields\n\
    \                      as necessary.\n                      The fields of the\
    \ envelope are in the following\n                      order: date, subject, from,\
    \ sender, reply-to, to,\n                      cc, bcc, in-reply-to, and message-id.\
    \  The date,\n                      subject, in-reply-to, and message-id fields\
    \ are\n                      strings.  The from, sender, reply-to, to, cc,\n \
    \                     and bcc fields are lists of addresses.\n               \
    \       An address is an S-expression format list which\n                    \
    \  describes an electronic mail address.  The fields\n                      of\
    \ an address are in the following order:\n                      personal name,\
    \ source-route (i.e., the\n                      at-domain-list in SMTP), mailbox\
    \ name, host name\n                      and comments.  Implementation note: \
    \ The addition\n                      of the comment field is an incompatible\
    \ extension\n                      from IMAP2.  The server is required not to\
    \ provide\n                      this field when running in IMAP2 mode.\n    \
    \                  Any field of an envelope or address which is\n            \
    \          not applicable is presented as the atom NIL.\n                    \
    \  Note that the server must default the reply-to\n                      and sender\
    \ fields from the from field; a client is\n                      not expected\
    \ to know to do this.\n         FLAGS        An S-expression format list of flags\
    \ which are set\n                      for this message.  This may include the\
    \ following\n                      system flags:\n                      \\RECENT\
    \       Message arrived since last\n                                     read\
    \ of this mailbox\n                      \\SEEN         Message has been read\n\
    \                      \\ANSWERED     Message has been answered\n            \
    \          \\FLAGGED      Message is \"flagged\" for\n                       \
    \              urgent/special attention\n                      \\DELETED     \
    \ Message is \"deleted\" for\n                                     removal by\
    \ later EXPUNGE\n         INTERNALDATE  A string containing the date and time\
    \ the\n                       message was written to the mailbox.\n         RFC822\
    \        A string expressing the message in RFC 822\n                       format.\n\
    \                      Note: Some implementations of IMAP2 servers\n         \
    \             had the (undocumented) behavior of setting\n                   \
    \   the \\SEEN flag as a side effect of fetching\n                      the body\
    \ of a message.  This resulted in\n                      erroneous behavior for\
    \ clients that prefetch\n                      messages that the user might not\
    \ get\n                      around to reading.  Thus, this behavior is\n    \
    \                  explicitly disallowed in IMAP3.\n                      Note:\
    \ this is not a significant performance\n                      restriction because\
    \ it is always possible for\n                      IMAP3 clients to use an interaction\
    \ with the\n                      server of the following type:\n            \
    \          A001 FETCH 42 RFC822\n                      A002 STORE 42 +FLAGS (\\\
    SEEN)\n                      A001 42 FETCH RFC822 {637} ......\n             \
    \         A001 OK Fetch completed\n                      A002 42 STORE FLAGS (\\\
    SEEN \\FLAGGED...)\n                      A002 OK Store Completed.\n         RFC822.HEADER\
    \ A string expressing the RFC 822 format\n                       header of the\
    \ message\n         RFC822.SIZE   A number indicating the number of\n        \
    \               characters in the message as expressed\n                     \
    \  in RFC 822 format.\n         RFC822.TEXT   A string expressing the text body\
    \ of the\n                       message, omitting the RFC 822 header.\n     \
    \                 See also note for RFC822.\n   */tag FLAGS flag_list\n      A\
    \ solicited FLAGS response must occur as a result of a SELECT\n      command.\
    \  The flag list is the list of flags (at a minimum, the\n      IMAP defined flags)\
    \ which are applicable for this mailbox.  Flags\n      other than the system flags\
    \ are a function of the server\n      implementation.\n   */tag SEARCH (numbers)\
    \ (search_criteria)\n      This response occurs as a result of a SEARCH command.\
    \  The\n      number(s) refer to those messages which match the search criteria.\n\
    \      In its solicited form this message allows clients to find\n      interesting\
    \ groups of messages, e.g., unseen messages from\n      Crispin.  In its unsolicited\
    \ form it allows the server to inform\n      the client of interesting patterns,\
    \ e.g., when new mail arrives,\n      recent and from Crispin.  Compatibility\
    \ note:  The search_criteria\n      are sent by the server along with the matching\
    \ numbers so\n      unsolicited SEARCH messages may be interpreted.  This syntax\
    \ is\n      not upwards compatible with IMAP2 and so the new syntax is\n     \
    \ intended to make it simple for clients that are not able to take\n      advantage\
    \ of unsolicited SEARCH messages still to interpret\n      solicited SEARCH messages\
    \ simply by ignoring everything that\n      follows the list of numbers with minimal\
    \ parsing.  Such clients\n      may not, however, simply discard the rest of the\
    \ line because\n      there might be LITERALs in the search pattern.\n      Examples:\n\
    \         A00042 SEARCH (2 3 6) (FROM Crispin ~SEEN)\n      and\n         * SEARCH\
    \ (42) (FROM Crispin RECENT)\n   */tag READONLY\n      This indicates that the\
    \ mailbox is read-only.  The server is\n      required to respond to a READONLY\
    \ or READWRITE command with either\n      a solicited READONLY or a solicited\
    \ READWRITE response.  Note:  If\n      the client attempts a mutation operation,\
    \ such as STORE, on a\n      mailbox to which it does not have write access then\
    \ the server is\n      required to reply with a solicited READONLY response on\
    \ the first\n      such attempted mutation.  The server may also choose to send\n\
    \      solicited READONLY responses for each subsequent attempted\n      mutation.\n\
    \   */tag READWRITE\n      This indicates that the mailbox is read-write.  The\
    \ server is\n      required to respond to a READONLY or READWRITE command with\
    \ either\n      a solicited READONLY or a solicited READWRITE response.\n   */tag\
    \ BBOARD bboard_name\n      This message is produced in its solicited form as\
    \ a response to a\n      FIND BBOARDS command.  In its unsolicited form it represents\
    \ a\n      notification by the server that a new BBoard has been added.\n    \
    \  Bboard_name must be a name that can be supplied to the BBOARD\n      command\
    \ so as to select the appropriate bboard.\n   */tag MAILBOX non_inbox_mailbox_name\n\
    \      This message is produced in its solicited form as a response to a\n   \
    \   FIND MAILBOXES command.  In its unsolicited form it represents a\n      notification\
    \ by the server that a new mailbox has been added,\n      perhaps as the result\
    \ of a COPY command creating a new mailbox.\n      Non_inbox_mailbox_name must\
    \ be a name that can be supplied to the\n      SELECT command so as to select\
    \ the appropriate mailbox.  Note:\n      non_inbox_mailbox_name is never the string\
    \ \"INBOX\".\n   */tag SUPPORTED.VERSIONS (version_specs)\n      This message\
    \ is used either as a response to the\n      SUPPORTED.VERSIONS or, in its unsolicited\
    \ form, to indicate the\n      dynamic addition or removal of support for features\
    \ or protocol\n      versions.  Each version_spec is of the form (4 2\n      EIGHT.BIT.TRANSPARENT\
    \ AUTO.SET.SEEN ...), i.e., a major version\n      number and a minor version\
    \ number for the protocol and the set of\n      features supported under the server's\
    \ implementation of that\n      protocol version.  A server may not dynamically\
    \ remove support for\n      any version or feature that has been selected by any\
    \ currently\n      logged in client by the use of the VERSION command.\n     \
    \ Example:\n        A00005 SUPPORTED.VERSIONS ((2 0 )\n              (2 2 TAGGED.SOLICITED)\n\
    \              (3 0 EIGHT.BIT.TRANSPARENT TAGGED.SOLICITED))\n      Indicates\
    \ that two major versions are supported and one minor\n      version is supported\
    \ and that tagged solicited messages are\n      supported in versions 2.2 and\
    \ 3.0 with eight bit characters being\n      supported under version 3.  For each\
    \ feature mentioned in the list\n      of features there is also always the negation\
    \ of that feature.\n      For example, if the server supports the TAGGED.SOLICITED\
    \ feature\n      then it also supports the ~TAGGED.SOLICITED feature, which\n\
    \      disables this feature.  Note:  These are only example feature\n      names\
    \ and are not necessarily supported by any server.  See the\n      appendix on\
    \ features for more information on features.\n   + text\n      This response indicates\
    \ that the server is ready to accept the\n      text of a literal from the client.\
    \  Normally, a command from the\n      client is a single text line.  If the server\
    \ detects an error in\n      the command, it can simply discard the remainder\
    \ of the line.  It\n      cannot do this in the case of commands which contain\
    \ literals,\n      since a literal can be an arbitrarily long amount of text,\
    \ and the\n      server may not even be expecting a literal.  This mechanism is\n\
    \      provided so the client knows not to send a literal until the\n      server\
    \ definitely expects it, preserving client/server\n      synchronization.\n  \
    \    In actual practice, this situation is rarely encountered.  In the\n     \
    \ current protocol, the only client commands likely to contain\n      literals\
    \ are the LOGIN command and the STORE RFC822.HEADER or\n      STORE RFC822.TEXT\
    \ commands.  Consider a situation in which a\n      server validates the user\
    \ before checking the password.  If the\n      password contains \"funny\" characters\
    \ and hence is sent as a\n      literal, then if the user is invalid an error\
    \ would occur before\n      the password is parsed.\n      No such synchronization\
    \ protection is provided for literals sent\n      from the server to the client,\
    \ for performance reasons.  Any\n      synchronization problems in this direction\
    \ would be due to a bug\n      in the client or server and not for some operational\
    \ problem.\n"
- title: Sample IMAP3 session
  contents:
  - "Sample IMAP3 session\n   The following is a transcript of an actual IMAP3 session.\
    \  Server\n   output is identified by \"S:\" and client output by \"U:\".  In\
    \ cases\n   where lines were too long to fit within the boundaries of this\n \
    \  document, the line was continued on the next line preceded by a tab.\n   S:\
    \     * OK SUMEX-AIM.Stanford.EDU Interactive Mail Access Protocol\n         \
    \         III Service 6.1(349) at Mon, 14 May 90 14:58:30 PDT\n   U:     a001\
    \ SUPPORTED.VERSIONS\n   S:     * SUPPORTED.VERSIONS ((2 0 ) (3 0 EIGHT.BIT.TRANSPARENT\n\
    \                     AUTO.SET.SEEN TAGGED.SOLICITED))\n   S:     A001 Supported\
    \ Versions returned.\n   U:     a002 SELECT.VERSION (3 0)\n   S:     a002 OK Version\
    \ 3.0 Selected.\n   U:     a003 SELECT.FEATURES TAGGED.SOLICITED\n   S:     a003\
    \ OK Features selected.\n   U:     a004 login crispin secret\n   S:     a004 OK\
    \ User CRISPIN logged in at Thu, 9 Jun 90 14:58:42 PDT,\n                  job\
    \ 76\n   U:     a005 select inbox\n   S:     a005 FLAGS (Bugs SF Party Skating\
    \ Meeting Flames Request AI\n                  Question Note \\XXXX \\YYYY \\\
    Answered \\Flagged \\Deleted\n                  \\Seen)\n   S:     a005 16 EXISTS\n\
    \   S:     a005 0 RECENT\n   S:     a006 OK Select complete\n   U:     a006 fetch\
    \ 16 all\n   S:     a006 16 Fetch (Flags (\\Seen) InternalDate \" 9-Jun-88 12:55:\n\
    \              RFC822.Size 637 Envelope (\"Sat, 4 Jun 88 13:27:11 PDT\"\n    \
    \          \"INFO-MAC Mail Message\" ((\"Larry Fagan\" NIL \"FAGAN\"\n       \
    \       \"SUMEX-AIM.Stanford.EDU\" NIL)) ((\"Larry Fagan\" NIL \"FAGAN\"\n   \
    \           \"SUMEX-AIM.Stanford.EDU\" NIL)) ((\"Larry Fagan\" NIL \"FAGAN\"\n\
    \              \"SUMEX-AIM.Stanford.EDU\" NIL)) ((NIL NIL \"rindflEISCH\"\n  \
    \            \"SUMEX-AIM.Stanford.EDU\" NIL)) NIL NIL NIL\n              \"<12403828905.13.FAGAN@SUMEX-AIM.Stanford.EDU>\"\
    ))\n   S:  a006 OK Fetch completed\n   U:  a007 fetch 16 rfc822\n   S:  a007 16\
    \ Fetch (RFC822 {637}\n   S:  Mail-From: RINDFLEISCH created at  9-Jun-88 12:55:43\n\
    \   S:  Mail-From: FAGAN created at  4-Jun-88 13:27:12\n   S:  Date: Sat, 4 Jun\
    \ 88 13:27:11 PDT\n   S:  From: Larry Fagan  <FAGAN@SUMEX-AIM.Stanford.EDU>\n\
    \   S:  To: rindflEISCH@SUMEX-AIM.Stanford.EDU\n   S:  Subject: INFO-MAC Mail\
    \ Message\n   S:  Message-ID: <12403828905.13.FAGAN@SUMEX-AIM.Stanford.EDU>\n\
    \   S:  ReSent-Date: Thu, 9 Jun 88 12:55:43 PDT\n   S:  ReSent-From: TC Rindfleisch\
    \ <Rindfleisch@SUMEX-AIM.Stanford.EDU>\n   S:  ReSent-To: Yeager@SUMEX-AIM.Stanford.EDU,\n\
    \                  Crispin@SUMEX-AIM.Stanford.EDU\n   S:  ReSent-Message-ID:\n\
    \          <12405133897.80.RINDFLEISCH@SUMEX-AIM.Stanford.EDU>\n   S:\n   S: \
    \ The file is <info-mac>usenetv4-55.arc  ...\n   S:  Larry\n   S:  -------\n \
    \  S:  )\n   S:  a007 OK Fetch completed\n   U:  a008 logout\n   S:  a008 BYE\
    \ UNIX IMAP III server terminating connection\n   S:  a008 OK SUMEX-AIM.Stanford.EDU\
    \ Interim Mail Access Protocol\n                  Service logout\n"
- title: Implementation Discussion
  contents:
  - "Implementation Discussion\n   As of this writing, SUMEX has completed an IMAP2\
    \ client for Xerox\n   Lisp machines written in hybrid Interlisp/CommonLisp and\
    \ is beginning\n   distribution of a client for TI Explorer Lisp machines.  SUMEX\
    \ has\n   also completed a portable IMAP2 client protocol library module\n   written\
    \ in C.  This library, with the addition of a small main\n   program (primarily\
    \ user interface) and a TCP/IP driver, became a\n   rudimentary remote system\
    \ mail-reading program under Unix.  The first\n   production use of this library\
    \ is as a part of a MacII client which\n   has now been under daily use (by real\
    \ users) at Stanford for quite\n   some time.\n   As of this writing, SUMEX has\
    \ completed IMAP2 servers for TOPS-20\n   written in DEC-20 assembly language\
    \ and 4.2/3 BSD Unix written in C.\n   The TOPS-20 server is fully compatible\
    \ with MM-20, the standard\n   TOPS-20 mailsystem, and requires no special action\
    \ or setup on the\n   part of the user.  The INBOX under TOPS-20 is the user's\
    \ MAIL.TXT.\n   The TOPS-20 server also supports multiple simultaneous access\
    \ to the\n   same mailbox, including simultaneous access between the IMAP3 server\n\
    \   and MM-20.  The 4.2/3 BSD Unix server requires that the user use\n   either\
    \ Unix Mail format or mail.txt format which is compatible with\n   SRI MM-32 or\
    \ Columbia MM-C.  The 4.2/3 BSD Unix server allows\n   simultaneous read access;\
    \ write access must be exclusive.  There is\n   also an experimental IMAP3 server\
    \ running on the TI Explorer class of\n   machine, which uses MM mailbox format\
    \ and which can communicate over\n   both TCP and Chaos.\n   The Xerox Lisp client\
    \ and DEC-20 server have been in production use\n   for over two years; the Unix\
    \ server was been in production use for\n   over a year.  IMAP3 has been used\
    \ to access mailboxes at remote sites\n   from a local workstation via the Internet.\
    \  For example, from the\n   Stanford local network one of the authors has read\
    \ his mailbox at a\n   Milnet site.\n   A number of IMAP clients have now been\
    \ developed or are being\n   developed.  Amongst these are versions that run on\
    \ the following\n   machines:\n    . Xerox Lisp machines\n    . Apple Macintosh\n\
    \    . NeXT\n    . IBM PC\n    . TI Explorer Lisp machines\n    . \"Glass teletype\"\
    \ version that runs under Unix\n    . GNU Emacs\n    . X Windows\n    . NTT ELIS\n\
    \   Each of these client programs is carefully tuned to optimize the\n   performance\
    \ and user interface in a manner that is consistent with\n   the the user interface\
    \ model of the native machine.  For example, the\n   Macintosh client features\
    \ a \"messy-desk\" interface that allows the\n   cutting and pasting of text with\
    \ the use of the clipboard with a menu\n   driven interface with keyboard accelerators.\n\
    \   This specification does not make any formal definition of size\n   restrictions,\
    \ but some of the existing servers have the following\n   limitations:\n   DEC-20\n\
    \    . length of a mailbox: 7,077,888 characters\n    . maximum number of messages:\
    \ 18,432 messages\n    . length of a command line: 10,000 characters\n    . length\
    \ of the local host name: 64 characters\n    . length of a \"short\" argument:\
    \ 39 characters\n    . length of a \"long\" argument: 491,520 characters\n   \
    \ . maximum amount of data output in a single fetch:\n      655,360 characters\n\
    \   TI-Explorer\n    . length of a mailbox: limited by the Minimum of the size\
    \ of the\n      virtual address space and the size of the file system\n    . maximum\
    \ number of messages: limited by the the size of the\n      virtual address space\n\
    \    . length of a command line: limited by the the size of the\n      virtual\
    \ address space\n    . length of the local host name: limited by the the size\
    \ of the\n      virtual address space\n    . length of a \"short\" argument: limited\
    \ by the the size of the\n      virtual address space\n    . length of a \"long\"\
    \ argument: limited by the the size of the\n      virtual address space\n    .\
    \ maximum amount of data output in a single fetch: not limited\n   Typical values\
    \ for these limits are 30Mb for file systems and 128Mb\n   for virtual address\
    \ space.\n   To date, nobody has run up against any of these limitations, many\
    \ of\n   which are substantially larger than most current user mail reading\n\
    \   programs.\n   There are several advantages to the scheme of tags and solicited\n\
    \   responses and unsolicited data.  First, the infamous synchronization\n   problems\
    \ of SMTP and similar protocols do not happen with tagged\n   commands; a command\
    \ is not considered satisfied until a completion\n   acknowledgement with the\
    \ same tag is seen.  Tagging allows an\n   arbitrary amount of other responses\
    \ (\"solicited\" data) to be sent by\n   the server with no possibility of the\
    \ client losing synchronization.\n   Compare this with the problems that FTP or\
    \ SMTP clients have with\n   continuation, partial completion, and commentary\
    \ reply codes.\n   Another advantage is that a non-lockstep client implementation\
    \ is\n   possible.  The client could send a command, and entrust the handling\n\
    \   of the server responses to a different process which would signal the\n  \
    \ client when the tagged response comes in.  Some clients might be\n   implemented\
    \ in a thoroughly asynchronous manner, having, perhaps,\n   multiple outstanding\
    \ commands at any given time.  Note:  this does\n   not require that the server\
    \ process these commands in anything other\n   than a lock-step manner.  It simply\
    \ allows clients to take advantage\n   of servers that are able to do such asynchronous\
    \ operations.\n   It was observed that synchronization problems can occur with\
    \ literals\n   if the literal is not recognized as such.  Fortunately, the cases\
    \ in\n   which this can happen are relatively rare; a mechanism (the special\n\
    \   \"+\" tag response) was introduced to handle those few cases which\n   could\
    \ happen.  The proper way to address this problem in all cases is\n   probably\
    \ to move towards a record-oriented architecture instead of\n   the text stream\
    \ model provided by TCP.\n   Unsolicited data needs some discussion.  Unlike most\
    \ protocols, in\n   which the server merely does the client's bidding, an IMAP3\
    \ server\n   has a semi-autonomous role.  By means of sending \"unsolicited data\"\
    ,\n   the server is in effect sending a command to the client -- to update\n \
    \  and/or extend its (incomplete) model of the mailbox with new\n   information\
    \ from the server.  In this viewpoint, although a \"fetch\"\n   command is a request\
    \ for specific information from the client, the\n   server is always at liberty\
    \ to include more than the desired data as\n   \"unsolicited\".  A server acknowledgement\
    \ to the \"fetch\" is a\n   statement that at least all the requested data has\
    \ been sent.\n   In terms of implementation, a simple lock-step client may have\
    \ a\n   local cache of data from the mailbox.  This cache is incomplete in\n \
    \  general, and at select time is empty.  A listener on the IMAP\n   connection\
    \ in the client processes all solicited and unsolicited data\n   symmetrically,\
    \ and updates the cache based on this data, i.e., the\n   client faults on a cache\
    \ miss and asks the server to fill that cache\n   slot synchronously.  If a tagged\
    \ completion response arrives, the\n   listener unblocks the process which sent\
    \ the tagged request.\n   Clearly, given this model it is not strictly necessary\
    \ to distinguish\n   most solicited from unsolicited data.  Doing so, however,\
    \ apart from\n   being clearer, also allows such simplistic, lock-step client\n\
    \   implementations that extract the specific value of the response to\n   command\
    \ by trapping the tagged response.  This allows the client not\n   to have to\
    \ block on some complex predicate that involves watching to\n   see an update\
    \ in a cache cell.\n   For example, perhaps as a result of opening a mailbox,\
    \ solicited data\n   from the server arrives.  The first piece of data is the\
    \ number of\n   messages.  This is used to size the cache; note that, if new mail\n\
    \   arrives, by sending a new \"number of messages\" unsolicited data\n   message\
    \ server will cause the cache to be re-sized.  If the client\n   attempts to access\
    \ information from the cache, it will encounter\n   empty spots which will trigger\
    \ \"fetch\" requests.  The request would\n   be sent, some solicited data including\
    \ the answer to the fetch will\n   flow back, and then the \"fetch\" response\
    \ will unblock the client.\n   People familiar with demand-paged virtual memory\
    \ design will\n   recognize this model as being very similar to page-fault handling\
    \ on\n   a demand-paged system.\n"
- title: Formal Syntax
  contents:
  - "Formal Syntax\n   The following syntax specification uses the augmented Backus-Naur\n\
    \   Form (BNF) notation as specified in RFC 822 with one exception; the\n   delimiter\
    \ used with the \"#\" construct is a single space (SP) and not\n   a comma.\n"
- title: address         ::= "(" addr_name SP addr_adl SP addr_mailbox SP
  contents:
  - "address         ::= \"(\" addr_name SP addr_adl SP addr_mailbox SP\n        \
    \            addr_host addr_comment \")\"\n"
- title: addr_adl        ::= nil / string
  contents:
  - 'addr_adl        ::= nil / string

    '
- title: addr_comment    ::= nil / string
  contents:
  - 'addr_comment    ::= nil / string

    '
- title: addr_host       ::= nil / string
  contents:
  - 'addr_host       ::= nil / string

    '
- title: addr_mailbox    ::= nil / string
  contents:
  - 'addr_mailbox    ::= nil / string

    '
- title: addr_name       ::= nil / string
  contents:
  - 'addr_name       ::= nil / string

    '
- title: bboard          ::= "BBOARD" SP bboard_name
  contents:
  - 'bboard          ::= "BBOARD" SP bboard_name

    '
- title: bboard_name     ::= string
  contents:
  - 'bboard_name     ::= string

    '
- title: bboard_notify   ::= "BBOARD" sp bboard_name
  contents:
  - 'bboard_notify   ::= "BBOARD" sp bboard_name

    '
- title: canonical_key   ::= "$CC" /  "$FROM" / "$SUBJECT" / "$TO"
  contents:
  - 'canonical_key   ::= "$CC" /  "$FROM" / "$SUBJECT" / "$TO"

    '
- title: check           ::= "CHECK"
  contents:
  - 'check           ::= "CHECK"

    '
- title: concrete_key    ::= string
  contents:
  - 'concrete_key    ::= string

    '
- title: copy            ::= "COPY" SP sequence SP mailbox
  contents:
  - 'copy            ::= "COPY" SP sequence SP mailbox

    '
- title: criterion       ::= "ALL" / "ANSWERED" /
  contents:
  - "criterion       ::= \"ALL\" / \"ANSWERED\" /\n                    \"BCC\" SP\
    \ string / \"BEFORE\" SP string /\n                    \"BODY\" SP string / \"\
    CC\" SP string / \"DELETED\" /\n                    \"FLAGGED\" / \"KEYWORD\"\
    \ SP atom / \"NEW\" / \"OLD\" /\n                    \"ON\" SP string / \"RECENT\"\
    \ / \"SEEN\" /\n                    \"SINCE\" SP string / \"TEXT\" SP string /\n\
    \                    \"TO\" SP string / \"UNANSWERED\" / \"UNDELETED\" /\n   \
    \                 \"UNFLAGGED\" / \"UNKEYWORD\" / \"UNSEEN\" / key SP string\n"
- title: criteria        ::= 1#criterion
  contents:
  - 'criteria        ::= 1#criterion

    '
- title: data            ::= ("FLAGS" SP flag_list /
  contents:
  - "data            ::= (\"FLAGS\" SP flag_list /\n                  search_notify\
    \ / bboard_notify / mailbox_notify /\n                  supported_versions_notify\
    \ / \"READONLY\" / \"READWRITE\" /\n                    \"BYE\" SP text_line /\
    \ \"OK\" SP text_line /\n                    \"NO\" SP text_line / \"BAD\" SP\
    \ text_line)\n"
- title: date            ::= string in form "dd-mmm-yy hh:mm:ss-zzz"
  contents:
  - 'date            ::= string in form "dd-mmm-yy hh:mm:ss-zzz"

    '
- title: envelope        ::= "(" env_date SP env_subject SP env_from SP
  contents:
  - "envelope        ::= \"(\" env_date SP env_subject SP env_from SP\n          \
    \          env_sender SP env_reply-to SP env_to SP\n                    env_cc\
    \ SP env_bcc SP env_in-reply-to SP\n                    env_message-id \")\"\n"
- title: env_bcc         ::= nil / "(" 1*address ")"
  contents:
  - 'env_bcc         ::= nil / "(" 1*address ")"

    '
- title: env_cc          ::= nil / "(" 1*address ")"
  contents:
  - 'env_cc          ::= nil / "(" 1*address ")"

    '
- title: env_date        ::= string
  contents:
  - 'env_date        ::= string

    '
- title: env_from        ::= nil / "(" 1*address ")"
  contents:
  - 'env_from        ::= nil / "(" 1*address ")"

    '
- title: env_in-reply-to ::= nil / string
  contents:
  - 'env_in-reply-to ::= nil / string

    '
- title: env_length      ::= NUMBER
  contents:
  - 'env_length      ::= NUMBER

    '
- title: env_message-id  ::= nil / string
  contents:
  - 'env_message-id  ::= nil / string

    '
- title: env_reply-to    ::= nil / "(" 1*address ")"
  contents:
  - 'env_reply-to    ::= nil / "(" 1*address ")"

    '
- title: env_sender      ::= nil / "(" 1*address ")"
  contents:
  - 'env_sender      ::= nil / "(" 1*address ")"

    '
- title: env_subject     ::= nil / string
  contents:
  - 'env_subject     ::= nil / string

    '
- title: env_to          ::= nil / "(" 1*address ")"
  contents:
  - 'env_to          ::= nil / "(" 1*address ")"

    '
- title: expunge         ::= "EXPUNGE"
  contents:
  - 'expunge         ::= "EXPUNGE"

    '
- title: feature         ::= ATOM
  contents:
  - 'feature         ::= ATOM

    '
- title: fetch           ::= "FETCH" SP sequence SP ("ALL" / "FAST" /
  contents:
  - "fetch           ::= \"FETCH\" SP sequence SP (\"ALL\" / \"FAST\" /\n        \
    \            fetch_att / \"(\" 1#fetch_att \")\")\n"
- title: fetch_att       ::= "ENVELOPE" / "FLAGS" / "INTERNALDATE" /
  contents:
  - "fetch_att       ::= \"ENVELOPE\" / \"FLAGS\" / \"INTERNALDATE\" /\n         \
    \           \"RFC822\" / \"RFC822.HEADER\" / \"RFC822.SIZE\" /\n             \
    \       \"RFC822.TEXT\" / key\n"
- title: find            ::= "FIND" ("BBOARDS" / "MAILBOXES") pattern
  contents:
  - 'find            ::= "FIND" ("BBOARDS" / "MAILBOXES") pattern

    '
- title: flag_list       ::= ATOM / "(" 1#ATOM ")"
  contents:
  - 'flag_list       ::= ATOM / "(" 1#ATOM ")"

    '
- title: flags           ::= "FLAGS"
  contents:
  - 'flags           ::= "FLAGS"

    '
- title: generic_key     ::= "BCC" / "BODY" / "CC" / "FROM" / "HEADER" / "SIZE" /
  contents:
  - "generic_key     ::= \"BCC\" / \"BODY\" / \"CC\" / \"FROM\" / \"HEADER\" / \"\
    SIZE\" /\n                    \"SUBJECT\" / \"TEXT\" / \"TO\"\n"
- title: key             ::= generic_key / canonical_key / concrete_key
  contents:
  - 'key             ::= generic_key / canonical_key / concrete_key

    '
- title: literal         ::= "{" NUMBER "}" CRLF ASCII-STRING
  contents:
  - 'literal         ::= "{" NUMBER "}" CRLF ASCII-STRING

    '
- title: login           ::= "LOGIN" SP userid SP password
  contents:
  - 'login           ::= "LOGIN" SP userid SP password

    '
- title: logout          ::= "LOGOUT"
  contents:
  - 'logout          ::= "LOGOUT"

    '
- title: mailbox         ::= "INBOX" / string
  contents:
  - 'mailbox         ::= "INBOX" / string

    '
- title: mailbox_notify ::= MAILBOX non_inbox_mailbox_name
  contents:
  - 'mailbox_notify ::= MAILBOX non_inbox_mailbox_name

    '
- title: msg_copy        ::= "COPY"
  contents:
  - 'msg_copy        ::= "COPY"

    '
- title: msg_data        ::= (msg_exists / msg_recent / msg_expunge /
  contents:
  - "msg_data        ::= (msg_exists / msg_recent / msg_expunge /\n              \
    \      msg_fetch / msg_copy)\n"
- title: msg_exists      ::= "EXISTS"
  contents:
  - 'msg_exists      ::= "EXISTS"

    '
- title: msg_expunge     ::= "EXPUNGE"
  contents:
  - 'msg_expunge     ::= "EXPUNGE"

    '
- title: msg_fetch       ::= ("FETCH" / "STORE") SP "(" 1#("ENVELOPE" SP
  contents:
  - "msg_fetch       ::= (\"FETCH\" / \"STORE\") SP \"(\" 1#(\"ENVELOPE\" SP\n   \
    \                  env_length envelope / \"FLAGS\" SP \"(\" 1#(recent_flag\n \
    \                    flag_list) \")\" / \"INTERNALDATE\" SP date /\n         \
    \            \"RFC822\" SP string / \"RFC822.HEADER\" SP string /\n          \
    \           \"RFC822.SIZE\" SP NUMBER / \"RFC822.TEXT\" SP\n                 \
    \    string / key SP string_list) \")\"\n"
- title: msg_recent      ::= "RECENT"
  contents:
  - 'msg_recent      ::= "RECENT"

    '
- title: msg_num         ::= NUMBER
  contents:
  - 'msg_num         ::= NUMBER

    '
- title: nil             ::= "NIL"
  contents:
  - 'nil             ::= "NIL"

    '
- title: non_inbox_mailbox_name ::= string
  contents:
  - 'non_inbox_mailbox_name ::= string

    '
- title: noop            ::= "NOOP"
  contents:
  - 'noop            ::= "NOOP"

    '
- title: numbers         ::= 1#NUMBER
  contents:
  - 'numbers         ::= 1#NUMBER

    '
- title: password        ::= string
  contents:
  - 'password        ::= string

    '
- title: pattern         ::= string
  contents:
  - 'pattern         ::= string

    '
- title: recent_flag     ::= "\RECENT"
  contents:
  - 'recent_flag     ::= "\RECENT"

    '
- title: read_only       ::= "READONLY"
  contents:
  - 'read_only       ::= "READONLY"

    '
- title: read_write      ::= "READWRITE"
  contents:
  - 'read_write      ::= "READWRITE"

    '
- title: ready           ::= "+" SP text_line
  contents:
  - 'ready           ::= "+" SP text_line

    '
- title: request         ::= tag SP (noop / login / logout / select / check /
  contents:
  - "request         ::= tag SP (noop / login / logout / select / check /\n      \
    \              expunge / copy / fetch / store / search /\n                   \
    \ select_version / select_features /\n                    supported_versions /\
    \ bboard / find /\n                    read_only / read_write / flags / set_flags\
    \ ) CRLF\n"
- title: response        ::= tag SP ("OK" / "NO" / "BAD") SP text_line CRLF
  contents:
  - 'response        ::= tag SP ("OK" / "NO" / "BAD") SP text_line CRLF

    '
- title: search          ::= "SEARCH" SP criteria
  contents:
  - 'search          ::= "SEARCH" SP criteria

    '
- title: search_notify   ::= "SEARCH" SP (numbers) SP (criteria)
  contents:
  - 'search_notify   ::= "SEARCH" SP (numbers) SP (criteria)

    '
- title: select          ::= "SELECT" SP mailbox
  contents:
  - 'select          ::= "SELECT" SP mailbox

    '
- title: select_features ::= "SELECT.FEATURES" 1#feature
  contents:
  - 'select_features ::= "SELECT.FEATURES" 1#feature

    '
- title: select_version  ::= "SELECT.VERSION" SP "(" NUMBER SP NUMBER ")"
  contents:
  - 'select_version  ::= "SELECT.VERSION" SP "(" NUMBER SP NUMBER ")"

    '
- title: sequence        ::= NUMBER / (NUMBER "," sequence) / (NUMBER ":"
  contents:
  - "sequence        ::= NUMBER / (NUMBER \",\" sequence) / (NUMBER \":\"\n      \
    \              sequence)\n"
- title: set_flags       ::= "SET.FLAGS" SP flag_list
  contents:
  - 'set_flags       ::= "SET.FLAGS" SP flag_list

    '
- title: solicited       ::= tag SP (msg_num SP msg_data / data /
  contents:
  - "solicited       ::= tag SP (msg_num SP msg_data / data /\n                  \
    \          solicited_only) CRLF\n"
- title: solicited_only  ::=                {None currently defined}
  contents:
  - 'solicited_only  ::=                {None currently defined}

    '
- title: store           ::= "STORE" SP sequence SP store_att
  contents:
  - 'store           ::= "STORE" SP sequence SP store_att

    '
- title: store_att       ::= ("+FLAGS" SP flag_list / "-FLAGS" SP flag_list /
  contents:
  - "store_att       ::= (\"+FLAGS\" SP flag_list / \"-FLAGS\" SP flag_list /\n  \
    \                  \"FLAGS\" SP flag_list / RFC822.TEXT SP string\n          \
    \          / RFC822.HEADER SP string / key SP string)\n"
- title: string          ::= atom / """" 1*character """" / literal
  contents:
  - 'string          ::= atom / """" 1*character """" / literal

    '
- title: string_list     ::= string / ("(" 1#string ")")
  contents:
  - 'string_list     ::= string / ("(" 1#string ")")

    '
- title: supported_versions ::= "SUPPORTED.VERSIONS"
  contents:
  - 'supported_versions ::= "SUPPORTED.VERSIONS"

    '
- title: supported_versions_notify ::= "SUPPORTED.VERSIONS" "(" 1#version_spec
  contents:
  - "supported_versions_notify ::= \"SUPPORTED.VERSIONS\" \"(\" 1#version_spec\n \
    \                             \")\"\n"
- title: system_flags    ::= "\ANSWERED" SP "\FLAGGED" SP "\DELETED" SP
  contents:
  - "system_flags    ::= \"\\ANSWERED\" SP \"\\FLAGGED\" SP \"\\DELETED\" SP\n   \
    \                 \"\\SEEN\"\n"
- title: tag             ::= atom
  contents:
  - 'tag             ::= atom

    '
- title: unsolicited     ::= "*" SP (msg_num SP msg_data / data) CRLF
  contents:
  - 'unsolicited     ::= "*" SP (msg_num SP msg_data / data) CRLF

    '
- title: userid          ::= string
  contents:
  - 'userid          ::= string

    '
- title: version_spec    ::= "(" NUMBER SP NUMBER SP 1#feature ")"
  contents:
  - 'version_spec    ::= "(" NUMBER SP NUMBER SP 1#feature ")"

    '
- title: 'Appendix: Features.'
  contents:
  - "Appendix: Features.\n   In this section we outline the standard features that\
    \ are supported\n   by all IMAP3 servers and identify those features which are\n\
    \   recommended or experimental.  For each of these features the default\n   setting\
    \ is specified.  This means that it is required of any server\n   that supports\
    \ a given feature to make the default enabledness of that\n   feature as is specified\
    \ below.  It is required that for each feature\n   supported by a server the inverse\
    \ feature should also be supported.\n   The inverse feature name shall always\
    \ be defined as the feature name\n   preceded by the \"~\" character.  Thus, the\
    \ AUTO.SET.SEEN feature is\n   disabled by the ~AUTO.SET.SEEN feature.\n   Required\
    \ Features:\n   AUTO.SET.SEEN - When this features is enabled (default is disabled),\n\
    \        the \\\\SEEN flag is set for all appropriate messages as a side\n   \
    \     effect of any of the following:\n            FETCH of RFC822\n         \
    \   FETCH of RFC822.TEXT\n            COPY\n        Justification:  This feature\
    \ is provided for the use of clients\n        that are unable to pipeline their\
    \ commands effectively and\n        communicate over high latency connections.\
    \  When disabled,\n        the server will not perform any such side effects.\
    \  This feature\n        is also provided so as to smooth the transition from\
    \ IMAP2 to\n        IMAP3.\n   TAGGED.SOLICITED - When this feature is enabled\
    \ (default is enabled\n        for IMAP3, disabled for IMAP2 mode), solicited\
    \ responses from\n        the server will have the tag specified by the client.\n\
    \        When this feature is disabled, solicited responses from the\n       \
    \ server will have the IMAP2 compatible tag \"*\", not the\n        tag specified\
    \ by the client.\n        Justification:  This feature is provided so as to smooth\
    \ the\n        transition from IMAP2 to IMAP3.\n   Recommended Features.\n   EIGHT.BIT.TRANSPARENT\
    \ - When this feature is enabled\n        (default is disabled), the server allows\
    \ the transparent\n        transmission of eight bit characters.  When this feature\
    \ is\n        disabled, the value of any bit other than the least significant\n\
    \        7 bits transmitted by the server is unspecified.  If this\n        feature\
    \ is enabled, the characters that compose all command\n        keywords specified\
    \ in the IMAP3 grammar and all feature names\n        use only their 7 least significant\
    \ bits.\n        Justification:  This feature is provided for the purpose of\n\
    \        supporting national character sets within messages, encoded\n       \
    \ languages such as Japanese Kanji characters and also of binary\n        data,\
    \ such as programs, graphics and sound.\n   NEW.MAIL.NOTIFY - When this feature\
    \ is enabled (default is\n        disabled for compatibility with the majority\
    \ of existing\n        IMAP2 servers), the server will notify the client of the\n\
    \        arrival of new mail in the currently selected mailbox\n        using\
    \ the appropriate RECENT and EXISTS unsolicited messages\n        without the\
    \ client needing to send periodic CHECK commands.\n        Justification:  This\
    \ feature is provided to allow clients to\n        switch off any periodic polling\
    \ strategy that they may use\n        to look for new mail.  Such polling unnecessarily\
    \ uses bandwidth\n        and can cause the interactive performance to degrade\
    \ because\n        the user can be kept waiting while some background process\n\
    \        is doing a CHECK.\n   SEND - When this feature is enabled (default is\
    \ disabled) a new\n        \"SEND\" command becomes available to the client. \
    \ The SEND\n        command instructs the server to send a message, rather\n \
    \       than requiring the client to use its own, local message\n        sending\
    \ capability, for example.  An example of of the\n        send command might be\
    \ as follows:\n            tag42 SEND RFC822 {2083}\n            From: James Rice\
    \ <Rice@Sumex-Aim.Stanford.Edu>\n            To:.....\n        If the server is\
    \ unable to parse the message being sent then\n        it is required to issue\
    \ a suitable NO notification to the client.\n        If the message cannot be\
    \ delivered for some reason then the\n        server should send a suitable message\
    \ to the FROM: address\n        of the message detailing the delivery failure.\n\
    \        When the SEND feature is enabled, the \"send\" production in\n      \
    \  the grammar is added and as defined below.  The \"send\"\n        request is\
    \ added to the list of requests in the request\n        production also as shown\
    \ below:\n   message_format  ::= RFC822\n   request         ::= tag SP (noop /\
    \ login / logout / select / check /\n                       expunge / copy / fetch\
    \ / store / search /\n                       select_version / select_features\
    \ /\n                       supported_versions / bboard / find /\n           \
    \            read_only / read_write / flags /\n                       set_flags\
    \ / send) CRLF\n   send            ::= SEND SP message_format SP string\n    \
    \    Justification:  This feature is provided so that mail can be\n        sent\
    \ by the same reliable server that is used for the storage\n        of mail. \
    \ This has, amongst others, the following benefits:\n        - Single process\
    \ clients need not be delayed by mail\n          transmission.\n        - Mail\
    \ sent by the client will have the server named as the\n          message's sender.\
    \  This can be important because there are\n          a lot of mailers that erroneously\
    \ cause reply mail to be\n          sent to the Sender, not the From or Reply-To\
    \ address.  Since\n          the client in general is not listening for mail being\
    \ sent\n          to it directly this can cause mail to be lost.\n        - Clients\
    \ can be written that do not have any native message\n          sending capability.\n\
    \   ADD.MESSAGE - When this feature is enabled (default is disabled)\n       \
    \ a new \"ADD.MESSAGE\" command becomes available to the client.\n        The\
    \ ADD.MESSAGE command instructs the server to add the\n        specified message\
    \ to the designated mailbox.  This command\n        can be thought of as being\
    \ like a COPY command except in\n        this case the message that is put in\
    \ the designated mailbox\n        is specified as a string, rather than as a message\
    \ number to\n        be copied from the currently selected mailbox.  An example\n\
    \        use of this command might be as follows:\n            tag42 ADD.MESSAGE\
    \ OUTGOING-MAIL RFC822 {2083}\n            From: James Rice <Rice@Sumex-Aim.Stanford.Edu>\n\
    \            To:.....\n        This will have the effect of adding the message\
    \ to the mailbox\n        called OUTGOING-MAIL.\n        If the server is unable\
    \ to parse the message being added then\n        it is required to issue a suitable\
    \ NO notification to the client.\n        When the ADD.MESSAGE feature is enabled,\
    \ the \"add_message\"\n        production in the grammar is added and as defined\
    \ below.\n        The \"add_message\" request is added to the list of requests\n\
    \        in the request production also as shown below:\n   add_message      \
    \      ::= ADD.MESSAGE SP mailbox SP format SP string\n   message_format  ::=\
    \ RFC822\n   request         ::= tag SP (noop / login / logout / select / check\
    \ /\n                       expunge / copy / fetch / store / search /\n      \
    \                 select_version / select_features /\n                       supported_versions\
    \ / bboard / find /\n                       read_only / read_write / flags / set_flags\
    \ /\n                       add_message) CRLF\n        Justification:  This feature\
    \ is provided so that clients can\n        easily add mail to specific mailboxes.\
    \  This allows clients\n        to implement such behavior as outgoing mail storage\
    \ (BCC)\n        without the need to resort to mailing to special BCC mailboxes.\n\
    \   RENUMBER - When this feature is enabled (default is disabled)\n        the\
    \ RENUMBER command becomes available to the client.\n        The RENUMBER command\
    \ will reorder the assignment of message\n        numbers to the messages in the\
    \ mailbox.  If this results in a\n        change to the association of any message\
    \ number with any\n        message then the server is required to send solicited\
    \ RESET\n        responses to the client.  The intent of this command is\n   \
    \     to allow users to view mailboxes in user-meaningful order\n        efficiently.\
    \  While the client could do the ordering,\n        it would be less efficient\
    \ in general.  Note that the\n        server may or may not change the actual\
    \ storage of the\n        messages and the ordering may or may not remain in effect\n\
    \        after another mailbox is selected or the IMAP session is\n        terminated.\
    \  Informally, the syntax for the RENUMBER\n        command is:\n            tag\
    \ RENUMBER field_name ordering_type\n        this has the effect of changing the\
    \ IMAP grammar to be\n        as follows:\n   ordering_type   ::= DATE / NUMERIC\
    \ / ALPHA\n   renumber        ::= RENUMBER SP field_name SP ordering_type\n  \
    \ request         ::= tag SP (noop / login / logout / select / check /\n     \
    \                  expunge / copy / fetch / store / search /\n               \
    \        select_version / select_features /\n                       supported_versions\
    \ / bboard / find /\n                       read_only / read_write / flags / set_flags\
    \ /\n                       renumber) CRLF\n        For example:\n         tag42\
    \ RENUMBER FROM ALPHA\n                         ;;;RENUMBER alphabetically by\
    \ the from field\n         tag42 RESET 10:20,49\n                         ;;;Messages\
    \ 10 to 20 and 49 have changed\n         tag42 OK RENUMBER finished.  Sequence\
    \ has changed\n         tag43 FETCH ALL 10:20,49\n                         ;;;Client\
    \ chooses to fetch the changed msgs.\n        To support this the RESET message\
    \ is defined as follows:\n   */tag RESET message_sequence\n       This solicited\
    \ of unsolicited message from the server informs the\n       client that it should\
    \ flush any information that it has\n       retained for the specified messages.\n\
    \        Justification:  This feature is provided so that clients can\n      \
    \  view mailboxes in an order that is convenient to the user.\n        This is\
    \ particularly important in the context of mailboxes\n        that the user copies\
    \ messages to from other mailboxes.  This\n        user-controlled filing process\
    \ often does not happen in any\n        well-defined order.  Because messages\
    \ in a mailbox are\n        implicitly ordered (usually by arrival date, though\
    \ this is\n        not a required ordering predicate), the user can be confused\n\
    \        by the apparent order of messages in the mailbox.  The\n        addition\
    \ of the RENUMBER command makes it unnecessary\n        for the user to leave\
    \ IMAP and use some other mail system to\n        sort mailboxes.\n   ENCODING\
    \ - When this feature is enabled (default is disabled) a new\n        generic\
    \ key named ENCODING is defined.  The value associated\n        with the generic\
    \ ENCODING key is a list of (tag encoding-type\n        options...) lists that\
    \ represent the ordered, possibly encoded\n        body of the message.  Each\
    \ such list represents a segment of\n        the body of the message and the way\
    \ in which it is encoded.\n        Any options that follow the encoding_type are\
    \ further\n        qualifiers that describe the format of the segment.  Each tag\n\
    \        is created by the server and is unique with respect to the\n        other\
    \ tags allocated for the other elements in the ENCODING\n        list.  The client\
    \ may use the tags returned by the server as\n        concrete keys to access\
    \ a field which is encoded using the\n        encoding type and options mentioned\
    \ in the appropriate list.\n        Thus:\n tag41 FETCH 196 ENCODING ; Client\
    \ asks for encoding field of msg 196.\n tag41 FETCH ENCODING NIL ; Server replies.\
    \ This message is not encoded.\n tag41 OK Fetch completed.\n tag42 FETCH 197 ENCODING\
    \ ; Client asks for encoding field of msg 197.\n tag42 FETCH ENCODING ((G001 UUENCODE)\
    \ (G002 HEX)) ; Server replies.\n tag42 OK Fetch completed.\n tag43 FETCH 197\
    \ G002     ; Client asks for field named G002\n tag43 FETCH G002 \"A0 00 FF 13\
    \ 42.......\" ; Server sends value of field.\n tag43 OK Fetch completed.\n   \
    \  or\n tag44 STORE 197 G002 \"0A 00 FF 31 24.......\"\n    ; Store back the segment\
    \ with nibbles swapped\n      Note:  As a side-effect of enabling this feature,\
    \ the generic key\n      TEXT will be redefined so as to return only those body\
    \ parts of a\n      message that are of type TEXT.  The concrete key RFC822.TEXT,\
    \ on\n      the other hand, would still return everything in the body of the\n\
    \      message, even if it was full of strange, binary character\n      sequences.\n\
    \      When the client STOREs to a field denoted by one of the above tags\n  \
    \    the server will interpret the value being passed as being in the\n      same\
    \ format as is currently specified in the ENCODING field.  The\n      server is\
    \ not required to be able to reformat the data associated\n      with the ENCODING\
    \ tags if the client STOREs a new value for the\n      ENCODING field.  The interpretability\
    \ of a message in the context\n      of its ENCODING field is undefined if the\
    \ client side-effects that\n      ENCODING field, unless the client also STOREs\
    \ new, reformatted\n      values for the fields that have had their encoding changed.\n\
    \      If the client stores a new value for the ENCODING field then the\n    \
    \  tags in the new value will be used to index the parts of the body.\n      All\
    \ tags in a client-STOREd ENCODING that are the same as those\n      originally\
    \ generated by the server in response to a FETCH ENCODING\n      command are said\
    \ still to denote the fields that they originally\n      denoted, though possibly\
    \ reordered.  Any tags not originally\n      defined by the server will denote\
    \ new message parts, in the\n      appropriate format, in the relative position\
    \ specified.  The\n      exclusion of any tags that the server originally defined\
    \ in a\n      FETCH of the ENCODING field will indicate the deletion of that\n\
    \      part of the message.  Newly created message parts are undefined by\n  \
    \    default, so if the client fails to follow the STOREing of the\n      ENCODING\
    \ field with suitable STORE commands for the values\n      associated with any\
    \ newly created tags, these fields will contain\n      the null value NIL.\n \
    \     Justification:  This feature is supplied so as to allow support\n      for\
    \ emergent multi-part and multi-media mail standards.\n   INDEXABLE.FIELDS - When\
    \ this feature is enabled (default is\n        disabled) the grammar of fetch\
    \ commands is changed to allow the\n        client to select a specific subsequence\
    \ from the field in\n        question.  For example:\n          tag42 FETCH 197\
    \ BODY 2000:3999\n        would fetch the second two thousand bytes of the body\
    \ of message\n        197.  This feature allows resource limited clients to access\n\
    \        small parts of large messages.  The formal syntax for this is:\n   fetch_att\
    \       ::= \"ENVELOPE\" / \"FLAGS\" / \"INTERNALDATE\" /\n                  \
    \     fetch_key / (fetch_key SP NUMBER \":\" NUMBER)\n   fetch_key       ::= \"\
    RFC822\" / \"RFC822.HEADER\" / \"RFC822.SIZE\" /\n                       \"RFC822.TEXT\"\
    \ / key\n      If the lower bound number (the number to the left of the colon)\n\
    \      exceeds the maximum size of the field then the empty string is\n      returned.\
    \  If the upper bound exceeds the maximum size of the\n      field but the lower\
    \ bound does not then the server will return the\n      remaining substring of\
    \ the field after the lower bound.  The\n      bounds specified are zero indexed\
    \ into the fields and the bounds\n      index fields by 8-bit bytes.\n      Justification:\
    \  This feature is provided so as to allow resource-\n      limited clients to\
    \ read very large messages and also to allow\n      clients to improve interactive\
    \ response for the reading of large\n      messages by fetching the first \"screen\
    \ full\" of data to display\n      immediately and fetching the rest of the message\
    \ in the\n      background.\n   SET.EOL - When enabled (default is disabled),\
    \ this feature\n        allows the new command SET.EOL to be available, changing\
    \ the\n        grammar as follows:\n   character       ::= \"CR\" / \"LF\" / number\n\
    \   request         ::= tag SP (noop / login / logout / select / check /\n   \
    \                    expunge / copy / fetch / store / search /\n             \
    \          select_version / select_features /\n                       supported_versions\
    \ / bboard / find /\n                       read_only / read_write / flags / set_flags\
    \ /\n                       set_eol) CRLF\n   set_eol         ::= \"SET.EOL\"\
    \ 1#character\n      This has the effect of changing the end of line character\
    \ sequence\n      generated by the server for newlines within strings to the\n\
    \      sequence of characters specified.  The characters in the sequence\n   \
    \   can be either the specified symbolically named characters or a\n      numerical\
    \ value, specifying the decimal value of the character to\n      use.  Thus, if\
    \ the client would like newlines in strings to be\n      indicated by a carriage\
    \ return followed by a control-d, the client\n      would issue the following\
    \ command:\n           tag42 SET.EOL CR 4\n      If the server is unable to support\
    \ the combination of characters\n      requested by the client as its end-of-line\
    \ pattern it will reply\n      with a NO response.  This might be the case, for\
    \ example, if a\n      server is only able to generate its own native line feed\
    \ pattern\n      and the CRLF required by IMAP by default.\n      The server is\
    \ required to change any length denoting values, such\n      as envelope byte\
    \ counts for all future transactions to reflect the\n      new eol setting.  This\
    \ change in reported sizes should apply to\n      all generic size fetching keys,\
    \ but not to concrete ones such as\n      RFC822.SIZE, which by their very nature\
    \ require a size measurement\n      in RFC822 format, i.e., with CRLF as the end-of-line\
    \ convention.\n      Justification: This feature is provided because frequently\
    \ clients\n      and servers might have end-of-line conventions other than the\
    \ CRLF\n      specified by RFC822.  It is undesirable that the IMAP be linked\n\
    \      too closely to RFC822 and selecting a different convention might\n    \
    \  allow substantial performance improvements in both clients and\n      servers\
    \ by saving either client, server or both from having to\n      shuffle text around\
    \ so as to add or remove non-local end-of-line\n      sequences.\n"
- title: 'Acknowledgements:'
  contents:
  - "Acknowledgements:\n   This text is based on RFC 1064 by Mark Crispin.\n   The\
    \ following have made major contributions to this proposed update\n   to the IMAP2\
    \ protocol:\n      James Rice               <Rice@sumex-aim.stanford.edu>\n  \
    \    Richard Acuff            <acuff@sumex-aim.stanford.edu>\n      Bill Yeager\
    \              <yeager@sumex-aim.stanford.edu>\n      Christopher Lane       \
    \  <lane@sumex-aim.stanford.edu>\n      Bjorn Victor             <Bjorn.Victor@docs.uu.se>\n\
    \   Additional input was also received from:\n      Andrew Sweer             <sweer@sumex-aim.stanford.edu>\n\
    \      Tom Gruber               <Gruber@sumex-aim.stanford.edu>\n      Kevin Brock\
    \              <Brock@Sumex-Aim.Stanford.Edu>\n      Mark Crispin            \
    \ <MRC@cac.washington.edu>\n"
- title: Security Considerations
  contents:
  - "Security Considerations\n   Security issues are not discussed in this memo.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   James Rice\n   Stanford University\n   Knowledge Systems\
    \ Laboratory\n   701 Welch Road\n   Building C\n   Palo Alto, CA 94304\n   Phone:\
    \ (415) 723-8405\n   EMail: RICE@SUMEX-AIM.STANFORD.EDU\n"
