- title: __initial_text__
  contents:
  - '      Multicast Security (MSEC) Group Key Management Architecture

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2005).\n"
- title: Abstract
  contents:
  - "Abstract\n   This document defines the common architecture for Multicast Security\n\
    \   (MSEC) key management protocols to support a variety of application,\n   transport,\
    \ and network layer security protocols.  It also defines the\n   group security\
    \ association (GSA), and describes the key management\n   protocols that help\
    \ establish a GSA.  The framework and guidelines\n   described in this document\
    \ permit a modular and flexible design of\n   group key management protocols for\
    \ a variety of different settings\n   that are specialized to applications needs.\
    \  MSEC key management\n   protocols may be used to facilitate secure one-to-many,\
    \ many-to-many,\n   or one-to-one communication.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction: Purpose of this Document ..........................2\n\
    \   2. Requirements of a Group Key Management Protocol .................4\n  \
    \ 3. Overall Design of Group Key Management Architecture .............6\n    \
    \  3.1. Overview ...................................................6\n      3.2.\
    \ Detailed Description of the GKM Architecture ...............8\n      3.3. Properties\
    \ of the Design ..................................11\n      3.4. Group Key Management\
    \ Block Diagram ........................11\n   4. Registration Protocol ..........................................13\n\
    \      4.1. Registration Protocol via Piggybacking or Protocol Reuse ..13\n  \
    \    4.2. Properties of Alternative Registration Exchange Types .....14\n    \
    \  4.3. Infrastructure for Alternative Registration\n           Exchange Types\
    \ ............................................15\n      4.4. De-registration Exchange\
    \ ..................................16\n   5. Rekey Protocol .................................................16\n\
    \      5.1. Goals of the Rekey Protocol ...............................17\n  \
    \    5.2. Rekey Message Transport and Protection ....................17\n    \
    \  5.3. Reliable Transport of Rekey Messages ......................18\n      5.4.\
    \ State-of-the-art on Reliable Multicast Infrastructure .....20\n      5.5. Implosion\
    \ .................................................21\n      5.6. Incorporating\
    \ Group Key Management Algorithms .............22\n      5.7. Stateless, Stateful,\
    \ and Self-healing Rekeying\n           Algorithms ................................................22\n\
    \      5.8. Interoperability of a GKMA ................................23\n  \
    \ 6. Group Security Association .....................................24\n    \
    \  6.1. Group Policy ..............................................24\n      6.2.\
    \ Contents of the Rekey SA ..................................25\n           6.2.1.\
    \ Rekey SA Policy ....................................26\n           6.2.2. Group\
    \ Identity .....................................27\n           6.2.3. KEKs ...............................................27\n\
    \           6.2.4. Authentication Key .................................27\n  \
    \         6.2.5. Replay Protection ..................................27\n    \
    \       6.2.6. Security Parameter Index (SPI) .....................27\n      6.3.\
    \ Contents of the Data SA ...................................27\n           6.3.1.\
    \ Group Identity .....................................28\n           6.3.2. Source\
    \ Identity ....................................28\n           6.3.3. Traffic Protection\
    \ Keys ............................28\n           6.3.4. Data Authentication Keys\
    \ ...........................28\n           6.3.5. Sequence Numbers ...................................28\n\
    \           6.3.6. Security Parameter Index (SPI) .....................28\n  \
    \         6.3.7. Data SA Policy .....................................28\n   7.\
    \ Scalability Considerations .....................................29\n   8. Security\
    \ Considerations ........................................31\n   9. Acknowledgments\
    \ ................................................32\n   10. Informative References\
    \ ........................................33\n"
- title: '1.  Introduction: Purpose of this Document'
  contents:
  - "1.  Introduction: Purpose of this Document\n   This document defines a common\
    \ architecture for Multicast Security\n   (MSEC) key management protocols to support\
    \ a variety of application-,\n   transport-, and network-layer security protocols.\
    \  It also defines\n   the group security association (GSA) and describes the\
    \ key management\n   protocols that help establish a GSA.  The framework and guidelines\n\
    \   described in this document permit a modular and flexible design of\n   group\
    \ key management protocols for a variety of different settings\n   that are specialized\
    \ to applications needs.  MSEC key management\n   protocols may be used to facilitate\
    \ secure one-to-many, many-to-many,\n   or one-to-one communication.\n   Group\
    \ and multicast applications in IP networks have diverse security\n   requirements\
    \ [TAXONOMY].  Their key management requirements, briefly\n   reviewed in Section\
    \ 2.0, include support for internetwork-,\n   transport- and application-layer\
    \ security protocols.  Some\n   applications achieve simpler operation by running\
    \ key management\n   messaging over a pre-established secure channel (e.g., TLS\
    \ or IPsec).\n   Other security protocols benefit from a key management protocol\
    \ that\n   can run over an already-deployed session initiation or management\n\
    \   protocol (e.g., SIP or RTSP).  Finally, some benefit from a\n   lightweight\
    \ key management protocol that requires few round trips.\n   For all these reasons,\
    \ application-, transport-, and IP-layer data\n   security protocols (e.g., SRTP\
    \ [RFC3711] and IPsec [RFC2401]) benefit\n   from different group key management\
    \ systems.  This document defines a\n   common architecture and design for all\
    \ group key management (GKM)\n   protocols.\n   This common architecture for group\
    \ key management is called the MSEC\n   group key management architecture.  It\
    \ is based on the group control\n   or key server model developed in GKMP [RFC2094]\
    \ and assumed by group\n   key management algorithms such as LKH [RFC2627], OFT\
    \ [OFT], and MARKS\n   [MARKS].  There are other approaches that are not considered\
    \ in this\n   architecture, such as the highly distributed Cliques group key\n\
    \   management protocol [CLIQUES] or broadcast key management schemes\n   [FN93,Wool].\
    \  MSEC key management may in fact be complementary to\n   other group key management\
    \ designs, but the integration of MSEC group\n   key management with Cliques,\
    \ broadcast key management, or other group\n   key systems is not considered in\
    \ this document.\n   Key management protocols are difficult to design and validate.\
    \  The\n   common architecture described in this document eases this burden by\n\
    \   defining common abstractions and an overall design that can be\n   specialized\
    \ for different uses.\n   This document builds on and extends the Group Key Management\
    \ Building\n   Block document of the IRTF SMuG research group [GKMBB] and is part\
    \ of\n   the MSEC document roadmap.  The MSEC architecture [MSEC-Arch] defines\n\
    \   a complete multicast or group security architecture, of which key\n   management\
    \ is a component.\n   The rest of this document is organized as follows.  Section\
    \ 2\n   discusses the security, performance and architectural requirements\n \
    \  for a group key management protocol.  Section 3 presents the overall\n   architectural\
    \ design principles.  Section 4 describes the\n   registration protocol in detail,\
    \ and Section 5 does the same for\n   rekey protocol.  Section 6 considers the\
    \ interface to the Group\n   Security Association (GSA).  Section 7 reviews the\
    \ scalability issues\n   for group key management protocols and Section 8 discusses\
    \ security\n   considerations.\n"
- title: 2.  Requirements of a Group Key Management Protocol
  contents:
  - "2.  Requirements of a Group Key Management Protocol\n   A group key management\
    \ (GKM) protocol supports protected\n   communication between members of a secure\
    \ group.  A secure group is a\n   collection of principals, called members, who\
    \ may be senders,\n   receivers, or both receivers and senders to other members\
    \ of the\n   group.  Group membership may vary over time.  A group key management\n\
    \   protocol helps to ensure that only members of a secure group can gain\n  \
    \ access to group data (by gaining access to group keys) and can\n   authenticate\
    \ group data.  The goal of a group key management protocol\n   is to provide legitimate\
    \ group members with the up-to-date\n   cryptographic state they need for secrecy\
    \ and authentication.\n   Multicast applications, such as video broadcast and\
    \ multicast file\n   transfer, typically have the following key management requirements\n\
    \   (see also [TAXONOMY]).  Note that the list is neither applicable to\n   all\
    \ applications nor exhaustive.\n   1. Group members receive security associations\
    \ that include\n      encryption keys, authentication/integrity keys, cryptographic\n\
    \      policy that describes the keys, and attributes such as an index\n     \
    \ for referencing the security association (SA) or particular\n      objects contained\
    \ in the SA.\n   2. In addition to the policy associated with group keys, the\
    \ group\n      owner or the Group Controller and Key Server (GCKS) may define\
    \ and\n      enforce group membership, key management, data security, and other\n\
    \      policies that may or may not be communicated to the entire\n      membership.\n\
    \   3. Keys will have a pre-determined lifetime and may be periodically\n    \
    \  refreshed.\n   4. Key material should be delivered securely to members of the\
    \ group\n      so that they are secret, integrity-protected and verifiably\n \
    \     obtained from an authorized source.\n   5. The key management protocol should\
    \ be secure against replay\n      attacks and Denial of Service(DoS) attacks (see\
    \ the Security\n      Considerations section of this memo).\n   6. The protocol\
    \ should facilitate addition and removal of group\n      members.  Members who\
    \ are added may optionally be denied access to\n      the key material used before\
    \ they joined the group, and removed\n      members should lose access to the\
    \ key material following their\n      departure.\n   7. The protocol should support\
    \ a scalable group rekey operation\n      without unicast exchanges between members\
    \ and a Group Controller\n      and Key Server (GCKS), to avoid overwhelming a\
    \ GCKS managing a\n      large group.\n   8. The protocol should be compatible\
    \ with the infrastructure and\n      performance needs of the data security application,\
    \ such as the\n      IPsec security protocols AH and ESP, and/or application layer\n\
    \      security protocols such as SRTP [RFC3711].\n   9. The key management protocol\
    \ should offer a framework for replacing\n      or renewing transforms, authorization\
    \ infrastructure, and\n      authentication systems.\n   10. The key management\
    \ protocol should be secure against collusion\n       among excluded members and\
    \ non-members.  Specifically, collusion\n       must not result in attackers gaining\
    \ any additional group secrets\n       than each of them individually are privy\
    \ to.  In other words,\n       combining the knowledge of the colluding entities\
    \ must not result\n       in revealing additional group secrets.\n   11. The key\
    \ management protocol should provide a mechanism to\n       securely recover from\
    \ a compromise of some or all of the key\n       material.\n   12. The key management\
    \ protocol may need to address real-world\n       deployment issues such as NAT-traversal\
    \ and interfacing with\n       legacy authentication mechanisms.\n   In contrast\
    \ to typical unicast key and SA negotiation protocols such\n   as TLS and IKE,\
    \ multicast group key management protocols provide SA\n   and key download capability.\
    \  This feature may be useful for point-\n   to-point as well as multicast communication,\
    \ so that a group key\n   management protocol may be useful for unicast applications.\
    \  Group\n   key management protocols may be used for protecting multicast or\n\
    \   unicast communications between members of a secure group.  Secure\n   sub-group\
    \ communication is also plausible using the group SA.\n   There are other requirements\
    \ for small group operation with many all\n   members as potential senders.  In\
    \ this case, the group setup time may\n   need to be optimized to support a small,\
    \ highly interactive group\n   environment [RFC2627].\n   The current key management\
    \ architecture covers secure communication\n   in large single-sender groups,\
    \ such as source-specific multicast\n   groups.  Scalable operation to a range\
    \ of group sizes is also a\n   desirable feature, and a better group key management\
    \ protocol will\n   support large, single-sender groups as well as groups that\
    \ have many\n   senders.  It may be that no single key management protocol can\n\
    \   satisfy the scalability requirements of all group-security\n   applications.\n\
    \   It is useful to emphasize two non-requirements: technical protection\n   measures\
    \ (TPM) [TPM] and broadcast key management.  TPM are used for\n   such things\
    \ as copy protection by preventing the device user from\n   getting easy access\
    \ to the group keys.  There is no reason why a\n   group key management protocol\
    \ cannot be used in an environment where\n   the keys are kept in a tamper-resistant\
    \ store, using various types of\n   hardware or software to implement TPM.  For\
    \ simplicity, however, the\n   MSEC key management architecture described in this\
    \ document does not\n   consider design for technical protection.\n   The second\
    \ non-requirement is broadcast key management when there is\n   no back channel\
    \ [FN93,JKKV94] or for a non-networked device such as a\n   digital videodisc\
    \ player.  We assume IP network operation with two-\n   way communication, however\
    \ asymmetric, and authenticated key-exchange\n   procedures that can be used for\
    \ member registration.  Broadcast\n   applications may use a one-way Internet\
    \ group key management protocol\n   message and a one-way rekey message, as described\
    \ below.\n"
- title: 3.  Overall Design of Group Key Management Architecture
  contents:
  - "3.  Overall Design of Group Key Management Architecture\n   The overall group\
    \ key management architecture is based upon a group\n   controller model [RFC2093,RFC2094,RFC2627,OFT,GSAKMP,RFC3547]\
    \ with a\n   single group owner as the root-of-trust.  The group owner designates\n\
    \   a group controller for member registration and GSA rekeying.\n"
- title: 3.1.  Overview
  contents:
  - "3.1.  Overview\n   The main goal of a group key management protocol is to securely\n\
    \   provide group members with an up-to-date security association (SA),\n   which\
    \ contains the needed information for securing group\n   communication (i.e.,\
    \ the group data).  We call this SA the Data SA.\n   In order to obtain this goal,\
    \ the group key management architecture\n   defines the following protocols.\n\
    \   (1) Registration Protocol\n      This is a unicast protocol between the Group\
    \ Controller and Key\n      Server (GCKS) and a joining group member.  In this\
    \ protocol, the\n      GCKS and joining member mutually authenticate each other.\
    \  If the\n      authentication succeeds and the GCKS finds that the joining member\n\
    \      is authorized, then the GCKS supplies the joining member with the\n   \
    \   following information:\n      (a) Sufficient information to initialize the\
    \ Data SA within the\n          joining member.  This information is given only\
    \ if the group\n          security policy calls for initializing the Data SA at\n\
    \          registration, instead of, or in addition to, as part of the\n     \
    \     rekey protocol.\n      (b) Sufficient information to initialize a Rekey\
    \ SA within the\n          joining member (see more details about this SA below).\
    \  This\n          information is given if the group security policy calls for\
    \ a\n          rekey protocol.\n      The registration protocol must ensure that\
    \ the transfer of\n      information from GCKS to member is done in an authenticated\
    \ and\n      confidential manner over a security association.  We call this SA\n\
    \      the Registration SA.  A complementary de-registration protocol\n      serves\
    \ to explicitly remove Registration SA state.  Members may\n      choose to delete\
    \ Registration SA state.\n   (2) Rekey Protocol\n      A GCKS may periodically\
    \ update or change the Data SA, by sending\n      rekey information to the group\
    \ members.  Rekey messages may result\n      from group membership changes, from\
    \ changes in group security\n      policy, from the creation of new traffic-protection\
    \ keys (TPKs,\n      see next section) for the particular group, or from key\n\
    \      expiration.  Rekey messages are protected by the Rekey SA, which\n    \
    \  is initialized in the registration protocol.  They contain\n      information\
    \ for updating the Rekey SA and/or the Data SA and can\n      be sent via multicast\
    \ to group members or via unicast from the\n      GCKS to a particular group member.\n\
    \      Note that there are other means for managing (e.g., expiring or\n     \
    \ refreshing) the Data SA without interaction between the GCKS and\n      the\
    \ members.  For example in MARKS [MARKS], the GCKS pre-\n      determines TPKs\
    \ for different periods in the lifetime of the\n      secure group and distributes\
    \ keys to members based on their\n      membership periods.  Alternative schemes\
    \ such as the GCKS\n      disbanding the secure group and starting a new group\
    \ with a new\n      Data SA are also possible, although this is typically limited\
    \ to\n      small groups.\n      Rekey messages are authenticated using one of\
    \ the two following\n      options:\n      (1) Using source authentication [TAXONOMY],\
    \ that is, enabling each\n          group member to verify that a rekey message\
    \ originates with\n          the GCKS and none other.\n      (2) Using only group-based\
    \ authentication with a symmetric key.\n          Members can only be assured\
    \ that the rekey messages originated\n          within the group.  Therefore,\
    \ this is applicable only when all\n          members of the group are trusted\
    \ not to impersonate the GCKS.\n          Group authentication for rekey messages\
    \ is typically used when\n          public-key cryptography is not suitable for\
    \ the particular\n          group.\n      The rekey protocol ensures that all\
    \ members receive the rekey\n      information in a timely manner.  In addition,\
    \ the rekey protocol\n      specifies mechanisms for the parties to contact the\
    \ GCKS and re-\n      synch if their keys expired and an updated key has not been\n\
    \      received.  The rekey protocol for large-scale groups offers\n      mechanisms\
    \ to avoid implosion problems and to ensure reliability\n      in its delivery\
    \ of keying material.\n      Although the Rekey SA is established by the registration\
    \ protocol,\n      it is updated using a rekey protocol.  When a member leaves\
    \ the\n      group, it destroys its local copy of the GSA.  Using a de-\n    \
    \  registration message may be an efficient way for a member to\n      inform\
    \ the GCKS that it has destroyed, or is about to destroy, the\n      SAs.  Such\
    \ a message may prompt the GCKS to cryptographically\n      remove the member\
    \ from the group (i.e., to prevent the member from\n      having access to future\
    \ group communication).  In large-scale\n      multicast applications, however,\
    \ de-registration can potentially\n      cause implosion at the GCKS.\n"
- title: 3.2.  Detailed Description of the GKM Architecture
  contents:
  - "3.2.  Detailed Description of the GKM Architecture\n   Figure 1 depicts the overall\
    \ design of a GKM protocol.  Each group\n   member, sender or receiver, uses the\
    \ registration protocol to get\n   authorized and authenticated access to a particular\
    \ Group, its\n   policies, and its keys.  The two types of group keys are the\
    \ key\n   encryption keys (KEKs) and the traffic encryption keys (TEKs).  For\n\
    \   group authentication of rekey messages or data, key integrity or\n   traffic\
    \ integrity keys may be used, as well.  We use the term\n   protection keys to\
    \ refer to both integrity and encryption keys.  For\n   example, the term traffic\
    \ protection key (TPK) is used to denote the\n   combination of a TEK and a traffic\
    \ integrity key, or the key material\n   used to generate them.\n   The KEK may\
    \ be a single key that protects the rekey message,\n   typically containing a\
    \ new Rekey SA (containing a KEK) and/or Data SA\n   (containing a TPK/TEK). \
    \ A Rekey SA may also contain a vector of keys\n   that are part of a group key\
    \ membership algorithm\n   [RFC2627,OFT,TAXONOMY,SD1,SD2].  The data security\
    \ protocol uses TPKs\n   to protect streams, files, or other data sent and received\
    \ by\n   the data security protocol.  Thus the registration protocol and/or\n\
    \   the rekey protocol establish the KEK(s) and/or the TPKs.\n   +------------------------------------------------------------------+\n\
    \   | +-----------------+                          +-----------------+ |\n   |\
    \ |     POLICY      |                          |  AUTHORIZATION  | |\n   | | INFRASTRUCTURE\
    \  |                          | INFRASTRUCTURE  | |\n   | +-----------------+\
    \                          +-----------------+ |\n   |         ^             \
    \                               ^           |\n   |         |                \
    \                            |           |\n   |         v                   \
    \                         v           |\n   | +--------------------------------------------------------------+\
    \ |\n   | |                                                              | |\n\
    \   | |                    +--------------------+                    | |\n   |\
    \ |            +------>|        GCKS        |<------+            | |\n   | | \
    \           |       +--------------------+       |            | |\n   | |    \
    \ REGISTRATION or          |            REGISTRATION or    | |\n   | |     DE-REGISTRATION\
    \          |            DE-REGISTRATION    | |\n   | |         PROTOCOL      \
    \       |               PROTOCOL        | |\n   | |            |             \
    \    |                  |            | |\n   | |            v                REKEY\
    \               v            | |\n   | |   +-----------------+     PROTOCOL  \
    \   +-----------------+   | |\n   | |   |                 |    (OPTIONAL)    |\
    \                 |   | |\n   | |   |    SENDER(S)    |<-------+-------->|   RECEIVER(S)\
    \   |   | |\n   | |   |                 |                  |                 |\
    \   | |\n   | |   +-----------------+                  +-----------------+   |\
    \ |\n   | |            |                                    ^            | |\n\
    \   | |            v                                    |            | |\n   |\
    \ |            +-------DATA SECURITY PROTOCOL-------+            | |\n   | | \
    \                                                             | |\n   | +--------------------------------------------------------------+\
    \ |\n   |                                                                  |\n\
    \   +------------------------------------------------------------------+\n   \
    \             Figure 1: Group Security Association Model\n   There are a few distinct\
    \ outcomes to a successful registration\n   Protocol exchange.\n      o  If the\
    \ GCKS uses rekey messages, then the admitted member\n         receives the Rekey\
    \ SA.  The Rekey SA contains the group's rekey\n         policy (note that not\
    \ all of the policy need to be revealed to\n         members), and at least a\
    \ group KEK.  In addition, the GCKS\n         sends a group key integrity key\
    \ for integrity protection of\n         rekey messages.  If a group key management\
    \ algorithm is used\n         for efficient rekeying, the GCKS also sends one\
    \ or more KEKs as\n         specified by the key distribution policy of the group\
    \ key\n         management algorithm.\n      o  If rekey messages are not used\
    \ for the Group, then the admitted\n         member receives TPKs (as part of\
    \ the Data Security SAs) that\n         are passed to the member's Data Security\
    \ Protocol (as IKE does\n         for IPsec).\n      o  The GCKS may pass one\
    \ or more TPKs to the member even if rekey\n         messages are used, for efficiency\
    \ reasons and according to\n         group policy.\n   The GCKS creates the KEK\
    \ and TPKs and downloads them to each member,\n   as the KEK and TPKs are common\
    \ to the entire group.  The GCKS is a\n   separate logical entity that performs\
    \ member authentication and\n   authorization according to the group policy that\
    \ is set by the group\n   owner.  The GCKS may present a credential signed by\
    \ the group owner\n   to the group member, so that member can check the GCKS's\n\
    \   authorization.  The GCKS, which may be co-located with a member or be\n  \
    \ physically separate, runs the rekey protocol to push rekey messages\n   containing\
    \ refreshed KEKs, new TPKs, and/or refreshed TPKs to\n   members.  Note that some\
    \ group key management algorithms refresh any\n   of the KEKs (potentially), whereas\
    \ others only refresh the group KEK.\n   Alternatively, the sender may forward\
    \ rekey messages on behalf of the\n   GCKS when it uses a credential mechanism\
    \ that supports delegation.\n   Thus, it is possible for the sender, or other\
    \ members, to source\n   keying material (TPKs encrypted in the Group KEK) as\
    \ it sources\n   multicast or unicast data.  As mentioned above, the rekey message\
    \ can\n   be sent using unicast or multicast delivery.  Upon receipt of a TPK\n\
    \   (as part of a Data SA) via a rekey message or a registration protocol\n  \
    \ exchange, the member's group key management functional block will\n   provide\
    \ the new or updated security association (SA) to the data\n   security protocol.\
    \  This protects the data sent from sender to\n   receiver.\n   The Data SA protects\
    \ the data sent on the arc labeled DATA SECURITY\n   PROTOCOL shown in Figure\
    \ 1.  A second SA, the Rekey SA, is optionally\n   established by the key management\
    \ protocol for rekey messages as\n   shown in Figure 1 by the arc labeled REKEY\
    \ PROTOCOL.  The rekey\n   message is optional because all keys, KEKs and TPKs,\
    \ can be delivered\n   by the registration protocol exchanges shown in Figure\
    \ 1, and those\n   keys may not need to be updated.  The registration protocol\
    \ is\n   protected by a third, unicast, SA between the GCKS and each member.\n\
    \   This is called the Registration SA.  There may be no need for the\n   Registration\
    \ SA to remain in place after the completion of the\n   registration protocol\
    \ exchanges.  The de-registration protocol may be\n   used when explicit teardown\
    \ of the SA is desirable (such as when a\n   phone call or conference terminates).\
    \  The three SAs compose the GSA.\n   The only optional SA is the Rekey SA.\n\
    \   Figure 1 shows two blocks that are external to the group key\n   management\
    \ protocol:  The policy and authorization infrastructures\n   are discussed in\
    \ Section 6.1.  The Multicast Security Architecture\n   document further clarifies\
    \ the SAs and their use as part of the\n   complete architecture of a multicast\
    \ security solution [MSEC-Arch].\n"
- title: 3.3.  Properties of the Design
  contents:
  - "3.3.  Properties of the Design\n   The design of Section 3.2 achieves scalable\
    \ operation by (1) allowing\n   the de-coupling of authenticated key exchange\
    \ in a registration\n   protocol from a rekey protocol, (2) allowing the rekey\
    \ protocol to\n   use unicast push or multicast distribution of group and data\
    \ keys as\n   an option, (3) allowing all keys to be obtained by the unicast\n\
    \   registration protocol, and (4) delegating the functionality of the\n   GCKS\
    \ among multiple entities, i.e., to permit distributed operation\n   of the GCKS.\n\
    \   High-capacity operation is obtained by (1) amortizing\n   computationally-expensive\
    \ asymmetric cryptography over multiple data\n   keys used by data security protocols,\
    \ (2) supporting multicast\n   distribution of symmetric group and data keys,\
    \ and (3) supporting key\n   revocation algorithms such as LKH [RFC2627,OFT,SD1,SD2]\
    \ that allow\n   members to be added or removed at logarithmic rather than linear\n\
    \   space/time complexity.  The registration protocol may use asymmetric\n   cryptography\
    \ to authenticate joining members and optionally establish\n   the group KEK.\
    \  Asymmetric cryptography such as Diffie-Hellman key\n   agreement and/or digital\
    \ signatures are amortized over the life of\n   the group KEK.  A Data SA can\
    \ be established without the use of\n   asymmetric cryptography; the TPKs are\
    \ simply encrypted in the\n   symmetric KEK and sent unicast or multicast in the\
    \ rekey protocol.\n   The design of the registration and rekey protocols is flexible.\
    \  The\n   registration protocol establishes a Rekey SA or one or more Data SAs\n\
    \   or both types of SAs.  At least one of the SAs is present (otherwise,\n  \
    \ there is no purpose to the Registration SA).  The Rekey SA may update\n   the\
    \ Rekey SA, or establish or update one or more Data SAs.\n   Individual protocols\
    \ or configurations may use this flexibility to\n   obtain efficient operation.\n"
- title: 3.4.  Group Key Management Block Diagram
  contents:
  - "3.4.  Group Key Management Block Diagram\n   In the block diagram of Figure 2,\
    \ group key management protocols run\n   between a GCKS and member principal to\
    \ establish a Group Security\n   Association (GSA).  The GSA consists of a Data\
    \ SA, an optional Rekey\n   SA, and a Registration SA.  The GCKS may use a delegated\
    \ principal,\n   such as the sender, which has a delegation credential signed\
    \ by the\n   GCKS.  The Member of Figure 2 may be a sender or receiver of\n  \
    \ multicast or unicast data.  There are two functional blocks in Figure\n   2\
    \ labeled GKM, and there are two arcs between them depicting the\n   group key-management\
    \ registration (reg) and rekey (rek) protocols.\n   The message exchanges are\
    \ in the GSA establishment protocols, which\n   are the registration protocol\
    \ and the rekey protocol described above.\n   Figure 2 shows that a complete group-key\
    \ management functional\n   specification includes much more than the message\
    \ exchange.  Some of\n   these functional blocks and the arcs between them are\
    \ peculiar to an\n   operating system (OS) or vendor product, such as vendor\n\
    \   specifications for products that support updates to the IPsec\n   Security\
    \ Association Database (SAD) and Security Policy Database\n   (SPD) [RFC2367].\
    \  Various vendors also define the functions and\n   interface of credential stores,\
    \ CRED in Figure 2.\n     +----------------------------------------------------------+\n\
    \     |                                                          |\n     | +-------------+\
    \         +------------+                   |\n     | |   CONTROL   |         |\
    \   CONTROL  |                   |\n     | +------^------+         +------|-----+\
    \  +--------+       |\n     |        |                       |  +-----| CRED \
    \  |       |\n     |        |                       |  |     +--------+      \
    \ |\n     |   +----v----+             +----v--v-+   +--------+       |\n     |\
    \   |         <-----Reg----->         |<->|  SAD   |       |\n     |   |   GKM\
    \    -----Rek----->   GKM   |   +--------+       |\n     |   |         |     \
    \        |         |   +--------+       |\n     |   |         ------+       |\
    \         |<->|  SPD   |       |\n     |   +---------+     |       +-^-------+\
    \   +--------+       |\n     |   +--------+      |         | |   |           \
    \           |\n     |   | CRED   |----->+         | |   +-------------------+\
    \  |\n     |   +--------+      |         | +--------------------+  |  |\n    \
    \ |   +--------+      |       +-V-------+   +--------+ |  |  |\n     |   |  SAD\
    \   <----->+       |         |<->|  SAD   <-+  |  |\n     |   +--------+     \
    \ |       |SECURITY |   +--------+    |  |\n     |   +--------+      |       |PROTOCOL\
    \ |   +--------+    |  |\n     |   |  SPD   <----->+       |         |<->|  SPD\
    \   <----+  |\n     |   +--------+              +---------+   +--------+     \
    \  |\n     |                                                          |\n    \
    \ |     (A) GCKS                     (B) MEMBER              |\n     +----------------------------------------------------------+\n\
    \               Figure 2: Group Key Management Block in a Host\n   The CONTROL\
    \ function directs the GCKS to establish a group, admit a\n   member, or remove\
    \ a member, or it directs a member to join or leave a\n   group.  CONTROL includes\
    \ authorization that is subject to group\n   policy [GSPT] but its implementation\
    \ is specific to the GCKS.  For\n   large scale multicast sessions, CONTROL could\
    \ perform session\n   announcement functions to inform a potential group member\
    \ that it may\n   join a group or receive group data (e.g., a stream of file transfer\n\
    \   protected by a data security protocol).  Announcements notify group\n   members\
    \ to establish multicast SAs in advance of secure multicast\n   data transmission.\
    \  Session Description Protocol (SDP) is one form\n   that the announcements might\
    \ take [RFC2327].  The announcement\n   function may be implemented in a session\
    \ directory tool, an\n   electronic program guide (EPG), or by other means.  The\
    \ Data Security\n   or the announcement function directs group key management\
    \ using an\n   application programming interface (API), which is peculiar to the\n\
    \   host OS in its specifics.  A generic API for group key management is\n   for\
    \ further study, but this function is necessary to allow Group\n   (KEK) and Data\
    \ (TPKs) key establishment to be scalable to the\n   particular application. \
    \ A GCKS application program will use the API\n   to initiate the procedures for\
    \ establishing SAs on behalf of a\n   Security Protocol in which members join\
    \ secure groups and receive\n   keys for streams, files, or other data.\n   The\
    \ goal of the exchanges is to establish a GSA through updates to\n   the SAD of\
    \ a key management implementation and particular Security\n   Protocol.  The Data\
    \ Security Protocol (\"SECURITY PROTOCOL\") of Figure\n   2 may span internetwork\
    \ and application layers or operate at the\n   internetwork layer, such as AH\
    \ and ESP.\n"
- title: 4.  Registration Protocol
  contents:
  - "4.  Registration Protocol\n   The design of the registration protocol is flexible\
    \ and can support\n   different application scenarios.  The chosen registration\
    \ protocol\n   solution reflects the specific requirements of specific scenarios.\n\
    \   In principle, it is possible to base a registration protocol on any\n   secure-channel\
    \ protocol, such as IPsec and TLS, which is the case in\n   tunneled GSAKMP [tGSAKMP].\
    \  GDOI [RFC3547] reuses IKE Phase 1 as the\n   secure channel to download Rekey\
    \ and/or Data SAs.  Other protocols,\n   such as MIKEY and GSAKMP, use authenticated\
    \ Diffie-Hellman exchanges\n   similar to IKE Phase 1, but they are specifically\
    \ tailored for key\n   download to achieve efficient operation.  We discuss the\
    \ design of a\n   registration protocol in detail in the rest of this section.\n"
- title: 4.1.  Registration Protocol via Piggybacking or Protocol Reuse
  contents:
  - "4.1.  Registration Protocol via Piggybacking or Protocol Reuse\n   Some registration\
    \ protocols need to tunnel through a data-signaling\n   protocol to take advantage\
    \ of already existing security\n   functionality, and/or to optimize the total\
    \ session setup time.  For\n   example, a telephone call has strict bounds for\
    \ delay in setup time.\n   It is not feasible to run security exchanges in parallel\
    \ with call\n   setup, since the latter often resolves the address.  Call setup\
    \ must\n   complete before the caller knows the callee's address.  In this case,\n\
    \   it may be advantageous to tunnel the key exchange procedures inside\n   call\
    \ establishment [H.235,MIKEY], so that both can complete (or fail,\n   see below)\
    \ at the same time.\n   The registration protocol has different requirements depending\
    \ on the\n   particular integration/tunneling approach.  These requirements are\n\
    \   not necessarily security requirements, but will have an impact on the\n  \
    \ chosen security solution.  For example, the security association will\n   certainly\
    \ fail if the call setup fails in the case of IP telephony.\n   Conversely, the\
    \ registration protocol imposes requirements on the\n   protocol that tunnels\
    \ it.  In the case of IP telephony, the call\n   setup usually will fail when\
    \ the security association is not\n   successfully established.  In the case of\
    \ video-on-demand, protocols\n   such as RTSP that convey key management data\
    \ will fail when a needed\n   security association cannot be established.\n  \
    \ Both GDOI and MIKEY use this approach, but in different ways.  MIKEY\n   can\
    \ be tunneled in SIP and RTSP.  It takes advantage of the session\n   information\
    \ contained in these protocols and the possibility to\n   optimize the setup time\
    \ for the registration procedure.  SIP requires\n   that a tunneled protocol must\
    \ use at most one roundtrip (i.e., two\n   messages).  This is also a desirable\
    \ requirement from RTSP.\n   The GDOI approach takes advantage of the already\
    \ defined ISAKMP phase\n   1 exchange [RFC2409], and extends the phase 2 exchange\
    \ for the\n   registration.  The advantage here is the reuse of a successfully\n\
    \   deployed protocol and the code base, where the defined phase 2\n   exchange\
    \ is protected by the SA created by phase 1.  GDOI also\n   inherits other functionality\
    \ of the ISAKMP, and thus it is readily\n   suitable for running IPsec protocols\
    \ over IP multicast services.\n"
- title: 4.2.  Properties of Alternative Registration Exchange Types
  contents:
  - "4.2.  Properties of Alternative Registration Exchange Types\n   The required\
    \ design properties of a registration protocol have\n   different trade-offs.\
    \  A protocol that provides perfect forward\n   secrecy and identity protection\
    \ trades performance or efficiency for\n   better security, while a protocol that\
    \ completes in one or two\n   messages may trade security functionality (e.g.,\
    \ identity protection)\n   for efficiency.\n   Replay protection generally uses\
    \ either a timestamp or a sequence\n   number.  The first requires synchronized\
    \ clocks, while the latter\n   requires retention of state.  In a timestamp-based\
    \ protocol, a replay\n   cache is needed to store the authenticated messages (or\
    \ the hashes of\n   the messages) received within the allowable clock skew.  The\
    \ size of\n   the replay cache depends on the number of authenticated messages\n\
    \   received during the allowable clock skew.  During a DoS attack, the\n   replay\
    \ cache might become overloaded.  One solution is to over-\n   provision the replay\
    \ cache, but this may lead to a large replay\n   cache.  Another solution is to\
    \ let the allowable clock skew be\n   changed dynamically during runtime.  During\
    \ a suspected DoS attack,\n   the allowable clock skew is decreased so that the\
    \ replay cache\n   becomes manageable.\n   A challenge-response mechanism (using\
    \ Nonces) obviates the need for\n   synchronized clocks for replay protection\
    \ when the exchange uses\n   three or more messages [MVV].\n   Additional security\
    \ functions become possible as the number of\n   allowable messages in the registration\
    \ protocol increase.  ISAKMP\n   offers identity protection, for example, as part\
    \ of a six-message\n   exchange.  With additional security features, however,\
    \ comes added\n   complexity:  Identity protection, for example, not only requires\n\
    \   additional messages, but may result in DoS vulnerabilities since\n   authentication\
    \ is performed in a late stage of the exchange after\n   resources already have\
    \ been devoted.\n   In all cases, there are tradeoffs with the number of message\n\
    \   exchanged, the desired security services, and the amount of\n   infrastructure\
    \ that is needed to support the group key management\n   service.  Whereas protocols\
    \ that use two or even one-message setup\n   have low latency and computation\
    \ requirements, they may require more\n   infrastructure such as secure time or\
    \ offer less security such as the\n   absence of identity protection.  What tradeoffs\
    \ are acceptable and\n   what are not is very much dictated by the application\
    \ and application\n   environment.\n"
- title: 4.3.  Infrastructure for Alternative Registration Exchange Types
  contents:
  - "4.3.  Infrastructure for Alternative Registration Exchange Types\n   The registration\
    \ protocol may need external infrastructures to handle\n   authentication and\
    \ authorization, replay protection, protocol-run\n   integrity, and possibly other\
    \ security services such as secure\n   synchronized clocks.  For example, authentication\
    \ and authorization\n   may need a PKI deployment (with either authorization-based\n\
    \   certificates or a separate management) or may be handled using AAA\n   infrastructure.\
    \  Replay protection using timestamps requires an\n   external infrastructure\
    \ or protocol for clock synchronization.\n   However, external infrastructures\
    \ may not always be needed; for\n   example pre-shared keys are used for authentication\
    \ and\n   authorization.  This may be the case if the subscription base is\n \
    \  relatively small.  In a conversational multimedia scenario (e.g., a\n   VoIP\
    \ call between two or more people), it may be the end user who\n   handles the\
    \ authorization by manually accepting/rejecting the\n   incoming calls.  In that\
    \ case, infrastructure support may not be\n   required.\n"
- title: 4.4.  De-registration Exchange
  contents:
  - "4.4.  De-registration Exchange\n   The session-establishment protocol (e.g.,\
    \ SIP, RTSP) that conveys a\n   registration exchange often has a session-disestablishment\
    \ protocol\n   such as RTSP TEARDOWN [RFC2326] or SIP BYE [RFC3261].  The session-\n\
    \   disestablishment exchange between endpoints offers an opportunity to\n   signal\
    \ the end of the GSA state at the endpoints.  This exchange need\n   only be a\
    \ unidirectional notification by one side that the GSA is to\n   be destroyed.\
    \  For authentication of this notification, we may use a\n   proof-of-possession\
    \ of the group key(s) by one side to the other.\n   Some applications benefit\
    \ from acknowledgement in a mutual, two-\n   message exchange signaling disestablishment\
    \ of the GSA concomitant\n   with disestablishment of the session, e.g., RTSP\
    \ or SIP session.  In\n   this case, a two-way proof-of-possession might serve\
    \ for mutual\n   acknowledgement of the GSA disestablishment.\n"
- title: 5.  Rekey Protocol
  contents:
  - "5.  Rekey Protocol\n   The group rekey protocol is for transport of keys and\
    \ SAs between a\n   GCKS and the members of a secure communications group.  The\
    \ GCKS\n   sends rekey messages to update a Rekey SA, or initialize/update a\n\
    \   Data SA or both.  Rekey messages are protected by a Rekey SA.  The\n   GCKS\
    \ may update the Rekey SA when group membership changes or when\n   KEKs or TPKs\
    \ expire.  Recall that KEKs correspond to a Rekey SA and\n   TPKs correspond to\
    \ a Data SA.\n   The following are some desirable properties of the rekey protocol.\n\
    \      o  The rekey protocol ensures that all members receive the rekey\n    \
    \     information in a timely manner.\n      o  The rekey protocol specifies mechanisms\
    \ allowing the parties to\n         contact the GCKS and re-sync when their keys\
    \ expire and no\n         updates have been received.\n      o  The rekey protocol\
    \ avoids implosion problems and ensures\n         reliability in delivering Rekey\
    \ information.\n   We further note that the rekey protocol is primarily responsible\
    \ for\n   scalability of the group key management architecture.  Hence, it is\n\
    \   imperative that we provide the above listed properties in a scalable\n   manner.\
    \  Note that solutions exist in the literature (both IETF\n   standards and research\
    \ articles) for parts of the problem.  For\n   instance, the rekey protocol may\
    \ use a scalable group key management\n   algorithm (GKMA) to reduce the number\
    \ of keys sent in a rekey\n   message.  Examples of a GKMA include LKH, OFT, Subset\
    \ difference\n   based schemes etc.\n"
- title: 5.1.  Goals of the Rekey Protocol
  contents:
  - "5.1.  Goals of the Rekey Protocol\n   The goals of the rekey protocol are:\n\
    \      o  to synchronize a GSA,\n      o  to provide privacy and (symmetric or\
    \ asymmetric)\n         authentication, replay protection and DoS protection,\n\
    \      o  efficient rekeying after changes in group membership or when\n     \
    \    keys (KEKs) expire,\n      o  reliable delivery of rekey messages,\n    \
    \  o  member recovery from an out-of-sync GSA,\n      o  high throughput and low\
    \ latency, and\n      o  support IP Multicast or multi-unicast.\n   We identify\
    \ several major issues in the design of a rekey protocol:\n      1.  rekey message\
    \ format,\n      2.  reliable transport of rekey messages,\n      3.  implosion,\n\
    \      4.  recovery from out-of-sync GSA,\n      5.  incorporating GKMAs in rekey\
    \ messages, and\n      6.  interoperability of GKMAs.\n   Note that interoperation\
    \ of rekey protocol implementations is\n   insufficient for a GCKS to successfully\
    \ rekey a group.  The GKMA must\n   also interoperate, i.e., standard versions\
    \ of the group key\n   management algorithms such as LKH, OFT, or Subset Difference\
    \ must be\n   used.\n   The rest of this section discusses these topics in detail.\n"
- title: 5.2.  Rekey Message Transport and Protection
  contents:
  - "5.2.  Rekey Message Transport and Protection\n   Rekey messages contain Rekey\
    \ and/or Data SAs along with KEKs and\n   TPKs.  These messages need to be confidential,\
    \ authenticated, and\n   protected against replay and DoS attacks.  They are sent\
    \ via\n   multicast or multi-unicast from the GCKS to the members.\n   Rekey messages\
    \ are encrypted with the Group KEK for confidentiality.\n   When used in conjunction\
    \ with a GKMA, portions of the rekey message\n   are first encrypted with the\
    \ appropriate KEKs as specified by the\n   GKMA.  The GCKS authenticates rekey\
    \ messages using either a MAC,\n   computed using the group Authentication key,\
    \ or a digital signature.\n   In both cases, a sequence number is included in\
    \ computation of the\n   MAC or the signature to protect against replay attacks.\n\
    \   When group authentication is provided with a symmetric key, rekey\n   messages\
    \ are vulnerable to attacks by other members of the group.\n   Rekey messages\
    \ are digitally signed when group members do not trust\n   each other.  When asymmetric\
    \ authentication is used, members\n   receiving rekey messages are vulnerable\
    \ to DoS attacks.  An external\n   adversary may send a bogus rekey message, which\
    \ a member cannot\n   identify until after it performs an expensive digital signature\n\
    \   operation.  To protect against such an attack, a MAC may be sent as\n   part\
    \ of the rekey message.  Members verify the signature only upon\n   successful\
    \ verification of the MAC.\n   Rekey messages contain group key updates corresponding\
    \ to a single\n   [RFC2627,OFT] or multiple membership changes [SD1,SD2,BatchRekey]\
    \ and\n   may contain group key initialization messages [OFT].\n"
- title: 5.3.  Reliable Transport of Rekey Messages
  contents:
  - "5.3.  Reliable Transport of Rekey Messages\n   The GCKS must ensure that all\
    \ members have the current Data Security\n   and Rekey SAs.  Otherwise, authorized\
    \ members may be inadvertently\n   excluded from receiving group communications.\
    \  Thus, the GCKS needs\n   to use a rekey algorithm that is inherently reliable\
    \ or employ a\n   reliable transport mechanism to send rekey messages.\n   There\
    \ are two dimensions to the problem.  Messages that update group\n   keys may\
    \ be lost in transit or may be missed by a host when it is\n   offline.  LKH and\
    \ OFT group key management algorithms rely on past\n   history of updates being\
    \ received by the host.  If the host goes\n   offline, it will need to resynchronize\
    \ its group-key state when it\n   comes online; this may require a unicast exchange\
    \ with the GCKS.  The\n   Subset Difference algorithm, however, conveys all the\
    \ necessary state\n   in its rekey messages and does not need members to be always\
    \ online\n   or keeping state.  The Subset Difference algorithm does not require\
    \ a\n   back channel and can operate on a broadcast network.  If a rekey\n   message\
    \ is lost in transmission, the Subset Difference algorithm\n   cannot decrypt\
    \ messages encrypted with the TPK sent via the lost\n   rekey message.  There\
    \ are self-healing GKMAs proposed in the\n   literature that allow a member to\
    \ recover lost rekey messages, as\n   long as rekey messages before and after\
    \ the lost rekey message are\n   received.\n   Rekey messages are typically short\
    \ (for single membership change as\n   well as for small groups), which makes\
    \ it easy to design a reliable\n   delivery protocol.  On the other hand, the\
    \ security requirements may\n   add an additional dimension to address.  There\
    \ are some special cases\n   in which membership changes are processed as a batch,\
    \ reducing the\n   frequency of rekey messages but increasing their size.  Furthermore,\n\
    \   among all the KEKs sent in a rekey message, as many as half the\n   members\
    \ need only a single KEK.  We may take advantage of these\n   properties in designing\
    \ a rekey message(s) and a protocol for their\n   reliable delivery.\n   Three\
    \ categories of solutions have been proposed:\n      1.  Repeatedly transmit the\
    \ rekey message.  In many cases rekey\n          messages translate to only one\
    \ or two IP packets.\n      2.  Use an existing reliable multicast protocol/infrastructure.\n\
    \      3.  Use FEC for encoding rekey packets (with NACKs as feedback)\n     \
    \     [BatchRekey].\n   Note that for small messages, category 3 is essentially\
    \ the same as\n   category 1.\n   The group member might be out of synchrony with\
    \ the GCKS if it\n   receives a rekey message having a sequence number that is\
    \ more than\n   one greater than the last sequence number processed.  This is\
    \ one\n   means by which the GCKS member detects that it has missed a rekey\n\
    \   message.  Alternatively, the data-security application, upon\n   detecting\
    \ that it is using an out-of-date key, may notify the group\n   key management\
    \ module.  The action taken by the GCKS member is a\n   matter of group policy.\
    \  The GCKS member should log the condition and\n   may contact the GCKS to rerun\
    \ the re-registration protocol to obtain\n   a fresh group key.  The group policy\
    \ needs to take into account\n   boundary conditions, such as reordered rekey\
    \ messages when rekeying\n   is so frequent that two messages might get reordered\
    \ in an IP\n   network.  The group key policy also needs to take into account\
    \ the\n   potential for denial of service attacks where an attacker delays or\n\
    \   deletes a rekey message in order to force a subnetwork or subset of\n   the\
    \ members to simultaneously contact the GCKS.\n   If a group member becomes out-of-synch\
    \ with the GSA then it should\n   re-register with the GCKS.  However, in many\
    \ cases there are other,\n   simpler methods for re-synching with the group:\n\
    \      o  The member can open a simple unprotected connection (e.g., TCP)\n  \
    \       with the GCKS and obtain the current (or several recent) rekey\n     \
    \    messages.  Note that there is no need for authentication or\n         encryption\
    \ here, since the rekey message is already signed and\n         is multicast in\
    \ the clear.  One may think that this opens the\n         GCKS to DoS attacks\
    \ by many bogus such requests.  This,\n         however, does not seem to worsen\
    \ the situation; in fact,\n         bombarding the GCKS with bogus resynch requests\
    \ would be much\n         more problematic.\n      o  The GCKS can post the rekey\
    \ messages on some public site (e.g.,\n         a web site) and the out-of-synch\
    \ member can obtain the rekey\n         messages from that site.\n   The GCKS\
    \ may always provide all three ways of resynching (i.e., re-\n   registration,\
    \ simple TCP, and public posting).  This way, the member\n   may choose how to\
    \ resynch; it also avoids adding yet another field to\n   the policy token [GSPT].\
    \  Alternatively, a policy token may contain a\n   field specifying one or more\
    \ methods supported for resynchronization\n   of a GSA.\n"
- title: 5.4.  State-of-the-art on Reliable Multicast Infrastructure
  contents:
  - "5.4.  State-of-the-art on Reliable Multicast Infrastructure\n   The rekey message\
    \ may be sent using reliable multicast.  There are\n   several types of reliable\
    \ multicast protocols with different\n   properties.  However, there are no standards\
    \ track reliable multicast\n   protocols published at this time, although IETF\
    \ consensus has been\n   reached on two protocols that are intended to go into\
    \ the standards\n   track [NORM,RFC3450].  Thus, this document does not recommend\
    \ a\n   particular reliable multicast protocol or set of protocols for the\n \
    \  purpose of reliable group rekeying.  The suitability of NAK-based,\n   ACK-based\
    \ or other reliable multicast methods is determined by the\n   application needs\
    \ and operational environment.  In the future, group\n   key management protocols\
    \ may choose to use particular standards-based\n   approaches that meet the needs\
    \ of the particular application.  A\n   secure announcement facility may be needed\
    \ to signal the use of a\n   reliable multicast protocol, which could be specified\
    \ as part of\n   group policy.  The reliable multicast announcement and policy\n\
    \   specification, however, can only follow the establishment of reliable\n  \
    \ multicast standards and are not considered further in this document.\n   Today,\
    \ the several MSEC group key management protocols support\n   sequencing of the\
    \ rekey messages through a sequence number, which is\n   authenticated along with\
    \ the rekey message.  A sender of rekey\n   messages may re-transmit multiple\
    \ copies of the message provided that\n   they have the same sequence number.\
    \  Thus, re-sending the message is\n   a rudimentary means of overcoming loss\
    \ along the network path.  A\n   member who receives the rekey message will check\
    \ the sequence number\n   to detect duplicate and missing rekey messages.  The\
    \ member receiver\n   will discard duplicate messages that it receives.  Large\
    \ rekey\n   messages, such as those that contain LKH or OFT tree structures,\n\
    \   might benefit from transport-layer FEC in the future, when\n   standards-based\
    \ methods become available.  It is unlikely that\n   forward error correction\
    \ (FEC) methods will benefit short rekey\n   messages that fit within a single\
    \ message.  In this case, FEC\n   degenerates to simple retransmission of the\
    \ message.\n"
- title: 5.5.  Implosion
  contents:
  - "5.5.  Implosion\n   Implosion may occur due to one of two reasons.  First, recall\
    \ that\n   one of the goals of the rekey protocol is to synchronize a GSA.  When\n\
    \   a rekey or Data SA expires, members may contact the GCKS for an\n   update.\
    \  If all, or even many, members contact the GCKS at about the\n   same time,\
    \ the GCKS might not be able to handle all those messages.\n   We refer to this\
    \ as an out-of-sync implosion.\n   The second case is in the reliable delivery\
    \ of rekey messages.\n   Reliable multicast protocols use feedback (NACK or ACK)\
    \ to determine\n   which packets must be retransmitted.  Packet losses may result\
    \ in\n   many members sending NACKs to the GCKS.  We refer to this as feedback\n\
    \   implosion.\n   The implosion problem has been studied extensively in the context\
    \ of\n   reliable multicasting.  The proposed feedback suppression and\n   aggregation\
    \ solutions might be useful in the GKM context as well.\n   Members may wait a\
    \ random time before sending an out-of-sync or\n   feedback message.  Meanwhile,\
    \ members might receive the necessary key\n   updates and therefore not send a\
    \ feedback message.  An alternative\n   solution is to have the members contact\
    \ one of several registration\n   servers when they are out-of-sync.  This requires\
    \ GSA synchronization\n   between the multiple registration servers.\n   Feedback\
    \ aggregation and local recovery employed by some reliable\n   multicast protocols\
    \ are not easily adaptable to transport of rekey\n   messages.  Aggregation raises\
    \ authentication issues.  Local recovery\n   is more complex because members need\
    \ to establish SAs with the local\n   repair server.  Any member of the group\
    \ or a subordinate GCKS may\n   serve as a repair server, which can be responsible\
    \ for resending\n   rekey messages.\n   Members may use the group SA, more specifically\
    \ the Rekey SA, to\n   authenticate requests sent to the repair server.  However,\
    \ replay\n   protection requires maintaining state at members as well as repair\n\
    \   servers.  Authentication of repair requests is meant to protect\n   against\
    \ DoS attacks.  Note also that an out-of-sync member may use an\n   expired Rekey\
    \ SA to authenticate repair requests, which requires\n   repair servers to accept\
    \ messages protected by old SAs.\n   Alternatively, a simple mechanism may be\
    \ employed to achieve local\n   repair efficiently.  Each member receives a set\
    \ of local repair\n   server addresses as part of group operation policy information.\
    \  When\n   a member does not receive a rekey message, it can send a \"Retransmit\n\
    \   replay message(s) with sequence number n and higher\" message to one\n   of\
    \ the local repair servers.  The repair server can either ignore the\n   request\
    \ if it is busy or retransmit the requested rekey messages as\n   received from\
    \ the GCKS.  The repair server, which is also another\n   member may choose to\
    \ serve only m requests in a given time period\n   (i.e., rate limits responses)\
    \ or per a given rekey message.  Rate\n   limiting the requests and responses\
    \ protects the repair servers as\n   well as other members of the group from DoS\
    \ attacks.\n"
- title: 5.6.  Incorporating Group Key Management Algorithms
  contents:
  - "5.6.  Incorporating Group Key Management Algorithms\n   Group key management\
    \ algorithms make rekeying scalable.  Large group\n   rekeying without employing\
    \ GKMAs is prohibitively expensive.\n   Following are some considerations in selecting\
    \ a GKMA:\n      o  Protection against collusion.\n         Members (or non-members)\
    \ should not be able to collaborate to\n         deduce keys for which they are\
    \ not privileged (following the\n         GKMA key distribution rules).\n    \
    \  o  Forward access control\n         The GKMA should ensure that departing members\
    \ cannot get access\n         to future group data.\n      o  Backward access\
    \ control\n         The GKMA should ensure that joining members cannot decrypt\
    \ past\n         data.\n"
- title: 5.7.  Stateless, Stateful, and Self-healing Rekeying Algorithms
  contents:
  - "5.7.  Stateless, Stateful, and Self-healing Rekeying Algorithms\n   We classify\
    \ group key management algorithms into three categories:\n   stateful, stateless,\
    \ and self-healing.\n   Stateful algorithms [RFC2627,OFT] use KEKs from past rekeying\n\
    \   instances to encrypt (protect) KEKs corresponding to the current and\n   future\
    \ rekeying instances.  The main disadvantage in these schemes is\n   that if a\
    \ member were offline or otherwise failed to receive KEKs\n   from a past rekeying\
    \ instance, it may no longer be able to\n   synchronize its GSA even though it\
    \ can receive KEKs from all future\n   rekeying instances.  The only solution\
    \ is to contact the GCKS\n   explicitly for resynchronization.  Note that the\
    \ KEKs for the first\n   rekeying instance are protected by the Registration SA.\
    \  Recall that\n   communication in that phase is one to one, and therefore it\
    \ is easy\n   to ensure reliable delivery.\n   Stateless GKMAs [SD1,SD2] encrypt\
    \ rekey messages with KEKs sent\n   during the registration protocol.  Since rekey\
    \ messages are\n   independent of any past rekey messages (i.e., that are not\
    \ protected\n   by KEKs therein), a member may go offline but continue to decipher\n\
    \   future communications.  However, stateless GKMAs offer no mechanisms\n   to\
    \ recover past rekeying messages.  Stateless rekeying may be\n   relatively inefficient,\
    \ particularly for immediate (not batch)\n   rekeying in highly dynamic groups.\n\
    \   In self-healing schemes [Self-Healing], a member can reconstruct a\n   lost\
    \ rekey message as long as it receives some past and some future\n   rekey messages.\n"
- title: 5.8.  Interoperability of a GKMA
  contents:
  - "5.8.  Interoperability of a GKMA\n   Most GKMA specifications do not specify\
    \ packet formats, although many\n   group key management algorithms need format\
    \ specification for\n   interoperability.  There are several alternative ways\
    \ to manage key\n   trees and to number nodes within key trees.  The following\n\
    \   information is needed during initialization of a Rekey SA or included\n  \
    \ with each GKMA packet.\n      o  GKMA name (e.g., LKH, OFT, Subset Difference)\n\
    \      o  GKMA version number (implementation specific).  Version may\n      \
    \   imply several things such as the degree of a key tree,\n         proprietary\
    \ enhancements, and qualify another field such as a\n         key ID.\n      o\
    \  Number of keys or largest ID\n      o  Version-specific data\n      o  Per-key\
    \ information:\n         -  key ID,\n         -  key lifetime (creation/expiration\
    \ data) ,\n         -  encrypted key, and\n         -  encryption key's ID (optional).\n\
    \   Key IDs may change in some implementations in which case one needs to\n  \
    \ send:\n         o List of <old id, new id> pairs.\n"
- title: 6.  Group Security Association
  contents:
  - "6.  Group Security Association\n   The GKM architecture defines the interfaces\
    \ between the registration,\n   rekey, and data security protocols in terms of\
    \ the Security\n   Associations (SAs) of those protocols.  By isolating these\
    \ protocols\n   behind a uniform interface, the architecture allows implementations\n\
    \   to use protocols best suited to their needs.  For example, a rekey\n   protocol\
    \ for a small group could use multiple unicast transmissions\n   with symmetric\
    \ authentication, while a rekey protocol for a large\n   group could use IP Multicast\
    \ with packet-level Forward Error\n   Correction and source authentication.\n\
    \   The group key management architecture provides an interface between\n   the\
    \ security protocols and the group SA (GSA).  The GSA consists of\n   three SAs:\
    \ Registration SA, Rekey SA, and Data SA.  The Rekey SA is\n   optional.  There\
    \ are two cases in defining the relationships between\n   the three SAs.  In both\
    \ cases, the Registration SA protects the\n   registration protocol.\n   Case\
    \ 1: Group key management is done WITHOUT using a Rekey SA.  The\n      registration\
    \ protocol initializes and updates one or more Data SAs\n      (having TPKs to\
    \ protect files or streams).  Each Data SA\n      corresponds to a single group,\
    \ which may have more than one Data\n      SA.\n   Case 2: Group key management\
    \ is done WITH a Rekey SA to protect the\n      rekey protocol.  The registration\
    \ protocol initializes the one or\n      more Rekey SAs as well as zero or more\
    \ Data SAs, upon successful\n      completion.  When a Data SA is not initialized\
    \ in the registration\n      protocol, initialization is done in the rekey protocol.\
    \  The rekey\n      protocol updates Rekey SA(s) AND establishes Data SA(s).\n"
- title: 6.1.  Group Policy
  contents:
  - "6.1.  Group Policy\n   Group policy is described in detail in the Group Security\
    \ Policy\n   Token document [GSPT].  Group policy can be distributed through group\n\
    \   announcements, key management protocols, and other out-of-band means\n   (e.g.,\
    \ via a web page).  The group key management protocol carries\n   cryptographic\
    \ policies of the SAs and the keys it establishes, as\n   well as additional policies\
    \ for the secure operation of the group.\n   The acceptable cryptographic policies\
    \ for the registration protocol,\n   which may run over TLS [TLS], IPsec, or IKE,\
    \ are not conveyed in the\n   group key management protocol since they precede\
    \ any of the key\n   management exchanges.  Thus, a security policy repository\
    \ having some\n   access protocol may need to be queried prior to establishing\
    \ the\n   key-management session, to determine the initial cryptographic\n   policies\
    \ for that establishment.  This document assumes the existence\n   of such a repository\
    \ and protocol for GCKS and member policy queries.\n   Thus group security policy\
    \ will be represented in a policy repository\n   and accessible using a policy\
    \ protocol.  Policy distribution may be a\n   push or a pull operation.\n   The\
    \ group key management architecture assumes that the following\n   group policy\
    \ information may be externally managed, e.g., by the\n   content owner, group\
    \ conference administrator or group owner:\n      o  the identity of the Group\
    \ owner, the authentication method, and\n         the delegation method for identifying\
    \ a GCKS for the group;\n      o  the group GCKS, authentication method, and delegation\
    \ method\n         for any subordinate GCKSs for the group;\n      o  the group\
    \ membership rules or list and authentication method.\n   There are two additional\
    \ policy-related requirements external to\n   group key management.\n      o \
    \ There is an authentication and authorization infrastructure\n         such as\
    \ X.509 [RFC3280], SPKI [RFC2693], or a pre-shared key\n         scheme, in accordance\
    \ with the group policy for a particular\n         group.\n      o  There is an\
    \ announcement mechanism for secure groups and\n         events, which operates\
    \ according to group policy for a\n         particular group.\n   Group policy\
    \ determines how the registration and rekey protocols\n   initialize or update\
    \ Rekey and Data SAs.  The following sections\n   describe potential information\
    \ sent by the GCKS for the Rekey and\n   Data SAs.  A member needs the information\
    \ specified in the next\n   sections to establish Rekey and Data SAs.\n"
- title: 6.2.  Contents of the Rekey SA
  contents:
  - "6.2.  Contents of the Rekey SA\n   The Rekey SA protects the rekey protocol.\
    \  It contains cryptographic\n   policy, Group Identity, and Security Parameter\
    \ Index (SPI) [RFC2401]\n   to uniquely identify an SA, replay protection information,\
    \ and key\n   protection keys.\n"
- title: 6.2.1.  Rekey SA Policy
  contents:
  - "6.2.1.  Rekey SA Policy\n      o  GROUP KEY MANAGEMENT ALGORITHM\n         This\
    \ represents the group key revocation algorithm that\n         enforces forward\
    \ and backward access control.  Examples of key\n         revocation algorithms\
    \ include LKH, LKH+, OFT, OFC, and Subset\n         Difference [RFC2627,OFT,TAXONOMY,SD1,SD2].\
    \  If the key\n         revocation algorithm is NULL, the Rekey SA contains only\
    \ one\n         KEK, which serves as the group KEK.  The rekey messages\n    \
    \     initialize or update Data SAs as usual.  However, the Rekey SA\n       \
    \  itself can be updated (the group KEK can be rekeyed) when\n         members\
    \ join or the KEK is about to expire.  Leave rekeying is\n         done by re-initializing\
    \ the Rekey SA through the rekey\n         protocol.\n      o  KEK ENCRYPTION\
    \ ALGORITHM\n         This specifies a standard encryption algorithm such as 3DES\
    \ or\n         AES, and also the KEK KEY LENGTH.\n      o  AUTHENTICATION ALGORITHM\n\
    \         This algorithm uses digital signatures for GCKS authentication\n   \
    \      (since all shared secrets are known to some or all members of\n       \
    \  the group), or some symmetric secret in computing MACs for\n         group\
    \ authentication.  Symmetric authentication provides weaker\n         authentication\
    \ in that any group member can impersonate a\n         particular source.  The\
    \ AUTHENTICATION KEY LENGTH is also to be\n         specified.\n      o  CONTROL\
    \ GROUP ADDRESS\n         This address is used for multicast transmission of rekey\n\
    \         messages.  This information is sent over the control channel\n     \
    \    such as in an ANNOUNCEMENT protocol or call setup message.  The\n       \
    \  degree to which the control group address is protected is a\n         matter\
    \ of group policy.\n      o  REKEY SERVER ADDRESS\n         This address allows\
    \ the registration server to be a different\n         entity from the server used\
    \ for rekeying, such as for future\n         invocations of the registration and\
    \ rekey protocols.  If the\n         registration server and the rekey server\
    \ are two different\n         entities, the registration server sends the rekey\
    \ server's\n         address as part of the Rekey SA.\n"
- title: 6.2.2.  Group Identity
  contents:
  - "6.2.2.  Group Identity\n   The group identity accompanies the SA (payload) information\
    \ as an\n   identifier if the specific group key management protocol allows\n\
    \   multiple groups to be initialized in a single invocation of the\n   registration\
    \ protocol, or multiple groups to be updated in a single\n   rekey message.  It\
    \ is often simpler to restrict each registration\n   invocation to a single group,\
    \ but such a restriction is unnecessary.\n   It is always necessary to identify\
    \ the group when establishing a\n   Rekey SA, either implicitly through an SPI\
    \ or explicitly as an SA\n   parameter.\n"
- title: 6.2.3.  KEKs
  contents:
  - "6.2.3.  KEKs\n   Corresponding to the key management algorithm, the Rekey SA\
    \ contains\n   one or more KEKs.  The GCKS holds the key encrypting keys of the\n\
    \   group, while the members receive keys following the specification of\n   the\
    \ key management algorithm.  When there are multiple KEKs for a\n   group (as\
    \ in an LKH tree), each KEK needs to be associated with a Key\n   ID, which is\
    \ used to identify the key needed to decrypt it.  Each KEK\n   has a LIFETIME\
    \ associated with it, after which the KEK expires.\n"
- title: 6.2.4.  Authentication Key
  contents:
  - "6.2.4.  Authentication Key\n   The GCKS provides a symmetric or public key for\
    \ authentication of its\n   rekey messages.  Symmetric key authentication is appropriate\
    \ only\n   when all group members can be trusted not to impersonate the GCKS.\n\
    \   The architecture does not rule out methods for deriving symmetric\n   authentication\
    \ keys at the member [RFC2409] rather than pushing them\n   from the GCKS.\n"
- title: 6.2.5.  Replay Protection
  contents:
  - "6.2.5.  Replay Protection\n   Rekey messages need to be protected from replay/reflection\
    \ attacks.\n   Sequence numbers are used for this purpose, and the Rekey SA (or\n\
    \   protocol) contains this information.\n"
- title: 6.2.6.  Security Parameter Index (SPI)
  contents:
  - "6.2.6.  Security Parameter Index (SPI)\n   The tuple <Group identity, SPI> uniquely\
    \ identifies a Rekey SA.  The\n   SPI changes each time the KEKs change.\n"
- title: 6.3.  Contents of the Data SA
  contents:
  - "6.3.  Contents of the Data SA\n   The GCKS specifies the data security protocol\
    \ used for secure\n   transmission of data from sender(s) to receiving members.\
    \  Examples\n   of data security protocols include IPsec ESP [RFC2401] and SRTP\n\
    \   [RFC3711].  While the contents of each of these protocols are out of\n   the\
    \ scope of this document, we list the information sent by the\n   registration\
    \ protocol (or the rekey protocol) to initialize or update\n   the Data SA.\n"
- title: 6.3.1.  Group Identity
  contents:
  - "6.3.1.  Group Identity\n   The Group identity accompanies SA information when\
    \ Data SAs are\n   initialized or rekeyed for multiple groups in a single invocation\
    \ of\n   the registration protocol or in a single Rekey message.\n"
- title: 6.3.2.  Source Identity
  contents:
  - "6.3.2.  Source Identity\n   The SA includes source identity information when\
    \ the group owner\n   chooses to reveal source identity to authorized members\
    \ only.  A\n   public channel such as the announcement protocol is only appropriate\n\
    \   when there is no need to protect source or group identities.\n"
- title: 6.3.3.  Traffic Protection Keys
  contents:
  - "6.3.3.  Traffic Protection Keys\n   Regardless of the data security protocol\
    \ used, the GCKS supplies the\n   TPKs, or information to derive TPKs for traffic\
    \ protection.\n"
- title: 6.3.4.  Data Authentication Keys
  contents:
  - "6.3.4.  Data Authentication Keys\n   Depending on the data authentication method\
    \ used by the data security\n   protocol, group key management may pass one or\
    \ more keys, functions\n   (e.g., TESLA [TESLA-INFO,TESLA-SPEC]), or other parameters\
    \ used for\n   authenticating streams or files.\n"
- title: 6.3.5.  Sequence Numbers
  contents:
  - "6.3.5.  Sequence Numbers\n   The GCKS passes sequence numbers when needed by\
    \ the data security\n   protocol, for SA synchronization and replay protection.\n"
- title: 6.3.6.  Security Parameter Index (SPI)
  contents:
  - "6.3.6.  Security Parameter Index (SPI)\n   The GCKS may provide an identifier\
    \ as part of the Data SA contents\n   for data security protocols that use an\
    \ SPI or similar mechanism to\n   identify an SA or keys within an SA.\n"
- title: 6.3.7.  Data SA policy
  contents:
  - "6.3.7.  Data SA policy\n   The Data SA parameters are specific to the data security\
    \ protocol but\n   generally include encryption algorithm and parameters, the\
    \ source\n   authentication algorithm and parameters, the group authentication\n\
    \   algorithm and parameters, and/or replay protection information.\n"
- title: 7.  Scalability Considerations
  contents:
  - "7.  Scalability Considerations\n   The area of group communications is quite\
    \ diverse.  In\n   teleconferencing, a multipoint control unit (MCU) may be used\
    \ to\n   aggregate a number of teleconferencing members into a single session;\n\
    \   MCUs may be hierarchically organized as well.  A loosely coupled\n   teleconferencing\
    \ session [RFC3550] has no central controller but is\n   fully distributed and\
    \ end-to-end.  Teleconferencing sessions tend to\n   have at most dozens of participants.\
    \  However, video broadcast that\n   uses multicast communications and media-on-demand\
    \ that uses unicast\n   are large-scale groups numbering hundreds to millions\
    \ of\n   participants.\n   As described in the Requirements section, Section 2,\
    \ the group key\n   management architecture supports multicast applications with\
    \ a single\n   sender.  The architecture described in this paper supports large-\n\
    \   scale operation through the following features.\n   1. There is no need for\
    \ a unicast exchange to provide data keys to a\n      security protocol for members\
    \ who have previously registered in\n      the particular group; data keys can\
    \ be pushed in the rekey\n      protocol.\n   2. The registration and rekey protocols\
    \ are separable to allow\n      flexibility in how members receive group secrets.\
    \  A group may use\n      a smart-card based system in place of the registration\
    \ protocol,\n      for example, to allow the rekey protocol to be used with no\
    \ back\n      channel for broadcast applications such as television conditional\n\
    \      access systems.\n   3. The registration and rekey protocols support new\
    \ keys, algorithms,\n      authentication mechanisms and authorization infrastructures\
    \ in the\n      architecture.  When the authorization infrastructure supports\n\
    \      delegation, as in X.509 and SPKI, the GCKS function can be\n      distributed\
    \ as shown in Figure 3 below.\n   The first feature in the list allows fast keying\
    \ of data security\n   protocols when the member already belongs to the group.\
    \  While this\n   is realistic for subscriber groups and customers of service\
    \ providers\n   who offer content events, it may be too restrictive for applications\n\
    \   that allow member enrollment at the time of the event.  The MSEC\n   group\
    \ key management architecture suggests hierarchically organized\n   key distribution\
    \ to handle potential mass simultaneous registration\n   requests.  The Figure\
    \ 3 configuration may be needed when conventional\n   clustering and load balancing\
    \ solutions of a central GCKS site cannot\n   meet customer requirements.  Unlike\
    \ conventional caching and content\n   distribution networks, however, the configuration\
    \ shown in Figure 3\n   has additional security ramifications for physical security\
    \ of a\n   GCKS.\n                   +----------------------------------------+\n\
    \                   |       +-------+                        |\n             \
    \      |       |  GCKS |                        |\n                   |      \
    \ +-------+                        |\n                   |         |   ^     \
    \                     |\n                   |         |   |                  \
    \        |\n                   |         |   +---------------+          |\n  \
    \                 |         |       ^           ^          |\n               \
    \    |         |       |    ...    |          |\n                   |        \
    \ |   +--------+  +--------+     |\n                   |         |   | MEMBER\
    \ |  | MEMBER |     |\n                   |         |   +--------+  +--------+\
    \     |\n                   |         v                              |\n     \
    \              |         +-------------+                |\n                  \
    \ |         |             |                |\n                   |         v \
    \     ...    v                |\n                   |     +-------+   +-------+\
    \              |\n                   |     |  GCKS |   |  GCKS |             \
    \ |\n                   |     +-------+   +-------+              |\n         \
    \          |         |   ^                          |\n                   |  \
    \       |   |                          |\n                   |         |   +---------------+\
    \          |\n                   |         |       ^           ^          |\n\
    \                   |         |       |    ...    |          |\n             \
    \      |         |   +--------+  +--------+     |\n                   |      \
    \   |   | MEMBER |  | MEMBER |     |\n                   |         |   +--------+\
    \  +--------+     |\n                   |         v                          \
    \    |\n                   |        ...                             |\n      \
    \             +----------------------------------------+\n               Figure\
    \ 3: Hierarchically Organized Key Distribution\n   More analysis and work is needed\
    \ on the protocol instantiations of\n   the group key management architecture,\
    \ to determine how effectively\n   and securely the architecture can support large-scale\
    \ multicast\n   applications.  In addition to being as secure as pairwise key\n\
    \   management against man-in-the-middle, replay, and reflection attacks,\n  \
    \ group key management protocols have additional security needs.\n   Unlike pairwise\
    \ key management, group key management needs to be\n   secure against attacks\
    \ by group members who attempt to impersonate a\n   GCKS or disrupt the operation\
    \ of a GCKS, as well as by non-members.\n   Thus, secure groups need to converge\
    \ to a common group key when\n   members are attacking the group, joining and\
    \ leaving the group, or\n   being evicted from the group.  Group key management\
    \ protocols also\n   need to be robust when DoS attacks or network partition leads\
    \ to\n   large numbers of synchronized requests.  An instantiation of group\n\
    \   key management, therefore, needs to consider how GCKS operation might\n  \
    \ be distributed across multiple GCKSs designated by the group owner to\n   serve\
    \ keys on behalf of a designated GCKS.  GSAKMP [GSAKMP] protocol\n   uses the\
    \ policy token and allows designating some of the members as\n   subordinate GCKSs\
    \ to address this scalability issue.\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   This memo describes MSEC key management architecture.\
    \  This\n   architecture will be instantiated in one or more group key management\n\
    \   protocols, which must be protected against man-in-the-middle,\n   connection\
    \ hijacking, replay, or reflection of past messages, and\n   denial of service\
    \ attacks.\n   Authenticated key exchange [STS,SKEME,RFC2408,RFC2412,RFC2409]\n\
    \   techniques limit the effects of man-in-the-middle and connection\n   hijacking\
    \ attacks.  Sequence numbers and low-computation message\n   authentication techniques\
    \ can be effective against replay and\n   reflection attacks.  Cookies [RFC2522],\
    \ when properly implemented,\n   provide an efficient means to reduce the effects\
    \ of denial of service\n   attacks.\n   This memo does not address attacks against\
    \ key management or security\n   protocol implementations such as so-called type\
    \ attacks that aim to\n   disrupt an implementation by such means as buffer overflow.\
    \  The\n   focus of this memo is on securing the protocol, not on implementing\n\
    \   the protocol.\n   While classical techniques of authenticated key exchange\
    \ can be\n   applied to group key management, new problems arise with the sharing\n\
    \   of secrets among a group of members:  group secrets may be disclosed\n   by\
    \ a member of the group, and group senders may be impersonated by\n   other members\
    \ of the group.  Key management messages from the GCKS\n   should not be authenticated\
    \ using shared symmetric secrets unless all\n   members of the group can be trusted\
    \ not to impersonate the GCKS or\n   each other.  Similarly, members who disclose\
    \ group secrets undermine\n   the security of the entire group.  Group owners\
    \ and GCKS\n   administrators must be aware of these inherent limitations of group\n\
    \   key management.\n   Another limitation of group key management is policy complexity.\n\
    \   While peer-to-peer security policy is an intersection of the policy\n   of\
    \ the individual peers, a group owner sets group security policy\n   externally\
    \ in secure groups.  This document assumes there is no\n   negotiation of cryptographic\
    \ or other security parameters in group\n   key management.  Group security policy,\
    \ therefore, poses new risks to\n   members who send and receive data from secure\
    \ groups.  Security\n   administrators, GCKS operators, and users need to determine\
    \ minimal\n   acceptable levels of security (e.g., authentication and admission\n\
    \   policy of the group, key lengths, cryptographic algorithms and\n   protocols\
    \ used) when joining secure groups.\n   Given the limitations and risks of group\
    \ security, the security of\n   the group key management registration protocol\
    \ should be as good as\n   the base protocols on which it is developed, such as\
    \ IKE, IPsec, TLS,\n   or SSL.  The particular instantiations of this group key\
    \ management\n   architecture must ensure that the high standards for authenticated\n\
    \   key exchange are preserved in their protocol specifications, which\n   will\
    \ be Internet standards-track documents that are subject to\n   review, analysis,\
    \ and testing.\n   The second protocol, the group key management rekey protocol,\
    \ is new\n   and has unknown risks.  The source-authentication risks described\n\
    \   above are obviated by the use of public-key cryptography.  The use of\n  \
    \ multicast delivery may raise additional security issues such as\n   reliability,\
    \ implosion, and denial-of-service attacks based upon the\n   use of multicast.\
    \  The rekey protocol specification needs to offer\n   secure solutions to these\
    \ problems.  Each instantiation of the rekey\n   protocol, such as the GSAKMP\
    \ Rekey or the GDOI Groupkey-push\n   operations, need to validate the security\
    \ of their rekey\n   specifications.\n   Novelty and complexity are the biggest\
    \ risks to group key management\n   protocols.  Much more analysis and experience\
    \ are needed to ensure\n   that the architecture described in this document can\
    \ provide a well-\n   articulated standard for security and risks of group key\
    \ management.\n"
- title: 9.  Acknowledgments
  contents:
  - "9.  Acknowledgments\n   The GKM Building Block [GKMBB] I-D by SMuG was a precursor\
    \ to this\n   document; thanks to Thomas Hardjono and Hugh Harney for their\n\
    \   efforts.  During the course of preparing this document, Andrea\n   Colegrove,\
    \ Brian Weis, George Gross, and several others in the MSEC\n   WG and GSEC and\
    \ SMuG research groups provided valuable comments that\n   helped improve this\
    \ document.  The authors appreciate their\n   contributions to this document.\n"
- title: 10.  Informative References
  contents:
  - "10.  Informative References\n   [BatchRekey]    Yang, Y. R., et al., \"Reliable\
    \ Group Rekeying: Design\n                   and Performance Analysis\", Proc.\
    \ ACM SIGCOMM, San\n                   Diego, CA, August 2001.\n   [CLIQUES] \
    \      Steiner, M., Tsudik, G., and M. Waidner, \"CLIQUES: A\n               \
    \    New Approach to Group Key Agreement\", IEEE ICDCS 97,\n                 \
    \  May 1997\n   [FN93]          Fiat, A. and M. Naor, \"Broadcast Encryption,\
    \ Advances\n                   in Cryptology\", CRYPTO 93 Proceedings, Lecture\
    \ Notes\n                   in Computer Science, Vol. 773, pp. 480-491, 1994.\n\
    \   [GKMBB]         Harney, H., M. Baugher, and T. Hardjono, \"GKM\n         \
    \          Building Block: Group Security Association (GSA)\n                \
    \   Definition,\" Work in Progress, September 2000.\n   [GSAKMP]        Harney,\
    \ H., Colegrove, A., Harder, E., Meth, U., and\n                   R.  Fleischer,\
    \ \"Group Secure Association Key\n                   Management Protocol\", Work\
    \ in Progress, February\n                   2003.\n   [GSPT]          Hardjono,\
    \ T., Harney, H., McDaniel, P., Colegrove,\n                   A., and P.  Dinsmore,\
    \ \"The MSEC Group Security Policy\n                   Token\", Work in Progress,\
    \ August 2003.\n   [H.235]         International Telecommunications Union, \"\
    Security and\n                   Encryption for H-Series (H.323 and other H.245-based)\n\
    \                   Multimedia Terminals\", ITU-T Recommendation H.235\n     \
    \              Version 3, Work in progress, 2001.\n   [JKKV94]        Just, M.,\
    \ Kranakis, E., Krizanc, D., and P. van\n                   Oorschot, \"On Key\
    \ Distribution via True\n                   Broadcasting\", Proc. 2nd ACM Conference\
    \ on Computer\n                   and Communications Security, pp. 81-88, November\n\
    \                   1994.\n   [MARKS]         Briscoe, B., \"MARKS: Zero Side\
    \ Effect Multicast Key\n                   Management Using Arbitrarily Revealed\
    \ Key Sequences\",\n                   Proc.  First International Workshop on\
    \ Networked\n                   Group Communication (NGC), Pisa, Italy, November\n\
    \                   1999.\n   [MIKEY]         Arkko, J., Carrara, E., Lindholm,\
    \ F., Naslund, M.,\n                   and K. Norrman, \"MIKEY: Multimedia Internet\
    \ KEYing\",\n                   RFC 3830, August 2004.\n   [MSEC-Arch]     Hardjono,\
    \ T. and B. Weis, \"The Multicast Group\n                   Security Architecture\"\
    , RFC 3740, March 2004.\n   [MVV]           Menzes, A.J., van Oorschot, P.C.,\
    \ and S.A. Vanstone,\n                   \"Handbook of Applied Cryptography\"\
    , CRC Press, 1996.\n   [NORM]          Adamon, B., Bormann, C., Handley, M., and\
    \ J. Macker,\n                   \"Negative-acknowledgment (NACK)-Oriented Reliable\n\
    \                   Multicast (NORM) Protocol\", RFC 3940, November 2004.\n  \
    \ [OFT]           Balenson, D., McGrew, P.C., and A. Sherman, \"Key\n        \
    \           Management for Large Dynamic Groups: One-Way Function\n          \
    \         Trees and Amortized Initialization\", IRTF Work in\n               \
    \    Progress, August 2000.\n   [RFC2093]       Harney, H. and C. Muckenhirn,\
    \ \"Group Key Management\n                   Protocol (GKMP) Specification\",\
    \ RFC 2093, July 1997.\n   [RFC2094]       Harney, H., and C. Muckenhirn, \"Group\
    \ Key Management\n                   Protocol (GKMP) Architecture\" RFC 2094,\
    \ July 1997.\n   [RFC2326]       Schulzrinne, H., Rao, A., and R. Lanphier, \"\
    Real Time\n                   Streaming Protocol (RTSP)\", RFC 2326, April 1998.\n\
    \   [RFC2327]       Handley, M. and V. Jacobson, \"SDP: Session\n            \
    \       Description Protocol\", RFC 2327, April 1998.\n   [RFC2367]       McDonald,\
    \ D., Metz, C., and B. Phan, \"PF_KEY Key\n                   Management API,\
    \ Version 2\", RFC 2367, July 1998.\n   [RFC2401]       Kent, S. and R. Atkinson,\
    \ \"Security Architecture for\n                   the Internet Protocol\", RFC\
    \ 2401, November 1998.\n   [RFC2408]       Maughan, D., Schertler, M., Schneider,\
    \ M., and J.\n                   Turner, \"Internet Security Association and Key\n\
    \                   Management Protocol (ISAKMP)\", RFC 2408, November\n     \
    \              1998.\n   [RFC2409]       Harkins, D. and D. Carrel, \"The Internet\
    \ Key Exchange\n                   (IKE)\", RFC 2409, November 1998.\n   [RFC2412]\
    \       Orman, H., \"The OAKLEY Key Determination Protocol\",\n              \
    \     RFC 2412, November 1998.\n   [RFC2522]       Karn, P. and W. Simpson, \"\
    Photuris: Session-Key\n                   Management Protocol\", RFC 2522, March\
    \ 1999.\n   [RFC2693]       Ellison, C., Frantz, B., Lampson, B., Rivest, R.,\n\
    \                   Thomas, B., and T. Ylonen, \"SPKI Certificate Theory\",\n\
    \                   RFC 2693, September 1999.\n   [RFC3261]       Rosenberg, J.,\
    \ Schulzrinne, H., Camarillo, G.,\n                   Johnston, A., Peterson,\
    \ J., Sparks, R., Handley, M.,\n                   and E. Schooler, \"SIP: Session\
    \ Initiation Protocol\",\n                   RFC 3261, June 2002.\n   [RFC3280]\
    \       Housley, R., Polk, W., Ford, W., and D. Solo,\n                   \"Internet\
    \ X.509 Public Key Infrastructure Certificate\n                   and Certificate\
    \ Revocation List (CRL) Profile\", RFC\n                   3280, April 2002.\n\
    \   [RFC2627]       Wallner, D., Harder, E., and R. Agee, \"Key Management\n \
    \                  for Multicast: Issues and Architectures\", RFC 2627,\n    \
    \               June 1999.\n   [RFC3450]       Luby, M., Gemmell, J., Vicisano,\
    \ L., Rizzo, L., and\n                   J.  Crowcroft, \"Asynchronous Layered\
    \ Coding (ALC)\n                   Protocol Instantiation\", RFC 3450, December\
    \ 2002.\n   [RFC3547]       Baugher, M., Weis, B., Hardjono, T., and H. Harney,\n\
    \                   \"The Group Domain of Interpretation\", RFC 3547, July\n \
    \                  2003.\n   [RFC3550]       Schulzrinne, H., Casner, S., Frederick,\
    \ R., and V.\n                   Jacobson, \"RTP: A Transport Protocol for Real-Time\n\
    \                   Applications\", STD 64, RFC 3550, July 2003.\n   [RFC3711]\
    \       Baugher, M., McGrew, D., Naslund, M., Carrara, E.,\n                 \
    \  and K.  Norrman, \"The Secure Real-time Transport\n                   Protocol\
    \ (SRTP)\", RFC 3711, March 2004.\n   [SD1]           Naor, D., Naor, M., and\
    \ J. Lotspiech, \"Revocation and\n                   Tracing Schemes for Stateless\
    \ Receiver\", Advances in\n                   Cryptology - CRYPTO, Santa Barbara,\
    \ CA: Springer-\n                   Verlag Inc., LNCS 2139, August 2001.\n   [SD2]\
    \           Naor, M. and B. Pinkas, \"Efficient Trace and Revoke\n           \
    \        Schemes\", Proceedings of Financial Cryptography 2000,\n            \
    \       Anguilla, British West Indies, February 2000.\n   [Self-Healing]  Staddon,\
    \ J., et. al., \"Self-healing Key Distribution\n                   with Revocation\"\
    , Proc. 2002 IEEE Symposium on\n                   Security and Privacy, Oakland,\
    \ CA, May 2002.\n   [SKEME]         H. Krawczyk, \"SKEME: A Versatile Secure Key\
    \ Exchange\n                   Mechanism for Internet\", ISOC Secure Networks\
    \ and\n                   Distributed Systems Symposium, San Diego, 1996.\n  \
    \ [STS]           Diffie, P. van Oorschot, M., and J. Wiener,\n              \
    \     \"Authentication and Authenticated Key Exchanges\",\n                  \
    \ Designs, Codes and Cryptography, 2, 107-125 (1992),\n                   Kluwer\
    \ Academic Publishers.\n   [TAXONOMY]      Canetti, R., et. al., \"Multicast Security:\
    \ A Taxonomy\n                   and some Efficient Constructions\", IEEE INFOCOM,\n\
    \                   1999.\n   [TESLA-INFO]    Perrig, A., Canetti, R., Song, D.,\
    \ Tygar, D., and B.\n                   Briscoe, \"TESLA: Multicast Source Authentication\n\
    \                   Transform Introduction\", Work in Progress, December\n   \
    \                2004.\n   [TESLA-SPEC]    Perrig, A., R. Canetti, and Whillock,\
    \ \"TESLA:\n                   Multicast Source Authentication Transform\n   \
    \                Specification\", Work in Progress, April 2002.\n   [tGSAKMP]\
    \       Harney, H., et. al., \"Tunneled Group Secure\n                   Association\
    \ Key Management Protocol\", Work in\n                   Progress, May 2003.\n\
    \   [TLS]           Dierks, T. and C. Allen, \"The TLS Protocol Version\n    \
    \               1.0,\" RFC 2246, January 1999.\n   [TPM]           Marks, D. and\
    \ B. Turnbull, \"Technical protection\n                   measures:  The Intersection\
    \ of Technology, Law, and\n                   Commercial Licenses\", Workshop\
    \ on Implementation\n                   Issues of the WIPO Copyright Treaty (WCT)\
    \ and the\n                   WIPO Performances and Phonograms Treaty (WPPT),\
    \ World\n                   Intellectual Property Organization, Geneva, December\n\
    \                   6 and 7, 1999.\n   [Wool]          Wool, A., \"Key Management\
    \ for Encrypted broadcast\",\n                   5th ACM Conference on Computer\
    \ and Communications\n                   Security, San Francisco, CA, Nov. 1998.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Mark Baugher\n   Cisco Systems\n   5510 SW Orchid St.\n\
    \   Portland, OR  97219, USA\n   Phone: +1 408-853-4418\n   EMail: mbaugher@cisco.com\n\
    \   Ran Canetti\n   IBM Research\n   30 Saw Mill River Road\n   Hawthorne, NY\
    \ 10532, USA\n   Phone: +1 914-784-7076\n   EMail: canetti@watson.ibm.com\n  \
    \ Lakshminath R. Dondeti\n   Qualcomm\n   5775 Morehouse Drive\n   San Diego,\
    \ CA 92121\n   Phone: +1 858 845 1267\n   EMail: ldondeti@qualcomm.com\n   Fredrik\
    \ Lindholm\n   Ericsson Research\n   SE-16480 Stockholm, Sweden\n   Phone: +46\
    \ 8 58531705\n   EMail: fredrik.lindholm@ericsson.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2005).\n   This\
    \ document is subject to the rights, licenses and restrictions\n   contained in\
    \ BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at ietf-\n   ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
