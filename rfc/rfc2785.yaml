- title: __initial_text__
  contents:
  - "       Methods for Avoiding the \"Small-Subgroup\" Attacks on the\n         \
    \    Diffie-Hellman Key Agreement Method for S/MIME\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2000).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   In some circumstances the use of the Diffie-Hellman key agreement\n\
    \   scheme in a prime order subgroup of a large prime p is vulnerable to\n   certain\
    \ attacks known as \"small-subgroup\" attacks.  Methods exist,\n   however, to\
    \ prevent these attacks.  This document will describe the\n   situations relevant\
    \ to implementations of S/MIME version 3 in which\n   protection is necessary\
    \ and the methods that can be used to prevent\n   these attacks.\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   This document will describe those situations in which protection\
    \ from\n   \"small-subgroup\" type attacks is necessary when using Diffie-Hellman\n\
    \   key agreement [RFC2631] in implementations of S/MIME version 3\n   [RFC2630,\
    \ RFC2633].  Thus, the ephemeral-static and static-static\n   modes of Diffie-Hellman\
    \ will be focused on. Some possible non-S/MIME\n   usages of CMS are also considered,\
    \ though with less emphasis than the\n   cases arising in S/MIME.  The situations\
    \ for which protection is\n   necessary are those in which an attacker could determine\
    \ a\n   substantial portion (i.e. more than a few bits) of a user's private\n\
    \   key.\n   Protecting oneself from these attacks involves certain costs.  These\n\
    \   costs may include additional processing time either when a public key\n  \
    \ is certified or a shared secret key is derived, increased parameter\n   generation\
    \ time, and possibly the licensing of encumbered\n   technologies.  All of these\
    \ factors must be considered when deciding\n   whether or not to protect oneself\
    \ from these attacks, or whether to\n   engineer the application so that protection\
    \ is not necessary.\n   We will not consider \"attacks\" where the other party\
    \ in the key\n   agreement merely forces the shared secret value to be \"weak\"\
    \ (i.e.\n   from a small set of possible values) without attempting to compromise\n\
    \   the private key.  It is not worth the effort to attempt to prevent\n   these\
    \ attacks since the other party in the key agreement gets the\n   shared secret\
    \ and can simply make the plaintext public.\n   The methods described in this\
    \ memo may also be used to provide\n   protection from similar attacks on elliptic\
    \ curve based Diffie-\n   Hellman.\n"
- title: 1.1 Notation
  contents:
  - "1.1 Notation\n   In this document we will use the same notation as in [RFC2631].\
    \  In\n   particular the shared secret ZZ is generated as follows:\n      ZZ =\
    \ g ^ (xb * xa) mod p\n   Note that the individual parties actually perform the\
    \ computations:\n      ZZ = (yb ^ xa)  mod p  = (ya ^ xb)  mod p\n   where ^ denotes\
    \ exponentiation.\n      ya is Party A's public key; ya = g ^ xa mod p\n     \
    \ yb is Party B's public key; yb = g ^ xb mod p\n      xa is Party A's private\
    \ key; xa is in the interval [2, (q - 2)]\n      xb is Party B's private key;\
    \ xb is in the interval [2, (q - 2)]\n      p is a large prime\n      g = h^((p-1)/q)\
    \ mod p, where\n      h is any integer with 1 < h < p-1 such that h^((p-1)/q)\
    \ mod p > 1\n            (g has order q mod p)\n      q is a large prime\n   \
    \   j a large integer such that p=q*j + 1\n   In this discussion, a \"static\"\
    \ public key is one that is certified\n   and is used for more than one key agreement,\
    \ and an \"ephemeral\"\n   public key is one that is not certified but is used\
    \ only one time.\n   The order of an integer y modulo p is the smallest value\
    \ of x greater\n   than 1 such that y^x mod p = 1.\n"
- title: 1.2 Brief Description of Attack
  contents:
  - "1.2 Brief Description of Attack\n   For a complete description of these attacks\
    \ see [LAW] and [LIM].\n   If the other party in an execution of the Diffie-Hellman\
    \ key\n   agreement method has a public key not of the form described above,\n\
    \   but of small order (where small means less than q) then he/she may be\n  \
    \ able to obtain information about the user's private key.  In\n   particular,\
    \ if information on whether or not a given decryption was\n   successful is available,\
    \ if ciphertext encrypted with the agreed upon\n   key is available, or if a MAC\
    \ computed with the agreed upon key is\n   available, information about the user's\
    \ private key can be obtained.\n   Assume Party A has a valid public key ya and\
    \ that Party B has a\n   public key yb that is not of the form described in Section\
    \ 1.1,\n   rather yb has order r, where r is much less than q.  Thus yb^r=1 mod\n\
    \   p.  Now, when Party A produces ZZ as yb^xa mod p, there will only be\n   r\
    \ possible values for ZZ instead of q-3 possible values.  At this\n   point Party\
    \ B does not know the value ZZ, but may be able to\n   exhaustively search for\
    \ it.\n   If Party A encrypts plaintext with this value and makes that\n   ciphertext\
    \ available to Party B, Party B only needs to exhaustively\n   search through\
    \ r possibilities to determine which key produced the\n   ciphertext.  When the\
    \ correct one is found, this gives information\n   about the value of xa modulo\
    \ r.  Similarly, if Party A uses ZZ to\n   decrypt a ciphertext and Party B is\
    \ able to determine whether or not\n   decryption was performed correctly, then\
    \ information about xa can be\n   obtained.  The actual number of messages that\
    \ must be sent or\n   received for these attacks to be successful will depend\
    \ on the\n   structure of the prime p.  However, it is not unreasonable to expect\n\
    \   that the entire private key could be determined after as few as one\n   hundred\
    \ messages.\n   A similar attack can be mounted if Party B chooses a public key\
    \ of\n   the form yb=g^xb*f, where f is an element of small order.  In this\n\
    \   situation Party A will compute ZZ=yb^xa=g^(xa*xb)*f^xa mod p.  Again,\n  \
    \ Party B can compute g^(xa*xb) and can therefore exhaust the small\n   number\
    \ of possible values of f^xa mod p to determine information\n   about xa.\n  \
    \ An attack is also possible if Party B has a public key yb of order r\n   where\
    \ r factors into small integers but is not necessarily a small\n   integer itself.\
    \  In this case, the attacker needs to know the value\n   ZZ computed by Party\
    \ A.  From this value Party B can solve for Party\n   A's private key modulo r\
    \ using the Pohlig-Hellman [PH] algorithm.\n   However, this attack is not as\
    \ practical as the cases already\n   presented, where information about the private\
    \ key is recovered from\n   the *use* of ZZ, rather than ZZ itself, by exhaustive\
    \ search.\n"
- title: 2. Situations Where Protection Is Necessary
  contents:
  - "2. Situations Where Protection Is Necessary\n   This section describes the situations\
    \ in which the sender of a\n   message should obtain protection against this type\
    \ of attack and also\n   those situations in which the receiver of a message should\
    \ obtain\n   protection. Each entity may decide independently whether it requires\n\
    \   protection from these attacks.\n   This discussion assumes that the recipient's\
    \ key pair is static, as\n   is always the case in [RFC2631].\n"
- title: 2.1 Message Sender
  contents:
  - "2.1 Message Sender\n   This section describes situations in which the message\
    \ sender should\n   be protected.\n   If the sender's key is ephemeral, (i.e.\
    \ ephemeral-static Diffie-\n   Hellman is being used), then no protection is necessary.\
    \  In this\n   situation only the recipients of the message can obtain the plaintext\n\
    \   and corresponding ciphertext and therefore determine information\n   about\
    \ the private key using the \"small-subgroup\" attacks.  However,\n   the recipients\
    \ can always decrypt the message and since the sender's\n   key is ephemeral,\
    \ even if the recipient can learn the entire private\n   key no other messages\
    \ are at risk.  Notice here that if two or more\n   recipients have selected the\
    \ same domain parameters (p,q,g) then the\n   same ephemeral public key can be\
    \ used for all of them.  Since the key\n   is ephemeral and only associated with\
    \ a message that the recipients\n   can already decrypt, no interesting attacks\
    \ are possible.\n   If the sender's key is static (i.e. static-static Diffie-Hellman\
    \ is\n   being used), then protection is necessary because in this situation a\n\
    \   recipient mounting a small-subgroup attack may be able to obtain the\n   plaintext\
    \ from another recipient (perhaps one with a valid public key\n   also controlled\
    \ by the recipient) and therefore could obtain\n   information about the private\
    \ key.  Moreover, the attacker does not\n   need to know the plaintext to test\
    \ whether a key is correct, provided\n   that the plaintext has sufficient redundancy\
    \ (e.g., ASCII).  This\n   information could then be used to attack other messages\
    \ protected\n   with the same static key.\n"
- title: 2.2 Message Recipient
  contents:
  - "2.2 Message Recipient\n   This section describes situations in which the message\
    \ recipient\n   should be protected.\n   If absolutely no information on the decryption\
    \ of the ciphertext is\n   available to any other party than the recipient, then\
    \ protection is\n   not necessary because this attack requires information on\
    \ whether the\n   decryption was successful to be sent to the attacker.  So, no\n\
    \   protective measures are necessary if the implementation ensures that\n   no\
    \ information about the decryption can leak out.  However,\n   protection may\
    \ be warranted if human users may give this information\n   to the sender via\
    \ out of band means (e.g. through telephone\n   conversations).\n   If information\
    \ on the decryption is available to any other party,\n   then protection is necessary.\
    \ In particular, protection is necessary\n   if any protocol event allows any\
    \ other party to conclude that\n   decryption was successful.  Such events include\
    \ replies and returning\n   signed receipts.\n"
- title: 3. Methods Of Protection
  contents:
  - "3. Methods Of Protection\n   This section describes five protective measures\
    \ that senders and\n   recipients of messages can use to protect themselves from\
    \ \"small-\n   subgroup\" attacks.\n   Implementers should note that some of the\
    \ procedures described in\n   this section may be the subject of patents or pending\
    \ patents.\n"
- title: 3.1 Public Key Validation
  contents:
  - "3.1 Public Key Validation\n   This method is described in Section 2.1.5 of [RFC2631],\
    \ and its\n   description is repeated here.  If this method is used, it should\
    \ be\n   used to validate public keys of the other party prior to computing\n\
    \   the shared secret ZZ.  The public key to be validated is y.\n   1. Verify\
    \ that y lies within the interval [2,p-1]. If it does not,\n        the key is\
    \ invalid.\n   2. Compute y^q mod p. If the result == 1, the key is valid.\n \
    \       Otherwise the key is invalid.\n"
- title: 3.2 CA Performs Public Key Validation
  contents:
  - "3.2 CA Performs Public Key Validation\n   The Certification Authority (CA) could\
    \ perform the Public Key\n   Validation method described in Section 3.1 prior\
    \ to signing and\n   issuing a certificate containing a Diffie-Hellman public\
    \ key.  In\n   this way, any party using the public key can be assured that a\n\
    \   trusted third party has already performed the key validation process.\n  \
    \ This method is only viable for static public keys.  When Static-\n   Static\
    \ Diffie-Hellman is employed, both the sender and recipient are\n   protected\
    \ when the CA has performed public key validation.  However,\n   when Ephemeral-Static\
    \ Diffie-Hellman is employed, only the sender can\n   be protected by having the\
    \ CA perform public key validation.  Since\n   the sender generates an ephemeral\
    \ public key, the CA cannot perform\n   the validation on that public key.\n \
    \  In the case of a static public key a method must exist to assure the\n   user\
    \ that the CA has actually performed this verification.  The CA\n   can notify\
    \ certificate users that it has performed the validation by\n   reference to the\
    \ CA's Certificate Policy (CP) and Certification\n   Practice Statement (CPS)\
    \ [RFC2527] or through extensions in the\n   certificate.\n"
- title: 3.3 Choice of Prime p
  contents:
  - "3.3 Choice of Prime p\n   The prime p could be chosen such that p-1=2*q*k where\
    \ k is a large\n   prime or is the product of large primes (large means greater\
    \ than or\n   equal to q).  This will prevent an attacker from being able to find\n\
    \   an element (other than 1 and p-1) of small order modulo p, thus\n   thwarting\
    \ the small-subgroup attack.  One method to produce primes of\n   this form is\
    \ to run the prime generation algorithm multiple times\n   until an appropriate\
    \ prime is obtained.  As an example, the value of\n   k could be tested for primality.\
    \  If k is prime, then the value of p\n   could be accepted, otherwise the prime\
    \ generation algorithm would be\n   run again, until a value of p is produced\
    \ with k prime.\n   However, since with primes of this form there is still an\
    \ element of\n   order 2 (i.e. p-1), one bit of the private key could still be\
    \ lost.\n   Thus, this method may not be appropriate in circumstances where the\n\
    \   loss of a single bit of the private key is a concern.\n   Another method to\
    \ produce primes of this form is to choose the prime\n   p such that p = 2*q*k\
    \ + 1 where k is small (i.e. only a few bits). In\n   this case, the leakage due\
    \ to a small subgroup attack will be only a\n   few bits.  Again, this would not\
    \ be appropriate for circumstances\n   where the loss of even a few bits of the\
    \ private key is a concern. In\n   this approach, q is large.  Note that in DSA,\
    \ q is limited to 160\n   bits for performance reasons, but need not be the case\
    \ for Diffie-\n   Hellman.\n   Additionally, other methods (i.e. public key validation)\
    \ can be\n   combined with this method in order to prevent the loss of a few bits\n\
    \   of the private key.\n"
- title: 3.4 Compatible Cofactor Exponentiation
  contents:
  - "3.4 Compatible Cofactor Exponentiation\n   This method of protection is specified\
    \ in [P1363] and [KALISKI].  It\n   involves modifying the computation of ZZ by\
    \ including j (the\n   cofactor) in the computations and is compatible with ordinary\n\
    \   Diffie-Hellman when both  parties' public keys are valid. If a\n   party's\
    \ public key is invalid, then the resulting ZZ will either be 1\n   or an element\
    \ of order q; the small subgroup elements will either be\n   detected or cancelled.\
    \  This method requires that gcd(j,q)=1.\n   Instead of computing ZZ as ZZ=yb^xa\
    \ mod p, Party A would compute it\n   as ZZ=(yb^j)^c mod p where c=j^(-1)*xa mod\
    \ q.  (Similarly for Party\n   B.)\n   If the resulting value ZZ satisfies ZZ==1,\
    \ then the key agreement\n   should be abandoned because the public key being\
    \ used is invalid.\n   Note that when j is larger than q, as is usually the case\
    \ with\n   Diffie-Hellman, this method is less efficient than the method of\n\
    \   Section 3.1.\n"
- title: 3.5 Non-compatible Cofactor Exponentiation
  contents:
  - "3.5 Non-compatible Cofactor Exponentiation\n   This method of protection is specified\
    \ in [P1363].  Similar to the\n   method of Section 3.4, it involves modifying\
    \ the computation of ZZ by\n   including j (the cofactor) in the computations.\
    \ If a party's public\n   key is invalid, then the resulting ZZ will either be\
    \ 1 or an element\n   of order q; the small subgroup elements will either be detected\
    \ or\n   cancelled. This method requires that gcd(j,q)=1.\n   Instead of computing\
    \ ZZ as ZZ=yb^xa mod p, Party A would compute it\n   as ZZ=(yb^j)^xa mod p.  (Similarly\
    \ for Party B.)  However, with this\n   method the resulting ZZ value is different\
    \ from what is computed in\n   [RFC2631] and therefore is not interoperable with\
    \ implementations\n   conformant to [RFC2631].\n   If the resulting value ZZ satisfies\
    \ ZZ==1, then the key agreement\n   should be abandoned because the public key\
    \ being used is invalid.\n   Note that when j is larger than q, as is usually\
    \ the case with\n   Diffie-Hellman, this method is less efficient than the method\
    \ of\n   Section 3.1.\n"
- title: 4. Ephemeral-Ephemeral Key Agreement
  contents:
  - "4. Ephemeral-Ephemeral Key Agreement\n   This situation is when both the sender\
    \ and recipient of a message are\n   using ephemeral keys.  While this situation\
    \ is not possible in\n   S/MIME, it might be used in other protocol environments.\
    \  Thus we\n   will briefly discuss protection for this case as well.\n   Implementers\
    \ should note that some of the procedures described in\n   this section may be\
    \ the subject of patents or pending patents.\n   Ephemeral-ephemeral key agreement\
    \ gives an attacker more flexibility\n   since both parties' public keys can be\
    \ changed and they can be\n   coerced into computing the same key from a small\
    \ space. However, in\n   the ephemeral-static case, only the sender's public key\
    \ can be\n   changed, and only the recipient can be coerced by an outside attacker\n\
    \   into computing a key from a small space.\n   Thus, in some ephemeral-ephemeral\
    \ key agreements protection may be\n   necessary for both entities. One possibility\
    \ is that the attacker\n   could modify both parties' public key so as to make\
    \ their shared key\n   predictable.  For example, the attacker could replace both\
    \ ya and yb\n   with some element of small order, say -1.  Then, with a certain\n\
    \   probability, both the sender and receiver would compute the same\n   shared\
    \ value that comes from some small, easily exhaustible set.\n   Note that in this\
    \ situation if protection was obtained from the\n   methods of Section 3.3, then\
    \ each user must ensure that the other\n   party's public key does not come from\
    \ the small set of elements of\n   small order.  This can be done either by checking\
    \ a list of such\n   elements, or by additionally applying the methods of Sections\
    \ 3.1,\n   3.4 or 3.5.\n   Protection from these attacks is not necessary however\
    \ if the other\n   party's ephemeral public key has been authenticated.  The\n\
    \   authentication may be in the form of a signature, MAC, or any other\n   integrity\
    \ protection mechanism.  An example of this is in the\n   Station-To-Station protocol\
    \ [STS].  Since the owner authenticates the\n   public key, a third party cannot\
    \ modify it and therefore cannot mount\n   an attack.  Thus, the only person that\
    \ could attack an entity's\n   private key is the other authenticated entity in\
    \ the key agreement.\n   However, since both public keys are ephemeral, they only\
    \ protect the\n   current session that the attacker would have access to anyway.\n"
- title: 5. Security Considerations
  contents:
  - "5. Security Considerations\n   This entire document addresses security considerations\
    \ in the\n   implementation of Diffie-Hellman key agreement.\n"
- title: 6. Intellectual Property Rights
  contents:
  - "6. Intellectual Property Rights\n   The IETF takes no position regarding the\
    \ validity or scope of any\n   intellectual property or other rights that might\
    \ be claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; neither does it represent that it\n   has\
    \ made any effort to identify any such rights.  Information on the\n   IETF's\
    \ procedures with respect to rights in standards-track and\n   standards-related\
    \ documentation can be found in BCP-11.  Copies of\n   claims of rights made available\
    \ for publication and any assurances of\n   licenses to be made available, or\
    \ the result of an attempt made to\n   obtain a general license or permission\
    \ for the use of such\n   proprietary rights by implementors or users of this\
    \ specification can\n   be obtained from the IETF Secretariat.\n   The IETF invites\
    \ any interested party to bring to its attention any\n   copyrights, patents or\
    \ patent applications, or other proprietary\n   rights which may cover technology\
    \ that may be required to practice\n   this standard.  Please address the information\
    \ to the IETF Executive\n   Director.\n"
- title: 7. References
  contents:
  - "7. References\n   [KALISKI] B.S. Kaliski, Jr., \"Compatible cofactor multiplication\
    \ for\n             Diffie-Hellman primitives\", Electronics Letters, vol. 34,\n\
    \             no. 25, December 10, 1998, pp. 2396-2397.\n   [LAW]     L. Law,\
    \ A. Menezes, M. Qu, J. Solinas and S. Vanstone, \"An\n             efficient\
    \ protocol for authenticated key agreement\",\n             Technical report CORR\
    \ 98-05, University of Waterloo, 1998.\n   [LIM]     C.H. Lim and P.J. Lee, \"\
    A key recovery attack on discrete\n             log- based schemes using a prime\
    \ order subgroup\", B.S.\n             Kaliski, Jr., editor, Advances in Cryptology\
    \ - Crypto '97,\n             Lecture Notes in Computer Science, vol. 1295, 1997,\n\
    \             Springer-Verlag, pp. 249-263.\n   [P1363]   IEEE P1363, Standard\
    \ Specifications for Public Key\n             Cryptography, 1998, work in progress.\n\
    \   [PH]      S.C Pohlig and M.E. Hellman, \"An improved algorithm for\n     \
    \        computing logarithms over GF(p) and its cryptographic\n             significance\"\
    , IEEE Transactions on Information Theory,\n             vol. 24, 1972, pp. 106-110.\n\
    \   [RFC2527] Chokhani, S. and W. Ford, \"Internet X.509 Public Key\n        \
    \     Infrastructure, Certificate Policy and Certification\n             Practices\
    \ Framework\", RFC 2527, March 1999.\n   [RFC2630] Housley, R., \"Cryptographic\
    \ Message Syntax\", RFC 2630, June\n             1999.\n   [RFC2631] Rescorla,\
    \ E., \"Diffie-Hellman Key Agreement Method\", RFC\n             2631, June 1999.\n\
    \   [RFC2633] Ramsdell, B., \"S/MIME Version 3 Message Specification\", RFC\n\
    \             2633, June 1999.\n   [STS]     W. Diffie, P.C. van Oorschot and\
    \ M. Wiener, \"Authentication\n             and authenticated key exchanges\"\
    , Designs, Codes and\n             Cryptography, vol. 2, 1992, pp. 107-125.\n"
- title: 8. Author's Address
  contents:
  - "8. Author's Address\n   Robert Zuccherato\n   Entrust Technologies\n   750 Heron\
    \ Road\n   Ottawa, Ontario\n   Canada K1V 1A7\n   EMail: robert.zuccherato@entrust.com\n"
- title: 9.  Full Copyright Statement
  contents:
  - "9.  Full Copyright Statement\n   Copyright (C) The Internet Society (2000). \
    \ All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
