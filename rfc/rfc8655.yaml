- title: __initial_text__
  contents:
  - '                 Deterministic Networking Architecture

    '
- title: Abstract
  contents:
  - "Abstract\n   This document provides the overall architecture for Deterministic\n\
    \   Networking (DetNet), which provides a capability to carry specified\n   unicast\
    \ or multicast data flows for real-time applications with\n   extremely low data\
    \ loss rates and bounded latency within a network\n   domain.  Techniques used\
    \ include 1) reserving data-plane resources\n   for individual (or aggregated)\
    \ DetNet flows in some or all of the\n   intermediate nodes along the path of\
    \ the flow, 2) providing explicit\n   routes for DetNet flows that do not immediately\
    \ change with the\n   network topology, and 3) distributing data from DetNet flow\
    \ packets\n   over time and/or space to ensure delivery of each packet's data\
    \ in\n   spite of the loss of a path.  DetNet operates at the IP layer and\n \
    \  delivers service over lower-layer technologies such as MPLS and Time-\n   Sensitive\
    \ Networking (TSN) as defined by IEEE 802.1.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 7841.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8655.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2019 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (https://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction\n   2.  Terminology\n     2.1.  Terms\
    \ Used in This Document\n     2.2.  Dictionary of Terms Used by TSN and DetNet\n\
    \   3.  Providing the DetNet Quality of Service\n     3.1.  Primary Goals Defining\
    \ the DetNet QoS\n     3.2.  Mechanisms to Achieve DetNet QoS\n       3.2.1. \
    \ Resource Allocation\n       3.2.2.  Service Protection\n       3.2.3.  Explicit\
    \ Routes\n     3.3.  Secondary Goals for DetNet\n       3.3.1.  Coexistence with\
    \ Normal Traffic\n       3.3.2.  Fault Mitigation\n   4.  DetNet Architecture\n\
    \     4.1.  DetNet Stack Model\n       4.1.1.  Representative Protocol Stack Model\n\
    \       4.1.2.  DetNet Data-Plane Overview\n       4.1.3.  Network Reference Model\n\
    \     4.2.  DetNet Systems\n       4.2.1.  End System\n       4.2.2.  DetNet Edge,\
    \ Relay, and Transit Nodes\n     4.3.  DetNet Flows\n       4.3.1.  DetNet Flow\
    \ Types\n       4.3.2.  Source Transmission Behavior\n       4.3.3.  Incomplete\
    \ Networks\n     4.4.  Traffic Engineering for DetNet\n       4.4.1.  The Application\
    \ Plane\n       4.4.2.  The Controller Plane\n       4.4.3.  The Network Plane\n\
    \     4.5.  Queuing, Shaping, Scheduling, and Preemption\n     4.6.  Service Instance\n\
    \     4.7.  Flow Identification at Technology Borders\n       4.7.1.  Exporting\
    \ Flow Identification\n       4.7.2.  Flow Attribute Mapping between Layers\n\
    \       4.7.3.  Flow-ID Mapping Examples\n     4.8.  Advertising Resources, Capabilities,\
    \ and Adjacencies\n     4.9.  Scaling to Larger Networks\n     4.10. Compatibility\
    \ with Layer 2\n   5.  Security Considerations\n   6.  Privacy Considerations\n\
    \   7.  IANA Considerations\n   8.  Informative References\n   Acknowledgements\n\
    \   Authors' Addresses\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document provides the overall architecture for Deterministic\n\
    \   Networking (DetNet), which provides a capability for the delivery of\n   data\
    \ flows with extremely low packet loss rates and bounded end-to-\n   end delivery\
    \ latency.  DetNet is for networks that are under a single\n   administrative\
    \ control or within a closed group of administrative\n   control; these include\
    \ campus-wide networks and private WANs.  DetNet\n   is not for large groups of\
    \ domains such as the Internet.\n   DetNet operates at the IP layer and delivers\
    \ service over lower-layer\n   technologies such as MPLS and IEEE 802.1 Time-Sensitive\
    \ Networking\n   (TSN).  DetNet provides a reliable and available service by\n\
    \   dedicating network resources such as link bandwidth and buffer space\n   to\
    \ DetNet flows and/or classes of DetNet flows, and by replicating\n   packets\
    \ along multiple paths.  Unused reserved resources are\n   available to non-DetNet\
    \ packets as long as all guarantees are\n   fulfilled.\n   The \"Deterministic\
    \ Networking Problem Statement\" [RFC8557] introduces\n   DetNet, and \"Deterministic\
    \ Networking Use Cases\" [RFC8578] summarizes\n   the need for it.  See [DETNET-FRAMEWORK]\
    \ for specific techniques that\n   can be used to identify DetNet flows and assign\
    \ them to specific\n   paths through a network.\n   A goal of DetNet is a converged\
    \ network in all respects, including\n   the convergence of sensitive non-IP networks\
    \ onto a common network\n   infrastructure.  The presence of DetNet flows does\
    \ not preclude non-\n   DetNet flows, and the benefits offered DetNet flows should\
    \ not,\n   except in extreme cases, prevent existing Quality-of-Service (QoS)\n\
    \   mechanisms from operating in a normal fashion, subject to the\n   bandwidth\
    \ required for the DetNet flows.  A single source-destination\n   pair can trade\
    \ both DetNet and non-DetNet flows.  End systems and\n   applications need not\
    \ instantiate special interfaces for DetNet\n   flows.  Networks are not restricted\
    \ to certain topologies;\n   connectivity is not restricted.  Any application\
    \ that generates a\n   data flow that can be usefully characterized as having\
    \ a maximum\n   bandwidth should be able to take advantage of DetNet, as long\
    \ as the\n   necessary resources can be reserved.  Reservations can be made by\
    \ the\n   application itself, via network management, centrally by an\n   application's\
    \ controller, or by other means, for instance, by placing\n   on-demand reservation\
    \ via a distributed Control Plane, e.g.,\n   leveraging the Resource Reservation\
    \ Protocol (RSVP) [RFC2205].  QoS\n   requirements of DetNet flows can be met\
    \ if all network nodes in a\n   DetNet domain implement DetNet capabilities. \
    \ DetNet nodes can be\n   interconnected with different sub-network technologies\n\
    \   (Section 4.1.2) where the nodes of the subnet are not DetNet aware\n   (Section\
    \ 4.1.3).\n   Many applications that are intended to be served by DetNet require\n\
    \   the ability to synchronize the clocks in end systems to a sub-\n   microsecond\
    \ accuracy.  Some of the queue-control techniques defined\n   in Section 4.5 also\
    \ require time synchronization among network nodes.\n   The means used to achieve\
    \ time synchronization are not addressed in\n   this document.  DetNet can accommodate\
    \ various time-synchronization\n   techniques and profiles that are defined elsewhere\
    \ to address the\n   needs of different market segments.\n"
- title: 2.  Terminology
  contents:
  - '2.  Terminology

    '
- title: 2.1.  Terms Used in This Document
  contents:
  - "2.1.  Terms Used in This Document\n   The following terms are used in the context\
    \ of DetNet in this\n   document:\n   allocation\n      The dedication of resources\
    \ to support a DetNet flow.  Depending\n      on an implementation, the resource\
    \ may be reused by non-DetNet\n      flows when it is not used by the DetNet flow.\n\
    \   App-flow\n      The payload (data) carried over a DetNet service.\n   DetNet\
    \ compound flow and DetNet member flow\n      A DetNet compound flow is a DetNet\
    \ flow that has been separated\n      into multiple duplicate DetNet member flows\
    \ for service protection\n      at the DetNet service sub-layer.  Member flows\
    \ are merged back\n      into a single DetNet compound flow such that there are\
    \ no\n      duplicate packets.  \"Compound\" and \"member\" are strictly relative\n\
    \      to each other, not absolutes; a DetNet compound flow comprising\n     \
    \ multiple DetNet member flows can, in turn, be a member of a\n      higher-order\
    \ compound.\n   DetNet destination\n      An end system capable of terminating\
    \ a DetNet flow.\n   DetNet domain\n      The portion of a network that is DetNet\
    \ aware.  It includes end\n      systems and DetNet nodes.\n   DetNet edge node\n\
    \      An instance of a DetNet relay node that acts as a source and/or\n     \
    \ destination at the DetNet service sub-layer.  For example, it can\n      include\
    \ a DetNet service sub-layer proxy function for DetNet\n      service protection\
    \ (e.g., the addition or removal of packet\n      sequencing information) for\
    \ one or more end systems, it can start\n      or terminate resource allocation\
    \ at the DetNet forwarding sub-\n      layer, or it can aggregate DetNet services\
    \ into new DetNet flows.\n      It is analogous to a Label Edge Router (LER) or\
    \ a Provider Edge\n      (PE) router.\n   DetNet flow\n      A sequence of packets\
    \ that conforms uniquely to a flow identifier\n      and to which the DetNet service\
    \ is to be provided.  It includes\n      any DetNet headers added to support the\
    \ DetNet service and\n      forwarding sub-layers.\n   DetNet forwarding sub-layer\n\
    \      DetNet functionality is divided into two sub-layers.  One of them\n   \
    \   is the DetNet forwarding sub-layer, which optionally provides\n      resource\
    \ allocation for DetNet flows over paths provided by the\n      underlying network.\n\
    \   DetNet intermediate node\n      A DetNet relay node or DetNet transit node.\n\
    \   DetNet node\n      A DetNet edge node, a DetNet relay node, or a DetNet transit\
    \ node.\n   DetNet relay node\n      A DetNet node that includes a service sub-layer\
    \ function that\n      interconnects different DetNet forwarding sub-layer paths\
    \ to\n      provide service protection.  A DetNet relay node participates in\n\
    \      the DetNet service sub-layer.  It typically incorporates DetNet\n     \
    \ forwarding sub-layer functions as well, in which case it is\n      collocated\
    \ with a transit node.\n   DetNet service sub-layer\n      DetNet functionality\
    \ is divided into two sub-layers.  One of them\n      is the DetNet service sub-layer,\
    \ at which a DetNet service (e.g.,\n      service protection) is provided.\n \
    \  DetNet service proxy\n      A proxy that maps between App-flows and DetNet\
    \ flows.\n   DetNet source\n      An end system capable of originating a DetNet\
    \ flow.\n   DetNet system\n      A DetNet-aware end system, transit node, or relay\
    \ node.  \"DetNet\"\n      may be omitted in some text.\n   DetNet transit node\n\
    \      A DetNet node, operating at the DetNet forwarding sub-layer, that\n   \
    \   utilizes link-layer and/or network-layer switching across multiple\n     \
    \ links and/or sub-networks to provide paths for DetNet service sub-\n      layer\
    \ functions.  It typically provides resource allocation over\n      those paths.\
    \  An MPLS Label Switch Router (LSR) is an example of a\n      DetNet transit\
    \ node.\n   DetNet-UNI\n      A User-to-Network Interface (UNI) with DetNet-specific\n\
    \      functionalities.  It is a packet-based reference point and may\n      provide\
    \ multiple functions like encapsulation, status,\n      synchronization, etc.\n\
    \   end system\n      Commonly called a \"host\" in the RFC series and an \"end\
    \ station\" in\n      IEEE 802 standards.  End systems of interest to this document\
    \ are\n      either sources or destinations of DetNet flows, and they may or\n\
    \      may not be aware of DetNet forwarding sub-layers or DetNet service\n  \
    \    sub-layers.\n   link\n      A connection between two DetNet nodes.  It may\
    \ be composed of a\n      physical link or a sub-network technology that can provide\n\
    \      appropriate traffic delivery for DetNet flows.\n   Packet Elimination Function\
    \ (PEF)\n      A function that eliminates duplicate copies of packets to prevent\n\
    \      excess packets flooding the network or duplicate packets being\n      sent\
    \ out of the DetNet domain.  A PEF can be implemented by a\n      DetNet edge\
    \ node, a DetNet relay node, or an end system.\n   Packet Replication Function\
    \ (PRF)\n      A function that replicates DetNet flow packets and forwards them\n\
    \      to one or more next hops in the DetNet domain.  The number of\n      packet\
    \ copies sent to the next hops is a parameter specific to the\n      DetNet flow\
    \ at the point of replication.  A PRF can be implemented\n      by a DetNet edge\
    \ node, a DetNet relay node, or an end system.\n   PREOF\n      A collective name\
    \ for Packet Replication, Elimination, and\n      Ordering Functions.\n   Packet\
    \ Ordering Function (POF)\n      A function that reorders packets within a DetNet\
    \ flow that are\n      received out of order.  This function can be implemented\
    \ by a\n      DetNet edge node, a DetNet relay node, or an end system.\n   reservation\n\
    \      The set of resources allocated between a source and one or more\n     \
    \ destinations through DetNet nodes and subnets associated with a\n      DetNet\
    \ flow in order to provide the provisioned DetNet service.\n"
- title: 2.2.  Dictionary of Terms Used by TSN and DetNet
  contents:
  - "2.2.  Dictionary of Terms Used by TSN and DetNet\n   This section serves as a\
    \ dictionary for translating the terms used by\n   the Time-Sensitive Networking\
    \ (TSN) Task Group [IEEE802.1TSNTG] of\n   the IEEE 802.1 WG to those of the Deterministic\
    \ Networking (detnet)\n   WG of the IETF.\n   Listener\n      The term used by\
    \ IEEE 802.1 for a destination of a DetNet flow.\n   Relay system\n      The term\
    \ used by IEEE 802.1 for a DetNet intermediate node.\n   Stream\n      The term\
    \ used by IEEE 802.1 for a DetNet flow.\n   Talker\n      The term used by IEEE\
    \ 802.1 for the source of a DetNet flow.\n"
- title: 3.  Providing the DetNet Quality of Service
  contents:
  - '3.  Providing the DetNet Quality of Service

    '
- title: 3.1.  Primary Goals Defining the DetNet QoS
  contents:
  - "3.1.  Primary Goals Defining the DetNet QoS\n   The DetNet QoS can be expressed\
    \ in terms of:\n   *  Minimum and maximum end-to-end latency from source to destination,\n\
    \      timely delivery, and bounded jitter (packet delay variation)\n      derived\
    \ from these constraints.\n   *  Packet loss ratio under various assumptions as\
    \ to the operational\n      states of the nodes and links.\n   *  An upper bound\
    \ on out-of-order packet delivery.  It is worth\n      noting that some DetNet\
    \ applications are unable to tolerate any\n      out-of-order delivery.\n   It\
    \ is a distinction of DetNet that it is concerned solely with worst-\n   case\
    \ values for the end-to-end latency, jitter, and misordering.\n   Average, mean,\
    \ or typical values are of little interest, because they\n   do not affect the\
    \ ability of a real-time system to perform its tasks.\n   In general, a trivial\
    \ priority-based queuing scheme will give better\n   average latency to a data\
    \ flow than DetNet; however, it may not be a\n   suitable option for DetNet because\
    \ of its worst-case latency.\n   Three techniques are used by DetNet to provide\
    \ these qualities of\n   service:\n   *  Resource allocation (Section 3.2.1)\n\
    \   *  Service protection (Section 3.2.2)\n   *  Explicit routes (Section 3.2.3)\n\
    \   Resource allocation operates by assigning resources, e.g., buffer\n   space\
    \ or link bandwidth, to a DetNet flow (or flow aggregate) along\n   its path.\
    \  Resource allocation greatly reduces, or even eliminates\n   entirely, packet\
    \ loss due to output packet contention within the\n   network, but it can only\
    \ be supplied to a DetNet flow that is limited\n   at the source to a maximum\
    \ packet size and transmission rate.  As\n   DetNet flows are assumed to be rate\
    \ limited and DetNet is designed to\n   provide sufficient allocated resources\
    \ (including provisioned\n   capacity), the use of transport-layer congestion\
    \ control [RFC2914]\n   for App-flows is not required; however, if resources are\
    \ allocated\n   appropriately, use of congestion control should not impact\n \
    \  transmission negatively.\n   Resource allocation addresses two of the DetNet\
    \ QoS requirements:\n   latency and packet loss.  Given that DetNet nodes have\
    \ a finite\n   amount of buffer space, resource allocation necessarily results\
    \ in a\n   maximum end-to-end latency.  Resource allocation also addresses\n \
    \  contention-related packet loss.\n   Other important contributions to packet\
    \ loss are random media errors\n   and equipment failures.  Service protection\
    \ is the name for the\n   mechanisms used by DetNet to address these losses. \
    \ The mechanisms\n   employed are constrained by the need to meet the users' latency\n\
    \   requirements.  Packet replication and elimination (Section 3.2.2.2)\n   and\
    \ packet encoding (Section 3.2.2.3) are described in this document\n   to provide\
    \ service protection, but other mechanisms may also be\n   found.  For instance,\
    \ packet encoding can be used to provide service\n   protection against random\
    \ media errors, while packet replication and\n   elimination can be used to provide\
    \ service protection against\n   equipment failures.  This mechanism distributes\
    \ the contents of\n   DetNet flows over multiple paths in time and/or space, so\
    \ that the\n   loss of some of the paths does need not cause the loss of any\n\
    \   packets.\n   The paths are typically (but not necessarily) explicit routes\
    \ so that\n   they do not normally suffer temporary interruptions caused by the\n\
    \   convergence of routing or bridging protocols.\n   These three techniques can\
    \ be applied individually or applied\n   together; it results that eight combinations,\
    \ including none (no\n   DetNet), are possible.  Some combinations, however, are\
    \ of wider\n   utility than others.  This separation keeps the protocol stack\n\
    \   coherent and maximizes interoperability with existing and developing\n   standards\
    \ in the IETF and other Standards Development Organizations.\n   The following\
    \ are examples of typical expected combinations:\n   *  The combination of explicit\
    \ routes and service protection is the\n      technique employed by seamless redundancy\
    \ mechanisms applied on a\n      ring topology, e.g., as described in [IEC-62439-3].\
    \  In this\n      example, explicit routes are achieved by limiting the physical\n\
    \      topology of the network to a ring.  Sequentialization,\n      replication,\
    \ and duplicate elimination are facilitated by packet\n      tags added at the\
    \ front or the end of Ethernet frames.  [RFC8227]\n      provides another example\
    \ in the context of MPLS.\n   *  Resource allocation alone was originally offered\
    \ by Audio Video\n      Bridging as defined by IEEE 802.1 [IEEE802.1BA].  As long\
    \ as the\n      network suffers no failures, packet loss due to output packet\n\
    \      contention can be eliminated through the use of a reservation\n      protocol\
    \ (e.g., the Multiple Stream Registration Protocol\n      [IEEE802.1Q]), shapers\
    \ in every bridge, and proper dimensioning.\n   *  Using all three together gives\
    \ maximum protection.\n   There are, of course, simpler methods available (and\
    \ employed today)\n   to achieve levels of latency and packet loss that are satisfactory\n\
    \   for many applications.  Prioritization and over-provisioning is one\n   such\
    \ technique.  However, these methods generally work best in the\n   absence of\
    \ any significant amount of noncritical traffic in the\n   network (if, indeed,\
    \ such traffic is supported at all).  They may\n   also work only if the critical\
    \ traffic constitutes only a small\n   portion of the network's theoretical capacity,\
    \ if all systems are\n   functioning properly, or if actions by end systems that\
    \ disrupt the\n   network's operations are absent.\n   There are any number of\
    \ methods in use, defined, or in progress for\n   accomplishing each of the above\
    \ techniques.  It is expected that the\n   DetNet architecture defined in this\
    \ document will assist various\n   vendors, users, and/or \"vertical\" Standards\
    \ Development Organizations\n   (dedicated to a single industry) in making selections\
    \ among the\n   available means of implementing DetNet networks.\n"
- title: 3.2.  Mechanisms to Achieve DetNet QoS
  contents:
  - '3.2.  Mechanisms to Achieve DetNet QoS

    '
- title: 3.2.1.  Resource Allocation
  contents:
  - '3.2.1.  Resource Allocation

    '
- title: 3.2.1.1.  Eliminate Contention Loss
  contents:
  - "3.2.1.1.  Eliminate Contention Loss\n   The primary means by which DetNet achieves\
    \ its QoS assurances is to\n   reduce, or even completely eliminate, packet loss\
    \ due to output\n   packet contention within a DetNet node as a cause of packet\
    \ loss.\n   This can be achieved only by the provision of sufficient buffer\n\
    \   storage at each node through the network to ensure that no packets\n   are\
    \ dropped due to a lack of buffer storage.  Note that App-flows are\n   generally\
    \ not expected to be responsive to implicit [RFC2914] or\n   explicit congestion\
    \ notification [RFC3168].\n   Ensuring adequate buffering requires, in turn, that\
    \ the source and\n   every DetNet node along the path to the destination (or nearly\
    \ every\n   node; see Section 4.3.3) be careful to regulate its output to not\n\
    \   exceed the data rate for any DetNet flow, except for brief periods\n   when\
    \ making up for interfering traffic.  Any packet sent ahead of its\n   time potentially\
    \ adds to the number of buffers required by the next-\n   hop DetNet node and\
    \ may thus exceed the resources allocated for a\n   particular DetNet flow.  Furthermore,\
    \ rate limiting (e.g., using\n   traffic policing) and shaping functions (e.g.,\
    \ shaping as defined in\n   [RFC2475]) at the ingress of the DetNet domain must\
    \ be applied.  This\n   is needed for meeting the requirements of DetNet flows\
    \ as well as for\n   protecting non-DetNet traffic from potentially misbehaving\
    \ DetNet\n   traffic sources.  Note that large buffers have some issues (see,\n\
    \   e.g., [BUFFERBLOAT]).\n   The low-level mechanisms described in Section 4.5\
    \ provide the\n   necessary regulation of transmissions by an end system or DetNet\
    \ node\n   to provide resource allocation.  The allocation of the bandwidth and\n\
    \   buffers for a DetNet flow requires provisioning.  A DetNet node may\n   have\
    \ other resources requiring allocation and/or scheduling that\n   might otherwise\
    \ be over-subscribed and trigger the rejection of a\n   reservation.\n"
- title: 3.2.1.2.  Jitter Reduction
  contents:
  - "3.2.1.2.  Jitter Reduction\n   A core objective of DetNet is to enable the convergence\
    \ of sensitive\n   non-IP networks onto a common network infrastructure.  This\
    \ requires\n   the accurate emulation of currently deployed mission-specific\n\
    \   networks, which, for example, rely on point-to-point analog (e.g.,\n   4-20mA\
    \ modulation) and serial-digital cables (or buses) for highly\n   reliable, synchronized,\
    \ and jitter-free communications.  While the\n   latency of analog transmissions\
    \ is basically the speed of light,\n   legacy serial links are usually slow (in\
    \ the order of Kbps) compared\n   to, say, Gigabit Ethernet, and some latency\
    \ is usually acceptable.\n   What is not acceptable is the introduction of excessive\
    \ jitter, which\n   may, for instance, affect the stability of control systems.\n\
    \   Applications that are designed to operate on serial links usually do\n   not\
    \ provide services to recover the jitter, because jitter simply\n   does not exist\
    \ there.  DetNet flows are generally expected to be\n   delivered in order, and\
    \ the precise time of reception influences the\n   processes.  In order to converge\
    \ such existing applications, there is\n   a desire to emulate all properties\
    \ of the serial cable, such as clock\n   transportation, perfect flow isolation,\
    \ and fixed latency.  While\n   minimal jitter (in the form of specifying minimum,\
    \ as well as\n   maximum, end-to-end latency) is supported by DetNet, there are\n\
    \   practical limitations on packet-based networks in this regard.  In\n   general,\
    \ users are encouraged to use a combination of:\n   *  Sub-microsecond time synchronization\
    \ among all source and\n      destination end systems, and\n   *  Time-of-execution\
    \ fields in the application packets.\n   Jitter reduction is provided by the mechanisms\
    \ described in\n   Section 4.5 that also provide resource allocation.\n"
- title: 3.2.2.  Service Protection
  contents:
  - "3.2.2.  Service Protection\n   Service protection aims to mitigate or eliminate\
    \ packet loss due to\n   equipment failures, including random media and/or memory\
    \ faults.\n   These types of packet loss can be greatly reduced by spreading the\n\
    \   data over multiple disjoint forwarding paths.  Various service\n   protection\
    \ methods are described in [RFC6372], e.g., 1+1 linear\n   protection.  The functional\
    \ details of an additional method are\n   described in Section 3.2.2.2, which\
    \ can be implemented as described\n   in Section 3.2.2.3 or as specified in [DETNET-MPLS]\
    \ in order to\n   provide 1+n hitless protection.  The appropriate service protection\n\
    \   mechanism depends on the scenario and the requirements.\n"
- title: 3.2.2.1.  In-Order Delivery
  contents:
  - "3.2.2.1.  In-Order Delivery\n   Out-of-order packet delivery can be a side effect\
    \ of service\n   protection.  Packets delivered out of order impact the amount\
    \ of\n   buffering needed at the destination to properly process the received\n\
    \   data.  Such packets also influence the jitter of a flow.  The\n   guarantees\
    \ of a DetNet service include a maximum amount of\n   misordering as a constraint.\
    \  Zero misordering would be a valid\n   service constraint to reflect that the\
    \ end system(s) of the flow\n   cannot tolerate any out-of-order delivery.  A\
    \ DetNet Packet Ordering\n   Function (POF) (Section 3.2.2.2) can be used to provide\
    \ in-order\n   delivery.\n"
- title: 3.2.2.2.  Packet Replication and Elimination
  contents:
  - "3.2.2.2.  Packet Replication and Elimination\n   This section describes a service\
    \ protection method that sends copies\n   of the same packets over multiple paths.\n\
    \   The DetNet service sub-layer includes the PRF, PEF, and POF for use\n   in\
    \ DetNet edge, relay node, and end-system packet processing.  These\n   functions\
    \ can be enabled in a DetNet edge node, relay node, or end\n   system.  The collective\
    \ name for all three functions is Packet\n   Replication, Elimination, and Ordering\
    \ Functions (PREOF).  The packet\n   replication and elimination service protection\
    \ method altogether\n   involves four capabilities:\n   *  Sequencing information\
    \ is provided to the packets of a DetNet\n      compound flow.  This may be done\
    \ by adding a sequence number or\n      time stamp as part of DetNet, or it may\
    \ be inherent in the packet,\n      e.g., in a higher-layer protocol or associated\
    \ to other physical\n      properties such as the precise time (and radio channel)\
    \ of\n      reception of the packet.  This is typically done once, at or near\n\
    \      the source.\n   *  The PRF replicates these packets into multiple DetNet\
    \ member flows\n      and typically sends them along multiple different paths\
    \ to the\n      destination(s), e.g., over the explicit routes described in\n\
    \      Section 3.2.3.  The location within a DetNet node and the\n      mechanism\
    \ used for the PRF are left open for implementations.\n   *  The PEF eliminates\
    \ duplicate packets of a DetNet flow based on the\n      sequencing information\
    \ and a history of received packets.  The\n      output of the PEF is always a\
    \ single packet.  This may be done at\n      any DetNet node along the path to\
    \ save network resources further\n      downstream, in particular if multiple\
    \ replication points exist.\n      But the most common case is to perform this\
    \ operation at the very\n      edge of the DetNet network, preferably in or near\
    \ the receiver.\n      The location within a DetNet node and the mechanism used\
    \ for the\n      PEF is left open for implementations.\n   *  The POF uses the\
    \ sequencing information to reorder a DetNet flow's\n      packets that are received\
    \ out of order.\n   The order in which a DetNet node applies PEF, POF, and PRF\
    \ to a\n   DetNet flow is left open for implementations.\n   Some service protection\
    \ mechanisms rely on switching from one flow to\n   another when a failure of\
    \ a flow is detected.  Contrarily, packet\n   replication and elimination combines\
    \ the DetNet member flows sent\n   along multiple different paths and performs\
    \ a packet-by-packet\n   selection of which to discard, e.g., based on sequencing\
    \ information.\n   In the simplest case, this amounts to 1) replicating each packet\
    \ in a\n   source that has two interfaces and 2) conveying them through the\n\
    \   network along separate (Shared Risk Link Group (SRLG) disjoint) paths\n  \
    \ to the similarly dual-homed destinations that 3) reorder the packets\n   and\
    \ 4) discard the duplicates.  This ensures that one path remains,\n   even if\
    \ some DetNet intermediate node fails.  The sequencing\n   information can also\
    \ be used for loss detection and for reordering.\n   DetNet relay nodes in the\
    \ network can provide replication and\n   elimination facilities at various points\
    \ in the network so that\n   multiple failures can be accommodated.\n   This is\
    \ shown in Figure 1, where the two relay nodes each replicate\n   (R) the DetNet\
    \ flow on input, sending the DetNet member flows to both\n   the other relay node\
    \ and to the end system, and eliminate duplicates\n   (E) on the output interface\
    \ to the right-hand end system.  Any one\n   link in the network can fail, and\
    \ the DetNet compound flow can still\n   get through.  Furthermore, two links\
    \ can fail, as long as they are in\n   different segments of the network.\n  \
    \    end    R +                   v | ^                + E end\n      system \
    \  +                   v | ^                +   system\n                Figure\
    \ 1: Packet Replication and Elimination\n   Packet replication and elimination\
    \ does not react to and correct\n   failures; it is entirely passive.  Thus, intermittent\
    \ failures,\n   mistakenly created packet filters, or misrouted data is handled\
    \ just\n   the same as the equipment failures that are handled by typical\n  \
    \ routing and bridging protocols.\n   If member flows that take different-length\
    \ paths through the network\n   are combined, a merge point may require extra\
    \ buffering to equalize\n   the delays over the different paths.  This equalization\
    \ ensures that\n   the resultant compound flow will not exceed its contracted\
    \ bandwidth\n   even after one of the paths is restored after a failure.  The\
    \ extra\n   buffering can be also used to provide in-order delivery.\n"
- title: 3.2.2.3.  Packet Encoding for Service Protection
  contents:
  - "3.2.2.3.  Packet Encoding for Service Protection\n   There are methods for using\
    \ multiple paths to provide service\n   protection that involve encoding the information\
    \ in a packet\n   belonging to a DetNet flow into multiple transmission units,\n\
    \   combining information from multiple packets into any given\n   transmission\
    \ unit.  Such techniques, also known as \"network coding\",\n   can be used as\
    \ a DetNet service protection technique.\n"
- title: 3.2.3.  Explicit Routes
  contents:
  - "3.2.3.  Explicit Routes\n   In networks controlled by typical dynamic control\
    \ protocols such as\n   IS-IS or OSPF, a network topology event in one part of\
    \ the network\n   can impact, at least briefly, the delivery of data in parts\
    \ of the\n   network remote from the failure or recovery event.  Even the use\
    \ of\n   redundant paths through a network, e.g., as defined by [RFC6372],\n \
    \  does not eliminate the chances of packet loss.  Furthermore, out-of-\n   order\
    \ packet delivery can be a side effect of route changes.\n   Many real-time networks\
    \ rely on physical rings of two-port devices,\n   with a relatively simple ring\
    \ control protocol.  This supports\n   redundant paths for service protection\
    \ with a minimum of wiring.  As\n   an additional benefit, ring topologies can\
    \ often utilize different\n   topology management protocols from those used for\
    \ a mesh network,\n   with a consequent reduction in the response time to topology\
    \ changes.\n   Of course, this comes at some cost in terms of increased hop count,\n\
    \   and thus latency, for the typical path.\n   In order to get the advantages\
    \ of low hop count and still ensure\n   against even very brief losses of connectivity,\
    \ DetNet employs\n   explicit routes where the path taken by a given DetNet flow\
    \ does not\n   change, at least not immediately and likely not at all, in response\n\
    \   to network topology events.  Service protection (see Sections 3.2.2\n   and\
    \ 3.2.2.3) over explicit routes provides a high likelihood of\n   continuous connectivity.\
    \  Explicit routes can be established in\n   various ways, e.g., with RSVP-TE\
    \ [RFC3209], with Segment Routing (SR)\n   [RFC8402], via a SDN approach [RFC8453],\
    \ with IS-IS [RFC7813], etc.\n   Explicit routes are typically used in MPLS TE\
    \ (Traffic Engineering)\n   Label Switched Paths (LSPs).\n   Out-of-order packet\
    \ delivery can be a side effect of distributing a\n   single flow over multiple\
    \ paths, especially when there is a change\n   from one path to another when combining\
    \ the flow.  This is\n   irrespective of the distribution method used and also\
    \ applies to\n   service protection over explicit routes.  As described in\n \
    \  Section 3.2.2.1, out-of-order packets influence the jitter of a flow\n   and\
    \ impact the amount of buffering needed to process the data;\n   therefore, the\
    \ guarantees of a DetNet service include a maximum\n   amount of misordering as\
    \ a constraint.  The use of explicit routes\n   helps to provide in-order delivery\
    \ because there is no immediate\n   route change with the network topology, but\
    \ the changes are plannable\n   as they are between the different explicit routes.\n"
- title: 3.3.  Secondary Goals for DetNet
  contents:
  - "3.3.  Secondary Goals for DetNet\n   Many applications require DetNet to provide\
    \ additional services,\n   including coexistence with other QoS mechanisms (Section\
    \ 3.3.1) and\n   protection against misbehaving transmitters (Section 3.3.2).\n"
- title: 3.3.1.  Coexistence with Normal Traffic
  contents:
  - "3.3.1.  Coexistence with Normal Traffic\n   A DetNet network supports the dedication\
    \ of a high proportion of the\n   network bandwidth to DetNet flows.  But, no\
    \ matter how much is\n   dedicated for DetNet flows, it is a goal of DetNet to\
    \ coexist with\n   existing Class-of-Service schemes (e.g., DiffServ).  It is\
    \ also\n   important that non-DetNet traffic not disrupt the DetNet flow, of\n\
    \   course (see Sections 3.3.2 and 5).  For these reasons:\n   *  Bandwidth (transmission\
    \ opportunities) not utilized by a DetNet\n      flow is available to non-DetNet\
    \ packets (though not to other\n      DetNet flows).\n   *  DetNet flows can be\
    \ shaped or scheduled, in order to ensure that\n      the highest-priority non-DetNet\
    \ packet is also ensured a worst-\n      case latency.\n   *  When transmission\
    \ opportunities for DetNet flows are scheduled in\n      detail, the algorithm\
    \ constructing the schedule should leave\n      sufficient opportunities for non-DetNet\
    \ packets to satisfy the\n      needs of the users of the network.  Detailed scheduling\
    \ can also\n      permit the time-shared use of buffer resources by different\
    \ DetNet\n      flows.\n   Starvation of non-DetNet traffic must be avoided, for\
    \ example, by\n   traffic policing and shaping functions (e.g., [RFC2475]).  Thus,\
    \ the\n   net effect of the presence of DetNet flows in a network on the non-\n\
    \   DetNet flows is primarily a reduction in the available bandwidth.\n"
- title: 3.3.2.  Fault Mitigation
  contents:
  - "3.3.2.  Fault Mitigation\n   Robust real-time systems require reducing the number\
    \ of possible\n   failures.  Filters and policers should be used in a DetNet network\
    \ to\n   detect if DetNet packets are received on the wrong interface, at the\n\
    \   wrong time, or in too great a volume.  Furthermore, filters and\n   policers\
    \ can take actions to discard the offending packets or flows,\n   or trigger shutting\
    \ down the offending flow or the offending\n   interface.\n   It is also essential\
    \ that filters and service remarking be employed\n   at the network edge to prevent\
    \ non-DetNet packets from being mistaken\n   for DetNet packets and thus impinging\
    \ on the resources allocated to\n   DetNet packets.  In particular, sending DetNet\
    \ traffic into networks\n   that have not been provisioned in advance to handle\
    \ that DetNet\n   traffic has to be treated as a fault.  The use of egress traffic\n\
    \   filters, or equivalent mechanisms, to prevent this from happening are\n  \
    \ strongly recommended at the edges of DetNet networks and DetNet\n   supporting\
    \ networks.  In this context, the term 'provisioned' has a\n   broad meaning,\
    \ e.g., provisioning could be performed via an\n   administrative decision that\
    \ the downstream network has the available\n   capacity to carry the DetNet traffic\
    \ that is being sent into it.\n   Note that the sending of App-flows that do not\
    \ use transport-layer\n   congestion control per [RFC2914] into a network that\
    \ is not\n   provisioned to handle such traffic has to be treated as a fault and\n\
    \   prevented.  PRF-generated DetNet member flows also need to be treated\n  \
    \ as not using transport-layer congestion control even if the original\n   App-flow\
    \ supports transport-layer congestion control because PREOF\n   can remove congestion\
    \ indications at the PEF and thereby hide such\n   indications (e.g., drops, ECN\
    \ markings, increased latency) from end\n   systems.\n   The mechanisms to support\
    \ these requirements are both Data Plane and\n   implementation specific.  Solutions\
    \ that are data-plane specific will\n   be specified in the relevant data-plane\
    \ solution document.  There\n   also exist techniques, at present and/or in various\
    \ stages of\n   standardization, that can support these fault-mitigation tasks\
    \ that\n   deliver a high probability that misbehaving systems will have zero\n\
    \   impact on well-behaved DetNet flows with the exception, of course, of\n  \
    \ the receiving interface(s) immediately downstream from the\n   misbehaving device.\
    \  Examples of such techniques include traffic\n   policing and shaping functions\
    \ (e.g., those described in [RFC2475]),\n   separating flows into per-flow rate-limited\
    \ queues, and potentially\n   applying active queue management [RFC7567].\n"
- title: 4.  DetNet Architecture
  contents:
  - '4.  DetNet Architecture

    '
- title: 4.1.  DetNet Stack Model
  contents:
  - "4.1.  DetNet Stack Model\n   DetNet functionality (Section 3) is implemented\
    \ in two adjacent sub-\n   layers in the protocol stack: the DetNet service sub-layer\
    \ and the\n   DetNet forwarding sub-layer.  The DetNet service sub-layer provides\n\
    \   DetNet service, e.g., service protection, to higher layers in the\n   protocol\
    \ stack and applications.  The DetNet forwarding sub-layer\n   supports DetNet\
    \ service in the underlying network, e.g., by providing\n   explicit routes and\
    \ resource allocation to DetNet flows.\n"
- title: 4.1.1.  Representative Protocol Stack Model
  contents:
  - "4.1.1.  Representative Protocol Stack Model\n   Figure 2 illustrates a conceptual\
    \ DetNet data-plane layering model.\n   One may compare it to that in [IEEE802.1CB],\
    \ Annex C.\n              |  packets going  |        ^  packets coming   ^\n \
    \             v down the stack  v        |   up the stack    |\n           | \
    \       Source         |   |      Destination      |\n           |   Service sub-layer:\
    \  |   |   Service sub-layer:  |\n           |   Packet sequencing   |   | Duplicate\
    \ elimination |\n           |    Flow replication   |   |      Flow merging  \
    \   |\n           |    Packet encoding    |   |    Packet decoding    |\n    \
    \       | Forwarding sub-layer: |   | Forwarding sub-layer: |\n           |  Resource\
    \ allocation  |   |  Resource allocation  |\n           |    Explicit routes \
    \   |   |    Explicit routes    |\n           |     Lower layers      |   |  \
    \   Lower layers      |\n                       v                           ^\n\
    \                        \\_________________________/\n                 Figure\
    \ 2: DetNet Data-Plane Protocol Stack\n   Not all sub-layers are required for\
    \ any given application, or even\n   for any given network.  The functionality\
    \ shown in Figure 2 is:\n   Application\n      Shown as \"source\" and \"destination\"\
    \ in the diagram.\n   Packet sequencing\n      As part of the DetNet service sub-layer,\
    \ the packet sequencing\n      function supplies the sequence number for packet\
    \ replication and\n      elimination for DetNet service protection (Section 3.2.2.2);\
    \ thus,\n      its peer is duplicate elimination.  This sub-layer is not needed\n\
    \      if a higher-layer protocol is expected to perform any packet\n      sequencing\
    \ and duplicate elimination required by the DetNet flow\n      replication.\n\
    \   Duplicate elimination\n      As part of the DetNet service sub-layer, based\
    \ on the sequence\n      number supplied by its peer (packet sequencing), duplicate\n\
    \      elimination discards any duplicate packets generated by DetNet\n      flow\
    \ replication.  It can operate on member flows, compound flows,\n      or both.\
    \  The replication may also be inferred from other\n      information such as\
    \ the precise time of reception in a scheduled\n      network.  The duplicate\
    \ elimination sub-layer may also perform\n      resequencing of packets to restore\
    \ packet order in a flow that was\n      disrupted by the loss of packets on one\
    \ or another of the multiple\n      paths taken.\n   Flow replication\n      As\
    \ part of DetNet service protection, packets that belong to a\n      DetNet compound\
    \ flow are replicated into two or more DetNet member\n      flows.  This function\
    \ is separate from packet sequencing.  Flow\n      replication can be an explicit\
    \ replication and remarking of\n      packets or can be performed by, for example,\
    \ techniques similar to\n      ordinary multicast replication, albeit with resource\
    \ allocation\n      implications.  Its peer is DetNet flow merging.\n   Flow merging\n\
    \      As part of the DetNet service sub-layer, the flow merging function\n  \
    \    combines DetNet member flows together for packets coming up the\n      stack\
    \ belonging to a specific DetNet compound flow.  DetNet flow\n      merging, together\
    \ with packet sequencing, duplicate elimination,\n      and DetNet flow replication\
    \ perform packet replication and\n      elimination (Section 3.2.2).  Its peer\
    \ is DetNet flow replication.\n   Packet encoding\n      As part of DetNet service\
    \ protection, as an alternative to packet\n      sequencing and flow replication,\
    \ packet encoding combines the\n      information in multiple DetNet packets,\
    \ perhaps from different\n      DetNet compound flows, and transmits that information\
    \ in packets\n      on different DetNet member flows.  Its peer is packet decoding.\n\
    \   Packet decoding\n      As part of DetNet service protection, as an alternative\
    \ to flow\n      merging and duplicate elimination, packet decoding takes packets\n\
    \      from different DetNet member flows and computes from those packets\n  \
    \    the original DetNet packets from the compound flows input to\n      packet\
    \ encoding.  Its peer is packet encoding.\n   Resource allocation\n      The DetNet\
    \ forwarding sub-layer provides resource allocation.  See\n      Section 4.5.\
    \  The actual queuing and shaping mechanisms are\n      typically provided by\
    \ the underlying subnet.  These can be closely\n      associated with the means\
    \ of providing paths for DetNet flows.\n      The path and the resource allocation\
    \ are conflated in this figure.\n   Explicit routes\n      Explicit routes are\
    \ arrangements of fixed paths operated at the\n      DetNet forwarding sub-layer\
    \ that are determined in advance to\n      avoid the impact of network convergence\
    \ on DetNet flows.\n   Operations, Administration, and Maintenance (OAM) leverages\
    \ in-band\n   and out-of-band signaling that validates whether the service is\n\
    \   effectively obtained within QoS constraints.  OAM is not shown in\n   Figure\
    \ 2; it may reside in any number of the layers.  OAM can involve\n   specific\
    \ tagging added in the packets for tracing implementation or\n   network configuration\
    \ errors; traceability enables finding whether a\n   packet is a replica, which\
    \ DetNet relay node performed the\n   replication, and which segment was intended\
    \ for the replica.  Active\n   and hybrid OAM methods require additional bandwidth\
    \ to perform fault\n   management and performance monitoring of the DetNet domain.\
    \  OAM may,\n   for instance, generate special test probes or add OAM information\n\
    \   into the data packet.\n   The packet replication and elimination functions\
    \ may be performed\n   either at the source and destination ends of a DetNet compound\
    \ flow\n   or in a DetNet relay node.\n"
- title: 4.1.2.  DetNet Data-Plane Overview
  contents:
  - "4.1.2.  DetNet Data-Plane Overview\n   A \"Deterministic Network\" will be composed\
    \ of DetNet-enabled end\n   systems, DetNet edge nodes, and DetNet relay nodes,\
    \ which\n   collectively deliver DetNet services.  DetNet relay and edge nodes\n\
    \   are interconnected via DetNet transit nodes (e.g., LSRs), which\n   support\
    \ DetNet but are not DetNet service aware.  All DetNet nodes\n   are connected\
    \ to sub-networks, where a point-to-point link is also\n   considered a simple\
    \ sub-network.  These sub-networks provide DetNet-\n   compatible service for\
    \ support of DetNet traffic.  Examples of sub-\n   network technologies include\
    \ MPLS TE, TSN as defined by IEEE 802.1,\n   and OTN (Optical Transport Network).\
    \  Of course, multilayer DetNet\n   systems may also be possible, where one DetNet\
    \ appears as a sub-\n   network and provides service to a higher-layer DetNet\
    \ system.  A\n   simple DetNet concept network is shown in Figure 3.  Note that\
    \ in\n   this and following figures, \"Forwarding\" and \"Fwd\" refer to the\n\
    \   DetNet forwarding sub-layer, and \"Service\" and \"Svc\" refer to the\n  \
    \ DetNet service sub-layer; both of these sub-layers are described in\n   detail\
    \ in Section 4.1.1.\n   TSN               Edge        Transit         Relay  \
    \      DetNet\n   End System        Node         Node           Node        End\
    \ System\n   |  Appl.   |<--:Svc Proxy:-- End-to-End Service -------->|  Appl.\
    \   |\n   |   TSN    |   |TSN| |Svc|<- DetNet flow --: Service :-->| Service \
    \ |\n   |Forwarding|   |Fwd| |Fwd|   |  Fwd   |    |Fwd| |Fwd|   |Forwarding|\n\
    \           :  Link  :    /  ,-----. \\   : Link  :    /  ,-----.  \\\n      \
    \     +........+    +-[  Sub- ]-+  +.......+    +-[  Sub- ]-+\n              \
    \             [network]                   [network]\n                 Figure 3:\
    \ A Simple DetNet-Enabled Network\n   DetNet Data Plane is divided into two sub-layers:\
    \ the DetNet service\n   sub-layer and the DetNet forwarding sub-layer.  This\
    \ helps to explore\n   and evaluate various combinations of the data-plane solutions\n\
    \   available.  Some of them are illustrated in Figure 4.  This\n   separation\
    \ of DetNet sub-layers, while helpful, should not be\n   considered a formal requirement.\
    \  For example, some technologies may\n   violate these strict sub-layers and\
    \ still be able to deliver a DetNet\n   service.\n                   .\n     \
    \              .\n     |  DetNet Service sub-layer   | PW, UDP, GRE\n     | DetNet\
    \ Forwarding sub-layer | IPv6, IPv4, MPLS TE LSPs, MPLS SR\n                 \
    \  .\n                   .\n                 Figure 4: DetNet Adaptation to Data\
    \ Plane\n   In some networking scenarios, the end system initially provides a\n\
    \   DetNet flow encapsulation, which contains all information needed by\n   DetNet\
    \ nodes (e.g., DetNet flow based on the Real-time Transport\n   Protocol (RTP)\
    \ [RFC3550] that is carried over a native UDP/IP network\n   or pseudowire (PW)).\
    \  In other scenarios, the encapsulation formats\n   might differ significantly.\n\
    \   There are many valid options to create a data-plane solution for\n   DetNet\
    \ traffic by selecting a technology approach for the DetNet\n   service sub-layer\
    \ and also selecting a technology approach for the\n   DetNet forwarding sub-layer.\
    \  There are a large number of valid\n   combinations.\n   One of the most fundamental\
    \ differences between different potential\n   data-plane options is the basic\
    \ headers used by DetNet nodes.  For\n   example, the basic service can be delivered\
    \ based on an MPLS label or\n   an IP header.  This decision impacts the basic\
    \ forwarding logic for\n   the DetNet service sub-layer.  Note that in both cases,\
    \ IP addresses\n   are used to address DetNet nodes.  The selected DetNet forwarding\n\
    \   sub-layer technology also needs to be mapped to the subnet technology\n  \
    \ used to interconnect DetNet nodes.  For example, DetNet flows will\n   need\
    \ to be mapped to TSN Streams.\n"
- title: 4.1.3.  Network Reference Model
  contents:
  - "4.1.3.  Network Reference Model\n   Figure 5 shows another view of the DetNet\
    \ service-related reference\n   points and main components.\n   DetNet       \
    \                                              DetNet\n   End System         \
    \                                        End System\n      _                 \
    \                                            _\n     / \\     +----DetNet-UNI\
    \ (U)                                   / \\\n    /App\\    |                \
    \                                    /App\\\n   | NIC |   v         ________ \
    \                                 | NIC |\n   +--+--+   _____    /        \\ \
    \            DetNet-UNI (U) --+  +--+--+\n      |     /     \\__/          \\\
    \                             |     |\n      +------U PE +----+ P  +----+    \
    \         \\          _   v     |\n             \\  +---+ P  +----+ P  +--+  +----+\
    \ |     \\____/\n              \\___  |    |    |    |           /\n         \
    \         \\ +----+__  +----+     DetNet-1    DetNet-2\n      |            \\\
    _____/  \\___________/                           |\n      |      |     End-to-End\
    \ Service         |     |         |     |\n      |      |     DetNet Service \
    \            |     |         |     |\n           Figure 5: DetNet Service Reference\
    \ Model (Multidomain)\n   DetNet User-to-Network Interfaces (DetNet-UNIs) (\"\
    U\" in Figure 5) are\n   assumed in this document to be packet-based reference\
    \ points and\n   provide connectivity over the packet network.  A DetNet-UNI may\n\
    \   provide multiple functions.  For example, it may:\n   *  add encapsulation\
    \ specific to networking technology to the DetNet\n      flows if necessary,\n\
    \   *  provide status of the availability of the resources associated\n      with\
    \ a reservation,\n   *  provide a synchronization service for the end system,\
    \ or\n   *  carry enough signaling to place the reservation in a network\n   \
    \   without a controller or in a network where the controller only\n      deals\
    \ with the network but not the end systems.\n   Internal reference points of end\
    \ systems (between the application and\n   the Network Interface Card (NIC)) are\
    \ more challenging from the\n   control perspective, and they may have extra requirements\
    \ (e.g., in-\n   order delivery is expected in end system internal reference points,\n\
    \   whereas it is considered optional over the DetNet-UNI).\n"
- title: 4.2.  DetNet Systems
  contents:
  - '4.2.  DetNet Systems

    '
- title: 4.2.1.  End System
  contents:
  - "4.2.1.  End System\n   The traffic characteristics of an App-flow can be CBR\
    \ (constant bit\n   rate) or VBR (variable bit rate) and can have Layer 1, Layer\
    \ 2, or\n   Layer 3 encapsulation (e.g., TDM (time-division multiplexing)\n  \
    \ Ethernet, IP).  These characteristics are considered as input for\n   resource\
    \ reservation and might be simplified to ensure determinism\n   during packet\
    \ forwarding (e.g., making reservations for the peak rate\n   of VBR traffic,\
    \ etc.).\n   An end system may or may not be aware of the DetNet forwarding sub-\n\
    \   layer or DetNet service sub-layer.  That is, an end system may or may\n  \
    \ not contain DetNet-specific functionality.  End systems with DetNet\n   functionalities\
    \ may have the same or different forwarding sub-layer\n   as the connected DetNet\
    \ domain.  Categorization of end systems are\n   shown in Figure 6.\n        \
    \        End system\n                    |\n                    |\n          \
    \          |  DetNet aware ?\n                   / \\\n           +------<   >------+\n\
    \        NO |       \\ /       | YES\n           |        v        |\n    DetNet-unaware\
    \           |\n      End system             |\n                             |\
    \ Service/Forwarding\n          f-aware |         \\ /              | s-aware\n\
    \                  |          v               |\n                  |         \
    \ | both          |\n          DetNet f-aware     |        DetNet s-aware\n  \
    \          End system       |         End system\n                           \
    \  v\n                       DetNet sf-aware\n                         End system\n\
    \                  Figure 6: Categorization of End Systems\n   The following are\
    \ some known use case examples for end systems:\n   DetNet unaware\n      The\
    \ classic case requiring service proxies.\n   DetNet f-aware\n      A system that\
    \ is aware of the DetNet forwarding sub-layer.  It\n      knows about some TSN\
    \ functions (e.g., reservation) but not about\n      service protection.\n   DetNet\
    \ s-aware\n      A system that is aware of the DetNet service sub-layer.  It\n\
    \      supplies sequence numbers but doesn't know about resource\n      allocation.\n\
    \   DetNet sf-aware\n      A fully functioning DetNet end system.  It has DetNet\n\
    \      functionalities and usually the same forwarding paradigm as the\n     \
    \ connected DetNet domain.  It can be treated as an integral part of\n      the\
    \ DetNet domain.\n"
- title: 4.2.2.  DetNet Edge, Relay, and Transit Nodes
  contents:
  - "4.2.2.  DetNet Edge, Relay, and Transit Nodes\n   As shown in Figure 3, DetNet\
    \ edge nodes providing proxy service and\n   DetNet relay nodes providing the\
    \ DetNet service sub-layer are DetNet\n   aware, and DetNet transit nodes need\
    \ only be aware of the DetNet\n   forwarding sub-layer.\n   In general, if a DetNet\
    \ flow passes through one or more DetNet-\n   unaware network nodes between two\
    \ DetNet nodes providing the DetNet\n   forwarding sub-layer for that flow, there\
    \ is a potential for\n   disruption or failure of the DetNet QoS.  A network administrator\n\
    \   needs to 1) ensure that the DetNet-unaware network nodes are\n   configured\
    \ to minimize the chances of packet loss and delay and 2)\n   provision enough\
    \ extra buffer space in the DetNet transit node\n   following the DetNet-unaware\
    \ network nodes to absorb the induced\n   latency variations.\n"
- title: 4.3.  DetNet Flows
  contents:
  - '4.3.  DetNet Flows

    '
- title: 4.3.1.  DetNet Flow Types
  contents:
  - "4.3.1.  DetNet Flow Types\n   A DetNet flow can have different formats while\
    \ its packets are\n   forwarded between the peer end systems depending on the\
    \ type of the\n   end systems.  Corresponding to the end system types, the following\n\
    \   possible types/formats of a DetNet flow are distinguished in this\n   document.\
    \  The different flow types have different requirements to\n   DetNet nodes.\n\
    \   App-flow\n      The payload (data) carried over a DetNet flow between DetNet-\n\
    \      unaware end systems.  An App-flow does not contain any DetNet-\n      related\
    \ attributes and does not imply any specific requirement on\n      DetNet nodes.\n\
    \   DetNet-f-flow\n      The specific format of a DetNet flow.  It only requires\
    \ the\n      resource allocation features provided by the DetNet forwarding\n\
    \      sub-layer.\n   DetNet-s-flow\n      The specific format of a DetNet flow.\
    \  It only requires the\n      service protection feature ensured by the DetNet\
    \ service sub-\n      layer.\n   DetNet-sf-flow\n      The specific format of\
    \ a DetNet flow.  It requires both the DetNet\n      service sub-layer and the\
    \ DetNet forwarding sub-layer functions\n      during forwarding.\n"
- title: 4.3.2.  Source Transmission Behavior
  contents:
  - "4.3.2.  Source Transmission Behavior\n   For the purposes of resource allocation,\
    \ DetNet flows can be\n   synchronous or asynchronous.  In synchronous DetNet\
    \ flows, at least\n   the DetNet nodes (and possibly the end systems) are closely\
    \ time\n   synchronized, typically to better than 1 microsecond.  By\n   transmitting\
    \ packets from different DetNet flows or classes of DetNet\n   flows at different\
    \ times, using repeating schedules synchronized\n   among the DetNet nodes, resources\
    \ such as buffers and link bandwidth\n   can be shared over the time domain among\
    \ different DetNet flows.\n   There is a trade-off among techniques for synchronous\
    \ DetNet flows\n   between the burden of fine-grained scheduling and the benefit\
    \ of\n   reducing the required resources, especially buffer space.\n   In contrast,\
    \ asynchronous DetNet flows are not coordinated with a\n   fine-grained schedule,\
    \ so relay and end systems must assume worst-\n   case interference among DetNet\
    \ flows contending for buffer resources.\n   Asynchronous DetNet flows are characterized\
    \ by:\n   *  A maximum packet size;\n   *  An observation interval; and\n   *\
    \  A maximum number of transmissions during that observation\n      interval.\n\
    \   These parameters, together with knowledge of the protocol stack used\n   (and\
    \ thus the size of the various headers added to a packet), provide\n   the bandwidth\
    \ that is needed for the DetNet flow.\n   The source is required not to exceed\
    \ these limits in order to obtain\n   DetNet service.  If the source transmits\
    \ less data than this limit\n   allows, then the unused resource, such as link\
    \ bandwidth, can be made\n   available by the DetNet system to non-DetNet packets\
    \ as long as all\n   guarantees are fulfilled.  However, making those resources\
    \ available\n   to DetNet packets in other DetNet flows would serve no purpose.\n\
    \   Those other DetNet flows have their own dedicated resources, on the\n   assumption\
    \ that all DetNet flows can use all of their resources over\n   a long period\
    \ of time.\n   There is no expectation in DetNet for App-flows to be responsive\
    \ to\n   congestion control [RFC2914] or explicit congestion notification\n  \
    \ [RFC3168].  The assumption is that a DetNet flow, to be useful, must\n   be\
    \ delivered in its entirety.  That is, while any useful application\n   is written\
    \ to expect a certain number of lost packets, the real-time\n   applications of\
    \ interest to DetNet demand that the loss of data due\n   to the network is a\
    \ rare event.\n   Although DetNet strives to minimize the changes required of\
    \ an\n   application to allow it to shift from a special-purpose digital\n   network\
    \ to an Internet Protocol network, one fundamental shift in the\n   behavior of\
    \ network applications is impossible to avoid: the\n   reservation of resources\
    \ before the application starts.  In the first\n   place, a network cannot deliver\
    \ finite latency and practically zero\n   packet loss to an arbitrarily high offered\
    \ load.  Secondly, achieving\n   practically zero packet loss for DetNet flows\
    \ means that DetNet nodes\n   have to dedicate buffer resources to specific DetNet\
    \ flows or to\n   classes of DetNet flows.  The requirements of each reservation\
    \ have\n   to be translated into the parameters that control each DetNet\n   system's\
    \ queuing, shaping, and scheduling functions, and they have to\n   be delivered\
    \ to the DetNet nodes and end systems.\n   All nodes in a DetNet domain are expected\
    \ to support the data\n   behavior required to deliver a particular DetNet service.\
    \  If a node\n   itself is not DetNet service aware, the DetNet nodes that are\n\
    \   adjacent to them must ensure that the node that is non-DetNet aware\n   is\
    \ provisioned to appropriately support the DetNet service.  For\n   example, a\
    \ TSN node (as defined by IEEE 802.1) may be used to\n   interconnect DetNet-aware\
    \ nodes, and these DetNet nodes can map\n   DetNet flows to 802.1 TSN flows. \
    \ As another example, an MPLS-TE or\n   MPLS-TP (Transport Profile) domain may\
    \ be used to interconnect\n   DetNet-aware nodes, and these DetNet nodes can map\
    \ DetNet flows to TE\n   LSPs, which can provide the QoS requirements of the DetNet\
    \ service.\n"
- title: 4.3.3.  Incomplete Networks
  contents:
  - "4.3.3.  Incomplete Networks\n   The presence in the network of intermediate nodes\
    \ or subnets that are\n   not fully capable of offering DetNet services complicates\
    \ the ability\n   of the intermediate nodes and/or controller to allocate resources,\
    \ as\n   extra buffering must be allocated at points downstream from the non-\n\
    \   DetNet intermediate node for a DetNet flow.  This extra buffering may\n  \
    \ increase latency and/or jitter.\n"
- title: 4.4.  Traffic Engineering for DetNet
  contents:
  - "4.4.  Traffic Engineering for DetNet\n   Traffic Engineering Architecture and\
    \ Signaling (TEAS) [TEAS] defines\n   traffic-engineering architectures for generic\
    \ applicability across\n   packet and nonpacket networks.  From a TEAS perspective,\
    \ Traffic\n   Engineering (TE) refers to techniques that enable operators to\n\
    \   control how specific traffic flows are treated within their networks.\n  \
    \ Because of its very nature of establishing explicit optimized paths,\n   DetNet\
    \ can be seen as a new, specialized branch of TE, and it\n   inherits its architecture\
    \ with a separation into planes.\n   The DetNet architecture is thus composed\
    \ of three planes: a (User)\n   Application Plane, a Controller Plane, and a Network\
    \ Plane.  This\n   echoes the composition of Figure 1 of \"Software-Defined Networking\n\
    \   (SDN): Layers and Architecture Terminology\" [RFC7426] and the\n   controllers\
    \ identified in [RFC8453] and [RFC7149].\n"
- title: 4.4.1.  The Application Plane
  contents:
  - "4.4.1.  The Application Plane\n   Per [RFC7426], the Application Plane includes\
    \ both applications and\n   services.  In particular, the Application Plane incorporates\
    \ the User\n   Agent, a specialized application that interacts with the end user\
    \ and\n   operator and performs requests for DetNet services via an abstract\n\
    \   Flow Management Entity (FME), which may or may not be collocated with\n  \
    \ (one of) the end systems.\n   At the Application Plane, a management interface\
    \ enables the\n   negotiation of flows between end systems.  An abstraction of\
    \ the flow\n   called a Traffic Specification (TSpec) provides the representation.\n\
    \   This abstraction is used to place a reservation over the (Northbound)\n  \
    \ Service Interface and within the Application Plane.  It is associated\n   with\
    \ an abstraction of location, such as IP addresses and DNS names,\n   to identify\
    \ the end systems and possibly specify DetNet nodes.\n"
- title: 4.4.2.  The Controller Plane
  contents:
  - "4.4.2.  The Controller Plane\n   The Controller Plane corresponds to the aggregation\
    \ of the Control\n   and Management Planes in [RFC7426], though Common Control\
    \ and\n   Measurement Plane (CCAMP) (as defined by the CCAMP Working Group\n \
    \  [CCAMP]) makes an additional distinction between management and\n   measurement.\
    \  When the logical separation of the Control,\n   Measurement, and other Management\
    \ entities is not relevant, the term\n   \"Controller Plane\" is used for simplicity\
    \ to represent them all, and\n   the term \"Controller Plane Function (CPF)\"\
    \ refers to any device\n   operating in that plane, whether it is a Path Computation\
    \ Element\n   (PCE) [RFC4655], a Network Management Entity (NME), or a distributed\n\
    \   control protocol.  The CPF is a core element of a controller, in\n   charge\
    \ of computing deterministic paths to be applied in the Network\n   Plane.\n \
    \  A (Northbound) Service Interface enables applications in the\n   Application\
    \ Plane to communicate with the entities in the Controller\n   Plane as illustrated\
    \ in Figure 7.\n   One or more CPFs collaborate to implement the requests from\
    \ the FME\n   as per-flow, per-hop behaviors installed in the DetNet nodes for\
    \ each\n   individual flow.  The CPFs place each flow along a deterministic\n\
    \   arrangement of DetNet nodes so as to respect per-flow constraints\n   such\
    \ as security and latency, and to optimize the overall result for\n   metrics\
    \ such as an abstract aggregated cost.  The deterministic\n   arrangement can\
    \ typically be more complex than a direct arrangement\n   and include redundant\
    \ paths with one or more packet replication and\n   elimination points.  Scaling\
    \ to larger networks is discussed in\n   Section 4.9.\n"
- title: 4.4.3.  The Network Plane
  contents:
  - "4.4.3.  The Network Plane\n   The Network Plane represents the network devices\
    \ and protocols as a\n   whole, regardless of the layer at which the network devices\
    \ operate.\n   It includes the Data Plane and Operational Plane (e.g., OAM) aspects.\n\
    \   The Network Plane comprises the Network Interface Cards (NICs) in the\n  \
    \ end systems, which are typically IP hosts, and DetNet nodes, which\n   are typically\
    \ IP routers and MPLS switches.\n   A Southbound (Network) Interface enables the\
    \ entities in the\n   Controller Plane to communicate with devices in the Network\
    \ Plane as\n   illustrated in Figure 7.  This interface leverages and extends\
    \ TEAS\n   to describe the physical topology and resources in the Network Plane.\n\
    \       End                                                     End\n       System\
    \                                               System\n      -+-+-+-+-+-+-+ Northbound\
    \ -+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\n                CPF         CPF       \
    \       CPF              CPF\n      -+-+-+-+-+-+-+ Southbound -+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\n\
    \                 DetNet     DetNet     DetNet     DetNet\n                  Node\
    \       Node       Node       Node\n       NIC                               \
    \                      NIC\n                 DetNet     DetNet     DetNet    \
    \ DetNet\n                  Node       Node       Node       Node\n          \
    \     Figure 7: Northbound and Southbound Interfaces\n   The DetNet nodes (and\
    \ possibly the end systems' NICs) expose their\n   capabilities and physical resources\
    \ to the controller (the CPF) and\n   update the CPFs with their dynamic perception\
    \ of the topology across\n   the Southbound Interface.  In return, the CPFs set\
    \ the per-flow paths\n   up, providing a Flow Characterization that is more tightly\
    \ coupled to\n   the DetNet node operation than a TSpec.\n   At the Network Plane,\
    \ DetNet nodes may exchange information regarding\n   the state of the paths,\
    \ between adjacent DetNet nodes and possibly\n   with the end systems, and forward\
    \ packets within constraints\n   associated to each flow, or, when unable to do\
    \ so, perform a last-\n   resort operation such as drop or declassify.\n   This\
    \ document focuses on the Southbound interface and the operation\n   of the Network\
    \ Plane.\n"
- title: 4.5.  Queuing, Shaping, Scheduling, and Preemption
  contents:
  - "4.5.  Queuing, Shaping, Scheduling, and Preemption\n   DetNet achieves bounded\
    \ delivery latency by reserving bandwidth and\n   buffer resources at each DetNet\
    \ node along the path of the DetNet\n   flow.  The reservation itself is not sufficient,\
    \ however.\n   Implementors and users of a number of proprietary and standard\
    \ real-\n   time networks have found that standards for specific data-plane\n\
    \   techniques are required to enable these assurances to be made in a\n   multivendor\
    \ network.  The fundamental reason is that latency\n   variation in one DetNet\
    \ system results in the need for extra buffer\n   space in the next-hop DetNet\
    \ system(s), which in turn increases the\n   worst-case per-hop latency.\n   Standard\
    \ queuing and transmission-selection algorithms allow TE\n   (Section 4.4) to\
    \ compute the latency contribution of each DetNet node\n   to the end-to-end latency,\
    \ to compute the amount of buffer space\n   required in each DetNet node for each\
    \ incremental DetNet flow, and\n   most importantly, to translate from a flow\
    \ specification to a set of\n   values for the managed objects that control each\
    \ relay or end system.\n   For example, the IEEE 802.1 WG has specified (and is\
    \ specifying) a\n   set of queuing, shaping, and scheduling algorithms that enable\
    \ each\n   DetNet node, and/or a central controller, to compute these values.\n\
    \   These algorithms include:\n   *  A credit-based shaper [IEEE802.1Qav] (incorporated\
    \ to\n      [IEEE802.1Q]).\n   *  Time-gated queues governed by a rotating time\
    \ schedule based on\n      synchronized time [IEEE802.1Qbv] (incorporated to [IEEE802.1Q]).\n\
    \   *  Synchronized double (or triple) buffers driven by synchronized\n      time\
    \ ticks.  [IEEE802.1Qch] (incorporated to [IEEE802.1Q]).\n   *  Preemption of\
    \ an Ethernet packet in transmission by a packet with\n      a more stringent\
    \ latency requirement, followed by the resumption\n      of the preempted packet\
    \ [IEEE802.1Qbu] (incorporated to\n      [IEEE802.1Q]) [IEEE802.3br] (incorporated\
    \ to [IEEE802.3]).\n   While these techniques are currently embedded in Ethernet\
    \ [IEEE802.3]\n   and bridging standards, we can note that they are all, except\
    \ perhaps\n   for packet preemption, equally applicable to media other than\n\
    \   Ethernet and to routers as well as bridges.  Other media may have\n   their\
    \ own methods (see, e.g., [TSCH-ARCH] and [RFC7554]).  Further\n   techniques\
    \ are defined by the IETF (e.g., [RFC8289] and [RFC8033]).\n   DetNet may include\
    \ such definitions in the future or may define how\n   these techniques can be\
    \ used by DetNet nodes.\n"
- title: 4.6.  Service Instance
  contents:
  - "4.6.  Service Instance\n   A service instance represents all the functions required\
    \ on a DetNet\n   node to allow the end-to-end service between the UNIs.\n   The\
    \ DetNet network general reference model is shown in Figure 8 for a\n   DetNet\
    \ service scenario (i.e., between two DetNet-UNIs).  In this\n   figure, end systems\
    \ (\"A\" and \"B\") are connected directly to the edge\n   nodes of an IP/MPLS\
    \ network (\"PE1\" and \"PE2\").  End systems\n   participating in DetNet communication\
    \ may require connectivity before\n   setting up an App-flow that requires the\
    \ DetNet service.  Such a\n   connectivity-related service instance and the one\
    \ dedicated for\n   DetNet service share the same access.  Packets belonging to\
    \ a DetNet\n   flow are selected by a filter configured on the access (\"F1\"\
    \ and\n   \"F2\").  As a result, data-flow-specific access (\"access-A + F1\"\
    \ and\n   \"access-B + F2\") is terminated in the flow-specific service instance\n\
    \   (\"SI-1\" and \"SI-2\").  A tunnel is used to provide connectivity\n   between\
    \ the service instances.\n   The tunnel is exclusively used for the packets of\
    \ the DetNet flow\n   between \"SI-1\" and \"SI-2\".  The service instances are\
    \ configured to\n   implement DetNet functions and a flow-specific DetNet forwarding.\n\
    \   The service instance and the tunnel may or may not be shared by\n   multiple\
    \ DetNet flows.  Sharing the service instance by multiple\n   DetNet flows requires\
    \ properly populated forwarding tables of the\n   service instance.\n        \
    \     access-A                                     access-B\n   End system   \
    \ |  +----+ |       /   \\/ \\_      | +----+  | End system\n       \"A\" -------F1+\
    \    | |      /         \\     | |    +F2----- \"B\"\n                 |  |SI-1|\
    \ |      \\__  Net._/     | |SI-2|  |\n                 |PE1      |          \
    \            |      PE2|\n              Figure 8: DetNet Network General Reference\
    \ Model\n   The tunnel between the service instances may have some special\n \
    \  characteristics.  For example, in case of a DetNet L3 service, there\n   are\
    \ differences in the usage of the PW for DetNet traffic compared to\n   the network\
    \ model described in [RFC6658].  In the DetNet scenario,\n   the PW is likely\
    \ to be used exclusively by the DetNet flow, whereas\n   [RFC6658] states:\n \
    \  |  The packet PW appears as a single point-to-point link to the\n   |  client\
    \ layer.  Network-layer adjacency formation and maintenance\n   |  between the\
    \ client equipments will follow the normal practice\n   |  needed to support the\
    \ required relationship in the client layer.\n   and\n   |  This packet pseudowire\
    \ is used to transport all of the required\n   |  layer 2 and layer 3 protocols\
    \ between LSR1 and LSR2.\n   Further details are network technology specific and\
    \ can be found in\n   [DETNET-FRAMEWORK].\n"
- title: 4.7.  Flow Identification at Technology Borders
  contents:
  - "4.7.  Flow Identification at Technology Borders\n   This section discusses what\
    \ needs to be done at technology borders\n   including Ethernet as one of the\
    \ technologies.  Flow identification\n   for MPLS and IP Data Planes are described\
    \ in [DETNET-MPLS] and\n   [DETNET-IP], respectively.\n"
- title: 4.7.1.  Exporting Flow Identification
  contents:
  - "4.7.1.  Exporting Flow Identification\n   A DetNet node may need to map specific\
    \ flows to lower-layer flows (or\n   Streams) in order to provide specific queuing\
    \ and shaping services\n   for specific flows.  For example:\n   *  A non-IP,\
    \ strictly L2 source end system X may be sending multiple\n      flows to the\
    \ same L2 destination end system Y.  Those flows may\n      include DetNet flows\
    \ with different QoS requirements and may\n      include non-DetNet flows.\n \
    \  *  A router may be sending any number of flows to another router.\n      Again,\
    \ those flows may include DetNet flows with different QoS\n      requirements\
    \ and may include non-DetNet flows.\n   *  Two routers may be separated by bridges.\
    \  For these bridges to\n      perform any required per-flow queuing and shaping,\
    \ they must be\n      able to identify the individual flows.\n   *  A Label Edge\
    \ Router (LER) may have a Label Switched Path (LSP) set\n      up for handling\
    \ traffic destined for a particular IP address\n      carrying only non-DetNet\
    \ flows.  If a DetNet flow to that same\n      address is requested, a separate\
    \ LSP may be needed in order for\n      all of the Label Switch Routers (LSRs)\
    \ along the path to the\n      destination to give that flow special queuing and\
    \ shaping.\n   The need for a lower-layer node to be aware of individual higher-\n\
    \   layer flows is not unique to DetNet.  But, given the endless\n   complexity\
    \ of layering and relayering over tunnels that is available\n   to network designers,\
    \ DetNet needs to provide a model for flow\n   identification that is better than\
    \ packet inspection.  That is not to\n   say that packet inspection to Layer 4\
    \ or Layer 5 addresses will not\n   be used or the capability standardized; however,\
    \ there are\n   alternatives.\n   A DetNet relay node can connect DetNet flows\
    \ on different paths using\n   different flow identification methods.  For example:\n\
    \   *  A single unicast DetNet flow passing from router A through a\n      bridged\
    \ network to router B may be assigned a TSN Stream\n      identifier that is unique\
    \ within that bridged network.  The\n      bridges can then identify the flow\
    \ without accessing higher-layer\n      headers.  Of course, the receiving router\
    \ must recognize and\n      accept that TSN Stream.\n   *  A DetNet flow passing\
    \ from LSR A to LSR B may be assigned a\n      different label than that used\
    \ for other flows to the same IP\n      destination.\n   In any of the above cases,\
    \ it is possible that an existing DetNet\n   flow can be an aggregate carrying\
    \ multiple other DetNet flows (not to\n   be confused with DetNet compound vs.\
    \ member flows).  Of course, this\n   requires that the aggregate DetNet flow\
    \ be provisioned properly to\n   carry the aggregated flows.\n   Thus, rather\
    \ than packet inspection, there is the option to export\n   higher-layer information\
    \ to the lower layer.  The requirement to\n   support one or the other method\
    \ for flow identification (or both) is\n   a complexity that is part of DetNet\
    \ control models.\n"
- title: 4.7.2.  Flow Attribute Mapping between Layers
  contents:
  - "4.7.2.  Flow Attribute Mapping between Layers\n   Forwarding of packets of DetNet\
    \ flows over multiple technology\n   domains may require that lower layers are\
    \ aware of specific flows of\n   higher layers.  Such an \"exporting of flow identification\"\
    \ is needed\n   each time when the forwarding paradigm is changed on the forwarding\n\
    \   path (e.g., two LSRs are interconnected by an L2 bridged domain,\n   etc.).\
    \  The three representative forwarding methods considered for\n   DetNet are:\n\
    \   *  IP routing\n   *  MPLS label switching\n   *  Ethernet bridging\n   A packet\
    \ with corresponding Flow-IDs is illustrated in Figure 9,\n   which also indicates\
    \ where each Flow-ID can be added or removed.\n       add/remove     add/remove\n\
    \       Eth Flow-ID    IP Flow-ID\n           |             |\n           v  \
    \           v\n        | Eth  | MPLS |  IP  |     Application data           \
    \      |\n                  ^\n                  |\n              add/remove\n\
    \             MPLS Flow-ID\n                  Figure 9: Packet with Multiple Flow-IDs\n\
    \   The additional (domain-specific) Flow-ID can be:\n   *  created by a domain-specific\
    \ function or\n   *  derived from the Flow-ID added to the App-flow.\n   The Flow-ID\
    \ must be unique inside a given domain.  Note that the\n   Flow-ID added to the\
    \ App-flow is still present in the packet, but\n   some nodes may lack the function\
    \ to recognize it; that's why the\n   additional Flow-ID is added.\n"
- title: 4.7.3.  Flow-ID Mapping Examples
  contents:
  - "4.7.3.  Flow-ID Mapping Examples\n   IP nodes and MPLS nodes are assumed to be\
    \ configured to push such an\n   additional (domain-specific) Flow-ID when sending\
    \ traffic to an\n   Ethernet switch (as shown in the examples below).\n   Figure\
    \ 10 shows a scenario where an IP end system (\"IP-A\") is\n   connected via two\
    \ Ethernet switches (\"ETH-n\") to an IP router (\"IP-\n   1\").\n           |L3-ID\
    \ |                                       |L3-ID |\n                    /  \\\
    \       Forward as         |     |\n                   /IP-A\\      per ETH-ID\
    \         |IP-1 |      Recognize\n   Push  ------>  +-+----+         |       \
    \       +---+-+  <----- ETH-ID\n   ETH-ID           |         +----+-----+   \
    \         |\n                    |         v          v            |\n       \
    \    +......+        |ETH-1+----+ETH-2|           +======+\n           .L3-ID\
    \ .        +-----+    +-----+           |L3-ID |\n           |ETH-ID|        \
    \     .L3-ID .                |ETH-ID|\n                             Ethernet\
    \ domain\n          Figure 10: IP Nodes Interconnected by an Ethernet Domain\n\
    \   End system \"IP-A\" uses the original App-flow-specific ID (\"L3-ID\"),\n\
    \   but as it is connected to an Ethernet domain, it has to push an\n   Ethernet-domain-specific\
    \ Flow-ID (\"ETH-ID\") before sending the packet\n   to \"ETH-1\".  Ethernet switch\
    \ \"ETH-1\" can recognize the data flow\n   based on the \"ETH-ID\", and it does\
    \ forwarding toward \"ETH-2\".  \"ETH-\n   2\" switches the packet toward the\
    \ IP router.  \"IP-1\" must be\n   configured to receive the Ethernet Flow-ID-specific\
    \ multicast flow,\n   but (as it is an L3 node) it decodes the data flow ID based\
    \ on the\n   \"L3-ID\" fields of the received packet.\n   Figure 11 shows a scenario\
    \ where MPLS domain nodes (\"PE-n\" and \"P-m\")\n   are connected via two Ethernet\
    \ switches (\"ETH-n\").\n       |MPLS-ID|                                  |MPLS-ID|\n\
    \                  |     |   Forward as    |     |           |     |\n       \
    \           |PE-1 |   per ETH-ID    | P-2 +-----------+ PE-2|\n   Push   ----->\
    \  +-+---+        |        +---+-+           +-----+\n   ETH-ID           |  \
    \    +-----+----+       |  \\ Recognize\n                    |      v        \
    \  v       |   +-- ETH-ID\n           +.......+    |ETH-1+----+ETH-2|   +=======+\n\
    \           .MPLS-ID.    +-----+    +-----+   |MPLS-ID|\n           |ETH-ID |\
    \         +.......+       |ETH-ID |\n           +=======+         .MPLS-ID.  \
    \     +-------+\n                             |ETH-ID |\n                    \
    \      Ethernet domain\n         Figure 11: MPLS Nodes Interconnected by an Ethernet\
    \ Domain\n   \"PE-1\" uses the MPLS-specific ID (\"MPLS-ID\"), but as it is connected\n\
    \   to an Ethernet domain, it has to push an Ethernet-domain-specific\n   Flow-ID\
    \ (\"ETH-ID\") before sending the packet to \"ETH-1\".  Ethernet\n   switch \"\
    ETH-1\" can recognize the data flow based on the \"ETH-ID\", and\n   it does forwarding\
    \ toward \"ETH-2\".  \"ETH-2\" switches the packet\n   toward the MPLS node (\"\
    P-2\").  \"P-2\" must be configured to receive\n   the Ethernet Flow-ID-specific\
    \ multicast flow, but (as it is an MPLS\n   node) it decodes the data flow ID\
    \ based on the \"MPLS-ID\" fields of\n   the received packet.\n   One can appreciate\
    \ from the above example that, when the means used\n   for DetNet flow identification\
    \ is altered or exported, the means for\n   encoding the sequence number information\
    \ must similarly be altered or\n   exported.\n"
- title: 4.8.  Advertising Resources, Capabilities, and Adjacencies
  contents:
  - "4.8.  Advertising Resources, Capabilities, and Adjacencies\n   Provisioning of\
    \ DetNet requires knowledge about:\n   *  Details of the DetNet system's capabilities\
    \ that are required in\n      order to accurately allocate that DetNet system's\
    \ resources, as\n      well as other DetNet systems' resources.  This includes,\
    \ for\n      example, which specific queuing and shaping algorithms are\n    \
    \  implemented (Section 4.5), the number of buffers dedicated for\n      DetNet\
    \ allocation, and the worst-case forwarding delay and\n      misordering.\n  \
    \ *  The actual state of a DetNet node's DetNet resources.\n   *  The identity\
    \ of the DetNet system's neighbors and the\n      characteristics of the link(s)\
    \ between the DetNet systems,\n      including the latency of the links (in nanoseconds).\n"
- title: 4.9.  Scaling to Larger Networks
  contents:
  - "4.9.  Scaling to Larger Networks\n   Reservations for individual DetNet flows\
    \ require considerable state\n   information in each DetNet node, especially when\
    \ adequate fault\n   mitigation (Section 3.3.2) is required.  The DetNet Data\
    \ Plane, in\n   order to support larger numbers of DetNet flows, must support\
    \ the\n   aggregation of DetNet flows.  Such aggregated flows can be viewed by\n\
    \   the DetNet nodes' Data Plane largely as individual DetNet flows.\n   Without\
    \ such aggregation, the per-relay system may limit the scale of\n   DetNet networks.\
    \  Example techniques that may be used include MPLS\n   hierarchy and IP DiffServ\
    \ Code Points (DSCPs).\n"
- title: 4.10.  Compatibility with Layer 2
  contents:
  - "4.10.  Compatibility with Layer 2\n   Standards providing similar capabilities\
    \ for bridged networks (only)\n   have been and are being generated in the IEEE\
    \ 802 LAN/MAN Standards\n   Committee.  The present architecture describes an\
    \ abstract model that\n   can be applicable both at Layer 2 and Layer 3, and over\
    \ links not\n   defined by IEEE 802.\n   DetNet-enabled end systems and DetNet\
    \ nodes can be interconnected by\n   sub-networks, i.e., Layer 2 technologies.\
    \  These sub-networks will\n   provide DetNet compatible service for support of\
    \ DetNet traffic.\n   Examples of sub-network technologies include MPLS TE, TSN\
    \ as defined\n   by IEEE 802.1, and a point-to-point OTN link.  Of course, multilayer\n\
    \   DetNet systems may be possible too, where one DetNet appears as a\n   sub-network\
    \ and provides service to a higher-layer DetNet system.\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   Security considerations for DetNet are described\
    \ in detail in\n   [DETNET-SECURITY].  This section considers exclusively security\n\
    \   considerations that are specific to the DetNet architecture.\n   Security\
    \ aspects that are unique to DetNet are those whose aim is to\n   provide the\
    \ specific QoS aspects of DetNet, which are primarily to\n   deliver data flows\
    \ with extremely low packet loss rates and bounded\n   end-to-end delivery latency.\
    \  A DetNet may be implemented using MPLS\n   and/or IP (including both v4 and\
    \ v6) technologies and thus inherits\n   the security properties of those technologies\
    \ at both the Data Plane\n   and the Controller Plane.\n   Security considerations\
    \ for DetNet are constrained (compared to, for\n   example, the open Internet)\
    \ because DetNet is defined to operate only\n   within a single administrative\
    \ domain (see Section 1).  The primary\n   considerations are to secure the request\
    \ and control of DetNet\n   resources, maintain confidentiality of data traversing\
    \ the DetNet,\n   and provide the availability of the DetNet QoS.\n   To secure\
    \ the request and control of DetNet resources, authentication\n   and authorization\
    \ can be used for each device connected to a DetNet\n   domain, most importantly\
    \ to network controller devices.  Control of a\n   DetNet network may be centralized\
    \ or distributed (within a single\n   administrative domain).  In the case of\
    \ centralized control,\n   precedent for security considerations as defined for\
    \ Abstraction and\n   Control of Traffic Engineered Networks (ACTN) can be found\
    \ in\n   Section 9 of [RFC8453].  In the case of distributed control\n   protocols,\
    \ DetNet security is expected to be provided by the security\n   properties of\
    \ the protocols in use.  In any case, the result is that\n   manipulation of administratively\
    \ configurable parameters is limited\n   to authorized entities.\n   To maintain\
    \ confidentiality of data traversing the DetNet,\n   application flows can be\
    \ protected through whatever means is provided\n   by the underlying technology.\
    \  For example, encryption may be used,\n   such as that provided by IPsec [RFC4301],\
    \ for IP flows and by MACSec\n   [IEEE802.1AE] for Ethernet (Layer 2) flows.\n\
    \   DetNet flows are identified on a per-flow basis, which may provide\n   attackers\
    \ with additional information about the data flows (when\n   compared to networks\
    \ that do not include per-flow identification).\n   This is an inherent property\
    \ of DetNet that has security implications\n   that should be considered when\
    \ determining if DetNet is a suitable\n   technology for any given use case.\n\
    \   To provide uninterrupted availability of the DetNet QoS, provisions\n   can\
    \ be made against DoS attacks and delay attacks.  To protect\n   against DoS attacks,\
    \ excess traffic due to malicious or\n   malfunctioning devices can be prevented\
    \ or mitigated, for example,\n   through the use of traffic admission control\
    \ applied at the input of\n   a DetNet domain as described in Section 3.2.1 and\
    \ through the fault-\n   mitigation methods described in Section 3.3.2.  To prevent\
    \ DetNet\n   packets from being delayed by an entity external to a DetNet domain,\n\
    \   DetNet technology definition can allow for the mitigation of man-in-\n   the-middle\
    \ attacks, for example, through use of authentication and\n   authorization of\
    \ devices within the DetNet domain.\n   Because DetNet mechanisms or applications\
    \ that rely on DetNet can\n   make heavy use of methods that require precise time\
    \ synchronization,\n   the accuracy, availability, and integrity of time synchronization\
    \ is\n   of critical importance.  Extensive discussion of this topic can be\n\
    \   found in [RFC7384].\n   DetNet use cases are known to have widely divergent\
    \ security\n   requirements.  The intent of this section is to provide a baseline\n\
    \   for security considerations that are common to all DetNet designs and\n  \
    \ implementations, without burdening individual designs with specifics\n   of\
    \ security infrastructure that may not be germane to the given use\n   case. \
    \ Designers and implementors of DetNet systems are expected to\n   take use-case-specific\
    \ considerations into account in their DetNet\n   designs and implementations.\n"
- title: 6.  Privacy Considerations
  contents:
  - "6.  Privacy Considerations\n   DetNet provides a QoS, and the generic considerations\
    \ for such\n   mechanisms apply.  In particular, such markings allow for an attacker\n\
    \   to correlate flows or to select particular types of flow for more\n   detailed\
    \ inspection.\n   However, the requirement for every (or almost every) node along\
    \ the\n   path of a DetNet flow to identify DetNet flows may present an\n   additional\
    \ attack surface for privacy should the DetNet paradigm be\n   found useful in\
    \ broader environments.\n"
- title: 7.  IANA Considerations
  contents:
  - "7.  IANA Considerations\n   This document has no IANA actions.\n"
- title: 8.  Informative References
  contents:
  - "8.  Informative References\n   [BUFFERBLOAT]\n              Gettys, J. and K.\
    \ Nichols, \"Bufferbloat: Dark Buffers in\n              the Internet\", DOI 10.1145/2063176.2063196,\
    \ Communications\n              of the ACM, Volume 55, Issue 1, January 2012,\n\
    \              <https://doi.org/10.1145/2063176.2063196>.\n   [CCAMP]    IETF,\
    \ \"Common Control and Measurement Plane (ccamp)\",\n              October 2019,\n\
    \              <https://datatracker.ietf.org/wg/ccamp/charter/>.\n   [DETNET-FRAMEWORK]\n\
    \              Varga, B., Farkas, J., Berger, L., Fedyk, D., Malis, A.,\n    \
    \          Bryant, S., and J. Korhonen, \"DetNet Data Plane\n              Framework\"\
    , Work in Progress, Internet-Draft, draft-ietf-\n              detnet-data-plane-framework-02,\
    \ 13 September 2019,\n              <https://tools.ietf.org/html/draft-ietf-detnet-data-plane-\n\
    \              framework-02>.\n   [DETNET-IP]\n              Varga, B., Farkas,\
    \ J., Berger, L., Fedyk, D., Malis, A.,\n              Bryant, S., and J. Korhonen,\
    \ \"DetNet Data Plane: IP\", Work\n              in Progress, Internet-Draft,\
    \ draft-ietf-detnet-ip-01, 1\n              July 2019,\n              <https://tools.ietf.org/html/draft-ietf-detnet-ip-01>.\n\
    \   [DETNET-MPLS]\n              Varga, B., Farkas, J., Berger, L., Fedyk, D.,\
    \ Malis, A.,\n              Bryant, S., and J. Korhonen, \"DetNet Data Plane:\
    \ MPLS\",\n              Work in Progress, Internet-Draft, draft-ietf-detnet-mpls-\n\
    \              01, 1 July 2019,\n              <https://tools.ietf.org/html/draft-ietf-detnet-mpls-01>.\n\
    \   [DETNET-SECURITY]\n              Mizrahi, T., Grossman, E., Hacker, A., Das,\
    \ S., Dowdell,\n              J., Austad, H., Stanton, K., and N. Finn, \"Deterministic\n\
    \              Networking (DetNet) Security Considerations\", Work in\n      \
    \        Progress, Internet-Draft, draft-ietf-detnet-security-05,\n          \
    \    29 August 2019, <https://tools.ietf.org/html/draft-ietf-\n              detnet-security-05>.\n\
    \   [IEC-62439-3]\n              IEC, \"Industrial communication networks - High\n\
    \              availability automation networks - Part 3: Parallel\n         \
    \     Redundancy Protocol (PRP) and High-availability Seamless\n             \
    \ Redundancy (HSR)\", TC 65 / SC 65C, IEC 62439-3:2016, March\n              2016,\
    \ <https://webstore.iec.ch/publication/24447>.\n   [IEEE802.1AE]\n           \
    \   IEEE, \"IEEE Standard for Local and metropolitan area\n              networks-Media\
    \ Access Control (MAC) Security\", IEEE \n              802.1AE-2018,\n      \
    \        <https://ieeexplore.ieee.org/document/8585421>.\n   [IEEE802.1BA]\n \
    \             IEEE, \"IEEE Standard for Local and metropolitan area\n        \
    \      networks--Audio Video Bridging (AVB) Systems\", IEEE \n              802.1BA-2011,\n\
    \              <https://ieeexplore.ieee.org/document/6032690>.\n   [IEEE802.1CB]\n\
    \              IEEE, \"IEEE Standard for Local and metropolitan area\n       \
    \       networks--Frame Replication and Elimination for\n              Reliability\"\
    , DOI 10.1109/IEEESTD.2017.8091139, IEEE \n              802.1CB-2017, October\
    \ 2019,\n              <https://ieeexplore.ieee.org/document/8091139>.\n   [IEEE802.1Q]\n\
    \              IEEE, \"IEEE Standard for Local and Metropolitan Area\n       \
    \       Network--Bridges and Bridged Networks\", IEEE 802.1Q-2018,\n         \
    \     <https://ieeexplore.ieee.org/document/8403927>.\n   [IEEE802.1Qav]\n   \
    \           IEEE, \"IEEE Standard for Local and Metropolitan Area\n          \
    \    Networks - Virtual Bridged Local Area Networks Amendment\n              12:\
    \ Forwarding and Queuing Enhancements for Time-Sensitive\n              Streams\"\
    , IEEE 802.1Qav-2009,\n              <https://ieeexplore.ieee.org/document/5375704>.\n\
    \   [IEEE802.1Qbu]\n              IEEE, \"IEEE Standard for Local and metropolitan\
    \ area\n              networks -- Bridges and Bridged Networks -- Amendment 26:\n\
    \              Frame Preemption\", IEEE 802.1Qbu-2016,\n              <https://ieeexplore.ieee.org/document/7553415>.\n\
    \   [IEEE802.1Qbv]\n              IEEE, \"IEEE Standard for Local and metropolitan\
    \ area\n              networks -- Bridges and Bridged Networks - Amendment 25:\n\
    \              Enhancements for Scheduled Traffic\", IEEE 802.1Qbv-2015,\n   \
    \           <https://ieeexplore.ieee.org/document/7440741>.\n   [IEEE802.1Qch]\n\
    \              IEEE, \"IEEE Standard for Local and metropolitan area\n       \
    \       networks--Bridges and Bridged Networks--Amendment 29:\n              Cyclic\
    \ Queuing and Forwarding\", IEEE 802.1Qch-2017,\n              <https://ieeexplore.ieee.org/document/7961303>.\n\
    \   [IEEE802.1TSNTG]\n              IEEE, \"Time-Sensitive Networking (TSN) Task\
    \ Group\",\n              <https://1.ieee802.org/tsn/>.\n   [IEEE802.3]\n    \
    \          IEEE, \"IEEE Standard for Ethernet\", IEEE 802.3-2018,\n          \
    \    <https://ieeexplore.ieee.org/document/8457469>.\n   [IEEE802.3br]\n     \
    \         IEEE, \"IEEE Standard for Ethernet Amendment 5:\n              Specification\
    \ and Management Parameters for Interspersing\n              Express Traffic\"\
    , IEEE 802.3br,\n              <https://ieeexplore.ieee.org/document/7900321>.\n\
    \   [RFC2205]  Braden, R., Ed., Zhang, L., Berson, S., Herzog, S., and S.\n  \
    \            Jamin, \"Resource ReSerVation Protocol (RSVP) -- Version 1\n    \
    \          Functional Specification\", RFC 2205, DOI 10.17487/RFC2205,\n     \
    \         September 1997, <https://www.rfc-editor.org/info/rfc2205>.\n   [RFC2475]\
    \  Blake, S., Black, D., Carlson, M., Davies, E., Wang, Z.,\n              and\
    \ W. Weiss, \"An Architecture for Differentiated\n              Services\", RFC\
    \ 2475, DOI 10.17487/RFC2475, December 1998,\n              <https://www.rfc-editor.org/info/rfc2475>.\n\
    \   [RFC2914]  Floyd, S., \"Congestion Control Principles\", BCP 41,\n       \
    \       RFC 2914, DOI 10.17487/RFC2914, September 2000,\n              <https://www.rfc-editor.org/info/rfc2914>.\n\
    \   [RFC3168]  Ramakrishnan, K., Floyd, S., and D. Black, \"The Addition\n   \
    \           of Explicit Congestion Notification (ECN) to IP\",\n             \
    \ RFC 3168, DOI 10.17487/RFC3168, September 2001,\n              <https://www.rfc-editor.org/info/rfc3168>.\n\
    \   [RFC3209]  Awduche, D., Berger, L., Gan, D., Li, T., Srinivasan, V.,\n   \
    \           and G. Swallow, \"RSVP-TE: Extensions to RSVP for LSP\n          \
    \    Tunnels\", RFC 3209, DOI 10.17487/RFC3209, December 2001,\n             \
    \ <https://www.rfc-editor.org/info/rfc3209>.\n   [RFC3550]  Schulzrinne, H., Casner,\
    \ S., Frederick, R., and V.\n              Jacobson, \"RTP: A Transport Protocol\
    \ for Real-Time\n              Applications\", STD 64, RFC 3550, DOI 10.17487/RFC3550,\n\
    \              July 2003, <https://www.rfc-editor.org/info/rfc3550>.\n   [RFC4301]\
    \  Kent, S. and K. Seo, \"Security Architecture for the\n              Internet\
    \ Protocol\", RFC 4301, DOI 10.17487/RFC4301,\n              December 2005, <https://www.rfc-editor.org/info/rfc4301>.\n\
    \   [RFC4655]  Farrel, A., Vasseur, J.-P., and J. Ash, \"A Path\n            \
    \  Computation Element (PCE)-Based Architecture\", RFC 4655,\n              DOI\
    \ 10.17487/RFC4655, August 2006,\n              <https://www.rfc-editor.org/info/rfc4655>.\n\
    \   [RFC6372]  Sprecher, N., Ed. and A. Farrel, Ed., \"MPLS Transport\n      \
    \        Profile (MPLS-TP) Survivability Framework\", RFC 6372,\n            \
    \  DOI 10.17487/RFC6372, September 2011,\n              <https://www.rfc-editor.org/info/rfc6372>.\n\
    \   [RFC6658]  Bryant, S., Ed., Martini, L., Swallow, G., and A. Malis,\n    \
    \          \"Packet Pseudowire Encapsulation over an MPLS PSN\",\n           \
    \   RFC 6658, DOI 10.17487/RFC6658, July 2012,\n              <https://www.rfc-editor.org/info/rfc6658>.\n\
    \   [RFC7149]  Boucadair, M. and C. Jacquenet, \"Software-Defined\n          \
    \    Networking: A Perspective from within a Service Provider\n              Environment\"\
    , RFC 7149, DOI 10.17487/RFC7149, March 2014,\n              <https://www.rfc-editor.org/info/rfc7149>.\n\
    \   [RFC7384]  Mizrahi, T., \"Security Requirements of Time Protocols in\n   \
    \           Packet Switched Networks\", RFC 7384, DOI 10.17487/RFC7384,\n    \
    \          October 2014, <https://www.rfc-editor.org/info/rfc7384>.\n   [RFC7426]\
    \  Haleplidis, E., Ed., Pentikousis, K., Ed., Denazis, S.,\n              Hadi\
    \ Salim, J., Meyer, D., and O. Koufopavlou, \"Software-\n              Defined\
    \ Networking (SDN): Layers and Architecture\n              Terminology\", RFC\
    \ 7426, DOI 10.17487/RFC7426, January\n              2015, <https://www.rfc-editor.org/info/rfc7426>.\n\
    \   [RFC7554]  Watteyne, T., Ed., Palattella, M., and L. Grieco, \"Using\n   \
    \           IEEE 802.15.4e Time-Slotted Channel Hopping (TSCH) in the\n      \
    \        Internet of Things (IoT): Problem Statement\", RFC 7554,\n          \
    \    DOI 10.17487/RFC7554, May 2015,\n              <https://www.rfc-editor.org/info/rfc7554>.\n\
    \   [RFC7567]  Baker, F., Ed. and G. Fairhurst, Ed., \"IETF\n              Recommendations\
    \ Regarding Active Queue Management\",\n              BCP 197, RFC 7567, DOI 10.17487/RFC7567,\
    \ July 2015,\n              <https://www.rfc-editor.org/info/rfc7567>.\n   [RFC7813]\
    \  Farkas, J., Ed., Bragg, N., Unbehagen, P., Parsons, G.,\n              Ashwood-Smith,\
    \ P., and C. Bowers, \"IS-IS Path Control and\n              Reservation\", RFC\
    \ 7813, DOI 10.17487/RFC7813, June 2016,\n              <https://www.rfc-editor.org/info/rfc7813>.\n\
    \   [RFC8033]  Pan, R., Natarajan, P., Baker, F., and G. White,\n            \
    \  \"Proportional Integral Controller Enhanced (PIE): A\n              Lightweight\
    \ Control Scheme to Address the Bufferbloat\n              Problem\", RFC 8033,\
    \ DOI 10.17487/RFC8033, February 2017,\n              <https://www.rfc-editor.org/info/rfc8033>.\n\
    \   [RFC8227]  Cheng, W., Wang, L., Li, H., van Helvoort, H., and J.\n       \
    \       Dong, \"MPLS-TP Shared-Ring Protection (MSRP) Mechanism for\n        \
    \      Ring Topology\", RFC 8227, DOI 10.17487/RFC8227, August\n             \
    \ 2017, <https://www.rfc-editor.org/info/rfc8227>.\n   [RFC8289]  Nichols, K.,\
    \ Jacobson, V., McGregor, A., Ed., and J.\n              Iyengar, Ed., \"Controlled\
    \ Delay Active Queue Management\",\n              RFC 8289, DOI 10.17487/RFC8289,\
    \ January 2018,\n              <https://www.rfc-editor.org/info/rfc8289>.\n  \
    \ [RFC8402]  Filsfils, C., Ed., Previdi, S., Ed., Ginsberg, L.,\n            \
    \  Decraene, B., Litkowski, S., and R. Shakir, \"Segment\n              Routing\
    \ Architecture\", RFC 8402, DOI 10.17487/RFC8402,\n              July 2018, <https://www.rfc-editor.org/info/rfc8402>.\n\
    \   [RFC8453]  Ceccarelli, D., Ed. and Y. Lee, Ed., \"Framework for\n        \
    \      Abstraction and Control of TE Networks (ACTN)\", RFC 8453,\n          \
    \    DOI 10.17487/RFC8453, August 2018,\n              <https://www.rfc-editor.org/info/rfc8453>.\n\
    \   [RFC8557]  Finn, N. and P. Thubert, \"Deterministic Networking Problem\n \
    \             Statement\", RFC 8557, DOI 10.17487/RFC8557, May 2019,\n       \
    \       <https://www.rfc-editor.org/info/rfc8557>.\n   [RFC8578]  Grossman, E.,\
    \ Ed., \"Deterministic Networking Use Cases\",\n              RFC 8578, DOI 10.17487/RFC8578,\
    \ May 2019,\n              <https://www.rfc-editor.org/info/rfc8578>.\n   [TEAS]\
    \     IETF, \"Traffic Engineering Architecture and Signaling\n              (teas)\"\
    , October 2019,\n              <https://datatracker.ietf.org/doc/charter-ietf-teas/>.\n\
    \   [TSCH-ARCH]\n              Thubert, P., \"An Architecture for IPv6 over the\
    \ TSCH mode\n              of IEEE 802.15.4\", Work in Progress, Internet-Draft,\n\
    \              draft-ietf-6tisch-architecture-26, 27 August 2019,\n          \
    \    <https://tools.ietf.org/html/draft-ietf-6tisch-\n              architecture-26>.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   The authors wish to thank Lou Berger, David Black, Stewart\
    \ Bryant,\n   Rodney Cummings, Ethan Grossman, Craig Gunther, Marcel Kiessling,\n\
    \   Rudy Klecka, Jouni Korhonen, Erik Nordmark, Shitanshu Shah, Wilfried\n   Steiner,\
    \ George Swallow, Michael Johas Teener, Pat Thaler, Thomas\n   Watteyne, Patrick\
    \ Wetterwald, Karl Weber, and Anca Zamfir for their\n   various contributions\
    \ to this work.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Norman Finn\n   Huawei\n   3101 Rio Way\n   Spring Valley,\
    \ California 91977\n   United States of America\n   Phone: +1 925 980 6430\n \
    \  Email: nfinn@nfinnconsulting.com\n   Pascal Thubert\n   Cisco Systems\n   Batiment\
    \ T3\n   Village d'Entreprises Green Side, 400, Avenue de Roumanille\n   06410\
    \ Biot - Sophia Antipolis\n   France\n   Phone: +33 4 97 23 26 34\n   Email: pthubert@cisco.com\n\
    \   Bal\xE1zs Varga\n   Ericsson\n   Budapest\n   Magyar tudosok korutja 11\n\
    \   1117\n   Hungary\n   Email: balazs.a.varga@ericsson.com\n   J\xE1nos Farkas\n\
    \   Ericsson\n   Budapest\n   Magyar tudosok korutja 11\n   1117\n"
