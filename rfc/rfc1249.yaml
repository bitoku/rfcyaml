- title: __initial_text__
  contents:
  - '                      DIXIE Protocol Specification

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This RFC defines a mechanism by which TCP/UDP based clients\
    \ can\n   access OSI Directory Service without the overhead of the ISO\n   transport\
    \ and presentation protocols required to implement full-blown\n   DAP.  This memo\
    \ provides information for the Internet community.  It\n   does not specify any\
    \ standard.  Distribution of this memo is\n   unlimited.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ..............................................\
    \  2\n   1.1 History ..................................................  2\n \
    \  2. Protocol ..................................................  2\n   2.1 Header\
    \ ...................................................  3\n   2.2 Operations ...............................................\
    \  4\n   2.2.1 Read ...................................................  4\n \
    \  2.2.1.1 Read Request .........................................  4\n   2.2.1.2\
    \ Read Reply ...........................................  4\n   2.2.2 Search .................................................\
    \  5\n   2.2.2.1 Search Request .......................................  5\n \
    \  2.2.2.2 Search Reply .........................................  5\n   2.2.3\
    \ List ...................................................  5\n   2.2.3.1 List\
    \ Request .........................................  5\n   2.2.3.2 List Reply\
    \ ...........................................  5\n   2.2.4 Modify .................................................\
    \  5\n   2.2.4.1 Modify Request .......................................  6\n \
    \  2.2.4.2 Modify Reply .........................................  6\n   2.2.5\
    \ Modify RDN .............................................  6\n   2.2.5.1 Modify\
    \ RDN Request ...................................  6\n   2.2.5.2 Modify RDN Reply\
    \ .....................................  6\n   2.2.6 Add ....................................................\
    \  6\n   2.2.6.1 Add Request ..........................................  7\n \
    \  2.2.6.2 Add Reply ............................................  7\n   2.2.7\
    \ Remove .................................................  7\n   2.2.7.1 Remove\
    \ Request .......................................  7\n   2.2.7.2 Remove Reply\
    \ .........................................  7\n   2.2.8 Bind ...................................................\
    \  7\n   2.2.8.1 Bind Request .........................................  7\n \
    \  2.2.8.2 Bind Reply ...........................................  8\n   2.3 Operation\
    \ Code Summary ...................................  8\n   2.4 Return Code Summary\
    \ ......................................  8\n   3. References ................................................\
    \  9\n   4. Available Implementations .................................  9\n \
    \  5. Security Considerations....................................  9\n   6. Authors'\
    \ Addresses ........................................ 10\n"
- title: 1.    Introduction
  contents:
  - "1.    Introduction\n   OSI Directory Service defines a powerful mechanism for\
    \ storing and\n   retrieving information about objects, and for arranging those\
    \ objects\n   in a hierarchical structure.  Many types of objects and information\n\
    \   can be stored in The Directory, including white pages information,\n   application\
    \ information, service information, etc.  The OSI protocol\n   defined to allow\
    \ access to this information is the Directory Access\n   Protocol (DAP).  The\
    \ DAP, being an OSI application-layer program, is\n   fairly heavy-weight and\
    \ requires a substantial amount of computing\n   power and coding investment to\
    \ implement.\n   The DIXIE protocol is designed for use by smaller hosts (e.g.,\n\
    \   Macintoshes and PCs) that do not have the computing power or\n   necessary\
    \ software to implement a full OSI protocol stack.  The DIXIE\n   protocol is\
    \ also useful for any Internet application that wants a\n   simple interface to\
    \ X.500 that requires very little coding\n   investment.\n   The basic idea behind\
    \ DIXIE is the same as that described in RFC 1202\n   for the Directory Assistance\
    \ Protocol.  DIXIE offers both UDP and TCP\n   access to The Directory.  While\
    \ the Directory Assistance Protocol\n   exports something of a user interface,\
    \ DIXIE provides a more direct\n   protocol translation.\n"
- title: 1.1   History
  contents:
  - "1.1   History\n   The DIXIE protocol has evolved over time, slowly growing into\
    \ the\n   protocol described by this document.  Without an understanding of the\n\
    \   circumstances surrounding this evolution, the wisdom of some of the\n   DIXIE\
    \ design decisions may not be apparent.\n"
- title: 2.    Protocol
  contents:
  - "2.    Protocol\n   This section describes the DIXIE protocol in detail.  DIXIE\
    \ follows a\n   client-server request and response paradigm.  Clients send request\n\
    \   packets to a DIXIE server, and the server sends reply packets in\n   return.\
    \  Communication may be over UDP or TCP, depending upon the\n   needs of the client.\
    \  All modification operations (ADD, REMOVE,\n   MODIFY, MODIFYRDN) must be performed\
    \ over a TCP connection, which\n   provides some level of authentication.\n  \
    \ Whichever method of communication is used, the general packet format\n   is\
    \ the same.  Each packet consists of a sixteen octet header followed\n   by some\
    \ data.  The format of the header and data for each kind of\n   request is described\
    \ below.\n   The representation used for all X.500 data passed between the server\n\
    \   and the client is the QUIPU EDB format.  So, for example, a\n   Distinguished\
    \ Name might look something like \"c=US@o=University of\n   Michigan\".  For a\
    \ complete description of this format, see volume 5\n   of the ISODE Manual.\n\
    \   The DIXIE server listens on port 96 for both UDP packets and TCP\n   connections.\n"
- title: 2.1   Header
  contents:
  - "2.1   Header\n   The DIXIE packet header is sixteen octets long.  For requests,\
    \ the\n   header is described by the following:\n      Start Length    Description\n\
    \      0       1       An opcode specifying one of the operations\n          \
    \            described below.  (see section 2.3 for a summary)\n      1      \
    \ 2       A request identifier to be included in the reply.\n                \
    \      This number should be unique to a request.\n      3       4       The total\
    \ length of the request packet, excluding\n                      the header.\n\
    \      7       2       Unused.\n      9       1       Options.  Currently, there\
    \ are only three options.\n                      If bit 0 is set, \"large\" attributes\
    \ will be\n                      included in the response.  The choice of what\n\
    \                      constitutes large is up to the implementation.\n      \
    \                If bit 1 is set, the dereference aliases service\n          \
    \            control will be set for the X.500 operation.  If\n              \
    \        bit 2 is set, aliases will NOT be dereferenced and\n                \
    \      searched during a search operation.\n      10      1       Protocol version.\
    \ The current version is 1.\n      11      1       For the search operation, this\
    \ byte specifies the\n                      scope of the search.  (see section\
    \ 2.2.2.1)\n      12      2       Timelimit in seconds for the operation.\n  \
    \    14      2       Sizelimit for the operation (search and list).\n   For replies,\
    \ the header is described by the following:\n      Start Length    Description\n\
    \      0       1       A return code specifying either success or\n          \
    \            describing any error that occurred.  (see\n                     \
    \ section 2.4 for a description of each code)\n      1       2       The identifier\
    \ included in the corresponding\n                      request packet.\n     \
    \ 3       4       The total length of the response packet, excluding\n       \
    \               the header.\n      7       3       Unused.\n      10      1  \
    \     Protocol version.  The current version is 1.\n      11      5       Unused.\n\
    \   All unused fields should be set to null octets and are reserved for\n   future\
    \ expansion.\n"
- title: 2.2   Operations
  contents:
  - "2.2   Operations\n   This section describes the DIXIE operations, which closely\
    \ parallel\n   the X.500 DAP operations.\n"
- title: 2.2.1 Read
  contents:
  - "2.2.1 Read\n   The DIXIE read operation corresponds to an X.500 DAP READ operation.\n"
- title: 2.2.1.1 Read Request
  contents:
  - "2.2.1.1 Read Request\n   The header opcode should be set to 0x01.  The data portion\
    \ of the\n   packet consists of the DN of the entry to read, a null octet, and\n\
    \   then a null-octet separated list of attributes whose values are to be\n  \
    \ returned from the read.  If no attributes to return are listed, all\n   attributes\
    \ are returned.  The packet is terminated by two null octets\n   in a row.\n"
- title: 2.2.1.2 Read Reply
  contents:
  - "2.2.1.2 Read Reply\n   The reply data for the read operation consists of the\
    \ entry read,\n   followed by a null octet.  An entry consists of the DN of the\
    \ entry,\n   followed by the octet 0x02, followed by a 0x02-octet separated list\n\
    \   of attribute values.  An attribute value consists of an attribute\n   type,\
    \ followed by the octet 0x01, followed by a 0x01-octet separated\n   list of values.\
    \  Each attribute type, attribute value and\n   distinguished name has the form\
    \ defined by the QUIPU EDB format.\n"
- title: 2.2.2 Search
  contents:
  - "2.2.2 Search\n   The DIXIE search operation corresponds to an X.500 DAP SEARCH\n\
    \   operation.\n"
- title: 2.2.2.1 Search Request
  contents:
  - "2.2.2.1 Search Request\n   The header opcode should be set to 0x0f.  Octet 11\
    \ in the header\n   should be set to 0x01, 0x02, or 0x03, for a search scope of\
    \ base\n   object, one level, or whole subtree, respectively.  The data portion\n\
    \   of the packet consists of the DN of the entry from which to start the\n  \
    \ search, a null octet, a string containing the search filter (dish-\n   style),\
    \ a null-octet, and then a null-octet separated list of\n   attributes whose values\
    \ are to be returned from the search.  If no\n   attributes to return are listed,\
    \ all attributes are returned.  The\n   packet is terminated by two null octets\
    \ in a row.\n"
- title: 2.2.2.2 Search Reply
  contents:
  - "2.2.2.2 Search Reply\n   The reply data to the search operation consists of two\
    \ octets in\n   network byte order specifying the number of matches returned.\
    \  Next\n   comes this number of sequences of the form: one 0x03 octet followed\n\
    \   by one entry.  Each entry is as described above in section 2.2.1.2.\n"
- title: 2.2.3 List
  contents:
  - "2.2.3 List\n   The DIXIE list operation corresponds to an X.500 DAP LIST operation.\n"
- title: 2.2.3.1 List Request
  contents:
  - "2.2.3.1 List Request\n   The header opcode should be set to 0x10.  The data portion\
    \ of the\n   packet consists of the DN of the entry on which to perform the list,\n\
    \   followed by a null octet.\n"
- title: 2.2.3.2 List Reply
  contents:
  - "2.2.3.2 List Reply\n   The reply data to the list operation consists of two octets\
    \ in\n   network byte order specifying the number of subordinates returned,\n\
    \   followed by this number of sequences of the form: one 0x03 octet\n   followed\
    \ by a Relative Distinguished Name of a subordinate.\n"
- title: 2.2.4 Modify
  contents:
  - "2.2.4 Modify\n   The DIXIE modify operation corresponds to an X.500 DAP MODIFY\n\
    \   operation.\n"
- title: 2.2.4.1 Modify Request
  contents:
  - "2.2.4.1 Modify Request\n   The header opcode should be set to 0x02.  The data\
    \ portion of the\n   packet consists of the DN of the entry to modify, followed\
    \ by a null\n   octet, followed by a null-separated list of modify operations\
    \ to\n   perform.  Each modify operation is one of the following:\n          \
    \ type            remove attribute type\n           type=value      make value\
    \ the sole value for attribute type\n           type+=value     add value to attribute\
    \ type\n           type-=value     remove value from attribute type\n   The second\
    \ form will see to it that existing values (if any) are\n   deleted before the\
    \ new ones are added.  The third form will add the\n   attribute type if it does\
    \ not already exist.  Note that the QUIPU EDB\n   format, used to specify value,\
    \ allows multiple values to be specified\n   separated by the \"&\" character.\
    \  This operation is only allowed over\n   TCP.\n"
- title: 2.2.4.2 Modify Reply
  contents:
  - "2.2.4.2 Modify Reply\n   There is no reply data for the modify operation.  The\
    \ only indication\n   of success or failure is the return code in the header.\n"
- title: 2.2.5 Modify RDN
  contents:
  - "2.2.5 Modify RDN\n   The DIXIE modify RDN operation corresponds to an X.500 DAP\
    \  MODIFYRDN\n   operation.\n"
- title: 2.2.5.1 Modify RDN Request
  contents:
  - "2.2.5.1 Modify RDN Request\n   The header opcode should be set to 0x13.  The\
    \ data portion of the\n   packet consists of the DN of the entry to modify, followed\
    \ by a null\n   octet, followed by the new RDN the entry should have, followed\
    \ by a\n   final null octet.  The old value of the RDN is never kept as an\n \
    \  attribute of the entry.  This operation is only allowed over TCP.\n"
- title: 2.2.5.2 Modify RDN Reply
  contents:
  - "2.2.5.2 Modify RDN Reply\n   There is no reply data to the modify RDN operation.\
    \  The only\n   indication of success or failure is the return code in the header.\n"
- title: 2.2.6 Add
  contents:
  - "2.2.6 Add\n   The DIXIE add operation corresponds to an X.500 DAP ADD operation.\n"
- title: 2.2.6.1 Add Request
  contents:
  - "2.2.6.1 Add Request\n   The header opcode should be set to 0x11.  The data portion\
    \ of the\n   packet consists of the DN of the entry to add, followed by a null\n\
    \   octet, followed by a null-separated list of the entry's attributes.\n   Each\
    \ attribute in this list has the form:\n           type=value\n   where value\
    \ can consist of a single value, or multiple values\n   separated by the \"&\"\
    \ character.  The request is terminated by two\n   null octets in a row.  This\
    \ operation is only allowed over TCP.\n"
- title: 2.2.6.2 Add Reply
  contents:
  - "2.2.6.2 Add Reply\n   There is no reply data to the add operation.  The only\
    \ indication of\n   success or failure is the return code in the header.\n"
- title: 2.2.7 Remove
  contents:
  - "2.2.7 Remove\n   The DIXIE remove operation corresponds to an X.500 DAP REMOVE\n\
    \   operation.\n"
- title: 2.2.7.1 Remove Request
  contents:
  - "2.2.7.1 Remove Request\n   The header opcode should be set to 0x12.  The data\
    \ portion of the\n   packet consists of the DN of the entry to remove, followed\
    \ by a null\n   octet.  This operation is only allowed over TCP.\n"
- title: 2.2.7.2 Remove Reply
  contents:
  - "2.2.7.2 Remove Reply\n   There is no reply data for the remove operation.  The\
    \ only indication\n   of success or failure is the return code in the header.\n"
- title: 2.2.8 Bind
  contents:
  - "2.2.8 Bind\n   The DIXIE bind operation corresponds to an X.500 DAP BIND operation\n\
    \   using simple authentication as defined in Recommendation X.509.\n"
- title: 2.2.8.1 Bind Request
  contents:
  - "2.2.8.1 Bind Request\n   The header opcode should be set to 0x04.  The data portion\
    \ of the\n   packet consists of the DN of the entry as which to bind, followed\
    \ by\n   a null octet, followed by the password of the entry as which to bind,\n\
    \   followed by a final null octet.  A null DN corresponds causes a bind\n   as\
    \ NULLDN to occur.\n"
- title: 2.2.8.2 Bind Reply
  contents:
  - "2.2.8.2 Bind Reply\n   The format of the bind reply packet depends on whether\
    \ the operation\n   was invoked over TCP or UDP.  If the operation was invoked\
    \ over TCP,\n   there is no reply data.  Success or failure of the operation is\n\
    \   indicated by the return code in the packet header.\n   If the bind operation\
    \ was invoked over UDP, the data portion of the\n   reply packet consists of an\
    \ Internet address in standard dot\n   notation, followed by a 0x01 octet, followed\
    \ by a decimal number (in\n   text form), followed by a null octet.  The address\
    \ and number should\n   be taken to be the IP address and port number to which\
    \ the client\n   should connect to obtain an authenticated TCP connection, bound\
    \ as\n   the entity specified in the request packet.\n"
- title: 2.3 Operation Code Summary
  contents:
  - "2.3 Operation Code Summary\n   This section describes the  possible  values \
    \ for  the  DIXIE  header\n   operation code.  There are currently 8 possible\
    \ values:\n      0x01    Read\n      0x02    Modify\n      0x04    Bind\n    \
    \  0x0f    Search\n      0x10    List\n      0x11    Add\n      0x12    Remove\n\
    \      0x13    Modify RDN\n"
- title: 2.4 Return Code Summary
  contents:
  - "2.4 Return Code Summary\n   This section describes the possible values for the\
    \ the DIXIE header\n   return code.  There are currently 17 possible values:\n\
    \      0x01    The request was successful.\n      0x02    The search did not find\
    \ any matches.\n      0x03    Some unknown, generic DIXIE error has occurred.\n\
    \      0x04    The DIXIE opcode was not recognized by the DIXIE server.\n    \
    \  0x05    Insufficient access to perform a modification.\n      0x06    A malformed\
    \ DN was supplied.\n      0x07    Some time limit or size limit was reached.\n\
    \              Partial results will be returned.\n      0x08    A modify was attempted\
    \ before a bind.\n      0x09    A fragment requested was not found.\n      0x0a\
    \    An attribute type specified is invalid.\n      0x0b    An attribute specified\
    \ does not exist in the entry.\n      0x0c    An attribute value specification\
    \ is invalid.\n      0x0d    An attribute value does not exist (as for removal\
    \ of the\n              value).\n      0x0e    A modification of an entry's RDN\
    \ was attempted via a modify\n              operation.  This is not allowed (use\
    \ modrdn instead).\n      0x0f    A supplied DN references an invalid portion\
    \ of the tree.\n      0x10    The DSA has passed back a referral to another DSA\
    \ (as for a\n              modification to a non-local entry), and the DIXIE server\
    \ was\n              unable to follow it.\n      0x11    The DSA is down or unreachable.\n"
- title: 3.    References
  contents:
  - "3.    References\n   [1] Information Processing - Open Systems Interconnection\
    \ - The\n       Directory, International Organization for Standardization,\n \
    \      International Standard 9594, 1988.\n   [2] Kille, S., Robbins, C., Roe,\
    \ M., and A. Turland, \"The ISO\n       Development Environment: User's Manual\"\
    , Volume 5: QUIPU,\n       Performance Systems International, January 1990.\n\
    \   [3] Rose, M., \"Directory Assistance Service\", RFC 1202, Performance\n  \
    \     Systems International, February 1991.\n"
- title: 4.    Available Implementations
  contents:
  - "4.    Available Implementations\n       This section is not meant as an endorsement\
    \ of any\n       implementation, it is provided merely as information for the\n\
    \       Internet community.  A full Un*x-based implementation of the\n       DIXIE\
    \ protocol in the form of a DIXIE server and DIXIE\n       application library\
    \ is freely available for anonymous FTP from\n       the host terminator.cc.umich.edu\
    \ in the ~ftp/x500 directory.\n       Un*x and Macintosh clients that use the\
    \ DIXIE protocol have also\n       been implemented and are available from the\
    \ same location.\n       There is also a discussion list for DIXIE-related topics\
    \ called\n       dixie@terminator.cc.umich.edu.  To join, send mail to dixie-\n\
    \       request@terminator.cc.umich.edu.\n"
- title: 5.    Security Considerations
  contents:
  - "5.    Security Considerations\n   Security issues are not discussed in this memo.\n"
- title: 6.    Authors' Addresses
  contents:
  - "6.    Authors' Addresses\n   Tim Howes\n   University of Michigan\n   Information\
    \ Technology Division\n   535 West William St.\n   Ann Arbor, MI 48103-4943\n\
    \   Phone: +1 313 764-2278\n   EMail: tim@umich.edu\n   Mark Smith\n   University\
    \ of Michigan\n   Information Technology Division\n   535 West William St.\n \
    \  Ann Arbor, MI 48103-4943\n   Phone: +1 313 764-2277\n   EMail: mcs@umich.edu\n\
    \   Bryan Beecher\n   University of Michigan\n   Information Technology Division\n\
    \   535 West William St.\n   Ann Arbor, MI 48103-4943\n   Phone: +1 313 764-4050\n\
    \   EMail: bryan@umich.edu\n"
