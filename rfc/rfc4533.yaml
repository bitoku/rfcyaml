- title: __initial_text__
  contents:
  - "           The Lightweight Directory Access Protocol (LDAP)\n               \
    \    Content Synchronization Operation\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo defines an Experimental Protocol for the Internet\n\
    \   community.  It does not specify an Internet standard of any kind.\n   Discussion\
    \ and suggestions for improvement are requested.\n   Distribution of this memo\
    \ is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2006).\n"
- title: IESG Note
  contents:
  - "IESG Note\n   The IESG notes that this work was originally discussed in the LDUP\n\
    \   working group.  The group came to consensus on a different approach,\n   documented\
    \ in RFC 3928; that document is on the standards track and\n   should be reviewed\
    \ by those considering implementation of this\n   proposal.\n"
- title: Abstract
  contents:
  - "Abstract\n   This specification describes the Lightweight Directory Access\n\
    \   Protocol (LDAP) Content Synchronization Operation.  The operation\n   allows\
    \ a client to maintain a copy of a fragment of the Directory\n   Information Tree\
    \ (DIT).  It supports both polling for changes and\n   listening for changes.\
    \  The operation is defined as an extension of\n   the LDAP Search Operation.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \      1.1. Background .................................................3\n  \
    \    1.2. Intended Usage .............................................4\n    \
    \  1.3. Overview ...................................................5\n      1.4.\
    \ Conventions ................................................8\n   2. Elements\
    \ of the Sync Operation ..................................8\n      2.1. Common\
    \ ASN.1 Elements ......................................9\n      2.2. Sync Request\
    \ Control .......................................9\n      2.3. Sync State Control\
    \ ........................................10\n      2.4. Sync Done Control .........................................10\n\
    \      2.5. Sync Info Message .........................................11\n  \
    \    2.6. Sync Result Codes .........................................11\n   3.\
    \ Content Synchronization ........................................11\n      3.1.\
    \ Synchronization Session ...................................12\n      3.2. Content\
    \ Determination .....................................12\n      3.3. refreshOnly\
    \ Mode ..........................................13\n      3.4. refreshAndPersist\
    \ Mode ....................................16\n      3.5. Search Request Parameters\
    \ .................................17\n      3.6. objectName ................................................18\n\
    \      3.7. Canceling the Sync Operation ..............................19\n  \
    \    3.8. Refresh Required ..........................................19\n    \
    \  3.9. Chattiness Considerations .................................20\n      3.10.\
    \ Operation Multiplexing ...................................21\n   4. Meta Information\
    \ Considerations ................................22\n      4.1. Entry DN ..................................................22\n\
    \      4.2. Operational Attributes ....................................22\n  \
    \    4.3. Collective Attributes .....................................23\n    \
    \  4.4. Access and Other Administrative Controls ..................23\n   5. Interaction\
    \ with Other Controls ................................23\n      5.1. ManageDsaIT\
    \ Control .......................................24\n      5.2. Subentries Control\
    \ ........................................24\n   6. Shadowing Considerations .......................................24\n\
    \   7. Security Considerations ........................................25\n  \
    \ 8. IANA Considerations ............................................26\n    \
    \  8.1. Object Identifier .........................................26\n      8.2.\
    \ LDAP Protocol Mechanism ...................................26\n      8.3. LDAP\
    \ Result Codes .........................................26\n   9. Acknowledgements\
    \ ...............................................26\n   10. Normative References\
    \ ..........................................27\n   11. Informative References\
    \ ........................................28\n   Appendix A.  CSN-based Implementation\
    \ Considerations ..............29\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The Lightweight Directory Access Protocol (LDAP) [RFC4510]\
    \ provides a\n   mechanism, the search operation [RFC4511], that allows a client\
    \ to\n   request directory content matching a complex set of assertions and to\n\
    \   request that the server return this content, subject to access\n   control\
    \ and other restrictions, to the client.  However, LDAP does\n   not provide (despite\
    \ the introduction of numerous extensions in this\n   area) an effective and efficient\
    \ mechanism for maintaining\n   synchronized copies of directory content.  This\
    \ document introduces a\n   new mechanism specifically designed to meet the content\n\
    \   synchronization requirements of sophisticated directory applications.\n  \
    \ This document defines the LDAP Content Synchronization Operation, or\n   Sync\
    \ Operation for short, which allows a client to maintain a\n   synchronized copy\
    \ of a fragment of a Directory Information Tree\n   (DIT).  The Sync Operation\
    \ is defined as a set of controls and other\n   protocol elements that extend\
    \ the Search Operation.\n"
- title: 1.1.  Background
  contents:
  - "1.1.  Background\n   Over the years, a number of content synchronization approaches\
    \ have\n   been suggested for use in LDAP directory services.  These approaches\n\
    \   are inadequate for one or more of the following reasons:\n      -  failure\
    \ to ensure a reasonable level of convergence;\n      -  failure to detect that\
    \ convergence cannot be achieved (without\n         reload);\n      -  require\
    \ pre-arranged synchronization agreements;\n      -  require the server to maintain\
    \ histories of past changes to DIT\n         content and/or meta information;\n\
    \      -  require the server to maintain synchronization state on a per-\n   \
    \      client basis; and/or\n      -  are overly chatty.\n   The Sync Operation\
    \ provides eventual convergence of synchronized\n   content when possible and,\
    \ when not, notification that a full reload\n   is required.\n   The Sync Operation\
    \ does not require pre-arranged synchronization\n   agreements.\n   The Sync Operation\
    \ does not require that servers maintain or use any\n   history of past changes\
    \ to the DIT or to meta information.  However,\n   servers may maintain and use\
    \ histories (e.g., change logs,\n   tombstones, DIT snapshots) to reduce the number\
    \ of messages generated\n   and to reduce their size.  As it is not always feasible\
    \ to maintain\n   and use histories, the operation may be implemented using purely\n\
    \   (current) state-based approaches.  The Sync Operation allows use of\n   either\
    \ the state-based approach or the history-based approach on an\n   operation-by-operation\
    \ basis to balance the size of history and the\n   amount of traffic.  The Sync\
    \ Operation also allows the combined use\n   of the state-based and the history-based\
    \ approaches.\n   The Sync Operation does not require that servers maintain\n\
    \   synchronization state on a per-client basis.  However, servers may\n   maintain\
    \ and use per-client state information to reduce the number of\n   messages generated\
    \ and the size of such messages.\n   A synchronization mechanism can be considered\
    \ overly chatty when\n   synchronization traffic is not reasonably bounded.  The\
    \ Sync\n   Operation traffic is bounded by the size of updated (or new) entries\n\
    \   and the number of unchanged entries in the content.  The operation is\n  \
    \ designed to avoid full content exchanges, even when the history\n   information\
    \ available to the server is insufficient to determine the\n   client's state.\
    \  The operation is also designed to avoid transmission\n   of out-of-content\
    \ history information, as its size is not bounded by\n   the content and it is\
    \ not always feasible to transmit such history\n   information due to security\
    \ reasons.\n   This document includes a number of non-normative appendices providing\n\
    \   additional information to server implementors.\n"
- title: 1.2.  Intended Usage
  contents:
  - "1.2.  Intended Usage\n   The Sync Operation is intended to be used in applications\
    \ requiring\n   eventually-convergent content synchronization.  Upon completion\
    \ of\n   each synchronization stage of the operation, all information to\n   construct\
    \ a synchronized client copy of the content has been provided\n   to the client\
    \ or the client has been notified that a complete content\n   reload is necessary.\
    \  Except for transient inconsistencies due to\n   concurrent operation (or other)\
    \ processing at the server, the client\n   copy is an accurate reflection of the\
    \ content held by the server.\n   Transient inconsistencies will be resolved by\
    \ subsequent\n   synchronization operations.\n   Possible uses include the following:\n\
    \      -  White page service applications may use the Sync Operation to\n    \
    \     maintain a current copy of a DIT fragment, for example, a mail\n       \
    \  user agent that uses the sync operation to maintain a local\n         copy\
    \ of an enterprise address book.\n      -  Meta-information engines may use the\
    \ Sync Operation to maintain\n         a copy of a DIT fragment.\n      -  Caching\
    \ proxy services may use the Sync Operation to maintain a\n         coherent content\
    \ cache.\n      -  Lightweight master-slave replication between heterogeneous\n\
    \         directory servers.  For example, the Sync Operation can be used\n  \
    \       by a slave server to maintain a shadow copy of a DIT fragment.\n     \
    \    (Note: The International Telephone Union (ITU) has defined the\n        \
    \ X.500 Directory [X.500] Information Shadowing Protocol (DISP)\n         [X.525],\
    \ which may be used for master-slave replication between\n         directory servers.\
    \  Other experimental LDAP replication\n         protocols also exist.)\n   This\
    \ protocol is not intended to be used in applications requiring\n   transactional\
    \ data consistency.\n   As this protocol transfers all visible values of entries\
    \ belonging to\n   the content upon change instead of change deltas, this protocol\
    \ is\n   not appropriate for bandwidth-challenged applications or deployments.\n"
- title: 1.3.  Overview
  contents:
  - "1.3.  Overview\n   This section provides an overview of basic ways the Sync Operation\n\
    \   can be used to maintain a synchronized client copy of a DIT fragment.\n  \
    \    -  Polling for changes: refreshOnly mode\n      -  Listening for changes:\
    \ refreshAndPersist mode\n"
- title: 1.3.1.  Polling for Changes (refreshOnly)
  contents:
  - "1.3.1.  Polling for Changes (refreshOnly)\n   To obtain its initial client copy,\
    \ the client issues a Sync request:\n   a search request with the Sync Request\
    \ Control with mode set to\n   refreshOnly.  The server, much like it would with\
    \ a normal search\n   operation, returns (subject to access controls and other\n\
    \   restrictions) the content matching the search criteria (baseObject,\n   scope,\
    \ filter, attributes).  Additionally, with each entry returned,\n   the server\
    \ provides a Sync State Control indicating state add.  This\n   control contains\
    \ the Universally Unique Identifier (UUID) [UUID] of\n   the entry [RFC4530].\
    \  Unlike the Distinguished Name (DN), which may\n   change over time, an entry's\
    \ UUID is stable.  The initial content is\n   followed by a SearchResultDone with\
    \ a Sync Done Control.  The Sync\n   Done Control provides a syncCookie.  The\
    \ syncCookie represents\n   session state.\n   To poll for updates to the client\
    \ copy, the client reissues the Sync\n   Operation with the syncCookie previously\
    \ returned.  The server, much\n   as it would with a normal search operation,\
    \ determines which content\n   would be returned as if the operation were a normal\
    \ search operation.\n   However, using the syncCookie as an indicator of what\
    \ content the\n   client was sent previously, the server sends copies of entries\
    \ that\n   have changed with a Sync State Control indicating state add.  For\n\
    \   each changed entry, all (modified or unmodified) attributes belonging\n  \
    \ to the content are sent.\n   The server may perform either or both of the two\
    \ distinct\n   synchronization phases that are distinguished by how to synchronize\n\
    \   entries deleted from the content: the present and the delete phases.\n   When\
    \ the server uses a single phase for the refresh stage, each phase\n   is marked\
    \ as ended by a SearchResultDone with a Sync Done Control.  A\n   present phase\
    \ is identified by a FALSE refreshDeletes value in the\n   Sync Done Control.\
    \  A delete phase is identified by a TRUE\n   refreshDeletes value.  The present\
    \ phase may be followed by a delete\n   phase.  The two phases are delimited by\
    \ a refreshPresent Sync Info\n   Message having a FALSE refreshDone value.  In\
    \ the case that both the\n   phases are used, the present phase is used to bring\
    \ the client copy\n   up to the state at which the subsequent delete phase can\
    \ begin.\n   In the present phase, the server sends an empty entry (i.e., no\n\
    \   attributes) with a Sync State Control indicating state present for\n   each\
    \ unchanged entry.\n   The delete phase may be used when the server can reliably\
    \ determine\n   which entries in the prior client copy are no longer present in\
    \ the\n   content and the number of such entries is less than or equal to the\n\
    \   number of unchanged entries.  In the delete mode, the server sends an\n  \
    \ empty entry with a Sync State Control indicating state delete for\n   each entry\
    \ that is no longer in the content, instead of returning an\n   empty entry with\
    \ state present for each present entry.\n   The server may send syncIdSet Sync\
    \ Info Messages containing the set\n   of UUIDs of either unchanged present entries\
    \ or deleted entries,\n   instead of sending multiple individual messages.  If\
    \ refreshDeletes\n   of syncIdSet is set to FALSE, the UUIDs of unchanged present\
    \ entries\n   are contained in the syncUUIDs set; if refreshDeletes of syncIdSet\
    \ is\n   set to TRUE, the UUIDs of the entries no longer present in the\n   content\
    \ are contained in the syncUUIDs set.  An optional cookie can\n   be included\
    \ in the syncIdSet to represent the state of the content\n   after synchronizing\
    \ the presence or the absence of the entries\n   contained in the syncUUIDs set.\n\
    \   The synchronized copy of the DIT fragment is constructed by the\n   client.\n\
    \   If refreshDeletes of syncDoneValue is FALSE, the new copy includes\n   all\
    \ changed entries returned by the reissued Sync Operation, as well\n   as all\
    \ unchanged entries identified as being present by the reissued\n   Sync Operation,\
    \ but whose content is provided by the previous Sync\n   Operation.  The unchanged\
    \ entries not identified as being present are\n   deleted from the client content.\
    \  They had been either deleted,\n   moved, or otherwise scoped-out from the content.\n\
    \   If refreshDeletes of syncDoneValue is TRUE, the new copy includes all\n  \
    \ changed entries returned by the reissued Sync Operation, as well as\n   all\
    \ other entries of the previous copy except for those that are\n   identified\
    \ as having been deleted from the content.\n   The client can, at some later time,\
    \ re-poll for changes to this\n   synchronized client copy.\n"
- title: 1.3.2.  Listening for Changes (refreshAndPersist)
  contents:
  - "1.3.2.  Listening for Changes (refreshAndPersist)\n   Polling for changes can\
    \ be expensive in terms of server, client, and\n   network resources.  The refreshAndPersist\
    \ mode allows for active\n   updates of changed entries in the content.\n   By\
    \ selecting the refreshAndPersist mode, the client requests that the\n   server\
    \ send updates of entries that are changed after the initial\n   refresh content\
    \ is determined.  Instead of sending a SearchResultDone\n   Message as in polling,\
    \ the server sends a Sync Info Message to the\n   client indicating that the refresh\
    \ stage is complete and then enters\n   the persist stage.  After receipt of this\
    \ Sync Info Message, the\n   client will construct a synchronized copy as described\
    \ in Section\n   1.3.1.\n   The server may then send change notifications as the\
    \ result of the\n   original Sync search request, which now remains persistent\
    \ in the\n   server.  For entries to be added to the returned content, the server\n\
    \   sends a SearchResultEntry (with attributes) with a Sync State Control\n  \
    \ indicating state add.  For entries to be deleted from the content,\n   the server\
    \ sends a SearchResultEntry containing no attributes and a\n   Sync State Control\
    \ indicating state delete.  For entries to be\n   modified in the return content,\
    \ the server sends a SearchResultEntry\n   (with attributes) with a Sync State\
    \ Control indicating state modify.\n   Upon modification of an entry, all (modified\
    \ or unmodified)\n   attributes belonging to the content are sent.\n   Note that\
    \ renaming an entry of the DIT may cause an add state change\n   where the entry\
    \ is renamed into the content, a delete state change\n   where the entry is renamed\
    \ out of the content, and a modify state\n   change where the entry remains in\
    \ the content.  Also note that a\n   modification of an entry of the DIT may cause\
    \ an add, delete, or\n   modify state change to the content.\n   Upon receipt\
    \ of a change notification, the client updates its copy of\n   the content.\n\
    \   If the server desires to update the syncCookie during the persist\n   stage,\
    \ it may include the syncCookie in any Sync State Control or\n   Sync Info Message\
    \ returned.\n   The operation persists until canceled [RFC3909] by the client\
    \ or\n   terminated by the server.  A Sync Done Control shall be attached to\n\
    \   SearchResultDone Message to provide a new syncCookie.\n"
- title: 1.4.  Conventions
  contents:
  - "1.4.  Conventions\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"\
    SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\"\
    , and \"OPTIONAL\" in this\n   document are to be interpreted as described in\
    \ BCP 14 [RFC2119].\n   Protocol elements are described using ASN.1 [X.680] with\
    \ implicit\n   tags.  The term \"BER-encoded\" means the element is to be encoded\n\
    \   using the Basic Encoding Rules [X.690] under the restrictions\n   detailed\
    \ in Section 5.1 of [RFC4511].\n"
- title: 2.  Elements of the Sync Operation
  contents:
  - "2.  Elements of the Sync Operation\n   The Sync Operation is defined as an extension\
    \ to the LDAP Search\n   Operation [RFC4511] where the directory user agent (DUA\
    \ or client)\n   submits a SearchRequest Message with a Sync Request Control and\
    \ the\n   directory system agent (DSA or server) responds with zero or more\n\
    \   SearchResultEntry Messages, each with a Sync State Control; zero or\n   more\
    \ SearchResultReference Messages, each with a Sync State Control;\n   zero or\
    \ more Sync Info Intermediate Response Messages; and a\n   SearchResultDone Message\
    \ with a Sync Done Control.\n   To allow clients to discover support for this\
    \ operation, servers\n   implementing this operation SHOULD publish 1.3.6.1.4.1.4203.1.9.1.1\n\
    \   as a value of the 'supportedControl' attribute [RFC4512] of the root\n   DSA-specific\
    \ entry (DSE).  A server MAY choose to advertise this\n   extension only when\
    \ the client is authorized to use it.\n"
- title: 2.1.  Common ASN.1 Elements
  contents:
  - '2.1.  Common ASN.1 Elements

    '
- title: 2.1.1.  syncUUID
  contents:
  - "2.1.1.  syncUUID\n   The syncUUID data type is an OCTET STRING holding a 128-bit\n\
    \   (16-octet) Universally Unique Identifier (UUID) [UUID].\n      syncUUID ::=\
    \ OCTET STRING (SIZE(16))\n           -- constrained to UUID\n"
- title: 2.1.2.  syncCookie
  contents:
  - "2.1.2.  syncCookie\n   The syncCookie is a notational convenience to indicate\
    \ that, while\n   the syncCookie type is encoded as an OCTET STRING, its value\
    \ is an\n   opaque value containing information about the synchronization session\n\
    \   and its state.  Generally, the session information would include a\n   hash\
    \ of the operation parameters that the server requires not be\n   changed and\
    \ the synchronization state information would include a\n   commit (log) sequence\
    \ number, a change sequence number, or a time\n   stamp.  For convenience of description,\
    \ the term \"no cookie\" refers\n   either to a null cookie or to a cookie with\
    \ pre-initialized\n   synchronization state.\n      syncCookie ::= OCTET STRING\n"
- title: 2.2.  Sync Request Control
  contents:
  - "2.2.  Sync Request Control\n   The Sync Request Control is an LDAP Control [RFC4511]\
    \ where the\n   controlType is the object identifier 1.3.6.1.4.1.4203.1.9.1.1\
    \ and the\n   controlValue, an OCTET STRING, contains a BER-encoded\n   syncRequestValue.\
    \  The criticality field is either TRUE or FALSE.\n      syncRequestValue ::=\
    \ SEQUENCE {\n          mode ENUMERATED {\n              -- 0 unused\n       \
    \       refreshOnly       (1),\n              -- 2 reserved\n              refreshAndPersist\
    \ (3)\n          },\n          cookie     syncCookie OPTIONAL,\n          reloadHint\
    \ BOOLEAN DEFAULT FALSE\n      }\n   The Sync Request Control is only applicable\
    \ to the SearchRequest\n   Message.\n"
- title: 2.3.  Sync State Control
  contents:
  - "2.3.  Sync State Control\n   The Sync State Control is an LDAP Control [RFC4511]\
    \ where the\n   controlType is the object identifier 1.3.6.1.4.1.4203.1.9.1.2\
    \ and the\n   controlValue, an OCTET STRING, contains a BER-encoded syncStateValue.\n\
    \   The criticality is FALSE.\n      syncStateValue ::= SEQUENCE {\n         \
    \ state ENUMERATED {\n              present (0),\n              add (1),\n   \
    \           modify (2),\n              delete (3)\n          },\n          entryUUID\
    \ syncUUID,\n          cookie    syncCookie OPTIONAL\n      }\n   The Sync State\
    \ Control is only applicable to SearchResultEntry and\n   SearchResultReference\
    \ Messages.\n"
- title: 2.4.  Sync Done Control
  contents:
  - "2.4.  Sync Done Control\n   The Sync Done Control is an LDAP Control [RFC4511]\
    \ where the\n   controlType is the object identifier 1.3.6.1.4.1.4203.1.9.1.3\
    \ and the\n   controlValue contains a BER-encoded syncDoneValue.  The criticality\n\
    \   is FALSE (and hence absent).\n      syncDoneValue ::= SEQUENCE {\n       \
    \   cookie          syncCookie OPTIONAL,\n          refreshDeletes  BOOLEAN DEFAULT\
    \ FALSE\n      }\n   The Sync Done Control is only applicable to the SearchResultDone\n\
    \   Message.\n"
- title: 2.5.  Sync Info Message
  contents:
  - "2.5.  Sync Info Message\n   The Sync Info Message is an LDAP Intermediate Response\
    \ Message\n   [RFC4511] where responseName is the object identifier\n   1.3.6.1.4.1.4203.1.9.1.4\
    \ and responseValue contains a BER-encoded\n   syncInfoValue.  The criticality\
    \ is FALSE (and hence absent).\n      syncInfoValue ::= CHOICE {\n          newcookie\
    \      [0] syncCookie,\n          refreshDelete  [1] SEQUENCE {\n            \
    \  cookie         syncCookie OPTIONAL,\n              refreshDone    BOOLEAN DEFAULT\
    \ TRUE\n          },\n          refreshPresent [2] SEQUENCE {\n              cookie\
    \         syncCookie OPTIONAL,\n              refreshDone    BOOLEAN DEFAULT TRUE\n\
    \          },\n          syncIdSet      [3] SEQUENCE {\n              cookie \
    \        syncCookie OPTIONAL,\n              refreshDeletes BOOLEAN DEFAULT FALSE,\n\
    \              syncUUIDs      SET OF syncUUID\n          }\n      }\n"
- title: 2.6.  Sync Result Codes
  contents:
  - "2.6.  Sync Result Codes\n   The following LDAP resultCode [RFC4511] is defined:\n\
    \      e-syncRefreshRequired (4096)\n"
- title: 3.  Content Synchronization
  contents:
  - "3.  Content Synchronization\n   The Sync Operation is invoked when the client\
    \ sends a SearchRequest\n   Message with a Sync Request Control.\n   The absence\
    \ of a cookie or an initialized synchronization state in a\n   cookie indicates\
    \ a request for initial content, while the presence of\n   a cookie representing\
    \ a state of a client copy indicates a request\n   for a content update.  Synchronization\
    \ Sessions are discussed in\n   Section 3.1.  Content Determination is discussed\
    \ in Section 3.2.\n   The mode is either refreshOnly or refreshAndPersist.  The\
    \ refreshOnly\n   and refreshAndPersist modes are discussed in Sections 3.3 and\
    \ 3.4,\n   respectively.  The refreshOnly mode consists only of a refresh stage,\n\
    \   while the refreshAndPersist mode consists of a refresh stage and a\n   subsequent\
    \ persist stage.\n"
- title: 3.1.  Synchronization Session
  contents:
  - "3.1.  Synchronization Session\n   A sequence of Sync Operations where the last\
    \ cookie returned by the\n   server for one operation is provided by the client\
    \ in the next\n   operation is said to belong to the same Synchronization Session.\n\
    \   The client MUST specify the same content-controlling parameters (see\n   Section\
    \ 3.5) in each Search Request of the session.  The client\n   SHOULD also issue\
    \ each Sync request of a session under the same\n   authentication and authorization\
    \ associations with equivalent\n   integrity and protections.  If the server does\
    \ not recognize the\n   request cookie or the request is made under different\
    \ associations or\n   non-equivalent protections, the server SHALL return the\
    \ initial\n   content as if no cookie had been provided or return an empty content\n\
    \   with the e-syncRefreshRequired LDAP result code.  The decision\n   between\
    \ the return of the initial content and the return of the empty\n   content with\
    \ the e-syncRefreshRequired result code MAY be based on\n   reloadHint in the\
    \ Sync Request Control from the client.  If the\n   server recognizes the request\
    \ cookie as representing empty or initial\n   synchronization state of the client\
    \ copy, the server SHALL return the\n   initial content.\n   A Synchronization\
    \ Session may span multiple LDAP sessions between the\n   client and the server.\
    \  The client SHOULD issue each Sync request of\n   a session to the same server.\
    \  (Note: Shadowing considerations are\n   discussed in Section 6.)\n"
- title: 3.2.  Content Determination
  contents:
  - "3.2.  Content Determination\n   The content to be provided is determined by parameters\
    \ of the Search\n   Request, as described in [RFC4511], and possibly other controls.\
    \  The\n   same content parameters SHOULD be used in each Sync request of a\n\
    \   session.  If different content is requested and the server is\n   unwilling\
    \ or unable to process the request, the server SHALL return\n   the initial content\
    \ as if no cookie had been provided or return an\n   empty content with the e-syncRefreshRequired\
    \ LDAP result code.  The\n   decision between the return of the initial content\
    \ and the return of\n   the empty content with the e-syncRefreshRequired result\
    \ code MAY be\n   based on reloadHint in the Sync Request Control from the client.\n\
    \   The content may not necessarily include all entries or references\n   that\
    \ would be returned by a normal search operation, nor, for those\n   entries included,\
    \ all attributes returned by a normal search.  When\n   the server is unwilling\
    \ or unable to provide synchronization for any\n   attribute for a set of entries,\
    \ the server MUST treat all filter\n   components matching against these attributes\
    \ as Undefined and MUST\n   NOT return these attributes in SearchResultEntry responses.\n\
    \   Servers SHOULD support synchronization for all non-collective user-\n   application\
    \ attributes for all entries.\n   The server may also return continuation references\
    \ to other servers\n   or to itself.  The latter is allowed as the server may\
    \ partition the\n   entries it holds into separate synchronization contexts.\n\
    \   The client may chase all or some of these continuations, each as a\n   separate\
    \ content synchronization session.\n"
- title: 3.3.  refreshOnly Mode
  contents:
  - "3.3.  refreshOnly Mode\n   A Sync request with mode refreshOnly and with no cookie\
    \ is a poll for\n   initial content.  A Sync request with mode refreshOnly and\
    \ with a\n   cookie representing a synchronization state is a poll for content\n\
    \   update.\n"
- title: 3.3.1.  Initial Content Poll
  contents:
  - "3.3.1.  Initial Content Poll\n   Upon receipt of the request, the server provides\
    \ the initial content\n   using a set of zero or more SearchResultEntry and\n\
    \   SearchResultReference Messages followed by a SearchResultDone\n   Message.\n\
    \   Each SearchResultEntry Message SHALL include a Sync State Control of\n   state\
    \ add, an entryUUID containing the entry's UUID, and no cookie.\n   Each SearchResultReference\
    \ Message SHALL include a Sync State Control\n   of state add, an entryUUID containing\
    \ the UUID associated with the\n   reference (normally the UUID of the associated\
    \ named referral\n   [RFC3296] object), and no cookie.  The SearchResultDone Message\
    \ SHALL\n   include a Sync Done Control having refreshDeletes set to FALSE.\n\
    \   A resultCode value of success indicates that the operation\n   successfully\
    \ completed.  Otherwise, the result code indicates the\n   nature of the failure.\
    \  The server may return e-syncRefreshRequired\n   result code on the initial\
    \ content poll if it is safe to do so when\n   it is unable to perform the operation\
    \ due to various reasons.\n   reloadHint is set to FALSE in the SearchRequest\
    \ Message requesting\n   the initial content poll.\n   If the operation is successful,\
    \ a cookie representing the\n   synchronization state of the current client copy\
    \ SHOULD be returned\n   for use in subsequent Sync Operations.\n"
- title: 3.3.2.  Content Update Poll
  contents:
  - "3.3.2.  Content Update Poll\n   Upon receipt of the request, the server provides\
    \ the content refresh\n   using a set of zero or more SearchResultEntry and\n\
    \   SearchResultReference Messages followed by a SearchResultDone\n   Message.\n\
    \   The server is REQUIRED to:\n      a) provide the sequence of messages necessary\
    \ for eventual\n         convergence of the client's copy of the content to the\
    \ server's\n         copy,\n      b) treat the request as an initial content request\
    \ (e.g., ignore\n         the cookie or the synchronization state represented\
    \ in the\n         cookie),\n      c) indicate that the incremental convergence\
    \ is not possible by\n         returning e-syncRefreshRequired,\n      d) return\
    \ a resultCode other than success or e-\n         syncRefreshRequired.\n   A Sync\
    \ Operation may consist of a single present phase, a single\n   delete phase,\
    \ or a present phase followed by a delete phase.\n   In each phase, for each entry\
    \ or reference that has been added to the\n   content or been changed since the\
    \ previous Sync Operation indicated\n   by the cookie, the server returns a SearchResultEntry\
    \ or\n   SearchResultReference Message, respectively, each with a Sync State\n\
    \   Control consisting of state add, an entryUUID containing the UUID of\n   the\
    \ entry or reference, and no cookie.  Each SearchResultEntry\n   Message represents\
    \ the current state of a changed entry.  Each\n   SearchResultReference Message\
    \ represents the current state of a\n   changed reference.\n   In the present\
    \ phase, for each entry that has not been changed since\n   the previous Sync\
    \ Operation, an empty SearchResultEntry is returned\n   whose objectName reflects\
    \ the entry's current DN, whose attributes\n   field is empty, and whose Sync\
    \ State Control consists of state\n   present, an entryUUID containing the UUID\
    \ of the entry, and no\n   cookie.  For each reference that has not been changed\
    \ since the\n   previous Sync Operation, an empty SearchResultReference containing\
    \ an\n   empty SEQUENCE OF LDAPURL is returned with a Sync State Control\n   consisting\
    \ of state present, an entryUUID containing the UUID of the\n   entry, and no\
    \ cookie.  No messages are sent for entries or references\n   that are no longer\
    \ in the content.\n   Multiple empty entries with a Sync State Control of state\
    \ present\n   SHOULD be coalesced into one or more Sync Info Messages of syncIdSet\n\
    \   value with refreshDeletes set to FALSE.  syncUUIDs contain a set of\n   UUIDs\
    \ of the entries and references unchanged since the last Sync\n   Operation. \
    \ syncUUIDs may be empty.  The Sync Info Message of\n   syncIdSet may contain\
    \ a cookie to represent the state of the content\n   after performing the synchronization\
    \ of the entries in the set.\n   In the delete phase, for each entry no longer\
    \ in the content, the\n   server returns a SearchResultEntry whose objectName\
    \ reflects a past\n   DN of the entry or is empty, whose attributes field is empty,\
    \ and\n   whose Sync State Control consists of state delete, an entryUUID\n  \
    \ containing the UUID of the deleted entry, and no cookie.  For each\n   reference\
    \ no longer in the content, a SearchResultReference\n   containing an empty SEQUENCE\
    \ OF LDAPURL is returned with a Sync State\n   Control consisting of state delete,\
    \ an entryUUID containing the UUID\n   of the deleted reference, and no cookie.\n\
    \   Multiple empty entries with a Sync State Control of state delete\n   SHOULD\
    \ be coalesced into one or more Sync Info Messages of syncIdSet\n   value with\
    \ refreshDeletes set to TRUE.  syncUUIDs contain a set of\n   UUIDs of the entries\
    \ and references that have been deleted from the\n   content since the last Sync\
    \ Operation.  syncUUIDs may be empty.  The\n   Sync Info Message of syncIdSet\
    \ may contain a cookie to represent the\n   state of the content after performing\
    \ the synchronization of the\n   entries in the set.\n   When a present phase\
    \ is followed by a delete phase, the two phases\n   are delimited by a Sync Info\
    \ Message containing syncInfoValue of\n   refreshPresent, which may contain a\
    \ cookie representing the state\n   after completing the present phase.  The refreshPresent\
    \ contains\n   refreshDone, which is always FALSE in the refreshOnly mode of Sync\n\
    \   Operation because it is followed by a delete phase.\n   If a Sync Operation\
    \ consists of a single phase, each phase and hence\n   the Sync Operation are\
    \ marked as ended by a SearchResultDone Message\n   with Sync Done Control, which\
    \ SHOULD contain a cookie representing\n   the state of the content after completing\
    \ the Sync Operation.  The\n   Sync Done Control contains refreshDeletes, which\
    \ is set to FALSE for\n   the present phase and set to TRUE for the delete phase.\n\
    \   If a Sync Operation consists of a present phase followed by a delete\n   phase,\
    \ the Sync Operation is marked as ended at the end of the delete\n   phase by\
    \ a SearchResultDone Message with Sync Done Control, which\n   SHOULD contain\
    \ a cookie representing the state of the content after\n   completing the Sync\
    \ Operation.  The Sync Done Control contains\n   refreshDeletes, which is set\
    \ to TRUE.\n   The client can specify whether it prefers to receive an initial\n\
    \   content by supplying reloadHint of TRUE or to receive a e-\n   syncRefreshRequired\
    \ resultCode by supplying reloadHint of FALSE\n   (hence absent), in the case\
    \ that the server determines that it is\n   impossible or inefficient to achieve\
    \ the eventual convergence by\n   continuing the current incremental synchronization\
    \ thread.\n   A resultCode value of success indicates that the operation is\n\
    \   successfully completed.  A resultCode value of e-syncRefreshRequired\n   indicates\
    \ that a full or partial refresh is needed.  Otherwise, the\n   result code indicates\
    \ the nature of failure.  A cookie is provided in\n   the Sync Done Control for\
    \ use in subsequent Sync Operations for\n   incremental synchronization.\n"
- title: 3.4.  refreshAndPersist Mode
  contents:
  - "3.4.  refreshAndPersist Mode\n   A Sync request with mode refreshAndPersist asks\
    \ for initial content\n   or content update (during the refresh stage) followed\
    \ by change\n   notifications (during the persist stage).\n"
- title: 3.4.1.  refresh Stage
  contents:
  - "3.4.1.  refresh Stage\n   The content refresh is provided as described in Section\
    \ 3.3, except\n   that the successful completion of content refresh is indicated\
    \ by\n   sending a Sync Info Message of refreshDelete or refreshPresent with a\n\
    \   refreshDone value set to TRUE instead of a SearchResultDone Message\n   with\
    \ resultCode success.  A cookie SHOULD be returned in the Sync\n   Info Message\
    \ to represent the state of the content after finishing\n   the refresh stage\
    \ of the Sync Operation.\n"
- title: 3.4.2.  persist Stage
  contents:
  - "3.4.2.  persist Stage\n   Change notifications are provided during the persist\
    \ stage.\n   As updates are made to the DIT, the server notifies the client of\n\
    \   changes to the content.  DIT updates may cause entries and references\n  \
    \ to be added to the content, deleted from the content, or modified\n   within\
    \ the content.  DIT updates may also cause references to be\n   added, deleted,\
    \ or modified within the content.\n   Where DIT updates cause an entry to be added\
    \ to the content, the\n   server provides a SearchResultEntry Message that represents\
    \ the entry\n   as it appears in the content.  The message SHALL include a Sync\
    \ State\n   Control with state of add, an entryUUID containing the entry's UUID,\n\
    \   and an optional cookie.\n   Where DIT updates cause a reference to be added\
    \ to the content, the\n   server provides a SearchResultReference Message that\
    \ represents the\n   reference in the content.  The message SHALL include a Sync\
    \ State\n   Control with state of add, an entryUUID containing the UUID\n   associated\
    \ with the reference, and an optional cookie.\n   Where DIT updates cause an entry\
    \ to be modified within the content,\n   the server provides a SearchResultEntry\
    \ Message that represents the\n   entry as it appears in the content.  The message\
    \ SHALL include a Sync\n   State Control with state of modify, an entryUUID containing\
    \ the\n   entry's UUID, and an optional cookie.\n   Where DIT updates cause a\
    \ reference to be modified within the\n   content, the server provides a SearchResultReference\
    \ Message that\n   represents the reference in the content.  The message SHALL\
    \ include a\n   Sync State Control with state of modify, an entryUUID containing\
    \ the\n   UUID associated with the reference, and an optional cookie.\n   Where\
    \ DIT updates cause an entry to be deleted from the content, the\n   server provides\
    \ a SearchResultEntry Message with no attributes.  The\n   message SHALL include\
    \ a Sync State Control with state of delete, an\n   entryUUID containing the entry's\
    \ UUID, and an optional cookie.\n   Where DIT updates cause a reference to be\
    \ deleted from the content,\n   the server provides a SearchResultReference Message\
    \ with an empty\n   SEQUENCE OF LDAPURL.  The message SHALL include a Sync State\
    \ Control\n   with state of delete, an entryUUID containing the UUID associated\n\
    \   with the reference, and an optional cookie.\n   Multiple empty entries with\
    \ a Sync State Control of state delete\n   SHOULD be coalesced into one or more\
    \ Sync Info Messages of syncIdSet\n   value with refreshDeletes set to TRUE. syncUUIDs\
    \ contain a set of\n   UUIDs of the entries and references that have been deleted\
    \ from the\n   content.  The Sync Info Message of syncIdSet may contain a cookie\
    \ to\n   represent the state of the content after performing the\n   synchronization\
    \ of the entries in the set.\n   With each of these messages, the server may provide\
    \ a new cookie to\n   be used in subsequent Sync Operations.  Additionally, the\
    \ server may\n   also return Sync Info Messages of choice newCookie to provide\
    \ a new\n   cookie.  The client SHOULD use the newest (last) cookie it received\n\
    \   from the server in subsequent Sync Operations.\n"
- title: 3.5.  Search Request Parameters
  contents:
  - "3.5.  Search Request Parameters\n   As stated in Section 3.1, the client SHOULD\
    \ specify the same\n   content-controlling parameters in each Search Request of\
    \ the session.\n   All fields of the SearchRequest Message are considered content-\n\
    \   controlling parameters except for sizeLimit and timeLimit.\n"
- title: 3.5.1.  baseObject
  contents:
  - "3.5.1.  baseObject\n   As with the normal search operation, the refresh and persist\
    \ stages\n   are not isolated from DIT changes.  It is possible that the entry\n\
    \   referred to by the baseObject is deleted, renamed, or moved.  It is\n   also\
    \ possible that the alias object used in finding the entry\n   referred to by\
    \ the baseObject is changed such that the baseObject\n   refers to a different\
    \ entry.\n   If the DIT is updated during processing of the Sync Operation in\
    \ a\n   manner that causes the baseObject no longer to refer to any entry or\n\
    \   in a manner that changes the entry the baseObject refers to, the\n   server\
    \ SHALL return an appropriate non-success result code, such as\n   noSuchObject,\
    \ aliasProblem, aliasDereferencingProblem, referral, or\n   e-syncRefreshRequired.\n"
- title: 3.5.2.  derefAliases
  contents:
  - "3.5.2.  derefAliases\n   This operation does not support alias dereferencing\
    \ during searching.\n   The client SHALL specify neverDerefAliases or derefFindingBaseObj\
    \ for\n   the SearchRequest derefAliases parameter.  The server SHALL treat\n\
    \   other values (e.g., derefInSearching, derefAlways) as protocol\n   errors.\n"
- title: 3.5.3.  sizeLimit
  contents:
  - "3.5.3.  sizeLimit\n   The sizeLimit applies only to entries (regardless of their\
    \ state in\n   Sync State Control) returned during the refreshOnly operation or\
    \ the\n   refresh stage of the refreshAndPersist operation.\n"
- title: 3.5.4.  timeLimit
  contents:
  - "3.5.4.  timeLimit\n   For a refreshOnly Sync Operation, the timeLimit applies\
    \ to the whole\n   operation.  For a refreshAndPersist operation, the timeLimit\
    \ applies\n   only to the refresh stage including the generation of the Sync Info\n\
    \   Message with a refreshDone value of TRUE.\n"
- title: 3.5.5.  filter
  contents:
  - "3.5.5.  filter\n   The client SHOULD avoid filter assertions that apply to the\
    \ values of\n   the attributes likely to be considered by the server as ones holding\n\
    \   meta-information.  See Section 4.\n"
- title: 3.6.  objectName
  contents:
  - "3.6.  objectName\n   The Sync Operation uses entryUUID values provided in the\
    \ Sync State\n   Control as the primary keys to entries.  The client MUST use\
    \ these\n   entryUUIDs to correlate synchronization messages.\n   In some circumstances,\
    \ the DN returned may not reflect the entry's\n   current DN.  In particular,\
    \ when the entry is being deleted from the\n   content, the server may provide\
    \ an empty DN if the server does not\n   wish to disclose the entry's current\
    \ DN (or, if deleted from the DIT,\n   the entry's last DN).\n   Also note that\
    \ the entry's DN may be viewed as meta information (see\n   Section 4.1).\n"
- title: 3.7.  Canceling the Sync Operation
  contents:
  - "3.7.  Canceling the Sync Operation\n   Servers MUST implement the LDAP Cancel\
    \ [RFC3909] Operation and\n   support cancellation of outstanding Sync Operations\
    \ as described\n   here.\n   To cancel an outstanding Sync Operation, the client\
    \ issues an LDAP\n   Cancel [RFC3909] Operation.\n   If at any time the server\
    \ becomes unwilling or unable to continue\n   processing a Sync Operation, the\
    \ server SHALL return a\n   SearchResultDone with a non-success resultCode indicating\
    \ the reason\n   for the termination of the operation.\n   Whether the client\
    \ or the server initiated the termination, the\n   server may provide a cookie\
    \ in the Sync Done Control for use in\n   subsequent Sync Operations.\n"
- title: 3.8.  Refresh Required
  contents:
  - "3.8.  Refresh Required\n   In order to achieve the eventually-convergent synchronization,\
    \ the\n   server may terminate the Sync Operation in the refresh or persist\n\
    \   stages by returning an e-syncRefreshRequired resultCode to the\n   client.\
    \  If no cookie is provided, a full refresh is needed.  If a\n   cookie representing\
    \ a synchronization state is provided in this\n   response, an incremental refresh\
    \ is needed.\n   To obtain a full refresh, the client then issues a new\n   synchronization\
    \ request with no cookie.  To obtain an incremental\n   reload, the client issues\
    \ a new synchronization with the provided\n   cookie.\n   The server may choose\
    \ to provide a full copy in the refresh stage\n   (e.g., ignore the cookie or\
    \ the synchronization state represented in\n   the cookie) instead of providing\
    \ an incremental refresh in order to\n   achieve the eventual convergence.\n \
    \  The decision between the return of the initial content and the return\n   of\
    \ the e-syncRefreshRequired result code may be based on reloadHint\n   in the\
    \ Sync Request Control from the client.\n   In the case of persist stage Sync,\
    \ the server returns the resultCode\n   of e-syncRefreshRequired to the client\
    \ to indicate that the client\n   needs to issue a new Sync Operation in order\
    \ to obtain a synchronized\n   copy of the content.  If no cookie is provided,\
    \ a full refresh is\n   needed.  If a cookie representing a synchronization state\
    \ is\n   provided, an incremental refresh is needed.\n   The server may also return\
    \ e-syncRefreshRequired if it determines\n   that a refresh would be more efficient\
    \ than sending all the messages\n   required for convergence.\n   Note that the\
    \ client may receive one or more of SearchResultEntry,\n   SearchResultReference,\
    \ and/or Sync Info Messages before it receives a\n   SearchResultDone Message\
    \ with the e-syncRefreshRequired result code.\n"
- title: 3.9.  Chattiness Considerations
  contents:
  - "3.9.  Chattiness Considerations\n   The server MUST ensure that the number of\
    \ entry messages generated to\n   refresh the client content does not exceed the\
    \ number of entries\n   presently in the content.  While there is no requirement\
    \ for servers\n   to maintain history information, if the server has sufficient\
    \ history\n   to allow it to reliably determine which entries in the prior client\n\
    \   copy are no longer present in the content and the number of such\n   entries\
    \ is less than or equal to the number of unchanged entries, the\n   server SHOULD\
    \ generate delete entry messages instead of present entry\n   messages (see Section\
    \ 3.3.2).\n   When the amount of history information maintained in the server\
    \ is\n   not enough for the clients to perform infrequent refreshOnly Sync\n \
    \  Operations, it is likely that the server has incomplete history\n   information\
    \ (e.g., due to truncation) by the time those clients\n   connect again.\n   The\
    \ server SHOULD NOT resort to full reload when the history\n   information is\
    \ not enough to generate delete entry messages.  The\n   server SHOULD generate\
    \ either present entry messages only or present\n   entry messages followed by\
    \ delete entry messages to bring the client\n   copy to the current state.  In\
    \ the latter case, the present entry\n   messages bring the client copy to a state\
    \ covered by the history\n   information maintained in the server.\n   The server\
    \ SHOULD maintain enough (current or historical) state\n   information (such as\
    \ a context-wide last modify time stamp) to\n   determine if no changes were made\
    \ in the context since the content\n   refresh was provided and, when no changes\
    \ were made, generate zero\n   delete entry messages instead of present messages.\n\
    \   The server SHOULD NOT use the history information when its use does\n   not\
    \ reduce the synchronization traffic or when its use can expose\n   sensitive\
    \ information not allowed to be received by the client.\n   The server implementor\
    \ should also consider chattiness issues that\n   span multiple Sync Operations\
    \ of a session.  As noted in Section 3.8,\n   the server may return e-syncRefreshRequired\
    \ if it determines that a\n   reload would be more efficient than continuing under\
    \ the current\n   operation.  If reloadHint in the Sync Request is TRUE, the server\
    \ may\n   initiate a reload without directing the client to request a reload.\n\
    \   The server SHOULD transfer a new cookie frequently to avoid having to\n  \
    \ transfer information already provided to the client.  Even where DIT\n   changes\
    \ do not cause content synchronization changes to be\n   transferred, it may be\
    \ advantageous to provide a new cookie using a\n   Sync Info Message.  However,\
    \ the server SHOULD avoid overloading the\n   client or network with Sync Info\
    \ Messages.\n   During persist mode, the server SHOULD coalesce multiple outstanding\n\
    \   messages updating the same entry.  The server MAY delay generation of\n  \
    \ an entry update in anticipation of subsequent changes to that entry\n   that\
    \ could be coalesced.  The length of the delay should be long\n   enough to allow\
    \ coalescing of update requests issued back to back but\n   short enough that\
    \ the transient inconsistency induced by the delay is\n   corrected in a timely\
    \ manner.\n   The server SHOULD use the syncIdSet Sync Info Message when there\
    \ are\n   multiple delete or present messages to reduce the amount of\n   synchronization\
    \ traffic.\n   Also note that there may be many clients interested in a particular\n\
    \   directory change, and that servers attempting to service all of these\n  \
    \ at once may cause congestion on the network.  The congestion issues\n   are\
    \ magnified when the change requires a large transfer to each\n   interested client.\
    \  Implementors and deployers of servers should take\n   steps to prevent and\
    \ manage network congestion.\n"
- title: 3.10.  Operation Multiplexing
  contents:
  - "3.10.  Operation Multiplexing\n   The LDAP protocol model [RFC4511] allows operations\
    \ to be multiplexed\n   over a single LDAP session.  Clients SHOULD NOT maintain\
    \ multiple\n   LDAP sessions with the same server.  Servers SHOULD ensure that\n\
    \   responses from concurrently processed operations are interleaved\n   fairly.\n\
    \   Clients SHOULD combine Sync Operations whose result set is largely\n   overlapping.\
    \  This avoids having to return multiple messages, once\n   for each overlapping\
    \ session, for changes to entries in the overlap.\n   Clients SHOULD NOT combine\
    \ Sync Operations whose result sets are\n   largely non-overlapping.  This ensures\
    \ that an event requiring an\n   e-syncRefreshRequired response can be limited\
    \ to as few result sets\n   as possible.\n"
- title: 4.  Meta Information Considerations
  contents:
  - '4.  Meta Information Considerations

    '
- title: 4.1.  Entry DN
  contents:
  - "4.1.  Entry DN\n   As an entry's DN is constructed from its relative DN (RDN)\
    \ and the\n   entry's parent's DN, it is often viewed as meta information.\n \
    \  While renaming or moving to a new superior causes the entry's DN to\n   change,\
    \ that change SHOULD NOT, by itself, cause synchronization\n   messages to be\
    \ sent for that entry.  However, if the renaming or the\n   moving could cause\
    \ the entry to be added or deleted from the content,\n   appropriate synchronization\
    \ messages should be generated to indicate\n   this to the client.\n   When a\
    \ server treats the entry's DN as meta information, the server\n   SHALL either\n\
    \      -  evaluate all MatchingRuleAssertions [RFC4511] to TRUE if\n         matching\
    \ a value of an attribute of the entry, otherwise\n         Undefined, or\n  \
    \    -  evaluate all MatchingRuleAssertion with dnAttributes of TRUE as\n    \
    \     Undefined.\n   The latter choice is offered for ease of server implementation.\n"
- title: 4.2.  Operational Attributes
  contents:
  - "4.2.  Operational Attributes\n   Where values of an operational attribute are\
    \ determined by values not\n   held as part of the entry it appears in, the operational\
    \ attribute\n   SHOULD NOT support synchronization of that operational attribute.\n\
    \   For example, in servers that implement the X.501 subschema model\n   [X.501],\
    \ servers should not support synchronization of the\n   subschemaSubentry attribute\
    \ as its value is determined by values held\n   and administrated in subschema\
    \ subentries.\n   As a counter example, servers that implement aliases [RFC4512][X.501]\n\
    \   can support synchronization of the aliasedObjectName attribute as its\n  \
    \ values are held and administrated as part of the alias entries.\n   Servers\
    \ SHOULD support synchronization of the following operational\n   attributes:\
    \ createTimestamp, modifyTimestamp, creatorsName,\n   modifiersName [RFC4512].\
    \  Servers MAY support synchronization of\n   other operational attributes.\n"
- title: 4.3.  Collective Attributes
  contents:
  - "4.3.  Collective Attributes\n   A collective attribute is \"a user attribute\
    \ whose values are the same\n   for each member of an entry collection\" [X.501].\
    \  Use of collective\n   attributes in LDAP is discussed in [RFC3671].\n   Modification\
    \ of a collective attribute generally affects the content\n   of multiple entries,\
    \ which are the members of the collection.  It is\n   inefficient to include values\
    \ of collective attributes visible in\n   entries of the collection, as a single\
    \ modification of a collective\n   attribute requires transmission of multiple\
    \ SearchResultEntry (one\n   for each entry of the collection that the modification\
    \ affected).\n   Servers SHOULD NOT synchronize collective attributes appearing\
    \ in\n   entries of any collection.  Servers MAY support synchronization of\n\
    \   collective attributes appearing in collective attribute subentries.\n"
- title: 4.4.  Access and Other Administrative Controls
  contents:
  - "4.4.  Access and Other Administrative Controls\n   Entries are commonly subject\
    \ to access and other administrative\n   Controls.  While portions of the policy\
    \ information governing a\n   particular entry may be held in the entry, policy\
    \ information is\n   often held elsewhere (in superior entries, in subentries,\
    \ in the root\n   DSE, in configuration files, etc.).  Because of this, changes\
    \ to\n   policy information make it difficult to ensure eventual convergence\n\
    \   during incremental synchronization.\n   Where it is impractical or infeasible\
    \ to generate content changes\n   resulting from a change to policy information,\
    \ servers may opt to\n   return e-syncRefreshRequired or to treat the Sync Operation\
    \ as an\n   initial content request (e.g., ignore the cookie or the\n   synchronization\
    \ state represented in the cookie).\n"
- title: 5.  Interaction with Other Controls
  contents:
  - "5.  Interaction with Other Controls\n   The Sync Operation may be used with:\n\
    \      - ManageDsaIT Control [RFC3296]\n      - Subentries Control [RFC3672]\n\
    \   as described below.  The Sync Operation may be used with other LDAP\n   extensions\
    \ as detailed in other documents.\n"
- title: 5.1.  ManageDsaIT Control
  contents:
  - "5.1.  ManageDsaIT Control\n   The ManageDsaIT Control [RFC3296] indicates that\
    \ the operation acts\n   upon the DSA Information Tree and causes referral and\
    \ other special\n   entries to be treated as object entries with respect to the\n\
    \   operation.\n"
- title: 5.2.  Subentries Control
  contents:
  - "5.2.  Subentries Control\n   The Subentries Control is used with the search operation\
    \ \"to control\n   the visibility of entries and subentries which are within scope\"\
    \n   [RFC3672].  When used with the Sync Operation, the subentries control\n \
    \  and other factors (search scope, filter, etc.) are used to determine\n   whether\
    \ an entry or subentry appears in the content.\n"
- title: 6.  Shadowing Considerations
  contents:
  - "6.  Shadowing Considerations\n   As noted in [RFC4511], some servers may hold\
    \ shadow copies of entries\n   that can be used to answer search and comparison\
    \ queries.  Such\n   servers may also support content synchronization requests.\
    \  This\n   section discusses considerations for implementors and deployers for\n\
    \   the implementation and deployment of the Sync operation in shadowed\n   directories.\n\
    \   While a client may know of multiple servers that are equally capable\n   of\
    \ being used to obtain particular directory content from, a client\n   SHOULD\
    \ NOT assume that each of these servers is equally capable of\n   continuing a\
    \ content synchronization session.  As stated in Section\n   3.1, the client SHOULD\
    \ issue each Sync request of a Sync session to\n   the same server.\n   However,\
    \ through domain naming or IP address redirection or other\n   techniques, multiple\
    \ physical servers can be made to appear as one\n   logical server to a client.\
    \  Only servers that are equally capable in\n   regards to their support for the\
    \ Sync operation and that hold equally\n   complete copies of the entries should\
    \ be made to appear as one\n   logical server.  In particular, each physical server\
    \ acting as one\n   logical server SHOULD be equally capable of continuing a content\n\
    \   synchronization based upon cookies provided by any of the other\n   physical\
    \ servers without requiring a full reload.  Because there is\n   no standard LDAP\
    \ shadowing mechanism, the specification of how to\n   independently implement\
    \ equally capable servers (as well as the\n   precise definition of \"equally\
    \ capable\") is left to future documents.\n   Note that it may be difficult for\
    \ the server to reliably determine\n   what content was provided to the client\
    \ by another server, especially\n   in the shadowing environments that allow shadowing\
    \ events to be\n   coalesced.  For these servers, the use of the delete phase\
    \ discussed\n   in Section 3.3.2 may not be applicable.\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   In order to maintain a synchronized copy of the\
    \ content, a client is\n   to delete information from its copy of the content\
    \ as described\n   above.  However, the client may maintain knowledge of information\n\
    \   disclosed to it by the server separate from its copy of the content\n   used\
    \ for synchronization.  Management of this knowledge is beyond the\n   scope of\
    \ this document.  Servers should be careful not to disclose\n   information for\
    \ content the client is not authorized to have\n   knowledge of and/or about.\n\
    \   While the information provided by a series of refreshOnly Sync\n   Operations\
    \ is similar to that provided by a series of Search\n   Operations, persist stage\
    \ may disclose additional information.  A\n   client may be able to discern information\
    \ about the particular\n   sequence of update operations that caused content change.\n\
    \   Implementors should take precautions against malicious cookie\n   content,\
    \ including malformed cookies or valid cookies used with\n   different security\
    \ associations and/or protections in an attempt to\n   obtain unauthorized access\
    \ to information.  Servers may include a\n   digital signature in the cookie to\
    \ detect tampering.\n   The operation may be the target of direct denial-of-service\
    \ attacks.\n   Implementors should provide safeguards to ensure the operation\
    \ is not\n   abused.  Servers may place access control or other restrictions upon\n\
    \   the use of this operation.\n   Note that even small updates to the directory\
    \ may cause a significant\n   amount of traffic to be generated to clients using\
    \ this operation.  A\n   user could abuse its update privileges to mount an indirect\
    \ denial of\n   service to these clients, other clients, and/or portions of the\n\
    \   network.  Servers should provide safeguards to ensure that update\n   operations\
    \ are not abused.\n   Implementors of this (or any) LDAP extension should be familiar\
    \ with\n   general LDAP security considerations [RFC4510].\n"
- title: 8.  IANA Considerations
  contents:
  - "8.  IANA Considerations\n   Registration of the following values have been completed\
    \ by the IANA\n   [RFC4520].\n"
- title: 8.1.  Object Identifier
  contents:
  - "8.1.  Object Identifier\n   The OID arc 1.3.6.1.4.1.4203.1.9.1 was assigned [ASSIGN]\
    \ by the\n   OpenLDAP Foundation, under its IANA-assigned private enterprise\n\
    \   allocation [PRIVATE], for use in this specification.\n"
- title: 8.2.  LDAP Protocol Mechanism
  contents:
  - "8.2.  LDAP Protocol Mechanism\n   The IANA has registered the LDAP Protocol Mechanism\
    \ described in this\n   document.\n      Subject: Request for LDAP Protocol Mechanism\
    \ Registration\n      Object Identifier: 1.3.6.1.4.1.4203.1.9.1.1\n      Description:\
    \ LDAP Content Synchronization Control\n      Person & email address to contact\
    \ for further information:\n          Kurt Zeilenga <kurt@openldap.org>\n    \
    \  Usage: Control\n      Specification: RFC 4533\n      Author/Change Controller:\
    \ Kurt D. Zeilenga, Jong Hyuk Choi\n      Comments: none\n"
- title: 8.3.  LDAP Result Codes
  contents:
  - "8.3.  LDAP Result Codes\n   The IANA has registered the LDAP Result Code described\
    \ in this\n   document.\n      Subject: LDAP Result Code Registration\n      Person\
    \ & email address to contact for further information:\n          Kurt Zeilenga\
    \ <kurt@OpenLDAP.org>\n      Result Code Name: e-syncRefreshRequired (4096)\n\
    \      Specification: RFC 4533\n      Author/Change Controller: Kurt D. Zeilenga,\
    \ Jong Hyuk Choi\n      Comments:  none\n"
- title: 9.  Acknowledgements
  contents:
  - "9.  Acknowledgements\n   This document borrows significantly from the LDAP Client\
    \ Update\n   Protocol [RFC3928], a product of the IETF LDUP working group.  This\n\
    \   document also benefited from Persistent Search [PSEARCH], Triggered\n   Search\
    \ [TSEARCH], and Directory Synchronization [DIRSYNC] works.\n   This document\
    \ also borrows from \"Lightweight Directory Access\n   Protocol (v3)\" [RFC2251].\n"
- title: 10.  Normative References
  contents:
  - "10.  Normative References\n   [RFC2119]   Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n               Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [RFC3296]   Zeilenga, K., \"Named Subordinate References in\n    \
    \           Lightweight Directory Access Protocol (LDAP)\n               Directories\"\
    , RFC 3296, July 2002.\n   [RFC3671]   Zeilenga, K., \"Collective Attributes in\
    \ the Lightweight\n               Directory Access Protocol (LDAP)\", RFC 3671,\
    \ December\n               2003.\n   [RFC3672]   Zeilenga, K., \"Subentries in\
    \ the Lightweight Directory\n               Access Protocol (LDAP)\", RFC 3672,\
    \ December 2003.\n   [RFC3909]   Zeilenga, K., \"Lightweight Directory Access\
    \ Protocol\n               (LDAP) Cancel Operation\", RFC 3909, October 2004.\n\
    \   [RFC4510]   Zeilenga, K., Ed., \"Lightweight Directory Access Protocol\n \
    \              (LDAP): Technical Specification Road Map\", RFC 4510, June\n  \
    \             2006.\n   [RFC4511]   Sermersheim, J., Ed., \"Lightweight Directory\
    \ Access\n               Protocol (LDAP): The Protocol\", RFC 4511, June 2006.\n\
    \   [RFC4512]   Zeilenga, K., \"Lightweight Directory Access Protocol\n      \
    \         (LDAP): Directory Information Models\", RFC 4512, June\n           \
    \    2006.\n   [RFC4530]   Zeilenga, K., \"Lightweight Directory Access Protocol\n\
    \               (LDAP) entryUUID Operational Attribute\", RFC 4530, June\n   \
    \            2006.\n   [UUID]      International Organization for Standardization\
    \ (ISO),\n               \"Information technology - Open Systems Interconnection\
    \ -\n               Remote Procedure Call\", ISO/IEC 11578:1996\n   [X.501]  \
    \   International Telecommunication Union - Telecommunication\n              \
    \ Standardization Sector, \"The Directory -- Models,\"\n               X.501(1993)\
    \ (also ISO/IEC 9594-2:1994).\n   [X.680]     International Telecommunication\
    \ Union - Telecommunication\n               Standardization Sector, \"Abstract\
    \ Syntax Notation One\n               (ASN.1) - Specification of Basic Notation\"\
    , X.680(1997)\n               (also ISO/IEC 8824-1:1998).\n   [X.690]     International\
    \ Telecommunication Union - Telecommunication\n               Standardization\
    \ Sector, \"Specification of ASN.1 encoding\n               rules: Basic Encoding\
    \ Rules (BER), Canonical Encoding\n               Rules (CER), and Distinguished\
    \ Encoding Rules (DER)\",\n               X.690(1997) (also ISO/IEC 8825-1:1998).\n"
- title: 11.  Informative References
  contents:
  - "11.  Informative References\n   [RFC2251]   Wahl, M., Howes, T., and S. Kille,\
    \ \"Lightweight Directory\n               Access Protocol (v3)\", RFC 2251, December\
    \ 1997.\n   [RFC3928]   Megginson, R., Ed., Smith, M., Natkovich, O., and J.\n\
    \               Parham, \"Lightweight Directory Access Protocol (LDAP)\n     \
    \          Client Update Protocol (LCUP)\", RFC 3928, October 2004.\n   [RFC4520]\
    \   Zeilenga, K., \"Internet Assigned Numbers Authority (IANA)\n             \
    \  Considerations for the Lightweight Directory Access\n               Protocol\
    \ (LDAP)\", BCP 64, RFC 4520, June 2006.\n   [PRIVATE]   IANA, \"Private Enterprise\
    \ Numbers\",\n               http://www.iana.org/assignments/enterprise-numbers.\n\
    \   [ASSIGN]    OpenLDAP Foundation, \"OpenLDAP OID Delegations\",\n         \
    \      http://www.openldap.org/foundation/oid-delegate.txt.\n   [X.500]     International\
    \ Telecommunication Union - Telecommunication\n               Standardization\
    \ Sector, \"The Directory -- Overview of\n               concepts, models and\
    \ services,\" X.500(1993) (also ISO/IEC\n               9594-1:1994).\n   [X.525]\
    \     International Telecommunication Union - Telecommunication\n            \
    \   Standardization Sector, \"The Directory: Replication\",\n               X.525(1993).\n\
    \   [DIRSYNC]   Armijo, M., \"Microsoft LDAP Control for Directory\n         \
    \      Synchronization\", Work in Progress.\n   [PSEARCH]   Smith, M., et al.,\
    \ \"Persistent Search: A Simple LDAP\n               Change Notification Mechanism\"\
    , Work in Progress.\n   [TSEARCH]   Wahl, M., \"LDAPv3 Triggered Search Control\"\
    , Work in\n               Progress.\n"
- title: Appendix A.  CSN-based Implementation Considerations
  contents:
  - "Appendix A.  CSN-based Implementation Considerations\n   This appendix is provided\
    \ for informational purposes only; it is not\n   a normative part of the LDAP\
    \ Content Synchronization Operation's\n   technical specification.\n   This appendix\
    \ discusses LDAP Content Synchronization Operation server\n   implementation considerations\
    \ associated with Change Sequence Number\n   based approaches.\n   Change Sequence\
    \ Number based approaches are targeted for use in\n   servers that do not maintain\
    \ history information (e.g., change logs,\n   state snapshots) about changes made\
    \ to the Directory and hence, must\n   rely on current directory state and minimal\
    \ synchronization state\n   information embedded in Sync Cookie.  Servers that\
    \ maintain history\n   information should consider other approaches that exploit\
    \ the history\n   information.\n   A Change Sequence Number is effectively a time\
    \ stamp that has\n   sufficient granularity to ensure that the precedence relationship\
    \ in\n   time of two updates to the same object can be determined.  Change\n \
    \  Sequence Numbers are not to be confused with Commit Sequence Numbers\n   or\
    \ Commit Log Record Numbers.  A Commit Sequence Number allows one to\n   determine\
    \ how two commits (to the same object or different objects)\n   relate to each\
    \ other in time.  A Change Sequence Number associated\n   with different entries\
    \ may be committed out of order.  In the\n   remainder of this Appendix, the term\
    \ CSN refers to a Change Sequence\n   Number.\n   In these approaches, the server\
    \ not only maintains a CSN for each\n   directory entry (the entry CSN) but also\
    \ maintains a value that we\n   will call the context CSN.  The context CSN is\
    \ the greatest committed\n   entry CSN that is not greater than any outstanding\
    \ (uncommitted)\n   entry CSNs for all entries in a directory context.  The values\
    \ of\n   context CSN are used in syncCookie values as synchronization state\n\
    \   indicators.\n   As search operations are not isolated from individual directory\n\
    \   update operations and individual update operations cannot be assumed\n   to\
    \ be serialized, one cannot assume that the returned content\n   incorporates\
    \ each relevant change whose change sequence number is\n   less than or equal\
    \ to the greatest entry CSN in the content.  The\n   content incorporates all\
    \ the relevant changes whose change sequence\n   numbers are less than or equal\
    \ to context CSN before search\n   processing.  The content may also incorporate\
    \ any subset of the\n   changes whose change sequence number is greater than context\
    \ CSN\n   before search processing but less than or equal to the context CSN\n\
    \   after search processing.  The content does not incorporate any of the\n  \
    \ changes whose CSN is greater than the context CSN after search\n   processing.\n\
    \   A simple server implementation could use the value of the context CSN\n  \
    \ before search processing to indicate state.  Such an implementation\n   would\
    \ embed this value into each SyncCookie returned.  We'll call\n   this the cookie\
    \ CSN.  When a refresh was requested, the server would\n   simply generate \"\
    update\" messages for all entries in the content\n   whose CSN is greater than\
    \ the supplied cookie CSN and generate\n   \"present\" messages for all other\
    \ entries in the content.  However, if\n   the current context CSN is the same\
    \ as the cookie CSN, the server\n   should instead generate zero \"updates\" and\
    \ zero \"delete\" messages and\n   indicate a refreshDeletes of TRUE, as the directory\
    \ has not changed.\n   The implementation should also consider the impact of changes\
    \ to meta\n   information, such as access controls, that affect content\n   determination.\
    \  One approach is for the server to maintain a\n   context-wide meta information\
    \ CSN or meta CSN.  This meta CSN would\n   be updated whenever meta information\
    \ affecting content determination\n   was changed.  If the value of the meta CSN\
    \ is greater than the cookie\n   CSN, the server should ignore the cookie and\
    \ treat the request as an\n   initial request for content.\n   Additionally, servers\
    \ may want to consider maintaining some per-\n   session history information to\
    \ reduce the number of messages needed\n   to be transferred during incremental\
    \ refreshes.  Specifically, a\n   server could record information about entries\
    \ as they leave the scope\n   of a disconnected sync session and later use this\
    \ information to\n   generate delete messages instead of present messages.\n \
    \  When the history information is truncated, the CSN of the latest\n   truncated\
    \ history information entry may be recorded as the truncated\n   CSN of the history\
    \ information.  The truncated CSN may be used to\n   determine whether a client\
    \ copy can be covered by the history\n   information by comparing it to the synchronization\
    \ state contained in\n   the cookie supplied by the client.\n   When there is\
    \ a large number of sessions, it may make sense to\n   maintain such history only\
    \ for the selected clients.  Also, servers\n   taking this approach need to consider\
    \ resource consumption issues to\n   ensure reasonable server operation and to\
    \ protect against abuse.  It\n   may be appropriate to restrict this mode of operation\
    \ by policy.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Kurt D. Zeilenga\n   OpenLDAP Foundation\n   EMail: Kurt@OpenLDAP.org\n\
    \   Jong Hyuk Choi\n   IBM Corporation\n   EMail: jongchoi@us.ibm.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2006).\n   This\
    \ document is subject to the rights, licenses and restrictions\n   contained in\
    \ BCP 78 and at www.rfc-editor.org/copyright.html, and\n   except as set forth\
    \ therein, the authors retain all their rights.\n   This document and the information\
    \ contained herein are provided on an\n   \"AS IS\" basis and THE CONTRIBUTOR,\
    \ THE ORGANIZATION HE/SHE REPRESENTS\n   OR IS SPONSORED BY (IF ANY), THE INTERNET\
    \ SOCIETY AND THE INTERNET\n   ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES,\
    \ EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE\
    \ OF THE\n   INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\n\
    \   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is provided by the IETF\n\
    \   Administrative Support Activity (IASA).\n"
