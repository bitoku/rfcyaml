- contents:
  - '                   RSVP Extensions for Policy Control

    '
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2000).  All Rights Reserved.\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   This memo presents a set of extensions for supporting generic policy\n
    \  based admission control in RSVP. It should be perceived as an\n   extension
    to the RSVP functional specifications [RSVP]\n   These extensions include the
    standard format of POLICY_DATA objects,\n   and a description of RSVP's handling
    of policy events.\n   This document does not advocate particular policy control
    mechanisms;\n   however, a Router/Server Policy Protocol description for these\n
    \  extensions can be found in [RAP, COPS, COPS-RSVP].\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1 Introduction.......................................................2\n
    \  2 A Simple Scenario..................................................3\n   3
    Policy Data Objects................................................3\n   3.1  Base
    Format.....................................................4\n   3.2  Options.........................................................4\n
    \  3.3  Policy Elements.................................................7\n   3.4
    \ Purging Policy State............................................7\n   4 Processing
    Rules...................................................8\n   4.1  Basic Signaling.................................................8\n
    \  4.2  Default Handling for PIN nodes..................................8\n   4.3
    \ Error Signaling.................................................9\n   5 IANA
    Considerations................................................9\n   6 Security
    Considerations............................................9\n   7 References........................................................10\n
    \  8 Acknowledgments...................................................10\n   9
    Author Information................................................10\n   Appendix
    A: Policy Error Codes......................................11\n   Appendix B:
    INTEGRITY computation for POLICY_DATA objects...........12\n   Full Copyright
    Statement ...........................................13\n"
  title: Table of Contents
- contents:
  - "1  Introduction\n   RSVP, by definition, discriminates between users, by providing
    some\n   users with better service at the expense of others. Therefore, it is\n
    \  reasonable to expect that RSVP be accompanied by mechanisms for\n   controlling
    and enforcing access and usage policies. Version 1 of the\n   RSVP Functional
    Specifications [RSVP] left a placeholder for policy\n   support in the form of
    POLICY_DATA object.\n   The current RSVP Functional Specification describes the
    interface to\n   admission (traffic) control that is based \"only\" on resource\n
    \  availability. In this document we describe a set of extensions to\n   RSVP
    for supporting policy based admission control as well. The scope\n   of this document
    is limited to these extensions and does not advocate\n   specific architectures
    for policy based controls.\n   For the purpose of this document we do not differentiate
    between\n   Policy Decision Point (PDP) and Local Decision Point (LDPs) as\n   described
    in [RAP]. The term PDP should be assumed to include LDP as\n   well.\n"
  title: 1  Introduction
- contents:
  - "2  A Simple Scenario\n   It is generally assumed that policy enforcement (at
    least in its\n   initial stages) is likely to concentrate on border nodes between\n
    \  autonomous systems.\n   Figure 1 illustrates a simple autonomous domain with
    two boundary\n   nodes (A, C) which represent PEPs controlled by PDPs. A core
    node (B)\n   represents an RSVP capable policy ignorant node (PIN) with\n   capabilities
    limited to default policy handling (Section 4.2).\n                     PDP1                        PDP2\n
    \                     |                           |\n                      |                           |\n
    \                   +---+         +---+         +---+\n                    | A
    +---------+ B +---------+ C |\n                    +---+         +---+         +---+\n
    \                    PEP2          PIN           PEP2\n                   Figure
    1: Autonomous Domain scenario\n   Here, policy objects transmitted across the
    domain traverse an\n   intermediate PIN node (B) that is allowed to process RSVP
    message but\n   considered non-trusted for handling policy information.\n   This
    document describes processing rules for both PEP as well as PIN\n   nodes.\n"
  title: 2  A Simple Scenario
- contents:
  - "3  Policy Data Objects\n   POLICY_DATA objects are carried by RSVP messages and
    contain policy\n   information. All policy-capable nodes (at any location in the\n
    \  network) can generate, modify, or remove policy objects, even when\n   senders
    or receivers do not provide, and may not even be aware of\n   policy data objects.\n
    \  The exchange of POLICY_DATA objects between policy-capable nodes\n   along
    the data path, supports the generation of consistent end-to-end\n   policies.
    Furthermore, such policies can be successfully deployed\n   across multiple administrative
    domains when border nodes manipulate\n   and translate POLICY_DATA objects according
    to established sets of\n   bilateral agreements.\n   The following extends section
    A.13 in [RSVP].\n"
  - contents:
    - "3.1 Base Format\n   POLICY_DATA class=14\n   o   Type 1 POLICY_DATA object:
      Class=14, C-Type=1\n       +-------------+-------------+-------------+-------------+\n
      \      |  Length                   | POLICY_DATA |      1      |\n       +---------------------------+-------------+-------------+\n
      \      |  Data Offset              | 0 (reserved)              |\n       +---------------------------+-------------+-------------+\n
      \      |                                                       |\n       //
      Option List                                         //\n       |                                                       |\n
      \      +-------------------------------------------------------+\n       |                                                       |\n
      \      // Policy Element List                                 //\n       |                                                       |\n
      \      +-------------------------------------------------------+\n       Data
      Offset: 16 bits\n           The offset in bytes of the data portion (from the
      first\n           byte of the object header).\n       Reserved: 16 bits\n            Always
      0.\n       Option List: Variable length\n           The list of options and
      their usage is defined in Section\n           3.2.\n   Policy Element List:
      Variable length\n           The contents of policy elements is opaque to RSVP.
      See more\n           details in Section 3.3.\n"
    title: 3.1 Base Format
  - contents:
    - "3.2 Options\n   This section describes a set of options that may appear in\n
      \  POLICY_DATA objects. All policy options appear as RSVP objects but\n   their
      semantic is modified when used as policy data options.\n   FILTER_SPEC object
      (list) or SCOPE object\n   These objects describe the set of senders associated
      with the\n   POLICY_DATA object. If none is provided, the policy information
      is\n   assumed to be associated with all the flows of the session. These two\n
      \  types of objects are mutually exclusive, and cannot be mixed.\n   In Packed
      FF Resv messages, this FILTER_SPEC option provides\n   association between a
      reserved flow and its POLICY_DATA objects.\n   In WF or SE styles, this option
      preserves the original\n   flow/POLICY_DATA association as formed by PDPs, even
      across RSVP\n   capable PINs. Such preservation is required since PIN nodes
      may\n   change the list of reserved flows on a per-hop basis, irrespective of\n
      \  legitimate Edge-to-Edge PDP policy considerations.\n   Last, the SCOPE object
      should be used to prevent \"policy loops\" in a\n   manner similar to the one
      described in [RSVP], Section 3.4. When PIN\n   nodes are part of a WF reservation
      path, the RSVP SCOPE object is\n   unable to prevent policy loops and the separate
      policy SCOPE object\n   is required.\n   Note: using the SCOPE option may have
      significant impact on scaling\n   and size of POLICY_DATA objects.\n   Originating
      RSVP_HOP\n   The RSVP_HOP object identifies the neighbor/peer policy-capable
      node\n   that constructed the policy object. When policy is enforced at border\n
      \  nodes, peer policy nodes may be several RSVP hops away from each\n   other
      and the originating RSVP_HOP is the basis for the mechanism\n   that allows
      them to recognize each other and communicate safely and\n   directly.\n   If
      no RSVP_HOP object is present, the policy data is implicitly\n   assumed to
      have been constructed by the RSVP_HOP indicated in the\n   RSVP message itself
      (i.e., the neighboring RSVP node is policy-\n   capable).\n   Destination RSVP_HOP\n
      \  A second RSVP_HOP object may follow the originating RSVP_HOP object.\n   This
      second RSVP_HOP identifies the destination policy node. This is\n   used to
      ensure the POLICY_DATA object is delivered to targeted policy\n   nodes. It
      may be used to emulate unicast delivery in multicast Path\n   messages. It may
      also help prevent using a policy object in other\n   parts of the network (replay
      attack).\n   On the receiving side, a policy node should ignore any POLICY_DATA\n
      \  that includes a destination RSVP_HOP that doesn't match its own IP\n   address.\n
      \  INTEGRITY Object\n   Figure 1 (Section 2) provides an example where POLICY_DATA
      objects\n   are transmitted between boundary nodes while traversing non-secure\n
      \  PIN nodes. In this scenario, the RSVP integrity mechanism becomes\n   ineffective
      since it places policy trust with intermediate PIN nodes\n   (which are trusted
      to perform RSVP signaling but not to perform\n   policy decisions or manipulations).\n
      \  The INTEGRITY object option inside POLICY_DATA object creates direct\n   secure
      communications between non-neighboring PEPs (and their\n   controlling PDPs)
      without involving PIN nodes.\n   This option can be used at the discretion of
      PDPs, and is computed in\n   a manner described in Appendix B.\n   Policy Refresh
      TIME_VALUES (PRT)\n   The Policy Refresh TIME_VALUES (PRT) option is used to
      slow policy\n   refresh frequency for policies that have looser timing constraints\n
      \  relative to RSVP. If the PRT option is present, policy refreshes can\n   be
      withheld as long as at least one refresh is sent before the policy\n   refresh
      timer expires. A minimal value for PRT is R; lower values are\n   assumed to
      be R (neither error nor warning should be triggered).\n   To simplify RSVP processing,
      time values are not based directly on\n   the PRT value, but on a Policy Refresh
      Multiplier N computed as\n   N=Floor(PRT/R). Refresh and cleanup rules are derived
      from [RSVP]\n   Section 3.7 assuming the refresh period for PRT POLICY DATA
      is R'\n   computed as R'=N*R.  In effect, both the refresh and the state\n   cleanup
      are slowed by a factor of N).\n   The refresh multiplier applies to no-change
      periodic refreshes only\n   (rather than updates). For example, a policy being
      refreshed at time\n   T, T+N, T+2N,... may encounter a route change detected
      at T+X. In\n   this case, the event would force an immediate policy update and
      would\n   reset srfresh times to T+X+N, T+X+2N,...\n   When network nodes restart,
      RSVP messages between PRT policy\n   refreshes may be rejected since they arrive
      without necessary\n   POLICY_DATA objects.  This error situation would clear
      with the next\n   periodic policy refresh or with a policy update triggered
      by ResvErr\n   or PathErr messages.\n   This option is especially useful to
      combine strong (high overhead)\n   and weak (low overhead) authentication certificates
      as policy data.\n   In such schemes the weak certificate can support admitting
      a\n   reservation only for a limited time, after which the strong\n   certificate
      is required.\n   This approach may reduce the overhead of POLICY_DATA processing.\n
      \  Strong certificates could be transmitted less frequently, while weak\n   certificates
      are included in every RSVP refresh.\n"
    title: 3.2 Options
  - contents:
    - "3.3 Policy Elements\n   The content of policy elements is opaque to RSVP; their
      internal\n   format is understood by policy peers e.g. an RSVP Local Decision\n
      \  Point (LDP) or a Policy Decision Point (PDP) [RAP]. A registry of\n   policy
      element codepoints and their meaning is maintained by [IANA-\n   CONSIDERATIONS]
      (also see Section 5).\n   Policy Elements have the following format:\n   +-------------+-------------+-------------+-------------+\n
      \  |  Length                   |   P-Type                  |\n   +---------------------------+---------------------------+\n
      \  |                                                       |\n   // Policy information
      \ (Opaque to RSVP)                //\n   |                                                       |\n
      \  +-------------------------------------------------------+\n"
    title: 3.3 Policy Elements
  - contents:
    - "3.4 Purging Policy State\n   Policy state expires in the granularity of Policy
      Elements\n   (POLICY_DATA objects are mere containers and do not expire as such).\n
      \  Policy elements expire in the exact manner and time as the RSVP state\n   received
      in the same message (see [RSVP] Section 3.7).  PRT\n   controlled state expires
      N times slower (see Section 3.2).\n   Only one policy element of a certain P-Type
      can be active at any\n   given time. Therefore, policy elements are instantaneously
      replaced\n   when another policy element of the same P-Type is received from
      the\n   same PDP (previous or next policy RSVP_HOP). An empty policy element\n
      \  of a certain P-Type is used to delete (rather than a replace) all\n   policy
      state of the same P-Type.\n"
    title: 3.4 Purging Policy State
  title: 3  Policy Data Objects
- contents:
  - "4  Processing Rules\n   These sections describe the minimal required policy processing
    rules\n   for RSVP.\n"
  - contents:
    - "4.1 Basic Signaling\n   This memo mandates enforcing policy control for Path,
      Resv, PathErr,\n   and ResvErr messages only. PathTear and ResvTear are assumed
      not to\n   require policy control based on two main presumptions. First, that\n
      \  Integrity verification [MD5] guarantee that the Tear is received from\n   the
      same node that sent the installed reservation, and second, that\n   it is functionally
      equivalent to that node holding-off refreshes for\n   this reservation.\n"
    title: 4.1 Basic Signaling
  - contents:
    - "4.2 Default Handling for PIN nodes\n   Figure 1 illustrates an example of where
      policy data objects traverse\n   PIN nodes in transit from one PEP to another.\n
      \  A PIN node is required at a minimum to forward the received\n   POLICY_DATA
      objects in the appropriate outgoing messages according to\n   the following
      rules:\n   o    POLICY_DATA objects are to be forwarded as is, without any\n
      \       modifications.\n   o    Multicast merging (splitting) nodes:\n        In
      the upstream direction:\n           When multiple POLICY_DATA objects arrive
      from downstream, the\n           RSVP node should concatenate all of them (as
      a list of the\n           original POLICY_DATA objects) and forward them with
      the\n           outgoing (upstream) message.\n        On the downstream direction:\n
      \          When a single incoming POLICY_DATA object arrives from\n           upstream,
      it should be forwarded (copied) to all downstream\n           branches of the
      multicast tree.\n   The same rules apply to unrecognized policies (sub-objects)
      within\n   the POLICY_DATA object. However, since this can only occur in a\n
      \  policy-capable node, it is the responsibility of the PDP and not\n   RSVP.\n"
    title: 4.2 Default Handling for PIN nodes
  - contents:
    - "4.3 Error Signaling\n   Policy errors are reported by either ResvErr or PathErr
      messages with\n   a policy failure error code in the ERROR_SPEC object. Policy
      error\n   message must include a POLICY_DATA object; the object contains\n   details
      of the error type and reason in a P-Type specific format (See\n   Section 3.3).\n
      \  If a multicast reservation fails due to policy reasons, RSVP should\n   not
      attempt to discover which reservation caused the failure (as it\n   would do
      for Blockade State). Instead, it should attempt to deliver\n   the policy ResvErr
      to ALL downstream hops, and have the PDP (or LDP)\n   decide where messages
      should be sent. This mechanism allows the PDP\n   to limit the error distribution
      by deciding which \"culprit\" next-hops\n   should be informed. It also allows
      the PDP to prevent further\n   distribution of ResvErr or PathErr messages by
      performing local\n   repair (e.g. substituting the failed POLICY_DATA object
      with a\n   different one).\n   Error codes are described in Appendix Appendix
      A.\n"
    title: 4.3 Error Signaling
  title: 4  Processing Rules
- contents:
  - "5  IANA Considerations\n   RSVP Policy Elements (P-Types)\n   Following the policies
    outlined in [IANA-CONSIDERATIONS],numbers\n   0-49151 are allocated as standard
    policy elements by IETF Consensus\n   action, numbers in the range 49152-53247
    are allocated as vendor\n   specific (one per vendor) by First Come First Serve,
    and numbers\n   53248-65535 are reserved for private use and are not assigned
    by\n   IANA.\n"
  title: 5  IANA Considerations
- contents:
  - "6  Security Considerations\n   This memo describes the use of POLICY_DATA objects
    to carry policy-\n   related information between RSVP nodes. Two security mechanisms
    can\n   be optionally used to ensure the integrity of the carried\n   information.
    The first mechanism relies on RSVP integrity [MD5] to\n   provide a chain of trust
    when all RSVP nodes are policy capable. The\n   second mechanism relies on the
    INTEGRITY object within the\n   POLICY_DATA object to guarantee integrity between
    non-neighboring\n   RSVP PEPs (see Sections 2 and 3.2).\n"
  title: 6  Security Considerations
- contents:
  - "7  References\n   [RAP]                 Yavatkar, R., Pendarakis, D. and R. Guerin,
    \"A\n                         Framework for Policy Based Admission Control\",\n
    \                        RFC 2753, January 2000.\n   [COPS]                Boyle,
    J., Cohen, R., Durham, D., Herzog, S.,\n                         Raja, R. and
    A. Sastry, \"The COPS (Common Open\n                         Policy Service) Protocol\",
    RFC 2748, January\n                         2000.\n   [COPS-RSVP]           Boyle,
    J., Cohen, R., Durham, D., Herzog, S.,\n                         Raja, R. and
    A. Sastry, \"COPS Usage for RSVP\",\n                         RFC 2749, January
    2000.\n   [RSVP]                Braden, R., Ed., Zhang, L., Berson, S., Herzog,\n
    \                        S. and S. Jamin, \"Resource ReSerVation Protocol\n                         (RSVP)
    - Functional Specification\", RFC 2205,\n                         September 1997.\n
    \  [MD5]                 Baker, F., Lindell B. and M. Talwar, \"RSVP\n                         Cryptographic
    Authentication\", RFC 2747,\n                         January 2000.\n   [IANA-CONSIDERATIONS]
    Alvestrand, H. and T. Narten, \"Guidelines for\n                         Writing
    an IANA Considerations Section in\n                         RFCs\", BCP 26, RFC
    2434, October 1998.\n"
  title: 7  References
- contents:
  - "8  Acknowledgments\n   This document incorporates inputs from Lou Berger, Bob
    Braden,\n   Deborah Estrin, Roch Guerin, Timothy O'Malley, Dimitrios Pendarakis,\n
    \  Raju Rajan, Scott Shenker, Andrew Smith, Raj Yavatkar, and many\n   others.\n"
  title: 8  Acknowledgments
- contents:
  - "9  Author Information\n   Shai Herzog\n   IPHighway, Inc.\n   55 New York Avenue\n
    \  Framingham, MA 01701\n   Phone: (508) 620-1141\n   EMail: herzog@iphighway.com\n"
  title: 9  Author Information
- contents:
  - "Appendix A: Policy Error Codes\n   This Appendix extends the list of error codes
    described in Appendix B\n   of [RSVP].\n   Note that Policy Element specific errors
    are reported as described in\n   Section 4.3 and cannot be reported through RSVP
    (using this\n   mechanism). However, this mechanism provides a simple, less secure\n
    \  mechanism for reporting generic policy errors. Most likely the two\n   would
    be used in concert such that a generic error code is provided\n   by RSVP, while
    Policy Element specific errors are encapsulated in a\n   return POLICY_DATA object
    (as in Section 4.3).\n   ERROR_SPEC class = 6\n   Error Code = 02: Policy Control
    failure\n   Error Value: 16 bit\n   0 = ERR_INFO    : Information reporting\n
    \  1 = ERR_WARN    : Warning\n   2 = ERR_UNKNOWN : Reason unknown\n   3 = ERR_REJECT
    \ : Generic Policy Rejection\n   4 = ERR_EXCEED  : Quota or Accounting violation\n
    \  5 = ERR_PREEMPT : Flow was preempted\n   6 = ERR_EXPIRED : Previously installed
    policy expired (not\n   refreshed)\n   7 = ERR_REPLACED: Previous policy data
    was replaced & caused\n   rejection\n   8 = ERR_MERGE   : Policies could not be
    merged (multicast)\n   9 = ERR_PDP     : PDP down or non functioning\n   10= ERR_SERVER
    \ : Third Party Server (e.g., Kerberos) unavailable\n   11= ERR_PD_SYNTX: POLICY_DATA
    object has bad syntax\n   12= ERR_PD_INTGR: POLICY_DATA object failed Integrity
    Check\n   13= ERR_PE_BAD  : POLICY_ELEMENT object has bad syntax\n   14= ERR_PD_MISS
    : Mandatory PE Missing (Empty PE is in the PD\n   object)\n   15= ERR_NO_RSC  :
    PEP Out of resources to handle policies.\n   16= ERR_RSVP    : PDP encountered
    bad RSVP objects or syntax\n   17= ERR_SERVICE : Service type was rejected\n   18=
    ERR_STYLE   : Reservation Style was rejected\n   19= ERR_FL_SPEC : FlowSpec was
    rejected (too large)\n   Values between 2^15 and 2^16-1 can be used for site and/or
    vendor\n   error values.\n"
  title: 'Appendix A: Policy Error Codes'
- contents:
  - "Appendix B: INTEGRITY computation for POLICY_DATA objects\n   Computation of
    the INTEGRITY option is based on the rules set forth\n   in [MD5], with the following
    modifications:\n   Section 4.1:\n   Rather than computing digest for an RSVP message,
    a digest is\n   computed for a POLICY_DATA object in the following manner:\n   (1)
    \ The INTEGRITY object is inserted in the appropriate place in\n        the POLICY_DATA
    object, and its location in the message is\n        remembered for later use.\n
    \  (2)  The PDP, at its discretion, and based on destination PEP/PDP\n        or
    other criteria, selects an Authentication Key and the hash\n        algorithm
    to be used.\n   (3)  A copy of RSVP SESSION object is temporarily appended to
    the\n        end of the PD object (for the computation purposes only,\n        without
    changing the length of the POLICY_DATA object). The\n        flags field of the
    SESSION object is set to 0. This\n        concatenation is considered as the message
    for which a digest\n        is to be computed.\n   (4)  The rest of the steps
    in Section 4.1 ((4)..(9)) remain\n        unchanged when computed over the concatenated
    message.\n   Note: When the computation is complete, the SESSION object is ignored\n
    \  and is not part of the POLICY_DATA object.\n   Other Provisions:\n   The processing
    of a received POLICY_DATA object as well as a\n   challenge-response INTEGRITY
    object inside a POLICY_DATA object is\n   performed in the manner described in
    [MD5]. This processing is\n   subject to the modified computation algorithm as
    described in the\n   beginning of this appendix (for Section 4.1 of [MD5]).\n"
  title: 'Appendix B: INTEGRITY computation for POLICY_DATA objects'
- contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2000).  All
    Rights Reserved.\n   This document and translations of it may be copied and furnished
    to\n   others, and derivative works that comment on or otherwise explain it\n
    \  or assist in its implementation may be prepared, copied, published\n   and
    distributed, in whole or in part, without restriction of any\n   kind, provided
    that the above copyright notice and this paragraph are\n   included on all such
    copies and derivative works.  However, this\n   document itself may not be modified
    in any way, such as by removing\n   the copyright notice or references to the
    Internet Society or other\n   Internet organizations, except as needed for the
    purpose of\n   developing Internet standards in which case the procedures for\n
    \  copyrights defined in the Internet Standards process must be\n   followed,
    or as required to translate it into languages other than\n   English.\n   The
    limited permissions granted above are perpetual and will not be\n   revoked by
    the Internet Society or its successors or assigns.\n   This document and the information
    contained herein is provided on an\n   \"AS IS\" basis and THE INTERNET SOCIETY
    AND THE INTERNET ENGINEERING\n   TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS
    OR IMPLIED, INCLUDING\n   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE
    INFORMATION\n   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES
    OF\n   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided
    by the\n   Internet Society.\n"
  title: Acknowledgement
