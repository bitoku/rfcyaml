Abstract This document specifies the conventions for using the Hierarchical Signature System (HSS) / Leighton Micali Signature (LMS) hash based signature algorithm with the Cryptographic Message Syntax (CMS).
In addition, the algorithm identifier and public key syntax are provided.
The HSS/LMS algorithm is one form of hash based digital signature; it is described in RFC 8554.
This document specifies the conventions for using the Hierarchical Signature System (HSS) / Leighton Micali Signature (LMS) hash based signature algorithm with the Cryptographic Message Syntax (CMS) [CMS] signed data content type.
The LMS system provides a one time digital signature that is a variant of Merkle Tree Signatures (MTS).
The HSS is built on top of the LMS system to efficiently scale for a larger numbers of signatures.
The HSS/LMS algorithm is one form of hash  based digital signature, and it is described in [HASHSIG].
The HSS/ LMS signature algorithm can only be used for a fixed number of signing operations with a given private key, and the number of signing operations depends upon the size of the tree.
The HSS/LMS signature algorithm uses small public keys, and it has low computational cost; however, the signatures are quite large.
The HSS/LMS private key can be very small when the signer is willing to perform additional computation at signing time; alternatively, the private key can consume additional memory and provide a faster signing time.
The HSS/LMS signatures [HASHSIG] are currently defined to exclusively use SHA 256 [SHS].
ASN.1 CMS values are generated using ASN.1 [ASN1 B], using the Basic Encoding Rules (BER) and the Distinguished Encoding Rules (DER) [ASN1 E].
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in BCP 14
when, and only when, they appear in all capitals, as shown here.
Motivation Recent advances in cryptanalysis [BH2013] and progress in the development of quantum computers [NAS2019] pose a threat to widely deployed digital signature algorithms.
As a result, there is a need to prepare for a day when cryptosystems such as RSA and DSA that depend on discrete logarithms and factoring cannot be depended upon.
If large scale quantum computers are ever built, these computers will be able to break many of the public key cryptosystems currently in use.
A post quantum cryptosystem [PQC] is a system that is secure against quantum computers that have more than a trivial number of quantum bits (qubits).
It is open to conjecture when it will be feasible to build such computers; however, RSA, DSA, Elliptic Curve Digital Signature Algorithm (ECDSA), and Edwards curve Digital Signature Algorithm (EdDSA) are all vulnerable if large scale quantum computers are ever developed.
Since the HSS/LMS signature algorithm does not depend on the difficulty of discrete logarithms or factoring, the HSS/LMS signature algorithm is considered to be post quantum secure.
One use of post  quantum secure signatures is the protection of software updates, perhaps using the format described in [FWPROT], to enable deployment of software that implements new cryptosystems.
Based Signature Algorithm Overview Merkle Tree Signatures (MTS) are a method for signing a large but fixed number of messages.
An MTS system depends on a one time signature method and a collision resistant hash function.
This specification makes use of the hash based algorithm specified in [HASHSIG], which is the Leighton and Micali adaptation [LM] of the original Lamport Diffie Winternitz Merkle one time signature system [M1979]
As implied by the name, the hash based signature algorithm depends on a collision resistant hash function.
The hash based signature algorithm specified in [HASHSIG]
uses only the SHA 256 one way hash function [SHS], but it establishes an IANA registry [IANA LMS] to permit the registration of additional one way hash functions in the future.
The MTS system specified in [HASHSIG] uses a hierarchy of trees.
The N time Hierarchical Signature System (HSS) allows subordinate trees to be generated when needed by the signer.
Otherwise, generation of the entire tree might take weeks or longer.
An HSS signature as specified in [HASHSIG] carries the number of signed public keys (Nspk), followed by that number of signed public keys, followed by the LMS signature as described in Section 2.2.
The public key for the topmost LMS tree is the public key of the HSS system.
The LMS private key in the parent tree signs the LMS public key in the child tree, and the LMS private key in the bottom most tree signs the actual message.
The signature over the public key and the signature over the actual message are LMS signatures as described in Section 2.2.
The elements of the HSS signature value for a standalone tree (a top tree with no children) can be summarized as: u32str(0)
where, u32str() and    are used as defined in [HASHSIG].
Note that Nspk is the number of levels in the hierarchy of trees
Each tree in the system specified in [HASHSIG] uses the Leighton  Micali Signature (LMS) system.
LMS systems have two parameters.
The first parameter is the height of the tree, h, which is the number of levels in the tree minus one.
The [HASHSIG] specification supports five values for this parameter:
h 5, h 10, h 15, h 20, and h 25.
Note that there are 2^h leaves in the tree.
The second parameter, m, is the number of bytes output by the hash function, and it is the amount of data associated with each node in the tree.
The [HASHSIG] specification supports only the SHA 256 hash function [SHS], with m 32.
The [HASHSIG] specification establishes an IANA registry [IANA LMS] to permit the registration of additional hash functions and additional tree sizes in the future.
As specified in [HASHSIG], the LMS public key consists of four elements: the lms algorithm type from the list above, the otstype to identify the Leighton Micali One Time Signature (LM OTS) type as discussed in Section 2.3, the private key identifier (I) as described in Section 5.3 of [HASHSIG], and the m byte string associated with the root node of the tree (T[1]).
As specified in [HASHSIG], an LMS signature consists of four elements: the number of the leaf (q) associated with the LM OTS signature value, an LM OTS signature value as described in Section 2.3, a typecode indicating the particular LMS algorithm, and an array of values that is associated with the path through the tree from the leaf associated with the LM OTS signature value to the root.
The array of values contains the siblings of the nodes on the path from the leaf to the root but does not contain the nodes on the path itself.
The array for a tree with height h will have h values.
The first value is the sibling of the leaf, the next value is the sibling of the parent of the leaf, and so on up the path to the root.
The four elements of the LMS signature value can be summarized as: u32str(q)
One Time Signature (LM OTS)
Algorithm Merkle Tree Signatures (MTS) depend on a one time signature method, and [HASHSIG] specifies the use of the LM OTS, which has five parameters:
The length in bytes of the hash function output.
[HASHSIG] supports only SHA 256 [SHS], with n 32.
A preimage resistant hash function that accepts byte strings of any length and returns an n byte string.
The width in bits of the Winternitz coefficients.
[HASHSIG] supports four values for this parameter:
w 1, w 2, w 4, and w 8.
The number of n byte string elements that make up the LM OTS signature value.
The number of bits that are left shifted in the final step of the checksum function, which is defined in Section 4.4 of [HASHSIG].
The values of p and ls are dependent on the choices of the parameters n and w, as described in Appendix B of [HASHSIG].
N32 W4    LMOTS SHA256 N32 W8
The [HASHSIG] specification establishes an IANA registry [IANA LMS] to permit the registration of additional variants in the future.
Signing involves the generation of C, an n byte random value.
17 } When this object identifier is used for an HSS/LMS signature, the AlgorithmIdentifier parameters field MUST be absent (that is, the parameters are not present, and the parameters are not set to NULL).
The signature value is a large OCTET STRING, as described in Section 2 of this document.
The signature format is designed for easy parsing.
The HSS, LMS, and LM OTS components of the signature value each include a counter and a typecode that indirectly provide all of the information that is needed to parse the value during signature validation.
The signature value identifies the hash function used in the HSS/LMS tree.
[HASHSIG] uses only the SHA 256 hash function [SHS], but it establishes an IANA registry [IANA LMS] to permit the registration of additional hash functions in the future.
HSS/LMS Public Key Identifier The AlgorithmIdentifier for an HSS/LMS public key uses the id alg  hss lms hashsig object identifier, and the parameters field MUST be absent.
When this AlgorithmIdentifier appears in the SubjectPublicKeyInfo field of an X.509 certificate [RFC5280], the certificate key usage extension MAY contain digitalSignature, nonRepudiation, keyCertSign, and cRLSign; however, it MUST NOT contain other values.
KEY HSS LMS HashSig PublicKey PARAMS ARE absent CERT KEY USAGE { digitalSignature, nonRepudiation,
This synonym is based on the terminology used in an early draft version of the document that became [HASHSIG].
The public key value is an OCTET STRING.
Like the signature format, it is designed for easy parsing.
The value is the number of levels in the public key, L, followed by the LMS public key.
The HSS/LMS public key value can be described as: u32str(L)
lms public key Note that the public key for the topmost LMS tree is the public key of the HSS system.
When L 1, the HSS system is a single tree.
As specified in [CMS], the digital signature is produced from the message digest and the signer's private key.
The signature is computed over different values depending on whether signed attributes are absent or present.
When signed attributes are absent, the HSS/LMS signature is computed over the content.
When signed attributes are present, a hash is computed over the content using the same hash function that is used in the HSS/LMS tree, then a message digest attribute is constructed with the hash of the content, and then the HSS/LMS signature is computed over the DER encoded set of signed attributes (which MUST include a content type attribute and a message digest attribute).
In summary: IF (signed attributes are absent)
THEN HSS LMS Sign(content) ELSE message digest attribute   Hash(content); HSS LMS Sign(DER(SignedAttributes))
When using [HASHSIG], the fields in the SignerInfo are used as follows:
digestAlgorithm MUST contain the one way hash function used in the HSS/LMS tree.
In [HASHSIG], SHA 256 is the only supported hash function, but other hash functions might be registered in the future.
For convenience, the AlgorithmIdentifier for SHA 256 from [PKIXASN1] is repeated here: mda
PARAMS TYPE NULL ARE preferredAbsent }
signature contains the single HSS signature value resulting from the signing operation as specified in [HASHSIG].
Security Considerations Implementations MUST protect the private keys.
Compromise of the private keys may result in the ability to forge signatures.
Along with the private key, the implementation MUST keep track of which leaf nodes in the tree have been used.
Loss of integrity of this tracking data can cause a one time key to be used more than once.
As a result, when a private key and the tracking data are stored on non  volatile media or in a virtual machine environment, failed writes, virtual machine snapshotting or cloning, and other operational concerns must be considered to ensure confidentiality and integrity.
When generating an LMS key pair, an implementation MUST generate each key pair independently of all other key pairs in the HSS tree.
An implementation MUST ensure that an LM OTS private key is used to generate a signature only one time and ensure that it cannot be used for any other purpose.
The generation of private keys relies on random numbers.
The use of inadequate pseudorandom number generators (PRNGs) to generate these values can result in little or no security.
An attacker may find it much easier to reproduce the PRNG environment that produced the keys, searching the resulting small set of possibilities, rather than brute force searching the whole key space.
The generation of quality random numbers is difficult, and [RFC4086] offers important guidance in this area.
The generation of hash based signatures also depends on random numbers.
While the consequences of an inadequate pseudorandom number generator (PRNG) to generate these values is much less severe than in the generation of private keys, the guidance in [RFC4086] remains important.
When computing signatures, the same hash function SHOULD be used to compute the message digest of the content and the signed attributes, if they are present.
In the "SMI Security for S/MIME Module Identifier (1.2.840.113549.1.9.16.0)" registry, IANA has updated the reference for value 64 to point to this document.
In the "SMI Security for S/MIME Algorithms (1.2.840.113549.1.9.16.3)" registry, IANA has updated the description for value 17 to "id alg  hss lms hashsig" and updated the reference to point to this document.
IANA has also added the following note to the "SMI Security for S/MIME Algorithms (1.2.840.113549.1.9.16.3)" registry: Value 17, "id alg hss lms hashsig", is also referred to as "id  alg mts hashsig".
MTS HashSig 2013 { iso(1) member body(2) us(840
CAPS FROM AlgorithmInformation 2009    RFC 5911
[CMSASN1] { iso(1) identified organization(3)
HSS LMS HashSig SIGNATURE ALGORITHM ::
{ IDENTIFIER id alg hss lms hashsig PARAMS ARE absent PUBLIC KEYS { pk HSS LMS HashSig } SMIME CAPS {
ARE absent CERT KEY USAGE { digitalSignature, nonRepudiation,
} HSS LMS HashSig PublicKey ::
Expand the signature algorithm set used by CMS [CMSASN1U]
Expand the S/MIME capabilities set used by CMS [CMSASN1]   SMimeCaps SMIME
