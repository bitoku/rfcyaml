- title: __initial_text__
  contents:
  - '   Advanced Encryption Standard (AES) Key Wrap with Padding Algorithm

    '
- title: Abstract
  contents:
  - "Abstract\n   This document specifies a padding convention for use with the AES\
    \ Key\n   Wrap algorithm specified in RFC 3394.  This convention eliminates the\n\
    \   requirement that the length of the key to be wrapped be a multiple of\n  \
    \ 64 bits, allowing a key of any practical length to be wrapped.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright and License Notice
  contents:
  - "Copyright and License Notice\n   Copyright (c) 2009 IETF Trust and the persons\
    \ identified as the\n   document authors.  All rights reserved.\n   This document\
    \ is subject to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF\
    \ Documents\n   (http://trustee.ietf.org/license-info) in effect on the date of\n\
    \   publication of this document.  Please review these documents\n   carefully,\
    \ as they describe your rights and restrictions with respect\n   to this document.\
    \  Code Components extracted from this document must\n   include Simplified BSD\
    \ License text as described in Section 4.e of\n   the Trust Legal Provisions and\
    \ are provided without warranty as\n   described in the BSD License.\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Management of cryptographic keys often leads to situations\
    \ where one\n   symmetric key is used to encrypt and integrity-protect another\
    \ key,\n   which can be either a symmetric key or an asymmetric key.  The\n  \
    \ operation is often called key wrapping.\n   This document specifies an extension\
    \ of the Advanced Encryption\n   Standard (AES) Key Wrap algorithm [AES-KW1, AES-KW2].\
    \  Without this\n   extension, the input to the AES Key Wrap algorithm, called\
    \ the key\n   data, must be a sequence of two or more 64-bit blocks.\n   The AES\
    \ Key Wrap with Padding algorithm can be used to wrap a key of\n   any practical\
    \ size with an AES key.  The AES key-encryption key (KEK)\n   must be 128, 192,\
    \ or 256 bits.  The input key data may be as short as\n   one octet, which will\
    \ result in an output of two 64-bit blocks (or 16\n   octets).  Although the AES\
    \ Key Wrap algorithm does not place a\n   maximum bound on the size of the key\
    \ data that can be wrapped, this\n   extension does so.  The use of a 32-bit fixed\
    \ field to carry the\n   octet length of the key data bounds the size of the input\
    \ at 2^32\n   octets.  Most systems will have other factors that limit the\n \
    \  practical size of key data to much less than 2^32 octets.\n   A message length\
    \ indicator (MLI) is defined as part of an\n   \"Alternative Initial Value\" in\
    \ keeping with the statement in Section\n   2.2.3.2 of [AES-KW1], which says:\n\
    \      Also, if the key data is not just an AES key, it may not always be\n  \
    \    a multiple of 64 bits.  Alternative definitions of the initial\n      value\
    \ can be used to address such problems.\n"
- title: 2.  Notation and Definitions
  contents:
  - "2.  Notation and Definitions\n   The following notation is used in the algorithm\
    \ descriptions:\n      MSB(j, W)   Return the most significant j bits of W\n \
    \     LSB(j, W)   Return the least significant j bits of W\n      ENC(K, B)  \
    \ AES Encrypt the 128-bit block B using key K\n      DEC(K, B)   AES Decrypt the\
    \ 128-bit block B using key K\n      V1 | V2     Concatenate V1 and V2\n     \
    \ K           The key-encryption key\n      m           The number of octets in\
    \ the key data\n      n           The number of 64-bit blocks in the padded key\
    \ data\n      Q[i]        The ith plaintext octet in the key data\n      P[i]\
    \        The ith 64-bit plaintext block in the padded key data\n      C[i]   \
    \     The ith 64-bit ciphertext data block\n      A           The 64-bit integrity\
    \ check register\n"
- title: 3.  Alternative Initial Value
  contents:
  - "3.  Alternative Initial Value\n   The Alternative Initial Value (AIV) required\
    \ by this specification is\n   a 32-bit constant concatenated to a 32-bit MLI.\
    \  The constant is (in\n   hexadecimal) A65959A6 and occupies the high-order half\
    \ of the AIV.\n   Note that this differs from the high order 32 bits of the default\
    \ IV\n   in Section 2.2.3.1 of [AES-KW1], so there is no ambiguity between the\n\
    \   two.  The 32-bit MLI, which occupies the low-order half of the AIV,\n   is\
    \ an unsigned binary integer equal to the octet length of the\n   plaintext key\
    \ data, in network order -- that is, with the most\n   significant octet first.\
    \  When the MLI is not a multiple of 8, the\n   key data is padded on the right\
    \ with the least number of octets\n   sufficient to make the resulting octet length\
    \ a multiple of 8.  The\n   value of each padding octet shall be 0 (eight binary\
    \ zeros).\n   Notice that for a given number of 64-bit plaintext blocks, there\
    \ are\n   only eight values of MLI that can have that outcome.  For example,\n\
    \   the only MLI values that are valid with four 64-bit plaintext blocks\n   are\
    \ 32 (with no padding octets), 31 (with one padding octet), 30, 29,\n   28, 27,\
    \ 26, and 25 (with seven padding octets).  When the unwrapping\n   process specified\
    \ below yields n 64-bit blocks of output data and an\n   AIV, the eight valid\
    \ values for the MLI are 8*n, (8*n)-1, ..., and\n   (8*n)-7.  Therefore, integrity\
    \ checking of the AIV, which is\n   contained in a 64-bit register called A, requires\
    \ the following\n   steps:\n   1) Check that MSB(32,A) = A65959A6.\n   2) Check\
    \ that 8*(n-1) < LSB(32,A) <= 8*n.  If so, let\n      MLI = LSB(32,A).\n   3)\
    \ Let b = (8*n)-MLI, and then check that the rightmost b octets of\n      the\
    \ output data are zero.\n   If all three checks pass, then the AIV is valid. \
    \ If any of the\n   checks fail, then the AIV is invalid and the unwrapping operation\n\
    \   must return an error.\n"
- title: 4.  Specification of the AES Key Wrap with Padding Algorithm
  contents:
  - "4.  Specification of the AES Key Wrap with Padding Algorithm\n   The AES Key\
    \ Wrap with Padding algorithm consists of a wrapping\n   process and an unwrapping\
    \ process, both based on the AES codebook\n   [AES].  It provides an extension\
    \ to the AES Key Wrap algorithm\n   [AES-KW1, AES-KW2] that eliminates the requirement\
    \ that the length of\n   the key to be wrapped be a multiple of 64 bits.  The\
    \ next two\n   sections specify the wrapping and unwrapping processes, called\
    \ the\n   extended key wrapping process and the extended key unwrapping\n   process,\
    \ respectively.  These names distinguish these processes from\n   the ones specified\
    \ in [AES-KW1] and [AES-KW2].\n"
- title: 4.1.  Extended Key Wrapping Process
  contents:
  - "4.1.  Extended Key Wrapping Process\n   The inputs to the extended key wrapping\
    \ process are the KEK and the\n   plaintext to be wrapped.  The plaintext consists\
    \ of between one and\n   2^32 octets, containing the key data being wrapped. \
    \ The key wrapping\n   process is described below.\n   Inputs:  Plaintext, m octets\
    \ {Q[1], Q[2], ..., Q[m]}, and\n            Key, K (the KEK).\n   Outputs: Ciphertext,\
    \ (n+1) 64-bit values {C[0], C[1], ..., C[n]}.\n   1) Append padding\n      If\
    \ m is not a multiple of 8, pad the plaintext octet string on the\n      right\
    \ with octets {Q[m+1], ..., Q[r]} of zeros, where r is the\n      smallest multiple\
    \ of 8 that is greater than m.  If m is a multiple\n      of 8, then there is\
    \ no padding, and r = m.\n      Set n = r/8, which is the same as CEILING(m/8).\n\
    \      For i = 1, ..., n\n         j = 8*(i-1)\n         P[i] = Q[j+1] | Q[j+2]\
    \ | ... | Q[j+8].\n   2) Wrapping\n      If the padded plaintext contains exactly\
    \ eight octets, then\n      prepend the AIV as defined in Section 3 above to P[1]\
    \ and encrypt\n      the resulting 128-bit block using AES in ECB mode [Modes]\
    \ with key\n      K (the KEK).  In this case, the output is two 64-bit blocks\
    \ C[0]\n      and C[1]:\n         C[0] | C[1] = ENC(K, A | P[1]).\n      Otherwise,\
    \ apply the wrapping process specified in Section 2.2.1\n      of [AES-KW2] to\
    \ the padded plaintext {P[1], ..., P[n]} with K (the\n      KEK) and the AIV as\
    \ defined in Section 3 above as the initial\n      value.  The result is n+1 64-bit\
    \ blocks {C[0], C[1], ..., C[n]}.\n"
- title: 4.2.  Extended Key Unwrapping Process
  contents:
  - "4.2.  Extended Key Unwrapping Process\n   The inputs to the extended key unwrapping\
    \ process are the KEK and\n   (n+1) 64-bit ciphertext blocks consisting of a previously\
    \ wrapped\n   key.  If the ciphertext is a validly wrapped key, then the unwrapping\n\
    \   process returns n 64-bit blocks of padded plaintext, which are then\n   mapped\
    \ in this extension to m octets of decrypted key data, as\n   indicated by the\
    \ MLI embedded in the AIV.\n   Inputs:  Ciphertext, (n+1) 64-bit blocks {C[0],\
    \ C[1], ..., C[n]}, and\n            Key, K (the KEK).\n   Outputs: Plaintext,\
    \ m octets {Q[1], Q[2], ..., Q[m]}, or an error.\n   1) Key unwrapping\n     \
    \ When n is one (n=1), the ciphertext contains exactly two 64-bit\n      blocks\
    \ (C[0] and C[1]), and they are decrypted as a single AES\n      block using AES\
    \ in ECB mode [Modes] with K (the KEK) to recover\n      the AIV and the padded\
    \ plaintext key:\n         A | P[1] = DEC(K, C[0] | C[1]).\n      Otherwise, apply\
    \ Steps 1 and 2 of the unwrapping process specified\n      in Section 2.2.2 of\
    \ [AES-KW2] to the n+1 64-bit ciphertext blocks,\n      {C[0], C[1], ..., C[n]},\
    \ and to the KEK, K.  Define the padded\n      plaintext blocks, {P[1], ..., P[n]},\
    \ as specified in Step 3 of\n      that process, with A[0] as the A value.  Note\
    \ that checking \"If\n      A[0] is an appropriate value\" is slightly delayed\
    \ to Step 2 below\n      since the padded plaintext is needed to perform this\
    \ verification\n      when the AIV is used.\n   2) AIV verification\n      Perform\
    \ the three checks described in Section 3 above on the\n      padded plaintext\
    \ and the A value.  If any of the checks fail, then\n      return an error.\n\
    \   3) Remove padding\n      Let m = the MLI value extracted from A.\n      Let\
    \ P = P[1] | P[2] | ... | P[n].\n      For i = 1, ... , m\n       Q[i] = LSB(8,\
    \ MSB(8*i, P))\n"
- title: 5.  Algorithm Identifiers
  contents:
  - "5.  Algorithm Identifiers\n   Some security protocols employ ASN.1 [X.680] and\
    \ employ algorithm\n   identifiers to name cryptographic algorithms.  To support\
    \ these\n   protocols, the AES Key Wrap with Padding algorithm has been assigned\n\
    \   the following algorithm identifiers, one for each AES KEK size.  The\n   AES\
    \ Key Wrap (without padding) algorithm identifiers are also\n   included here\
    \ for convenience.\n      aes OBJECT IDENTIFIER ::= { joint-iso-itu-t(2) country(16)\n\
    \                us(840) organization(1) gov(101) csor(3)\n                nistAlgorithm(4)\
    \ 1 }\n      id-aes128-wrap     OBJECT IDENTIFIER ::= { aes 5 }\n      id-aes128-wrap-pad\
    \ OBJECT IDENTIFIER ::= { aes 8 }\n      id-aes192-wrap     OBJECT IDENTIFIER\
    \ ::= { aes 25 }\n      id-aes192-wrap-pad OBJECT IDENTIFIER ::= { aes 28 }\n\
    \      id-aes256-wrap     OBJECT IDENTIFIER ::= { aes 45 }\n      id-aes256-wrap-pad\
    \ OBJECT IDENTIFIER ::= { aes 48 }\n   In all cases, the AlgorithmIdentifier parameter\
    \ field MUST be absent.\n"
- title: 6.  Padded Key Wrap Examples
  contents:
  - "6.  Padded Key Wrap Examples\n   The examples in this section were generated\
    \ using the index-based\n   implementation of the AES Key Wrap algorithm along\
    \ with the padding\n   approach specified in Section 4 of this document.  All\
    \ values are\n   shown in hexadecimal.\n   The first example wraps 20 octets of\
    \ key data with a 192-bit KEK.\n      KEK   :  5840df6e29b02af1 ab493b705bf16ea1\
    \ ae8338f4dcc176a8\n      Key   :  c37b7e6492584340 bed1220780894115 5068f738\n\
    \      Wrap  :  138bdeaa9b8fa7fc 61f97742e72248ee 5ae6ae5360d1ae6a\n         \
    \   :  5f54f373fa543b6a\n   The second example wraps 7 octets of key data with\
    \ a 192-bit KEK.\n      KEK   :  5840df6e29b02af1 ab493b705bf16ea1 ae8338f4dcc176a8\n\
    \      Key   :  466f7250617369\n      Wrap  :  afbeb0f07dfbf541 9200f2ccb50bb24f\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   Implementations must protect the key-encryption\
    \ key (KEK).\n   Compromise of the KEK may result in the disclosure of all keys\
    \ that\n   have been wrapped with the KEK, which may lead to the compromise of\n\
    \   all traffic protected with those wrapped keys.\n   The KEK must be at least\
    \ as good as the keying material it is\n   protecting.\n   If the KEK and wrapped\
    \ key are associated with different\n   cryptographic algorithms, the effective\
    \ security provided to data\n   protected with the wrapped key is determined by\
    \ the weaker of the two\n   algorithms.  If, for example, data is encrypted with\
    \ 128-bit AES and\n   that AES key is wrapped with a 256-bit AES key, then at\
    \ most 128 bits\n   of protection is provided to the data.  If, for another example,\
    \ a\n   128-bit AES key is used to wrap a 4096-bit RSA private key, then at\n\
    \   most 128 bits of protection is provided to any data that depends on\n   that\
    \ private key.  Thus, implementers must ensure that key-encryption\n   algorithms\
    \ are at least as strong as other cryptographic algorithms\n   employed in an\
    \ overall system.\n   The AES Key Wrap and the AES Key Wrap with Padding algorithms\
    \ use\n   different constants in the initial value.  The use of different\n  \
    \ values ensures that the recipient of padded key data cannot\n   successfully\
    \ unwrap it as unpadded key data, or vice versa.  This\n   remains true when the\
    \ key data is wrapped using the AES Key Wrap with\n   Padding algorithm but no\
    \ padding is needed.\n   The AES Key Wrap with Padding algorithm provides almost\
    \ the same\n   amount of integrity protection as the AES Key Wrap algorithm.\n\
    \   A previous padding technique was specified for wrapping Hashed\n   Message\
    \ Authentication Code (HMAC) keys with AES [OLD-KW].  The\n   technique in this\
    \ document is more general; the technique in this\n   document is not limited\
    \ to wrapping HMAC keys.\n   In the design of some high assurance cryptographic\
    \ modules, it is\n   desirable to segregate cryptographic keying material from\
    \ other data.\n   The use of a specific cryptographic mechanism solely for the\n\
    \   protection of cryptographic keying material can assist in this goal.\n   The\
    \ AES Key Wrap and the AES Key Wrap with Padding are such\n   mechanisms.  System\
    \ designers should not use these algorithms to\n   encrypt anything other than\
    \ cryptographic keying material.\n"
- title: 8.  References
  contents:
  - '8.  References

    '
- title: 8.1.  Normative References
  contents:
  - "8.1.  Normative References\n   [AES]     National Institute of Standards and\
    \ Technology, FIPS Pub\n             197: Advanced Encryption Standard (AES),\
    \ 26 November 2001.\n   [AES-KW1] National Institute of Standards and Technology,\
    \ AES Key\n             Wrap Specification, 17 November 2001.\n             http://csrc.nist.gov/groups/ST/toolkit/documents/kms/\n\
    \             AES_key_wrap.pdf\n   [AES-KW2] Schaad, J. and R. Housley, \"Advanced\
    \ Encryption Standard\n             (AES) Key Wrap Algorithm\", RFC 3394, September\
    \ 2002.\n   [Modes]   Dworkin, M., \"Recommendation for Block Cipher Modes of\n\
    \             Operation -- Methods and Techniques\",  NIST Special\n         \
    \    Publication 800-38A, 2001.\n   [X.680]   ITU-T Recommendation X.680 (2002)\
    \ | ISO/IEC 8824-1:2002,\n             Information technology - Abstract Syntax\
    \ Notation One\n             (ASN.1):  Specification of basic notation.\n"
- title: 8.2.  Informative References
  contents:
  - "8.2.  Informative References\n   [AES-CMS] Schaad, J., \"Use of the Advanced\
    \ Encryption Standard (AES)\n             Encryption Algorithm in Cryptographic\
    \ Message Syntax\n             (CMS)\", RFC 3565, July 2003.\n   [CMS-ASN] Schaad,\
    \ J. and P. Hoffman, \"New ASN.1 Modules for CMS and\n             S/MIME\", Work\
    \ in Progress, August 2009.\n   [OLD-KW]  Schaad, J. and R. Housley, \"Wrapping\
    \ a Hashed Message\n             Authentication Code (HMAC) key with a Triple-Data\n\
    \             Encryption Standard (DES) Key or an Advanced Encryption\n      \
    \       Standard (AES) Key\", RFC 3537, May 2003.\n   [X.681]   ITU-T Recommendation\
    \ X.681 (2002) | ISO/IEC 8824-2:2002,\n             Information Technology - Abstract\
    \ Syntax Notation One:\n             Information Object Specification.\n   [X.682]\
    \   ITU-T Recommendation X.682 (2002) | ISO/IEC 8824-3:2002,\n             Information\
    \ Technology - Abstract Syntax Notation One:\n             Constraint Specification.\n\
    \   [X.683]   ITU-T Recommendation X.683 (2002) | ISO/IEC 8824-4:2002,\n     \
    \        Information Technology - Abstract Syntax Notation One:\n            \
    \ Parameterization of ASN.1 Specifications.\n"
- title: 9.  Acknowledgments
  contents:
  - "9.  Acknowledgments\n   Paul Timmel should be credited with the MLI and padding\
    \ technique\n   described in this document.\n"
- title: Appendix A.  ASN.1 Modules
  contents:
  - "Appendix A.  ASN.1 Modules\n   This appendix includes two ASN.1 modules.  The\
    \ first one makes use of\n   the 1988 syntax, and the second one makes use of\
    \ the 2002 ASN.1\n   syntax.\n   Appendix A.1 provides the normative ASN.1 definitions\
    \ for the\n   algorithm identifiers included in this specification using ASN.1\
    \ as\n   defined in [X.680] using the 1988 ASN.1 syntax.\n   Appendix A.2 provides\
    \ informative ASN.1 definitions for the algorithm\n   identifiers included in\
    \ this specification using ASN.1 as defined in\n   [X.680], [X.681], [X.682],\
    \ and [X.683] using the 2002 ASN.1 syntax.\n   This appendix contains the same\
    \ information as Appendix A.1; however,\n   Appendix A.1 takes precedence in case\
    \ of conflict.  The content\n   encryption and key wrap algorithm objects are\
    \ defined in [CMS-ASN].\n   The id-aes128-wrap, id-aes192-wrap, and id-aes256-wrap\
    \ algorithm\n   identifiers are defined in [AES-CMS].\n"
- title: A.1.  1988 ASN.1 Module
  contents:
  - "A.1.  1988 ASN.1 Module\n   AESKeyWrapWithPad-88 { iso(1) member-body(2) us(840)\
    \ rsadsi(113549)\n     pkcs(1) pkcs-9(9) smime(16) modules(0) 47 }\n   DEFINITIONS\
    \ IMPLICIT TAGS ::=\n   BEGIN\n   -- EXPORTS ALL --\n   -- IMPORTS NONE --\n \
    \  -- AES information object identifiers --\n   aes OBJECT IDENTIFIER ::= {\n\
    \     joint-iso-itu-t(2) country(16) us(840) organization(1) gov(101)\n     csor(3)\
    \ nistAlgorithms(4) 1 }\n   -- AES Key Wrap With Padding Algorithm Identifiers\
    \ are to be used\n   -- with the Parameter field absent\n   id-aes128-wrap-pad\
    \ OBJECT IDENTIFIER ::= { aes 8 }\n   id-aes192-wrap-pad OBJECT IDENTIFIER ::=\
    \ { aes 28 }\n   id-aes256-wrap-pad OBJECT IDENTIFIER ::= { aes 48 }\n   END\n"
- title: A.2.  2002 ASN.1 Module
  contents:
  - "A.2.  2002 ASN.1 Module\n   AESKeyWrapWithPad-02 { iso(1) member-body(2) us(840)\
    \ rsadsi(113549)\n     pkcs(1) pkcs-9(9) smime(16) modules(0) 48 }\n   DEFINITIONS\
    \ IMPLICIT TAGS ::=\n   BEGIN\n   -- EXPORTS ALL --\n   IMPORTS\n     AlgorithmIdentifier{},\
    \ CONTENT-ENCRYPTION, KEY-WRAP, SMIME-CAPS\n     FROM AlgorithmInformation-2009\
    \  -- [CMS-ASN]\n       { iso(1) identified-organization(3) dod(6) internet(1)\n\
    \         security(5) mechanisms(5) pkix(7) id-mod(0)\n         id-mod-algorithmInformation-02(58)\
    \ };\n   AES-ContentEncryption CONTENT-ENCRYPTION ::= {\n     cea-aes128-wrap-pad\
    \ |\n     cea-aes192-wrap-pad |\n     cea-aes256-wrap-pad,\n     ... }\n   AES-KeyWrap\
    \ KEY-WRAP ::= {\n     kwa-aes128-wrap-pad |\n     kwa-aes192-wrap-pad |\n   \
    \  kwa-aes256-wrap-pad,\n     ... }\n   SMimeCaps SMIME-CAPS ::= {\n     cea-aes128-wrap-pad.&smimeCaps\
    \ |\n     cea-aes192-wrap-pad.&smimeCaps |\n     cea-aes256-wrap-pad.&smimeCaps\
    \ |\n     kwa-aes128-wrap-pad.&smimeCaps |\n     kwa-aes192-wrap-pad.&smimeCaps\
    \ |\n     kwa-aes256-wrap-pad.&smimeCaps,\n     ... }\n   -- AES object identifier\n\
    \   aes OBJECT IDENTIFIER ::= {\n     joint-iso-itu-t(2) country(16) us(840) organization(1)\n\
    \     gov(101) csor(3) nistAlgorithms(4) 1 }\n   -- Content Encryption Algorithms\n\
    \   cea-aes128-wrap-pad CONTENT-ENCRYPTION ::= {\n     IDENTIFIER id-aes128-wrap-pad\n\
    \     PARAMS ARE absent\n     SMIME-CAPS { IDENTIFIED BY id-aes128-wrap-pad }\
    \ }\n   cea-aes192-wrap-pad CONTENT-ENCRYPTION ::= {\n     IDENTIFIER id-aes192-wrap-pad\n\
    \     PARAMS ARE absent\n     SMIME-CAPS { IDENTIFIED BY id-aes192-wrap-pad }\
    \ }\n   cea-aes256-wrap-pad CONTENT-ENCRYPTION ::= {\n     IDENTIFIER id-aes256-wrap-pad\n\
    \     PARAMS ARE absent\n     SMIME-CAPS { IDENTIFIED BY id-aes256-wrap-pad }\
    \ }\n   -- Key Wrap Algorithms\n   kwa-aes128-wrap-pad KEY-WRAP ::= {\n     IDENTIFIER\
    \ id-aes128-wrap-pad\n     PARAMS ARE absent\n     SMIME-CAPS { IDENTIFIED BY\
    \ id-aes128-wrap-pad } }\n   id-aes128-wrap-pad OBJECT IDENTIFIER ::= { aes 8\
    \ }\n   kwa-aes192-wrap-pad KEY-WRAP ::= {\n     IDENTIFIER id-aes192-wrap-pad\n\
    \     PARAMS ARE absent\n     SMIME-CAPS { IDENTIFIED BY id-aes192-wrap-pad }\
    \ }\n   id-aes192-wrap-pad OBJECT IDENTIFIER ::= { aes 28 }\n   kwa-aes256-wrap-pad\
    \ KEY-WRAP ::= {\n     IDENTIFIER id-aes256-wrap-pad\n     PARAMS ARE absent\n\
    \     SMIME-CAPS { IDENTIFIED BY id-aes256-wrap-pad } }\n   id-aes256-wrap-pad\
    \ OBJECT IDENTIFIER ::= { aes 48 }\n   END\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Russell Housley\n   Vigil Security, LLC\n   918 Spring\
    \ Knoll Drive\n   Herndon, VA 20170\n   USA\n   EMail: housley@vigilsec.com\n\
    \   Morris Dworkin\n   National Institute of Standards and Technology\n   100\
    \ Bureau Drive, Mail Stop 8930\n   Gaithersburg, MD 20899-8930\n   USA\n   EMail:\
    \ dworkin@nist.gov\n"
