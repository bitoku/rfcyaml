- title: __initial_text__
  contents:
  - '               Guidelines for Defining Packet Timestamps

    '
- title: Abstract
  contents:
  - "Abstract\n   Various network protocols make use of binary-encoded timestamps\
    \ that\n   are incorporated in the protocol packet format, referred to as\n  \
    \ \"packet timestamps\" for short.  This document specifies guidelines\n   for\
    \ defining packet timestamp formats in networking protocols at\n   various layers.\
    \  It also presents three recommended timestamp\n   formats.  The target audience\
    \ of this document includes network\n   protocol designers.  It is expected that\
    \ a new network protocol that\n   requires a packet timestamp will, in most cases,\
    \ use one of the\n   recommended timestamp formats.  If none of the recommended\
    \ formats\n   fits the protocol requirements, the new protocol specification should\n\
    \   specify the format of the packet timestamp according to the\n   guidelines\
    \ in this document.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are candidates for any level of Internet\n\
    \   Standard; see Section 2 of RFC 7841.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   https://www.rfc-editor.org/info/rfc8877.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2020 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (https://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction\n     1.1.  Background\n     1.2.  Scope\
    \ of this Document\n     1.3.  How to Use This Document\n   2.  Terminology\n\
    \     2.1.  Requirements Language\n     2.2.  Abbreviations\n     2.3.  Terms\
    \ Used in This Document\n   3.  Packet Timestamp Specification Template\n   4.\
    \  Recommended Timestamp Formats\n     4.1.  Using a Recommended Timestamp Format\n\
    \     4.2.  NTP Timestamp Formats\n       4.2.1.  NTP 64-Bit Timestamp Format\n\
    \       4.2.2.  NTP 32-Bit Timestamp Format\n     4.3.  The PTP Truncated Timestamp\
    \ Format\n   5.  Synchronization Aspects\n   6.  Timestamp Use Cases\n     6.1.\
    \  Example 1\n     6.2.  Example 2\n   7.  Packet Timestamp Control Field\n  \
    \   7.1.  High-Level Control Field Requirements\n   8.  IANA Considerations\n\
    \   9.  Security Considerations\n   10. References\n     10.1.  Normative References\n\
    \     10.2.  Informative References\n   Acknowledgments\n   Authors' Addresses\n"
- title: 1.  Introduction
  contents:
  - '1.  Introduction

    '
- title: 1.1.  Background
  contents:
  - "1.1.  Background\n   Timestamps are widely used in network protocols for various\
    \ purposes:\n   for logging or reporting the time of an event, for messages in\
    \ delay\n   measurement and clock synchronization protocols, and as part of a\n\
    \   value that is unlikely to repeat (nonce) in security protocols.\n   Timestamps\
    \ are represented in the RFC series in one of two forms:\n   text-based timestamps\
    \ and packet timestamps.  Text-based timestamps\n   [RFC3339] are represented\
    \ as user-friendly strings and are widely\n   used in the RFC series -- for example,\
    \ in information objects and\n   data models, e.g., [RFC5646], [RFC6991], and\
    \ [RFC7493].  Packet\n   timestamps, on the other hand, are represented by a compact\
    \ binary\n   field that has a fixed size and are not intended to have a human-\n\
    \   friendly format.  Packet timestamps are also very common in the RFC\n   series\
    \ and are used, for example, for measuring delay and for\n   synchronizing clocks,\
    \ e.g., [RFC5905], [RFC4656], and [RFC7323].\n"
- title: 1.2.  Scope of this Document
  contents:
  - "1.2.  Scope of this Document\n   This document presents guidelines for defining\
    \ a packet timestamp\n   format in network protocols.  Three recommended timestamp\
    \ formats are\n   presented.  It is expected that a new network protocol that\
    \ requires\n   a packet timestamp will, in most cases, use one of these recommended\n\
    \   timestamp formats.  In some cases, a network protocol may use more\n   than\
    \ one of the recommended timestamp formats.  However, if none of\n   the recommended\
    \ formats fits the protocol requirements, the new\n   protocol specification should\
    \ specify the format of the packet\n   timestamp according to the guidelines in\
    \ this document.\n   The rationale behind defining a relatively small set of recommended\n\
    \   formats is that it enables significant reuse; network protocols can\n   typically\
    \ reuse the timestamp format of the Network Time Protocol\n   (NTP) [RFC5905]\
    \ or the Precision Time Protocol (PTP) [IEEE1588],\n   allowing a straightforward\
    \ integration with an NTP- or PTP-based\n   timer.  Moreover, since accurate timestamping\
    \ mechanisms are often\n   implemented in hardware, a new network protocol that\
    \ reuses an\n   existing timestamp format can be quickly deployed using existing\n\
    \   hardware timestamping capabilities.\n"
- title: 1.3.  How to Use This Document
  contents:
  - "1.3.  How to Use This Document\n   This document is intended as a reference for\
    \ network protocol\n   designers.  When defining a network protocol that uses\
    \ a packet\n   timestamp, the recommended timestamp formats should be considered\n\
    \   first (Section 4).  If one of these formats is used, it should be\n   referenced\
    \ along the lines of the examples in Sections 6.1 and 6.2.\n   If none of the\
    \ recommended formats fits the required functionality,\n   then a new timestamp\
    \ format should be defined using the template in\n   Section 3.\n"
- title: 2.  Terminology
  contents:
  - '2.  Terminology

    '
- title: 2.1.  Requirements Language
  contents:
  - "2.1.  Requirements Language\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    NOT RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted\
    \ as described in\n   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear\
    \ in all\n   capitals, as shown here.\n"
- title: 2.2.  Abbreviations
  contents:
  - "2.2.  Abbreviations\n   NTP     Network Time Protocol [RFC5905]\n   PTP     Precision\
    \ Time Protocol [IEEE1588]\n   TAI     International Atomic Time\n   UTC     Coordinated\
    \ Universal Time\n"
- title: 2.3.  Terms Used in This Document
  contents:
  - "2.3.  Terms Used in This Document\n   Timestamp:             A value that represents\
    \ a point in time,\n                          corresponding to an event that occurred\
    \ or is\n                          scheduled to occur.\n   Timestamp error:  \
    \     The difference between the timestamp value and\n                       \
    \   the value of a reference clock at the time of\n                          the\
    \ event that the timestamp was intended to\n                          indicate.\n\
    \   Timestamp format:      The specification of a timestamp, which is\n      \
    \                    represented by a set of attributes that\n               \
    \           unambiguously defines the syntax and semantics\n                 \
    \         of a timestamp.\n   Timestamp accuracy:    The mean over an ensemble\
    \ of measurements of\n                          the timestamp error.\n   Timestamp\
    \ precision:   The variation over an ensemble of measurements\n              \
    \            of the timestamp error.\n   Timestamp resolution:  The minimal time\
    \ unit used for representing\n                          the timestamp.\n"
- title: 3.  Packet Timestamp Specification Template
  contents:
  - "3.  Packet Timestamp Specification Template\n   This document recommends using\
    \ the timestamp formats defined in\n   Section 4.  In cases where these timestamp\
    \ formats do not satisfy the\n   protocol requirements, the timestamp specification\
    \ should clearly\n   state the reasons for defining a new format.  Moreover, it\
    \ is\n   recommended to derive the new timestamp format from an existing\n   timestamp\
    \ format, either a timestamp format from this document or any\n   other previously\
    \ defined timestamp format.\n   The timestamp specification must unambiguously\
    \ define the syntax and\n   semantics of the timestamp.  The current section defines\
    \ the minimum\n   set of attributes, but it should be noted that in some cases,\n\
    \   additional attributes or aspects will need to be defined in the\n   timestamp\
    \ specification.\n   This section defines a template for specifying packet timestamps.\
    \  A\n   timestamp format specification MUST include at least the following\n\
    \   aspects:\n   Timestamp syntax:\n      Size:  The number of bits (or octets)\
    \ used to represent the packet\n         timestamp field.  If the timestamp is\
    \ comprised of more than\n         one field, the size of each field is specified.\
    \  Network order\n         (big endian) is assumed by default; if this is not\
    \ the case,\n         then this section explicitly specifies the endianity.\n\
    \   Timestamp semantics:\n      Units:  The units used to represent the timestamp.\
    \  If the\n         timestamp is comprised of more than one field, the units of\n\
    \         each field are specified.  If a field is limited to a specific\n   \
    \      range of values, this section specifies the permitted range of\n      \
    \   values.\n      Resolution:  The timestamp resolution; the resolution is equal\
    \ to\n         the timestamp field unit.  If the timestamp consists of two or\n\
    \         more fields using different time units, then the resolution is\n   \
    \      the smallest time unit.\n      Wraparound:  The wraparound period of the\
    \ timestamp; any further\n         wraparound-related considerations should be\
    \ described here.\n      Epoch:  The origin of the timescale used for the timestamp;\
    \ the\n         moment in time used as a reference for the timestamp value.\n\
    \         For example, the epoch may be based on a standard time scale,\n    \
    \     such as UTC.  Another example is a relative timestamp, in which\n      \
    \   the epoch could be the time at which the device using the\n         timestamp\
    \ was powered up and is not affected by leap seconds\n         (see the next attribute).\n\
    \      Leap seconds:  This subsection specifies whether the timestamp is\n   \
    \      affected by leap seconds.  If the timestamp is affected by leap\n     \
    \    seconds, then it represents the time elapsed since the epoch\n         minus\
    \ the number of leap seconds that have occurred since the\n         epoch.\n \
    \  Synchronization aspects:\n      The specification of a network protocol that\
    \ makes use of a packet\n      timestamp is expected to include the synchronization\
    \ aspects of\n      using the timestamp.  While the synchronization aspects are\
    \ not\n      strictly part of the timestamp format specification, these aspects\n\
    \      provide the necessary context for using the timestamp within the\n    \
    \  scope of the protocol.  In some cases, timestamps are used without\n      synchronization,\
    \ e.g., a timestamp that indicates the number of\n      seconds since power-up.\
    \  In such cases, the Synchronization\n      Aspects section will specify that\
    \ the timestamp does not\n      correspond to a synchronized time reference and\
    \ may discuss how\n      this affects the usage of the timestamp.  Further details\
    \ about\n      synchronization aspects are discussed in Section 5.\n"
- title: 4.  Recommended Timestamp Formats
  contents:
  - "4.  Recommended Timestamp Formats\n   This document defines a set of recommended\
    \ timestamp formats.\n   Clearly, different network protocols may have different\
    \ requirements\n   and constraints; consequently, they may use different timestamp\n\
    \   formats.  The choice of a specific timestamp format for a given\n   protocol\
    \ may depend on various factors.  A few examples of factors\n   that may affect\
    \ the choice of the timestamp format include the\n   following:\n   *  Timestamp\
    \ size: While some network protocols use a large timestamp\n      field, in some\
    \ cases, there may be constraints with respect to the\n      timestamp size, affecting\
    \ the choice of the timestamp format.\n   *  Resolution: The time resolution is\
    \ another factor that may\n      directly affect the selected timestamp format.\
    \  A potentially\n      important factor in this context is extensibility; it\
    \ may be\n      desirable to allow a timestamp format to be extensible to a higher\n\
    \      resolution by extending the field.  For example, the resolution of\n  \
    \    the NTP 32-bit timestamp format can be improved by extending it to\n    \
    \  the NTP 64-bit timestamp format in a straightforward way.\n   *  Wraparound\
    \ period: The length of the time interval in which the\n      timestamp is unique\
    \ may also be an important factor in choosing\n      the timestamp format.  Along\
    \ with the timestamp resolution, these\n      two factors determine the required\
    \ number of bits in the\n      timestamp.\n   *  Common format for multiple protocols:\
    \ If there are two or more\n      network protocols that use timestamps and are\
    \ often used together\n      in typical systems, using a common timestamp format\
    \ should be\n      preferred if possible.  For example, if the network protocol\
    \ that\n      is being defined typically runs on a PC, then an NTP-based\n   \
    \   timestamp format may allow easier integration with an NTP-\n      synchronized\
    \ timer.  In contrast, a protocol that is typically\n      deployed on a hardware-based\
    \ platform may make better use of a\n      PTP-based timestamp, allowing more\
    \ efficient integration with a\n      PTP-synchronized timer.\n"
- title: 4.1.  Using a Recommended Timestamp Format
  contents:
  - "4.1.  Using a Recommended Timestamp Format\n   A specification that uses one\
    \ of the recommended timestamp formats\n   should specify explicitly that this\
    \ is a recommended timestamp format\n   and point to the relevant section in the\
    \ current document.\n"
- title: 4.2.  NTP Timestamp Formats
  contents:
  - '4.2.  NTP Timestamp Formats

    '
- title: 4.2.1.  NTP 64-Bit Timestamp Format
  contents:
  - "4.2.1.  NTP 64-Bit Timestamp Format\n   The Network Time Protocol (NTP) 64-bit\
    \ timestamp format is defined in\n   [RFC5905].  This timestamp format is used\
    \ in several network\n   protocols, including [RFC6374], [RFC4656], and [RFC5357].\
    \  Since this\n   timestamp format is used in NTP, it should be preferred in network\n\
    \   protocols that are typically deployed in concert with NTP.\n   The format\
    \ is presented in this section according to the template\n   defined in Section\
    \ 3.\n        0                   1                   2                   3\n\
    \        0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   \
    \                Figure 1: NTP 64-Bit Timestamp Format\n   Timestamp field format:\n\
    \      Seconds:  Specifies the integer portion of the number of seconds\n    \
    \     since the epoch.\n         Size:  32 bits.\n         Units:  Seconds.\n\
    \      Fraction:  Specifies the fractional portion of the number of\n        \
    \ seconds since the epoch.\n         Size:  32 bits.\n         Units:  The unit\
    \ is 2^(-32) seconds, which is roughly equal to\n            233 picoseconds.\n\
    \   Epoch:\n      The epoch is 1 January 1900 at 00:00 UTC.\n      Note: As pointed\
    \ out in [RFC5905], strictly speaking, UTC did not\n      exist prior to 1 January\
    \ 1972, but it is convenient to assume it\n      has existed for all eternity.\
    \  The current epoch implies that the\n      timestamp specifies the number of\
    \ seconds since 1 January 1972 at\n      00:00 UTC plus 2272060800 (which is the\
    \ number of seconds between\n      1 January 1900 and 1 January 1972).\n   Leap\
    \ seconds:\n      This timestamp format is affected by leap seconds.  The timestamp\n\
    \      represents the number of seconds elapsed since the epoch minus the\n  \
    \    number of leap seconds.  Thus, during and possibly before and/or\n      after\
    \ the occurrence of a leap second, the value of the timestamp\n      may temporarily\
    \ be ambiguous, as further discussed in Section 5.\n   Resolution:\n      The\
    \ resolution is 2^(-32) seconds.\n   Wraparound:\n      This time format wraps\
    \ around every 2^(32) seconds, which is\n      roughly 136 years.  The next wraparound\
    \ will occur in the year\n      2036.\n"
- title: 4.2.2.  NTP 32-Bit Timestamp Format
  contents:
  - "4.2.2.  NTP 32-Bit Timestamp Format\n   The Network Time Protocol (NTP) 32-bit\
    \ timestamp format is defined in\n   [RFC5905].  This timestamp format is used\
    \ in [METRICS] and [NSHMD].\n   This timestamp format should be preferred in network\
    \ protocols that\n   are typically deployed in concert with NTP.  The 32-bit format\
    \ can be\n   used either when space constraints do not allow the use of the 64-bit\n\
    \   format or when the 32-bit format satisfies the resolution and\n   wraparound\
    \ requirements.\n   The format is presented in this section according to the template\n\
    \   defined in Section 3.\n        0                   1                   2 \
    \                  3\n        0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3\
    \ 4 5 6 7 8 9 0 1\n       |          Seconds              |           Fraction\
    \            |\n                   Figure 2: NTP 32-Bit Timestamp Format\n   Timestamp\
    \ field format:\n      Seconds:  Specifies the integer portion of the number of\
    \ seconds\n         since the epoch.\n         Size:  16 bits.\n         Units:\
    \  Seconds.\n      Fraction:  Specifies the fractional portion of the number of\n\
    \         seconds since the epoch.\n         Size:  16 bits.\n         Units:\
    \  The unit is 2^(-16) seconds, which is roughly equal to\n            15.3 microseconds.\n\
    \   Epoch:\n      The epoch is 1 January 1900 at 00:00 UTC.\n      Note: As pointed\
    \ out in [RFC5905], strictly speaking, UTC did not\n      exist prior to 1 January\
    \ 1972, but it is convenient to assume it\n      has existed for all eternity.\
    \  The current epoch implies that the\n      timestamp specifies the number of\
    \ seconds since 1 January 1972 at\n      00:00 UTC plus 2272060800 (which is the\
    \ number of seconds between\n      1 January 1900 and 1 January 1972).\n   Leap\
    \ seconds:\n      This timestamp format is affected by leap seconds.  The timestamp\n\
    \      represents the number of seconds elapsed since the epoch minus the\n  \
    \    number of leap seconds.  Thus, during and possibly before and/or\n      after\
    \ the occurrence of a leap second, the value of the timestamp\n      may temporarily\
    \ be ambiguous, as further discussed in Section 5.\n   Resolution:\n      The\
    \ resolution is 2^(-16) seconds.\n   Wraparound:\n      This time format wraps\
    \ around every 2^(16) seconds, which is\n      roughly 18 hours.\n"
- title: 4.3.  The PTP Truncated Timestamp Format
  contents:
  - "4.3.  The PTP Truncated Timestamp Format\n   The Precision Time Protocol (PTP)\
    \ [IEEE1588] uses an 80-bit timestamp\n   format.  The truncated timestamp format\
    \ is a 64-bit field, which is\n   the 64 least significant bits of the 80-bit\
    \ PTP timestamp.  Since\n   this timestamp format is similar to the one used in\
    \ PTP, this\n   timestamp format should be preferred in network protocols that\
    \ are\n   typically deployed in PTP-capable devices.\n   The PTP truncated timestamp\
    \ format was defined in [IEEE1588v1] and is\n   used in several protocols, such\
    \ as [RFC6374], [RFC7456], [RFC8186],\n   and [ITU-T-Y.1731].\n        0     \
    \              1                   2                   3\n        0 1 2 3 4 5\
    \ 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n                  Figure\
    \ 3: PTP Truncated Timestamp Format\n   Timestamp field format:\n      Seconds:\
    \  Specifies the integer portion of the number of seconds\n         since the\
    \ epoch.\n         Size:  32 bits.\n         Units:  Seconds.\n      Nanoseconds:\
    \  Specifies the fractional portion of the number of\n         seconds since the\
    \ epoch.\n         Size:  32 bits.\n         Units:  Nanoseconds.  The value of\
    \ this field is in the range 0\n            to (10^(9))-1.\n   Epoch:\n      The\
    \ PTP [IEEE1588] epoch is 1 January 1970 00:00:00 TAI.\n   Leap seconds:\n   \
    \   This timestamp format is not affected by leap seconds.\n   Resolution:\n \
    \     The resolution is 1 nanosecond.\n   Wraparound:\n      This time format\
    \ wraps around every 2^(32) seconds, which is\n      roughly 136 years.  The next\
    \ wraparound will occur in the year\n      2106.\n"
- title: 5.  Synchronization Aspects
  contents:
  - "5.  Synchronization Aspects\n   A specification that defines a new timestamp\
    \ format or uses one of\n   the recommended timestamp formats should include a\
    \ Synchronization\n   Aspects section.  Note that the recommended timestamp formats\
    \ defined\n   in this document (Section 4) do not include the synchronization\n\
    \   aspects of these timestamp formats, but it is expected that\n   specifications\
    \ of network protocols that make use of these formats\n   should include the synchronization\
    \ aspects.  Examples of a\n   Synchronization Aspects section can be found in\
    \ Section 6.\n   The Synchronization Aspects section should specify all the\n\
    \   assumptions and requirements related to synchronization.  For\n   example,\
    \ the synchronization aspects may specify whether nodes\n   populating the timestamps\
    \ should be synchronized among themselves and\n   whether the timestamp is measured\
    \ with respect to a central reference\n   clock such as an NTP server.  If time\
    \ is assumed to be synchronized\n   to a time standard such as UTC or TAI, it\
    \ should be specified in this\n   section.  Further considerations may be discussed\
    \ in this section,\n   such as the required timestamp accuracy and precision.\n\
    \   Another aspect that should be discussed in this section is leap\n   second\
    \ [RFC5905] considerations.  The timestamp specification\n   template (Section\
    \ 3) specifies whether the timestamp is affected by\n   leap seconds.  It is often\
    \ the case that further details about leap\n   seconds will need to be defined\
    \ in the Synchronization Aspects\n   section.  Generally speaking, a leap second\
    \ is a one-second\n   adjustment that is occasionally applied to UTC in order\
    \ to keep it\n   aligned with solar time.  A leap second may be either positive\
    \ or\n   negative, i.e., the clock may either be shifted one second forward or\n\
    \   backward.  All leap seconds that have occurred up to the publication\n   of\
    \ this document have been in the backward direction, and although\n   forward\
    \ leap seconds are theoretically possible, the text throughout\n   this document\
    \ focuses on the common case, which is the backward leap\n   second.  In a timekeeping\
    \ system that considers leap seconds, the\n   system clock may be affected by\
    \ a leap second in one of three\n   possible ways:\n   *  The clock is turned\
    \ backwards one second at the end of the leap\n      second.\n   *  The clock\
    \ is frozen during the duration of the leap second.\n   *  The clock is slowed\
    \ down during the leap second and adjacent time\n      intervals until the new\
    \ time value catches up.  The interval for\n      this process, commonly referred\
    \ to as \"leap smear\", can range from\n      several seconds to several hours\
    \ before, during, and/or after the\n      occurrence of the leap second.\n   The\
    \ way leap seconds are handled depends on the synchronization\n   protocol and\
    \ is thus not specified in this document.  However, if a\n   timestamp format\
    \ is defined with respect to a timescale that is\n   affected by leap seconds,\
    \ the Synchronization Aspects section should\n   specify how the use of leap seconds\
    \ affects the timestamp usage.\n"
- title: 6.  Timestamp Use Cases
  contents:
  - "6.  Timestamp Use Cases\n   Packet timestamps are used in various network protocols.\
    \  Typical\n   applications of packet timestamps include delay measurement, clock\n\
    \   synchronization, and others.  The following table presents a (non-\n   exhaustive)\
    \ list of protocols that use packet timestamps and the\n   timestamp formats used\
    \ in each of these protocols.\n   |                 |         Recommended Formats\
    \          | Other |\n   |     Protocol    | NTP 64-Bit | NTP 32-Bit | PTP Trunc.\
    \ |       |\n   |  NTP [RFC5905]  |     +      |            |            |   \
    \    |\n   | OWAMP [RFC4656] |     +      |            |            |       |\n\
    \   | TWAMP [RFC5357] |     +      |            |            |       |\n   | TWAMP\
    \ [RFC8186] |     +      |            |     +      |       |\n   | TRILL [RFC7456]\
    \ |            |            |     +      |       |\n   |  MPLS [RFC6374] |   \
    \         |            |     +      |       |\n   |  TCP [RFC7323]  |        \
    \    |            |            |   +   |\n   |  RTP [RFC3550]  |     +      |\
    \            |            |   +   |\n   | IPFIX [RFC7011] |            |     \
    \       |            |   +   |\n   |    BinaryTime   |            |          \
    \  |            |   +   |\n   |    [RFC6019]    |            |            |  \
    \          |       |\n   |    [METRICS]    |     +      |     +      |       \
    \     |       |\n   |     [NSHMD]     |            |     +      |     +      |\
    \       |\n             Table 1: Protocols That Use Packet Timestamps\n   The\
    \ rest of this section presents two hypothetical examples of\n   network protocol\
    \ specifications that use one of the recommended\n   timestamp formats.  The examples\
    \ include the text that specifies the\n   information related to the timestamp\
    \ format.\n"
- title: 6.1.  Example 1
  contents:
  - "6.1.  Example 1\n   Timestamp:\n      The timestamp format used in this specification\
    \ is the NTP\n      [RFC5905] 64-bit format, as described in Section 4.2.1 of\
    \ RFC\n      8877.\n   Synchronization aspects:\n      It is assumed that the\
    \ nodes that run this protocol are\n      synchronized to UTC using a synchronization\
    \ mechanism that is\n      outside the scope of this document.  In typical deployments,\
    \ this\n      protocol will run on a machine that uses NTP [RFC5905] for\n   \
    \   synchronization.  Thus, the timestamp may be derived from the NTP-\n     \
    \ synchronized clock, allowing the timestamp to be measured with\n      respect\
    \ to the clock of an NTP server.  Since the NTP time format\n      is affected\
    \ by leap seconds, the current timestamp format is\n      similarly affected.\
    \  Thus, the value of a timestamp during and\n      possibly before and/or after\
    \ a leap second may be temporarily\n      inaccurate.\n"
- title: 6.2.  Example 2
  contents:
  - "6.2.  Example 2\n   Timestamp:\n      The timestamp format used in this specification\
    \ is the PTP\n      [IEEE1588] truncated format, as described in Section 4.3 of\
    \ RFC\n      8877.\n   Synchronization aspects:\n      It is assumed that the\
    \ nodes that run this protocol are\n      synchronized among themselves.  Nodes\
    \ may be synchronized to a\n      global reference time.  Note that if PTP [IEEE1588]\
    \ is used for\n      synchronization, the timestamp may be derived from the PTP-\n\
    \      synchronized clock, allowing the timestamp to be measured with\n      respect\
    \ to a PTP grandmaster clock.\n"
- title: 7.  Packet Timestamp Control Field
  contents:
  - "7.  Packet Timestamp Control Field\n   In some cases, it is desirable to have\
    \ a control field that describes\n   the structure, format, content, and properties\
    \ of timestamps.\n   Control information about the timestamp format can be conveyed\
    \ in\n   some protocols using a dedicated control plane protocol or may be\n \
    \  made available at the management plane, for example, using a YANG\n   data\
    \ model.  An optional control field allows some of the control\n   information\
    \ to be attached to the timestamp.\n   An example of a packet timestamp control\
    \ field is the Error Estimate\n   field, defined by Section 4.1.2 of [RFC4656],\
    \ which is used in the\n   One-Way Active Measurement Protocol (OWAMP) [RFC4656]\
    \ and Two-Way\n   Active Measurement Protocol (TWAMP) [RFC5357].  The Root Dispersion\n\
    \   and Root Delay fields in the NTP header [RFC5905] are two examples of\n  \
    \ fields that provide information about the timestamp precision.\n   Another example\
    \ of an auxiliary field is the Correction Field in the\n   PTP header [IEEE1588];\
    \ its value is used as a correction to the\n   timestamp and may be assigned by\
    \ the sender of the PTP message and\n   updated by transit nodes (Transparent\
    \ Clocks) in order to account for\n   the delay along the path.\n   This section\
    \ defines high-level guidelines for defining packet\n   timestamp control fields\
    \ in network protocols that can benefit from\n   such timestamp-related control\
    \ information.  The word \"requirements\"\n   is used in its informal context\
    \ in this section.\n"
- title: 7.1.  High-Level Control Field Requirements
  contents:
  - "7.1.  High-Level Control Field Requirements\n   A control field for packet timestamps\
    \ must offer an adequate feature\n   set and fulfill a series of requirements\
    \ to be usable and accepted.\n   The following list captures the main high-level\
    \ requirements for\n   timestamp fields.\n   1.  Extensible Feature Set: Protocols\
    \ and applications depend on\n       various timestamp characteristics.  A timestamp\
    \ control field\n       must support a variable number of elements (components)\
    \ that\n       either describe or quantify timestamp-specific characteristics\
    \ or\n       parameters.  Examples of potential elements include timestamp\n \
    \      size, encoding, accuracy, leap seconds, reference clock\n       identifiers,\
    \ etc.\n   2.  Size: Essential for an efficient use of timestamp control fields\n\
    \       is the trade-off between supported features and control field\n      \
    \ size.  Protocols and applications may select the specific control\n       field\
    \ elements that are needed for their operation from the set\n       of available\
    \ elements.\n   3.  Composition: Applications may depend on specific control field\n\
    \       elements being present in messages.  The status of these elements\n  \
    \     may be either mandatory, conditional mandatory, or optional,\n       depending\
    \ on the specific application and context.  A control\n       field specification\
    \ must support applications in conveying or\n       negotiating (a) the set of\
    \ control field elements along with (b)\n       the status of any element (i.e.,\
    \ mandatory, conditional\n       mandatory, or optional) by defining appropriate\
    \ data structures\n       and identity codes.\n   4.  Category: Control field\
    \ elements can characterize either static\n       timestamp information (e.g.,\
    \ timestamp size in bytes and\n       timestamp semantics: NTP 64-bit format)\
    \ or runtime timestamp\n       information (e.g., estimated timestamp accuracy\
    \ at the time of\n       sampling: 20 microseconds to UTC).  For efficiency reasons,\
    \ it\n       may be meaningful to support separation of these two concepts:\n\
    \       while the former (static) information is typically valid\n       throughout\
    \ a protocol session and may be conveyed only once, at\n       session establishment\
    \ time, the latter (runtime) information\n       augments any timestamp instance\
    \ and may cause substantial\n       overhead for high-traffic protocols.\n   Proposals\
    \ for timestamp control fields will be defined in separate\n   documents and are\
    \ out of scope of this document.\n"
- title: 8.  IANA Considerations
  contents:
  - "8.  IANA Considerations\n   This document has no IANA actions.\n"
- title: 9.  Security Considerations
  contents:
  - "9.  Security Considerations\n   A network protocol that uses a packet timestamp\
    \ MUST specify the\n   security considerations that result from using the timestamp.\
    \  This\n   section provides an overview of some of the common security\n   considerations\
    \ of using timestamps.\n   Any metadata that is attached to control or data packets,\
    \ and\n   specifically packet timestamps, can facilitate network\n   reconnaissance;\
    \ by passively eavesdropping on timestamped packets, an\n   attacker can gather\
    \ information about the network performance and the\n   level of synchronization\
    \ between nodes.\n   In some cases, timestamps could be spoofed or modified by\
    \ on-path\n   attackers, thus attacking the application that uses the timestamps.\n\
    \   For example, if timestamps are used in a delay measurement protocol,\n   an\
    \ attacker can modify en route timestamps in a way that manipulates\n   the measurement\
    \ results.  Integrity protection mechanisms, such as\n   Message Authentication\
    \ Codes (MACs), can mitigate such attacks.  The\n   specification of an integrity\
    \ protection mechanism is outside the\n   scope of this document as, typically,\
    \ integrity protection will be\n   defined on a per-network-protocol basis and\
    \ not specifically for the\n   timestamp field.\n   Another potential threat that\
    \ can have a similar impact is delay\n   attacks.  An attacker can maliciously\
    \ delay some or all of the en\n   route messages, with the same harmful implications\
    \ as described in\n   the previous paragraph.  Mitigating delay attacks is a significant\n\
    \   challenge; in contrast to spoofing and modification attacks, the\n   delay\
    \ attack cannot be prevented by cryptographic integrity\n   protection mechanisms.\
    \  In some cases, delay attacks can be mitigated\n   by sending the timestamped\
    \ information through multiple paths,\n   allowing detection of and resistance\
    \ to an attacker that has access\n   to one of the paths.\n   In many cases, timestamping\
    \ relies on an underlying synchronization\n   mechanism.  Thus, any attack that\
    \ compromises the synchronization\n   mechanism can also compromise protocols\
    \ that use timestamping.\n   Attacks on time protocols are discussed in detail\
    \ in [RFC7384].\n"
- title: 10.  References
  contents:
  - '10.  References

    '
- title: 10.1.  Normative References
  contents:
  - "10.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n  \
    \            DOI 10.17487/RFC2119, March 1997,\n              <https://www.rfc-editor.org/info/rfc2119>.\n\
    \   [RFC8174]  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n     \
    \         2119 Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n        \
    \      May 2017, <https://www.rfc-editor.org/info/rfc8174>.\n"
- title: 10.2.  Informative References
  contents:
  - "10.2.  Informative References\n   [IEEE1588] IEEE, \"IEEE Standard for a Precision\
    \ Clock Synchronization\n              Protocol for Networked Measurement and\
    \ Control Systems\",\n              DOI 10.1109/IEEESTD.2008.4579760, IEEE Std.\
    \ 1588-2008,\n              July 2008, <https://doi.org/10.1109/IEEESTD.2008.4579760>.\n\
    \   [IEEE1588v1]\n              IEEE, \"IEEE Standard for a Precision Clock Synchronization\n\
    \              Protocol for Networked Measurement and Control Systems\",\n   \
    \           DOI 10.1109/IEEESTD.2002.94144, IEEE Std. 1588-2002,\n           \
    \   October 2002,\n              <https://doi.org/10.1109/IEEESTD.2002.94144>.\n\
    \   [ITU-T-Y.1731]\n              ITU-T, \"Operations, administration and maintenance\
    \ (OAM)\n              functions and mechanisms for Ethernet-based networks\"\
    ,\n              ITU-T Recommendation G.8013/Y.1731, August 2015.\n   [METRICS]\
    \  Morton, A., Bagnulo, M., Eardley, P., and K. D'Souza,\n              \"Initial\
    \ Performance Metrics Registry Entries\", Work in\n              Progress, Internet-Draft,\
    \ draft-ietf-ippm-initial-\n              registry-16, 9 March 2020, <https://tools.ietf.org/html/\n\
    \              draft-ietf-ippm-initial-registry-16>.\n   [NSHMD]    Guichard,\
    \ J., Smith, M., Kumar, S., Majee, S., and T.\n              Mizrahi, \"Network\
    \ Service Header (NSH) MD Type 1: Context\n              Header Allocation (Data\
    \ Center)\", Work in Progress,\n              Internet-Draft, draft-ietf-sfc-nsh-dc-allocation-02,\
    \ 25\n              September 2018, <https://tools.ietf.org/html/draft-ietf-\n\
    \              sfc-nsh-dc-allocation-02>.\n   [RFC3339]  Klyne, G. and C. Newman,\
    \ \"Date and Time on the Internet:\n              Timestamps\", RFC 3339, DOI\
    \ 10.17487/RFC3339, July 2002,\n              <https://www.rfc-editor.org/info/rfc3339>.\n\
    \   [RFC3550]  Schulzrinne, H., Casner, S., Frederick, R., and V.\n          \
    \    Jacobson, \"RTP: A Transport Protocol for Real-Time\n              Applications\"\
    , STD 64, RFC 3550, DOI 10.17487/RFC3550,\n              July 2003, <https://www.rfc-editor.org/info/rfc3550>.\n\
    \   [RFC4656]  Shalunov, S., Teitelbaum, B., Karp, A., Boote, J., and M.\n   \
    \           Zekauskas, \"A One-way Active Measurement Protocol\n             \
    \ (OWAMP)\", RFC 4656, DOI 10.17487/RFC4656, September 2006,\n              <https://www.rfc-editor.org/info/rfc4656>.\n\
    \   [RFC5357]  Hedayat, K., Krzanowski, R., Morton, A., Yum, K., and J.\n    \
    \          Babiarz, \"A Two-Way Active Measurement Protocol (TWAMP)\",\n     \
    \         RFC 5357, DOI 10.17487/RFC5357, October 2008,\n              <https://www.rfc-editor.org/info/rfc5357>.\n\
    \   [RFC5646]  Phillips, A., Ed. and M. Davis, Ed., \"Tags for Identifying\n \
    \             Languages\", BCP 47, RFC 5646, DOI 10.17487/RFC5646,\n         \
    \     September 2009, <https://www.rfc-editor.org/info/rfc5646>.\n   [RFC5905]\
    \  Mills, D., Martin, J., Ed., Burbank, J., and W. Kasch,\n              \"Network\
    \ Time Protocol Version 4: Protocol and Algorithms\n              Specification\"\
    , RFC 5905, DOI 10.17487/RFC5905, June 2010,\n              <https://www.rfc-editor.org/info/rfc5905>.\n\
    \   [RFC6019]  Housley, R., \"BinaryTime: An Alternate Format for\n          \
    \    Representing Date and Time in ASN.1\", RFC 6019,\n              DOI 10.17487/RFC6019,\
    \ September 2010,\n              <https://www.rfc-editor.org/info/rfc6019>.\n\
    \   [RFC6374]  Frost, D. and S. Bryant, \"Packet Loss and Delay\n            \
    \  Measurement for MPLS Networks\", RFC 6374,\n              DOI 10.17487/RFC6374,\
    \ September 2011,\n              <https://www.rfc-editor.org/info/rfc6374>.\n\
    \   [RFC6991]  Schoenwaelder, J., Ed., \"Common YANG Data Types\",\n         \
    \     RFC 6991, DOI 10.17487/RFC6991, July 2013,\n              <https://www.rfc-editor.org/info/rfc6991>.\n\
    \   [RFC7011]  Claise, B., Ed., Trammell, B., Ed., and P. Aitken,\n          \
    \    \"Specification of the IP Flow Information Export (IPFIX)\n             \
    \ Protocol for the Exchange of Flow Information\", STD 77,\n              RFC\
    \ 7011, DOI 10.17487/RFC7011, September 2013,\n              <https://www.rfc-editor.org/info/rfc7011>.\n\
    \   [RFC7323]  Borman, D., Braden, B., Jacobson, V., and R.\n              Scheffenegger,\
    \ Ed., \"TCP Extensions for High Performance\",\n              RFC 7323, DOI 10.17487/RFC7323,\
    \ September 2014,\n              <https://www.rfc-editor.org/info/rfc7323>.\n\
    \   [RFC7384]  Mizrahi, T., \"Security Requirements of Time Protocols in\n   \
    \           Packet Switched Networks\", RFC 7384, DOI 10.17487/RFC7384,\n    \
    \          October 2014, <https://www.rfc-editor.org/info/rfc7384>.\n   [RFC7456]\
    \  Mizrahi, T., Senevirathne, T., Salam, S., Kumar, D., and\n              D.\
    \ Eastlake 3rd, \"Loss and Delay Measurement in\n              Transparent Interconnection\
    \ of Lots of Links (TRILL)\",\n              RFC 7456, DOI 10.17487/RFC7456, March\
    \ 2015,\n              <https://www.rfc-editor.org/info/rfc7456>.\n   [RFC7493]\
    \  Bray, T., Ed., \"The I-JSON Message Format\", RFC 7493,\n              DOI\
    \ 10.17487/RFC7493, March 2015,\n              <https://www.rfc-editor.org/info/rfc7493>.\n\
    \   [RFC8186]  Mirsky, G. and I. Meilik, \"Support of the IEEE 1588\n        \
    \      Timestamp Format in a Two-Way Active Measurement Protocol\n           \
    \   (TWAMP)\", RFC 8186, DOI 10.17487/RFC8186, June 2017,\n              <https://www.rfc-editor.org/info/rfc8186>.\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   The authors thank Russ Housley, Yaakov Stein, Greg Mirsky,\
    \ Warner\n   Losh, Rodney Cummings, Miroslav Lichvar, Denis Reilly, Daniel Franke,\n\
    \   \xC9ric Vyncke, Ben Kaduk, Ian Swett, Francesca Palombini, Watson Ladd,\n\
    \   and other members of the NTP Working Group for their many helpful\n   comments.\
    \  The authors gratefully acknowledge Harlan Stenn and the\n   people from the\
    \ Network Time Foundation for sharing their thoughts\n   and ideas.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Tal Mizrahi\n   Huawei\n   8-2 Matam\n   Haifa 3190501\n\
    \   Israel\n   Email: tal.mizrahi.phd@gmail.com\n   Joachim Fabini\n   TU Wien\n\
    \   Gusshausstrasse 25/E389\n   1040 Vienna\n   Austria\n   Phone: +43 1 58801\
    \ 38813\n   Email: Joachim.Fabini@tuwien.ac.at\n   URI:   http://www.tc.tuwien.ac.at/about-us/staff/joachim-fabini/\n\
    \   Al Morton\n   AT&T Labs\n   200 Laurel Avenue South\n   Middletown, NJ 07748\n\
    \   United States of America\n"
