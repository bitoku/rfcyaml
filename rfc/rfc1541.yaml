- title: __initial_text__
  contents:
  - '                  Dynamic Host Configuration Protocol

    '
- title: Status of this memo
  contents:
  - "Status of this memo\n   This RFC specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" for the standardization state and status\n   of this protocol.\
    \  Distribution of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   The Dynamic Host Configuration Protocol (DHCP) provides a framework\n\
    \   for passing configuration information to hosts on a TCP/IP network.\n   DHCP\
    \ is based on the Bootstrap Protocol (BOOTP) [7], adding the\n   capability of\
    \ automatic allocation of reusable network addresses and\n   additional configuration\
    \ options [19].  DHCP captures the behavior of\n   BOOTP relay agents [7, 23],\
    \ and DHCP participants can interoperate\n   with BOOTP participants [9].  Due\
    \ to some errors introduced into RFC\n   1531 in the editorial process, this memo\
    \ is reissued as RFC 1541.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction. . . . . . . . . . . . . . . . . . . .\
    \ . . . . .  2\n   1.1 Related Work. . . . . . . . . . . . . . . . . . . . . .\
    \ . . .  4\n   1.2 Problem definition and issues . . . . . . . . . . . . . . .\
    \ .  4\n   1.3 Requirements. . . . . . . . . . . . . . . . . . . . . . . . . \
    \ 5\n   1.4 Terminology . . . . . . . . . . . . . . . . . . . . . . . . .  6\n\
    \   1.5 Design goals. . . . . . . . . . . . . . . . . . . . . . . . .  6\n   2.\
    \ Protocol Summary . . . . . . . . . . . . . . . . . . . . . . .  8\n   2.1 Configuration\
    \ parameters repository . . . . . . . . . . . . . 10\n   2.2 Dynamic allocation\
    \ of network addresses . . . . . . . . . . . 11\n   3. The Client-Server Protocol\
    \ . . . . . . . . . . . . . . . . . . 11\n   3.1 Client-server interaction - allocating\
    \ a network address. . . 12\n   3.2 Client-server interaction - reusing a  previously\
    \ allocated\n       network address . . . . . . . . . . . . . . . . . . . . .\
    \ . . 17\n   3.3 Interpretation and representation of time values. . . . . . .\
    \ 19\n   3.4 Host parameters in DHCP . . . . . . . . . . . . . . . . . . . 19\n\
    \   3.5 Use of DHCP in clients with multiple interfaces . . . . . . . 20\n   3.6\
    \ When clients should use DHCP. . . . . . . . . . . . . . . . . 20\n   4. Specification\
    \ of the DHCP client-server protocol . . . . . . . 21\n   4.1 Constructing and\
    \ sending DHCP messages. . . . . . . . . . . . 21\n   4.2 DHCP server administrative\
    \ controls . . . . . . . . . . . . . 23\n   4.3 DHCP server behavior. . . . .\
    \ . . . . . . . . . . . . . . . . 24\n   4.3.1 DHCPDISCOVER message. . . . . .\
    \ . . . . . . . . . . . . . . 24\n   4.3.2 DHCPREQUEST message . . . . . . . .\
    \ . . . . . . . . . . . . 27\n   4.3.3 DHCPDECLINE message . . . . . . . . . .\
    \ . . . . . . . . . . 29\n   4.3.4 DHCPRELEASE message . . . . . . . . . . . .\
    \ . . . . . . . . 29\n   4.4 DHCP client behavior. . . . . . . . . . . . . . .\
    \ . . . . . . 29\n   4.4.1 Initialization and allocation of network address. .\
    \ . . . . 29\n   4.4.2 Initialization with known network address . . . . . . .\
    \ . . 33\n   4.4.3 Initialization with a known DHCP server address . . . . . .\
    \ 34\n   4.4.4 Reacquisition and expiration. . . . . . . . . . . . . . . . 34\n\
    \   4.4.5 DHCPRELEASE . . . . . . . . . . . . . . . . . . . . . . . . 35\n   5.\
    \ Acknowledgments. . . . . . . . . . . . . . . . . . . . . . . . 35\n   6. References\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . 36\n   7. Security Considerations.\
    \ . . . . . . . . . . . . . . . . . . . 37\n   8. Author's Address . . . . . .\
    \ . . . . . . . . . . . . . . . . . 38\n   A. Host Configuration Parameters  .\
    \ . . . . . . . . . . . . . . . 39\n"
- title: List of Figures
  contents:
  - "List of Figures\n   1. Format of a DHCP message . . . . . . . . . . . . . . .\
    \ . . . .  9\n   2. Format of the 'flags' field. . . . . . . . . . . . . . . .\
    \ . . 10\n   3. Timeline diagram of messages exchanged between DHCP client and\n\
    \      servers when allocating a new network address. . . . . . . . . 15\n   4.\
    \ Timeline diagram of messages exchanged between DHCP client and\n      servers\
    \ when reusing a previously allocated network address. . 18\n   5. State-transition\
    \ diagram for DHCP clients. . . . . . . . . . . 31\n"
- title: List of Tables
  contents:
  - "List of Tables\n   1. Description of fields in a DHCP message. . . . . . . .\
    \ . . . . 14\n   2. DHCP messages. . . . . . . . . . . . . . . . . . . . . . .\
    \ . . 16\n   3. Fields and options used by DHCP servers. . . . . . . . . . . .\
    \ 25\n   4. Fields and options used by DHCP clients. . . . . . . . . . . . 32\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   The Dynamic Host Configuration Protocol (DHCP) provides configuration\n\
    \   parameters to Internet hosts.  DHCP consists of two components: a\n   protocol\
    \ for delivering host-specific configuration parameters from a\n   DHCP server\
    \ to a host and a mechanism for allocation of network\n   addresses to hosts.\n\
    \   DHCP is built on a client-server model, where designated DHCP server\n   hosts\
    \ allocate network addresses and deliver configuration parameters\n   to dynamically\
    \ configured hosts.  Throughout the remainder of this\n   document, the term \"\
    server\" refers to a host providing initialization\n   parameters through DHCP,\
    \ and the term \"client\" refers to a host\n   requesting initialization parameters\
    \ from a DHCP server.\n   A host should not act as a DHCP server unless explicitly\
    \ configured\n   to do so by a system administrator.  The diversity of hardware\
    \ and\n   protocol implementations in the Internet would preclude reliable\n \
    \  operation if random hosts were allowed to respond to DHCP requests.\n   For\
    \ example, IP requires the setting of many parameters within the\n   protocol\
    \ implementation software.  Because IP can be used on many\n   dissimilar kinds\
    \ of network hardware, values for those parameters\n   cannot be guessed or assumed\
    \ to have correct defaults.  Also,\n   distributed address allocation schemes\
    \ depend on a polling/defense\n   mechanism for discovery of addresses that are\
    \ already in use.  IP\n   hosts may not always be able to defend their network\
    \ addresses, so\n   that such a distributed address allocation scheme cannot be\n\
    \   guaranteed to avoid allocation of duplicate network addresses.\n   DHCP supports\
    \ three mechanisms for IP address allocation.  In\n   \"automatic allocation\"\
    , DHCP assigns a permanent IP address to a\n   host.  In \"dynamic allocation\"\
    , DHCP assigns an IP address to a host\n   for a limited period of time (or until\
    \ the host explicitly\n   relinquishes the address).  In \"manual allocation\"\
    , a host's IP\n   address is assigned by the network administrator, and DHCP is\
    \ used\n   simply to convey the assigned address to the host.  A particular\n\
    \   network will use one or more of these mechanisms, depending on the\n   policies\
    \ of the network administrator.\n   Dynamic allocation is the only one of the\
    \ three mechanisms that\n   allows automatic reuse of an address that is no longer\
    \ needed by the\n   host to which it was assigned.  Thus, dynamic allocation is\n\
    \   particularly useful for assigning an address to a host that will be\n   connected\
    \ to the network only temporarily or for sharing a limited\n   pool of IP addresses\
    \ among a group of hosts that do not need\n   permanent IP addresses.  Dynamic\
    \ allocation may also be a good choice\n   for assigning an IP address to a new\
    \ host being permanently connected\n   to a network where IP addresses are sufficiently\
    \ scarce that it is\n   important to reclaim them when old hosts are retired.\
    \  Manual\n   allocation allows DHCP to be used to eliminate the error-prone\n\
    \   process of manually configuring hosts with IP addresses in\n   environments\
    \ where (for whatever reasons) it is desirable to manage\n   IP address assignment\
    \ outside of the DHCP mechanisms.\n   The format of DHCP messages is based on\
    \ the format of BOOTP messages,\n   to capture the BOOTP relay agent behavior\
    \ described as part of the\n   BOOTP specification [7, 23] and to allow interoperability\
    \ of existing\n   BOOTP clients with DHCP servers.  Using BOOTP relaying agents\n\
    \   eliminates the necessity of having a DHCP server on each physical\n   network\
    \ segment.\n"
- title: 1.1 Related Work
  contents:
  - "1.1 Related Work\n   There are several Internet protocols and related mechanisms\
    \ that\n   address some parts of the dynamic host configuration problem.  The\n\
    \   Reverse Address Resolution Protocol (RARP) [10] (through the\n   extensions\
    \ defined in the Dynamic RARP (DRARP) [5]) explicitly\n   addresses the problem\
    \ of network address discovery, and includes an\n   automatic IP address assignment\
    \ mechanism.  The Trivial File Transfer\n   Protocol (TFTP) [20] provides for\
    \ transport of a boot image from a\n   boot server.  The Internet Control Message\
    \ Protocol (ICMP) [16]\n   provides for informing hosts of additional routers\
    \ via \"ICMP\n   redirect\" messages.  ICMP also can provide subnet mask information\n\
    \   through the \"ICMP mask request\" message and other information through\n\
    \   the (obsolete) \"ICMP information request\" message.  Hosts can locate\n \
    \  routers through the ICMP router discovery mechanism [8].\n   BOOTP is a transport\
    \ mechanism for a collection of configuration\n   information.  BOOTP is also\
    \ extensible, and official extensions [17]\n   have been defined for several configuration\
    \ parameters.  Morgan has\n   proposed extensions to BOOTP for dynamic IP address\
    \ assignment [15].\n   The Network Information Protocol (NIP), used by the Athena\
    \ project at\n   MIT, is a distributed mechanism for dynamic IP address assignment\n\
    \   [19].  The Resource Location Protocol RLP [1] provides for location\n   of\
    \ higher level services.  Sun Microsystems diskless workstations use\n   a boot\
    \ procedure that employs RARP, TFTP and an RPC mechanism called\n   \"bootparams\"\
    \ to deliver configuration information and operating\n   system code to diskless\
    \ hosts.  (Sun Microsystems, Sun Workstation\n   and SunOS are trademarks of Sun\
    \ Microsystems, Inc.)  Some Sun\n   networks also use DRARP and an auto-installation\
    \ mechanism to\n   automate the configuration of new hosts in an existing network.\n\
    \   In other related work, the path minimum transmission unit (MTU)\n   discovery\
    \ algorithm can determine the MTU of an arbitrary internet\n   path [14].  Comer\
    \ and Droms have proposed the use of the Address\n   Resolution Protocol (ARP)\
    \ as a transport protocol for resource\n   location and selection [6].  Finally,\
    \ the Host Requirements RFCs [3,\n   4] mention specific requirements for host\
    \ reconfiguration and suggest\n   a scenario for initial configuration of diskless\
    \ hosts.\n"
- title: 1.2 Problem definition and issues
  contents:
  - "1.2 Problem definition and issues\n   DHCP is designed to supply hosts with the\
    \ configuration parameters\n   defined in the Host Requirements RFCs.  After obtaining\
    \ parameters\n   via DHCP, a host should be able to exchange packets with any\
    \ other\n   host in the Internet.  The parameters supplied by DHCP are listed\
    \ in\n   Appendix A.\n   Not all of these parameters are required for a newly\
    \ initialized\n   host.  A client and server may negotiate for the transmission\
    \ of only\n   those parameters required by the client or specific to a particular\n\
    \   subnet.\n   DHCP allows but does not require the configuration of host parameters\n\
    \   not directly related to the IP protocol.  DHCP also does not address\n   registration\
    \ of newly configured hosts with the Domain Name System\n   (DNS) [12, 13].\n\
    \   DHCP is not intended for use in configuring routers.\n"
- title: 1.3 Requirements
  contents:
  - "1.3 Requirements\n   Throughout this document, the words that are used to define\
    \ the\n   significance of particular requirements are capitalized.  These words\n\
    \   are:\n      o \"MUST\"\n        This word or the adjective \"REQUIRED\" means\
    \ that the\n        item is an absolute requirement of this specification.\n \
    \     o \"MUST NOT\"\n        This phrase means that the item is an absolute prohibition\n\
    \        of this specification.\n      o \"SHOULD\"\n        This word or the\
    \ adjective \"RECOMMENDED\" means that there\n        may exist valid reasons\
    \ in particular circumstances to ignore\n        this item, but the full implications\
    \ should be understood and\n        the case carefully weighed before choosing\
    \ a different course.\n      o \"SHOULD NOT\"\n        This phrase means that\
    \ there may exist valid reasons in\n        particular circumstances when the\
    \ listed behavior is acceptable\n        or even useful, but the full implications\
    \ should be understood\n        and the case carefully weighed before implementing\
    \ any behavior\n        described with this label.\n      o \"MAY\"\n        This\
    \ word or the adjective \"OPTIONAL\" means that this item is\n        truly optional.\
    \  One vendor may choose to include the item\n        because a particular marketplace\
    \ requires it or because it\n        enhances the product, for example; another\
    \ vendor may omit the\n        same item.\n"
- title: 1.4 Terminology
  contents:
  - "1.4 Terminology\n   This document uses the following terms:\n      o \"DHCP client\"\
    \n        A DHCP client is an Internet host using DHCP to obtain\n        configuration\
    \ parameters such as a network address.\n      o \"DHCP server\"\n        A DHCP\
    \ server is an Internet host that returns configuration\n        parameters to\
    \ DHCP clients.\n      o \"BOOTP relay agent\"\n        A BOOTP relay agent is\
    \ an Internet host or router that passes\n        DHCP messages between DHCP clients\
    \ and DHCP servers.  DHCP is\n        designed to use the same relay agent behavior\
    \ as specified in\n        the BOOTP protocol specification.\n      o \"binding\"\
    \n        A binding is a collection of configuration parameters, including\n \
    \       at least an IP address, associated with or \"bound to\" a DHCP\n     \
    \   client.  Bindings are managed by DHCP servers.\n"
- title: 1.5 Design goals
  contents:
  - "1.5 Design goals\n   The following list gives general design goals for DHCP.\n\
    \      o DHCP should be a mechanism rather than a policy.  DHCP must\n       \
    \ allow local system administrators control over configuration\n        parameters\
    \ where desired; e.g., local system administrators\n        should be able to\
    \ enforce local policies concerning allocation\n        and access to local resources\
    \ where desired.\n      o Hosts should require no manual configuration.  Each\
    \ host should\n        be able to discover appropriate local configuration parameters\n\
    \        without user intervention and incorporate those parameters into\n   \
    \     its own configuration.\n      o Networks should require no hand configuration\
    \ for individual\n        hosts.  Under normal circumstances, the network manager\
    \ should\n        not have to enter any per-host configuration parameters.\n \
    \     o DHCP should not require a server on each subnet.  To allow for\n     \
    \   scale and economy, DHCP must work across routers or through the\n        intervention\
    \ of BOOTP/DHCP relay agents.\n      o A DHCP host must be prepared to receive\
    \ multiple responses to a\n        request for configuration parameters.  Some\
    \ installations may\n        include multiple, overlapping DHCP servers to enhance\n\
    \        reliability and increase performance.\n      o DHCP must coexist with\
    \ statically configured, non-participating\n        hosts and with existing network\
    \ protocol implementations.\n      o DHCP must interoperate with the BOOTP relay\
    \ agent behavior as\n        described by RFC 951 and by Wimer [21].\n      o\
    \ DHCP must provide service to existing BOOTP clients.\n   The following list\
    \ gives design goals specific to the transmission of\n   the network layer parameters.\
    \  DHCP must:\n      o Guarantee that any specific network address will not be\
    \ in\n        use by more than one host at a time,\n      o Retain host configuration\
    \ across host reboot.  A host should,\n        whenever possible, be assigned\
    \ the same configuration parameters\n        (e.g., network address) in response\
    \ to each request,\n      o Retain host configuration across server reboots, and,\
    \ whenever\n        possible, a host should be assigned the same configuration\n\
    \        parameters despite restarts of the DHCP mechanism,\n      o Allow automatic\
    \ assignment of configuration parameters to new\n        hosts to avoid hand configuration\
    \ for new hosts,\n      o Support fixed or permanent allocation of configuration\n\
    \        parameters to specific hosts.\n"
- title: 2. Protocol Summary
  contents:
  - "2. Protocol Summary\n   From the client's point of view, DHCP is an extension\
    \ of the BOOTP\n   mechanism.  This behavior allows existing BOOTP clients to\n\
    \   interoperate with DHCP servers without requiring any change to the\n   clients'\
    \ initialization software.  A separate document details the\n   interactions between\
    \ BOOTP and DHCP clients and servers [9].  There\n   are some new, optional transactions\
    \ that optimize the interaction\n   between DHCP clients and servers that are\
    \ described in sections 3 and\n   4.\n   Figure 1 gives the format of a DHCP message\
    \ and table 1 describes\n   each of the fields in the DHCP message.  The numbers\
    \ in parentheses\n   indicate the size of each field in octets.  The names for\
    \ the fields\n   given in the figure will be used throughout this document to\
    \ refer to\n   the fields in DHCP messages.\n   There are two primary differences\
    \ between DHCP and BOOTP.  First,\n   DHCP defines mechanisms through which clients\
    \ can be assigned a\n   network address for a fixed lease, allowing for serial\
    \ reassignment\n   of network addresses to different clients.  Second, DHCP provides\
    \ the\n   mechanism for a client to acquire all of the IP configuration\n   parameters\
    \ that it needs in order to operate.\n   DHCP introduces a small change in terminology\
    \ intended to clarify the\n   meaning of one of the fields.  What was the \"vendor\
    \ extensions\" field\n   in BOOTP has been re-named the \"options\" field in DHCP.\
    \ Similarly,\n   the tagged data items that were used inside the BOOTP \"vendor\n\
    \   extensions\" field, which were formerly referred to as \"vendor\n   extensions,\"\
    \ are now termed simply \"options.\"\n   DHCP defines a new 'client identifier'\
    \ option that is used to pass an\n   explicit client identifier to a DHCP server.\
    \  This change eliminates\n   the overloading of the 'chaddr' field in BOOTP messages,\
    \ where\n   'chaddr' is used both as a hardware address for transmission of BOOTP\n\
    \   reply messages and as a client identifier.  The 'client identifier'\n   option\
    \ may contain a hardware address, identical to the contents of\n   the 'chaddr'\
    \ field, or it may contain another type of identifier,\n   such as a DNS name.\
    \  Other client identifier types may be defined as\n   needed for use with DHCP.\
    \  New client identifier types will be\n   registered with the IANA [18] and will\
    \ be included in new revisions\n   of the Assigned Numbers document, as well as\
    \ described in detail in\n   future revisions of the DHCP Options [2].\n   0 \
    \                  1                   2                   3\n   0 1 2 3 4 5 6\
    \ 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     op (1)    |   htype (1)   |   hlen (1)    |   hops (1)    |\n   +---------------+---------------+---------------+---------------+\n\
    \   |                            xid (4)                            |\n   +-------------------------------+-------------------------------+\n\
    \   |           secs (2)            |           flags (2)           |\n   +-------------------------------+-------------------------------+\n\
    \   |                          ciaddr  (4)                          |\n   +---------------------------------------------------------------+\n\
    \   |                          yiaddr  (4)                          |\n   +---------------------------------------------------------------+\n\
    \   |                          siaddr  (4)                          |\n   +---------------------------------------------------------------+\n\
    \   |                          giaddr  (4)                          |\n   +---------------------------------------------------------------+\n\
    \   |                                                               |\n   |  \
    \                        chaddr  (16)                         |\n   |        \
    \                                                       |\n   |              \
    \                                                 |\n   +---------------------------------------------------------------+\n\
    \   |                                                               |\n   |  \
    \                        sname   (64)                         |\n   +---------------------------------------------------------------+\n\
    \   |                                                               |\n   |  \
    \                        file    (128)                        |\n   +---------------------------------------------------------------+\n\
    \   |                                                               |\n   |  \
    \                        options (312)                        |\n   +---------------------------------------------------------------+\n\
    \                  Figure 1:  Format of a DHCP message\n   DHCP clarifies the\
    \ interpretation of the 'siaddr' field as the\n   address of the server to use\
    \ in the next step of the client's\n   bootstrap process.  A DHCP server may return\
    \ its own address in the\n   'siaddr' field, if the server is prepared to supply\
    \ the next\n   bootstrap service (e.g., delivery of an operating system executable\n\
    \   image).  A DHCP server always returns its own address in the 'server\n   identifier'\
    \ option.\n   The options field is now variable length, with the minimum extended\n\
    \   to 312 octets.  This brings the minimum size of a DHCP message up to\n   576\
    \ octets, the minimum IP datagram size a host must be prepared to\n   accept [3].\
    \  DHCP clients may negotiate the use of larger DHCP\n   messages through the\
    \ 'Maximum DHCP message size' option.  The options\n   field may be further extended\
    \ into the 'file' and 'sname' fields.\n   A new option, called 'vendor specific\
    \ information', has been added to\n   allow for expansion of the number of options\
    \ that can be supported\n   [2].  Options encapsulated as 'vendor specific information'\
    \ must be\n   carefully defined and documented so as to allow for interoperability\n\
    \   between clients and servers from diferent vendors.  In particular,\n   vendors\
    \ defining 'vendor specific information' MUST document those\n   options in the\
    \ form of the DHCP Options document, MUST choose to\n   represent those options\
    \ either in data types already defined for DHCP\n   options or in other well-defined\
    \ data types, and MUST choose options\n   that can be readily encoded in configuration\
    \ files for exchange with\n   servers provided by other vendors.  Options included\
    \ as 'vendor\n   specific options' MUST be readily supportable by all servers.\n\
    \                                    1 1 1 1 1 1\n                0 1 2 3 4 5\
    \ 6 7 8 9 0 1 2 3 4 5\n                -+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \            B|             MBZ             |\n                -+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                B:  BROADCAST flag\n                MBZ:  MUST BE ZERO (reserved\
    \ for future use)\n                Figure 2:  Format of the 'flags' field\n  \
    \ DHCP uses the 'flags' field [21].  The leftmost bit is defined as the\n   BROADCAST\
    \ (B) flag.  The semantics of this flag are discussed in\n   section 4.1 of this\
    \ document.  The remaining bits of the flags field\n   are reserved for future\
    \ use.  They MUST be set to zero by clients and\n   ignored by servers and relay\
    \ agents.  Figure 2 gives the format of\n   the 'flags' field.\n"
- title: 2.1 Configuration parameters repository
  contents:
  - "2.1 Configuration parameters repository\n   The first service provided by DHCP\
    \ is to provide persistent storage\n   of network parameters for network clients.\
    \  The model of DHCP\n   persistent storage is that the DHCP service stores a\
    \ key-value entry\n   for each client, where the key is some unique identifier\
    \ (for\n   example, an IP subnet number and a unique identifier within the\n \
    \  subnet) and the value contains the configuration parameters for the\n   client.\n\
    \   For example, the key might be the pair (IP-subnet-number, hardware-\n   address),\
    \ allowing for serial or concurrent reuse of a hardware\n   address on different\
    \ subnets, and for hardware addresses that may not\n   be globally unique.  Alternately,\
    \ the key might be the pair (IP-\n   subnet-number, hostname), allowing the server\
    \ to assign parameters\n   intelligently to a host that has been moved to a different\
    \ subnet or\n   has changed hardware addresses (perhaps because the network interface\n\
    \   failed and was replaced).\n   A client can query the DHCP service to retrieve\
    \ its configuration\n   parameters.  The client interface to the configuration\
    \ parameters\n   repository consists of protocol messages to request configuration\n\
    \   parameters and responses from the server carrying the configuration\n   parameters.\n"
- title: 2.2 Dynamic allocation of network addresses
  contents:
  - "2.2 Dynamic allocation of network addresses\n   The second service provided by\
    \ DHCP is the allocation of temporary or\n   permanent network (IP) addresses\
    \ to hosts.  The basic mechanism for\n   the dynamic allocation of network addresses\
    \ is simple: a client\n   requests the use of an address for some period of time.\
    \  The\n   allocation mechanism (the collection of DHCP servers) guarantees not\n\
    \   to reallocate that address within the requested time and attempts to\n   return\
    \ the same network address each time the client requests an\n   address.  In this\
    \ document, the period over which a network address\n   is allocated to a client\
    \ is referred to as a \"lease\" [11].  The\n   client may extend its lease with\
    \ subsequent requests.  The client may\n   issue a message to release the address\
    \ back to the server when the\n   client no longer needs the address.  The client\
    \ may ask for a\n   permanent assignment by asking for an infinite lease.  Even\
    \ when\n   assigning \"permanent\" addresses, a server may choose to give out\n\
    \   lengthy but non-infinite leases to allow detection of the fact that\n   the\
    \ host has been retired.\n   In some environments it will be necessary to reassign\
    \ network\n   addresses due to exhaustion of available addresses.  In such\n \
    \  environments, the allocation mechanism will reuse addresses whose\n   lease\
    \ has expired.  The server should use whatever information is\n   available in\
    \ the configuration information repository to choose an\n   address to reuse.\
    \  For example, the server may choose the least\n   recently assigned address.\
    \  As a consistency check, the allocation\n   mechanism may probe the reused address,\
    \ e.g., with an ICMP echo\n   request, before allocating the address, and the\
    \ client will probe the\n   newly received address, e.g., with ARP.\n"
- title: 3. The Client-Server Protocol
  contents:
  - "3. The Client-Server Protocol\n   DHCP uses the BOOTP message format defined\
    \ in RFC 951 and given in\n   table 1 and figure 1.  The 'op' field of each DHCP\
    \ message sent from\n   a client to a server contains BOOTREQUEST. BOOTREPLY is\
    \ used in the\n   'op' field of each DHCP message sent from a server to a client.\n\
    \   The first four octets of the 'options' field of the DHCP message\n   contain\
    \ the (decimal) values 99, 130, 83 and 99, respectively (this\n   is the same\
    \ magic cookie as is defined in RFC 1497).  The remainder\n   of the 'options'\
    \ field consists a list of tagged parameters that are\n   called \"options\".\
    \  All of the \"vendor extensions\" listed in RFC 1497\n   are also DHCP options.\
    \  A separate document gives the complete set of\n   options defined for use with\
    \ DHCP [2].\n   Several options have been defined so far.  One particular option\
    \ -\n   the \"DHCP message type\" option - must be included in every DHCP\n  \
    \ message.  This option defines the \"type\" of the DHCP message.\n   Additional\
    \ options may be allowed, required, or not allowed,\n   depending on the DHCP\
    \ message type.\n   Throughout this document, DHCP messages that include a 'DHCP\
    \ message\n   type' option will be referred to by the type of the message; e.g.,\
    \ a\n   DHCP message with 'DHCP message type' option type 1 will be referred\n\
    \   to as a \"DHCPDISCOVER\" message.\n"
- title: 3.1 Client-server interaction - allocating a network address
  contents:
  - "3.1 Client-server interaction - allocating a network address\n   The following\
    \ summary of the protocol exchanges between clients and\n   servers refers to\
    \ the DHCP messages described in table 2.  The\n   timeline diagram in figure\
    \ 3 shows the timing relationships in a\n   typical client-server interaction.\
    \  If the client already knows its\n   address, some steps may be omitted; this\
    \ abbreviated interaction is\n   described in section 3.2.\n   1. The client broadcasts\
    \ a DHCPDISCOVER message on its local physical\n      subnet.  The DHCPDISCOVER\
    \ message may include options that suggest\n      values for the network address\
    \ and lease duration.  BOOTP relay\n      agents may pass the message on to DHCP\
    \ servers not on the same\n      physical subnet.\n   2. Each server may respond\
    \ with a DHCPOFFER message that includes an\n      available network address in\
    \ the 'yiaddr' field (and other\n      configuration parameters in DHCP options).\
    \  Servers need not\n      reserve the offered network address, although the protocol\
    \ will\n      work more efficiently if the server avoids allocating the offered\n\
    \      network address to another client.  The server unicasts the\n      DHCPOFFER\
    \ message to the client (using the DHCP/BOOTP relay agent\n      if necessary)\
    \ if possible, or may broadcast the message to a\n      broadcast address (preferably\
    \ 255.255.255.255) on the client's\n      subnet.\n   3. The client receives one\
    \ or more DHCPOFFER messages from one or\n      more servers.  The client may\
    \ choose to wait for multiple\n      responses.  The client chooses one server\
    \ from which to request\n      configuration parameters, based on the configuration\
    \ parameters\n      offered in the DHCPOFFER messages.  The client broadcasts\
    \ a\n      DHCPREQUEST message that MUST include the 'server identifier'\n   \
    \   option to indicate which server it has selected, and may include\n      other\
    \ options specifying desired configuration values.  This\n      DHCPREQUEST message\
    \ is broadcast and relayed through DHCP/BOOTP\n      relay agents.  To help ensure\
    \ that any DHCP/BOOTP relay agents\n      forward the DHCPREQUEST message to the\
    \ same set of DHCP servers\n      that received the original DHCPDISCOVER message,\
    \ the DHCPREQUEST\n      message must use the same value in the DHCP message header's\n\
    \      'secs' field and be sent to the same IP broadcast address as the\n    \
    \  original DHCPDISCOVER message.  The client times out and\n      retransmits\
    \ the DHCPDISCOVER message if the client receives no\n      DHCPOFFER messages.\n\
    \   4. The servers receive the DHCPREQUEST broadcast from the client.\n      Those\
    \ servers not selected by the DHCPREQUEST message use the\n      message as notification\
    \ that the client has declined that server's\n      offer.  The server selected\
    \ in the DHCPREQUEST message commits the\n      binding for the client to persistent\
    \ storage and responds with a\n      DHCPACK message containing the configuration\
    \ parameters for the\n      requesting client.  The combination of 'chaddr' and\
    \ assigned\n      network address constitute an unique identifier for the client's\n\
    \      lease and are used by both the client and server to identify a\n      lease\
    \ referred to in any DHCP messages.  The 'yiaddr' field in the\n      DHCPACK\
    \ messages is filled in with the selected network address.\n      If the selected\
    \ server is unable to satisfy the DHCPREQUEST message\n      (e.g., the requested\
    \ network address has been allocated), the\n      server SHOULD respond with a\
    \ DHCPNAK message.\n      A server may choose to mark addresses offered to clients\
    \ in\n      DHCPOFFER messages as unavailable.  The server should mark an\n  \
    \    address offered to a client in a DHCPOFFER message as available if\n    \
    \  the server receives no DHCPREQUEST message from that client.\n   FIELD    \
    \  OCTETS       DESCRIPTION\n   -----      ------       -----------\n   op   \
    \         1  Message op code / message type.\n                    1 = BOOTREQUEST,\
    \ 2 = BOOTREPLY\n   htype         1  Hardware address type, see ARP section in\
    \ \"Assigned\n                    Numbers\" RFC; e.g., '1' = 10mb ethernet.\n\
    \   hlen          1  Hardware address length (e.g.  '6' for 10mb\n           \
    \         ethernet).\n   hops          1  Client sets to zero, optionally used\
    \ by relay-agents\n                    when booting via a relay-agent.\n   xid\
    \           4  Transaction ID, a random number chosen by the\n               \
    \     client, used by the client and server to associate\n                   \
    \ messages and responses between a client and a\n                    server.\n\
    \   secs          2  Filled in by client, seconds elapsed since client\n     \
    \               started trying to boot.\n   flags         2  Flags (see figure\
    \ 2).\n   ciaddr        4  Client IP address; filled in by client in\n       \
    \             DHCPREQUEST if verifying previously allocated\n                \
    \    configuration parameters.\n   yiaddr        4  'your' (client) IP address.\n\
    \   siaddr        4  IP address of next server to use in bootstrap;\n        \
    \            returned in DHCPOFFER, DHCPACK and DHCPNAK by\n                 \
    \   server.\n   giaddr        4  Relay agent IP address, used in booting via a\n\
    \                    relay-agent.\n   chaddr       16  Client hardware address.\n\
    \   sname        64  Optional server host name, null terminated string.\n   file\
    \        128  Boot file name, null terminated string; \"generic\"\n          \
    \          name or null in DHCPDISCOVER, fully qualified\n                   \
    \ directory-path name in DHCPOFFER.\n   options     312  Optional parameters field.\
    \  See the options\n                    documents for a list of defined options.\n\
    \             Table 1:  Description of fields in a DHCP message\n            \
    \    Server          Client          Server\n            (not selected)      \
    \              (selected)\n                  v               v               v\n\
    \                  |               |               |\n                  |    \
    \ Begins initialization     |\n                  |               |           \
    \    |\n                  | _____________/|\\_____________ |\n               \
    \   |/ DHCPDISCOVER | DHCPDISCOVER \\|\n                  |               |  \
    \             |\n              Determines          |          Determines\n   \
    \          configuration        |         configuration\n                  | \
    \              |               |\n                  |\\              |  ____________/|\n\
    \                  | \\_________    | /DHCPOFFER    |\n                  |  DHCPOFFER\\\
    \   |/              |\n                  |            \\  |               |\n\
    \                  |       Collects replies        |\n                  |    \
    \          \\|               |\n                  |     Selects configuration\
    \     |\n                  |               |               |\n               \
    \   | _____________/|\\_____________ |\n                  |/ DHCPREQUEST  |  DHCPREQUEST\
    \ \\|\n                  |               |               |\n                 \
    \ |               |     Commits configuration\n                  |           \
    \    |               |\n                  |               | _____________/|\n\
    \                  |               |/ DHCPACK      |\n                  |    \
    \           |               |\n                  |    Initialization complete\
    \    |\n                  |               |               |\n                \
    \  .               .               .\n                  .               .    \
    \           .\n                  |               |               |\n         \
    \         |      Graceful shutdown        |\n                  |             \
    \  |               |\n                  |               |\\_____________ |\n \
    \                 |               |  DHCPRELEASE \\|\n                  |    \
    \           |               |\n                  |               |        Discards\
    \ lease\n                  |               |               |\n               \
    \   v               v               v\n     Figure 3: Timeline diagram of messages\
    \ exchanged between DHCP\n               client and servers when allocating a\
    \ new network address\n   Message         Use\n   -------         ---\n   DHCPDISCOVER\
    \ -  Client broadcast to locate available servers.\n   DHCPOFFER    -  Server\
    \ to client in response to DHCPDISCOVER with\n                   offer of configuration\
    \ parameters.\n   DHCPREQUEST  -  Client broadcast to servers requesting offered\n\
    \                   parameters from one server and implicitly declining\n    \
    \               offers from all others.\n   DHCPACK      -  Server to client with\
    \ configuration parameters,\n                   including committed network address.\n\
    \   DHCPNAK      -  Server to client refusing request for configuration\n    \
    \               parameters (e.g., requested network address already\n        \
    \           allocated).\n   DHCPDECLINE  -  Client to server indicating configuration\
    \ parameters\n                   (e.g., network address) invalid.\n   DHCPRELEASE\
    \  -  Client to server relinquishing network address and\n                   cancelling\
    \ remaining lease.\n                          Table 2:  DHCP messages\n   5. The\
    \ client receives the DHCPACK message with configuration\n      parameters.  The\
    \ client performs a final check on the parameters\n      (e.g., ARP for allocated\
    \ network address), and notes the duration\n      of the lease and the lease identification\
    \ cookie specified in the\n      DHCPACK message.  At this point, the client is\
    \ configured.  If the\n      client detects a problem with the parameters in the\
    \ DHCPACK\n      message, the client sends a DHCPDECLINE message to the server\
    \ and\n      restarts the configuration process.  The client should wait a\n \
    \     minimum of ten seconds before restarting the configuration process\n   \
    \   to avoid excessive network traffic in case of looping.\n      If the client\
    \ receives a DHCPNAK message, the client restarts the\n      configuration process.\n\
    \      The client times out and retransmits the DHCPREQUEST message if the\n \
    \     client receives neither a DHCPACK or a DHCPNAK message.  The client\n  \
    \    retransmits the DHCPREQUEST according to the retransmission\n      algorithm\
    \ in section 4.1.  If the client receives neither a DHCPACK\n      or a DHCPNAK\
    \ message after ten retransmissions of the DHCPREQUEST\n      message, the client\
    \ reverts to INIT state and restarts the\n      initialization process.  The client\
    \ SHOULD notify the user that the\n      initialization process has failed and\
    \ is restarting.\n   6. The client may choose to relinquish its lease on a network\
    \ address\n      by sending a DHCPRELEASE message to the server.  The client\n\
    \      identifies the lease to be released by including its network\n      address\
    \ in the 'ciaddr' field and its hardware address in the\n      'chaddr' field.\n"
- title: 3.2 Client-server interaction - reusing a previously allocated network
  contents:
  - "3.2 Client-server interaction - reusing a previously allocated network\n    address\n\
    \   If a client remembers and wishes to reuse a previously allocated\n   network\
    \ address (allocated either by DHCP or some means outside the\n   protocol), a\
    \ client may choose to omit some of the steps described in\n   the previous section.\
    \  The timeline diagram in figure 4 shows the\n   timing relationships in a typical\
    \ client-server interaction for a\n   client reusing a previously allocated network\
    \ address.\n      1. The client broadcasts a DHCPREQUEST message on its local\
    \ subnet.\n         The DHCPREQUEST message includes the client's network address\
    \ in\n         the 'ciaddr' field.  DHCP/BOOTP relay agents pass the message on\n\
    \         to DHCP servers not on the same subnet.\n      2. Servers with knowledge\
    \ of the client's configuration parameters\n         respond with a DHCPACK message\
    \ to the client.\n         If the client's request is invalid (e.g., the client\
    \ has moved\n         to a new subnet), servers may respond with a DHCPNAK message\
    \ to\n         the client.\n      3. The client receives the DHCPACK message with\
    \ configuration\n         prameters.  The client performs a final check on the\
    \ parameters\n         (as in section 3.1), and notes the duration of the lease\
    \ and\n         the lease identification cookie specified in the DHCPACK\n   \
    \      message.  At this point, the client is configured.\n         If the client\
    \ detects a problem with the parameters in the\n         DHCPACK message, the\
    \ client sends a DHCPDECLINE message to the\n         server and restarts the\
    \ configuration process by requesting a\n         new network address.  This action\
    \ corresponds to the client\n         moving to the INIT state in the DHCP state\
    \ diagram, which is\n         described in section 4.4.\n                Server\
    \          Client          Server\n                  v               v       \
    \        v\n                  |               |               |\n            \
    \      |             Begins            |\n                  |         initialization\
    \        |\n                  |               |               |\n            \
    \      |              /|\\              |\n                  |  ___________/ |\
    \ \\___________  |\n                  | /DHCPREQUEST  |  DHCPREQUEST\\ |\n   \
    \               |/              |              \\|\n                  |      \
    \         |               |\n               Locates            |            Locates\n\
    \            configuration         |         configuration\n                 \
    \ |               |               |\n                  |\\              |    \
    \          /|\n                  | \\             |  ___________/ |\n        \
    \          |  \\            | /  DHCPACK    |\n                  |   \\_______\
    \    |/              |\n                  |    DHCPACK\\   |               |\n\
    \                  |         Initialization        |\n                  |    \
    \        complete           |\n                  |              \\|          \
    \     |\n                  |               |               |\n               \
    \   |          (Subsequent          |\n                  |            DHCPACKS\
    \           |\n                  |            ignored)           |\n         \
    \         |               |               |\n                  |             \
    \  |               |\n                  v               v               v\n  \
    \   Figure 4: Timeline diagram of messages exchanged between DHCP\n          \
    \     client and servers when reusing a previously allocated\n               network\
    \ address\n         If the client receives a DHCPNAK message, it cannot reuse\
    \ its\n         remembered network address.  It must instead request a new\n \
    \        address by restarting the configuration process, this time\n        \
    \ using the (non-abbreviated) procedure described in section\n         3.1.  This\
    \ action also corresponds to the client moving to\n         the INIT state in\
    \ the DHCP state diagram.\n         The client times out and retransmits the DHCPREQUEST\
    \ message if\n         the client receives neither a DHCPACK nor a DHCPNAK message.\n\
    \         The   time between retransmission MUST be chosen according to\n    \
    \     the algorithm given in section 4.1.  If the client receives no\n       \
    \  answer after transmitting 4 DHCPREQUEST messages, the client\n         MAY\
    \ choose to use the previously allocated network address and\n         configuration\
    \ parameters for the remainder of the unexpired\n         lease.  This corresponds\
    \ to moving to BOUND state in the client\n         state transition diagram shown\
    \ in figure 5.\n      4. The client may choose to relinquish its lease on a network\n\
    \         address by sending a DHCPRELEASE message to the server.  The\n     \
    \    client identifies the lease to be released with the lease\n         identification\
    \ cookie.\n         Note that in this case, where the client retains its network\n\
    \         address locally, the client will not normally relinquish its\n     \
    \    lease during a graceful shutdown.  Only in the case where the\n         client\
    \ explicitly needs to relinquish its lease, e.g., the client\n         is about\
    \ to be moved to a different subnet, will the client send\n         a DHCPRELEASE\
    \ message.\n"
- title: 3.3 Interpretation and representation of time values
  contents:
  - "3.3 Interpretation and representation of time values\n   A client acquires a\
    \ lease for a network address for a fixed period of\n   time (which may be infinite).\
    \  Throughout the protocol, times are to\n   be represented in units of seconds.\
    \  The time value of 0xffffffff is\n   reserved to represent \"infinity\".  The\
    \ minimum lease duration is one\n   hour.\n   As clients and servers may not have\
    \ synchronized clocks, times are\n   represented in DHCP messages as relative\
    \ times, to be interpreted\n   with respect to the client's local clock.  Representing\
    \ relative\n   times in units of seconds in an unsigned 32 bit word gives a range\
    \ of\n   relative times from 0 to approximately 100 years, which is sufficient\n\
    \   for the relative times to be measured using DHCP.\n   The algorithm for lease\
    \ duration interpretation given in the previous\n   paragraph assumes that client\
    \ and server clocks are stable relative\n   to each other.  If there is drift\
    \ between the two clocks, the server\n   may consider the lease expired before\
    \ the client does.  To\n   compensate, the server may return a shorter lease duration\
    \ to the\n   client than the server commits to its local database of client\n\
    \   information.\n"
- title: 3.4 Host parameters in DHCP
  contents:
  - "3.4 Host parameters in DHCP\n   Not all clients require initialization of all\
    \ parameters listed in\n   Appendix A.  Two techniques are used to reduce the\
    \ number of\n   parameters transmitted from the server to the client.  First,\
    \ most of\n   the parameters have defaults defined in the Host Requirements RFCs;\n\
    \   if the client receives no parameters from the server that override\n   the\
    \ defaults, a client uses those default values.  Second, in its\n   initial DHCPDISCOVER\
    \ or DHCPREQUEST message, a client may provide the\n   server with a list of specific\
    \ parameters the client is interested\n   in.\n   The client SHOULD include the\
    \ 'maximum DHCP message size' option to\n   let the server know how large the\
    \ server may make its DHCP messages.\n   The parameters returned to a client may\
    \ still exceed the space\n   allocated to options in a DHCP message.  In this\
    \ case, two additional\n   options flags (which must appear in the 'options' field\
    \ of the\n   message) indicate that the 'file' and 'sname' fields are to be used\n\
    \   for options.\n   The client can inform the server which configuration parameters\
    \ the\n   client is interested in by including the 'parameter request list'\n\
    \   option.  The data portion of this option explicitly lists the options\n  \
    \ requested by tag number.\n   In addition, the client may suggest values for\
    \ the network address\n   and lease time in the DHCPDISCOVER message.  The client\
    \ may include\n   the 'requested IP address' option to suggest that a particular\
    \ IP\n   address be assigned, and may include the 'IP address lease time'\n  \
    \ option to suggest the lease time it would like.  No other options\n   representing\
    \ \"hints\" at configuration parameters are allowed in a\n   DHCPDISCOVER or DHCPREQUEST\
    \ message.  The 'ciaddr' field is to be\n   filled in only in a DHCPREQUEST message\
    \ when the client is requesting\n   use of a previously allocated IP address.\n\
    \   If a server receives a DHCPREQUEST message with an invalid 'ciaddr',\n   the\
    \ server SHOULD respond to the client with a DHCPNAK message and\n   may choose\
    \ to report the problem to the system administrator.  The\n   server may include\
    \ an error message in the 'message' option.\n"
- title: 3.5 Use of DHCP in clients with multiple interfaces
  contents:
  - "3.5 Use of DHCP in clients with multiple interfaces\n   A host with multiple\
    \ network interfaces must use DHCP through each\n   interface independently to\
    \ obtain configuration information\n   parameters for those separate interfaces.\n"
- title: 3.6 When clients should use DHCP
  contents:
  - "3.6 When clients should use DHCP\n   A host should use DHCP to reacquire or verify\
    \ its IP address and\n   network parameters whenever the local network parameters\
    \ may have\n   changed; e.g., at system boot time or after a disconnection from\
    \ the\n   local network, as the local network configuration may change without\n\
    \   the host's or user's knowledge.\n   If a host has knowledge of a previous\
    \ network address and is unable\n   to contact a local DHCP server, the host may\
    \ continue to use the\n   previous network address until the lease for that address\
    \ expires.\n   If the lease expires before the host can contact a DHCP server,\
    \ the\n   host must immediately discontinue use of the previous network address\n\
    \   and may inform local users of the problem.\n"
- title: 4. Specification of the DHCP client-server protocol
  contents:
  - "4. Specification of the DHCP client-server protocol\n   In this section, we assume\
    \ that a DHCP server has a block of network\n   addresses from which it can satisfy\
    \ requests for new addresses.  Each\n   server also maintains a database of allocated\
    \ addresses and leases in\n   local permanent storage.\n"
- title: 4.1 Constructing and sending DHCP messages
  contents:
  - "4.1 Constructing and sending DHCP messages\n   DHCP clients and servers both\
    \ construct DHCP messages by filling in\n   fields in the fixed format section\
    \ of the message and appending\n   tagged data items in the variable length option\
    \ area.  The options\n   area includes first a four-octet 'magic cookie' (which\
    \ was described\n   in section 3), followed by the options.  The last option must\
    \ always\n   be the 'end' option.\n   DHCP uses UDP as its transport protocol.\
    \  DHCP messages from a client\n   to a server are sent to the 'DHCP server' port\
    \ (67), and DHCP\n   messages from a server to a client are sent to the 'DHCP\
    \ client' port\n   (68).\n   DHCP messages broadcast by a client prior to that\
    \ client obtaining\n   its IP address must have the source address field in the\
    \ IP header\n   set to 0.\n   If the 'giaddr' field in a DHCP message from a client\
    \ is non-zero,\n   the server sends any return messages to the 'DHCP server' port\
    \ on the\n   DHCP relaying agent whose address appears in 'giaddr'.  If the\n\
    \   'giaddr' field is zero, the client is on the same subnet, and the\n   server\
    \ sends any return messages to either the client's network\n   address, if that\
    \ address was supplied in the 'ciaddr' field, or to\n   the client's hardware\
    \ address or to the local subnet broadcast\n   address.\n   If the options in\
    \ a DHCP message extend into the 'sname' and 'file'\n   fields, the 'option overload'\
    \ option MUST appear in the 'options'\n   field, with value 1, 2 or 3, as specified\
    \ in the DHCP options\n   document [2].  If the 'option overload' option is present\
    \ in the\n   'options' field, the options in the 'options' field MUST be\n   terminated\
    \ by an 'end' option, and MAY contain one or more 'pad'\n   options to fill the\
    \ options field.  The options in the 'sname' and\n   'file' fields (if in use\
    \ as indicated by the 'options overload'\n   option) MUST begin with the first\
    \ octet of the field, MUST be\n   terminated by an 'end' option, and MUST be followed\
    \ by 'pad' options\n   to fill the remainder of the field.  Any individual option\
    \ in the\n   'options', 'sname' and 'file' fields MUST be entirely contained in\n\
    \   that field.  The options in the 'options' field MUST be interpreted\n   first,\
    \ so that any 'option overload' options may be interpreted.  The\n   'file' field\
    \ MUST be interpreted next (if the 'option overload'\n   option indicates that\
    \ the 'file' field contains DHCP options),\n   followed by the 'sname' field.\n\
    \   DHCP clients are responsible for all message retransmission.  The\n   client\
    \ MUST adopt a retransmission strategy that incorporates a\n   randomized exponential\
    \ backoff algorithm to determine the delay\n   between retransmissions.  The delay\
    \ before the first retransmission\n   MUST be 4 seconds randomized by the value\
    \ of a uniform random number\n   chosen from the range -1 to +1.  Clients with\
    \ clocks that provide\n   resolution granularity of less than one second may choose\
    \ a non-\n   integer randomization value.  The delay before the next\n   retransmission\
    \ MUST be 8 seconds randomized by the value of a uniform\n   number chosen from\
    \ the range -1 to +1.  The retransmission delay MUST\n   be doubled with subsequent\
    \ retransmissions up to a maximum of 64\n   seconds.  The client MAY provide an\
    \ indication of retransmission\n   attempts to the user as an indication of the\
    \ progress of the\n   configuration process.  The protocol specification in the\
    \ remainder\n   of this section will describe, for each DHCP message, when it\
    \ is\n   appropriate for the client to retransmit that message forever, and\n\
    \   when it is appropriate for a client to abandon that message and\n   attempt\
    \ to use a different DHCP message.\n   Normally, DHCP servers and BOOTP relay\
    \ agents attempt to deliver\n   DHCPOFFER, DHCPACK and DHCPNAK messages directly\
    \ to the client using\n   unicast delivery.  The IP destination address (in the\
    \ IP header) is\n   set to the DHCP 'yiaddr' address and the link-layer destination\n\
    \   address is set to the DHCP 'chaddr' address.  Unfortunately, some\n   client\
    \ implementations are unable to receive such unicast IP\n   datagrams until the\
    \ implementation has been configured with a valid\n   IP address (leading to a\
    \ deadlock in which the client's IP address\n   cannot be delivered until the\
    \ client has been configured with an IP\n   address).\n   A client that cannot\
    \ receive unicast IP datagrams until its protocol\n   software has been configured\
    \ with an IP address SHOULD set the\n   BROADCAST bit in the 'flags' field to\
    \ 1 in any DHCPDISCOVER or\n   DHCPREQUEST messages that client sends.  The BROADCAST\
    \ bit will\n   provide a hint to the DHCP server and BOOTP relay agent to broadcast\n\
    \   any messages to the client on the client's subnet.  A client that can\n  \
    \ receive unicast IP datagrams before its protocol software has been\n   configured\
    \ SHOULD clear the BROADCAST bit to 0.  The BOOTP\n   clarifications document\
    \ discusses the ramifications of the use of the\n   BROADCAST bit [21].\n   A\
    \ server or relay agent sending or relaying a DHCP message directly\n   to a DHCP\
    \ client (i.e., not to a relay agent specified in the\n   'giaddr' field) SHOULD\
    \ examine the BROADCAST bit in the 'flags'\n   field.  If this bit is set to 1,\
    \ the DHCP message SHOULD be sent as\n   an IP broadcast using an IP broadcast\
    \ address (preferably\n   255.255.255.255) as the IP destination address and the\
    \ link-layer\n   broadcast address as the link-layer destination address.  If\
    \ the\n   BROADCAST bit is cleared to 0, the message SHOULD be sent as an IP\n\
    \   unicast to the IP address specified in the 'yiaddr' field and the\n   link-layer\
    \ address specified in the 'chaddr' field.  If unicasting is\n   not possible,\
    \ the message MAY be sent as an IP broadcast using an IP\n   broadcast address\
    \ (preferably 255.255.255.255) as the IP destination\n   address and the link-layer\
    \ broadcast address as the link-layer\n   destination address.\n"
- title: 4.2 DHCP server administrative controls
  contents:
  - "4.2 DHCP server administrative controls\n   DHCP servers are not required to\
    \ respond to every DHCPDISCOVER and\n   DHCPREQUEST message they receive.  For\
    \ example, a network\n   administrator, to retain stringent control over the hosts\
    \ attached to\n   the network, may choose to configure DHCP servers to respond\
    \ only to\n   hosts that have been previously registered through some external\n\
    \   mechanism.  The DHCP specification describes only the interactions\n   between\
    \ clients and servers when the clients and servers choose to\n   interact; it\
    \ is beyond the scope of the DHCP specification to\n   describe all of the administrative\
    \ controls that system\n   administrators might want to use.  Specific DHCP server\n\
    \   implementations may incorporate any controls or policies desired by a\n  \
    \ network administrator.\n   In some environments, a DHCP server will have to\
    \ consider the values\n   of the 'chaddr' field and/or the 'class-identifier'\
    \ option included\n   in the DHCPDISCOVER or DHCPREQUEST messages when determining\
    \ the\n   correct parameters for a particular client.  For example, an\n   organization\
    \ might have a separate bootstrap server for each type of\n   client it uses,\
    \ requiring the DHCP server to examine the 'class-\n   identifier' to determine\
    \ which bootstrap server address to return in\n   the 'siaddr' field of a DHCPOFFER\
    \ or DHCPACK message.\n   A DHCP server must use some unique identifier to associate\
    \ a client\n   with its lease.  The client may choose to explicitly provide the\n\
    \   identifier through the 'client identifier' option.  If the client\n   does\
    \ not provide a 'client identifier' option, the server MUST use\n   the contents\
    \ of the 'chaddr' field to identify the client.\n   DHCP clients are free to use\
    \ any strategy in selecting a DHCP server\n   among those from which the client\
    \ receives a DHCPOFFER message.  The\n   client implementation of DHCP should\
    \ provide a mechanism for the user\n   to select directly the 'class-identifier'\
    \ value.\n"
- title: 4.3 DHCP server behavior
  contents:
  - "4.3 DHCP server behavior\n   A DHCP server processes incoming DHCP messages from\
    \ a client based on\n   the current state of the binding for that client.  A DHCP\
    \ server can\n   receive the following messages from a client:\n      o DHCPDISCOVER\n\
    \      o DHCPREQUEST\n      o DHCPDECLINE\n      o DHCPRELEASE\n   Table 3 gives\
    \ the use of the fields and options in a DHCP message by\n   a server.  The remainder\
    \ of this section describes the action of the\n   DHCP server for each possible\
    \ incoming message.\n"
- title: 4.3.1 DHCPDISCOVER message
  contents:
  - "4.3.1 DHCPDISCOVER message\n   When a server receives a DHCPDISCOVER message\
    \ from a client, the\n   server chooses a network address for the requesting client.\
    \  If no\n   address is available, the server may choose to report the problem\
    \ to\n   the system administrator and may choose to reply to the client with a\n\
    \   DHCPNAK message.  If the server chooses to respond to the client, it\n   may\
    \ include an error message in the 'message' option.  If an address\n   is available,\
    \ the new address should be chosen as follows:\n   o The client's previous address\
    \ as recorded in the client's binding,\n     if that address is in the server's\
    \ pool of available addresses and\n     not already allocated, else\n   o The\
    \ address requested in the 'Requested IP Address' option, if that\n     address\
    \ is valid and not already allocated, else\n   o A new address allocated from\
    \ the server's pool of available\n     addresses.\n  Field      DHCPOFFER    \
    \        DHCPACK             DHCPNAK\n  -----      ---------            -------\
    \             -------\n  'op'       BOOTREPLY            BOOTREPLY           BOOTREPLY\n\
    \  'htype'    (From \"Assigned Numbers\" RFC)\n  'hlen'     (Hardware address\
    \ length in octets)\n  'hops'     0                    0                   0\n\
    \  'xid'      'xid' from client    'xid' from client   'xid' from client\n   \
    \          DHCPDISCOVER         DHCPREQUEST         DHCPREQUEST\n            \
    \ message              message             message\n  'secs'     0           \
    \         0                   0\n  'ciaddr'   0                    'ciaddr' from\
    \       'ciaddr' from\n                                  DHCPREQUEST or 0    DHCPREQUEST\
    \ or 0\n  'yiaddr'   IP address offered   IP address          0\n            \
    \ to client            assigned to client\n  'siaddr'   IP address of next   IP\
    \ address of next  0\n             bootstrap server     bootstrap server\n  'flags'\
    \    if 'giaddr' is not 0 then 'flags' from client message else 0\n  'giaddr'\
    \   0                    0                   0\n  'chaddr'   'chaddr' from   \
    \     'chaddr' from       'chaddr' from\n             client               client\
    \ DHCPREQUEST  client DHCPREQUEST\n             DHCPDISCOVER         message \
    \            message\n             message\n  'sname'    Server host name    \
    \ Server host name    (unused)\n             or options           or options\n\
    \  'file'     Client boot file     Client boot file    (unused)\n            \
    \ name or options      name or options\n  'options'  options              options\n\
    \  Option                   DHCPOFFER        DHCPACK          DHCPNAK\n  ------\
    \                   ---------        -------          -------\n  Requested IP\
    \ address     MUST NOT         MUST NOT         MUST NOT\n  IP address lease time\
    \    MUST             MUST             MUST NOT\n  Use 'file'/'sname'       MAY\
    \              MAY              MUST NOT\n  fields\n  DHCP message type      \
    \  DHCPOFFER        DHCPACK          DHCPNAK\n  Parameter request list   MUST\
    \ NOT         MUST NOT         MUST NOT\n  Message                  SHOULD   \
    \        SHOULD           SHOULD\n  Client identifier        MUST NOT        \
    \ MUST NOT         MUST NOT\n  Class identifier         MUST NOT         MUST\
    \ NOT         MUST NOT\n  Server identifier        MUST             MAY      \
    \        MAY\n  Maximum message size     MUST NOT         MUST NOT         MUST\
    \ NOT\n  All others               MAY              MAY              MUST NOT\n\
    \           Table 3:  Fields and options used by DHCP servers\n   As described\
    \ in section 4.2, a server MAY, for administrative\n   reasons, assign an address\
    \ other than the one requested, or may\n   refuse to allocate an address to a\
    \ particular client even though free\n   addresses are available.\n   While not\
    \ required for correct operation of DHCP, the server should\n   not reuse the\
    \ selected network address before the client responds to\n   the server's DHCPOFFER\
    \ message.  The server may choose to record the\n   address as offered to the\
    \ client.\n   The server must also choose an expiration time for the lease, as\n\
    \   follows:\n   o IF the client has not requested a specific lease in the\n \
    \    DHCPDISCOVER message and the client already has an assigned network\n   \
    \  address, the server returns the lease expiration time previously\n     assigned\
    \ to that address (note that the client must explicitly\n     request a specific\
    \ lease to extend the expiration time on a\n     previously assigned address),\
    \ ELSE\n   o IF the client has not requested a specific lease in the\n     DHCPDISCOVER\
    \ message and the client does not have an assigned\n     network address, the\
    \ server assigns a locally configured default\n     lease time, ELSE\n   o IF\
    \ the client has requested a specific lease in the DHCPDISCOVER\n     message\
    \ (regardless of whether the client has an assigned network\n     address), the\
    \ server may choose either to return the requested\n     lease (if the lease is\
    \ acceptable to local policy) or select\n     another lease.\n   Once the network\
    \ address and lease have been determined, the server\n   constructs a DHCPOFFER\
    \ message with the offered configuration\n   parameters.  It is important for\
    \ all DHCP servers to return the same\n   parameters (with the possible exception\
    \ of a newly allocated network\n   address) to ensure predictable host behavior\
    \ regardless of the which\n   server the client selects.  The configuration parameters\
    \ MUST be\n   selected by applying the following rules in the order given below.\n\
    \   The network administrator is responsible for configuring multiple\n   DHCP\
    \ servers to ensure uniform responses from those servers.  The\n   server MUST\
    \ return to the client:\n   o The client's network address, as determined by the\
    \ rules given\n     earlier in this section, and the subnet mask for the network\
    \ to\n     which the client is connected,\n   o The expiration time for the client's\
    \ lease, as determined by the\n     rules given earlier in this section,\n   o\
    \ Parameters requested by the client, according to the following\n     rules:\n\
    \        -- IF the server has been explicitly configured with a default\n    \
    \       value for the parameter, the server MUST include that value\n        \
    \   in an appropriate option in the 'option' field, ELSE\n        -- IF the server\
    \ recognizes the parameter as a parameter\n           defined in the Host Requirements\
    \ Document, the server MUST\n           include the default value for that parameter\
    \ as given in the\n           Host Requirements Document in an appropriate option\
    \ in the\n           'option' field, ELSE\n        -- The server MUST NOT return\
    \ a value for that parameter,\n   o Any parameters from the existing binding that\
    \ differ from the Host\n     Requirements documents defaults,\n   o Any parameters\
    \ specific to this client (as identified by\n     the contents of 'chaddr' in\
    \ the DHCPDISCOVER or DHCPREQUEST\n     message), e.g., as configured by the network\
    \ administrator,\n   o Any parameters specific to this client's class (as identified\n\
    \     by the contents of the 'class identifier' option in the\n     DHCPDISCOVER\
    \ or DHCPREQUEST message), e.g., as configured by\n     the network administrator;\
    \ the parameters MUST be identified\n     by an exact match between the client's\
    \ 'client class' and the\n     client class identified in the server,\n   o Parameters\
    \ with non-default values on the client's subnet.\n   The server inserts the 'xid'\
    \ field from the DHCPDISCOVER message into\n   the 'xid' field of the DHCPOFFER\
    \ message and sends the DHCPOFFER\n   message to the requesting client.\n"
- title: 4.3.2 DHCPREQUEST message
  contents:
  - "4.3.2 DHCPREQUEST message\n   A DHCPREQUEST message may come from a client responding\
    \ to a\n   DHCPOFFER message from a server, or from a client verifying a\n   previously\
    \ allocated IP address.  If the DHCPREQUEST message contains\n   a 'server identifier'\
    \ option, the message is in response to a\n   DHCPOFFER message.  Otherwise, the\
    \ message is a request to renew or\n   extend an existing lease.\n   Consider\
    \ first the case of a DHCPREQUEST message in response to a\n   DHCPOFFER message.\
    \  If the server is identified in the 'server\n   identifier' option in the DHCPREQUEST\
    \ message, the server checks to\n   confirm that the requested parameters are\
    \ acceptable.  Usually, the\n   requested parameters will match those returned\
    \ to the client in the\n   DHCPOFFER message; however, the client may choose to\
    \ request a\n   different lease duration.  Also, there is no requirement that\
    \ the\n   server cache the parameters from the DHCPOFFER message.  The server\n\
    \   must simply check that the parameters requested in the DHCPREQUEST\n   are\
    \ acceptable.  If the parameters are acceptable, the server records\n   the new\
    \ client binding and returns a DHCPACK message to the client.\n   If the requested\
    \ parameters are unacceptable, e.g., the requested\n   lease time is unacceptable\
    \ to local policy, the server sends a\n   DHCPNAK message to the client.  The\
    \ server may choose to return an\n   error message in the 'message' option.\n\
    \   If a different server is identified in the 'server identifier' field,\n  \
    \ the client has selected a different server from which to obtain\n   configuration\
    \ parameters.  The server may discard any information it\n   may have cached about\
    \ the client's request, and may free the network\n   address that it had offered\
    \ to the client.\n   Note that the client may choose to collect several DHCPOFFER\
    \ messages\n   and select the \"best\" offer.  The client indicates its selection\
    \ by\n   identifying the offering server in the DHCPREQUEST message.  If the\n\
    \   client receives no acceptable offers, the client may choose to try\n   another\
    \ DHCPDISCOVER message.  Therefore, the servers may not receive\n   a specific\
    \ DHCPREQUEST from which they can decide whether or not the\n   client has accepted\
    \ the offer.  Because the servers have not\n   committed any network address assignments\
    \ on the basis of a\n   DHCPOFFER, servers are free to reuse offered network addresses\
    \ in\n   response to subsequent requests.  As an implementation detail,\n   servers\
    \ should not reuse offered addresses and may use an\n   implementation-specific\
    \ timeout mechanism to decide when to reuse an\n   offered address.\n   In the\
    \ second case, when there is no 'server identifier' option, the\n   client is\
    \ renewing or extending a previously allocated IP address.\n   The server checks\
    \ to confirm that the requested parameters are\n   acceptable.  If the parameters\
    \ specified in the DHCPREQUEST message\n   match the previous parameters, or if\
    \ the request for an extension of\n   the lease (indicated by an extended 'IP\
    \ address lease time' option)\n   is acceptable, the server returns a DHCPACK\
    \ message to the requesting\n   client.  Otherwise, the server returns a DHCPNAK\
    \ message to the\n   client.  In particular, if the previously allocated network\
    \ address\n   in the 'ciaddr' field from the client does not match the network\n\
    \   address recorded by the server for that client, the server sends a\n   DHCPNAK\
    \ to the client.\n   A DHCP server chooses the parameters to return in a DHCPACK\
    \ message\n   according to the same rules as used in constructing a DHCPOFFER\n\
    \   message, as given in section 4.3.1.\n"
- title: 4.3.3 DHCPDECLINE message
  contents:
  - "4.3.3 DHCPDECLINE message\n   If the server receives a DHCPDECLINE message, the\
    \ client has\n   discovered through some other means that the suggested network\n\
    \   address is already in use.  The server MUST mark the network address\n   as\
    \ not allocated and SHOULD notify the local system administrator of\n   a possible\
    \ configuration problem.\n"
- title: 4.3.4 DHCPRELEASE message
  contents:
  - "4.3.4 DHCPRELEASE message\n   Upon receipt of a DHCPRELEASE message, the server\
    \ marks the network\n   address as not allocated.  The server should retain a\
    \ record of the\n   client's initialization parameters for possible reuse in response\
    \ to\n   subsequent requests from the client.\n"
- title: 4.4 DHCP client behavior
  contents:
  - "4.4 DHCP client behavior\n   Figure 5 gives a state-transition diagram for a\
    \ DHCP client.  A\n   client can receive the following messages from a server:\n\
    \      o DHCPOFFER\n      o DHCPACK\n      o DHCPNAK\n   Table 4 gives the use\
    \ of the fields and options in a DHCP message by\n   a client.  The remainder\
    \ of this section describes the action of the\n   DHCP client for each possible\
    \ incoming message.  The description in\n   the following section corresponds\
    \ to the full configuration procedure\n   previously described in section 3.1,\
    \ and the text in the subsequent\n   section corresponds to the abbreviated configuration\
    \ procedure\n   described in section 3.2.\n"
- title: 4.4.1 Initialization and allocation of network address
  contents:
  - "4.4.1 Initialization and allocation of network address\n   The client begins\
    \ in INIT state and forms a DHCPDISCOVER message.\n   The client should wait a\
    \ random time between one and ten seconds to\n   desynchronize the use of DHCP\
    \ at startup.  The client sets 'ciaddr'\n   to 0x00000000.  The client MAY request\
    \ specific parameters by\n   including the 'parameter request list' option.  The\
    \ client MAY\n   suggest a network address and/or lease time by including the\n\
    \   'requested IP address' and 'IP address lease time' options.  The\n   client\
    \ MUST include its hardware address in the 'chaddr' field for\n   use in delivery\
    \ of DHCP reply messages.  The client MAY include a\n   different unique identifier\
    \ in the 'client identifier' option.  If\n   the client does not include the 'client\
    \ identifier' option, the\n   server will use the contents of the 'chaddr' field\
    \ to identify the\n   client's lease.\n   The client generates and records a random\
    \ transaction identifier and\n   inserts that identifier into the 'xid' field.\
    \  The client records its\n   own local time for later use in computing the lease\
    \ expiration.  The\n   client then broadcasts the DHCPDISCOVER on the local hardware\n\
    \   broadcast address to 0xffffffff IP broadcast address and 'DHCP\n   server'\
    \ UDP port.\n   If the 'xid' of an arriving DHCPOFFER message does not match the\n\
    \   'xid' of the most recent DHCPDISCOVER message, the DHCPOFFER message\n   must\
    \ be silently discarded.  Any arriving DHCPACK messages must be\n   silently discarded.\n\
    \   The client collects DHCPOFFER messages over a period of time, selects\n  \
    \ one DHCPOFFER message from the (possibly many) incoming DHCPOFFER\n   messages\
    \ (e.g., the first DHCPOFFER message or the DHCPOFFER message\n   from the previously\
    \ used server) and extracts the server address from\n   the 'server identifier'\
    \ option in the DHCPOFFER message.  The time\n   over which the client collects\
    \ messages and the mechanism used to\n   select one DHCPOFFER are implementation\
    \ dependent.  The client may\n   perform a check on the suggested address to ensure\
    \ that the address\n   is not already in use.  For example, if the client is on\
    \ a network\n   that supports ARP, the client may issue an ARP request for the\n\
    \   suggested request.  When broadcasting an ARP request for the\n   suggested\
    \ address, the client must fill in its own hardware address\n   as the sender's\
    \ hardware address, and 0 as the sender's IP address,\n   to avoid confusing ARP\
    \ caches in other hosts on the same subnet.  If\n   the network address appears\
    \ to be in use, the client sends a\n   DHCPDECLINE message to the server and waits\
    \ for another DHCPOFFER. As\n   the client does not have a valid network address,\
    \ the client must\n   broadcast the DHCPDECLINE message.\n --------          \
    \                     -------\n"
- title: '|        | +-------------------------->|       |<-------------------+'
  contents:
  - '|        | +-------------------------->|       |<-------------------+

    '
- title: '| INIT/  | |     +-------------------->| INIT  |                    |'
  contents:
  - '| INIT/  | |     +-------------------->| INIT  |                    |

    '
- title: '| REBOOT |DHCPNAK/         +---------->|       |<---+               |'
  contents:
  - '| REBOOT |DHCPNAK/         +---------->|       |<---+               |

    '
- title: '|        |Restart|         |            -------     |               |'
  contents:
  - "|        |Restart|         |            -------     |               |\n --------\
    \  |  DHCPNAK/     |               |                        |\n    |      Discard\
    \ offer   |      -/Send DHCPDISCOVER               |\n"
- title: -/Send DHCPREQUEST         |               |                        |
  contents:
  - "-/Send DHCPREQUEST         |               |                        |\n    |\
    \      |     |      DHCPACK            v        |               |\n -----------\
    \     |   (not accept.)/   -----------   |               |\n"
- title: '|           |    |  Send DHCPDECLINE |           |  |               |'
  contents:
  - '|           |    |  Send DHCPDECLINE |           |  |               |

    '
- title: '| REBOOTING |    |         |         | SELECTING |  |               |'
  contents:
  - '| REBOOTING |    |         |         | SELECTING |  |               |

    '
- title: '|           |    |        /          |           |  |               |'
  contents:
  - "|           |    |        /          |           |  |               |\n -----------\
    \     |       /            -----------   |               |\n    |            |\
    \      /                  |        |               |\n"
- title: DHCPACK/         |     /  +----------------+        |               |
  contents:
  - 'DHCPACK/         |     /  +----------------+        |               |

    '
- title: Record lease,    |    |   v                         |               |
  contents:
  - 'Record lease,    |    |   v                         |               |

    '
- title: set timers      ------------                        |               |
  contents:
  - "set timers      ------------                        |               |\n    |\
    \   +----->|            |             DHCPNAK, Lease expired/   |\n    |   | \
    \     | REQUESTING |                  Halt network         |\n    DHCPOFFER/ |\
    \            |                       |               |\n    Discard     ------------\
    \                        |               |\n    |   |        |        |      \
    \             -----------           |\n    |   +--------+     DHCPACK/       \
    \       |           |          |\n    |              Record lease, set    -----|\
    \ REBINDING |          |\n    |                timers T1, T2     /     |     \
    \      |          |\n    |                     |        DHCPACK/   -----------\
    \           |\n    |                     v     Record lease, set   ^         \
    \      |\n    +----------------> -------      /Timers T1,T2   |              \
    \ |\n               +----->|       |<---+                |               |\n \
    \              |      | BOUND |<---+                |               |\n  DHCPOFFER,\
    \ DHCPACK, |       |    |            T2 expires/   DHCPNAK/\n   DHCPNAK/Discard\
    \     -------     |             Broadcast  Halt network\n               |    \
    \   | |         |            DHCPREQUEST         |\n               +-------+ |\
    \        DHCPACK/          |               |\n                    T1 expires/\
    \   Record lease, set |               |\n                 Send DHCPREQUEST timers\
    \ T1, T2     |               |\n                 to leasing server |         \
    \       |               |\n                         |   ----------           \
    \  |               |\n                         |  |          |------------+  \
    \             |\n                         +->| RENEWING |                    \
    \        |\n                            |          |----------------------------+\n\
    \                             ----------\n          Figure 5:  State-transition\
    \ diagram for DHCP clients\n  Field      DHCPDISCOVER          DHCPREQUEST   \
    \        DHCPDECLINE,\n                                                      \
    \   DHCPRELEASE\n  -----      ------------          -----------           -----------\n\
    \  'op'       BOOTREQUEST           BOOTREQUEST           BOOTREQUEST\n  'htype'\
    \    (From \"Assigned Numbers\" RFC)\n  'hlen'     (Hardware address length in\
    \ octets)\n  'hops'     0                     0                     0\n  'xid'\
    \      selected by client    selected by client    selected by\n             \
    \                                            client\n  'secs'     (opt.)     \
    \           (opt.)                0\n  'flags'    Set 'BROADCAST'       Set 'BROADCAST'\n\
    \             flag if client        flag if client\n             requires broadcast\
    \    requires broadcast\n             reply                 reply\n          \
    \   0\n  'ciaddr'   0                     previously            ciaddr\n     \
    \                              allocated newtork\n                           \
    \        address\n  'yiaddr'   0                     0                     0\n\
    \  'siaddr'   0                     0                     0\n  'giaddr'   0  \
    \                   0                     0\n  'chaddr'   client's hardware  \
    \   client's hardware     client's\n                                         \
    \                hardware\n             address               address        \
    \       address\n  'sname'    options, if           options, if           (unused)\n\
    \             indicated in          indicated in\n             'sname/file'  \
    \        'sname/file'\n             option; otherwise     option; otherwise\n\
    \             unused                unused\n  'file'     options, if         \
    \  options, if           (unused)\n             indicated in          indicated\
    \ in\n             'sname/file'          'sname/file'\n             option; otherwise\
    \     option; otherwise\n             'generic' name or     'generic' name or\n\
    \             null                  null\n  'options'  options               options\
    \               (unused)\n  Option                     DHCPDISCOVER  DHCPREQUEST\
    \      DHCPDECLINE,\n                                                        \
    \    DHCPRELEASE\n  ------                     ------------  -----------     \
    \ -----------\n  Requested IP address       MAY           MUST NOT         MUST\
    \ NOT\n  IP address lease time      MAY           MAY              MUST NOT\n\
    \  Use 'file'/'sname' fields  MAY           MAY              MAY\n  DHCP message\
    \ type          DHCPDISCOVER  DHCPREQUEST      DHCPDECLINE/\n                \
    \                                            DHCPRELEASE\n  Client identifier\
    \          MAY           MAY              MAY\n  Class identifier           SHOULD\
    \        SHOULD           MUST NOT\n  Server identifier          MUST NOT    \
    \  MUST (after      MUST\n                                           DHCPDISCOVER),\n\
    \                                           MUST NOT (when\n                 \
    \                          renewing)\n  Parameter request list     MAY       \
    \    MAY              MUST NOT\n  Maximum message size       MAY           MAY\
    \              MUST NOT\n  Message                    SHOULD NOT    SHOULD NOT\
    \       SHOULD\n  Site-specific              MAY           MAY              MUST\
    \ NOT\n  All others                 MUST NOT      MUST NOT         MUST NOT\n\
    \           Table 4:  Fields and options used by DHCP clients\n   If the parameters\
    \ are acceptable, the client records the address of\n   the server that supplied\
    \ the parameters from the 'server identifier'\n   field and sends that address\
    \ in the 'server identifier' field of a\n   DHCPREQUEST broadcast message.  Once\
    \ the DHCPACK message from the\n   server arrives, the client is initialized and\
    \ moves to BOUND state.\n   The DHCPREQUEST message contains the same 'xid' as\
    \ the DHCPOFFER\n   message.  The client records the lease expiration time as\
    \ the sum of\n   the time at which the original request was sent and the duration\
    \ of\n   the lease from the DHCPOFFER message.  The client SHOULD broadcast an\n\
    \   ARP reply to announce the client's new IP address and clear any\n   outdated\
    \ ARP cache entries in hosts on the client's subnet.\n"
- title: 4.4.2 Initialization with known network address
  contents:
  - "4.4.2 Initialization with known network address\n   The client begins in INIT-REBOOT\
    \ state and sends a DHCPREQUEST message\n   with the 'ciaddr' field set to the\
    \ client's network address.  The\n   client may request specific configuration\
    \ parameters by including\n   the 'parameter request list' option.  The client\
    \ generates and records a\n   random transaction identifier and inserts that identifier\
    \ into the 'xid'\n   field.  The client records its own local time for later use\
    \ in\n   computing the lease expiration.  The client MUST NOT incldue a 'server\n\
    \   identifier' in the DHCPREQUEST message.  The client then broadcasts\n   the\
    \ DHCPREQUEST on the local hardware broadcast address to the 'DHCP\n   server'\
    \ UDP port.\n   Once a DHCPACK message with an 'xid' field matching that in the\n\
    \   client's DHCPREQUEST message arrives from any server, the client is\n   initialized\
    \ and moves to BOUND state.  The client records the lease\n   expiration time\
    \ as the sum of the time at which the DHCPREQUEST\n   message was sent and the\
    \ duration of the lease from the DHCPACK\n   message.\n"
- title: 4.4.3 Initialization with a known DHCP server address
  contents:
  - "4.4.3 Initialization with a known DHCP server address\n   When the DHCP client\
    \ knows the address of a DHCP server, in either\n   INIT or REBOOTING state, the\
    \ client may use that address in the\n   DHCPDISCOVER or DHCPREQUEST rather than\
    \ the IP broadcast address.  If\n   the client receives no response to DHCP messages\
    \ sent to the IP\n   address of a known DHCP server, the DHCP client reverts to\
    \ using the\n   IP broadcast address.\n"
- title: 4.4.4 Reacquisition and expiration
  contents:
  - "4.4.4 Reacquisition and expiration\n   The client maintains two times, T1 and\
    \ T2, that specify the times at\n   which the client tries to extend its lease\
    \ on its network address.  T1\n   is the time at which the client enters the RENEWING\
    \ state and attempts\n   to contact the server that originally issued the client's\
    \ network\n   address.  T2 is the time at which the client enters the REBINDING\n\
    \   state and attempts to contact any server.\n   At time T1 after the client\
    \ accepts the lease on its network address,\n   the client moves to RENEWING state\
    \ and sends (via unicast) a\n   DHCPREQUEST message to the server to extend its\
    \ lease.  The client\n   generates a random transaction identifier and inserts\
    \ that identifier\n   into the 'xid' field in the DHCPREQUEST. The client records\
    \ the local\n   time at which the DHCPREQUEST message is sent for computation\
    \ of the\n   lease expiration time.  The client MUST NOT include a 'server\n \
    \  identifier' in the DHCPREQUEST message.\n   Any DHCPACK messages that arrive\
    \ with an 'xid' that does not match\n   the 'xid' of the client's DHCPREQUEST\
    \ message are silently discarded.\n   When the client receives a DHCPACK from\
    \ the server, the client\n   computes the lease expiration time as the sum of\
    \ the time at which the\n   client sent the DHCPREQUEST message and the duration\
    \ of the lease in\n   the DHCPACK message.  The client has successfully reacquired\
    \ its\n   network address, returns to BOUND state and may continue network\n \
    \  processing.\n   If no DHCPACK arrives before time T2 (T2 > T1) before the expiration\n\
    \   of the client's lease on its network address, the client moves to\n   REBINDING\
    \ state and sends (via broadcast) a DHCPREQUEST message to\n   extend its lease.\
    \  The client sets the 'ciaddr' field in the\n   DHCPREQUEST to its current network\
    \ address.  The client MUST NOT\n   include a 'server identifier' in the DHCPREQUEST\
    \ message.\n   Times T1 and T2 are configurable by the server through options.\
    \  T1\n   defaults to (0.5 * duration_of_lease).  T2 defaults to (0.875 *\n  \
    \ duration_of_lease).  Times T1 and T2 should be chosen with some random\n   \"\
    fuzz\" around a fixed value, to avoid synchronization of client\n   reacquisition.\n\
    \   In both RENEWING and REBINDING state, if the client receives no\n   response\
    \ to its DHCPREQUEST message, the client should wait one-half\n   the remaining\
    \ time until the expiration of T1 (in RENEWING state) and\n   T2 (in REBINDING\
    \ state) down to a minimum of 60 seconds, before\n   retransmitting the DHCPREQUEST\
    \ message.\n   If the lease expires before the client receives a DHCPACK, the\
    \ client\n   moves to INIT state, MUST immediately stop any other network\n  \
    \ processing and requests network initialization parameters as if the\n   client\
    \ were uninitialized.  If the client then receives a DHCPACK\n   allocating that\
    \ client its previous network address, the client SHOULD\n   continue network\
    \ processing.  If the client is given a new network\n   address, it MUST NOT continue\
    \ using the previous network address and\n   SHOULD notify the local users of\
    \ the problem.\n"
- title: 4.4.5 DHCPRELEASE
  contents:
  - "4.4.5 DHCPRELEASE\n   If the client no longer requires use of its assigned network\
    \ address\n   (e.g., the client is gracefully shut down), the client sends a\n\
    \   DHCPRELEASE message to the server.  Note that the correct operation of\n \
    \  DHCP does not depend on the transmission of DHCPRELEASE messages.\n"
- title: 5. Acknowledgments
  contents:
  - "5. Acknowledgments\n   Greg Minshall, Leo McLaughlin and John Veizades have patiently\n\
    \   contributed to the the design of DHCP through innumerable discussions,\n \
    \  meetings and mail conversations.  Jeff Mogul first proposed the\n   client-server\
    \ based model for DHCP.  Steve Deering searched the\n   various IP RFCs to put\
    \ together the list of network parameters\n   supplied by DHCP.  Walt Wimer contributed\
    \ a wealth of practical\n   experience with BOOTP and wrote a document clarifying\
    \ the behavior of\n   BOOTP/DHCP relay agents.  Jesse Walker analyzed DHCP in\
    \ detail,\n   pointing out several inconsistencies in earlier specifications of\
    \ the\n   protocol.  Steve Alexander reviewed Walker's analysis and the fixes\
    \ to\n   the protocol based on Walker's work.  And, of course, all the members\n\
    \   of the Dynamic Host Configuration Working Group of the IETF have\n   contributed\
    \ to the design of the protocol through discussion and\n   review of the protocol\
    \ design.\n"
- title: 6. References
  contents:
  - "6. References\n   [1] Acetta, M., \"Resource Location Protocol\", RFC 887, CMU,\
    \ December\n       1983.\n   [2] Alexander, S., and R. Droms, \"DHCP Options and\
    \ BOOTP Vendor\n       Extensions\", RFC 1533, Lachman Technology, Inc., Bucknell\n\
    \       University, October 1993.\n   [3] Braden, R., Editor, \"Requirements for\
    \ Internet Hosts --\n       Communication Layers\", STD 3, RFC 1122, USC/Information\
    \ Sciences\n       Institute, October 1989.\n   [4] Braden, R., Editor, \"Requirements\
    \ for Internet Hosts --\n       Application and Support, STD 3, RFC 1123, USC/Information\n\
    \       Sciences Institute, October 1989.\n   [5] Brownell, D, \"Dynamic Reverse\
    \ Address Resolution Protocol\n       (DRARP)\", Work in Progress.\n   [6] Comer,\
    \ D., and R. Droms, \"Uniform Access to Internet Directory\n       Services\"\
    , Proc. of ACM SIGCOMM '90 (Special issue of Computer\n       Communications Review),\
    \ 20(4):50--59, 1990.\n   [7] Croft, B., and J. Gilmore, \"Bootstrap Protocol\
    \ (BOOTP)\", RFC 951,\n       Stanford and SUN Microsystems, September 1985.\n\
    \   [8] Deering, S., \"ICMP Router Discovery Messages\", RFC 1256, Xerox\n   \
    \    PARC, September 1991.\n   [9] Droms, D., \"Interoperation between DHCP an\
    \ BOOTP\" RFC 1534,\n       Bucknell University, October 1993.\n  [10] Finlayson,\
    \ R., Mann, T., Mogul, J., and M. Theimer, \"A Reverse\n       Address Resolution\
    \ Protocol\", RFC 903, Stanford, June 1984.\n  [11] Gray C., and D. Cheriton,\
    \ \"Leases: An Efficient Fault-Tolerant\n       Mechanism for Distributed File\
    \ Cache Consistency\", In Proc. of\n       the Twelfth ACM Symposium on Operating\
    \ Systems Design, 1989.\n  [12] Mockapetris, P., \"Domain Names -- Concepts and\
    \ Facilities\", STD\n       13, RFC 1034, USC/Information Sciences Institute,\
    \ November 1987.\n  [13] Mockapetris, P., \"Domain Names -- Implementation and\n\
    \       Specification\", STD 13, RFC 1035, USC/Information Sciences\n       Institute,\
    \ November 1987.\n  [14] Mogul J., and S. Deering, \"Path MTU Discovery\", RFC\
    \ 1191,\n       November 1990.\n  [15] Morgan, R., \"Dynamic IP Address Assignment\
    \ for Ethernet Attached\n       Hosts\", Work in Progress.\n  [16] Postel, J.,\
    \ \"Internet Control Message Protocol\", STD 5, RFC 792,\n       USC/Information\
    \ Sciences Institute, September 1981.\n  [17] Reynolds, J., \"BOOTP Vendor Information\
    \ Extensions\", RFC 1497,\n       USC/Information Sciences Institute, August 1993.\n\
    \  [18] Reynolds, J., and J. Postel, \"Assigned Numbers\", STD 2, RFC 1340,\n\
    \       USC/Information Sciences Institute, July 1992.\n  [19] Jeffrey Schiller\
    \ and Mark Rosenstein. A Protocol for the Dynamic\n       Assignment of IP Addresses\
    \ for use on an Ethernet. (Available\n       from the Athena Project, MIT), 1989.\n\
    \  [20] Sollins, K., \"The TFTP Protocol (Revision 2)\",  RFC 783, NIC,\n    \
    \   June 1981.\n  [21] Wimer, W., \"Clarifications and Extensions for the Bootstrap\n\
    \       Protocol\", RFC 1542, Carnegie Mellon University, October 1993.\n"
- title: 7. Security Considerations
  contents:
  - "7. Security Considerations\n   DHCP is built directly on UDP and IP which are\
    \ as yet inherently\n   insecure.  Furthermore, DHCP is generally intended to\
    \ make\n   maintenance of remote and/or diskless hosts easier.  While perhaps\n\
    \   not impossible, configuring such hosts with passwords or keys may be\n   difficult\
    \ and inconvenient.  Therefore, DHCP in its current form is\n   quite insecure.\n\
    \   Unauthorized DHCP servers may be easily set up.  Such servers can\n   then\
    \ send false and potentially disruptive information to clients\n   such as incorrect\
    \ or duplicate IP addresses, incorrect routing\n   information (including spoof\
    \ routers, etc.), incorrect domain\n   nameserver addresses (such as spoof nameservers),\
    \ and so on.\n   Clearly, once this seed information is in place, an attacker\
    \ can\n   further compromise affected systems.\n   Malicious DHCP clients could\
    \ masquerade as legitimate clients and\n   retrieve information intended for those\
    \ legitimate clients.  Where\n   dynamic allocation of resources is used, a malicious\
    \ client could\n   claim all resources for itself, thereby denying resources to\n\
    \   legitimate clients.\n"
- title: 8. Author's Address
  contents:
  - "8. Author's Address\n   Ralph Droms\n   Computer Science Department\n   323 Dana\
    \ Engineering\n   Bucknell University\n   Lewisburg, PA 17837\n   Phone: (717)\
    \ 524-1145\n   EMail: droms@bucknell.edu\n"
- title: A. Host Configuration Parameters
  contents:
  - "A. Host Configuration Parameters\n   IP-layer_parameters,_per_host:_\n   Be a\
    \ router                     on/off                 HRC 3.1\n   Non-local source\
    \ routing        on/off                 HRC 3.3.5\n   Policy filters for\n   non-local\
    \ source routing        (list)                 HRC 3.3.5\n   Maximum reassembly\
    \ size         integer                HRC 3.3.2\n   Default TTL              \
    \       integer                HRC 3.2.1.7\n   PMTU aging timeout            \
    \  integer                MTU 6.6\n   MTU plateau table               (list) \
    \                MTU 7\n   IP-layer_parameters,_per_interface:_\n   IP address\
    \                      (address)              HRC 3.3.1.6\n   Subnet mask    \
    \                 (address mask)         HRC 3.3.1.6\n   MTU                 \
    \            integer                HRC 3.3.3\n   All-subnets-MTU            \
    \     on/off                 HRC 3.3.3\n   Broadcast address flavor        0x00000000/0xffffffff\
    \  HRC 3.3.6\n   Perform mask discovery          on/off                 HRC 3.2.2.9\n\
    \   Be a mask supplier              on/off                 HRC 3.2.2.9\n   Perform\
    \ router discovery        on/off                 RD 5.1\n   Router solicitation\
    \ address     (address)              RD 5.1\n   Default routers, list of:\n  \
    \        router address          (address)              HRC 3.3.1.6\n        \
    \  preference level        integer                HRC 3.3.1.6\n   Static routes,\
    \ list of:\n          destination             (host/subnet/net)      HRC 3.3.1.2\n\
    \          destination mask        (address mask)         HRC 3.3.1.2\n      \
    \    type-of-service         integer                HRC 3.3.1.2\n          first-hop\
    \ router        (address)              HRC 3.3.1.2\n          ignore redirects\
    \        on/off                 HRC 3.3.1.2\n          PMTU                  \
    \  integer                MTU 6.6\n          perform PMTU discovery  on/off  \
    \               MTU 6.6\n   Link-layer_parameters,_per_interface:_\n   Trailers\
    \                       on/off                 HRC 2.3.1\n   ARP cache timeout\
    \              integer                HRC 2.3.2.1\n   Ethernet encapsulation \
    \        (RFC 894/RFC 1042)     HRC 2.3.3\n   TCP_parameters,_per_host:_\n   TTL\
    \                            integer                HRC 4.2.2.19\n   Keep-alive\
    \ interval            integer                HRC 4.2.3.6\n   Keep-alive data size\
    \           0/1                    HRC 4.2.3.6\n"
- title: 'Key:'
  contents:
  - "Key:\n   MTU = Path MTU Discovery (RFC 1191, Proposed Standard)\n   RD = Router\
    \ Discovery (RFC 1256, Proposed Standard)\n"
