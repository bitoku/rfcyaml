- title: __initial_text__
  contents:
  - '               Telnet Authentication: Kerberos Version 4

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo defines an Experimental Protocol for the Internet\n\
    \   community.  Discussion and suggestions for improvement are requested.\n  \
    \ Please refer to the current edition of the \"IAB Official Protocol\n   Standards\"\
    \ for the standardization state and status of this protocol.\n   Distribution\
    \ of this memo is unlimited.\n"
- title: 1. Command Names and Codes
  contents:
  - "1. Command Names and Codes\n   Authentication Types\n      KERBEROS_V4  1\n \
    \  Suboption Commands\n      AUTH         0\n      REJECT       1\n      ACCEPT\
    \       2\n      CHALLENGE    3\n      RESPONSE     4\n"
- title: 2.  Command Meanings
  contents:
  - "2.  Command Meanings\n   IAC SB AUTHENTICATION IS <authentication-type-pair>\
    \ AUTH <kerberos\n   ticket and authenticator> IAC SE\n      This is used to pass\
    \ the Kerberos ticket to the remote side of the\n      connection.  The first\
    \ octet of the <authentication-type-pair>\n      value is KERBEROS_V4, to indicate\
    \ the usage of Kerberos version 4.\n   IAC SB AUTHENTICATION REPLY <authentication-type-pair>\
    \ ACCEPT IAC SE\n      This command indicates that the authentication was successful.\n\
    \   IAC SB AUTHENTICATION REPLY <authentication-type-pair> REJECT\n   <optional\
    \ reason for rejection> IAC SE\n      This command indicates that the authentication\
    \ was not successful,\n      and if there is any more data in the sub-option,\
    \ it is an ASCII\n      text message of the reason for the rejection.\n   IAC\
    \ SB AUTHENTICATION IS <authentication-type-pair> CHALLENGE\n   <encrypted challenge>\
    \ IAC SE\n   IAC SB AUTHENTICATION REPLY <authentication-type-pair> RESPONSE\n\
    \   <encrypted response> IAC SE\n      These two commands are used to perform\
    \ mutual authentication.\n      They are only used when the AUTH_HOW_MUTUAL bit\
    \ is set in the\n      second octet of the authentication-type-pair.  After successfully\n\
    \      sending an AUTH and receiving an ACCEPT, a CHALLENGE is sent.  The\n  \
    \    challenge is a random 8 byte number with the most significant byte\n    \
    \  first, and the least significant byte last.  When the CHALLENGE\n      command\
    \ is sent, the \"encrypted challenge\" is the 8-byte-challenge\n      encrypted\
    \ in the session key.  When the CHALLENGE command is\n      received, the contents\
    \ are decrypted to get the original 8-byte-\n      challenge, this value is then\
    \ incremented by one, re-encrypted\n      with the session key, and returned as\
    \ the \"encrypted response\" in\n      the RESPONSE command.  The receiver of\
    \ the RESPONSE command\n      decrypts the \"encrypted response\", and verifies\
    \ that the resultant\n      value is the original 8-byte-challenge incremented\
    \ by one.\n      The \"encrypted challenge\" value sent/received in the CHALLENGE\n\
    \      command is also encrypted with the session key on both sides of\n     \
    \ the session, to produce a random 8-byte key to be used as the\n      default\
    \ key for the ENCRYPTION option.\n"
- title: 3.  Implementation Rules
  contents:
  - "3.  Implementation Rules\n   If the second octet of the authentication-type-pair\
    \ has the AUTH_WHO\n   bit set to AUTH_CLIENT_TO_SERVER, then the client sends\
    \ the initial\n   AUTH command, and the server responds with either ACCEPT or\
    \ REJECT.\n   In addition, if the AUTH_HOW bit is set to AUTH_HOW_MUTUAL, and\
    \ the\n   server responds with ACCEPT, then the client then sends a CHALLENGE,\n\
    \   and the server sends a RESPONSE.\n   If the second octet of the authentication-type-pair\
    \ has the AUTH_WHO\n   bit set to AUTH_SERVER_TO_CLIENT, then the server sends\
    \ the initial\n   AUTH command, and the client responds with either ACCEPT or\
    \ REJECT.\n   In addition, if the AUTH_HOW bit is set to AUTH_HOW_MUTUAL, and\
    \ the\n   client responds with ACCEPT, then the server then sends a CHALLENGE,\n\
    \   and the client sends a RESPONSE.\n   The authenticator (Kerberos Principal)\
    \ used is of the form\n   \"rcmd.host@realm\".\n"
- title: 4.  Examples
  contents:
  - "4.  Examples\n   User \"joe\" may wish to log in as user \"pete\" on machine\
    \ \"foo\".  If\n   \"pete\" has set things up on \"foo\" to allow \"joe\" access\
    \ to his\n   account, then the client would send IAC SB AUTHENTICATION NAME \"\
    pete\"\n   IAC SE IAC SB AUTHENTICATION IS KERBEROS_V4 AUTH <joe's kerberos\n\
    \   ticket> IAC SE The server would then authenticate the user as \"joe\"\n  \
    \ from the ticket information, and since \"pete\" is allowing \"joe\" to\n   use\
    \ his account, the server would send back ACCEPT.  If mutual\n   authentication\
    \ is being used, the the client would send a CHALLENGE,\n   and verify the RESPONSE\
    \ that the server sends back.\n       Client                           Server\n\
    \                                        IAC DO AUTHENTICATION\n       IAC WILL\
    \ AUTHENTICATION\n       [ The server is now free to request authentication information.\n\
    \         ]\n                                        IAC SB AUTHENTICATION SEND\n\
    \                                        KERBEROS_V4 CLIENT|MUTUAL\n         \
    \                               KERBEROS_V4 CLIENT|ONE_WAY IAC\n             \
    \                           SE\n       [ The server has requested mutual Version\
    \ 4 Kerberos\n         authentication.  If mutual authentication is not supported,\n\
    \         then the server is willing to do one-way authentication.\n         The\
    \ client will now respond with the name of the user that it\n         wants to\
    \ log in as, and the Kerberos ticket.  ]\n       IAC SB AUTHENTICATION NAME\n\
    \       \"pete\" IAC SE\n       IAC SB AUTHENTICATION IS\n       KERBEROS_V4 CLIENT|MUTUAL\
    \ AUTH\n       <kerberos ticket information>\n       IAC SE\n       [ The server\
    \ responds with an ACCEPT command to state that the\n         authentication was\
    \ successful.  ]\n                                        IAC SB AUTHENTICATION\
    \ REPLY\n                                        KERBEROS_V4 CLIENT|MUTUAL ACCEPT\n\
    \                                        IAC SE\n       [ Next, the client sends\
    \ across a CHALLENGE to verify that it is\n         really talking to the right\
    \ server.  ]\n       IAC SB AUTHENTICATION IS\n       KERBEROS_V4 CLIENT|MUTUAL\n\
    \       CHALLENGE xx xx xx xx xx xx xx\n       xx IAC SE\n       [ Lastly, the\
    \ server sends across a RESPONSE to prove that it\n         really is the right\
    \ server.\n                                        IAC SB AUTHENTICATION REPLY\n\
    \                                        KERBEROS_V4 CLIENT|MUTUAL\n         \
    \                               RESPONSE yy yy yy yy yy yy yy yy\n           \
    \                             IAC SE\n"
- title: Security Considerations
  contents:
  - "Security Considerations\n   The ability to negotiate a common authentication\
    \ mechanism between\n   client and server is a feature of the authentication option\
    \ that\n   should be used with caution.  When the negotiation is performed, no\n\
    \   authentication has yet occurred.  Therefore, each system has no way\n   of\
    \ knowing whether or not it is talking to the system it intends.  An\n   intruder\
    \ could attempt to negotiate the use of an authentication\n   system which is\
    \ either weak, or already compromised by the intruder.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   David A. Borman, Editor\n   Cray Research, Inc.\n   655F\
    \ Lone Oak Drive\n   Eagan, MN 55123\n   Phone: (612) 452-6650\n   EMail: dab@CRAY.COM\n\
    \   Mailing List: telnet-ietf@CRAY.COM\n"
- title: Chair's Address
  contents:
  - "Chair's Address\n   The working group can be contacted via the current chair:\n\
    \   Steve Alexander\n   INTERACTIVE Systems Corporation\n   1901 North Naper Boulevard\n\
    \   Naperville, IL 60563-8895\n   Phone: (708) 505-9100 x256\n   EMail: stevea@isc.com\n"
