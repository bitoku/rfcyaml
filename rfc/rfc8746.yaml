- title: __initial_text__
  contents:
  - '   Concise Binary Object Representation (CBOR) Tags for Typed Arrays

    '
- title: Abstract
  contents:
  - "Abstract\n   The Concise Binary Object Representation (CBOR), as defined in RFC\n\
    \   7049, is a data format whose design goals include the possibility of\n   extremely\
    \ small code size, fairly small message size, and\n   extensibility without the\
    \ need for version negotiation.\n   This document makes use of this extensibility\
    \ to define a number of\n   CBOR tags for typed arrays of numeric data, as well\
    \ as additional\n   tags for multi-dimensional and homogeneous arrays.  It is\
    \ intended as\n   the reference document for the IANA registration of the CBOR\
    \ tags\n   defined.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 7841.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8746.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2020 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (https://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction\n     1.1.  Terminology\n   2.  Typed\
    \ Arrays\n     2.1.  Types of Numbers\n   3.  Additional Array Tags\n     3.1.\
    \  Multi-dimensional Array\n       3.1.1.  Row-Major Order\n       3.1.2.  Column-Major\
    \ Order\n     3.2.  Homogeneous Array\n   4.  Discussion\n   5.  CDDL Typenames\n\
    \   6.  IANA Considerations\n   7.  Security Considerations\n   8.  References\n\
    \     8.1.  Normative References\n     8.2.  Informative References\n   Acknowledgements\n\
    \   Contributors\n   Author's Address\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The Concise Binary Object Representation (CBOR) [RFC7049]\
    \ provides\n   for the interchange of structured data without a requirement for\
    \ a\n   pre-agreed schema.  [RFC7049] defines a basic set of data types as\n \
    \  well as a tagging mechanism that enables extending the set of data\n   types\
    \ supported via an IANA registry.\n   Recently, a simple form of typed arrays\
    \ of numeric data has received\n   interest both in the Web graphics community\
    \ [TypedArray] and in the\n   JavaScript specification (see Section 22.2 (https://www.ecma-\n\
    \   international.org/ecma-262/10.0/index.html#sec-typedarray-objects) of\n  \
    \ [ECMA-ES10]) as well as in corresponding implementations\n   [ArrayBuffer].\n\
    \   Since these typed arrays may carry significant amounts of data, there\n  \
    \ is interest in interchanging them in CBOR without the need of lengthy\n   conversion\
    \ of each number in the array.  This can also save space\n   overhead with encoding\
    \ a type for each element of an array.\n   This document defines a number of interrelated\
    \ CBOR tags that cover\n   these typed arrays, as well as additional tags for\
    \ multi-dimensional\n   and homogeneous arrays.  It is intended as the reference\
    \ document for\n   the IANA registration of the tags defined.\n   Note that an\
    \ application that generates CBOR with these tags has\n   considerable freedom\
    \ in choosing variants (e.g., with respect to\n   endianness, embedded type (signed\
    \ vs. unsigned), and number of bits\n   per element) or whether a tag defined\
    \ in this specification is used\n   at all instead of more basic CBOR.  In contrast\
    \ to representation\n   variants of single CBOR numbers, there is no representation\
    \ that\n   could be identified as \"preferred\".  If deterministic encoding is\n\
    \   desired in a CBOR-based protocol making use of these tags, the\n   protocol\
    \ has to define which of the encoding variants are used for\n   each individual\
    \ case.\n"
- title: 1.1.  Terminology
  contents:
  - "1.1.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"\
    SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT\
    \ RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted\
    \ as described in\n   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear\
    \ in all\n   capitals, as shown here.\n   The term \"byte\" is used in its now-customary\
    \ sense as a synonym for\n   \"octet\".  Where bit arithmetic is explained, this\
    \ document uses\n   familiar notation from the programming language C [C] (including\n\
    \   C++14's 0bnnn binary literals [CPlusPlus]) with the exception of the\n   operator\
    \ \"**\", which stands for exponentiation.\n   The term \"array\" is used in a\
    \ general sense in this document unless\n   further specified.  The term \"classical\
    \ CBOR array\" describes an\n   array represented with CBOR major type 4.  A \"\
    homogeneous array\" is\n   an array of elements that are all the same type (the\
    \ term is neutral\n   as to whether that is a representation type or an application\
    \ data\n   model type).\n   The terms \"big endian\" and \"little endian\" are\
    \ used to indicate a\n   most significant byte first (MSB first) representation\
    \ of integers\n   and a least significant byte first (LSB first) representation,\n\
    \   respectively.\n"
- title: 2.  Typed Arrays
  contents:
  - "2.  Typed Arrays\n   Typed arrays are homogeneous arrays of numbers, all of which\
    \ are\n   encoded in a single form of binary representation.  The concatenation\n\
    \   of these representations is encoded as a single CBOR byte string\n   (major\
    \ type 2), enclosed by a single tag indicating the type and\n   encoding of all\
    \ the numbers represented in the byte string.\n"
- title: 2.1.  Types of Numbers
  contents:
  - "2.1.  Types of Numbers\n   Three classes of numbers are of interest: unsigned\
    \ integers (uint),\n   signed integers (two's complement, sint), and IEEE 754\
    \ binary\n   floating point numbers (which are always signed).  For each of these\n\
    \   classes, there are multiple representation lengths in active use:\n      \
    \          | Length ll | uint   | sint   | float     |\n                | 0  \
    \       | uint8  | sint8  | binary16  |\n                | 1         | uint16\
    \ | sint16 | binary32  |\n                | 2         | uint32 | sint32 | binary64\
    \  |\n                | 3         | uint64 | sint64 | binary128 |\n          \
    \                 Table 1: Length Values\n   Here, sintN stands for a signed integer\
    \ of exactly N bits (for\n   instance, sint16), and uintN stands for an unsigned\
    \ integer of\n   exactly N bits (for instance, uint32).  The name binaryN stands\
    \ for\n   the number form of the same name defined in IEEE 754 [IEEE754].\n  \
    \ Since one objective of these tags is to be able to directly ship the\n   ArrayBuffers\
    \ underlying the Typed Arrays without re-encoding them,\n   and these may be either\
    \ in big-endian (network byte order) or in\n   little-endian form, we need to\
    \ define tags for both variants.\n   In total, this leads to 24 variants.  In\
    \ the tag, we need to express\n   the choice between integer and floating point,\
    \ the signedness (for\n   integers), the endianness, and one of the four length\
    \ values.\n   In order to simplify implementation, a range of tags is being\n\
    \   allocated that allows retrieving all this information from the bits\n   of\
    \ the tag: tag values from 64 to 87.\n   The value is split up into 5 bit fields:\
    \ 0b010, f, s, e, and ll as\n   detailed in Table 2.\n     | Field | Use     \
    \                                              |\n     | 0b010 | the constant\
    \ bits 0, 1, 0                             |\n     | f     | 0 for integer, 1\
    \ for float                            |\n     | s     | 0 for float or unsigned\
    \ integer, 1 for signed integer |\n     | e     | 0 for big endian, 1 for little\
    \ endian                 |\n     | ll    | A number for the length (Table 1).\
    \                    |\n              Table 2: Bit Fields in the Low 8 Bits of\
    \ the Tag\n   The number of bytes in each array element can then be calculated\
    \ by\n   \"2**(f + ll)\" (or \"1 << (f + ll)\" in a typical programming language).\n\
    \   (Notice that 0f and ll are the two least significant bits,\n   respectively,\
    \ of each 4-bit nibble in the byte.)\n   In the CBOR representation, the total\
    \ number of elements in the array\n   is not expressed explicitly but is implied\
    \ from the length of the\n   byte string and the length of each representation.\
    \  It can be\n   computed from the length, in bytes, of the byte string comprising\
    \ the\n   representation of the array by inverting the previous formula:\n   \"\
    bytelength >> (f + ll)\".\n   For the uint8/sint8 values, the endianness is redundant.\
    \  Only the\n   tag for the big-endian variant is used and assigned as such. \
    \ The tag\n   that would signify the little-endian variant of sint8 MUST NOT be\n\
    \   used; its tag number is marked as reserved.  As a special case, the\n   tag\
    \ that would signify the little-endian variant of uint8 is instead\n   assigned\
    \ to signify that the numbers in the array are using clamped\n   conversion from\
    \ integers, as described in more detail in\n   Section 7.1.11 (http://www.ecma-international.org/ecma-262/6.0/#sec-\n\
    \   touint8clamp) of the ES10 JavaScript specification (\"ToUint8Clamp\")\n  \
    \ [ECMA-ES10]; the assumption here is that a program-internal\n   representation\
    \ of this array after decoding would be marked this way\n   for further processing\
    \ providing \"roundtripping\" of JavaScript-typed\n   arrays through CBOR.\n \
    \  IEEE 754 binary floating numbers are always signed.  Therefore, for\n   the\
    \ float variants (\"f\" == 1), there is no need to distinguish\n   between signed\
    \ and unsigned variants; the \"s\" bit is always zero.\n   The tag numbers where\
    \ \"s\" would be one (which would have tag values\n   88 to 95) remain free to\
    \ use by other specifications.\n"
- title: 3.  Additional Array Tags
  contents:
  - "3.  Additional Array Tags\n   This specification defines three additional array\
    \ tags.  The Multi-\n   dimensional Array tags can be combined with classical\
    \ CBOR arrays as\n   well as with Typed Arrays in order to build multi-dimensional\
    \ arrays\n   with constant numbers of elements in the sub-arrays.  The Homogeneous\n\
    \   Array tag can be used as a signal by an application to identify a\n   classical\
    \ CBOR array as a homogeneous array, even when a Typed Array\n   does not apply.\n"
- title: 3.1.  Multi-dimensional Array
  contents:
  - "3.1.  Multi-dimensional Array\n   A multi-dimensional array is represented as\
    \ a tagged array that\n   contains two (one-dimensional) arrays.  The first array\
    \ defines the\n   dimensions of the multi-dimensional array (in the sequence of\
    \ outer\n   dimensions towards inner dimensions) while the second array\n   represents\
    \ the contents of the multi-dimensional array.  If the\n   second array is itself\
    \ tagged as a Typed Array, then the element type\n   of the multi-dimensional\
    \ array is known to be the same type as that\n   of the Typed Array.\n   Two tags\
    \ are defined by this document: one for elements arranged in\n   row-major order\
    \ and another for column-major order [RowColMajor].\n"
- title: 3.1.1.  Row-Major Order
  contents:
  - "3.1.1.  Row-Major Order\n   Tag:  40\n   Data Item:  Array (major type 4) of\
    \ two arrays: one array (major type\n      4) of dimensions, which are unsigned\
    \ integers distinct from zero;\n      and one array (any one of a CBOR array of\
    \ major type 4, a Typed\n      Array, or a Homogeneous Array) of elements.\n \
    \  Data in the second array consists of consecutive values where the\n   last\
    \ dimension is considered contiguous (row-major order).\n   Figure 1 shows a declaration\
    \ of a two-dimensional array in the C\n   language, a representation of that in\
    \ CBOR using both a multi-\n   dimensional array tag and a typed array tag.\n\
    \   uint16_t a[2][3] = {\n     {2, 4, 8},   /* row 0 */\n     {4, 16, 256},\n\
    \   };\n   <Tag 40> # multi-dimensional array tag\n      82       # array(2)\n\
    \        82      # array(2)\n          02     # unsigned(2) 1st Dimension\n  \
    \        03     # unsigned(3) 2nd Dimension\n        <Tag 65> # uint16 array\n\
    \          4c     # byte string(12)\n            0002 # unsigned(2)\n        \
    \    0004 # unsigned(4)\n            0008 # unsigned(8)\n            0004 # unsigned(4)\n\
    \            0010 # unsigned(16)\n            0100 # unsigned(256)\n         \
    \     Figure 1: Multi-dimensional Array in C and CBOR\n   Figure 2 shows the same\
    \ two-dimensional array using the multi-\n   dimensional array tag in conjunction\
    \ with a basic CBOR array (which,\n   with the small numbers chosen for the example,\
    \ happens to be\n   shorter).\n   <Tag 40> # multi-dimensional array tag\n   \
    \   82       # array(2)\n        82      # array(2)\n          02     # unsigned(2)\
    \ 1st Dimension\n          03     # unsigned(3) 2nd Dimension\n        86    \
    \ # array(6)\n          02      # unsigned(2)\n          04      # unsigned(4)\n\
    \          08      # unsigned(8)\n          04      # unsigned(4)\n          10\
    \      # unsigned(16)\n          19 0100 # unsigned(256)\n          Figure 2:\
    \ Multi-dimensional Array Using Basic CBOR Array\n"
- title: 3.1.2.  Column-Major Order
  contents:
  - "3.1.2.  Column-Major Order\n   The multi-dimensional arrays specified in the\
    \ previous sub-subsection\n   are in \"row major\" order, which is the preferred\
    \ order for the\n   purposes of this specification.  An analogous representation\
    \ that\n   uses \"column major\" order arrays is provided in this subsection under\n\
    \   the tag 1040, as illustrated in Figure 3.\n   Tag:  1040\n   Data Item:  The\
    \ same as tag 40, except the data in the second array\n      consists of consecutive\
    \ values where the first dimension is\n      considered contiguous (column-major\
    \ order).\n   <Tag 1040> # multi-dimensional array tag, column-major order\n \
    \     82       # array(2)\n        82      # array(2)\n          02     # unsigned(2)\
    \ 1st Dimension\n          03     # unsigned(3) 2nd Dimension\n        86    \
    \ # array(6)\n          02      # unsigned(2)\n          04      # unsigned(4)\n\
    \          04      # unsigned(4)\n          10      # unsigned(16)\n         \
    \ 08      # unsigned(8)\n          19 0100 # unsigned(256)\n     Figure 3: Multi-dimensional\
    \ Array Using Basic CBOR Array, Column-\n"
- title: 3.2.  Homogeneous Array
  contents:
  - "3.2.  Homogeneous Array\n   Tag:  41\n   Data Item:  Array (major type 4)\n \
    \  This tag identifies the classical CBOR array (a one-dimensional\n   array)\
    \ tagged by it as a homogeneous array, that is, it has elements\n   that are all\
    \ of the same application model data type.  The element\n   type of the array\
    \ is therefore determined by the application model\n   data type of the first\
    \ array element.\n   This can be used in application data models that apply specific\n\
    \   semantics to homogeneous arrays.  Also, in certain cases,\n   implementations\
    \ in strongly typed languages may be able to create\n   native homogeneous arrays\
    \ of specific types instead of ordered lists\n   while decoding.  Which CBOR data\
    \ items constitute elements of the\n   same application type is specific to the\
    \ application.\n   Figure 4 shows an example for a homogeneous array of booleans\
    \ in C++\n   [CPlusPlus] and CBOR.\n   bool boolArray[2] = { true, false };\n\
    \   <Tag 41>  # Homogeneous Array Tag\n      82           #array(2)\n        \
    \ F5        # true\n         F4        # false\n                Figure 4: Homogeneous\
    \ Array in C++ and CBOR\n   Figure 5 extends the example with a more complex structure.\n\
    \   typedef struct {\n     bool active;\n     int value;\n   } foo;\n   foo myArray[2]\
    \ = { {true, 3}, {true, -4} };\n   <Tag 41>\n       82  # array(2)\n         \
    \ 82  #  array(2)\n                F5  # true\n                03  # 3\n     \
    \     82 # array(2)\n                F5  # true\n                23  # -4\n  \
    \              Figure 5: Homogeneous Array in C++ and CBOR\n"
- title: 4.  Discussion
  contents:
  - "4.  Discussion\n   Support for both little- and big-endian representation may\
    \ seem out\n   of character with CBOR, which is otherwise fully big endian.  This\n\
    \   support is in line with the intended use of the typed arrays and the\n   objective\
    \ not to require conversion of each array element.\n   This specification allocates\
    \ a sizable chunk out of the single-byte\n   tag space.  This use of code point\
    \ space is justified by the wide use\n   of typed arrays in data interchange.\n\
    \   Providing a column-major order variant of the multi-dimensional array\n  \
    \ may seem superfluous to some and useful to others.  It is cheap to\n   define\
    \ the additional tag so that it is available when actually\n   needed.  Allocating\
    \ it out of a different number space makes the\n   preference for row-major evident.\n\
    \   Applying a Homogeneous Array tag to a Typed Array would usually be\n   redundant\
    \ and is therefore not provided by the present specification.\n"
- title: 5.  CDDL Typenames
  contents:
  - "5.  CDDL Typenames\n   For use with CDDL [RFC8610], the typenames defined in\
    \ Figure 6 are\n   recommended:\n   ta-uint8 = #6.64(bstr)\n   ta-uint16be = #6.65(bstr)\n\
    \   ta-uint32be = #6.66(bstr)\n   ta-uint64be = #6.67(bstr)\n   ta-uint8-clamped\
    \ = #6.68(bstr)\n   ta-uint16le = #6.69(bstr)\n   ta-uint32le = #6.70(bstr)\n\
    \   ta-uint64le = #6.71(bstr)\n   ta-sint8 = #6.72(bstr)\n   ta-sint16be = #6.73(bstr)\n\
    \   ta-sint32be = #6.74(bstr)\n   ta-sint64be = #6.75(bstr)\n   ; reserved: #6.76(bstr)\n\
    \   ta-sint16le = #6.77(bstr)\n   ta-sint32le = #6.78(bstr)\n   ta-sint64le =\
    \ #6.79(bstr)\n   ta-float16be = #6.80(bstr)\n   ta-float32be = #6.81(bstr)\n\
    \   ta-float64be = #6.82(bstr)\n   ta-float128be = #6.83(bstr)\n   ta-float16le\
    \ = #6.84(bstr)\n   ta-float32le = #6.85(bstr)\n   ta-float64le = #6.86(bstr)\n\
    \   ta-float128le = #6.87(bstr)\n   homogeneous<array> = #6.41(array)\n   multi-dim<dim,\
    \ array> = #6.40([dim, array])\n   multi-dim-column-major<dim, array> = #6.1040([dim,\
    \ array])\n                  Figure 6: Recommended Typenames for CDDL\n"
- title: 6.  IANA Considerations
  contents:
  - "6.  IANA Considerations\n   IANA has allocated the tags in Table 3 using this\
    \ document as the\n   specification reference.  (The reserved value is for a future\n\
    \   revision of typed array tags.)\n   The allocations were assigned from the\
    \ \"specification required\" space\n   (24..255) with the exception of 1040, which\
    \ was assigned from the\n   \"first come first served\" space (256..).\n     \
    \  |  Tag | Data Item            | Semantics                  |\n       |   40\
    \ | array of two arrays* | Multi-dimensional Array,   |\n       |   41 | array\
    \                | Homogeneous Array          |\n       |   64 | byte string \
    \         | uint8 Typed Array          |\n       |   65 | byte string        \
    \  | uint16, big endian, Typed  |\n       |   66 | byte string          | uint32,\
    \ big endian, Typed  |\n       |   67 | byte string          | uint64, big endian,\
    \ Typed  |\n       |   68 | byte string          | uint8 Typed Array, clamped\
    \ |\n       |   69 | byte string          | uint16, little endian,     |\n   \
    \    |   70 | byte string          | uint32, little endian,     |\n       |  \
    \ 71 | byte string          | uint64, little endian,     |\n       |   72 | byte\
    \ string          | sint8 Typed Array          |\n       |   73 | byte string\
    \          | sint16, big endian, Typed  |\n       |   74 | byte string       \
    \   | sint32, big endian, Typed  |\n       |   75 | byte string          | sint64,\
    \ big endian, Typed  |\n       |   76 | byte string          | (reserved)    \
    \             |\n       |   77 | byte string          | sint16, little endian,\
    \     |\n       |   78 | byte string          | sint32, little endian,     |\n\
    \       |   79 | byte string          | sint64, little endian,     |\n       |\
    \   80 | byte string          | IEEE 754 binary16, big     |\n       |   81 |\
    \ byte string          | IEEE 754 binary32, big     |\n       |   82 | byte string\
    \          | IEEE 754 binary64, big     |\n       |   83 | byte string       \
    \   | IEEE 754 binary128, big    |\n       |   84 | byte string          | IEEE\
    \ 754 binary16, little  |\n       |   85 | byte string          | IEEE 754 binary32,\
    \ little  |\n       |   86 | byte string          | IEEE 754 binary64, little\
    \  |\n       |   87 | byte string          | IEEE 754 binary128, little |\n  \
    \     | 1040 | array of two arrays* | Multi-dimensional Array,   |\n         \
    \                Table 3: Values for Tags\n   *40 or 1040 data item: The second\
    \ element of the outer array in the\n   data item is a native CBOR array (major\
    \ type 4) or Typed Array (one\n   of tag 64..87)\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   The security considerations of [RFC7049] apply;\
    \ special attention is\n   drawn to the second paragraph of Section 8 of [RFC7049].\n\
    \   The tag for homogeneous arrays makes a promise about its tagged data\n   item,\
    \ which a maliciously constructed CBOR input can then choose to\n   ignore.  As\
    \ always, the decoder therefore has to ensure that it is\n   not driven into an\
    \ undefined state by array elements that do not\n   fulfill the promise, and that\
    \ it does continue to fulfill its API\n   contract in this case as well.\n   As\
    \ with all formats that are used for data interchange, an attacker\n   may have\
    \ control over the shape of the data delivered as input to the\n   application,\
    \ which therefore needs to validate that shape before it\n   makes it the basis\
    \ of its further processing.  One unique aspect that\n   typed arrays add to this\
    \ is that an attacker might substitute a\n   Uint8ClampedArray for where the application\
    \ expects a Uint8Array, or\n   vice versa, potentially leading to very different\
    \ (and unexpected)\n   processing semantics of the in-memory data structures constructed.\n\
    \   Applications that could be affected by this will therefore need to be\n  \
    \ careful about making this distinction in their input validation.\n"
- title: 8.  References
  contents:
  - '8.  References

    '
- title: 8.1.  Normative References
  contents:
  - "8.1.  Normative References\n   [C]        International Organization for Standardization,\n\
    \              \"Information technology - Programming languages - C\", ISO/\n\
    \              IEC 9899:2018, Fourth Edition, June 2018.\n   [CPlusPlus]\n   \
    \           International Organization for Standardization,\n              \"\
    Programming languages - C++\", ISO/IEC 14882:2017, Fifth\n              Edition,\
    \ December 2017.\n   [ECMA-ES10]\n              ECMA International, \"ECMAScript\
    \ 2019 Language\n              Specification\", Standard ECMA-262 10th Edition,\
    \ June 2019,\n              <https://www.ecma-international.org/ecma-262/10.0/\n\
    \              index.html>.\n   [IEEE754]  IEEE, \"IEEE Standard for Floating-Point\
    \ Arithmetic\",\n              IEEE 754-2019, DOI 10.1109/IEEESTD.2019.8766229,\n\
    \              <https://ieeexplore.ieee.org/document/8766229>.\n   [RFC2119] \
    \ Bradner, S., \"Key words for use in RFCs to Indicate\n              Requirement\
    \ Levels\", BCP 14, RFC 2119,\n              DOI 10.17487/RFC2119, March 1997,\n\
    \              <https://www.rfc-editor.org/info/rfc2119>.\n   [RFC7049]  Bormann,\
    \ C. and P. Hoffman, \"Concise Binary Object\n              Representation (CBOR)\"\
    , RFC 7049, DOI 10.17487/RFC7049,\n              October 2013, <https://www.rfc-editor.org/info/rfc7049>.\n\
    \   [RFC8174]  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n     \
    \         2119 Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n        \
    \      May 2017, <https://www.rfc-editor.org/info/rfc8174>.\n   [RFC8610]  Birkholz,\
    \ H., Vigano, C., and C. Bormann, \"Concise Data\n              Definition Language\
    \ (CDDL): A Notational Convention to\n              Express Concise Binary Object\
    \ Representation (CBOR) and\n              JSON Data Structures\", RFC 8610, DOI\
    \ 10.17487/RFC8610,\n              June 2019, <https://www.rfc-editor.org/info/rfc8610>.\n"
- title: 8.2.  Informative References
  contents:
  - "8.2.  Informative References\n   [ArrayBuffer]\n              Mozilla Developer\
    \ Network, \"JavaScript typed arrays\", June\n              2010, <https://developer.mozilla.org/en-\n\
    \              US/docs/Web/JavaScript/Typed_arrays>.\n   [RowColMajor]\n     \
    \         Wikipedia, \"Row- and column-major order\", September 2019,\n      \
    \        <https://en.wikipedia.org/w/index.php?title=Row-\n              _and_column-major_order&oldid=917905325>.\n\
    \   [TypedArray]\n              Vukicevic, V. and K. Russell, \"Typed Array Specification\"\
    ,\n              February 2011,\n              <https://web.archive.org/web/20110207024413/\n\
    \              http://www.khronos.org/registry/typedarray/specs/latest/>.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   Jim Schaad provided helpful comments and reminded us that\
    \ column-\n   major order still is in use.  Jeffrey Yaskin helped improve the\n\
    \   definition of homogeneous arrays.  IANA helped correct an error in a\n   previous\
    \ draft version.  Francesca Palombini acted as Shepherd, and\n   Alexey Melnikov\
    \ as responsible Area Director.  Elwyn Davies as Gen-\n   ART reviewer and IESG\
    \ members Martin Vigoureux, Adam Roach, Roman\n   Danyliw, and Benjamin Kaduk\
    \ helped in finding further improvements to\n   the text; thanks also to the other\
    \ reviewers.\n"
- title: Contributors
  contents:
  - "Contributors\n   The initial draft version of this specification was written\
    \ by\n   Johnathan Roatch <roatch@gmail.com>.  Many thanks for getting this\n\
    \   ball rolling.\n   Glenn Engel suggested the tags for multi-dimensional arrays\
    \ and\n   homogeneous arrays.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Carsten Bormann (editor)\n   Universit\xE4t Bremen TZI\n\
    \   Postfach 330440\n   D-28359 Bremen\n   Germany\n"
