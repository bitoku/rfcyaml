- contents:
  - '          Database of Long-Lived Symmetric Cryptographic Keys

    '
  title: __initial_text__
- contents:
  - "Abstract\n   This document specifies the information contained in a conceptual\n
    \  database of long-lived cryptographic keys used by many different\n   routing
    protocols for message security.  The database is designed to\n   support both
    manual and automated key management.  In addition to\n   describing the schema
    for the database, this document describes the\n   operations that can be performed
    on the database as well as the\n   requirements for the routing protocols that
    wish to use the database.\n   In many typical scenarios, the protocols do not
    directly use the\n   long-lived key, but rather a key derivation function is used
    to\n   derive a short-lived key from a long-lived key.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7210.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2014 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "1.  Introduction\n   This document specifies the information that needs to be
    included in\n   a database of long-lived cryptographic keys in order to key the\n
    \  cryptographic authentication of routing protocols.  This conceptual\n   database
    is designed to separate protocol-specific aspects from both\n   manual and automated
    key management.  The intent is to allow many\n   different implementation approaches
    to the specified cryptographic\n   key database, while simplifying specification
    and heterogeneous\n   deployments.  This conceptual database avoids the need to
    build\n   knowledge of any security protocol into key management protocols.  It\n
    \  minimizes protocol-specific knowledge in operational/management\n   interfaces,
    and it constrains where that knowledge can appear.\n   Textual conventions are
    provided for the representation of keys and\n   other identifiers.  These conventions
    should be used when presenting\n   keys and identifiers to operational/management
    interfaces or reading\n   keys/identifiers from these interfaces.  This satisfies
    the\n   operational requirement that all implementations represent the keys\n
    \  and key identifiers in the same way so that cross-vendor\n   configuration
    instructions can be provided.\n   Routing protocols can employ the services of
    more-generic security\n   protocols such as TCP-AO [RFC5925].  Implementations
    of routing\n   protocols may need to supply keys to databases specific to these\n
    \  security protocols as the associated entries in this document's\n   conceptual
    database are manipulated.\n   In many instances, the long-lived keys are not used
    directly in\n   security protocols, but rather a key derivation function is used
    to\n   derive short-lived keys from the long-lived key in the database.  In\n
    \  other instances, security protocols will directly use the long-lived\n   key
    from the database.  The database design supports both use cases.\n"
  - contents:
    - "1.1.  Requirements Notation\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\",
      \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\",
      and \"OPTIONAL\" in this\n   document are to be interpreted as described in
      RFC 2119 [RFC2119].\n"
    title: 1.1.  Requirements Notation
  title: 1.  Introduction
- contents:
  - "2.  Conceptual Database Structure\n   The database is characterized as a table,
    where each row represents a\n   single long-lived symmetric cryptographic key.
    \ Normally, each key\n   should only have one row.  Only in the (hopefully) very
    rare cases\n   where a key is used for more than one purpose, or where the same
    key\n   is used with multiple key derivation functions (KDFs) will multiple\n
    \  rows contain the same key value.  The columns in the table represent\n   the
    key value and attributes of the key.\n   To accommodate manual key management,
    the format of the fields has\n   been purposefully chosen to allow updates with
    a plain-text editor\n   and to provide equivalent display on multiple systems.\n
    \  The columns that the table consists of are listed as follows:\n      AdminKeyName\n
    \        The AdminKeyName field contains a human-readable string meant\n         to
    identify the key for the user.  Implementations can use this\n         field to
    uniquely identify rows in the key table.  The same\n         string can be used
    on the local system and peer systems, but\n         this is not required.  Routing
    protocols do not make use of\n         this string; they use the LocalKeyName
    and the PeerKeyName.\n         However, if these strings are to be used as protocol
    elements\n         in other protocols or otherwise transferred between systems,\n
    \        they will need to follow the requirements of Section 5.1.\n      LocalKeyName\n
    \        The LocalKeyName field contains a string identifying the key.\n         It
    can be used to retrieve the key in the local database when\n         received
    in a message.  As discussed in Section 4, the protocol\n         defines the form
    of this field.  For example, many routing\n         protocols restrict the format
    of their key names to integers\n         that can be represented in 16 or 32 bits.
    \ Typically, this\n         field does not contain data in human character sets
    requiring\n         internationalization.  If there ever are any routing Protocols\n
    \        with key names requiring internationalization, those\n         specifications
    need to address issues of canonicalization and\n         normalization so that
    key names can be compared using binary\n         comparison.\n      PeerKeyName\n
    \        PeerKeyName is the name of the key used by the local system in\n         an
    outgoing message.  For unicast communication, the\n         PeerKeyName of a key
    on a system matches the LocalKeyName of\n         the identical key that is maintained
    on one or multiple peer\n         systems.  Similar to LocalKeyName, a protocol
    defines the form\n         of this identifier and will often restrict it to be
    an integer.\n         For group keys, the protocol will typically require this
    field\n         be an empty string as the sending and the receiving key names\n
    \        need to be the same.\n      Peers\n         Typically for unicast keys,
    this field lists the peer systems\n         that have this key in their database.
    \ For group keys, this\n         field names the groups for which the key is appropriate.
    \ For\n         example, this might name a routing area for a multicast routing\n
    \        protocol.  Formally, this field provides a protocol-specific\n         set
    of restrictions on the scope in which the key is\n         appropriate.  The format
    of the identifiers in the Peers field\n         is specified by the protocol.\n
    \     Interfaces\n         The Interfaces field identifies the set of physical
    and/or\n         virtual interfaces for which it is appropriate to use this key.\n
    \        When the long-lived value in the Key field is intended for use\n         on
    any interface, this field is set to \"all\".  The interfaces\n         field consists
    of a set of strings; the form of these strings\n         is specified by the implementation
    and is independent of the\n         protocol in question.  Protocols may require
    support for the\n         Interfaces field or may indicate that support for constraining\n
    \        keys based on interface is not required.  As an example, TCP-AO\n         implementations
    are unlikely to make the decision of what\n         interface to use prior to
    key selection.  In that case, the\n         implementations are expected to use
    the same keying material\n         across all of the interfaces and then require
    the \"all\"\n         setting.\n      Protocol\n         The Protocol field identifies
    a single routing protocol where\n         this key may be used to provide cryptographic
    protection.  This\n         specification establishes a registry for this field;
    the\n         registry also specifies the format of the following field,\n         ProtocolSpecificInfo,
    for each registered protocol.\n      ProtocolSpecificInfo\n         This field
    contains the protocol-specified information that may\n         be useful for a
    protocol to apply the key correctly.  Note that\n         such information MUST
    NOT be required for a protocol to locate\n         an appropriate key.  When a
    protocol does not need the\n         information in ProtocolSpecificInfo, it will
    require this field\n         be empty.  Key table rows MAY specify a Direction
    of \"both\".\n         As a result, the encoding of this field needs to support\n
    \        encoding protocol-specific information for sending and\n         receiving
    in the same row.\n      KDF\n         The KDF field indicates the key derivation
    function that is\n         used to generate short-lived keys from the long-lived
    value in\n         the Key field.  When the long-lived value in the Key field
    is\n         intended for direct use, the KDF field is set to \"none\".  A key\n
    \        derivation function is a one-way function that provides\n         cryptographic
    separation of key material.  The KDF MAY use\n         inputs from the row in
    the key table and the message being sent\n         or received but MUST NOT depend
    on other configuration state.\n         This document establishes an IANA registry
    for the values in\n         the KDF field to simplify references in future specifications.\n
    \        The protocol indicates what (if any) KDFs are valid.\n      AlgID\n         The
    AlgID field indicates which cryptographic algorithm is to\n         be used with
    the security protocol for the specified peer or\n         peers.  Such an algorithm
    can be an encryption algorithm and\n         mode (e.g., AES-128-CBC), an authentication
    algorithm (e.g.,\n         HMAC-SHA1-96 or AES-128-CMAC), or any other symmetric\n
    \        cryptographic algorithm needed by a security protocol.  If the\n         KDF
    field contains \"none\", then the long-lived key is used\n         directly with
    this algorithm; otherwise, the derived short-\n         lived key is used with
    this algorithm.  When the long-lived key\n         is used to generate a set of
    short-lived keys for use with the\n         security protocol, the AlgID field
    identifies a ciphersuite\n         rather than a single cryptographic algorithm.
    \ This document\n         establishes an IANA registry for the values in the AlgID
    field\n         to simplify references in future specifications.  Protocols\n
    \        indicate which algorithms are appropriate.\n      Key\n         The Key
    field contains a long-lived symmetric cryptographic key\n         in the format
    of a lowercase hexadecimal string.  The size of\n         the Key depends on the
    KDF and the AlgID.  For instance,\n         KDF=none and AlgID=AES128 require
    a 128-bit key, which is\n         represented by 32 hexadecimal digits.\n      Direction\n
    \        The Direction field indicates whether this key may be used for\n         inbound
    traffic, outbound traffic, both, or whether the key has\n         been disabled
    and may not currently be used at all.  The\n         supported values are \"in\",
    \"out\", \"both\", and \"disabled\",\n         respectively.  The Protocol field
    will determine which of these\n         values are valid.\n      SendLifetimeStart\n
    \        The SendLifetimeStart field specifies the earliest date and\n         time
    in Coordinated Universal Time (UTC) at which this key\n         should be considered
    for use when sending traffic.  The format\n         is YYYYMMDDHHSSZ, where four
    digits specify the year, two\n         digits specify the month, two digits specify
    the day, two\n         digits specify the hour, two digits specify the minute,
    and two\n         digits specify the second.  The \"Z\" is included as a clear\n
    \        indication that the time is in UTC.\n      SendLifeTimeEnd\n         The
    SendLifeTimeEnd field specifies the latest date and time at\n         which this
    key should be considered for use when sending\n         traffic.  The format is
    the same as the SendLifetimeStart\n         field.\n      AcceptLifeTimeStart\n
    \        The AcceptLifeTimeStart field specifies the earliest date and\n         time
    in Coordinated Universal Time (UTC) at which this key\n         should be considered
    for use when processing received traffic.\n         The format is YYYYMMDDHHSSZ,
    where four digits specify the\n         year, two digits specify the month, two
    digits specify the day,\n         two digits specify the hour, two digits specify
    the minute, and\n         two digits specify the second.  The \"Z\" is included
    as a clear\n         indication that the time is in UTC.\n      AcceptLifeTimeEnd\n
    \        The AcceptLifeTimeEnd field specifies the latest date and time\n         at
    which this key should be considered for use when processing\n         the received
    traffic.  The format of this field is identical to\n         the format of AcceptLifeTimeStart.\n"
  title: 2.  Conceptual Database Structure
- contents:
  - "3.  Key Selection and Rollover\n   A protocol may directly consult the key table
    to find the key to use\n   on an outgoing message.  The protocol provides a protocol
    (P) and a\n   peer identifier (H) into the key selection function.  Optionally,
    an\n   interface identifier (I) may also need to be provided.  Any key that\n
    \  satisfies the following conditions may be selected:\n      (1)  the Peers field
    includes H;\n      (2)  the Protocol field matches P;\n      (3)  If an interface
    is specified by the protocol, the Interfaces\n           field in the key table
    row includes I or \"all\";\n      (4)  the Direction field is either \"out\" or
    \"both\"; and\n      (5)  SendLifetimeStart <= current time <= SendLifeTimeEnd.\n
    \  During key selection, there may be multiple entries that\n   simultaneously
    exist and are associated with different cryptographic\n   algorithms or ciphersuites.
    \ Systems should support selection of keys\n   based on algorithm preference to
    facilitate algorithm transition.\n   In addition, multiple entries with overlapping
    valid periods are\n   expected to be available for orderly key rollover.  In these
    cases,\n   the expectation is that systems will transition to the newest key\n
    \  available.  To meet this requirement, this specification recommends\n   supplementing
    the key selection algorithm with the following\n   differentiation: select the
    long-lived key specifying the most recent\n   time in the SendLifetimeStart field.\n
    \  In order to look up a key for validating an incoming message, the\n   protocol
    provides its protocol (P), the peer identifier (H), the key\n   identifier (L),
    and optionally the interface (I).  If one key matches\n   the following conditions,
    it is selected:\n      (1)  the Peer field includes H;\n      (2)  the Protocol
    field matches P;\n      (3)  if the Interface field is provided, it includes I
    or is\n           \"all\";\n      (4)  the Direction field is either \"in\" or
    \"both\";\n      (5)  the LocalKeyName is L; and\n      (6)  AcceptLifeTimeStart
    <= current time <= AcceptLifeTimeEnd.\n   Note that the key usage is loosely bound
    by the times specified in\n   the AcceptLifeTimeStart and AcceptLifeTimeEnd fields.
    \ New security\n   associations should not be established except within the period
    of\n   use specified by these fields, while allowing some grace time for\n   clock
    skew.  However, if a security association has already been\n   established based
    on a particular long-lived key, exceeding the\n   lifetime does not have any direct
    impact.  The implementations of\n   security protocols that involve long-lived
    security associations\n   should be designed to periodically interrogate the database
    and\n   rollover to new keys without tearing down the security associations.\n
    \  Rather than consulting the conceptual database, a security protocol\n   such
    as TCP-AO may update its own tables as keys are added and\n   removed.  In this
    case, the protocol needs to maintain its own key\n   information.  Some routing
    protocols use IP Security (IPsec) to\n   provide integrity.  If a specification
    describes how to use the\n   conceptual database described in this document to
    configure keys for\n   these routing protocols, similar concerns apply.  The specification\n
    \  mapping those routing protocols onto this conceptual database needs\n   to
    describe how the Security Policy Database is manipulated as rows\n   are added
    and removed from the conceptual database.\n"
  title: 3.  Key Selection and Rollover
- contents:
  - "4.  Application of the Database in a Security Protocol\n   In order to use the
    key table database in a protocol specification, a\n   protocol needs to specify
    certain information.  This section\n   enumerates items that a protocol must specify.\n
    \     (1) The ways of mapping the information in a key table row to the\n           information
    needed to produce an outgoing message; specified\n           as an explanation
    of either how to fill in authentication-\n           related fields in a message
    based on key table information,\n           or (for protocols such as TCP-AO)
    how to construct Master Key\n           Tuples (MKTs) or other protocol-specific
    structures from a\n           key table row\n      (2)  The ways of locating the
    peer identifier (a member of the\n           Peers set) and the LocalKeyName inside
    an incoming message\n      (3)  The methods of verifying a message given a key
    table row;\n           this may be stated directly or in terms of protocol-specific\n
    \          structures such as MKTs\n      (4)  The form and validation rules for
    LocalKeyName and\n           PeerKeyName; if either of these is an integer, the\n
    \          conventions in Section 5.1 are used as a vendor-independent\n           format\n
    \     (5)  The form and validation rules for members of the Peers set\n      (6)
    \ The algorithms and KDFs supported\n      (7)  The form of the ProtocolSpecificInfo
    field\n      (8)  The rules for canonicalizing LocalKeyName, PeerKeyName,\n           entries
    in the Peers set, or ProtocolSpecificInfo; this may\n           include normalizations
    such as lowercasing hexadecimal\n           strings\n      (9)  The Indication
    whether the support for Interfaces is required\n           by this protocol\n
    \  The form of the interfaces field is not protocol specific but instead\n   is
    shared among all protocols on an implementation.  If a protocol\n   needs to distinguish
    instances running over the same interface, this\n   is included in the specification
    of peers.  Generally, it is\n   desirable to define the specification of peers
    so that an operator\n   can use the Interfaces field to refer to all instances
    of a protocol\n   on a link without having to specify both generic interfaces\n
    \  information and protocol-specific peer information.\n"
  title: 4.  Application of the Database in a Security Protocol
- contents:
  - '5.  Textual Conventions

    '
  - contents:
    - "5.1.  Key Names\n   When a key for a given protocol is identified by an integer
      key\n   identifier, the associated key name will be represented as lowercase\n
      \  hexadecimal digits with the most significant octet first.  This\n   integer
      is padded with leading zero digits until the width of the key\n   identifier
      field in the protocol is reached.  If a key name contains\n   non-integer human-readable
      text, its format and encoding may be an\n   issue, particularly if it is used
      in protocol between two different\n   types of systems.  If characters from
      the ASCII range [RFC20] are\n   sufficient for a key name, then they SHOULD
      be used.  If characters\n   outside of that range are desirable or required,
      then they MUST be in\n   an encoding of Unicode [UNICODE].\n   In the case of
      an AdminKeyName that uses characters outside of the\n   ASCII range, the AdminKeyName
      MUST be encoded using UTF-8 [RFC3629]\n   and SHOULD be normalized using Unicode
      Normalization Form KC [UAX15]\n   to maximize the chance that the strings will
      compare correctly.\n   However, simply using Unicode Normalization Form KC is
      not sufficient\n   to account for all issues of string comparison; refer to\n
      \  [PRECIS-FRAMEWORK] for additional information.\n"
    title: 5.1.  Key Names
  - contents:
    - "5.2.  Keys\n   A key is represented as a lowercase hexadecimal string with
      the most\n   significant octet of the key first.  As discussed in Section 2,
      the\n   length of this string depends on the associated algorithm and KDF.\n"
    title: 5.2.  Keys
  title: 5.  Textual Conventions
- contents:
  - "6.  Operational Considerations\n   If the valid periods for long-lived keys do
    not overlap or the system\n   clocks are inconsistent, it is possible to construct
    scenarios where\n   systems cannot agree upon a long-lived key.  When installing
    a series\n   of keys to be used one after another, operators should configure
    the\n   SendLifetimeStart field of the key to be several hours after the\n   AcceptLifeTimeStart
    field of the key to guarantee there is some\n   overlap.  This overlap is intended
    to address the clock-skew issue\n   and allow for basic operational considerations.
    \ Operators may choose\n   to specify a longer overlap (e.g., several days) to
    allow for\n   exceptional circumstances.\n"
  title: 6.  Operational Considerations
- contents:
  - "7.  Security Considerations\n   Management of encryption and authentication keys
    has been a\n   significant operational problem, both in terms of key synchronization\n
    \  and key selection.  For instance, the current guidance [RFC3562]\n   warns
    against sharing TCP MD5 keying material between systems and\n   recommends changing
    keys according to a schedule.  The same general\n   operational issues are relevant
    for the management of other\n   cryptographic keys.\n   It has been recognized
    in [RFC4107] that automated key management is\n   not viable in multiple scenarios.
    \ The conceptual database specified\n   in this document is designed to accommodate
    both manual key\n   management and automated key management.  A future specification
    to\n   automatically populate rows in the database is envisioned.\n   Designers
    should recognize the warning provided in [RFC4107]:\n      Automated key management
    and manual key management provide very\n      different features.  In particular,
    the protocol associated with\n      an automated key management technique will
    confirm the liveness of\n      the peer, protect against replay, authenticate
    the source of the\n      short-term session key, associate protocol state information
    with\n      the short-term session key, and ensure that a fresh short-term\n      session
    key is generated.  Further, an automated key management\n      protocol can improve
    interoperability by including negotiation\n      mechanisms for cryptographic
    algorithms.  These valuable features\n      are impossible or extremely cumbersome
    to accomplish with manual\n      key management.\n"
  title: 7.  Security Considerations
- contents:
  - "8.  IANA Considerations\n   This specification defines three registries.\n"
  - contents:
    - "8.1.  KeyTable Protocols\n   Per this document, IANA has established a registry
      called \"KeyTable\n   Protocols\".\n   All assignments to the KeyTable Protocols
      registry are made on a\n   Specification Required basis per Section 4.1 of [RFC5226].\n
      \  Each registration entry must contain the three fields:\n      - Protocol
      Name (unique within the registry);\n      - Protocol-Specific Info; and\n      -
      Reference.\n   The specification needs to describe parameters required for using
      the\n   conceptual database as outlined in Section 4.  This typically means\n
      \  that the specification focuses more on the application of security\n   protocols
      with the key tables rather than being a new security\n   protocol specification
      for general purposes.  Of course, new\n   protocols may combine information
      on how to use the key table\n   database with the protocol specification.\n
      \  The registry has three columns.  The first column is a string of\n   Unicode
      characters encoded in UTF-8 representing the name protocol.\n   The second column
      is a string of Unicode characters encoded in UTF-8\n   providing a brief description
      of Protocol-Specific Info.  The third\n   column is a reference to a specification
      defining how the protocol is\n   used with the key table.\n   There are no initial
      registrations.\n"
    title: 8.1.  KeyTable Protocols
  - contents:
    - "8.2.  KeyTable KDFs\n   Per this document, IANA has established a registry
      called \"KeyTable\n   KDFs\".  The remainder of this section describes the registry.\n
      \  All assignments to the KeyTable KDFs registry are made on a First\n   Come
      First Served basis per Section 4.1 of RFC 5226.\n   The registry has three columns.
      \ The first column is a string of\n   Unicode characters encoded in UTF-8 representing
      the name of a KDF.\n   The second column is a string of Unicode characters encoded
      in UTF-8\n   providing a brief description of the KDF.  The third column is
      a\n   reference to a specification defining the KDF, if available.\n   The initial
      contents of this registry and that in Section 8.3 are\n   chosen based on the
      algorithms defined for TCP-AO [RFC5926].\n      KDF             Description
      \                    Reference\n      ------------    ----------------------------
      \   ---------\n      none            No KDF is used with this key    N/A\n      AES-128-CMAC
      \   AES-CMAC using 128-bit keys     [RFC4493]\n      HMAC-SHA-1      HMAC using
      the SHA-1 hash       [RFC2104]\n"
    title: 8.2.  KeyTable KDFs
  - contents:
    - "8.3.  KeyTable AlgIDs\n   Per this document, IANA has established a registry
      called \"KeyTable\n   AlgIDs\".  The remainder of this section describes the
      registry.\n   All assignments to the KeyTable AlgIDs registry are made on a
      First\n   Come First Served basis per Section 4.1 of RFC 5226.\n   The registry
      has three columns.  The first column is a string of\n   Unicode characters encoded
      in UTF-8 representing the algorithm\n   identifier (AlgID).  The second column
      is a string of Unicode\n   characters encoded in UTF-8 providing a brief description
      of the\n   identified algorithm.  The third column is a reference to a\n   specification
      defining the identified algorithm.\n   The initial contents of this registry
      and that in Section 8.2 are\n   chosen based on the algorithms defined for TCP-AO
      [RFC5926].\n      AlgID             Description                          Reference\n
      \     ------------      ---------------------------------    ---------\n      AES-128-CMAC
      \     AES-CMAC using 128-bit keys          [RFC4493]\n      AES-128-CMAC-96
      \  AES-128-CMAC truncated to 96 bits    [RFC5926]\n      HMAC-SHA-1-96     HMAC
      SHA-1 truncated to 96 bits      [RFC2104]\n"
    title: 8.3.  KeyTable AlgIDs
  title: 8.  IANA Considerations
- contents:
  - "9.  Acknowledgments\n   This document reflects many discussions with many different
    people\n   over many years.  In particular, the authors thank Jari Arkko, Ran\n
    \  Atkinson, Ron Bonica, Ross Callon, Lars Eggert, Pasi Eronen, Adrian\n   Farrel,
    Gregory Lebovitz, Acee Lindem, Sandy Murphy, Eric Rescorla,\n   Mike Shand, Dave
    Ward, and Brian Weis for their insights.  The\n   authors additionally thank Brian
    Weis for supplying text to address\n   IANA concerns and for help with formatting.\n
    \  Sam Hartman's work on this document is funded by Huawei.\n"
  title: 9.  Acknowledgments
- contents:
  - "10.  Normative References\n   [RFC20]    Cerf, V., \"ASCII format for network
    interchange\", RFC 20,\n              October 1969.\n   [RFC2119]  Bradner, S.,
    \"Key words for use in RFCs to Indicate\n              Requirement Levels\", BCP
    14, RFC 2119, March 1997.\n   [UAX15]    The Unicode Consortium, \"Unicode Standard
    Annex #15:\n              Unicode Normalization Forms\", Unicode 6.3.0, September\n
    \             2013, <http://www.unicode.org/reports/tr15/tr15-39.html>.\n   [UNICODE]
    \ The Unicode Consortium, \"The Unicode Standard, Version\n              6.3.0\",
    (Mountain View, CA: The Unicode Consortium, 2013.\n              ISBN 978-1-936213-08-5),\n
    \             <http://www.unicode.org/versions/Unicode6.3.0/>.\n"
  title: 10.  Normative References
- contents:
  - "11.  Informative References\n   [PRECIS-FRAMEWORK]\n              Saint-Andre,
    P. and M. Blanchet, \"PRECIS Framework:\n              Preparation and Comparison
    of Internationalized Strings in\n              Application Protocols\", Work in
    Progress, March 2014.\n   [RFC2104]  Krawczyk, H., Bellare, M., and R. Canetti,
    \"HMAC: Keyed-\n              Hashing for Message Authentication\", RFC 2104,
    February\n              1997.\n   [RFC3562]  Leech, M., \"Key Management Considerations
    for the TCP MD5\n              Signature Option\", RFC 3562, July 2003.\n   [RFC3629]
    \ Yergeau, F., \"UTF-8, a transformation format of ISO\n              10646\",
    STD 63, RFC 3629, November 2003.\n   [RFC4107]  Bellovin, S. and R. Housley, \"Guidelines
    for Cryptographic\n              Key Management\", BCP 107, RFC 4107, June 2005.\n
    \  [RFC4493]  Song, JH., Poovendran, R., Lee, J., and T. Iwata, \"The\n              AES-CMAC
    Algorithm\", RFC 4493, June 2006.\n   [RFC5226]  Narten, T. and H. Alvestrand,
    \"Guidelines for Writing an\n              IANA Considerations Section in RFCs\",
    BCP 26, RFC 5226,\n              May 2008.\n   [RFC5925]  Touch, J., Mankin, A.,
    and R. Bonica, \"The TCP\n              Authentication Option\", RFC 5925, June
    2010.\n   [RFC5926]  Lebovitz, G. and E. Rescorla, \"Cryptographic Algorithms\n
    \             for the TCP Authentication Option (TCP-AO)\", RFC 5926,\n              June
    2010.\n"
  title: 11.  Informative References
- contents:
  - "Authors' Addresses\n   Russell Housley\n   Vigil Security, LLC\n   918 Spring
    Knoll Drive\n   Herndon, VA 20170\n   USA\n   EMail: housley@vigilsec.com\n   Tim
    Polk\n   National Institute of Standards and Technology\n   100 Bureau Drive,
    Mail Stop 8930\n   Gaithersburg, MD 20899-8930\n   USA\n   EMail: tim.polk@nist.gov\n
    \  Sam Hartman\n   Painless Security, LLC\n   USA\n   EMail: hartmans-ietf@mit.edu\n
    \  Dacheng Zhang\n   Huawei Technologies Co. Ltd.\n   China\n   EMail: zhangdacheng@huawei.com\n"
  title: Authors' Addresses
