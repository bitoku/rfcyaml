- title: __initial_text__
  contents:
  - '                     Simple Mail Transfer Protocol

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2001).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document is a self-contained specification of the basic protocol\n\
    \   for the Internet electronic mail transport.  It consolidates, updates\n  \
    \ and clarifies, but doesn't add new or change existing functionality\n   of the\
    \ following:\n   -  the original SMTP (Simple Mail Transfer Protocol) specification\
    \ of\n      RFC 821 [30],\n   -  domain name system requirements and implications\
    \ for mail\n      transport from RFC 1035 [22] and RFC 974 [27],\n   -  the clarifications\
    \ and applicability statements in RFC 1123 [2],\n      and\n   -  material drawn\
    \ from the SMTP Extension mechanisms [19].\n   It obsoletes RFC 821, RFC 974,\
    \ and updates RFC 1123 (replaces the\n   mail transport materials of RFC 1123).\
    \  However, RFC 821 specifies\n   some features that were not in significant use\
    \ in the Internet by the\n   mid-1990s and (in appendices) some additional transport\
    \ models.\n   Those sections are omitted here in the interest of clarity and\n\
    \   brevity; readers needing them should refer to RFC 821.\n   It also includes\
    \ some additional material from RFC 1123 that required\n   amplification.  This\
    \ material has been identified in multiple ways,\n   mostly by tracking flaming\
    \ on various lists and newsgroups and\n   problems of unusual readings or interpretations\
    \ that have appeared as\n   the SMTP extensions have been deployed.  Where this\
    \ specification\n   moves beyond consolidation and actually differs from earlier\n\
    \   documents, it supersedes them technically as well as textually.\n   Although\
    \ SMTP was designed as a mail transport and delivery protocol,\n   this specification\
    \ also contains information that is important to its\n   use as a 'mail submission'\
    \ protocol, as recommended for POP [3, 26]\n   and IMAP [6].  Additional submission\
    \ issues are discussed in RFC 2476\n   [15].\n   Section 2.3 provides definitions\
    \ of terms specific to this document.\n   Except when the historical terminology\
    \ is necessary for clarity, this\n   document uses the current 'client' and 'server'\
    \ terminology to\n   identify the sending and receiving SMTP processes, respectively.\n\
    \   A companion document [32] discusses message headers, message bodies\n   and\
    \ formats and structures for them, and their relationship.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ..................................................\
    \  4\n   2. The SMTP Model ................................................  5\n\
    \   2.1 Basic Structure ..............................................  5\n  \
    \ 2.2 The Extension Model ..........................................  7\n   2.2.1\
    \ Background .................................................  7\n   2.2.2 Definition\
    \ and Registration of Extensions ..................  8\n   2.3 Terminology ..................................................\
    \  9\n   2.3.1 Mail Objects ............................................... 10\n\
    \   2.3.2 Senders and Receivers ...................................... 10\n  \
    \ 2.3.3 Mail Agents and Message Stores ............................. 10\n   2.3.4\
    \ Host ....................................................... 11\n   2.3.5 Domain\
    \ ..................................................... 11\n   2.3.6 Buffer and\
    \ State Table ..................................... 11\n   2.3.7 Lines ......................................................\
    \ 12\n   2.3.8 Originator, Delivery, Relay, and Gateway Systems ........... 12\n\
    \   2.3.9 Message Content and Mail Data .............................. 13\n  \
    \ 2.3.10 Mailbox and Address ....................................... 13\n   2.3.11\
    \ Reply ..................................................... 13\n   2.4 General\
    \ Syntax Principles and Transaction Model .............. 13\n   3. The SMTP Procedures:\
    \ An Overview .............................. 15\n   3.1 Session Initiation ...........................................\
    \ 15\n   3.2 Client Initiation ............................................ 16\n\
    \   3.3 Mail Transactions ............................................ 16\n  \
    \ 3.4 Forwarding for Address Correction or Updating ................ 19\n   3.5\
    \ Commands for Debugging Addresses ............................. 20\n   3.5.1\
    \ Overview ................................................... 20\n   3.5.2 VRFY\
    \ Normal Response ....................................... 22\n   3.5.3 Meaning\
    \ of VRFY or EXPN Success Response ................... 22\n   3.5.4 Semantics\
    \ and Applications of EXPN ......................... 23\n   3.6 Domains ......................................................\
    \ 23\n   3.7 Relaying ..................................................... 24\n\
    \   3.8 Mail Gatewaying .............................................. 25\n  \
    \ 3.8.1 Header Fields in Gatewaying ................................ 26\n   3.8.2\
    \ Received Lines in Gatewaying ............................... 26\n   3.8.3 Addresses\
    \ in Gatewaying .................................... 26\n   3.8.4 Other Header\
    \ Fields in Gatewaying .......................... 27\n   3.8.5 Envelopes in Gatewaying\
    \ .................................... 27\n   3.9 Terminating Sessions and Connections\
    \ ......................... 27\n   3.10 Mailing Lists and Aliases ...................................\
    \ 28\n   3.10.1 Alias ..................................................... 28\n\
    \   3.10.2 List ...................................................... 28\n  \
    \ 4. The SMTP Specifications ....................................... 29\n   4.1\
    \ SMTP Commands ................................................ 29\n   4.1.1\
    \ Command Semantics and Syntax ............................... 29\n   4.1.1.1\
    \  Extended HELLO (EHLO) or HELLO (HELO) ................... 29\n   4.1.1.2 MAIL\
    \ (MAIL) .............................................. 31\n   4.1.1.3 RECIPIENT\
    \ (RCPT) ......................................... 31\n   4.1.1.4 DATA (DATA)\
    \ .............................................. 33\n   4.1.1.5 RESET (RSET) .............................................\
    \ 34\n   4.1.1.6 VERIFY (VRFY) ............................................ 35\n\
    \   4.1.1.7 EXPAND (EXPN) ............................................ 35\n  \
    \ 4.1.1.8 HELP (HELP) .............................................. 35\n   4.1.1.9\
    \ NOOP (NOOP) .............................................. 35\n   4.1.1.10 QUIT\
    \ (QUIT) ............................................. 36\n   4.1.2 Command Argument\
    \ Syntax .................................... 36\n   4.1.3 Address Literals ...........................................\
    \ 38\n   4.1.4 Order of Commands .......................................... 39\n\
    \   4.1.5 Private-use Commands ....................................... 40\n  \
    \ 4.2  SMTP Replies ................................................ 40\n   4.2.1\
    \ Reply Code Severities and Theory ........................... 42\n   4.2.2 Reply\
    \ Codes by Function Groups ............................. 44\n   4.2.3  Reply Codes\
    \ in Numeric Order .............................. 45\n   4.2.4 Reply Code 502\
    \ ............................................. 46\n   4.2.5 Reply Codes After\
    \ DATA and the Subsequent <CRLF>.<CRLF> .... 46\n   4.3 Sequencing of Commands\
    \ and Replies ........................... 47\n   4.3.1 Sequencing Overview ........................................\
    \ 47\n   4.3.2 Command-Reply Sequences .................................... 48\n\
    \   4.4 Trace Information ............................................ 49\n  \
    \ 4.5 Additional Implementation Issues ............................. 53\n   4.5.1\
    \ Minimum Implementation ..................................... 53\n   4.5.2 Transparency\
    \ ............................................... 53\n   4.5.3 Sizes and Timeouts\
    \ ......................................... 54\n   4.5.3.1 Size limits and minimums\
    \ ................................. 54\n   4.5.3.2 Timeouts .................................................\
    \ 56\n   4.5.4 Retry Strategies ........................................... 57\n\
    \   4.5.4.1 Sending Strategy ......................................... 58\n  \
    \ 4.5.4.2 Receiving Strategy ....................................... 59\n   4.5.5\
    \ Messages with a null reverse-path .......................... 59\n   5. Address\
    \ Resolution and Mail Handling .......................... 60\n   6. Problem Detection\
    \ and Handling ................................ 62\n   6.1 Reliable Delivery and\
    \ Replies by Email ....................... 62\n   6.2 Loop Detection ...............................................\
    \ 63\n   6.3 Compensating for Irregularities .............................. 63\n\
    \   7. Security Considerations ....................................... 64\n  \
    \ 7.1 Mail Security and Spoofing ................................... 64\n   7.2\
    \ \"Blind\" Copies ............................................... 65\n   7.3\
    \ VRFY, EXPN, and Security ..................................... 65\n   7.4 Information\
    \ Disclosure in Announcements ...................... 66\n   7.5 Information Disclosure\
    \ in Trace Fields ....................... 66\n   7.6 Information Disclosure in\
    \ Message Forwarding ................. 67\n   7.7 Scope of Operation of SMTP Servers\
    \ ........................... 67\n   8. IANA Considerations ...........................................\
    \ 67\n   9. References .................................................... 68\n\
    \   10. Editor's Address ............................................. 70\n  \
    \ 11. Acknowledgments .............................................. 70\n   Appendices\
    \ ....................................................... 71\n   A. TCP Transport\
    \ Service ......................................... 71\n   B. Generating SMTP\
    \ Commands from RFC 822 Headers ................. 71\n   C. Source Routes .................................................\
    \ 72\n   D. Scenarios ..................................................... 73\n\
    \   E. Other Gateway Issues .......................................... 76\n  \
    \ F. Deprecated Features of RFC 821 ................................ 76\n   Full\
    \ Copyright Statement ......................................... 79\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   The objective of the Simple Mail Transfer Protocol (SMTP)\
    \ is to\n   transfer mail reliably and efficiently.\n   SMTP is independent of\
    \ the particular transmission subsystem and\n   requires only a reliable ordered\
    \ data stream channel.  While this\n   document specifically discusses transport\
    \ over TCP, other transports\n   are possible.  Appendices to RFC 821 describe\
    \ some of them.\n   An important feature of SMTP is its capability to transport\
    \ mail\n   across networks, usually referred to as \"SMTP mail relaying\" (see\n\
    \   section 3.8).  A network consists of the mutually-TCP-accessible\n   hosts\
    \ on the public Internet, the mutually-TCP-accessible hosts on a\n   firewall-isolated\
    \ TCP/IP Intranet, or hosts in some other LAN or WAN\n   environment utilizing\
    \ a non-TCP transport-level protocol.  Using\n   SMTP, a process can transfer\
    \ mail to another process on the same\n   network or to some other network via\
    \ a relay or gateway process\n   accessible to both networks.\n   In this way,\
    \ a mail message may pass through a number of intermediate\n   relay or gateway\
    \ hosts on its path from sender to ultimate recipient.\n   The Mail eXchanger\
    \ mechanisms of the domain name system [22, 27] (and\n   section 5 of this document)\
    \ are used to identify the appropriate\n   next-hop destination for a message\
    \ being transported.\n"
- title: 2. The SMTP Model
  contents:
  - '2. The SMTP Model

    '
- title: 2.1 Basic Structure
  contents:
  - "2.1 Basic Structure\n   The SMTP design can be pictured as:\n               +----------+\
    \                +----------+\n   +------+    |          |                |  \
    \        |\n   | User |<-->|          |      SMTP      |          |\n   +------+\
    \    |  Client- |Commands/Replies| Server-  |\n   +------+    |   SMTP   |<-------------->|\
    \    SMTP  |    +------+\n   | File |<-->|          |    and Mail    |       \
    \   |<-->| File |\n   |System|    |          |                |          |   \
    \ |System|\n   +------+    +----------+                +----------+    +------+\n\
    \                SMTP client                SMTP server\n   When an SMTP client\
    \ has a message to transmit, it establishes a two-\n   way transmission channel\
    \ to an SMTP server.  The responsibility of an\n   SMTP client is to transfer\
    \ mail messages to one or more SMTP servers,\n   or report its failure to do so.\n\
    \   The means by which a mail message is presented to an SMTP client, and\n  \
    \ how that client determines the domain name(s) to which mail messages\n   are\
    \ to be transferred is a local matter, and is not addressed by this\n   document.\
    \  In some cases, the domain name(s) transferred to, or\n   determined by, an\
    \ SMTP client will identify the final destination(s)\n   of the mail message.\
    \  In other cases, common with SMTP clients\n   associated with implementations\
    \ of the POP [3, 26] or IMAP [6]\n   protocols, or when the SMTP client is inside\
    \ an isolated transport\n   service environment, the domain name determined will\
    \ identify an\n   intermediate destination through which all mail messages are\
    \ to be\n   relayed.  SMTP clients that transfer all traffic, regardless of the\n\
    \   target domain names associated with the individual messages, or that\n   do\
    \ not maintain queues for retrying message transmissions that\n   initially cannot\
    \ be completed, may otherwise conform to this\n   specification but are not considered\
    \ fully-capable.  Fully-capable\n   SMTP implementations, including the relays\
    \ used by these less capable\n   ones, and their destinations, are expected to\
    \ support all of the\n   queuing, retrying, and alternate address functions discussed\
    \ in this\n   specification.\n   The means by which an SMTP client, once it has\
    \ determined a target\n   domain name, determines the identity of an SMTP server\
    \ to which a\n   copy of a message is to be transferred, and then performs that\n\
    \   transfer, is covered by this document.  To effect a mail transfer to\n   an\
    \ SMTP server, an SMTP client establishes a two-way transmission\n   channel to\
    \ that SMTP server.  An SMTP client determines the address\n   of an appropriate\
    \ host running an SMTP server by resolving a\n   destination domain name to either\
    \ an intermediate Mail eXchanger host\n   or a final target host.\n   An SMTP\
    \ server may be either the ultimate destination or an\n   intermediate \"relay\"\
    \ (that is, it may assume the role of an SMTP\n   client after receiving the message)\
    \ or \"gateway\" (that is, it may\n   transport the message further using some\
    \ protocol other than SMTP).\n   SMTP commands are generated by the SMTP client\
    \ and sent to the SMTP\n   server.  SMTP replies are sent from the SMTP server\
    \ to the SMTP\n   client in response to the commands.\n   In other words, message\
    \ transfer can occur in a single connection\n   between the original SMTP-sender\
    \ and the final SMTP-recipient, or can\n   occur in a series of hops through intermediary\
    \ systems.  In either\n   case, a formal handoff of responsibility for the message\
    \ occurs: the\n   protocol requires that a server accept responsibility for either\n\
    \   delivering a message or properly reporting the failure to do so.\n   Once\
    \ the transmission channel is established and initial handshaking\n   completed,\
    \ the SMTP client normally initiates a mail transaction.\n   Such a transaction\
    \ consists of a series of commands to specify the\n   originator and destination\
    \ of the mail and transmission of the\n   message content (including any headers\
    \ or other structure) itself.\n   When the same message is sent to multiple recipients,\
    \ this protocol\n   encourages the transmission of only one copy of the data for\
    \ all\n   recipients at the same destination (or intermediate relay) host.\n \
    \  The server responds to each command with a reply; replies may\n   indicate\
    \ that the command was accepted, that additional commands are\n   expected, or\
    \ that a temporary or permanent error condition exists.\n   Commands specifying\
    \ the sender or recipients may include server-\n   permitted SMTP service extension\
    \ requests as discussed in section\n   2.2.  The dialog is purposely lock-step,\
    \ one-at-a-time, although this\n   can be modified by mutually-agreed extension\
    \ requests such as command\n   pipelining [13].\n   Once a given mail message\
    \ has been transmitted, the client may either\n   request that the connection\
    \ be shut down or may initiate other mail\n   transactions.  In addition, an SMTP\
    \ client may use a connection to an\n   SMTP server for ancillary services such\
    \ as verification of email\n   addresses or retrieval of mailing list subscriber\
    \ addresses.\n   As suggested above, this protocol provides mechanisms for the\n\
    \   transmission of mail.  This transmission normally occurs directly\n   from\
    \ the sending user's host to the receiving user's host when the\n   two hosts\
    \ are connected to the same transport service.  When they are\n   not connected\
    \ to the same transport service, transmission occurs via\n   one or more relay\
    \ SMTP servers.  An intermediate host that acts as\n   either an SMTP relay or\
    \ as a gateway into some other transmission\n   environment is usually selected\
    \ through the use of the domain name\n   service (DNS) Mail eXchanger mechanism.\n\
    \   Usually, intermediate hosts are determined via the DNS MX record, not\n  \
    \ by explicit \"source\" routing (see section 5 and appendices C and\n   F.2).\n"
- title: 2.2 The Extension Model
  contents:
  - '2.2 The Extension Model

    '
- title: 2.2.1 Background
  contents:
  - "2.2.1 Background\n   In an effort that started in 1990, approximately a decade\
    \ after RFC\n   821 was completed, the protocol was modified with a \"service\n\
    \   extensions\" model that permits the client and server to agree to\n   utilize\
    \ shared functionality beyond the original SMTP requirements.\n   The SMTP extension\
    \ mechanism defines a means whereby an extended SMTP\n   client and server may\
    \ recognize each other, and the server can inform\n   the client as to the service\
    \ extensions that it supports.\n   Contemporary SMTP implementations MUST support\
    \ the basic extension\n   mechanisms.  For instance, servers MUST support the\
    \ EHLO command even\n   if they do not implement any specific extensions and clients\
    \ SHOULD\n   preferentially utilize EHLO rather than HELO.  (However, for\n  \
    \ compatibility with older conforming implementations, SMTP clients and\n   servers\
    \ MUST support the original HELO mechanisms as a fallback.)\n   Unless the different\
    \ characteristics of HELO must be identified for\n   interoperability purposes,\
    \ this document discusses only EHLO.\n   SMTP is widely deployed and high-quality\
    \ implementations have proven\n   to be very robust.  However, the Internet community\
    \ now considers\n   some services to be important that were not anticipated when\
    \ the\n   protocol was first designed.  If support for those services is to be\n\
    \   added, it must be done in a way that permits older implementations to\n  \
    \ continue working acceptably.  The extension framework consists of:\n   -  The\
    \ SMTP command EHLO, superseding the earlier HELO,\n   -  a registry of SMTP service\
    \ extensions,\n   -  additional parameters to the SMTP MAIL and RCPT commands,\
    \ and\n   -  optional replacements for commands defined in this protocol, such\n\
    \      as for DATA in non-ASCII transmissions [33].\n   SMTP's strength comes\
    \ primarily from its simplicity.  Experience with\n   many protocols has shown\
    \ that protocols with few options tend towards\n   ubiquity, whereas protocols\
    \ with many options tend towards obscurity.\n   Each and every extension, regardless\
    \ of its benefits, must be\n   carefully scrutinized with respect to its implementation,\
    \ deployment,\n   and interoperability costs.  In many cases, the cost of extending\
    \ the\n   SMTP service will likely outweigh the benefit.\n"
- title: 2.2.2 Definition and Registration of Extensions
  contents:
  - "2.2.2 Definition and Registration of Extensions\n   The IANA maintains a registry\
    \ of SMTP service extensions.  A\n   corresponding EHLO keyword value is associated\
    \ with each extension.\n   Each service extension registered with the IANA must\
    \ be defined in a\n   formal standards-track or IESG-approved experimental protocol\n\
    \   document.  The definition must include:\n   -  the textual name of the SMTP\
    \ service extension;\n   -  the EHLO keyword value associated with the extension;\n\
    \   -  the syntax and possible values of parameters associated with the\n    \
    \  EHLO keyword value;\n   -  any additional SMTP verbs associated with the extension\n\
    \      (additional verbs will usually be, but are not required to be, the\n  \
    \    same as the EHLO keyword value);\n   -  any new parameters the extension\
    \ associates with the MAIL or RCPT\n      verbs;\n   -  a description of how support\
    \ for the extension affects the\n      behavior of a server and client SMTP; and,\n\
    \   -  the increment by which the extension is increasing the maximum\n      length\
    \ of the commands MAIL and/or RCPT, over that specified in\n      this standard.\n\
    \   In addition, any EHLO keyword value starting with an upper or lower\n   case\
    \ \"X\" refers to a local SMTP service extension used exclusively\n   through\
    \ bilateral agreement.  Keywords beginning with \"X\" MUST NOT be\n   used in\
    \ a registered service extension.  Conversely, keyword values\n   presented in\
    \ the EHLO response that do not begin with \"X\" MUST\n   correspond to a standard,\
    \ standards-track, or IESG-approved\n   experimental SMTP service extension registered\
    \ with IANA.  A\n   conforming server MUST NOT offer non-\"X\"-prefixed keyword\
    \ values that\n   are not described in a registered extension.\n   Additional\
    \ verbs and parameter names are bound by the same rules as\n   EHLO keywords;\
    \ specifically, verbs beginning with \"X\" are local\n   extensions that may not\
    \ be registered or standardized.  Conversely,\n   verbs not beginning with \"\
    X\" must always be registered.\n"
- title: 2.3 Terminology
  contents:
  - "2.3 Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and\
    \ \"OPTIONAL\" in this\n   document are to be interpreted as described below.\n\
    \   1. MUST   This word, or the terms \"REQUIRED\" or \"SHALL\", mean that\n \
    \     the definition is an absolute requirement of the specification.\n   2. MUST\
    \ NOT   This phrase, or the phrase \"SHALL NOT\", mean that the\n      definition\
    \ is an absolute prohibition of the specification.\n   3. SHOULD   This word,\
    \ or the adjective \"RECOMMENDED\", mean that\n      there may exist valid reasons\
    \ in particular circumstances to\n      ignore a particular item, but the full\
    \ implications must be\n      understood and carefully weighed before choosing\
    \ a different\n      course.\n   4. SHOULD NOT   This phrase, or the phrase \"\
    NOT RECOMMENDED\" mean\n      that there may exist valid reasons in particular\
    \ circumstances\n      when the particular behavior is acceptable or even useful,\
    \ but the\n      full implications should be understood and the case carefully\n\
    \      weighed before implementing any behavior described with this\n      label.\n\
    \   5. MAY   This word, or the adjective \"OPTIONAL\", mean that an item is\n\
    \      truly optional.  One vendor may choose to include the item because\n  \
    \    a particular marketplace requires it or because the vendor feels\n      that\
    \ it enhances the product while another vendor may omit the\n      same item.\
    \  An implementation which does not include a particular\n      option MUST be\
    \ prepared to interoperate with another\n      implementation which does include\
    \ the option, though perhaps with\n      reduced functionality.  In the same vein\
    \ an implementation which\n      does include a particular option MUST be prepared\
    \ to interoperate\n      with another implementation which does not include the\
    \ option\n      (except, of course, for the feature the option provides.)\n"
- title: 2.3.1 Mail Objects
  contents:
  - "2.3.1 Mail Objects\n   SMTP transports a mail object.  A mail object contains\
    \ an envelope\n   and content.\n   The SMTP envelope is sent as a series of SMTP\
    \ protocol units\n   (described in section 3).  It consists of an originator address\
    \ (to\n   which error reports should be directed); one or more recipient\n   addresses;\
    \ and optional protocol extension material.  Historically,\n   variations on the\
    \ recipient address specification command (RCPT TO)\n   could be used to specify\
    \ alternate delivery modes, such as immediate\n   display; those variations have\
    \ now been deprecated (see appendix F,\n   section F.6).\n   The SMTP content\
    \ is sent in the SMTP DATA protocol unit and has two\n   parts:  the headers and\
    \ the body.  If the content conforms to other\n   contemporary standards, the\
    \ headers form a collection of field/value\n   pairs structured as in the message\
    \ format specification [32]; the\n   body, if structured, is defined according\
    \ to MIME [12].  The content\n   is textual in nature, expressed using the US-ASCII\
    \ repertoire [1].\n   Although SMTP extensions (such as \"8BITMIME\" [20]) may\
    \ relax this\n   restriction for the content body, the content headers are always\n\
    \   encoded using the US-ASCII repertoire.  A MIME extension [23] defines\n  \
    \ an algorithm for representing header values outside the US-ASCII\n   repertoire,\
    \ while still encoding them using the US-ASCII repertoire.\n"
- title: 2.3.2 Senders and Receivers
  contents:
  - "2.3.2 Senders and Receivers\n   In RFC 821, the two hosts participating in an\
    \ SMTP transaction were\n   described as the \"SMTP-sender\" and \"SMTP-receiver\"\
    .  This document\n   has been changed to reflect current industry terminology\
    \ and hence\n   refers to them as the \"SMTP client\" (or sometimes just \"the\
    \ client\")\n   and \"SMTP server\" (or just \"the server\"), respectively.  Since\
    \ a\n   given host may act both as server and client in a relay situation,\n \
    \  \"receiver\" and \"sender\" terminology is still used where needed for\n  \
    \ clarity.\n"
- title: 2.3.3 Mail Agents and Message Stores
  contents:
  - "2.3.3 Mail Agents and Message Stores\n   Additional mail system terminology became\
    \ common after RFC 821 was\n   published and, where convenient, is used in this\
    \ specification.  In\n   particular, SMTP servers and clients provide a mail transport\
    \ service\n   and therefore act as \"Mail Transfer Agents\" (MTAs).  \"Mail User\n\
    \   Agents\" (MUAs or UAs) are normally thought of as the sources and\n   targets\
    \ of mail.  At the source, an MUA might collect mail to be\n   transmitted from\
    \ a user and hand it off to an MTA; the final\n   (\"delivery\") MTA would be\
    \ thought of as handing the mail off to an\n   MUA (or at least transferring responsibility\
    \ to it, e.g., by\n   depositing the message in a \"message store\").  However,\
    \ while these\n   terms are used with at least the appearance of great precision\
    \ in\n   other environments, the implied boundaries between MUAs and MTAs\n  \
    \ often do not accurately match common, and conforming, practices with\n   Internet\
    \ mail.  Hence, the reader should be cautious about inferring\n   the strong relationships\
    \ and responsibilities that might be implied\n   if these terms were used elsewhere.\n"
- title: 2.3.4 Host
  contents:
  - "2.3.4 Host\n   For the purposes of this specification, a host is a computer system\n\
    \   attached to the Internet (or, in some cases, to a private TCP/IP\n   network)\
    \ and supporting the SMTP protocol.  Hosts are known by names\n   (see \"domain\"\
    ); identifying them by numerical address is discouraged.\n"
- title: 2.3.5 Domain
  contents:
  - "2.3.5 Domain\n   A domain (or domain name) consists of one or more dot-separated\n\
    \   components.  These components (\"labels\" in DNS terminology [22]) are\n \
    \  restricted for SMTP purposes to consist of a sequence of letters,\n   digits,\
    \ and hyphens drawn from the ASCII character set [1].  Domain\n   names are used\
    \ as names of hosts and of other entities in the domain\n   name hierarchy.  For\
    \ example, a domain may refer to an alias (label\n   of a CNAME RR) or the label\
    \ of Mail eXchanger records to be used to\n   deliver mail instead of representing\
    \ a host name.  See [22] and\n   section 5 of this specification.\n   The domain\
    \ name, as described in this document and in [22], is the\n   entire, fully-qualified\
    \ name (often referred to as an \"FQDN\").  A\n   domain name that is not in FQDN\
    \ form is no more than a local alias.\n   Local aliases MUST NOT appear in any\
    \ SMTP transaction.\n"
- title: 2.3.6 Buffer and State Table
  contents:
  - "2.3.6 Buffer and State Table\n   SMTP sessions are stateful, with both parties\
    \ carefully maintaining a\n   common view of the current state.  In this document\
    \ we model this\n   state by a virtual \"buffer\" and a \"state table\" on the\
    \ server which\n   may be used by the client to, for example, \"clear the buffer\"\
    \ or\n   \"reset the state table,\" causing the information in the buffer to be\n\
    \   discarded and the state to be returned to some previous state.\n"
- title: 2.3.7 Lines
  contents:
  - "2.3.7 Lines\n   SMTP commands and, unless altered by a service extension, message\n\
    \   data, are transmitted in \"lines\".  Lines consist of zero or more data\n\
    \   characters terminated by the sequence ASCII character \"CR\" (hex value\n\
    \   0D) followed immediately by ASCII character \"LF\" (hex value 0A).\n   This\
    \ termination sequence is denoted as <CRLF> in this document.\n   Conforming implementations\
    \ MUST NOT recognize or generate any other\n   character or character sequence\
    \ as a line terminator.  Limits MAY be\n   imposed on line lengths by servers\
    \ (see section 4.5.3).\n   In addition, the appearance of \"bare\" \"CR\" or \"\
    LF\" characters in text\n   (i.e., either without the other) has a long history\
    \ of causing\n   problems in mail implementations and applications that use the\
    \ mail\n   system as a tool.  SMTP client implementations MUST NOT transmit\n\
    \   these characters except when they are intended as line terminators\n   and\
    \ then MUST, as indicated above, transmit them only as a <CRLF>\n   sequence.\n"
- title: 2.3.8 Originator, Delivery, Relay, and Gateway Systems
  contents:
  - "2.3.8 Originator, Delivery, Relay, and Gateway Systems\n   This specification\
    \ makes a distinction among four types of SMTP\n   systems, based on the role\
    \ those systems play in transmitting\n   electronic mail.  An \"originating\"\
    \ system (sometimes called an SMTP\n   originator) introduces mail into the Internet\
    \ or, more generally,\n   into a transport service environment.  A \"delivery\"\
    \ SMTP system is\n   one that receives mail from a transport service environment\
    \ and\n   passes it to a mail user agent or deposits it in a message store\n \
    \  which a mail user agent is expected to subsequently access.  A\n   \"relay\"\
    \ SMTP system (usually referred to just as a \"relay\") receives\n   mail from\
    \ an SMTP client and transmits it, without modification to\n   the message data\
    \ other than adding trace information, to another SMTP\n   server for further\
    \ relaying or for delivery.\n   A \"gateway\" SMTP system (usually referred to\
    \ just as a \"gateway\")\n   receives mail from a client system in one transport\
    \ environment and\n   transmits it to a server system in another transport environment.\n\
    \   Differences in protocols or message semantics between the transport\n   environments\
    \ on either side of a gateway may require that the gateway\n   system perform\
    \ transformations to the message that are not permitted\n   to SMTP relay systems.\
    \  For the purposes of this specification,\n   firewalls that rewrite addresses\
    \ should be considered as gateways,\n   even if SMTP is used on both sides of\
    \ them (see [11]).\n"
- title: 2.3.9 Message Content and Mail Data
  contents:
  - "2.3.9 Message Content and Mail Data\n   The terms \"message content\" and \"\
    mail data\" are used interchangeably\n   in this document to describe the material\
    \ transmitted after the DATA\n   command is accepted and before the end of data\
    \ indication is\n   transmitted.  Message content includes message headers and\
    \ the\n   possibly-structured message body.  The MIME specification [12]\n   provides\
    \ the standard mechanisms for structured message bodies.\n"
- title: 2.3.10 Mailbox and Address
  contents:
  - "2.3.10 Mailbox and Address\n   As used in this specification, an \"address\"\
    \ is a character string\n   that identifies a user to whom mail will be sent or\
    \ a location into\n   which mail will be deposited.  The term \"mailbox\" refers\
    \ to that\n   depository.  The two terms are typically used interchangeably unless\n\
    \   the distinction between the location in which mail is placed (the\n   mailbox)\
    \ and a reference to it (the address) is important.  An\n   address normally consists\
    \ of user and domain specifications.  The\n   standard mailbox naming convention\
    \ is defined to be \"local-\n   part@domain\": contemporary usage permits a much\
    \ broader set of\n   applications than simple \"user names\".  Consequently, and\
    \ due to a\n   long history of problems when intermediate hosts have attempted\
    \ to\n   optimize transport by modifying them, the local-part MUST be\n   interpreted\
    \ and assigned semantics only by the host specified in the\n   domain part of\
    \ the address.\n"
- title: 2.3.11 Reply
  contents:
  - "2.3.11 Reply\n   An SMTP reply is an acknowledgment (positive or negative) sent\
    \ from\n   receiver to sender via the transmission channel in response to a\n\
    \   command.  The general form of a reply is a numeric completion code\n   (indicating\
    \ failure or success) usually followed by a text string.\n   The codes are for\
    \ use by programs and the text is usually intended\n   for human users.  Recent\
    \ work [34] has specified further structuring\n   of the reply strings, including\
    \ the use of supplemental and more\n   specific completion codes.\n"
- title: 2.4 General Syntax Principles and Transaction Model
  contents:
  - "2.4 General Syntax Principles and Transaction Model\n   SMTP commands and replies\
    \ have a rigid syntax.  All commands begin\n   with a command verb.  All Replies\
    \ begin with a three digit numeric\n   code.  In some commands and replies, arguments\
    \ MUST follow the verb\n   or reply code.  Some commands do not accept arguments\
    \ (after the\n   verb), and some reply codes are followed, sometimes optionally,\
    \ by\n   free form text.  In both cases, where text appears, it is separated\n\
    \   from the verb or reply code by a space character.  Complete\n   definitions\
    \ of commands and replies appear in section 4.\n   Verbs and argument values (e.g.,\
    \ \"TO:\" or \"to:\" in the RCPT command\n   and extension name keywords) are\
    \ not case sensitive, with the sole\n   exception in this specification of a mailbox\
    \ local-part (SMTP\n   Extensions may explicitly specify case-sensitive elements).\
    \  That is,\n   a command verb, an argument value other than a mailbox local-part,\n\
    \   and free form text MAY be encoded in upper case, lower case, or any\n   mixture\
    \ of upper and lower case with no impact on its meaning.  This\n   is NOT true\
    \ of a mailbox local-part.  The local-part of a mailbox\n   MUST BE treated as\
    \ case sensitive.  Therefore, SMTP implementations\n   MUST take care to preserve\
    \ the case of mailbox local-parts.  Mailbox\n   domains are not case sensitive.\
    \  In particular, for some hosts the\n   user \"smith\" is different from the\
    \ user \"Smith\".  However, exploiting\n   the case sensitivity of mailbox local-parts\
    \ impedes interoperability\n   and is discouraged.\n   A few SMTP servers, in\
    \ violation of this specification (and RFC 821)\n   require that command verbs\
    \ be encoded by clients in upper case.\n   Implementations MAY wish to employ\
    \ this encoding to accommodate those\n   servers.\n   The argument field consists\
    \ of a variable length character string\n   ending with the end of the line, i.e.,\
    \ with the character sequence\n   <CRLF>.  The receiver will take no action until\
    \ this sequence is\n   received.\n   The syntax for each command is shown with\
    \ the discussion of that\n   command.  Common elements and parameters are shown\
    \ in section 4.1.2.\n   Commands and replies are composed of characters from the\
    \ ASCII\n   character set [1].  When the transport service provides an 8-bit byte\n\
    \   (octet) transmission channel, each 7-bit character is transmitted\n   right\
    \ justified in an octet with the high order bit cleared to zero.\n   More specifically,\
    \ the unextended SMTP service provides seven bit\n   transport only.  An originating\
    \ SMTP client which has not\n   successfully negotiated an appropriate extension\
    \ with a particular\n   server MUST NOT transmit messages with information in\
    \ the high-order\n   bit of octets.  If such messages are transmitted in violation\
    \ of this\n   rule, receiving SMTP servers MAY clear the high-order bit or reject\n\
    \   the message as invalid.  In general, a relay SMTP SHOULD assume that\n   the\
    \ message content it has received is valid and, assuming that the\n   envelope\
    \ permits doing so, relay it without inspecting that content.\n   Of course, if\
    \ the content is mislabeled and the data path cannot\n   accept the actual content,\
    \ this may result in ultimate delivery of a\n   severely garbled message to the\
    \ recipient.  Delivery SMTP systems MAY\n   reject (\"bounce\") such messages\
    \ rather than deliver them.  No sending\n   SMTP system is permitted to send envelope\
    \ commands in any character\n   set other than US-ASCII; receiving systems SHOULD\
    \ reject such\n   commands, normally using \"500 syntax error - invalid character\"\
    \n   replies.\n   Eight-bit message content transmission MAY be requested of the\
    \ server\n   by a client using extended SMTP facilities, notably the \"8BITMIME\"\
    \n   extension [20].  8BITMIME SHOULD be supported by SMTP servers.\n   However,\
    \ it MUST not be construed as authorization to transmit\n   unrestricted eight\
    \ bit material.  8BITMIME MUST NOT be requested by\n   senders for material with\
    \ the high bit on that is not in MIME format\n   with an appropriate content-transfer\
    \ encoding; servers MAY reject\n   such messages.\n   The metalinguistic notation\
    \ used in this document corresponds to the\n   \"Augmented BNF\" used in other\
    \ Internet mail system documents.  The\n   reader who is not familiar with that\
    \ syntax should consult the ABNF\n   specification [8].  Metalanguage terms used\
    \ in running text are\n   surrounded by pointed brackets (e.g., <CRLF>) for clarity.\n"
- title: '3. The SMTP Procedures: An Overview'
  contents:
  - "3. The SMTP Procedures: An Overview\n   This section contains descriptions of\
    \ the procedures used in SMTP:\n   session initiation, the mail transaction, forwarding\
    \ mail, verifying\n   mailbox names and expanding mailing lists, and the opening\
    \ and\n   closing exchanges.  Comments on relaying, a note on mail domains, and\n\
    \   a discussion of changing roles are included at the end of this\n   section.\
    \  Several complete scenarios are presented in appendix D.\n"
- title: 3.1 Session Initiation
  contents:
  - "3.1 Session Initiation\n   An SMTP session is initiated when a client opens a\
    \ connection to a\n   server and the server responds with an opening message.\n\
    \   SMTP server implementations MAY include identification of their\n   software\
    \ and version information in the connection greeting reply\n   after the 220 code,\
    \ a practice that permits more efficient isolation\n   and repair of any problems.\
    \  Implementations MAY make provision for\n   SMTP servers to disable the software\
    \ and version announcement where\n   it causes security concerns.  While some\
    \ systems also identify their\n   contact point for mail problems, this is not\
    \ a substitute for\n   maintaining the required \"postmaster\" address (see section\
    \ 4.5.1).\n   The SMTP protocol allows a server to formally reject a transaction\n\
    \   while still allowing the initial connection as follows: a 554\n   response\
    \ MAY be given in the initial connection opening message\n   instead of the 220.\
    \  A server taking this approach MUST still wait\n   for the client to send a\
    \ QUIT (see section 4.1.1.10) before closing\n   the connection and SHOULD respond\
    \ to any intervening commands with\n   \"503 bad sequence of commands\".  Since\
    \ an attempt to make an SMTP\n   connection to such a system is probably in error,\
    \ a server returning\n   a 554 response on connection opening SHOULD provide enough\n\
    \   information in the reply text to facilitate debugging of the sending\n   system.\n"
- title: 3.2 Client Initiation
  contents:
  - "3.2 Client Initiation\n   Once the server has sent the welcoming message and\
    \ the client has\n   received it, the client normally sends the EHLO command to\
    \ the\n   server, indicating the client's identity.  In addition to opening the\n\
    \   session, use of EHLO indicates that the client is able to process\n   service\
    \ extensions and requests that the server provide a list of the\n   extensions\
    \ it supports.  Older SMTP systems which are unable to\n   support service extensions\
    \ and contemporary clients which do not\n   require service extensions in the\
    \ mail session being initiated, MAY\n   use HELO instead of EHLO.  Servers MUST\
    \ NOT return the extended\n   EHLO-style response to a HELO command.  For a particular\
    \ connection\n   attempt, if the server returns a \"command not recognized\" response\
    \ to\n   EHLO, the client SHOULD be able to fall back and send HELO.\n   In the\
    \ EHLO command the host sending the command identifies itself;\n   the command\
    \ may be interpreted as saying \"Hello, I am <domain>\" (and,\n   in the case\
    \ of EHLO, \"and I support service extension requests\").\n"
- title: 3.3 Mail Transactions
  contents:
  - "3.3 Mail Transactions\n   There are three steps to SMTP mail transactions.  The\
    \ transaction\n   starts with a MAIL command which gives the sender identification.\n\
    \   (In general, the MAIL command may be sent only when no mail\n   transaction\
    \ is in progress; see section 4.1.4.)  A series of one or\n   more RCPT commands\
    \ follows giving the receiver information.  Then a\n   DATA command initiates\
    \ transfer of the mail data and is terminated by\n   the \"end of mail\" data\
    \ indicator, which also confirms the\n   transaction.\n   The first step in the\
    \ procedure is the MAIL command.\n      MAIL FROM:<reverse-path> [SP <mail-parameters>\
    \ ] <CRLF>\n   This command tells the SMTP-receiver that a new mail transaction\
    \ is\n   starting and to reset all its state tables and buffers, including any\n\
    \   recipients or mail data.  The <reverse-path> portion of the first or\n   only\
    \ argument contains the source mailbox (between \"<\" and \">\"\n   brackets),\
    \ which can be used to report errors (see section 4.2 for a\n   discussion of\
    \ error reporting).  If accepted, the SMTP server returns\n   a 250 OK reply.\
    \  If the mailbox specification is not acceptable for\n   some reason, the server\
    \ MUST return a reply indicating whether the\n   failure is permanent (i.e., will\
    \ occur again if the client tries to\n   send the same address again) or temporary\
    \ (i.e., the address might be\n   accepted if the client tries again later). \
    \ Despite the apparent\n   scope of this requirement, there are circumstances\
    \ in which the\n   acceptability of the reverse-path may not be determined until\
    \ one or\n   more forward-paths (in RCPT commands) can be examined.  In those\n\
    \   cases, the server MAY reasonably accept the reverse-path (with a 250\n   reply)\
    \ and then report problems after the forward-paths are received\n   and examined.\
    \  Normally, failures produce 550 or 553 replies.\n   Historically, the <reverse-path>\
    \ can contain more than just a\n   mailbox, however, contemporary systems SHOULD\
    \ NOT use source routing\n   (see appendix C).\n   The optional <mail-parameters>\
    \ are associated with negotiated SMTP\n   service extensions (see section 2.2).\n\
    \   The second step in the procedure is the RCPT command.\n      RCPT TO:<forward-path>\
    \ [ SP <rcpt-parameters> ] <CRLF>\n   The first or only argument to this command\
    \ includes a forward-path\n   (normally a mailbox and domain, always surrounded\
    \ by \"<\" and \">\"\n   brackets) identifying one recipient.  If accepted, the\
    \ SMTP server\n   returns a 250 OK reply and stores the forward-path.  If the\
    \ recipient\n   is known not to be a deliverable address, the SMTP server returns\
    \ a\n   550 reply, typically with a string such as \"no such user - \" and the\n\
    \   mailbox name (other circumstances and reply codes are possible).\n   This\
    \ step of the procedure can be repeated any number of times.\n   The <forward-path>\
    \ can contain more than just a mailbox.\n   Historically, the <forward-path> can\
    \ be a source routing list of\n   hosts and the destination mailbox, however,\
    \ contemporary SMTP clients\n   SHOULD NOT utilize source routes (see appendix\
    \ C).  Servers MUST be\n   prepared to encounter a list of source routes in the\
    \ forward path,\n   but SHOULD ignore the routes or MAY decline to support the\
    \ relaying\n   they imply.  Similarly, servers MAY decline to accept mail that\
    \ is\n   destined for other hosts or systems.  These restrictions make a\n   server\
    \ useless as a relay for clients that do not support full SMTP\n   functionality.\
    \  Consequently, restricted-capability clients MUST NOT\n   assume that any SMTP\
    \ server on the Internet can be used as their mail\n   processing (relaying) site.\
    \  If a RCPT command appears without a\n   previous MAIL command, the server MUST\
    \ return a 503 \"Bad sequence of\n   commands\" response.  The optional <rcpt-parameters>\
    \ are associated\n   with negotiated SMTP service extensions (see section 2.2).\n\
    \   The third step in the procedure is the DATA command (or some\n   alternative\
    \ specified in a service extension).\n      DATA <CRLF>\n   If accepted, the SMTP\
    \ server returns a 354 Intermediate reply and\n   considers all succeeding lines\
    \ up to but not including the end of\n   mail data indicator to be the message\
    \ text.  When the end of text is\n   successfully received and stored the SMTP-receiver\
    \ sends a 250 OK\n   reply.\n   Since the mail data is sent on the transmission\
    \ channel, the end of\n   mail data must be indicated so that the command and\
    \ reply dialog can\n   be resumed.  SMTP indicates the end of the mail data by\
    \ sending a\n   line containing only a \".\" (period or full stop).  A transparency\n\
    \   procedure is used to prevent this from interfering with the user's\n   text\
    \ (see section 4.5.2).\n   The end of mail data indicator also confirms the mail\
    \ transaction and\n   tells the SMTP server to now process the stored recipients\
    \ and mail\n   data.  If accepted, the SMTP server returns a 250 OK reply.  The\
    \ DATA\n   command can fail at only two points in the protocol exchange:\n   -\
    \  If there was no MAIL, or no RCPT, command, or all such commands\n      were\
    \ rejected, the server MAY return a \"command out of sequence\"\n      (503) or\
    \ \"no valid recipients\" (554) reply in response to the DATA\n      command.\
    \  If one of those replies (or any other 5yz reply) is\n      received, the client\
    \ MUST NOT send the message data; more\n      generally, message data MUST NOT\
    \ be sent unless a 354 reply is\n      received.\n   -  If the verb is initially\
    \ accepted and the 354 reply issued, the\n      DATA command should fail only\
    \ if the mail transaction was\n      incomplete (for example, no recipients),\
    \ or if resources were\n      unavailable (including, of course, the server unexpectedly\n\
    \      becoming unavailable), or if the server determines that the\n      message\
    \ should be rejected for policy or other reasons.\n   However, in practice, some\
    \ servers do not perform recipient\n   verification until after the message text\
    \ is received.  These servers\n   SHOULD treat a failure for one or more recipients\
    \ as a \"subsequent\n   failure\" and return a mail message as discussed in section\
    \ 6.  Using\n   a \"550 mailbox not found\" (or equivalent) reply code after the\
    \ data\n   are accepted makes it difficult or impossible for the client to\n \
    \  determine which recipients failed.\n   When RFC 822 format [7, 32] is being\
    \ used, the mail data include the\n   memo header items such as Date, Subject,\
    \ To, Cc, From.  Server SMTP\n   systems SHOULD NOT reject messages based on perceived\
    \ defects in the\n   RFC 822 or MIME [12] message header or message body.  In\
    \ particular,\n   they MUST NOT reject messages in which the numbers of Resent-fields\n\
    \   do not match or Resent-to appears without Resent-from and/or Resent-\n   date.\n\
    \   Mail transaction commands MUST be used in the order discussed above.\n"
- title: 3.4 Forwarding for Address Correction or Updating
  contents:
  - "3.4 Forwarding for Address Correction or Updating\n   Forwarding support is most\
    \ often required to consolidate and simplify\n   addresses within, or relative\
    \ to, some enterprise and less frequently\n   to establish addresses to link a\
    \ person's prior address with current\n   one.  Silent forwarding of messages\
    \ (without server notification to\n   the sender), for security or non-disclosure\
    \ purposes, is common in\n   the contemporary Internet.\n   In both the enterprise\
    \ and the \"new address\" cases, information\n   hiding (and sometimes security)\
    \ considerations argue against exposure\n   of the \"final\" address through the\
    \ SMTP protocol as a side-effect of\n   the forwarding activity.  This may be\
    \ especially important when the\n   final address may not even be reachable by\
    \ the sender.  Consequently,\n   the \"forwarding\" mechanisms described in section\
    \ 3.2 of RFC 821, and\n   especially the 251 (corrected destination) and 551 reply\
    \ codes from\n   RCPT must be evaluated carefully by implementers and, when they\
    \ are\n   available, by those configuring systems.\n   In particular:\n   *  Servers\
    \ MAY forward messages when they are aware of an address\n      change.  When\
    \ they do so, they MAY either provide address-updating\n      information with\
    \ a 251 code, or may forward \"silently\" and return\n      a 250 code.  But,\
    \ if a 251 code is used, they MUST NOT assume that\n      the client will actually\
    \ update address information or even return\n      that information to the user.\n\
    \   Alternately,\n   *  Servers MAY reject or bounce messages when they are not\n\
    \      deliverable when addressed.  When they do so, they MAY either\n      provide\
    \ address-updating information with a 551 code, or may\n      reject the message\
    \ as undeliverable with a 550 code and no\n      address-specific information.\
    \  But, if a 551 code is used, they\n      MUST NOT assume that the client will\
    \ actually update address\n      information or even return that information to\
    \ the user.\n   SMTP server implementations that support the 251 and/or 551 reply\n\
    \   codes are strongly encouraged to provide configuration mechanisms so\n   that\
    \ sites which conclude that they would undesirably disclose\n   information can\
    \ disable or restrict their use.\n"
- title: 3.5 Commands for Debugging Addresses
  contents:
  - '3.5 Commands for Debugging Addresses

    '
- title: 3.5.1 Overview
  contents:
  - "3.5.1 Overview\n   SMTP provides commands to verify a user name or obtain the\
    \ content of\n   a mailing list.  This is done with the VRFY and EXPN commands,\
    \ which\n   have character string arguments.  Implementations SHOULD support VRFY\n\
    \   and EXPN (however, see section 3.5.2 and 7.3).\n   For the VRFY command, the\
    \ string is a user name or a user name and\n   domain (see below).  If a normal\
    \ (i.e., 250) response is returned,\n   the response MAY include the full name\
    \ of the user and MUST include\n   the mailbox of the user.  It MUST be in either\
    \ of the following\n   forms:\n      User Name <local-part@domain>\n      local-part@domain\n\
    \   When a name that is the argument to VRFY could identify more than one\n  \
    \ mailbox, the server MAY either note the ambiguity or identify the\n   alternatives.\
    \  In other words, any of the following are legitimate\n   response to VRFY:\n\
    \      553 User ambiguous\n   or\n      553- Ambiguous;  Possibilities are\n \
    \     553-Joe Smith <jsmith@foo.com>\n      553-Harry Smith <hsmith@foo.com>\n\
    \      553 Melvin Smith <dweep@foo.com>\n   or\n      553-Ambiguous;  Possibilities\n\
    \      553- <jsmith@foo.com>\n      553- <hsmith@foo.com>\n      553 <dweep@foo.com>\n\
    \   Under normal circumstances, a client receiving a 553 reply would be\n   expected\
    \ to expose the result to the user.  Use of exactly the forms\n   given, and the\
    \ \"user ambiguous\" or \"ambiguous\" keywords, possibly\n   supplemented by extended\
    \ reply codes such as those described in [34],\n   will facilitate automated translation\
    \ into other languages as needed.\n   Of course, a client that was highly automated\
    \ or that was operating\n   in another language than English, might choose to\
    \ try to translate\n   the response, to return some other indication to the user\
    \ than the\n   literal text of the reply, or to take some automated action such\
    \ as\n   consulting a directory service for additional information before\n  \
    \ reporting to the user.\n   For the EXPN command, the string identifies a mailing\
    \ list, and the\n   successful (i.e., 250) multiline response MAY include the\
    \ full name\n   of the users and MUST give the mailboxes on the mailing list.\n\
    \   In some hosts the distinction between a mailing list and an alias for\n  \
    \ a single mailbox is a bit fuzzy, since a common data structure may\n   hold\
    \ both types of entries, and it is possible to have mailing lists\n   containing\
    \ only one mailbox.  If a request is made to apply VRFY to a\n   mailing list,\
    \ a positive response MAY be given if a message so\n   addressed would be delivered\
    \ to everyone on the list, otherwise an\n   error SHOULD be reported (e.g., \"\
    550 That is a mailing list, not a\n   user\" or \"252 Unable to verify members\
    \ of mailing list\").  If a\n   request is made to expand a user name, the server\
    \ MAY return a\n   positive response consisting of a list containing one name,\
    \ or an\n   error MAY be reported (e.g., \"550 That is a user name, not a mailing\n\
    \   list\").\n   In the case of a successful multiline reply (normal for EXPN)\
    \ exactly\n   one mailbox is to be specified on each line of the reply.  The case\n\
    \   of an ambiguous request is discussed above.\n   \"User name\" is a fuzzy term\
    \ and has been used deliberately.  An\n   implementation of the VRFY or EXPN commands\
    \ MUST include at least\n   recognition of local mailboxes as \"user names\".\
    \  However, since\n   current Internet practice often results in a single host\
    \ handling\n   mail for multiple domains, hosts, especially hosts that provide\
    \ this\n   functionality, SHOULD accept the \"local-part@domain\" form as a \"\
    user\n   name\"; hosts MAY also choose to recognize other strings as \"user\n\
    \   names\".\n   The case of expanding a mailbox list requires a multiline reply,\
    \ such\n   as:\n      C: EXPN Example-People\n      S: 250-Jon Postel <Postel@isi.edu>\n\
    \      S: 250-Fred Fonebone <Fonebone@physics.foo-u.edu>\n      S: 250 Sam Q.\
    \ Smith <SQSmith@specific.generic.com>\n   or\n      C: EXPN Executive-Washroom-List\n\
    \      S: 550 Access Denied to You.\n   The character string arguments of the\
    \ VRFY and EXPN commands cannot\n   be further restricted due to the variety of\
    \ implementations of the\n   user name and mailbox list concepts.  On some systems\
    \ it may be\n   appropriate for the argument of the EXPN command to be a file\
    \ name\n   for a file containing a mailing list, but again there are a variety\n\
    \   of file naming conventions in the Internet.  Similarly, historical\n   variations\
    \ in what is returned by these commands are such that the\n   response SHOULD\
    \ be interpreted very carefully, if at all, and SHOULD\n   generally only be used\
    \ for diagnostic purposes.\n"
- title: 3.5.2 VRFY Normal Response
  contents:
  - "3.5.2 VRFY Normal Response\n   When normal (2yz or 551) responses are returned\
    \ from a VRFY or EXPN\n   request, the reply normally includes the mailbox name,\
    \ i.e.,\n   \"<local-part@domain>\", where \"domain\" is a fully qualified domain\n\
    \   name, MUST appear in the syntax.  In circumstances exceptional enough\n  \
    \ to justify violating the intent of this specification, free-form text\n   MAY\
    \ be returned.  In order to facilitate parsing by both computers\n   and people,\
    \ addresses SHOULD appear in pointed brackets.  When\n   addresses, rather than\
    \ free-form debugging information, are returned,\n   EXPN and VRFY MUST return\
    \ only valid domain addresses that are usable\n   in SMTP RCPT commands.  Consequently,\
    \ if an address implies delivery\n   to a program or other system, the mailbox\
    \ name used to reach that\n   target MUST be given.  Paths (explicit source routes)\
    \ MUST NOT be\n   returned by VRFY or EXPN.\n   Server implementations SHOULD\
    \ support both VRFY and EXPN.  For\n   security reasons, implementations MAY provide\
    \ local installations a\n   way to disable either or both of these commands through\
    \ configuration\n   options or the equivalent.  When these commands are supported,\
    \ they\n   are not required to work across relays when relaying is supported.\n\
    \   Since they were both optional in RFC 821, they MUST be listed as\n   service\
    \ extensions in an EHLO response, if they are supported.\n"
- title: 3.5.3 Meaning of VRFY or EXPN Success Response
  contents:
  - "3.5.3 Meaning of VRFY or EXPN Success Response\n   A server MUST NOT return a\
    \ 250 code in response to a VRFY or EXPN\n   command unless it has actually verified\
    \ the address.  In particular,\n   a server MUST NOT return 250 if all it has\
    \ done is to verify that the\n   syntax given is valid.  In that case, 502 (Command\
    \ not implemented)\n   or 500 (Syntax error, command unrecognized) SHOULD be returned.\
    \  As\n   stated elsewhere, implementation (in the sense of actually validating\n\
    \   addresses and returning information) of VRFY and EXPN are strongly\n   recommended.\
    \  Hence, implementations that return 500 or 502 for VRFY\n   are not in full\
    \ compliance with this specification.\n   There may be circumstances where an\
    \ address appears to be valid but\n   cannot reasonably be verified in real time,\
    \ particularly when a\n   server is acting as a mail exchanger for another server\
    \ or domain.\n   \"Apparent validity\" in this case would normally involve at\
    \ least\n   syntax checking and might involve verification that any domains\n\
    \   specified were ones to which the host expected to be able to relay\n   mail.\
    \  In these situations, reply code 252 SHOULD be returned.  These\n   cases parallel\
    \ the discussion of RCPT verification discussed in\n   section 2.1.  Similarly,\
    \ the discussion in section 3.4 applies to the\n   use of reply codes 251 and\
    \ 551 with VRFY (and EXPN) to indicate\n   addresses that are recognized but that\
    \ would be forwarded or bounced\n   were mail received for them.  Implementations\
    \ generally SHOULD be\n   more aggressive about address verification in the case\
    \ of VRFY than\n   in the case of RCPT, even if it takes a little longer to do\
    \ so.\n"
- title: 3.5.4 Semantics and Applications of EXPN
  contents:
  - "3.5.4 Semantics and Applications of EXPN\n   EXPN is often very useful in debugging\
    \ and understanding problems\n   with mailing lists and multiple-target-address\
    \ aliases.  Some systems\n   have attempted to use source expansion of mailing\
    \ lists as a means of\n   eliminating duplicates.  The propagation of aliasing\
    \ systems with\n   mail on the Internet, for hosts (typically with MX and CNAME\
    \ DNS\n   records), for mailboxes (various types of local host aliases), and in\n\
    \   various proxying arrangements, has made it nearly impossible for\n   these\
    \ strategies to work consistently, and mail systems SHOULD NOT\n   attempt them.\n"
- title: 3.6 Domains
  contents:
  - "3.6 Domains\n   Only resolvable, fully-qualified, domain names (FQDNs) are permitted\n\
    \   when domain names are used in SMTP.  In other words, names that can\n   be\
    \ resolved to MX RRs or A RRs (as discussed in section 5) are\n   permitted, as\
    \ are CNAME RRs whose targets can be resolved, in turn,\n   to MX or A RRs.  Local\
    \ nicknames or unqualified names MUST NOT be\n   used.  There are two exceptions\
    \ to the rule requiring FQDNs:\n   -  The domain name given in the EHLO command\
    \ MUST BE either a primary\n      host name (a domain name that resolves to an\
    \ A RR) or, if the host\n      has no name, an address literal as described in\
    \ section 4.1.1.1.\n   -  The reserved mailbox name \"postmaster\" may be used\
    \ in a RCPT\n      command without domain qualification (see section 4.1.1.3)\
    \ and\n      MUST be accepted if so used.\n"
- title: 3.7 Relaying
  contents:
  - "3.7 Relaying\n   In general, the availability of Mail eXchanger records in the\
    \ domain\n   name system [22, 27] makes the use of explicit source routes in the\n\
    \   Internet mail system unnecessary.  Many historical problems with\n   their\
    \ interpretation have made their use undesirable.  SMTP clients\n   SHOULD NOT\
    \ generate explicit source routes except under unusual\n   circumstances.  SMTP\
    \ servers MAY decline to act as mail relays or to\n   accept addresses that specify\
    \ source routes.  When route information\n   is encountered, SMTP servers are\
    \ also permitted to ignore the route\n   information and simply send to the final\
    \ destination specified as the\n   last element in the route and SHOULD do so.\
    \  There has been an\n   invalid practice of using names that do not appear in\
    \ the DNS as\n   destination names, with the senders counting on the intermediate\n\
    \   hosts specified in source routing to resolve any problems.  If source\n  \
    \ routes are stripped, this practice will cause failures.  This is one\n   of\
    \ several reasons why SMTP clients MUST NOT generate invalid source\n   routes\
    \ or depend on serial resolution of names.\n   When source routes are not used,\
    \ the process described in RFC 821 for\n   constructing a reverse-path from the\
    \ forward-path is not applicable\n   and the reverse-path at the time of delivery\
    \ will simply be the\n   address that appeared in the MAIL command.\n   A relay\
    \ SMTP server is usually the target of a DNS MX record that\n   designates it,\
    \ rather than the final delivery system.  The relay\n   server may accept or reject\
    \ the task of relaying the mail in the same\n   way it accepts or rejects mail\
    \ for a local user.  If it accepts the\n   task, it then becomes an SMTP client,\
    \ establishes a transmission\n   channel to the next SMTP server specified in\
    \ the DNS (according to\n   the rules in section 5), and sends it the mail.  If\
    \ it declines to\n   relay mail to a particular address for policy reasons, a\
    \ 550 response\n   SHOULD be returned.\n   Many mail-sending clients exist, especially\
    \ in conjunction with\n   facilities that receive mail via POP3 or IMAP, that\
    \ have limited\n   capability to support some of the requirements of this specification,\n\
    \   such as the ability to queue messages for subsequent delivery\n   attempts.\
    \  For these clients, it is common practice to make private\n   arrangements to\
    \ send all messages to a single server for processing\n   and subsequent distribution.\
    \  SMTP, as specified here, is not ideally\n   suited for this role, and work\
    \ is underway on standardized mail\n   submission protocols that might eventually\
    \ supercede the current\n   practices.  In any event, because these arrangements\
    \ are private and\n   fall outside the scope of this specification, they are not\
    \ described\n   here.\n   It is important to note that MX records can point to\
    \ SMTP servers\n   which act as gateways into other environments, not just SMTP\
    \ relays\n   and final delivery systems; see sections 3.8 and 5.\n   If an SMTP\
    \ server has accepted the task of relaying the mail and\n   later finds that the\
    \ destination is incorrect or that the mail cannot\n   be delivered for some other\
    \ reason, then it MUST construct an\n   \"undeliverable mail\" notification message\
    \ and send it to the\n   originator of the undeliverable mail (as indicated by\
    \ the reverse-\n   path).  Formats specified for non-delivery reports by other\
    \ standards\n   (see, for example, [24, 25]) SHOULD be used if possible.\n   This\
    \ notification message must be from the SMTP server at the relay\n   host or the\
    \ host that first determines that delivery cannot be\n   accomplished.  Of course,\
    \ SMTP servers MUST NOT send notification\n   messages about problems transporting\
    \ notification messages.  One way\n   to prevent loops in error reporting is to\
    \ specify a null reverse-path\n   in the MAIL command of a notification message.\
    \  When such a message\n   is transmitted the reverse-path MUST be set to null\
    \ (see section\n   4.5.5 for additional discussion).  A MAIL command with a null\n\
    \   reverse-path appears as follows:\n      MAIL FROM:<>\n   As discussed in section\
    \ 2.4.1, a relay SMTP has no need to inspect or\n   act upon the headers or body\
    \ of the message data and MUST NOT do so\n   except to add its own \"Received:\"\
    \ header (section 4.4) and,\n   optionally, to attempt to detect looping in the\
    \ mail system (see\n   section 6.2).\n"
- title: 3.8 Mail Gatewaying
  contents:
  - "3.8 Mail Gatewaying\n   While the relay function discussed above operates within\
    \ the Internet\n   SMTP transport service environment, MX records or various forms\
    \ of\n   explicit routing may require that an intermediate SMTP server perform\n\
    \   a translation function between one transport service and another.  As\n  \
    \ discussed in section 2.3.8, when such a system is at the boundary\n   between\
    \ two transport service environments, we refer to it as a\n   \"gateway\" or \"\
    gateway SMTP\".\n   Gatewaying mail between different mail environments, such\
    \ as\n   different mail formats and protocols, is complex and does not easily\n\
    \   yield to standardization.  However, some general requirements may be\n   given\
    \ for a gateway between the Internet and another mail\n   environment.\n"
- title: 3.8.1 Header Fields in Gatewaying
  contents:
  - "3.8.1 Header Fields in Gatewaying\n   Header fields MAY be rewritten when necessary\
    \ as messages are\n   gatewayed across mail environment boundaries.  This may\
    \ involve\n   inspecting the message body or interpreting the local-part of the\n\
    \   destination address in spite of the prohibitions in section 2.4.1.\n   Other\
    \ mail systems gatewayed to the Internet often use a subset of\n   RFC 822 headers\
    \ or provide similar functionality with a different\n   syntax, but some of these\
    \ mail systems do not have an equivalent to\n   the SMTP envelope.  Therefore,\
    \ when a message leaves the Internet\n   environment, it may be necessary to fold\
    \ the SMTP envelope\n   information into the message header.  A possible solution\
    \ would be to\n   create new header fields to carry the envelope information (e.g.,\n\
    \   \"X-SMTP-MAIL:\"  and \"X-SMTP-RCPT:\"); however, this would require\n   changes\
    \ in mail programs in foreign environments and might risk\n   disclosure of private\
    \ information (see section 7.2).\n"
- title: 3.8.2 Received Lines in Gatewaying
  contents:
  - "3.8.2 Received Lines in Gatewaying\n   When forwarding a message into or out\
    \ of the Internet environment, a\n   gateway MUST prepend a Received: line, but\
    \ it MUST NOT alter in any\n   way a Received: line that is already in the header.\n\
    \   \"Received:\" fields of messages originating from other environments\n   may\
    \ not conform exactly to this specification.  However, the most\n   important\
    \ use of Received: lines is for debugging mail faults, and\n   this debugging\
    \ can be severely hampered by well-meaning gateways that\n   try to \"fix\" a\
    \ Received: line.  As another consequence of trace\n   fields arising in non-SMTP\
    \ environments, receiving systems MUST NOT\n   reject mail based on the format\
    \ of a trace field and SHOULD be\n   extremely robust in the light of unexpected\
    \ information or formats in\n   those fields.\n   The gateway SHOULD indicate\
    \ the environment and protocol in the \"via\"\n   clauses of Received field(s)\
    \ that it supplies.\n"
- title: 3.8.3 Addresses in Gatewaying
  contents:
  - "3.8.3 Addresses in Gatewaying\n   From the Internet side, the gateway SHOULD\
    \ accept all valid address\n   formats in SMTP commands and in RFC 822 headers,\
    \ and all valid RFC\n   822 messages.  Addresses and headers generated by gateways\
    \ MUST\n   conform to applicable Internet standards (including this one and RFC\n\
    \   822).  Gateways are, of course, subject to the same rules for\n   handling\
    \ source routes as those described for other SMTP systems in\n   section 3.3.\n"
- title: 3.8.4 Other Header Fields in Gatewaying
  contents:
  - "3.8.4 Other Header Fields in Gatewaying\n   The gateway MUST ensure that all\
    \ header fields of a message that it\n   forwards into the Internet mail environment\
    \ meet the requirements for\n   Internet mail.  In particular, all addresses in\
    \ \"From:\", \"To:\",\n   \"Cc:\", etc., fields MUST be transformed (if necessary)\
    \ to satisfy RFC\n   822 syntax, MUST reference only fully-qualified domain names,\
    \ and\n   MUST be effective and useful for sending replies.  The translation\n\
    \   algorithm used to convert mail from the Internet protocols to another\n  \
    \ environment's protocol SHOULD ensure that error messages from the\n   foreign\
    \ mail environment are delivered to the return path from the\n   SMTP envelope,\
    \ not to the sender listed in the \"From:\" field (or\n   other fields) of the\
    \ RFC 822 message.\n"
- title: 3.8.5 Envelopes in Gatewaying
  contents:
  - "3.8.5 Envelopes in Gatewaying\n   Similarly, when forwarding a message from another\
    \ environment into\n   the Internet, the gateway SHOULD set the envelope return\
    \ path in\n   accordance with an error message return address, if supplied by\
    \ the\n   foreign environment.  If the foreign environment has no equivalent\n\
    \   concept, the gateway must select and use a best approximation, with\n   the\
    \ message originator's address as the default of last resort.\n"
- title: 3.9 Terminating Sessions and Connections
  contents:
  - "3.9 Terminating Sessions and Connections\n   An SMTP connection is terminated\
    \ when the client sends a QUIT\n   command.  The server responds with a positive\
    \ reply code, after which\n   it closes the connection.\n   An SMTP server MUST\
    \ NOT intentionally close the connection except:\n   -  After receiving a QUIT\
    \ command and responding with a 221 reply.\n   -  After detecting the need to\
    \ shut down the SMTP service and\n      returning a 421 response code.  This response\
    \ code can be issued\n      after the server receives any command or, if necessary,\n\
    \      asynchronously from command receipt (on the assumption that the\n     \
    \ client will receive it after the next command is issued).\n   In particular,\
    \ a server that closes connections in response to\n   commands that are not understood\
    \ is in violation of this\n   specification.  Servers are expected to be tolerant\
    \ of unknown\n   commands, issuing a 500 reply and awaiting further instructions\
    \ from\n   the client.\n   An SMTP server which is forcibly shut down via external\
    \ means SHOULD\n   attempt to send a line containing a 421 response code to the\
    \ SMTP\n   client before exiting.  The SMTP client will normally read the 421\n\
    \   response code after sending its next command.\n   SMTP clients that experience\
    \ a connection close, reset, or other\n   communications failure due to circumstances\
    \ not under their control\n   (in violation of the intent of this specification\
    \ but sometimes\n   unavoidable) SHOULD, to maintain the robustness of the mail\
    \ system,\n   treat the mail transaction as if a 451 response had been received\
    \ and\n   act accordingly.\n"
- title: 3.10 Mailing Lists and Aliases
  contents:
  - "3.10 Mailing Lists and Aliases\n   An SMTP-capable host SHOULD support both the\
    \ alias and the list\n   models of address expansion for multiple delivery.  When\
    \ a message is\n   delivered or forwarded to each address of an expanded list\
    \ form, the\n   return address in the envelope (\"MAIL FROM:\") MUST be changed\
    \ to be\n   the address of a person or other entity who administers the list.\n\
    \   However, in this case, the message header [32] MUST be left\n   unchanged;\
    \ in particular, the \"From\" field of the message header is\n   unaffected.\n\
    \   An important mail facility is a mechanism for multi-destination\n   delivery\
    \ of a single message, by transforming (or \"expanding\" or\n   \"exploding\"\
    ) a pseudo-mailbox address into a list of destination\n   mailbox addresses. \
    \ When a message is sent to such a pseudo-mailbox\n   (sometimes called an \"\
    exploder\"), copies are forwarded or\n   redistributed to each mailbox in the\
    \ expanded list.  Servers SHOULD\n   simply utilize the addresses on the list;\
    \ application of heuristics\n   or other matching rules to eliminate some addresses,\
    \ such as that of\n   the originator, is strongly discouraged.  We classify such\
    \ a pseudo-\n   mailbox as an \"alias\" or a \"list\", depending upon the expansion\n\
    \   rules.\n"
- title: 3.10.1 Alias
  contents:
  - "3.10.1 Alias\n   To expand an alias, the recipient mailer simply replaces the\
    \ pseudo-\n   mailbox address in the envelope with each of the expanded addresses\n\
    \   in turn; the rest of the envelope and the message body are left\n   unchanged.\
    \  The message is then delivered or forwarded to each\n   expanded address.\n"
- title: 3.10.2 List
  contents:
  - "3.10.2 List\n   A mailing list may be said to operate by \"redistribution\" rather\
    \ than\n   by \"forwarding\".  To expand a list, the recipient mailer replaces\
    \ the\n   pseudo-mailbox address in the envelope with all of the expanded\n  \
    \ addresses.  The return address in the envelope is changed so that all\n   error\
    \ messages generated by the final deliveries will be returned to\n   a list administrator,\
    \ not to the message originator, who generally\n   has no control over the contents\
    \ of the list and will typically find\n   error messages annoying.\n"
- title: 4. The SMTP Specifications
  contents:
  - '4. The SMTP Specifications

    '
- title: 4.1 SMTP Commands
  contents:
  - '4.1 SMTP Commands

    '
- title: 4.1.1 Command Semantics and Syntax
  contents:
  - "4.1.1 Command Semantics and Syntax\n   The SMTP commands define the mail transfer\
    \ or the mail system\n   function requested by the user.  SMTP commands are character\
    \ strings\n   terminated by <CRLF>.  The commands themselves are alphabetic\n\
    \   characters terminated by <SP> if parameters follow and <CRLF>\n   otherwise.\
    \  (In the interest of improved interoperability, SMTP\n   receivers are encouraged\
    \ to tolerate trailing white space before the\n   terminating <CRLF>.)  The syntax\
    \ of the local part of a mailbox must\n   conform to receiver site conventions\
    \ and the syntax specified in\n   section 4.1.2.  The SMTP commands are discussed\
    \ below.  The SMTP\n   replies are discussed in section 4.2.\n   A mail transaction\
    \ involves several data objects which are\n   communicated as arguments to different\
    \ commands.  The reverse-path is\n   the argument of the MAIL command, the forward-path\
    \ is the argument of\n   the RCPT command, and the mail data is the argument of\
    \ the DATA\n   command.  These arguments or data objects must be transmitted and\n\
    \   held pending the confirmation communicated by the end of mail data\n   indication\
    \ which finalizes the transaction.  The model for this is\n   that distinct buffers\
    \ are provided to hold the types of data objects,\n   that is, there is a reverse-path\
    \ buffer, a forward-path buffer, and a\n   mail data buffer.  Specific commands\
    \ cause information to be appended\n   to a specific buffer, or cause one or more\
    \ buffers to be cleared.\n   Several commands (RSET, DATA, QUIT) are specified\
    \ as not permitting\n   parameters.  In the absence of specific extensions offered\
    \ by the\n   server and accepted by the client, clients MUST NOT send such\n \
    \  parameters and servers SHOULD reject commands containing them as\n   having\
    \ invalid syntax.\n"
- title: 4.1.1.1  Extended HELLO (EHLO) or HELLO (HELO)
  contents:
  - "4.1.1.1  Extended HELLO (EHLO) or HELLO (HELO)\n   These commands are used to\
    \ identify the SMTP client to the SMTP\n   server.  The argument field contains\
    \ the fully-qualified domain name\n   of the SMTP client if one is available.\
    \  In situations in which the\n   SMTP client system does not have a meaningful\
    \ domain name (e.g., when\n   its address is dynamically allocated and no reverse\
    \ mapping record is\n   available), the client SHOULD send an address literal\
    \ (see section\n   4.1.3), optionally followed by information that will help to\
    \ identify\n   the client system.  y The SMTP server identifies itself to the\
    \ SMTP\n   client in the connection greeting reply and in the response to this\n\
    \   command.\n   A client SMTP SHOULD start an SMTP session by issuing the EHLO\n\
    \   command.  If the SMTP server supports the SMTP service extensions it\n   will\
    \ give a successful response, a failure response, or an error\n   response.  If\
    \ the SMTP server, in violation of this specification,\n   does not support any\
    \ SMTP service extensions it will generate an\n   error response.  Older client\
    \ SMTP systems MAY, as discussed above,\n   use HELO (as specified in RFC 821)\
    \ instead of EHLO, and servers MUST\n   support the HELO command and reply properly\
    \ to it.  In any event, a\n   client MUST issue HELO or EHLO before starting a\
    \ mail transaction.\n   These commands, and a \"250 OK\" reply to one of them,\
    \ confirm that\n   both the SMTP client and the SMTP server are in the initial\
    \ state,\n   that is, there is no transaction in progress and all state tables\
    \ and\n   buffers are cleared.\n   Syntax:\n      ehlo            = \"EHLO\" SP\
    \ Domain CRLF\n      helo            = \"HELO\" SP Domain CRLF\n   Normally, the\
    \ response to EHLO will be a multiline reply.  Each line\n   of the response contains\
    \ a keyword and, optionally, one or more\n   parameters.  Following the normal\
    \ syntax for multiline replies, these\n   keyworks follow the code (250) and a\
    \ hyphen for all but the last\n   line, and the code and a space for the last\
    \ line.  The syntax for a\n   positive response, using the ABNF notation and terminal\
    \ symbols of\n   [8], is:\n      ehlo-ok-rsp  =    ( \"250\"    domain [ SP ehlo-greet\
    \ ] CRLF )\n                   / (    \"250-\"   domain [ SP ehlo-greet ] CRLF\n\
    \                       *( \"250-\"   ehlo-line                CRLF )\n      \
    \                    \"250\"    SP ehlo-line             CRLF  )\n      ehlo-greet\
    \   = 1*(%d0-9 / %d11-12 / %d14-127)\n                   ; string of any characters\
    \ other than CR or LF\n      ehlo-line    = ehlo-keyword *( SP ehlo-param )\n\
    \      ehlo-keyword = (ALPHA / DIGIT) *(ALPHA / DIGIT / \"-\")\n             \
    \      ; additional syntax of ehlo-params depends on\n                   ; ehlo-keyword\n\
    \      ehlo-param   = 1*(%d33-127)\n                   ; any CHAR excluding <SP>\
    \ and all\n                   ; control characters (US-ASCII 0-31 inclusive)\n\
    \   Although EHLO keywords may be specified in upper, lower, or mixed\n   case,\
    \ they MUST always be recognized and processed in a case-\n   insensitive manner.\
    \  This is simply an extension of practices\n   specified in RFC 821 and section\
    \ 2.4.1.\n"
- title: 4.1.1.2 MAIL (MAIL)
  contents:
  - "4.1.1.2 MAIL (MAIL)\n   This command is used to initiate a mail transaction in\
    \ which the mail\n   data is delivered to an SMTP server which may, in turn, deliver\
    \ it to\n   one or more mailboxes or pass it on to another system (possibly using\n\
    \   SMTP).  The argument field contains a reverse-path and may contain\n   optional\
    \ parameters.  In general, the MAIL command may be sent only\n   when no mail\
    \ transaction is in progress, see section 4.1.4.\n   The reverse-path consists\
    \ of the sender mailbox.  Historically, that\n   mailbox might optionally have\
    \ been preceded by a list of hosts, but\n   that behavior is now deprecated (see\
    \ appendix C).  In some types of\n   reporting messages for which a reply is likely\
    \ to cause a mail loop\n   (for example, mail delivery and nondelivery notifications),\
    \ the\n   reverse-path may be null (see section 3.7).\n   This command clears\
    \ the reverse-path buffer, the forward-path buffer,\n   and the mail data buffer;\
    \ and inserts the reverse-path information\n   from this command into the reverse-path\
    \ buffer.\n   If service extensions were negotiated, the MAIL command may also\n\
    \   carry parameters associated with a particular service extension.\n   Syntax:\n\
    \      \"MAIL FROM:\" (\"<>\" / Reverse-Path)\n                       [SP Mail-parameters]\
    \ CRLF\n"
- title: 4.1.1.3 RECIPIENT (RCPT)
  contents:
  - "4.1.1.3 RECIPIENT (RCPT)\n   This command is used to identify an individual recipient\
    \ of the mail\n   data; multiple recipients are specified by multiple use of this\n\
    \   command.  The argument field contains a forward-path and may contain\n   optional\
    \ parameters.\n   The forward-path normally consists of the required destination\n\
    \   mailbox.  Sending systems SHOULD not generate the optional list of\n   hosts\
    \ known as a source route.  Receiving systems MUST recognize\n   source route\
    \ syntax but SHOULD strip off the source route\n   specification and utilize the\
    \ domain name associated with the mailbox\n   as if the source route had not been\
    \ provided.\n   Similarly, relay hosts SHOULD strip or ignore source routes, and\n\
    \   names MUST NOT be copied into the reverse-path.  When mail reaches\n   its\
    \ ultimate destination (the forward-path contains only a\n   destination mailbox),\
    \ the SMTP server inserts it into the destination\n   mailbox in accordance with\
    \ its host mail conventions.\n   For example, mail received at relay host xyz.com\
    \ with envelope\n   commands\n      MAIL FROM:<userx@y.foo.org>\n      RCPT TO:<@hosta.int,@jkl.org:userc@d.bar.org>\n\
    \   will normally be sent directly on to host d.bar.org with envelope\n   commands\n\
    \      MAIL FROM:<userx@y.foo.org>\n      RCPT TO:<userc@d.bar.org>\n   As provided\
    \ in appendix C, xyz.com MAY also choose to relay the\n   message to hosta.int,\
    \ using the envelope commands\n      MAIL FROM:<userx@y.foo.org>\n      RCPT TO:<@hosta.int,@jkl.org:userc@d.bar.org>\n\
    \   or to jkl.org, using the envelope commands\n      MAIL FROM:<userx@y.foo.org>\n\
    \      RCPT TO:<@jkl.org:userc@d.bar.org>\n   Of course, since hosts are not required\
    \ to relay mail at all, xyz.com\n   may also reject the message entirely when\
    \ the RCPT command is\n   received, using a 550 code (since this is a \"policy\
    \ reason\").\n   If service extensions were negotiated, the RCPT command may also\n\
    \   carry parameters associated with a particular service extension\n   offered\
    \ by the server.  The client MUST NOT transmit parameters other\n   than those\
    \ associated with a service extension offered by the server\n   in its EHLO response.\n"
- title: 'Syntax:'
  contents:
  - "Syntax:\n   \"RCPT TO:\" (\"<Postmaster@\" domain \">\" / \"<Postmaster>\" /\
    \ Forward-Path)\n                    [SP Rcpt-parameters] CRLF\n"
- title: 4.1.1.4 DATA (DATA)
  contents:
  - "4.1.1.4 DATA (DATA)\n   The receiver normally sends a 354 response to DATA, and\
    \ then treats\n   the lines (strings ending in <CRLF> sequences, as described\
    \ in\n   section 2.3.7) following the command as mail data from the sender.\n\
    \   This command causes the mail data to be appended to the mail data\n   buffer.\
    \  The mail data may contain any of the 128 ASCII character\n   codes, although\
    \ experience has indicated that use of control\n   characters other than SP, HT,\
    \ CR, and LF may cause problems and\n   SHOULD be avoided when possible.\n   The\
    \ mail data is terminated by a line containing only a period, that\n   is, the\
    \ character sequence \"<CRLF>.<CRLF>\" (see section 4.5.2).  This\n   is the end\
    \ of mail data indication.  Note that the first <CRLF> of\n   this terminating\
    \ sequence is also the <CRLF> that ends the final line\n   of the data (message\
    \ text) or, if there was no data, ends the DATA\n   command itself.  An extra\
    \ <CRLF> MUST NOT be added, as that would\n   cause an empty line to be added\
    \ to the message.  The only exception\n   to this rule would arise if the message\
    \ body were passed to the\n   originating SMTP-sender with a final \"line\" that\
    \ did not end in\n   <CRLF>; in that case, the originating SMTP system MUST either\
    \ reject\n   the message as invalid or add <CRLF> in order to have the receiving\n\
    \   SMTP server recognize the \"end of data\" condition.\n   The custom of accepting\
    \ lines ending only in <LF>, as a concession to\n   non-conforming behavior on\
    \ the part of some UNIX systems, has proven\n   to cause more interoperability\
    \ problems than it solves, and SMTP\n   server systems MUST NOT do this, even\
    \ in the name of improved\n   robustness.  In particular, the sequence \"<LF>.<LF>\"\
    \ (bare line\n   feeds, without carriage returns) MUST NOT be treated as equivalent\
    \ to\n   <CRLF>.<CRLF> as the end of mail data indication.\n   Receipt of the\
    \ end of mail data indication requires the server to\n   process the stored mail\
    \ transaction information.  This processing\n   consumes the information in the\
    \ reverse-path buffer, the forward-path\n   buffer, and the mail data buffer,\
    \ and on the completion of this\n   command these buffers are cleared.  If the\
    \ processing is successful,\n   the receiver MUST send an OK reply.  If the processing\
    \ fails the\n   receiver MUST send a failure reply.  The SMTP model does not allow\n\
    \   for partial failures at this point: either the message is accepted by\n  \
    \ the server for delivery and a positive response is returned or it is\n   not\
    \ accepted and a failure reply is returned.  In sending a positive\n   completion\
    \ reply to the end of data indication, the receiver takes\n   full responsibility\
    \ for the message (see section 6.1).  Errors that\n   are diagnosed subsequently\
    \ MUST be reported in a mail message, as\n   discussed in section 4.4.\n   When\
    \ the SMTP server accepts a message either for relaying or for\n   final delivery,\
    \ it inserts a trace record (also referred to\n   interchangeably as a \"time\
    \ stamp line\" or \"Received\" line) at the top\n   of the mail data.  This trace\
    \ record indicates the identity of the\n   host that sent the message, the identity\
    \ of the host that received\n   the message (and is inserting this time stamp),\
    \ and the date and time\n   the message was received.  Relayed messages will have\
    \ multiple time\n   stamp lines.  Details for formation of these lines, including\
    \ their\n   syntax, is specified in section 4.4.\n   Additional discussion about\
    \ the operation of the DATA command appears\n   in section 3.3.\n   Syntax:\n\
    \      \"DATA\" CRLF\n"
- title: 4.1.1.5 RESET (RSET)
  contents:
  - "4.1.1.5 RESET (RSET)\n   This command specifies that the current mail transaction\
    \ will be\n   aborted.  Any stored sender, recipients, and mail data MUST be\n\
    \   discarded, and all buffers and state tables cleared.  The receiver\n   MUST\
    \ send a \"250 OK\" reply to a RSET command with no arguments.  A\n   reset command\
    \ may be issued by the client at any time.  It is\n   effectively equivalent to\
    \ a NOOP (i.e., if has no effect) if issued\n   immediately after EHLO, before\
    \ EHLO is issued in the session, after\n   an end-of-data indicator has been sent\
    \ and acknowledged, or\n   immediately before a QUIT.  An SMTP server MUST NOT\
    \ close the\n   connection as the result of receiving a RSET; that action is reserved\n\
    \   for QUIT (see section 4.1.1.10).\n   Since EHLO implies some additional processing\
    \ and response by the\n   server, RSET will normally be more efficient than reissuing\
    \ that\n   command, even though the formal semantics are the same.\n   There are\
    \ circumstances, contrary to the intent of this\n   specification, in which an\
    \ SMTP server may receive an indication that\n   the underlying TCP connection\
    \ has been closed or reset.  To preserve\n   the robustness of the mail system,\
    \ SMTP servers SHOULD be prepared\n   for this condition and SHOULD treat it as\
    \ if a QUIT had been received\n   before the connection disappeared.\n   Syntax:\n\
    \      \"RSET\" CRLF\n"
- title: 4.1.1.6 VERIFY (VRFY)
  contents:
  - "4.1.1.6 VERIFY (VRFY)\n   This command asks the receiver to confirm that the\
    \ argument\n   identifies a user or mailbox.  If it is a user name, information\
    \ is\n   returned as specified in section 3.5.\n   This command has no effect\
    \ on the reverse-path buffer, the forward-\n   path buffer, or the mail data buffer.\n\
    \   Syntax:\n      \"VRFY\" SP String CRLF\n"
- title: 4.1.1.7 EXPAND (EXPN)
  contents:
  - "4.1.1.7 EXPAND (EXPN)\n   This command asks the receiver to confirm that the\
    \ argument\n   identifies a mailing list, and if so, to return the membership\
    \ of\n   that list.  If the command is successful, a reply is returned\n   containing\
    \ information as described in section 3.5.  This reply will\n   have multiple\
    \ lines except in the trivial case of a one-member list.\n   This command has\
    \ no effect on the reverse-path buffer, the forward-\n   path buffer, or the mail\
    \ data buffer and may be issued at any time.\n   Syntax:\n      \"EXPN\" SP String\
    \ CRLF\n"
- title: 4.1.1.8 HELP (HELP)
  contents:
  - "4.1.1.8 HELP (HELP)\n   This command causes the server to send helpful information\
    \ to the\n   client.  The command MAY take an argument (e.g., any command name)\n\
    \   and return more specific information as a response.\n   This command has no\
    \ effect on the reverse-path buffer, the forward-\n   path buffer, or the mail\
    \ data buffer and may be issued at any time.\n   SMTP servers SHOULD support HELP\
    \ without arguments and MAY support it\n   with arguments.\n   Syntax:\n     \
    \ \"HELP\" [ SP String ] CRLF\n"
- title: 4.1.1.9 NOOP (NOOP)
  contents:
  - "4.1.1.9 NOOP (NOOP)\n   This command does not affect any parameters or previously\
    \ entered\n   commands.  It specifies no action other than that the receiver send\n\
    \   an OK reply.\n   This command has no effect on the reverse-path buffer, the\
    \ forward-\n   path buffer, or the mail data buffer and may be issued at any time.\n\
    \   If a parameter string is specified, servers SHOULD ignore it.\n   Syntax:\n\
    \      \"NOOP\" [ SP String ] CRLF\n"
- title: 4.1.1.10 QUIT (QUIT)
  contents:
  - "4.1.1.10 QUIT (QUIT)\n   This command specifies that the receiver MUST send an\
    \ OK reply, and\n   then close the transmission channel.\n   The receiver MUST\
    \ NOT intentionally close the transmission channel\n   until it receives and replies\
    \ to a QUIT command (even if there was an\n   error).  The sender MUST NOT intentionally\
    \ close the transmission\n   channel until it sends a QUIT command and SHOULD\
    \ wait until it\n   receives the reply (even if there was an error response to\
    \ a previous\n   command).  If the connection is closed prematurely due to violations\n\
    \   of the above or system or network failure, the server MUST cancel any\n  \
    \ pending transaction, but not undo any previously completed\n   transaction,\
    \ and generally MUST act as if the command or transaction\n   in progress had\
    \ received a temporary error (i.e., a 4yz response).\n   The QUIT command may\
    \ be issued at any time.\n   Syntax:\n      \"QUIT\" CRLF\n"
- title: 4.1.2 Command Argument Syntax
  contents:
  - "4.1.2 Command Argument Syntax\n   The syntax of the argument fields of the above\
    \ commands (using the\n   syntax specified in [8] where applicable) is given below.\
    \  Some of\n   the productions given below are used only in conjunction with source\n\
    \   routes as described in appendix C.  Terminals not defined in this\n   document,\
    \ such as ALPHA, DIGIT, SP, CR, LF, CRLF, are as defined in\n   the \"core\" syntax\
    \ [8 (section 6)] or in the message format syntax\n   [32].\n      Reverse-path\
    \ = Path\n      Forward-path = Path\n      Path = \"<\" [ A-d-l \":\" ] Mailbox\
    \ \">\"\n      A-d-l = At-domain *( \",\" A-d-l )\n            ; Note that this\
    \ form, the so-called \"source route\",\n            ; MUST BE accepted, SHOULD\
    \ NOT be generated, and SHOULD be\n            ; ignored.\n      At-domain = \"\
    @\" domain\n      Mail-parameters = esmtp-param *(SP esmtp-param)\n      Rcpt-parameters\
    \ = esmtp-param *(SP esmtp-param)\n      esmtp-param     = esmtp-keyword [\"=\"\
    \ esmtp-value]\n      esmtp-keyword   = (ALPHA / DIGIT) *(ALPHA / DIGIT / \"-\"\
    )\n      esmtp-value     = 1*(%d33-60 / %d62-127)\n            ; any CHAR excluding\
    \ \"=\", SP, and control characters\n      Keyword  = Ldh-str\n      Argument\
    \ = Atom\n      Domain = (sub-domain 1*(\".\" sub-domain)) / address-literal\n\
    \      sub-domain = Let-dig [Ldh-str]\n      address-literal = \"[\" IPv4-address-literal\
    \ /\n                            IPv6-address-literal /\n                    \
    \        General-address-literal \"]\"\n            ; See section 4.1.3\n    \
    \  Mailbox = Local-part \"@\" Domain\n      Local-part = Dot-string / Quoted-string\n\
    \            ; MAY be case-sensitive\n      Dot-string = Atom *(\".\" Atom)\n\
    \      Atom = 1*atext\n      Quoted-string = DQUOTE *qcontent DQUOTE\n      String\
    \ = Atom / Quoted-string\n   While the above definition for Local-part is relatively\
    \ permissive,\n   for maximum interoperability, a host that expects to receive\
    \ mail\n   SHOULD avoid defining mailboxes where the Local-part requires (or\n\
    \   uses) the Quoted-string form or where the Local-part is case-\n   sensitive.\
    \  For any purposes that require generating or comparing\n   Local-parts (e.g.,\
    \ to specific mailbox names), all quoted forms MUST\n   be treated as equivalent\
    \ and the sending system SHOULD transmit the\n   form that uses the minimum quoting\
    \ possible.\n   Systems MUST NOT define mailboxes in such a way as to require\
    \ the use\n   in SMTP of non-ASCII characters (octets with the high order bit\
    \ set\n   to one) or ASCII \"control characters\" (decimal value 0-31 and 127).\n\
    \   These characters MUST NOT be used in MAIL or RCPT commands or other\n   commands\
    \ that require mailbox names.\n   Note that the backslash, \"\\\", is a quote\
    \ character, which is used to\n   indicate that the next character is to be used\
    \ literally (instead of\n   its normal interpretation).  For example, \"Joe\\\
    ,Smith\" indicates a\n   single nine character user field with the comma being\
    \ the fourth\n   character of the field.\n   To promote interoperability and consistent\
    \ with long-standing\n   guidance about conservative use of the DNS in naming\
    \ and applications\n   (e.g., see section 2.3.1 of the base DNS document, RFC1035\
    \ [22]),\n   characters outside the set of alphas, digits, and hyphen MUST NOT\n\
    \   appear in domain name labels for SMTP clients or servers.  In\n   particular,\
    \ the underscore character is not permitted.  SMTP servers\n   that receive a\
    \ command in which invalid character codes have been\n   employed, and for which\
    \ there are no other reasons for rejection,\n   MUST reject that command with\
    \ a 501 response.\n"
- title: 4.1.3 Address Literals
  contents:
  - "4.1.3 Address Literals\n   Sometimes a host is not known to the domain name system\
    \ and\n   communication (and, in particular, communication to report and repair\n\
    \   the error) is blocked.  To bypass this barrier a special literal form\n  \
    \ of the address is allowed as an alternative to a domain name.  For\n   IPv4\
    \ addresses, this form uses four small decimal integers separated\n   by dots\
    \ and enclosed by brackets such as [123.255.37.2], which\n   indicates an (IPv4)\
    \ Internet Address in sequence-of-octets form.  For\n   IPv6 and other forms of\
    \ addressing that might eventually be\n   standardized, the form consists of a\
    \ standardized \"tag\" that\n   identifies the address syntax, a colon, and the\
    \ address itself, in a\n   format specified as part of the IPv6 standards [17].\n\
    \   Specifically:\n      IPv4-address-literal = Snum 3(\".\" Snum)\n      IPv6-address-literal\
    \ = \"IPv6:\" IPv6-addr\n      General-address-literal = Standardized-tag \":\"\
    \ 1*dcontent\n      Standardized-tag = Ldh-str\n            ; MUST be specified\
    \ in a standards-track RFC\n            ; and registered with IANA\n      Snum\
    \ = 1*3DIGIT  ; representing a decimal integer\n            ; value in the range\
    \ 0 through 255\n      Let-dig = ALPHA / DIGIT\n      Ldh-str = *( ALPHA / DIGIT\
    \ / \"-\" ) Let-dig\n      IPv6-addr = IPv6-full / IPv6-comp / IPv6v4-full / IPv6v4-comp\n\
    \      IPv6-hex  = 1*4HEXDIG\n      IPv6-full = IPv6-hex 7(\":\" IPv6-hex)\n \
    \     IPv6-comp = [IPv6-hex *5(\":\" IPv6-hex)] \"::\" [IPv6-hex *5(\":\"\n  \
    \               IPv6-hex)]\n            ; The \"::\" represents at least 2 16-bit\
    \ groups of zeros\n            ; No more than 6 groups in addition to the \"::\"\
    \ may be\n            ; present\n      IPv6v4-full = IPv6-hex 5(\":\" IPv6-hex)\
    \ \":\" IPv4-address-literal\n      IPv6v4-comp = [IPv6-hex *3(\":\" IPv6-hex)]\
    \ \"::\"\n                   [IPv6-hex *3(\":\" IPv6-hex) \":\"] IPv4-address-literal\n\
    \            ; The \"::\" represents at least 2 16-bit groups of zeros\n     \
    \       ; No more than 4 groups in addition to the \"::\" and\n            ; IPv4-address-literal\
    \ may be present\n"
- title: 4.1.4 Order of Commands
  contents:
  - "4.1.4 Order of Commands\n   There are restrictions on the order in which these\
    \ commands may be\n   used.\n   A session that will contain mail transactions\
    \ MUST first be\n   initialized by the use of the EHLO command.  An SMTP server\
    \ SHOULD\n   accept commands for non-mail transactions (e.g., VRFY or EXPN)\n\
    \   without this initialization.\n   An EHLO command MAY be issued by a client\
    \ later in the session.  If\n   it is issued after the session begins, the SMTP\
    \ server MUST clear all\n   buffers and reset the state exactly as if a RSET command\
    \ had been\n   issued.  In other words, the sequence of RSET followed immediately\
    \ by\n   EHLO is redundant, but not harmful other than in the performance cost\n\
    \   of executing unnecessary commands.\n   If the EHLO command is not acceptable\
    \ to the SMTP server, 501, 500,\n   or 502 failure replies MUST be returned as\
    \ appropriate.  The SMTP\n   server MUST stay in the same state after transmitting\
    \ these replies\n   that it was in before the EHLO was received.\n   The SMTP\
    \ client MUST, if possible, ensure that the domain parameter\n   to the EHLO command\
    \ is a valid principal host name (not a CNAME or MX\n   name) for its host.  If\
    \ this is not possible (e.g., when the client's\n   address is dynamically assigned\
    \ and the client does not have an\n   obvious name), an address literal SHOULD\
    \ be substituted for the\n   domain name and supplemental information provided\
    \ that will assist in\n   identifying the client.\n   An SMTP server MAY verify\
    \ that the domain name parameter in the EHLO\n   command actually corresponds\
    \ to the IP address of the client.\n   However, the server MUST NOT refuse to\
    \ accept a message for this\n   reason if the verification fails: the information\
    \ about verification\n   failure is for logging and tracing only.\n   The NOOP,\
    \ HELP, EXPN, VRFY, and RSET commands can be used at any time\n   during a session,\
    \ or without previously initializing a session.  SMTP\n   servers SHOULD process\
    \ these normally (that is, not return a 503\n   code) even if no EHLO command\
    \ has yet been received; clients SHOULD\n   open a session with EHLO before sending\
    \ these commands.\n   If these rules are followed, the example in RFC 821 that\
    \ shows \"550\n   access denied to you\" in response to an EXPN command is incorrect\n\
    \   unless an EHLO command precedes the EXPN or the denial of access is\n   based\
    \ on the client's IP address or other authentication or\n   authorization-determining\
    \ mechanisms.\n   The MAIL command (or the obsolete SEND, SOML, or SAML commands)\n\
    \   begins a mail transaction.  Once started, a mail transaction consists\n  \
    \ of a transaction beginning command, one or more RCPT commands, and a\n   DATA\
    \ command, in that order.  A mail transaction may be aborted by\n   the RSET (or\
    \ a new EHLO) command.  There may be zero or more\n   transactions in a session.\
    \  MAIL (or SEND, SOML, or SAML) MUST NOT be\n   sent if a mail transaction is\
    \ already open, i.e., it should be sent\n   only if no mail transaction had been\
    \ started in the session, or it\n   the previous one successfully concluded with\
    \ a successful DATA\n   command, or if the previous one was aborted with a RSET.\n\
    \   If the transaction beginning command argument is not acceptable, a\n   501\
    \ failure reply MUST be returned and the SMTP server MUST stay in\n   the same\
    \ state.  If the commands in a transaction are out of order to\n   the degree\
    \ that they cannot be processed by the server, a 503 failure\n   reply MUST be\
    \ returned and the SMTP server MUST stay in the same\n   state.\n   The last command\
    \ in a session MUST be the QUIT command.  The QUIT\n   command cannot be used\
    \ at any other time in a session, but SHOULD be\n   used by the client SMTP to\
    \ request connection closure, even when no\n   session opening command was sent\
    \ and accepted.\n"
- title: 4.1.5 Private-use Commands
  contents:
  - "4.1.5 Private-use Commands\n   As specified in section 2.2.2, commands starting\
    \ in \"X\" may be used\n   by bilateral agreement between the client (sending)\
    \ and server\n   (receiving) SMTP agents.  An SMTP server that does not recognize\
    \ such\n   a command is expected to reply with \"500 Command not recognized\"\
    .  An\n   extended SMTP server MAY list the feature names associated with these\n\
    \   private commands in the response to the EHLO command.\n   Commands sent or\
    \ accepted by SMTP systems that do not start with \"X\"\n   MUST conform to the\
    \ requirements of section 2.2.2.\n"
- title: 4.2 SMTP Replies
  contents:
  - "4.2 SMTP Replies\n   Replies to SMTP commands serve to ensure the synchronization\
    \ of\n   requests and actions in the process of mail transfer and to guarantee\n\
    \   that the SMTP client always knows the state of the SMTP server.\n   Every\
    \ command MUST generate exactly one reply.\n   The details of the command-reply\
    \ sequence are described in section\n   4.3.\n   An SMTP reply consists of a three\
    \ digit number (transmitted as three\n   numeric characters) followed by some\
    \ text unless specified otherwise\n   in this document.  The number is for use\
    \ by automata to determine\n   what state to enter next; the text is for the human\
    \ user.  The three\n   digits contain enough encoded information that the SMTP\
    \ client need\n   not examine the text and may either discard it or pass it on\
    \ to the\n   user, as appropriate.  Exceptions are as noted elsewhere in this\n\
    \   document.  In particular, the 220, 221, 251, 421, and 551 reply codes\n  \
    \ are associated with message text that must be parsed and interpreted\n   by\
    \ machines.  In the general case, the text may be receiver dependent\n   and context\
    \ dependent, so there are likely to be varying texts for\n   each reply code.\
    \  A discussion of the theory of reply codes is given\n   in section 4.2.1.  Formally,\
    \ a reply is defined to be the sequence: a\n   three-digit code, <SP>, one line\
    \ of text, and <CRLF>, or a multiline\n   reply (as defined in section 4.2.1).\
    \  Since, in violation of this\n   specification, the text is sometimes not sent,\
    \ clients which do not\n   receive it SHOULD be prepared to process the code alone\
    \ (with or\n   without a trailing space character).  Only the EHLO, EXPN, and\
    \ HELP\n   commands are expected to result in multiline replies in normal\n  \
    \ circumstances, however, multiline replies are allowed for any\n   command.\n\
    \   In ABNF, server responses are:\n      Greeting = \"220 \" Domain [ SP text\
    \ ] CRLF\n      Reply-line = Reply-code [ SP text ] CRLF\n   where \"Greeting\"\
    \ appears only in the 220 response that announces that\n   the server is opening\
    \ its part of the connection.\n   An SMTP server SHOULD send only the reply codes\
    \ listed in this\n   document.  An SMTP server SHOULD use the text shown in the\
    \ examples\n   whenever appropriate.\n   An SMTP client MUST determine its actions\
    \ only by the reply code, not\n   by the text (except for the \"change of address\"\
    \ 251 and 551 and, if\n   necessary, 220, 221, and 421 replies); in the general\
    \ case, any text,\n   including no text at all (although senders SHOULD NOT send\
    \ bare\n   codes), MUST be acceptable.  The space (blank) following the reply\n\
    \   code is considered part of the text.  Whenever possible, a receiver-\n   SMTP\
    \ SHOULD test the first digit (severity indication) of the reply\n   code.\n \
    \  The list of codes that appears below MUST NOT be construed as\n   permanent.\
    \  While the addition of new codes should be a rare and\n   significant activity,\
    \ with supplemental information in the textual\n   part of the response being\
    \ preferred, new codes may be added as the\n   result of new Standards or Standards-track\
    \ specifications.\n   Consequently, a sender-SMTP MUST be prepared to handle codes\
    \ not\n   specified in this document and MUST do so by interpreting the first\n\
    \   digit only.\n"
- title: 4.2.1 Reply Code Severities and Theory
  contents:
  - "4.2.1 Reply Code Severities and Theory\n   The three digits of the reply each\
    \ have a special significance.  The\n   first digit denotes whether the response\
    \ is good, bad or incomplete.\n   An unsophisticated SMTP client, or one that\
    \ receives an unexpected\n   code, will be able to determine its next action (proceed\
    \ as planned,\n   redo, retrench, etc.) by examining this first digit.  An SMTP\
    \ client\n   that wants to know approximately what kind of error occurred (e.g.,\n\
    \   mail system error, command syntax error) may examine the second\n   digit.\
    \  The third digit and any supplemental information that may be\n   present is\
    \ reserved for the finest gradation of information.\n   There are five values\
    \ for the first digit of the reply code:\n   1yz   Positive Preliminary reply\n\
    \      The command has been accepted, but the requested action is being\n    \
    \  held in abeyance, pending confirmation of the information in this\n      reply.\
    \  The SMTP client should send another command specifying\n      whether to continue\
    \ or abort the action.  Note: unextended SMTP\n      does not have any commands\
    \ that allow this type of reply, and so\n      does not have continue or abort\
    \ commands.\n   2yz   Positive Completion reply\n      The requested action has\
    \ been successfully completed.  A new\n      request may be initiated.\n   3yz\
    \   Positive Intermediate reply\n      The command has been accepted, but the\
    \ requested action is being\n      held in abeyance, pending receipt of further\
    \ information.  The\n      SMTP client should send another command specifying\
    \ this\n      information.  This reply is used in command sequence groups (i.e.,\n\
    \      in DATA).\n   4yz   Transient Negative Completion reply\n      The command\
    \ was not accepted, and the requested action did not\n      occur.  However, the\
    \ error condition is temporary and the action\n      may be requested again. \
    \ The sender should return to the beginning\n      of the command sequence (if\
    \ any).  It is difficult to assign a\n      meaning to \"transient\" when two\
    \ different sites (receiver- and\n      sender-SMTP agents) must agree on the\
    \ interpretation.  Each reply\n      in this category might have a different time\
    \ value, but the SMTP\n      client is encouraged to try again.  A rule of thumb\
    \ to determine\n      whether a reply fits into the 4yz or the 5yz category (see\
    \ below)\n      is that replies are 4yz if they can be successful if repeated\n\
    \      without any change in command form or in properties of the sender\n   \
    \   or receiver (that is, the command is repeated identically and the\n      receiver\
    \ does not put up a new implementation.)\n   5yz   Permanent Negative Completion\
    \ reply\n      The command was not accepted and the requested action did not\n\
    \      occur.  The SMTP client is discouraged from repeating the exact\n     \
    \ request (in the same sequence).  Even some \"permanent\" error\n      conditions\
    \ can be corrected, so the human user may want to direct\n      the SMTP client\
    \ to reinitiate the command sequence by direct\n      action at some point in\
    \ the future (e.g., after the spelling has\n      been changed, or the user has\
    \ altered the account status).\n   The second digit encodes responses in specific\
    \ categories:\n   x0z   Syntax: These replies refer to syntax errors, syntactically\n\
    \      correct commands that do not fit any functional category, and\n      unimplemented\
    \ or superfluous commands.\n   x1z   Information:  These are replies to requests\
    \ for information,\n      such as status or help.\n   x2z   Connections: These\
    \ are replies referring to the transmission\n      channel.\n   x3z   Unspecified.\n\
    \   x4z   Unspecified.\n   x5z   Mail system: These replies indicate the status\
    \ of the receiver\n      mail system vis-a-vis the requested transfer or other\
    \ mail system\n      action.\n   The third digit gives a finer gradation of meaning\
    \ in each category\n   specified by the second digit.  The list of replies illustrates\
    \ this.\n   Each reply text is recommended rather than mandatory, and may even\n\
    \   change according to the command with which it is associated.  On the\n   other\
    \ hand, the reply codes must strictly follow the specifications\n   in this section.\
    \  Receiver implementations should not invent new\n   codes for slightly different\
    \ situations from the ones described here,\n   but rather adapt codes already\
    \ defined.\n   For example, a command such as NOOP, whose successful execution\
    \ does\n   not offer the SMTP client any new information, will return a 250\n\
    \   reply.  The reply is 502 when the command requests an unimplemented\n   non-site-specific\
    \ action.  A refinement of that is the 504 reply for\n   a command that is implemented,\
    \ but that requests an unimplemented\n   parameter.\n   The reply text may be\
    \ longer than a single line; in these cases the\n   complete text must be marked\
    \ so the SMTP client knows when it can\n   stop reading the reply.  This requires\
    \ a special format to indicate a\n   multiple line reply.\n   The format for multiline\
    \ replies requires that every line, except the\n   last, begin with the reply\
    \ code, followed immediately by a hyphen,\n   \"-\" (also known as minus), followed\
    \ by text.  The last line will\n   begin with the reply code, followed immediately\
    \ by <SP>, optionally\n   some text, and <CRLF>.  As noted above, servers SHOULD\
    \ send the <SP>\n   if subsequent text is not sent, but clients MUST be prepared\
    \ for it\n   to be omitted.\n   For example:\n      123-First line\n      123-Second\
    \ line\n      123-234 text beginning with numbers\n      123 The last line\n \
    \  In many cases the SMTP client then simply needs to search for a line\n   beginning\
    \ with the reply code followed by <SP> or <CRLF> and ignore\n   all preceding\
    \ lines.  In a few cases, there is important data for the\n   client in the reply\
    \ \"text\".  The client will be able to identify\n   these cases from the current\
    \ context.\n"
- title: 4.2.2 Reply Codes by Function Groups
  contents:
  - "4.2.2 Reply Codes by Function Groups\n      500 Syntax error, command unrecognized\n\
    \         (This may include errors such as command line too long)\n      501 Syntax\
    \ error in parameters or arguments\n      502 Command not implemented  (see section\
    \ 4.2.4)\n      503 Bad sequence of commands\n      504 Command parameter not\
    \ implemented\n      211 System status, or system help reply\n      214 Help message\n\
    \         (Information on how to use the receiver or the meaning of a\n      \
    \   particular non-standard command; this reply is useful only\n         to the\
    \ human user)\n      220 <domain> Service ready\n      221 <domain> Service closing\
    \ transmission channel\n      421 <domain> Service not available, closing transmission\
    \ channel\n         (This may be a reply to any command if the service knows it\n\
    \         must shut down)\n      250 Requested mail action okay, completed\n \
    \     251 User not local; will forward to <forward-path>\n         (See section\
    \ 3.4)\n      252 Cannot VRFY user, but will accept message and attempt\n    \
    \      delivery\n         (See section 3.5.3)\n      450 Requested mail action\
    \ not taken: mailbox unavailable\n         (e.g., mailbox busy)\n      550 Requested\
    \ action not taken: mailbox unavailable\n         (e.g., mailbox not found, no\
    \ access, or command rejected\n         for policy reasons)\n      451 Requested\
    \ action aborted: error in processing\n      551 User not local; please try <forward-path>\n\
    \         (See section 3.4)\n      452 Requested action not taken: insufficient\
    \ system storage\n      552 Requested mail action aborted: exceeded storage allocation\n\
    \      553 Requested action not taken: mailbox name not allowed\n         (e.g.,\
    \ mailbox syntax incorrect)\n      354 Start mail input; end with <CRLF>.<CRLF>\n\
    \      554 Transaction failed (Or, in the case of a connection-opening\n     \
    \     response, \"No SMTP service here\")\n"
- title: 4.2.3  Reply Codes in Numeric Order
  contents:
  - "4.2.3  Reply Codes in Numeric Order\n      211 System status, or system help\
    \ reply\n      214 Help message\n         (Information on how to use the receiver\
    \ or the meaning of a\n         particular non-standard command; this reply is\
    \ useful only\n         to the human user)\n      220 <domain> Service ready\n\
    \      221 <domain> Service closing transmission channel\n      250 Requested\
    \ mail action okay, completed\n      251 User not local; will forward to <forward-path>\n\
    \         (See section 3.4)\n      252 Cannot VRFY user, but will accept message\
    \ and attempt\n         delivery\n         (See section 3.5.3)\n      354 Start\
    \ mail input; end with <CRLF>.<CRLF>\n      421 <domain> Service not available,\
    \ closing transmission channel\n         (This may be a reply to any command if\
    \ the service knows it\n         must shut down)\n      450 Requested mail action\
    \ not taken: mailbox unavailable\n         (e.g., mailbox busy)\n      451 Requested\
    \ action aborted: local error in processing\n      452 Requested action not taken:\
    \ insufficient system storage\n      500 Syntax error, command unrecognized\n\
    \         (This may include errors such as command line too long)\n      501 Syntax\
    \ error in parameters or arguments\n      502 Command not implemented (see section\
    \ 4.2.4)\n      503 Bad sequence of commands\n      504 Command parameter not\
    \ implemented\n      550 Requested action not taken: mailbox unavailable\n   \
    \      (e.g., mailbox not found, no access, or command rejected\n         for\
    \ policy reasons)\n      551 User not local; please try <forward-path>\n     \
    \    (See section 3.4)\n      552 Requested mail action aborted: exceeded storage\
    \ allocation\n      553 Requested action not taken: mailbox name not allowed\n\
    \         (e.g., mailbox syntax incorrect)\n      554 Transaction failed  (Or,\
    \ in the case of a connection-opening\n          response, \"No SMTP service here\"\
    )\n"
- title: 4.2.4 Reply Code 502
  contents:
  - "4.2.4 Reply Code 502\n   Questions have been raised as to when reply code 502\
    \ (Command not\n   implemented) SHOULD be returned in preference to other codes.\
    \  502\n   SHOULD be used when the command is actually recognized by the SMTP\n\
    \   server, but not implemented.  If the command is not recognized, code\n   500\
    \ SHOULD be returned.  Extended SMTP systems MUST NOT list\n   capabilities in\
    \ response to EHLO for which they will return 502 (or\n   500) replies.\n"
- title: 4.2.5 Reply Codes After DATA and the Subsequent <CRLF>.<CRLF>
  contents:
  - "4.2.5 Reply Codes After DATA and the Subsequent <CRLF>.<CRLF>\n   When an SMTP\
    \ server returns a positive completion status (2yz code)\n   after the DATA command\
    \ is completed with <CRLF>.<CRLF>, it accepts\n   responsibility for:\n   -  delivering\
    \ the message (if the recipient mailbox exists), or\n   -  if attempts to deliver\
    \ the message fail due to transient\n      conditions, retrying delivery some\
    \ reasonable number of times at\n      intervals as specified in section 4.5.4.\n\
    \   -  if attempts to deliver the message fail due to permanent\n      conditions,\
    \ or if repeated attempts to deliver the message fail\n      due to transient\
    \ conditions, returning appropriate notification to\n      the sender of the original\
    \ message (using the address in the SMTP\n      MAIL command).\n   When an SMTP\
    \ server returns a permanent error status (5yz) code after\n   the DATA command\
    \ is completed with <CRLF>.<CRLF>, it MUST NOT make\n   any subsequent attempt\
    \ to deliver that message.  The SMTP client\n   retains responsibility for delivery\
    \ of that message and may either\n   return it to the user or requeue it for a\
    \ subsequent attempt (see\n   section 4.5.4.1).\n   The user who originated the\
    \ message SHOULD be able to interpret the\n   return of a transient failure status\
    \ (by mail message or otherwise)\n   as a non-delivery indication, just as a permanent\
    \ failure would be\n   interpreted.  I.e., if the client SMTP successfully handles\
    \ these\n   conditions, the user will not receive such a reply.\n   When an SMTP\
    \ server returns a permanent error status (5yz) code after\n   the DATA command\
    \ is completely with <CRLF>.<CRLF>, it MUST NOT make\n   any subsequent attempt\
    \ to deliver the message.  As with temporary\n   error status codes, the SMTP\
    \ client retains responsibility for the\n   message, but SHOULD not again attempt\
    \ delivery to the same server\n   without user review and intervention of the\
    \ message.\n"
- title: 4.3 Sequencing of Commands and Replies
  contents:
  - '4.3 Sequencing of Commands and Replies

    '
- title: 4.3.1 Sequencing Overview
  contents:
  - "4.3.1 Sequencing Overview\n   The communication between the sender and receiver\
    \ is an alternating\n   dialogue, controlled by the sender.  As such, the sender\
    \ issues a\n   command and the receiver responds with a reply.  Unless other\n\
    \   arrangements are negotiated through service extensions, the sender\n   MUST\
    \ wait for this response before sending further commands.\n   One important reply\
    \ is the connection greeting.  Normally, a receiver\n   will send a 220 \"Service\
    \ ready\" reply when the connection is\n   completed.  The sender SHOULD wait\
    \ for this greeting message before\n   sending any commands.\n   Note: all the\
    \ greeting-type replies have the official name (the\n   fully-qualified primary\
    \ domain name) of the server host as the first\n   word following the reply code.\
    \  Sometimes the host will have no\n   meaningful name.  See 4.1.3 for a discussion\
    \ of alternatives in these\n   situations.\n   For example,\n      220 ISIF.USC.EDU\
    \ Service ready\n   or\n      220 mail.foo.com SuperSMTP v 6.1.2 Service ready\n\
    \   or\n      220 [10.0.0.1] Clueless host service ready\n   The table below lists\
    \ alternative success and failure replies for\n   each command.  These SHOULD\
    \ be strictly adhered to: a receiver may\n   substitute text in the replies, but\
    \ the meaning and action implied by\n   the code numbers and by the specific command\
    \ reply sequence cannot be\n   altered.\n"
- title: 4.3.2 Command-Reply Sequences
  contents:
  - "4.3.2 Command-Reply Sequences\n   Each command is listed with its usual possible\
    \ replies.  The prefixes\n   used before the possible replies are \"I\" for intermediate,\
    \ \"S\" for\n   success, and \"E\" for error.  Since some servers may generate\
    \ other\n   replies under special circumstances, and to allow for future\n   extension,\
    \ SMTP clients SHOULD, when possible, interpret only the\n   first digit of the\
    \ reply and MUST be prepared to deal with\n   unrecognized reply codes by interpreting\
    \ the first digit only.\n   Unless extended using the mechanisms described in\
    \ section 2.2, SMTP\n   servers MUST NOT transmit reply codes to an SMTP client\
    \ that are\n   other than three digits or that do not start in a digit between\
    \ 2 and\n   5 inclusive.\n   These sequencing rules and, in principle, the codes\
    \ themselves, can\n   be extended or modified by SMTP extensions offered by the\
    \ server and\n   accepted (requested) by the client.\n   In addition to the codes\
    \ listed below, any SMTP command can return\n   any of the following codes if\
    \ the corresponding unusual circumstances\n   are encountered:\n   500  For the\
    \ \"command line too long\" case or if the command name was\n      not recognized.\
    \  Note that producing a \"command not recognized\"\n      error in response to\
    \ the required subset of these commands is a\n      violation of this specification.\n\
    \   501  Syntax error in command or arguments.  In order to provide for\n    \
    \  future extensions, commands that are specified in this document as\n      not\
    \ accepting arguments (DATA, RSET, QUIT) SHOULD return a 501\n      message if\
    \ arguments are supplied in the absence of EHLO-\n      advertised extensions.\n\
    \   421  Service shutting down and closing transmission channel\n   Specific sequences\
    \ are:\n   CONNECTION ESTABLISHMENT\n      S: 220\n      E: 554\n   EHLO or HELO\n\
    \      S: 250\n      E: 504, 550\n   MAIL\n      S: 250\n      E: 552, 451, 452,\
    \ 550, 553, 503\n   RCPT\n      S: 250, 251 (but see section 3.4 for discussion\
    \ of 251 and 551)\n      E: 550, 551, 552, 553, 450, 451, 452, 503, 550\n   DATA\n\
    \      I: 354 -> data -> S: 250\n                        E: 552, 554, 451, 452\n\
    \      E: 451, 554, 503\n   RSET\n      S: 250\n   VRFY\n      S: 250, 251, 252\n\
    \      E: 550, 551, 553, 502, 504\n   EXPN\n      S: 250, 252\n      E: 550, 500,\
    \ 502, 504\n   HELP\n      S: 211, 214\n      E: 502, 504\n   NOOP\n      S: 250\n\
    \   QUIT\n      S: 221\n"
- title: 4.4 Trace Information
  contents:
  - "4.4 Trace Information\n   When an SMTP server receives a message for delivery\
    \ or further\n   processing, it MUST insert trace (\"time stamp\" or \"Received\"\
    )\n   information at the beginning of the message content, as discussed in\n \
    \  section 4.1.1.4.\n   This line MUST be structured as follows:\n   -  The FROM\
    \ field, which MUST be supplied in an SMTP environment,\n      SHOULD contain\
    \ both (1) the name of the source host as presented\n      in the EHLO command\
    \ and (2) an address literal containing the IP\n      address of the source, determined\
    \ from the TCP connection.\n   -  The ID field MAY contain an \"@\" as suggested\
    \ in RFC 822, but this\n      is not required.\n   -  The FOR field MAY contain\
    \ a list of <path> entries when multiple\n      RCPT commands have been given.\
    \  This may raise some security\n      issues and is usually not desirable; see\
    \ section 7.2.\n   An Internet mail program MUST NOT change a Received: line that\
    \ was\n   previously added to the message header.  SMTP servers MUST prepend\n\
    \   Received lines to messages; they MUST NOT change the order of\n   existing\
    \ lines or insert Received lines in any other location.\n   As the Internet grows,\
    \ comparability of Received fields is important\n   for detecting problems, especially\
    \ slow relays.  SMTP servers that\n   create Received fields SHOULD use explicit\
    \ offsets in the dates\n   (e.g., -0800), rather than time zone names of any type.\
    \  Local time\n   (with an offset) is preferred to UT when feasible.  This formulation\n\
    \   allows slightly more information about local circumstances to be\n   specified.\
    \  If UT is needed, the receiver need merely do some simple\n   arithmetic to\
    \ convert the values.  Use of UT loses information about\n   the time zone-location\
    \ of the server.  If it is desired to supply a\n   time zone name, it SHOULD be\
    \ included in a comment.\n   When the delivery SMTP server makes the \"final delivery\"\
    \ of a\n   message, it inserts a return-path line at the beginning of the mail\n\
    \   data.  This use of return-path is required; mail systems MUST support\n  \
    \ it.  The return-path line preserves the information in the <reverse-\n   path>\
    \ from the MAIL command.  Here, final delivery means the message\n   has left\
    \ the SMTP environment.  Normally, this would mean it had been\n   delivered to\
    \ the destination user or an associated mail drop, but in\n   some cases it may\
    \ be further processed and transmitted by another\n   mail system.\n   It is possible\
    \ for the mailbox in the return path to be different\n   from the actual sender's\
    \ mailbox, for example, if error responses are\n   to be delivered to a special\
    \ error handling mailbox rather than to\n   the message sender.  When mailing\
    \ lists are involved, this\n   arrangement is common and useful as a means of\
    \ directing errors to\n   the list maintainer rather than the message originator.\n\
    \   The text above implies that the final mail data will begin with a\n   return\
    \ path line, followed by one or more time stamp lines.  These\n   lines will be\
    \ followed by the mail data headers and body [32].\n   It is sometimes difficult\
    \ for an SMTP server to determine whether or\n   not it is making final delivery\
    \ since forwarding or other operations\n   may occur after the message is accepted\
    \ for delivery.  Consequently,\n   any further (forwarding, gateway, or relay)\
    \ systems MAY remove the\n   return path and rebuild the MAIL command as needed\
    \ to ensure that\n   exactly one such line appears in a delivered message.\n \
    \  A message-originating SMTP system SHOULD NOT send a message that\n   already\
    \ contains a Return-path header.  SMTP servers performing a\n   relay function\
    \ MUST NOT inspect the message data, and especially not\n   to the extent needed\
    \ to determine if Return-path headers are present.\n   SMTP servers making final\
    \ delivery MAY remove Return-path headers\n   before adding their own.\n   The\
    \ primary purpose of the Return-path is to designate the address to\n   which\
    \ messages indicating non-delivery or other mail system failures\n   are to be\
    \ sent.  For this to be unambiguous, exactly one return path\n   SHOULD be present\
    \ when the message is delivered.  Systems using RFC\n   822 syntax with non-SMTP\
    \ transports SHOULD designate an unambiguous\n   address, associated with the\
    \ transport envelope, to which error\n   reports (e.g., non-delivery messages)\
    \ should be sent.\n   Historical note: Text in RFC 822 that appears to contradict\
    \ the use\n   of the Return-path header (or the envelope reverse path address\
    \ from\n   the MAIL command) as the destination for error messages is not\n  \
    \ applicable on the Internet.  The reverse path address (as copied into\n   the\
    \ Return-path) MUST be used as the target of any mail containing\n   delivery\
    \ error messages.\n   In particular:\n   -  a gateway from SMTP->elsewhere SHOULD\
    \ insert a return-path header,\n      unless it is known that the \"elsewhere\"\
    \ transport also uses\n      Internet domain addresses and maintains the envelope\
    \ sender\n      address separately.\n   -  a gateway from elsewhere->SMTP SHOULD\
    \ delete any return-path\n      header present in the message, and either copy\
    \ that information to\n      the SMTP envelope or combine it with information\
    \ present in the\n      envelope of the other transport system to construct the\
    \ reverse\n      path argument to the MAIL command in the SMTP envelope.\n   The\
    \ server must give special treatment to cases in which the\n   processing following\
    \ the end of mail data indication is only\n   partially successful.  This could\
    \ happen if, after accepting several\n   recipients and the mail data, the SMTP\
    \ server finds that the mail\n   data could be successfully delivered to some,\
    \ but not all, of the\n   recipients.  In such cases, the response to the DATA\
    \ command MUST be\n   an OK reply.  However, the SMTP server MUST compose and\
    \ send an\n   \"undeliverable mail\" notification message to the originator of\
    \ the\n   message.\n   A single notification listing all of the failed recipients\
    \ or\n   separate notification messages MUST be sent for each failed\n   recipient.\
    \  For economy of processing by the sender, the former is\n   preferred when possible.\
    \  All undeliverable mail notification\n   messages are sent using the MAIL command\
    \ (even if they result from\n   processing the obsolete SEND, SOML, or SAML commands)\
    \ and use a null\n   return path as discussed in section 3.7.\n   The time stamp\
    \ line and the return path line are formally defined as\n   follows:\n"
- title: Return-path-line = "Return-Path:" FWS Reverse-path <CRLF>
  contents:
  - 'Return-path-line = "Return-Path:" FWS Reverse-path <CRLF>

    '
- title: Time-stamp-line = "Received:" FWS Stamp <CRLF>
  contents:
  - 'Time-stamp-line = "Received:" FWS Stamp <CRLF>

    '
- title: Stamp = From-domain By-domain Opt-info ";"  FWS date-time
  contents:
  - "Stamp = From-domain By-domain Opt-info \";\"  FWS date-time\n      ; where \"\
    date-time\" is as defined in [32]\n      ; but the \"obs-\" forms, especially\
    \ two-digit\n      ; years, are prohibited in SMTP and MUST NOT be used.\n"
- title: From-domain = "FROM" FWS Extended-Domain CFWS
  contents:
  - 'From-domain = "FROM" FWS Extended-Domain CFWS

    '
- title: By-domain = "BY" FWS Extended-Domain CFWS
  contents:
  - 'By-domain = "BY" FWS Extended-Domain CFWS

    '
- title: Extended-Domain = Domain /
  contents:
  - "Extended-Domain = Domain /\n           ( Domain FWS \"(\" TCP-info \")\" ) /\n\
    \           ( Address-literal FWS \"(\" TCP-info \")\" )\n"
- title: TCP-info = Address-literal / ( Domain FWS Address-literal )
  contents:
  - "TCP-info = Address-literal / ( Domain FWS Address-literal )\n      ; Information\
    \ derived by server from TCP connection\n      ; not client EHLO.\n"
- title: Opt-info = [Via] [With] [ID] [For]
  contents:
  - 'Opt-info = [Via] [With] [ID] [For]

    '
- title: Via = "VIA" FWS Link CFWS
  contents:
  - 'Via = "VIA" FWS Link CFWS

    '
- title: With = "WITH" FWS Protocol CFWS
  contents:
  - 'With = "WITH" FWS Protocol CFWS

    '
- title: ID = "ID" FWS String / msg-id CFWS
  contents:
  - 'ID = "ID" FWS String / msg-id CFWS

    '
- title: For = "FOR" FWS 1*( Path / Mailbox ) CFWS
  contents:
  - 'For = "FOR" FWS 1*( Path / Mailbox ) CFWS

    '
- title: Link = "TCP" / Addtl-Link
  contents:
  - 'Link = "TCP" / Addtl-Link

    '
- title: Addtl-Link = Atom
  contents:
  - "Addtl-Link = Atom\n      ; Additional standard names for links are registered\
    \ with the\n         ; Internet Assigned Numbers Authority (IANA).  \"Via\" is\n\
    \         ; primarily of value with non-Internet transports.  SMTP\n         ;\
    \ servers SHOULD NOT use unregistered names.\n"
- title: Protocol = "ESMTP" / "SMTP" / Attdl-Protocol
  contents:
  - 'Protocol = "ESMTP" / "SMTP" / Attdl-Protocol

    '
- title: Attdl-Protocol = Atom
  contents:
  - "Attdl-Protocol = Atom\n      ; Additional standard names for protocols are registered\
    \ with the\n         ; Internet Assigned Numbers Authority (IANA).  SMTP servers\n\
    \         ; SHOULD NOT use unregistered names.\n"
- title: 4.5 Additional Implementation Issues
  contents:
  - '4.5 Additional Implementation Issues

    '
- title: 4.5.1 Minimum Implementation
  contents:
  - "4.5.1 Minimum Implementation\n   In order to make SMTP workable, the following\
    \ minimum implementation\n   is required for all receivers.  The following commands\
    \ MUST be\n   supported to conform to this specification:\n      EHLO\n      HELO\n\
    \      MAIL\n      RCPT\n      DATA\n      RSET\n      NOOP\n      QUIT\n    \
    \  VRFY\n   Any system that includes an SMTP server supporting mail relaying or\n\
    \   delivery MUST support the reserved mailbox \"postmaster\" as a case-\n   insensitive\
    \ local name.  This postmaster address is not strictly\n   necessary if the server\
    \ always returns 554 on connection opening (as\n   described in section 3.1).\
    \  The requirement to accept mail for\n   postmaster implies that RCPT commands\
    \ which specify a mailbox for\n   postmaster at any of the domains for which the\
    \ SMTP server provides\n   mail service, as well as the special case of \"RCPT\
    \ TO:<Postmaster>\"\n   (with no domain specification), MUST be supported.\n \
    \  SMTP systems are expected to make every reasonable effort to accept\n   mail\
    \ directed to Postmaster from any other system on the Internet.\n   In extreme\
    \ cases --such as to contain a denial of service attack or\n   other breach of\
    \ security-- an SMTP server may block mail directed to\n   Postmaster.  However,\
    \ such arrangements SHOULD be narrowly tailored\n   so as to avoid blocking messages\
    \ which are not part of such attacks.\n"
- title: 4.5.2 Transparency
  contents:
  - "4.5.2 Transparency\n   Without some provision for data transparency, the character\
    \ sequence\n   \"<CRLF>.<CRLF>\" ends the mail text and cannot be sent by the\
    \ user.\n   In general, users are not aware of such \"forbidden\" sequences. \
    \ To\n   allow all user composed text to be transmitted transparently, the\n \
    \  following procedures are used:\n   -  Before sending a line of mail text, the\
    \ SMTP client checks the\n      first character of the line.  If it is a period,\
    \ one additional\n      period is inserted at the beginning of the line.\n   -\
    \  When a line of mail text is received by the SMTP server, it checks\n      the\
    \ line.  If the line is composed of a single period, it is\n      treated as the\
    \ end of mail indicator.  If the first character is a\n      period and there\
    \ are other characters on the line, the first\n      character is deleted.\n \
    \  The mail data may contain any of the 128 ASCII characters.  All\n   characters\
    \ are to be delivered to the recipient's mailbox, including\n   spaces, vertical\
    \ and horizontal tabs, and other control characters.\n   If the transmission channel\
    \ provides an 8-bit byte (octet) data\n   stream, the 7-bit ASCII codes are transmitted\
    \ right justified in the\n   octets, with the high order bits cleared to zero.\
    \  See 3.7 for\n   special treatment of these conditions in SMTP systems serving\
    \ a relay\n   function.\n   In some systems it may be necessary to transform the\
    \ data as it is\n   received and stored.  This may be necessary for hosts that\
    \ use a\n   different character set than ASCII as their local character set, that\n\
    \   store data in records rather than strings, or which use special\n   character\
    \ sequences as delimiters inside mailboxes.  If such\n   transformations are necessary,\
    \ they MUST be reversible, especially if\n   they are applied to mail being relayed.\n"
- title: 4.5.3 Sizes and Timeouts
  contents:
  - '4.5.3 Sizes and Timeouts

    '
- title: 4.5.3.1 Size limits and minimums
  contents:
  - "4.5.3.1 Size limits and minimums\n   There are several objects that have required\
    \ minimum/maximum sizes.\n   Every implementation MUST be able to receive objects\
    \ of at least\n   these sizes.  Objects larger than these sizes SHOULD be avoided\
    \ when\n   possible.  However, some Internet mail constructs such as encoded\n\
    \   X.400 addresses [16] will often require larger objects: clients MAY\n   attempt\
    \ to transmit these, but MUST be prepared for a server to\n   reject them if they\
    \ cannot be handled by it.  To the maximum extent\n   possible, implementation\
    \ techniques which impose no limits on the\n   length of these objects should\
    \ be used.\n   local-part\n      The maximum total length of a user name or other\
    \ local-part is 64\n      characters.\n   domain\n      The maximum total length\
    \ of a domain name or number is 255\n      characters.\n   path\n      The maximum\
    \ total length of a reverse-path or forward-path is 256\n      characters (including\
    \ the punctuation and element separators).\n   command line\n      The maximum\
    \ total length of a command line including the command\n      word and the <CRLF>\
    \ is 512 characters.  SMTP extensions may be\n      used to increase this limit.\n\
    \   reply line\n      The maximum total length of a reply line including the reply\
    \ code\n      and the <CRLF> is 512 characters.  More information may be\n   \
    \   conveyed through multiple-line replies.\n   text line\n      The maximum total\
    \ length of a text line including the <CRLF> is\n      1000 characters (not counting\
    \ the leading dot duplicated for\n      transparency).  This number may be increased\
    \ by the use of SMTP\n      Service Extensions.\n   message content\n      The\
    \ maximum total length of a message content (including any\n      message headers\
    \ as well as the message body) MUST BE at least 64K\n      octets.  Since the\
    \ introduction of Internet standards for\n      multimedia mail [12], message\
    \ lengths on the Internet have grown\n      dramatically, and message size restrictions\
    \ should be avoided if\n      at all possible.  SMTP server systems that must\
    \ impose\n      restrictions SHOULD implement the \"SIZE\" service extension [18],\n\
    \      and SMTP client systems that will send large messages SHOULD\n      utilize\
    \ it when possible.\n   recipients buffer\n      The minimum total number of recipients\
    \ that must be buffered is\n      100 recipients.  Rejection of messages (for\
    \ excessive recipients)\n      with fewer than 100 RCPT commands is a violation\
    \ of this\n      specification.  The general principle that relaying SMTP servers\n\
    \      MUST NOT, and delivery SMTP servers SHOULD NOT, perform validation\n  \
    \    tests on message headers suggests that rejecting a message based\n      on\
    \ the total number of recipients shown in header fields is to be\n      discouraged.\
    \  A server which imposes a limit on the number of\n      recipients MUST behave\
    \ in an orderly fashion,  such as to reject\n      additional addresses over its\
    \ limit rather than silently\n      discarding addresses previously accepted.\
    \  A client that needs to\n      deliver a message containing over 100 RCPT commands\
    \ SHOULD be\n      prepared to transmit in 100-recipient \"chunks\" if the server\n\
    \      declines to accept more than 100 recipients in a single message.\n   Errors\
    \ due to exceeding these limits may be reported by using the\n   reply codes.\
    \  Some examples of reply codes are:\n      500 Line too long.\n   or\n      501\
    \ Path too long\n   or\n      452 Too many recipients  (see below)\n   or\n  \
    \    552 Too much mail data.\n   RFC 821 [30] incorrectly listed the error where\
    \ an SMTP server\n   exhausts its implementation limit on the number of RCPT commands\n\
    \   (\"too many recipients\") as having reply code 552.  The correct reply\n \
    \  code for this condition is 452.  Clients SHOULD treat a 552 code in\n   this\
    \ case as a temporary, rather than permanent, failure so the logic\n   below works.\n\
    \   When a conforming SMTP server encounters this condition, it has at\n   least\
    \ 100 successful RCPT commands in its recipients buffer.  If the\n   server is\
    \ able to accept the message, then at least these 100\n   addresses will be removed\
    \ from the SMTP client's queue.  When the\n   client attempts retransmission of\
    \ those addresses which received 452\n   responses, at least 100 of these will\
    \ be able to fit in the SMTP\n   server's recipients buffer.  Each retransmission\
    \ attempt which is\n   able to deliver anything will be able to dispose of at\
    \ least 100 of\n   these recipients.\n   If an SMTP server has an implementation\
    \ limit on the number of RCPT\n   commands and this limit is exhausted, it MUST\
    \ use a response code of\n   452 (but the client SHOULD also be prepared for a\
    \ 552, as noted\n   above).  If the server has a configured site-policy limitation\
    \ on the\n   number of RCPT commands, it MAY instead use a 5XX response code.\n\
    \   This would be most appropriate if the policy limitation was intended\n   to\
    \ apply if the total recipient count for a particular message body\n   were enforced\
    \ even if that message body was sent in multiple mail\n   transactions.\n"
- title: 4.5.3.2 Timeouts
  contents:
  - "4.5.3.2 Timeouts\n   An SMTP client MUST provide a timeout mechanism.  It MUST\
    \ use per-\n   command timeouts rather than somehow trying to time the entire\
    \ mail\n   transaction.  Timeouts SHOULD be easily reconfigurable, preferably\n\
    \   without recompiling the SMTP code.  To implement this, a timer is set\n  \
    \ for each SMTP command and for each buffer of the data transfer.  The\n   latter\
    \ means that the overall timeout is inherently proportional to\n   the size of\
    \ the message.\n   Based on extensive experience with busy mail-relay hosts, the\
    \ minimum\n   per-command timeout values SHOULD be as follows:\n   Initial 220\
    \ Message: 5 minutes\n      An SMTP client process needs to distinguish between\
    \ a failed TCP\n      connection and a delay in receiving the initial 220 greeting\n\
    \      message.  Many SMTP servers accept a TCP connection but delay\n      delivery\
    \ of the 220 message until their system load permits more\n      mail to be processed.\n\
    \   MAIL Command: 5 minutes\n   RCPT Command: 5 minutes\n      A longer timeout\
    \ is required if processing of mailing lists and\n      aliases is not deferred\
    \ until after the message was accepted.\n   DATA Initiation: 2 minutes\n     \
    \ This is while awaiting the \"354 Start Input\" reply to a DATA\n      command.\n\
    \   Data Block: 3 minutes\n      This is while awaiting the completion of each\
    \ TCP SEND call\n      transmitting a chunk of data.\n   DATA Termination: 10\
    \ minutes.\n      This is while awaiting the \"250 OK\" reply.  When the receiver\
    \ gets\n      the final period terminating the message data, it typically\n  \
    \    performs processing to deliver the message to a user mailbox.  A\n      spurious\
    \ timeout at this point would be very wasteful and would\n      typically result\
    \ in delivery of multiple copies of the message,\n      since it has been successfully\
    \ sent and the server has accepted\n      responsibility for delivery.  See section\
    \ 6.1 for additional\n      discussion.\n   An SMTP server SHOULD have a timeout\
    \ of at least 5 minutes while it\n   is awaiting the next command from the sender.\n"
- title: 4.5.4 Retry Strategies
  contents:
  - "4.5.4 Retry Strategies\n   The common structure of a host SMTP implementation\
    \ includes user\n   mailboxes, one or more areas for queuing messages in transit,\
    \ and one\n   or more daemon processes for sending and receiving mail.  The exact\n\
    \   structure will vary depending on the needs of the users on the host\n   and\
    \ the number and size of mailing lists supported by the host.  We\n   describe\
    \ several optimizations that have proved helpful, particularly\n   for mailers\
    \ supporting high traffic levels.\n   Any queuing strategy MUST include timeouts\
    \ on all activities on a\n   per-command basis.  A queuing strategy MUST NOT send\
    \ error messages\n   in response to error messages under any circumstances.\n"
- title: 4.5.4.1 Sending Strategy
  contents:
  - "4.5.4.1 Sending Strategy\n   The general model for an SMTP client is one or more\
    \ processes that\n   periodically attempt to transmit outgoing mail.  In a typical\
    \ system,\n   the program that composes a message has some method for requesting\n\
    \   immediate attention for a new piece of outgoing mail, while mail that\n  \
    \ cannot be transmitted immediately MUST be queued and periodically\n   retried\
    \ by the sender.  A mail queue entry will include not only the\n   message itself\
    \ but also the envelope information.\n   The sender MUST delay retrying a particular\
    \ destination after one\n   attempt has failed.  In general, the retry interval\
    \ SHOULD be at\n   least 30 minutes; however, more sophisticated and variable\
    \ strategies\n   will be beneficial when the SMTP client can determine the reason\
    \ for\n   non-delivery.\n   Retries continue until the message is transmitted\
    \ or the sender gives\n   up; the give-up time generally needs to be at least\
    \ 4-5 days.  The\n   parameters to the retry algorithm MUST be configurable.\n\
    \   A client SHOULD keep a list of hosts it cannot reach and\n   corresponding\
    \ connection timeouts, rather than just retrying queued\n   mail items.\n   Experience\
    \ suggests that failures are typically transient (the target\n   system or its\
    \ connection has crashed), favoring a policy of two\n   connection attempts in\
    \ the first hour the message is in the queue,\n   and then backing off to one\
    \ every two or three hours.\n   The SMTP client can shorten the queuing delay\
    \ in cooperation with the\n   SMTP server.  For example, if mail is received from\
    \ a particular\n   address, it is likely that mail queued for that host can now\
    \ be sent.\n   Application of this principle may, in many cases, eliminate the\n\
    \   requirement for an explicit \"send queues now\" function such as ETRN\n  \
    \ [9].\n   The strategy may be further modified as a result of multiple\n   addresses\
    \ per host (see below) to optimize delivery time vs. resource\n   usage.\n   An\
    \ SMTP client may have a large queue of messages for each\n   unavailable destination\
    \ host.  If all of these messages were retried\n   in every retry cycle, there\
    \ would be excessive Internet overhead and\n   the sending system would be blocked\
    \ for a long period.  Note that an\n   SMTP client can generally determine that\
    \ a delivery attempt has\n   failed only after a timeout of several minutes and\
    \ even a one-minute\n   timeout per connection will result in a very large delay\
    \ if retries\n   are repeated for dozens, or even hundreds, of queued messages\
    \ to the\n   same host.\n   At the same time, SMTP clients SHOULD use great care\
    \ in caching\n   negative responses from servers.  In an extreme case, if EHLO\
    \ is\n   issued multiple times during the same SMTP connection, different\n  \
    \ answers may be returned by the server.  More significantly, 5yz\n   responses\
    \ to the MAIL command MUST NOT be cached.\n   When a mail message is to be delivered\
    \ to multiple recipients, and\n   the SMTP server to which a copy of the message\
    \ is to be sent is the\n   same for multiple recipients, then only one copy of\
    \ the message\n   SHOULD be transmitted.  That is, the SMTP client SHOULD use\
    \ the\n   command sequence:  MAIL, RCPT, RCPT,... RCPT, DATA instead of the\n\
    \   sequence: MAIL, RCPT, DATA, ..., MAIL, RCPT, DATA.  However, if there\n  \
    \ are very many addresses, a limit on the number of RCPT commands per\n   MAIL\
    \ command MAY be imposed.  Implementation of this efficiency\n   feature is strongly\
    \ encouraged.\n   Similarly, to achieve timely delivery, the SMTP client MAY support\n\
    \   multiple concurrent outgoing mail transactions.  However, some limit\n   may\
    \ be appropriate to protect the host from devoting all its\n   resources to mail.\n"
- title: 4.5.4.2 Receiving Strategy
  contents:
  - "4.5.4.2 Receiving Strategy\n   The SMTP server SHOULD attempt to keep a pending\
    \ listen on the SMTP\n   port at all times.  This requires the support of multiple\
    \ incoming\n   TCP connections for SMTP.  Some limit MAY be imposed but servers\
    \ that\n   cannot handle more than one SMTP transaction at a time are not in\n\
    \   conformance with the intent of this specification.\n   As discussed above,\
    \ when the SMTP server receives mail from a\n   particular host address, it could\
    \ activate its own SMTP queuing\n   mechanisms to retry any mail pending for that\
    \ host address.\n"
- title: 4.5.5   Messages with a null reverse-path
  contents:
  - "4.5.5   Messages with a null reverse-path\n   There are several types of notification\
    \ messages which are required\n   by existing and proposed standards to be sent\
    \ with a null reverse\n   path, namely non-delivery notifications as discussed\
    \ in section 3.7,\n   other kinds of Delivery Status Notifications (DSNs) [24],\
    \ and also\n   Message Disposition Notifications (MDNs) [10].  All of these kinds\
    \ of\n   messages are notifications about a previous message, and they are\n \
    \  sent to the reverse-path of the previous mail message.  (If the\n   delivery\
    \ of such a notification message fails, that usually indicates\n   a problem with\
    \ the mail system of the host to which the notification\n   message is addressed.\
    \  For this reason, at some hosts the MTA is set\n   up to forward such failed\
    \ notification messages to someone who is\n   able to fix problems with the mail\
    \ system, e.g., via the postmaster\n   alias.)\n   All other types of messages\
    \ (i.e., any message which is not required\n   by a standards-track RFC to have\
    \ a null reverse-path) SHOULD be sent\n   with with a valid, non-null reverse-path.\n\
    \   Implementors of automated email processors should be careful to make\n   sure\
    \ that the various kinds of messages with null reverse-path are\n   handled correctly,\
    \ in particular such systems SHOULD NOT reply to\n   messages with null reverse-path.\n"
- title: 5. Address Resolution and Mail Handling
  contents:
  - "5. Address Resolution and Mail Handling\n   Once an SMTP client lexically identifies\
    \ a domain to which mail will\n   be delivered for processing (as described in\
    \ sections 3.6 and 3.7), a\n   DNS lookup MUST be performed to resolve the domain\
    \ name [22].  The\n   names are expected to be fully-qualified domain names (FQDNs):\n\
    \   mechanisms for inferring FQDNs from partial names or local aliases\n   are\
    \ outside of this specification and, due to a history of problems,\n   are generally\
    \ discouraged.  The lookup first attempts to locate an MX\n   record associated\
    \ with the name.  If a CNAME record is found instead,\n   the resulting name is\
    \ processed as if it were the initial name.  If\n   no MX records are found, but\
    \ an A RR is found, the A RR is treated as\n   if it was associated with an implicit\
    \ MX RR, with a preference of 0,\n   pointing to that host.  If one or more MX\
    \ RRs are found for a given\n   name, SMTP systems MUST NOT utilize any A RRs\
    \ associated with that\n   name unless they are located using the MX RRs; the\
    \ \"implicit MX\" rule\n   above applies only if there are no MX records present.\
    \  If MX records\n   are present, but none of them are usable, this situation\
    \ MUST be\n   reported as an error.\n   When the lookup succeeds, the mapping\
    \ can result in a list of\n   alternative delivery addresses rather than a single\
    \ address, because\n   of multiple MX records, multihoming, or both.  To provide\
    \ reliable\n   mail transmission, the SMTP client MUST be able to try (and retry)\n\
    \   each of the relevant addresses in this list in order, until a\n   delivery\
    \ attempt succeeds.  However, there MAY also be a configurable\n   limit on the\
    \ number of alternate addresses that can be tried.  In any\n   case, the SMTP\
    \ client SHOULD try at least two addresses.\n   Two types of information is used\
    \ to rank the host addresses: multiple\n   MX records, and multihomed hosts.\n\
    \   Multiple MX records contain a preference indication that MUST be used\n  \
    \ in sorting (see below).  Lower numbers are more preferred than higher\n   ones.\
    \  If there are multiple destinations with the same preference\n   and there is\
    \ no clear reason to favor one (e.g., by recognition of an\n   easily-reached\
    \ address), then the sender-SMTP MUST randomize them to\n   spread the load across\
    \ multiple mail exchangers for a specific\n   organization.\n   The destination\
    \ host (perhaps taken from the preferred MX record) may\n   be multihomed, in\
    \ which case the domain name resolver will return a\n   list of alternative IP\
    \ addresses.  It is the responsibility of the\n   domain name resolver interface\
    \ to have ordered this list by\n   decreasing preference if necessary, and SMTP\
    \ MUST try them in the\n   order presented.\n   Although the capability to try\
    \ multiple alternative addresses is\n   required, specific installations may want\
    \ to limit or disable the use\n   of alternative addresses.  The question of whether\
    \ a sender should\n   attempt retries using the different addresses of a multihomed\
    \ host\n   has been controversial.  The main argument for using the multiple\n\
    \   addresses is that it maximizes the probability of timely delivery,\n   and\
    \ indeed sometimes the probability of any delivery; the counter-\n   argument\
    \ is that it may result in unnecessary resource use.  Note\n   that resource use\
    \ is also strongly determined by the sending strategy\n   discussed in section\
    \ 4.5.4.1.\n   If an SMTP server receives a message with a destination for which\
    \ it\n   is a designated Mail eXchanger, it MAY relay the message (potentially\n\
    \   after having rewritten the MAIL FROM and/or RCPT TO addresses), make\n   final\
    \ delivery of the message, or hand it off using some mechanism\n   outside the\
    \ SMTP-provided transport environment.  Of course, neither\n   of the latter require\
    \ that the list of MX records be examined\n   further.\n   If it determines that\
    \ it should relay the message without rewriting\n   the address, it MUST sort\
    \ the MX records to determine candidates for\n   delivery.  The records are first\
    \ ordered by preference, with the\n   lowest-numbered records being most preferred.\
    \  The relay host MUST\n   then inspect the list for any of the names or addresses\
    \ by which it\n   might be known in mail transactions.  If a matching record is\
    \ found,\n   all records at that preference level and higher-numbered ones MUST\
    \ be\n   discarded from consideration.  If there are no records left at that\n\
    \   point, it is an error condition, and the message MUST be returned as\n   undeliverable.\
    \  If records do remain, they SHOULD be tried, best\n   preference first, as described\
    \ above.\n"
- title: 6. Problem Detection and Handling
  contents:
  - '6. Problem Detection and Handling

    '
- title: 6.1 Reliable Delivery and Replies by Email
  contents:
  - "6.1 Reliable Delivery and Replies by Email\n   When the receiver-SMTP accepts\
    \ a piece of mail (by sending a \"250 OK\"\n   message in response to DATA), it\
    \ is accepting responsibility for\n   delivering or relaying the message.  It\
    \ must take this responsibility\n   seriously.  It MUST NOT lose the message for\
    \ frivolous reasons, such\n   as because the host later crashes or because of\
    \ a predictable\n   resource shortage.\n   If there is a delivery failure after\
    \ acceptance of a message, the\n   receiver-SMTP MUST formulate and mail a notification\
    \ message.  This\n   notification MUST be sent using a null (\"<>\") reverse path\
    \ in the\n   envelope.  The recipient of this notification MUST be the address\n\
    \   from the envelope return path (or the Return-Path: line).  However,\n   if\
    \ this address is null (\"<>\"), the receiver-SMTP MUST NOT send a\n   notification.\
    \  Obviously, nothing in this section can or should\n   prohibit local decisions\
    \ (i.e., as part of the same system\n   environment as the receiver-SMTP) to log\
    \ or otherwise transmit\n   information about null address events locally if that\
    \ is desired.  If\n   the address is an explicit source route, it MUST be stripped\
    \ down to\n   its final hop.\n   For example, suppose that an error notification\
    \ must be sent for a\n   message that arrived with:\n      MAIL FROM:<@a,@b:user@d>\n\
    \   The notification message MUST be sent using:\n      RCPT TO:<user@d>\n   Some\
    \ delivery failures after the message is accepted by SMTP will be\n   unavoidable.\
    \  For example, it may be impossible for the receiving\n   SMTP server to validate\
    \ all the delivery addresses in RCPT command(s)\n   due to a \"soft\" domain system\
    \ error, because the target is a mailing\n   list (see earlier discussion of RCPT),\
    \ or because the server is\n   acting as a relay and has no immediate access to\
    \ the delivering\n   system.\n   To avoid receiving duplicate messages as the\
    \ result of timeouts, a\n   receiver-SMTP MUST seek to minimize the time required\
    \ to respond to\n   the final <CRLF>.<CRLF> end of data indicator.  See RFC 1047\
    \ [28] for\n   a discussion of this problem.\n"
- title: 6.2 Loop Detection
  contents:
  - "6.2 Loop Detection\n   Simple counting of the number of \"Received:\" headers\
    \ in a message has\n   proven to be an effective, although rarely optimal, method\
    \ of\n   detecting loops in mail systems.  SMTP servers using this technique\n\
    \   SHOULD use a large rejection threshold, normally at least 100\n   Received\
    \ entries.  Whatever mechanisms are used, servers MUST contain\n   provisions\
    \ for detecting and stopping trivial loops.\n"
- title: 6.3 Compensating for Irregularities
  contents:
  - "6.3 Compensating for Irregularities\n   Unfortunately, variations, creative interpretations,\
    \ and outright\n   violations of Internet mail protocols do occur; some would\
    \ suggest\n   that they occur quite frequently.  The debate as to whether a well-\n\
    \   behaved SMTP receiver or relay should reject a malformed message,\n   attempt\
    \ to pass it on unchanged, or attempt to repair it to increase\n   the odds of\
    \ successful delivery (or subsequent reply) began almost\n   with the dawn of\
    \ structured network mail and shows no signs of\n   abating.  Advocates of rejection\
    \ claim that attempted repairs are\n   rarely completely adequate and that rejection\
    \ of bad messages is the\n   only way to get the offending software repaired.\
    \  Advocates of\n   \"repair\" or \"deliver no matter what\" argue that users\
    \ prefer that\n   mail go through it if at all possible and that there are significant\n\
    \   market pressures in that direction.  In practice, these market\n   pressures\
    \ may be more important to particular vendors than strict\n   conformance to the\
    \ standards, regardless of the preference of the\n   actual developers.\n   The\
    \ problems associated with ill-formed messages were exacerbated by\n   the introduction\
    \ of the split-UA mail reading protocols [3, 26, 5,\n   21].  These protocols\
    \ have encouraged the use of SMTP as a posting\n   protocol, and SMTP servers\
    \ as relay systems for these client hosts\n   (which are often only intermittently\
    \ connected to the Internet).\n   Historically, many of those client machines\
    \ lacked some of the\n   mechanisms and information assumed by SMTP (and indeed,\
    \ by the mail\n   format protocol [7]).  Some could not keep adequate track of\
    \ time;\n   others had no concept of time zones; still others could not identify\n\
    \   their own names or addresses; and, of course, none could satisfy the\n   assumptions\
    \ that underlay RFC 822's conception of authenticated\n   addresses.\n   In response\
    \ to these weak SMTP clients, many SMTP systems now\n   complete messages that\
    \ are delivered to them in incomplete or\n   incorrect form.  This strategy is\
    \ generally considered appropriate\n   when the server can identify or authenticate\
    \ the client, and there\n   are prior agreements between them.  By contrast, there\
    \ is at best\n   great concern about fixes applied by a relay or delivery SMTP\
    \ server\n   that has little or no knowledge of the user or client machine.\n\
    \   The following changes to a message being processed MAY be applied\n   when\
    \ necessary by an originating SMTP server, or one used as the\n   target of SMTP\
    \ as an initial posting protocol:\n   -  Addition of a message-id field when none\
    \ appears\n   -  Addition of a date, time or time zone when none appears\n   -\
    \  Correction of addresses to proper FQDN format\n   The less information the\
    \ server has about the client, the less likely\n   these changes are to be correct\
    \ and the more caution and conservatism\n   should be applied when considering\
    \ whether or not to perform fixes\n   and how.  These changes MUST NOT be applied\
    \ by an SMTP server that\n   provides an intermediate relay function.\n   In all\
    \ cases, properly-operating clients supplying correct\n   information are preferred\
    \ to corrections by the SMTP server.  In all\n   cases, documentation of actions\
    \ performed by the servers (in trace\n   fields and/or header comments) is strongly\
    \ encouraged.\n"
- title: 7. Security Considerations
  contents:
  - '7. Security Considerations

    '
- title: 7.1 Mail Security and Spoofing
  contents:
  - "7.1 Mail Security and Spoofing\n   SMTP mail is inherently insecure in that it\
    \ is feasible for even\n   fairly casual users to negotiate directly with receiving\
    \ and relaying\n   SMTP servers and create messages that will trick a naive recipient\n\
    \   into believing that they came from somewhere else.  Constructing such\n  \
    \ a message so that the \"spoofed\" behavior cannot be detected by an\n   expert\
    \ is somewhat more difficult, but not sufficiently so as to be a\n   deterrent\
    \ to someone who is determined and knowledgeable.\n   Consequently, as knowledge\
    \ of Internet mail increases, so does the\n   knowledge that SMTP mail inherently\
    \ cannot be authenticated, or\n   integrity checks provided, at the transport\
    \ level.  Real mail\n   security lies only in end-to-end methods involving the\
    \ message\n   bodies, such as those which use digital signatures (see [14] and,\n\
    \   e.g., PGP [4] or S/MIME [31]).\n   Various protocol extensions and configuration\
    \ options that provide\n   authentication at the transport level (e.g., from an\
    \ SMTP client to\n   an SMTP server) improve somewhat on the traditional situation\n\
    \   described above.  However, unless they are accompanied by careful\n   handoffs\
    \ of responsibility in a carefully-designed trust environment,\n   they remain\
    \ inherently weaker than end-to-end mechanisms which use\n   digitally signed\
    \ messages rather than depending on the integrity of\n   the transport system.\n\
    \   Efforts to make it more difficult for users to set envelope return\n   path\
    \ and header \"From\" fields to point to valid addresses other than\n   their\
    \ own are largely misguided: they frustrate legitimate\n   applications in which\
    \ mail is sent by one user on behalf of another\n   or in which error (or normal)\
    \ replies should be directed to a special\n   address.  (Systems that provide\
    \ convenient ways for users to alter\n   these fields on a per-message basis should\
    \ attempt to establish a\n   primary and permanent mailbox address for the user\
    \ so that Sender\n   fields within the message data can be generated sensibly.)\n\
    \   This specification does not further address the authentication issues\n  \
    \ associated with SMTP other than to advocate that useful functionality\n   not\
    \ be disabled in the hope of providing some small margin of\n   protection against\
    \ an ignorant user who is trying to fake mail.\n"
- title: 7.2 "Blind" Copies
  contents:
  - "7.2 \"Blind\" Copies\n   Addresses that do not appear in the message headers\
    \ may appear in the\n   RCPT commands to an SMTP server for a number of reasons.\
    \  The two\n   most common involve the use of a mailing address as a \"list exploder\"\
    \n   (a single address that resolves into multiple addresses) and the\n   appearance\
    \ of \"blind copies\".  Especially when more than one RCPT\n   command is present,\
    \ and in order to avoid defeating some of the\n   purpose of these mechanisms,\
    \ SMTP clients and servers SHOULD NOT copy\n   the full set of RCPT command arguments\
    \ into the headers, either as\n   part of trace headers or as informational or\
    \ private-extension\n   headers.  Since this rule is often violated in practice,\
    \ and cannot\n   be enforced, sending SMTP systems that are aware of \"bcc\" use\
    \ MAY\n   find it helpful to send each blind copy as a separate message\n   transaction\
    \ containing only a single RCPT command.\n   There is no inherent relationship\
    \ between either \"reverse\" (from\n   MAIL, SAML, etc., commands) or \"forward\"\
    \ (RCPT) addresses in the SMTP\n   transaction (\"envelope\") and the addresses\
    \ in the headers.  Receiving\n   systems SHOULD NOT attempt to deduce such relationships\
    \ and use them\n   to alter the headers of the message for delivery.  The popular\n\
    \   \"Apparently-to\" header is a violation of this principle as well as a\n \
    \  common source of unintended information disclosure and SHOULD NOT be\n   used.\n"
- title: 7.3 VRFY, EXPN, and Security
  contents:
  - "7.3 VRFY, EXPN, and Security\n   As discussed in section 3.5, individual sites\
    \ may want to disable\n   either or both of VRFY or EXPN for security reasons.\
    \  As a corollary\n   to the above, implementations that permit this MUST NOT\
    \ appear to\n   have verified addresses that are not, in fact, verified.  If a\
    \ site\n   disables these commands for security reasons, the SMTP server MUST\n\
    \   return a 252 response, rather than a code that could be confused with\n  \
    \ successful or unsuccessful verification.\n   Returning a 250 reply code with\
    \ the address listed in the VRFY\n   command after having checked it only for\
    \ syntax violates this rule.\n   Of course, an implementation that \"supports\"\
    \ VRFY by always returning\n   550 whether or not the address is valid is equally\
    \ not in\n   conformance.\n   Within the last few years, the contents of mailing\
    \ lists have become\n   popular as an address information source for so-called\
    \ \"spammers.\"\n   The use of EXPN to \"harvest\" addresses has increased as\
    \ list\n   administrators have installed protections against inappropriate uses\n\
    \   of the lists themselves.  Implementations SHOULD still provide\n   support\
    \ for EXPN, but sites SHOULD carefully evaluate the tradeoffs.\n   As authentication\
    \ mechanisms are introduced into SMTP, some sites may\n   choose to make EXPN\
    \ available only to authenticated requestors.\n"
- title: 7.4 Information Disclosure in Announcements
  contents:
  - "7.4 Information Disclosure in Announcements\n   There has been an ongoing debate\
    \ about the tradeoffs between the\n   debugging advantages of announcing server\
    \ type and version (and,\n   sometimes, even server domain name) in the greeting\
    \ response or in\n   response to the HELP command and the disadvantages of exposing\n\
    \   information that might be useful in a potential hostile attack.  The\n   utility\
    \ of the debugging information is beyond doubt.  Those who\n   argue for making\
    \ it available point out that it is far better to\n   actually secure an SMTP\
    \ server rather than hope that trying to\n   conceal known vulnerabilities by\
    \ hiding the server's precise identity\n   will provide more protection.  Sites\
    \ are encouraged to evaluate the\n   tradeoff with that issue in mind; implementations\
    \ are strongly\n   encouraged to minimally provide for making type and version\n\
    \   information available in some way to other network hosts.\n"
- title: 7.5 Information Disclosure in Trace Fields
  contents:
  - "7.5 Information Disclosure in Trace Fields\n   In some circumstances, such as\
    \ when mail originates from within a LAN\n   whose hosts are not directly on the\
    \ public Internet, trace\n   (\"Received\") fields produced in conformance with\
    \ this specification\n   may disclose host names and similar information that\
    \ would not\n   normally be available.  This ordinarily does not pose a problem,\
    \ but\n   sites with special concerns about name disclosure should be aware of\n\
    \   it.  Also, the optional FOR clause should be supplied with caution or\n  \
    \ not at all when multiple recipients are involved lest it\n   inadvertently disclose\
    \ the identities of \"blind copy\" recipients to\n   others.\n"
- title: 7.6 Information Disclosure in Message Forwarding
  contents:
  - "7.6 Information Disclosure in Message Forwarding\n   As discussed in section\
    \ 3.4, use of the 251 or 551 reply codes to\n   identify the replacement address\
    \ associated with a mailbox may\n   inadvertently disclose sensitive information.\
    \  Sites that are\n   concerned about those issues should ensure that they select\
    \ and\n   configure servers appropriately.\n"
- title: 7.7 Scope of Operation of SMTP Servers
  contents:
  - "7.7 Scope of Operation of SMTP Servers\n   It is a well-established principle\
    \ that an SMTP server may refuse to\n   accept mail for any operational or technical\
    \ reason that makes sense\n   to the site providing the server.  However, cooperation\
    \ among sites\n   and installations makes the Internet possible.  If sites take\n\
    \   excessive advantage of the right to reject traffic, the ubiquity of\n   email\
    \ availability (one of the strengths of the Internet) will be\n   threatened;\
    \ considerable care should be taken and balance maintained\n   if a site decides\
    \ to be selective about the traffic it will accept\n   and process.\n   In recent\
    \ years, use of the relay function through arbitrary sites\n   has been used as\
    \ part of hostile efforts to hide the actual origins\n   of mail.  Some sites\
    \ have decided to limit the use of the relay\n   function to known or identifiable\
    \ sources, and implementations SHOULD\n   provide the capability to perform this\
    \ type of filtering.  When mail\n   is rejected for these or other policy reasons,\
    \ a 550 code SHOULD be\n   used in response to EHLO, MAIL, or RCPT as appropriate.\n"
- title: 8. IANA Considerations
  contents:
  - "8. IANA Considerations\n   IANA will maintain three registries in support of\
    \ this specification.\n   The first consists of SMTP service extensions with the\
    \ associated\n   keywords, and, as needed, parameters and verbs.  As specified\
    \ in\n   section 2.2.2, no entry may be made in this registry that starts in\n\
    \   an \"X\".  Entries may be made only for service extensions (and\n   associated\
    \ keywords, parameters, or verbs) that are defined in\n   standards-track or experimental\
    \ RFCs specifically approved by the\n   IESG for this purpose.\n   The second\
    \ registry consists of \"tags\" that identify forms of domain\n   literals other\
    \ than those for IPv4 addresses (specified in RFC 821\n   and in this document)\
    \ and IPv6 addresses (specified in this\n   document).  Additional literal types\
    \ require standardization before\n   being used; none are anticipated at this\
    \ time.\n   The third, established by RFC 821 and renewed by this specification,\n\
    \   is a registry of link and protocol identifiers to be used with the\n   \"\
    via\" and \"with\" subclauses of the time stamp (\"Received: header\")\n   described\
    \ in section 4.4.  Link and protocol identifiers in addition\n   to those specified\
    \ in this document may be registered only by\n   standardization or by way of\
    \ an RFC-documented, IESG-approved,\n   Experimental protocol extension.\n"
- title: 9. References
  contents:
  - "9. References\n   [1]  American National Standards Institute (formerly United\
    \ States of\n        America Standards Institute), X3.4, 1968, \"USA Code for\n\
    \        Information Interchange\". ANSI X3.4-1968 has been replaced by\n    \
    \    newer versions with slight modifications, but the 1968 version\n        remains\
    \ definitive for the Internet.\n   [2]  Braden, R., \"Requirements for Internet\
    \ hosts - application and\n        support\", STD 3, RFC 1123, October 1989.\n\
    \   [3]  Butler, M., Chase, D., Goldberger, J., Postel, J. and J.\n        Reynolds,\
    \ \"Post Office Protocol - version 2\", RFC 937, February\n        1985.\n   [4]\
    \  Callas, J., Donnerhacke, L., Finney, H. and R. Thayer, \"OpenPGP\n        Message\
    \ Format\", RFC 2440, November 1998.\n   [5]  Crispin, M., \"Interactive Mail\
    \ Access Protocol - Version 2\", RFC\n        1176, August 1990.\n   [6]  Crispin,\
    \ M., \"Internet Message Access Protocol - Version 4\", RFC\n        2060, December\
    \ 1996.\n   [7]  Crocker, D., \"Standard for the Format of ARPA Internet Text\n\
    \        Messages\", RFC 822, August 1982.\n   [8]  Crocker, D. and P. Overell,\
    \ Eds., \"Augmented BNF for Syntax\n        Specifications: ABNF\", RFC 2234,\
    \ November 1997.\n   [9]  De Winter, J., \"SMTP Service Extension for Remote Message\
    \ Queue\n        Starting\", RFC 1985, August 1996.\n   [10] Fajman, R., \"An\
    \ Extensible Message Format for Message\n        Disposition Notifications\",\
    \ RFC 2298, March 1998.\n   [11] Freed, N, \"Behavior of and Requirements for\
    \ Internet Firewalls\",\n        RFC 2979, October 2000.\n   [12] Freed, N. and\
    \ N. Borenstein, \"Multipurpose Internet Mail\n        Extensions (MIME) Part\
    \ One: Format of Internet Message Bodies\",\n        RFC 2045, December 1996.\n\
    \   [13] Freed, N., \"SMTP Service Extension for Command Pipelining\", RFC\n \
    \       2920, September 2000.\n   [14] Galvin, J., Murphy, S., Crocker, S. and\
    \ N. Freed, \"Security\n        Multiparts for MIME: Multipart/Signed and Multipart/Encrypted\"\
    ,\n        RFC 1847, October 1995.\n   [15] Gellens, R. and J. Klensin, \"Message\
    \ Submission\", RFC 2476,\n        December 1998.\n   [16] Kille, S., \"Mapping\
    \ between X.400 and RFC822/MIME\", RFC 2156,\n        January 1998.\n   [17] Hinden,\
    \ R and S. Deering, Eds. \"IP Version 6 Addressing\n        Architecture\", RFC\
    \ 2373, July 1998.\n   [18] Klensin, J., Freed, N. and K. Moore, \"SMTP Service\
    \ Extension for\n        Message Size Declaration\", STD 10, RFC 1870, November\
    \ 1995.\n   [19] Klensin, J., Freed, N., Rose, M., Stefferud, E. and D. Crocker,\n\
    \        \"SMTP Service Extensions\", STD 10, RFC 1869, November 1995.\n   [20]\
    \ Klensin, J., Freed, N., Rose, M., Stefferud, E. and D. Crocker,\n        \"\
    SMTP Service Extension for 8bit-MIMEtransport\", RFC 1652, July\n        1994.\n\
    \   [21] Lambert, M., \"PCMAIL: A distributed mail system for personal\n     \
    \   computers\", RFC 1056, July 1988.\n   [22] Mockapetris, P., \"Domain names\
    \ - implementation and\n        specification\", STD 13, RFC 1035, November 1987.\n\
    \        Mockapetris, P., \"Domain names - concepts and facilities\", STD\n  \
    \      13, RFC 1034, November 1987.\n   [23] Moore, K., \"MIME (Multipurpose Internet\
    \ Mail Extensions) Part\n        Three: Message Header Extensions for Non-ASCII\
    \ Text\", RFC 2047,\n        December 1996.\n   [24] Moore, K., \"SMTP Service\
    \ Extension for Delivery Status\n        Notifications\", RFC 1891, January 1996.\n\
    \   [25] Moore, K., and G. Vaudreuil, \"An Extensible Message Format for\n   \
    \     Delivery Status Notifications\", RFC 1894, January 1996.\n   [26] Myers,\
    \ J. and M. Rose, \"Post Office Protocol - Version 3\", STD\n        53, RFC 1939,\
    \ May 1996.\n   [27] Partridge, C., \"Mail routing and the domain system\", RFC\
    \ 974,\n        January 1986.\n   [28] Partridge, C., \"Duplicate messages and\
    \ SMTP\", RFC 1047, February\n        1988.\n   [29] Postel, J., ed., \"Transmission\
    \ Control Protocol - DARPA Internet\n        Program Protocol Specification\"\
    , STD 7, RFC 793, September 1981.\n   [30] Postel, J., \"Simple Mail Transfer\
    \ Protocol\", RFC 821, August\n        1982.\n   [31] Ramsdell, B., Ed., \"S/MIME\
    \ Version 3 Message Specification\", RFC\n        2633, June 1999.\n   [32] Resnick,\
    \ P., Ed., \"Internet Message Format\", RFC 2822, April\n        2001.\n   [33]\
    \ Vaudreuil, G., \"SMTP Service Extensions for Transmission of\n        Large\
    \ and Binary MIME Messages\", RFC 1830, August 1995.\n   [34] Vaudreuil, G., \"\
    Enhanced Mail System Status Codes\", RFC 1893,\n        January 1996.\n"
- title: 10. Editor's Address
  contents:
  - "10. Editor's Address\n   John C. Klensin\n   AT&T Laboratories\n   99 Bedford\
    \ St\n   Boston, MA 02111 USA\n   Phone: 617-574-3076\n   EMail: klensin@research.att.com\n"
- title: 11. Acknowledgments
  contents:
  - "11. Acknowledgments\n   Many people worked long and hard on the many iterations\
    \ of this\n   document.  There was wide-ranging debate in the IETF DRUMS Working\n\
    \   Group, both on its mailing list and in face to face discussions,\n   about\
    \ many technical issues and the role of a revised standard for\n   Internet mail\
    \ transport, and many contributors helped form the\n   wording in this specification.\
    \  The hundreds of participants in the\n   many discussions since RFC 821 was\
    \ produced are too numerous to\n   mention, but they all helped this document\
    \ become what it is.\n"
- title: APPENDICES
  contents:
  - 'APPENDICES

    '
- title: A. TCP Transport Service
  contents:
  - "A. TCP Transport Service\n   The TCP connection supports the transmission of\
    \ 8-bit bytes.  The\n   SMTP data is 7-bit ASCII characters.  Each character is\
    \ transmitted\n   as an 8-bit byte with the high-order bit cleared to zero.  Service\n\
    \   extensions may modify this rule to permit transmission of full 8-bit\n   data\
    \ bytes as part of the message body, but not in SMTP commands or\n   responses.\n"
- title: B. Generating SMTP Commands from RFC 822 Headers
  contents:
  - "B. Generating SMTP Commands from RFC 822 Headers\n   Some systems use RFC 822\
    \ headers (only) in a mail submission\n   protocol, or otherwise generate SMTP\
    \ commands from RFC 822 headers\n   when such a message is handed to an MTA from\
    \ a UA.  While the MTA-UA\n   protocol is a private matter, not covered by any\
    \ Internet Standard,\n   there are problems with this approach.  For example,\
    \ there have been\n   repeated problems with proper handling of \"bcc\" copies\
    \ and\n   redistribution lists when information that conceptually belongs to a\n\
    \   mail envelopes is not separated early in processing from header\n   information\
    \ (and kept separate).\n   It is recommended that the UA provide its initial (\"\
    submission\n   client\") MTA with an envelope separate from the message itself.\n\
    \   However, if the envelope is not supplied, SMTP commands SHOULD be\n   generated\
    \ as follows:\n   1. Each recipient address from a TO, CC, or BCC header field\
    \ SHOULD\n      be copied to a RCPT command (generating multiple message copies\
    \ if\n      that is required for queuing or delivery).  This includes any\n  \
    \    addresses listed in a RFC 822 \"group\".  Any BCC fields SHOULD then\n  \
    \    be removed from the headers.  Once this process is completed, the\n     \
    \ remaining headers SHOULD be checked to verify that at least one\n      To:,\
    \ Cc:, or Bcc: header remains.  If none do, then a bcc: header\n      with no\
    \ additional information SHOULD be inserted as specified in\n      [32].\n   2.\
    \ The return address in the MAIL command SHOULD, if possible, be\n      derived\
    \ from the system's identity for the submitting (local)\n      user, and the \"\
    From:\" header field otherwise.  If there is a\n      system identity available,\
    \ it SHOULD also be copied to the Sender\n      header field if it is different\
    \ from the address in the From\n      header field.  (Any Sender field that was\
    \ already there SHOULD be\n      removed.)  Systems may provide a way for submitters\
    \ to override\n      the envelope return address, but may want to restrict its\
    \ use to\n      privileged users.  This will not prevent mail forgery, but may\n\
    \      lessen its incidence; see section 7.1.\n   When an MTA is being used in\
    \ this way, it bears responsibility for\n   ensuring that the message being transmitted\
    \ is valid.  The mechanisms\n   for checking that validity, and for handling (or\
    \ returning) messages\n   that are not valid at the time of arrival, are part\
    \ of the MUA-MTA\n   interface and not covered by this specification.\n   A submission\
    \ protocol based on Standard RFC 822 information alone\n   MUST NOT be used to\
    \ gateway a message from a foreign (non-SMTP) mail\n   system into an SMTP environment.\
    \  Additional information to construct\n   an envelope must come from some source\
    \ in the other environment,\n   whether supplemental headers or the foreign system's\
    \ envelope.\n   Attempts to gateway messages using only their header \"to\" and\
    \ \"cc\"\n   fields have repeatedly caused mail loops and other behavior adverse\n\
    \   to the proper functioning of the Internet mail environment.  These\n   problems\
    \ have been especially common when the message originates from\n   an Internet\
    \ mailing list and is distributed into the foreign\n   environment using envelope\
    \ information.  When these messages are then\n   processed by a header-only remailer,\
    \ loops back to the Internet\n   environment (and the mailing list) are almost\
    \ inevitable.\n"
- title: C. Source Routes
  contents:
  - "C. Source Routes\n   Historically, the <reverse-path> was a reverse source routing\
    \ list of\n   hosts and a source mailbox.  The first host in the <reverse-path>\n\
    \   SHOULD be the host sending the MAIL command.  Similarly, the\n   <forward-path>\
    \ may be a source routing lists of hosts and a\n   destination mailbox.  However,\
    \ in general, the <forward-path> SHOULD\n   contain only a mailbox and domain\
    \ name, relying on the domain name\n   system to supply routing information if\
    \ required.  The use of source\n   routes is deprecated; while servers MUST be\
    \ prepared to receive and\n   handle them as discussed in section 3.3 and F.2,\
    \ clients SHOULD NOT\n   transmit them and this section was included only to provide\
    \ context.\n   For relay purposes, the forward-path may be a source route of the\n\
    \   form \"@ONE,@TWO:JOE@THREE\", where ONE, TWO, and THREE MUST BE fully-\n \
    \  qualified domain names.  This form is used to emphasize the\n   distinction\
    \ between an address and a route.  The mailbox is an\n   absolute address, and\
    \ the route is information about how to get\n   there.  The two concepts should\
    \ not be confused.\n   If source routes are used, RFC 821 and the text below should\
    \ be\n   consulted for the mechanisms for constructing and updating the\n   forward-\
    \ and reverse-paths.\n   The SMTP server transforms the command arguments by moving\
    \ its own\n   identifier (its domain name or that of any domain for which it is\n\
    \   acting as a mail exchanger), if it appears, from the forward-path to\n   the\
    \ beginning of the reverse-path.\n   Notice that the forward-path and reverse-path\
    \ appear in the SMTP\n   commands and replies, but not necessarily in the message.\
    \  That is,\n   there is no need for these paths and especially this syntax to\
    \ appear\n   in the \"To:\" , \"From:\", \"CC:\", etc. fields of the message header.\n\
    \   Conversely, SMTP servers MUST NOT derive final message delivery\n   information\
    \ from message header fields.\n   When the list of hosts is present, it is a \"\
    reverse\" source route and\n   indicates that the mail was relayed through each\
    \ host on the list\n   (the first host in the list was the most recent relay).\
    \  This list is\n   used as a source route to return non-delivery notices to the\
    \ sender.\n   As each relay host adds itself to the beginning of the list, it\
    \ MUST\n   use its name as known in the transport environment to which it is\n\
    \   relaying the mail rather than that of the transport environment from\n   which\
    \ the mail came (if they are different).\n"
- title: D. Scenarios
  contents:
  - "D. Scenarios\n   This section presents complete scenarios of several types of\
    \ SMTP\n   sessions.  In the examples, \"C:\" indicates what is said by the SMTP\n\
    \   client, and \"S:\" indicates what is said by the SMTP server.\n"
- title: D.1 A Typical SMTP Transaction Scenario
  contents:
  - "D.1 A Typical SMTP Transaction Scenario\n   This SMTP example shows mail sent\
    \ by Smith at host bar.com, to Jones,\n   Green, and Brown at host foo.com.  Here\
    \ we assume that host bar.com\n   contacts host foo.com directly.  The mail is\
    \ accepted for Jones and\n   Brown.  Green does not have a mailbox at host foo.com.\n\
    \      S: 220 foo.com Simple Mail Transfer Service Ready\n      C: EHLO bar.com\n\
    \      S: 250-foo.com greets bar.com\n      S: 250-8BITMIME\n      S: 250-SIZE\n\
    \      S: 250-DSN\n      S: 250 HELP\n      C: MAIL FROM:<Smith@bar.com>\n   \
    \   S: 250 OK\n      C: RCPT TO:<Jones@foo.com>\n      S: 250 OK\n      C: RCPT\
    \ TO:<Green@foo.com>\n      S: 550 No such user here\n      C: RCPT TO:<Brown@foo.com>\n\
    \      S: 250 OK\n      C: DATA\n      S: 354 Start mail input; end with <CRLF>.<CRLF>\n\
    \      C: Blah blah blah...\n      C: ...etc. etc. etc.\n      C: .\n      S:\
    \ 250 OK\n      C: QUIT\n      S: 221 foo.com Service closing transmission channel\n"
- title: D.2 Aborted SMTP Transaction Scenario
  contents:
  - "D.2 Aborted SMTP Transaction Scenario\n      S: 220 foo.com Simple Mail Transfer\
    \ Service Ready\n      C: EHLO bar.com\n      S: 250-foo.com greets bar.com\n\
    \      S: 250-8BITMIME\n      S: 250-SIZE\n      S: 250-DSN\n      S: 250 HELP\n\
    \      C: MAIL FROM:<Smith@bar.com>\n      S: 250 OK\n      C: RCPT TO:<Jones@foo.com>\n\
    \      S: 250 OK\n      C: RCPT TO:<Green@foo.com>\n      S: 550 No such user\
    \ here\n      C: RSET\n      S: 250 OK\n      C: QUIT\n      S: 221 foo.com Service\
    \ closing transmission channel\n"
- title: D.3 Relayed Mail Scenario
  contents:
  - "D.3 Relayed Mail Scenario\n   Step 1  --  Source Host to Relay Host\n      S:\
    \ 220 foo.com Simple Mail Transfer Service Ready\n      C: EHLO bar.com\n    \
    \  S: 250-foo.com greets bar.com\n      S: 250-8BITMIME\n      S: 250-SIZE\n \
    \     S: 250-DSN\n      S: 250 HELP\n      C: MAIL FROM:<JQP@bar.com>\n      S:\
    \ 250 OK\n      C: RCPT TO:<@foo.com:Jones@XYZ.COM>\n      S: 250 OK\n      C:\
    \ DATA\n      S: 354 Start mail input; end with <CRLF>.<CRLF>\n      C: Date:\
    \ Thu, 21 May 1998 05:33:29 -0700\n      C: From: John Q. Public <JQP@bar.com>\n\
    \      C: Subject:  The Next Meeting of the Board\n      C: To: Jones@xyz.com\n\
    \      C:\n      C: Bill:\n      C: The next meeting of the board of directors\
    \ will be\n      C: on Tuesday.\n      C:                         John.\n    \
    \  C: .\n      S: 250 OK\n      C: QUIT\n      S: 221 foo.com Service closing\
    \ transmission channel\n   Step 2  --  Relay Host to Destination Host\n      S:\
    \ 220 xyz.com Simple Mail Transfer Service Ready\n      C: EHLO foo.com\n    \
    \  S: 250 xyz.com is on the air\n      C: MAIL FROM:<@foo.com:JQP@bar.com>\n \
    \     S: 250 OK\n      C: RCPT TO:<Jones@XYZ.COM>\n      S: 250 OK\n      C: DATA\n\
    \      S: 354 Start mail input; end with <CRLF>.<CRLF>\n      C: Received: from\
    \ bar.com by foo.com ; Thu, 21 May 1998\n      C:     05:33:29 -0700\n      C:\
    \ Date: Thu, 21 May 1998 05:33:22 -0700\n      C: From: John Q. Public <JQP@bar.com>\n\
    \      C: Subject:  The Next Meeting of the Board\n      C: To: Jones@xyz.com\n\
    \      C:\n      C: Bill:\n      C: The next meeting of the board of directors\
    \ will be\n      C: on Tuesday.\n      C:                         John.\n    \
    \  C: .\n      S: 250 OK\n      C: QUIT\n      S: 221 foo.com Service closing\
    \ transmission channel\n"
- title: D.4 Verifying and Sending Scenario
  contents:
  - "D.4 Verifying and Sending Scenario\n      S: 220 foo.com Simple Mail Transfer\
    \ Service Ready\n      C: EHLO bar.com\n      S: 250-foo.com greets bar.com\n\
    \      S: 250-8BITMIME\n      S: 250-SIZE\n      S: 250-DSN\n      S: 250-VRFY\n\
    \      S: 250 HELP\n      C: VRFY Crispin\n      S: 250 Mark Crispin <Admin.MRC@foo.com>\n\
    \      C: SEND FROM:<EAK@bar.com>\n      S: 250 OK\n      C: RCPT TO:<Admin.MRC@foo.com>\n\
    \      S: 250 OK\n      C: DATA\n      S: 354 Start mail input; end with <CRLF>.<CRLF>\n\
    \      C: Blah blah blah...\n      C: ...etc. etc. etc.\n      C: .\n      S:\
    \ 250 OK\n      C: QUIT\n      S: 221 foo.com Service closing transmission channel\n"
- title: E. Other Gateway Issues
  contents:
  - "E. Other Gateway Issues\n   In general, gateways between the Internet and other\
    \ mail systems\n   SHOULD attempt to preserve any layering semantics across the\n\
    \   boundaries between the two mail systems involved.  Gateway-\n   translation\
    \ approaches that attempt to take shortcuts by mapping,\n   (such as envelope\
    \ information from one system to the message headers\n   or body of another) have\
    \ generally proven to be inadequate in\n   important ways.  Systems translating\
    \ between environments that do not\n   support both envelopes and headers and\
    \ Internet mail must be written\n   with the understanding that some information\
    \ loss is almost\n   inevitable.\n"
- title: F. Deprecated Features of RFC 821
  contents:
  - "F. Deprecated Features of RFC 821\n   A few features of RFC 821 have proven to\
    \ be problematic and SHOULD\n   NOT be used in Internet mail.\n"
- title: F.1 TURN
  contents:
  - "F.1 TURN\n   This command, described in RFC 821, raises important security issues\n\
    \   since, in the absence of strong authentication of the host requesting\n  \
    \ that the client and server switch roles, it can easily be used to\n   divert\
    \ mail from its correct destination.  Its use is deprecated;\n   SMTP systems\
    \ SHOULD NOT use it unless the server can authenticate the\n   client.\n"
- title: F.2 Source Routing
  contents:
  - "F.2 Source Routing\n   RFC 821 utilized the concept of explicit source routing\
    \ to get mail\n   from one host to another via a series of relays.  The requirement\
    \ to\n   utilize source routes in regular mail traffic was eliminated by the\n\
    \   introduction of the domain name system \"MX\" record and the last\n   significant\
    \ justification for them was eliminated by the\n   introduction, in RFC 1123,\
    \ of a clear requirement that addresses\n   following an \"@\" must all be fully-qualified\
    \ domain names.\n   Consequently, the only remaining justifications for the use\
    \ of source\n   routes are support for very old SMTP clients or MUAs and in mail\n\
    \   system debugging.  They can, however, still be useful in the latter\n   circumstance\
    \ and for routing mail around serious, but temporary,\n   problems such as problems\
    \ with the relevant DNS records.\n   SMTP servers MUST continue to accept source\
    \ route syntax as specified\n   in the main body of this document and in RFC 1123.\
    \  They MAY, if\n   necessary, ignore the routes and utilize only the target domain\
    \ in\n   the address.  If they do utilize the source route, the message MUST\n\
    \   be sent to the first domain shown in the address.  In particular, a\n   server\
    \ MUST NOT guess at shortcuts within the source route.\n   Clients SHOULD NOT\
    \ utilize explicit source routing except under\n   unusual circumstances, such\
    \ as debugging or potentially relaying\n   around firewall or mail system configuration\
    \ errors.\n"
- title: F.3 HELO
  contents:
  - "F.3 HELO\n   As discussed in sections 3.1 and 4.1.1, EHLO is strongly preferred\
    \ to\n   HELO when the server will accept the former.  Servers must continue\n\
    \   to accept and process HELO in order to support older clients.\n"
- title: 'F.4 #-literals'
  contents:
  - "F.4 #-literals\n   RFC 821 provided for specifying an Internet address as a decimal\n\
    \   integer host number prefixed by a pound sign, \"#\".  In practice, that\n\
    \   form has been obsolete since the introduction of TCP/IP.  It is\n   deprecated\
    \ and MUST NOT be used.\n"
- title: F.5 Dates and Years
  contents:
  - "F.5 Dates and Years\n   When dates are inserted into messages by SMTP clients\
    \ or servers\n   (e.g., in trace fields), four-digit years MUST BE used.  Two-digit\n\
    \   years are deprecated; three-digit years were never permitted in the\n   Internet\
    \ mail system.\n"
- title: F.6 Sending versus Mailing
  contents:
  - "F.6 Sending versus Mailing\n   In addition to specifying a mechanism for delivering\
    \ messages to\n   user's mailboxes, RFC 821 provided additional, optional, commands\
    \ to\n   deliver messages directly to the user's terminal screen.  These\n   commands\
    \ (SEND, SAML, SOML) were rarely implemented, and changes in\n   workstation technology\
    \ and the introduction of other protocols may\n   have rendered them obsolete\
    \ even where they are implemented.\n   Clients SHOULD NOT provide SEND, SAML,\
    \ or SOML as services.  Servers\n   MAY implement them.  If they are implemented\
    \ by servers, the\n   implementation model specified in RFC 821 MUST be used and\
    \ the\n   command names MUST be published in the response to the EHLO command.\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2001).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
