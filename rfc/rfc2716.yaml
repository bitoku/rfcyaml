- title: __initial_text__
  contents:
  - ''
- title: 'Requests for Commments: 2716                                     D. Simon'
  contents:
  - "Requests for Commments: 2716                                     D. Simon\n \
    \                 PPP EAP TLS Authentication Protocol\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo defines an Experimental Protocol for the Internet\n\
    \   community.  It does not specify an Internet standard of any kind.\n   Discussion\
    \ and suggestions for improvement are requested.\n   Distribution of this memo\
    \ is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1999).  All Rights Reserved.\n"
- title: 1.  Abstract
  contents:
  - "1.  Abstract\n   The Point-to-Point Protocol (PPP) provides a standard method\
    \ for\n   transporting multi-protocol datagrams over point-to-point links.  PPP\n\
    \   also defines an extensible Link Control Protocol (LCP), which can be\n   used\
    \ to negotiate authentication methods, as well as an Encryption\n   Control Protocol\
    \ (ECP), used to negotiate data encryption over PPP\n   links, and a Compression\
    \ Control Protocol (CCP), used to negotiate\n   compression methods.  The Extensible\
    \ Authentication Protocol (EAP) is\n   a PPP extension that provides support for\
    \ additional authentication\n   methods within PPP.\n   Transport Level Security\
    \ (TLS) provides for mutual authentication,\n   integrity-protected ciphersuite\
    \ negotiation and key exchange between\n   two endpoints.  This document describes\
    \ how EAP-TLS, which includes\n   support for fragmentation and reassembly, provides\
    \ for these TLS\n   mechanisms within EAP.\n"
- title: 2.  Introduction
  contents:
  - "2.  Introduction\n   The Extensible Authentication Protocol (EAP), described\
    \ in [5],\n   provides a standard mechanism for support of additional\n   authentication\
    \ methods within PPP.  Through the use of EAP, support\n   for a number of authentication\
    \ schemes may be added, including smart\n   cards, Kerberos, Public Key, One Time\
    \ Passwords, and others. To date\n   however, EAP methods such as [6] have focussed\
    \ on authenticating a\n   client to a server.\n   However, it may be desirable\
    \ to support mutual authentication, and\n   since PPP encryption protocols such\
    \ as [9] and [10] assume existence\n   of a session key, it is useful to have\
    \ a mechanism for session key\n   establishment. Since design of secure key management\
    \ protocols is\n   non-trivial, it is desirable to avoid creating new mechanisms\
    \ for\n   this. The EAP protocol described in this document allows a PPP peer\n\
    \   to take advantage of the protected ciphersuite negotiation, mutual\n   authentication\
    \ and key management capabilities of the TLS protocol,\n   described in [12].\n"
- title: 2.1.  Requirements language
  contents:
  - "2.1.  Requirements language\n   In this document, the key words \"MAY\", \"MUST,\
    \ \"MUST NOT\", \"optional\",\n   \"recommended\", \"SHOULD\", and \"SHOULD NOT\"\
    , are to be interpreted as\n   described in [11].\n"
- title: 3.  Protocol overview
  contents:
  - '3.  Protocol overview

    '
- title: 3.1.  Overview of the EAP-TLS conversation
  contents:
  - "3.1.  Overview of the EAP-TLS conversation\n   As described in [5], the EAP-TLS\
    \ conversation will typically begin\n   with the authenticator and the peer negotiating\
    \ EAP.  The\n   authenticator will then typically send an EAP-Request/Identity\
    \ packet\n   to the peer, and the peer will respond with an EAP-Response/Identity\n\
    \   packet to the authenticator, containing the peer's userId.\n   From this point\
    \ forward, while nominally the EAP conversation occurs\n   between the PPP authenticator\
    \ and the peer, the authenticator MAY act\n   as a passthrough device, with the\
    \ EAP packets received from the peer\n   being encapsulated for transmission to\
    \ a RADIUS server or backend\n   security server. In the discussion that follows,\
    \ we will use the term\n   \"EAP server\" to denote the ultimate endpoint conversing\
    \ with the\n   peer.\n   Once having received the peer's Identity, the EAP server\
    \ MUST respond\n   with an EAP-TLS/Start packet, which is an EAP-Request packet\
    \ with\n   EAP-Type=EAP-TLS, the Start (S) bit set, and no data.  The EAP-TLS\n\
    \   conversation will then begin, with the peer sending an EAP-Response\n   packet\
    \ with EAP-Type=EAP-TLS.  The data field of that packet will\n   encapsulate one\
    \ or more TLS records in TLS record layer format,\n   containing a TLS client_hello\
    \ handshake message.  The current cipher\n   spec for the TLS records will be\
    \ TLS_NULL_WITH_NULL_NULL and null\n   compression.  This current cipher spec\
    \ remains the same until the\n   change_cipher_spec message signals that subsequent\
    \ records will have\n   the negotiated attributes for the remainder of the handshake.\n\
    \   The client_hello message contains the client's TLS version number, a\n   sessionId,\
    \ a random number, and a set of ciphersuites supported by\n   the client. The\
    \ version offered by the client MUST correspond to TLS\n   v1.0 or later.\n  \
    \ The EAP server will then respond with an EAP-Request packet with\n   EAP-Type=EAP-TLS.\
    \ The data field of this packet will encapsulate one\n   or more TLS records.\
    \ These will contain a TLS server_hello handshake\n   message, possibly followed\
    \ by TLS certificate, server_key_exchange,\n   certificate_request, server_hello_done\
    \ and/or finished handshake\n   messages, and/or a TLS change_cipher_spec message.\
    \  The server_hello\n   handshake message contains a TLS version number, another\
    \ random\n   number, a sessionId, and a ciphersuite.  The version offered by the\n\
    \   server MUST correspond to TLS v1.0 or later.\n   If the client's sessionId\
    \ is null or unrecognized by the server, the\n   server MUST choose the sessionId\
    \ to establish a new session;\n   otherwise, the sessionId  will  match  that\
    \  offered by the client,\n   indicating a resumption of the previously established\
    \ session with\n   that sessionID.  The server will also choose a ciphersuite\
    \ from those\n   offered by  the client; if the session matches the client's,\
    \ then the\n   ciphersuite MUST match the one negotiated during the handshake\n\
    \   protocol execution that established the session.\n   The purpose of the sessionId\
    \ within the TLS protocol is to allow for\n   improved efficiency in the case\
    \ where a client repeatedly attempts to\n   authenticate to an EAP server within\
    \ a short period of time. While\n   this model was developed for use with HTTP\
    \ authentication, it may\n   also have application to PPP authentication (e.g.\
    \ multilink).\n   As a result, it is left up to the peer whether to attempt to\
    \ continue\n   a previous session, thus shortening the TLS conversation. Typically\n\
    \   the peer's decision will be made based on the time elapsed since the\n   previous\
    \ authentication attempt to that EAP server. Based on the\n   sessionId chosen\
    \ by the peer, and the time elapsed since the previous\n   authentication, the\
    \ EAP server will decide whether to allow the\n   continuation, or whether to\
    \ choose a new session.\n   In the case where the EAP server and authenticator\
    \ reside on the same\n   device, then client will only be able to continue sessions\
    \ when\n   connecting to the same NAS or tunnel server. Should these devices be\n\
    \   set up in a rotary or round-robin then it may not be possible for the\n  \
    \ peer to know in advance the authenticator it will be connecting to,\n   and\
    \ therefore which sessionId to attempt to reuse. As a result, it is\n   likely\
    \ that the continuation attempt will fail. In the case where the\n   EAP authentication\
    \ is remoted then continuation is much more likely\n   to be successful, since\
    \ multiple NAS devices and tunnel servers will\n   remote their EAP authentications\
    \ to the same RADIUS server.\n   If the EAP server is resuming a previously established\
    \ session, then\n   it MUST include only a TLS change_cipher_spec message and\
    \ a TLS\n   finished handshake message after the server_hello message.  The\n\
    \   finished message contains the EAP server's authentication response to\n  \
    \ the peer.  If the EAP server is not resuming a previously established\n   session,\
    \ then it MUST include a TLS server_certificate handshake\n   message, and a server_hello_done\
    \ handshake message MUST be the last\n   handshake message encapsulated in this\
    \ EAP-Request packet.\n   The certificate message contains a public key certificate\
    \ chain for\n   either a key exchange public key (such as an RSA or Diffie-Hellman\n\
    \   key exchange public key) or a signature public key (such as an RSA or\n  \
    \ DSS signature public key).  In the latter case, a TLS\n   server_key_exchange\
    \ handshake message MUST also be included to allow\n   the key exchange to take\
    \ place.\n   The certificate_request message is included when the server desires\n\
    \   the client to authenticate itself via public key. While the EAP\n   server\
    \ SHOULD require client authentication, this is not a\n   requirement, since it\
    \ may be possible that the server will require\n   that the peer authenticate\
    \ via some other means.\n   The peer MUST respond to the EAP-Request with an EAP-Response\
    \ packet\n   of EAP-Type=EAP-TLS.  The data field of this packet will encapsulate\n\
    \   one or more TLS records containing a TLS change_cipher_spec message\n   and\
    \ finished handshake message, and possibly certificate,\n   certificate_verify\
    \ and/or client_key_exchange handshake messages.  If\n   the preceding server_hello\
    \ message sent by the EAP server in the\n   preceding EAP-Request packet indicated\
    \ the resumption of a previous\n   session, then the peer MUST send only the change_cipher_spec\
    \ and\n   finished handshake messages.  The finished message contains the\n  \
    \ peer's authentication response to the EAP server.\n   If the preceding server_hello\
    \ message sent by the EAP server in the\n   preceeding EAP-Request packet did\
    \ not indicate the resumption of a\n   previous session, then the peer MUST send,\
    \ in addition to the\n   change_cipher_spec and finished messages, a client_key_exchange\n\
    \   message, which completes the exchange of a shared master secret\n   between\
    \ the peer and the EAP server.  If the EAP server sent a\n   certificate_request\
    \ message in the preceding EAP-Request packet, then\n   the peer MUST send, in\
    \ addition, certificate and certificate_verify\n   handshake messages.  The former\
    \ contains a certificate for the peer's\n   signature public key, while the latter\
    \ contains the peer's signed\n   authentication response to the EAP server. After\
    \ receiving this\n   packet, the EAP server will verify the peer's certificate\
    \ and digital\n   signature, if requested.\n   If the peer's authentication is\
    \ unsuccessful, the EAP server SHOULD\n   send an EAP-Request packet with EAP-Type=EAP-TLS,\
    \ encapsulating a TLS\n   record containing the appropriate TLS alert message.\
    \  The EAP server\n   SHOULD send a TLS alert message rather immediately terminating\
    \ the\n   conversation so as to allow the peer to inform the user of the cause\n\
    \   of the failure and possibly allow for a restart of the conversation.\n   To\
    \ ensure that the peer receives the TLS alert message, the EAP\n   server MUST\
    \ wait for the peer to reply with an EAP-Response packet.\n   The EAP-Response\
    \ packet sent by the peer MAY encapsulate a TLS\n   client_hello handshake message,\
    \ in which case the EAP server MAY\n   allow the EAP-TLS conversation to be restarted,\
    \ or it MAY contain an\n   EAP-Response packet with EAP-Type=EAP-TLS and no data,\
    \ in which case\n   the EAP-Server MUST send an EAP-Failure packet, and terminate\
    \ the\n   conversation. It is up to the EAP server whether to allow restarts,\n\
    \   and if so, how many times the conversation can be restarted. An EAP\n   Server\
    \ implementing restart capability SHOULD impose a limit on the\n   number of restarts,\
    \ so as to protect against denial of service\n   attacks.\n   If the peers authenticates\
    \ successfully, the EAP server MUST respond\n   with an EAP-Request packet with\
    \ EAP-Type=EAP-TLS, which includes, in\n   the case of a new TLS session, one\
    \ or more TLS records containing TLS\n   change_cipher_spec and finished handshke\
    \ messages.  The latter\n   contains the EAP server's authentication response\
    \ to the peer.  The\n   peer will then verify the hash in order to authenticate\
    \ the EAP\n   server.\n   If the EAP server authenticates unsuccessfully, the\
    \ peer MAY send an\n   EAP-Response packet of EAP-Type=EAP-TLS containing a TLS\
    \ Alert\n   message identifying the reason for the failed authentication. The\n\
    \   peer MAY send a TLS alert message rather than immediately terminating\n  \
    \ the conversation so as to allow the EAP server to log the cause of\n   the error\
    \ for examination by the system administrator.\n   To ensure that the EAP Server\
    \ receives the TLS alert message, the\n   peer MUST wait for the EAP-Server to\
    \ reply before terminating the\n   conversation.  The EAP Server MUST reply with\
    \ an EAP-Failure packet\n   since server authentication failure is a terminal\
    \ condition.\n   If the EAP server authenticates successfully, the peer MUST send\
    \ an\n   EAP-Response packet of EAP-Type=EAP-TLS, and no data.  The EAP-Server\n\
    \   then MUST respond with an EAP-Success message.\n"
- title: 3.2.  Retry behavior
  contents:
  - "3.2.  Retry behavior\n   As with other EAP protocols, the EAP server is responsible\
    \ for retry\n   behavior. This means that if the EAP server does not receive a\
    \ reply\n   from the peer, it MUST resend the EAP-Request for which it has not\n\
    \   yet received an EAP-Response. However, the peer MUST NOT resend EAP-\n   Response\
    \ packets without first being prompted by the EAP server.\n   For example, if\
    \ the initial EAP-TLS start packet sent by the EAP\n   server were to be lost,\
    \ then the peer would not receive this packet,\n   and would not respond to it.\
    \ As a result, the EAP-TLS start packet\n   would be resent by the EAP server.\
    \ Once the peer received the EAP-TLS\n   start packet, it would send an EAP-Response\
    \ encapsulating the\n   client_hello message.  If the EAP-Response were to be\
    \ lost, then the\n   EAP server would resend the initial EAP-TLS start, and the\
    \ peer would\n   resend the EAP-Response.\n   As a result, it is possible that\
    \ a peer will receive duplicate EAP-\n   Request messages, and may send duplicate\
    \ EAP-Responses.  Both the\n   peer and the EAP-Server should be engineered to\
    \ handle this\n   possibility.\n"
- title: 3.3.  Fragmentation
  contents:
  - "3.3.  Fragmentation\n   A single TLS record may be up to 16384 octets in length,\
    \ but a TLS\n   message may span multiple TLS records, and a TLS certificate message\n\
    \   may in principle be as long as 16MB. The group of EAP-TLS messages\n   sent\
    \ in a single round may thus be larger than the PPP MTU size, the\n   maximum\
    \ RADIUS packet size of 4096 octets, or even the Multilink\n   Maximum Received\
    \ Reconstructed Unit (MRRU).  As described in [2], the\n   multilink MRRU is negotiated\
    \ via the Multilink MRRU LCP option, which\n   includes an MRRU length field of\
    \ two octets, and thus can support\n   MRRUs as large as 64 KB.\n   However, note\
    \ that in order to protect against reassembly lockup and\n   denial of service\
    \ attacks, it may be desirable for an implementation\n   to set a maximum size\
    \ for one such group of TLS messages. Since a\n   typical certificate chain is\
    \ rarely longer than a few thousand\n   octets, and no other field is likely to\
    \ be anwhere near as long, a\n   reasonable choice of maximum acceptable message\
    \ length might be 64\n   KB.\n   If this value is chosen, then fragmentation can\
    \ be handled via the\n   multilink PPP fragmentation mechanisms described in [2].\
    \ While this\n   is desirable, there may be cases in which multilink or the MRRU\
    \ LCP\n   option cannot be negotiated. As a result, an EAP-TLS implementation\n\
    \   MUST provide its own support for fragmentation and reassembly.\n   Since EAP\
    \ is a simple ACK-NAK protocol, fragmentation support can be\n   added in a simple\
    \ manner. In EAP, fragments that are lost or damaged\n   in transit will be retransmitted,\
    \ and since sequencing information is\n   provided by the Identifier field in\
    \ EAP, there is no need for a\n   fragment offset field as is provided in IPv4.\n\
    \   EAP-TLS fragmentation support is provided through addition of a flags\n  \
    \ octet within the EAP-Response and EAP-Request packets, as well as a\n   TLS\
    \ Message Length field of four octets. Flags include the Length\n   included (L),\
    \ More fragments (M), and EAP-TLS Start (S) bits. The L\n   flag is set to indicate\
    \ the presence of the four octet TLS Message\n   Length field, and MUST be set\
    \ for the first fragment of a fragmented\n   TLS message or set of messages. The\
    \ M flag is set on all but the last\n   fragment. The S flag is set only within\
    \ the EAP-TLS start message\n   sent from the EAP server to the peer. The TLS\
    \ Message Length field is\n   four octets, and provides the total length of the\
    \ TLS message or set\n   of messages that is being fragmented; this simplifies\
    \ buffer\n   allocation.\n   When an EAP-TLS peer receives an EAP-Request packet\
    \ with the M bit\n   set, it MUST respond with an EAP-Response with EAP-Type=EAP-TLS\
    \ and\n   no data.  This serves as a fragment ACK. The EAP server MUST wait\n\
    \   until it receives the EAP-Response before sending another fragment.\n   In\
    \ order to prevent errors in processing of fragments, the EAP server\n   MUST\
    \ increment the Identifier field for each fragment contained\n   within an EAP-Request,\
    \ and the peer MUST include this Identifier\n   value in the fragment ACK contained\
    \ within the EAP-Reponse.\n   Retransmitted fragments will contain the same Identifier\
    \ value.\n   Similarly, when the EAP server receives an EAP-Response with the\
    \ M\n   bit set, it MUST respond with an EAP-Request with EAP-Type=EAP-TLS\n \
    \  and no data. This serves as a fragment ACK. The EAP peer MUST wait\n   until\
    \ it receives the EAP-Request before sending another fragment.\n   In order to\
    \ prevent errors in the processing of fragments, the EAP\n   server MUST use increment\
    \ the Identifier value for each fragment ACK\n   contained within an EAP-Request,\
    \ and the peer MUST include this\n   Identifier value in the subsequent fragment\
    \ contained within an EAP-\n   Reponse.\n"
- title: 3.4.  Identity verification
  contents:
  - "3.4.  Identity verification\n   As part of the TLS negotiation, the server presents\
    \ a certificate to\n   the peer, and if mutual authentication is requested, the\
    \ peer\n   presents a certificate to the server.\n   Note that since the peer\
    \ has made a claim of identity in the EAP-\n   Response/Identity (MyID) packet,\
    \ the EAP server SHOULD verify that\n   the claimed identity corresponds to the\
    \ certificate presented by the\n   peer.  Typically this will be accomplished\
    \ either by placing the\n   userId within the peer certificate, or by providing\
    \ a mapping between\n   the peer certificate and the userId using a directory\
    \ service.\n   Similarly, the peer MUST verify the validity of the EAP server\n\
    \   certificate, and SHOULD also examine the EAP server name presented in\n  \
    \ the certificate, in order to determine whether the EAP server can be\n   trusted.\
    \ Please note that in the case where the EAP authentication is\n   remoted that\
    \ the EAP server will not reside on the same machine as\n   the authenticator,\
    \ and therefore the name in the EAP server's\n   certificate cannot be expected\
    \ to match that of the intended\n   destination. In this case, a more appropriate\
    \ test might be whether\n   the EAP server's certificate is signed by a CA controlling\
    \ the\n   intended destination and whether the EAP server exists within a\n  \
    \ target sub-domain.\n"
- title: 3.5.  Key derivation
  contents:
  - "3.5.  Key derivation\n   Since the normal TLS keys are used in the handshake,\
    \ and therefore\n   should not be used in a different context, new encryption\
    \ keys must\n   be derived from the TLS master secret for use with PPP encryption.\n\
    \   For both peer and EAP server, the derivation proceeds as follows:\n   given\
    \ the master secret negotiated by the TLS handshake, the\n   pseudorandom function\
    \ (PRF) defined in the specification for the\n   version of TLS in use, and the\
    \ value random defined as the\n   concatenation of the handshake message fields\
    \ client_hello.random and\n   server_hello.random (in that order), the value PRF(master\
    \ secret,\n   \"client EAP encryption\", random) is computed up to 128 bytes,\
    \ and the\n   value PRF(\"\", \"client EAP encryption\", random) is computed up\
    \ to 64\n   bytes (where \"\" is an empty string).  The peer encryption key (the\n\
    \   one used for encrypting data from peer to EAP server) is obtained by\n   truncating\
    \ to the correct length the first 32 bytes of the first PRF\n   of these two output\
    \ strings.  TheEAP server encryption key (the one\n   used for encrypting data\
    \ from EAP server to peer), if different from\n   the client encryption key, is\
    \ obtained by truncating to the correct\n   length the second 32 bytes of this\
    \ same PRF output string.  The\n   client authentication key (the one used for\
    \ computing MACs for\n   messages from peer to EAP server), if used, is obtained\
    \ by truncating\n   to the correct length the third 32 bytes of this same PRF\
    \ output\n   string.  The EAP server authentication key (the one used for\n  \
    \ computing MACs for messages from EAP server to peer), if used, and if\n   different\
    \ from the peer authentication key, is obtained by truncating\n   to the correct\
    \ length the fourth 32 bytes of this same PRF output\n   string.  The peer initialization\
    \ vector (IV), used for messages from\n   peer to EAP server if a block cipher\
    \ has been specified, is obtained\n   by truncating to the cipher's block size\
    \ the first 32 bytes of the\n   second PRF output string mentioned above.  Finally,\
    \ the server\n   initialization vector (IV), used for messages from peer to EAP\
    \ server\n   if a block cipher has been specified, is obtained by truncating to\n\
    \   the cipher's block size the second 32 bytes of this second PRF\n   output.\n\
    \   The use of these encryption and authentication keys is specific to\n   the\
    \ PPP encryption mechanism used, such as those defined in [9] and\n   [10].  Additional\
    \ keys or other non-secret values (such as IVs) can\n   be obtained as needed\
    \ for future PPP encryption methods by extending\n   the outputs of the PRF beyond\
    \ 128 bytes and 64 bytes, respectively.\n"
- title: 3.6.  ECP negotiation
  contents:
  - "3.6.  ECP negotiation\n   Since TLS supports ciphersuite negotiation, peers completing\
    \ the TLS\n   negotiation will also have selected a ciphersuite, which includes\
    \ key\n   strength, encryption and hashing methods. As a result, a subsequent\n\
    \   Encryption Control Protocol (ECP) conversation, if it occurs, has a\n   predetermined\
    \ result.\n   In order to ensure agreement between the EAP-TLS ciphersuite\n \
    \  negotiation and the subsequent ECP negotiation (described in [6]),\n   during\
    \ ECP negotiation the PPP peer MUST offer only the ciphersuite\n   negotiated\
    \ inEAP-TLS.  This ensures that the PPP authenticator MUST\n   accept the EAP-TLS\
    \ negotiated ciphersuite in order for the\n   onversation to proceed.  Should\
    \ the authenticator not accept the\n   EAP-TLS negotiated ciphersuite, then the\
    \ peer MUST send an LCP\n   terminate and disconnect.\n   Please note that it\
    \ cannot be assumed that the PPP authenticator and\n   EAP server are located\
    \ on the same machine or that the authenticator\n   understands the EAP-TLS conversation\
    \ that has passed through it. Thus\n   if the peer offers a ciphersuite other\
    \ than the one negotiated in\n   EAP-TLS there is no way for the authenticator\
    \ to know how to respond\n   correctly.\n"
- title: 3.7.  CCP negotiation
  contents:
  - "3.7.  CCP negotiation\n   TLS as described in [12] supports compression as well\
    \ as ciphersuite\n   negotiation. However, TLS only provides support for a limited\
    \ number\n   of compression types which do not overlap with the compression types\n\
    \   used in PPP. As a result, during the EAP-TLS conversation the EAP\n   endpoints\
    \ MUST NOT request or negotiate compression. Instead, the PPP\n   Compression\
    \ Control Protocol (CCP), described in [13] should be used\n   to negotiate the\
    \ desired compression scheme.\n"
- title: 3.8.  Examples
  contents:
  - "3.8.  Examples\n   In the case where the EAP-TLS mutual authentication is successful,\n\
    \   the conversation will appear as follows:\n   Authenticating Peer     Authenticator\n\
    \   -------------------     -------------\n                           <- PPP LCP\
    \ Request-EAP\n                           auth\n   PPP LCP ACK-EAP\n   auth ->\n\
    \                           <- PPP EAP-Request/\n                           Identity\n\
    \   PPP EAP-Response/\n   Identity (MyID) ->\n                           <- PPP\
    \ EAP-Request/\n                           EAP-Type=EAP-TLS\n                \
    \           (TLS Start)\n   PPP EAP-Response/\n   EAP-Type=EAP-TLS\n   (TLS client_hello)->\n\
    \                           <- PPP EAP-Request/\n                           EAP-Type=EAP-TLS\n\
    \                           (TLS server_hello,\n                            TLS\
    \ certificate,\n                    [TLS server_key_exchange,]\n             \
    \       [TLS certificate_request,]\n                        TLS server_hello_done)\n\
    \   PPP EAP-Response/\n   EAP-Type=EAP-TLS\n   (TLS certificate,\n    TLS client_key_exchange,\n\
    \   [TLS certificate_verify,]\n    TLS change_cipher_spec,\n    TLS finished)\
    \ ->\n                           <- PPP EAP-Request/\n                       \
    \    EAP-Type=EAP-TLS\n                           (TLS change_cipher_spec,\n \
    \                           TLS finished)\n   PPP EAP-Response/\n   EAP-Type=EAP-TLS\
    \ ->\n                           <- PPP EAP-Success\n   PPP Authentication\n \
    \  Phase complete,\n   NCP Phase starts\n   ECP negotiation\n   CCP negotiation\n\
    \   In the case where the EAP-TLS mutual authentication is successful,\n   and\
    \ fragmentation is required, the conversation will appear as\n   follows:\n  \
    \ Authenticating Peer     Authenticator\n   -------------------     -------------\n\
    \                           <- PPP LCP Request-EAP\n                         \
    \  auth\n   PPP LCP ACK-EAP\n   auth ->\n                           <- PPP EAP-Request/\n\
    \                           Identity\n   PPP EAP-Response/\n   Identity (MyID)\
    \ ->\n                           <- PPP EAP-Request/\n                       \
    \    EAP-Type=EAP-TLS\n                           (TLS Start, S bit set)\n   PPP\
    \ EAP-Response/\n   EAP-Type=EAP-TLS\n   (TLS client_hello)->\n              \
    \             <- PPP EAP-Request/\n                              EAP-Type=EAP-TLS\n\
    \                             (TLS server_hello,\n                           \
    \    TLS certificate,\n                     [TLS server_key_exchange,]\n     \
    \                [TLS certificate_request,]\n                         TLS server_hello_done)\n\
    \                    (Fragment 1: L, M bits set)\n   PPP EAP-Response/\n   EAP-Type=EAP-TLS\
    \ ->\n                           <- PPP EAP-Request/\n                       \
    \       EAP-Type=EAP-TLS\n                           (Fragment 2: M bit set)\n\
    \   PPP EAP-Response/\n   EAP-Type=EAP-TLS ->\n                           <- PPP\
    \ EAP-Request/\n                           EAP-Type=EAP-TLS\n                \
    \           (Fragment 3)\n   PPP EAP-Response/\n   EAP-Type=EAP-TLS\n   (TLS certificate,\n\
    \    TLS client_key_exchange,\n   [TLS certificate_verify,]\n    TLS change_cipher_spec,\n\
    \    TLS inished)(Fragment 1:\n    L, M bits set)->\n                        \
    \    <- PPP EAP-Request/\n                           EAP-Type=EAP-TLS\n   PPP\
    \ EAP-Response/\n   EAP-Type=EAP-TLS\n   (Fragment 2)->\n                    \
    \      <- PPP EAP-Request/\n                           EAP-Type=EAP-TLS\n    \
    \                       (TLS change_cipher_spec,\n                           \
    \ TLS finished)\n   PPP EAP-Response/\n   EAP-Type=EAP-TLS ->\n              \
    \             <- PPP EAP-Success\n   PPP Authentication\n   Phase complete,\n\
    \   NCP Phase starts\n   ECP negotiation\n   CCP negotiation\n   In the case where\
    \ the server authenticates to the client\n   successfully, but the client fails\
    \ to authenticate to the server, the\n   conversation will appear as follows:\n\
    \   Authenticating Peer     Authenticator\n   -------------------     -------------\n\
    \                           <- PPP LCP Request-EAP\n                         \
    \  auth\n   PPP LCP ACK-EAP\n   auth ->\n                           <- PPP EAP-Request/\n\
    \                           Identity\n   PPP EAP-Response/\n   Identity (MyID)\
    \ ->\n                           <- PPP EAP-Request/\n                       \
    \    EAP-Type=EAP-TLS\n                           (TLS Start)\n   PPP EAP-Response/\n\
    \   EAP-Type=EAP-TLS\n   (TLS client_hello)->\n                           <- PPP\
    \ EAP-Request/\n                           EAP-Type=EAP-TLS\n                \
    \           (TLS server_hello,\n                            TLS certificate,\n\
    \                    [TLS server_key_exchange,]\n                           TLS\
    \ certificate_request,\n                           TLS server_hello_done)\n  \
    \ PPP EAP-Response/\n   EAP-Type=EAP-TLS\n   (TLS certificate,\n    TLS client_key_exchange,\n\
    \    TLS certificate_verify,\n    TLS change_cipher_spec,\n    TLS finished) ->\n\
    \                           <- PPP EAP-Request/\n                           EAP-Type=EAP-TLS\n\
    \                           (TLS change_cipher_spec,\n                       \
    \    TLS finished)\n   PPP EAP-Response/\n   EAP-Type=EAP-TLS ->\n           \
    \                <- PPP EAP-Request\n                           EAP-Type=EAP-TLS\n\
    \                           (TLS Alert message)\n   PPP EAP-Response/\n   EAP-Type=EAP-TLS\
    \ ->\n                           <- PPP EAP-Failure\n                        \
    \   (User Disconnected)\n   In the case where server authentication is unsuccessful,\
    \ the\n   conversation will appear as follows:\n   Authenticating Peer     Authenticator\n\
    \   -------------------     -------------\n                           <- PPP LCP\
    \ Request-EAP\n                           auth\n   PPP LCP ACK-EAP\n   auth ->\n\
    \                           <- PPP EAP-Request/\n                           Identity\n\
    \   PPP EAP-Response/\n   Identity (MyID) ->\n                           <- PPP\
    \ EAP-Request/\n                           EAP-Type=EAP-TLS\n                \
    \           (TLS Start)\n   PPP EAP-Response/\n   EAP-Type=EAP-TLS\n    (TLS client_hello)->\n\
    \                           <- PPP EAP-Request/\n                           EAP-Type=EAP-TLS\n\
    \                           (TLS server_hello,\n                            TLS\
    \ certificate,\n                       [TLS server_key_exchange,]\n          \
    \             [TLS certificate_request,]\n                        TLS server_hello_done)\n\
    \   PPP EAP-Response/\n   EAP-Type=EAP-TLS\n    (TLS certificate,\n    TLS client_key_exchange,\n\
    \   [TLS certificate_verify,]\n    TLS change_cipher_spec,\n    TLS finished)\
    \ ->\n                           <- PPP EAP-Request/\n                       \
    \    EAP-Type=EAP-TLS\n                           (TLS change_cipher_spec,\n \
    \                           TLS finished)\n   PPP EAP-Response/\n   EAP-Type=EAP-TLS\n\
    \   (TLS change_cipher_spec,\n   TLS finished)\n                           <-\
    \ PPP EAP-Request/\n                           EAP-Type=EAP-TLS\n   PPP EAP-Response/\n\
    \   EAP-Type=EAP-TLS\n   (TLS Alert message) ->\n                           <-\
    \ PPP EAP-Failure\n                           (User Disconnected)\n   In the case\
    \ where a previously established session is being resumed,\n   and both sides\
    \ authenticate successfully, the conversation will\n   appear as follows:\n  \
    \ Authenticating Peer     Authenticator\n   -------------------     -------------\n\
    \                           <- PPP LCP Request-EAP\n                         \
    \  auth\n   PPP LCP ACK-EAP\n   auth ->\n                           <- PPP EAP-Request/\n\
    \                           Identity\n   PPP EAP-Response/\n   Identity (MyID)\
    \ ->\n                           <- PPP EAP-Request/\n                       \
    \    EAP-Request/\n                           EAP-Type=EAP-TLS\n             \
    \              (TLS Start)\n   PPP EAP-Response/\n   EAP-Type=EAP-TLS\n   (TLS\
    \ client_hello)->\n                           <- PPP EAP-Request/\n          \
    \                 EAP-Type=EAP-TLS\n                           (TLS server_hello,\n\
    \                           TLS change_cipher_spec\n                         \
    \  TLS finished)\n   PPP EAP-Response/\n   EAP-Type=EAP-TLS\n   (TLS change_cipher_spec,\n\
    \    TLS finished) ->\n                           <- PPP EAP-Success\n   PPP Authentication\n\
    \   Phase complete,\n   NCP Phase starts\n   ECP negotiation\n   CCP negotiation\n\
    \   In the case where a previously established session is being resumed,\n   and\
    \ the server authenticates to the client successfully but the\n   client fails\
    \ to authenticate to the server, the conversation will\n   appear as follows:\n\
    \   Authenticating Peer     Authenticator\n   -------------------     -------------\n\
    \                           <- PPP LCP Request-EAP\n                         \
    \  auth\n   PPP LCP ACK-EAP\n   auth ->\n                           <- PPP EAP-Request/\n\
    \                           Identity\n   PPP EAP-Response/\n   Identity (MyID)\
    \ ->\n                           <- PPP EAP-Request/\n                       \
    \    EAP-Request/\n                           EAP-Type=EAP-TLS\n             \
    \              (TLS Start)\n   PPP EAP-Response/\n   EAP-Type=EAP-TLS\n   (TLS\
    \ client_hello) ->\n                           <- PPP EAP-Request/\n         \
    \                  EAP-Type=EAP-TLS\n                           (TLS server_hello,\n\
    \                            TLS change_cipher_spec,\n                       \
    \     TLS finished)\n   PPP EA-Response/\n   EAP-Type=EAP-TLS\n   (TLS change_cipher_spec,\n\
    \    TLS finished) ->\n                           <- PPP EAP-Request\n       \
    \                    EAP-Type=EAP-TLS\n                           (TLS Alert message)\n\
    \   PPP EAP-Response\n   EAP-Type=EAP-TLS ->\n                            <- PPP\
    \ EAP-Failure\n                            (User Disconnected)\n   In the case\
    \ where a previously established session is being resumed,\n   and the server\
    \ authentication is unsuccessful, the conversation will\n   appear as follows:\n\
    \   Authenticating Peer     Authenticator\n   -------------------     -------------\n\
    \                           <- PPP LCP Request-EAP\n                         \
    \  auth\n   PPP LCP ACK-EAP\n   auth ->\n                           <- PPP EAP-Request/\n\
    \                           Identity\n   PPP EAP-Response/\n   Identity (MyID)\
    \ ->\n                           <- PPP EAP-Request/\n                       \
    \    EAP-Request/\n                           EAP-Type=EAP-TLS\n             \
    \              (TLS Start)\n   PPP EAP-Response/\n   EAP-Type=EAP-TLS\n   (TLS\
    \ client_hello)->\n                           <- PPP EAP-Request/\n          \
    \                 EAP-Type=EAP-TLS\n                           (TLS server_hello,\n\
    \                            TLS change_cipher_spec,\n                       \
    \     TLS finished)\n   PPP EAP-Response/\n   EAP-Type=EAP-TLS\n   (TLS change_cipher_spec,\n\
    \   TLS finished)\n                           <- PPP EAP-Request/\n          \
    \                 EAP-Type=EAP-TLS\n   PPP EAP-Response/\n   EAP-Type=EAP-TLS\n\
    \   (TLS Alert message) ->\n                           <- PPP EAP-Failure\n  \
    \                         (User Disconnected)\n"
- title: 4.  Detailed description of the EAP-TLS protocol
  contents:
  - '4.  Detailed description of the EAP-TLS protocol

    '
- title: 4.1.  PPP EAP TLS Packet Format
  contents:
  - "4.1.  PPP EAP TLS Packet Format\n   A summary of the PPP EAP TLS Request/Response\
    \ packet format is shown\n   below.  The fields are transmitted from left to right.\n\
    \    0                   1                   2                   3\n    0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Code      |   Identifier  |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Type      |        Data...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Code\n      1 - Request\n      2 - Response\n   Identifier\n      The identifier\
    \ field is one octet and aids in matching responses\n      with requests.\n  \
    \ Length\n      The Length field is two octets and indicates the length of the\
    \ EAP\n      packet including the Code, Identifier, Length, Type, and Data\n \
    \     fields.  Octets outside the range of the Length field should be\n      treated\
    \ as Data Link Layer padding and should be ignored on\n      reception.\n   Type\n\
    \      13 - EAP TLS\n   Data\n      The format of the Data field is determined\
    \ by the Code field.\n"
- title: 4.2.  PPP EAP TLS Request Packet
  contents:
  - "4.2.  PPP EAP TLS Request Packet\n   A summary of the PPP EAP TLS Request packet\
    \ format is shown below.\n   The fields are transmitted from left to right.\n\
    \   0                   1                   2                   3\n   0 1 2 3\
    \ 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Code      |   Identifier  |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Type      |     Flags     |      TLS Message Length\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     TLS Message Length        |       TLS Data...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Code\n      1\n   Identifier\n      The Identifier field is one octet and\
    \ aids in matching responses\n      with requests.  The Identifier field MUST\
    \ be changed on each\n      Request packet.\n   Length\n      The Length field\
    \ is two octets and indicates the length of the EAP\n      packet including the\
    \ Code, Identifier, Length, Type, and TLS\n      Response fields.\n   Type\n \
    \     13 - EAP TLS\n   Flags\n      0 1 2 3 4 5 6 7 8\n      +-+-+-+-+-+-+-+-+\n\
    \      |L M S R R R R R|\n      +-+-+-+-+-+-+-+-+\n      L = Length included\n\
    \      M = More fragments\n      S = EAP-TLS start\n      R = Reserved\n     \
    \ The L bit (length included) is set to indicate the presence of the\n      four\
    \ octet TLS Message Length field, and MUST be set for the first\n      fragment\
    \ of a fragmented TLS message or set of messages. The M bit\n      (more fragments)\
    \ is set on all but the last fragment. The S bit\n      (EAP-TLS start) is set\
    \ in an EAP-TLS Start message. This\n      differentiates the EAP-TLS Start message\
    \ from a fragment\n      acknowledgement.\n   TLS Message Length\n      The TLS\
    \ Message Length field is four octets, and is present only\n      if the L bit\
    \ is set.  This field provides the total length of the\n      TLS message or set\
    \ of messages that is being fragmented.\n   TLS data\n      The TLS data consists\
    \ of the encapsulated TLS packet in TLS record\n      format.\n"
- title: 4.3.  PPP EAP TLS Response Packet
  contents:
  - "4.3.  PPP EAP TLS Response Packet\n   A summary of the PPP EAP TLS Response packet\
    \ format is shown below.\n   The fields are transmitted from left to right.\n\
    \   0                   1                   2                   3\n   0 1 2 3\
    \ 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Code      |   Identifier  |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Type      |     Flags     |      TLS Message Length\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     TLS Message Length        |       TLS Data...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Code\n      2\n   Identifier\n      The Identifier field is one octet and\
    \ MUST match the Identifier\n      field from the corresponding request.\n   Length\n\
    \      The Length field is two octets and indicates the length of the EAP\n  \
    \    packet including the Code, Identifir, Length, Type, and TLS data\n      fields.\n\
    \   Type\n      13 - EAP TLS\n   Flags\n      0 1 2 3 4 5 6 7 8\n      +-+-+-+-+-+-+-+-+\n\
    \      |L M S R R R R R|\n      +-+-+-+-+-+-+-+-+\n      L = Length included\n\
    \      M = More fragments\n      S = EAP-TLS start\n      R = Reserved\n     \
    \ The L bit (length included) is set to indicate the presence of the\n      four\
    \ octet TLS Message Length field, and MUST be set for the first\n      fragment\
    \ of a fragmented TLS message or set of messages. The M bit\n      (more fragments)\
    \ is set on all but the last fragment. The S bit\n      (EAP-TLS start) is set\
    \ in an EAP-TLS Start message.  This\n      differentiates the EAP-TLS Start message\
    \ from a fragment\n      acknowledgement.\n   TLS Message Length\n      The TLS\
    \ Message Length field is four octets, and is present only\n      if the L bit\
    \ is set. This field provides the total length of the\n      TLS message or set\
    \ of messages that is being fragmented.\n   TLS data\n      The TLS data consists\
    \ of the encapsulated TLS packet in TLS record\n      format.\n"
- title: 5.  References
  contents:
  - "5.  References\n   [1]  Simpson, W., Editor, \"The Point-to-Point Protocol (PPP)\"\
    , STD\n        51, RFC 1661, July 1994.\n   [2]  Sklower, K., Lloyd, B., McGregor,\
    \ G., Carr, D. and T. Coradetti,\n        \"The PPP Multilink Protocol (MP)\"\
    , RFC 1990, August 1996.\n   [3]  Simpson, W., Editor, \"PPP LCP Extensions\"\
    , RFC 1570, January\n        1994.\n   [4]  Rivest, R. and S. Dusse, \"The MD5\
    \ Message-Digest Algorithm\", RFC\n        1321, April 1992.\n   [5]  Blunk, L.\
    \ and J. Vollbrecht, \"PPP Extensible Authentication\n        Protocol (EAP)\"\
    , RFC 2284, March 1998.\n   [6]  Meyer, G., \"The PPP Encryption Protocol (ECP)\"\
    , RFC 1968, June\n        1996.\n   [7]  National Bureau of Standards, \"Data\
    \ Encryption Standard\", FIPS\n        PUB 46 (January 1977).\n   [8]  National\
    \ Bureau of Standards, \"DES Modes of Operation\", FIPS PUB\n        81 (December\
    \ 1980).\n   [9]  Sklower, K. amd G. Meyer, \"The PPP DES Encryption Protocol,\n\
    \        Version 2 (DESE-bis)\", RFC 2419, September 1998.\n   [10] Hummert, K.,\
    \ \"The PPP Triple-DES Encryption Protocol (3DESE)\",\n        RFC 2420, September\
    \ 1998.\n   [11] Bradner, S., \"Key words for use in RFCs to Indicate Requirement\n\
    \        Levels\", BCP 14, RFC 2119, March 1997.\n   [12] Dierks, T. and  C. Allen,\
    \ \"The TLS Protocol Version 1.0\", RFC\n        2246, November 1998.\n   [13]\
    \ Rand, D., \"The PPP Compression Control Protocol\", RFC 1962, June\n       \
    \ 1996.\n"
- title: 6.  Security Considerations
  contents:
  - '6.  Security Considerations

    '
- title: 6.1.  Certificate revocation
  contents:
  - "6.1.  Certificate revocation\n   Since the EAP server is on the Internet during\
    \ the EAP conversation,\n   the server is capable of following a certificate chain\
    \ or verifying\n   whether the peer's certificate has been revoked. In contrast,\
    \ the\n   peer may or may not have Internet connectivity, and thus while it can\n\
    \   validate the EAP server's certificate based on a pre-configured set\n   of\
    \ CAs, it may not be able to follow a certificate chain or verify\n   whether\
    \ the EAP server's certificate has been revoked.\n   In the case where the peer\
    \ is initiating a voluntary Layer 2 tunnel\n   using PPTP or L2TP, the peer will\
    \ typically already have a PPP\n   interface and Internet connectivity established\
    \ at the time of tunnel\n   initiation.  As a result, during the EAP conversation\
    \ it is capable\n   of checking for certificate revocation.\n   However, in the\
    \ case where the peer is initiating an intial PPP\n   conversation, it will not\
    \ have Internet connectivity and is therefore\n   not capable of checking for\
    \ certificate revocation until after NCP\n   negotiation completes and the peer\
    \ has access to the Internet. In\n   this case, the peer SHOULD check for certificate\
    \ revocation after\n   connecting to the Internet.\n"
- title: 6.2.  Separation of the EAP server and PPP authenticator
  contents:
  - "6.2.  Separation of the EAP server and PPP authenticator\n   As a result of the\
    \ EAP-TLS conversation, the EAP endpoints will\n   mutually authenticate, negotiate\
    \ a ciphersuite, and derive a session\n   key for subsequent use in PPP encryption.\
    \ Since the peer and EAP\n   client reside on the same machine, it is necessary\
    \ for the EAP client\n   module to pass the session key to the PPP encryption\
    \ module.\n   The situation may be more complex on the PPP authenticator, which\
    \ may\n   or may not reside on the same machine as the EAP server. In the case\n\
    \   where the EAP server and PPP authenticator reside on different\n   machines,\
    \ there are several implications for security. Firstly, the\n   mutual authentication\
    \ defined in EAP-TLS will occur between the peer\n   and the EAP server, not between\
    \ the peer and the authenticator. This\n   means that as a result of the EAP-TLS\
    \ conversation, it is not\n   possible for the peer to validate the identity of\
    \ the NAS or tunnel\n   server that it is speaking to.\n   The second issue is\
    \ that the session key negotiated between the peer\n   and EAP server will need\
    \ to be transmitted to the authenticator.\n   Therefore a mechanism needs to be\
    \ provided to transmit the session\n   key from the EAP server to the authenticator\
    \ or tunnel server that\n   needs to use the key. The specification of this transit\
    \ mechanism is\n   outside the scope of this document.\n"
- title: 6.3.  Relationship of PPP encryption to other security mechanisms
  contents:
  - "6.3.  Relationship of PPP encryption to other security mechanisms\n   It is envisaged\
    \ that EAP-TLS will be used primarily with dialup PPP\n   connections. However,\
    \ there are also circumstances in which PPP\n   encryption may be used along with\
    \ Layer 2 tunneling protocols such as\n   PPTP and L2TP.\n   In compulsory layer\
    \ 2 tunneling, a PPP peer makes a connection to a\n   NAS or router which tunnels\
    \ the PPP packets to a tunnel server.\n   Since with compulsory tunneling a PPP\
    \ peer cannot tell whether its\n   packets are being tunneled, let alone whether\
    \ the network device is\n   securing the tunnel, if security is required then\
    \ the client must\n   make its own arrangements. In the case where all endpoints\
    \ cannot be\n   relied upon to implement IPSEC, TLS, or another suitable security\n\
    \   protocol, PPP encryption provides a convenient means to ensure the\n   privacy\
    \ of packets transiting between the client and the tunnel\n   server.\n"
- title: 7.  Acknowledgments
  contents:
  - "7.  Acknowledgments\n   Thanks to Terence Spies, Glen Zorn and Narendra Gidwani\
    \ of Microsoft\n   for useful discussions of this problem space.\n"
- title: 8.  Authors' Addresses
  contents:
  - "8.  Authors' Addresses\n   Bernard Aboba\n   Microsoft Corporation\n   One Microsoft\
    \ Way\n   Redmond, WA 98052\n   Phone: 425-936-6605\n   EMail: bernarda@microsoft.com\n\
    \   Dan Simon\n   Microsoft Corporation\n   One Microsoft Way\n   Redmond, WA\
    \ 98052\n   Phone: 425-936-6711\n   EMail: dansimon@microsoft.com\n"
- title: 9.  Full Copyright Statement
  contents:
  - "9.  Full Copyright Statement\n   Copyright (C) The Internet Society (1999). \
    \ All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
