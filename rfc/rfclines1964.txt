ABSTRACT This specification defines protocols, procedures, and conventions to be employed by peers implementing the Generic Security Service Application Program Interface (as specified in RFCs 1508 and 1509) when using Kerberos Version 5 technology (as specified in RFC 1510).
ACKNOWLEDGMENTS Much of the material in this memo is based on working documents drafted by John Wray of Digital Equipment Corporation and on discussions, implementation activities, and interoperability testing involving Marc Horowitz, Ted Ts'o, and John Wray.
Particular thanks are due to each of these individuals for their contributions towards development and availability of GSS API support within the Kerberos Version 5 code base.
This section discusses protocol visible characteristics of the GSS  API mechanism to be implemented atop Kerberos V5 security technology per RFC 1508 and RFC 1510; it defines elements of protocol for interoperability and is independent of language bindings per RFC  1509.
Tokens transferred between GSS API peers (for security context management and per message protection purposes) are defined.
The data elements exchanged between a GSS API endpoint implementation and the Kerberos KDC are not specific to GSS API usage and are therefore defined within RFC 1510 rather than within this specification.
To support ongoing experimentation, testing, and evolution of the specification, the Kerberos V5 GSS API mechanism as defined in this and any successor memos will be identified with the following Object Identifier, as defined in RFC 1510, until the specification is advanced to the level of Proposed Standard RFC: {iso(1), org(3), dod(5)
, kerberosv5(2)} Upon advancement to the level of Proposed Standard RFC, the Kerberos V5 GSS API mechanism will be identified by an Object Identifier having the value:
Context Establishment Tokens Per RFC 1508, Appendix B, the initial context establishment token will be enclosed within framing as follows:
innerContextToken ANY DEFINED BY thisMech
ASN.1 usage within innerContextToken   is not required }
The innerContextToken of the initial context token will consist of a Kerberos V5 KRB AP REQ message, preceded by a two byte token id (TOK ID) field, which shall contain the value 01 00.
The above GSS API framing shall be applied to all tokens emitted by the Kerberos V5 GSS API mechanism, including KRB AP REP, KRB ERROR, context deletion, and per message tokens, not just to the initial token in a context establishment sequence.
While not required by RFC 1508, this enables implementations to perform enhanced error  checking.
The innerContextToken field of context establishment tokens for the Kerberos V5 GSS API mechanism will contain a Kerberos message (KRB AP REQ, KRB AP REP or KRB ERROR), preceded by a 2 byte TOK ID field containing 01 00 for KRB AP REQ messages, 02 00 for KRB AP REP messages and 03 00 for KRB ERROR messages.
Initial Token Relevant KRB AP REQ syntax (from RFC 1510) is as follows:
Encrypted part of ticket EncTicketPart ::
For purposes of this specification, the authenticator shall include the optional sequence number, and the checksum field shall be used to convey channel binding, service flags, and optional delegation information.
The checksum will have a type of 0x8003
(a value being registered within the Kerberos protocol specification), and a value field of at least 24 bytes in length.
The length of the value field is extended beyond 24 bytes if and only if an optional facility to carry a Kerberos defined KRB CRED message for delegation purposes is supported by an implementation and active on a context.
When delegation is active, a TGT with its FORWARDABLE flag set will be transferred within the KRB CRED message.
The checksum value field's format is as follows:
..3    Lgth    Number of bytes in Bnd field; Currently contains hex 10 00 00 00
(16, represented in little endian form)
Integer fields within channel bindings are represented in little endian order for the purposes of the MD5 calculation.
Flags   Bit vector of context establishment flags, with values consistent with RFC 1509, p. 41:
The resulting bit vector is encoded into bytes 20..23 in little endian form.
The Delegation Option identifier ( 1)
The length of the Deleg field.
A KRB CRED message (n   Dlgth   29)
In computing the contents of the "Bnd" field, the following detailed points apply: (1) Each integer field shall be formatted into four bytes, using little endian byte ordering, for purposes of MD5 hash computation.
All input length fields within gss buffer desc elements of a gss channel bindings struct, even those which are zero valued, shall be included in the hash calculation; the value elements of gss buffer desc elements shall be dereferenced, and the resulting data shall be included within the hash computation, only for the case of gss buffer desc elements having non zero length specifiers.
If the caller passes the value GSS C
NO BINDINGS instead of a valid channel bindings structure
, the Bnd field shall be set to 16 zero valued bytes.
In the initial Kerberos V5 GSS API mechanism token (KRB AP REQ token) from initiator to target, the GSS C DELEG FLAG, GSS C MUTUAL FLAG, GSS C REPLAY FLAG, and GSS C SEQUENCE FLAG values shall each be set as the logical AND of the initiator's corresponding request flag to GSS Init sec context() and a Boolean indicator of whether that optional service is available to GSS Init sec context()'s caller.
GSS C CONF FLAG and GSS C INTEG FLAG, for which no corresponding context level input indicator flags to GSS Init sec context() exist, shall each be set to indicate whether their respective per message protection services are available for use on the context being established.
When input source address channel binding values are provided by a caller (i.e., unless the input argument is GSS C
NO BINDINGS or the source address specifier value within the input structure is GSS C NULL ADDRTYPE), and the corresponding token received from the context's peer bears address restrictions, it is recommended that an implementation of the Kerberos V5 GSS API mechanism should check that the source address as provided by the caller matches that in the received token, and should return the GSS S BAD BINDINGS major status value if a mismatch is detected.
Note: discussion is ongoing about the strength of recommendation to be made in this area, and on the circumstances under which such a recommendation should be applicable; implementors are therefore advised that changes on this matter may be included in subsequent versions of this specification.
Response Tokens A context establishment sequence based on the Kerberos V5 mechanism will perform one way authentication (without confirmation or any return token from target to initiator in response to the initiator's KRB AP REQ) if the mutual req bit is not set in the application's call to GSS Init sec context().
Applications requiring confirmation that their authentication was successful should request mutual authentication, resulting in a "mutual required" indication within KRB AP REQ APoptions and the setting of the mutual req bit in the flags field of the authenticator checksum.
In response to such a request, the context target will reply to the initiator with a token containing either a KRB AP REP or KRB ERROR, completing the mutual context establishment exchange.
Relevant KRB AP REP syntax is as follows: AP REP ::
The optional seq number element within the AP REP's EncAPRepPart shall be included.
The syntax of KRB ERROR is as follows:
STRING OPTIONAL } Values to be transferred in the error code field of a KRB ERROR message are defined in [RFC 1510], not in this specification.
Per Message and Context Deletion
References to GSS API per message routines in the remainder of this specification will be based on those routines' newer recommended names rather than those names' predecessors.
Several variants of cryptographic keys are used in generation and processing of per message tokens: (1) context key: uses Kerberos session key (or subkey, if present in authenticator emitted by context initiator)
forms variant of context key by exclusive OR with the hexadecimal constant f0f0f0f0f0f0f0f0.
(3) MD2.5 seed key: forms variant of context key by reversing the bytes of the context key
(i.e. if the original key is the 8 byte sequence {aa, bb, cc, dd, ee, ff, gg, hh}, the seed key will be {hh, gg, ff, ee, dd, cc, bb, aa}).
Per message Tokens MIC Use of the GSS GetMIC
() call yields a token, separate from the user data being protected, which can be used to verify the integrity of that data as received.
Tokens emitted by GSS GetMIC() contain the hex value 01 01 in this field.
DES MAC MD5 01 00
MD2.5 02 00 DES MAC 4
GSS API tokens must be encapsulated within the higher level protocol by the application; no embedded length field is necessary.
Checksum Checksum calculation procedure (common to all algorithms):
Checksums are calculated over the data field, logically prepended by the first 8 bytes of the plaintext packet header.
The resulting value binds the data to the packet type and signature algorithm identifier fields.
The checksum is formed by computing an MD5 [RFC 1321] hash over the plaintext data, and then computing a DES CBC MAC on the 16 byte MD5 result.
A standard 64 bit DES CBC MAC is computed per [FIPS PUB 113], employing the context key and a zero IV.
The 8 byte result is stored in the SGN CKSUM field.
The checksum is formed by first DES CBC encrypting a 16 byte zero block, using a zero IV and a key formed by reversing the bytes of the context key (i.e. if the original key is the 8 byte sequence {aa, bb, cc, dd, ee, ff, gg, hh}, the checksum key will be {hh, gg, ff, ee, dd, cc, bb, aa}).
The resulting 16 byte value is logically prepended to the to be signed data.
A standard MD5 checksum is calculated over the combined data, and the first 8 bytes of the result are stored in the SGN CKSUM field.
: we refer to this algorithm informally as "MD2.5" to connote the fact that it uses half of the 128 bits generated by MD5; use of only a subset of the MD5 bits is intended to protect against the prospect that data could be postfixed to an existing message with corresponding modifications being made to the checksum.
: This algorithm is fairly novel and has received more limited evaluation than that to which other integrity algorithms have been subjected.
An initial, limited evaluation indicates that it may be significantly weaker than DES MAC MD5.
A standard 64 bit DES CBC MAC is computed on the plaintext data per [FIPS PUB 113], employing the context key and a zero IV.
Padding procedures to accomodate plaintext data lengths which may not be integral multiples of 8 bytes are defined in [FIPS  PUB 113].
The result is an 8 byte value, which is stored in the SGN CKSUM field.
Support for this algorithm may not be present in all implementations.
Sequence Number Sequence number field:
The 8 byte plaintext sequence number field is formed from the sender's four byte sequence number as follows.
If the four bytes of the sender's sequence number are named s0, s1, s2 and s3 (from least to most significant), the plaintext sequence number field is the 8 byte sequence: (s0, s1, s2, s3, di, di, di, di), where 'di' is the direction indicator (
Hex 0 sender is the context initiator, Hex FF sender is the context acceptor).
The field is then DES CBC encrypted using the context key and an IV formed from the first 8 bytes of the previously calculated SGN CKSUM field.
After sending a GSS GetMIC() or GSS Wrap() token, the sender's sequence number is incremented by one.
The receiver of the token will first verify the SGN CKSUM field.
If valid, the sequence number field may be decrypted and compared to the expected sequence number.
The repetition of the (effectively 1 bit) direction indicator within the sequence number field provides redundancy so that the receiver may verify that the decryption succeeded.
Since the checksum computation is used as an IV to the sequence number decryption, attempts to splice a checksum and sequence number from different messages will be detected.
The direction indicator will detect packets that have been maliciously reflected.
The sequence number provides a basis for detection of replayed tokens.
Replay detection can be performed using state information retained on received sequence numbers, interpreted in conjunction with the security context on which they arrive.
Provision of per message replay and out of sequence detection services is optional for implementations of the Kerberos V5 GSS API mechanism.
Further, it is recommended that implementations of the Kerberos V5 GSS API mechanism which offer these services should honor a caller's request that the services be disabled on a context.
Specifically, if replay det req flag is input FALSE, replay det state should be returned FALSE and the GSS DUPLICATE TOKEN and GSS OLD TOKEN stati should not be indicated as a result of duplicate detection when tokens are processed; if sequence req flag is input FALSE, sequence state should be returned FALSE and GSS DUPLICATE TOKEN, GSS OLD TOKEN, and GSS UNSEQ
TOKEN stati should not be indicated as a result of out of sequence detection when tokens are processed.
Per message Tokens Wrap Use of the GSS Wrap() call yields a token which encapsulates the input user data (optionally encrypted) along with associated integrity check quantities.
The token emitted by GSS Wrap() consists of an integrity header whose format is identical to that emitted by GSS GetMIC() (except that the TOK ID field contains the value 02 01), followed by a body portion that contains either the plaintext data (if SEAL ALG   ff ff) or encrypted data for any other supported value of SEAL ALG.
00 is supported, and means that DES CBC encryption is being used to protect the data.
() token has the following format:
Tokens emitted by GSS Wrap() contain the hex value 02 01 in this field.
DES MAC MD5 01 00
MD2.5 02 00 DES MAC
padded data GSS API tokens must be encapsulated within the higher level protocol by the application; no embedded length field is necessary.
Checksum Checksum calculation procedure (common to all algorithms):
Checksums are calculated over the plaintext padded data field, logically prepended by the first 8 bytes of the plaintext packet header.
The resulting signature binds the data to the packet type, protocol version, and signature algorithm identifier fields.
The checksum is formed by computing an MD5 hash over the plaintext padded data, and then computing a DES CBC MAC on the 16 byte MD5 result.
A standard 64 bit DES CBC MAC is computed per [FIPS PUB 113], employing the context key and a zero IV.
The 8  byte result is stored in the SGN CKSUM field.
The checksum is formed by first DES CBC encrypting a 16 byte zero block, using a zero IV and a key formed by reversing the bytes of the context key (i.e., if the original key is the 8 byte sequence {aa, bb, cc, dd, ee, ff, gg, hh}, the checksum key will be {hh, gg, ff, ee, dd, cc, bb, aa}).
The resulting 16 byte value is logically pre pended to the "to be signed data".
A standard MD5 checksum is calculated over the combined data, and the first 8 bytes of the result are stored in the SGN CKSUM field.
A standard 64 bit DES CBC MAC is computed on the plaintext padded data per [FIPS PUB 113], employing the context key and a zero IV.
The plaintext padded data is already assured to be an integral multiple of 8 bytes; no additional padding is required or applied in order to accomplish MAC calculation.
The result is an 8  byte value, which is stored in the SGN CKSUM field.
Support for this lgorithm may not be present in all implementations.
Sequence Number Sequence number field:
The 8 byte plaintext sequence number field is formed from the sender's four byte sequence number as follows.
If the four bytes of the sender's sequence number are named s0, s1, s2 and s3 (from least to most significant), the plaintext sequence number field is the 8 byte sequence: (s0, s1, s2, s3, di, di, di, di), where 'di' is the direction indicator (
Hex 0 sender is the context initiator, Hex FF sender is the context acceptor).
The field is then DES CBC encrypted using the context key and an IV formed from the first 8 bytes of the SEAL CKSUM field.
After sending a GSS GetMIC() or GSS Wrap() token, the sender's sequence numbers are incremented by one.
Before encryption and/or signature calculation, plaintext data is padded to the next highest multiple of 8 bytes, by appending between 1 and 8 bytes, the value of each such byte being the total number of pad bytes.
For example, given data of length 20 bytes, four pad bytes will be appended, and each byte will contain the hex value 04.
An 8 byte random confounder is prepended to the data, and signatures are calculated over the resulting padded plaintext.
After padding, the data is encrypted according to the algorithm specified in the SEAL ALG field.
For SEAL ALG DES (the only non null algorithm currently supported), the data is encrypted using DES CBC, with an IV of zero.
The key used is derived from the established context key by XOR ing the context key with the hexadecimal constant f0f0f0f0f0f0f0f0.
The token emitted by GSS Delete sec context() is based on the packet format for tokens emitted by GSS GetMIC().
Tokens emitted by GSS Delete sec context() contain the hex value 01 02 in this field.
DES MAC MD5 01 00
MD2.5 02 00 DES MAC 4
SGN ALG and SND SEQ will be calculated as for tokens emitted by GSS GetMIC().
The SGN CKSUM will be calculated as for tokens emitted by GSS GetMIC(), except that the user data component of the "to be  signed" data will be a zero length string.
Name Types and Object Identifiers
This section discusses the name types which may be passed as input to the Kerberos V5 GSS API mechanism's GSS Import name() call, and their associated identifier values.
It defines interface elements in support of portability, and assumes use of C language bindings per RFC 1509.
In addition to specifying OID values for name type identifiers, symbolic names are included and recommended to GSS API implementors in the interests of convenience to callers.
It is understood that not all implementations of the Kerberos V5 GSS API mechanism need support all name types in this list, and that additional name forms will likely be added to this list over time.
Further, the definitions of some or all name types may later migrate to other, mechanism independent, specifications.
The occurrence of a name type in this specification is specifically not intended to suggest that the type may be supported only by an implementation of the Kerberos V5 mechanism.
In particular, the occurrence of the string " KRB5 " in the symbolic name strings constitutes a means to unambiguously register the name strings, avoiding collision with other documents; it is not meant to limit the name types' usage or applicability.
For purposes of clarification to GSS API implementors, this section's discussion of some name forms describes means through which those forms can be supported with existing Kerberos technology.
These discussions are not intended to preclude alternative implementation strategies for support of the name forms within Kerberos mechanisms or mechanisms based on other technologies.
To enhance application portability, implementors of mechanisms are encouraged to support name forms as defined in this section, even if their mechanisms are independent of Kerberos V5.
This section discusses name forms which are to be supported by all conformant implementations of the Kerberos V5 GSS API mechanism.
This name form shall be represented by the Object Identifier {iso(1) member body(2)
The recommended symbolic name for this type is "GSS KRB5 NT PRINCIPAL NAME".
This name type corresponds to the single string representation of a Kerberos name.
(Within the MIT Kerberos V5 implementation, such names are parseable with the krb5 parse name() function.)
The elements included within this name representation are as follows, proceeding from the beginning of the string:
Arbitrary octets may be included within principal name components, with the following constraints and special considerations: (1a)
If no realm name element is included, the local realm name is assumed.
Host Based Service Name Form
This name form has been incorporated at the mechanism independent GSS API level as of GSS API, Version 2.
This subsection retains the Object Identifier and symbolic name assignments previously made at the Kerberos V5 GSS API mechanism level, and adopts the definition as promoted to the mechanism independent level.
This name form shall be represented by the Object Identifier {iso(1) member body(2)
The previously recommended symbolic name for this type is "GSS KRB5 NT HOSTBASED SERVICE NAME".
The currently preferred symbolic name for this type is "GSS C NT HOSTBASED SERVICE".
This name type is used to represent services associated with host computers.
This name form is constructed using two elements, "service" and "hostname", as follows:
service@hostname When a reference to a name of this type is resolved, the "hostname" is canonicalized by attempting a DNS lookup and using the fully  qualified domain name which is returned, or by using the "hostname" as provided if the DNS lookup fails.
The canonicalization operation also maps the host's name into lower case characters.
The "hostname" element may be omitted.
Values for the "service" element will be registered with the IANA.
Exported Name Object Form for Kerberos V5 Mechanism Support for this name form is not required for GSS V1 implementations, but will be required for use in conjunction with the GSS Export name() call planned for GSS API Version 2.
Use of this name form will be signified by a "GSS API Exported Name Object" OID value which will be defined at the mechanism independent level for GSS API Version 2.
This name type represents a self describing object, whose framing structure will be defined at the mechanism independent level for GSS API Version 2.
When generated by the Kerberos V5 mechanism, the Mechanism OID within the exportable name shall be that of the Kerberos V5 mechanism.
The name component within the exportable name shall be a contiguous string with structure as defined for the Kerberos Principal Name Form.
In order to achieve a distinguished encoding for comparison purposes, the following additional constraints are imposed on the export operation: (1) all occurrences of the characters `@
This section discusses additional name forms which may optionally be supported by implementations of the Kerberos V5 GSS API mechanism.
It is recognized that some of the name forms cited here are derived from UNIX(tm) operating system platforms; some listed forms may be irrelevant to non UNIX platforms, and definition of additional forms corresponding to such platforms may also be appropriate.
It is also recognized that OS specific functions outside GSS API are likely to exist in order to perform translations among these forms, and that GSS API implementations supporting these forms may themselves be layered atop such OS specific functions.
Inclusion of this support within GSS API implementations is intended as a convenience to applications.
This name form shall be represented by the Object Identifier {iso(1) member body(2)
The recommended symbolic name for this type is "GSS KRB5 NT USER NAME".
This name type is used to indicate a named user on a local system.
Its interpretation is OS specific.
This name form is constructed as:
username Assuming that users' principal names are the same as their local operating system names, an implementation of GSS Import name() based on Kerberos V5 technology
This name form shall be represented by the Object Identifier {iso(1) member body(2)
gssapi(2) generic(1) machine uid name(2)}.
The recommended symbolic name for this type is "GSS KRB5 NT MACHINE UID NAME".
This name type is used to indicate a numeric user identifier corresponding to a user on a local system.
Its interpretation is OS specific.
The gss buffer desc representing a name of this type should contain a locally significant uid t, represented in host byte order.
The GSS Import name() operation resolves this uid into a username, which is then treated as the User Name Form.
This name form shall be represented by the Object Identifier {iso(1) member body(2)
) generic(1) string uid name(3)}.
The recommended symbolic name for this type is "
GSS KRB5 NT STRING UID NAME".
This name type is used to indicate a string of digits representing the numeric user identifier of a user on a local system.
Its interpretation is OS specific.
This name type is similar to the Machine UID Form, except that the buffer contains a string representing the uid t. 3.
The Kerberos V5 protocol uses different credentials (in the GSSAPI sense) for initiating and accepting security contexts.
Normal clients receive a ticket granting ticket (TGT) and an associated session key at "login" time; the pair of a TGT and its corresponding session key forms a credential which is suitable for initiating security contexts.
A ticket granting ticket, its session key, and any other (ticket, key) pairs obtained through use of the ticket  granting ticket, are typically stored in a Kerberos V5 credentials cache, sometimes known as a ticket file.
The encryption key used by the Kerberos server to seal tickets for a particular application service forms the credentials suitable for accepting security contexts.
These service keys are typically stored in a Kerberos V5 key table, or srvtab file.
In addition to their use as accepting credentials, these service keys may also be used to obtain initiating credentials for their service principal.
The Kerberos V5 mechanism's credential handle may contain references to either or both types of credentials.
It is a local matter how the Kerberos V5 mechanism implementation finds the appropriate Kerberos V5 credentials cache or key table.
However, when the Kerberos V5 mechanism attempts to obtain initiating credentials for a service principal which are not available in a credentials cache, and the key for that service principal is available in a Kerberos V5 key table, the mechanism should use the service key to obtain initiating credentials for that service.
This should be accomplished by requesting a ticket granting ticket from the Kerberos Key Distribution Center (KDC), and decrypting the KDC's reply using the service key.
This section defines parameter values used by the Kerberos V5 GSS API mechanism.
It defines interface elements in support of portability, and assumes use of C language bindings per RFC 1509.
This section recommends common symbolic names for minor status values to be returned by the Kerberos V5 GSS API mechanism.
Use of these definitions will enable independent implementors to enhance application portability across different implementations of the mechanism defined in this specification.
(In all cases, implementations of GSS Display status() will enable callers to convert minor status indicators to text representations.)
Each implementation should make available, through include files or other means, a facility to translate these symbolic names into the concrete values which a particular GSS API implementation uses to represent the minor status values specified in this section.
It is recognized that this list may grow over time, and that the need for additional minor status codes specific to particular implementations may arise.
It is recommended, however, that implementations should return a minor status value as defined on a mechanism wide basis within this section when that code is accurately representative of reportable status rather than using a separate, implementation defined code.
Non Kerberos specific codes GSS KRB5 S G BAD SERVICE
"No @ in SERVICE NAME name string"
/ GSS KRB5 S G
/ GSS KRB5 S G VALIDATE
"Couldn't allocate gss buffer t data"
/ GSS KRB5 S G WRONG SIZE /
/ GSS KRB5 S KG CONTEXT ESTABLISHED /
This section defines Quality of Protection (QOP) values to be used with the Kerberos V5 GSS API mechanism as input to GSS Wrap() and GSS GetMIC() routines in order to select among alternate integrity and confidentiality algorithms.
Additional QOP values may be added in future versions of this specification.
Non overlapping bit positions are and will be employed in order that both integrity and confidentiality QOP may be selected within a single parameter, via inclusive OR of the specified integrity and confidentiality values.
The following Quality of Protection (QOP) values are currently defined for the Kerberos V5 GSS API mechanism, and are used to select among alternate integrity checking algorithms.
/ GSS KRB5 INTEG C QOP DES MD5
/ GSS KRB5 INTEG C QOP DES MAC
Confidentiality Algorithms Only one confidentiality QOP value is currently defined for the Kerberos V5 GSS API mechanism:
If non zero confidentiality QOP values are defined in future to represent different algorithms, therefore, the bit positions containing those values should be cleared before being returned by implementations of GSS GetMIC() and GSS
All implementations of this specification shall be capable of accepting buffers of at least 16 Kbytes as input to GSS GetMIC()
, GSS VerifyMIC(), and GSS Wrap(), and shall be capable of accepting the output token generated by GSS Wrap() for a 16 Kbyte input buffer as input to GSS Unwrap().
Support for larger buffer sizes is optional but recommended.
Security Considerations Security issues are discussed throughout this memo.
AUTHOR'S ADDRESS John Linn OpenVision Technologies
One Main St. Cambridge, MA  02142
