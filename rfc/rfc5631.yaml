- title: __initial_text__
  contents:
  - '           Session Initiation Protocol (SIP) Session Mobility

    '
- title: Abstract
  contents:
  - "Abstract\n   Session mobility is the transfer of media of an ongoing communication\n\
    \   session from one device to another.  This document describes the\n   basic\
    \ approaches and shows the signaling and media flow examples for\n   providing\
    \ this service using the Session Initiation Protocol (SIP).\n   Service discovery\
    \ is essential to locate targets for session transfer\n   and is discussed using\
    \ the Service Location Protocol (SLP) as an\n   example.  This document is an\
    \ informational document.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright and License Notice
  contents:
  - "Copyright and License Notice\n   Copyright (c) 2009 IETF Trust and the persons\
    \ identified as the\n   document authors.  All rights reserved.\n   This document\
    \ is subject to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF\
    \ Documents\n   (http://trustee.ietf.org/license-info) in effect on the date of\n\
    \   publication of this document.  Please review these documents\n   carefully,\
    \ as they describe your rights and restrictions with respect\n   to this document.\
    \  Code Components extracted from this document must\n   include Simplified BSD\
    \ License text as described in Section 4.e of\n   the Trust Legal Provisions and\
    \ are provided without warranty as\n   described in the BSD License.\n   This\
    \ document may contain material from IETF Documents or IETF\n   Contributions\
    \ published or made publicly available before November\n   10, 2008.  The person(s)\
    \ controlling the copyright in some of this\n   material may not have granted\
    \ the IETF Trust the right to allow\n   modifications of such material outside\
    \ the IETF Standards Process.\n   Without obtaining an adequate license from the\
    \ person(s) controlling\n   the copyright in such materials, this document may\
    \ not be modified\n   outside the IETF Standards Process, and derivative works\
    \ of it may\n   not be created outside the IETF Standards Process, except to format\n\
    \   it for publication as an RFC or to translate it into languages other\n   than\
    \ English.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Overview ........................................................3\n\
    \   2. Requirements ....................................................4\n  \
    \ 3. Roles of Entities ...............................................4\n   4.\
    \ Device Discovery ................................................5\n   5. Session\
    \ Mobility ................................................7\n      5.1. Options\
    \ for Session Mobility ...............................7\n           5.1.1. Transfer\
    \ and Retrieval ..............................7\n           5.1.2. Whole and Split\
    \ Transfer ............................7\n           5.1.3. Transfer Modes ......................................8\n\
    \                  5.1.3.1. Mobile Node Control (MNC) Mode .............8\n  \
    \                5.1.3.2. Session Handoff (SH) Mode ..................8\n    \
    \       5.1.4. Types of Transferred Media ..........................8\n      5.2.\
    \ Addressing of Local Devices ................................9\n      5.3. Mobile\
    \ Node Control Mode ..................................10\n           5.3.1. Transferring\
    \ a Session to a Single Local Device ....10\n                  5.3.1.1. RTP Media\
    \ .................................10\n                  5.3.1.2. MSRP Sessions\
    \ .............................11\n           5.3.2. Transfer to Multiple Devices\
    \ .......................13\n           5.3.3. Retrieval of a Session .............................16\n\
    \      5.4. Session Handoff (SH) mode .................................16\n  \
    \         5.4.1. Transferring a Session to a Single Local Device ....16\n    \
    \       5.4.2. Retrieval of a Session .............................19\n      \
    \     5.4.3. Transfer to Multiple Devices .......................21\n      5.5.\
    \ Distributing Sessions for Incoming Call ...................23\n      5.6. Use\
    \ of ICE in Session Mobility ............................24\n   6. Reconciling\
    \ Device Capability Differences ......................25\n      6.1. Codec Differences\
    \ .........................................25\n      6.2. Display Resolution and\
    \ Bandwidth Differences ..............27\n   7. Simultaneous Session Transfer\
    \ ..................................27\n   8. Session Termination ............................................28\n\
    \   9. Security Considerations ........................................29\n  \
    \    9.1. Authorization for Using Local Devices .....................29\n    \
    \  9.2. Maintaining Media Security During Session Mobility ........29\n      \
    \     9.2.1. Establishing Secure RTP Using SDP ..................29\n        \
    \   9.2.2. Securing Media Using the Transport Layer ...........31\n      9.3.\
    \ Flooding Attacks in MNC Mode ..............................31\n   10. Acknowledgments\
    \ ...............................................32\n   11. References ....................................................32\n\
    \      11.1. Normative References .....................................32\n  \
    \    11.2. Informative References ...................................33\n"
- title: 1.  Overview
  contents:
  - "1.  Overview\n   As mobile devices improve and include more enhanced capabilities\
    \ for\n   IP-based multimedia communications, they will remain limited in terms\n\
    \   of bandwidth, display size, and computational power.  Stationary IP\n   multimedia\
    \ endpoints (including hardware IP phones, videoconferencing\n   units, embedded\
    \ devices and software phones) allow more convenience\n   of use, but are not\
    \ mobile.  Moving active multimedia sessions\n   between these devices allows\
    \ mobile and stationary devices to be used\n   concurrently or interchangeably\
    \ in mid-session, combining their\n   advantages into a single \"virtual device\"\
    .  An approach to session\n   mobility based on the Session Initiation Protocol\
    \ (SIP) [1] was\n   described first in [20], where two different methods are proposed:\n\
    \   third-party call control (3pcc) [2] and the REFER method [3].\n   This document\
    \ expands on this concept, defining a framework for\n   session mobility that\
    \ allows a Mobile Node to discover available\n   devices and to include them in\
    \ an active session.  In particular, the\n   framework for session mobility presented\
    \ in this document describes\n   basic approaches for using existing protocols\
    \ and shows the signaling\n   and media flow examples for providing session mobility\
    \ using SIP.  It\n   is intended as an informational document.\n   The devices\
    \ selected as session transfer targets may be either\n   personal or public. \
    \ Personal devices are ones used by a single\n   individual, such as one's PC\
    \ or phone.  Public devices are ones\n   available for use by a large group of\
    \ people and include large\n   conference-room displays.  Two capabilities are\
    \ required to transfer\n   sessions:\n      Device Discovery - At all times, a\
    \ user is aware of the devices\n      that are available in his local area, along\
    \ with their\n      capabilities.\n      Session Mobility - While in a session\
    \ with a remote participant,\n      the user may transfer any subset of the active\
    \ media sessions to\n      one or more devices.\n   This document describes session\
    \ mobility examples for SIP.  It does\n   not mandate any particular protocol\
    \ for device discovery.  Many\n   different protocols exist and we discuss the\
    \ tradeoffs involved in\n   choosing between them.  For our examples, we use the\
    \ Service Location\n   Protocol (SLP) [17], primarily because it is the only such\
    \ protocol\n   standardized by the IETF.\n"
- title: 2.  Requirements
  contents:
  - "2.  Requirements\n   This session mobility framework seeks to fulfill the following\n\
    \   requirements:\n   o  REQ 1: Backward Compatibility - We distinguish two kinds\
    \ of\n      devices.  Enhanced devices support the call flows described in\n \
    \     Section 5 and can perform discovery, while basic devices can do\n      neither\
    \ and only have basic SIP capabilities.  Devices initiating\n      session mobility\
    \ must have enhanced functionality, while all\n      others can be either basic\
    \ or enhanced devices.  This includes the\n      transfer destinations, such as\
    \ the local video camera, as well as\n      the device being used by the remote\
    \ participant.\n   o  REQ 2: Flexibility - Differences in device capabilities\
    \ should be\n      reconciled.  Transfer should be possible to devices that do\
    \ not\n      support the codec being used in the session, and even to devices\n\
    \      that do not have a codec in common with the remote participant.  A\n  \
    \    transfer should also take into account device differences in\n      display\
    \ resolution and bandwidth.\n   o  REQ 3: Minimal Disruption - Session transfer\
    \ should involve\n      minimal disruption of the media flow and should not appear\
    \ to the\n      remote participant as a new call.\n"
- title: 3.  Roles of Entities
  contents:
  - "3.  Roles of Entities\n   Session mobility involves five types of components:\
    \ A Correspondent\n   Node (CN), a Mobile Node (MN), one or more local devices\
    \ used as\n   targets for session transfer, an SLP [17] Directory Agent (DA),\
    \ and,\n   optionally, a transcoder.  The Correspondent Node (CN) is a basic\n\
    \   multimedia endpoint being used by a remote participant and may be\n   located\
    \ anywhere.  It may be a SIP User Agent (UA), or a Public\n   Switched Telephone\
    \ Network (PSTN) phone reachable through a gateway.\n   The Mobile Node (MN) is\
    \ a mobile device, containing a SIP UA for\n   standard SIP call setup, as well\
    \ as specialized SIP-handling\n   capabilities for session mobility, and an SLP\
    \ [17] User Agent (UA)\n   for discovering local devices.  The local devices are\
    \ located in the\n   user's local environment for discovery and use in his current\n\
    \   session.  They may be mobility-enhanced or basic.  Basic devices,\n   such\
    \ as IP phones, are SIP-enabled, but have no other special\n   capabilities. \
    \ Mobility-enhanced devices have SLP Service Agent\n   capabilities for advertising\
    \ their services and session mobility\n   handling.  They also contain an SLP\
    \ UA, whose purpose will be\n   explained in the discussion of multi-device systems\
    \ in Section 5.4.3.\n   The SLP Directory Agent (DA) keeps track of devices, including\
    \ their\n   locations and capabilities.  The use of SLP will be described in more\n\
    \   detail in Section 4.  SIP-based transcoding services [18] are used,\n   when\
    \ necessary, to translate between media streams, as described in\n   Section 6.\n"
- title: 4.  Device Discovery
  contents:
  - "4.  Device Discovery\n   A Mobile Node must be able to discover suitable devices\
    \ in its\n   vicinity.  This is outside the scope of SIP, and a separate service\n\
    \   location protocol is needed.  It is outside the scope of this\n   document\
    \ to define any service location protocol.  This section\n   discusses various\
    \ options, and describes one of them in more detail.\n   While having a global\
    \ infrastructure for discovering devices or other\n   services in any location\
    \ would be desirable, nothing of this sort is\n   currently deployed or standardized.\
    \  However, this document assumes\n   that such an infrastructure is unnecessary\
    \ for discovering devices\n   that are in close proximity, such as in the same\
    \ room.  It is\n   possible for such devices to be discovered through direct\n\
    \   communication over a short-range wireless protocol such as the\n   Bluetooth\
    \ Session Description Protocol (SDP).  Two other categories\n   of service discovery\
    \ protocols may be used, assuming that devices\n   that are physically close to\
    \ each other are also within the same\n   network and/or part of the same DNS\
    \ domain.  Multicast-based\n   protocols, such as SLP [17] (in its serverless\
    \ mode) or Bonjour\n   (mDNS-SD [30]), may be used as long as the Mobile Node\
    \ is within the\n   same subnet as the local devices.  When devices are part of\
    \ the same\n   DNS domain, server-mode SLP or non-multicast DNS Service Discovery\n\
    \   (DNS-SD) [29] are possible solutions.  Such protocols can discover\n   devices\
    \ within a larger geographical area, and have the advantage\n   over the first\
    \ category in that they allow for the discovery of\n   devices at different location\
    \ granularities, such as at the room or\n   building level, and in locations other\
    \ than the current one.  In\n   order to discover devices in a specific location,\
    \ location\n   attributes, such as room number, must be used in the search, e.g.,\
    \ as\n   service attributes in SLP or as a domain name in DNS-SD.  The mobile\n\
    \   device must ascertain its location in order to perform this search.\n   We\
    \ note that many of these techniques could be difficult to implement\n   in practice.\
    \  For example, different wireless networks may be\n   deployed by different organizations,\
    \ which could make it unrealistic\n   to have a common DNS setup.\n   We describe\
    \ here how SLP is used in server mode in general, then how\n   it may be used\
    \ to discover devices based on their location.  As\n   mentioned before, this\
    \ is only one of many ways to perform service\n   discovery.  SLP identifies services\
    \ by a \"service type\", a \"service\n   URL\", which can be any URL, and a set\
    \ of attributes, defined as\n   name-value pairs.  The attributes may be information\
    \ such as vendor,\n   supported media codecs, and display resolution.  SLP defines\
    \ three\n   roles: Service Agents (SAs), which send descriptions of services;\n\
    \   User Agents (UAs), which query for services; and Directory Agents\n   (DAs),\
    \ which receive the registrations and queries.  An SA registers\n   a service\
    \ description to a DA with a service registration (SrvReg)\n   message that includes\
    \ its service type, service URL, and attribute-\n   value set.  A UA queries for\
    \ services by sending a service request\n   (SrvRqst) message, narrowing the query\
    \ based on service type and\n   attribute values.  It receives a reply (SrvRply)\
    \ that contains a list\n   of URLs of services that match the query.  It may then\
    \ ascertain the\n   specific attributes of each service using an attribute request\n\
    \   (AttrRqst) message.\n   This document assumes the following use of SLP for\
    \ discovering local\n   devices.  Devices have a service type of \"sip-device\"\
    \ and a SIP URI\n   as the service URI.  Section 5.2 describes the form of this\
    \ URI.\n   Attributes specify device characteristics such as vendor, supported\n\
    \   media codec, display resolution, as well as location coordinates,\n   such\
    \ as street address and room number.  SAs are co-located with SIP\n   UAs on session-mobility\
    \ enhanced devices, while a separate SA is\n   available to send SrvReg messages\
    \ on behalf of basic devices, which\n   do not have integrated SLP SAs.\n   The\
    \ Mobile Node includes an SLP UA that discovers available local\n   devices and\
    \ displays them to the user, showing, for example, a map of\n   all devices in\
    \ a building or a list of devices in a current room.\n   Once the MN receives\
    \ its current location in some manner, its SLP UA\n   issues a SrvRqst message\
    \ to the DA requesting all SIP devices, using\n   the location attributes to filter\
    \ out those that are not in the\n   current room.  A SrvRply message is sent to\
    \ the mobile device with a\n   list of SIP URIs for all devices in the room. \
    \ A separate attribute\n   request (AttrRqst) is then sent for each URL to get\
    \ the attributes of\n   the service.  The MN displays for the user the available\
    \ devices in\n   the room and their attributes.  Figure 1 shows this protocol\
    \ flow.\n           Device                       DA                      MN\n\
    \             |(1) SrvReg                |                       |\n         \
    \    |------------------------->|                       |\n             |(2) SrvRply\
    \               |                       |\n             |<-------------------------|\
    \                       |\n             |                          |         \
    \              |\n             |                          |                  \
    \     |\n             |                          |(3) SrvRqst            |\n \
    \            |                          |<----------------------|\n          \
    \   |                          |(4) SrvRply  URL list  |\n             |     \
    \                     |---------------------->|\n             |              \
    \            |(5) AttrRqst URL1      |\n             |                       \
    \   |<----------------------|\n             |                          |(6) AttrRply\
    \           |\n             |                          |---------------------->|\n\
    \             |                          |     ...               |\n         \
    \    |                          |                       |\n      Figure 1.  SLP\
    \ message flow for the device to register its service\n                 and the\
    \ MN to discover it, along with its attributes.\n"
- title: 5.  Session Mobility
  contents:
  - '5.  Session Mobility

    '
- title: 5.1.  Options for Session Mobility
  contents:
  - '5.1.  Options for Session Mobility

    '
- title: 5.1.1.  Transfer and Retrieval
  contents:
  - "5.1.1.  Transfer and Retrieval\n   Session mobility involves both transfer and\
    \ retrieval of an active\n   session.  A transfer means to move the session on\
    \ the current device\n   to one or more other devices.  A retrieval causes a session\
    \ currently\n   on another device to be transferred to the local device.  This\
    \ may\n   mean returning a session to the device on which it had originally\n\
    \   been before it was transferred to another device.  For example, after\n  \
    \ discovering a large video monitor, a user transfers the video output\n   stream\
    \ to that device; when he walks away, he returns the stream to\n   his mobile\
    \ device for continued communication.  One may also move a\n   session to a device\
    \ that had not previously carried it.  For example,\n   a participant in an audio\
    \ call on his stationary phone may leave his\n   office in the middle of the call\
    \ and transfer the call to the mobile\n   device as he is running out the door.\n"
- title: 5.1.2.  Whole and Split Transfer
  contents:
  - "5.1.2.  Whole and Split Transfer\n   The set of session media may either be transferred\
    \ completely to a\n   single device or split across multiple devices.  For instance,\
    \ a user\n   may only wish to transfer the video component of his session while\n\
    \   maintaining the audio component on his PDA.  Alternatively, he may\n   find\
    \ separate video and audio devices and wish to transfer one media\n   type to\
    \ each.  Furthermore, even the two directions of a full-duplex\n   session may\
    \ be split across devices.  For example, a PDA's display\n   may be too small\
    \ for a good view of the other call participant, so\n   the user may transfer\
    \ video output to a projector and continue to use\n   the PDA camera.\n"
- title: 5.1.3.  Transfer Modes
  contents:
  - "5.1.3.  Transfer Modes\n   Two different modes are possible for session transfer,\
    \ Mobile Node\n   Control (MNC) mode and Session Handoff (SH) mode.  We describe\
    \ them\n   below in turn.\n"
- title: 5.1.3.1.  Mobile Node Control (MNC) Mode
  contents:
  - "5.1.3.1.  Mobile Node Control (MNC) Mode\n   In Mobile Node Control mode, the\
    \ Mobile Node uses third-party call\n   control [2].  It establishes a SIP session\
    \ with each device used in\n   the transfer and updates its session with the CN,\
    \ using the SDP\n   parameters to establish media sessions between the CN and\
    \ each\n   device, which take the place of the current media sessions with the\n\
    \   CN.  The shortcoming of this approach is that it requires the MN to\n   remain\
    \ active to maintain the sessions.\n"
- title: 5.1.3.2.  Session Handoff (SH) Mode
  contents:
  - "5.1.3.2.  Session Handoff (SH) Mode\n   A user may need to transfer a session\
    \ completely because, for\n   example, the battery on his mobile device is running\
    \ out or he is\n   losing radio connectivity.  Alternatively, the user of a stationary\n\
    \   device who leaves the area and wishes to transfer the session to his\n   mobile\
    \ device will not want the session to remain on the stationary\n   device when\
    \ he is away, since it will allow others to easily tamper\n   with his call. \
    \ In such a case, Session Handoff mode, which\n   completely transfers the session\
    \ signaling and media to another\n   device, is useful.\n   Based on our experiments,\
    \ we have found MNC mode to be more\n   interoperable with existing devices used\
    \ on the CN's side.  The\n   remainder of this section describes the transfer,\
    \ retrieval, and\n   splitting of sessions in each of the two session transfer\
    \ modes.\n"
- title: 5.1.4.  Types of Transferred Media
  contents:
  - "5.1.4.  Types of Transferred Media\n   A communication session may consist of\
    \ a number of media types, and a\n   user should be able to transfer any of them\
    \ to his device of choice.\n   This document considers audio, video, and messaging.\
    \  Audio and video\n   are carried by RTP and negotiated in the SDP body of the\
    \ SIP requests\n   and responses.  Three different methods exist for carrying\
    \ text\n   messages, and possibly other MIME types, that are suitable for SIP\n\
    \   endpoints.  RTP may be used to transport text payloads in real time,\n   based\
    \ on [9].  Any examples given for audio and video will work\n   identically for\
    \ text, as only the payloads differ.  For the transfer\n   of entire messages\
    \ (as opposed to a small number of characters in\n   RTP), either the SIP MESSAGE\
    \ method [21] or the Message Session Relay\n   Protocol (MSRP) [7] may be used.\
    \  MESSAGE is used to send individual\n   page-mode messages.  The messages are\
    \ not associated with a session,\n   and no negotiation is done to establish a\
    \ session.  Typically, a SIP\n   UA will allow the user to send MESSAGE requests\
    \ during an established\n   dialog, and they are sent to the same contact address\
    \ as all\n   signaling messages are sent in mid-session.  We discuss later how\n\
    \   these messages are affected by session mobility.  MSRP, on the other\n   hand,\
    \ is based on sessions that are established like the real-time\n   media sessions\
    \ previously described.  As such, transferring them is\n   similar to transferring\
    \ other media sessions.  However, this document\n   will point out where special\
    \ handling is necessary for these types of\n   sessions.\n"
- title: 5.2.  Addressing of Local Devices
  contents:
  - "5.2.  Addressing of Local Devices\n   As stated before, this document assumes\
    \ both personal and public\n   devices.  We assume that public devices use a dedicated\
    \ Address of\n   Record (AOR), such as sip:device11@example.com.  A personal device\n\
    \   already uses the owner's AOR, so that he should be reachable there;\n   that\
    \ AOR could also be used for transferring sessions.  However, it\n   is preferable\
    \ to distinguish the role of a device as a transfer\n   target from its existing\
    \ role.  Therefore, all devices are assumed to\n   have dedicated AORs.\n   Since\
    \ every transfer device has its own AOR, there is a one-to-one\n   mapping between\
    \ AOR and device.  Therefore, a transfer request could\n   be addressed to the\
    \ AOR, which would resolve to the device.  However,\n   in Section 5.4.3, we present\
    \ a model where devices create multi-\n   device systems to pool their capabilities.\
    \  Therefore, a single\n   device must be reachable by multiple URIs representing\
    \ different\n   combinations of devices.  The appropriate solution is to define\
    \ each\n   combination of devices with a Globally Routable UA URI (GRUU) [12].\n\
    \   Therefore, we assume the following addressing for the remainder of\n   the\
    \ document.  As mentioned earlier, a device has a unique AOR.  It\n   registers\
    \ a separate contact URI for itself and for each system of\n   devices that it\
    \ controls.  Each contact has an associated GRUU, which\n   is registered with\
    \ SLP as the Service URI, and may be directly\n   addressed by another device\
    \ in a request sent through the proxy.\n   When the proxy forwards the request\
    \ to the device, it will replace\n   the GRUU with the contact URI, as described\
    \ in [12].  Therefore, the\n   contact URI, not the associated GRUU, will be used\
    \ by devices to\n   determine whether the request is for the device itself or\
    \ for a\n   multi-device system.  We assume that the public GRUU is used.\n"
- title: 5.3.  Mobile Node Control Mode
  contents:
  - '5.3.  Mobile Node Control Mode

    '
- title: 5.3.1.  Transferring a Session to a Single Local Device
  contents:
  - '5.3.1.  Transferring a Session to a Single Local Device

    '
- title: 5.3.1.1.  RTP Media
  contents:
  - "5.3.1.1.  RTP Media\n         local device                MN                \
    \        CN\n           |(1) INVITE no sdp        |                         |\n\
    \           |<------------------------|                         |\n          \
    \ |(2) 200 OK local params  |                         |\n           |------------------------>|\
    \                         |\n           |                         |(3) INVITE\
    \ local params  |\n           |                         |------------------------>|\n\
    \           |    RTP                  |                         |\n          \
    \ |<..................................................|\n           |        \
    \                 |(4) 200 OK CN params     |\n           |                  \
    \       |<------------------------|\n           |                         |(5)\
    \ ACK                  |\n           |                         |------------------------>|\n\
    \           |(6) ACK CN params        |                         |\n          \
    \ |<------------------------|        RTP              |\n           |..................................................>|\n\
    \           |                         |                         |\n          \
    \ |                         |                         |\n      Figure 2.  Mobile\
    \ Node Control mode flow for transfer to a single\n                 device.\n\
    \   Figure 2 shows the message flow for transferring a session to a\n   single\
    \ local device.  It follows Third Party Call Control Flow I\n   (specified in\
    \ [2]), which is recommended as long as the endpoints\n   will immediately answer.\
    \  The MN sends a SIP INVITE request to the\n   local device used for the transfer,\
    \ requesting that a new session be\n   established, but does not include an SDP\
    \ body.  The local device's\n   response contains an SDP body that includes the\
    \ address and port it\n   will use for any media, as well as a list of codecs\
    \ it supports for\n   each.  The MN updates the session with the CN by sending\
    \ an INVITE\n   request (re-INVITE) containing the local device's media parameters\
    \ in\n   the SDP body, as follows:\n      v=0\n      c=IN IP4 av_device.example.com\n\
    \      m=audio 4400 RTP/AVP 0 8\n      a=rtpmap:0 PCMU/8000\n      a=rtpmap:8\
    \ PCMA/8000\n      m=video 5400 RTP/AVP 31 34\n      a=rtpmap:31 H261/90000\n\
    \      a=rtpmap:34 H263/90000\n   Sending both audio and video media lines will\
    \ transfer both media\n   sessions of an existing audio/video call to the local\
    \ device.\n   Alternatively, the MN may select a subset of the media available\
    \ on\n   the local device, and use the local device's parameters for those\n \
    \  media in the request sent to the CN, while continuing to use its own\n   parameters\
    \ for the rest of the media.  For example, if it only wishes\n   to transfer an\
    \ audio session to a local device that supports audio\n   and video, it will isolate\
    \ the appropriate media line for audio from\n   the response received from the\
    \ local device and put it in the request\n   sent to the CN, along with its own\
    \ video parameters.  The CN will\n   send a response and includes, in its body,\
    \ the media parameters that\n   it will use, which may or may not be the same\
    \ as the ones used in the\n   existing session.  The MN will send an ACK message\
    \ to the local\n   device, which includes these parameters in the body.  The MN\
    \ will\n   establish a session with the local device and maintain its session\n\
    \   with the CN, while the media flow will be established directly\n   between\
    \ the CN and the local device.  Only the MN, who will be in an\n   ongoing session\
    \ with the CN, will later be allowed to retrieve the\n   media session.  Parsing\
    \ of unknown SDP attributes by the controller\n   is discussed in [2].\n"
- title: 5.3.1.2.  MSRP Sessions
  contents:
  - "5.3.1.2.  MSRP Sessions\n   In figure 2, the message sequence for transferring\
    \ an MSRP message\n   session using MNC mode is identical to that used for audio\
    \ or video,\n   although the contents of the messages differ.  To simplify the\n\
    \   example, we assume that an MSRP session, with no other media, is\n   being\
    \ transferred to a local messaging node, MSGN.  In the following\n   flow, we\
    \ refer to the corresponding messages in Figure 2.  An empty\n   INVITE request\
    \ (1) is sent to the local messaging node, MSGN, as\n   follows:\n   INVITE sip:msgn@example.com;gr=urn:uuid:jtr5623n\
    \ SIP/2.0\n   To: <sip:msgn@example.com;gr=urn:uuid:jtr5623n>\n   From: <sip:bob@example.com>;tag=786\n\
    \   Call-ID: 893rty@mn.example.com\n   Content-Type: application/sdp\n   The messaging\
    \ node responds with all of its media capabilities,\n   including MSRP, as follows\
    \ (2):\n   SIP/2.0 200 OK\n   To: <sip:msgn@example.com;gr=urn:uuid:jtr5623n;tag=087js>;tag=087js\n\
    \   From: <sip:bob@example.com>;tag=786\n   Call-ID: 893rty@mn.example.com\n \
    \  Content-Type: application/sdp\n   v=0\n   c=IN IP4 msgn.example.com\n   m=message\
    \ 52000 msrp/tcp *\n   a=accept-types:text/plain\n   a=path:msrp://msgn.example.com:12000/kjhd37s2s2;tcp\n\
    \   m=audio 4400 RTP/AVP 0 8\n   a=rtpmap:0 PCMU/8000\n   a=rtpmap:8 PCMA/8000\n\
    \   m=video 5400 RTP/AVP 31 34\n   a=rtpmap:31 H261/90000\n   a=rtpmap:34 H263/90000\n\
    \   The same request is then sent by the MN to the CN (3), but containing\n  \
    \ the MSRP media and attribute lines with the path given in the MSGN\n   response\
    \ above.  The CN responds (4) with its own path.  The MN\n   includes this in\
    \ the ACK that it sends to the MSGN (6).\n   MSRP sessions are carried over a\
    \ reliable connection, using TCP or\n   TLS (Transport Layer Security).  Therefore,\
    \ unlike in the case of\n   real-time media, this connection must be established.\
    \  According to\n   the MSRP specifications, the initiator of a message session,\
    \ known as\n   the \"offerer\", must be the active endpoint, and open the TCP\n\
    \   connection between them.  In this transfer scenario, the offerer of\n   both\
    \ sessions is the MN, who is on neither end of the desired TCP\n   connection.\
    \  As such, neither endpoint will establish the connection.\n   A negotiation\
    \ mechanism could be used to assign the role of active\n   endpoint during session\
    \ setup.  However, while MSRP leaves open this\n   possibility, it is not currently\
    \ included in this document due to\n   complexity.  The only other way that such\
    \ session transfer would be\n   possible is if both the CN and the local device\
    \ ordinarily use an\n   MSRP relay [8], since no direct connection must be established\n\
    \   between them.  When each new endpoint receives the INVITE request\n   from\
    \ the MN, it will create a TLS connection with one of its\n   preconfigured relays\
    \ if such a connection does not yet exist (the CN\n   will already have one because\
    \ of its session with the MN) and receive\n   the path of the relay.  In its response\
    \ to the MN, it will include\n   the entire path that must be traversed, including\
    \ its relay, in the\n   path attribute.  For instance, the response from the MSGN\
    \ will look\n   as follows:\n   SIP/2.0 200 OK\n   To: <sip:msgn@example.com;gr=urn:uuid:jtr5623n;tag=087js>;tag=087js\n\
    \   From: <sip:bob@example.com>;tag=786\n   Call-ID: 893rty@mn.example.com\n \
    \  Content-Type: application/sdp\n   v=0\n   c=IN IP4 msgn.example.com\n   m=message\
    \ 52000 msrp/tcp *\n   a=accept-types:text/plain\n   a=path:msrp://relayA.example.com:12000/kjhd37s2s2;tcp\
    \ \\\n        path:msrp://msgn.example.com:12000/kjhd37s2s2;tcp\n   Since the\
    \ CN and the local device each establish a TLS connection\n   with their relay,\
    \ as they would for any session, and the relays will\n   establish a connection\
    \ between them when a subsequent MSRP message is\n   sent, neither party needs\
    \ to establish any special connection.  The\n   existing protocol may therefore\
    \ be used for session transfer.\n"
- title: 5.3.2.  Transfer to Multiple Devices
  contents:
  - "5.3.2.  Transfer to Multiple Devices\n   In order to split the session across\
    \ multiple devices, the MN\n   establishes a new session with each local device\
    \ through a separate\n   INVITE request, and updates the existing session with\
    \ the CN with an\n   SDP body that combines appropriate media parameters it receives\
    \ in\n   their responses.  For instance, in order to transfer an audio and\n \
    \  video call to two devices, the MN initiates separate sessions with\n   each\
    \ of them, combines the audio media line from one response and the\n   video media\
    \ line from the other, and sends them together as the\n   request to the CN, as\
    \ follows:\n   v=0\n   m=audio 48400 RTP/AVP 0\n   c= IN IP4 audio_dev.example.com\n\
    \   a=rtpmap:0 PCMU/8000\n   m=video 58400 RTP/AVP 34\n   c= IN IP4 video_dev.example.com\n\
    \   a=rtpmap:34 H263/90000\n   The CN responds with its own parameters for audio\
    \ and video.  The MN\n   splits them and sends one to each local device in the\
    \ ACK that\n   completes each session setup.\n  video_dev          audio_dev \
    \               MN                      CN\n     |                   |(1) INVITE\
    \ no sdp   |                       |\n     |                   |<-------------------|\
    \   RTP Audio           |\n     |                   |(2) 200  params     |   \
    \                    |\n     |                   |------------------->|      \
    \                 |\n     |                   |(3) INVITE no sdp   |         \
    \              |\n     |<---------------------------------------|            \
    \           |\n     |                   |(4) 200    params   |               \
    \        |\n     |--------------------------------------->|                  \
    \     |\n     |                   |                    |(5) INVITE  a/v  params|\n\
    \     |                   |                    |---------------------->|\n   \
    \  |                   |         RTP Audio  |                       |\n     |\
    \   RTP Video       |<...........................................|\n     |<...............................................................|\n\
    \     |                   |                    |(6) 200 OK             |\n   \
    \  |                   |                    |<----------------------|\n     |\
    \                   |                    |(7) ACK                |\n     |   \
    \                |                    |---------------------->|\n     |      \
    \             |(8) ACK CN audio    |                       |\n     |         \
    \          |<-------------------|   RTP Audio           |\n     |            \
    \       |...........................................>|\n     |               \
    \    |(9) ACK CN video    |                       |\n     |<---------------------------------------|\
    \   RTP Video           |\n     |...............................................................>|\n\
    \     |                   |                    |                       |\n   \
    \  |                   |                    |                       |\n      Figure\
    \ 3.  Mobile Node Control mode flow for transfer to multiple\n               \
    \  devices.\n   Splitting a full-duplex media service, such as video, across an\
    \ input\n   and an output device, such as a camera and a video display, is a\n\
    \   simple extension of this approach.  The signaling is identical to\n   that\
    \ of Figure 3, with the audio and video devices replaced by a\n   video output\
    \ and a video input device.  The SDP, however, is slightly\n   different.  The\
    \ MN invites the local devices into two different\n   sessions, but does not include\
    \ any SDP body.  They each respond with\n   all of their available media.  If\
    \ they only support unidirectional\n   media, as is the case for a camera or display-only\
    \ device, they will\n   include the \"sendonly\" or \"recvonly\" attributes. \
    \ Otherwise, the MN\n   will have to append the appropriate attribute to each\
    \ one's media\n   line before sending the combined SDP body to the CN.  That body\
    \ will\n   look as follows:\n   m=video 50900 RTP/AVP 34\n   a=rtpmap:34 H263/90000\n\
    \   a=sendonly\n   c=IN IP4 camera.example.com\n   m=video 50800 RTP/AVP 34\n\
    \   a=rtpmap:34 H263/90000\n   a=recvonly\n   c=IN IP4 display.example.com\n \
    \  In updating an SDP session, according to Section 8 of [4], the i-th\n   media\
    \ line in the new SDP corresponds to the i-th media line in the\n   previous SDP.\
    \  In the above cases, if a media type is added during\n   the transfer, the media\
    \ line(s) should follow the existing ones.\n   When an existing media is transferred\
    \ to a different device, the\n   media line should appear in the same place that\
    \ it did in the\n   previous SDP, as should the lines for all media that have\
    \ not been\n   altered.  When a duplex media stream is being split across an input\n\
    \   and output device, the stream corresponding to the input device\n   should\
    \ appear in place of the duplex media stream.  Since this new\n   stream is the\
    \ one that will be received by the CN, including it in\n   place of the old one\
    \ ensures that the CN views the new stream as a\n   replacement of the old one.\
    \  The media line corresponding to the\n   output device must appear after all\
    \ existing media lines.  In the\n   last example, if the SDP had initially contained\
    \ a video line\n   followed by an audio line, the updated SDP sent to the CN would\
    \ look\n   as follows:\n   m=video 50900 RTP/AVP 34\n   a=rtpmap:34 H263/90000\n\
    \   a=sendonly\n   c=IN IP4 camera.example.com\n   m=audio 45000 RTP/AVP 0\n \
    \  a=rtpmap:0 PCMU/8000\n   m=video 50800 RTP/AVP 34\n   a=rtpmap:34 H263/90000\n\
    \   a=recvonly\n   c=IN IP4 display.example.com\n   During the course of the session,\
    \ the CN may send a MESSAGE request\n   to the MN containing text conversation\
    \ from the remote user.  If the\n   mobile user wishes to have such messages displayed\
    \ on a device other\n   than the MN, the request is simply forwarded to that device.\
    \  The\n   forwarded message should be composed as though it were any other\n\
    \   message from the MN to the local device, and include the body of the\n   received\
    \ message.  The local device will send any MESSAGE request to\n   the MN, who\
    \ will forward it to the CN.\n"
- title: 5.3.3.  Retrieval of a Session
  contents:
  - "5.3.3.  Retrieval of a Session\n   The MN may later retrieve the session by sending\
    \ an INVITE request to\n   the CN with its own media parameters, causing the media\
    \ streams to\n   return.  It then sends a BYE message to each local device to\n\
    \   terminate the session.\n"
- title: 5.4.  Session Handoff (SH) mode
  contents:
  - '5.4.  Session Handoff (SH) mode

    '
- title: 5.4.1.  Transferring a Session to a Single Local Device
  contents:
  - "5.4.1.  Transferring a Session to a Single Local Device\n   Session Handoff mode\
    \ uses the SIP REFER method [3].  This message is\n   a request sent by a \"referrer\"\
    \ to a \"referee\", which \"refers\" it to\n   another URI, the \"refer target\"\
    , which may be a SIP URI to be\n   contacted with an INVITE or other request,\
    \ or a non-SIP URI, such as\n   a web page.  This URI is specified in the Refer-To\
    \ header.  The\n   Referred-By [5] header is used to give the referrer's identity,\
    \ which\n   is sent to the refer target for authorization.  Essential headers\n\
    \   from this message may also be encrypted and sent in the message body\n   as\
    \ Secure/Multipurpose Internet Mail Extensions (S/MIME) to\n   authenticate the\
    \ REFER request.  Figure 4 shows the flow for\n   transferring a session.\n  \
    \       device15                        MN                    CN\n           |(1)\
    \ REFER                    |                     |\n           |<----------------------------|\
    \                     |\n           |(2) 202 Accepted             |          \
    \           |\n           |---------------------------->|                    \
    \ |\n           |(3) INVITE, Replaces         |                     |\n      \
    \     |-------------------------------------------------->|\n           |    \
    \       RTP                                     |\n           |<..................................................|\n\
    \           |(4) 200 OK                   |                     |\n          \
    \ |<--------------------------------------------------|\n           |        \
    \   RTP                                     |\n           |..................................................>|\n\
    \           |(5) ACK                      |                     |\n          \
    \ |-------------------------------------------------->|\n           |        \
    \                     |(6) BYE              |\n           |                  \
    \           |<--------------------|\n           |                            \
    \ |(7) 200 OK           |\n           |                             |-------------------->|\n\
    \           |(8) NOTIFY                   |                     |\n          \
    \ |---------------------------->|                     |\n           |(9) 200 OK\
    \                   |                     |\n           |<----------------------------|\
    \                     |\n           |                             |          \
    \           |\n           |                             |                    \
    \ |\n      Figure 4.  Session Handoff mode flow for transfer to a single\n   \
    \              device.\n   The MN sends the following REFER request (1) to a local\
    \ device:\n      REFER sip:device15@example.com;gr=urn:uuid:qfnb443ccui SIP/2.0\n\
    \      To: <sip:device15@example.com;gr=urn:uuid:qfnb443ccui>\n      From: <sip:bob@example.com>\n\
    \      Refer-To:<sip:corresp@example.com;gr=urn:uuid:bbb6981;audio;video?\n  \
    \          Replaces=\"1@mn.example.com;\n                to-tag=bbb;from-tag=aaa\"\
    >\n      Referred-By: <sip:bob@example.com>\n          [S/MIME authentication\
    \ body]\n   This message refers the local device to invite the refer target, the\n\
    \   CN, into a session.  The \"audio\" and \"video\" tokens in the Refer-To\n\
    \   URI are callee capabilities [10].  Here they are used to inform the\n   referee\
    \ that it should initiate an audio and video session with the\n   CN.  Also included\
    \ in the URI is the Replaces header field,\n   specifying that a Replaces header\
    \ field should be included with the\n   specified value in the subsequent INVITE\
    \ request.  The Replaces\n   header identifies an existing session that should\
    \ be replaced by the\n   new session.  Here, the local device will request that\
    \ the CN\n   replaces its current session with the MN with the new session.\n\
    \   According to [6], the CN should only accept a request to replace a\n   session\
    \ from certain authorized categories of users.  One such type\n   of user is the\
    \ current participant in the session.  The MN may,\n   therefore, refer the local\
    \ device to replace its current session with\n   the CN.  However, it provides\
    \ authentication by encrypting several\n   headers from the original REFER request\
    \ in an S/MIME body that it\n   sends in the REFER.  The local device sends this\
    \ body to the CN.\n   This keeps a malicious user from indiscriminately replacing\
    \ another\n   user's session.  Once the local device receives the REFER request,\
    \ it\n   sends an INVITE request to the CN, and a normal session setup ensues.\n\
    \   The CN then tears down its session with the MN.\n   Once the local device\
    \ has established a session with the CN, it sends\n   a NOTIFY request to the\
    \ MN, as specified in [3].  This NOTIFY\n   contains the To (including tag), From\
    \ (including tag), and Call-ID\n   header fields from the established session\
    \ to allow the MN to\n   subsequently retrieve the session, as described in Section\
    \ 5.4.2.\n   Once a session is transferred, the destination for MESSAGE requests\n\
    \   moves automatically.  Since a new session is established between the\n   CN\
    \ and the local device, any subsequent MESSAGE requests will be sent\n   to that\
    \ device.\n   The transfer flow described above for media sessions may also be\
    \ used\n   to transfer an MSRP session.  The local device will initiate an MSRP\n\
    \   session in message (4), along with the other sessions.  The REFER\n   request\
    \ (1) indicates that an MSRP session should be established\n   using callee capabilities\
    \ in the Refer-To header field, as it does\n   for audio and video.  Such a media\
    \ feature tag, \"message\" has already\n   been defined [11].  Once the local\
    \ device receives the REFER request,\n   it initiates an MSRP session with the\
    \ CN.  As the initiator, it will\n   establish a TCP connection in order to carry\
    \ the session (as\n   specified in [7]), or will set up the session through its\
    \ relay if\n   configured to do so.\n"
- title: 5.4.2.  Retrieval of a Session
  contents:
  - "5.4.2.  Retrieval of a Session\n        device15                          MN\
    \                    CN\n            |(1) REFER                    |         \
    \            |\n            |<----------------------------|                  \
    \   |\n            |(2) 202 Accepted             |                     |\n   \
    \         |---------------------------->|                     |\n            |(3)\
    \ REFER                    |                     |\n            |---------------------------->|\
    \                     |\n            |(4) 202 Accepted             |         \
    \            |\n            |<----------------------------|                  \
    \   |\n            |                             |(5) INVITE, Replaces |\n   \
    \         |                             |-------------------->|\n            |\
    \                             |   RTP               |\n            |         \
    \                    |<....................|\n            |                  \
    \           |(6) 200 OK           |\n            |                           \
    \  |<--------------------|\n            |                             |   RTP\
    \               |\n            |                             |....................>|\n\
    \            |                             |(7) ACK              |\n         \
    \   |                             |-------------------->|\n            |     \
    \      (8) BYE           |                     |\n            |<--------------------------------------------------|\n\
    \            |           (9) 200 OK        |                     |\n         \
    \   |-------------------------------------------------->|\n            |     \
    \                        |                     |\n            |              \
    \               |                     |\n      Figure 5.  Session Handoff mode\
    \ flow for session retrieval.\n   Figure 5 shows the flow for retrieval by the\
    \ MN of a session\n   currently on a local device.  In order to better motivate\
    \ the message\n   flow, we start by describing the final INVITE (5) and work backwards.\n\
    \   In order for a device to retrieve a session in Session Handoff mode,\n   it\
    \ must initiate a session with the CN that replaces the CN's\n   existing session.\
    \  The following message is sent by the MN to the CN\n   (5):\n   INVITE sip:corresp@example.com;gr=urn:uuid:bbb6981\
    \ SIP/2.0\n   To: <sip:corresp@example.com;gr=urn:uuid:bbb6981>\n   From: <sip:bob@example.com>\n\
    \   Replaces: 1@device15.example.com;to-tag=aaa;from-tag=bbb\n   Referred-By:\
    \ <sip:device15@example.com>\n      [S/MIME authentication body]\n   Since the\
    \ users on the MN and the local device are different\n   identities, the MN needs\
    \ to be referred by the local device and\n   include its URI in the Referred-By\
    \ header, in addition to including\n   an S/MIME authentication body from the\
    \ local device, in order to be\n   permitted to replace the session.  Therefore,\
    \ the MN must receive a\n   REFER request from the local device referring it to\
    \ send this INVITE\n   request.  The user could use the user interface of the\
    \ local device\n   to send this REFER message.  However, such an interface may\
    \ not be\n   available.  Also, the user may wish to execute the transfer while\n\
    \   running out of the office with mobile device in hand.  In order for\n   the\
    \ MN to prompt the REFER from the local device, it sends a \"nested\n   REFER\"\
    \ [5], a REFER request for another REFER.  In this case, the\n   second REFER\
    \ is sent back to the Mobile Node.  That REFER must\n   specify that the Replaces\
    \ header be included in the subsequent INVITE\n   request.  The REFER request\
    \ from the local device to the MN (3) is\n   composed as follows:\n"
- title: REFER sip:bob@example.com;gr=urn:uuid:ytav223h67gb3 SIP/2.0
  contents:
  - 'REFER sip:bob@example.com;gr=urn:uuid:ytav223h67gb3 SIP/2.0

    '
- title: 'To: <sip:bob@example.com;gr=urn:uuid:ytav223h67gb3>'
  contents:
  - 'To: <sip:bob@example.com;gr=urn:uuid:ytav223h67gb3>

    '
- title: 'From: <sip:device15@example.com>'
  contents:
  - 'From: <sip:device15@example.com>

    '
- title: 'Refer-To: <sip:correspondent@example.com;gr=urn:uuid:bbb6981;audio;'
  contents:
  - "Refer-To: <sip:correspondent@example.com;gr=urn:uuid:bbb6981;audio;\n       \
    \             video?Replaces=\"1@device15.example.com;to-tag=aaa;\n          \
    \          from-tag=bbb\">\n"
- title: 'Referred-By: <sip:device15@example.com>'
  contents:
  - "Referred-By: <sip:device15@example.com>\n    [S/MIME authentication body]\n \
    \  A header field is included in the Refer-To URI to specify the value\n   of\
    \ the Replaces header in the target INVITE request.  In order to\n   have this\
    \ message sent to it, the MN must send the following REFER\n   request (1):\n"
- title: REFER sip:device15@example.com;gr=urn:uuid:qfnb443ccui SIP/2.0
  contents:
  - 'REFER sip:device15@example.com;gr=urn:uuid:qfnb443ccui SIP/2.0

    '
- title: 'To: <sip:device15@example.com;gr=urn:uuid:qfnb443ccui>'
  contents:
  - 'To: <sip:device15@example.com;gr=urn:uuid:qfnb443ccui>

    '
- title: 'From: <sip:bob@example.com>'
  contents:
  - 'From: <sip:bob@example.com>

    '
- title: Refer-To:<sip:bob@example.com;gr=urn:uuid:ytav223h67gb3;method=REFER
  contents:
  - "Refer-To:<sip:bob@example.com;gr=urn:uuid:ytav223h67gb3;method=REFER\n      \
    \ ?Refer-To=\"<sip:correspondent@example.com;gr=urn:uuid:bbb6981;\n          \
    \     audio;video?Replaces=%221@device15.example.com;\n               to-tag=aaa;from-tag=bbb%221>\"\
    >\n   The Refer-To header specifies that the MN is the refer target and\n   that\
    \ the referral be in the form of a REFER request.  The header\n   field specifies\
    \ that the REFER request contains a Refer-To header\n   containing the URI of\
    \ the CN.  That URI, itself, contains the \"audio\"\n   and \"video\" callee capabilities\
    \ that will tell the MN to initiate an\n   audio and video call, and a header\
    \ field specifying that the ultimate\n   INVITE request contains a Replaces header.\
    \  If the MN had previously\n   transferred the session to the local device, it\
    \ would have received\n   these in the NOTIFY sent by the local device following\
    \ the\n   establishment of the session.  If, on the other hand, the MN is\n  \
    \ retrieving a session it had not previously held, as mentioned above\n   in Section\
    \ 5.1.1, it gets these parameters by subscribing to the\n   Dialog Event Package\
    \ [13] of the local device.  Such a subscription\n   would only be granted, for\
    \ instance, to the owner of the original\n   device that carried the session.\
    \  Even when these parameters are\n   provided in the Replaces header, the local\
    \ device does not accept the\n   REFER request from anybody except the original\
    \ participant in the\n   session or the owner of the device.  The MN receives\
    \ the REFER\n   request from the local device, sends the INVITE request to the\
    \ CN,\n   which accepts it, and, once the session is established, terminates\n\
    \   its session with the local device.\n"
- title: 5.4.3.  Transfer to Multiple Devices
  contents:
  - "5.4.3.  Transfer to Multiple Devices\n   Splitting a session in SH mode requires\
    \ multiple media sessions to be\n   established between the CN and local devices,\
    \ without the MN\n   controlling the signaling.  This could be done by sending\
    \ multiple\n   REFER requests to the local devices, referring each to the CN.\
    \  The\n   disadvantage of this method is that there is currently no standard\n\
    \   way to associate multiple sessions as part of a single call in SIP.\n   Therefore,\
    \ each session between the CN and a local device will be\n   treated as a separate\
    \ call.  They may occupy different parts of the\n   user interface, their media\
    \ may not be available simultaneously, and\n   they may have to be terminated\
    \ separately.  This certainly does not\n   fulfill the requirement of seamlessness.\n\
    \   This document describes the use of multi-device systems to overcome\n   this\
    \ problem.  A local device's SLP UA queries for other devices and\n   joins with\
    \ them to create a \"virtual device\", or a Multi-Device\n   System (MDS).  We\
    \ refer to the controlling device as the Multi-Device\n   System Manager (MDSM).\
    \  In a system that includes at least one\n   mobility-enhanced device, one of\
    \ them may act as the MDSM.  In a\n   system consisting entirely of basic devices,\
    \ either a dedicated host\n   or another local device from outside of the system\
    \ acts as MDSM.\n   When the MDSM subsequently receives a REFER request, it uses\
    \ third-\n   party call control to set up media sessions between the CN and each\n\
    \   device in the system.  Specifically, it invites each local device\n   into\
    \ a separate session, and uses their media parameters (and\n   possibly its own)\
    \ in the INVITE request it sends to the CN.\n   A single device may act as an\
    \ MDSM for several different groups of\n   devices, and also act as an ordinary\
    \ device with only its native\n   capabilities.  There must be a way to address\
    \ a request to a device\n   and specify whether it is to the device itself or\
    \ one of the multi-\n   device systems it controls.  As mentioned above in Section\
    \ 5.2, a\n   device registers a separate contact for itself and for each of its\n\
    \   multi-device systems.  For example, the device with AOR\n   \"sip:device11@example.com\"\
    \ and hostname \"device11.example.com\" will\n   register a contact \"sip:device11@device11.example.com\"\
    \ that\n   represents its own capabilities.  Once it discovers other devices and\n\
    \   creates an MDS, it will register a new contact,\n   \"sip:av1@device11.example.com\"\
    .  It associates a GRUU with each of\n   these contacts.  The device itself and\
    \ any new system is registered\n   in SLP using the GRUU.  When the proxy receives\
    \ a request addressed\n   to a GRUU, it will rewrite it as the contact URI before\
    \ forwarding\n   the request to the device.  The device will use this unique contact\n\
    \   to determine whether to handle the request natively or with one of\n   its\
    \ systems.\n   Figure 6 shows the transfer of a session to a multi-device system.\n\
    \   The audio device has previously discovered the video device and\n   created\
    \ a multi-device system.  The REFER request sent to\n   \"sip:device11@example.com;gr=urn:uuid:893eeeyuinm981\"\
    \ prompts the\n   audio device to invite the video device into a session to ascertain\n\
    \   its SDP, and then to invite the CN into a session using its own SDP\n   and\
    \ that of the video device.\n   video                  audio                 \
    \  MN           CN\n     |                      |(1) REFER            |      \
    \      |\n     |                      |<--------------------|            |\n \
    \    |                      |(2) 202 Trying       |            |\n     | (3) INVITE\
    \ no sdp    |-------------------->|            |\n     |<---------------------|\
    \                     |            |\n     | (4) 200 OK    SDP    |          \
    \           |            |\n     |--------------------->|                    \
    \ |            |\n     |                      |(5) INVITE a/v SDP, Replaces  \
    \    |\n     |                      |--------------------------------->|\n   \
    \  |                      |         RTP Audio                |\n     |       \
    \               |<.................................|\n     |                 \
    \     |               RTP Video          |\n     |<........................................................|\n\
    \     |                      |(6) 200 OK CN SDP                 |\n     |    \
    \                  |<---------------------------------|\n     |              \
    \        |                RTP Audio         |\n     | (7) ACK CN Video SDP |.................................>|\n\
    \     |<---------------------|                     |            |\n     | RTP\
    \ Video            |                     |            |\n     |........................................................>|\n\
    \     |                      |(8) ACK              |            |\n     |    \
    \                  |--------------------------------->|\n     |              \
    \        |                     |(9) BYE     |\n     |                      | \
    \                    |<-----------|\n     |                      |           \
    \          |(10) 200 OK |\n     |                      |                     |----------->|\n\
    \     |                      |                     |            |\n     |    \
    \                  |                     |            |\n      Figure 6.  Session\
    \ Handoff to a multi-device system.\n"
- title: 5.5.  Distributing Sessions for Incoming Call
  contents:
  - "5.5.  Distributing Sessions for Incoming Call\n   The examples presented above\
    \ have involved an established session\n   that a user transfers to one or more\
    \ devices.  Another scenario would\n   be for an incoming call to be immediately\
    \ distributed between\n   multiple devices when the user accepts the call.  In\
    \ such a case, the\n   initial session would not yet be established when the transfer\
    \ takes\n   place.\n   The transfer could be carried out in either of the transfer\
    \ modes.\n   However, complete handoff to a separate device, which is done in\n\
    \   Session Handoff mode, could be achieved through existing means, such\n   as\
    \ proxying or redirection.  MNC mode would be useful in a case where\n   the user\
    \ wishes to automatically include an additional device in a\n   call.  For instance,\
    \ a user with a desk IP phone and a PC with a\n   video camera could join the\
    \ two into a single logical device.  The\n   SIP UA on the PC would, for any incoming\
    \ call, send an INVITE request\n   to the desk phone, setting the display name\
    \ in the From header field\n   to \"Bob Jones (audio portion)\", for instance,\
    \ so that the user can\n   identify the caller on the phone.  The user could then\
    \ either accept\n   or reject, as he would with a call coming directly to the\
    \ phone.  If\n   he accepts, the PC UA, acting as the controller, would respond\
    \ to the\n   caller with its video parameters and the phone's audio parameters\
    \ in\n   the SDP body.  The final ACK from the Correspondent Node would then\n\
    \   complete the session establishment.\n   If the desk phone is registered as\
    \ a contact for the user, it would\n   also ring in response to the direct call\
    \ being proxied there, in\n   addition to the INVITE request sent by the controller,\
    \ causing\n   confusion to the user.  The use of caller preferences can solve\
    \ this\n   problem, as the caller would indicate that the call should\n   preferentially\
    \ be proxied to devices with audio and video\n   capabilities.  It is likely that\
    \ the caller would use caller\n   preferences in any case, if they were available\
    \ to him, to avoid the\n   callee unknowingly picking up the IP phone when he\
    \ has a video-\n   capable device available.  However, since caller preferences\
    \ are not\n   yet widely supported on commercial devices, the callee must ensure\n\
    \   the proper routing of the call.  One solution would be for the PC to\n   register\
    \ its contact with a higher priority than the one given to the\n   phone.  The\
    \ Call Processing Language (CPL) [22] (the \"proxy\" node)\n   could then be used\
    \ to specify that forking should be done to the set\n   of user devices in sequence,\
    \ rather than in parallel.  Since all\n   calls would first be sent to the PC\
    \ as long as it were online, it\n   would redirect any request that included only\
    \ audio in its SDP.\n"
- title: 5.6.  Use of ICE in Session Mobility
  contents:
  - "5.6.  Use of ICE in Session Mobility\n   Interactive Connectivity Establishment\
    \ (ICE) [27] is a protocol for\n   Network Address Translator (NAT) traversal\
    \ that may be used with SIP.\n   Rather than negotiating addresses and ports used\
    \ for media sessions\n   directly in SDP, a list of possible address/ports (candidates)\
    \ is\n   exchanged, and the Session Traversal Utilities for NAT (STUN) [28]\n\
    \   protocol is used to check which pairs of candidates may be used.  ICE\n  \
    \ could be used in the call flows described in this section.  In MNC\n   mode,\
    \ the candidates would be sent by each local device to the MN,\n   who would exchange\
    \ them with the CN.  Afterward, each device would\n   perform checks with the\
    \ CN to determine an appropriate candidate.  In\n   SH mode, where the local device\
    \ establishes a session with the CN,\n   ICE would work no differently than in\
    \ the standard case.\n"
- title: 6.  Reconciling Device Capability Differences
  contents:
  - "6.  Reconciling Device Capability Differences\n   Session mobility sometimes\
    \ involves the transfer of a session between\n   devices with different capabilities.\
    \  For example, the codec being\n   used in the current session may not be available\
    \ on the new device.\n   Furthermore, that device may not support any codec that\
    \ is supported\n   by the CN.  In addition to codecs, devices may have different\n\
    \   resolutions or bandwidth limitations that must be taken into account\n   when\
    \ carrying out a session transfer.\n"
- title: 6.1.  Codec Differences
  contents:
  - "6.1.  Codec Differences\n   Before executing a session transfer, the device checks\
    \ the\n   capabilities of the CN and the new device.  These may be found\n   through\
    \ either the SIP OPTIONS method, used in SIP to query a\n   device's media capabilities,\
    \ or may be included as SLP service\n   attributes.  Since the OPTIONS method\
    \ is standard, it is suggested to\n   be used to query the CN, while SLP is suggested\
    \ to be used to get the\n   media capabilities of local devices, since it is already\
    \ being used\n   for them.\n   If the CN and the local device are found to have\
    \ a common codec, the\n   transfer flow will negotiate that this should become\
    \ the codec used\n   in the media session.  In MNC mode, the MN forwards the response\
    \ from\n   the local device to the CN, who will choose a codec it supports from\n\
    \   those available.  In Session Handoff mode, the MN sends a REFER\n   request\
    \ to the local device and allows it to negotiate a common codec\n   with the CN\
    \ during their session establishment.  No special behavior\n   of the MN is required.\n\
    \   If the MN sees that a common codec does not exist, it executes the\n   transfer\
    \ through an intermediate transcoding service.  Rather than\n   establishing a\
    \ direct media session between the CN and the local\n   device, separate sessions\
    \ are established between the transcoder and\n   each of them, with the transcoder\
    \ translating between the streams.\n   The Mobile Node discovers available transcoders\
    \ through some means,\n   including SLP.\n   Using transcoding services in SIP\
    \ is defined in [18] using third-\n   party call control.  In MNC mode, the Mobile\
    \ Node establishes one\n   media session between the transcoder and the CN, and\
    \ one between the\n   transcoder and the local device.  This differs from the\
    \ normal\n   transcoding case, where one party establishes a media session between\n\
    \   itself and the transcoder and one between the transcoder and the\n   other\
    \ party.  The MN starts by sending an INVITE request to the local\n   device with\
    \ no body; it receives in the response the list of codecs\n   that the device\
    \ can use.  It then repeats this for the CN, and\n   receives its available codecs.\
    \  It chooses one codec from each side,\n   along with the address and port of\
    \ each device, and combines them in\n   an INVITE request sent to the transcoder.\
    \  The transcoder responds\n   with the ports on which it will accept each stream.\
    \  The appropriate\n   port information is sent individually to the CN and the\
    \ local device.\n   Once the three sessions have been established, two media sessions\n\
    \   exist, and the transcoder translates between them.  This flow is\n   shown\
    \ in Figure 7.\n  AN       Transcoder                      MN                \
    \      CN\n"
- title: (codec A)                                                      (codec B)
  contents:
  - "(codec A)                                                      (codec B)\n  \
    \ |           |(1) INVITE no sdp           |                       |\n   |<---------------------------------------|\
    \                       |\n   |           |(2) 200 AN params           |     \
    \                  |\n   |--------------------------------------->|          \
    \             |\n   |           |                            |(3) INVITE no sdp\
    \      |\n   |           |                            |---------------------->|\n\
    \   |           |                            |(4) 200 OK CN params   |\n   | \
    \          |                            |<----------------------|\n   |      \
    \     |(5) INVITE AN, CN params    |                       |\n   |           |<---------------------------|\
    \                       |\n   |           |(6) 200 OK TA, TB params    |     \
    \                  |\n   |           |--------------------------->|          \
    \             |\n   |           |(7) ACK                     |               \
    \        |\n   |           |<---------------------------|                    \
    \   |\n   |           |(8) ACK TA params           |                       |\n\
    \   |<---------------------------------------|                       |\n   | \
    \  RTP     |                            |                       |\n   |..........>|\
    \          RTP               |                       |\n   |           |...................................................>|\n\
    \   |           |                            | (9) ACK TB params     |\n   | \
    \          |                            |---------------------->|\n   |      \
    \     |                            |  RTP                  |\n   |   RTP     |<...................................................|\n\
    \   |<..........|                            |                       |\n   | \
    \          |                            |                       |\n      Figure\
    \ 7.  Transfer of a session in Mobile Node Control mode\n                 through\
    \ a transcoder to translate between native codecs\n                 of CN and\
    \ an audio node AN, where they share no common\n                 codec.\n   In\
    \ Session Handoff mode, the local device itself establishes a\n   session with\
    \ the CN through the transcoder.  After receiving the\n   REFER request, it uses\
    \ the OPTIONS method to find the capabilities of\n   the CN.  It will then use\
    \ a common codec, if available, in the\n   session setup, or set up the transcoded\
    \ session using third-party\n   call control as in [18].\n"
- title: 6.2.  Display Resolution and Bandwidth Differences
  contents:
  - "6.2.  Display Resolution and Bandwidth Differences\n   Other differences in device\
    \ capabilities, such as display resolution\n   and bandwidth limitations, are\
    \ also suggested to be reconciled during\n   transfer.  For example, a mobile\
    \ device, limited both in its display\n   size and bandwidth, will likely be receiving\
    \ the video stream from\n   the other call participant at a low resolution and\
    \ frame rate.  When\n   the user transfers his video output to a large-screen\
    \ display, he may\n   start viewing much higher-quality video at the higher native\n\
    \   resolution of the display and at a higher frame rate.\n   Changing the image\
    \ resolution and frame rate requires no special\n   handling by the MN.  An SDP\
    \ format is defined [19] for specifying\n   these and other parameters for the\
    \ H.263+ codec, for example.  The\n   suitable image formats and corresponding\
    \ MPIs (Minimum Picture\n   Interval, related to the frame rate) supported for\
    \ the given codec\n   are listed following the media line, in order of preference.\
    \  For\n   example, the following lines in SDP would indicate that a device\n\
    \   supports the H.263 codec (value 34) with the image sizes of 16CIF,\n   4CIF,\
    \ CIF, and QCIF (with the MPI for each format following the \"=\"):\n      m=video\
    \ 60300 RTP/AVP 34\n      a=fmtp:34 16CIF=8;4CIF=6;CIF=4;QCIF=3\n   In MNC mode,\
    \ the response by the local device (Figure 2, message 2)\n   to the initial INVITE\
    \ request sent by the MN includes this line in\n   the SDP body, and the MN then\
    \ includes it in the INVITE request sent\n   to the CN (3).  In Session Handoff\
    \ mode, the local device includes\n   this parameter in the INVITE request sent\
    \ to the CN (Figure 4,\n   message 3) after receiving the REFER request.  If the\
    \ local device is\n   not configured to include the supported image sizes during\
    \ session\n   establishment, the information could be made available through SLP.\n\
    \   The MN then includes it in the INVITE request sent to the CN in\n   Mobile\
    \ Node Control mode.  However, this information is not sent in\n   Session Handoff\
    \ mode unless the local device was configured to send\n   it.  In both modes,\
    \ the MN sends its own resolution and frame rate\n   preferences in the body of\
    \ the INVITE request sent to retrieve the\n   session.\n"
- title: 7.  Simultaneous Session Transfer
  contents:
  - "7.  Simultaneous Session Transfer\n   A session transfer may be carried out by\
    \ one call participant after\n   the other participant has transferred the session\
    \ on his side.  If\n   the first transfer was done in MNC mode, a subset of the\
    \ original\n   session media is now on local devices.  The MN receives either\
    \ a\n   re-INVITE from the other participant or an INVITE request from a\n   local\
    \ device on the other side.  This message carries the new media\n   parameters\
    \ of the session.  The MN, therefore, must send a re-INVITE\n   to any local devices\
    \ with these parameters.  It then includes the\n   parameters returned from these\
    \ devices in the 200 OK response.  If\n   the first transfer was done in SH mode,\
    \ the local device will\n   directly receive the session transfer message from\
    \ the other party\n   and will follow the normal procedure for responding to an\
    \ INVITE\n   request.  If it is controlling other local devices for this session\n\
    \   as part of an MDS, it follows the procedure above, where the first\n   transfer\
    \ was done in MNC mode.\n   It may occur that both participants attempt a transfer\
    \ at the same\n   time.  In MNC mode, each node initiates a session with a local\n\
    \   device, then sends a re-INVITE to the other node.  Section 14.2 in\n   [1]\
    \ mandates a 491 response when a re-INVITE is received for a dialog\n   once another\
    \ re-INVITE has already been sent.  Once both parties\n   receive this response,\
    \ they each generate a random timer with\n   staggered intervals.  Once its timer\
    \ fires, each participant attempts\n   the re-INVITE again.  The first to receive\
    \ it from the other\n   participant responds to it with the SDP parameters of\
    \ its local\n   device.  Both participants then send an ACK request to their local\n\
    \   device containing the new parameters obtained from the other one\n   during\
    \ the re-INVITE process.\n   In SH mode, if both participants attempt a transfer\
    \ at the same time,\n   after one node sends a REFER request to the local device,\
    \ it receives\n   the INVITE request from the local device on the other end. \
    \ The\n   appropriate protocol definition could mandate that a 491 response be\n\
    \   sent in this case, as well.  This response would be returned to the\n   referrer\
    \ in a NOTIFY indicating the status of the referred session\n   establishment.\
    \  The staggered timer solution described above could\n   work.  The MN would\
    \ cancel the REFER request sent to the local\n   device, then wait a random amount\
    \ of time before sending it again.\n"
- title: 8.  Session Termination
  contents:
  - "8.  Session Termination\n   Once a session has been transferred, the user may\
    \ terminate it by\n   hanging up the current device, as he would do in a call\
    \ originating\n   on that device.  This should be true even when the session is\
    \ using\n   several local devices.  In MNC mode, when the user hangs up the\n\
    \   current device, a BYE request is sent to the controller.  The\n   controller\
    \ must then send a BYE request to each device used in the\n   transfer and a BYE\
    \ request to the CN.  An MDSM used for SH mode must\n   follow the same procedure.\
    \  In SH mode, the current device has\n   previously initiated an ordinary session\
    \ with the CN in response to\n   the REFER request, and the BYE it sends to the\
    \ CN on hang-up requires\n   no special handling.\n"
- title: 9.  Security Considerations
  contents:
  - "9.  Security Considerations\n   As this work is based heavily on the work in\
    \ [2], [3], and [5], the\n   security considerations described in those documents\
    \ apply.  We\n   discuss here the particular issues of authorizing use of local\n\
    \   devices, providing media-level security following transfer, and the\n   issue\
    \ of flooding attacks in MNC mode.\n"
- title: 9.1.  Authorization for Using Local Devices
  contents:
  - "9.1.  Authorization for Using Local Devices\n   It is necessary that the use\
    \ of a local device be limited to\n   authorized parties.  As stated earlier,\
    \ this document assumes both\n   personal and public devices, and these have different\
    \ authorization\n   policies.  A personal device only accepts transfer requests\
    \ from a\n   single identity, the device owner.  Therefore, the most appropriate\n\
    \   means of access control is to maintain a list of identities\n   representing\
    \ the device owner authorized to transfer sessions to the\n   device.  As mentioned\
    \ before, the device is configured with an AOR\n   representing its status as\
    \ a transfer device, in addition to the\n   user's AOR.  Only requests made to\
    \ the device AOR follow the access\n   list, while incoming requests to the user's\
    \ AOR are accepted from\n   anyone (provided that a white or blacklist or other\
    \ policy does not\n   preclude their request from being accepted).  The SIP-Identity\
    \ header\n   [25] is used to securely identify the initiator of a SIP request.\n\
    \   That specification can be used in our use-cases when the local device\n  \
    \ must ensure that the INVITE or REFER request in MNC or SH mode,\n   respectively,\
    \ is indeed from the owner of the device.\n   Public devices accept transfer requests\
    \ from a large number of\n   identities.  Access lists may be used for this purpose.\n\
    \   Alternatively, since devices are often available to categories of\n   users,\
    \ such as \"manager\" or \"faculty member\", an appropriate solution\n   may be\
    \ to use trait-based authorization [23].  Using this mechanism,\n   a user may\
    \ acquire, from a trusted authorization service, an\n   \"assertion\" of his user\
    \ status and permissions.  The assertion, or a\n   reference to it, is included\
    \ in the request to use the device.\n"
- title: 9.2.  Maintaining Media Security During Session Mobility
  contents:
  - '9.2.  Maintaining Media Security During Session Mobility

    '
- title: 9.2.1.  Establishing Secure RTP Using SDP
  contents:
  - "9.2.1.  Establishing Secure RTP Using SDP\n   Confidentiality, message authentication,\
    \ and replay protection are\n   necessary in internet protocols, including those\
    \ used for real-time\n   multimedia communications.  The Secure Real-time Transfer\
    \ Protocol\n   (SRTP) [14] provides these for RTP streams.  Since SRTP may be\
    \ used\n   to carry the media sessions of SIP devices, such as the MN and CN,\
    \ we\n   discuss how to ensure that the session continues to use SRTP\n   following\
    \ the transfer to another device.  This is also discussed in\n   less detail in\
    \ [2].\n   The establishment of secure RTP communications through SDP is defined\n\
    \   by two documents.  The \"crypto\" attribute [15] is a media-level\n   attribute\
    \ whose value includes the desired cryptographic suite and\n   key parameters\
    \ used to perform symmetric encryption on the RTP\n   packets.  Since the key\
    \ information is sent in the SDP body with no\n   dedicated encryption or integrity\
    \ protection, a separate protocol\n   such as S/MIME must be used to protect the\
    \ signaling messages.\n   Another document [16] specifies the \"key-mgmt\" attribute\
    \ used to\n   provide parameters for a key management protocol, such as MIKEY.\n\
    \   Using this attribute, the two participants exchange keys encrypted by\n  \
    \ a public or shared key, or negotiate a key using the Diffie-Hellman\n   method.\n\
    \   The use of cryptographic parameters in SDP does not change the\n   message\
    \ flows described earlier in this document.  For instance, in\n   MNC mode shown\
    \ in Figure 2, the response from the local device (2)\n   will include, in addition\
    \ to any supported media type, cryptographic\n   information for each type.  This\
    \ cryptographic information will be a\n   list of attribute lines describing the\
    \ crypto suite and key\n   parameters using either of the two attributes mentioned.\
    \  These lines\n   will be sent by the MN to the CN in the subsequent request\
    \ (3).  The\n   CN will choose a cryptographic method and return its own key\n\
    \   information in the response (4).  Maintaining a secure media session\n   in\
    \ SH mode requires the local device to negotiate a cryptographic\n   relationship\
    \ in the session that it establishes following its receipt\n   of the REFER request.\n\
    \   It is noted in [2] that establishing media security in third party\n   call\
    \ control depends on the cooperation of the controller.  In this\n   document,\
    \ the Mobile Node (MN) in Mobile Node Control mode (MNC) has\n   the role of controller\
    \ in 3pcc, while in the Session Handoff (SH)\n   mode, MN uses the REFER method\
    \ instead.  The following is an excerpt\n   from that document:\n      End-to-end\
    \ media security is based on the exchange of keying\n      material within SDP.\
    \  The proper operation of these mechanisms\n      with third party call control\
    \ depends on the controller behaving\n      properly.  So long as it is not attempting\
    \ to explicitly disable\n      these mechanisms, the protocols will properly operate\
    \ between the\n      participants, resulting in a secure media session that even\
    \ the\n      controller cannot eavesdrop or modify.  Since third party call\n\
    \      control is based on a model of trust between the users and the\n      controller,\
    \ it is reasonable to assume it is operating in a well-\n      behaved manner.\
    \  However, there is no cryptographic means that can\n      prevent the controller\
    \ from interfering with the initial exchanges\n      of keying materials.  As\
    \ a result, it is trivially possibl[e] for\n      the controller to insert itself\
    \ as an intermediary on the media\n      exchange, if it should so desire.\n \
    \  We note here that given the model presented in this document, where\n   the\
    \ controller is operated by the same person that uses the local\n   device, i.e.,\
    \ the MN user, there is even more reason to believe that\n   the controller will\
    \ be well-behaved and will not interfere with the\n   initial transfer of key\
    \ exchanges.\n"
- title: 9.2.2.  Securing Media Using the Transport Layer
  contents:
  - "9.2.2.  Securing Media Using the Transport Layer\n   The exchange of media could\
    \ alternatively be secured at the transport\n   layer, using either TLS or Datagram\
    \ Transport Layer Security (DTLS)\n   [24].  The one consideration for use of\
    \ these protocols in session\n   mobility would be assigning the client and server\
    \ roles.  In SH mode,\n   it may be assumed that the local device, the referee,\
    \ would act as\n   the client, since it is initiating the signaling session with\
    \ the CN.\n   However, in MNC mode, these roles would be unclear.  The same problem\n\
    \   was mentioned above in establishing a secure connection for an MSRP\n   session\
    \ transferred in MNC mode.  This problem could be solved\n   through the use of\
    \ Connection-Oriented Media (COMEDIA) [26], which\n   specifies the \"setup\"\
    \ SDP attribute to negotiate these roles.\n   We describe here briefly how this\
    \ is done.  In the MNC exchange shown\n   in Figure 2, the local device chooses\
    \ whether to specify a media\n   session over a secured transport in its response\
    \ to the MN.  If so,\n   it includes under the media line a \"setup\" attribute\
    \ set to either\n   \"active\", \"passive\", or \"actpass\".  This is sent on\
    \ to the CN.\n   Assuming it agreed to such a session, it responds with a \"setup\"\
    \n   attribute, as per the COMEDIA specifications.  This is then sent by\n   the\
    \ MN to the local device.  If the local device and CN agreed on\n   their roles,\
    \ the appropriate session could be established, through\n   which the media would\
    \ be transmitted.  Before they transmit media\n   between them, the CN and local\
    \ device exchange messages to establish\n   the TLS or DTLS session.  This same\
    \ approach could be used to\n   establish an SRTP security context over DTLS,\
    \ as per [31].\n"
- title: 9.3.  Flooding Attacks in MNC Mode
  contents:
  - "9.3.  Flooding Attacks in MNC Mode\n   The MNC call flows in this document, where\
    \ one device instructs\n   another device to send an RTP flow to a third one,\
    \ present the\n   possibility of a flooding attack.  This is a general problem\
    \ that\n   relates to any use of 3pcc.  In this document, it is only a concern\n\
    \   where the device is public, as described at the beginning of this\n   section,\
    \ and a large group of people can transfer media to it, since\n   there may not\
    \ be a very strong trust relationship between the device\n   owner (e.g., an institution)\
    \ and the users.  Obviously, where a\n   device is private and only its owner\
    \ can transfer to it, the concern\n   does not exist, given the use of the Identity\
    \ header mentioned\n   earlier.  A possible solution may be the use of ICE [27],\
    \ since both\n   sides confirm that they want to receive each other's media.\n"
- title: 10.  Acknowledgments
  contents:
  - "10.  Acknowledgments\n   We would like to acknowledge the helpful comments made\
    \ about this\n   document by the SIP community, in particular Jon Peterson, Joerg\
    \ Ott,\n   and Cullen Jennings.\n"
- title: 11.  References
  contents:
  - '11.  References

    '
- title: 11.1.  Normative References
  contents:
  - "11.1.  Normative References\n   [1]   Rosenberg, J., Schulzrinne, H., Camarillo,\
    \ G., Johnston, A.,\n         Peterson, J., Sparks, R., Handley, M., and E. Schooler,\
    \ \"SIP:\n         Session Initiation Protocol\", RFC 3261, June 2002.\n   [2]\
    \   Rosenberg, J., Peterson, J., Schulzrinne, H., and G. Camarillo,\n        \
    \ \"Best Current Practices for Third Party Call Control (3pcc) in\n         the\
    \ Session Initiation Protocol (SIP)\", BCP 85, RFC 3725, April\n         2004.\n\
    \   [3]   Sparks, R., \"The Session Initiation Protocol (SIP) Refer\n        \
    \ Method\", RFC 3515, April 2003.\n   [4]   Rosenberg, J. and H. Schulzrinne,\
    \ \"An Offer/Answer Model with\n         Session Description Protocol (SDP)\"\
    , RFC 3264, June 2002.\n   [5]   Sparks, R., \"The Session Initiation Protocol\
    \ (SIP) Referred-By\n         Mechanism\", RFC 3892, September 2004.\n   [6] \
    \  Mahy, R., Biggs, B., and R. Dean, \"The Session Initiation\n         Protocol\
    \ (SIP) \"Replaces\" Header\", RFC 3891, September 2004.\n   [7]   Campbell, B.,\
    \ Ed., Mahy, R., Ed., and C. Jennings, Ed., \"The\n         Message Session Relay\
    \ Protocol (MSRP)\", RFC 4975, September\n         2007.\n   [8]   Jennings, C.,\
    \ Mahy, R., and A. Roach, \"Relay Extensions for the\n         Message Sessions\
    \ Relay Protocol (MSRP)\", RFC 4976, September\n         2007.\n   [9]   Hellstrom,\
    \ G. and P. Jones, \"RTP Payload for Text\n         Conversation\", RFC 4103,\
    \ June 2005.\n   [10]  Rosenberg, J., Schulzrinne, H., and P. Kyzivat, \"Indicating\n\
    \         User Agent Capabilities in the Session Initiation Protocol\n       \
    \  (SIP)\", RFC 3840, August 2004.\n   [11]  Camarillo, G., \"Internet Assigned\
    \ Number Authority (IANA)\n         Registration of the Message Media Feature\
    \ Tag\", RFC 4569, July\n         2006.\n   [12]  Rosenberg, J., \"Obtaining and\
    \ Using Globally Routable User\n         Agent URIs (GRUU) in the Session Initiation\
    \ Protocol (SIP)\",\n         RFC 5627, October 2009.\n"
- title: 11.2.  Informative References
  contents:
  - "11.2.  Informative References\n   [13]  Rosenberg, J., Schulzrinne, H., and R.\
    \ Mahy, Ed., \"An INVITE-\n         Initiated Dialog Event Package for the Session\
    \ Initiation\n         Protocol (SIP)\", RFC 4235, November 2005.\n   [14]  Baugher,\
    \ M., McGrew, D., Naslund, M., Carrara, E., and K.\n         Norrman, \"The Secure\
    \ Real-time Transport Protocol (SRTP)\", RFC\n         3711, March 2004.\n   [15]\
    \  Andreasen, F., Baugher, M., and D. Wing, \"Session Description\n         Protocol\
    \ (SDP) Security Descriptions for Media Streams\", RFC\n         4568, July 2006.\n\
    \   [16]  Arkko, J., Lindholm, F., Naslund, M., Norrman, K., and E.\n        \
    \ Carrara, \"Key Management Extensions for Session Description\n         Protocol\
    \ (SDP) and Real Time Streaming Protocol (RTSP)\", RFC\n         4567, July 2006.\n\
    \   [17]  Guttman, E., Perkins, C., Veizades, J., and M. Day, \"Service\n    \
    \     Location Protocol, Version 2\", RFC 2608, June 1999.\n   [18]  Camarillo,\
    \ G., Burger, E., Schulzrinne, H., and A. van Wijk,\n         \"Transcoding Services\
    \ Invocation in the Session Initiation\n         Protocol (SIP) Using Third Party\
    \ Call Control (3pcc)\", RFC\n         4117, June 2005.\n   [19]  Ott, J., Bormann,\
    \ C., Sullivan, G., Wenger, S., and R. Even,\n         Ed., \"RTP Payload Format\
    \ for ITU-T Rec. H.263 Video\", RFC 4629,\n         January 2007.\n   [20]  Schulzrinne,\
    \ H. and E. Wedlund, \"Application-Layer Mobility\n         Using SIP\", ACM SIGMOBILE\
    \ Mobile Computing and Communications\n         Review, Vol. 4, No. 3, July 2000.\n\
    \   [21]  Campbell, B., Ed., Rosenberg, J., Schulzrinne, H., Huitema, C.,\n  \
    \       and D. Gurle, \"Session Initiation Protocol (SIP) Extension for\n    \
    \     Instant Messaging\", RFC 3428, December 2002.\n   [22]  Lennox, J., Wu,\
    \ X., and H. Schulzrinne, \"Call Processing\n         Language (CPL): A Language\
    \ for User Control of Internet\n         Telephony Services\", RFC 3880, October\
    \ 2004.\n   [23]  Peterson, J., Polk, J., Sicker, D., and H. Tschofenig, \"Trait-\n\
    \         Based Authorization Requirements for the Session Initiation\n      \
    \   Protocol (SIP)\", RFC 4484, August 2006.\n   [24]  Rescorla, E. and N. Modadugu,\
    \ \"Datagram Transport Layer\n         Security\", RFC 4347, April 2006.\n   [25]\
    \  Peterson, J. and C. Jennings, \"Enhancements for Authenticated\n         Identity\
    \ Management in the Session Initiation Protocol (SIP)\",\n         RFC 4474, August\
    \ 2006.\n   [26]  Yon, D. and G. Camarillo, \"TCP-Based Media Transport in the\n\
    \         Session Description Protocol (SDP)\", RFC 4145, September 2005.\n  \
    \ [27]  Rosenberg, J., \"Interactive Connectivity Establishment (ICE): A\n   \
    \      Protocol for Network Address Translator (NAT) Traversal for\n         Offer/Answer\
    \ Protocols\", Work in Progress, October 2007.\n   [28]  Rosenberg, J., Mahy,\
    \ R., Matthews, P., and D. Wing, \"Session\n         Traversal Utilities for NAT\
    \ (STUN)\", RFC 5389, October 2008.\n   [29]  Cheshire, S. and M. Krochmal, \"\
    DNS-Based Service Discovery\",\n         Work in Progress, September 2008.\n \
    \  [30]  Cheshire, S. and M. Krochmal, \"Multicast DNS\", Work in\n         Progress,\
    \ September 2008.\n   [31]  Fischl, J., Tschofenig, H., and E. Rescorla, \"Framework\
    \ for\n         Establishing an SRTP Security Context using DTLS\", Work in\n\
    \         Progress, March 2009.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Ron Shacham\n   Columbia University\n   1214 Amsterdam\
    \ Avenue, MC 0401\n   New York, NY  10027\n   USA\n   EMail: shacham@cs.columbia.edu\n\
    \   Henning Schulzrinne\n   Columbia University\n   1214 Amsterdam Avenue, MC\
    \ 0401\n   New York, NY  10027\n   USA\n   EMail: hgs@cs.columbia.edu\n   Srisakul\
    \ Thakolsri\n   DoCoMo Communications Laboratories Europe\n   Landsberger Str.\
    \ 312\n   Munich  80687\n   Germany\n   EMail: thakolsri@docomolab-euro.com\n\
    \   Wolfgang Kellerer\n   DoCoMo Communications Laboratories Europe\n   Landsberger\
    \ Str. 312\n   Munich  80687\n   Germany\n   EMail: kellerer@docomolab-euro.com\n"
