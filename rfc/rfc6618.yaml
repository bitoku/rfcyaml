- title: __initial_text__
  contents:
  - "     Mobile IPv6 Security Framework Using Transport Layer Security\n        for\
    \ Communication between the Mobile Node and Home Agent\n"
- title: Abstract
  contents:
  - "Abstract\n   Mobile IPv6 signaling between a Mobile Node (MN) and its Home Agent\n\
    \   (HA) is secured using IPsec.  The security association (SA) between\n   an\
    \ MN and the HA is established using Internet Key Exchange Protocol\n   (IKE)\
    \ version 1 or 2.  The security model specified for Mobile IPv6,\n   which relies\
    \ on IKE/IPsec, requires interaction between the Mobile\n   IPv6 protocol component\
    \ and the IKE/IPsec module of the IP stack.\n   This document proposes an alternate\
    \ security framework for Mobile\n   IPv6 and Dual-Stack Mobile IPv6, which relies\
    \ on Transport Layer\n   Security for establishing keying material and other bootstrapping\n\
    \   parameters required to protect Mobile IPv6 signaling and data traffic\n  \
    \ between the MN and HA.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for examination, experimental implementation, and\n   evaluation.\n\
    \   This document defines an Experimental Protocol for the Internet\n   community.\
    \  This document is a product of the Internet Engineering\n   Task Force (IETF).\
    \  It represents the consensus of the IETF\n   community.  It has received public\
    \ review and has been approved for\n   publication by the Internet Engineering\
    \ Steering Group (IESG).  Not\n   all documents approved by the IESG are a candidate\
    \ for any level of\n   Internet Standard; see Section 2 of RFC 5741.\n   Information\
    \ about the current status of this document, any errata,\n   and how to provide\
    \ feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6618.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2012 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \   2. Terminology and Abbreviations ...................................4\n  \
    \ 3. Background ......................................................5\n   4.\
    \ TLS-Based Security Establishment ................................5\n      4.1.\
    \ Overview ...................................................5\n      4.2. Architecture\
    \ ...............................................7\n      4.3. Security Association\
    \ Management ............................7\n      4.4. Bootstrapping of Additional\
    \ Mobile IPv6 Parameters .........9\n      4.5. Protecting Traffic between Mobile\
    \ Node and Home Agent .....10\n   5. MN-to-HAC Communication ........................................10\n\
    \      5.1. Request-Response Message Framing over TLS-Tunnel ..........10\n  \
    \    5.2. Request-Response Message Content Encoding .................11\n    \
    \  5.3. Request-Response Message Exchange .........................12\n      5.4.\
    \ Home Agent Controller Discovery ...........................13\n      5.5. Generic\
    \ Request-Response Parameters .......................13\n           5.5.1. Mobile\
    \ Node Identifier .............................13\n           5.5.2. Authentication\
    \ Method ..............................13\n           5.5.3. Extensible Authentication\
    \ Protocol Payload .........14\n           5.5.4. Status Code ........................................14\n\
    \           5.5.5. Message Authenticator ..............................14\n  \
    \         5.5.6. Retry After ........................................14\n    \
    \       5.5.7. End of Message Content .............................14\n      \
    \     5.5.8. Random Values ......................................15\n      5.6.\
    \ Security Association Configuration Parameters .............15\n           5.6.1.\
    \ Security Parameter Index ...........................15\n           5.6.2. MN-HA\
    \ Shared Keys ..................................16\n           5.6.3. Security\
    \ Association Validity Time .................16\n           5.6.4. Security Association\
    \ Scope (SAS) ...................16\n           5.6.5. Ciphersuites and Ciphersuite-to-Algorithm\
    \ Mapping ..17\n      5.7. Mobile IPv6 Bootstrapping Parameters ......................18\n\
    \           5.7.1. Home Agent Address .................................18\n  \
    \         5.7.2. Mobile IPv6 Service Port Number ....................18\n    \
    \       5.7.3. Home Addresses and Home Network Prefix .............18\n      \
    \     5.7.4. DNS Server .........................................19\n      5.8.\
    \ Authentication of the Mobile Node .........................19\n      5.9. Extensible\
    \ Authentication Protocol Methods ................22\n   6. Mobile Node to Home\
    \ Agent Communication ........................23\n      6.1. General ...................................................23\n\
    \      6.2. PType and Security Parameter Index ........................25\n  \
    \    6.3. Binding Management Message Formats ........................25\n    \
    \  6.4. Reverse-Tunneled User Data Packet Formats .................27\n   7. Route\
    \ Optimization .............................................29\n   8. IANA Considerations\
    \ ............................................29\n      8.1. New Registry: Packet\
    \ Type .................................29\n      8.2. Status Codes ..............................................29\n\
    \      8.3. Port Numbers ..............................................29\n  \
    \ 9. Security Considerations ........................................30\n    \
    \  9.1. Discovery of the HAC ......................................30\n      9.2.\
    \ Authentication and Key Exchange Executed between\n           the MN and the\
    \ HAC ........................................30\n      9.3. Protection of MN\
    \ and HA Communication .....................33\n      9.4. AAA Interworking ..........................................35\n\
    \   10. Acknowledgements ..............................................35\n  \
    \ 11. References ....................................................35\n    \
    \  11.1. Normative References .....................................35\n      11.2.\
    \ Informative References ...................................36\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Mobile IPv6 (MIPv6) [RFC6275] signaling, and optionally\
    \ user traffic,\n   between a Mobile Node (MN) and Home Agent (HA) are secured\
    \ by IPsec\n   [RFC4301].  The current Mobile IPv6 security architecture is\n\
    \   specified in [RFC3776] and [RFC4877].  This security model requires a\n  \
    \ tight coupling between the Mobile IPv6 protocol part and the IKE(v2)/\n   IPsec\
    \ part of the IP stack.  Client implementation experience has\n   shown that the\
    \ use of IKE(v2)/IPsec with Mobile IPv6 is fairly\n   complex.\n   This document\
    \ proposes an alternate security framework for Mobile\n   IPv6 and Dual-Stack\
    \ Mobile IPv6.  The objective is to simplify\n   implementations as well as make\
    \ it easy to deploy the protocol\n   without compromising on security.  Transport\
    \ Layer Security (TLS)\n   [RFC5246] is widely implemented in almost all major\
    \ operating systems\n   and extensively used by various applications.  Instead\
    \ of using IKEv2\n   to establish security associations, the security framework\
    \ proposed\n   in this document is based on TLS-protected messages to exchange\
    \ keys\n   and bootstrapping parameters between the MN and a new functional\n\
    \   entity called the \"Home Agent Controller\" (HAC).  The Mobile IPv6\n   signaling\
    \ between the mobile node and home agent is subsequently\n   secured using the\
    \ resulting keys and negotiated ciphersuite.  The HAC\n   can be co-located with\
    \ the HA, or it can be an independent entity.\n   For the latter case, communication\
    \ between the HAC and HA is not\n   defined by this document.  Such communication\
    \ could be built on top\n   of AAA protocols such as Diameter.\n   The primary\
    \ advantage of using TLS for the establishment of Mobile\n   IPv6 security associations\
    \ as compared to the use of IKEv2 is the\n   ease of implementation (especially\
    \ on the mobile nodes) while\n   providing an equivalent level of security.  A\
    \ solution which\n   decouples Mobile IPv6 security from IPsec, for securing signaling\n\
    \   messages and user plane traffic, is proposed herein that reduces\n   client\
    \ implementation complexity.\n   The security framework proposed in this document\
    \ is not intended to\n   replace the currently specified architecture that relies\
    \ on IPsec and\n   IKEv2.  It provides an alternative solution that is more optimal\
    \ for\n   certain deployment scenarios.  This and other alternative security\n\
    \   models have been considered by the MEXT working group at the IETF,\n   and\
    \ it has been decided that the alternative solutions should be\n   published as\
    \ Experimental RFCs, so that more implementation and\n   deployment experience\
    \ with these models can be gathered.  The status\n   of this proposal may be reconsidered\
    \ in the future if it becomes\n   clear that it is superior to others.\n"
- title: 2.  Terminology and Abbreviations
  contents:
  - "2.  Terminology and Abbreviations\n   The key words \"MUST\", \"MUST NOT\", \"\
    REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n   Home Agent Controller (HAC):\n      The home agent controller\
    \ is a node responsible for bootstrapping\n      Mobile IPv6 security associations\
    \ between a mobile node and one or\n      more home agents.  The home agent controller\
    \ also provides key\n      distribution to both mobile nodes and home agents.\
    \  Mobile IPv6\n      bootstrapping is also performed by the HA in addition to\
    \ the\n      security association bootstrapping between the mobile node and\n\
    \      home agent controller.\n   Binding Management Messages:\n      Mobile IPv6\
    \ signaling messages between a mobile node and a home\n      agent, correspondent\
    \ node, or mobility access point to manage the\n      bindings are referred to\
    \ as binding management messages.  Binding\n      Updates (BUs) and Binding Acknowledgement\
    \ (BA) messages are\n      examples of binding management messages.\n"
- title: 3.  Background
  contents:
  - "3.  Background\n   Mobile IPv6 design and specification began in the mid-to-late\
    \ 90s.\n   The security architecture of Mobile IPv6 was based on the\n   understanding\
    \ that IPsec is an inherent and integral part of the IPv6\n   stack and any protocol\
    \ that needs security should use IPsec unless\n   there is a good reason not to.\
    \  As a result of this mindset, the\n   Mobile IP6 protocol relied on the use\
    \ of IPsec for security between\n   the MN and HA.  Reusing security components\
    \ that are an integral part\n   of the IP stack is a good design objective for\
    \ any protocol; however,\n   in the case of Mobile IPv6, it increases implementation\
    \ complexity.\n   It should be noted that Mobile IPv4 [RFC5944], for example,\
    \ does not\n   use IPsec for security and instead has specified its own security\n\
    \   solution.  Mobile IPv4 has been implemented and deployed on a\n   reasonably\
    \ large scale and the security model has proven itself to be\n   sound.\n   Mobile\
    \ IPv6 standardization was completed in 2005 along with the\n   security architecture\
    \ using IKE/IPsec specified in RFC 3776\n   [RFC3776].  With the evolution to\
    \ IKEv2 [RFC5996], Mobile IPv6\n   security has also been updated to rely on the\
    \ use of IKEv2 [RFC4877].\n   Implementation exercises of Mobile IPv6 and Dual-Stack\
    \ Mobile IPv6\n   [RFC5555] have identified the complexity of using IPsec and\
    \ IKEv2 in\n   conjunction with Mobile IPv6.  Implementing Mobile IPv6 with IPsec\n\
    \   and IKEv2 requires modifications to both the IPsec and IKEv2\n   components,\
    \ due to the communication models that Mobile IPv6 uses and\n   the changing IP\
    \ addresses.  For further details, see Section 7.1 in\n   [RFC3776].\n   This\
    \ document proposes a security framework based on TLS-protected\n   establishment\
    \ of Mobile IPv6 security associations, which reduces\n   implementation complexity\
    \ while maintaining an equivalent (to IKEv2/\n   IPsec) level of security.\n"
- title: 4.  TLS-Based Security Establishment
  contents:
  - '4.  TLS-Based Security Establishment

    '
- title: 4.1.  Overview
  contents:
  - "4.1.  Overview\n   The security architecture proposed in this document relies\
    \ on a\n   secure TLS session established between the MN and the HAC for mutual\n\
    \   authentication and MN-HA security association bootstrapping.\n   Authentication\
    \ of the HAC is done via standard TLS operation wherein\n   the HAC uses a TLS\
    \ server certificate as its credentials.  MN\n   authentication is done by the\
    \ HAC via signaling messages that are\n   secured by the TLS connection.  Any\
    \ Extensible Authentication\n   Protocol (EAP) method or Pre-Shared Key (PSK)\
    \ can be used for\n   authenticating the MN to the HAC.  Upon successful completion\
    \ of\n   authentication, the HAC generates keys that are delivered to the MN\n\
    \   through the secure TLS channel.  The same keys are also provided to\n   the\
    \ assigned HA.  The HAC also provides the MN with MIPv6\n   bootstrapping information\
    \ such as the IPv6 and IPv4 address of the\n   HA, the home network prefix, the\
    \ IPv6 and/or IPv4 Home Address (HoA),\n   and DNS server address.\n   The MN\
    \ and HA use security associations based on the keys and\n   Security Parameter\
    \ Indexes (SPIs) generated by the HAC and delivered\n   to the MN and HA to secure\
    \ signaling and optionally user plane\n   traffic.  Figure 1 below is an illustration\
    \ of the process.\n   Signaling messages and user plane traffic between the MN\
    \ and HA are\n   always UDP encapsulated.  The packet formats for the signaling\
    \ and\n   user plane traffic is described in Sections 6.3 and 6.4.\n   MN    \
    \                        HAC                 HA\n   --                       \
    \     ---                 --\n    |                             |            \
    \       |\n    | /-------------------------\\ |                   |\n    |/  \
    \                         \\|                   |\n    |\\    TLS session setup\
    \      /|                   |\n    | \\-------------------------/ |          \
    \         |\n    |                             |                   |\n    | /-------------------------\\\
    \ |                   |\n    |/     MN Authentication     \\|                \
    \   |\n    |\\                           /|                   |\n    | \\-------------------------/\
    \ |                   |\n    |                             |                 \
    \  |\n    | /-------------------------\\ |                   |\n    |/   HAC provisions\
    \ the MN   \\|                   |\n    |\\  keys, SPI, & MIPv6 parms /|     \
    \              |\n    | \\-------------------------/ |                   |\n \
    \   |                             |--MNID, keys, SPI->|\n    |               \
    \              |                   |\n    | /--------------------------------------------\\\
    \  |\n    |/     MN-HA SA established; Secures            \\ |\n    |\\     signaling\
    \ and optionally user traffic    / |\n    | \\--------------------------------------------/\
    \  |\n    |                                                 |\n    |------------BU(encrypted)----------------------->|\n\
    \    |                                                 |\n    |<---------BAck(encrypted)------------------------|\n\
    \                     Figure 1: High-Level Architecture\n"
- title: 4.2.  Architecture
  contents:
  - "4.2.  Architecture\n   The TLS-based security architecture is shown in Figure\
    \ 2.  The\n   signaling message exchange between the MN and the HAC is protected\
    \ by\n   TLS.  It should be noted that an HAC, a AAA server, and an HA are\n \
    \  logically separate entities and can be collocated in all possible\n   combinations.\
    \  There MUST be a strong trust relationship between the\n   HA and the HAC, and\
    \ the communication between them MUST be both\n   integrity and confidentially\
    \ protected.\n   +------+             +------+            +------+\n   |Mobile|\
    \     TLS     |Home  |    AAA     | AAA  |\n   | Node |<----------->|Agent |<---------->|Server|\n\
    \   |      |             |Contrl|            |      |\n   +------+           \
    \  +------+            +------+\n      ^                     ^               \
    \    ^\n      |                     |                   |\n      | BU/BA/../ \
    \          | e.g., AAA         | AAA\n      | (Data)              |          \
    \         |\n      |                     v                   |\n      |      \
    \          +---------+              |\n      |                | MIPv6   |    \
    \          |\n      +--------------->| Home    |<-------------+\n            \
    \           | Agent(s)|\n                       +---------+\n            Figure\
    \ 2: TLS-Based Security Architecture Overview\n"
- title: 4.3.  Security Association Management
  contents:
  - "4.3.  Security Association Management\n   Once the MN has contacted the HAC and\
    \ mutual authentication has taken\n   place between the MN and the HAC, the HAC\
    \ securely provisions the MN\n   with all security-related information inside\
    \ the TLS protected\n   tunnel.  This security-related information constitutes\
    \ a security\n   association (SA) between the MN and the HA.  The created SA MUST\
    \ NOT\n   be tied to the Care-of Address (CoA) of the MN.\n   The HAC may proactively\
    \ distribute the SA information to HAs, or the\n   HA may query the SA information\
    \ from the HAC once the MN contacts the\n   HA.  If the HA requests SA information\
    \ from the HAC, then the HA MUST\n   be able to query/index the SA information\
    \ from the HAC based on the\n   SPI identifying the correct security association\
    \ between the MN and\n   the HA.\n   The HA may want the MN to re-establish the\
    \ SA even if the existing SA\n   is still valid.  The HA can indicate this to\
    \ the MN using a dedicated\n   Status Code in a BA (value set to REINIT_SA_WITH_HAC).\
    \  As a result,\n   the MN SHOULD contact the HAC prior to the SA timing out,\
    \ and the HAC\n   would provision the MN and HAs with a new SA to be used subsequently.\n\
    \   The SA established between MN and HAC SHALL contain at least the\n   following\
    \ information:\n   Mobility SPI:\n      This parameter is an SPI used by the MN\
    \ and the HA to index the SA\n      between the MN and the HA.  The HAC is responsible\
    \ for assigning\n      SPIs to MNs.  There is only one SPI for both binding management\n\
    \      messaging and possible user data protection.  The same SPI is used\n  \
    \    for both directions between the MN and the HA.  The SPI values are\n    \
    \  assigned by the HAC.  The HAC MUST ensure uniqueness of the SPI\n      values\
    \ across all MNs controlled by the HAC.\n   MN-HA keys for ciphering:\n      A\
    \ pair of symmetric keys (MN -> HA, HA -> MN) used for ciphering\n      Mobile\
    \ IPv6 traffic between the MN and the HA.  The HAC is\n      responsible for generating\
    \ these keys.  The key generation\n      algorithm is specific to the HAC implementation.\n\
    \   MN-HA shared key for integrity protection:\n      A pair of symmetric keys\
    \ (MN -> HA, HA -> MN) used for integrity\n      protecting Mobile IPv6 traffic\
    \ between the MN and the HA.  This\n      includes both binding management messages\
    \ and reverse-tunneled\n      user data traffic between the MN and the HA.  The\
    \ HAC is\n      responsible for generating these keys.  The key generation\n \
    \     algorithm is specific to the HAC implementation.  In the case of\n     \
    \ combined algorithms, a separate integrity protection key is not\n      needed\
    \ and may be omitted, i.e., the encryption keys SHALL be\n      used.\n   Security\
    \ association validity time:\n      This parameter represents the validity time\
    \ for the security\n      association.  The HAC is responsible for defining the\
    \ lifetime\n      value based on its policies.  The lifetime may be in the order\
    \ of\n      hours or weeks.  The MN MUST re-contact the HAC before the SA\n  \
    \    validity time ends.\n   Security association scope:\n      This parameter\
    \ defines whether the security association is applied\n      to Mobile IPv6 signaling\
    \ messages only or to both Mobile IPv6\n      signaling messages and data traffic.\n\
    \   Selected ciphersuite:\n      This parameter is the ciphersuite used to protect\
    \ the traffic\n      between the MN and the HA.  This includes both binding management\n\
    \      messages and reverse-tunneled user data traffic between the MN and\n  \
    \    the HA.  The selected algorithms SHOULD be one of the mutually\n      supported\
    \ ciphersuites of the negotiated TLS version between the\n      MN and the HAC.\
    \  The HAC is responsible for choosing the mutually\n      supported ciphersuite\
    \ that complies with the policy of the HAC.\n      Obviously, the HAs under HAC's\
    \ management must have at least one\n      ciphersuite with the HAC in common\
    \ and need to be aware of the\n      implemented ciphersuites.  The selected ciphersuite\
    \ is the same\n      for both directions (MN -> HA and HA -> MN).\n   Sequence\
    \ numbers:\n      A monotonically increasing unsigned sequence number used in\
    \ all\n      protected packets exchanged between the MN and the HA in the same\n\
    \      direction.  Sequence numbers are maintained per direction, so each\n  \
    \    SA includes two independent sequence numbers (MN -> HA, HA -> MN).\n    \
    \  The initial sequence number for each direction MUST always be set\n      to\
    \ 0 (zero).  Sequence numbers cycle to 0 (zero) when increasing\n      beyond\
    \ their maximum defined value.\n"
- title: 4.4.  Bootstrapping of Additional Mobile IPv6 Parameters
  contents:
  - "4.4.  Bootstrapping of Additional Mobile IPv6 Parameters\n   When the MN contacts\
    \ the HAC to distribute the security-related\n   information, the HAC may also\
    \ provision the MN with various MIPv6-\n   related bootstrapping information.\
    \  Bootstrapping of the following\n   information SHOULD at least be possible:\n\
    \   Home Agent IP Address:\n      The IPv6 and IPv4 address of the home agent\
    \ assigned by the HAC.\n   Mobile IPv6 Service Port Number:\n      The port number\
    \ where the HA is listening to UDP [RFC0768]\n      packets.\n   Home Address:\n\
    \      The IPv6 and/or IPv4 home address assigned to the mobile node by\n    \
    \  the HAC.\n   Home Link Prefix:\n      Concerns the IPv6 Home link prefix and\
    \ the associated prefix\n      length.\n   DNS Server Address:\n      The address\
    \ of a DNS server that can be reached via the HA.  DNS\n      queries in certain\
    \ cases cannot be routed to the DNS servers\n      assigned by the access network\
    \ to which the MN is attached; hence,\n      an additional DNS server address\
    \ that is reachable via the HA\n      needs to be configured.\n   The MIPv6-related\
    \ bootstrapping information is delivered from the HAC\n   to the MN over the same\
    \ TLS protected tunnel as the security related\n   information.\n"
- title: 4.5.  Protecting Traffic between Mobile Node and Home Agent
  contents:
  - "4.5.  Protecting Traffic between Mobile Node and Home Agent\n   The same integrity\
    \ and confidentiality algorithms MUST be used to\n   protect both binding management\
    \ messages and reverse-tunneled user\n   data traffic between the MN and the HA.\
    \  Generally, all binding\n   management messages (BUs, BAs, and so on) MUST be\
    \ integrity protected\n   and SHOULD be confidentially protected.  The reverse-tunneled\
    \ user\n   data traffic SHOULD be equivalently protected.  Generally, the\n  \
    \ requirements stated in [RFC6275] concerning the protection of the\n   traffic\
    \ between the MN and the HA also apply to the mechanisms\n   defined by this specification.\n"
- title: 5.  MN-to-HAC Communication
  contents:
  - '5.  MN-to-HAC Communication

    '
- title: 5.1.  Request-Response Message Framing over TLS-Tunnel
  contents:
  - "5.1.  Request-Response Message Framing over TLS-Tunnel\n   The MN and the HAC\
    \ communicate with each other using a simple\n   lockstep request-response protocol\
    \ that is run inside the protected\n   TLS-tunnel.  A generic message container\
    \ framing for the request\n   messages and for the response messages is defined.\
    \  The message\n   containers are only meant to be exchanged on top of a connection-\n\
    \   oriented TLS-layer.  Therefore, the end of message exchange is\n   determined\
    \ by the other end closing the transport connection\n   (assuming the \"application\
    \ layer\" has also indicated the completion\n   of the message exchange).  The\
    \ peer initiating the TLS connection is\n   always sending \"Requests\", and the\
    \ peer accepting the TLS connection\n   is always sending \"Responses\".  The\
    \ format of the message container\n   is shown in Figure 3.\n   All data inside\
    \ the Content portion of the message container MUST be\n   encoded using octets.\
    \  Fragmentation of message containers is not\n   supported, which means one request\
    \ or response at the \"application\n   layer\" MUST NOT exceed the maximum size\
    \ allowed by the message\n   container format.\n    0                   1    \
    \               2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7\
    \ 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | Ver |  Rsrvd  | Identifier    | Length                        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | Content portion..                                             ~\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \               Figure 3: Request-Response Message Container\n   The 3-bit Ver\
    \ field identifies the protocol version.  The current\n   version is 0, i.e.,\
    \ all bits are set to a value of 0 (zero).\n   The Rsrvd field MUST be set to\
    \ a value of 0 (zero),\n   The Identifier field is meant to match requests and\
    \ responses.  The\n   valid Identifier values are between 1-255.  The value 0\
    \ MUST NOT be\n   used.  The first request for each communication session between\
    \ the\n   MN and the HAC MUST have the Identifier values set to 1.\n   The Length\
    \ field tells the length of the Content portion of the\n   container (i.e., Reserved\
    \ octet, Identifier octet, and Length field\n   are excluded).  The Content portion\
    \ length MUST always be at least\n   one octet and up to 65535 octets.  The value\
    \ is in network order.\n"
- title: 5.2.  Request-Response Message Content Encoding
  contents:
  - "5.2.  Request-Response Message Content Encoding\n   The encoding of the message\
    \ content is similar to HTTP header\n   encoding and complies with the augmented\
    \ Backus-Naur Form (BNF)\n   defined in Section 2.1 of [RFC2616].  All presented\
    \ hexadecimal\n   numbers are in network byte order.  From now on, we use the\
    \ TypeValue\n   header (TV-header) term to refer to request-response message content\n\
    \   HTTP-like headers.\n"
- title: 5.3.  Request-Response Message Exchange
  contents:
  - "5.3.  Request-Response Message Exchange\n   The message exchange between the\
    \ MN and the HAC is a simple lockstep\n   request-response type as stated in Section\
    \ 5.1.  A request message\n   includes a monotonically increasing Identifier value\
    \ that is copied\n   to the corresponding response message.  Each request MUST\
    \ have a\n   different Identifier value.  Hence, a reliable connection-oriented\n\
    \   transport below the message container framing is assumed.  The number\n  \
    \ of request-response message exchanges MUST NOT exceed 255.\n   Each new communication\
    \ session between the MN and the HAC MUST reset\n   the Identifier value to 1.\
    \  The MN is also the peer that always sends\n   only request messages and the\
    \ HAC only sends response messages.  Once\n   the request-response message exchange\
    \ completes, the HAC and the MN\n   MUST close the transport connection and the\
    \ corresponding TLS-tunnel.\n   In the case of an HAC-side error, the HAC MUST\
    \ send a response back\n   to an MN with an appropriate status code and then close\
    \ the transport\n   connection.\n   The first request message - MHAuth-Init -\
    \ (i.e., the Identifier is 1)\n   MUST always contain at least the following parameters:\n\
    \      MN-Identity - See Section 5.5.1.\n      Authentication Method - See Section\
    \ 5.5.2.\n   The first response message - MHAuth-Init - (i.e., the Identifier\
    \ is\n   1) MUST contain at minimum the following parameters:\n      Selected\
    \ authentication Method - See Section 5.5.2.\n   The last request message from\
    \ the MN side - MHAuth-Done - MUST\n   contain the following parameters:\n   \
    \   Security association scope - See Section 5.6.4.\n      Proposed ciphersuites\
    \ - See Section 5.6.5.\n      Message Authenticator - See Section 5.5.5.\n   The\
    \ last response message - MHAuth-Done - that ends the request-\n   response message\
    \ exchange MUST contain the following parameters:\n      Status Code - See Section\
    \ 5.5.4.\n      Message Authenticator - See Section 5.5.5.\n   In the case of\
    \ successful authentication, the following additional\n   parameters:\n      Selected\
    \ ciphersuite - See Section 5.6.5.\n      Security association scope - See Section\
    \ 5.6.4.\n      The rest of the security association data - See Section 5.6.\n"
- title: 5.4.  Home Agent Controller Discovery
  contents:
  - "5.4.  Home Agent Controller Discovery\n   All bootstrapping information, whether\
    \ for setting up the SA or for\n   bootstrapping MIPv6-specific information, is\
    \ exchanged between the MN\n   and the HAC using the framing protocol defined\
    \ in Section 5.1.  The\n   IP address of the HAC MAY be statically configured\
    \ in the MN or\n   alternatively MAY be dynamically discovered using DNS.  In\
    \ the case\n   of DNS-based HAC discovery, the MN queries either an A/AAAA or\
    \ a SRV\n   record for the HAC IP address.  The actual domain name used in\n \
    \  queries is up to the deployment to decide and out of scope of this\n   specification.\n"
- title: 5.5.  Generic Request-Response Parameters
  contents:
  - "5.5.  Generic Request-Response Parameters\n   The grammar used in the following\
    \ sections is the augmented Backus-\n   Naur Form (BNF), the same as that used\
    \ by HTTP [RFC2616].\n"
- title: 5.5.1.  Mobile Node Identifier
  contents:
  - "5.5.1.  Mobile Node Identifier\n   An identifier that identifies an MN.  The\
    \ Mobile Node Identifier is\n   in the form of a Network Access Identifier (NAI)\
    \ [RFC4282].\n      mn-id = \"mn-id\" \":\" RFC4282-NAI CRLF\n"
- title: 5.5.2.  Authentication Method
  contents:
  - "5.5.2.  Authentication Method\n   The HAC is the peer that mandates the authentication\
    \ method.  The MN\n   sends its authentication method proposal to the HAC.  The\
    \ HAC, upon\n   receipt of the MN proposal, returns the selected authentication\n\
    \   method.  The MN MUST propose at least one authentication method.  The\n  \
    \ HAC MUST select exactly one authentication method or return an error\n   and\
    \ then close the connection.\n      auth-method = \"auth-method\" \":\" a-method\
    \ *(\",\" a-method) CRLF\n      a-method =\n           \"psk\" ; PSK-based authentication\n\
    \         | \"eap\" ; EAP-based authentication\n"
- title: 5.5.3.  Extensible Authentication Protocol Payload
  contents:
  - "5.5.3.  Extensible Authentication Protocol Payload\n   Each Extensible Authentication\
    \ Protocol (EAP) [RFC3748] message is an\n   encoded string of hexadecimal numbers.\
    \  The \"eap-payload\" is\n   completely transparent as to which EAP-method or\
    \ EAP message is\n   carried inside it.  The \"eap-payload\" can appear in both\
    \ request and\n   response messages:\n      eap-payload = \"eap-payload\" \":\"\
    \ 1*(HEX HEX) CRLF\n"
- title: 5.5.4.  Status Code
  contents:
  - "5.5.4.  Status Code\n   The \"status-code\" MUST only be present in the response\
    \ message that\n   ends the request-response message exchange.  The \"status-code\"\
    \n   follows the principles of HTTP and the definitions found in Section\n   10\
    \ of RFC 2616 also apply for these status codes listed below:\n      status-code\
    \ = \"status-code\" \":\" status-value CRLF\n      status-value =\n          \
    \ \"100\" ; Continue\n         | \"200\" ; OK\n         | \"400\" ; Bad Request\n\
    \         | \"401\" ; Unauthorized\n         | \"500\" ; Internal Server Error\n\
    \         | \"501\" ; Not Implemented\n         | \"503\" ; Service Unavailable\n\
    \         | \"504\" ; Gateway Time-out\n"
- title: 5.5.5.  Message Authenticator
  contents:
  - "5.5.5.  Message Authenticator\n   The \"auth\" header contains data used for\
    \ authentication purposes.  It\n   MUST be the last TV-header in the message and\
    \ calculated over the\n   whole message till the start of the \"msg-header\":\n\
    \      msg-auth = \"auth\" \":\" 1*(HEX HEX) CRLF\n"
- title: 5.5.6.  Retry After
  contents:
  - "5.5.6.  Retry After\n      retry-after = \"retry-after\" \":\" rfc1123-date CRLF\n"
- title: 5.5.7.  End of Message Content
  contents:
  - "5.5.7.  End of Message Content\n      end-of-message = 2CRLF\n"
- title: 5.5.8.  Random Values
  contents:
  - "5.5.8.  Random Values\n   Random numbers generated by the MN and the HAC, respectively.\
    \  The\n   length of the random number MUST be 32 octets (before TV-header\n \
    \  encoding):\n      mn-rand = \"mn-rand\" \":\" 32(HEX HEX) CRLF\n      hac-rand\
    \ = \"hac-rand\" \":\" 32(HEX HEX) CRLF\n"
- title: 5.6.  Security Association Configuration Parameters
  contents:
  - "5.6.  Security Association Configuration Parameters\n   During the Mobile IPv6\
    \ bootstrapping, the MN and the HAC negotiate a\n   single ciphersuite for protecting\
    \ the traffic between the MN and the\n   HA.  The allowed ciphersuites for this\
    \ specification are a subset of\n   those in TLS version 1.2 (see Appendix A.5\
    \ of [RFC5246]) per\n   Section 5.6.5.  This might appear as a constraint as the\
    \ HA and the\n   HAC may have implemented different ciphersuites.  These two nodes\n\
    \   are, however, assumed to belong to the same administrative domain.\n   In\
    \ order to avoid exchanging supported MN-HA ciphersuites in the MN-\n   HAC protocol\
    \ and to reuse the TLS ciphersuite negotiation procedure,\n   we make this simplifying\
    \ assumption.  The selected ciphersuite MUST\n   provide integrity and confidentiality\
    \ protection.\n   Section 5.6.5 provides the mapping from the TLS ciphersuites\
    \ to the\n   integrity and encryption algorithms allowed for MN-HA protection.\n\
    \   This mapping mainly ignores the authentication algorithm part that is\n  \
    \ not required within the context of this specification.  For example,\n   [RFC5246]\
    \ defines a number of AES-based ciphersuites for TLS\n   including 'TLS_RSA_WITH_AES_128_CBC_SHA'.\
    \  For this specification,\n   the relevant part is 'AES_128_CBC_SHA'.\n   All\
    \ the parameters described in the following sections apply only to\n   a request-response\
    \ protocol response message to the MN.  The MN has\n   no way of affecting the\
    \ provisioning decision of the HAC.\n"
- title: 5.6.1.  Security Parameter Index
  contents:
  - "5.6.1.  Security Parameter Index\n   The 28-bit unsigned SPI number identifies\
    \ the SA used between the MN\n   and the HA.  The value 0 (zero) is reserved and\
    \ MUST NOT be used.\n   Therefore, values ranging from 1 to 268435455 are valid.\n\
    \   The TV-header corresponding to the SPI number is as follows:\n      mip6-spi\
    \ = \"mip6-spi\" \":\" 1*DIGIT CRLF\n"
- title: 5.6.2.  MN-HA Shared Keys
  contents:
  - "5.6.2.  MN-HA Shared Keys\n   The MN-HA shared integrity (ikey) and encryption\
    \ (ekey) keys are used\n   to protect the traffic between the MN and the HA. \
    \ The length of\n   these keys depend on the selected ciphersuite.\n   The TV-headers\
    \ that carry these two parameters are the following:\n      mip6-mn-to-ha-ikey\
    \ = \"mip6-mn-to-ha-ikey\" \":\" 1*(HEX HEX) CRLF\n      mip6-ha-to-mn-ikey =\
    \ \"mip6-ha-to-mn-ikey\" \":\" 1*(HEX HEX) CRLF\n      mip6-mn-to-ha-ekey = \"\
    mip6-mn-to-ha-ekey\" \":\" 1*(HEX HEX) CRLF\n      mip6-ha-to-mn-ekey = \"mip6-ha-to-mn-ekey\"\
    \ \":\" 1*(HEX HEX) CRLF\n"
- title: 5.6.3.  Security Association Validity Time
  contents:
  - "5.6.3.  Security Association Validity Time\n   The end of the SA validity time\
    \ is encoded using the \"rfc1123-date\"\n   format, as defined in Section 3.3.1\
    \ of [RFC2616].\n   The TV-header corresponding to the SA validity time value\
    \ is as\n   follows:\n   mip6-sa-validity-end = \"mip6-sa-validity-end\" \":\"\
    \ rfc1123-date CRLF\n"
- title: 5.6.4.  Security Association Scope (SAS)
  contents:
  - "5.6.4.  Security Association Scope (SAS)\n   The SA is applied either to Mobile\
    \ IPv6 signaling messages only or to\n   both Mobile IPv6 signaling messages and\
    \ data traffic.  This policy\n   MUST be agreed between the MN and HA prior to\
    \ using the SA.\n   Otherwise, the receiving side will be unaware of whether the\
    \ SA\n   applies to data traffic and hence unable to decide how to act when\n\
    \   receiving unprotected packets of PType 1 (see Section 6.4).\n      mip6-sas\
    \ = \"mip6-sas\" \":\" 1DIGIT CRLF\n   where a value of \"O\" indicates that the\
    \ SA does not protect data\n   traffic and a value of \"1\" indicates that all\
    \ data traffic MUST be\n   protected by the SA.  If the mip6-sas value of an SA\
    \ is set to 1, any\n   packet received with a PType value that does not match\
    \ the mip6-sas\n   value of the SA MUST be silently discarded.\n   The HAC is\
    \ the peer that mandates the used security association\n   scope.  The MN sends\
    \ its proposal to the HAC, but eventually the\n   security association scope returned\
    \ from the HAC defines the used\n   scope.\n"
- title: 5.6.5.  Ciphersuites and Ciphersuite-to-Algorithm Mapping
  contents:
  - "5.6.5.  Ciphersuites and Ciphersuite-to-Algorithm Mapping\n   The ciphersuite\
    \ negotiation between HAC and MN uses a subset of the\n   TLS 1.2 ciphersuites\
    \ and follows the TLS 1.2 numeric representation\n   defined in Appendix A.5 of\
    \ [RFC5246].  The TV-headers corresponding\n   to the selected ciphersuite and\
    \ ciphersuite list are the following:\n      mip6-ciphersuite = \"mip6-ciphersuite\"\
    \ \":\" csuite CRLF\n      csuite = \"{\" suite \"}\"\n      suite =\n       \
    \    \"00\" \",\" \"02\" ; CipherSuite NULL_SHA           = {0x00,0x02}\n    \
    \     | \"00\" \",\" \"3B\" ; CipherSuite NULL_SHA256        = {0x00,0x3B}\n \
    \        | \"00\" \",\" \"0A\" ; CipherSuite 3DES_EDE_CBC_SHA   = {0x00,0x0A}\n\
    \         | \"00\" \",\" \"2F\" ; CipherSuite AES_128_CBC_SHA    = {0x00,0x2F}\n\
    \         | \"00\" \",\" \"3C\" ; CipherSuite AES_128_CBC_SHA256 = {0x00,0x3C}\n\
    \      mip6-suitelist = \"mip6-suitelist\" \":\" csuite *(\",\" csuite) CRLF\n\
    \   All other Ciphersuite values are reserved.\n   The following integrity algorithms\
    \ MUST be supported by all\n   implementations:\n      HMAC-SHA1-96          \
    \          [RFC2404]\n      AES-XCBC-MAC-96                 [RFC3566]\n   The\
    \ binding management messages between the MN and HA MUST be\n   integrity protected.\
    \  Implementations MUST NOT use a NULL integrity\n   algorithm.\n   The following\
    \ encryption algorithms MUST be supported:\n      NULL                       \
    \     [RFC2410]\n      TripleDES-CBC                   [RFC2451]\n      AES-CBC\
    \ with 128-bit keys       [RFC3602]\n   Traffic between MN and HA MAY be encrypted.\
    \  Any integrity-only\n   Ciphersuite makes use of the NULL encryption algorithm.\n\
    \   Note: This document does not consider combined algorithms.  The\n   following\
    \ table provides the mapping of each ciphersuite to a\n   combination of integrity\
    \ and encryption algorithms that are part of\n   the negotiated SA between MN\
    \ and HA.\n   +-------------------+-----------------+--------------------------+\n\
    \   |Ciphersuite        |Integ. Algorithm |Encr. Algorithm           |\n   +-------------------+-----------------+--------------------------+\n\
    \   |NULL_SHA           |HMAC-SHA1-96     |NULL                      |\n   |NULL_SHA256\
    \        |AES-XCBC-MAC-96  |NULL                      |\n   |3DES_EDE_CBC_SHA\
    \   |HMAC-SHA1-96     |TripleDES-CBC             |\n   |AES_128_CBC_SHA    |HMAC-SHA1-96\
    \     |AES-CBC with 128-bit keys |\n   |AES_128_CBC_SHA256 |AES-XCBC-MAC-96  |AES-CBC\
    \ with 128-bit keys |\n   +-------------------+----------------+---------------------------+\n\
    \                     Ciphersuite-to-Algorithm Mapping\n"
- title: 5.7.  Mobile IPv6 Bootstrapping Parameters
  contents:
  - "5.7.  Mobile IPv6 Bootstrapping Parameters\n   In parallel with the SA bootstrapping,\
    \ the HAC SHOULD provision the\n   MN with relevant MIPv6-related bootstrapping\
    \ information.\n   The following generic BNFs are used to form IP addresses and\n\
    \   prefixes.  They are used in subsequent sections.\n      ip6-addr   = 7( word\
    \ \":\" ) word CRLF\n      word       = 1*4HEX\n      ip6-prefix = ip6-addr \"\
    /\" 1*2DIGIT\n      ip4-addr   = 1*3DIGIT \".\" 1*3DIGIT \".\" 1*3DIGIT \".\"\
    \ 1*3DIGIT\n      ip4-subnet = ip4-addr \"/\" 1*2DIGIT\n"
- title: 5.7.1.  Home Agent Address
  contents:
  - "5.7.1.  Home Agent Address\n   The HAC MAY provision the MN with an IPv4 or an\
    \ IPv6 address of an\n   HA, or both.\n      mip6-haa-ip6 = \"mip6-haa-ip6\" \"\
    :\" ip6-addr CRLF\n      mip6-haa-ip4 = \"mip6-haa-ip4\" \":\" ip4-addr CRLF\n"
- title: 5.7.2.  Mobile IPv6 Service Port Number
  contents:
  - "5.7.2.  Mobile IPv6 Service Port Number\n   The HAC SHOULD provision the MN with\
    \ an UDP port number, where the HA\n   expects to receive UDP packets.  If this\
    \ parameter is not present,\n   then the IANA reserved port number (mipv6tls)\
    \ MUST be used instead.\n      mip6-port = \"mip6-port\" \":\" 1*5DIGIT CRLF\n"
- title: 5.7.3.  Home Addresses and Home Network Prefix
  contents:
  - "5.7.3.  Home Addresses and Home Network Prefix\n   The HAC MAY provision the\
    \ MN with an IPv4 or an IPv6 home address, or\n   both.  The HAC MAY also provision\
    \ the MN with its home network\n   prefix.\n      mip6-ip6-hoa = \"mip6-ip6-hoa\"\
    \ \":\" ip6-addr CRLF\n      mip6-ip4-hoa = \"mip6-ip4-hoa\" \":\" ip4-addr CRLF\n\
    \      mip6-ip6-hnp = \"mip6-ip6-hnp\" \":\" ip6-prefix CRLF\n      mip6-ip4-hnp\
    \ = \"mip6-ip4-hnp\" \":\" ip4-subnet CRLF\n"
- title: 5.7.4.  DNS Server
  contents:
  - "5.7.4.  DNS Server\n   The HAC may also provide the MN with DNS server configuration\n\
    \   options.  These DNS servers are reachable via the home agent.\n      dns-ip6\
    \ = \"dns-ip6\" \":\" ip6-addr CRLF\n      dns-ip4 = \"dns-ip4\" \":\" ip4-addr\
    \ CRLF\n"
- title: 5.8.  Authentication of the Mobile Node
  contents:
  - "5.8.  Authentication of the Mobile Node\n   This section describes the basic\
    \ operation required for the MN-HAC\n   mutual authentication and the channel\
    \ binding.  The authentication\n   protocol described as part of this section\
    \ is a simple exchange that\n   follows the Generalized Pre-Shared Key (GPSK)\
    \ exchange used by EAP-\n   GPSK [RFC5433].  It is secured by the TLS tunnel and\
    \ is\n   cryptographically bound to the TLS tunnel through channel binding\n \
    \  based on [RFC5056] and on the channel binding type 'tls-server-\n   endpoint'\
    \ described in [RFC5929].  As a result of the channel binding\n   type, this method\
    \ can only be used with TLS ciphersuites that use\n   server certificates and\
    \ the Certificate handshake message.  For\n   example, TLS ciphersuites based\
    \ on PSK or anonymous authentication\n   cannot be used.\n   The authentication\
    \ exchange MUST be performed through the encrypted\n   TLS tunnel.  It performs\
    \ mutual authentication between the MN and the\n   HAC based on a PSK or based\
    \ on an EAP-method (see Section 5.9).  Note\n   that an HAC MUST NOT allow MNs\
    \ to renegotiate TLS sessions.  The PSK\n   protocol is described in this section.\
    \  It consists of the message\n   exchanges (MHAuth-Init, MHAuth-Mid, MHAuth-Done)\
    \ in which both sides\n   exchange nonces and their identities, and compute and\
    \ exchange a\n   message authenticator 'auth' over the previously exchanged values,\n\
    \   keyed with the pre-shared key.  The MHAuth-Done messages are used to\n   deal\
    \ with error situations.  Key binding with the TLS tunnel is\n   ensured by channel\
    \ binding of the type \"tls-server-endpoint\" as\n   described by [RFC5929] where\
    \ the hash of the TLS server certificate\n   serves as input to the 'auth' calculation\
    \ of the MHAuth messages.\n   Note: The authentication exchange is based on the\
    \ GPSK exchange used\n   by EAP-GPSK.  In comparison to GPSK, it does not support\
    \ exchanging\n   an encrypted container (it always runs through an already protected\n\
    \   TLS tunnel).  Furthermore, the initial request of the authentication\n   exchange\
    \ (MHAuth-Init) is sent by the MN (client side) and is\n   comparable to EAP-Response/Identity,\
    \ which reverses the roles of\n   request and response messages compared to EAP-GPSK.\
    \  Figure 4 shows a\n   successful protocol exchange.\n   MN                 \
    \                                     HAC\n    |                             \
    \                          |\n    | Request/MHAuth-Init (...)                \
    \             |\n    |------------------------------------------------------>|\n\
    \    |                                                       |\n    |        \
    \                    Response/MHAuth-Init (...) |\n    |<------------------------------------------------------|\n\
    \    |                                                       |\n    | Request/MHAuth-Done\
    \ (...)                             |\n    |------------------------------------------------------>|\n\
    \    |                                                       |\n    |        \
    \                    Response/MHAuth-Done (...) |\n    |<------------------------------------------------------|\n\
    \    |                                                       |\n     Figure 4:\
    \ Authentication of the Mobile Node Using Shared Secrets\n   1)  Request/MHAuth-Init:\
    \ (MN -> HAC)\n          mn-id, mn-rand, auth-method=psk\n   2)  Response/MHAuth-Init:\
    \ (MN <- HAC)\n          [mn-rand, hac-rand, auth-method=psk, [status],] auth\n\
    \   3)  Request/MHAuth-Done: (MN -> HAC)\n          mn-rand, hac-rand, sa-scope,\
    \ ciphersuite-list, auth\n   4)  Response/MHAuth-Done: (MN <- HAC)\n         \
    \ [sa-scope, sa-data, ciphersuite, bootstrapping-data,] mn-rand,\n          hac-rand,\
    \ status, auth\n   Where 'auth' for MN -> HAC direction is as follows:\n     \
    \ auth = HMAC-SHA256(PSK, \"MN\" | msg-octets | CB-octets)\n   Where 'auth' for\
    \ MN <- HAC direction is as follows:\n      auth = HMAC-SHA256(PSK, \"HAC\" |\
    \ msg-octets | CB-octets)\n   In the above, \"MN\" is 2 ASCII characters without\
    \ null termination and\n   \"HAC\" is 3 ASCII characters without null termination.\n\
    \   The length \"mn-rand\", \"hac-rand\" is 32 octets.  Note that \"|\"\n   indicates\
    \ concatenation and optional parameters are shown in square\n   brackets [..].\
    \  The square brackets can be nested.\n   The shared secret PSK can be variable\
    \ length. 'msg-octets' includes\n   all payload parameters of the respective message\
    \ to be signed except\n   the 'auth' payload.  CB-octets is the channel binding\
    \ input to the\n   auth calculation that is the \"TLS-server-endpoint\" channel\
    \ binding\n   type.  The content and algorithm (only required for the \"TLS-server-\n\
    \   endpoint\" type) are the same as described in [RFC5929].\n   The MN starts\
    \ by selecting a random number 'mn-rand' and choosing a\n   list of supported\
    \ authentication methods coded in 'auth-method'.  The\n   MN sends its identity\
    \ 'mn-id', 'mn-rand', and 'auth-method' to the\n   HAC in MHAuth-Init.  The decision\
    \ of which authentication method to\n   offer and which to pick is policy and\
    \ implementation dependent and,\n   therefore, outside the scope of this document.\n\
    \   In MHAuth-Done, the HAC sends a random number 'hac-rand' and the\n   selected\
    \ ciphersuite.  The selection MUST be one of the MN-supported\n   ciphersuites\
    \ as received in 'ciphersuite-list'.  Furthermore, it\n   repeats the received\
    \ parameters of the MHAuth-Init message 'mn-rand'.\n   It computes a message authenticator\
    \ 'auth' over all the transmitted\n   parameters except 'auth' itself.  The HAC\
    \ calculates 'auth' over all\n   parameters and appends it to the message.\n \
    \  The MN verifies the received Message Authentication Code (MAC) and\n   the\
    \ consistency of the identities, nonces, and ciphersuite parameters\n   transmitted\
    \ in MHAuth-Auth.  In case of successful verification, the\n   MN computes a MAC\
    \ over the session parameter and returns it to the\n   HAC in MHAuth-Done.  The\
    \ HAC verifies the received MAC and the\n   consistency of the identities, nonces,\
    \ and ciphersuite parameters\n   transmitted in MHAuth-Init.  If the verification\
    \ is successful,\n   MHAuth-Done is prepared and sent by the HAC to confirm successful\n\
    \   completion of the exchange.\n"
- title: 5.9.  Extensible Authentication Protocol Methods
  contents:
  - "5.9.  Extensible Authentication Protocol Methods\n   Basic operation required\
    \ for the MN-HAC mutual authentication using\n   EAP-based methods.\n   MN   \
    \                                                   HAC\n    |               \
    \                                        |\n    | Request/MHAuth-Init (...)  \
    \                           |\n    |------------------------------------------------------>|\n\
    \    |                                                       |\n    |        \
    \                    Response/MHAuth-Init (..., |\n    |                     eap-payload=EAP-Request/Identity)\
    \ |\n    |<------------------------------------------------------|\n    |    \
    \                                                   |\n    | Request/MHAuth-Mid\
    \ (eap-payload=                      |\n    |              EAP-Response/Identity)\
    \                   |\n    |------------------------------------------------------>|\n\
    \    |                                                       |\n    |     Response/MHAuth-Mid\
    \ (eap-payload=EAP-Request/...) |\n    |<------------------------------------------------------|\n\
    \    |                                                       |\n    :        \
    \                                               :\n    :        ..EAP-method specific\
    \ exchanges..              :\n    :                                          \
    \             :\n    |                                                       |\n\
    \    | Request/MHAuth-Done (eap-payload=EAP-Response/...,    |\n    |        \
    \              ..., auth)                       |\n    |------------------------------------------------------>|\n\
    \    |                                                       |\n    |        Response/MHAuth-Done\
    \ (eap-payload=EAP-Success, |\n    |                              ..., auth) \
    \              |\n    |<------------------------------------------------------|\n\
    \    |                                                       |\n           Figure\
    \ 5: Authentication of the Mobile Node Using EAP\n   1)  Request/MHAuth-Init:\
    \ (MN -> HAC)\n          mn-id, mn-rand, auth-method=eap\n   2)  Response/MHAuth-Init:\
    \ (MN <- HAC)\n          [auth-method=eap, eap, [status,]] auth\n   3)  Request/MHAuth-Mid:\
    \ (MN -> HAC)\n          eap, auth\n   4)  Response/MHAuth-Mid: (MN <- HAC)\n\
    \          eap, auth\n       MHAuth-Mid exchange is repeated as many times as\
    \ needed by the\n       used EAP-method.\n   5)  Request/MHAuth-Done: (MN -> HAC)\n\
    \          sa-scope, ciphersuite-list, eap, auth\n   6)  Response/MHAuth-Done:\
    \ (MN <- HAC)\n          [sa-scope, sa-data, ciphersuite, bootstrapping-data,]\
    \ eap,\n          status, auth\n   Where 'auth' for MN -> HAC direction is as\
    \ follows:\n      auth = HMAC-SHA256(shared-key, \"MN\" | msg-octets | CB-octets)\n\
    \   Where 'auth' for MN <- HAC direction is as follows:\n      auth = HMAC-SHA256(shared-key,\
    \ \"HAC\" | msg-octets | CB-octets)\n   In the above, \"MN\" is 2 ASCII characters\
    \ without null termination and\n   \"HAC\" is 3 ASCII characters without null\
    \ termination.\n   In MHAuth-Init and MHAuth-Mid messages, shared-key is set to\
    \ \"1\".  If\n   the EAP-method is key-deriving and creates a shared Master Session\n\
    \   Key (MSK) as a side effect of Authentication shared-key MUST be the\n   MSK\
    \ in all MHAuth-Done messages.  This MSK MUST NOT be used for any\n   other purpose.\
    \  In case the EAP method does not generate an MSK,\n   shared-key is set to \"\
    1\".\n   'msg-octets' includes all payload parameters of the respective\n   message\
    \ to be signed except the 'auth' payload.  CB-octets is the\n   channel binding\
    \ input to the AUTH calculation that is the \"TLS-\n   server-endpoint\" channel\
    \ binding type.  The content and algorithm\n   (only required for the \"TLS-server-endpoint\"\
    \ type) are the same as\n   described in [RFC5929].\n"
- title: 6.  Mobile Node to Home Agent Communication
  contents:
  - '6.  Mobile Node to Home Agent Communication

    '
- title: 6.1.  General
  contents:
  - "6.1.  General\n   The following subsections describe the packet formats used\
    \ for the\n   traffic between the MN and the HA.  This traffic includes binding\n\
    \   management messages (for example, BU and BA messages), reverse-\n   tunneled\
    \ and encrypted user data, and reverse-tunneled plaintext user\n   data.  This\
    \ specification defines a generic packet format, where\n   everything is encapsulated\
    \ inside UDP.  See Sections 6.3 and 6.4 for\n   detailed illustrations of the\
    \ corresponding packet formats.\n   The Mobile IPv6 service port number is where\
    \ the HA expects to\n   receive UDP packets.  The same port number is used for\
    \ both binding\n   management messages and user data packets.  The reason for\n\
    \   multiplexing data and control messages over the same port number is\n   due\
    \ to the possibility of Network Address and Port Translators\n   located along\
    \ the path between the MN and the HA.  The Mobile IPv6\n   service MAY use any\
    \ ephemeral port number as the UDP source port, and\n   it MUST use the Mobile\
    \ IPv6 service port number as the UDP\n   destination port.  The Mobile IPv6 service\
    \ port is dynamically\n   assigned to the MN during the bootstrapping phase (i.e.,\
    \ the mip6-\n   port parameter) or, in absence of the bootstrapping parameter,\
    \ the\n   IANA reserved port (mipv6tls) MUST be used.\n   The encapsulating UDP\
    \ header is immediately followed by a 4-bit\n   Packet Type (PType) field that\
    \ defines whether the packet contains an\n   encrypted mobility management message,\
    \ an encrypted user data packet,\n   or a plaintext user data packet.\n   The\
    \ Packet Type field is followed by a 28-bit SPI value, which\n   identifies the\
    \ correct SA concerning the encrypted packet.  For any\n   packet that is neither\
    \ integrity protected nor encrypted (i.e., no SA\n   is applied by the originator),\
    \ the SPI MUST be set to 0 (zero).\n   Mobility management messages MUST always\
    \ be at least integrity\n   protected.  Hence, mobility management messages MUST\
    \ NOT be sent with\n   an SPI value of 0 (zero).\n   There is always only one\
    \ SPI per MN-HA mobility session and the same\n   SPI is used for all types of\
    \ protected packets independent of the\n   direction.\n   The SPI value is followed\
    \ by a 32-bit Sequence Number value that is\n   used to identify retransmissions\
    \ of protected messages (integrity\n   protected or both integrity protected and\
    \ encrypted, see Figures 7\n   and 8) .  Each endpoint in the security association\
    \ maintains two\n   \"current\" Sequence Numbers: the next one to be used for\
    \ a packet it\n   initiates and the next one it expects to see in a packet from\
    \ the\n   other end.  If the MN and the HA ends initiate very different numbers\n\
    \   of messages, the Sequence Numbers in the two directions can be very\n   different.\
    \  In the case data protection is not used (see Figure 9),\n   the Sequence Number\
    \ MUST be set to 0 (zero).  Note that the HA SHOULD\n   initiate a re-establishment\
    \ of the SA before any of the Sequence\n   Number cycle.\n   Finally, the Sequence\
    \ Number field is followed by the data portion,\n   whose content is identified\
    \ by the Packet Type.  The data portion may\n   be protected.\n"
- title: 6.2.  PType and Security Parameter Index
  contents:
  - "6.2.  PType and Security Parameter Index\n   The PType is a 4-bit field that\
    \ indicates the Packet Type (PType) of\n   the UDP encapsulated packet.  The PType\
    \ is followed by a 28-bit SPI\n   value.  The PType and the SPI fields are treated\
    \ as one 32-bit field\n   during the integrity protection calculation.\n    0\
    \                   1                   2                   3\n    0 1 2 3 4 5\
    \ 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | PType |                        SPI                            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \            Figure 6: Security Parameter Index with Packet Type\n   A SPI value\
    \ of 0 (zero) indicates a plaintext packet.  If the packet\n   is integrity protected\
    \ or both integrity protected and encrypted, the\n   SPI value MUST be different\
    \ from 0.  When the SPI value is set to 0,\n   then the PType MUST also be 0.\n"
- title: 6.3.  Binding Management Message Formats
  contents:
  - "6.3.  Binding Management Message Formats\n   The binding management messages\
    \ that are only meant to be exchanged\n   between the MN and the HA MUST be integrity\
    \ protected and MAY be\n   encrypted.  They MUST use the packet format shown in\
    \ Figure 7.\n   All packets that are specific to the Mobile IPv6 protocol, contain\
    \ a\n   Mobility Header (as defined in Section 6.1.1. of RFC 6275) and are\n \
    \  used between the MN and the HA shall use the packet format shown in\n   Figure\
    \ 7.  (This means that some Mobile IPv6 mobility management\n   messages, such\
    \ as the Home Test Init (HoTI) message, are treated as\n   data packets and using\
    \ encapsulation described in Section 6.4 and\n   shown in Figures 8 and 9).\n\
    \ 0                   1                   2                   3\n 0 1 2 3 4 5\
    \ 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n"
- title: +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  contents:
  - '+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

    '
- title: '|                                                               |'
  contents:
  - '|                                                               |

    '
- title: ':         IPv4 or IPv6 header (src-addr=Xa, dst-addr=Ya)        :'
  contents:
  - ':         IPv4 or IPv6 header (src-addr=Xa, dst-addr=Ya)        :

    '
- title: '|                                                               |'
  contents:
  - '|                                                               |

    '
- title: +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  contents:
  - '+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

    '
- title: '|                                                               |'
  contents:
  - '|                                                               |

    '
- title: ':            UDP header (src-port=Xp,dst-port=Yp)               :'
  contents:
  - ':            UDP header (src-port=Xp,dst-port=Yp)               :

    '
- title: '|                                                               |'
  contents:
  - '|                                                               |

    '
- title: +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ ------
  contents:
  - '+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ ------

    '
- title: '|PType=8|                    SPI                                | ^Int.'
  contents:
  - '|PType=8|                    SPI                                | ^Int.

    '
- title: +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ |Cov-
  contents:
  - '+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ |Cov-

    '
- title: '|                      Sequence Number                          | |ered'
  contents:
  - '|                      Sequence Number                          | |ered

    '
- title: +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | ----
  contents:
  - '+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | ----

    '
- title: '|                    Payload Data  (variable)                   | |   ^'
  contents:
  - '|                    Payload Data  (variable)                   | |   ^

    '
- title: ':                                                               : |   |'
  contents:
  - ':                                                               : |   |

    '
- title: '|                                                               | |Conf.'
  contents:
  - '|                                                               | |Conf.

    '
- title: +               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ |Cov-
  contents:
  - '+               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ |Cov-

    '
- title: '|               |     Padding (0-255 bytes)                     | |ered'
  contents:
  - '|               |     Padding (0-255 bytes)                     | |ered

    '
- title: +-+-+-+-+-+-+-+-+               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ |   |
  contents:
  - '+-+-+-+-+-+-+-+-+               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ |   |

    '
- title: '|                               |  Pad Length   | Next Header   | v   v'
  contents:
  - '|                               |  Pad Length   | Next Header   | v   v

    '
- title: +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ ------
  contents:
  - '+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ ------

    '
- title: '|         Integrity Check Value-ICV   (variable)                |'
  contents:
  - '|         Integrity Check Value-ICV   (variable)                |

    '
- title: ':                                                               :'
  contents:
  - ':                                                               :

    '
- title: '|                                                               |'
  contents:
  - '|                                                               |

    '
- title: +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  contents:
  - "+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       Figure\
    \ 7: UDP-Encapsulated Binding Management Message Format\n   The PType value 8\
    \ (eight) identifies that the UDP-encapsulated packet\n   contains a Mobility\
    \ Header (defined by RFC 6275) and other relevant\n   IPv6 extension headers.\
    \  Note, there is no additional IP header\n   inside the encapsulated part.  The\
    \ Next Header field MUST be set to\n   value of the first encapsulated header.\
    \  The encapsulated headers\n   follow the natural IPv6 and Mobile IPv6 extension\
    \ header alignment\n   and formatting rules.\n   The Padding, Pad Length, Next\
    \ Header, and ICV fields follow the rules\n   of Section 2.4 to 2.8 of [RFC4303]\
    \ unless otherwise stated in this\n   document.  For an SPI value of 0 (zero)\
    \ that indicates an unprotected\n   packet, the Padding, Pad Length, Next Header,\
    \ and ICV fields MUST NOT\n   be present.\n   The source and destination IP addresses\
    \ of the outer IP header (i.e.,\n   the src-addr and the dst-addr in Figure 7)\
    \ use the current CoA of the\n   MN and the HA address.\n"
- title: 6.4.  Reverse-Tunneled User Data Packet Formats
  contents:
  - "6.4.  Reverse-Tunneled User Data Packet Formats\n   There are two types of reverse-tunneled\
    \ user data packets between the\n   MN and the HA: those that are integrity protected\
    \ and/or encrypted\n   and those that are sent in the clear.  The MN or the HA\
    \ decides\n   whether to apply integrity protection and/or encryption to a packet\n\
    \   or to send it in the clear based on the mip6-sas value in the SA.  If\n  \
    \ the mip6-sas is set to 1, the originator MUST NOT send any user data\n   packets\
    \ in the clear, and the receiver MUST silently discard any\n   packet with the\
    \ PType set to 0 (unprotected).  It is RECOMMENDED that\n   confidentiality and\
    \ integrity protection of user data traffic be\n   applied.  The reverse-tunneled\
    \ IPv4 or IPv6 user data packets are\n   encapsulated as is inside the 'Payload\
    \ Data' shown in Figures 8 and\n   9.\n 0                   1                \
    \   2                   3\n 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4\
    \ 5 6 7 8 9 0 1\n"
- title: +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  contents:
  - '+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

    '
- title: '|                                                               |'
  contents:
  - '|                                                               |

    '
- title: ':         IPv4 or IPv6 header (src-addr=Xa, dst-addr=Ya)        :'
  contents:
  - ':         IPv4 or IPv6 header (src-addr=Xa, dst-addr=Ya)        :

    '
- title: '|                                                               |'
  contents:
  - '|                                                               |

    '
- title: +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  contents:
  - '+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

    '
- title: '|                                                               |'
  contents:
  - '|                                                               |

    '
- title: ':            UDP header (src-port=Xp,dst-port=Yp)               :'
  contents:
  - ':            UDP header (src-port=Xp,dst-port=Yp)               :

    '
- title: '|                                                               |'
  contents:
  - '|                                                               |

    '
- title: +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  contents:
  - '+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

    '
- title: '|PType=1|                    SPI                                | ^Int.'
  contents:
  - '|PType=1|                    SPI                                | ^Int.

    '
- title: +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ |Cov-
  contents:
  - '+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ |Cov-

    '
- title: '|                      Sequence Number                          | |ered'
  contents:
  - '|                      Sequence Number                          | |ered

    '
- title: +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | ----
  contents:
  - '+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | ----

    '
- title: '|                    Payload Data  (variable)                   | |   ^'
  contents:
  - '|                    Payload Data  (variable)                   | |   ^

    '
- title: ':                                                               : |   |'
  contents:
  - ':                                                               : |   |

    '
- title: '|                                                               | |Conf.'
  contents:
  - '|                                                               | |Conf.

    '
- title: +               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ |Cov-
  contents:
  - '+               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ |Cov-

    '
- title: '|               |     Padding (0-255 bytes)                     | |ered'
  contents:
  - '|               |     Padding (0-255 bytes)                     | |ered

    '
- title: +-+-+-+-+-+-+-+-+               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ |   |
  contents:
  - '+-+-+-+-+-+-+-+-+               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ |   |

    '
- title: '|                               |  Pad Length   | Next Header   | v   v'
  contents:
  - '|                               |  Pad Length   | Next Header   | v   v

    '
- title: +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ ------
  contents:
  - '+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ ------

    '
- title: '|         Integrity Check Value-ICV   (variable)                |'
  contents:
  - '|         Integrity Check Value-ICV   (variable)                |

    '
- title: ':                                                               :'
  contents:
  - ':                                                               :

    '
- title: '|                                                               |'
  contents:
  - '|                                                               |

    '
- title: +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  contents:
  - "+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       Figure\
    \ 8: UDP-Encapsulated Protected User Data Packet Format\n   The PType value 1\
    \ (one) identifies that the UDP-encapsulated packet\n   contains an encrypted-tunneled\
    \ IPv4/IPv6 user data packet.  The Next\n   Header field header MUST be set to\
    \ value corresponding the tunneled\n   IP packet (e.g., 41 for IPv6).\n   The\
    \ Padding, Pad Length, Next Header, and ICV fields follow the rules\n   of Section\
    \ 2.4 to 2.8 of [RFC4303] unless otherwise stated in this\n   document.  For an\
    \ SPI value of 0 (zero) that indicates an unprotected\n   packet, the Padding,\
    \ Pad Length, Next Header, and ICV fields MUST NOT\n   be present.\n   The source\
    \ and destination IP addresses of the outer IP header (i.e.,\n   the src-addr\
    \ and the dst-addr in Figure 8) use the current CoA of the\n   MN and the HA address.\
    \  The ESP-protected inner IP header, which is\n   not shown in Figure 8, uses\
    \ the home address of the MN and the\n   correspondent node (CN) address.\n  \
    \  0                   1                   2                   3\n    0 1 2 3\
    \ 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   :  \
    \       IPv4 or IPv6 header (src-addr=Xa, dst-addr=Ya)        :\n   |        \
    \                                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   :  \
    \          UDP header (src-port=Xp,dst-port=Yp)               :\n   |        \
    \                                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |PType=0|                        0                              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                0                              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   :  \
    \         Payload Data (plain IPv4 or IPv6 Packet)            :\n   |        \
    \                                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     Figure 9: UDP-Encapsulated Non-Protected User Data Packet Format\n   The\
    \ PType value 0 (zero) identifies that the UDP-encapsulated packet\n   contains\
    \ a plaintext-tunneled IPv4/IPv6 user data packet.  Also, the\n   SPI and the\
    \ Sequence Number fields MUST be set to 0 (zero).\n   The source and destination\
    \ IP addresses of the outer IP header (i.e.,\n   the src-addr and the dst-addr\
    \ in Figure 9) use the current CoA of the\n   MN and the HA address.  The plaintext\
    \ inner IP header uses the home\n   address of the MN and the CN address.\n"
- title: 7.  Route Optimization
  contents:
  - "7.  Route Optimization\n   Mobile IPv6 route optimization as described in [RFC6275]\
    \ is not\n   affected by this specification.  Route optimization is possible only\n\
    \   between an IPv6 MN and CN.  UDP encapsulation of signaling and data\n   traffic\
    \ is only between the MN and HA.  The return routability\n   signaling messages\
    \ such as HoTI/HoT and CoTI/CoT [RFC6275] are\n   treated as data packets and\
    \ encapsulation, when needed, is per the\n   description in Section 6.4 of this\
    \ specification.  The data packets\n   between an MN and CN that have successfully\
    \ completed the return\n   routability test and created the appropriate entries\
    \ in their binding\n   cache are not UDP encapsulated using the packet formats\
    \ defined in\n   this specification but follow the [RFC6275] specification.\n"
- title: 8.  IANA Considerations
  contents:
  - '8.  IANA Considerations

    '
- title: '8.1.  New Registry: Packet Type'
  contents:
  - "8.1.  New Registry: Packet Type\n   IANA has created a new registry under the\
    \ [RFC6275] Mobile IPv6\n   parameters registry for the Packet Type as described\
    \ in Section 6.1.\n   Description                       | Value\n   ----------------------------------+----------------------------------\n\
    \   non-encrypted IP packet           | 0\n   encrypted IP packet            \
    \   | 1\n   mobility header                   | 8\n   Following the allocation\
    \ policies from [RFC5226], new values for the\n   Packet Type AVP MUST be assigned\
    \ based on the \"RFC Required\" policy.\n"
- title: 8.2.  Status Codes
  contents:
  - "8.2.  Status Codes\n   A new Status Code (to be used in BA messages) is reserved\
    \ for the\n   cases where the HA wants to indicate to the MN that it needs to\n\
    \   re-establish the SA information with the HAC.  The following value is\n  \
    \ reserved in the [RFC6275] Status Codes registry:\n       REINIT_SA_WITH_HAC\
    \       176\n"
- title: 8.3.  Port Numbers
  contents:
  - "8.3.  Port Numbers\n   A new port number (mipv6tls) for UDP packets is reserved\
    \ from the\n   existing PORT NUMBERS registry.\n       mipv6tls 7872\n"
- title: 9.  Security Considerations
  contents:
  - "9.  Security Considerations\n   This document describes and uses a number of\
    \ building blocks that\n   introduce security mechanisms and need to interwork\
    \ in a secure\n   manner.\n   The following building blocks are considered from\
    \ a security point of\n   view:\n   1.  Discovery of the HAC\n   2.  Authentication\
    \ and MN-HA SA establishment executed between the MN\n       and the HAC (PSK-\
    \ or EAP-based) through a TLS tunnel\n   3.  Protection of MN-HA communication\n\
    \   4.  AAA interworking\n"
- title: 9.1.  Discovery of the HAC
  contents:
  - "9.1.  Discovery of the HAC\n   No dynamic procedure for discovering the HAC by\
    \ the MN is described\n   in this document.  As such, no specific security considerations\
    \ apply\n   to the scope of this document.\n"
- title: 9.2.  Authentication and Key Exchange Executed between the MN and the
  contents:
  - "9.2.  Authentication and Key Exchange Executed between the MN and the\n     \
    \ HAC\n   This document describes a simple authentication and MN-HA SA\n   negotiation\
    \ exchange over TLS.  The TLS procedures remain unchanged;\n   however, channel\
    \ binding is provided.\n   Authentication:  Server-side certificate-based authentication\
    \ MUST be\n      performed using TLS version 1.2 [RFC5246].  The MN MUST verify\
    \ the\n      HAC's TLS server certificate, using either the subjectAltName\n \
    \     extension [RFC5280] dNSName identities as described in [RFC6125]\n     \
    \ or subjectAltName iPAddress identities.  In case of iPAddress\n      identities,\
    \ the MN MUST check the IP address of the TLS connection\n      against these\
    \ iPAddress identities and SHOULD reject the\n      connection if none of the\
    \ iPAddress identities match the\n      connection.  In case of dNSName identities,\
    \ the rules and\n      guidelines defined in [RFC6125] apply here, with the following\n\
    \      considerations:\n      *  Support for DNS-ID identifier type (the dNSName\
    \ identity in the\n         subjectAltName extension) is REQUIRED in the HAC and\
    \ the MN TLS\n         implementations.\n      *  DNS names in the HAC server\
    \ certificates MUST NOT contain the\n         wildcard character \"*\".\n    \
    \  *  The CN-ID MUST NOT be used for authentication within the rules\n       \
    \  described in [RFC6125].\n      *  The MN MUST set its \"reference identifier\"\
    \ to the DNS name of\n         the HAC.\n      The client-side authentication\
    \ may depend on the specific\n      deployment and is therefore not mandated.\
    \  Note that TLS-PSK\n      [RFC4279] cannot be used in conjunction with the methods\
    \ described\n      in Sections 5.8 and 5.9 of this document due to the limitations\
    \ of\n      the channel binding type used.\n      Through the protected TLS tunnel,\
    \ an additional authentication\n      exchange is performed that provides client-side\
    \ or mutual\n      authentication and exchanges SA parameters and optional\n \
    \     configuration data to be used in the subsequent protection of\n      MN-HA\
    \ communication.  The additional authentication exchange can\n      be either\
    \ PSK-based (Section 5.8) or EAP-based (Section 5.9).\n      Both exchanges are\
    \ always performed within the protected TLS\n      tunnel and MUST NOT be used\
    \ as standalone protocols.\n      The simple PSK-based authentication exchange\
    \ provides mutual\n      authentication and follows the GPSK exchange used by\
    \ EAP-GPSK\n      [RFC5433] and has similar properties, although some features\
    \ of\n      GPSK like the exchange of a protected container are not supported.\n\
    \      The EAP-based authentication exchange simply defines message\n      containers\
    \ to allow carrying the EAP packets between the MN and\n      the HAC.  In principle,\
    \ any EAP method can be used.  However, it\n      is strongly recommended to use\
    \ only EAP methods that provide\n      mutual authentication and that derive keys\
    \ including an MSK in\n      compliance with [RFC3748].\n      Both exchanges\
    \ use channel binding with the TLS tunnel.  The\n      channel binding type 'TLS-server-endpoint'\
    \ per [RFC5929] MUST be\n      used.\n   Dictionary Attacks:  All messages of\
    \ the authentication exchanges\n      specified in this document are protected\
    \ by TLS.  However, any\n      implementation SHOULD assume that the properties\
    \ of the\n      authentication exchange are the same as for GPSK [RFC5433], in\n\
    \      case the PSK-based method per Section 5.8 is used, and are the\n      same\
    \ as those of the underlying EAP method, in case the EAP-based\n      exchange\
    \ per Section 5.9 is used.\n   Replay Protection:  The underlying TLS protection\
    \ provides protection\n      against replays.\n   Key Derivation and Key Strength:\
    \  For TLS, the TLS-specific\n      considerations apply unchanged.  For the authentication\
    \ exchanges\n      defined in this document, no key derivation step is performed\
    \ as\n      the MN-HA keys are generated by the HAC and are distributed to the\n\
    \      MN through the secure TLS connection.\n   Key Control:  No joint key control\
    \ for MN-HA keys is provided by this\n      version of the specification.\n  \
    \ Lifetime:  The TLS-protected authentication exchange between the MN\n      and\
    \ the HAC is only to bootstrap keys and other parameters for\n      usage with\
    \ MN-HA security.  The SAs that contain the keys have an\n      associated lifetime.\
    \  The usage of Transport Layer Security (TLS)\n      Session Resumption without\
    \ Server-Side State, described in\n      [RFC5077], provides the ability for the\
    \ MN to minimize the latency\n      of future exchanges towards the HA without\
    \ having to keep state at\n      the HA itself.\n   Denial-of-Service (DoS) Resistance:\
    \  The level of resistance against\n      DoS attacks SHOULD be considered the\
    \ same as for common TLS\n      operation, as TLS is used unchanged.  For the\
    \ PSK-based\n      authentication exchange, no additional factors are known. \
    \ For the\n      EAP-based authentication exchange, any considerations regarding\n\
    \      DoS resistance specific to the chosen EAP method are expected to\n    \
    \  be applicable and need to be taken into account.\n   Session Independence:\
    \  Each individual TLS protocol run is\n      independent from any previous exchange\
    \ based on the security\n      properties of the TLS handshake protocol.  However,\
    \ several PSK-\n      or EAP-based authentication exchanges can be performed across\
    \ the\n      same TLS connection.\n   Fragmentation:  TLS runs on top of TCP and\
    \ no fragmentation-specific\n      considerations apply to the MN-HAC authentication\
    \ exchanges.\n   Channel Binding:  Both the PSK and the EAP-based exchanges use\n\
    \      channel binding with the TLS tunnel.  The channel binding type\n      'TLS-server-endpoint'\
    \ per [RFC5929] MUST be used.\n   Fast Reconnect:  This protocol provides session\
    \ resumption as part of\n      TLS and optionally the support for [RFC5077]. \
    \ No fast reconnect\n      is supported for the PSK-based authentication exchange.\
    \  For the\n      EAP-based authentication exchange, availability of fast reconnect\n\
    \      depends on the EAP method used.\n   Identity Protection:  Based on the\
    \ security properties of the TLS\n      tunnel, passive user identity protection\
    \ is provided.  An attacker\n      acting as man-in-the-middle in the TLS connection\
    \ would be able to\n      observe the MN identity value sent in MHAuth-Init messages.\n\
    \   Protected Ciphersuite Negotiation:  This protocol provides\n      ciphersuite\
    \ negotiation based on TLS.\n   Confidentiality:  Confidentiality protection of\
    \ payloads exchanged\n      between the MN and the HAC are protected with the\
    \ TLS Record\n      Layer.  TLS ciphersuites with confidentiality and integrity\n\
    \      protection MUST be negotiated and used in order to exchange\n      security\
    \ sensitive material inside the TLS connection.\n   Cryptographic Binding:  No\
    \ cryptographic bindings are provided by\n      this protocol specified in this\
    \ document.\n   Perfect Forward Secrecy:  Perfect forward secrecy is provided\
    \ with\n      appropriate TLS ciphersuites.\n   Key confirmation:  Key confirmation\
    \ of the keys established with TLS\n      is provided by the TLS Record Layer\
    \ when the keys are used to\n      protect the subsequent TLS exchange.\n"
- title: 9.3.  Protection of MN and HA Communication
  contents:
  - "9.3.  Protection of MN and HA Communication\n   Authentication:  Data origin\
    \ authentication is provided for the\n      communication between the MN and the\
    \ HA.  The chosen level of\n      security of this authentication depends on the\
    \ selected\n      ciphersuite.  Entity authentication is offered by the MN to\
    \ HAC\n      protocol exchange.\n   Dictionary Attacks:  The concept of dictionary\
    \ attacks is not\n      applicable to the MN-HA communication as the keying material\
    \ used\n      for this communication is randomly created by the HAC and its\n\
    \      length depends on the chosen cryptographic algorithms.\n   Replay Protection:\
    \  Replay protection for the communication between\n      the MN and the HA is\
    \ provided based on sequence numbers and\n      follows the design of IPsec ESP.\n\
    \   Key Derivation and Key Strength:  The strength of the keying material\n  \
    \    established for the communication between the MN and the HA is\n      selected\
    \ based on the negotiated ciphersuite (based on the MN-HAC\n      exchange) and\
    \ the key created by the HAC.  The randomness\n      requirements for security\
    \ described in [RFC4086] are applicable to\n      the key generation by the HAC.\n\
    \   Key Control:  The keying material established during the MN-HAC\n      protocol\
    \ exchange for subsequent protection of the MN-HA\n      communication is created\
    \ by the HA and therefore no joint key\n      control is provided for it.\n  \
    \ Key Naming:  For the MN-HA communication, the security associations\n      are\
    \ indexed with the help of the SPI and additionally based on the\n      direction\
    \ (inbound communication or outbound communication).\n   Lifetime:  The lifetime\
    \ of the MN-HA security associations is based\n      on the value in the mip6-sa-validity-end\
    \ header field exchanged\n      during the MN-HAC exchange.  The HAC controls\
    \ the SA lifetime.\n   DoS Resistance:  For the communication between the MN and\
    \ the HA,\n      there are no heavy cryptographic operations (such as public key\n\
    \      computations).  As such, there are no DoS concerns.\n   Session Independence:\
    \  Sessions are independent from each other when\n      new keys are created via\
    \ the MN-HAC protocol.  A new MN-HAC\n      protocol run produces fresh and unique\
    \ keying material for\n      protection of the MN-HA communication.\n   Fragmentation:\
    \  There is no additional fragmentation support provided\n      beyond what is\
    \ offered by the network layer.\n   Channel Binding:  Channel binding is not applicable\
    \ to the MN-HA\n      communication.\n   Fast Reconnect:  The concept of fast\
    \ reconnect is not applicable to\n      the MN-HA communication.\n   Identity\
    \ Protection:  User identities SHOULD NOT be exchanged between\n      the MN and\
    \ the HA.  In the case where binding management messages\n      contain the user\
    \ identity, the messages SHOULD be confidentiality\n      protected.\n   Protected\
    \ Ciphersuite Negotiation:  The MN-HAC protocol provides\n      protected ciphersuite\
    \ negotiation through a secure TLS connection.\n   Confidentiality:  Confidentiality\
    \ protection of payloads exchanged\n      between the MN and the HAC (for Mobile\
    \ IPv6 signaling and\n      optionally for the data traffic) is provided utilizing\
    \ algorithms\n      negotiated during the MN-HAC exchange.\n   Cryptographic Binding:\
    \  No cryptographic bindings are provided by\n      this protocol specified in\
    \ this document.\n   Perfect Forward Secrecy:  Perfect forward secrecy is provided\
    \ when\n      the MN bootstraps new keying material with the help of the MN-HAC\n\
    \      protocol (assuming that a proper TLS ciphersuite is used).\n   Key Confirmation:\
    \  Key confirmation of the MN-HA keying material\n      conveyed from the HAC\
    \ to the MN is provided when the first packets\n      are exchanged between the\
    \ MN and the HA (in both directions as two\n      different keys are used).\n"
- title: 9.4.  AAA Interworking
  contents:
  - "9.4.  AAA Interworking\n   The AAA backend infrastructure interworking is not\
    \ defined in this\n   document and is therefore out of scope.\n"
- title: 10.  Acknowledgements
  contents:
  - "10.  Acknowledgements\n   The authors would like to thank Pasi Eronen, Domagoj\
    \ Premec, Julien\n   Laganier, Jari Arkko, Stephen Farrell, Peter Saint-Andre\
    \ and\n   Christian Bauer for their comments.\n"
- title: 11.  References
  contents:
  - '11.  References

    '
- title: 11.1.  Normative References
  contents:
  - "11.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [RFC2404]  Madson, C. and R. Glenn, \"The Use of HMAC-SHA-1-96 within\n\
    \              ESP and AH\", RFC 2404, November 1998.\n   [RFC2410]  Glenn, R.\
    \ and S. Kent, \"The NULL Encryption Algorithm and\n              Its Use With\
    \ IPsec\", RFC 2410, November 1998.\n   [RFC2451]  Pereira, R. and R. Adams, \"\
    The ESP CBC-Mode Cipher\n              Algorithms\", RFC 2451, November 1998.\n\
    \   [RFC2616]  Fielding, R., Gettys, J., Mogul, J., Frystyk, H.,\n           \
    \   Masinter, L., Leach, P., and T. Berners-Lee, \"Hypertext\n              Transfer\
    \ Protocol -- HTTP/1.1\", RFC 2616, June 1999.\n   [RFC3566]  Frankel, S. and\
    \ H. Herbert, \"The AES-XCBC-MAC-96 Algorithm\n              and Its Use With\
    \ IPsec\", RFC 3566, September 2003.\n   [RFC3602]  Frankel, S., Glenn, R., and\
    \ S. Kelly, \"The AES-CBC Cipher\n              Algorithm and Its Use with IPsec\"\
    , RFC 3602,\n              September 2003.\n   [RFC4282]  Aboba, B., Beadles,\
    \ M., Arkko, J., and P. Eronen, \"The\n              Network Access Identifier\"\
    , RFC 4282, December 2005.\n   [RFC5056]  Williams, N., \"On the Use of Channel\
    \ Bindings to Secure\n              Channels\", RFC 5056, November 2007.\n   [RFC5226]\
    \  Narten, T. and H. Alvestrand, \"Guidelines for Writing an\n              IANA\
    \ Considerations Section in RFCs\", BCP 26, RFC 5226,\n              May 2008.\n\
    \   [RFC5246]  Dierks, T. and E. Rescorla, \"The Transport Layer Security\n  \
    \            (TLS) Protocol Version 1.2\", RFC 5246, August 2008.\n   [RFC5280]\
    \  Cooper, D., Santesson, S., Farrell, S., Boeyen, S.,\n              Housley,\
    \ R., and W. Polk, \"Internet X.509 Public Key\n              Infrastructure Certificate\
    \ and Certificate Revocation List\n              (CRL) Profile\", RFC 5280, May\
    \ 2008.\n   [RFC5929]  Altman, J., Williams, N., and L. Zhu, \"Channel Bindings\n\
    \              for TLS\", RFC 5929, July 2010.\n   [RFC6275]  Perkins, C., Johnson,\
    \ D., and J. Arkko, \"Mobility Support\n              in IPv6\", RFC 6275, July\
    \ 2011.\n"
- title: 11.2.  Informative References
  contents:
  - "11.2.  Informative References\n   [RFC0768]  Postel, J., \"User Datagram Protocol\"\
    , STD 6, RFC 768,\n              August 1980.\n   [RFC3748]  Aboba, B., Blunk,\
    \ L., Vollbrecht, J., Carlson, J., and H.\n              Levkowetz, \"Extensible\
    \ Authentication Protocol (EAP)\",\n              RFC 3748, June 2004.\n   [RFC3776]\
    \  Arkko, J., Devarapalli, V., and F. Dupont, \"Using IPsec to\n             \
    \ Protect Mobile IPv6 Signaling Between Mobile Nodes and\n              Home Agents\"\
    , RFC 3776, June 2004.\n   [RFC4086]  Eastlake, D., Schiller, J., and S. Crocker,\
    \ \"Randomness\n              Requirements for Security\", BCP 106, RFC 4086,\
    \ June 2005.\n   [RFC4279]  Eronen, P. and H. Tschofenig, \"Pre-Shared Key Ciphersuites\n\
    \              for Transport Layer Security (TLS)\", RFC 4279,\n             \
    \ December 2005.\n   [RFC4301]  Kent, S. and K. Seo, \"Security Architecture for\
    \ the\n              Internet Protocol\", RFC 4301, December 2005.\n   [RFC4303]\
    \  Kent, S., \"IP Encapsulating Security Payload (ESP)\",\n              RFC 4303,\
    \ December 2005.\n   [RFC4877]  Devarapalli, V. and F. Dupont, \"Mobile IPv6 Operation\
    \ with\n              IKEv2 and the Revised IPsec Architecture\", RFC 4877,\n\
    \              April 2007.\n   [RFC5077]  Salowey, J., Zhou, H., Eronen, P., and\
    \ H. Tschofenig,\n              \"Transport Layer Security (TLS) Session Resumption\
    \ without\n              Server-Side State\", RFC 5077, January 2008.\n   [RFC5433]\
    \  Clancy, T. and H. Tschofenig, \"Extensible Authentication\n              Protocol\
    \ - Generalized Pre-Shared Key (EAP-GPSK) Method\",\n              RFC 5433, February\
    \ 2009.\n   [RFC5555]  Soliman, H., \"Mobile IPv6 Support for Dual Stack Hosts\
    \ and\n              Routers\", RFC 5555, June 2009.\n   [RFC5944]  Perkins, C.,\
    \ \"IP Mobility Support for IPv4, Revised\",\n              RFC 5944, November\
    \ 2010.\n   [RFC5996]  Kaufman, C., Hoffman, P., Nir, Y., and P. Eronen,\n   \
    \           \"Internet Key Exchange Protocol Version 2 (IKEv2)\",\n          \
    \    RFC 5996, September 2010.\n   [RFC6125]  Saint-Andre, P. and J. Hodges, \"\
    Representation and\n              Verification of Domain-Based Application Service\
    \ Identity\n              within Internet Public Key Infrastructure Using X.509\n\
    \              (PKIX) Certificates in the Context of Transport Layer\n       \
    \       Security (TLS)\", RFC 6125, March 2011.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Jouni Korhonen (editor)\n   Nokia Siemens Networks\n \
    \  Linnoitustie 6\n   Espoo  FIN-02600\n   Finland\n   EMail: jouni.nospam@gmail.com\n\
    \   Basavaraj Patil\n   Nokia\n   6021 Connection Drive\n   Irving, TX  75039\n\
    \   USA\n   EMail: basavaraj.patil@nokia.com\n   Hannes Tschofenig\n   Nokia Siemens\
    \ Networks\n   Linnoitustie 6\n   Espoo  02600\n   Finland\n   Phone: +358 (50)\
    \ 4871445\n   EMail: Hannes.Tschofenig@gmx.net\n   Dirk Kroeselberg\n   Siemens\n\
    \   Otto-Hahn-Ring 6\n   Munich  81739\n   Germany\n   EMail: dirk.kroeselberg@siemens.com\n"
