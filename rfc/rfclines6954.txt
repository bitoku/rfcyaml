Abstract This document specifies use of the Elliptic Curve Cryptography (ECC)
Brainpool elliptic curve groups for key exchange in the Internet Key Exchange Protocol version 2 (IKEv2).
Introduction [RFC5639] specified a new set of elliptic curve groups over finite prime fields for use in cryptographic applications.
These groups, denoted as ECC Brainpool curves, were generated in a verifiably pseudo random way and comply with the security requirements of relevant standards from ISO [ISO1] [ISO2], ANSI [ANSI1], NIST [FIPS], and the Standards for Efficient Cryptography Group [SEC2].
While the ASN.1 object identifiers defined in RFC 5639 allow usage of the ECC Brainpool curves in certificates and certificate revocation lists, their utilization for key exchange in IKEv2 [RFC5996] requires the definition and assignment of additional Diffie Hellman Group Transform IDs in the respective IANA registry.
This document specifies transform IDs for four curves from RFC 5639, as well as the encoding of the key exchange payload and derivation of the shared secret when using one of these curves.
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in [RFC2119].
Key Exchange Using the ECC Brainpool Curves 2.1.
Diffie Hellman Group Transform IDs
In order to use the ECC Brainpool curves for key exchange within IKEv2, the Diffie Hellman Group Transform IDs (Transform Type 4) listed in the following table have been registered with IANA [IANA IKE2].
The parameters associated with these curves are defined in RFC 5639 [RFC5639].
Using the Twisted Brainpool Curves
In [RFC5639], for each random curve, a "twisted curve" (defined by a quadratic twist; see [HMV]) is defined that offers the same level of security but potentially allows more efficient arithmetic due to the curve parameter A    3.
The transform IDs listed in Table 1 also allow using the twisted curve corresponding to the specified random curve: points (x,y) of any of the listed curves can be efficiently transformed to the corresponding point (x',y') on the twisted curve of the same bit length   and vice versa   by setting (x',y')
(x Z^2, y Z^3) with the coefficient Z specified for that curve [RFC5639].
Key Exchange Payload and Shared Secret
For the encoding of the key exchange payload and the derivation of the shared secret, the methods specified in [RFC5903] are adopted.
In an Elliptic Curve Group over GF[P] (ECP) key exchange in IKEv2, the Diffie Hellman public value passed in a key establishment (KE) payload consists of two components, x and y, corresponding to the coordinates of an elliptic curve point.
Each component MUST be computed from the corresponding coordinate using the FieldElement to  OctetString conversion method specified in [SEC1] and MUST have a bit length as indicated in Table 2.
This length is enforced by the FieldElement to OctetString conversion method, if necessary, by prepending the value with zeros.
The FieldElement to OctetString conversion method specified in [SEC1] is equivalent to applying the conversion between integers and octet strings (as described in Section 6 of [RFC6090])
after representing the field element as an integer in the interval [0, p 1].
From these components, the key exchange payload MUST be computed as the concatenation of the x  and y coordinates.
Hence, the key exchange payload has the bit length indicated in Table 2.
The Diffie Hellman shared secret value consists only of the x value.
In particular, the shared secret value MUST be computed from the x coordinate of the Diffie Hellman common value using the FieldElement to OctetString conversion method specified in [SEC1] and MUST have bit length as indicated in Table 2.
The security considerations of [RFC5996] apply accordingly.
In order to thwart certain active attacks, the validity of the other peer's public Diffie Hellman value (x,y) recovered from the received key exchange payload needs to be verified.
In particular, it MUST be verified that the x  and y coordinates of the public value satisfy the curve equation.
For additional information, we refer the reader to [RFC6989].
The confidentiality, authenticity, and integrity of a secure communication based on IKEv2 are limited by the weakest cryptographic primitive applied.
In order to achieve a maximum security level when using one of the elliptic curves from Table 1 for key exchange, the following should be chosen according to the recommendations of [NIST800 57] and [RFC5639]:  key derivation function  algorithms and key lengths of symmetric encryption and message authentication  algorithm, bit length, and hash function used for signature generation
Furthermore, the private Diffie Hellman keys should be selected with the same bit length as the order of the group generated by the base point G and with approximately maximum entropy.
Implementations of elliptic curve cryptography for IKEv2 could be susceptible to side channel attacks.
Particular care should be taken for implementations that internally use the corresponding twisted curve to take advantage of an efficient arithmetic for the special parameters (A    3): although the twisted curve itself offers the same level of security as the corresponding random curve (through mathematical equivalence), an arithmetic based on small curve parameters could be harder to protect against side channel attacks.
General guidance on resistance of elliptic curve cryptography implementations against side channel attacks is given in [BSI1] and [HMV].
IANA Considerations IANA has updated its "Transform Type 4 Diffie Hellman Group Transform IDs" registry in [IANA IKE2] to include the groups listed in Table 1.
This section provides some test vectors, for example, Diffie Hellman key exchanges using each of the curves defined in Section 2.
The following notation is used in the subsequent subsections:
A: the secret key of party A x qA: the x coordinate of the public key of party A y qA:
the y coordinate of the public key of party
A d B: the secret key of party B x qB: the x coordinate of the public key of party B y qB:
the y coordinate of the public key of party B x Z: the x coordinate of the shared secret that results from completion of the Diffie Hellman computation y Z:
the y coordinate of the shared secret that results from completion of the Diffie Hellman computation
The field elements x qA, y qA
, x qB, y qB,
x Z, and y Z are represented as hexadecimal values using the FieldElement to  OctetString conversion method specified in [SEC1].
224 Bit Curve Curve brainpoolP224r1 dA
256 Bit Curve Curve brainpoolP256r1 dA
384 Bit Curve Curve brainpoolP384r1 dA
512 Bit Curve Curve brainpoolP512r1 dA
