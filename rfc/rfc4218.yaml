- title: __initial_text__
  contents:
  - '             Threats Relating to IPv6 Multihoming Solutions

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2005).\n"
- title: Abstract
  contents:
  - "Abstract\n   This document lists security threats related to IPv6 multihoming.\n\
    \   Multihoming can introduce new opportunities to redirect packets to\n   different,\
    \ unintended IP addresses.\n   The intent is to look at how IPv6 multihoming solutions\
    \ might make\n   the Internet less secure; we examine threats that are inherent\
    \ to all\n   IPv6 multihoming solutions rather than study any specific proposed\n\
    \   solution.  The threats in this document build upon the threats\n   discovered\
    \ and discussed as part of the Mobile IPv6 work.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n      1.2. Authentication, Authorization, and Identifier Ownership\
    \ ....4\n      4.2. Cause Packets to Be Sent to a Black Hole ..................15\n\
    \      4.3. Third Party Denial-of-Service Attacks .....................16\n  \
    \         4.3.1. Basic Third Party DoS ..............................17\n    \
    \       4.3.2. Third Party DoS with On-Path Help ..................18\n      4.4.\
    \ Accepting Packets from Unknown Locators ...................19\n      4.5. New\
    \ Privacy Considerations ................................20\n   5. Granularity\
    \ of Redirection .....................................20\n   6. Movement Implications?\
    \ .........................................22\n   7. Other Security Concerns ........................................23\n\
    \   8. Security Considerations ........................................24\n  \
    \ 9. Acknowledgements ...............................................24\n   10.\
    \ Informative References ........................................25\n   Appendix\
    \ A: Some Security Analysis ................................27\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The goal of the IPv6 multihoming work is to allow a site\
    \ to take\n   advantage of multiple attachments to the global Internet, without\n\
    \   having a specific entry for the site visible in the global routing\n   table.\
    \  Specifically, a solution should allow hosts to use multiple\n   attachments\
    \ in parallel, or to switch between these attachment points\n   dynamically in\
    \ the case of failures, without an impact on the\n   transport and application\
    \ layer protocols.\n   At the highest level, the concerns about allowing such\
    \ \"rehoming\" of\n   packet flows can be called \"redirection attacks\"; the\
    \ ability to\n   cause packets to be sent to a place that isn't tied to the transport\n\
    \   and/or application layer protocol's notion of the peer.  These\n   attacks\
    \ pose threats against confidentiality, integrity, and\n   availability.  That\
    \ is, an attacker might learn the contents of a\n   particular flow by redirecting\
    \ it to a location where the attacker\n   has a packet recorder.  If, instead\
    \ of a recorder, the attacker\n   changes the packets and then forwards them to\
    \ the ultimate\n   destination, the integrity of the data stream would be compromised.\n\
    \   Finally, the attacker can simply use the redirection of a flow as a\n   denial\
    \ of service attack.\n   This document has been developed while considering multihoming\n\
    \   solutions architected around a separation of network identity and\n   network\
    \ location, whether or not this separation implies the\n   introduction of a new\
    \ and separate identifier name space.  However,\n   this separation is not a requirement\
    \ for all threats, so this\n   taxonomy may also apply to other approaches.  This\
    \ document is not\n   intended to examine any single proposed solution.  Rather,\
    \ it is\n   intended as an aid to discussion and evaluation of proposed\n   solutions.\
    \  By cataloging known threats, we can help to ensure that\n   all proposals deal\
    \ with all of the available threats.\n   As a result of not analyzing a particular\
    \ solution, this document is\n   inherently incomplete.  An actual solution would\
    \ need to be analyzed\n   as part of its own threat analysis, especially in the\
    \ following\n   areas:\n    1) If the solution makes the split between locators\
    \ and identifiers,\n       then most application security mechanisms should be\
    \ tied to the\n       identifier, not to the locator.  Therefore, work would be\
    \ needed\n       to understand how attacks on the identifier mechanism affect\n\
    \       security, especially attacks on the mechanism that would bind\n      \
    \ locators to identifiers.\n    2) How does the solution apply multihoming to\
    \ IP multicast?\n       Depending on how this is done, there might be specific\
    \ threats\n       relating to multicast that need to be understood.  This document\n\
    \       does not discuss any multicast-specific threats.\n    3) Connection-less\
    \ transport protocols probably need more attention.\n       They are already difficult\
    \ to secure, even without a\n       locator/identifier split.\n"
- title: 1.1.  Assumptions
  contents:
  - "1.1.  Assumptions\n   This threat analysis doesn't assume that security has been\
    \ applied to\n   other security relevant parts of the Internet, such as DNS and\n\
    \   routing protocols; but it does assume that, at some point in time, at\n  \
    \ least parts of the Internet will be operating with security for such\n   key\
    \ infrastructure.  With that assumption, it then becomes important\n   that a\
    \ multihoming solution would not, at that point in time, become\n   the weakest\
    \ link.  This is the case even if, for instance, insecure\n   DNS might be the\
    \ weakest link today.\n   This document doesn't assume that the application protocols\
    \ are\n   protected by strong security today or in the future.  However, it is\n\
    \   still useful to assume that the application protocols that care about\n  \
    \ integrity and/or confidentiality apply the relevant end-to-end\n   security\
    \ measures, such as IPsec, TLS, and/or application layer\n   security.\n   For\
    \ simplicity, this document assumes that an on-path attacker can\n   see packets,\
    \ modify packets and send them out, and block packets from\n   being delivered.\
    \  This is a simplification because there might exist\n   ways (for instance,\
    \ monitoring capability in switches) that allow\n   authenticated and authorized\
    \ users to observe packets without being\n   able to send or block the packets.\n\
    \   In some cases it might make sense to make a distinction between\n   on-path\
    \ attackers, which can monitor packets and perhaps also inject\n   packets, without\
    \ being able to block packets from passing through.\n   On-path attackers that\
    \ only need to monitor might be lucky and find a\n   non-switched Ethernet in\
    \ the path, or use capacitive or inductive\n   coupling to listen on a copper\
    \ wire.  But if the attacker is on an\n   Ethernet that is on the path, whether\
    \ switched or not, the attacker\n   can also employ Address Resolution Protocol/Neighbor\
    \ Discovery\n   (ARP/ND) spoofing to get access to the packet flow which allows\n\
    \   blocking as well.  Similarly, if the attacker has access to the wire,\n  \
    \ the attacker can also place a device on the wire to block.  Other\n   on-path\
    \ attacks would be those that gain control of a router or a\n   switch (or gain\
    \ control of one of the endpoints), and most likely\n   those would allow blocking\
    \ as well.\n   So the strongest currently known case where monitoring is easier\
    \ than\n   blocking, is when switches and routers have monitoring capabilities\n\
    \   (for network management or for lawful intercept) where an attacker\n   might\
    \ be able to bypass the authentication and authorization checks\n   for those\
    \ capabilities.  However, this document makes the simplifying\n   assumption treat\
    \ all on-path attackers the same by assuming that such\n   an attacker can monitor,\
    \ inject, and block packets.  A security\n   analysis of a particular proposal\
    \ can benefit from not making this\n   assumption, and look at how on-path attackers\
    \ with different\n   capabilities can generate different attacks perhaps not present\
    \ in\n   today's Internet.\n   The document assumes that an off-path attacker\
    \ can neither see\n   packets between the peers (for which it is not on the path)\
    \ nor block\n   them from being delivered.  Off-path attackers can, in general,\
    \ send\n   packets with arbitrary IP source addresses and content, but such\n\
    \   packets might be blocked if ingress filtering [INGRESS] is applied.\n   Thus,\
    \ it is important to look at the multihoming impact on security\n   both in the\
    \ presence and absence of ingress filtering.\n"
- title: 1.2.  Authentication, Authorization, and Identifier Ownership
  contents:
  - "1.2.  Authentication, Authorization, and Identifier Ownership\n   The overall\
    \ problem domain can be described using different\n   terminology.\n   One way\
    \ to describe it is that it is necessary to first authenticate\n   the peer and\
    \ then verify that the peer is authorized to control the\n   locators used for\
    \ a particular identifier.  While this is correct, it\n   might place too much\
    \ emphasis on the authorization aspect.  In this\n   case, the authorization is\
    \ conceptually very simple; each host (each\n   identifier) is authorized to control\
    \ which locators are used for\n   itself.\n   Hence, there is a different way\
    \ to describe the same thing.  If the\n   peer can somehow prove that it is the\
    \ owner of the identifier, and\n   the communication is bound to the identifier\
    \ (and not the locator),\n   then the peer is allowed to control the locators\
    \ that are used with\n   the identifier.  This way to describe the problem is\
    \ used in [OWNER].\n   Both ways to look at the problem, hence both sets of terminology,\
    \ are\n   useful when trying to understand the problem space and the threats.\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n      link        - a communication facility or medium over\
    \ which nodes\n                    can communicate at the link layer, i.e., the\
    \ layer\n                    immediately below IPv6.  Examples are Ethernets\n\
    \                    (simple or bridged); PPP links; X.25, Frame Relay,\n    \
    \                or ATM networks; and Internet (or higher) layer\n           \
    \         \"tunnels\", such as tunnels over IPv4 or IPv6 itself.\n      interface\
    \   - a node's attachment to a link.\n      address     - an IP layer name that\
    \ has both topological\n                    significance (i.e., a locator) and\
    \ identifies an\n                    interface.  There may be multiple addresses\
    \ per\n                    interface.  Normally an address uniquely identifies\n\
    \                    an interface, but there are exceptions:  the same\n     \
    \               unicast address can be assigned to multiple\n                \
    \    interfaces on the same node, and an anycast address\n                   \
    \ can be assigned to different interfaces on different\n                    nodes.\n\
    \      locator     - an IP layer topological name for an interface or a\n    \
    \                set of interfaces.  There may be multiple locators\n        \
    \            per interface.\n      identifier  - an IP layer identifier for an\
    \ IP layer endpoint\n                    (stack name in [NSRG]), that is, something\
    \ that\n                    might be commonly referred to as a \"host\".  The\n\
    \                    transport endpoint name is a function of the\n          \
    \          transport protocol and would typically include the\n              \
    \      IP identifier plus a port number.  There might be\n                   \
    \ use for having multiple identifiers per stack/per\n                    host.\n\
    \                    An identifier continues to function regardless of\n     \
    \               the state of any one interface.\n      address field\n       \
    \           - the source and destination address fields in the\n             \
    \       IPv6 header.  As IPv6 is currently specified, these\n                \
    \    fields carry \"addresses\".  If identifiers and\n                    locators\
    \ are separated, these fields will contain\n                    locators.\n  \
    \    FQDN        - Fully Qualified Domain Name [FYI18]\n"
- title: 3.  Today's Assumptions and Attacks
  contents:
  - "3.  Today's Assumptions and Attacks\n   The two interesting aspects of security\
    \ for multihoming solutions are\n   (1) the assumptions made by the transport\
    \ layer and application layer\n   protocols about the identifiers that they see,\
    \ and (2) the existing\n   abilities to perform various attacks that are related\
    \ to the\n   identity/location relationship.\n"
- title: 3.1.  Application Assumptions
  contents:
  - "3.1.  Application Assumptions\n   In the Internet today, the initiating part\
    \ of applications either\n   starts with a FQDN, which it looks up in the DNS,\
    \ or already has an\n   IP address from somewhere.  For the FQDN to perform IP\
    \ address\n   lookup, the application effectively places trust in the DNS.  Once\
    \ it\n   has the IP address, the application places trust in the routing\n   system\
    \ delivering packets to that address.  Applications that use\n   security mechanisms,\
    \ such as IPSEC or TLS, have the ability to bind\n   an address or FQDN to cryptographic\
    \ keying material.  Compromising\n   the DNS and/or routing system can result\
    \ in packets being dropped or\n   delivered to an attacker in such cases, but\
    \ since the attacker does\n   not possess the keying material, the application\
    \ will not trust the\n   attacker, and the attacker cannot decrypt what it receives.\n\
    \   At the responding (non-initiating) end of communication today, we\n   find\
    \ that the security configurations used by different applications\n   fall into\
    \ approximately five classes, where a single application\n   might use different\
    \ classes of configurations for different types of\n   communication.\n   The\
    \ first class is the set of public content servers.  These systems\n   provide\
    \ data to any and all systems and are not particularly\n   concerned with confidentiality,\
    \ as they make their content available\n   to all.  However, they are interested\
    \ in data integrity and denial of\n   service attacks.  Having someone manipulate\
    \ the results of a search\n   engine, for example, or prevent certain systems\
    \ from reaching a\n   search engine would be a serious security issue.\n   The\
    \ second class of security configurations uses existing IP source\n   addresses\
    \ from outside of their immediate local site as a means of\n   authentication\
    \ without any form of verification.  Today, with source\n   IP address spoofing\
    \ and TCP sequence number guessing as rampant\n   attacks [RFC1948], such applications\
    \ are effectively opening\n   themselves for public connectivity and are reliant\
    \ on other systems,\n   such as firewalls, for overall security.  We do not consider\
    \ this\n   class of configurations in this document because they are in any case\n\
    \   fully open to all forms of network layer spoofing.\n   The third class of\
    \ security configurations receives existing IP\n   source addresses, but attempt\
    \ some verification using the DNS,\n   effectively using the FQDN for access control.\
    \  (This is typically\n   done by performing a reverse lookup from the IP address,\
    \ followed by\n   a forward lookup and verifying that the IP address matches one\
    \ of the\n   addresses returned from the forward lookup.)  These applications\
    \ are\n   already subject to a number of attacks using techniques like source\n\
    \   address spoofing and TCP sequence number guessing since an attacker,\n   knowing\
    \ this is the case, can simply create a DoS attack using a\n   forged source address\
    \ that has authentic DNS records.  In general\n   this class of security configurations\
    \ is strongly discouraged, but it\n   is probably important that a multihoming\
    \ solution doesn't introduce\n   any new and easier ways to perform such attacks.\
    \  However, we note\n   that some people think we should treat this class the\
    \ same as the\n   second class of security configurations.\n   The fourth class\
    \ of security configurations uses cryptographic\n   security techniques to provide\
    \ both a strong identity for the peer\n   and data integrity with or without confidentiality.\
    \  Such systems are\n   still potentially vulnerable to denial of service attacks\
    \ that could\n   be introduced by a multihoming solution.\n   Finally, the fifth\
    \ class of security configurations uses\n   cryptographic security techniques,\
    \ but without strong identity (such\n   as opportunistic IPsec).  Thus, data integrity\
    \ with or without\n   confidentiality is provided when communicating with an\n\
    \   unknown/unauthenticated principal.  Just like the first category\n   above,\
    \ such applications can't perform access control based on\n   network layer information\
    \ since they do not know the identity of the\n   peer.  However, they might perform\
    \ access control using higher-level\n   notions of identity.  The availability\
    \ of IPsec (and similar\n   solutions) together with channel bindings allows protocols\
    \ (which, in\n   themselves, are vulnerable to man-in-the-middle (MITM) attacks)\
    \ to\n   operate with a high level of confidentiality in the security of the\n\
    \   identification of the peer.  A typical example is the Remote Direct\n   Data\
    \ Placement Protocol (RDDP), which, when used with opportunistic\n   IPsec, works\
    \ well if channel bindings are available.  Channel\n   bindings provide a link\
    \ between the IP-layer identification and the\n   application protocol identification.\n\
    \   A variant of the fifth class are those that use \"leap-of-faith\"\n   during\
    \ some initial communication.  They do not provide strong\n   identities except\
    \ where subsequent communication is bound to the\n   initial communication, providing\
    \ strong assurance that the peer is\n   the same as during the initial communication.\n\
    \   The fifth class is important and its security properties must be\n   preserved\
    \ by a multihoming solution.\n   The requirement for a multihoming solution is\
    \ that security be no\n   worse than it is today in all situations.  Thus, mechanisms\
    \ that\n   provide confidentiality, integrity, or authentication today should\n\
    \   continue to provide these properties in a multihomed environment.\n"
- title: 3.2.  Redirection Attacks Today
  contents:
  - "3.2.  Redirection Attacks Today\n   This section enumerates some of the redirection\
    \ attacks that are\n   possible in today's Internet.\n   If routing can be compromised,\
    \ packets for any destination can be\n   redirected to any location.  This can\
    \ be done by injecting a long\n   prefix into global routing, thereby causing\
    \ the longest match\n   algorithm to deliver packets to the attacker.\n   Similarly,\
    \ if DNS can be compromised, and a change can be made to an\n   advertised resource\
    \ record to advertise a different IP address for a\n   hostname, effectively taking\
    \ over that hostname.  More detailed\n   information about threats relating to\
    \ DNS are in [DNS-THREATS].\n   Any system that is along the path from the source\
    \ to the destination\n   host can be compromised and used to redirect traffic.\
    \  Systems may be\n   added to the best path to accomplish this.  Further, even\
    \ systems\n   that are on multi-access links that do not provide security can\
    \ also\n   be used to redirect traffic off of the normal path.  For example, ARP\n\
    \   and ND spoofing can be used to attract all traffic for the legitimate\n  \
    \ next hop across an Ethernet.  And since the vast majority of\n   applications\
    \ rely on DNS lookups, if DNSsec is not deployed, then\n   attackers that are\
    \ on the path between the host and the DNS servers\n   can also cause redirection\
    \ by modifying the responses from the DNS\n   servers.\n   In general, the above\
    \ attacks work only when the attacker is on the\n   path at the time it is performing\
    \ the attack.  However, in some cases\n   it is possible for an attacker to create\
    \ a DoS attack that remains at\n   least some time after the attacker has moved\
    \ off the path.  An\n   example of this is an attacker that uses ARP or ND spoofing\
    \ while on\n   path to either insert itself or send packets to a black hole (a\n\
    \   non-existent L2 address).  After the attacker moves away, the ARP/ND\n   entries\
    \ will remain in the caches in the neighboring nodes for some\n   amount of time\
    \ (a minute or so in the case of ARP).  This will result\n   in packets continuing\
    \ to be black-holed until ARP entry is flushed.\n   Finally, the hosts themselves\
    \ that terminate the connection can also\n   be compromised and can perform functions\
    \ that were not intended by\n   the end user.\n   All of the above protocol attacks\
    \ are the subject of ongoing work to\n   secure them (DNSsec, security for BGP,\
    \ Secure ND) and are not\n   considered further within this document.  The goal\
    \ for a multihoming\n   solution is not to solve these attacks.  Rather, it is\
    \ to avoid\n   adding to this list of attacks.\n"
- title: 3.3.  Packet Injection Attacks Today
  contents:
  - "3.3.  Packet Injection Attacks Today\n   In today's Internet the transport layer\
    \ protocols, such as TCP and\n   SCTP, which use IP, use the IP addresses as the\
    \ identifiers for the\n   communication.  In the absence of ingress filtering\
    \ [INGRESS], the IP\n   layer allows the sender to use an arbitrary source address,\
    \ thus the\n   transport protocols and/or applications need some protection against\n\
    \   malicious senders injecting bogus packets into the packet stream\n   between\
    \ two communicating peers.  If this protection can be\n   circumvented, then it\
    \ is possible for an attacker to cause harm\n   without necessarily needing to\
    \ redirect the return packets.\n   There are various levels of protection in different\
    \ transport\n   protocols.  For instance, in general TCP packets have to contain\
    \ a\n   sequence that falls in the receiver's window to be accepted.  If the\n\
    \   TCP initial sequence numbers are random, then it is very hard for an\n   off-path\
    \ attacker to guess the sequence number close enough for it to\n   belong to the\
    \ window, and as a result be able to inject a packet into\n   an existing connection.\
    \  How hard this is depends on the size of the\n   available window, whether the\
    \ port numbers are also predictable, and\n   the lifetime of the connection. \
    \ Note that there is ongoing work to\n   strengthen TCP's protection against this\
    \ broad class of attacks\n   [TCPSECURE].  SCTP provides a stronger mechanism\
    \ with the\n   verification tag; an off-path attacker would need to guess this\n\
    \   random 32-bit number.  Of course, IPsec provides cryptographically\n   strong\
    \ mechanisms that prevent attackers, on or off path, from\n   injecting packets\
    \ once the security associations have been\n   established.\n   When ingress filtering\
    \ is deployed between the potential attacker and\n   the path between the communicating\
    \ peers, it can prevent the attacker\n   from using the peer's IP address as source.\
    \  In that case, the packet\n   injection will fail in today's Internet.\n   We\
    \ don't expect a multihoming solution to improve the existing degree\n   of prevention\
    \ against packet injection.  However, it is necessary to\n   look carefully at\
    \ whether a multihoming solution makes it easier for\n   attackers to inject packets\
    \ because the desire to have the peer\n   present at multiple locators, and perhaps\
    \ at a dynamic set of\n   locators, can potentially result in solutions that,\
    \ even in the\n   presence of ingress filtering, make packet injection easier.\n"
- title: 3.4.  Flooding Attacks Today
  contents:
  - "3.4.  Flooding Attacks Today\n   In the Internet today there are several ways\
    \ for an attacker to use a\n   redirection mechanism to launch DoS attacks that\
    \ cannot easily be\n   traced to the attacker.  An example of this is to use protocols\
    \ that\n   cause reflection with or without amplification [PAXSON01].\n   Reflection\
    \ without amplification can be accomplished by an attacker\n   sending a TCP SYN\
    \ packet to a well-known server with a spoofed source\n   address; the resulting\
    \ TCP SYN ACK packet will be sent to the spoofed\n   source address.\n   Devices\
    \ on the path between two communicating entities can also\n   launch DoS attacks.\
    \  While such attacks might not be interesting\n   today, it is necessary to understand\
    \ them better in order to\n   determine whether a multihoming solution might enable\
    \ new types of\n   DoS attacks.\n   For example, today, if A is communicating\
    \ with B, then A can try to\n   overload the path from B to A.  If TCP is used,\
    \ A could do this by\n   sending ACK packets for data that it has not yet received\
    \ (but it\n   suspects B has already sent) so that B would send at a rate that\n\
    \   would cause persistent congestion on the path towards A.  Such an\n   attack\
    \ would seem self-destructive since A would only make its own\n   corner of the\
    \ network suffer by overloading the path from the\n   Internet towards A.\n  \
    \ A more interesting case is if A is communicating with B and X is on\n   the\
    \ path between A and B, then X might be able to fool B to send\n   packets towards\
    \ A at a rate that is faster than A (and the path\n   between A and X) can handle.\
    \  For instance, if TCP is used, then X\n   can craft TCP ACK packets claiming\
    \ to come from A to cause B to use a\n   congestion window that is large enough\
    \ to potentially cause\n   persistent congestion towards A.  Furthermore, if X\
    \ can suppress the\n   packets from A to B, it can also prevent A from sending\
    \ any explicit\n   \"slow down\" packets to B; that is, X can disable any flow\
    \ or\n   congestion control mechanism such as Explicit Congestion Notification\n\
    \   [ECN].  Similar attacks can presumably be launched using protocols\n   that\
    \ carry streaming media by forging such a protocol's notion of\n   acknowledgement\
    \ and feedback.\n   An attribute of this type of attack is that A will simply\
    \ think that\n   B is faulty since its flow and congestion control mechanisms\
    \ don't\n   seem to be working.  Detecting that the stream of ACK packets is\n\
    \   generated from X and not from A might be challenging, since the rate\n   of\
    \ ACK packets might be relatively low.  This type of attack might\n   not be common\
    \ today because, in the presence of ingress filtering, it\n   requires that X\
    \ remain on the path in order to sustain the DoS\n   attack.  And in the absence\
    \ of ingress filtering an attacker would\n   need either to be present on the\
    \ path initially and then move away,\n   or to be able to perform the setup of\
    \ the communication \"blind\",\n   i.e., without seeing the return traffic (which,\
    \ in the case of TCP,\n   implies guessing the initial sequence number).\n   The\
    \ danger is that the addition of multihoming redirection mechanisms\n   might\
    \ potentially remove the constraint that the attacker remain on\n   the path.\
    \  And with the current, no-multihoming support, using\n   end-to-end strong security\
    \ at a protocol level at (or below) this\n   \"ACK\" processing would prevent\
    \ this type of attack.  But if a\n   multihoming solution is provided underneath\
    \ IPsec that prevention\n   mechanism would potentially not exist.\n   Thus, the\
    \ challenge for multihoming solutions is to not create\n   additional types of\
    \ attacks in this area, or make existing types of\n   attacks significantly easier.\n"
- title: 3.5.  Address Privacy Today
  contents:
  - "3.5.  Address Privacy Today\n   In today's Internet there is limited ability\
    \ to track a host as it\n   uses the Internet because in some cases, such as dialup\
    \ connectivity,\n   the host will acquire different IPv4 addresses each time it\
    \ connects.\n   However, with increasing use of broadband connectivity, such as\
    \ DSL\n   or cable, it is becoming more likely that the host will maintain the\n\
    \   same IPv4 over time.  Should a host move around in today's Internet,\n   for\
    \ instance, by visiting WiFi hotspots, it will be configured with a\n   different\
    \ IPv4 address at each location.\n   We also observe that a common practice in\
    \ IPv4 today is to use some\n   form of address translation, whether the site\
    \ is multihomed or not.\n   This effectively hides the identity of the specific\
    \ host within a\n   site; only the site can be identified based on the IP address.\n\
    \   In the cases where it is desirable to maintain connectivity as a host\n  \
    \ moves around, whether using layer 2 technology or Mobile IPv4, the\n   IPv4\
    \ address will remain constant during the movement (otherwise the\n   connections\
    \ would break).  Thus, there is somewhat of a choice today\n   between seamless\
    \ connectivity during movement and increased address\n   privacy.\n   Today when\
    \ a site is multihomed to multiple ISPs, the common setup is\n   that a single\
    \ IP address prefix is used with all the ISPs.  As a\n   result it is possible\
    \ to track that it is the same host that is\n   communication via all ISPs.\n\
    \   However, when a host (and not a site) is multi-homed to several ISPs\n   (e.g.,\
    \ through a General Packet Radio Service (GPRS) connection and a\n   wireless\
    \ hot spot), the host is provided with different IP addresses\n   on each interface.\
    \  While the focus of the multihoming work is on\n   site multihoming, should\
    \ the solution also be applicable to host\n   multihoming, the privacy impact\
    \ needs to be considered for this case\n   as well.\n   IPv6 stateless address\
    \ auto-configuration facilitates IP address\n   management, but raises some concerns\
    \ since the Ethernet address is\n   encoded in the low-order 64 bits of the IPv6\
    \ address.  This could\n   potentially be used to track a host as it moves around\
    \ the network,\n   using different ISPs, etc.  IPv6 specifies temporary addresses\n\
    \   [RFC3041], which allow applications to control whether they need\n   long-lived\
    \ IPv6 addresses or desire the improved privacy of using\n   temporary addresses.\n\
    \   Given that there is no address privacy in site multihoming setups\n   today,\
    \ the primary concerns for the \"do no harm\" criteria are to\n   ensure that\
    \ hosts that move around still have the same ability as in\n   today's Internet\
    \ to choose between seamless connectivity and improved\n   address privacy, and\
    \ also that the introduction of multihoming\n   support should still provide the\
    \ same ability as we have in IPv6 with\n   temporary addresses.\n   When considering\
    \ privacy threats, it makes sense to distinguish\n   between attacks made by on-path\
    \ entities observing the packets flying\n   by, and attacks by the communicating\
    \ peer.  It is probably feasible\n   to prevent on-path entities from correlating\
    \ the multiple IP\n   addresses of the host; but the fact that the peer needs\
    \ to be told\n   multiple IP addresses in order to be able to switch to using\n\
    \   different addresses, when communication fails, limits the ability of\n   the\
    \ host to prevent correlating its multiple addresses.  However,\n   using multiple\
    \ pseudonyms for a host should be able address this\n   case.\n"
- title: 4.  Potential New Attacks
  contents:
  - "4.  Potential New Attacks\n   This section documents the additional attacks that\
    \ have been\n   discovered that result from an architecture where hosts can change\n\
    \   their topological connection to the network in the middle of a\n   transport\
    \ session without interruption.  This discussion is again\n   framed in the context\
    \ where the topological locators may be\n   independent of the host identifiers\
    \ used by the transport and\n   application layer protocols.  Some of these attacks\
    \ may not be\n   applicable if traditional addresses are used.  This section assumes\n\
    \   that each host has multiple locators and that there is some mechanism\n  \
    \ for determining the locators for a correspondent host.  We do not\n   assume\
    \ anything about the properties of these mechanisms.  Instead,\n   this list will\
    \ serve to help us derive the properties of these\n   mechanisms that will be\
    \ necessary to prevent these redirection\n   attacks.\n   Depending on the purpose\
    \ of the redirection attack, we separate the\n   attacks into several different\
    \ types.\n"
- title: 4.1.  Cause Packets to Be Sent to the Attacker
  contents:
  - "4.1.  Cause Packets to Be Sent to the Attacker\n   An attacker might want to\
    \ receive the flow of packets, for instance\n   to be able to inspect and/or modify\
    \ the payload or to be able to\n   apply cryptographic analysis to cryptographically\
    \ protected payload,\n   using redirection attacks.\n   Note that such attacks\
    \ are always possible today if an attacker is on\n   the path between two communicating\
    \ parties, and a multihoming\n   solution can't remove that threat.  Hence, the\
    \ bulk of these concerns\n   relate to off-path attackers.\n"
- title: 4.1.1.  Once Packets Are Flowing
  contents:
  - "4.1.1.  Once Packets Are Flowing\n   This might be viewed as the \"classic\"\
    \ redirection attack.\n   While A and B are communicating X might send packets\
    \ to B and claim:\n   \"Hi, I'm A, send my packets to my new location.\" where\
    \ the location\n   is really X's location.\n   \"Standard\" solutions to this\
    \ include requiring that the host\n   requesting redirection somehow be verified\
    \ to be the same host as the\n   initial host that established communication.\
    \  However, the burdens of\n   such verification must not be onerous, or the redirection\
    \ requests\n   themselves can be used as a DoS attack.\n   To prevent this type\
    \ of attack, a solution would need some mechanism\n   that B can use to verify\
    \ whether a locator belongs to A before B\n   starts using that locator, and be\
    \ able to do this when multiple\n   locators are assigned to A.\n"
- title: 4.1.2.  Time-Shifting Attack
  contents:
  - "4.1.2.  Time-Shifting Attack\n   The term \"time-shifting attack\" is used to\
    \ describe an attacker's\n   ability to perform an attack after no longer being\
    \ on the path.\n   Thus, the attacker would have been on the path at some point\
    \ in time,\n   snooping and/or modifying packets; and later, when the attacker\
    \ is no\n   longer on the path, it launches the attack.\n   In the current Internet,\
    \ it is not possible to perform such attacks\n   to redirect packets.  But for\
    \ some time after moving away, the\n   attacker can cause a DoS attack, e.g.,\
    \ by leaving a bogus ARP entry\n   in the nodes on the path, or by forging TCP\
    \ Reset packets based on\n   having seen the TCP Initial Sequence Numbers when\
    \ it was on the path.\n   It would be reasonable to require that a multihoming\
    \ solution limit\n   the ability to redirect and/or DoS traffic to a few minutes\
    \ after the\n   attacker has moved off the path.\n"
- title: 4.1.3.  Premeditated Redirection
  contents:
  - "4.1.3.  Premeditated Redirection\n   This is a variant of the above where the\
    \ attacker \"installs\" itself\n   before communication starts.\n   For example,\
    \ if the attacker X can predict that A and B will\n   communicate in the (near)\
    \ future, then the attacker can tell B: \"Hi,\n   I'm A and I'm at this location\"\
    .  When A later tries to communicate\n   with B, will B believe it is really A?\n\
    \   If the solution to the classic redirection attack is based on \"prove\n  \
    \ you are the same as initially\", then A will fail to prove this to B\n   because\
    \ X initiated communication.\n   Depending on details that would be specific to\
    \ a proposed solution,\n   this type of attack could either cause redirection\
    \ (so that the\n   packets intended for A will be sent to X) or they could cause\
    \ DoS\n   (where A would fail to communicate with B since it can't prove it is\n\
    \   the same host as X).\n   To prevent this attack, the verification of whether\
    \ a locator belongs\n   to the peer cannot simply be based on the first peer that\
    \ made\n   contact.\n"
- title: 4.1.4.  Using Replay Attacks
  contents:
  - "4.1.4.  Using Replay Attacks\n   While the multihoming problem doesn't inherently\
    \ imply any\n   topological movement, it is useful to also consider the impact\
    \ of\n   site renumbering in combination with multihoming.  In that case, the\n\
    \   set of locators for a host will change each time its site renumbers,\n   and,\
    \ at some point in time after a renumbering event, the old locator\n   prefix\
    \ might be reassigned to some other site.\n   This potentially give an attacker\
    \ the ability to replay whatever\n   protocol mechanism was used to inform a host\
    \ of a peer's locators so\n   that the host would incorrectly be led to believe\
    \ that the old\n   locator (set) should be used even long after a renumbering\
    \ event.\n   This is similar to the risk of replay of Binding Updates in [MIPv6],\n\
    \   but the time constant is quite different; Mobile IPv6 might see\n   movements\
    \ every second while site renumbering, followed by\n   reassignment of the site\
    \ locator prefix, might be a matter of weeks\n   or months.\n   To prevent such\
    \ replay attacks, the protocol used to verify which\n   locators can be used with\
    \ a particular identifier needs some replay\n   protection mechanism.\n   Also,\
    \ in this space one needs to be concerned about potential\n   interaction between\
    \ such replay protection and the administrative act\n   of reassignment of a locator.\
    \  If the identifier and locator\n   relationship is distributed across the network,\
    \ one would need to\n   make sure that the old information has been completely\
    \ purged from\n   the network before any reassignment.  Note that this does not\
    \ require\n   an explicit mechanism.  This can instead be implemented by locator\n\
    \   reuse policy and careful timeouts of locator information.\n"
- title: 4.2.  Cause Packets to Be Sent to a Black Hole
  contents:
  - "4.2.  Cause Packets to Be Sent to a Black Hole\n   This is also a variant of\
    \ the classic redirection attack.  The\n   difference is that the new location\
    \ is a locator that is nonexistent\n   or unreachable.  Thus, the effect is that\
    \ sending packets to the new\n   locator causes the packets to be dropped by the\
    \ network somewhere.\n   One would expect that solutions that prevent the previous\
    \ redirection\n   attacks would prevent this attack as a side effect, but it makes\n\
    \   sense to include this attack here for completeness.  Mechanisms that\n   prevented\
    \ a redirection attack to the attacker should also prevent\n   redirection to\
    \ a black hole.\n"
- title: 4.3.  Third Party Denial-of-Service Attacks
  contents:
  - "4.3.  Third Party Denial-of-Service Attacks\n   An attacker can use the ability\
    \ to perform redirection to cause\n   overload on an unrelated third party.  For\
    \ instance, if A and B are\n   communicating, then the attacker X might be able\
    \ to convince A to\n   send the packets intended for B to some third node C. \
    \ While this\n   might seem harmless at first, since X could just flood C with\
    \ packets\n   directly, there are a few aspects of these attacks that cause\n\
    \   concern.\n   The first is that the attacker might be able to completely hide\
    \ its\n   identity and location.  It might suffice for X to send and receive a\n\
    \   few packets to A in order to perform the redirection, and A might not\n  \
    \ retain any state on who asked for the redirection to C's location.\n   Even\
    \ if A had retained such state, that state would probably not be\n   easily available\
    \ to C, thus C can't determine who the attacker was\n   once C has become the\
    \ victim of a DoS attack.\n   The second concern is that, with a direct DoS attack\
    \ from X to C, the\n   attacker is limited by the bandwidth of its own path towards\
    \ C.  If\n   the attacker can fool another host, such as A, to redirect its\n\
    \   traffic to C, then the bandwidth is limited by the path from A\n   towards\
    \ C.  If A is a high-capacity Internet service and X has slow\n   (e.g., dialup)\
    \ connectivity, this difference could be substantial.\n   Thus, in effect, this\
    \ could be similar to packet amplifying\n   reflectors in [PAXSON01].\n   The\
    \ third, and final concern, is that if an attacker only need a few\n   packets\
    \ to convince one host to flood a third party, then it wouldn't\n   be hard for\
    \ the attacker to convince lots of hosts to flood the same\n   third party.  Thus,\
    \ this could be used for Distributed Denial-of-\n   Service attacks.\n   A third\
    \ party DoS attack might be against the resources of a\n   particular host (i.e.,\
    \ C in the example above), or it might be\n   against the network infrastructure\
    \ towards a particular IP address\n   prefix, by overloading the routers or links\
    \ even though there is no\n   host at the address being targeted.\n   In today's\
    \ Internet, the ability to perform this type of attack is\n   quite limited. \
    \ In order for the attacker to initiate communication,\n   it will in most cases\
    \ need to be able to receive some packets from\n   the peer (the potential exception\
    \ being techniques that combine this\n   with TCP-sequence-number-guessing techniques).\
    \  Furthermore, to the\n   extent that parts of the Internet uses ingress filtering\
    \ [INGRESS],\n   even if the communication could be initiated, it wouldn't be\
    \ possible\n   to sustain it by sending ACK packets with spoofed source addresses\n\
    \   from an off-path attacker.\n   If this type of attack can't be prevented,\
    \ there might be mitigation\n   techniques that can be employed.  For instance,\
    \ in the case of TCP a\n   partial defense can be constructed by having TCP slow-start\
    \ be\n   triggered when the destination locator changes.  (Folks might argue\n\
    \   that, separately from security, this would be the correct action for\n   congestion\
    \ control since TCP might not have any congestion-relation\n   information about\
    \ the new path implied by the new locator.)\n   Presumably the same approach can\
    \ be applied to other transport\n   protocols that perform different forms of\
    \ (TCP-friendly) congestion\n   control, even though some of them might not adapt\
    \ as rapidly as TCP.\n   But since all congestion-controlled protocols probably\
    \ need to have\n   some reaction to the path change implied by a locator change,\
    \ it\n   makes sense to think about 3rd party DoS attacks when designing how\n\
    \   the specific transport protocols should react to a locator change.\n   However,\
    \ this would only be a partial solution since it would\n   probably take several\
    \ packets and roundtrips before the transport\n   protocol would stop transmitting;\
    \ thus, an attacker could still use\n   this as a reflector with packet amplification.\
    \  Thus, the multihoming\n   mechanism probably needs some form of defense against\
    \ third party DoS\n   attacks, in addition to the help we can get from the transport\n\
    \   protocols.\n"
- title: 4.3.1.  Basic Third Party DoS
  contents:
  - "4.3.1.  Basic Third Party DoS\n   Assume that X is on a slow link anywhere in\
    \ the Internet.  B is on a\n   fast link (gigabits; e.g., a media server) and\
    \ A is the victim.\n   X could flood A directly but is limited by its low bandwidth.\
    \  If X\n   can establish communication with B, ask B to send it a high-speed\n\
    \   media stream, then X can presumably fake out the\n   \"acknowledgements/feedback\"\
    \ needed for B to blast out packets at full\n   speed.  So far, this only hurts\
    \ X and the path between X and the\n   Internet.  But if X could also tell B \"\
    I'm at A's locator\", then X\n   has effectively used this redirection capability\
    \ in multihoming to\n   amplify its DoS capability, which would be a source of\
    \ concern.\n   One could envision rather simple techniques to prevent such attacks.\n\
    \   For instance, before sending to a new peer locator, perform a clear\n   text\
    \ exchange with the claimed new locator of the form \"Are you X?\"\n   resulting\
    \ in \"Yes, I'm X.\".  This would suffice for the simplest of\n   attacks.  However,\
    \ as we will see below, more sophisticated attacks\n   are possible.\n"
- title: 4.3.2.  Third Party DoS with On-Path Help
  contents:
  - "4.3.2.  Third Party DoS with On-Path Help\n   The scenario is as above, but,\
    \ in addition, the attacker X has a\n   friend Y on the path between A and B:\n\
    \       -----        -----        -----\n       | A |--------| Y |--------| B\
    \ |\n       -----        -----        -----\n                                /\n\
    \                               /\n                              /\n         \
    \                    /\n                            /\n                      \
    \     /\n                        -----\n                        | X |\n      \
    \                  -----\n   With the simple solution suggested in the previous\
    \ section, all Y\n   might need to do is fake a response to the \"Are you X?\"\
    \ packet, and\n   after that point in time Y might not be needed; X could potentially\n\
    \   sustain the data flow towards A by generating the ACK packets.  Thus,\n  \
    \ it would be even harder to detect the existence of Y.\n   Furthermore, if X\
    \ is not the actual end system but an attacker\n   between some node C and B,\
    \ then X can claim to be C, and no finger\n   can be pointed at X either:\n  \
    \     -----        -----        -----\n       | A |--------| Y |--------| B |\n\
    \       -----        -----        -----\n                                /\n \
    \                              /\n                              /\n          \
    \                   /\n                            /\n                       \
    \    /\n            -----       -----\n            | C |-------| X |\n       \
    \     -----       -----\n   Thus, with two attackers on different paths, there\
    \ might be no trace\n   of who did the redirection to the 3rd party once the redirection\
    \ has\n   taken place.\n   A specific case of this is when X=Y, and X is located\
    \ on the same LAN\n   as B.\n   A potential way to make such attacks harder would\
    \ be to use the last\n   received (and verified) source locator as the destination\
    \ locator.\n   That way, when X sends the ACK packets (whether it claims to be\
    \ X or\n   C) the result would be that the packet flow from B would switch back\n\
    \   towards X/C, which would result in an attack similar to what can be\n   performed\
    \ in today's Internet.\n   Another way to make such attacks harder would be to\
    \ perform periodic\n   verifications that the peer is available at the locator,\
    \ instead of\n   just one when the new locator is received.\n   A third way that\
    \ a multihoming solution might address this is to\n   ensure that B will only\
    \ accept locators that can be authenticated to\n   be synonymous with the original\
    \ correspondent.  It must be possible\n   to securely ensure that these locators\
    \ form an equivalence class.  So\n   in the first example, not only does X need\
    \ to assert that it is A,\n   but A needs to assert that it is X.\n"
- title: 4.4.  Accepting Packets from Unknown Locators
  contents:
  - "4.4.  Accepting Packets from Unknown Locators\n   The multihoming solution space\
    \ does not only affect the destination\n   of packets; it also raises the question\
    \ from which sources packets\n   should be accepted.  It is possible to build\
    \ a multihoming solution\n   that allows traffic to be recognized as coming from\
    \ the same peer\n   even if there is a previously unknown locator present in the\
    \ source\n   address field.  The question is whether we want to allow packets\
    \ from\n   unverified sources to be passed on to transport and application layer\n\
    \   protocols.\n   In the current Internet, an attacker can't inject packets with\n\
    \   arbitrary source addresses into a session if there is ingress\n   filtering\
    \ present, so allowing packets with unverified sources in a\n   multihoming solution\
    \ would fail our \"no worse than what we have now\"\n   litmus test.  However,\
    \ given that ingress filtering deployment is far\n   from universal and ingress\
    \ filtering typically wouldn't prevent\n   spoofing of addresses in the same subnet,\
    \ requiring rejecting packets\n   from unverified locators might be too stringent.\n\
    \   An example of the current state are the ability to inject RST packets\n  \
    \ into existing TCP connections.  When there is no ingress filtering in\n   the\
    \ network, this is something that the TCP endpoints need to sort\n   out themselves.\
    \  However, deploying ingress filtering helps in\n   today's Internet since an\
    \ attacker is limited in the set of source\n   addresses it can use.\n   A factor\
    \ to take into account to determine the \"requirement level\"\n   for this is\
    \ that when IPsec is used on top of the multihoming\n   solution, then IPsec will\
    \ reject such spoofed packets.  (Note that\n   this is different than in the redirection\
    \ attack cases where even\n   with IPsec an attacker could potentially cause a\
    \ DoS attack.)\n   There might also be a middle ground where arbitrary attackers\
    \ are\n   prevented from injecting packets by using the SCTP verification tag\n\
    \   type of approach [SCTP].  (This is a clear-text tag which is sent to\n   the\
    \ peer which the peer is expected to include in each subsequent\n   packet.) \
    \ Such an approach doesn't prevent packet injection from\n   on-path attackers\
    \ (since they can observe the verification tag), but\n   neither does ingress\
    \ filtering.\n"
- title: 4.5.  New Privacy Considerations
  contents:
  - "4.5.  New Privacy Considerations\n   While introducing identifiers can be helpful\
    \ by providing ways to\n   identify hosts across events when its IP address(es)\
    \ might change,\n   there is a risk that such mechanisms can be abused to track\
    \ the\n   identity of the host over long periods of time, whether using the\n\
    \   same (set of) ISP(s) or moving between different network attachment\n   points.\
    \  Designers of solutions to multihoming need to be aware of\n   this concern.\n\
    \   Introducing the multihoming capability inherently implies that the\n   communicating\
    \ peers need to know multiple locators for each other in\n   order to be resilient\
    \ to failures of some paths/locators.  In\n   addition, if the multihoming signaling\
    \ protocol doesn't provide\n   privacy, it might be possible for 3rd parties on\
    \ the path to discover\n   many or all the locators assigned to a host, which\
    \ would increase the\n   privacy exposure compared to a multihomed host today.\n\
    \   For instance, a solution could address this by allowing each host to\n   have\
    \ multiple identifiers at the same time and perhaps even changing\n   the set\
    \ of identifiers that are used over time.  Such an approach\n   could be analogous\
    \ to what is done for IPv6 addresses in [RFC3041].\n"
- title: 5.  Granularity of Redirection
  contents:
  - "5.  Granularity of Redirection\n   Different multihoming solutions might approach\
    \ the problem at\n   different layers in the protocol stack.  For instance, there\
    \ have\n   been proposals for a shim layer inside IP, as well as transport layer\n\
    \   approaches.  The former would have the capability to redirect an IP\n   address\
    \ while the latter might be constrained to only redirect a\n   single transport\
    \ connection.  This difference might be important when\n   it comes to understanding\
    \ the security impact.\n   For instance, premeditated attacks might have quite\
    \ different impact\n   in the two cases.  In an IP-based multihoming solution\
    \ a successful\n   premeditated redirection could be due to the attacker connecting\
    \ to a\n   server and claiming to be 'A', which would result in the server\n \
    \  retaining some state about 'A', which it received from the attacker.\n   Later,\
    \ when the real 'A' tries to connect to the server, the\n   existence of this\
    \ state might mean that 'A' fails to communicate, or\n   that its packets are\
    \ sent to the attacker.  But if the same scenario\n   is applied to a transport-layer\
    \ approach, then the state created due\n   to the attacker would perhaps be limited\
    \ to the existing transport\n   connection.  Thus, while this might prevent the\
    \ real 'A' from\n   connecting to the server while the attacker is connected (if\
    \ they\n   happen to use the same transport port number), most likely it would\n\
    \   not affect 'A's ability to connect after the attacker has\n   disconnected.\n\
    \   A particular aspect of the granularity question is the direction\n   question:\
    \ will the created state be used for communication in the\n   reverse direction\
    \ of the direction when it was created?  For\n   instance, if the attacker 'X'\
    \ suspects that 'A' will connect to 'B'\n   in the near future, can X connect\
    \ to A and claim to be B, and then\n   have that later make A connect to the attacker\
    \ instead of to the real\n   B?\n   Note that transport layer approaches are limited\
    \ to the set of\n   \"transport\" protocols that the implementation makes aware\
    \ of\n   multihoming.  In many cases there would be \"transport\" protocols that\n\
    \   are unknown to the multihoming capability of the system, such as\n   applications\
    \ built on top of UDP.  To understand the impact of the\n   granularity question\
    \ on the security, one would also need to\n   understand how such applications/protocols\
    \ would be handled.\n   A property of transport granularity is that the amount\
    \ of work\n   performed by a legitimate host is proportional to the number of\n\
    \   transport connections it creates that uses the multihoming support,\n   since\
    \ each such connection would require some multihoming signaling.\n   And the same\
    \ is true for the attacker.  This means that an attacker\n   could presumably\
    \ do a premeditated attack for all TCP connections to\n   port 80 from A to B,\
    \ by setting up 65,536 (for all TCP source port\n   numbers) connections to server\
    \ B and causing B to think those\n   connections should be directed to the attacker\
    \ and keeping those TCP\n   connections open.  Any attempt to make legitimate\
    \ communication more\n   efficient (e.g., by being able to signal for multiple\
    \ transport\n   connections at a time) would provide as much relative benefit\
    \ for an\n   attacker as the legitimate hosts.\n   The issue isn't only about\
    \ the space (granularity), but also about\n   the lifetime component in the results\
    \ of a multihoming request.  In a\n   transport-layer approach, the multihoming\
    \ state would presumably be\n   destroyed when the transport state is deleted\
    \ as part of closing the\n   connection.  But an IP-layer approach would have\
    \ to rely on some\n   timeout or garbage collection mechanisms, perhaps combined\
    \ with some\n   new explicit signaling, to remove the multihoming state.  The\n\
    \   coupling between the connection state and multihoming state in the\n   transport-layer\
    \ approach might make it more expensive for the\n   attacker, since it needs to\
    \ keep the connections open.\n   In summary, there are issues we don't yet understand\
    \ well about\n   granularity and reuse of the multihoming state.\n"
- title: 6.  Movement Implications?
  contents:
  - "6.  Movement Implications?\n   In the case when nothing moves around, we have\
    \ a reasonable\n   understanding of the security requirements.  Something that\
    \ is on the\n   path can be a MITM in today's Internet, and a multihoming solution\n\
    \   doesn't need to make that aspect any more secure.\n   But it is more difficult\
    \ to understand the requirements when hosts\n   are moving around.  For instance,\
    \ a host might be on the path for a\n   short moment in time by driving by an\
    \ 802.11 hotspot.  Would we or\n   would we not be concerned if such a drive-by\
    \ (which many call a\n   \"time-shifting\" attack) would result in the temporarily\
    \ on-path host\n   being able to act as a MITM for future communication?  Depending\
    \ on\n   the solution, this might be possible if the attacker causes a\n   multihoming\
    \ state to be created in various peer hosts while the\n   attacker was on the\
    \ path, and that state remained in the peers for\n   some time.\n   The answer\
    \ to this question doesn't seem to be obvious even in the\n   absence of any new\
    \ multihoming support.  We don't have much\n   experience with hosts moving around\
    \ that are able to attack things as\n   they move.  In Mobile IPv6 [MIPv6] a conservative\
    \ approach was taken\n   that limits the effect of such drive-by attacks to the\
    \ maximum\n   lifetime of the binding, which is set to a few minutes.\n   With\
    \ multihoming support the issue gets a bit more complicated\n   because we explicitly\
    \ want to allow a host to be present at multiple\n   locators at the same time.\
    \  Thus, there might be a need to\n   distinguish between the host moving between\
    \ different locators, and\n   the host sending packets with different source locators\
    \ because it is\n   present at multiple locators without any topological movement.\n\
    \   Note that the multihoming solutions that have been discussed range\n   from\
    \ such \"drive-by\" attacks being impossible (for instance, due to a\n   strong\
    \ binding to a separate identifier as in HIP, or due to reliance\n   on the relative\
    \ security of the DNS for forward plus reverse lookups\n   in NOID), to systems\
    \ that are first-come/first-serve (WIMP being an\n   example with a separate ID\
    \ space, a MAST approach with a PBK being an\n   example without a separate ID\
    \ space) that allow the first host that\n   uses an ID/address to claim it without\
    \ any time limit.\n"
- title: 7.  Other Security Concerns
  contents:
  - "7.  Other Security Concerns\n   The protocol mechanisms added as part of a multihoming\
    \ solution\n   shouldn't introduce any new DoS in the mechanisms themselves. \
    \ In\n   particular, care must be taken not to:\n    - create state on the first\
    \ packet in an exchange, since that could\n      result in state consumption attacks\
    \ similar to the TCP SYN\n      flooding attack.\n    - perform much work on the\
    \ first packet in an exchange (such as\n      expensive verification)\n   There\
    \ is a potential chicken-and-egg problem here, because\n   potentially one would\
    \ want to avoid doing work or creating state\n   until the peer has been verified,\
    \ but verification will probably need\n   some state and some work to be done.\
    \  Avoiding any work does not seem\n   possible, but good protocol design can\
    \ often delay state creation\n   until verification has been completed.\n   A\
    \ possible approach that solutions might investigate is to defer\n   verification\
    \ until there appears to be two different hosts (or two\n   different locators\
    \ for the same host) that want to use the same\n   identifier.  In such a case\
    \ one would need to investigate whether a\n   combination of impersonation and\
    \ DoS attack can be used to prevent\n   the discovery of the impersonation.\n\
    \   Another possible approach is to first establish communications, and\n   then\
    \ perform verification in parallel with normal data transfers.\n   Redirection\
    \ would only be permitted after verification was complete,\n   but prior to that\
    \ event, data could transfer in a normal,\n   non-multihomed manner.\n   Finally,\
    \ the new protocol mechanisms should be protected against\n   spoofed packets,\
    \ at least from off-path sources, and replayed\n   packets.\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   In section 3, the document presented existing\
    \ protocol-based\n   redirection attacks.  But there are also non-protocol redirection\n\
    \   attacks.  An attacker that can gain physical access to one of\n    - the copper/fiber\
    \ somewhere in the path,\n    - a router or L2 device in the path, or\n    - one\
    \ of the end systems\n   can also redirect packets.  This could be possible, for\
    \ instance, by\n   physical break-ins or by bribing staff that have access to\
    \ the\n   physical infrastructure.  Such attacks are out of scope of this\n  \
    \ discussion, but are worth keeping in mind when looking at the cost\n   for an\
    \ attacker to exploit any protocol-based attacks against\n   multihoming solutions;\
    \ making protocol-based attacks much more\n   expensive to launch than break-ins/bribery\
    \ type of attacks might be\n   overkill.\n"
- title: 9.  Acknowledgements
  contents:
  - "9.  Acknowledgements\n   This document was originally produced by a MULTI6 design\
    \ team\n   consisting of (in alphabetical order):  Iljitsch van Beijnum, Steve\n\
    \   Bellovin, Brian Carpenter, Mike O'Dell, Sean Doran, Dave Katz, Tony\n   Li,\
    \ Erik Nordmark, and Pekka Savola.\n   Much of the awareness of these threats\
    \ come from the work on Mobile\n   IPv6 [MIPv6, NIKANDER03, AURA02].\n   As the\
    \ document has evolved, the MULTI6 WG participants have\n   contributed to the\
    \ document.  In particular:  Masataka Ohta brought\n   up privacy concerns related\
    \ to stable identifiers.  The suggestion to\n   discuss transport versus IP granularity\
    \ was contributed by Marcelo\n   Bagnulo, who also contributed text to Appendix\
    \ B.  Many editorial\n   clarifications came from Jari Arkko.\n"
- title: 10.  Informative References
  contents:
  - "10.  Informative References\n   [NSRG]        Lear, E. and R. Droms, \"What's\
    \ In A Name: Thoughts from\n                 the NSRG\", Work in Progress, September\
    \ 2003.\n   [MIPv6]       Johnson, D., Perkins, C., and J. Arkko, \"Mobility\n\
    \                 Support in IPv6\", RFC 3775, June 2004.\n   [AURA02]      Aura,\
    \ T. and J. Arkko, \"MIPv6 BU Attacks and Defenses\",\n                 Work in\
    \ Progress, March 2002.\n   [NIKANDER03]  Nikander, P., T. Aura, J. Arkko, G.\
    \ Montenegro, and E.\n                 Nordmark, \"Mobile IP version 6 Route Optimization\n\
    \                 Security Design Background\", Work in Progress, December\n \
    \                2003.\n   [PAXSON01]    V. Paxson, \"An Analysis of Using Reflectors\
    \ for\n                 Distributed Denial-of-Service Attacks\", Computer\n  \
    \               Communication Review 31(3), July 2001.\n   [INGRESS]     Ferguson,\
    \ P. and D. Senie, \"Network Ingress Filtering:\n                 Defeating Denial\
    \ of Service Attacks which employ IP\n                 Source Address Spoofing\"\
    , BCP 38, RFC 2827, May 2000.\n   [SCTP]        Stewart, R., Xie, Q., Morneault,\
    \ K., Sharp, C.,\n                 Schwarzbauer, H., Taylor, T., Rytina, I., Kalla,\
    \ M.,\n                 Zhang, L., and V. Paxson, \"Stream Control Transmission\n\
    \                 Protocol\", RFC 2960, October 2000.\n   [RFC3041]     Narten,\
    \ T. and R. Draves, \"Privacy Extensions for\n                 Stateless Address\
    \ Autoconfiguration in IPv6\", RFC 3041,\n                 January 2001.\n   [DNS-THREATS]\
    \ Atkins, D. and R. Austein, \"Threat Analysis of the\n                 Domain\
    \ Name System (DNS)\", RFC 3833, August 2004.\n   [FYI18]       Malkin, G., \"\
    Internet Users' Glossary\", RFC 1983,\n                 August 1996.\n   [ECN]\
    \         Ramakrishnan, K., Floyd, S., and D. Black, \"The\n                 Addition\
    \ of Explicit Congestion Notification (ECN) to\n                 IP\", RFC 3168,\
    \ September 2001.\n   [OWNER]       Nikander, P., \"Denial-of-Service, Address\
    \ Ownership,\n                 and Early Authentication in the IPv6 World\", Security\n\
    \                 Protocols 9th International Workshop, Cambridge, UK,\n     \
    \            April 25-27 2001, LNCS 2467, pages 12-26, Springer,\n           \
    \      2002.\n   [RFC1948]     Bellovin, S., \"Defending Against Sequence Number\n\
    \                 Attacks\", RFC 1948, May 1996.\n   [PBK]         Scott Bradner,\
    \ Allison Mankin, Jeffrey Schiller, \"A\n                 Framework for Purpose-Built\
    \ Keys (PBK)\", Work in\n                 Progress, June 2003.\n   [NOID]    \
    \    Erik Nordmark, \"Multihoming without IP Identifiers\",\n                \
    \ Work in Progress, July 2004.\n   [HIP]         Pekka Nikander, \"Considerations\
    \ on HIP based IPv6\n                 multi-homing\", Work in Progress, July 2004.\n\
    \   [WIMP]        Jukka Ylitalo, \"Weak Identifier Multihoming Protocol\n    \
    \             (WIMP)\", Work in Progress, June 2004.\n   [CBHI]        Iljitsch\
    \ van Beijnum, \"Crypto Based Host Identifiers\",\n                 Work in Progress,\
    \ February 2004.\n   [TCPSECURE]   M. Dalal (ed), \"Transmission Control Protocol\
    \ security\n                 considerations\", Work in Progress, November 2004.\n"
- title: 'Appendix A: Some Security Analysis'
  contents:
  - "Appendix A: Some Security Analysis\n   When looking at the proposals that have\
    \ been made for multihoming\n   solutions and the above threats, it seems like\
    \ there are two\n   separable aspects of handling the redirection threats:\n \
    \   - Redirection of existing communication\n    - Redirection of an identity\
    \ before any communication\n   This seems to be related to the fact that there\
    \ are two different\n   classes of use of identifiers.  One use is for:\n    o\
    \ Initially establishing communication; looking up an FQDN to find\n      something\
    \ that is passed to a connect() or sendto() API call.\n    o Comparing whether\
    \ a peer entity is the same peer entity as in some\n      previous communication.\n\
    \    o Using the identity of the peer for future communication\n      (\"callbacks\"\
    ) in the reverse direction, or to refer to a 3rd party\n      (\"referrals\").\n\
    \   The other use of identifiers is as part of being able to redirect\n   existing\
    \ communication to use a different locator.\n   The first class of use seems to\
    \ be related to something about the\n   ownership of the identifier; proving the\
    \ \"ownership\" of the\n   identifier should be sufficient in order to be authorized\
    \ to control\n   which locators are used to reach the identifier.\n   The second\
    \ class of use seems to be related to something more\n   ephemeral.  In order\
    \ to redirect the existing communication to some\n   other locator, it seems to\
    \ be sufficient to prove that the entity is\n   the same as the one that initiated\
    \ the communication.  One can view\n   this as proving the ownership of some context,\
    \ where the context is\n   established around the time when the communication\
    \ is initiated.\n   Preventing unauthorized redirection of existing communication\
    \ can be\n   addressed by a large number of approaches that are based on setting\n\
    \   up some form of security material at the beginning of communication,\n   and\
    \ later using the existence of that material for one end to prove\n   to the other\
    \ that it remains the same.  An example of this is Purpose\n   Built Keys [PBK].\
    \  One can envision different approaches for such\n   schemes with different complexity,\
    \ performance, and resulting\n   security such as anonymous Diffie-Hellman exchange,\
    \ the reverse hash\n   chains presented in [WIMP], or even a clear-text token\
    \ exchanged at\n   the initial communication.\n   However, the mechanisms for\
    \ preventing unauthorized use of an\n   identifier can be quite different.  One\
    \ way to prevent premeditated\n   redirection is to simply not introduce a new\
    \ identifier name space,\n   and instead to rely on existing name space(s), a\
    \ trusted third party,\n   and a sufficiently secure way to access the third party,\
    \ as in\n   [NOID].  Such an approach relies on the third party (DNS in the case\n\
    \   of NOID) as the foundation.  In terms of multihoming state creation,\n   in\
    \ this case premeditated redirection is as easy or as hard as\n   redirecting\
    \ an IP address today.  Essentially, this relies on the\n   return-routability\
    \ check associated with a roundtrip of\n   communication, which verifies that\
    \ the routing system delivers\n   packets to the IP address in question.\n   Alternatively,\
    \ one can use the crypto-based identifiers such as in\n   [HIP] or crypto-generated\
    \ addresses as in [CBHI], which both rely on\n   public-key crypto, to prevent\
    \ premeditated attacks.  In some cases it\n   is also possible to avoid the problem\
    \ by having one end of the\n   communication use ephemeral identifiers as the\
    \ initiator does in\n   [WIMP].  This avoids premeditated redirection by detecting\
    \ that some\n   other entity is using the same identifier at the peer and switching\n\
    \   to use another ephemeral ID.  While the ephemeral identifiers might\n   be\
    \ problematic when used by applications, for instance due to\n   callbacks or\
    \ referrals, note that for the end that has the ephemeral\n   identifier, one\
    \ can skirt around the premeditated attacks (assuming\n   the solution has a robust\
    \ way to pick a new identifier when one is in\n   use/stolen).\n   Assuming the\
    \ problem can't be skirted by using ephemeral identifiers,\n   there seem to be\
    \ 3 types of approaches that can be used to establish\n   some form of identity\
    \ ownership:\n    - A trusted third party, which states that a given identity\
    \ is\n      reachable at a given set of locators, so the endpoint reached at\n\
    \      one of this locators is the owner of the identity.\n    - Crypto-based\
    \ identifiers or crypto-generated addresses where the\n      public/private key\
    \ pair can be used to prove that the identifier\n      was generated by the node\
    \ knowing the private key (or by another\n      node whose public key hashes to\
    \ the same value)\n    - A static binding, as currently defined in IP, where you\
    \ trust that\n      the routing system will deliver the packets to the owner of\
    \ the\n      locator, and since the locator and the identity are one, you prove\n\
    \      identity ownership as a sub-product.\n   A solution would need to combine\
    \ elements that provide protection\n   against both premeditated and ongoing communication\
    \ redirection.\n   This can be done in several ways, and the current set of proposals\
    \ do\n   not appear to contain all useful combinations.  For instance, the HIP\n\
    \   CBID property could be used to prevent premeditated attacks, while\n   the\
    \ WIMP hash chains could be used to prevent on-going redirection.\n   And there\
    \ are probably other interesting combinations.\n   A related, but perhaps separate\
    \ aspect, is whether the solution\n   provides for protection against man-in-the-middle\
    \ attacks with\n   on-path attackers.  Some schemes, such as [HIP] and [NOID]\
    \ do, but\n   given that an on-path attacker can see and modify the data traffic\n\
    \   whether or not it can modify the multihoming signaling, this level of\n  \
    \ protection seems like overkill.  Protecting against on-path MITM for\n   the\
    \ data traffic can be done separately using IPsec, TLS, etc.\n   Finally, preventing\
    \ third party DoS attacks is conceptually simpler;\n   it would suffice to somehow\
    \ verify that the peer is indeed reachable\n   at the new locator before sending\
    \ a large number of packets to that\n   locator.\n   Just as the redirection attacks\
    \ are conceptually prevented by proving\n   at some level the ownership of the\
    \ identifier or the ownership of the\n   communication context, third party DoS\
    \ attacks are conceptually\n   prevented by showing that the endpoint is authorized\
    \ to use a given\n   locator.\n   The currently known approaches for showing such\
    \ authorization are:\n    - Return routability.  That is, if an endpoint is capable\
    \ of\n      receiving packets at a given locator, it is because he is\n      authorized\
    \ to do so.  This relies on routing being reasonably hard\n      to subvert to\
    \ deliver packets to the wrong place.  While this\n      might be the case when\
    \ routing protocols are used with reasonable\n      security mechanisms and practices,\
    \ it isn't the case on a single\n      link where ARP and Neighbor Discovery can\
    \ be easily spoofed.\n    - Trusted third party.  A third party establishes that\
    \ a given\n      identity is authorized to use a given set of locators (for\n\
    \      instance the DNS).\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Erik Nordmark\n   Sun Microsystems, Inc.\n   17 Network\
    \ Circle\n   Mountain View, CA 94025\n   USA\n   Phone: +1 650 786 2921\n   Fax:\
    \   +1 650 786 5896\n   EMail: erik.nordmark@sun.com\n   Tony Li\n   EMail: Tony.Li@tony.li\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2005).\n   This\
    \ document is subject to the rights, licenses and restrictions\n   contained in\
    \ BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at ietf-\n   ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
