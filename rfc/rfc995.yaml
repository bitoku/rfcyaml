- title: __initial_text__
  contents:
  - "             INTERNATIONAL ORGANIZATION FOR STANDARDIZATION\n              ORGANISATION\
    \ INTERNATIONALE DE NORMALISATION\n     ______________________________________________________________________\n\
    \    |                TELECOMMUNICATIONS AND INFORMATION                   |\n\
    \    |                     EXCHANGE BETWEEN SYSTEMS                        |\n\
    \    |                       Secretariat: USA (ANSI)                       |\n\
    \    |_____________________________________________________________________|\n\
    \  Title:    End System to Intermediate System Routing Exchange Protocol\n   \
    \         for use in conjunction with ISO 8473\n  Source:   SC6/WG2\n        \
    \    Project 97.6.41\n  ___________________________________________________________________________\n\
    \ |This document is a progression of SC6/N3862, edited to incorporate member |\n\
    \ |body comments and discussion at the Florence meeting of SC6/WG2. Pursuant |\n\
    \ |to Recommendation 5 of that meeting, comments from member bodies on this  |\n\
    \ |revision text are requested for discussion at the Tokyo meeting of SC6    |\n\
    \ |and WGs.                                                                  |\n\
    \ |__________________________________________________________________________|\n"
- title: Contents
  contents:
  - 'Contents

    '
- title: 1   Introduction                                                           5
  contents:
  - '1   Introduction                                                           5

    '
- title: 2   Scope and Field of Application                                         6
  contents:
  - '2   Scope and Field of Application                                         6

    '
- title: 3   References                                                             7
  contents:
  - '3   References                                                             7

    '
- title: SECTION ONE. GENERAL                                                       9
  contents:
  - 'SECTION ONE. GENERAL                                                       9

    '
- title: 4   Definitions                                                            9
  contents:
  - "4   Definitions                                                            9\n\
    \    4.1   Reference Model Definitions  . . . . . . . . . . . . . . . . .   9\n\
    \    4.2   Network Layer Architecture Definitions   . . . . . . . . . . .   9\n\
    \    4.3   Network Layer Addressing Definitions   . . . . . . . . . . . .   9\n\
    \    4.4   Local Area Network Definitions   . . . . . . . . . . . . . . .  10\n\
    \    4.5   Additional Definitions . . . . . . . . . . . . . . . . . . . .  10\n"
- title: 5   Symbols and Abbreviations                                             10
  contents:
  - "5   Symbols and Abbreviations                                             10\n\
    \    5.1   Data Units   . . . . . . . . . . . . . . . . . . . . . . . . .  10\n\
    \    5.2   Protocol Data Units  . . . . . . . . . . . . . . . . . . . . .  10\n\
    \    5.3   Protocol Data Unit Fields  . . . . . . . . . . . . . . . . . .  10\n\
    \    5.4   Parameters . . . . . . . . . . . . . . . . . . . . . . . . . .  11\n\
    \    5.5   Miscellaneous  . . . . . . . . . . . . . . . . . . . . . . . .  11\n"
- title: 6   Overview of the Protocol                                              11
  contents:
  - "6   Overview of the Protocol                                              11\n\
    \    6.1   Information Provided by the Protocol . . . . . . . . . . . . .  11\n\
    \    6.2   Subsets of the Protocol. . . . . . . . . . . . . . . . . . . .  12\n\
    \    6.3   Addressing   . . . . . . . . . . . . . . . . . . . . . . . . .  12\n\
    \    6.4   Underlying Service Assumed by the Protocol   . . . . . . . . .  12\n\
    \          6.4.1   Subnetwork Addresses . . . . . . . . . . . . . . . . .  12\n\
    \          6.4.2   Subnetwork User Data . . . . . . . . . . . . . . . . .  13\n\
    \    6.5   Service Assumed from Local Environment . . . . . . . . . . . .  13\n\
    \    6.6   Subnetwork Types . . . . . . . . . . . . . . . . . . . . . . .  14\n\
    \          6.6.1   Point-to-Point Subnetworks . . . . . . . . . . . . . .  15\n\
    \          6.6.2   Broadcast Subnetworks  . . . . . . . . . . . . . . . .  15\n\
    \          6.6.3   General Topology Subnetworks . . . . . . . . . . . . .  16\n"
- title: SECTION TWO. SPECIFICATION OF THE PROTOCOL                                18
  contents:
  - 'SECTION TWO. SPECIFICATION OF THE PROTOCOL                                18

    '
- title: 7   Protocol Functions                                                    18
  contents:
  - "7   Protocol Functions                                                    18\n\
    \    7.1   Protocol Timers  . . . . . . . . . . . . . . . . . . . . . . .  18\n\
    \          7.1.1   Configuration Timer  . . . . . . . . . . . . . . . . .  18\n\
    \          7.1.2   Holding Timer  . . . . . . . . . . . . . . . . . . . .  18\n\
    \    7.2   Report Configuration Function  . . . . . . . . . . . . . . . .  18\n\
    \          7.2.1   Report Configuration by End Systems  . . . . . . . . .  19\n\
    \          7.2.2   Report Configuration by Intermediate Systems . . . . .  19\n\
    \    7.3   Record Configuration Function  . . . . . . . . . . . . . . . .  20\n\
    \    7.4   Flush Old Configuration Function   . . . . . . . . . . . . . .  20\n\
    \    7.5   Query Configuration Function . . . . . . . . . . . . . . . . .  20\n\
    \    7.6   Configuration Response Function  . . . . . . . . . . . . . . .  21\n\
    \    7.7   Request Redirect Function. . . . . . . . . . . . . . . . . . .  22\n\
    \    7.8   Record Redirect Function . . . . . . . . . . . . . . . . . . .  23\n\
    \    7.9   Refresh Redirect Function  . . . . . . . . . . . . . . . . . .  23\n\
    \    7.10  Flush Old Redirect Function  . . . . . . . . . . . . . . . . .  24\n\
    \    7.11  PDU Header Error Detection   . . . . . . . . . . . . . . . . .  24\n\
    \    7.12  Classification of Functions  . . . . . . . . . . . . . . . . .  25\n"
- title: 8   Structure and Encoding of PDUs                                        25
  contents:
  - "8   Structure and Encoding of PDUs                                        25\n\
    \    8.1   Structure  . . . . . . . . . . . . . . . . . . . . . . . . . .  26\n\
    \    8.2   Fixed Part . . . . . . . . . . . . . . . . . . . . . . . . . .  26\n\
    \          8.2.1   General  . . . . . . . . . . . . . . . . . . . . . . .  26\n\
    \          8.2.2   Network Layer Protocol Identifier  . . . . . . . . . .  27\n\
    \          8.2.3   Length Indicator . . . . . . . . . . . . . . . . . . .  27\n\
    \          8.2.4   Version/Protocol Identifier Extension  . . . . . . . .  27\n\
    \          8.2.5   Type Code  . . . . . . . . . . . . . . . . . . . . . .  28\n\
    \          8.2.6   Holding Time . . . . . . . . . . . . . . . . . . . . .  28\n\
    \          8.2.7   PDU Checksum . . . . . . . . . . . . . . . . . . . . .  28\n\
    \    8.3   Network Address Part . . . . . . . . . . . . . . . . . . . . .  28\n\
    \          8.3.1   General  . . . . . . . . . . . . . . . . . . . . . . .  28\n\
    \          8.3.2   NPAI (Network Protocol Address Information) En-\n         \
    \         coding . . . . . . . . . . . . . . . . . . . . . . . .  28\n       \
    \   8.3.3   Source Address Parameter for ESH PDU   . . . . . . . .  29\n     \
    \     8.3.4   Network Entity Title Parameter for ISH PDU . . . . . .  29\n   \
    \       8.3.5   Destination Address Parameter for RD PDU . . . . . . .  30\n \
    \   8.4   Subnetwork Address Part  . . . . . . . . . . . . . . . . . . .  30\n\
    \          8.4.1   Subnetwork Address Parameter for RD PDU  . . . . . . .  31\n\
    \    8.5   Options Part . . . . . . . . . . . . . . . . . . . . . . . . .  31\n\
    \          8.5.1   General  . . . . . . . . . . . . . . . . . . . . . . .  31\n\
    \          8.5.2   Security . . . . . . . . . . . . . . . . . . . . . . .  32\n\
    \          8.5.3   Quality of Service Maintenance . . . . . . . . . . . .  33\n\
    \          8.5.4   Priority . . . . . . . . . . . . . . . . . . . . . . .  33\n\
    \    8.6   End System Hello (ESH) PDU . . . . . . . . . . . . . . . . . .  34\n\
    \          8.6.1   Structure  . . . . . . . . . . . . . . . . . . . . . .  34\n\
    \    8.7   Intermediate System Hello (ISH) PDU  . . . . . . . . . . . . .  35\n\
    \          8.7.1   Structure  . . . . . . . . . . . . . . . . . . . . . .  35\n\
    \    8.8   Redirect (RD) PDU. . . . . . . . . . . . . . . . . . . . . . .  36\n\
    \          8.8.1   Structure  . . . . . . . . . . . . . . . . . . . . . .  36\n"
- title: 9   Formal Description                                                    37
  contents:
  - '9   Formal Description                                                    37

    '
- title: 10  Conformance                                                           37
  contents:
  - '10  Conformance                                                           37

    '
- title: ANNEX A. SUPPORTING TECHNICAL MATERIAL                                    38
  contents:
  - "ANNEX A. SUPPORTING TECHNICAL MATERIAL                                    38\n\
    \    A.1   Use of Timers  . . . . . . . . . . . . . . . . . . . . . . . .  38\n\
    \          A.1.1   Example of Holding Time for Route Redirection  . . . .  38\n\
    \          A.1.2   Example of Holding Timer for Configuration Informa-\n     \
    \             tion . . . . . . . . . . . . . . . . . . . . . . . . .  39\n   \
    \ A.2   Refresh and timeout of Redirection information . . . . . . . .  39\n \
    \   A.3   System Initialization Considerations . . . . . . . . . . . . .  40\n\
    \    A.4   Optimizations for Flushing Redirects   . . . . . . . . . . . .  41\n"
- title: List of Tables
  contents:
  - "List of Tables\n    1     Service Primitives for Underlying Service  . . . .\
    \ . . . . . .  12\n    2     Timer Primitives . . . . . . . . . . . . . . . .\
    \ . . . . . . .  14\n    3     Categories of Protocol Functions . . . . . . .\
    \ . . . . . . . .  25\n    4     Valid PDU Types  . . . . . . . . . . . . . .\
    \ . . . . . . . . .  28\n"
- title: List of Figures
  contents:
  - "List of Figures\n    1     PDU Header -- Fixed Part . . . . . . . . . . . . .\
    \ . . . . . .  27\n    2      Address Parameters  . . . . . . . . . . . . . .\
    \ . . . . . . .  29\n    3     ESH PDU - Network Address Part   . . . . . . .\
    \ . . . . . . . .  29\n    4     ISH PDU - Network Address Part . . . . . . .\
    \ . . . . . . . . .  30\n    5     RD PDU - Network Address Part  . . . . . .\
    \ . . . . . . . . . .  30\n    6     ESH PDU - Address Part   . . . . . . . .\
    \ . . . . . . . . . . .  31\n    7     All PDUs - Options Part  . . . . . . .\
    \ . . . . . . . . . . . .  31\n    8     Encoding of Option Parameters  . . .\
    \ . . . . . . . . . . . . .  32\n    9     ESH PDU Format . . . . . . . . . .\
    \ . . . . . . . . . . . . . .  34\n    10    ISH PDU Format . . . . . . . . .\
    \ . . . . . . . . . . . . . . .  35\n    11    RD PDU Format when Redirect is\
    \ to an IS  . . . . . . . . . . .  36\n    12    RD PDU Format when Redirect is\
    \ to an ES  . . . . . . . . . . .  37\n"
- title: 1     Introduction
  contents:
  - "1     Introduction\n   This Protocol is one of a set of International Standards\
    \ produced to\n   facilitate the interconnection of open systems. The set of standards\n\
    \   covers the services and protocols required to achieve such intercon-\n   nection.\n\
    \   This Protocol is positioned with respect to other related standards\n   by\
    \ the layers defined in the Reference Model for Open System Inter-\n   connection\
    \ (ISO 7498) and by the structure defined in the Internal\n   Organization of\
    \ the Network Layer (DIS 8648).  In particular, it is a\n   protocol of the Network\
    \ Layer.  This protocol permits End Systems and\n   Intermediate Systems to exchange\
    \ configuration and routing informa-\n   tion to facilitate the operation of the\
    \ routing and relaying func-\n   tions of the Network Layer.\n   The aspects of\
    \ Network Layer routing that are concerned with communi-\n   cation between end\
    \ systems and intermediate systems on the same sub-\n   network are to a great\
    \ extent separable from the aspects that are\n   concerned with communication\
    \ among the intermediate systems that con-\n   nect multiple subnetworks. This\
    \ protocol addresses only the former\n   aspects. It will be significantly enhanced\
    \ by the cooperative opera-\n   tion of an additional protocol that provides for\
    \ the exchange of\n   routing information among intermediate systems, but is useful\
    \ whether\n   or not such an additional protocol is available.\n      This protocol\
    \ provides solutions for the following practical problems:\n      1.  How do end\
    \ systems discover the existence and reachability of\n          intermediate systems\
    \ that can route NPDUs to destinations on\n          subnetworks other than the\
    \ one(s) to which the end system is\n          directly connected?\n      2. \
    \ How do end systems discover the existence and reachability of\n          other\
    \ end systems on the same subnetwork (when direct\n          examination of the\
    \ destination NSAP address does not provide\n          information about the destination\
    \ subnetwork)?\n      3.  How do intermediate systems discover the existence and\n\
    \          reachability of end systems on each of the subnetworks to\n       \
    \   which they are directly connected?\n      4.  How do end systems decide which\
    \ intermediate system to use\n          to forward NPDUs to a particular destination\
    \ when more than one\n          intermediate system is accessible?\n      The\
    \ protocol assumes that:\n      1.  Routing to a specified subnetwork point of\
    \ attachment address\n          (SNPA) on the same subnetwork is carried out satisfactorily\
    \ by\n          the subnetwork itself.\n      2.  The subnetwork is not, however,\
    \ capable of routing on a global\n          basis using the NSAP address alone\
    \ to achieve communication\n          with a requested destination.\n        \
    \                              Note:\n          Consequently, it is not possible\
    \ to use Application Layer\n          communication to carry out the functions\
    \ of this protocol.\n      The protocol is connectionless, and is designed to:\n\
    \      1.  minimize the amount of a priori state information needed by\n     \
    \     end systems before they can begin to communicate with other\n          end\
    \ systems;\n      2.  minimize the amount of memory needed to store routing\n\
    \          information in end systems; and\n      3.  minimize the computational\
    \ complexity of end system routing\n          algorithms.\n   The protocol is\
    \ also designed to operate in close conjunction with\n   the Protocol for the\
    \ Provision of the Connectionless-mode Network\n   Service (ISO 8473).  Since\
    \ routing styles are usually closely related\n   to communication styles, the\
    \ information that this protocol provides\n   to end systems and intermediate\
    \ systems may or may not be appropriate\n   information for supporting routing\
    \ functions when a Network Layer\n   protocol other than ISO 8473 is used.\n"
- title: 2     Scope and Field of Application
  contents:
  - "2     Scope and Field of Application\n   This International Standard specifies\
    \ a protocol which is used by\n   Network Layer entities operating ISO 8473 in\
    \ End Systems and Inter-\n   mediate Systems (referred to herein as ES and IS\
    \ respectively) to\n   maintain routing information.  The Protocol herein described\
    \ relies\n   upon the provision of a connectionless-mode underlying service.\n\
    \     This Standard specifies:\n     a)  procedures for the transmission of configuration\
    \ and routing\n         information between network entities residing in End Systems\n\
    \         and network entities residing in Intermediate Systems;\n     b)  the\
    \ encoding of the protocol data units used for the transmission\n         of the\
    \ configuration and routing information;\n     c)  procedures for the correct\
    \ interpretation of protocol control\n         information; and\n     d)  the\
    \ functional requirements for implementations claiming\n         conformance to\
    \ this Standard.\n     The procedures are defined in terms of:\n     a)  the interactions\
    \ between End System and Intermediate System\n         network entities through\
    \ the exchange of protocol data units;\n         and\n     b)  the interactions\
    \ between a network entity and an underlying\n         service provider through\
    \ the exchange of subnetwork service\n         primitives.\n   This protocol does\
    \ not specify any protocol elements or algorithms for\n   facilitating routing\
    \ and relaying among Intermediate Systems. Such\n   functions are intentionally\
    \ beyond the scope of this protocol.\n"
- title: 3     References
  contents:
  - "3     References\n   ISO 7498        Information Processing Systems --- Open\
    \ Systems Intercon-\n                   nection - Basic Reference Model\n   DIS\
    \ 7498/DAD1   Information Processing Systems --- Open Systems Intercon-\n    \
    \               nection - Addendum to ISO 7498 Covering Connectionless-\n    \
    \               mode Transmission\n   ISO 8348        Information Processing Systems\
    \ --- Telecommunications and\n                   Information Exchange between\
    \ Systems - Network Service\n                   Definition\n   ISO 8348/AD1  \
    \  Information Processing Systems --- Telecommunications and\n               \
    \    Information Exchange between Systems - Addendum to the\n                \
    \   Network Service Definition Covering Connectionless-mode\n                \
    \   Transmission\n   ISO 8348/AD2    Information Processing Systems --- Telecommunications\
    \ and\n                   Information Exchange between Systems - Addendum to the\n\
    \                   Network Service Definition Covering Network Layer Address-\n\
    \                   ing\n   ISO 8473        Information Processing Systems ---\
    \ Telecommunications and\n                   Information Exchange between Systems\
    \ - Protocol for Pro-\n                   viding the Connectionless Network Service\n\
    \   DIS 8648        Information Processing Systems --- Telecommunications and\n\
    \                   Information Exchange between Systems - Internal Organiza-\n\
    \                   tion of the Network Layer\n   SC21/N965       OSI Management\
    \ Framework --- Seventh Working Draft\n   DIS 8802        Local Area Networks\n\
    \                          SECTION  ONE.  GENERAL\n"
- title: 4     Definitions
  contents:
  - '4     Definitions

    '
- title: 4.1     Reference Model Definitions
  contents:
  - "4.1     Reference Model Definitions\n   This document makes use of the following\
    \ concepts defined in ISO 7498:\n     (a)  Network layer\n     (b)  Network service\
    \ access point\n     (c)  Network service access point address\n     (d)  Network\
    \ entity\n     (e)  Routing\n     (f)  Network protocol\n     (g)  Network relay\n\
    \     (h)  Network protocol data unit\n"
- title: 4.2     Network Layer Architecture Definitions
  contents:
  - "4.2     Network Layer Architecture Definitions\n   This document makes use of\
    \ the following concepts from DIS 8648, Internal\n   Organization of the Network\
    \ Layer:\n     (a)  Subnetwork\n     (b)  End System\n     (c)  Intermediate System\n\
    \     (d)  Subnetwork Service\n     (e)  Subnetwork Access Protocol\n     (f)\
    \  Subnetwork Independent Convergence Protocol\n"
- title: 4.3     Network Layer Addressing Definitions
  contents:
  - "4.3     Network Layer Addressing Definitions\n   This document makes use of the\
    \ following concepts from DIS 8348/DAD2,\n   Addendum to the Network Service Definition\
    \ Covering Network Layer Ad-\n   dressing:\n    (a)  Subnetwork address\n    (b)\
    \  Subnetwork point of attachment\n"
- title: 4.4     Local Area Network Definitions
  contents:
  - "4.4     Local Area Network Definitions\n   This document makes use of the following\
    \ concepts from DIS 8802, Local\n   Area Networks:\n    (a)  multicast address\n\
    \    (b)  broadcast medium\n"
- title: 4.5     Additional Definitions
  contents:
  - "4.5     Additional Definitions\n   For the purposes of this document, the following\
    \ definitions apply:\n   Configuration:   The collection of End and Intermediate\
    \ Systems\n         attached to a single subnetwork, defined in terms of the\n\
    \         system types, NSAP addresses present, Network Entities\n         present,\
    \ and the correspondence between systems and SNPA\n         addresses.\n   Network\
    \ Entity Title:   An identifier for a network entity which\n         has the same\
    \ abstract syntax as an NSAP address, and which\n         can be used to unambiguously\
    \ identify a network entity in\n         an End or Intermediate System.\n"
- title: 5     Symbols and Abbreviations
  contents:
  - '5     Symbols and Abbreviations

    '
- title: 5.1     Data Units
  contents:
  - "5.1     Data Units\n    PDU        Protocol Data Unit\n    SNSDU      Subnetwork\
    \ Service Data Unit\n"
- title: 5.2     Protocol Data Units
  contents:
  - "5.2     Protocol Data Units\n    ESH PDU      End System Hello Protocol Data\
    \ Unit\n    ISH PDU      Intermediate System Hello Protocol Data Unit\n    RD\
    \ PDU       Redirect Protocol Data Unit\n"
- title: 5.3     Protocol Data Unit Fields
  contents:
  - "5.3     Protocol Data Unit Fields\n     NPID        Network Layer Protocol Identifier\n\
    \     LI          Length Indicator\n     V/P         Version/Protocol Identifier\
    \ Extension\n     TP          Type\n     CS          Checksum\n     NETL     \
    \   Network entity Title Length\n     NET         Network entity Title\n     DAL\
    \         Destination Address Length\n     DA          Destination Address\n \
    \    SAL         Source Address Length\n     SA          Source Address\n    \
    \ BSNPAL      SN Address Length of better route to destination\n     BSNPA   \
    \    SN Address of better route to destination\n     HT          Holding timer\n"
- title: 5.4     Parameters
  contents:
  - "5.4     Parameters\n     CT    Configuration Timer\n     RT    Redirect Timer\n"
- title: 5.5     Miscellaneous
  contents:
  - "5.5     Miscellaneous\n     ES        End System\n     IS        Intermediate\
    \ System\n     SN        Subnetwork\n     SNACP     Subnetwork Access Protocol\n\
    \     SNICP     Subnetwork Independent Convergence Protocol\n"
- title: 6     Overview of the Protocol
  contents:
  - '6     Overview of the Protocol

    '
- title: 6.1     Information Provided by the Protocol
  contents:
  - "6.1     Information Provided by the Protocol\n   This Protocol provides two types\
    \ of information to Network entities\n   which support its operation:\n     a)\
    \ Configuration Information, and\n     b) Route Redirection Information\n   Configuration\
    \ Information permits End Systems to discover the ex-\n   istence and reachability\
    \ of Intermediate Systems and permits Inter-\n   mediate Systems to discover the\
    \ existence and reachability of End\n   Systems.  This information allows ESs\
    \ and ISs attached to the same\n   subnetwork to dynamically discover each other's\
    \ existence and availa-\n   bility, thus eliminating the need for manual intervention\
    \ at ESs and\n   ISs to establish the identity of Network entities that can be\
    \ used to\n   route NPDUs.\n   Configuration Information also permits End Systems\
    \ to obtain informa-\n   tion about each other in the absence of an available\
    \ Intermediate\n   System.\n                                    Note:\n     The\
    \ term \"configuration information\" is not intended in the broad\n     sense\
    \ of configuration as used in the context of OSI system\n     management.  Rather,\
    \ only the functions specifically defined herein\n     are intended.\n   Route\
    \ Redirection Information allows Intermediate Systems to inform\n   End Systems\
    \ of (potentially) better paths to use when forwarding\n   NPDUs to a particular\
    \ destination. A better path could either be\n   another IS on the same subnetwork\
    \ as the ES, or the destination ES\n   itself, if it on the same subnetwork as\
    \ the source ES. Allowing the\n   ISs to inform the ESs of routes minimizes the\
    \ complexity of routing\n   decisions in End Systems and improves performance\
    \ because the ESs may\n   make use of the better IS or local subnetwork access\
    \ for subsequent\n   transmissions.\n"
- title: 6.2     Subsets of the Protocol
  contents:
  - "6.2     Subsets of the Protocol\n   A Network Entity may choose to support either\
    \ the Configuration In-\n   formation, the Route Redirection Information, neither,\
    \ or both. If\n   the Configuration Information is supported, it is not required\
    \ that\n   it be employed over all subnetworks to which the Network entity is\n\
    \   attached.\n 6.3   Addressing\n   The Source Address and Destination Address\
    \ parameters referred to in\n   this International Standard are OSI Network Service\
    \ Access Point Ad-\n   dresses. The syntax and semantics of an OSI Network Service\
    \ Access\n   Point Address are described in a separate document, ISO 8348/DAD2,\n\
    \   Addendum to the Network Service Definition covering Network Layer Ad-\n  \
    \ dressing.\n"
- title: 6.4   Underlying Service Assumed by the Protocol
  contents:
  - "6.4   Underlying Service Assumed by the Protocol\n   The underlying service required\
    \ to support this protocol is defined\n   by the primitives in Table 1.\n    \
    \ _________________________________________________________________\n     |  \
    \  SN_UNITDATA          .Request    | SN_Destination_Address, |\n     |      \
    \                   .Indication | SN_Source_Address,      |\n     |          \
    \                           | SN_Quality_of_Service,  |\n     |              \
    \                       | SN_Userdata             |\n     |_____________________________________|_________________________|\n\
    \            Table 1: Service Primitives for Underlying Service\n            \
    \                 Note:\n      These service primitives are used to describe the\
    \ abstract interface\n      which exists between the protocol machine and an underlying\
    \ real\n      subnetwork or a Subnetwork Dependent Convergence Function which\n\
    \      operates over a real subnetwork or real data link to provide the\n    \
    \  required underlying service.\n"
- title: 6.4.1  Subnetwork Addresses
  contents:
  - "6.4.1  Subnetwork Addresses\n   The source and destination addresses specify\
    \ the points of attachment\n   to a public or private subnetwork(s) involved in\
    \ the transmission\n   (known as Subnetwork Points of Attachment, or SNPAs).Subnetwork\
    \ ad-\n   dresses are defined in the Service Definition of each individual sub-\n\
    \   network.  This protocol is designed to take advantage of subnetworks\n   which\
    \ support broadcast, multicast, or other forms of multi-\n   destination addressing\
    \ for n-way transmission. It is assumed that the\n   SN_Destination_Address parameter\
    \ may take on one of the following\n   multi-destination addresses in addition\
    \ to a normal single destina-\n   tion address:\n     All End System Network entities\n\
    \     All Intermediate System Network entities\n   Where a real subnetwork does\
    \ not inherently support broadcast or oth-\n   er forms of transmission to multi-destination\
    \ addresses, a conver-\n   gence function may be used to provide n-way transmission\
    \ to these\n   multi-destination addresses.\n   When the SN_Destination_Address\
    \ on the SN_UNITDATA.Request is a\n   multi-destination address, the SN_Destination_Address\
    \ parameter in\n   the corresponding SN_UNITDATA.Indication shall be the same\
    \ multi-\n   destination address.\n   The syntax and semantics of subnetwork addresses,\
    \ except for the pro-\n   perties described above, are not defined in this Protocol\
    \ Standard.\n"
- title: 6.4.2  Subnetwork User Data
  contents:
  - "6.4.2  Subnetwork User Data\n   The SN_Userdata is an ordered multiple of octets,\
    \ and is transferred\n   transparently between the specified subnetwork points\
    \ of attachment.\n   The underlying service is required to support a service data\
    \ unit\n   size of at least that required to operate the Protocol for Providing\n\
    \   the Connectionless Network Service (ISO 8473).\n"
- title: 6.5   Service Assumed from Local Environment
  contents:
  - "6.5   Service Assumed from Local Environment\n   A timer service must be provided\
    \ to allow the protocol entity to\n   schedule events.\n     There are three primitives\
    \ associated with the S-TIMER service:\n       1.  the S--TIMER Request,\n   \
    \    2.  the S--TIMER Response, and\n       3.  the S--TIMER Cancel.\n   The S--TIMER\
    \ Request primitive indicates to the local environment\n   that it should initiate\
    \ a timer of the specified name and subscript\n   and maintain it for the duration\
    \ specified by the time parameter.\n   The S--TIMER Response primitive is initiated\
    \ by the local environment\n   to indicate that the delay requested by the corresponding\
    \ S-TIMER Re-\n   quest primitive has elapsed.\n   The S--TIMER Cancel primitive\
    \ is an indication to the local environ-\n   ment that the specified timer(s)\
    \ should be canceled.If the subscript\n   parameter is not specified, then all\
    \ timers with the specified name\n   are canceled; otherwise, the timer of the\
    \ given name and subscript is\n   cancelled. If no timers correspond to the parameters\
    \ specified, the\n   local environment takes no action.\n   The parameters of\
    \ the S--TIMER service primitives are specified in\n   Table 2.\n          ___________________________________________\n\
    \         |                          |               |\n         | S--TIMER  \
    \   .Request    | S-Time,       |\n         |                          | S-Name,\
    \       |\n         |                          | S-Subscript   |\n         | \
    \                         |               |\n         |              .Response\
    \   | S-Name,       |\n         |                          | S-Subscript   |\n\
    \         |__________________________|_______________|\n                  Table\
    \ 2: Timer Primitives\n   The time parameter indicates the time duration of the\
    \ specified ti-\n   mer.  An identifiying label is associated with a timer by\
    \ means of\n   the name parameter.The subscript parameter specifies a value to\
    \ dis-\n   tinguish timers with the same name. The name and subscript taken to-\n\
    \   gether constitute a unique reference to the timer.\n   Timers used in association\
    \ with a specific protocol funtion are de-\n   fined under that protocol function.\n\
    \                           Note:\n     This International Standard does not define\
    \ specific values for the\n     timers.Any derivations described in this Standard\
    \ are not mandatory.\n     Timer values should be chosen so that the requested\
    \ Quality of\n     Service can be provided, given the known characteristics of\
    \ the\n     underlying service.\n"
- title: 6.6   Subnetwork Types
  contents:
  - "6.6   Subnetwork Types\n   In order to evaluate the applicability of this protocol\
    \ in particular\n   configurations of End Systems, Intermediate Systems and subnetworks,\n\
    \   three generic types of subnetwork are identified. These are:\n     1.  the\
    \ point-to-point subnetwork,\n     2.  the broadcast subnetwork, and\n     3.\
    \  the general topology subnetwork\n    These subnetwork types are discussed in\
    \ the following clauses.\n"
- title: 6.6.1  Point-to-Point Subnetworks
  contents:
  - "6.6.1  Point-to-Point Subnetworks\n   A point-to-point subnetwork supports exactly\
    \ two systems. The two\n   systems may be either two End Systems, or an End System\
    \ and a single\n   Intermediate System. A single point-to-point data link connecting\
    \ two\n   Network Entities is an example of a point-to-point subnetwork.\n   Configuration\
    \ Information on a point-to-point Subnetwork.On a point-\n   to-point subnetwork\
    \ the Configuration Information of this protocol\n   informs the communicating\
    \ Network entities of the following:\n     1.  Whether the topology consists only\
    \ of two End Systems, or\n     2.  One of the two systems is a Intermediate System.\n\
    \                           Note:\n     On a point-to-point subnetwork, if both\
    \ systems are Intermediate Systems,\n     then this protocol is inapplicable to\
    \ the situation, since a IS-to-IS\n     protocol should be employed instead. However,\
    \ there is no reason why\n     the configuration information could not be employed\
    \ in a IS-to-IS\n     environment to ascertain the topology and initiate operation\
    \ of a\n     IS-to-IS protocol.\n   The Intermediate System is informed of the\
    \ NSAP address(es) supported\n   by the Network entity in the End System. This\
    \ permits reachability\n   information and routing metrics concerning these NSAPs\
    \ to be dissem-\n   inated to other Intermediate Systems for the purpose of calculating\n\
    \   routes to/from this End System.\n   Route Redirection Information on a point-to-point\
    \ Subnetwork.  Route\n   Redirection Information is not employed on point-to-point\
    \ subnetworks\n   because there are never any alternate routes.\n"
- title: 6.6.2  Broadcast Subnetworks
  contents:
  - "6.6.2  Broadcast Subnetworks\n   A Broadcast subnetwork supports an arbitrary\
    \ number of End Systems\n   and Intermediate Systems, and additionally is capable\
    \ of transmitting\n   a single SNPDU to all or a subset of these systems in response\
    \ to a\n   single SN_UNITDATA.Request.An example of a broadcast subnetwork is\
    \ a\n   LAN (local area network) conforming to DIS8802/2, type 1 operation.\n\
    \   Configuration Information on a broadcast Subnetwork.On a broadcast\n   subnetwork\
    \ the Configuration Information of this protocol is employed\n   to inform the\
    \ communicating Network entities of the following:\n     1.  End Systems are informed\
    \ of the reachability, Network entity Title,\n         and SNPA address(es) of\
    \ each active Intermediate System on the\n         subnetwork.\n     2.  Intermediate\
    \ Systems are informed of the NSAP addresses supported\n         by each End System\
    \ and the Subnetwork address of the ES. Once the\n         Intermediate System\
    \ obtains this information, reachability\n         information and routing metrics\
    \ concerning these NSAPs may be\n         disseminated to other ISs for the purpose\
    \ of calculating routes\n         to/from each ES on the subnetwork.\n     3.\
    \  In the absence of an available Intermediate System, End Systems may\n     \
    \    query over a broadcast subnetwork to discover whether a particular\n    \
    \     NSAP is reachable on the subnetwork, and if so, what SNPA address\n    \
    \     to use to reach that NSAP.\n   Route Redirection Information on broadcast\
    \ Subnetworks.Route Redirec-\n   tion Information may be employed on broadcast\
    \ subnetworks to permit\n   Intermediate Systems to inform End Systems of superior\
    \ routes to a\n   destination NSAP. The superior route might be another IS on\
    \ the same\n   subnetwork as the ES, or it might be the destination ES itself,\
    \ if it\n   is directly reachable on the same subnetwork as the source ES.\n"
- title: 6.6.3  General Topology Subnetworks
  contents:
  - "6.6.3  General Topology Subnetworks\n   A general topology subnetwork supports\
    \ an arbitrary number of End\n   Systems and Intermediate Systems, but does not\
    \ support a convenient\n   multidestination connectionless transmission facility\
    \ as does a\n   broadcast subnetwork.An example of a general topology subnetwork\
    \ is a\n   subnetwork employing X.25 or ISO 8208.\n                          \
    \       Note:\n     The crucial distinguishing characteristic between the broadcast\n\
    \     subnetwork and the general topology subnetwork is the \"cost\" of an\n \
    \    n-way transmission to a potentially large subset of the systems on\n    \
    \ the subnetwork. On a general topology subnetwork, the cost is assumed\n    \
    \ to be close to the cost of sending an individual PDU to each SNPA on\n     the\
    \ subnetwork.  Conversely, on a broadcast subnetwork the cost is\n     assumed\
    \ to be close to the cost of sending a single PDU to one SNPA\n     on the subnetwork.\
    \  Intermediate situations between these extremes\n     are of course possible.\
    \ In such cases it would be possible to treat the\n     subnetwork as either in\
    \ the broadcast or general topology categories.\n   Configuration Information\
    \ on a general topology Subnetwork.  On a\n   general topology subnetwork the\
    \ Configuration Information is general-\n   ly not employed because this protocol\
    \ can be very costly in the util-\n   ization (and charging for) subnetwork resources.\n\
    \   Route Redirection Information on a general topology Subnetwork.\n   Route\
    \ Redirection Information may be employed on general topology\n   subnetworks\
    \ to permit Intermediate Systems to inform End Systems of\n   superior routes\
    \ to a destination NSAP. The superior route might be\n   another IS on the same\
    \ subnetwork as the ES, or it might be the des-\n   tination ES itself, if it\
    \ is directly reachable on the same subnet-\n   work as the source ES.\n     \
    \           SECTION  TWO. SPECIFICATION OF THE PROTOCOL\n"
- title: 7     Protocol Functions
  contents:
  - "7     Protocol Functions\n   This section describes the functions performed as\
    \ part of the Proto-\n   col.  Not all of the functions must be performed by every\
    \ implementa-\n   tion.  Clause 7.12 specifies which functions may be omitted\
    \ and the\n   correct behavior where requested functions are not implemented.\n"
- title: 7.1     Protocol Timers
  contents:
  - "7.1     Protocol Timers\n   Many of the protocol functions are timer based. This\
    \ means that they\n   are executed upon expiration of a timer rather than upon\
    \ receipt of a\n   PDU or invocation of a service primitive. The two major types\
    \ of ti-\n   mers employed by the protocol are the Configuration Timer (CT) and\n\
    \   the Holding Timer (HT).\n"
- title: 7.1.1    Configuration Timer
  contents:
  - "7.1.1    Configuration Timer\n   The Configuration Timer is a local timer (i.e.\
    \ maintained indepen-\n   dently by each system) which performs the Report Configuration\
    \ func-\n   tion (see section 7.2).  The timer determines how often a system re-\n\
    \   ports its availability to the other systems on the same subnetwork.\n   The\
    \ shorter the Configuration Timer, the more quickly other systems\n   on the subnetwork\
    \ will become aware when the reporting system becomes\n   available or unavailable.\
    \ The increased responsiveness must be traded\n   off against increased use of\
    \ resources in the subnetwork and in the\n   recipient systems.\n"
- title: 7.1.2    Holding Timer
  contents:
  - "7.1.2    Holding Timer\n   The Holding Timer applies to both Configuration Information\
    \ and Route\n   Redirection Information. The value of the Holding Timer is set\
    \ by the\n   source of the information and transmitted in the appropriate PDU.\
    \ The\n   recipient of the information is expected to retain the information no\n\
    \   longer than the Holding Timer. Old Configuration or Route Redirection\n  \
    \ information must be discarded after the Holding Timer expires to en-\n   sure\
    \ the correct operation of the protocol.\n   Further discussion of the rationale\
    \ for these timers and guidelines\n   for their use may be found in annex 10.\n"
- title: 7.2   Report Configuration Function
  contents:
  - "7.2   Report Configuration Function\n   The Report Configuration Function is\
    \ used by End Systems and Inter-\n   mediate Systems to inform each other of their\
    \ reachability and\n   current subnetwork address. This function is invoked every\
    \ time the\n   local Configuration Timer (CT) expires in an ES or IS. It is also\
    \ in-\n   voked upon receipt of a Query Configuration PDU from another End Sys-\n\
    \   tem.\n   7.2.1  Report Configuration by End Systems\n   An End System constructs\
    \ and transmits one ESH PDU (ESH stands for\n   \"End System Hello\") for each\
    \ NSAP it serves, and issues one\n   SN_UNITDATA.- Request with the ESH PDU as\
    \ the SNSDU on each subnet-\n   work to which it is attached.\n              \
    \                     Note:\n     The necessity to transmit a separate ESH PDU\
    \ for each NSAP served by\n     the Network entity arises from the lack of a formalized\
    \ relationship\n     between Network Entity Titles and NSAP addresses. If this\
    \ relationship\n     could be constrained to require that all NSAP addresses be\
    \ assigned as\n     leaf subdomains of a domain represented by the local Network\
    \ entity's\n     Network entity Title, then a single ESH PDU could be transmitted\n\
    \     containing the ESs Network entity Title.The Network entity Title\n     would\
    \ then imply which NSAPs might be present at that End system.\n   The Holding\
    \ Timer (HT) field is set to approximately twice the ESs\n   Configuration Timer\
    \ (CT) parameter. This variable is set to a value\n   large enough so that even\
    \ if every other ESH PDU is discarded (due to\n   lack of resources), or otherwise\
    \ lost in the subnetwork, the confi-\n   guration information will still be maintained.\
    \ The value must be set\n   small enough so that Intermediate Systems can respond\
    \ in a timely\n   fashion to End Systems becoming available or unavailable.\n\
    \   The SN_Destination_Address parameter is set to the group address that\n  \
    \ indicates \"All Intermediate System Network Entities\". This ensures\n   that\
    \ a single transmission on a broadcast subnetwork will reach all\n   of the active\
    \ Intermediate Systems.\n                                   Note:\n     The actual\
    \ value of the SN_Destination_Address used to mean \"All\n     Intermediate System\
    \ Network Entities\" is subnetwork dependent and will\n     most likely vary from\
    \ subnetwork to subnetwork. It would of course be\n     desirable that on widely-used\
    \ subnetwork types (such as those based\n     on DIS 8802) that this value and\
    \ the value of the \"All End System\n     Network Entities\" group address, be\
    \ standardized.\n"
- title: 7.2.2  Report Configuration by Intermediate Systems
  contents:
  - "7.2.2  Report Configuration by Intermediate Systems\n   An Intermediate System\
    \ constructs a single ISH PDU (ISH stands for\n   \"Intermediate System Hello\"\
    ) containing the ISs Network Entity Title\n   and issues one SN_UNITDATA.Request\
    \ with the ISH PDU as the SNSDU on\n   each subnetwork to which it is attached.\n\
    \   The Holding Timer (HT) field is set to approximately twice the Inter-\n  \
    \ mediate System's Configuration Timer (CT) parameter. This variable is\n   set\
    \ to a value large enough so that even if every other ISH PDU is\n   discarded\
    \ (due to lack of resources), or otherwise lost in the sub-\n   network, the configuration\
    \ information will still be maintained.The\n   value must be set small enough\
    \ so that End Systems will quickly cease\n   to use ISs that have failed, thus\
    \ preventing \"black holes\" in the\n   Network.\n   The SN_Destination_Address\
    \ parameter is set to the group address that\n   indicates \"All End System Network\
    \ Entities\".This ensures that a sin-\n   gle transmission on a broadcast subnetwork\
    \ will reach all of the ac-\n   tive End Systems.\n"
- title: 7.3   Record Configuration Function
  contents:
  - "7.3   Record Configuration Function\n   The Record Configuration function receives\
    \ ESH or ISH PDUs, extracts\n   the configuration information, and adds or replaces\
    \ the corresponding\n   configuration information in the local Network entity's\
    \ Routing In-\n   formation base.  If insufficient space is available to store\
    \ new con-\n   figuration information, the PDU is discarded. No Error Report is\
    \ gen-\n   erated.\n                                     Note:\n     The protocol\
    \ is described such that End Systems receive and record\n     only ISH PDUs and\
    \ Intermediate Systems receive and process only\n     ESH PDUs. If an ES so desires\
    \ however, it may decide to process ESH\n     PDUs as well (on a broadcast network\
    \ this is easily done by enabling\n     the appropriate group address). There\
    \ is potentially some performance\n     improvement to be gained by doing this,\
    \ at the expense of extra memory,\n     and possibly extra processing cycles in\
    \ the End System.The\n     ES, by recording other ESs' Configuration information,\
    \ may be able\n     to route NPDUs directly to ESs on the local subnetwork without\
    \ first\n     being redirected by a Intermediate System.\n     Similarly, Intermediate\
    \ Systems may choose to receive the ISH PDUs\n     of other ISs, allowing this\
    \ protocol to be used as the initialization and\n     topology maintenance portion\
    \ of a full IS-to-IS routing protocol.\n     Both of these possibilities are for\
    \ further study.\n"
- title: 7.4   Flush Old Configuration Function
  contents:
  - "7.4   Flush Old Configuration Function\n   The Flush Old Configuration Function\
    \ is executed to remove Configura-\n   tion entries in the routing information\
    \ base whose Holding Timer has\n   expired.  When the Holding Time for an ES or\
    \ IS expires, this func-\n   tion removes the corresponding entry from the routing\
    \ information\n   base of the local Network Entity.\n"
- title: 7.5   Query Configuration Function
  contents:
  - "7.5   Query Configuration Function\n   The Query Configuration Function is performed\
    \ under the following\n   circumstances:\n     1. The End System is attached to\
    \ a broadcast subnetwork,\n     2. There is no Intermediate System currently reachable\
    \ on the\n        subnetwork (i.e. no ISH PDUs have been received since the last\n\
    \        information was flushed by the Flush Old Configuration Function),\n \
    \    3. The Network Layer's Route PDU Function needs to obtain the SNPA\n    \
    \    address to which to forward a PDU destined for a certain NSAP, and\n    \
    \ 4. The SNPA address cannot be obtained either by a local transformation\n  \
    \      or a local table lookup.\n                                     Note:\n\
    \     Despite appearances, this is actually a quite common case, since it\n  \
    \   is likely that there will be numerous isolated Local Area Networks\n     without\
    \ Intermediate Systems to rely upon for obtaining routing\n     information (e.g.via\
    \ the Request Redirect Function of this protocol).\n     Further, if the Intermediate\
    \ System(s) are temporarily unavailable,\n     without this capability communication\
    \ on the local subnetwork would\n     suffer unless manually-entered tables were\
    \ present in each End System\n     or all NSAPs of the subnetwork had the subnetwork\
    \ SNPA address\n     embedded in them.\n   The End System, when needing to route\
    \ an NPDU to a destination NSAP\n   whose SNPA is unknown issues an SN_UNITDATA.Request\
    \ with the NPDU as\n   the SN_Userdata.The SN_Destination_Address parameter is\
    \ set to the\n   group address that indicates \"All End System Network Entities\"\
    .\n   Subsequently an ESH PDU may be received containing the NSAP address\n  \
    \ along with the corresponding SNPA address (see clause 7.6). In such a\n   case\
    \ the End System executes the Record Configuration function for\n   the NSAP,\
    \ and therefore will be able to route subsequent PDUs to that\n   destination\
    \ using the specified SNPA. If no ESH PDU is received, the\n   End System may\
    \ declare the destination NSAP is not reachable. The\n   length of time to wait\
    \ for a response before indicating a failure or\n   the possibility of repeating\
    \ the process some number of times before\n   returning a failure are local matters\
    \ and are not specified in this\n   standard.\n"
- title: 7.6   Configuration Response Function
  contents:
  - "7.6   Configuration Response Function\n   The Configuration Response function\
    \ is performed when an End System\n   attached to a broadcast subnetwork receives\
    \ an NPDU addressed to one\n   of its NSAPs, with the SN_Destination_Address from\
    \ the\n   SN_UNITDATA.Indication set to the group address \"All End System\n \
    \  Netowrk Entities\". This occurs as a result of another ES having per-\n   formed\
    \ the Query Configuration function described in clause 7.5.\n   The End System\
    \ constructs an ESH PDU identical in content to the ESH\n   PDU constructed by\
    \ the Report Configuration function (see clause\n   7.2.1) for the NSAP to which\
    \ the received NPDU was addressed.It then\n   transmits the ESH PDU to the source\
    \ of the original NPDU by issuing\n   an SN_UNITDATA.Request with the SN_Destination_Address\
    \ set to the\n   value of the SN_Source_Address received in the SN_UNITDATA.Indication\n\
    \   with the original NPDU.\n"
- title: 7.7     Request Redirect Function
  contents:
  - "7.7     Request Redirect Function\n   The Request Redirect Function is present\
    \ only in Intermediate Systems\n   and is closely coupled with the Routing and\
    \ Relaying Functions of In-\n   termediate Systems. The Request Redirect Function\
    \ is coupled with the\n   \"Route PDU Function\" described in clause 6.5 of ISO\
    \ 8473. The Request\n   Redirect Function is performed after the Route PDU function\
    \ has cal-\n   culated the next hop of the Data PDU's path.\n   When an NPDU is\
    \ to be forwarded by a Intermediate System, the Request\n   Redirect Function\
    \ first examines the SN_Source_Address associated\n   with the SN_UNITDATA.Indication\
    \ which received the SNSDU (containing\n   this NPDU). If the SN_Source_Address\
    \ is not from an End System on the\n   local subnetwork (determined by examining\
    \ the Configuration informa-\n   tion obtained through the Record Configuration\
    \ Function), then this\n   function does no further processing of the NPDU.\n\
    \   If the NPDU was received directly from an ES the output of the ISs\n   Routing\
    \ and Relaying function for this NPDU is examined. This output\n   will contain,\
    \ among other things, the following pieces of informa-\n   tion:\n     1. a local\
    \ identifier for the subnetwork over which to forward the NPDU,\n        plus\
    \ either\n     2. the Network entity title and subnetwork address of the IS to\
    \ which to\n        forward the NPDU, or\n     3. the subnetwork address of the\
    \ destination End System.\n   The Request Redirect function must now determine\
    \ if the source ES\n   could have sent the NPDU directly to the Network entity\
    \ the Inter-\n   mediate System is about to forward the PDU to. If any of the\
    \ follow-\n   ing conditions hold, the source ESshould be informed of the \"better\"\
    \n   path (by sending an RD PDU to the originating ES):\n     1. The next hop\
    \ is to the destination system, and the destination is\n        directly reachable\
    \ (at subnetwork address BSNPA) on the source ESs\n        subnetwork, or\n  \
    \   2. The next hop is to a Intermediate System which is connected to the\n  \
    \      same subnetwork as the ES.\n   If the better path exists, the IS first\
    \ completes normal processing\n   of the received NPDU and forwards it.It then\
    \ constructs a Redirect\n   PDU (RD PDU) containing the Destination Address of\
    \ the original NPDU,\n   the subnetwork address of the better next hop (BSNPA),\
    \ the Network\n   Entity Title of the IS to which the ES is being redirected (unless\n\
    \   the redirect is to the destination ES), a Holding Time (HT), QoS\n   Maintenance,\
    \ Priority, and Security options that were present in the\n   Data NPDU (these\
    \ are simply copied from the Data PDU). The HT is set\n   to the value of the\
    \ local Redirect Timer (RT). See Annex A for a dis-\n   cussion of how to choose\
    \ the value of RT.  If there are insufficient\n   resources to both forward the\
    \ original NPDU and to generate and send\n   an RD PDU, the original NPDU must\
    \ be given preference.  The Inter-\n   mediate System (assuming it has sufficient\
    \ resources) then sends the\n   RD PDU to the source End System using the SN_Source_Address\
    \ of the\n   received NPDU as the SN_Destination_Address for the SN_UNITDATA.-\n\
    \   Reqeust.\n"
- title: 7.8   Record Redirect Function
  contents:
  - "7.8   Record Redirect Function\n   The Record Redirect Function is present only\
    \ in End Systems. This\n   function is invoked whenever an RD PDU is received.\
    \ It extracts the\n   redirect information and adds or replaces the corresponding\
    \ redirec-\n   tion information in the local Network entity's Routing Information\n\
    \   base. The essential information is the redirection mapping from a\n   Destination\
    \ Address to a subnetwork address, along with the Priority,\n   Security, and\
    \ QoS Maintenance options and the Holding Time for which\n   this mapping is to\
    \ be considered valid. If the Redirect was to anoth-\n   er Intermediate System,\
    \ the Network Entity Title of the IS is record-\n   ed as well.\n            \
    \                        Note:\n     If insufficient memory is available to store\
    \ new redirection information,\n     the RD PDU may be safely discarded since\
    \ the original Intermediate\n     System will continue to forward PDUs on behalf\
    \ of this Network entity\n     anyway.\n"
- title: 7.9   Refresh Redirect Function
  contents:
  - "7.9   Refresh Redirect Function\n   The Refresh Redirect Function is present\
    \ only in End Systems. This\n   function is invoked whenever an NPDU is received\
    \ by a destination ES.\n   It is closely coupled with the function that processes\
    \ received NPDUs\n   at a destination Network Entity.This is the \"PDU Decomposition\"\
    \ func-\n   tion in ISO 8473.  The purpose of this function is to increase the\n\
    \   longevity of a redirection without allowing an incorrect route to\n   persist\
    \ indefinitely.  The Source Address (SA), Priority, Security,\n   and QoS options\
    \ are extracted and compared to any Destination Address\n   and QoS parameters\
    \ being maintained in the Routing Information base\n   (such information would\
    \ have been stored by the Record Redirect Func-\n   tion). If a corresponding\
    \ entry is found, the previous hop of the PDU\n   is obtained from the SN_Source_Address\
    \ parameter of the\n   SN_Unitdata.Indication primitive by which it was received.\
    \  If this\n   address matches the next hop address stored with the redirection\
    \ in-\n   formation, the remaining holding time for the redirection is reset to\n\
    \   the original holding timer that was obtained from the RD PDU.\n          \
    \                             Note:\n     The purpose of this function is to avoid\
    \ timing out redirection entries\n     when the Network entity is receiving return\
    \ traffic from the destination\n     via the same path over which it is currently\
    \ sending traffic.This is\n     particularly useful when the destination system\
    \ is on the same subnetwork\n     as the source, since after one redirect no IS\
    \ need be involved in\n     the ES-to-ES traffic.\n     This function must operate\
    \ in a very conservative fashion however,\n     to prevent the formation of black\
    \ holes. The remaining holding time\n     should be refreshed only under the exact\
    \ conditions specified above.\n     For a discussion of the issues surrounding\
    \ the refresh of redirection\n     information, see Annex 10.\n"
- title: 7.10   Flush Old Redirect Function
  contents:
  - "7.10   Flush Old Redirect Function\n   The Flush Old Redirect Function is executed\
    \ to remove Configuration\n   entries in the routing information base whose Holding\
    \ Timer has ex-\n   pired.  When the Holding Time for an ES or IS expires, this\
    \ function\n   removes the corresponding entry from the routing information base\
    \ of\n   the local Network Entity.\n"
- title: 7.11   PDU Header Error Detection
  contents:
  - "7.11   PDU Header Error Detection\n   The PDU Header Error Detection function\
    \ protects against failure of\n   Intermediate or End System Network entities\
    \ due to the processing of\n   erroneous information in the PDU header.The function\
    \ is realized by a\n   checksum computed on the entire PDU header. The checksum\
    \ is verified\n   at each point at which the PDU is processed. If the checksum\
    \ calcula-\n   tion fails, the PDU must be discarded.\n   The use of the Header\
    \ Error Detection function is optional and is\n   selected by the originating\
    \ Network Entity. If the function is not\n   used, the checksum field of the PDU\
    \ header is set to zero.\n   If the function is selected by the originating Network\
    \ Entity, the\n   value of the checksum field causes the following formulf to\
    \ be satis-\n   fied:\n        (The Sum from i=1 to L of a(i)) (mod   255) = 0\n\
    \        (The Sum from i=1 to L of  (L - i + 1) * a(i))  (mod   255) = 0\n   where\
    \ L = the number of octets in the PDU header, and a(i) = the value of\n   the\
    \ octet at position i. The first octet in the PDU header is considered to\n  \
    \ occupy position i = 0.\n   When the function is in use, neither octet of the\
    \ checksum field may be\n   set to zero.\n"
- title: 7.12   Classification of Functions
  contents:
  - "7.12   Classification of Functions\n   Implementations do not have to support\
    \ all of the functions described\n   in clause 7. Functions are divided into four\
    \ categories:\n   Type A:   These functions must be supported in all cases.\n\
    \   Type B:   These functions must be supported by Systems which implement\n \
    \            the Configuration Information.\n   Type C:   These functions must\
    \ be supported by Systems which implement\n             the Redirect Information.\n\
    \   Type D:   These functions are optional.\n   If a PDU is received which invokes\
    \ an optional function that is not\n   implemented, that PDU is discarded.\n \
    \  Table 3 shows how the functions are divided into these four\n   categories,\
    \ and to which type of system (ES, IS, or both) they apply.\n    ______________________________________________________________\n\
    \    | Function                      |   Category |   System Type |\n    |_______________________________|____________|_______________|\n\
    \    | Report Configuration          |      B     |      ES,IS    |\n    | Record\
    \ Configuration          |      B     |      ES,IS    |\n    | Configuration Response\
    \        |      A     |       ES      |\n    | Flush Old Configuration       |\
    \      B     |      ES,IS    |\n    | Request Redirect              |      C \
    \    |       IS      |\n    | Query Configuration           |      B     |   \
    \    ES      |\n    | Record Redirect               |      C     |       ES  \
    \    |\n    | Refresh Redirect              |      D     |       ES      |\n \
    \   | Flush Old Redirect            |      C     |       ES      |\n    | PDU\
    \ Header Error Detection    |      A     |      ES,IS    |\n    |_______________________________|____________|_______________|\n\
    \            Table 3: Categories of Protocol Functions\n"
- title: 8   Structure and Encoding of PDUs
  contents:
  - "8   Structure and Encoding of PDUs\n                              Note:\n   \
    \  The encoding of the PDUs for this protocol is compatible with that\n     used\
    \ in ISO 8473.\n                       Temporary Note:\n     The method employed\
    \ for describing the encoding of PDUs is provisional.\n     Member bodies are\
    \ requested to comment on whether another\n     method (such as ASN.1 with an\
    \ appropriate concrete syntax) would\n     be preferable.\n"
- title: 8.1   Structure
  contents:
  - "8.1   Structure\n   All Protocol Data Units shall contain an integral number\
    \ of\n   octets.The octets in a PDU are numbered starting from one (1) and in-\n\
    \   creasing in the order in which they are put into an SNSDU. The bits\n   in\
    \ an octet are numbered from one (1) to eight (8), where bit one (1)\n   is the\
    \ low-order bit.  When consecutive octets are used to represent\n   a binary number,\
    \ the lower octet number has the most significant\n   value.\n   Any subnetwork\
    \ supporting this protocol is required to state in its\n   specification the way\
    \ octets are transferred, using the terms \"most\n   significant bit\" and \"\
    least significant bit\". The PDUs of this proto-\n   col are defined using the\
    \ terms \"most significant bit\" and \"least\n   significant bit\".\n        \
    \                     Note:\n     When the encoding of a PDU is represented using\
    \ a diagram in this\n     section, the following representation is used:\n   \
    \  a) octets are shown with the lowest numbered octet to the left,\n        higher\
    \ number octets being further to the right;\n     b) within an octet, bits are\
    \ shown with bit eight (8) to the left and\n        bit one (1) to the right.\n\
    \    PDUs shall contain, in the following order:\n     1.  the fixed part;\n \
    \    2.  the Network address part;\n     3.  the Subnetwork address part, if present;\
    \ and\n     4.  the Options part, if present.\n"
- title: 8.2   Fixed Part
  contents:
  - '8.2   Fixed Part

    '
- title: 8.2.1  General
  contents:
  - "8.2.1  General\n   The fixed part contains frequently occurring parameters including\
    \ the\n   type code (ESH, ISH, or RD) of the protocol data unit.The length and\n\
    \   the structure of the fixed part are defined by the PDU code.\n   The fixed\
    \ part has the following format:\n                                           \
    \    Octet\n      ________________________________________\n      |    Network\
    \ Layer Protocol Identifier |    1\n      |______________________________________|\n\
    \      |           Length Indicator           |    2\n      |______________________________________|\n\
    \      |      Version/Protocol Id Extension   |    3\n      |______________________________________|\n\
    \      |        reserved (must be zero)       |    4\n      |______________________________________|\n\
    \      | 0 |0 |0 |           Type             |    5\n      |___|__|__|____________________________|\n\
    \      |           Holding Time               |   6,7\n      |______________________________________|\n\
    \      |             Checksum                 |   8,9\n      |______________________________________|\n\
    \         Figure 1: PDU Header -- Fixed Part\n"
- title: 8.2.2  Network Layer Protocol Identifier
  contents:
  - "8.2.2  Network Layer Protocol Identifier\n   The value of this field shall be\
    \ 1000 0010.\n                     Temporary Note:\n     The value 1000 0010 is\
    \ provisional, pending resolution of the NLPID\n     issue in SC6.\n   This field\
    \ identifies this Network Layer Protocol as ISO SC6/N4053,\n   End System to Intermediate\
    \ System Routing Exchange Protocol for use in\n   conjunction with ISO 8473.\n"
- title: 8.2.3  Length Indicator
  contents:
  - "8.2.3  Length Indicator\n   The length is indicated by a binary number, with\
    \ a maximum value of\n   254 (1111 1110).The length indicated is the length of\
    \ the entire PDU\n   (which consists entirely of header, since this protocol does\
    \ not car-\n   ry user data) in octets, as described in clause 8.1. The value\
    \ 255\n   (1111 1111) is reserved for possible future extensions.\n"
- title: 8.2.4  Version/Protocol Identifier Extension
  contents:
  - "8.2.4  Version/Protocol Identifier Extension\n   The value of this field is binary\
    \ 0000 0001. This identifies a stan-\n   dard version of ISO xxxx, End System\
    \ to Intermediate System Routing\n   Exchange Protocol for use in conjunction\
    \ with ISO 8473.\n"
- title: 8.2.5  Type Code
  contents:
  - "8.2.5  Type Code\n   The Type code field identifies the type of the protocol\
    \ data unit.\n   Allowed values are given in table 4.\n   _____________________________________________________\n\
    \   |            | Bits               5   4   3   2   1 |\n   |____________|______________________________________|\n\
    \   |____________|______________________________________|\n   |ESH PDU     | \
    \                   0   0   0   1   0 |\n   |____________|______________________________________|\n\
    \   |ISH PDU     |                    0   0   1   0   0 |\n   |____________|______________________________________|\n\
    \   |RD PDU      |                    0   0   1   1   0 |\n   |____________|______________________________________|\n\
    \                   Table 4: Valid PDU Types\n   All other PDU type values are\
    \ reserved.\n"
- title: 8.2.6  Holding Time
  contents:
  - "8.2.6  Holding Time\n   The Holding Time field specifies for how long the receiving\
    \ Network\n   entity should retain the configuration/routing information contained\n\
    \   in this PDU.  The receiving Network entity should discard any infor-\n   mation\
    \ obtained from this PDU from its internal state when the hold-\n   ing time expires.\
    \  The Holding time field is encoded as an integral\n   number of micro-fortnights.\n"
- title: 8.2.7  PDU Checksum
  contents:
  - "8.2.7  PDU Checksum\n   The checksum is computed on the entire PDU header. A\
    \ checksum value\n   of zero is reserved to indicate that the checksum is to be\
    \ ignored.\n   The operation of the PDU Header Error Detection function (Clause\n\
    \   7.11) ensures that the value zero does not represent a valid check-\n   sum.\
    \ A non-zero value indicates that the checksum must be processed.\n   If the checksum\
    \ calculation fails, the PDU must be discarded.\n"
- title: 8.3   Network Address Part
  contents:
  - '8.3   Network Address Part

    '
- title: 8.3.1  General
  contents:
  - "8.3.1  General\n   Address parameters are distinguished by their location. The\
    \ different\n   PDU types carry different address parameters however.The ESH PDU\
    \ car-\n   ries a Source NSAP address (SA); the ISH PDU carries a Intermediate\n\
    \   System Network entity Title (NET); and the RD PDU carries a Destina-\n   tion\
    \ NSAP address (DA), and possibly a Network Entity Title (NET).\n"
- title: 8.3.2  NPAI (Network Protocol Address Information) Encoding
  contents:
  - "8.3.2  NPAI (Network Protocol Address Information) Encoding\n   The Destination\
    \ and Source Addresses are Network Service Access Point\n   addresses as defined\
    \ in ISO 8348/AD2, Addendum to the Network Service\n   Definition Covering Network\
    \ Layer addressing.The Network Entity Title\n   address parameter is defined in\
    \ clause 4.5. The Destination Address,\n   Source Address, and Network Entity\
    \ Title are encoded as NPAI using\n   the binary syntax defined in clause 8.3.1\
    \ of ISO 8348/AD2.\n   The address information is of variable length. Each address\
    \ parameter\n   is encoded as follows:\n         _______________________________________________\n\
    \         | Octet  | Address parameter Length Indicator |\n         |   n    |\
    \                (e.g., 'm')         |\n         |________|____________________________________|\n\
    \         | Octets |                                    |\n         | n + 1  |\
    \       Address Parameter Value      |\n         |  thru  |                  \
    \                  |\n         | n + m  |                                    |\n\
    \         |________|____________________________________|\n                  \
    \     Figure 2:  Address Parameters\n"
- title: 8.3.3  Source Address Parameter for ESH PDU
  contents:
  - "8.3.3  Source Address Parameter for ESH PDU\n   The Source Address is the NSAP\
    \ address of an NSAP served by the Net-\n   work entity sending the ESH PDU. It\
    \ is encoded in the ESH PDU as fol-\n   lows:\n                              \
    \                     Octet\n         ________________________________________\n\
    \         |Source Address Length Indicator (SAL) |   10\n         |______________________________________|\n\
    \         |                                      |   11\n         :          \
    \ Source Address (SA)        :\n         |                                   \
    \   |  m - 1\n         |______________________________________|\n          Figure\
    \ 3: ESH PDU - Network Address Part\n"
- title: 8.3.4  Network Entity Title Parameter for ISH PDU
  contents:
  - "8.3.4  Network Entity Title Parameter for ISH PDU\n   The Network entity Title\
    \ parameter is the Network Entity Title of the\n   Intermediate System sending\
    \ the ISH PDU. It is encoded in the ISH PDU\n   as follows:\n                \
    \                                   Octet\n   _______________________________________________\n\
    \   |Network Entity Title Length Indicator (NETL) |  10\n   |_____________________________________________|\n\
    \   |                                             |  11\n   :           Network\
    \ Entity Title (NET)        :\n   |                                          \
    \   | m - 1\n   |_____________________________________________|\n      Figure\
    \ 4: ISH PDU - Network Address Part\n"
- title: 8.3.5  Destination Address Parameter for RD PDU
  contents:
  - "8.3.5  Destination Address Parameter for RD PDU\n   The Destination Address is\
    \ the NSAP address of a destination associ-\n   ated with some NPDU being forwarded\
    \ by the Intermediate System send-\n   ing the RD PDU. It is encoded in the RD\
    \ PDU as follows:\n                                                  Octet\n \
    \   _____________________________________________\n    |Destination Address Length\
    \ Indicator (DAL) |  10\n    |___________________________________________|\n \
    \   |                                           |  11\n    :           Destination\
    \ Address (DA)        :\n    |                                           | m -\
    \ 1\n    |___________________________________________|\n       Figure 5: RD PDU\
    \ - Network Address Part\n"
- title: 8.4   Subnetwork Address Part
  contents:
  - "8.4   Subnetwork Address Part\n   The Subnetwork Address Part is present only\
    \ in RD PDUs.It is used to\n   indicate the subnetwork address of another Network\
    \ entity on the same\n   subnetwork as the End System (and Intermediate System)\
    \ which may be a\n   better path to the destination specified in the Network Address\
    \ Part.\n   The Subnetwork Address parameter is encoded in the same manner as\
    \ the\n   Network Address parameters.\n"
- title: 8.4.1    Subnetwork Address Parameter for RD PDU
  contents:
  - "8.4.1    Subnetwork Address Parameter for RD PDU\n    The Subnetwork Address\
    \ Parameter is encoded in the RD PDU as fol-\n   lows:\n                     \
    \                              Octet\n    _______________________________________________\n\
    \    |Subnetwork Address Length Indicator (BSNPAL) |   m\n    |_____________________________________________|\n\
    \    |                                             | m + 1\n    :         Subnetwork\
    \ Address (BSNPA)          :\n    |                                          \
    \   | n - 1\n    |_____________________________________________|\n           Figure\
    \ 6: ESH PDU - Address Part\n 8.5     Options Part\n 8.5.1    General\n    The\
    \ options part is used to convey optional parameters. The options\n   part\n \
    \   of the PDU header is illustrated below:\n                                \
    \                        Octet\n    ___________________________________________________\n\
    \    |                                                  |   p\n    :         \
    \           Options                       :\n    |                           \
    \                       |   q\n    |__________________________________________________|\n\
    \               Figure 7: All PDUs - Options Part\n   If the options part is present,\
    \ it may contain one or more parame-\n   ters.  The number of parameters that\
    \ may be contained in the options\n   part is constrained by the length of the\
    \ options part, which is\n   determined by the following formula:\n      PDU Header\
    \ Length - (length of fixed part + length of address\n      part + length of segmentation\
    \ part),\n   and by the length of the individual optional parameters.\n   Parameters\
    \ defined in the options part may appear in any order.  Du-\n   plication of options\
    \ is not permitted.Receipt of a PDU with an option\n   duplicated must be treated\
    \ as a protocol error.\n   The encoding of parameters contained within the options\
    \ part of the\n   PDU header is illustrated below in figure 8.\n          Octets\n\
    \          _________________________________\n          |     n      |  Parameter\
    \ Code  |\n          |____________|__________________|\n          |   n + 1  \
    \  | Parameter Length |\n          |____________|__________________|\n       \
    \   |   n + 2    |                  |\n          |     to     | Parameter Value\
    \  |\n          | n + m + 1  |                  |\n          |____________|__________________|\n\
    \      Figure 8:  Encoding of Option Parameters\n   The parameter code field is\
    \ coded in binary and, without extensions,\n   provides a maximum of 255 different\
    \ parameters. No parameter codes\n   use bits 8 and 7 with the value 00, so the\
    \ actual maximum number of\n   parameters is lower. A parameter code of 255 (binary\
    \ 1111 1111) is\n   reserved for possible future extensions.\n   The parameter\
    \ length field indicates the length, in octets, of the\n   parameter value field.The\
    \ length is indicated by a positive binary\n   number, m, with a theoretical maximum\
    \ value of 254. the practical\n   maximum value of m is lower. For example, in\
    \ the case of a single\n   parameter contained within the options part, two octets\
    \ are required\n   for the parameter code and the parameter length indicators.\
    \ Thus, the\n   value of m is limited to:\n       m = 252-(length of fixed part\
    \ +length of address part\n       +length of segmentation part   )\n   For each\
    \ succeeding parameter the maximum value of m decreases.  The\n   parameter value\
    \ field contains the value of the parameter identified\n   in the parameter code\
    \ field.\n   The following parameters are permitted in the options part.\n"
- title: 8.5.2    Security
  contents:
  - "8.5.2    Security\n   The Security parameter conveys information about the security\
    \ re-\n   quested in the Data PDU that caused the containing RD PDU to be gen-\n\
    \   erated.  This parameter has the same encoding and semantics as the\n   Security\
    \ parameter in ISO 8473.\n       Parameter Code:        1100 0101\n       Parameter\
    \ Length:        variable\n       Parameter Value:        See Section 7.5.3 of\
    \ ISO 8473\n"
- title: 8.5.3    Quality of Service Maintenance
  contents:
  - "8.5.3    Quality of Service Maintenance\n   The Quality of Service parameter\
    \ conveys information about the quali-\n   ty of service requested in the Data\
    \ PDU that caused the containing RD\n   PDU to be generated.\n   This parameter\
    \ has the same encoding and semantics as the QoS Mainte-\n   nance parameter in\
    \ ISO 8473.\n      Parameter Code:        1100 0011\n      Parameter Length: \
    \       variable\n      Parameter Value:        See Section 7.5.6 of ISO 8473\n"
- title: 8.5.4    Priority
  contents:
  - "8.5.4    Priority\n   The Priority parameter conveys information about the priority\
    \ re-\n   quested in the Data PDU that caused the containing RD PDU to be gen-\n\
    \   erated.\n   This parameter has the same encoding and semantics as the Priority\n\
    \   parameter in ISO 8473.\n      Parameter Code:        1100 1101\n      Parameter\
    \ Length:        one octet\n      Parameter Value:        See Section 7.5.7 of\
    \ ISO 8473\n"
- title: 8.6   End System Hello (ESH) PDU
  contents:
  - '8.6   End System Hello (ESH) PDU

    '
- title: 8.6.1  Structure
  contents:
  - "8.6.1  Structure\n   The ESH PDU has the following format:\n                \
    \                                    Octet\n       ____________________________________________\n\
    \       |    Network Layer Protocol Identifier     |   1\n       |__________________________________________|\n\
    \       |             Length Indicator             |   2\n       |__________________________________________|\n\
    \       |       Version/Protocol Id Extension      |   3\n       |__________________________________________|\n\
    \       |         reserved (must be zero)          |   4\n       |__________________________________________|\n\
    \       |0 |0 |0 |              Type               |   5\n       |__|__|__|_________________________________|\n\
    \       |               Holding Time               |  6,7\n       |__________________________________________|\n\
    \       |                 Checksum                 |  8,9\n       |__________________________________________|\n\
    \       |    Source Address Length Indicator (SAL) |  10\n       |__________________________________________|\n\
    \       |                                          |  11\n       :           Source\
    \ Address (SA)            :\n       |                                        \
    \  | m - 1\n       |__________________________________________|\n       |    \
    \                                      |   m\n       :                  Options\
    \                 :\n       |                                          | p - 1\n\
    \       |__________________________________________|\n                 Figure\
    \ 9: ESH PDU Format\n"
- title: 8.7   Intermediate System Hello (ISH) PDU
  contents:
  - '8.7   Intermediate System Hello (ISH) PDU

    '
- title: 8.7.1  Structure
  contents:
  - "8.7.1  Structure\n   The ISH PDU has the following format:\n                \
    \                                   Octet\n   _______________________________________________\n\
    \   |        Network Layer Protocol Identifier    |   1\n   |_____________________________________________|\n\
    \   |                 Length Indicator            |   2\n   |_____________________________________________|\n\
    \   |          Version/Protocol Id Extension      |   3\n   |_____________________________________________|\n\
    \   |             reserved (must be zero)         |   4\n   |_____________________________________________|\n\
    \   |0 |0 |0 |                  Type              |   5\n   |__|__|__|____________________________________|\n\
    \   |                   Holding Time              |  6,7\n   |_____________________________________________|\n\
    \   |                     Checksum                |  8,9\n   |_____________________________________________|\n\
    \   |Network Entity Title Length Indicator (NETL) |  10\n   |_____________________________________________|\n\
    \   |                                             |  11\n   :           Network\
    \ Entity Title (NET)        :\n   |                                          \
    \   | m - 1\n   |_____________________________________________|\n   |        \
    \                                     |  m\n   :                      Options\
    \                :\n   |                                             | p - 1\n\
    \   |_____________________________________________|\n              Figure 10:\
    \ ISH PDU Format\n"
- title: 8.8   Redirect (RD) PDU
  contents:
  - '8.8   Redirect (RD) PDU

    '
- title: 8.8.1  Structure
  contents:
  - "8.8.1  Structure\n   The RD PDU has the following format:\n                 \
    \                                   Octet\n   ______________________________________________\n\
    \   |         Network Layer Protocol Identifier   |    1\n   |_____________________________________________|\n\
    \   |                  Length Indicator           |    2\n   |_____________________________________________|\n\
    \   |           Version/Protocol Id Extension     |    3\n   |_____________________________________________|\n\
    \   |               reserved (must be zero)       |    4\n   |_____________________________________________|\n\
    \   |0 |0 |0 |                   Type             |    5\n   |__|__|__|____________________________________|\n\
    \   |                    Holding Time             |   6,7\n   |_____________________________________________|\n\
    \   |                      Checksum               |   8,9\n   |_____________________________________________|\n\
    \   |   Destination Address Length Indicator (DAL)|   10\n   |_____________________________________________|\n\
    \   |                                             |   11\n   :              Destination\
    \ Address (DA)       :\n   |                                             | m -\
    \ 1\n   |_____________________________________________|\n   |Subnetwork Address\
    \ Length Indicator (BSNPAL) |   m\n   |_____________________________________________|\n\
    \   |                                             | m + 1\n   :          Subnetwork\
    \ Address (DBSNPA)        :\n   |                                            \
    \ | n - 1\n   |_____________________________________________|\n   |Network Entity\
    \ Title Length Indicator (NETL) |   n\n   |_____________________________________________|\n\
    \   |                                             | n + 1\n   :            Network\
    \ Entity Title (NET)       :\n   |                                           \
    \  | p - 1\n   |_____________________________________________|\n   |         \
    \                                    |   p\n   :                        Options\
    \              :\n   |                                             | q - 1\n \
    \  |_____________________________________________|\n   Figure 11: RD PDU Format\
    \ when Redirect is to an IS\n                                                \
    \    Octet\n   ______________________________________________\n   |         Network\
    \ Layer Protocol Identifier   |    1\n   |_____________________________________________|\n\
    \   |                  Length Indicator           |    2\n   |_____________________________________________|\n\
    \   |           Version/Protocol Id Extension     |    3\n   |_____________________________________________|\n\
    \   |               reserved (must be zero)       |    4\n   |_____________________________________________|\n\
    \   |0 |0 |0 |                   Type             |    5\n   |__|__|__|____________________________________|\n\
    \   |                    Holding Time             |   6,7\n   |_____________________________________________|\n\
    \   |                      Checksum               |   8,9\n   |_____________________________________________|\n\
    \   |   Destination Address Length Indicator (DAL)|   10\n   |_____________________________________________|\n\
    \   |                                             |   11\n   :              Destination\
    \ Address (DA)       :\n   |                                             | m -\
    \ 1\n   |_____________________________________________|\n   |Subnetwork Address\
    \ Length Indicator (BSNPAL) |   m\n   |_____________________________________________|\n\
    \   |                                             | m + 1\n   :          Subnetwork\
    \ Address (DBSNPA)        :\n   |                                            \
    \ | n - 1\n   |_____________________________________________|\n   |          \
    \         NETL = 0                  |   n\n   |_____________________________________________|\n\
    \   |                                             | n + 1\n   :              \
    \     Options                   :\n   |                                      \
    \       | p - 1\n   |_____________________________________________|\n   |    \
    \          Quality of Service             | n + 1\n   |_____________________________________________|\n\
    \   Figure 12: RD PDU Format when Redirect is to an ES\n"
- title: 9   Formal Description
  contents:
  - "9   Formal Description\n   {Maybe next pass...}\n"
- title: 10    Conformance
  contents:
  - "10    Conformance\n   See Clause 6.2.\n                  ANNEX A.  SUPPORTING\
    \ TECHNICAL MATERIAL\n"
- title: A.1   Use of Timers
  contents:
  - "A.1   Use of Timers\n   This protocol makes extensive use of timers to ensure\
    \ the timeliness\n   and accuracy of information disseminated using the Configuration\
    \ and\n   Route Redirection functions.This section discusses the rationale for\n\
    \   using these timers and provides some background for how they operate.\n  \
    \ Systems using this protocol learn about other systems exclusively by\n   receiving\
    \ PDUs sent by those systems. In a connectionless environ-\n   ment, a system\
    \ must periodically receive updated information to en-\n   sure that the information\
    \ it previously received is still correct.\n   For example, if a system on a subnetwork\
    \ becomes unavailable (either\n   it has ceased operating, or its SNPA becomes\
    \ inoperative) the only\n   way another system can detect this fact is by the\
    \ absence of\n   transmissions from that system. If information were retained\
    \ in the\n   absence of new PDUs being received, configuration and/or routing\
    \ in-\n   formation would inevitably become incorrect. The Holding Timers\n  \
    \ specified by this protocol guarantee that old information will not be\n   retained\
    \ indefinitely.\n   A useful way of thinking of the configuration and route redirection\n\
    \   information is as a cache maintained by each system. The cache is\n   periodically\
    \ flushed to ensure that only up-to-date information is\n   stored.Unlike most\
    \ caches, however, the time to retain information is\n   not a purely local matter.\
    \  Rather, information is held for a period\n   of time specified by the source\
    \ of the information. Some examples\n   will help clarify this operation.\n"
- title: A.1.1   Example of Holding Time for Route Redirection
  contents:
  - "A.1.1   Example of Holding Time for Route Redirection\n   Route Redirection Information\
    \ is obtained by an End System through\n   the Request Redirect function (see\
    \ clause 7.7).It is quite possible\n   that a Intermediate System might redirect\
    \ an End System to another IS\n   which has recently become unavailable (this\
    \ might happen if the IS-\n   to-IS routing algorithm is still converging following\
    \ a configuration\n   change). If the Holding Timer were not present, or was set\
    \ very long\n   by the sending IS, an End System would have been redirected into\
    \ a\n   Black Hole from which none of its Data PDUs would ever emerge. The\n \
    \  length of the Holding Timer on Redirects specifies, in essence, the\n   length\
    \ of time black holes are permitted to exist.\n   On the other hand, setting the\
    \ Holding Timer on Route Redirects very\n   short to minimize the effect of black\
    \ holes has other undesirable\n   consequences.First, for each PDU that causes\
    \ a redirect, an addition-\n   al PDU beside the original Data PDU must be composed\
    \ and transmitted;\n   this increases overhead. Second, each time a \"working\"\
    \ redirect's\n   Holding Timer expires, the redirected End System will revert\
    \ to a\n   poorer route for at least one PDU.\n"
- title: A.1.2   Example of Holding Timer for Configuration Information
  contents:
  - "A.1.2   Example of Holding Timer for Configuration Information\n   A similar\
    \ type of problem can occur with respect to Configuration in-\n   formation. If\
    \ the Holding Time of a ISH PDU (see clause 7.2.2) is set\n   very long, and the\
    \ only Intermediate System (which has been sending\n   this Configuration Information)\
    \ on the subnetwork becomes unavail-\n   able, a subnetwork-wide black hole can\
    \ form. During this time, End\n   Systems on the subnetwork may not be able to\
    \ communicate with each\n   other because they presume that a Intermediate System\
    \ is operating\n   which will forward their Data PDUs to destination ESs on the\
    \ local\n   subnetwork and return RD PDUs.Once the Holding Time expires, the ESs\n\
    \   will realize that no IS is available and will take their only\n   recourse,\
    \ which is to send their traffic directly on the local sub-\n   network.\n   Given\
    \ the types of problems that can occur, it is important that\n   responsibility\
    \ for incorrect information can be unambiguously as-\n   signed to the source\
    \ of the information. For this reason all Holding\n   Timers are calculated by\
    \ the source of the Configuration or Route\n   Redirection information and communicated\
    \ explicitly to each recipient\n   in the appropriate PDU.\n"
- title: A.2   Refresh and timeout of Redirection information
  contents:
  - "A.2   Refresh and timeout of Redirection information\n   The protocol allows\
    \ End Systems to refresh redirection information\n   without first allowing the\
    \ holding time to expire and being redirect-\n   ed by a Intermediate System for\
    \ a second (or subsequent) time. Such\n   schemes are prevalent in connectionless\
    \ subnetworks and are often\n   called \"reverse path information\", \"previous\
    \ hop cache\" or something\n   similar.\n   Refreshing the redirection information\
    \ has obvious performance bene-\n   fits, but can be dangerous if not handled\
    \ in a very conservative\n   fashion. In order for a redirection to be safely\
    \ refreshed, all of\n   the following conditions must hold:\n     1. The source\
    \ address of the received PDU must be exactly the same\n        as the destination\
    \ address specified in a prior RD PDU (this\n        defines a \"match\" on the\
    \ redirection information). Making\n        assumptions about the equivalence\
    \ of abbreviated addresses,\n        group addresses, or similar \"special\" addresses\
    \ is dangerous\n        since routing for these addresses cannot be assumed to\
    \ be\n        the same.\n     2. The Quality of Service parameters of the received\
    \ PDU must be\n        exactly the same as the QoS parameters specified in the\
    \ matching\n        (by destination address) redirection entry.Again, there is\
    \ no\n        guarantee that PDUs with different QoS parameters will be routed\n\
    \        the same way. It is quite possible that the redirected path is\n    \
    \    even a black hole for certain values of the QoS parameters (the\n       \
    \ security field is a good example).\n     3. The \"previous hop\" of the received\
    \ Data PDU must match the \"next\n        hop\" stored in the redirection information.\
    \ Specifically, the\n        SN_Source_Address of the SN_UNITDATA.Indication which\
    \ received the\n        PDU must match exactly the SN_Destination_Address specified\
    \ in the\n        redirect to be used for sending traffic via the SN_UNITDATA.Request\n\
    \        primitive. This comparison ensures that redirects are refreshed only\n\
    \        when the reverse traffic is being received from the same IS (or\n   \
    \     destination ES) as the forward traffic is being sent through (or\n     \
    \   to). This check make certain that redirects are not refreshed for\n      \
    \  just on the basis of traffic being received from the destination.\n       \
    \ It is quite possible that the traffic is simply indicating that the\n      \
    \  forward path in use is not working!\n   Note that these conditions still allow\
    \ refresh in the most useful and\n   common cases where either the destination\
    \ is another ES on the same\n   subnetwork as the source ES, or the redirection\
    \ is to a IS which is\n   passing traffic to/from the destination in both directions\
    \ (i.e. the\n   path is symmetric).\n"
- title: A.3   System Initialization Considerations
  contents:
  - "A.3   System Initialization Considerations\n   This protocol is designed to make\
    \ the exchange of information as free\n   as possible from dependencies between\
    \ the two types of systems.\n   therefore, it is not possible for an End System\
    \ to request all Inter-\n   mediate Systems on a subnetwork to report their configuration,\
    \ nor is\n   it possible for an Intermediate System to request all End Systems\
    \ on\n   a subnetwork to report their configuration.\n   In certain operating\
    \ environments a constraint may be imposed than an\n   ES, upon becoming operational,\
    \ must discover the existence of an IS\n   as soon as possible.The converse relationship\
    \ also holds if it is\n   necessary for an IS to discover the existence of End\
    \ Systems as soon\n   as possible. In both cases the availability of this information\
    \ is\n   normally determined by the Configuration Timer of the system for\n  \
    \ which the knowledge is desired. there is therefore a tradeoff between\n   the\
    \ overhead associated with performing the Report and Record Confi-\n   guration\
    \ functions and the timely availability of the configuration\n   information.\
    \ Decreasing the Configuration Timer increases the availa-\n   bility at the expense\
    \ of an increase in overhead.\n   The following solution is recommended for addressing\
    \ the constraint\n   described above. When the Record Configuration function is\
    \ invoked in\n   either an End System or an Intermediate System, the function\
    \ will\n   determine if the received configuration information was previously\n\
    \   unknown.If this is the case, then the Report Configuration function\n   may\
    \ be invoked before the expiration of the system's Configuration\n   Timer. The\
    \ Hello PDU generated by the Report Configuration function\n   is then sent only\
    \ to the Network Entity whose configuration was pre-\n   viously unknown. Thus\
    \ when an ES or IS first becomes operational it\n   immediately reports its configuration.\
    \ As soon as systems of the oth-\n   er type discover the new network entity,\
    \ they will make their own\n   configuration known to this entity.\n   The additional\
    \ overhead incurred by this solution is minimal. Also,\n   since the discovery\
    \ of new configurations is made timely by this ap-\n   proach the Configuration\
    \ Timer period can be increased in order to\n   decrease the overhead of the configuration\
    \ functions, provided that\n   other factors not discussed here are accounted\
    \ for by the longer time\n   period.One caveat is that the first Hello PDU generated\
    \ by a system\n   may be lost during transmission. To solve this problem one or\
    \ more\n   additional PDUs may be transmitted at short time intervals during\n\
    \   this initialization period.\n   Note that this solution may be implemented\
    \ in ISs only, in ESs only,\n   or in both Intermediate and End Systems.This decision\
    \ is purely a lo-\n   cal matter and may be alterable through System Management.\n"
- title: A.4     Optimizations for Flushing Redirects
  contents:
  - "A.4     Optimizations for Flushing Redirects\n   An ES will attempt to forward\
    \ NPDUs through an IS to which it has\n   been redirected until the Holding Timer\
    \ specified in the RD PDU has\n   expired, even if that IS is no longer reachable.\
    \  Under certain cir-\n   cumstances, it is possible to do better and recognize\
    \ the existence\n   of a black hole sooner. In particular, if the ES expects to\
    \ hear ISH\n   PDUs from the IS to which it has been redirected, and the Holding\
    \ Ti-\n   mer for that IS expires, all knowledge of the IS may be forgotten by\n\
    \   the ES. This includes any redirects, which may be flushed (see the\n   Flush\
    \ Old Redirect function) even though their timeouts have not ex-\n   pired.\n"
