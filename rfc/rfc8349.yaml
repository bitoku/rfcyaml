- contents:
  - '        A YANG Data Model for Routing Management (NMDA Version)

    '
  title: __initial_text__
- contents:
  - "Abstract\n   This document specifies three YANG modules and one submodule.\n
    \  Together, they form the core routing data model that serves as a\n   framework
    for configuring and managing a routing subsystem.  It is\n   expected that these
    modules will be augmented by additional YANG\n   modules defining data models
    for control-plane protocols, route\n   filters, and other functions.  The core
    routing data model provides\n   common building blocks for such extensions --
    routes, Routing\n   Information Bases (RIBs), and control-plane protocols.\n   The
    YANG modules in this document conform to the Network Management\n   Datastore
    Architecture (NMDA).  This document obsoletes RFC 8022.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    7841.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8349.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2018 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (https://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .
    . . . . .   4\n   2.  Terminology and Notation  . . . . . . . . . . . . . . .
    . . .   4\n     2.1.  Glossary of New Terms . . . . . . . . . . . . . . . . .
    .   5\n     2.2.  Tree Diagrams . . . . . . . . . . . . . . . . . . . . . .   6\n
    \    2.3.  Prefixes in Data Node Names . . . . . . . . . . . . . . .   6\n   3.
    \ Objectives  . . . . . . . . . . . . . . . . . . . . . . . . .   6\n   4.  The
    Design of the Core Routing Data Model . . . . . . . . . .   7\n     4.1.  System-Controlled
    and User-Controlled List Entries  . . .   8\n   5.  Basic Building Blocks . .
    . . . . . . . . . . . . . . . . . .   9\n     5.1.  Routes  . . . . . . . . .
    . . . . . . . . . . . . . . . .   9\n     5.2.  Routing Information Base (RIB)
    \ . . . . . . . . . . . . .  10\n     5.3.  Control-Plane Protocol  . . . . .
    . . . . . . . . . . . .  11\n       5.3.1.  Routing Pseudo-Protocols  . . . .
    . . . . . . . . . .  11\n       5.3.2.  Defining New Control-Plane Protocols  .
    . . . . . . .  11\n     5.4.  Parameters of IPv6 Router Advertisements  . . .
    . . . . .  12\n   6.  Interactions with Other YANG Modules  . . . . . . . . .
    . . .  13\n     6.1.  Module \"ietf-interfaces\"  . . . . . . . . . . . . . .
    . .  13\n     6.2.  Module \"ietf-ip\"  . . . . . . . . . . . . . . . . . . .
    .  14\n   7.  Routing Management YANG Module  . . . . . . . . . . . . . . .  15\n
    \  8.  IPv4 Unicast Routing Management YANG Module . . . . . . . . .  29\n   9.
    \ IPv6 Unicast Routing Management YANG Module . . . . . . . . .  37\n     9.1.
    \ IPv6 Router Advertisements Submodule  . . . . . . . . . .  45\n   10. IANA Considerations
    . . . . . . . . . . . . . . . . . . . . .  56\n   11. Security Considerations
    . . . . . . . . . . . . . . . . . . .  57\n   12. References  . . . . . . . .
    . . . . . . . . . . . . . . . . .  58\n     12.1.  Normative References . . .
    . . . . . . . . . . . . . . .  58\n     12.2.  Informative References . . . .
    . . . . . . . . . . . . .  60\n   Appendix A.  The Complete Schema Tree . . .
    . . . . . . . . . . .  61\n   Appendix B.  Minimum Implementation . . . . . .
    . . . . . . . . .  66\n   Appendix C.  Example: Adding a New Control-Plane Protocol
    . . . .  67\n   Appendix D.  Data Tree Example  . . . . . . . . . . . . . . .
    . .  70\n   Appendix E.  NETCONF Get Data Reply Example . . . . . . . . . . .
    \ 77\n   Acknowledgments . . . . . . . . . . . . . . . . . . . . . . . . .  80\n
    \  Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  80\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   This document specifies the following YANG modules:\n   o
    \ The \"ietf-routing\" module provides generic components of a routing\n      data
    model.\n   o  The \"ietf-ipv4-unicast-routing\" module augments the \"ietf-routing\"\n
    \     module with additional data specific to IPv4 unicast.\n   o  The \"ietf-ipv6-unicast-routing\"
    module augments the \"ietf-routing\"\n      module with additional data specific
    to IPv6 unicast.  Its\n      submodule, \"ietf-ipv6-router-advertisements\", also
    augments the\n      \"ietf-interfaces\"  [RFC8343] and \"ietf-ip\" [RFC8344] modules
    with\n      IPv6 router configuration variables required by [RFC4861].\n   These
    modules together define the core routing data model, which is\n   intended as
    a basis for future data model development covering\n   more-sophisticated routing
    systems.  While these three modules can be\n   directly used for simple IP devices
    with static routing (see\n   Appendix B), their main purpose is to provide essential
    building\n   blocks for more-complicated data models involving multiple\n   control-plane
    protocols, multicast routing, additional address\n   families, and advanced functions
    such as route filtering or policy\n   routing.  To this end, it is expected that
    the core routing data\n   model will be augmented by numerous modules developed
    by various IETF\n   working groups.\n   The YANG modules in this document conform
    to the Network Management\n   Datastore Architecture (NMDA) [RFC8342].  This document
    obsoletes\n   RFC 8022 [RFC8022].\n"
  title: 1.  Introduction
- contents:
  - "2.  Terminology and Notation\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\",
    \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT
    RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted
    as described in\n   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear
    in all\n   capitals, as shown here.\n   The following terms are defined in [RFC8342]:\n
    \  o  client\n   o  server\n   o  configuration\n   o  system state\n   o  operational
    state\n   o  intended configuration\n   The following terms are defined in [RFC7950]:\n
    \  o  action\n   o  augment\n   o  container\n   o  data model\n   o  data node\n
    \  o  feature\n   o  leaf\n   o  list\n   o  mandatory node\n   o  module\n   o
    \ presence container\n   o  schema tree\n   o  RPC (Remote Procedure Call) operation\n"
  - contents:
    - "2.1.  Glossary of New Terms\n   core routing data model:  YANG data model comprising
      \"ietf-routing\",\n      \"ietf-ipv4-unicast-routing\", and \"ietf-ipv6-unicast-routing\"\n
      \     modules.\n   direct route:  A route to a directly connected network.\n
      \  Routing Information Base (RIB):  An object containing a list of\n      routes,
      together with other information.  See Section 5.2 for\n      details.\n   system-controlled
      entry:  An entry in a list in the operational state\n      (\"config false\")
      that is created by the system independently of\n      what has been explicitly
      configured.  See Section 4.1 for details.\n   user-controlled entry:  An entry
      in a list in the operational state\n      (\"config false\") that is created
      and deleted as a direct\n      consequence of certain configuration changes.
      \ See Section 4.1 for\n      details.\n"
    title: 2.1.  Glossary of New Terms
  - contents:
    - "2.2.  Tree Diagrams\n   Tree diagrams used in this document follow the notation
      defined in\n   [RFC8340].\n"
    title: 2.2.  Tree Diagrams
  - contents:
    - "2.3.  Prefixes in Data Node Names\n   In this document, names of data nodes,
      actions, and other data model\n   objects are often used without a prefix, as
      long as it is clear from\n   the context in which YANG module each name is defined.
      \ Otherwise,\n   names are prefixed using the standard prefix associated with
      the\n   corresponding YANG module, as shown in Table 1.\n            +--------+---------------------------+-----------+\n
      \           | Prefix | YANG module               | Reference |\n            +--------+---------------------------+-----------+\n
      \           | if     | ietf-interfaces           | [RFC8343] |\n            |
      ip     | ietf-ip                   | [RFC8344] |\n            | rt     | ietf-routing
      \             | Section 7 |\n            | v4ur   | ietf-ipv4-unicast-routing
      | Section 8 |\n            | v6ur   | ietf-ipv6-unicast-routing | Section 9
      |\n            | yang   | ietf-yang-types           | [RFC6991] |\n            |
      inet   | ietf-inet-types           | [RFC6991] |\n            +--------+---------------------------+-----------+\n
      \            Table 1: Prefixes and Corresponding YANG Modules\n"
    title: 2.3.  Prefixes in Data Node Names
  title: 2.  Terminology and Notation
- contents:
  - "3.  Objectives\n   The initial design of the core routing data model was driven
    by the\n   following objectives:\n   o  The data model should be suitable for
    the common address families\n      -- in particular, IPv4 and IPv6 -- and for
    unicast and multicast\n      routing, as well as Multiprotocol Label Switching
    (MPLS).\n   o  A simple IP routing system, such as one that uses only static\n
    \     routing, should be configurable in a simple way, ideally without\n      any
    need to develop additional YANG modules.\n   o  On the other hand, the core routing
    framework must allow for\n      complicated implementations involving multiple
    RIBs and multiple\n      control-plane protocols, as well as controlled redistributions
    of\n      routing information.\n   o  Because device vendors will want to map
    the data models built on\n      this generic framework to their proprietary data
    models and\n      configuration interfaces, the framework should be flexible enough\n
    \     to facilitate such mapping and accommodate data models with\n      different
    logic.\n"
  title: 3.  Objectives
- contents:
  - "4.  The Design of the Core Routing Data Model\n   The core routing data model
    consists of three YANG modules and one\n   submodule.  The first module, \"ietf-routing\",
    defines the generic\n   components of a routing system.  The other two modules
    --\n   \"ietf-ipv4-unicast-routing\" and \"ietf-ipv6-unicast-routing\" --\n   augment
    the \"ietf-routing\" module with additional data nodes that are\n   needed for
    IPv4 and IPv6 unicast routing, respectively.  The\n   \"ietf-ipv6-unicast-routing\"
    module has a submodule,\n   \"ietf-ipv6-router-advertisements\", that augments
    the\n   \"ietf-interfaces\" [RFC8343] and \"ietf-ip\" [RFC8344] modules with\n
    \  configuration variables for IPv6 Router Advertisements as required by\n   [RFC4861].\n
    \  Figure 1 shows abridged views of the hierarchies.  See Appendix A for\n   the
    complete data trees.\n   +--rw routing\n      +--rw router-id?                 yang:dotted-quad\n
    \     +--ro interfaces\n      |  +--ro interface*   if:interface-ref\n      +--rw
    control-plane-protocols\n      |  +--rw control-plane-protocol* [type name]\n
    \     |     +--rw type             identityref\n      |     +--rw name             string\n
    \     |     +--rw description?     string\n      |     +--rw static-routes\n      |
    \       +--rw v4ur:ipv4\n      |        |     ...\n      |        +--rw v6ur:ipv6\n
    \     |              ...\n      +--rw ribs\n         +--rw rib* [name]\n            +--rw
    name              string\n            +--rw address-family?   identityref\n            +--ro
    default-rib?      boolean {multiple-ribs}?\n            +--ro routes\n            |
    \ +--ro route*\n            |        ...\n            +---x active-route\n            |
    \ +---w input\n            |  |  +---w v4ur:destination-address?   inet:ipv4-address\n
    \           |  |  +---w v6ur:destination-address?   inet:ipv6-address\n            |
    \ +--ro output\n            |        ...\n            +--rw description?      string\n
    \                        Figure 1: Data Hierarchy\n   As can be seen from Figure
    1, the core routing data model introduces\n   several generic components of a
    routing framework: routes, RIBs\n   containing lists of routes, and control-plane
    protocols.  Section 5\n   describes these components in more detail.\n"
  - contents:
    - "4.1.  System-Controlled and User-Controlled List Entries\n   The core routing
      data model defines several lists in the schema tree,\n   such as \"rib\", that
      have to be populated with at least one entry in\n   any properly functioning
      device, and additional entries may be\n   configured by a client.\n   In such
      a list, the server creates the required item as a\n   \"system-controlled entry\"
      in the operational state, i.e., inside\n   read-only lists in the \"routing\"
      container.\n   An example can be seen in Appendix D: the \"/routing/ribs/rib\"
      list\n   has two system-controlled entries -- \"ipv4-master\" and \"ipv6-master\".\n
      \  Additional entries called \"user-controlled entries\" may be created in\n
      \  the configuration by a client, e.g., via the Network Configuration\n   Protocol
      (NETCONF).  If the server accepts a configured\n   user-controlled entry, then
      this entry also appears in the\n   operational state version of the list.\n
      \  Corresponding entries in both versions of the list (in the intended\n   configuration
      and the operational state) [RFC8342] have the same\n   value of the list key.\n
      \  A client may also provide supplemental configuration of system-\n   controlled
      entries.  To do so, the client creates a new entry in the\n   configuration
      with the desired contents.  In order to bind this entry\n   to the corresponding
      entry in the operational state, the key of the\n   configuration entry has to
      be set to the same value as the key of the\n   operational state entry.\n   Deleting
      a user-controlled entry from the intended configuration\n   results in the removal
      of the corresponding entry in the operational\n   state list.  In contrast,
      if a client deletes a system-controlled\n   entry from the intended configuration,
      only the extra configuration\n   specified in that entry is removed; the corresponding
      operational\n   state entry is not removed.\n"
    title: 4.1.  System-Controlled and User-Controlled List Entries
  title: 4.  The Design of the Core Routing Data Model
- contents:
  - "5.  Basic Building Blocks\n   This section describes the essential components
    of the core routing\n   data model.\n"
  - contents:
    - "5.1.  Routes\n   Routes are basic elements of information in a routing system.
      \ The\n   core routing data model defines only the following minimal set of\n
      \  route attributes:\n   o  \"destination-prefix\": address prefix specifying
      the set of\n      destination addresses for which the route may be used.  This\n
      \     attribute is mandatory.\n   o  \"route-preference\": an integer value
      (also known as\n      \"administrative distance\") that is used for selecting
      a preferred\n      route among routes with the same destination prefix.  A lower\n
      \     value indicates a route that is more preferred.\n   o  \"next-hop\": determines
      the outgoing interface and/or next-hop\n      address(es), or a special operation
      to be performed on a packet.\n   Routes are primarily system state and appear
      as entries in RIBs\n   (Section 5.2), but they may also be found in configuration
      data --\n   for example, as manually configured static routes.  In the latter\n
      \  case, configurable route attributes are generally a subset of\n   attributes
      defined for RIB routes.\n"
    title: 5.1.  Routes
  - contents:
    - "5.2.  Routing Information Base (RIB)\n   Every implementation of the core routing
      data model manages one or\n   more RIBs.  A RIB is a list of routes complemented
      with\n   administrative data.  Each RIB contains only routes of one address\n
      \  family.  An address family is represented by an identity derived from\n   the
      \"rt:address-family\" base identity.\n   In the core routing data model, RIBs
      are represented as entries in\n   the list \"/routing/ribs/rib\" in the operational
      state.  The contents\n   of RIBs are controlled and manipulated by control-plane
      protocol\n   operations that may result in route additions, removals, and\n
      \  modifications.  This also includes manipulations via the \"static\"\n   and/or
      \"direct\" pseudo-protocols; see Section 5.3.1.\n   For every supported address
      family, exactly one RIB MUST be marked as\n   the \"default RIB\", in which
      control-plane protocols place their\n   routes by default.\n   Simple router
      implementations that do not advertise the\n   \"multiple-ribs\" feature will
      typically create one system-controlled\n   RIB per supported address family
      and mark it as the default RIB.\n   More-complex router implementations advertising
      the \"multiple-ribs\"\n   feature support multiple RIBs per address family that
      can be used for\n   policy routing and other purposes.\n   The following action
      (see Section 7.15 of [RFC7950]) is defined for\n   the \"rib\" list:\n   o  active-route
      -- return the active RIB route for the destination\n      address that is specified
      as the action's input parameter.\n"
    title: 5.2.  Routing Information Base (RIB)
  - contents:
    - "5.3.  Control-Plane Protocol\n   The core routing data model provides an open-ended
      framework for\n   defining multiple control-plane protocol instances, e.g.,
      for Layer 3\n   routing protocols.  Each control-plane protocol instance MUST
      be\n   assigned a type, which is an identity derived from the\n   \"rt:control-plane-protocol\"
      base identity.  The core routing data\n   model defines two identities for the
      \"direct\" and \"static\"\n   pseudo-protocols (Section 5.3.1).\n   Multiple
      control-plane protocol instances of the same type MAY be\n   configured.\n"
    - contents:
      - "5.3.1.  Routing Pseudo-Protocols\n   The core routing data model defines
        two special routing protocol\n   types -- \"direct\" and \"static\".  Both
        are in fact pseudo-protocols,\n   which means that they are confined to the
        local device and do not\n   exchange any routing information with adjacent
        routers.\n   Every implementation of the core routing data model MUST provide\n
        \  exactly one instance of the \"direct\" pseudo-protocol type.  It is the\n
        \  source of direct routes for all configured address families.  Direct\n
        \  routes are normally supplied by the operating system kernel, based on\n
        \  the configuration of network interface addresses; see Section 6.2.\n   A
        pseudo-protocol of the type \"static\" allows for specifying routes\n   manually.
        \ It MAY be configured in zero or multiple instances,\n   although a typical
        configuration will have exactly one instance.\n"
      title: 5.3.1.  Routing Pseudo-Protocols
    - contents:
      - "5.3.2.  Defining New Control-Plane Protocols\n   It is expected that future
        YANG modules will create data models for\n   additional control-plane protocol
        types.  Such new modules will have\n   to define the protocol-specific data
        nodes, and they will have to\n   integrate into the core routing framework
        in the following way:\n   o  A new identity MUST be defined for the control-plane
        protocol, and\n      its base identity MUST be set to \"rt:control-plane-protocol\"
        or to\n      an identity derived from \"rt:control-plane-protocol\".\n   o
        \ Additional route attributes MAY be defined, preferably in one\n      place
        by means of defining a YANG grouping.  The new attributes\n      have to be
        inserted by augmenting the definitions of the node\n       /rt:routing/rt:ribs/rt:rib/rt:routes/rt:route\n
        \     and possibly other places in the schema tree.\n   o  Data nodes for
        the new protocol can be defined by augmenting the\n      \"control-plane-protocol\"
        data node under \"/routing\".\n   By using a \"when\" statement, the augmented
        data nodes specific to the\n   new protocol SHOULD be made conditional and
        valid only if the value\n   of \"rt:type\" or \"rt:source-protocol\" is equal
        to (or derived from)\n   the new protocol's identity.\n   It is also RECOMMENDED
        that protocol-specific data nodes be\n   encapsulated in an appropriately
        named container with presence.  Such\n   a container may contain mandatory
        data nodes that are otherwise\n   forbidden at the top level of an augment.\n
        \  The above steps are implemented by the example YANG module for the\n   Routing
        Information Protocol (RIP); see Appendix C.\n"
      title: 5.3.2.  Defining New Control-Plane Protocols
    title: 5.3.  Control-Plane Protocol
  - contents:
    - "5.4.  Parameters of IPv6 Router Advertisements\n   The YANG module \"ietf-ipv6-router-advertisements\"
      (Section 9.1),\n   which is a submodule of the \"ietf-ipv6-unicast-routing\"
      module,\n   augments the schema tree of IPv6 interfaces with definitions of
      the\n   following variables as required by Section 6.2.1 of [RFC4861]:\n   o
      \ send-advertisements\n   o  max-rtr-adv-interval\n   o  min-rtr-adv-interval\n
      \  o  managed-flag\n   o  other-config-flag\n   o  link-mtu\n   o  reachable-time\n
      \  o  retrans-timer\n   o  cur-hop-limit\n   o  default-lifetime\n   o  prefix-list:
      a list of prefixes to be advertised.\n      The following parameters are associated
      with each prefix in\n      the list:\n      *  valid-lifetime\n      *  on-link-flag\n
      \     *  preferred-lifetime\n      *  autonomous-flag\n   NOTES:\n   1.  The
      \"IsRouter\" flag, which is also required by [RFC4861], is\n       implemented
      in the \"ietf-ip\" module [RFC8344] (leaf\n       \"ip:forwarding\").\n   2.
      \ The Neighbor Discovery specification [RFC4861] allows the\n       implementations
      to decide whether the \"valid-lifetime\" and\n       \"preferred-lifetime\"
      parameters remain the same in consecutive\n       advertisements or decrement
      in real time.  However, the latter\n       behavior seems problematic because
      the values might be reset\n       again to the (higher) configured values after
      a configuration is\n       reloaded.  Moreover, no implementation is known to
      use the\n       decrementing behavior.  The \"ietf-ipv6-router-advertisements\"\n
      \      submodule therefore stipulates the former behavior with constant\n       values.\n"
    title: 5.4.  Parameters of IPv6 Router Advertisements
  title: 5.  Basic Building Blocks
- contents:
  - "6.  Interactions with Other YANG Modules\n   The semantics of the core routing
    data model also depends on several\n   configuration parameters that are defined
    in other YANG modules.\n"
  - contents:
    - "6.1.  Module \"ietf-interfaces\"\n   The following boolean switch is defined
      in the \"ietf-interfaces\" YANG\n   module [RFC8343]:\n   /if:interfaces/if:interface/if:enabled\n
      \     If this switch is set to \"false\" for a network-layer interface,\n      then
      all routing and forwarding functions MUST be disabled on this\n      interface.\n"
    title: 6.1.  Module "ietf-interfaces"
  - contents:
    - "6.2.  Module \"ietf-ip\"\n   The following boolean switches are defined in
      the \"ietf-ip\" YANG\n   module [RFC8344]:\n   /if:interfaces/if:interface/ip:ipv4/ip:enabled\n
      \     If this switch is set to \"false\" for a network-layer interface,\n      then
      all IPv4 routing and forwarding functions MUST be disabled on\n      this interface.\n
      \  /if:interfaces/if:interface/ip:ipv4/ip:forwarding\n      If this switch is
      set to \"false\" for a network-layer interface,\n      then the forwarding of
      IPv4 datagrams through this interface MUST\n      be disabled.  However, the
      interface MAY participate in other IPv4\n      routing functions, such as routing
      protocols.\n   /if:interfaces/if:interface/ip:ipv6/ip:enabled\n      If this
      switch is set to \"false\" for a network-layer interface,\n      then all IPv6
      routing and forwarding functions MUST be disabled on\n      this interface.\n
      \  /if:interfaces/if:interface/ip:ipv6/ip:forwarding\n      If this switch is
      set to \"false\" for a network-layer interface,\n      then the forwarding of
      IPv6 datagrams through this interface MUST\n      be disabled.  However, the
      interface MAY participate in other IPv6\n      routing functions, such as routing
      protocols.\n   In addition, the \"ietf-ip\" module allows for configuring IPv4
      and\n   IPv6 addresses and network prefixes or masks on network-layer\n   interfaces.
      \ Configuration of these parameters on an enabled\n   interface MUST result
      in an immediate creation of the corresponding\n   direct route.  The destination
      prefix of this route is set according\n   to the configured IP address and network
      prefix/mask, and the\n   interface is set as the outgoing interface for that
      route.\n"
    title: 6.2.  Module "ietf-ip"
  title: 6.  Interactions with Other YANG Modules
- contents:
  - "7.  Routing Management YANG Module\n   <CODE BEGINS> file \"ietf-routing@2018-03-13.yang\"\n
    \  module ietf-routing {\n     yang-version \"1.1\";\n     namespace \"urn:ietf:params:xml:ns:yang:ietf-routing\";\n
    \    prefix \"rt\";\n     import ietf-yang-types {\n       prefix \"yang\";\n
    \    }\n     import ietf-interfaces {\n       prefix \"if\";\n       description\n
    \        \"An 'ietf-interfaces' module version that is compatible with\n          the
    Network Management Datastore Architecture (NMDA)\n          is required.\";\n
    \    }\n     organization\n       \"IETF NETMOD (Network Modeling) Working Group\";\n
    \    contact\n       \"WG Web:   <https://datatracker.ietf.org/wg/netmod/>\n        WG
    List:  <mailto:rtgwg@ietf.org>\n        Editor:   Ladislav Lhotka\n                  <mailto:lhotka@nic.cz>\n
    \                 Acee Lindem\n                  <mailto:acee@cisco.com>\n                  Yingzhen
    Qu\n                  <mailto:yingzhen.qu@huawei.com>\";\n     description\n       \"This
    YANG module defines essential components for the management\n        of a routing
    subsystem.  The model fully conforms to the Network\n        Management Datastore
    Architecture (NMDA).\n        Copyright (c) 2018 IETF Trust and the persons\n
    \       identified as authors of the code.  All rights reserved.\n        Redistribution
    and use in source and binary forms, with or\n        without modification, is
    permitted pursuant to, and subject\n        to the license terms contained in,
    the Simplified BSD License\n        set forth in Section 4.c of the IETF Trust's
    Legal Provisions\n        Relating to IETF Documents\n        (https://trustee.ietf.org/license-info).\n
    \       This version of this YANG module is part of RFC 8349; see\n        the
    RFC itself for full legal notices.\";\n     revision 2018-03-13 {\n       description\n
    \        \"Network Management Datastore Architecture (NMDA) revision.\";\n       reference\n
    \        \"RFC 8349: A YANG Data Model for Routing Management\n                    (NMDA
    Version)\";\n     }\n     revision 2016-11-04 {\n          description\n            \"Initial
    revision.\";\n          reference\n            \"RFC 8022: A YANG Data Model for
    Routing Management\";\n     }\n     /* Features */\n     feature multiple-ribs
    {\n       description\n         \"This feature indicates that the server supports\n
    \         user-defined RIBs.\n          Servers that do not advertise this feature
    SHOULD provide\n          exactly one system-controlled RIB per supported address
    family\n          and also make it the default RIB.  This RIB then appears as
    an\n          entry in the list '/routing/ribs/rib'.\";\n     }\n     feature
    router-id {\n       description\n         \"This feature indicates that the server
    supports an explicit\n          32-bit router ID that is used by some routing
    protocols.\n          Servers that do not advertise this feature set a router
    ID\n          algorithmically, usually to one of the configured IPv4\n          addresses.
    \ However, this algorithm is implementation\n          specific.\";\n     }\n
    \    /* Identities */\n     identity address-family {\n       description\n         \"Base
    identity from which identities describing address\n          families are derived.\";\n
    \    }\n     identity ipv4 {\n       base address-family;\n       description\n
    \        \"This identity represents an IPv4 address family.\";\n     }\n     identity
    ipv6 {\n       base address-family;\n       description\n         \"This identity
    represents an IPv6 address family.\";\n     }\n     identity control-plane-protocol
    {\n       description\n         \"Base identity from which control-plane protocol
    identities are\n          derived.\";\n     }\n     identity routing-protocol
    {\n       base control-plane-protocol;\n       description\n         \"Identity
    from which Layer 3 routing protocol identities are\n          derived.\";\n     }\n
    \    identity direct {\n       base routing-protocol;\n       description\n         \"Routing
    pseudo-protocol that provides routes to directly\n          connected networks.\";\n
    \    }\n     identity static {\n       base routing-protocol;\n       description\n
    \        \"'Static' routing pseudo-protocol.\";\n     }\n     /* Type Definitions
    */\n     typedef route-preference {\n       type uint32;\n       description\n
    \        \"This type is used for route preferences.\";\n     }\n     /* Groupings
    */\n     grouping address-family {\n       description\n         \"This grouping
    provides a leaf identifying an address\n          family.\";\n       leaf address-family
    {\n         type identityref {\n           base address-family;\n         }\n
    \        mandatory true;\n         description\n           \"Address family.\";\n
    \      }\n     }\n     grouping router-id {\n       description\n         \"This
    grouping provides a router ID.\";\n       leaf router-id {\n         type yang:dotted-quad;\n
    \        description\n           \"A 32-bit number in the form of a dotted quad
    that is used by\n            some routing protocols identifying a router.\";\n
    \        reference\n           \"RFC 2328: OSPF Version 2\";\n       }\n     }\n
    \    grouping special-next-hop {\n       description\n         \"This grouping
    provides a leaf with an enumeration of special\n          next hops.\";\n       leaf
    special-next-hop {\n         type enumeration {\n           enum blackhole {\n
    \            description\n               \"Silently discard the packet.\";\n           }\n
    \          enum unreachable {\n             description\n               \"Discard
    the packet and notify the sender with an error\n                message indicating
    that the destination host is\n                unreachable.\";\n           }\n
    \          enum prohibit {\n             description\n               \"Discard
    the packet and notify the sender with an error\n                message indicating
    that the communication is\n                administratively prohibited.\";\n           }\n
    \          enum receive {\n             description\n               \"The packet
    will be received by the local system.\";\n           }\n         }\n         description\n
    \          \"Options for special next hops.\";\n       }\n     }\n     grouping
    next-hop-content {\n       description\n         \"Generic parameters of next
    hops in static routes.\";\n       choice next-hop-options {\n         mandatory
    true;\n         description\n           \"Options for next hops in static routes.\n
    \           It is expected that further cases will be added through\n            augments
    from other modules.\";\n         case simple-next-hop {\n           description\n
    \            \"This case represents a simple next hop consisting of the\n              next-hop
    address and/or outgoing interface.\n              Modules for address families
    MUST augment this case with a\n              leaf containing a next-hop address
    of that address\n              family.\";\n           leaf outgoing-interface
    {\n             type if:interface-ref;\n             description\n               \"Name
    of the outgoing interface.\";\n           }\n         }\n         case special-next-hop
    {\n           uses special-next-hop;\n         }\n         case next-hop-list
    {\n           container next-hop-list {\n             description\n               \"Container
    for multiple next hops.\";\n             list next-hop {\n               key \"index\";\n
    \              description\n                 \"An entry in a next-hop list.\n
    \                 Modules for address families MUST augment this list\n                  with
    a leaf containing a next-hop address of that\n                  address family.\";\n
    \              leaf index {\n                 type string;\n                 description\n
    \                  \"A user-specified identifier utilized to uniquely\n                    reference
    the next-hop entry in the next-hop list.\n                    The value of this
    index has no semantic meaning\n                    other than for referencing
    the entry.\";\n               }\n               leaf outgoing-interface {\n                 type
    if:interface-ref;\n                 description\n                   \"Name of
    the outgoing interface.\";\n               }\n             }\n           }\n         }\n
    \      }\n     }\n     grouping next-hop-state-content {\n       description\n
    \        \"Generic state parameters of next hops.\";\n       choice next-hop-options
    {\n         mandatory true;\n         description\n           \"Options for next
    hops.\n            It is expected that further cases will be added through\n            augments
    from other modules, e.g., for recursive\n            next hops.\";\n         case
    simple-next-hop {\n           description\n             \"This case represents
    a simple next hop consisting of the\n              next-hop address and/or outgoing
    interface.\n              Modules for address families MUST augment this case
    with a\n              leaf containing a next-hop address of that address\n              family.\";\n
    \          leaf outgoing-interface {\n             type if:interface-ref;\n             description\n
    \              \"Name of the outgoing interface.\";\n           }\n         }\n
    \        case special-next-hop {\n           uses special-next-hop;\n         }\n
    \        case next-hop-list {\n           container next-hop-list {\n             description\n
    \              \"Container for multiple next hops.\";\n             list next-hop
    {\n               description\n                 \"An entry in a next-hop list.\n
    \                 Modules for address families MUST augment this list\n                  with
    a leaf containing a next-hop address of that\n                  address family.\";\n
    \              leaf outgoing-interface {\n                 type if:interface-ref;\n
    \                description\n                   \"Name of the outgoing interface.\";\n
    \              }\n             }\n           }\n         }\n       }\n     }\n
    \    grouping route-metadata {\n       description\n         \"Common route metadata.\";\n
    \      leaf source-protocol {\n         type identityref {\n           base routing-protocol;\n
    \        }\n         mandatory true;\n         description\n           \"Type
    of the routing protocol from which the route\n            originated.\";\n       }\n
    \      leaf active {\n         type empty;\n         description\n           \"The
    presence of this leaf indicates that the route is\n            preferred among
    all routes in the same RIB that have the\n            same destination prefix.\";\n
    \      }\n       leaf last-updated {\n         type yang:date-and-time;\n         description\n
    \          \"Timestamp of the last modification of the route.  If the\n            route
    was never modified, it is the time when the route was\n            inserted into
    the RIB.\";\n       }\n     }\n     /* Data nodes */\n     container routing {\n
    \      description\n         \"Configuration parameters for the routing subsystem.\";\n
    \      uses router-id {\n         if-feature \"router-id\";\n         description\n
    \          \"Support for the global router ID.  Routing protocols\n            that
    use a router ID can use this parameter or override it\n            with another
    value.\";\n       }\n       container interfaces {\n         config false;\n         description\n
    \          \"Network-layer interfaces used for routing.\";\n         leaf-list
    interface {\n           type if:interface-ref;\n           description\n             \"Each
    entry is a reference to the name of a configured\n              network-layer
    interface.\";\n         }\n       }\n       container control-plane-protocols
    {\n         description\n           \"Support for control-plane protocol instances.\";\n
    \        list control-plane-protocol {\n           key \"type name\";\n           description\n
    \            \"Each entry contains a control-plane protocol instance.\";\n           leaf
    type {\n             type identityref {\n               base control-plane-protocol;\n
    \            }\n             description\n               \"Type of the control-plane
    protocol -- an identity\n                derived from the 'control-plane-protocol'\n
    \               base identity.\";\n           }\n           leaf name {\n             type
    string;\n             description\n               \"An arbitrary name of the control-plane
    protocol\n                instance.\";\n           }\n           leaf description
    {\n             type string;\n             description\n               \"Textual
    description of the control-plane protocol\n                instance.\";\n           }\n
    \          container static-routes {\n             when \"derived-from-or-self(../type,
    'rt:static')\" {\n               description\n                 \"This container
    is only valid for the 'static' routing\n                  protocol.\";\n             }\n
    \            description\n               \"Support for the 'static' pseudo-protocol.\n
    \               Address-family-specific modules augment this node with\n                their
    lists of routes.\";\n           }\n         }\n       }\n       container ribs
    {\n         description\n           \"Support for RIBs.\";\n         list rib
    {\n           key \"name\";\n           description\n             \"Each entry
    contains a configuration for a RIB identified\n              by the 'name' key.\n
    \             Entries having the same key as a system-controlled entry\n              in
    the list '/routing/ribs/rib' are used for\n              configuring parameters
    of that entry.  Other entries\n              define additional user-controlled
    RIBs.\";\n           leaf name {\n             type string;\n             description\n
    \              \"The name of the RIB.\n                For system-controlled entries,
    the value of this leaf\n                must be the same as the name of the corresponding
    entry\n                in the operational state.\n                For user-controlled
    entries, an arbitrary name can be\n                used.\";\n           }\n           uses
    address-family {\n             description\n               \"The address family
    of the system-controlled RIB.\";\n           }\n           leaf default-rib {\n
    \            if-feature \"multiple-ribs\";\n             type boolean;\n             default
    \"true\";\n             config false;\n             description\n               \"This
    flag has the value of 'true' if and only if the RIB\n                is the default
    RIB for the given address family.\n                By default, control-plane protocols
    place their routes\n                in the default RIBs.\";\n           }\n           container
    routes {\n             config false;\n             description\n               \"Current
    contents of the RIB.\";\n             list route {\n               description\n
    \                \"A RIB route entry.  This data node MUST be augmented\n                  with
    information specific to routes of each address\n                  family.\";\n
    \              leaf route-preference {\n                 type route-preference;\n
    \                description\n                   \"This route attribute, also
    known as 'administrative\n                    distance', allows for selecting
    the preferred route\n                    among routes with the same destination
    prefix.  A\n                    smaller value indicates a route that is\n                    more
    preferred.\";\n               }\n               container next-hop {\n                 description\n
    \                  \"Route's next-hop attribute.\";\n                 uses next-hop-state-content;\n
    \              }\n               uses route-metadata;\n             }\n           }\n
    \          action active-route {\n             description\n               \"Return
    the active RIB route that is used for the\n                destination address.\n
    \               Address-family-specific modules MUST augment input\n                parameters
    with a leaf named 'destination-address'.\";\n             output {\n               container
    route {\n                 description\n                   \"The active RIB route
    for the specified destination.\n                    If no route exists in the
    RIB for the destination\n                    address, no output is returned.\n
    \                   Address-family-specific modules MUST augment this\n                    container
    with appropriate route contents.\";\n                 container next-hop {\n                   description\n
    \                    \"Route's next-hop attribute.\";\n                   uses
    next-hop-state-content;\n                 }\n                 uses route-metadata;\n
    \              }\n             }\n           }\n           leaf description {\n
    \            type string;\n             description\n               \"Textual
    description of the RIB.\";\n           }\n         }\n       }\n     }\n     /*\n
    \     * The subsequent data nodes are obviated and obsoleted\n      * by the Network
    Management Datastore Architecture\n      * as described in RFC 8342.\n      */\n
    \    container routing-state {\n       config false;\n       status obsolete;\n
    \      description\n         \"State data of the routing subsystem.\";\n       uses
    router-id {\n         status obsolete;\n         description\n           \"Global
    router ID.\n            It may be either configured or assigned algorithmically
    by\n            the implementation.\";\n       }\n       container interfaces
    {\n         status obsolete;\n         description\n           \"Network-layer
    interfaces used for routing.\";\n         leaf-list interface {\n           type
    if:interface-state-ref;\n           status obsolete;\n           description\n
    \            \"Each entry is a reference to the name of a configured\n              network-layer
    interface.\";\n         }\n       }\n       container control-plane-protocols
    {\n         status obsolete;\n         description\n           \"Container for
    the list of routing protocol instances.\";\n         list control-plane-protocol
    {\n           key \"type name\";\n           status obsolete;\n           description\n
    \            \"State data of a control-plane protocol instance.\n              An
    implementation MUST provide exactly one\n              system-controlled instance
    of the 'direct'\n              pseudo-protocol.  Instances of other control-plane\n
    \             protocols MAY be created by configuration.\";\n           leaf type
    {\n             type identityref {\n               base control-plane-protocol;\n
    \            }\n             status obsolete;\n             description\n               \"Type
    of the control-plane protocol.\";\n           }\n           leaf name {\n             type
    string;\n             status obsolete;\n             description\n               \"The
    name of the control-plane protocol instance.\n                For system-controlled
    instances, this name is\n                persistent, i.e., it SHOULD NOT change
    across\n                reboots.\";\n           }\n         }\n       }\n       container
    ribs {\n         status obsolete;\n         description\n           \"Container
    for RIBs.\";\n         list rib {\n           key \"name\";\n           min-elements
    1;\n           status obsolete;\n           description\n             \"Each entry
    represents a RIB identified by the 'name'\n              key.  All routes in a
    RIB MUST belong to the same address\n              family.\n              An implementation
    SHOULD provide one system-controlled\n              default RIB for each supported
    address family.\";\n           leaf name {\n             type string;\n             status
    obsolete;\n             description\n               \"The name of the RIB.\";\n
    \          }\n           uses address-family {\n             status obsolete;\n
    \            description\n               \"The address family of the RIB.\";\n
    \          }\n           leaf default-rib {\n             if-feature \"multiple-ribs\";\n
    \            type boolean;\n             default \"true\";\n             status
    obsolete;\n             description\n               \"This flag has the value
    of 'true' if and only if the\n                RIB is the default RIB for the given
    address family.\n                By default, control-plane protocols place their
    routes\n                in the default RIBs.\";\n           }\n           container
    routes {\n             status obsolete;\n             description\n               \"Current
    contents of the RIB.\";\n             list route {\n               status obsolete;\n
    \              description\n                 \"A RIB route entry.  This data node
    MUST be augmented\n                  with information specific to routes of each
    address\n                  family.\";\n               leaf route-preference {\n
    \                type route-preference;\n                 status obsolete;\n                 description\n
    \                  \"This route attribute, also known as 'administrative\n                    distance',
    allows for selecting the preferred route\n                    among routes with
    the same destination prefix.  A\n                    smaller value indicates a
    route that is\n                    more preferred.\";\n               }\n               container
    next-hop {\n                 status obsolete;\n                 description\n
    \                  \"Route's next-hop attribute.\";\n                 uses next-hop-state-content
    {\n                   status obsolete;\n                   description\n                     \"Route's
    next-hop attribute operational state.\";\n                 }\n               }\n
    \              uses route-metadata {\n                 status obsolete;\n                 description\n
    \                  \"Route metadata.\";\n               }\n             }\n           }\n
    \          action active-route {\n             status obsolete;\n             description\n
    \              \"Return the active RIB route that is used for the\n                destination
    address.\n                Address-family-specific modules MUST augment input\n
    \               parameters with a leaf named 'destination-address'.\";\n             output
    {\n               container route {\n                 status obsolete;\n                 description\n
    \                  \"The active RIB route for the specified\n                    destination.\n
    \                   If no route exists in the RIB for the destination\n                    address,
    no output is returned.\n                    Address-family-specific modules MUST
    augment this\n                    container with appropriate route contents.\";\n
    \                container next-hop {\n                   status obsolete;\n                   description\n
    \                    \"Route's next-hop attribute.\";\n                   uses
    next-hop-state-content {\n                     status obsolete;\n                     description\n
    \                      \"Active route state data.\";\n                   }\n                 }\n
    \                uses route-metadata {\n                   status obsolete;\n
    \                  description\n                     \"Active route metadata.\";\n
    \                }\n               }\n             }\n           }\n         }\n
    \      }\n     }\n   }\n   <CODE ENDS>\n"
  title: 7.  Routing Management YANG Module
- contents:
  - "8.  IPv4 Unicast Routing Management YANG Module\n   <CODE BEGINS> file \"ietf-ipv4-unicast-routing@2018-03-13.yang\"\n
    \  module ietf-ipv4-unicast-routing {\n     yang-version \"1.1\";\n     namespace\n
    \      \"urn:ietf:params:xml:ns:yang:ietf-ipv4-unicast-routing\";\n     prefix
    \"v4ur\";\n     import ietf-routing {\n       prefix \"rt\";\n       description\n
    \        \"An 'ietf-routing' module version that is compatible with\n          the
    Network Management Datastore Architecture (NMDA)\n          is required.\";\n
    \    }\n     import ietf-inet-types {\n       prefix \"inet\";\n     }\n     organization\n
    \      \"IETF NETMOD (Network Modeling) Working Group\";\n     contact\n       \"WG
    Web:   <https://datatracker.ietf.org/wg/netmod/>\n        WG List:  <mailto:rtgwg@ietf.org>\n
    \       Editor:   Ladislav Lhotka\n                  <mailto:lhotka@nic.cz>\n
    \                 Acee Lindem\n                  <mailto:acee@cisco.com>\n                  Yingzhen
    Qu\n                  <mailto:yingzhen.qu@huawei.com>\";\n     description\n       \"This
    YANG module augments the 'ietf-routing' module with basic\n        parameters
    for IPv4 unicast routing.  The model fully conforms\n        to the Network Management
    Datastore Architecture (NMDA).\n        Copyright (c) 2018 IETF Trust and the
    persons\n        identified as authors of the code.  All rights reserved.\n        Redistribution
    and use in source and binary forms, with or\n        without modification, is
    permitted pursuant to, and subject\n        to the license terms contained in,
    the Simplified BSD License\n        set forth in Section 4.c of the IETF Trust's
    Legal Provisions\n        Relating to IETF Documents\n        (https://trustee.ietf.org/license-info).\n
    \       This version of this YANG module is part of RFC 8349; see\n        the
    RFC itself for full legal notices.\";\n     revision 2018-03-13 {\n       description\n
    \        \"Network Management Datastore Architecture (NMDA) revision.\";\n       reference\n
    \        \"RFC 8349: A YANG Data Model for Routing Management\n                    (NMDA
    Version)\";\n     }\n     revision 2016-11-04 {\n          description\n            \"Initial
    revision.\";\n          reference\n            \"RFC 8022: A YANG Data Model for
    Routing Management\";\n     }\n     /* Identities */\n     identity ipv4-unicast
    {\n       base rt:ipv4;\n       description\n         \"This identity represents
    the IPv4 unicast address family.\";\n     }\n     augment \"/rt:routing/rt:ribs/rt:rib/rt:routes/rt:route\"
    {\n       when \"derived-from-or-self(../../rt:address-family, \"\n          +
    \"'v4ur:ipv4-unicast')\" {\n         description\n           \"This augment is
    valid only for IPv4 unicast.\";\n       }\n       description\n         \"This
    leaf augments an IPv4 unicast route.\";\n       leaf destination-prefix {\n         type
    inet:ipv4-prefix;\n         description\n           \"IPv4 destination prefix.\";\n
    \      }\n     }\n     augment \"/rt:routing/rt:ribs/rt:rib/rt:routes/rt:route/\"\n
    \          + \"rt:next-hop/rt:next-hop-options/rt:simple-next-hop\" {\n       when
    \"derived-from-or-self(../../../rt:address-family, \"\n          + \"'v4ur:ipv4-unicast')\"
    {\n         description\n           \"This augment is valid only for IPv4 unicast.\";\n
    \      }\n       description\n         \"Augments the 'simple-next-hop' case in
    IPv4 unicast routes.\";\n       leaf next-hop-address {\n         type inet:ipv4-address;\n
    \        description\n           \"IPv4 address of the next hop.\";\n       }\n
    \    }\n     augment \"/rt:routing/rt:ribs/rt:rib/rt:routes/rt:route/\"\n           +
    \"rt:next-hop/rt:next-hop-options/rt:next-hop-list/\"\n           + \"rt:next-hop-list/rt:next-hop\"
    {\n       when \"derived-from-or-self(../../../../../rt:address-family, \"\n          +
    \"'v4ur:ipv4-unicast')\" {\n         description\n           \"This augment is
    valid only for IPv4 unicast.\";\n       }\n       description\n         \"This
    leaf augments the 'next-hop-list' case of IPv4 unicast\n          routes.\";\n
    \      leaf address {\n         type inet:ipv4-address;\n         description\n
    \          \"IPv4 address of the next hop.\";\n       }\n     }\n     augment\n
    \      \"/rt:routing/rt:ribs/rt:rib/rt:active-route/rt:input\" {\n       when
    \"derived-from-or-self(../rt:address-family, \"\n          + \"'v4ur:ipv4-unicast')\"
    {\n         description\n           \"This augment is valid only for IPv4 unicast
    RIBs.\";\n       }\n       description\n         \"This augment adds the input
    parameter of the 'active-route'\n          action.\";\n       leaf destination-address
    {\n         type inet:ipv4-address;\n         description\n           \"IPv4 destination
    address.\";\n       }\n     }\n     augment \"/rt:routing/rt:ribs/rt:rib/rt:active-route/\"\n
    \          + \"rt:output/rt:route\" {\n       when \"derived-from-or-self(../../rt:address-family,
    \"\n          + \"'v4ur:ipv4-unicast')\" {\n         description\n           \"This
    augment is valid only for IPv4 unicast.\";\n       }\n       description\n         \"This
    augment adds the destination prefix to the reply of the\n          'active-route'
    action.\";\n       leaf destination-prefix {\n         type inet:ipv4-prefix;\n
    \        description\n           \"IPv4 destination prefix.\";\n       }\n     }\n
    \    augment \"/rt:routing/rt:ribs/rt:rib/rt:active-route/\"\n           + \"rt:output/rt:route/rt:next-hop/rt:next-hop-options/\"\n
    \          + \"rt:simple-next-hop\" {\n       when \"derived-from-or-self(../../../rt:address-family,
    \"\n          + \"'v4ur:ipv4-unicast')\" {\n         description\n           \"This
    augment is valid only for IPv4 unicast.\";\n       }\n       description\n         \"Augments
    the 'simple-next-hop' case in the reply to the\n          'active-route' action.\";\n
    \      leaf next-hop-address {\n         type inet:ipv4-address;\n         description\n
    \          \"IPv4 address of the next hop.\";\n       }\n     }\n     augment
    \"/rt:routing/rt:ribs/rt:rib/rt:active-route/\"\n           + \"rt:output/rt:route/rt:next-hop/rt:next-hop-options/\"\n
    \          + \"rt:next-hop-list/rt:next-hop-list/rt:next-hop\" {\n       when
    \"derived-from-or-self(../../../../../rt:address-family, \"\n          + \"'v4ur:ipv4-unicast')\"
    {\n         description\n           \"This augment is valid only for IPv4 unicast.\";\n
    \      }\n       description\n         \"Augments the 'next-hop-list' case in
    the reply to the\n          'active-route' action.\";\n       leaf next-hop-address
    {\n         type inet:ipv4-address;\n         description\n           \"IPv4 address
    of the next hop.\";\n       }\n     }\n     augment \"/rt:routing/rt:control-plane-protocols/\"\n
    \          + \"rt:control-plane-protocol/rt:static-routes\" {\n       description\n
    \        \"This augment defines the 'static' pseudo-protocol\n          with data
    specific to IPv4 unicast.\";\n       container ipv4 {\n         description\n
    \          \"Support for a 'static' pseudo-protocol instance\n            consists
    of a list of routes.\";\n         list route {\n           key \"destination-prefix\";\n
    \          description\n             \"A list of static routes.\";\n           leaf
    destination-prefix {\n             type inet:ipv4-prefix;\n             mandatory
    true;\n             description\n               \"IPv4 destination prefix.\";\n
    \          }\n           leaf description {\n             type string;\n             description\n
    \              \"Textual description of the route.\";\n           }\n           container
    next-hop {\n             description\n               \"Support for next-hop.\";\n
    \            uses rt:next-hop-content {\n               augment \"next-hop-options/simple-next-hop\"
    {\n                 description\n                   \"Augments the 'simple-next-hop'
    case in IPv4 static\n                    routes.\";\n                 leaf next-hop-address
    {\n                   type inet:ipv4-address;\n                   description\n
    \                    \"IPv4 address of the next hop.\";\n                 }\n
    \              }\n               augment \"next-hop-options/next-hop-list/next-hop-list/\"\n
    \                    + \"next-hop\" {\n                 description\n                   \"Augments
    the 'next-hop-list' case in IPv4 static\n                    routes.\";\n                 leaf
    next-hop-address {\n                   type inet:ipv4-address;\n                   description\n
    \                    \"IPv4 address of the next hop.\";\n                 }\n
    \              }\n             }\n           }\n         }\n       }\n     }\n
    \    /*\n      * The subsequent data nodes are obviated and obsoleted\n      *
    by the Network Management Datastore Architecture\n      * as described in RFC
    8342.\n      */\n     augment \"/rt:routing-state/rt:ribs/rt:rib/rt:routes/rt:route\"
    {\n       when \"derived-from-or-self(../../rt:address-family, \"\n            +
    \"'v4ur:ipv4-unicast')\" {\n         description\n           \"This augment is
    valid only for IPv4 unicast.\";\n       }\n       status obsolete;\n       description\n
    \        \"This leaf augments an IPv4 unicast route.\";\n       leaf destination-prefix
    {\n         type inet:ipv4-prefix;\n         status obsolete;\n         description\n
    \          \"IPv4 destination prefix.\";\n       }\n     }\n     augment \"/rt:routing-state/rt:ribs/rt:rib/rt:routes/rt:route/\"\n
    \            + \"rt:next-hop/rt:next-hop-options/rt:simple-next-hop\" {\n       when
    \"derived-from-or-self(\n               ../../../rt:address-family, 'v4ur:ipv4-unicast')\"
    {\n         description\n           \"This augment is valid only for IPv4 unicast.\";\n
    \      }\n       status obsolete;\n       description\n         \"Augments the
    'simple-next-hop' case in IPv4 unicast routes.\";\n       leaf next-hop-address
    {\n         type inet:ipv4-address;\n         status obsolete;\n         description\n
    \          \"IPv4 address of the next hop.\";\n       }\n     }\n     augment
    \"/rt:routing-state/rt:ribs/rt:rib/rt:routes/rt:route/\"\n             + \"rt:next-hop/rt:next-hop-options/rt:next-hop-list/\"\n
    \            + \"rt:next-hop-list/rt:next-hop\" {\n       when \"derived-from-or-self(../../../../../rt:address-family,\n
    \              'v4ur:ipv4-unicast')\" {\n         description\n           \"This
    augment is valid only for IPv4 unicast.\";\n       }\n       status obsolete;\n
    \      description\n         \"This leaf augments the 'next-hop-list' case of
    IPv4 unicast\n          routes.\";\n       leaf address {\n         type inet:ipv4-address;\n
    \        status obsolete;\n         description\n           \"IPv4 address of
    the next hop.\";\n       }\n     }\n     augment \"/rt:routing-state/rt:ribs/rt:rib/rt:active-route/\"\n
    \            + \"rt:input\" {\n       when \"derived-from-or-self(../rt:address-family,\n
    \              'v4ur:ipv4-unicast')\" {\n         description\n           \"This
    augment is valid only for IPv4 unicast RIBs.\";\n       }\n       status obsolete;\n
    \      description\n         \"This augment adds the input parameter of the 'active-route'\n
    \         action.\";\n       leaf destination-address {\n         type inet:ipv4-address;\n
    \        status obsolete;\n         description\n           \"IPv4 destination
    address.\";\n       }\n     }\n     augment \"/rt:routing-state/rt:ribs/rt:rib/rt:active-route/\"\n
    \            + \"rt:output/rt:route\" {\n       when \"derived-from-or-self(../../rt:address-family,\n
    \              'v4ur:ipv4-unicast')\" {\n         description\n           \"This
    augment is valid only for IPv4 unicast.\";\n       }\n       status obsolete;\n
    \      description\n         \"This augment adds the destination prefix to the
    reply of the\n          'active-route' action.\";\n       leaf destination-prefix
    {\n         type inet:ipv4-prefix;\n         status obsolete;\n         description\n
    \          \"IPv4 destination prefix.\";\n       }\n     }\n     augment \"/rt:routing-state/rt:ribs/rt:rib/rt:active-route/\"\n
    \            + \"rt:output/rt:route/rt:next-hop/rt:next-hop-options/\"\n             +
    \"rt:simple-next-hop\" {\n       when \"derived-from-or-self(../../../rt:address-family,\n
    \              'v4ur:ipv4-unicast')\" {\n         description\n           \"This
    augment is valid only for IPv4 unicast.\";\n       }\n       status obsolete;\n
    \      description\n         \"Augments the 'simple-next-hop' case in the reply
    to the\n          'active-route' action.\";\n       leaf next-hop-address {\n
    \        type inet:ipv4-address;\n         status obsolete;\n         description\n
    \          \"IPv4 address of the next hop.\";\n       }\n     }\n     augment
    \"/rt:routing-state/rt:ribs/rt:rib/rt:active-route/\"\n             + \"rt:output/rt:route/rt:next-hop/rt:next-hop-options/\"\n
    \            + \"rt:next-hop-list/rt:next-hop-list/rt:next-hop\" {\n       when
    \"derived-from-or-self(../../../../../rt:address-family,\n               'v4ur:ipv4-unicast')\"
    {\n         description\n           \"This augment is valid only for IPv4 unicast.\";\n
    \      }\n       status obsolete;\n       description\n         \"Augments the
    'next-hop-list' case in the reply to the\n          'active-route' action.\";\n
    \      leaf next-hop-address {\n         type inet:ipv4-address;\n         status
    obsolete;\n         description\n           \"IPv4 address of the next hop.\";\n
    \      }\n     }\n   }\n   <CODE ENDS>\n"
  title: 8.  IPv4 Unicast Routing Management YANG Module
- contents:
  - "9.  IPv6 Unicast Routing Management YANG Module\n   <CODE BEGINS> file \"ietf-ipv6-unicast-routing@2018-03-13.yang\"\n
    \  module ietf-ipv6-unicast-routing {\n     yang-version \"1.1\";\n     namespace\n
    \      \"urn:ietf:params:xml:ns:yang:ietf-ipv6-unicast-routing\";\n     prefix
    \"v6ur\";\n     import ietf-routing {\n       prefix \"rt\";\n       description\n
    \        \"An 'ietf-routing' module version that is compatible with\n          the
    Network Management Datastore Architecture (NMDA)\n          is required.\";\n
    \    }\n     import ietf-inet-types {\n       prefix \"inet\";\n       description\n
    \        \"An 'ietf-interfaces' module version that is compatible with\n          the
    Network Management Datastore Architecture (NMDA)\n          is required.\";\n
    \    }\n     include ietf-ipv6-router-advertisements {\n       revision-date 2018-03-13;\n
    \    }\n     organization\n       \"IETF NETMOD (Network Modeling) Working Group\";\n
    \    contact\n       \"WG Web:   <https://datatracker.ietf.org/wg/netmod/>\n        WG
    List:  <mailto:rtgwg@ietf.org>\n        Editor:   Ladislav Lhotka\n                  <mailto:lhotka@nic.cz>\n
    \                 Acee Lindem\n                  <mailto:acee@cisco.com>\n                  Yingzhen
    Qu\n                  <mailto:yingzhen.qu@huawei.com>\";\n     description\n       \"This
    YANG module augments the 'ietf-routing' module with basic\n        parameters
    for IPv6 unicast routing.  The model fully conforms\n        to the Network Management
    Datastore Architecture (NMDA).\n        Copyright (c) 2018 IETF Trust and the
    persons\n        identified as authors of the code.  All rights reserved.\n        Redistribution
    and use in source and binary forms, with or\n        without modification, is
    permitted pursuant to, and subject\n        to the license terms contained in,
    the Simplified BSD License\n        set forth in Section 4.c of the IETF Trust's
    Legal Provisions\n        Relating to IETF Documents\n        (https://trustee.ietf.org/license-info).\n
    \       This version of this YANG module is part of RFC 8349; see\n        the
    RFC itself for full legal notices.\";\n     revision 2018-03-13 {\n       description\n
    \        \"Network Management Datastore Architecture (NMDA) revision.\";\n       reference\n
    \        \"RFC 8349: A YANG Data Model for Routing Management\n                    (NMDA
    Version)\";\n     }\n     /* Identities */\n     revision 2016-11-04 {\n          description\n
    \           \"Initial revision.\";\n          reference\n            \"RFC 8022:
    A YANG Data Model for Routing Management\";\n     }\n     identity ipv6-unicast
    {\n       base rt:ipv6;\n       description\n         \"This identity represents
    the IPv6 unicast address family.\";\n     }\n     augment \"/rt:routing/rt:ribs/rt:rib/rt:routes/rt:route\"
    {\n       when \"derived-from-or-self(../../rt:address-family, \"\n          +
    \"'v6ur:ipv6-unicast')\" {\n         description\n           \"This augment is
    valid only for IPv6 unicast.\";\n       }\n       description\n         \"This
    leaf augments an IPv6 unicast route.\";\n       leaf destination-prefix {\n         type
    inet:ipv6-prefix;\n         description\n           \"IPv6 destination prefix.\";\n
    \      }\n     }\n     augment \"/rt:routing/rt:ribs/rt:rib/rt:routes/rt:route/\"\n
    \          + \"rt:next-hop/rt:next-hop-options/rt:simple-next-hop\" {\n       when
    \"derived-from-or-self(../../../rt:address-family, \"\n          + \"'v6ur:ipv6-unicast')\"
    {\n         description\n           \"This augment is valid only for IPv6 unicast.\";\n
    \      }\n       description\n         \"Augments the 'simple-next-hop' case in
    IPv6 unicast routes.\";\n       leaf next-hop-address {\n         type inet:ipv6-address;\n
    \        description\n           \"IPv6 address of the next hop.\";\n       }\n
    \    }\n     augment \"/rt:routing/rt:ribs/rt:rib/rt:routes/rt:route/\"\n           +
    \"rt:next-hop/rt:next-hop-options/rt:next-hop-list/\"\n           + \"rt:next-hop-list/rt:next-hop\"
    {\n       when \"derived-from-or-self(../../../../../rt:address-family, \"\n          +
    \"'v6ur:ipv6-unicast')\" {\n         description\n           \"This augment is
    valid only for IPv6 unicast.\";\n       }\n       description\n         \"This
    leaf augments the 'next-hop-list' case of IPv6 unicast\n          routes.\";\n
    \      leaf address {\n         type inet:ipv6-address;\n         description\n
    \          \"IPv6 address of the next hop.\";\n       }\n     }\n     augment\n
    \      \"/rt:routing/rt:ribs/rt:rib/rt:active-route/rt:input\" {\n       when
    \"derived-from-or-self(../rt:address-family, \"\n          + \"'v6ur:ipv6-unicast')\"
    {\n         description\n           \"This augment is valid only for IPv6 unicast
    RIBs.\";\n       }\n       description\n         \"This augment adds the input
    parameter of the 'active-route'\n          action.\";\n       leaf destination-address
    {\n         type inet:ipv6-address;\n         description\n           \"IPv6 destination
    address.\";\n       }\n     }\n     augment \"/rt:routing/rt:ribs/rt:rib/rt:active-route/\"\n
    \          + \"rt:output/rt:route\" {\n       when \"derived-from-or-self(../../rt:address-family,
    \"\n          + \"'v6ur:ipv6-unicast')\" {\n         description\n           \"This
    augment is valid only for IPv6 unicast.\";\n       }\n       description\n         \"This
    augment adds the destination prefix to the reply of the\n          'active-route'
    action.\";\n       leaf destination-prefix {\n         type inet:ipv6-prefix;\n
    \        description\n           \"IPv6 destination prefix.\";\n       }\n     }\n
    \    augment \"/rt:routing/rt:ribs/rt:rib/rt:active-route/\"\n           + \"rt:output/rt:route/rt:next-hop/rt:next-hop-options/\"\n
    \          + \"rt:simple-next-hop\" {\n       when \"derived-from-or-self(../../../rt:address-family,
    \"\n          + \"'v6ur:ipv6-unicast')\" {\n         description\n           \"This
    augment is valid only for IPv6 unicast.\";\n       }\n       description\n         \"Augments
    the 'simple-next-hop' case in the reply to the\n          'active-route' action.\";\n
    \      leaf next-hop-address {\n         type inet:ipv6-address;\n         description\n
    \          \"IPv6 address of the next hop.\";\n       }\n     }\n     augment
    \"/rt:routing/rt:ribs/rt:rib/rt:active-route/\"\n           + \"rt:output/rt:route/rt:next-hop/rt:next-hop-options/\"\n
    \          + \"rt:next-hop-list/rt:next-hop-list/rt:next-hop\" {\n       when
    \"derived-from-or-self(../../../../../rt:address-family, \"\n          + \"'v6ur:ipv6-unicast')\"
    {\n         description\n           \"This augment is valid only for IPv6 unicast.\";\n
    \      }\n       description\n         \"Augments the 'next-hop-list' case in
    the reply to the\n          'active-route' action.\";\n       leaf next-hop-address
    {\n         type inet:ipv6-address;\n         description\n           \"IPv6 address
    of the next hop.\";\n       }\n     }\n     /* Data node augmentations */\n     augment
    \"/rt:routing/rt:control-plane-protocols/\"\n           + \"rt:control-plane-protocol/rt:static-routes\"
    {\n       description\n         \"This augment defines the 'static' pseudo-protocol\n
    \         with data specific to IPv6 unicast.\";\n       container ipv6 {\n         description\n
    \          \"Support for a 'static' pseudo-protocol instance\n            consists
    of a list of routes.\";\n         list route {\n           key \"destination-prefix\";\n
    \          description\n             \"A list of static routes.\";\n           leaf
    destination-prefix {\n             type inet:ipv6-prefix;\n             mandatory
    true;\n             description\n               \"IPv6 destination prefix.\";\n
    \          }\n           leaf description {\n             type string;\n             description\n
    \              \"Textual description of the route.\";\n           }\n           container
    next-hop {\n             description\n               \"Next hop for the route.\";\n
    \            uses rt:next-hop-content {\n               augment \"next-hop-options/simple-next-hop\"
    {\n                 description\n                   \"Augments the 'simple-next-hop'
    case in IPv6 static\n                    routes.\";\n                 leaf next-hop-address
    {\n                   type inet:ipv6-address;\n                   description\n
    \                    \"IPv6 address of the next hop.\";\n                 }\n
    \              }\n               augment \"next-hop-options/next-hop-list/next-hop-list/\"\n
    \                    + \"next-hop\" {\n                 description\n                   \"Augments
    the 'next-hop-list' case in IPv6 static\n                    routes.\";\n                 leaf
    next-hop-address {\n                   type inet:ipv6-address;\n                   description\n
    \                    \"IPv6 address of the next hop.\";\n                 }\n
    \              }\n             }\n           }\n         }\n       }\n     }\n
    \    /*\n      * The subsequent data nodes are obviated and obsoleted\n      *
    by the Network Management Datastore Architecture\n      * as described in RFC
    8342.\n      */\n     augment \"/rt:routing-state/rt:ribs/rt:rib/rt:routes/rt:route\"
    {\n       when \"derived-from-or-self(../../rt:address-family,\n               'v6ur:ipv6-unicast')\"
    {\n         description\n           \"This augment is valid only for IPv6 unicast.\";\n
    \      }\n       status obsolete;\n       description\n         \"This leaf augments
    an IPv6 unicast route.\";\n       leaf destination-prefix {\n         type inet:ipv6-prefix;\n
    \        status obsolete;\n         description\n           \"IPv6 destination
    prefix.\";\n       }\n     }\n     augment \"/rt:routing-state/rt:ribs/rt:rib/rt:routes/rt:route/\"\n
    \            + \"rt:next-hop/rt:next-hop-options/rt:simple-next-hop\" {\n       when
    \"derived-from-or-self(../../../rt:address-family,\n               'v6ur:ipv6-unicast')\"
    {\n         description\n           \"This augment is valid only for IPv6 unicast.\";\n
    \      }\n       status obsolete;\n       description\n         \"Augments the
    'simple-next-hop' case in IPv6 unicast routes.\";\n       leaf next-hop-address
    {\n         type inet:ipv6-address;\n         status obsolete;\n         description\n
    \          \"IPv6 address of the next hop.\";\n       }\n     }\n     augment
    \"/rt:routing-state/rt:ribs/rt:rib/rt:routes/rt:route/\"\n             + \"rt:next-hop/rt:next-hop-options/rt:next-hop-list/\"\n
    \            + \"rt:next-hop-list/rt:next-hop\" {\n       when \"derived-from-or-self(../../../../../rt:address-family,\n
    \              'v6ur:ipv6-unicast')\" {\n         description\n           \"This
    augment is valid only for IPv6 unicast.\";\n       }\n       status obsolete;\n
    \      description\n         \"This leaf augments the 'next-hop-list' case of
    IPv6 unicast\n          routes.\";\n       leaf address {\n         type inet:ipv6-address;\n
    \        status obsolete;\n         description\n           \"IPv6 address of
    the next hop.\";\n       }\n     }\n     augment \"/rt:routing-state/rt:ribs/rt:rib/\"\n
    \            + \"rt:active-route/rt:input\" {\n       when \"derived-from-or-self(../rt:address-family,\n
    \              'v6ur:ipv6-unicast')\" {\n         description\n           \"This
    augment is valid only for IPv6 unicast RIBs.\";\n       }\n       status obsolete;\n
    \      description\n         \"This augment adds the input parameter of the 'active-route'\n
    \         action.\";\n       leaf destination-address {\n         type inet:ipv6-address;\n
    \        status obsolete;\n         description\n           \"IPv6 destination
    address.\";\n       }\n     }\n     augment \"/rt:routing-state/rt:ribs/rt:rib/rt:active-route/\"\n
    \            + \"rt:output/rt:route\" {\n       when \"derived-from-or-self(../../rt:address-family,\n
    \              'v6ur:ipv6-unicast')\" {\n         description\n           \"This
    augment is valid only for IPv6 unicast.\";\n       }\n       status obsolete;\n
    \      description\n         \"This augment adds the destination prefix to the
    reply of the\n          'active-route' action.\";\n       leaf destination-prefix
    {\n         type inet:ipv6-prefix;\n         status obsolete;\n         description\n
    \          \"IPv6 destination prefix.\";\n       }\n     }\n     augment \"/rt:routing-state/rt:ribs/rt:rib/rt:active-route/\"\n
    \            + \"rt:output/rt:route/rt:next-hop/rt:next-hop-options/\"\n             +
    \"rt:simple-next-hop\" {\n       when \"derived-from-or-self(../../../rt:address-family,\n
    \              'v6ur:ipv6-unicast')\" {\n         description\n           \"This
    augment is valid only for IPv6 unicast.\";\n       }\n       status obsolete;\n
    \      description\n         \"Augments the 'simple-next-hop' case in the reply
    to the\n          'active-route' action.\";\n       leaf next-hop-address {\n
    \        type inet:ipv6-address;\n         status obsolete;\n         description\n
    \          \"IPv6 address of the next hop.\";\n       }\n     }\n     augment
    \"/rt:routing-state/rt:ribs/rt:rib/rt:active-route/\"\n             + \"rt:output/rt:route/rt:next-hop/rt:next-hop-options/\"\n
    \            + \"rt:next-hop-list/rt:next-hop-list/rt:next-hop\" {\n       when
    \"derived-from-or-self(../../../../../rt:address-family,\n               'v6ur:ipv6-unicast')\"
    {\n         description\n           \"This augment is valid only for IPv6 unicast.\";\n
    \      }\n       status obsolete;\n       description\n         \"Augments the
    'next-hop-list' case in the reply to the\n          'active-route' action.\";\n
    \      leaf next-hop-address {\n         type inet:ipv6-address;\n         status
    obsolete;\n         description\n           \"IPv6 address of the next hop.\";\n
    \      }\n     }\n   }\n   <CODE ENDS>\n"
  - contents:
    - "9.1.  IPv6 Router Advertisements Submodule\n   <CODE BEGINS> file \"ietf-ipv6-router-advertisements@2018-03-13.yang\"\n
      \  submodule ietf-ipv6-router-advertisements {\n     yang-version \"1.1\";\n
      \    belongs-to ietf-ipv6-unicast-routing {\n       prefix \"v6ur\";\n     }\n
      \    import ietf-inet-types {\n       prefix \"inet\";\n     }\n     import
      ietf-interfaces {\n       prefix \"if\";\n       description\n         \"An
      'ietf-interfaces' module version that is compatible with\n          the Network
      Management Datastore Architecture (NMDA)\n          is required.\";\n     }\n
      \    import ietf-ip {\n       prefix \"ip\";\n       description\n         \"An
      'ietf-ip' module version that is compatible with\n          the Network Management
      Datastore Architecture (NMDA)\n          is required.\";\n     }\n     organization\n
      \      \"IETF NETMOD (Network Modeling) Working Group\";\n     contact\n       \"WG
      Web:   <https://datatracker.ietf.org/wg/netmod/>\n        WG List:  <mailto:rtgwg@ietf.org>\n
      \       Editor:   Ladislav Lhotka\n                  <mailto:lhotka@nic.cz>\n
      \                 Acee Lindem\n                  <mailto:acee@cisco.com>\n                  Yingzhen
      Qu\n                  <mailto:yingzhen.qu@huawei.com>\";\n     description\n
      \      \"This YANG module augments the 'ietf-ip' module with\n        parameters
      for IPv6 Router Advertisements.  The model fully\n        conforms to the Network
      Management Datastore\n        Architecture (NMDA).\n        Copyright (c) 2018
      IETF Trust and the persons\n        identified as authors of the code.  All
      rights reserved.\n        Redistribution and use in source and binary forms,
      with or\n        without modification, is permitted pursuant to, and subject\n
      \       to the license terms contained in, the Simplified BSD License\n        set
      forth in Section 4.c of the IETF Trust's Legal Provisions\n        Relating
      to IETF Documents\n        (https://trustee.ietf.org/license-info).\n        This
      version of this YANG module is part of RFC 8349; see\n        the RFC itself
      for full legal notices.\";\n     reference\n       \"RFC 4861: Neighbor Discovery
      for IP version 6 (IPv6)\";\n     revision 2018-03-13 {\n       description\n
      \        \"Network Management Datastore Architecture (NMDA) revision.\";\n       reference\n
      \        \"RFC 8349: A YANG Data Model for Routing Management\n                    (NMDA
      Version)\";\n     }\n     revision 2016-11-04 {\n          description\n            \"Initial
      revision.\";\n          reference\n            \"RFC 8022: A YANG Data Model
      for Routing Management\";\n     }\n     augment \"/if:interfaces/if:interface/ip:ipv6\"
      {\n       description\n         \"Augments interface configuration with parameters
      of IPv6\n          Router Advertisements.\";\n       container ipv6-router-advertisements
      {\n         description\n           \"Support for IPv6 Router Advertisements.\";\n
      \        leaf send-advertisements {\n           type boolean;\n           default
      \"false\";\n           description\n             \"A flag indicating whether
      or not the router sends\n              periodic Router Advertisements and responds
      to\n              Router Solicitations.\";\n           reference\n             \"RFC
      4861: Neighbor Discovery for IP version 6 (IPv6)\n                        -
      AdvSendAdvertisements\";\n         }\n         leaf max-rtr-adv-interval {\n
      \          type uint16 {\n             range \"4..65535\";\n           }\n           units
      \"seconds\";\n           default \"600\";\n           description\n             \"The
      maximum time allowed between sending unsolicited\n              multicast Router
      Advertisements from the interface.\";\n           reference\n             \"RFC
      4861: Neighbor Discovery for IP version 6 (IPv6)\n                        -
      MaxRtrAdvInterval\";\n         }\n         leaf min-rtr-adv-interval {\n           type
      uint16 {\n             range \"3..1350\";\n           }\n           units \"seconds\";\n
      \          must \". <= 0.75 * ../max-rtr-adv-interval\" {\n             description\n
      \              \"The value MUST NOT be greater than 75% of\n                'max-rtr-adv-interval'.\";\n
      \          }\n           description\n             \"The minimum time allowed
      between sending unsolicited\n              multicast Router Advertisements from
      the interface.\n              The default value to be used operationally if
      this\n              leaf is not configured is determined as follows:\n              -
      if max-rtr-adv-interval >= 9 seconds, the default\n                value is
      0.33 * max-rtr-adv-interval;\n              - otherwise, it is 0.75 * max-rtr-adv-interval.\";\n
      \          reference\n             \"RFC 4861: Neighbor Discovery for IP version
      6 (IPv6)\n                        - MinRtrAdvInterval\";\n         }\n         leaf
      managed-flag {\n           type boolean;\n           default \"false\";\n           description\n
      \            \"The value to be placed in the 'Managed address\n              configuration'
      flag field in the Router\n              Advertisement.\";\n           reference\n
      \            \"RFC 4861: Neighbor Discovery for IP version 6 (IPv6)\n                        -
      AdvManagedFlag\";\n         }\n         leaf other-config-flag {\n           type
      boolean;\n           default \"false\";\n           description\n             \"The
      value to be placed in the 'Other configuration'\n              flag field in
      the Router Advertisement.\";\n           reference\n             \"RFC 4861:
      Neighbor Discovery for IP version 6 (IPv6)\n                        - AdvOtherConfigFlag\";\n
      \        }\n         leaf link-mtu {\n           type uint32;\n           default
      \"0\";\n           description\n             \"The value to be placed in MTU
      options sent by the\n              router.  A value of zero indicates that no
      MTU options\n              are sent.\";\n           reference\n             \"RFC
      4861: Neighbor Discovery for IP version 6 (IPv6)\n                        -
      AdvLinkMTU\";\n         }\n         leaf reachable-time {\n           type uint32
      {\n             range \"0..3600000\";\n           }\n           units \"milliseconds\";\n
      \          default \"0\";\n           description\n             \"The value
      to be placed in the Reachable Time field in\n              the Router Advertisement
      messages sent by the router.\n              A value of zero means unspecified
      (by this router).\";\n           reference\n             \"RFC 4861: Neighbor
      Discovery for IP version 6 (IPv6)\n                        - AdvReachableTime\";\n
      \        }\n         leaf retrans-timer {\n           type uint32;\n           units
      \"milliseconds\";\n           default \"0\";\n           description\n             \"The
      value to be placed in the Retrans Timer field in\n              the Router Advertisement
      messages sent by the router.\n              A value of zero means unspecified
      (by this router).\";\n           reference\n             \"RFC 4861: Neighbor
      Discovery for IP version 6 (IPv6)\n                        - AdvRetransTimer\";\n
      \        }\n         leaf cur-hop-limit {\n           type uint8;\n           description\n
      \            \"The value to be placed in the Cur Hop Limit field in\n              the
      Router Advertisement messages sent by the router.\n              A value of
      zero means unspecified (by this router).\n              If this parameter is
      not configured, the device SHOULD\n              use the IANA-specified value
      for the default IPv4\n              Time to Live (TTL) parameter that was in
      effect at the\n              time of implementation.\";\n           reference\n
      \            \"RFC 3232: Assigned Numbers: RFC 1700 is Replaced by\n                        an
      On-line Database\n              RFC 4861: Neighbor Discovery for IP version
      6 (IPv6)\n                        - AdvCurHopLimit\n              IANA: IP Parameters\n
      \                   (https://www.iana.org/assignments/ip-parameters)\";\n         }\n
      \        leaf default-lifetime {\n           type uint16 {\n             range
      \"0..65535\";\n           }\n           units \"seconds\";\n           description\n
      \            \"The value to be placed in the Router Lifetime field of\n              Router
      Advertisements sent from the interface, in\n              seconds.  It MUST
      be either zero or between\n              max-rtr-adv-interval and 9000 seconds.
      \ A value of zero\n              indicates that the router is not to be used
      as a\n              default router.  These limits may be overridden by\n              specific
      documents that describe how IPv6 operates over\n              different link
      layers.\n              If this parameter is not configured, the device SHOULD\n
      \             use a value of 3 * max-rtr-adv-interval.\";\n           reference\n
      \            \"RFC 4861: Neighbor Discovery for IP version 6 (IPv6)\n                        -
      AdvDefaultLifetime\";\n         }\n         container prefix-list {\n           description\n
      \            \"Support for prefixes to be placed in Prefix\n              Information
      options in Router Advertisement messages\n              sent from the interface.\n
      \             Prefixes that are advertised by default but do not\n              have
      their entries in the child 'prefix' list are\n              advertised with
      the default values of all parameters.\n              The link-local prefix SHOULD
      NOT be included in the\n              list of advertised prefixes.\";\n           reference\n
      \            \"RFC 4861: Neighbor Discovery for IP version 6 (IPv6)\n                        -
      AdvPrefixList\";\n           list prefix {\n             key \"prefix-spec\";\n
      \            description\n               \"Support for an advertised prefix
      entry.\";\n             leaf prefix-spec {\n               type inet:ipv6-prefix;\n
      \              description\n                 \"IPv6 address prefix.\";\n             }\n
      \            choice control-adv-prefixes {\n               default \"advertise\";\n
      \              description\n                 \"Either (1) the prefix is explicitly
      removed from the\n                  set of advertised prefixes or (2) the parameters
      with\n                  which the prefix is advertised are specified (default\n
      \                 case).\";\n               leaf no-advertise {\n                 type
      empty;\n                 description\n                   \"The prefix will not
      be advertised.\n                    This can be used for removing the prefix
      from\n                    the default set of advertised prefixes.\";\n               }\n
      \              case advertise {\n                 leaf valid-lifetime {\n                   type
      uint32;\n                   units \"seconds\";\n                   default \"2592000\";\n
      \                  description\n                     \"The value to be placed
      in the Valid Lifetime\n                      in the Prefix Information option.
      \ The\n                      designated value of all 1's (0xffffffff)\n                       represents
      infinity.\";\n                   reference\n                     \"RFC 4861:
      Neighbor Discovery for IP version 6\n                                (IPv6)
      - AdvValidLifetime\";\n                 }\n                 leaf on-link-flag
      {\n                   type boolean;\n                   default \"true\";\n
      \                  description\n                     \"The value to be placed
      in the on-link flag\n                      ('L-bit') field in the Prefix Information\n
      \                     option.\";\n                   reference\n                     \"RFC
      4861: Neighbor Discovery for IP version 6\n                                (IPv6)
      - AdvOnLinkFlag\";\n                 }\n                 leaf preferred-lifetime
      {\n                   type uint32;\n                   units \"seconds\";\n
      \                  must \". <= ../valid-lifetime\" {\n                     description\n
      \                      \"This value MUST NOT be greater than\n                        valid-lifetime.\";\n
      \                  }\n                   default \"604800\";\n                   description\n
      \                    \"The value to be placed in the Preferred\n                      Lifetime
      in the Prefix Information option.\n                      The designated value
      of all 1's (0xffffffff)\n                      represents infinity.\";\n                   reference\n
      \                    \"RFC 4861: Neighbor Discovery for IP version 6\n                                (IPv6)
      - AdvPreferredLifetime\";\n                 }\n                 leaf autonomous-flag
      {\n                   type boolean;\n                   default \"true\";\n
      \                  description\n                     \"The value to be placed
      in the Autonomous Flag\n                      field in the Prefix Information
      option.\";\n                   reference\n                     \"RFC 4861: Neighbor
      Discovery for IP version 6\n                                (IPv6) - AdvAutonomousFlag\";\n
      \                }\n               }\n             }\n           }\n         }\n
      \      }\n     }\n     /*\n      * The subsequent data nodes are obviated and
      obsoleted\n      * by the Network Management Datastore Architecture\n      *
      as described in RFC 8342.\n      */\n     augment \"/if:interfaces-state/if:interface/ip:ipv6\"
      {\n       status obsolete;\n       description\n         \"Augments interface
      state data with parameters of IPv6\n          Router Advertisements.\";\n       container
      ipv6-router-advertisements {\n         status obsolete;\n         description\n
      \          \"Parameters of IPv6 Router Advertisements.\";\n         leaf send-advertisements
      {\n           type boolean;\n           status obsolete;\n           description\n
      \            \"A flag indicating whether or not the router sends\n              periodic
      Router Advertisements and responds to\n              Router Solicitations.\";\n
      \        }\n         leaf max-rtr-adv-interval {\n           type uint16 {\n
      \            range \"4..1800\";\n           }\n           units \"seconds\";\n
      \          status obsolete;\n           description\n             \"The maximum
      time allowed between sending unsolicited\n              multicast Router Advertisements
      from the interface.\";\n         }\n         leaf min-rtr-adv-interval {\n           type
      uint16 {\n             range \"3..1350\";\n           }\n           units \"seconds\";\n
      \          status obsolete;\n           description\n             \"The minimum
      time allowed between sending unsolicited\n              multicast Router Advertisements
      from the interface.\";\n         }\n         leaf managed-flag {\n           type
      boolean;\n           status obsolete;\n           description\n             \"The
      value that is placed in the 'Managed address\n              configuration' flag
      field in the Router Advertisement.\";\n         }\n         leaf other-config-flag
      {\n           type boolean;\n           status obsolete;\n           description\n
      \            \"The value that is placed in the 'Other configuration' flag\n
      \             field in the Router Advertisement.\";\n         }\n         leaf
      link-mtu {\n           type uint32;\n           status obsolete;\n           description\n
      \            \"The value that is placed in MTU options sent by the\n              router.
      \ A value of zero indicates that no MTU options\n              are sent.\";\n
      \        }\n         leaf reachable-time {\n           type uint32 {\n             range
      \"0..3600000\";\n           }\n           units \"milliseconds\";\n           status
      obsolete;\n           description\n             \"The value that is placed in
      the Reachable Time field in\n              the Router Advertisement messages
      sent by the router.  A\n              value of zero means unspecified (by this
      router).\";\n         }\n         leaf retrans-timer {\n           type uint32;\n
      \          units \"milliseconds\";\n           status obsolete;\n           description\n
      \            \"The value that is placed in the Retrans Timer field in the\n
      \             Router Advertisement messages sent by the router.  A value\n              of
      zero means unspecified (by this router).\";\n         }\n         leaf cur-hop-limit
      {\n           type uint8;\n           status obsolete;\n           description\n
      \            \"The value that is placed in the Cur Hop Limit field in the\n
      \             Router Advertisement messages sent by the router.  A value\n              of
      zero means unspecified (by this router).\";\n         }\n         leaf default-lifetime
      {\n           type uint16 {\n             range \"0..9000\";\n           }\n
      \          units \"seconds\";\n           status obsolete;\n           description\n
      \            \"The value that is placed in the Router Lifetime field of\n              Router
      Advertisements sent from the interface, in seconds.\n              A value of
      zero indicates that the router is not to be\n              used as a default
      router.\";\n         }\n         container prefix-list {\n           status
      obsolete;\n           description\n             \"A list of prefixes that are
      placed in Prefix Information\n              options in Router Advertisement
      messages sent from the\n              interface.\n              By default,
      these are all prefixes that the router\n              advertises via routing
      protocols as being on-link for the\n              interface from which the advertisement
      is sent.\";\n           list prefix {\n             key \"prefix-spec\";\n             status
      obsolete;\n             description\n               \"Advertised prefix entry
      and its parameters.\";\n             leaf prefix-spec {\n               type
      inet:ipv6-prefix;\n               status obsolete;\n               description\n
      \                \"IPv6 address prefix.\";\n             }\n             leaf
      valid-lifetime {\n               type uint32;\n               units \"seconds\";\n
      \              status obsolete;\n               description\n                 \"The
      value that is placed in the Valid Lifetime in the\n                  Prefix
      Information option.  The designated value of\n                  all 1's (0xffffffff)
      represents infinity.\n                  An implementation SHOULD keep this value
      constant in\n                  consecutive advertisements, except when it is\n
      \                 explicitly changed in configuration.\";\n             }\n
      \            leaf on-link-flag {\n               type boolean;\n               status
      obsolete;\n               description\n                 \"The value that is
      placed in the on-link flag ('L-bit')\n                  field in the Prefix
      Information option.\";\n             }\n             leaf preferred-lifetime
      {\n               type uint32;\n               units \"seconds\";\n               status
      obsolete;\n               description\n                 \"The value that is
      placed in the Preferred Lifetime in\n                  the Prefix Information
      option, in seconds.  The\n                  designated value of all 1's (0xffffffff)
      represents\n                  infinity.\n                  An implementation
      SHOULD keep this value constant in\n                  consecutive advertisements,
      except when it is\n                  explicitly changed in configuration.\";\n
      \            }\n             leaf autonomous-flag {\n               type boolean;\n
      \              status obsolete;\n               description\n                 \"The
      value that is placed in the Autonomous Flag field\n                  in the
      Prefix Information option.\";\n             }\n           }\n         }\n       }\n
      \    }\n   }\n   <CODE ENDS>\n"
    title: 9.1.  IPv6 Router Advertisements Submodule
  title: 9.  IPv6 Unicast Routing Management YANG Module
- contents:
  - "10.  IANA Considerations\n   [RFC8022] registered the following namespace URIs
    in the \"IETF XML\n   Registry\" [RFC3688].  IANA has updated the references to
    refer to\n   this document.\n   URI: urn:ietf:params:xml:ns:yang:ietf-routing\n
    \  Registrant Contact: The IESG.\n   XML: N/A; the requested URI is an XML namespace.\n
    \  URI: urn:ietf:params:xml:ns:yang:ietf-ipv4-unicast-routing\n   Registrant Contact:
    The IESG.\n   XML: N/A; the requested URI is an XML namespace.\n   URI: urn:ietf:params:xml:ns:yang:ietf-ipv6-unicast-routing\n
    \  Registrant Contact: The IESG.\n   XML: N/A; the requested URI is an XML namespace.\n
    \  [RFC8022] registered the following YANG modules in the \"YANG Module\n   Names\"
    registry [RFC6020].  IANA has updated (1) the modules per this\n   document and
    (2) the references to refer to this document.\n   Name:      ietf-routing\n   Namespace:
    urn:ietf:params:xml:ns:yang:ietf-routing\n   Prefix:    rt\n   Reference: RFC
    8349\n   Name:      ietf-ipv4-unicast-routing\n   Namespace: urn:ietf:params:xml:ns:yang:ietf-ipv4-unicast-routing\n
    \  Prefix:    v4ur\n   Reference: RFC 8349\n   Name:      ietf-ipv6-unicast-routing\n
    \  Namespace: urn:ietf:params:xml:ns:yang:ietf-ipv6-unicast-routing\n   Prefix:
    \   v6ur\n   Reference: RFC 8349\n   This document registers the following YANG
    submodule in the \"YANG\n   Module Names\" registry [RFC6020]:\n   Name:      ietf-ipv6-router-advertisements\n
    \  Module:    ietf-ipv6-unicast-routing\n   Reference: RFC 8349\n"
  title: 10.  IANA Considerations
- contents:
  - "11.  Security Considerations\n   The YANG modules specified in this document
    define a schema for data\n   that is designed to be accessed via network management
    protocols such\n   as NETCONF [RFC6241] or RESTCONF [RFC8040].  The lowest NETCONF
    layer\n   is the secure transport layer, and the mandatory-to-implement secure\n
    \  transport is Secure Shell (SSH) [RFC6242].  The lowest RESTCONF layer\n   is
    HTTPS, and the mandatory-to-implement secure transport is TLS\n   [RFC5246].\n
    \  The NETCONF access control model [RFC8341] provides the means to\n   restrict
    access for particular NETCONF or RESTCONF users to a\n   preconfigured subset
    of all available NETCONF or RESTCONF protocol\n   operations and content.\n   There
    are a number of data nodes defined in these YANG modules that\n   are writable/creatable/deletable
    (i.e., config true, which is the\n   default).  These data nodes may be considered
    sensitive or vulnerable\n   in some network environments.  Write operations (e.g.,
    edit-config)\n   to these data nodes without proper protection can have a negative\n
    \  effect on network operations.  These are the subtrees and data nodes\n   and
    their sensitivity/vulnerability:\n   /routing/control-plane-protocols/control-plane-protocol:
    \ This list\n      specifies the control-plane protocols configured on a device.\n
    \  /routing/ribs/rib:  This list specifies the RIBs configured for the\n      device.\n
    \  Some of the readable data nodes in these YANG modules may be\n   considered
    sensitive or vulnerable in some network environments.  It\n   is thus important
    to control read access (e.g., via get, get-config,\n   or notification) to these
    data nodes.  These are the subtrees and\n   data nodes and their sensitivity/vulnerability:\n
    \  /routing/control-plane-protocols/control-plane-protocol:  This list\n      specifies
    the control-plane protocols configured on a device.\n      Refer to the control-plane
    models for a list of sensitive\n      information.\n   /routing/ribs/rib:  This
    list specifies the RIBs and their contents\n      for the device.  Access to this
    information may disclose the\n      network topology and/or other information.\n
    \  Some of the RPC operations in this YANG module may be considered\n   sensitive
    or vulnerable in some network environments.  It is thus\n   important to control
    access to these operations.  These are the\n   operations and their sensitivity/vulnerability:\n
    \  /routing/ribs/rib/active-route:  The output from this RPC operation\n      returns
    the route that is being used for a specified destination.\n      Access to this
    information may disclose the network topology or\n      relationship (e.g., client/provider).
    \ Additionally, the routes\n      used by a network device may be used to mount
    a subsequent attack\n      on traffic traversing the network device.\n"
  title: 11.  Security Considerations
- contents:
  - '12.  References

    '
  - contents:
    - "12.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use
      in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n
      \             DOI 10.17487/RFC2119, March 1997,\n              <https://www.rfc-editor.org/info/rfc2119>.\n
      \  [RFC3688]  Mealling, M., \"The IETF XML Registry\", BCP 81, RFC 3688,\n              DOI
      10.17487/RFC3688, January 2004,\n              <https://www.rfc-editor.org/info/rfc3688>.\n
      \  [RFC4861]  Narten, T., Nordmark, E., Simpson, W., and H. Soliman,\n              \"Neighbor
      Discovery for IP version 6 (IPv6)\", RFC 4861,\n              DOI 10.17487/RFC4861,
      September 2007,\n              <https://www.rfc-editor.org/info/rfc4861>.\n
      \  [RFC5246]  Dierks, T. and E. Rescorla, \"The Transport Layer Security\n              (TLS)
      Protocol Version 1.2\", RFC 5246,\n              DOI 10.17487/RFC5246, August
      2008,\n              <https://www.rfc-editor.org/info/rfc5246>.\n   [RFC6020]
      \ Bjorklund, M., Ed., \"YANG - A Data Modeling Language for\n              the
      Network Configuration Protocol (NETCONF)\", RFC 6020,\n              DOI 10.17487/RFC6020,
      October 2010,\n              <https://www.rfc-editor.org/info/rfc6020>.\n   [RFC6241]
      \ Enns, R., Ed., Bjorklund, M., Ed., Schoenwaelder, J., Ed.,\n              and
      A. Bierman, Ed., \"Network Configuration Protocol\n              (NETCONF)\",
      RFC 6241, DOI 10.17487/RFC6241, June 2011,\n              <https://www.rfc-editor.org/info/rfc6241>.\n
      \  [RFC6242]  Wasserman, M., \"Using the NETCONF Protocol over Secure\n              Shell
      (SSH)\", RFC 6242, DOI 10.17487/RFC6242, June 2011,\n              <https://www.rfc-editor.org/info/rfc6242>.\n
      \  [RFC6991]  Schoenwaelder, J., Ed., \"Common YANG Data Types\",\n              RFC
      6991, DOI 10.17487/RFC6991, July 2013,\n              <https://www.rfc-editor.org/info/rfc6991>.\n
      \  [RFC7950]  Bjorklund, M., Ed., \"The YANG 1.1 Data Modeling Language\",\n
      \             RFC 7950, DOI 10.17487/RFC7950, August 2016,\n              <https://www.rfc-editor.org/info/rfc7950>.\n
      \  [RFC8022]  Lhotka, L. and A. Lindem, \"A YANG Data Model for Routing\n              Management\",
      RFC 8022, DOI 10.17487/RFC8022,\n              November 2016, <https://www.rfc-editor.org/info/rfc8022>.\n
      \  [RFC8040]  Bierman, A., Bjorklund, M., and K. Watsen, \"RESTCONF\n              Protocol\",
      RFC 8040, DOI 10.17487/RFC8040, January 2017,\n              <https://www.rfc-editor.org/info/rfc8040>.\n
      \  [RFC8174]  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in\n              RFC
      2119 Key Words\", BCP 14, RFC 8174,\n              DOI 10.17487/RFC8174, May
      2017,\n              <https://www.rfc-editor.org/info/rfc8174>.\n   [RFC8341]
      \ Bierman, A. and M. Bjorklund, \"Network Configuration\n              Access
      Control Model\", STD 91, RFC 8341,\n              DOI 10.17487/RFC8341, March
      2018,\n              <https://www.rfc-editor.org/info/rfc8341>.\n   [RFC8342]
      \ Bjorklund, M., Schoenwaelder, J., Shafer, P., Watsen, K.,\n              and
      R. Wilton, \"Network Management Datastore Architecture\n              (NMDA)\",
      RFC 8342, DOI 10.17487/RFC8342, March 2018,\n              <https://www.rfc-editor.org/info/rfc8342>.\n
      \  [RFC8343]  Bjorklund, M., \"A YANG Data Model for Interface\n              Management\",
      RFC 8343, DOI 10.17487/RFC8343, March 2018,\n              <https://www.rfc-editor.org/info/rfc8343>.\n
      \  [RFC8344]  Bjorklund, M., \"A YANG Data Model for IP Management\",\n              RFC
      8344, DOI 10.17487/RFC8344, March 2018,\n              <https://www.rfc-editor.org/info/rfc8344>.\n
      \  [W3C.REC-xml-20081126]\n              Bray, T., Paoli, J., Sperberg-McQueen,
      M., Maler, E., and\n              F. Yergeau, \"Extensible Markup Language (XML)
      1.0\n              (Fifth Edition)\", World Wide Web Consortium Recommendation\n
      \             REC-xml-20081126, November 2008,\n              <https://www.w3.org/TR/2008/REC-xml-20081126>.\n"
    title: 12.1.  Normative References
  - contents:
    - "12.2.  Informative References\n   [RFC7224]  Bjorklund, M., \"IANA Interface
      Type YANG Module\",\n              RFC 7224, DOI 10.17487/RFC7224, May 2014,\n
      \             <https://www.rfc-editor.org/info/rfc7224>.\n   [RFC7895]  Bierman,
      A., Bjorklund, M., and K. Watsen, \"YANG Module\n              Library\", RFC
      7895, DOI 10.17487/RFC7895, June 2016,\n              <https://www.rfc-editor.org/info/rfc7895>.\n
      \  [RFC7951]  Lhotka, L., \"JSON Encoding of Data Modeled with YANG\",\n              RFC
      7951, DOI 10.17487/RFC7951, August 2016,\n              <https://www.rfc-editor.org/info/rfc7951>.\n
      \  [RFC8340]  Bjorklund, M. and L. Berger, Ed., \"YANG Tree Diagrams\",\n              BCP
      215, RFC 8340, DOI 10.17487/RFC8340, March 2018,\n              <https://www.rfc-editor.org/info/rfc8340>.\n
      \  [YANG-Guidelines]\n              Bierman, A., \"Guidelines for Authors and
      Reviewers of YANG\n              Data Model Documents\", Work in Progress,\n
      \             draft-ietf-netmod-rfc6087bis-20, March 2018.\n"
    title: 12.2.  Informative References
  title: 12.  References
- contents:
  - "Appendix A.  The Complete Schema Tree\n   This appendix presents the complete
    tree of the core routing data\n   model.  See [RFC8340] for an explanation of
    the symbols used.  The\n   data type of every leaf node is shown near the right
    end of the\n   corresponding line.\n   module: ietf-routing\n     +--rw routing\n
    \    |  +--rw router-id?                 yang:dotted-quad\n     |  +--ro interfaces\n
    \    |  |  +--ro interface*   if:interface-ref\n     |  +--rw control-plane-protocols\n
    \    |  |  +--rw control-plane-protocol* [type name]\n     |  |     +--rw type
    \            identityref\n     |  |     +--rw name             string\n     |
    \ |     +--rw description?     string\n     |  |     +--rw static-routes\n     |
    \ |        +--rw v4ur:ipv4\n     |  |        |  +--rw v4ur:route* [destination-prefix]\n
    \    |  |        |     +--rw v4ur:destination-prefix\n     |  |        |     |
    \      inet:ipv4-prefix\n     |  |        |     +--rw v4ur:description?          string\n
    \    |  |        |     +--rw v4ur:next-hop\n     |  |        |        +--rw (v4ur:next-hop-options)\n
    \    |  |        |           +--:(v4ur:simple-next-hop)\n     |  |        |           |
    \ +--rw v4ur:outgoing-interface?\n     |  |        |           |  |       if:interface-ref\n
    \    |  |        |           |  +--rw v4ur:next-hop-address?\n     |  |        |
    \          |          inet:ipv4-address\n     |  |        |           +--:(v4ur:special-next-hop)\n
    \    |  |        |           |  +--rw v4ur:special-next-hop?\n     |  |        |
    \          |          enumeration\n     |  |        |           +--:(v4ur:next-hop-list)\n
    \    |  |        |              +--rw v4ur:next-hop-list\n     |  |        |                 +--rw
    v4ur:next-hop* [index]\n     |  |        |                    +--rw v4ur:index\n
    \    |  |        |                    |       string\n     |  |        |                    +--rw
    v4ur:outgoing-interface?\n     |  |        |                    |       if:interface-ref\n
    \    |  |        |                    +--rw v4ur:next-hop-address?\n     |  |
    \       |                            inet:ipv4-address\n     |  |        +--rw
    v6ur:ipv6\n     |  |           +--rw v6ur:route* [destination-prefix]\n     |
    \ |              +--rw v6ur:destination-prefix\n     |  |              |       inet:ipv6-prefix\n
    \    |  |              +--rw v6ur:description?          string\n     |  |              +--rw
    v6ur:next-hop\n     |  |                 +--rw (v6ur:next-hop-options)\n     |
    \ |                    +--:(v6ur:simple-next-hop)\n     |  |                    |
    \ +--rw v6ur:outgoing-interface?\n     |  |                    |  |       if:interface-ref\n
    \    |  |                    |  +--rw v6ur:next-hop-address?\n     |  |                    |
    \         inet:ipv6-address\n     |  |                    +--:(v6ur:special-next-hop)\n
    \    |  |                    |  +--rw v6ur:special-next-hop?\n     |  |                    |
    \         enumeration\n     |  |                    +--:(v6ur:next-hop-list)\n
    \    |  |                       +--rw v6ur:next-hop-list\n     |  |                          +--rw
    v6ur:next-hop* [index]\n     |  |                             +--rw v6ur:index\n
    \    |  |                             |       string\n     |  |                             +--rw
    v6ur:outgoing-interface?\n     |  |                             |       if:interface-ref\n
    \    |  |                             +--rw v6ur:next-hop-address?\n     |  |
    \                                    inet:ipv6-address\n     |  +--rw ribs\n     |
    \    +--rw rib* [name]\n     |        +--rw name              string\n     |        +--rw
    address-family    identityref\n     |        +--ro default-rib?      boolean {multiple-ribs}?\n
    \    |        +--ro routes\n     |        |  +--ro route*\n     |        |     +--ro
    route-preference?          route-preference\n     |        |     +--ro next-hop\n
    \    |        |     |  +--ro (next-hop-options)\n     |        |     |     +--:(simple-next-hop)\n
    \    |        |     |     |  +--ro outgoing-interface?\n     |        |     |
    \    |  |       if:interface-ref\n     |        |     |     |  +--ro v4ur:next-hop-address?\n
    \    |        |     |     |  |       inet:ipv4-address\n     |        |     |
    \    |  +--ro v6ur:next-hop-address?\n     |        |     |     |          inet:ipv6-address\n
    \    |        |     |     +--:(special-next-hop)\n     |        |     |     |
    \ +--ro special-next-hop?        enumeration\n     |        |     |     +--:(next-hop-list)\n
    \    |        |     |        +--ro next-hop-list\n     |        |     |           +--ro
    next-hop*\n     |        |     |              +--ro outgoing-interface?\n     |
    \       |     |              |       if:interface-ref\n     |        |     |              +--ro
    v4ur:address?\n     |        |     |              |       inet:ipv4-address\n
    \    |        |     |              +--ro v6ur:address?\n     |        |     |
    \                     inet:ipv6-address\n     |        |     +--ro source-protocol
    \           identityref\n     |        |     +--ro active?                    empty\n
    \    |        |     +--ro last-updated?              yang:date-and-time\n     |
    \       |     +--ro v4ur:destination-prefix?   inet:ipv4-prefix\n     |        |
    \    +--ro v6ur:destination-prefix?   inet:ipv6-prefix\n     |        +---x active-route\n
    \    |        |  +---w input\n     |        |  |  +---w v4ur:destination-address?
    \  inet:ipv4-address\n     |        |  |  +---w v6ur:destination-address?   inet:ipv6-address\n
    \    |        |  +--ro output\n     |        |     +--ro route\n     |        |
    \       +--ro next-hop\n     |        |        |  +--ro (next-hop-options)\n     |
    \       |        |     +--:(simple-next-hop)\n     |        |        |     |  +--ro
    outgoing-interface?\n     |        |        |     |  |       if:interface-ref\n
    \    |        |        |     |  +--ro v4ur:next-hop-address?\n     |        |
    \       |     |  |       inet:ipv4-address\n     |        |        |     |  +--ro
    v6ur:next-hop-address?\n     |        |        |     |          inet:ipv6-address\n
    \    |        |        |     +--:(special-next-hop)\n     |        |        |
    \    |  +--ro special-next-hop?\n     |        |        |     |          enumeration\n
    \    |        |        |     +--:(next-hop-list)\n     |        |        |        +--ro
    next-hop-list\n     |        |        |           +--ro next-hop*\n     |        |
    \       |              +--ro outgoing-interface?\n     |        |        |              |
    \      if:interface-ref\n     |        |        |              +--ro v4ur:next-hop-address?\n
    \    |        |        |              |       inet:ipv4-address\n     |        |
    \       |              +--ro v6ur:next-hop-address?\n     |        |        |
    \                     inet:ipv6-address\n     |        |        +--ro source-protocol
    \           identityref\n     |        |        +--ro active?                    empty\n
    \    |        |        +--ro last-updated?\n     |        |        |       yang:date-and-time\n
    \    |        |        +--ro v4ur:destination-prefix?\n     |        |        |
    \      inet:ipv4-prefix\n     |        |        +--ro v6ur:destination-prefix?\n
    \    |        |                inet:ipv6-prefix\n     |        +--rw description?
    \     string\n     o--ro routing-state\n        o--ro router-id?                 yang:dotted-quad\n
    \       o--ro interfaces\n        |  o--ro interface*   if:interface-state-ref\n
    \       o--ro control-plane-protocols\n        |  o--ro control-plane-protocol*
    [type name]\n        |     o--ro type    identityref\n        |     o--ro name
    \   string\n        o--ro ribs\n           o--ro rib* [name]\n              o--ro
    name              string\n              o--ro address-family    identityref\n
    \             o--ro default-rib?      boolean {multiple-ribs}?\n              o--ro
    routes\n              |  o--ro route*\n              |     o--ro route-preference?
    \         route-preference\n              |     o--ro next-hop\n              |
    \    |  o--ro (next-hop-options)\n              |     |     o--:(simple-next-hop)\n
    \             |     |     |  o--ro outgoing-interface?\n              |     |
    \    |  |       if:interface-ref\n              |     |     |  o--ro v4ur:next-hop-address?\n
    \             |     |     |  |       inet:ipv4-address\n              |     |
    \    |  o--ro v6ur:next-hop-address?\n              |     |     |          inet:ipv6-address\n
    \             |     |     o--:(special-next-hop)\n              |     |     |
    \ o--ro special-next-hop?        enumeration\n              |     |     o--:(next-hop-list)\n
    \             |     |        o--ro next-hop-list\n              |     |           o--ro
    next-hop*\n              |     |              o--ro outgoing-interface?\n              |
    \    |              |       if:interface-ref\n              |     |              o--ro
    v4ur:address?\n              |     |              |       inet:ipv4-address\n
    \             |     |              o--ro v6ur:address?\n              |     |
    \                     inet:ipv6-address\n              |     o--ro source-protocol
    \           identityref\n              |     o--ro active?                    empty\n
    \             |     o--ro last-updated?              yang:date-and-time\n              |
    \    o--ro v4ur:destination-prefix?   inet:ipv4-prefix\n              |     o--ro
    v6ur:destination-prefix?   inet:ipv6-prefix\n              o---x active-route\n
    \                o---w input\n                 |  o---w v4ur:destination-address?
    \  inet:ipv4-address\n                 |  o---w v6ur:destination-address?   inet:ipv6-address\n
    \                o--ro output\n                    o--ro route\n                       o--ro
    next-hop\n                       |  o--ro (next-hop-options)\n                       |
    \    o--:(simple-next-hop)\n                       |     |  o--ro outgoing-interface?\n
    \                      |     |  |       if:interface-ref\n                       |
    \    |  o--ro v4ur:next-hop-address?\n                       |     |  |       inet:ipv4-address\n
    \                      |     |  o--ro v6ur:next-hop-address?\n                       |
    \    |          inet:ipv6-address\n                       |     o--:(special-next-hop)\n
    \                      |     |  o--ro special-next-hop?\n                       |
    \    |          enumeration\n                       |     o--:(next-hop-list)\n
    \                      |        o--ro next-hop-list\n                       |
    \          o--ro next-hop*\n                       |              o--ro outgoing-interface?\n
    \                      |              |       if:interface-ref\n                       |
    \             o--ro v4ur:next-hop-address?\n                       |              |
    \      inet:ipv4-address\n                       |              o--ro v6ur:next-hop-address?\n
    \                      |                      inet:ipv6-address\n                       o--ro
    source-protocol            identityref\n                       o--ro active?                    empty\n
    \                      o--ro last-updated?\n                       |       yang:date-and-time\n
    \                      o--ro v4ur:destination-prefix?\n                       |
    \      inet:ipv4-prefix\n                       o--ro v6ur:destination-prefix?\n
    \                              inet:ipv6-prefix\n   module: ietf-ipv6-unicast-routing\n
    \    augment /if:interfaces/if:interface/ip:ipv6:\n       +--rw ipv6-router-advertisements\n
    \         +--rw send-advertisements?    boolean\n          +--rw max-rtr-adv-interval?
    \  uint16\n          +--rw min-rtr-adv-interval?   uint16\n          +--rw managed-flag?
    \          boolean\n          +--rw other-config-flag?      boolean\n          +--rw
    link-mtu?               uint32\n          +--rw reachable-time?         uint32\n
    \         +--rw retrans-timer?          uint32\n          +--rw cur-hop-limit?
    \         uint8\n          +--rw default-lifetime?       uint16\n          +--rw
    prefix-list\n             +--rw prefix* [prefix-spec]\n                +--rw prefix-spec
    \          inet:ipv6-prefix\n                +--rw (control-adv-prefixes)?\n                   +--:(no-advertise)\n
    \                  |  +--rw no-advertise?         empty\n                   +--:(advertise)\n
    \                     +--rw valid-lifetime?       uint32\n                      +--rw
    on-link-flag?         boolean\n                      +--rw preferred-lifetime?
    \  uint32\n                      +--rw autonomous-flag?      boolean\n     augment
    /if:interfaces-state/if:interface/ip:ipv6:\n       o--ro ipv6-router-advertisements\n
    \         o--ro send-advertisements?    boolean\n          o--ro max-rtr-adv-interval?
    \  uint16\n          o--ro min-rtr-adv-interval?   uint16\n          o--ro managed-flag?
    \          boolean\n          o--ro other-config-flag?      boolean\n          o--ro
    link-mtu?               uint32\n          o--ro reachable-time?         uint32\n
    \         o--ro retrans-timer?          uint32\n          o--ro cur-hop-limit?
    \         uint8\n          o--ro default-lifetime?       uint16\n          o--ro
    prefix-list\n             o--ro prefix* [prefix-spec]\n                o--ro prefix-spec
    \          inet:ipv6-prefix\n                o--ro valid-lifetime?       uint32\n
    \               o--ro on-link-flag?         boolean\n                o--ro preferred-lifetime?
    \  uint32\n                o--ro autonomous-flag?      boolean\n"
  title: Appendix A.  The Complete Schema Tree
- contents:
  - "Appendix B.  Minimum Implementation\n   Some parts and options of the core routing
    model, such as\n   user-defined RIBs, are intended only for advanced routers.
    \ This\n   appendix gives basic non-normative guidelines for implementing a bare\n
    \  minimum of available functions.  Such an implementation may be used\n   for
    hosts or very simple routers.\n   A minimum implementation does not support the
    \"multiple-ribs\"\n   feature.  This means that a single system-controlled RIB
    is available\n   for each supported address family -- IPv4, IPv6, or both.  These
    RIBs\n   are also the default RIBs.  No user-controlled RIBs are allowed.\n   In
    addition to the mandatory instance of the \"direct\"\n   pseudo-protocol, a minimum
    implementation should support configuring\n   instance(s) of the \"static\" pseudo-protocol.\n
    \  For hosts that are never intended to act as routers, the ability to\n   turn
    on sending IPv6 Router Advertisements (Section 5.4) should be\n   removed.\n   Platforms
    with severely constrained resources may use deviations for\n   restricting the
    data model, e.g., limiting the number of \"static\"\n   control-plane protocol
    instances.\n"
  title: Appendix B.  Minimum Implementation
- contents:
  - "Appendix C.  Example: Adding a New Control-Plane Protocol\n   This appendix demonstrates
    how the core routing data model can be\n   extended to support a new control-plane
    protocol.  The YANG module\n   \"example-rip\" shown below is intended as an illustration
    rather than\n   a real definition of a data model for the Routing Information\n
    \  Protocol (RIP).  For the sake of brevity, this module does not obey\n   all
    the guidelines specified in [YANG-Guidelines].  See also\n   Section 5.3.2.\n
    \  module example-rip {\n     yang-version \"1.1\";\n     namespace \"http://example.com/rip\";\n
    \    prefix \"rip\";\n     import ietf-interfaces {\n       prefix \"if\";\n     }\n
    \    import ietf-routing {\n       prefix \"rt\";\n     }\n     identity rip {\n
    \      base rt:routing-protocol;\n       description\n         \"Identity for
    the Routing Information Protocol (RIP).\";\n     }\n     typedef rip-metric {\n
    \      type uint8 {\n         range \"0..16\";\n       }\n     }\n     grouping
    route-content {\n       description\n         \"This grouping defines RIP-specific
    route attributes.\";\n       leaf metric {\n         type rip-metric;\n       }\n
    \      leaf tag {\n         type uint16;\n         default \"0\";\n         description\n
    \          \"This leaf may be used to carry additional information,\n            e.g.,
    an autonomous system (AS) number.\";\n       }\n     }\n     augment \"/rt:routing/rt:ribs/rt:rib/rt:routes/rt:route\"
    {\n       when \"derived-from-or-self(rt:source-protocol, 'rip:rip')\" {\n         description\n
    \          \"This augment is only valid for a route whose source\n            protocol
    is RIP.\";\n       }\n       description\n         \"RIP-specific route attributes.\";\n
    \      uses route-content;\n     }\n     augment \"/rt:routing/rt:ribs/rt:rib/rt:active-route/\"\n
    \          + \"rt:output/rt:route\" {\n       description\n         \"RIP-specific
    route attributes in the output of an\n          'active-route' RPC.\";\n       uses
    route-content;\n     }\n     augment \"/rt:routing/rt:control-plane-protocols/\"\n
    \          + \"rt:control-plane-protocol\" {\n       when \"derived-from-or-self(rt:type,'rip:rip')\"
    {\n         description\n           \"This augment is only valid for a routing
    protocol instance\n            of type 'rip'.\";\n       }\n       container rip
    {\n         presence\n           \"RIP configuration\";\n         description\n
    \          \"RIP instance configuration.\";\n         container interfaces {\n
    \          description\n             \"Per-interface RIP configuration.\";\n           list
    interface {\n             key \"name\";\n             description\n               \"RIP
    is enabled on interfaces that have an entry in this\n                list, unless
    'enabled' is set to 'false' for that\n                entry.\";\n             leaf
    name {\n               type if:interface-ref;\n             }\n             leaf
    enabled {\n               type boolean;\n               default \"true\";\n             }\n
    \            leaf metric {\n               type rip-metric;\n               default
    \"1\";\n             }\n           }\n         }\n         leaf update-interval
    {\n           type uint8 {\n             range \"10..60\";\n           }\n           units
    \"seconds\";\n           default \"30\";\n           description\n             \"Time
    interval between periodic updates.\";\n         }\n       }\n     }\n   }\n"
  title: 'Appendix C.  Example: Adding a New Control-Plane Protocol'
- contents:
  - "Appendix D.  Data Tree Example\n   This section contains an example of an instance
    data tree from the\n   operational state, in JSON encoding [RFC7951].  (This example\n
    \  includes \"iana-if-type\", which is defined in [RFC7224].)\n   The data conforms
    to a data model that is defined by the following\n   YANG library specification
    [RFC7895]:\n    {\n      \"ietf-yang-library:modules-state\": {\n        \"module-set-id\":
    \"c2e1f54169aa7f36e1a6e8d0865d441d3600f9c4\",\n        \"module\": [\n          {\n
    \           \"name\": \"ietf-routing\",\n            \"revision\": \"2018-03-13\",\n
    \           \"feature\": [\n              \"multiple-ribs\",\n              \"router-id\"\n
    \           ],\n            \"namespace\": \"urn:ietf:params:xml:ns:yang:ietf-routing\",\n
    \           \"conformance-type\": \"implement\"\n          },\n          {\n            \"name\":
    \"ietf-ipv4-unicast-routing\",\n            \"revision\": \"2018-03-13\",\n            \"namespace\":\n
    \             \"urn:ietf:params:xml:ns:yang:ietf-ipv4-unicast-routing\",\n            \"conformance-type\":
    \"implement\"\n          },\n          {\n            \"name\": \"ietf-ipv6-unicast-routing\",\n
    \           \"revision\": \"2018-03-13\",\n            \"namespace\":\n              \"urn:ietf:params:xml:ns:yang:ietf-ipv6-unicast-routing\",\n
    \           \"conformance-type\": \"implement\",\n            \"submodule\": [\n
    \             {\n                \"name\": \"ietf-ipv6-router-advertisements\",\n
    \               \"revision\": \"2018-03-13\"\n              }\n            ]\n
    \         },\n          {\n            \"name\": \"ietf-interfaces\",\n            \"revision\":
    \"2018-02-20\",\n            \"namespace\": \"urn:ietf:params:xml:ns:yang:ietf-interfaces\",\n
    \           \"conformance-type\": \"implement\"\n          },\n          {\n            \"name\":
    \"ietf-inet-types\",\n            \"namespace\": \"urn:ietf:params:xml:ns:yang:ietf-inet-types\",\n
    \           \"revision\": \"2013-07-15\",\n            \"conformance-type\": \"import\"\n
    \         },\n          {\n            \"name\": \"ietf-yang-types\",\n            \"namespace\":
    \"urn:ietf:params:xml:ns:yang:ietf-yang-types\",\n            \"revision\": \"2013-07-15\",\n
    \           \"conformance-type\": \"import\"\n          },\n          {\n            \"name\":
    \"iana-if-type\",\n            \"namespace\": \"urn:ietf:params:xml:ns:yang:iana-if-type\",\n
    \           \"revision\": \"2014-05-08\",\n            \"conformance-type\": \"implement\"\n
    \         },\n          {\n            \"name\": \"ietf-ip\",\n            \"revision\":
    \"2018-02-22\",\n            \"namespace\": \"urn:ietf:params:xml:ns:yang:ietf-ip\",\n
    \           \"conformance-type\": \"implement\"\n          }\n        ]\n      }\n
    \   }\n   A simple network setup as shown in Figure 2 is assumed: router \"A\"\n
    \  uses static default routes with the \"ISP\" router as the next hop.\n   IPv6
    Router Advertisements are configured only on the \"eth1\"\n   interface and disabled
    on the upstream \"eth0\" interface.\n                   +-----------------+\n
    \                  |                 |\n                   |    Router ISP   |\n
    \                  |                 |\n                   +--------+--------+\n
    \                           |2001:db8:0:1::2\n                            |192.0.2.2\n
    \                           |\n                            |\n                            |2001:db8:0:1::1\n
    \                       eth0|192.0.2.1\n                   +--------+--------+\n
    \                  |                 |\n                   |     Router A    |\n
    \                  |                 |\n                   +--------+--------+\n
    \                       eth1|198.51.100.1\n                            |2001:db8:0:2::1\n
    \                           |\n                Figure 2: Example of Network Configuration\n
    \  The instance data tree could then be as follows:\n   {\n     \"ietf-interfaces:interfaces\":
    {\n       \"interface\": [\n         {\n           \"name\": \"eth0\",\n           \"type\":
    \"iana-if-type:ethernetCsmacd\",\n           \"description\": \"Uplink to ISP.\",\n
    \          \"phys-address\": \"00:0C:42:E5:B1:E9\",\n           \"oper-status\":
    \"up\",\n           \"statistics\": {\n             \"discontinuity-time\": \"2015-10-24T17:11:27+02:00\"\n
    \          },\n           \"ietf-ip:ipv4\": {\n             \"forwarding\": true,\n
    \            \"mtu\": 1500,\n             \"address\": [\n               {\n                 \"ip\":
    \"192.0.2.1\",\n                 \"prefix-length\": 24\n               }\n             ]\n
    \          },\n           \"ietf-ip:ipv6\": {\n             \"forwarding\": true,\n
    \            \"mtu\": 1500,\n             \"address\": [\n               {\n                 \"ip\":
    \"2001:0db8:0:1::1\",\n                 \"prefix-length\": 64\n               }\n
    \            ],\n             \"autoconf\": {\n               \"create-global-addresses\":
    false\n             },\n             \"ietf-ipv6-unicast-routing:ipv6-router-advertisements\":
    {\n               \"send-advertisements\": false\n             }\n           }\n
    \        },\n         {\n           \"name\": \"eth1\",\n           \"type\":
    \"iana-if-type:ethernetCsmacd\",\n           \"description\": \"Interface to the
    internal network.\",\n           \"phys-address\": \"00:0C:42:E5:B1:EA\",\n           \"oper-status\":
    \"up\",\n           \"statistics\": {\n             \"discontinuity-time\": \"2015-10-24T17:11:29+02:00\"\n
    \          },\n           \"ietf-ip:ipv4\": {\n             \"forwarding\": true,\n
    \            \"mtu\": 1500,\n             \"address\": [\n               {\n                 \"ip\":
    \"198.51.100.1\",\n                 \"prefix-length\": 24\n               }\n
    \            ]\n           },\n           \"ietf-ip:ipv6\": {\n             \"forwarding\":
    true,\n             \"mtu\": 1500,\n             \"address\": [\n               {\n
    \                \"ip\": \"2001:0db8:0:2::1\",\n                 \"prefix-length\":
    64\n               }\n             ],\n             \"autoconf\": {\n               \"create-global-addresses\":
    false\n             },\n             \"ietf-ipv6-unicast-routing:ipv6-router-advertisements\":
    {\n               \"send-advertisements\": true,\n               \"prefix-list\":
    {\n                 \"prefix\": [\n                   {\n                     \"prefix-spec\":
    \"2001:db8:0:2::/64\"\n                   }\n                 ]\n               }\n
    \            }\n           }\n         }\n       ]\n     },\n     \"ietf-routing:routing\":
    {\n       \"router-id\": \"192.0.2.1\",\n       \"control-plane-protocols\": {\n
    \        \"control-plane-protocol\": [\n           {\n             \"type\": \"ietf-routing:static\",\n
    \            \"name\": \"st0\",\n             \"description\":\n               \"Static
    routing is used for the internal network.\",\n             \"static-routes\":
    {\n               \"ietf-ipv4-unicast-routing:ipv4\": {\n                 \"route\":
    [\n                   {\n                     \"destination-prefix\": \"0.0.0.0/0\",\n
    \                    \"next-hop\": {\n                       \"next-hop-address\":
    \"192.0.2.2\"\n                     }\n                   }\n                 ]\n
    \              },\n               \"ietf-ipv6-unicast-routing:ipv6\": {\n                 \"route\":
    [\n                   {\n                     \"destination-prefix\": \"::/0\",\n
    \                    \"next-hop\": {\n                       \"next-hop-address\":
    \"2001:db8:0:1::2\"\n                     }\n                   }\n                 ]\n
    \              }\n             }\n           }\n         ]\n       },\n       \"ribs\":
    {\n         \"rib\": [\n           {\n             \"name\": \"ipv4-master\",\n
    \            \"address-family\":\n               \"ietf-ipv4-unicast-routing:ipv4-unicast\",\n
    \            \"default-rib\": true,\n             \"routes\": {\n               \"route\":
    [\n                 {\n                   \"ietf-ipv4-unicast-routing:destination-prefix\":\n
    \                    \"192.0.2.1/24\",\n                   \"next-hop\": {\n                     \"outgoing-interface\":
    \"eth0\"\n                   },\n                   \"route-preference\": 0,\n
    \                  \"source-protocol\": \"ietf-routing:direct\",\n                   \"last-updated\":
    \"2015-10-24T17:11:27+02:00\"\n                 },\n                 {\n                   \"ietf-ipv4-unicast-routing:destination-prefix\":\n
    \                    \"198.51.100.0/24\",\n                   \"next-hop\": {\n
    \                    \"outgoing-interface\": \"eth1\"\n                   },\n
    \                  \"source-protocol\": \"ietf-routing:direct\",\n                   \"route-preference\":
    0,\n                   \"last-updated\": \"2015-10-24T17:11:27+02:00\"\n                 },\n
    \                {\n                   \"ietf-ipv4-unicast-routing:destination-prefix\":\n
    \                    \"0.0.0.0/0\",\n                   \"source-protocol\": \"ietf-routing:static\",\n
    \                  \"route-preference\": 5,\n                   \"next-hop\":
    {\n                     \"ietf-ipv4-unicast-routing:next-hop-address\":\n                       \"192.0.2.2\"\n
    \                  },\n                   \"last-updated\": \"2015-10-24T18:02:45+02:00\"\n
    \                }\n               ]\n             }\n           },\n           {\n
    \            \"name\": \"ipv6-master\",\n             \"address-family\":\n               \"ietf-ipv6-unicast-routing:ipv6-unicast\",\n
    \            \"default-rib\": true,\n             \"routes\": {\n               \"route\":
    [\n                 {\n                   \"ietf-ipv6-unicast-routing:destination-prefix\":\n
    \                    \"2001:db8:0:1::/64\",\n                   \"next-hop\":
    {\n                     \"outgoing-interface\": \"eth0\"\n                   },\n
    \                  \"source-protocol\": \"ietf-routing:direct\",\n                   \"route-preference\":
    0,\n                   \"last-updated\": \"2015-10-24T17:11:27+02:00\"\n                 },\n
    \                {\n                   \"ietf-ipv6-unicast-routing:destination-prefix\":\n
    \                    \"2001:db8:0:2::/64\",\n                   \"next-hop\":
    {\n                     \"outgoing-interface\": \"eth1\"\n                   },\n
    \                  \"source-protocol\": \"ietf-routing:direct\",\n                   \"route-preference\":
    0,\n                   \"last-updated\": \"2015-10-24T17:11:27+02:00\"\n                 },\n
    \                {\n                   \"ietf-ipv6-unicast-routing:destination-prefix\":\n
    \                    \"::/0\",\n                   \"next-hop\": {\n                     \"ietf-ipv6-unicast-routing:next-hop-address\":\n
    \                      \"2001:db8:0:1::2\"\n                   },\n                   \"source-protocol\":
    \"ietf-routing:static\",\n                   \"route-preference\": 5,\n                   \"last-updated\":
    \"2015-10-24T18:02:45+02:00\"\n                 }\n               ]\n             }\n
    \          }\n         ]\n       }\n     }\n   }\n"
  title: Appendix D.  Data Tree Example
- contents:
  - "Appendix E.  NETCONF Get Data Reply Example\n   This section gives an example
    of an XML [W3C.REC-xml-20081126] reply\n   to the NETCONF <get-data> request for
    <operational> for a device that\n   implements the example data models above.\n
    \  <rpc-reply\n    xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\n    message-id=\"101\">\n
    \   <data>\n      <routing\n        xmlns=\"urn:ietf:params:xml:ns:yang:ietf-routing\"\n
    \       xmlns:or=\"urn:ietf:params:xml:ns:yang:ietf-origin\">\n        <router-id
    or:origin=\"or:intended\">192.0.2.1</router-id>\n        <control-plane-protocols
    or:origin=\"or:intended\">\n          <control-plane-protocol>\n            <type>ietf-routing:static</type>\n
    \           <name>static-routing-protocol</name>\n            <static-routes>\n
    \             <ietf-ipv4-unicast-routing:ipv4>\n                <route>\n                  <destination-prefix>0.0.0.0/0</destination-prefix>\n
    \                 <next-hop>\n                    <next-hop-address>192.0.2.2</next-hop-address>\n
    \                 </next-hop>\n                </route>\n              </ietf-ipv4-unicast-routing:ipv4>\n
    \             <ietf-ipv6-unicast-routing:ipv6>\n                <route>\n                  <destination-prefix>::/0</destination-prefix>\n
    \                 <next-hop>\n                    <next-hop-address>2001:db8:0:1::2</next-hop-address>\n
    \                 </next-hop>\n                </route>\n              </ietf-ipv6-unicast-routing:ipv6>\n
    \           </static-routes>\n          </control-plane-protocol>\n        </control-plane-protocols>\n
    \       <ribs>\n          <rib or:origin=\"or:intended\">\n            <name>ipv4-master</name>\n
    \           <address-family>\n              ietf-ipv4-unicast-routing:ipv4-unicast\n
    \           </address-family>\n            <default-rib>true</default-rib>\n            <routes>\n
    \             <route>\n                <ietf-ipv4-unicast-routing:destination-prefix>\n
    \                 192.0.2.1/24\n                </ietf-ipv4-unicast-routing:destination-prefix>\n
    \               <next-hop>\n                  <outgoing-interface>eth0</outgoing-interface>\n
    \               </next-hop>\n                <route-preference>0</route-preference>\n
    \               <source-protocol>ietf-routing:direct</source-protocol>\n                <last-updated>2015-10-24T17:11:27+02:00</last-updated>\n
    \             </route>\n              <route>\n                <ietf-ipv4-unicast-routing:destination-prefix>\n
    \                 198.51.100.0/24\n                </ietf-ipv4-unicast-routing:destination-prefix>\n
    \               <next-hop>\n                  <outgoing-interface>eth1</outgoing-interface>\n
    \               </next-hop>\n                <route-preference>0</route-preference>\n
    \               <source-protocol>ietf-routing:direct</source-protocol>\n                <last-updated>2015-10-24T17:11:27+02:00</last-updated>\n
    \             </route>\n              <route>\n                <ietf-ipv4-unicast-routing:destination-prefix>0.0.0.0/0\n
    \               </ietf-ipv4-unicast-routing:destination-prefix>\n                <next-hop>\n
    \                 <ietf-ipv4-unicast-routing:next-hop-address>192.0.2.2\n                  </ietf-ipv4-unicast-routing:next-hop-address>\n
    \               </next-hop>\n                <route-preference>5</route-preference>\n
    \               <source-protocol>ietf-routing:static</source-protocol>\n                <last-updated>2015-10-24T18:02:45+02:00</last-updated>\n
    \             </route>\n            </routes>\n          </rib>\n          <rib
    or:origin=\"or:intended\">\n            <name>ipv6-master</name>\n            <address-family>\n
    \             ietf-ipv6-unicast-routing:ipv6-unicast\n            </address-family>\n
    \           <default-rib>true</default-rib>\n            <routes>\n              <route>\n
    \               <ietf-ipv6-unicast-routing:destination-prefix>\n                  2001:db8:0:1::/64\n
    \               </ietf-ipv6-unicast-routing:destination-prefix>\n                <next-hop>\n
    \                 <outgoing-interface>eth0</outgoing-interface>\n                </next-hop>\n
    \               <route-preference>0</route-preference>\n                <source-protocol>ietf-routing:direct</source-protocol>\n
    \               <last-updated>2015-10-24T17:11:27+02:00</last-updated>\n              </route>\n
    \             <route>\n                <ietf-ipv6-unicast-routing:destination-prefix>\n
    \                 2001:db8:0:2::/64\n                </ietf-ipv6-unicast-routing:destination-prefix>\n
    \               <next-hop>\n                  <outgoing-interface>eth1</outgoing-interface>\n
    \               </next-hop>\n                <route-preference>0</route-preference>\n
    \               <source-protocol>ietf-routing:direct</source-protocol>\n                <last-updated>2015-10-24T17:11:27+02:00</last-updated>\n
    \             </route>\n              <route>\n                <ietf-ipv6-unicast-routing:destination-prefix>::/0\n
    \               </ietf-ipv6-unicast-routing:destination-prefix>\n                <next-hop>\n
    \                 <ietf-ipv6-unicast-routing:next-hop-address>\n                    2001:db8:0:1::2\n
    \                 </ietf-ipv6-unicast-routing:next-hop-address>\n                </next-hop>\n
    \               <route-preference>5</route-preference>\n                <source-protocol>ietf-routing:static</source-protocol>\n
    \               <last-updated>2015-10-24T18:02:45+02:00</last-updated>\n              </route>\n
    \           </routes>\n          </rib>\n        </ribs>\n      </routing>\n    </data>\n
    \  </rpc-reply>\n"
  title: Appendix E.  NETCONF Get Data Reply Example
- contents:
  - "Acknowledgments\n   The authors wish to thank Nitin Bahadur, Martin Bjorklund,
    Dean\n   Bogdanovic, Joe Clarke, Francis Dupont, Jeff Haas, Joel Halpern,\n   Wes
    Hardaker, Jia He, Sriganesh Kini, Suresh Krishnan,\n   David Lamparter, Xiang
    Li, Stephane Litkowski, Andrew McGregor,\n   Jan Medved, Thomas Morin, Tom Petch,
    Bruno Rijsman,\n   Juergen Schoenwaelder, Phil Shafer, Dave Thaler, Vladimir Vassilev,\n
    \  Rob Wilton, Yi Yang, Derek Man-Kit Yeung, and Jeffrey Zhang for their\n   helpful
    comments and suggestions.\n"
  title: Acknowledgments
- contents:
  - "Authors' Addresses\n   Ladislav Lhotka\n   CZ.NIC\n   Email: lhotka@nic.cz\n
    \  Acee Lindem\n   Cisco Systems\n   Email: acee@cisco.com\n   Yingzhen Qu\n   Huawei\n
    \  2330 Central Expressway\n   Santa Clara, CA  95050\n   United States of America\n
    \  Email: yingzhen.qu@huawei.com\n"
  title: Authors' Addresses
