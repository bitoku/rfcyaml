- title: __initial_text__
  contents:
  - "  Configuration Data Model for the IP Flow Information Export (IPFIX)\n     \
    \            and Packet Sampling (PSAMP) Protocols\n"
- title: Abstract
  contents:
  - "Abstract\n   This document specifies a data model for the IP Flow Information\n\
    \   Export (IPFIX) and Packet Sampling (PSAMP) protocols.  It is for\n   configuring\
    \ and monitoring Selection Processes, Caches, Exporting\n   Processes, and Collecting\
    \ Processes of IPFIX- and PSAMP-compliant\n   Monitoring Devices using the Network\
    \ Configuration Protocol\n   (NETCONF).  The data model is defined using UML (Unified\
    \ Modeling\n   Language) class diagrams and formally specified using YANG.  The\n\
    \   configuration data is encoded in Extensible Markup Language (XML).\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6728.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2012 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n   This document\
    \ may contain material from IETF Documents or IETF\n   Contributions published\
    \ or made publicly available before November\n   10, 2008.  The person(s) controlling\
    \ the copyright in some of this\n   material may not have granted the IETF Trust\
    \ the right to allow\n   modifications of such material outside the IETF Standards\
    \ Process.\n   Without obtaining an adequate license from the person(s) controlling\n\
    \   the copyright in such materials, this document may not be modified\n   outside\
    \ the IETF Standards Process, and derivative works of it may\n   not be created\
    \ outside the IETF Standards Process, except to format\n   it for publication\
    \ as an RFC or to translate it into languages other\n   than English.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   3\n     1.1.  IPFIX Documents Overview  . . . . . . . . . . . .\
    \ . . . .   4\n     1.2.  PSAMP Documents Overview  . . . . . . . . . . . . .\
    \ . . .   5\n   2.  Terminology . . . . . . . . . . . . . . . . . . . . . . .\
    \ . .   5\n   3.  Structure of the Configuration Data Model . . . . . . . . .\
    \ .   7\n     3.1.  Metering Process Decomposition in Selection Process\n    \
    \       and Cache . . . . . . . . . . . . . . . . . . . . . . . .   8\n     3.2.\
    \  UML Representation  . . . . . . . . . . . . . . . . . . .  10\n     3.3.  Exporter\
    \ Configuration  . . . . . . . . . . . . . . . . .  15\n     3.4.  Collector Configuration\
    \ . . . . . . . . . . . . . . . . .  17\n   4.  Configuration Parameters  . .\
    \ . . . . . . . . . . . . . . . .  18\n     4.1.  ObservationPoint Class  . .\
    \ . . . . . . . . . . . . . . .  18\n     4.2.  SelectionProcess Class  . . .\
    \ . . . . . . . . . . . . . .  20\n       4.2.1.  Selector Class  . . . . . .\
    \ . . . . . . . . . . . . .  21\n       4.2.2.  Sampler Classes . . . . . . .\
    \ . . . . . . . . . . . .  22\n       4.2.3.  Filter Classes  . . . . . . . .\
    \ . . . . . . . . . . .  23\n     4.3.  Cache Class . . . . . . . . . . . . .\
    \ . . . . . . . . . .  25\n       4.3.1.  ImmediateCache Class  . . . . . . .\
    \ . . . . . . . . .  26\n       4.3.2.  TimeoutCache, NaturalCache, and PermanentCache\n\
    \               Class . . . . . . . . . . . . . . . . . . . . . . . .  27\n  \
    \     4.3.3.  CacheLayout Class . . . . . . . . . . . . . . . . . .  29\n    \
    \ 4.4.  ExportingProcess Class  . . . . . . . . . . . . . . . . .  32\n      \
    \ 4.4.1.  SctpExporter Class  . . . . . . . . . . . . . . . . .  34\n       4.4.2.\
    \  UdpExporter Class . . . . . . . . . . . . . . . . . .  36\n       4.4.3.  TcpExporter\
    \ Class . . . . . . . . . . . . . . . . . .  37\n       4.4.4.  FileWriter Class\
    \  . . . . . . . . . . . . . . . . . .  38\n       4.4.5.  Options Class . . .\
    \ . . . . . . . . . . . . . . . . .  39\n     4.5.  CollectingProcess Class .\
    \ . . . . . . . . . . . . . . . .  41\n       4.5.1.  SctpCollector Class . .\
    \ . . . . . . . . . . . . . . .  42\n       4.5.2.  UdpCollector Class  . . .\
    \ . . . . . . . . . . . . . .  43\n       4.5.3.  TcpCollector Class  . . . .\
    \ . . . . . . . . . . . . .  44\n       4.5.4.  FileReader Class  . . . . . .\
    \ . . . . . . . . . . . .  45\n     4.6.  Transport Layer Security Class  . .\
    \ . . . . . . . . . . .  46\n     4.7.  Transport Session Class . . . . . . .\
    \ . . . . . . . . . .  49\n     4.8.  Template Class  . . . . . . . . . . . .\
    \ . . . . . . . . .  53\n   5.  Adaptation to Device Capabilities . . . . . .\
    \ . . . . . . . .  54\n   6.  YANG Module of the IPFIX/PSAMP Configuration Data\
    \ Model . . .  57\n   7.  Examples  . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . 104\n     7.1.  PSAMP Device  . . . . . . . . . . . . . . . . . .\
    \ . . . . 104\n     7.2.  IPFIX Device  . . . . . . . . . . . . . . . . . . .\
    \ . . . 115\n     7.3.  Export of Flow Records and Packet Reports . . . . . .\
    \ . . 118\n     7.4.  Collector and File Writer . . . . . . . . . . . . . . .\
    \ . 121\n     7.5.  Deviations  . . . . . . . . . . . . . . . . . . . . . . .\
    \ 122\n   8.  Security Considerations . . . . . . . . . . . . . . . . . . . 122\n\
    \   9.  IANA Considerations . . . . . . . . . . . . . . . . . . . . . 124\n  \
    \ 10. Acknowledgements  . . . . . . . . . . . . . . . . . . . . . . 125\n   11.\
    \ References  . . . . . . . . . . . . . . . . . . . . . . . . . 125\n     11.1.\
    \ Normative References  . . . . . . . . . . . . . . . . . . 125\n     11.2. Informative\
    \ References  . . . . . . . . . . . . . . . . . 126\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   IPFIX- and PSAMP-compliant Monitoring Devices (routers,\
    \ switches,\n   monitoring probes, Collectors, etc.) offer various configuration\n\
    \   possibilities that allow adapting network monitoring to the goals and\n  \
    \ purposes of the application, such as accounting and charging, traffic\n   analysis,\
    \ performance monitoring, and security monitoring.  The use\n   of a common vendor-independent\
    \ configuration data model for IPFIX-\n   and PSAMP-compliant Monitoring Devices\
    \ facilitates network management\n   and configuration, especially if Monitoring\
    \ Devices of different\n   implementers or manufacturers are deployed simultaneously.\
    \  On the\n   one hand, a vendor-independent configuration data model helps to\n\
    \   store and manage the configuration data of Monitoring Devices in a\n   consistent\
    \ format.  On the other hand, it can be used for local and\n   remote configuration\
    \ of Monitoring Devices.\n   The purpose of this document is the specification\
    \ of a vendor-\n   independent configuration data model that covers the commonly\n\
    \   available configuration parameters of Selection Processes, Caches,\n   Exporting\
    \ Processes, and Collecting Processes.  In addition, it\n   includes common states\
    \ parameters of a Monitoring Device.  The\n   configuration data model is defined\
    \ using UML (Unified Modeling\n   Language) class diagrams [UML], while the actual\
    \ configuration data\n   is encoded in Extensible Markup Language (XML)\n   [W3C.REC-xml-20081126].\
    \  An XML document conforming to the\n   configuration data model contains the\
    \ configuration data of one\n   Monitoring Device.\n   The configuration data\
    \ model is designed for use with the NETCONF\n   protocol [RFC6241] in order to\
    \ configure remote Monitoring Devices.\n   With the NETCONF protocol, it is possible\
    \ to transfer a complete set\n   of configuration data to a Monitoring Device,\
    \ to query the current\n   configuration and state parameters of a Monitoring\
    \ Device, and to\n   change specific parameter values of an existing Monitoring\
    \ Device\n   configuration.\n   In order to ensure compatibility with the NETCONF\
    \ protocol [RFC6241],\n   YANG [RFC6020] is used to formally specify the configuration\
    \ data\n   model.  If required, the YANG specification of the configuration data\n\
    \   model can be converted into XML Schema language\n   [W3C.REC-xmlschema-0-20041028]\
    \ or DSDL (Document Schema Definition\n   Languages) [RFC6110], for example, by\
    \ using the pyang tool\n   [YANG-WEB].  YANG provides mechanisms to adapt the\
    \ configuration data\n   model to device-specific constraints and to augment the\
    \ model with\n   additional device-specific or vendor-specific parameters.\n \
    \  The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\"\
    ,\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in\
    \ this\n   document are to be interpreted as described in [RFC2119].\n"
- title: 1.1.  IPFIX Documents Overview
  contents:
  - "1.1.  IPFIX Documents Overview\n   The IPFIX protocol [RFC5101] provides network\
    \ administrators with\n   access to IP Flow information.  The architecture for\
    \ the export of\n   measured IP Flow information out of an IPFIX Exporting Process\
    \ to a\n   Collecting Process is defined in [RFC5470], per the requirements\n\
    \   defined in [RFC3917].  The IPFIX protocol [RFC5101] specifies how\n   IPFIX\
    \ Data Records and Templates are carried via a number of\n   transport protocols\
    \ from IPFIX Exporting Processes to IPFIX\n   Collecting Process.  IPFIX has a\
    \ formal description of IPFIX\n   Information Elements, their name, type, and\
    \ additional semantic\n   information, as specified in [RFC5102].  [RFC6615] specifies\
    \ the\n   IPFIX Management Information Base, consisting of the IPFIX MIB module\n\
    \   and the IPFIX SELECTOR MIB module.  Finally, [RFC5472] describes what\n  \
    \ type of applications can use the IPFIX protocol and how they can use\n   the\
    \ information provided.  It furthermore shows how the IPFIX\n   framework relates\
    \ to other architectures and frameworks.  Methods for\n   efficient export of\
    \ bidirectional Flow information and common\n   properties in Data Records are\
    \ specified in [RFC5103] and [RFC5473],\n   respectively.  [RFC5610] addresses\
    \ the export of extended type\n   information for enterprise-specific Information\
    \ Elements.  The\n   storage of IPFIX Messages in a file is specified in [RFC5655].\n"
- title: 1.2.  PSAMP Documents Overview
  contents:
  - "1.2.  PSAMP Documents Overview\n   The framework for packet selection and reporting\
    \ [RFC5474] enables\n   network elements to select subsets of packets by statistical\
    \ and\n   other methods, and to export a stream of reports on the selected\n \
    \  packets to a Collector.  The set of packet selection techniques\n   (Sampling,\
    \ Filtering, and hashing) standardized by PSAMP is described\n   in [RFC5475].\
    \  The PSAMP protocol [RFC5476] specifies the export of\n   packet information\
    \ from a PSAMP Exporting Process to a PSAMP\n   Collector.  Instead of exporting\
    \ PSAMP Packet Reports, the stream of\n   selected packets may also serve as input\
    \ to the generation of IPFIX\n   Flow Records.  Like IPFIX, PSAMP has a formal\
    \ description of its\n   Information Elements, their name, type, and additional\
    \ semantic\n   information.  The PSAMP information model is defined in [RFC5477].\n\
    \   [RFC6727] specifies the PSAMP MIB module as an extension of the IPFIX\n  \
    \ SELECTOR MIB module defined in [RFC6615].\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   This document adopts the terminologies used in [RFC5101],\
    \ [RFC5103],\n   [RFC5655], and [RFC5476].  As in these documents, all specific\
    \ terms\n   have the first letter of a word capitalized when used in this\n  \
    \ document.  The following listing indicates in which references the\n   definitions\
    \ of those terms that are commonly used throughout this\n   document can be found:\n\
    \   o  Definitions adopted from [RFC5101]:\n      *  Collection Process\n    \
    \  *  Collector\n      *  Data Record\n      *  Exporter\n      *  Flow\n    \
    \  *  Flow Key\n      *  Flow Record\n      *  Information Element\n      *  IPFIX\
    \ Device\n      *  IPFIX Message\n      *  Observation Domain\n      *  Observation\
    \ Point\n      *  (Options) Template\n   o  Definitions adopted from [RFC5103]:\n\
    \      *  Reverse Information Element\n   o  Definitions adopted from [RFC5655]:\n\
    \      *  File Reader\n      *  File Writer\n   o  Definitions adopted from [RFC5476]:\n\
    \      *  Filtering\n      *  Observed Packet Stream\n      *  Packet Report\n\
    \      *  PSAMP Device\n      *  Sampling\n      *  Selection Process\n      *\
    \  Selection Sequence\n      *  Selection Sequence Report Interpretation\n   \
    \   *  Selection Sequence Statistics Report Interpretation\n      *  Selection\
    \ State\n      *  Selector, Primitive Selector, Composite Selector\n      *  Selector\
    \ Report Interpretation\n   The terms Metering Process and Exporting Process have\
    \ different\n   definitions in [RFC5101] and [RFC5476].  In the scope of this\n\
    \   document, these terms are used according to the following\n   definitions,\
    \ which cover the deployment in both PSAMP Devices and\n   IPFIX Devices:\n  \
    \ Metering Process\n      The Metering Process generates IPFIX Flow Records or\
    \ PSAMP Packet\n      Reports, depending on its deployment as part of an IPFIX\
    \ Device or\n      PSAMP Device.  Inputs to the process are packets observed at\
    \ one\n      or more Observation Points, as well as characteristics describing\n\
    \      the packet treatment at these Observation Points.  If IPFIX Flow\n    \
    \  Records are generated, the Metering Process MUST NOT aggregate\n      packets\
    \ observed at different Observation Domains in the same\n      Flow.  The function\
    \ of the Metering Process is split into two\n      functional blocks: Selection\
    \ Process and Cache.\n   Exporting Process\n      Depending on its deployment\
    \ as part of an IPFIX Device or PSAMP\n      Device, the Exporting Process sends\
    \ IPFIX Flow Records or PSAMP\n      Packet Reports to one or more Collecting\
    \ Processes.  The IPFIX\n      Flow Records or PSAMP Packet Reports are generated\
    \ by one or more\n      Metering Processes.\n   In addition to the existing IPFIX\
    \ and PSAMP terminology, the\n   following terms are defined:\n   Cache\n    \
    \  The Cache is a functional block in a Metering Process that\n      generates\
    \ IPFIX Flow Records or PSAMP Packet Reports from a\n      Selected Packet Stream,\
    \ in accordance with its configuration.  If\n      Flow Records are generated,\
    \ the Cache performs tasks like creating\n      new records, updating existing\
    \ ones, computing Flow statistics,\n      deriving further Flow properties, detecting\
    \ Flow expiration,\n      passing Flow Records to the Exporting Process, and deleting\
    \ Flow\n      Records.  If Packet Reports are generated, the Cache performs\n\
    \      tasks like extracting packet contents and derived packet\n      properties\
    \ from the Selected Packet Stream, creating new records,\n      and passing them\
    \ as Packet Reports to the Exporting Process.\n   Cache Layout\n      The Cache\
    \ Layout defines the superset of fields that are included\n      in the Packet\
    \ Reports or Flow Records maintained by the Cache.\n      The fields are specified\
    \ by the corresponding Information\n      Elements.  In general, the largest possible\
    \ subset of the\n      specified fields is derived for every Packet Report or\
    \ Flow\n      Record.  More specific rules about which fields must be included\n\
    \      are given in Section 4.3.3.\n   Monitoring Device\n      A Monitoring Device\
    \ implements at least one of the functional\n      blocks specified in the context\
    \ of IPFIX or PSAMP.  In particular,\n      the term Monitoring Device encompasses\
    \ Exporters, Collectors,\n      IPFIX Devices, and PSAMP Devices.\n   Selected\
    \ Packet Stream\n      The Selected Packet Stream is the set of all packets selected\
    \ by a\n      Selection Process.\n"
- title: 3.  Structure of the Configuration Data Model
  contents:
  - "3.  Structure of the Configuration Data Model\n   The IPFIX reference model in\
    \ [RFC5470] describes Metering Processes,\n   Exporting Processes, and Collecting\
    \ Processes as functional blocks of\n   IPFIX Devices.  The PSAMP framework [RFC5474]\
    \ provides the\n   corresponding information for PSAMP Devices and introduces\
    \ the\n   Selection Process as a functional block within Metering Processes.\n\
    \   In Section 2 of the document, the Cache is defined as another\n   functional\
    \ block within Metering Processes.  Further explanations\n   about the relationship\
    \ between Selection Process and Cache are given\n   in Section 3.1.  IPFIX File\
    \ Reader and File Writer are defined as\n   specific kinds of Exporting and Collecting\
    \ Processes in [RFC5655].\n   Monitoring Device implementations usually maintain\
    \ the separation of\n   various functional blocks, although they do not necessarily\
    \ implement\n   all of them.  Furthermore, they provide various configuration\n\
    \   possibilities; some of them are specified as mandatory by the IPFIX\n   protocol\
    \ [RFC5101] or PSAMP protocol [RFC5476].  The configuration\n   data model enables\
    \ the setting of commonly available configuration\n   parameters for Selection\
    \ Processes, Caches, Exporting Processes, and\n   Collecting Processes.  In addition,\
    \ it allows specifying the\n   composition of functional blocks within a Monitoring\
    \ Device\n   configuration and their linkage with Observation Points.\n   The\
    \ selection of parameters in the configuration data model is based\n   on configuration\
    \ issues discussed in the IPFIX and PSAMP documents\n   [RFC3917], [RFC5101],\
    \ [RFC5470], [RFC5476], [RFC5474], and [RFC5475].\n   Furthermore, the structure\
    \ and content of the IPFIX MIB module\n   [RFC6615] and the PSAMP MIB module [RFC6727]\
    \ have been taken into\n   consideration.  Consistency between the configuration\
    \ data model and\n   the IPFIX and PSAMP MIB modules is an intended goal.  Therefore,\n\
    \   parameters in the configuration data model are named according to\n   corresponding\
    \ managed objects.  Certain IPFIX MIB objects containing\n   state data have been\
    \ adopted as state parameters in the configuration\n   data model.  State parameters\
    \ cannot be configured, yet their values\n   can be queried from the Monitoring\
    \ Device by a network manager.\n   Section 3.2 explains how UML class diagrams\
    \ are deployed to\n   illustrate the structure of the configuration data model.\n\
    \   Thereafter, Section 3.3 and Section 3.4 explain the class diagrams\n   for\
    \ the configuration of Exporters and Collectors, respectively.\n   Each of the\
    \ presented classes contains specific configuration\n   parameters that are specified\
    \ in Section 4.  Section 5 gives a short\n   introduction to YANG concepts that\
    \ allow adapting the configuration\n   data model to the capabilities of a device.\
    \  The formal definition of\n   the configuration data model in YANG is given\
    \ in Section 6.\n   Section 7 illustrates the usage of the model with example\n\
    \   configurations in XML.\n"
- title: 3.1.  Metering Process Decomposition in Selection Process and Cache
  contents:
  - "3.1.  Metering Process Decomposition in Selection Process and Cache\n   In a\
    \ Monitoring Device implementation, the functionality of the\n   Metering Process\
    \ is commonly split into packet Sampling and Filtering\n   functions performed\
    \ by Selection Processes, and the maintenance of\n   Flow Records and Packet Reports\
    \ is performed by a Cache.  Figure 1\n   illustrates this separation with the\
    \ example of a basic Metering\n   Process.\n               +-----------------------------------+\n\
    \               | Metering Process                  |\n               | +-----------+\
    \ Selected            |\n      Observed | | Selection | Packet    +-------+ |\
    \  Stream of\n      Packet  -->| Process   |---------->| Cache |--> Flow Records\
    \ or\n      Stream   | +-----------+ Stream    +-------+ |  Packet Reports\n \
    \              +-----------------------------------+\n     Figure 1: Selection\
    \ Process and Cache forming a Metering Process\n   The configuration data model\
    \ adopts the separation of Selection\n   Processes and Caches in order to support\
    \ the flexible configuration\n   and combination of these functional blocks. \
    \ As defined in [RFC5476],\n   the Selection Process takes an Observed Packet\
    \ Stream as its input\n   and selects a subset of that stream as its output (Selected\
    \ Packet\n   Stream).  The action of the Selection Process on a single packet\
    \ of\n   its input is defined by one Selector (called a Primitive Selector) or\n\
    \   an ordered composition of multiple Selectors (called a Composite\n   Selector).\
    \  The Cache generates Flow Records or Packet Reports from\n   the Selected Packet\
    \ Stream, depending on its configuration.\n   The configuration data model does\
    \ not allow configuring a Metering\n   Process without any Selection Process in\
    \ front of the Cache.  If all\n   packets in the Observed Packet Stream shall\
    \ be selected and passed to\n   the Cache without any Filtering or Sampling, a\
    \ Selection Process\n   needs to be configured with a Selector that selects all\
    \ packets\n   (\"SelectAll\" class in Section 4.2.1).\n   The configuration data\
    \ model enables the configuration of a Selection\n   Process that receives packets\
    \ from multiple Observation Points as its\n   input.  In this case, the Observed\
    \ Packet Streams of the Observation\n   Points are processed in independent Selection\
    \ Sequences.  As\n   specified in [RFC5476], a distinct set of Selector instances\
    \ needs to\n   be maintained per Selection Sequence in order to keep the Selection\n\
    \   States and statistics separate.\n   With the configuration data model, it\
    \ is possible to configure a\n   Metering Process with more than one Selection\
    \ Processes whose output\n   is processed by a single Cache.  This is illustrated\
    \ in Figure 2.\n              +-------------------------------------+\n      \
    \        | Metering Process                    |\n              | +-----------+\
    \ Selected              |\n     Observed | | Selection | Packet              \
    \  |\n     Packet  -->| Process   |----------+  +-------+ |\n     Stream   | +-----------+\
    \ Stream   +->|       | |  Stream of\n              |      ...               \
    \   | Cache |--> Flow Records or\n              | +-----------+ Selected +->|\
    \       | |  Packet Reports\n     Observed | | Selection | Packet   |  +-------+\
    \ |\n     Packet  -->| Process   |----------+            |\n     Stream   | +-----------+\
    \ Stream                |\n              +-------------------------------------+\n\
    \       Figure 2: Metering Process with multiple Selection Processes\n   The Observed\
    \ Packet Streams at the input of a Metering Process may\n   originate from Observation\
    \ Points belonging to different Observation\n   Domains.  By definition of the\
    \ Observation Domain (see [RFC5101]),\n   however, a Cache MUST NOT aggregate\
    \ packets observed at different\n   Observation Domains in the same Flow.  Hence,\
    \ if the Cache is\n   configured to generate Flow Records, it needs to distinguish\
    \ packets\n   according to their Observation Domains.\n"
- title: 3.2.  UML Representation
  contents:
  - "3.2.  UML Representation\n   We use UML class diagrams [UML] to explain the structure\
    \ of the\n   configuration data model.  The attributes of the classes are the\n\
    \   configuration or state parameters.  The configuration and state\n   parameters\
    \ of a given Monitoring Device are represented as objects of\n   these classes\
    \ encoded in XML.\n    +------------------------------+\n    | SctpExporter  \
    \               |\n    +------------------------------+    0..1 +------------------------+\n\
    \    | name                         |<>-------| TransportLayerSecurity |\n   \
    \ | ipfixVersion = 10            |         +------------------------+\n    | sourceIPAddress[0..*]\
    \        |\n    | destinationIPAddress[1..*]   |    0..1 +------------------------+\n\
    \    | destinationPort = 4739|4740  |<>-------| TransportSession       |\n   \
    \ | ifName/ifIndex[0..1]         |         +------------------------+\n    | sendBufferSize\
    \ {opt.}        |\n    | rateLimit[0..1]              |\n    | timedReliability\
    \ = 0         |\n    +------------------------------+\n                 Figure\
    \ 3: UML example: SctpExporter class\n   As an example, Figure 3 shows the UML\
    \ diagram of the SctpExporter\n   class, which is specified in more detail in\
    \ Section 4.4.1.  The upper\n   box contains the name of the class.  The lower\
    \ box lists the\n   attributes of the class.  Each attribute corresponds to a\
    \ parameter\n   of the configuration data model.\n   Behind an attribute's name,\
    \ there may appear a multiplicity indicator\n   in brackets (i.e., between \"\
    [\" and \"]\").  An attribute with\n   multiplicity indicator \"[0..1]\" represents\
    \ an OPTIONAL configuration\n   parameter that is only included in the configuration\
    \ data if the user\n   configures it.  Typically, the absence of an OPTIONAL parameter\
    \ has a\n   specific meaning.  For example, not configuring rateLimit in an\n\
    \   object of the SctpExporter class means that no rate limiting will be\n   applied\
    \ to the exported data.  In YANG, an OPTIONAL parameter is\n   specified as a\
    \ \"leaf\" without \"mandatory true\" substatement.  The\n   \"description\" substatement\
    \ specifies the behavior for the case that\n   the parameter is not configured.\n\
    \   The multiplicity indicator \"[0..*]\" means that this parameter is\n   OPTIONAL\
    \ and MAY be configured multiple times with different values.\n   In the example,\
    \ multiple source IP addresses (sourceIPAddress) may be\n   configured for a multihomed\
    \ Exporting Process.  In YANG, an attribute\n   with multiplicity indicator \"\
    [0..*]\" corresponds to a \"leaf-list\".\n   The multiplicity indicator \"[1..*]\"\
    \ means that this parameter MUST be\n   configured at least once and MAY be configured\
    \ multiple times with\n   different values.  In the example, one or more destination\
    \ IP\n   addresses (destinationIPAddress) must be configured to specify the\n\
    \   export destination.  In YANG, an attribute with multiplicity\n   indicator\
    \ \"[1..*]\" corresponds to a \"leaf-list\" with \"min-elements 1\"\n   substatement.\
    \  Note that attributes without this multiplicity\n   indicator MUST NOT appear\
    \ more than once in each object of the class.\n   Attributes without multiplicity\
    \ indicator may be endued with a\n   default value that is indicated behind the\
    \ equality symbol (\"=\").  If\n   a default value exists, the parameter does\
    \ not have to be explicitly\n   configured by the user.  If the parameter is not\
    \ configured by the\n   user, the Monitoring Device MUST use the specified default\
    \ value for\n   the given parameter.  In the example, IPFIX version 10 must be\
    \ used\n   unless a different value is configured for ipfixVersion.  In YANG,\
    \ an\n   attribute with default value corresponds to a \"leaf\" with \"default\"\
    \n   substatement.\n   In the example, there exist two default values for the\
    \ destination\n   port (destinationPort) -- namely, the registered ports for IPFIX\
    \ with\n   and without transport layer security (i.e., DTLS or TLS), which are\n\
    \   4740 and 4739, respectively.  In the UML diagram, the two default\n   values\
    \ are separated by a vertical bar (\"|\").  In YANG, such\n   conditional default\
    \ value alternatives cannot be specified formally.\n   Instead, they are defined\
    \ in the \"description\" substatement of the\n   \"leaf\".\n   Further attribute\
    \ properties are denoted in braces (i.e., between \"{\"\n   and \"}\").  An attribute\
    \ with property \"{opt.}\", such as\n   sendBufferSize in the SctpExporter class,\
    \ represents a parameter that\n   MAY be configured by the user.  If not configured\
    \ by the user, the\n   Monitoring Device MUST set an appropriate value for this\
    \ parameter at\n   configuration time.  As a result, the parameter will always\
    \ exist in\n   the configuration data, yet it is not mandatory for the user to\n\
    \   configure it.  This behavior can be implemented as a static device-\n   specific\
    \ default value, but does not have to be.  Therefore, the user\n   MUST NOT expect\
    \ that the device always sets the same values for the\n   same parameter.  Regardless\
    \ of whether the parameter value has been\n   configured by the user or set by\
    \ the device, the parameter value MUST\n   NOT be changed by the device after\
    \ configuration.  Since this\n   behavior cannot be specified formally in YANG,\
    \ it is specified in the\n   \"description\" substatement of the \"leaf\".\n \
    \  The availability of a parameter may depend on another parameter\n   value.\
    \  In the UML diagram, such restrictions are indicated as\n   attribute properties\
    \ (e.g., \"{SCTP only}\").  The given example does\n   not show such restrictions.\
    \  In YANG, the availability of a parameter\n   is formally restricted with the\
    \ \"when\" substatement of the \"leaf\".\n   Another attribute property not shown\
    \ in the example is \"{readOnly}\",\n   which specifies state parameters that\
    \ cannot be configured.  In YANG,\n   this corresponds to the \"config false\"\
    \ substatement.\n   Attributes without multiplicity indicator, without default\
    \ value, and\n   without \"{readOnly}\" property are mandatory configuration parameters.\n\
    \   These parameters MUST be configured by the user unless an attribute\n   property\
    \ determines that the parameter is not available.  In YANG, a\n   mandatory parameter\
    \ corresponds to a \"leaf\" with \"mandatory true\"\n   substatement.  In the\
    \ example, the user MUST configure the name\n   parameter.\n   If some parameters\
    \ are related to each other, it makes sense to group\n   these parameters in a\
    \ subclass.  This is especially useful if\n   different subclasses represent choices\
    \ of different parameter sets,\n   or if the parameters of a subclass may appear\
    \ multiple times.  For\n   example, the SctpExporter class MAY contain the parameters\
    \ of the\n   TransportLayerSecurity subclass.\n   An object of a class is encoded\
    \ as an XML element.  In order to\n   distinguish between classes and objects,\
    \ class names start with an\n   uppercase character while the associated XML elements\
    \ start with\n   lowercase characters.  Parameters appear as XML elements that\
    \ are\n   nested in the XML element of the object.  In XML, the parameters of\n\
    \   an object can appear in any order and do not have to follow the order\n  \
    \ in the UML class diagram.  Unless specified differently, the order in\n   which\
    \ parameters appear does not have a meaning.  As an example, an\n   object of\
    \ the SctpExporter class corresponds to one occurrence of\n     <sctpExporter>\n\
    \       <name>my-sctp-export</name>\n       ...\n     </sctpExporter>\n   There\
    \ are various possibilities how objects of classes can be related\n   to each\
    \ other.  In the scope of this document, we use two different\n   types of relationship\
    \ between objects: aggregation and unidirectional\n   association.  In UML class\
    \ diagrams, two different arrow types are\n   used as shown in Figure 4.\n   \
    \         +---+   0..* +---+         +---+ 0..*  1 +---+\n            | A |<>------|\
    \ B |         | A |-------->| B |\n            +---+        +---+         +---+\
    \         +---+\n             (a) Aggregation     (b) Unidirectional association\n\
    \            Figure 4: Class relationships in UML class diagrams\n   Aggregation\
    \ means that one object is part of the other object.  In\n   Figure 4 (a), an\
    \ object of class B is part of an object of class A.\n   This corresponds to nested\
    \ XML elements:\n     <a>\n       <b>\n         ...\n       </b>\n       ...\n\
    \     </a>\n   In the example, objects of the TransportLayerSecurity class and\
    \ the\n   TransportSession class appear as nested XML elements\n   <transportLayerSecurity>\
    \ and <transportSession> within an object of\n   the SctpExporter class <sctpExporter>.\n\
    \   A unidirectional association is a reference to an object.  In\n   Figure 4(b),\
    \ an object of class A contains a reference to an object\n   of class B.  This\
    \ corresponds to separate XML elements that are not\n   nested.  To distinguish\
    \ different objects of class B, class B must\n   have a key.  In the configuration\
    \ data model, keys are string\n   parameters called \"name\", corresponding to\
    \ XML elements <name>.  The\n   names MUST be unique within the given XML subtree.\
    \  The reference to\n   a specific object of class B is encoded with an XML element\
    \ <b>,\n   which contains the name of an object.  If an object of class A refers\n\
    \   to the object of class B with name \"foo\", this looks as follows:\n     <a>\n\
    \       ...\n       <b>foo</b>\n       ...\n     </a>\n     <b>\n       <name>foo</name>\n\
    \       ...\n     </b>\n   In Figure 4, the indicated numbers define the multiplicity:\n\
    \      \"1\": one only\n      \"0..*\": zero or more\n      \"1..*\": one or more\n\
    \   In the case of aggregation, the multiplicity indicates how many\n   objects\
    \ of one class may be included in one object of the other\n   class.  In Figure\
    \ 4(a), an object of class A may contain an arbitrary\n   number of objects of\
    \ class B.  In the case of unidirectional\n   association, the multiplicity at\
    \ the arrowhead specifies the number\n   of objects of a given class that may\
    \ be referred to.  The\n   multiplicity at the arrow tail specifies how many different\
    \ objects\n   of one class may refer to a single object of the other class.  In\n\
    \   Figure 4(b), an object of class A refers to single object of class B.\n  \
    \  One object of class B can be referred to from an arbitrary number of\n   objects\
    \ of class A.\n   Similar to classes that are referenced in UML associations,\
    \ classes\n   that contain configuration parameters and that occur in an\n   aggregation\
    \ relationship with multiplicity greater than one must have\n   a key.  This key\
    \ is necessary because every configuration parameter\n   must be addressable in\
    \ order to manipulate or delete it.  The key\n   values MUST be unique in the\
    \ given XML subtree (i.e., unique within\n   the aggregating object).  Hence,\
    \ if class B in Figure 4(a) contains a\n   configuration parameter, all objects\
    \ of class B belonging to the same\n   object of class A must have different key\
    \ values.  Again, the key\n   appears as an attribute called \"name\" in the concerned\
    \ classes.\n   A class that contains state parameters but no configuration\n \
    \  parameters, such as the Template class (see Section 4.8), does not\n   have\
    \ a key.  This is because state parameters cannot be manipulated\n   or deleted,\
    \ and therefore do not need to be addressable.\n   Note that the usage of keys\
    \ as described above is required by YANG\n   [RFC6020], which mandates the existence\
    \ of a key for elements that\n   appear in a list of configuration data.\n   The\
    \ configuration data model for IPFIX and PSAMP makes use of\n   unidirectional\
    \ associations to specify the data flow between\n   different functional blocks.\
    \  For example, if the output of a\n   Selection Process is processed by a Cache,\
    \ this corresponds to an\n   object of the SelectionProcess class that contains\
    \ a reference to an\n   object of the Cache class.  The configuration data model\
    \ does not\n   mandate that such a reference exists for every functional block\
    \ that\n   has an output.  If such a reference is absent, the output is dropped\n\
    \   without any further processing.  Although such configurations are\n   incomplete,\
    \ we do not consider them invalid as they may temporarily\n   occur if a Monitoring\
    \ Device is configured in multiple steps.  Also,\n   it might be useful to pre-configure\
    \ certain functions of a Monitoring\n   Device in order to be able to switch to\
    \ a new configuration more\n   quickly.\n"
- title: 3.3.  Exporter Configuration
  contents:
  - "3.3.  Exporter Configuration\n   Figure 5 below shows the main classes of the\
    \ configuration data model\n   that are involved in the configuration of an IPFIX\
    \ or PSAMP Exporter.\n   The role of the classes can be briefly summarized as\
    \ follows:\n   o  The ObservationPoint class specifies an Observation Point (i.e.,\n\
    \      an interface or linecard) of the Monitoring Device at which\n      packets\
    \ are captured for traffic measurements.  An object of the\n      ObservationPoint\
    \ class may be associated with one or more objects\n      of the SelectionProcess\
    \ class configuring Selection Processes that\n      process the observed packets\
    \ in parallel.  As long as an\n      ObservationPoint object is specified without\
    \ any references to\n      SelectionProcess objects, the captured packets are\
    \ not considered\n      by any Metering Process.\n   o  The SelectionProcess class\
    \ contains the configuration and state\n      parameters of a Selection Process.\
    \  The Selection Process may be\n      composed of a single Selector or a sequence\
    \ of Selectors, defining\n      a Primitive or Composite Selector, respectively.\n\
    \      The Selection Process selects packets from one or more Observed\n     \
    \ Packet Streams, each originating from a different Observation\n      Point.\
    \  Therefore, a SelectionProcess object MAY be referred to\n      from one or\
    \ more ObservationPoint objects.\n      A Selection Process MAY pass the Selected\
    \ Packet Stream to a\n      Cache.  Therefore, the SelectionProcess class contains\
    \ a reference\n      to an object of the Cache class.  If a Selection Process\
    \ is\n      configured without any reference to a Cache, the selected packets\n\
    \      are not accounted in any Packet Report or Flow Record.\n   o  The Cache\
    \ class contains configuration and state parameters of a\n      Cache.  A Cache\
    \ may receive the output of one or more Selection\n      Processes and maintains\
    \ corresponding Packet Reports or Flow\n      Records.  Therefore, an object of\
    \ the Cache class MAY be referred\n      to from multiple SelectionProcess objects.\n\
    \      Configuration parameters of the Cache class specify the size of\n     \
    \ the Cache, the Cache Layout, and expiration parameters if\n      applicable.\
    \  The Cache configuration also determines whether\n      Packet Reports or Flow\
    \ Records are generated.\n      A Cache MAY pass its output to one or more Exporting\
    \ Processes.\n      Therefore, the Cache class enables references to one or more\n\
    \      objects of the ExportingProcess class.  If a Cache object does not\n  \
    \    specify any reference to an ExportingProcess object, the Cache\n      output\
    \ is dropped.\n   o  The ExportingProcess class contains configuration and state\n\
    \      parameters of an Exporting Process.  It includes various\n      transport-protocol-specific\
    \ parameters and the export\n      destinations.  An object of the ExportingProcess\
    \ class MAY be\n      referred to from multiple objects of the Cache class.\n\
    \      An Exporting Process MAY be configured as a File Writer according\n   \
    \   to [RFC5655].\n                            +------------------+\n        \
    \                    | ObservationPoint |\n                            +------------------+\n\
    \                                 0..* |\n                                   \
    \   |\n                                 0..* V\n                            +------------------+\n\
    \                            | SelectionProcess |\n                          \
    \  +------------------+\n                                 0..* |\n           \
    \                           |\n                                 0..1 V\n     \
    \                       +------------------+\n                            | Cache\
    \            |\n                            +------------------+\n           \
    \                      0..* |\n                                      |\n     \
    \                            0..* V\n                            +------------------+\n\
    \                            | ExportingProcess |\n                          \
    \  +------------------+\n             Figure 5: Class diagram of Exporter configuration\n"
- title: 3.4.  Collector Configuration
  contents:
  - "3.4.  Collector Configuration\n   Figure 6 below shows the main classes of the\
    \ configuration data model\n   that are involved in the configuration of a Collector.\
    \  An object of\n   the CollectingProcess class specifies the local IP addresses,\n\
    \   transport protocols, and port numbers of a Collecting Process.\n   Alternatively,\
    \ the Collecting Process MAY be configured as a File\n   Reader according to [RFC5655].\n\
    \   An object of the CollectingProcess class may refer to one or more\n   ExportingProcess\
    \ objects configuring Exporting Processes that\n   reexport the received data.\
    \  As an example, an Exporting Process can\n   be configured as a File Writer\
    \ in order to save the received IPFIX\n   Messages in a file.\n              \
    \             +-------------------+\n                           | CollectingProcess\
    \ |\n                           +-------------------+\n                      \
    \          0..* |\n                                     |\n                  \
    \              0..* V\n                           +-------------------+\n    \
    \                       | ExportingProcess  |\n                           +-------------------+\n\
    \            Figure 6: Class diagram of Collector configuration\n"
- title: 4.  Configuration Parameters
  contents:
  - "4.  Configuration Parameters\n   This section specifies the configuration and\
    \ state parameters of the\n   configuration data model separately for each class.\n"
- title: 4.1.  ObservationPoint Class
  contents:
  - "4.1.  ObservationPoint Class\n         +-------------------------------+\n  \
    \       | ObservationPoint              |\n         +-------------------------------+\n\
    \         | name                          |\n         | observationPointId {readOnly}\
    \ |\n         | observationDomainId           | 0..*\n         | ifName[0..*]\
    \                  |-------------+\n         | ifIndex[0..*]                 |\
    \             | 0..*\n         | entPhysicalName[0..*]         |             V\n\
    \         | entPhysicalIndex[0..*]        |    +------------------+\n        \
    \ | direction = \"both\"            |    | SelectionProcess |\n         +-------------------------------+\
    \    +------------------+\n                     Figure 7: ObservationPoint class\n\
    \   Figure 7 shows the ObservationPoint class that specifies an\n   Observation\
    \ Point of the Monitoring Device.\n   As defined in [RFC5101], an Observation\
    \ Point can be any location\n   where packets are observed.  A Monitoring Device\
    \ potentially has more\n   than one such location.  An instance of ObservationPoint\
    \ class\n   defines which location is associated with a specific Observation\n\
    \   Point.  For this purpose, interfaces and physical entities are\n   identified\
    \ using their names.  Alternatively, index values of the\n   corresponding entries\
    \ in the ifTable (IF-MIB module [RFC2863]) or the\n   entPhysicalTable (ENTITY-MIB\
    \ module [RFC4133]) can be used as\n   identifiers.  However, indices SHOULD only\
    \ be used as identifiers if\n   an SNMP agent on the same Monitoring Device enables\
    \ access to the\n   corresponding MIB tables.\n   By its definition in [RFC5101],\
    \ an Observation Point may be\n   associated with a set of interfaces.  Therefore,\
    \ the configuration\n   data model allows configuring multiple interfaces and\
    \ physical\n   entities for a single Observation Point.\n   The Observation Point\
    \ ID (i.e., the value of the Information Element\n   observationPointId [IANA-IPFIX])\
    \ is assigned by the Monitoring\n   Device.  It appears as a state parameter in\
    \ the ObservationPoint\n   class.\n   The configuration parameters of the Observation\
    \ Point are:\n   observationDomainId:  This parameter defines the identifier of\
    \ the\n      Observation Domain the Observation Point belongs to.  Observation\n\
    \      Points that are configured with the same Observation Domain ID\n      belong\
    \ to the same Observation Domain.\n      Note that this parameter corresponds\
    \ to\n      ipfixObservationPointObservationDomainId in the IPFIX MIB module\n\
    \      [RFC6615].\n   ifName/ifIndex/entPhysicalName/entPhysicalIndex:  These\
    \ parameters\n      identify interfaces and physical entities (e.g., linecards)\
    \ that\n      are on the Monitoring Device and are associated with the given\n\
    \      Observation Point.\n      An interface is either identified by its name\
    \ (ifName) or the\n      ifIndex value of the corresponding object in the IF-MIB\
    \ module\n      [RFC2863]. ifIndex SHOULD only be used if an SNMP agent enables\n\
    \      access to the ifTable.\n      Similarly, a physical entity is either identified\
    \ by its name\n      (entPhysicalName) or the entPhysicalIndex value of the\n\
    \      corresponding object in the ENTITY-MIB module [RFC4133].\n      entPhysicalIndex\
    \ SHOULD only be used if an SNMP agent enables\n      access to the entPhysicalTable.\n\
    \      Note that the parameters ifIndex and entPhysicalIndex correspond\n    \
    \  to ipfixObservationPointPhysicalInterface and\n      ipfixObservationPointPhysicalEntity\
    \ in the IPFIX MIB module\n      [RFC6615].\n   direction:  This parameter specifies\
    \ if ingress traffic, egress\n      traffic, or both ingress and egress traffic\
    \ is captured, using the\n      values \"ingress\", \"egress\", and \"both\",\
    \ respectively.  If not\n      configured, ingress and egress traffic is captured\
    \ (i.e., the\n      default value is \"both\").  If not applicable (e.g., in the\
    \ case of\n      a sniffing interface in promiscuous mode), the value of this\n\
    \      parameter is ignored.\n   An ObservationPoint object MAY refer to one or\
    \ more SelectionProcess\n   objects configuring Selection Processes that process\
    \ the observed\n   packets in parallel.\n"
- title: 4.2.  SelectionProcess Class
  contents:
  - "4.2.  SelectionProcess Class\n       +------------------+\n       | SelectionProcess\
    \ |\n       +------------------+   1..* +----------+\n       | name          \
    \   |<>------| Selector |\n       |                  |        +----------+\n \
    \      |                  |\n       |                  |   0..* +--------------------------------+\n\
    \       |                  |<>------| SelectionSequence              |\n     \
    \  |                  |        +--------------------------------+\n       |  \
    \                |        | observationDomainId {readOnly} |\n       |       \
    \           |        | selectionSequenceId {readOnly} |\n       |            \
    \      |        +--------------------------------+\n       |                 \
    \ |\n       |                  | 0..*  0..1 +-------+\n       |              \
    \    |----------->| Cache |\n       +------------------+            +-------+\n\
    \                     Figure 8: SelectionProcess class\n   Figure 8 shows the\
    \ SelectionProcess class.  The SelectionProcess\n   class contains the configuration\
    \ and state parameters of a Selection\n   Process that selects packets from one\
    \ or more Observed Packet Streams\n   and generates a Selected Packet Stream as\
    \ its output.  A non-empty\n   ordered list defines a sequence of Selectors. \
    \ The actions defined by\n   the Selectors are applied to the stream of incoming\
    \ packets in the\n   specified order.\n   If the Selection Process receives packets\
    \ from multiple Observation\n   Points, the Observed Packet Streams need to be\
    \ processed\n   independently in separate Selection Sequences.  Each Selection\n\
    \   Sequence is identified by a Selection Sequence ID that is unique\n   within\
    \ the Observation Domain the Observation Point belongs to (see\n   [RFC5477]).\
    \  Selection Sequence IDs are assigned by the Monitoring\n   Device.  As state\
    \ parameters, the SelectionProcess class contains a\n   list of (observationDomainId,\
    \ selectionSequenceId) tuples specifying\n   the assigned Selection Sequence IDs\
    \ and corresponding Observation\n   Domain IDs.  With this information, it is\
    \ possible to associate\n   Selection Sequence (Statistics) Report Interpretations\
    \ exported\n   according to the PSAMP protocol specification [RFC5476] with the\n\
    \   corresponding object of the SelectionProcess class.\n   A SelectionProcess\
    \ object MAY include a reference to an object of the\n   Cache class to generate\
    \ Packet Reports or Flow Records from the\n   Selected Packet Stream.\n"
- title: 4.2.1.  Selector Class
  contents:
  - "4.2.1.  Selector Class\n    +--------------------------------------+\n    | Selector\
    \                             |\n    +--------------------------------------+\
    \      1 +-----------------+\n    | name                                 |<>------+\
    \ SelectAll/      |\n    | packetsObserved {readOnly}           |        | SampCountBased/\
    \ |\n    | packetsDropped {readOnly}            |        | SampTimeBased/  |\n\
    \    | selectorDiscontinuityTime {readOnly} |        | SampRandOutOfN/ |\n   \
    \ |                                      |        | SampUniProb/    |\n    | \
    \                                     |        | FilterMatch/    |\n    |    \
    \                                  |        | FilterHash/     |\n    +--------------------------------------+\
    \        +-----------------+\n                         Figure 9: Selector class\n\
    \   The Selector class in Figure 9 contains the configuration and state\n   parameters\
    \ of a Selector.  Standardized PSAMP Sampling and Filtering\n   methods are described\
    \ in [RFC5475]; their configuration parameters\n   are specified in the classes\
    \ SampCountBased, SampTimeBased,\n   SampRandOutOfN, SampUniProb, FilterMatch,\
    \ and FilterHash.  In\n   addition, the SelectAll class, which has no parameters,\
    \ is used for a\n   Selector that selects all packets.  The Selector class includes\n\
    \   exactly one of these sampler and filter classes, depending on the\n   applied\
    \ method.\n   As state parameters, the Selector class contains the Selector\n\
    \   statistics packetsObserved and packetsDropped as well as\n   selectorDiscontinuityTime,\
    \ which correspond to the IPFIX MIB module\n   objects ipfixSelectionProcessStatsPacketsObserved,\n\
    \   ipfixSelectionProcessStatsPacketsDropped, and\n   ipfixSelectionProcessStatsDiscontinuityTime,\
    \ respectively [RFC6615]:\n   packetsObserved:  The total number of packets observed\
    \ at the input\n      of the Selector.  If this is the first Selector in the Selection\n\
    \      Process, this counter corresponds to the total number of packets\n    \
    \  in all Observed Packet Streams at the input of the Selection\n      Process.\
    \  Otherwise, the counter corresponds to the total number\n      of packets at\
    \ the output of the preceding Selector.\n      Discontinuities in the value of\
    \ this counter can occur at\n      re-initialization of the management system,\
    \ and at other times as\n      indicated by the value of selectorDiscontinuityTime.\n\
    \   packetsDropped:  The total number of packets discarded by the\n      Selector.\
    \  Discontinuities in the value of this counter can occur\n      at re-initialization\
    \ of the management system, and at other times\n      as indicated by the value\
    \ of selectorDiscontinuityTime.\n   selectorDiscontinuityTime:  Timestamp of the\
    \ most recent occasion at\n      which one or more of the Selector counters suffered\
    \ a\n      discontinuity.  In contrast to\n      ipfixSelectionProcessStatsDiscontinuityTime,\
    \ the time is absolute\n      and not relative to sysUpTime.\n   Note that packetsObserved\
    \ and packetsDropped are aggregate statistics\n   calculated over all Selection\
    \ Sequences of the Selection Process.\n   This is in contrast to the counter values\
    \ in the Selection Sequence\n   Statistics Report Interpretation [RFC5476], which\
    \ are related to a\n   single Selection Sequence only.\n"
- title: 4.2.2.  Sampler Classes
  contents:
  - "4.2.2.  Sampler Classes\n        +----------------+   +----------------+   +----------------+\n\
    \        | SampCountBased |   | SampTimeBased  |   | SampRandOutOfN |\n      \
    \  +----------------+   +----------------+   +----------------+\n        | packetInterval\
    \ |   | timeInterval   |   | population     |\n        | packetSpace    |   |\
    \ timeSpace      |   | size           |\n        +----------------+   +----------------+\
    \   +----------------+\n        +----------------+\n        | SampUniProb    |\n\
    \        +----------------+\n        | probability    |\n        +----------------+\n\
    \                        Figure 10: Sampler classes\n   The Sampler classes in\
    \ Figure 10 contain the configuration parameters\n   of specific Sampling algorithms:\n\
    \   packetInterval, packetSpace:  For systematic count-based Sampling,\n     \
    \ packetInterval defines the number of packets that are\n      consecutively sampled\
    \ between gaps of length packetSpace.  These\n      parameters correspond to the\
    \ Information Elements\n      samplingPacketInterval and samplingPacketSpace [RFC5477],\
    \ as well\n      as to the PSAMP MIB objects psampSampCountBasedInterval and\n\
    \      psampSampCountBasedSpace [RFC6727].\n   timeInterval, timeSpace:  For systematic\
    \ time-based Sampling,\n      timeInterval defines the time interval during which\
    \ all arriving\n      packets are sampled. timeSpace is the gap between two Sampling\n\
    \      intervals.  These parameters correspond to the Information\n      Elements\
    \ samplingTimeInterval and samplingTimeSpace [RFC5477], as\n      well as to the\
    \ PSAMP MIB objects psampSampTimeBasedInterval and\n      psampSampTimeBasedSpace\
    \ [RFC6727].  The unit is microseconds.\n   size, population:  For n-out-of-N\
    \ random Sampling, size defines the\n      number of elements taken from the parent\
    \ population. population\n      defines the number of elements in the parent population.\
    \  These\n      parameters correspond to the Information Elements samplingSize\
    \ and\n      samplingPopulation [RFC5477], as well as to the PSAMP MIB objects\n\
    \      psampSampRandOutOfNSize and psampSampRandOutOfNPopulation\n      [RFC6727].\n\
    \   probability:  For uniform probabilistic Sampling, probability defines\n  \
    \    the Sampling probability.  The probability is expressed as a value\n    \
    \  between 0 and 1.  This parameter corresponds to the Information\n      Element\
    \ samplingProbability [RFC5477], as well as to the PSAMP MIB\n      object psampSampUniProbProbability\
    \ [RFC6727].\n"
- title: 4.2.3.  Filter Classes
  contents:
  - "4.2.3.  Filter Classes\n          +---------------------------+\n          |\
    \ FilterMatch               |\n          +---------------------------+\n     \
    \     | ieId/ieName               |\n          | ieEnterpriseNumber = 0    |\n\
    \          | value                     |\n          +---------------------------+\n\
    \          +---------------------------+\n          | FilterHash             \
    \   |\n          +---------------------------+    1..* +---------------+\n   \
    \       | hashFunction = \"BOB\"      |<>-------| SelectedRange |\n          |\
    \ initializerValue[0..1]    |         +---------------+\n          | ipPayloadOffset\
    \ = 0       |         | name          |\n          | ipPayloadSize = 8       \
    \  |         | min           |\n          | digestOutput = \"false\"    |    \
    \     | max           |\n          | outputRangeMin {readOnly} |         +---------------+\n\
    \          | outputRangeMax {readOnly} |\n          +---------------------------+\n\
    \                         Figure 11: Filter classes\n   The Filter classes in\
    \ Figure 11 contain the configuration parameters\n   of specific Filtering methods.\
    \  For property match Filtering, the\n   configuration parameters are:\n   ieId,\
    \ ieName, ieEnterpriseNumber:  The property to be matched is\n      specified\
    \ by either ieId or ieName, specifying the identifier or\n      name of the Information\
    \ Element, respectively.  If\n      ieEnterpriseNumber is zero (which is the default),\
    \ this\n      Information Element is registered in the IANA registry of IPFIX\n\
    \      Information Elements [IANA-IPFIX].  A non-zero value of\n      ieEnterpriseNumber\
    \ specifies an enterprise-specific Information\n      Element [IANA-ENTERPRISE-NUMBERS].\n\
    \   value:  Matching value.\n   For hash-based Filtering, the configuration and\
    \ state parameters are:\n   hashFunction:  Hash function to be used.  The following\
    \ parameter\n      values are defined by the configuration data model:\n     \
    \ *  BOB: BOB Hash Function as specified in [RFC5475], Appendix A.2\n      * \
    \ IPSX: IP Shift-XOR (IPSX) Hash Function as specified in\n         [RFC5475],\
    \ Appendix A.1\n      *  CRC: CRC-32 function as specified in [RFC1141]\n    \
    \  Default value is \"BOB\".  This parameter corresponds to the PSAMP\n      MIB\
    \ object psampFiltHashFunction [RFC6727].\n   initializerValue:  Initializer value\
    \ to the hash function.  This\n      parameter corresponds to the Information\
    \ Element\n      hashInitialiserValue [RFC5477], as well as to the PSAMP MIB object\n\
    \      psampFiltHashInitializerValue [RFC6727].  If not configured by the\n  \
    \    user, the Monitoring Device arbitrarily chooses an initializer\n      value.\n\
    \   ipPayloadOffset, ipPayloadSize:  ipPayloadOffset and ipPayloadSize\n     \
    \ configure the offset and the size of the payload section used as\n      input\
    \ to the hash function.  Default values are 0 and 8,\n      respectively, corresponding\
    \ to the minimum configurable values\n      according to [RFC5476], Section 6.5.2.6.\
    \  These parameters\n      correspond to the Information Elements hashIPPayloadOffset\
    \ and\n      hashIPPayloadSize [RFC5477], as well as to the PSAMP MIB objects\n\
    \      psampFiltHashIpPayloadOffset and psampFiltHashIpPayloadSize\n      [RFC6727].\n\
    \   digestOutput:  digestOutput enables or disables the inclusion of the\n   \
    \   packet digest in the resulting PSAMP Packet Report.  This requires\n     \
    \ that the Cache Layout of the Cache generating the Packet Reports\n      includes\
    \ a digestHashValue field.  This parameter corresponds to\n      the Information\
    \ Element hashDigestOutput [RFC5477].\n   outputRangeMin, outputRangeMax:  The\
    \ values of these two state\n      parameters are the beginning and end of the\
    \ hash function's\n      potential output range.  These parameters correspond\
    \ to the\n      Information Elements hashOutputRangeMin and hashOutputRangeMax\n\
    \      [RFC5477], as well as to the PSAMP MIB objects\n      psampFiltHashOutputRangeMin\
    \ and psampFiltHashOutputRangeMax\n      [RFC6727].\n   One or more ranges of\
    \ matching hash values are defined by the min and\n   max parameters of the SelectedRange\
    \ subclass.  These parameters\n   correspond to the Information Elements hashSelectedRangeMin\
    \ and\n   hashSelectedRangeMax [RFC5477], as well as to the PSAMP MIB objects\n\
    \   psampFiltHashSelectedRangeMin and psampFiltHashSelectedRangeMax\n   [RFC6727].\n"
- title: 4.3.  Cache Class
  contents:
  - "4.3.  Cache Class\n    +-----------------------------------+\n    | Cache   \
    \                          |\n    +-----------------------------------+      \
    \  1 +------------------+\n    | name                              |<>--------|\
    \ immediateCache/  |\n    | meteringProcessId {readOnly}      |          | timeoutCache/\
    \    |\n    | dataRecords {readOnly}            |          | naturalCache/   \
    \ |\n    | cacheDiscontinuityTime {readOnly} |          | permanentCache   |\n\
    \    |                                   |          +------------------+\n   \
    \ |                                   |\n    |                               \
    \    |     0..* +------------------+\n    |                                  \
    \ |--------->| ExportingProcess |\n    +-----------------------------------+ \
    \         +------------------+\n                          Figure 12: Cache class\n\
    \   Figure 12 shows the Cache class that contains the configuration and\n   state\
    \ parameters of a Cache.  Most of these parameters are specific\n   to the type\
    \ of the Cache and therefore contained in the subclasses\n   immediateCache, timeoutCache,\
    \ naturalCache, and permanentCache, which\n   are presented below in Sections\
    \ 4.3.1 and 4.3.2.  The following three\n   state parameters are common to all\
    \ Caches and therefore included in\n   the Cache class itself:\n   meteringProcessId:\
    \  The identifier of the Metering Process the Cache\n      belongs to.\n     \
    \ This parameter corresponds to the Information Element\n      meteringProcessId\
    \ [IANA-IPFIX].  Its occurrence helps to associate\n      Metering Process (Reliability)\
    \ Statistics exported according to\n      the IPFIX protocol specification [RFC5101]\
    \ with the corresponding\n      object of the MeteringProcess class.\n   dataRecords:\
    \  The number of Data Records generated by this Cache.\n      Discontinuities\
    \ in the value of this counter can occur at\n      re-initialization of the management\
    \ system, and at other times as\n      indicated by the value of cacheDiscontinuityTime.\n\
    \      Note that this parameter corresponds to\n      ipfixMeteringProcessDataRecords\
    \ in the IPFIX MIB module [RFC6615].\n   cacheDiscontinuityTime:  Timestamp of\
    \ the most recent occasion at\n      which dataRecords suffered a discontinuity.\
    \  In contrast to\n      ipfixMeteringProcessDiscontinuityTime, the time is absolute\
    \ and\n      not relative to sysUpTime.\n      Note that this parameter functionally\
    \ corresponds to\n      ipfixMeteringProcessDiscontinuityTime in the IPFIX MIB\
    \ module\n      [RFC6615].\n   A Cache object MAY refer to one or more ExportingProcess\
    \ objects\n   configuring different Exporting Processes.\n"
- title: 4.3.1.  ImmediateCache Class
  contents:
  - "4.3.1.  ImmediateCache Class\n         +-------------------------------+\n  \
    \       | ImmediateCache                |\n         +-------------------------------+\
    \       1 +-------------+\n         |                               |<>-------|\
    \ CacheLayout |\n         +-------------------------------+         +-------------+\n\
    \                      Figure 13: ImmediateCache class\n   The ImmediateCache\
    \ class depicted in Figure 13 is used to configure a\n   Cache that generates\
    \ a PSAMP Packet Report for each packet at its\n   input.  The fields contained\
    \ in the generated Data Records are\n   defined in an object of the CacheLayout\
    \ class, which is defined below\n   in Section 4.3.3.\n"
- title: 4.3.2.  TimeoutCache, NaturalCache, and PermanentCache Class
  contents:
  - "4.3.2.  TimeoutCache, NaturalCache, and PermanentCache Class\n         +-------------------------------+\n\
    \         | TimeoutCache                  |\n         +-------------------------------+\
    \       1 +-------------+\n         | maxFlows {opt.}               |<>-------|\
    \ CacheLayout |\n         | activeTimeout {opt.}          |         +-------------+\n\
    \         | idleTimeout {opt.}            |\n         | activeFlows {readOnly}\
    \        |\n         | unusedCacheEntries {readOnly} |\n         +-------------------------------+\n\
    \         +-------------------------------+\n         | NaturalCache         \
    \         |\n         +-------------------------------+       1 +-------------+\n\
    \         | maxFlows {opt.}               |<>-------| CacheLayout |\n        \
    \ | activeTimeout {opt.}          |         +-------------+\n         | idleTimeout\
    \ {opt.}            |\n         | activeFlows {readOnly}        |\n         |\
    \ unusedCacheEntries {readOnly} |\n         +-------------------------------+\n\
    \         +-------------------------------+\n         | PermanentCache       \
    \         |\n         +-------------------------------+       1 +-------------+\n\
    \         | maxFlows {opt.}               |<>-------| CacheLayout |\n        \
    \ | exportInterval {opt.}         |         +-------------+\n         | activeFlows\
    \ {readOnly}        |\n         | unusedCacheEntries {readOnly} |\n         +-------------------------------+\n\
    \      Figure 14: TimeoutCache, NaturalCache, and PermanentCache class\n   Figure\
    \ 14 shows the TimeoutCache class, the NaturalCache class, and\n   the PermanentCache\
    \ class.  These classes are used to configure a\n   Cache that aggregates the\
    \ packets at its input and generates IPFIX\n   Flow Records.  The three classes\
    \ differ in when Flows expire:\n   o  TimeoutCache: Flows expire after active\
    \ or idle timeout.\n   o  NaturalCache: Flows expire after active or idle timeout,\
    \ or on\n      natural termination (e.g., TCP FIN or TCP RST) of the Flow.\n \
    \  o  PermanentCache: Flows never expire, but are periodically exported\n    \
    \  with the interval set by exportInterval.\n   The following configuration and\
    \ state parameters are common to the\n   three classes:\n   maxFlows:  This parameter\
    \ configures the maximum number of entries in\n      the Cache, which is the maximum\
    \ number of Flows that can be\n      measured simultaneously.\n      If this parameter\
    \ is configured, the Monitoring Device MUST ensure\n      that sufficient resources\
    \ are available to store the configured\n      maximum number of Flows.  If the\
    \ maximum number of Cache entries\n      is in use, no additional Flows can be\
    \ measured.  However, traffic\n      that pertains to existing Flows can continue\
    \ to be measured.\n   activeFlows:  This state parameter indicates the number\
    \ of Flows\n      currently active in this Cache (i.e., the number of Cache entries\n\
    \      currently in use).\n      Note that this parameter corresponds to\n   \
    \   ipfixMeteringProcessCacheActiveFlows in the IPFIX MIB module\n      [RFC6615].\n\
    \   unusedCacheEntries:  The number of unused cache entries.  Note that\n    \
    \  the sum of activeFlows and unusedCacheEntries equals maxFlows if\n      maxFlows\
    \ is configured.\n      Note that this parameter corresponds to\n      ipfixMeteringProcessCacheUnusedCacheEntries\
    \ in the IPFIX MIB\n      module [RFC6615].\n   The following timeout parameters\
    \ are only available in the\n   TimeoutCache class and the NaturalCache class:\n\
    \   activeTimeout:  This parameter configures the time in seconds after\n    \
    \  which a Flow is expired even though packets matching this Flow are\n      still\
    \ received by the Cache.  The parameter value zero indicates\n      infinity,\
    \ meaning that there is no active timeout.\n      If not configured by the user,\
    \ the Monitoring Device sets this\n      parameter.\n      Note that this parameter\
    \ corresponds to\n      ipfixMeteringProcessCacheActiveTimeout in the IPFIX MIB\
    \ module\n      [RFC6615].\n   idleTimeout:  This parameter configures the time\
    \ in seconds after\n      which a Flow is expired if no more packets matching\
    \ this Flow are\n      received by the Cache.  The parameter value zero indicates\n\
    \      infinity, meaning that there is no idle timeout.\n      If not configured\
    \ by the user, the Monitoring Device sets this\n      parameter.\n      Note that\
    \ this parameter corresponds to\n      ipfixMeteringProcessCacheIdleTimeout in\
    \ the IPFIX MIB module\n      [RFC6615].\n   The following interval parameter\
    \ is only available in the\n   PermanentCache class:\n   exportInterval:  This\
    \ parameter configures the interval (in seconds)\n      for periodical export\
    \ of Flow Records.\n      If not configured by the user, the Monitoring Device\
    \ sets this\n      parameter.\n   Every generated Flow Record MUST be associated\
    \ with a single\n   Observation Domain.  Hence, although a Cache MAY be configured\
    \ to\n   process packets observed at multiple Observation Domains, the Cache\n\
    \   MUST NOT aggregate packets observed at different Observation Domains\n   in\
    \ the same Flow.\n   An object of the Cache class contains an object of the CacheLayout\n\
    \   class that defines which fields are included in the Flow Records.\n"
- title: 4.3.3.  CacheLayout Class
  contents:
  - "4.3.3.  CacheLayout Class\n         +--------------+\n         | CacheLayout\
    \  |\n         +--------------+   1..* +--------------------------------+\n  \
    \       |              |<>------| CacheField                     |\n         |\
    \              |        +--------------------------------+\n         |       \
    \       |        | name                           |\n         |              |\
    \        | ieId/ieName                    |\n         |              |       \
    \ | ieLength {opt.}                |\n         |              |        | ieEnterpriseNumber\
    \ = 0         |\n         |              |        | isFlowKey[0..1] {not used\
    \ with |\n         |              |        |   ImmediateCache class}        |\n\
    \         +--------------+        +--------------------------------+\n       \
    \                Figure 15: CacheLayout class\n   A Cache generates and maintains\
    \ Packet Reports or Flow Records\n   containing information that has been extracted\
    \ from the incoming\n   stream of packets.  Using the CacheField class, the CacheLayout\
    \ class\n   specifies the superset of fields that are included in the Packet\n\
    \   Reports or Flow Records (see Figure 15).\n   If Packet Reports are generated\
    \ (i.e., if ImmediateCache class is\n   used to configure the Cache), every field\
    \ specified by the Cache\n   Layout MUST be included in the resulting Packet Report\
    \ unless the\n   corresponding Information Element is not applicable or cannot\
    \ be\n   derived from the content or treatment of the incoming packet.  Any\n\
    \   other field specified by the Cache Layout MAY only be included in the\n  \
    \ Packet Report if it is obvious from the field value itself or from\n   the values\
    \ of other fields in same Packet Report that the field value\n   was not determined\
    \ from the packet.\n   For example, if a field is configured to contain the TCP\
    \ source port\n   (Information Element tcpSourcePort [IANA-IPFIX]), the field\
    \ MUST be\n   included in all Packet Reports that are related to TCP packets.\n\
    \   Although the field value cannot be determined for non-TCP packets,\n   the\
    \ field MAY be included in the Packet Reports if another field\n   contains the\
    \ transport protocol identifier (Information Element\n   protocolIdentifier [IANA-IPFIX]).\n\
    \   If Flow Records are generated (i.e., if TimeoutCache, NaturalCache,\n   or\
    \ PermanentCache class is used to configure the Cache), the Cache\n   Layout differentiates\
    \ between Flow Key fields and non-key fields.\n   Every Flow Key field specified\
    \ by the Cache Layout MUST be included\n   as Flow Key in the resulting Flow Record\
    \ unless the corresponding\n   Information Element is not applicable or cannot\
    \ be derived from the\n   content or treatment of the incoming packet.  Any other\
    \ Flow Key\n   field specified by the Cache Layout MAY only be included in the\
    \ Flow\n   Record if it is obvious from the field value itself or from the\n \
    \  values of other Flow Key fields in the same Flow Record that the\n   field\
    \ value was not determined from the packet.  Two packets are\n   accounted by\
    \ the same Flow Record if none of their Flow Key fields\n   differ.  If a Flow\
    \ Key field can be determined for one packet but not\n   for the other, the two\
    \ packets are accounted in different Flow\n   Records.\n   Every non-key field\
    \ specified by the Cache Layout MUST be included in\n   the resulting Flow Record\
    \ unless the corresponding Information\n   Element is not applicable or cannot\
    \ be derived for the given Flow.\n   Any other non-key field specified by the\
    \ Cache Layout MAY only be\n   included in the Flow Record if it is obvious from\
    \ the field value\n   itself or from the values of other fields in same Flow Record\
    \ that\n   the field value was not determined from the packet.  Packets which\n\
    \   are accounted by the same Flow Record may differ in their non-key\n   fields,\
    \ or one or more of the non-key fields can be undetermined for\n   all or some\
    \ of the packets.\n   For example, if a non-key field specifies an Information\
    \ Element\n   whose value is determined by the first packet observed within a\
    \ Flow\n   (which is the default rule according to [RFC5102] unless specified\n\
    \   differently in the description of the Information Element), this\n   field\
    \ MUST be included in the resulting Flow Record if it can be\n   determined from\
    \ the first packet of the Flow.\n   The CacheLayout class does not have any parameters.\
    \  The\n   configuration parameters of the CacheField class are as follows:\n\
    \   ieId, ieName, ieEnterpriseNumber:  These parameters specify a field\n    \
    \  by the combination of the Information Element identifier or name,\n      and\
    \ the Information Element enterprise number.  Either ieId or\n      ieName MUST\
    \ be specified.  If ieEnterpriseNumber is zero (which is\n      the default),\
    \ this Information Element is registered in the IANA\n      registry of IPFIX\
    \ Information Elements [IANA-IPFIX].  A non-zero\n      value of ieEnterpriseNumber\
    \ specifies an enterprise-specific\n      Information Element [IANA-ENTERPRISE-NUMBERS].\n\
    \      If the enterprise number is set to 29305, this field contains a\n     \
    \ Reverse Information Element.  In this case, the Cache MUST\n      generate Data\
    \ Records in accordance to [RFC5103].\n   ieLength:  This parameter specifies\
    \ the length of the field in\n      octets.  A value of 65535 means that the field\
    \ is encoded as a\n      variable-length Information Element.  For Information\
    \ Elements of\n      integer and float type, the field length MAY be set to a\
    \ smaller\n      value than the standard length of the abstract data type if the\n\
    \      rules of reduced size encoding are fulfilled (see [RFC5101],\n      Section\
    \ 6.2).  If not configured by the user, the field length is\n      set by the\
    \ Monitoring Device.\n   isFlowKey:  If present, this field is a Flow Key.  If\
    \ the field\n      contains a Reverse Information Element, it MUST NOT be configured\n\
    \      as Flow Key.\n      This parameter is not available if the Cache is configured\
    \ using\n      the ImmediateCache class since there is no distinction between\n\
    \      Flow Key fields and non-key fields in Packet Reports.\n   Note that the\
    \ use of Information Elements can be restricted to\n   certain Cache types as\
    \ well as to Flow Key or non-key fields.  Such\n   restrictions may result from\
    \ Information Element definitions or from\n   device-specific constraints.  According\
    \ to Section 5, the Monitoring\n   Device MUST notify the user if a Cache field\
    \ cannot be configured\n   with the given Information Element.\n"
- title: 4.4.  ExportingProcess Class
  contents:
  - "4.4.  ExportingProcess Class\n     +-------------------------------+\n     |\
    \ ExportingProcess              |\n     +-------------------------------+   1..*\
    \ +-------------+\n     | name                          |<>------| Destination\
    \ |\n     | exportingProcessId {readOnly} |        +-------------+\n     | exportMode\
    \ = \"parallel\"       |        | name        |<>-+\n     |                  \
    \             |        +-------------+   | 1\n     |                         \
    \      |                          |\n     |                               |  \
    \             +---------------+\n     |                               |      \
    \         | SctpExporter/ |\n     |                               |          \
    \     | UdpExporter/  |\n     |                               |              \
    \ | TcpExporter/  |\n     |                               |               | FileWriter\
    \    |\n     |                               |               +---------------+\n\
    \     |                               |\n     |                              \
    \ |   0..* +------------------+\n     |                               |<>------|\
    \ Options          |\n     +-------------------------------+        +------------------+\n\
    \                     Figure 16: ExportingProcess class\n   The ExportingProcess\
    \ class in Figure 16 specifies destinations to\n   which the incoming Packet Reports\
    \ and Flow Records are exported using\n   objects of the Destination class.  The\
    \ Destination class includes one\n   object of the SctpExporter, UdpExporter,\
    \ TcpExporter, or FileWriter\n   class which contains further configuration parameters.\
    \  These classes\n   are described in Sections 4.4.1, 4.4.2, 4.4.3, and 4.4.4.\n\
    \   As state parameter, the ExportingProcess class contains the\n   identifier\
    \ of the Exporting Process (exportingProcessId).  This\n   parameter corresponds\
    \ to the Information Element exportingProcessId\n   [IANA-IPFIX].  Its occurrence\
    \ helps to associate Exporting Process\n   Reliability Statistics exported according\
    \ to the IPFIX protocol\n   specification [RFC5101] with the corresponding object\
    \ of the\n   ExportingProcess class.\n   The order in which objects of the Destination\
    \ class appear is defined\n   by the user.  However, the order has a specific\
    \ meaning only if the\n   exportMode parameter is set to \"fallback\".  The exportMode\
    \ parameter\n   is defined as follows:\n   exportMode:  This parameter determines\
    \ to which configured\n      destination(s) the incoming Data Records are exported.\
    \  The\n      following parameter values are specified by the configuration data\n\
    \      model:\n      *  parallel: every Data Record is exported to all configured\n\
    \         destinations in parallel\n      *  loadBalancing: every Data Record\
    \ is exported to exactly one\n         configured destination according to a device-specific\
    \ load-\n         balancing policy\n      *  fallback: every Data Record is exported\
    \ to exactly one\n         configured destination according to the fallback policy\n\
    \         described below\n      If exportMode is set to \"fallback\", the first\
    \ object of the\n      Destination class defines the primary destination, the\
    \ second\n      object of the Destination class defines the secondary destination,\n\
    \      and so on.  If the Exporting Process fails to export Data Records\n   \
    \   to the primary destination, it tries to export them to the\n      secondary\
    \ one.  If the secondary destination fails as well, it\n      continues with the\
    \ tertiary, etc.\n      \"parallel\" is the default value if exportMode is not\
    \ configured.\n   Note that the exportMode parameter is related to the\n   ipfixExportMemberType\
    \ object in [RFC6615].  If exportMode is\n   \"parallel\", the ipfixExportMemberType\
    \ values of the corresponding\n   entries in ipfixExportTable are set to parallel(3).\
    \  If exportMode is\n   \"loadBalancing\", the ipfixExportMemberType values of\
    \ the\n   corresponding entries in ipfixExportTable are set to\n   loadBalancing(4).\
    \  If exportMode is \"fallback\", the\n   ipfixExportMemberType value that refers\
    \ to the primary destination is\n   set to primary(1); the ipfixExportMemberType\
    \ values that refer to the\n   remaining destinations need to be set to secondary(2).\
    \  The IPFIX MIB\n   module does not define any value for tertiary destination,\
    \ etc.\n   The reporting of information with Options Templates is defined with\n\
    \   objects of the Options class.\n   The Exporting Process may modify the Packet\
    \ Reports and Flow Records\n   to enable a more efficient transmission or storage\
    \ under the\n   condition that no information is changed or suppressed.  For example,\n\
    \   the Exporting Process may shorten the length of a field according to\n   the\
    \ rules of reduced size encoding [RFC5101].  The Exporting Process\n   may also\
    \ export certain fields in a separate Data Record as described\n   in [RFC5476].\n"
- title: 4.4.1.  SctpExporter Class
  contents:
  - "4.4.1.  SctpExporter Class\n    +------------------------------+\n    | SctpExporter\
    \                 |\n    +------------------------------+    0..1 +------------------------+\n\
    \    | ipfixVersion = 10            |<>-------| TransportLayerSecurity |\n   \
    \ | sourceIPAddress[0..*]        |         +------------------------+\n    | destinationIPAddress[1..*]\
    \   |\n    | destinationPort = 4739|4740  |    0..1 +------------------------+\n\
    \    | ifName/ifIndex[0..1]         |<>-------| TransportSession       |\n   \
    \ | sendBufferSize {opt.}        |         +------------------------+\n    | rateLimit[0..1]\
    \              |\n    | timedReliability = 0         |\n    +------------------------------+\n\
    \                       Figure 17: SctpExporter class\n   The SctpExporter class\
    \ shown in Figure 17 contains the configuration\n   parameters of an SCTP export\
    \ destination.  The configuration\n   parameters are:\n   ipfixVersion:  Version\
    \ number of the IPFIX protocol used.  If\n      omitted, the default value is\
    \ 10 (=0x000a) as specified in\n      [RFC5101].\n   sourceIPAddress:  List of\
    \ source IP addresses used by the Exporting\n      Process.  If configured, the\
    \ specified addresses are eligible\n      local IP addresses of the multihomed\
    \ SCTP endpoint.  If not\n      configured, all locally assigned IP addresses\
    \ are eligible local\n      IP addresses.\n   destinationIPAddress:  One or more\
    \ IP addresses of the Collecting\n      Process to which IPFIX Messages are sent.\
    \  The user must ensure\n      that all configured IP addresses belong to the\
    \ same Collecting\n      Process.  The Exporting Process tries to establish an\
    \ SCTP\n      association to any of the configured destination IP addresses.\n\
    \   destinationPort:  Destination port number to be used.  If not\n      configured,\
    \ standard port 4739 (IPFIX without TLS and DTLS) or\n      4740 (IPFIX over TLS\
    \ or DTLS) is used.\n   ifIndex/ifName:  Either the index or the name of the interface\
    \ used\n      by the Exporting Process to export IPFIX Messages to the given\n\
    \      destination MAY be specified according to corresponding objects in\n  \
    \    the IF-MIB [RFC2863].  If omitted, the Exporting Process selects\n      the\
    \ outgoing interface based on local routing decision and accepts\n      return\
    \ traffic, such as transport-layer acknowledgments, on all\n      available interfaces.\n\
    \   sendBufferSize:  Size of the socket send buffer in bytes.  If not\n      configured\
    \ by the user, the buffer size is set by the Monitoring\n      Device.\n   rateLimit:\
    \  Maximum number of bytes per second the Exporting Process\n      may export\
    \ to the given destination as required by [RFC5476].  The\n      number of bytes\
    \ is calculated from the lengths of the IPFIX\n      Messages exported.  If this\
    \ parameter is not configured, no rate\n      limiting is performed for this destination.\n\
    \   timedReliability:  Lifetime in milliseconds until an IPFIX Message\n     \
    \ containing Data Sets only is \"abandoned\" due to the timed\n      reliability\
    \ mechanism of the Partial Reliability extension of SCTP\n      (PR-SCTP) [RFC3758].\
    \  If this parameter is set to zero, reliable\n      SCTP transport MUST be used\
    \ for all Data Records.  Regardless of\n      the value of this parameter, the\
    \ Exporting Process MAY use\n      reliable SCTP transport for Data Sets associated\
    \ with certain\n      Options Templates, such as the Data Record Reliability Options\n\
    \      Template specified in [RFC6526].\n   Using the TransportLayerSecurity class\
    \ described in Section 4.6,\n   Datagram Transport Layer Security (DTLS) is enabled\
    \ and configured\n   for this export destination.\n   If a Transport Session is\
    \ established to the configured destination,\n   the SctpExporter class includes\
    \ an object of the TransportSession\n   class containing state parameters of the\
    \ Transport Session.  The\n   TransportSession class is specified in Section 4.7.\n"
- title: 4.4.2.  UdpExporter Class
  contents:
  - "4.4.2.  UdpExporter Class\n    +-------------------------------------+\n    |\
    \ UdpExporter                         |\n    +-------------------------------------+\
    \   0..1 +------------------+\n    | ipfixVersion = 10                   |<>------|\
    \ TransportLayer-  |\n    | sourceIPAddress[0..1]               |        | Security\
    \         |\n    | destinationIPAddress                |        +------------------+\n\
    \    | destinationPort = 4739|4740         |\n    | ifName/ifIndex[0..1]     \
    \           |   0..1 +------------------+\n    | sendBufferSize {opt.}       \
    \        |<>------| TransportSession |\n    | rateLimit[0..1]                \
    \     |        +------------------+\n    | maxPacketSize {opt.}              \
    \  |\n    | templateRefreshTimeout = 600        |\n    | optionsTemplateRefreshTimeout\
    \ = 600 |\n    | templateRefreshPacket[0..1]         |\n    | optionsTemplateRefreshPacket[0..1]\
    \  |\n    +-------------------------------------+\n                       Figure\
    \ 18: UdpExporter class\n   The UdpExporter class shown in Figure 18 contains\
    \ the configuration\n   parameters of a UDP export destination.  The parameters\
    \ ipfixVersion,\n   destinationPort, ifName, ifIndex, sendBufferSize, and rateLimit\
    \ have\n   the same meaning as in the SctpExporter class (see Section 4.4.1).\n\
    \   The remaining configuration parameters are:\n   sourceIPAddress:  This parameter\
    \ specifies the source IP address used\n      by the Exporting Process.  If this\
    \ parameter is omitted, the IP\n      address assigned to the outgoing interface\
    \ is used as the source\n      IP address.\n   destinationIPAddress:  Destination\
    \ IP address to which IPFIX Messages\n      are sent (i.e., the IP address of\
    \ the Collecting Process).\n   maxPacketSize:  This parameter specifies the maximum\
    \ size of IP\n      packets sent to the Collector.  If set to zero, the Exporting\n\
    \      Device MUST derive the maximum packet size from path MTU discovery\n  \
    \    mechanisms.  If not configured by the user, this parameter is set\n     \
    \ by the Monitoring Device.\n   templateRefreshTimeout, optionsTemplateRefreshTimeout,\n\
    \      templateRefreshPacket, optionsTemplateRefreshPacket:  These\n      parameters\
    \ specify when (Options) Templates are refreshed by the\n      Exporting Process.\n\
    \      templateRefreshTimeout and optionsTemplateRefreshTimeout are\n      specified\
    \ in seconds between resendings of (Options) Templates.\n      If omitted, the\
    \ default value of 600 seconds (10 minutes) is used\n      [RFC5101].\n      templateRefreshPacket\
    \ and optionsTemplateRefreshPacket specify the\n      number of IPFIX Messages\
    \ after which (Options) Templates are\n      resent.  If omitted, the (Options)\
    \ Templates are only resent after\n      timeout.\n      Note that the values\
    \ configured for templateRefreshTimeout and\n      optionsTemplateRefreshTimeout\
    \ MUST be adapted to the\n      templateLifeTime and optionsTemplateLifeTime parameter\
    \ settings at\n      the receiving Collecting Process (see Section 4.5.2).\n \
    \     Note that these parameters correspond to\n      ipfixTransportSessionTemplateRefreshTimeout,\n\
    \      ipfixTransportSessionOptionsTemplateRefreshTimeout,\n      ipfixTransportSessionTemplateRefreshPacket,\
    \ and\n      ipfixTransportSessionOptionsTemplateRefreshPacket in the IPFIX MIB\n\
    \      module [RFC6615].\n   Using the TransportLayerSecurity class described\
    \ in Section 4.6, DTLS\n   is enabled and configured for this export destination.\n\
    \   If a Transport Session is established to the configured destination,\n   the\
    \ UdpExporter class includes an object of the TransportSession\n   class containing\
    \ state parameters of the Transport Session.  The\n   TransportSession class is\
    \ specified in Section 4.7.\n"
- title: 4.4.3.  TcpExporter Class
  contents:
  - "4.4.3.  TcpExporter Class\n    +------------------------------+\n    | TcpExporter\
    \                  |\n    +------------------------------+    0..1 +------------------------+\n\
    \    | ipfixVersion = 10            |<>-------| TransportLayerSecurity |\n   \
    \ | sourceIPAddress[0..1]        |         +------------------------+\n    | destinationIPAddress\
    \         |\n    | destinationPort = 4739|4740  |    0..1 +------------------------+\n\
    \    | ifName/ifIndex[0..1]         |<>-------| TransportSession       |\n   \
    \ | sendBufferSize {opt.}        |         +------------------------+\n    | rateLimit[0..1]\
    \              |\n    +------------------------------+\n                     \
    \  Figure 19: TcpExporter class\n   The TcpExporter class shown in Figure 19 contains\
    \ the configuration\n   parameters of a TCP export destination.  The parameters\
    \ have the same\n   meaning as in the UdpExporter class (see Section 4.4.2).\n\
    \   Using the TransportLayerSecurity class described in Section 4.6,\n   Transport\
    \ Layer Security (TLS) is enabled and configured for this\n   export destination.\n\
    \   If a Transport Session is established to the configured destination,\n   the\
    \ TcpExporter class includes an object of the TransportSession\n   class containing\
    \ state parameters of the Transport Session.  The\n   TransportSession class is\
    \ specified in Section 4.7.\n"
- title: 4.4.4.  FileWriter Class
  contents:
  - "4.4.4.  FileWriter Class\n      +-----------------------------------------+\n\
    \      | FileWriter                              |\n      +-----------------------------------------+\
    \    0..* +----------+\n      | ipfixVersion = 10                       |<>-------|\
    \ Template |\n      | file                                    |         +----------+\n\
    \      | status {readOnly}                       |\n      | bytes {readOnly} \
    \                       |\n      | messages {readOnly}                     |\n\
    \      | discardedMessages {readOnly}            |\n      | records {readOnly}\
    \                      |\n      | templates {readOnly}                    |\n\
    \      | optionsTemplates {readOnly}             |\n      | fileWriterDiscontinuityTime\
    \ {readOnly}  |\n      +-----------------------------------------+\n         \
    \              Figure 20: FileWriter classes\n   If an object of the FileWriter\
    \ class is included in an object of the\n   Destination class, IPFIX Messages\
    \ are written into a file as\n   specified in [RFC5655].  The FileWriter class\
    \ contains the following\n   configuration parameters:\n   ipfixVersion:  Version\
    \ number of the IPFIX protocol used.  If\n      omitted, the default value is\
    \ 10 (=0x000a) as specified in\n      [RFC5101].\n   file:  File name and location\
    \ specified as URI.\n   The state parameters of the FileWriter class are:\n  \
    \ bytes, messages, records, templates, optionsTemplates:  The number of\n    \
    \  bytes, IPFIX Messages, Data Records, Template Records, and Options\n      Template\
    \ Records written by the File Writer.  Discontinuities in\n      the values of\
    \ these counters can occur at re-initialization of the\n      management system,\
    \ and at other times as indicated by the value of\n      fileWriterDiscontinuityTime.\n\
    \   discardedMessages:  The number of IPFIX Messages that could not be\n     \
    \ written by the File Writer due to internal buffer overflows,\n      limited\
    \ storage capacity, etc.  Discontinuities in the value of\n      this counter\
    \ can occur at re-initialization of the management\n      system, and at other\
    \ times as indicated by the value of\n      fileWriterDiscontinuityTime.\n   fileWriterDiscontinuityTime:\
    \  Timestamp of the most recent occasion\n      at which one or more File Writer\
    \ counters suffered a\n      discontinuity.  In contrast to discontinuity times\
    \ in the IPFIX\n      MIB module, the time is absolute and not relative to sysUpTime.\n\
    \   Each object of the FileWriter class includes a list of objects of the\n  \
    \ Template class with information and statistics about the Templates\n   written\
    \ to the file.  The Template class is specified in Section 4.8.\n"
- title: 4.4.5.  Options Class
  contents:
  - "4.4.5.  Options Class\n                         +-----------------------+\n \
    \                        | Options               |\n                         +-----------------------+\n\
    \                         | name                  |\n                        \
    \ | optionsType           |\n                         | optionsTimeout {opt.}\
    \ |\n                         +-----------------------+\n                    \
    \     Figure 21: Options class\n   The Options class in Figure 21 defines the\
    \ type of specific\n   information to be reported, such as statistics, flow keys,\
    \ Sampling\n   and Filtering parameters, etc.  [RFC5101] and [RFC5476] specify\n\
    \   several types of reporting information that may be exported.  The\n   following\
    \ parameter values are specified by the configuration data\n   model:\n   meteringStatistics:\
    \  Export of Metering Process statistics using the\n      Metering Process Statistics\
    \ Options Template [RFC5101].\n   meteringReliability:  Export of Metering Process\
    \ reliability\n      statistics using the Metering Process Reliability Statistics\n\
    \      Options Template [RFC5101].\n   exportingReliability:  Export of Exporting\
    \ Process reliability\n      statistics using the Exporting Process Reliability\
    \ Statistics\n      Options Template [RFC5101].\n   flowKeys:  Export of the Flow\
    \ Key specification using the Flow Keys\n      Options Template [RFC5101].\n \
    \  selectionSequence:  Export of Selection Sequence Report\n      Interpretation\
    \ and Selector Report Interpretation [RFC5476].\n   selectionStatistics:  Export\
    \ of Selection Sequence Statistics Report\n      Interpretation [RFC5476].\n \
    \  accuracy:  Export of Accuracy Report Interpretation [RFC5476].\n   reducingRedundancy:\
    \  Enables the utilization of Options Templates to\n      reduce redundancy in\
    \ the exported Data Records according to\n      [RFC5473].  The Exporting Process\
    \ decides when to apply these\n      Options Templates.\n   extendedTypeInformation:\
    \  Export of extended type information for\n      enterprise-specific Information\
    \ Elements used in the exported\n      Templates [RFC5610].\n   The Exporting\
    \ Process MUST choose a Template definition according to\n   the options type\
    \ and available options data.\n   The optionsTimeout parameter specifies the reporting\
    \ interval (in\n   milliseconds) for periodic export of the option data.  A parameter\n\
    \   value of zero means that the export of the option data is not\n   triggered\
    \ periodically, but whenever the available option data has\n   changed.  This\
    \ is the typical setting for options types flowKeys,\n   selectionSequence, accuracy,\
    \ and reducingRedundancy.  If\n   optionsTimeout is not configured by the user,\
    \ it is set by the\n   Monitoring Device.\n"
- title: 4.5.  CollectingProcess Class
  contents:
  - "4.5.  CollectingProcess Class\n           +-------------------+\n           |\
    \ CollectingProcess |\n           +-------------------+\n           | name   \
    \           |       0..* +------------------+\n           |                  \
    \ |<>----------| SctpCollector    |\n           |                   |        \
    \    +------------------+\n           |                   |\n           |    \
    \               |       0..* +------------------+\n           |              \
    \     |<>----------| UdpCollector     |\n           |                   |    \
    \        +------------------+\n           |                   |\n           |\
    \                   |       0..* +------------------+\n           |          \
    \         |<>----------| TcpCollector     |\n           |                   |\
    \            +------------------+\n           |                   |\n        \
    \   |                   |       0..* +------------------+\n           |      \
    \             |<>----------| FileReader       |\n           |                \
    \   |            +------------------+\n           |                   |\n    \
    \       |                   | 0..*  0..* +------------------+\n           |  \
    \                 |----------->| ExportingProcess |\n           +-------------------+\
    \            +------------------+\n                    Figure 22: CollectingProcess\
    \ class\n   Figure 22 shows the CollectingProcess class that contains the\n  \
    \ configuration and state parameters of a Collecting Process.  Objects\n   of\
    \ the SctpCollector, UdpCollector, and TcpCollector classes specify\n   how IPFIX\
    \ Messages are received from remote Exporters.  The\n   Collecting Process can\
    \ also be configured as a File Reader using\n   objects of the FileReader class.\
    \  These classes are described in\n   Sections 4.5.1, 4.5.2, 4.5.3, and 4.5.4.\n\
    \   A CollectingProcess object MAY refer to one or more ExportingProcess\n   objects\
    \ configuring Exporting Processes that export the received data\n   without modifications\
    \ to a file or to another Collector.\n"
- title: 4.5.1.  SctpCollector Class
  contents:
  - "4.5.1.  SctpCollector Class\n      +--------------------------+\n      | SctpCollector\
    \            |\n      +--------------------------+    0..1 +------------------------+\n\
    \      | name                     |<>-------| TransportLayerSecurity |\n     \
    \ | localIPAddress[0..*]     |         +------------------------+\n      | localPort\
    \ = 4739|4740    |\n      |                          |    0..* +------------------------+\n\
    \      |                          |<>-------| TransportSession       |\n     \
    \ +--------------------------+         +------------------------+\n          \
    \            Figure 23: SctpCollector class\n   The SctpCollector class contains\
    \ the configuration parameters of a\n   listening SCTP socket at a Collecting\
    \ Process.  The parameters are:\n   localIPAddress:  List of local IP addresses\
    \ on which the Collecting\n      Process listens for IPFIX Messages.  The IP addresses\
    \ are used as\n      eligible local IP addresses of the multihomed SCTP endpoint\n\
    \      [RFC4960].  If omitted, the Collecting Process listens on all\n      local\
    \ IP addresses.\n   localPort:  Local port number on which the Collecting Process\
    \ listens\n      for IPFIX Messages.  If omitted, standard port 4739 (IPFIX without\n\
    \      TLS and DTLS) or 4740 (IPFIX over TLS or DTLS) is used.\n   Using the TransportLayerSecurity\
    \ class described in Section 4.6, DTLS\n   is enabled and configured for this\
    \ receiving socket.\n   As state data, the SctpCollector class contains the list\
    \ of currently\n   established Transport Sessions that terminate at the given\
    \ SCTP\n   socket of the Collecting Process.  The TransportSession class is\n\
    \   specified in Section 4.7.\n"
- title: 4.5.2.  UdpCollector Class
  contents:
  - "4.5.2.  UdpCollector Class\n   +---------------------------------+\n   | UdpCollector\
    \                    |\n   +---------------------------------+   0..1 +------------------------+\n\
    \   | name                            |<>------| TransportLayerSecurity |\n  \
    \ | localIPAddress[0..*]            |        +------------------------+\n   |\
    \ localPort = 4739|4740           |\n   | templateLifeTime = 1800         |  \
    \ 0..* +------------------------+\n   | optionsTemplateLifeTime = 1800  |<>------|\
    \ TransportSession       |\n   | templateLifePacket[0..*]        |        +------------------------+\n\
    \   | optionsTemplateLifePacket[0..*] |\n   +---------------------------------+\n\
    \                       Figure 24: UdpCollector class\n   The UdpCollector class\
    \ contains the configuration parameters of a\n   listening UDP socket at a Collecting\
    \ Process.  The parameter\n   localPort has the same meaning as in the SctpCollector\
    \ class (see\n   Section 4.5.1).  The remaining parameters are:\n   localIPAddress:\
    \  List of local IP addresses on which the Collecting\n      Process listens for\
    \ IPFIX Messages.  If omitted, the Collecting\n      Process listens on all local\
    \ IP addresses.\n   templateLifeTime, optionsTemplateLifeTime:  (Options) Template\n\
    \      lifetime in seconds for all UDP Transport Sessions terminating at\n   \
    \   this UDP socket.  (Options) Templates that are not received again\n      within\
    \ the configured lifetime become invalid at the Collecting\n      Process.\n \
    \     As specified in [RFC5101], Section 10.3.7, the lifetime of\n      Templates\
    \ and Options Templates MUST be at least three times\n      higher than the templateRefreshTimeout\
    \ and\n      optionTemplatesRefreshTimeout parameter values configured on the\n\
    \      corresponding Exporting Processes.\n      If not configured, the default\
    \ value 1800 is used, which is three\n      times the default (Options) Template\
    \ refresh timeout (see\n      Section 4.4.2) as specified in [RFC5101].\n    \
    \  Note that these parameters correspond to\n      ipfixTransportSessionTemplateRefreshTimeout\
    \ and\n      ipfixTransportSessionOptionsTemplateRefreshTimeout in the IPFIX\n\
    \      MIB module [RFC6615].\n   templateLifePacket, optionsTemplateLifePacket:\
    \  If templateLifePacket\n      is configured, Templates defined in a UDP Transport\
    \ Session become\n      invalid if they are neither included in a sequence of\
    \ more than\n      this number of IPFIX Messages nor received again within the\
    \ period\n      of time specified by templateLifeTime.  Similarly, if\n      optionsTemplateLifePacket\
    \ is configured, Options Templates become\n      invalid if they are neither included\
    \ in a sequence of more than\n      this number of IPFIX Messages nor received\
    \ again within the period\n      of time specified by optionsTemplateLifeTime.\n\
    \      If not configured, Templates and Options Templates only become\n      invalid\
    \ according to the lifetimes specified by templateLifeTime\n      and optionsTemplateLifeTime,\
    \ respectively.\n      Note that these parameters correspond to\n      ipfixTransportSessionTemplateRefreshPacket\
    \ and\n      ipfixTransportSessionOptionsTemplateRefreshPacket in the IPFIX MIB\n\
    \      module [RFC6615].\n   Using the TransportLayerSecurity class described\
    \ in Section 4.6, DTLS\n   is enabled and configured for this receiving socket.\n\
    \   As state data, the UdpCollector class contains the list of currently\n   established\
    \ Transport Sessions that terminate at the given UDP socket\n   of the Collecting\
    \ Process.  The TransportSession class is specified\n   in Section 4.7.\n"
- title: 4.5.3.  TcpCollector Class
  contents:
  - "4.5.3.  TcpCollector Class\n      +--------------------------+\n      | TcpCollector\
    \             |\n      +--------------------------+    0..1 +------------------------+\n\
    \      | name                     |<>-------| TransportLayerSecurity |\n     \
    \ | localIPAddress[0..*]     |         +------------------------+\n      | localPort\
    \ = 4739|4740    |\n      |                          |    0..* +------------------------+\n\
    \      |                          |<>-------| TransportSession       |\n     \
    \ +--------------------------+         +------------------------+\n          \
    \             Figure 25: TcpCollector class\n   The TcpCollector class contains\
    \ the configuration parameters of a\n   listening TCP socket at a Collecting Process.\
    \  The parameters have\n   the same meaning as in the UdpCollector class (see\
    \ Section 4.5.2).\n   Using the TransportLayerSecurity class described in Section\
    \ 4.6, TLS\n   is enabled and configured for this receiving socket.\n   As state\
    \ data, the TcpCollector class contains the list of currently\n   established\
    \ Transport Sessions that terminate at the given TCP socket\n   of the Collecting\
    \ Process.  The TransportSession class is specified\n   in Section 4.7.\n"
- title: 4.5.4.  FileReader Class
  contents:
  - "4.5.4.  FileReader Class\n      +-----------------------------------------+\n\
    \      | FileReader                              |\n      +-----------------------------------------+\
    \    0..* +----------+\n      | name                                    |<>-------|\
    \ Template |\n      | file                                    |         +----------+\n\
    \      | bytes {readOnly}                        |\n      | messages {readOnly}\
    \                     |\n      | records {readOnly}                      |\n \
    \     | templates {readOnly}                    |\n      | optionsTemplates {readOnly}\
    \             |\n      | fileReaderDiscontinuityTime {readOnly}  |\n      +-----------------------------------------+\n\
    \                       Figure 26: FileReader classes\n   The Collecting Process\
    \ may import IPFIX Messages from a file as\n   specified in [RFC5655].  The FileReader\
    \ class defines the following\n   configuration parameter:\n   file:  File name\
    \ and location specified as URI.\n   The state parameters of the FileReader class\
    \ are:\n   bytes, messages, records, templates, optionsTemplates:  The number\
    \ of\n      bytes, IPFIX Messages, Data Records, Template Records, and Options\n\
    \      Template Records read by the File Reader.  Discontinuities in the\n   \
    \   values of these counters can occur at re-initialization of the\n      management\
    \ system, and at other times as indicated by the value of\n      fileReaderDiscontinuityTime.\n\
    \   fileReaderDiscontinuityTime:  Timestamp of the most recent occasion\n    \
    \  at which one or more File Reader counters suffered a\n      discontinuity.\
    \  In contrast to discontinuity times in the IPFIX\n      MIB module, the time\
    \ is absolute and not relative to sysUpTime.\n   Each object of the FileReader\
    \ class includes a list of objects of the\n   Template class with information\
    \ and statistics about the Templates\n   read from the file.  The Template class\
    \ is specified in Section 4.8.\n"
- title: 4.6.  Transport Layer Security Class
  contents:
  - "4.6.  Transport Layer Security Class\n                  +--------------------------------------+\n\
    \                  | TransportLayerSecurity               |\n                \
    \  +--------------------------------------+\n                  | localCertificationAuthorityDN[0..*]\
    \  |\n                  | localSubjectDN[0..*]                 |\n           \
    \       | localSubjectFQDN[0..*]               |\n                  | remoteCertificationAuthorityDN[0..*]\
    \ |\n                  | remoteSubjectDN[0..*]                |\n            \
    \      | remoteSubjectFQDN[0..*]              |\n                  +--------------------------------------+\n\
    \                  Figure 27: TransportLayerSecurity class\n   The TransportLayerSecurity\
    \ class is used in the Exporting Process's\n   SctpExporter, UdpExporter, and\
    \ TcpExporter classes, and the\n   Collecting Process's SctpCollector, UdpCollector,\
    \ and TcpCollector\n   classes to enable and configure TLS/DTLS for IPFIX.  TLS/DTLS\
    \ can be\n   enabled without configuring any additional parameters.  In this case,\n\
    \   an empty XML element <transportLayerSecurity /> appears in the\n   configuration.\
    \  If TLS/DTLS is enabled, the endpoint must use DTLS\n   [RFC6347] if the transport\
    \ protocol is SCTP or UDP, and TLS [RFC5246]\n   if the transport protocol is\
    \ TCP.\n   [RFC5101] mandates strong mutual authentication of Exporting\n   Processes\
    \ and Collecting Process as follows.  Note this text cites\n   [RFC3280], which\
    \ was obsoleted by [RFC5280].\n      IPFIX Exporting Processes and IPFIX Collecting\
    \ Processes are\n      identified by the fully qualified domain name (FQDN) of\
    \ the\n      interface on which IPFIX Messages are sent or received, for\n   \
    \   purposes of X.509 client and server certificates as in [RFC3280].\n      To\
    \ prevent man-in-the-middle attacks from impostor Exporting or\n      Collecting\
    \ Processes, the acceptance of data from an unauthorized\n      Exporting Process,\
    \ or the export of data to an unauthorized\n      Collecting Process, strong mutual\
    \ authentication via asymmetric\n      keys MUST be used for both TLS and DTLS.\
    \  Each of the IPFIX\n      Exporting and Collecting Processes MUST verify the\
    \ identity of its\n      peer against its authorized certificates, and MUST verify\
    \ that the\n      peer's certificate matches its fully qualified domain name,\
    \ or, in\n      the case of SCTP, the fully qualified domain name of one of its\n\
    \      endpoints.\n      The fully qualified domain name used to identify an IPFIX\n\
    \      Collecting Process or Exporting Process may be stored either in a\n   \
    \   subjectAltName extension of type dNSName, or in the most specific\n      Common\
    \ Name field of the Subject field of the X.509 certificate.\n      If both are\
    \ present, the subjectAltName extension is given\n      preference.\n   In order\
    \ to use TLS/DTLS, appropriate certificates and keys have to\n   be previously\
    \ installed on the Monitoring Devices.  For security\n   reasons, the configuration\
    \ data model does not offer the possibility\n   to upload any certificates or\
    \ keys on a Monitoring Device.  If TLS/\n   DTLS is enabled on a Monitoring Device\
    \ that does not dispose of\n   appropriate certificates and keys, the configuration\
    \ MUST be rejected\n   with an error.\n   The configuration data model allows\
    \ restricting the authorization of\n   remote endpoints to certificates issued\
    \ by specific certification\n   authorities or identifying specific FQDNs for\
    \ authorization.\n   Furthermore, the configuration data model allows restricting\
    \ the\n   utilization of certificates identifying the local endpoint.  This is\n\
    \   useful if the Monitoring Device disposes of more than one certificate\n  \
    \ for the given local endpoint.\n   The configuration parameters are defined as\
    \ follows:\n   localCertificationAuthorityDN:  This parameter MAY appear one or\
    \ more\n      times to restrict the identification of the local endpoint during\n\
    \      the TLS/DTLS handshake to certificates issued by the configured\n     \
    \ certification authorities.  Each occurrence of this parameter\n      contains\
    \ the distinguished name of one certification authority.\n      To identify the\
    \ local endpoint, the Exporting Process or\n      Collecting Process MUST use\
    \ a certificate issued by one of the\n      configured certification authorities.\
    \  Certificates issued by any\n      other certification authority MUST NOT be\
    \ sent to the remote peer\n      during TLS/DTLS handshake.  If none of the certificates\
    \ installed\n      on the Monitoring Device fulfills the specified restrictions,\
    \ the\n      configuration MUST be rejected with an error.\n      If localCertificationAuthorityDN\
    \ is not configured, the choice of\n      certificates identifying the local endpoint\
    \ is not restricted with\n      respect to the issuing certification authority.\n\
    \   localSubjectDN, localSubjectFQDN:  Each of these parameters MAY\n      appear\
    \ one or more times to restrict the identification of the\n      local endpoint\
    \ during the TLS/DTLS handshake to certificates\n      issued for specific subjects\
    \ or for specific FQDNs.  Each\n      occurrence of localSubjectDN contains a\
    \ distinguished name\n      identifying the local endpoint.  Each occurrence of\n\
    \      localSubjectFQDN contains a FQDN which is assigned to the local\n     \
    \ endpoint.\n      To identify the local endpoint, the Exporting Process or\n\
    \      Collecting Process MUST use a certificate that contains either one\n  \
    \    of the configured distinguished names in the subject field or at\n      least\
    \ one of the configured FQDNs in a dNSName component of the\n      subject alternative\
    \ extension field or in the most specific\n      commonName component of the subject\
    \ field.  If none of the\n      certificates installed on the Monitoring Device\
    \ fulfills the\n      specified restrictions, the configuration MUST be rejected\
    \ with an\n      error.\n      If any of the parameters localSubjectDN and localSubjectFQDN\
    \ is\n      configured at the same time as the localCertificationAuthorityDN\n\
    \      parameter, certificates MUST also fulfill the specified\n      restrictions\
    \ regarding the certification authority.\n      If localSubjectDN and localSubjectFQDN\
    \ are not configured, the\n      choice of certificates identifying the local\
    \ endpoint is not\n      restricted with respect to the subject's distinguished\
    \ name or\n      FQDN.\n   remoteCertificationAuthorityDN:  This parameter MAY\
    \ appear one or\n      more times to restrict the authentication of remote endpoints\n\
    \      during the TLS/DTLS handshake to certificates issued by the\n      configured\
    \ certification authorities.  Each occurrence of this\n      parameter contains\
    \ the distinguished name of one certification\n      authority.\n      To authenticate\
    \ the remote endpoint, the remote Exporting Process\n      or Collecting Process\
    \ MUST provide a certificate issued by one of\n      the configured certification\
    \ authorities.  Certificates issued by\n      any other certification authority\
    \ MUST be rejected during TLS/DTLS\n      handshake.\n      If the Monitoring\
    \ Device is not able to validate certificates\n      issued by the configured\
    \ certification authorities (e.g., because\n      of missing public keys), the\
    \ configuration must be rejected with\n      an error.\n      If remoteCertificationAuthorityDN\
    \ is not configured, the\n      authorization of remote endpoints is not restricted\
    \ with respect\n      to the issuing certification authority of the delivered\n\
    \      certificate.\n   remoteSubjectDN, remoteSubjectFQDN:  Each of these parameters\
    \ MAY\n      appear one or more times to restrict the authentication of remote\n\
    \      endpoints during the TLS/DTLS handshake to certificates issued for\n  \
    \    specific subjects or for specific FQDNs.  Each occurrence of\n      remoteSubjectDN\
    \ contains a distinguished name identifying a remote\n      endpoint.  Each occurrence\
    \ of remoteSubjectFQDN contains a FQDN\n      that is assigned to a remote endpoint.\n\
    \      To authenticate a remote endpoint, the remote Exporting Process or\n  \
    \    Collecting Process MUST provide a certificate that contains either\n    \
    \  one of the configured distinguished names in the subject field or\n      at\
    \ least one of the configured FQDNs in a dNSName component of the\n      subject\
    \ alternative extension field or in the most specific\n      commonName component\
    \ of the subject field.  Certificates not\n      fulfilling this condition MUST\
    \ be rejected during TLS/DTLS\n      handshake.\n      If any of the parameters\
    \ remoteSubjectDN and remoteSubjectFQDN is\n      configured at the same time\
    \ as the remoteCertificationAuthorityDN\n      parameter, certificates MUST also\
    \ fulfill the specified\n      restrictions regarding the certification authority\
    \ in order to be\n      accepted.\n      If remoteSubjectDN and remoteSubjectFQDN\
    \ are not configured, the\n      authorization of remote endpoints is not restricted\
    \ with respect\n      to the subject's distinguished name or FQDN of the delivered\n\
    \      certificate.\n"
- title: 4.7.  Transport Session Class
  contents:
  - "4.7.  Transport Session Class\n   +----------------------------------------------+\n\
    \   | TransportSession                             |\n   +----------------------------------------------+\
    \    0..* +----------+\n   | ipfixVersion {readOnly}                      |<>-------|\
    \ Template |\n   | sourceAddress {readOnly}                     |         +----------+\n\
    \   | destinationAddress {readOnly}                |\n   | sourcePort {readOnly}\
    \                        |\n   | destinationPort {readOnly}                  \
    \ |\n   | sctpAssocId {readOnly} {SCTP only}           |\n   | status {readOnly}\
    \                            |\n   | rate {readOnly}                         \
    \     |\n   | bytes {readOnly}                             |\n   | messages {readOnly}\
    \                          |\n   | discardedMessages {readOnly}              \
    \   |\n   | records {readOnly}                           |\n   | templates {readOnly}\
    \                         |\n   | optionsTemplates {readOnly}                \
    \  |\n   | transportSessionStartTime {readOnly}         |\n   | transportSessionDiscontinuityTime\
    \ {readOnly} |\n   +----------------------------------------------+\n        \
    \             Figure 28: TransportSession class\n   The TransportSession class\
    \ contains state data about Transport\n   Sessions originating from an Exporting\
    \ Process or terminating at a\n   Collecting Process.  In general, the state parameters\
    \ correspond to\n   the managed objects in the ipfixTransportSessionTable and\n\
    \   ipfixTransportSessionStatsTable of the IPFIX MIB module [RFC6615].\n   An\
    \ exception is the usage of the parameters sourceAddress and\n   destinationAddress.\
    \  If SCTP is the transport protocol, the Exporter\n   or Collector MAY be multihomed\
    \ SCTP endpoints (see [RFC4960], Section\n   6.4) and use more than one IP address.\
    \  In the IPFIX MIB module,\n   ipfixTransportSessionSctpAssocId is used instead\
    \ of\n   ipfixTransportSessionSourceAddress and\n   ipfixTransportSessionDestinationAddress\
    \ to point to an entry in the\n   sctpAssocTable defined in the SCTP MIB module\
    \ [RFC3871].  Since we\n   cannot assume that an SNMP agent offering access to\
    \ the SCTP MIB\n   module exists on the Monitoring Device, the configuration data\
    \ model\n   cannot rely on this parameter.  Therefore, the state parameters\n\
    \   sourceAddress and destinationAddress are used for SCTP as well,\n   containing\
    \ one of the potentially many Exporter and Collector IP\n   addresses in the SCTP\
    \ association.  Preferably, the IP addresses of\n   the path that is usually selected\
    \ by the Exporter to send IPFIX\n   Messages to the Collector SHOULD be contained.\n\
    \   Several MIB objects of the ipfixTransportSessionTable are omitted in\n   the\
    \ TransportSession class.  The MIB object\n   ipfixTransportSessionDeviceMode\
    \ is not included because its value can\n   be derived from the context in which\
    \ a TransportSession object\n   appears: exporting(1) if it belongs to an Exporting\
    \ Process,\n   collecting(2) if it belongs to a Collecting Process.  Similarly,\
    \ the\n   MIB object ipfixTransportSessionProtocol is not included as the\n  \
    \ transport protocol is known from the context as well.  The MIB\n   objects ipfixTransportSessionTemplateRefreshTimeout,\n\
    \   ipfixTransportSessionOptionsTemplateRefreshTimeout,\n   ipfixTransportSessionTemplateRefreshPacket,\
    \ and\n   ipfixTransportSessionOptionsTemplateRefreshPacket are not included\n\
    \   since they correspond to configuration parameters of the UdpExporter\n   class\
    \ (templateRefreshTimeout, optionsTemplateRefreshTimeout,\n   templateRefreshPacket,\
    \ optionsTemplateRefreshPacket) and the\n   UdpCollector class (templateLifeTime,\
    \ optionsTemplateLifeTime,\n   templateLifePacket, optionsTemplateLifePacket).\n\
    \   ipfixVersion:  Used for Exporting Processes, this parameter contains\n   \
    \   the version number of the IPFIX protocol that the Exporter uses to\n     \
    \ export its data in this Transport Session.  Hence, it is identical\n      to\
    \ the value of the configuration parameter ipfixVersion of the\n      outer SctpExporter,\
    \ UdpExporter, or TcpExporter object.\n      Used for Collecting Processes, this\
    \ parameter contains the version\n      number of the IPFIX protocol it receives\
    \ for this Transport\n      Session.  If IPFIX Messages of different IPFIX protocol\
    \ versions\n      are received, this parameter contains the maximum version number.\n\
    \      This state parameter is identical to\n      ipfixTransportSessionIpfixVersion\
    \ in the IPFIX MIB module\n      [RFC6615].\n   sourceAddress, destinationAddress:\
    \  If TCP or UDP is the transport\n      protocol, sourceAddress contains the\
    \ IP address of the Exporter,\n      and destinationAddress contains the IP addresses\
    \ of the Collector.\n      Hence, the two parameters have identical values as\n\
    \      ipfixTransportSessionSourceAddress and\n      ipfixTransportSessionDestinationAddress\
    \ in the IPFIX MIB module\n      [RFC6615].\n      If SCTP is the transport protocol,\
    \ sourceAddress contains one of\n      the IP addresses of the Exporter and destinationAddress\
    \ one of the\n      IP addresses of the Collector.  Preferably, the IP addresses\
    \ of\n      the path that is usually selected by the Exporter to send IPFIX\n\
    \      Messages to the Collector SHOULD be contained.\n   sourcePort, destinationPort:\
    \  These state parameters contain the\n      transport-protocol port numbers of\
    \ the Exporter and the Collector\n      of the Transport Session and thus are\
    \ identical to\n      ipfixTransportSessionSourcePort and\n      ipfixTransportSessionDestinationPort\
    \ in the IPFIX MIB module\n      [RFC6615].\n   sctpAssocId:  The association\
    \ ID used for the SCTP session between\n      the Exporter and the Collector of\
    \ the Transport Session.  It is\n      equal to the sctpAssocId entry in the sctpAssocTable\
    \ defined in\n      the SCTP-MIB [RFC3871].\n      This parameter is only available\
    \ if the transport protocol is SCTP\n      and if an SNMP agent on the same Monitoring\
    \ Device enables access\n      to the corresponding MIB objects in the sctpAssocTable.\n\
    \      This state parameter is identical to\n      ipfixTransportSessionSctpAssocId\
    \ in the IPFIX MIB module\n      [RFC6615].\n   status:  Status of the Transport\
    \ Session, which can be one of the\n      following:\n      *  inactive: Transport\
    \ Session is established, but no IPFIX\n         Messages are currently transferred\
    \ (e.g., because this is a\n         backup (secondary) session)\n      *  active:\
    \ Transport Session is established and transfers IPFIX\n         Messages\n  \
    \    *  unknown: Transport Session status cannot be determined\n      This state\
    \ parameter is identical to ipfixTransportSessionStatus\n      in the IPFIX MIB\
    \ module [RFC6615].\n   rate:  The number of bytes per second transmitted by the\
    \ Exporting\n      Process or received by the Collecting Process.  This parameter\
    \ is\n      updated every second.\n      This state parameter is identical to\
    \ ipfixTransportSessionRate in\n      the IPFIX MIB module [RFC6615].\n   bytes,\
    \ messages, records, templates, optionsTemplates:  The number of\n      bytes,\
    \ IPFIX Messages, Data Records, Template Records, and Options\n      Template\
    \ Records transmitted by the Exporting Process or received\n      by the Collecting\
    \ Process.  Discontinuities in the values of these\n      counters can occur at\
    \ re-initialization of the management system,\n      and at other times as indicated\
    \ by the value of\n      transportSessionDiscontinuityTime.\n   discardedMessages:\
    \  Used for Exporting Processes, this parameter\n      indicates the number of\
    \ messages that could not be sent due to\n      internal buffer overflows, network\
    \ congestion, routing issues,\n      etc.\n      Used for Collecting Process,\
    \ this parameter indicates the number\n      of received IPFIX Messages that are\
    \ malformed, cannot be decoded,\n      are received in the wrong order or are\
    \ missing according to the\n      sequence number.\n      Discontinuities in the\
    \ value of this counter can occur at\n      re-initialization of the management\
    \ system, and at other times as\n      indicated by the value of transportSessionDiscontinuityTime.\n\
    \   transportSessionStartTime:  Timestamp of the start of the given\n      Transport\
    \ Session.\n      This state parameter does not correspond to any object in the\n\
    \      IPFIX MIB module.\n   transportSessionDiscontinuityTime:  Timestamp of\
    \ the most recent\n      occasion at which one or more of the Transport Session\
    \ counters\n      suffered a discontinuity.  In contrast to\n      ipfixTransportSessionDiscontinuityTime,\
    \ the time is absolute and\n      not relative to sysUpTime.\n   Note that, if\
    \ used for Exporting Processes, the values of the state\n   parameters destinationAddress\
    \ and destinationPort match the values of\n   the configuration parameters destinationIPAddress\
    \ and destinationPort\n   of the outer SctpExporter, TcpExporter, and UdpExporter\
    \ objects (in\n   the case of SctpExporter, one of the configured destinationIPAddress\n\
    \   values); if the transport protocol is UDP or SCTP and if the\n   parameter\
    \ sourceIPAddress is configured in the outer UdpExporter or\n   SctpExporter object,\
    \ the value of sourceAddress equals the configured\n   value or one of the configured\
    \ values.  Used for Collecting\n   Processes, the value of destinationAddress\
    \ equals the value (or one\n   of the values) of the parameter localIPAddress\
    \ if this parameter is\n   configured in the outer UdpCollector, TcpCollector,\
    \ or SctpCollector\n   object; destinationPort equals the value of the configuration\n\
    \   parameter localPort.\n   Each object of the TransportSession class includes\
    \ a list of objects\n   of the Template class with information and statistics\
    \ about the\n   Templates transmitted or received on the given Transport Session.\n\
    \   The Template class is specified in Section 4.8.\n"
- title: 4.8.  Template Class
  contents:
  - "4.8.  Template Class\n     +--------------------------------------+\n     | Template\
    \                             |\n     +--------------------------------------+\n\
    \     | observationDomainId {readOnly}       |<>---+ 0..*\n     | templateId {readOnly}\
    \                |     |\n     | setId {readOnly}                     |     |\n\
    \     | accessTime {readOnly}                |     |\n     | templateDataRecords\
    \ {readOnly}       |     |\n     | templateDiscontinuityTime {readOnly} |    \
    \ |\n     +--------------------------------------+     |\n                   \
    \                               |\n                              +--------------------------------------+\n\
    \                              | Field                                |\n    \
    \                          +--------------------------------------+\n        \
    \                      | ieId {readOnly}                      |\n            \
    \                  | ieLength {readOnly}                  |\n                \
    \              | ieEnterpriseNumber {readOnly}        |\n                    \
    \          | isFlowKey {readOnly} {non-Options    |\n                        \
    \      |   Template only}                     |\n                            \
    \  | isScope {readOnly} {Options Template |\n                              | \
    \  only}                              |\n                              +--------------------------------------+\n\
    \                         Figure 29: Template class\n   The Template class contains\
    \ state data about Templates used by an\n   Exporting Process or received by a\
    \ Collecting Process in a specific\n   Transport Session.  The Field class defines\
    \ one field of the\n   Template.  The names and semantics of the state parameters\
    \ correspond\n   to the managed objects in the ipfixTemplateTable,\n   ipfixTemplateDefinitionTable,\
    \ and ipfixTemplateStatsTable of the\n   IPFIX MIB module [RFC6615]:\n   observationDomainId:\
    \  The ID of the Observation Domain for which this\n      Template is defined.\n\
    \   templateId:  This number indicates the Template ID in the IPFIX\n      Message.\n\
    \   setId:  This number indicates the Set ID of the Template.\n      Currently,\
    \ there are two values defined [RFC5101].  The value 2 is\n      used for Sets\
    \ containing Template definitions.  The value 3 is\n      used for Sets containing\
    \ Options Template definitions.\n   accessTime:  Used for Exporting Processes,\
    \ this parameter contains\n      the time when this (Options) Template was last\
    \ sent to the\n      Collector or written to the file.\n      Used for Collecting\
    \ Processes, this parameter contains the time\n      when this (Options) Template\
    \ was last received from the Exporter\n      or read from the file.\n   templateDataRecords:\
    \  The number of transmitted or received Data\n      Records defined by this (Options)\
    \ Template since the point in time\n      indicated by templateDefinitionTime.\n\
    \   templateDiscontinuityTime:  Timestamp of the most recent occasion at\n   \
    \   which the counter templateDataRecords suffered a discontinuity.\n      In\
    \ contrast to ipfixTemplateDiscontinuityTime, the time is\n      absolute and\
    \ not relative to sysUpTime.\n   ieId, ieLength, ieEnterpriseNumber:  Information\
    \ Element identifier,\n      length, and enterprise number of a field in the Template.\
    \  If this\n      is not an enterprise-specific Information Element,\n      ieEnterpriseNumber\
    \ is zero.\n      These state parameters are identical to\n      ipfixTemplateDefinitionIeId,\
    \ ipfixTemplateDefinitionIeLength, and\n      ipfixTemplateDefinitionIeEnterpriseNumber\
    \ in the IPFIX MIB module\n      [RFC6615].\n   isFlowKey:  If this state parameter\
    \ is present, this is a Flow Key\n      field.\n      This parameter is only available\
    \ for non-Options Templates (i.e.,\n      if setId is 2).\n   isFlowKey:  If this\
    \ state parameter is present, this is a scope\n      field.\n      This parameter\
    \ is only available for Options Templates (i.e., if\n      setId is 3).\n"
- title: 5.  Adaptation to Device Capabilities
  contents:
  - "5.  Adaptation to Device Capabilities\n   The configuration data model standardizes\
    \ a superset of common IPFIX\n   and PSAMP configuration parameters.  A typical\
    \ Monitoring Device\n   implementation will not support the entire range of possible\n\
    \   configurations.  Certain functions may not be supported, such as the\n   Collecting\
    \ Process that does not exist on a Monitoring Device that is\n   conceived as\
    \ Exporter only.  The configuration of other functions may\n   be subject to resource\
    \ limitations or functional restrictions.  For\n   example, the Cache size is\
    \ typically limited according to the\n   available memory on the device.  It is\
    \ also possible that a\n   Monitoring Device implementation requires the configuration\
    \ of\n   additional parameters that are not part of the configuration data\n \
    \  model in order to function properly.\n   YANG [RFC6020] offers several possibilities\
    \ to restrict and adapt a\n   configuration data model.  The current version of\
    \ YANG defines the\n   concepts of features, deviations, and extensions.\n   The\
    \ feature concept allows the author of a configuration data model\n   to make\
    \ proportions of the model conditional in a manner that is\n   controlled by the\
    \ device.  Devices do not have to support these\n   conditional parts to conform\
    \ to the model.  If the NETCONF protocol\n   is used, features which are supported\
    \ by the device are announced in\n   the <hello> message [RFC6241].\n   The configuration\
    \ data model for IPFIX and PSAMP covers the\n   configuration of Exporters, Collectors,\
    \ and devices that may act as\n   both.  As Exporters and Collectors implement\
    \ different functions, the\n   corresponding proportions of the model are conditional\
    \ on the\n   following features:\n   exporter:  If this feature is supported,\
    \ Exporting Processes can be\n      configured.\n   collector:  If this feature\
    \ is supported, Collecting Processes can be\n      configured.\n   Exporters do\
    \ not necessarily implement any Selection Processes,\n   Caches, or even Observation\
    \ Points in particular cases.  Therefore,\n   the corresponding proportions of\
    \ the model are conditional on the\n   following feature:\n   meter:  If this\
    \ feature is supported, Observation Points, Selection\n      Processes, and Caches\
    \ can be configured.\n   Additional features refer to different PSAMP Sampling\
    \ and Filtering\n   methods as well as to the supported types of Caches:\n   psampSampCountBased:\
    \  If this feature is supported, Sampling method\n      sampCountBased can be\
    \ configured.\n   psampSampTimeBased:  If this feature is supported, Sampling\
    \ method\n      sampTimeBased can be configured.\n   psampSampRandOutOfN:  If\
    \ this feature is supported, Sampling method\n      sampRandOutOfN can be configured.\n\
    \   psampSampUniProb:  If this feature is supported, Sampling method\n      sampUniProb\
    \ can be configured.\n   psampFilterMatch:  If this feature is supported, Filtering\
    \ method\n      filterMatch can be configured.\n   psampFilterHash:  If this feature\
    \ is supported, Filtering method\n      filterHash can be configured.\n   immediateCache:\
    \  If this feature is supported, a Cache generating\n      PSAMP Packet Reports\
    \ can be configured using the ImmediateCache\n      class.\n   timeoutCache: \
    \ If this feature is supported, a Cache generating IPFIX\n      Flow Records can\
    \ be configured using the TimeoutCache class.\n   naturalCache:  If this feature\
    \ is supported, a Cache generating IPFIX\n      Flow Records can be configured\
    \ using the NaturalCache class.\n   permanentCache:  If this feature is supported,\
    \ a Cache generating\n      IPFIX Flow Records can be configured using the PermanentCache\n\
    \      class.\n   The following features concern the support of UDP and TCP as\n\
    \   transport protocols and the support of File Readers and File Writers:\n  \
    \ udpTransport:  If this feature is supported, UDP can be used as\n      transport\
    \ protocol by Exporting Processes and Collecting\n      Processes.\n   tcpTransport:\
    \  If this feature is supported, TCP can be used as\n      transport protocol\
    \ by Exporting Processes and Collecting\n      Processes.\n   fileReader:  If\
    \ this feature is supported, File Readers can be\n      configured as part of\
    \ Collecting Processes.\n   fileWriter:  If this feature is supported, File Writers\
    \ can be\n      configured as part of Exporting Processes.\n   The deviation concept\
    \ enables a device to announce deviations from\n   the standard model using the\
    \ \"deviation\" statement.  For example, it\n   is possible to restrict the value\
    \ range of a specific parameter or to\n   define that the configuration of a certain\
    \ parameter is not supported\n   at all.  Hence, deviations are typically used\
    \ to specify limitations\n   due to resource constraints or functional restrictions.\
    \  Deviations\n   concern existing parameters of the original configuration data\
    \ model\n   and must not be confused with model extensions.  Model extensions\
    \ are\n   specified with the \"augment\" statement and allow adding new\n   parameters\
    \ to the original configuration data model.\n   If certain device-specific constraints\
    \ cannot be formally specified\n   with YANG, they MUST be expressed with human-readable\
    \ text using the\n   \"description\" statement.  The provided information MUST\
    \ enable the\n   user to define a configuration that is entirely supported by\
    \ the\n   Monitoring Device.  On the other hand, if a Monitoring Device is\n \
    \  configured, it MUST notify the user about any part of the\n   configuration\
    \ that is not supported.  The Monitoring Device MUST NOT\n   silently accept configuration\
    \ data that cannot be completely\n   enforced.  If the NETCONF protocol is used\
    \ to send configuration data\n   to the Monitoring Device, the error handling\
    \ is specified in the\n   NETCONF protocol specification [RFC6241].\n   Just like\
    \ features, deviations and model extensions are announced in\n   NETCONF's <hello>\
    \ message.  A usage example of deviations is given in\n   Section 7.5.\n"
- title: 6.  YANG Module of the IPFIX/PSAMP Configuration Data Model
  contents:
  - "6.  YANG Module of the IPFIX/PSAMP Configuration Data Model\n   The YANG module\
    \ specification of the configuration data model is\n   listed below.  It makes\
    \ use of the common YANG types defined in the\n   modules urn:ietf:params:xml:ns:yang:ietf-yang-types\
    \ and\n   urn:ietf:params:xml:ns:yang:ietf-inet-types [RFC6021].\n  <CODE BEGINS>\
    \ file \"ietf-ipfix-psamp@2012-09-05.yang\"\n  module ietf-ipfix-psamp {\n   \
    \ namespace \"urn:ietf:params:xml:ns:yang:ietf-ipfix-psamp\";\n    prefix ipfix;\n\
    \    import ietf-yang-types { prefix yang; }\n    import ietf-inet-types { prefix\
    \ inet; }\n    organization\n      \"IETF IPFIX Working Group\";\n    contact\n\
    \      \"WG Web:  <http://tools.ietf.org/wg/ipfix/>\n      WG List:  <ipfix@ietf.org>\n\
    \      WG Chair: Nevil Brownlee\n                <n.brownlee@auckland.ac.nz>\n\
    \      WG Chair: Juergen Quittek\n                <quittek@neclab.eu>\n      Editor:\
    \   Gerhard Muenz\n                <muenz@net.in.tum.de>\";\n    description\n\
    \      \"IPFIX/PSAMP Configuration Data Model\n      Copyright (c) 2012 IETF Trust\
    \ and the persons identified as\n      the document authors.  All rights reserved.\n\
    \      Redistribution and use in source and binary forms, with or\n      without\
    \ modification, is permitted pursuant to, and subject\n      to the license terms\
    \ contained in, the Simplified BSD License\n      set forth in Section 4.c of\
    \ the IETF Trust's Legal Provisions\n      Relating to IETF Documents\n      (http://trustee.ietf.org/license-info).\"\
    ;\n    revision 2012-09-05 {\n      description \"Initial version\";\n      reference\
    \ \"RFC 6728: Configuration Data Model for the IP Flow\n        Information Export\
    \ (IPFIX) and Packet Sampling (PSAMP)\n        Protocols\";\n    }\n    /*****************************************************************\n\
    \    * Features\n    *****************************************************************/\n\
    \    feature exporter {\n      description \"If supported, the Monitoring Device\
    \ can be used as\n        an Exporter.  Exporting Processes can be configured.\"\
    ;\n    }\n    feature collector {\n      description \"If supported, the Monitoring\
    \ Device can be used as\n        a Collector.  Collecting Processes can be configured.\"\
    ;\n    }\n    feature meter {\n      description \"If supported, Observation Points,\
    \ Selection\n        Processes, and Caches can be configured.\";\n    }\n    feature\
    \ psampSampCountBased {\n      description \"If supported, the Monitoring Device\
    \ supports\n        count-based Sampling.  The Selector method sampCountBased\
    \ can\n        be configured.\";\n    }\n    feature psampSampTimeBased {\n  \
    \    description \"If supported, the Monitoring Device supports\n        time-based\
    \ Sampling.  The Selector method sampTimeBased can\n        be configured.\";\n\
    \    }\n    feature psampSampRandOutOfN {\n      description \"If supported, the\
    \ Monitoring Device supports\n        random n-out-of-N Sampling.  The Selector\
    \ method\n        sampRandOutOfN can be configured.\";\n    }\n    feature psampSampUniProb\
    \ {\n      description \"If supported, the Monitoring Device supports\n      \
    \  uniform probabilistic Sampling.  The Selector method\n        sampUniProb can\
    \ be configured.\";\n    }\n    feature psampFilterMatch {\n      description\
    \ \"If supported, the Monitoring Device supports\n        property match Filtering.\
    \  The Selector method filterMatch\n        can be configured.\";\n    }\n   \
    \ feature psampFilterHash {\n      description \"If supported, the Monitoring\
    \ Device supports\n        hash-based Filtering.  The Selector method filterHash\
    \ can be\n        configured.\";\n    }\n    feature immediateCache {\n      description\
    \ \"If supported, the Monitoring Device supports\n        Caches generating PSAMP\
    \ Packet Reports by configuration with\n        immediateCache.\";\n    }\n  \
    \  feature timeoutCache {\n      description \"If supported, the Monitoring Device\
    \ supports\n        Caches generating IPFIX Flow Records by configuration with\n\
    \        timeoutCache.\";\n    }\n    feature naturalCache {\n      description\
    \ \"If supported, the Monitoring Device supports\n        Caches generating IPFIX\
    \ Flow Records by configuration with\n        naturalCache.\";\n    }\n    feature\
    \ permanentCache {\n      description \"If supported, the Monitoring Device supports\n\
    \        Caches generating IPFIX Flow Records by configuration with\n        permanentCache.\"\
    ;\n    }\n    feature udpTransport {\n      description \"If supported, the Monitoring\
    \ Device supports UDP\n        as the transport protocol.\";\n    }\n    feature\
    \ tcpTransport {\n      description \"If supported, the Monitoring Device supports\
    \ TCP\n        as the transport protocol.\";\n    }\n    feature fileReader {\n\
    \      description \"If supported, the Monitoring Device supports the\n      \
    \  configuration of Collecting Processes as File Readers.\";\n    }\n    feature\
    \ fileWriter {\n      description \"If supported, the Monitoring Device supports\
    \ the\n        configuration of Exporting Processes as File Writers.\";\n    }\n\
    \    /*****************************************************************\n    *\
    \ Identities\n    *****************************************************************/\n\
    \    /*** Hash function identities ***/\n    identity hashFunction {\n      description\
    \ \"Base identity for all hash functions used for\n        hash-based packet Filtering.\
    \  Identities derived from\n        this base are used by the leaf\n        /ipfix/selectionProcess/selector/filterHash/hashFunction.\"\
    ;\n    }\n    identity BOB {\n      base \"hashFunction\";\n      description\
    \ \"BOB hash function\";\n      reference \"RFC 5475, Section 6.2.4.1.\";\n  \
    \  }\n    identity IPSX {\n      base \"hashFunction\";\n      description \"\
    IPSX hash function\";\n      reference \"RFC 5475, Section 6.2.4.1.\";\n    }\n\
    \    identity CRC {\n      base \"hashFunction\";\n      description \"CRC hash\
    \ function\";\n      reference \"RFC 5475, Section 6.2.4.1.\";\n    }\n    /***\
    \ Export mode identities ***/\n    identity exportMode {\n      description \"\
    Base identity for different usages of export\n        destinations configured\
    \ for an Exporting Process.\n        Identities derived from this base are used\
    \ by the leaf\n        /ipfix/exportingProcess/exportMode.\";\n    }\n    identity\
    \ parallel {\n      base \"exportMode\";\n      description \"Parallel export\
    \ of Data Records to all\n        destinations configured for the Exporting Process.\"\
    ;\n    }\n    identity loadBalancing {\n      base \"exportMode\";\n      description\
    \ \"Load-balancing between the different destinations\n        configured for\
    \ the Exporting Process.\";\n    }\n    identity fallback {\n      base \"exportMode\"\
    ;\n      description \"Export to the primary destination (i.e., the first\n  \
    \      SCTP, UDP, TCP, or file destination configured for the\n        Exporting\
    \ Process).  If the export to the primary destination\n        fails, the Exporting\
    \ Process tries to export to the secondary\n        destination.  If the secondary\
    \ destination fails as well, it\n        continues with the tertiary, etc.\";\n\
    \    }\n    /*** Options type identities ***/\n    identity optionsType {\n  \
    \    description \"Base identity for report types exported with\n        options.\
    \  Identities derived from this base are used by the leaf\n        /ipfix/exportingProcess/options/optionsType.\"\
    ;\n    }\n    identity meteringStatistics {\n      base \"optionsType\";\n   \
    \   description \"Metering Process Statistics.\";\n      reference \"RFC 5101,\
    \ Section 4.1.\";\n    }\n    identity meteringReliability {\n      base \"optionsType\"\
    ;\n      description \"Metering Process Reliability Statistics.\";\n      reference\
    \ \"RFC 5101, Section 4.2.\";\n    }\n    identity exportingReliability {\n  \
    \    base \"optionsType\";\n      description \"Exporting Process Reliability\n\
    \        Statistics.\";\n      reference \"RFC 5101, Section 4.3.\";\n    }\n\
    \    identity flowKeys {\n      base \"optionsType\";\n      description \"Flow\
    \ Keys.\";\n      reference \"RFC 5101, Section 4.4.\";\n    }\n    identity selectionSequence\
    \ {\n      base \"optionsType\";\n      description \"Selection Sequence and Selector\
    \ Reports.\";\n      reference \"RFC 5476, Sections 6.5.1 and 6.5.2.\";\n    }\n\
    \    identity selectionStatistics {\n      base \"optionsType\";\n      description\
    \ \"Selection Sequence Statistics Report.\";\n      reference \"RFC 5476, Sections\
    \ 6.5.3.\";\n    }\n    identity accuracy {\n      base \"optionsType\";\n   \
    \   description \"Accuracy Report.\";\n      reference \"RFC 5476, Section 6.5.4.\"\
    ;\n    }\n    identity reducingRedundancy {\n      base \"optionsType\";\n   \
    \   description \"Enables the utilization of Options Templates to\n        reduce\
    \ redundancy in the exported Data Records.\";\n      reference \"RFC 5473.\";\n\
    \    }\n    identity extendedTypeInformation {\n      base \"optionsType\";\n\
    \      description \"Export of extended type information for\n        enterprise-specific\
    \ Information Elements used in the\n        exported Templates.\";\n      reference\
    \ \"RFC 5610.\";\n    }\n    /*****************************************************************\n\
    \    * Type definitions\n    *****************************************************************/\n\
    \    typedef ieNameType {\n      type string {\n        length \"1..max\";\n \
    \       pattern \"\\S+\";\n      }\n      description \"Type for Information Element\
    \ names.  Whitespaces\n        are not allowed.\";\n    }\n    typedef ieIdType\
    \ {\n      type uint16 {\n        range \"1..32767\" {\n          description\
    \ \"Valid range of Information Element\n              identifiers.\";\n      \
    \    reference \"RFC 5102, Section 4.\";\n        }\n      }\n      description\
    \ \"Type for Information Element identifiers.\";\n    }\n    typedef nameType\
    \ {\n      type string {\n        length \"1..max\";\n        pattern \"\\S(.*\\\
    S)?\";\n      }\n      description \"Type for 'name' leafs, which are used to\
    \ identify\n        specific instances within lists, etc.\n        Leading and\
    \ trailing whitespaces are not allowed.\";\n    }\n    typedef ifNameType {\n\
    \      type string {\n        length \"1..255\";\n      }\n      description \"\
    This corresponds to the DisplayString textual\n        convention of SNMPv2-TC,\
    \ which is used for ifName in the IF\n        MIB module.\";\n      reference\
    \ \"RFC 2863 (ifName).\";\n    }\n    typedef direction {\n      type enumeration\
    \ {\n        enum ingress {\n          description \"This value is used for monitoring\
    \ incoming\n            packets.\";\n        }\n        enum egress {\n      \
    \    description \"This value is used for monitoring outgoing\n            packets.\"\
    ;\n        }\n        enum both {\n          description \"This value is used\
    \ for monitoring incoming and\n            outgoing packets.\";\n        }\n \
    \     }\n      description \"Direction of packets going through an interface or\n\
    \        linecard.\";\n    }\n    typedef transportSessionStatus {\n      type\
    \ enumeration {\n        enum inactive {\n          description \"This value MUST\
    \ be used for Transport Sessions\n            that are specified in the system\
    \ but currently not active.\n            The value can be used for Transport Sessions\
    \ that are\n            backup (secondary) sessions.\";\n        }\n        enum\
    \ active {\n          description \"This value MUST be used for Transport Sessions\n\
    \            that are currently active and transmitting or receiving\n       \
    \     data.\";\n        }\n        enum unknown {\n          description \"This\
    \ value MUST be used if the status of the\n            Transport Sessions cannot\
    \ be detected by the device.  This\n            value should be avoided as far\
    \ as possible.\";\n        }\n      }\n      description \"Status of a Transport\
    \ Session.\";\n      reference \"RFC 6615, Section 8 (ipfixTransportSessionStatus).\"\
    ;\n    }\n    /*****************************************************************\n\
    \    * Groupings\n    *****************************************************************/\n\
    \    grouping observationPointParameters {\n      description \"Interface as input\
    \ to Observation Point.\";\n      leaf observationPointId {\n        type uint32;\n\
    \        config false;\n        description \"Observation Point ID (i.e., the\
    \ value of the\n          Information Element observationPointId) assigned by\
    \ the\n          Monitoring Device.\";\n        reference \"IANA registry for\
    \ IPFIX Entities,\n          http://www.iana.org/assignments/ipfix.\";\n     \
    \ }\n      leaf observationDomainId {\n        type uint32;\n        mandatory\
    \ true;\n        description \"The Observation Domain ID associates the\n    \
    \      Observation Point to an Observation Domain.  Observation\n          Points\
    \ with identical Observation Domain IDs belong to the\n          same Observation\
    \ Domain.\n          Note that this parameter corresponds to\n          ipfixObservationPointObservationDomainId\
    \ in the IPFIX MIB\n          module.\";\n        reference \"RFC 5101; RFC 6615,\
    \ Section 8\n          (ipfixObservationPointObservationDomainId).\";\n      }\n\
    \      leaf-list ifName {\n        type ifNameType;\n        description \"List\
    \ of names identifying interfaces of the\n          Monitoring Device.  The Observation\
    \ Point observes packets at\n          the specified interfaces.\";\n      }\n\
    \      leaf-list ifIndex {\n        type uint32;\n        description \"List of\
    \ ifIndex values pointing to entries in the\n          ifTable of the IF-MIB module\
    \ maintained by the Monitoring\n          Device.  The Observation Point observes\
    \ packets at the\n          specified interfaces.\n          This parameter SHOULD\
    \ only be used if an SNMP agent enables\n          access to the ifTable.\n  \
    \        Note that this parameter corresponds to\n          ipfixObservationPointPhysicalInterface\
    \ in the IPFIX MIB\n          module.\";\n        reference \"RFC 2863; RFC 6615,\
    \ Section 8\n          (ipfixObservationPointPhysicalInterface).\";\n      }\n\
    \      leaf-list entPhysicalName {\n        type string;\n        description\
    \ \"List of names identifying physical entities of the\n          Monitoring Device.\
    \  The Observation Point observes packets at\n          the specified entities.\"\
    ;\n      }\n      leaf-list entPhysicalIndex {\n        type uint32;\n       \
    \ description \"List of entPhysicalIndex values pointing to\n          entries\
    \ in the entPhysicalTable of the ENTITY-MIB module\n          maintained by the\
    \ Monitoring Device.  The Observation Point\n          observes packets at the\
    \ specified entities.\n          This parameter SHOULD only be used if an SNMP\
    \ agent enables\n          access to the entPhysicalTable.\n          Note that\
    \ this parameter corresponds to\n          ipfixObservationPointPhysicalEntity\
    \ in the IPFIX MIB\n          module.\";\n        reference \"RFC 4133; RFC 6615,\
    \ Section 8\n          (ipfixObservationPointPhysicalInterface).\";\n      }\n\
    \      leaf direction {\n        type direction;\n        default both;\n    \
    \    description \"Direction of packets.  If not applicable (e.g., in\n      \
    \    the case of a sniffing interface in promiscuous mode), this\n          parameter\
    \ is ignored.\";\n      }\n    }\n    grouping sampCountBasedParameters {\n  \
    \    description \"Configuration parameters of a Selector applying\n        systematic\
    \ count-based packet Sampling to the packet\n        stream.\";\n      reference\
    \ \"RFC 5475, Section 5.1; RFC 5476, Section 6.5.2.1.\";\n      leaf packetInterval\
    \ {\n        type uint32;\n        units packets;\n        mandatory true;\n \
    \       description \"The number of packets that are consecutively\n         \
    \ sampled between gaps of length packetSpace.\n          This parameter corresponds\
    \ to the Information Element\n          samplingPacketInterval and to psampSampCountBasedInterval\n\
    \          in the PSAMP MIB module.\";\n        reference \"RFC 5477, Section\
    \ 8.2.2; RFC 6727, Section 6\n          (psampSampCountBasedInterval).\";\n  \
    \    }\n      leaf packetSpace {\n        type uint32;\n        units packets;\n\
    \        mandatory true;\n        description \"The number of unsampled packets\
    \ between two\n          Sampling intervals.\n          This parameter corresponds\
    \ to the Information Element\n          samplingPacketSpace and to psampSampCountBasedSpace\n\
    \          in the PSAMP MIB module.\";\n        reference \"RFC 5477, Section\
    \ 8.2.3; RFC 6727, Section 6\n          (psampSampCountBasedSpace).\";\n     \
    \ }\n    }\n    grouping sampTimeBasedParameters {\n      description \"Configuration\
    \ parameters of a Selector applying\n        systematic time-based packet Sampling\
    \ to the packet\n        stream.\";\n      reference \"RFC 5475, Section 5.1;\
    \ RFC 5476, Section 6.5.2.2.\";\n      leaf timeInterval {\n        type uint32;\n\
    \        units microseconds;\n        mandatory true;\n        description \"\
    The time interval in microseconds during\n          which all arriving packets\
    \ are sampled between gaps\n          of length timeSpace.\n          This parameter\
    \ corresponds to the Information Element\n          samplingTimeInterval and to\
    \ psampSampTimeBasedInterval\n          in the PSAMP MIB module.\";\n        reference\
    \ \"RFC 5477, Section 8.2.4; RFC 6727, Section 6\n          (psampSampTimeBasedInterval).\"\
    ;\n      }\n      leaf timeSpace {\n        type uint32;\n        units microseconds;\n\
    \        mandatory true;\n        description \"The time interval in microseconds\
    \ during\n          which no packets are sampled between two Sampling\n      \
    \    intervals specified by timeInterval.\n          This parameter corresponds\
    \ to the Information Element\n          samplingTimeInterval and to psampSampTimeBasedSpace\n\
    \          in the PSAMP MIB module.\";\n        reference \"RFC 5477, Section\
    \ 8.2.5; RFC 6727, Section 6\n          (psampSampTimeBasedSpace).\";\n      }\n\
    \    }\n    grouping sampRandOutOfNParameters {\n      description \"Configuration\
    \ parameters of a Selector applying\n        n-out-of-N packet Sampling to the\
    \ packet stream.\";\n      reference \"RFC 5475, Section 5.2.1; RFC 5476, Section\
    \ 6.5.2.3.\";\n      leaf size {\n        type uint32;\n        units packets;\n\
    \        mandatory true;\n        description \"The number of elements taken from\
    \ the parent\n          population.\n          This parameter corresponds to the\
    \ Information Element\n          samplingSize and to psampSampRandOutOfNSize in\
    \ the PSAMP\n          MIB module.\";\n        reference \"RFC 5477, Section 8.2.6;\
    \ RFC 6727, Section 6\n          (psampSampRandOutOfNSize).\";\n      }\n    \
    \  leaf population {\n        type uint32;\n        units packets;\n        mandatory\
    \ true;\n        description \"The number of elements in the parent\n        \
    \  population.\n          This parameter corresponds to the Information Element\n\
    \          samplingPopulation and to psampSampRandOutOfNPopulation\n         \
    \ in the PSAMP MIB module.\";\n        reference \"RFC 5477, Section 8.2.7; RFC\
    \ 6727, Section 6\n          (psampSampRandOutOfNPopulation).\";\n      }\n  \
    \  }\n    grouping sampUniProbParameters {\n      description \"Configuration\
    \ parameters of a Selector applying\n        uniform probabilistic packet Sampling\
    \ (with equal\n        probability per packet) to the packet stream.\";\n    \
    \  reference \"RFC 5475, Section 5.2.2.1;\n        RFC 5476, Section 6.5.2.4.\"\
    ;\n      leaf probability {\n        type decimal64 {\n          fraction-digits\
    \ 18;\n          range \"0..1\";\n        }\n        mandatory true;\n       \
    \ description \"Probability that a packet is sampled,\n          expressed as\
    \ a value between 0 and 1.  The probability\n          is equal for every packet.\n\
    \          This parameter corresponds to the Information Element\n          samplingProbability\
    \ and to psampSampUniProbProbability\n          in the PSAMP MIB module.\";\n\
    \        reference \"RFC 5477, Section 8.2.8; RFC 6727, Section 6\n          (psampSampUniProbProbability).\"\
    ;\n      }\n    }\n    grouping filterMatchParameters {\n      description \"\
    Configuration parameters of a Selector applying\n        property match Filtering\
    \ to the packet stream.\n        The field to be matched is specified as an Information\n\
    \        Element.\";\n      reference \"RFC 5475, Section 6.1; RFC 5476, Section\
    \ 6.5.2.5.\";\n      choice nameOrId {\n        mandatory true;\n        description\
    \ \"The field to be matched is specified by\n          either the name or the\
    \ identifier of the Information\n          Element.\";\n        leaf ieName {\n\
    \          type ieNameType;\n          description \"Name of the Information Element.\"\
    ;\n        }\n        leaf ieId {\n          type ieIdType;\n          description\
    \ \"Identifier of the Information Element.\";\n        }\n      }\n      leaf\
    \ ieEnterpriseNumber {\n        type uint32;\n        default 0;\n        description\
    \ \"If this parameter is zero, the Information\n          Element is registered\
    \ in the IANA registry of IPFIX\n          Information Elements.\n          If\
    \ this parameter is configured with a non-zero private\n          enterprise number,\
    \ the Information Element is\n          enterprise-specific.\";\n        reference\
    \ \"IANA registry for Private Enterprise Numbers,\n          http://www.iana.org/assignments/enterprise-numbers;\n\
    \          IANA registry for IPFIX Entities,\n          http://www.iana.org/assignments/ipfix.\"\
    ;\n      }\n      leaf value {\n        type string;\n        mandatory true;\n\
    \        description \"Matching value of the Information Element.\";\n      }\n\
    \    }\n    grouping filterHashParameters {\n      description \"Configuration\
    \ parameters of a Selector applying\n        hash-based Filtering to the packet\
    \ stream.\";\n      reference \"RFC 5475, Section 6.2; RFC 5476, Section 6.5.2.6.\"\
    ;\n      leaf hashFunction {\n        type identityref {\n          base \"hashFunction\"\
    ;\n        }\n        default BOB;\n        description \"Hash function to be\
    \ applied.  According to\n          RFC 5475, Section 6.2.4.1, 'BOB' must be used\
    \ in order to\n          be compliant with PSAMP.\n          This parameter functionally\
    \ corresponds to\n          psampFiltHashFunction in the PSAMP MIB module.\";\n\
    \        reference \"RFC 6727, Section 6 (psampFiltHashFunction)\";\n      }\n\
    \      leaf initializerValue {\n        type uint64;\n        description \"Initializer\
    \ value to the hash function.\n          If not configured by the user, the Monitoring\
    \ Device\n          arbitrarily chooses an initializer value.\n          This\
    \ parameter corresponds to the Information Element\n          hashInitialiserValue\
    \ and to psampFiltHashInitializerValue\n          in the PSAMP MIB module.\";\n\
    \        reference \"RFC 5477, Section 8.3.9; RFC 6727, Section 6\n          (psampFiltHashInitializerValue).\"\
    ;\n      }\n      leaf ipPayloadOffset {\n        type uint64;\n        units\
    \ octets;\n        default 0;\n        description \"IP payload offset indicating\
    \ the position of\n          the first payload byte considered as input to the\
    \ hash\n          function.\n          Default value 0 corresponds to the minimum\
    \ offset that\n          must be configurable according to RFC 5476, Section\n\
    \          6.5.2.6.\n          This parameter corresponds to the Information Element\n\
    \          hashIPPayloadOffset and to psampFiltHashIpPayloadOffset\n         \
    \ in the PSAMP MIB module.\";\n        reference \"RFC 5477, Section 8.3.2; RFC\
    \ 6727, Section 6\n          (psampFiltHashIpPayloadOffset).\";\n      }\n   \
    \   leaf ipPayloadSize {\n        type uint64;\n        units octets;\n      \
    \  default 8;\n        description \"Number of IP payload bytes used as input\
    \ to\n          the hash function, counted from the payload offset.\n        \
    \  If the IP payload is shorter than the payload range,\n          all available\
    \ payload octets are used as input.\n          Default value 8 corresponds to\
    \ the minimum IP payload\n          size that must be configurable according to\
    \ RFC 5476,\n          Section 6.5.2.6.\n          This parameter corresponds\
    \ to the Information Element\n          hashIPPayloadSize and to psampFiltHashIpPayloadSize\n\
    \          in the PSAMP MIB module.\";\n        reference \"RFC 5477, Section\
    \ 8.3.3; RFC 6727, Section 6\n          (psampFiltHashIpPayloadSize).\";\n   \
    \   }\n      leaf digestOutput {\n        type boolean;\n        default false;\n\
    \        description \"If true, the output from this Selector is\n          included\
    \ in the Packet Report as a packet digest.\n          Therefore, the configured\
    \ Cache Layout needs to contain\n          a digestHashValue field.\n        \
    \  This parameter corresponds to the Information Element\n          hashDigestOutput.\"\
    ;\n        reference \"RFC 5477, Section 8.3.8.\";\n      }\n      leaf outputRangeMin\
    \ {\n        type uint64;\n        config false;\n        description \"Beginning\
    \ of the hash function's potential\n          range.\n          This parameter\
    \ corresponds to the Information Element\n          hashOutputRangeMin and to\
    \ psampFiltHashOutputRangeMin\n          in the PSAMP MIB module.\";\n       \
    \ reference \"RFC 5477, Section 8.3.4; RFC 6727, Section 6\n          (psampFiltHashOutputRangeMin).\"\
    ;\n      }\n      leaf outputRangeMax {\n        type uint64;\n        config\
    \ false;\n        description \"End of the hash function's potential range.\n\
    \          This parameter corresponds to the Information Element\n          hashOutputRangeMax\
    \ and to psampFiltHashOutputRangeMax\n          in the PSAMP MIB module.\";\n\
    \        reference \"RFC 5477, Section 8.3.5; RFC 6727, Section 6\n          (psampFiltHashOutputRangeMax).\"\
    ;\n      }\n      list selectedRange {\n        key name;\n        min-elements\
    \ 1;\n        description \"List of hash function return ranges for\n        \
    \  which packets are selected.\";\n        leaf name {\n          type nameType;\n\
    \          description \"Key of this list.\";\n        }\n        leaf min {\n\
    \          type uint64;\n          description \"Beginning of the hash function's\
    \ selected\n            range.\n            This parameter corresponds to the\
    \ Information Element\n            hashSelectedRangeMin and to psampFiltHashSelectedRangeMin\n\
    \            in the PSAMP MIB module.\";\n          reference \"RFC 5477, Section\
    \ 8.3.6; RFC 6727, Section 6\n          (psampFiltHashSelectedRangeMin).\";\n\
    \        }\n        leaf max {\n          type uint64;\n          description\
    \ \"End of the hash function's selected range.\n            This parameter corresponds\
    \ to the Information Element\n            hashSelectedRangeMax and to psampFiltHashSelectedRangeMax\n\
    \            in the PSAMP MIB module.\";\n          reference \"RFC 5477, Section\
    \ 8.3.7; RFC 6727, Section 6\n          (psampFiltHashSelectedRangeMax).\";\n\
    \        }\n      }\n    }\n    grouping selectorParameters {\n      description\
    \ \"Configuration and state parameters of a Selector.\";\n      choice Method\
    \ {\n        mandatory true;\n        description \"Packet selection method applied\
    \ by the Selector.\";\n        leaf selectAll {\n          type empty;\n     \
    \     description \"Method that selects all packets.\";\n        }\n        container\
    \ sampCountBased {\n          if-feature psampSampCountBased;\n          description\
    \ \"Systematic count-based packet Sampling.\";\n          uses sampCountBasedParameters;\n\
    \        }\n        container sampTimeBased {\n          if-feature psampSampTimeBased;\n\
    \          description \"Systematic time-based packet Sampling.\";\n         \
    \ uses sampTimeBasedParameters;\n        }\n        container sampRandOutOfN {\n\
    \          if-feature psampSampRandOutOfN;\n          description \"n-out-of-N\
    \ packet Sampling.\";\n          uses sampRandOutOfNParameters;\n        }\n \
    \       container sampUniProb {\n          if-feature psampSampUniProb;\n    \
    \      description \"Uniform probabilistic packet Sampling.\";\n          uses\
    \ sampUniProbParameters;\n        }\n        container filterMatch {\n       \
    \   if-feature psampFilterMatch;\n          description \"Property match Filtering.\"\
    ;\n          uses filterMatchParameters;\n        }\n        container filterHash\
    \ {\n          if-feature psampFilterHash;\n          description \"Hash-based\
    \ Filtering.\";\n          uses filterHashParameters;\n        }\n      }\n  \
    \    leaf packetsObserved {\n        type yang:counter64;\n        config false;\n\
    \        description \"The number of packets observed at the input of\n      \
    \    the Selector.\n          If this is the first Selector in the Selection Process,\n\
    \          this counter corresponds to the total number of packets in\n      \
    \    all Observed Packet Streams at the input of the Selection\n          Process.\
    \  Otherwise, the counter corresponds to the total\n          number of packets\
    \ at the output of the preceding Selector.\n          Discontinuities in the value\
    \ of this counter can occur at\n          re-initialization of the management\
    \ system, and at other\n          times as indicated by the value of\n       \
    \   selectorDiscontinuityTime.\n          Note that this parameter corresponds\
    \ to\n          ipfixSelectorStatsPacketsObserved in the IPFIX MIB\n         \
    \ module.\";\n        reference \"RFC 6615, Section 8\n          (ipfixSelectorStatsPacketsObserved).\"\
    ;\n      }\n      leaf packetsDropped {\n        type yang:counter64;\n      \
    \  config false;\n        description \"The total number of packets discarded\
    \ by the\n          Selector.\n          Discontinuities in the value of this\
    \ counter can occur at\n          re-initialization of the management system,\
    \ and at other\n          times as indicated by the value of\n          selectorDiscontinuityTime.\n\
    \          Note that this parameter corresponds to\n          ipfixSelectorStatsPacketsDropped\
    \ in the IPFIX MIB\n          module.\";\n        reference \"RFC 6615, Section\
    \ 8\n          (ipfixSelectorStatsPacketsDropped).\";\n      }\n      leaf selectorDiscontinuityTime\
    \ {\n        type yang:date-and-time;\n        config false;\n        description\
    \ \"Timestamp of the most recent occasion at which\n          one or more of the\
    \ Selector counters suffered a\n          discontinuity.\n          Note that\
    \ this parameter functionally corresponds to\n          ipfixSelectionProcessStatsDiscontinuityTime\
    \ in the IPFIX\n          MIB module.  In contrast to\n          ipfixSelectionProcessStatsDiscontinuityTime,\
    \ the time is\n          absolute and not relative to sysUpTime.\";\n        reference\
    \ \"RFC 6615, Section 8\n          (ipfixSelectionProcessStatsDiscontinuityTime).\"\
    ;\n      }\n    }\n    grouping cacheLayoutParameters {\n      description \"\
    Cache Layout parameters used by immediateCache,\n        timeoutCache, naturalCache,\
    \ and permanentCache.\";\n      container cacheLayout {\n        description \"\
    Cache Layout parameters.\";\n        list cacheField {\n          key name;\n\
    \          min-elements 1;\n          description \"Superset of fields that are\
    \ included in the\n            Packet Reports or Flow Records generated by the\
    \ Cache.\";\n          leaf name {\n            type nameType;\n            description\
    \ \"Key of this list.\";\n          }\n          choice nameOrId {\n         \
    \   mandatory true;\n            description \"Name or identifier of the Information\n\
    \              Element.\";\n            reference \"RFC 5102, Section 2; IANA\
    \ registry for IPFIX\n              Entities, http://www.iana.org/assignments/ipfix.\"\
    ;\n            leaf ieName {\n              type ieNameType;\n              description\
    \ \"Name of the Information Element.\";\n            }\n            leaf ieId\
    \ {\n              type ieIdType;\n              description \"Identifier of the\
    \ Information Element.\";\n            }\n          }\n          leaf ieLength\
    \ {\n            type uint16;\n            units octets;\n            description\
    \ \"Length of the field in which the Information\n              Element is encoded.\
    \  A value of 65535 specifies a\n              variable-length Information Element.\
    \  For Information\n              Elements of integer and float type, the field\
    \ length MAY\n              be set to a smaller value than the standard length\
    \ of\n              the abstract data type if the rules of reduced size\n    \
    \          encoding are fulfilled.\n              If not configured by the user,\
    \ this parameter is set by\n              the Monitoring Device.\";\n        \
    \    reference \"RFC 5101, Section 6.2.\";\n          }\n          leaf ieEnterpriseNumber\
    \ {\n            type uint32;\n            default 0;\n            description\
    \ \"If this parameter is zero, the Information\n              Element is registered\
    \ in the IANA registry of IPFIX\n              Information Elements.\n       \
    \       If this parameter is configured with a non-zero private\n            \
    \  enterprise number, the Information Element is\n              enterprise-specific.\n\
    \              If the enterprise number is set to 29305, this field\n        \
    \      contains a Reverse Information Element.  In this case,\n              the\
    \ Cache MUST generate Data Records in accordance to\n              RFC 5103.\"\
    ;\n            reference \"RFC 5101; RFC 5103;\n              IANA registry for\
    \ Private Enterprise Numbers,\n              http://www.iana.org/assignments/enterprise-numbers;\n\
    \              IANA registry for IPFIX Entities,\n              http://www.iana.org/assignments/ipfix.\"\
    ;\n          }\n          leaf isFlowKey {\n            when \"(name(../../..)\
    \ != 'immediateCache')\n              and\n              ((count(../ieEnterpriseNumber)\
    \ = 0)\n              or\n              (../ieEnterpriseNumber != 29305))\" {\n\
    \              description \"This parameter is not available for\n           \
    \     Reverse Information Elements (which have enterprise\n                number\
    \ 29305).  It is also not available for\n                immediateCache.\";\n\
    \            }\n            type empty;\n            description \"If present,\
    \ this is a flow key.\";\n          }\n        }\n      }\n    }\n    grouping\
    \ flowCacheParameters {\n      description \"Configuration and state parameters\
    \ of a Cache\n        generating Flow Records.\";\n      leaf maxFlows {\n   \
    \     type uint32;\n        units flows;\n        description \"This parameter\
    \ configures the maximum number of\n          Flows in the Cache, which is the\
    \ maximum number of Flows\n          that can be measured simultaneously.\n  \
    \        The Monitoring Device MUST ensure that sufficient resources\n       \
    \   are available to store the configured maximum number of\n          Flows.\n\
    \          If the maximum number of Flows is measured, an additional\n       \
    \   Flow can be measured only if an existing entry is removed.\n          However,\
    \ traffic that pertains to existing Flows can\n          continue to be measured.\"\
    ;\n      }\n      leaf activeTimeout {\n        when \"(name(..) = 'timeoutCache')\
    \ or\n          (name(..) = 'naturalCache')\" {\n          description \"This\
    \ parameter is only available for\n            timeoutCache and naturalCache.\"\
    ;\n        }\n        type uint32;\n        units seconds;\n        description\
    \ \"This parameter configures the time in\n          seconds after which a Flow\
    \ is expired even though packets\n          matching this Flow are still received\
    \ by the Cache.\n          The parameter value zero indicates infinity, meaning\
    \ that\n          there is no active timeout.\n          If not configured by\
    \ the user, the Monitoring Device sets\n          this parameter.\n          Note\
    \ that this parameter corresponds to\n          ipfixMeteringProcessCacheActiveTimeout\
    \ in the IPFIX\n          MIB module.\";\n        reference \"RFC 6615, Section\
    \ 8\n          (ipfixMeteringProcessCacheActiveTimeout).\";\n      }\n      leaf\
    \ idleTimeout {\n        when \"(name(..) = 'timeoutCache') or\n          (name(..)\
    \ = 'naturalCache')\" {\n          description \"This parameter is only available\
    \ for\n            timeoutCache and naturalCache.\";\n        }\n        type\
    \ uint32;\n        units seconds;\n        description \"This parameter configures\
    \ the time in\n          seconds after which a Flow is expired if no more packets\n\
    \          matching this Flow are received by the Cache.\n          The parameter\
    \ value zero indicates infinity, meaning that\n          there is no idle timeout.\n\
    \          If not configured by the user, the Monitoring Device sets\n       \
    \   this parameter.\n          Note that this parameter corresponds to\n     \
    \     ipfixMeteringProcessCacheIdleTimeout in the IPFIX\n          MIB module.\"\
    ;\n        reference \"RFC 6615, Section 8\n          (ipfixMeteringProcessCacheIdleTimeout).\"\
    ;\n      }\n      leaf exportInterval {\n        when \"name(..) = 'permanentCache'\"\
    \ {\n          description \"This parameter is only available for\n          \
    \  permanentCache.\";\n        }\n        type uint32;\n        units seconds;\n\
    \        description \"This parameter configures the interval (in\n          seconds)\
    \ for periodical export of Flow Records.\n          If not configured by the user,\
    \ the Monitoring Device sets\n          this parameter.\";\n      }\n      leaf\
    \ activeFlows {\n        type yang:gauge32;\n        units flows;\n        config\
    \ false;\n        description \"The number of Flows currently active in this\n\
    \          Cache.\n          Note that this parameter corresponds to\n       \
    \   ipfixMeteringProcessCacheActiveFlows in the IPFIX MIB\n          module.\"\
    ;\n        reference \"RFC 6615, Section 8\n          (ipfixMeteringProcessCacheActiveFlows).\"\
    ;\n      }\n      leaf unusedCacheEntries {\n        type yang:gauge32;\n    \
    \    units flows;\n        config false;\n        description \"The number of\
    \ unused Cache entries in this\n          Cache.\n          Note that this parameter\
    \ corresponds to\n          ipfixMeteringProcessCacheUnusedCacheEntries in the\
    \ IPFIX\n          MIB module.\";\n        reference \"RFC 6615, Section 8\n \
    \         (ipfixMeteringProcessCacheUnusedCacheEntries).\";\n      }\n    }\n\
    \    grouping exportingProcessParameters {\n      description \"Parameters of\
    \ an Exporting Process.\";\n      leaf exportingProcessId {\n        type uint32;\n\
    \        config false;\n        description \"The identifier of the Exporting\
    \ Process.\n          This parameter corresponds to the Information Element\n\
    \          exportingProcessId.  Its occurrence helps to associate\n          Exporting\
    \ Process parameters with Exporing Process\n          statistics exported by the\
    \ Monitoring Device using the\n          Exporting Process Reliability Statistics\
    \ Template as\n          defined by the IPFIX protocol specification.\";\n   \
    \     reference \"RFC 5101, Section 4.3; IANA registry for IPFIX\n          Entities,\
    \ http://www.iana.org/assignments/ipfix.\";\n      }\n      leaf exportMode {\n\
    \        type identityref {\n          base \"exportMode\";\n        }\n     \
    \   default parallel;\n        description \"This parameter determines to which\
    \ configured\n          destination(s) the incoming Data Records are exported.\"\
    ;\n      }\n      list destination {\n        key name;\n        min-elements\
    \ 1;\n        description \"List of export destinations.\";\n        leaf name\
    \ {\n          type nameType;\n          description \"Key of this list.\";\n\
    \        }\n        choice DestinationParameters {\n          mandatory true;\n\
    \          description \"Configuration parameters depend on whether\n        \
    \    SCTP, UDP, or TCP is used as transport protocol, and\n            whether\
    \ the destination is a file.\";\n          container sctpExporter {\n        \
    \    description \"SCTP parameters.\";\n            uses sctpExporterParameters;\n\
    \          }\n          container udpExporter {\n            if-feature udpTransport;\n\
    \            description \"UDP parameters.\";\n            uses udpExporterParameters;\n\
    \          }\n          container tcpExporter {\n            if-feature tcpTransport;\n\
    \            description \"TCP parameters.\";\n            uses tcpExporterParameters;\n\
    \          }\n          container fileWriter {\n            if-feature fileWriter;\n\
    \            description \"File Writer parameters.\";\n            uses fileWriterParameters;\n\
    \          }\n        }\n      }\n      list options {\n        key name;\n  \
    \      description \"List of options reported by the Exporting\n          Process.\"\
    ;\n        leaf name {\n          type nameType;\n          description \"Key\
    \ of this list.\";\n        }\n        uses optionsParameters;\n      }\n    }\n\
    \    grouping commonExporterParameters {\n      description \"Parameters of en\
    \ export destination that are\n        common to all transport protocols.\";\n\
    \      leaf ipfixVersion {\n        type uint16;\n        default 10;\n      \
    \  description \"IPFIX version number.\";\n        reference \"RFC 5101.\";\n\
    \      }\n      leaf destinationPort {\n        type inet:port-number;\n     \
    \   description \"If not configured by the user, the Monitoring\n          Device\
    \ uses the default port number for IPFIX, which is\n          4739 without TLS\
    \ or DTLS and 4740 if TLS or DTLS is\n          activated.\";\n      }\n     \
    \ choice indexOrName {\n        description \"Index or name of the interface as\
    \ stored in the\n          ifTable of IF-MIB.\n          If configured, the Exporting\
    \ Process MUST use the given\n          interface to export IPFIX Messages to\
    \ the export\n          destination.\n          If omitted, the Exporting Process\
    \ selects the outgoing\n          interface based on local routing decision and\
    \ accepts\n          return traffic, such as transport-layer acknowledgments,\n\
    \          on all available interfaces.\";\n        reference \"RFC 2863.\";\n\
    \        leaf ifIndex {\n          type uint32;\n          description \"Index\
    \ of an interface as stored in the ifTable\n            of IF-MIB.\";\n      \
    \    reference \"RFC 2863.\";\n        }\n        leaf ifName {\n          type\
    \ string;\n          description \"Name of an interface as stored in the ifTable\n\
    \            of IF-MIB.\";\n          reference \"RFC 2863.\";\n        }\n  \
    \    }\n      leaf sendBufferSize {\n        type uint32;\n        units bytes;\n\
    \        description \"Size of the socket send buffer.\n          If not configured\
    \ by the user, this parameter is set by\n          the Monitoring Device.\";\n\
    \      }\n      leaf rateLimit {\n        type uint32;\n        units \"bytes\
    \ per second\";\n        description \"Maximum number of bytes per second the\
    \ Exporting\n          Process may export to the given destination.  The number\
    \ of\n          bytes is calculated from the lengths of the IPFIX Messages\n \
    \         exported.  If not configured, no rate limiting is performed.\";\n  \
    \      reference \"RFC 5476, Section 6.3.\";\n      }\n      container transportLayerSecurity\
    \ {\n        presence \"If transportLayerSecurity is present, DTLS is\n      \
    \    enabled if the transport protocol is SCTP or UDP, and TLS\n          is enabled\
    \ if the transport protocol is TCP.\";\n        description \"TLS or DTLS configuration.\"\
    ;\n        uses transportLayerSecurityParameters;\n      }\n      container transportSession\
    \ {\n        config false;\n        description \"State parameters of the Transport\
    \ Session\n          directed to the given destination.\";\n        uses transportSessionParameters;\n\
    \      }\n    }\n    grouping sctpExporterParameters {\n      description \"SCTP-specific\
    \ export destination parameters.\";\n      uses commonExporterParameters;\n  \
    \    leaf-list sourceIPAddress {\n        type inet:ip-address;\n        description\
    \ \"List of source IP addresses used by the\n          Exporting Process.\n  \
    \        If configured, the specified addresses are eligible local\n         \
    \ IP addresses of the multihomed SCTP endpoint.\n          If not configured,\
    \ all locally assigned IP addresses are\n          eligible local IP addresses.\"\
    ;\n        reference \"RFC 4960, Section 6.4.\";\n      }\n      leaf-list destinationIPAddress\
    \ {\n        type inet:ip-address;\n        min-elements 1;\n        description\
    \ \"One or more IP addresses of the Collecting\n          Process to which IPFIX\
    \ Messages are sent.\n          The user MUST ensure that all configured IP addresses\n\
    \          belong to the same Collecting Process.\n          The Exporting Process\
    \ tries to establish an SCTP\n          association to any of the configured destination\
    \ IP\n          addresses.\";\n        reference \"RFC 4960, Section 6.4.\";\n\
    \      }\n      leaf timedReliability {\n        type uint32;\n        units milliseconds;\n\
    \        default 0;\n        description \"Lifetime in milliseconds until an IPFIX\n\
    \          Message containing Data Sets only is 'abandoned' due to\n         \
    \ the timed reliability mechanism of PR-SCTP.\n          If this parameter is\
    \ set to zero, reliable SCTP\n          transport is used for all Data Records.\n\
    \          Regardless of the value of this parameter, the Exporting\n        \
    \  Process MAY use reliable SCTP transport for Data Sets\n          associated\
    \ with Options Templates.\";\n        reference \"RFC 3758; RFC 4960.\";\n   \
    \   }\n    }\n    grouping udpExporterParameters {\n      description \"Parameters\
    \ of a UDP export destination.\";\n      uses commonExporterParameters;\n    \
    \  leaf sourceIPAddress {\n        type inet:ip-address;\n        description\
    \ \"Source IP address used by the Exporting Process.\n        If not configured,\
    \ the IP address assigned to the outgoing\n        interface is used as source\
    \ IP address.\";\n      }\n      leaf destinationIPAddress {\n        type inet:ip-address;\n\
    \        mandatory true;\n        description \"IP address of the Collection Process\
    \ to which\n          IPFIX Messages are sent.\";\n      }\n      leaf maxPacketSize\
    \ {\n        type uint16;\n        units octets;\n        description \"This parameter\
    \ specifies the maximum size of\n          IP packets sent to the Collector. \
    \ If set to zero, the\n          Exporting Device MUST derive the maximum packet\
    \ size\n          from path MTU discovery mechanisms.\n          If not configured\
    \ by the user, this parameter is set by\n          the Monitoring Device.\";\n\
    \      }\n      leaf templateRefreshTimeout {\n        type uint32;\n        units\
    \ seconds;\n        default 600;\n        description \"Sets time after which\
    \ Templates are resent in the\n          UDP Transport Session.\n          Note\
    \ that the configured lifetime MUST be adapted to the\n          templateLifeTime\
    \ parameter value at the receiving Collecting\n          Process.\n          Note\
    \ that this parameter corresponds to\n          ipfixTransportSessionTemplateRefreshTimeout\
    \ in the IPFIX\n          MIB module.\";\n        reference \"RFC 5101, Section\
    \ 10.3.6; RFC 6615, Section 8\n          (ipfixTransportSessionTemplateRefreshTimeout).\"\
    ;\n      }\n      leaf optionsTemplateRefreshTimeout {\n        type uint32;\n\
    \        units seconds;\n        default 600;\n        description \"Sets time\
    \ after which Options Templates are\n          resent in the UDP Transport Session.\n\
    \          Note that the configured lifetime MUST be adapted to the\n        \
    \  optionsTemplateLifeTime parameter value at the receiving\n          Collecting\
    \ Process.\n          Note that this parameter corresponds to\n          ipfixTransportSessionOptionsTemplateRefreshTimeout\
    \ in the\n          IPFIX MIB module.\";\n        reference \"RFC 5101, Section\
    \ 10.3.6; RFC 6615, Section 8\n          (ipfixTransportSessionOptionsTemplateRefreshTimeout).\"\
    ;\n      }\n      leaf templateRefreshPacket {\n        type uint32;\n       \
    \ units \"IPFIX Messages\";\n        description \"Sets number of IPFIX Messages\
    \ after which\n          Templates are resent in the UDP Transport Session.\n\
    \          Note that this parameter corresponds to\n          ipfixTransportSessionTemplateRefreshPacket\
    \ in the IPFIX\n          MIB module.\n          If omitted, Templates are only\
    \ resent after timeout.\";\n        reference \"RFC 5101, Section 10.3.6; RFC\
    \ 6615, Section 8\n          (ipfixTransportSessionTemplateRefreshPacket).\";\n\
    \      }\n      leaf optionsTemplateRefreshPacket {\n        type uint32;\n  \
    \      units \"IPFIX Messages\";\n        description \"Sets number of IPFIX Messages\
    \ after which\n          Options Templates are resent in the UDP Transport Session\n\
    \          protocol.\n          Note that this parameter corresponds to\n    \
    \      ipfixTransportSessionOptionsTemplateRefreshPacket in the\n          IPFIX\
    \ MIB module.\n          If omitted, Templates are only resent after timeout.\"\
    ;\n        reference \"RFC 5101, Section 10.3.6; RFC 6615, Section 8\n       \
    \   (ipfixTransportSessionOptionsTemplateRefreshPacket).\";\n      }\n    }\n\
    \    grouping tcpExporterParameters {\n      description \"Parameters of a TCP\
    \ export destination.\";\n      uses commonExporterParameters;\n      leaf sourceIPAddress\
    \ {\n        type inet:ip-address;\n        description \"Source IP address used\
    \ by the Exporting Process.\n          If not configured by the user, this parameter\
    \ is set by\n          the Monitoring Device to an IP address assigned to the\n\
    \          outgoing interface.\";\n      }\n      leaf destinationIPAddress {\n\
    \        type inet:ip-address;\n        mandatory true;\n        description \"\
    IP address of the Collection Process to which\n          IPFIX Messages are sent.\"\
    ;\n      }\n    }\n    grouping fileWriterParameters {\n      description \"File\
    \ Writer parameters.\";\n      leaf ipfixVersion {\n        type uint16;\n   \
    \     default 10;\n        description \"IPFIX version number.\";\n        reference\
    \ \"RFC 5101.\";\n      }\n      leaf file {\n        type inet:uri;\n       \
    \ mandatory true;\n        description \"URI specifying the location of the file.\"\
    ;\n      }\n      leaf bytes {\n        type yang:counter64;\n        units octets;\n\
    \        config false;\n        description \"The number of bytes written by the\
    \ File Writer.\n          Discontinuities in the value of this counter can occur\
    \ at\n          re-initialization of the management system, and at other\n   \
    \       times as indicated by the value of\n          fileWriterDiscontinuityTime.\"\
    ;\n      }\n      leaf messages {\n        type yang:counter64;\n        units\
    \ \"IPFIX Messages\";\n        config false;\n        description \"The number\
    \ of IPFIX Messages written by the File\n          Writer.\n          Discontinuities\
    \ in the value of this counter can occur at\n          re-initialization of the\
    \ management system, and at other\n          times as indicated by the value of\n\
    \          fileWriterDiscontinuityTime.\";\n      }\n      leaf discardedMessages\
    \ {\n        type yang:counter64;\n        units \"IPFIX Messages\";\n       \
    \ config false;\n        description \"The number of IPFIX Messages that could\
    \ not be\n          written by the File Writer due to internal buffer\n      \
    \    overflows, limited storage capacity, etc.\n          Discontinuities in the\
    \ value of this counter can occur at\n          re-initialization of the management\
    \ system, and at other\n          times as indicated by the value of\n       \
    \   fileWriterDiscontinuityTime.\";\n      }\n      leaf records {\n        type\
    \ yang:counter64;\n        units \"Data Records\";\n        config false;\n  \
    \      description \"The number of Data Records written by the File\n        \
    \  Writer.\n          Discontinuities in the value of this counter can occur at\n\
    \          re-initialization of the management system, and at other\n        \
    \  times as indicated by the value of\n          fileWriterDiscontinuityTime.\"\
    ;\n      }\n      leaf templates {\n        type yang:counter32;\n        units\
    \ \"Templates\";\n        config false;\n        description \"The number of Template\
    \ Records (excluding\n          Options Template Records) written by the File\
    \ Writer.\n          Discontinuities in the value of this counter can occur at\n\
    \          re-initialization of the management system, and at other\n        \
    \  times as indicated by the value of\n          fileWriterDiscontinuityTime.\"\
    ;\n      }\n      leaf optionsTemplates {\n        type yang:counter32;\n    \
    \    units \"Options Templates\";\n        config false;\n        description\
    \ \"The number of Options Template Records written\n          by the File Writer.\n\
    \          Discontinuities in the value of this counter can occur at\n       \
    \   re-initialization of the management system, and at other\n          times\
    \ as indicated by the value of\n          fileWriterDiscontinuityTime.\";\n  \
    \    }\n      leaf fileWriterDiscontinuityTime {\n        type yang:date-and-time;\n\
    \        config false;\n        description \"Timestamp of the most recent occasion\
    \ at which\n          one or more File Writer counters suffered a discontinuity.\n\
    \          In contrast to discontinuity times in the IPFIX MIB module,\n     \
    \     the time is absolute and not relative to sysUpTime.\";\n      }\n      list\
    \ template {\n        config false;\n        description \"This list contains\
    \ the Templates and Options\n          Templates that have been written by the\
    \ File Reader.\n          Withdrawn or invalidated (Options) Templates MUST be\
    \ removed\n          from this list.\";\n        uses templateParameters;\n  \
    \    }\n    }\n    grouping optionsParameters {\n      description \"Parameters\
    \ specifying the data export using an\n        Options Template.\";\n      leaf\
    \ optionsType {\n        type identityref {\n          base \"optionsType\";\n\
    \        }\n        mandatory true;\n        description \"Type of the exported\
    \ options data.\";\n      }\n      leaf optionsTimeout {\n        type uint32;\n\
    \        units milliseconds;\n        description \"Time interval for periodic\
    \ export of the options\n          data.  If set to zero, the export is triggered\
    \ when the\n          options data has changed.\n          If not configured by\
    \ the user, this parameter is set by the\n          Monitoring Device.\";\n  \
    \    }\n    }\n    grouping collectingProcessParameters {\n      description \"\
    Parameters of a Collecting Process.\";\n      list sctpCollector {\n        key\
    \ name;\n        description \"List of SCTP receivers (sockets) on which the\n\
    \          Collecting Process receives IPFIX Messages.\";\n        leaf name {\n\
    \          type nameType;\n          description \"Key of this list.\";\n    \
    \    }\n        uses sctpCollectorParameters;\n      }\n      list udpCollector\
    \ {\n        if-feature udpTransport;\n        key name;\n        description\
    \ \"List of UDP receivers (sockets) on which the\n          Collecting Process\
    \ receives IPFIX Messages.\";\n        leaf name {\n          type nameType;\n\
    \          description \"Key of this list.\";\n        }\n        uses udpCollectorParameters;\n\
    \      }\n      list tcpCollector {\n        if-feature tcpTransport;\n      \
    \  key name;\n        description \"List of TCP receivers (sockets) on which the\n\
    \          Collecting Process receives IPFIX Messages.\";\n        leaf name {\n\
    \          type nameType;\n          description \"Key of this list.\";\n    \
    \    }\n        uses tcpCollectorParameters;\n      }\n      list fileReader {\n\
    \        if-feature fileReader;\n        key name;\n        description \"List\
    \ of File Readers from which the Collecting\n          Process reads IPFIX Messages.\"\
    ;\n        leaf name {\n          type nameType;\n          description \"Key\
    \ of this list.\";\n        }\n        uses fileReaderParameters;\n      }\n \
    \   }\n    grouping commonCollectorParameters {\n      description \"Parameters\
    \ of a Collecting Process that are\n        common to all transport protocols.\"\
    ;\n      leaf localPort {\n        type inet:port-number;\n        description\
    \ \"If not configured, the Monitoring Device uses the\n          default port\
    \ number for IPFIX, which is 4739 without\n          TLS or DTLS and 4740 if TLS\
    \ or DTLS is activated.\";\n      }\n      container transportLayerSecurity {\n\
    \        presence \"If transportLayerSecurity is present, DTLS is enabled\n  \
    \        if the transport protocol is SCTP or UDP, and TLS is enabled\n      \
    \    if the transport protocol is TCP.\";\n        description \"TLS or DTLS configuration.\"\
    ;\n        uses transportLayerSecurityParameters;\n      }\n      list transportSession\
    \ {\n        config false;\n        description \"This list contains the currently\
    \ established\n          Transport Sessions terminating at the given socket.\"\
    ;\n        uses transportSessionParameters;\n      }\n    }\n    grouping sctpCollectorParameters\
    \ {\n      description \"Parameters of a listening SCTP socket at a\n        Collecting\
    \ Process.\";\n      uses commonCollectorParameters;\n      leaf-list localIPAddress\
    \ {\n        type inet:ip-address;\n        description \"List of local IP addresses\
    \ on which the\n          Collecting Process listens for IPFIX Messages.  The\
    \ IP\n          addresses are used as eligible local IP addresses of the\n   \
    \       multihomed SCTP endpoint.\";\n        reference \"RFC 4960, Section 6.4.\"\
    ;\n      }\n    }\n    grouping udpCollectorParameters {\n      description \"\
    Parameters of a listening UDP socket at a\n        Collecting Process.\";\n  \
    \    uses commonCollectorParameters;\n      leaf-list localIPAddress {\n     \
    \   type inet:ip-address;\n        description \"List of local IP addresses on\
    \ which the Collecting\n          Process listens for IPFIX Messages.\";\n   \
    \   }\n      leaf templateLifeTime {\n        type uint32;\n        units seconds;\n\
    \        default 1800;\n        description \"Sets the lifetime of Templates for\
    \ all UDP\n          Transport Sessions terminating at this UDP socket.\n    \
    \      Templates that are not received again within the configured\n         \
    \ lifetime become invalid at the Collecting Process.\n          As specified in\
    \ RFC 5101, the Template lifetime MUST be at\n          least three times higher\
    \ than the templateRefreshTimeout\n          parameter value configured on the\
    \ corresponding Exporting\n          Processes.\n          Note that this parameter\
    \ corresponds to\n          ipfixTransportSessionTemplateRefreshTimeout in the\
    \ IPFIX\n          MIB module.\";\n        reference \"RFC 5101, Section 10.3.7;\
    \ RFC 6615, Section 8\n          (ipfixTransportSessionTemplateRefreshTimeout).\"\
    ;\n      }\n      leaf optionsTemplateLifeTime {\n        type uint32;\n     \
    \   units seconds;\n        default 1800;\n        description \"Sets the lifetime\
    \ of Options Templates for all\n          UDP Transport Sessions terminating at\
    \ this UDP socket.\n          Options Templates that are not received again within\
    \ the\n          configured lifetime become invalid at the Collecting\n      \
    \    Process.\n          As specified in RFC 5101, the Options Template lifetime\
    \ MUST\n          be at least three times higher than the\n          optionsTemplateRefreshTimeout\
    \ parameter value configured on\n          the corresponding Exporting Processes.\n\
    \          Note that this parameter corresponds to\n          ipfixTransportSessionOptionsTemplateRefreshTimeout\
    \ in the\n          IPFIX MIB module.\";\n        reference \"RFC 5101, Section\
    \ 10.3.7; RFC 6615, Section 8\n          (ipfixTransportSessionOptionsTemplateRefreshTimeout).\"\
    ;\n      }\n      leaf templateLifePacket {\n        type uint32;\n        units\
    \ \"IPFIX Messages\";\n        description \"If this parameter is configured,\
    \ Templates\n          defined in a UDP Transport Session become invalid if they\n\
    \          are neither included in a sequence of more than this number\n     \
    \     of IPFIX Messages nor received again within the period of\n          time\
    \ specified by templateLifeTime.\n          Note that this parameter corresponds\
    \ to\n          ipfixTransportSessionTemplateRefreshPacket in the IPFIX\n    \
    \      MIB module.\";\n        reference \"RFC 5101, Section 10.3.7; RFC 6615,\
    \ Section 8\n          (ipfixTransportSessionTemplateRefreshPacket).\";\n    \
    \  }\n      leaf optionsTemplateLifePacket {\n        type uint32;\n        units\
    \ \"IPFIX Messages\";\n        description \"If this parameter is configured,\
    \ Options\n          Templates defined in a UDP Transport Session become\n   \
    \       invalid if they are neither included in a sequence of more\n         \
    \ than this number of IPFIX Messages nor received again\n          within the\
    \ period of time specified by\n          optionsTemplateLifeTime.\n          Note\
    \ that this parameter corresponds to\n          ipfixTransportSessionOptionsTemplateRefreshPacket\
    \ in the\n          IPFIX MIB module.\";\n        reference \"RFC 5101, Section\
    \ 10.3.7; RFC 6615, Section 8\n          (ipfixTransportSessionOptionsTemplateRefreshPacket).\"\
    ;\n      }\n    }\n    grouping tcpCollectorParameters {\n      description \"\
    Parameters of a listening TCP socket at a\n        Collecting Process.\";\n  \
    \    uses commonCollectorParameters;\n      leaf-list localIPAddress {\n     \
    \   type inet:ip-address;\n        description \"List of local IP addresses on\
    \ which the Collecting\n          Process listens for IPFIX Messages.\";\n   \
    \   }\n    }\n    grouping fileReaderParameters {\n      description \"File Reader\
    \ parameters.\";\n      leaf file {\n        type inet:uri;\n        mandatory\
    \ true;\n        description \"URI specifying the location of the file.\";\n \
    \     }\n      leaf bytes {\n        type yang:counter64;\n        units octets;\n\
    \        config false;\n        description \"The number of bytes read by the\
    \ File Reader.\n          Discontinuities in the value of this counter can occur\
    \ at\n          re-initialization of the management system, and at other\n   \
    \       times as indicated by the value of\n          fileReaderDiscontinuityTime.\"\
    ;\n      }\n      leaf messages {\n        type yang:counter64;\n        units\
    \ \"IPFIX Messages\";\n        config false;\n        description \"The number\
    \ of IPFIX Messages read by the File\n          Reader.\n          Discontinuities\
    \ in the value of this counter can occur at\n          re-initialization of the\
    \ management system, and at other\n          times as indicated by the value of\n\
    \          fileReaderDiscontinuityTime.\";\n      }\n      leaf records {\n  \
    \      type yang:counter64;\n        units \"Data Records\";\n        config false;\n\
    \        description \"The number of Data Records read by the File\n         \
    \ Reader.\n          Discontinuities in the value of this counter can occur at\n\
    \          re-initialization of the management system, and at other\n        \
    \  times as indicated by the value of\n          fileReaderDiscontinuityTime.\"\
    ;\n      }\n      leaf templates {\n        type yang:counter32;\n        units\
    \ \"Templates\";\n        config false;\n        description \"The number of Template\
    \ Records (excluding\n          Options Template Records) read by the File Reader.\n\
    \          Discontinuities in the value of this counter can occur at\n       \
    \   re-initialization of the management system, and at other\n          times\
    \ as indicated by the value of\n          fileReaderDiscontinuityTime.\";\n  \
    \    }\n      leaf optionsTemplates {\n        type yang:counter32;\n        units\
    \ \"Options Templates\";\n        config false;\n        description \"The number\
    \ of Options Template Records read by\n          the File Reader.\n          Discontinuities\
    \ in the value of this counter can occur at\n          re-initialization of the\
    \ management system, and at other\n          times as indicated by the value of\n\
    \          fileReaderDiscontinuityTime.\";\n      }\n      leaf fileReaderDiscontinuityTime\
    \ {\n        type yang:date-and-time;\n        config false;\n        description\
    \ \"Timestamp of the most recent occasion at which\n          one or more File\
    \ Reader counters suffered a discontinuity.\n          In contrast to discontinuity\
    \ times in the IPFIX MIB module,\n          the time is absolute and not relative\
    \ to sysUpTime.\";\n      }\n      list template {\n        config false;\n  \
    \      description \"This list contains the Templates and Options\n          Templates\
    \ that have been read by the File Reader.\n          Withdrawn or invalidated\
    \ (Options) Template MUST be removed\n          from this list.\";\n        uses\
    \ templateParameters;\n      }\n    }\n    grouping transportLayerSecurityParameters\
    \ {\n      description \"TLS or DTLS parameters.\";\n      leaf-list localCertificationAuthorityDN\
    \ {\n        type string;\n        description \"Distinguished names of certification\
    \ authorities\n          whose certificates may be used to identify the local\n\
    \          endpoint.\";\n        reference \"RFC 5280.\";\n      }\n      leaf-list\
    \ localSubjectDN {\n        type string;\n        description \"Distinguished\
    \ names that may be used in the\n          certificates to identify the local\
    \ endpoint.\";\n        reference \"RFC 5280.\";\n      }\n      leaf-list localSubjectFQDN\
    \ {\n        type inet:domain-name;\n        description \"Fully qualified domain\
    \ names that may be used to\n          in the certificates to identify the local\
    \ endpoint.\";\n        reference \"RFC 5280.\";\n      }\n      leaf-list remoteCertificationAuthorityDN\
    \ {\n        type string;\n        description \"Distinguished names of certification\
    \ authorities\n          whose certificates are accepted to authorize remote\n\
    \          endpoints.\";\n        reference \"RFC 5280.\";\n      }\n      leaf-list\
    \ remoteSubjectDN {\n        type string;\n        description \"Distinguished\
    \ names which are accepted in\n          certificates to authorize remote endpoints.\"\
    ;\n        reference \"RFC 5280.\";\n      }\n      leaf-list remoteSubjectFQDN\
    \ {\n        type inet:domain-name;\n        description \"Fully qualified domain\
    \ names that are accepted in\n          certificates to authorize remote endpoints.\"\
    ;\n        reference \"RFC 5280.\";\n      }\n    }\n    grouping templateParameters\
    \ {\n      description \"State parameters of a Template used by an Exporting\n\
    \        Process or received by a Collecting Process in a specific\n        Transport\
    \ Session.  Parameter names and semantics correspond to\n        the managed objects\
    \ in IPFIX-MIB\";\n      reference \"RFC 5101; RFC 6615, Section 8 (ipfixTemplateEntry,\n\
    \        ipfixTemplateDefinitionEntry, ipfixTemplateStatsEntry)\";\n      leaf\
    \ observationDomainId {\n        type uint32;\n        description \"The ID of\
    \ the Observation Domain for which this\n          Template is defined.\n    \
    \      Note that this parameter corresponds to\n          ipfixTemplateObservationDomainId\
    \ in the IPFIX MIB module.\";\n        reference \"RFC 6615, Section 8\n     \
    \     (ipfixTemplateObservationDomainId).\";\n      }\n      leaf templateId {\n\
    \        type uint16 {\n          range \"256..65535\" {\n            description\
    \ \"Valid range of Template IDs.\";\n            reference \"RFC 5101\";\n   \
    \       }\n        }\n        description \"This number indicates the Template\
    \ ID in the IPFIX\n          message.\n          Note that this parameter corresponds\
    \ to ipfixTemplateId in\n          the IPFIX MIB module.\";\n        reference\
    \ \"RFC 6615, Section 8 (ipfixTemplateId).\";\n      }\n      leaf setId {\n \
    \       type uint16;\n        description \"This number indicates the Set ID of\
    \ the Template.\n          Currently, there are two values defined.  The value\
    \ 2 is used\n          for Sets containing Template definitions.  The value 3\
    \ is\n          used for Sets containing Options Template definitions.\n     \
    \     Note that this parameter corresponds to ipfixTemplateSetId\n          in\
    \ the IPFIX MIB module.\";\n        reference \"RFC 6615, Section 8 (ipfixTemplateSetId).\"\
    ;\n      }\n      leaf accessTime {\n        type yang:date-and-time;\n      \
    \  description \"Used for Exporting Processes, this parameter\n          contains\
    \ the time when this (Options) Template was last\n          sent to the Collector(s)\
    \ or written to the file.\n          Used for Collecting Processes, this parameter\
    \ contains the\n          time when this (Options) Template was last received\
    \ from the\n          Exporter or read from the file.\n          Note that this\
    \ parameter corresponds to\n          ipfixTemplateAccessTime in the IPFIX MIB\
    \ module.\";\n        reference \"RFC 6615, Section 8 (ipfixTemplateAccessTime).\"\
    ;\n      }\n      leaf templateDataRecords {\n        type yang:counter64;\n \
    \       description \"The number of transmitted or received Data\n          Records\
    \ defined by this (Options) Template.\n          Discontinuities in the value\
    \ of this counter can occur at\n          re-initialization of the management\
    \ system, and at other\n          times as indicated by the value of\n       \
    \   templateDiscontinuityTime.\n          Note that this parameter corresponds\
    \ to\n          ipfixTemplateDataRecords in the IPFIX MIB module.\";\n       \
    \ reference \"RFC 6615, Section 8 (ipfixTemplateDataRecords).\";\n      }\n  \
    \    leaf templateDiscontinuityTime {\n        type yang:date-and-time;\n    \
    \    description \"Timestamp of the most recent occasion at which\n          the\
    \ counter templateDataRecords suffered a discontinuity.\n          Note that this\
    \ parameter functionally corresponds to\n          ipfixTemplateDiscontinuityTime\
    \ in the IPFIX MIB module.\n          In contrast to ipfixTemplateDiscontinuityTime,\
    \ the time\n          is absolute and not relative to sysUpTime.\";\n        reference\
    \ \"RFC 6615, Section 8\n          (ipfixTemplateDiscontinuityTime).\";\n    \
    \  }\n      list field {\n        description \"This list contains the (Options)\
    \ Template\n          fields of which the (Options) Template is defined.\n   \
    \       The order of the list corresponds to the order of the fields\n       \
    \   in the (Option) Template Record.\";\n        leaf ieId {\n          type ieIdType;\n\
    \          description \"This parameter indicates the Information\n          \
    \  Element identifier of the field.\n            Note that this parameter corresponds\
    \ to\n            ipfixTemplateDefinitionIeId in the IPFIX MIB module.\";\n  \
    \        reference \"RFC 5101; RFC 6615, Section 8\n            (ipfixTemplateDefinitionIeId).\"\
    ;\n        }\n        leaf ieLength {\n          type uint16;\n          units\
    \ octets;\n          description \"This parameter indicates the length of the\n\
    \            Information Element of the field.\n            Note that this parameter\
    \ corresponds to\n            ipfixTemplateDefinitionIeLength in the IPFIX MIB\n\
    \            module.\";\n          reference \"RFC 5101; RFC 6615, Section 8\n\
    \            (ipfixTemplateDefinitionIeLength).\";\n        }\n        leaf ieEnterpriseNumber\
    \ {\n          type uint32;\n          description \"This parameter indicates\
    \ the IANA enterprise\n            number of the authority defining the Information\
    \ Element\n            identifier.\n            If the Information Element is\
    \ not enterprise-specific,\n            this state parameter is zero.\n      \
    \      Note that this parameter corresponds to\n            ipfixTemplateDefinitionIeEnterpriseNumber\
    \ in the IPFIX\n            MIB module.\";\n          reference \"RFC 6615, Section\
    \ 8\n            (ipfixTemplateDefinitionIeEnterpriseNumber);\n            IANA\
    \ registry for Private Enterprise Numbers,\n            http://www.iana.org/assignments/enterprise-numbers.\"\
    ;\n        }\n        leaf isFlowKey {\n          when \"../../setId = 2\" {\n\
    \            description \"This parameter is available for non-Options\n     \
    \         Templates (Set ID is 2).\";\n          }\n          type empty;\n  \
    \        description \"If present, this is a Flow Key field.\n            Note\
    \ that this corresponds to flowKey(1) being set in\n            ipfixTemplateDefinitionFlags.\"\
    ;\n          reference \"RFC 6615, Section 8\n            (ipfixTemplateDefinitionFlags).\"\
    ;\n        }\n        leaf isScope {\n          when \"../../setId = 3\" {\n \
    \           description \"This parameter is available for Options\n          \
    \    Templates (Set ID is 3).\";\n          }\n          type empty;\n       \
    \   description \"If present, this is a scope field.\n            Note that this\
    \ corresponds to scope(0) being set in\n            ipfixTemplateDefinitionFlags.\"\
    ;\n          reference \"RFC 6615, Section 8\n            (ipfixTemplateDefinitionFlags).\"\
    ;\n        }\n      }\n    }\n    grouping transportSessionParameters {\n    \
    \  description \"State parameters of a Transport Session originating\n       \
    \ from an Exporting Process or terminating at a Collecting\n        Process. \
    \ Parameter names and semantics correspond to the\n        managed objects in\
    \ IPFIX-MIB.\";\n      reference \"RFC 5101; RFC 6615, Section 8\n        (ipfixTransportSessionEntry,\n\
    \         ipfixTransportSessionStatsEntry).\";\n      leaf ipfixVersion {\n  \
    \      type uint16;\n        description \"Used for Exporting Processes, this\
    \ parameter\n          contains the version number of the IPFIX protocol that\
    \ the\n          Exporter uses to export its data in this Transport Session.\n\
    \          Hence, it is identical to the value of the configuration\n        \
    \  parameter ipfixVersion of the outer SctpExporter,\n          UdpExporter, or\
    \ TcpExporter node.\n          Used for Collecting Processes, this parameter contains\
    \ the\n          version number of the IPFIX protocol it receives for\n      \
    \    this Transport Session.  If IPFIX Messages of different\n          IPFIX\
    \ protocol versions are received, this parameter\n          contains the maximum\
    \ version number.\n          Note that this parameter corresponds to\n       \
    \   ipfixTransportSessionIpfixVersion in the IPFIX MIB\n          module.\";\n\
    \        reference \"RFC 6615, Section 8\n          (ipfixTransportSessionIpfixVersion).\"\
    ;\n      }\n      leaf sourceAddress {\n        type inet:ip-address;\n      \
    \  description \"The source address of the Exporter of the\n          IPFIX Transport\
    \ Session.\n          If the transport protocol is SCTP, this is one of the\n\
    \          potentially many IP addresses of the Exporter.\n          Preferably,\
    \ the source IP address of the path that is\n          usually selected by the\
    \ Exporter to send IPFIX Messages to\n          the Collector SHOULD be used.\n\
    \          Note that this parameter functionally corresponds to\n          ipfixTransportSessionSourceAddressType\
    \ and\n          ipfixTransportSessionSourceAddress in the IPFIX MIB\n       \
    \   module.\";\n        reference \"RFC 6615, Section 8\n          (ipfixTransportSessionSourceAddressType,\n\
    \          ipfixTransportSessionSourceAddress);\n          RFC 4960, Section 6.4.\"\
    ;\n      }\n      leaf destinationAddress {\n        type inet:ip-address;\n \
    \       description \"The destination address of the Collector of\n          the\
    \ IPFIX Transport Session.\n          If the transport protocol is SCTP, this\
    \ is one of the\n          potentially many IP addresses of the Collector.\n \
    \         Preferably, the destination IP address of the path that is\n       \
    \   usually selected by the Exporter to send IPFIX Messages to\n          the\
    \ Collector SHOULD be used.\n          Note that this parameter functionally corresponds\
    \ to\n          ipfixTransportSessionDestinationAddressType and\n          ipfixTransportSessionDestinationAddress\
    \ in the IPFIX MIB\n          module.\";\n        reference \"RFC 6615, Section\
    \ 8\n          (ipfixTransportSessionDestinationAddressType,\n          ipfixTransportSessionDestinationAddress);\n\
    \          RFC 4960, Section 6.4.\";\n      }\n      leaf sourcePort {\n     \
    \   type inet:port-number;\n        description \"The transport-protocol port\
    \ number of the\n          Exporter of the IPFIX Transport Session.\n        \
    \  Note that this parameter corresponds to\n          ipfixTransportSessionSourcePort\
    \ in the IPFIX MIB module.\";\n        reference \"RFC 6615, Section 8\n     \
    \     (ipfixTransportSessionSourcePort).\";\n      }\n      leaf destinationPort\
    \ {\n        type inet:port-number;\n        description \"The transport-protocol\
    \ port number of the\n          Collector of the IPFIX Transport Session.\n  \
    \        Note that this parameter corresponds to\n          ipfixTransportSessionDestinationPort\
    \ in the IPFIX MIB\n          module.\";\n        reference \"RFC 6615, Section\
    \ 8\n          (ipfixTransportSessionDestinationPort).\";\n      }\n      leaf\
    \ sctpAssocId {\n        type uint32;\n        description \"The association ID\
    \ used for the SCTP session\n          between the Exporter and the Collector\
    \ of the IPFIX\n          Transport Session.  It is equal to the sctpAssocId entry\n\
    \          in the sctpAssocTable defined in the SCTP-MIB.\n          This parameter\
    \ is only available if the transport protocol\n          is SCTP and if an SNMP\
    \ agent on the same Monitoring Device\n          enables access to the corresponding\
    \ MIB objects in the\n          sctpAssocTable.\n          Note that this parameter\
    \ corresponds to\n          ipfixTransportSessionSctpAssocId in the IPFIX MIB\n\
    \          module.\";\n        reference \"RFC 6615, Section 8\n          (ipfixTransportSessionSctpAssocId);\n\
    \          RFC 3871\";\n      }\n      leaf status {\n        type transportSessionStatus;\n\
    \        description \"Status of the Transport Session.\n          Note that this\
    \ parameter corresponds to\n          ipfixTransportSessionStatus in the IPFIX\
    \ MIB module.\";\n        reference \"RFC 6615, Section 8 (ipfixTransportSessionStatus).\"\
    ;\n      }\n      leaf rate {\n        type yang:gauge32;\n        units \"bytes\
    \ per second\";\n        description \"The number of bytes per second transmitted\
    \ by the\n          Exporting Process or received by the Collecting Process.\n\
    \          This parameter is updated every second.\n          Note that this parameter\
    \ corresponds to\n          ipfixTransportSessionRate in the IPFIX MIB module.\"\
    ;\n        reference \"RFC 6615, Section 8 (ipfixTransportSessionRate).\";\n \
    \     }\n      leaf bytes {\n        type yang:counter64;\n        units bytes;\n\
    \        description \"The number of bytes transmitted by the\n          Exporting\
    \ Process or received by the Collecting Process.\n          Discontinuities in\
    \ the value of this counter can occur at\n          re-initialization of the management\
    \ system, and at other\n          times as indicated by the value of\n       \
    \   transportSessionDiscontinuityTime.\n          Note that this parameter corresponds\
    \ to\n          ipfixTransportSessionBytes in the IPFIX MIB module.\";\n     \
    \   reference \"RFC 6615, Section 8 (ipfixTransportSessionBytes).\";\n      }\n\
    \      leaf messages {\n        type yang:counter64;\n        units \"IPFIX Messages\"\
    ;\n        description \"The number of messages transmitted by the\n         \
    \ Exporting Process or received by the Collecting Process.\n          Discontinuities\
    \ in the value of this counter can occur at\n          re-initialization of the\
    \ management system, and at other\n          times as indicated by the value of\n\
    \          transportSessionDiscontinuityTime.\n          Note that this parameter\
    \ corresponds to\n          ipfixTransportSessionMessages in the IPFIX MIB module.\"\
    ;\n        reference \"RFC 6615, Section 8\n          (ipfixTransportSessionMessages).\"\
    ;\n      }\n      leaf discardedMessages {\n        type yang:counter64;\n   \
    \     units \"IPFIX Messages\";\n        description \"Used for Exporting Processes,\
    \ this parameter\n          indicates the number of messages that could not be\
    \ sent due\n          to internal buffer overflows, network congestion, routing\n\
    \          issues, etc.  Used for Collecting Process, this parameter\n       \
    \   indicates the number of received IPFIX Message that are\n          malformed,\
    \ cannot be decoded, are received in the wrong\n          order or are missing\
    \ according to the sequence number.\n          Discontinuities in the value of\
    \ this counter can occur at\n          re-initialization of the management system,\
    \ and at other\n          times as indicated by the value of\n          transportSessionDiscontinuityTime.\n\
    \          Note that this parameter corresponds to\n          ipfixTransportSessionDiscardedMessages\
    \ in the IPFIX MIB\n          module.\";\n        reference \"RFC 6615, Section\
    \ 8\n          (ipfixTransportSessionDiscardedMessages).\";\n      }\n      leaf\
    \ records {\n        type yang:counter64;\n        units \"Data Records\";\n \
    \       description \"The number of Data Records transmitted by the\n        \
    \  Exporting Process or received by the Collecting Process.\n          Discontinuities\
    \ in the value of this counter can occur at\n          re-initialization of the\
    \ management system, and at other\n          times as indicated by the value of\n\
    \          transportSessionDiscontinuityTime.\n          Note that this parameter\
    \ corresponds to\n          ipfixTransportSessionRecords in the IPFIX MIB module.\"\
    ;\n        reference \"RFC 6615, Section 8\n          (ipfixTransportSessionRecords).\"\
    ;\n      }\n      leaf templates {\n        type yang:counter32;\n        units\
    \ \"Templates\";\n        description \"The number of Templates transmitted by\
    \ the\n          Exporting Process or received by the Collecting Process.\n  \
    \        Discontinuities in the value of this counter can occur at\n         \
    \ re-initialization of the management system, and at other\n          times as\
    \ indicated by the value of\n          transportSessionDiscontinuityTime.\n  \
    \        Note that this parameter corresponds to\n          ipfixTransportSessionTemplates\
    \ in the IPFIX MIB module.\";\n        reference \"RFC 6615, Section 8\n     \
    \     (ipfixTransportSessionTemplates).\";\n      }\n      leaf optionsTemplates\
    \ {\n        type yang:counter32;\n        units \"Options Templates\";\n    \
    \    description \"The number of Option Templates transmitted by the\n       \
    \   Exporting Process or received by the Collecting Process.\n          Discontinuities\
    \ in the value of this counter can occur at\n          re-initialization of the\
    \ management system, and at other\n          times as indicated by the value of\n\
    \          transportSessionDiscontinuityTime.\n          Note that this parameter\
    \ corresponds to\n          ipfixTransportSessionOptionsTemplates in the IPFIX\
    \ MIB\n          module.\";\n        reference \"RFC 6615, Section 8\n       \
    \   (ipfixTransportSessionOptionsTemplates).\";\n      }\n      leaf transportSessionStartTime\
    \ {\n        type yang:date-and-time;\n        description \"Timestamp of the\
    \ start of the given Transport\n          Session.\n          This state parameter\
    \ does not correspond to any object in\n          the IPFIX MIB module.\";\n \
    \     }\n      leaf transportSessionDiscontinuityTime {\n        type yang:date-and-time;\n\
    \        description \"Timestamp of the most recent occasion at which\n      \
    \    one or more of the Transport Session counters suffered a\n          discontinuity.\n\
    \          Note that this parameter functionally corresponds to\n          ipfixTransportSessionDiscontinuityTime\
    \ in the IPFIX MIB\n          module.  In contrast to\n          ipfixTransportSessionDiscontinuityTime,\
    \ the time is\n          absolute and not relative to sysUpTime.\";\n        reference\
    \ \"RFC 6615, Section 8\n          (ipfixTransportSessionDiscontinuityTime).\"\
    ;\n      }\n      list template {\n        description \"This list contains the\
    \ Templates and Options\n          Templates that are transmitted by the Exporting\
    \ Process\n          or received by the Collecting Process.\n          Withdrawn\
    \ or invalidated (Options) Templates MUST be removed\n          from this list.\"\
    ;\n        uses templateParameters;\n      }\n    }\n    /*****************************************************************\n\
    \    * Main container\n    *****************************************************************/\n\
    \    container ipfix {\n      description \"Top-level node of the IPFIX/PSAMP\
    \ configuration\n        data model.\";\n      list collectingProcess {\n    \
    \    if-feature collector;\n        key name;\n        description \"Collecting\
    \ Process of the Monitoring Device.\";\n        leaf name {\n          type nameType;\n\
    \          description \"Key of this list.\";\n        }\n        uses collectingProcessParameters;\n\
    \        leaf-list exportingProcess {\n          if-feature exporter;\n      \
    \    type leafref { path \"/ipfix/exportingProcess/name\"; }\n          description\
    \ \"Export of received records without any\n            modifications.  Records\
    \ are processed by all Exporting\n            Processes in the list.\";\n    \
    \    }\n      }\n      list observationPoint {\n        if-feature meter;\n  \
    \      key name;\n        description \"Observation Point of the Monitoring Device.\"\
    ;\n        leaf name {\n          type nameType;\n          description \"Key\
    \ of this list.\";\n        }\n        uses observationPointParameters;\n    \
    \    leaf-list selectionProcess {\n          type leafref { path \"/ipfix/selectionProcess/name\"\
    ; }\n          description \"Selection Processes in this list process\n      \
    \      packets in parallel.\";\n        }\n      }\n      list selectionProcess\
    \ {\n        if-feature meter;\n        key name;\n        description \"Selection\
    \ Process of the Monitoring Device.\";\n        leaf name {\n          type nameType;\n\
    \          description \"Key of this list.\";\n        }\n        list selector\
    \ {\n          key name;\n          min-elements 1;\n          ordered-by user;\n\
    \          description \"List of Selectors that define the action of the\n   \
    \         Selection Process on a single packet.  The Selectors are\n         \
    \   serially invoked in the same order as they appear in this\n            list.\"\
    ;\n          leaf name {\n            type nameType;\n            description\
    \ \"Key of this list.\";\n          }\n          uses selectorParameters;\n  \
    \      }\n        list selectionSequence {\n          config false;\n        \
    \  description \"This list contains the Selection Sequence IDs\n            that\
    \ are assigned by the Monitoring Device to distinguish\n            different\
    \ Selection Sequences passing through the\n            Selection Process.\n  \
    \          As Selection Sequence IDs are unique per Observation\n            Domain,\
    \ the corresponding Observation Domain IDs are\n            included as well.\n\
    \            With this information, it is possible to associate\n            Selection\
    \ Sequence (Statistics) Report Interpretations\n            exported according\
    \ to the PSAMP protocol with a Selection\n            Process in the configuration\
    \ data.\";\n          reference \"RFC 5476.\";\n          leaf observationDomainId\
    \ {\n            type uint32;\n            description \"Observation Domain ID\
    \ for which the\n              Selection Sequence ID is assigned.\";\n       \
    \   }\n          leaf selectionSequenceId {\n            type uint64;\n      \
    \      description \"Selection Sequence ID used in the Selection\n           \
    \   Sequence (Statistics) Report Interpretation.\";\n          }\n        }\n\
    \        leaf cache {\n          type leafref { path \"/ipfix/cache/name\"; }\n\
    \          description \"Cache that receives the output of the\n            Selection\
    \ Process.\";\n        }\n      }\n      list cache {\n        if-feature meter;\n\
    \        key name;\n        description \"Cache of the Monitoring Device.\";\n\
    \        leaf name {\n          type nameType;\n          description \"Key of\
    \ this list.\";\n        }\n        leaf meteringProcessId {\n          type uint32;\n\
    \          config false;\n          description \"The identifier of the Metering\
    \ Process this\n            Cache belongs to.\n            This parameter corresponds\
    \ to the Information Element\n            meteringProcessId.  Its occurrence helps\
    \ to associate\n            Cache parameters with Metering Process statistics\n\
    \            exported by the Monitoring Device using the Metering\n          \
    \  Process (Reliability) Statistics Template as\n            defined by the IPFIX\
    \ protocol specification.\";\n          reference \"RFC 5101, Sections 4.1 and\
    \ 4.2;\n            IANA registry for IPFIX Entities,\n            http://www.iana.org/assignments/ipfix.\"\
    ;\n        }\n        leaf dataRecords {\n          type yang:counter64;\n   \
    \       units \"Data Records\";\n          config false;\n          description\
    \ \"The number of Data Records generated by this\n            Cache.\n       \
    \     Discontinuities in the value of this counter can occur at\n            re-initialization\
    \ of the management system, and at other\n            times as indicated by the\
    \ value of\n            cacheDiscontinuityTime.\n            Note that this parameter\
    \ corresponds to\n            ipfixMeteringProcessDataRecords in the IPFIX MIB\n\
    \            module.\";\n          reference \"RFC 6615, Section 8\n         \
    \   (ipfixMeteringProcessDataRecords).\";\n        }\n        leaf cacheDiscontinuityTime\
    \ {\n          type yang:date-and-time;\n          config false;\n          description\
    \ \"Timestamp of the most recent occasion at which\n            the counter dataRecords\
    \ suffered a discontinuity.\n            Note that this parameter functionally\
    \ corresponds to\n            ipfixMeteringProcessDiscontinuityTime in the IPFIX\
    \ MIB\n            module.  In contrast to\n            ipfixMeteringProcessDiscontinuityTime,\
    \ the time is\n            absolute and not relative to sysUpTime.\";\n      \
    \    reference \"RFC 6615, Section 8\n            (ipfixMeteringProcessDiscontinuityTime).\"\
    ;\n        }\n        choice CacheType {\n          mandatory true;\n        \
    \  description \"Type of Cache and specific parameters.\";\n          container\
    \ immediateCache {\n            if-feature immediateCache;\n            description\
    \ \"Flow expiration after the first packet;\n              generation of Packet\
    \ Records.\";\n            uses cacheLayoutParameters;\n          }\n        \
    \  container timeoutCache {\n            if-feature timeoutCache;\n          \
    \  description \"Flow expiration after active and idle\n              timeout;\
    \ generation of Flow Records.\";\n            uses flowCacheParameters;\n    \
    \        uses cacheLayoutParameters;\n          }\n          container naturalCache\
    \ {\n            if-feature naturalCache;\n            description \"Flow expiration\
    \ after active and idle\n              timeout, or on natural termination (e.g.,\
    \ TCP FIN or\n              TCP RST) of the Flow; generation of Flow Records.\"\
    ;\n            uses flowCacheParameters;\n            uses cacheLayoutParameters;\n\
    \          }\n          container permanentCache {\n            if-feature permanentCache;\n\
    \            description \"No flow expiration, periodical export with\n      \
    \        time interval exportInterval; generation of Flow\n              Records.\"\
    ;\n            uses flowCacheParameters;\n            uses cacheLayoutParameters;\n\
    \          }\n        }\n        leaf-list exportingProcess {\n          if-feature\
    \ exporter;\n          type leafref { path \"/ipfix/exportingProcess/name\"; }\n\
    \          description \"Records are exported by all Exporting Processes\n   \
    \         in the list.\";\n        }\n      }\n      list exportingProcess {\n\
    \        if-feature exporter;\n        key name;\n        description \"Exporting\
    \ Process of the Monitoring Device.\";\n        leaf name {\n          type nameType;\n\
    \          description \"Key of this list.\";\n        }\n        uses exportingProcessParameters;\n\
    \      }\n    }\n  }\n  <CODE ENDS>\n"
- title: 7.  Examples
  contents:
  - "7.  Examples\n   This section shows example configurations conforming to the\
    \ YANG\n   module specified in Section 6.\n"
- title: 7.1.  PSAMP Device
  contents:
  - "7.1.  PSAMP Device\n   This configuration example configures two Observation\
    \ Points\n   capturing ingress traffic at eth0 and all traffic at eth1.  Both\n\
    \   Observed Packet Streams enter two different Selection Processes.  The\n  \
    \ first Selection Process implements a Composite Selector of a filter\n   for\
    \ UDP packets and a random sampler.  The second Selection Process\n   implements\
    \ a Primitive Selector of an ICMP filter.  The Selected\n   Packet Streams of\
    \ both Selection Processes enter the same Cache.  The\n   Cache generates a PSAMP\
    \ Packet Report for every selected packet.\n   The associated Exporting Process\
    \ exports to a Collector using PR-SCTP\n   and DTLS.  The TLS/DTLS parameters\
    \ specify that the collector must\n   supply a certificate for the FQDN collector.example.net.\
    \  Valid\n   certificates from any certification authority will be accepted. \
    \ As\n   the destination transport port is omitted, the standard IPFIX-over-\n\
    \   DTLS port 4740 is used.\n   The parameters of the Selection Processes are\
    \ reported as Selection\n   Sequence Report Interpretations and Selector Report\
    \ Interpretations\n   [RFC5476].  There will be two Selection Sequence Report\n\
    \   Interpretations per Selection Process, one for each Observation\n   Point.\
    \  Selection Sequence Statistics Report Interpretations are\n   exported every\
    \ 30 seconds (30000 milliseconds).\n   <ipfix xmlns=\"urn:ietf:params:xml:ns:yang:ietf-ipfix-psamp\"\
    >\n     <observationPoint>\n       <name>OP at eth0 (ingress)</name>\n       <observationDomainId>123</observationDomainId>\n\
    \       <ifName>eth0</ifName>\n       <direction>ingress</direction>\n       <selectionProcess>Sampled\
    \ UDP packets</selectionProcess>\n       <selectionProcess>ICMP packets</selectionProcess>\n\
    \     </observationPoint>\n     <observationPoint>\n       <name>OP at eth1</name>\n\
    \       <observationDomainId>123</observationDomainId>\n       <ifName>eth1</ifName>\n\
    \       <selectionProcess>Sampled UDP packets</selectionProcess>\n       <selectionProcess>ICMP\
    \ packets</selectionProcess>\n     </observationPoint>\n     <selectionProcess>\n\
    \       <name>Sampled UDP packets</name>\n       <selector>\n         <name>UDP\
    \ filter</name>\n         <filterMatch>\n           <ieId>4</ieId>\n         \
    \  <value>17</value>\n         </filterMatch>\n       </selector>\n       <selector>\n\
    \         <name>10-out-of-100 sampler</name>\n         <sampRandOutOfN>\n    \
    \       <size>10</size>\n           <population>100</population>\n         </sampRandOutOfN>\n\
    \       </selector>\n       <cache>PSAMP cache</cache>\n     </selectionProcess>\n\
    \     <selectionProcess>\n       <name>ICMP packets</name>\n       <selector>\n\
    \         <name>ICMP filter</name>\n         <filterMatch>\n           <ieId>4</ieId>\n\
    \           <value>1</value>\n         </filterMatch>\n       </selector>\n  \
    \     <cache>PSAMP cache</cache>\n     </selectionProcess>\n     <cache>\n   \
    \    <name>PSAMP cache</name>\n       <immediateCache>\n         <cacheLayout>\n\
    \           <cacheField>\n             <name>Field 1: ipHeaderPacketSection</name>\n\
    \             <ieId>313</ieId>\n             <ieLength>64</ieLength>\n       \
    \    </cacheField>\n           <cacheField>\n             <name>Field 2: observationTimeMilliseconds</name>\n\
    \             <ieId>322</ieId>\n           </cacheField>\n         </cacheLayout>\n\
    \       </immediateCache>\n       <exportingProcess>The only exporter</exportingProcess>\n\
    \     </cache>\n     <exportingProcess>\n       <name>The only exporter</name>\n\
    \       <destination>\n         <name>PR-SCTP collector</name>\n         <sctpExporter>\n\
    \           <destinationIPAddress>192.0.2.1</destinationIPAddress>\n         \
    \  <rateLimit>1000000</rateLimit>\n           <timedReliability>500</timedReliability>\n\
    \           <transportLayerSecurity>\n             <remoteSubjectFQDN>coll-1.example.net</remoteSubjectFQDN>\n\
    \           </transportLayerSecurity>\n         </sctpExporter>\n       </destination>\n\
    \       <options>\n         <name>Options 1</name>\n         <optionsType>selectionSequence</optionsType>\n\
    \         <optionsTimeout>0</optionsTimeout>\n       </options>\n       <options>\n\
    \         <name>Options 2</name>\n         <optionsType>selectionStatistics</optionsType>\n\
    \         <optionsTimeout>30000</optionsTimeout>\n       </options>\n     </exportingProcess>\n\
    \   </ipfix>\n   The above configuration results in one Template and six Options\n\
    \   Templates.  For the remainder of the example, we assume Template ID\n   256\
    \ for the Template and Template IDs 257 to 262 for the Options\n   Templates.\
    \  The Template is used to export the Packet Reports and has\n   the following\
    \ fields:\n      Template ID: 256\n      ipHeaderPacketSection (elementId = 313,\
    \ length = 64)\n      observationTimeMilliseconds (elementId = 322, length = 8)\n\
    \   Two Options Templates are used for the Selection Sequence Report\n   Interpretations.\
    \  The first one has one selectorId field and is used\n   for the Selection Process\
    \ \"ICMP packets\".  The second one has two\n   selectorId fields to describe\
    \ the two selectors of the Selection\n   Process \"Sampled UDP packets\".\n  \
    \    Template ID: 257\n      Scope: selectionSequenceId (elementId = 301, length\
    \ = 8)\n      observationPointId (elementId = 138, length = 4)\n      selectorId\
    \ (elementId = 302, length = 4)\n      Template ID: 258\n      Scope: selectionSequenceId\
    \ (elementId = 301, length = 8)\n      observationPointId (elementId = 138, length\
    \ = 4)\n      selectorId (elementId = 302, length = 4)\n      selectorId (elementId\
    \ = 302, length = 4)\n   Another Options Template is used to carry the Property\
    \ Match\n   Filtering Selector Report Interpretation for the Selectors \"UDP\n\
    \   filter\" and \"ICMP filter\":\n      Template ID: 259\n      Scope: selectorId\
    \ (elementId = 302, length = 4)\n      selectorAlgorithm (elementId = 304, length\
    \ = 2)\n      protocolIdentifier (elementId = 4, length = 1)\n   Yet another Options\
    \ Template is used to carry the Random n-out-of-N\n   Sampling Selector Report\
    \ Interpretation for the Selector \"10-out-of-\n   100 sampler\":\n      Template\
    \ ID: 260\n      Scope: selectorId (elementId = 302, length = 4)\n      selectorAlgorithm\
    \ (elementId = 304, length = 2)\n      samplingSize (elementId = 319, length =\
    \ 4)\n      samplingPopulation (elementId = 310, length = 4)\n   The last two\
    \ Options Template are used to carry the Selection\n   Sequence Statistics Report\
    \ Interpretation for the Selection\n   Processes, containing the statistics for\
    \ one and two Selectors,\n   respectively:\n      Template ID: 261\n      Scope:\
    \ selectionSequenceId (elementId = 301, length = 8)\n      selectorIdTotalPktsObserved\
    \ (elementId = 318, length = 8)\n      selectorIdTotalPktsSelected (elementId\
    \ = 319, length = 8)\n      Template ID: 262\n      Scope: selectionSequenceId\
    \ (elementId = 301, length = 8)\n      selectorIdTotalPktsObserved (elementId\
    \ = 318, length = 8)\n      selectorIdTotalPktsSelected (elementId = 319, length\
    \ = 8)\n      selectorIdTotalPktsObserved (elementId = 318, length = 8)\n    \
    \  selectorIdTotalPktsSelected (elementId = 319, length = 8)\n   After a short\
    \ runtime, 100 packets have been observed at the two\n   Observation Points, including\
    \ 20 UDP and 5 ICMP packets. 3 of the UDP\n   packets are selected by the random\
    \ sampler, which results in a total\n   of 8 Packet Reports generated by the Cache.\
    \  Under these\n   circumstances, the complete configuration and state data of\
    \ the PSAMP\n   Device may look as follows:\n   <ipfix xmlns=\"urn:ietf:params:xml:ns:yang:ietf-ipfix-psamp\"\
    >\n     <observationPoint>\n       <name>OP at eth0 (ingress)</name>\n       <observationPointId>1</observationPointId>\n\
    \       <observationDomainId>123</observationDomainId>\n       <ifName>eth0</ifName>\n\
    \       <direction>ingress</direction>\n       <selectionProcess>Sampled UDP packets</selectionProcess>\n\
    \       <selectionProcess>ICMP packets</selectionProcess>\n     </observationPoint>\n\
    \     <observationPoint>\n       <name>OP at eth1</name>\n       <observationPointId>2</observationPointId>\n\
    \       <observationDomainId>123</observationDomainId>\n       <ifName>eth1</ifName>\n\
    \       <direction>both</direction>\n       <selectionProcess>Sampled UDP packets</selectionProcess>\n\
    \       <selectionProcess>ICMP packets</selectionProcess>\n     </observationPoint>\n\
    \     <selectionProcess>\n       <name>Sampled UDP packets</name>\n       <selector>\n\
    \         <name>UDP filter</name>\n         <filterMatch>\n           <ieId>4</ieId>\n\
    \           <value>17</value>\n         </filterMatch>\n         <packetsObserved>100</packetsObserved>\n\
    \         <packetsDropped>80</packetsDropped>\n         <selectorDiscontinuityTime>2010-03-15T00:00:00.00Z\n\
    \             </selectorDiscontinuityTime>\n       </selector>\n       <selector>\n\
    \         <name>10-out-of-100 sampler</name>\n         <sampRandOutOfN>\n    \
    \       <size>10</size>\n           <population>100</population>\n         </sampRandOutOfN>\n\
    \         <packetsObserved>20</packetsObserved>\n         <packetsDropped>17</packetsDropped>\n\
    \         <selectorDiscontinuityTime>2010-03-15T00:00:00.00Z\n             </selectorDiscontinuityTime>\n\
    \       </selector>\n       <selectionSequence>\n           <observationDomainId>123</observationDomainId>\n\
    \           <selectionSequenceId>1</selectionSequenceId>\n       </selectionSequence>\n\
    \       <selectionSequence>\n           <observationDomainId>123</observationDomainId>\n\
    \           <selectionSequenceId>2</selectionSequenceId>\n       </selectionSequence>\n\
    \       <cache>PSAMP cache</cache>\n     </selectionProcess>\n     <selectionProcess>\n\
    \       <name>ICMP packets</name>\n       <selector>\n         <name>ICMP filter</name>\n\
    \         <filterMatch>\n           <ieId>4</ieId>\n           <value>1</value>\n\
    \         </filterMatch>\n         <packetsObserved>100</packetsObserved>\n  \
    \       <packetsDropped>95</packetsDropped>\n         <selectorDiscontinuityTime>2010-03-15T00:00:00.00Z\n\
    \             </selectorDiscontinuityTime>\n       </selector>\n       <selectionSequence>\n\
    \           <observationDomainId>123</observationDomainId>\n           <selectionSequenceId>3</selectionSequenceId>\n\
    \       </selectionSequence>\n       <selectionSequence>\n           <observationDomainId>123</observationDomainId>\n\
    \           <selectionSequenceId>4</selectionSequenceId>\n       </selectionSequence>\n\
    \       <cache>PSAMP cache</cache>\n     </selectionProcess>\n     <cache>\n \
    \      <name>PSAMP cache</name>\n       <meteringProcessId>1</meteringProcessId>\n\
    \       <immediateCache>\n         <cacheLayout>\n           <cacheField>\n  \
    \           <name>Field 1: ipHeaderPacketSection</name>\n             <ieId>313</ieId>\n\
    \             <ieLength>64</ieLength>\n           </cacheField>\n           <cacheField>\n\
    \             <name>Field 2: observationTimeMilliseconds</name>\n            \
    \ <ieId>322</ieId>\n           </cacheField>\n         </cacheLayout>\n      \
    \ </immediateCache>\n       <dataRecords>8</dataRecords>\n       <cacheDiscontinuityTime>2010-03-15T00:00:00.00Z\n\
    \           </cacheDiscontinuityTime>\n       <exportingProcess>The only exporter</exportingProcess>\n\
    \     </cache>\n     <exportingProcess>\n       <name>The only exporter</name>\n\
    \       <exportingProcessId>1</exportingProcessId>\n       <exportMode>parallel</exportMode>\n\
    \       <destination>\n         <name>PR-SCTP collector</name>\n         <sctpExporter>\n\
    \           <ipfixVersion>10</ipfixVersion>\n           <destinationIPAddress>192.0.2.1</destinationIPAddress>\n\
    \           <destinationPort>4740</destinationPort>\n           <sendBufferSize>32768</sendBufferSize>\n\
    \           <rateLimit>1000000</rateLimit>\n           <timedReliability>500</timedReliability>\n\
    \           <transportLayerSecurity>\n             <remoteSubjectFQDN>coll-1.example.net</remoteSubjectFQDN>\n\
    \           </transportLayerSecurity>\n           <transportSession>\n       \
    \      <ipfixVersion>10</ipfixVersion>\n             <sourceAddress>192.0.2.100</sourceAddress>\n\
    \             <destinationAddress>192.0.2.1</destinationAddress>\n           \
    \  <sourcePort>45687</sourcePort>\n             <destinationPort>4740</destinationPort>\n\
    \             <sctpAssocId>1</sctpAssocId>\n             <status>active</status>\n\
    \             <rate>230</rate>\n             <bytes>978</bytes>\n            \
    \ <messages>3</messages>\n             <records>19</records>\n             <templates>1</templates>\n\
    \             <optionsTemplates>6</optionsTemplates>\n             <transportSessionStartTime>2010-03-15T00:00:00.50Z\n\
    \                 </transportSessionStartTime>\n             <template>\n    \
    \           <observationDomainId>123</observationDomainId>\n               <templateId>256</templateId>\n\
    \               <setId>2</setId>\n               <accessTime>2010-03-15T00:00:02.15Z</accessTime>\n\
    \               <templateDataRecords>8</templateDataRecords>\n               <templateDiscontinuityTime>2010-03-15T00:00:01.10Z\n\
    \                   </templateDiscontinuityTime>\n               <field>\n   \
    \              <ieId>313</ieId>\n                 <ieLength>64</ieLength>\n  \
    \               <ieEnterpriseNumber>0</ieEnterpriseNumber>\n               </field>\n\
    \               <field>\n                 <ieId>154</ieId>\n                 <ieLength>4</ieLength>\n\
    \                 <ieEnterpriseNumber>0</ieEnterpriseNumber>\n               </field>\n\
    \             </template>\n             <template>\n               <observationDomainId>123</observationDomainId>\n\
    \               <templateId>257</templateId>\n               <setId>3</setId>\n\
    \               <accessTime>2010-03-15T00:00:02.15Z</accessTime>\n           \
    \    <templateDataRecords>2</templateDataRecords>\n               <templateDiscontinuityTime>2010-03-15T00:00:01.10Z\n\
    \                   </templateDiscontinuityTime>\n               <field>\n   \
    \              <ieId>301</ieId>\n                 <ieLength>8</ieLength>\n   \
    \              <ieEnterpriseNumber>0</ieEnterpriseNumber>\n                 <isScope/>\n\
    \               </field>\n               <field>\n                 <ieId>138</ieId>\n\
    \                 <ieLength>4</ieLength>\n                 <ieEnterpriseNumber>0</ieEnterpriseNumber>\n\
    \               </field>\n               <field>\n                 <ieId>302</ieId>\n\
    \                 <ieLength>4</ieLength>\n                 <ieEnterpriseNumber>0</ieEnterpriseNumber>\n\
    \               </field>\n             </template>\n             <template>\n\
    \               <observationDomainId>123</observationDomainId>\n             \
    \  <templateId>258</templateId>\n               <setId>3</setId>\n           \
    \    <accessTime>2010-03-15T00:00:02.15Z</accessTime>\n               <templateDataRecords>2</templateDataRecords>\n\
    \               <templateDiscontinuityTime>2010-03-15T00:00:01.10Z\n         \
    \          </templateDiscontinuityTime>\n               <field>\n            \
    \     <ieId>301</ieId>\n                 <ieLength>8</ieLength>\n            \
    \     <ieEnterpriseNumber>0</ieEnterpriseNumber>\n                 <isScope/>\n\
    \               </field>\n               <field>\n                 <ieId>138</ieId>\n\
    \                 <ieLength>4</ieLength>\n                 <ieEnterpriseNumber>0</ieEnterpriseNumber>\n\
    \               </field>\n               <field>\n                 <ieId>302</ieId>\n\
    \                 <ieLength>4</ieLength>\n                 <ieEnterpriseNumber>0</ieEnterpriseNumber>\n\
    \               </field>\n               <field>\n                 <ieId>302</ieId>\n\
    \                 <ieLength>4</ieLength>\n                 <ieEnterpriseNumber>0</ieEnterpriseNumber>\n\
    \               </field>\n             </template>\n             <template>\n\
    \               <observationDomainId>123</observationDomainId>\n             \
    \  <templateId>259</templateId>\n               <setId>3</setId>\n           \
    \    <accessTime>2010-03-15T00:00:02.15Z</accessTime>\n               <templateDataRecords>2</templateDataRecords>\n\
    \               <templateDiscontinuityTime>2010-03-15T00:00:01.10Z\n         \
    \          </templateDiscontinuityTime>\n               <field>\n            \
    \     <ieId>302</ieId>\n                 <ieLength>4</ieLength>\n            \
    \     <ieEnterpriseNumber>0</ieEnterpriseNumber>\n                 <isScope/>\n\
    \               </field>\n               <field>\n                 <ieId>304</ieId>\n\
    \                 <ieLength>2</ieLength>\n                 <ieEnterpriseNumber>0</ieEnterpriseNumber>\n\
    \               </field>\n               <field>\n                 <ieId>4</ieId>\n\
    \                 <ieLength>1</ieLength>\n                 <ieEnterpriseNumber>0</ieEnterpriseNumber>\n\
    \               </field>\n             </template>\n             <template>\n\
    \               <observationDomainId>123</observationDomainId>\n             \
    \  <templateId>260</templateId>\n               <setId>3</setId>\n           \
    \    <accessTime>2010-03-15T00:00:02.15Z</accessTime>\n               <templateDataRecords>1</templateDataRecords>\n\
    \               <templateDiscontinuityTime>2010-03-15T00:00:01.10Z\n         \
    \          </templateDiscontinuityTime>\n               <field>\n            \
    \     <ieId>302</ieId>\n                 <ieLength>4</ieLength>\n            \
    \     <ieEnterpriseNumber>0</ieEnterpriseNumber>\n                 <isScope/>\n\
    \               </field>\n               <field>\n                 <ieId>304</ieId>\n\
    \                 <ieLength>2</ieLength>\n                 <ieEnterpriseNumber>0</ieEnterpriseNumber>\n\
    \               </field>\n               <field>\n                 <ieId>309</ieId>\n\
    \                 <ieLength>4</ieLength>\n                 <ieEnterpriseNumber>0</ieEnterpriseNumber>\n\
    \               </field>\n               <field>\n                 <ieId>310</ieId>\n\
    \                 <ieLength>4</ieLength>\n                 <ieEnterpriseNumber>0</ieEnterpriseNumber>\n\
    \               </field>\n             </template>\n             <template>\n\
    \               <observationDomainId>123</observationDomainId>\n             \
    \  <templateId>261</templateId>\n               <setId>3</setId>\n           \
    \    <accessTime>2010-03-15T00:00:03.10Z</accessTime>\n               <templateDataRecords>2</templateDataRecords>\n\
    \               <templateDiscontinuityTime>2010-03-15T00:00:01.10Z\n         \
    \          </templateDiscontinuityTime>\n               <field>\n            \
    \     <ieId>301</ieId>\n                 <ieLength>8</ieLength>\n            \
    \     <ieEnterpriseNumber>0</ieEnterpriseNumber>\n                 <isScope/>\n\
    \               </field>\n               <field>\n                 <ieId>318</ieId>\n\
    \                 <ieLength>8</ieLength>\n                 <ieEnterpriseNumber>0</ieEnterpriseNumber>\n\
    \               </field>\n               <field>\n                 <ieId>319</ieId>\n\
    \                 <ieLength>8</ieLength>\n                 <ieEnterpriseNumber>0</ieEnterpriseNumber>\n\
    \               </field>\n             </template>\n             <template>\n\
    \               <observationDomainId>123</observationDomainId>\n             \
    \  <templateId>262</templateId>\n               <setId>3</setId>\n           \
    \    <accessTime>2010-03-15T00:00:03.10Z</accessTime>\n               <templateDataRecords>2</templateDataRecords>\n\
    \               <templateDiscontinuityTime>2010-03-15T00:00:01.10Z\n         \
    \          </templateDiscontinuityTime>\n               <field>\n            \
    \     <ieId>301</ieId>\n                 <ieLength>8</ieLength>\n            \
    \     <ieEnterpriseNumber>0</ieEnterpriseNumber>\n                 <isScope/>\n\
    \               </field>\n               <field>\n                 <ieId>318</ieId>\n\
    \                 <ieLength>8</ieLength>\n                 <ieEnterpriseNumber>0</ieEnterpriseNumber>\n\
    \               </field>\n               <field>\n                 <ieId>319</ieId>\n\
    \                 <ieLength>8</ieLength>\n                 <ieEnterpriseNumber>0</ieEnterpriseNumber>\n\
    \               </field>\n               <field>\n                 <ieId>318</ieId>\n\
    \                 <ieLength>8</ieLength>\n                 <ieEnterpriseNumber>0</ieEnterpriseNumber>\n\
    \               </field>\n               <field>\n                 <ieId>319</ieId>\n\
    \                 <ieLength>8</ieLength>\n                 <ieEnterpriseNumber>0</ieEnterpriseNumber>\n\
    \               </field>\n             </template>\n           </transportSession>\n\
    \         </sctpExporter>\n       </destination>\n       <options>\n         <name>Options\
    \ 1</name>\n         <optionsType>selectionSequence</optionsType>\n         <optionsTimeout>0</optionsTimeout>\n\
    \       </options>\n       <options>\n         <name>Options 2</name>\n      \
    \   <optionsType>selectionStatistics</optionsType>\n         <optionsTimeout>30000</optionsTimeout>\n\
    \       </options>\n     </exportingProcess>\n   </ipfix>\n"
- title: 7.2.  IPFIX Device
  contents:
  - "7.2.  IPFIX Device\n   This configuration example demonstrates the shared usage\
    \ of a Cache\n   for maintaining Flow Records from two Observation Points belonging\
    \ to\n   different Observation Domains.  Packets are selected using different\n\
    \   Sampling techniques: count-based Sampling for the first Observation\n   Point\
    \ (eth0) and selection of all packets for the second Observation\n   Point (eth1).\
    \  The Exporting Process sends the Flow Records to a\n   primary destination using\
    \ SCTP.  A UDP Collector is specified as\n   secondary destination.\n   Exporting\
    \ Process reliability statistics [RFC5101] are exported\n   periodically every\
    \ minute (60000 milliseconds).  Selection Sequence\n   Report Interpretations\
    \ and Selector Report Interpretations [RFC5476]\n   are exported once after configuring\
    \ the Selection Processes.  In\n   total, two Selection Sequence Report Interpretations\
    \ will be\n   exported, one for each Selection Process.\n   <ipfix xmlns=\"urn:ietf:params:xml:ns:yang:ietf-ipfix-psamp\"\
    >\n     <observationPoint>\n       <name>OP at eth0 (ingress)</name>\n       <observationDomainId>123</observationDomainId>\n\
    \       <ifName>eth0</ifName>\n       <direction>ingress</direction>\n       <selectionProcess>Count-based\
    \ packet selection</selectionProcess>\n     </observationPoint>\n     <observationPoint>\n\
    \       <name>OP at eth1</name>\n       <observationDomainId>456</observationDomainId>\n\
    \       <ifName>eth1</ifName>\n       <selectionProcess>All packet selection</selectionProcess>\n\
    \     </observationPoint>\n     <selectionProcess>\n       <name>Count-based packet\
    \ selection</name>\n       <selector>\n         <name>Count-based sampler</name>\n\
    \         <sampCountBased>\n           <packetInterval>1</packetInterval>\n  \
    \         <packetSpace>99</packetSpace>\n         </sampCountBased>\n       </selector>\n\
    \       <cache>Flow cache</cache>\n     </selectionProcess>\n     <selectionProcess>\n\
    \       <name>All packet selection</name>\n       <selector>\n         <name>Select\
    \ all</name>\n         <selectAll/>\n       </selector>\n       <cache>Flow cache</cache>\n\
    \     </selectionProcess>\n     <cache>\n       <name>Flow cache</name>\n    \
    \   <timeoutCache>\n         <maxFlows>4096</maxFlows>\n         <activeTimeout>5000</activeTimeout>\n\
    \         <idleTimeout>10000</idleTimeout>\n         <cacheLayout>\n         \
    \  <cacheField>\n             <name>Field 1</name>\n             <ieName>sourceIPv4Address</ieName>\n\
    \             <isFlowKey/>\n           </cacheField>\n           <cacheField>\n\
    \             <name>Field 2</name>\n             <ieName>destinationIPv4Address</ieName>\n\
    \             <isFlowKey/>\n           </cacheField>\n           <cacheField>\n\
    \             <name>Field 3</name>\n             <ieName>protocolIdentifier</ieName>\n\
    \             <isFlowKey/>\n           </cacheField>\n           <cacheField>\n\
    \             <name>Field 4</name>\n             <ieName>sourceTransportPort</ieName>\n\
    \             <isFlowKey/>\n           </cacheField>\n           <cacheField>\n\
    \             <name>Field 5</name>\n             <ieName>destinationTransportPort</ieName>\n\
    \             <isFlowKey/>\n           </cacheField>\n           <cacheField>\n\
    \             <name>Field 6</name>\n             <ieName>flowStartMilliseconds</ieName>\n\
    \           </cacheField>\n           <cacheField>\n             <name>Field 7</name>\n\
    \             <ieName>flowEndSeconds</ieName>\n           </cacheField>\n    \
    \       <cacheField>\n             <name>Field 8</name>\n             <ieName>octetDeltaCount</ieName>\n\
    \           </cacheField>\n           <cacheField>\n             <name>Field 9</name>\n\
    \             <ieName>packetDeltaCount</ieName>\n           </cacheField>\n  \
    \       </cacheLayout>\n       </timeoutCache>\n       <exportingProcess>SCTP\
    \ export with UDP backup</exportingProcess>\n     </cache>\n     <exportingProcess>\n\
    \       <name>SCTP export with UDP backup</name>\n       <exportMode>fallback</exportMode>\n\
    \       <destination>\n         <name>SCTP destination (primary)</name>\n    \
    \     <sctpExporter>\n           <destinationPort>4739</destinationPort>\n   \
    \        <destinationIPAddress>192.0.2.1</destinationIPAddress>\n         </sctpExporter>\n\
    \       </destination>\n       <destination>\n         <name>UDP destination (secondary)</name>\n\
    \         <udpExporter>\n           <destinationPort>4739</destinationPort>\n\
    \           <destinationIPAddress>192.0.2.2</destinationIPAddress>\n         \
    \  <templateRefreshTimeout>300</templateRefreshTimeout>\n           <optionsTemplateRefreshTimeout>300\n\
    \               </optionsTemplateRefreshTimeout>\n         </udpExporter>\n  \
    \     </destination>\n       <options>\n         <name>Options 1</name>\n    \
    \     <optionsType>selectionSequence</optionsType>\n         <optionsTimeout>0</optionsTimeout>\n\
    \       </options>\n       <options>\n         <name>Options 2</name>\n      \
    \   <optionsType>exportingReliability</optionsType>\n         <optionsTimeout>60000</optionsTimeout>\n\
    \       </options>\n     </exportingProcess>\n   </ipfix>\n"
- title: 7.3.  Export of Flow Records and Packet Reports
  contents:
  - "7.3.  Export of Flow Records and Packet Reports\n   This configuration example\
    \ demonstrates the combined export of Flow\n   Records and Packet Reports for\
    \ a single Observation Point.  One\n   Selection Process applies random Sampling\
    \ to the Observed Packet\n   Stream.  Its output is passed to a Cache generating\
    \ Flow Records.  In\n   parallel, the Observed Packet Stream enters a second Selection\n\
    \   Process that discards all non-ICMP packets and passes the selected\n   packets\
    \ to a second Cache for generating Packet Reports.  The output\n   of both Caches\
    \ is exported to a single Collector using SCTP.\n   <ipfix xmlns=\"urn:ietf:params:xml:ns:yang:ietf-ipfix-psamp\"\
    >\n     <observationPoint>\n       <name>OP at linecard 3</name>\n       <observationDomainId>9876</observationDomainId>\n\
    \       <ifIndex>4</ifIndex>\n       <direction>ingress</direction>\n       <selectionProcess>Sampling</selectionProcess>\n\
    \       <selectionProcess>ICMP</selectionProcess>\n     </observationPoint>\n\
    \     <selectionProcess>\n       <name>Sampling</name>\n       <selector>\n  \
    \       <name>Random sampler</name>\n         <sampUniProb>\n           <probability>0.01</probability>\n\
    \         </sampUniProb>\n       </selector>\n       <cache>Flow cache</cache>\n\
    \     </selectionProcess>\n     <selectionProcess>\n       <name>ICMP</name>\n\
    \       <selector>\n         <name>ICMP filter</name>\n         <filterMatch>\n\
    \           <ieId>4</ieId>\n           <value>1</value>\n         </filterMatch>\n\
    \       </selector>\n       <cache>Packet reporting</cache>\n     </selectionProcess>\n\
    \     <cache>\n       <name>Flow cache</name>\n       <timeoutCache>\n       \
    \  <maxFlows>4096</maxFlows>\n         <activeTimeout>5</activeTimeout>\n    \
    \     <idleTimeout>10</idleTimeout>\n         <cacheLayout>\n           <cacheField>\n\
    \             <name>Field 1</name>\n             <ieName>sourceIPv4Address</ieName>\n\
    \             <isFlowKey/>\n           </cacheField>\n           <cacheField>\n\
    \             <name>Field 2</name>\n             <ieName>destinationIPv4Address</ieName>\n\
    \             <isFlowKey/>\n           </cacheField>\n           <cacheField>\n\
    \             <name>Field 6</name>\n             <ieName>flowStartMilliseconds</ieName>\n\
    \           </cacheField>\n           <cacheField>\n             <name>Field 7</name>\n\
    \             <ieName>flowEndSeconds</ieName>\n           </cacheField>\n    \
    \       <cacheField>\n             <name>Field 8</name>\n             <ieName>octetDeltaCount</ieName>\n\
    \           </cacheField>\n           <cacheField>\n             <name>Field 9</name>\n\
    \             <ieName>packetDeltaCount</ieName>\n           </cacheField>\n  \
    \       </cacheLayout>\n       </timeoutCache>\n       <exportingProcess>Export</exportingProcess>\n\
    \     </cache>\n     <cache>\n       <name>Packet reporting</name>\n       <immediateCache>\n\
    \         <cacheLayout>\n           <cacheField>\n             <name>Field 1</name>\n\
    \             <ieId>313</ieId>\n             <ieLength>64</ieLength>\n       \
    \    </cacheField>\n           <cacheField>\n             <name>Field 2</name>\n\
    \             <ieId>154</ieId>\n           </cacheField>\n         </cacheLayout>\n\
    \       </immediateCache>\n       <exportingProcess>Export</exportingProcess>\n\
    \     </cache>\n     <exportingProcess>\n       <name>Export</name>\n       <destination>\n\
    \         <name>SCTP collector</name>\n         <sctpExporter>\n           <destinationIPAddress>192.0.2.1</destinationIPAddress>\n\
    \           <timedReliability>0</timedReliability>\n         </sctpExporter>\n\
    \       </destination>\n       <options>\n         <name>Options 1</name>\n  \
    \       <optionsType>selectionSequence</optionsType>\n         <optionsTimeout>0</optionsTimeout>\n\
    \       </options>\n     </exportingProcess>\n   </ipfix>\n"
- title: 7.4.  Collector and File Writer
  contents:
  - "7.4.  Collector and File Writer\n   This configuration example configures a Collector\
    \ that writes the\n   received data to a file.\n   <ipfix xmlns=\"urn:ietf:params:xml:ns:yang:ietf-ipfix-psamp\"\
    >\n     <collectingProcess>\n       <name>SCTP collector</name>\n       <sctpCollector>\n\
    \         <name>Listening port 4739</name>\n         <localPort>4739</localPort>\n\
    \         <localIPAddress>192.0.2.1</localIPAddress>\n       </sctpCollector>\n\
    \       <exportingProcess>File writer</exportingProcess>\n     </collectingProcess>\n\
    \     <exportingProcess>\n       <name>File writer</name>\n       <destination>\n\
    \         <name>Write to /tmp folder</name>\n         <fileWriter>\n         \
    \  <file>file://tmp/collected-records.ipfix</file>\n         </fileWriter>\n \
    \      </destination>\n     </exportingProcess>\n   </ipfix>\n"
- title: 7.5.  Deviations
  contents:
  - "7.5.  Deviations\n   Assume that a Monitoring Device has only two interfaces\
    \ ifIndex=1 and\n   ifIndex=2, which can be configured as Observation Points.\
    \  The\n   Observation Point ID is always identical to the ifIndex.\n   The following\
    \ YANG module specifies these deviations.\n"
- title: module my-ipfix-psamp-deviation {
  contents:
  - "module my-ipfix-psamp-deviation {\n  namespace \"urn:my-company:xml:ns:ietf-ipfix-psamp\"\
    ;\n  prefix my;\n  import ietf-ipfix-psamp { prefix ipfix; }\n  deviation /ipfix:ipfix/ipfix:observationPoint/ipfix:entPhysicalIndex\
    \ {\n    deviate not-supported;\n  }\n  deviation /ipfix:ipfix/ipfix:observationPoint/ipfix:entPhysicalName\
    \ {\n    deviate not-supported;\n  }\n  deviation /ipfix:ipfix/ipfix:observationPoint/ipfix:ifName\
    \ {\n    deviate not-supported;\n  }\n  deviation /ipfix:ipfix/ipfix:observationPoint\
    \ {\n    deviate add {\n      must \"ipfix:ifIndex=1 or ipfix:ifIndex=2\";\n \
    \   }\n  }\n  deviation\n      /ipfix:ipfix/ipfix:observationPoint/ipfix:observationPointId\
    \ {\n    deviate add {\n      must \"current()=../ipfix:ifIndex\";\n    }\n  }\n"
- title: '}'
  contents:
  - '}

    '
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   The YANG module defined in this memo is designed\
    \ to be accessed via\n   the NETCONF protocol [RFC6241].  The lowest NETCONF layer\
    \ is the\n   secure transport layer and the mandatory-to-implement secure\n  \
    \ transport is SSH [RFC6242].\n   There are a number of data nodes defined in\
    \ this YANG module which\n   are writable/creatable/deletable (i.e., config true,\
    \ which is the\n   default).  These data nodes may be considered sensitive or\
    \ vulnerable\n   in some network environments.  Write operations (e.g., edit-config)\n\
    \   to these data nodes without proper protection can have a negative\n   effect\
    \ on network operations.  These are the subtrees and data nodes\n   and their\
    \ sensitivity/vulnerability:\n   /ipfix/observationPoint\n      The configuration\
    \ parameters in this subtree specify where packets\n      are observed and by\
    \ which Selection Processes they will be\n      processed.  Write access to this\
    \ subtree allows observing packets\n      at arbitrary interfaces or linecards\
    \ of the Monitoring Device and\n      may thus lead to the export of sensitive\
    \ traffic information.\n   /ipfix/selectionProcess\n      The configuration parameters\
    \ in this subtree specify for which\n      packets information will be reported\
    \ in Packet Reports or Flow\n      Records.  Write access to this subtree allows\
    \ changing the subset\n      of packets for which information will be reported\
    \ and may thus\n      lead to the export of sensitive traffic information.\n \
    \  /ipfix/cache\n      The configuration parameters in this subtree specify the\
    \ fields\n      included in Packet Reports or Flow Records.  Write access to this\n\
    \      subtree allows adding fields which may contain sensitive traffic\n    \
    \  information, such as IP addresses or parts of the packet payload.\n   /ipfix/exportingProcess\n\
    \      The configuration parameters in this subtree specify to which\n      Collectors\
    \ Packet Reports or Flow Records are exported.  Write\n      access to this subtree\
    \ allows exporting potentially sensitive\n      traffic information to illegitimate\
    \ Collectors.  Furthermore, TLS/\n      DTLS parameters can be changed, which\
    \ may affect the mutual\n      authentication between Exporters and Collectors\
    \ as well as the\n      encrypted transport of the data.\n   /ipfix/collectingProcess\n\
    \      The configuration parameters in this subtree may specify that\n      collected\
    \ Packet Reports and Flow Records are reexported to\n      another Collector or\
    \ written to a file.  Write access to this\n      subtree potentially allows reexporting\
    \ or storing the sensitive\n      traffic information.\n   Some of the readable\
    \ data nodes in this YANG module may be considered\n   sensitive or vulnerable\
    \ in some network environments.  It is thus\n   important to control read access\
    \ (e.g., via get, get-config, or\n   notification) to these data nodes.  These\
    \ are the subtrees and data\n   nodes and their sensitivity/vulnerability:\n \
    \  /ipfix/observationPoint\n      Parameters in this subtree may be sensitive\
    \ because they reveal\n      information about the Monitoring Device itself and\
    \ the network\n      infrastructure.\n   /ipfix/selectionProcess\n      Parameters\
    \ in this subtree may be sensitive because they reveal\n      information about\
    \ the Monitoring Device itself and the observed\n      traffic.  For example,\
    \ the counters packetsObserved and\n      packetsDropped inferring the number\
    \ of observed packets.\n   /ipfix/cache\n      Parameters in this subtree may\
    \ be sensitive because they reveal\n      information about the Monitoring Device\
    \ itself and the observed\n      traffic.  For example, the counters activeFlows\
    \ and dataRecords\n      allow inferring the number of measured Flows or packets.\n\
    \   /ipfix/exportingProcess\n      Parameters in this subtree may be sensitive\
    \ because they reveal\n      information about the network infrastructure and\
    \ the outgoing\n      IPFIX Transport Sessions.  For example, it discloses the\
    \ IP\n      addresses of Collectors as well as the deployed TLS/DTLS\n      configuration,\
    \ which may facilitate the interception of outgoing\n      IPFIX Messages.\n \
    \  /ipfix/collectingProcess\n      Parameters in this subtree may be sensitive\
    \ because they reveal\n      information about the network infrastructure and\
    \ the incoming\n      IPFIX Transport Sessions.  For example, it discloses the\
    \ IP\n      addresses of Exporters as well as the deployed TLS/DTLS\n      configuration,\
    \ which may facilitate the interception of incoming\n      IPFIX Messages.\n"
- title: 9.  IANA Considerations
  contents:
  - "9.  IANA Considerations\n   This document registers a URI in the IETF XML registry\
    \ [RFC3688].\n   Following the format in RFC 3688, the following registration\
    \ is\n   requested.\n      URI: urn:ietf:params:xml:ns:yang:ietf-ipfix-psamp\n\
    \      Registrant Contact: The IPFIX WG of the IETF.\n      XML: N/A, the requested\
    \ URI is an XML namespace.\n   This document registers a YANG module in the YANG\
    \ Module Names\n   registry [RFC6020].\n      name: ietf-ipfix-psamp\n      namespace:\
    \ urn:ietf:params:xml:ns:yang:ietf-ipfix-psamp\n      prefix: ipfix\n      reference:\
    \ RFC 6728\n"
- title: 10.  Acknowledgements
  contents:
  - "10.  Acknowledgements\n   The authors thank Martin Bjorklund, Andy Bierman, and\
    \ Ladislav Lhotka\n   for helping specify the configuration data model in YANG,\
    \ as well as\n   Atsushi Kobayashi, Andrew Johnson, Lothar Braun, and Brian Trammell\n\
    \   for their valuable reviews of this document.\n"
- title: 11.  References
  contents:
  - '11.  References

    '
- title: 11.1.  Normative References
  contents:
  - "11.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [RFC5101]  Claise, B., \"Specification of the IP Flow Information\n\
    \              Export (IPFIX) Protocol for the Exchange of IP Traffic\n      \
    \        Flow Information\", RFC 5101, January 2008.\n   [RFC5102]  Quittek, J.,\
    \ Bryant, S., Claise, B., Aitken, P., and J.\n              Meyer, \"Information\
    \ Model for IP Flow Information Export\",\n              RFC 5102, January 2008.\n\
    \   [RFC5103]  Trammell, B. and E. Boschi, \"Bidirectional Flow Export\n     \
    \         Using IP Flow Information Export (IPFIX)\", RFC 5103,\n            \
    \  January 2008.\n   [RFC5475]  Zseby, T., Molina, M., Duffield, N., Niccolini,\
    \ S., and F.\n              Raspall, \"Sampling and Filtering Techniques for IP\
    \ Packet\n              Selection\", RFC 5475, March 2009.\n   [RFC5476]  Claise,\
    \ B., Johnson, A., and J. Quittek, \"Packet Sampling\n              (PSAMP) Protocol\
    \ Specifications\", RFC 5476, March 2009.\n   [RFC5477]  Dietz, T., Claise, B.,\
    \ Aitken, P., Dressler, F., and G.\n              Carle, \"Information Model for\
    \ Packet Sampling Exports\",\n              RFC 5477, March 2009.\n   [RFC6020]\
    \  Bjorklund, M., \"YANG - A Data Modeling Language for the\n              Network\
    \ Configuration Protocol (NETCONF)\", RFC 6020,\n              October 2010.\n\
    \   [RFC6021]  Schoenwaelder, J., \"Common YANG Data Types\", RFC 6021,\n    \
    \          October 2010.\n   [UML]      Object Management Group, \"OMG Unified\
    \ Modeling Language\n              (OMG UML), Superstructure, V2.2\", OMG formal/2009-02-02,\n\
    \              February 2009.\n   [IANA-IPFIX]\n              IANA, \"IP Flow\
    \ Information Export (IPFIX) Entities\",\n              <http://www.iana.org/assignments/ipfix>.\n"
- title: 11.2.  Informative References
  contents:
  - "11.2.  Informative References\n   [RFC1141]  Mallory, T. and A. Kullberg, \"\
    Incremental updating of the\n              Internet checksum\", RFC 1141, January\
    \ 1990.\n   [RFC2863]  McCloghrie, K. and F. Kastenholz, \"The Interfaces Group\n\
    \              MIB\", RFC 2863, June 2000.\n   [RFC3280]  Housley, R., Polk, W.,\
    \ Ford, W., and D. Solo, \"Internet\n              X.509 Public Key Infrastructure\
    \ Certificate and\n              Certificate Revocation List (CRL) Profile\",\
    \ RFC 3280,\n              April 2002.\n   [RFC5280]  Cooper, D., Santesson, S.,\
    \ Farrell, S., Boeyen, S.,\n              Housley, R., and W. Polk, \"Internet\
    \ X.509 Public Key\n              Infrastructure Certificate and Certificate Revocation\
    \ List\n              (CRL) Profile\", RFC 5280, May 2008.\n   [RFC3688]  Mealling,\
    \ M., \"The IETF XML Registry\", BCP 81, RFC 3688,\n              January 2004.\n\
    \   [RFC3758]  Stewart, R., Ramalho, M., Xie, Q., Tuexen, M., and P.\n       \
    \       Conrad, \"Stream Control Transmission Protocol (SCTP)\n              Partial\
    \ Reliability Extension\", RFC 3758, May 2004.\n   [RFC3871]  Jones, G., \"Operational\
    \ Security Requirements for Large\n              Internet Service Provider (ISP)\
    \ IP Network\n              Infrastructure\", RFC 3871, September 2004.\n   [RFC3917]\
    \  Quittek, J., Zseby, T., Claise, B., and S. Zander,\n              \"Requirements\
    \ for IP Flow Information Export (IPFIX)\",\n              RFC 3917, October 2004.\n\
    \   [RFC4133]  Bierman, A. and K. McCloghrie, \"Entity MIB (Version 3)\",\n  \
    \            RFC 4133, August 2005.\n   [RFC6347]  Rescorla, E. and N. Modadugu,\
    \ \"Datagram Transport Layer\n              Security Version 1.2\", RFC 6347,\
    \ January 2012.\n   [RFC6241]  Enns, R., Bjorklund, M., Schoenwaelder, J., and\
    \ A.\n              Bierman, \"Network Configuration Protocol (NETCONF)\",\n \
    \             RFC 6241, June 2011.\n   [RFC6242]  Wasserman, M., \"Using the NETCONF\
    \ Protocol over Secure\n              Shell (SSH)\", RFC 6242, June 2011.\n  \
    \ [RFC4960]  Stewart, R., \"Stream Control Transmission Protocol\",\n        \
    \      RFC 4960, September 2007.\n   [RFC5246]  Dierks, T. and E. Rescorla, \"\
    The Transport Layer Security\n              (TLS) Protocol Version 1.2\", RFC\
    \ 5246, August 2008.\n   [RFC5470]  Sadasivan, G., Brownlee, N., Claise, B., and\
    \ J. Quittek,\n              \"Architecture for IP Flow Information Export\",\
    \ RFC 5470,\n              March 2009.\n   [RFC5472]  Zseby, T., Boschi, E., Brownlee,\
    \ N., and B. Claise, \"IP\n              Flow Information Export (IPFIX) Applicability\"\
    , RFC 5472,\n              March 2009.\n   [RFC5473]  Boschi, E., Mark, L., and\
    \ B. Claise, \"Reducing Redundancy\n              in IP Flow Information Export\
    \ (IPFIX) and Packet Sampling\n              (PSAMP) Reports\", RFC 5473, March\
    \ 2009.\n   [RFC5474]  Duffield, N., Chiou, D., Claise, B., Greenberg, A.,\n \
    \             Grossglauser, M., and J. Rexford, \"A Framework for Packet\n   \
    \           Selection and Reporting\", RFC 5474, March 2009.\n   [RFC5610]  Boschi,\
    \ E., Trammell, B., Mark, L., and T. Zseby,\n              \"Exporting Type Information\
    \ for IP Flow Information Export\n              (IPFIX) Information Elements\"\
    , RFC 5610, July 2009.\n   [RFC5655]  Trammell, B., Boschi, E., Mark, L., Zseby,\
    \ T., and A.\n              Wagner, \"Specification of the IP Flow Information\
    \ Export\n              (IPFIX) File Format\", RFC 5655, October 2009.\n   [RFC6110]\
    \  Lhotka, L., \"Mapping YANG to Document Schema Definition\n              Languages\
    \ and Validating NETCONF Content\", RFC 6110,\n              February 2011.\n\
    \   [RFC6526]  Claise, B., Aitken, P., Johnson, A., and G. Muenz, \"IP\n     \
    \         Flow Information Export (IPFIX) Per Stream Control\n              Transmission\
    \ Protocol (SCTP) Stream\", RFC 6526,\n              March 2012.\n   [RFC6615]\
    \  Dietz, T., Kobayashi, A., Claise, B., and G. Muenz,\n              \"Definitions\
    \ of Managed Objects for IP Flow Information\n              Export\", RFC 6615,\
    \ June 2012.\n   [W3C.REC-xml-20081126]\n              Sperberg-McQueen, C., Yergeau,\
    \ F., Bray, T., Paoli, J.,\n              and E. Maler, \"Extensible Markup Language\
    \ (XML) 1.0 (Fifth\n              Edition)\", World Wide Web Consortium Recommendation\n\
    \              REC-xml-20081126, November 2008,\n              <http://www.w3.org/TR/2008/REC-xml-20081126>.\n\
    \   [W3C.REC-xmlschema-0-20041028]\n              Walmsley, P. and D. Fallside,\
    \ \"XML Schema Part 0: Primer\n              Second Edition\", World Wide Web\
    \ Consortium Recommendation\n              REC-xmlschema-0-20041028, October 2004,\n\
    \              <http://www.w3.org/TR/2004/REC-xmlschema-0-20041028>.\n   [RFC6727]\
    \  Dietz, T., Claise, B., and J. Quittek, \"Definitions of\n              Managed\
    \ Objects for Packet Sampling\", RFC 6727, October\n              2012.\n   [YANG-WEB]\n\
    \              Bjoerklund, M., \"YANG WebHome\", March 2011,\n              <http://www.yang-central.org/>.\n\
    \   [IANA-ENTERPRISE-NUMBERS]\n              IANA, \"Private Enterprise Numbers\"\
    ,\n              <http://www.iana.org/assignments/enterprise-numbers>.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Gerhard Muenz\n   Technische Universitaet Muenchen\n \
    \  Department of Informatics\n   Chair for Network Architectures and Services\
    \ (I8)\n   Boltzmannstr. 3\n   85748 Garching\n   Germany\n   EMail: muenz@net.in.tum.de\n\
    \   URI:   http://www.net.in.tum.de/~muenz\n   Benoit Claise\n   Cisco Systems,\
    \ Inc.\n   De Kleetlaan 6a b1\n   1831 Diegem\n   Belgium\n   Phone: +32 2 704\
    \ 5622\n   EMail: bclaise@cisco.com\n   Paul Aitken\n   Cisco Systems, Inc.\n\
    \   96 Commercial Quay\n   Commercial Street\n   Edinburgh  EH6 6LX\n   United\
    \ Kingdom\n   Phone: +44 131 561 3616\n   EMail: paitken@cisco.com\n"
