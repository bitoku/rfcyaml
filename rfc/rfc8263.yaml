- title: __initial_text__
  contents:
  - "          Group Domain of Interpretation (GDOI) GROUPKEY-PUSH\n             \
    \           Acknowledgement Message\n"
- title: Abstract
  contents:
  - "Abstract\n   The Group Domain of Interpretation (GDOI) includes the ability of\
    \ a\n   Group Controller/Key Server (GCKS) to provide a set of current Group\n\
    \   Member (GM) devices with additional security associations (e.g., to\n   rekey\
    \ expiring security associations).  This memo adds the ability of\n   a GCKS to\
    \ request that the GM devices return an acknowledgement of\n   receipt of its\
    \ rekey message and specifies the acknowledgement\n   method.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 7841.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8263.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2017 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (https://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \      1.1. Requirements Notation ......................................4\n  \
    \    1.2. Acronyms and Abbreviations .................................4\n   2.\
    \ Acknowledgement Message Request .................................5\n      2.1.\
    \ REKEY_ACK_KEK_SHA256 Type ..................................5\n      2.2. REKEY_ACK_LKH_SHA256\
    \ Type ..................................6\n      2.3. REKEY_ACK_KEK_SHA512 Type\
    \ ..................................6\n      2.4. REKEY_ACK_LKH_SHA512 Type ..................................6\n\
    \   3. GROUPKEY-PUSH Acknowledgement Message ...........................6\n  \
    \    3.1. HDR ........................................................7\n    \
    \  3.2. HASH .......................................................8\n      3.3.\
    \ SEQ ........................................................9\n      3.4. ID\
    \ .........................................................9\n   4. Group Member\
    \ Operations .........................................9\n   5. GCKS Operations\
    \ ................................................10\n   6. Management Considerations\
    \ ......................................10\n   7. Security Considerations ........................................12\n\
    \      7.1. Protection of the GROUPKEY-PUSH ACK .......................12\n  \
    \    7.2. Transmitting a GROUPKEY-PUSH ACK ..........................13\n    \
    \  7.3. Receiving a GROUPKEY-PUSH ACK .............................13\n   8. IANA\
    \ Considerations ............................................14\n   9. References\
    \ .....................................................15\n      9.1. Normative\
    \ References ......................................15\n      9.2. Informative\
    \ References ....................................16\n   Acknowledgements ..................................................17\n\
    \   Authors' Addresses ................................................17\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The Group Domain of Interpretation (GDOI) [RFC6407] is a\
    \ group key\n   management method by which a Group Controller/Key Server (GCKS)\n\
    \   distributes security associations (i.e., cryptographic policy and\n   keying\
    \ material) to a set of Group Member (GM) devices.  The GDOI\n   meets the requirements\
    \ set forth in [RFC4046] (\"Multicast Security\n   (MSEC) Group Key Management\
    \ Architecture\"), including a Registration\n   Protocol and a Rekey Protocol.\
    \  The GDOI describes the Rekey Protocol\n   as a GROUPKEY-PUSH message.\n   A\
    \ GDOI GCKS uses a GROUPKEY-PUSH message (Section 4 of [RFC6407]) to\n   alert\
    \ GMs to updates in policy for the group, including new policy\n   and keying\
    \ material, replacement policy and keying material, and\n   indications of deleted\
    \ policy and keying material.  Usually, the GCKS\n   does not require a notification\
    \ that the GM actually received the\n   policy.  However, in some cases it is\
    \ beneficial for a GCKS to be\n   told by each receiving GM that it received the\
    \ rekey message and, by\n   implication, has reacted to the policy contained within.\
    \  For\n   example, a GCKS policy can use the acknowledgements to determine\n\
    \   which GMs are receiving the current group policy and which GMs are no\n  \
    \ longer participating in the group.\n   This memo introduces a method by which\
    \ a GM returns an\n   Acknowledgement Message to the GCKS.  Initially, a GCKS\
    \ requests that\n   a GM acknowledge GROUPKEY-PUSH messages as part of a distributed\n\
    \   group policy.  Then, as shown in Figure 1, when the GCKS delivers a\n   GROUPKEY-PUSH\
    \ message, each GM that honors the GCKS request returns a\n   GROUPKEY-PUSH Acknowledgement\
    \ Message.  The rest of this memo\n   describes this method in detail.\n     \
    \           GCKS                          GM1       GM2\n                 |  \
    \                           |         |\n                 |                 +---------->|\
    \         |\n                 |   GROUPKEY-PUSH |           |         |\n    \
    \             |-----------------+           |         |\n                 |  \
    \               |           |         |\n                 |                 +-------------------->|\n\
    \                 |                             |         |\n                \
    \ |<----------------------------|         |\n                 |      GROUPKEY-PUSH\
    \ ACK      |         |\n                 |                             |     \
    \    |\n                 |<--------------------------------------|\n         \
    \        |      GROUPKEY-PUSH ACK      |         |\n                    Figure\
    \ 1: GROUPKEY-PUSH Rekey Event\n   Implementation of the GROUPKEY-PUSH Acknowledgement\
    \ Message is\n   OPTIONAL.\n"
- title: 1.1.  Requirements Notation
  contents:
  - "1.1.  Requirements Notation\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    NOT RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted\
    \ as described in\n   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear\
    \ in all\n   capitals, as shown here.\n"
- title: 1.2.  Acronyms and Abbreviations
  contents:
  - "1.2.  Acronyms and Abbreviations\n   The following acronyms and abbreviations\
    \ are used throughout this\n   document.\n   ACK   Acknowledgement Message\n \
    \  D     Delete\n   GCKS  Group Controller/Key Server\n   GDOI  Group Domain of\
    \ Interpretation\n   GM    Group Member\n   HDR   Header\n   HMAC  Hashed Message\
    \ Authentication Code\n   IV    Initialization Vector\n   KD    Key Download\n\
    \   KDF   Key Derivation Function\n   KEK   Key Encryption Key\n   LKH   Logical\
    \ Key Hierarchy\n   MSEC  Multicast Security\n   PRF   Pseudorandom Function\n\
    \   SA    Security Association\n   SEQ   Sequence Number\n   SIG   Signature\n\
    \   SPI   Security Parameter Index\n"
- title: 2.  Acknowledgement Message Request
  contents:
  - "2.  Acknowledgement Message Request\n   When a GM is ready to join a group, it\
    \ contacts the GCKS with a\n   GROUPKEY-PULL Registration Protocol.  When the\
    \ GCKS has authenticated\n   and verified that the GM is an authorized member\
    \ of the group, it\n   downloads several sets of policy in a Security Association\
    \ (SA)\n   payload.  If the group includes the use of a GROUPKEY-PUSH Rekey\n\
    \   Protocol, the SA payload includes an SA Key Encryption Key (KEK)\n   payload\
    \ (Section 5.3 of [RFC6407]).  When necessary, the\n   GROUPKEY-PUSH Rekey Protocol\
    \ also contains an SA payload that\n   includes the SA KEK policy.  The SA KEK\
    \ policy indicates how the GM\n   will be receiving and handling the GROUPKEY-PUSH\
    \ Rekey Protocol.\n   When the GCKS policy includes the use of the GROUPKEY-PUSH\n\
    \   Acknowledgement Message, the GCKS reports this policy to the GM\n   within\
    \ the SA KEK policy.  The GCKS includes a new KEK attribute with\n   the name\
    \ KEK_ACK_REQUESTED (9), which indicates that the GM is\n   requested to return\
    \ a GROUPKEY-PUSH Acknowledgement Message.\n   As part of the SA KEK policy, the\
    \ GCKS specifies information on the\n   keying material that is used to protect\
    \ the GROUPKEY-PUSH Rekey\n   Protocol (e.g., the presence of a KEK management\
    \ algorithm).  Parts\n   of this information are used by a GM to derive the ack_key\
    \ (defined\n   in Section 3.2), which protects the GROUPKEY-PUSH Acknowledgement\n\
    \   Message.  There are different types of Rekey Acknowledgement\n   Messages;\
    \ they share an identical message format but differ in the\n   keying material\
    \ used.\n   The following values of the KEK_ACK_REQUESTED attribute are defined\n\
    \   in this memo.\n"
- title: 2.1.  REKEY_ACK_KEK_SHA256 Type
  contents:
  - "2.1.  REKEY_ACK_KEK_SHA256 Type\n   This type of Rekey ACK is used when the KEK\
    \ Download Type\n   (Section 5.6.2 of [RFC6407]) is part of the group policy.\
    \  The prf\n   (defined in Section 3.2) is PRF-HMAC-SHA-256 [RFC4868].  The base_key\n\
    \   (also defined in Section 3.2) is the KEK_ALGORITHM_KEY used to\n   decrypt\
    \ the GROUPKEY-PUSH message.  Note that for some algorithms the\n   KEK_ALGORITHM_KEY\
    \ will include an explicit Initialization Vector (IV)\n   before the actual key\
    \ (Section 5.6.2.1 of [RFC6407]), but it is not\n   used in the definition of\
    \ the base_key.\n"
- title: 2.2.  REKEY_ACK_LKH_SHA256 Type
  contents:
  - "2.2.  REKEY_ACK_LKH_SHA256 Type\n   This type of Rekey ACK can be used when the\
    \ KEK_MANAGEMENT_ALGORITHM\n   KEK attribute with a value representing the Logical\
    \ Key Hierarchy\n   (LKH) is part of the group policy (Section 5.3.1.1 of [RFC6407]).\n\
    \   The prf is PRF-HMAC-SHA-256.  The base_key is the Key Data field\n   value\
    \ taken from the first LKH Key structure in an LKH_DOWNLOAD_ARRAY\n   attribute\
    \ (see Section 5.6.3.1 of [RFC6407]).  This is a secret\n   symmetric key that\
    \ the GCKS shares with the GM.  Note that for some\n   algorithms the LKH Key\
    \ structure will include an explicit IV before\n   the actual key (Section 5.6.3.1\
    \ of [RFC6407]), but it is not used in\n   the definition of the base_key.\n"
- title: 2.3.  REKEY_ACK_KEK_SHA512 Type
  contents:
  - "2.3.  REKEY_ACK_KEK_SHA512 Type\n   This type of Rekey ACK is identical to the\
    \ REKEY_ACK_KEK_SHA256 Type,\n   except that the prf is PRF-HMAC-SHA-512 (defined\
    \ in [RFC4868]).\n"
- title: 2.4.  REKEY_ACK_LKH_SHA512 Type
  contents:
  - "2.4.  REKEY_ACK_LKH_SHA512 Type\n   This type of Rekey ACK is identical to the\
    \ REKEY_ACK_LKH_SHA256 Type,\n   except that the prf is PRF-HMAC-SHA-512 (defined\
    \ in [RFC4868]).\n"
- title: 3.  GROUPKEY-PUSH Acknowledgement Message
  contents:
  - "3.  GROUPKEY-PUSH Acknowledgement Message\n   The GROUPKEY-PUSH message defined\
    \ in [RFC6407] is reproduced in\n   Figure 2.  The SA and Key Download (KD) payloads\
    \ contain the actual\n   policy and keying material being distributed to the GM.\
    \  The Sequence\n   Number (SEQ) payload contains a sequence number that is used\
    \ by the\n   GM for replay protection.  This sequence number defines a unique\n\
    \   rekey message delivered to that GM.  One or more Delete (D) payloads\n   optionally\
    \ specify the deletion of the existing group policy.  The\n   Signature (SIG)\
    \ payload includes a signature of a hash of the entire\n   GROUPKEY-PUSH message\
    \ (excepting the SIG payload octets) before it\n   has been encrypted.\n     \
    \    GM                  GCKS\n         --                  ----\n           \
    \                  <---- HDR*, SEQ, [D,] SA, KD, SIG\n         * Protected by\
    \ the Rekey SA KEK; encryption occurs after HDR\n              Figure 2: GROUPKEY-PUSH\
    \ Message (from RFC 6407)\n   When the GM has received a KEK_ACK_REQUESTED attribute\
    \ in an SA KEK\n   and it chooses to respond, it returns the value of the Sequence\n\
    \   Number taken from the GROUPKEY-PUSH message to the GCKS along with\n   its\
    \ identity.  This tuple alerts the GCKS that the GM has received\n   the GROUPKEY-PUSH\
    \ message and implemented the policy contained\n   therein.  The GROUPKEY-PUSH\
    \ Acknowledgement Message is shown in\n   Figure 3.\n                      GM\
    \                              GCKS\n                      --                \
    \              ----\n                         HDR, HASH, SEQ, ID   ---->\n   \
    \           Figure 3: GROUPKEY-PUSH Acknowledgement Message\n   The IP header\
    \ for the GROUPKEY-PUSH Acknowledgement Message is\n   constructed as if it were\
    \ a reply to the GROUPKEY-PUSH message.  That\n   is, the source address of the\
    \ GROUPKEY-PUSH message becomes the\n   destination address of the GROUPKEY-PUSH\
    \ Acknowledgement Message, and\n   the GM includes its own IP address as the source\
    \ address of the\n   GROUPKEY-PUSH Acknowledgement Message.  The source port in\
    \ the\n   GROUPKEY-PUSH message UDP header becomes the destination port of the\n\
    \   GROUPKEY-PUSH Acknowledgement Message UDP header, and the destination\n  \
    \ port of the GROUPKEY-PUSH message UDP header becomes the source port\n   of\
    \ the GROUPKEY-PUSH Acknowledgement Message UDP header.\n   The following sections\
    \ describe the payloads in the GROUPKEY-PUSH\n   Acknowledgement Message.\n"
- title: 3.1.  HDR
  contents:
  - "3.1.  HDR\n   The message begins with a header as defined for the GDOI\n   GROUPKEY-PUSH\
    \ message in Section 4.2 of [RFC6407].  The fields in the\n   HDR MUST be initialized\
    \ as follows.  The cookies of a GROUPKEY-PUSH\n   message act as a Security Parameter\
    \ Index (SPI) and are copied to the\n   Acknowledgement Message.  \"Next Payload\"\
    \ identifies a \"Hash (HASH)\"\n   payload (value 8) [ISAKMP-NP].  Major Version\
    \ is 1 and Minor Version\n   is 0.  The Exchange Type has value 35 for the GDOI\
    \ GROUPKEY-PUSH\n   Acknowledgement Message.  Flags are set to 0.  Message ID\
    \ MUST be set\n   to 0.  Length is according to Section 4.2 of [RFC6407].\n"
- title: 3.2.  HASH
  contents:
  - "3.2.  HASH\n   The HASH payload is the same one used in the GDOI GROUPKEY-PULL\n\
    \   exchange defined in Section 3.2 of [RFC6407].  The hash data in the\n   HASH\
    \ payload is created as follows:\n      HASH = prf(ack_key, SEQ | ID)\n   where:\n\
    \   o  \"prf\" is specific to the KEK_ACK_REQUESTED value and is described\n \
    \     as part of that description.\n   o  \"|\" indicates concatenation.\n   o\
    \  \"SEQ\" and \"ID\" represent the bytes comprising the Sequence Number\n   \
    \   and Identification payloads.\n   The ack_key is computed from a Key Derivation\
    \ Function (KDF) that\n   conforms to KDF in feedback mode as defined in NIST\
    \ SP800-108\n   [SP800-108], where the length of the derived keying material is\
    \ the\n   same as the output of the prf, there is no IV, and the optional\n  \
    \ counter is not used.  Note: When the derived ack_key is smaller than\n   the\
    \ prf block size (i.e., 512 bits for PRF-HMAC-SHA-256), it is\n   zero-filled\
    \ to the right, as specified in Section 2.1.2 of [RFC4868].\n      ack_key = prf(base_key,\
    \ \"GROUPKEY-PUSH ACK\" | SPI | L)\n   where:\n   o  \"prf\" is specific to the\
    \ KEK_ACK_REQUESTED value and is described\n      as part of that description.\n\
    \   o  \"base_key\" is specific to the KEK_ACK_REQUESTED value and is\n      described\
    \ as part of that description.  If the base_key is smaller\n      than the prf\
    \ block size (i.e., 512 bits for PRF-HMAC-SHA-256),\n      then it is zero-filled\
    \ to the right, as specified in Section 2.1.2\n      of [RFC4868].\n   o  \"|\"\
    \ indicates concatenation.\n   o  \"GROUPKEY-PUSH ACK\" is a label encoded as\
    \ a null-terminated ASCII\n      string.\n   o  \"SPI\" (per [RFC6407]) is the\
    \ Initiator Cookie followed by the\n      Responder Cookie taken from the GROUPKEY-PUSH\
    \ message HDR, which\n      describes the context of the key usage.\n   o  \"\
    L\" is a length field matching the number of bits in the ack_key.\n      L MUST\
    \ match the length of the base_key (i.e., 512 bits for\n      PRF-HMAC-SHA-256).\
    \  The value L is represented as two octets in\n      network byte order (that\
    \ is, most significant byte first).\n"
- title: 3.3.  SEQ
  contents:
  - "3.3.  SEQ\n   The Sequence Number payload is defined in Section 5.7 of [RFC6407].\n\
    \   The value in the GROUPKEY-PUSH SEQ payload is copied to the\n   GROUPKEY-PUSH\
    \ ACK SEQ payload.\n"
- title: 3.4.  ID
  contents:
  - "3.4.  ID\n   The Identification payload is used as defined in Section 5.1 of\n\
    \   [RFC6407].  The ID payload contains an ID Type of ID_IPV4_ADDR,\n   ID_IPV6_ADDR,\
    \ or ID_OID as defined in [RFC8052] for GDOI exchanges.\n   The Protocol ID and\
    \ Port fields MUST be set to 0.  The address\n   provided in the ID payload represents\
    \ the IP address of the GM and\n   MUST match the source IP address used for the\
    \ most recent\n   GROUPKEY-PULL exchange.\n"
- title: 4.  Group Member Operations
  contents:
  - "4.  Group Member Operations\n   When a GM receives an SA KEK payload (in a GROUPKEY-PULL\
    \ exchange or\n   GROUPKEY-PUSH message) including a KEK_ACK_REQUESTED attribute,\
    \ it\n   records in its group state some indication that it is expected to\n \
    \  return a GROUPKEY-PUSH ACK.  A GM recognizing the attribute MUST\n   honor\
    \ the KEK_ACK_REQUESTED attribute by returning Acknowledgements,\n   because it\
    \ can be expected that the GCKS is likely to take some\n   policy-specific action\
    \ regarding unresponsive GMs, including ceasing\n   to deliver GROUPKEY-PUSH messages\
    \ to it.\n   If a GM cannot respond with the requested type of Acknowledgement,\
    \ it\n   continues with protocol exchange and participates in the group.  In\n\
    \   any case, if a GM stops receiving GROUPKEY-PUSH messages from a GCKS,\n  \
    \ it will re-register before existing SAs expire, so omitting the\n   sending\
    \ of Acknowledgements should not be critical.\n   When a GM receives a GROUPKEY-PUSH\
    \ message that contains a\n   KEK_ACK_REQUESTED attribute in the SA KEK payload,\
    \ it processes the\n   message according to RFC 6407.  When it concludes successful\n\
    \   processing of the message, it formulates the GROUPKEY-PUSH ACKs as\n   described\
    \ in Section 3 and delivers the message to the GCKS from\n   which the GROUPKEY-PUSH\
    \ message was received.  A GROUPKEY-PUSH ACK is\n   sent even if the GROUPKEY-PUSH\
    \ message contains a Delete payload for\n   the KEK used to protect the GROUPKEY-PUSH\
    \ message.\n"
- title: 5.  GCKS Operations
  contents:
  - "5.  GCKS Operations\n   When a GCKS policy includes requesting a GROUPKEY-PUSH\
    \ ACK from GMs,\n   it includes the KEK_ACK_REQUESTED attribute in the SA KEK\
    \ payload.\n   It does this each time the SA KEK is delivered, in both GROUPKEY-PULL\n\
    \   exchanges and GROUPKEY-PUSH messages.  The value of the\n   KEK_ACK_REQUESTED\
    \ attribute will depend upon the type of SA KEK\n   policy, as described in Section\
    \ 2.\n   When a GCKS receives a GROUPKEY-PUSH ACK (identified by an Exchange\n\
    \   Type of GROUPKEY-PUSH-ACK), it first verifies that the group policy\n   includes\
    \ receiving GROUPKEY-PUSH ACKs.  If not, the message is\n   discarded.  GCKS implementations\
    \ SHOULD keep a record (e.g., a hash\n   value) of recently received GROUPKEY-PUSH\
    \ Acknowledgement Messages\n   and reject duplicate messages prior to performing\
    \ cryptographic\n   operations.  This enables an early discard of the replayed\
    \ messages.\n   If the message is expected, the GCKS validates the format of the\n\
    \   message and verifies that the HASH has been properly constructed as\n   described\
    \ in Section 3.2.  If validation fails, the message is\n   discarded.  The GCKS\
    \ extracts the sequence number and identity of the\n   GM from the SEQ and ID\
    \ payloads, respectively, and records the fact\n   that the GM received the GROUPKEY-PUSH\
    \ message represented by its\n   sequence number.\n"
- title: 6.  Management Considerations
  contents:
  - "6.  Management Considerations\n   The GCKS manages group policy as well as determining\
    \ which GM devices\n   are presently \"live\" members of the group (i.e., members\
    \ either\n   sending or receiving messages).  Group policy includes a strategy\
    \ to\n   ensure that rekey messages with current group policy reach all live\n\
    \   GMs.  This is discussed briefly in Section 5.3 of [RFC4046].  The\n   GROUPKEY-PUSH\
    \ Acknowledgement Message specified in this memo provides\n   the GCKS with an\
    \ additional method to assess if a GM is live and has\n   received the current\
    \ group policy.  But it is possible for a rekey\n   message or GROUPKEY-PUSH Acknowledgement\
    \ Message to be discarded in\n   the network, resulting in a live GM appearing\
    \ to be unresponsive.\n   Also, a GM might not be able to respond with a GROUPKEY-PUSH\
    \ ACK, so\n   the GCKS should use caution in using a lack of an Acknowledgement\n\
    \   Message as the only factor in determining whether a GM is live.  In\n   particular,\
    \ a GCKS SHOULD NOT consider a GM to have left the group\n   until it has received\
    \ at least one ACK from the GM.\n   Some management considerations for determining\
    \ how a GM handles\n   Acknowledgement Messages are as follows:\n   o  A GM MUST\
    \ respond with Acknowledgement Messages when requested, as\n      a GCKS can subsequently\
    \ determine when a GM unexpectedly becomes\n      unresponsive.\n   o  A GM receiving\
    \ a GROUPKEY-PUSH message as a multicast message MAY\n      introduce jitter to\
    \ the timing of its Acknowledgement Message to\n      help the GCKS better manage\
    \ replies from GMs.  A GM MUST NOT delay\n      sending an Acknowledgement Message\
    \ for more than 5 seconds. a GCKS\n      SHOULD NOT declare an Acknowledgement\
    \ Message as missing until it\n      has waited at least 10 seconds.  Implementations\
    \ SHOULD make these\n      timers configurable.\n   Some management considerations\
    \ for determining how the GCKS handles\n   Acknowledgement Messages are as follows:\n\
    \   o  Non-receipt of an Acknowledgement Message is an indication that a\n   \
    \   GM is unable to respond.  A GCKS SHOULD wait at least several\n      seconds\
    \ before determining non-receipt, as GMs could add jitter to\n      the response\
    \ time before sending an Acknowledgement Message.\n   o  If the GCKS is aware\
    \ that GMs are expected to respond, then\n      non-receipt of an Acknowledgement\
    \ Message SHOULD trigger a logging\n      event.  The GCKS MAY be configured with\
    \ such additional policy\n      actions as transmitting the GROUPKEY-PUSH message\
    \ several times in\n      a short period of time (as suggested in [RFC4046]),\
    \ thereby\n      mitigating loss of either the GROUPKEY-PUSH message or an\n \
    \     Acknowledgement Message.  Another policy action could be to alert\n    \
    \  GCKS administrators of GMs that do not return several consecutive\n      Acknowledgement\
    \ Messages or even removing unresponsive GMs from\n      the group.  However,\
    \ a GCKS with a policy of removing GMs from the\n      group needs to be aware\
    \ that a GM that has not responded will not\n      receive a newer group policy\
    \ until it initiates contact with the\n      GCKS again.\n   o  When a GROUPKEY-PUSH\
    \ message includes a Delete payload for the KEK\n      used to protect the GROUPKEY-PUSH\
    \ message, the GCKS SHOULD NOT\n      itself delete the KEK until it has given\
    \ GMs the opportunity to\n      acknowledge receipt of the GROUPKEY-PUSH message.\
    \  This could be\n      several seconds, as GMs could add jitter to the response\
    \ time\n      before sending an Acknowledgement Message.\n   o  A GCKS SHOULD\
    \ log failure events, such as receiving\n      Acknowledgement Messages for a\
    \ group in which the GCKS has not\n      requested Acknowledgements, receiving\
    \ malformed Acknowledgements,\n      and Acknowledgements that fail validation.\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   There are three areas of security considerations\
    \ to consider: the\n   protection of the GROUPKEY-PUSH ACK, whether the GM should\
    \ transmit a\n   GROUPKEY-PUSH ACK, and whether a GCKS should accept a GROUPKEY-PUSH\n\
    \   ACK.  These are addressed in the following subsections.\n   The construction\
    \ of the HASH defined in this memo uses\n   PRF-HMAC-SHA-256 or PRF-HMAC-SHA-512.\
    \  The strengths of\n   PRF-HMAC-SHA-256 and PRF-HMAC-SHA-512 were unquestioned\
    \ at the time\n   this memo was developed.  When a HASH construction using a different\n\
    \   prf becomes necessary, a new KEK_ACK_REQUESTED value will be defined\n   in\
    \ a new specification.\n"
- title: 7.1.  Protection of the GROUPKEY-PUSH ACK
  contents:
  - "7.1.  Protection of the GROUPKEY-PUSH ACK\n   The GROUPKEY-PUSH ACK is an Internet\
    \ Security Association and Key\n   Management Protocol (ISAKMP) message as discussed\
    \ in [RFC2408].\n   (Note: RFC 2408 has been obsoleted by RFC 7296, but only RFC\
    \ 2408\n   applies in this context.)  Message authentication and protection\n\
    \   against man-in-the-middle attacks are provided by the inclusion of a\n   HASH\
    \ payload that includes the output of an HMAC computation over the\n   bytes of\
    \ the message.\n   Because the KEK is a group secret, when the value of REKEY_ACK_KEK\
    \ is\n   specified, impersonation of a victim GM by another authorized GM is\n\
    \   possible.  However, security considerations regarding such an\n   impersonation\
    \ are limited to a false claim that a victim GM has\n   received a GROUPKEY-PUSH\
    \ when the victim GM has in fact not received\n   it (e.g., because an active\
    \ attacker has discarded the\n   GROUPKEY-PUSH).  If a GCKS policy includes sending\
    \ retransmissions of\n   the GROUPKEY-PUSH message to that victim GM, then the\
    \ victim GM might\n   not receive replacement SAs.  However, this does not introduce\
    \ any\n   additional threats over a use case where the GROUPKEY-PUSH ACK is not\n\
    \   deployed and GROUPKEY-PUSH messages are withheld from a victim GM by\n   an\
    \ active attacker.  These threats can be mitigated by using a value\n   of REKEY_ACK_LKH,\
    \ due to the use of a secret pairwise key shared\n   between the GCKS and an individual\
    \ GM.\n   Confidentiality is not provided for the GROUPKEY-PUSH ACK.  The\n  \
    \ contents of the message, including the hash value, the sequence\n   number from\
    \ the GROUPKEY-PUSH message to which it is acknowledging\n   receipt, and the\
    \ identity of the GM, can be observed by a passive\n   attacker.  Observation\
    \ of a hash value or set of hash values will not\n   compromise the hash key.\
    \  The identity of the GM is also available to\n   the passive attacker as the\
    \ source IP address of the packet.  Note\n   that the sequence number in the GROUPKEY-PUSH\
    \ ACK does reveal the\n   sequence number (previously not available to the attacker)\
    \ that was\n   included in the GROUPKEY-PUSH message.  However, the attacker is\n\
    \   assumed to not be in possession of the key used to encrypt the\n   message\
    \ and thus cannot create a spoofed GROUPKEY-PUSH message.\n   Therefore, the attacker\
    \ does not derive any direct value from\n   learning the sequence number.\n"
- title: 7.2.  Transmitting a GROUPKEY-PUSH ACK
  contents:
  - "7.2.  Transmitting a GROUPKEY-PUSH ACK\n   A GM transmits an ACK only when the\
    \ policy of the most recently\n   received SA KEK includes a request by the GCKS\
    \ for ACKs, and the ACK\n   is only returned after processing the GROUPKEY-PUSH\
    \ message according\n   to Section 4.4 of [RFC6407].  In other words, the form\
    \ of the\n   GROUPKEY-PUSH message will have been validated, replay protection\n\
    \   completed, and the digital signature verified as being genuine.\n   Therefore,\
    \ the threat of a GM responding to a spoofed or resent\n   GROUPKEY-PUSH message,\
    \ and the possibility of the GM being used to\n   propagate a Distributed Denial\
    \ of Service (DDoS) attack on a GCKS,\n   are mitigated.  For more information,\
    \ see the security considerations\n   for a GROUPKEY-PUSH message as described\
    \ in Section 7.3 of [RFC6407].\n"
- title: 7.3.  Receiving a GROUPKEY-PUSH ACK
  contents:
  - "7.3.  Receiving a GROUPKEY-PUSH ACK\n   A GCKS receiving ACKs will follow the\
    \ validation steps described in\n   Section 5 before interpreting the contents\
    \ of the message.  The GCKS\n   will then be sure to operate only on messages\
    \ that have been sent by\n   an authorized GM.\n   A GCKS SHOULD be prepared to\
    \ receive GROUPKEY-PUSH ACKs from each GM\n   to which it was sent.  That is,\
    \ it needs to ensure that it has\n   sufficient resources (e.g., receive queue\
    \ size) so that it does not\n   unnecessarily drop ACKs.  A GCKS should be aware\
    \ that a large number\n   of replayed or invalid GROUPKEY-PUSH messages could\
    \ be addressed to\n   it.  However, this is no worse a threat than if it received\
    \ a large\n   number of other types of replayed or invalid GDOI or other messages\n\
    \   containing a HASH payload.\n   How a GCKS processes the sequence number and\
    \ identity included in an\n   ACK is a matter of local policy and is outside the\
    \ scope of this\n   memo.\n"
- title: 8.  IANA Considerations
  contents:
  - "8.  IANA Considerations\n   The following additions have been made to the \"\
    Group Domain of\n   Interpretation (GDOI) Payloads\" [GDOI-REG] registry.\n  \
    \ A new attribute has been added to the \"SA KEK Payload Values - KEK\n   Attributes\"\
    \ registry.  The ID Class name is KEK_ACK_REQUESTED with a\n   value of 9 and\
    \ is a Basic attribute.\n   A new registry defining values for KEK_ACK_REQUESTED,\
    \ \"SA KEK Payload\n   Values - KEK_ACK_REQUESTED\", has been added; the initial\n\
    \   registrations are shown in the following table.  The terms\n   \"Reserved\"\
    , \"Unassigned\", and \"Private Use\" are to be applied as\n   defined in [RFC8126].\
    \  The registration procedure is Specification\n   Required.\n               \
    \    Value            Type\n                  -------           --------------------\n\
    \                     0              Reserved\n                     1        \
    \      REKEY_ACK_KEK_SHA256\n                     2              REKEY_ACK_LKH_SHA256\n\
    \                     3              REKEY_ACK_KEK_SHA512\n                  \
    \   4              REKEY_ACK_LKH_SHA512\n                    5-128           Unassigned\n\
    \                  129-255           Private Use\n   A new registry describing\
    \ ISAKMP Exchange Types for the GDOI, \"GDOI\n   DOI Exchange Types\", has been\
    \ added under the \"Group Domain of\n   Interpretation (GDOI) Payloads\" registry\
    \ [GDOI-REG].  This new\n   registry defines DOI Specific Use values [ISAKMP-EXCH],\
    \ which are\n   Exchange Type values used with the ISAKMP GDOI DOI.  The registration\n\
    \   procedure is Specification Required.  The terms \"Known Unregistered\n   Use\"\
    \ and \"Unassigned\" are to be applied as defined in [RFC8126].\n            \
    \ Value                      Phase        Reference\n             ----------------------\
    \     ------       ---------\n             GROUPKEY-PULL                32   \
    \      RFC 6407\n             GROUPKEY-PUSH                33         RFC 6407\n\
    \             Known Unregistered Use       34\n             GROUPKEY-PUSH-ACK\
    \            35         RFC 8263\n             Unassigned                 36-239\n"
- title: 9.  References
  contents:
  - '9.  References

    '
- title: 9.1.  Normative References
  contents:
  - "9.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n  \
    \            DOI 10.17487/RFC2119, March 1997,\n              <https://www.rfc-editor.org/info/rfc2119>.\n\
    \   [RFC4868]  Kelly, S. and S. Frankel, \"Using HMAC-SHA-256,\n             \
    \ HMAC-SHA-384, and HMAC-SHA-512 with IPsec\", RFC 4868,\n              DOI 10.17487/RFC4868,\
    \ May 2007,\n              <https://www.rfc-editor.org/info/rfc4868>.\n   [RFC6407]\
    \  Weis, B., Rowles, S., and T. Hardjono, \"The Group Domain\n              of\
    \ Interpretation\", RFC 6407, DOI 10.17487/RFC6407,\n              October 2011,\
    \ <https://www.rfc-editor.org/info/rfc6407>.\n   [RFC8052]  Weis, B., Seewald,\
    \ M., and H. Falk, \"Group Domain of\n              Interpretation (GDOI) Protocol\
    \ Support for IEC 62351\n              Security Services\", RFC 8052, DOI 10.17487/RFC8052,\n\
    \              June 2017, <https://www.rfc-editor.org/info/rfc8052>.\n   [RFC8126]\
    \  Cotton, M., Leiba, B., and T. Narten, \"Guidelines for\n              Writing\
    \ an IANA Considerations Section in RFCs\", BCP 26,\n              RFC 8126, DOI\
    \ 10.17487/RFC8126, June 2017,\n              <https://www.rfc-editor.org/info/rfc8126>.\n\
    \   [RFC8174]  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in\n         \
    \     RFC 2119 Key Words\", BCP 14, RFC 8174,\n              DOI 10.17487/RFC8174,\
    \ May 2017,\n              <https://www.rfc-editor.org/info/rfc8174>.\n"
- title: 9.2.  Informative References
  contents:
  - "9.2.  Informative References\n   [GDOI-REG]\n              Internet Assigned\
    \ Numbers Authority, \"Group Domain of\n              Interpretation (GDOI) Payload\
    \ Type Values\", IANA Registry,\n              September 2017, <https://www.iana.org/assignments/\n\
    \              gdoi-payloads/>.\n   [ISAKMP-EXCH]\n              Internet Assigned\
    \ Numbers Authority, \"Internet Key\n              Exchange (IKE) Attributes Exchange\
    \ Type Values\",\n              IANA Registry, May 2013,\n              <https://www.iana.org/assignments/ipsec-registry/>.\n\
    \   [ISAKMP-NP]\n              Internet Assigned Numbers Authority, \"Internet\
    \ Key\n              Exchange (IKE) Attributes Next Protocol Types\",\n      \
    \        IANA Registry, May 2013,\n              <https://www.iana.org/assignments/ipsec-registry/>.\n\
    \   [RFC2408]  Maughan, D., Schertler, M., Schneider, M., and J. Turner,\n   \
    \           \"Internet Security Association and Key Management Protocol\n    \
    \          (ISAKMP)\", RFC 2408, DOI 10.17487/RFC2408, November 1998,\n      \
    \        <https://www.rfc-editor.org/info/rfc2408>.\n   [RFC4046]  Baugher, M.,\
    \ Canetti, R., Dondeti, L., and F. Lindholm,\n              \"Multicast Security\
    \ (MSEC) Group Key Management\n              Architecture\", RFC 4046, DOI 10.17487/RFC4046,\
    \ April 2005,\n              <https://www.rfc-editor.org/info/rfc4046>.\n   [SP800-108]\n\
    \              Chen, L., \"Recommendation for Key Derivation Using\n         \
    \     Pseudorandom Functions (Revised)\", National Institute of\n            \
    \  Science and Technology, NIST Special Publication 800-108,\n              DOI\
    \ 10.6028/NIST.SP.800-108, October 2009,\n              <http://nvlpubs.nist.gov/nistpubs/Legacy/SP/\n\
    \              nistspecialpublication800-108.pdf>.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   Mike Hamada, Adrian Farrel, and Yaron Sheffer provided many\
    \ useful\n   technical and editorial comments and suggestions for improvement.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Brian Weis\n   Cisco Systems\n   170 W. Tasman Drive\n\
    \   San Jose, California  95134-1706\n   United States of America\n   Phone: +1-408-526-4796\n\
    \   Email: bew@cisco.com\n   Umesh Mangla\n   Juniper Networks Inc.\n   1133 Innovation\
    \ Way\n   Sunnyvale, California  94089\n   United States of America\n   Phone:\
    \ +1-408-936-1022\n   Email: umangla@juniper.net\n   Thomas Karl\n   Deutsche\
    \ Telekom\n   Landgrabenweg 151\n   Bonn  53227\n   Germany\n   Phone: +49-228-18138122\n\
    \   Email: thomas.karl@telekom.de\n   Nilesh Maheshwari\n   Email: nileshm@gmail.com\n"
