Abstract This document specifies the conventions for using the SEED encryption algorithm for encryption with the Cryptographic Message Syntax (CMS).
SEED is added to the set of optional symmetric encryption algorithms in CMS by providing two classes of unique object identifiers (OIDs).
One OID class defines the content encryption algorithms and the other defines the key encryption algorithms.
This document specifies the conventions for using the SEED encryption algorithm [SEED][TTASSEED] for encryption with the Cryptographic Message Syntax (CMS)[CMS].
The relevant object identifiers (OIDs) and processing steps are provided so that SEED may be used in the CMS specification (RFC 3852, RFC 3370) for content and key encryption.
SEED SEED is a symmetric encryption algorithm developed by KISA (Korea Information Security Agency) and a group of experts since 1998.
The input/output block size and key length of SEED is 128 bits.
SEED has the 16 round Feistel structure.
A 128 bit input is divided into two 64 bit blocks and the right 64 bit block is an input to the round function, with a 64 bit subkey generated from the key scheduling.
SEED is easily implemented in various software and hardware because it takes less memory to implement than other algorithms and generates keys without degrading the security of the algorithm.
In particular, it can be effectively adopted in a computing environment with a restricted resources, such as mobile devices and smart cards.
SEED is robust against known attacks including DC (Differential cryptanalysis), LC (Linear cryptanalysis), and related key attacks.
SEED has gone through wide public scrutinizing procedures.
It has been evaluated and is considered cryptographically secure by credible organizations such as ISO/IEC JTC 1/SC 27 and Japan CRYPTREC (Cryptography Research and Evaluation Committees)
SEED is a national industrial association standard [TTASSEED] and is widely used in South Korea for electronic commerce and financial services operated on wired and wireless communications.
The key words "MUST", "MUST NOT", "REQUIRED", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document (in uppercase, as shown) are to be interpreted as described in [RFC2119].
Object Identifiers for Content and Key Encryption
This section provides the OIDs and processing information necessary for SEED to be used for content and key encryption in CMS.
SEED is added to the set of optional symmetric encryption algorithms in CMS by providing two classes of unique object identifiers (OIDs).
One OID class defines the content encryption algorithms and the other defines the key encryption algorithms.
Thus, a CMS agent can apply SEED either for content or key encryption by selecting the corresponding object identifier, supplying the required parameter, and starting the program code.
OIDs for Content Encryption SEED is added to the set of symmetric content encryption algorithms defined in [CMSALG].
The SEED content encryption algorithm in Cipher Block Chaining (CBC) mode has the following object identifier: id
seedCBC(4) } The AlgorithmIdentifier parameters field MUST be present, and the parameters field MUST contain the value of Initialization Vector (IV):
The plain text is padded according to Section 6.3 of [CMS].
The key wrap/unwrap procedures used to encrypt/decrypt a SEED content encryption key (CEK) with a SEED key encryption key (KEK) are specified in Section 3.
Generation and distribution of key  encryption keys are beyond the scope of this document.
The parameter associated with this object identifier MUST be absent, because the key wrapping procedure itself defines how and when to use an IV.
Key Wrap Algorithm SEED key wrapping and unwrapping is done in conformance with the AES key wrap algorithm [RFC3394].
The following notation is used in the description of the key wrapping algorithms: SEED(K, W)
Encrypt W using the SEED codebook with key K SEED 1(K, W)
Return the least significant j bits of W B1
The key encryption key K n
The number of 64 bit key data blocks s
The number of steps in the wrapping process, s
The ith plaintext key data block C[i]
The ith ciphertext data block
The contents of registers A and R[i]
after encryption step t. IV
The 64 bit initial value used during the wrapping process.
In the key wrap algorithm, the concatenation function will be used to concatenate 64 bit quantities to form the 128 bit input to the SEED codebook.
The extraction functions will be used to split the 128 bit output from the SEED codebook into two 64 bit quantities.
SEED Key Wrap Key wrapping with SEED is identical to Section 2.2.1 of [RFC3394] with "AES" replaced by "SEED".
The inputs to the key wrapping process are the KEK and the plaintext to be wrapped.
The plaintext consists of n 64 bit blocks containing the key data being wrapped.
The key wrapping process is described below.
Set A[0] to an initial value (see Section 3.4)
For i   1 to n R[0][i]
P[i] 2) Calculate intermediate values.
For t   1 to s, where s   6n
MSB(64, SEED(K, A[t 1]   R[t 1][1]))
For i   1 to n 1 R[t][i]
LSB(64, SEED(K, A[t 1]   R[t 1][1])) 3) Output the results.
For i   1 to n C[i]
An alternative description of the key wrap algorithm involves indexing rather than shifting.
This approach allows one to calculate the wrapped key in place, avoiding the rotation in the previous description.
This produces identical results and is more easily implemented in software.
Set A   IV, an initial value (see Section 3.4)
For i   1 to n R[i]
P[i] 2) Calculate intermediate values.
For j   0 to 5
For i 1 to n B   SEED(K, A   R[i])
t where t   (n j)
For i   1 to n C[i]   R[i] 3.3.
Key Unwrap Key unwrapping with SEED is identical to Section 2.2.2 of [RFC3394], with "AES" replaced by "SEED".
The inputs to the unwrap process are the KEK and (n 1) 64 bit blocks of ciphertext consisting of previously wrapped key.
It returns n blocks of plaintext consisting of the n 64 bit blocks of the decrypted key data.
For i   1 to n R[s][i]
2) Calculate the intermediate values.
For t   s to 1 A[t 1]   MSB(64, SEED 1(K, ((A[t]
For i   2 to n R[t 1][i]
R[t][i 1] 3) Output the results.
If A[0] is an appropriate initial value (see Section 3.4), Then For i   1 to n P[i]
Else Return an error The unwrap algorithm can also be specified as an index based operation, allowing the calculations to be carried out in place.
Again, this produces the same results as the register shifting approach.
For i   1 to n R[i]
For j   5 to 0
For i   n to 1 B
SEED 1(K, (A ^ t)   R[i])
If A is an appropriate initial value (see Section 3.4),
Then For i   1 to n P[i]   R[i]
Else Return an error 3.4.
The initial value (IV) refers to the value assigned to A[0]
in the first step of the wrapping process.
This value is used to obtain an integrity check on the key data.
In the final step of the unwrapping process, the recovered value of A[0] is compared to the expected value of A[0].
If there is a match, the key is accepted as valid, and the unwrapping algorithm returns it.
If there is not a match, then the key is rejected, and the unwrapping algorithm returns an error.
The exact properties achieved by this integrity check depend on the definition of the initial value.
Different applications may call for somewhat different properties; for example, whether there is a need to determine the integrity of key data throughout its lifecycle or just when it is unwrapped.
This specification defines a default initial value that supports the integrity of the key data during the period it is wrapped (in Section 3.4.1).
Provision is also made to support alternative initial values (in Section 3.4.2).
The default initial value (IV) is defined to be the hexadecimal constant:
The use of a constant as the IV supports a strong integrity check on the key data during the period that it is wrapped.
A6A6A6A6A6A6A6A6, then the chance that the key data is corrupt is 2^ 64.
any other value, then the unwrap must return an error and not return any key data.
When the key wrap is used as part of a larger key management protocol or system, the desired scope for data integrity may be more than just the key data, and the desired duration may be more than just the period that it is wrapped.
Also, if the key data is not just a SEED key, it may not always be a multiple of 64 bits.
Alternative definitions of the initial value can be used to address such problems.
According to RFC 3394 [RFC3394], NIST will define alternative initial values in future key management publications as they are needed.
To accommodate a set of alternatives that may evolve over time, non application specific key wrap implementations will require some flexibility in the way the initial value is set and tested.
SMIMECapabilities Attribute An S/MIME client SHOULD announce the set of cryptographic functions it supports by using the S/MIME capabilities attribute.
This attribute provides a partial list of OIDs of cryptographic functions and MUST be signed by the client.
The functions' OIDs SHOULD be logically separated in functional categories and MUST be ordered with respect to their preference.
[RFC3851], Section 2.5.2 defines the SMIMECapabilities signed attribute (defined as a SEQUENCE of SMIMECapability SEQUENCEs) to be used to specify a partial list of algorithms that the software announcing the SMIMECapabilities can support.
If an S/MIME client is required to support symmetric encryption with SEED, the capabilities attribute MUST contain the SEED OID specified above in the category of symmetric algorithms.
The parameter associated with this OID MUST be SeedSMimeCapability.
The SMIMECapability SEQUENCE representing SEED MUST be DER encoded as the following hexadecimal strings: 30 0C 06 08 2A 83 1A 8C 9A 44 01 04 05 00
When a sending agent creates an encrypted message, it has to decide which type of encryption algorithm to use.
In general, the decision process involves information obtained from the capabilities lists included in messages received from the recipient, as well as other information, such as private agreements, user preferences and legal restrictions.
If local policy requires the use of SEED for symmetric encryption, then both the sending and receiving S/MIME clients must support it, and SEED must be configured as the preferred symmetric algorithm.
This document specifies the use of SEED for encrypting the content of a CMS message and for encrypting the symmetric key used to encrypt the content of a CMS message, with the other mechanisms being the same as the existing ones.
Therefore, the security considerations described in the CMS specifications [CMS][CMSALG] and the AES key wrap algorithm [RFC3394] can be applied to this document.
No security problem has been found on SEED [CRYPTREC].
Module SeedEncryptionAlgorithmInCMS { iso(1) member body(2) us(840)
} DEFINITIONS IMPLICIT TAGS ::
SEED Key Wrap Algorithm identifiers
