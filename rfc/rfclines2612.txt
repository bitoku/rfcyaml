Abstract There is always a desire in the Internet community for unencumbered encryption algorithms with a range of key sizes that can provide security for a variety of cryptographic applications and protocols.
This document describes an existing algorithm that can be used to satisfy this requirement.
Included are a description of the cipher and the key scheduling algorithm, the s boxes, and a set of test vectors (Appendix A).
This document describes the CAST 256 encryption algorithm, a DES like Substitution Permutation Network (SPN) cryptosystem built upon the CAST 128 encryption algorithm [1] which appears to have good resistance to differential cryptanalysis, linear cryptanalysis, and related key cryptanalysis.
This cipher also possesses a number of other desirable cryptographic properties, including avalanche, Strict Avalanche Criterion (SAC), Bit Independence Criterion (BIC), no complementation property, and an absence of weak and semi weak keys.
It thus appears to be a good candidate for general purpose use throughout the Internet community wherever a cryptographically  strong, freely available encryption algorithm is required.
CAST 256 has a block size of 128 bits and a variable key size (128, 160, 192, 224, or 256 bits).
CAST 256 Algorithm Specification 2.1 CAST 128 Notation
The following notation from CAST 128 [1] is relevant to CAST 256.
CAST 128 uses a pair of subkeys per round:  a 5 bit quantity Kri is used as a "rotation" key for round i and a 32 bit quantity Kmi is used as a "masking" key for round i. Three different round functions are used in CAST 128.
The rounds are as follows (where D is the data input to the operation,
Ia Id are the most significant byte through least significant byte of I,
respectively, Si is the ith s box (see Section 2.1.1 for s box contents), and O is the output of the operation).
S4[Id] Let f1, f2, f3 be keyed round function operations of Types 1, 2, and 3 (respectively) above.
CAST 128 uses four round function substitution boxes (s boxes), S1 S4.
These are defined as follows
(entries   written in hexadecimal notation   are to be read left to right, top to  bottom).
2.1.1 S Boxes S Box S1 30fb40d4
9fa0ff0b 6beccd2f 3f258c7a 1e213f2f 9c004dd3 6003e540 cf9fc949
7a42206a 29f9d4d5 f61b1891 bb72275e aa508167 38901091 c6b505eb
548300d0 00322a3c bf64cddf ba57a68e 75c6372b 50afd341 a7c13275
2deaa3e2 9e204d02 c8bd25ac eadf55b3 d5bd9e98 e31231b2
d8710f69 aa51c90f aa786bf6 22513f1e aa51a79b 2ad344cc 7b5a41f0
e11f0abc bfc5fe4a a70aec10 ac39570a 3f04442f
c69dff09 c75b65f0 d9db40d8 ec0e7779 4744ead4
9675b3fd a3ac3755 d47c27af 51c85f4d 56907596 a5bb15e6 580304f0
5648f725 ff5e569d 0ced63d0 7c63b2cf 700b45e1 d5ea50f1 85a92872 af1fbda7 d4234870
9a56456e dc39200c 20c8c571 962bda1c e1e696ff
393f4380 fe61cf7a eec5207a 55889c94 72fc0651 ada7ef79 4e1d7235 d55a63ce
de0436ba 99c430ef 5f0c0794 18dcdb7d a1d6eff3
361e3084 e4eb573b 602f64a4 d63acd9c 1bbc4635 9e81032d
f46f6ffe a1ff3b1f 208cfb6a 8f458c74 d9e0a227 4ec73a34
20e74364 b45e1378 de18639b 881ca122 b96726d1 8049a7e8 22b7da7b 5e552d25
a1269859 ec645c44 52c877a9 cdff33a6 a02b1741
5eea29cb 145892f5 91584f7f 5483697b 2667a8cc 85196048 8c4bacea 833860d4
6c387e8a 0ae6d249 b284600c d835731d dcb1c647 ac4c56ea 3ebd81b3 230eabb0 6438bc87 f0b5b1fa 8f5ea2b3 fc184642 0a036b7a
4fb089bd 649da589 a345415e 5c038323 3e5d3bb9
7160a539 73bfbe70 83877605 4523ecf1 S Box S3
eb903dbf e810c907 47607fff 369fe44b 8c1fc644
b9afa820 fade82e0 a067268b 8272792e 553fb2c0 489ae22b d4ef9794 125e3fbc
1257a240 4e1a8302 bae07fff 528246e7 8e57140e 3373f7bf
579fc264 67094f31 f2bd3f5f 40fff7c1 1fb78dfc 8e6bd2c1 437be59b 99b03dbf b5dbc64b 638dc0e6
c5884a28 ccc36f71 b843c213 6c0743f1 8309893c 0feddd5f 2f7fe850
efbd7d9b a672597d ada840d8 45f54504 fa5d7403
0276e4b6 94fd6574 927985b2 8276dbcb 02778176
3dc2c0f8 8d1ab2ec 64380e51 68cc7bfb d90f2788 12490181 5de5ffd4 dd7ef86a 76a2e214 b9a40368 925d958f
285ba1c8 3c62f44f 35c0eaa5 e805d231 428929fb
a2e53f55 b9e6d4bc a2048016 97573833 d7207d67 de0f8f3d
60543a49 5727c148 2be98a1d 8ab41738 20e1be24 af96da0f
9db30420 1fb6e9de a7be7bef d273a298 4a4f7bdb
fa020ed1 7e287aff e60fb663 095f35a1 79ebf120
fd059d43 6497b7b1 f3641f63 241e4adf 28147f5f
1574ca16 df871b62 211c40b7 a51a9ef9 0014377b 041e8ac8 09114003
5bbfc92d d0ec3b25 b7801ab7 8d6d3b24 20c763ef c366a5fc 9c382880 0ace3205
9126b031 36cc6fdb c70b8b46 d9e66a48 56e55a79 026a4ceb
8b9b0f56 013988c3 b1c52fca b4be31cd d8782806 12a3a4e2
296b299e 492fc295 9266beab b5676e69 9bd3ddda df7e052f db25701c
6afce36c 0316cc04 8644213e b7dc59d0 7965291f ccd6fd43
The following notation is employed in the specification of CAST 256.
Let f1, f2, f3 be as defined for CAST 128.
Let BETA   (ABCD) be a 128 bit block where A, B, C and D are each 32 bits in length.
Let "BETA   Qi(BETA)" be short hand notation for the following:
f1(D, Kr0 (i), Km0 (i))
f2(C, Kr1 (i), Km1 (i))
^ f3(B, Kr2 (i), Km2 (i))
D   D ^ f1(A, Kr3 (i), Km3 (i)) Let "BETA   QBARi(BETA)" be short hand notation for the following:
D   D ^ f1(A, Kr3 (i), Km3 (i))
^ f3(B, Kr2 (i), Km2 (i))
f2(C, Kr1 (i), Km1 (i))
f1(D, Kr0 (i), Km0 (i))
(Q( ) is called a "forward quad round" and QBAR( ) is called a "reverse quad round".)
{Kr0 (i), Kr1 (i), Kr2 (i), Kr3 (i)} be the set of rotation keys for the ith quad round, where Krj (i) is a 5 bit rotation key for f1, f2, or f3 (as specified above).
Let "KAPPA   Wi(KAPPA)" be short hand notation for the following: G   G
f1(H, Tr0 (i), Tm0 (i))
F   F ^ f2(G, Tr1 (i), Tm1 (i))
f3(F, Tr2 (i), Tm2 (i))
D   D ^ f1(E, Tr3 (i), Tm3 (i))
f2(D, Tr4 (i), Tm4 (i))
f3(C, Tr5 (i), Tm5 (i))
f1(B, Tr6 (i), Tm6 (i))
H   H ^ f2(A, Tr7 (i), Tm7 (i))
(W( ) is called a "forward octave".)
Let "Kr (i)   KAPPA" be short hand notation for the following:  Kr0 (i)   5LSB(A), Kr1 (i)   5LSB(C), Kr2 (i)   5LSB(E), Kr3 (i)   5LSB(G)
where 5LSB(x) denotes "the five least significant bits of x".
Km (i)   KAPPA" be short hand notation for the following: Km0 (i)   H, Km1 (i)
256 Cipher BETA   128bits of plaintext.
for (i 0; i<6; i )
BETA   Qi(BETA) for (i 6; i<12; i )
BETA   QBARi(BETA) 128bits of ciphertext
a 256 bit primary key K.  Decryption is identical to encryption except that the sets of quad round keys Kr (i), Km (i) derived from K are used in reverse order as follows.
Km (11 i) } 2.4
In order to avoid confusion when variable keysize operation is used, the name CAST 256 is to be considered synonymous with the name CAST6; this allows a keysize to be appended without ambiguity.
Thus, for example, CAST 256 with a 192 bit key is to be referred to as CAST6  192; where a 256 bit key is explicitly intended,
the name CAST6 256 should be used.
The CAST 256 cipher described in this document is available worldwide on a royalty free and licence free basis for commercial and non  commercial uses.
This entire memo is about security since it describes an algorithm which is specifically intended for cryptographic purposes.
Test Vectors Intermediate Values Known Answer Test.
The data listed is: KEYSIZE the current key length in bits KEY
the key in hexadecimal format PT the plaintext to be encrypted R the quad round number (1 to 12)
ROTK1,ROTK2,ROTK3,ROTK4 the rotation keys for the current quad round MASK1,MASK2,MASK3,MASK4 the masking keys for the current quad round OUT the output of the quad round CT the ciphertext corresponding to the given plaintext.
For each key size, an encryption and the corresponding decryption are shown.
PT 00000000000000000000000000000000 R 1 ROTK1 1c
OUT e2c604af966715811b377f12de19e459 R 2 ROTK1
a28ec9c4 OUT 5375c3be208f38eed0419d98f50dd9b3 R 3 ROTK1 02
MASK3 2e8220ec    MASK4 cd92c34a OUT
OUT af23fd837033dc81a60be8a69865c543 R 5 ROTK1
8850a515 OUT 8b5e011401e1124f731135fa780c59ef R 6 ROTK1
MASK4 8331aed4 OUT 438053fe465c299bcb35f273b10ea71a R 8 ROTK1 07
OUT 79178d5f90187732f8007fd3884cc309 R 10 ROTK1 15
7dfbff4e OUT e9e2b1f23e82479baec3b3b35fdf890f R 11 ROTK1
OUT 1f3270101b2b38adc4818ca2aafc334a R 12 ROTK1
OUT e9e2b1f23e82479baec3b3b35fdf890f R 3 ROTK1
MASK4 c149f70c OUT 438053fe465c299bcb35f273b10ea71a R 6 ROTK1
OUT bdea3985cd08c7902096561b76f20944 R 7 ROTK1 17
OUT af23fd837033dc81a60be8a69865c543 R 9 ROTK1
ef290a58 OUT 732e4ec0f205e39afaf407c956d83728 R 10 ROTK1 02
MASK3 2e8220ec    MASK4 cd92c34a OUT
5375c3be208f38eed0419d98f50dd9b3 R 11 ROTK1 1e
e2c604af966715811b377f12de19e459 R 12 ROTK1 1c
2342bb9efa38542cbed0ac83940ac298bac77a7717942863 PT 00000000000000000000000000000000 R 1 ROTK1
1f MASK1 d7f04aaf    MASK2 76a4b0c2
fe0602c3 OUT 1fd808cfd82ac7354728e719a4cc0ebe R 3
d3507d51934db5335cebdbb550b774b6 R 4 ROTK1 0f
MASK4 a1a19785 OUT fab3a20243c1c67bf1759f40c4b732e8 R 5 ROTK1
42de73d8 OUT cf003a27ba91d2346ddfa8ec76bdf029 R 6 ROTK1
b0470998 OUT 1cedb6d94abb223765f0fb9364a8f07f R 8 ROTK1 09
OUT b3289009a03b021d54cec6628712c165 R 9 ROTK1
a4d8f6d0abd8613d241fff3c2ba02882 R 10 ROTK1 17
a9258551 OUT ca5ad45111a662f740c9a94b1d43dfb6 R 12 ROTK1
OUT ca5ad45111a662f740c9a94b1d43dfb6 R 2 ROTK1
61a3f74a9a5da18d53a25ce8f3302357 R 3 ROTK1 17
e1021ad2 OUT a4d8f6d0abd8613d241fff3c2ba02882 R 4 ROTK1 1b
OUT 1cedb6d94abb223765f0fb9364a8f07f R 6 ROTK1 09
b4fb78a74bbacccbfa45c36c23ed997e R 7 ROTK1 06
OUT cf003a27ba91d2346ddfa8ec76bdf029 R 8 ROTK1
MASK4 a1a19785 OUT d3507d51934db5335cebdbb550b774b6 R 10
a87da0f1 OUT 1fd808cfd82ac7354728e719a4cc0ebe R 11 ROTK1
1f MASK1 d7f04aaf    MASK2 76a4b0c2
fe0602c3 OUT 4d468c8ca43c1ab66eae0bb9062fe876 R 12 ROTK1
PT 00000000000000000000000000000000 R 1 ROTK1 08
MASK4 52d1b516 OUT 7bcc57d80603b6c7b9ca75eea5cb1c2d R 5
OUT 4265774a393a8a32ed78c5c1571893e4 R 9 ROTK1 1a
OUT f4f1322a076d4f5eb2d14dc75815ccf1 R 10 ROTK1
OUT dd9940f4f2e1786ab6f2bdee519a407e R 12 ROTK1
OUT 4f6a2038286897b9c9870136553317fa CT 4f6a2038286897b9c9870136553317fa R 1 ROTK1
MASK4 0579675f OUT dd9940f4f2e1786ab6f2bdee519a407e R
OUT 57c3a554eafe71dc6a33fe0bda83f566 R 3 ROTK1
478097ef OUT f4f1322a076d4f5eb2d14dc75815ccf1 R 4 ROTK1 1a
1b03a108d6f1878e03a62e72c9c97662 R 7 ROTK1 1f
OUT 9477ef6fd7d6fce3dcaa27d6132465ee R 11 ROTK1 0a
OUT f6c3b9a6ffd8a31ce04dbcf7772f1536 R 12 ROTK1
