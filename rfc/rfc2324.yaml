- title: __initial_text__
  contents:
  - '          Hyper Text Coffee Pot Control Protocol (HTCPCP/1.0)

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1998).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes HTCPCP, a protocol for controlling,\n  \
    \ monitoring, and diagnosing coffee pots.\n"
- title: 1. Rationale and Scope
  contents:
  - "1. Rationale and Scope\n   There is coffee all over the world. Increasingly,\
    \ in a world in which\n   computing is ubiquitous, the computists want to make\
    \ coffee. Coffee\n   brewing is an art, but the distributed intelligence of the\
    \ web-\n   connected world transcends art.  Thus, there is a strong, dark, rich\n\
    \   requirement for a protocol designed espressoly for the brewing of\n   coffee.\
    \ Coffee is brewed using coffee pots.  Networked coffee pots\n   require a control\
    \ protocol if they are to be controlled.\n   Increasingly, home and consumer devices\
    \ are being connected to the\n   Internet. Early networking experiments demonstrated\
    \ vending devices\n   connected to the Internet for status monitoring [COKE].\
    \ One of the\n   first remotely _operated_ machine to be hooked up to the Internet,\n\
    \   the Internet Toaster, (controlled via SNMP) was debuted in 1990\n   [RFC2235].\n\
    \   The demand for ubiquitous appliance connectivity that is causing the\n   consumption\
    \ of the IPv4 address space. Consumers want remote control\n   of devices such\
    \ as coffee pots so that they may wake up to freshly\n   brewed coffee, or cause\
    \ coffee to be prepared at a precise time after\n   the completion of dinner preparations.\n\
    \   This document specifies a Hyper Text Coffee Pot Control Protocol\n   (HTCPCP),\
    \ which permits the full request and responses necessary to\n   control all devices\
    \ capable of making the popular caffeinated hot\n   beverages.\n   HTTP 1.1 ([RFC2068])\
    \ permits the transfer of web objects from origin\n   servers to clients. The\
    \ web is world-wide.  HTCPCP is based on HTTP.\n   This is because HTTP is everywhere.\
    \ It could not be so pervasive\n   without being good. Therefore, HTTP is good.\
    \ If you want good coffee,\n   HTCPCP needs to be good. To make HTCPCP good, it\
    \ is good to base\n   HTCPCP on HTTP.\n   Future versions of this protocol may\
    \ include extensions for espresso\n   machines and similar devices.\n"
- title: 2. HTCPCP Protocol
  contents:
  - "2. HTCPCP Protocol\n   The HTCPCP protocol is built on top of HTTP, with the\
    \ addition of a\n   few new methods, header fields and return codes.  All HTCPCP\
    \ servers\n   should be referred to with the \"coffee:\" URI scheme (Section 4).\n"
- title: 2.1 HTCPCP Added Methods
  contents:
  - '2.1 HTCPCP Added Methods

    '
- title: 2.1.1 The BREW method, and the use of POST
  contents:
  - "2.1.1 The BREW method, and the use of POST\n   Commands to control a coffee pot\
    \ are sent from client to coffee\n   server using either the BREW or POST method,\
    \ and a message body with\n   Content-Type set to \"application/coffee-pot-command\"\
    .\n   A coffee pot server MUST accept both the BREW and POST method\n   equivalently.\
    \  However, the use of POST for causing actions to happen\n   is deprecated.\n\
    \   Coffee pots heat water using electronic mechanisms, so there is no\n   fire.\
    \ Thus, no firewalls are necessary, and firewall control policy\n   is irrelevant.\
    \ However, POST may be a trademark for coffee, and so\n   the BREW method has\
    \ been added. The BREW method may be used with\n   other HTTP-based protocols\
    \ (e.g., the Hyper Text Brewery Control\n   Protocol).\n"
- title: 2.1.2 GET method
  contents:
  - "2.1.2 GET method\n   In HTTP, the GET method is used to mean \"retrieve whatever\n\
    \   information (in the form of an entity) identified by the Request-\n   URI.\"\
    \ If the Request-URI refers to a data-producing process, it is\n   the produced\
    \ data which shall be returned as the entity in the\n   response and not the source\
    \ text of the process, unless that text\n   happens to be the output of the process.\n\
    \   In HTCPCP, the resources associated with a coffee pot are physical,\n   and\
    \ not information resources. The \"data\" for most coffee URIs\n   contain no\
    \ caffeine.\n"
- title: 2.1.3 PROPFIND method
  contents:
  - "2.1.3 PROPFIND method\n   If a cup of coffee is data, metadata about the brewed\
    \ resource is\n   discovered using the PROPFIND method [WEBDAV].\n"
- title: 2.1.4 WHEN method
  contents:
  - "2.1.4 WHEN method\n   When coffee is poured, and milk is offered, it is necessary\
    \ for the\n   holder of the recipient of milk to say \"when\" at the time when\n\
    \   sufficient milk has been introduced into the coffee. For this\n   purpose,\
    \ the \"WHEN\" method has been added to HTCPCP. Enough? Say\n   WHEN.\n"
- title: 2.2 Coffee Pot Header fields
  contents:
  - "2.2 Coffee Pot Header fields\n   HTCPCP recommends several HTTP header fields\
    \ and defines some new\n   ones.\n"
- title: 2.2.1 Recommended header fields
  contents:
  - '2.2.1 Recommended header fields

    '
- title: 2.2.1.1 The "safe" response header field.
  contents:
  - "2.2.1.1 The \"safe\" response header field.\n   [SAFE] defines a HTTP response\
    \ header field, \"Safe\", which can be\n   used to indicate that repeating a HTTP\
    \ request is safe. The inclusion\n   of a \"Safe: Yes\" header field allows a\
    \ client to repeat a previous\n   request if the result of the request might be\
    \ repeated.\n   The actual safety of devices for brewing coffee varies widely,\
    \ and\n   may depend, in fact, on conditions in the client rather than just in\n\
    \   the server. Thus, this protocol includes an extension to the \"Safe\"\n  \
    \ response header:\n          Safe                = \"Safe\" \":\" safe-nature\n\
    \          safe-nature         = \"yes\" | \"no\" | conditionally-safe\n     \
    \     conditionally-safe  = \"if-\" safe-condition\n          safe-condition \
    \     = \"user-awake\" | token\n   indication will allow user agents to handle\
    \ retries of some safe\n   requests, in particular safe POST requests, in a more\
    \ user-friendly\n   way.\n"
- title: 2.2.2 New header fields
  contents:
  - '2.2.2 New header fields

    '
- title: 2.2.2.1 The Accept-Additions header field
  contents:
  - "2.2.2.1 The Accept-Additions header field\n   In HTTP, the \"Accept\" request-header\
    \ field is used to specify media\n   types which are acceptable for the response.\
    \ However, in HTCPCP, the\n   response may result in additional actions on the\
    \ part of the\n   automated pot. For this reason, HTCPCP adds a new header field,\n\
    \   \"Accept-Additions\":\n       Accept-Additions = \"Accept-Additions\" \":\"\
    \n                          #( addition-range [ accept-params ] )\n        addition-type\
    \   = ( \"*\"\n                          | milk-type\n                       \
    \   | syrup-type\n                          | sweetener-type\n               \
    \           | spice-type\n                          | alcohol-type\n         \
    \                 ) *( \";\" parameter )\n        milk-type       = ( \"Cream\"\
    \ | \"Half-and-half\" | \"Whole-milk\"\n                          | \"Part-Skim\"\
    \ | \"Skim\" | \"Non-Dairy\" )\n        syrup-type      = ( \"Vanilla\" | \"Almond\"\
    \ | \"Raspberry\"\n                          | \"Chocolate\" )\n        alcohol-type\
    \    = ( \"Whisky\" | \"Rum\" | \"Kahlua\" | \"Aquavit\" )\n"
- title: 2.2.3 Omitted Header Fields
  contents:
  - "2.2.3 Omitted Header Fields\n   No options were given for decaffeinated coffee.\
    \ What's the point?\n"
- title: 2.3 HTCPCP return codes
  contents:
  - "2.3 HTCPCP return codes\n   Normal HTTP return codes are used to indicate difficulties\
    \ of the\n   HTCPCP server. This section identifies special interpretations and\n\
    \   new return codes.\n"
- title: 2.3.1 406 Not Acceptable
  contents:
  - "2.3.1 406 Not Acceptable\n   This return code is normally interpreted as \"The\
    \ resource identified\n   by the request is only capable of generating response\
    \ entities which\n   have content characteristics not acceptable according to\
    \ the accept\n   headers sent in the request. In HTCPCP, this response code MAY\
    \ be\n   returned if the operator of the coffee pot cannot comply with the\n \
    \  Accept-Addition request. Unless the request was a HEAD request, the\n   response\
    \ SHOULD include an entity containing a list of available\n   coffee additions.\n\
    \   In practice, most automated coffee pots cannot currently provide\n   additions.\n"
- title: 2.3.2 418 I'm a teapot
  contents:
  - "2.3.2 418 I'm a teapot\n   Any attempt to brew coffee with a teapot should result\
    \ in the error\n   code \"418 I'm a teapot\". The resulting entity body MAY be\
    \ short and\n   stout.\n"
- title: 3. The "coffee" URI scheme
  contents:
  - "3. The \"coffee\" URI scheme\n   Because coffee is international, there are international\
    \ coffee URI\n   schemes.  All coffee URL schemes are written with URL encoding\
    \ of the\n   UTF-8 encoding of the characters that spell the word for \"coffee\"\
    \ in\n   any of 29 languages, following the conventions for\n   internationalization\
    \ in URIs [URLI18N].\n"
- title: coffee-url  =  coffee-scheme ":" [ "//" host ]
  contents:
  - "coffee-url  =  coffee-scheme \":\" [ \"//\" host ]\n                [\"/\" pot-designator\
    \ ] [\"?\" additions-list ]\n"
- title: coffee-scheme = ( "koffie"                      ; Afrikaans, Dutch
  contents:
  - "coffee-scheme = ( \"koffie\"                      ; Afrikaans, Dutch\n      \
    \            | \"q%C3%A6hv%C3%A6\"          ; Azerbaijani\n                  |\
    \ \"%D9%82%D9%87%D9%88%D8%A9\" ; Arabic\n               | \"akeita\"         \
    \          ; Basque\n               | \"koffee\"                   ; Bengali\n\
    \               | \"kahva\"                    ; Bosnian\n               | \"\
    kafe\"                     ; Bulgarian, Czech\n               | \"caf%C3%E8\"\
    \                ; Catalan, French, Galician\n                  | \"%E5%92%96%E5%95%A1\"\
    \       ; Chinese\n                  | \"kava\"                     ; Croatian\n\
    \               | \"k%C3%A1va                 ; Czech\n               | \"kaffe\"\
    \                    ; Danish, Norwegian, Swedish\n               | \"coffee\"\
    \                   ; English\n               | \"kafo\"                     ;\
    \ Esperanto\n                  | \"kohv\"                     ; Estonian\n   \
    \            | \"kahvi\"                    ; Finnish\n               | \"%4Baffee\"\
    \                 ; German\n               | \"%CE%BA%CE%B1%CF%86%CE%AD\" ; Greek\n\
    \               | \"%E0%A4%95%E0%A5%8C%E0%A4%AB%E0%A5%80\" ; Hindi\n         \
    \      | \"%E3%82%B3%E3%83%BC%E3%83%92%E3%83%BC\" ; Japanese\n               |\
    \ \"%EC%BB%A4%ED%94%BC\"       ; Korean\n               | \"%D0%BA%D0%BE%D1%84%D0%B5\"\
    \ ; Russian\n               | \"%E0%B8%81%E0%B8%B2%E0%B9%81%E0%B8%9F\" ; Thai\n\
    \               )\n   pot-designator = \"pot-\" integer  ; for machines with multiple\
    \ pots\n   additions-list = #( addition )\n   All alternative coffee-scheme forms\
    \ are equivalent.  However, the use\n   of coffee-scheme in various languages\
    \ MAY be interpreted as an\n   indication of the kind of coffee produced by the\
    \ coffee pot.  Note\n   that while URL scheme names are case-independent, capitalization\
    \ is\n   important for German and thus the initial \"K\" must be encoded.\n"
- title: 4. The "message/coffeepot" media type
  contents:
  - "4. The \"message/coffeepot\" media type\n   The entity body of a POST or BREW\
    \ request MUST be of Content-Type\n   \"message/coffeepot\". Since most of the\
    \ information for controlling\n   the coffee pot is conveyed by the additional\
    \ headers, the content of\n   \"message/coffeepot\" contains only a coffee-message-body:\n\
    \   coffee-message-body = \"start\" | \"stop\"\n"
- title: 5. Operational constraints
  contents:
  - "5. Operational constraints\n   This section lays out some of the operational\
    \ issues with deployment\n   of HTCPCP ubiquitously.\n"
- title: 5.1 Timing Considerations
  contents:
  - "5.1 Timing Considerations\n   A robust quality of service is required between\
    \ the coffee pot user\n   and the coffee pot service.  Coffee pots SHOULD use\
    \ the Network Time\n   Protocol [NTP] to synchronize their clocks to a globally\
    \ accurate\n   time standard.\n   Telerobotics has been an expensive technology.\
    \ However, with the\n   advent of the Cambridge Coffee Pot [CAM], the use of the\
    \ web (rather\n   than SNMP) for remote system monitoring and management has been\n\
    \   proven.  Additional coffee pot maintenance tasks might be\n   accomplished\
    \ by remote robotics.\n   Web data is normally static. Therefore to save data\
    \ transmission and\n   time, Web browser programs store each Web page retrieved\
    \ by a user on\n   the user's computer. Thus, if the user wants to return to that\
    \ page,\n   it is now stored locally and does not need to be requested again from\n\
    \   the server. An image used for robot control or for monitoring a\n   changing\
    \ scene is dynamic. A fresh version needs to be retrieved from\n   the server\
    \ each time it is accessed.\n"
- title: 5.2 Crossing firewalls
  contents:
  - "5.2 Crossing firewalls\n   In most organizations HTTP traffic crosses firewalls\
    \ fairly easily.\n   Modern coffee pots do not use fire. However, a \"firewall\"\
    \ is useful\n   for protection of any source from any manner of heat, and not\
    \ just\n   fire. Every home computer network SHOULD be protected by a firewall\n\
    \   from sources of heat. However, remote control of coffee pots is\n   important\
    \ from outside the home. Thus, it is important that HTCPCP\n   cross firewalls\
    \ easily.\n   By basing HTCPCP on HTTP and using port 80, it will get all of HTTP's\n\
    \   firewall-crossing virtues. Of course, the home firewalls will require\n  \
    \ reconfiguration or new versions in order to accommodate HTCPCP-\n   specific\
    \ methods, headers and trailers, but such upgrades will be\n   easily accommodated.\
    \ Most home network system administrators drink\n   coffee, and are willing to\
    \ accommodate the needs of tunnelling\n   HTCPCP.\n"
- title: 6. System management considerations
  contents:
  - "6. System management considerations\n   Coffee pot monitoring using HTTP protocols\
    \ has been an early\n   application of the web.  In the earliest instance, coffee\
    \ pot\n   monitoring was an early (and appropriate) use of ATM networks [CAM].\n\
    \   The traditional technique [CAM] was to attach a frame-grabber to a\n   video\
    \ camera, and feed the images to a web server. This was an\n   appropriate application\
    \ of ATM networks. In this coffee pot\n   installation, the Trojan Room of Cambridge\
    \ University laboratories\n   was used to give a web interface to monitor a common\
    \ coffee pot.  of\n   us involved in related research and, being poor, impoverished\n\
    \   academics, we only had one coffee filter machine between us, which\n   lived\
    \ in the corridor just outside the Trojan Room. However, being\n   highly dedicated\
    \ and hard-working academics, we got through a lot of\n   coffee, and when a fresh\
    \ pot was brewed, it often didn't last long.\n   This service was created as the\
    \ first application to use a new RPC\n   mechanism designed in the Cambridge Computer\
    \ Laboratory - MSRPC2. It\n   runs over MSNL (Multi-Service Network Layer) - a\
    \ network layer\n   protocol designed for ATM networks.\n   Coffee pots on the\
    \ Internet may be managed using the Coffee Pot MIB\n   [CPMIB].\n"
- title: 7. Security Considerations
  contents:
  - "7. Security Considerations\n   Anyone who gets in between me and my morning coffee\
    \ should be\n   insecure.\n   Unmoderated access to unprotected coffee pots from\
    \ Internet users\n   might lead to several kinds of \"denial of coffee service\"\
    \ attacks.\n   The improper use of filtration devices might admit trojan grounds.\n\
    \   Filtration is not a good virus protection method.\n   Putting coffee grounds\
    \ into Internet plumbing may result in clogged\n   plumbing, which would entail\
    \ the services of an Internet Plumber\n   [PLUMB], who would, in turn, require\
    \ an Internet Plumber's Helper.\n   Access authentication will be discussed in\
    \ a separate memo.\n"
- title: 8. Acknowledgements
  contents:
  - "8. Acknowledgements\n   Many thanks to the many contributors to this standard,\
    \ including Roy\n   Fielding, Mark Day, Keith Moore, Carl Uno-Manros, Michael\
    \ Slavitch,\n   and Martin Duerst.  The inspiration of the Prancing Pony, the\
    \ CMU\n   Coke Machine, the Cambridge Coffee Pot, the Internet Toaster, and\n\
    \   other computer controlled remote devices have led to this valuable\n   creation.\n"
- title: 9. References
  contents:
  - "9. References\n   [RFC2068] Fielding, R., Gettys, J., Mogul, J., Frystyk, H.,\
    \ and T.\n   Berners-Lee, \"Hypertext Transfer Protocol -- HTTP/1.1\", RFC 2068,\n\
    \   January 1997.\n   [RFC2186] Wessels, D., and K. Claffy, \"Internet Cache Protocol\
    \ (ICP),\n   version 2,\" RFC 2186, September 1997\n   [CPMIB] Slavitch, M., \"\
    Definitions of Managed Objects for Drip-Type\n   Heated Beverage Hardware Devices\
    \ using SMIv2\", RFC 2325, 1 April\n   1998.\n   [HTSVMP] Q. Stafford-Fraser,\
    \ \"Hyper Text Sandwich Van Monitoring\n   Protocol, Version 3.2\". In preparation.\n\
    \   [RFC2295] Holtman, K., and A. Mutz, \"Transparent Content Negotiation\n  \
    \ in HTTP\", RFC 2295, March 1998.\n   [SAFE] K. Holtman. \"The Safe Response\
    \ Header Field\", September 1997.\n   [CAM] \"The Trojan Room Coffee Machine\"\
    , D. Gordon and M. Johnson,\n   University of Cambridge Computer Lab,\n   <http://www.cl.cam.ac.uk/coffee/coffee.html>\n\
    \   [CBIO] \"The Trojan Room Coffee Pot, a (non-technical) biography\", Q.\n \
    \  Stafford-Fraser, University of Cambridge Computer Lab,\n   <http://www.cl.cam.ac.uk/coffee/qsf/coffee.html>.\n\
    \   [RFC2235] Zakon, R., \"Hobbes' Internet Timeline\", FYI 32, RFC 2230,\n  \
    \ November 1997.  See also\n   <http://www.internode.com.au/images/toaster2.jpg>\n\
    \   [NTP] Mills, D., \"Network Time Protocol (Version 3) Specification,\n   Implementation\
    \ and Analysis\", RFC 1305, March 1992.\n   [URLI18N] Masinter, L., \"Using UTF8\
    \ for non-ASCII Characters in\n   Extended URIs\" Work in Progress.\n   [PLUMB]\
    \ B. Metcalfe, \"Internet Plumber of the Year: Jim Gettys\",\n   Infoworld, February\
    \ 2, 1998.\n   [COKE] D. Nichols, \"Coke machine history\", C. Everhart, \"Interesting\n\
    \   uses of networking\", <http://www-\n   cse.ucsd.edu/users/bsy/coke.history.txt>.\n"
- title: 10. Author's Address
  contents:
  - "10. Author's Address\n   Larry Masinter\n   Xerox Palo Alto Research Center\n\
    \   3333 Coyote Hill Road\n   Palo Alto, CA 94304\n   EMail: masinter@parc.xerox.com\n"
- title: 11.  Full Copyright Statement
  contents:
  - "11.  Full Copyright Statement\n   Copyright (C) The Internet Society (1998).\
    \  All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
