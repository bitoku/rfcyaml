- title: __initial_text__
  contents:
  - '                       Time Capability in NETCONF

    '
- title: Abstract
  contents:
  - "Abstract\n   This document defines a capability-based extension to the Network\n\
    \   Configuration Protocol (NETCONF) that allows time-triggered\n   configuration\
    \ and management operations.  This extension allows\n   NETCONF clients to invoke\
    \ configuration updates according to\n   scheduled times and allows NETCONF servers\
    \ to attach timestamps to\n   the data they send to NETCONF clients.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for examination, experimental implementation, and\n   evaluation.\n\
    \   This document defines an Experimental Protocol for the Internet\n   community.\
    \  This document is a product of the Internet Engineering\n   Task Force (IETF).\
    \  It represents the consensus of the IETF\n   community.  It has received public\
    \ review and has been approved for\n   publication by the Internet Engineering\
    \ Steering Group (IESG).  Not\n   all documents approved by the IESG are a candidate\
    \ for any level of\n   Internet Standard; see Section 2 of RFC 5741.\n   Information\
    \ about the current status of this document, any errata,\n   and how to provide\
    \ feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7758.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2016 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................4\n\
    \   2. Conventions Used in This Document ...............................4\n  \
    \    2.1. Key Words ..................................................4\n    \
    \  2.2. Abbreviations ..............................................5\n      2.3.\
    \ Terminology ................................................5\n   3. Using Time\
    \ in NETCONF ...........................................5\n      3.1. The Time\
    \ Capability in a Nutshell ..........................5\n      3.2. Notifications\
    \ and Cancellation Messages ....................7\n      3.3. Synchronization\
    \ Aspects ....................................9\n      3.4. Scheduled Time Format\
    \ .....................................10\n      3.5. Scheduling Tolerance ......................................10\n\
    \      3.6. Scheduling the Near vs. Far Future ........................11\n  \
    \    3.7. Time-Interval Format ......................................13\n   4.\
    \ Time Capability ................................................14\n      4.1.\
    \ Overview ..................................................14\n      4.2. Dependencies\
    \ ..............................................14\n      4.3. Capability Identifier\
    \ .....................................14\n      4.4. New Operations ............................................14\n\
    \      4.5. Modifications to Existing Operations ......................15\n  \
    \         4.5.1. Affected Operations ................................15\n    \
    \       4.5.2. Processing Scheduled Operations ....................16\n      4.6.\
    \ Interactions with Other Capabilities ......................16\n   5. Examples\
    \ .......................................................17\n      5.1. <scheduled-time>\
    \ Example ..................................17\n      5.2. <get-time> Example\
    \ ........................................18\n      5.3. Error Example .............................................19\n\
    \   6. Security Considerations ........................................19\n  \
    \    6.1. General Security Considerations ...........................19\n    \
    \  6.2. YANG Module Security Considerations .......................20\n   7. IANA\
    \ Considerations ............................................21\n   8. References\
    \ .....................................................22\n      8.1. Normative\
    \ References ......................................22\n      8.2. Informative\
    \ References ....................................22\n   Appendix A. YANG Module\
    \ for the Time Capability ...................24\n   Acknowledgments ...................................................32\n\
    \   Authors' Addresses ................................................32\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The Network Configuration Protocol (NETCONF), defined in\
    \ [RFC6241],\n   provides mechanisms to install, manipulate, and delete the\n\
    \   configuration of network devices.  NETCONF allows clients to\n   configure\
    \ and monitor NETCONF servers using remote procedure calls\n   (RPCs).\n   NETCONF\
    \ is asynchronous; when a client invokes an RPC, it has no\n   control over the\
    \ time at which the RPC is executed, nor does it have\n   any feedback from the\
    \ server about the execution time.\n   Time-based configuration ([OneClock] [Time4])\
    \ can be a useful tool\n   that enables an entire class of coordinated and scheduled\n\
    \   configuration procedures.  Time-triggered configuration allows\n   coordinated\
    \ network updates in multiple devices; a client can invoke\n   a coordinated configuration\
    \ change by sending RPCs to multiple\n   servers with the same scheduled execution\
    \ time.  A client can also\n   invoke a time-based sequence of updates by sending\
    \ n RPCs with n\n   different update times, T1, T2, ..., Tn, determining the order\
    \ in\n   which the RPCs are executed.\n   This memo defines the :time capability\
    \ in NETCONF.  This extension\n   allows clients to determine the scheduled execution\
    \ time of RPCs they\n   send.  It also allows a server that receives an RPC to\
    \ report its\n   actual execution time to the client.\n   The NETCONF time capability\
    \ is intended for scheduling RPCs that\n   should be performed in the near future,\
    \ allowing the coordination of\n   simultaneous configuration changes or specification\
    \ of an order of\n   configuration updates.  Time-of-day-based policies and far-future\n\
    \   scheduling, e.g., [Cond], are outside the scope of this memo.\n   This memo\
    \ is defined for experimental purposes and will allow the\n   community to experiment\
    \ with the NETCONF time capability.  Based on\n   the lessons learned from this\
    \ experience, it is expected that the\n   NETCONF working group will be able to\
    \ consider whether to adopt the\n   time capability.\n"
- title: 2.  Conventions Used in This Document
  contents:
  - '2.  Conventions Used in This Document

    '
- title: 2.1.  Key Words
  contents:
  - "2.1.  Key Words\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and\
    \ \"OPTIONAL\" in this\n   document are to be interpreted as described in [RFC2119].\n"
- title: 2.2.  Abbreviations
  contents:
  - "2.2.  Abbreviations\n   NETCONF  Network Configuration Protocol\n   RPC     \
    \ Remote Procedure Call\n"
- title: 2.3.  Terminology
  contents:
  - "2.3.  Terminology\n   o  Capability [RFC6241]: A functionality that supplements\
    \ the base\n      NETCONF specification.\n   o  Client [RFC6241]: Invokes protocol\
    \ operations on a server.  In\n      addition, a client can subscribe to receive\
    \ notifications from a\n      server.\n   o  Execution time: The execution time\
    \ of an RPC is defined as the\n      time at which a server completes the execution\
    \ of an RPC, before\n      it sends the <rpc-reply> message.\n   o  Scheduled\
    \ RPC: an RPC that is scheduled to be performed at a\n      predetermined time,\
    \ which is included in the <rpc> message.\n   o  Scheduled time: The scheduled\
    \ time of an RPC is the time at which\n      the RPC should be started, as determined\
    \ by the client.  It is the\n      server's role to enforce the execution of the\
    \ scheduled time.\n   o  Server [RFC6241]: Executes protocol operations invoked\
    \ by a\n      client.  In addition, a server can send notifications to a client.\n"
- title: 3.  Using Time in NETCONF
  contents:
  - '3.  Using Time in NETCONF

    '
- title: 3.1.  The Time Capability in a Nutshell
  contents:
  - "3.1.  The Time Capability in a Nutshell\n   The :time capability provides two\
    \ main functions:\n   o  Scheduling:\n      When a client sends an RPC to a server,\
    \ the <rpc> message MAY\n      include the scheduled-time element, denoted by\
    \ Ts in Figure 1.\n      The server then executes the RPC at the scheduled time\
    \ Ts; once\n      completed, the server can respond with an RPC reply message.\n\
    \   o  Reporting:\n      When a client sends an RPC to a server, the <rpc> message\
    \ MAY\n      include a get-time element (see Figure 2), requesting the server\n\
    \      to return the execution time of the RPC.  In this case, after the\n   \
    \   server performs the RPC, it responds with an RPC reply that\n      includes\
    \ the execution time, Te.\n                      RPC _________\n             \
    \       executed       \\\n                                   \\/\n          \
    \                         Ts\n            server  ---------------+-------------\
    \        ----> time\n                              /\\      \\\n             \
    \             rpc /        \\ rpc-reply\n                         (Ts)/      \
    \    \\\n                            /           \\/\n            client  -----------------------------\n\
    \            Figure 1: Scheduled RPC\n                   RPC _________\n     \
    \            executed       \\\n                                \\/\n        \
    \                        Te\n            server  ------------+----------------\
    \        ----> time\n                              /\\   \\\n                \
    \       rpc    /     \\ rpc-reply\n                   (get-time)/       \\ (Te)\n\
    \                            /        \\/\n            client  -----------------------------\n\
    \            Figure 2: Reporting the Execution Time of an RPC\n   Example 1. \
    \ A client needs to trigger a commit at n servers, so that\n   the n servers perform\
    \ the commit as close as possible to\n   simultaneously.  Without the time capability,\
    \ the client sends a\n   sequence of n commit messages; thus, each server performs\
    \ the commit\n   at a different time.  By using the time capability, the client\
    \ can\n   send commit messages that are scheduled to take place at a chosen\n\
    \   time Ts, for example, 5 seconds in the future, causing the servers to\n  \
    \ invoke the commit as close as possible to time Ts.\n   Example 2.  In many applications,\
    \ it is desirable to monitor events\n   or collect statistics regarding a common\
    \ time reference.  A client\n   can send a set of get-config messages that is\
    \ scheduled to be\n   executed at multiple servers at the same time, providing\
    \ a\n   simultaneous system-wide view of the state of the servers.  Moreover,\n\
    \   a client can use the get-time element in its get-config messages,\n   providing\
    \ a time reference to the sampled element.\n   The scenarios of Figures 1 and\
    \ 2 imply that a third scenario can also\n   be supported (Figure 3), where the\
    \ client invokes an RPC that\n   includes a scheduled time, Ts, as well as the\
    \ get-time element.  This\n   allows the client to receive feedback about the\
    \ actual execution\n   time, Te.  Ideally, Ts=Te.  However, the server may execute\
    \ the RPC\n   at a slightly different time than Ts, for example, if the server\
    \ is\n   tied up with other tasks at Ts.\n                      RPC _________\n\
    \                    executed       \\\n                                   \\\
    /\n                                Ts Te\n            server  -------------+-+-------------\
    \        ----> time\n                            /\\        \\\n             \
    \      rpc      /          \\ rpc-reply\n            (Ts + get-time)/        \
    \    \\ (Te)\n                          /             \\/\n            client\
    \  -----------------------------\n            Figure 3: Scheduling and Reporting\n"
- title: 3.2.  Notifications and Cancellation Messages
  contents:
  - "3.2.  Notifications and Cancellation Messages\n   Notifications\n      As illustrated\
    \ in Figure 1, after a scheduled RPC is executed, the\n      server sends an <rpc-reply>.\
    \  The <rpc-reply> may arrive a long\n      period of time after the RPC was sent\
    \ by the client, leaving the\n      client without a clear indication of whether\
    \ the RPC was received.\n      This document defines a new notification, the netconf-scheduled-\n\
    \      message notification, which provides an immediate acknowledgement\n   \
    \   of the scheduled RPC.\n      The <netconf-scheduled-message> notification\
    \ is sent to the client\n      if it is subscribed to the NETCONF notifications\
    \ [RFC6470]; as\n      illustrated in Figure 4, when the server receives a scheduled\
    \ RPC,\n      it sends a notification to the client.\n      The <netconf-scheduled-message>\
    \ notification includes a <schedule-\n      id> element.  The <schedule-id> is\
    \ a unique identifier that the\n      server assigns to every scheduled RPC it\
    \ receives.  Thus, a client\n      can keep track of all the pending scheduled\
    \ RPCs; a client can\n      uniquely identify a scheduled RPC by the tuple {server,\
    \ schedule-\n      id}.\n                      RPC ____________\n            \
    \        executed          \\\n                                      \\/\n   \
    \                                   Ts\n            server  -------------------+---------\
    \        ----> time\n                        /\\  \\            \\\n         \
    \           rpc /    \\notifi-     \\ rpc-reply\n                   (Ts)/    \
    \  \\cation      \\\n                      /       \\/           \\/\n       \
    \     client  -----------------------------\n            Figure 4: Scheduled RPC\
    \ with Notification\n   Cancellation Messages\n      A client can cancel a scheduled\
    \ RPC by sending a <cancel-schedule>\n      RPC.  The <cancel-schedule> RPC includes\
    \ the <schedule-id> of the\n      scheduled RPC that needs to be cancelled.\n\
    \      The <cancel-schedule> RPC, defined in this document, can be used\n    \
    \  to perform a coordinated all-or-none procedure, where either all\n      the\
    \ servers perform the operation on schedule or the operation is\n      aborted.\n\
    \      Example 3.  A client sends scheduled <rpc> messages to server 1\n     \
    \ and server 2, both scheduled to be performed at time Ts.  Server 1\n      sends\
    \ a notification indicating that it has successfully scheduled\n      the RPC,\
    \ while server 2 replies with an unknown-element error\n      [RFC6241] that indicates\
    \ that it does not support the time\n      capability.  The client sends a <cancel-schedule>\
    \ RPC to server 1\n      and receives an <rpc-reply>.  The message exchange between\
    \ the\n      client and server 1 in this example is illustrated in Figure 5.\n\
    \                                RPC not __________\n                        \
    \        executed          \\\n                                              \
    \    \\/\n                                                   Ts\n            server\
    \  --------------------------------+---      ----> time\n                    \
    \    /\\ \\            /\\        \\\n                    rpc /   \\notifi-  \
    \  /cancel-   \\ rpc-reply\n                   (Ts)/     \\cation   /schedule\
    \    \\\n                      /      \\/       /             \\/\n          \
    \  client  ------------------------------------\n                  Figure 5: Cancellation\
    \ Message\n   A <cancel-schedule> RPC MUST NOT include the scheduled-time\n  \
    \ parameter.  A server that receives a <cancel-schedule> RPC should try\n   to\
    \ cancel the schedule as soon as possible.  If the server is unable\n   to cancel\
    \ the scheduled RPC, for example, because it has already been\n   executed, it\
    \ should respond with an <rpc-error> [RFC6241], in which\n   the error-type is\
    \ 'protocol', and the error-tag is 'operation-\n   failed'.\n"
- title: 3.3.  Synchronization Aspects
  contents:
  - "3.3.  Synchronization Aspects\n   The time capability defined in this document\
    \ requires clients and\n   servers to maintain clocks.  It is assumed that clocks\
    \ are\n   synchronized by a method that is outside the scope of this document,\n\
    \   e.g., [RFC5905] or [IEEE1588].\n   This document does not define any requirements\
    \ pertaining to the\n   degree of accuracy of performing scheduled RPCs.  Note\
    \ that two\n   factors affect how accurately the server can perform a scheduled\
    \ RPC:\n   one factor is the accuracy of the clock synchronization method used\n\
    \   to synchronize the clients and servers and the second factor is the\n   server's\
    \ ability to execute real-time configuration changes, which\n   greatly depends\
    \ on how it is implemented.  Typical networking devices\n   are implemented by\
    \ a combination of hardware and software.  While the\n   execution time of a hardware\
    \ module can typically be predicted with a\n   high level of accuracy, the execution\
    \ time of a software module may\n   be variable and hard to predict.  A configuration\
    \ update would\n   typically require the server's software to be involved, thus\n\
    \   affecting how accurately the RPC can be scheduled.\n   Another important aspect\
    \ of synchronization is monitoring; a client\n   should be able to check whether\
    \ a server is synchronized to a\n   reference time source.  Typical synchronization\
    \ protocols, such as\n   the Network Time Protocol [RFC5905], provide the means\
    \ ([RFC5907],\n   [RFC7317]) to verify that a clock is synchronized to a time\
    \ reference\n   by querying its Management Information Base (MIB).  The get-time\n\
    \   feature defined in this document (see Figure 2) allows a client to\n   obtain\
    \ a rough estimate of the time offset between the client's clock\n   and the server's\
    \ clock.\n   Since servers do not perform configuration changes instantaneously,\n\
    \   the processing time of an RPC should not be overlooked.  The\n   scheduled\
    \ time always refers to the start time of the RPC, and the\n   execution time\
    \ always refers to its completion time.\n"
- title: 3.4.  Scheduled Time Format
  contents:
  - "3.4.  Scheduled Time Format\n   The scheduled time and execution time fields\
    \ in <rpc> messages use a\n   common time format field.\n   The time format used\
    \ in this document is the date-and-time format,\n   defined in Section 5.6 of\
    \ [RFC3339] and Section 3 of [RFC6991].\n       leaf scheduled-time {\n      \
    \   type yang:date-and-time;\n         description\n         \"The time at which\
    \ the RPC is scheduled to be performed.\";\n       }\n       leaf execution-time\
    \ {\n         type yang:date-and-time;\n         description\n         \"The time\
    \ at which the RPC was executed.\";\n       }\n"
- title: 3.5.  Scheduling Tolerance
  contents:
  - "3.5.  Scheduling Tolerance\n   When a client sends an RPC that is scheduled to\
    \ Ts, the server MUST\n   verify that the value Ts is not too far in the past\
    \ or in the future.\n   As illustrated in Figure 6, the server verifies that Ts\
    \ is within the\n   scheduling-tolerance range.\n                  RPC _________\n\
    \                received       \\\n                               \\/\n     \
    \                                Ts\n            -----+--------------+-----+------------+------->\
    \ time\n                  <------------> <---------------->\n                \
    \  sched-max-past  sched-max-future\n                  <------------------------------->\n\
    \                       scheduling tolerance\n               Figure 6: Scheduling\
    \ Tolerance\n   The scheduling tolerance is determined by two parameters: sched-max-\n\
    \   future and sched-max-past.  These two parameters use the time-\n   interval\
    \ format (Section 3.7.), and their default value is 15\n   seconds.\n   If the\
    \ scheduled time, Ts, is within the scheduling-tolerance range,\n   the scheduled\
    \ RPC is performed; if Ts occurs in the past and within\n   the scheduling tolerance,\
    \ the server performs the RPC as soon as\n   possible; whereas if Ts is a future\
    \ time, the server performs the RPC\n   at Ts.\n   If Ts is not within the scheduling-tolerance\
    \ range, the scheduled RPC\n   is discarded, and the server responds with an error\
    \ message [RFC6241]\n   including a bad-element error-tag.  An example is provided\
    \ in Section\n   5.3.\n"
- title: 3.6.  Scheduling the Near vs. Far Future
  contents:
  - "3.6.  Scheduling the Near vs. Far Future\n   The scheduling bound defined by\
    \ sched-max-future guarantees that\n   every scheduled RPC is restricted to a\
    \ scheduling time in the near\n   future.\n   The scheduling mechanism defined\
    \ in this document is intended for\n   near-future scheduling, on the order of\
    \ seconds.  Far-future\n   scheduling is outside the scope of this document.\n\
    \   Example 1 is a typical example of using near-future scheduling; the\n   goal\
    \ in the example is to perform the RPC at multiple servers at the\n   same time;\
    \ therefore, it is best to schedule the RPC to be performed\n   a few seconds\
    \ in the future.\n   The Challenges of Far-Future Scheduling\n      When an RPC\
    \ is scheduled to be performed at a far-future time,\n      during the long period\
    \ between the time at which the RPC is sent\n      and the time at which it is\
    \ scheduled to be executed, the\n      following erroneous events may occur:\n\
    \      o  The server may restart.\n      o  The client's authorization level may\
    \ be changed.\n      o  The client may restart and send a conflicting RPC.\n \
    \     o  A different client may send a conflicting RPC.\n      In these cases,\
    \ if the server performs the scheduled operation, it\n      may perform an action\
    \ that is inconsistent with the current\n      network policy or inconsistent\
    \ with the currently active clients.\n      Near-future scheduling guarantees\
    \ that external events, such as\n      the examples above, have a low probability\
    \ of occurring during the\n      sched-max-future period, and even when they do,\
    \ the period of\n      inconsistency is limited to sched-max-future, which is\
    \ a short\n      period of time.\n   The Trade-off in Setting the sched-max-future\
    \ Value\n      The sched-max-future parameter should be configured to a value\n\
    \      that is high enough to allow the client to:\n      1. Send the scheduled\
    \ RPC, potentially to multiple servers.\n      2. Receive notifications or <rpc-error>\
    \ messages from the\n         server(s) or wait for a timeout and decide that\
    \ if no response\n         has arrived then something is wrong.\n      3. If necessary,\
    \ send a cancellation message, potentially to\n         multiple servers.\n  \
    \    On the other hand, sched-max-future should be configured to a\n      value\
    \ that is low enough to allow a low probability of the\n      erroneous events\
    \ above, typically on the order of a few seconds.\n      Note that, even if sched-max-future\
    \ is configured to a low value,\n      it is still possible (with a low probability)\
    \ that an erroneous\n      event will occur.  However, this short, potentially\
    \ hazardous\n      period is not significantly worse than in conventional\n  \
    \    (unscheduled) RPCs, as even a conventional RPC may in some cases\n      be\
    \ executed a few seconds after it was sent by the client.\n   The Default Value\
    \ of sched-max-future\n      The default value of sched-max-future is defined\
    \ to be 15 seconds.\n      This duration is long enough to allow the scheduled\
    \ RPC to be sent\n      by the client, potentially to multiple servers, and in\
    \ some cases\n      to send a cancellation message, as described in Section 3.2.\
    \  On\n      the other hand, the 15-second duration yields a very low\n      probability\
    \ of a reboot or a permission change.\n"
- title: 3.7.  Time-Interval Format
  contents:
  - "3.7.  Time-Interval Format\n   The time-interval format is used for representing\
    \ the length of a\n   time interval and is based on the date-and-time format.\
    \  It is used\n   for representing the scheduling tolerance parameters, as described\
    \ in\n   the previous section.\n   While the date-and-time type uniquely represents\
    \ a specific point in\n   time, the time-interval type defined below can be used\
    \ to represent\n   the length of a time interval without specifying a specific\
    \ date.\n   The time-interval type is defined as follows:\n      typedef time-interval\
    \ {\n        type string {\n          pattern '\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?';\n\
    \        }\n        description\n          \"Defines a time interval, up to 24\
    \ hours.\n           The format is specified as HH:mm:ss.f,\n           consisting\
    \ of two digits for hours,\n           two digits for minutes, two digits\n  \
    \         for seconds, and zero or more digits\n           representing second\
    \ fractions.\";\n      }\n   Example\n   The sched-max-future parameter is defined\
    \ (Appendix A) as a time-\n   interval, as follows:\n      leaf sched-max-future\
    \ {\n        type time-interval;\n        default 00:00:15.0;\n      }\n   The\
    \ default value specified for sched-max-future is 0 hours, 0\n   minutes, and\
    \ 15 seconds.\n"
- title: 4.  Time Capability
  contents:
  - "4.  Time Capability\n   The structure of this section is as defined in Appendix\
    \ D of\n   [RFC6241].\n"
- title: 4.1.  Overview
  contents:
  - "4.1.  Overview\n   A server that supports the time capability can perform time-triggered\n\
    \   operations as defined in this document.\n   A server implementing the :time\
    \ capability:\n   o  MUST support the ability to receive <rpc> messages that include\
    \ a\n      time element and perform a time-triggered operation accordingly.\n\
    \   o  MUST support the ability to include a time element in the <rpc-\n     \
    \ reply> messages that it transmits.\n"
- title: 4.2.  Dependencies
  contents:
  - "4.2.  Dependencies\n   With-defaults Capability\n      The time-capability YANG\
    \ module (Appendix A) uses default values;\n      thus, it is assumed that the\
    \ with-defaults capability [RFC6243] is\n      supported.\n"
- title: 4.3.  Capability Identifier
  contents:
  - "4.3.  Capability Identifier\n   The :time capability is identified by the following\
    \ capability\n   string:\n   urn:ietf:params:netconf:capability:time:1.0\n"
- title: 4.4.  New Operations
  contents:
  - "4.4.  New Operations\n   <cancel-schedule>\n      The <cancel-schedule> RPC is\
    \ used for cancelling an RPC that was\n      previously scheduled.\n      A <cancel-schedule>\
    \ RPC MUST include the <cancelled-message-id>\n      element, which specifies\
    \ the message ID of the scheduled RPC that\n      needs to be cancelled.\n   \
    \   A <cancel-schedule> RPC MAY include the <get-time> element.  In\n      this\
    \ case, the <rpc-reply> includes the <execution-time> element,\n      specifying\
    \ the time at which the scheduled RPC was cancelled.\n"
- title: 4.5.  Modifications to Existing Operations
  contents:
  - '4.5.  Modifications to Existing Operations

    '
- title: 4.5.1.  Affected Operations
  contents:
  - "4.5.1.  Affected Operations\n   The :time capability defined in this memo can\
    \ be applied to any of\n   the following operations:\n   o  get-config\n   o \
    \ get\n   o  copy-config\n   o  edit-config\n   o  delete-config\n   o  lock\n\
    \   o  unlock\n   o  commit\n   Three new elements are added to each of these\
    \ operations:\n   o  <scheduled-time> This element is added to the input of each\n\
    \      operation, indicating the time at which the server is scheduled to\n  \
    \    invoke the operation.  Every <rpc> message MAY include the\n      <scheduled-time>\
    \ element.  A server that supports the :time\n      capability and receives an\
    \ <rpc> message with a <scheduled-time>\n      element MUST perform the operation\
    \ as close as possible to the\n      scheduled time.\n      The <scheduled-time>\
    \ element uses the date-and-time format\n      (Section 3.4.).\n   o  <get-time>\
    \ This element is added to the input of each operation.\n      An <rpc> message\
    \ MAY include a <get-time> element, indicating that\n      the server MUST include\
    \ an <execution-time> element in its\n      corresponding <rpc-reply>.\n   o \
    \ <execution-time> This element is added to the output of each\n      operation,\
    \ indicating the time at which the server completed the\n      operation.  An\
    \ <rpc-reply> MAY include the <execution-time>\n      element.  A server that\
    \ supports the :time capability and receives\n      an operation with the <get-time>\
    \ element MUST include the\n      execution time in its response.\n      The <execution-time>\
    \ element uses the date-and-time format\n      (Section 3.4.).\n"
- title: 4.5.2.  Processing Scheduled Operations
  contents:
  - "4.5.2.  Processing Scheduled Operations\n   A server that receives a scheduled\
    \ RPC MUST start executing the RPC\n   as close as possible to its scheduled execution\
    \ time.\n   If a session between a client and a server is terminated, the server\n\
    \   MUST cancel all pending scheduled RPCs that were received in this\n   session.\n\
    \   Scheduled RPCs are processed serially, in an order that is defined by\n  \
    \ their scheduled times.  Thus, the server sends <rpc-reply> messages\n   to scheduled\
    \ RPCs according to the order of their corresponding\n   schedules.  Note that\
    \ this is a modification to the behavior defined\n   in [RFC6241], which states\
    \ that replies are sent in the order the\n   requests were received.  Interoperability\
    \ with [RFC6241] is\n   guaranteed by the NETCONF capability exchange; a server\
    \ that does not\n   support the :time capability responds to RPCs in the order\
    \ the\n   requests were received.  A server that supports the :time capability\n\
    \   replies to conventional (non-scheduled) RPCs in the order they were\n   received\
    \ and replies to scheduled RPCs in the order of their\n   scheduled times.\n \
    \  If a server receives two or more RPCs that are scheduled to be\n   performed\
    \ at the same time, the server executes the RPCs serially in\n   an arbitrary\
    \ order.\n"
- title: 4.6.  Interactions with Other Capabilities
  contents:
  - "4.6.  Interactions with Other Capabilities\n   Confirmed Commit Capability\n\
    \      The confirmed commit capability is defined in Section 8.4 of\n      [RFC6241].\
    \  According to that document, a confirmed <commit>\n      operation MUST be reverted\
    \ if a confirming commit is not issued\n      within the timeout period (which\
    \ is 600 seconds by default).\n      When the time capability is supported, and\
    \ a confirmed <commit>\n      operation is used with the <scheduled-time> element,\
    \ the\n      confirmation timeout MUST be counted from the scheduled time,\n \
    \     i.e., the client begins the timeout measurement starting at the\n      scheduled\
    \ time.\n"
- title: 5.  Examples
  contents:
  - '5.  Examples

    '
- title: 5.1.  <scheduled-time> Example
  contents:
  - "5.1.  <scheduled-time> Example\n   The following example extends the example\
    \ presented in Section 7.2 of\n   [RFC6241] by adding the time capability.  In\
    \ this example, the\n   <scheduled-time> element is used to specify the scheduled\
    \ execution\n   time of the configuration update (as shown in Figure 1).\n   <rpc\
    \ message-id=\"101\"\n       xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    >\n     <edit-config>\n       <target>\n         <running/>\n       </target>\n\
    \       <scheduled-time\n          xmlns=\"urn:ietf:params:xml:ns:yang:ietf-netconf-time\"\
    >\n           2015-10-21T04:29:00.235Z\n       </scheduled-time>\n       <config>\n\
    \         <top xmlns=\"http://example.com/schema/1.2/config\">\n           <interface>\n\
    \             <name>Ethernet0/0</name>\n             <mtu>1500</mtu>\n       \
    \    </interface>\n         </top>\n       </config>\n     </edit-config>\n  \
    \ </rpc>\n   <rpc-reply message-id=\"101\"\n        xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    >\n     <ok/>\n   </rpc-reply>\n"
- title: 5.2.  <get-time> Example
  contents:
  - "5.2.  <get-time> Example\n   The following example is similar to the one presented\
    \ in Section 5.1,\n   except that, in this example, the client includes a <get-time>\n\
    \   element in its RPC and the server consequently responds with an\n   <execution-time>\
    \ element (as shown in Figure 2).\n   <rpc message-id=\"101\"\n       xmlns=\"\
    urn:ietf:params:xml:ns:netconf:base:1.0\">\n     <edit-config>\n       <target>\n\
    \         <running/>\n       </target>\n       <get-time\n        xmlns=\"urn:ietf:params:xml:ns:yang:ietf-netconf-time\"\
    >\n       </get-time>\n       <config>\n         <top xmlns=\"http://example.com/schema/1.2/config\"\
    >\n           <interface>\n             <name>Ethernet0/0</name>\n           \
    \  <mtu>1500</mtu>\n           </interface>\n         </top>\n       </config>\n\
    \     </edit-config>\n   </rpc>\n   <rpc-reply message-id=\"101\"\n        xmlns=\"\
    urn:ietf:params:xml:ns:netconf:base:1.0\">\n     <ok/>\n     <execution-time>\n\
    \         2015-10-21T04:29:00.235Z\n     </execution-time>\n   </rpc-reply>\n"
- title: 5.3.  Error Example
  contents:
  - "5.3.  Error Example\n   The following example presents a scenario in which the\
    \ scheduled-time\n   is not within the scheduling tolerance, i.e., it is too far\
    \ in the\n   past; therefore, an <rpc-error> is returned.\n   <rpc message-id=\"\
    101\"\n       xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\">\n     <edit-config>\n\
    \       <target>\n         <running/>\n       </target>\n       <scheduled-time\n\
    \          xmlns=\"urn:ietf:params:xml:ns:yang:ietf-netconf-time\">\n        \
    \   2010-10-21T04:29:00.235Z\n       </scheduled-time>\n       <config>\n    \
    \     <top xmlns=\"http://example.com/schema/1.2/config\">\n           <interface>\n\
    \             <name>Ethernet0/0</name>\n             <mtu>1500</mtu>\n       \
    \    </interface>\n         </top>\n       </config>\n     </edit-config>\n  \
    \ </rpc>\n   <rpc-reply message-id=\"101\"\n        xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    >\n     <rpc-error>\n       <error-type>application</error-type>\n       <error-tag>bad-element</error-tag>\n\
    \       <error-severity>error</error-severity>\n       <error-info>\n        \
    \ <bad-element>scheduled-time</bad-element>\n       </error-info>\n     </rpc-error>\n\
    \   </rpc-reply>\n"
- title: 6.  Security Considerations
  contents:
  - '6.  Security Considerations

    '
- title: 6.1.  General Security Considerations
  contents:
  - "6.1.  General Security Considerations\n   The security considerations of the\
    \ NETCONF protocol in general are\n   discussed in [RFC6241].\n   The usage of\
    \ the time capability defined in this document can assist\n   an attacker in gathering\
    \ information about the system, such as the\n   exact time of future configuration\
    \ changes.  Moreover, the time\n   elements can potentially allow an attacker\
    \ to learn information about\n   the system's performance.  Furthermore, an attacker\
    \ that sends\n   malicious <rpc> messages can use the time capability to amplify\
    \ her\n   attack; for example, by sending multiple <rpc> messages with the same\n\
    \   scheduled time.  It is important to note that the security measures\n   described\
    \ in [RFC6241] can prevent these vulnerabilities.\n   The time capability relies\
    \ on an underlying time synchronization\n   protocol.  Thus, by attacking the\
    \ time protocol, an attack can\n   potentially compromise NETCONF when using the\
    \ time capability.  A\n   detailed discussion about the threats against time protocols\
    \ and how\n   to mitigate them is presented in [RFC7384].\n   The time capability\
    \ can allow an attacker to attack a NETCONF server\n   by sending malicious RPCs\
    \ that are scheduled to take place in the\n   future.  For example, an attacker\
    \ can send multiple scheduled RPCs\n   that are scheduled to be performed at the\
    \ same time.  Another\n   possible attack is to send a large number of scheduled\
    \ RPCs to a\n   NETCONF server, potentially causing the server's buffers to overflow.\n\
    \   These attacks can be mitigated by a carefully designed NETCONF\n   server;\
    \ when a server receives a scheduled RPC that exceeds its\n   currently available\
    \ resources, it should reply with an <rpc-error>\n   and discard the scheduled\
    \ RPC.\n   Note that if an attacker has been detected and revoked, its future\n\
    \   scheduled RPCs are not executed; as defined in Section 4.5.2, once\n   the\
    \ session with the attacker has been terminated, the corresponding\n   scheduled\
    \ RPCs are discarded.\n"
- title: 6.2.  YANG Module Security Considerations
  contents:
  - "6.2.  YANG Module Security Considerations\n   This memo defines a new YANG module,\
    \ as specified in Appendix A.\n   The YANG module defined in this memo is designed\
    \ to be accessed via\n   the NETCONF protocol [RFC6241].  The lowest NETCONF layer\
    \ is the\n   secure transport layer and the mandatory-to-implement secure\n  \
    \ transport is Secure SHell (SSH) [RFC6242].  The NETCONF access\n   control model\
    \ [RFC6536] provides the means to restrict access for\n   particular NETCONF users\
    \ to a preconfigured subset of all available\n   NETCONF protocol operations and\
    \ content.\n   This YANG module defines <sched-max-future> and <sched-max-past>,\n\
    \   which are writable/creatable/deletable.  These data nodes may be\n   considered\
    \ sensitive or vulnerable in some network environments.  An\n   attacker may attempt\
    \ to maliciously configure these parameters to a\n   low value, thereby causing\
    \ all scheduled RPCs to be discarded.  For\n   instance, if a client expects <sched-max-future>\
    \ to be 15 seconds,\n   but in practice it is maliciously configured to 1 second,\
    \ then a\n   legitimate scheduled RPC that is scheduled to be performed 5 seconds\n\
    \   in the future will be discarded by the server.\n   This YANG module defines\
    \ the <cancel-schedule> RPC.  This RPC may be\n   considered sensitive or vulnerable\
    \ in some network environments.\n   Since the value of the <schedule-id> is known\
    \ to all the clients that\n   are subscribed to notifications from the server,\
    \ the <cancel-\n   schedule> RPC may be used maliciously to attack servers by\
    \ cancelling\n   their pending RPCs.  This attack is addressed in two layers:\
    \ (i)\n   security at the transport layer, limiting the attack only to clients\n\
    \   that have successfully initiated a secure session with the server,\n   and\
    \ (ii) the authorization level required to cancel an RPC should be\n   the same\
    \ as the level required to schedule it, limiting the attack\n   only to attackers\
    \ with an authorization level that is equal to or\n   higher than that of the\
    \ client that initiated the scheduled RPC.\n"
- title: 7.  IANA Considerations
  contents:
  - "7.  IANA Considerations\n   The following capability identifier URN has been\
    \ registered in the\n   \"Network Configuration Protocol (NETCONF) Capability\
    \ URNs\" registry:\n      urn:ietf:params:netconf:capability:time:1.0\n   The\
    \ following XML namespace URN has been registered in the \"IETF XML\n   Registry\"\
    , following the format defined in [RFC3688]:\n      URI: urn:ietf:params:xml:ns:yang:ietf-netconf-time\n\
    \      Registrant Contact: The IESG.\n      XML: N/A, the requested URI is an\
    \ XML namespace.\n   The following module name has been registered in the \"YANG\
    \ Module\n   Names\" registry, defined in [RFC6020].\n      name: ietf-netconf-time\n\
    \      prefix: nct\n      namespace: urn:ietf:params:xml:ns:yang:ietf-netconf-time\n\
    \      RFC: 7758\n"
- title: 8.  References
  contents:
  - '8.  References

    '
- title: 8.1.  Normative References
  contents:
  - "8.1.  Normative References\n   [RFC2119]   Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n               Requirement Levels\", BCP 14, RFC 2119,\n \
    \              DOI 10.17487/RFC2119, March 1997,\n               <http://www.rfc-editor.org/info/rfc2119>.\n\
    \   [RFC3339]   Klyne, G. and C. Newman, \"Date and Time on the Internet:\n  \
    \             Timestamps\", RFC 3339, DOI 10.17487/RFC3339, July 2002,\n     \
    \          <http://www.rfc-editor.org/info/rfc3339>.\n   [RFC3688]   Mealling,\
    \ M., \"The IETF XML Registry\", BCP 81,\n               RFC 3688, DOI 10.17487/RFC3688,\
    \ January 2004,\n               <http://www.rfc-editor.org/info/rfc3688>.\n  \
    \ [RFC6241]   Enns, R., Ed., Bjorklund, M., Ed., Schoenwaelder, J.,\n        \
    \       Ed., and A. Bierman, Ed., \"Network Configuration Protocol\n         \
    \      (NETCONF)\", RFC 6241, DOI 10.17487/RFC6241, June 2011,\n             \
    \  <http://www.rfc-editor.org/info/rfc6241>.\n   [RFC6470]   Bierman, A., \"Network\
    \ Configuration Protocol (NETCONF)\n               Base Notifications\", RFC 6470,\
    \ DOI 10.17487/RFC6470,\n               February 2012,\n               <http://www.rfc-editor.org/info/rfc6470>.\n\
    \   [RFC6991]   Schoenwaelder, J., Ed., \"Common YANG Data Types\",\n        \
    \       RFC 6991, DOI 10.17487/RFC6991, July 2013,\n               <http://www.rfc-editor.org/info/rfc6991>.\n"
- title: 8.2.  Informative References
  contents:
  - "8.2.  Informative References\n   [Cond]      Watsen, K., \"Conditional Enablement\
    \ of Configuration\n               Nodes\", draft-kwatsen-conditional-enablement-00,\
    \ Work in\n               Progress, February 2013.\n   [IEEE1588]  IEEE, \"IEEE\
    \ Standard for a Precision Clock\n               Synchronization Protocol for\
    \ Networked Measurement and\n               Control Systems Version 2\", IEEE\
    \ Standard 1588.\n   [OneClock]  Mizrahi, T. and Y. Moses, \"OneClock to Rule\
    \ Them All:\n               Using Time in Networked Applications\", IEEE/IFIP\
    \ Network\n               Operations and Management Symposium (NOMS), 2016.\n\
    \   [RFC5905]   Mills, D., Martin, J., Ed., Burbank, J., and W. Kasch,\n     \
    \          \"Network Time Protocol Version 4: Protocol and Algorithms\n      \
    \         Specification\", RFC 5905,\n               DOI 10.17487/RFC5905, June\
    \ 2010,\n               <http://www.rfc-editor.org/info/rfc5905>.\n   [RFC5907]\
    \   Gerstung, H., Elliott, C., and B. Haberman, Ed.,\n               \"Definitions\
    \ of Managed Objects for Network Time Protocol\n               Version 4 (NTPv4)\"\
    , RFC 5907,\n               DOI 10.17487/RFC5907, June 2010,\n               <http://www.rfc-editor.org/info/rfc5907>.\n\
    \   [RFC6020]   Bjorklund, M., Ed., \"YANG - A Data Modeling Language for\n  \
    \             the Network Configuration Protocol (NETCONF)\",\n              \
    \ RFC 6020, DOI 10.17487/RFC6020, October 2010,\n               <http://www.rfc-editor.org/info/rfc6020>.\n\
    \   [RFC6242]   Wasserman, M., \"Using the NETCONF Protocol over Secure\n    \
    \           Shell (SSH)\", RFC 6242, DOI 10.17487/RFC6242, June 2011,\n      \
    \         <http://www.rfc-editor.org/info/rfc6242>.\n   [RFC6243]   Bierman, A.\
    \ and B. Lengyel, \"With-defaults Capability for\n               NETCONF\", RFC\
    \ 6243, DOI 10.17487/RFC6243, June 2011,\n               <http://www.rfc-editor.org/info/rfc6243>.\n\
    \   [RFC6536]   Bierman, A. and M. Bjorklund, \"Network Configuration\n      \
    \         Protocol (NETCONF) Access Control Model\", RFC 6536, DOI\n         \
    \      10.17487/RFC6536, March 2012,\n               <http://www.rfc-editor.org/info/rfc6536>.\n\
    \   [RFC7317]   Bierman, A. and M. Bjorklund, \"A YANG Data Model for\n      \
    \         System Management\", RFC 7317, DOI 10.17487/RFC7317,\n             \
    \  August 2014, <http://www.rfc-editor.org/info/rfc7317>.\n   [RFC7384]   Mizrahi,\
    \ T., \"Security Requirements of Time Protocols in\n               Packet Switched\
    \ Networks\", RFC 7384,\n               DOI 10.17487/RFC7384, October 2014,\n\
    \               <http://www.rfc-editor.org/info/rfc7384>.\n   [Time4]     Mizrahi,\
    \ T. and Y. Moses, \"Software Defined Networks:\n               It's About Time\"\
    , IEEE INFOCOM, 2016.\n"
- title: Appendix A.  YANG Module for the Time Capability
  contents:
  - "Appendix A.  YANG Module for the Time Capability\n   This section is normative.\n"
- title: <CODE BEGINS> file "ietf-netconf-time@2016-01-26.yang"
  contents:
  - '<CODE BEGINS> file "ietf-netconf-time@2016-01-26.yang"

    '
- title: module ietf-netconf-time {
  contents:
  - "module ietf-netconf-time {\n   namespace \"urn:ietf:params:xml:ns:yang:ietf-netconf-time\"\
    ;\n   prefix nct;\n   import ietf-netconf { prefix nc; }\n   import ietf-yang-types\
    \ { prefix yang; }\n   import ietf-netconf-monitoring { prefix ncm; }\n   organization\n\
    \     \"IETF\";\n   contact\n     \"Editor: Tal Mizrahi\n         <dew@tx.technion.ac.il>\n\
    \      Editor: Yoram Moses\n         <moses@ee.technion.ac.il>\";\n   description\n\
    \     \"This module defines a capability-based extension to the\n      Network\
    \ Configuration Protocol (NETCONF) that allows\n      time-triggered configuration\
    \ and management operations.\n      This extension allows NETCONF clients to invoke\
    \ configuration\n      updates according to scheduled times and allows NETCONF\n\
    \      servers to attach timestamps to the data they send to NETCONF\n      clients.\n\
    \      Copyright (c) 2016 IETF Trust and the persons identified as\n      the\
    \ authors of the code.  All rights reserved.\n      Redistribution and use in\
    \ source and binary forms, with or\n      without modification, is permitted pursuant\
    \ to, and subject\n      to the license terms contained in, the Simplified BSD\
    \ License\n      set forth in Section 4.c of the IETF Trust's Legal Provisions\n\
    \      Relating to IETF Documents\n      (http://trustee.ietf.org/license-info).\"\
    ;\n   revision 2016-01-26 {\n     description\n       \"Initial version.\";\n\
    \     reference\n       \"RFC 7758:\n        Time Capability in NETCONF\";\n \
    \  }\n   typedef time-interval {\n     type string {\n       pattern '\\d{2}:\\\
    d{2}:\\d{2}(\\.\\d+)?';\n     }\n     description\n       \"Defines a time interval,\
    \ up to 24 hours.\n        The format is specified as HH:mm:ss.f,\n        consisting\
    \ of two digits for hours,\n        two digits for minutes, two digits\n     \
    \   for seconds, and zero or more digits\n        representing second fractions.\"\
    ;\n   }\n   grouping scheduling-tolerance-parameters {\n     leaf sched-max-future\
    \ {\n       type time-interval;\n       default 00:00:15.0;\n       description\n\
    \         \"When the scheduled time is in the future, i.e., greater\n        \
    \  than the present time, this leaf defines the maximal\n          difference\
    \ between the scheduled time\n          and the present time that the server is\
    \ willing to\n          accept.  If the difference exceeds this number, the\n\
    \          server responds with an error.\";\n     }\n     leaf sched-max-past\
    \ {\n       type time-interval;\n       default 00:00:15.0;\n       description\n\
    \         \"When the scheduled time is in the past, i.e., less\n          than\
    \ the present time, this leaf defines the maximal\n          difference between\
    \ the present time\n          and the scheduled time that the server is willing\
    \ to\n          accept.  If the difference exceeds this number, the\n        \
    \  server responds with an error.\";\n     }\n     description\n       \"Contains\
    \ the parameters of the scheduling tolerance.\";\n   }\n   // extending the get-config\
    \ operation\n   augment /nc:get-config/nc:input {\n     leaf scheduled-time {\n\
    \       type yang:date-and-time;\n       description\n         \"The time at which\
    \ the RPC is scheduled to be performed.\";\n     }\n     leaf get-time {\n   \
    \    type empty;\n       description\n         \"Indicates that the rpc-reply\
    \ should include the\n          execution-time.\";\n     }\n     description\n\
    \       \"Adds the time element to <get-config>.\";\n   }\n   augment /nc:get-config/nc:output\
    \ {\n     leaf execution-time {\n       type yang:date-and-time;\n       description\n\
    \         \"The time at which the RPC was executed.\";\n     }\n     description\n\
    \       \"Adds the time element to <get-config>.\";\n   }\n   augment /nc:get/nc:input\
    \ {\n     leaf scheduled-time {\n       type yang:date-and-time;\n       description\n\
    \         \"The time at which the RPC is scheduled to be performed.\";\n     }\n\
    \     leaf get-time {\n       type empty;\n       description\n         \"Indicates\
    \ that the rpc-reply should include the\n          execution-time.\";\n     }\n\
    \     description\n       \"Adds the time element to <get>.\";\n   }\n   augment\
    \ /nc:get/nc:output {\n     leaf execution-time {\n       type yang:date-and-time;\n\
    \       description\n         \"The time at which the RPC was executed.\";\n \
    \    }\n     description\n       \"Adds the time element to <get>.\";\n   }\n\
    \   augment /nc:copy-config/nc:input {\n     leaf scheduled-time {\n       type\
    \ yang:date-and-time;\n       description\n         \"The time at which the RPC\
    \ is scheduled to be performed.\";\n     }\n     leaf get-time {\n       type\
    \ empty;\n       description\n         \"Indicates that the rpc-reply should include\
    \ the\n          execution-time.\";\n     }\n     description\n       \"Adds the\
    \ time element to <copy-config>.\";\n   }\n   augment /nc:copy-config/nc:output\
    \ {\n     leaf execution-time {\n       type yang:date-and-time;\n       description\n\
    \         \"The time at which the RPC was executed.\";\n     }\n     description\n\
    \       \"Adds the time element to <copy-config>.\";\n   }\n   augment /nc:edit-config/nc:input\
    \ {\n     leaf scheduled-time {\n       type yang:date-and-time;\n       description\n\
    \         \"The time at which the RPC is scheduled to be performed.\";\n     }\n\
    \     leaf get-time {\n       type empty;\n       description\n         \"Indicates\
    \ that the rpc-reply should include the\n          execution-time.\";\n     }\n\
    \     description\n       \"Adds the time element to <edit-config>.\";\n   }\n\
    \   augment /nc:edit-config/nc:output {\n     leaf execution-time {\n       type\
    \ yang:date-and-time;\n       description\n         \"The time at which the RPC\
    \ was executed.\";\n     }\n     description\n       \"Adds the time element to\
    \ <edit-config>.\";\n   }\n   augment /nc:delete-config/nc:input {\n     leaf\
    \ scheduled-time {\n       type yang:date-and-time;\n       description\n    \
    \     \"The time at which the RPC is scheduled to be performed.\";\n     }\n \
    \    leaf get-time {\n       type empty;\n       description\n         \"Indicates\
    \ that the rpc-reply should include the\n          execution-time.\";\n     }\n\
    \     description\n      \"Adds the time element to <delete-config>.\";\n   }\n\
    \   augment /nc:delete-config/nc:output {\n     leaf execution-time {\n      \
    \ type yang:date-and-time;\n       description\n         \"The time at which the\
    \ RPC was executed.\";\n     }\n     description\n       \"Adds the time element\
    \ to <delete-config>.\";\n   }\n   augment /nc:lock/nc:input {\n     leaf scheduled-time\
    \ {\n       type yang:date-and-time;\n       description\n         \"The time\
    \ at which the RPC is scheduled to be performed.\";\n     }\n     leaf get-time\
    \ {\n       type empty;\n       description\n         \"Indicates that the rpc-reply\
    \ should include the\n          execution-time.\";\n     }\n     description\n\
    \       \"Adds the time element to <lock>.\";\n   }\n   augment /nc:lock/nc:output\
    \ {\n     leaf execution-time {\n       type yang:date-and-time;\n       description\n\
    \         \"The time at which the RPC was executed.\";\n     }\n     description\n\
    \       \"Adds the time element to <lock>.\";\n   }\n   augment /nc:unlock/nc:input\
    \ {\n     leaf scheduled-time {\n       type yang:date-and-time;\n       description\n\
    \         \"The time at which the RPC is scheduled to be performed.\";\n     }\n\
    \     leaf get-time {\n       type empty;\n       description\n         \"Indicates\
    \ that the rpc-reply should include the\n          execution-time.\";\n     }\n\
    \     description\n       \"Adds the time element to <unlock>.\";\n   }\n   augment\
    \ /nc:unlock/nc:output {\n     leaf execution-time {\n       type yang:date-and-time;\n\
    \       description\n         \"The time at which the RPC was executed.\";\n \
    \    }\n     description\n       \"Adds the time element to <unlock>.\";\n   }\n\
    \   augment /nc:commit/nc:input {\n     leaf scheduled-time {\n       type yang:date-and-time;\n\
    \       description\n         \"The time at which the RPC is scheduled to be performed.\"\
    ;\n     }\n     leaf get-time {\n       type empty;\n       description\n    \
    \     \"Indicates that the rpc-reply should include the\n          execution-time.\"\
    ;\n     }\n     description\n       \"Adds the time element to <commit>.\";\n\
    \   }\n   augment /nc:commit/nc:output {\n     leaf execution-time {\n       type\
    \ yang:date-and-time;\n       description\n         \"The time at which the RPC\
    \ was executed.\";\n     }\n     description\n       \"Adds the time element to\
    \ <commit>.\";\n   }\n   augment /ncm:netconf-state {\n     container scheduling-tolerance\
    \ {\n       uses scheduling-tolerance-parameters;\n       description\n      \
    \   \"The scheduling tolerance when the time capability\n          is enabled.\"\
    ;\n     }\n     description\n       \"The scheduling tolerance of the server.\"\
    ;\n   }\n   rpc cancel-schedule {\n     description\n       \"Cancels a scheduled\
    \ message.\";\n     reference\n       \"RFC 7758:\n        Time Capability in\
    \ NETCONF\";\n     input {\n       leaf cancelled-message-id {\n         type\
    \ string;\n         description\n           \"The ID of the message to be cancelled.\"\
    ;\n       }\n       leaf get-time {\n         type empty;\n         description\n\
    \           \"Indicates that the rpc-reply should include\n            the execution-time.\"\
    ;\n       }\n     }\n     output {\n       leaf execution-time {\n         type\
    \ yang:date-and-time;\n         description\n           \"The time at which the\
    \ RPC was executed.\";\n       }\n     }\n   }\n   notification netconf-scheduled-message\
    \ {\n     leaf schedule-id {\n       type string;\n       description\n      \
    \   \"The ID of the scheduled message.\";\n     }\n     leaf scheduled-time {\n\
    \       type yang:date-and-time;\n       description\n         \"The time at which\
    \ the RPC is scheduled to be performed.\";\n     }\n     description\n       \"\
    Indicates that a scheduled message was received.\";\n     reference\n       \"\
    RFC 7758:\n        Time Capability in NETCONF\";\n   }\n"
- title: '}'
  contents:
  - '}

    '
- title: <CODE ENDS>
  contents:
  - '<CODE ENDS>

    '
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   The authors gratefully acknowledge Joe Marcus Clarke, Andy\
    \ Bierman,\n   Balazs Lengyel, Jonathan Hansford, John Heasley, Robert Sparks,\
    \ Al\n   Morton, Olafur Gudmundsson, Juergen Schoenwaelder, Joel Jaeggli, Alon\n\
    \   Schneider, and Eylon Egozi for their insightful comments.\n   This work was\
    \ supported in part by Israel Science Foundation grant\n   ISF 1520/11.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Tal Mizrahi\n   Department of Electrical Engineering\n\
    \   Technion - Israel Institute of Technology\n   Technion City, Haifa, 32000\n\
    \   Israel\n   Email: dew@tx.technion.ac.il\n   Yoram Moses\n   Department of\
    \ Electrical Engineering\n   Technion - Israel Institute of Technology\n   Technion\
    \ City, Haifa, 32000\n   Israel\n   Email: moses@ee.technion.ac.il\n"
