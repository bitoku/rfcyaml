- title: __initial_text__
  contents:
  - '           Internet X.509 Certificate Request Message Format

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1999).  All Rights Reserved.\n"
- title: 1.  Abstract
  contents:
  - "1.  Abstract\n   This document describes the Certificate Request Message Format\n\
    \   (CRMF).  This syntax is used to convey a request for a certificate to\n  \
    \ a Certification Authority (CA) (possibly via a Registration Authority\n   (RA))\
    \ for the purposes of X.509 certificate production.  The request\n   will typically\
    \ include a public key and associated registration\n   information.\n   The key\
    \ words \"MUST\", \"REQUIRED\", \"SHOULD\", \"RECOMMENDED\", and \"MAY\"\n   in\
    \ this document (in uppercase, as shown) are to be interpreted as\n   described\
    \ in RFC 2119.\n"
- title: 2.  Overview
  contents:
  - "2.  Overview\n   Construction of a certification request involves the following\
    \ steps:\n   a)  A CertRequest value is constructed.  This value may include the\n\
    \       public key, all or a portion of the end-entity's (EE's) name,\n      \
    \ other requested certificate fields, and additional control\n       information\
    \ related to the registration process.\n   b)  A proof of possession (of the private\
    \ key corresponding to the\n       public key for which a certificate is being\
    \ requested) value may\n       be calculated across the CertRequest value.\n \
    \  c)  Additional registration information may be combined with the\n       proof\
    \ of possession value and the CertRequest structure to form a\n       CertReqMessage.\n\
    \   d)  The CertReqMessage is securely communicated to a CA. Specific\n      \
    \ means of secure transport are beyond the scope of this\n       specification.\n"
- title: 3. CertReqMessage Syntax
  contents:
  - "3. CertReqMessage Syntax\n   A certificate request message is composed of the\
    \ certificate request,\n   an optional proof of possession field and an optional\
    \ registration\n   information field.\n"
- title: CertReqMessages ::= SEQUENCE SIZE (1..MAX) OF CertReqMsg
  contents:
  - 'CertReqMessages ::= SEQUENCE SIZE (1..MAX) OF CertReqMsg

    '
- title: CertReqMsg ::= SEQUENCE {
  contents:
  - "CertReqMsg ::= SEQUENCE {\n    certReq   CertRequest,\n    pop       ProofOfPossession\
    \  OPTIONAL,\n    -- content depends upon key type\n    regInfo   SEQUENCE SIZE(1..MAX)\
    \ of AttributeTypeAndValue OPTIONAL }\n   The proof of possession field is used\
    \ to demonstrate that the entity\n   to be associated with the certificate is\
    \ actually in possession of\n   the corresponding private key.  This field may\
    \ be calculated across\n   the contents of the certReq field and varies in structure\
    \ and content\n   by public key algorithm type and operational mode.\n   The regInfo\
    \ field SHOULD only contain supplementary information\n   related to the context\
    \ of the certification request when such\n   information is required to fulfill\
    \ a certification request.  This\n   information MAY include subscriber contact\
    \ information, billing\n   information or other ancillary information useful to\
    \ fulfillment of\n   the certification request.\n   Information directly related\
    \ to certificate content SHOULD be\n   included in the certReq content.  However,\
    \ inclusion of additional\n   certReq content by RAs may invalidate the pop field.\
    \  Data therefore\n   intended for certificate content MAY be provided in regInfo.\n\
    \   See Section 8 and Appendix B for example regInfo contents.\n"
- title: 4. Proof of Possession (POP)
  contents:
  - "4. Proof of Possession (POP)\n   In order to prevent certain attacks and to allow\
    \ a CA/RA to properly\n   check the validity of the binding between an end entity\
    \ and a key\n   pair, the PKI management operations specified here make it possible\n\
    \   for an end entity to prove that it has possession of (i.e., is able\n   to\
    \ use) the private key corresponding to the public key for which a\n   certificate\
    \ is requested.  A given CA/RA is free to choose how to\n   enforce POP (e.g.,\
    \ out-of-band procedural means versus the CRMF in-\n   band message) in its certification\
    \ exchanges (i.e., this may be a\n   policy issue).  However, it is MANDATED that\
    \ CAs/RAs MUST enforce POP\n   by some means because there are currently many\
    \ non-PKIX operational\n   protocols in use (various electronic mail protocols\
    \ are one example)\n   that do not explicitly check the binding between the end\
    \ entity and\n   the private key.  Until operational protocols that do verify\
    \ the\n   binding (for signature, encryption, and key agreement key pairs)\n \
    \  exist, and are ubiquitous, this binding can only be assumed to have\n   been\
    \ verified by the CA/RA. Therefore, if the binding is not verified\n   by the\
    \ CA/RA, certificates in the Internet Public-Key Infrastructure\n   end up being\
    \ somewhat less meaningful.\n   POP is accomplished in different ways depending\
    \ on the type of key\n   for which a certificate is requested. If a key can be\
    \ used for\n   multiple purposes (e.g., an RSA key) then any of the methods MAY\
    \ be\n   used.\n   This specification allows for cases where POP is validated\
    \ by the CA,\n   the RA, or both.  Some policies may require the CA to verify\
    \ POP\n   during certification, in which case the RA MUST forward the end\n  \
    \ entity's CertRequest and ProofOfPossession fields unaltered to the\n   CA, and\
    \ as an option MAY also verify POP.  If the CA is not required\n   by policy to\
    \ verify POP, then the RA SHOULD forward the end entity's\n   request and proof\
    \ unaltered to the CA as above.  If this is not\n   possible (for example because\
    \ the RA verifies POP by an out-of-band\n   method), then the RA MAY attest to\
    \ the CA that the required proof has\n   been validated. If the CA uses an out-of-band\
    \ method to verify POP\n   (such as physical delivery of CA-generated private\
    \ keys), then the\n   ProofOfPossession field is not used.\n"
- title: 4.1 Signature Keys
  contents:
  - "4.1 Signature Keys\n   For signature keys, the end entity can sign a value to\
    \ prove\n   possession of the private key.\n"
- title: 4.2 Key Encipherment Keys
  contents:
  - "4.2 Key Encipherment Keys\n   For key encipherment keys, the end entity can provide\
    \ the private key\n   to the CA/RA, or can be required to decrypt a value in order\
    \ to prove\n   possession of the private key. Decrypting a value can be achieved\n\
    \   either directly or indirectly.\n   The direct method is for the RA/CA to issue\
    \ a random challenge to\n   which an immediate response by the end entity is required.\n\
    \   The indirect method is to issue a certificate which is encrypted for\n   the\
    \ end entity (and have the end entity demonstrate its ability to\n   decrypt this\
    \ certificate in a confirmation message). This allows a CA\n   to issue a certificate\
    \ in a form which can only be used by the\n   intended end entity.\n"
- title: 4.3 Key Agreement Keys
  contents:
  - "4.3 Key Agreement Keys\n   For key agreement keys, the end entity can use any\
    \ of the three\n   methods given in Section 5.2 for encryption keys.  For the\
    \ direct and\n   indirect methods, the end entity and the PKI management entity\
    \ (i.e.,\n   CA or RA) must establish a shared secret key in order to prove that\n\
    \   the end entity has possession of the private key (i.e., in order to\n   decrypt\
    \ the encrypted certificate or to construct the response to the\n   issued challenge).\
    \  Note that this need not impose any restrictions\n   on the keys that can be\
    \ certified by a given CA -- in particular, for\n   Diffie-Hellman keys the end\
    \ entity may freely choose its algorithm\n   parameters -- provided that the CA\
    \ can generate a short-term (or\n   one-time) key pair with the appropriate parameters\
    \ when necessary.\n   The end entity may also MAC the certificate request (using\
    \ a shared\n   secret key derived from a Diffie-Hellman computation) as a fourth\n\
    \   alternative for demonstrating POP.  This option may be used only if\n   the\
    \ CA already has a DH certificate that is known to the end entity\n   and if the\
    \ EE is willing to use the CA's DH parameters.\n"
- title: 4.4 Proof of Possession Syntax
  contents:
  - "4.4 Proof of Possession Syntax\n   ProofOfPossession ::= CHOICE {\n       raVerified\
    \        [0] NULL,\n       -- used if the RA has already verified that the requester\
    \ is in\n       -- possession of the private key\n       signature         [1]\
    \ POPOSigningKey,\n       keyEncipherment   [2] POPOPrivKey,\n       keyAgreement\
    \      [3] POPOPrivKey }\n   POPOSigningKey ::= SEQUENCE {\n       poposkInput\
    \         [0] POPOSigningKeyInput OPTIONAL,\n       algorithmIdentifier     AlgorithmIdentifier,\n\
    \       signature               BIT STRING }\n       -- The signature (using \"\
    algorithmIdentifier\") is on the\n       -- DER-encoded value of poposkInput.\
    \  NOTE: If the CertReqMsg\n       -- certReq CertTemplate contains the subject\
    \ and publicKey values,\n       -- then poposkInput MUST be omitted and the signature\
    \ MUST be\n       -- computed on the DER-encoded value of CertReqMsg certReq.\
    \  If\n       -- the CertReqMsg certReq CertTemplate does not contain the public\n\
    \       -- key and subject values, then poposkInput MUST be present and\n    \
    \   -- MUST be signed.  This strategy ensures that the public key is\n       --\
    \ not present in both the poposkInput and CertReqMsg certReq\n       -- CertTemplate\
    \ fields.\n   POPOSigningKeyInput ::= SEQUENCE {\n       authInfo            CHOICE\
    \ {\n           sender              [0] GeneralName,\n           -- used only\
    \ if an authenticated identity has been\n           -- established for the sender\
    \ (e.g., a DN from a\n           -- previously-issued and currently-valid certificate)\n\
    \           publicKeyMAC        PKMACValue },\n           -- used if no authenticated\
    \ GeneralName currently exists for\n           -- the sender; publicKeyMAC contains\
    \ a password-based MAC\n           -- on the DER-encoded value of publicKey\n\
    \       publicKey           SubjectPublicKeyInfo }  -- from CertTemplate\n   PKMACValue\
    \ ::= SEQUENCE {\n      algId  AlgorithmIdentifier,\n      -- the algorithm value\
    \ shall be PasswordBasedMac\n      --     {1 2 840 113533 7 66 13}\n      -- the\
    \ parameter value is PBMParameter\n      value  BIT STRING }\n   POPOPrivKey ::=\
    \ CHOICE {\n       thisMessage       [0] BIT STRING,\n       -- posession is proven\
    \ in this message (which contains the private\n       -- key itself (encrypted\
    \ for the CA))\n       subsequentMessage [1] SubsequentMessage,\n       -- possession\
    \ will be proven in a subsequent message\n       dhMAC             [2] BIT STRING\
    \ }\n       -- for keyAgreement (only), possession is proven in this message\n\
    \       -- (which contains a MAC (over the DER-encoded value of the\n       --\
    \ certReq parameter in CertReqMsg, which must include both subject\n       --\
    \ and publicKey) based on a key derived from the end entity's\n       -- private\
    \ DH key and the CA's public DH key);\n       -- the dhMAC value MUST be calculated\
    \ as per the directions given\n       -- in Appendix A.\n   SubsequentMessage\
    \ ::= INTEGER {\n       encrCert (0),\n       -- requests that resulting certificate\
    \ be encrypted for the\n       -- end entity (following which, POP will be proven\
    \ in a\n       -- confirmation message)\n       challengeResp (1) }\n       --\
    \ requests that CA/RA engage in challenge-response exchange with\n       -- end\
    \ entity in order to prove private key possession\n   It is expected that protocols\
    \ which incorporate this specification\n   will include the confirmation and challenge-response\
    \ messages\n   necessary to a complete protocol.\n"
- title: 4.4.1  Use of Password-Based MAC
  contents:
  - "4.4.1  Use of Password-Based MAC\n   The following algorithm SHALL be used when\
    \ publicKeyMAC is used in\n   POPOSigningKeyInput to prove the authenticity of\
    \ a request.\n   PBMParameter ::= SEQUENCE {\n         salt                OCTET\
    \ STRING,\n         owf                 AlgorithmIdentifier,\n         -- AlgId\
    \ for a One-Way Function (SHA-1 recommended)\n         iterationCount      INTEGER,\n\
    \         -- number of times the OWF is applied\n         mac                \
    \ AlgorithmIdentifier\n         -- the MAC AlgId (e.g., DES-MAC, Triple-DES-MAC\
    \ [PKCS11],\n   }   -- or HMAC [RFC2104, RFC2202])\n   The process of using PBMParameter\
    \ to compute publicKeyMAC and so\n   authenticate the origin of a public key certification\
    \ request\n   consists of two stages. The first stage uses shared secret\n   information\
    \ to produce a MAC key. The second stage MACs the public\n   key in question using\
    \ this MAC key to produce an authenticated value.\n   Initialization of the first\
    \ stage of algorithm assumes the existence\n   of a shared secret distributed\
    \ in a trusted fashion between CA/RA and\n   end-entity.  The salt value is appended\
    \ to the shared secret and the\n   one way function (owf) is applied iterationCount\
    \ times, where the\n   salted secret is the input to the first iteration and,\
    \ for each\n   successive iteration, the input is set to be the output of the\n\
    \   previous iteration, yielding a key K.\n   In the second stage, K and the public\
    \ key are inputs to HMAC as\n   documented in [HMAC] to produce a value for publicKeyMAC\
    \ as follows:\n   publicKeyMAC = Hash( K XOR opad, Hash( K XOR ipad, public key)\
    \ )\n   where ipad and opad are defined in [RFC2104].\n   The AlgorithmIdentifier\
    \ for owf SHALL be SHA-1 {1 3 14 3 2 26} and\n   for mac SHALL be HMAC-SHA1 {1\
    \ 3 6 1 5 5 8 1 2}.\n"
- title: 5.  CertRequest syntax
  contents:
  - "5.  CertRequest syntax\n   The CertRequest syntax consists of a request identifier,\
    \ a template\n   of certificate content, and an optional sequence of control\n\
    \   information.\n"
- title: CertRequest ::= SEQUENCE {
  contents:
  - "CertRequest ::= SEQUENCE {\n    certReqId     INTEGER,          -- ID for matching\
    \ request and reply\n    certTemplate  CertTemplate,  -- Selected fields of cert\
    \ to be issued\n    controls      Controls OPTIONAL }   -- Attributes affecting\
    \ issuance\n"
- title: CertTemplate ::= SEQUENCE {
  contents:
  - "CertTemplate ::= SEQUENCE {\n    version      [0] Version               OPTIONAL,\n\
    \    serialNumber [1] INTEGER               OPTIONAL,\n    signingAlg   [2] AlgorithmIdentifier\
    \   OPTIONAL,\n    issuer       [3] Name                  OPTIONAL,\n    validity\
    \     [4] OptionalValidity      OPTIONAL,\n    subject      [5] Name         \
    \         OPTIONAL,\n    publicKey    [6] SubjectPublicKeyInfo  OPTIONAL,\n  \
    \  issuerUID    [7] UniqueIdentifier      OPTIONAL,\n    subjectUID   [8] UniqueIdentifier\
    \      OPTIONAL,\n    extensions   [9] Extensions            OPTIONAL }\n  OptionalValidity\
    \ ::= SEQUENCE {\n      notBefore  [0] Time OPTIONAL,\n      notAfter   [1] Time\
    \ OPTIONAL } --at least one must be present\n  Time ::= CHOICE {\n      utcTime\
    \        UTCTime,\n      generalTime    GeneralizedTime }\n"
- title: 6. Controls Syntax
  contents:
  - "6. Controls Syntax\n   The generator of a CertRequest may include one or more\
    \ control values\n   pertaining to the processing of the request.\n   Controls\
    \  ::= SEQUENCE SIZE(1..MAX) OF AttributeTypeAndValue\n   The following controls\
    \ are defined (it is recognized that this list\n   may expand over time):  regToken;\
    \ authenticator; pkiPublicationInfo;\n   pkiArchiveOptions; oldCertID; protocolEncrKey.\n"
- title: 6.1 Registration Token Control
  contents:
  - "6.1 Registration Token Control\n   A regToken control contains one-time information\
    \ (either based on a\n   secret value or on knowledge) intended to be used by\
    \ the CA to verify\n   the identity of the subject prior to issuing a certificate.\
    \  Upon\n   receipt of a certification request containing a value for regToken,\n\
    \   the receiving CA verifies the information in order to confirm the\n   identity\
    \ claimed in the certification request.\n   The value for regToken may be generated\
    \ by the CA and provided out of\n   band to the subscriber, or may otherwise be\
    \ available to both the CA\n   and the subscriber.  The security of any out-of-band\
    \ exchange should\n   be commensurate with the risk of the CA accepting an intercepted\n\
    \   value from someone other than the intended subscriber.\n   The regToken control\
    \ would typically be used only for initialization\n   of an end entity into the\
    \ PKI, whereas the authenticator control (see\n   Section 7.2) would typically\
    \ be used for initial as well as\n   subsequent certification requests.\n   In\
    \ some instances of use the value for regToken could be a text\n   string or a\
    \ numeric quantity such as a random number.  The value in\n   the latter case\
    \ could be encoded either as a binary quantity or as a\n   text string representation\
    \ of the binary quantity.  To ensure a\n   uniform encoding of values regardless\
    \ of the nature of the quantity,\n   the encoding of regToken SHALL be UTF8.\n"
- title: 6.2 Authenticator Control.
  contents:
  - "6.2 Authenticator Control.\n   An authenticator control contains information\
    \ used in an ongoing\n   basis to establish a non-cryptographic check of identity\
    \ in\n   communication with the CA.  Examples include:  mother's maiden name,\n\
    \   last four digits of social security number, or other knowledge-based\n   information\
    \ shared with the subscriber's CA; a hash of such\n   information; or other information\
    \ produced for this purpose.  The\n   value for an authenticator control may be\
    \ generated by the subscriber\n   or by the CA.\n   In some instances of use the\
    \ value for regToken could be a text\n   string or a numeric quantity such as\
    \ a random number.  The value in\n   the latter case could be encoded either as\
    \ a binary quantity or as a\n   text string representation of the binary quantity.\
    \  To ensure a\n   uniform encoding of values regardless of the nature of the\
    \ quantity,\n   the encoding of authenticator SHALL be UTF8.\n"
- title: 6.3 Publication Information Control
  contents:
  - "6.3 Publication Information Control\n   The pkiPublicationInfo control enables\
    \ subscribers to control the\n   CA's publication of the certificate.  It is defined\
    \ by the following\n   syntax:\n   PKIPublicationInfo ::= SEQUENCE {\n       \
    \ action     INTEGER {\n                     dontPublish (0),\n              \
    \       pleasePublish (1) },\n        pubInfos  SEQUENCE SIZE (1..MAX) OF SinglePubInfo\
    \ OPTIONAL }\n          -- pubInfos MUST NOT be present if action is \"dontPublish\"\
    \n          -- (if action is \"pleasePublish\" and pubInfos is omitted,\n    \
    \      -- \"dontCare\" is assumed)\n   SinglePubInfo ::= SEQUENCE {\n        \
    \ pubMethod    INTEGER {\n             dontCare    (0),\n             x500   \
    \     (1),\n             web         (2),\n             ldap        (3) },\n \
    \        pubLocation  GeneralName OPTIONAL }\n   If the dontPublish option is\
    \ chosen, the requester indicates that the\n   PKI should not publish the certificate\
    \ (this may indicate that the\n   requester intends to publish the certificate\
    \ him/herself).\n   If the dontCare method is chosen, or if the PKIPublicationInfo\n\
    \   control is omitted from the request, the requester indicates that the\n  \
    \ PKI MAY publish the certificate using whatever means it chooses.\n   If the\
    \ requester wishes the certificate to appear in at least some\n   locations but\
    \ wishes to enable the CA to make the certificate\n   available in other repositories,\
    \ set two values of SinglePubInfo for\n   pubInfos: one with x500, web or ldap\
    \ value and one with dontCare.\n   The pubLocation field, if supplied, indicates\
    \ where the requester\n   would like the certificate to be found (note that the\
    \ CHOICE within\n   GeneralName includes a URL and an IP address, for example).\n"
- title: 6.4  Archive Options Control
  contents:
  - "6.4  Archive Options Control\n   The pkiArchiveOptions control enables subscribers\
    \ to supply\n   information needed to establish an archive of the private key\n\
    \   corresponding to the public key of the certification request.  It is\n   defined\
    \ by the following syntax:\n"
- title: PKIArchiveOptions ::= CHOICE {
  contents:
  - "PKIArchiveOptions ::= CHOICE {\n      encryptedPrivKey     [0] EncryptedKey,\n\
    \      -- the actual value of the private key\n      keyGenParameters     [1]\
    \ KeyGenParameters,\n      -- parameters which allow the private key to be re-generated\n\
    \      archiveRemGenPrivKey [2] BOOLEAN }\n      -- set to TRUE if sender wishes\
    \ receiver to archive the private\n      -- key of a key pair which the receiver\
    \ generates in response to\n      -- this request; set to FALSE if no archival\
    \ is desired.\n"
- title: EncryptedKey ::= CHOICE {
  contents:
  - "EncryptedKey ::= CHOICE {\n      encryptedValue        EncryptedValue,\n    \
    \  envelopedData     [0] EnvelopedData }\n      -- The encrypted private key MUST\
    \ be placed in the envelopedData\n      -- encryptedContentInfo encryptedContent\
    \ OCTET STRING.\n"
- title: EncryptedValue ::= SEQUENCE {
  contents:
  - "EncryptedValue ::= SEQUENCE {\n      intendedAlg   [0] AlgorithmIdentifier  OPTIONAL,\n\
    \      -- the intended algorithm for which the value will be used\n      symmAlg\
    \       [1] AlgorithmIdentifier  OPTIONAL,\n      -- the symmetric algorithm used\
    \ to encrypt the value\n      encSymmKey    [2] BIT STRING           OPTIONAL,\n\
    \      -- the (encrypted) symmetric key used to encrypt the value\n      keyAlg\
    \        [3] AlgorithmIdentifier  OPTIONAL,\n      -- algorithm used to encrypt\
    \ the symmetric key\n      valueHint     [4] OCTET STRING         OPTIONAL,\n\
    \      -- a brief description or identifier of the encValue content\n      --\
    \ (may be meaningful only to the sending entity, and used only\n      -- if EncryptedValue\
    \ might be re-examined by the sending entity\n      -- in the future)\n      \
    \  encValue       BIT STRING }\n"
- title: KeyGenParameters ::= OCTET STRING
  contents:
  - "KeyGenParameters ::= OCTET STRING\n   An alternative to sending the key is to\
    \ send the information about\n   how to re-generate the key using the KeyGenParameters\
    \ choice (e.g.,\n   for many RSA implementations one could send the first random\
    \ numbers\n   tested for primality). The actual syntax for this parameter may\
    \ be\n   defined in a subsequent version of this document or in another\n   standard.\n"
- title: 6.5  OldCert ID Control
  contents:
  - "6.5  OldCert ID Control\n   If present, the OldCertID control specifies the certificate\
    \ to be\n   updated by the current certification request.  The syntax of its\n\
    \   value is:\n   CertId ::= SEQUENCE {\n         issuer           GeneralName,\n\
    \         serialNumber     INTEGER\n     }\n"
- title: 6.6  Protocol Encryption Key Control
  contents:
  - "6.6  Protocol Encryption Key Control\n   If present, the protocolEncrKey control\
    \ specifies a key the CA is to\n   use in encrypting a response to CertReqMessages.\n\
    \   This control can be used when a CA has information to send to the\n   subscriber\
    \ that needs to be encrypted.  Such information includes a\n   private key generated\
    \ by the CA for use by the subscriber.\n   The encoding of protocolEncrKey SHALL\
    \ be SubjectPublicKeyInfo.\n"
- title: 7.  Object Identifiers
  contents:
  - "7.  Object Identifiers\n   The OID id-pkix has the value\n   id-pkix  OBJECT\
    \ IDENTIFIER  ::= { iso(1) identified-organization(3)\n   dod(6) internet(1) security(5)\
    \ mechanisms(5) pkix(7) }\n   -- arc for Internet X.509 PKI protocols and their\
    \ components\n   id-pkip  OBJECT IDENTIFIER :: { id-pkix pkip(5) }\n   -- Registration\
    \ Controls in CRMF\n   id-regCtrl  OBJECT IDENTIFIER ::= { id-pkip regCtrl(1)\
    \ }\n   id-regCtrl-regToken            OBJECT IDENTIFIER ::= { id-regCtrl 1 }\n\
    \   id-regCtrl-authenticator       OBJECT IDENTIFIER ::= { id-regCtrl 2 }\n  \
    \ id-regCtrl-pkiPublicationInfo  OBJECT IDENTIFIER ::= { id-regCtrl 3 }\n   id-regCtrl-pkiArchiveOptions\
    \   OBJECT IDENTIFIER ::= { id-regCtrl 4 }\n   id-regCtrl-oldCertID          \
    \ OBJECT IDENTIFIER ::= { id-regCtrl 5 }\n   id-regCtrl-protocolEncrKey     OBJECT\
    \ IDENTIFIER ::= { id-regCtrl 6 }\n   -- Registration Info in CRMF\n   id-regInfo\
    \       OBJECT IDENTIFIER ::= { id-pkip id-regInfo(2) }\n   id-regInfo-asciiPairs\
    \    OBJECT IDENTIFIER ::= { id-regInfo 1 }\n   --with syntax OCTET STRING\n \
    \  id-regInfo-certReq       OBJECT IDENTIFIER ::= { id-regInfo 2 }\n   --with\
    \ syntax CertRequest\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   The security of CRMF delivery is reliant upon\
    \ the security mechanisms\n   of the protocol or process used to communicate with\
    \ CAs.  Such\n   protocol or process needs to ensure the integrity, data origin\n\
    \   authenticity, and privacy of the message.  Encryption of a CRMF is\n   strongly\
    \ recommended if it contains subscriber-sensitive information\n   and if the CA\
    \ has an encryption certificate that is known to the end\n   entity.\n"
- title: 9. References
  contents:
  - "9. References\n   [HMAC] Krawczyk, H., Bellare, M. and R. Canetti, \"HMAC:  Keyed-\n\
    \          Hashing for Message Authentication\", RFC 2104, February 1997.\n"
- title: 10. Acknowledgments
  contents:
  - "10. Acknowledgments\n   The authors gratefully acknowledge the contributions\
    \ of Barbara Fox,\n   Warwick Ford, Russ Housley and John Pawling, whose review\
    \ and\n   comments significantly clarified and improved the utility of this\n\
    \   specification.\n"
- title: 11. Authors' Addresses
  contents:
  - "11. Authors' Addresses\n   Michael Myers\n   VeriSign, Inc.\n   1390 Shorebird\
    \ Way\n   Mountain View, CA  94019\n   EMail: mmyers@verisign.com\n   Carlisle\
    \ Adams\n   Entrust Technologies\n   750 Heron Road, Suite E08\n   Ottawa, Canada,\
    \ K1V 1A7\n   EMail: cadams@entrust.com\n   Dave Solo\n   Citicorp\n   666 Fifth\
    \ Ave, 3rd Floor\n   New York, Ny 10103\n   EMail: david.solo@citicorp.com\n \
    \  David Kemp\n   National Security Agency\n   Suite 6734\n   9800 Savage Road\n\
    \   Fort Meade, MD 20755\n   EMail: dpkemp@missi.ncsc.mil\n"
- title: Appendix A. Constructing "dhMAC"
  contents:
  - "Appendix A. Constructing \"dhMAC\"\n   This Appendix describes the method for\
    \ computing the bit string\n   \"dhMAC\" in the proof-of-possession POPOPrivKey\
    \ structure for Diffie-\n   Hellman certificate requests.\n   1. The entity generates\
    \ a DH public/private key-pair.\n       The DH parameters used to calculate the\
    \ public SHOULD be those\n       specified in the CA's DH certificate.\n     \
    \  From CA's DH certificate:\n          CApub = g^x mod p   (where g and p are\
    \ the established DH\n                               parameters and x is the CA's\
    \ private\n                               DH component)\n       For entity E:\n\
    \          DH private value = y\n          Epub = DH public value = g^y mod p\n\
    \   2. The MACing process will then consist of the following steps.\n   a) The\
    \ value of the certReq field is DER encoded, yielding a binary\n      string.\
    \ This will be the 'text' referred to in [HMAC], the data to\n      which HMAC-SHA1\
    \ is applied.\n   b) A shared DH secret is computed, as follows,\n           \
    \           shared secret = Kec = g^xy mod p\n      [This is done by the entity\
    \ E as CApub^y and by the CA as Epub^x,\n      where CApub is retrieved from the\
    \ CA's DH certificate and Epub is\n      retrieved from the actual certification\
    \ request.]\n   c)  A key K is derived from the shared secret Kec and the subject\
    \ and\n      issuer names in the CA's certificate as follows:\n      K = SHA1(DER-encoded-subjectName\
    \ | Kec | DER-encoded-issuerName)\n      where \"|\" means concatenation.  If\
    \ subjectName in the CA\n      certificate is an empty SEQUENCE then DER-encoded-subjectAltName\n\
    \      should be used instead; similarly, if issuerName is an empty\n      SEQUENCE\
    \ then DER-encoded-issuerAltName should be used instead.\n   d) Compute HMAC-SHA1\
    \ over the data 'text' as per [RFC2104] as:\n         SHA1(K XOR opad, SHA1(K\
    \ XOR ipad, text))\n      where,\n         opad (outer pad) = the byte 0x36 repeated\
    \ 64 times\n      and\n         ipad (inner pad) = the byte 0x5C repeated 64 times.\n\
    \      Namely,\n         (1) Append zeros to the end of K to create a 64 byte\
    \ string\n             (e.g., if K is of length 16 bytes it will be appended with\n\
    \             48 zero bytes 0x00).\n         (2) XOR (bitwise exclusive-OR) the\
    \ 64 byte string computed in\n             step (1) with ipad.\n         (3) Append\
    \ the data stream 'text' to the 64 byte string\n             resulting from step\
    \ (2).\n         (4) Apply SHA1 to the stream generated in step (3).\n       \
    \  (5) XOR (bitwise exclusive-OR) the 64 byte string computed in\n           \
    \  step (1) with opad.\n         (6) Append the SHA1 result from step (4) to the\
    \ 64 byte string\n             resulting from step (5).\n         (7) Apply SHA1\
    \ to the stream generated in step (6) and output\n             the result.\n \
    \         Sample code is also provided in [RFC2104, RFC2202].\n   e) The output\
    \ of (d) is encoded as a BIT STRING (the value \"dhMAC\").\n   3. The proof-of-possession\
    \ process requires the CA to carry out\n      steps (a) through (d) and then simply\
    \ compare the result of step\n      (d) with what it received as the \"dhMAC\"\
    \ value. If they match then\n      the following can be concluded.\n       1)\
    \ The Entity possesses the private key corresponding to the\n          public\
    \ key in the certification request (because it needed the\n          private key\
    \ to calculate the shared secret).\n       2) Only the intended CA can actually\
    \ verify the request (because\n          the CA requires its own private key to\
    \ compute the same shared\n          secret).  This helps to protect from rogue\
    \ CAs.\n"
- title: References
  contents:
  - "References\n   [RFC2104] Krawczyk, H., Bellare, M. and R. Canetti, \"HMAC:  Keyed\n\
    \             Hashing for Message Authentication\", RFC 2104, February\n     \
    \        1997.\n   [RFC2202] Cheng, P. and R. Glenn, \"Test Cases for HMAC-MD5\
    \ and HMAC-\n             SHA-1\", RFC 2202, September 1997.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   The details of this Appendix were provided by Hemma Prafullchandra.\n\
    \   Appendix B. Use of RegInfo for Name-Value Pairs\n   The \"value\" field of\
    \ the id-regInfo-utf8Pairs OCTET STRING (with\n   \"tag\" field equal to 12 and\
    \ appropriate \"length\" field) will contain\n   a series of UTF8 name/value pairs.\n\
    \   This Appendix lists some common examples of such pairs for the\n   purpose\
    \ of promoting interoperability among independent\n   implementations of this\
    \ specification.  It is recognized that this\n   list is not exhaustive and will\
    \ grow with time and implementation\n   experience.\n"
- title: B.1. Example Name/Value Pairs
  contents:
  - "B.1. Example Name/Value Pairs\n   When regInfo is used to convey one or more\
    \ name-value pairs (via id-\n   regInfo-utf8Pairs), the first and subsequent pairs\
    \ SHALL be\n   structured as follows:\n      [name?value][%name?value]*%\n   This\
    \ string is then encoded into an OCTET STRING and placed into the\n   regInfo\
    \ SEQUENCE.\n   Reserved characters are encoded using the %xx mechanism of [RFC1738],\n\
    \   unless they are used for their reserved purposes.\n   The following table\
    \ defines a recommended set of named elements.\n   The value in the column \"\
    Name Value\" is the exact text string that\n   will appear in the regInfo.\n \
    \     Name Value\n      ----------\n      version            -- version of this\
    \ variation of regInfo use\n      corp_company       -- company affiliation of\
    \ subscriber\n      org_unit           -- organizational unit\n      mail_firstName\
    \     -- personal name component\n      mail_middleName    -- personal name component\n\
    \      mail_lastName      -- personal name component\n      mail_email       \
    \  -- subscriber's email address\n      jobTitle           -- job title of subscriber\n\
    \      employeeID         -- employee identification number or string\n   mailStop\
    \           -- mail stop\n      issuerName         -- name of CA\n      subjectName\
    \        -- name of Subject\n      validity           -- validity interval\n \
    \  For example:\n      version?1%corp_company?Acme, Inc.%org_unit?Engineering%\n\
    \      mail_firstName?John%mail_lastName?Smith%jobTitle?Team Leader%\n      mail_email?john@acme.com%\n"
- title: B.1.1. IssuerName, SubjectName and Validity Value Encoding
  contents:
  - "B.1.1. IssuerName, SubjectName and Validity Value Encoding\n   When they appear\
    \ in id-regInfo-utf8Pairs syntax as named elements,\n   the encoding of values\
    \ for issuerName, subjectName and validity SHALL\n   use the following syntax.\
    \  The characters [] indicate an optional\n   field, ::= and | have their usual\
    \ BNF meanings, and all other symbols\n   (except spaces which are insignificant)\
    \ outside non-terminal names\n   are terminals.  Alphabetics are case-sensitive.\n\
    \      issuerName  ::= <names>\n      subjectName ::= <names>\n      <names> \
    \    ::= <name> | <names>:<name>\n      <validity>  ::= validity ? [<notbefore>]-[<notafter>]\n\
    \      <notbefore> ::= <time>\n      <notafter>  ::= <time>\n   Where <time> is\
    \ UTC time in the form YYYYMMDD[HH[MM[SS]]].  HH, MM,\n   and SS default to 00\
    \ and are omitted if at the and of value 00.\n   Example validity encoding:\n\
    \      validity?-19991231%\n   is a validity interval with no value for notBefore\
    \ and a value of\n   December 31, 1999 for notAfter.\n   Each name comprises a\
    \ single character name form identifier followed\n   by a name value of one or\
    \ UTF8 characters. Within a name value, when\n   it is necessary to disambiguate\
    \ a character which has formatting\n   significance at an outer level, the escape\
    \ sequence %xx SHALL be\n   used, where xx represents the hex value for the encoding\
    \ concerned.\n   The percent symbol is represented by %%.\n      <name> ::= X<xname>|O<oname>|E<ename>|D<dname>|U<uname>|I<iname>\n\
    \   Name forms and value formats are as follows:\n   X.500 directory name form\
    \ (identifier \"X\"):\n   <xname> ::= <rdns>\n      <rdns>  ::= <rdn> | <rdns>\
    \ , <rdn>\n      <rdn>   ::= <avas>\n      <avas>  ::= <ava> | <avas> + <ava>\n\
    \      <ava>   ::= <attyp> = <avalue>\n      <attyp> ::= OID.<oid> | <stdat>\n\
    \   Standard attribute type <stdat> is an alphabetic attribute type\n   identifier\
    \ from the following set:\n      C      (country)\n      L      (locality)\n \
    \     ST     (state or province)\n      O      (organization)\n      OU     (organizational\
    \ unit)\n      CN     (common name)\n      STREET (street address)\n      E  \
    \    (E-mail address).\n   <avalue> is a name component in the form of a UTF8\
    \ character string\n   of 1 to 64 characters, with the restriction that in the\
    \ IA5 subset of\n   UTF8 only the characters of ASN.1 PrintableString may be used.\n\
    \   Other name form (identifier \"O\"):\n      <oname> ::= <oid> , <utf8string>\n\
    \   E-mail address (rfc822name) name form (identifier \"E\"):\n      <ename> ::=\
    \ <ia5string>\n   DNS name form (identifier \"D\"):\n      <dname> ::= <ia5string>\n\
    \   URI name form (identifier \"U\"):\n      <uname> ::= <ia5string>\n   IP address\
    \ (identifier \"I\"):\n      <iname> ::= <oid>\n   For example:\n      issuerName?XOU=Our\
    \ CA,O=Acme,C=US%\n      subjectName?XCN=John Smith, O=Acme, C=US, E=john@acme.com%\n"
- title: References
  contents:
  - "References\n   [RFC1738]  Berners-Lee, T., Masinter, L. and M.  McCahill,\n \
    \            \"Uniform Resource Locators (URL)\", RFC 1738, December 1994.\n"
- title: Appendix C. ASN.1 Structures and OIDs
  contents:
  - 'Appendix C. ASN.1 Structures and OIDs

    '
- title: PKIXCRMF {iso(1) identified-organization(3) dod(6) internet(1)
  contents:
  - "PKIXCRMF {iso(1) identified-organization(3) dod(6) internet(1)\n   security(5)\
    \ mechanisms(5) pkix(7) id-mod(0) id-mod-crmf(5)}\n"
- title: CRMF DEFINITIONS IMPLICIT TAGS ::=
  contents:
  - 'CRMF DEFINITIONS IMPLICIT TAGS ::=

    '
- title: BEGIN
  contents:
  - 'BEGIN

    '
- title: IMPORTS
  contents:
  - "IMPORTS\n     -- Directory Authentication Framework (X.509)\n        Version,\
    \ AlgorithmIdentifier, Name, Time,\n        SubjectPublicKeyInfo, Extensions,\
    \ UniqueIdentifier\n           FROM PKIX1Explicit88 {iso(1) identified-organization(3)\
    \ dod(6)\n               internet(1) security(5) mechanisms(5) pkix(7) id-mod(0)\n\
    \               id-pkix1-explicit-88(1)}\n     -- Certificate Extensions (X.509)\n\
    \        GeneralName\n           FROM PKIX1Implicit88 {iso(1) identified-organization(3)\
    \ dod(6)\n                  internet(1) security(5) mechanisms(5) pkix(7) id-mod(0)\n\
    \                  id-pkix1-implicit-88(2)}\n     -- Cryptographic Message Syntax\n\
    \        EnvelopedData\n           FROM CryptographicMessageSyntax { iso(1) member-body(2)\n\
    \                us(840) rsadsi(113549) pkcs(1) pkcs-9(9) smime(16)\n        \
    \        modules(0) cms(1) };\n"
- title: CertReqMessages ::= SEQUENCE SIZE (1..MAX) OF CertReqMsg
  contents:
  - 'CertReqMessages ::= SEQUENCE SIZE (1..MAX) OF CertReqMsg

    '
- title: CertReqMsg ::= SEQUENCE {
  contents:
  - "CertReqMsg ::= SEQUENCE {\n    certReq   CertRequest,\n    pop       ProofOfPossession\
    \  OPTIONAL,\n    -- content depends upon key type\n    regInfo   SEQUENCE SIZE(1..MAX)\
    \ OF AttributeTypeAndValue OPTIONAL }\n"
- title: CertRequest ::= SEQUENCE {
  contents:
  - "CertRequest ::= SEQUENCE {\n    certReqId     INTEGER,          -- ID for matching\
    \ request and reply\n    certTemplate  CertTemplate,  -- Selected fields of cert\
    \ to be issued\n    controls      Controls OPTIONAL }   -- Attributes affecting\
    \ issuance\n"
- title: CertTemplate ::= SEQUENCE {
  contents:
  - "CertTemplate ::= SEQUENCE {\n    version      [0] Version               OPTIONAL,\n\
    \    serialNumber [1] INTEGER               OPTIONAL,\n    signingAlg   [2] AlgorithmIdentifier\
    \   OPTIONAL,\n    issuer       [3] Name                  OPTIONAL,\n    validity\
    \     [4] OptionalValidity      OPTIONAL,\n    subject      [5] Name         \
    \         OPTIONAL,\n    publicKey    [6] SubjectPublicKeyInfo  OPTIONAL,\n  \
    \  issuerUID    [7] UniqueIdentifier      OPTIONAL,\n    subjectUID   [8] UniqueIdentifier\
    \      OPTIONAL,\n    extensions   [9] Extensions            OPTIONAL }\n"
- title: OptionalValidity ::= SEQUENCE {
  contents:
  - "OptionalValidity ::= SEQUENCE {\n    notBefore  [0] Time OPTIONAL,\n    notAfter\
    \   [1] Time OPTIONAL } --at least one MUST be present\n"
- title: Controls  ::= SEQUENCE SIZE(1..MAX) OF AttributeTypeAndValue
  contents:
  - 'Controls  ::= SEQUENCE SIZE(1..MAX) OF AttributeTypeAndValue

    '
- title: AttributeTypeAndValue ::= SEQUENCE {
  contents:
  - "AttributeTypeAndValue ::= SEQUENCE {\n    type         OBJECT IDENTIFIER,\n \
    \   value        ANY DEFINED BY type }\n"
- title: ProofOfPossession ::= CHOICE {
  contents:
  - "ProofOfPossession ::= CHOICE {\n    raVerified        [0] NULL,\n    -- used\
    \ if the RA has already verified that the requester is in\n    -- possession of\
    \ the private key\n    signature         [1] POPOSigningKey,\n    keyEncipherment\
    \   [2] POPOPrivKey,\n    keyAgreement      [3] POPOPrivKey }\n"
- title: POPOSigningKey ::= SEQUENCE {
  contents:
  - "POPOSigningKey ::= SEQUENCE {\n    poposkInput           [0] POPOSigningKeyInput\
    \ OPTIONAL,\n    algorithmIdentifier   AlgorithmIdentifier,\n    signature   \
    \          BIT STRING }\n    -- The signature (using \"algorithmIdentifier\")\
    \ is on the\n    -- DER-encoded value of poposkInput.  NOTE: If the CertReqMsg\n\
    \    -- certReq CertTemplate contains the subject and publicKey values,\n    --\
    \ then poposkInput MUST be omitted and the signature MUST be\n    -- computed\
    \ on the DER-encoded value of CertReqMsg certReq.  If\n    -- the CertReqMsg certReq\
    \ CertTemplate does not contain the public\n    -- key and subject values, then\
    \ poposkInput MUST be present and\n    -- MUST be signed.  This strategy ensures\
    \ that the public key is\n    -- not present in both the poposkInput and CertReqMsg\
    \ certReq\n    -- CertTemplate fields.\n"
- title: POPOSigningKeyInput ::= SEQUENCE {
  contents:
  - "POPOSigningKeyInput ::= SEQUENCE {\n    authInfo            CHOICE {\n      \
    \  sender              [0] GeneralName,\n        -- used only if an authenticated\
    \ identity has been\n        -- established for the sender (e.g., a DN from a\n\
    \        -- previously-issued and currently-valid certificate\n        publicKeyMAC\
    \        PKMACValue },\n        -- used if no authenticated GeneralName currently\
    \ exists for\n        -- the sender; publicKeyMAC contains a password-based MAC\n\
    \        -- on the DER-encoded value of publicKey\n    publicKey           SubjectPublicKeyInfo\
    \ }  -- from CertTemplate\n"
- title: PKMACValue ::= SEQUENCE {
  contents:
  - "PKMACValue ::= SEQUENCE {\n   algId  AlgorithmIdentifier,\n   -- algorithm value\
    \ shall be PasswordBasedMac {1 2 840 113533 7 66 13}\n   -- parameter value is\
    \ PBMParameter\n   value  BIT STRING }\n"
- title: PBMParameter ::= SEQUENCE {
  contents:
  - "PBMParameter ::= SEQUENCE {\n      salt                OCTET STRING,\n      owf\
    \                 AlgorithmIdentifier,\n      -- AlgId for a One-Way Function\
    \ (SHA-1 recommended)\n      iterationCount      INTEGER,\n      -- number of\
    \ times the OWF is applied\n      mac                 AlgorithmIdentifier\n  \
    \    -- the MAC AlgId (e.g., DES-MAC, Triple-DES-MAC [PKCS11],\n"
- title: '}   -- or HMAC [RFC2104, RFC2202])'
  contents:
  - '}   -- or HMAC [RFC2104, RFC2202])

    '
- title: POPOPrivKey ::= CHOICE {
  contents:
  - "POPOPrivKey ::= CHOICE {\n    thisMessage       [0] BIT STRING,\n    -- posession\
    \ is proven in this message (which contains the private\n    -- key itself (encrypted\
    \ for the CA))\n    subsequentMessage [1] SubsequentMessage,\n    -- possession\
    \ will be proven in a subsequent message\n    dhMAC             [2] BIT STRING\
    \ }\n    -- for keyAgreement (only), possession is proven in this message\n  \
    \  -- (which contains a MAC (over the DER-encoded value of the\n    -- certReq\
    \ parameter in CertReqMsg, which MUST include both subject\n    -- and publicKey)\
    \ based on a key derived from the end entity's\n    -- private DH key and the\
    \ CA's public DH key);\n    -- the dhMAC value MUST be calculated as per the directions\
    \ given\n    -- in Appendix A.\n"
- title: SubsequentMessage ::= INTEGER {
  contents:
  - "SubsequentMessage ::= INTEGER {\n    encrCert (0),\n    -- requests that resulting\
    \ certificate be encrypted for the\n    -- end entity (following which, POP will\
    \ be proven in a\n    -- confirmation message)\n    challengeResp (1) }\n    --\
    \ requests that CA engage in challenge-response exchange with\n    -- end entity\
    \ in order to prove private key possession\n"
- title: -- Object identifier assignments --
  contents:
  - '-- Object identifier assignments --

    '
- title: id-pkix  OBJECT IDENTIFIER  ::= { iso(1) identified-organization(3)
  contents:
  - 'id-pkix  OBJECT IDENTIFIER  ::= { iso(1) identified-organization(3)

    '
- title: dod(6) internet(1) security(5) mechanisms(5) 7 }
  contents:
  - 'dod(6) internet(1) security(5) mechanisms(5) 7 }

    '
- title: -- arc for Internet X.509 PKI protocols and their components
  contents:
  - '-- arc for Internet X.509 PKI protocols and their components

    '
- title: id-pkip  OBJECT IDENTIFIER ::= { id-pkix 5 }
  contents:
  - 'id-pkip  OBJECT IDENTIFIER ::= { id-pkix 5 }

    '
- title: -- Registration Controls in CRMF
  contents:
  - '-- Registration Controls in CRMF

    '
- title: id-regCtrl OBJECT IDENTIFIER ::= { id-pkip 1 }
  contents:
  - 'id-regCtrl OBJECT IDENTIFIER ::= { id-pkip 1 }

    '
- title: -- The following definition may be uncommented for use with
  contents:
  - '-- The following definition may be uncommented for use with

    '
- title: -- ASN.1 compilers which do not understand UTF8String.
  contents:
  - '-- ASN.1 compilers which do not understand UTF8String.

    '
- title: -- UTF8String ::= [UNIVERSAL 12] IMPLICIT OCTET STRING
  contents:
  - '-- UTF8String ::= [UNIVERSAL 12] IMPLICIT OCTET STRING

    '
- title: id-regCtrl-regToken OBJECT IDENTIFIER ::= { id-regCtrl 1 }
  contents:
  - 'id-regCtrl-regToken OBJECT IDENTIFIER ::= { id-regCtrl 1 }

    '
- title: '--with syntax:'
  contents:
  - '--with syntax:

    '
- title: RegToken ::= UTF8String
  contents:
  - 'RegToken ::= UTF8String

    '
- title: id-regCtrl-authenticator OBJECT IDENTIFIER ::= { id-regCtrl 2 }
  contents:
  - 'id-regCtrl-authenticator OBJECT IDENTIFIER ::= { id-regCtrl 2 }

    '
- title: '--with syntax:'
  contents:
  - '--with syntax:

    '
- title: Authenticator ::= UTF8String
  contents:
  - 'Authenticator ::= UTF8String

    '
- title: id-regCtrl-pkiPublicationInfo OBJECT IDENTIFIER ::= { id-regCtrl 3 }
  contents:
  - 'id-regCtrl-pkiPublicationInfo OBJECT IDENTIFIER ::= { id-regCtrl 3 }

    '
- title: '--with syntax:'
  contents:
  - '--with syntax:

    '
- title: PKIPublicationInfo ::= SEQUENCE {
  contents:
  - "PKIPublicationInfo ::= SEQUENCE {\n   action     INTEGER {\n                dontPublish\
    \ (0),\n                pleasePublish (1) },\n   pubInfos  SEQUENCE SIZE (1..MAX)\
    \ OF SinglePubInfo OPTIONAL }\n     -- pubInfos MUST NOT be present if action\
    \ is \"dontPublish\"\n     -- (if action is \"pleasePublish\" and pubInfos is\
    \ omitted,\n     -- \"dontCare\" is assumed)\n"
- title: SinglePubInfo ::= SEQUENCE {
  contents:
  - "SinglePubInfo ::= SEQUENCE {\n    pubMethod    INTEGER {\n        dontCare  \
    \  (0),\n        x500        (1),\n        web         (2),\n        ldap    \
    \    (3) },\n    pubLocation  GeneralName OPTIONAL }\n"
- title: id-regCtrl-pkiArchiveOptions     OBJECT IDENTIFIER ::= { id-regCtrl 4 }
  contents:
  - 'id-regCtrl-pkiArchiveOptions     OBJECT IDENTIFIER ::= { id-regCtrl 4 }

    '
- title: '--with syntax:'
  contents:
  - '--with syntax:

    '
- title: PKIArchiveOptions ::= CHOICE {
  contents:
  - "PKIArchiveOptions ::= CHOICE {\n    encryptedPrivKey     [0] EncryptedKey,\n\
    \    -- the actual value of the private key\n    keyGenParameters     [1] KeyGenParameters,\n\
    \    -- parameters which allow the private key to be re-generated\n    archiveRemGenPrivKey\
    \ [2] BOOLEAN }\n    -- set to TRUE if sender wishes receiver to archive the private\n\
    \    -- key of a key pair which the receiver generates in response to\n    --\
    \ this request; set to FALSE if no archival is desired.\n"
- title: EncryptedKey ::= CHOICE {
  contents:
  - "EncryptedKey ::= CHOICE {\n    encryptedValue        EncryptedValue,\n    envelopedData\
    \     [0] EnvelopedData }\n    -- The encrypted private key MUST be placed in\
    \ the envelopedData\n    -- encryptedContentInfo encryptedContent OCTET STRING.\n"
- title: EncryptedValue ::= SEQUENCE {
  contents:
  - "EncryptedValue ::= SEQUENCE {\n    intendedAlg   [0] AlgorithmIdentifier  OPTIONAL,\n\
    \    -- the intended algorithm for which the value will be used\n    symmAlg \
    \      [1] AlgorithmIdentifier  OPTIONAL,\n    -- the symmetric algorithm used\
    \ to encrypt the value\n    encSymmKey    [2] BIT STRING           OPTIONAL,\n\
    \    -- the (encrypted) symmetric key used to encrypt the value\n    keyAlg  \
    \      [3] AlgorithmIdentifier  OPTIONAL,\n    -- algorithm used to encrypt the\
    \ symmetric key\n    valueHint     [4] OCTET STRING         OPTIONAL,\n    --\
    \ a brief description or identifier of the encValue content\n    -- (may be meaningful\
    \ only to the sending entity, and used only\n    -- if EncryptedValue might be\
    \ re-examined by the sending entity\n    -- in the future)\n    encValue     \
    \  BIT STRING }\n    -- the encrypted value itself\n"
- title: KeyGenParameters ::= OCTET STRING
  contents:
  - 'KeyGenParameters ::= OCTET STRING

    '
- title: id-regCtrl-oldCertID          OBJECT IDENTIFIER ::= { id-regCtrl 5 }
  contents:
  - 'id-regCtrl-oldCertID          OBJECT IDENTIFIER ::= { id-regCtrl 5 }

    '
- title: '--with syntax:'
  contents:
  - '--with syntax:

    '
- title: OldCertId ::= CertId
  contents:
  - 'OldCertId ::= CertId

    '
- title: CertId ::= SEQUENCE {
  contents:
  - "CertId ::= SEQUENCE {\n    issuer           GeneralName,\n    serialNumber  \
    \   INTEGER }\n"
- title: id-regCtrl-protocolEncrKey    OBJECT IDENTIFIER ::= { id-regCtrl 6 }
  contents:
  - 'id-regCtrl-protocolEncrKey    OBJECT IDENTIFIER ::= { id-regCtrl 6 }

    '
- title: '--with syntax:'
  contents:
  - '--with syntax:

    '
- title: ProtocolEncrKey ::= SubjectPublicKeyInfo
  contents:
  - 'ProtocolEncrKey ::= SubjectPublicKeyInfo

    '
- title: -- Registration Info in CRMF
  contents:
  - '-- Registration Info in CRMF

    '
- title: id-regInfo OBJECT IDENTIFIER ::= { id-pkip 2 }
  contents:
  - 'id-regInfo OBJECT IDENTIFIER ::= { id-pkip 2 }

    '
- title: id-regInfo-utf8Pairs    OBJECT IDENTIFIER ::= { id-regInfo 1 }
  contents:
  - 'id-regInfo-utf8Pairs    OBJECT IDENTIFIER ::= { id-regInfo 1 }

    '
- title: --with syntax
  contents:
  - '--with syntax

    '
- title: UTF8Pairs ::= UTF8String
  contents:
  - 'UTF8Pairs ::= UTF8String

    '
- title: id-regInfo-certReq       OBJECT IDENTIFIER ::= { id-regInfo 2 }
  contents:
  - 'id-regInfo-certReq       OBJECT IDENTIFIER ::= { id-regInfo 2 }

    '
- title: --with syntax
  contents:
  - '--with syntax

    '
- title: CertReq ::= CertRequest
  contents:
  - 'CertReq ::= CertRequest

    '
- title: END
  contents:
  - 'END

    '
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (1999).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
