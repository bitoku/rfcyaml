- contents:
  - '              PGP Authentication for RIPE Database Updates

    '
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1999).  All Rights Reserved.\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   This document presents the proposal for a stronger authentication\n
    \  method of the updates of the RIPE database based on digital\n   signatures.
    The proposal tries to be as general as possible as far as\n   digital signing
    methods are concerned, however, it concentrates\n   mainly on PGP, as the first
    method to be implemented.  The proposal\n   is the result of the discussions within
    the RIPE DBSEC Task Force.\n"
  title: Abstract
- contents:
  - "1. Rationale\n   An increasing need has been identified for a stronger authentication\n
    \  of the database maintainer upon database updates (addition,\n   modification
    and deletion of objects). The existing authentication\n   methods have serious
    security problems: the MAIL-FROM has the\n   drawback that a mail header is very
    easy to forge whereas CRYPT-PW is\n   exposed to message interception, since the
    password is sent\n   unencrypted in the update mail message.\n   The goal was
    to implement a digital signature mechanism based on a\n   widely available and
    deployed technology. The first choice was PGP,\n   other methods may follow at
    a later date. PGP is presently quite\n   widely used within the Internet community
    and is available both in\n   and outside the US.\n   The current aim is for an
    improved authentication method and nothing\n   more (in particular, this paper
    does not try to cover authorization\n   issues other than those related to authentication).\n"
  title: 1. Rationale
- contents:
  - "2. Changes to the RIPE database\n   In order to make the database as much self
    consistent as possible,\n   the key certificates are stored in the RIPE database.
    For efficiency\n   reasons a local keyring of public keys will also be maintained,\n
    \  however, the local keyring will only contain a copy of the key\n   certificates
    present in the database. The synchronization of the\n   database with the local
    keyring will be made as often as possible.\n   The database objects will be created
    only via the current e-mail\n   mechanism (auto-dbm@ripe.net), in particular no
    public key\n   certificate will be retrieved from a key server by the database\n
    \  software.\n   The presence of the key certificates in the database will allow
    the\n   users of the database to check the \"identity\" of the maintainer, in\n
    \  the sense that they can query the database for the certificate of the\n   key
    the database software uses for authenticating the maintainer.\n   This key certificate
    can then be checked for existing signatures and\n   can possibly be compared with
    the key certificate obtained by other\n   means for the same user (e.g. from the
    owner himself of from a public\n   key server). Although the key certificates
    can be stored in the RIPE\n   database with any number of signatures, since the
    RIPE database is\n   not communicating directly with the public key servers, it
    is a good\n   practice to add the key certificate with the minimum number of\n
    \  signatures possible (preferably with just one signature: the one of\n   itself).
    \ See also section 4. for more details.\n"
  - contents:
    - "2.1. The key-cert object\n   A new object type is defined below for the purpose
      of storing the key\n   certificates of the maintainers:\n   key-cert:  [mandatory]
      \ [single]     [primary/look-up key]\n   method:    [generated]  [single]     [
      ]\n   owner:     [generated]  [multiple]   [ ]\n   fingerpr:  [generated]  [single]
      \    [ ]\n   certif:    [mandatory]  [single]     [ ]\n   remarks:   [optional]
      \  [multiple]   [ ]\n   notify:    [optional]   [multiple]   [inverse key]\n
      \  mnt-by:    [mandatory]  [multiple]   [inverse key]\n   changed:   [mandatory]
      \ [multiple]   [ ]\n   source:    [mandatory]  [single]     [ ]\n   The syntax
      and the semantics of the different attributes are\n   described below.\n   key-cert:
      Is of the form PGPKEY-hhhhhhhh, where hhhhhhhh stands for\n      for the hex
      representation of the four bytes ID of the PGP key.\n      The key certificate
      detailed in the certif attribute belongs to\n      the PGP key with the id hhhhhhhh.
      The reason for having PGPKEY- as\n      a prefix is to allow for other types
      of key certificates at a\n      later date, and at the same time to be able
      to clearly\n      differentiate at query time between a person query and a key\n
      \     certificate query.  At the time of the creation/modification of\n      the
      key-cert object, the database software checks whether the key\n      certificate
      in the certif attribute indeed belongs to the PGP id\n      specified here.
      The creation/modification is authorized only upon\n      the match of these
      two ids.\n   method:  Line containing the name of the signing method.  This
      is the\n      name of the digital signature method. The present certificate\n
      \     belongs to a key for digitally signing messages using the\n      specified
      method.  The method attribute is generated automatically\n      by the database
      software upon creation of the key-cert object.\n      Any method attribute present
      in the object at the time of the\n      submission for creation is ignored.
      \ The method has to be\n      consistent with both the prefix of the id in the
      key-cert\n      attribute and with the certificate contained in the certif\n
      \     attributes. If these latter two (i.e. prefix and certificate) are\n      not
      consistent, the key-cert object creation is refused. For the\n      PGP method
      this will be the string \"PGP\" (without the quotes).\n   owner:  Line containing
      a description of the owner of the key.  For a\n      PGP key, the owners are
      the user ids associated with the key.  For\n      each user id present in the
      key certificate, an owner attribute is\n      generated automatically by the
      database software upon creation of\n      the key-cert object.  Any owner attribute
      present in the object at\n      the time of the submission for creation is ignored.\n
      \  fingerpr:  A given number of hex encoded bytes, separated for better\n      readability
      by spaces.  It represents the fingerprint of the key\n      associated with
      the present certificate.  This is also a field\n      generated upon creation
      of the object instance.  Any fingerpr\n      attribute submitted to the robot
      is ignored.  The reason for\n      having this attribute (and the owner attribute)
      is to allow for an\n      easy check of the key certificate upon a query of
      the database.\n      The querier gets the owner and fingerprint information
      without\n      having to add the certificate to his/her own public keyring.\n
      \     Also, since these two attributes are _generated_ by the database\n      software
      from the certificate, one can trust them (as much as one\n      can trust the
      database itself).\n   certif:  Line containing a line of the ASCII armoured
      key\n      certificate.  The certif attribute lines contain the key\n      certificate.
      \ In the case of PGP, they also contain the delimiting\n      lines (BEGIN/END
      PGP PUBLIC KEY BLOCK).  Obviously the order of\n      the lines is essential,
      therefore the certif attribute lines are\n      presented at query time in the
      same order as they have been\n      submitted at creation.  A database client
      application could\n      contain a script that strips the certif attribute lines
      (returned\n      as a result of a query) from the leading \"certif:\" string
      and the\n      following white spaces and import the remainder in the local\n
      \     keyring.\n   mnt-by:  The usual syntax the usual semantics this attribute
      is\n      _mandatory_ for this object. Therefore, the existence of a mntner\n
      \     object is a prerequisite for the creation of a key-cert object.\n      The
      mntner referenced in the mnt-by attribute may not have the\n      auth attribute
      set to NONE.\n   remarks:,\n   notify:,\n   changed:,\n   source:  the usual
      syntax and semantics.\n   In the case of PGP, when a key-cert object is created,
      the associated\n   key is also added to a local keyring of public keys. When
      a key-cert\n   object is deleted, the corresponding public key is deleted from
      the\n   local keyring as well. Whenever a key-cert object is modified, the\n
      \  key is deleted from the local keyring and the key associated with the\n   new
      certificate is added to the keyring (obviously this is performed\n   only when
      the database update is authorized, in particular if the new\n   key certificate
      does belong to the id specified in the attribute\n   key-cert, see above).\n"
    title: 2.1. The key-cert object
  - contents:
    - "2.2. Changes to the mntner object\n   The only change is that there is a new
      possible value for the auth\n   attribute.  This value is of the form PGPKEY-<id>,
      where <id> is the\n   hex representation of the four bytes id of the PGP public
      key used\n   for authentication.\n   The semantics of this new value is that
      the PGP key associated with\n   the key certificate stored in the key-cert object
      identified by\n   PGPKEY-id is used to check the signature of any\n   creation/modification/deletion
      message sent to auto-dbm@ripe.net\n   affecting an object maintained by this
      mntner.\n   Just as with other values, the auth attribute can be multiple. It\n
      \  does not make much sense to have two auth attributes with different\n   methods
      (e.g.  PGPKEY-<id> and NONE :)) ), just as it didn't earlier\n   either.\n   If
      there are several auth methods with a PGPKEY-<id> value, the\n   semantics is
      the already known one, namely that _either_ signature is\n   accepted.\n"
    title: 2.2. Changes to the mntner object
  title: 2. Changes to the RIPE database
- contents:
  - "3. The PGP signed creation/modification/deletion\n   The whole message has to
    be signed. This means, that the database\n   software first checks whether the
    message is a PGP signed message. If\n   it is, it checks for a valid signature
    and associates this signature\n   with the objects submitted in the message. A
    message may contain only\n   one PGP signature.\n   If an object present in a
    message has a mnt-by attribute, and the\n   respective mntner has auth attribute(s)
    with PGPKEY-<id> value, the\n   database software checks whether the object has
    a signature\n   associated with it (i.e. whether the message being processed had
    been\n   signed) and whether the type of the signature (PGP in this\n   implementation
    phase) and the id of the key used for signing the\n   message is the same as the
    one in (one of) the auth attribute(s). The\n   creation/modification/deletion
    of the object is performed only if\n   this authentication succeeds.\n   This
    approach allows for a simplification of the message parsing\n   process.  A different
    approach would be necessary if one would sign\n   the _objects_, rather then the
    update messages. In case the objects\n   would be signed, the parser would have
    to identify which objects were\n   signed, check the signature(s) on each object
    individually and\n   permit/refuse the update at an object level, depending on
    (amongst\n   others) whether the signature is valid and whether it belongs to
    (one\n   of) the maintainer(s). This approach would allow for mixing in the\n
    \  same e-mail message objects signed by different maintainers (which\n   would
    probably not be typical), and it would also allow for storing\n   the signature
    in the database (in order to allow for the verification\n   of the signature at
    query time). This latter (i.e. storing the\n   signatures in the database) is
    beyond the scope of the first phase of\n   the implementation. It may become a
    goal at a later date.\n   It is recommended to check that the mailer program does
    not make any\n   transformations on the text of the e-mail message (and possibly\n
    \  configure it not to do any). Such common transformations are line-\n   wrapping
    after a given number of characters, transforming of tabs in\n   spaces, etc. Also
    check that you only use ASCII characters in the\n   message.\n"
  title: 3. The PGP signed creation/modification/deletion
- contents:
  - "4. Requirements the PGP key certificates must meet\n   There is no limitation
    imposed with respect to the version of the PGP\n   software that is/was used for
    the creation of the key. Key of both\n   version 2.x and 5.0 are supported, although
    the keys generated with\n   version 5.0 are recommended.\n   The key certificates
    submitted for creating a key-cert object must\n   contain a signature of the key
    itself. Although the certificate may\n   contain other signatures as well, it
    is recommended to create the\n   key-cert object with as few signatures as possible
    in the\n   certificate. Anyone concerned about the trustfulness of the key\n   should
    retrieve a copy of the key certificate from a public key\n   server (or by any
    other appropriate means and check the signatures\n   present in _that_ certificate.
    If such a check is performed one\n   should take care to check both the key fingerprint
    and the key type\n   and length in order to make sure the two certificates (the
    one\n   retrieved from the RIPE database and the one retrieved from the\n   public
    key server or collected by other means) belong to the same\n   key.\n   Although
    it is highly unlikely, it may happen that a key-cert with\n   the id identical
    to the id of the key of a maintainer already exists\n   in the RIPE database.
    \ In case this latter key had been used for a\n   while and it had been registered
    at public key servers for some time,\n   the given person should contact the RIPE
    NCC and report this to\n   ripe-dbm@ripe.net. Anyway, he/she may have to create
    a new key and\n   register _its_ certificate into the RIPE database. Such a procedure,\n
    \  although highly unlikely to happen, should not create serious\n   problems
    to the respective maintainer.\n"
  title: 4. Requirements the PGP key certificates must meet
- contents:
  - "5. Short overview of the tasks to be performed in order to use PGP\n   authentication\n
    \  You must have a mntner object in the RIPE database with auth: other\n   than
    NONE.  The mntner object has to be created in the traditional\n   way.\n   You
    must get a certificate of your own key and prepare a key-cert\n   object from
    it. The object has to reference in mnt-by the mntner\n   mentioned above.\n   Create
    the key-cert object in the RIPE database, by sending the\n   object prepared above
    to auto-dbm@ripe.net. Obviously you must pass\n   the authentication checks required
    by the mntner object (i.e.  mail\n   from a predefined address or send the correct
    password).\n   Change the mntner object to have the auth: attribute value of\n
    \  PGPKEY-<id>, where <id> is the hex id of your PGP key.\n   Check all objects
    maintained by the given mntner (preferably with the\n   command This is the only
    way to benefit from the stronger\n   authentication method in order to assign
    more trustfulness to the\n   database. Remember that you are the only person who
    can check for and\n   correct possible inconsistencies.\n   From now on always
    sign the (whole) update messages that refer to\n   objects maintained by you,
    with the key you submitted to the RIPE\n   database.\n"
  title: 5. Short overview of the tasks to be performed in order to use PGP
- contents:
  - "6. Example of objects using the new feature\n   mntner:      AS3244-MNT\n   descr:
    \      BankNet, Budapest HU\n   descr:       Eastern European Internet Provider
    via own VSAT network\n   admin-c:     JZ38\n   tech-c:      JZ38\n   tech-c:      IR2-RIPE\n
    \  upd-to:      ncc@banknet.net\n   mnt-nfy:     ncc@banknet.net\n   auth:        PGPKEY-23F5CE35\n
    \  remarks:     This is the maintainer of all BankNet related objects\n   notify:
    \     ncc@banknet.net\n   mnt-by:      AS3244-MNT\n   changed:     zsako@banknet.net
    19980525\n   source:      RIPE\n   key-cert: PGPKEY-23F5CE35\n   method:   PGP\n
    \  owner:    Janos Zsako <zsako@banknet.net>\n   fingerpr: B5 D0 96 D0 D0 D3 2B
    B2  B8 C2 5D 22 D4 F5 78 92\n   certif: -----BEGIN PGP PUBLIC KEY BLOCK-----\n
    \   Version: 2.6.2i\n   +\n    mQCNAzCqKdIAAAEEAPMSQtBNFFuTS0duoUiqnPHm05dxrI76rrOGwx+OU5tzGavx\n
    \   cm2iCInNtikeKjlIMD7FiCH1J8PWdZivpwhzuGeeMimT8ZmNn4z3bb6ELRyiZOvs\n    4nfxVlh+kKKD9JjBfy8DnuMs5sT0jw4FEt/PYogJinFdndzywXHzGHEj9c41AAUR\n
    \   tB9KYW5vcyBac2FrbyA8enNha29AYmFua25ldC5uZXQ+iQCVAwUQMjkx2XHzGHEj\n    9c41AQEuagP/dCIBJP+R16Y70yH75kraRzXY5rnsHmT0Jknrc/ihEEviRYdMV7X1\n
    \   osP4pmDU8tNGf0OfGrok7KDTCmygIh7/me+PKrDIj0YkAVUhBX3gBtpSkhEmkLqf\n    xbhYwDn4DV3zF7f5AMsbD0UCBDyf+vpkMzgd1Pbr439iXdgwgwta50qJAHUDBRAy\n
    \   OSsrO413La462EEBAdIuAv4+Cao1wqBG7+gIm1czIb1M2cAM7Ussx6y+oL1d+HqN\n    PRhx4upLVg8Eqm1w4BYpOxdZKkxumIrIvrSxUYv4NBnbwQaa0/NmBou44jqeN+y2\n
    \   xwxAEVd9BCUtT+YJ9iMzZlE=\n    =w8xL\n    -----END PGP PUBLIC KEY BLOCK-----\n
    \  remarks: This is an example of PGP key certificate\n   mnt-by:  AS3244-MNT\n
    \  changed: zsako@banknet.net 19980525\n   source:  RIPE\n"
  title: 6. Example of objects using the new feature
- contents:
  - "7. Security Considerations\n   This document addresses authentication of transactions
    for making\n   additions, deletions, and updates to the routing policy information\n
    \  through strong cryptographic means.  The authorization of these\n   transactions
    are addressed in [1].\n"
  title: 7. Security Considerations
- contents:
  - "8. Acknowledgements\n   The present proposal is the result of the discussions
    within the RIPE\n   DBSEC Task Force, which was set up at RIPE 27 in Dublin at
    the\n   initiative of Joachim Schmitz and Wilfried Woeber. The list of\n   participants
    who have contributed to the discussions at different\n   ocasions (TF meetings
    and via e-mail) is (in alphabetical order):\n   Cengiz Allaettinoglu, Joao Luis
    Silva Damas, Havard Eidnes, Chris\n   Fletcher, Daniel Karrenberg, David Kessens,
    Jake Khuon, Craig\n   Labovitz, Carl Malamud, Dave Meyer, Maldwyn Morris, Sandy
    Murphy,\n   Mike Norris, Carol Orange, Joachim Schmitz, Tom Spindler, Don\n   Stikvoort,
    Curtis Villamizar, Gerald Winters, Wilfried Woeber, Janos\n   Zsako.\n"
  title: 8. Acknowledgements
- contents:
  - "9. References\n   [1]  Meyer, D., Villamizar, C., Alaettinoglu, C. and S.  Murphy,\n
    \       \"Routing Policy System Security\", RFC 2725, December 1999.\n"
  title: 9. References
- contents:
  - "10. Author's Address\n   Janos Zsako\n   BankNet\n   1121 Budapest\n   Konkoly-Thege
    ut 29-33.\n   Hungary\n   Phone: +36 1 395 90 28\n   Fax:   +36 1 395 90 32\n
    \  EMail: zsako@banknet.net\n"
  title: 10. Author's Address
- contents:
  - "11. Notices\n   PGP is a commercial software.\n   The IETF takes no position
    regarding the validity or scope of any\n   intellectual property or other rights
    that might be claimed to\n   pertain to the implementation or use of the technology
    described in\n   this document or the extent to which any license under such rights\n
    \  might or might not be available; neither does it represent that it\n   has
    made any effort to identify any such rights.  Information on the\n   IETF's procedures
    with respect to rights in standards-track and\n   standards-related documentation
    can be found in BCP-11.  Copies of\n   claims of rights made available for publication
    and any assurances of\n   licenses to be made available, or the result of an attempt
    made to\n   obtain a general license or permission for the use of such\n   proprietary
    rights by implementors or users of this specification can\n   be obtained from
    the IETF Secretariat.\n   The IETF invites any interested party to bring to its
    attention any\n   copyrights, patents or patent applications, or other proprietary\n
    \  rights which may cover technology that may be required to practice\n   this
    standard.  Please address the information to the IETF Executive\n   Director.\n"
  title: 11. Notices
- contents:
  - "12.  Full Copyright Statement\n   Copyright (C) The Internet Society (1999).
    \ All Rights Reserved.\n   This document and translations of it may be copied
    and furnished to\n   others, and derivative works that comment on or otherwise
    explain it\n   or assist in its implementation may be prepared, copied, published\n
    \  and distributed, in whole or in part, without restriction of any\n   kind,
    provided that the above copyright notice and this paragraph are\n   included on
    all such copies and derivative works.  However, this\n   document itself may not
    be modified in any way, such as by removing\n   the copyright notice or references
    to the Internet Society or other\n   Internet organizations, except as needed
    for the purpose of\n   developing Internet standards in which case the procedures
    for\n   copyrights defined in the Internet Standards process must be\n   followed,
    or as required to translate it into languages other than\n   English.\n   The
    limited permissions granted above are perpetual and will not be\n   revoked by
    the Internet Society or its successors or assigns.\n   This document and the information
    contained herein is provided on an\n   \"AS IS\" basis and THE INTERNET SOCIETY
    AND THE INTERNET ENGINEERING\n   TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS
    OR IMPLIED, INCLUDING\n   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE
    INFORMATION\n   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES
    OF\n   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\n"
  title: 12.  Full Copyright Statement
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided
    by the\n   Internet Society.\n"
  title: Acknowledgement
