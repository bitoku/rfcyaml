Abstract This document discusses some of the security problems and practical problems with the current Session Traversal Utilities for NAT (STUN) authentication for Traversal Using Relays around NAT (TURN) messages.
Introduction Traversal Using Relays around NAT (TURN)
[RFC5766] is a protocol that is often used to improve the connectivity of Peer to Peer (P2P) applications (as defined in Section 2.7 of [RFC5128]).
TURN allows a connection to be established when one or both sides are incapable of a direct P2P connection.
The TURN server is also a building block to support interactive, real time communication using audio, video, collaboration, games, etc., between two peer web browsers using the Web Real Time Communication (WebRTC)
A TURN server is also used in the following scenarios:  For privacy, users of WebRTC based web applications may use a TURN server to hide host candidate addresses from the remote peer.
Enterprise networks deploy firewalls that typically block UDP traffic.
When SIP user agents or WebRTC endpoints are deployed behind such firewalls, media cannot be sent over UDP across the firewall but must instead be sent using TCP (which causes a different user experience).
In such cases, a TURN server deployed in the DeMilitarized Zone (DMZ) might be used to traverse firewalls.
The use case explained in Section 3.3.5 of [WebRTC Use Cases] ("Simple Video Communication Service, enterprise aspects") refers to deploying a TURN server in the DMZ to audit all media sessions from inside an Enterprise premises to any external peer.
A TURN server could also be deployed for RTP Mobility [TURN Mobility], etc.
A TURN server may be used for IPv4 to IPv6, IPv6 to IPv6, and IPv6 to IPv4 relaying [RFC6156].
[RFC5245] connectivity checks using server reflexive candidates could fail when the endpoint is behind a NAT [RFC3235] that performs address  dependent mapping as described in Section 4.1 of [RFC4787].
In such cases, a relayed candidate allocated from the TURN server is used for media.
Session Traversal Utilities for NAT (STUN)
[RFC5389] specifies an authentication mechanism called the long term credential mechanism.
Section 4 of TURN [RFC5766] specifies that TURN servers and clients must implement this mechanism; Section 4 of TURN [RFC5766] also specifies that the TURN server must demand that all requests from the client be authenticated using this mechanism or that an equally strong or stronger mechanism for client authentication be used.
In the above scenarios, applications would use the ICE protocol for gathering candidates.
An ICE agent can use TURN to learn server reflexive and relayed candidates.
If the TURN server requires that the TURN request be authenticated, then the ICE agent will use the long term credential mechanism explained in Section 10 of [RFC5389] for authentication and message integrity.
Section 10 of the TURN specification [RFC5766] explains the importance of the long term credential mechanism to mitigate various attacks.
Client authentication is essential to prevent unauthorized users from accessing the TURN server, and misuse of credentials could impose significant cost on the victim TURN server.
This document focuses on listing security problems and practical problems with current STUN authentication for TURN so that it can serve as the basis for stronger authentication mechanisms.
An Allocate request is more likely than a Binding request to be identified by a server administrator as needing client authentication and integrity protection of messages exchanged.
Hence, the issues discussed here regarding STUN authentication
are applicable mainly in the context of TURN messages.
This document uses terminology defined in [RFC5389] and [RFC5766].
This document can be used as input for designing solution(s) to address problems with the current STUN authentication for TURN messages.
Problems with STUN Long Term Authentication for TURN 1.
As described in [RFC5389], the long term credential mechanism could provide to users a long term credential in the form of a traditional "log in" username and password; this credential would not change for extended periods of time.
The key derived from the user credentials would be used to provide message integrity for every TURN request/response.
However, an attacker that is capable of eavesdropping on a message exchange between a client and server can determine the password by trying a number of candidate passwords and checking to see if one of them is correct by calculating the message integrity using these candidate passwords and comparing them with the message integrity value in the MESSAGE INTEGRITY attribute.
When a TURN server is deployed in the DMZ and requires that requests be authenticated using the long term credential mechanism as described in [RFC5389], the TURN server needs to be aware of the username and password to validate the message integrity of the requests and to provide message integrity for responses.
This results in management overhead on the TURN server.
Long term credentials (username, realm, and password) need to be stored on the server side, using an MD5 hash over the credentials, which is not considered best current practice.
[RFC6151] discusses security vulnerabilities of MD5 and encourages implementers not to use it.
It is not possible to use STUN long term credentials in implementations that are compliant with US FIPS 140 2 [FIPS 140 2], since MD5 isn't an approved algorithm.
The long term credential mechanism discussed in [RFC5389] specifies that the TURN client must include a username value in the USERNAME STUN attribute.
An adversary snooping the TURN messages between the TURN client and server can identify the users involved in the call, resulting in privacy leakage.
If TURN usernames are linked to real usernames, then privacy leakage will result, but in certain scenarios TURN usernames need not be linked to any real usernames given to users, as the usernames are just provisioned on a per company basis.
STUN authentication relies on HMAC SHA1 [RFC2104].
There is no mechanism for hash agility in the protocol itself, although Section 16.3 of [RFC5389] does discuss a plan for migrating to a more secure algorithm in case HMAC SHA1 is found to be compromised.
A man in the middle attacker posing as a TURN server challenges the client to authenticate, learns the USERNAME of the client, and later snoops the traffic from the client, thereby identifying user activity; this results in privacy leakage.
Hosting multiple realms on a single IP address is challenging with TURN.
When a TURN server needs to send the REALM attribute in response to an unauthenticated request, it has no useful information for determining which realm it should send in the response, except the source transport address of the TURN request.
Note that this is a problem with multi tenant scenarios only; this may not be a problem when the TURN server is located in enterprise premises.
In WebRTC, the JavaScript code needs to know the username and password to use in the W3C RTCPeerConnection API to access the TURN server.
This exposes user credentials to the JavaScript code, which could be malicious; the malicious JavaScript code could then misuse or leak the credentials.
If the credentials happen to be used for accessing services other than TURN, then the security implications are much larger.
This document lists problems with current STUN authentication for TURN so that it can serve as the basis for stronger authentication mechanisms.
