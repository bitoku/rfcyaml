- title: __initial_text__
  contents:
  - '                        IP MTU Discovery Options

    '
- title: STATUS OF THIS MEMO
  contents:
  - "STATUS OF THIS MEMO\n   A pair of IP options that can be used to learn the minimum\
    \ MTU of a\n   path through an internet is described, along with its possible\
    \ uses.\n   This is a proposal for an Experimental protocol.  Distribution of\n\
    \   this memo is unlimited.\n"
- title: INTRODUCTION
  contents:
  - "INTRODUCTION\n   Although the Internet Protocol allows gateways to fragment packets\n\
    \   that are too large to forward, fragmentation is not always desirable.\n  \
    \ It can lead to poor performance or even total communication failure\n   in circumstances\
    \ that are surprisingly common.  (For a thorough\n   discussion of this issue,\
    \ see [1]).\n   A datagram will be fragmented if it is larger than the Maximum\n\
    \   Transmission Unit (MTU) of some network along the path it follows.\n   In\
    \ order to avoid fragmentation, a host sending an IP datagram must\n   ensure\
    \ that the datagram is no larger than the Minimum MTU (MINMTU)\n   over the entire\
    \ path.\n   It has long been recognized that the methods for discovering the\n\
    \   MINMTU of an IP internetwork path are inadequate.  The methods\n   currently\
    \ available fall into two categories: (1) choosing small MTUs\n   to avoid fragmentation\
    \ or (2) using additional probe packets to\n   discover when fragmentation will\
    \ occur.  Both methods have problems.\n   Choosing MTUs requires a balance between\
    \ network utilization (which\n   requires the use of the largest possible datagram)\
    \ and fragmentation\n   avoidance (which in the absence of knowledge about the\
    \ network path\n   encourages the use of small, and thus too many, datagrams).\
    \  Any\n   choice for the MTU size, without information from the network, is\n\
    \   likely to either fail to properly utilize the network or fail to\n   avoid\
    \ fragmentation.\n   Probe packets have the problem of burdening the network with\n\
    \   unnecessary packets.  And because network paths often change during\n   the\
    \ lifetime of a TCP connection, probe packets will have to be sent\n   on a regular\
    \ basis to detect any changes in the effective MINMTU.\n   Implementors sometimes\
    \ mistake the TCP MSS option as a mechanism for\n   learning the network MINMTU.\
    \  In fact, the MSS option is only a\n   mechanism for learning about buffering\
    \ capabilities at the two TCP\n   peers.  Separate provisions must be made to\
    \ learn the IP MINMTU.\n   In this memo, we propose two new IP options that, when\
    \ used in\n   conjunction will permit two peers to determine the MINMTU of the\n\
    \   paths between them.  In this scheme, one option is used to determine\n   the\
    \ lowest MTU in a path; the second option is used to convey this\n   MTU back\
    \ to the sender (possibly in the IP datagram containing the\n   transport acknowledgement\
    \ to the datagram which contained the MTU\n   discovery option).\n"
- title: OPTION FORMATS
  contents:
  - "OPTION FORMATS\n   Probe MTU Option (Number 11)\n      Format\n             \
    \ +--------+--------+--------+--------+\n              |00001011|00000100|   2\
    \ octet value |\n              +--------+--------+--------+--------+\n      Definition\n\
    \      This option always contains the lowest MTU of all the networks\n      that\
    \ have been traversed so far by the datagram.\n      A host that sends this option\
    \ must initialize the value field to\n      be the MTU of the directly-connected\
    \ network.  If the host is\n      multi-homed, this should be for the first-hop\
    \ network.\n      Each gateway that receives a datagram containing this option\
    \ must\n      compare the MTU field with the MTUs of the inbound and outbound\n\
    \      links for the datagram.  If either MTU is lower than the value in\n   \
    \   the MTU field of the option, the option value should be set to the\n     \
    \ lower MTU.  (Note that gateways conforming to RFC-1009 may not\n      know either\
    \ the inbound interface or the outbound interface at the\n      time that IP options\
    \ are processed.  Accordingly, support for this\n      option may require major\
    \ gateway software changes).\n      Any host receiving a datagram containing this\
    \ option should\n      confirm that value of the MTU field of the option is less\
    \ than or\n      equal to that of the inbound link, and if necessary, reduce the\n\
    \      MTU field value, before processing the option.\n      If the receiving\
    \ host is not able to accept datagrams as large as\n      specified by the value\
    \ of the MTU field of the option, then it\n      should reduce the MTU field to\
    \ the size of the largest datagram it\n      can accept.\n   Reply MTU Option\
    \ (Number 12)\n      Format\n              +--------+--------+--------+--------+\n\
    \              |00001100|00000100|   2 octet value |\n              +--------+--------+--------+--------+\n\
    \      Definition\n      This option is used to return the value learned from\
    \ a Probe MTU\n      option to the sender of the Probe MTU option.\n"
- title: RELATION TO TCP MSS
  contents:
  - "RELATION TO TCP MSS\n   Note that there are two superficially similar problems\
    \ in choosing\n   the size of a datagram.  First, there is the restriction [2]\
    \ that a\n   host not send a datagram larger than 576 octets unless it has\n \
    \  assurance that the destination is prepared to accept a larger\n   datagram.\
    \  Second, the sending host should not send a datagram larger\n   than MINMTU,\
    \ in order to avoid fragmentation.  The datagram size\n   should normally be the\
    \ minimum of these two lower bounds.\n   In the past, the TCP MSS option [3] has\
    \ been used to avoid sending\n   packets larger than the destination can accept.\
    \  Unfortunately, this\n   is not the most general mechanism; it is not available\
    \ to other\n   transport layers, and it cannot determine the MINMTU (because\n\
    \   gateways do not parse TCP options).\n   Because the MINMTU returned by a probe\
    \ cannot be larger than the\n   maximum datagram size that the destination can\
    \ accept, this IP option\n   could, in theory, supplant the use of the TCP MSS\
    \ option, providing\n   an economy of mechanism.  (Note however, that some researchers\n\
    \   believe that the value of the TCP MSS is distinct from the path's\n   MINMTU.\
    \  The MSS is the upper limit of the data size that the peer\n   will accept,\
    \ while the MINMTU represents a statement about the data\n   size supported by\
    \ the path).\n   Note that a failure to observe the MINMTU restriction is not\
    \ normally\n   fatal; fragmentation will occur, but this is supposed to work.\
    \  A\n   failure to observe the TCP MSS option, however, could be fatal\n   because\
    \ it might lead to datagrams that can never be accepted by the\n   destination.\
    \  Therefore, unless and until the Probe MTU option is\n   universally implemented,\
    \ at least by hosts, the TCP MSS option must\n   be used as well.\n"
- title: IMPLEMENTATION APPROACHES
  contents:
  - "IMPLEMENTATION APPROACHES\n   Who Sends the Option\n      There are at least\
    \ two ways to implement the MTU discovery scheme.\n      One method makes the\
    \ transport layer responsible for MTU\n      discovery; the other method makes\
    \ the IP layer responsible for MTU\n      discovery.  A host system should support\
    \ one of the two schemes.\n   Transport Discovery\n      In the transport case,\
    \ the transport layer can include the Probe\n      MTU option in an outbound datagram.\
    \  When a datagram containing\n      the Probe MTU option is received, the option\
    \ must be passed up to\n      the receiving transport layer, which should then\
    \ acknowledge the\n      Probe with a Reply MTU option in the next return datagram.\
    \  Note\n      that because the options are placed on unreliable datagrams, the\n\
    \      original sender will have to resend Probes (possibly once per\n      window\
    \ of data) until it receives a Reply option.  Also note that\n      the Reply\
    \ MTU option may be returned on an IP datagram for a\n      different transport\
    \ protocol from which it was sent (e.g., TCP\n      generated the probe but the\
    \ Reply was received on a UDP datagram).\n   IP Discovery\n      A better scheme\
    \ is to put MTU discovery into the IP layer, using\n      control mechanisms in\
    \ the routing cache.  Whenever an IP datagram\n      is sent, the IP layer checks\
    \ in the routing cache to see if a\n      Probe or Reply MTU option needs to be\
    \ inserted in the datagram.\n      Whenever a datagram containing either option\
    \ is received, the\n      information in those options is placed in the routing\
    \ cache.\n      The basic working of the protocol is somewhat complex.  We trace\n\
    \      it here through one round-trip.  Implementors should realize that\n   \
    \   there may be cases where both options are contained in one\n      datagram.\
    \  For the purposes of this exposition, the sender of the\n      probe is called\
    \ the Probe-Sender and the receiver, Probe-Receiver.\n      When the IP layer\
    \ is asked to send a Probe MTU option (see the\n      section below on when to\
    \ probe), it makes some record in the\n      routing cache that indicates the\
    \ next IP datagram to Probe-\n      Receiver should contain the Probe MTU option.\n\
    \      When the next IP datagram to Probe-Receiver is sent, the Probe MTU\n  \
    \    option is inserted.  The IP layer in Probe-Sender should continue\n     \
    \ to send an occasional Probe MTU in subsequent datagrams until a\n      Reply\
    \ MTU option is received.  It is strongly recommended that the\n      Probe MTU\
    \ not be sent in all datagrams but only at such a rate\n      that, on average,\
    \ one Probe MTU will be sent per round-trip\n      interval.  (Another way of\
    \ saying this is that we would hope that\n      only one datagram in a transport\
    \ protocol window worth of data has\n      the Probe MTU option set).  This mechanism\
    \ might be implemented by\n      sending every Nth packet, or, in those implementations\
    \ where the\n      round-trip time estimate to the destination is cached with\
    \ the\n      route, once every estimated RTT.\n      When a Probe MTU option is\
    \ received by Probe-Receiver, the\n      receiving IP should place the value of\
    \ this option in the next\n      datagram it sends back to Probe-Sender.  The\
    \ value is then\n      discarded.  In other words, each Probe MTU option causes\
    \ the Reply\n      MTU option to be placed in one return datagram.\n      When\
    \ Probe-Sender receives the Reply MTU option, it should check\n      the value\
    \ of the option against the current MINMTU estimate in the\n      routing cache.\
    \  If the option value is lower, it becomes the new\n      MINMTU estimate.  If\
    \ the option value is higher, Probe-Sender\n      should be more conservative\
    \ about changing the MINMTU estimate.\n      If a route is flapping, the MINMTU\
    \ may change frequently.  In such\n      situations, keeping the smallest MINMTU\
    \ of various routes in use\n      is preferred.  As a result, a higher MINMTU\
    \ estimate should only\n      be accepted after a lower estimate has been permitted\
    \ to \"age\" a\n      bit.  In other words, if the probe value is higher than\
    \ the\n      estimated MINMTU, only update the estimate if the estimate is\n \
    \     several seconds old or more.  Finally, whenever the Probe-Sender\n     \
    \ receives a Reply MTU option, it should stop retransmitting probes\n      to\
    \ Probe-Receiver.\n      A few additional issues complicate this discussion.\n\
    \      One problem is setting the default MINMTU when no Reply MTU\n      options\
    \ have been received.  We recommend the use of the minimum\n      of the supported\
    \ IP datagram size (576 octets) and the connected\n      network MTU for destinations\
    \ not on the local connected network,\n      and the connected network MTU for\
    \ hosts on the connected network.\n      The MINMTU information, while kept by\
    \ the Internet layer, is in\n      fact, only of interest to the transport and\
    \ higher layers.\n      Accordingly, the Internet layer must keep the transport\
    \ layer\n      informed of the current value of the estimated MINMTU.\n      Furthermore,\
    \ minimal transport protocols, such as UDP, must be\n      prepared to pass this\
    \ information up to the transport protocol\n      user.\n      It is expected\
    \ that there will be a transition period during which\n      some hosts support\
    \ this option and some do not.  As a result,\n      hosts should stop sending\
    \ Probe MTU options and refuse to send any\n      further options if it does not\
    \ receive either a Probe MTU option\n      or Reply MTU option from the remote\
    \ system after a certain number\n      of Probe MTU options have been sent.  In\
    \ short, if Probe-Sender\n      has sent several probes but has gotten no indication\
    \ that Probe-\n      Receiver supports MTU probing, then Probe-Sender should assume\n\
    \      that Probe-Receiver does not support probes.  (Obviously, if\n      Probe-Sender\
    \ later receives a probe option from Probe-Receiver, it\n      should revise its\
    \ opinion.)\n      Implementations should not assume that routes to the same\n\
    \      destination that have a different TOS have the same estimated\n      MINMTU.\
    \  We recommend that the MTU be probed separately for each\n      TOS.\n   Respecting\
    \ the TCP MSS\n      One issue concerning TCP MSS is that it is usually negotiated\n\
    \      assuming an IP header that contains no options.  If the transport\n   \
    \   layer is sending maximum size segments, it may not leave space for\n     \
    \ IP to fit the options into the datagram.  Thus, insertion of the\n      Probe\
    \ MTU or Reply MTU option may violate the MSS restriction.\n      Because, unlike\
    \ other IP options, the MTU options can be inserted\n      without the knowledge\
    \ of the transport layer, the implementor must\n      carefully consider the implications\
    \ of adding options to an IP\n      datagram.\n      One approach is to reserve\
    \ 4 bytes from the MINMTU reported to the\n      transport layer; this will allow\
    \ the IP layer to insert at least\n      one MTU option in every datagram (it\
    \ can compare the size of the\n      outgoing datagram with the MINMTU stored\
    \ in the route cache to see\n      how much room there actually is).  This is\
    \ simple to implement,\n      but does waste a little bandwidth in the normal\
    \ case.\n      Another approach is to provide a means for the IP layer to notify\n\
    \      the transport layer that space must be reserved for sending an\n      option;\
    \ the transport layer would then make a forthcoming segment\n      somewhat smaller\
    \ than usual.\n   When a Probe Can Be Sent\n      A system that receives a Probe\
    \ MTU option should always respond\n      with a Reply MTU option, unless the\
    \ probe was sent to an IP or LAN\n      broadcast address.\n      A Probe MTU\
    \ option should be sent in any of the following\n      situations:\n         (1)\
    \ The MINMTU for the path is not yet known;\n         (2) A received datagram\
    \ suffers a fragmentation re-assembly\n             timeout. (This is a strong\
    \ hint the path has changed;\n             send a probe to the datagram's source);\n\
    \         (3) An ICMP Time Exceeded/Fragmentation Reassembly Timeout is\n    \
    \         received (this is the only message we will get that\n             indicates\
    \ fragmentation occurred along the network path);\n         (4) The transport\
    \ layer requests it.\n      Implementations may also wish to periodically probe\
    \ a path, even\n      if there is no indication that fragmentation is occurring.\
    \  This\n      practice is perfectly reasonable; if fragmentation and reassembly\n\
    \      is working perfectly, the sender may never get any indication that\n  \
    \    the path MINMTU has changed unless a probe is sent.  We recommend,\n    \
    \  however, that implementations send such periodic probes sparingly.\n      Once\
    \ every few minutes, or once every few hundred datagrams is\n      probably sufficient.\n\
    \      There are also some scenarios in which the Probe MTU should not be\n  \
    \    sent, even though there may be some indication of an MINMTU\n      change:\n\
    \         (1) Probes should not be sent in response to the receipt of\n      \
    \       a probe option.  Although the fact that the remote peer\n            \
    \ is probing indicates that the MINMTU may have changed,\n             sending\
    \ a probe in response to a probe causes a continuous\n             exchange of\
    \ probe options.\n         (2) Probes must not be sent in response to fragmented\n\
    \             datagrams except when the fragmentation reassembly\n           \
    \  of the datagram fails.  The problem in this case is\n             that the\
    \ receiver has no mechanism for informing the remote\n             peer that fragmentation\
    \ has occurred, unless fragmentation\n             reassembly fails (in which\
    \ case an ICMP message is sent).\n             Thus, a peer may use the wrong\
    \ MTU for some time before\n             discovering a problem.  If we probe on\
    \ fragmented\n             datagrams, we may probe, unnecessarily, for some time\n\
    \             until the remote peer corrects its MTU.\n         (3) For compatibility\
    \ with hosts that do not implement the\n             option, no Probe MTU Option\
    \ should be sent more than\n             ten times without receiving a Reply MTU\
    \ Option or a\n             Probe MTU Option from the remote peer.  Peers which\n\
    \             ignore probes and do not send probes must be treated\n         \
    \    as not supporting probes.\n         (4) Probes should not be sent to an IP\
    \ or LAN broadcast\n             address.\n         (5) We recommend that Probe\
    \ MTUs not be sent to other hosts\n             on the directly-connected network,\
    \ but that this feature\n             be configurable.  There are situations (for\
    \ example, when\n             Proxy ARP is in use) where it may be difficult to\
    \ determine\n             which systems are on the directly-connected network.\
    \  In\n             this case, probing may make sense.\n"
- title: SAMPLE IMPLEMENTATION SKETCH
  contents:
  - "SAMPLE IMPLEMENTATION SKETCH\n   We present here a somewhat more concrete description\
    \ of how an IP-\n   layer implementation of MTU probing might be designed.\n \
    \  First, the routing cache entries are enhanced to store seven\n   additional\
    \ values:\n      MINMTU: The current MINMTU of the path.\n      ProbeRetry: A\
    \ timestamp indicating when the next probe\n                  should be sent.\n\
    \      LastDecreased: A timestamp showing when the MTU was\n                 \
    \    last decreased.\n      ProbeReply: A bit indicating a Reply MTU option should\
    \ be\n                  sent.\n      ReplyMTU: The value to go in the Reply MTU\
    \ option.\n      SupportsProbes: A bit indicating that the remote peer\n     \
    \                 can deal with probes (always defaults to\n                 \
    \     1=true).\n      ConsecutiveProbes: The number of probes sent without\n \
    \                        the receipt of a Probe MTU or Reply\n               \
    \          MTU option.\n   There are also several configuration parameters; these\
    \ should be\n   configurable by appropriate network management software; the values\n\
    \   we suggest are \"reasonable\":\n      Default_MINMTU: The default value for\
    \ the MINMTU field of the\n                      routing cache entry, to be used\
    \ when the real\n                      MINMTU is unknown.  Recommended value:\
    \ 576.\n      Max_ConsecutiveProbs: The maximum number of probes to send\n   \
    \                         before assuming that the destination does\n        \
    \                    not support the probe option.\n                         \
    \   Recommended value: 10.\n      ProbeRetryTime: The time (in seconds) to wait\
    \ before retrying\n                      an unanswered probe.  Recommended value:\n\
    \                      60 seconds, or 2*RTT if the the RTT is available\n    \
    \                  to the IP layer.\n      ReprobeInterval: The time to wait before\
    \ sending a probe after\n                       receiving a successful Reply MTU,\
    \ in order to\n                       detect increases in the route's MINMTU.\n\
    \                       Recommended value: 5 times the ProbeRetryTime.\n     \
    \ IncreaseInterval: The time to wait before increasing the MINMTU\n          \
    \              after the value has been decreased, to prevent\n              \
    \          flapping.  Recommended value: same as\n                        ProbeRetryTime.\n\
    \   When a new route is entered into the routing cache, the initial\n   values\
    \ should be set as follows:\n      MINMTU = Default_MINMTU\n      ProbeRetry =\
    \ Current Time\n      LastDecreased = Current Time - IncreaseInterval\n      ProbeReply\
    \ = false\n      SupportsProbes = true\n      ConsecutiveProbes = 0\n   This initialization\
    \ is done before attempting to send the first\n   packet along this route, so\
    \ that the first packet will contain a\n   Probe MTU option.\n   Whenever the\
    \ IP layer sends a datagram on this route it checks the\n   SupportsProbes bit\
    \ to see if the remote system supports probing.  If\n   the SupportsProbes bit\
    \ is set, and the timestamp in ProbeRetry is\n   less than or equal to the current\
    \ time, a Probe option should be sent\n   in the datagram, and the ProbeRetry\
    \ field incremented by\n   ProbeRetryTime.\n   Whether or not the Probe MTU option\
    \ is sent in a datagram, if the\n   ProbeReply bit is set, then a Reply MTU option\
    \ with the value of the\n   ReplyMTU field is placed in the outbound datagram.\
    \  The ProbeReply\n   bit is then cleared.\n   Every time a Probe option is sent,\
    \ the ConsecutiveProbes value should\n   be incremented.  If this value reaches\
    \ Max_ConsecutiveProbes, the\n   SupportsProbe bit should be cleared.\n   When\
    \ an IP datagram containing the Probe MTU option is received, the\n   receiving\
    \ IP sets the ReplyMTU to the Probe MTU option value and sets\n   the ProbeReply\
    \ bit in its outbound route to the source of the\n   datagram.  The SupportsProbe\
    \ bit is set, and the ConsecutiveProbes\n   value is reset to 0.\n   If an IP\
    \ datagram containing the Reply MTU option is received, the IP\n   layer must\
    \ locate the routing cache entry corresponding to the source\n   of the Reply\
    \ MTU option; if no such entry exists, a new one (with\n   default values) should\
    \ be created.  The SupportsProbe bit is set, and\n   the ConsecutiveProbes value\
    \ is reset to 0.  The ProbeRetry field is\n   set to the current time plus ReprobeInterval.\n\
    \   Four cases are possible when a Reply MTU option is received:\n      (1) The\
    \ Reply MTU option value is less than the current\n          MINMTU: the MINMTU\
    \ field is set to the new value, and\n          the LastDecreased field is set\
    \ to the current time.\n      (2) The Reply MTU option value is greater than the\n\
    \          current MINMTU and the LastDecreased field plus\n          IncreaseInterval\
    \ is less than the current time: set the\n          ProbeRetry field to LastDecreased\
    \ plus IncreaseInterval,\n          but do not change MINMTU.\n      (3) The Reply\
    \ MTU option value is greater than the\n          current MINMTU and the LastDecreased\
    \ field plus\n          IncreaseInterval is greater than the current time: set\n\
    \          the MINMTU field to the new value.\n      (4) The Reply MTU option\
    \ value is equal to the current\n          MINMTU: do nothing more.\n   Whenever\
    \ the MTU field is changed, the transport layer should be\n   notified, either\
    \ by an upcall or by a change in a shared variable\n   (which may be accessed\
    \ from the transport layer by a downcall).\n   If a fragmentation reassembly timeout\
    \ occurs, if an ICMP Time\n   Exceeded/Fragmentation Reassembly Timeout is received,\
    \ or if the IP\n   layer is asked to send a probe by a higher layer, the ProbeRetry\n\
    \   field for the appropriate routing cache entry is set to the current\n   time.\
    \  This will cause a Probe option to be sent with the next\n   datagram (unless\
    \ the SupportsProbe bit is turned off).\n"
- title: MANAGEMENT PARAMETERS
  contents:
  - "MANAGEMENT PARAMETERS\n   We suggest that the following parameters be made available\
    \ to local\n   applications and remote network management systems:\n      (1)\
    \ The number of probe retries to be made before determining\n          a system\
    \ is down.  The value of 10 is certain to be wrong\n          in some situations.\n\
    \      (2) The frequency with which probes are sent.  Systems may\n          find\
    \ that more or less frequent probing is more cost\n          effective.\n    \
    \  (3) The default MINMTU used to initialize routes.\n      (4) Applications should\
    \ have the ability to force a probe\n          on a particular route.  There are\
    \ cases where a probe\n          needs to be sent but the sender doesn't know\
    \ it.  An\n          operator must be able to cause a probe in such situations.\n\
    \          Furthermore, it may be useful for applications to \"ping\"\n      \
    \    for the MTU.\n"
- title: REFERENCES
  contents:
  - "REFERENCES\n   [1]  Kent, C. and J. Mogul, \"Fragmentation Considered\n     \
    \   Harmful\", Proc. ACM SIGCOMM '87, Stowe, VT, August 1987.\n   [2]  Postel,\
    \ J., Ed., \"Internet Protocol\", RFC-791,\n        USC/Information Sciences Institute,\
    \ Marina del Rey, CA,\n        September 1981.\n   [3]  Postel, J., Ed., \"Transmission\
    \ Control Protocol\", RFC-793,\n        USC/Information Sciences Institute, Marina\
    \ del Rey, CA,\n        September 1981.\n   [4]  Postel, J., \"The TCP Maximum\
    \ Segment Size and Related Topics\",\n        RFC-879, USC/Information Sciences\
    \ Institute, Marina del Rey,\n        CA, November 1983.\n"
