- title: __initial_text__
  contents:
  - '       Session Initiation Protocol (SIP) User Agent Configuration

    '
- title: Abstract
  contents:
  - "Abstract\n   This document defines procedures for how a SIP User Agent should\n\
    \   locate, retrieve, and maintain current configuration information from\n  \
    \ a Configuration Service.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 5741.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc6011.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2010 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \      1.1. Scope ......................................................3\n  \
    \    1.2. Terminology ................................................3\n    \
    \  1.3. User Agent Installation Examples ...........................4\n      \
    \     1.3.1. Hosted IP Service Provider Example ..................5\n        \
    \   1.3.2. IP-PBX Example ......................................5\n          \
    \ 1.3.3. Special Considerations for High Security\n                  Deployments\
    \ .........................................6\n   2. Obtaining User Agent Configuration\
    \ ..............................6\n      2.1. Network Discovery ..........................................6\n\
    \           2.1.1. Link Layer Provisioning .............................7\n  \
    \         2.1.2. Network Layer Provisioning ..........................7\n    \
    \  2.2. Obtaining the Configuration Service Domain .................8\n      \
    \     2.2.1. The Local Network Domain ............................8\n        \
    \   2.2.2. Manual Domain Name Entry ............................8\n      2.3.\
    \ Constructing the Configuration Request URL .................8\n           2.3.1.\
    \ Obtaining a Configuration Service Base URL ..........9\n           2.3.2. Adding\
    \ Configuration Request Parameters ............10\n           2.3.3. Configuration\
    \ Request URI Example ..................12\n      2.4. Obtaining Configuration\
    \ from the Configuration Service ....13\n           2.4.1. Configuration Data\
    \ Request Authentication ..........13\n           2.4.2. Configuration Data Request\
    \ Failure .................14\n      2.5. Configuration Changes .....................................15\n\
    \           2.5.1. Configuration Change Subscriptions .................16\n  \
    \         2.5.2. Configuration Change Polling .......................18\n    \
    \  2.6. Validity of Stored Configuration Data .....................19\n      \
    \     2.6.1. Re-Validating Configuration Data ...................19\n      2.7.\
    \ Retry Backoff Procedure ...................................20\n   3. Configuration\
    \ Data .............................................20\n      3.1. Configuration\
    \ Data Items ..................................20\n           3.1.1. Address-of-Record\
    \ ..................................21\n           3.1.2. Realm ..............................................21\n\
    \           3.1.3. Username ...........................................21\n  \
    \         3.1.4. Digest .............................................21\n    \
    \       3.1.5. OutboundProxy ......................................21\n      3.2.\
    \ Reset User Agent to Default Configuration .................21\n   4. IANA Considerations\
    \ ............................................21\n      4.1. DHCP SIP User Agent\
    \ Configuration Service Domains Option ..21\n      4.2. DHCPv6 SIP User Agent\
    \ Configuration Service\n           Domains Option ............................................22\n\
    \      4.3. U-NAPTR Registration ......................................23\n  \
    \    4.4. SIP Forum User Agent Configuration Parameter Registry .....23\n   5.\
    \ Security Considerations ........................................24\n   6. Acknowledgements\
    \ ...............................................26\n   7. Normative References\
    \ ...........................................27\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   A user gets a new SIP User Agent (UA); it may be a hardware\
    \ device or\n   software.  Some User Agents have a user interface that can accept\
    \ a\n   username, password, and domain name.  Other devices, like Analog\n   Telephony\
    \ Adapters (ATAs), have no user interface other than that\n   provided by an attached\
    \ analog phone.  How does a non-technical user\n   minimally configure it so that\
    \ when it is started, something useful\n   happens?\n"
- title: 1.1.  Scope
  contents:
  - "1.1.  Scope\n   This document specifies a procedure for how a SIP User Agent\
    \ locates,\n   retrieves, and maintains current configuration information for\
    \ a\n   given SIP Service Provider.  As such, it specifies requirements to be\n\
    \   met by both the User Agent, the Configuration Service at the SIP\n   Service\
    \ Provider, and the network infrastructure services that allow\n   them to communicate.\n\
    \   Nothing in this specification prohibits a User Agent from obtaining\n   configuration\
    \ information by any means in addition to the mechanisms\n   specified herein.\n\
    \   The intent of this specification is to provide mechanisms sufficient\n   for\
    \ User Agents to discover an appropriate source of configuration\n   and maintain\
    \ the currency of that configuration.  A User Agent\n   implementation compliant\
    \ with this specification MAY also implement\n   additional mechanisms necessary\
    \ in particular environments or when\n   the services specified here are not available.\n\
    \   The form and content of configuration data to be downloaded are\n   outside\
    \ the scope of this specification, although Section 3.1,\n   \"Configuration Data\
    \ Items\" suggests a minimum set of data items\n   likely to be required by all\
    \ types of UAs.\n"
- title: 1.2.  Terminology
  contents:
  - "1.2.  Terminology\n   The following terms are used in this document:\n   User\
    \ Agent, UA\n      As defined in RFC 3261 [RFC3261].  Note that this includes\
    \ any\n      implementation of a User Agent.  A SIP phone is a User Agent, but\n\
    \      the term also encompasses any other entity that uses SIP (for\n      example,\
    \ for a text chat, for sharing a whiteboard, or for a fax).\n   Soft User Agent,\
    \ Soft UA\n      A User Agent that runs as an application within some larger system\n\
    \      that has responsibility for some of the steps described in this\n     \
    \ specification.  In those cases, the Soft UA must be able to obtain\n      the\
    \ information from the platform.  In all cases, the term User\n      Agent also\
    \ encompasses a Soft User Agent.\n   SIP Service Provider, Service Provider\n\
    \      An entity that provides services to User Agents using the SIP\n      protocol.\
    \  This specification requires that a Service Provider\n      make configuration\
    \ data and certain other information available in\n      order to configure User\
    \ Agents.\n   Configuration\n      The set of information that establishes operational\
    \ parameters for\n      a particular User Agent.\n   Configuration Service, CS\n\
    \      The source of Configuration for User Agents.\n   Configuration Service\
    \ Domain\n      The DNS name for the service from which a Configuration is\n \
    \     requested.\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and\
    \ \"OPTIONAL\" in this\n   document are to be interpreted as described in RFC\
    \ 2119 [RFC2119].\n"
- title: 1.3.  User Agent Installation Examples
  contents:
  - "1.3.  User Agent Installation Examples\n   This section is non-normative; it\
    \ is a set of \"user stories\" --\n   narrative descriptions of the user experience\
    \ in different\n   environments.  These are \"black box\" descriptions meant to\
    \ include\n   the actions to be taken by the human participants (including\n \
    \  administrators and system operators as well as the \"user\" of the UA),\n \
    \  but not how the network elements communicate or operate internally.\n   The\
    \ intent is that these narratives provide context for the\n   subsequent technical\
    \ specifications.\n"
- title: 1.3.1.  Hosted IP Service Provider Example
  contents:
  - "1.3.1.  Hosted IP Service Provider Example\n   Configuring a new UA to use a\
    \ hosted IP telephony service will\n   typically proceed as follows: the customer\
    \ makes a request to their\n   Service Provider to add one or more new users to\
    \ their service.  The\n   customer may supply further details such as a preferred\
    \ username,\n   type of endpoint and any requests for specific functionality,\n\
    \   depending on what information the Service Provider considers useful,\n   but\
    \ no additional information is required from the customer.\n   The Service Provider\
    \ performs any necessary provisioning actions on\n   their equipment, and returns\
    \ to the customer provisioning\n   information, which may include a domain name\
    \ or a numeric domain\n   identifier for the provider, a user identifier, and\
    \ a password.\n   Typically, a Service Provider will supply provisioning information\n\
    \   for each device to be provisioned, but may choose to supply\n   information\
    \ that can be used with multiple devices, or for a limited\n   duration or with\
    \ other benefits and restrictions.\n   The customer enters the provisioning information\
    \ into the UA to be\n   configured, whereupon the UA uses this information to\
    \ locate the\n   configuration service, securely fetch the configuration information,\n\
    \   and configure itself for operation.\n"
- title: 1.3.2.  IP-PBX Example
  contents:
  - "1.3.2.  IP-PBX Example\n   Configuring a new UA in a typical business begins\
    \ by provisioning a\n   user identity in the Private Branch Exchange (PBX) (add\
    \ user \"John\n   Smith\"), and assigning a phone number to the user.  That number\
    \ must\n   then be assigned to a line on a specific UA; this is usually done by\n\
    \   selecting a UA and provisioning it in the PBX by its serial number\n   (usually\
    \ a Media Access Control (MAC) address), and then assigning\n   the identity or\
    \ phone number to a 'line' on that UA in the PBX\n   configuration system.\n \
    \  Once provisioning in the PBX is complete, the new user goes to his or\n   her\
    \ workplace and connects the UA to the network.  When connected and\n   powered\
    \ up, the UA is provided with the user identity, phone number,\n   and any other\
    \ configuration data with no local user interaction --\n   just connecting it\
    \ to the network loads the configuration from the\n   PBX and the UA is operational.\n"
- title: 1.3.3.  Special Considerations for High Security Deployments
  contents:
  - "1.3.3.  Special Considerations for High Security Deployments\n   To deploy a\
    \ new UA in a high security scenario requires some special\n   consideration.\
    \  A security-conscious deployment will most likely\n   require that the SIP and\
    \ other management interfaces, including the\n   interface to the configuration\
    \ service, be secured before the device\n   is put into service.\n   In order\
    \ to achieve any level of security, the device will need to be\n   pre-configured\
    \ with some security-related information in the form of\n   certificates.  This\
    \ may be achieved in a number of ways.  Some\n   examples include:\n   1.  An\
    \ administrator who configures the device in a secure\n       environment before\
    \ making the device available to the user.\n   2.  Some certificates may be built\
    \ into the device during the\n       manufacturing process enabling the configuration\
    \ service to\n       certify information such as the manufacturer, UA type, and\
    \ MAC\n       address.  The configuration service may then be used to provision\n\
    \       the device with other certificates as required.\n   3.  The device may\
    \ have a facility for the user to provide the\n       security information in\
    \ the form of a security card or dongle.\n   All these mechanism are likely to\
    \ restrict the user to a limited set\n   of devices approved for use in a particular\
    \ deployment.\n"
- title: 2.  Obtaining User Agent Configuration
  contents:
  - "2.  Obtaining User Agent Configuration\n   This section specifies how a User\
    \ Agent connects to the network,\n   determines for which domain to request configuration,\
    \ obtains\n   configuration from that domain, and is notified by that domain when\n\
    \   the configuration changes.\n   The User Agent MAY obtain configuration information\
    \ by any means in\n   addition to those specified here, and MAY use such information\
    \ in\n   preference to any of the steps specified below, but MUST be capable\n\
    \   of using these procedures alone in order to be compliant with this\n   specification.\n"
- title: 2.1.  Network Discovery
  contents:
  - "2.1.  Network Discovery\n   A UA needs a minimum set of parameters to allow it\
    \ to communicate on\n   the network.  Some networks allow the UA to automatically\
    \ discover\n   these parameters, while other networks require some or all of these\n\
    \   parameters to be manually provisioned on the UA.\n"
- title: 2.1.1.  Link Layer Provisioning
  contents:
  - "2.1.1.  Link Layer Provisioning\n   The UA SHOULD attempt to use Link Layer Discovery\
    \ Protocol - Media\n   Endpoint Discovery (LLDP-MED; see [ANSI.TIA-1057-2006])\
    \ for automatic\n   provisioning of link layer parameters.\n   In some deployments,\
    \ failure to properly provision the link layer may\n   result in the UA having\
    \ incorrect Layer 2 priority, degrading the\n   quality of service, or being on\
    \ the wrong virtual LAN (VLAN),\n   possibly resulting in complete loss of service.\n"
- title: 2.1.2.  Network Layer Provisioning
  contents:
  - "2.1.2.  Network Layer Provisioning\n   In order to communicate using IP, the\
    \ UA needs the following minimal\n   IP configuration parameters:\n   IP Network\
    \ Parameters\n   o  UA IP Address\n   o  Subnet Mask\n   o  Gateway IP address\n\
    \   o  DNS Server IP address(es)\n   With the exception of a Soft UA that relies\
    \ on its platform to obtain\n   the IP Network Parameters:\n   o  If the User\
    \ Agent is using IP version 4 on a network technology\n      for which the Dynamic\
    \ Host Configuration Protocol (DHCP) [RFC2131]\n      is defined, the UA MUST\
    \ attempt to obtain the IP Network\n      Parameters using DHCP and MUST request\
    \ DHCP options 141 (see\n      Section 4.1) and 15 [RFC2132].  If the DHCP service\
    \ provides a\n      value for option 141, the domain name(s) it provides MUST\
    \ be saved\n      as candidates for use as the Local Network Domain (see\n   \
    \   Section 2.2, \"Obtaining the Configuration Service Domain\").  If\n      and\
    \ only if no values are returned for option 141, the UA MUST\n      save any values\
    \ returned for option 15 for use as the Local\n      Network Domain.\n   o  If\
    \ the User Agent is using IP version 6 on a network technology\n      for which\
    \ the Dynamic Host Configuration Protocol version 6\n      (DHCPv6) [RFC3315]\
    \ is defined, the UA MAY use any standard IPv6\n      mechanism to determine the\
    \ IP Network Parameters, but MUST request\n      DHCPv6 options 58 (see Section\
    \ 4.2) and 21 [RFC3319].  If the\n      DHCPv6 service provides a value for option\
    \ 58, those domain names\n      MUST be saved as candidates for use as the Local\
    \ Network Domain\n      (see Section 2.2, \"Obtaining the Configuration Service\
    \ Domain\").\n      If and only if no values are returned for option 58, the UA\
    \ MUST\n      save any values returned for option 21 for use as the Local\n  \
    \    Network Domain.\n"
- title: 2.2.  Obtaining the Configuration Service Domain
  contents:
  - "2.2.  Obtaining the Configuration Service Domain\n   To obtain a configuration,\
    \ the UA needs to know what domain to\n   request it from.  This domain is the\
    \ Configuration Service Domain;\n   its value is a DNS name (see [RFC1034]).\n\
    \   User control or prior configuration MAY establish a value for the\n   Configuration\
    \ Service Domain that takes precedence over the discovery\n   procedure defined\
    \ below.  In the absence of user control or prior\n   configuration, candidate\
    \ values for the Configuration Service Domain\n   are obtained as specified in\
    \ Section 2.2.1, \"The Local Network\n   Domain\", or if that is unsuccessful,\
    \ by the manual mechanism\n   specified in Section 2.2.2, \"Manual Domain Name\
    \ Entry\".\n"
- title: 2.2.1.  The Local Network Domain
  contents:
  - "2.2.1.  The Local Network Domain\n   The UA MUST attempt to use each value obtained\
    \ for the Local Network\n   Domain name (see Section 2.1.2, \"Network Layer Provisioning\"\
    ) as the\n   Configuration Service Domain.  If multiple names are provided by\
    \ DHCP\n   and/or DHCPv6 (multiple names may be returned by these services if\n\
    \   both are in use, if the UA has multiple network interfaces, or if the\n  \
    \ option responses have multiple values), the UA MUST attempt to use\n   each\
    \ of the names provided until a configuration is successfully\n   obtained.  The\
    \ order in which values obtained in different responses\n   are used is not defined\
    \ by this specification -- the UA MAY use any\n   order; multiple values returned\
    \ within a single response MUST be\n   tried in the order they were provided in\
    \ that response.\n   If the DHCP service does not provide any local domain name\
    \ values,\n   the UA SHOULD use the manual mechanism defined in Section 2.2.2,\n\
    \   \"Manual Domain Name Entry\".\n"
- title: 2.2.2.  Manual Domain Name Entry
  contents:
  - "2.2.2.  Manual Domain Name Entry\n   A UA MAY provide an interface by which a\
    \ DNS name is supplied\n   directly by the user for the Configuration Service\
    \ Name.\n"
- title: 2.3.  Constructing the Configuration Request URL
  contents:
  - "2.3.  Constructing the Configuration Request URL\n   Using the Configuration\
    \ Service Domain name obtained in Section 2.2,\n   \"Obtaining the Configuration\
    \ Service Domain\", the UA MUST construct\n   an HTTPS URL [RFC2818] with which\
    \ to request configuration.\n   Constructing this URL consists of two parts:\n\
    \   o  Section 2.3.1, \"Obtaining a Configuration Service Base URL\"\n   o  Section\
    \ 2.3.2, \"Adding Configuration Request Parameters\"\n"
- title: 2.3.1.  Obtaining a Configuration Service Base URL
  contents:
  - "2.3.1.  Obtaining a Configuration Service Base URL\n   The Configuration Service\
    \ Domain is resolved to one or more URLs\n   using the URI-enabled Naming Authority\
    \ Pointer (U-NAPTR) DDDS\n   application defined in \"Domain-Based Application\
    \ Service Location\n   Using URIs and the Dynamic Delegation Discovery Service\
    \ (DDDS)\"\n   [RFC4848].\n   The lookup key for the U-NAPTR request is the Configuration\
    \ Service\n   Domain name determined in Section 2.2, \"Obtaining the Configuration\n\
    \   Service Domain\".  The UA MUST make a DNS request for NAPTR records\n   for\
    \ that domain name.  From the returned records, the UA MUST select\n   those whose\
    \ Service field value is \"SFUA.CFG\"; from those records,\n   the UA MUST extract\
    \ the HTTPS URL of the Configuration Service from\n   the Regular Expression field\
    \ (see next paragraph for the construction\n   of that field value).\n   The NAPTR\
    \ records for the Configuration Service Domain name whose\n   Service field value\
    \ is \"SFUA.CFG\" MUST be configured with the Flag\n   field set to \"U\", an\
    \ empty Substitution field, and a Regular\n   Expression field value of the following\
    \ syntax (i.e., a regular\n   expression to replace the domain name with an https\
    \ URI):\n             u-naptr-regexp = \"!.*!\" <URI> \"!\"\n   where <URI> is\
    \ as defined in STD 66 [RFC3986], the URI syntax\n   specification, and where\
    \ the scheme of the URI is \"https\".\n   Note that the UA does not need to implement\
    \ a general regular\n   expression evaluator in order to process the record above\
    \ correctly.\n   The URI value can be extracted by stripping the fixed value \"\
    !^.*!\"\n   from the beginning of the value, and \"!\" from the end of the value\
    \ to\n   obtain the base URL.  See Section 2.3.3, \"Configuration Request URI\n\
    \   Example\".\n"
- title: 2.3.1.1.  Configuration Service Redundancy
  contents:
  - "2.3.1.1.  Configuration Service Redundancy\n   Multiple Configuration Servers\
    \ can be used to provide redundancy and\n   additional capacity for provisioning\
    \ User Agents.  If the DNS NAPTR\n   request for the Configuration Service Domain\
    \ name returns multiple\n   records with the 'SFUA.CFG' service tag, then the\
    \ UA should treat the\n   resulting URLs as alternatives, ordered according to\
    \ the rules for\n   the priority and weight as specified for NAPTR records.\n\
    \   In addition to redundancy provided by multiple NAPTR records,\n   resolution\
    \ of the host part of the HTTPS URL can produce multiple\n   results.\n"
- title: 2.3.1.2.  Configuration Service Name to Base URL Resolution Failure
  contents:
  - "2.3.1.2.  Configuration Service Name to Base URL Resolution Failure\n   If the\
    \ DNS request to resolve the Configuration Service Domain name\n   to a request\
    \ URL does not receive any response, the UA should follow\n   standard DNS retry\
    \ procedures.\n   If the DNS request to resolve the Configuration Service Domain\
    \ name\n   to a host name returns a response that indicates that no matching\n\
    \   result is available (NXDOMAIN), the UA SHOULD attempt to obtain\n   another\
    \ Configuration Service Domain name using the procedures in\n   Section 2.2, \"\
    Obtaining the Configuration Service Domain\".\n"
- title: 2.3.2.  Adding Configuration Request Parameters
  contents:
  - "2.3.2.  Adding Configuration Request Parameters\n   To construct the full configuration\
    \ request URL, the UA adds one or\n   more parameters to the base URLs to specify\
    \ what configuration the UA\n   is requesting.\n   1.  The UA MUST add all parameters\
    \ from those defined in the\n       Configuration Request Parameters list below\
    \ for which the UA has\n       a value.  Any parameter from that set for which\
    \ the UA does not\n       have a value MUST be omitted.\n   2.  The query parameter\
    \ names defined by this specification all begin\n       with the prefix 'sfua-'.\
    \  All names beginning with the prefix\n       'sfua-' are reserved for this specification\
    \ and future revisions.\n       The UA MUST NOT include any request parameter\
    \ whose name begins\n       with the prefix 'sfua-' that is not defined by this\
    \ specification\n       (including any future revisions).\n   3.  Any parameter\
    \ not defined by the specification is allowed, but\n       MUST be ignored by\
    \ any Configuration Service that does not\n       recognize it.\n"
- title: 2.3.2.1.  Configuration Request Parameters
  contents:
  - "2.3.2.1.  Configuration Request Parameters\n      The following parameters are\
    \ defined for the configuration\n      request.  Section 4.4 creates an IANA registry\
    \ for these and any\n      parameters defined in the future.\n   sfua-id\n   \
    \   The URN identifying the User Agent, constructed as specified in\n      Section\
    \ 4.1 of [RFC5626] \"Managing Client-Initiated Connections in\n      the Session\
    \ Initiation Protocol (SIP)\".\n      Since the procedure defined by [RFC5626]\
    \ allows any UA to\n      construct a value for this parameter, the sfua-id parameter\
    \ MUST\n      always be included.\n      If the UA implements [RFC5626], and includes\
    \ the '+sip.instance'\n      Contact header field parameter in any request, when\
    \ requesting\n      configuration it MUST use the same value for the sfua-id\n\
    \      parameter.\n   sfua-user\n      An identifier for a user associated with\
    \ the configuration.  Note\n      that this might be different than any SIP 'user'\
    \ in the UA\n      configuration: it could, for example, be the login name of\
    \ an\n      account on the service provider web site.  The syntax of this\n  \
    \    parameter is that of the 'userid' [RFC2617].\n      See Section 2.4.1, \"\
    Configuration Data Request Authentication\" for\n      how this parameter relates\
    \ to authentication of the configuration\n      data request.\n   sfua-vendor\n\
    \      An identifier that specifies the vendor of the User Agent.  The\n     \
    \ syntax of the value of this parameter is that of a DNS domain.\n      The domain\
    \ value MUST be that of a domain owned by the vendor.\n   sfua-model\n      An\
    \ identifier that further specifies the User Agent from among\n      those produced\
    \ by the vendor.  The syntax of the value of this\n      parameter is the same\
    \ as the 'token' [RFC3261].  Values for this\n      parameter are selected by\
    \ the vendor.\n   sfua-revision\n      An identifier that further specifies the\
    \ User Agent from among\n      those produced by the vendor.  The syntax of the\
    \ value of this\n      parameter is the same as the 'token' [RFC3261].  Values\
    \ for this\n      parameter are selected by the vendor.\n"
- title: 2.3.3.  Configuration Request URI Example
  contents:
  - "2.3.3.  Configuration Request URI Example\n   Using the rules in Section 2.2,\
    \ \"Obtaining the Configuration Service\n   Domain\", the UA has determined that\
    \ the Configuration Service Domain\n   value is \"example.net\".  To obtain the\
    \ base URL, the UA constructs\n   the DNS NAPTR request for \"example.net.\",\
    \ which returns the DNS\n   records:\n   NAPTR  10 10 \"u\" \"SFUA.CFG\" \"!^.*$!https://p1.example.net/cfg!\"\
    \ \"\"\n   NAPTR 100 10 \"u\" \"SFUA.CFG\" \"!^.*$!https://p2.example.net/cfg!\"\
    \ \"\"\n   NAPTR  90 50 \"s\" \"SIP+D2T\"  \"\"  _sip._tcp.example.net.\n   NAPTR\
    \ 100 50 \"s\" \"SIP+D2U\"  \"\"  _sip._udp.example.net.\n        Figure 1: Example\
    \ Configuration Service NAPTR Query Results\n   The records with the service-field\
    \ \"SFUA.CFG\" each provide a base URL\n   value for SIP UA configuration requests.\n\
    \   Our hypothetical example communications device is a 'HypoComm'\n   version\
    \ 2.1, made by ExampleCorp, and has the link layer MAC address\n   of 00:11:22:33:44:55.\
    \  It does not have any prior knowledge of a user\n   identity for which to request\
    \ configuration, so it constructs query\n   parameters using the values it does\
    \ have, combining each with the\n   base URL to create these request URLs (lines\
    \ wrapped for\n   readability):\n   https://p1.example.net/cfg\n      ?sfua-id=urn:uuid:00000000-0000-1000-8000-001122334455\n\
    \      &sfua-vendor=examplecorp.com\n      &sfua-model=HypoComm\n      &sfua-revision=2.1\n\
    \   https://p2.example.net/cfg\n      ?sfua-id=urn:uuid:00000000-0000-1000-8000-001122334455\n\
    \      &sfua-vendor=examplecorp.com\n      &sfua-model=HypoComm\n      &sfua-revision=2.1\n\
    \               Figure 2: Example Configuration Request URLs\n"
- title: 2.4.  Obtaining Configuration from the Configuration Service
  contents:
  - "2.4.  Obtaining Configuration from the Configuration Service\n   To request configuration\
    \ using a URL constructed as specified in\n   Section 2.3, \"Constructing the\
    \ Configuration Request URL\" the User\n   Agent MUST do an HTTPS GET request\
    \ to each of the URLs until a\n   configuration that the UA can use is returned\
    \ in response to one of\n   the requests.\n   A successful final response from\
    \ the Configuration Service to a GET\n   request for configuration data MUST contain\
    \ configuration data for\n   the UA in the HTTP response body.  Note that the\
    \ full capabilities of\n   HTTP as specified in [RFC2616] are available to the\
    \ CS, so responses\n   such as redirection can be used by the CS as a part of\
    \ the process of\n   providing configuration data.\n   Configuration data returned\
    \ in a successful response is subject to\n   change by the CS.  The HTTP cache\
    \ control metadata (the max-age\n   directive value from any Cache-Control header,\
    \ and the Etag and Last-\n   Modified header values) returned in the response\
    \ that provides\n   configuration data is used to determine when a configuration\
    \ change\n   has occurred (Section 2.5.1.3, \"Configuration Change Notices\")\
    \ and to\n   validate any stored configuration data (Section 2.6, \"Validity of\n\
    \   Stored Configuration Data\").\n   o  An HTTP response from the CS that provides\
    \ configuration data MUST\n      include cache control metadata sufficient to\
    \ ensure that when a\n      new configuration is available, the cache control\
    \ information for\n      that new data is different.\n   o  The UA MUST retain\
    \ all of the HTTP cache control metadata from any\n      response that provides\
    \ configuration data.\n"
- title: 2.4.1.  Configuration Data Request Authentication
  contents:
  - "2.4.1.  Configuration Data Request Authentication\n   Since the Configuration\
    \ Request URL scheme is HTTPS, the UA MUST\n   always use Transport Layer Security\
    \ (TLS) [RFC5246] to establish a\n   connection with the Configuration Service.\n\
    \   The UA MUST provide a server_name extension in the TLS Client Hello\n   message\
    \ as defined in [RFC4366] \"Transport Layer Security (TLS)\n   Extensions\", whose\
    \ value is the Configuration Service Domain name\n   (note that this might not\
    \ be the same as the host part of the CS base\n   URL).  This allows the CS to\
    \ identify and provide a server\n   certificate containing the desired identity\
    \ (allowing for a single\n   server to serve multiple domain names).\n   A UA\
    \ MUST attempt to validate the server certificate provided by the\n   CS, in accordance\
    \ with the rules defined in Section 3.1 of [RFC2818].\n   Unfortunately, the validation\
    \ attempt might fail (e.g., because the\n   UA might not have in firmware a trusted\
    \ root CA cert to which the CS\n   certificate chain can be connected or because\
    \ the root CA cert has\n   expired since the UA firmware was last updated).  If\
    \ the UA is unable\n   to validate the server certificate provided by the CS,\
    \ the UA SHOULD\n   store the server certificate and alert the user if that CS\
    \ host\n   provides a different certificate in the future.  Although this 'trust\n\
    \   on first use' model is not as secure as certificate validation, it\n   does\
    \ give some protection against man-in-the-middle (MITM) attacks in\n   the future.\n\
    \   If it has one, the UA MUST provide a client certificate.  The CS MUST\n  \
    \ validate the UA client's certificate, if one is provided.  If the CS\n   is\
    \ unable to authenticate the certificate provided by the UA (for\n   example,\
    \ the UA is using a self-signed certificate), then the CS MAY\n   choose to cache\
    \ the certificate, provided that the UA successfully\n   authenticates using HTTP\
    \ authentication (see next paragraph).  This\n   allows a CS to treat the digest\
    \ authentication credentials as a\n   single-use password to authenticate the\
    \ client certificate.  This\n   'trust on first use' model provides protection\
    \ against future MITM\n   attacks, provided that the initial communication is\
    \ not compromised.\n   If the CS requires HTTP authentication of the configuration\
    \ data\n   request, the HTTP 'username' parameter used MUST be the same value\
    \ as\n   the sfua-user value provided in the configuration data request\n   parameters.\
    \  The UA MUST implement both Basic and Digest\n   authentication as specified\
    \ by [RFC2617].\n"
- title: 2.4.2.  Configuration Data Request Failure
  contents:
  - "2.4.2.  Configuration Data Request Failure\n   The HTTP configuration data request\
    \ can fail in a number of ways; the\n   error handling for each is defined below:\n\
    \   o  If a DNS request to resolve the host name in the request URL\n      returns\
    \ a response that indicates that no matching result is\n      available (NXDOMAIN),\
    \ the UA MUST remove that request URL from the\n      list of alternatives for\
    \ the Configuration Service Domain.\n   o  If the attempt to open a TCP connection\
    \ to the host in the request\n      URL fails, the UA MAY attempt requests to\
    \ any alternative URLs for\n      the same configuration service without waiting\
    \ between\n      alternatives, but any requests to the same host MUST wait between\n\
    \      requests according to the procedure defined in Section 2.7, \"Retry\n \
    \     Backoff Procedure\".\n   o  If the TCP connection succeeds but the TLS handshake\
    \ fails,\n      including failure of the UA to validate the certificate provided\n\
    \      by the Configuration Service host (if the UA is capable of\n      validation),\
    \ the UA MUST remove the failed URL from the list of\n      alternative URLs for\
    \ this Configuration Service Domain.\n   o  If the request returns a permanent\
    \ HTTP failure response (response\n      code >= 400, and does not contain a Retry-After\
    \ header field), the\n      UA MUST remove the failed URL from the list of alternatives\
    \ for\n      this Configuration Service Domain.\n   o  If the list of alternatives\
    \ for this Configuration Service Domain\n      becomes empty, the UA MUST attempt\
    \ to obtain another Configuration\n      Service Domain name using the procedures\
    \ in Section 2.2,\n      \"Obtaining the Configuration Service Domain\".\n   o\
    \  If the UA has reached its chosen maximum number of retries (this\n      specification\
    \ does not specify a maximum number of retries, but\n      any retries to the\
    \ same host MUST follow the procedure defined in\n      Section 2.7, \"Retry Backoff\
    \ Procedure\"), the UA MAY attempt to\n      obtain another Configuration Domain\
    \ name using the procedures in\n      Section 2.2, \"Obtaining the Configuration\
    \ Service Domain\".\n"
- title: 2.5.  Configuration Changes
  contents:
  - "2.5.  Configuration Changes\n   The configuration data provided by the CS is\
    \ subject to change.  This\n   specification provides for two mechanisms by which\
    \ the UA discovers\n   that a configuration change is available:\n   o  SIP subscription\
    \ by the UA to the CS for notification of changes\n      to the configuration\
    \ data.\n   o  HTTP polling by the UA of the configuration data URL at the CS.\n\
    \   The choice of mechanism is made by the Configuration Service and\n   signaled\
    \ to the UA in each HTTP response that provides configuration\n   data.  In such\
    \ a response, the CS MUST either:\n   o  Indicate that the UA is to subscribe\
    \ for change notifications by\n      including a Link header in the response with\
    \ the link relation\n      'monitor' and SIP URI.  This choice is specified in\
    \ Section 2.5.1,\n      \"Configuration Change Subscriptions\".\n   o  Indicate\
    \ that the UA is to poll for updates using HTTP by not\n      including a Link\
    \ header with the link relation 'monitor'.  This\n      choice is specified in\
    \ Section 2.5.2, \"Configuration Change\n      Polling\".\n   A User Agent MUST\
    \ support both mechanisms, and use the mechanism\n   indicated by the Configuration\
    \ Service.\n"
- title: 2.5.1.  Configuration Change Subscriptions
  contents:
  - "2.5.1.  Configuration Change Subscriptions\n   If the CS chooses to use the SIP\
    \ subscription mechanism, it MUST\n   include a Link header in the HTTP configuration\
    \ data response as\n   specified by [RFC5989]; the URI value in the Link header\
    \ MUST be a\n   SIP URI, and the link relation ('rel' attribute) value MUST be\n\
    \   'monitor'.  The 'monitor-group' relation MUST NOT be used -- see\n   below\
    \ for rules regarding monitoring of multiple configuration data\n   resources.\
    \  The SIP URI returned in the Link header is the\n   'configuration change subscription\
    \ URI'.\n   A UA that receives a successful configuration data response with a\n\
    \   Link header that specifies a 'monitor' relation MUST attempt to\n   maintain\
    \ a subscription to the SIP URI from the Link header in that\n   response for\
    \ the http-monitor event package.  This subscription is\n   referred to herein\
    \ as a \"configuration change subscription\".\n   The CS MUST accept properly\
    \ authenticated SUBSCRIBE requests from the\n   UA for the http-monitor event\
    \ package at the URI it provided in the\n   Link header of a configuration data\
    \ response.  Authentication of the\n   SUBSCRIBE request uses any standard SIP\
    \ authentication mechanism with\n   credentials supplied to the UA in the configuration\
    \ data.\n   Configuration data MAY include references in the form of additional\n\
    \   URLs at the CS that the UA MUST use to obtain additional data.  Any\n   response\
    \ to requests for these additional URLs that provide\n   configuration data MUST\
    \ provide cache control data and a\n   configuration change subscription URI.\
    \  The CS MAY return a unique\n   configuration change subscription URI for each\
    \ configuration data\n   request, or MAY return the same SIP URI for different\
    \ requests, so\n   long as a change to the configuration data returned in any\
    \ of these\n   request results in notification on all subscriptions to the\n \
    \  associated subscription URI.\n   If the CS returns a unique configuration change\
    \ subscription URI in\n   the Link header of different configuration data requests:\n\
    \   o  The UA MUST maintain multiple subscriptions; one to each URI\n      associated\
    \ with configuration data the UA is using.\n   If the CS returns the same configuration\
    \ change subscription URI in\n   the Link header of different configuration data\
    \ requests:\n   o  The UA is not required to create multiple subscriptions to\
    \ the\n      same URI.\n   o  The UA MUST associate the URI with each of the configuration\
    \ data\n      requests for which it was returned, and any NOTIFY or other change\n\
    \      in the status of that subscription affects the validity of all of\n   \
    \   the associated configuration data.\n   o  The CS MUST send a NOTIFY message\
    \ on the configuration change\n      subscription when there is a change to any\
    \ of the different\n      configuration data resources for which the subscription\
    \ URI was\n      returned.\n"
- title: 2.5.1.1.  Change Subscription Failure
  contents:
  - "2.5.1.1.  Change Subscription Failure\n   If a configuration change SUBSCRIBE\
    \ request (either the initial\n   request or any attempt to refresh the subscription)\
    \ is permanently\n   rejected by the Configuration Service (the CS returns a failure\n\
    \   response that is not an authentication challenge or redirection and\n   does\
    \ not specify a Retry-After header), the UA MUST consider the\n   associated configuration\
    \ data to be not valid and attempt to\n   revalidate it as specified in Section\
    \ 2.6.1, \"Re-Validating\n   Configuration Data\".  Since the CS is not allowed\
    \ to reject a\n   properly authenticated request, this indicates a problem either\
    \ with\n   the configuration data or the CS.\n   If a configuration change SUBSCRIBE\
    \ request (either the initial\n   request or any attempt to refresh the subscription)\
    \ fails other than\n   by being permanently rejected, the UA MUST consider the\
    \ associated\n   configuration data to be of unknown validity, and MUST retry\
    \ the\n   SUBSCRIBE request as specified in Section 2.7, \"Retry Backoff\n   Procedure\"\
    ; the maximum time between retries MUST NOT be more than 30\n   minutes, and the\
    \ retries MUST continue as long as the configuration\n   is used.  The UA MAY\
    \ at any time return to any earlier step in the\n   process of obtaining configuration\
    \ data.\n"
- title: 2.5.1.2.  Change Subscription Termination
  contents:
  - "2.5.1.2.  Change Subscription Termination\n   If the CS explicitly terminates\
    \ the configuration change (http-\n   monitor) subscription by sending a NOTIFY\
    \ message with a\n   Subscription-State header value of 'terminated', the UA MUST\
    \ consider\n   the configuration data to be of unknown validity.  If the rules\
    \ for\n   interpreting and acting on the 'reason' code parameter as specified\n\
    \   in Section 3.2.4 of [RFC3265] allow, the UA MUST attempt to re-\n   establish\
    \ the subscription.  If those rules do not allow the UA to\n   re-subscribe, then\
    \ the UA MUST consider the data to be not valid and\n   attempt to revalidate\
    \ it as specified in Section 2.6.1, \"Re-\n   Validating Configuration Data\"\
    .  The UA MAY at any time return to any\n   earlier step in the process of obtaining\
    \ configuration data.\n"
- title: 2.5.1.3.  Configuration Change Notices
  contents:
  - "2.5.1.3.  Configuration Change Notices\n   To inform the UA of a configuration\
    \ data change, the CS MUST send a\n   NOTIFY message to the UA in the configuration\
    \ change subscription\n   established by the UA as detailed in Section 2.5.1,\
    \ \"Configuration\n   Change Subscriptions\".\n   The CS MUST NOT send unsolicited\
    \ (out-of-dialog) NOTIFY messages.\n   As specified in [RFC5989], the body of\
    \ a NOTIFY message in the http-\n   monitor event package is the HTTP headers\
    \ that would have been\n   returned in response to an HTTP HEAD request (a HEAD\
    \ request returns\n   the headers that would have been returned for a GET request\
    \ to the\n   same URI, but with no body).\n   When a NOTIFY message is received\
    \ by the UA in the configuration\n   change subscription, the UA MUST compare\
    \ the cache control data it\n   retained when the configuration data was received\
    \ with the HTTP\n   header values in the NOTIFY message body.  If any of the cache\n\
    \   control data in the HTTP header values differs from those in the\n   original\
    \ configuration data response, the UA MUST consider the stored\n   configuration\
    \ data to be no longer valid.  As soon as reasonably\n   possible after the UA\
    \ discovers that configuration data is no longer\n   valid, the UA MUST attempt\
    \ a GET request to the HTTPS configuration\n   request URL which provided the\
    \ configuration data to obtain the\n   changed configuration data.\n   If this\
    \ HTTPS request to the URL that previously provided the\n   configuration data\
    \ fails, the UA MUST attempt to obtain a new URL as\n   specified in Section 2.3,\
    \ \"Constructing the Configuration Request\n   URL\".\n"
- title: 2.5.2.  Configuration Change Polling
  contents:
  - "2.5.2.  Configuration Change Polling\n   If the CS chooses to use the HTTP polling\
    \ mechanism, it MUST NOT\n   include a Link header with the relation 'monitor'\
    \ in the HTTP\n   configuration data response, and MUST include a Cache-Control\
    \ header\n   that specifies the max-age directive.  The max-age cache control\n\
    \   directive in HTTP specifies the maximum number of seconds for which\n   the\
    \ returned data may be cached; this specification defines this time\n   as being\
    \ the maximum time the configuration data is considered valid.\n   A short time\
    \ before the validity time has passed, the UA SHOULD poll\n   to revalidate the\
    \ configuration data as described in Section 2.6.1,\n   \"Re-Validating Configuration\
    \ Data\".\n"
- title: 2.6.  Validity of Stored Configuration Data
  contents:
  - "2.6.  Validity of Stored Configuration Data\n   Configuration data stored by\
    \ a UA is considered valid:\n   o  If the CS chose to use the subscription mechanism\
    \ to deliver\n      change notices, and the UA has a subscription to the CS as\n\
    \      described in Section 2.5.1, \"Configuration Change Subscriptions\"\n  \
    \    on which no NOTIFY message from the CS indicating that the\n      configuration\
    \ data has changed has been received.\n   o  If the CS chose to use the HTTP polling\
    \ method, and the number of\n      seconds since the configuration data response\
    \ was received is less\n      than the time specified by the Cache-Control max-age\
    \ directive in\n      that response.\n   When a UA initializes itself at any time\
    \ other than immediately after\n   receiving new configuration data, it MUST consider\
    \ any stored\n   configuration data to be of unknown validity.\n   The UA MAY\
    \ use configuration data that is of unknown validity, or\n   configuration data\
    \ that is known to be no longer valid, while\n   attempting to revalidate that\
    \ data or obtain new data.  There is no\n   assurance that such configuration\
    \ data is still useful, but the UA\n   MAY choose to retain the data and to continue\
    \ to use it.\n"
- title: 2.6.1.  Re-Validating Configuration Data
  contents:
  - "2.6.1.  Re-Validating Configuration Data\n   To revalidate stored configuration\
    \ data of unknown validity, the UA\n   MUST repeat the HTTPS GET request it used\
    \ to obtain the stored\n   configuration data, with the appropriate HTTP headers\
    \ to make the\n   request a conditional request using the cache control data returned\n\
    \   in the response that provided the configuration data.  This allows\n   the\
    \ CS to respond either with a new configuration data response or a\n   304 (Not\
    \ Modified) response to indicate that the configuration data\n   has not changed.\n\
    \   If the CS responds with a 304 response, and the original response\n   included\
    \ a Link header with the 'monitor' relation, the SIP UA MUST\n   assume that the\
    \ value of that Link header is also still correct (in\n   effect, the HTTP cache\
    \ control values and the subscription URL are a\n   part of the configuration\
    \ data), and so the UA MUST attempt to create\n   and maintain a subscription\
    \ to that URL as when the configuration\n   data was first obtained (Section 2.5.1,\
    \ \"Configuration Change\n   Subscriptions\").\n   If the CS chooses to use the\
    \ HTTP polling method, then any 304\n   response MUST include a Cache-Control\
    \ header containing a max-age\n   directive, and the UA MUST use this new value\
    \ as the maximum validity\n   time for the associated configuration data.\n  \
    \ If the HTTP request to revalidate the configuration fails, the UA\n   MUST follow\
    \ the procedures defined for a failure of the initial HTTP\n   configuration data\
    \ request as specified in Section 2.4.2,\n   \"Configuration Data Request Failure\"\
    .\n"
- title: 2.7.  Retry Backoff Procedure
  contents:
  - "2.7.  Retry Backoff Procedure\n   In case of certain possible failures as described\
    \ above, the\n   appropriate response is to retry the failed operation.  In all\
    \ of\n   these retry cases, the following rules apply:\n   o  The UA SHOULD retry\
    \ at least 5 times before abandoning the failed\n      step (except as allowed\
    \ for in specific error handling rules\n      above).\n   o  Following the first\
    \ instance of a given failure, the UA MUST\n      select an initial backoff timer\
    \ value randomly between 2 and 8,\n      inclusive, and wait this number of seconds\
    \ before retrying the\n      failed request.\n   o  Following any subsequent instance\
    \ of a given failure, the UA MUST\n      increase the backoff timer value by 2\
    \ raised to the power of the\n      number of preceding failures (2^N where N\
    \ is the number of\n      previous failures), and wait this increased number of\
    \ seconds or\n      the maximum interval specified by specific error handling\n\
    \      procedures, whichever is less, before retrying the failed request.\n  \
    \ For example, after an initial failure, the UA randomly chooses an\n   initial\
    \ backoff timer value of 4 seconds, followed by retries at the\n   following times:\
    \ 6 seconds (4 + 2^1), 10 seconds (6 + 2^2), 18\n   seconds (10 + 2^3), 34 seconds\
    \ (18 + 2^4), and 66 seconds (34 + 2^5).\n"
- title: 3.  Configuration Data
  contents:
  - "3.  Configuration Data\n   This document does not specify the form or content\
    \ of configuration\n   data.  As such, the contents of this section are non-normative.\n"
- title: 3.1.  Configuration Data Items
  contents:
  - "3.1.  Configuration Data Items\n   The configuration data for a SIP UA should,\
    \ at minimum, include items\n   with the following semantics.\n"
- title: 3.1.1.  Address-of-Record
  contents:
  - "3.1.1.  Address-of-Record\n   The Address-of-Record (AOR) is a SIP or SIPS URI\
    \ that identifies the\n   user of the device as specified in [RFC3261].\n"
- title: 3.1.2.  Realm
  contents:
  - "3.1.2.  Realm\n   The realm is used to populate the realm parameter in the SIP\
    \ Proxy-\n   Authorization header as specified in [RFC3261] when the UA receives\n\
    \   an authentication challenge.\n"
- title: 3.1.3.  Username
  contents:
  - "3.1.3.  Username\n   The username is used to populate the username parameter\
    \ in the SIP\n   Proxy-Authorization header as specified in [RFC3261] when the\
    \ UA\n   receives an authentication challenge.\n"
- title: 3.1.4.  Digest
  contents:
  - "3.1.4.  Digest\n   The digest is a string containing the digest of the username,\
    \ realm,\n   and password as specified in [RFC2617] and is used to generate a\n\
    \   response to an authentication challenge as specified in [RFC3261].\n"
- title: 3.1.5.  OutboundProxy
  contents:
  - "3.1.5.  OutboundProxy\n   The OutboundProxy if defined contains the default outbound\
    \ proxy\n   through which SIP requests, not explicitly routed, are routed as\n\
    \   specified in [RFC3261].\n"
- title: 3.2.  Reset User Agent to Default Configuration
  contents:
  - "3.2.  Reset User Agent to Default Configuration\n   The earlier sections of this\
    \ document define methods by which the UA\n   can be automatically provisioned.\
    \  Some User Agents allow certain\n   user specific settings (e.g., Contact Directory,\
    \ specialized ring-\n   tones, etc.) to be set by a user, and possibly stored\
    \ locally in the\n   User Agent.  Since it may be necessary to later re-assign\
    \ a UA,\n   designers of configuration data formats may want to provide for\n\
    \   explicit controls for any such locally configured settings, including\n  \
    \ the ability to explicitly delete them to return the UA to a\n   completely unconfigured\
    \ state.\n"
- title: 4.  IANA Considerations
  contents:
  - '4.  IANA Considerations

    '
- title: 4.1.  DHCP SIP User Agent Configuration Service Domains Option
  contents:
  - "4.1.  DHCP SIP User Agent Configuration Service Domains Option\n   This specification\
    \ defines DHCP option code 141, the \"SIP UA\n   Configuration Service Domains\"\
    \ for inclusion in the IANA registry\n   \"BOOTP Vendor Extensions and DHCP Options\"\
    \ defined by [RFC2939].\n       0                   1                   2    \
    \               3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\
    \ 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |      141      |     Len       |         Searchstring...       |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                     Searchstring...                           |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   In the above diagram, Searchstring is a string specifying the\n   searchlist.\
    \  If the length of the searchlist exceeds the maximum\n   permissible within\
    \ a single option (255 octets), then multiple\n   options MAY be used, as described\
    \ in [RFC3396] \"Encoding Long DHCP\n   Options in the Dynamic Host Configuration\
    \ Protocol (DHCPv4)\".\n   To enable the searchlist to be encoded compactly, searchstrings\
    \ in\n   the searchlist MUST be concatenated and encoded using the technique\n\
    \   described in Section 4.1.4 of [RFC1035], \"Domain Names -\n   Implementation\
    \ and Specification\".  In this scheme, an entire domain\n   name or a list of\
    \ labels at the end of a domain name is replaced with\n   a pointer to a prior\
    \ occurrence of the same name.  Despite its\n   complexity, this technique is\
    \ valuable since the space available for\n   encoding DHCP options is limited,\
    \ and it is likely that a domain\n   searchstring will contain repeated instances\
    \ of the same domain name.\n   Thus, the DNS name compression is both useful and\
    \ likely to be\n   effective.\n   For use in this specification, the pointer refers\
    \ to the offset\n   within the data portion of the DHCP option (not including\
    \ the\n   preceding DHCP option code byte or DHCP option length byte).\n   If\
    \ multiple SIP UA Configuration Service Domains options are present,\n   then\
    \ the data portions of all the SIP UA Configuration Service\n   Domains options\
    \ are concatenated together as specified in RFC 3396,\n   and the pointer indicates\
    \ an offset within the complete aggregate\n   block of data.\n   For examples\
    \ of encoding this option, see Section 3 of [RFC3397],\n   \"Dynamic Host Configuration\
    \ Protocol (DHCP) Domain Search Option\",\n   which uses the same encoding for\
    \ option 119.\n"
- title: 4.2.  DHCPv6 SIP User Agent Configuration Service Domains Option
  contents:
  - "4.2.  DHCPv6 SIP User Agent Configuration Service Domains Option\n   This specification\
    \ defines DHCPv6 option code 58,\n   OPTION_SIP_UA_CS_LIST, for inclusion in the\
    \ IANA registry \"Dynamic\n   Host Configuration Protocol for IPv6 (DHCPv6), DHCP\
    \ Option Codes\"\n   defined by RFC 3315.\n   The format of the SIP User Agent\
    \ Configuration Service Domains option\n   is:\n       0                   1 \
    \                  2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4\
    \ 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |     OPTION_SIP_UA_CS_LIST     |         option-len            |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                          searchlist                           |\n      |   \
    \                           ...                              |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   option-code OPTION_SIP_UA_CS_LIST (58)\n   option-len  Length of the 'searchlist'\
    \ field in octets\n   searchlist  The specification of the list of domain names\
    \ in the SIP\n               User Agent Configuration Service Domains\n   The\
    \ list of domain names in the 'searchlist' MUST be encoded as\n   specified in\
    \ Section 8, \"Representation and Use of Domain Names\" of\n   RFC 3315.\n"
- title: 4.3.  U-NAPTR Registration
  contents:
  - "4.3.  U-NAPTR Registration\n   This document registers the following U-NAPTR\
    \ application service tag\n   in the registry defined by [RFC3958], \"Domain-Based\
    \ Application\n   Service Location Using SRV RRs and the Dynamic Delegation Discovery\n\
    \   Service (DDDS)\":\n                  +-------------------------+----------+\n\
    \                  | Application Service Tag | SFUA.CFG |\n                  +-------------------------+----------+\n\
    \   This tag is used to obtain the base URL of the Configuration Service\n   from\
    \ the DNS name of a SIP domain as specified in Section 2.3.1,\n   \"Obtaining\
    \ a Configuration Service Base URL\".\n"
- title: 4.4.  SIP Forum User Agent Configuration Parameter Registry
  contents:
  - "4.4.  SIP Forum User Agent Configuration Parameter Registry\n   IANA has established\
    \ a registry for \"SIP Forum User Agent\n   Configuration Parameters\".  This\
    \ registry records the HTTPS request\n   parameters for the initial configuration\
    \ data request sent by a User\n   Agent to a Configuration Service as described\
    \ in Section 2.3.2,\n   \"Adding Configuration Request Parameters\".\n   Each\
    \ entry in the registry must include the Parameter Name and a\n   Description\
    \ that specifies the value syntax and usage of the\n   parameter:\n   Parameter\
    \ Name  The name of the parameter, which MUST match the ABNF\n               \
    \    production for 'token' from [RFC3261].\n   Value Syntax  The syntax of the\
    \ value, if any (a parameter may just\n                 be a name with no associated\
    \ value).\n   Usage       The purpose served by the parameter, including any\n\
    \               default method the UA should use to construct it if\n        \
    \       applicable.\n   The initial values for the registry are the parameters\
    \ described in\n   Section 2.3.2.1, \"Configuration Request Parameters\".  The\
    \ policy for\n   future additions to this registry depends on the parameter name\n\
    \   value:\n      If the name of the parameter begins with the characters 'sfua-'\
    \ in\n      any case, then the policy for addition to this registry is \"RFC\n\
    \      Required\" as described by [RFC5226].\n      Any other parameter entry\
    \ may be added to this registry using a\n      \"First Come First Served\" policy\
    \ as described by [RFC5226].\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   Initial discovery of the Configuration Service\
    \ Domain name relies on\n   a number of operations that are normally unsecured:\
    \ a DHCP response\n   could be provided by an attacker to replace the values of\
    \ any of the\n   IP Network Parameters (Section 2.1.2, \"Network Layer Provisioning\"\
    )\n   including the Local Network Domain which is the default choice for\n   the\
    \ Configuration Service Domain name.  Confirmation by the human\n   user of the\
    \ Configuration Service Domain name, especially when it\n   differs from a previously\
    \ used value, could be used to mitigate this\n   (perhaps unintentional) potential\
    \ reconfiguration.  Note that\n   previously loaded configuration MAY constrain\
    \ which parts of the\n   discovery and location procedures are used: for example,\
    \ the\n   Configuration Service Domain name might be fixed so that it cannot be\n\
    \   modified by discovery.\n   The connection to the Configuration Service is\
    \ made over TLS.  As the\n   TLS server, the CS always provides a server certificate\
    \ during the\n   TLS handshake; if possible, the UA should validate that certificate\n\
    \   and confirm that it contains as a subject the Configuration Service\n   Domain\
    \ name or at least the host name from the Configuration Service\n   Base URL (see\
    \ [RFC2818]).  While it may not be possible to have the\n   information needed\
    \ to perform a full validation of the CS server\n   certificate prior to the first\
    \ configuration (for example, the UA may\n   not have a current CA certificate\
    \ for the CA that signs the CS server\n   certificate), implementors are advised\
    \ to provide that information in\n   configuration data so that it can be used\
    \ for subsequent\n   reconfigurations; this narrows the window of vulnerability\
    \ to the\n   first configuration attempt.\n   To secure initial configuration\
    \ attempts, the CS can deny requests\n   from unknown devices and/or could implement\
    \ other measures such as\n   restricting the time window during which it will\
    \ accept an initial\n   configuration request from a given device.  A more secure\
    \ approach\n   would be to provide the user with a password, perhaps a one-time\n\
    \   password valid only for the initial access.  In high security\n   environments,\
    \ the Configuration Service could require that the User\n   Agent provide a client\
    \ certificate for authentication in the TLS\n   connection for configuration data\
    \ requests.  This would necessitate\n   some prior manual configuration of the\
    \ User Agent, and possibly the\n   Configuration Service, and that configuration\
    \ should also include\n   sufficient information for the UA to fully validate\
    \ the CS\n   certificate.\n   The values of some or all of the request parameters\
    \ sent by the UA on\n   the initial request for configuration data (see Section\
    \ 2.3.2,\n   \"Adding Configuration Request Parameters\") may be sensitive\n \
    \  information.  Since the configuration data request is made over a TLS\n   connection,\
    \ the confidentiality of that information is protected on\n   the network.  Configuration\
    \ Service implementations should take all\n   necessary measures to ensure that\
    \ the request parameter data is\n   appropriately protected within the CS itself.\n\
    \   The Configuration Change Request Subscription (Section 2.5.1,\n   \"Configuration\
    \ Change Subscriptions\") is established only after the\n   configuration data\
    \ has been loaded by the User Agent, so all security\n   mechanisms available\
    \ in SIP (including request digest authentication\n   and the use of TLS) can\
    \ be configured and required by either the CS\n   or the UA.  Note that a configuration\
    \ change notice does not actually\n   provide any new configuration data, nor\
    \ can it change where the UA\n   sends a request for the new configuration data.\
    \  This means that an\n   attacker cannot reconfigure a UA by subverting only\
    \ the change notice\n   subscription; the most the attacker can do is trigger\
    \ checks for new\n   data.  In order to actually modify the configuration data\
    \ itself, the\n   attacker must subvert the CS or the steps leading to the CS\
    \ discovery\n   (subject to the checks described above).\n   Implementations of\
    \ TLS typically support multiple versions of the\n   Transport Layer Security\
    \ protocol as well as the older Secure Sockets\n   Layer (SSL) protocol.  Because\
    \ of known security vulnerabilities, SIP\n   UAs, SIP Service Provider, and the\
    \ Configuration Service Host MUST\n   NOT request, offer, or use SSL 2.0.  See\
    \ Appendix E.2 of [RFC5246]\n   for further details.\n"
- title: 6.  Acknowledgements
  contents:
  - "6.  Acknowledgements\n   Contributing Members of the SIP Forum User Agent Configuration\n\
    \   Working Group:\n      Francois Audet, Nortel Networks, Inc.\n      Eric Burger,\
    \ SIP Forum\n      Sumanth Channabasappa, Cable Television Laboratories, Inc.\n\
    \      (CableLabs)\n      Martin Dolly, AT&T Labs\n      John Elwell, Siemens\
    \ Enterprise Communications\n      Marek Dutkiewicz, Polycom, Inc.\n      Andy\
    \ Hutton, Siemens Enterprise Communications\n      Lincoln Lavoie, University\
    \ of New Hampshire\n      Scott Lawrence, Avaya, Inc.\n      Paul Mossman, Avaya,\
    \ Inc.\n      Michael Procter, VoIP.co.uk\n      Marc Robins, SIP Forum\n    \
    \  Henning Schulzrinne, Columbia University\n      Rifaat Shekh-Yusef, Avaya,\
    \ Inc.\n      Robert Sparks, Tekelec\n      Simo Veikkolainen, Nokia\n   The Editor\
    \ would like to also acknowledge valuable contributions by\n   Leslie Daigle and\
    \ Margaret Wasserman.\n"
- title: 7.  Normative References
  contents:
  - "7.  Normative References\n   [RFC1034]  Mockapetris, P., \"Domain names - concepts\
    \ and facilities\",\n              STD 13, RFC 1034, November 1987.\n   [RFC1035]\
    \  Mockapetris, P., \"Domain names - implementation and\n              specification\"\
    , STD 13, RFC 1035, November 1987.\n   [RFC2119]  Bradner, S., \"Key words for\
    \ use in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\
    \ March 1997.\n   [RFC2131]  Droms, R., \"Dynamic Host Configuration Protocol\"\
    ,\n              RFC 2131, March 1997.\n   [RFC2132]  Alexander, S. and R. Droms,\
    \ \"DHCP Options and BOOTP Vendor\n              Extensions\", RFC 2132, March\
    \ 1997.\n   [RFC2616]  Fielding, R., Gettys, J., Mogul, J., Frystyk, H.,\n   \
    \           Masinter, L., Leach, P., and T. Berners-Lee, \"Hypertext\n       \
    \       Transfer Protocol -- HTTP/1.1\", RFC 2616, June 1999.\n   [RFC2617]  Franks,\
    \ J., Hallam-Baker, P., Hostetler, J., Lawrence, S.,\n              Leach, P.,\
    \ Luotonen, A., and L. Stewart, \"HTTP\n              Authentication: Basic and\
    \ Digest Access Authentication\",\n              RFC 2617, June 1999.\n   [RFC2818]\
    \  Rescorla, E., \"HTTP Over TLS\", RFC 2818, May 2000.\n   [RFC2939]  Droms,\
    \ R., \"Procedures and IANA Guidelines for Definition\n              of New DHCP\
    \ Options and Message Types\", BCP 43, RFC 2939,\n              September 2000.\n\
    \   [RFC3261]  Rosenberg, J., Schulzrinne, H., Camarillo, G., Johnston,\n    \
    \          A., Peterson, J., Sparks, R., Handley, M., and E.\n              Schooler,\
    \ \"SIP: Session Initiation Protocol\", RFC 3261,\n              June 2002.\n\
    \   [RFC3265]  Roach, A., \"Session Initiation Protocol (SIP)-Specific\n     \
    \         Event Notification\", RFC 3265, June 2002.\n   [RFC3315]  Droms, R.,\
    \ Bound, J., Volz, B., Lemon, T., Perkins, C.,\n              and M. Carney, \"\
    Dynamic Host Configuration Protocol for\n              IPv6 (DHCPv6)\", RFC 3315,\
    \ July 2003.\n   [RFC3319]  Schulzrinne, H. and B. Volz, \"Dynamic Host Configuration\n\
    \              Protocol (DHCPv6) Options for Session Initiation Protocol\n   \
    \           (SIP) Servers\", RFC 3319, July 2003.\n   [RFC3396]  Lemon, T. and\
    \ S. Cheshire, \"Encoding Long Options in the\n              Dynamic Host Configuration\
    \ Protocol (DHCPv4)\", RFC 3396,\n              November 2002.\n   [RFC3397] \
    \ Aboba, B. and S. Cheshire, \"Dynamic Host Configuration\n              Protocol\
    \ (DHCP) Domain Search Option\", RFC 3397,\n              November 2002.\n   [RFC3958]\
    \  Daigle, L. and A. Newton, \"Domain-Based Application\n              Service\
    \ Location Using SRV RRs and the Dynamic Delegation\n              Discovery Service\
    \ (DDDS)\", RFC 3958, January 2005.\n   [RFC3986]  Berners-Lee, T., Fielding,\
    \ R., and L. Masinter, \"Uniform\n              Resource Identifier (URI): Generic\
    \ Syntax\", STD 66,\n              RFC 3986, January 2005.\n   [RFC4366]  Blake-Wilson,\
    \ S., Nystrom, M., Hopwood, D., Mikkelsen, J.,\n              and T. Wright, \"\
    Transport Layer Security (TLS)\n              Extensions\", RFC 4366, April 2006.\n\
    \   [RFC4848]  Daigle, L., \"Domain-Based Application Service Location\n     \
    \         Using URIs and the Dynamic Delegation Discovery Service\n          \
    \    (DDDS)\", RFC 4848, April 2007.\n   [RFC5226]  Narten, T. and H. Alvestrand,\
    \ \"Guidelines for Writing an\n              IANA Considerations Section in RFCs\"\
    , BCP 26, RFC 5226,\n              May 2008.\n   [RFC5626]  Jennings, C., Mahy,\
    \ R., and F. Audet, \"Managing Client-\n              Initiated Connections in\
    \ the Session Initiation Protocol\n              (SIP)\", RFC 5626, October 2009.\n\
    \   [RFC5246]  Dierks, T. and E. Rescorla, \"The Transport Layer Security\n  \
    \            (TLS) Protocol Version 1.2\", RFC 5246, August 2008.\n   [RFC5989]\
    \  Roach, A., \"A SIP Event Package for Subscribing to Changes\n             \
    \ to an HTTP Resource\", October 2010.\n   [ANSI.TIA-1057-2006]\n            \
    \  American National Standards Institute, \"Telecommunications\n             \
    \ IP Telephony Infrastructure Link Layer Discovery Protocol\n              for\
    \ Media Endpoint Devices\", April 1993.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Scott Lawrence (editor)\n   Linden Research, Inc.\n  \
    \ EMail: scott-ietf@skrb.org\n   John Elwell\n   Siemens Enterprise Communications\n\
    \   Phone: +44 1908 817801\n   EMail: john.elwell@siemens-enterprise.com\n"
