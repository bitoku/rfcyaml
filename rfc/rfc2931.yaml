- contents:
  - '           DNS Request and Transaction Signatures ( SIG(0)s )

    '
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2000).  All Rights Reserved.\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   Extensions to the Domain Name System (DNS) are described in [RFC\n
    \  2535] that can provide data origin and transaction integrity and\n   authentication
    to security aware resolvers and applications through\n   the use of cryptographic
    digital signatures.\n   Implementation experience has indicated the need for minor
    but non-\n   interoperable changes in Request and Transaction signature resource\n
    \  records ( SIG(0)s ).  These changes are documented herein.\n"
  title: Abstract
- contents:
  - "Acknowledgments\n   The contributions and suggestions of the following persons
    (in\n   alphabetic order) to this memo are gratefully acknowledged:\n         Olafur
    Gudmundsson\n         Ed Lewis\n         Erik Nordmark\n         Brian Wellington\n"
  title: Acknowledgments
- contents:
  - "Table of Contents\n   1. Introduction.................................................
    \ 2\n   2. SIG(0) Design Rationale......................................  3\n
    \  2.1 Transaction Authentication..................................  3\n   2.2
    Request Authentication......................................  3\n   2.3 Keying......................................................
    \ 3\n   2.4 Differences Between TSIG and SIG(0).........................  4\n
    \  3. The SIG(0) Resource Record...................................  4\n   3.1
    Calculating Request and Transaction SIGs....................  5\n   3.2 Processing
    Responses and SIG(0) RRs.........................  6\n   3.3 SIG(0) Lifetime and
    Expiration..............................  7\n   4. Security Considerations......................................
    \ 7\n   5. IANA Considerations..........................................  7\n
    \  References......................................................  7\n   Author's
    Address................................................  8\n   Appendix: SIG(0)
    Changes from RFC 2535..........................  9\n   Full Copyright Statement........................................
    10\n"
  title: Table of Contents
- contents:
  - "1. Introduction\n   This document makes minor but non-interoperable changes to
    part of\n   [RFC 2535], familiarity with which is assumed, and includes\n   additional
    explanatory text.  These changes concern SIG Resource\n   Records (RRs) that are
    used to digitally sign DNS requests and\n   transactions / responses.  Such a
    resource record, because it has a\n   type covered field of zero, is frequently
    called a SIG(0). The\n   changes are based on implementation and attempted implementation\n
    \  experience with TSIG [RFC 2845] and the [RFC 2535] specification for\n   SIG(0).\n
    \  Sections of [RFC 2535] updated are all of 4.1.8.1 and parts of 4.2\n   and
    4.3.  No changes are made herein related to the KEY or NXT RRs or\n   to the processing
    involved with data origin and denial authentication\n   for DNS data.\n   The
    key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\",
    \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this\n   document
    are to be interpreted as described in [RFC 2119].\n"
  title: 1. Introduction
- contents:
  - "2. SIG(0) Design Rationale\n   SIG(0) provides protection for DNS transactions
    and requests that is\n   not provided by the regular SIG, KEY, and NXT RRs specified
    in [RFC\n   2535].  The authenticated data origin services of secure DNS either\n
    \  provide protected data resource records (RRs) or authenticatably deny\n   their
    nonexistence.  These services provide no protection for glue\n   records, DNS
    requests, no protection for message headers on requests\n   or responses, and
    no protection of the overall integrity of a\n   response.\n"
  - contents:
    - "2.1 Transaction Authentication\n   Transaction authentication means that a
      requester can be sure it is\n   at least getting the messages from the server
      it queried and that the\n   received messages are in response to the query it
      sent.  This is\n   accomplished by optionally adding either a TSIG RR [RFC 2845]
      or, as\n   described herein, a SIG(0) resource record at the end of the response\n
      \  which digitally signs the concatenation of the server's response and\n   the
      corresponding resolver query.\n"
    title: 2.1 Transaction Authentication
  - contents:
    - "2.2 Request Authentication\n   Requests can also be authenticated by including
      a TSIG or, as\n   described herein, a special SIG(0) RR at the end of the request.\n
      \  Authenticating requests serves no function in DNS servers that\n   predate
      the specification of dynamic update.  Requests with a non-\n   empty additional
      information section produce error returns or may\n   even be ignored by a few
      such older DNS servers. However, this syntax\n   for signing requests is defined
      for authenticating dynamic update\n   requests [RFC 2136], TKEY requests [RFC
      2930], or future requests\n   requiring authentication.\n"
    title: 2.2 Request Authentication
  - contents:
    - "2.3 Keying\n   The private keys used in transaction security belong to the
      host\n   composing the DNS response message, not to the zone involved.\n   Request
      authentication may also involve the private key of the host\n   or other entity
      composing the request or of a zone to be affected by\n   the request or other
      private keys depending on the request authority\n   it is sought to establish.
      The corresponding public key(s) are\n   normally stored in and retrieved from
      the DNS for verification as KEY\n   RRs with a protocol byte of 3 (DNSSEC) or
      255 (ANY).\n   Because requests and replies are highly variable, message\n   authentication
      SIGs can not be pre-calculated.  Thus it will be\n   necessary to keep the private
      key on-line, for example in software or\n   in a directly connected piece of
      hardware.\n"
    title: 2.3 Keying
  - contents:
    - "2.4 Differences Between TSIG and SIG(0)\n   There are significant differences
      between TSIG and SIG(0).\n   Because TSIG involves secret keys installed at
      both the requester and\n   server the presence of such a key implies that the
      other party\n   understands TSIG and very likely has the same key installed.\n
      \  Furthermore, TSIG uses keyed hash authentication codes which are\n   relatively
      inexpensive to compute.  Thus it is common to authenticate\n   requests with
      TSIG and responses are authenticated with TSIG if the\n   corresponding request
      is authenticated.\n   SIG(0) on the other hand, uses public key authentication,
      where the\n   public keys are stored in DNS as KEY RRs and a private key is
      stored\n   at the signer.  Existence of such a KEY RR does not necessarily imply\n
      \  implementation of SIG(0).  In addition, SIG(0) involves relatively\n   expensive
      public key cryptographic operations that should be\n   minimized and the verification
      of a SIG(0) involves obtaining and\n   verifying the corresponding KEY which
      can be an expensive and lengthy\n   operation.  Indeed, a policy of using SIG(0)
      on all requests and\n   verifying it before responding would, for some configurations,
      lead\n   to a deadly embrace with the attempt to obtain and verify the KEY\n
      \  needed to authenticate the request SIG(0) resulting in additional\n   requests
      accompanied by a SIG(0) leading to further requests\n   accompanied by a SIG(0),
      etc.  Furthermore, omitting SIG(0)s when not\n   required on requests halves
      the number of public key operations\n   required by the transaction.\n   For
      these reasons, SIG(0)s SHOULD only be used on requests when\n   necessary to
      authenticate that the requester has some required\n   privilege or identity.
      \ SIG(0)s on replies are defined in such a way\n   as to not require a SIG(0)
      on the corresponding request and still\n   provide transaction protection.  For
      other replies, whether they are\n   authenticated by the server or required
      to be authenticated by the\n   requester SHOULD be a local configuration option.\n"
    title: 2.4 Differences Between TSIG and SIG(0)
  title: 2. SIG(0) Design Rationale
- contents:
  - "3. The SIG(0) Resource Record\n   The structure of and type number of SIG resource
    records (RRs) is\n   given in [RFC 2535] Section 4.1.  However all of Section
    4.1.8.1 and\n   the parts of Sections 4.2 and 4.3 related to SIG(0) should be\n
    \  considered replaced by the material below.  Any conflict between [RFC\n   2535]
    and this document concerning SIG(0) RRs should be resolved in\n   favor of this
    document.\n   For all transaction SIG(0)s, the signer field MUST be a name of
    the\n   originating host and there MUST be a KEY RR at that name with the\n   public
    key corresponding to the private key used to calculate the\n   signature.  (The
    host domain name used may be the inverse IP address\n   mapping name for an IP
    address of the host if the relevant KEY is\n   stored there.)\n   For all SIG(0)
    RRs, the owner name, class, TTL, and original TTL, are\n   meaningless.  The TTL
    fields SHOULD be zero and the CLASS field\n   SHOULD be ANY.  To conserve space,
    the owner name SHOULD be root (a\n   single zero octet).  When SIG(0) authentication
    on a response is\n   desired, that SIG RR MUST be considered the highest priority
    of any\n   additional information for inclusion in the response. If the SIG(0)\n
    \  RR cannot be added without causing the message to be truncated, the\n   server
    MUST alter the response so that a SIG(0) can be included.\n   This response consists
    of only the question and a SIG(0) record, and\n   has the TC bit set and RCODE
    0 (NOERROR).  The client should at this\n   point retry the request using TCP.\n"
  - contents:
    - "3.1 Calculating Request and Transaction SIGs\n   A DNS request may be optionally
      signed by including one SIG(0)s at\n   the end of the query additional information
      section.  Such a SIG is\n   identified by having a \"type covered\" field of
      zero. It signs the\n   preceding DNS request message including DNS header but
      not including\n   the UDP/IP header and before the request RR counts have been
      adjusted\n   for the inclusions of the request SIG(0).\n   It is calculated
      by using a \"data\" (see [RFC 2535], Section 4.1.8) of\n   (1) the SIG's RDATA
      section entirely omitting (not just zeroing) the\n   signature subfield itself,
      (2) the DNS query messages, including DNS\n   header, but not the UDP/IP header
      and before the reply RR counts have\n   been adjusted for the inclusion of the
      SIG(0).  That is\n      data = RDATA | request - SIG(0)\n   where \"|\" is concatenation
      and RDATA is the RDATA of the SIG(0) being\n   calculated less the signature
      itself.\n   Similarly, a SIG(0) can be used to secure a response and the request\n
      \  that produced it.  Such transaction signatures are calculated by\n   using
      a \"data\" of (1) the SIG's RDATA section omitting the signature\n   itself,
      (2) the entire DNS query message that produced this response,\n   including
      the query's DNS header but not its UDP/IP header, and (3)\n   the entire DNS
      response message, including DNS header but not the\n   UDP/IP header and before
      the response RR counts have been adjusted\n   for the inclusion of the SIG(0).\n
      \  That is\n      data = RDATA | full query | response - SIG(0)\n   where \"|\"
      is concatenation and RDATA is the RDATA of the SIG(0) being\n   calculated less
      the signature itself.\n   Verification of a response SIG(0) (which is signed
      by the server host\n   key, not the zone key) by the requesting resolver shows
      that the\n   query and response were not tampered with in transit, that the\n
      \  response corresponds to the intended query, and that the response\n   comes
      from the queried server.\n   In the case of a DNS message via TCP, a SIG(0)
      on the first data\n   packet is calculated with \"data\" as above and for each
      subsequent\n   packet, it is calculated as follows:\n      data = RDATA | DNS
      payload - SIG(0) | previous packet\n   where \"|\" is concatenations, RDATA
      is as above, and previous packet\n   is the previous DNS payload including DNS
      header and the SIG(0) but\n   not the TCP/IP header.  Support of SIG(0) for
      TCP is OPTIONAL.  As an\n   alternative, TSIG may be used after, if necessary,
      setting up a key\n   with TKEY [RFC 2930].\n   Except where needed to authenticate
      an update, TKEY, or similar\n   privileged request, servers are not required
      to check a request\n   SIG(0).\n   Note: requests and responses can either have
      a single TSIG or one\n   SIG(0) but not both a TSIG and a SIG(0).\n"
    title: 3.1 Calculating Request and Transaction SIGs
  - contents:
    - "3.2 Processing Responses and SIG(0) RRs\n   If a SIG RR is at the end of the
      additional information section of a\n   response and has a type covered of zero,
      it is a transaction\n   signature covering the response and the query that produced
      the\n   response.  For TKEY responses, it MUST be checked and the message\n
      \  rejected if the checks fail unless otherwise specified for the TKEY\n   mode
      in use.  For all other responses, it MAY be checked and the\n   message rejected
      if the checks fail.\n   If a response's SIG(0) check succeed, such a transaction\n
      \  authentication SIG does NOT directly authenticate the validity any\n   data-RRs
      in the message.  However, it authenticates that they were\n   sent by the queried
      server and have not been diddled.  (Only a proper\n   SIG(0) RR signed by the
      zone or a key tracing its authority to the\n   zone or to static resolver configuration
      can directly authenticate\n   data-RRs, depending on resolver policy.) If a
      resolver or server does\n   not implement transaction and/or request SIGs, it
      MUST ignore them\n   without error where they are optional and treat them as
      failing where\n   they are required.\n"
    title: 3.2 Processing Responses and SIG(0) RRs
  - contents:
    - "3.3 SIG(0) Lifetime and Expiration\n   The inception and expiration times in
      SIG(0)s are for the purpose of\n   resisting replay attacks.  They should be
      set to form a time bracket\n   such that messages outside that bracket can be
      ignored.  In IP\n   networks, this time bracket should not normally extend further
      than 5\n   minutes into the past and 5 minutes into the future.\n"
    title: 3.3 SIG(0) Lifetime and Expiration
  title: 3. The SIG(0) Resource Record
- contents:
  - "4. Security Considerations\n   No additional considerations beyond those in [RFC
    2535].\n   The inclusion of the SIG(0) inception and expiration time under the\n
    \  signature improves resistance to replay attacks.\n"
  title: 4. Security Considerations
- contents:
  - "5. IANA Considerations\n   No new parameters are created or parameter values
    assigned by this\n   document.\n"
  - "References\n   [RFC 1982] Elz, R. and R. Bush, \"Serial Number Arithmetic\",
    RFC 1982,\n              September 1996.\n   [RFC 2119] Bradner, S., \"Key words
    for use in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,
    March 1997.\n   [RFC 2136] Vixie, P., Thomson, S., Rekhter, Y. and J. Bound, \"Dynamic\n
    \             Updates in the Domain Name System (DNS UPDATE)\", RFC 2136,\n              April
    1997.\n   [RFC 2535] Eastlake, D., \"Domain Name System Security Extensions\",\n
    \             RFC 2535, March 1999.\n   [RFC 2845] Vixie, P., Gudmundsson, O.,
    Eastlake, D. and B.\n              Wellington, \"Secret Key Transaction Signatures
    for DNS\n              (TSIG)\", RFC 2845, May 2000.\n   [RFC 2930] Eastlake,
    D., \"Secret Key Establishment for DNS (RR)\", RFC\n              2930, September
    2000.\n"
  - "Author's Address\n   Donald E. Eastlake 3rd\n   Motorola\n   140 Forest Avenue\n
    \  Hudson, MA 01749 USA\n   Phone: +1-978-562-2827(h)\n          +1-508-261-5434(w)\n
    \  Fax:   +1 978-567-7941(h)\n          +1-508-261-4447(w)\n   EMail: Donald.Eastlake@motorola.com\n"
  title: 5. IANA Considerations
- contents:
  - "Appendix: SIG(0) Changes from RFC 2535\n   Add explanatory text concerning the
    differences between TSIG and\n   SIG(0).\n   Change the data over which SIG(0)
    is calculated to include the SIG(0)\n   RDATA other than the signature itself
    so as to secure the signature\n   inception and expiration times and resist replay
    attacks.  Specify\n   SIG(0) for TCP.\n   Add discussion of appropriate inception
    and expiration times for\n   SIG(0).\n   Add wording to indicate that either a
    TSIG or one or more SIG(0)s may\n   be present but not both.\n   Reword some areas
    for clarity.\n"
  title: 'Appendix: SIG(0) Changes from RFC 2535'
- contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2000).  All
    Rights Reserved.\n   This document and translations of it may be copied and furnished
    to\n   others, and derivative works that comment on or otherwise explain it\n
    \  or assist in its implementation may be prepared, copied, published\n   and
    distributed, in whole or in part, without restriction of any\n   kind, provided
    that the above copyright notice and this paragraph are\n   included on all such
    copies and derivative works.  However, this\n   document itself may not be modified
    in any way, such as by removing\n   the copyright notice or references to the
    Internet Society or other\n   Internet organizations, except as needed for the
    purpose of\n   developing Internet standards in which case the procedures for\n
    \  copyrights defined in the Internet Standards process must be\n   followed,
    or as required to translate it into languages other than\n   English.\n   The
    limited permissions granted above are perpetual and will not be\n   revoked by
    the Internet Society or its successors or assigns.\n   This document and the information
    contained herein is provided on an\n   \"AS IS\" basis and THE INTERNET SOCIETY
    AND THE INTERNET ENGINEERING\n   TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS
    OR IMPLIED, INCLUDING\n   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE
    INFORMATION\n   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES
    OF\n   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided
    by the\n   Internet Society.\n"
  title: Acknowledgement
