- title: __initial_text__
  contents:
  - '           Textual Conventions for Internet Network Addresses

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2005).\n"
- title: Abstract
  contents:
  - "Abstract\n   This MIB module defines textual conventions to represent commonly\n\
    \   used Internet network layer addressing information.  The intent is\n   that\
    \ these textual conventions will be imported and used in MIB\n   modules that\
    \ would otherwise define their own representations.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  2\n   2.  The Internet-Standard Management Framework . . . . .\
    \ . . . . .  4\n   3.  Definitions  . . . . . . . . . . . . . . . . . . . . .\
    \ . . . .  5\n   4.  Usage Hints  . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . 13\n       4.1.  Table Indexing . . . . . . . . . . . . . . . . . . .\
    \ . . 14\n       4.2.  Uniqueness of Addresses  . . . . . . . . . . . . . . .\
    \ . 14\n       4.3.  Multiple Addresses per Host  . . . . . . . . . . . . . .\
    \ 15\n       4.4.  Resolving DNS Names  . . . . . . . . . . . . . . . . . . 15\n\
    \   5.  Table Indexing Example . . . . . . . . . . . . . . . . . . . . 15\n  \
    \ 6.  Security Considerations  . . . . . . . . . . . . . . . . . . . 17\n   7.\
    \  Acknowledgments  . . . . . . . . . . . . . . . . . . . . . . . 18\n   8.  Changes\
    \ from RFC 3291 to RFC 4001  . . . . . . . . . . . . . . 18\n   9.  Changes from\
    \ RFC 2851 to RFC 3291  . . . . . . . . . . . . . . 18\n   10. References . .\
    \ . . . . . . . . . . . . . . . . . . . . . . . . 19\n       10.1. Normative References\
    \ . . . . . . . . . . . . . . . . . . 19\n       10.2. Informative References\
    \ . . . . . . . . . . . . . . . . . 20\n   Authors' Addresses . . . . . . . .\
    \ . . . . . . . . . . . . . . . . 21\n   Full Copyright Statement . . . . . .\
    \ . . . . . . . . . . . . . . . 22\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Several standards-track MIB modules use the IpAddress SMIv2\
    \ base\n   type.  This limits the applicability of these MIB modules to IP\n \
    \  Version 4 (IPv4), as the IpAddress SMIv2 base type can only contain\n   4-byte\
    \ IPv4 addresses.  The IpAddress SMIv2 base type has become\n   problematic with\
    \ the introduction of IP Version 6 (IPv6) addresses\n   [RFC3513].\n   This document\
    \ defines multiple textual conventions (TCs) as a means\n   to express generic\
    \ Internet network layer addresses within MIB module\n   specifications.  The\
    \ solution is compatible with SMIv2 (STD 58) and\n   SMIv1 (STD 16).  New MIB\
    \ definitions that have to express network\n   layer Internet addresses SHOULD\
    \ use the textual conventions defined\n   in this memo.  New MIB modules SHOULD\
    \ NOT use the SMIv2 IpAddress\n   base type anymore.\n   A generic Internet address\
    \ consists of two objects: one whose syntax\n   is InetAddressType, and another\
    \ whose syntax is InetAddress.  The\n   value of the first object determines how\
    \ the value of the second is\n   encoded.  The InetAddress textual convention\
    \ represents an opaque\n   Internet address value.  The InetAddressType enumeration\
    \ is used to\n   \"cast\" the InetAddress value into a concrete textual convention\
    \ for\n   the address type.  This usage of multiple textual conventions allows\n\
    \   expression of the display characteristics of each address type and\n   makes\
    \ the set of defined Internet address types extensible.\n   The textual conventions\
    \ for well-known transport domains support\n   scoped Internet addresses.  The\
    \ scope of an Internet address is a\n   topological span within which the address\
    \ may be used as a unique\n   identifier for an interface or set of interfaces.\
    \  A scope zone (or,\n   simply, a zone) is a concrete connected region of topology\
    \ of a given\n   scope.  Note that a zone is a particular instance of a topological\n\
    \   region, whereas a scope is the size of a topological region\n   [RFC4007].\
    \  Since Internet addresses on devices that connect multiple\n   zones are not\
    \ necessarily unique, an additional zone index is needed\n   on these devices\
    \ to select an interface.  The textual conventions\n   InetAddressIPv4z and InetAddressIPv6z\
    \ are provided to support\n   Internet addresses that include a zone index.  To\
    \ support arbitrary\n   combinations of scoped Internet addresses, MIB authors\
    \ SHOULD use a\n   separate InetAddressType object for each InetAddress object.\n\
    \   The textual conventions defined in this document can also be used to\n   represent\
    \ generic Internet subnets and Internet address ranges.  A\n   generic Internet\
    \ subnet is represented by three objects: one whose\n   syntax is InetAddressType,\
    \ a second one whose syntax is InetAddress,\n   and a third one whose syntax is\
    \ InetAddressPrefixLength.  The\n   InetAddressType value again determines the\
    \ concrete format of the\n   InetAddress value, whereas the InetAddressPrefixLength\
    \ identifies the\n   Internet network address prefix.\n   A generic range of consecutive\
    \ Internet addresses is represented by\n   three objects.  The first one has the\
    \ syntax InetAddressType, and the\n   remaining objects have the syntax InetAddress\
    \ and specify the start\n   and end of the address range.  Again, the InetAddressType\
    \ value\n   determines the format of the InetAddress values.\n   The textual conventions\
    \ defined in this document can be used to\n   define Internet addresses by using\
    \ DNS domain names in addition to\n   IPv4 and IPv6 addresses.  A MIB designer\
    \ can write compliance\n   statements to express that only a subset of the possible\
    \ address\n   types must be supported by a compliant implementation.\n   MIB developers\
    \ who need to represent Internet addresses SHOULD use\n   these definitions whenever\
    \ applicable, as opposed to defining their\n   own constructs.  Even MIB modules\
    \ that only need to represent IPv4 or\n   IPv6 addresses SHOULD use the InetAddressType/InetAddress\
    \ textual\n   conventions defined in this memo.\n   There are many widely deployed\
    \ MIB modules that use IPv4 addresses\n   and that have to be revised to support\
    \ IPv6.  These MIB modules can\n   be categorized as follows:\n   1.  MIB modules\
    \ that define management information that is, in\n       principle, IP version\
    \ neutral, but the MIB currently uses\n       addressing constructs specific to\
    \ a certain IP version.\n   2.  MIB modules that define management information\
    \ that is specific\n       to a particular IP version (either IPv4 or IPv6) and\
    \ that is very\n       unlikely to ever be applicable to another IP version.\n\
    \   MIB modules of the first type SHOULD provide object definitions\n   (e.g.,\
    \ tables) that work with all versions of IP.  In particular,\n   when revising\
    \ a MIB module that contains IPv4 specific tables, it is\n   suggested to define\
    \ new tables using the textual conventions defined\n   in this memo that support\
    \ all versions of IP.  The status of the new\n   tables SHOULD be \"current\"\
    , whereas the status of the old IP version\n   specific tables SHOULD be changed\
    \ to \"deprecated\".  The other\n   approach, of having multiple similar tables\
    \ for different IP\n   versions, is strongly discouraged.\n   MIB modules of the\
    \ second type, which are inherently IP version\n   specific, do not need to be\
    \ redefined.  Note that even in this case,\n   any additions to these MIB modules\
    \ or to new IP version specific MIB\n   modules SHOULD use the textual conventions\
    \ defined in this memo.\n   MIB developers SHOULD NOT use the textual conventions\
    \ defined in this\n   document to represent generic transport layer addresses.\
    \  A special\n   set of textual conventions for this purpose is defined in RFC\
    \ 3419\n   [RFC3419].\n   The key words \"MUST\", \"MUST NOT\", \"SHOULD\", \"\
    SHOULD NOT\", and \"MAY\",\n   in this document are to be interpreted as described\
    \ in RFC 2119\n   [RFC2119].\n"
- title: 2.  The Internet-Standard Management Framework
  contents:
  - "2.  The Internet-Standard Management Framework\n   For a detailed overview of\
    \ the documents that describe the current\n   Internet-Standard Management Framework,\
    \ please refer to section 7 of\n   RFC 3410 [RFC3410].\n   Managed objects are\
    \ accessed via a virtual information store, termed\n   the Management Information\
    \ Base or MIB.  MIB objects are generally\n   accessed through the Simple Network\
    \ Management Protocol (SNMP).\n   Objects in the MIB are defined using the mechanisms\
    \ defined in the\n   Structure of Management Information (SMI).  This memo specifies\
    \ a MIB\n   module that is compliant to the SMIv2, which is described in STD 58,\n\
    \   RFC 2578 [RFC2578], STD 58, RFC 2579 [RFC2579] and STD 58, RFC 2580\n   [RFC2580].\n"
- title: 3.  Definitions
  contents:
  - '3.  Definitions

    '
- title: INET-ADDRESS-MIB DEFINITIONS ::= BEGIN
  contents:
  - 'INET-ADDRESS-MIB DEFINITIONS ::= BEGIN

    '
- title: IMPORTS
  contents:
  - "IMPORTS\n    MODULE-IDENTITY, mib-2, Unsigned32 FROM SNMPv2-SMI\n    TEXTUAL-CONVENTION\
    \                 FROM SNMPv2-TC;\n"
- title: inetAddressMIB MODULE-IDENTITY
  contents:
  - "inetAddressMIB MODULE-IDENTITY\n    LAST-UPDATED \"200502040000Z\"\n    ORGANIZATION\n\
    \        \"IETF Operations and Management Area\"\n    CONTACT-INFO\n        \"\
    Juergen Schoenwaelder (Editor)\n         International University Bremen\n   \
    \      P.O. Box 750 561\n         28725 Bremen, Germany\n         Phone: +49 421\
    \ 200-3587\n         EMail: j.schoenwaelder@iu-bremen.de\n         Send comments\
    \ to <ietfmibs@ops.ietf.org>.\"\n    DESCRIPTION\n        \"This MIB module defines\
    \ textual conventions for\n         representing Internet addresses.  An Internet\n\
    \         address can be an IPv4 address, an IPv6 address,\n         or a DNS\
    \ domain name.  This module also defines\n         textual conventions for Internet\
    \ port numbers,\n         autonomous system numbers, and the length of an\n  \
    \       Internet address prefix.\n         Copyright (C) The Internet Society\
    \ (2005).  This version\n         of this MIB module is part of RFC 4001, see\
    \ the RFC\n         itself for full legal notices.\"\n    REVISION     \"200502040000Z\"\
    \n    DESCRIPTION\n        \"Third version, published as RFC 4001.  This revision\n\
    \         introduces the InetZoneIndex, InetScopeType, and\n         InetVersion\
    \ textual conventions.\"\n    REVISION     \"200205090000Z\"\n    DESCRIPTION\n\
    \        \"Second version, published as RFC 3291.  This\n         revision contains\
    \ several clarifications and\n         introduces several new textual conventions:\n\
    \         InetAddressPrefixLength, InetPortNumber,\n         InetAutonomousSystemNumber,\
    \ InetAddressIPv4z,\n         and InetAddressIPv6z.\"\n    REVISION     \"200006080000Z\"\
    \n    DESCRIPTION\n        \"Initial version, published as RFC 2851.\"\n    ::=\
    \ { mib-2 76 }\n"
- title: InetAddressType ::= TEXTUAL-CONVENTION
  contents:
  - "InetAddressType ::= TEXTUAL-CONVENTION\n    STATUS      current\n    DESCRIPTION\n\
    \        \"A value that represents a type of Internet address.\n         unknown(0)\
    \  An unknown address type.  This value MUST\n                     be used if\
    \ the value of the corresponding\n                     InetAddress object is a\
    \ zero-length string.\n                     It may also be used to indicate an\
    \ IP address\n                     that is not in one of the formats defined\n\
    \                     below.\n         ipv4(1)     An IPv4 address as defined\
    \ by the\n                     InetAddressIPv4 textual convention.\n         ipv6(2)\
    \     An IPv6 address as defined by the\n                     InetAddressIPv6\
    \ textual convention.\n         ipv4z(3)    A non-global IPv4 address including\
    \ a zone\n                     index as defined by the InetAddressIPv4z\n    \
    \                 textual convention.\n         ipv6z(4)    A non-global IPv6\
    \ address including a zone\n                     index as defined by the InetAddressIPv6z\n\
    \                     textual convention.\n         dns(16)     A DNS domain name\
    \ as defined by the\n                     InetAddressDNS textual convention.\n\
    \         Each definition of a concrete InetAddressType value must be\n      \
    \   accompanied by a definition of a textual convention for use\n         with\
    \ that InetAddressType.\n         To support future extensions, the InetAddressType\
    \ textual\n         convention SHOULD NOT be sub-typed in object type definitions.\n\
    \         It MAY be sub-typed in compliance statements in order to\n         require\
    \ only a subset of these address types for a compliant\n         implementation.\n\
    \         Implementations must ensure that InetAddressType objects\n         and\
    \ any dependent objects (e.g., InetAddress objects) are\n         consistent.\
    \  An inconsistentValue error must be generated\n         if an attempt to change\
    \ an InetAddressType object would,\n         for example, lead to an undefined\
    \ InetAddress value.  In\n         particular, InetAddressType/InetAddress pairs\
    \ must be\n         changed together if the address type changes (e.g., from\n\
    \         ipv6(2) to ipv4(1)).\"\n    SYNTAX       INTEGER {\n               \
    \      unknown(0),\n                     ipv4(1),\n                     ipv6(2),\n\
    \                     ipv4z(3),\n                     ipv6z(4),\n            \
    \         dns(16)\n                 }\n"
- title: InetAddress ::= TEXTUAL-CONVENTION
  contents:
  - "InetAddress ::= TEXTUAL-CONVENTION\n    STATUS      current\n    DESCRIPTION\n\
    \        \"Denotes a generic Internet address.\n         An InetAddress value\
    \ is always interpreted within the context\n         of an InetAddressType value.\
    \  Every usage of the InetAddress\n         textual convention is required to\
    \ specify the InetAddressType\n         object that provides the context.  It\
    \ is suggested that the\n         InetAddressType object be logically registered\
    \ before the\n         object(s) that use the InetAddress textual convention,\
    \ if\n         they appear in the same logical row.\n         The value of an\
    \ InetAddress object must always be\n         consistent with the value of the\
    \ associated InetAddressType\n         object.  Attempts to set an InetAddress\
    \ object to a value\n         inconsistent with the associated InetAddressType\n\
    \         must fail with an inconsistentValue error.\n         When this textual\
    \ convention is used as the syntax of an\n         index object, there may be\
    \ issues with the limit of 128\n         sub-identifiers specified in SMIv2, STD\
    \ 58.  In this case,\n         the object definition MUST include a 'SIZE' clause\
    \ to\n         limit the number of potential instance sub-identifiers;\n     \
    \    otherwise the applicable constraints MUST be stated in\n         the appropriate\
    \ conceptual row DESCRIPTION clauses, or\n         in the surrounding documentation\
    \ if there is no single\n         DESCRIPTION clause that is appropriate.\"\n\
    \    SYNTAX       OCTET STRING (SIZE (0..255))\n"
- title: InetAddressIPv4 ::= TEXTUAL-CONVENTION
  contents:
  - "InetAddressIPv4 ::= TEXTUAL-CONVENTION\n    DISPLAY-HINT \"1d.1d.1d.1d\"\n  \
    \  STATUS       current\n    DESCRIPTION\n        \"Represents an IPv4 network\
    \ address:\n           Octets   Contents         Encoding\n            1-4   \
    \  IPv4 address     network-byte order\n         The corresponding InetAddressType\
    \ value is ipv4(1).\n         This textual convention SHOULD NOT be used directly\
    \ in object\n         definitions, as it restricts addresses to a specific format.\n\
    \         However, if it is used, it MAY be used either on its own or in\n   \
    \      conjunction with InetAddressType, as a pair.\"\n    SYNTAX       OCTET\
    \ STRING (SIZE (4))\n"
- title: InetAddressIPv6 ::= TEXTUAL-CONVENTION
  contents:
  - "InetAddressIPv6 ::= TEXTUAL-CONVENTION\n    DISPLAY-HINT \"2x:2x:2x:2x:2x:2x:2x:2x\"\
    \n    STATUS       current\n    DESCRIPTION\n        \"Represents an IPv6 network\
    \ address:\n           Octets   Contents         Encoding\n            1-16  \
    \  IPv6 address     network-byte order\n         The corresponding InetAddressType\
    \ value is ipv6(2).\n         This textual convention SHOULD NOT be used directly\
    \ in object\n         definitions, as it restricts addresses to a specific format.\n\
    \         However, if it is used, it MAY be used either on its own or in\n   \
    \      conjunction with InetAddressType, as a pair.\"\n    SYNTAX       OCTET\
    \ STRING (SIZE (16))\n"
- title: InetAddressIPv4z ::= TEXTUAL-CONVENTION
  contents:
  - "InetAddressIPv4z ::= TEXTUAL-CONVENTION\n    DISPLAY-HINT \"1d.1d.1d.1d%4d\"\n\
    \    STATUS       current\n    DESCRIPTION\n        \"Represents a non-global\
    \ IPv4 network address, together\n         with its zone index:\n           Octets\
    \   Contents         Encoding\n            1-4     IPv4 address     network-byte\
    \ order\n            5-8     zone index       network-byte order\n         The\
    \ corresponding InetAddressType value is ipv4z(3).\n         The zone index (bytes\
    \ 5-8) is used to disambiguate identical\n         address values on nodes that\
    \ have interfaces attached to\n         different zones of the same scope.  The\
    \ zone index may contain\n         the special value 0, which refers to the default\
    \ zone for each\n         scope.\n         This textual convention SHOULD NOT\
    \ be used directly in object\n         definitions, as it restricts addresses\
    \ to a specific format.\n         However, if it is used, it MAY be used either\
    \ on its own or in\n         conjunction with InetAddressType, as a pair.\"\n\
    \    SYNTAX       OCTET STRING (SIZE (8))\n"
- title: InetAddressIPv6z ::= TEXTUAL-CONVENTION
  contents:
  - "InetAddressIPv6z ::= TEXTUAL-CONVENTION\n    DISPLAY-HINT \"2x:2x:2x:2x:2x:2x:2x:2x%4d\"\
    \n    STATUS       current\n    DESCRIPTION\n        \"Represents a non-global\
    \ IPv6 network address, together\n         with its zone index:\n           Octets\
    \   Contents         Encoding\n            1-16    IPv6 address     network-byte\
    \ order\n           17-20    zone index       network-byte order\n         The\
    \ corresponding InetAddressType value is ipv6z(4).\n         The zone index (bytes\
    \ 17-20) is used to disambiguate\n         identical address values on nodes that\
    \ have interfaces\n         attached to different zones of the same scope.  The\
    \ zone index\n         may contain the special value 0, which refers to the default\n\
    \         zone for each scope.\n         This textual convention SHOULD NOT be\
    \ used directly in object\n         definitions, as it restricts addresses to\
    \ a specific format.\n         However, if it is used, it MAY be used either on\
    \ its own or in\n         conjunction with InetAddressType, as a pair.\"\n   \
    \ SYNTAX       OCTET STRING (SIZE (20))\n"
- title: InetAddressDNS ::= TEXTUAL-CONVENTION
  contents:
  - "InetAddressDNS ::= TEXTUAL-CONVENTION\n    DISPLAY-HINT \"255a\"\n    STATUS\
    \       current\n    DESCRIPTION\n        \"Represents a DNS domain name.  The\
    \ name SHOULD be fully\n         qualified whenever possible.\n         The corresponding\
    \ InetAddressType is dns(16).\n         The DESCRIPTION clause of InetAddress\
    \ objects that may have\n         InetAddressDNS values MUST fully describe how\
    \ (and when)\n         these names are to be resolved to IP addresses.\n     \
    \    The resolution of an InetAddressDNS value may require to\n         query\
    \ multiple DNS records (e.g., A for IPv4 and AAAA for\n         IPv6).  The order\
    \ of the resolution process and which DNS\n         record takes precedence depends\
    \ on the configuration of the\n         resolver.\n         This textual convention\
    \ SHOULD NOT be used directly in object\n         definitions, as it restricts\
    \ addresses to a specific format.\n         However, if it is used, it MAY be\
    \ used either on its own or in\n         conjunction with InetAddressType, as\
    \ a pair.\"\n    SYNTAX       OCTET STRING (SIZE (1..255))\n"
- title: InetAddressPrefixLength ::= TEXTUAL-CONVENTION
  contents:
  - "InetAddressPrefixLength ::= TEXTUAL-CONVENTION\n    DISPLAY-HINT \"d\"\n    STATUS\
    \       current\n    DESCRIPTION\n        \"Denotes the length of a generic Internet\
    \ network address\n         prefix.  A value of n corresponds to an IP address\
    \ mask\n         that has n contiguous 1-bits from the most significant\n    \
    \     bit (MSB), with all other bits set to 0.\n         An InetAddressPrefixLength\
    \ value is always interpreted within\n         the context of an InetAddressType\
    \ value.  Every usage of the\n         InetAddressPrefixLength textual convention\
    \ is required to\n         specify the InetAddressType object that provides the\n\
    \         context.  It is suggested that the InetAddressType object be\n     \
    \    logically registered before the object(s) that use the\n         InetAddressPrefixLength\
    \ textual convention, if they appear\n         in the same logical row.\n    \
    \     InetAddressPrefixLength values larger than\n         the maximum length\
    \ of an IP address for a specific\n         InetAddressType are treated as the\
    \ maximum significant\n         value applicable for the InetAddressType.  The\
    \ maximum\n         significant value is 32 for the InetAddressType\n        \
    \ 'ipv4(1)' and 'ipv4z(3)' and 128 for the InetAddressType\n         'ipv6(2)'\
    \ and 'ipv6z(4)'.  The maximum significant value\n         for the InetAddressType\
    \ 'dns(16)' is 0.\n         The value zero is object-specific and must be defined\
    \ as\n         part of the description of any object that uses this\n        \
    \ syntax.  Examples of the usage of zero might include\n         situations where\
    \ the Internet network address prefix\n         is unknown or does not apply.\n\
    \         The upper bound of the prefix length has been chosen to\n         be\
    \ consistent with the maximum size of an InetAddress.\"\n    SYNTAX       Unsigned32\
    \ (0..2040)\n"
- title: InetPortNumber ::= TEXTUAL-CONVENTION
  contents:
  - "InetPortNumber ::= TEXTUAL-CONVENTION\n    DISPLAY-HINT \"d\"\n    STATUS   \
    \    current\n    DESCRIPTION\n        \"Represents a 16 bit port number of an\
    \ Internet transport\n         layer protocol.  Port numbers are assigned by IANA.\
    \  A\n         current list of all assignments is available from\n         <http://www.iana.org/>.\n\
    \         The value zero is object-specific and must be defined as\n         part\
    \ of the description of any object that uses this\n         syntax.  Examples\
    \ of the usage of zero might include\n         situations where a port number\
    \ is unknown, or when the\n         value zero is used as a wildcard in a filter.\"\
    \n    REFERENCE   \"STD 6 (RFC 768), STD 7 (RFC 793) and RFC 2960\"\n    SYNTAX\
    \       Unsigned32 (0..65535)\n"
- title: InetAutonomousSystemNumber ::= TEXTUAL-CONVENTION
  contents:
  - "InetAutonomousSystemNumber ::= TEXTUAL-CONVENTION\n    DISPLAY-HINT \"d\"\n \
    \   STATUS       current\n    DESCRIPTION\n        \"Represents an autonomous\
    \ system number that identifies an\n         Autonomous System (AS).  An AS is\
    \ a set of routers under a\n         single technical administration, using an\
    \ interior gateway\n         protocol and common metrics to route packets within\
    \ the AS,\n         and using an exterior gateway protocol to route packets to\n\
    \         other ASes'.  IANA maintains the AS number space and has\n         delegated\
    \ large parts to the regional registries.\n         Autonomous system numbers\
    \ are currently limited to 16 bits\n         (0..65535).  There is, however, work\
    \ in progress to enlarge the\n         autonomous system number space to 32 bits.\
    \  Therefore, this\n         textual convention uses an Unsigned32 value without\
    \ a\n         range restriction in order to support a larger autonomous\n    \
    \     system number space.\"\n    REFERENCE   \"RFC 1771, RFC 1930\"\n    SYNTAX\
    \       Unsigned32\n"
- title: InetScopeType ::= TEXTUAL-CONVENTION
  contents:
  - "InetScopeType ::= TEXTUAL-CONVENTION\n    STATUS       current\n    DESCRIPTION\n\
    \        \"Represents a scope type.  This textual convention can be used\n   \
    \      in cases where a MIB has to represent different scope types\n         and\
    \ there is no context information, such as an InetAddress\n         object, that\
    \ implicitly defines the scope type.\n         Note that not all possible values\
    \ have been assigned yet, but\n         they may be assigned in future revisions\
    \ of this specification.\n         Applications should therefore be able to deal\
    \ with values\n         not yet assigned.\"\n    REFERENCE   \"RFC 3513\"\n  \
    \  SYNTAX       INTEGER {\n                     -- reserved(0),\n            \
    \         interfaceLocal(1),\n                     linkLocal(2),\n           \
    \          subnetLocal(3),\n                     adminLocal(4),\n            \
    \         siteLocal(5), -- site-local unicast addresses\n                    \
    \               -- have been deprecated by RFC 3879\n                     -- unassigned(6),\n\
    \                     -- unassigned(7),\n                     organizationLocal(8),\n\
    \                     -- unassigned(9),\n                     -- unassigned(10),\n\
    \                     -- unassigned(11),\n                     -- unassigned(12),\n\
    \                     -- unassigned(13),\n                     global(14)\n  \
    \                   -- reserved(15)\n                 }\n"
- title: InetZoneIndex ::= TEXTUAL-CONVENTION
  contents:
  - "InetZoneIndex ::= TEXTUAL-CONVENTION\n    DISPLAY-HINT \"d\"\n    STATUS    \
    \   current\n    DESCRIPTION\n        \"A zone index identifies an instance of\
    \ a zone of a\n         specific scope.\n         The zone index MUST disambiguate\
    \ identical address\n         values.  For link-local addresses, the zone index\
    \ will\n         typically be the interface index (ifIndex as defined in the\n\
    \         IF-MIB) of the interface on which the address is configured.\n     \
    \    The zone index may contain the special value 0, which refers\n         to\
    \ the default zone.  The default zone may be used in cases\n         where the\
    \ valid zone index is not known (e.g., when a\n         management application\
    \ has to write a link-local IPv6\n         address without knowing the interface\
    \ index value).  The\n         default zone SHOULD NOT be used as an easy way\
    \ out in\n         cases where the zone index for a non-global IPv6 address\n\
    \         is known.\"\n    REFERENCE   \"RFC4007\"\n    SYNTAX       Unsigned32\n"
- title: InetVersion ::= TEXTUAL-CONVENTION
  contents:
  - "InetVersion ::= TEXTUAL-CONVENTION\n    STATUS  current\n    DESCRIPTION\n  \
    \      \"A value representing a version of the IP protocol.\n         unknown(0)\
    \  An unknown or unspecified version of the IP\n                     protocol.\n\
    \         ipv4(1)     The IPv4 protocol as defined in RFC 791 (STD 5).\n     \
    \    ipv6(2)     The IPv6 protocol as defined in RFC 2460.\n         Note that\
    \ this textual convention SHOULD NOT be used to\n         distinguish different\
    \ address types associated with IP\n         protocols.  The InetAddressType has\
    \ been designed for this\n         purpose.\"\n    REFERENCE   \"RFC 791, RFC\
    \ 2460\"\n    SYNTAX       INTEGER {\n                     unknown(0),\n     \
    \                ipv4(1),\n                     ipv6(2)\n                 }\n"
- title: END
  contents:
  - 'END

    '
- title: 4.  Usage Hints
  contents:
  - "4.  Usage Hints\n   The InetAddressType and InetAddress textual conventions have\
    \ been\n   introduced to avoid over-constraining an object definition by the use\n\
    \   of the IpAddress SMI base type, which is IPv4 specific.  An\n   InetAddressType/InetAddress\
    \ pair can represent IP addresses in\n   various formats.\n   The InetAddressType\
    \ and InetAddress objects SHOULD NOT be sub-typed\n   in object definitions. \
    \ Sub-typing binds the MIB module to specific\n   address formats, which may cause\
    \ serious problems if new address\n   formats need to be introduced.  Note that\
    \ it is possible to write\n   compliance statements indicating that only a subset\
    \ of the defined\n   address types must be implemented to be compliant.\n   Every\
    \ usage of the InetAddress or InetAddressPrefixLength textual\n   conventions\
    \ must specify which InetAddressType object provides the\n   context for the interpretation\
    \ of the InetAddress or\n   InetAddressPrefixLength textual convention.\n   It\
    \ is suggested that the InetAddressType object is logically\n   registered before\
    \ the object(s) that use(s) the InetAddress or\n   InetAddressPrefixLength textual\
    \ convention.  An InetAddressType\n   object is logically registered before an\
    \ InetAddress or\n   InetAddressPrefixLength object if it appears before the InetAddress\n\
    \   or InetAddressPrefixLength object in the conceptual row (which\n   includes\
    \ any index objects).  This rule allows programs such as MIB\n   compilers to\
    \ identify the InetAddressType of a given InetAddress or\n   InetAddressPrefixLength\
    \ object by searching for the InetAddressType\n   object, which precedes an InetAddress\
    \ or InetAddressPrefixLength\n   object.\n"
- title: 4.1.  Table Indexing
  contents:
  - "4.1.  Table Indexing\n   When a generic Internet address is used as an index,\
    \ both the\n   InetAddressType and InetAddress objects MUST be used.  The\n  \
    \ InetAddressType object MUST be listed before the InetAddress object\n   in the\
    \ INDEX clause.\n   The IMPLIED keyword MUST NOT be used for an object of type\n\
    \   InetAddress in an INDEX clause.  Instance sub-identifiers are then of\n  \
    \ the form T.N.O1.O2...On, where T is the value of the InetAddressType\n   object,\
    \ O1...On are the octets in the InetAddress object, and N is\n   the number of\
    \ those octets.\n   There is a meaningful lexicographical ordering to tables indexed\
    \ in\n   this fashion.  Command generator applications may look up specific\n\
    \   addresses of known type and value, issue GetNext requests for\n   addresses\
    \ of a single type, or issue GetNext requests for a specific\n   type and address\
    \ prefix.\n"
- title: 4.2.  Uniqueness of Addresses
  contents:
  - "4.2.  Uniqueness of Addresses\n   IPv4 addresses were intended to be globally\
    \ unique, current usage\n   notwithstanding.  IPv6 addresses were architected\
    \ to have different\n   scopes and hence uniqueness [RFC3513].  In particular,\
    \ IPv6 \"link-\n   local\" unicast addresses are not guaranteed to be unique on\
    \ any\n   particular node.  In such cases, the duplicate addresses must be\n \
    \  configured on different interfaces.  So the combination of an IPv6\n   address\
    \ and a zone index is unique [RFC4007].\n   The InetAddressIPv6 textual convention\
    \ has been defined to represent\n   global IPv6 addresses and non-global IPv6\
    \ addresses in cases where no\n   zone index is needed (e.g., on end hosts with\
    \ a single interface).\n   The InetAddressIPv6z textual convention has been defined\
    \ to represent\n   non-global IPv6 addresses in cases where a zone index is needed\n\
    \   (e.g., a router connecting multiple zones).  Therefore, MIB designers\n  \
    \ who use InetAddressType/InetAddress pairs do not need to define\n   additional\
    \ objects in order to support non-global addresses on nodes\n   that connect multiple\
    \ zones.\n   The InetAddressIPv4z is intended for use in MIB modules (such as\
    \ the\n   TCP-MIB) which report addresses in the address family used on the\n\
    \   wire, but where the entity instrumented obtains these addresses from\n   applications\
    \ or administrators in a form that includes a zone index,\n   such as v4-mapped\
    \ IPv6 addresses.\n   The size of the zone index has been chosen so that it is\
    \ consistent\n   with (i) the numerical zone index, defined in [RFC4007], and\
    \ (ii) the\n   sin6_scope_id field of the sockaddr_in6 structure, defined in RFC\n\
    \   2553 [RFC2553].\n"
- title: 4.3.  Multiple Addresses per Host
  contents:
  - "4.3.  Multiple Addresses per Host\n   A single host system may be configured\
    \ with multiple addresses (IPv4\n   or IPv6), and possibly with multiple DNS names.\
    \  Thus it is possible\n   for a single host system to be accessible by multiple\n\
    \   InetAddressType/InetAddress pairs.\n   If this could be an implementation\
    \ or usage issue, the DESCRIPTION\n   clause of the relevant objects must fully\
    \ describe which address is\n   reported in a given InetAddressType/InetAddress\
    \ pair.\n"
- title: 4.4.  Resolving DNS Names
  contents:
  - "4.4.  Resolving DNS Names\n   DNS names MUST be resolved to IP addresses when\
    \ communication with\n   the named host is required.  This raises a temporal aspect\
    \ to\n   defining MIB objects whose value is a DNS name: When is the name\n  \
    \ translated to an address?\n   For example, consider an object defined to indicate\
    \ a forwarding\n   destination, and whose value is a DNS name.  When does the\
    \ forwarding\n   entity resolve the DNS name? Each time forwarding occurs, or\
    \ just\n   once when the object was instantiated?\n   The DESCRIPTION clause of\
    \ these objects SHOULD precisely define how\n   and when any required name to\
    \ address resolution is done.\n   Similarly, the DESCRIPTION clause of these objects\
    \ SHOULD precisely\n   define how and when a reverse lookup is being done, if\
    \ an agent has\n   accessed instrumentation that knows about an IP address, and\
    \ if the\n   MIB module or implementation requires it to map the IP address to\
    \ a\n   DNS name.\n"
- title: 5.  Table Indexing Example
  contents:
  - "5.  Table Indexing Example\n   This example shows a table listing communication\
    \ peers that are\n   identified by either an IPv4 address, an IPv6 address, or\
    \ a DNS name.\n   The table definition also prohibits entries with an empty address\n\
    \   (whose type would be \"unknown\").  The size of a DNS name is limited\n  \
    \ to 64 characters in order to satisfy OID length constraints.\n"
- title: peerTable OBJECT-TYPE
  contents:
  - "peerTable OBJECT-TYPE\n    SYNTAX      SEQUENCE OF PeerEntry\n    MAX-ACCESS\
    \  not-accessible\n    STATUS      current\n    DESCRIPTION\n        \"A list\
    \ of communication peers.\"\n    ::= { somewhere 1 }\n"
- title: peerEntry OBJECT-TYPE
  contents:
  - "peerEntry OBJECT-TYPE\n    SYNTAX      PeerEntry\n    MAX-ACCESS  not-accessible\n\
    \    STATUS      current\n    DESCRIPTION\n        \"An entry containing information\
    \ about a particular peer.\"\n    INDEX       { peerAddressType, peerAddress }\n\
    \    ::= { peerTable 1 }\n"
- title: PeerEntry ::= SEQUENCE {
  contents:
  - "PeerEntry ::= SEQUENCE {\n    peerAddressType     InetAddressType,\n    peerAddress\
    \         InetAddress,\n    peerStatus          INTEGER\n"
- title: '}'
  contents:
  - '}

    '
- title: peerAddressType OBJECT-TYPE
  contents:
  - "peerAddressType OBJECT-TYPE\n    SYNTAX      InetAddressType\n    MAX-ACCESS\
    \  not-accessible\n    STATUS      current\n    DESCRIPTION\n        \"The type\
    \ of Internet address by which the peer\n         is reachable.\"\n    ::= { peerEntry\
    \ 1 }\n"
- title: peerAddress OBJECT-TYPE
  contents:
  - "peerAddress OBJECT-TYPE\n    SYNTAX      InetAddress (SIZE (1..64))\n    MAX-ACCESS\
    \  not-accessible\n    STATUS      current\n    DESCRIPTION\n        \"The Internet\
    \ address for the peer.  The type of this\n         address is determined by the\
    \ value of the peerAddressType\n         object.  Note that implementations must\
    \ limit themselves\n         to a single entry in this table per reachable peer.\n\
    \         The peerAddress may not be empty due to the SIZE\n         restriction.\n\
    \         If a row is created administratively by an SNMP\n         operation\
    \ and the address type value is dns(16), then\n         the agent stores the DNS\
    \ name internally.  A DNS name\n         lookup must be performed on the internally\
    \ stored DNS\n         name whenever it is being used to contact the peer.\n \
    \        If a row is created by the managed entity itself and\n         the address\
    \ type value is dns(16), then the agent\n         stores the IP address internally.\
    \  A DNS reverse lookup\n         must be performed on the internally stored IP\
    \ address\n         whenever the value is retrieved via SNMP.\"\n    ::= { peerEntry\
    \ 2 }\n   The following compliance statement specifies that compliant\n   implementations\
    \ need only support IPv4/IPv6 addresses without zone\n   indices.  Support for\
    \ DNS names or IPv4/IPv6 addresses with zone\n   indices is not required.\n  \
    \ peerCompliance MODULE-COMPLIANCE\n       STATUS      current\n       DESCRIPTION\n\
    \           \"The compliance statement of the peer MIB.\"\n       MODULE     \
    \ -- this module\n       MANDATORY-GROUPS    { peerGroup }\n       OBJECT  peerAddressType\n\
    \       SYNTAX  InetAddressType { ipv4(1), ipv6(2) }\n       DESCRIPTION\n   \
    \        \"An implementation is only required to support IPv4\n            and\
    \ IPv6 addresses without zone indices.\"\n       ::= { somewhere 2 }\n   Note\
    \ that the SMIv2 does not permit inclusion of objects that are not\n   accessible\
    \ in an object group (see section 3.1 in STD 58, RFC 2580\n   [RFC2580]).  It\
    \ is therefore not possible to refine the syntax of\n   auxiliary objects that\
    \ are not accessible.  It is suggested that the\n   refinement be expressed informally\
    \ in the DESCRIPTION clause of the\n   MODULE-COMPLIANCE macro invocation.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   This module does not define any management objects.\
    \  Instead, it\n   defines a set of textual conventions which may be used by other\
    \ MIB\n   modules to define management objects.\n   Meaningful security considerations\
    \ can only be written in the MIB\n   modules that define management objects. \
    \ This document has therefore\n   no impact on the security of the Internet.\n"
- title: 7.  Acknowledgments
  contents:
  - "7.  Acknowledgments\n   This document was produced by the Operations and Management\
    \ Area\n   \"IPv6MIB\" design team.  For their comments and suggestions, the\n\
    \   authors would like to thank Fred Baker, Randy Bush, Richard Draves,\n   Mark\
    \ Ellison, Bill Fenner, Jun-ichiro Hagino, Mike Heard, Tim\n   Jenkins, Allison\
    \ Mankin, Glenn Mansfield, Keith McCloghrie, Thomas\n   Narten, Erik Nordmark,\
    \ Peder Chr.  Norgaard, Randy Presuhn, Andrew\n   Smith, Dave Thaler, Kenneth\
    \ White, Bert Wijnen, and Brian Zill.\n"
- title: 8.  Changes from RFC 3291 to RFC 4001
  contents:
  - "8.  Changes from RFC 3291 to RFC 4001\n   The following changes have been made\
    \ relative to RFC 3291:\n   o  Added a range restriction to the InetAddressPrefixLength\
    \ textual\n      convention.\n   o  Added new textual conventions InetZoneIndex,\
    \ InetScopeType, and\n      InetVersion.\n   o  Added explicit \"d\" DISPLAY-HINTs\
    \ for textual conventions that did\n      not have them.\n   o  Updated boilerplate\
    \ text and references.\n"
- title: 9.  Changes from RFC 2851 to RFC 3291
  contents:
  - "9.  Changes from RFC 2851 to RFC 3291\n   The following changes have been made\
    \ relative to RFC 2851:\n   o  Added new textual conventions InetAddressPrefixLength,\n\
    \      InetPortNumber, and InetAutonomousSystemNumber.\n   o  Rewrote the introduction\
    \ to say clearly that, in general, one\n      should define MIB tables that work\
    \ with all versions of IP.  The\n      other approach of multiple tables for different\
    \ IP versions is\n      strongly discouraged.\n   o  Added text to the InetAddressType\
    \ and InetAddress descriptions\n      requiring that implementations must reject\
    \ set operations with an\n      inconsistentValue error if they lead to inconsistencies.\n\
    \   o  Removed the strict ordering constraints.  Description clauses now\n   \
    \   must explain which InetAddressType object provides the context for\n     \
    \ an InetAddress or InetAddressPrefixLength object.\n   o  Aligned wordings with\
    \ the IPv6 scoping architecture document.\n   o  Split the InetAddressIPv6 textual\
    \ convention into the two textual\n      conventions (InetAddressIPv6 and InetAddressIPv6z)\
    \ and introduced\n      a new textual convention InetAddressIPv4z.  Added ipv4z(3)\
    \ and\n      ipv6z(4) named numbers to the InetAddressType enumeration.\n    \
    \  Motivations for this change: (i) to enable the introduction of a\n      textual\
    \ conventions for non-global IPv4 addresses, (ii) alignment\n      with the textual\
    \ conventions for transport addresses, (iii)\n      simpler compliance statements\
    \ in cases where support for IPv6\n      addresses with zone indices is not required,\
    \ and (iv) to simplify\n      implementations for host systems that will never\
    \ have to report\n      zone indices.\n"
- title: 10.  References
  contents:
  - '10.  References

    '
- title: 10.1.  Normative References
  contents:
  - "10.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [RFC2578]  McCloghrie, K., Perkins, D., and J. Schoenwaelder,\n  \
    \            \"Structure of Management Information Version 2 (SMIv2)\",\n    \
    \          STD 58, RFC 2578, April 1999.\n   [RFC2579]  McCloghrie, K., Perkins,\
    \ D., and J. Schoenwaelder,\n              \"Textual Conventions for SMIv2\",\
    \ STD 58, RFC 2579, April\n              1999.\n   [RFC2580]  McCloghrie, K.,\
    \ Perkins, D., and J. Schoenwaelder,\n              \"Conformance Statements for\
    \ SMIv2\", STD 58, RFC 2580,\n              April 1999.\n   [RFC3513]  Hinden,\
    \ R. and S. Deering, \"Internet Protocol Version 6\n              (IPv6) Addressing\
    \ Architecture\", RFC 3513, April 2003.\n   [RFC4007]  Deering, S., Haberman,\
    \ B., Jinmei, T., Nordmark, E., and\n              B.  Zill, \"IPv6 Scoped Address\
    \ Architecture\", RFC 4007,\n              February 2005.\n"
- title: 10.2.  Informative References
  contents:
  - "10.2.  Informative References\n   [RFC2553]  Gilligan, R., Thomson, S., Bound,\
    \ J., and W. Stevens,\n              \"Basic Socket Interface Extensions for IPv6\"\
    , RFC 2553,\n              March 1999.\n   [RFC2863]  McCloghrie, K. and F. Kastenholz,\
    \ \"The Interfaces Group\n              MIB\", RFC 2863, June 2000.\n   [RFC3410]\
    \  Case, J., Mundy, R., Partain, D., and B. Stewart,\n              \"Introduction\
    \ and Applicability Statements for Internet-\n              Standard Management\
    \ Framework\", RFC 3410, December 2002.\n   [RFC3419]  Daniele, M. and J. Schoenwaelder,\
    \ \"Textual Conventions for\n              Transport Addresses\", RFC 3419, December\
    \ 2002.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Michael Daniele\n   SyAM Software, Inc.\n   1 Chestnut\
    \ St, Suite 3-I\n   Nashua, NH 03060\n   USA\n   Phone: +1 603 598-9575\n   EMail:\
    \ michael.daniele@syamsoftware.com\n   Brian Haberman\n   Johns Hopkins University\
    \ Applied Physics Laboratory\n   11100 Johns Hopkins Road\n   Laurel, MD  20723-6099\n\
    \   USA\n   Phone: +1-443-778-1319\n   EMail: brian@innovationslab.net\n   Shawn\
    \ A. Routhier\n   Wind River Systems, Inc.\n   500 Wind River Way\n   Alameda,\
    \ CA  94501\n   USA\n   Phone: +1 510 749-2095\n   EMail: shawn.routhier@windriver.com\n\
    \   Juergen Schoenwaelder\n   International University Bremen\n   P.O. Box 750\
    \ 561\n   28725 Bremen\n   Germany\n   Phone: +49 421 200-3587\n   EMail: j.schoenwaelder@iu-bremen.de\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2005).\n   This\
    \ document is subject to the rights, licenses and restrictions\n   contained in\
    \ BCP 78, and at www.rfc-editor.org, and except as set\n   forth therein, the\
    \ authors retain all their rights.\n   This document and the information contained\
    \ herein are provided on an\n   \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION\
    \ HE/SHE REPRESENTS\n   OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND\
    \ THE INTERNET\n   ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR\
    \ IMPLIED,\n   INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE\n\
    \   INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES\
    \ OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ ISOC's procedures with respect to rights in ISOC Documents can\n   be found\
    \ in BCP 78 and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat\
    \ and any\n   assurances of licenses to be made available, or the result of an\n\
    \   attempt made to obtain a general license or permission for the use of\n  \
    \ such proprietary rights by implementers or users of this\n   specification can\
    \ be obtained from the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n\
    \   The IETF invites any interested party to bring to its attention any\n   copyrights,\
    \ patents or patent applications, or other proprietary\n   rights that may cover\
    \ technology that may be required to implement\n   this standard.  Please address\
    \ the information to the IETF at ietf-\n   ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
