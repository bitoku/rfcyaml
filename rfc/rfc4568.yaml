- title: __initial_text__
  contents:
  - "                   Session Description Protocol (SDP)\n                Security\
    \ Descriptions for Media Streams\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2006).\n"
- title: Abstract
  contents:
  - "Abstract\n   This document defines a Session Description Protocol (SDP)\n   cryptographic\
    \ attribute for unicast media streams.  The attribute\n   describes a cryptographic\
    \ key and other parameters that serve to\n   configure security for a unicast\
    \ media stream in either a single\n   message or a roundtrip exchange.  The attribute\
    \ can be used with a\n   variety of SDP media transports, and this document defines\
    \ how to use\n   it for the Secure Real-time Transport Protocol (SRTP) unicast\
    \ media\n   streams.  The SDP crypto attribute requires the services of a data\n\
    \   security protocol to secure the SDP message.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n           5.1.2. Generating the Initial Answer - Unicast\
    \ Streams ....10\n           5.1.3. Processing of the Initial Answer - Unicast\n\
    \                  Streams ............................................11\n  \
    \         5.1.4. Modifying the Session ..............................11\n    \
    \  5.2. Use Outside Offer/Answer ..................................11\n      5.3.\
    \ General Backwards Compatibility Considerations ............12\n   6. SRTP Security\
    \ Descriptions .....................................12\n      6.1. SRTP Key Parameter\
    \ ........................................13\n      6.2. Crypto-Suites .............................................16\n\
    \           6.2.1. AES_CM_128_HMAC_SHA1_80 ............................16\n  \
    \         6.2.2. AES_CM_128_HMAC_SHA1_32 ............................17\n    \
    \       6.2.3. F8_128_HMAC_SHA1_80 ................................17\n      \
    \     6.2.4. Adding New Crypto-Suite Definitions ................17\n      6.3.\
    \ Session Parameters ........................................17\n           6.3.1.\
    \ KDR=n ..............................................18\n           6.3.2. UNENCRYPTED_SRTCP\
    \ and UNENCRYPTED_SRTP .............18\n           6.3.3. UNAUTHENTICATED_SRTP\
    \ ...............................18\n           6.3.4. FEC_ORDER=order ....................................19\n\
    \           6.3.5. FEC_KEY=key-params .................................19\n  \
    \         6.3.6. Window Size Hint (WSH) .............................19\n    \
    \       6.3.7. Defining New SRTP Session Parameters ...............20\n      6.4.\
    \ SRTP Crypto Context Initialization ........................20\n           6.4.1.\
    \ Late Binding of One or More SSRCs to a\n                  Crypto Context .....................................21\n\
    \           6.4.2. Sharing Cryptographic Contexts among\n                  Sessions\
    \ or SSRCs ..................................22\n      6.5. Removal of Crypto\
    \ Contexts ................................23\n   7. SRTP-Specific Use of the\
    \ Crypto Attribute ......................23\n      7.1. Use with Offer/Answer\
    \ .....................................23\n           7.1.1. Generating the Initial\
    \ Offer - Unicast Streams .....23\n           7.1.2. Generating the Initial Answer\
    \ - Unicast Streams ....24\n           7.1.3. Processing of the Initial Answer\
    \ - Unicast\n                  Streams ............................................25\n\
    \           7.1.4. Modifying the Session ..............................25\n  \
    \         7.1.5. Offer/Answer Example ...............................27\n    \
    \  7.2. SRTP-Specific Use Outside Offer/Answer ....................28\n      7.3.\
    \ Support for SIP Forking ...................................28\n      7.4. SRTP-Specific\
    \ Backwards Compatibility Considerations ......29\n      7.5. Operation with KEYMGT=\
    \ and k= lines .......................29\n   8. Security Considerations ........................................29\n\
    \      8.1. Authentication of Packets .................................30\n  \
    \    8.2. Keystream Reuse ...........................................30\n    \
    \  8.3. Signaling Authentication and Signaling Encryption .........31\n   9. Grammar\
    \ ........................................................32\n      9.1. Generic\
    \ \"Crypto\" Attribute Grammar ........................32\n      9.2. SRTP \"\
    Crypto\" Attribute Grammar ...........................32\n   10. IANA Considerations\
    \ ...........................................34\n      10.1. Registration of the\
    \ \"crypto\" Attribute ...................34\n      10.2. New IANA Registries\
    \ and Registration Procedures ..........34\n           10.2.1. Key Method Registry\
    \ and Registration ..............34\n           10.2.2. Media Stream Transport\
    \ Registry and Registration ..35\n      10.3. Initial Registrations ....................................35\n\
    \           10.3.1. Key Method ........................................35\n  \
    \         10.3.2. SRTP Media Stream Transport .......................35\n    \
    \              10.3.2.1. SRTP Crypto Suite Registry and\n                    \
    \        Registration .............................35\n                  10.3.2.2.\
    \ SRTP Session Parameter Registration ......36\n   11. Acknowledgements ..............................................36\n\
    \   12. Normative References ..........................................36\n  \
    \ 13. Informative References ........................................37\n   Appendix\
    \ A - Rationale for Keying Material Directionality .........40\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The Session Description Protocol (SDP) [RFC4566] describes\
    \ multimedia\n   sessions, which can be audio, video, whiteboard, fax, modem,\
    \ and\n   other media streams.  Security services such as data origin\n   authentication,\
    \ integrity, and confidentiality are often needed for\n   those streams.  The\
    \ Secure Real-time Transport Protocol (SRTP)\n   [RFC3711] provides security services\
    \ for RTP media and is signaled by\n   use of secure RTP transport (e.g., \"RTP/SAVP\"\
    \ or \"RTP/SAVPF\") in an\n   SDP media (m=) line.  However, there are no means\
    \ within SDP itself\n   to configure SRTP beyond using default values.  This document\n\
    \   specifies a new SDP attribute called \"crypto\", which is used to\n   signal\
    \ and negotiate cryptographic parameters for media streams in\n   general, and\
    \ for SRTP in particular.  The definition of the crypto\n   attribute in this\
    \ document is limited to two-party unicast media\n   streams where each source\
    \ has a unique cryptographic key; support for\n   multicast media streams or multipoint\
    \ unicast streams is for further\n   study.\n   The crypto attribute is defined\
    \ in a generic way to enable its use\n   with SRTP and any other secure transports\
    \ that can establish\n   cryptographic parameters with only a single message or\
    \ in a single\n   round-trip exchange using the offer/answer model [RFC3264].\n\
    \   Extensions to transports other than SRTP, however, is beyond the\n   scope\
    \ of this document.  Each type of secure media transport needs\n   its own specification\
    \ for the crypto-attribute parameter.  These\n   definitions are frequently unique\
    \ to the particular type of transport\n   and must be specified in a Standards-Track\
    \ RFC and registered with\n   IANA according to the procedures defined in Section\
    \ 10.  This\n   document defines the security parameters and keying material for\
    \ SRTP\n   only.\n   It would be self-defeating not to secure cryptographic keys\
    \ and other\n   parameters at least as well as the data are secured.  Data security\n\
    \   protocols such as SRTP rely upon a separate key management system to\n   securely\
    \ establish encryption and/or authentication keys.  Key\n   management protocols\
    \ provide authenticated key establishment (AKE)\n   procedures to authenticate\
    \ the identity of each endpoint and protect\n   against man-in-the-middle, reflection/replay,\
    \ connection hijacking,\n   and some denial-of-service attacks [skeme].  Along\
    \ with the key, an\n   AKE protocol such as MIKEY [mikey], GDOI [GDOI], KINK [kink],\
    \ IKE\n   [ike], Secure Multiparts [s/mime, pgp/mime], or TLS [TLS] securely\n\
    \   disseminates information describing both the key and the data-\n   security\
    \ session.  AKE is needed because it is pointless to provide a\n   key over a\
    \ medium where an attacker can snoop the key, alter the\n   definition of the\
    \ key to render it useless, or change the parameters\n   of the security session\
    \ to gain unauthorized access to session-\n   related information.\n   SDP, however,\
    \ was not designed to provide AKE services, and the media\n   security descriptions\
    \ defined in this document do not add AKE\n   services to SDP.  This specification\
    \ is no replacement for a key\n   management protocol or for the conveyance of\
    \ key management messages\n   in SDP [keymgt].  The SDP security descriptions\
    \ defined here are\n   suitable for restricted cases only where IPsec, TLS, or\
    \ some other\n   encapsulating data-security protocol (e.g., SIP S/MIME) protects\
    \ the\n   SDP message.  This document adds security descriptions to those\n  \
    \ encrypted and/or authenticated SDP messages through the new SDP\n   \"crypto\"\
    \ attribute, which provides the cryptographic parameters of a\n   media stream.\n\
    \   The \"crypto\" attribute can be adapted to any media transport, but its\n\
    \   precise definition is unique to a particular transport.\n   In Section 2,\
    \ we provide notational conventions followed by an\n   applicability statement\
    \ for the crypto attribute in Section 3.  In\n   Section 4, we introduce the general\
    \ SDP crypto attribute, and in\n   Section 5, we define how it is used with and\
    \ without the offer/answer\n   model.  In Section 6, we define the crypto attribute\
    \ details needed\n   for SRTP, and in Section 7, we define SRTP-specific use of\
    \ the\n   attribute with and without the offer/answer model.  Section 8 recites\n\
    \   security considerations, and Section 9 gives an Augmented-BNF grammar\n  \
    \ for the general crypto attribute as well as the SRTP-specific use of\n   the\
    \ crypto attribute.  IANA considerations are provided in Section\n   10.\n"
- title: 2.  Notational Conventions
  contents:
  - "2.  Notational Conventions\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHOULD\", \"SHOULD NOT\",\n   \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in\
    \ this document are to be\n   interpreted as described in [RFC2119].  The terminology\
    \ in this\n   document conforms to [RFC2828], \"Internet Security Glossary\".\n\
    \   n^r is exponentiation, where n is multiplied by itself r times; n and\n  \
    \ r are integers.  0..k is an integer range of all integers from 0\n   through\
    \ k, inclusive.\n   The terms 'transport' and 'media transport' are used to mean\n\
    \   'transport protocol' as defined in RFC 4566.\n   Explanatory notes are provided\
    \ in several places throughout the\n   document; these notes are indented three\
    \ spaces from the surrounding\n   text.\n"
- title: 3.  Applicability
  contents:
  - "3.  Applicability\n   RFC 4567 provides similar cryptographic key distribution\
    \ capabilities\n   and is intended for use when the signaling is to be confidential\n\
    \   and/or integrity-protected separately from the keying material.\n   In contrast,\
    \ this specification carries the keying material within\n   the SDP message, and\
    \ it is intended for use when the keying material\n   is protected along with\
    \ the signaling.  Implementations MUST employ\n   security mechanisms that provide\
    \ confidentiality and integrity for\n   the keying material.  When this specification\
    \ is used in the context\n   of SIP [RFC3261], the application SHOULD employ either\
    \ the SIPS URI\n   or S/MIME to provide protection for the SDP message and the\
    \ keying\n   material that it contains.  The use of transport layer or IP layer\n\
    \   security in lieu of the SIPS URI or S/MIME protection is NOT\n   RECOMMENDED\
    \ since the protection of the SDP message and the keying\n   material that it\
    \ contains cannot be ensured through all intermediate\n   entities such as SIP\
    \ proxies.\n"
- title: 4.  SDP "Crypto" Attribute and Parameters
  contents:
  - "4.  SDP \"Crypto\" Attribute and Parameters\n   A new media-level SDP attribute\
    \ called \"crypto\" describes the\n   cryptographic suite, key parameters, and\
    \ session parameters for the\n   preceding unicast media line.  The \"crypto\"\
    \ attribute MUST only\n   appear at the SDP media level (not at the session level).\
    \  The\n   \"crypto\" attribute follows the format (see Section 9.1 for the formal\n\
    \   ABNF grammar):\n      a=crypto:<tag> <crypto-suite> <key-params> [<session-params>]\n\
    \   The fields tag, crypto-suite, key-params, and session-params are\n   described\
    \ in the following sub-sections.  The values of each of these\n   fields is case-insensitive,\
    \ unless otherwise noted.  However,\n   implementers are encouraged to use the\
    \ actual case shown in this\n   document and any extensions to it.  Note that\
    \ per normal SDP rules,\n   the \"crypto\" attribute name itself is case-sensitive.\
    \  Below, we show\n   an example of the crypto attribute for the \"RTP/SAVP\"\
    \ transport,\n   i.e., the secure RTP extension to the Audio/Video Profile [RFC3711].\n\
    \   In the following, newlines are included for formatting reasons only:\n   \
    \   a=crypto:1 AES_CM_128_HMAC_SHA1_80\n      inline:PS1uQCVeeCFCanVmcjkpPywjNWhcYD0mXXtxaVBR|2^20|1:32\n\
    \   The crypto-suite is AES_CM_128_HMAC_SHA1_80, key-params is defined by\n  \
    \ the text starting with \"inline:\", and session-params is omitted.\n"
- title: 4.1.  Tag
  contents:
  - "4.1.  Tag\n   The tag is a decimal number used as an identifier for a particular\n\
    \   crypto attribute (see Section 9.1 for details); leading zeroes MUST\n   NOT\
    \ be used.  The tag MUST be unique among all crypto attributes for\n   a given\
    \ media line.  It is used with the offer/answer model to\n   determine which of\
    \ several offered crypto attributes were chosen by\n   the answerer (see Section\
    \ 5.1).\n   In the offer/answer model, the tag is a negotiated parameter.\n"
- title: 4.2.  Crypto-Suite
  contents:
  - "4.2.  Crypto-Suite\n   The crypto-suite field is an identifier that describes\
    \ the encryption\n   and authentication algorithms (e.g., AES_CM_128_HMAC_SHA1_80)\
    \ for the\n   transport in question (see Section 9.1 for details).  The possible\n\
    \   values for the crypto-suite parameter are defined within the context\n   of\
    \ the transport, i.e., each transport defines a separate namespace\n   for the\
    \ set of crypto-suites.  For example, the crypto-suite\n   \"AES_CM_128_HMAC_SHA1_80\"\
    \ defined within the context \"RTP/SAVP\"\n   transport applies to Secure RTP\
    \ only; the string may be reused for\n   another transport (e.g., \"RTP/SAVPF\"\
    \ [srtpf]), but a separate\n   definition would be needed.\n   In the offer/answer\
    \ model, the crypto-suite is a negotiated\n   parameter.\n"
- title: 4.3.  Key Parameters
  contents:
  - "4.3.  Key Parameters\n   The key-params field provides one or more sets of keying\
    \ material for\n   the crypto-suite in question.  The field consists of a method\n\
    \   indicator followed by a colon, and the actual keying information as\n   shown\
    \ below (the formal grammar is provided in Section 9.1):\n      key-params = <key-method>\
    \ \":\" <key-info>\n   Keying material might be provided by different means from\
    \ that for\n   key-params; however, this is out of scope.  Only one method is\n\
    \   defined in this document, namely, \"inline\", which indicates that the\n \
    \  actual keying material is provided in the key-info field itself.\n   There\
    \ is a single name space for the key-method, i.e., the key-method\n   is transport\
    \ independent.  New key-methods (e.g., use of a URL) may\n   be defined in a Standards-Track\
    \ RFC in the future.  Although the\n   key-method itself may be generic, the accompanying\
    \ key-info\n   definition is specific not only to the key-method, but also to\
    \ the\n   transport in question.  Key-info encodes keying material for a crypto\n\
    \   suite, which defines that keying material.  New key methods MUST be\n   registered\
    \ with the IANA according to the procedures defined in\n   Section 10.2.1.\n \
    \  Key-info is defined as a general octet string (see Section 9.1 for\n   details);\
    \ further transport and key-method specific syntax and\n   semantics MUST be provided\
    \ in a Standards-Track RFC for each\n   combination of transport and key-method\
    \ that uses it; definitions for\n   SRTP are provided in Section 6.  Note that\
    \ such definitions are\n   provided within the context of both a particular transport\
    \ (e.g.,\n   \"RTP/SAVP\") and a specific key-method (e.g., \"inline\").  IANA\
    \ will\n   register the list of supported key methods for each transport.\n  \
    \ When multiple keys are included in the key parameters, it MUST be\n   possible\
    \ to determine which of the keys is being used in a given\n   media packet by\
    \ a simple inspection of the media packet received; a\n   trial-and-error approach\
    \ between the possible keys MUST NOT be\n   performed.\n      For SRTP, this could\
    \ be achieved by use of Master Key Identifiers\n      (MKI) [RFC3711].  Use of\
    \ <\"From, \"To\"> values are not supported in\n      SRTP security descriptions\
    \ for reasons explained in Section 6.1,\n      below.\n   In the offer/answer\
    \ model, the key parameter is a declarative\n   parameter.\n"
- title: 4.4.  Session Parameters
  contents:
  - "4.4.  Session Parameters\n   Session parameters are specific to a given transport\
    \ and use of them\n   is OPTIONAL in the security descriptions framework, where\
    \ they are\n   just defined as general character strings.  If session parameters\
    \ are\n   to be used for a given transport, then transport-specific syntax and\n\
    \   semantics MUST be provided in a Standards-Track RFC; definitions for\n   SRTP\
    \ are provided in Section 6.\n   In the offer/answer model, session parameters\
    \ may be either\n   negotiated or declarative; the definition of specific session\n\
    \   parameters MUST indicate whether they are negotiated or declarative.\n   Negotiated\
    \ parameters apply to data sent in both directions, whereas\n   declarative parameters\
    \ apply only to media sent by the entity that\n   generated the SDP.  Thus, a\
    \ declarative parameter in an offer applies\n   to media sent by the offerer,\
    \ whereas a declarative parameter in an\n   answer applies to media sent by the\
    \ answerer.\n"
- title: 4.5.  Example
  contents:
  - "4.5.  Example\n   This example shows use of the crypto attribute for the \"RTP/SAVP\"\
    \n   media transport type (as defined in Section 5).  The \"a=crypto\" line\n\
    \   is actually one long line; it is shown as two lines due to page\n   formatting.\n\
    \      v=0\n      o=jdoe 2890844526 2890842807 IN IP4 10.47.16.5\n      s=SDP\
    \ Seminar\n      i=A Seminar on the session description protocol\n      u=http://www.example.com/seminars/sdp.pdf\n\
    \      e=j.doe@example.com (Jane Doe)\n      c=IN IP4 161.44.17.12/127\n     \
    \ t=2873397496 2873404696\n      m=video 51372 RTP/SAVP 31\n      a=crypto:1 AES_CM_128_HMAC_SHA1_80\n\
    \       inline:d0RmdmcmVCspeEc3QGZiNWpVLFJhQX1cfHAwJSoj|2^20|1:32\n      m=audio\
    \ 49170 RTP/SAVP 0\n      a=crypto:1 AES_CM_128_HMAC_SHA1_32\n       inline:NzB4d1BINUAvLEw6UzF3WSJ+PSdFcGdUJShpX1Zj|2^20|1:32\n\
    \      m=application 32416 udp wb\n      a=orient:portrait\n   This SDP message\
    \ describes three media streams, two of which use the\n   \"RTP/SAVP\" transport.\
    \  Each has a crypto attribute for the \"RTP/SAVP\"\n   transport.  These secure-RTP\
    \ specific descriptions are defined in\n   Section 6.\n"
- title: 5.  General Use of the crypto Attribute
  contents:
  - "5.  General Use of the crypto Attribute\n   In this section, we describe the\
    \ general use of the crypto attribute\n   outside of any transport or key-method\
    \ specific rules.\n"
- title: 5.1.  Use with Offer/Answer
  contents:
  - "5.1.  Use with Offer/Answer\n   The general offer/answer rules for the crypto\
    \ attribute are in\n   addition to the rules specified in RFC 3264, which MUST\
    \ be followed,\n   unless otherwise noted.  RFC 3264 defines operation for both\
    \ unicast\n   and multicast streams; the sections below describe operation for\n\
    \   two-party unicast streams only, since support for multicast streams\n   (and\
    \ multipoint unicast streams) is for further study.\n"
- title: 5.1.1.  Generating the Initial Offer - Unicast Streams
  contents:
  - "5.1.1.  Generating the Initial Offer - Unicast Streams\n   When generating an\
    \ initial offer for a unicast stream, there MUST be\n   one or more crypto attributes\
    \ present for each media stream for which\n   security is desired.  Each crypto\
    \ attribute for a given media stream\n   MUST contain a unique tag.\n   The ordering\
    \ of multiple \"a=crypto\" lines is significant: the most\n   preferred crypto\
    \ line is listed first.  Each crypto attribute\n   describes the crypto-suite,\
    \ key(s), and possibly session parameters\n   offered for the media stream.  In\
    \ general, a \"more preferred\"\n   crypto-suite SHOULD be cryptographically stronger\
    \ than a \"less\n   preferred\" crypto-suite.\n   The crypto-suite always applies\
    \ to media in the directions supported\n   by the media stream (e.g., send and\
    \ receive).  The key(s), however,\n   apply to data packets (e.g., SRTP and SRTCP\
    \ packets) that will be\n   sent by the same party that generated the SDP.  That\
    \ is, each\n   endpoint determines its own transmission keys and sends those keys,\n\
    \   in SDP, to the other endpoint.\n      This is done for consistency.  Also,\
    \ in the case of SRTP, for\n      example, secure RTCP will still be flowing in\
    \ both the send and\n      receive direction for a unidirectional stream.\n  \
    \ The inline parameter conveys the keying material used by an endpoint\n   to\
    \ encrypt the media streams transmitted by that endpoint.  The same\n   keying\
    \ material is used by the recipient to decrypt those streams.\n   The offer may\
    \ include session parameters.  There are no general offer\n   rules for the session\
    \ parameters; instead, specific rules may be\n   provided as part of the transport-specific\
    \ definitions of any session\n   parameters.\n   When issuing an offer, the offerer\
    \ MUST be prepared to support media\n   security in accordance with any of the\
    \ crypto attributes included in\n   the offer.  There are, however, two problems\
    \ associated with this.\n   First of all, the offerer does not know which key\
    \ the answerer will\n   be using for media sent to the offerer.  Second, the offerer\
    \ may not\n   be able to deduce which of the offered crypto attributes were\n\
    \   accepted.  Since media may arrive prior to the answer, delay or\n   clipping\
    \ can occur.  If this is unacceptable to the offerer, the\n   offerer SHOULD use\
    \ a mechanism outside the scope of this document to\n   prevent the above problem.\n\
    \      For example, in SIP [RFC3261], a \"security\" precondition as\n      defined\
    \ in [sprecon] could solve the above problem.\n"
- title: 5.1.2.  Generating the Initial Answer - Unicast Streams
  contents:
  - "5.1.2.  Generating the Initial Answer - Unicast Streams\n   When the answerer\
    \ receives the initial offer with one or more crypto\n   attributes for a given\
    \ unicast media stream, the answerer MUST either\n   accept exactly one of the\
    \ offered crypto attributes, or the offered\n   stream MUST be rejected.\n   \
    \   If the answerer wishes to indicate support for other crypto\n      attributes,\
    \ those can be listed by use of the SDP Simple\n      Capability Declaration [RFC3407]\
    \ extensions.\n   Only crypto attributes that are valid can be accepted; valid\n\
    \   attributes do not violate any of the general rules defined for\n   security\
    \ descriptions, nor any specific rules defined for the\n   transport and key-method\
    \ in question.  When selecting one of the\n   valid crypto attributes, the answerer\
    \ SHOULD select the most\n   preferred crypto attribute it can support, i.e.,\
    \ the first valid\n   supported crypto attribute in the list, according to the\
    \ answerer's\n   capabilities and security policies.\n   If there are one or more\
    \ crypto attributes in the offer, but none of\n   them are valid or none of the\
    \ valid ones are supported, the offered\n   media stream MUST be rejected.\n \
    \  When an offered crypto attribute is accepted, the crypto attribute in\n   the\
    \ answer MUST contain the following:\n   *  The tag and crypto-suite from the\
    \ accepted crypto attribute in the\n      offer (the same crypto-suite MUST be\
    \ used in the send and receive\n      direction).\n   *  The key(s) the answerer\
    \ will be using for media sent to the\n      offerer.  Note that a key MUST be\
    \ provided, irrespective of any\n      direction attributes in the offer or answer.\n\
    \   Furthermore, any session parameters that are negotiated MUST be\n   included\
    \ in the answer.  Declarative session parameters provided by\n   the offerer are\
    \ not included in the answer; however, the answerer may\n   provide its own set\
    \ of declarative session parameters.\n   Once the answerer has accepted one of\
    \ the offered crypto attributes,\n   the answerer MAY begin sending media to the\
    \ offerer in accordance\n   with the selected crypto attribute.  Note, however,\
    \ that the offerer\n   may not be able to process such media packets correctly\
    \ until the\n   answer has been received.\n"
- title: 5.1.3.  Processing of the Initial Answer - Unicast Streams
  contents:
  - "5.1.3.  Processing of the Initial Answer - Unicast Streams\n   When the offerer\
    \ receives the answer, the offerer MUST verify that\n   one of the initially offered\
    \ crypto suites and its accompanying tag\n   were accepted and echoed in the answer.\
    \  Also, the answer MUST\n   include one or more keys, which will be used for\
    \ media sent from the\n   answerer to the offerer.\n   If the offer contained\
    \ any mandatory negotiated session parameters\n   (see Section 6.3.7), the offerer\
    \ MUST verify that said parameters are\n   included in the answer and support\
    \ them.  If the answer contains any\n   mandatory declarative session parameters,\
    \ the offerer MUST be able to\n   support those.\n   If any of the above fails,\
    \ the negotiation MUST fail.\n"
- title: 5.1.4.  Modifying the Session
  contents:
  - "5.1.4.  Modifying the Session\n   Once a media stream has been established, it\
    \ MAY be modified at any\n   time, as described in RFC 3264, Section 8.  Such\
    \ a modification MAY\n   be triggered by the security service, e.g., in order\
    \ to perform a\n   re-keying or change the crypto-suite.  If media stream security\
    \ using\n   the general security descriptions defined here is still desired, the\n\
    \   crypto attribute MUST be included in these new offer/answer\n   exchanges.\
    \  The procedures are similar to those defined in Section\n   5.1.1, 5.1.2, and\
    \ 5.1.3 of this document, subject to the\n   considerations provided in RFC 3264,\
    \ Section 8.\n"
- title: 5.2.  Use Outside Offer/Answer
  contents:
  - "5.2.  Use Outside Offer/Answer\n   The crypto attribute can also be used outside\
    \ the context of\n   offer/answer where there is no negotiation of the crypto\
    \ suite,\n   cryptographic key, or session parameters.  In this case, the sender\n\
    \   determines security parameters for the stream.  Since there is no\n   negotiation\
    \ mechanism, the sender MUST include exactly one crypto\n   attribute, and the\
    \ receiver MUST either accept it or SHOULD NOT\n   receive the associated stream.\
    \  The sender SHOULD select the security\n   description that it deems most secure\
    \ for its purposes.\n"
- title: 5.3.  General Backwards Compatibility Considerations
  contents:
  - "5.3.  General Backwards Compatibility Considerations\n   In the offer/answer\
    \ model, it is possible that the answerer supports\n   a given secure transport\
    \ (e.g., \"RTP/SAVP\") and accepts the offered\n   media stream, but that the\
    \ answerer does not support the crypto\n   attribute defined in this document\
    \ and hence ignores it.  The offerer\n   can recognize this situation by seeing\
    \ an accepted media stream in\n   the answer that does not include a crypto line.\
    \  In that case, the\n   security negotiation defined here MUST fail.\n   Similar\
    \ issues exist when security descriptions are used outside the\n   offer/answer\
    \ model.  But the source of a non-negotiated security\n   description has no indication\
    \ that the receiver has ignored the\n   crypto attribute.\n"
- title: 6.  SRTP Security Descriptions
  contents:
  - "6.  SRTP Security Descriptions\n   In this section, we provide definitions for\
    \ security descriptions for\n   SRTP media streams.  In the next section, we define\
    \ how to use SRTP\n   security descriptions with and without the offer/answer\
    \ model.\n   SRTP security descriptions MUST only be used with the SRTP transport\n\
    \   (e.g., \"RTP/SAVP\" or \"RTP/SAVPF\").  The following specifies security\n\
    \   descriptions for the \"RTP/SAVP\" profile, defined in [RFC3711].\n   However,\
    \ it is expected that other secure RTP profiles (e.g.,\n   \"RTP/SAVPF\") can\
    \ use the same descriptions, which are in accordance\n   with the SRTP protocol\
    \ specification [RFC3711].\n   There is no assurance that an endpoint is capable\
    \ of configuring its\n   SRTP service with a particular crypto attribute parameter,\
    \ but SRTP\n   guarantees minimal interoperability among SRTP endpoints through\
    \ the\n   default SRTP parameters [RFC3711].  More capable SRTP endpoints\n  \
    \ support a variety of parameter values beyond the SRTP defaults, and\n   these\
    \ values can be configured by the SRTP security descriptions\n   defined here.\
    \  An endpoint that does not support the crypto attribute\n   will ignore it according\
    \ to the SDP.  Such an endpoint will not\n   correctly process the particular\
    \ media stream.  By using the\n   Offer/Answer model, the offerer and answerer\
    \ can negotiate the crypto\n   parameters to be used before commencement of the\
    \ multimedia session\n   (see Section 7.1).\n   There are over twenty cryptographic\
    \ parameters listed in the SRTP\n   specification.  Many of these parameters have\
    \ fixed values for\n   particular cryptographic transforms.  At the time of session\n\
    \   establishment, however, there is usually no need to provide unique\n   settings\
    \ for many of the SRTP parameters, such as salt length and\n   pseudo-random function\
    \ (PRF).  Thus, it is possible to simplify the\n   list of parameters by defining\
    \ \"cryptographic suites\" that fix a set\n   of SRTP parameter values for the\
    \ security session.  This approach is\n   followed by the SRTP security descriptions,\
    \ which uses the general\n   security description parameters as follows:\n   \
    \   * crypto-suite:     Identifies the encryption and authentication\n       \
    \                   transforms.\n      * key parameter:    SRTP keying material\
    \ and parameters\n      * session parameters:    The following parameters are\
    \ defined:\n           - KDR:    The SRTP Key Derivation Rate is the rate at which\
    \ a\n                     pseudo-random function is applied to a master key.\n\
    \           - UNENCRYPTED_SRTP:      SRTP messages are not encrypted.\n      \
    \     - UNENCRYPTED_SRTCP:     SRTCP messages are not encrypted.\n           -\
    \ UNAUTHENTICATED_SRTP:  SRTP messages are not authenticated.\n           - FEC_ORDER:\
    \   Order of forward error correction (FEC)\n                          relative\
    \ to SRTP services.\n           - FEC_KEY:     Master Key for FEC when the FEC\
    \ stream is sent\n                          to a separate address and/or port.\n\
    \           - WSH:         Window Size Hint.\n           - Extensions:  Extension\
    \ parameters can be defined.\n   Please refer to the SRTP specification for a\
    \ complete list of\n   parameters and their descriptions [Section 8.2, srtp].\
    \  Regarding the\n   UNENCRYPTED_SRTCP parameter, offerers and answerers of SDP\
    \ security\n   descriptions MUST NOT use the SRTCP E-bit to override\n   UNENCRYPTED_SRTCP\
    \ or the default, which is to encrypt all SRTCP\n   messages (see Section 6.3.2).\
    \  The key parameter, the crypto-suite,\n   and the session parameters shown above\
    \ are described in detail in the\n   following subsections.\n"
- title: 6.1.  SRTP Key Parameter
  contents:
  - "6.1.  SRTP Key Parameter\n   SRTP security descriptions define the use of the\
    \ \"inline\" key method\n   as described in the following.  Use of any other keying\
    \ method (e.g.,\n   URL) for SRTP security descriptions is for further study.\n\
    \   The \"inline\" type of key contains the keying material (master key and\n\
    \   salt) and all policy related to that master key, including how long\n   it\
    \ can be used (lifetime) and whether it uses a master key identifier\n   (MKI)\
    \ to associate an incoming SRTP packet with a particular master\n   key.  Compliant\
    \ implementations obey the policies associated with a\n   master key and MUST\
    \ NOT accept incoming packets that violate the\n   policy (e.g., after the master\
    \ key lifetime has expired).\n   The key parameter contains one or more cryptographic\
    \ master keys,\n   each of which MUST be a unique cryptographically random [RFC1750]\n\
    \   value with respect to other master keys in the entire SDP message\n   (i.e.,\
    \ including master keys for other streams).  Each key follows\n   the format (the\
    \ formal definition is provided in Section 9.2):\n      \"inline:\" <key||salt>\
    \ [\"|\" lifetime] [\"|\" MKI \":\" length]\n      key||salt      concatenated\
    \ master key and salt, base64 encoded\n                     (see [RFC3548], Section\
    \ 3)\n      lifetime       master key lifetime (max number of SRTP or SRTCP\n\
    \                     packets using this master key)\n      MKI:length     MKI\
    \ and length of the MKI field in SRTP packets\n   The following definition provides\
    \ an example for\n   AES_CM_128_HMAC_SHA1_80:\n      inline:d0RmdmcmVCspeEc3QGZiNWpVLFJhQX1cfHAwJSoj|2^20|1:4\n\
    \   The first field (\"d0RmdmcmVCspeEc3QGZiNWpVLFJhQX1cfHAwJSoj\") of the\n  \
    \ parameter is the cryptographic master key appended with the master\n   salt;\
    \ the two are first concatenated and then base64 encoded.  The\n   length of the\
    \ concatenated key and salt is determined by the crypto-\n   suite for which the\
    \ key applies.  If the length (after being decoded\n   from base64) does not match\
    \ that specified for the crypto-suite, the\n   crypto attribute in question MUST\
    \ be considered invalid.  Each master\n   key and salt MUST be a cryptographically\
    \ random number and MUST be\n   unique to the entire SDP message.  When base64\
    \ decoding the key and\n   salt, padding characters (i.e., one or two \"=\" at\
    \ the end of the\n   base64-encoded data) are discarded (see [RFC3548] for details).\n\
    \   Base64 encoding assumes that the base64 encoding input is an integral\n  \
    \ number of octets.  If a given crypto-suite requires the use of a\n   concatenated\
    \ key and salt with a length that is not an integral\n   number of octets, said\
    \ crypto-suite MUST define a padding scheme that\n   results in the base64 input\
    \ being an integral number of octets.  For\n   example, if the length defined\
    \ were 250 bits, then 6 padding bits\n   would be needed, which could be defined\
    \ to be the last 6 bits in a\n   256 bit input.\n   The second field is the OPTIONAL\
    \ lifetime of the master key as\n   measured in maximum number of SRTP or SRTCP\
    \ packets using that master\n   key (i.e., the number of SRTP packets and the\
    \ number of SRTCP packets\n   each have to be less than the lifetime).  The lifetime\
    \ value MAY be\n   written as a non-zero, positive decimal integer or as a power\
    \ of 2\n   (see the grammar in Section 9.2 for details); leading zeroes MUST NOT\n\
    \   be used.  The \"lifetime\" value MUST NOT exceed the maximum packet\n   lifetime\
    \ for the crypto-suite.  If the lifetime is too large or\n   otherwise invalid,\
    \ then the entire crypto attribute MUST be\n   considered invalid.  The default\
    \ MAY be implicitly signaled by\n   omitting the lifetime (note that the lifetime\
    \ field never includes a\n   colon, whereas the third field always does).  This\
    \ is convenient when\n   the SRTP cryptographic key lifetime is the default value.\
    \  As a\n   shortcut to avoid long decimal values, the syntax of the lifetime\n\
    \   allows using the literal \"2^\", which indicates \"two to the power of\".\n\
    \   The example above shows a case where the lifetime is specified as\n   2^20.\
    \  The following example, which is for the\n   AES_CM_128_HMAC_SHA1_80 crypto-suite,\
    \ has a default for the lifetime\n   field, which means that SRTP's and SRTCP's\
    \ default values will be\n   used (see [RFC3711]):\n      inline:YUJDZGVmZ2hpSktMbW9QUXJzVHVWd3l6MTIzNDU2|1066:4\n\
    \   The example shows a 30-octet key and concatenated salt that is base64\n  \
    \ encoded:  The 30-octet key/salt concatenation is expanded to 40\n   characters\
    \ (octets) by the three-in-four encoding of base64.\n   The third field, which\
    \ is also OPTIONAL, is the Master Key Identifier\n   (MKI) and its byte length.\n\
    \   \"MKI\" is the master key identifier associated with the SRTP master\n   key.\
    \  The MKI is here defined as a positive decimal integer that is\n   encoded as\
    \ a big-endian integer in the actual SRTP packets; leading\n   zeroes MUST NOT\
    \ be used in the integer representation.  If the MKI is\n   given, then the length\
    \ of the MKI MUST also be given and separated\n   from the MKI by a colon (\"\
    :\").  The MKI length is the size of the MKI\n   field in the SRTP packet, specified\
    \ in bytes as a decimal integer;\n   leading zeroes MUST NOT be used.  If the\
    \ MKI length is not given or\n   its value exceeds 128 (bytes), then the entire\
    \ crypto attribute MUST\n   be considered invalid.  The substring \"1:4\" in the\
    \ first example\n   assigns to the key a master key identifier of 1 that is 4\
    \ bytes long,\n   and the second example assigns a 4-byte master key identifier\
    \ of 1066\n   to the key.  One or more master keys with their associated MKI can\
    \ be\n   initially defined, and then later updated, or deleted and new ones\n\
    \   defined.\n   SRTP offers a second feature for specifying the lifetime of a\
    \ master\n   key in terms of two values, called \"From\" and \"To,\" which are\
    \ defined\n   on the SRTP sequence number space [RFC3711].  This SRTP Security\n\
    \   Descriptions specification, however, does not support the <\"From\",\n   \"\
    To\"> feature since the lifetime of an AES master key is 2^48 SRTP\n   packets,\
    \ which means that there is no cryptographic reason to replace\n   a master key\
    \ for practical point-to-point applications.  For this\n   reason, there is no\
    \ need to support two means for signaling key\n   update.  The MKI is chosen over\
    \ <\"From\", \"To\"> by this specification\n   for the very few applications that\
    \ need it since the MKI feature is\n   simpler (though the MKI adds additional\
    \ bytes to each packet, whereas\n   <\"From\", \"To\"> does not).\n   As mentioned\
    \ above, the key parameter can contain one or more master\n   keys.  When the\
    \ key parameter contains more than one master key, all\n   the master keys in\
    \ that key parameter MUST include an MKI value.\n   When using the MKI, the MKI\
    \ length MUST be the same for all keys in a\n   given crypto attribute.\n"
- title: 6.2.  Crypto-Suites
  contents:
  - "6.2.  Crypto-Suites\n   The SRTP crypto-suites define the encryption and authentication\n\
    \   transforms to be used for the SRTP media stream.  The SRTP\n   specification\
    \ has defined three crypto-suites, which are described\n   further in the following\
    \ subsections in the context of the SRTP\n   security descriptions.  The table\
    \ below provides an overview of the\n   crypto-suites and their parameters:\n\
    \   +---------------------+-------------+--------------+---------------+\n   |\
    \                     |AES_CM_128_  | AES_CM_128_  | F8_128_       |\n   |   \
    \                  |HMAC_SHA1_80 | HMAC_SHA1_32 |  HMAC_SHA1_80 |\n   +---------------------+-------------+--------------+---------------+\n\
    \   | Master key length   |   128 bits  |   128 bits   |   128 bits    |\n   |\
    \ Master salt length  |   112 bits  |   112 bits   |   112 bits    |\n   | SRTP\
    \ lifetime       | 2^48 packets| 2^48 packets | 2^48 packets  |\n   | SRTCP lifetime\
    \      | 2^31 packets| 2^31 packets | 2^31 packets  |\n   | Cipher           \
    \   | AES Counter | AES Counter  | AES F8 Mode   |\n   |                     |\
    \ Mode        | Mode         |               |\n   | Encryption key      |   128\
    \ bits  |   128 bits   |   128 bits    |\n   | MAC                 |  HMAC-SHA1\
    \  |  HMAC-SHA1   |  HMAC-SHA1    |\n   | SRTP auth. tag      |    80 bits  |\
    \    32 bits   |    80 bits    |\n   | SRTCP auth. tag     |    80 bits  |   \
    \ 80 bits   |    80 bits    |\n   | SRTP auth. key len. |   160 bits  |   160\
    \ bits   |   160 bits    |\n   | SRTCP auth. key len.|   160 bits  |   160 bits\
    \   |   160 bits    |\n   +---------------------+-------------+--------------+---------------+\n"
- title: 6.2.1.  AES_CM_128_HMAC_SHA1_80
  contents:
  - "6.2.1.  AES_CM_128_HMAC_SHA1_80\n   AES_CM_128_HMAC_SHA1_80 is the SRTP default\
    \ AES Counter Mode cipher\n   and HMAC-SHA1 message authentication with an 80-bit\
    \ authentication\n   tag.  The master-key length is 128 bits and has a default\
    \ lifetime of\n   a maximum of 2^48 SRTP packets or 2^31 SRTCP packets, whichever\
    \ comes\n   first [Page 39, srtp].\n      SRTP allows 2^48 SRTP packets or 2^31\
    \ SRTCP packets, whichever\n      comes first.  However, it is RECOMMENDED that\
    \ automated key\n      management allow easy and efficient rekeying at intervals\
    \ far\n      smaller than 2^31 packets given today's media rates or even HDTV\n\
    \      media rates.\n   The SRTP and SRTCP encryption key lengths are 128 bits.\
    \  The SRTP and\n   SRTCP authentication key lengths are 160 bits (see Security\n\
    \   Considerations in Section 8).  The master salt value is 112 bits in\n   length\
    \ and the session salt value is 112 bits in length.  The\n   pseudo-random function\
    \ (PRF) is the default SRTP pseudo-random\n   function that uses AES Counter Mode\
    \ with a 128-bit key length.\n   The length of the base64-decoded key and salt\
    \ value for this crypto-\n   suite MUST be 30 characters (i.e., 240 bits); otherwise,\
    \ the crypto\n   attribute is considered invalid.\n"
- title: 6.2.2.  AES_CM_128_HMAC_SHA1_32
  contents:
  - "6.2.2.  AES_CM_128_HMAC_SHA1_32\n   This crypto-suite is identical to AES_CM_128_HMAC_SHA1_80\
    \ except that\n   the authentication tag is 32 bits.\n   The length of the base64-decoded\
    \ key and salt value for this crypto-\n   suite MUST be 30 octets i.e., 240 bits;\
    \ otherwise, the crypto\n   attribute is considered invalid.\n"
- title: 6.2.3.  F8_128_HMAC_SHA1_80
  contents:
  - "6.2.3.  F8_128_HMAC_SHA1_80\n   This crypto-suite is identical to AES_CM_128_HMAC_SHA1_80\
    \ except that\n   the cipher is F8 [RFC3711].\n   The length of the base64-decoded\
    \ key and salt value for this crypto-\n   suite MUST be 30 octets, i.e., 240 bits;\
    \ otherwise the crypto\n   attribute is considered invalid.\n"
- title: 6.2.4.  Adding New Crypto-Suite Definitions
  contents:
  - "6.2.4.  Adding New Crypto-Suite Definitions\n   If new transforms are added to\
    \ SRTP, new definitions for those\n   transforms SHOULD be given for the SRTP\
    \ security descriptions and\n   published in a Standards-Track RFC.  Sections\
    \ 6.2.1 through 6.2.3\n   illustrate how to define crypto-suite values for particular\n\
    \   cryptographic transforms.  Any new crypto-suites MUST be registered\n   with\
    \ IANA following the procedures in Section 10.\n"
- title: 6.3.  Session Parameters
  contents:
  - "6.3.  Session Parameters\n   SRTP security descriptions define a set of \"session\"\
    \ parameters,\n   which OPTIONALLY may be used to override SRTP session defaults\
    \ for\n   the SRTP and SRTCP streams.  These parameters configure an RTP\n   session\
    \ for SRTP services.  The session parameters provide session-\n   specific information\
    \ to establish the SRTP cryptographic context.\n"
- title: 6.3.1.  KDR=n
  contents:
  - "6.3.1.  KDR=n\n   KDR specifies the Key Derivation Rate, as described in Section\
    \ 4.3.1\n   of [RFC3711].\n   The value n MUST be a decimal integer in the set\
    \ {1,2,...,24}, which\n   denotes a power of 2 from 2^1 to 2^24, inclusive; leading\
    \ zeroes MUST\n   NOT be used.  The SRTP key derivation rate controls how frequently\
    \ a\n   new session key is derived from an SRTP master key(s) [RFC3711] given\n\
    \   in the declaration.  When the key derivation rate is not specified\n   (i.e.,\
    \ the KDR parameter is omitted), a single initial key derivation\n   is performed\
    \ [RFC3711].\n   In the offer/answer model, KDR is a declarative parameter.\n"
- title: 6.3.2.  UNENCRYPTED_SRTCP and UNENCRYPTED_SRTP
  contents:
  - "6.3.2.  UNENCRYPTED_SRTCP and UNENCRYPTED_SRTP\n   SRTP and SRTCP packet payloads\
    \ are encrypted by default.  The\n   UNENCRYPTED_SRTCP and UNENCRYPTED_SRTP session\
    \ parameters modify the\n   default behavior of the crypto-suites with which they\
    \ are used:\n   *  UNENCRYPTED_SRTCP signals that the SRTCP packet payloads are\
    \ not\n      encrypted.\n   *  UNENCRYPTED_SRTP signals that the SRTP packet payloads\
    \ are not\n      encrypted.\n   In the offer/answer model, these parameters are\
    \ negotiated.  If\n   UNENCRYPTED_SRTCP is signaled for the session, then the\
    \ SRTCP E bit\n   MUST be clear (0) in all SRTCP messages.  If the default is\
    \ used, all\n   SRTCP messages are encrypted, and the E bit MUST be set (1) on\
    \ all\n   SRTCP messages.\n"
- title: 6.3.3.  UNAUTHENTICATED_SRTP
  contents:
  - "6.3.3.  UNAUTHENTICATED_SRTP\n   SRTP and SRTCP packet payloads are authenticated\
    \ by default.  The\n   UNAUTHENTICATED_SRTP session parameter signals that SRTP\
    \ messages are\n   not authenticated.  Use of UNAUTHENTICATED_SRTP is NOT RECOMMENDED\n\
    \   (see Security Considerations).\n      The SRTP specification requires use\
    \ of message authentication for\n      SRTCP, but not for SRTP [RFC3711].\n  \
    \ In the offer/answer model, this parameter is negotiated.\n"
- title: 6.3.4.  FEC_ORDER=order
  contents:
  - "6.3.4.  FEC_ORDER=order\n   FEC_ORDER signals the use of forward error correction\
    \ for the RTP\n   packets [RFC2733].  The forward error correction values for\
    \ \"order\"\n   are FEC_SRTP or SRTP_FEC.  FEC_SRTP signals that FEC is applied\n\
    \   before SRTP processing by the sender of the SRTP media and after SRTP\n  \
    \ processing by the receiver of the SRTP media; FEC_SRTP is the\n   default. \
    \ SRTP_FEC is the reverse processing.\n   In the offer/answer model, FEC_ORDER\
    \ is a declarative parameter.\n"
- title: 6.3.5.  FEC_KEY=key-params
  contents:
  - "6.3.5.  FEC_KEY=key-params\n   FEC_KEY signals the use of separate master key(s)\
    \ for a Forward Error\n   Correction (FEC) stream.  The master key(s) are specified\
    \ with the\n   exact same format as the SRTP Key Parameter defined in Section\
    \ 6.1,\n   and the semantic rules are the same - in particular, the master\n \
    \  key(s) MUST be different from all other master key(s) in the SDP.  An\n   FEC_KEY\
    \ MUST be specified when the FEC stream is sent to a different\n   IP-address\
    \ and/or port than the media stream to which it applies\n   (i.e., the \"m=\"\
    \ line), e.g., as described in RFC 2733, Section 11.1.\n   When an FEC stream\
    \ is sent to the same IP-address and port as the\n   media stream to which it\
    \ applies, an FEC_KEY MUST NOT be specified.\n   If an FEC_KEY is specified in\
    \ this latter case, the crypto attribute\n   in question MUST be considered invalid.\n\
    \   In the offer/answer model, FEC_KEY is a declarative parameter.\n"
- title: 6.3.6.  Window Size Hint (WSH)
  contents:
  - "6.3.6.  Window Size Hint (WSH)\n   SRTP defines the SRTP-WINDOW-SIZE [RFC3711,\
    \ Section 3.3.2] parameter\n   to protect against replay attacks.  The minimum\
    \ value is 64\n   [RFC3711]; however, this value may be considered too low for\
    \ some\n   applications (e.g., video).\n   The Window Size Hint (WSH) session\
    \ parameter provides a hint for how\n   big this window should be to work satisfactorily\
    \ (e.g., based on\n   sender knowledge of the number of packets per second). \
    \ However,\n   there might be enough information given in SDP attributes like\n\
    \   \"a=maxprate\" [maxprate] and the bandwidth modifiers to allow a\n   receiver\
    \ to derive the parameter satisfactorily.  Consequently, this\n   value is only\
    \ considered a hint to the receiver of the SDP that MAY\n   choose to ignore the\
    \ value provided.  The value is a decimal integer;\n   leading zeroes MUST NOT\
    \ be used.\n   In the offer/answer model, WSH is a declarative parameter.\n"
- title: 6.3.7.  Defining New SRTP Session Parameters
  contents:
  - "6.3.7.  Defining New SRTP Session Parameters\n   New SRTP session parameters\
    \ for the SRTP security descriptions can be\n   defined in a Standards-Track RFC\
    \ and registered with IANA according\n   to the registration procedures defined\
    \ in Section 10.\n   New SRTP session parameters are by default mandatory.  A\
    \ newly\n   defined SRTP session parameter that is prefixed with the dash\n  \
    \ character (\"-\"), however, is considered optional and MAY be ignored.\n   If\
    \ an SDP crypto attribute is received with an unknown session\n   parameter that\
    \ is not prefixed with a \"-\" character, that crypto\n   attribute MUST be considered\
    \ invalid.\n"
- title: 6.4.  SRTP Crypto Context Initialization
  contents:
  - "6.4.  SRTP Crypto Context Initialization\n   In addition to the various SRTP\
    \ parameters defined above, there are\n   three pieces of information that are\
    \ critical to the operation of the\n   default SRTP ciphers:\n   * SSRC:     Synchronization\
    \ source\n   * ROC:      Roll-over counter for a given SSRC\n   * SEQ:      Sequence\
    \ number for a given SSRC\n   In a unicast session, as defined here, there are\
    \ three constraints on\n   these values.\n   The first constraint is on the SSRC,\
    \ which makes an SRTP keystream\n   unique from other participants.  As explained\
    \ in SRTP, the keystream\n   MUST NOT be reused on two or more different pieces\
    \ of plaintext.\n   Keystream reuse makes the ciphertext vulnerable to cryptanalysis.\n\
    \   One vulnerability is that known-plaintext fields in one stream can\n   expose\
    \ portions of the reused keystream, and this could further\n   expose more plaintext\
    \ in other streams.  Since all current SRTP\n   encryption transforms use keystreams,\
    \ key sharing is a general\n   problem [RFC3711].  SRTP mitigates this problem\
    \ by including the SSRC\n   of the sender in the keystream.  But SRTP does not\
    \ solve this problem\n   in its entirety because the Real-time Transport Protocol\
    \ has SSRC\n   collisions, which although very rare [RFC3550] are quite possible.\n\
    \   During a collision, two or more SSRCs that share a master key will\n   have\
    \ identical keystreams for overlapping portions of the RTP\n   sequence number\
    \ space.  SRTP Security Descriptions avoid keystream\n   reuse by making unique\
    \ master keys REQUIRED for the sender and\n   receiver of the security description.\
    \  Thus, the first constraint is\n   satisfied.\n      Also note that there is\
    \ a second problem with SSRC collisions: the\n      SSRC is used to identify the\
    \ crypto context and thereby the\n      cipher, key, ROC, etc. to process incoming\
    \ packets.  In case of\n      SSRC collisions, crypto context identification becomes\
    \ ambiguous\n      and correct packet processing may not occur.  Furthermore,\
    \ if an\n      RTCP BYE packet is to be sent for a colliding SSRC, that packet\n\
    \      may also have to be secured.  In a (unicast) point-to-multipoint\n    \
    \  scenario, this can be problematic for the same reasons, i.e., it\n      is\
    \ not known which of the possible crypto contexts to use.  Note\n      that these\
    \ problems are not unique to the SDP security\n      descriptions; any use of\
    \ SRTP needs to consider them.\n   The second constraint is that the ROC MUST\
    \ be zero at the time that\n   each SSRC commences sending packets.  Thus, there\
    \ is no concept of a\n   \"late joiner\" in SRTP security descriptions, which\
    \ are constrained to\n   be unicast and pairwise.  The ROC and SEQ form a \"packet\
    \ index\" in\n   the default SRTP transforms and the ROC is consistently set to\
    \ zero\n   at session commencement, according to this document.\n   The third\
    \ constraint is that the initial value of SEQ SHOULD be\n   chosen to be within\
    \ the range of 0..2^15-1; this avoids an ambiguity\n   when packets are lost at\
    \ the start of the session.  If it is at the\n   start of a session, an SSRC source\
    \ might randomly select a high\n   sequence-number value and put the receiver\
    \ in an ambiguous situation:\n   if initial packets are lost in transit up to\
    \ the point that the\n   sequence number wraps (i.e., exceeds 2^16-1), then the\
    \ receiver might\n   not recognize that its ROC needs to be incremented.  By restricting\n\
    \   the initial SEQ to the range of 0..2^15-1, SRTP packet-index\n   determination\
    \ will find the correct ROC value, unless all the first\n   2^15 packets are lost\
    \ (which seems, if not impossible, rather\n   unlikely).  See Section 3.3.1 of\
    \ the SRTP specification regarding\n   packet-index determination [RFC3711].\n"
- title: 6.4.1.  Late Binding of One or More SSRCs to a Crypto Context
  contents:
  - "6.4.1.  Late Binding of One or More SSRCs to a Crypto Context\n   The packet\
    \ index, therefore, depends on the SSRC, the SEQ of an\n   incoming packet, and\
    \ the ROC, which is an SRTP crypto context\n   variable.  Thus, SRTP has a big\
    \ security dependency on SSRC\n   uniqueness.\n   Given the above constraints,\
    \ unicast SRTP crypto contexts can be\n   established without the need to negotiate\
    \ SSRC values in the SRTP\n   security descriptions.  Instead, an approach called\
    \ \"late binding\" is\n   RECOMMENDED by this specification.  When a packet arrives,\
    \ the SSRC\n   that is contained in it can be bound to the crypto context at the\n\
    \   time of session commencement (i.e., SRTP packet arrival) rather than\n   at\
    \ the time of session signaling (i.e., receipt of an SDP).  With the\n   arrival\
    \ of the packet containing the SSRC, all the data items needed\n   for the SRTP\
    \ crypto context are held by the receiver.  (Note that the\n   ROC value by definition\
    \ is zero; if non-zero values were to be\n   supported, additional signaling would\
    \ be required.)  In other words,\n   the crypto context for a secure RTP session\
    \ using late binding is\n   initially identified by the SDP as\n      <*, address,\
    \ port>\n   where '*' is a wildcard SSRC, \"address\" is the local receive address\n\
    \   from the \"c=\" line, and \"port\" is the local receive port from the\n  \
    \ \"m=\" line.  When the first packet arrives with ssrcX in its SSRC\n   field,\
    \ the crypto context\n      <ssrcX, address, port>\n   is instantiated subject\
    \ to the following constraints:\n   *  Media packets are authenticated: authentication\
    \ MUST succeed;\n      otherwise, the crypto context is not instantiated.\n  \
    \ *  Media packets are not authenticated: crypto context is\n      automatically\
    \ instantiated.\n   Note that use of late binding when there is no authentication\
    \ of the\n   SRTP media packets is subject to numerous security attacks, and that\n\
    \   consequently it is NOT RECOMMENDED (of course, this can be said for\n   unauthenticated\
    \ SRTP in general).\n      Note that use of late binding without authentication\
    \ will result\n      in the creation of local state as a result of receiving a\
    \ packet\n      from any unknown SSRC.  UNAUTHENTICATED_SRTP, therefore, is NOT\n\
    \      RECOMMENDED because it invites easy denial-of-service attack.  In\n   \
    \   contrast, late binding with authentication does not suffer from\n      this\
    \ weakness.\n"
- title: 6.4.2.  Sharing Cryptographic Contexts among Sessions or SSRCs
  contents:
  - "6.4.2.  Sharing Cryptographic Contexts among Sessions or SSRCs\n   With the constraints\
    \ and procedures described above, it is not\n   necessary to explicitly signal\
    \ the SSRC, ROC, and SEQ for a unicast\n   RTP session.  So there are no a=crypto\
    \ parameters for signaling SSRC,\n   ROC, or SEQ.  Thus, multiple SSRCs from the\
    \ same entity will share\n   a=crypto parameters when late binding is used.  Multiple\
    \ SSRCs from\n   the same entity arise due to either multiple sources (microphones,\n\
    \   cameras, etc.) or RTP payloads requiring SSRC multiplexing within\n   that\
    \ same session.  SDP also allows multiple RTP sessions to be\n   defined in the\
    \ same media description (\"m=\"); these RTP sessions will\n   also share the\
    \ a=crypto parameters.  An application that uses\n   a=crypto in this way serially\
    \ shares a master key among RTP sessions\n   or SSRCs and MUST replace the master\
    \ key when the aggregate number of\n   packets among all SSRCs approaches 2^31\
    \ packets.  SSRCs that share a\n   master key MUST be unique from one another.\n"
- title: 6.5.  Removal of Crypto Contexts
  contents:
  - "6.5.  Removal of Crypto Contexts\n   The mechanism defined above addresses the\
    \ issue of creating crypto\n   contexts.  However, in practice, session participants\
    \ may want to\n   remove crypto contexts prior to session termination.  Since\
    \ a crypto\n   context contains information that cannot automatically be recovered\n\
    \   (e.g., ROC), it is important that the sender and receiver agree on\n   when\
    \ a crypto context can be removed, and perhaps more importantly\n   when it cannot.\n\
    \      Even when late binding is used for a unicast stream, the ROC is\n     \
    \ lost and cannot be recovered automatically (unless it is zero)\n      once the\
    \ crypto context is removed.\n   We resolve this problem as follows.  When SRTP\
    \ security descriptions\n   are being used, crypto-context removal MUST follow\
    \ the same rules as\n   SSRC removal from the member table [RFC3550]; note that\
    \ this can\n   happen as the result of an SRTCP BYE packet or a simple time-out\
    \ due\n   to inactivity.  Inactive session participants that wish to ensure\n\
    \   their crypto contexts are not timed out MUST thus send SRTCP packets\n   at\
    \ regular intervals.\n"
- title: 7.  SRTP-Specific Use of the Crypto Attribute
  contents:
  - "7.  SRTP-Specific Use of the Crypto Attribute\n   Section 5 describes general\
    \ use of the crypto attribute, and this\n   section completes it by describing\
    \ SRTP-specific use.\n"
- title: 7.1.  Use with Offer/Answer
  contents:
  - "7.1.  Use with Offer/Answer\n   In this section, we describe how the SRTP security\
    \ descriptions are\n   used with the offer/answer model to negotiate cryptographic\n\
    \   capabilities and communicate SRTP master keys.  The rules defined\n   below\
    \ complement the general offer/answer rules defined in Section\n   5.1, which\
    \ MUST be followed, unless otherwise specified.  Note that\n   the rules below\
    \ define unicast operation only; support for multicast\n   and multipoint unicast\
    \ streams is for further study.\n"
- title: 7.1.1.  Generating the Initial Offer - Unicast Streams
  contents:
  - "7.1.1.  Generating the Initial Offer - Unicast Streams\n   When the initial offer\
    \ is generated, the offerer MUST follow the\n   steps in Section 5.1.1, as well\
    \ as the following steps.\n   For each unicast media line (m=) using the secure\
    \ RTP transport where\n   the offerer wants to specify cryptographic parameters,\
    \ the offerer\n   MUST provide at least one valid SRTP security description (\"\
    a=crypto\"\n   line), as defined in Section 6.  If the media stream includes Forward\n\
    \   Error Correction with a different IP-address and/or port from that of\n  \
    \ the media stream itself, an FEC_KEY parameter MUST be included, as\n   described\
    \ in Section 6.3.5.\n   The inline parameter conveys the SRTP master key used\
    \ by an endpoint\n   to encrypt the SRTP and SRTCP streams transmitted by that\
    \ endpoint.\n   The same key is used by the recipient to decrypt those streams.\n\
    \   However, the receiver MUST NOT use that same key for the SRTP or\n   SRTCP\
    \ packets that it sends to the session because the default SRTP\n   cipher and\
    \ mode is insecure when the master key is reused across\n   distinct SRTP streams.\n\
    \   The offerer MAY include one or more other SRTP session parameters, as\n  \
    \ defined in Section 6.3.  Note, however, that if any SRTP session\n   parameters\
    \ are included that are not known to the answerer, but that\n   are nonetheless\
    \ mandatory (see Section 6.3.6), the negotiation will\n   fail if the answerer\
    \ does not support them.\n"
- title: 7.1.2.  Generating the Initial Answer - Unicast Streams
  contents:
  - "7.1.2.  Generating the Initial Answer - Unicast Streams\n   When the initial\
    \ answer is generated, the answerer MUST follow the\n   steps in Section 5.1.2,\
    \ as well as the following steps.\n   For each unicast media line that uses the\
    \ secure RTP transport and\n   contains one or more \"a=crypto\" lines in the\
    \ offer, the answerer MUST\n   either accept one (and only one) of the crypto\
    \ lines for that media\n   stream, or it MUST reject the media stream.  Only \"\
    a=crypto\" lines\n   that are considered valid SRTP security descriptions, as\
    \ defined in\n   Section 6, can be accepted.  Furthermore, all parameters (crypto-\n\
    \   suite, key parameter, and mandatory session parameters) MUST be\n   acceptable\
    \ to the answerer in order for the offered media stream to\n   be accepted.  Note\
    \ that if the media stream includes Forward Error\n   Correction with a different\
    \ IP-address and/or port from that of the\n   media stream itself, an FEC_KEY\
    \ parameter MUST be included, as\n   described in Section 6.3.5.\n   When the\
    \ answerer accepts an SRTP unicast media stream with a crypto\n   line, the answerer\
    \ MUST include one or more master keys appropriate\n   for the selected crypto\
    \ algorithm; the master key(s) included in the\n   answer MUST be different from\
    \ those in the offer.\n      When the master key(s) are not shared between the\
    \ offerer and\n      answerer, SSRC collisions between the offerer and answerer\
    \ will\n      not lead to keystream reuse, and hence SSRC collisions do not\n\
    \      necessarily have to be prevented.\n   If Forward Error Correction to a\
    \ separate IP-address and/or port is\n   included, the answer MUST include an\
    \ FEC_KEY parameter, as described\n   in Section 6.3.5.\n   Declarative session\
    \ parameters may be added to the answer as usual;\n   however, the answerer SHOULD\
    \ NOT add any mandatory session parameter\n   (see Section 6.3.6) that might be\
    \ unknown to the offerer.\n   If the answerer cannot find any valid crypto line\
    \ that it supports,\n   or if its configured policy prohibits any cryptographic\
    \ key parameter\n   (e.g., key length) or cryptographic session parameter (e.g.,\
    \ KDR,\n   FEC_ORDER), it MUST reject the media stream, unless it is able to\n\
    \   successfully negotiate use of SRTP by other means outside the scope\n   of\
    \ this document (e.g., by use of MIKEY [mikey]).\n"
- title: 7.1.3.  Processing of the Initial Answer - Unicast Streams
  contents:
  - "7.1.3.  Processing of the Initial Answer - Unicast Streams\n   When the offerer\
    \ receives the answer, it MUST perform the steps in\n   Section 5.1.3, as well\
    \ as the following steps for each SRTP media\n   stream it offered with one or\
    \ more crypto lines in it.\n   If the media stream was accepted and it contains\
    \ a crypto line, it\n   MUST be checked that the crypto line is valid according\
    \ to the\n   constraints specified in Section 6 (including any FEC constraints).\n\
    \   If the offerer either does not support or is not willing to honor one\n  \
    \ or more of the SRTP parameters in the answer, the offerer MUST\n   consider\
    \ the crypto line invalid.\n   If the crypto line is not valid, or the offerer's\
    \ configured policy\n   prohibits any cryptographic key parameter (e.g., key length)\
    \ or\n   cryptographic session parameter, the SRTP security negotiation MUST\n\
    \   be deemed to have failed.\n"
- title: 7.1.4.  Modifying the Session
  contents:
  - "7.1.4.  Modifying the Session\n   When a media stream using the SRTP security\
    \ descriptions has been\n   established and a new offer/answer exchange is performed,\
    \ the offerer\n   and answerer MUST follow the steps in Section 5.1.4, as well\
    \ as the\n   following steps.\n   When modifying the session, all negotiated aspects\
    \ of the SRTP media\n   stream can be modified.  For example, a new crypto suite\
    \ can be used\n   or a new master key can be established.  As described in RFC\
    \ 3264,\n   when a new offer/answer exchange is made, there will be a window of\n\
    \   time where the offerer and the answerer must be prepared to receive\n   media\
    \ according to both the old and new offer/answer exchange.\n   This requirement\
    \ applies here as well; however, the following should\n   be noted:\n   *  When\
    \ authentication is not being used, it may not be possible for\n      either the\
    \ offerer or answerer to determine if a given packet is\n      encrypted according\
    \ to the old or new offer/answer exchange.  RFC\n      3264 defines a couple of\
    \ techniques to address this problem, e.g.,\n      changing the payload types\
    \ used and/or the transport addresses.\n      Note, however, that a change in\
    \ transport addresses may have an\n      impact on quality of service as well\
    \ as on firewall and NAT\n      traversal.  The SRTP security descriptions use\
    \ the MKI to deal\n      with this (which adds a few bytes to each SRTP packet),\
    \ as\n      described in Section 6.1.  For further details on the MKI, please\n\
    \      refer to [RFC3711].\n   *  If the answerer changes its master key, the\
    \ offerer will not be\n      able to process packets secured via this master key\
    \ until the\n      answer is received.  This could be addressed by using a security\n\
    \      \"precondition\" [sprecon].\n   If the offerer includes an IP address and/or\
    \ port that differs from\n   that used previously for a media stream (or FEC stream),\
    \ the offerer\n   MUST include a new master key with the offer (and in so doing,\
    \ it\n   will be creating a new crypto context where the ROC is set to zero).\n\
    \   Similarly, if the answerer includes an IP address and/or port that\n   differs\
    \ from that used previously for a media stream (or FEC stream),\n   the answerer\
    \ MUST include a new master key with the answer (and hence\n   create a new crypto\
    \ context with the ROC set to zero).  The reason\n   for this is that when the\
    \ answerer receives an offer or the offerer\n   receives an answer with an updated\
    \ IP address and/or port, it is not\n   possible to determine if the other side\
    \ has access to the old crypto\n   context parameters (and in particular the ROC).\
    \  For example, if one\n   side is a decomposed media gateway, or if a SIP back-to-back\
    \ user\n   agent is involved, it is possible that the media endpoint changed and\n\
    \   no longer has access to the old crypto context.  By always requiring\n   a\
    \ new master key in this case, the answerer/offerer will know that\n   the ROC\
    \ is zero for this offer/answer, and any key lifetime\n   constraints will trivially\
    \ be satisfied too.  Another consideration\n   here applies to media relays; if\
    \ the relay changes the media endpoint\n   on one side transparently to the other\
    \ side, the relay cannot operate\n   as a simple packet reflector but will have\
    \ to actively engage in SRTP\n   packet processing and transformation (i.e., decryption\
    \ and re-\n   encryption, etc.).\n   Finally, note that if the new offer is rejected,\
    \ the old crypto\n   parameters remain in place.\n"
- title: 7.1.5.  Offer/Answer Example
  contents:
  - "7.1.5.  Offer/Answer Example\n   In this example, the offerer supports two crypto\
    \ suites (f8 and AES).\n   The a=crypto line is actually one long line, although\
    \ it is shown as\n   two lines in this document due to page formatting.  The f8\
    \ example\n   shows two inline parameters; as explained in Section 6.1, there\
    \ may\n   be one or more key (i.e., inline) parameters in a crypto attribute.\n\
    \   In this way, multiple keys are offered to support key rotation using\n   a\
    \ Master Key Identifier (MKI).\n   Offerer sends:\n      v=0\n      o=sam 2890844526\
    \ 2890842807 IN IP4 10.47.16.5\n      s=SRTP Discussion\n      i=A discussion\
    \ of Secure RTP\n      u=http://www.example.com/seminars/srtp.pdf\n      e=marge@example.com\
    \ (Marge Simpson)\n      c=IN IP4 168.2.17.12\n      t=2873397496 2873404696\n\
    \      m=audio 49170 RTP/SAVP 0\n      a=crypto:1 AES_CM_128_HMAC_SHA1_80\n  \
    \     inline:WVNfX19zZW1jdGwgKCkgewkyMjA7fQp9CnVubGVz|2^20|1:4\n       FEC_ORDER=FEC_SRTP\n\
    \      a=crypto:2 F8_128_HMAC_SHA1_80\n       inline:MTIzNDU2Nzg5QUJDREUwMTIzNDU2Nzg5QUJjZGVm|2^20|1:4;\n\
    \       inline:QUJjZGVmMTIzNDU2Nzg5QUJDREUwMTIzNDU2Nzg5|2^20|2:4\n       FEC_ORDER=FEC_SRTP\n\
    \   Answerer replies:\n      v=0\n      o=jill 25690844 8070842634 IN IP4 10.47.16.5\n\
    \      s=SRTP Discussion\n      i=A discussion of Secure RTP\n      u=http://www.example.com/seminars/srtp.pdf\n\
    \      e=homer@example.com (Homer Simpson)\n      c=IN IP4 168.2.17.11\n     \
    \ t=2873397526 2873405696\n      m=audio 32640 RTP/SAVP 0\n      a=crypto:1 AES_CM_128_HMAC_SHA1_80\n\
    \       inline:PS1uQCVeeCFCanVmcjkpPywjNWhcYD0mXXtxaVBR|2^20|1:4\n   In this case,\
    \ the session would use the AES_CM_128_HMAC_SHA1_80\n   crypto suite for the RTP\
    \ and RTCP traffic.  If F8_128_HMAC_SHA1_80\n   were selected by the answerer,\
    \ there would be two inline keys\n   associated with the SRTP cryptographic context.\
    \  One key has an MKI\n   value of 1 and the second has an MKI of 2.\n"
- title: 7.2.  SRTP-Specific Use Outside Offer/Answer
  contents:
  - "7.2.  SRTP-Specific Use Outside Offer/Answer\n   Use of SRTP security descriptions\
    \ outside the offer/answer model is\n   not defined.\n      Use of SRTP security\
    \ descriptions outside the offer/answer model\n      could have been defined for\
    \ sendonly media streams; however, there\n      would not be a way to indicate\
    \ the key to use for SRTCP by the\n      receiver of said media stream.\n"
- title: 7.3.  Support for SIP Forking
  contents:
  - "7.3.  Support for SIP Forking\n   As mentioned earlier, the security descriptions\
    \ defined here do not\n   support multicast media streams or multipoint unicast\
    \ streams.\n   However, in the SIP protocol, it is possible to receive several\n\
    \   answers to a single offer due to the use of forking (see [SIP]).\n   Receiving\
    \ multiple answers leads to a couple of problems for the SRTP\n   security descriptions:\n\
    \   *  Different answerers may choose different ciphers, keys, etc.;\n      however,\
    \ there is no way for the offerer to associate a particular\n      incoming media\
    \ packet with a particular answer.\n   *  Two or more answerers may pick the same\
    \ SSRC, and hence the SSRC\n      collision problems mentioned earlier may arise.\n\
    \   As stated earlier, the above point-to-multipoint cases are outside\n   the\
    \ scope of the SDP security descriptions.  However, there are still\n   ways of\
    \ supporting SIP forking, e.g., by changing the multipoint\n   scenario resulting\
    \ from SIP forking into multiple two-party unicast\n   cases.  This can be done\
    \ as follows:\n   For each answer received beyond the initial answer, issue a\
    \ new offer\n   to that particular answerer using a new receive transport address\
    \ (IP\n   address and port); note that this requires support for the SIP UPDATE\n\
    \   method [RFC3311].  Also, to ensure that two media sessions are not\n   inadvertently\
    \ established prior to the UPDATE being processed by one\n   of them, use security\
    \ preconditions [sprecon].\n   Finally, note that all SIP User Agents that received\
    \ the offer will\n   know the key(s) being proposed by the initial offer.  If\
    \ the offerer\n   wants to ensure security with respect to all other User Agents\
    \ that\n   may have received the offer, a new offer/answer exchange with a new\n\
    \   key needs to be performed with the answerer as well.  Note that the\n   offerer\
    \ cannot determine whether a single or multiple SIP User Agents\n   received the\
    \ offer, since intermediate forking proxies may only\n   forward a single answer\
    \ to the offerer.\n   The above description is intended to suggest one possible\
    \ way of\n   supporting SIP forking.  There are many details missing and it should\n\
    \   not be considered a normative specification.  Alternative approaches\n   may\
    \ also be possible\n"
- title: 7.4.  SRTP-Specific Backwards Compatibility Considerations
  contents:
  - "7.4.  SRTP-Specific Backwards Compatibility Considerations\n   It is possible\
    \ that the answerer supports the SRTP transport and\n   accepts the offered media\
    \ stream, but that it does not support the\n   crypto attribute defined here.\
    \  The offerer can recognize this\n   situation by seeing an accepted SRTP media\
    \ stream in the answer that\n   does not include a crypto line.  In that case,\
    \ the security\n   negotiation defined here MUST be deemed to have failed.\n \
    \  Also, if a media stream with a given SRTP transport (e.g.,\n   \"RTP/SAVP\"\
    ) is sent to a device that does not support SRTP, that\n   media stream will be\
    \ rejected.\n"
- title: 7.5.  Operation with KEYMGT= and k= lines
  contents:
  - "7.5.  Operation with KEYMGT= and k= lines\n   An offer MAY include both \"a=crypto\"\
    \ and \"a=keymgt\" lines [keymgt].\n   Per SDP rules, the answerer will ignore\
    \ attribute lines that it does\n   not understand.  If the answerer supports both\
    \ \"a=crypto\" and\n   \"a=keymgt\", the answer MUST include either \"a=crypto\"\
    \ or \"a=keymgt\",\n   but not both, as including both is undefined.\n   An offer\
    \ MAY include both \"a=crypto\" and \"k=\" lines [RFC4566].  Per\n   SDP rules,\
    \ the answerer will ignore attribute lines it does not\n   understand.  If the\
    \ answerer supports both \"a=crypto\" and \"k=\", the\n   answer MUST include\
    \ either \"a=crypto\" or \"k=\" but not both, as\n   including both is undefined.\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   Like all SDP messages, SDP messages containing\
    \ security descriptions\n   are conveyed in an encapsulating application protocol\
    \ (e.g., SIP,\n   MGCP).  It is the responsibility of the encapsulating protocol\
    \ to\n   ensure the protection of the SDP security descriptions.  Therefore,\n\
    \   IT IS REQUIRED that the application invoke its own security\n   mechanisms\
    \ (e.g., secure multiparts such as S/MIME [smime]) or,\n   alternatively, utilize\
    \ a lower-layer security service (e.g., TLS or\n   IPsec).  IT IS REQUIRED that\
    \ this security service provide strong\n   message authentication and packet-payload\
    \ encryption, as well as\n   effective replay protection.\n   \"Replay protection\"\
    \ is needed against an attacker that has enough\n   access to the communications\
    \ channel to intercept messages and to\n   deliver copies to the destination.\
    \  A successful replay attack will\n   cause the recipient to perform duplicate\
    \ processing on a message; the\n   attack is worse when the duped recipient sends\
    \ a duplicate reply to\n   the initiator.  Replay protections are not found in\
    \ S/MIME or in the\n   other secure-multiparts standard, PGP/MIME.  S/MIME and\
    \ PGP/MIME,\n   therefore, need to be augmented with some replay-protection mechanism\n\
    \   that is appropriate to the encapsulating application protocol (e.g.,\n   SIP,\
    \ MGCP).  Three common ways to provide replay protection are to\n   place a sequence\
    \ number in the message, to use a timestamp, or for\n   the receiver to keep a\
    \ hash of the message to be compared with\n   incoming messages.  There typically\
    \ needs to be a replay \"window\" and\n   some policy for keeping state information\
    \ from previous messages in a\n   \"replay table\" or list.\n   The discussion\
    \ that follows uses \"message authentication\" and\n   \"message confidentiality\"\
    \ in a manner consistent with SRTP [RFC3711].\n   \"Message confidentiality\"\
    \ means that only the holder of the secret\n   decryption key can access the plain-text\
    \ content of the message.  The\n   decryption key is the same key as the encryption\
    \ key, using SRTP\n   counter mode and f8 encryption transforms, which are vulnerable\
    \ to\n   message tampering and need SRTP message authentication to detect such\n\
    \   tampering. \"Message authentication\" and \"message integrity\n   validation\"\
    \ generally mean the same thing in IETF security standards:\n   an SRTP message\
    \ is authenticated following a successful HMAC\n   integrity check [RFC3711],\
    \ which proves that the message originated\n   from the holder of an SRTP master\
    \ key and was not altered en route.\n   Such an \"authentic\" message, however,\
    \ can be captured by an attacker\n   and \"replayed\" when the attacker re-inserts\
    \ the packet into the\n   channel.  A replayed packet can have a variety of bad\
    \ effects on the\n   session, and SRTP uses the extended sequence number to detect\n\
    \   replayed SRTP packets [RFC3711].\n   The SRTP specification identifies which\
    \ services and features are\n   default values that are normative-to-implement\
    \ (such as\n   AES_CM_128_80) versus normative-to-use (such as AES_CM_128_32).\n"
- title: 8.1.  Authentication of Packets
  contents:
  - "8.1.  Authentication of Packets\n   Security descriptions as defined herein signal\
    \ security services for\n   RTP packets.  RTP messages are vulnerable to a variety\
    \ of attacks,\n   such as replay and forging.  To limit these attacks, SRTP message\n\
    \   integrity mechanisms SHOULD be used (SRTP replay protection is always\n  \
    \ enabled).\n"
- title: 8.2.  Keystream Reuse
  contents:
  - "8.2.  Keystream Reuse\n   SRTP security descriptions signal configuration parameters\
    \ for SRTP\n   sessions.  Misconfigured SRTP sessions are vulnerable to attacks\
    \ on\n   their encryption services when running the crypto suites defined in\n\
    \   Sections 6.2.1, 6.2.2, and 6.2.3.  An SRTP encryption service is\n   \"misconfigured\"\
    \ when two or more media streams are encrypted using\n   the same keystream of\
    \ AES blocks.  When senders and receivers share\n   derived session keys, SRTP\
    \ requires that the SSRCs of session\n   participants serve to make their corresponding\
    \ keystreams unique,\n   which is violated in the case of SSRC collision: SRTP\
    \ SSRC collision\n   drastically weakens SRTP or SRTCP payload encryption during\
    \ the time\n   that identical keystreams are used [RFC3711].  An attacker, for\n\
    \   example, might collect SRTP and SRTCP messages and await a collision.\n  \
    \ This attack on the AES-CM and AES-f8 encryption is avoided entirely\n   when\
    \ each media stream has its own unique master key in both the send\n   and receive\
    \ direction.  This specification restricts use of SDP\n   security description\
    \ to unicast point-to-point streams so that keys\n   are not shared between SRTP\
    \ hosts, and the master keys used in the\n   send and receive direction for a\
    \ given media stream are unique.\n"
- title: 8.3.  Signaling Authentication and Signaling Encryption
  contents:
  - "8.3.  Signaling Authentication and Signaling Encryption\n   There is no reason\
    \ to incur the complexity and computational expense\n   of SRTP, however, when\
    \ its key establishment is exposed to\n   unauthorized parties.  In most cases,\
    \ the SRTP crypto attribute and\n   its parameters are vulnerable to denial-of-service\
    \ attacks when they\n   are carried in an unauthenticated SDP message.  In some\
    \ cases, the\n   integrity or confidentiality of the RTP stream can be compromised.\n\
    \   For example, if an attacker sets UNENCRYPTED for the SRTP stream in\n   an\
    \ offer, this could result in the answerer's not decrypting the\n   encrypted\
    \ SRTP messages.  In the worst case, the answerer might\n   itself send unencrypted\
    \ SRTP and leave its data exposed to snooping.\n   Thus, IT IS REQUIRED that MIME\
    \ secure multiparts, IPsec, TLS, or some\n   other data security service be used\
    \ to provide message authentication\n   for the encapsulating protocol that carries\
    \ the SDP messages having a\n   crypto attribute (a=crypto).  Furthermore, IT\
    \ IS REQUIRED that\n   encryption of the encapsulating payload be used whenever\
    \ a master key\n   parameter (inline) appears in the message.  Failure to encrypt\
    \ the\n   SDP message containing an inline SRTP master key renders the SRTP\n\
    \   authentication or encryption service useless in practically all\n   circumstances.\
    \  Failure to authenticate an SDP message that carries\n   SRTP parameters renders\
    \ the SRTP authentication or encryption service\n   useless in most practical\
    \ applications.\n   When the communication path of the SDP message is routed through\n\
    \   intermediate systems that inspect parts of the SDP message, security\n   protocols\
    \ such as [IPsec] or TLS SHOULD NOT be used for encrypting\n   and/or authenticating\
    \ the security description.  In the case of\n   intermediate-system processing\
    \ of a message containing SDP security\n   descriptions, the \"a=crypto\" attributes\
    \ SHOULD be protected end-to-\n   end so that the intermediate system can neither\
    \ modify the security\n   description nor access the keying material.  Network\
    \ or transport\n   security protocols that terminate at each intermediate system,\n\
    \   therefore, SHOULD NOT be used for protecting SDP security\n   descriptions.\
    \  A security protocol SHOULD allow the security\n   descriptions to be encrypted\
    \ and authenticated end-to-end\n   independently of the portions of the SDP message\
    \ that any\n   intermediate system modifies or inspects: MIME secure multiparts\
    \ are\n   RECOMMENDED for the protection of SDP messages that are processed by\n\
    \   intermediate systems.\n"
- title: 9.  Grammar
  contents:
  - "9.  Grammar\n   In this section, we first provide the ABNF grammar for the generic\n\
    \   crypto attribute, and then we provide the ABNF grammar for the SRTP-\n   specific\
    \ use of the crypto attribute.\n"
- title: 9.1.  Generic "Crypto" Attribute Grammar
  contents:
  - "9.1.  Generic \"Crypto\" Attribute Grammar\n   The ABNF grammar for the crypto\
    \ attribute is defined below:\n   \"a=crypto:\" tag 1*WSP crypto-suite 1*WSP key-params\n\
    \                                           *(1*WSP session-param)\n   tag   \
    \           = 1*9DIGIT\n   crypto-suite     = 1*(ALPHA / DIGIT / \"_\")\n   key-params\
    \       = key-param *(\";\" key-param)\n   key-param        = key-method \":\"\
    \ key-info\n   key-method       = \"inline\" / key-method-ext\n   key-method-ext\
    \   = 1*(ALPHA / DIGIT / \"_\")\n   key-info         = 1*(%x21-3A / %x3C-7E) ;\
    \ visible (printing) chars\n                                        ; except semi-colon\n\
    \   session-param    = 1*(VCHAR)         ; visible (printing) characters\n   where\
    \ WSP, ALPHA, DIGIT, and VCHAR are defined in [RFC4234].\n"
- title: 9.2.  SRTP "Crypto" Attribute Grammar
  contents:
  - "9.2.  SRTP \"Crypto\" Attribute Grammar\n   This section provides an Augmented\
    \ BNF [RFC4234] grammar for the\n   SRTP-specific use of the SDP crypto attribute:\n\
    \      crypto-suite        = srtp-crypto-suite\n      key-method          = srtp-key-method\n\
    \      key-info            = srtp-key-info\n      session-param       = srtp-session-param\n\
    \      srtp-crypto-suite   = \"AES_CM_128_HMAC_SHA1_32\" /\n                 \
    \           \"F8_128_HMAC_SHA1_32\" /\n                            \"AES_CM_128_HMAC_SHA1_80\"\
    \ /\n                            srtp-crypto-suite-ext\n      srtp-key-method\
    \     = \"inline\"\n      srtp-key-info       = key-salt [\"|\" lifetime] [\"\
    |\" mki]\n      key-salt            = 1*(base64)   ; binary key and salt values\n\
    \                                    ; concatenated together, and then\n     \
    \                               ; base64 encoded [section 3 of\n             \
    \                       ; RFC3548\n      lifetime           = [\"2^\"] 1*(DIGIT)\
    \   ; see section 6.1 for \"2^\"\n      mki                 = mki-value \":\"\
    \ mki-length\n      mki-value           = 1*DIGIT\n      mki-length          =\
    \ 1*3DIGIT   ; range 1..128.\n      srtp-session-param  = kdr /\n            \
    \                \"UNENCRYPTED_SRTP\" /\n                            \"UNENCRYPTED_SRTCP\"\
    \ /\n                            \"UNAUTHENTICATED_SRTP\" /\n                \
    \            fec-order /\n                            fec-key /\n            \
    \                wsh /\n                            srtp-session-extension\n \
    \     kdr                 = \"KDR=\" 1*2(DIGIT)  ; range 0..24,\n            \
    \                                   ; power of two\n      fec-order          \
    \ = \"FEC_ORDER=\" fec-type\n      fec-type            = \"FEC_SRTP\" / \"SRTP_FEC\"\
    \n      fec-key             = \"FEC_KEY=\" key-params\n      wsh             \
    \    = \"WSH=\" 2*DIGIT    ; minimum value is 64\n      base64              =\
    \  ALPHA / DIGIT / \"+\" / \"/\" / \"=\"\n      srtp-crypto-suite-ext  = 1*(ALPHA\
    \ / DIGIT / \"_\")\n      srtp-session-extension = [\"-\"] 1*(VCHAR)  ;visible\
    \ chars [RFC4234]\n                               ; first character must not be\
    \ dash (\"-\")\n"
- title: 10.  IANA Considerations
  contents:
  - '10.  IANA Considerations

    '
- title: 10.1.  Registration of the "crypto" Attribute
  contents:
  - "10.1.  Registration of the \"crypto\" Attribute\n   The IANA has registered a\
    \ new SDP attribute as\n   follows:\n   Attribute name:      crypto\n   Long form\
    \ name:      Security description cryptographic attribute\n                  \
    \      for media streams\n   Type of attribute:   Media-level\n   Subject to charset:\
    \  No\n   Purpose:             Security descriptions\n   Appropriate values: \
    \ See Section 4\n"
- title: 10.2.  New IANA Registries and Registration Procedures
  contents:
  - "10.2.  New IANA Registries and Registration Procedures\n   The following sub-sections\
    \ define a new IANA registry with associated\n   sub-registries to be used for\
    \ the SDP security descriptions.  The\n   IANA has created an SDP Security Description\
    \ registry as shown below\n   and further described in the following sections:\n\
    \   SDP Security Descriptions\n     |\n     +- Key Methods (described in 10.2.1)\n\
    \     |\n     +- Media Stream Transports (described in 10.2.2)\n          |\n\
    \          +- Transport1 (e.g., SRTP)\n          |    |\n          |    +- Supported\
    \ Key Methods (e.g., inline)\n          |    |\n          |    +- crypto suites\n\
    \          |    |\n          |    +- session parameters\n          |\n       \
    \   +- Transport2\n          :    :\n"
- title: 10.2.1.  Key Method Registry and Registration
  contents:
  - "10.2.1.  Key Method Registry and Registration\n   The IANA has created a new\
    \ subregistry for SDP security description\n   key methods.  An IANA key method\
    \ registration MUST be documented in\n   an RFC in accordance with the [RFC2434]\
    \ Standards Action, and it MUST\n   provide the name of the key method in accordance\
    \ with the grammar for\n   key-method-ext defined in Section 9.1.\n"
- title: 10.2.2.  Media Stream Transport Registry and Registration
  contents:
  - "10.2.2.  Media Stream Transport Registry and Registration\n   The IANA has created\
    \ a new subregistry for SDP security description\n   Media Stream Transports.\
    \  An IANA media stream transport registration\n   MUST be documented in an RFC\
    \ in accordance with the RFC 2434\n   Standards Action and the procedures defined\
    \ in Sections 4 and 5 of\n   this document.  The registration MUST provide the\
    \ name of the\n   transport and a list of supported key methods.\n   In addition,\
    \ each new media stream transport registry must contain a\n   crypto-suite registry\
    \ and a session parameter registry, as well as\n   IANA instructions for how to\
    \ populate these registries.\n"
- title: 10.3.  Initial Registrations
  contents:
  - '10.3.  Initial Registrations

    '
- title: 10.3.1.  Key Method
  contents:
  - "10.3.1.  Key Method\n   The following security descriptions key methods are hereby\n\
    \   registered:\n      inline\n"
- title: 10.3.2.  SRTP Media Stream Transport
  contents:
  - "10.3.2.  SRTP Media Stream Transport\n   The IANA has created an SDP Security\
    \ Description Media Stream\n   Transport subregistry for \"SRTP\".  The key methods\
    \ supported is\n   \"inline\".  The reference for the SDP security description\
    \ for SRTP is\n   this document.\n"
- title: 10.3.2.1.  SRTP Crypto Suite Registry and Registration
  contents:
  - "10.3.2.1.  SRTP Crypto Suite Registry and Registration\n   The IANA has created\
    \ a new subregistry for SRTP crypto suites under\n   the SRTP transport of the\
    \ SDP Security Descriptions.  An IANA SRTP\n   crypto suite registration MUST\
    \ indicate the crypto suite name in\n   accordance with the grammar for srtp-crypto-suite-ext\
    \ defined in\n   Section 9.2.\n   The semantics of the SRTP crypto suite MUST\
    \ be described in an RFC in\n   accordance with the RFC 2434 Standards Action,\
    \ including the\n   semantics of the \"inline\" key-method and any special semantics\
    \ of\n   parameters.\n   The following SRTP crypto suites are hereby registered:\n\
    \      AES_CM_128_HMAC_SHA1_80\n      AES_CM_128_HMAC_SHA1_32\n      F8_128_HMAC_SHA1_80\n\
    \   The reference for these crypto suites is provided in this document.\n"
- title: 10.3.2.2.  SRTP Session Parameter Registration
  contents:
  - "10.3.2.2.  SRTP Session Parameter Registration\n   The IANA has created a new\
    \ subregistry for SRTP session parameters\n   under the SRTP transport of the\
    \ SDP Security Descriptions.  An IANA\n   SRTP session parameter registration\
    \ MUST indicate the session\n   parameter name (srtp-session-extension as defined\
    \ in Section 9.2);\n   the name MUST NOT begin with the dash character (\"-\"\
    ).\n   The semantics of the parameter MUST be described in an RFC in\n   accordance\
    \ with the RFC 2434 Standards Action.  If values can be\n   assigned to the parameter,\
    \ then the format and possible values that\n   can be assigned MUST be described\
    \ in the RFC in accordance with the\n   RFC 2434 Standards Action as well.  Also,\
    \ it MUST be specified\n   whether the parameter is declarative or negotiated\
    \ in the\n   offer/answer model.\n   The following SRTP session parameters are\
    \ hereby registered:\n      KDR\n      UNENCRYPTED_SRTP\n      UNENCRYPTED_SRTCP\n\
    \      UNAUTHENTICATED_SRTP\n      FEC_ORDER\n      FEC_KEY\n      WSH\n   The\
    \ reference for these parameters is this document.\n"
- title: 11.  Acknowledgements
  contents:
  - "11.  Acknowledgements\n   This document is a product of the IETF MMUSIC working\
    \ group and has\n   benefited from comments from its participants.  This document\
    \ also\n   benefited from discussions with Elisabetta Cararra, Earl Carter, Per\n\
    \   Cederqvist, Bill Foster, Matt Hammer, Cullen Jennings, Paul Kyzivat,\n   David\
    \ McGrew, Mats Naslund, Dave Oran, Jonathan Rosenberg, Dave\n   Singer, Mike Thomas,\
    \ Brian Weis, and Magnus Westerlund.\n"
- title: 12.  Normative References
  contents:
  - "12.  Normative References\n   [RFC3550]  Schulzrinne, H., Casner, S., Frederick,\
    \ R., and V.\n              Jacobson, \"RTP: A Transport Protocol for Real-Time\n\
    \              Applications\", STD 64, RFC 3550, July 2003.\n   [RFC2119]  Bradner,\
    \ S., \"Key words for use in RFCs to Indicate\n              Requirement Levels\"\
    , BCP 14, RFC 2119, March 1997.\n   [RFC4566]  Handley, M., Jacobson, V., and\
    \ C. Perkins, \"SDP: Session\n              Description Protocol\", RFC 4566,\
    \ July 2006.\n   [RFC4234]  Crocker, D., Ed. and P. Overell, \"Augmented BNF for\
    \ Syntax\n              Specifications: ABNF\", RFC 4234, October 2005.\n   [RFC2828]\
    \  Shirey, R., \"Internet Security Glossary\", FYI 36, RFC\n              2828,\
    \ May 2000.\n   [RFC3264]  Rosenberg, J. and H. Schulzrinne, \"An Offer/Answer\
    \ Model\n              with Session Description Protocol (SDP)\", RFC 3264, June\n\
    \              2002.\n   [RFC3711]  Baugher, M., McGrew, D., Naslund, M., Carrara,\
    \ E., and K.\n              Norrman, \"The Secure Real-time Transport Protocol\
    \ (SRTP)\",\n              RFC 3711, March 2004.\n   [RFC1750]  Eastlake 3rd,\
    \ D., Crocker, S., and J. Schiller,\n              \"Randomness Recommendations\
    \ for Security\", RFC 1750,\n              December 1994.\n   [RFC3548]  Josefsson,\
    \ S., \"The Base16, Base32, and Base64 Data\n              Encodings\", RFC 3548,\
    \ July 2003.\n   [RFC2434]  Narten, T. and H. Alvestrand, \"Guidelines for Writing\
    \ an\n              IANA Considerations Section in RFCs\", BCP 26, RFC 2434,\n\
    \              October 1998.\n"
- title: 13.  Informative References
  contents:
  - "13.  Informative References\n   [sprecon]  Andreasen, F. and D. Wing, \"Security\
    \ Preconditions for\n              Session Description Protocol Media Streams\"\
    , Work in\n              Progress, October 2005.\n   [RFC3407]  Andreasen, F.,\
    \ \"Session Description Protocol (SDP) Simple\n              Capability Declaration\"\
    , RFC 3407, October 2002.\n   [Bellovin] Bellovin, S., \"Problem Areas for the\
    \ IP Security\n              Protocols,\" in Proceedings of the Sixth Usenix Unix\n\
    \              Security Symposium, pp. 1-16, San Jose, CA, July 1996.\n   [GDOI]\
    \     Baugher, M., Weis, B., Hardjono, T., and H. Harney, \"The\n            \
    \  Group Domain of Interpretation\", RFC 3547, July 2003.\n   [kink]     Sakane,\
    \ S., Kamada, K., Thomas, M. and J. Vilhuber,\n              \"Kerberized Internet\
    \ Negotiation of Keys (KINK)\", RFC\n              4430, March 2006.\n   [ike]\
    \      Kaufman, C., \"Internet Key Exchange (IKEv2) Protocol\", RFC\n        \
    \      4306, December 2005.\n   [ipsec]    Kent, S. and K. Seo, \"Security Architecture\
    \ for the\n              Internet Protocol\", RFC 4301, December 2005.\n   [maxprate]\
    \ Westerlund, M., \"A Transport Independent Bandwidth\n              Modifier\
    \ for the Session Description Protocol (SDP)\", RFC\n              3890, September\
    \ 2004.\n   [RFC2733]  Rosenberg, J. and H. Schulzrinne, \"An RTP Payload Format\n\
    \              for Generic Forward Error Correction\", RFC 2733, December\n  \
    \            1999.\n   [s/mime]   Ramsdell, B., \"Secure/Multipurpose Internet\
    \ Mail\n              Extensions (S/MIME) Version 3.1 Message Specification\"\
    ,\n              RFC 3851, July 2004.\n   [pgp/mime] Elkins, M., \"MIME Security\
    \ with Pretty Good Privacy\n              (PGP)\", RFC 2015, October 1996.\n \
    \  [TLS]      Dierks, T. and C. Allen, \"The TLS Protocol Version 1.0\",\n   \
    \           RFC 2246, January 1999.\n   [keymgt]   Arkko, J., Carrara, E., Lindholm,\
    \ F., Naslund, M., and K.\n              Norrman, \"Key Management Extensions\
    \ for Session\n              Description Protocol (SDP) and Real Time Streaming\n\
    \              Protocol (RTSP)\", RFC 4567, July 2006.\n   [mikey]    Arkko, J.,\
    \ Carrara, E., Lindholm, F., Naslund, M., and K.\n              Norrman, \"MIKEY:\
    \ Multimedia Internet KEYing\", RFC 3830,\n              August 2004.\n   [RFC2104]\
    \  Krawczyk, H., Bellare, M., and R. Canetti, \"HMAC:  Keyed-\n              Hashing\
    \ for Message Authentication\", RFC 2104, February\n              1997.\n   [skeme]\
    \    Krawczyk, H., \"SKEME: A Versatile Secure Key Exchange\n              Mechanism\
    \ for the Internet\", ISOC Secure Networks and\n              Distributed Systems\
    \ Symposium, San Diego, 1996.\n   [RFC3312]  Camarillo, G., Marshall, W., and\
    \ J. Rosenberg,\n              \"Integration of Resource Management and Session\
    \ Initiation\n              Protocol (SIP)\", RFC 3312, October 2002.\n   [RFC2974]\
    \  Handley, M., Perkins, C., and E. Whelan, \"Session\n              Announcement\
    \ Protocol\", RFC 2974, October 2000.\n   [srtpf]    Ott, J. and E. Carrara, \"\
    Extended Secure RTP Profile for\n              RTCP-based Feedback (RTP/SAVPF)\"\
    , work in progress,\n              October 2003.\n   [RFC3261]  Rosenberg, J.,\
    \ Schulzrinne, H., Camarillo, G., Johnston,\n              A., Peterson, J., Sparks,\
    \ R., Handley, M., and E.\n              Schooler, \"SIP:  Session Initiation\
    \ Protocol\", RFC 3261,\n              June 2002.\n   [RFC3311]  Rosenberg, J.,\
    \ \"The Session Initiation Protocol (SIP)\n              UPDATE Method\", RFC\
    \ 3311, September 2002.\n"
- title: Appendix A - Rationale for Keying Material Directionality
  contents:
  - "Appendix A - Rationale for Keying Material Directionality\n   SDP security descriptions\
    \ define the keying material for the sending\n   direction, which is included\
    \ in the SDP.  Thus, the key that is\n   carried in an SDP message is a decryption\
    \ key for the receiver of\n   that SDP message.  This is in contrast to the majority\
    \ of information\n   included in SDP, which describes information for the receiving\
    \ (or\n   receiving and sending) direction.  This reversed information\n   directionality\
    \ generates some challenges with using the mechanism in\n   the offer/answer model\
    \ and in particular with SIP, where early media\n   and forking require special\
    \ consideration (as described in Section\n   7.3).  There are however good reasons\
    \ for why this was done, which\n   can be summarized as follows:\n   First of\
    \ all, there is the general security philosophy of letting the\n   entity that\
    \ sends traffic decide what key to use for protecting it.\n   SRTP uses counter\
    \ mode, which is secure when counters do not overlap\n   among senders who share\
    \ a master key; the surest way to avoid counter\n   overlap is for each endpoint\
    \ to generate its own master key.\n   Secondly, if SDP security descriptions had\
    \ been designed to keep the\n   normal SDP information directionality, it would\
    \ have resulted in\n   problems with supporting early media and SIP forking: If\
    \ an offer\n   generates multiple answers and the keying material was for the\n\
    \   receive direction, some of the parameter values (e.g. lifetime) would\n  \
    \ have to be shared between all the answerers (senders of media), which\n   would\
    \ lead to considerable complexity, possibly requiring changes or\n   extensions\
    \ to SRTP.  Other problems were discovered as well, which we\n   describe further\
    \ below.\n   In the following scenarios, we analyze what would occur if SDP\n\
    \   security descriptions had been designed so that the keying material\n   was\
    \ the receive keying material (rather than its actual design, where\n   the keying\
    \ material is the sending keying material):\n   Scenario A: Non-Forking Case\n\
    \      In this scenario, the offer includes the receiving keying\n      material,\
    \ the answerer receives it and starts sending data packets\n      towards the\
    \ offerer.  If there was a single crypto attribute in\n      the offer, there\
    \ would be no ambiguity about which crypto suite\n      was being used and, hence,\
    \ the incoming packet could be processed.\n      However, in the case where the\
    \ offer included multiple alternative\n      crypto-attributes, the offerer would\
    \ not know which one was\n      chosen, and hence, if the offerer received packets\
    \ before the\n      answer came back, the offerer would be unable to process those\n\
    \      packets (problem 1).  (Use of the MKI has been suggested as one\n     \
    \ possible solution to that, however it incurs a per-packet\n      overhead.)\n\
    \   Scenario B: Serial Forking Case\n      In this scenario, Alice generates an\
    \ offer to Bob, who starts\n      sending (early) media towards Alice (no answer\
    \ returned yet).  In\n      this scenario, we assume we aren't also encountering\
    \ Scenario A\n      (e.g., the offer includes only a single crypto-attribute)\
    \ and that\n      Bob is using a Synchronization Source (SSRC) value of 1 for\
    \ his\n      SRTP and SRTCP packets.  Alice thus has a crypto-context for SSRC\n\
    \      1, including the associated ROC (Roll Over Counter) and SEQ (RTP\n    \
    \  Sequence Number).  Bob now forwards the call to Carol (Bob still\n      has\
    \ not generated an answer).  At this point, Bob has Alice's key,\n      which\
    \ sometimes might be a security weakness.  As the exchange\n      proceeds, Carol\
    \ gets the original offer, including the offered\n      crypto-attribute and starts\
    \ sending media packets towards Alice.\n      It just so happens that Carol chooses\
    \ an SSRC value of 1, as did\n      Bob.  When Carol starts generating packets,\
    \ there is a potential\n      for what RFC 3711 calls a \"two-time pad\" issue\
    \ (problem 2), as\n      well as the potential for the ROC to be out of sync between\
    \ Alice\n      and Carol (problem 3).  Note that since Bob and Carol are\n   \
    \   (presumably) using different source transport addresses, the SSRC\n      reuse\
    \ does not constitute an SSRC collision (although it may still\n      be interpreted\
    \ as such by Alice).  Per RFC 3711, since the master\n      key would be shared\
    \ between Bob and Carol in this case, it is\n      RECOMMENDED that Alice leave\
    \ the session at that point in order to\n      avoid the two-time pad issue. \
    \ It should also be noted that RFC\n      3711 recommends against sharing SRTP\
    \ master keys, which forking\n      may accidentally introduce when the keying\
    \ material is for the\n      receiving direction.\n      If we consider the above\
    \ scenario again, but this time with keying\n      material in the offer (and\
    \ answer) being the sending keying\n      material (as specified by SDP security\
    \ descriptions), the scenario\n      instead looks as follows: Bob again chooses\
    \ SSRC 1, and Bob will\n      need to send back an answer to Alice, since Alice\
    \ needs to learn\n      Bob's sending key.  Bob also starts sending media towards\
    \ Alice\n      (clipping may occur until Alice receives Bob's answer).  Bob again\n\
    \      forwards the call to Carol who also starts sending early media\n      using\
    \ SSRC 1.  However, Carol needs to generate a new answer (for\n      the dialog\
    \ between Alice and Carol) in order for Alice to process\n      Carol's packets\
    \ . Upon receiving this answer, Alice can initiate a\n      new offer/answer exchange\
    \ (to move the session to another\n      transport address as described in Section\
    \ 7.3).  In this case,\n      there is one master key per session and a unique\
    \ keystream\n      regardless of whether or not SSRCs collide.\n   Scenario C:\
    \ Parallel Forking Case\n      In this scenario, Alice generates an offer (with\
    \ receive keying\n      material) that gets forked to Bob and Carol in parallel.\
    \  Bob and\n      Carol both start sending packets (early media) to Alice.  If\
    \ Bob\n      and Carol choose different SSRCs, everything is fine initially.\n\
    \      However, one of the crypto context parameters is the master key\n     \
    \ lifetime, and since Bob and Carol are sharing the same master key\n      (unbeknownst\
    \ to either), they do not know when they need to rekey\n      (problem 4).  If\
    \ they choose the same SSRC, we have the two-time\n      pad problem again (problem\
    \ 2).\n   In summary, if keying material were for the receive direction, we\n\
    \   would have the following problems:\n      - Problem 1: Offerer does not know\
    \ which of multiple crypto offers\n                   was chosen by answerer.\n\
    \      - Problem 2: SSRC reuse (or SSRC collisions) between multiple\n       \
    \            answerers (serial or parallel forking) may lead to\n            \
    \       the two-time pad issue.\n      - Problem 3: Part of the crypto context\
    \ parameters (specifically\n                   the ROC) is not communicated but\
    \ derived, and if we\n                   allow multiple entities to use the same\
    \ SSRC\n                   (sequentially), the ROC can be wrong.\n      - Problem\
    \ 4: All crypto contexts that share a master key need to\n                   maintain\
    \ a shared set of counters (master key\n                   lifetime), and if we\
    \ allow for multiple entities on\n                   different platforms to share\
    \ a master key, we would\n                   need a mechanism to synchronize these\
    \ counters.\n      Problem 1 could be addressed by using the MKI as proposed\n\
    \      separately; however, it would result in using extra bandwidth for\n   \
    \   each SRTP media packet.  Solving problem 2 implies a need for\n      being\
    \ able to synchronize SSRC values with the answerer (or\n      abandon the session\
    \ when SSRC reuse or SSRC collisions occur).\n      Problem 3 implies a need for\
    \ being able to synchronize ROC values\n      on a per SSRC basis (or abandon\
    \ the session when SSRC reuse\n      occurs).  Problem 4 could be solved by having\
    \ the offerer (Alice,\n      i.e., the entity receiving media) determine how many\
    \ packets have\n      actually been generated by the total set of senders to Alice\
    \ and,\n      hence, be the one to initiate the rekeying.  In the case of packet\n\
    \      losses, etc. this is not foolproof, but in practice it could\n      probably\
    \ be addressed by use of a reasonable safety margin.\n      In conclusion, it\
    \ would be expected from an offer/answer and SIP\n      point of view to have\
    \ the offer (and answer) keying material be\n      the receive keying material;\
    \ however, doing so would trade\n      security for SIP friendliness, e.g., two-time\
    \ pad and master key\n      lifetime issues, and violate the RFC 3711 rule for\
    \ sharing an SRTP\n      master key across SRTP sessions.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Flemming Andreasen\n   Cisco Systems, Inc.\n   499 Thornall\
    \ Street, 8th Floor\n   Edison, New Jersey  08837 USA\n   EMail: fandreas@cisco.com\n\
    \   Mark Baugher\n   5510 SW Orchid Street\n   Portland, Oregon  97219 USA\n \
    \  EMail: mbaugher@cisco.com\n   Dan Wing\n   Cisco Systems, Inc.\n   170 West\
    \ Tasman Drive\n   San Jose, CA  95134  USA\n   EMail: dwing@cisco.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2006).\n   This\
    \ document is subject to the rights, licenses and restrictions\n   contained in\
    \ BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is provided by the IETF\n\
    \   Administrative Support Activity (IASA).\n"
