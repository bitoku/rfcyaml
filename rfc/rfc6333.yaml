- title: __initial_text__
  contents:
  - '    Dual-Stack Lite Broadband Deployments Following IPv4 Exhaustion

    '
- title: Abstract
  contents:
  - "Abstract\n   This document revisits the dual-stack model and introduces the Dual-\n\
    \   Stack Lite technology aimed at better aligning the costs and benefits\n  \
    \ of deploying IPv6 in service provider networks.  Dual-Stack Lite\n   enables\
    \ a broadband service provider to share IPv4 addresses among\n   customers by\
    \ combining two well-known technologies: IP in IP (IPv4-\n   in-IPv6) and Network\
    \ Address Translation (NAT).\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6333.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2011 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \   2. Requirements Language ...........................................4\n  \
    \ 3. Terminology .....................................................4\n   4.\
    \ Deployment Scenarios ............................................4\n      4.1.\
    \ Access Model ...............................................4\n      4.2. CPE\
    \ ........................................................5\n      4.3. Directly\
    \ Connected Device ..................................6\n   5. B4 Element ......................................................7\n\
    \      5.1. Definition .................................................7\n  \
    \    5.2. Encapsulation ..............................................7\n    \
    \  5.3. Fragmentation and Reassembly ...............................7\n      5.4.\
    \ AFTR Discovery .............................................7\n      5.5. DNS\
    \ ........................................................8\n      5.6. Interface\
    \ Initialization ...................................8\n      5.7. Well-Known IPv4\
    \ Address ....................................8\n   6. AFTR Element ....................................................9\n\
    \      6.1. Definition .................................................9\n  \
    \    6.2. Encapsulation ..............................................9\n    \
    \  6.3. Fragmentation and Reassembly ...............................9\n      6.4.\
    \ DNS .......................................................10\n      6.5. Well-Known\
    \ IPv4 Address ...................................10\n      6.6. Extended Binding\
    \ Table ....................................10\n   7. Network Considerations .........................................10\n\
    \      7.1. Tunneling .................................................10\n  \
    \    7.2. Multicast Considerations ..................................10\n   8.\
    \ NAT Considerations .............................................11\n      8.1.\
    \ NAT Pool ..................................................11\n      8.2. NAT\
    \ Conformance ...........................................11\n      8.3. Application\
    \ Level Gateways (ALGs) .........................11\n      8.4. Sharing Global\
    \ IPv4 Addresses .............................11\n      8.5. Port Forwarding /\
    \ Keep Alive ..............................11\n   9. Acknowledgements ...............................................12\n\
    \   10. IANA Considerations ...........................................12\n  \
    \ 11. Security Considerations .......................................12\n   12.\
    \ References ....................................................13\n      12.1.\
    \ Normative References .....................................13\n      12.2. Informative\
    \ References ...................................14\n   Appendix A. Deployment\
    \ Considerations .............................16\n     A.1. AFTR Service Distribution\
    \ and Horizontal Scaling ...........16\n     A.2. Horizontal Scaling .........................................16\n\
    \     A.3. High Availability ..........................................16\n  \
    \   A.4. Logging ....................................................16\n   Appendix\
    \ B. Examples ..............................................17\n     B.1. Gateway-Based\
    \ Architecture .................................17\n       B.1.1. Example Message\
    \ Flow ...................................19\n       B.1.2. Translation Details\
    \ ....................................23\n     B.2. Host-Based Architecture ....................................24\n\
    \       B.2.1. Example Message Flow ...................................27\n  \
    \     B.2.2. Translation Details ....................................31\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The common thinking for more than 10 years has been that\
    \ the\n   transition to IPv6 will be based solely on the dual-stack model and\n\
    \   that most things would be converted this way before we ran out of\n   IPv4.\
    \  However, this has not happened.  The IANA free pool of IPv4\n   addresses has\
    \ now been depleted, well before sufficient IPv6\n   deployment had taken place.\
    \  As a result, many IPv4 services have to\n   continue to be provided even under\
    \ severely limited address space.\n   This document specifies the Dual-Stack Lite\
    \ technology, which is\n   aimed at better aligning the costs and benefits in\
    \ service provider\n   networks.  Dual-Stack Lite will enable both continued support\
    \ for\n   IPv4 services and incentives for the deployment of IPv6.  It also\n\
    \   de-couples IPv6 deployment in the service provider network from the\n   rest\
    \ of the Internet, making incremental deployment easier.\n   Dual-Stack Lite enables\
    \ a broadband service provider to share IPv4\n   addresses among customers by\
    \ combining two well-known technologies:\n   IP in IP (IPv4-in-IPv6) and Network\
    \ Address Translation (NAT).\n   This document makes a distinction between a dual-stack-capable\
    \ and a\n   dual-stack-provisioned device.  The former is a device that has code\n\
    \   that implements both IPv4 and IPv6, from the network layer to the\n   applications.\
    \  The latter is a similar device that has been\n   provisioned with both an IPv4\
    \ and an IPv6 address on its\n   interface(s).  This document will also further\
    \ refine this notion by\n   distinguishing between interfaces provisioned directly\
    \ by the service\n   provider from those provisioned by the customer.\n   Pure\
    \ IPv6-only devices (i.e., devices that do not include an IPv4\n   stack) are\
    \ outside of the scope of this document.\n   This document will first present\
    \ some deployment scenarios and then\n   define the behavior of the two elements\
    \ of the Dual-Stack Lite\n   technology: the Basic Bridging BroadBand (B4) element\
    \ and the Address\n   Family Transition Router (AFTR) element.  It will then go\
    \ into\n   networking and NAT-ing considerations.\n"
- title: 2.  Requirements Language
  contents:
  - "2.  Requirements Language\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in RFC 2119 [RFC2119].\n"
- title: 3.  Terminology
  contents:
  - "3.  Terminology\n   The technology described in this document is known as Dual-Stack\n\
    \   Lite.  The abbreviation \"DS-Lite\" will be used throughout this text.\n \
    \  This document also introduces two new terms: the DS-Lite Basic\n   Bridging\
    \ BroadBand (B4) element and the DS-Lite Address Family\n   Transition Router\
    \ (AFTR) element.\n   Dual-stack is defined in [RFC4213].\n   NAT-related terminology\
    \ is defined in [RFC4787].\n   CPE stands for Customer Premise Equipment.  This\
    \ is the layer 3\n   device in the customer premise that is connected to the service\n\
    \   provider network.  That device is often a home gateway.  However,\n   sometimes\
    \ computers are directly attached to the service provider\n   network.  In such\
    \ cases, such computers can be viewed as CPEs as\n   well.\n"
- title: 4.  Deployment Scenarios
  contents:
  - '4.  Deployment Scenarios

    '
- title: 4.1.  Access Model
  contents:
  - "4.1.  Access Model\n   Instead of relying on a cascade of NATs, the Dual-Stack\
    \ Lite model is\n   built on IPv4-in-IPv6 tunnels to cross the network to reach\
    \ a\n   carrier-grade IPv4-IPv4 NAT (the AFTR), where customers will share\n \
    \  IPv4 addresses.  There are a number of benefits to this approach:\n   o  This\
    \ technology decouples the deployment of IPv6 in the service\n      provider network\
    \ (up to the customer premise equipment or CPE)\n      from the deployment of\
    \ IPv6 in the global Internet and in customer\n      applications and devices.\n\
    \   o  The management of the service provider access networks is\n      simplified\
    \ by leveraging the large IPv6 address space.\n      Overlapping private IPv4\
    \ address spaces are not required to\n      support very large customer bases.\n\
    \   o  As tunnels can terminate anywhere in the service provider network,\n  \
    \    this architecture lends itself to horizontal scaling and provides\n     \
    \ some flexibility to adapt to changing traffic load.  More\n      discussion\
    \ of horizontal scaling can be found in Appendix A.\n   o  Tunnels provide a direct\
    \ connection between B4 and the AFTR.  This\n      can be leveraged to enable\
    \ customers and their applications to\n      control how the NAT function of the\
    \ AFTR is performed.\n   A key characteristic of this approach is that communications\
    \ between\n   end-nodes stay within their address family.  IPv6 sources only\n\
    \   communicate with IPv6 destinations, and IPv4 sources only communicate\n  \
    \ with IPv4 destinations.  There is no protocol family translation\n   involved\
    \ in this approach.  This simplifies greatly the task of\n   applications that\
    \ may carry literal IP addresses in their payloads.\n"
- title: 4.2.  CPE
  contents:
  - "4.2.  CPE\n   This section describes home Local Area networks characterized by\
    \ the\n   presence of a home gateway, or CPE, provisioned only with IPv6 by the\n\
    \   service provider.\n   A DS-Lite CPE is an IPv6-aware CPE with a B4 interface\
    \ implemented in\n   the WAN interface.\n   A DS-Lite CPE SHOULD NOT operate a\
    \ NAT function between an internal\n   interface and a B4 interface, as the NAT\
    \ function will be performed\n   by the AFTR in the service provider's network.\
    \  This will avoid\n   accidentally operating in a double-NAT environment.\n \
    \  However, it SHOULD operate its own DHCP(v4) server handing out\n   [RFC1918]\
    \ address space (e.g., 192.168.0.0/16) to hosts in the home.\n   It SHOULD advertise\
    \ itself as the default IPv4 router to those home\n   hosts.  It SHOULD also advertise\
    \ itself as a DNS server in the DHCP\n   Option 6 (DNS Server).  Additionally,\
    \ it SHOULD operate a DNS proxy\n   to accept DNS IPv4 requests from home hosts\
    \ and send them using IPv6\n   to the service provider DNS servers, as described\
    \ in Section 5.5.\n   Note: If an IPv4 home host decides to use another IPv4 DNS\
    \ server,\n   the DS-Lite CPE will forward those DNS requests via the B4 interface,\n\
    \   the same way it forwards any regular IPv4 packets.  However, each DNS\n  \
    \ request will create a binding in the AFTR.  A large number of DNS\n   requests\
    \ may have a direct impact on the AFTR's NAT table\n   utilization.\n   IPv6-capable\
    \ devices directly reach the IPv6 Internet.  Packets\n   simply follow IPv6 routing,\
    \ they do not go through the tunnel, and\n   they are not subject to any translation.\
    \  It is expected that most\n   IPv6-capable devices will also be IPv4 capable\
    \ and will simply be\n   configured with an IPv4 [RFC1918]-style address within\
    \ the home\n   network and access the IPv4 Internet the same way as the legacy\
    \ IPv4-\n   only devices within the home.\n   Pure IPv6-only devices (i.e., devices\
    \ that do not include an IPv4\n   stack) are outside of the scope of this document.\n"
- title: 4.3.  Directly Connected Device
  contents:
  - "4.3.  Directly Connected Device\n   In broadband home networks, some devices\
    \ are directly connected to\n   the broadband service provider.  They are connected\
    \ straight to a\n   modem, without a home gateway.  Those devices are, in fact,\
    \ acting as\n   CPEs.\n   Under this scenario, the customer device is a dual-stack-capable\
    \ host\n   that is provisioned by the service provider with IPv6 only.  The\n\
    \   device itself acts as a B4 element, and the IPv4 service is provided\n   by\
    \ an IPv4-in-IPv6 tunnel, just as in the home gateway/CPE case.\n   That device\
    \ can run any combinations of IPv4 and/or IPv6\n   applications.\n   A directly\
    \ connected DS-Lite device SHOULD send its DNS requests over\n   IPv6 to the IPv6\
    \ DNS server it has been configured to use.\n   Similarly to the previous sections,\
    \ IPv6 packets follow IPv6 routing,\n   they do not go through the tunnel, and\
    \ they are not subject to any\n   translation.\n   The support of IPv4-only devices\
    \ and IPv6-only devices in this\n   scenario is out of scope for this document.\n"
- title: 5.  B4 Element
  contents:
  - '5.  B4 Element

    '
- title: 5.1.  Definition
  contents:
  - "5.1.  Definition\n   The B4 element is a function implemented on a dual-stack-capable\n\
    \   node, either a directly connected device or a CPE, that creates a\n   tunnel\
    \ to an AFTR.\n"
- title: 5.2.  Encapsulation
  contents:
  - "5.2.  Encapsulation\n   The tunnel is a multipoint-to-point IPv4-in-IPv6 tunnel\
    \ ending on a\n   service provider AFTR.\n   See Section 7.1 for additional tunneling\
    \ considerations.\n   Note: At this point, DS-Lite only defines IPv4-in-IPv6 tunnels;\n\
    \   however, other types of encapsulation could be defined in the future.\n"
- title: 5.3.  Fragmentation and Reassembly
  contents:
  - "5.3.  Fragmentation and Reassembly\n   Using an encapsulation (IPv4-in-IPv6 or\
    \ anything else) to carry IPv4\n   traffic over IPv6 will reduce the effective\
    \ MTU of the datagram.\n   Unfortunately, path MTU discovery [RFC1191] is not\
    \ a reliable method\n   to deal with this problem.\n   A solution to deal with\
    \ this problem is for the service provider to\n   increase the MTU size of all\
    \ the links between the B4 element and the\n   AFTR elements by at least 40 bytes\
    \ to accommodate both the IPv6\n   encapsulation header and the IPv4 datagram\
    \ without fragmenting the\n   IPv6 packet.\n   However, as not all service providers\
    \ will be able to increase their\n   link MTU, the B4 element MUST perform fragmentation\
    \ and reassembly if\n   the outgoing link MTU cannot accommodate the extra IPv6\
    \ header.  The\n   original IPv4 packet is not oversized.  The packet is oversized\
    \ after\n   the IPv6 encapsulation.  The inner IPv4 packet MUST NOT be\n   fragmented.\
    \  Fragmentation MUST happen after the encapsulation of the\n   IPv6 packet. \
    \ Reassembly MUST happen before the decapsulation of the\n   IPv4 packet.  A detailed\
    \ procedure has been specified in [RFC2473]\n   Section 7.2.\n"
- title: 5.4.  AFTR Discovery
  contents:
  - "5.4.  AFTR Discovery\n   In order to configure the IPv4-in-IPv6 tunnel, the B4\
    \ element needs\n   the IPv6 address of the AFTR element.  This IPv6 address can\
    \ be\n   configured using a variety of methods, ranging from an out-of-band\n\
    \   mechanism, manual configuration, or a variety of DHCPv6 options.\n   In order\
    \ to guarantee interoperability, a B4 element SHOULD implement\n   the DHCPv6\
    \ option defined in [RFC6334].\n"
- title: 5.5.  DNS
  contents:
  - "5.5.  DNS\n   A B4 element is only configured from the service provider with\
    \ IPv6.\n   As such, it can only learn the address of a DNS recursive server\n\
    \   through DHCPv6 (or other similar method over IPv6).  As DHCPv6 only\n   defines\
    \ an option to get the IPv6 address of such a DNS recursive\n   server, the B4\
    \ element cannot easily discover the IPv4 address of\n   such a recursive DNS\
    \ server, and as such will have to perform all DNS\n   resolution over IPv6.\n\
    \   The B4 element can pass this IPv6 address to downstream IPv6 nodes,\n   but\
    \ not to downstream IPv4 nodes.  As such, the B4 element SHOULD\n   implement\
    \ a DNS proxy, following the recommendations of [RFC5625].\n   To support a security-aware\
    \ resolver behind the B4 element, the DNS\n   proxy in the B4 element must also\
    \ be security aware.  Details can be\n   found in [RFC4033] Section 6.\n"
- title: 5.6.  Interface Initialization
  contents:
  - "5.6.  Interface Initialization\n   The B4 element can be implemented in a host\
    \ and CPE in conjunction\n   with other technologies such as native dual-stack.\
    \  The host and the\n   CPE SHOULD select to start only one technology during\
    \ initialization.\n   For example, if the CPE selects to start in native dual-stack\
    \ mode,\n   it SHOULD NOT initialize the B4 element.  This selection process is\n\
    \   out of scope for this document.\n"
- title: 5.7.  Well-Known IPv4 Address
  contents:
  - "5.7.  Well-Known IPv4 Address\n   Any locally unique IPv4 address could be configured\
    \ on the IPv4-in-\n   IPv6 tunnel to represent the B4 element.  Configuring such\
    \ an address\n   is often necessary when the B4 element is sourcing IPv4 datagrams\n\
    \   directly over the tunnel.  In order to avoid conflicts with any other\n  \
    \ address, IANA has defined a well-known range, 192.0.0.0/29.\n   192.0.0.0 is\
    \ the reserved subnet address.  192.0.0.1 is reserved for\n   the AFTR element,\
    \ and 192.0.0.2 is reserved for the B4 element.  If a\n   service provider has\
    \ a special configuration that prevents the B4\n   element from using 192.0.0.2,\
    \ the B4 element MAY use any other\n   addresses within the 192.0.0.0/29 range.\n\
    \   Note: A range of addresses has been reserved for this purpose.  The\n   intent\
    \ is to accommodate nodes implementing multiple B4 elements.\n"
- title: 6.  AFTR Element
  contents:
  - '6.  AFTR Element

    '
- title: 6.1.  Definition
  contents:
  - "6.1.  Definition\n   An AFTR element is the combination of an IPv4-in-IPv6 tunnel\
    \ endpoint\n   and an IPv4-IPv4 NAT implemented on the same node.\n"
- title: 6.2.  Encapsulation
  contents:
  - "6.2.  Encapsulation\n   The tunnel is a point-to-multipoint IPv4-in-IPv6 tunnel\
    \ ending at the\n   B4 elements.\n   See Section 7.1 for additional tunneling\
    \ considerations.\n   Note: At this point, DS-Lite only defines IPv4-in-IPv6 tunnels;\n\
    \   however, other types of encapsulation could be defined in the future.\n"
- title: 6.3.  Fragmentation and Reassembly
  contents:
  - "6.3.  Fragmentation and Reassembly\n   As noted previously, fragmentation and\
    \ reassembly need to be taken\n   care of by the tunnel endpoints.  As such, the\
    \ AFTR MUST perform\n   fragmentation and reassembly if the underlying link MTU\
    \ cannot\n   accommodate the encapsulation overhead.  Fragmentation MUST happen\n\
    \   after the encapsulation on the IPv6 packet.  Reassembly MUST happen\n   before\
    \ the decapsulation of the IPv6 header.  A detailed procedure\n   has been specified\
    \ in [RFC2473] Section 7.2.\n   Fragmentation at the Tunnel Entry-Point is a lightweight\
    \ operation.\n   In contrast, reassembly at the Tunnel Exit-Point can be expensive.\n\
    \   When the Tunnel Exit-Point receives the first fragmented packet, it\n   must\
    \ wait for the second fragmented packet to arrive in order to\n   reassemble the\
    \ two fragmented IPv6 packets for decapsulation.  This\n   requires the Tunnel\
    \ Exit-Point to buffer and keep track of fragmented\n   packets.  Consider that\
    \ the AFTR is the Tunnel Exit-Point for many\n   tunnels.  If many devices simultaneously\
    \ source a large number of\n   fragmented packets through the AFTR to its managed\
    \ B4 elements, this\n   will require the AFTR to buffer and consume enormous resources\
    \ to\n   keep track of the flows.  This reassembly process will significantly\n\
    \   impact the AFTR's performance.  However, this impact only happens\n   when\
    \ many clients simultaneously source large IPv4 packets.  Since we\n   believe\
    \ that the majority of the clients will receive large IPv4\n   packets (such as\
    \ watching video streams) instead of sourcing large\n   IPv4 packets (such as\
    \ sourcing video streams), reassembly is only a\n   fraction of the overall AFTR's\
    \ workload.\n   When the AFTR's resources are running below a pre-defined threshold,\n\
    \   the AFTR SHOULD generate a notification to the administrator before\n   the\
    \ resources are completely exhausted.  The threshold and\n   notification procedures\
    \ are implementation dependent and are out of\n   scope for this document.\n \
    \  Methods to avoid fragmentation, such as rewriting the TCP Maximum\n   Segment\
    \ Size (MSS) option or using technologies such as the\n   Subnetwork Encapsulation\
    \ and Adaptation Layer as defined in\n   [RFC5320], are out of scope for this\
    \ document.\n"
- title: 6.4.  DNS
  contents:
  - "6.4.  DNS\n   As noted previously, a DS-Lite node implementing a B4 element will\n\
    \   perform DNS resolution over IPv6.  As a result, DNS packets are not\n   expected\
    \ to go through the AFTR element.\n"
- title: 6.5.  Well-Known IPv4 Address
  contents:
  - "6.5.  Well-Known IPv4 Address\n   The AFTR SHOULD use the well-known IPv4 address\
    \ 192.0.0.1 reserved by\n   IANA to configure the IPv4-in-IPv6 tunnel.  That address\
    \ can then be\n   used to report ICMP problems and will appear in traceroute outputs.\n"
- title: 6.6.  Extended Binding Table
  contents:
  - "6.6.  Extended Binding Table\n   The NAT binding table of the AFTR element is\
    \ extended to include the\n   source IPv6 address of the incoming packets.  This\
    \ IPv6 address is\n   used to disambiguate between the overlapping IPv4 address\
    \ space of\n   the service provider customers.\n   By doing a reverse lookup in\
    \ the extended IPv4 NAT binding table, the\n   AFTR knows how to reconstruct the\
    \ IPv6 encapsulation when the packets\n   come back from the Internet.  That way,\
    \ there is no need to keep a\n   static configuration for each tunnel.\n"
- title: 7.  Network Considerations
  contents:
  - '7.  Network Considerations

    '
- title: 7.1.  Tunneling
  contents:
  - "7.1.  Tunneling\n   Tunneling MUST be done in accordance to [RFC2473] and [RFC4213].\n\
    \   Traffic classes ([RFC2474]) from the IPv4 headers MUST be carried\n   over\
    \ to the IPv6 headers and vice versa.\n"
- title: 7.2.  Multicast Considerations
  contents:
  - "7.2.  Multicast Considerations\n   Discussion of multicast is out of scope for\
    \ this document.\n"
- title: 8.  NAT Considerations
  contents:
  - '8.  NAT Considerations

    '
- title: 8.1.  NAT Pool
  contents:
  - "8.1.  NAT Pool\n   The AFTR MAY be provisioned with different NAT pools.  The\
    \ address\n   ranges in the pools may be disjoint but MUST NOT be overlapped.\n\
    \   Operators may implement policies in the AFTR to assign clients in\n   different\
    \ pools.  For example, an AFTR can have two interfaces.  Each\n   interface will\
    \ have a disjoint pool NAT assigned to it.  In another\n   case, a policy implemented\
    \ on the AFTR may specify that one set of\n   B4s will use NAT pool 1 and a different\
    \ set of B4s will use NAT\n   pool 2.\n"
- title: 8.2.  NAT Conformance
  contents:
  - "8.2.  NAT Conformance\n   A Dual-Stack Lite AFTR MUST implement behavior conforming\
    \ to the best\n   current practice, currently documented in [RFC4787], [RFC5508],\
    \ and\n   [RFC5382].  More discussions about carrier-grade NATs can be found in\n\
    \   [LSN-REQS].\n"
- title: 8.3.  Application Level Gateways (ALGs)
  contents:
  - "8.3.  Application Level Gateways (ALGs)\n   The AFTR performs NAT-44 and inherits\
    \ the limitations of NAT.  Some\n   protocols require ALGs in the NAT device to\
    \ traverse through the NAT.\n   For example, Active FTP requires the ALG to work\
    \ properly.  ALGs\n   consume resources, and there are many different types of\
    \ ALGs.  The\n   AFTR is a shared network device that supports a large number\
    \ of B4\n   elements.  It is impossible for the AFTR to implement every current\n\
    \   and future ALG.\n"
- title: 8.4.  Sharing Global IPv4 Addresses
  contents:
  - "8.4.  Sharing Global IPv4 Addresses\n   The AFTR shares a single IP with multiple\
    \ users.  This helps to\n   increase the IPv4 address utilization.  However, it\
    \ also brings some\n   issues such as logging and lawful intercept.  More considerations\
    \ on\n   sharing the port space of IPv4 addresses can be found in [RFC6269].\n"
- title: 8.5.  Port Forwarding / Keep Alive
  contents:
  - "8.5.  Port Forwarding / Keep Alive\n   The PCP working group is standardizing\
    \ a control plane to the\n   carrier-grade NAT [LSN-REQS] in the IETF.  The Port\
    \ Control Protocol\n   (PCP) enables applications to directly negotiate with the\
    \ NAT to open\n   ports and negotiate lifetime values to avoid keep-alive traffic.\n\
    \   More on PCP can be found in [PCP-BASE].\n"
- title: 9.  Acknowledgements
  contents:
  - "9.  Acknowledgements\n   The authors would like to acknowledge the role of Mark\
    \ Townsley for\n   his input on the overall architecture of this technology by\
    \ pointing\n   this work in the direction of [SNAT].  Note that this document\n\
    \   results from a merging of [DURAND-DS-LITE] and [SNAT].  Also to be\n   acknowledged\
    \ are the many discussions with a number of people\n   including Shin Miyakawa,\
    \ Katsuyasu Toyama, Akihide Hiura, Takashi\n   Uematsu, Tetsutaro Hara, Yasunori\
    \ Matsubayashi, and Ichiro Mizukoshi.\n   The authors would also like to thank\
    \ David Ward, Jari Arkko, Thomas\n   Narten, and Geoff Huston for their constructive\
    \ feedback.  Special\n   thanks go to Dave Thaler and Dan Wing for their reviews\
    \ and comments.\n"
- title: 10.  IANA Considerations
  contents:
  - "10.  IANA Considerations\n   Per this document, IANA has allocated a well-known\
    \ IPv4 192.0.0.0/29\n   network prefix.  That range is used to number the Dual-Stack\
    \ Lite\n   interfaces.  Reserving a /29 allows for 6 possible interfaces on a\n\
    \   multi-home node.  The IPv4 address 192.0.0.1 is reserved as the IPv4\n   address\
    \ of the default router for such Dual-Stack Lite hosts.\n"
- title: 11.  Security Considerations
  contents:
  - "11.  Security Considerations\n   Security issues associated with NAT have long\
    \ been documented.  See\n   [RFC2663] and [RFC2993].\n   However, moving the NAT\
    \ functionality from the CPE to the core of the\n   service provider network and\
    \ sharing IPv4 addresses among customers\n   create additional requirements when\
    \ logging data for abuse usage.\n   With any architecture where an IPv4 address\
    \ does not uniquely\n   represent an end host, IPv4 addresses and timestamps are\
    \ no longer\n   sufficient to identify a particular broadband customer.  The AFTR\n\
    \   should have the capability to log the tunnel-id, protocol, ports/IP\n   addresses,\
    \ and the creation time of the NAT binding to uniquely\n   identify the user sessions.\
    \  Exact details of what is logged are\n   implementation specific and out of\
    \ scope for this document.\n   The AFTR performs translation functions for interior\
    \ IPv4 hosts using\n   RFC 1918 addresses or the IANA reserved address range (192.0.0.0/29).\n\
    \   In some circumstances, an ISP may provision policies in the AFTR and\n   instruct\
    \ the AFTR to bypass translation functions based on <IPv4\n   Address, port number,\
    \ protocol>.  When the AFTR receives a packet\n   with matching information of\
    \ the policy from the interior host, the\n   AFTR can simply forward the packet\
    \ without translation.  The\n   addresses, ports, and protocol information must\
    \ be provisioned on the\n   AFTR before receiving the packet.  The provisioning\
    \ mechanism is out\n   of scope for this specification.\n   When decapsulating\
    \ packets, the AFTR MUST only forward packets\n   sourced by RFC 1918 addresses,\
    \ an IANA reserved address range, or any\n   other out-of-band pre-authorized\
    \ addresses.  The AFTR MUST drop all\n   other packets.  This prevents rogue devices\
    \ from launching denial-of-\n   service attacks using unauthorized public IPv4\
    \ addresses in the IPv4\n   source header field or an unauthorized transport port\
    \ range in the\n   IPv4 transport header field.  For example, rogue devices could\n\
    \   bombard a public web server by launching a TCP SYN ACK attack\n   [RFC4987].\
    \  The victim will receive TCP SYN from random IPv4 source\n   addresses at a\
    \ rapid rate and deny TCP services to legitimate users.\n   With IPv4 addresses\
    \ shared by multiple users, ports become a critical\n   resource.  As such, some\
    \ mechanisms need to be put in place by an\n   AFTR to limit port usage, either\
    \ by rate-limiting new connections or\n   putting a hard limit on the maximum\
    \ number of ports usable by a\n   single user.  If this number is high enough,\
    \ it should not interfere\n   with normal usage and still provide reasonable protection\
    \ of the\n   shared pool.  More considerations on sharing IPv4 addresses can be\n\
    \   found in [RFC6269].  Other considerations and recommendations on\n   logging\
    \ can be found in [RFC6302].\n   AFTRs should support ways to limit service only\
    \ to registered\n   customers.  One simple option is to implement an IPv6 ingress\
    \ filter\n   on the AFTR's tunnel interface to accept only the IPv6 address range\n\
    \   defined in the filter.\n"
- title: 12.  References
  contents:
  - '12.  References

    '
- title: 12.1.  Normative References
  contents:
  - "12.1.  Normative References\n   [RFC2119]   Bradner, S., \"Key words for use\
    \ in RFCs to Indicate\n               Requirement Levels\", BCP 14, RFC 2119,\
    \ March 1997.\n   [RFC2473]   Conta, A. and S. Deering, \"Generic Packet Tunneling\
    \ in\n               IPv6 Specification\", RFC 2473, December 1998.\n   [RFC2474]\
    \   Nichols, K., Blake, S., Baker, F., and D. Black,\n               \"Definition\
    \ of the Differentiated Services Field (DS\n               Field) in the IPv4\
    \ and IPv6 Headers\", RFC 2474,\n               December 1998.\n   [RFC4213] \
    \  Nordmark, E. and R. Gilligan, \"Basic Transition\n               Mechanisms\
    \ for IPv6 Hosts and Routers\", RFC 4213,\n               October 2005.\n   [RFC5625]\
    \   Bellis, R., \"DNS Proxy Implementation Guidelines\",\n               BCP 152,\
    \ RFC 5625, August 2009.\n   [RFC6334]   Hankins, D. and T. Mrugalski, \"Dynamic\
    \ Host Configuration\n               Protocol for IPv6 (DHCPv6) Option for Dual-Stack\
    \ Lite\",\n               RFC 6334, August 2011.\n"
- title: 12.2.  Informative References
  contents:
  - "12.2.  Informative References\n   [DURAND-DS-LITE]\n               Durand, A.,\
    \ \"Dual-stack lite broadband deployments post\n               IPv4 exhaustion\"\
    , Work in Progress, July 2008.\n   [LSN-REQS]  Perreault, S., Ed., Yamagata, I.,\
    \ Miyakawa, S., Nakagawa,\n               A., and H. Ashida, \"Common requirements\
    \ for Carrier Grade\n               NAT (CGN)\", Work in Progress, July 2011.\n\
    \   [PCP-BASE]  Wing, D., Ed., Cheshire, S., Boucadair, M., Penno, R.,\n     \
    \          and P. Selkirk, \"Port Control Protocol (PCP)\", Work\n           \
    \    in Progress, July 2011.\n   [RFC1191]   Mogul, J. and S. Deering, \"Path\
    \ MTU discovery\", RFC 1191,\n               November 1990.\n   [RFC1918]   Rekhter,\
    \ Y., Moskowitz, B., Karrenberg, D., de Groot, G.,\n               and E. Lear,\
    \ \"Address Allocation for Private Internets\",\n               BCP 5, RFC 1918,\
    \ February 1996.\n   [RFC2663]   Srisuresh, P. and M. Holdrege, \"IP Network Address\n\
    \               Translator (NAT) Terminology and Considerations\",\n         \
    \      RFC 2663, August 1999.\n   [RFC2993]   Hain, T., \"Architectural Implications\
    \ of NAT\", RFC 2993,\n               November 2000.\n   [RFC4033]   Arends, R.,\
    \ Austein, R., Larson, M., Massey, D., and S.\n               Rose, \"DNS Security\
    \ Introduction and Requirements\",\n               RFC 4033, March 2005.\n   [RFC4787]\
    \   Audet, F., Ed., and C. Jennings, \"Network Address\n               Translation\
    \ (NAT) Behavioral Requirements for Unicast\n               UDP\", BCP 127, RFC\
    \ 4787, January 2007.\n   [RFC4987]   Eddy, W., \"TCP SYN Flooding Attacks and\
    \ Common\n               Mitigations\", RFC 4987, August 2007.\n   [RFC5320] \
    \  Templin, F., Ed., \"The Subnetwork Encapsulation and\n               Adaptation\
    \ Layer (SEAL)\", RFC 5320, February 2010.\n   [RFC5382]   Guha, S., Ed., Biswas,\
    \ K., Ford, B., Sivakumar, S., and\n               P.  Srisuresh, \"NAT Behavioral\
    \ Requirements for TCP\",\n               BCP 142, RFC 5382, October 2008.\n \
    \  [RFC5508]   Srisuresh, P., Ford, B., Sivakumar, S., and S. Guha, \"NAT\n  \
    \             Behavioral Requirements for ICMP\", BCP 148, RFC 5508,\n       \
    \        April 2009.\n   [RFC5571]   Storer, B., Pignataro, C., Ed., Dos Santos,\
    \ M., Stevant,\n               B., Ed., Toutain, L., and J. Tremblay, \"Softwire\
    \ Hub and\n               Spoke Deployment Framework with Layer Two Tunneling\n\
    \               Protocol Version 2 (L2TPv2)\", RFC 5571, June 2009.\n   [RFC6269]\
    \   Ford, M., Boucadair, M., Durand, A., Levis, P., and P.\n               Roberts,\
    \ \"Issues with IP Address Sharing\", RFC 6269,\n               June 2011.\n \
    \  [RFC6302]   Durand, A., Gashinsky, I., Lee, D., and S. Sheppard,\n        \
    \       \"Logging Recommendations for Internet-Facing Servers\",\n           \
    \    BCP 162, RFC 6302, June 2011.\n   [SNAT]      Droms, R. and B. Haberman,\
    \ \"Softwires Network Address\n               Translation (SNAT)\", Work in Progress,\
    \ July 2008.\n"
- title: Appendix A.  Deployment Considerations
  contents:
  - 'Appendix A.  Deployment Considerations

    '
- title: A.1.  AFTR Service Distribution and Horizontal Scaling
  contents:
  - "A.1.  AFTR Service Distribution and Horizontal Scaling\n   One of the key benefits\
    \ of the Dual-Stack Lite technology lies in the\n   fact that it is a tunnel-based\
    \ solution.  As such, tunnel endpoints\n   can be anywhere in the service provider\
    \ network.\n   Using the DHCPv6 tunnel endpoint option [RFC6334], service providers\n\
    \   can create groups of users sharing the same AFTR.  Those groups can\n   be\
    \ merged or divided at will.  This leads to a horizontally scaled\n   solution,\
    \ where more capacity is added with more AFTRs.  As those\n   groups of users\
    \ can evolve over time, it is best to make sure that\n   AFTRs do not require\
    \ per-user configuration in order to provide\n   service.\n"
- title: A.2.  Horizontal Scaling
  contents:
  - "A.2.  Horizontal Scaling\n   A service provider can start using just a few centralized\
    \ AFTRs.\n   Later, when more capacity is needed, more AFTRs can be added and\n\
    \   pushed closer to the edges of the access network.\n"
- title: A.3.  High Availability
  contents:
  - "A.3.  High Availability\n   An important element in the design of the Dual-Stack\
    \ Lite technology\n   is the simplicity of implementation on the customer side.\
    \  An IP4-in-\n   IPv6 tunnel and a default route over it in the B4 element are\
    \ all\n   that is needed to get IPv4 connectivity.  It is assumed that high\n\
    \   availability is the responsibility of the service provider, not the\n   customer\
    \ devices implementing Dual-Stack Lite.  As such, a single\n   IPv6 address of\
    \ the tunnel endpoint is provided in the DHCPv6 option\n   defined in [RFC6334].\
    \  Specific means to achieve high availability on\n   the service provider side\
    \ are outside the scope of this\n   specification.\n"
- title: A.4.  Logging
  contents:
  - "A.4.  Logging\n   DS-Lite AFTR implementation should offer the functionality\
    \ to log NAT\n   binding creations or other ways to keep track of the ports/IP\n\
    \   addresses used by customers.  This is both to support\n   troubleshooting,\
    \ which is very important to service providers trying\n   to figure out why something\
    \ may not be working, and to meet region-\n   specific requirements for responding\
    \ to legally binding requests for\n   information from law enforcement authorities.\n"
- title: Appendix B.  Examples
  contents:
  - 'Appendix B.  Examples

    '
- title: B.1.  Gateway-Based Architecture
  contents:
  - "B.1.  Gateway-Based Architecture\n   This architecture is targeted at residential\
    \ broadband deployments\n   but can be adapted easily to other types of deployment\
    \ where the\n   installed base of IPv4-only devices is important.\n   Consider\
    \ a scenario where a Dual-Stack Lite CPE is provisioned only\n   with IPv6 in\
    \ the WAN port, not IPv4.  The CPE acts as an IPv4 DHCP\n   server for the LAN\
    \ (wireline and wireless) handing out [RFC1918]\n   addresses.  In addition, the\
    \ CPE may support IPv6 Auto-Configuration\n   and/or a DHCPv6 server for the LAN.\
    \  When an IPv4-only device\n   connects to the CPE, that CPE will hand out a\
    \ [RFC1918] address to\n   the device.  When a dual-stack-capable device connects\
    \ to the CPE,\n   that CPE will hand out a [RFC1918] address and a global IPv6\
    \ address\n   to the device.  Besides, the CPE will create an IPv4-in-IPv6 softwire\n\
    \   tunnel [RFC5571] to an AFTR that resides in the service provider\n   network.\n\
    \   When the device accesses IPv6 service, it will send the IPv6 datagram\n  \
    \ to the CPE natively.  The CPE will route the traffic upstream to the\n   IPv6\
    \ default gateway.\n   When the device accesses IPv4 service, it will source the\
    \ IPv4\n   datagram with the [RFC1918] address and send the IPv4 datagram to the\n\
    \   CPE.  The CPE will encapsulate the IPv4 datagram inside the IPv4-in-\n   IPv6\
    \ softwire tunnel and forward the IPv6 datagram to the AFTR.  This\n   is in contrast\
    \ to what the CPE normally does today, which is to NAT\n   the [RFC1918] address\
    \ to the public IPv4 address and route the\n   datagram upstream.  When the AFTR\
    \ receives the IPv6 datagram, it will\n   decapsulate the IPv6 header and perform\
    \ an IPv4-to-IPv4 NAT on the\n   source address.\n   As illustrated in Figure\
    \ 1, this Dual-Stack Lite deployment model\n   consists of three components: the\
    \ Dual-Stack Lite home router with a\n   B4 element, the AFTR, and a softwire\
    \ between the B4 element acting as\n   softwire initiator (SI) [RFC5571] in the\
    \ Dual-Stack Lite home router\n   and the softwire concentrator (SC) [RFC5571]\
    \ in the AFTR.  The AFTR\n   performs IPv4-IPv4 NAT translations to multiplex\
    \ multiple subscribers\n   through a pool of global IPv4 addresses.  Overlapping\
    \ address spaces\n   used by subscribers are disambiguated through the identification\
    \ of\n   tunnel endpoints.\n                   +-----------+\n               \
    \    |    Host   |\n                   +-----+-----+\n                       \
    \  |10.0.0.1\n                         |\n                         |\n       \
    \                  |10.0.0.2\n               +---------|---------+\n         \
    \      |         |         |\n               |    Home router    |\n         \
    \      |+--------+--------+|\n               ||       B4        ||\n         \
    \      |+--------+--------+|\n               +--------|||--------+\n         \
    \               |||2001:db8:0:1::1\n                        |||\n            \
    \            |||<-IPv4-in-IPv6 softwire\n                        |||\n       \
    \          -------|||-------\n               /        |||        \\\n        \
    \      |   ISP core network  |\n               \\        |||        /\n      \
    \           -------|||-------\n                        |||\n                 \
    \       |||2001:db8:0:2::1\n               +--------|||--------+\n           \
    \    |        AFTR       |\n               |+--------+--------+|\n           \
    \    ||   Concentrator  ||\n               |+--------+--------+|\n           \
    \    |       |NAT|       |\n               |       +-+-+       |\n           \
    \    +---------|---------+\n                         |192.0.2.1\n            \
    \             |\n                 --------|--------\n               /        \
    \ |         \\\n              |       Internet      |\n               \\     \
    \    |         /\n                 --------|--------\n                       \
    \  |\n                         |198.51.100.1\n                   +-----+-----+\n\
    \                   | IPv4 Host |\n                   +-----------+\n        \
    \           Figure 1: Gateway-Based Architecture\n   Notes:\n   o  The Dual-Stack\
    \ Lite home router is not required to be on the same\n      link as the host.\n\
    \   o  The Dual-Stack Lite home router could be replaced by a Dual-Stack\n   \
    \   Lite router in the service provider network.\n   The resulting solution accepts\
    \ an IPv4 datagram that is translated\n   into an IPv4-in-IPv6 softwire datagram\
    \ for transmission across the\n   softwire.  At the corresponding endpoint, the\
    \ IPv4 datagram is\n   decapsulated, and the translated IPv4 address is inserted\
    \ based on a\n   translation from the softwire.\n"
- title: B.1.1.  Example Message Flow
  contents:
  - "B.1.1.  Example Message Flow\n   In the example shown in Figure 2, the translation\
    \ tables in the AFTR\n   are configured to forward between IP/TCP (10.0.0.1/10000)\
    \ and IP/TCP\n   (192.0.2.1/5000).  That is, a datagram received by the Dual-Stack\n\
    \   Lite home router from the host at address 10.0.0.1, using TCP DST\n   port\
    \ 10000, will be translated to a datagram with IPv4 SRC address\n   192.0.2.1\
    \ and TCP SRC port 5000 in the Internet.\n                   +-----------+\n \
    \                  |    Host   |\n                   +-----+-----+\n         \
    \             |  |10.0.0.1\n      IPv4 datagram 1 |  |\n                     \
    \ |  |\n                      v  |10.0.0.2\n               +---------|---------+\n\
    \               |         |         |\n               |    home router    |\n\
    \               |+--------+--------+|\n               ||        B4       ||\n\
    \               |+--------+--------+|\n               +--------|||--------+\n\
    \                      | |||2001:db8:0:1::1\n       IPv6 datagram 2| |||\n   \
    \                   | |||<-IPv4-in-IPv6 softwire\n                 -----|-|||-------\n\
    \               /      | |||        \\\n              |   ISP core network  |\n\
    \               \\      | |||        /\n                 -----|-|||-------\n \
    \                     | |||\n                      | |||2001:db8:0:2::1\n    \
    \           +------|-|||--------+\n               |      | AFTR       |\n    \
    \           |      v |||        |\n               |+--------+--------+|\n    \
    \           ||  Concentrator   ||\n               |+--------+--------+|\n    \
    \           |       |NAT|       |\n               |       +-+-+       |\n    \
    \           +---------|---------+\n                      |  |192.0.2.1\n     \
    \ IPv4 datagram 3 |  |\n                      |  |\n                 -----|--|--------\n\
    \               /      |  |         \\\n              |       Internet      |\n\
    \               \\      |  |         /\n                 -----|--|--------\n \
    \                     |  |\n                      v  |198.51.100.1\n         \
    \          +-----+-----+\n                   | IPv4 Host |\n                 \
    \  +-----------+\n                        Figure 2: Outbound Datagram\n      \
    \     +-----------------+--------------+-----------------+\n           |     \
    \   Datagram | Header field | Contents        |\n           +-----------------+--------------+-----------------+\n\
    \           | IPv4 datagram 1 |     IPv4 Dst | 198.51.100.1    |\n           |\
    \                 |     IPv4 Src | 10.0.0.1        |\n           |           \
    \      |      TCP Dst | 80              |\n           |                 |    \
    \  TCP Src | 10000           |\n           | --------------- | ------------ |\
    \ -------------   |\n           | IPv6 datagram 2 |     IPv6 Dst | 2001:db8:0:2::1\
    \ |\n           |                 |     IPv6 Src | 2001:db8:0:1::1 |\n       \
    \    |                 |     IPv4 Dst | 198.51.100.1    |\n           |      \
    \           |     IPv4 Src | 10.0.0.1        |\n           |                 |\
    \      TCP Dst | 80              |\n           |                 |      TCP Src\
    \ | 10000           |\n           | --------------- | ------------ | -------------\
    \   |\n           | IPv4 datagram 3 |     IPv4 Dst | 198.51.100.1    |\n     \
    \      |                 |     IPv4 Src | 192.0.2.1       |\n           |    \
    \             |      TCP Dst | 80              |\n           |               \
    \  |      TCP Src | 5000            |\n           +-----------------+--------------+-----------------+\n\
    \                         Datagram Header Contents\n   When datagram 1 is received\
    \ by the Dual-Stack Lite home router, the\n   B4 element encapsulates the datagram\
    \ in datagram 2 and forwards it to\n   the Dual-Stack Lite carrier-grade NAT over\
    \ the softwire.\n   When the tunnel concentrator in the AFTR receives datagram\
    \ 2, it\n   forwards the IPv4 datagram to the NAT, which determines from its NAT\n\
    \   table that the datagram received on the softwire with TCP SRC\n   port 10000\
    \ should be translated to datagram 3 with IPv4 SRC address\n   192.0.2.1 and TCP\
    \ SRC port 5000.\n   Figure 3 shows an inbound message received at the AFTR. \
    \ When the NAT\n   function in the AFTR receives datagram 1, it looks up the IP/TCP\
    \ DST\n   information in its translation table.  In the example in Figure 3,\n\
    \   the NAT changes the TCP DST port to 10000, sets the IP DST address to\n  \
    \ 10.0.0.1, and forwards the datagram to the softwire.  The B4 in the\n   home\
    \ router decapsulates the IPv4 datagram from the inbound softwire\n   datagram\
    \ and forwards it to the host.\n                   +-----------+\n           \
    \        |    Host   |\n                   +-----+-----+\n                   \
    \   ^  |10.0.0.1\n      IPv4 datagram 3 |  |\n                      |  |\n   \
    \                   |  |10.0.0.2\n               +---------|---------+\n     \
    \          |       +-+-+       |\n               |    home router    |\n     \
    \          |+--------+--------+|\n               ||        B4       ||\n     \
    \          |+--------+--------+|\n               +--------|||--------+\n     \
    \                 ^ |||2001:db8:0:1::1\n      IPv6 datagram 2 | |||\n        \
    \              | |||<-IPv4-in-IPv6 softwire\n                      | |||\n   \
    \              -----|-|||-------\n               /      | |||        \\\n    \
    \          |   ISP core network  |\n               \\      | |||        /\n  \
    \               -----|-|||-------\n                      | |||\n             \
    \         | |||2001:db8:0:2::1\n               +------|-|||--------+\n       \
    \        |       AFTR        |\n               |+--------+--------+|\n       \
    \        ||   Concentrator  ||\n               |+--------+--------+|\n       \
    \        |       |NAT|       |\n               |       +-+-+       |\n       \
    \        +---------|---------+\n                      ^  |192.0.2.1\n      IPv4\
    \ datagram 1 |  |\n                      |  |\n                 -----|--|--------\n\
    \               /      |  |         \\\n              |       Internet      |\n\
    \               \\      |  |         /\n                 -----|--|--------\n \
    \                     |  |\n                      |  |198.51.100.1\n         \
    \          +-----+-----+\n                   | IPv4 Host |\n                 \
    \  +-----------+\n                        Figure 3: Inbound Datagram\n       \
    \    +-----------------+--------------+-----------------+\n           |      \
    \  Datagram | Header field | Contents        |\n           +-----------------+--------------+-----------------+\n\
    \           | IPv4 datagram 1 |     IPv4 Dst | 192.0.2.1       |\n           |\
    \                 |     IPv4 Src | 198.51.100.1    |\n           |           \
    \      |      TCP Dst | 5000            |\n           |                 |    \
    \  TCP Src | 80              |\n           | --------------- | ------------ |\
    \ -------------   |\n           | IPv6 datagram 2 |     IPv6 Dst | 2001:db8:0:1::1\
    \ |\n           |                 |     IPv6 Src | 2001:db8:0:2::1 |\n       \
    \    |                 |     IPv4 Dst | 10.0.0.1        |\n           |      \
    \           |     IPv4 Src | 198.51.100.1    |\n           |                 |\
    \      TCP Dst | 10000           |\n           |                 |      TCP Src\
    \ | 80              |\n           | --------------- | ------------ | -------------\
    \   |\n           | IPv4 datagram 3 |     IPv4 Dst | 10.0.0.1        |\n     \
    \      |                 |     IPv4 Src | 198.51.100.1    |\n           |    \
    \             |      TCP Dst | 10000           |\n           |               \
    \  |      TCP Src | 80              |\n           +-----------------+--------------+-----------------+\n\
    \                         Datagram Header Contents\n"
- title: B.1.2.  Translation Details
  contents:
  - "B.1.2.  Translation Details\n   The AFTR has a NAT that translates between softwire/port\
    \ pairs and\n   IPv4-address/port pairs.  The same translation is applied to IPv4\n\
    \   datagrams received on the device's external interface and from the\n   softwire\
    \ endpoint in the device.\n   In Figure 2, the translator network interface in\
    \ the AFTR is on the\n   Internet, and the softwire interface connects to the\
    \ Dual-Stack Lite\n   home router.  The AFTR translator is configured as follows:\n\
    \   Network interface:  Translate IPv4 destination address and TCP\n      destination\
    \ port to the softwire identifier and TCP destination\n      port\n   Softwire\
    \ interface:  Translate softwire identifier and TCP source\n      port to IPv4\
    \ source address and TCP source port\n   Here is how the translation in Figure\
    \ 3 works:\n   o  Datagram 1 is received on the AFTR translator network interface.\n\
    \      The translator looks up the IPv4-address/port pair in its\n      translator\
    \ table, rewrites the IPv4 destination address to\n      10.0.0.1 and the TCP\
    \ source port to 10000, and forwards the\n      datagram to the softwire.\n  \
    \ o  The IPv4 datagram is received on the Dual-Stack Lite home router\n      B4.\
    \  The B4 function extracts the IPv4 datagram, and the Dual-\n      Stack Lite\
    \ home router forwards datagram 3 to the host.\n        +------------------------------------+--------------------+\n\
    \        |         Softwire-Id/IPv4/Prot/Port | IPv4/Prot/Port     |\n       \
    \ +------------------------------------+--------------------+\n        | 2001:db8:0:1::1/10.0.0.1/TCP/10000\
    \ | 192.0.2.1/TCP/5000 |\n        +------------------------------------+--------------------+\n\
    \            Dual-Stack Lite Carrier-Grade NAT Translation Table\n   The Softwire-Id\
    \ is the IPv6 address assigned to the Dual-Stack Lite\n   CPE.  Hosts behind the\
    \ same Dual-Stack Lite home router have the same\n   Softwire-Id.  The source\
    \ IPv4 address is the [RFC1918] address\n   assigned by the Dual-Stack home router\
    \ and is unique to each host\n   behind the CPE.  The AFTR would receive packets\
    \ sourced from\n   different IPv4 addresses in the same softwire tunnel.  The\
    \ AFTR\n   combines the Softwire-Id and IPv4 address/port [Softwire-Id, IPv4+\n\
    \   Port] to uniquely identify the host behind the same Dual-Stack Lite\n   home\
    \ router.\n"
- title: B.2.  Host-Based Architecture
  contents:
  - "B.2.  Host-Based Architecture\n   This architecture is targeted at new, large-scale\
    \ deployments of\n   dual-stack-capable devices implementing a Dual-Stack Lite\
    \ interface.\n   Consider a scenario where a Dual-Stack Lite host device is directly\n\
    \   connected to the service provider network.  The host device is dual-\n   stack\
    \ capable but only provisioned with an IPv6 global address.\n   Besides, the host\
    \ device will pre-configure a well-known IPv4\n   non-routable address; see Section\
    \ 10 (IANA Considerations).  This\n   well-known IPv4 non-routable address is\
    \ similar to the 127.0.0.1\n   loopback address.  Every host device that implements\
    \ Dual-Stack Lite\n   will pre-configure the same address.  This address will\
    \ be used to\n   source the IPv4 datagram when the device accesses IPv4 services.\n\
    \   Besides, the host device will create an IPv4-in-IPv6 softwire tunnel\n   to\
    \ an AFTR.  The carrier-grade NAT will reside in the service\n   provider network.\n\
    \   When the device accesses IPv6 service, the device will send the IPv6\n   datagram\
    \ natively to the default gateway.\n   When the device accesses IPv4 service,\
    \ it will source the IPv4\n   datagram with the well-known non-routable IPv4 address.\
    \  Then, the\n   host device will encapsulate the IPv4 datagram inside the IPv4-in-\n\
    \   IPv6 softwire tunnel and send the IPv6 datagram to the AFTR.  When\n   the\
    \ AFTR receives the IPv6 datagram, it will decapsulate the IPv6\n   header and\
    \ perform IPv4-to-IPv4 NAT on the source address.\n   This scenario works on both\
    \ wireline and wireless networks.  A\n   typical wireless device will connect\
    \ directly to the service provider\n   without a CPE in between.\n   As illustrated\
    \ in Figure 4, this Dual-Stack Lite deployment model\n   consists of three components:\
    \ the Dual-Stack Lite host, the AFTR, and\n   a softwire between the softwire\
    \ initiator B4 in the host and the\n   softwire concentrator in the AFTR.  The\
    \ Dual-Stack Lite host is\n   assumed to have IPv6 service and can exchange IPv6\
    \ traffic with the\n   AFTR.\n   The AFTR performs IPv4-IPv4 NAT translations\
    \ to multiplex multiple\n   subscribers through a pool of global IPv4 addresses.\
    \  Overlapping\n   IPv4 address spaces used by the Dual-Stack Lite hosts are\n\
    \   disambiguated through the identification of tunnel endpoints.\n   In this\
    \ situation, the Dual-Stack Lite host configures the IPv4\n   address 192.0.0.2\
    \ out of the well-known range 192.0.0.0/29 (defined\n   by IANA) on its B4 interface.\
    \  It also configures the first\n   non-reserved IPv4 address of the reserved\
    \ range, 192.0.0.1, as the\n   address of its default gateway.\n             \
    \  +-------------------+\n               |                   |\n             \
    \  |  Host 192.0.0.2   |\n               |+--------+--------+|\n             \
    \  ||        B4       ||\n               |+--------+--------+|\n             \
    \  +--------|||--------+\n                        |||2001:db8:0:1::1\n       \
    \                 |||\n                        |||<-IPv4-in-IPv6 softwire\n  \
    \                      |||\n                 -------|||-------\n             \
    \  /        |||        \\\n              |   ISP core network  |\n           \
    \    \\        |||        /\n                 -------|||-------\n            \
    \            |||\n                        |||2001:db8:0:2::1\n               +--------|||--------+\n\
    \               |       AFTR        |\n               |+--------+--------+|\n\
    \               ||  Concentrator   ||\n               |+--------+--------+|\n\
    \               |       |NAT|       |\n               |       +-+-+       |\n\
    \               +---------|---------+\n                         |192.0.2.1\n \
    \                        |\n                 --------|--------\n             \
    \  /         |         \\\n              |       Internet      |\n           \
    \    \\         |         /\n                 --------|--------\n            \
    \             |\n                         |198.51.100.1\n                   +-----+-----+\n\
    \                   | IPv4 Host |\n                   +-----------+\n        \
    \             Figure 4: Host-Based Architecture\n   The resulting solution accepts\
    \ an IPv4 datagram that is translated\n   into an IPv4-in-IPv6 softwire datagram\
    \ for transmission across the\n   softwire.  At the corresponding endpoint, the\
    \ IPv4 datagram is\n   decapsulated, and the translated IPv4 address is inserted\
    \ based on a\n   translation from the softwire.\n"
- title: B.2.1.  Example Message Flow
  contents:
  - "B.2.1.  Example Message Flow\n   In the example shown in Figure 5, the translation\
    \ tables in the AFTR\n   are configured to forward between IP/TCP (192.0.0.2/10000)\
    \ and IP/TCP\n   (192.0.2.1/5000).  That is, a datagram received from the host\
    \ at\n   address 192.0.0.2, using TCP DST port 10000, will be translated to a\n\
    \   datagram with IPv4 SRC address 192.0.2.1 and TCP SRC port 5000 in the\n  \
    \ Internet.\n               +-------------------+\n               |          \
    \         |\n               |Host 192.0.0.2     |\n               |+--------+--------+|\n\
    \               ||        B4       ||\n               |+--------+--------+|\n\
    \               +--------|||--------+\n                      | |||2001:db8:0:1::1\n\
    \       IPv6 datagram 1| |||\n                      | |||<-IPv4-in-IPv6 softwire\n\
    \                      | |||\n                 -----|-|||-------\n           \
    \    /      | |||        \\\n              |   ISP core network  |\n         \
    \      \\      | |||        /\n                 -----|-|||-------\n          \
    \            | |||\n                      | |||2001:db8:0:2::1\n             \
    \  +------|-|||--------+\n               |      | AFTR       |\n             \
    \  |      v |||        |\n               |+--------+--------+|\n             \
    \  ||  Concentrator   ||\n               |+--------+--------+|\n             \
    \  |       |NAT|       |\n               |       +-+-+       |\n             \
    \  +---------|---------+\n                      |  |192.0.2.1\n      IPv4 datagram\
    \ 2 |  |\n                 -----|--|--------\n               /      |  |     \
    \    \\\n              |       Internet      |\n               \\      |  |  \
    \       /\n                 -----|--|--------\n                      |  |\n  \
    \                    v  |198.51.100.1\n                   +-----+-----+\n    \
    \               | IPv4 Host |\n                   +-----------+\n            \
    \            Figure 5: Outbound Datagram\n           +-----------------+--------------+-----------------+\n\
    \           |        Datagram | Header field | Contents        |\n           +-----------------+--------------+-----------------+\n\
    \           | IPv6 datagram 1 |     IPv6 Dst | 2001:db8:0:2::1 |\n           |\
    \                 |     IPv6 Src | 2001:db8:0:1::1 |\n           |           \
    \      |     IPv4 Dst | 198.51.100.1    |\n           |                 |    \
    \ IPv4 Src | 192.0.0.2       |\n           |                 |      TCP Dst |\
    \ 80              |\n           |                 |      TCP Src | 10000     \
    \      |\n           | --------------- | ------------ | -------------   |\n  \
    \         | IPv4 datagram 2 |     IPv4 Dst | 198.51.100.1    |\n           | \
    \                |     IPv4 Src | 192.0.2.1       |\n           |            \
    \     |      TCP Dst | 80              |\n           |                 |     \
    \ TCP Src | 5000            |\n           +-----------------+--------------+-----------------+\n\
    \                         Datagram Header Contents\n   When sending an IPv4 packet,\
    \ the Dual-Stack Lite host encapsulates it\n   in datagram 1 and forwards it to\
    \ the AFTR over the softwire.\n   When it receives datagram 1, the concentrator\
    \ in the AFTR hands the\n   IPv4 datagram to the NAT, which determines from its\
    \ translation table\n   that the datagram received on the softwire with TCP SRC\
    \ port 10000\n   should be translated to datagram 3 with IPv4 SRC address 192.0.2.1\n\
    \   and TCP SRC port 5000.\n   Figure 6 shows an inbound message received at the\
    \ AFTR.  When the NAT\n   function in the AFTR receives datagram 1, it looks up\
    \ the IP/TCP DST\n   in its translation table.  In the example in Figure 6, the\
    \ NAT\n   translates the TCP DST port to 10000, sets the IP DST address to\n \
    \  192.0.0.2, and forwards the datagram to the softwire.  The B4 inside\n   the\
    \ host decapsulates the IPv4 datagram from the inbound softwire\n   datagram,\
    \ and forwards it to the host's application layer.\n               +-------------------+\n\
    \               |                   |\n               |Host 192.0.0.2     |\n\
    \               |+--------+--------+|\n               ||        B4       ||\n\
    \               |+--------+--------+|\n               +--------|||--------+\n\
    \                      ^ |||2001:db8:0:1::1\n      IPv6 datagram 2 | |||\n   \
    \                   | |||<-IPv4-in-IPv6 softwire\n                      | |||\n\
    \                 -----|-|||-------\n               /      | |||        \\\n \
    \             |   ISP core network  |\n               \\      | |||        /\n\
    \                 -----|-|||-------\n                      | |||\n           \
    \           | |||2001:db8:0:2::1\n               +------|-|||--------+\n     \
    \          |       AFTR        |\n               |      | |||        |\n     \
    \          |+--------+--------+|\n               ||  Concentrator   ||\n     \
    \          |+--------+--------+|\n               |       |NAT|       |\n     \
    \          |       +-+-+       |\n               +---------|---------+\n     \
    \                 ^  |192.0.2.1\n      IPv4 datagram 1 |  |\n                \
    \ -----|--|--------\n               /      |  |         \\\n              |  \
    \     Internet      |\n               \\      |  |         /\n               \
    \  -----|--|--------\n                      |  |\n                      |  |198.51.100.1\n\
    \                   +-----+-----+\n                   | IPv4 Host |\n        \
    \           +-----------+\n                        Figure 6: Inbound Datagram\n\
    \           +-----------------+--------------+-----------------+\n           |\
    \        Datagram | Header field | Contents        |\n           +-----------------+--------------+-----------------+\n\
    \           | IPv4 datagram 1 |     IPv4 Dst | 192.0.2.1       |\n           |\
    \                 |     IPv4 Src | 198.51.100.1    |\n           |           \
    \      |      TCP Dst | 5000            |\n           |                 |    \
    \  TCP Src | 80              |\n           | --------------- | ------------ |\
    \ -------------   |\n           | IPv6 datagram 2 |     IPv6 Dst | 2001:db8:0:1::1\
    \ |\n           |                 |     IPv6 Src | 2001:db8:0:2::1 |\n       \
    \    |                 |     IPv4 Dst | 192.0.0.2       |\n           |      \
    \           |     IPv4 Src | 198.51.100.1    |\n           |                 |\
    \      TCP Dst | 10000           |\n           |                 |      TCP Src\
    \ | 80              |\n           +-----------------+--------------+-----------------+\n\
    \                         Datagram Header Contents\n"
- title: B.2.2.  Translation Details
  contents:
  - "B.2.2.  Translation Details\n   The AFTR translation steps are the same as in\
    \ Appendix B.1.2.  One\n   difference is that all the host-based B4s will use\
    \ the same well-\n   known IPv4 address 192.0.0.2.  To uniquely identify the host-based\n\
    \   B4, the AFTR will use the host-based B4's IPv6 address, which is\n   unique\
    \ for the host.\n       +-------------------------------------+--------------------+\n\
    \       |          Softwire-Id/IPv4/Prot/Port | IPv4/Prot/Port     |\n       +-------------------------------------+--------------------+\n\
    \       | 2001:db8:0:1::1/192.0.0.2/TCP/10000 | 192.0.2.1/TCP/5000 |\n       +-------------------------------------+--------------------+\n\
    \            Dual-Stack Lite Carrier-Grade NAT Translation Table\n   The Softwire-Id\
    \ is the IPv6 address assigned to the Dual-Stack host.\n   Each host has a unique\
    \ Softwire-Id.  The source IPv4 address is one\n   of the well-known IPv4 addresses.\
    \  The AFTR could receive packets\n   from different hosts sourced from the same\
    \ IPv4 well-known address\n   from different softwire tunnels.  Similar to the\
    \ gateway\n   architecture, the AFTR combines the Softwire-Id and IPv4 address/port\n\
    \   [Softwire-Id, IPv4+Port] to uniquely identify the individual host.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Alain Durand\n   Juniper Networks\n   1194 North Mathilda\
    \ Avenue\n   Sunnyvale, CA  94089-1206\n   USA\n   EMail: adurand@juniper.net\n\
    \   Ralph Droms\n   Cisco\n   1414 Massachusetts Avenue\n   Boxborough, MA  01714\n\
    \   USA\n   EMail: rdroms@cisco.com\n   James Woodyatt\n   Apple\n   1 Infinite\
    \ Loop\n   Cupertino, CA  95014\n   USA\n   EMail: jhw@apple.com\n   Yiu L. Lee\n\
    \   Comcast\n   One Comcast Center\n   Philadelphia, PA  19103\n   USA\n   EMail:\
    \ yiu_lee@cable.comcast.com\n"
