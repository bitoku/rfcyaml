- title: __initial_text__
  contents:
  - ''
- title: Independent Submission                                         M. Joseph
  contents:
  - "Independent Submission                                         M. Joseph\n  \
    \              P6R's Secure Shell Public Key Subsystem\n"
- title: Abstract
  contents:
  - "Abstract\n   The Secure Shell (SSH) Public Key Subsystem protocol defines a key\n\
    \   distribution protocol that is limited to provisioning an SSH server\n   with\
    \ a user's public keys.  This document describes a new protocol\n   that builds\
    \ on the protocol defined in RFC 4819 to allow the\n   provisioning of keys and\
    \ certificates to a server using the SSH\n   transport.\n   The new protocol allows\
    \ the calling client to organize keys and\n   certificates in different namespaces\
    \ on a server.  These namespaces\n   can be used by the server to allow a client\
    \ to configure any\n   application running on the server (e.g., SSH, Key Management\n\
    \   Interoperability Protocol (KMIP), Simple Network Management Protocol\n   (SNMP)).\n\
    \   The new protocol provides a server-independent mechanism for clients\n   to\
    \ add public keys, remove public keys, add certificates, remove\n   certificates,\
    \ and list the current set of keys and certificates known\n   by the server by\
    \ namespace (e.g., list all public keys in the SSH\n   namespace).\n   Rights\
    \ to manage keys and certificates in a particular namespace are\n   specific and\
    \ limited to the authorized user and are defined as part\n   of the server's implementation.\
    \  The described protocol is backward\n   compatible to version 2 defined by RFC\
    \ 4819.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This is a contribution to\
    \ the RFC Series, independently of any other\n   RFC stream.  The RFC Editor has\
    \ chosen to publish this document at\n   its discretion and makes no statement\
    \ about its value for\n   implementation or deployment.  Documents approved for\
    \ publication by\n   the RFC Editor are not a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 5741.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc7076.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2013 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \   2. Terminology .....................................................3\n  \
    \ 3. Overview of Extensions to the Public Key Subsystem ..............3\n    \
    \  3.1. Extended Status Codes ......................................4\n      3.2.\
    \ The Version Packet .........................................4\n      3.3. The\
    \ Namespace Attribute ....................................4\n   4. New Operations\
    \ ..................................................5\n      4.1. Adding a Certificate\
    \ .......................................5\n      4.2. Removing a Certificate\
    \ .....................................6\n      4.3. Listing Certificates .......................................6\n\
    \      4.4. Listing Namespaces .........................................7\n  \
    \ 5. Extending Public Key Operations .................................8\n    \
    \  5.1. Adding a Public Key ........................................8\n      5.2.\
    \ Removing a Public Key ......................................8\n      5.3. Listing\
    \ Public Keys ........................................9\n   6. Security Considerations\
    \ .........................................9\n   7. IANA Considerations ............................................10\n\
    \   8. References .....................................................10\n  \
    \    8.1. Normative References ......................................10\n    \
    \  8.2. Informative References ....................................10\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document describes a new protocol that builds on the\
    \ protocol\n   defined in RFC 4819 that can be used to configure public keys and\n\
    \   certificates in an implementation-independent fashion.  The concept\n   of\
    \ a namespace is added to the protocol's operations; it allows the\n   client\
    \ to organize keys and certificates by application or\n   organizational structure.\n\
    \   P6R's Secure Shell Public Key Subsystem has been designed to run on\n   top\
    \ of the Secure Shell transport layer [3] and user authentication\n   protocols\
    \ [4].  It provides a simple mechanism for the client to\n   manage the public\
    \ keys and certificates on the server related to that\n   client.  These keys\
    \ and certificates are normally used for\n   authentication of the client to a\
    \ service, but they can be used for\n   encrypting results back to the client\
    \ as well.  Uploaded keys and\n   certificates are meant to be able to configure\
    \ all protocols running\n   on a server (e.g., SSH, SSL, KMIP [8]) that use keys\
    \ and\n   certificates, as well as the applications that run on a server.\n  \
    \ This document should be read only after reading the Secure Shell\n   Public\
    \ Key Subsystem [1] document.  The new protocol described in\n   this document\
    \ builds on and is meant to be backwards compatible with\n   the protocol described\
    \ in [1].\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and\
    \ \"OPTIONAL\" in this\n   document are to be interpreted as described in RFC\
    \ 2119 [2].\n"
- title: 3.  Overview of Extensions to the Public Key Subsystem
  contents:
  - "3.  Overview of Extensions to the Public Key Subsystem\n   The Public Key Subsystem\
    \ provides a server-independent mechanism for\n   clients to add public keys,\
    \ remove public keys, list the current\n   public keys known by the server, add\
    \ certificates, remove\n   certificates, and list the current set of certificates\
    \ known by the\n   server.  This secure key distribution mechanism is implemented\
    \ by a\n   new SSH subsystem with the name of \"publickey@p6r.com\".\n"
- title: 3.1.  Extended Status Codes
  contents:
  - "3.1.  Extended Status Codes\n   The status code gives the status in a more machine-readable\
    \ format\n   (suitable for localization) and can have the following values:\n\
    \        SSH_PUBLICKEY_CERTIFICATE_NOT_FOUND        192\n        SSH_PUBLICKEY_CERTIFICATE_NOT_SUPPORTED\
    \    193\n        SSH_PUBLICKEY_CERTIFICATE_ALREADY_PRESENT  194\n        SSH_PUBLICKEY_ACTION_NOT_AUTHORIZED\
    \        195\n        SSH_PUBLICKEY_CANNOT_CREATE_NAMESPACE      196\n   The meaning\
    \ of the failure codes is as implied by their names.  See\n   Security Considerations\
    \ for the use of the failure code:\n   SSH_PUBLICKEY_ACTION_NOT_AUTHORIZED.\n"
- title: 3.2.  The Version Packet
  contents:
  - "3.2.  The Version Packet\n   Both sides MUST start a connection by sending a\
    \ version packet that\n   indicates the version of the protocol they are using.\n\
    \        string \"version\"\n        uint32 protocol-version-number\n   This document\
    \ defines version 3 of the new protocol.  We are using\n   version 3 so that it\
    \ can be backward compatible with the protocol\n   defined by RFC 4819 [1].\n"
- title: 3.3.  The Namespace Attribute
  contents:
  - "3.3.  The Namespace Attribute\n   The \"namespace\" attribute is added as an\
    \ extension to what was\n   described in RFC 4819.  The purpose of this attribute\
    \ is to be able\n   to organize the uploaded keys and certificates into groups\
    \ where each\n   group represents an application or organization structure.  This\n\
    \   attribute is a string that should not be longer than 300 characters\n   and\
    \ MUST be specified in UTF-8 format [5].\n   This new protocol uses the \"ssh\"\
    \ namespace for the manipulation of\n   public keys in an SSH server and should\
    \ be considered as the default\n   namespace when none is provided.\n   As a convention,\
    \ namespaces used for protocols are lowercase strings\n   of the protocol's standard\
    \ abbreviation.  For example, \"ssl\" should\n   be the namespace used for the\
    \ Secure Sockets Layer protocol.\n   Namespaces for applications should contain\
    \ the product and vendor's\n   name.  To help determine what namespaces already\
    \ exist on a server, a\n   new operation \"list-namespaces\" is defined in Section\
    \ 4.\n"
- title: 4.  New Operations
  contents:
  - "4.  New Operations\n   P6R's Public Key Subsystem extends the functionality defined\
    \ in RFC\n   4819 with the following operations: add-certificate,\n   remove-certificate,\
    \ list-certificates, and list-namespaces.\n"
- title: 4.1.  Adding a Certificate
  contents:
  - "4.1.  Adding a Certificate\n   If the client wishes to add a certificate, the\
    \ client sends:\n        string    \"add-certificate\"\n        string    certificate\
    \ format name\n        string    certificate blob\n        boolean   overwrite\n\
    \        uint32    attribute-count\n         string    attrib-name\n         string\
    \    attrib-value\n         bool      critical\n       repeated attribute-count\
    \ times\n   This request MUST include at least the \"namespace\" attribute so\
    \ that\n   the server knows where to save the certificate.  Only one namespace\n\
    \   attribute can be used per an add-certificate request.  It is possible\n  \
    \ for the same user to save the same certificate into multiple\n   namespaces,\
    \ but this must be done with several separate\n   add-certificate requests.\n\
    \   If the namespace appearing in an add-certificate request does not\n   already\
    \ exist on a server, then it is created by this operation.\n   However, if the\
    \ user is not authorized to create a namespace, the\n   server MUST return SSH_PUBLICKEY_CANNOT_CREATE_NAMESPACE.\n\
    \   If the overwrite field is false and the specified certificate already\n  \
    \ exists in the given namespace, the server MUST return\n   SSH_PUBLICKEY_CERTIFICATE_ALREADY_PRESENT.\
    \  If the server returns\n   this, the client SHOULD provide an option to the\
    \ user to overwrite\n   the certificate.  If the overwrite field is true and the\
    \ specified\n   key already exists in the given namespace but cannot be overwritten,\n\
    \   the server MUST return SSH_PUBLICKEY_ACCESS_DENIED.\n   However, a user may\
    \ not be authorized to add a certificate to the\n   specified namespace.  If the\
    \ user does not have permission to add a\n   certificate, then the server MUST\
    \ return\n   SSH_PUBLICKEY_ACTION_NOT_AUTHORIZED.\n   Examples of possible \"\
    certificate format names\" are: \"X509\",\n   \"pgp-sign-rsa\", and \"pgp-sign-dss\"\
    .  The format of the public key and\n   certificate blobs are detailed in Section\
    \ 6.6, \"Public Key\n   Algorithms\", of the SSH Transport Protocol document [3],\
    \ where X.509\n   certificates are to be encoded using a DER format [6] [7] in\
    \ a\n   certificate blob.\n"
- title: 4.2.  Removing a Certificate
  contents:
  - "4.2.  Removing a Certificate\n   If the client wishes to remove a certificate,\
    \ the client sends:\n        string    \"remove-certificate\"\n        string\
    \    certificate format name\n        string    certificate blob\n        uint32\
    \    attribute-count\n         string    attrib-name\n         string    attrib-value\n\
    \        repeated attribute-count times\n   This request MUST include at least\
    \ the \"namespace\" attribute so that\n   the server knows from where to delete\
    \ the certificate.  Only one\n   namespace attribute can be used per remove-certificate\
    \ request.  The\n   server MUST attempt to remove the certificate from the appropriate\n\
    \   location.\n   However, a user may not be authorized to remove a certificate\
    \ from\n   the specified namespace.  If the user does not have permission to\n\
    \   remove the certificate, then the server MUST return\n   SSH_PUBLICKEY_ACTION_NOT_AUTHORIZED.\n\
    \   Examples of possible \"certificate format names\" are: \"X509\",\n   \"pgp-sign-rsa\"\
    , and \"pgp-sign-dss\".\n"
- title: 4.3.  Listing Certificates
  contents:
  - "4.3.  Listing Certificates\n   If the client wishes to list the known certificates,\
    \ the client\n   sends:\n        string    \"list-certificates\"\n   The server\
    \ will respond with zero or more of the following responses:\n        string \
    \   \"certificate\"\n        string    certificate format name\n        string\
    \    certificate blob\n        uint32    attribute-count\n         string    attrib-name\n\
    \         string    attrib-value\n        repeated attribute-count times\n   There\
    \ is no requirement that the responses be in any particular\n   order.  Whilst\
    \ some server implementations may send the responses in\n   some order, client\
    \ implementations should not rely on responses being\n   in any order.\n   This\
    \ response MUST include at least the \"namespace\" attribute so that\n   a client\
    \ can tell in which namespace the certificate resides.  Only\n   one namespace\
    \ attribute can be used per list-certificate request.\n   Following the last \"\
    certificate\" response, a status packet MUST be\n   sent.\n"
- title: 4.4.  Listing Namespaces
  contents:
  - "4.4.  Listing Namespaces\n   If the client wishes to know existing namespaces\
    \ on the server, it\n   sends:\n        string    \"list-namespaces\"\n   The\
    \ server will respond with zero or more of the following responses:\n        string\
    \    \"namespace\"\n        string    namespace name\n   It is possible that not\
    \ all namespaces will be visible to every\n   authenticated user.  In this case,\
    \ the responding server will return\n   a subset of existing namespaces.  See\
    \ Security Considerations below.\n   Following the last \"namespace\" response,\
    \ a status packet MUST be\n   sent.\n"
- title: 5.  Extending Public Key Operations
  contents:
  - "5.  Extending Public Key Operations\n   In addition to adding new operations,\
    \ this document describes\n   extensions to the operations defined in RFC 4819.\n"
- title: 5.1.  Adding a Public Key
  contents:
  - "5.1.  Adding a Public Key\n   If the client wishes to add a public key, the client\
    \ sends:\n        string    \"add\"\n        string    public key algorithm name\n\
    \        string    public key blob\n        boolean   overwrite\n        uint32\
    \    attribute-count\n         string    attrib-name\n         string    attrib-value\n\
    \         bool      critical\n        repeated attribute-count times\n   This\
    \ request MAY include one \"namespace\" attribute so that a client\n   can save\
    \ the public key into a specific namespace.  It is possible\n   for the same user\
    \ to save the same key into multiple namespaces, but\n   this requires multiple\
    \ add requests.\n   If the namespace appearing in an add public key request does\
    \ not\n   already exist on a server, then it is created by this operation.\n \
    \  However, if the user is not authorized to create a namespace the\n   server\
    \ MUST return SSH_PUBLICKEY_CANNOT_CREATE_NAMESPACE,\n"
- title: 5.2.  Removing a Public Key
  contents:
  - "5.2.  Removing a Public Key\n   If the client wishes to remove a public key,\
    \ the client sends:\n        string    \"remove\"\n        string    public key\
    \ algorithm name\n        string    public key blob\n        uint32    attribute-count\n\
    \         string    attrib-name\n         string    attrib-value\n         bool\
    \      critical\n        repeated attribute-count times\n   This extension allows\
    \ attributes to be added to a remove request.\n   This request MAY include one\
    \ \"namespace\" attribute so that a client\n   can remove the public key from\
    \ a specific namespace.\n"
- title: 5.3.  Listing Public Keys
  contents:
  - "5.3.  Listing Public Keys\n   If the client wishes to list the known public keys,\
    \ the client sends:\n        string    \"list\"\n        uint32    attribute-count\n\
    \         string    attrib-name\n         string    attrib-value\n         bool\
    \      critical\n        repeated attribute-count times\n   This extension allows\
    \ attributes to be added to a list request.  This\n   request MAY include one\
    \ \"namespace\" attribute so that a client can\n   list the public keys from a\
    \ specific namespace.\n   The server will respond with zero or more of the following\
    \ responses:\n        string    \"publickey\"\n        string    public key algorithm\
    \ name\n        string    public key blob\n        uint32    attribute-count\n\
    \         string    attrib-name\n         string    attrib-value\n        repeated\
    \ attribute-count times\n   This response MAY include the \"namespace\" attribute\
    \ so that a client\n   can tell in which namespace the key resides.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   This protocol assumes that it is run over a secure\
    \ channel and that\n   the endpoints of the channel have been authenticated. \
    \ Thus, this\n   protocol assumes that it is externally protected from network-level\n\
    \   attacks.\n   This protocol provides a mechanism that allows key and certificate\n\
    \   material to be uploaded and manipulated into a server application.\n   It\
    \ is the responsibility of the server implementation to enforce\n   access controls\
    \ that may be required to limit any particular user's\n   access to the data in\
    \ a namespace.  For example, one user may be\n   allowed to list only the contents\
    \ of a namespace but not add or\n   remove keys or certificates to/from it.  The\
    \ server MUST return\n   SSH_PUBLICKEY_ACTION_NOT_AUTHORIZED when a user's action\
    \ goes against\n   its defined access controls.\n   This protocol requires the\
    \ client to assume that the server will\n   correctly implement and observe attributes\
    \ applied to keys.\n   Implementation errors in the server could cause clients\
    \ to authorize\n   keys and certificates for access they were not intended to\
    \ have, or\n   to apply fewer restrictions than were intended.\n"
- title: 7.  IANA Considerations
  contents:
  - "7.  IANA Considerations\n   Although Section 3.1 defines four new status codes,\
    \ these are in the\n   'Private Use' range of IANA's Publickey Subsystem Status\
    \ Codes\n   registry as defined by Section 6.6.1 (\"Conventions\") in [1].  No\
    \ IANA\n   actions are required for this document.\n"
- title: 8.  References
  contents:
  - '8.  References

    '
- title: 8.1.  Normative References
  contents:
  - "8.1.  Normative References\n   [1] Galbraith, J., Van Dyke, J., and J. Bright,\
    \ \"Secure Shell Public\n       Key Subsystem\", RFC 4819, March 2007.\n   [2]\
    \ Bradner, S., \"Key words for use in RFCs to Indicate Requirement\n       Levels\"\
    , BCP 14, RFC 2119, March 1997.\n   [3] Ylonen, T. and C. Lonvick, Ed., \"The\
    \ Secure Shell (SSH) Transport\n       Layer Protocol\", RFC 4253, January 2006.\n\
    \   [4] Ylonen, T. and C. Lonvick, Ed., \"The Secure Shell (SSH)\n       Authentication\
    \ Protocol\", RFC 4252, January 2006.\n   [5] Yergeau, F., \"UTF-8, a transformation\
    \ format of ISO 10646\", STD\n       63, RFC 3629, November 2003.\n   [6] Cooper,\
    \ D., Santesson, S., Farrell, S., Boeyen, S., Housley, R.,\n       and W. Polk,\
    \ \"Internet X.509 Public Key Infrastructure\n       Certificate and Certificate\
    \ Revocation List (CRL) Profile\", RFC\n       5280, May 2008.\n   [7] ITU-T Recommendation\
    \ X.690 (2002) | ISO/IEC 8825-1:2002,\n       Information technology -- ASN.1\
    \ encoding rules: Specification of\n       Basic Encoding Rules (BER), Canonical\
    \ Encoding Rules (CER) and\n       Distinguished Encoding Rules (DER).\n"
- title: 8.2.  Informative References
  contents:
  - "8.2.  Informative References\n   [8] OASIS, \"Key Management Interoperability\
    \ Protocol (KMIP) 1.1\",\n       January 2013, <http://docs.oasis-open.org/kmip/spec/v1.1/os/\n\
    \       kmip-spec-v1.1-os.html>.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Mark Joseph, PhD\n   P6R, Inc\n   1840 41st Ave\n   Suite\
    \ 102-139\n   Capitola, CA 95010\n   US\n   Phone: +1 888 452 2580 (x702)\n  \
    \ EMail: mark@p6r.com\n   Jim Susoy\n   P6R, Inc\n   1840 41st Ave\n   Suite 102-139\n\
    \   Capitola, CA 95010\n   US\n   Phone: +1 888 452 2580 (x701)\n   EMail: jim@p6r.com\n"
