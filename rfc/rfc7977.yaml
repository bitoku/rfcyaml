- title: __initial_text__
  contents:
  - "                 The WebSocket Protocol as a Transport\n             for the\
    \ Message Session Relay Protocol (MSRP)\n"
- title: Abstract
  contents:
  - "Abstract\n   The WebSocket protocol enables two-way real-time communication\n\
    \   between clients and servers in situations where direct access to TCP\n   and\
    \ UDP is not available (for example, from within JavaScript in a\n   web browser).\
    \  This document specifies a new WebSocket subprotocol as\n   a reliable transport\
    \ mechanism between Message Session Relay Protocol\n   (MSRP) clients and relays\
    \ to enable usage of MSRP in new scenarios.\n   This document normatively updates\
    \ RFCs 4975 and 4976.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 7841.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7977.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2016 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n   This document\
    \ may contain material from IETF Documents or IETF\n   Contributions published\
    \ or made publicly available before November\n   10, 2008.  The person(s) controlling\
    \ the copyright in some of this\n   material may not have granted the IETF Trust\
    \ the right to allow\n   modifications of such material outside the IETF Standards\
    \ Process.\n   Without obtaining an adequate license from the person(s) controlling\n\
    \   the copyright in such materials, this document may not be modified\n   outside\
    \ the IETF Standards Process, and derivative works of it may\n   not be created\
    \ outside the IETF Standards Process, except to format\n   it for publication\
    \ as an RFC or to translate it into languages other\n   than English.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   4\n   2.  Terminology . . . . . . . . . . . . . . . . . . . . .\
    \ . . . .   4\n     2.1.  Definitions . . . . . . . . . . . . . . . . . . . .\
    \ . . .   5\n   3.  WebSocket Protocol Overview . . . . . . . . . . . . . . .\
    \ . .   5\n   4.  The WebSocket MSRP Subprotocol  . . . . . . . . . . . . . .\
    \ .   6\n     4.1.  Handshake . . . . . . . . . . . . . . . . . . . . . . . .\
    \   6\n     4.2.  MSRP Encoding . . . . . . . . . . . . . . . . . . . . . .  \
    \ 7\n   5.  MSRP WebSocket Transport  . . . . . . . . . . . . . . . . . .   7\n\
    \     5.1.  General . . . . . . . . . . . . . . . . . . . . . . . . .   7\n  \
    \   5.2.  Updates to RFC 4975 . . . . . . . . . . . . . . . . . . .   7\n    \
    \   5.2.1.  MSRP URI Transport Parameter  . . . . . . . . . . . .   7\n      \
    \ 5.2.2.  SDP Transport Protocol  . . . . . . . . . . . . . . .   8\n     5.3.\
    \  Updates to RFC 4976 . . . . . . . . . . . . . . . . . . .   8\n       5.3.1.\
    \  AUTH Request Authentication . . . . . . . . . . . . .   8\n   6.  Connection\
    \ Keepalive  . . . . . . . . . . . . . . . . . . . .   9\n   7.  Authentication\
    \  . . . . . . . . . . . . . . . . . . . . . . .   9\n   8.  Examples  . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . .  10\n     8.1.  Authentication \
    \ . . . . . . . . . . . . . . . . . . . . .  10\n       8.1.1.  WebSocket Authentication\
    \  . . . . . . . . . . . . . .  10\n       8.1.2.  MSRP Authentication . . . .\
    \ . . . . . . . . . . . . .  12\n     8.2.  Example Session: MSRP WebSocket Client\
    \ to MSRP Client . .  14\n       8.2.1.  SDP Exchange  . . . . . . . . . . . .\
    \ . . . . . . . .  14\n       8.2.2.  SEND (MSRP WebSocket Client to MSRP Client)\
    \ . . . . .  15\n       8.2.3.  SEND (MSRP Client to MSRP WebSocket Client) .\
    \ . . . .  16\n     8.3.  Example Session: Two MSRP WebSocket Clients . . . .\
    \ . . .  18\n       8.3.1.  SDP Exchange  . . . . . . . . . . . . . . . . . .\
    \ . .  18\n       8.3.2.  SEND  . . . . . . . . . . . . . . . . . . . . . . .\
    \ .  19\n     8.4.  Example Session: MSRP WebSocket Client to MSRP Client\n  \
    \         Using a Relay . . . . . . . . . . . . . . . . . . . . . .  20\n    \
    \   8.4.1.  SDP Exchange  . . . . . . . . . . . . . . . . . . . .  20\n      \
    \ 8.4.2.  SEND  . . . . . . . . . . . . . . . . . . . . . . . .  21\n   9.  Security\
    \ Considerations . . . . . . . . . . . . . . . . . . .  24\n   10. IANA Considerations\
    \ . . . . . . . . . . . . . . . . . . . . .  24\n   11. References  . . . . .\
    \ . . . . . . . . . . . . . . . . . . . .  25\n     11.1.  Normative References\
    \ . . . . . . . . . . . . . . . . . .  25\n     11.2.  Informative References\
    \ . . . . . . . . . . . . . . . . .  25\n   Appendix A.  Implementation Guidelines:\
    \ MSRP WebSocket Client\n                Considerations . . . . . . . . . . .\
    \ . . . . . . . .  27\n   Acknowledgements  . . . . . . . . . . . . . . . . .\
    \ . . . . . . .  27\n   Authors' Addresses  . . . . . . . . . . . . . . . . .\
    \ . . . . . .  28\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The WebSocket [RFC6455] protocol enables message exchange\
    \ between\n   clients and servers on top of a persistent TCP connection (optionally\n\
    \   secured with Transport Layer Security (TLS) [RFC5246]).  The initial\n   protocol\
    \ handshake makes use of HTTP [RFC7230] semantics, allowing\n   the WebSocket\
    \ protocol to reuse existing HTTP infrastructure.\n   Modern web browsers include\
    \ a WebSocket client stack complying with\n   the WebSocket API [WS-API] as specified\
    \ by the W3C.  It is expected\n   that other client applications (those running\
    \ in personal computers\n   and devices such as smartphones) will also make a\
    \ WebSocket client\n   stack available.  The specification in this document enables\
    \ usage of\n   Message Session Relay Protocol [RFC4975] in these scenarios.\n\
    \   This specification defines a new WebSocket subprotocol (as defined in\n  \
    \ Section 1.9 in [RFC6455]) for transporting MSRP messages between a\n   WebSocket\
    \ client and MSRP relay [RFC4976] containing a WebSocket\n   server, a new transport\
    \ for MSRP, and procedures for MSRP clients and\n   relays implementing the WebSocket\
    \ transport.\n   MSRP over WebSocket is well suited for MSRP interactions between\n\
    \   clients and servers.  Common use cases for MSRP over WebSocket\n   include:\n\
    \   o  Human-to-machine messaging\n   o  Client-to-server data exchange (for example,\
    \ application control\n      signaling)\n   o  Human-to-human messaging where\
    \ local policy requires\n      authentication and/or logging\n   MSRP Connection\
    \ Establishment for Media Anchoring (MSRP-CEMA)\n   [RFC6714] is outside of the\
    \ scope of this document, as this document\n   is intended to describe connecting\
    \ to a WebSocket server that is an\n   MSRP relay.\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and\
    \ \"OPTIONAL\" in this\n   document are to be interpreted as described in [RFC2119].\n"
- title: 2.1.  Definitions
  contents:
  - "2.1.  Definitions\n   MSRP WebSocket Client:  An MSRP entity capable of opening\
    \ outbound\n         connections to MSRP relays that are WebSocket servers and\n\
    \         communicating using the WebSocket MSRP subprotocol as defined\n    \
    \     by this document.\n   MSRP WebSocket Server:  An MSRP entity (specifically\
    \ an MSRP relay\n         [RFC4976]) capable of listening for inbound connections\
    \ from\n         WebSocket clients and communicating using the WebSocket MSRP\n\
    \         subprotocol as defined by this document.\n"
- title: 3.  WebSocket Protocol Overview
  contents:
  - "3.  WebSocket Protocol Overview\n   The WebSocket protocol [RFC6455] is a transport\
    \ layer on top of TCP\n   (optionally secured with TLS [RFC5246]) in which both\
    \ the client and\n   server exchange message units in both directions.  The protocol\n\
    \   defines a connection handshake, WebSocket subprotocol and extensions\n   negotiation,\
    \ a frame format for sending application and control data,\n   a masking mechanism,\
    \ and status codes for indicating disconnection\n   causes.\n   The WebSocket\
    \ connection handshake is based on HTTP [RFC7230] and\n   utilizes the HTTP GET\
    \ method with an \"Upgrade\" request.  This is sent\n   by the client and then\
    \ answered by the server (if the negotiation\n   succeeded) with an HTTP 101 status\
    \ code.  Once the handshake is\n   completed, the connection upgrades from HTTP\
    \ to the WebSocket\n   protocol.  This handshake procedure is designed to reuse\
    \ the existing\n   HTTP infrastructure.  During the connection handshake, client\
    \ and\n   server agree on the application protocol to use on top of the\n   WebSocket\
    \ transport.  Such application protocol (also known as a\n   \"WebSocket subprotocol\"\
    ) defines the format and semantics of the\n   messages exchanged by the endpoints.\
    \  This could be a custom protocol\n   or a standardized one (such as the WebSocket\
    \ MSRP subprotocol defined\n   in this document).  Once the HTTP 101 response\
    \ is processed, both\n   client and server reuse the underlying TCP connection\
    \ for sending\n   WebSocket messages and control frames to each other.  Unlike\
    \ plain\n   HTTP, this connection is persistent and can be used for multiple\n\
    \   message exchanges.\n   WebSocket defines message units to be used by applications\
    \ for the\n   exchange of data, so it provides a message boundary-preserving\n\
    \   transport layer.  These message units can contain either UTF-8 text\n   or\
    \ binary data and can be split into multiple WebSocket text/binary\n   transport\
    \ frames as needed by the WebSocket stack.\n   The WebSocket API [WS-API] for\
    \ web browsers only defines callbacks to\n   be invoked upon receipt of an entire\
    \ message unit regardless of\n   whether it was received in a single WebSocket\
    \ frame or split across\n   multiple frames.\n"
- title: 4.  The WebSocket MSRP Subprotocol
  contents:
  - "4.  The WebSocket MSRP Subprotocol\n   The term WebSocket subprotocol refers\
    \ to an application-level\n   protocol layered on top of a WebSocket connection.\
    \  This document\n   specifies the WebSocket MSRP subprotocol for carrying MSRP\
    \ requests\n   and responses through a WebSocket connection.\n"
- title: 4.1.  Handshake
  contents:
  - "4.1.  Handshake\n   The MSRP WebSocket Client and MSRP WebSocket Server negotiate\
    \ usage\n   of the WebSocket MSRP subprotocol during the WebSocket handshake\n\
    \   procedure as defined in Section 1.3 of [RFC6455].  The Client MUST\n   include\
    \ the value \"msrp\" in the Sec-WebSocket-Protocol header in its\n   handshake\
    \ request.  The 101 reply from the Server MUST contain \"msrp\"\n   in its corresponding\
    \ Sec-WebSocket-Protocol header.\n   Below is an example of a WebSocket handshake\
    \ in which the Client\n   requests the WebSocket MSRP subprotocol support from\
    \ the Server:\n     GET / HTTP/1.1\n     Host: a.example.com\n     Upgrade: websocket\n\
    \     Connection: Upgrade\n     Sec-WebSocket-Key: dGhlIHNhbXBsZSBub25jZQ==\n\
    \     Origin: http://www.example.com\n     Sec-WebSocket-Protocol: msrp\n    \
    \ Sec-WebSocket-Version: 13\n   The handshake response from the Server accepting\
    \ the WebSocket MSRP\n   subprotocol would look as follows:\n     HTTP/1.1 101\
    \ Switching Protocols\n     Upgrade: websocket\n     Connection: Upgrade\n   \
    \  Sec-WebSocket-Accept: s3pPLMBiTxaQ9kYGzzhZRbK+xOo=\n     Sec-WebSocket-Protocol:\
    \ msrp\n   Once the negotiation has been completed, the WebSocket connection is\n\
    \   established and can be used for the transport of MSRP requests and\n   responses.\
    \  The WebSocket messages transmitted over this connection\n   MUST conform to\
    \ the negotiated WebSocket subprotocol.\n"
- title: 4.2.  MSRP Encoding
  contents:
  - "4.2.  MSRP Encoding\n   WebSocket messages can be transported in either UTF-8\
    \ text frames or\n   binary frames.  MSRP [RFC4975] allows both text and binary\
    \ bodies in\n   MSRP requests.  Therefore, MSRP WebSocket Clients and Servers\
    \ MUST\n   accept both text and binary frames.\n   The WebSocket API [WS-API]\
    \ does not allow developers to choose\n   whether to send UTF-8 text or binary\
    \ frames but will not send\n   non-UTF-8 characters in a text frame.  The content\
    \ of text frames\n   MUST be interpreted as binary by WebSocket Clients and Servers.\n"
- title: 5.  MSRP WebSocket Transport
  contents:
  - '5.  MSRP WebSocket Transport

    '
- title: 5.1.  General
  contents:
  - "5.1.  General\n   WebSocket clients cannot receive WebSocket connections initiated\
    \ by\n   other WebSocket clients or WebSocket servers.  This means that it is\n\
    \   challenging for an MSRP client to communicate directly with other\n   MSRP\
    \ clients.  Therefore, all MSRP-over-WebSocket messages MUST be\n   routed via\
    \ an MSRP WebSocket Server.  MSRP traffic transported over\n   WebSockets MUST\
    \ be protected by using a Secure WebSocket (WSS)\n   connection (using TLS [RFC5246]\
    \ over TCP).\n   MSRP WebSocket Servers can be used to route MSRP messages between\n\
    \   MSRP WebSocket Clients and between MSRP WebSocket Clients and\n   \"normal\"\
    \ MSRP clients and relays.\n   Each MSRP chunk MUST be carried within a single\
    \ WebSocket message,\n   and a WebSocket message MUST NOT contain more than one\
    \ MSRP chunk.\n   This simplifies parsing of MSRP messages for both clients and\n\
    \   servers.  When large messages are sent by a non-WebSocket peer, MSRP\n   chunking\
    \ (as defined in Section 5.1 of [RFC4975]) MUST be used by the\n   WebSocket MSRP\
    \ Servers to split the message into several smaller MSRP\n   chunks.\n"
- title: 5.2.  Updates to RFC 4975
  contents:
  - '5.2.  Updates to RFC 4975

    '
- title: 5.2.1.  MSRP URI Transport Parameter
  contents:
  - "5.2.1.  MSRP URI Transport Parameter\n   This document defines the value \"ws\"\
    \ as the transport parameter value\n   for an MSRP URI [RFC3986] to be contacted\
    \ using the MSRP WebSocket\n   subprotocol as transport.\n   The updated ABNF\
    \ [RFC5234] for this parameter is the following (the\n   original BNF for this\
    \ parameter can be found in [RFC4975]):\n     transport  =  \"tcp\" / \"ws\" /\
    \ 1*ALPHANUM\n"
- title: 5.2.2.  SDP Transport Protocol
  contents:
  - "5.2.2.  SDP Transport Protocol\n   This document does not define a new Session\
    \ Description Protocol\n   (SDP) transport protocol for MSRP over WebSockets.\
    \  As all MSRP-over-\n   WebSocket messages MUST be routed via an MSRP WebSocket\
    \ Server, the\n   MSRP WebSocket Client MUST specify \"TCP/TLS/MSRP\" protocols\
    \ in the\n   SDP m-line -- that being the protocol used by non-WebSocket clients\n\
    \   and between MSRP relays (see Section 8.1 of [RFC4975]).\n   The \"ws\" transport\
    \ parameter will appear in the endpoint URI in the\n   SDP \"path\" attribute\
    \ (see Section 8.2 of [RFC4975]).  MSRP was\n   designed with the possibility\
    \ of new transport bindings in mind (see\n   Section 6 of [RFC4975]), so MSRP\
    \ implementations are expected to\n   allow unrecognized transports, provided\
    \ that they do not have to\n   establish a direct connection to the resource described\
    \ by the URI.\n"
- title: 5.3.  Updates to RFC 4976
  contents:
  - '5.3.  Updates to RFC 4976

    '
- title: 5.3.1.  AUTH Request Authentication
  contents:
  - "5.3.1.  AUTH Request Authentication\n   The MSRP relay specification [RFC4976]\
    \ states that AUTH requests MUST\n   be authenticated.  This document modifies\
    \ this requirement to state\n   that all connections between MSRP clients and\
    \ relays MUST be\n   authenticated.  In the case of the MSRP WebSocket Clients,\
    \ there are\n   three possible authentication mechanisms:\n   1.  HTTP Digest\
    \ authentication in AUTH (as per [RFC4976]).\n   2.  Cookie-based or HTTP Digest\
    \ authentication in the WebSocket\n       Handshake (see Section 7).\n   3.  Mutual\
    \ TLS between the WebSocket-based MSRP client and the\n       WebSocket server.\n\
    \   The AUTH request is a required event when authentication occurs at\n   the\
    \ WebSocket connection level since the \"Use-Path:\" header required\n   to create\
    \ the SDP offer is included in the 200 OK response to the\n   AUTH request.\n"
- title: 6.  Connection Keepalive
  contents:
  - "6.  Connection Keepalive\n   It is RECOMMENDED that MSRP WebSocket Clients and\
    \ Servers keep their\n   WebSocket connections open by sending periodic WebSocket\
    \ \"Ping\"\n   frames as described in Section 5.5.2 of [RFC6455].\n   The WebSocket\
    \ API [WS-API] does not provide a mechanism for\n   applications running in a\
    \ web browser to control whether or not\n   periodic WebSocket \"Ping\" frames\
    \ are sent to the server.  The\n   implementation of such a keepalive feature\
    \ is the decision of each\n   web browser manufacturer and may also depend on\
    \ the configuration of\n   the web browser.\n   A future WebSocket protocol extension\
    \ providing a similar keepalive\n   mechanism could also be used.\n   When MSRP\
    \ WebSocket Clients or Servers cannot use WebSocket \"Ping\"\n   frames to keep\
    \ connections open, an MSRP implementation MAY use\n   bodiless SEND requests\
    \ as described in Section 7.1 of [RFC4975].\n   MSRP WebSocket Clients or Servers\
    \ MUST be prepared to receive\n   bodiless SEND requests.\n"
- title: 7.  Authentication
  contents:
  - "7.  Authentication\n   Prior to sending MSRP requests, an MSRP WebSocket Client\
    \ connects to\n   an MSRP WebSocket Server and performs the connection handshake.\
    \  As\n   described in Section 3, the handshake procedure involves a HTTP GET\n\
    \   method request from the Client and a response from the Server\n   including\
    \ an HTTP 101 status code.\n   In order to authorize the WebSocket connection,\
    \ the MSRP WebSocket\n   Server MAY inspect any HTTP headers present (for example,\
    \ Cookie\n   [RFC6265], Host [RFC7230], or Origin [RFC6454]) in the HTTP GET\n\
    \   request.  For many web applications, the value of such a Cookie is\n   provided\
    \ by the web server once the user has authenticated themselves\n   to the web\
    \ server, which could be done by many existing mechanisms.\n   As an alternative\
    \ method, the MSRP WebSocket Server could request\n   HTTP authentication by replying\
    \ to the Client's GET method request\n   with a HTTP 401 status code.  The WebSocket\
    \ protocol [RFC6455] covers\n   this usage in Section 4.1 and is paraphrased as\
    \ follows:\n      If the status code received from the server is not 101, the\n\
    \      WebSocket client stack handles the response per HTTP [RFC7230]\n      procedures;\
    \ in particular, the client might perform authentication\n      if it receives\
    \ a 401 status code.\n   If the HTTP GET request contains an Origin header, the\
    \ MSRP WebSocket\n   Server SHOULD indicate Cross-Origin Resource Sharing [CORS]\
    \ by adding\n   an Access-Control-Allow-Origin header to the 101 response.\n \
    \  Regardless of whether the MSRP WebSocket Server requires\n   authentication\
    \ during the WebSocket handshake, authentication MAY be\n   requested at the MSRP\
    \ protocol level by an MSRP Server challenging\n   AUTH requests using a 401 response.\
    \  Therefore, an MSRP WebSocket\n   Client SHOULD support HTTP Digest [RFC7235]\
    \ authentication as stated\n   in [RFC4976].\n"
- title: 8.  Examples
  contents:
  - '8.  Examples

    '
- title: 8.1.  Authentication
  contents:
  - '8.1.  Authentication

    '
- title: 8.1.1.  WebSocket Authentication
  contents:
  - "8.1.1.  WebSocket Authentication\n   Alice    (MSRP WSS)    a.example.com\n \
    \  |                             |\n   |HTTP GET (WS handshake) F1   |\n   |---------------------------->|\n\
    \   |101 Switching Protocols F2   |\n   |<----------------------------|\n   |\
    \                             |\n   |AUTH F3                      |\n   |---------------------------->|\n\
    \   |200 OK F4                    |\n   |<----------------------------|\n   |\
    \                             |\n   Alice loads a web page using her web browser\
    \ and retrieves JavaScript\n   code implementing the WebSocket MSRP subprotocol\
    \ defined in this\n   document.  The JavaScript code (an MSRP WebSocket Client)\
    \ establishes\n   a secure WebSocket connection with an MSRP relay (an MSRP WebSocket\n\
    \   Server) at a.example.com.  Upon WebSocket connection, Alice\n   constructs\
    \ and sends an MSRP AUTH request.  Since the JavaScript\n   stack in a browser\
    \ has no way to determine the local address from\n   which the WebSocket connection\
    \ was made, this implementation uses a\n   random \".invalid\" domain name for\
    \ the hostpart of the From-Path URI\n   (see Appendix A).\n   In this example,\
    \ it is assumed that authentication is performed at\n   the WebSocket layer (not\
    \ shown), so no challenge is issued for the\n   MSRP AUTH message:\n   F1 HTTP\
    \ GET (WS handshake)  Alice -> a.example.com (TLS)\n   GET / HTTP/1.1\n   Host:\
    \ a.example.com\n   Upgrade: websocket\n   Connection: Upgrade\n   Sec-WebSocket-Key:\
    \ dGhlIHNhbXBsZSBub25jZQ==\n   Origin: https://www.example.com\n   Sec-WebSocket-Protocol:\
    \ msrp\n   Sec-WebSocket-Version: 13\n   F2 101 Switching Protocols  a.example.com\
    \ -> Alice (TLS)\n   HTTP/1.1 101 Switching Protocols\n   Upgrade: websocket\n\
    \   Connection: Upgrade\n   Sec-WebSocket-Accept: s3pPLMBiTxaQ9kYGzzhZRbK+xOo=\n\
    \   Sec-WebSocket-Protocol: msrp\n   F3 AUTH  Alice -> a.example.com (transport\
    \ WSS)\n   MSRP 49fi AUTH\n   To-Path: msrps://alice@a.example.com:443;ws\n  \
    \ From-Path: msrps://df7jal23ls0d.invalid:2855/98cjs;ws\n   -------49fi$\n   F4\
    \ 200 OK  a.example.com -> Alice (transport WSS)\n   MSRP 49fi 200 OK\n   To-Path:\
    \ msrps://df7jal23ls0d.invalid:2855/98cjs;ws\n   From-Path: msrps://alice@a.example.com:443;ws\n\
    \   Use-Path: msrps://a.example.com:2855/jui787s2f;tcp\n   Expires: 900\n   -------49fi$\n"
- title: 8.1.2.  MSRP Authentication
  contents:
  - "8.1.2.  MSRP Authentication\n   Alice    (MSRP WSS)     a.example.com\n   | \
    \                            |\n   |HTTP GET (WS handshake) F1   |\n   |---------------------------->|\n\
    \   |101 Switching Protocols F2   |\n   |<----------------------------|\n   |\
    \                             |\n   |AUTH F3                      |\n   |---------------------------->|\n\
    \   |401 Unauthorized F4                    |\n   |<----------------------------|\n\
    \   |AUTH F5                      |\n   |---------------------------->|\n   |200\
    \ OK F6                    |\n   |<----------------------------|\n   |       \
    \                      |\n   This example uses the same scenario as Section 8.1.1\
    \ but with\n   authentication performed at the MSRP layer.\n   Note that MSRP\
    \ does not permit line folding.  A \"\\\" in the examples\n   shows a line continuation\
    \ due to limitations in line length of this\n   document.  Neither the backslash\
    \ nor the extra CRLF is included in\n   the actual MSRP message.\n   F1 HTTP GET\
    \ (WS handshake)  Alice -> a.example.com (TLS)\n   GET / HTTP/1.1\n   Host: a.example.com\n\
    \   Upgrade: websocket\n   Connection: Upgrade\n   Sec-WebSocket-Key: dGhlIHNhbXBsZSBub25jZQ==\n\
    \   Origin: https://www.example.com\n   Sec-WebSocket-Protocol: msrp\n   Sec-WebSocket-Version:\
    \ 13\n   F2 101 Switching Protocols  a.example.com -> Alice (TLS)\n   HTTP/1.1\
    \ 101 Switching Protocols\n   Upgrade: websocket\n   Connection: Upgrade\n   Sec-WebSocket-Accept:\
    \ s3pPLMBiTxaQ9kYGzzhZRbK+xOo=\n   Sec-WebSocket-Protocol: msrp\n   F3 AUTH  Alice\
    \ -> a.example.com (transport WSS)\n   MSRP 4rsxt9nz AUTH\n   To-Path: msrps://alice@a.example.com:443;ws\n\
    \   From-Path: msrps://df7jal23ls0d.invalid:2855/98cjs;ws\n   -------4rsxt9nz$\n\
    \   F4 401 Unauthorized  a.example.com -> Alice (transport WSS)\n   MSRP 4rsxt9nz\
    \ 401 Unauthorized\n   To-Path: msrps://df7jal23ls0d.invalid:2855/98cjs;ws\n \
    \  From-Path: msrps://alice@a.example.com:443;ws\n   WWW-Authenticate: Digest\
    \ realm=\"example.com\", \\\n    nonce=\"UvtfpVL7XnnJ63EE244fXDthfLihlMHOY4+dd4A=\"\
    , qop=\"auth\"\n   -------4rsxt9nz$\n   F5 AUTH  Alice -> a.example.com (transport\
    \ WSS)\n   MSRP qy1hsow5 AUTH\n   To-Path: msrps://alice@a.example.com:443;ws\n\
    \   From-Path: msrps://df7jal23ls0d.invalid:2855/98cjs;ws\n   Authorization: Digest\
    \ username=\"alice\", realm=\"example.com\", \\\n    nonce=\"UvtfpVL7XnnJ63EE244fXDthfLihlMHOY4+dd4A=\"\
    , \\\n    uri=\"msrps://alice@a.example.com:443;ws\", \\\n    response=\"5011d0d58fe975e0d0cdc007ae26f4b7\"\
    , \\\n    qop=auth, cnonce=\"zic5ml401prb\", nc=00000001\n   -------qy1hsow5$\n\
    \   F6 200 OK  a.example.com -> Alice (transport WSS)\n   MSRP qy1hsow5 200 OK\n\
    \   To-Path: msrps://df7jal23ls0d.invalid:2855/98cjs;ws\n   From-Path: msrps://alice@a.example.com:443;ws\n\
    \   Use-Path: msrps://a.example.com:2855/jui787s2f;tcp\n   Expires: 900\n   -------qy1hsow5$\n"
- title: '8.2.  Example Session: MSRP WebSocket Client to MSRP Client'
  contents:
  - "8.2.  Example Session: MSRP WebSocket Client to MSRP Client\n   The following\
    \ subsections show various message exchanges occurring\n   during the course of\
    \ an MSRP session between a WebSocket client and a\n   non-WebSocket client.\n"
- title: 8.2.1.  SDP Exchange
  contents:
  - "8.2.1.  SDP Exchange\n   The following example shows SDP that could be included\
    \ in a SIP\n   message to set up an MSRP session between Alice and Bob where Alice\n\
    \   uses a WebSocket MSRP relay and Bob uses a traditional MSRP client\n   without\
    \ a relay.\n   A \"\\\" in the examples shows a line continuation due to limitations\
    \ in\n   line length of this document.  Neither the backslash nor the extra\n\
    \   CRLF is included in the actual SDP.\n   Alice makes an offer with a path including\
    \ the relay (having already\n   successfully authenticated with the relay):\n\
    \   c=IN IP4 a.example.com\n   m=message 1234 TCP/TLS/MSRP *\n   a=accept-types:message/cpim\
    \ text/plain text/html\n   a=path:msrps://a.example.com:2855/jui787s2f;tcp \\\n\
    \          msrps://df7jal23ls0d.invalid:2855/98cjs;ws\n   In this offer, Alice\
    \ wishes to receive MSRP messages via the relay at\n   a.example.com.  She wants\
    \ to use TLS as the transport for the MSRP\n   session (beyond the relay).  She\
    \ can accept message/cpim, text/plain,\n   and text/html message bodies in SEND\
    \ requests.\n   Bob's answer to this offer could look like:\n   c=IN IP4 bob.example.com\n\
    \   m=message 1234 TCP/TLS/MSRP *\n   a=accept-types:message/cpim text/plain\n\
    \   a=path:msrps://bob.example.com:49154/foo;tcp\n   Here, Bob wishes to receive\
    \ the MSRP messages at bob.example.com.  He\n   can accept only message/cpim and\
    \ text/plain message bodies in SEND\n   requests and has rejected the text/html\
    \ content offered by Alice.  He\n   does not need a relay to set up the MSRP session.\n"
- title: 8.2.2.  SEND (MSRP WebSocket Client to MSRP Client)
  contents:
  - "8.2.2.  SEND (MSRP WebSocket Client to MSRP Client)\n   Alice    (MSRP WSS) \
    \    a.example.com      (MSRP TLS)     Bob\n   |                             |\
    \                             |\n   |SEND F1                      |          \
    \                   |\n   |---------------------------->|                    \
    \         |\n   |200 OK F2                    |                             |\n\
    \   |<----------------------------|                             |\n   |      \
    \                       |SEND F3                      |\n   |                \
    \             |---------------------------->|\n   |                          \
    \   |200 OK F4                    |\n   |                             |<----------------------------|\n\
    \   Later in the session, Alice sends an instant message to Bob.  The\n   MSRP\
    \ WebSocket Server at a.example.com acts as an MSRP relay, routing\n   the message\
    \ to Bob over TLS.\n   Message details (A \"\\\" in the examples shows a line\
    \ continuation due\n   to limitations in line length of this document.  Neither\
    \ the\n   backslash nor the extra CRLF is included in the actual request or\n\
    \   response):\n   F1 SEND  Alice -> a.example.com (transport WSS)\n   MSRP 6aef\
    \ SEND\n   To-Path: msrps://a.example.com:2855/jui787s2f;tcp \\\n            msrps://bob.example.com:49154/foo;tcp\n\
    \   From-Path: msrps://df7jal23ls0d.invalid:2855/98cjs;ws\n   Success-Report:\
    \ no\n   Byte-Range: 1-*/*\n   Message-ID: 87652\n   Content-Type: text/plain\n\
    \   Hi Bob, I'm about to send you file.mpeg\n   -------6aef$\n   F2 200 OK  a.example.com\
    \ -> Alice (transport WSS)\n   MSRP 6aef 200 OK\n   To-Path: msrps://df7jal23ls0d.invalid:2855/98cjs;ws\n\
    \   From-Path: msrps://a.example.com:2855/jui787s2f;tcp\n   -------6aef$\n   F3\
    \ SEND  a.example.com -> Bob (transport TLS)\n   MSRP juh76 SEND\n   To-Path:\
    \ msrps://bob.example.com:49154/foo;tcp\n   From-Path:  msrps://a.example.com:2855/jui787s2f;tcp\
    \ \\\n               msrps://df7jal23ls0d.invalid:2855/98cjs;ws\n   Success-Report:\
    \ no\n   Byte-Range: 1-*/*\n   Message-ID: 87652\n   Content-Type: text/plain\n\
    \   Hi Bob, I'm about to send you file.mpeg\n   -------juh76$\n   F4 200 OK  Bob\
    \ -> a.example.com (transport TLS)\n   MSRP juh76 200 OK\n   To-Path: msrps://a.example.com:2855/jui787s2f;tcp\n\
    \   From-Path: msrps://bob.example.com:49154/foo;tcp\n   -------juh76$\n"
- title: 8.2.3.  SEND (MSRP Client to MSRP WebSocket Client)
  contents:
  - "8.2.3.  SEND (MSRP Client to MSRP WebSocket Client)\n   Bob      (MSRP TLS) \
    \    a.example.com     (MSRP WSS)    Alice\n   |                             |\
    \                             |\n   |SEND F1                      |          \
    \                   |\n   |---------------------------->|                    \
    \         |\n   |200 OK F2                    |                             |\n\
    \   |<----------------------------|                             |\n   |      \
    \                       |SEND F3                      |\n   |                \
    \             |---------------------------->|\n   |                          \
    \   |200 OK F4                    |\n   |                             |<----------------------------|\n\
    \   Later in the session, Bob sends an instant message to Alice.  The\n   MSRP\
    \ WebSocket Server at a.example.com acts as an MSRP relay, routing\n   the message\
    \ to Alice over secure WebSocket.\n   Message details (A \"\\\" in the examples\
    \ shows a line continuation due\n   to limitations in line length of this document.\
    \  Neither the\n   backslash nor the extra CRLF is included in the actual request\
    \ or\n   response):\n   F1 SEND  Bob -> a.example.com (transport TLS)\n   MSRP\
    \ xght6 SEND\n   To-Path: msrps://a.example.com:2855/jui787s2f;tcp \\\n      \
    \      msrps://df7jal23ls0d.invalid:2855/98cjs;ws\n   From-Path: msrps://bob.example.com:49154/foo;tcp\n\
    \   Success-Report: no\n   Byte-Range: 1-*/*\n   Message-ID: 87652\n   Content-Type:\
    \ text/plain\n   Thanks for the file.\n   -------xght6$\n   F2 200 OK  a.example.com\
    \ -> Bob (transport TLS)\n   MSRP xght6 200 OK\n   To-Path: msrps://bob.example.com:49154/foo;tcp\n\
    \   From-Path: msrps://a.example.com:2855/jui787s2f;tcp\n   -------xght6$\n  \
    \ F3 SEND  a.example.com -> Alice (transport WSS)\n   MSRP yh67 SEND\n   To-Path:\
    \  msrps://df7jal23ls0d.invalid:2855/98cjs;ws\n   From-Path:  msrps://a.example.com:2855/jui787s2f;tcp\
    \ \\\n               msrps://bob.example.com:49154/foo;tcp\n   Success-Report:\
    \ no\n   Byte-Range: 1-*/*\n   Message-ID: 87652\n   Content-Type: text/plain\n\
    \   Thanks for the file.\n   -------yh67$\n   F4 200 OK  Alice -> a.example.com\
    \ (transport WSS)\n   MSRP yh67 200 OK\n   To-Path:  msrps://a.example.com:2855/jui787s2f;tcp\n\
    \   From-Path:  msrps://df7jal23ls0d.invalid:2855/98cjs;ws\n   -------yh67$\n"
- title: '8.3.  Example Session: Two MSRP WebSocket Clients'
  contents:
  - "8.3.  Example Session: Two MSRP WebSocket Clients\n   The following subsections\
    \ show various message exchanges occurring\n   during the course of an MSRP session\
    \ between two WebSocket clients.\n"
- title: 8.3.1.  SDP Exchange
  contents:
  - "8.3.1.  SDP Exchange\n   The following example shows SDP that could be included\
    \ in a SIP\n   message to set up an MSRP session between Alice and Carol where\
    \ both\n   of them are using the same WebSocket MSRP relay.\n   Alice makes an\
    \ offer with a path including the relay (having already\n   successfully authenticated\
    \ with the relay):\n   c=IN IP4 a.example.com\n   m=message 1234 TCP/TLS/MSRP\
    \ *\n   a=accept-types:message/cpim text/plain text/html\n   a=path:msrps://a.example.com:2855/jui787s2f;tcp\
    \ \\\n          msrps://df7jal23ls0d.invalid:2855/98cjs;ws\n   In this offer,\
    \ Alice wishes to receive MSRP messages via the relay at\n   a.example.com.  She\
    \ wants to use TLS as the transport for the MSRP\n   session (beyond the relay).\
    \  She can accept message/cpim, text/plain,\n   and text/html message bodies in\
    \ SEND requests.\n   Carol's answer to this offer could look like:\n   c=IN IP4\
    \ a.example.com\n   m=message 1234 TCP/TLS/MSRP *\n   a=accept-types:message/cpim\
    \ text/plain\n   a=path:msrps://a.example.com:2855/iwnslt;tcp \\\n          msrps://jk9awp14vj8x.invalid:2855/76qwe;ws\n\
    \   Here, Carol also wishes to receive the MSRP messages via\n   a.example.com.\
    \  She can accept only message/cpim and text/plain\n   message bodies in SEND\
    \ requests and has rejected the text/html\n   content offered by Alice.\n"
- title: 8.3.2.  SEND
  contents:
  - "8.3.2.  SEND\n   Alice    (MSRP WSS)     a.example.com     (MSRP WSS)    Carol\n\
    \   |                             |                             |\n   |SEND F1\
    \                      |                             |\n   |---------------------------->|\
    \                             |\n   |200 OK F2                    |          \
    \                   |\n   |<----------------------------|                    \
    \         |\n   |                             |SEND F3                      |\n\
    \   |                             |---------------------------->|\n   |      \
    \                       |200 OK F4                    |\n   |                \
    \             |<----------------------------|\n   Later in the session, Alice\
    \ sends an instant message to Carol.  The\n   MSRP WebSocket Server at a.example.com\
    \ acts as an MSRP relay, routing\n   the message to Carol over secure WebSocket.\n\
    \   In this example, both Alice and Carol are using MSRP WebSocket\n   Clients\
    \ and the same MSRP WebSocket Server.  This means that\n   a.example.com will\
    \ appear twice in the To-Path in F1.  a.example.com\n   can either handle this\
    \ internally or loop the MSRP SEND request back\n   to itself as if it were two\
    \ separate MSRP relays.\n   Message details (A \"\\\" in the examples shows a\
    \ line continuation due\n   to limitations in line length of this document.  Neither\
    \ the\n   backslash nor the extra CRLF is included in the actual request or\n\
    \   response):\n   F1 SEND  Alice -> a.example.com (transport WSS)\n   MSRP kjh6\
    \ SEND\n   To-Path: msrps://a.example.com:2855/jui787s2f;tcp \\\n            msrps://a.example.com:2855/iwnslt;tcp\
    \ \\\n            msrps://jk9awp14vj8x.invalid:2855/76qwe;ws\n   From-Path: msrps://df7jal23ls0d.invalid:2855/98cjs;ws\n\
    \   Success-Report: no\n   Byte-Range: 1-*/*\n   Message-ID: 87652\n   Content-Type:\
    \ text/plain\n   Carol, I sent that file to Bob.\n   -------kjh6$\n   F2 200 OK\
    \  a.example.com -> Alice (transport WSS)\n   MSRP kjh6 200 OK\n   To-Path: msrps://df7jal23ls0d.invalid:2855/98cjs;ws\n\
    \   From-Path: msrps://a.example.com:2855/jui787s2f;tcp\n   -------kjh6$\n   F3\
    \ SEND  a.example.com -> Carol (transport WSS)\n   MSRP re58 SEND\n   To-Path:\
    \ msrps://jk9awp14vj8x.invalid:2855/76qwe;ws\n   From-Path: msrps://a.example.com:2855/iwnslt;tcp\
    \ \\\n              msrps://a.example.com:2855/jui787s2f;tcp \\\n            \
    \  msrps://df7jal23ls0d.invalid/98cjs;ws\n   Success-Report: no\n   Byte-Range:\
    \ 1-*/*\n   Message-ID: 87652\n   Content-Type: text/plain\n   Carol, I sent that\
    \ file to Bob.\n   -------re58$\n   F4 200 OK  Carol -> a.example.com (transport\
    \ WSS)\n   MSRP re58 200 OK\n   To-Path: msrps://a.example.com:2855/iwnslt;tcp\n\
    \   From-Path: msrps://jk9awp14vj8x.invalid:2855/76qwe;ws\n   -------re58$\n"
- title: '8.4.  Example Session: MSRP WebSocket Client to MSRP Client Using a'
  contents:
  - "8.4.  Example Session: MSRP WebSocket Client to MSRP Client Using a\n      Relay\n\
    \   The following subsections show various message exchanges occurring\n   during\
    \ the course of an MSRP session between a WebSocket client and a\n   non-WebSocket\
    \ client, where the latter is also using an MSRP relay.\n"
- title: 8.4.1.  SDP Exchange
  contents:
  - "8.4.1.  SDP Exchange\n   The following example shows SDP that could be included\
    \ in a SIP\n   message to set up an MSRP session between Alice and Bob where Alice\n\
    \   uses a WebSocket MSRP relay and Bob uses a traditional MSRP client\n   with\
    \ a separate relay.\n   Alice makes an offer with a path including the relay (having\
    \ already\n   successfully authenticated with the relay):\n   c=IN IP4 a.example.com\n\
    \   m=message 1234 TCP/TLS/MSRP *\n   a=accept-types:message/cpim text/plain text/html\n\
    \   a=path:msrps://a.example.com:2855/jui787s2f;tcp \\\n          msrps://df7jal23ls0d.invalid:2855/98cjs;ws\n\
    \   In this offer, Alice wishes to receive MSRP messages via the relay at\n  \
    \ a.example.com.  She wants to use TLS as the transport for the MSRP\n   session\
    \ (beyond the relay).  She can accept message/cpim, text/plain,\n   and text/html\
    \ message bodies in SEND requests.\n   Bob's answer to this offer could look like:\n\
    \   c=IN IP4 bob.example.com\n   m=message 1234 TCP/TLS/MSRP *\n   a=accept-types:message/cpim\
    \ text/plain\n   a=path:msrps://relay.example.net:2855/kwvin5f;tcp \\\n      \
    \    msrps://bob.example.com:49154/foo;tcp\n   Here, Bob wishes to receive the\
    \ MSRP messages via the relay at\n   relay.example.net.  He can accept only message/cpim\
    \ and text/plain\n   message bodies in SEND requests and has rejected the text/html\n\
    \   content offered by Alice.\n"
- title: 8.4.2.  SEND
  contents:
  - "8.4.2.  SEND\n   Alice (MSRP WSS) a.example.com (MSRP) relay.example.net  (MSRP)\
    \   Bob\n   |                      |                       |                 \
    \   |\n   |SEND F1               |                       |                   \
    \ |\n   |--------------------->|                       |                    |\n\
    \   |200 OK F2             |                       |                    |\n  \
    \ |<---------------------|                       |                    |\n   |\
    \                      |SEND F3                |                    |\n   |  \
    \                    |---------------------->|                    |\n   |    \
    \                  |200 OK F4              |                    |\n   |      \
    \                |<----------------------|                    |\n   |        \
    \              |                       |SEND F5             |\n   |          \
    \            |                       |------------------->|\n   |            \
    \          |                       |200 OK F6           |\n   |              \
    \        |                       |<-------------------|\n   Later in the session,\
    \ Alice sends an instant message to Bob.  The\n   MSRP WebSocket Server at a.example.com\
    \ acts as an MSRP relay, routing\n   the message to Bob via his relay, relay.example.net.\n\
    \   Message details (A \"\\\" in the examples shows a line continuation due\n\
    \   to limitations in line length of this document.  Neither the\n   backslash\
    \ nor the extra CRLF is included in the actual request or\n   response):\n   F1\
    \ SEND  Alice -> a.example.com (transport WSS)\n   MSRP Ycwt SEND\n   To-Path:\
    \ msrps://a.example.com:2855/jui787s2f;tcp \\\n            msrps://relay.example.net:2855/kwvin5f;tcp\
    \ \\\n            msrps://bob.example.com:49154/foo;tcp\n   From-Path: msrps://df7jal23ls0d.invalid:2855/98cjs;ws\n\
    \   Success-Report: no\n   Byte-Range: 1-*/*\n   Message-ID: 87652\n   Content-Type:\
    \ text/plain\n   Bob, that was the wrong file - don't watch it!\n   -------Ycwt$\n\
    \   F2 200 OK  a.example.com -> Alice (transport WSS)\n   MSRP Ycwt 200 OK\n \
    \  To-Path: msrps://df7jal23ls0d.invalid:2855/98cjs;ws\n   From-Path: msrps://a.example.com:2855/jui787s2f;tcp\n\
    \   -------Ycwt$\n   F3 SEND  a.example.com -> relay.example.net (transport TLS)\n\
    \   MSRP 13GA SEND\n   To-Path: msrps://relay.example.net:2855/kwvin5f;tcp \\\n\
    \            msrps://bob.example.com:49154/foo;tcp\n   From-Path: msrps://a.example.com:2855/jui787s2f;tcp\
    \ \\\n              msrps://df7jal23ls0d.invalid/98cjs;ws\n   Success-Report:\
    \ no\n   Byte-Range: 1-*/*\n   Message-ID: 87652\n   Content-Type: text/plain\n\
    \   Bob, that was the wrong file - don't watch it!\n   -------13GA$\n   F4 200\
    \ OK  relay.example.net -> a.example.com (transport TLS)\n   MSRP 13GA 200 OK\n\
    \   To-Path: msrps://a.example.com:2855/iwnslt;tcp\n   From-Path: msrps://relay.example.net:2855/kwvin5f;tcp\n\
    \   -------13GA$\n   F5 SEND  relay.example.net -> bob.example.com (transport\
    \ TLS)\n   MSRP kXeg SEND\n   To-Path: msrps://bob.example.com:49154/foo;tcp\n\
    \   From-Path: msrps://relay.example.net:2855/kwvin5f;tcp \\\n              msrps://a.example.com:2855/jui787s2f;tcp\
    \ \\\n              msrps://df7jal23ls0d.invalid/98cjs;ws\n   Success-Report:\
    \ no\n   Byte-Range: 1-*/*\n   Message-ID: 87652\n   Content-Type: text/plain\n\
    \   Bob, that was the wrong file - don't watch it!\n   -------kXeg$\n   F6 200\
    \ OK  bob.example.com -> relay.example.net (transport TLS)\n   MSRP kXeg 200 OK\n\
    \   To-Path: msrps://relay.example.net:2855/kwvin5f;tcp\n   From-Path: msrps://bob.example.com:49154/foo;tcp\n\
    \   -------kXeg$\n"
- title: 9.  Security Considerations
  contents:
  - "9.  Security Considerations\n   MSRP traffic transported over WebSockets MUST\
    \ be protected by using a\n   secure WebSocket connection (using TLS [RFC5246]\
    \ over TCP).\n   When establishing a connection using MSRP over secure WebSockets,\
    \ the\n   client MUST authenticate the server using the server's certificate\n\
    \   according to the WebSocket validation procedure in [RFC6455].\n   Any security\
    \ considerations specific to the WebSocket protocol are\n   detailed in the relevant\
    \ specification [RFC6455] and are considered\n   outside the scope of this document.\
    \  The certificate name matching\n   (described by [RFC6455]) and cryptosuite\
    \ selection will be handled by\n   the browser, and the browser's procedures will\
    \ supersede those\n   specified in [RFC4975].\n   Since the TLS session is always\
    \ terminated at the MSRP WebSocket\n   Server and the WebSocket server can see\
    \ the plain text, the MSRP\n   client (browser) SHOULD NOT indicate end-to-end\
    \ security to user.\n   TLS, as used in this document, should follow the best\
    \ current\n   practices defined in [RFC7525].\n"
- title: 10.  IANA Considerations
  contents:
  - "10.  IANA Considerations\n   Per this specification, IANA has registered the\
    \ WebSocket MSRP\n   subprotocol in the \"WebSocket Subprotocol Name Registry\"\
    \ with the\n   following data:\n   Subprotocol Identifier:  msrp\n   Subprotocol\
    \ Common Name:  WebSocket Transport for MSRP (Message\n      Session Relay Protocol)\n\
    \   Subprotocol Definition:  RFC 7977\n   Reference:  RFC 7977\n"
- title: 11.  References
  contents:
  - '11.  References

    '
- title: 11.1.  Normative References
  contents:
  - "11.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n  \
    \            DOI 10.17487/RFC2119, March 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n\
    \   [RFC4975]  Campbell, B., Ed., Mahy, R., Ed., and C. Jennings, Ed.,\n     \
    \         \"The Message Session Relay Protocol (MSRP)\", RFC 4975,\n         \
    \     DOI 10.17487/RFC4975, September 2007,\n              <http://www.rfc-editor.org/info/rfc4975>.\n\
    \   [RFC4976]  Jennings, C., Mahy, R., and A. Roach, \"Relay Extensions\n    \
    \          for the Message Sessions Relay Protocol (MSRP)\", RFC 4976,\n     \
    \         DOI 10.17487/RFC4976, September 2007,\n              <http://www.rfc-editor.org/info/rfc4976>.\n\
    \   [RFC5234]  Crocker, D., Ed. and P. Overell, \"Augmented BNF for Syntax\n \
    \             Specifications: ABNF\", STD 68, RFC 5234,\n              DOI 10.17487/RFC5234,\
    \ January 2008,\n              <http://www.rfc-editor.org/info/rfc5234>.\n   [RFC6455]\
    \  Fette, I. and A. Melnikov, \"The WebSocket Protocol\",\n              RFC 6455,\
    \ DOI 10.17487/RFC6455, December 2011,\n              <http://www.rfc-editor.org/info/rfc6455>.\n"
- title: 11.2.  Informative References
  contents:
  - "11.2.  Informative References\n   [CORS]     van Kesteren, A., Ed., \"Cross-Origin\
    \ Resource Sharing\",\n              W3C Recommendation, January 2014,\n     \
    \         <http://www.w3.org/TR/2014/REC-cors-20140116/>.\n   [RFC2606]  Eastlake\
    \ 3rd, D. and A. Panitz, \"Reserved Top Level DNS\n              Names\", BCP\
    \ 32, RFC 2606, DOI 10.17487/RFC2606, June 1999,\n              <http://www.rfc-editor.org/info/rfc2606>.\n\
    \   [RFC3986]  Berners-Lee, T., Fielding, R., and L. Masinter, \"Uniform\n   \
    \           Resource Identifier (URI): Generic Syntax\", STD 66,\n           \
    \   RFC 3986, DOI 10.17487/RFC3986, January 2005,\n              <http://www.rfc-editor.org/info/rfc3986>.\n\
    \   [RFC5246]  Dierks, T. and E. Rescorla, \"The Transport Layer Security\n  \
    \            (TLS) Protocol Version 1.2\", RFC 5246,\n              DOI 10.17487/RFC5246,\
    \ August 2008,\n              <http://www.rfc-editor.org/info/rfc5246>.\n   [RFC6265]\
    \  Barth, A., \"HTTP State Management Mechanism\", RFC 6265,\n              DOI\
    \ 10.17487/RFC6265, April 2011,\n              <http://www.rfc-editor.org/info/rfc6265>.\n\
    \   [RFC6454]  Barth, A., \"The Web Origin Concept\", RFC 6454,\n            \
    \  DOI 10.17487/RFC6454, December 2011,\n              <http://www.rfc-editor.org/info/rfc6454>.\n\
    \   [RFC6714]  Holmberg, C., Blau, S., and E. Burger, \"Connection\n         \
    \     Establishment for Media Anchoring (CEMA) for the Message\n             \
    \ Session Relay Protocol (MSRP)\", RFC 6714,\n              DOI 10.17487/RFC6714,\
    \ August 2012,\n              <http://www.rfc-editor.org/info/rfc6714>.\n   [RFC7118]\
    \  Baz Castillo, I., Millan Villegas, J., and V. Pascual,\n              \"The\
    \ WebSocket Protocol as a Transport for the Session\n              Initiation\
    \ Protocol (SIP)\", RFC 7118,\n              DOI 10.17487/RFC7118, January 2014,\n\
    \              <http://www.rfc-editor.org/info/rfc7118>.\n   [RFC7230]  Fielding,\
    \ R., Ed. and J. Reschke, Ed., \"Hypertext Transfer\n              Protocol (HTTP/1.1):\
    \ Message Syntax and Routing\",\n              RFC 7230, DOI 10.17487/RFC7230,\
    \ June 2014,\n              <http://www.rfc-editor.org/info/rfc7230>.\n   [RFC7235]\
    \  Fielding, R., Ed. and J. Reschke, Ed., \"Hypertext Transfer\n             \
    \ Protocol (HTTP/1.1): Authentication\", RFC 7235,\n              DOI 10.17487/RFC7235,\
    \ June 2014,\n              <http://www.rfc-editor.org/info/rfc7235>.\n   [RFC7525]\
    \  Sheffer, Y., Holz, R., and P. Saint-Andre,\n              \"Recommendations\
    \ for Secure Use of Transport Layer\n              Security (TLS) and Datagram\
    \ Transport Layer Security\n              (DTLS)\", BCP 195, RFC 7525, DOI 10.17487/RFC7525,\
    \ May\n              2015, <http://www.rfc-editor.org/info/rfc7525>.\n   [WS-API]\
    \   Hickson, I., Ed., \"The WebSocket API\", W3C Candidate\n              Recommendation,\
    \ September 2012,\n              <https://www.w3.org/TR/2012/CR-websockets-20120920/>.\n"
- title: 'Appendix A.  Implementation Guidelines: MSRP WebSocket Client'
  contents:
  - "Appendix A.  Implementation Guidelines: MSRP WebSocket Client\n             Considerations\n\
    \   The JavaScript stack in web browsers does not have the ability to\n   discover\
    \ the local transport address used for originating WebSocket\n   connections.\
    \  Therefore, the MSRP WebSocket Client constructs a\n   domain name consisting\
    \ of a random token followed by the \".invalid\"\n   top-level domain name, as\
    \ stated in [RFC2606], and uses it within its\n   From-Path headers.\n   The From-Path\
    \ URI provided by MSRP clients that use an MSRP relay is\n   not used for routing\
    \ MSRP messages, thus, it is safe to set a random\n   domain in the hostpart of\
    \ the From-Path URI.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   Special thanks to Inaki Baz Castillo, Jose Luis Millan Villegas,\
    \ and\n   Victor Pascual, the authors of [RFC7118], which has inspired this\n\
    \   document.\n   Additional thanks to Inaki Baz Castillo, who pointed out that\
    \ \"web\n   browser\" shouldn't be used all the time, as this specification should\n\
    \   be valid for smartphones and apps other than browsers and suggested\n   clarifications\
    \ to the SDP handling for MSRP over WebSocket.\n   Special thanks to James Wyatt\
    \ from Crocodile RCS Ltd for helping with\n   the JavaScript MSRP-over-WebSockets\
    \ prototyping.\n   Special thanks to Anton Roman who has contributed to this document.\n\
    \   Thanks to Saul Ibarra Corretge for suggesting that the existing MSRP\n   keepalive\
    \ mechanism may be used when WebSocket pings are not\n   available.\n   Thanks\
    \ to Ben Campbell, Inaki Baz Castillo, Keith Drage, Olle\n   Johansson, and Christer\
    \ Holmberg for their thoughtful discussion\n   comments and review feedback that\
    \ led to the improvement of this\n   document.  Special thanks to Mary Barnes\
    \ for both her technical\n   review and for offering to act as Document Shepherd.\
    \  Thanks also to\n   Stephen Farrell, Alissa Cooper, Mirja Kuehlewind, Allison\
    \ Mankin,\n   Alexey Melnikov, and Kathleen Moriarty for their review comments.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Peter Dunkley\n   Xura\n   Lancaster Court\n   8 Barnes\
    \ Wallis Road\n   Fareham  PO15 5TU\n   United Kingdom\n   Email: peter.dunkley@xura.com\n\
    \   Gavin Llewellyn\n   Xura\n   Lancaster Court\n   8 Barnes Wallis Road\n  \
    \ Fareham  PO15 5TU\n   United Kingdom\n   Email: gavin.llewellyn@xura.com\n \
    \  Victor Pascual\n   Oracle\n   Email: victor.pascual.avila@oracle.com\n   Gonzalo\
    \ Salgueiro\n   Cisco Systems, Inc.\n   7200-12 Kit Creek Road\n   Research Triangle\
    \ Park, NC  27709\n   United States of America\n   Email: gsalguei@cisco.com\n\
    \   Ram Mohan Ravindranath\n   Cisco Systems, Inc.\n   Email: rmohanr@cisco.com\n"
