Abstract The Session Traversal Utilities for NAT (STUN) protocol defines several STUN attributes.
The content of some of these   FINGERPRINT, MESSAGE INTEGRITY, and XOR MAPPED ADDRESS   involve binary logical operations (hashing, xor).
This document provides test vectors for those attributes.
The Session Traversal Utilities for NAT (STUN)[RFC5389] protocol defines two different hashes that may be included in messages exchanged by peers implementing that protocol: FINGERPRINT attribute:  a 32 bit Cyclic Redundancy Check.
MESSAGE INTEGRITY attribute:  an HMAC SHA1 [RFC2104] authentication code.
This document provides samples of properly formatted STUN messages including these hashes, for the sake of testing implementations of the STUN protocol.
Test Vectors All included vectors are represented as a series of hexadecimal values in network byte order.
Each pair of hexadecimal digits represents one byte.
Messages follow the Interactive Connectivity Establishment (ICE)
Connectivity Checks use case of STUN (see [RFC5245]).
These messages include FINGERPRINT, MESSAGE INTEGRITY, and XOR MAPPED ADDRESS
These attributes are considered to be most prone to implementation errors.
An additional message is provided to test STUN authentication with long term credentials (which is not used by ICE).
In the following sample messages, two types of plain UTF 8 text attributes are included.
The values of certain of these attributes were purposely sized to require padding.
Non ASCII characters are represented as <U xxxx> where xxxx is the hexadecimal number of their Unicode code point.
In this document, ASCII white spaces (U 0020) are used for padding within the first three messages this is arbitrary.
Similarly, the last message uses nul bytes for padding.
As per [RFC5389], padding bytes may take any value.
This request uses the following parameters:
Software name:  "STUN test client" (
53 54 55 4e  }
65 6e 74  } 00
20 20 20  } 00 08 00
} bf d8 cb 56
This response uses the following parameter:
Software name:  "test vector" (without quotes)
MESSAGE INTEGRITY attribute header 2b 91 f5 99  } fd 9e 90 c3  } 8c 74 89
HMAC SHA1 fingerprint 2a f9 ba 53
This response uses the following parameter:
Software name:  "test vector" (without quotes)
} a5 d3 f1 79
}  Xor'd mapped IPv6 address
f4 b5  } be d2 b9 d9  } 00 08 00 14
} 17 84 c9 7c  }
HMAC SHA1 fingerprint 82 92 c2 75
Sample Request with Long Term Authentication
This request uses the following parameters:
>" (without quotes) unaffected by SASLprep
[RFC4013] processing Password:  "The<U 00AD
"TheMatrIX" (without quotes) respectively before and after SASLprep processing Nonce:  "f//499k954d6OL34oL9FSTvy64sA" (without quotes) Realm:  "example.org" (without quotes)
af e3  } 82 b9 00 00  } 00
6b 39  } 35 34 64 36
53 54 76 79  }
34 73 41  } 00
65 78 61 6d  } 70 6c 65 2e  }
Realm value (11 bytes) and padding (1 byte) 6f 72 67
} 6d d6 4a 3e  } 02
} 8c a8 96 66  } 3.
There are no security considerations.
Appendix A.  Source Code for Test Vectors
" "STUN test client" "\x00\x24\x00\x04" "\x6e\x00\x01\xff" "\x80\x29\x00\x08"
"\x93\x2f\xf9\xb1\x51\x26\x3b\x36" "\x00\x06\x00\x09" "\x65\x76\x74\x6a\x3a\x68\x36\x76\x59\x20\x20\x20" "\x00\x08\x00\x14" "\x9a\xea\xa7\x0c\xbf\xd8\xcb\x56\x78\x1e\xf2\xb5" "\xb2\xd3\xf2\x49\xc1\xb5\x71\xa2" "\x80\x28\x00\x04" "\xe5\x7a\x3b\xcf"; Request message const unsigned char respv4[]
" "\x00\x02\xa1\x47" "\x01\x13\xa9\xfa\xa5\xd3\xf1\x79" "\xbc\x25\xf4\xb5\xbe\xd2\xb9\xd9" "\x00\x08\x00\x14" "\xa3\x82\x95\x4e\x4b\xe6\x7b\xf1\x17\x84\xc9\x7c" "\x82\x92\xc2\x75\xbf\xe3\xed\x41
" "\x21\x12\xa4\x42" "\x78\xad\x34\x33\xc6\xad\x72\xc0\x29\xda\x41\x2e" "\x00\x06\x00\x12" "\xe3\x83\x9e\xe3\x83\x88\xe3\x83\xaa\xe3\x83\x83" "\xe3\x82\xaf\xe3\x82\xb9\x00\x00" "\x00\x15\x00\x1c" "\x66\x2f\x2f\x34\x39\x39\x6b\x39\x35\x34\x64\x36" "\x4f\x4c\x33\x34\x6f\x4c\x39\x46\x53\x54\x76\x79" "\x36\x34\x73\x41" "\x00\x14\x00\x0b" "\x65\x78\x61\x6d\x70\x6c\x65\x2e\x6f\x72\x67\x00" "\x00\x08\x00\x14" "\xf6\x70\x24\x65\x6d\xd6\x4a\x3e\x02\xb8\xe0\x71" "\x2e\x85\xc9\xa2\x8c\xa8\x96\x66"; Request with long term credentials
