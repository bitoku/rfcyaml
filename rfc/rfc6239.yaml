- title: __initial_text__
  contents:
  - '          Suite B Cryptographic Suites for Secure Shell (SSH)

    '
- title: Abstract
  contents:
  - "Abstract\n   This document describes the architecture of a Suite B compliant\n\
    \   implementation of the Secure Shell Transport Layer Protocol and the\n   Secure\
    \ Shell Authentication Protocol.  Suite B Secure Shell makes use\n   of the elliptic\
    \ curve Diffie-Hellman (ECDH) key agreement, the\n   elliptic curve digital signature\
    \ algorithm (ECDSA), the Advanced\n   Encryption Standard running in Galois/Counter\
    \ Mode (AES-GCM), two\n   members of the SHA-2 family of hashes (SHA-256 and SHA-384),\
    \ and\n   X.509 certificates.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 5741.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc6239.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2011 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \   2. Suite B and Secure Shell ........................................3\n  \
    \    2.1. Minimum Levels of Security (minLOS) ........................4\n    \
    \  2.2. Digital Signatures and Certificates ........................4\n      2.3.\
    \ Non-Signature Primitives ...................................5\n   3. Security\
    \ Mechanism Negotiation and Initialization ...............6\n      3.1. Algorithm\
    \ Negotiation: SSH_MSG_KEXINIT .....................7\n   4. Key Exchange and\
    \ Server Authentication ..........................8\n      4.1. SSH_MSG_KEXECDH_INIT\
    \ .......................................9\n      4.2. SSH_MSG_KEXECDH_REPLY ......................................9\n\
    \      4.3. Key and Initialization Vector Derivation ..................10\n  \
    \ 5. User Authentication ............................................10\n    \
    \  5.1. First SSH_MSG_USERAUTH_REQUEST Message ....................10\n      5.2.\
    \ Second SSH_MSG_USERAUTH_REQUEST Message ...................11\n   6. Confidentiality\
    \ and Data Integrity of SSH Binary Packets .......12\n      6.1. Galois/Counter\
    \ Mode .......................................12\n      6.2. Data Integrity ............................................12\n\
    \   7. Rekeying .......................................................12\n  \
    \ 8. Security Considerations ........................................13\n   9.\
    \ References .....................................................13\n      9.1.\
    \ Normative References ......................................13\n      9.2. Informative\
    \ References ....................................13\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document describes the architecture of a Suite B compliant\n\
    \   implementation of the Secure Shell Transport Layer Protocol and the\n   Secure\
    \ Shell Authentication Protocol.  Suite B Secure Shell makes use\n   of the elliptic\
    \ curve Diffie-Hellman (ECDH) key agreement, the\n   elliptic curve digital signature\
    \ algorithm (ECDSA), the Advanced\n   Encryption Standard running in Galois/Counter\
    \ Mode (AES-GCM), two\n   members of the SHA-2 family of hashes (SHA-256 and SHA-384),\
    \ and\n   X.509 certificates.\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in RFC 2119 [RFC2119].\n"
- title: 2.  Suite B and Secure Shell
  contents:
  - "2.  Suite B and Secure Shell\n   Several RFCs have documented how each of the\
    \ Suite B components are\n   to be integrated into Secure Shell (SSH):\n     kex\
    \ algorithms\n           ecdh-sha2-nistp256           [SSH-ECC]\n           ecdh-sha2-nistp384\
    \           [SSH-ECC]\n     server host key algorithms\n           x509v3-ecdsa-sha2-nistp256\
    \   [SSH-X509]\n           x509v3-ecdsa-sha2-nistp384   [SSH-X509]\n     encryption\
    \ algorithms (both client_to_server and server_to_client)\n           AEAD_AES_128_GCM\
    \             [SSH-GCM]\n           AEAD_AES_256_GCM             [SSH-GCM]\n \
    \    MAC algorithms (both client_to_server and server_to_client)\n           AEAD_AES_128_GCM\
    \             [SSH-GCM]\n           AEAD_AES_256_GCM             [SSH-GCM]\n \
    \  In Suite B, public key certificates used to verify signatures MUST be\n   compliant\
    \ with the Suite B Certificate Profile specified in RFC 5759\n   [SUITEBCERT].\n\
    \   The purpose of this document is to draw upon all of these documents\n   to\
    \ provide guidance for Suite B compliant implementations of Secure\n   Shell (hereafter\
    \ referred to as \"SecSh-B\").  Note that while SecSh-B\n   MUST follow the guidance\
    \ in this document, that requirement does not\n   in and of itself imply that\
    \ a given implementation of Secure Shell is\n   suitable for use in protecting\
    \ classified data.  An implementation of\n   SecSh-B must be validated by the\
    \ appropriate authority before such\n   usage is permitted.\n   The two elliptic\
    \ curves used in Suite B appear in the literature\n   under two different names.\
    \  For the sake of clarity, we list both\n   names below.\n      Curve       \
    \ NIST name        SECG name     OID [SEC2]\n      ---------------------------------------------------------------\n\
    \      P-256        nistp256         secp256r1     1.2.840.10045.3.1.7\n     \
    \ P-384        nistp384         secp384r1     1.3.132.0.34\n   A description of\
    \ these curves can be found in [NIST] or [SEC2].\n   For the sake of brevity,\
    \ ECDSA-256 will be used to denote ECDSA on\n   P-256 using SHA-256, and ECDSA-384\
    \ will be used to denote ECDSA on\n   P-384 using SHA-384.\n"
- title: 2.1.  Minimum Levels of Security (minLOS)
  contents:
  - "2.1.  Minimum Levels of Security (minLOS)\n   Suite B provides for two levels\
    \ of cryptographic security, namely a\n   128-bit minimum level of security (minLOS_128)\
    \ and a 192-bit minimum\n   level of security (minLOS_192).  As we shall see below,\
    \ the\n   ECDSA-256/384 signature algorithms and corresponding X.509v3\n   certificates\
    \ are treated somewhat differently than the non-signature\n   primitives (kex\
    \ algorithms, encryption algorithms, and Message\n   Authentication Code (MAC)\
    \ algorithms in Secure Shell parlance).\n"
- title: 2.2.  Digital Signatures and Certificates
  contents:
  - "2.2.  Digital Signatures and Certificates\n   SecSh-B uses ECDSA-256/384 for\
    \ server authentication, user\n   authentication, and in X.509 certificates. \
    \ [SSH-X509] defines two\n   methods, x509v3-ecdsa-sha2-nistp256 and x509v3-ecdsa-sha2-nistp384,\n\
    \   that are to be used for server and user authentication.  The\n   following\
    \ conditions must be met:\n   1) The server MUST share its public key with the\
    \ host using an\n      X.509v3 certificate as described in [SSH-X509].  This public\
    \ key\n      MUST be used to authenticate the server to the host using\n     \
    \ ECDSA-256 or ECDSA-384 as appropriate (see Section 3).\n   2) User authentication\
    \ MUST begin with public key authentication\n      using ECDSA-256/384 with X.509v3\
    \ certificates (see Section 4).\n      Additional user authentication methods\
    \ MAY be used, but only after\n      the certificate-based ECDSA authentication\
    \ has been successfully\n      completed.\n   3) The X.509v3 certificates MUST\
    \ use only the two Suite B digital\n      signatures, ECDSA-256 and ECDSA-384.\n\
    \   4) ECDSA-256 MUST NOT be used to sign an ECDSA-384 public key.\n   5) ECDSA-384\
    \ MAY be used to sign an ECDSA-256 public key.\n   6) At minLOS_192, all SecSh-B\
    \ implementations MUST be able to verify\n      ECDSA-384 signatures.\n   7) At\
    \ minLOS_128, all SecSh-B implementations MUST be able to verify\n      ECDSA-256\
    \ signatures and SHOULD be able to verify ECDSA-384\n      signatures, unless\
    \ it is absolutely certain that the\n      implementation will never need to verify\
    \ certificates originating\n      from an authority that uses an ECDSA-384 signing\
    \ key.\n   8) At minLOS_128, each SecSh-B server and each SecSh-B user MUST have\n\
    \      either an ECDSA-256 signing key with a corresponding X.509v3\n      certificate,\
    \ an ECDSA-384 signing key with a corresponding X.509v3\n      certificate, or\
    \ both.\n   9) At minLOS_192, each SecSh-B server and each SecSh-B user MUST have\n\
    \      an ECDSA-384 signing key with a corresponding X.509v3 certificate.\n  \
    \ The selection of the signature algorithm to be used for server\n   authentication\
    \ is governed by the server_host_key_algorithms name-\n   list in the SSH_MSG_KEXINIT\
    \ packet (see Section 3.1).  The key\n   exchange and server authentication are\
    \ performed by the\n   SSH_MSG_KEXECDH_REPLY packets (see Section 4).  User authentication\n\
    \   is done via the SSH_MSG_USERAUTH_REQUEST messages (see Section 5).\n"
- title: 2.3.  Non-Signature Primitives
  contents:
  - "2.3.  Non-Signature Primitives\n   This section covers the constraints that the\
    \ choice of minimum\n   security level imposes upon the selection of a key agreement\
    \ protocol\n   (kex algorithm), encryption algorithm, and data integrity algorithm\n\
    \   (MAC algorithm).  We divide the non-signature algorithms into two\n   families,\
    \ as shown in Table 1.\n      +--------------+----------------------+----------------------+\n\
    \      |  Algorithm   |  Family 1            |  Family 2            |\n      +==============+======================+======================+\n\
    \      |  kex         |  ecdh-sha2-nistp256  |  ecdh-sha2-nistp384  |\n      +--------------+----------------------+----------------------+\n\
    \      |  encryption  |  AEAD_AES_128_GCM    |  AEAD_AES_256_GCM    |\n      +--------------+----------------------+----------------------+\n\
    \      |  MAC         |  AEAD_AES_128_GCM    |  AEAD_AES_256_GCM    |\n      +--------------+-----------------------+---------------------+\n\
    \        Table 1.  Families of Non-Signature Algorithms in SecSh-B\n   At the\
    \ 128-bit minimum level of security:\n   o  The non-signature algorithms MUST\
    \ either come exclusively from\n      Family 1 or exclusively from Family 2.\n\
    \   o  The selection of Family 1 versus Family 2 is independent of the\n     \
    \ choice of server host key algorithm.\n   At the 192-bit minimum level of security:\n\
    \   o  The non-signature algorithms MUST all come from Family 2.\n   Most of the\
    \ constraints described in this section can be achieved by\n   severely restricting\
    \ the kex_algorithm, encryption_algorithm, and\n   mac_algorithm name lists offered\
    \ in the SSH_MSG_KEXINIT packet.  See\n   Section 3.1 for details.\n"
- title: 3.  Security Mechanism Negotiation and Initialization
  contents:
  - "3.  Security Mechanism Negotiation and Initialization\n   As described in [SSH-Tran],\
    \ the exchange of SSH_MSG_KEXINIT between\n   the server and the client establishes\
    \ which key agreement algorithm,\n   MAC algorithm, host key algorithm (server\
    \ authentication algorithm),\n   and encryption algorithm are to be used.  This\
    \ section describes how\n   the Suite B components are to be used in the Secure\
    \ Shell algorithm\n   negotiation, key agreement, server authentication, and user\n\
    \   authentication.\n   Negotiation and initialization of a Suite B Secure Shell\
    \ connection\n   involves the following Secure Shell messages (where C->S denotes\
    \ a\n   message from the client to the server, and S->C denotes a server-to-\n\
    \   client message):\n      SSH_MSG_KEXINIT           C->S  Contains lists of\
    \ algorithms\n                                      acceptable to the client.\n\
    \      SSH_MSG_KEXINIT           S->C  Contains lists of algorithms\n        \
    \                              acceptable to the server.\n      SSH_MSG_KEXECDH_INIT\
    \      C->S  Contains the client's ephemeral\n                               \
    \       elliptic curve Diffie-Hellman key.\n      SSH_MSG_KEXECDH_REPLY     S->C\
    \  Contains a certificate with the\n                                      server's\
    \ ECDSA public signature\n                                      key, the server's\
    \ ephemeral ECDH\n                                      contribution, and an ECDSA\
    \ digital\n                                      signature of the newly formed\n\
    \                                      exchange hash value.\n      SSH_MSG_USERAUTH_REQUEST\
    \  C->S  Contains the user's name, the\n                                     \
    \ name of the service the user is\n                                      requesting,\
    \ the name of the\n                                      authentication method\
    \ the client\n                                      wishes to use, and method-specific\n\
    \                                      fields.\n   When not in the midst of processing\
    \ a key exchange, either party may\n   initiate a key re-exchange by sending an\
    \ SSH_MSG_KEXINIT packet.  All\n   packets exchanged during the re-exchange are\
    \ encrypted and\n   authenticated using the current keys until the conclusion\
    \ of the\n   re-exchange, at which point an SSH_MSG_NEWKEYS initiates a change\
    \ to\n   the newly established keys.  Otherwise, the re-exchange protocol is\n\
    \   identical to the initial key exchange protocol.  See Section 9 of\n   [SSH-Tran].\n"
- title: '3.1.  Algorithm Negotiation: SSH_MSG_KEXINIT'
  contents:
  - "3.1.  Algorithm Negotiation: SSH_MSG_KEXINIT\n   The choice of all but the user\
    \ authentication methods are determined\n   by the exchange of SSH_MSG_KEXINIT\
    \ between the client and the server.\n   As described in [SSH-Tran], the SSH_MSG_KEXINIT\
    \ packet has the\n   following structure:\n      byte         SSH_MSG_KEXINIT\n\
    \      byte[16]     cookie (random bytes)\n      name-list    kex_algorithms\n\
    \      name-list    server_host_key_algorithms\n      name-list    encryption_algorithms_client_to_server\n\
    \      name-list    encryption_algorithms_server_to_client\n      name-list  \
    \  mac_algorithms_client_to_server\n      name-list    mac_algorithms_server_to_client\n\
    \      name-list    compression_algorithms_client_to_server\n      name-list \
    \   compression_algorithms_server_to_client\n      name-list    languages_client_to_server\n\
    \      name-list    languages_server_to_client\n      boolean      first_kex_packet_follows\n\
    \      uint32       0 (reserved for future extension)\n   The SSH_MSG_KEXINIT\
    \ name lists can be used to constrain the choice of\n   non-signature and host\
    \ key algorithms in accordance with the guidance\n   given in Section 2.  Table\
    \ 2 lists three allowable name lists for the\n   non-signature algorithms.  One\
    \ of these options MUST be used.\n       Family 1 only (min_LOS 128):\n      \
    \    kex_algorithm name_list         := { ecdh_sha2_nistp256 }\n          encryption_algorithm\
    \ name_list  := { AEAD_AES_128_GCM   }\n          mac_algorithm name_list    \
    \     := { AEAD_AES_128_GCM   }\n       Family 2 only (min_LOS 128 or 192):\n\
    \          kex_algorithm name_list         := { ecdh_sha2_nistp384 }\n       \
    \   encryption_algorithm name_list  := { AEAD_AES_256_GCM   }\n          mac_algorithm\
    \ name_list         := { AEAD_AES_256_GCM   }\n       Family 1 or Family 2 (min_LOS\
    \ 128):\n          kex_algorithm name_list         := { ecdh_sha2_nistp256,\n\
    \                                               ecdh_sha2_nistp384 }\n       \
    \   encryption_algorithm name_list  := { AEAD_AES_128_GCM,\n                 \
    \                              AEAD_AES_256_GCM   }\n          mac_algorithm name_list\
    \         := { AEAD_AES_128_GCM,\n                                           \
    \    AEAD_AES_256_GCM   }\n           Table 2.  Allowed Non-Signature Algorithm\
    \ Name Lists\n   Table 3 lists three allowable name lists for the server host\
    \ key\n   algorithms.  One of these options MUST be used.\n            ECDSA-256\
    \ only (min_LOS 128):\n               server_host_key_algorithms name_list :=\n\
    \                                { x509v3-ecdsa-sha2-nistp256 }\n            ECDSA-384\
    \ only (min_LOS 128 or 192):\n               server_host_key_algorithms name_list\
    \ :=\n                                { x509v3-ecdsa-sha2-nistp384 }\n       \
    \     ECDSA-256 or ECDSA-384 (min_LOS 128):\n               server_host_key_algorithms\
    \ name_list :=\n                                { x509v3-ecdsa-sha2-nistp256,\n\
    \                                  x509v3-ecdsa-sha2-nistp384 }\n          Table\
    \ 3.  Allowed Server Host Key Algorithm Name Lists\n"
- title: 4.  Key Exchange and Server Authentication
  contents:
  - "4.  Key Exchange and Server Authentication\n   SecSh-B uses ECDH to establish\
    \ a shared secret value between the\n   client and the server.  An X.509v3 certificate\
    \ containing the\n   server's public signing ECDSA key and an ECDSA signature\
    \ on the\n   exchange hash value derived from the newly established shared secret\n\
    \   value are used to authenticate the server to the client.\n"
- title: 4.1.  SSH_MSG_KEXECDH_INIT
  contents:
  - "4.1.  SSH_MSG_KEXECDH_INIT\n   The key exchange to be used in Secure Shell is\
    \ determined by the name\n   lists exchanged in the SSH_MSG_KEXINIT packets. \
    \ In Suite B, one of\n   the following key agreement methods MUST be used to generate\
    \ a shared\n   secret value (SSV):\n      ecdh-sha2-nistp256      ephemeral-ephemeral\
    \ elliptic curve\n                              Diffie-Hellman on nistp256 with\
    \ SHA-256\n      ecdh-sha2-nistp384      ephemeral-ephemeral elliptic curve\n\
    \                              Diffie-Hellman on nistp384 with SHA-384\n   and\
    \ the format of the SSH_MSG_KEXECDH_INIT message is:\n      byte      SSH_MSG_KEXDH_INIT\n\
    \      string    Q_C    // the client's ephemeral contribution to the\n      \
    \                 // ECDH exchange, encoded as an octet string\n   where the encoding\
    \ of the elliptic curve point Q_C as an octet string\n   is as specified in Section\
    \ 2.3.3 of [SEC1].\n"
- title: 4.2.  SSH_MSG_KEXECDH_REPLY
  contents:
  - "4.2.  SSH_MSG_KEXECDH_REPLY\n   The SSH_MSG_KEXECDH_REPLY contains the server's\
    \ contribution to the\n   ECDH exchange, the server's public signature key, and\
    \ a signature of\n   the exchange hash value formed from the newly established\
    \ shared\n   secret value.  As stated in Section 3.1, in SecSh-B, the server host\n\
    \   key algorithm MUST be either x509v3-ecdsa-sha2-nistp256 or\n   x509v3-ecdsa-sha2-nistp384.\n\
    \   The format of the SSH_MSG_KEXECDH_REPLY is:\n      byte      SSH_MSG_KEXECDH_REPLY\n\
    \      string    K_S    // a string encoding an X.509v3 certificate\n        \
    \               // containing the server's ECDSA public host key\n      string\
    \    Q_S    // the server's ephemeral contribution to the\n                  \
    \     // ECDH exchange, encoded as an octet string\n      string    Sig_S  //\
    \ an octet string containing the server's\n                       // signature\
    \ of the newly established exchange\n                       // hash value\n  \
    \ Details on the structure and encoding of the X.509v3 certificate can\n   be\
    \ found in Section 2 of [SSH-X509].  The encoding of the elliptic\n   curve point\
    \ Q_C as an octet string is as specified in Section 2.3.3\n   of [SEC1], and the\
    \ encoding of the ECDSA signature Sig_S as an octet\n   string is as described\
    \ in Section 3.1.2 of [SSH-ECC].\n"
- title: 4.3.  Key and Initialization Vector Derivation
  contents:
  - "4.3.  Key and Initialization Vector Derivation\n   As specified in [SSH-Tran],\
    \ the encryption keys and initialization\n   vectors needed by Secure Shell are\
    \ derived directly from the SSV\n   using the hash function specified by the key\
    \ agreement algorithm\n   (SHA-256 for ecdh-sha2-nistp256 and SHA-384 for ecdh-sha2-nistp384).\n\
    \   The client-to-server channel and the server-to-client channel will\n   have\
    \ independent keys and initialization vectors.  These keys will\n   remain constant\
    \ until a re-exchange results in the formation of a\n   new SSV.\n"
- title: 5.  User Authentication
  contents:
  - "5.  User Authentication\n   The Secure Shell Transport Layer Protocol authenticates\
    \ the server to\n   the host but does not authenticate the user (or the user's\
    \ host) to\n   the server.  For this reason, condition (2) of Section 2.2 requires\n\
    \   that all users of SecSh-B MUST be authenticated using ECDSA-256/384\n   signatures\
    \ and X.509v3 certificates.  [SSH-X509] provides two\n   methods, x509v3-ecdsa-sha2-nistp256\
    \ and x509v3-ecdsa-sha2-nistp384,\n   that MUST be used to achieve this goal.\
    \  At minLOS 128, either one of\n   these methods may be used, but at minLOS 192,\n\
    \   x509v3-ecdsa-sha2-nistp384 MUST be used.\n"
- title: 5.1.  First SSH_MSG_USERAUTH_REQUEST Message
  contents:
  - "5.1.  First SSH_MSG_USERAUTH_REQUEST Message\n   The user's public key is sent\
    \ to the server using an\n   SSH_MSG_USERAUTH_REQUEST message.  When an x509v3-ecdsa-sha2-*\
    \ user\n   authentication method is being used, the structure of the\n   SSH_MSG_USERAUTH_REQUEST\
    \ message should be:\n      byte      SSH_MSG_USERAUTH_REQUEST\n      string \
    \   user_name      // in ISO-10646 UTF-8 encoding\n      string    service_name\
    \   // service name in US-ASCII\n      string    \"publickey\"\n      boolean\
    \   FALSE\n      string    public_key_algorithm_name  // x509v3-ecdsa-sha2-nistp256\n\
    \                                        // or x509v3-ecdsa-sha2-nistp384\n  \
    \    string    public_key_blob // X.509v3 certificate\n   Details on the structure\
    \ and encoding of the X.509v3 certificate can\n   be found in Section 2 of [SSH-X509].\n"
- title: 5.2.  Second SSH_MSG_USERAUTH_REQUEST Message
  contents:
  - "5.2.  Second SSH_MSG_USERAUTH_REQUEST Message\n   Once the server has responded\
    \ to the request message with an\n   SSH_MSG_USERAUTH_PK_OK message, the client\
    \ uses a second\n   SSH_MSG_USERAUTH_REQUEST message to perform the actual\n \
    \  authentication:\n      byte      SSH_MSG_USERAUTH_REQUEST\n      string   \
    \ user_name      // in ISO-10646 UTF-8 encoding\n      string    service_name\
    \   // service name in US-ASCII\n      string    \"publickey\"\n      boolean\
    \   TRUE\n      string    public_key_algorithm_name  // x509v3-ecdsa-sha2-nistp256\n\
    \                                        // or x509v3-ecdsa-sha2-nistp384\n  \
    \    string    Sig_U\n   The signature field Sig_U is an ECDSA signature of the\
    \ concatenation\n   of several values, including the session identifier, user\
    \ name,\n   service name, public key algorithm name, and the user's public\n \
    \  signing key.  The user's public signing key MUST be the signing key\n   conveyed\
    \ in the X.509v3 certificate sent in the first\n   SSH_MSG_USERAUTH_REQUEST message.\
    \  The encoding of the ECDSA\n   signature Sig_U as an octet string is as described\
    \ in Section 3.1.2\n   of [SSH-ECC].\n   The server MUST respond with either SSH_MSG_USERAUTH_SUCCESS\
    \ (if no\n   more authentications are needed) or SSH_MSG_USERAUTH_FAILURE (if\
    \ the\n   request failed, or more authentications are needed).\n"
- title: 6.  Confidentiality and Data Integrity of SSH Binary Packets
  contents:
  - "6.  Confidentiality and Data Integrity of SSH Binary Packets\n   Secure Shell\
    \ transfers data between the client and the server using\n   its own binary packet\
    \ structure.  The SSH binary packet structure is\n   independent of any packet\
    \ structure on the underlying data channel.\n   The contents of each binary packet\
    \ and portions of the header are\n   encrypted, and each packet is authenticated\
    \ with its own message\n   authentication code.  AES GCM will both encrypt the\
    \ packet and form a\n   16-octet authentication tag to ensure data integrity.\n"
- title: 6.1.  Galois/Counter Mode
  contents:
  - "6.1.  Galois/Counter Mode\n   [SSH-GCM] describes how AES Galois/Counter Mode\
    \ is to be used in\n   Secure Shell.  Suite B SSH implementations MUST support\n\
    \   AEAD_AES_GCM_128 and SHOULD support AEAD_AES_GCM_256 to both provide\n   confidentiality\
    \ and ensure data integrity.  No other confidentiality\n   or data integrity algorithms\
    \ are permitted.\n   These algorithms rely on two counters:\n      Invocation\
    \ Counter: A 64-bit integer, incremented after each call\n      to AES-GCM to\
    \ process an SSH binary packet.  The initial value of\n      the invocation counter\
    \ is determined by the SSH initialization\n      vector.\n      Block Counter:\
    \ A 32-bit integer, set to one at the start of each\n      new SSH binary packet\
    \ and incremented as each 16-octet block of\n      data is processed.\n   Ensuring\
    \ that these counters are properly implemented is crucial to\n   the security\
    \ of the system.  The reader is referred to [SSH-GCM] for\n   details on the format,\
    \ initialization, and usage of these counters\n   and their relationship to the\
    \ initialization vector and the SSV.\n"
- title: 6.2.  Data Integrity
  contents:
  - "6.2.  Data Integrity\n   The reader is reminded that, as specified in [SSH-GCM],\
    \ Suite B\n   requires that all 16 octets of the authentication tag MUST be used\
    \ as\n   the SSH data integrity value of the SSH binary packet.\n"
- title: 7.  Rekeying
  contents:
  - "7.  Rekeying\n   Secure Shell allows either the server or client to request that\
    \ the\n   Secure Shell connection be rekeyed.  Suite B places no constraints on\n\
    \   how frequently this is to be done, but it does require that the\n   cipher\
    \ suite being employed MUST NOT be changed when a rekey occurs.\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   When using ecdh_sha2_nistp256, each exponent\
    \ used in the key exchange\n   must have 256 bits of entropy.  Similarly, when\
    \ using\n   ecdh_sha2_nistp384, each exponent used in the key exchange must have\n\
    \   384 bits of entropy.  The security considerations of [SSH-Arch]\n   apply.\n"
- title: 9.  References
  contents:
  - '9.  References

    '
- title: 9.1.  Normative References
  contents:
  - "9.1.  Normative References\n   [RFC2119]    Bradner, S., \"Key words for use\
    \ in RFCs to Indicate\n                Requirement Levels\", BCP 14, RFC 2119,\
    \ March 1997.\n   [SUITEBCERT] Solinas, J. and L. Zieglar, \"Suite B Certificate\
    \ and\n                Certificate Revocation List (CRL) Profile\", RFC 5759,\n\
    \                January 2010.\n   [SSH-Arch]   Ylonen, T. and C. Lonvick, Ed.,\
    \ \"The Secure Shell (SSH)\n                Protocol Architecture\", RFC 4251,\
    \ January 2006.\n   [SSH-Tran]   Ylonen, T. and C. Lonvick, Ed., \"The Secure\
    \ Shell (SSH)\n                Transport Layer Protocol\", RFC 4253, January 2006.\n\
    \   [SSH-ECC]    Stebila, D. and J. Green, \"Elliptic Curve Algorithm\n      \
    \          Integration in the Secure Shell Transport Layer\", RFC\n          \
    \      5656, December 2009.\n   [SSH-GCM]    Igoe, K. and J. Solinas, \"AES Galois\
    \ Counter Mode for\n                the Secure Shell Transport Layer Protocol\"\
    , RFC 5647,\n                August 2009.\n   [SSH-X509]   Igoe, K. and D. Stebila,\
    \ \"X.509v3 Certificates for\n                Secure Shell Authentication\", RFC\
    \ 6187, March 2011.\n"
- title: 9.2.  Informative References
  contents:
  - "9.2.  Informative References\n   [NIST]       National Institute of Standards\
    \ and Technology, \"Digital\n                Signature Standard (DSS)\", Federal\
    \ Information\n                Processing Standards Publication 186-3.\n   [SEC1]\
    \       Standards for Efficient Cryptography Group, \"Elliptic\n             \
    \   Curve Cryptography\", SEC 1 v2.0, May 2009,\n                <http://www.secg.org/download/aid-780/sec1-v2.pdf>.\n\
    \   [SEC2]       Standards for Efficient Cryptography Group, \"Recommended\n \
    \               Elliptic Curve Domain Parameters\", SEC 2 v1.0, September\n  \
    \              2000.  <http://www.secg.org/download/aid-386/\n               \
    \ sec2_final.pdf>.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Kevin M. Igoe\n   NSA/CSS Commercial Solutions Center\n\
    \   National Security Agency\n   EMail: kmigoe@nsa.gov\n"
