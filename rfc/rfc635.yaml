- title: __initial_text__
  contents:
  - "                  An Assessment of ARPANET Protocols\nABSTRACT\nThis paper presents\
    \ some theoretical and practical\nmotivations for the redesign of the ARPANET\
    \ communication\nprotocols. Issues concerning multipacket messages,\nHost retransmission,\
    \ duplicate detection, sequencing,\nand acknowledgment are discussed. Simplifications\n\
    to the IMP/IMP protocol are proposed on the assumption\nthat new Host level protocols\
    \ are adopted. Familiarity\nwith the current protocol designs is probably necessary\n\
    since many of the arguments refer to details in the\npresent protocol design.\n\
    Introduction.\n     The history of the Advanced Research Project Agency resource\n\
    sharing computer network (ARPANET) [6] is in many ways a history of\nthe study,\
    \ development, and implementation of protocols. During the\nearly development\
    \ of the network many important concepts were dis-\ncovered and introduced into\
    \ the protocol design effort. Protocol\nlayering (functional separation of different\
    \ levels of network trans-\nmission), the notion of bilateral rendezvous to set\
    \ up Host-to-Host\nconnections [l,2], and the definition of a Network Virtual\
    \ Terminal\nto aid in the specification of a Terminal-to-Host protocol [3,14]\
    \ are\nall examples of important early ideas. The tasks facing the ARPANET\ndesign\
    \ teams were often unclear, and frequently required agreements\nwhich had never\
    \ been contemplated before (e.g., common protocols to\npermit different operating\
    \ systems and hardware to communicate). The\nsuccess of the effort, seen in retrospect,\
    \ is astonishing, and much\ncredit is due to those who were willing to commit\
    \ themselves to the job\nof putting the ARPANET together.\n     Over the intervening\
    \ five years since the ARPANET was first begun,\nwe have learned a great deal\
    \ about the design and behavior of the proto-\ncols in use. The Imp-to-Imp protocol\
    \ [4] has undergone continuous re-\nvision, and the HOST/IMP interface specification\
    \ [5] has been modified\nslightly. In retrospect and in the light of experience,\
    \ it seems\nreasonable to reconsider some of the aspects of the designs and implemen-\n\
    tations currently in use. Furthermore, the rapid development of national\ncomputer\
    \ network projects around the world emphasizes the need for\ninternational cooperation\
    \ in the design of communication protocols so\nthat international connections\
    \ can be accomplished.\n     This paper deals with the motivations for the redesign\
    \ of the\nHOST-to-HOST, IMP-to-IMP, and HOST/IMP communication protocols in the\n\
    ARPANET. Analyses of theoretical throughput and delay available from\nexisting\
    \ protocols, and a discussion of some weaknesses in them, are\nincluded.\n   \
    \  The basic conclusions reached in this report are:\n     a) Multipacket message\
    \ facilities can be eliminated without loss\n        of potential throughput,\
    \ and with a concurrent simplification of\n        IMP software. [8]  \n     b)\
    \ Ordering by the destination IMP of messages delivered to a destina-\n      \
    \  tion HOST can lead to a lockup condition similar to the reassembly\n      \
    \  lockup experienced in an earlier version of the IMP protocol in\n        connection\
    \ with multipacket message reassembly [7]. Hosts must\n        order arriving\
    \ messages anyway, so the IMP need not do it.\n     c) HOST/IMP protocol could\
    \ be changed to allow arbitrarily long\n        messages to be sent from HOST\
    \ to IMP, as long as the destination\n        IMP need not reassemble or re-order\
    \ the arriving packets before\n        delivery to the HOST.\n     d) Host level\
    \ retransmission, positive end-to-end acknowledgments,\n        error detection,\
    \ duplicate detection, and message ordering, can\n        eliminate the need for\
    \ many of these features in the IMP/IMP\n        protocol, and the Request for\
    \ next Message (RFNM) facility in the\n        present HOST/IMP protocol.\n  \
    \   e) The flow control mechanism in the current HOST-HOST protocol can\n    \
    \    lose synchronization owing to message loss or duplication.\n     f) Host\
    \ level connections should be full duplex.\n     g) The need for a separate HOST/HOST\
    \ control connection can be\n        eliminated by carrying control information\
    \ in the header of each\n        Host transmission.\nThroughput Considerations.\n\
    \     In spite of the fact that the IMP subnet can deliver up to 80 kb/sec\nbetween\
    \ pairs of Hosts^, virtually no application using Host software\nhas achieved\
    \ this figure. An experiment between Tinker and McClellan\nAir Force Bases in\
    \ 1971 achieved burst rates as high as 40 kb/sec, but\nthis was achieved by the\
    \ use of a non-standard Host/Host protocol which\ntransmitted data over multiple\
    \ logical connections, and which used Host\nlevel re-assembly and acknowledgement\
    \ to achieve reliable, ordered trans-\nmission ^^. The following analysis shows\
    \ that the current Host/Host\nprotocol cannot offer more than 40 kb/sec on a single\
    \ connection owing\nto message format overhead, and that this figure drops hyperbolically\n\
    if the communicating Hosts are separated by several IMPs.\n     The single major\
    \ reason for the distance (hop) dependent behavior\nof Host/Host throughput is\
    \ the \"message-at-a-time\" Host/Host\nprotocol. This means that, on a given connection\
    \ between processes in\n______________________________\n^  Unpublished measurement\
    \ experiments at UCLA run by R. Kahn and V.\n   Cerf confirmed this.\n^^ Unpublished\
    \ measurement data obtained by V. Cerf at the ARPA Network\n   Measurement Center,\
    \ UCLA.\nthe Hosts, only a single message ranging from 0-8063 bits of data can\n\
    be outstanding at any moment. When the Host/Host protocol was originally\ndesigned,\
    \ the IMPs provided up to 256 simplex 1ogical links between pairs\nof Hosts. If\
    \ a message was sent over a link (there was a one to one\nrelationship between\
    \ a link and a connection), the link was blocked until\na RFNM was received from\
    \ the destination IMP indicating that the message\nhad been delivered to the Host.\
    \ Of course, the mechanism was protected\nby a time-out in case the RFNM failed\
    \ to appear.\n    The IMP protocol has since been changed considerably and now\
    \ permits\nup to n messages^ to be outstanding between pairs of IMPs, regardless\n\
    of the links used and regardless of which Hosts are communicating.\n    This last\
    \ point means that there can be some interference among Hosts\nconnected to the\
    \ same IMP if the Hosts are communicating with the same\ndestination IMP.\n  \
    \  The Host/Host protocol has not been changed to take advantage of the\npossibility\
    \ of multiple messages and is unable to achieve maximum possible\nthroughput.\
    \ In figure 1, the time behavior of a multipacket message is\nshown as it passes\
    \ through several IMPs from source to destination.\nIMP(0)  | pkt(0) | pkt(1)\
    \ | ... | pkt(m-1) |\nIMP(1)  |        | | pkt(0) | pkt(1) | ... | pkt(m-1) |\n\
    IMP(h-1)|        | |        | pkt(0) | pkt(1) | ... | pkt(m-1) |\n           \
    \ \\     \\\n             \\     `---> propagation delay from IMPO to IMPl\n \
    \             `-->  packet transmission delay\nPacket handling by h IMPs for an\
    \ m-packet message \n                    Figure 1\n______________________________\n\
    ^ currently four, this limit being imposed by IMP buffer space.\nFigure 1 is naive\
    \ in several ways. First, it does not show any\ninterfering traffic, nor have\
    \ any packets gotten out of order or been\nrouted on alternate paths. Second,\
    \ all packets are assumed to be the\nsame maximum size. Furthermore, the figure\
    \ does not show the transmission\ndelay to and from the Hosts. Thus, the results\
    \ of the analysis will be\nslightly optimistic.\n    The logical connection between\
    \ Hosts will be busy only for m packet\ntimes out of h+m-l packet times. The source\
    \ IMP will be busy for m\npacket transmission times sending the message to a neighboring\
    \ IMP. The\nlast bit of the first packet will arrive at the destination IMP after\
    \ h\npacket transmission times (not counting propagation delay) and the re-\n\
    maining m-1 packets will complete arrival after m-l packet transmission\ntimes.\
    \ The source Host will be permitted to transmit another message\nafter it receives\
    \ a RFNM from the destination IMP. The RFNM is actually\nsent after the message\
    \ has been reassembled, the first packet has been\ndelivered, and the destination\
    \ IMP has sufficient free buffer space for\nanother maximum length multipacket\
    \ message.^ Thus a new transmission\ncannot occur until h+m-1 packet times, at\
    \ least, so the fraction of busy\ntime is just m/(h+m-l).\n    The actual bandwidth\
    \ between IMPs is reduced from 50 kb^^ to 40 kb\nby overhead bits needed for Host/Host,\
    \ IMP/IMP control. IMPs send periodic\nrouting messages to all their neighbors\
    \ (every .640 seconds)^^^ and these\nconsume further bandwidth. We can estimate\
    \ the nominal fraction of 50 kb/sec\nbandwidth available from source to destination\
    \ IMP and multiply this by the\nfractional busy time per connection to obtain\
    \ an optimistic bound on maximum\nthroughput per connection.\n______________________________\n\
    ^  If after 1 second no space is available, the RFNM is sent anyway.\n^^ Some\
    \ IMPs have 230 kb/sec lines, or 9.6 kb/sec, but most have 50 kb/sec.\n^^^This\
    \ interval is a function of line speed and load and may be as low as 128 ms.\n\
    Analysis of Expected Throughput Bounds.\n    Let T be the number of bits of text\
    \ to be transmitted by a Host\nwhose natural word length is W bits. The Host/Host\
    \ message format\nincludes a 32 bit leader followed by a 40 bit prefix, followed\
    \ by the\ntext to be sent. We will assume that a sending Host will transmit an\n\
    integral number of its words, including the 72 bits preceding the text\nof the\
    \ message. Furthermore, the Host/IMP interface appends a one bit\nto each message,\
    \ followed by as many zeroes as are needed to make the\nensemble an integral number\
    \ of 16 bit IMP words (the IMP is a Honeywell\n316 or 516 computer).\n    The\
    \ total number of bits in a Host message whose text contains T\nbits is given\
    \ by equation 1.\n          M(T,W) = B1 (T) + B2 (T,W) + B3(T,W)             \
    \      (1)\n          where B1(T)     = T + 72\n                B2(T,W)   = -\
    \ B1(T) mod W\n                B3(T,W) = 1 + (-B1(T) - B2(T,W) - 1) mod 16\n \
    \   B1(T) is the number of bits in the Host message including leader,\nprefix,\
    \ and text. B2(T,W) is the number of bits needed to make B1(T)\nan integral number\
    \ of Host words, and B3(T,W) is the number of bits needed\nto make the total an\
    \ integral number of 16 bit IMP words.\n    The M(T, W) bits are converted to\
    \ packets in the following\nway. The 32 bit leader is removed and the remaining\
    \ words are divided\ninto packets containing no more than 1008 bits of data, each\
    \ preceded\nby an 96 bit header which includes the data from the 32 bit leader.\
    \ When\nthese packets are transmitted to a neighboring IMP, they are enclosed\n\
    in a line control envelope consisting of 48 bits of control octets and\na 24 bit\
    \ cyclic checksum. We can compute the number of bits required\nto carry all the\
    \ packets as follows:\n              P(T,W) =( (M(T,W)-33)/1008 + 1 ) x 168 +\
    \ M(T,W) - 32       (2)\n    The line transmission efficiency when transmitting\
    \ T bits of Host\ntext is given by.\n          LTE(T,W) = T/P(T,W)           \
    \                         (3)\n    The expected fraction of time a logical link,\
    \ which is H hops long,\ncan be busy carrying a Host message of T text bits is\
    \ given by\n                            P(T,W)\n        EBF(T,W,H) = _____________________________\n\
    \                     H*min[P(T,W) , 1176]+ max [P(T,W)-1176 ,0]          (4)\n\
    EBF(T,W,H) is a refinement of the fraction computed earlier (m/(m+h-1)).\n   \
    \ The numerator of EBF(T,W,H) is just the number of bits which must be\ntransmitted\
    \ from the source IMP. The denominator uses the min and max\nfunctions to deal\
    \ with the case that a message is less than a full single\npacket in length. In\
    \ any case, it takes H hops to deliver the first\npacket, and the remaining bits\
    \ follow this packet until the entire message\nhas arrived at the destination\
    \ IMP. (Note that DLE may be doubled on the\nline so that this calculation assumes\
    \ 'DLE' never sent as data.)\n    The routing messages require 1024 bits of text\
    \ and 136 bits of packet\nheader and line control, and are sent by each IMP to\
    \ all its adjacent\nneighbors every .640 seconds. The bandwidth required for routing\
    \ messages\nis thus (1160)/.640 = 1.8 kb/sec.\n    Thus the bandwidth which can\
    \ be expected for Host messages containing\nT text bits, sent over H hops, is\
    \ expressed in equation (5) below.\n    B(T,W,H) = EBF(T,W,H) x LTE(T,W) x (50-1.8)\
    \ kb/sec           (5)\n    B(T,W,H) ignores a number of complicating factors:\n\
    \    a) delay for sending RFNM and implicit space reservation for\n       multipacket\
    \ messages to source IMP.\n    b) propagation delays between Host/IMP and IMP/IMP\n\
    \    c) queueing delays at intermediate IMPs\n    d) retransmission delays\n \
    \   Nevertheless, B(T,W,H) offers an optimistic estimate of the bandwidth\n  \
    \  that can be expected using the current ARPANET Host/Host protocol.\n      \
    \  There is an implicit assumption that packets of a multipacket message\n   \
    \ are not sent over alternate routes (e.g., two 50 kb/sec paths). Since\n    alternate\
    \ routing in the IMP subnet is used to avoid congested areas\n    and not to improve\
    \ bandwidth, this assumption is probably valid for the\n    low traffic densities\
    \ presently found in the ARPANET.\n        B(T,W,H) has been plotted in figure\
    \ 2 for a 32 bit Host (W=32), and\n    a range of message text lengths and Hops.\
    \ As can be seen, the effect\n    of single message at a time transmission on\
    \ a single logical connection\n    is very marked for longer and longer hops.\
    \ The curves would be even\n    lower in the case of a satellite channel owing\
    \ to the long propagation\n    delay (1/4 second up and down) for both the message\
    \ and the returning RFNM.\n42 ||\n   ||\n40 |||\n   |||\n38 |||8\n   1||78\n36\
    \  12|78\n    12||78\n34  123|678\n    123456 78\n32  1 23456  78\n    1 2 3456\
    \   78\n30  1 2 3 45 6  7 8\n    1  2 3 45  6  7 8\n28  1  2  3 4 5  6  7 8\n\
    \    1  2   3 4  5  6  7 8\n26  1  2    3 4   5  6  7 8\n     1  2    3  4   5\
    \  6  7 8\n24   1   2    3  4    5  6  7  8\n     1    2    3  4     5  6  7 \
    \ 8\n22   1     2    3   4     5  6  7   8\n     1      2     3   4     5   6\
    \  7   8\n20    1      2      3   4      5   6  7    8\n       1       2     \
    \ 3   4       5   6   7      8  (8 Packets, 7992 bits)\n18     1        2    \
    \   3   4         5   6      7  (7 Packets, 7000 bits)\n        1         2  \
    \     3    4         5       6  (6 Packets, 5976 bits)\n16       1         2 \
    \       3     4         5\n          1         2           3     4          5\
    \  (5 Packets, 4984 bits)\n14         1          2            3       4\n    \
    \        1           2             3          4  (4 Packets, 3960 bits)\n12  \
    \          1           2                3\n                1           2     \
    \               3  (3 Packets, 2968 bits)\n10                1             2\n\
    \                    1                 2\n8                                  \
    \              2  (2 Packets, 1944 bits)\n                            1\n6\n4\
    \                                                1  (1 Packet, 952 bits)\n2\n\
    \   1    2    3    4    5    6    7    8    9    10\n               Number of\
    \ Hops\nSingle Link Source to Destination Host Throughput (32 bit word Host)\n\
    \                          Figure 2\nThe Multipacket Message Issue.\n    The original\
    \ IMP system permitted only one message at a time on a\nsingle link, and thus\
    \ some means was needed to allow for higher bandwidth\nthan single packet messages\
    \ could provide. This was achieved, to some\nextent, by permitting up to eight\
    \ packets in a single message.\n    It was soon discovered, however, that a Host\
    \ transmitting multipackets\non separate logical links could cause a lockup condition\
    \ at the destination,\nand was first described by R. Kahn and W. Crowther [7].^\
    \ Essentially,\ninadequate space might exist at the destination to reassemble\
    \ all multi-\npackets in transit on several links. The condition was self-sustaining\n\
    if the Host continued transmission, although the destination could\ndiscard unassembled\
    \ multipackets after a time-out. The condition either\nbacked up into the rest\
    \ of the network, or at best caused loss of\nmessages in the network.\n    The\
    \ solution to the multipacket reassembly lockup problem that was\neventually implemented\
    \ required the source IMP to reserve reassembly\nbuffer space at the destination\
    \ IMP before transmitting the multipacket.\n    Actually, this problem is just\
    \ a case of a more general problem which can\nbe caused by the destination IMP\
    \ sequencing of messages delivered to the\nHost.\nOrdering of Messages.\n    The\
    \ IMP system guarantees that messages wi1l be delivered to a\ndestination Host\
    \ in the same order that they left a source Host. This\nservice can cause a lockup\
    \ similar to reassembly lockup if enough messages\narc in transit to the destination\
    \ IMP. Single packet messages are sent\nwithout prior reservation to the destination\
    \ and, if space is available\nfor them, a RFNM is returned to the source IMP.\
    \ In the event that no\n______________________________\n^ Kahn actually knew in\
    \ 1967 that the condition could occur, but was unable\n  to convince his colleagues\
    \ until he actually locked up the network by using\n  a message generator to flood\
    \ the network in March, 1970.\nroom is available, an implicit reservation request\
    \ is queued at the\ndestination IMP. When space is available, an allocation message\
    \ is sent\nto the source IMP which retransmits the single packet message. The\n\
    source IMP keeps a copy of the single packet message for retransmission\nuntil\
    \ it either receives a RFNM from the first copy transmitted or an\nallocate message\
    \ indicating that there is now room available for a\nsecond copy to be accepted.^\n\
    This scheme can fail if either a given Host has too many messages\nin transit,\
    \ or if many Hosts, served by different IMPs, have too many\nmessages in transit\
    \ for the same destination. This is so because the\ndestination IMP will accept\
    \ packets which arrive out of order and buffers\nthem until they can be re-ordered\
    \ for transmission to the destination\nHost.\n    Presently, a source IMP only\
    \ permits up to four messages (regardless\nof length) to be in transit for a given\
    \ destination at a time. This\nessentially reduces the probability of a lockup,\
    \ but it is not zero,\nsince sufficient messages may be outstanding from different\
    \ IMPs for the\nsame destination to cause a lockup.\n    Such lockups are protected\
    \ against as well, by timing out undelivered\nmessages at the destination and\
    \ discarding them. The timeout is on the\norder of tens of seconds. Even though\
    \ the IMP subnet can recover from\nsuch conditions, it is apparent that Hosts\
    \ must be prepared to retransmit\nmessages occasionally to recover from message\
    \ loss caused by deliberate\ndiscarding of messages at the destination or by catastrophic\
    \ failures in\nwhich an IMP loses all its packets upon crashing.\n______________________________\n\
    ^ R. Kahn, L. Kleinrock, and H. Opderbeck point out that IMPs do not accept\n\
    \  out-of-order packets, but do send allocates back for them. If room is also\n\
    \  allocated for unreceived but anticipated in-order packets, no lockup will\n\
    \  occur. If this step is omitted, then the implementation may fail.\nHost Retransmission,\
    \ Sequencing, and Duplicate Detection.\n    The Host/Host protocol docs not provide\
    \ for retransmission. If it\ndid, however, then this would require that the destination\
    \ Host detect\nduplicate transmissions and also verify sequencing of arriving\
    \ messages\nsince the destination IMP cannot, in the current scheme, detect that\
    \ a\nHost has sent a duplicate message.\n    If this line of reasoning is pursued,\
    \ it becomes evident that\nsequencing of messages by the destination IMP is redundant\
    \ and could be\neliminated. Furthermore, with the elimination of ordering, multipacket\n\
    messages could also be eliminated so long as Hosts were permitted to\ntransmit\
    \ a sufficient number of single packet messages to achieve maximum\npotential\
    \ bandwidth.\n    Along with Host retransmission, it is necessary to introduce\
    \ some\nkind of end-to-end positive acknowledgment. The RFNM is currently sent\n\
    by the destination IMP to the source Host and is taken to mean that a\nmessage\
    \ has been successfully delivered to the destination Host (for\nmultipacket messages,\
    \ the RFNM is sent after the first packet has been\ndelivered). It seems sensible\
    \ to arrange a Host level acknowledgment\nwhich confirms delivery. In this case,\
    \ the RFNM could also be eliminated.\n    One might use RFNM's optionally as a\
    \ debugging tool, to be turned off\nand on at will.\n    Statistics taken from\
    \ the ARPANET indicate that Host retransmission\nwould rarely be required on account\
    \ of message loss, but this is partly\nbecause of the retransmission and reservation\
    \ facilities in the current\nIMP system.\nFlow Control.\n    If all end-to-end\
    \ retransmission, duplicate, detection, and sequencing\nare performed by Hosts,\
    \ then it is essential that the source and destina-\ntion Hosts agree upon a maximum\
    \ number of packets (or bits, octets, etc.)\nthat can be outstanding at one time.\
    \ Otherwise, the destination Host\nmay experience lockup problems similar to those\
    \ found now in the destination\nIMP.\n    The current Host/Host flow control scheme\
    \ has several weaknesses.\n    First, it requires that special control messages\
    \ be sent on a control\nconnection which is distinct from the connection on which\
    \ data is transmitted.\n    Second, it is an incremental scheme in which the destination\
    \ Host allocates\na certain number of bits and messages which may be sent by the\
    \ source.\n    Both source and destination Hosts decrement these counts as messages\
    \ are\nsent and received. To maintain throughput, the destination must periodi-\n\
    cally send allocations to the source to replenish its available buffer\nspace.\
    \ Destinations with small amount of buffer space (e.g., Terminal\nIMPs or TIPs)\
    \ must do this fairly frequently and thus generate considerable\ncontrol traffic.\
    \ Third, the loss of an allocation or the duplication of\none can cause loss of\
    \ synchrony between source and destination.\n    In an earlier paper [9], the\
    \ author and R. Kahn propose a more robust\nflow control scheme including ideas\
    \ found in the French CYCLADES network\n[10]. Essentially, the receiver allocates\
    \ a window representing the span\nof sequence numbers that the sender may transmit.\
    \ Acknowledgments from\nthe receiver to the sender indicate the largest sequence\
    \ number received\nso far (implicitly acknowledging all those preceding), and\
    \ also indicate\nthe .current width of the window. The sender immediately knows\
    \ which sequence\nnumbers can be sent next. The scheme also allows for duplicate\
    \ detection\nand reordering of messages.\n    Acknowledgment and flow control\
    \ information' is sent \"piggy-back\"\nwith data flowing in the reverse direction\
    \ of a full duplex logical\nconnection so that a separate control connection is\
    \ not needed for this\npurpose. For example, a message is sent with sequence number\
    \ M and\nlength L in octets. The receiver will respond with acknowledgment of\n\
    sequence number M+L and window size W. The sequence number of each\nmessage is\
    \ the sequence number of the previous message plus its length\nin octets.\n  \
    \  The receiver can vary the size of W without any serious adverse\neffect, and\
    \ can survive the receipt of duplicates or the loss of messages\ndue to the retransmission\
    \ and duplicate detection permitted by the scheme.\n    The sender is not permitted\
    \ to transmit a message whose sequence number\nwould exceed the sum of the last\
    \ sequence number acknowledged plus the\ncurrent window size, W, modulo the maximum\
    \ sequence number plus one.\nArbitrary Message Lengths.\n    Until now, it has\
    \ been implicit that multipacket messages are unneces-\nsary for maintaining high\
    \ throughput, as long as sufficient packets can\nbe sent to fill the delay pipeline\
    \ from source to destination Host. If\nthe IMP system were programmed with knowledge\
    \ of the Host/Host protocol\nso that it could create a properly formatted Host/Host\
    \ header for each\npacket it transmits, given the initial header of an arbitrarily\
    \ long\nmessage, then packets could be delivered out of order to the destination\n\
    Host, so long as each correctly identified the range of sequence numbers\ncontained\
    \ in each packet. Since each octet of a message has an implicit\nsequence number,\
    \ this would not be difficult to compute. An idea similar\nto this is found in\
    \ the Very Distant Host Reliable Transmission Package:\n[appendix F, 5] in the\
    \ current ARPANET, except in this case, a Host must\nknow about IMP packet format.\
    \ It is debatable whether this would be a\ngood idea, since changes in Host/Host\
    \ protocol would require changes in\nIMP programming, but if it were implemented,\
    \ then Hosts could send\narbitrarily long messages. The destination Host would\
    \ receive a collec-\ntion of single packet messages which it would then sequence\
    \ as if they\nhad been sent that way by the source Host in the first place.\n\
    \    Simplex versus Full-Duplex Logical Connections\nThe present Host/Host protocol\
    \ implements simplex connections. The\nusage over the last five years seems to\
    \ indicate that most often, two\nsimplex connections are set up to act as a full\
    \ duplex connection.\n    If Host level acknowledgments and flow control are implemented,\
    \ then it\nis natural for them to be carried in the reverse direction of a full\n\
    duplex logical connection. Furthermore, terminal to Host connections\nare necessarily\
    \ full-duplex to allow for data to move in both directions.\n    Finally, by embedding\
    \ control in the headers of returning traffic on the\nfull duplex connection,\
    \ the need for a separate control connection could\nbe eliminated.\nConnection\
    \ Set-up.\nThe current Host/Host protocol uses control messages sent on a\nspecial\
    \ control connection to establish new connections,. The procedure\nis called the\
    \ Initial Connection Protocol or ICP [11]. The protocol is\nsymmetric and requires\
    \ that information be exchanged by both Hosts as\nto the names of the sockets\
    \ at either end of the connection. This\nexchange precedes any flow of data. Other\
    \ control messages are exchanged\nwhich determine the buffer space available at\
    \ the receiver.\n    A proposal by D. Walden [12] suggests that this is largely\
    \ unnecessary,\nas long as both sides can simultaneously send data identifying\
    \ the source\nand destination sockets (Walden calls them Ports) along with the\
    \ text of\nthe messages.\n    A post office analogy is useful to describe what\
    \ is intended. The\nsource Host writes a letter and encloses it in an envelope\
    \ addressed to\nthe destination port with a return port address. Either the destination\n\
    port is willing to receive or it is not (e.g. it may not even be known\nto the\
    \ destination Host). In the former case, the letter is acknowledged\nin the usual\
    \ fashion. In the latter case, the letter is not acknowledged\n(port unprepared\
    \ to receive), or it is rejected (\"address unknown\").\n    Since port addresses\
    \ may be dynamically assigned to processes in a\ndestination Host, it will probably\
    \ be necessary to include a formal con-\ntrol exchange which indicates to the\
    \ sender that a receive port is being\nclosed, and the sender would be expected\
    \ to acknowledge this. Similarly,\nthe sender may end a transmission with the\
    \ indication that the send port\nis being closed and the receiver would similarly\
    \ acknowledge. Since\nHosts do the sequencing, there can be no confusion as to\
    \ when the closure\nis to take place. The rejection of an initial transmission\
    \ can be made\nto look like the closure of the destination port so that the number\
    \ of\ndistinct control messages can be kept to a minimum. This method is\nsimilar\
    \ to the one currently used in the ARPANET, but could be carried\nout via control\
    \ bits in the Host level messages and thus eliminate the\nneed for a special control\
    \ connection.\nSummary.\n    Arguments have been presented in this paper which\
    \ show that multi-\npacket reassembly is not the best vehicle for achieving high\
    \ throughput\nfrom Host to Host. The elimination of IMP reassembly as well as\
    \ message\nsequencing by the destination IMP can permit considerable simplification\n\
    of the IMP protocols, while simultaneously placing the. burden of buffering,\n\
    duplicate detection, and sequencing of messages on the Hosts which have\nthe buffer\
    \ space for this purpose.\n    Arbitrarily long messages could be sent by Hosts,\
    \ at the expense of\nIMP knowledge of Host protocol. Eliminating the ordering\
    \ requirement\nat the destination IMP also eliminates serious potential lockup\
    \ conditions.\n    Host level positive acknowledgments can eliminate the erroneous\
    \ use\nof the RFNM for this purpose, and permit a more robust protocol which\n\
    need not depend upon perfect performance without message loss by the\nIMP subnet.\n\
    \    Full duplex logical connections between ports in Hosts are more\nnatural\
    \ than the simplex connections presently used, and facilitate the\nelimination\
    \ of the special control connection required in the current\nHost protocol.\n\
    Unresolved Problems and Issues.\n    Even if a source and destination Host have\
    \ adequate buffer space to\npermit a large number of messages (or packets, or\
    \ octets) to be outstanding\nbetween them, the IMP subnet must have a way of combating\
    \ congestion\nwhich may result from too rapid influx of data from a source Host,\
    \ or\nfrom momentary congestion owing to the confluence of excessive traffic\n\
    heading, in the same direction, possibly to the same destination. Alternate\n\
    routing strategies can help, but not completely solve the problem. One\npossibility\
    \ is to insist that source Hosts monitor actual throughput\nachieved over the\
    \ last few seconds (milliseconds?) and adjust output\nrate accordingly. Destination\
    \ Hosts can monitor this throughput as well,\nand adjust the receive buffer space\
    \ it allocates to the sender to reduce\nunnecessary retransmissions. The IMPs\
    \ can simply discard traffic which\ncannot be buffered, knowing that the source\
    \ will retransmit. IMPs\nwhich discard packets to eliminate congestion could even\
    \ send short\nwarning messages to source or destination (or both) to stimulate\
    \ adjust-\nment. This is a very sticky problem and involves issues such as payment\n\
    by Hosts for retransmission. Most strategies in use today involve\nlimiting, a\
    \ priori, the amount of data which a source Host is allowed\nto send (e.g., isarhythmic\
    \ network proposed by Davies [13]; maximum of\nn messages allowed by ARPANET IMPs).\
    \ Measurement of throughput\nachieved by source and destination Hosts may be a\
    \ good strategy in any\ncase since it serves as a measure of qua1ity of service\
    \ provided by the\npacket switchtng network.\n    In the ARPANET, the TELNET protocol\
    \ [14] for terminal to Host com-\nmunication has needed some way of signalling\
    \ the Host in which the serving\nprocess resides that any accumulated data should\
    \ be discarded up to the\npoint of the \"interrupt signal.\" This facility permits\
    \ a remote user\nto abort or recapture control from an uncooperative serving process\n\
    which has stopped accepting data. The current scheme involves the use\nof a special\
    \ interrupt signal sent on the control connection, but there\nis a problem of\
    \ synchronizing the interrupt request with the data in the\npipeline. This signal\
    \ could be carried in the control field of a Host\nmessage and would participate\
    \ in the sequence numbering of the data, thus\nproviding for synchronization.\
    \ Since the Host operating system would\nprocess the message header before passing\
    \ the data to the receiving port,\nthe interrupt could bypass processing by the\
    \ receiving process and thus\nprovide the desired interrupt-like effect.\n   \
    \ There are undoubtedly many other problems and issues which could\nnot be mentioned\
    \ in the scope of this paper, and the author would be\npleased if these and the\
    \ preceding commentary will stimulate discussion\nand thus further the general\
    \ understanding of protocol requirements for\ndistributed computer networks.\n\
    Acknowledgments:\nThroughput and delay analysis: some of the basic ideas in this\n\
    analysis are due to J. McQuillan (Bolt, Beranek, and Newman). Single\npacket re-ordering\
    \ lockup: first called to the author's attention by\nP. Higginson (University\
    \ 6f London). Host-Host Protocol Design:\ndeveloped largely under the auspices\
    \ of the International Network Working\nGroup (IFIP TC6.1), and the author especially\
    \ acknowledges contributions\nby R. Kahn, R. Metcalfe, L. Pouzin and H. Zimmerman,\
    \ as well as S. Crocker,\nA. McKenzie, and R. Scantlebury. Numerous omissions\
    \ and misstatements\nwere detected by R. Kahn, L. Kleinrock and H. Opderbeck.\n\
    \    The author is grateful for the support of the Defense Advanced\nResearch\
    \ Projects Agency under contract DAHC-15-73C-0435.\n                         \
    \     References\n1.  McKenzie, A. \"HOST/HOST Protocol for the ARPA Network,\"\
    \ Current Network\n    Protocols, Network Information Center, Stanford Research\
    \ Institute,\n    Menlo Park, California, January 1972 (NIC8246).\n2.  Carr, S.\
    \ and S. Crocker, V. Cerf, \"HOST-HOST Communication Protocol\n    in the ARPA\
    \ Network, AFIPS 1970, SJCC Proceedings, Vol. 36, Atlantic\n    City, AFIPS Press,\
    \ New Jersey, pp. 589-597 [somewhat out of date].\n3.  Crocker, S. D., and J.\
    \ Heafner, R. Metcalfe, J. Postel, \"Function-\n    Oriented Protocols for the\
    \ ARPA Computer Network,\" AFIPS 1972 SJCC\n    Proceedings, Vol. 40, Atlantic\
    \ City. AFIPS Press, New Jersey,\n    pp. 271-279.\n4.  Heart, F. E., and R. E.\
    \ Kahn, et al, \"The Interface Message Processor\n    for the ARPA Computer Network,\
    \ AFIPS 1970 SJCC Proceedings, Vol. 36,\n    Atlantic City, AFIPS Press, New Jersey,\
    \ pp. 551-567.\n5.  Bolt, Beranek and Newman, Inc., \"Specification for the Interconnection\n\
    \    of a Host and an IMP,\" BBN Report 1822, April 1973 (Revised).\n6.  Roberts,\
    \ L. and B. Wessler, \"Computer Network Development to Achieve\n    Resource Sharing,\"\
    \ AFIPS 1970, SJCC Proceedings, Vol. 36, Atlantic City,\n    AFIPS Press, New\
    \ Jersey, pp. 543-549.\n7.  Kahn, R. E. and W. Crowther, \"Flow Control in a Resource\
    \ Sharing\n    Computer Network,\" Second Symposium on Problems in the Optimization\
    \ of\n    Data Communications Systems, Palo Alto, October 1971, p. 108-116\n \
    \   [also IEEE Transactions on Communication, June 1972].\n8.  Kahn, R. E., \"\
    Resource Sharing Communication Networks,\" IEEE\n    Proceedings, Nov. 1972.\n\
    9.  Cerf, V. G. and R. E. Kahn, \"A Protocol for Packet Network Inter-\n    communication,\"\
    \ IEEE Transactions on Communication, vol. COM-22\n    No. 5, May 1974 p 637-641.\
    \ \n10.  Pouzin, L., \"Presentation and Major Design Aspects of the CYCLADES\n\
    \     Computer Network,\" Data Networks: Analysis and Design, Third Data\n   \
    \  Communications Symposium, St. Petersburg, Florida, November 1973,\n     pp.\
    \ 80-87.\n11.  Postel, J., \"Official Initial Connection Protocol,\" Current Network\n\
    \     Protocols, Network Information Center, Stanford Research Institute,\n  \
    \   Menlo Park, California, January 1972 (NIC 7101).\n12.  Walden, D., 'A System\
    \ for Interprocess Communication in a Resource\n     Sharing Computer Network,\
    \ Communications of the ACM, 15, 4, April 1972,\n     pp. 221-230 (NIC 9926).\n\
    13.  Davies, D., \"Communication Networks to Serve Rapid Response\n     Computers,\"\
    \ Information Processing 68, Proceedings of IFIP Congress\n     1968, Vol. 2,\
    \ Edinburgh, Scotland, 1968, North-Holland Publishing\n     Co., Amsterdam, 1969,\
    \ p. 650-658.\n14.  McKenzie, A. \"TELNET Protocol Specification,\" Current Network\
    \ Protocols,\n     Network Information Center, Stanford Research Institute, Menlo\
    \ Park,\n     California, August 1973 (NIC 18639, NIC 18638 - Revisions).\n  \
    \     [ This RFC was put into machine readable form for entry ]\n       [ into\
    \ the online RFC archives by Roger D. Moore, with  ]\n       [ assistance from\
    \ William M. Stewart on Figures 1 and 2,]\n       [ 11/2006 ]\nNotes by Roger\
    \ D. Moore regarding copy and formatting changes:\nA] Page numbers zero and one\
    \ added to text\nB] Paragraph indent in pages 1-3 is five; it is four spaces in\
    \ pp 4++\nC] All pen marked underlining from paper copy has been discarded.\n\
    D] Footnotes: The original text used a sequence of superscript\nasterisks to mark\
    \ a footnote.\nI have replaced all of these with the character \"^\" which does\
    \ not\n otherwise appear in the document. I have used a sequence of\nunderscore\
    \ characters to\n to seperate text and notes at bottom of pages 3 4 5 10 11.\n\
    E] Formulae: On page six I have replaced symbols of the form \"B\nsubscript digit\"\
    \ with \"Bdigit\"\nF] Forumla [2] page seven: I have rewritten this to eliminate\n\
    horizontal line (division symbol).\nG] Quarter symbol: page eight (last line)\
    \ had a special symbol which I\nhave replaced with \"1/4\"\nH] Marginal notes:\
    \ I have preserved formulae notes from page\nsix. Others have been discarded.\n\
    I] Page numbers: I have left two blank lines after page header. Page\nfooter is\
    \ incomplete\n  but has the form [Page 9] or [Page 99]. RFCs in the archive have\n\
    some special character\n  between the footer and header (ASCII formfeed?). I was\
    \ unable to\nenter this character.\nJ] Reference 9: I have included page numbers\
    \ since this paper is now\npublished.\n"
