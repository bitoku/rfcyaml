- title: __initial_text__
  contents:
  - "   Generic Security Service Application Program Interface (GSS-API)\n       \
    \       Extension for Storing Delegated Credentials\n"
- title: Abstract
  contents:
  - "Abstract\n   This document defines a new function for the Generic Security Service\n\
    \   Application Program Interface (GSS-API), which allows applications to\n  \
    \ store delegated (and other) credentials in the implicit GSS-API\n   credential\
    \ store.  This is needed for GSS-API applications to use\n   delegated credentials\
    \ as they would use other credentials.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2009 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\
    \ in effect on the date of\n   publication of this document (http://trustee.ietf.org/license-info).\n\
    \   Please review these documents carefully, as they describe your rights\n  \
    \ and restrictions with respect to this document.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n\
    \   2. Conventions Used in This Document ...............................3\n  \
    \ 3. GSS_Store_cred() ................................................3\n   4.\
    \ C-Bindings ......................................................5\n   5. Examples\
    \ ........................................................6\n   6. Security Considerations\
    \ .........................................6\n   7. Normative References ............................................7\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The GSS-API [RFC2743] clearly assumes that credentials exist\
    \ in an\n   implicit store whence they can be acquired using GSS_Acquire_cred()\n\
    \   and GSS_Add_cred() or through use of the default credential.\n   Multiple\
    \ credential stores may exist on a given host, but only one\n   store may be accessed\
    \ by GSS_Acquire_cred() and GSS_Add_cred() at any\n   given time.\n   This assumption\
    \ can be seen in Sections 1.1.1.2 and 1.1.1.3 of\n   [RFC2743] as well as in Section\
    \ 3.5 of [RFC2744].\n   Applications may be able to change the credential store\
    \ from which\n   credentials can be acquired, either by changing user contexts\
    \ (where\n   the applications have the privilege to do so) or by other means\n\
    \   (where a user may have multiple credential stores).\n   Some GSS-API acceptor\
    \ applications always change user contexts, after\n   accepting a GSS-API security\
    \ context and making appropriate\n   authorization checks, to the user context\
    \ corresponding to the\n   initiator principal name or to a context requested\
    \ by the initiator.\n   The means by which credential stores are managed are generally\
    \ beyond\n   the scope of the GSS-API.\n   In the case of delegated credential\
    \ handles however, such credentials\n   do not exist in the acceptor's credential\
    \ store or in the credential\n   stores of the user contexts to which the acceptor\
    \ application might\n   change.  The GSS-API provides no mechanism by which delegated\n\
    \   credential handles can be made available for acquisition through\n   GSS_Acquire_cred()/GSS_Add_cred().\
    \  The GSS-API also does not provide\n   any credential import/export interfaces\
    \ like the GSS-API context\n   import/export interfaces.\n   Thus, acceptors are\
    \ limited to making only direct use of delegated\n   credential handles and only\
    \ with GSS_Init_sec_context(),\n   GSS_Inquire_cred*(), and GSS_Release_cred().\
    \  This limitation is\n   particularly onerous on Unix systems where a call to\
    \ exec() to\n   replace the process image obliterates any delegated credentials\n\
    \   handle that may exist in that process.\n   In order to make delegated credentials\
    \ generally as useful as\n   credentials that can be acquired with GSS_Acquire_cred()\
    \ and\n   GSS_Add_cred(), a primitive is needed that allows storing of\n   credentials\
    \ in the implicit credential store.  We call this primitive\n   \"GSS_Store_cred()\"\
    .\n"
- title: 2.  Conventions Used in This Document
  contents:
  - "2.  Conventions Used in This Document\n   The key words \"MUST\", \"MUST NOT\"\
    , \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n"
- title: 3.  GSS_Store_cred()
  contents:
  - "3.  GSS_Store_cred()\n   Inputs:\n   o  input_cred_handle CREDENTIAL HANDLE,\
    \ -- credential to store; MUST\n      NOT be GSS_C_NO_CREDENTIAL.\n   o  cred_usage\
    \ INTEGER -- 0=INITIATE-AND-ACCEPT, 1=INITIATE-ONLY,\n      2=ACCEPT-ONLY.\n \
    \  o  desired_mech_element OBJECT IDENTIFIER, -- if GSS_C_NULL_OID, then\n   \
    \   store all the elements of the input_cred_handle, otherwise, store\n      only\
    \ the element of the corresponding mechanism.\n   o  overwrite_cred BOOLEAN, --\
    \ if TRUE, replace any credential for the\n      same principal in the credential\
    \ store.\n   o  default_cred BOOLEAN -- advisory input; if TRUE, make the stored\n\
    \      credential available as the default credential (for acquisition\n     \
    \ with GSS_C_NO_NAME as the desired name or for use as\n      GSS_C_NO_CREDENTIAL).\n\
    \   Outputs:\n   o  major_status INTEGER.\n   o  minor_status INTEGER.\n   o \
    \ mech_elements_stored SET OF OBJECT IDENTIFIER, -- the set of\n      mechanism\
    \ OIDs for which credential elements were successfully\n      stored.\n   o  cred_usage_stored\
    \ INTEGER -- like cred_usage, but indicates what\n      kind of credential was\
    \ stored (useful when the cred_usage input\n      parameter is set to INITIATE-AND-ACCEPT).\n\
    \   Return major_status codes:\n   o  GSS_S_COMPLETE indicates that the credentials\
    \ were successfully\n      stored.\n   o  GSS_S_CREDENTIALS_EXPIRED indicates\
    \ that the input credentials had\n      expired or expired before they could be\
    \ stored.\n   o  GSS_S_NO_CRED indicates that no input credentials were given.\n\
    \   o  GSS_S_UNAVAILABLE indicates that the credential store is not\n      available.\n\
    \   o  GSS_S_DUPLICATE_ELEMENT indicates that an element of the input\n      credential\
    \ could not be stored because a credential for the same\n      principal exists\
    \ in the current credential store and the\n      overwrite_cred input argument\
    \ was FALSE.\n   o  GSS_S_FAILURE indicates that the credential could not be stored\n\
    \      for some other reason.  The minor status code may provide more\n      information\
    \ if a non-GSS_C_NULL_OID desired_mech_element was\n      given.\n   GSS_Store_cred()\
    \ is used to store, in the current credential store, a\n   given credential that\
    \ has either been acquired from a different\n   credential store or been accepted\
    \ as a delegated credential.\n   Specific mechanism elements of a credential can\
    \ be stored one at a\n   time by specifying a non-GSS_C_NULL_OID mechanism OID\
    \ as the\n   desired_mech_element input argument; in which case, the minor status\n\
    \   output SHOULD have a mechanism-specific value when the major status\n   is\
    \ not GSS_S_COMPLETE.\n   The initiator, acceptor, or both usages of the input\
    \ credential may\n   be stored as per the cred_usage input argument.\n   The credential\
    \ elements that were actually stored, when the major\n   status is GSS_S_COMPLETE,\
    \ are indicated through the cred_usage_stored\n   and mech_elements_stored function\
    \ outputs.\n   If credentials already exist in the current store for the principal\n\
    \   of the input_cred_handle, then those credentials are not replaced\n   with\
    \ the input credentials unless the overwrite_cred input argument\n   is TRUE.\n\
    \   In the GSS-API, the default credential can be used by using\n   GSS_C_NO_CREDENTIAL\
    \ or a CREDENTIAL handle acquired by calling\n   GSS_Acquire_cred() or GSS_Add_cred()\
    \ with the desired_name input set\n   to GSS_C_NO_NAME.\n   If the default_cred\
    \ input argument is TRUE, and the input credential\n   can be successfully stored,\
    \ then the input credential SHOULD be\n   stored as the default credential (see\
    \ above).\n   If the current credential store has no default credential (see\n\
    \   above), then the implementation MAY make the stored credentials\n   available\
    \ as the default credential regardless of the value of the\n   default_cred input\
    \ argument.\n"
- title: 4.  C-Bindings
  contents:
  - "4.  C-Bindings\n   The C-Bindings for GSS_Store_cred() make use of types from\
    \ and are\n   designed based on the style of the GSS-APIv2 C-Bindings [RFC2744].\n\
    \         OM_uint32 gss_store_cred(\n            OM_uint32         *minor_status,\n\
    \            gss_cred_id_t     input_cred_handle,\n            gss_cred_usage_t\
    \  cred_usage,\n            const gss_OID     desired_mech,\n            OM_uint32\
    \         overwrite_cred,\n            OM_uint32         default_cred,\n     \
    \       gss_OID_set       *elements_stored,\n            gss_cred_usage_t  *cred_usage_stored)\n\
    \                        Figure 1\n   The two boolean arguments, 'overwrite_cred'\
    \ and 'default_cred', are\n   typed as OM_uint32; 0 corresponds to FALSE, non-zero\
    \ values\n   correspond to TRUE.\n"
- title: 5.  Examples
  contents:
  - "5.  Examples\n   The intended usage of GSS_Store_cred() is to make delegated\n\
    \   credentials available to child processes of GSS-API acceptor\n   applications.\
    \  Example pseudo-code:\n      /*\n       * <GSS_Accept_sec_context() loop resulting\
    \ in GSS_S_COMPLETE,\n       * an initiator name (hereafter, \"src_name\") and\
    \ a delegated\n       * credential handle (hereafter \"deleg_cred\").>\n     \
    \  *\n       * <\"requested_username\" is a username derived from the\n      \
    \ * initiator name or explicitly requested by the initiator\n       * application.>\n\
    \       */\n      ...\n      if (authorize_gss_client(src_name, requested_username))\
    \ {\n         /*\n          * For Unix-type platforms this may mean calling setuid()\
    \ and\n          * it may or may not also mean setting/unsetting such\n      \
    \    * environment variables as KRB5CCNAME and what not -- all\n          * OS-specific\
    \ details.\n          */\n         if (change_user_context(requested_username))\n\
    \            (void) gss_store_cred(&minor_status, deleg_cred,\n              \
    \                    GSS_C_INITIATE, actual_mech,\n                          \
    \        0, 1, NULL, NULL);\n         }\n         else ...\n      }\n      else\
    \ ...\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   Acceptor applications MUST only store delegated\
    \ credentials into\n   appropriate credential stores and only after proper authorization\
    \ of\n   the authenticated initiator principal to the requested service(s).\n\
    \   Acceptor applications that have no use for delegated credentials MUST\n  \
    \ release them (such acceptor applications that use the GSS-API C-\n   Bindings\
    \ may simply provide a NULL value for the\n   delegated_cred_handle argument to\
    \ gss_accept_sec_context()).\n"
- title: 7.  Normative References
  contents:
  - "7.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in RFCs\
    \ to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March 1997.\n\
    \   [RFC2743]  Linn, J., \"Generic Security Service Application Program\n    \
    \          Interface Version 2, Update 1\", RFC 2743, January 2000.\n   [RFC2744]\
    \  Wray, J., \"Generic Security Service API Version 2 :\n              C-bindings\"\
    , RFC 2744, January 2000.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Nicolas Williams\n   Sun Microsystems\n   5300 Riata Trace\
    \ Ct\n   Austin, TX  78727\n   US\n   EMail: Nicolas.Williams@sun.com\n"
