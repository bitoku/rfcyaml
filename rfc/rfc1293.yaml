- title: __initial_text__
  contents:
  - '                  Inverse Address Resolution Protocol

    '
- title: 1.  Status of this Memo
  contents:
  - "1.  Status of this Memo\n   This RFC specifies an IAB standards track protocol\
    \ for the Internet\n   community, and requests discussion and suggestions for\
    \ improvements.\n   Please refer to the current edition of the \"IAB Official\
    \ Protocol\n   Standards\" for the standardization state and status of this protocol.\n\
    \   Distribution of this memo is unlimited.\n"
- title: 2.  Abstract
  contents:
  - "2.  Abstract\n   This memo describes additions to ARP that will allow a station\
    \ to\n   request a protocol address corresponding to a given hardware address.\n\
    \   Specifically, this applies to Frame Relay stations that may have a\n   Data\
    \ Link Connection Identifier (DLCI), the Frame Relay equivalent of\n   a hardware\
    \ address, associated with an established Permanent Virtual\n   Circuit (PVC),\
    \ but do not know the protocol address of the station on\n   the other side of\
    \ this connection.  It will also apply to other\n   networks with similar circumstances.\n"
- title: 3.  Conventions
  contents:
  - "3.  Conventions\n   The following language conventions are used in the items\
    \ of\n   specification in this document:\n     o Must, Will, Shall or Mandatory\
    \ -- the item is an absolute\n       requirement of the specification.\n     o\
    \ Should or Recommended -- the item should generally be\n       followed for all\
    \ but exceptional circumstances.\n     o May or Optional -- the item is truly\
    \ optional and may be\n       followed or ignored according to the needs of the\n\
    \       implementor.\n"
- title: 4.  Introduction
  contents:
  - "4.  Introduction\n   This document will rely heavily on Frame Relay as an example\
    \ of how\n   the Inverse Address Resolution Protocol (InARP) can be useful. It\
    \ is\n   not, however, intended that InARP be used exclusively with Frame\n  \
    \ Relay.  InARP may be used in any network that provides destination\n   hardware\
    \ addresses without indicating corresponding protocol\n   addresses.\n"
- title: 5.  Motivation
  contents:
  - "5.  Motivation\n   The motivation for the development of Inverse ARP is a result\
    \ of the\n   desire to make dynamic address resolution within Frame Relay both\n\
    \   possible and efficient.  Permanent virtual circuits (PVCs) and\n   eventually\
    \ switched virtual circuits (SVCs) are identified by a Data\n   Link Connection\
    \ Identifier (DLCI).  These DLCIs define a single\n   virtual connection through\
    \ the wide area network (WAN) and are the\n   Frame Relay equivalent to a hardware\
    \ address.  Periodically, through\n   the exchange of signalling messages, a network\
    \ may announce a new\n   virtual circuit with its corresponding DLCI.  Unfortunately,\
    \ protocol\n   addressing is not included in the announcement.  The station\n\
    \   receiving such an indication will learn of the new connection, but\n   will\
    \ not be able to address the other side.  Without a new\n   configuration or mechanism\
    \ for discovering the protocol address of\n   the other side, this new virtual\
    \ circuit is unusable.\n   Other resolution methods were considered to solve the\
    \ problems, but\n   were rejected.  Reverse ARP [4], for example, seemed like\
    \ a good\n   candidate, but the response to a request is the protocol address\
    \ of\n   the requesting station not the station receiving the request as we\n\
    \   wanted.  IP specific mechanisms were limiting since we wished to\n   allow\
    \ protocol address resolution of many protocols.  For this\n   reason, we expanded\
    \ the ARP protocol.\n   Inverse Address Resolution Protocol (InARP) will allow\
    \ a Frame Relay\n   station to discover the protocol address of a station associated\
    \ with\n   the virtual circuit.  It is more efficiently than simulating a\n  \
    \ broadcast with multiple copies of the same message and it is more\n   flexible\
    \ than relying on static configuration.\n"
- title: 6.  Packet Format
  contents:
  - "6.  Packet Format\n   Inverse ARP is an extension of the existing ARP.  Therefore,\
    \ it has\n   the same format as standard ARP.\n      ar$hrd   16 bits        \
    \ Hardware type\n      ar$pro   16 bits         Protocol type\n      ar$hln  \
    \  8 bits         Byte length of each hardware address (n)\n      ar$pln    8\
    \ bits         Byte length of each protocol address (m)\n      ar$op    16 bits\
    \         Operation code\n      ar$sha    nbytes         source hardware address\n\
    \      ar$spa    mbytes         source protocol address\n      ar$tha    nbytes\
    \         target hardware address\n      ar$tpa    mbytes         target protocol\
    \ address\n   Possible values for hardware and protocol types are the same as\
    \ those\n   for ARP and may be found in the current Assigned Numbers RFC [2].\n\
    \   Length of the hardware and protocol address are dependent on the\n   environment\
    \ in which InARP is running.  For example, if IP is running\n   over Frame Relay,\
    \ the hardware address length is between 2 and 4, and\n   the protocol address\
    \ length is 4.\n   The operation code indicates the type of message, request or\
    \ reply.\n      InARP request  = 8\n      InARP reply = 9\n   These values were\
    \ chosen so as not to conflict with other ARP\n   extensions.\n"
- title: 7.  Protocol Operation
  contents:
  - "7.  Protocol Operation\n   Basic InARP operates essentially the same as ARP with\
    \ the exception\n   that InARP does not broadcast requests.  This is because the\
    \ hardware\n   address of the destination station is already known. A requesting\n\
    \   station simply formats a request by inserting its source hardware and\n  \
    \ protocol addresses and the known target hardware address.  It then\n   zero\
    \ fills the target protocol address field.  Finally, it will\n   encapsulate the\
    \ packet for the specific network and send it directly\n   to the target station.\n\
    \   Upon receiving an InARP request, a station may put the requester's\n   protocol\
    \ address/hardware address mapping into its ARP cache as it\n   would any ARP\
    \ request.  Unlike other ARP requests, however, the\n   receiving station may\
    \ assume that any InARP request it receives is\n   destined for it. For every\
    \ InARP request, the receiving station may\n   format a proper reply using the\
    \ source addresses from the request as\n   the target addresses of the reply.\
    \  If the station is unable or\n   unwilling to reply, it ignores the request.\n\
    \   When the requesting station receives the InARP reply, it may complete\n  \
    \ the ARP table entry and use the provided address information.  Note:\n   as\
    \ with ARP, information learned via InARP may be aged or invalidated\n   under\
    \ certain circumstances.\n"
- title: 7.1.  Operation with Multi-Addressed Hosts
  contents:
  - "7.1.  Operation with Multi-Addressed Hosts\n   In the context of this discussion,\
    \ a Multi-Addressed host will refer\n   to a host that has multiple protocol addresses\
    \ assigned to a single\n   interface.  If such a station receives an InARP request,\
    \ it must\n   choose one address with which to respond. To make such a selection,\n\
    \   the receiving station must first look at the protocol address of the\n   requesting\
    \ station, and then respond with the protocol address\n   corresponding to the\
    \ network of the requester.  For example, if the\n   requesting station is probing\
    \ for an IP address, the responding\n   multi-addressed station should respond\
    \ with an IP address which\n   corresponds to the same subnet as the requesting\
    \ station.  If the\n   station does not have an address that is appropriate for\
    \ the request\n   it should not respond.  In the IP example, if the receiving\
    \ station\n   does not have an IP address assigned to the interface that is a\
    \ part\n   of the requested subnet, the receiving station would not respond.\n\
    \   A multi-addressed host may choose to send an InARP request for each\n   of\
    \ the addresses defined for the given interface.  It should be\n   noted, however,\
    \ that the receiving side may answer some or none of\n   the requests depending\
    \ on its configuration.\n"
- title: 7.2.  Protocol Operation Within Frame Relay
  contents:
  - "7.2.  Protocol Operation Within Frame Relay\n   One case where Inverse ARP can\
    \ be used is when a new virtual circuit\n   is signalled.  The Frame Relay station\
    \ may format an InARP request\n   addressed to the new virtual circuit.  If the\
    \ other side supports\n   InARP, it may return a reply indicating the protocol\
    \ address\n   requested.\n   The format for an InARP request is a follows:\n \
    \     ar$hrd - 0x000F the value assigned to Frame Relay\n      ar$pro - protocol\
    \ type for which you are searching\n                  (i.e.  IP = 0x0800)\n  \
    \    ar$hln - 2,3, or 4 byte addressing length\n      ar$pln - byte length of\
    \ protocol address for which you\n                  are searching (for IP = 4)\n\
    \      ar$op  - 8; InARP request\n      ar$sha - Q.922 address of requesting station\n\
    \      ar$spa - protocol address of requesting station\n      ar$tha - Q.922 addressed\
    \ of newly announced virtual circuit\n      ar$tpa - 0; This is what we're looking\
    \ for\n   The InARP response will be completed similarly.\n      ar$hrd - 0x000F\
    \ the value assigned to Frame Relay\n      ar$pro - protocol type for which you\
    \ are searching\n                 (i.e.  IP = 0x0800)\n      ar$hln - 2,3, or\
    \ 4 byte addressing length\n      ar$pln - byte length of protocol address for\
    \ which you\n                 are searching (for IP = 4)\n      ar$op  - 9; InARP\
    \ response\n      ar$sha - Q.922 address of responding station\n      ar$spa -\
    \ protocol address requested\n      ar$tha - Q.922 address of requesting station\n\
    \      ar$tpa - protocol address of requesting station\n   Note that the Q.922\
    \ addresses specified have the C/R, FECN, BECN, and\n   DE bits set to zero.\n\
    \   Procedures for using InARP over a Frame Relay network are identical\n   to\
    \ those for using ARP and RARP discussed in section 10 of the\n   Multiprotocol\
    \ Interconnect over Frame Relay Networks document [3].\n"
- title: 8.  References
  contents:
  - "8.  References\n   [1]  Plummer, David C., \"An Ethernet Address Resolution Protocol\"\
    ,\n        RFC-826, November 1982.\n   [2]   Reynolds, J. and Postel, J., \"Assigned\
    \ Numbers\", RFC-1060, ISI,\n        March 1990.\n   [3]  Bradley, T., Brown,\
    \ C., Malis, A.,   \"Multiprotocol Interconnect\n        over Frame Relay Networks\"\
    , RFC-1294, January 1992.\n   [4]  Finlayson, Mann, Mogul, Theimer, \"A Reverse\
    \ Address Resolution\n        Protocol\", RFC-903, Stanford University, June 1984.\n"
- title: 9.  Security Considerations
  contents:
  - "9.  Security Considerations\n   Security issues are not addressed in this memo.\n"
- title: 10.  Authors' Addresses
  contents:
  - "10.  Authors' Addresses\n      Terry Bradley\n      Wellfleet Communications,\
    \ Inc.\n      15 Crosby Drive\n      Bedford, MA  01730\n      Phone:  (617) 275-2400\n\
    \      Email:  tbradley@wellfleet.com\n      Caralyn Brown\n      Wellfleet Communications,\
    \ Inc.\n      15 Crosby Drive\n      Bedford, MA  01730\n      Phone:  (617) 275-2400\n\
    \      Email:  cbrown@wellfleet.com\n"
