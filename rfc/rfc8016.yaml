- title: __initial_text__
  contents:
  - '         Mobility with Traversal Using Relays around NAT (TURN)

    '
- title: Abstract
  contents:
  - "Abstract\n   It is desirable to minimize traffic disruption caused by changing\
    \ IP\n   address during a mobility event.  One mechanism to minimize\n   disruption\
    \ is to expose a shorter network path to the mobility event\n   so that only the\
    \ local network elements are aware of the changed IP\n   address and the remote\
    \ peer is unaware of the changed IP address.\n   This document provides such an\
    \ IP address mobility solution using\n   Traversal Using Relays around NAT (TURN).\
    \  This is achieved by\n   allowing a client to retain an allocation on the TURN\
    \ server when the\n   IP address of the client changes.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 7841.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc8016.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2016 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   3\n   2.  Notational Conventions  . . . . . . . . . . . . . . .\
    \ . . . .   4\n   3.  Mobility Using TURN . . . . . . . . . . . . . . . . . .\
    \ . . .   4\n     3.1.  Creating an Allocation  . . . . . . . . . . . . . . .\
    \ . .   5\n       3.1.1.  Sending an Allocate Request . . . . . . . . . . . .\
    \ .   5\n       3.1.2.  Receiving an Allocate Request . . . . . . . . . . . .\
    \   6\n       3.1.3.  Receiving an Allocate Success Response  . . . . . . .  \
    \ 6\n       3.1.4.  Receiving an Allocate Error Response  . . . . . . . .   7\n\
    \     3.2.  Refreshing an Allocation  . . . . . . . . . . . . . . . .   7\n  \
    \     3.2.1.  Sending a Refresh Request . . . . . . . . . . . . . .   7\n    \
    \   3.2.2.  Receiving a Refresh Request . . . . . . . . . . . . .   7\n      \
    \ 3.2.3.  Receiving a Refresh Response  . . . . . . . . . . . .   9\n     3.3.\
    \  New STUN Attribute MOBILITY-TICKET  . . . . . . . . . . .   9\n     3.4.  New\
    \ STUN Error Response Code  . . . . . . . . . . . . . .   9\n   4.  IANA Considerations\
    \ . . . . . . . . . . . . . . . . . . . . .   9\n   5.  Security Considerations\
    \ . . . . . . . . . . . . . . . . . . .   9\n   6.  References  . . . . . . .\
    \ . . . . . . . . . . . . . . . . . .  10\n     6.1.  Normative References  .\
    \ . . . . . . . . . . . . . . . . .  10\n     6.2.  Informative References  .\
    \ . . . . . . . . . . . . . . . .  11\n   Appendix A.  Example of Ticket Construction\
    \ . . . . . . . . . . .  12\n   Acknowledgements  . . . . . . . . . . . . . .\
    \ . . . . . . . . . .  13\n   Authors' Addresses  . . . . . . . . . . . . . .\
    \ . . . . . . . . .  13\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   When moving between networks, the endpoint's IP address\
    \ can change\n   or, due to NAT, the endpoint's public IP address can change.\
    \  Such a\n   change of IP address breaks upper-layer protocols such as TCP and\n\
    \   RTP.  Various techniques exist to prevent this breakage, all tied to\n   making\
    \ the endpoint's IP address static (e.g., Mobile IP, Proxy\n   Mobile IP, Locator/ID\
    \ Separation Protocol (LISP)).  Other techniques\n   exist, which make the change\
    \ in IP address agnostic to the upper-\n   layer protocol (e.g., Stream Control\
    \ Transmission Protocol (SCTP)).\n   The mechanism described in this document\
    \ is in that last category.\n   A server using Traversal Using Relays around NAT\
    \ (TURN) [RFC5766]\n   relays media packets and is used for a variety of purposes,\
    \ including\n   overcoming NAT and firewall traversal issues.  The existing TURN\n\
    \   specification does not permit a TURN client to reuse an allocation\n   across\
    \ client IP address changes.  Due to this, when the IP address\n   of the client\
    \ changes, the TURN client has to request a new\n   allocation, create permissions\
    \ for the remote peer, create channels,\n   etc.  In addition, the client has\
    \ to re-establish communication with\n   its signaling server and send an updated\
    \ offer to the remote peer\n   conveying the newly relayed candidate address.\
    \  Then, the remote side\n   has to re-gather all candidates and signal them to\
    \ the client, and\n   the endpoints have to perform Interactive Connectivity Establishment\n\
    \   (ICE) [RFC5245] checks.  If the ICE continuous nomination procedure\n   [NOMBIS]\
    \ is used, then the newly relayed candidate address would have\n   to be \"trickled\"\
    \ (i.e., incrementally provisioned as described in\n   [TRICKLE-SIP]), and ICE\
    \ checks would have to be performed according\n   to [TRICKLE-ICE] by the endpoints\
    \ to nominate pairs for selection by\n   ICE.\n   This specification describes\
    \ a mechanism to seamlessly reuse\n   allocations across client IP address changes\
    \ without any of the\n   hassles described above.  A critical benefit of this\
    \ technique is\n   that the remote peer does not have to support mobility or deal\
    \ with\n   any of the address changes.  The client, which is subject to IP\n \
    \  address changes, does all the work.  The mobility technique works\n   across\
    \ and between network types (e.g., between 3G and wired Internet\n   access),\
    \ so long as the client can still access the TURN server.  The\n   technique should\
    \ also work seamlessly when (D)TLS is used as a\n   transport protocol for Session\
    \ Traversal Utilities for NAT (STUN)\n   [RFC5389].  When there is a change in\
    \ IP address, the client uses\n   (D)TLS Session Resumption without Server-Side\
    \ State as described in\n   [RFC5077] to resume secure communication with the\
    \ TURN server, using\n   the changed client IP address.\n"
- title: 2.  Notational Conventions
  contents:
  - "2.  Notational Conventions\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n   This document uses terminology defined in [RFC5245] and the\
    \ following\n   additional terminology:\n   Break Before Make: The old communication\
    \ path is broken (\"break\")\n   before new communication can be created (\"make\"\
    ).  Such changes\n   typically occur because a network's physical cable is disconnected,\n\
    \   radio transmission is turned off, or a client moves out of radio\n   range.\n\
    \   Make Before Break: A new communication path is created (\"make\")\n   before\
    \ the old communication path is broken (\"break\").  Such changes\n   typically\
    \ occur because a network is reconnected with a physical\n   cable, radio transmission\
    \ is turned on, or a client moves into radio\n   range.\n"
- title: 3.  Mobility Using TURN
  contents:
  - "3.  Mobility Using TURN\n   To achieve mobility, a TURN client should be able\
    \ to retain an\n   allocation on the TURN server across changes in the client\
    \ IP address\n   as a consequence of movement to other networks.\n   When the\
    \ client sends the initial Allocate request to the TURN\n   server, it will include\
    \ a new STUN attribute MOBILITY-TICKET (with\n   zero length value), which indicates\
    \ that the client is capable of\n   mobility and desires a ticket.  The TURN server\
    \ provisions a ticket\n   that is sent inside the new STUN attribute MOBILITY-TICKET\
    \ in the\n   Allocate success response to the client.  The ticket will be used\
    \ by\n   the client when it wants to refresh the allocation but with a new\n \
    \  client IP address and port.  This ensures that an allocation can only\n   be\
    \ refreshed by the same client that allocated the relayed transport\n   address.\
    \  When a client's IP address changes due to mobility, it\n   presents the previously\
    \ obtained ticket in a Refresh request to the\n   TURN server.  If the ticket\
    \ is found to be valid, the TURN server\n   will retain the same relayed address/port\
    \ for the new IP address/port\n   allowing the client to continue using previous\
    \ channel bindings --\n   thus, the TURN client does not need to obtain new channel\
    \ bindings.\n   Any data from the external peer will be delivered by the TURN\
    \ server\n   to this new IP address/port of the client.  The TURN client will\n\
    \   continue to send application data to its peers using the previously\n   allocated\
    \ channelBind Requests.\n          TURN                                 TURN \
    \          Peer\n          client                               server       \
    \   A\n            |-- Allocate request --------------->|             |\n    \
    \        |   + MOBILITY-TICKET (length=0)     |             |\n            | \
    \                                   |             |\n            |<---------------\
    \ Allocate failure --|             |\n            |                 (401 Unauthorized)\
    \ |             |\n            |                                    |        \
    \     |\n            |-- Allocate request --------------->|             |\n  \
    \          |   + MOBILITY-TICKET (length=0)     |             |\n            |\
    \                                    |             |\n            |<----------\
    \ Allocate success resp --|             |\n            |            + MOBILITY-TICKET\
    \       |             |\n           ...                                  ... \
    \          ...\n        (changes IP address)\n            |                  \
    \                  |             |\n            |-- Refresh request ---------------->|\
    \             |\n            |   + MOBILITY-TICKET                |          \
    \   |\n            |                                    |             |\n    \
    \        |<----------- Refresh success resp --|             |\n            | \
    \  + MOBILITY-TICKET                |             |\n            |           \
    \                         |             |\n                       Figure 1: Mobility\
    \ Using TURN\n   In Figure 1, the client sends an Allocate request with a MOBILITY-\n\
    \   TICKET attribute to the server without credentials.  Since the server\n  \
    \ requires that all requests be authenticated using STUN's long-term\n   credential\
    \ mechanism, the server rejects the request with a 401\n   (Unauthorized) error\
    \ code.  The client then tries again, this time\n   including credentials (not\
    \ shown).  This time, the server accepts the\n   Allocate request and returns\
    \ an Allocate success response and a\n   ticket inside the MOBILITY-TICKET attribute.\
    \  Sometime later, the\n   client IP address changes, and the client decides to\
    \ refresh the\n   allocation, and thus sends a Refresh request to the server with\
    \ a\n   MOBILITY-TICKET attribute containing the ticket it received from the\n\
    \   server.  The refresh is accepted, and the server replies with a\n   Refresh\
    \ success response and a new ticket inside the MOBILITY-TICKET\n   attribute.\n"
- title: 3.1.  Creating an Allocation
  contents:
  - '3.1.  Creating an Allocation

    '
- title: 3.1.1.  Sending an Allocate Request
  contents:
  - "3.1.1.  Sending an Allocate Request\n   In addition to the process described\
    \ in Section 6.1 of [RFC5766], the\n   client includes the MOBILITY-TICKET attribute\
    \ with a length of zero.\n   This indicates that the client is a mobile node and\
    \ wants a ticket.\n"
- title: 3.1.2.  Receiving an Allocate Request
  contents:
  - "3.1.2.  Receiving an Allocate Request\n   In addition to the process described\
    \ in Section 6.2 of [RFC5766], the\n   server does the following:\n   If the MOBILITY-TICKET\
    \ attribute is included, and has a length of\n   zero, but TURN session mobility\
    \ is forbidden by local policy, the\n   server will reject the request with the\
    \ new error code 405 (Mobility\n   Forbidden).  If the MOBILITY-TICKET attribute\
    \ is included and has a\n   non-zero length, then the server will generate an\
    \ error response with\n   an error code of 400 (Bad Request).  Following the rules\
    \ specified in\n   [RFC5389], if the server does not understand the MOBILITY-TICKET\n\
    \   attribute, it ignores the attribute.\n   If the server can successfully process\
    \ the request and create an\n   allocation, the server replies with a success\
    \ response that includes\n   a STUN MOBILITY-TICKET attribute.  The TURN server\
    \ can store system-\n   internal data in the ticket that is encrypted by a key\
    \ known only to\n   the TURN server and sends the ticket in the STUN MOBILITY-TICKET\n\
    \   attribute as part of the Allocate success response.  An example of\n   ticket\
    \ construction is discussed in Appendix A.  The ticket is opaque\n   to the client,\
    \ so the structure is not subject to interoperability\n   concerns, and implementations\
    \ may diverge from this format.  The\n   client could be roaming across networks\
    \ with a different path MTU and\n   from one address family to another (e.g.,\
    \ IPv6 to IPv4).  The TURN\n   server to support mobility must assume that the\
    \ path MTU is unknown\n   and use a ticket length in accordance with the published\
    \ guidance on\n   STUN UDP fragmentation (Section 7.1 of [RFC5389]).\n   Note:\
    \ There is no guarantee that the fields in the ticket are going\n   to be decodable\
    \ to a client, and therefore attempts by a client to\n   examine the ticket are\
    \ unlikely to be useful.\n"
- title: 3.1.3.  Receiving an Allocate Success Response
  contents:
  - "3.1.3.  Receiving an Allocate Success Response\n   In addition to the process\
    \ described in Section 6.3 of [RFC5766], the\n   client will store the MOBILITY-TICKET\
    \ attribute, if present, from the\n   response.  This attribute will be presented\
    \ by the client to the\n   server during a subsequent Refresh request to aid mobility.\n"
- title: 3.1.4.  Receiving an Allocate Error Response
  contents:
  - "3.1.4.  Receiving an Allocate Error Response\n   If the client receives an Allocate\
    \ error response with error code 405\n   (Mobility Forbidden), the error is processed\
    \ as follows:\n      405 (Mobility Forbidden): The request is valid, but the server\
    \ is\n      refusing to perform it, likely due to administrative restrictions.\n\
    \      The client considers the current transaction as having failed.\n      The\
    \ client can notify the user or operator.  The client SHOULD NOT\n      retry\
    \ sending the Allocate request containing the MOBILITY-TICKET\n      with this\
    \ server until it believes the problem has been fixed.\n   All other error responses\
    \ must be handled as described in [RFC5766].\n"
- title: 3.2.  Refreshing an Allocation
  contents:
  - '3.2.  Refreshing an Allocation

    '
- title: 3.2.1.  Sending a Refresh Request
  contents:
  - "3.2.1.  Sending a Refresh Request\n   If a client wants to refresh an existing\
    \ allocation and update its\n   time-to-expiry or delete an existing allocation,\
    \ it sends a Refresh\n   request as described in Section 7.1 of [RFC5766].  If\
    \ the client's IP\n   address or source port has changed and the client wants\
    \ to retain the\n   existing allocation, the client includes the MOBILITY-TICKET\n\
    \   attribute received in the Allocate success response in the Refresh\n   request.\
    \  If there has been no IP address or source port number\n   change, the client\
    \ MUST NOT include a MOBILITY-TICKET attribute, as\n   this would be rejected\
    \ by the server and the client would need to\n   retransmit the Refresh request\
    \ without the MOBILITY-TICKET attribute.\n"
- title: 3.2.2.  Receiving a Refresh Request
  contents:
  - "3.2.2.  Receiving a Refresh Request\n   In addition to the process described\
    \ in Section 7.2 of [RFC5766], the\n   server does the following:\n   If the STUN\
    \ MOBILITY-TICKET attribute is included in the Refresh\n   request, and the server\
    \ configuration changed to forbid mobility or\n   the server transparently fails\
    \ over to another server instance that\n   forbids mobility, then the server rejects\
    \ the Refresh request with a\n   405 (Mobility Forbidden) error and the client\
    \ starts afresh with a\n   new allocation.\n   If the STUN MOBILITY-TICKET attribute\
    \ is included in the Refresh\n   request, then the server will not retrieve the\
    \ 5-tuple from the\n   packet to identify an associated allocation.  Instead,\
    \ the TURN\n   server will decrypt the received ticket, verify the ticket's\n\
    \   validity, and retrieve the 5-tuple allocation using the ticket.  If\n   this\
    \ 5-tuple obtained does not identify an existing allocation, then\n   the server\
    \ MUST reject the request with a 437 (Allocation Mismatch)\n   error.  If the\
    \ ticket is invalid, then the server MUST reject the\n   request with a 400 (Bad\
    \ Request) error.\n   If the source IP address and port of the Refresh request\
    \ with the\n   STUN MOBILITY-TICKET attribute is the same as the stored 5-tuple\n\
    \   allocation, then the TURN server rejects the request with a 400 (Bad\n   Request)\
    \ error.  If the source IP address and port of the Refresh\n   request is different\
    \ from the stored 5-tuple allocation, the TURN\n   server proceeds with a MESSAGE-INTEGRITY\
    \ validation to identify that\n   it is the same user that had previously created\
    \ the TURN allocation.\n   If the above check is not successful, then the server\
    \ MUST reject the\n   request with a 441 (Wrong Credentials) error.\n   If all\
    \ of the above checks pass, the TURN server understands that the\n   client either\
    \ has moved to a new network and acquired a new IP\n   address (Break Before Make)\
    \ or is in the process of switching to a\n   new interface (Make Before Break).\
    \  The source IP address of the\n   request could be either the host transport\
    \ address or the server-\n   reflexive transport address.  The server then updates\
    \ its state data\n   with the new client IP address and port but does not discard\
    \ the old\n   5-tuple from its state data.  The TURN server calculates the ticket\n\
    \   with the new 5-tuple and sends the new ticket in the STUN MOBILITY-\n   TICKET\
    \ attribute as part of Refresh success response.  The new ticket\n   sent in the\
    \ refresh response MUST be different from the old ticket.\n   The TURN server\
    \ MUST continue receiving and processing data on the\n   old 5-tuple and MUST\
    \ continue transmitting data on the old-5 tuple\n   until it receives a Send Indication\
    \ or ChannelData message from the\n   client on the new 5-tuple or a message from\
    \ the client to close the\n   old connection (e.g., a TLS fatal alert or TCP RST).\
    \  After receiving\n   any of those messages, a TURN server discards the old ticket\
    \ and the\n   old 5-tuple associated with the old ticket from its state data.\
    \  Data\n   sent by the client to the peer is accepted on the new 5-tuple and\n\
    \   data received from the peer is forwarded to the new 5-tuple.  If the\n   refresh\
    \ request containing the MOBILITY-TICKET attribute does not\n   succeed (e.g.,\
    \ the packet is lost if the request is sent over UDP, or\n   the server is unable\
    \ to fulfill the request), then the client can\n   continue to exchange data on\
    \ the old 5-tuple until it receives the\n   Refresh success response.\n   The\
    \ old ticket can only be used for the purposes of retransmission.\n   If the client\
    \ wants to refresh its allocation with a new server-\n   reflexive transport address,\
    \ it MUST use the new ticket.  If the TURN\n   server has not received a Refresh\
    \ request with the STUN MOBILITY-\n   TICKET attribute but receives Send indications\
    \ or ChannelData\n   messages from a client, the TURN server MAY discard or queue\
    \ those\n   Send indications or ChannelData messages (at its discretion).  Thus,\n\
    \   it is RECOMMENDED that the client avoid transmitting a Send\n   indication\
    \ or ChannelData message until it has received an\n   acknowledgement for the\
    \ Refresh request with the STUN MOBILITY-TICKET\n   attribute.\n   To accommodate\
    \ the potential loss of Refresh responses, a server must\n   retain the old STUN\
    \ MOBILITY-TICKET attribute for a period of at\n   least 30 seconds to be able\
    \ to recognize a retransmission of the\n   Refresh request with the old STUN MOBILITY-TICKET\
    \ attribute from the\n   client.\n"
- title: 3.2.3.  Receiving a Refresh Response
  contents:
  - "3.2.3.  Receiving a Refresh Response\n   In addition to the process described\
    \ in Section 7.3 of [RFC5766], the\n   client will store the MOBILITY-TICKET attribute,\
    \ if present, from the\n   response.  This attribute will be presented by the\
    \ client to the\n   server during a subsequent Refresh request to aid mobility.\n"
- title: 3.3.  New STUN Attribute MOBILITY-TICKET
  contents:
  - "3.3.  New STUN Attribute MOBILITY-TICKET\n   This attribute is used to retain\
    \ an allocation on the TURN server.\n   It is exchanged between the client and\
    \ server to aid mobility.  The\n   value of the MOBILITY-TICKET is encrypted and\
    \ is of variable length.\n"
- title: 3.4.  New STUN Error Response Code
  contents:
  - "3.4.  New STUN Error Response Code\n   This document defines the following new\
    \ error response code:\n      405 (Mobility Forbidden): Mobility request was valid\
    \ but cannot be\n      performed due to administrative or similar restrictions.\n"
- title: 4.  IANA Considerations
  contents:
  - "4.  IANA Considerations\n   IANA has added the following attribute to the \"\
    STUN Attributes\"\n   registry [IANA-STUN]:\n   o  MOBILITY-TICKET (0x8030, in\
    \ the comprehension-optional range)\n   Also, IANA has added a new STUN error\
    \ code \"Mobility Forbidden\" with\n   the value 405 to the \"STUN Error Codes\"\
    \ registry [IANA-STUN].\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   The TURN server MUST always ensure that the ticket\
    \ is authenticated\n   and encrypted using strong cryptographic algorithms to\
    \ prevent\n   modification or eavesdropping by an attacker.  The ticket MUST be\n\
    \   constructed such that it has strong entropy to ensure that nothing\n   can\
    \ be gleaned by looking at the ticket alone.\n   An attacker monitoring the traffic\
    \ between the TURN client and server\n   can impersonate the client and refresh\
    \ the allocation using the\n   ticket issued to the client with the attacker's\
    \ IP address and port.\n   The TURN client and server MUST use the STUN long-term\
    \ credential\n   mechanism [RFC5389], the STUN Extension for Third-Party Authorization\n\
    \   [RFC7635], or a (D)TLS connection to prevent malicious users from\n   impersonating\
    \ the client.  With any of those three mechanisms, when\n   the server receives\
    \ the Refresh request with the STUN MOBILITY-TICKET\n   attribute from the client,\
    \ it identifies that it is indeed the same\n   client but with a new IP address\
    \ and port using the ticket it had\n   previously issued to refresh the allocation.\
    \  If (D)TLS is not used\n   or the (D)TLS handshake fails, and authentication\
    \ also fails, then\n   the TURN client and server MUST fail and not proceed with\
    \ TURN\n   mobility.\n   Security considerations described in [RFC5766] are also\
    \ applicable to\n   this mechanism.\n"
- title: 6.  References
  contents:
  - '6.  References

    '
- title: 6.1.  Normative References
  contents:
  - "6.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n  \
    \            DOI 10.17487/RFC2119, March 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n\
    \   [RFC5077]  Salowey, J., Zhou, H., Eronen, P., and H. Tschofenig,\n       \
    \       \"Transport Layer Security (TLS) Session Resumption without\n        \
    \      Server-Side State\", RFC 5077, DOI 10.17487/RFC5077,\n              January\
    \ 2008, <http://www.rfc-editor.org/info/rfc5077>.\n   [RFC5245]  Rosenberg, J.,\
    \ \"Interactive Connectivity Establishment\n              (ICE): A Protocol for\
    \ Network Address Translator (NAT)\n              Traversal for Offer/Answer Protocols\"\
    , RFC 5245,\n              DOI 10.17487/RFC5245, April 2010,\n              <http://www.rfc-editor.org/info/rfc5245>.\n\
    \   [RFC5389]  Rosenberg, J., Mahy, R., Matthews, P., and D. Wing,\n         \
    \     \"Session Traversal Utilities for NAT (STUN)\", RFC 5389,\n            \
    \  DOI 10.17487/RFC5389, October 2008,\n              <http://www.rfc-editor.org/info/rfc5389>.\n\
    \   [RFC5766]  Mahy, R., Matthews, P., and J. Rosenberg, \"Traversal Using\n \
    \             Relays around NAT (TURN): Relay Extensions to Session\n        \
    \      Traversal Utilities for NAT (STUN)\", RFC 5766,\n              DOI 10.17487/RFC5766,\
    \ April 2010,\n              <http://www.rfc-editor.org/info/rfc5766>.\n"
- title: 6.2.  Informative References
  contents:
  - "6.2.  Informative References\n   [IANA-STUN]\n              IANA, \"Session Traversal\
    \ Utilities for NAT (STUN)\n              Parameters\",\n              <http://www.iana.org/assignments/stun-parameters>.\n\
    \   [NOMBIS]   Uberti, J. and J. Lennox, \"Improvements to ICE Candidate\n   \
    \           Nomination\", Work in Progress,\n              draft-uberti-mmusic-nombis-00,\
    \ March 2015.\n   [RFC7635]  Reddy, T., Patil, P., Ravindranath, R., and J. Uberti,\n\
    \              \"Session Traversal Utilities for NAT (STUN) Extension for\n  \
    \            Third-Party Authorization\", RFC 7635,\n              DOI 10.17487/RFC7635,\
    \ August 2015,\n              <http://www.rfc-editor.org/info/rfc7635>.\n   [TRICKLE-ICE]\n\
    \              Ivov, E., Rescorla, E., Uberti, J., and P. Saint-Andre,\n     \
    \         \"Trickle ICE: Incremental Provisioning of Candidates for\n        \
    \      the Interactive Connectivity Establishment (ICE)\n              Protocol\"\
    , Work in Progress, draft-ietf-ice-trickle-04,\n              September 2016.\n\
    \   [TRICKLE-SIP]\n              Ivov, E., Stach, T., Marocco, E., and C. Holmberg,\
    \ \"A\n              Session Initiation Protocol (SIP) usage for Trickle ICE\"\
    ,\n              Work in Progress, draft-ietf-mmusic-trickle-ice-sip-06,\n   \
    \           October 2016.\n"
- title: Appendix A.  Example of Ticket Construction
  contents:
  - "Appendix A.  Example of Ticket Construction\n   The TURN server uses two different\
    \ keys: one 128-bit key for Advance\n   Encryption Standard (AES) in Cipher Block\
    \ Chaining (CBC) mode\n   (AES_128_CBC) and a 256-bit key for HMAC-SHA-256-128\
    \ for integrity\n   protection.  The ticket can be structured as follows:\n  \
    \       struct {\n             opaque key_name[16];\n             opaque iv[16];\n\
    \             opaque encrypted_state<0..2^16-1>;\n             opaque mac[16];\n\
    \         } ticket;\n                          Figure 2: Ticket Format\n   Here,\
    \ key_name serves to identify a particular set of keys used to\n   protect the\
    \ ticket.  It enables the TURN server to easily recognize\n   tickets it has issued.\
    \  The key_name should be randomly generated to\n   avoid collisions between servers.\
    \  One possibility is to generate new\n   random keys and key_name every time\
    \ the server is started.\n   The TURN state information (which is either self-contained\
    \ or a\n   handle) in encrypted_state is encrypted using 128-bit AES in CBC mode\n\
    \   with the given Initialization Vector (IV).  The Message\n   Authentication\
    \ Code (MAC) is calculated using HMAC-SHA-256-128 over\n   key_name (16 octets)\
    \ and IV (16 octets), followed by the length of\n   the encrypted_state field\
    \ (2 octets) and its contents (variable\n   length).\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   Thanks to Alfred Heggestad, Lishitao, Sujing Zhou, Martin\
    \ Thomson,\n   Emil Ivov, Oleg Moskalenko, Dave Waltermire, Pete Resnick, Antoni\n\
    \   Przygienda, Alissa Cooper, Ben Campbell, Suresh Krishnan, Mirja\n   Kuehlewind,\
    \ Jonathan Lennox, and Brandon Williams for review and\n   comments.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Tirumaleswar Reddy\n   Cisco Systems, Inc.\n   Cessna\
    \ Business Park, Varthur Hobli\n   Sarjapur Marathalli Outer Ring Road\n   Bangalore,\
    \ Karnataka  560103\n   India\n   Email: tireddy@cisco.com\n   Dan Wing\n   Email:\
    \ dwing-ietf@fuggles.com\n   Prashanth Patil\n   Cisco Systems, Inc.\n   Bangalore\n\
    \   India\n   Email: praspati@cisco.com\n   Paal-Erik Martinsen\n   Cisco Systems,\
    \ Inc.\n   Philip Pedersens vei 22\n   Lysaker, Akershus  1325\n   Norway\n  \
    \ Email: palmarti@cisco.com\n"
