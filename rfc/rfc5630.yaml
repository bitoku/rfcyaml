- title: __initial_text__
  contents:
  - ''
- title: The Use of the SIPS URI Scheme in the Session Initiation Protocol (SIP)
  contents:
  - 'The Use of the SIPS URI Scheme in the Session Initiation Protocol (SIP)

    '
- title: Abstract
  contents:
  - "Abstract\n   This document provides clarifications and guidelines concerning\
    \ the\n   use of the SIPS URI scheme in the Session Initiation Protocol (SIP).\n\
    \   It also makes normative changes to SIP.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright and License Notice
  contents:
  - "Copyright and License Notice\n   Copyright (c) 2009 IETF Trust and the persons\
    \ identified as the\n   document authors.  All rights reserved.\n   This document\
    \ is subject to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF\
    \ Documents\n   (http://trustee.ietf.org/license-info) in effect on the date of\n\
    \   publication of this document.  Please review these documents\n   carefully,\
    \ as they describe your rights and restrictions with respect\n   to this document.\
    \  Code Components extracted from this document must\n   include Simplified BSD\
    \ License text as described in Section 4.e of\n   the Trust Legal Provisions and\
    \ are provided without warranty as\n   described in the BSD License.\n   This\
    \ document may contain material from IETF Documents or IETF\n   Contributions\
    \ published or made publicly available before November\n   10, 2008.  The person(s)\
    \ controlling the copyright in some of this\n   material may not have granted\
    \ the IETF Trust the right to allow\n   modifications of such material outside\
    \ the IETF Standards Process.\n   Without obtaining an adequate license from the\
    \ person(s) controlling\n   the copyright in such materials, this document may\
    \ not be modified\n   outside the IETF Standards Process, and derivative works\
    \ of it may\n   not be created outside the IETF Standards Process, except to format\n\
    \   it for publication as an RFC or to translate it into languages other\n   than\
    \ English.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \   2. Terminology .....................................................3\n  \
    \ 3. Background ......................................................3\n    \
    \  3.1. Models for Using TLS in SIP ................................3\n      \
    \     3.1.1. Server-Provided Certificate .........................3\n        \
    \   3.1.2. Mutual Authentication ...............................4\n          \
    \ 3.1.3. Using TLS with SIP Instead of SIPS ..................4\n           3.1.4.\
    \ Usage of the transport=tls URI Parameter and\n                  the TLS Via\
    \ Parameter ...............................5\n      3.2. Detection of Hop-by-Hop\
    \ Security ...........................6\n      3.3. The Problems with the Meaning\
    \ of SIPS in RFC 3261 ..........7\n   4. Overview of Operations ..........................................9\n\
    \      4.1. Routing ...................................................11\n  \
    \ 5. Normative Requirements .........................................13\n    \
    \  5.1. General User Agent Behavior ...............................13\n      \
    \     5.1.1. UAC Behavior .......................................13\n        \
    \          5.1.1.1. Registration ..............................14\n          \
    \        5.1.1.2. SIPS in a Dialog ..........................15\n            \
    \      5.1.1.3. Derived Dialogs and Transactions ..........15\n              \
    \    5.1.1.4. GRUU ......................................16\n           5.1.2.\
    \ UAS Behavior .......................................17\n      5.2. Registrar\
    \ Behavior ........................................18\n           5.2.1. GRUU\
    \ ...............................................18\n      5.3. Proxy Behavior\
    \ ............................................18\n      5.4. Redirect Server Behavior\
    \ ..................................20\n   6. Call Flows .....................................................21\n\
    \      6.1. Bob Registers His Contacts ................................22\n  \
    \    6.2. Alice Calls Bob's SIPS AOR ................................27\n    \
    \  6.3. Alice Calls Bob's SIP AOR Using TCP .......................36\n      6.4.\
    \ Alice Calls Bob's SIP AOR Using TLS .......................50\n   7. Further\
    \ Considerations .........................................51\n   8. Security Considerations\
    \ ........................................52\n   9. IANA Considerations ............................................52\n\
    \   10. Acknowledgments ...............................................52\n  \
    \ 11. References ....................................................53\n    \
    \  11.1. Normative References .....................................53\n      11.2.\
    \ Informative References ...................................53\n   Appendix A.\
    \  Bug Fixes for RFC 3261  ..............................55\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The meaning and usage of the SIPS URI scheme and of Transport\
    \ Layer\n   Security (TLS) [RFC5246] are underspecified in SIP [RFC3261] and have\n\
    \   been a source of confusion for implementers.\n   This document provides clarifications\
    \ and guidelines concerning the\n   use of the SIPS URI scheme in the Session\
    \ Initiation Protocol (SIP).\n   It also makes normative changes to SIP (including\
    \ both [RFC3261] and\n   [RFC3608].\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and\
    \ \"OPTIONAL\" in this\n   document are to be interpreted as described in [RFC2119].\n"
- title: 3.  Background
  contents:
  - '3.  Background

    '
- title: 3.1.  Models for Using TLS in SIP
  contents:
  - "3.1.  Models for Using TLS in SIP\n   This section describes briefly the usage\
    \ of TLS in SIP.\n"
- title: 3.1.1.  Server-Provided Certificate
  contents:
  - "3.1.1.  Server-Provided Certificate\n   In this model, only the TLS server provides\
    \ a certificate during the\n   TLS handshake.  This is applicable only between\
    \ a user agent (UA) and\n   a proxy, where the UA is the TLS client and the proxy\
    \ is the TLS\n   server, and hence the UA uses TLS to authenticate the proxy but\
    \ the\n   proxy does not use TLS to authenticate the UA.  If the proxy needs to\n\
    \   authenticate the UA, this can be achieved by SIP HTTP digest\n   authentication.\
    \  This directionality implies that the TLS connection\n   always needs to be\
    \ set up by the UA (e.g., during the registration\n   phase).  Since SIP allows\
    \ for requests in both directions (e.g., an\n   incoming call), the UA is expected\
    \ to keep the TLS connection alive,\n   and that connection is expected to be\
    \ reused for both incoming and\n   outgoing requests.\n   This solution of having\
    \ the UA always initiate and keep alive the\n   connection also solves the Network\
    \ Address Translation (NAT) and\n   firewall problem as it ensures that responses\
    \ and further requests\n   will always be deliverable on the existing connection.\n\
    \   [RFC5626] provides the mechanism for initiating and maintaining\n   outbound\
    \ connections in a standard interoperable way.\n"
- title: 3.1.2.  Mutual Authentication
  contents:
  - "3.1.2.  Mutual Authentication\n   In this model, both the TLS client and the\
    \ TLS server provide a\n   certificate in the TLS handshake phase.  When used\
    \ between a UA and a\n   proxy (or between two UAs), this implies that a UA is\
    \ in possession\n   of a certificate.  When sending a SIP request when there is\
    \ not\n   already a suitable TLS connection in place, a user agent client (UAC)\n\
    \   takes on the role of TLS client in establishing a new TLS connection.\n  \
    \ When establishing a TLS connection for receipt of a SIP request, a\n   user\
    \ agent server (UAS) takes on the role of TLS server.  Because in\n   SIP a UA\
    \ or a proxy acts both as UAC and UAS depending on if it is\n   sending or receiving\
    \ requests, the symmetrical nature of mutual TLS\n   is very convenient.  This\
    \ allows for TLS connections to be set up or\n   torn down at will and does not\
    \ rely on keeping the TLS connection\n   alive for further requests.\n   However,\
    \ there are some significant limitations.\n   The first obvious limitation is\
    \ not with mutual authentication per\n   se, but with the model where the underlying\
    \ TCP connection can be\n   established by either side, interchangeably, which\
    \ is not possible in\n   many environments.  For examples, NATs and firewalls\
    \ will often allow\n   TCP connections to be established in one direction only.\
    \  This\n   includes most residential SIP deployments, for example.  Mutual\n\
    \   authentication can be used in those environments, but only if the\n   connection\
    \ is always started by the same side, for example, by using\n   [RFC5626] as described\
    \ in Section 3.1.1.  Having to rely on [RFC5626]\n   in this case negates many\
    \ of the advantages of mutual authentication.\n   The second significant limitation\
    \ is that mutual authentication\n   requires both sides to exchange a certificate.\
    \  This has proven to be\n   impractical in many environments, in particular for\
    \ SIP UAs, because\n   of the difficulties of setting up a certificate infrastructure\
    \ for a\n   wide population of users.\n   For these reasons, mutual authentication\
    \ is mostly used in server-to-\n   server communications (e.g., between SIP proxies,\
    \ or between proxies\n   and gateways or media servers), and in environments where\
    \ using\n   certificates on both sides is possible (e.g., high-security devices\n\
    \   used within an enterprise).\n"
- title: 3.1.3.  Using TLS with SIP Instead of SIPS
  contents:
  - "3.1.3.  Using TLS with SIP Instead of SIPS\n   Because a SIPS URI implies that\
    \ requests sent to the resource\n   identified by it be sent over each SIP hop\
    \ over TLS, SIPS URIs are\n   not suitable for \"best-effort TLS\": they are only\
    \ suitable for \"TLS-\n   only\" requests.  This is recognized in Section 26.2.2\
    \ of [RFC3261].\n      Users that distribute a SIPS URI as an address-of-record\
    \ may elect\n      to operate devices that refuse requests over insecure transports.\n\
    \   If one wants to use \"best-effort TLS\" for SIP, one just needs to use\n \
    \  a SIP URI, and send the request over TLS.\n   Using SIP over TLS is very simple.\
    \  A UA opens a TLS connection and\n   uses SIP URIs instead of SIPS URIs for\
    \ all the header fields in a SIP\n   message (From, To, Request-URI, Contact header\
    \ field, Route, etc.).\n   When TLS is used, the Via header field indicates TLS.\n\
    \   [RFC3261], Section 26.3.2.1, states:\n      When a UA comes online and registers\
    \ with its local administrative\n      domain, it SHOULD establish a TLS connection\
    \ with its registrar\n      (...).  Once the registration has been accepted by\
    \ the registrar,\n      the UA SHOULD leave this TLS connection open provided\
    \ that the\n      registrar also acts as the proxy server to which requests are\
    \ sent\n      for users in this administrative domain.  The existing TLS\n   \
    \   connection will be reused to deliver incoming requests to the UA\n      that\
    \ had just completed registration.\n   [RFC5626] describes how to establish and\
    \ maintain a TLS connection in\n   environments where it can only be initiated\
    \ by the UA.\n   Similarly, proxies can forward requests using TLS if they can\
    \ open a\n   TLS connection, even if the route set used SIP URIs instead of SIPS\n\
    \   URIs.  The proxies can insert Record-Route header fields using SIP\n   URIs\
    \ even if it uses TLS transport.  [RFC3261], Section 26.3.2.2,\n   explains how\
    \ interdomain requests can use TLS.\n   Some user agents, redirect servers, and\
    \ proxies might have local\n   policies that enforce TLS on all connections, independently\
    \ of\n   whether or not SIPS is used.\n"
- title: 3.1.4.  Usage of the transport=tls URI Parameter and the TLS Via
  contents:
  - "3.1.4.  Usage of the transport=tls URI Parameter and the TLS Via\n        Parameter\n\
    \   [RFC3261], Section 26.2.2 deprecated the \"transport=tls\" URI\n   transport\
    \ parameter in SIPS or SIP URIs:\n      Note that in the SIPS URI scheme, transport\
    \ is independent of TLS,\n      and thus \"sips:alice@atlanta.com;transport=TCP\"\
    \ and\n      \"sips:alice@atlanta.com;transport=sctp\" are both valid (although\n\
    \      note that UDP is not a valid transport for SIPS).  The use of\n      \"\
    transport=tls\" has consequently been deprecated, partly because\n      it was\
    \ specific to a single hop of the request.  This is a change\n      since RFC\
    \ 2543.\n   The \"tls\" parameter has not been eliminated from the ABNF in\n \
    \  [RFC3261], Section 25, since the parameter needs to remain in the\n   ABNF\
    \ for backward compatibility in order for parsers to be able to\n   process the\
    \ parameter correctly.  The transport=tls parameter has\n   never been defined\
    \ in an RFC, but only in some of the Internet drafts\n   between [RFC2543] and\
    \ [RFC3261].\n   This specification does not make use of the transport=tls parameter.\n\
    \   The reinstatement of the transport=tls parameter, or an alternative\n   mechanism\
    \ for indicating the use of the TLS on a single hop in a URI,\n   is outside the\
    \ scope of this specification.\n   For Via header fields, the following transport\
    \ protocols are defined\n   in [RFC3261]: \"UDP\", \"TCP\", \"TLS\", \"SCTP\"\
    , and in [RFC4168]: \"TLS-\n   SCTP\".\n"
- title: 3.2.  Detection of Hop-by-Hop Security
  contents:
  - "3.2.  Detection of Hop-by-Hop Security\n   The presence of a SIPS Request-URI\
    \ does not necessarily indicate that\n   the request was sent securely on each\
    \ hop.  So how does a UAS know if\n   SIPS was used for the entire request path\
    \ to secure the request end-\n   to-end?  Effectively, the UAS cannot know for\
    \ sure.  However,\n   [RFC3261], Section 26.4.4, recommends how a UAS can make\
    \ some checks\n   to validate the security.  Additionally, the History-Info header\n\
    \   field [RFC4244] could be inspected for detecting retargeting from SIP\n  \
    \ and SIPS.  Retargeting from SIP to SIPS by a proxy is an issue\n   because it\
    \ can leave the receiver of the request with the impression\n   that the request\
    \ was delivered securely on each hop, while in fact,\n   it was not.\n   To emphasize,\
    \ all the checking can be circumvented by any proxies or\n   back-to-back user\
    \ agents (B2BUAs) on the path that do not follow the\n   rules and recommendations\
    \ of this specification and of [RFC3261].\n   Proxies can have their own policies\
    \ regarding routing of requests to\n   SIP or SIPS URIs.  For example, some proxies\
    \ in some environments can\n   be configured to only route SIPS URIs.  Some proxies\
    \ can be\n   configured to detect non-compliances and reject unsecure requests.\n\
    \   For example, proxies could inspect Request-URIs, Path, Record-Route,\n   To,\
    \ From, Contact header fields, and Via header fields to enforce\n   SIPS.\n  \
    \ [RFC3261], Section 26.4.4, explains that S/MIME can also be used by\n   the\
    \ originating UAC to ensure that the original form of the To header\n   field\
    \ is carried end-to-end.  While not specifically mentioned in\n   [RFC3261], Section\
    \ 26.4.4, this is meant to imply that [RFC3893]\n   would be used to \"tunnel\"\
    \ important header fields (such as To and\n   From) in an encrypted and signed\
    \ S/MIME body, replicating the\n   information in the SIP message, and allowing\
    \ the UAS to validate the\n   content of those important header fields.  While\
    \ this approach is\n   certainly legal, a preferable approach is to use the SIP\
    \ Identity\n   mechanism defined in [RFC4474].  SIP Identity creates a signed\n\
    \   identity digest, which includes, among other things, the Address of\n   Record\
    \ (AOR) of the sender (from the From header field) and the AOR\n   of the original\
    \ target (from the To header field).\n"
- title: 3.3.  The Problems with the Meaning of SIPS in RFC 3261
  contents:
  - "3.3.  The Problems with the Meaning of SIPS in RFC 3261\n   [RFC3261], Section\
    \ 19.1, describes a SIPS URI as follows:\n      A SIPS URI specifies that the\
    \ resource be contacted securely.\n      This means, in particular, that TLS is\
    \ to be used between the UAC\n      and the domain that owns the URI.  From there,\
    \ secure\n      communications are used to reach the user, where the specific\n\
    \      security mechanism depends on the policy of the domain.\n   Section 26.2.2\
    \ re-iterates it, with regards to Request-URIs:\n      When used as the Request-URI\
    \ of a request, the SIPS scheme\n      signifies that each hop over which the\
    \ request is forwarded, until\n      the request reaches the SIP entity responsible\
    \ for the domain\n      portion of the Request-URI, must be secured with TLS;\
    \ once it\n      reaches the domain in question it is handled in accordance with\n\
    \      local security and routing policy, quite possibly using TLS for\n     \
    \ any last hop to a UAS.  When used by the originator of a request\n      (as\
    \ would be the case if they employed a SIPS URI as the address-\n      of-record\
    \ of the target), SIPS dictates that the entire request\n      path to the target\
    \ domain be so secured.\n   Let's take the classic SIP trapezoid to explain the\
    \ meaning of a\n   sips:b@B URI.  Instead of using real domain names like example.com\n\
    \   and example.net, logical names like \"A\" and \"B\" are used, for\n   clarity.\n\
    \        ..........................         ...........................\n    \
    \    .                        .         .                         .\n        .\
    \              +-------+ .         . +-------+               .\n        .    \
    \          |       | .         . |       |               .\n        .        \
    \      | Proxy |-----TLS---- | Proxy |               .\n        .            \
    \  |   A   | .         . |  B    |               .\n        .              | \
    \      | .         . |       |               .\n        .            / +-------+\
    \ .         . +-------+ \\             .\n        .           /            . \
    \        .            \\            .\n        .          /             .    \
    \     .             \\           .\n        .        TLS             .       \
    \  .        Policy-based     .\n        .        /               .         . \
    \              \\         .\n        .       /                .         .    \
    \            \\        .\n        .      /                 .         .       \
    \          \\       .\n        .   +-------+            .         .          \
    \    +-------+  .\n        .   |       |            .         .              |\
    \       |  .\n        .   | UAC a |            .         .              | UAS\
    \ b |  .\n        .   |       |            .         .              |       |\
    \  .\n        .   +-------+            .         .              +-------+  .\n\
    \        .             Domain A   .         .   Domain B              .\n    \
    \    ..........................         ...........................\n        \
    \           SIP trapezoid with last-hop exception\n   According to [RFC3261],\
    \ if a@A is sending a request to sips:b@B, the\n   following applies:\n   o  TLS\
    \ is required between UA a@A and Proxy A\n   o  TLS is required between Proxy\
    \ A and Proxy B\n   o  TLS is required between Proxy B and UA b@B, depending on\
    \ local\n      policy.\n   One can then wonder why TLS is mandatory between UA\
    \ a@A and Proxy A\n   but not between Proxy B and UA b@B.  The main reason is\
    \ that\n   [RFC3261] was written before [RFC5626].  At that time, it was\n   recognized\
    \ that in many practical deployments, Proxy B might not be\n   able to establish\
    \ a TLS connection with UA b because only Proxy B\n   would have a certificate\
    \ to provide and UA b would not.  Since UA b\n   would be the TLS server, it would\
    \ then not be able to accept the\n   incoming TLS connection.  The consequence\
    \ is that an [RFC3261]-\n   compliant UAS b, while it might not need to support\
    \ TLS for incoming\n   requests, will nevertheless have to support TLS for outgoing\
    \ requests\n   as it takes the UAC role.  Contrary to what many believed\n   erroneously,\
    \ the last-hop exception was not created to allow for\n   using a SIPS URI to\
    \ address a UAS that does not support TLS: the\n   last-hop exception was an attempt\
    \ to allow for incoming requests to\n   not be transported over TLS when a SIPS\
    \ URI is used, and it does not\n   apply to outgoing requests.  The rationale\
    \ for this was somewhat\n   flawed, and since then, [RFC5626] has provided a more\
    \ satisfactory\n   solution to this problem.  [RFC5626] also solves the problem\
    \ that if\n   UA b is behind a NAT or firewall, Proxy B would not even be able\
    \ to\n   establish a TCP session in the first place.\n   Furthermore, consider\
    \ the problem of using SIPS inside a dialog.  If\n   a@A sends a request to b@B\
    \ using a SIPS Request-URI, then, according\n   to [RFC3261], Section 8.1.1.8,\
    \ \"the Contact header field MUST contain\n   a SIPS URI as well\".  This means\
    \ that b@B, upon sending a new Request\n   within the dialog (e.g., a BYE or re-INVITE),\
    \ will have to use a SIPS\n   URI.  If there is no Record-Route entry, or if the\
    \ last Record-Route\n   entry consists of a SIPS URI, this implies that b@B is\
    \ expected to\n   understand SIPS in the first place, and is required to also\
    \ support\n   TLS.  If the last Record-Route entry however is a sip URI, then\
    \ b\n   would be able to send requests without using TLS (but b would still\n\
    \   have to be able to handle SIPS schemes when parsing the message).  In\n  \
    \ either case, the Request-URI in the request from b@B to B would be a\n   SIPS\
    \ URI.\n"
- title: 4.  Overview of Operations
  contents:
  - "4.  Overview of Operations\n   Because of all the problems described in Section\
    \ 3.3, this\n   specification deprecates the last-hop exception when forwarding\
    \ a\n   request to the last hop (see Section 5.3).  This will ensure that TLS\n\
    \   is used on all hops all the way up to the remote target.\n        ..........................\
    \         ...........................\n        .                        .    \
    \     .                         .\n        .              +-------+ .        \
    \ . +-------+               .\n        .              |       | .         . |\
    \       |               .\n        .              | Proxy |-----TLS---- | Proxy\
    \ |               .\n        .              |   A   | .         . |  B    |  \
    \             .\n        .              |       | .         . |       |      \
    \         .\n        .            / +-------+ .         . +-------+ \\       \
    \      .\n        .           /            .         .            \\         \
    \   .\n        .          /             .         .             \\           .\n\
    \        .        TLS             .         .             TLS         .\n    \
    \    .        /               .         .               \\         .\n       \
    \ .       /                .         .                \\        .\n        . \
    \     /                 .         .                 \\       .\n        .   +-------+\
    \            .         .              +-------+  .\n        .   |       |    \
    \        .         .              |       |  .\n        .   | UAC a |        \
    \    .         .              | UAS b |  .\n        .   |       |            .\
    \         .              |       |  .\n        .   +-------+            .    \
    \     .              +-------+  .\n        .             Domain A   .        \
    \ .   Domain B              .\n        ..........................         ...........................\n\
    \                 SIP trapezoid without last-hop exception\n   The SIPS scheme\
    \ implies transitive trust.  Obviously, there is\n   nothing that prevents proxies\
    \ from cheating (see [RFC3261], Section\n   26.4.4).  While SIPS is useful to\
    \ request that a resource be\n   contacted securely, it is not useful as an indication\
    \ that a resource\n   was in fact contacted securely.  Therefore, it is not appropriate\
    \ to\n   infer that because an incoming request had a Request-URI (or even a\n\
    \   To header field) containing a SIPS URI, that it necessarily\n   guarantees\
    \ that the request was in fact transmitted securely on each\n   hop.  Some have\
    \ been tempted to believe that the SIPS scheme was\n   equivalent to an HTTPS\
    \ scheme in the sense that one could provide a\n   visual indication to a user\
    \ (e.g., a padlock icon) to the effect that\n   the session is secured.  This\
    \ is obviously not the case, and\n   therefore the meaning of a SIPS URI is not\
    \ to be oversold.  There is\n   currently no mechanism to provide an indication\
    \ of end-to-end\n   security for SIP.  Other mechanisms can provide a more concrete\n\
    \   indication of some level of security.  For example, SIP Identity\n   [RFC4474]\
    \ provides an authenticated identity mechanism and a domain-\n   to-domain integrity\
    \ protection mechanism.\n   Some have asked why is SIPS useful in a global open\
    \ environment such\n   as the Internet, if (when used in a Request-URI) it is\
    \ not an\n   absolute guarantee that the request will in fact be delivered over\n\
    \   TLS on each hop?  Why is SIPS any different from just using TLS\n   transport\
    \ with SIP?  The difference is that using a SIPS URI in a\n   Request-URI means\
    \ that if you are instructing the network to use TLS\n   over each hop and if\
    \ it is not possible to reject the request, you\n   would rather have the request\
    \ fail than have the request delivered\n   without TLS.  Just using TLS with a\
    \ SIP Request-URI instead of a SIPS\n   Request-URI implies a \"best-effort\"\
    \ service: the request can but need\n   not be delivered over TLS on each hop.\n\
    \   Another common question is why not have a Proxy-Require and Require\n   option\
    \ tag forcing the use of TLS instead?  The answer is that it\n   would only be\
    \ functionally equivalent to using SIPS in a Request-URI.\n   SIPS URIs however\
    \ can be used in many other header fields: in Contact\n   for registration, Contact\
    \ in dialog-creating requests, Route, Record-\n   Route, Path, From, To, Refer-To,\
    \ Referred-By, etc.  SIPS URIs can\n   also be used in human-usable format (e.g.,\
    \ business cards, user\n   interface).  SIPS URIs can even be used in other protocols\
    \ or\n   document formats that allow for including SIPS URIs (e.g., HTML).\n \
    \  This document specifies that SIPS means that the SIP resource\n   designated\
    \ by the target SIPS URI is to be contacted securely, using\n   TLS on each hop\
    \ between the UAC and the remote UAS (as opposed to\n   only to the proxy responsible\
    \ for the target domain of the Request-\n   URI).  It is outside of the scope\
    \ of this document to specify what\n   happens when a SIPS URI identifies a UAS\
    \ resource that \"maps\" outside\n   the SIP network, for example, to other networks\
    \ such as the Public\n   Switched Telephone Network (PSTN).\n"
- title: 4.1.  Routing
  contents:
  - "4.1.  Routing\n   SIP and SIPS URIs that are identical except for the scheme\
    \ itself\n   (e.g., sip:alice@example.com and sips:alice@example.com) refer to\
    \ the\n   same resource.  This requirement is implicit in [RFC3261], Section\n\
    \   19.1, which states that \"any resource described by a SIP URI can be\n   'upgraded'\
    \ to a SIPS URI by just changing the scheme, if it is\n   desired to communicate\
    \ with that resource securely\".  This does not\n   mean that the SIPS URI will\
    \ necessarily be reachable, in particular,\n   if the proxy cannot establish a\
    \ secure connection to a client or\n   another proxy.  This does not suggest either\
    \ that proxies would\n   arbitrarily \"upgrade\" SIP URIs to SIPS URIs when forwarding\
    \ a request\n   (see Section 5.3).  Rather, it means that when a resource is\n\
    \   addressable with SIP, it will also be addressable with SIPS.\n   For example,\
    \ consider the case of a UA that has registered with a\n   SIPS Contact header\
    \ field.  If a UAC later addresses a request using\n   a SIP Request-URI, the\
    \ proxy will forward the request addressed to a\n   SIP Request-URI to the UAS,\
    \ as illustrated by message F13 in Sections\n   6.3 and in 6.4.  The proxy forwards\
    \ the request to the UA using a SIP\n   Request-URI and not the SIPS Request-URI\
    \ used in registration.  The\n   proxy does this by replacing the SIPS scheme\
    \ that was used in the\n   registered Contact header field binding with a SIP\
    \ scheme while\n   leaving the rest of the URI as is, and then by using this new\
    \ URI as\n   the Request-URI.  If the proxy did not do this, and instead used\
    \ a\n   SIPS Request-URI, then the response (e.g., a 200 to an INVITE) would\n\
    \   have to include a SIPS Contact header field.  That SIPS Contact\n   header\
    \ field would then force the other UA to use a SIPS Contact\n   header field in\
    \ any mid-dialog request, including the ACK (which\n   would not be possible if\
    \ that UA did not support SIPS).\n   This specification mandates that when a proxy\
    \ is forwarding a\n   request, a resource described by a SIPS Request-URI cannot\
    \ be\n   \"downgraded\" to a SIP URI by changing the scheme, or by sending the\n\
    \   associated request over a nonsecure link.  If a request needs to be\n   rejected\
    \ because otherwise it would be a \"downgrade\", the request\n   would be rejected\
    \ with a 480 (Temporarily Unavailable) response\n   (potentially with a Warning\
    \ header with warn-code 380 \"SIPS Not\n   Allowed\").  Similarly, this specification\
    \ mandates that when a proxy\n   is forwarding a request, a resource described\
    \ by a SIP Request-URI\n   cannot be \"upgraded\" to a SIPS URI by changing the\
    \ scheme (otherwise\n   it would be an \"upgrade\" only for that hop onwards rather\
    \ than on all\n   hops, and would therefore mislead the UAS).  If a request needs\
    \ to be\n   rejected because otherwise it would be a misleading \"upgrade\", the\n\
    \   request would be rejected with a 480 (Temporarily Unavailable)\n   response\
    \ (potentially with a Warning header field with warn-code 381\n   \"SIPS Required\"\
    ).  See Section 5.3 for more details.\n   For example, the sip:bob@example.com\
    \ and sips:bob@example.com AORs\n   refer to the same user \"Bob\" in the domain\
    \ \"example.com\": the first\n   URI is the SIP version, and the second one is\
    \ the SIPS version.  From\n   the point of view of routing, requests to either\
    \ sip:bob@example.com\n   or sips:bob@example.com are treated the same way.  When\
    \ Bob\n   registers, it therefore does not really matter if he is using a SIP\n\
    \   or a SIPS AOR, since they both refer to the same user.  At first\n   glance,\
    \ Section 19.1.4 of [RFC3261] seems to contradict this idea by\n   stating that\
    \ a SIP and a SIPS URI are never equivalent.\n   Specifically, it says that they\
    \ are never equivalent for the purpose\n   of comparing bindings in Contact header\
    \ field URIs in REGISTER\n   requests.  The key point is that this statement applies\
    \ to the\n   Contact header field bindings in a registration: it is the\n   association\
    \ of the Contact header field with the AOR that will\n   determine whether or\
    \ not the user is reachable with a SIPS URI.\n   Consider this example: if Bob\
    \ (AOR bob@example.com) registers with a\n   SIPS Contact header field (e.g.,\
    \ sips:bob@bobphone.example.com), the\n   registrar and the location service then\
    \ know that Bob is reachable at\n   sips:bob@bobphone.example.com and at sip:bob@bobphone.example.com.\n\
    \   If a request is sent to AOR sips:bob@example.com, Bob's proxy will\n   route\
    \ it to Bob at Request-URI sips:bob@bobphone.example.com.  If a\n   request is\
    \ sent to AOR sip:bob@example.com, Bob's proxy will route it\n   to Bob at Request-URI\
    \ sip:bob@bobphone.example.com.\n   If Bob wants to ensure that every request\
    \ delivered to him always be\n   transported over TLS, Bob can use [RFC5626] when\
    \ registering.\n   However, if Bob had registered with a SIP Contact header field\n\
    \   instead of a SIPS Contact header field (e.g.,\n   sip:bob@bobphone.example.com),\
    \ then a request to AOR\n   sips:bob@example.com would not be routed to Bob, since\
    \ there is no\n   SIPS Contact header field for Bob, and \"downgrades\" from SIPS\
    \ to SIP\n   are not allowed.\n   See Section 6 for illustrative call flows.\n"
- title: 5.  Normative Requirements
  contents:
  - "5.  Normative Requirements\n   This section describes all the normative requirements\
    \ defined by this\n   specification.\n"
- title: 5.1.  General User Agent Behavior
  contents:
  - '5.1.  General User Agent Behavior

    '
- title: 5.1.1.  UAC Behavior
  contents:
  - "5.1.1.  UAC Behavior\n   When presented with a SIPS URI, a UAC MUST NOT change\
    \ it to a SIP\n   URI.  For example, if a directory entry includes a SIPS AOR,\
    \ the UAC\n   is not expected to send requests to that AOR using a SIP Request-URI.\n\
    \   Similarly, if a user reads a business card with a SIPS URI, it is not\n  \
    \ possible to infer a SIP URI.  If a 3XX response includes a SIPS\n   Contact\
    \ header field, the UAC does not replace it with a SIP Request-\n   URI (e.g.,\
    \ by replacing the SIPS scheme with a SIP scheme) when\n   sending a request as\
    \ a result of the redirection.\n   As mandated by [RFC3261], Section 8.1.1.8,\
    \ in a request, \"if the\n   Request-URI or top Route header field value contains\
    \ a SIPS URI, the\n   Contact header field MUST contain a SIPS URI as well\".\n\
    \   Upon receiving a 416 response or a 480 (Temporarily Unavailable)\n   response\
    \ with a Warning header with warn-code 380 \"SIPS Not Allowed\",\n   a UAC MUST\
    \ NOT re-attempt the request by automatically replacing the\n   SIPS scheme with\
    \ a SIP scheme as described in [RFC3261], Section\n   8.1.3.5, as it would be\
    \ a security vulnerability.  If the UAC does\n   re-attempt the call with a SIP\
    \ URI, the UAC SHOULD get a confirmation\n   from the user to authorize re-initiating\
    \ the session with a SIP\n   Request-URI instead of a SIPS Request-URI.\n   When\
    \ the route set is not empty (e.g., when a service route [RFC3608]\n   is returned\
    \ by the registrar), it is the responsibility of the UAC to\n   use a Route header\
    \ field consisting of all SIPS URIs when using a\n   SIPS Request-URI.  Specifically,\
    \ if the route set included any SIP\n   URI, the UAC MUST change the SIP URIs\
    \ to SIPS URIs simply by changing\n   the scheme from \"sip\" to \"sips\" before\
    \ sending the request.  This\n   allows for configuring or discovering one service\
    \ route with all SIP\n   URIs and allowing sending requests to both SIP and SIPS\
    \ URIs.\n   When the UAC is using a SIP Request-URI, if the route set is not\n\
    \   empty and the topmost Route header field entry is a SIPS URI with the\n  \
    \ lr parameter, the UAC MUST send the request over TLS (using a SIP\n   Request-URI).\
    \  If the route is not empty and the Route header field\n   entry is a SIPS URI\
    \ without the lr parameter, the UAC MUST send the\n   request over TLS using a\
    \ SIPS Request-URI corresponding to the\n   topmost entry in the route set.\n\
    \   To emphasize what is already defined in [RFC3261], UAs MUST NOT use\n   the\
    \ \"transport=tls\" parameter.\n"
- title: 5.1.1.1.  Registration
  contents:
  - "5.1.1.1.  Registration\n   The UAC registers Contacts header fields to either\
    \ a SIPS or a SIP\n   AOR.\n   If a UA wishes to be reachable with a SIPS URI,\
    \ the UA MUST register\n   with a SIPS Contact header field.  Requests addressed\
    \ to that UA's\n   AOR using either a SIP or SIPS Request-URI will be routed to\
    \ that UA.\n   This includes UAs that support both SIP and SIPS.  This specification\n\
    \   does not provide any SIP-based mechanism for a UA to provision its\n   proxy\
    \ to only forward requests using a SIPS Request-URI.  A non-SIP\n   mechanism\
    \ such as a web interface could be used to provision such a\n   preference.  A\
    \ SIP mechanism for provisioning such a preference is\n   outside the scope of\
    \ this specification.\n   If a UA does not wish to be reached with a SIPS URI,\
    \ it MUST register\n   with a SIP Contact header field.\n   Because registering\
    \ with a SIPS Contact header field implies a\n   binding of both a SIPS Contact\
    \ and a corresponding SIP Contact to the\n   AOR, a UA MUST NOT include both the\
    \ SIPS and the SIP versions of the\n   same Contact header field in a REGISTER\
    \ request; the UA MUST only use\n   the SIPS version in this case.  Similarly,\
    \ a UA SHOULD NOT register\n   both a SIP Contact header field and a SIPS Contact\
    \ header field in\n   separate registrations as the SIP Contact header field would\
    \ be\n   superfluous.  If it does, the second registration replaces the first\n\
    \   one (e.g., a UA could register first with a SIP Contact header field,\n  \
    \ meaning it does not support SIPS, and later register with a SIPS\n   Contact\
    \ header field, meaning it now supports SIPS).  Similarly, if a\n   UA registers\
    \ first with a SIPS Contact header field and later\n   registers with a SIP Contact\
    \ header field, that SIP Contact header\n   field replaces the SIPS Contact header\
    \ field.\n   [RFC5626] can be used by a UA if it wants to ensure that no requests\n\
    \   are delivered to it without using the TLS connection it used when\n   registering.\n\
    \   If all the Contact header fields in a REGISTER request are SIPS, the\n   UAC\
    \ MUST use SIPS AORs in the From and To header fields in the\n   REGISTER request.\
    \  If at least one of the Contact header fields is\n   not SIPS (e.g., sip, mailto,\
    \ tel, http, https), the UAC MUST use SIP\n   AORs in the From and To header fields\
    \ in the REGISTER request.\n   To emphasize what is already defined in [RFC3261],\
    \ UACs MUST NOT use\n   the \"transport=tls\" parameter.\n"
- title: 5.1.1.2.  SIPS in a Dialog
  contents:
  - "5.1.1.2.  SIPS in a Dialog\n   If the Request-URI in a request that initiates\
    \ a dialog is a SIP URI,\n   then the UAC needs to be careful about what to use\
    \ in the Contact\n   header field (in case Record-Route is not used for this hop).\
    \  If the\n   Contact header field was a SIPS URI, it would mean that the UAS\
    \ would\n   only accept mid-dialog requests that are sent over secure transport\n\
    \   on each hop.  Since the Request-URI in this case is a SIP URI, it is\n   quite\
    \ possible that the UA sending a request to that URI might not be\n   able to\
    \ send requests to SIPS URIs.  If the top Route header field\n   does not contain\
    \ a SIPS URI, the UAC MUST use a SIP URI in the\n   Contact header field, even\
    \ if the request is sent over a secure\n   transport (e.g., the first hop could\
    \ be re-using a TLS connection to\n   the proxy as would be the case with [RFC5626]).\n\
    \   When a target refresh occurs within a dialog (e.g., re-INVITE\n   request,\
    \ UPDATE request), the UAC MUST include a Contact header field\n   with a SIPS\
    \ URI if the original request used a SIPS Request-URI.\n"
- title: 5.1.1.3.  Derived Dialogs and Transactions
  contents:
  - "5.1.1.3.  Derived Dialogs and Transactions\n   Sessions, dialogs, and transactions\
    \ can be \"derived\" from existing\n   ones.  A good example of a derived dialog\
    \ is one that was established\n   as a result of using the REFER method [RFC3515].\n\
    \   As a general principle, derived dialogs and transactions cannot\n   result\
    \ in an effective downgrading of SIPS to SIP, without the\n   explicit authorization\
    \ of the entities involved.\n   For example, when a REFER request is used to perform\
    \ a call transfer,\n   it results in an existing dialog being terminated and another\
    \ one\n   being created based on the Refer-To URI.  If that initial dialog was\n\
    \   established using SIPS, then the UAC MUST NOT establish a new one\n   using\
    \ SIP, unless there is an explicit authorization given by the\n   recipient of\
    \ the REFER request.  This could be a warning provided to\n   the user.  Having\
    \ such a warning could be useful, for example, for a\n   secure directory service\
    \ application, to warn a user that a request\n   may be routed to a UA that does\
    \ not support SIPS.\n   A REFER request can also be used for referring to resources\
    \ that do\n   not result in dialogs being created.  In fact, a REFER request can\
    \ be\n   used to point to resources that are of a different type than the\n  \
    \ original one (i.e., not SIP or SIPS).  Please see [RFC3515], Section\n   5.2,\
    \ for security considerations related to this.\n   Other examples of derived dialogs\
    \ and transactions include the use of\n   Third-Party Call Control [RFC3725],\
    \ the Replaces header field\n   [RFC3891], and the Join header field [RFC3911].\
    \  Again, the general\n   principle is that these mechanisms SHOULD NOT result\
    \ in an effective\n   downgrading of SIPS to SIP, without the proper authorization.\n"
- title: 5.1.1.4.  GRUU
  contents:
  - "5.1.1.4.  GRUU\n   When a Globally Routable User Agent URI (GRUU) [RFC5627] is\
    \ assigned\n   to an instance ID/AOR pair, both SIP and SIPS GRUUs will be assigned.\n\
    \   When a GRUU is obtained through registration, if the Contact header\n   field\
    \ in the REGISTER request contains a SIP URI, the SIP version of\n   the GRUU\
    \ is returned.  If the Contact header field in the REGISTER\n   request contains\
    \ a SIPS URI, the SIPS version of the GRUU is\n   returned.\n   If the wrong scheme\
    \ is received in the GRUU (which would be an error\n   in the registrar), the\
    \ UAC SHOULD treat it as if the proper scheme\n   was used (i.e., it SHOULD replace\
    \ the scheme with the proper scheme\n   before using the GRUU).\n"
- title: 5.1.2.  UAS Behavior
  contents:
  - "5.1.2.  UAS Behavior\n   When presented with a SIPS URI, a UAS MUST NOT change\
    \ it to a SIP\n   URI.\n   As mandated by [RFC3261], Section 12.1.1:\n      If\
    \ the request that initiated the dialog contained a SIPS URI in\n      the Request-URI\
    \ or in the top Record-Route header field value, if\n      there was any, or the\
    \ Contact header field if there was no Record-\n      Route header field, the\
    \ Contact header field in the response MUST\n      be a SIPS URI.\n   If a UAS\
    \ does not wish to be reached with a SIPS URI but only with a\n   SIP URI, the\
    \ UAS MUST respond with a 480 (Temporarily Unavailable)\n   response.  The UAS\
    \ SHOULD include a Warning header with warn-code 380\n   \"SIPS Not Allowed\"\
    .  [RFC3261], Section 8.2.2.1, states that UASs\n   that do not support the SIPS\
    \ URI scheme at all \"SHOULD reject the\n   request with a 416 (Unsupported URI\
    \ scheme) response\".\n   If a UAS does not wish to be contacted with a SIP URI\
    \ but instead by\n   a SIPS URI, it MUST reject a request to a SIP Request-URI\
    \ with a 480\n   (Temporarily Unavailable) response.  The UAS SHOULD include a\
    \ Warning\n   header with warn-code 381 \"SIPS Required\".\n   It is a matter\
    \ of local policy for a UAS to accept incoming requests\n   addressed to a URI\
    \ scheme that does not correspond to what it used\n   for registration.  For example,\
    \ a UA with a policy of \"always SIPS\"\n   would address the registrar using\
    \ a SIPS Request-URI over TLS, would\n   register with a SIPS Contact header field,\
    \ and the UAS would reject\n   requests using the SIP scheme with a 480 (Temporarily\
    \ Unavailable)\n   response with a Warning header with warn-code 381 \"SIPS Required\"\
    .  A\n   UA with a policy of \"best-effort SIPS\" would address the registrar\n\
    \   using a SIPS Request-URI over TLS, would register with a SIPS Contact\n  \
    \ header field, and the UAS would accept requests addressed to either\n   SIP\
    \ or SIPS Request-URIs.  A UA with a policy of \"No SIPS\" would\n   address the\
    \ registrar using a SIP Request-URI, could use TLS or not,\n   would register\
    \ with a SIP AOR and a SIP Contact header field, and the\n   UAS would accept\
    \ requests addressed to a SIP Request-URI.\n   If a UAS needs to reject a request\
    \ because the URIs are used\n   inconsistently (e.g., the Request-URI is a SIPS\
    \ URI, but the Contact\n   header field is a SIP URI), the UAS MUST reject the\
    \ request with a\n   400 (Bad Request) response.\n   When a target refresh occurs\
    \ within a dialog (e.g., re-INVITE\n   request, UPDATE request), the UAS MUST\
    \ include a Contact header field\n   with a SIPS URI if the original request used\
    \ a SIPS Request-URI.\n   To emphasize what is already defined in [RFC3261], UASs\
    \ MUST NOT use\n   the \"transport=tls\" parameter.\n"
- title: 5.2.  Registrar Behavior
  contents:
  - "5.2.  Registrar Behavior\n   The UAC registers Contacts header fields to either\
    \ a SIPS or a SIP\n   AOR.  From a routing perspective, it does not matter which\
    \ one is\n   used for registration as they identify the same resource.  The\n\
    \   registrar MUST consider AORs that are identical except for one having\n  \
    \ the SIP scheme and the other having the SIPS scheme to be equivalent.\n   A\
    \ registrar MUST accept a binding to a SIPS Contact header field only\n   if all\
    \ the appropriate URIs are of the SIPS scheme; otherwise, there\n   could be an\
    \ inadvertent binding of a secure resource (SIPS) to an\n   unsecured one (SIP).\
    \  This includes the Request-URI and the Contacts\n   and all the Path header\
    \ fields, but does not include the From and To\n   header fields.  If the URIs\
    \ are not of the proper SIPS scheme, the\n   registrar MUST reject the REGISTER\
    \ with a 400 (Bad Request).\n   A registrar can return a service route [RFC3608]\
    \ and impose some\n   constraints on whether or not TLS will be mandatory on specific\
    \ hops.\n   For example, if the topmost entry in the Path header field returned\n\
    \   by the registrar is a SIPS URI, the registrar is telling the UAC that\n  \
    \ TLS is to be used for the first hop, even if the Request-URI is SIP.\n   If\
    \ a UA registered with a SIPS Contact header field, the registrar\n   returning\
    \ a service route [RFC3608] MUST return a service route\n   consisting of SIP\
    \ URIs if the intent of the registrar is to allow\n   both SIP and SIPS to be\
    \ used in requests sent by that client.  If a\n   UA registers with a SIPS Contact\
    \ header field, the registrar\n   returning a service route MUST return a service\
    \ route consisting of\n   SIPS URIs if the intent of the registrar is to allow\
    \ only SIPS URIs\n   to be used in requests sent by that UA.\n"
- title: 5.2.1.  GRUU
  contents:
  - "5.2.1.  GRUU\n   When a GRUU [RFC5627] is assigned to an instance ID/AOR pair\
    \ through\n   registration, the registrar MUST assign both a SIP GRUU and a SIPS\n\
    \   GRUU.  If the Contact header field in the REGISTER request contains a\n  \
    \ SIP URI, the registrar MUST return the SIP version of the GRUU.  If\n   the\
    \ Contact header field in the REGISTER request contains a SIPS URI,\n   the registrar\
    \ MUST return the SIPS version of the GRUU.\n"
- title: 5.3.  Proxy Behavior
  contents:
  - "5.3.  Proxy Behavior\n   Proxies MUST NOT use the last-hop exception of [RFC3261]\
    \ when\n   forwarding or retargeting a request to the last hop.  Specifically,\n\
    \   when a proxy receives a request with a SIPS Request-URI, the proxy\n   MUST\
    \ only forward or retarget the request to a SIPS Request-URI.  If\n   the target\
    \ UAS had registered previously using a SIP Contact header\n   field instead of\
    \ a SIPS Contact header field, the proxy MUST NOT\n   forward the request to the\
    \ URI indicated in the Contact header field.\n   If the proxy needs to reject\
    \ the request for that reason, the proxy\n   MUST reject it with a 480 (Temporarily\
    \ Unavailable) response.  In\n   this case, the proxy SHOULD include a Warning\
    \ header with warn-code\n   380 \"SIPS Not Allowed\".\n   Proxies SHOULD transport\
    \ requests using a SIP URI over TLS when it is\n   possible to set up a TLS connection,\
    \ or reuse an existing one.\n   [RFC5626], for example, allows for re-using an\
    \ existing TLS\n   connection.  Some proxies could have policies that prohibit\
    \ sending\n   any request over anything but TLS.\n   When a proxy receives a request\
    \ with a SIP Request-URI, the proxy\n   MUST NOT forward the request to a SIPS\
    \ Request-URI.  If the target\n   UAS had registered previously using a SIPS Contact\
    \ header field, and\n   the proxy decides to forward the request, the proxy MUST\
    \ replace that\n   SIPS scheme with a SIP scheme while leaving the rest of the\
    \ URI as\n   is, and use the resulting URI as the Request-URI of the forwarded\n\
    \   request.  The proxy MUST use TLS to forward the request to the UAS.\n   Some\
    \ proxies could have a policy of not forwarding at all requests\n   using a non-SIPS\
    \ Request-URI if the UAS had registered using a SIPS\n   Contact header field.\
    \  If the proxy elects to reject the request\n   because it has such a policy\
    \ or because it is not capable of\n   establishing a TLS connection, the proxy\
    \ MAY reject it with a 480\n   (Temporarily Unavailable) response with a Warning\
    \ header with warn-\n   code 381 \"SIPS Required\".\n   If a proxy needs to reject\
    \ a request because the URIs are used\n   inconsistently (e.g., the Request-URI\
    \ is a SIPS URI, but the Contact\n   header field is a SIP URI), the proxy SHOULD\
    \ use response code 400\n   (Bad Request).\n   It is RECOMMENDED that the proxy\
    \ use the outbound proxy procedures\n   defined in [RFC5626] for supporting UACs\
    \ that cannot provide a\n   certificate for establishing a TLS connection (i.e.,\
    \ when server-side\n   authentication is used).\n   When a proxy sends a request\
    \ using a SIPS Request-URI and receives a\n   3XX response with a SIP Contact\
    \ header field, or a 416 response, or a\n   480 (Temporarily Unavailable) response\
    \ with a Warning header with\n   warn-code 380 \"SIPS Not Allowed\" response,\
    \ the proxy MUST NOT recurse\n   on the response.  In this case, the proxy SHOULD\
    \ forward the best\n   response instead of recursing, in order to allow for the\
    \ UAC to take\n   the appropriate action.\n   When a proxy sends a request using\
    \ a SIP Request-URI and receives a\n   3XX response with a SIPS Contact header\
    \ field, or a 480 (Temporarily\n   Unavailable) response with a Warning header\
    \ with warn-code 381 \"SIPS\n   Required\", the proxy MUST NOT recurse on the\
    \ response.  In this case,\n   the proxy SHOULD forward the best response instead\
    \ of recursing, in\n   order to allow for the UAC to take the appropriate action.\n\
    \   To emphasize what is already defined in [RFC3261], proxies MUST NOT\n   use\
    \ the \"transport=tls\" parameter.\n"
- title: 5.4.  Redirect Server Behavior
  contents:
  - "5.4.  Redirect Server Behavior\n   Using a redirect server with TLS instead of\
    \ using a proxy has some\n   limitations that have to be taken into account. \
    \ Since there is no\n   pre-established connection between the proxy and the UAS\
    \ (such as\n   with [RFC5626]), it is only appropriate for scenarios where inbound\n\
    \   connections are allowed.  For example, it could be used in a server-\n   to-server\
    \ environment (redirect server or proxy server) where TLS\n   mutual authentication\
    \ is used, and where there are no NAT traversal\n   issues.  A redirect server\
    \ would not be able to redirect to an entity\n   that does not have a certificate.\
    \  A redirect server might not be\n   usable if there is a NAT between the server\
    \ and the UAS.\n   When a redirect server receives a request with a SIP Request-URI,\
    \ the\n   redirect server MAY redirect with a 3XX response to either a SIP or\
    \ a\n   SIPS Contact header field.  If the target UAS had registered\n   previously\
    \ using a SIPS Contact header field, the redirect server\n   SHOULD return a SIPS\
    \ Contact header field if it is in an environment\n   where TLS is usable (as\
    \ described in the previous paragraph).  If the\n   target UAS had registered\
    \ previously using a SIP Contact header\n   field, the redirect server MUST return\
    \ a SIP Contact header field in\n   a 3XX response if it redirects the request.\n\
    \   When a redirect server receives a request with a SIPS Request-URI,\n   the\
    \ redirect server MAY redirect with a 3XX response to a SIP or a\n   SIPS Contact\
    \ header field.  If the target UAS had registered\n   previously using a SIPS\
    \ Contact header field, the redirect server\n   SHOULD return a SIPS Contact header\
    \ field if it is in an environment\n   where TLS is usable.  If the target UAS\
    \ had registered previously\n   using a SIP Contact header field, the redirect\
    \ server MUST return a\n   SIP Contact header field in a 3XX response if it chooses\
    \ to redirect;\n   otherwise, the UAS MAY reject the request with a 480 (Temporarily\n\
    \   Unavailable) response with a Warning header with warn-code 380 \"SIPS\n  \
    \ Not Allowed\".  If a redirect server redirects to a UAS that it has no\n   knowledge\
    \ of (e.g., an AOR in a different domain), the Contact header\n   field could\
    \ be of any scheme.\n   If a redirect server needs to reject a request because\
    \ the URIs are\n   used inconsistently (e.g., the Request-URI is a SIPS URI, but\
    \ the\n   Contact header field is a SIP URI), the redirect server SHOULD use\n\
    \   response code 400 (Bad Request).\n   To emphasize what is already defined\
    \ in [RFC3261], redirect servers\n   MUST NOT use the \"transport=tls\" parameter.\n"
- title: 6.  Call Flows
  contents:
  - "6.  Call Flows\n   The following diagram illustrates the topology used for the\
    \ examples\n   in this section:\n                         example.com       .\
    \      example.net\n                                           .\n           \
    \            |-------------|     .    |------------|\n                       |\
    \ Registrar/  |__________|  Proxy  A  |\n                       | Auth. Proxy\
    \ |     .    |  (proxya)  |\n                       |    (pb)     |     .    |------------|\n\
    \                       |-------------|     .          |\n                   \
    \          |             .          |\n                             |        \
    \     .          |\n                       |-----------|       .          |\n\
    \                       |   Edge    |       .          |\n                   \
    \    |  Proxy B  |       .          |\n                       |   (eb)    |  \
    \     .          |\n                       |-----------|       .          |\n\
    \                        /        |         .          |\n                   \
    \    /         |         .          |\n                      /          |    \
    \     .          |\n               ______            |         .          |\n\
    \              |      |         _____       .        _____\n              |______|\
    \        O / \\ O      .       O / \\ O\n             /_______/         /___\\\
    \       .        /___\\\n                                           .\n      \
    \       bob@bobpc      bob@bobphone   .         alice\n                      \
    \           Topology\n   In the following examples, Bob has two clients; one is\
    \ a SIP PC\n   client running on his computer, and the other one is a SIP phone.\n\
    \   The PC client does not support SIPS, and consequently only registers\n   with\
    \ a SIP Contact header field.  The SIP phone however does support\n   SIPS and\
    \ TLS, and consequently registers with a SIPS Contact header\n   field.  Both\
    \ of Bob's devices are going through Edge Proxy B, and\n   consequently, they\
    \ include a Route header field indicating\n   eb.example.com.  Edge Proxy B removes\
    \ the Route header field\n   corresponding to itself, and adds itself in a Path\
    \ header field.  The\n   registration process call flow is illustrated in Section\
    \ 6.1.\n   After registration, there are two Contact bindings associated with\n\
    \   Bob's AOR of bob@example.com: sips:bob@bobphone.example.com and\n   sip:bob@bobpc.example.com.\n\
    \   Alice then calls Bob through her own Proxy A.  Proxy A locates Bob's\n   domain\
    \ example.com.  In this example, that domain is owned by Bob's\n   Registrar/Authoritative\
    \ Proxy B.  Proxy A removes the Route header\n   field corresponding to itself,\
    \ and inserts itself in the Record-Route\n   and forwards the request to Registrar/Authoritative\
    \ Proxy B.\n   The following subsections illustrate registration and three examples.\n\
    \   In the first example (Section 6.2), Alice calls Bob's SIPS AOR.  In\n   the\
    \ second example (Section 6.3), Alice calls Bob's SIP AOR using TCP\n   transport.\
    \  In the third example (Section 6.4), Alice calls Bob's SIP\n   AOR using TLS\
    \ transport.\n"
- title: 6.1.  Bob Registers His Contacts
  contents:
  - "6.1.  Bob Registers His Contacts\n   This flow illustrates the registration process\
    \ by which Bob's device\n   registers.  His PC client (Bob@bobpc) registers with\
    \ a SIP scheme,\n   and his SIP phone (Bob@phone) registers with a SIPS scheme.\n\
    \                                    (eb)           (pb)\n                   \
    \                 Edge        Registrar/\n                Bob@bobpc          Proxy\
    \ B     Auth. Proxy B\n                 |                   |               |\n\
    \                 |    REGISTER F1    |               |\n                 |------------------>|\
    \  REGISTER F2  |\n                 |                   |-------------->|\n  \
    \               |                   |    200 F3     |\n                 |    \
    \  200 F4       |<--------------|\n                 |<------------------|    \
    \           |\n                 |                   |               |\n      \
    \           |   Bob@bobphone    |               |\n                 |      | \
    \           |               |\n                 |      |REGISTER F5 |        \
    \       |\n                 |      |----------->|  REGISTER F6  |\n          \
    \       |      |            |-------------->|\n                 |      |     \
    \       |    200 F7     |\n                 |      |   200 F8   |<--------------|\n\
    \                 |      |<-----------|               |\n                 |  \
    \    |            |               |\n                        Bob Registers His\
    \ Contacts\n   Message details\n   F1 REGISTER Bob's PC Client -> Edge Proxy B\n\
    \   REGISTER sip:pb.example.com SIP/2.0\n   Via: SIP/2.0/TCP bobpc.example.com:5060;branch=z9hG4bKnashds\n\
    \   Max-Forwards: 70\n   To: Bob <sip:bob@example.com>\n   From: Bob <sip:bob@example.com>;tag=456248\n\
    \   Call-ID: 843817637684230@998sdasdh09\n   CSeq: 1826 REGISTER\n   Supported:\
    \ path, outbound\n   Route: <sip:eb.example.com;lr>\n   Contact: <sip:bob@bobpc.example.com>\n\
    \      ;+sip.instance=\"<urn:uuid:0C67446E-F1A1-11D9-94D3-000A95A0E128>\"\n  \
    \    ;reg-id=1\n   Content-Length: 0\n   F2 REGISTER Edge Proxy B -> Registrar/Authoritative\
    \ Proxy B\n   REGISTER sip:pb.example.com SIP/2.0\n   Via: SIP/2.0/TCP eb.example.com:5060;branch=z9hG4bK87asdks7\n\
    \   Via: SIP/2.0/TCP bobpc.example.com:5060;branch=z9hG4bKnashds\n   Max-Forwards:\
    \ 69\n   To: Bob <sip:bob@example.com>\n   From: Bob <sip:bob@example.com>;tag=456248\n\
    \   Call-ID: 843817637684230@998sdasdh09\n   CSeq: 1826 REGISTER\n   Supported:\
    \ path, outbound\n   Path: <sip:laksdyjanseg237+fsdf+uy623hytIJ8@eb.example.com;lr;ob>\n\
    \   Contact: <sip:bob@bobpc.example.com>\n      ;+sip.instance=\"<urn:uuid:0C67446E-F1A1-11D9-94D3-000A95A0E128>\"\
    \n      ;reg-id=1\n   Content-Length: 0\n   F3 200 (REGISTER) Registrar/Authoritative\
    \ Proxy B -> Edge Proxy B\n   SIP/2.0 200 OK\n   Via: SIP/2.0/TCP eb.example.com:5060;branch=z9hG4bK87asdks7\n\
    \   Via: SIP/2.0/TCP bobpc.example.com:5060;branch=z9hG4bKnashds\n   To: Bob <sip:bob@example.com>;tag=2493K59K9\n\
    \   From: Bob <sip:bob@example.com>;tag=456248\n   Call-ID: 843817637684230@998sdasdh09\n\
    \   CSeq: 1826 REGISTER\n   Require: outbound\n   Supported: path, outbound\n\
    \   Path: <sip:laksdyjanseg237+fsdf+uy623hytIJ8@eb.example.com;lr;ob>\n   Contact:\
    \ <sip:bob@bobphone.example.com>\n      ;+sip.instance=\"<urn:uuid:0C67446E-F1A1-11D9-94D3-000A95A0E128>\"\
    \n      ;reg-id=1\n      ;expires=3600\n   Date: Mon, 12 Jun 2006 16:43:12 GMT\n\
    \   Content-Length: 0\n   F4 200 (REGISTER) Edge Proxy B -> Bob's PC Client\n\
    \   SIP/2.0 200 OK\n   Via: SIP/2.0/TCP bobpc.example.com:5060;branch=z9hG4bKnashds\n\
    \   To: Bob <sip:bob@example.com>;tag=2493K59K9\n   From: Bob <sip:bob@example.com>;tag=456248\n\
    \   Call-ID: 843817637684230@998sdasdh09\n   CSeq: 1826 REGISTER\n   Require:\
    \ outbound\n   Supported: path, outbound\n   Path: <sip:laksdyjanseg237+fsdf+uy623hytIJ8@eb.example.com;lr;ob>\n\
    \   Contact: <sip:bob@bobphone.example.com>\n      ;+sip.instance=\"<urn:uuid:0C67446E-F1A1-11D9-94D3-000A95A0E128>\"\
    \n      ;reg-id=1\n      ;expires=3600\n   Date: Thu, 09 Aug 2007 16:43:12 GMT\n\
    \   Content-Length: 0\n   F5 REGISTER Bob's Phone -> Edge Proxy B\n   REGISTER\
    \ sips:pb.example.com SIP/2.0\n   Via: SIP/2.0/TLS bobphone.example.com:5061;branch=z9hG4bK9555\n\
    \   Max-Forwards: 70\n   To: Bob <sips:bob@example.com>\n   From: Bob <sips:bob@example.com>;tag=90210\n\
    \   Call-ID: faif9a@qwefnwdclk\n   CSeq: 12 REGISTER\n   Supported: path, outbound\n\
    \   Route: <sips:eb.example.com;lr>\n   Contact: <sips:bob@bobphone.example.com>\n\
    \      ;+sip.instance=\"<urn:uuid:6F85D4E3-E8AA-46AA-B768-BF39D5912143>\"\n  \
    \    ;reg-id=1\n   Content-Length: 0\n   F6 REGISTER Edge Proxy B -> Registrar/Authoritative\
    \ Proxy B\n   REGISTER sips:pb.example.com SIP/2.0\n   Via: SIP/2.0/TLS eb.example.com:5061;branch=z9hG4bK876354\n\
    \   Via: SIP/2.0/TLS bobphone.example.com:5061;branch=z9hG4bK9555\n   Max-Forwards:\
    \ 69\n   To: Bob <sips:bob@example.com>\n   From: Bob <sips:bob@example.com>;tag=90210\n\
    \   Call-ID: faif9a@qwefnwdclk\n   CSeq: 12 REGISTER\n   Supported: path, outbound\n\
    \   Path: <sips:psodkfsj+34+kklsL+uJH-Xm816k09Kk@eb.example.com;lr;ob>\n   Contact:\
    \ <sips:bob@bobphone.example.com>\n      ;+sip.instance=\"<urn:uuid:6F85D4E3-E8AA-46AA-B768-BF39D5912143>\"\
    \n      ;reg-id=1\n   Content-Length: 0\n   F7 200 (REGISTER) Registrar/Authoritative\
    \ Proxy B -> Edge Proxy B\n   SIP/2.0 200 OK\n   Via: SIP/2.0/TLS eb.example.com:5061;branch=z9hG4bK876354\n\
    \   Via: SIP/2.0/TLS bobphone.example.com:5061;branch=z9hG4bK9555\n   To: Bob\
    \ <sips:bob@example.com>;tag=5150\n   From: Bob <sips:bob@example.com>;tag=90210\n\
    \   Call-ID: faif9a@qwefnwdclk\n   CSeq: 12 REGISTER\n   Require: outbound\n \
    \  Supported: path, outbound\n   Path: <sips:psodkfsj+34+kklsL+uJH-Xm816k09Kk@eb.example.com;lr;ob>\n\
    \   Contact: <sips:bob@bobphone.example.com>\n      ;+sip.instance=\"<urn:uuid:6F85D4E3-E8AA-46AA-B768-BF39D5912143>\"\
    \n      ;reg-id=1\n      ;expires=3600\n   Date: Thu, 09 Aug 2007 16:43:50 GMT\n\
    \   Content-Length: 0\n   F8 200 (REGISTER) Edge Proxy B -> Bob's Phone\n   SIP/2.0\
    \ 200 OK\n   Via: SIP/2.0/TLS bobphone.example.com:5061;branch=z9hG4bK9555\n \
    \  To: Bob <sips:bob@example.com>;tag=5150\n   From: Bob <sips:bob@example.com>;tag=90210\n\
    \   Call-ID: faif9a@qwefnwdclk\n   CSeq: 12 REGISTER\n   Require: outbound\n \
    \  Supported: path, outbound\n   Path: <sips:psodkfsj+34+kklsL+uJH-Xm816k09Kk@eb.example.com;lr;ob>\n\
    \   Contact: <sips:bob@bobphone.example.com>\n      ;+sip.instance=\"<urn:uuid:6F85D4E3-E8AA-46AA-B768-BF39D5912143>\"\
    \n      ;reg-id=1\n      ;expires=3600\n   Date: Thu, 09 Aug 2007 16:43:50 GMT\n\
    \   Content-Length: 0\n"
- title: 6.2.  Alice Calls Bob's SIPS AOR
  contents:
  - "6.2.  Alice Calls Bob's SIPS AOR\n   Bob's registration has already occurred\
    \ as per Section 6.1.\n   In this first example, Alice calls Bob's SIPS AOR\n\
    \   (sips:bob@example.com).  Registrar/Authoritative Proxy B consults the\n  \
    \ binding in the registration database, and finds the two Contact\n   header field\
    \ bindings.  Alice had addressed Bob with a SIPS Request-\n   URI (sips:bob@example.com),\
    \ so Registrar/Authoritative Proxy B\n   determines that the call needs to be\
    \ routed only to bobphone (which\n   registered using a SIPS Contact header field),\
    \ and therefore the\n   request is only sent to sips:bob@bobphone.example.com,\
    \ through Edge\n   Proxy B.  Both Registrar/Authoritative Proxy B and Edge Proxy\
    \ B\n   insert themselves in the Record-Route.  Bob answers at\n   sips:bob@bobphone.example.com.\n\
    \                           (eb)         (pb)\n                           Edge\
    \      Registrar/\n       Bob@bobpc          Proxy B   Auth. Proxy B   Proxy A\
    \     Alice\n        |                   |            |            |         \
    \   |\n        |                   |            |            | INVITE F9  |\n\
    \        |   Bob@bobphone    |            | INVITE F11 |<-----------|\n      \
    \  |      |            | INVITE F13 |<-----------|   100 F10  |\n        |   \
    \   | INVITE F15 |<-----------|   100 F12  |----------->|\n        |      |<-----------|\
    \   100 F14  |----------->|            |\n        |      |   180 F16  |----------->|\
    \            |            |\n        |      |----------->|   180 F17  |      \
    \      |            |\n        |      |   200 F20  |----------->|   180 F18  |\
    \            |\n        |      |----------->|   200 F21  |----------->|   180\
    \ F19  |\n        |      |            |----------->|   200 F22  |----------->|\n\
    \        |      |            |            |----------->|   200 F23  |\n      \
    \  |      |            |            |            |----------->|\n        |   \
    \   |            |            |            |   ACK F24  |\n        |      |  \
    \          |            |   ACK F25  |<-----------|\n        |      |        \
    \    |   ACK F26  |<-----------|            |\n        |      |   ACK F27  |<-----------|\
    \            |            |\n        |      |<-----------|            |      \
    \      |            |\n        |      |            |            |            |\
    \            |\n                        Alice Calls Bob's SIPS AOR\n   Message\
    \ details\n   F9 INVITE Alice -> Proxy A\n   INVITE sips:bob@example.com SIP/2.0\n\
    \   Via: SIP/2.0/TLS alice-1.example.net:5061;branch=z9hG4bKprout\n   Max-Forwards:\
    \ 70\n   To: Bob <sips:bob@example.com>\n   From: Alice <sips:alice@example.net>;tag=8675309\n\
    \   Call-ID: lzksjf8723k@sodk6587\n   CSeq: 1 INVITE\n   Route: <sips:proxya.example.net;lr>\n\
    \   Contact: <sips:alice@alice-1.example.net>\n   Content-Type: application/sdp\n\
    \   Content-Length: {as per SDP}\n   {SDP not shown}\n   F10 100 (INVITE) Proxy\
    \ A -> Alice\n   SIP/2.0 100 Trying\n   Via: SIP/2.0/TLS alice-1.example.net:5061;branch=z9hG4bKprout\n\
    \   To: Bob <sips:bob@example.com>\n   From: Alice <sips:alice@example.net>;tag=8675309\n\
    \   Call-ID: lzksjf8723k@sodk6587\n   CSeq: 1 INVITE\n   Content-Length: 0\n \
    \  F11 INVITE Proxy A -> Registrar/Authoritative Proxy B\n   INVITE sips:bob@example.com\
    \ SIP/2.0\n   Via: SIP/2.0/TLS proxya.example.net:5061;branch=z9hG4bKpouet\n \
    \  Via: SIP/2.0/TLS alice-1.example.net:5061;branch=z9hG4bKprout\n   Max-Forwards:\
    \ 69\n   To: Bob <sips:bob@example.com>\n   From: Alice <sips:alice@example.net>;tag=8675309\n\
    \   Call-ID: lzksjf8723k@sodk6587\n   CSeq: 1 INVITE\n   Record-Route: <sips:proxya.example.net;lr>\n\
    \   Contact: <sips:alice@alice-1.example.net>\n   Content-Type: application/sdp\n\
    \   Content-Length: {as per SDP}\n   {SDP not shown}\n   F12 100 (INVITE) Registrar/Authoritative\
    \ Proxy B -> Proxy A\n   SIP/2.0 100 Trying\n   Via: SIP/2.0/TLS proxya.example.net:5061;branch=z9hG4bKpouet\n\
    \   Via: SIP/2.0/TLS alice-1.example.net:5061;branch=z9hG4bKprout\n   To: Bob\
    \ <sips:bob@example.com>\n   From: Alice <sips:alice@example.net>;tag=8675309\n\
    \   Call-ID: lzksjf8723k@sodk6587\n   CSeq: 1 INVITE\n   Content-Length: 0\n \
    \  F13 INVITE Registrar/Authoritative Proxy B -> Edge Proxy B\n   INVITE sips:bob@bobphone.example.com\
    \ SIP/2.0\n   Via: SIP/2.0/TLS pb.example.com:5061;branch=z9hG4bKbalouba\n   Via:\
    \ SIP/2.0/TLS proxya.example.net:5061;branch=z9hG4bKpouet\n   Via: SIP/2.0/TLS\
    \ alice-1.example.net:5061;branch=z9hG4bKprout\n   Max-Forwards: 68\n   To: Bob\
    \ <sips:bob@example.com>\n   From: Alice <sips:alice@example.net>;tag=8675309\n\
    \   Call-ID: lzksjf8723k@sodk6587\n   CSeq: 1 INVITE\n   Route:\n    <sips:psodkfsj+34+kklsL+uJH-Xm816k09Kk@edge.example.com;lr;ob>\n\
    \   Record-Route: <sips:pb.example.com;lr>, <sips:proxya.example.net;lr>\n   Contact:\
    \ <sips:alice@alice-1.example.net>\n   Content-Type: application/sdp\n   Content-Length:\
    \ {as per SDP}\n   {SDP not shown}\n   F14 100 (INVITE) Edge Proxy B -> Registrar/Authoritative\
    \ Proxy B\n   SIP/2.0 100 Trying\n   Via: SIP/2.0/TLS pb.example.com:5061;branch=z9hG4bKbalouba\n\
    \   Via: SIP/2.0/TLS proxya.example.net:5061;branch=z9hG4bKpouet\n   Via: SIP/2.0/TLS\
    \ alice-1.example.net:5061;branch=z9hG4bKprout\n   To: Bob <sips:bob@example.com>\n\
    \   From: Alice <sips:alice@example.net>;tag=8675309\n   Call-ID: lzksjf8723k@sodk6587\n\
    \   CSeq: 1 INVITE\n   Content-Length: 0\n   F15 INVITE Edge Proxy B -> Bob's\
    \ phone\n   INVITE sips:bob@bobphone.example.com SIP/2.0\n   Via: SIP/2.0/TLS\
    \ eb.example.com:5061;branch=z9hG4bKbiba\n   Via: SIP/2.0/TLS pb.example.com:5061;branch=z9hG4bKbalouba\n\
    \   Via: SIP/2.0/TLS proxya.example.net:5061;branch=z9hG4bKpouet\n   Via: SIP/2.0/TLS\
    \ alice-1.example.net:5061;branch=z9hG4bKprout\n   Max-Forwards: 67\n   To: Bob\
    \ <sips:bob@example.com>\n   From: Alice <sips:alice@example.net>;tag=8675309\n\
    \   Call-ID: lzksjf8723k@sodk6587\n   CSeq: 1 INVITE\n   Record-Route:\n    <sips:psodkfsj+34+kklsL+uJH-Xm816k09Kk@eb.example.com;lr;ob>,\n\
    \    <sips:pb.example.com;lr>, <sips:proxya.example.net;lr>\n   Contact: <sips:alice@alice-1.example.net>\n\
    \   Content-Type: application/sdp\n   Content-Length: {as per SDP}\n   {SDP not\
    \ shown}\n   F16 180 (INVITE) Bob's Phone -> Edge Proxy B\n   SIP/2.0 180 Ringing\n\
    \   Via: SIP/2.0/TLS eb.example.com:5061;branch=z9hG4bKbiba\n   Via: SIP/2.0/TLS\
    \ pb.example.com:5061;branch=z9hG4bKbalouba\n   Via: SIP/2.0/TLS proxya.example.net:5061;branch=z9hG4bKpouet\n\
    \   Via: SIP/2.0/TLS alice-1.example.net:5061;branch=z9hG4bKprout\n   To: Bob\
    \ <sips:bob@example.com>;tag=5551212\n   From: Alice <sips:alice@example.net>;tag=8675309\n\
    \   Call-ID: lzksjf8723k@sodk6587\n   CSeq: 1 INVITE\n   Record-Route:\n    <sips:psodkfsj+34+kklsL+uJH-Xm816k09Kk@eb.example.com;lr;ob>,\n\
    \    <sips:pb.example.com;lr>, <sips:proxya.example.net;lr>\n   Contact: <sips:bob@bobphone.example.com>\n\
    \   Content-Length: 0\n   F17 180 (INVITE) Edge Proxy B -> Registrar/Authoritative\
    \ Proxy B\n   SIP/2.0 180 Ringing\n   Via: SIP/2.0/TLS pb.example.com:5061;branch=z9hG4bKbalouba\n\
    \   Via: SIP/2.0/TLS proxya.example.net:5061;branch=z9hG4bKpouet\n   Via: SIP/2.0/TLS\
    \ alice-1.example.net:5061;branch=z9hG4bKprout\n   To: Bob <sips:bob@example.com>;tag=5551212\n\
    \   From: Alice <sips:alice@example.net>;tag=8675309\n   Call-ID: lzksjf8723k@sodk6587\n\
    \   CSeq: 1 INVITE\n   Record-Route:\n    <sips:psodkfsj+34+kklsL+uJH-Xm816k09Kk@eb.example.com;lr;ob>,\n\
    \    <sips:pb.example.com;lr>, <sips:proxya.example.net;lr>\n   Contact: <sips:bob@bobphone.example.com>\n\
    \   Content-Length: 0\n   F18 180 Registrar/Authoritative Proxy B -> Proxy A\n\
    \   SIP/2.0 180 Ringing\n   Via: SIP/2.0/TLS proxya.example.net:5061;branch=z9hG4bKpouet\n\
    \   Via: SIP/2.0/TLS alice-1.example.net:5061;branch=z9hG4bKprout\n   To: Bob\
    \ <sips:bob@example.com>;tag=5551212\n   From: Alice <sips:alice@example.net>;tag=8675309\n\
    \   Call-ID: lzksjf8723k@sodk6587\n   CSeq: 1 INVITE\n   Record-Route:\n    <sips:psodkfsj+34+kklsL+uJH-Xm816k09Kk@eb.example.com;lr;ob>,\n\
    \    <sips:pb.example.com;lr>, <sips:proxya.example.net;lr>\n   Contact: <sips:bob@bobphone.example.com>\n\
    \   Content-Length: 0\n   F19 180 (INVITE) Proxy A -> Alice\n   SIP/2.0 180 Ringing\n\
    \   Via: SIP/2.0/TLS alice-1.example.net:5061;branch=z9hG4bKprout\n   To: Bob\
    \ <sips:bob@example.com>;tag=5551212\n   From: Alice <sips:alice@example.net>;tag=8675309\n\
    \   Call-ID: lzksjf8723k@sodk6587\n   CSeq: 1 INVITE\n   Record-Route:\n    <sips:psodkfsj+34+kklsL+uJH-Xm816k09Kk@eb.example.com;lr;ob>,\n\
    \    <sips:pb.example.com;lr>, <sips:proxya.example.net;lr>\n   Contact: <sips:bob@bobphone.example.com>\n\
    \   Content-Length: 0\n   F20 200 (INVITE) Bob's Phone -> Edge Proxy B\n   SIP/2.0\
    \ 200 OK\n   Via: SIP/2.0/TLS eb.example.com:5061;branch=z9hG4bKbiba\n   Via:\
    \ SIP/2.0/TLS pb.example.com:5061;branch=z9hG4bKbalouba\n   Via: SIP/2.0/TLS proxya.example.net:5061;branch=z9hG4bKpouet\n\
    \   Via: SIP/2.0/TLS alice-1.example.net:5061;branch=z9hG4bKprout\n   To: Bob\
    \ <sips:bob@example.com>;tag=5551212\n   From: Alice <sips:alice@example.net>;tag=8675309\n\
    \   Call-ID: lzksjf8723k@sodk6587\n   CSeq: 1 INVITE\n   Record-Route:\n    <sips:psodkfsj+34+kklsL+uJH-Xm816k09Kk@eb.example.com;lr;ob>,\n\
    \    <sips:pb.example.com;lr>, <sips:proxya.example.net;lr>\n   Contact: <sips:bob@bobphone.example.com>\n\
    \   Content-Length: 0\n   F21 200 (INVITE) Edge Proxy B -> Registrar/Authoritative\
    \ Proxy B\n   SIP/2.0 200 OK\n   Via: SIP/2.0/TLS pb.example.com:5061;branch=z9hG4bKbalouba\n\
    \   Via: SIP/2.0/TLS proxya.example.net:5061;branch=z9hG4bKpouet\n   Via: SIP/2.0/TLS\
    \ alice-1.example.net:5061;branch=z9hG4bKprout\n   To: Bob <sips:bob@example.com>;tag=5551212\n\
    \   From: Alice <sips:alice@example.net>;tag=8675309\n   Call-ID: lzksjf8723k@sodk6587\n\
    \   CSeq: 1 INVITE\n   Record-Route:\n    <sips:psodkfsj+34+kklsL+uJH-Xm816k09Kk@eb.example.com;lr;ob>,\n\
    \    <sips:pb.example.com;lr>, <sips:proxya.example.net;lr>\n   Contact: <sips:bob@bobphone.example.com>\n\
    \   Content-Length: 0\n   F22 200 Registrar/Authoritative Proxy B -> Proxy A\n\
    \   SIP/2.0 200 OK\n   Via: SIP/2.0/TLS proxya.example.net:5061;branch=z9hG4bKpouet\n\
    \   Via: SIP/2.0/TLS alice-1.example.net:5061;branch=z9hG4bKprout\n   To: Bob\
    \ <sips:bob@example.com>;tag=5551212\n   From: Alice <sips:alice@example.net>;tag=8675309\n\
    \   Call-ID: lzksjf8723k@sodk6587\n   CSeq: 1 INVITE\n   Record-Route:\n    <sips:psodkfsj+34+kklsL+uJH-Xm816k09Kk@eb.example.com;lr;ob>,\n\
    \    <sips:pb.example.com;lr>, <sips:proxya.example.net;lr>\n   Contact: <sips:bob@bobphone.example.com>\n\
    \   Content-Length: 0\n   F23 200 (INVITE) Proxy A -> Alice\n   SIP/2.0 200 OK\n\
    \   Via: SIP/2.0/TLS alice-1.example.net:5061;branch=z9hG4bKprout\n   To: Bob\
    \ <sips:bob@example.com>;tag=5551212\n   From: Alice <sips:alice@example.net>;tag=8675309\n\
    \   Call-ID: lzksjf8723k@sodk6587\n   CSeq: 1 INVITE\n   Record-Route:\n    <sips:psodkfsj+34+kklsL+uJH-Xm816k09Kk@eb.example.com;lr;ob>,\n\
    \    <sips:pb.example.com;lr>, <sips:proxya.example.net;lr>\n   Contact: <sips:bob@bobphone.example.com>\n\
    \   Content-Length: 0\n   F24 ACK Alice -> Proxy A\n   ACK sips:bob@bobphone.example.com\
    \ SIP/2.0\n   Via: SIP/2.0/TLS alice-1.example.net:5061;branch=z9hG4bKksdjf\n\
    \   Max-Forwards: 70\n   To: Bob <sips:bob@example.com>;tag=5551212\n   From:\
    \ Alice <sips:alice@example.net>;tag=8675309\n   Call-ID: lzksjf8723k@sodk6587\n\
    \   CSeq: 1 ACK\n   Route: <sips:proxya.example.net;lr>, <sips:pb.example.com;lr>,\n\
    \    <sips:psodkfsj+34+kklsL+uJH-Xm816k09Kk@pb.example.com;lr;ob>\n   Content-Length:\
    \ 0\n   F25 ACK Proxy A -> Registrar/Authoritative Proxy B\n   ACK sips:bob@bobphone.example.com\
    \ SIP/2.0\n   Via: SIP/2.0/TLS proxya.example.net:5061;branch=z9hG4bKplo7hy\n\
    \   Via: SIP/2.0/TLS alice-1.example.net:5061;branch=z9hG4bKksdjf\n   Max-Forwards:\
    \ 69\n   To: Bob <sips:bob@example.com>;tag=5551212\n   From: Alice <sips:alice@example.net>;tag=8675309\n\
    \   Call-ID: lzksjf8723k@sodk6587\n   CSeq: 1 ACK\n   Route: <sips:pb.example.com;lr>,\n\
    \    <sips:psodkfsj+34+kklsL+uJH-Xm816k09Kk@pb.example.com;lr;ob>\n   Content-Length:\
    \ 0\n   F26 ACK Registrar/Authoritative Proxy B -> Edge Proxy B\n   ACK sips:bob@bobphone.example.com\
    \ SIP/2.0\n   Via: SIP/2.0/TLS pb.example.com:5061;branch=z9hG4bK8msdu2\n   Via:\
    \ SIP/2.0/TLS proxya.example.net:5061;branch=z9hG4bKplo7hy\n   Via: SIP/2.0/TLS\
    \ alice-1.example.net:5061;branch=z9hG4bKksdjf\n   Max-Forwards: 69\n   To: Bob\
    \ <sips:bob@example.com>;tag=5551212\n   From: Alice <sips:alice@example.net>;tag=8675309\n\
    \   Call-ID: lzksjf8723k@sodk6587\n   CSeq: 1 ACK\n   Route: <sips:pb.example.com;lr>,\n\
    \    <sips:psodkfsj+34+kklsL+uJH-Xm816k09Kk@pb.example.com;lr;ob>\n   Content-Length:\
    \ 0\n   F27 ACK Proxy B -> Bob's Phone\n   ACK sips:bob@bobphone.example.com SIP/2.0\n\
    \   Via: SIP/2.0/TLS eb.example.com:5061;branch=z9hG4bKkmfdgk\n   Via: SIP/2.0/TLS\
    \ pb.example.com:5061;branch=z9hG4bK8msdu2\n   Via: SIP/2.0/TLS proxya.example.net:5061;branch=z9hG4bKplo7hy\n\
    \   Via: SIP/2.0/TLS alice-1.example.net:5061;branch=z9hG4bKksdjf\n   Max-Forwards:\
    \ 68\n   To: Bob <sips:bob@example.com>;tag=5551212\n   From: Alice <sips:alice@example.net>;tag=8675309\n\
    \   Call-ID: lzksjf8723k@sodk6587\n   CSeq: 1 ACK\n   Content-Length: 0\n"
- title: 6.3.  Alice Calls Bob's SIP AOR Using TCP
  contents:
  - "6.3.  Alice Calls Bob's SIP AOR Using TCP\n   Bob's registration has already\
    \ occurred as per Section 6.1.\n   In the second example, Alice calls Bob's SIP\
    \ AOR instead\n   (sip:bob@example.com), and she uses TCP as a transport.  Registrar/\n\
    \   Authoritative Proxy B consults the binding in the registration\n   database,\
    \ and finds the two Contact header field bindings.  Alice had\n   addressed Bob\
    \ with a SIP Request-URI (sip:bob@example.com), so\n   Registrar/Authoritative\
    \ Proxy B determines that the call needs to be\n   routed both to bobpc (which\
    \ registered with a SIP Contact header\n   field) and bobphone (which registered\
    \ with a SIPS Contact header\n   field), and therefore the request is forked to\n\
    \   sip:bob@bobpc.example.com and sip:bob@bobphone.example.com, through\n   Edge\
    \ Proxy B.  Note that Registrar/Authoritative Proxy B preserved\n   the SIP scheme\
    \ of the Request-URI instead of replacing it with the\n   SIPS scheme of the Contact\
    \ header field that was used for\n   registration.  Both Registrar/Authoritative\
    \ Proxy B and Edge Proxy B\n   insert themselves in the Record-Route.  Bob's phone's\
    \ policy is to\n   accept calls to SIP and SIPS (i.e., \"best effort\"), so both\
    \ his PC\n   client and his SIP phone ring simultaneously.  Bob answers on his\
    \ SIP\n   phone, and the forked call leg to the PC client is canceled.\n     \
    \                      (eb)         (pb)\n                           Edge    \
    \  Registrar/\n       Bob@bobpc          Proxy B   Auth. Proxy B   Proxy A   \
    \  Alice\n        |                   |            |            |            |\n\
    \        |                   |            |            | INVITE F9  |\n      \
    \  |                   |            | INVITE F11 |<-----------|\n        |   \
    \                | INVITE F13'|<-----------|   100 F10  |\n        |    INVITE\
    \ F15'    |<-----------|   100 F12  |----------->|\n        |<------------------|\
    \   100 F14' |----------->|            |\n        |     180 F16'      |----------->|\
    \            |            |\n        |------------------>|   180 F17' |      \
    \      |            |\n        |                   |----------->|  180 F18'  |\
    \            |\n        |   Bob@bobphone    |            |----------->|   180\
    \ F19' |\n        |      |            | INVITE F13 |            |----------->|\n\
    \        |      | INVITE F15 |<-----------|            |            |\n      \
    \  |      |<-----------|   100 F14  |            |            |\n        |   \
    \   |   180 F16  |----------->|            |            |\n        |      |----------->|\
    \   180 F17  |            |            |\n        |      |   200 F20  |----------->|\
    \   180 F18  |            |\n        |      |----------->|   200 F21  |----------->|\
    \   180 F19  |\n        |      |            |----------->|   200 F22  |----------->|\n\
    \        |      |            |            |----------->|   200 F23  |\n      \
    \  |      |            |            |            |----------->|\n        |   \
    \   |            |            |            |   ACK F24  |\n        |      |  \
    \          |            |   ACK F25  |<-----------|\n        |      |        \
    \    |   ACK F26  |<-----------|            |\n        |      |   ACK F27  |<-----------|\
    \            |            |\n        |      |<-----------|            |      \
    \      |            |\n        |                   | CANCEL F26'|            |\
    \            |\n        |    CANCEL F27'    |<-----------|            |      \
    \      |\n        |<------------------|            |            |            |\n\
    \        |     200 F28'      |            |            |            |\n      \
    \  |------------------>|   200 F29' |            |            |\n        |   \
    \  487 F30'      |----------->|            |            |\n        |------------------>|\
    \   487 F31' |            |            |\n        |                   |----------->|\
    \            |            |\n                         Alice Calls Bob's SIP AOR\n\
    \   Message details\n   F9 INVITE Alice -> Proxy A\n   INVITE sip:bob@example.com\
    \ SIP/2.0\n   Via: SIP/2.0/TCP alice-1.example.net:5060;branch=z9hG4bKprout\n\
    \   Max-Forwards: 70\n   To: Bob <sip:bob@example.com>\n   From: Alice <sip:alice@example.net>;tag=8675309\n\
    \   Call-ID: lzksjf8723k@sodk6587\n   CSeq: 1 INVITE\n   Route: <sip:proxya.example.net;lr>\n\
    \   Contact: <sip:alice@alice-1.example.net>\n   Content-Type: application/sdp\n\
    \   Content-Length: {as per SDP}\n   {SDP not shown}\n   F10 100 (INVITE) Proxy\
    \ A -> Alice\n   SIP/2.0 100 Trying\n   Via: SIP/2.0/TCP alice-1.example.net:5060;branch=z9hG4bKprout\n\
    \   To: Bob <sip:bob@example.com>\n   From: Alice <sip:alice@example.net>;tag=8675309\n\
    \   Call-ID: lzksjf8723k@sodk6587\n   CSeq: 1 INVITE\n   Content-Length: 0\n \
    \  F11 INVITE Proxy A -> Registrar/Authoritative Proxy B\n   INVITE sip:bob@example.com\
    \ SIP/2.0\n   Via: SIP/2.0/TCP proxya.example.net:5060;branch=z9hG4bKpouet\n \
    \  Via: SIP/2.0/TCP alice-1.example.net:5060;branch=z9hG4bKprout\n   Max-Forwards:\
    \ 69\n   To: Bob <sip:bob@example.com>\n   From: Alice <sip:alice@example.net>;tag=8675309\n\
    \   Call-ID: lzksjf8723k@sodk6587\n   CSeq: 1 INVITE\n   Record-Route: <sip:proxya.example.net;lr>\n\
    \   Contact: <sip:alice@alice-1.example.net>\n   Content-Type: application/sdp\n\
    \   Content-Length: {as per SDP}\n   {SDP not shown}\n   F12 100 (INVITE) Registrar/Authoritative\
    \ Proxy B -> Proxy A\n   SIP/2.0 100 Trying\n   Via: SIP/2.0/TCP proxya.example.net:5060;branch=z9hG4bKpouet\n\
    \   Via: SIP/2.0/TCP alice-1.example.net:5060;branch=z9hG4bKprout\n   To: Bob\
    \ <sip:bob@example.com>\n   From: Alice <sip:alice@example.net>;tag=8675309\n\
    \   Call-ID: lzksjf8723k@sodk6587\n   CSeq: 1 INVITE\n   Content-Length: 0\n \
    \  F13' INVITE Registrar/Authoritative Proxy B -> Edge Proxy B\n   INVITE sip:bob@bobpc.example.com\
    \ SIP/2.0\n   Via: SIP/2.0/TCP pb.example.com:5060;branch=z9hG4bKbalouba.2\n \
    \  Via: SIP/2.0/TCP proxya.example.net:5060;branch=z9hG4bKpouet\n   Via: SIP/2.0/TCP\
    \ alice-1.example.net:5060;branch=z9hG4bKprout\n   Max-Forwards: 68\n   To: Bob\
    \ <sip:bob@example.com>\n   From: Alice <sip:alice@example.net>;tag=8675309\n\
    \   Call-ID: lzksjf8723k@sodk6587\n   CSeq: 1 INVITE\n   Route: <sip:laksdyjanseg237+fsdf+uy623hytIJ8@eb.example.com;lr;ob>\n\
    \   Record-Route: <sip:pb.example.com;lr>, <sip:proxya.example.net;lr>\n   Contact:\
    \ <sip:alice@alice-1.example.net>\n   Content-Type: application/sdp\n   Content-Length:\
    \ {as per SDP}\n   {SDP not shown}\n   F14' 100 (INVITE) Edge Proxy B -> Registrar/Authoritative\
    \ Proxy B\n   SIP/2.0 100 Trying\n   Via: SIP/2.0/TCP pb.example.com:5060;branch=z9hG4bKbalouba.2\n\
    \   Via: SIP/2.0/TCP proxya.example.net:5060;branch=z9hG4bKpouet\n   Via: SIP/2.0/TCP\
    \ alice-1.example.net:5060;branch=z9hG4bKprout\n   To: Bob <sip:bob@example.com>\n\
    \   From: Alice <sip:alice@example.net>;tag=8675309\n   Call-ID: lzksjf8723k@sodk6587\n\
    \   CSeq: 1 INVITE\n   Content-Length: 0\n   F15' INVITE Edge Proxy B -> Bob's\
    \ PC Client\n   INVITE sip:bob@bobpc.example.com SIP/2.0\n   Via: SIP/2.0/TCP\
    \ eb.example.com:5060;branch=z9hG4bKbiba\n   Via: SIP/2.0/TCP pb.example.com:5060;branch=z9hG4bKbalouba.2\n\
    \   Via: SIP/2.0/TCP proxya.example.net:5060;branch=z9hG4bKpouet\n   Via: SIP/2.0/TCP\
    \ alice-1.example.net:5060;branch=z9hG4bKprout\n   Max-Forwards: 67\n   To: Bob\
    \ <sip:bob@example.com>\n   From: Alice <sip:alice@example.net>;tag=8675309\n\
    \   Call-ID: lzksjf8723k@sodk6587\n   CSeq: 1 INVITE\n   Record-Route:\n    <sip:laksdyjanseg237+fsdf+uy623hytIJ8@eb.example.com;lr;ob>,\n\
    \    <sip:pb.example.com;lr>, <sip:proxya.example.net;lr>\n   Contact: <sip:alice@alice-1.example.net>\n\
    \   Content-Type: application/sdp\n   Content-Length: {as per SDP}\n   {SDP not\
    \ shown}\n   F16' 180 (INVITE) Bob's PC Client -> Edge Proxy B\n   SIP/2.0 180\
    \ Ringing\n   Via: SIP/2.0/TCP eb.example.com:5060;branch=z9hG4bKbiba\n   Via:\
    \ SIP/2.0/TCP pb.example.com:5060;branch=z9hG4bKbalouba.2\n   Via: SIP/2.0/TCP\
    \ proxya.example.net:5060;branch=z9hG4bKpouet\n   Via: SIP/2.0/TCP alice-1.example.net:5060;branch=z9hG4bKprout\n\
    \   To: Bob <sip:bob@example.com>;tag=963258\n   From: Alice <sip:alice@example.net>;tag=8675309\n\
    \   Call-ID: lzksjf8723k@sodk6587\n   CSeq: 1 INVITE\n   Record-Route:\n    <sip:laksdyjanseg237+fsdf+uy623hytIJ8@eb.example.com;lr;ob>,\n\
    \    <sip:pb.example.com;lr>, <sip:proxya.example.net;lr>\n   Contact: <sip:bob@bobpc.example.com>\n\
    \   Content-Length: 0\n   F17' 180 (INVITE) Edge Proxy B -> Registrar/Authoritative\
    \ Proxy B\n   SIP/2.0 180 Ringing\n   Via: SIP/2.0/TCP pb.example.com:5060;branch=z9hG4bKbalouba.2\n\
    \   Via: SIP/2.0/TCP proxya.example.net:5060;branch=z9hG4bKpouet\n   Via: SIP/2.0/TCP\
    \ alice-1.example.net:5060;branch=z9hG4bKprout\n   To: Bob <sip:bob@example.com>;tag=963258\n\
    \   From: Alice <sip:alice@example.net>;tag=8675309\n   Call-ID: lzksjf8723k@sodk6587\n\
    \   CSeq: 1 INVITE\n   Record-Route:\n    <sip:laksdyjanseg237+fsdf+uy623hytIJ8@eb.example.com;lr;ob>,\n\
    \    <sip:pb.example.com;lr>, <sip:proxya.example.net;lr>\n   Contact: <sip:bob@bobpc.example.com>\n\
    \   Content-Length: 0\n   F18' 180 (INVITE) Registrar/Authoritative Proxy B ->\
    \ Proxy A\n   SIP/2.0 180 Ringing\n   Via: SIP/2.0/TCP proxya.example.net:5060;branch=z9hG4bKpouet\n\
    \   Via: SIP/2.0/TCP alice-1.example.net:5060;branch=z9hG4bKprout\n   To: Bob\
    \ <sip:bob@example.com>;tag=963258\n   From: Alice <sip:alice@example.net>;tag=8675309\n\
    \   Call-ID: lzksjf8723k@sodk6587\n   CSeq: 1 INVITE\n   Record-Route:\n    <sip:laksdyjanseg237+fsdf+uy623hytIJ8@eb.example.com;lr;ob>,\n\
    \    <sip:pb.example.com;lr>, <sip:proxya.example.net;lr>\n   Contact: <sip:bob@bobpc.example.com>\n\
    \   Content-Length: 0\n   F19' 180 (INVITE) Proxy A -> Alice\n   SIP/2.0 180 Ringing\n\
    \   Via: SIP/2.0/TCP alice-1.example.net:5060;branch=z9hG4bKprout\n   To: Bob\
    \ <sip:bob@example.com>;tag=963258\n   From: Alice <sip:alice@example.net>;tag=8675309\n\
    \   Call-ID: lzksjf8723k@sodk6587\n   CSeq: 1 INVITE\n   Record-Route:\n    <sip:laksdyjanseg237+fsdf+uy623hytIJ8@eb.example.com;lr;ob>,\n\
    \    <sip:pb.example.com;lr>, <sip:proxya.example.net;lr>\n   Contact: <sip:bob@bobpc.example.com>\n\
    \   Content-Length: 0\n   F13 INVITE Registrar/Authoritative Proxy B -> Edge Proxy\
    \ B\n   INVITE sip:bob@bobphone.example.com SIP/2.0\n   Via: SIP/2.0/TCP pb.example.com:5060;branch=z9hG4bKbalouba.1\n\
    \   Via: SIP/2.0/TCP proxya.example.net:5060;branch=z9hG4bKpouet\n   Via: SIP/2.0/TCP\
    \ alice-1.example.net:5060;branch=z9hG4bKprout\n   Max-Forwards: 68\n   To: Bob\
    \ <sip:bob@example.com>\n   From: Alice <sip:alice@example.net>;tag=8675309\n\
    \   Call-ID: lzksjf8723k@sodk6587\n   CSeq: 1 INVITE\n   Route: <sip:psodkfsj+34+kklsL+uJH-Xm816k09Kk@eb.example.com;lr;ob>\n\
    \   Record-Route: <sip:pb.example.com;lr>, <sip:proxya.example.net;lr>\n   Contact:\
    \ <sip:alice@alice-1.example.net>\n   Content-Type: application/sdp\n   Content-Length:\
    \ {as per SDP}\n   {SDP not shown}\n   F14 100 (INVITE) Edge Proxy B -> Registrar/Authoritative\
    \ Proxy B\n   SIP/2.0 100 Trying\n   Via: SIP/2.0/TCP pb.example.com:5060;branch=z9hG4bKbalouba.1\n\
    \   Via: SIP/2.0/TCP proxya.example.net:5060;branch=z9hG4bKpouet\n   Via: SIP/2.0/TCP\
    \ alice-1.example.net:5060;branch=z9hG4bKprout\n   To: Bob <sip:bob@example.com>\n\
    \   From: Alice <sip:alice@example.net>;tag=8675309\n   Call-ID: lzksjf8723k@sodk6587\n\
    \   CSeq: 1 INVITE\n   Content-Length: 0\n   F15 INVITE Edge Proxy B -> Bob's\
    \ Phone\n   INVITE sip:bob@bobphone.example.com SIP/2.0\n   Via: SIP/2.0/TLS eb.example.com:5061;branch=z9hG4bKtroubaba\n\
    \   Via: SIP/2.0/TCP pb.example.com:5060;branch=z9hG4bKbalouba.1\n   Via: SIP/2.0/TCP\
    \ proxya.example.net:5060;branch=z9hG4bKpouet\n   Via: SIP/2.0/TCP alice-1.example.net:5060;branch=z9hG4bKprout\n\
    \   Max-Forwards: 68\n   To: Bob <sip:bob@example.com>\n   From: Alice <sip:alice@example.net>;tag=8675309\n\
    \   Call-ID: lzksjf8723k@sodk6587\n   CSeq: 1 INVITE\n   Record-Route:\n    <sip:psodkfsj+34+kklsL+uJH-Xm816k09Kk@eb.example.com;lr;ob>,\n\
    \    <sip:pb.example.com;lr>, <sip:proxya.example.net;lr>\n   Contact: <sip:alice@alice-1.example.net>\n\
    \   Content-Type: application/sdp\n   Content-Length: {as per SDP}\n   {SDP not\
    \ shown}\n   F16 180 (INVITE) Bob's Phone -> Edge Proxy B\n   SIP/2.0 180 Ringing\n\
    \   Via: SIP/2.0/TLS eb.example.com:5061;branch=z9hG4bKtroubaba\n   Via: SIP/2.0/TCP\
    \ pb.example.com:5060;branch=z9hG4bKbalouba.1\n   Via: SIP/2.0/TCP proxya.example.net:5060;branch=z9hG4bKpouet\n\
    \   Via: SIP/2.0/TCP alice-1.example.net:5060;branch=z9hG4bKprout\n   To: Bob\
    \ <sip:bob@example.com>;tag=5551212\n   From: Alice <sip:alice@example.net>;tag=8675309\n\
    \   Call-ID: lzksjf8723k@sodk6587\n   CSeq: 1 INVITE\n   Record-Route:\n    <sip:psodkfsj+34+kklsL+uJH-Xm816k09Kk@eb.example.com;lr;ob>,\n\
    \    <sip:pb.example.com;lr>, <sip:proxya.example.net;lr>\n   Contact: <sip:bob@bobphone.example.com>\n\
    \   Content-Length: 0\n   F17 180 (INVITE) Edge Proxy B -> Registrar/Authoritative\
    \ Proxy B\n   SIP/2.0 180 Ringing\n   Via: SIP/2.0/TCP pb.example.com:5060;branch=z9hG4bKbalouba.1\n\
    \   Via: SIP/2.0/TCP proxya.example.net:5060;branch=z9hG4bKpouet\n   Via: SIP/2.0/TCP\
    \ alice-1.example.net:5060;branch=z9hG4bKprout\n   To: Bob <sip:bob@example.com>;tag=5551212\n\
    \   From: Alice <sip:alice@example.net>;tag=8675309\n   Call-ID: lzksjf8723k@sodk6587\n\
    \   CSeq: 1 INVITE\n   Record-Route:\n    <sip:psodkfsj+34+kklsL+uJH-Xm816k09Kk@eb.example.com;lr;ob>,\n\
    \    <sip:pb.example.com;lr>, <sip:proxya.example.net;lr>\n   Contact: <sip:bob@bobphone.example.com>\n\
    \   Content-Length: 0\n   F18 180 (INVITE) Registrar/Authoritative Proxy B ->\
    \ Proxy A\n   SIP/2.0 180 Ringing\n   Via: SIP/2.0/TCP proxya.example.net:5060;branch=z9hG4bKpouet\n\
    \   Via: SIP/2.0/TCP alice-1.example.net:5060;branch=z9hG4bKprout\n   To: Bob\
    \ <sip:bob@example.com>;tag=5551212\n   From: Alice <sip:alice@example.net>;tag=8675309\n\
    \   Call-ID: lzksjf8723k@sodk6587\n   CSeq: 1 INVITE\n   Record-Route:\n    <sip:psodkfsj+34+kklsL+uJH-Xm816k09Kk@eb.example.com;lr;ob>,\n\
    \    <sip:pb.example.com;lr>, <sip:proxya.example.net;lr>\n   Contact: <sip:bob@bobphone.example.com>\n\
    \   Content-Length: 0\n   F19 180 (INVITE) Proxy A -> Alice\n   SIP/2.0 180 Ringing\n\
    \   Via: SIP/2.0/TCP alice-1.example.net:5060;branch=z9hG4bKprout\n   To: Bob\
    \ <sip:bob@example.com>;tag=5551212\n   From: Alice <sip:alice@example.net>;tag=8675309\n\
    \   Call-ID: lzksjf8723k@sodk6587\n   CSeq: 1 INVITE\n   Record-Route:\n    <sip:psodkfsj+34+kklsL+uJH-Xm816k09Kk@eb.example.com;lr;ob>,\n\
    \    <sip:pb.example.com;lr>, <sip:proxya.example.net;lr>\n   Contact: <sip:bob@bobphone.example.com>\n\
    \   Content-Length: 0\n   F20 200 (INVITE) Bob's Phone -> Edge Proxy B\n   SIP/2.0\
    \ 200 OK\n   Via: SIP/2.0/TLS eb.example.com:5061;branch=z9hG4bKtroubaba\n   Via:\
    \ SIP/2.0/TCP pb.example.com:5060;branch=z9hG4bKbalouba.1\n   Via: SIP/2.0/TCP\
    \ proxya.example.net:5060;branch=z9hG4bKpouet\n   Via: SIP/2.0/TCP alice-1.example.net:5060;branch=z9hG4bKprout\n\
    \   To: Bob <sip:bob@example.com>;tag=5551212\n   From: Alice <sip:alice@example.net>;tag=8675309\n\
    \   Call-ID: lzksjf8723k@sodk6587\n   CSeq: 1 INVITE\n   Record-Route:\n    <sip:psodkfsj+34+kklsL+uJH-Xm816k09Kk@eb.example.com;lr;ob>,\n\
    \    <sip:pb.example.com;lr>, <sip:proxya.example.net;lr>\n   Contact: <sip:bob@bobphone.example.com>\n\
    \   Content-Length: 0\n   F21 200 (INVITE) Edge Proxy B -> Registrar/Authoritative\
    \ Proxy B\n   SIP/2.0 200 OK\n   Via: SIP/2.0/TCP pb.example.com:5060;branch=z9hG4bKbalouba.1\n\
    \   Via: SIP/2.0/TCP proxya.example.net:5060;branch=z9hG4bKpouet\n   Via: SIP/2.0/TCP\
    \ alice-1.example.net:5060;branch=z9hG4bKprout\n   To: Bob <sip:bob@example.com>;tag=5551212\n\
    \   From: Alice <sip:alice@example.net>;tag=8675309\n   Call-ID: lzksjf8723k@sodk6587\n\
    \   CSeq: 1 INVITE\n   Record-Route:\n    <sip:psodkfsj+34+kklsL+uJH-Xm816k09Kk@eb.example.com;lr;ob>,\n\
    \    <sip:pb.example.com;lr>, <sip:proxya.example.net;lr>\n   Contact: <sip:bob@bobphone.example.com>\n\
    \   Content-Length: 0\n   F22 200 (INVITE) Registrar/Authoritative Proxy B ->\
    \ Proxy A\n   SIP/2.0 200 OK\n   Via: SIP/2.0/TCP proxya.example.net:5060;branch=z9hG4bKpouet\n\
    \   Via: SIP/2.0/TCP alice-1.example.net:5060;branch=z9hG4bKprout\n   To: Bob\
    \ <sip:bob@example.com>;tag=5551212\n   From: Alice <sip:alice@example.net>;tag=8675309\n\
    \   Call-ID: lzksjf8723k@sodk6587\n   CSeq: 1 INVITE\n   Record-Route:\n    <sip:psodkfsj+34+kklsL+uJH-Xm816k09Kk@eb.example.com;lr;ob>,\n\
    \    <sip:pb.example.com;lr>, <sip:proxya.example.net;lr>\n   Contact: <sip:bob@bobphone.example.com>\n\
    \   Content-Length: 0\n   F23 200 (INVITE) Proxy A -> Alice\n   SIP/2.0 200 OK\n\
    \   Via: SIP/2.0/TCP alice-1.example.net:5060;branch=z9hG4bKprout\n   To: Bob\
    \ <sip:bob@example.com>;tag=5551212\n   From: Alice <sip:alice@example.net>;tag=8675309\n\
    \   Call-ID: lzksjf8723k@sodk6587\n   CSeq: 1 INVITE\n   Record-Route:\n    <sip:psodkfsj+34+kklsL+uJH-Xm816k09Kk@eb.example.com;lr;ob>,\n\
    \    <sip:pb.example.com;lr>, <sip:proxya.example.net;lr>\n   Contact: <sip:bob@bobphone.example.com>\n\
    \   Content-Length: 0\n   F24 ACK Alice -> Proxy A\n   ACK sip:bob@bobphone.example.com\
    \ SIP/2.0\n   Via: SIP/2.0/TCP alice-1.example.net:5060;branch=z9hG4bKprout\n\
    \   Max-Forwards: 70\n   To: Bob <sip:bob@example.com>;tag=5551212\n   From: Alice\
    \ <sip:alice@example.net>;tag=8675309\n   Call-ID: lzksjf8723k@sodk6587\n   CSeq:\
    \ 1 ACK\n   Route: <sip:proxya.example.net;lr>, <sip:pb.example.com;lr>,\n   \
    \ <sip:psodkfsj+34+kklsL+uJH-Xm816k09Kk@edge.example.com;lr;ob>\n   Content-Length:\
    \ 0\n   F25 ACK Proxy A -> Registrar/Authoritative Proxy B\n   ACK sip:bob@bobphone.example.com\
    \ SIP/2.0\n   Via: SIP/2.0/TCP proxya.example.net:5060;branch=z9hG4bKpouet\n \
    \  Via: SIP/2.0/TCP alice-1.example.net:5060;branch=z9hG4bKprout\n   Max-Forwards:\
    \ 69\n   To: Bob <sip:bob@example.com>;tag=5551212\n   From: Alice <sip:alice@example.net>;tag=8675309\n\
    \   Call-ID: lzksjf8723k@sodk6587\n   CSeq: 1 ACK\n   Route: <sip:pb.example.com;lr>,\n\
    \          <sip:psodkfsj+34+kklsL+uJH-Xm816k09Kk@eb.example.com;lr;ob>\n    Content-Length:\
    \ 0\n   F26 ACK Registrar/Authoritative Proxy B -> Edge Proxy B\n   ACK sip:bob@bobphone.example.com\
    \ SIP/2.0\n   Via: SIP/2.0/TCP pb.example.com:5060;branch=z9hG4bKbalouba.1\n \
    \  Via: SIP/2.0/TCP proxya.example.net:5060;branch=z9hG4bKpouet\n   Via: SIP/2.0/TCP\
    \ alice-1.example.net:5060;branch=z9hG4bKprout\n   Max-Forwards: 69\n   To: Bob\
    \ <sip:bob@example.com>;tag=5551212\n   From: Alice <sip:alice@example.net>;tag=8675309\n\
    \   Call-ID: lzksjf8723k@sodk6587\n   CSeq: 1 ACK\n   Route: <sip:psodkfsj+34+kklsL+uJH-Xm816k09Kk@eb.example.com;lr;ob>\n\
    \   Content-Length: 0\n   F27 ACK Proxy B -> Bob's Phone\n   ACK sip:bob@bobphone.example.com\
    \ SIP/2.0\n   Via: SIP/2.0/TLS eb.example.com:5061;branch=z9hG4bKtroubaba\n  \
    \ Via: SIP/2.0/TCP pb.example.com:5060;branch=z9hG4bKbalouba.1\n   Via: SIP/2.0/TCP\
    \ proxya.example.net:5060;branch=z9hG4bKpouet\n   Via: SIP/2.0/TCP alice-1.example.net:5060;branch=z9hG4bKprout\n\
    \   Max-Forwards: 68\n   To: Bob <sip:bob@example.com>;tag=5551212\n   From: Alice\
    \ <sip:alice@example.net>;tag=8675309\n   Call-ID: lzksjf8723k@sodk6587\n   CSeq:\
    \ 1 ACK\n   Content-Length: 0\n   F26' CANCEL Registrar/Authoritative Proxy B\
    \ -> Edge Proxy B\n   CANCEL sip:bob@bobpc.example.com SIP/2.0\n   Via: SIP/2.0/TCP\
    \ pb.example.com:5060;branch=z9hG4bKbalouba.2\n   Max-Forwards: 70\n   To: Bob\
    \ <sip:bob@example.com>\n   From: Alice <sip:alice@example.net>;tag=8675309\n\
    \   Call-ID: lzksjf8723k@sodk6587\n   CSeq: 1 CANCEL\n   Route: <sip:psodkfsj+34+kklsL+uJH-Xm816k09Kk@eb.example.com;lr;ob>\n\
    \   Content-Length: 0\n   F27' CANCEL Edge Proxy B -> Bob's PC Client\n   CANCEL\
    \ sip:bob@bobpc.example.com SIP/2.0\n   Via: SIP/2.0/TCP eb.example.com:5060;branch=z9hG4bKtroubaba\n\
    \   Via: SIP/2.0/TCP pb.example.com:5060;branch=z9hG4bKbalouba.2\n   Max-Forwards:\
    \ 69\n   To: Bob <sip:bob@example.com>\n   From: Alice <sip:alice@example.net>;tag=8675309\n\
    \   Call-ID: lzksjf8723k@sodk6587\n   CSeq: 1 CANCEL\n   Content-Length: 0\n \
    \  F28' 200 (CANCEL) Bob's PC Client -> Edge Proxy B\n   SIP/2.0 200 OK\n   Via:\
    \ SIP/2.0/TCP eb.example.com:5060;branch=z9hG4bKtroubaba\n   Via: SIP/2.0/TCP\
    \ pb.example.com:5060;branch=z9hG4bKbalouba.2\n   To: Bob <sip:bob@example.com>\n\
    \   From: Alice <sip:alice@example.net>;tag=8675309\n   Call-ID: lzksjf8723k@sodk6587\n\
    \   CSeq: 1 CANCEL\n   Content-Length: 0\n   F29' 200 (CANCEL) Edge Proxy B ->\
    \ Registrar/Authoritative Proxy B\n   SIP/2.0 200 OK\n   Via: SIP/2.0/TCP pb.example.com:5060;branch=z9hG4bKbalouba.2\n\
    \   To: Bob <sip:bob@example.com>\n   From: Alice <sip:alice@example.net>;tag=8675309\n\
    \   Call-ID: lzksjf8723k@sodk6587\n   CSeq: 1 CANCEL\n   Content-Length: 0\n \
    \  F30' 487 (INVITE) Bob's PC Client -> Edge Proxy B\n   SIP/2.0 487 Request Terminated\n\
    \   Via: SIP/2.0/TCP eb.example.com:5060;branch=z9hG4bKtroubaba\n   Via: SIP/2.0/TCP\
    \ pb.example.com:5060;branch=z9hG4bKbalouba.2\n   Via: SIP/2.0/TCP proxya.example.net:5060;branch=z9hG4bKpouet\n\
    \   Via: SIP/2.0/TCP alice-1.example.net:5060;branch=z9hG4bKprout\n   To: Bob\
    \ <sip:bob@example.com>\n   From: Alice <sip:alice@example.net>;tag=8675309\n\
    \   Call-ID: lzksjf8723k@sodk6587\n   CSeq: 1 INVITE\n   Content-Length: 0\n \
    \  F31' 487 (INVITE) Edge Proxy B -> Registrar/Authoritative Proxy B\n   SIP/2.0\
    \ 487 Request Terminated\n   Via: SIP/2.0/TCP pb.example.com:5060;branch=z9hG4bKbalouba.2\n\
    \   Via: SIP/2.0/TCP proxya.example.net:5060;branch=z9hG4bKpouet\n   Via: SIP/2.0/TCP\
    \ alice-1.example.net:5060;branch=z9hG4bKprout\n   To: Bob <sip:bob@example.com>\n\
    \   From: Alice <sip:alice@example.net>;tag=8675309\n   Call-ID: lzksjf8723k@sodk6587\n\
    \   CSeq: 1 INVITE\n   Content-Length: 0\n"
- title: 6.4.  Alice Calls Bob's SIP AOR Using TLS
  contents:
  - "6.4.  Alice Calls Bob's SIP AOR Using TLS\n   Bob's registration has already\
    \ occurred as per Section 6.1.\n   The third example is identical to the second\
    \ one, except that Alice\n   uses TLS as the transport for her connection to her\
    \ proxy.  Such an\n   arrangement would be common if Alice's UA supported TLS\
    \ and wanted to\n   use a single connection to the proxy (as would be the case\
    \ when using\n   [RFC5626]).  In the example below, Proxy A is also using TLS\
    \ as a\n   transport to communicate with Outbound Proxy B, but it is not\n   necessarily\
    \ the case.\n   When using a SIP URI in the Request-URI but TLS as a transport\
    \ for\n   sending the request, the Via field indicates TLS.  The Route header\n\
    \   field (if present) typically would use a SIP URI (but it could also\n   be\
    \ a SIPS URI).  The Contact header fields and To and From, however\n   would also\
    \ normally indicate a SIP URI.\n   The call flow would be exactly as per the second\
    \ example\n   (Section 6.3).  The only difference would be that all the Via header\n\
    \   fields would use TLS Via parameters.  The URIs would remain SIP URIs\n   and\
    \ not SIPS URIs.\n"
- title: 7.  Further Considerations
  contents:
  - "7.  Further Considerations\n   SIP [RFC3261] itself introduces some complications\
    \ with using SIPS,\n   for example, when Record-Route is not used.  When a SIPS\
    \ URI is used\n   in a Contact header field in a dialog-initiating request and\
    \ Record-\n   Route is not used, that SIPS URI might not be usable by the other\n\
    \   end.  If the other end does not support SIPS and/or TLS, it will not\n   be\
    \ able to use it.  The last-hop exception is an example of when this\n   can occur.\
    \  In this case, using Record-Route so that the requests are\n   sent through\
    \ proxies can help in making it work.  Another example is\n   that even in a case\
    \ where the Contact header field is a SIPS URI, no\n   Record-Route is used, and\
    \ the far end supports SIPS and TLS, it might\n   still not be possible for the\
    \ far end to establish a TLS connection\n   with the SIP originating end if the\
    \ certificate cannot be validated\n   by the far end.  This could typically be\
    \ the case if the originating\n   end was using server-side authentication as\
    \ described below, or if\n   the originating end is not using a certificate that\
    \ can be validated.\n   TLS itself has a significant impact on how SIPS can be\
    \ used.  Server-\n   side authentication (where the server side provides its certificate\n\
    \   but the client side does not) is typically used between a SIP end-\n   user\
    \ device acting as the TLS client side (e.g., a phone or a\n   personal computer)\
    \ and its SIP server (proxy or registrar) acting as\n   the TLS server side. \
    \ TLS mutual authentication (where both the\n   client side and the server side\
    \ provide their respective\n   certificates) is typically used between SIP servers\
    \ (proxies,\n   registrars), or statically configured devices such as PSTN gateways\n\
    \   or media servers.  In the mutual authentication model, for two\n   entities\
    \ to be able to establish a TLS connection, it is required\n   that both sides\
    \ be able to validate each other's certificates, either\n   by static configuration\
    \ or by being able to recurse to a valid root\n   certificate.  With server-side\
    \ authentication, only the client side\n   is capable of validating the server\
    \ side's certificate, as the client\n   side does not provide a certificate. \
    \ The consequences of all this\n   are that whenever a SIPS URI is used to establish\
    \ a TLS connection,\n   it is expected to be possible for the entity establishing\
    \ the\n   connection (the client) to validate the certificate from the server\n\
    \   side.  For server-side authentication, [RFC5626] is the recommended\n   approach.\
    \  For mutual authentication, one needs to ensure that the\n   architecture of\
    \ the network is such that connections are made between\n   entities that have\
    \ access to each other's certificates.  Record-Route\n   [RFC3261] and Path [RFC3327]\
    \ are very useful in ensuring that\n   previously established TLS connections\
    \ can be reused.  Other\n   mechanisms might also be used in certain circumstances:\
    \ for example,\n   using root certificates that are widely recognized allows for\
    \ more\n   easily created TLS connections.\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   Most of this document can be considered to be\
    \ security considerations\n   since it applies to the usage of the SIPS URI.\n\
    \   The \"last-hop exception\" of [RFC3261] introduced significant\n   potential\
    \ vulnerabilities in SIP, and it has therefore been\n   deprecated by this specification.\n\
    \   Section 26.4.4 of [RFC3261] describes the security considerations for\n  \
    \ the SIPS URI scheme.  These security considerations also applies\n   here, as\
    \ modified by Appendix A.\n"
- title: 9.  IANA Considerations
  contents:
  - "9.  IANA Considerations\n   This specification registers two new warning codes,\
    \ namely, 380 \"SIPS\n   Not Allowed\" and 381 \"SIPS Required\".  The warning\
    \ codes are defined\n   as follows, and have been included in the Warning Codes\
    \ (warn-codes)\n   sub-registry of the SIP Parameters registry available from\n\
    \   http://www.iana.org.\n   380  SIPS Not Allowed: The UAS or proxy cannot process\
    \ the request\n        because the SIPS scheme is not allowed (e.g., because there\
    \ are\n        currently no registered SIPS contacts).\n   381  SIPS Required:\
    \ The UAS or proxy cannot process the request\n        because the SIPS scheme\
    \ is required.\n   Reference: RFC 5630\n   The note in the Warning Codes sub-registry\
    \ is as follows:\n      Warning codes provide information supplemental to the\
    \ status code\n      in SIP response messages.\n"
- title: 10.  Acknowledgments
  contents:
  - "10.  Acknowledgments\n   The author would like to thank Jon Peterson, Cullen\
    \ Jennings,\n   Jonathan Rosenberg, John Elwell, Paul Kyzivat, Eric Rescorla,\
    \ Robert\n   Sparks, Rifaat Shekh-Yusef, Peter Reissner, Tina Tsou, Keith Drage,\n\
    \   Brian Stucker, Patrick Ma, Lavis Zhou, Joel Halpern, Hisham\n   Karthabil,\
    \ Dean Willis, Eric Tremblay, Hans Persson, and Ben Campbell\n   for their careful\
    \ review and input.  Many thanks to Rohan Mahy for\n   helping me with the subtleties\
    \ of [RFC5626].\n"
- title: 11.  References
  contents:
  - '11.  References

    '
- title: 11.1.  Normative References
  contents:
  - "11.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [RFC3261]  Rosenberg, J., Schulzrinne, H., Camarillo, G., Johnston,\n\
    \              A., Peterson, J., Sparks, R., Handley, M., and E.\n           \
    \   Schooler, \"SIP: Session Initiation Protocol\", RFC 3261,\n              June\
    \ 2002.\n   [RFC5246]  Dierks, T. and E. Rescorla, \"The Transport Layer Security\n\
    \              (TLS) Protocol Version 1.2\", RFC 5246, August 2008.\n   [RFC5626]\
    \  Jennings, C., \"Managing Client-Initiated Connections in\n              the\
    \ Session Initiation Protocol (SIP)\", RFC 5626, October\n              2009.\n"
- title: 11.2.  Informative References
  contents:
  - "11.2.  Informative References\n   [RFC2543]  Handley, M., Schulzrinne, H., Schooler,\
    \ E., and J.\n              Rosenberg, \"SIP: Session Initiation Protocol\", RFC\
    \ 2543,\n              March 1999.\n   [RFC3327]  Willis, D. and B. Hoeneisen,\
    \ \"Session Initiation Protocol\n              (SIP) Extension Header Field for\
    \ Registering Non-Adjacent\n              Contacts\", RFC 3327, December 2002.\n\
    \   [RFC3515]  Sparks, R., \"The Session Initiation Protocol (SIP) Refer\n   \
    \           Method\", RFC 3515, April 2003.\n   [RFC3608]  Willis, D. and B. Hoeneisen,\
    \ \"Session Initiation Protocol\n              (SIP) Extension Header Field for\
    \ Service Route Discovery\n              During Registration\", RFC 3608, October\
    \ 2003.\n   [RFC3725]  Rosenberg, J., Peterson, J., Schulzrinne, H., and G.\n\
    \              Camarillo, \"Best Current Practices for Third Party Call\n    \
    \          Control (3pcc) in the Session Initiation Protocol (SIP)\",\n      \
    \        BCP 85, RFC 3725, April 2004.\n   [RFC3891]  Mahy, R., Biggs, B., and\
    \ R. Dean, \"The Session Initiation\n              Protocol (SIP) \"Replaces\"\
    \ Header\", RFC 3891,\n              September 2004.\n   [RFC3893]  Peterson,\
    \ J., \"Session Initiation Protocol (SIP)\n              Authenticated Identity\
    \ Body (AIB) Format\", RFC 3893,\n              September 2004.\n   [RFC3911]\
    \  Mahy, R. and D. Petrie, \"The Session Initiation Protocol\n              (SIP)\
    \ \"Join\" Header\", RFC 3911, October 2004.\n   [RFC4168]  Rosenberg, J., Schulzrinne,\
    \ H., and G. Camarillo, \"The\n              Stream Control Transmission Protocol\
    \ (SCTP) as a Transport\n              for the Session Initiation Protocol (SIP)\"\
    , RFC 4168,\n              October 2005.\n   [RFC4244]  Barnes, M., \"An Extension\
    \ to the Session Initiation\n              Protocol (SIP) for Request History\
    \ Information\", RFC 4244,\n              November 2005.\n   [RFC4474]  Peterson,\
    \ J. and C. Jennings, \"Enhancements for\n              Authenticated Identity\
    \ Management in the Session\n              Initiation Protocol (SIP)\", RFC 4474,\
    \ August 2006.\n   [RFC5627]  Rosenberg, J., \"Obtaining and Using Globally Routable\
    \ User\n              Agent URIs (GRUU) in the Session Initiation Protocol\n \
    \             (SIP)\", RFC 5627, October 2009.\n"
- title: Appendix A.  Bug Fixes for RFC 3261
  contents:
  - "Appendix A.  Bug Fixes for RFC 3261\n   In order to support the material in this\
    \ document, this section makes\n   corrections to RFC 3261.\n   The last sentence\
    \ of the fifth paragraph of Section 8.1.3.5 is\n   replaced by:\n      The client\
    \ SHOULD retry the request, this time, using a SIP URI\n      unless the original\
    \ Request-URI used a SIPS scheme, in which case\n      the client MUST NOT retry\
    \ the request automatically.\n   The fifth paragraph of Section 10.2.1 is replaced\
    \ by:\n      If the Address of Record in the To header field of a REGISTER\n \
    \     request is a SIPS URI, then the UAC MUST also include only SIPS\n      URIs\
    \ in any Contact header field value in the requests.\n   In Section 16.7 on p.\
    \ 112 describing Record-Route, the second\n   paragraph is deleted.\n   The last\
    \ paragraph of Section 19.1 is reworded as follows:\n      A SIPS URI specifies\
    \ that the resource be contacted securely.\n      This means, in particular, that\
    \ TLS is to be used on each hop\n      between the UAC and the resource identified\
    \ by the target SIPS\n      URI.  Any resources described by a SIP URI (...)\n\
    \   In the third paragraph of Section 20.43, the words \"the session\n   description\"\
    \ in the first sentence are replaced with \"SIP\".  Later in\n   the paragraph,\
    \ \"390\" is replaced with \"380\", and \"miscellaneous\n   warnings\" is replaced\
    \ with \"miscellaneous SIP-related warnings\".\n   The second paragraph of Section\
    \ 26.2.2 is reworded as follows:\n      (...)  When used as the Request-URI of\
    \ a request, the SIPS scheme\n      signifies that each hop over which the request\
    \ is forwarded, until\n      the request reaches the resource identified by the\
    \ Request-URI, is\n      secured with TLS.  When used by the originator of a request\
    \ (as\n      would be the case if they employed a SIPS URI as the address-of-\n\
    \      record of the target), SIPS dictates that the entire request path\n   \
    \   to the target domain be so secured.\n   The first paragraph of Section 26.4.4\
    \ is replaced by the following:\n      Actually using TLS on every segment of\
    \ a request path entails that\n      the terminating UAS is reachable over TLS\
    \ (by registering with a\n      SIPS URI as a contact address).  The SIPS scheme\
    \ implies\n      transitive trust.  Obviously, there is nothing that prevents\n\
    \      proxies from cheating.  Thus, SIPS cannot guarantee that TLS usage\n  \
    \    will be truly respected end-to-end on each segment of a request\n      path.\
    \  Note that since many UAs will not accept incoming TLS\n      connections, even\
    \ those UAs that do support TLS will be required\n      to maintain persistent\
    \ TLS connections as described in the TLS\n      limitations section above in\
    \ order to receive requests over TLS as\n      a UAS.\n   The first sentence of\
    \ the third paragraph of Section 26.4.4 is\n   replaced by the following:\n  \
    \    Ensuring that TLS will be used for all of the request segments up\n     \
    \ to the target UAS is somewhat complex.\n   The fourth paragraph of Section 26.4.4\
    \ is deleted.\n   The last sentence of the fifth paragraph of Section 26.4.4 is\n\
    \   reworded as follows:\n      S/MIME or, preferably, [RFC4474] may also be used\
    \ by the\n      originating UAC to help ensure that the original form of the To\n\
    \      header field is carried end-to-end.\n   In the third paragraph of Section\
    \ 27.2, the phrase \"when the failure\n   of the transaction results from a Session\
    \ Description Protocol (SDP)\n   (RFC 2327 [1]) problem\" is deleted.\n   In the\
    \ fifth paragraph of Section 27.2, \"390\" is replaced with \"380\",\n   and \"\
    miscellaneous warnings\" is replaced with \"miscellaneous SIP-\n   related warnings\"\
    .\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Francois Audet\n   Skype Labs\n   EMail: francois.audet@skypelabs.com\n"
