Abstract This document defines an Extensible Markup Language (XML) Schema for video fast update in a tightly controlled environment, developed by Microsoft, Polycom, Radvision and used by multiple vendors.
This document describes a method that has been deployed in Session Initiation Protocol (SIP) based systems over the last three years and is being used across real time interactive applications from different vendors in an interoperable manner.
New implementations are discouraged from using the method described except for backward compatibility purposes.
New implementations are required to use the new Full Intra Request command in the RTP Control Protocol (RTCP) channel.
This document defines an Extensible Markup Language (XML) Schema for video fast update request in a tightly controlled environment, developed by Microsoft, Polycom, Radvision and used by multiple vendors.
Implementation of this schema for interactive video applications in Session Initiation Protocol (SIP)
[5] environments was designed in order to improve user experience.
This mechanism is being used by both end user video conferencing terminals and conferencing servers in shipping products.
This document describes the current method, but new implementations are discouraged from using this method, except for backward compatibility with legacy systems.
Shipping products and new products SHOULD use the Full Intra Request, described in [7].
Sending video fast update using the SIP signaling path, as described in this document, is inferior to using the RTP Control Protocol (RTCP) feedback method [7], since the command flows through all the proxies in the signaling path adding delay to the messages and causing unnecessary overload to the proxies.
RTCP messages flow end to end and not through the signaling proxies.
The RTCP feedback document [7] also adds other required control functions, such as the flow control command, which is missing from this document.
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 [2].
Background SIP typically uses the Real time Transport Protocol (RTP) [6] for the transferring of real time media.
RTP is augmented by a control protocol (RTCP) to allow monitoring of the data delivery in a manner scalable to large multicast networks.
The RTCP feedback mechanism [8] has been introduced in order to improve basic RTCP feedback time in case of loss conditions across different coding schemes.
This technique addresses signaling of loss conditions and the recommended recovery steps.
Just recently, an extension to the feedback mechanism has been proposed [7] to express control operations on media streams as a result of application logic rather than a result of loss conditions.
Note that in the decomposed systems, the implementation of the new mechanism will require proprietary communications between the applications/call control components and the media components.
This document describes a technology that has been deployed in SIP based systems over the last three years and is being used across real time interactive applications from different vendors in an interoperable manner.
This memo documents this technology for the purpose of describing current practice and new implementation MUST use the RTCP
Full Intra Request command specified in the RTCP based codec control messages document[7].
The Video Control Commands Output of a video codec is a frame.
The frame can carry complete information about a picture or about a picture segment.
These frames are known as "Intra" frames.
In order to save bandwidth, other frames can carry only changes relative to previously sent frames.
Frames carrying relative information are known as "Inter" frames.
Based on application logic (such as need to present a new video source), the application needs to have an ability to explicitly request from a remote encoder the complete information about a "full" picture.
An "Intra" frame may be of large size.
In order to prevent causing network congestion, the current media capacity and network conditions MUST be validated before sending an "Intra" frame when receiving a fast update command, defined in this document.
In order to meet the presented requirements, a video primitive is defined by this document.
The following command is sent to the remote encoder:  Video Picture Fast Update 5.
xml version "1.0" encoding "utf 8" ?
:schema id "TightMediaControl" elementFormDefault "qualified" xmlns:xs "http://www.w3.org/2001/XMLSchema"
"general error" type "xs:string" minOccurs "0" maxOccurs "unbounded" /
complexType name "vc primitive"> <xs:sequence
element name "to encoder" type "to encoder" /
element name "stream id" type "xs:string
" minOccurs "0" maxOccurs "unbounded" /
<xs:complexType name "to encoder"> <xs:choice>
<xs:element name "picture fast update"/
Currently, only a single general error primitive is defined.
It MAY be used for indicating errors in free text format.
The general error primitive MAY report problems regarding XML document parsing, inadequate level of media control support, inability to perform the requested action, etc.
The general error primitive MUST NOT be used for the indication of errors other than those related to media control parsing or to resultant execution.
The general error primitive MUST NOT be sent back as a result of getting an error primitive.
When receiving the general error response, the user agent client (UAC) that sent the request SHOULD NOT send further fast update requests in the current dialog.
According to RFC 2976 [3], the only allowable final response to a SIP INFO containing a message body is a 200 OK.
If SIP INFO is used to carry the request, the error message should be carried in a separate INFO request.
The Fast Update Command for the Full Picture
xml version "1.0" encoding "utf 8" ?
> <media control> <vc primitive> <to encoder>
/vc primitive> </media control> 7.2.
If an error occurs during the parsing of the XML document, the following XML document would be sent back to the originator of the original Media Control document.
xml version "1.0" encoding "utf 8" ?
> <media control> <general error
The defined XML document is conveyed using the SIP INFO method [3] with the "Content Type" set to "application/media control xml".
This approach benefits from the SIP built in reliability.
This document registers a new media type.
Application/media control xml Media Type Registration Type name:
media control xml Required parameters:
charset Indicates the character encoding of enclosed XML.
Encoding considerations:   8bit Uses XML, which can employ 8 bit characters, depending on the character encoding used.
See RFC 3023 [4], Section 3.2.
Security considerations specific to uses of this type are discussed in RFC 5168.
RFC 1874 [1] and RFC 3023 [4] discuss security issues common to all uses of XML.
RFC 5168 Applications that use this media type:
This media type is used to convey information regarding media control commands and responses between SIP endpoints particularly for allowing a Video Fast Update intra frame request.
Person and email address to contact for further information: Name:  Roni
Intended usage: LIMITED USE Restrictions on usage: None.
The video control command transported using the method described in the document may cause the sender of the video data to send more data within the allowed bandwidth, as described in Section 4.
This document defines one control message; changing the content of the message will cause the video sender to ignore the request and send an error response.
This may prevent the display of a video stream.
The control message itself does not carry any sensitive information.
An eavesdropper may inject messages or change them, which may lead to either more data on the network or loss of video image.
Using data integrity validation will prevent adding or changing of messages.
If the video media is sent over a secure transport, it is recommended to secure the signaling using TLS as explained in [5].
In most cases, securing the media will require a secure signaling path.
The security considerations of [3] and [5] apply here.
