- title: __initial_text__
  contents:
  - '            Network File System (NFS) Direct Data Placement

    '
- title: Abstract
  contents:
  - "Abstract\n   This document defines the bindings of the various Network File System\n\
    \   (NFS) versions to the Remote Direct Memory Access (RDMA) operations\n   supported\
    \ by the RPC/RDMA transport protocol.  It describes the use\n   of direct data\
    \ placement by means of server-initiated RDMA operations\n   into client-supplied\
    \ buffers for implementations of NFS versions 2,\n   3, 4, and 4.1 over such an\
    \ RDMA transport.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc5667.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2010 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n   This document\
    \ may contain material from IETF Documents or IETF\n   Contributions published\
    \ or made publicly available before November\n   10, 2008.  The person(s) controlling\
    \ the copyright in some of this\n   material may not have granted the IETF Trust\
    \ the right to allow\n   modifications of such material outside the IETF Standards\
    \ Process.\n   Without obtaining an adequate license from the person(s) controlling\n\
    \   the copyright in such materials, this document may not be modified\n   outside\
    \ the IETF Standards Process, and derivative works of it may\n   not be created\
    \ outside the IETF Standards Process, except to format\n   it for publication\
    \ as an RFC or to translate it into languages other\n   than English.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n\
    \      1.1. Requirements Language ......................................2\n  \
    \ 2. Transfers from NFS Client to NFS Server .........................3\n   3.\
    \ Transfers from NFS Server to NFS Client .........................3\n   4. NFS\
    \ Versions 2 and 3 Mapping ....................................4\n   5. NFS Version\
    \ 4 Mapping ...........................................6\n      5.1. NFS Version\
    \ 4 Callbacks ....................................7\n   6. Port Usage Considerations\
    \ .......................................8\n   7. Security Considerations .........................................9\n\
    \   8. Acknowledgments .................................................9\n  \
    \ 9. References ......................................................9\n    \
    \  9.1. Normative References .......................................9\n      9.2.\
    \ Informative References ....................................10\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The Remote Direct Memory Access (RDMA) Transport for Remote\
    \ Procedure\n   Call (RPC) [RFC5666] allows an RPC client application to post\
    \ buffers\n   in a Chunk list for specific arguments and results from an RPC call.\n\
    \   The RDMA transport header conveys this list of client buffer\n   addresses\
    \ to the server where the application can associate them with\n   client data\
    \ and use RDMA operations to transfer the results directly\n   to and from the\
    \ posted buffers on the client.  The client and server\n   must agree on a consistent\
    \ mapping of posted buffers to RPC.  This\n   document details the mapping for\
    \ each version of the NFS protocol\n   [RFC1094] [RFC1813] [RFC3530] [RFC5661].\n"
- title: 1.1.  Requirements Language
  contents:
  - "1.1.  Requirements Language\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n"
- title: 2.  Transfers from NFS Client to NFS Server
  contents:
  - "2.  Transfers from NFS Client to NFS Server\n   The RDMA Read list, in the RDMA\
    \ transport header, allows an RPC\n   client to marshal RPC call data selectively.\
    \  Large chunks of data,\n   such as the file data of an NFS WRITE request, MAY\
    \ be referenced by\n   an RDMA Read list and be moved efficiently and directly\
    \ placed by an\n   RDMA Read operation initiated by the server.\n   The process\
    \ of identifying these chunks for the RDMA Read list can be\n   implemented entirely\
    \ within the RPC layer.  It is transparent to the\n   upper-level protocol, such\
    \ as NFS.  For instance, the file data\n   portion of an NFS WRITE request can\
    \ be selected as an RDMA \"chunk\"\n   within the eXternal Data Representation\
    \ (XDR) marshaling code of RPC\n   based on a size criterion, independently of\
    \ the NFS protocol layer.\n   The XDR unmarshaling on the receiving system can\
    \ identify the\n   correspondence between Read chunks and protocol elements via\
    \ the XDR\n   position value encoded in the Read chunk entry.\n   RPC RDMA Read\
    \ chunks are employed by this NFS mapping to convey\n   specific NFS data to the\
    \ server in a manner that may be directly\n   placed.  The following sections\
    \ describe this mapping for versions of\n   the NFS protocol.\n"
- title: 3.  Transfers from NFS Server to NFS Client
  contents:
  - "3.  Transfers from NFS Server to NFS Client\n   The RDMA Write list, in the RDMA\
    \ transport header, allows the client\n   to post one or more buffers into which\
    \ the server will RDMA Write\n   designated result chunks directly.  If the client\
    \ sends a null Write\n   list, then results from the RPC call will be returned\
    \ either as an\n   inline reply, as chunks in an RDMA Read list of server-posted\n\
    \   buffers, or in a client-posted reply buffer.\n   Each posted buffer in a Write\
    \ list is represented as an array of\n   memory segments.  This allows the client\
    \ some flexibility in\n   submitting discontiguous memory segments into which\
    \ the server will\n   scatter the result.  Each segment is described by a triplet\n\
    \   consisting of the segment handle or steering tag (STag), segment\n   length,\
    \ and memory address or offset.\n      struct xdr_rdma_segment {\n         uint32\
    \ handle;    /* Registered memory handle */\n         uint32 length;    /* Length\
    \ of the chunk in bytes */\n         uint64 offset;    /* Chunk virtual address\
    \ or offset */\n      };\n      struct xdr_write_chunk {\n         struct xdr_rdma_segment\
    \ target<>;\n      };\n      struct xdr_write_list {\n         struct xdr_write_chunk\
    \ entry;\n         struct xdr_write_list  *next;\n      };\n   The sum of the\
    \ segment lengths yields the total size of the buffer,\n   which MUST be large\
    \ enough to accept the result.  If the buffer is\n   too small, the server MUST\
    \ return an XDR encode error.  The server\n   MUST return the result data for\
    \ a posted buffer by progressively\n   filling its segments, perhaps leaving some\
    \ trailing segments unfilled\n   or partially full if the size of the result is\
    \ less than the total\n   size of the buffer segments.\n   The server returns\
    \ the RDMA Write list to the client with the segment\n   length fields overwritten\
    \ to indicate the amount of data RDMA written\n   to each segment.  Results returned\
    \ by direct placement MUST NOT be\n   returned by other methods, e.g., by Read\
    \ chunk list or inline.  If no\n   result data at all is returned for the element,\
    \ the server places no\n   data in the buffer(s), but does return zeros in the\
    \ segment length\n   fields corresponding to the result.\n   The RDMA Write list\
    \ allows the client to provide multiple result\n   buffers -- each buffer maps\
    \ to a specific result in the reply.  The\n   NFS client and server implementations\
    \ agree by specifying the mapping\n   of results to buffers for each RPC procedure.\
    \  The following sections\n   describe this mapping for versions of the NFS protocol.\n\
    \   Through the use of RDMA Write lists in NFS requests, it is not\n   necessary\
    \ to employ the RDMA Read lists in the NFS replies, as\n   described in the RPC/RDMA\
    \ protocol.  This enables more efficient\n   operation, by avoiding the need for\
    \ the server to expose buffers for\n   RDMA, and also avoiding \"RDMA_DONE\" exchanges.\
    \  Clients MAY\n   additionally employ RDMA Reply chunks to receive entire messages,\
    \ as\n   described in [RFC5666].\n"
- title: 4.  NFS Versions 2 and 3 Mapping
  contents:
  - "4.  NFS Versions 2 and 3 Mapping\n   A single RDMA Write list entry MAY be posted\
    \ by the client to receive\n   either the opaque file data from a READ request\
    \ or the pathname from\n   a READLINK request.  The server MUST ignore a Write\
    \ list for any\n   other NFS procedure, as well as any Write list entries beyond\
    \ the\n   first in the list.\n   Similarly, a single RDMA Read list entry MAY\
    \ be posted by the client\n   to supply the opaque file data for a WRITE request\
    \ or the pathname\n   for a SYMLINK request.  The server MUST ignore any Read\
    \ list for\n   other NFS procedures, as well as additional Read list entries beyond\n\
    \   the first in the list.\n   Because there are no NFS version 2 or 3 requests\
    \ that transfer bulk\n   data in both directions, it is not necessary to post\
    \ requests\n   containing both Write and Read lists.  Any unneeded Read or Write\n\
    \   lists are ignored by the server.\n   In the case where the outgoing request\
    \ or expected incoming reply is\n   larger than the maximum size supported on\
    \ the connection, it is\n   possible for the RPC layer to post the entire message\
    \ or result in a\n   special \"RDMA_NOMSG\" message type that is transferred entirely\
    \ by\n   RDMA.  This is implemented in RPC, below NFS, and therefore has no\n\
    \   effect on the message contents.\n   Non-RDMA (inline) WRITE transfers MAY\
    \ OPTIONALLY employ the\n   \"RDMA_MSGP\" padding method described in the RPC/RDMA\
    \ protocol, if the\n   appropriate value for the server is known to the client.\
    \  Padding\n   allows the opaque file data to arrive at the server in an aligned\n\
    \   fashion, which may improve server performance.\n   The NFS version 2 and 3\
    \ protocols are frequently limited in practice\n   to requests containing less\
    \ than or equal to 8 kilobytes and 32\n   kilobytes of data, respectively.  In\
    \ these cases, it is often\n   practical to support basic operation without employing\
    \ a\n   configuration exchange as discussed in [RFC5666].  The server MUST\n \
    \  post buffers large enough to receive the largest possible incoming\n   message\
    \ (approximately 12 KB for NFS version 2, or 36 KB for NFS\n   version 3, would\
    \ be vastly sufficient), and the client can post\n   buffers large enough to receive\
    \ replies based on the \"rsize\" it is\n   using to the server, plus a fixed overhead\
    \ for the RPC and NFS\n   headers.  Because the server MUST NOT return data in\
    \ excess of this\n   size, the client can be assured of the adequacy of its posted\
    \ buffer\n   sizes.\n   Flow control is handled dynamically by the RPC RDMA protocol,\
    \ and\n   write padding is OPTIONAL and therefore MAY remain unused.\n   Alternatively,\
    \ if the server is administratively configured to values\n   appropriate for all\
    \ its clients, the same assurance of\n   interoperability within the domain can\
    \ be made.\n   The use of a configuration protocol with NFS v2 and v3 is therefore\n\
    \   OPTIONAL.  Employing a configuration exchange may allow some\n   advantage\
    \ to server resource management through accurately sizing\n   buffers, enabling\
    \ the server to know exactly how many RDMA Reads may\n   be in progress at once\
    \ on the client connection, and enabling client\n   write padding, which may be\
    \ desirable for certain servers when RDMA\n   Read is impractical.\n"
- title: 5.  NFS Version 4 Mapping
  contents:
  - "5.  NFS Version 4 Mapping\n   This specification applies to the first minor version\
    \ of NFS version\n   4 (NFSv4.0) and any subsequent minor versions that do not\
    \ override\n   this mapping.\n   The Write list MUST be considered only for the\
    \ COMPOUND procedure.\n   This procedure returns results from a sequence of operations.\
    \  Only\n   the opaque file data from an NFS READ operation and the pathname from\n\
    \   a READLINK operation MUST utilize entries from the Write list.\n   If there\
    \ is no Write list, i.e., the list is null, then any READ or\n   READLINK operations\
    \ in the COMPOUND MUST return their data inline.\n   The NFSv4.0 client MUST ensure\
    \ in this case that any result of its\n   READ and READLINK requests will fit\
    \ within its receive buffers, in\n   order to avoid a resulting RDMA transport\
    \ error upon transfer.  The\n   server is not required to detect this.\n   The\
    \ first entry in the Write list MUST be used by the first READ or\n   READLINK\
    \ in the COMPOUND request.  The next Write list entry is used\n   by the next\
    \ READ or READLINK, and so on.  If there are more READ or\n   READLINK operations\
    \ than Write list entries, then any remaining\n   operations MUST return their\
    \ results inline.\n   If a Write list entry is presented, then the corresponding\
    \ READ or\n   READLINK MUST return its data via an RDMA Write to the buffer\n\
    \   indicated by the Write list entry.  If the Write list entry has zero\n   RDMA\
    \ segments, or if the total size of the segments is zero, then the\n   corresponding\
    \ READ or READLINK operation MUST return its result\n   inline.\n   The following\
    \ example shows an RDMA Write list with three posted\n   buffers A, B, and C.\
    \  The designated operations in the compound\n   request, READ and READLINK, consume\
    \ the posted buffers by writing\n   their results back to each buffer.\n     \
    \ RDMA Write list:\n         A --> B --> C\n      Compound request:\n        \
    \ PUTFH LOOKUP READ PUTFH LOOKUP READLINK PUTFH LOOKUP READ\n                \
    \       |                   |                   |\n                       v  \
    \                 v                   v\n                       A            \
    \       B                   C\n   If the client does not want to have the READLINK\
    \ result returned\n   directly, then it provides a zero-length array of segment\
    \ triplets\n   for buffer B or sets the values in the segment triplet for buffer\
    \ B\n   to zeros so that the READLINK result MUST be returned inline.\n   The\
    \ situation is similar for RDMA Read lists sent by the client and\n   applies\
    \ to the NFSv4.0 WRITE and SYMLINK procedures as for v3.\n   Additionally, inline\
    \ segments too large to fit in posted buffers MAY\n   be transferred in special\
    \ \"RDMA_NOMSG\" messages.\n   Non-RDMA (inline) WRITE transfers MAY OPTIONALLY\
    \ employ the\n   \"RDMA_MSGP\" padding method described in the RPC/RDMA protocol,\
    \ if the\n   appropriate value for the server is known to the client.  Padding\n\
    \   allows the opaque file data to arrive at the server in an aligned\n   fashion,\
    \ which may improve server performance.  In order to ensure\n   accurate alignment\
    \ for all data, it is likely that the client will\n   restrict its use of OPTIONAL\
    \ padding to COMPOUND requests containing\n   only a single WRITE operation.\n\
    \   Unlike NFS versions 2 and 3, the maximum size of an NFS version 4\n   COMPOUND\
    \ is not bounded, even when RDMA chunks are in use.  While it\n   might appear\
    \ that a configuration protocol exchange (such as the one\n   described in [RFC5666])\
    \ would help, in fact the layering issues\n   involved in building COMPOUNDs by\
    \ NFS make such a mechanism\n   unworkable.\n   However, typical NFS version 4\
    \ clients rarely issue such problematic\n   requests.  In practice, they behave\
    \ in much more predictable ways, in\n   fact most still support the traditional\
    \ rsize/wsize mount parameters.\n   Therefore, most NFS version 4 clients function\
    \ over RPC/RDMA in the\n   same way as NFS versions 2 and 3, operationally.\n\
    \   There are however advantages to allowing both client and server to\n   operate\
    \ with prearranged size constraints, for example, use of the\n   sizes to better\
    \ manage the server's response cache.  An extension to\n   NFS version 4 supporting\
    \ a more comprehensive exchange of upper-layer\n   parameters is part of [RFC5661].\n"
- title: 5.1.  NFS Version 4 Callbacks
  contents:
  - "5.1.  NFS Version 4 Callbacks\n   The NFS version 4 protocols support server-initiated\
    \ callbacks to\n   selected clients, in order to notify them of events such as\
    \ recalled\n   delegations, etc.  These callbacks present no particular issue\
    \ to\n   being framed over RPC/RDMA, since such callbacks do not carry bulk\n\
    \   data such as NFS READ or NFS WRITE.  They MAY be transmitted inline\n   via\
    \ RDMA_MSG, or if the callback message or its reply overflow the\n   negotiated\
    \ buffer sizes for a callback connection, they MAY be\n   transferred via the\
    \ RDMA_NOMSG method as described above for other\n   exchanges.\n   One special\
    \ case is noteworthy: in NFS version 4.1, the callback\n   channel is optionally\
    \ negotiated to be on the same connection as one\n   used for client requests.\
    \  In this case, and because the transaction\n   ID (XID) is present in the RPC/RDMA\
    \ header, the client MUST ascertain\n   whether the message is in fact an RPC\
    \ REPLY, and therefore a reply to\n   a prior request and carrying its XID, before\
    \ processing it as such.\n   By the same token, the server MUST ascertain whether\
    \ an incoming\n   message on such a callback-eligible connection is an RPC CALL,\
    \ before\n   optionally processing the XID.\n   In the callback case, the XID\
    \ present in the RPC/RDMA header will\n   potentially have any value, which may\
    \ (or may not) collide with an\n   XID used by the client for a previous or future\
    \ request.  The client\n   and server MUST inspect the RPC component of the message\
    \ to determine\n   its potential disposition as either an RPC CALL or RPC REPLY,\
    \ prior\n   to processing this XID, and MUST NOT reject or accept it without also\n\
    \   determining the proper context.\n"
- title: 6.  Port Usage Considerations
  contents:
  - "6.  Port Usage Considerations\n   NFS use of direct data placement introduces\
    \ a need for an additional\n   NFS port number assignment for networks that share\
    \ traditional UDP\n   and TCP port spaces with RDMA services.  The iWARP [RFC5041]\n\
    \   [RFC5040] protocol is such an example (InfiniBand is not).\n   NFS servers\
    \ for versions 2 and 3 [RFC1094] [RFC1813] traditionally\n   listen for clients\
    \ on UDP and TCP port 2049, and additionally, they\n   register these with the\
    \ portmapper and/or rpcbind [RFC1833] service.\n   However, [RFC3530] requires\
    \ NFS servers for version 4 to listen on\n   TCP port 2049, and they are not required\
    \ to register.\n   An NFS version 2 or version 3 server supporting RPC/RDMA on\
    \ such a\n   network and registering itself with the RPC portmapper MAY choose\
    \ an\n   arbitrary port, or MAY use the alternative well-known port number for\n\
    \   its RPC/RDMA service.  The chosen port MAY be registered with the RPC\n  \
    \ portmapper under the netid assigned by the requirement in [RFC5666].\n   An\
    \ NFS version 4 server supporting RPC/RDMA on such a network MUST\n   use the\
    \ alternative well-known port number for its RPC/RDMA service.\n   Clients SHOULD\
    \ connect to this well-known port without consulting the\n   RPC portmapper (as\
    \ for NFSv4/TCP).\n   The port number assigned to an NFS service over an RPC/RDMA\
    \ transport\n   is available from the IANA port registry [RFC3232].\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   The RDMA transport for RPC [RFC5666] supports\
    \ all RPC [RFC5531]\n   security models, including RPCSEC_GSS [RFC2203] security\
    \ and link-\n   level security.  The choice of RDMA Read and RDMA Write to return\
    \ RPC\n   argument and results, respectively, does not affect this, since it\n\
    \   only changes the method of data transfer.  Specifically, the\n   requirements\
    \ of [RFC5666] ensure that this choice does not introduce\n   new vulnerabilities.\n\
    \   Because this document defines only the binding of the NFS protocols\n   atop\
    \ [RFC5666], all relevant security considerations are therefore to\n   be described\
    \ at that layer.\n"
- title: 8.  Acknowledgments
  contents:
  - "8.  Acknowledgments\n   The authors would like to thank Dave Noveck and Chet\
    \ Juszczak for\n   their contributions to this document.\n"
- title: 9.  References
  contents:
  - '9.  References

    '
- title: 9.1.  Normative References
  contents:
  - "9.1.  Normative References\n   [RFC1094]  Sun Microsystems, \"NFS: Network File\
    \ System Protocol\n              specification\", RFC 1094, March 1989.\n   [RFC1813]\
    \  Callaghan, B., Pawlowski, B., and P. Staubach, \"NFS\n              Version\
    \ 3 Protocol Specification\", RFC 1813, June 1995.\n   [RFC1833]  Srinivasan,\
    \ R., \"Binding Protocols for ONC RPC Version 2\",\n              RFC 1833, August\
    \ 1995.\n   [RFC2119]  Bradner, S., \"Key words for use in RFCs to Indicate\n\
    \              Requirement Levels\", BCP 14, RFC 2119, March 1997.\n   [RFC2203]\
    \  Eisler, M., Chiu, A., and L. Ling, \"RPCSEC_GSS Protocol\n              Specification\"\
    , RFC 2203, September 1997.\n   [RFC3530]  Shepler, S., Callaghan, B., Robinson,\
    \ D., Thurlow, R.,\n              Beame, C., Eisler, M., and D. Noveck, \"Network\
    \ File System\n              (NFS) version 4 Protocol\", RFC 3530, April 2003.\n\
    \   [RFC5531]  Thurlow, R., \"RPC: Remote Procedure Call Protocol\n          \
    \    Specification Version 2\", RFC 5531, May 2009.\n   [RFC5661]  Shepler, S.,\
    \ Ed., Eisler, M., Ed., and D. Noveck, Ed.,\n              \"Network File System\
    \ (NFS) Version 4 Minor Version 1\n              Protocol\", RFC 5661, January\
    \ 2010.\n"
- title: 9.2.  Informative References
  contents:
  - "9.2.  Informative References\n   [RFC3232]  Reynolds, J., Ed., \"Assigned Numbers:\
    \ RFC 1700 is Replaced\n              by an On-line Database\", RFC 3232, January\
    \ 2002.\n   [RFC5040]  Recio, R., Metzler, B., Culley, P., Hilland, J., and D.\n\
    \              Garcia, \"A Remote Direct Memory Access Protocol\n            \
    \  Specification\", RFC 5040, October 2007.\n   [RFC5041]  Shah, H., Pinkerton,\
    \ J., Recio, R., and P. Culley, \"Direct\n              Data Placement over Reliable\
    \ Transports\", RFC 5041,\n              October 2007.\n   [RFC5666]  Talpey,\
    \ T. and B. Callaghan, \"Remote Direct Memory Access\n              Transport\
    \ for Remote Procedure Call\", RFC 5666, January\n              2010.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Tom Talpey\n   170 Whitman St.\n   Stow, MA 01775 USA\n\
    \   EMail: tmtalpey@gmail.com\n   Brent Callaghan\n   Apple Computer, Inc.\n \
    \  MS: 302-4K\n   2 Infinite Loop\n   Cupertino, CA 95014 USA\n   EMail: brentc@apple.com\n"
