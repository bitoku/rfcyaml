- title: __initial_text__
  contents:
  - '           End-to-end Performance Implications of Slow Links

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet Best Current Practices\
    \ for the\n   Internet Community, and requests discussion and suggestions for\n\
    \   improvements.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2001).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document makes performance-related recommendations for users\
    \ of\n   network paths that traverse \"very low bit-rate\" links.\n   \"Very low\
    \ bit-rate\" implies \"slower than we would like\".  This\n   recommendation may\
    \ be useful in any network where hosts can saturate\n   available bandwidth, but\
    \ the design space for this recommendation\n   explicitly includes connections\
    \ that traverse 56 Kb/second modem\n   links or 4.8 Kb/second wireless access\
    \ links - both of which are\n   widely deployed.\n   This document discusses general-purpose\
    \ mechanisms.  Where\n   application-specific mechanisms can outperform the relevant\
    \ general-\n   purpose mechanism, we point this out and explain why.\n   This\
    \ document has some recommendations in common with RFC 2689,\n   \"Providing integrated\
    \ services over low-bitrate links\", especially in\n   areas like header compression.\
    \  This document focuses more on\n   traditional data applications for which \"\
    best-effort delivery\" is\n   appropriate.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.0 Introduction .................................................\
    \  2\n   2.0 Description of Optimizations .................................  3\n\
    \           2.1 Header Compression Alternatives ......................  3\n  \
    \         2.2 Payload Compression Alternatives .....................  5\n    \
    \       2.3 Choosing MTU sizes ...................................  5\n      \
    \     2.4 Interactions with TCP Congestion Control [RFC2581] ...  6\n        \
    \   2.5 TCP Buffer Auto-tuning ...............................  9\n          \
    \ 2.6 Small Window Effects ................................. 10\n   3.0 Summary\
    \ of Recommended Optimizations ......................... 10\n   4.0 Topics For\
    \ Further Work ...................................... 12\n   5.0 Security Considerations\
    \ ...................................... 12\n   6.0 IANA Considerations ..........................................\
    \ 13\n   7.0 Acknowledgements ............................................. 13\n\
    \   8.0 References ................................................... 13\n  \
    \ Authors' Addresses ............................................... 16\n   Full\
    \ Copyright Statement ......................................... 17\n"
- title: 1.0 Introduction
  contents:
  - "1.0 Introduction\n   The Internet protocol stack was designed to operate in a\
    \ wide range\n   of link speeds, and has met this design goal with only a limited\n\
    \   number of enhancements (for example, the use of TCP window scaling as\n  \
    \ described in \"TCP Extensions for High Performance\" [RFC1323] for\n   very-high-bandwidth\
    \ connections).\n   Pre-World Wide Web application protocols tended to be either\n\
    \   interactive applications sending very little data (e.g., Telnet) or\n   bulk\
    \ transfer applications that did not require interactive response\n   (e.g., File\
    \ Transfer Protocol, Network News).  The World Wide Web has\n   given us traffic\
    \ that is both interactive and often \"bulky\",\n   including images, sound, and\
    \ video.\n   The World Wide Web has also popularized the Internet, so that there\n\
    \   is significant interest in accessing the Internet over link speeds\n   that\
    \ are much \"slower\" than typical office network speeds.  In fact,\n   a significant\
    \ proportion of the current Internet users is connected\n   to the Internet over\
    \ a relatively slow last-hop link.  In future, the\n   number of such users is\
    \ likely to increase rapidly as various mobile\n   devices are foreseen to to\
    \ be attached to the Internet over slow\n   wireless links.\n   In order to provide\
    \ the best interactive response for these \"bulky\"\n   transfers, implementors\
    \ may wish to minimize the number of bits\n   actually transmitted over these\
    \ \"slow\" connections.  There are two\n   areas that can be considered - compressing\
    \ the bits that make up the\n   overhead associated with the connection, and compressing\
    \ the bits\n   that make up the payload being transported over the connection.\n\
    \   In addition, implementors may wish to consider TCP receive window\n   settings\
    \ and queuing mechanisms as techniques to improve performance\n   over low-speed\
    \ links.  While these techniques do not involve protocol\n   changes, they are\
    \ included in this document for completeness.\n"
- title: 2.0 Description of Optimizations
  contents:
  - "2.0 Description of Optimizations\n   This section describes optimizations which\
    \ have been suggested for\n   use in situations where hosts can saturate their\
    \ links.  The next\n   section summarizes recommendations about the use of these\n\
    \   optimizations.\n"
- title: 2.1 Header Compression Alternatives
  contents:
  - "2.1 Header Compression Alternatives\n   Mechanisms for TCP and IP header compression\
    \ defined in [RFC1144,\n   RFC2507, RFC2508, RFC2509, RFC3095] provide the following\
    \ benefits:\n      -  Improve interactive response time\n      -  Decrease header\
    \ overhead (for a typical dialup MTU of 296\n         bytes, the overhead of TCP/IP\
    \ headers can decrease from about\n         13 percent with typical 40-byte headers\
    \ to 1-1.5 percent with\n         with 3-5 byte compressed headers, for most packets).\
    \  This\n         enables use of small packets for delay-sensitive low data-rate\n\
    \         traffic and good line efficiency for bulk data even with small\n   \
    \      segment sizes (for reasons to use a small MTU on slow links,\n        \
    \ see section 2.3)\n      -  Many slow links today are wireless and tend to be\
    \ significantly\n         lossy.  Header compression reduces packet loss rate\
    \ over lossy\n         links (simply because shorter transmission times expose\
    \ packets\n         to fewer events that cause loss).\n   [RFC1144] header compression\
    \ is a Proposed Standard for TCP Header\n   compression that is widely deployed.\
    \  Unfortunately it is vulnerable\n   on lossy links, because even a single bit\
    \ error results in loss of\n   synchronization between the compressor and decompressor.\
    \  It uses TCP\n   timeouts to detect a loss of such synchronization, but these\
    \ errors\n   result in loss of data (up to a full TCP window), delay of a full\n\
    \   RTO, and unnecessary slow-start.\n   A more recent header compression proposal\
    \ [RFC2507] includes an\n   explicit request for retransmission of an uncompressed\
    \ packet to\n   allow resynchronization without waiting for a TCP timeout (and\n\
    \   executing congestion avoidance procedures).  This works much better\n   on\
    \ links with lossy characteristics.\n   The above scheme ceases to perform well\
    \ under conditions as extreme\n   as those of many cellular links (error conditions\
    \ of 1e-3 or 1e-2 and\n   round trip times over 100 ms.).  For these cases, the\
    \ 'Robust Header\n   Compression' working group has developed ROHC [RFC3095].\
    \  Extensions\n   of ROHC to support compression of TCP headers are also under\n\
    \   development.\n   [RFC1323] defines a \"TCP Timestamp\" option, used to prevent\n\
    \   \"wrapping\" of the TCP sequence number space on high-speed links, and\n \
    \  to improve TCP RTT estimates by providing unambiguous TCP roundtrip\n   timings.\
    \  Use of TCP timestamps prevents header compression, because\n   the timestamps\
    \ are sent as TCP options.  This means that each\n   timestamped header has TCP\
    \ options that differ from the previous\n   header, and headers with changed TCP\
    \ options are always sent\n   uncompressed.  In addition, timestamps do not seem\
    \ to have much of an\n   impact on RTO estimation [AlPa99].\n   Nevertheless,\
    \ the ROHC working group is developing schemes to\n   compress TCP headers, including\
    \ options such as timestamps and\n   selective acknowledgements.\n   Recommendation:\
    \ Implement [RFC2507], in particular as it relates to\n   IPv4 tunnels and Minimal\
    \ Encapsulation for Mobile IP, as well as TCP\n   header compression for lossy\
    \ links and links that reorder packets.\n   PPP capable devices should implement\
    \ \"IP Header Compression over PPP\"\n   [RFC2509].  Robust Header Compression\
    \ [RFC3095] is recommended for\n   extremely slow links with very high error rates\
    \ (see above), but\n   implementors should judge if its complexity is justified\
    \ (perhaps by\n   the cost of the radio frequency resources).\n   [RFC1144] header\
    \ compression should only be enabled when operating\n   over reliable \"slow\"\
    \ links.\n   Use of TCP Timestamps [RFC1323] is not recommended with these\n \
    \  connections, because it complicates header compression.  Even though\n   the\
    \ Robust Header Compression (ROHC) working group is developing\n   specifications\
    \ to remedy this, those mechanisms are not yet fully\n   developed nor deployed,\
    \ and may not be generally justifiable.\n   Furthermore, connections traversing\
    \ \"slow\" links do not require\n   protection against TCP sequence-number wrapping.\n"
- title: 2.2 Payload Compression Alternatives
  contents:
  - "2.2 Payload Compression Alternatives\n   Compression of IP payloads is also desirable\
    \ on \"slow\" network links.\n   \"IP Payload Compression Protocol (IPComp)\"\
    \ [RFC2393] defines a\n   framework where common compression algorithms can be\
    \ applied to\n   arbitrary IP segment payloads.\n   IP payload compression is\
    \ something of a niche optimization.  It is\n   necessary because IP-level security\
    \ converts IP payloads to random\n   bitstreams, defeating commonly-deployed link-layer\
    \ compression\n   mechanisms which are faced with payloads that have no redundant\n\
    \   \"information\" that can be more compactly represented.\n   However, many\
    \ IP payloads are already compressed (images, audio,\n   video, \"zipped\" files\
    \ being transferred), or are already encrypted\n   above the IP layer (e.g., SSL\
    \ [SSL]/TLS [RFC2246]).  These payloads\n   will not \"compress\" further, limiting\
    \ the benefit of this\n   optimization.\n   For uncompressed HTTP payload types,\
    \ HTTP/1.1 [RFC2616] also includes\n   Content-Encoding and Accept-Encoding headers,\
    \ supporting a variety of\n   compression algorithms for common compressible MIME\
    \ types like\n   text/plain.  This leaves only the HTTP headers themselves\n \
    \  uncompressed.\n   In general, application-level compression can often outperform\n\
    \   IPComp, because of the opportunity to use compression dictionaries\n   based\
    \ on knowledge of the specific data being compressed.\n   Extensive use of application-level\
    \ compression techniques will reduce\n   the need for IPComp, especially for WWW\
    \ users.\n   Recommendation: IPComp may optionally be implemented.\n"
- title: 2.3 Choosing MTU Sizes
  contents:
  - "2.3 Choosing MTU Sizes\n   There are several points to keep in mind when choosing\
    \ an MTU for\n   low-speed links.\n   First, if a full-length MTU occupies a link\
    \ for longer than the\n   delayed ACK timeout (typically 200 milliseconds, but\
    \ may be up to 500\n   milliseconds), this timeout will cause an ACK to be generated\
    \ for\n   every segment, rather than every second segment, as occurs with most\n\
    \   implementations of the TCP delayed ACK algorithm.\n   Second, \"relatively\
    \ large\" MTUs, which take human-perceptible amounts\n   of time to be transmitted\
    \ into the network, create human-perceptible\n   delays in other flows using the\
    \ same link.  [RFC1144] considers\n   100-200 millisecond delays as human-perceptible.\
    \  The convention of\n   choosing 296-byte MTUs (with header compression enabled)\
    \ for dialup\n   access is a compromise that limits the maximum link occupancy\
    \ delay\n   with full-length MTUs close to 200 milliseconds on 9.6 Kb/second\n\
    \   links.\n   Third, on last-hop links using a larger link MTU size, and therefore\n\
    \   larger MSS, would allow a TCP sender to increase its congestion\n   window\
    \ faster in bytes than when using a smaller MTU size (and a\n   smaller MSS).\
    \  However, with a smaller MTU size, and a smaller MSS\n   size, the congestion\
    \ window, when measured in segments, increases\n   more quickly than it would\
    \ with a larger MSS size.  Connections using\n   smaller MSS sizes are more likely\
    \ to be able to send enough segments\n   to generate three duplicate acknowledgements,\
    \ triggering fast\n   retransmit/fast recovery when packet losses are encountered.\
    \  Hence,\n   a smaller MTU size is useful for slow links with lossy\n   characteristics.\n\
    \   Fourth, using a smaller MTU size also decreases the queuing delay of\n   a\
    \ TCP flow (and thereby RTT) compared to use of larger MTU size with\n   the same\
    \ number of packets in a queue.  This means that a TCP flow\n   using a smaller\
    \ segment size and traversing a slow link is able to\n   inflate the congestion\
    \ window (in number of segments) to a larger\n   value while experiencing the\
    \ same queuing delay.\n   Finally, some networks charge for traffic on a per-packet\
    \ basis, not\n   on a per-kilobyte basis.  In these cases, connections using a\
    \ larger\n   MTU may be charged less than connections transferring the same number\n\
    \   of bytes using a smaller MTU.\n   Recommendation: If it is possible to do\
    \ so, MTUs should be chosen\n   that do not monopolize network interfaces for\
    \ human-perceptible\n   amounts of time, and implementors should not chose MTUs\
    \ that will\n   occupy a network interface for significantly more than 100-200\n\
    \   milliseconds.\n"
- title: 2.4 Interactions with TCP Congestion Control [RFC2581]
  contents:
  - "2.4 Interactions with TCP Congestion Control [RFC2581]\n   In many cases, TCP\
    \ connections that traverse slow links have the slow\n   link as an \"access\"\
    \ link, with higher-speed links in use for most of\n   the connection path.  One\
    \ common configuration might be a laptop\n   computer using dialup access to a\
    \ terminal server (a last-hop\n   router), with an HTTP server on a high-speed\
    \ LAN \"behind\" the\n   terminal server.\n   In this case, the HTTP server may\
    \ be able to place packets on its\n   directly-attached high-speed LAN at a higher\
    \ rate than the last-hop\n   router can forward them on the low-speed link.  When\
    \ the last-hop\n   router falls behind, it will be unable to buffer the traffic\
    \ intended\n   for the low-speed link, and will become a point of congestion and\n\
    \   begin to drop the excess packets.  In particular, several packets may\n  \
    \ be dropped in a single transmission window when initial slow start\n   overshoots\
    \ the last-hop router buffer.\n   Although packet loss is occurring, it isn't\
    \ detected at the TCP\n   sender until one RTT time after the router buffer space\
    \ is exhausted\n   and the first packet is dropped.  This late congestion signal\
    \ allows\n   the congestion window to increase up to double the size it was at\
    \ the\n   time the first packet was dropped at the router.\n   If the link MTU\
    \ is large enough to take more than the delayed ACK\n   timeout interval to transmit\
    \ a packet, an ACK is sent for every\n   segment and the congestion window is\
    \ doubled in a single RTT.  If a\n   smaller link MTU is in use and delayed ACKs\
    \ can be utilized, the\n   congestion window increases by a factor of 1.5 in one\
    \ RTT.  In both\n   cases the sender continues transmitting packets well beyond\
    \ the\n   congestion point of the last-hop router, resulting in multiple packet\n\
    \   losses in a single window.\n   The self-clocking nature of TCP's slow start\
    \ and congestion avoidance\n   algorithms prevent this buffer overrun from continuing.\
    \  In addition,\n   these algorithms allow senders to \"probe\" for available\
    \ bandwidth -\n   cycling through an increasing rate of transmission until loss\
    \ occurs,\n   followed by a dramatic (50-percent) drop in transmission rate. \
    \ This\n   happens when a host directly connected to a low-speed link offers an\n\
    \   advertised window that is unrealistically large for the low-speed\n   link.\
    \  During the congestion avoidance phase the peer host continues\n   to probe\
    \ for available bandwidth, trying to fill the advertised\n   window, until packet\
    \ loss occurs.\n   The same problems may also exist when a sending host is directly\n\
    \   connected to a slow link as most slow links have some local buffer in\n  \
    \ the link interface.  This link interface buffer is subject to\n   overflow exactly\
    \ in the same way as the last-hop router buffer.\n   When a last-hop router with\
    \ a small number of buffers per outbound\n   link is used, the first buffer overflow\
    \ occurs earlier than it would\n   if the router had a larger number of buffers.\
    \  Subsequently with a\n   smaller number of buffers the periodic packet losses\
    \ occur more\n   frequently during congestion avoidance, when the sender probes\
    \ for\n   available bandwidth.\n   The most important responsibility of router\
    \ buffers is to absorb\n   bursts.  Too few buffers (for example, only three buffers\
    \ per\n   outbound link as described in [RFC2416]) means that routers will\n \
    \  overflow their buffer pools very easily and are unlikely to absorb\n   even\
    \ a very small burst.  When a larger number of router buffers are\n   allocated\
    \ per outbound link, the buffer space does not overflow as\n   quickly but the\
    \ buffers are still likely to become full due to TCP's\n   default behavior. \
    \ A larger number of router buffers leads to longer\n   queuing delays and a longer\
    \ RTT.\n   If router queues become full before congestion is signaled or remain\n\
    \   full for long periods of time, this is likely to result in \"lock-\n   out\"\
    , where a single connection or a few connections occupy the\n   router queue space,\
    \ preventing other connections from using the link\n   [RFC2309], especially when\
    \ a tail drop queue management discipline is\n   being used.\n   Therefore, it\
    \ is essential to have a large enough number of buffers\n   in routers to be able\
    \ to absorb data bursts, but keep the queues\n   normally small.  In order to\
    \ achieve this it has been recommended in\n   [RFC2309] that an active queue management\
    \ mechanism, like Random\n   Early Detection (RED) [RED93], should be implemented\
    \ in all Internet\n   routers, including the last-hop routers in front of a slow\
    \ link.  It\n   should also be noted that RED requires a sufficiently large number\
    \ of\n   router buffers to work properly.  In addition, the appropriate\n   parameters\
    \ of RED on a last-hop router connected to a slow link will\n   likely deviate\
    \ from the defaults recommended.\n   Active queue management mechanism do not\
    \ eliminate packet drops but,\n   instead, drop packets at earlier stage to solve\
    \ the full-queue\n   problem for flows that are responsive to packet drops as\
    \ congestion\n   signal.  Hosts that are directly connected to low-speed links\
    \ may\n   limit the receive windows they advertise in order to lower or\n   eliminate\
    \ the number of packet drops in a last-hop router.  When\n   doing so one should,\
    \ however, take care that the advertised window is\n   large enough to allow full\
    \ utilization of the last-hop link capacity\n   and to allow triggering fast retransmit,\
    \ when a packet loss is\n   encountered.  This recommendation takes two forms:\n\
    \   -  Modern operating systems use relatively large default TCP receive\n   \
    \   buffers compared to what is required to fully utilize the link\n      capacity\
    \ of low-speed links.  Users should be able to choose the\n      default receive\
    \ window size in use - typically a system-wide\n      parameter.  (This \"choice\"\
    \ may be as simple as \"dial-up access/LAN\n      access\" on a dialog box - this\
    \ would accommodate many environments\n      without requiring hand-tuning by\
    \ experienced network engineers.)\n   -  Application developers should not attempt\
    \ to manually manage\n      network bandwidth using socket buffer sizes.  Only\
    \ in very rare\n      circumstances will an application actually know both the\
    \ bandwidth\n      and delay of a path and be able to choose a suitably low (or\
    \ high)\n      value for the socket buffer size to obtain good network\n     \
    \ performance.\n   This recommendation is not a general solution for any network\
    \ path\n   that might involve a slow link.  Instead, this recommendation is\n\
    \   applicable in environments where the host \"knows\" it is always\n   connected\
    \ to other hosts via \"slow links\".  For hosts that may\n   connect to other\
    \ host over a variety of links (e.g., dial-up laptop\n   computers with LAN-connected\
    \ docking stations), buffer auto-tuning\n   for the receive buffer is a more reasonable\
    \ recommendation, and is\n   discussed below.\n"
- title: 2.5 TCP Buffer Auto-tuning
  contents:
  - "2.5 TCP Buffer Auto-tuning\n   [SMM98] recognizes a tension between the desire\
    \ to allocate \"large\"\n   TCP buffers, so that network paths are fully utilized,\
    \ and a desire\n   to limit the amount of memory dedicated to TCP buffers, in\
    \ order to\n   efficiently support large numbers of connections to hosts over\n\
    \   network paths that may vary by six orders of magnitude.\n   The technique\
    \ proposed is to dynamically allocate TCP buffers, based\n   on the current congestion\
    \ window, rather than attempting to\n   preallocate TCP buffers without any knowledge\
    \ of the network path.\n   This proposal results in receive buffers that are appropriate\
    \ for the\n   window sizes in use, and send buffers large enough to contain two\n\
    \   windows of segments, so that SACK and fast recovery can recover\n   losses\
    \ without forcing the connection to use lengthy retransmission\n   timeouts.\n\
    \   While most of the motivation for this proposal is given from a\n   server's\
    \ perspective, hosts that connect using multiple interfaces\n   with markedly-different\
    \ link speeds may also find this kind of\n   technique useful.  This is true in\
    \ particular with slow links, which\n   are likely to dominate the end-to-end\
    \ RTT.  If the host is connected\n   only via a single slow link interface at\
    \ a time, it is fairly easy to\n   (dynamically) adjust the receive window (and\
    \ thus the advertised\n   window) to a value appropriate for the slow last-hop\
    \ link with known\n   bandwidth and delay characteristics.\n   Recommendation:\
    \ If a host is sometimes connected via a slow link but\n   the host is also connected\
    \ using other interfaces with markedly-\n   different link speeds, it may use\
    \ receive buffer auto-tuning to\n   adjust the advertised window to an appropriate\
    \ value.\n"
- title: 2.6 Small Window Effects
  contents:
  - "2.6 Small Window Effects\n   If a TCP connection stabilizes with a congestion\
    \ window of only a few\n   segments (as could be expected on a \"slow\" link),\
    \ the sender isn't\n   sending enough segments to generate three duplicate acknowledgements,\n\
    \   triggering fast retransmit and fast recovery.  This means that a\n   retransmission\
    \ timeout is required to repair the loss - dropping the\n   TCP connection to\
    \ a congestion window with only one segment.\n   [TCPB98] and [TCPF98] observe\
    \ that (in studies of network trace\n   datasets) it is relatively common for\
    \ TCP retransmission timeouts to\n   occur even when some duplicate acknowledgements\
    \ are being sent.  The\n   challenge is to use these duplicate acknowledgements\
    \ to trigger fast\n   retransmit/fast recovery without injecting traffic into\
    \ the network\n   unnecessarily - and especially not injecting traffic in ways\
    \ that\n   will result in instability.\n   The \"Limited Transmit\" algorithm\
    \ [RFC3042] suggests sending a new\n   segment when the first and second duplicate\
    \ acknowledgements are\n   received, so that the receiver is more likely to be\
    \ able to continue\n   to generate duplicate acknowledgements until the TCP retransmit\n\
    \   threshold is reached, triggering fast retransmit and fast recovery.\n   When\
    \ the congestion window is small, this is very useful in assisting\n   fast retransmit\
    \ and fast recovery to recover from a packet loss\n   without using a retransmission\
    \ timeout.  We note that a maximum of\n   two additional new segments will be\
    \ sent before the receiver sends\n   either a new acknowledgement advancing the\
    \ window or two additional\n   duplicate acknowledgements, triggering fast retransmit/fast\
    \ recovery,\n   and that these new segments will be acknowledgement-clocked, not\n\
    \   back-to-back.\n   Recommendation: Limited Transmit should be implemented in\
    \ all hosts.\n"
- title: 3.0 Summary of Recommended Optimizations
  contents:
  - "3.0 Summary of Recommended Optimizations\n   This section summarizes our recommendations\
    \ regarding the previous\n   standards-track mechanisms, for end nodes that are\
    \ connected via a\n   slow link.\n   Header compression should be implemented.\
    \  [RFC1144] header\n   compression can be enabled over robust network links.\
    \  [RFC2507]\n   should be used over network connections that are expected to\n\
    \   experience loss due to corruption as well as loss due to congestion.\n   For\
    \ extremely lossy and slow links, implementors should evaluate ROHC\n   [RFC3095]\
    \ as a potential solution.  [RFC1323] TCP timestamps must be\n   turned off because\
    \ (1) their protection against TCP sequence number\n   wrapping is unjustified\
    \ for slow links, and (2) they complicate TCP\n   header compression.\n   IP Payload\
    \ Compression [RFC2393] should be implemented, although\n   compression at higher\
    \ layers of the protocol stack (for example [RFC\n   2616]) may make this mechanism\
    \ less useful.\n   For HTTP/1.1 environments, [RFC2616] payload compression should\
    \ be\n   implemented and should be used for payloads that are not already\n  \
    \ compressed.\n   Implementors should choose MTUs that don't monopolize network\n\
    \   interfaces for more than 100-200 milliseconds, in order to limit the\n   impact\
    \ of a single connection on all other connections sharing the\n   network interface.\n\
    \   Use of active queue management is recommended on last-hop routers\n   that\
    \ provide Internet access to host behind a slow link.  In\n   addition, number\
    \ of router buffers per slow link should be large\n   enough to absorb concurrent\
    \ data bursts from more than a single flow.\n   To absorb concurrent data bursts\
    \ from two or three TCP senders with a\n   typical data burst of three back-to-back\
    \ segments per sender, at\n   least six (6) or nine (9) buffers are needed.  Effective\
    \ use of\n   active queue management is likely to require even larger number of\n\
    \   buffers.\n   Implementors should consider the possibility that a host will\
    \ be\n   directly connected to a low-speed link when choosing default TCP\n  \
    \ receive window sizes.\n   Application developers should not attempt to manually\
    \ manage network\n   bandwidth using socket buffer sizes as only in very rare\n\
    \   circumstances an application will be able to choose a suitable value\n   for\
    \ the socket buffer size to obtain good network performance.\n   Limited Transmit\
    \ [RFC3042] should be implemented in all end hosts as\n   it assists in triggering\
    \ fast retransmit when congestion window is\n   small.\n   All of the mechanisms\
    \ described above are stable standards-track RFCs\n   (at Proposed Standard status,\
    \ as of this writing).\n   In addition, implementors may wish to consider TCP\
    \ buffer auto-\n   tuning, especially when the host system is likely to be used\
    \ with a\n   wide variety of access link speeds.  This is not a standards-track\n\
    \   TCP mechanism but, as it is an operating system implementation issue,\n  \
    \ it does not need to be standardized.\n   Of the above mechanisms, only Header\
    \ Compression (for IP and TCP) may\n   cease to work in the presence of end-to-end\
    \ IPSEC.  However,\n   [RFC3095] does allow compressing the ESP header.\n"
- title: 4.0 Topics For Further Work
  contents:
  - "4.0 Topics For Further Work\n   In addition to the standards-track mechanisms\
    \ discussed above, there\n   are still opportunities to improve performance over\
    \ low-speed links.\n   \"Sending fewer bits\" is an obvious response to slow link\
    \ speeds.  The\n   now-defunct HTTP-NG proposal [HTTP-NG] replaced the text-based\
    \ HTTP\n   header representation with a binary representation for compactness.\n\
    \   However, HTTP-NG is not moving forward and HTTP/1.1 is not being\n   enhanced\
    \ to include a more compact HTTP header representation.\n   Instead, the Wireless\
    \ Application Protocol (WAP) Forum has opted for\n   the XML-based Wireless Session\
    \ Protocol [WSP], which includes a\n   compact header encoding mechanism.\n  \
    \ It would be nice to agree on a more compact header representation\n   that will\
    \ be used by all WWW communities, not only the wireless WAN\n   community.  Indeed,\
    \ general XML content encodings have been proposed\n   [Millau], although they\
    \ are not yet widely adopted.\n   We note that TCP options which change from segment\
    \ to segment\n   effectively disable header compression schemes deployed today,\n\
    \   because there's no way to indicate that some fields in the header are\n  \
    \ unchanged from the previous segment, while other fields are not.  The\n   Robust\
    \ Header Compression working group is developing such schemes\n   for TCP options\
    \ such as timestamps and selective acknowledgements.\n   Hopefully, documents\
    \ subsequent to [RFC3095] will define such\n   specifications.\n   Another effort\
    \ worth following is that of 'Delta Encoding'.  Here,\n   clients that request\
    \ a slightly modified version of some previously\n   cached resource would receive\
    \ a succinct description of the\n   differences, rather than the entire resource\
    \ [HTTP-DELTA].\n"
- title: 5.0 Security Considerations
  contents:
  - "5.0 Security Considerations\n   All recommendations included in this document\
    \ are stable standards-\n   track RFCs (at Proposed Standard status, as of this\
    \ writing) or\n   otherwise do not suggest any changes to any protocol.  With\
    \ the\n   exception of Van Jacobson compression [RFC1144] and [RFC2507,\n   RFC2508,\
    \ RFC2509], all other mechanisms are applicable to TCP\n   connections protected\
    \ by end-to-end IPSec.  This includes ROHC\n   [RFC3095], albeit partially, because\
    \ even though it can compress the\n   outermost ESP header to some extent, encryption\
    \ still renders any\n   payload data uncompressible (including any subsequent\
    \ protocol\n   headers).\n"
- title: 6.0 IANA Considerations
  contents:
  - "6.0 IANA Considerations\n   This document is a pointer to other, existing IETF\
    \ standards.  There\n   are no new IANA considerations.\n"
- title: 7.0 Acknowledgements
  contents:
  - "7.0 Acknowledgements\n   This recommendation has grown out of \"Long Thin Networks\"\
    \ [RFC2757],\n   which in turn benefited from work done in the IETF TCPSAT working\n\
    \   group.\n"
- title: 8.0 References
  contents:
  - "8.0 References\n   [AlPa99]     Mark Allman and Vern Paxson, \"On Estimating\
    \ End-to-End\n                Network Path Properties\", in ACM SIGCOMM 99 Proceedings,\n\
    \                1999.\n   [HTTP-DELTA] J. Mogul, et al., \"Delta encoding in\
    \ HTTP\", Work in\n                Progress.\n   [HTTP-NG]    Mike Spreitzer,\
    \ Bill Janssen, \"HTTP 'Next Generation'\",\n                9th International\
    \ WWW Conference, May, 2000.  Also\n                available as:  http://www.www9.org/w9cdrom/60/60.html\n\
    \   [Millau]     Marc Girardot, Neel Sundaresan, \"Millau: an encoding\n     \
    \           format for efficient representation and exchange of XML\n        \
    \        over the Web\", 9th International WWW Conference, May,\n            \
    \    2000.  Also available as:\n                http://www.www9.org/w9cdrom/154/154.html\n\
    \   [PAX97]      Paxson, V., \"End-to-End Internet Packet Dynamics\", 1997,\n\
    \                in SIGCOMM 97 Proceedings, available as:\n                http://www.acm.org/sigcomm/ccr/archive/ccr-toc/ccr-toc-\n\
    \                97.html\n   [RED93]      Floyd, S., and Jacobson, V., Random\
    \ Early Detection\n                gateways for Congestion Avoidance, IEEE/ACM\
    \ Transactions\n                on Networking, V.1 N.4, August 1993, pp. 397-413.\
    \  Also\n                available from http://ftp.ee.lbl.gov/floyd/red.html.\n\
    \   [RFC1144]    Jacobson, V., \"Compressing TCP/IP Headers for Low-Speed\n  \
    \              Serial Links\", RFC 1144, February 1990.\n   [RFC1323]    Jacobson,\
    \ V., Braden, R. and D. Borman, \"TCP Extensions\n                for High Performance\"\
    , RFC 1323, May 1992.\n   [RFC2246]    Dierks, T. and C. Allen, \"The TLS Protocol:\
    \ Version\n                1.0\", RFC 2246, January 1999.\n   [RFC2309]    Braden,\
    \ R., Clark, D., Crowcroft, J., Davie, B.,\n                Deering, S., Estrin,\
    \ D., Floyd, S., Jacobson, V.,\n                Minshall, G., Partridge, C., Peterson,\
    \ L., Ramakrishnan,\n                K., Shenker, S., Wroclawski, J. and L. Zhang,\n\
    \                \"Recommendations on Queue Management and Congestion\n      \
    \          Avoidance in the Internet\", RFC 2309, April 1998.\n   [RFC2393]  \
    \  Shacham, A., Monsour, R., Pereira, R. and M. Thomas, \"IP\n               \
    \ Payload Compression Protocol (IPComp)\", RFC 2393,\n                December\
    \ 1998.\n   [RFC2401]    Kent, S. and R. Atkinson, \"Security Architecture for\
    \ the\n                Internet Protocol\", RFC 2401, November 1998.\n   [RFC2416]\
    \    Shepard, T. and C. Partridge, \"When TCP Starts Up With\n               \
    \ Four Packets Into Only Three Buffers\", RFC 2416,\n                September\
    \ 1998.\n   [RFC2507]    Degermark, M., Nordgren, B. and S. Pink, \"IP Header\n\
    \                Compression\", RFC 2507, February 1999.\n   [RFC2508]    Casner,\
    \ S. and V. Jacobson. \"Compressing IP/UDP/RTP\n                Headers for Low-Speed\
    \ Serial Links\", RFC 2508, February\n                1999.\n   [RFC2509]    Engan,\
    \ M., Casner, S. and C. Bormann, \"IP Header\n                Compression over\
    \ PPP\", RFC 2509, February 1999.\n   [RFC2581]    Allman, M., Paxson, V. and\
    \ W. Stevens, \"TCP Congestion\n                Control\", RFC 2581, April 1999.\n\
    \   [RFC2616]    Fielding, R., Gettys, J., Mogul, J., Frystyk, H.,\n         \
    \       Masinter, L., Leach, P. and T. Berners-Lee, \"Hypertext\n            \
    \    Transfer Protocol -- HTTP/1.1\", RFC 2616, June 1999.\n   [RFC2757]    Montenegro,\
    \ G., Dawkins, S., Kojo, M., Magret, V., and\n                N. Vaidya, \"Long\
    \ Thin Networks\", RFC 2757, January 2000.\n   [RFC3042]    Allman, M., Balakrishnan,\
    \ H. and S. Floyd, \"Enhancing\n                TCP's Loss Recovery Using Limited\
    \ Transmit\", RFC 3042,\n                January 2001.\n   [RFC3095]    Bormann,\
    \ C., Burmeister, C., Degermark, M., Fukushima,\n                H., Hannu, H.,\
    \ Jonsson, L-E., Hakenberg, R., Koren, T.,\n                Le, K., Liu, Z., Martensson,\
    \ A., Miyazaki, A., Svanbro,\n                K., Wiebke, T., Yoshimura, T. and\
    \ H. Zheng, \"RObust\n                Header Compression (ROHC): Framework and\
    \ four Profiles:\n                RTP, UDP ESP and uncompressed\", RFC 3095, July\
    \ 2001.\n   [SMM98]      Jeffrey Semke, Matthew Mathis, and Jamshid Mahdavi,\n\
    \                \"Automatic TCP Buffer Tuning\", in ACM SIGCOMM 98\n        \
    \        Proceedings 1998. Available from\n                http://www.acm.org/sigcomm/sigcomm98/tp/abs_26.html.\n\
    \   [SSL]        Alan O. Freier, Philip Karlton, Paul C. Kocher, The SSL\n   \
    \             Protocol: Version 3.0, March 1996.  (Expired Internet-\n       \
    \         Draft, available from\n                http://home.netscape.com/eng/ssl3/ssl-toc.html)\n\
    \   [TCPB98]     Hari Balakrishnan, Venkata N. Padmanabhan, Srinivasan\n     \
    \           Seshan, Mark Stemm, Randy H. Katz, \"TCP Behavior of a\n         \
    \       Busy Internet Server: Analysis and Improvements\", IEEE\n            \
    \    Infocom, March 1998. Available from:\n                http://www.cs.berkeley.edu/~hari/papers/infocom98.ps.gz\n\
    \   [TCPF98]     Dong Lin and H.T. Kung, \"TCP Fast Recovery Strategies:\n   \
    \             Analysis and Improvements\", IEEE Infocom, March 1998.\n       \
    \         Available from:\n                http://www.eecs.harvard.edu/networking/papers/\
    \ infocom-\n                tcp-final-198.pdf\n   [WSP]        Wireless Application\
    \ Protocol Forum, \"WAP Wireless\n                Session Protocol Specification\"\
    , approved 4 May, 2000,\n                available from\n                http://www1.wapforum.org/tech/documents/WAP-203-WSP-\n\
    \                20000504-a.pdf.  (informative reference).\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Questions about this document may be directed to:\n  \
    \ Spencer Dawkins\n   Fujitsu Network Communications\n   2801 Telecom Parkway\n\
    \   Richardson, Texas 75082\n   Phone:  +1-972-479-3782\n   EMail: spencer.dawkins@fnc.fujitsu.com\n\
    \   Gabriel Montenegro\n   Sun Microsystems Laboratories, Europe\n   29, chemin\
    \ du Vieux Chene\n   38240 Meylan, FRANCE\n   Phone:  +33 476 18 80 45\n   EMail:\
    \ gab@sun.com\n   Markku Kojo\n   Department of Computer Science\n   University\
    \ of Helsinki\n   P.O. Box 26 (Teollisuuskatu 23)\n   FIN-00014 HELSINKI\n   Finland\n\
    \   Phone: +358-9-1914-4179\n   Fax:   +358-9-1914-4441\n   EMail: kojo@cs.helsinki.fi\n\
    \   Vincent Magret\n   Alcatel Internetworking, Inc.\n   26801 W. Agoura road\n\
    \   Calabasas, CA, 91301\n   Phone: +1 818 878 4485\n   EMail: vincent.magret@alcatel.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2001).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
