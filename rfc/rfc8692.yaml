- contents:
  - "     Internet X.509 Public Key Infrastructure: Additional Algorithm\n           Identifiers
    for RSASSA-PSS and ECDSA Using SHAKEs\n"
  title: __initial_text__
- contents:
  - "Abstract\n   Digital signatures are used to sign messages, X.509 certificates,
    and\n   Certificate Revocation Lists (CRLs).  This document updates the\n   \"Algorithms
    and Identifiers for the Internet X.509 Public Key\n   Infrastructure Certificate
    and Certificate Revocation List (CRL)\n   Profile\" (RFC 3279) and describes the
    conventions for using the SHAKE\n   function family in Internet X.509 certificates
    and revocation lists\n   as one-way hash functions with the RSA Probabilistic
    signature and\n   Elliptic Curve Digital Signature Algorithm (ECDSA) signature\n
    \  algorithms.  The conventions for the associated subject public keys\n   are
    also described.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    7841.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8692.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2019 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (https://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction\n   2.  Terminology\n   3.  Identifiers\n
    \  4.  Use in PKIX\n     4.1.  Signatures\n       4.1.1.  RSASSA-PSS Signatures\n
    \      4.1.2.  ECDSA Signatures\n     4.2.  Public Keys\n   5.  IANA Considerations\n
    \  6.  Security Considerations\n   7.  References\n     7.1.  Normative References\n
    \    7.2.  Informative References\n   Appendix A.  ASN.1 Module\n   Acknowledgements\n
    \  Authors' Addresses\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   [RFC3279] defines cryptographic algorithm identifiers for
    the\n   \"Internet X.509 Public Key Infrastructure Certificate and Certificate\n
    \  Revocation List (CRL) Profile\" [RFC5280].  This document updates RFC\n   3279
    and defines identifiers for several cryptographic algorithms\n   that use variable-length
    output SHAKE functions introduced in [SHA3]\n   which can be used with RFC 5280.\n
    \  In the SHA-3 family, two extendable-output functions (SHAKEs) are\n   defined:
    SHAKE128 and SHAKE256.  Four other hash function instances,\n   SHA3-224, SHA3-256,
    SHA3-384, and SHA3-512, are also defined but are\n   out of scope for this document.
    \ A SHAKE is a variable-length hash\n   function defined as SHAKE(M, d) where
    the output is a d-bits-long\n   digest of message M.  The corresponding collision
    and second-\n   preimage-resistance strengths for SHAKE128 are min(d/2, 128) and\n
    \  min(d, 128) bits, respectively (see Appendix A.1 of [SHA3]).  And the\n   corresponding
    collision and second-preimage-resistance strengths for\n   SHAKE256 are min(d/2,
    256) and min(d, 256) bits, respectively.\n   A SHAKE can be used as the message
    digest function (to hash the\n   message to be signed) in RSA Probabilistic Signature
    Scheme (RSASSA-\n   PSS) [RFC8017] and ECDSA [X9.62] and as the hash in the mask\n
    \  generation function (MGF) in RSASSA-PSS.\n"
  title: 1.  Introduction
- contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
    \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\",
    \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted as described
    in\n   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all\n   capitals,
    as shown here.\n"
  title: 2.  Terminology
- contents:
  - "3.  Identifiers\n   This section defines four new object identifiers (OIDs),
    for RSASSA-\n   PSS and ECDSA with each of SHAKE128 and SHAKE256.  The same algorithm\n
    \  identifiers can be used for identifying a public key in RSASSA-PSS.\n   The
    new identifiers for RSASSA-PSS signatures using SHAKEs are below.\n     id-RSASSA-PSS-SHAKE128
    \ OBJECT IDENTIFIER  ::=  { iso(1)\n               identified-organization(3)
    dod(6) internet(1)\n               security(5) mechanisms(5) pkix(7) algorithms(6)\n
    \              30 }\n     id-RSASSA-PSS-SHAKE256  OBJECT IDENTIFIER  ::=  { iso(1)\n
    \              identified-organization(3) dod(6) internet(1)\n               security(5)
    mechanisms(5) pkix(7) algorithms(6)\n               31 }\n   The new algorithm
    identifiers of ECDSA signatures using SHAKEs are\n   below.\n     id-ecdsa-with-shake128
    OBJECT IDENTIFIER  ::=  { iso(1)\n               identified-organization(3) dod(6)
    internet(1)\n               security(5) mechanisms(5) pkix(7) algorithms(6)\n
    \              32 }\n     id-ecdsa-with-shake256 OBJECT IDENTIFIER  ::=  { iso(1)\n
    \              identified-organization(3) dod(6) internet(1)\n               security(5)
    mechanisms(5) pkix(7) algorithms(6)\n               33 }\n   The parameters for
    the four identifiers above MUST be absent.  That\n   is, the identifier SHALL
    be a SEQUENCE of one component: the OID.\n   Sections 4.1.1 and 4.1.2 specify
    the required output length for each\n   use of SHAKE128 or SHAKE256 in RSASSA-PSS
    and ECDSA.  In summary,\n   when hashing messages to be signed, output lengths
    of SHAKE128 and\n   SHAKE256 are 256 and 512 bits, respectively.  When the SHAKEs
    are\n   used as MGFs in RSASSA-PSS, their output length is (8*ceil((n-1)/8) -\n
    \  264) or (8*ceil((n-1)/8) - 520) bits, respectively, where n is the\n   RSA
    modulus size in bits.\n"
  title: 3.  Identifiers
- contents:
  - '4.  Use in PKIX

    '
  - contents:
    - "4.1.  Signatures\n   Signatures are used in a number of different ASN.1 structures.
      \ As\n   shown in the ASN.1 representation from [RFC5280] below, in an X.509\n
      \  certificate, a signature is encoded with an algorithm identifier in\n   the
      signatureAlgorithm attribute and a signatureValue attribute that\n   contains
      the actual signature.\n      Certificate  ::=  SEQUENCE  {\n         tbsCertificate
      \      TBSCertificate,\n         signatureAlgorithm   AlgorithmIdentifier,\n
      \        signatureValue       BIT STRING  }\n   The identifiers defined in Section
      3 can be used as the\n   AlgorithmIdentifier in the signatureAlgorithm field
      in the sequence\n   Certificate and the signature field in the sequence TBSCertificate
      in\n   X.509 [RFC5280].  The parameters of these signature algorithms are\n
      \  absent, as explained in Section 3.\n   Conforming Certification Authority
      (CA) implementations MUST specify\n   the algorithms explicitly by using the
      OIDs specified in Section 3\n   when encoding RSASSA-PSS or ECDSA with SHAKE
      signatures in\n   certificates and CRLs.  Conforming client implementations
      that\n   process certificates and CRLs using RSASSA-PSS or ECDSA with SHAKE\n
      \  MUST recognize the corresponding OIDs.  Encoding rules for RSASSA-PSS\n   and
      ECDSA signature values are specified in [RFC4055] and [RFC5480],\n   respectively.\n
      \  When using RSASSA-PSS or ECDSA with SHAKEs, the RSA modulus and ECDSA\n   curve
      order SHOULD be chosen in line with the SHAKE output length.\n   Refer to Section
      6 for more details.\n"
    - contents:
      - "4.1.1.  RSASSA-PSS Signatures\n   The RSASSA-PSS algorithm is defined in
        [RFC8017].  When id-RSASSA-\n   PSS-SHAKE128 or id-RSASSA-PSS-SHAKE256 (specified
        in Section 3) is\n   used, the encoding MUST omit the parameters field.  That
        is, the\n   AlgorithmIdentifier SHALL be a SEQUENCE of one component: id-RSASSA-\n
        \  PSS-SHAKE128 or id-RSASSA-PSS-SHAKE256.  [RFC4055] defines RSASSA-\n   PSS-params
        that is used to define the algorithms and inputs to the\n   algorithm.  This
        specification does not use parameters because the\n   hash, mask generation
        algorithm, trailer, and salt are embedded in\n   the OID definition.\n   The
        hash algorithm to hash a message being signed and the hash\n   algorithm used
        as the MGF in RSASSA-PSS MUST be the same: both\n   SHAKE128 or both SHAKE256.
        \ The output length of the hash algorithm\n   that hashes the message SHALL
        be 32 bytes (for SHAKE128) or 64 bytes\n   (for SHAKE256).\n   The MGF takes
        an octet string of variable length and a desired output\n   length as input
        and outputs an octet string of the desired length.\n   In RSASSA-PSS with
        SHAKEs, the SHAKEs MUST be used natively as the\n   MGF, instead of the MGF1
        algorithm that uses the hash function in\n   multiple iterations, as specified
        in Appendix B.2.1 of [RFC8017].  In\n   other words, the MGF is defined as
        the SHAKE128 or SHAKE256 output of\n   the mgfSeed for id-RSASSA-PSS-SHAKE128
        and id-RSASSA-PSS-SHAKE256,\n   respectively.  The mgfSeed is the seed from
        which the mask is\n   generated, an octet string [RFC8017].  As explained
        in Step 9 of\n   Section 9.1.1 of [RFC8017], the output length of the MGF
        is emLen -\n   hLen - 1 bytes. emLen is the maximum message length ceil((n-1)/8),\n
        \  where n is the RSA modulus in bits. hLen is 32 and 64 bytes for id-\n   RSASSA-PSS-SHAKE128
        and id-RSASSA-PSS-SHAKE256, respectively.  Thus,\n   when SHAKE is used as
        the MGF, the SHAKE output length maskLen is\n   (8*emLen - 264) or (8*emLen
        - 520) bits, respectively.  For example,\n   when RSA modulus n is 2048 bits,
        the output length of SHAKE128 or\n   SHAKE256 as the MGF will be 1784 or 1528
        bits when id-RSASSA-PSS-\n   SHAKE128 or id-RSASSA-PSS-SHAKE256 is used, respectively.\n
        \  The RSASSA-PSS saltLength MUST be 32 bytes for id-RSASSA-PSS-SHAKE128\n
        \  or 64 bytes for id-RSASSA-PSS-SHAKE256.  Finally, the trailerField\n   MUST
        be 1, which represents the trailer field with hexadecimal value\n   0xBC [RFC8017].\n"
      title: 4.1.1.  RSASSA-PSS Signatures
    - contents:
      - "4.1.2.  ECDSA Signatures\n   The Elliptic Curve Digital Signature Algorithm
        (ECDSA) is defined in\n   [X9.62].  When the id-ecdsa-with-shake128 or id-ecdsa-with-shake256\n
        \  (specified in Section 3) algorithm identifier appears, the respective\n
        \  SHAKE function (SHAKE128 or SHAKE256) is used as the hash.  The\n   encoding
        MUST omit the parameters field.  That is, the\n   AlgorithmIdentifier SHALL
        be a SEQUENCE of one component: the OID id-\n   ecdsa-with-shake128 or id-ecdsa-with-shake256.\n
        \  For simplicity and compliance with the ECDSA standard specification\n   [X9.62],
        the output length of the hash function must be explicitly\n   determined.
        \ The output length, d, for SHAKE128 or SHAKE256 used in\n   ECDSA MUST be
        256 or 512 bits, respectively.\n   Conforming CA implementations that generate
        ECDSA with SHAKE\n   signatures in certificates or CRLs SHOULD generate such
        signatures\n   with a deterministically generated, nonrandom k in accordance
        with\n   all the requirements specified in [RFC6979].  They MAY also generate\n
        \  such signatures in accordance with all other recommendations in\n   [X9.62]
        or [SEC1] if they have a stated policy that requires\n   conformance to those
        standards.  Those standards have not specified\n   SHAKE128 and SHAKE256 as
        hash algorithm options.  However, SHAKE128\n   and SHAKE256 with output length
        being 32 and 64 octets, respectively,\n   can be used instead of 256- and
        512-bit output hash algorithms such\n   as SHA256 and SHA512.\n"
      title: 4.1.2.  ECDSA Signatures
    title: 4.1.  Signatures
  - contents:
    - "4.2.  Public Keys\n   Certificates conforming to [RFC5280] can convey a public
      key for any\n   public key algorithm.  The certificate indicates the public
      key\n   algorithm through an algorithm identifier.  This algorithm identifier\n
      \  is an OID with optionally associated parameters.  The conventions and\n   encoding
      for RSASSA-PSS and ECDSA public key algorithm identifiers\n   are as specified
      in Sections 2.3.1 and 2.3.5 of [RFC3279],\n   Section 3.1 of [RFC4055] and Section
      2.1 of [RFC5480].\n   Traditionally, the rsaEncryption object identifier is
      used to\n   identify RSA public keys.  The rsaEncryption object identifier\n
      \  continues to identify the subject public key when the RSA private key\n   owner
      does not wish to limit the use of the public key exclusively to\n   RSASSA-PSS
      with SHAKEs.  When the RSA private key owner wishes to\n   limit the use of
      the public key exclusively to RSASSA-PSS with\n   SHAKEs, the AlgorithmIdentifiers
      for RSASSA-PSS defined in Section 3\n   SHOULD be used as the algorithm field
      in the SubjectPublicKeyInfo\n   sequence [RFC5280].  Conforming client implementations
      that process\n   RSASSA-PSS with SHAKE public keys when processing certificates
      and\n   CRLs MUST recognize the corresponding OIDs.\n   Conforming CA implementations
      MUST specify the X.509 public key\n   algorithm explicitly by using the OIDs
      specified in Section 3 when\n   encoding ECDSA with SHAKE public keys in certificates
      and CRLs.\n   Conforming client implementations that process ECDSA with SHAKE\n
      \  public keys when processing certificates and CRLs MUST recognize the\n   corresponding
      OIDs.\n   The identifier parameters, as explained in Section 3, MUST be absent.\n"
    title: 4.2.  Public Keys
  title: 4.  Use in PKIX
- contents:
  - "5.  IANA Considerations\n   One object identifier for the ASN.1 module in Appendix
    A has been\n   assigned in the \"SMI Security for PKIX Module Identifier\"\n   (1.3.6.1.5.5.7.0)
    registry:\n            | Decimal |       Description        | References |\n            |
    \   94   | id-mod-pkix1-shakes-2019 |  RFC 8692  |\n   IANA has updated the \"SMI
    Security for PKIX Algorithms\"\n   (1.3.6.1.5.5.7.6) registry [SMI-PKIX] with
    four additional entries:\n             | Decimal |      Description       | References
    |\n             |    30   | id-RSASSA-PSS-SHAKE128 |  RFC 8692  |\n             |
    \   31   | id-RSASSA-PSS-SHAKE256 |  RFC 8692  |\n             |    32   | id-ecdsa-with-shake128
    |  RFC 8692  |\n             |    33   | id-ecdsa-with-shake256 |  RFC 8692  |\n
    \  IANA has updated the \"Hash Function Textual Names\" registry\n   [Hash-Texts]
    with two additional entries for SHAKE128 and SHAKE256:\n       | Hash Function
    Name |           OID           | Reference |\n       |      shake128      | 2.16.840.1.101.3.4.2.11
    |  RFC 8692 |\n       |      shake256      | 2.16.840.1.101.3.4.2.12 |  RFC 8692
    |\n"
  title: 5.  IANA Considerations
- contents:
  - "6.  Security Considerations\n   This document updates [RFC3279].  The Security
    Considerations section\n   of that document applies to this specification as well.\n
    \  NIST has defined appropriate use of the hash functions in terms of\n   the
    algorithm strengths and expected time frames for secure use in\n   Special Publications
    (SPs) [SP800-78-4] and [SP800-107].  These\n   documents can be used as guides
    to choose appropriate key sizes for\n   various security scenarios.\n   SHAKE128
    with output length of 256 bits offers 128 bits of collision\n   and preimage resistance.
    \ Thus, SHAKE128 OIDs in this specification\n   are RECOMMENDED with 2048- (112-bit
    security) or 3072-bit (128-bit\n   security) RSA modulus or curves with group
    order of 256 bits (128-bit\n   security).  SHAKE256 with a 512-bit output length
    offers 256 bits of\n   collision and preimage resistance.  Thus, the SHAKE256
    OIDs in this\n   specification are RECOMMENDED with 4096-bit RSA modulus or higher
    or\n   curves with a group order of at least 512 bits, such as the NIST\n   Curve
    P-521 (256-bit security).  Note that we recommended a 4096-bit\n   RSA because
    we would need a 15360-bit modulus for 256 bits of\n   security, which is impractical
    for today's technology.\n"
  title: 6.  Security Considerations
- contents:
  - '7.  References

    '
  - contents:
    - "7.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use
      in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n
      \             DOI 10.17487/RFC2119, March 1997,\n              <https://www.rfc-editor.org/info/rfc2119>.\n
      \  [RFC3279]  Bassham, L., Polk, W., and R. Housley, \"Algorithms and\n              Identifiers
      for the Internet X.509 Public Key\n              Infrastructure Certificate
      and Certificate Revocation List\n              (CRL) Profile\", RFC 3279, DOI
      10.17487/RFC3279, April\n              2002, <https://www.rfc-editor.org/info/rfc3279>.\n
      \  [RFC4055]  Schaad, J., Kaliski, B., and R. Housley, \"Additional\n              Algorithms
      and Identifiers for RSA Cryptography for use in\n              the Internet
      X.509 Public Key Infrastructure Certificate\n              and Certificate Revocation
      List (CRL) Profile\", RFC 4055,\n              DOI 10.17487/RFC4055, June 2005,\n
      \             <https://www.rfc-editor.org/info/rfc4055>.\n   [RFC5280]  Cooper,
      D., Santesson, S., Farrell, S., Boeyen, S.,\n              Housley, R., and
      W. Polk, \"Internet X.509 Public Key\n              Infrastructure Certificate
      and Certificate Revocation List\n              (CRL) Profile\", RFC 5280, DOI
      10.17487/RFC5280, May 2008,\n              <https://www.rfc-editor.org/info/rfc5280>.\n
      \  [RFC5480]  Turner, S., Brown, D., Yiu, K., Housley, R., and T. Polk,\n              \"Elliptic
      Curve Cryptography Subject Public Key\n              Information\", RFC 5480,
      DOI 10.17487/RFC5480, March 2009,\n              <https://www.rfc-editor.org/info/rfc5480>.\n
      \  [RFC8017]  Moriarty, K., Ed., Kaliski, B., Jonsson, J., and A. Rusch,\n              \"PKCS
      #1: RSA Cryptography Specifications Version 2.2\",\n              RFC 8017,
      DOI 10.17487/RFC8017, November 2016,\n              <https://www.rfc-editor.org/info/rfc8017>.\n
      \  [RFC8174]  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n              2119
      Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n              May 2017,
      <https://www.rfc-editor.org/info/rfc8174>.\n   [SHA3]     National Institute
      of Standards and Technology, \"SHA-3\n              Standard: Permutation-Based
      Hash and Extendable-Output\n              Functions\", DOI 10.6028/NIST.FIPS.202,
      FIPS PUB 202,\n              August 2015, <https://doi.org/10.6028/NIST.FIPS.202>.\n"
    title: 7.1.  Normative References
  - contents:
    - "7.2.  Informative References\n   [Hash-Texts]\n              IANA, \"Hash Function
      Textual Names\",\n              <https://www.iana.org/assignments/hash-function-text-\n
      \             names/>.\n   [RFC5912]  Hoffman, P. and J. Schaad, \"New ASN.1
      Modules for the\n              Public Key Infrastructure Using X.509 (PKIX)\",
      RFC 5912,\n              DOI 10.17487/RFC5912, June 2010,\n              <https://www.rfc-editor.org/info/rfc5912>.\n
      \  [RFC6979]  Pornin, T., \"Deterministic Usage of the Digital Signature\n              Algorithm
      (DSA) and Elliptic Curve Digital Signature\n              Algorithm (ECDSA)\",
      RFC 6979, DOI 10.17487/RFC6979, August\n              2013, <https://www.rfc-editor.org/info/rfc6979>.\n
      \  [SEC1]     Standards for Efficient Cryptography Group, \"SEC 1:\n              Elliptic
      Curve Cryptography\", May 2009,\n              <http://www.secg.org/sec1-v2.pdf>.\n
      \  [SMI-PKIX] IANA, \"SMI Security for PKIX Algorithms\",\n              <https://www.iana.org/assignments/smi-numbers>.\n
      \  [SP800-107]\n              National Institute of Standards and Technology
      (NIST),\n              \"Recommendation for Applications Using Approved Hash\n
      \             Algorithms\", DOI 10.6028/NIST.SP.800-107r1, Revision 1,\n              NIST
      Special Publication (SP) 800-107, August 2012,\n              <http://dx.doi.org/10.6028/NIST.SP.800-107r1>.\n
      \  [SP800-78-4]\n              National Institute of Standards and Technology
      (NIST),\n              \"Cryptographic Algorithms and Key Sizes for Personal\n
      \             Identity Verification\", DOI 10.6028/NIST.SP.800-78-4, NIST\n
      \             Special Publication (SP) 800-78-4, May 2015,\n              <http://dx.doi.org/10.6028/NIST.SP.800-78-4>.\n
      \  [X9.62]    ANSI, \"Public Key Cryptography for the Financial Services\n              Industry:
      the Elliptic Curve Digital Signature Algorithm\n              (ECDSA)\", ANSI
      X9.62, 2005.\n"
    title: 7.2.  Informative References
  title: 7.  References
- contents:
  - "Appendix A.  ASN.1 Module\n   This appendix includes the ASN.1 module for SHAKEs
    in X.509.  This\n   module does not come from any previously existing RFC.  This
    module\n   references [RFC5912].\n   PKIXAlgsForSHAKE-2019 { iso(1) identified-organization(3)
    dod(6)\n     internet(1) security(5) mechanisms(5) pkix(7) id-mod(0)\n     id-mod-pkix1-shakes-2019(94)
    }\n   DEFINITIONS EXPLICIT TAGS ::=\n   BEGIN\n   -- EXPORTS ALL;\n   IMPORTS\n
    \  -- FROM RFC 5912\n   PUBLIC-KEY, SIGNATURE-ALGORITHM, DIGEST-ALGORITHM, SMIME-CAPS\n
    \  FROM AlgorithmInformation-2009\n     { iso(1) identified-organization(3) dod(6)
    internet(1) security(5)\n       mechanisms(5) pkix(7) id-mod(0)\n       id-mod-algorithmInformation-02(58)
    }\n   -- FROM RFC 5912\n   RSAPublicKey, rsaEncryption, pk-rsa, pk-ec,\n   CURVE,
    id-ecPublicKey, ECPoint, ECParameters, ECDSA-Sig-Value\n   FROM PKIXAlgs-2009
    { iso(1) identified-organization(3) dod(6)\n        internet(1) security(5) mechanisms(5)
    pkix(7) id-mod(0)\n        id-mod-pkix1-algorithms2008-02(56) }\n   ;\n   --\n
    \  -- Message Digest Algorithms (mda-)\n   --\n   DigestAlgorithms DIGEST-ALGORITHM
    ::= {\n     -- This expands DigestAlgorithms from RFC 5912\n     mda-shake128
    \  |\n     mda-shake256,\n     ...\n   }\n   --\n   -- One-Way Hash Functions\n
    \  --\n   -- SHAKE128\n   mda-shake128 DIGEST-ALGORITHM ::= {\n     IDENTIFIER
    id-shake128  -- with output length 32 bytes.\n   }\n   id-shake128 OBJECT IDENTIFIER
    ::= { joint-iso-itu-t(2) country(16)\n   -- SHAKE256\n   mda-shake256 DIGEST-ALGORITHM
    ::= {\n     IDENTIFIER id-shake256  -- with output length 64 bytes.\n   }\n   id-shake256
    OBJECT IDENTIFIER ::= { joint-iso-itu-t(2) country(16)\n   --\n   -- Public Key
    (pk-) Algorithms\n   --\n   PublicKeys PUBLIC-KEY ::= {\n     -- This expands
    PublicKeys from RFC 5912\n     pk-rsaSSA-PSS-SHAKE128 |\n     pk-rsaSSA-PSS-SHAKE256,\n
    \    ...\n   }\n   -- The hashAlgorithm is mda-shake128\n   -- The maskGenAlgorithm
    is id-shake128\n   -- Mask Gen Algorithm is SHAKE128 with output length\n   --
    (8*ceil((n-1)/8) - 264) bits, where n is the RSA\n   -- modulus in bits.\n   --
    The saltLength is 32.  The trailerField is 1.\n   pk-rsaSSA-PSS-SHAKE128 PUBLIC-KEY
    ::= {\n     IDENTIFIER id-RSASSA-PSS-SHAKE128\n     KEY RSAPublicKey\n     PARAMS
    ARE absent\n     -- Private key format not in this module --\n     CERT-KEY-USAGE
    { nonRepudiation, digitalSignature,\n                      keyCertSign, cRLSign
    }\n   }\n   -- The hashAlgorithm is mda-shake256\n   -- The maskGenAlgorithm is
    id-shake256\n   -- Mask Gen Algorithm is SHAKE256 with output length\n   -- (8*ceil((n-1)/8)
    - 520)-bits, where n is the RSA\n   -- modulus in bits.\n   -- The saltLength
    is 64.  The trailerField is 1.\n   pk-rsaSSA-PSS-SHAKE256 PUBLIC-KEY ::= {\n     IDENTIFIER
    id-RSASSA-PSS-SHAKE256\n     KEY RSAPublicKey\n     PARAMS ARE absent\n     --
    Private key format not in this module --\n     CERT-KEY-USAGE { nonRepudiation,
    digitalSignature,\n                      keyCertSign, cRLSign }\n   }\n   --\n
    \  -- Signature Algorithms (sa-)\n   --\n   SignatureAlgs SIGNATURE-ALGORITHM
    ::= {\n     -- This expands SignatureAlgorithms from RFC 5912\n     sa-rsassapssWithSHAKE128
    |\n     sa-rsassapssWithSHAKE256 |\n     sa-ecdsaWithSHAKE128 |\n     sa-ecdsaWithSHAKE256,\n
    \    ...\n   }\n   --\n   -- SMIME Capabilities (sa-)\n   --\n   SMimeCaps SMIME-CAPS
    ::= {\n     -- The expands SMimeCaps from RFC 5912\n     sa-rsassapssWithSHAKE128.&smimeCaps
    |\n     sa-rsassapssWithSHAKE256.&smimeCaps |\n     sa-ecdsaWithSHAKE128.&smimeCaps
    |\n     sa-ecdsaWithSHAKE256.&smimeCaps,\n     ...\n   }\n   -- RSASSA-PSS with
    SHAKE128\n   sa-rsassapssWithSHAKE128 SIGNATURE-ALGORITHM ::= {\n     IDENTIFIER
    id-RSASSA-PSS-SHAKE128\n     PARAMS ARE absent\n         -- The hashAlgorithm
    is mda-shake128\n         -- The maskGenAlgorithm is id-shake128\n         --
    Mask Gen Algorithm is SHAKE128 with output length\n         -- (8*ceil((n-1)/8)
    - 264) bits, where n is the RSA\n         -- modulus in bits.\n         -- The
    saltLength is 32. The trailerField is 1\n     HASHES { mda-shake128 }\n     PUBLIC-KEYS
    { pk-rsa | pk-rsaSSA-PSS-SHAKE128 }\n     SMIME-CAPS { IDENTIFIED BY id-RSASSA-PSS-SHAKE128
    }\n   }\n   id-RSASSA-PSS-SHAKE128  OBJECT IDENTIFIER  ::=  { iso(1)\n           identified-organization(3)
    dod(6) internet(1)\n           security(5) mechanisms(5) pkix(7) algorithms(6)\n
    \          30 }\n   -- RSASSA-PSS with SHAKE256\n   sa-rsassapssWithSHAKE256 SIGNATURE-ALGORITHM
    ::= {\n     IDENTIFIER id-RSASSA-PSS-SHAKE256\n     PARAMS ARE absent\n         --
    The hashAlgorithm is mda-shake256\n         -- The maskGenAlgorithm is id-shake256\n
    \        -- Mask Gen Algorithm is SHAKE256 with output length\n         -- (8*ceil((n-1)/8)
    - 520)-bits, where n is the\n         -- RSA modulus in bits.\n         -- The
    saltLength is 64. The trailerField is 1.\n    HASHES { mda-shake256 }\n    PUBLIC-KEYS
    { pk-rsa | pk-rsaSSA-PSS-SHAKE256 }\n    SMIME-CAPS { IDENTIFIED BY id-RSASSA-PSS-SHAKE256
    }\n   }\n   id-RSASSA-PSS-SHAKE256  OBJECT IDENTIFIER  ::=  { iso(1)\n           identified-organization(3)
    dod(6) internet(1)\n           security(5) mechanisms(5) pkix(7) algorithms(6)\n
    \          31 }\n   -- ECDSA with SHAKE128\n   sa-ecdsaWithSHAKE128 SIGNATURE-ALGORITHM
    ::= {\n     IDENTIFIER id-ecdsa-with-shake128\n     VALUE ECDSA-Sig-Value\n     PARAMS
    ARE absent\n     HASHES { mda-shake128 }\n     PUBLIC-KEYS { pk-ec }\n     SMIME-CAPS
    { IDENTIFIED BY id-ecdsa-with-shake128 }\n   }\n   id-ecdsa-with-shake128 OBJECT
    IDENTIFIER  ::=  { iso(1)\n           identified-organization(3) dod(6) internet(1)\n
    \          security(5) mechanisms(5) pkix(7) algorithms(6)\n           32 }\n
    \  -- ECDSA with SHAKE256\n   sa-ecdsaWithSHAKE256 SIGNATURE-ALGORITHM ::= {\n
    \    IDENTIFIER id-ecdsa-with-shake256\n     VALUE ECDSA-Sig-Value\n     PARAMS
    ARE absent\n     HASHES { mda-shake256 }\n     PUBLIC-KEYS { pk-ec }\n     SMIME-CAPS
    { IDENTIFIED BY id-ecdsa-with-shake256 }\n   }\n   id-ecdsa-with-shake256 OBJECT
    IDENTIFIER  ::=  { iso(1)\n           identified-organization(3) dod(6) internet(1)\n
    \          security(5) mechanisms(5) pkix(7) algorithms(6)\n           33 }\n
    \  END\n"
  title: Appendix A.  ASN.1 Module
- contents:
  - "Acknowledgements\n   We would like to thank Sean Turner, Jim Schaad, and Eric
    Rescorla for\n   their valuable contributions to this document.\n   The authors
    would like to thank Russ Housley for his guidance and\n   very valuable contributions
    with the ASN.1 module.\n"
  title: Acknowledgements
- contents:
  - "Authors' Addresses\n   Panos Kampanakis\n   Cisco Systems\n   Email: pkampana@cisco.com\n
    \  Quynh Dang\n   NIST\n   100 Bureau Drive, Stop 8930\n   Gaithersburg, MD 20899-8930\n"
  title: Authors' Addresses
