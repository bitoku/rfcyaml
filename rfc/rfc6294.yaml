- title: __initial_text__
  contents:
  - ''
- title: Independent Submission                                             Q. Hu
  contents:
  - "Independent Submission                                             Q. Hu\n  \
    \        Survey of Proposed Use Cases for the IPv6 Flow Label\n"
- title: Abstract
  contents:
  - "Abstract\n   The IPv6 protocol includes a flow label in every packet header,\
    \ but\n   this field is not used in practice.  This paper describes the flow\n\
    \   label standard and discusses the implementation issues that it\n   raises.\
    \  It then describes various published proposals for using the\n   flow label\
    \ and shows that most of them are inconsistent with the\n   standard.  Methods\
    \ to address this problem are briefly reviewed.  We\n   also question whether\
    \ the standard should be revised.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This is a contribution to\
    \ the RFC Series, independently of any other\n   RFC stream.  The RFC Editor has\
    \ chosen to publish this document at\n   its discretion and makes no statement\
    \ about its value for\n   implementation or deployment.  Documents approved for\
    \ publication by\n   the RFC Editor are not a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 5741.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc6294.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2011 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  2\n     1.1.  A Brief History of the Flow Label  . . . . . . .\
    \ . . . . .  2\n     1.2.  The Flow Label and Quality of Service  . . . . . .\
    \ . . . .  3\n   2.  Flow Label Definition and Issues . . . . . . . . . . . .\
    \ . . .  4\n     2.1.  Flow Label Properties  . . . . . . . . . . . . . . . .\
    \ . .  4\n     2.2.  Dependency Prohibition . . . . . . . . . . . . . . . . .\
    \ .  5\n     2.3.  Other Issues . . . . . . . . . . . . . . . . . . . . . . .\
    \  5\n   3.  Documented Proposals for the Flow Label  . . . . . . . . . . .  6\n\
    \     3.1.  Specify the Flow Label as a Pseudo-Random Value  . . . . .  7\n  \
    \     3.1.1.  End-to-End QoS Provisioning  . . . . . . . . . . . . .  7\n    \
    \   3.1.2.  Load-Balancing . . . . . . . . . . . . . . . . . . . .  8\n      \
    \ 3.1.3.  Security Nonce . . . . . . . . . . . . . . . . . . . .  8\n     3.2.\
    \  Specify QoS Parameters in the Flow Label . . . . . . . . .  8\n     3.3.  Use\
    \ Flow Label Hop-by-Hop to Control Switching . . . . . .  9\n     3.4.  Diffserv\
    \ Use of IPv6 Flow Label  . . . . . . . . . . . . . 12\n     3.5.  Other Uses\
    \ . . . . . . . . . . . . . . . . . . . . . . . . 12\n   4.  Conclusion . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . . 13\n   5.  Security Considerations\
    \  . . . . . . . . . . . . . . . . . . . 14\n   6.  Acknowledgements . . . . .\
    \ . . . . . . . . . . . . . . . . . . 14\n   7.  Informative References . . .\
    \ . . . . . . . . . . . . . . . . . 14\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   IPv6 is being introduced to overcome the address shortage\
    \ of the\n   current IPv4 protocol, but it also offers a new feature, i.e., the\n\
    \   Flow Label field in the IPv6 packet header.  The flow label is not\n   encrypted\
    \ by IPsec and is present in all fragments.  However, it is\n   used very little\
    \ in practice, for reasons discussed below and in\n   [Amante11].  After a short\
    \ introduction, this document summarizes the\n   current specification of the\
    \ IPv6 flow label and some open issues\n   about its use in Section 2.  Section\
    \ 3 describes and analyzes various\n   proposals that have been made for its use.\
    \  Finally, Section 4\n   discusses the implications and attempts to draw conclusions.\n\
    \   The Flow Label field occupies bits 12 through 31 of the IPv6 packet\n   header.\
    \  It provides a potential way to mark a packet, identify a\n   flow, and look\
    \ up the corresponding flow state.  This field is always\n   present in an IPv6\
    \ header, so a phrase such as \"a packet with no flow\n   label\" refers to a\
    \ packet whose Flow Label field contains 20 zero\n   bits, i.e., a flow label\
    \ whose value is zero.\n"
- title: 1.1.  A Brief History of the Flow Label
  contents:
  - "1.1.  A Brief History of the Flow Label\n   The original proposal for a flow\
    \ label has been attributed to Dave\n   Clark [Deering93], who proposed that it\
    \ should contain a pseudo-\n   random value.  A Flow Label field was included\
    \ in the packet header\n   during the preliminary design of IPv6, which followed\
    \ an intense\n   period of debate about several competing proposals.  The final\
    \ choice\n   was made in 1994 [RFC1752].  In particular, the IETF rejected a\n\
    \   proposal known as the Common Architecture for Next Generation\n   Internet\
    \ Protocol (CATNIP) [RFC1707], which included so-called 'cache\n   handles' to\
    \ identify the next hop in high-performance routers.  Thus,\n   CATNIP introduced\
    \ the notion of a header field that would be shared\n   by all packets belonging\
    \ to a flow, to control packet forwarding on a\n   hop-by-hop basis.  We recognize\
    \ this today as a precursor of the MPLS\n   label [RFC3031].\n   The IETF decided\
    \ instead to develop a proposal known as the Simple\n   Internet Protocol plus\
    \ (SIPP) [RFC1710] into IP version 6.  SIPP\n   included \"labeling of packets\
    \ belonging to particular traffic 'flows'\n   for which the sender requests special\
    \ handling, such as non-default\n   quality of service or 'real-time' service\"\
    \ [RFC1710].  In 1994, this\n   used a 28-bit Flow Label field.  In 1995, it was\
    \ down to 24 bits\n   [RFC1883], and it was finally reduced to 20 bits [RFC2460]\
    \ to\n   accommodate the IPv6 Traffic Class, which is fully compatible with\n\
    \   the IPv4 Type of Service byte.\n   There was considerable debate in the IETF\
    \ about the very purpose of\n   the flow label.  Was it to be a handle for fast\
    \ switching, as in\n   CATNIP, or was it to be meaningful to applications and\
    \ used to\n   specify quality of service?  Must it be set by the sending host,\
    \ or\n   could it be set by routers?  Could it be modified en route, or must\n\
    \   it be delivered with no change?\n   Because of these uncertainties, and more\
    \ urgent work, the flow label\n   was consistently ignored by implementors, and\
    \ today is set to zero in\n   almost every IPv6 packet.  In fact, [RFC2460] defined\
    \ it as\n   \"experimental and subject to change\".  There was considerable\n\
    \   preliminary work, such as [Metzler00], [Conta01a], [Conta01b], and\n   [Hagino01].\
    \  The ensuing proposed standard \"IPv6 Flow Label\n   Specification\" (RFC 3697)\
    \ [RFC3697] intended to clarify this\n   situation by providing precise boundary\
    \ conditions for use of the\n   flow label.  However, this has not proved successful\
    \ in promoting use\n   of the flow label in practice, as a result of which 20\
    \ bits are\n   unused in every IPv6 packet header.\n"
- title: 1.2.  The Flow Label and Quality of Service
  contents:
  - "1.2.  The Flow Label and Quality of Service\n   Developments in high-speed switch\
    \ design, and the success of MPLS,\n   have largely obviated consideration of\
    \ the flow label for high-speed\n   switching.  Thus, although various use cases\
    \ for the flow label have\n   been proposed, most of them assume that it should\
    \ be used principally\n   to support the provision of quality of service (QoS).\
    \  For many\n   years, it has been recognized that real-time Internet traffic\n\
    \   requires a different QoS from general data traffic, and this remains\n   true\
    \ in the era of network neutrality.  Thus, an alternative to\n   uniform best-effort\
    \ service is needed, requiring packets to be\n   classified as belonging to a\
    \ particular class of service or flow.\n   Currently, this leads to a layer violation\
    \ problem, since a 5-tuple\n   is often used to classify each packet.  The 5-tuple\
    \ includes source\n   and destination addresses, port numbers, and the transport\
    \ protocol\n   type, so when we want to forward or process packets, we need to\n\
    \   extract information from the layer above IP.  This may be impossible\n   when\
    \ packets are encrypted such that port numbers are hidden, or when\n   packets\
    \ are fragmented, so the layer violation is not an academic\n   concern.  The\
    \ flow label, being exempt from IPsec encryption and\n   being replicated in packet\
    \ fragments, avoids this difficulty.  It has\n   therefore attracted attention\
    \ from the designers of new approaches to\n   QoS.\n"
- title: 2.  Flow Label Definition and Issues
  contents:
  - '2.  Flow Label Definition and Issues

    '
- title: 2.1.  Flow Label Properties
  contents:
  - "2.1.  Flow Label Properties\n   RFC 3697 [RFC3697] standardizes properties of\
    \ the flow label,\n   including the following:\n   o  If the packets are not part\
    \ of any flow, the flow label value is\n      zero.\n   o  The 3-tuple {source\
    \ address, destination address, flow label}\n      uniquely identifies which packets\
    \ belong to which particular flow.\n   o  Packets can receive flow-specific treatment\
    \ if the node has been\n      set up with flow-specific state.\n   o  The flow\
    \ label set by the source node must be delivered to the\n      destination node;\
    \ i.e., it is an end-to-end label.\n   o  The same pair of source and destination\
    \ addresses must not use the\n      same flow label value again within a timeout\
    \ of at least\n      120 seconds.\n   One effect of the second of these rules\
    \ is to avoid the layer\n   violation problem mentioned in Section 1.  By using\
    \ the 3-tuple, we\n   only use the IP layer to classify packets, without needing\
    \ any\n   transport-layer information.  This may reduce the lookup time if\n \
    \  flow-based treatment is required and will work even with IPsec\n   encryption\
    \ and fragmentation.  Therefore, for traffic needing other\n   than best-effort\
    \ service, such as real-time applications, the flow\n   label can be set to different\
    \ values to represent different flows,\n   and each node forwarding or receiving\
    \ the packets may provide\n   different flow-specific treatments by looking at\
    \ the flow label\n   value.  This is more fine-grained than differentiated services\n\
    \   (Diffserv) [Carpenter02] [RFC2474] but need not be less efficient.\n"
- title: 2.2.  Dependency Prohibition
  contents:
  - "2.2.  Dependency Prohibition\n   An additional important rule in the standard\
    \ [RFC3697] effectively\n   forbids any encoding of meaning in the bits of the\
    \ flow label.  To be\n   exact, the standard states that \"IPv6 nodes MUST NOT\
    \ assume any\n   mathematical or other properties of the flow label values assigned\
    \ by\n   source nodes\".  This rule is aimed at the case where a packet from a\n\
    \   source using a particular encoding scheme for the flow label reaches\n   a\
    \ node that is using a different scheme.  If, by chance, the bit\n   pattern in\
    \ the flow label is meaningful in both schemes, the receiver\n   would misinterpret\
    \ the flow label.  Therefore, in the absence of\n   other information, the receiver\
    \ must not assume anything about the\n   meaning of the value of the flow label.\n\
    \   The standard [RFC3697] also states that \"Router performance SHOULD\n   NOT\
    \ be dependent on the distribution of the flow label values.\n   Especially, the\
    \ flow label bits alone make poor material for a hash\n   key\".  The problem\
    \ this rule is intended to avoid is that if a source\n   uses one method of choosing\
    \ flow labels (e.g., counting up from 1),\n   any router that assumes another\
    \ method (e.g., pseudo-randomness) may\n   not perform as intended.\n   Note that\
    \ there is no easy escape from the combination of these two\n   prohibitions,\
    \ which we will call the dependency prohibition.  Unlike\n   Diffserv code points,\
    \ flow labels are not locally significant within\n   a single administrative domain;\
    \ they must be preserved end-to-end.\n   In general, a router cannot know whether\
    \ a particular packet\n   originated in a host supporting a specific usage of\
    \ the flow label.\n   Therefore, any method that breaks one or both of these rules\
    \ will\n   only work if there is some way for a router to determine which\n  \
    \ sources use the same scheme as itself.\n   The interpretation of the dependency\
    \ rule can be subtle and is not\n   spelled out in [RFC3697].  A node must not\
    \ assume properties of the\n   flow label -- but it may know them by construction\
    \ or by signaling.\n   The bits of the flow label alone are poor material for\
    \ a hash key --\n   but they may be combined with bits from other sources, to\
    \ provide\n   uniformly distributed hash outputs.\n"
- title: 2.3.  Other Issues
  contents:
  - "2.3.  Other Issues\n   [RFC3697] does not discuss how to use the flow label most\n\
    \   effectively.  This remains the major open issue, but some authors\n   propose\
    \ that the label should be used with reserved bandwidth to\n   achieve customized\
    \ QoS provision.  Coupled with admission control at\n   the edge router, this\
    \ could limit congestion.  However, as we will\n   see below, this is not the\
    \ only proposed use.\n   We now introduce some other open issues.\n   o  Unknown\
    \ flow labels: [RFC1809] proposed that when a router\n      receives a datagram\
    \ with an unknown flow label, it should treat it\n      as zero.  However, the\
    \ standard [RFC3697] is silent on this issue.\n      Indeed, some methods of flow\
    \ state establishment might choose to\n      use an unknown label as the trigger\
    \ for creating flow state.\n   o  Deleting old flow labels: When a flow finishes,\
    \ how does the\n      router know the flow label has expired?  Should this be\
    \ based on a\n      timeout, on observation of the transport layer, or on explicit\n\
    \      signaling?  [RFC3697] defines a timeout (120 seconds) that\n      effectively\
    \ imposes a maximum lifetime on flow label state in a\n      router.  This implies\
    \ that flow labeling is inappropriate for very\n      intermittent flows, unless\
    \ there is some mechanism to refresh\n      router state.  In contrast, [Banerjee02]\
    \ suggested that a router\n      should send an ICMP message to the source prior\
    \ to deleting a\n      particular label.  The source node may then send a KEEPALIVE\n\
    \      message to the router; if it does not, the router will release\n      that\
    \ label.\n   o  Choosing when to set the flow label: For what kinds of\n     \
    \ applications should we set up non-zero flow labels?  [RFC1809]\n      suggested\
    \ not setting it for short flows containing few bytes but\n      using it for\
    \ long TCP connections and some real-time applications.\n   o  Can we modify the\
    \ flow label?  [RFC3697] states that the flow\n      label must be delivered unchanged.\
    \  There are several advantages\n      of immutable flow labels, apart from respecting\
    \ the standard: the\n      rule is easy to understand, does not require extra\
    \ processing in\n      routers or a signaling protocol, and allows for very simple\
    \ host\n      implementations.  Also, it is straightforward for hosts and\n  \
    \    routers to simply ignore the flow label.  However, this rule does\n     \
    \ appear to exclude any MPLS-like or CATNIP-like use for optimized\n      packet\
    \ switching.  Some of the proposed mechanisms described below\n      contradict\
    \ this by suggesting that switches should change the flow\n      label for routing\
    \ purposes.\n"
- title: 3.  Documented Proposals for the Flow Label
  contents:
  - "3.  Documented Proposals for the Flow Label\n   In the following, we do not intend\
    \ to recommend or criticize various\n   proposals.  This section shows the variety\
    \ of proposals that have\n   been published, and whether they are compatible with\
    \ the existing\n   standard.  These proposals almost all assume that the flow\
    \ label's\n   main purpose is to support QoS, and their flow label mechanisms\
    \ are\n   entangled with QoS mechanisms.  We describe the proposals in five\n\
    \   broad, and somewhat overlapping, categories, i.e.,\n   1.  using pseudo-random\
    \ flow label values for various purposes (for\n       example, to improve routing\
    \ performance when retrieving cached\n       routing state);\n   2.  defining\
    \ specific QoS requirements as parameters embedded in the\n       flow label field;\n\
    \   3.  using the flow label to control packet switching;\n   4.  using the flow\
    \ label specifically to extend the existing\n       differentiated services QoS\
    \ architecture;\n   5.  other uses.\n   Among the proposals described in the following\
    \ five sections, various\n   methods are proposed to set up the flow label value.\
    \  It should be\n   noted that some of these proposals embody novel and perhaps\n\
    \   controversial approaches to QoS provision, and these cannot readily\n   be\
    \ separated from their use of the flow label.  We give a reasonable\n   amount\
    \ of technical detail for some of the proposals, to show the\n   extent to which\
    \ they propose detailed semantics for the flow label\n   value.\n"
- title: 3.1.  Specify the Flow Label as a Pseudo-Random Value
  contents:
  - '3.1.  Specify the Flow Label as a Pseudo-Random Value

    '
- title: 3.1.1.  End-to-End QoS Provisioning
  contents:
  - "3.1.1.  End-to-End QoS Provisioning\n   As our first example, [Lin06] specifies\
    \ a 17-bit pseudo-random value.\n   The figure below shows the proposed flow label\
    \ structure.\n   o  The Label Flag (LF) bit: 1 means this type of flow label is\n\
    \      present.  We note that this encoding is incompatible with the\n      dependency\
    \ prohibition in [RFC3697], since a source that does not\n      use this method\
    \ may also set the LF bit.\n   o  The Label Type (LT): 2 bits; describes the type\
    \ of packet.\n   o  The Label Number (LN): randomly generated by the source node.\n\
    \   [Lin06] also describes a signaling process between source, routing,\n   and\
    \ destination nodes based on this label structure and on the IPv6\n   Traffic\
    \ Class byte, in order to reserve and release router resources\n   for a given\
    \ flow within a given class of traffic.  The pseudo-random\n   LN value is used\
    \ to uniquely identify a given flow.\n   Flow Label Specification (figure simplified\
    \ from [Lin06])\n         +--+----+-----------------------------+\n         |\
    \ 1| 2  |              17 bits        |\n         +--+----+-----------------------------+\n\
    \         |LF| LT |              LN             |\n         +--+----+-----------------------------+\n\
    \   LF   0  Disable\n        1  Enable\n   LT  00  Flow label requested by source\n\
    \       01  Flow label returned by destination\n       10  Flow label for data\
    \ delivery\n       11  Flow label terminates connection\n   LN      Random number\
    \ created by source\n"
- title: 3.1.2.  Load-Balancing
  contents:
  - "3.1.2.  Load-Balancing\n   There have been numerous informal discussions of using\
    \ pseudo-random\n   flow labels to allow load-balancing or at least load-sharing.\
    \  This\n   would be achieved by including the flow label value among the fields\n\
    \   in each packet header used as input to a modulo(N) hash used to\n   select\
    \ among N alternative paths.  However, concerns about the\n   interpretation of\
    \ the dependency prohibition have generally prevented\n   such proposals from\
    \ being written up until recently [Carpenter11].\n"
- title: 3.1.3.  Security Nonce
  contents:
  - "3.1.3.  Security Nonce\n   Another proposal for a pseudo-random flow label value\
    \ is [Blake09].\n   This states that off-path spoofing attacks have become a big\
    \ issue\n   for TCP and other transport-layer applications, and proposes that\
    \ in\n   IPv6 we should set a random value in the flow label to make the\n   packet\
    \ header more complex and less easy for the attacker to guess.\n   The two ends\
    \ of the session will agree on flow label values during\n   the SYN/ACK exchange,\
    \ but off-path attackers will be unlikely to\n   guess the agreed value.  Naturally,\
    \ on-path attackers who can observe\n   the flow labels in use can trivially defeat\
    \ this protection.  This\n   proposal does not involve using the flow label value\
    \ to retrieve\n   routing state.\n"
- title: 3.2.  Specify QoS Parameters in the Flow Label
  contents:
  - "3.2.  Specify QoS Parameters in the Flow Label\n   [Prakash04] proposes to utilize\
    \ the flow label to indicate required\n   QoS parameters in detail.  It uses the\
    \ first few bits of the Flow\n   Label field as codes to support different approaches,\
    \ as summarized\n   in the following table.  Again, this is incompatible with\
    \ the\n   dependency prohibition in [RFC3697], since a source that does not use\n\
    \   this method may also set the first two bits to non-zero.\n   Classification\
    \ for various approaches (from [Prakash04])\n    Bit Pattern   Approach\n    ------------------------------------------------------------------\n\
    \    00            No QoS requirement (Default QoS value)\n    01            Pseudo-Random\
    \ value used for the value of Flow-Label\n    10            Support for Direct\
    \ Parametric Representation\n    1100          Support for the DiffServ Model\n\
    \    1101          Reserved for future use\n    111           Reserved for future\
    \ use\n   This method allows a pseudo-random option but also adds options for\
    \ a\n   direct QoS request and for Diffserv.  In the direct QoS parameters\n \
    \  approach, 18 bits are used to encode requirements for one-way delay,\n   IP\
    \ delay variation, bandwidth, and one-way packet loss.  The proposal\n   appears\
    \ to assume that the Resource Reservation Protocol (RSVP)\n   [RFC2205] mechanisms\
    \ are used to actually implement these QoS\n   parameters.\n   This proposal allows\
    \ the use of the flow label for various important\n   QoS models, so the end user\
    \ and service provider can choose the most\n   suitable model for their situation;\
    \ [Prakash04] claims that \"The\n   proposed approach results in a simple, scalable,\
    \ modular and generic\n   implementation to provide for QoS using the IPv6 flow\
    \ label field\".\n   Similarly, [Lee04] defines the Flow Label field in five parts,\
    \ with\n   the first 3 bits used as an approach type.  The authors define two\n\
    \   approaches: a \"random\" scheme and a \"hybrid\" scheme.  If the first 3\n\
    \   bits equal \"001\", the flow label will be used as the random\n   identifier\
    \ of the flow, but if they equal \"101\", the remaining bits\n   will include\
    \ a hybrid QoS requirement for this packet, subdivided\n   into traffic type (stringent\
    \ or best-effort), bandwidth, buffer, and\n   delay requirements.  Once again,\
    \ the dependency prohibition in\n   [RFC3697] is broken.  This proposal also includes\
    \ throughput\n   monitoring and dynamic capacity allocation.  Effectively, this\n\
    \   proposal uses the flow label both to signal Intserv-like QoS\n   requirements\
    \ and to classify traffic into Diffserv-like virtual\n   label-switched paths.\
    \  Packets with a \"random\" flow label are mapped\n   into a generic (best-effort)\
    \ virtual path.\n"
- title: 3.3.  Use Flow Label Hop-by-Hop to Control Switching
  contents:
  - "3.3.  Use Flow Label Hop-by-Hop to Control Switching\n   [Chakravorty08b] and\
    \ [Chakravorty08a] describe an architectural\n   framework called \"IPv6 Label\
    \ Switching Architecture\" (6LSA).  In\n   6LSA, network components identify a\
    \ flow by looking at the Flow Label\n   field in the IPv6 packet header; all packets\
    \ with the same flow label\n   must receive the same treatment and be sent to\
    \ the same next hop.\n   However, 6LSA resembles MPLS by considering that a label\
    \ only has\n   meaning between 6LSA routers and setting the flow label at each\
    \ hop.\n   If the original source sets a non-zero flow label, there is no\n  \
    \ mechanism to restore it before delivery: a fundamental breach of\n   [RFC3697].\
    \  The authors of [Chakravorty08b] did at one stage discuss\n   using an IPv6\
    \ hop-by-hop option to correct this problem, but this has\n   not been documented.\
    \  This is a more serious incompatibility than\n   simply breaking the dependency\
    \ prohibition.\n   Unlike traditional routing algorithms, but like MPLS, 6LSA\
    \ packets\n   are classified into a Forwarding Equivalence Class (FEC), and routers\n\
    \   forward packets on different paths by looking at the FEC.  Like\n   previous\
    \ solutions, this solution divides the Flow Label field into\n   three parts.\
    \  The first 3 bits identify the FEC, which will help the\n   router or 6LSA nodes\
    \ to group the IP packets that receive the same\n   forwarding treatment and forward\
    \ them on the same virtual path.  The\n   following 4 bits describe the application\
    \ type, and the final 13 bits\n   (defined by each node or a group of nodes) specify\
    \ the hop-specific\n   label.  From the table below, we can see the FEC has 6\
    \ major\n   categories, each with up to 16 subcategories.\n   Flow Label Specification\
    \ (shortened from [Chakravorty08b])\n   +--------------------------+-------------+--------------------------+\n\
    \   | FEC (First 3 Bits)       | Next 4 Bits | Purpose                  |\n  \
    \ +--------------------------+-------------+--------------------------+\n   |\
    \ No FEC (000)             | 0000        |                          |\n   | Domain\
    \ Specific (000)    | 0001 - 1111 |                          |\n   | ------------------------\
    \ |             |                          |\n   | VPN (001)                |\
    \ 0001        | (IPSec - Tunnel Mode)    |\n   |                          | 0010\
    \        | (IPSec - Transport Mode) |\n   |                          | 0011  \
    \      | (Special Encryption)     |\n   |                          | 0100    \
    \    | (VRF)                    |\n   |                          | 0101      \
    \  | (End Network Specific)   |\n   |                          | 0110 - 1111 |\
    \ (Reserved)               |\n   | ------------------------ |             |  \
    \                        |\n   | TE Subset/               | 0001        | (DiffServ)\
    \               |\n   | QoS Enhancement (010)    | 0010        | (RSVP)      \
    \             |\n   . . .\n   |                          | 1111        | (Reserved)\
    \               |\n   | ------------------------ |             |             \
    \             |\n   | Encapsulation (011)      | 0001        | (IPv6 in IPv6)\
    \           |\n   |                          | 0010        | (IPv4 in IPv6)  \
    \         |\n   |                          | 0011        | (Other in IPv6)   \
    \       |\n   |                          | 0100        | (Enterprise Specific)\
    \    |\n   |                          | 0101 - 1111 | (Reserved)             \
    \  |\n   | ------------------------ |             |                          |\n\
    \   | Enterprise Specific(111) | 0000 - 1111 | (Reserved)               |\n  \
    \ +--------------------------+-------------+--------------------------+\n   The\
    \ authors claim that fast switching using 20-bit labels instead of\n   128-bit\
    \ IPv6 addresses will provide memory and processing savings, as\n   well as network\
    \ management advantages.  \"It also allows a network\n   management entity updating\
    \ available label tables, across the network\n   to reduce man-in-the-middle attacks\
    \ [sic]\" [Chakravorty08b].\n   We note that a similar proposal for QoS-based\
    \ switching of IPv6\n   packets [Roberts05] is designed to use a hop-by-hop option,\
    \ which has\n   not so far been allocated by the IETF.  Proposals related to this\n\
    \   have been discussed by the Telecommunications Industry Association\n   and\
    \ the ITU-T [Adams08].\n   We also note that router lookup efficiency was a major\
    \ concern at the\n   time when Clark first proposed a flow label [Deering93],\
    \ but with the\n   advent of very large scale integrated circuits capable of rapid\n\
    \   lookup in a routing table, most vendors no longer express such\n   concern.\n"
- title: 3.4.  Diffserv Use of IPv6 Flow Label
  contents:
  - "3.4.  Diffserv Use of IPv6 Flow Label\n   [Banerjee02] uses the Flow Label field\
    \ as a replacement for the IPv6\n   Traffic Class field; this proposal suggests\
    \ the incoming flow label\n   can indicate the QoS requirement by matching a Diffserv\
    \ classifier.\n   The authors have used the first three bits to indicate this,\
    \ and the\n   following 16 bits to indicate a Differentiated Services Per-Hop\n\
    \   Behavior Identification code (Diffserv PHB-ID) [RFC3140]; the last\n   bit\
    \ is reserved for future use.  This method too breaks the\n   dependency prohibition\
    \ in [RFC3697].\n   [Beckman07a] blends the flow label as an MPLS-like switching\
    \ tag with\n   Diffserv.  Unlike 6LSA, the method attempts to bypass the dependency\n\
    \   prohibition by using one bit in the Diffserv Code Point [RFC2474] to\n   indicate\
    \ that the flow label is a switching tag.  In this way, a\n   router can determine\
    \ whether the flow label conforms to [RFC3697] or\n   to [Beckman07a].  In [Beckman07b],\
    \ the same author proposes using the\n   flow label as a way of compressing IPv6\
    \ headers by hashing the\n   addresses into the flow label, again using the Diffserv\
    \ Code Point to\n   mark the packets accordingly.\n"
- title: 3.5.  Other Uses
  contents:
  - "3.5.  Other Uses\n   The Integrated Services QoS architecture [RFC1633] specifies\
    \ that the\n   flow label may be used as a packet filter [RFC2205].  At least\
    \ one\n   implementation supported this [Braden10].\n   We are not aware of any\
    \ proposals combining the flow label with the\n   Next Steps in Signaling (NSIS)\
    \ [RFC4080] architecture.\n   [Donley11] proposes a use case whereby certain flows\
    \ encapsulated in\n   a particular type of IPv4-in-IPv6 tunnel would be distinguished\
    \ at\n   the remote end of the tunnel by a specific flow label value.  This\n\
    \   would allow a service provider to deliver a tailored quality of\n   service.\
    \  This usage appears to be completely compatible with\n   [RFC3697].\n   There\
    \ has been some discussion of possible flow label use in both the\n   ROLL (Routing\
    \ Over Low power and Lossy networks) [RPL-07] and MEXT\n   (Mobility EXTensions\
    \ for IPv6) working groups of the IETF.  Such uses\n   tend to encode specific\
    \ local meanings or routing-related tags in the\n   label, so they appear to infringe\
    \ the dependency prohibition or the\n   immutability of the Flow Label field.\
    \  The ROLL group has indeed most\n   recently opted not to use the Flow Label\
    \ field for these reasons,\n   despite having to add the undesirable overhead\
    \ of an IPv6 hop-by-hop\n   option instead [RPL].  Similarly, MEXT has defined\
    \ a new mobility\n   option to support flow bindings [RFC6089] rather than using\
    \ the IPv6\n   Flow Label field.\n"
- title: 4.  Conclusion
  contents:
  - "4.  Conclusion\n   Three aspects of the current standard [RFC3697] have caused\
    \ problems\n   for many designers:\n   1.  The immutability of labels\n   2. \
    \ \"Nodes MUST NOT assume any mathematical or other properties of\n       the\
    \ Flow Label\"\n   3.  \"Router performance SHOULD NOT be dependent on the distribution\n\
    \       of the Flow Label values\"\n   Taken together, these rules essentially\
    \ forbid any encoding of the\n   semantics of a flow, or of any information about\
    \ its path, in the\n   flow label.  This was intentional, in accordance with the\
    \ stateless\n   nature of the Internet architecture and with the end-to-end principle\n\
    \   [Saltzer84], [RFC3724].  It was also felt that QoS encoding via\n   Diffserv\
    \ was sufficient and that the requirement for high-speed\n   switching could be\
    \ met by MPLS.  But this means that the majority of\n   the proposals described\
    \ above breach the standard and the intent of\n   the standard.  The authors often\
    \ appear to be using the flow label\n   either as an MPLS-like switching handle\
    \ or as an encoded QoS signal.\n   In contrast, a few documents mentioned above\
    \ do appear to respect the\n   rules of RFC 3697.  These are [Blake09], [Donley11],\
    \ [Carpenter11],\n   [Beckman07a], and [Beckman07b].  Additionally, [Lin06] would\
    \ have\n   joined this list if it had not assigned three flag bits in the Flow\n\
    \   Label field.  Although predating RFC 3697, the Integrated Services\n   usage\
    \ [RFC2205] also seems to be compatible.\n   What would other designers need to\
    \ do, if they wish to respect\n   RFC 3697?  There appear to be two choices. \
    \ One is to simply accept\n   the existing rules at face value, as in the proposals\
    \ just listed.\n   This limits the application of the flow label.  It can, for\
    \ example,\n   be used as a nonce or as part of the material for a hash used to\n\
    \   share load among alternate paths.  It cannot be the only material for\n  \
    \ such a hash, because of the dependency prohibition.  The flow label\n   could\
    \ also be used consistently with RFC 3697, if an application\n   designer so chose,\
    \ as a way to associate all packets belonging to a\n   given application session\
    \ between two hosts, across multiple\n   transport sessions.  This, however, would\
    \ presumably exclude using\n   the flow label to govern routing decisions in any\
    \ way, and would have\n   widespread implications that have never been explored.\n\
    \   The other choice, for designers who wish to use the flow label to\n   control\
    \ switching or QoS directly, is to bypass the rules within a\n   given domain\
    \ (a set of cooperating nodes) in a way that nodes outside\n   the domain cannot\
    \ detect.  In this case, any deviation from RFC 3697\n   has no possible effect\
    \ outside the domain in question.\n   An example scheme to emulate the immutability\
    \ of labels is as\n   follows.  Within the domain, all hosts set the label to\
    \ zero, the\n   routers set and interpret the label in any way they wish, and\
    \ the\n   last-hop router always sets the label back to zero.  If a packet\n \
    \  arrives from outside the domain with a non-zero label, there is a\n   method\
    \ (such as a special Diffserv code point) to mark this packet so\n   that its\
    \ label would be ignored and delivered unchanged.  An\n   alternative approach\
    \ would be to define a hop-by-hop option to carry\n   the original flow label\
    \ across the domain, so that it could be\n   changed within the domain but restored\
    \ before forwarding the packet\n   beyond the domain.\n   If a domain allows mutable\
    \ labels in such a way, it may safely ignore\n   the dependency prohibition, and\
    \ it may set the bits in the label\n   according to locally defined rules.  Within\
    \ the domain, the label\n   could be used as desired, and most of the proposed\
    \ designs discussed\n   above could be \"rescued\".\n   However, given the considerable\
    \ number of designers who have proposed\n   solutions incompatible with RFC 3697,\
    \ the relatively few designs\n   using the standard rules, and the failure of\
    \ designs such as ROLL and\n   MEXT to make use of the flow label, it seems reasonable\
    \ to ask\n   whether the RFC 3697 standard has value.\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   The flow label is not protected in any way and\
    \ can be forged by an\n   on-path attacker.  Off-path attackers may be able to\
    \ guess a valid\n   flow label unless a pseudo-random value is used.  Specific\
    \ usage\n   models for the flow label need to allow for these exposures.  For\n\
    \   further discussion, see [RFC3697].\n"
- title: 6.  Acknowledgements
  contents:
  - "6.  Acknowledgements\n   An invaluable review of this document was performed\
    \ by Bob Braden.\n   Helpful comments were made by Sheng Jiang.\n"
- title: 7.  Informative References
  contents:
  - "7.  Informative References\n   [Adams08]  Adams, J., Joung, J., and J. Song,\
    \ \"Progress and future\n              development of Flow State Aware standards,\
    \ and a proposal\n              for alerting nodes or end-systems on data related\
    \ to a\n              flow\", Work in Progress, June 2008.\n   [Amante11] Amante,\
    \ S., Carpenter, B., and S. Jiang, \"Rationale for\n              update to the\
    \ IPv6 flow label specification\", Work\n              in Progress, May 2011.\n\
    \   [Banerjee02]\n              Banerjee, R., Malhotra, S., and M. M, \"A Modified\n\
    \              Specification for use of the IPv6 Flow Label for providing\n  \
    \            An efficient Quality of Service using a hybrid approach\",\n    \
    \          Work in Progress, April 2002.\n   [Beckman07a]\n              Beckman,\
    \ M., \"IPv6 Dynamic Flow Label Switching (FLS)\",\n              Work in Progress,\
    \ February 2007.\n   [Beckman07b]\n              Beckman, M., \"IPv6 Header Compression\
    \ via Addressing\n              Mitigation Protocol (IPv6 AMP)\", Work in Progress,\n\
    \              November 2006.\n   [Blake09]  Blake, S., \"Use of the IPv6 Flow\
    \ Label as a Transport-\n              Layer Nonce to Defend Against Off-Path\
    \ Spoofing Attacks\",\n              Work in Progress, October 2009.\n   [Braden10]\
    \ Braden, R., \"Private Communication\", 2010.\n   [Carpenter02]\n           \
    \   Carpenter, B. and K. Nichols, \"Differentiated Services in\n             \
    \ the Internet\", Proc IEEE 90 (9) 1479-1494, 2002.\n   [Carpenter11]\n      \
    \        Carpenter, B. and S. Amante, \"Using the IPv6 flow label\n          \
    \    for equal cost multipath routing and link aggregation in\n              tunnels\"\
    , Work in Progress, May 2011.\n   [Chakravorty08a]\n              Chakravorty,\
    \ S., \"Challenges of IPv6 Flow Label\n              implementation\", Proc IEEE\
    \ MILCOM2008, 2008.\n   [Chakravorty08b]\n              Chakravorty, S., Bush,\
    \ J., and J. Bound, \"IPv6 Label\n              Switching Architecture\", Work\
    \ in Progress, July 2008.\n   [Conta01a] Conta, A. and B. Carpenter, \"A proposal\
    \ for the IPv6 Flow\n              Label Specification\", Work in Progress, July\
    \ 2001.\n   [Conta01b] Conta, A. and J. Rajahalme, \"A model for Diffserv use\
    \ of\n              the IPv6 Flow Label Specification\", Work in Progress,\n \
    \             November 2001.\n   [Deering93]\n              Deering, S., \"SIPP\
    \ Overview and Issues\", Minutes of the\n              Joint Sessions of the SIP\
    \ and PIP Working Groups,\n              November 1993.\n   [Donley11] Donley,\
    \ C. and K. Erichsen, \"Using the Flow Label with\n              Dual-Stack Lite\"\
    , Work in Progress, January 2011.\n   [Hagino01] Hagino, J., \"Socket API for\
    \ IPv6 flow label field\", Work\n              in Progress, April 2001.\n   [Lee04]\
    \    Lee, I. and S. Kim, \"A QoS Improvement Scheme for Real-\n              Time\
    \ Traffic Using IPv6 Flow Labels\", Lecture Notes in\n              Computer Science\
    \ Vol. 3043, 2004.\n   [Lin06]    Lin, C., Tseng, P., and W. Hwang, \"End-to-End\
    \ QoS\n              Provisioning by Flow Label in IPv6\", JCIS , 2006.\n   [Metzler00]\n\
    \              Metzler, J. and S. Hauth, \"An end-to-end usage of the IPv6\n \
    \             flow label\", Work in Progress, November 2000.\n   [Prakash04]\n\
    \              Prakash, B., \"Using the 20 bit flow label field in the\n     \
    \         IPv6 header to indicate desirable quality of service on\n          \
    \    the internet\", University of Colorado (M.Sc. Thesis),\n              2004.\n\
    \   [RFC1633]  Braden, R., Clark, D., and S. Shenker, \"Integrated\n         \
    \     Services in the Internet Architecture: an Overview\",\n              RFC\
    \ 1633, June 1994.\n   [RFC1707]  McGovern, M. and R. Ullmann, \"CATNIP: Common\
    \ Architecture\n              for the Internet\", RFC 1707, October 1994.\n  \
    \ [RFC1710]  Hinden, R., \"Simple Internet Protocol Plus White Paper\",\n    \
    \          RFC 1710, October 1994.\n   [RFC1752]  Bradner, S. and A. Mankin, \"\
    The Recommendation for the IP\n              Next Generation Protocol\", RFC 1752,\
    \ January 1995.\n   [RFC1809]  Partridge, C., \"Using the Flow Label Field in\
    \ IPv6\",\n              RFC 1809, June 1995.\n   [RFC1883]  Deering, S. and R.\
    \ Hinden, \"Internet Protocol, Version 6\n              (IPv6) Specification\"\
    , RFC 1883, December 1995.\n   [RFC2205]  Braden, R., Ed., Zhang, L., Berson,\
    \ S., Herzog, S., and S.\n              Jamin, \"Resource ReSerVation Protocol\
    \ (RSVP) -- Version 1\n              Functional Specification\", RFC 2205, September\
    \ 1997.\n   [RFC2460]  Deering, S. and R. Hinden, \"Internet Protocol, Version\
    \ 6\n              (IPv6) Specification\", RFC 2460, December 1998.\n   [RFC2474]\
    \  Nichols, K., Blake, S., Baker, F., and D. Black,\n              \"Definition\
    \ of the Differentiated Services Field (DS\n              Field) in the IPv4 and\
    \ IPv6 Headers\", RFC 2474,\n              December 1998.\n   [RFC3031]  Rosen,\
    \ E., Viswanathan, A., and R. Callon, \"Multiprotocol\n              Label Switching\
    \ Architecture\", RFC 3031, January 2001.\n   [RFC3140]  Black, D., Brim, S.,\
    \ Carpenter, B., and F. Le Faucheur,\n              \"Per Hop Behavior Identification\
    \ Codes\", RFC 3140,\n              June 2001.\n   [RFC3697]  Rajahalme, J., Conta,\
    \ A., Carpenter, B., and S. Deering,\n              \"IPv6 Flow Label Specification\"\
    , RFC 3697, March 2004.\n   [RFC3724]  Kempf, J., Ed., Austein, R., Ed., and IAB,\
    \ \"The Rise of\n              the Middle and the Future of End-to-End: Reflections\
    \ on\n              the Evolution of the Internet Architecture\", RFC 3724,\n\
    \              March 2004.\n   [RFC4080]  Hancock, R., Karagiannis, G., Loughney,\
    \ J., and S. Van den\n              Bosch, \"Next Steps in Signaling (NSIS): Framework\"\
    ,\n              RFC 4080, June 2005.\n   [RFC6089]  Tsirtsis, G., Soliman, H.,\
    \ Montavont, N., Giaretta, G.,\n              and K. Kuladinithi, \"Flow Bindings\
    \ in Mobile IPv6 and\n              Network Mobility (NEMO) Basic Support\", RFC\
    \ 6089,\n              January 2011.\n   [RPL]      Winter, T., Ed., Thubert,\
    \ P., Ed., Brandt, A., Clausen,\n              T., Hui, J., Kelsey, R., Levis,\
    \ P., Pister, K., Struik,\n              R., and J. Vasseur, \"RPL: IPv6 Routing\
    \ Protocol for Low\n              power and Lossy Networks\", Work in Progress,\
    \ March 2011.\n   [RPL-07]   Winter, T., Ed. and P. Thubert, Ed., \"RPL: IPv6\
    \ Routing\n              Protocol for Low power and Lossy Networks\", Work\n \
    \             in Progress, March 2010.\n   [Roberts05]\n              Roberts,\
    \ L. and J. Harford, \"In-Band QoS Signaling for\n              IPv6\", Work in\
    \ Progress, July 2005.\n   [Saltzer84]\n              Saltzer, J., Reed, D., and\
    \ D. Clark, \"End-To-End Arguments\n              in System Design\", ACM TOCS\
    \ 2 (4) 277-288, 1984.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Qinwen Hu\n   Department of Computer Science\n   University\
    \ of Auckland\n   PB 92019\n   Auckland  1142\n   New Zealand\n   EMail: qhu009@aucklanduni.ac.nz\n\
    \   Brian Carpenter\n   Department of Computer Science\n   University of Auckland\n\
    \   PB 92019\n   Auckland  1142\n   New Zealand\n   EMail: brian.e.carpenter@gmail.com\n"
