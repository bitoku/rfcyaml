This memo contains various protocol identifier examples, which can be used to produce valid protocolDirTable INDEX encodings, as defined by the Remote Network Monitoring MIB (Management Information Base)
[RFC2021] and the RMON Protocol Identifier Reference [RFC2895].
This document contains protocol identifier macros for well known protocols.
A conformant implementation of the RMON 2 MIB [RFC2021] can be accomplished without the use of these protocol identifiers, and accordingly, this document does not specify any IETF standard.
It is published to encourage better interoperability between RMON 2 agent implementations, by providing a great deal of RMON related protocol information in one document.
The first version of the RMON Protocol Identifiers Document [RFC2074] has been split into a standards track Reference portion [RFC2895], and an "RMON Protocol Identifier Macros", document (this document) which contains the non normative portion of that specification.
The SNMP Network Management Framework
The SNMP Management Framework presently consists of five major components:   An overall architecture, described in RFC 2571
Mechanisms for describing and naming objects and events for the purpose of management.
The first version of this Structure of Management Information (SMI) is called SMIv1 and described in STD 16, RFC 1155
[RFC1155], STD 16, RFC 1212 [RFC1212] and RFC 1215 [RFC1215].
The second version, called SMIv2, is described in STD 58, RFC 2578 [RFC2578], STD 58, RFC 2579
[RFC2579] and STD 58, RFC 2580
Message protocols for transferring management information.
The first version of the SNMP message protocol is called SNMPv1 and described in STD 15, RFC 1157
A second version of the SNMP message protocol, which is not an Internet standards track protocol, is called SNMPv2c and described in RFC 1901
[RFC1901] and RFC 1906 [RFC1906].
The third version of the message protocol is called SNMPv3 and described in RFC 1906
[RFC1906], RFC 2572 [RFC2572] and RFC 2574
Protocol operations for accessing management information.
The first set of protocol operations and associated PDU formats is described in STD 15, RFC 1157 [RFC1157].
A second set protocol operations and associated PDU formats is described in RFC 1905 [RFC1905].
A set of fundamental applications described in RFC 2573 [RFC2573] and the view based access control mechanism described in RFC 2575
A more detailed introduction to the current SNMP Management Framework can be found in RFC 2570 [RFC2570].
Managed objects are accessed via a virtual information store, termed the Management Information Base or MIB.
Objects in the MIB are defined using the mechanisms defined in the SMI.
This memo does not specify a MIB module.
The RMON 2 MIB [RFC2021] uses hierarchically formatted OCTET STRINGs to globally identify individual protocol encapsulations in the protocolDirTable.
This guide contains examples of protocol identifier encapsulations, which can be used to describe valid protocolDirTable entries.
The syntax of the protocol identifier descriptor is defined in the RMON Protocol Identifier Reference [RFC2895].
This document is not intended to be an authoritative reference on the protocols described herein.
Refer to the Official Internet Standards document [RFC2600], the Assigned Numbers document [RFC1700], or other appropriate RFCs, IEEE documents, etc.
for complete and authoritative protocol information.
This is the the second revision of this document, and is intended to replace Section 5 of the first RMON 2 Protocol Identifiers document [RFC2074].
The RMONMIB working group has decided to discontinue maintenance of this Protocol Identifier Macro repository document, due to a lack of contributions from the RMON vendor community.
This document is published as an aid in implementation of the protocolDirTable. 2.1.
Terms Refer to the RMON Protocol Identifier Reference [RFC2895] for definitions of terms used to describe the Protocol Identifier Macro and aspects of protocolDirTable INDEX encoding.
Relationship to the Remote Network Monitoring MIB
This document is intended to describe some protocol identifier macros, which can be converted to valid protocolDirTable INDEX values, using the mapping rules defined in the RMON Protocol Identifier Reference [RFC2895].
This document is not intended to limit the protocols that may be identified for counting in the RMON 2 MIB.
Many protocol encapsulations, not explicitly identified in this document, may be present in an actual implementation of the protocolDirTable.
Also, implementations of the protocolDirTable may not include all the protocols identified in the example section below.
The RMON Protocol Identifier Macros document is intended for use with the RMON Protocol Identifier Reference [RFC2895] and the RMON 2 MIB
It is not relevant to any other MIB, or intended for use with any other MIB.
This section contains protocol identifier macros for some well known protocols, although some of them may no longer be in use.
These macros reference the base layer identifiers found in section 4 of the RMON Protocol Identifier Reference [RFC2895].
These identifiers are listed below: ether2 llc snap vsnap ianaAssigned 802 1Q Refer to the RMON Protocol Identifier Reference [RFC2895] for the protocol identifier macro definitions for these protocols.
Protocol Stacks And Single Vendor Applications Network layer protocol identifier macros contain additional information about the network layer, and is found immediately following a base layer identifier in a protocol identifier.
The ProtocolDirParameters supported at the network layer are ' countsFragments(0)', and 'tracksSessions(1).
An agent may choose to implement a subset of these parameters.
The protocol name should be used for the ProtocolDirDescr field.
The ProtocolDirType ATTRIBUTES used at the network layer are ' hasChildren(0)' and 'addressRecognitionCapable(1)'.
Agents may choose to implement a subset of these attributes for each protocol, and therefore limit which tables the indicated protocol can be present (e.g. protocol distribution, host, and matrix tables).
The following protocol identifier macro declarations are given for example purposes only.
They are not intended to constitute an exhaustive list or an authoritative source for any of the protocol information given.
However, any protocol that can encapsulate other protocols must be documented here in order to encode the children identifiers into protocolDirID strings.
Leaf protocols should be documented as well, but an implementation can identify a leaf protocol even if it isn't listed here (as long as the parent is documented).
This protocol does not include Reverse ARP (RARP) packets, which are counted separately.
REFERENCE "RFC 826 [RFC826] defines the Address Resolution Protocol."
This parameter applies to all child   protocols. }
ATTRIBUTES { hasChildren(0), addressRecognitionCapable(1) } DESCRIPTION "
The protocol identifiers for the Internet Protocol (IP).
Note that IP may be encapsulated within itself, so more than one of the following identifiers may be present in a particular protocolDirID string.
CHILDREN "Children of 'ip' are selected by the value in the Protocol field (one octet), as defined in the PROTOCOL NUMBERS table within the Assigned Numbers Document.
The value of the Protocol field is encoded in an octet string as [ 0.0.0.a ], where 'a' is the protocol field .
Children of 'ip' are encoded as [ 0.0.0.a ], and named as 'ip a' where 'a' is the protocol field value.
For example, a protocolDirID fragment value of:
0.0.0.1.0.0.8.0.0.0.0.1 defines an encapsulation of ICMP (ether2.ip.icmp)" ADDRESS FORMAT "4 octets of the IP address, in network byte order.
Each ip packet contains two addresses, the source address and the destination address.
ether2.ip.ipip4.udp is a different protocolDirID than ether2.ip.udp, as identified in the protocolDirTable.
As such, two different local protocol index values will be assigned by the agent.
E.g. (full INDEX values shown):
represented by the ipip macro
REFERENCE "Appendix A of Host Extensions for IP Multicasting [RFC1112] defines the Internet Group Management Protocol."
} DESCRIPTION "IP in IP Tunneling" CHILDREN "Children of 'ipip4' are selected and encoded in the same manner as children of IP."
The 'ipip4' address format is the same as the IP address format.
ether2.ip.ipip4.udp is a different protocolDirID than ether2.ip.udp, as identified in the protocolDirTable.
As such, two different local protocol index values will be assigned by the agent.
E.g. (full INDEX values shown):
" REFERENCE "RFC 1853 [RFC1853] defines IP in IP over Protocol 4."
[RFC1819] defines version 2 of the Internet Stream Protocol."
They are encoded as [ 0.0.a.b]
, where 'a' is the MSB and 'b'
is the LSB of the port value.
Both bytes are encoded in network byte order.
For example, a protocolDirId fragment of:
0.0.0.1.0.0.8.0.0.0.0.6.0.0.0.23 identifies an encapsulation of the telnet protocol (ether2.ip.tcp.telnet)" REFERENCE "RFC 793 [RFC793] defines the Transmission Control Protocol.
} DESCRIPTION "User Datagram Protocol" CHILDREN "Children of UDP are identified by the 16 bit Source or Destination Port value as specified in RFC 768.
They are encoded as [ 0.0.a.b ]
, where 'a' is the MSB and 'b'
is the LSB of the port value.
Both bytes are encoded in network byte order.
For example, a protocolDirId fragment of: 0.0.0.1.0.0.8.0.0.0.0.17.0.0.0.161 identifies an encapsulation of SNMP (ether2.ip.udp.snmp)" REFERENCE "RFC 768 [RFC768] defines the User Datagram Protocol.
A Bulk Data Transfer Protocol."
UCRL 52317, Lawrence Livermore Labs, Livermore, California, June 1977."
Inter Domain Policy Routing Protocol" REFERENCE "RFC 1479
[RFC1479] defines Version 1 of the Inter Domain Policy Routing Protocol."
[RFC1479] defines Version 1 of the Inter Domain Policy Routing Protocol."
[RFC1745] defines BGP4/IDRP for IP."
Next Hop Resolution Protocol (NHRP)" REFERENCE "RFC 2332 [RFC2332] defines the Next Hop Resolution Protocol."
DESCRIPTION "Pseudo protocol reserved for any local network protocol.
DESCRIPTION "Pseudo protocol reserved for any distributed file system.
ADDRESS FORMAT "The 'ipip' address format is the same as the IP address format.
Note: ether2.ip.ipip.udp is a different protocolDirID than ether2.ip.udp, as identified in the protocolDirTable.
As such, two different local protocol index values will be assigned by the agent.
E.g. (full INDEX values shown): ether2.ip.ipip.udp
12.0.0.0.1.0.0.8.0.0.0.0.17.3.0.0.0 " REFERENCE "RFC 2003
[RFC2003] defines IP Encapsulation within IP."
Encapsulation Header; A Scheme for an Internet Encapsulation Protocol:
Version 1" REFERENCE "RFC 1241 [RFC1241] defines version 1 of the ENCAP Protocol."
[RFC1078] defines the TCP Port Service Multiplexer Protocol."
" REFERENCE "RFC 407 [RFC407] defines the Remote Job Entry Protocol."
REFERENCE "RFC 862 [RFC862] defines the Echo Protocol."
REFERENCE "RFC 863 [RFC863] defines the Discard Protocol."
REFERENCE "RFC 866 [RFC866] defines the Active Users Protocol."
REFERENCE "RFC 867 [RFC867] defines the Daytime Protocol."
REFERENCE "RFC 865 [RFC865] defines the Quote of the Day Protocol."
REFERENCE "RFC 864 [RFC864] defines the Character Generator Protocol."
[RFC959] defines the File Transfer Protocol.
Refer to section 3.2 of [RFC959] for details on FTP data connections."
REFERENCE "RFC 959 [RFC959] defines the File Transfer Protocol."
Its primary goal is to allow a standard method of interfacing terminal devices and terminal oriented processes to each other. "
REFERENCE "RFC 854 [RFC854] defines the basic Telnet Protocol."
REFERENCE "RFC 821 [RFC821] defines the basic Simple Mail Transfer Protocol."
[RFC1476] defines the Internet Route Access Protocol."
REFERENCE "RFC 759 [RFC759] defines the Message Processing Module."
REFERENCE "RFC 759 [RFC759] defines the Message Processing Module."
Remote Mail Checking Protocol" REFERENCE "RFC 1339
[RFC1339] defines the Remote Mail Checking Protocol."
; DNS may be transported by either UDP [RFC768] or TCP [RFC793].
If the transport is UDP, DNS requests restricted to 512 bytes in length may be sent to this port."
[RFC1035] defines the Bootstrap Protocol."
[RFC1492] defines the TACACS Protocol."
REFERENCE "RFC 951 [RFC951] defines the Bootstrap Protocol."
REFERENCE "RFC 951 [RFC951] defines the Bootstrap Protocol."
If the tracksSessions attribute is set, then packets for each TFTP transaction will be attributed to tftp, instead of the unregistered port numbers that will be encoded in subsequent packets.
[RFC1350] defines the TFTP Protocol (revision 2); RFC 1782 [RFC1782] defines TFTP Option Extensions; RFC 1783 [RFC1783] defines the TFTP Blocksize Option; RFC 1784 [RFC1784] defines TFTP Timeout Interval and Transfer Size  Options."
[RFC1436] defines the Gopher Protocol."
[RFC740] defines the NETRJS Protocol."
DESCRIPTION "Pseudo protocol reserved for any private remote job entry service.
[RFC1288] defines the finger protocol."
[RFC1945] defines the Hypertext Transfer Protocol (HTTP/1.0).
[RFC2068] defines the Hypertext Transfer Protocol (HTTP/1.1).
[RFC2069] defines an Extension to HTTP: Digest Access Authentication.
[RFC2109] defines the HTTP State Management Mechanism.
[RFC2145] defines the use and interpretation of HTTP version numbers."
DESCRIPTION "Post Office Protocol   Version 2.
Clients establish connections with POP2 servers by using this destination port number.
REFERENCE "RFC 937 [RFC937] defines Version 2 of the Post Office Protocol."
Clients establish connections with POP3 servers by using this destination port number."
[RFC1725] defines Version 3 of the Post Office Protocol."
Port mapper function requests are sent to this destination port."
CHILDREN "Specific RPC functions are represented as children of the sunrpc protocol.
Each 'RPC function protocol' is identified by its function number assignment.
RPC function number assignments are defined by different naming authorities, depending on the function identifier value.
From [RFC1831]: Program numbers are given out in groups of hexadecimal 20000000 (decimal 536870912) according to the following chart: 0 1fffffff   defined by rpc@sun.com 20000000 3fffffff   defined by user 40000000 5fffffff
transient 60000000 7fffffff   reserved 80000000 9fffffff
e0000000 ffffffff   reserved Children of 'sunrpc' are encoded as [ 0.0.0.111], the protocol identifier component for 'sunrpc', followed by [ a.b.c.d ], where a.b.c.d is the 32 bit binary RPC program number encoded in network byte order.
For example, a protocolDirID fragment value of: 0.0.0.111.0.1.134.163 defines the NFS function (and protocol).
Children are named as 'sunrpc' followed by the RPC function number in base 10 format.
For example, NFS would be named: 'sunrpc 100003'.
" DECODING "The first packet of many SUNRPC transactions is sent to the port  mapper program, and therefore decoded statically by monitoring RFC portmap requests [RFC1831].
Any subsequent packets must be decoded and correctly identified by 'remembering' the port assignments used in each RPC function call (as identified according to the procedures in the RPC Specification Version 2 [RFC1831]).
In some cases the port mapping for a particular protocol is well known and hard coded into the requesting client.
In these cases the client will not send portmap requests; instead it will send the SUNRPC request directly to the well known port.
These cases are rare and are being eliminated over time.
NFS is the most significant SUNRPC program of this class.
Such programs should still be declared as children of SUNRPC as described under CHILDREN above.
How an implementation detects this behaviour and handles it is beyond the scope of this document.
PARAMETER bit is used to indicate whether the probe can (and should) monitor portmapper activity to correctly track SUNRPC connections.
[RFC1831] defines the Remote Procedure Call Protocol Version 2.
The authoritative list of RPC Functions is identified by the URL:
DESCRIPTION "Authentication Service; Identification Protocol."
[RFC1413] defines the Identification Protocol."
[RFC1305] defines version 3 of the Network Time Protocol."
[RFC972] defines the Password Generator Protocol."
REFERENCE "RFC 996 [RFC996] defines the Statistics Server Protocol."
defined as nbt data in IPX section
NETBIOS Datagram Service   defined as nbt session in IPX section
/udp    NETBIOS Session Service imap2
[RFC1064] defines Version 2 of the Interactive Mail Access Protocol.
[RFC1730] defines Version 4 of the Internet Message Access Protocol."
[RFC1086] defines the ISO TP0 protocol."
[RFC1070] defines the ISO IP Protocol."
[RFC1068] defines the Background File Transfer Program."
[RFC1028] defines the Simple Gateway Monitoring Protocol."
Server; Distributed Mail System Protocol (DMSP)" REFERENCE "RFC 1056
[RFC1056] defines the PCMAIL Protocol."
[RFC1028] defines the Simple Gateway Monitoring Protocol."
[RFC1095] defines the Common Management Information Services and Protocol over TCP/IP."
[RFC1095] defines the Common Management Information Services and Protocol over TCP/IP."
[RFC1267] defines version 3 of the Border Gateway Protocol."
[RFC1459] defines the Internet Relay Chat Protocol."
[RFC1227] defines the SMUX Protocol."
AppleTalk Name Binding   at nbp
[RFC1729] describes the Z39.50 Protocol."
Tunneling IPX Traffic through IP Networks" REFERENCE "RFC 1234
[RFC1234] defines the IPX Tunnel Protocol."
[RFC1204] defines the Message Posting Protocol."
REFERENCE "RFC 1203 [RFC1203] defines version 3 of the Interactive Mail Access Protocol."
Lightweight Directory Access Protocol" REFERENCE "RFC 1777
[RFC2002] defines the IP Mobility Support protocol."
HTTP over TLS/SSL" REFERENCE "Netscape;
[RFC1282] defines the BSD Rlogin Protocol."
[RFC2138] defines the Radius protocol."
[RFC2139] defines the Radius Accounting protocol."
This is the SUNRPC program which is used to locate the UDP/TCP ports on which other SUNRPC programs can be found."
REFERENCE "Appendix A of RFC 1057
[RFC1057] describes the portmapper operation."
In many cases the NFS server program runs over UDP/TCP port 2049, but an implementation is encouraged to perform further analysis before assuming that a packet to/from this port is a SUNRPC/NFS packet.
Likewise an implementation is encouraged to track port mapper activity to spot cases where it is used to locate the SUNRPC/NFS program as this is more robust."
The NFS Version 3 Protocol Specification is defined in RFC 1813 [RFC1813]."
UDP/TCP normally runs over the well known port 6000.
It can run over any port in the range 6000 to 6063, however.
If the tracksSessions(1) parameter bit is set the agent
can and should detect such X Window sessions and report them as the X protocol."
The value is encoded into an octet string as [ 0.0.0.a ]
, where 'a' is the single octet of the packet type field.
Notice that in many implementations of IPX usage of the packet type field is inconsistent with the specification and implementations are encouraged to use other techniques to map inconsistent values to the correct value (which in these cases is typically the Packet Exchange Protocol).
It is beyond the scope of this document to describe these techniques in more detail.
Children of IPX are encoded as [ 0.0.0.a ], and named as 'ipx a' where a is the packet type value.
The novell echo protocol is referred to as 'ipx nov echo' OR 'ipx 2'."
ADDRESS FORMAT "4 bytes of Network number followed by the 6 bytes Host address each in network byte order.
The IPX protocol is defined by the Novell Corporation A complete description of IPX may be secured at the following address: Novell, Inc. 122 East 1700 South P. O. Box 5900
Provo, Utah 84601 USA 800
DESCRIPTION "Novell Packet Exchange Protocol.
This is really a null protocol layer as all IPX packets contain the relevant fields for this protocol.
This protocol is defined so that socket based decoding has a point of attachment in the decode tree while still allowing packet type based decoding also.
" CHILDREN "Children of PEP are defined by the 16 bit socket values.
The value is encoded into an octet string as [ 0.0.a.b ], where 'a' and 'b' are the network byte order encodings of the MSB and LSB of the socket value.
Each IPX/PEP packet contains two sockets, source and destination.
How these are mapped onto the single well known socket value used to identify its children is beyond the scope of this document."
Many third party IPX's use this value always ipx 0x04
} DESCRIPTION "Novell Sequenced Packet Exchange Protocol.
This protocol is an extension of IPX/PEP as it shares a common header.
CHILDREN "Children of SPX are defined by the 16 bit socket values.
The value is encoded into an octet string as [ 0.0.a.b ], where 'a' and 'b' are the network byte order encodings of the MSB and LSB of the socket value.
Each IPX/SPX packet contains two sockets, source and destination.
How these are mapped onto the single well known socket value used to identify its children is beyond the scope of this document."
Xerox assigned for SPX } nov sap PROTOCOL IDENTIFIER PARAMETERS { tracksSessions(1) } ATTRIBUTES { hasChildren(0) } DESCRIPTION "Novell Service Advertising Protocol.
This protocol binds applications on a particular host to an IPX/PEP or IPX/SPX socket number.
Although it never truly acts as a transport protocol itself it is used to establish sessions between clients and servers and barring well known sockets is the only reliable way to determine the protocol running over a given socket on a given machine.
CHILDREN "Children of SAP are identified by a 16 bit service type.
They are encoded as [ 0.0.a.b ]
, where 'a' is the MSB and 'b'
is the LSB of the service type.
Children of SAP are named as 'nov sap a' where 'a' is the service type in hexadecimal notation.
The novell NCP protocol is referred to as 'nov sap ncp' OR 'nov sap 0x0004'.
" DECODING "The first packet of any session for a SAP based application (almost all IPX/PEP and IPX/SPX
based applications utilize SAP) is sent to the SAP server(s) to map the service type into a port number for the host(s) on which the SAP server(s) is(are) running.
These initial packets are SAP packets and not application packets and must be decoded accordingly.
Having established the mapping, clients will then send application packets to the newly discovered socket number.
These must be decoded by 'remembering' the socket assignments transmitted in the SAP packets.
In some cases the port mapping for a particular protocol is well known and SAP will always return the same socket number for that application.
Such programs should still be declared as children of nov sap as described under CHILDREN above.
How an implementation detects a client which is bypassing the SAP server to contact a well known application is beyond the scope of this document.
PARAMETER bit is used to indicate whether the probe can (and should) monitor nov sap activity to correctly track SAP based connections.
} ncp PROTOCOL IDENTIFIER PARAMETERS { tracksSessions(1) } ATTRIBUTES { hasChildren(0)
} DESCRIPTION "Netware Core Protocol" CHILDREN "Children of NCP are identified by the 8 bit command type field.
They are encoded as [ 0.0.0.a ] where 'a' is the command type value.
Children of NCP are named as 'ncp a' where 'a' is the command type in decimal notation.
The NDS sub protocol is referred to as 'ncp nds' OR 'ncp 104'.
" DECODING "Only the NCP request frames carry the command type field.
How the implementation infers the command type of a response frame is an implementation specific matter and beyond the scope of this document.
PARAMETERS bit indicates whether the probe can (and should) perform command type inference.
, this is the right one] nov pep 0x0456 }
} DESCRIPTION "Xerox IDP" CHILDREN "Children of IDP are defined by the 8 bit value of the Packet type field.
The value is encoded into an octet string as [ 0.0.0.a ]
, where 'a' is the value of the packet type field in network byte order.
Children of IDP are encoded as [ 0.0.0.a ], and named as 'idp a' where a is the packet type value.
The XNS SPP protocol is referred to as 'idp xns spp' OR 'idp 2'.
ADDRESS FORMAT "4 bytes of Network number followed by the 6 bytes Host address each in network byte order."
} DESCRIPTION "XNS Packet Exchange Protocol.
CHILDREN "Children of PEP are defined by the 16 bit socket values.
The value is encoded into an octet string as [ 0.0.a.b ], where 'a' and 'b' are the network byte order encodings of the MSB and LSB of the socket value.
Each XNS/PEP packet contains two sockets, source and destination.
How these are mapped onto the single well known socket value used to identify its children is beyond the scope of this document."
} DESCRIPTION "Sequenced Packet Protocol."
CHILDREN "Children of SPP are defined by the 16 bit socket values.
The value is encoded into an octet string as [ 0.0.a.b ], where 'a' and 'b' are the network byte order encodings of the MSB and LSB of the socket value.
Each XNS/SPP packet contains two sockets, source and destination.
How these are mapped onto the single well known socket value used to identify its children is beyond the scope of this document."
CHILDREN "Children of apple oui are identified by the ether2 type field value that the child uses when encapsulated in ether2.
The value is encoded into an octet string as [ 0.0.a.b ], where 'a' and 'b' are the MSB and LSB of the 16 bit ether type value in network byte order."
1Q VSNAP [ 4.8.0.7 ]
CHILDREN "Children of ATALK are defined by the 8 bit value of the DDP type field.
The value is encoded into an octet string as [ 0.0.0.a ]
, where 'a' is the value of the DDP type field in network byte order."
ADDRESS FORMAT "2 bytes of Network number followed by 1 byte of node
id each in network byte order.
In order to correctly identify the application protocol running over atp NBP packets must be analyzed.
The mechanism by which this is achieved is beyond the scope of this document."
atp PROTOCOL IDENTIFIER PARAMETERS { tracksSessions(1) } ATTRIBUTES { hasChildren(0) } DESCRIPTION "AppleTalk Transaction Protocol.
" CHILDREN "Children of atp are identified by the following (32 bit) enumeration:
1   asp (AppleTalk Session Protocol)
2   pap (Printer Access Protocol)
3   zip (Zone Information Protocol)
Children of atp are encoded as [ a.b.c.d ] where 'a', 'b', 'c' and 'd' are the four octets of the enumerated value in network order
(i.e. 'a' is the MSB and 'd' is the LSB).
The ZIP protocol is referred to as 'atp zip' OR 'atp 3'.
" DECODING "An implementation is encouraged to examine both the socket fields in the associated DDP header as well as the contents of prior NBP packets in order to determine which (if any) child is present.
A full description of this algorithm is beyond the scope of this document.
PARAMETER indicates whether the probe can (and should) perform this analysis.
} DESCRIPTION "AppleTalk Data Stream Protocol.
CHILDREN "Children of adsp are identified by enumeration.
At this time none are known."
An implementation is encouraged to examine the socket numbers in the associated DDP header as well as the contents of prior NBP packets in order to determine which (if any) child of ADSP is present.
The mechanism by which this is achieved is beyond the scope of this document.
PARAMETER indicates whether the probe can (and should) perform this analysis.
CHILDREN "Children of asp are identified by the following (32 bit) enumeration:
1   afp (AppleTalk Filing Protocol) Children of asp are encoded as [ a.b.c.d ] where 'a', 'b', '
c' and 'd' are the four octets of the enumerated value in network order
(i.e. 'a' is the MSB and 'd' is the LSB).
The AFP protocol is referred to as 'asp afp' OR 'asp 1'.
DECODING "ASP is a helper layer to assist in building client/server protocols.
It cooperates with ATP to achieve this; the mechanisms used when decoding ATP apply equally here (i.e. checking DDP socket numbers and tracking NBP packets).
Hence the tracksSessions(1) PARAMETER of atp applies to this protocol also.
} DESCRIPTION "Banyan Vines Token Ring Protocol Header."
CHILDREN "Children of vines tr are identified by the 8 bit packet type field.
Children are encoded as [ 0.0.0.a ] where 'a' is the packet type value.
The vines ip protocol is referred to as 'vines tr vip' OR 'vines
" CHILDREN "Children of vip are selected by the one byte 'protocol type' field located at offset 5 in the vip header.
The value is encoded as [ 0.0.0.a ], where a is the 'protocol type.'
For example, a protocolDirId fragment of: 0.0.0.1.0.0.11.173.0.0.0.1 identifies an encapsulation of vipc (ether2.vip.vipc).
ADDRESS FORMAT "vip packets have 6 byte source and destination addresses.
The destination address is located at offset 6 in the vip header, and the source address at offset 12.
These are encoded in network byte order.
REFERENCE "Vines Protocol Definition part# 092093 001,
} DESCRIPTION "Banyan Vines Interprocess Communications Protocol."
CHILDREN "Children of Vines IPC are identified by the packet type field at offset 4 in the vipc header.
These are encoded as [ 0.0.0.a ] where 'a' is the packet type value.
Children of vipc are defined as 'vipc
a' where 'a' is the packet type value in hexadecimal notation.
The Vines Reliable Data Transport protocol is referred to as 'vipc vipc rdp' OR 'vipc 0x01'.
" DECODING "Children of vipc are deemed to start at the first byte after the packet type field (i.e. at offset 5 in the vipc header).
, vipc dgp and vipc rdp as one protocol, IPC.
IPC really comes in two flavours.
The first is used to   send unreliable datagrams (vipc packet type 0x00).
In order to distinguish between these we need two 'virtual'   protocols to identify which is which.
DESCRIPTION "Vines Unreliable Datagram Protocol.
CHILDREN "Children of vipc dgp are identified by the 16 bit port numbers contained in the vipc (this protocol's parent protocol) header.
These are encoded as [ 0.0.a.b ]
where 'a' is the MSB and 'b'
is the MSB of the port number in network byte order.
Children of vipc dgp are defined as 'vipc dgp a' where 'a' is the port number in hexadecimal notation.
The StreetTalk protocol running over vipc dgp would be referred to as 'vipc dgp streettalk' OR 'vipc dgp 0x000F'.
The mechanism by which an implementation selects which of the source and destination ports to use in determining which child protocol is present is implementation specific and beyond the scope of this document."
DECODING "Children of vipc dgp are deemed to start after the single padding byte found in the vipc header.
In the case of vipc dgp the vipc header is a so called 'short' header, total length 6 bytes (including the final padding byte).
CHILDREN "Children of vipc rdp are identified by the 16 bit port numbers contained in the vipc (this protocol's parent protocol) header.
These are encoded as [ 0.0.a.b ]
where 'a' is the MSB and 'b'
is the MSB of the port number in network byte order.
Children of vipc dgp are defined as 'vipc rdp a' where 'a' is the port number in hexadecimal notation.
The StreetTalk protocol running over vipc rdp would be referred to as 'vipc rdp streettalk' OR 'vipc rdp 0x000F'.
The mechanism by which an implementation selects which of the source and destination ports to use in determining which child protocol is present is implementation specific and beyond the scope of this document."
DECODING "Children of vipc rdp are deemed to start after the error/length field at the end of the vipc header.
For vipc rdp the vipc header is a so called 'long' header, total 16 bytes (including the final error/length field).
vipc rdp includes a high level fragmentation scheme which allows up to four vipc packets to be sent as a single atomic PDU.
PARAMETERS bit indicates whether the probe can (and should) identify the child protocol in all fragments or only the leading one."
} DESCRIPTION "Banyan Vines Sequenced Packet Protocol."
CHILDREN "Children of vspp are identified by the 16 bit port numbers contained in the vspp header.
These are encoded as [ 0.0.a.b ]
where 'a' is the MSB and 'b'
is the MSB of the port number in network byte order.
Children of vspp are defined as 'vspp a' where 'a' is the port number in hexadecimal notation.
The StreetTalk protocol running over vspp would be referred to as 'vspp streettalk' OR 'vspp 0x000F'.
The mechanism by which an implementation selects which of the source and destination ports to use in determining which child protocol is present is implementation specific and beyond the scope of this document."
The implementation must ensure only those vspp packets which contain application data are decoded and passed on to children.
Although it is suggested that the packet type and control fields should be used to determine this fact it is beyond the scope of this document to fully define the algorithm used."
[0.0.96.7] } drp PROTOCOL IDENTIFIER PARAMETERS { countsFragments(1)
} ATTRIBUTES { hasChildren(0), addressRecognitionCapable(1) } DESCRIPTION "DEC Routing Protocol.
CHILDREN "There is only one child of DRP, NSP.
This is encoded as [ 0.0.0.1 ].
There are three address formats used in DRP packets, 2 byte (short data packet and all control except ethernet endnode & router hello messages), 6 byte (ethernet router & endnode hello messages) and 8 byte (long data packet).
All of these contain the 2 byte format address in the last 2 bytes with the remaining bytes being unimportant for the purposes of system identification.
It is beyond the scope of this document to define the algorithms used to identify packet types and hence address formats.
The 2 byte address format is the concatenation of a 6 bit area and a 10 bit node number.
In all cases this is placed in little endian format (i.e. LSB, MSB).
The probe, however, will return them in network order (MSB, LSB).
Regardless of the address format in the packet, the probe will always use the 2 byte format.
For example area 13 (001101) and node 311 (0100110111) gives: 0011 0101 0011 0111   0x3537
in network order (the order the probe should return the address in).
In packets this same value would appear as (hex): 2 byte
35 8 byte  00 00
37 35 Notice that the AA 00 04 00 prefix is defined in the specification but is unimportant and should not be parsed.
Notice that control messages only have a source address in the header
and so they can never be added into the conversation based tables.
DECODING "NSP runs over DRP data packets; all other packet types are DRP control packets of one sort or another and do not carry any higher layer protocol.
NSP packets are deemed to start at the beginning of the DRP data area.
Data packets may be fragmented over multiple DRP data packets.
The countsFragments(1) parameter indicates whether a probe can (and should) attribute non leading fragments to the child protocol (above NSP in this case) or not.
Recognition of DRP data packets and fragments is beyond the scope of this document."
[0.0.96.3] } nsp PROTOCOL IDENTIFIER PARAMETERS { tracksSessions(1) } ATTRIBUTES { hasChildren(0) } DESCRIPTION "DEC Network Services Protocol.
CHILDREN "Children of NSP are identified by the SCP 8 bit object type.
Notice that the object type is included only in the session establishment messages (connect initiate, retransmitted connect initiate).
Children of NSP are encoded [ 0.0.0.a ] where 'a' is the SCP object type.
Children of NSP are named as 'nsp' followed by the SCP object type in decimal.
CTERM is referred to as 'nsp cterm' OR 'nsp 42'.
An implementation is encouraged to examine SCP headers included in NSP control messages in order to determine which child protocol is present over a given session.
It is beyond the scope of this document to define the algorithm used to do this.
The tracksSessions(1) flag indicates whether the probe can (and should) perform this analysis.
The IBM SNA Protocol Stack.
REFERENCE "IBM Systems Network Architecture Format and Protocol Reference Manual:
Architectural Logic SC30 3112 2 IBM System Communications Division, Publications Development, Department E02, PO Box 12195, Research Triangle Park, North Carolina 27709."
The NetBEUI/NetBIOS Family   CHILDREN OF NETBIOS
The NetBIOS/NetBEUI functions are implemented over a wide variety of   transports.
Despite varying implementations they all share two   features.
First, all sessions are established by connecting to   locally named services.
Second, all sessions transport application   data between the client and the named service.
In all cases the   identification of the application protocol carried within the data   packets is beyond the scope of this document.]
(Microsoft's Server Message Block Protocol)
(i.e.  'a' is the MSB and 'd' is the LSB).
netbeui PROTOCOL IDENTIFIER PARAMETERS { tracksSessions(1) } ATTRIBUTES { hasChildren(0)
} DESCRIPTION "Lan Manager NetBEUI protocol.
CHILDREN "See `CHILDREN OF NETBIOS
`" DECODING "NETBEUI provides a named service lookup function.
This function allows clients to locate a service by (locally assigned) name.
An implementation is encouraged to follow lookups and session establishments and having determined the child protocol, track them.
How the child protocol is determined and how the sessions are tracked is an implementation specific matter and is beyond the scope of this document.
[RFC1001] defines the 'PROTOCOL STANDARD FOR A NetBIOS SERVICE ON A TCP/UDP TRANSPORT: CONCEPTS AND METHODS.'
[RFC1002] defines the 'PROTOCOL STANDARD FOR A NetBIOS SERVICE ON A TCP/UDP TRANSPORT:
[RFC1001] defines the 'PROTOCOL STANDARD FOR A NetBIOS SERVICE ON A TCP/UDP TRANSPORT: CONCEPTS AND METHODS.'
[RFC1002] defines the 'PROTOCOL STANDARD FOR A NetBIOS SERVICE ON A TCP/UDP TRANSPORT:
} DESCRIPTION "NetBIOS over TCP datagram protocol.
CHILDREN "See `CHILDREN OF NETBIOS`" REFERENCE "RFC 1001
[RFC1001] defines the 'PROTOCOL STANDARD FOR A NetBIOS SERVICE ON A TCP/UDP TRANSPORT: CONCEPTS AND METHODS.'
[RFC1002] defines the 'PROTOCOL STANDARD FOR A NetBIOS SERVICE ON A TCP/UDP TRANSPORT:
, ether2  0x3C03, ether2  0x3C04, ether2  0x3C05, ether2
, 802 1Q  0x3C01, 802 1Q
, 802 1Q  0x3C04, 802 1Q  0x3C05, 802 1Q
, 802 1Q  0x3C08, 802 1Q
, 802 1Q  0x3C0B, 802 1Q
, 802 1Q  0x3C0D }
} DESCRIPTION "Novell's version of the NetBIOS protocol.
Includes SNMPv1 and SNMPv2 protocol versions.
Does not include SNMP trap packets.
The SNMP SMI is defined in RFC 1902 [RFC1902].
Version 1 of the SNMP
protocol is defined in RFC 1905 [RFC1905].
Transport mappings are defined in RFC 1906 [RFC1906]; RFC 1420 (SNMP over IPX)
[RFC1420]; RFC 1419 (SNMP over AppleTalk) [RFC1419].
The SNMP SMI is defined in RFC 1902 [RFC1902].
The SNMP protocol is defined in RFC 1905 [RFC1905].
Transport mappings are defined in RFC 1906 [RFC1906]; RFC 1420 (SNMP over IPX)
[RFC1420]; RFC 1419 (SNMP over AppleTalk) [RFC1419].
This document contains textual descriptions of well known networking protocols, not the definition of any networking behavior.
As such, no security considerations are raised by its publication.
