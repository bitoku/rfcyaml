Abstract This document describes an IRIS registry schema for IP address and Autonomous System Number information.
The schema extends the necessary query and result operations of IRIS to provide the functional information service needs for syntaxes and results used by Internet Protocol address registries.
An Internet address registry stores information about:  address ranges  autonomous system number ranges  associated contacts and organizations
This information is interrelated, and Internet address registries store this information and the information's interrelationships in a manner befitting the needs of each Internet address registry and its constituents.
This document specifies a method for accessing and retrieving this information in a common XML format.
This document describes an IRIS namespace for Internet address registries using an XML Schema [8] derived from and using the IRIS [2] schema.
This schema and registry type are provided to demonstrate the extensibility of the IRIS framework beyond the use of domains, a criteria defined in CRISP [4].
The schema given is this document is specified using the Extensible Markup Language (XML) 1.0 as described in XML [5], XML Schema notation as described in XML SD [7] and XML SS [8], and XML Namespaces as described in XML NS [6].
Examples of client/server XML exchanges with this registry type are available in Appendix B. 2.
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 [1].
Schema Description IRIS requires the derivation of both query and result elements by a registry schema.
The descriptions contained within this section refer to XML elements and attributes and their relation to the exchange of data within the protocol.
These descriptions also contain specifications outside the scope of the formal XML syntax.
Therefore, this section will use terms defined by RFC 2119 [1] to describe the specification outside the scope of the formal XML syntax.
While reading this section, please reference Section 5 for needed details on the formal XML syntax.
<findContacts> Query <findContacts> searches for contacts given search constraints.
The allowable search fields are handled by one of the elements in the "contactSearchGroup" (see Section 3.1.9) or
The <organizationId> element constrains the query based on the organization ID (handle) associated with contacts.
This element is an "exactMatchParameter" (see Section 3.1.11).
This query also provides optional <language> elements containing language tags.
Clients MAY use these elements to give a hint about the natural language(s) of the affected element.
Servers MAY use this information in processing the query, such as tailoring normalization routines to aid in more effective searches.
The client SHOULD pass the names unchanged to the server, and the implementation of the server decides if the search is case sensitive or not.
> <findOrganizations> searches for organizations given search constraints.
The allowable search fields are handled by one of the elements in the "commonSearchGroup" (see Section 3.1.10) or the element <organizationName>.
This element is an "exactOrPartialMatchParameter" (see Section 3.1.11).
This query also provides optional <language> elements containing language tags.
Clients MAY use these elements to give a hint about the natural language(s) of the affected element.
Servers MAY use this information in processing the query, such as tailoring normalization routines to aid in more effective searches.
The client SHOULD pass the names unchanged to the server, and the implementation of the server decides if the search is case sensitive or not.
<findNetworksByName> elements allow searches by name of autonomous systems and networks, respectively.
Both have the same format.
The child element <name> is an "exactOrPartialMatchParameter" (see Section 3.1.11).
This query also provides optional <language> elements containing language tags.
Clients MAY use these elements to give a hint about the natural language(s) of the affected element.
Servers MAY use this information in processing the query, such as tailoring normalization routines to aid in more effective searches.
The client SHOULD pass the names unchanged to the server, and the implementation of the server decides if the search is case sensitive or not.
<findNetworksByAddress> The <findNetworksByAddress> element is a query for a network given a related IP address or IP address range.
It has the following child elements:  <ipv4Address
> has a child <start> element containing the starting IPv4 address of the network and an optional child of <end> containing the ending IPv4 address of the network.
Clients MUST convert any short form notation to the fully qualified notation.
> same as <ipv4Address>, but
the child addresses contain IPv6 addresses.
Clients MUST convert any short form notation to the fully qualified notation.
<specificity> determines the network specificity for the search (see Section 4).
Valid values are "exact match", "all less  specific", "one level less specific", "all more specific", and "one level more specific".
This element may have the optional attribute 'allowEquivalences'.
When it is set to "true", the result set should include networks with equivalent starting and ending addresses.
The default value for 'allowEquivalences' is "false".
The results from this query MUST be either <ipv4Network> or <ipv6Network> results.
More than one network result MAY be returned.
> The <findNetworksByHandle> element is a query for a network given a the handle of a related network.
It has the following child elements:  <networkHandle
> specifies the network handle.
<specificity> determines the network specificity for the search (see Section 4).
Valid values are "all less specifics", "one  level less specifics", "all more specifics", and "one level more  specifics".
The results from this query MUST be either <ipv4Network> or <ipv6Network> results.
More than one network result MAY be returned.
This query could be used to discover the parentage relationships between networks that have the same starting and ending addresses.
The client SHOULD pass handles unchanged to the server, and the implementation of the server decides if the search is case sensitive or not.
The <findASByNumber> element allows a search for autonomous systems given an autonomous system number (ASN) range.
It has the following child elements:  <asNumberStart
> specifies the start of the ASN range.
<asNumberEnd> specifies the end of the ASN range.
<specificity> determines the range specificity for the search (see Section 4).
Valid values are "exact match", "all less  specific", "one level less specific", "all more specific", and "one level more specific".
This element may have the optional attribute 'allowEquivalences'.
When it is set to "true", the result set should include ranges with equivalent starting and ending numbers.
The default value for 'allowEquivalences' is "false".
The results from this query MUST be <autonomousSystem> results.
More than one result MAY be returned.
The <findByContact> element allows a search for autonomous systems, IP networks, and organizations on fields associated with that entity's contact.
The optional search element <returnedResultType> MUST restrict the results to autonomous systems, IPv4 networks, IPv6 networks, or organizations using the values 'returnASs', 'returnIPv4Networks', 'returnIPv6Networks', and 'returnOrganizations', respectively.
The allowable search fields are handled with either the <contactHandle> element or one of the elements in the "contactSearchGroup" (see Section 3.1.9).
The <contactHandle> element allows for the entities to be selected based on the contact having the specified contact handle, and it is an "exactMatchParameter" type (see Section 3.1.11).
The client SHOULD pass these search fields unchanged to the server, and the implementation of the server decides if the search is case sensitive or not.
The query MAY also be constrained further using the optional <role> element.
The contents of this element signify the role the contact has with the entity.
The allowable values for this element are "adminContact", "nocContact", "techContact", "abuseContact", and "otherContact".
This query also provides optional <language> elements containing language tags.
Clients MAY use these elements to give a hint about the natural language(s) of the affected element.
Servers MAY use this information in processing the query, such as tailoring normalization routines to aid in more effective searches.
The results from this query MUST be <ipv4Network
<ipv6Network> results, <autonomousSystem> results, or <organization> results.
More than one result MAY be returned, and the results MAY be of mixed types.
The <findNetworksByNameServer> element allows a search for IP networks based on their associated name servers.
The <nameServer> element contains the fully qualified domain name of the name server.
The optional search element <returnedResultType> MUST restrict the results to IPv4 networks or IPv6 networks using the values '
The results from this query MUST be <ipv4Network> or <ipv6Network
More than one result MAY be returned, and the results MAY be of mixed types.
Some of the queries above have similar query constraints for searching on contacts.
This section describes those common parameters.
> allows the query to be constrained based on the common name of the contact.
This constraint is an "exactOrPartialMatchParameter" (see Section 3.1.11).
This group also contains all the members of the "commonSearchGroup" (see Section 3.1.10).
Some of the queries above have similar query constraints for searching on contacts.
This section describes those common parameters.
> constrains the query based on the e mail address of the contact.
This constraint is a "domainResource" type (see Section 3.1.11).
The <city>, <region>, <country>, and <postalCode> elements restrict the scope of the query based on the city, region, country, or postal code of the contact, respectively.
These constraints are all "exactMatchParameter" types (see Section 3.1.11).
The contents of <country> MUST be compliant with ISO 3166 [9] two character country codes.
Some of the queries above have constraints that match strings using matching parameters.
This section describes those matching parameters.
Elements of type "exactMatchParameter" will have one child element of <exactMatch
The contents of this child element are to match exactly in the use of the constraint.
Elements of type "partialMatchParameter" will have either a <beginsWith> child element with an optional <endsWith> child element or an <endsWith> child element.
The content of the <beginsWith> element specifies the beginning character sequence for the constraint.
The content of the <endsWith> element specifies the ending character sequence for the constraint.
Elements of type "exactOrPartialMatchParameter" can have either the child element allowed with the "exactMatchParameter" type or the child elements allowed with the "partialMatchParameter" type.
Elements of type "domainResource" can have either the child element allowed with the "exactMatchParameter" type or a child element of <inDomain>.
This parameter type is meant to match email, SIP, Extensible Messaging and Presence Protocol (XMPP), and other types of "user@domain" addresses.
When this parameter is specified with the <exactMatch> child element, the constraint is based on the whole email address.
When this parameter is specified with the <inDomain> child element, the constraint is based on any email address within the domain given.
The <ipv4Network> and <ipv6Network> share a common definition of 'ipNetworkType'.
It has the following child elements:  <networkHandle
> contains the registry unique assigned handle for this network.
> contains a human friendly name for the network.
> contains the first IP address of the network.
> contains the last IP address of the network.
> contains a string denoting the type of network.
<networkTypeInfo> is an entity reference to a definition of the values explained in a plain natural language.
The referent MUST be a <simpleEntity> as defined by [2].
<nameServer> contains the domain name of a nameserver responsible for reverse DNS mapping for this network.
<organization> contains an entity reference to the organization assigned this network.
The referent MUST be an <organization> (Section 3.2.4) result.
The referent MUST be an <ipv4Network> (Section 3.2.1) result if this reference is a child of <ipv4Network>.
The referent MUST be an <ipv6Network> (Section 3.2.1) result if this reference is a child of <ipv6Network>.
<noParent> signifies that this network has no parent network.
Contact references (see Section 3.2.5).
Common child elements (see Section 3.2.6).
The <autonomousSystem> element represents an assigned or allocated autonomous system number range.
It has the following children:  <asHandle
> contains a registry unique assigned handle for this autonomous system number range.
> contains an integer indicating the starting number for the autonomous system number range.
asNumberEnd> contains an integer indicating the ending number for the autonomous system number range.
> contains a human readable name for this autonomous system.
<organization> contains an entity reference to the organization assigned or allocated this autonomous system number range.
The referent MUST be an <organization> (Section 3.2.4) result.
The referent MUST be an <autonomousSystem
> signifies that this autonomous system has no parent autonomous system.
Contact references (see Section 3.2.5).
Common child elements (see Section 3.2.6).
> element represents the registration of a point of contact.
It has the following child elements:  <contactHandle>
contains the registry unique assigned handle for this contact.
> specifies the name of the contact.
> contains the email address for this contact.
<sip> contains the sip address for this contact.
<organization> contains an entity reference to the organization associated with this contact.
The referent MUST be an <organization> (Section 3.2.4) result.
> contains information for reaching the contact via postal mail.
> contains the address for this contact.
> contains the city where this contact is located.
> contains the national region where this contact is located.
> contains the postal code where this contact is located.
<country> contains the country code where this contact is located.
This MUST be compliant with ISO 3166 [9] two character country codes.
> contains child elements describing the phone number of the contact.
The child elements are <number>, <extension>, and <type
Common child elements (see Section 3.2.6).
> element represents an organization.
It has the following child elements:  <name
> contains the name of the organization.
<id> contains a registry unique identifier for this organization.
> contains the email address for this organization.
> contains a information for reaching the organization via postal mail.
> contains the address for this organization.
> contains the city where this organization is located.
> contains the national region where this organization is located.
> contains the postal code where this organization is located.
<country> contains the country code where this organization is located.
This MUST be compliant with ISO 3166 [9] two character country codes.
> contains child elements describing the phone number of the contact.
The child elements are <number>, <extension>, and <type
Contact references (see Section 3.2.5).
Common child elements (see Section 3.2.6).
The registry schema defined in Section 5 normalizes out a group of common elements that are used most among the result types.
The group has the following elements:  <numberResourceRegistry> contains an entity reference to the number resource registry of record.
The referent MUST be an <organization> (Section 3.2.4) result.
> contains the date of first registration.
> contains the date when the registration was last updated.
seeAlso> element contains an entity reference specifying an entity that is indirectly associated with this result object.
This element can be used for comments and remarks.
The following types of entity classes are recognized by the <lookupEntity> query of IRIS for this registry:
ipv4 handle a registry unique identifier specifying an IPv4 network.
Queries with these names will yield a <ipv4Network> result.
ipv6 handle a registry unique identifier specifying an IPv6 network.
Queries with these names will yield a <ipv6Network> result.
as handle a registry unique identifier specifying an autonomous system.
It yields a result of <autonomousSystem
contact handle a registry unique identifier of a contact.
Yields a result of <contact
a registry unique identifier of an organization.
Yields a result of <organization
The entity names of these entity classes are case insensitive.
Terminology for Nesting of Networks
The following terms are defined for describing the nesting of IP networks.
Given two networks, A and B, A is more specific than B if network B includes all space of network A, and if network B is larger than network A.  Less specific: Opposite of more specific.
The network B is less specific than network A if network A's space is completely included in network B and if network A is smaller than network B.
Most specific: Given a set of networks, the network or networks that are more specific than zero or more specific of the other networks in the set, and that are not less specific of any of the networks in the set.
Given a set of networks, the network or networks that are not more specific to any of the other networks in the set.
A, B, C, and D as follows:
Network A is less specific than B, C, and
Networks F and G are most specific networks.
The following definitions assume that there are no overlapping networks in the database.
A network overlaps with another one when they encompass each other's space partially.
Nesting Example 3 Here, networks A and B are overlapping networks because network A encompasses network B's space partially, and network B encompasses network A's space partially.
, networks C and D are NOT overlapping networks because even if network D encompasses a part of network C's space, network C does not encompass network D's space partially (it encompasses network D completely).
The address directory can contain more than one network with the same range.
They are said to be exact match networks.
The parent/child relationship in the internet address directory is unidirectional.
That is, there might also be parent/child relationship with exact match networks, but a network cannot be a parent and a child of its exact match network at the same time.
The following are nested matching searches:
(1) all less specifics search: Given a range, find all the networks that contain that range (i.e., all less specifics and exact matches).
These networks are the networks that fulfill the following condition: (start(network)
(2) one level less specifics search: Given a range, find only the most specific network that contains that range (could be multiple networks, but usually single).
This is the set of networks from (1), with the provision that no network in the return set is contained by any other network in the set.
If there are exact match networks in the set from (1), they both must appear in the result set.
The result set may contain a network that is exact match to the query range, if the search allows exact matches.
Nesting Example 6 Here, the query must return B and C (they are exact matches of each other).
Here, the query must return B and C (they are exact matches of each other).
D must not be in the result set, as it is exact match to the query if the search specifies that exact matches of query range should not appear in the result set.
In Figure 7, if the search specifies that exact matches to the query range are allowed in the result set, then only D must be returned.
(3) all more specifics search: Given a range, find all the networks that are fully within that range.
The search contains a flag that specifies if an exact match to the query range should appear in the result set or not.
Thus, the result set may or may not contain the exact match to the query range, as instructed by the search.
(4) one level more specifics search: Given a range, find only the least specific networks that are fully within that range.
This is the set of networks from (3), with the provision that no network in the return set contains any other network in the return set.
) exact match search: Given a range, find the networks that begin and end on the same IP addresses as the range.
That is, the networks that fulfill the following condition:
(6) Given a range, find the exact match network if it exists, and if it does not, perform the (2) search.
The following are parent child relationship searches: (7)
Given a network handle, find the network that is the direct (one level up) parent of the network with the given handle.
(8) Given a network handle, find the network or networks that are direct
(one level down) children of the network with the handle given.
This IP address registry is specified in the XML Schema notation.
The formal syntax presented here is a complete schema representation suitable for automated validation of an XML instance when combined with the formal schema syntax of IRIS.
<schema xmlns "http://www.w3.org/2001/XMLSchema" xmlns:areg "urn:ietf:params:xml:ns:areg1
<documentation> IP address registry schema derived from IRIS schema </documentation> </annotation> <!
<element name "name" type "areg:exactOrPartialMatchParameter
<element name "findNetworksByName" type "areg:findByNameType" substitutionGroup "iris:query" />
<element name "ipv4Address" type "areg:addressRangeType" />
queryType"> <sequence> <element name "asNumberStart" type "token" /
> <element name "asNumberEnd" type "token" minOccurs "0" maxOccurs "1" /
> <element name "specificity"> <complexType> <simpleContent>
<element name "findASByNumber" type "areg:
<choice> <group ref "areg:contactSearchGroup" />
> </element> <element name "language" type "language" minOccurs "0" maxOccurs "
queryType"> <sequence> <element name "networkHandle" type "token" /
<complexType name "findContactsType"> <complexContent> <extension base "iris:queryType"> <sequence>
<element name "organizationName" type "areg:exactOrPartialMatchParameter
<element name "commonName" type "areg:exactOrPartialMatchParameter
<element name "region" type "areg:
<element name "postalCode" type "areg:
<complexType name "exactMatchParameter"> <group ref "areg:exactMatchGroup" /
<element name "beginsWith"> <simpleType> <restriction base "token"> <minLength value "1"/
> </group> <element name "endsWith"> <simpleType> <restriction base "token"> <minLength value "1"/
"> <sequence> <element name "exactMatch" type "normalizedString" /
> <complexContent> <extension base "iris:resultType
"> <sequence> <element name "networkHandle" type "token" minOccurs "
entityType" minOccurs "0" maxOccurs "1" /
<element name "ipv4Network" type "areg:ipNetworkType" substitutionGroup "iris:result" />
<element name "asHandle" type "token" minOccurs "0" maxOccurs "1
<element name "organization" type "iris:
entityType" minOccurs "0" maxOccurs "1" /
"> <sequence> <element name "contactHandle" type "token" minOccurs "
<element name "address" type "string" minOccurs "0" maxOccurs "1
> <element name "country" type "token" minOccurs "0" maxOccurs "1
<element name "extension" type "normalizedString" minOccurs
> </element> <group ref "areg:commonGroup" /
"> <sequence> <element name "name" type "normalizedString" minOccurs "
<element name "postalAddress" minOccurs "0" maxOccurs "unbounded"> <complexType> <sequence>
<element name "address" type "string" minOccurs "0" maxOccurs "1
> <element name "country" type "token" minOccurs "0" maxOccurs "1
<element name "extension" type "normalizedString" minOccurs
<element name "numberResourceRegistry" type "iris:entityType" minOccurs "0" maxOccurs "1" /
> <element name "registrationDate" type "dateTime" minOccurs "0" maxOccurs "1
BEEP Transport Compliance IRIS allows several extensions of the core capabilities.
This section outlines those extensions allowable by IRIS BEEP [3].
This registry type uses the default message pattern as described in IRIS BEEP [3].
This registry type uses the default server authentication method as described in IRIS BEEP [3].
Application Service Label See Section 9 for the application service label registration.
Operational Considerations Address registries do not have natural links to DNS.
Using reverse DNS tree presents problems for IP address delegation (for example, delegations do not fall into byte boundaries, unlike reverse DNS), and DNS does not currently contain any information regarding autonomous system delegation.
Therefore, in order for the top down resolution to operate properly, it is requested that the IAB instruct IANA to insert and maintain a NAPTR DNS resource record for areg.iris.arpa, as described in Section 9.
The top down alternative resolution method MUST be identified as 'top' in IRIS URIs.
The process for this condition is as follows:
The IRIS [2] direct resolution process is tried against areg.iris.arpa.
If the direct resolution process yields no server for which a connection can be made, then a negative response is returned, and no further action is taken.
It is RECOMMENDED that IRIS clients issuing AREG1 requests use the 'top' resolution method when no resolution method has been explicitly given by a user.
IRIS servers accepting AREG1 requests that seek information for which they are not authoritative SHOULD refer clients using the 'top' resolution method.
This document lays out no new considerations for internationalization beyond those specified in IRIS [2].
The following URN has been registered with IANA according to the IANA considerations defined in IRIS [2]:
The following S NAPTR application service label has been registered with IANA according to the IANA considerations defined in IRIS [2]:
Under instructions from the IAB, the IANA will create a new second level domain under .arpa called iris (i.e., iris.arpa.).
The contents of this new domain are to be under the control of the IAB.
Under instructions from the IAB, the IANA will insert and maintain a NAPTR DNS resource record in the iris.arpa. domain for the name areg.iris.arpa.
The initial contents for that record is: areg.iris.arpa.
This document lays out no new considerations for security precautions beyond those specified in IRIS [2].
Privacy Considerations Internet address registries store contact details and other information that may be abused.
The XML Schema defined in this document purposefully makes the inclusion of any data in a response an option that is dependent on the needs and policies of the Internet address registry serving the data.
Combined with the authentication mechanisms of an IRIS transfer protocol, Internet address registries may derive authorization policies to meet their needs without compromising general privacy policies.
As an example, the constituents of an Internet address registry may create a policy whereby NOC contact email addresses are only to be available to members of the Internet address registry.
To institute this policy, the XML elements for NOC contacts will never appear in a response to a user that has not been authenticated to be a member of the Internet address registry.
Appendix B.  Example Requests and Responses
The examples in this section use the string "C:" to denote data sent by a client to a server and the string "S:" to denote data sent by a server to a client.
The following is an example of entity lookup for the contact handle of 'JN560 RIR1'.
> Figure 11: Example 1 B.2.
The following example shows a query to find the IP networks containing a given address.
NET 192 0 2 128 1"
NET 192 0 2 0 1"/
NET 192 0 2 0 2"
UU 192 0 2 0
NET 192 0 2 0 1"/
<iris:property name "portability" language "en"
Addresses within this block are non portable.
Example 2 Appendix C.  Specificity Examples
This section includes examples to clarify specificity options for network and ASN searches.
192.0.2.9 Contents of the DB Figure 13:
192.0.2.9 Exact match (1) Result:
192.0.2.0  192.0.2.12 Exact match (2)
false Result: C, F, & G
(A is not included; exact match) Figure 16:
A, C, F, & G (A is included; exact match)
One level more specifics, allowEquivalences
false Result: C Figure 18:
One level more specifics, allowEquivalences
A Figure 19: Specificity Example 7
A, C, & G (G is included; exact match)
false Result: A & C (G is not included; exact match)
One level less specifics, allowEquivalences
true Result: G (the exact match) Figure 22: Specificity Example 10
One level less specifics, allowEquivalences
false Result: C Figure 23:
One level less specifics, allowEquivalences
Contributors David Blacka and Tim Christensen made substantial contributions to this document.
