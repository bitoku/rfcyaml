- title: __initial_text__
  contents:
  - '        Application of Internet Cache Protocol (ICP), version 2

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  This memo\n   does not specify an Internet standard of any kind.  Distribution\
    \ of\n   this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes the application of ICPv2 (Internet Cache\n\
    \   Protocol version 2, RFC2186) to Web caching.  ICPv2 is a lightweight\n   message\
    \ format used for communication among Web caches.  Several\n   independent caching\
    \ implementations now use ICP[3,5], making it\n   important to codify the existing\
    \ practical uses of ICP for those\n   trying to implement, deploy, and extend\
    \ its use.\n   ICP queries and replies refer to the existence of URLs (or objects)\n\
    \   in neighbor caches.  Caches exchange ICP messages and use the\n   gathered\
    \ information to select the most appropriate location from\n   which to retrieve\
    \ an object.  A companion document (RFC2186)\n   describes the format and syntax\
    \ of the protocol itself.  In this\n   document we focus on issues of ICP deployment,\
    \ efficiency, security,\n   and interaction with other aspects of Web traffic\
    \ behavior.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n     8.2. Parents, Siblings, Hits and Misses.........................\
    \ 16\n     8.3. Different Roles of ICP..................................... 17\n\
    \     8.4. Protocol Design Flaws of ICPv2............................. 17\n  \
    \ 9.   Security Considerations...................................... 18\n    \
    \ 9.1. Inserting Bogus ICP Queries................................ 19\n     9.2.\
    \ Inserting Bogus ICP Replies................................ 19\n     9.3. Eavesdropping..............................................\
    \ 20\n     9.4. Blocking ICP Messages...................................... 20\n\
    \     9.5. Delaying ICP Messages...................................... 20\n  \
    \   9.6. Denial of Service.......................................... 20\n    \
    \ 9.7. Altering ICP Fields........................................ 21\n     9.8.\
    \ Summary.................................................... 22\n   10.  References...................................................\
    \ 23\n   11.  Acknowledgments.............................................. 24\n\
    \   12.  Authors' Addresses........................................... 24\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   ICP is a lightweight message format used for communicating\
    \ among Web\n   caches.  ICP is used to exchange hints about the existence of\
    \ URLs in\n   neighbor caches.  Caches exchange ICP queries and replies to gather\n\
    \   information for use in selecting the most appropriate location from\n   which\
    \ to retrieve an object.\n   This document describes the implementation of ICP\
    \ in software.  For a\n   description of the protocol and message format, please\
    \ refer to the\n   companion document (RFC2186).  We avoid making judgments about\n\
    \   whether or how ICP should be used in particular Web caching\n   configurations.\
    \  ICP may be a \"net win\" in some situations, and a\n   \"net loss\" in others.\
    \  We recognize that certain practices described\n   in this document are suboptimal.\
    \ Some of these exist for historical\n   reasons.  Some aspects have been improved\
    \ in later versions.  Since\n   this document only serves to describe current\
    \ practices, we focus on\n   documenting rather than evaluating.  However, we\
    \ do address known\n   security problems and other shortcomings.\n   The remainder\
    \ of this document is written as follows.  We first\n   describe Web cache hierarchies,\
    \ explain motivation for using ICP, and\n   demonstrate how to configure its use\
    \ in cache hierarchies.  We then\n   provide a step-by-step description of an\
    \ ICP query-response\n   transaction.  We then discuss ICP interaction with firewalls,\
    \ and\n   briefly touch on multicasting ICP.  We end with lessons with have\n\
    \   learned during the protocol development and deployement thus far, and\n  \
    \ the canonical security considerations.\n   ICP was initially developed by Peter\
    \ Danzig, et. al.  at the\n   University of Southern California as a central part\
    \ of hierarchical\n   caching in the Harvest research project[3].\n"
- title: 2.  Web Cache Hierarchies
  contents:
  - "2.  Web Cache Hierarchies\n   A single Web cache will reduce the amount of traffic\
    \ generated by the\n   clients behind it.  Similarly, a group of Web caches can\
    \ benefit by\n   sharing another cache in much the same way.  Researchers on the\n\
    \   Harvest project envisioned that it would be important to connect Web\n   caches\
    \ hierarchically.  In a cache hierarchy (or mesh) one cache\n   establishes peering\
    \ relationships with its neighbor caches.  There\n   are two types of relationship:\
    \ parent and sibling.  A parent cache is\n   essentially one level up in a cache\
    \ hierarchy.  A sibling cache is on\n   the same level.  The terms \"neighbor\"\
    \ and \"peer\" are used to refer to\n   either parents or siblings which are a\
    \ single \"cache-hop\" away.\n   Figure 1 shows a simple hierarchy configuration.\n\
    \   But what does it mean to be \"on the same level\" or \"one level up?\"\n \
    \  The general flow of document requests is up the hierarchy.  When a\n   cache\
    \ does not hold a requested object, it may ask via ICP whether\n   any of its\
    \ neighbor caches has the object.  If any of the neighbors\n   does have the requested\
    \ object (i.e., a \"neighbor hit\"), then the\n   cache will request it from them.\
    \  If none of the neighbors has the\n   object (a \"neighbor miss\"), then the\
    \ cache must forward the request\n   either to a parent, or directly to the origin\
    \ server.  The essential\n   difference between a parent and sibling is that a\
    \ \"neighbor hit\" may\n   be fetched from either one, but a \"neighbor miss\"\
    \ may NOT be fetched\n   from a sibling.  In other words, in a sibling relationship,\
    \ a cache\n   can only ask to retrieve objects that the sibling already has cached,\n\
    \   whereas the same cache can ask a parent to retrieve any object\n   regardless\
    \ of whether or not it is cached.  A parent cache's role is\n     T H E   I N\
    \ T E R N E T\n   ===========================\n       |          ||\n       |\
    \          ||\n       |          ||\n       |          ||\n       |      +----------------------+\n\
    \       |      |                      |\n       |      |        PARENT       \
    \ |\n       |      |        CACHE         |\n       |      |                 \
    \     |\n       |      +----------------------+\n       |          ||\n     DIRECT\
    \       ||\n   RETRIEVALS     ||\n       |          ||\n       |         HITS\n\
    \       |         AND\n       |        MISSES\n       |       RESOLVED\n     \
    \  |          ||\n       |          ||\n       |          ||\n       V       \
    \   \\/\n   +------------------+                    +------------------+\n   |\
    \                  |                    |                  |\n   |      LOCAL\
    \       |/--------HITS-------|     SIBLING      |\n   |      CACHE       |\\------RESOLVED-----|\
    \      CACHE       |\n   |                  |                    |           \
    \       |\n   +------------------+                    +------------------+\n \
    \     |  |  |  |  |\n      |  |  |  |  |\n      |  |  |  |  |\n      V  V  V \
    \ V  V\n   ===================\n      CACHE CLIENTS\n   FIGURE 1: A Simple Web\
    \ cache hierarchy.  The local cache can retrieve\n   hits from sibling caches,\
    \ hits and misses from parent caches, and\n   some requests directly from origin\
    \ servers.\n   to provide \"transit\" for the request if necessary, and accordingly\n\
    \   parent caches are ideally located within or on the way to a transit\n   Internet\
    \ service provider (ISP).\n   Squid and Harvest allow for complex hierarchical\
    \ configurations.  For\n   example, one could specify that a given neighbor be\
    \ used for only a\n   certain class of requests, such as URLs from a specific\
    \ DNS domain.\n   Additionally, it is possible to treat a neighbor as a sibling\
    \ for\n   some requests and as a parent for others.\n   The cache hierarchy model\
    \ described here includes a number of\n   features to prevent top-level caches\
    \ from becoming choke points.  One\n   is the ability to restrict parents as just\
    \ described previously (by\n   domains).  Another optimization is that the cache\
    \ only forwards\n   cachable requests to its neighbors.  A large class of Web\
    \ requests\n   are inherently uncachable, including: requests requiring certain\n\
    \   types of authentication, session-encrypted data, highly personalized\n   responses,\
    \ and certain types of database queries.  Lower level caches\n   should handle\
    \ these requests directly rather than burdening parent\n   caches.\n"
- title: 3.  What is the Added Value of ICP?
  contents:
  - "3.  What is the Added Value of ICP?\n   Although it is possible to maintain cache\
    \ hierarchies without using\n   ICP, the lack of ICP or something similar prohibits\
    \ the existence of\n   sibling meta-communicative relationships, i.e., mechanisms\
    \ to query\n   nearby caches about a given document.\n   One concern over the\
    \ use of ICP is the additional delay that an ICP\n   query/reply exchange contributes\
    \ to an HTTP transaction.  However, if\n   the ICP query can locate the object\
    \ in a nearby neighbor cache, then\n   the ICP delay may be more than offset by\
    \ the faster delivery of the\n   data from the neighbor.  In order to minimize\
    \ ICP delays, the caches\n   (as well as the protocol itself) are designed to\
    \ return ICP requests\n   quickly.  Indeed, the application does minimal processing\
    \ of the ICP\n   request, most ICP-related delay is due to transmission on the\n\
    \   network.\n   ICP also serves to provide an indication of neighbor reachability.\n\
    \   If ICP replies from a neighbor fail to arrive, then either the\n   network\
    \ path is congested (or down), or the cache application is not\n   running on\
    \ the ICP-queried neighbor machine.  In either case, the\n   cache should not\
    \ use this neighbor at this time.  Additionally,\n   because an idle cache can\
    \ turn around the replies faster than a busy\n   one, all other things being equal,\
    \ ICP provides some form of load\n   balancing.\n"
- title: 4.  Example Configuration of ICP Hierarchy
  contents:
  - "4.  Example Configuration of ICP Hierarchy\n   Configuring caches within a hierarchy\
    \ requires establishing peering\n   relationships, which currently involves manual\
    \ configuration at both\n   peering endpoints.  One cache must indicate that the\
    \ other is a\n   parent or sibling.  The other cache will most likely have to\
    \ add the\n   first cache to its access control lists.\n   Below we show some\
    \ sample configuration lines for a hypothetical\n   situation.  We have two caches,\
    \ one operated by an ISP, and another\n   operated by a customer.  First we describe\
    \ how the customer would\n   configure his cache to peer with the ISP.  Second,\
    \ we describe how\n   the ISP would allow the customer access to its cache.\n"
- title: 4.1.  Configuring the `proxy.customer.org' cache
  contents:
  - "4.1.  Configuring the `proxy.customer.org' cache\n   In Squid, to configure parents\
    \ and siblings in a hierarchy, a\n   `cache_host' directive is entered into the\
    \ configuration file.  The\n   format is:\n       cache_host hostname type http-port\
    \ icp-port [options]\n   Where type is either `parent', `sibling', or `multicast'.\
    \  For our\n   example, it would be:\n       cache_host cache.isp.com parent 8080\
    \ 3130\n   This configuration will cause the customer cache to resolve most\n\
    \   cache misses through the parent (`cgi-bin' and non-GET requests would\n  \
    \ be resolved directly).  Utilizing the parent may be undesirable for\n   certain\
    \ servers, such as servers also in the customer.org domain.  To\n   always handle\
    \ such local domains directly, the customer would add\n   this to his configuration\
    \ file:\n       local_domain customer.org\n   It may also be the case that the\
    \ customer wants to use the ISP cache\n   only for a specific subset of DNS domains.\
    \  The need to limit\n   requests this way is actually more common for higher\
    \ levels of cache\n   hierarchies, but it is illustrated here nonetheless.  To\
    \ limit the\n   ISP cache to a subset of DNS domains, the customer would use:\n\
    \       cache_host_domain cache.isp.com com net org\n   Then, any requests which\
    \ are NOT in the .com, .net, or .org domains\n   would be handled directly.\n"
- title: 4.2.  Configuring the `cache.isp.com' cache
  contents:
  - "4.2.  Configuring the `cache.isp.com' cache\n   To configure the query-receiving\
    \ side of the cache peer\n   relationship one uses access lists, similar to those\
    \ used in routing\n   peers.  The access lists support a large degree of customization\
    \ in\n   the peering relationship.  If there are no access lines present, the\n\
    \   cache allows the request by default.\n   Note that the cache.isp.com cache\
    \ need not explicitly specify the\n   customer cache as a peer, nor is the type\
    \ of relationship encoded\n   within the ICP query itself.  The access control\
    \ entries regulate the\n   relationships between this cache and its neighbors.\
    \  For our example,\n   the ISP would use:\n       acl src Customer  proxy.customer.org\n\
    \       http_access allow Customer\n       icp_access  allow Customer\n   This\
    \ defines an access control entry named `Customer' which specifies\n   a source\
    \ IP address of the customer cache machine.  The customer\n   cache would then\
    \ be allowed to make any request to both the HTTP and\n   ICP ports (including\
    \ cache misses).  This configuration implies that\n   the ISP cache is a parent\
    \ of the customer.\n   If the ISP wanted to enforce a sibling relationship, it\
    \ would need to\n   deny access to cache misses.  This would be done as follows:\n\
    \       miss_access deny Customer\n   Of course the ISP should also communicate\
    \ this to the customer, so\n   that the customer will change his configuration\
    \ from parent to\n   sibling.  Otherwise, if the customer requests an object not\
    \ in the\n   ISP cache, an error message is generated.\n"
- title: 5.  Applying the Protocol
  contents:
  - "5.  Applying the Protocol\n   The following sections describe the ICP implementation\
    \ in the\n   Harvest[3] (research version) and Squid Web cache[5] packages.  In\n\
    \   terms of version numbers, this means version 1.4pl2 for Harvest and\n   version\
    \ 1.1.10 for Squid.\n   The basic sequence of events in an ICP transaction is\
    \ as follows:\n   1.   Local cache receives an HTTP[1] request from a cache client.\n\
    \   2.   The local cache sends ICP queries (section 5.1).\n   3.   The peer cache(s)\
    \ receive the queries and send ICP replies\n        (section 5.2).\n   4.   The\
    \ local cache receives the ICP replies and decides where to\n        forward the\
    \ request (section 5.3).\n"
- title: 5.1.  Sending ICP Queries
  contents:
  - '5.1.  Sending ICP Queries

    '
- title: 5.1.1.  Determine whether to use ICP at all
  contents:
  - "5.1.1.  Determine whether to use ICP at all\n   Not every HTTP request requires\
    \ an ICP query to be sent.  Obviously,\n   cache hits will not need ICP because\
    \ the request is satisfied\n   immediately.  For origin servers very close to\
    \ the cache, we do not\n   want to use any neighbor caches.  In Squid and Harvest,\
    \ the\n   administrator specifies what constitutes a `local' server with the\n\
    \   `local_domain' and `local_ip' configuration options.  The cache\n   always\
    \ contacts a local server directly, never querying a peer cache.\n   There are\
    \ other classes of requests that the cache (or the\n   administrator) may prefer\
    \ to forward directly to the origin server.\n   In Squid and Harvest, one such\
    \ class includes all non-GET request\n   methods.  A Squid cache can also be configured\
    \ to not use peers for\n   URLs matching the `hierarchy_stoplist'.\n   In order\
    \ for an HTTP request to yield an ICP transaction, it must:\n   o    not be a\
    \ cache hit\n   o    not be to a local server\n   o    be a GET request, and\n\
    \   o    not match the `hierarchy_stoplist' configuration.\n   We call this a\
    \ \"hierarchical\" request.  A \"non-hierarchical\" request\n   is one that doesn't\
    \ generate any ICP traffic.  To avoid processing\n   requests that are likely\
    \ to lower cache efficiency, one can configure\n   the cache to not consult the\
    \ hierarchy for URLs that contain certain\n   strings (e.g. `cgi_bin').\n"
- title: 5.1.2.  Determine which peers to query
  contents:
  - "5.1.2.  Determine which peers to query\n   By default, a cache sends an ICP_OP_QUERY\
    \ message to each peer,\n   unless any one of the following are true:\n   o  \
    \  Restrictions prevent querying a peer for this request, based on\n        the\
    \ configuration directive `cache_host_domain', which specifies\n        a set\
    \ of DNS domains (from the URLs) for which the peer should\n        or should\
    \ not be queried.  In Squid, a more flexible directive\n        ('cache_host_acl')\
    \ supports restrictions on other parts of the\n        request (method, port number,\
    \ source, etc.).\n   o    The peer is a sibling, and the HTTP request includes\
    \ a \"Pragma:\n        no-cache\" header.  This is because the sibling would be\
    \ asked to\n        transit the request, which is not allowed.\n   o    The peer\
    \ is configured to never be sent ICP queries (i.e. with\n        the `no-query'\
    \ option).\n   If the determination yields only one queryable ICP peer, and the\n\
    \   Squid configuration directive `single_parent_bypass' is set, then one\n  \
    \ can bypass waiting for the single ICP response and just send the HTTP\n   request\
    \ directly to the peer cache.\n   The Squid configuration option `source_ping'\
    \ configures a Squid cache\n   to send a ping to the original source simultaneous\
    \ with its ICP\n   queries, in case the origin is closer than any of the caches.\n"
- title: 5.1.3.  Calculate the expected number of ICP replies
  contents:
  - "5.1.3.  Calculate the expected number of ICP replies\n   Harvest and Squid want\
    \ to maximize the chance to get a HIT reply from\n   one of the peers.  Therefore,\
    \ the cache waits for all ICP replies to\n   be received.  Normally, we expect\
    \ to receive an ICP reply for each\n   query sent, except:\n   o    When the peer\
    \ is believed to be down.  If the peer is down Squid\n        and Harvest continue\
    \ to send it ICP queries, but do not expect\n        the peer to reply.  When\
    \ an ICP reply is again received from the\n        peer, its status will be changed\
    \ to up.\n        The determination of up/down status has varied a little bit\
    \ as\n        the Harvest and Squid software evolved.  Both Harvest and Squid\n\
    \        mark a peer down when it fails to reply to 20 consecutive ICP\n     \
    \   queries.  Squid also marks a peer down when a TCP connection\n        fails,\
    \ and up again when a diagnostic TCP connection succeeds.\n   o    When sending\
    \ to a multicast address.  In this case we'll\n        probably expect to receive\
    \ more than one reply, and have no way\n        to definitively determine how\
    \ many to expect.  We discuss\n        multicast issues in section 7 below.\n"
- title: 5.1.4.  Install timeout event
  contents:
  - "5.1.4.  Install timeout event\n   Because ICP uses UDP as underlying transport,\
    \ ICP queries and replies\n   may sometimes be dropped by the network.  The cache\
    \ installs a\n   timeout event in case not all of the expected replies arrive.\
    \  By\n   default Squid and Harvest use a two-second timeout.  If object\n   retrieval\
    \ has not commenced when the timeout occurs, a source is\n   selected as described\
    \ in section 5.3.9 below.\n"
- title: 5.2.  Receiving ICP Queries and Sending Replies
  contents:
  - "5.2.  Receiving ICP Queries and Sending Replies\n   When an ICP_OP_QUERY message\
    \ is received, the cache examines it and\n   decides which reply message is to\
    \ be sent.  It will send one of the\n   following reply opcodes, tested for use\
    \ in the order listed:\n"
- title: 5.2.1.  ICP_OP_ERR
  contents:
  - "5.2.1.  ICP_OP_ERR\n   The URL is extracted from the payload and parsed.  If\
    \ parsing fails,\n   an ICP_OP_ERR message is returned.\n"
- title: 5.2.2.  ICP_OP_DENIED
  contents:
  - "5.2.2.  ICP_OP_DENIED\n   The access controls are checked.  If the peer is not\
    \ allowed to make\n   this request, ICP_OP_DENIED is returned.  Squid counts the\
    \ number of\n   ICP_OP_DENIED messages sent to each peer.  If more than 95% of\
    \ more\n   than 100 replies have been denied, then no reply is sent at all.\n\
    \   This prevents misconfigured caches from endlessly sending unnecessary\n  \
    \ ICP messages back and forth.\n"
- title: 5.2.3.  ICP_OP_HIT
  contents:
  - "5.2.3.  ICP_OP_HIT\n   If the cache reaches this point without already matching\
    \ one of the\n   previous  opcodes, it means the request is allowed and we must\n\
    \   determine if it will be HIT or MISS, so we check if the URL exists in\n  \
    \ the local cache.  If so, and if the cached entry is fresh for at\n   least the\
    \ next 30 seconds, we can return an ICP_OP_HIT message.  The\n   stale/fresh determination\
    \ uses the local refresh (or TTL) rules.\n   Note that a race condition exists\
    \ for ICP_OP_HIT replies to sibling\n   peers.  The ICP_OP_HIT means that a subsequent\
    \ HTTP request for the\n   named URL would result in a cache hit.  We assume that\
    \ the HTTP\n   request will come very quickly after the ICP_OP_HIT.  However,\
    \ there\n   is a slight chance that the object might be purged from this cache\n\
    \   before the HTTP request is received.  If this happens, and the\n   replying\
    \ peer has applied Squid's `miss_access' configuration then\n   the user will\
    \ receive a very confusing access denied message.\n"
- title: 5.2.3.1.  ICP_OP_HIT_OBJ
  contents:
  - "5.2.3.1.  ICP_OP_HIT_OBJ\n   Before returning the ICP_OP_HIT message, we see\
    \ if we can send an\n   ICP_OP_HIT_OBJ message instead.  We can use ICP_OP_HIT_OBJ\
    \ if:\n   o    The ICP_OP_QUERY message had the ICP_FLAG_HIT_OBJ flag set.\n \
    \  o    The entire object (plus URL) will fit in an ICP message.  The\n      \
    \  maximum ICP message size is 16 Kbytes, but an application may\n        choose\
    \ to set a smaller maximum value for ICP_OP_HIT_OBJ\n        replies.\n   Normally\
    \ ICP replies are sent immediately after the query is\n   received, but the ICP_OP_HIT_OBJ\
    \ message cannot be sent until the\n   object data is available to copy into the\
    \ reply message.  For Squid\n   and Harvest this means the object must be \"swapped\
    \ in\" from disk if\n   it is not already in memory.  Therefore, on average, an\n\
    \   ICP_OP_HIT_OBJ reply will have higher latency than ICP_OP_HIT.\n"
- title: 5.2.4.  ICP_OP_MISS_NOFETCH
  contents:
  - "5.2.4.  ICP_OP_MISS_NOFETCH\n   At this point we have a cache miss.  ICP has\
    \ two types of miss\n   replies.  If the cache does not want the peer to request\
    \ the object\n   from it, it sends an ICP_OP_MISS_NOFETCH message.\n"
- title: 5.2.5.  ICP_OP_MISS
  contents:
  - "5.2.5.  ICP_OP_MISS\n   Finally, an ICP_OP_MISS reply is returned as the default.\
    \  If the\n   replying cache is a parent of the querying cache, the ICP_OP_MISS\n\
    \   indicates an invitation to fetch the URL through the replying cache.\n"
- title: 5.3.  Receiving ICP Replies
  contents:
  - "5.3.  Receiving ICP Replies\n   Some ICP replies will be ignored; specifically,\
    \ when any of the\n   following are true:\n   o    The reply message originated\
    \ from an unknown peer.\n   o    The object named by the URL does not exist.\n\
    \   o    The object is already being fetched.\n"
- title: 5.3.1.  ICP_OP_DENIED
  contents:
  - "5.3.1.  ICP_OP_DENIED\n   If more than 95% of more than 100 replies from a peer\
    \ cache have been\n   ICP_OP_DENIED, then such a high denial rate most likely\
    \ indicates a\n   configuration error, either locally or at the peer.  For this\
    \ reason,\n   no further queries will be sent to the peer for the duration of\
    \ the\n   cache process.\n"
- title: 5.3.2.  ICP_OP_HIT
  contents:
  - "5.3.2.  ICP_OP_HIT\n   Object retrieval commences immediately from the replying\
    \ peer.\n"
- title: 5.3.3.  ICP_OP_HIT_OBJ
  contents:
  - "5.3.3.  ICP_OP_HIT_OBJ\n   The object data is extracted from the ICP message\
    \ and the retrieval\n   is complete.  If there is some problem with the ICP_OP_HIT_OBJ\n\
    \   message (e.g. missing data) the reply will be treated like a standard\n  \
    \ ICP_OP_HIT.\n"
- title: 5.3.4.  ICP_OP_SECHO
  contents:
  - "5.3.4.  ICP_OP_SECHO\n   Object retrieval commences immediately from the origin\
    \ server because\n   the ICP_OP_SECHO reply arrived prior to any ICP_OP_HIT's.\
    \  If an\n   ICP_OP_HIT had arrived prior, this ICP_OP_SECHO reply would be\n\
    \   ignored because the retrieval has already started.\n"
- title: 5.3.5.  ICP_OP_DECHO
  contents:
  - "5.3.5.  ICP_OP_DECHO\n   An ICP_OP_DECHO reply is handled like an ICP_OP_MISS.\
    \  Non-ICP peers\n   must always be configured as parents; a non-ICP sibling makes\
    \ no\n   sense.  One serious problem with the ICP_OP_DECHO feature is that\n \
    \  since it bounces messages off the peer's UDP echo port, it does not\n   indicate\
    \ that the peer cache is actually running -- only that network\n   connectivity\
    \ exists between the pair.\n"
- title: 5.3.6.  ICP_OP_MISS
  contents:
  - "5.3.6.  ICP_OP_MISS\n   If the peer is a sibling, the ICP_OP_MISS reply is ignored.\n\
    \   Otherwise, the peer may be \"remembered\" for future use in case no HIT\n\
    \   replies are received later (section 5.3.9).\n   Harvest and Squid remember\
    \ the first parent to return an ICP_OP_MISS\n   message.  With Squid, the parents\
    \ may be weighted so that the \"first\n   parent to miss\" may not actually be\
    \ the first reply received.  We\n   call this the FIRST_PARENT_MISS.  Remember\
    \ that sibling misses are\n   entirely ignored, we only care about misses from\
    \ parents.  The parent\n   miss RTT's can be weighted because sometimes the closest\
    \ parent is\n   not the one people want to use.\n   Also, recent versions of Squid\
    \ may remember the parent with the\n   lowest RTT to the origin server, using\
    \ the ICP_FLAG_SRC_RTT option.\n   We call this the CLOSEST_PARENT_MISS.\n"
- title: 5.3.7.  ICP_OP_MISS_NOFETCH
  contents:
  - "5.3.7.  ICP_OP_MISS_NOFETCH\n   This reply is essentially ignored.  A cache must\
    \ not forward a\n   request to a peer that returns ICP_OP_MISS_NOFETCH.\n"
- title: 5.3.8.  ICP_OP_ERR
  contents:
  - "5.3.8.  ICP_OP_ERR\n   Silently ignored.\n"
- title: 5.3.9.  When all peers MISS.
  contents:
  - "5.3.9.  When all peers MISS.\n   For ICP_OP_HIT and ICP_OP_SECHO the request\
    \ is forwarded immediately.\n   For ICP_OP_HIT_OBJ there is no need to forward\
    \ the request.  For all\n   other reply opcodes, we wait until the expected number\
    \ of replies\n   have been received.  When we have all of the expected replies,\
    \ or\n   when the query timeout occurs, it is time to forward the request.\n \
    \  Since MISS replies were received from all peers, we must either\n   select\
    \ a parent cache or the origin server.\n   o    If the peers are using the ICP_FLAG_SRC_RTT\
    \ feature, we forward\n        the request to the peer with the lowest RTT to\
    \ the origin\n        server.  If the local cache is also measuring RTT's to origin\n\
    \        servers, and is closer than any of the parents, the request is\n    \
    \    forwarded directly to the origin server.\n   o    If there is a FIRST_PARENT_MISS\
    \ parent available, the request\n        will be forwarded there.\n   o    If\
    \ the ICP query/reply exchange did not produce any appropriate\n        parents,\
    \ the request will be sent directly to the origin server\n        (unless firewall\
    \ restrictions prevent it).\n"
- title: 5.4.  ICP Options
  contents:
  - "5.4.  ICP Options\n   The following options were added to Squid to support some\
    \ new\n   features while maintaining backward compatibility with the Harvest\n\
    \   implementation.\n"
- title: 5.4.1.  ICP_FLAG_HIT_OBJ
  contents:
  - "5.4.1.  ICP_FLAG_HIT_OBJ\n   This flag is off by default and will be set in an\
    \ ICP_OP_QUERY\n   message only if these three criteria are met:\n   o    It is\
    \ enabled in the cache configuration file with `udp_hit_obj\n        on'.\n  \
    \ o    The peer must be using ICP version 2.\n   o    The HTTP request must not\
    \ include the \"Pragma: no-cache\" header.\n"
- title: 5.4.2.  ICP_FLAG_SRC_RTT
  contents:
  - "5.4.2.  ICP_FLAG_SRC_RTT\n   This flag is off by default and will be set in an\
    \ ICP_OP_QUERY\n   message only if these two criteria are met:\n   o    It is\
    \ enabled in the cache configuration file with `query_icmp\n        on'.\n   o\
    \    The peer must be using ICP version 2.\n"
- title: 6.  Firewalls
  contents:
  - "6.  Firewalls\n   Operating a Web cache behind a firewall or in a private network\
    \ poses\n   some interesting problems.  The hard part is figuring out whether\
    \ the\n   cache is able to connect to the origin server.  Harvest and Squid\n\
    \   provide an `inside_firewall' configuration directive to list DNS\n   domains\
    \ on the near side of a firewall.  Everything else is assumed\n   to be on the\
    \ far side of a firewall.  Squid also has a `firewall_ip'\n   directive so that\
    \ inside hosts can be specified by IP addresses as\n   well.\n   In a simple configuration,\
    \ a Squid cache behind a firewall will have\n   only one parent cache (which is\
    \ on the firewall itself).  In this\n   case, Squid must use that parent for all\
    \ servers beyond the firewall,\n   so there is no need to utilize ICP.\n   In\
    \ a more complex configuration, there may be a number of peer caches\n   also\
    \ behind the firewall.  Here, ICP may be used to check for cache\n   hits in the\
    \ peers.  Occasionally, when ICP is being used, there may\n   not be any replies\
    \ received.  If the cache were not behind a\n   firewall, the request would be\
    \ forwarded directly to the origin\n   server.  But in this situation, the cache\
    \ must pick a parent cache,\n   either randomly or due to configuration information.\
    \  For example,\n   Squid allows a parent cache to be designated as a default\
    \ choice when\n   no others are available.\n"
- title: 7.  Multicast
  contents:
  - "7.  Multicast\n   For efficient distribution, a cache may deliver ICP queries\
    \ to a\n   multicast address, and neighbor caches may join the multicast group\n\
    \   to receive such queries.\n   Current practice is that caches send ICP replies\
    \ only to unicast\n   addresses, for several reasons:\n   o    Multicasting ICP\
    \ replies would not reduce the number of packets\n        sent.\n   o    It prevents\
    \ other group members from receiving unexpected\n        replies.\n   o    The\
    \ reply should follow unicast routing paths to indicate\n        (unicast) connectivity\
    \ between the receiver and the sender since\n        the subsequent HTTP request\
    \ will be unicast routed.\n   Trust is an important aspect of inter-cache relationships.\
    \  A Web\n   cache should not automatically trust any cache which replies to a\n\
    \   multicast ICP query.  Caches should ignore ICP messages from\n   addresses\
    \ not specifically configured as neighbors.  Otherwise, one\n   could easily pollute\
    \ a cache mesh by running an illegitimate cache\n   and having it join a group,\
    \ return ICP_OP_HIT for all requests, and\n   then deliver bogus content.\n  \
    \ When sending to multicast groups, cache administrators must be\n   careful to\
    \ use the minimum multicast TTL required to reach all group\n   members.  Joining\
    \ a multicast group requires no special privileges\n   and there is no way to\
    \ prevent anyone from joining \"your\" group.  Two\n   groups of caches utilizing\
    \ the same multicast address could overlap,\n   which would cause a cache to receive\
    \ ICP replies from unknown\n   neighbors.  The unknown neighbors would not be\
    \ used to retrieve the\n   object data, but the cache would constantly receive\
    \ ICP replies that\n   it must always ignore.\n   To prevent an overlapping cache\
    \ mesh, caches should thus limit the\n   scope of their ICP queries with appropriate\
    \ TTLs; an application such\n   as mtrace[6] can determine appropriate multicast\
    \ TTLs.\n   As mentioned in section 5.1.3, we need to estimate the number of\n\
    \   expected replies for an ICP_OP_QUERY message.  For unicast we expect\n   one\
    \ reply for each query if the peer is up.  However, for multicast\n   we generally\
    \ expect more than one reply, but have no way of knowing\n   exactly how many\
    \ replies to expect.  Squid regularly (every 15\n   minutes) sends out test ICP_OP_QUERY\
    \ messages to only the multicast\n   group peers.  As with a real ICP query, a\
    \ timeout event is installed\n   and the replies are counted until the timeout\
    \ occurs.  We have found\n   that the received count varies considerably.  Therefore,\
    \ the number\n   of replies to expect is calculated as a moving average, rounded\
    \ down\n   to the nearest integer.\n"
- title: 8.  Lessons Learned
  contents:
  - '8.  Lessons Learned

    '
- title: 8.1.  Differences Between ICP and HTTP
  contents:
  - "8.1.  Differences Between ICP and HTTP\n   ICP is notably different from HTTP.\
    \  HTTP supports a rich and\n   sophisticated set of features.  In contrast, ICP\
    \ was designed to be\n   simple, small, and efficient.  HTTP request and reply\
    \ headers consist\n   of lines of ASCII text delimited by a CRLF pair, whereas\
    \ ICP uses a\n   fixed size header and represents numbers in binary.  The only\
    \ thing\n   ICP and HTTP have in common is the URL.\n   Note that the ICP message\
    \ does not even include the HTTP request\n   method.  The original implementation\
    \ assumed that only GET requests\n   would be cachable and there would be no need\
    \ to locate non-GET\n   requests in neighbor caches.  Thus, the current version\
    \ of ICP does\n   not accommodate non-GET requests, although the next version\
    \ of this\n   protocol will likely include a field for the request method.\n \
    \  HTTP defines features that are important for caching but not\n   expressible\
    \ with the current ICP protocol.  Among these are Pragma:\n   no-cache, If-Modified-Since,\
    \ and all of the Cache-Control features of\n   HTTP/1.1.  An ICP_OP_HIT_OBJ message\
    \ may deliver an object which may\n   not obey all of the request header constraints.\
    \  These differences\n   between ICP and HTTP are the reason we discourage the\
    \ use of the\n   ICP_OP_HIT_OBJ feature.\n"
- title: 8.2.  Parents, Siblings, Hits and Misses
  contents:
  - "8.2.  Parents, Siblings, Hits and Misses\n   Note that the ICP message does not\
    \ have a field to indicate the\n   intent of the querying cache.  That is, nowhere\
    \ in the ICP request or\n   reply does it say that the two caches have a sibling\
    \ or parent\n   relationship.  A sibling cache can only respond with HIT or MISS,\
    \ not\n   \"you can retrieve this from me\" or \"you can not retrieve this from\n\
    \   me.\"  The querying cache must apply the HIT or MISS reply to its\n   local\
    \ configuration to prevent it from resolving misses through a\n   sibling cache.\
    \  This constraint is awkward, because this aspect of\n   the relationship can\
    \ be configured only in the cache originating the\n   requests, and indirectly\
    \ via the access controls configured in the\n   queried cache as described earlier\
    \ in section 4.2.\n"
- title: 8.3.  Different Roles of ICP
  contents:
  - "8.3.  Different Roles of ICP\n   There are two different understandings of what\
    \ exactly the role of\n   ICP is in a cache mesh.  One understanding is that ICP's\
    \ role is only\n   object location, specifically, to provide hints about whether\
    \ or not\n   a named object exists in a neighbor cache.  An implied assumption\
    \ is\n   that cache hits are highly desirable, and ICP is used to maximize the\n\
    \   chance of getting them.  If an ICP message is lost due to congestion,\n  \
    \ then nothing significant is lost; the request will be satisfied\n   regardless.\n\
    \   ICP is increasingly being tasked to fill a more complex role:\n   conveying\
    \ cache usage policy.  For example, many organizations (e.g.\n   universities)\
    \ will install a Web cache on the border of their\n   network.  Such organizations\
    \ may be happy to establish sibling\n   relationships with other, nearby caches,\
    \ subject to the following\n   terms:\n   o    Any of the organization's customers\
    \ or users may request any\n        object (cached or not).\n   o    Anyone may\
    \ request an object already in the cache.\n   o    Anyone may request any object\
    \ from the organization's servers\n        behind the cache.\n   o    All other\
    \ requests are denied; specifically, the organization\n        will not provide\
    \ transit for requests in which neither the\n        client nor the server falls\
    \ within its domain.\n   To successfully convey policy the ICP exchange must very\
    \ accurately\n   predict the result (hit, miss) of a subsequent HTTP request.\
    \  The\n   result may often depend on other request fields, such as Cache-\n \
    \  Control.  So it's not possible for ICP to accurately predict the\n   result\
    \ without more, or perhaps all, of the HTTP request.\n"
- title: 8.4.  Protocol Design Flaws of ICPv2
  contents:
  - "8.4.  Protocol Design Flaws of ICPv2\n   We recognize certain flaws with the\
    \ original design of ICP, and make\n   note of them so that future versions can\
    \ avoid the same mistakes.\n   o    The NULL-terminated URL in the payload field\
    \ requires stepping\n        through the message an octet at a time to find some\
    \ of the\n        fields (i.e. the beginning of object data in an ICP_OP_HIT_OBJ\n\
    \        message).\n   o    Two fields (Sender Host Address and Requester Host\
    \ Address) are\n        IPv4 specific.  However, neither of these fields are used\
    \ in\n        practice; they are normally zero-filled.  If IP addresses have a\n\
    \        role in the ICP message, there needs to be an address family\n      \
    \  descriptor for each address, and clients need to be able to say\n        whether\
    \ they want to hear IPv6 responses or not.\n   o    Options are limited to 32\
    \ option flags and 32 bits of option\n        data.  This should be more like\
    \ TCP, with an option descriptor\n        followed by option data.\n   o    Although\
    \ currently used as the cache key, the URL string no\n        longer serves this\
    \ role adequately.  Some HTTP responses now\n        vary according to the requestor's\
    \ User-Agent and other headers.\n        A cache key must incorporate all non-transport\
    \ headers present\n        in the client's request.  All non-hop-by-hop request\
    \ headers\n        should be sent in an ICP query.\n   o    ICPv2 uses different\
    \ opcode values for queries and responses.\n        ICP should use the same opcode\
    \ for both sides of a two-sided\n        transaction, with a \"query/response\"\
    \ indicator telling which\n        side is which.\n   o    ICPv2 does not include\
    \ any authentication fields.\n"
- title: 9.  Security Considerations
  contents:
  - "9.  Security Considerations\n   Security is an issue with ICP over UDP because\
    \ of its connectionless\n   nature.  Below we consider various vulnerabilities\
    \ and methods of\n   attack, and their implications.\n   Our first line of defense\
    \ is to check the source IP address of the\n   ICP message, e.g. as given by recvfrom(2).\
    \  ICP query messages should\n   be processed if the access control rules allow\
    \ the querying address\n   access to the cache.  However, ICP reply messages must\
    \ only be\n   accepted from known neighbors; a cache must ignore replies from\n\
    \   unknown addresses.\n   Because we trust the validity of an address in an IP\
    \ packet, ICP is\n   susceptible to IP address spoofing.  In this document we\
    \ address some\n   consequences of IP address spoofing.  Normally, spoofed addresses\
    \ can\n   only be detected by routers, not by hosts.  However, the IP\n   Authentication\
    \ Header[7,8] can be used underneath ICP to provide\n   cryptographic authentication\
    \ of the entire IP packet containing the\n   ICP protocol, thus eliminating the\
    \ risk of IP address spoofing.\n"
- title: 9.1.  Inserting Bogus ICP Queries
  contents:
  - "9.1.  Inserting Bogus ICP Queries\n   Processing an ICP_OP_QUERY message has\
    \ no known security\n   implications, so long as the requesting address is granted\
    \ access to\n   the cache.\n"
- title: 9.2.  Inserting Bogus ICP Replies
  contents:
  - "9.2.  Inserting Bogus ICP Replies\n   Here we are concerned with a third party\
    \ generating ICP reply\n   messages which are returned to the querying cache before\
    \ the real\n   reply arrives, or before any replies arrive.  The third party may\n\
    \   insert bogus ICP replies which appear to come from legitimate\n   neighbors.\
    \  There are three vulnerabilities:\n   o    Preventing a certain neighbor from\
    \ being used\n        If a third-party could send an ICP_OP_MISS_NOFETCH reply\
    \ back\n        before the real reply arrived, the (falsified) neighbor would\n\
    \        not be used.\n        A third-party could blast a cache with ICP_OP_DENIED\
    \ messages\n        until the threshold described in section 5.3.1 is reached,\n\
    \        thereby causing the neighbor relationship to be temporarily\n       \
    \ terminated.\n   o    Forcing a certain neighbor to be used\n        If a third-party\
    \ could send an ICP_OP_HIT reply back before the\n        real reply arrived,\
    \ the (falsified) neighbor would be used.\n        This may violate the terms\
    \ of a sibling relationship; ICP_OP_HIT\n        replies mean a subsequent HTTP\
    \ request will also be a hit.\n        Similarly, if bogus ICP_OP_SECHO messages\
    \ can be generated, the\n        cache would retrieve requests directly from the\
    \ origin server.\n"
- title: o    Cache poisoning
  contents:
  - "o    Cache poisoning\n        The ICP_OP_HIT_OBJ message is especially sensitive\
    \ to security\n        issues since it contains actual object data.  In combination\n\
    \        with IP address spoofing, this option opens up the likely\n        possibility\
    \ of having the cache polluted with invalid objects.\n"
- title: 9.3.  Eavesdropping
  contents:
  - "9.3.  Eavesdropping\n   Multicasting ICP queries provides a very simple method\
    \ for others to\n   \"snoop\" on ICP messages.  If enabling multicast, cache administrators\n\
    \   should configure the application to use the minimum required\n   multicast\
    \ TTL, using a tool such as mtrace[6].  Note that the IP\n   Encapsulating Security\
    \ Payload [7,9] mechanism can be used to provide\n   protection against eavesdropping\
    \ of ICP messages.\n   Eavesdropping on ICP traffic can provide third parties\
    \ with a list of\n   URLs being browsed by cache users.  Because the Requestor\
    \ Host\n   Address is zero-filled by Squid and Harvest, the URLs cannot be\n \
    \  mapped back to individual host systems.\n   By default, Squid and Harvest do\
    \ not send ICP messages for URLs\n   containing `cgi-bin' or `?'.  These URLs\
    \ sometimes contain sensitive\n   information as argument parameters.  Cache administrators\
    \ need to be\n   aware that altering the configuration to make ICP queries for\
    \ such\n   URLs may expose sensitive information to outsiders, especially when\n\
    \   multicast is used.\n"
- title: 9.4.  Blocking ICP Messages
  contents:
  - "9.4.  Blocking ICP Messages\n   Intentionally blocked (or discarded) ICP queries\
    \ or replies will\n   appear to reflect link failure or congestion, and will prevent\
    \ the\n   use of a neighbor as well as lead to timeouts (see section 5.1.4).\n\
    \   If all messages are blocked, the cache will assume the neighbor is\n   down\
    \ and remove it from the selection algorithm.  However, if, for\n   example, every\
    \ other query is blocked, the neighbor will remain\n   \"alive,\" but every other\
    \ request will suffer the ICP timeout.\n"
- title: 9.5.  Delaying ICP Messages
  contents:
  - "9.5.  Delaying ICP Messages\n   The neighbor selection algorithm normally waits\
    \ for all ICP MISS\n   replies to arrive.  Delaying queries or replies, so that\
    \ they arrive\n   later than they normally would, will cause additional delay\
    \ for the\n   subsequent HTTP request.  Of course, if messages are delayed so\
    \ that\n   they arrive after the timeout, the behavior is the same as \"blocking\"\
    \n   above.\n"
- title: 9.6.  Denial of Service
  contents:
  - "9.6.  Denial of Service\n   A denial-of-service attack, where the ICP port is\
    \ flooded with a\n   continuous stream of bogus messages has three vulnerabilities:\n\
    \   o    The application may log every bogus ICP message and eventually\n    \
    \    fill up a disk partition.\n   o    The socket receive queue may fill up,\
    \ causing legitimate\n        messages to be dropped.\n   o    The host may waste\
    \ some CPU cycles receiving the bogus messages.\n"
- title: 9.7.  Altering ICP Fields
  contents:
  - "9.7.  Altering ICP Fields\n   Here we assume a third party is able to change\
    \ one or more of the ICP\n   reply message fields.\n   Opcode\n      Changing\
    \ the opcode field is much like inserting bogus messages\n      described above.\
    \  Changing a hit to a miss would prevent the peer\n      from being used.  Changing\
    \ a miss to a hit would force the peer to\n      be used.\n   Version\n      Altering\
    \ the ICP version field may have unpredictable consequences\n      if the new\
    \ version number is recognized and supported.  The\n      receiving application\
    \ should ignore messages with invalid version\n      numbers.  At the time of\
    \ this writing, both version numbers 2 and\n      3 are in use.  These two versions\
    \ use some fields (e.g. Options)\n      in a slightly different manner.\n   Message\
    \ Length\n      An incorrect message length should be detected by the receiving\n\
    \      application as an invalid ICP message.\n   Request Number\n      The request\
    \ number is often used as a part of the cache key.\n      Harvest does not use\
    \ the request number.  Squid uses the request\n      number in conjunction with\
    \ the URL to create a cache key.\n      Altering the request number will cause\
    \ a lookup of the cache key\n      to fail.  This is similar to blocking the ICP\
    \ reply altogether.\n      There is no requirement that a cache use both the URL\
    \ and the\n      request number to locate HTTP requests with outstanding ICP\n\
    \      queries (however both Squid and Harvest do).  The request number\n    \
    \  must always be the same in the query and the reply.  However, if\n      the\
    \ querying cache uses only the request number to locate pending\n      requests,\
    \ there is some possibility that a replying cache might\n      increment the request\
    \ number in the reply to give the false\n      impression that the two caches\
    \ are closer than they really are.\n      In other words, assuming that there\
    \ are a few ICP requests \"in\n      flight\" at any given time, incrementing\
    \ the reply request number\n      trick the querying cache into seeing a smaller\
    \ round-trip time\n      than really exists.\n   Options\n      There is little\
    \ risk in having the Options bitfields altered.  Any\n      option bit must only\
    \ be set in a reply if it was also set in a\n      query.  Changing a bit from\
    \ clear to set is detectable by the\n      querying cache, and such a message\
    \ must be ignored.  Changing a\n      bit from set to clear is allowed and has\
    \ no negative side effects.\n   Option Data\n      ICP_FLAG_SRC_RTT is the only\
    \ option which uses the Option Data\n      field.  Altering the RTT values returned\
    \ here can affect the\n      neighbor selection algorithm, either forcing or preventing\
    \ the use\n      of a neighbor.\n   URL\n      The URL and Request Number are\
    \ used to generate the cache key.\n      Altering the URL will cause a lookup\
    \ of the cache key to fail, and\n      the ICP reply to be entirely ignored. \
    \ This is similar to blocking\n      the ICP reply altogether.\n"
- title: 9.8.  Summary
  contents:
  - "9.8.  Summary\n   o    ICP_OP_HIT_OBJ is particularly vulnerable to security\
    \ problems\n        because it includes object data.  For this, and other reasons,\n\
    \        its use is discouraged.\n   o    Falsifying, altering, inserting, or\
    \ blocking ICP messages can\n        cause an HTTP request to fail only in two\
    \ situations:\n        -    If the cache is behind a firewall and cannot directly\n\
    \             connect to the origin server.\n        -    If a false ICP_OP_HIT\
    \ reply causes the HTTP request to be\n             forwarded to a sibling, where\
    \ the request is a cache miss\n             and the sibling refuses to continue\
    \ forwarding the request\n             on behalf of the originating cache.\n \
    \  o    Falsifying, altering, inserting, or blocking ICP messages can\n      \
    \  easily cause HTTP requests to be forwarded (or not forwarded) to\n        certain\
    \ neighbors.  If the neighbor cache has also been\n        compromised, then it\
    \ could serve bogus content and pollute a\n        cache hierarchy.\n   o    Blocking\
    \ or delaying ICP messages can cause HTTP request to be\n        further delayed,\
    \ but still satisfied.\n"
- title: 10.  References
  contents:
  - "10.  References\n   [1] Fielding, R., et. al, \"Hypertext Transfer Protocol --\
    \ HTTP/1.1\",\n   RFC 2068, UC Irvine, January 1997.\n   [2] Berners-Lee, T.,\
    \ Masinter, L., and M. McCahill, \"Uniform Resource\n   Locators (URL)\", RFC\
    \ 1738, CERN, Xerox PARC, University of Minnesota,\n   December 1994.\n   [3]\
    \ Bowman M., Danzig P., Hardy D., Manber U., Schwartz M., and\n   Wessels D.,\
    \ \"The Harvest Information Discovery and Access System\",\n   Internet Research\
    \ Task Force - Resource Discovery,\n   http://harvest.transarc.com/.\n   [4] Wessels\
    \ D., Claffy K., \"ICP and the Squid Web Cache\", National\n   Laboratory for\
    \ Applied Network Research,\n   http://www.nlanr.net/~wessels/Papers/icp-squid.ps.gz.\n\
    \   [5] Wessels D., \"The Squid Internet Object Cache\", National\n   Laboratory\
    \ for Applied Network Research,\n   http://squid.nlanr.net/Squid/\n   [6] mtrace,\
    \ Xerox PARC, ftp://ftp.parc.xerox.com/pub/net-\n   research/ipmulti/.\n   [7]\
    \ Atkinson, R., \"Security Architecture for the Internet Protocol\",\n   RFC 1825,\
    \ NRL, August 1995.\n   [8] Atkinson, R., \"IP Authentication Header\", RFC 1826,\
    \ NRL, August\n   1995.\n   [9] Atkinson, R., \"IP Encapsulating Security Payload\
    \ (ESP)\", RFC\n   1827, NRL, August 1995.\n"
- title: 11.  Acknowledgments
  contents:
  - "11.  Acknowledgments\n   The authors wish to thank Paul A Vixie <paul@vix.com>\
    \ for providing\n   excellent feedback on this document, Martin Hamilton\n   <martin@mrrl.lut.ac.uk>\
    \ for pushing the development of multicast ICP,\n   Eric Rescorla <ekr@terisa.com>\
    \ and Randall Atkinson <rja@home.net>\n   for assisting with security issues,\
    \ and especially Allyn Romanow for\n   keeping us on the right track.\n"
- title: 12.  Authors' Addresses
  contents:
  - "12.  Authors' Addresses\n   Duane Wessels\n   National Laboratory for Applied\
    \ Network Research\n   10100 Hopkins Drive\n   La Jolla, CA 92093\n   EMail: wessels@nlanr.net\n\
    \   K. Claffy\n   National Laboratory for Applied Network Research\n   10100 Hopkins\
    \ Drive\n   La Jolla, CA 92093\n   EMail: kc@nlanr.net\n"
