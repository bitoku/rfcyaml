- title: __initial_text__
  contents:
  - "           Privacy Enhancement for Internet Electronic Mail:\n              Part\
    \ III: Algorithms, Modes, and Identifiers\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This RFC specifies an IAB standards track protocol for\
    \ the Internet\n   community, and requests discussion and suggestions for improvements.\n\
    \   Please refer to the current edition of the \"IAB Official Protocol\n   Standards\"\
    \ for the standardization state and status of this protocol.\n   Distribution\
    \ of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document provides definitions, formats, references, and\n \
    \  citations for cryptographic algorithms, usage modes, and associated\n   identifiers\
    \ and parameters used in support of Privacy Enhanced Mail\n   (PEM) in the Internet\
    \ community.  It is intended to become one member\n   of the set of related PEM\
    \ RFCs.  This document is organized into four\n   primary sections, dealing with\
    \ message encryption algorithms, message\n   integrity check algorithms, symmetric\
    \ key management algorithms, and\n   asymmetric key management algorithms (including\
    \ both asymmetric\n   encryption and asymmetric signature algorithms).\n   Some\
    \ parts of this material are cited by other documents and it is\n   anticipated\
    \ that some of the material herein may be changed, added,\n   or replaced without\
    \ affecting the citing documents.  Therefore,\n   algorithm-specific material\
    \ has been placed into this separate\n   document.\n   Use of other algorithms\
    \ and/or modes will require case-by-case study\n   to determine applicability\
    \ and constraints.  The use of additional\n   algorithms may be documented first\
    \ in Prototype or Experimental RFCs.\n   As experience is gained, these protocols\
    \ may be considered for\n   incorporation into the standard.  Additional algorithms\
    \ and modes\n   approved for use in PEM in this context will be specified in\n\
    \   successors to this document.\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   This specification was initially developed by the Internet\
    \ Research\n   Task Force's Privacy and Security Research Group (IRTF PSRG) and\n\
    \   subsequently refined based on discussion in the Internet Engineering\n   Task\
    \ Force's Privacy Enhanced Mail Working Group (IETF PEM WG).  John\n   Linn contributed\
    \ significantly to the predecessor of this document\n   (RFC 1115).  I would like\
    \ to thank the members of the PSRG and PEM\n   WG, as well as all participants\
    \ in discussions on the \"pem-\n   dev@tis.com\" mailing list, for their contributions\
    \ to this document.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n      1.  Message Encryption Algorithms .......................\
    \ 2\n      1.1  DES in CBC Mode (DES-CBC) .......................... 2\n     \
    \ 2.  Message Integrity Check Algorithms .................. 4\n      2.1  RSA-MD2\
    \ Message Digest Algorithm ................... 4\n      2.2  RSA-MD5 Message Digest\
    \ Algorithm ................... 5\n      3.  Symmetric Key Management Algorithms\
    \ ................. 6\n      3.1  DES in ECB mode (DES-ECB) ..........................\
    \ 6\n      3.2  DES in EDE mode (DES-EDE) .......................... 7\n     \
    \ 4.  Asymmetric Key Management Algorithms ................ 7\n      4.1  Asymmetric\
    \ Keys .................................... 7\n      4.1.1  RSA Keys .........................................\
    \ 7\n      4.2  Asymmetric Encryption Algorithms ..................  9\n     \
    \ 4.2.1  RSAEncryption ...................................  9\n      4.3  Asymmetric\
    \ Signature Algorithms ................... 10\n      4.3.1  md2WithRSAEncryption\
    \ ............................ 11\n      5.  Descriptive Grammar ................................\
    \ 11\n      References ............................................. 12\n    \
    \  Patent Statement ....................................... 13\n      Security\
    \ Considerations ................................ 14\n      Author's Address .......................................\
    \ 14\n"
- title: 1.  Message Encryption Algorithms
  contents:
  - "1.  Message Encryption Algorithms\n   This section identifies the alternative\
    \ message encryption algorithms\n   and modes that shall be used to encrypt message\
    \ text and, when\n   asymmetric key management is employed in an ENCRYPTED PEM\
    \ message, for\n   encryption of message signatures.  Character string identifiers\
    \ are\n   assigned and any parameters required by the message encryption\n   algorithm\
    \ are defined for incorporation in an encapsulated \"DEK-\n   Info:\" header field.\n\
    \   Only one alternative is currently defined in this category.\n"
- title: 1.1  DES in CBC Mode (DES-CBC)
  contents:
  - "1.1  DES in CBC Mode (DES-CBC)\n   Message text and, if required, message signatures\
    \ are encrypted using\n   the Data Encryption Standard (DES) algorithm in the\
    \ Cipher Block\n   Chaining (CBC) mode of operation.  The DES algorithm is defined\
    \ in\n   FIPS PUB 46-1 [1], and is equivalent to the Data Encryption Algorithm\n\
    \   (DEA) provided in ANSI X3.92-1981 [2].  The CBC mode of operation of\n   DES\
    \ is defined in FIPS PUB 81 [3], and is equivalent to those\n   provided in ANSI\
    \ X3.106 [4] and in ISO IS 8372 [5].  The character\n   string \"DES-CBC\" within\
    \ an encapsulated PEM header field indicates\n   the use of this algorithm/mode\
    \ combination.\n   The input to the DES CBC encryption process shall be padded\
    \ to a\n   multiple of 8 octets, in the following manner.  Let n be the length\n\
    \   in octets of the input.  Pad the input by appending 8-(n mod 8)\n   octets\
    \ to the end of the message, each having the value 8-(n mod 8),\n   the number\
    \ of octets being added.  In hexadecimal, the possible\n   paddings are:  01,\
    \ 0202, 030303, 04040404, 0505050505, 060606060606,\n   07070707070707, and 0808080808080808.\
    \  All input is padded with 1 to\n   8 octets to produce a multiple of 8 octets\
    \ in length.  The padding\n   can be removed unambiguously after decryption.\n\
    \   The DES CBC encryption process requires a 64-bit cryptographic key.\n   A\
    \ new, pseudorandom key shall be generated for each ENCRYPTED PEM\n   message.\
    \  Of the 64 bits, 56 are used directly by the DES CBC\n   process, and 8 are\
    \ odd parity bits, with one parity bit occupying the\n   right-most bit of each\
    \ octet.  When symmetric key management is\n   employed, the setting and checking\
    \ of odd parity bits is encouraged,\n   since these bits could detect an error\
    \ in the decryption of a DES key\n   encrypted under a symmetric key management\
    \ algorithm (e.g., DES ECB).\n   When asymmetric key management is employed, the\
    \ setting of odd parity\n   bits is encouraged, but the checking of odd parity\
    \ bits is\n   discouraged, in order to facilitate interoperability, and since\
    \ an\n   error in the decryption of a DES key can be detected by other means\n\
    \   (e.g., an incorrect PKCS #1 encryption-block format).  In all cases,\n   the\
    \ encrypted form of a DES key shall carry all 64 bits of the key,\n   including\
    \ the 8 parity bits, though those bits may have no meaning.\n   The DES CBC encryption\
    \ process also requires a 64-bit Initialization\n   Vector (IV).  A new, pseudorandom\
    \ IV shall be generated for each\n   ENCRYPTED PEM message.  Section 4.3.1 of\
    \ [7] provides rationale for\n   this requirement, even given the fact that individual\
    \ DES keys are\n   generated for individual messages.  The IV is transmitted with\
    \ the\n   message within an encapsulated PEM header field.\n   When this algorithm/mode\
    \ combination is used for message text\n   encryption, the \"DEK-Info:\" header\
    \ field carries exactly two\n   arguments.  The first argument identifies the\
    \ DES CBC algorithm/mode\n   using the character string defined above.  The second\
    \ argument\n   contains the IV, represented as a contiguous string of 16 ASCII\n\
    \   hexadecimal digits.\n   When symmetric key management is employed with this\
    \ algorithm/mode\n   combination, a symmetrically encrypted DES key will be represented\
    \ in\n   the third argument of a \"Key-Info:\" header field as a contiguous\n\
    \   string of 16 ASCII hexadecimal digits (corresponding to a 64-bit\n   key).\n\
    \   To avoid any potential ambiguity regarding the ordering of the octets\n  \
    \ of a DES key that is input as a data value to another encryption\n   process\
    \ (e.g., RSAEncryption), the following holds true.  The first\n   (or left-most\
    \ displayed, if one thinks in terms of a key's \"print\"\n   representation) (For\
    \ purposes of discussion in this document, data\n   values are normalized in terms\
    \ of their \"print\" representation.  For a\n   octet stream, the \"first\" octet\
    \ would appear as the one on the \"left\",\n   and the \"last\" octet would appear\
    \ on the \"right\".) octet of the key\n   (i.e., bits 1-8 per FIPS PUB 46-1),\
    \ when considered as a data value,\n   has numerical weight 2**56.  The last (or\
    \ right-most displayed) octet\n   (i.e., bits 57-64 per FIPS PUB 46-1) has numerical\
    \ weight 2**0.\n"
- title: 2.  Message Integrity Check Algorithms
  contents:
  - "2.  Message Integrity Check Algorithms\n   This section identifies the alternative\
    \ algorithms that shall be used\n   to compute Message Integrity Check (MIC) values\
    \ for PEM messages.\n   Character string identifiers and ASN.1 object identifiers\
    \ are\n   assigned for incorporation in encapsulated \"MIC-Info:\" and \"Key-\n\
    \   Info:\" header fields to indicate the choice of MIC algorithm\n   employed.\n\
    \   A compliant PEM implementation shall be able to process all of the\n   alternative\
    \ MIC algorithms defined here on incoming messages.  It is\n   a sender option\
    \ as to which alternative is employed on an outbound\n   message.\n"
- title: 2.1  RSA-MD2 Message Digest Algorithm
  contents:
  - "2.1  RSA-MD2 Message Digest Algorithm\n   The RSA-MD2 message digest is computed\
    \ using the algorithm defined in\n   RFC 1319 [9].  ( An error has been identified\
    \ in RFC 1319.  The\n   statement in the text of Section 3.2 which reads \"Set\
    \ C[j] to S[c xor\n   L]\" should read \"Set C[j] to S[c xor L] xor C[j]\".  Note\
    \ that the C\n   source code in the appendix of RFC 1319 is correct.)  The character\n\
    \   string \"RSA-MD2\" within an encapsulated PEM header field indicates the\n\
    \   use of this algorithm.  Also, as defined in RFC 1319, the ASN.1 object\n \
    \  identifier\n     md2 OBJECT IDENTIFIER ::= {\n         iso(1) member-body(2)\
    \ US(840) rsadsi(113549)\n         digestAlgorithm(2) 2\n     }\n   identifies\
    \ this algorithm.  When this object identifier is used with\n   the ASN.1 type\
    \ AlgorithmIdentifier, the parameters component of that\n   type is the ASN.1\
    \ type NULL.\n   The RSA-MD2 message digest algorithm accepts as input a message\
    \ of\n   any length and produces as output a 16-octet quantity.  When\n   symmetric\
    \ key management is employed, an RSA-MD2 MIC is encrypted by\n   splitting the\
    \ MIC into two 8-octet halves, independently encrypting\n   each half, and concatenating\
    \ the results.\n   When symmetric key management is employed with this MIC algorithm,\n\
    \   the symmetrically encrypted MD2 message digest is represented in a\n   the\
    \ fourth argument of a \"Key-Info:\" header field as a contiguous\n   string of\
    \ 32 ASCII hexadecimal digits (corresponding to a 128-bit MD2\n   message digest).\n\
    \   To avoid any potential ambiguity regarding the ordering of the octets\n  \
    \ of an MD2 message digest that is input as a data value to another\n   encryption\
    \ process (e.g., RSAEncryption), the following holds true.\n   The first (or left-most\
    \ displayed, if one thinks in terms of a\n   digest's \"print\" representation)\
    \ octet of the digest (i.e., digest[0]\n   as specified in RFC 1319), when considered\
    \ as an RSA data value, has\n   numerical weight 2**120.  The last (or right-most\
    \ displayed) octet\n   (i.e., digest[15] as specified in RFC 1319) has numerical\
    \ weight\n   2**0.\n"
- title: 2.2  RSA-MD5 Message Digest Algorithm
  contents:
  - "2.2  RSA-MD5 Message Digest Algorithm\n   The RSA-MD5 message digest is computed\
    \ using the algorithm defined in\n   RFC 1321 [10].  The character string \"RSA-MD5\"\
    \ within an encapsulated\n   PEM header field indicates the use of this algorithm.\
    \  Also, as\n   defined in RFC 1321, the object identifier\n     md5 OBJECT IDENTIFIER\
    \ ::= {\n         iso(1) member-body(2) US(840) rsadsi(113549)\n         digestAlgorithm(2)\
    \ 5\n     }\n   identifies this algorithm.  When this object identifier is used\
    \ with\n   the ASN.1 type AlgorithmIdentifier, the parameters component of that\n\
    \   type is the ASN.1 type NULL.\n   The RSA-MD5 message digest algorithm accepts\
    \ as input a message of\n   any length and produces as output a 16-octet quantity.\
    \  When\n   symmetric key management is employed, an RSA-MD5 MIC is encrypted\
    \ by\n   splitting the MIC into two 8-octet halves, independently encrypting\n\
    \   each half, and concatenating the results.\n   When symmetric key management\
    \ is employed with this MIC algorithm,\n   the symmetrically encrypted MD5 message\
    \ digest is represented in the\n   fourth argument of a \"Key-Info:\" header field\
    \ as a contiguous string\n   of 32 ASCII hexadecimal digits (corresponding to\
    \ a 128-bit MD5\n   message digest).\n   To avoid any potential ambiguity regarding\
    \ the ordering of the octets\n   of a MD5 message digest that is input as an RSA\
    \ data value to the RSA\n   encryption process, the following holds true.  The\
    \ first (or left-\n   most displayed, if one thinks in terms of a digest's \"\
    print\"\n   representation) octet of the digest (i.e., the low-order octet of\
    \ A\n   as specified in RFC 1321), when considered as an RSA data value, has\n\
    \   numerical weight 2**120.  The last (or right-most displayed) octet\n   (i.e.,\
    \ the high-order octet of D as specified in RFC 1321) has\n   numerical weight\
    \ 2**0.\n"
- title: 3.  Symmetric Key Management Algorithms
  contents:
  - "3.  Symmetric Key Management Algorithms\n   This section identifies the alternative\
    \ algorithms and modes that\n   shall be used when symmetric key management is\
    \ employed, to encrypt\n   data encryption keys (DEKs) and message integrity check\
    \ (MIC) values.\n   Character string identifiers are assigned for incorporation\
    \ in\n   encapsulated \"Key-Info:\" header fields to indicate the choice of\n\
    \   algorithm employed.\n   All alternatives presently defined in this category\
    \ correspond to\n   different usage modes of the DES algorithm, rather than to\
    \ other\n   algorithms.\n   When symmetric key management is employed, the symmetrically\n\
    \   encrypted DEK and MIC, carried in the third and fourth arguments of a\n  \
    \ \"Key-Info:\" header field, respectively, are each represented as a\n   string\
    \ of contiguous ASCII hexadecimal digits.  The manner in which\n   to use the\
    \ following symmetric encryption algorithms and the length\n   of the symmetrically\
    \ encrypted DEK and MIC may vary depending on the\n   length of the underlying\
    \ DEK and MIC.  Section 1, Message Encryption\n   Algorithms, and Section 2, Message\
    \ Integrity Check Algorithms,\n   provide information on the proper manner in\
    \ which a DEK and MIC,\n   respectively, are symmetrically encrypted when the\
    \ size of the DEK or\n   MIC is not equal to the symmetric encryption algorithm's\
    \ input block\n   size.  These sections also provide information on the proper\
    \ format\n   and length of the symmetrically encrypted DEK and MIC, respectively.\n"
- title: 3.1  DES in ECB Mode (DES-ECB)
  contents:
  - "3.1  DES in ECB Mode (DES-ECB)\n   The DES algorithm in Electronic Codebook (ECB)\
    \ mode [1][3] is used\n   for DEK and MIC encryption when symmetric key management\
    \ is employed.\n   The character string \"DES-ECB\" within an encapsulated PEM\
    \ header\n   field indicates use of this algorithm/mode combination.\n   A compliant\
    \ PEM implementation supporting symmetric key management\n   shall support this\
    \ algorithm/mode combination.\n"
- title: 3.2  DES in EDE Mode (DES-EDE)
  contents:
  - "3.2  DES in EDE Mode (DES-EDE)\n   The DES algorithm in Encrypt-Decrypt-Encrypt\
    \ (EDE) multiple\n   encryption mode, as defined by ANSI X9.17 [6] for encryption\
    \ and\n   decryption with pairs of 64-bit keys, may be used for DEK and MIC\n\
    \   encryption when symmetric key management is employed.  The character\n   string\
    \ \"DES-EDE\" within an encapsulated a PEM header field indicates\n   use of this\
    \ algorithm/mode combination.\n   A compliant PEM implementation supporting symmetric\
    \ key management\n   may optionally support this algorithm/mode combination.\n"
- title: 4.  Asymmetric Key Management Algorithms
  contents:
  - "4.  Asymmetric Key Management Algorithms\n   This section identifies the alternative\
    \ asymmetric keys and the\n   alternative asymmetric key management algorithms\
    \ with which those\n   keys shall be used, namely the asymmetric encryption algorithms\
    \ with\n   which DEKs and MICs are encrypted, and the asymmetric signature\n \
    \  algorithms with which certificates and certificate revocation lists\n   (CRLs)\
    \ are signed.\n"
- title: 4.1  Asymmetric Keys
  contents:
  - "4.1  Asymmetric Keys\n   This section describes the asymmetric keys that shall\
    \ be used with\n   the asymmetric encryption algorithms and the signature algorithms\n\
    \   described later.  ASN.1 object identifiers are identified for\n   incorporation\
    \ in a public-key certificate to identify the\n   algorithm(s) with which the\
    \ accompanying public key is to be\n   employed.\n"
- title: 4.1.1  RSA Keys
  contents:
  - "4.1.1  RSA Keys\n   An RSA asymmetric key pair is comprised of matching public\
    \ and\n   private keys.\n   An RSA public key consists of an encryption exponent\
    \ e and an\n   arithmetic modulus n, which are both public quantities typically\n\
    \   carried in a public-key certificate.  For the value of e, Annex C to\n   X.509\
    \ suggests the use of Fermat's Number F4 (65537 decimal, or\n   1+2**16) as a\
    \ value \"common to the whole environment in order to\n   reduce transmission\
    \ capacity and complexity of transformation\", i.e.,\n   the value can be transmitted\
    \ as 3 octets and at most seventeen (17)\n   multiplications are required to effect\
    \ exponentiation.  As an\n   alternative, the number three (3) can be employed\
    \ as the value for e,\n   requiring even less octets for transmission and yielding\
    \ even faster\n   exponentiation.  For purposes of PEM, the value of e shall be\
    \ either\n   F4 or the number three (3).  The use of the number three (3) for\
    \ the\n   value of e is encouraged, to permit rapid certificate validation.\n\
    \   An RSA private key consists of a decryption exponent d, which should\n   be\
    \ kept secret, and the arithmetic modulus n.  Other values may be\n   stored with\
    \ a private key to facilitate efficient private key\n   operations (see PKCS #1\
    \ [11]).\n   For purposes of PEM, the modulus n may vary in size from 508 to 1024\n\
    \   bits.\n   Two ASN.1 object identifiers have been defined to identify RSA public\n\
    \   keys.  In Annex H of X.509 [8], the object identifier\n     rsa OBJECT IDENTIFIER\
    \ ::= {\n         joint-iso-ccitt(2) ds(5) algorithm(8)\n         encryptionAlgorithm(1)\
    \ 1\n     }\n   is defined to identify an RSA public key.  A single parameter,\n\
    \   KeySize, the length of the public key modulus in bits, is defined for\n  \
    \ use in conjunction with this object identifier.  When this object\n   identifier\
    \ is used with the ASN.1 type AlgorithmIdentifier, the\n   parameters component\
    \ of that type is the number of bits in the\n   modulus, ASN.1 encoded as an INTEGER.\n\
    \   Alternatively, in PKCS #1 [11], the ASN.1 object identifier\n     rsaEncryption\
    \ OBJECT IDENTIFIER ::= {\n         iso(1) member-body(2) US(840) rsadsi(113549)\
    \ pkcs(1)\n         pkcs-1(1) 1\n     }\n   is defined to identify both an RSA\
    \ public key and the RSAEncryption\n   process.  There are no parameters defined\
    \ in conjunction with this\n   object identifier, hence, when it is used with\
    \ the ASN.1 type\n   AlgorithmIdentifier, the parameters component of that type\
    \ is the\n   ASN.1 type NULL.\n   A compliant PEM implementation may optionally\
    \ generate an RSA\n   public-key certificate that identifies the enclosed RSA\
    \ public key\n   (within the SubjectPublicKeyInformation component) with either\
    \ the\n   \"rsa\" or the \"rsaEncryption\" object identifier.  Use of the \"rsa\"\
    \n   object identifier is encouraged, since it is, in some sense, more\n   generic\
    \ in its identification of a key, without indicating how the\n   key will be used.\
    \  However, to facilitate interoperability, a\n   compliant PEM implementation\
    \ shall accept RSA public-key certificates\n   that identify the enclosed RSA\
    \ public key with either the \"rsa\" or\n   the \"rsaEncryption\" object identifier.\
    \  In all cases, an RSA public\n   key identified in an RSA public-key certificate\
    \ with either the \"rsa\"\n   or \"rsaEncryption\" object identifier, shall be\
    \ used according to the\n   procedures defined below for asymmetric encryption\
    \ algorithms and\n   asymmetric signature algorithms.\n"
- title: 4.2  Asymmetric Encryption Algorithms
  contents:
  - "4.2  Asymmetric Encryption Algorithms\n   This section identifies the alternative\
    \ algorithms that shall be used\n   when asymmetric key management is employed,\
    \ to encrypt DEKs and MICs.\n   Character string identifiers are assigned for\
    \ incorporation in \"MIC-\n   Info:\" and \"Key-Info:\" header fields to indicate\
    \ the choice of\n   algorithm employed.\n   Only one alternative is presently\
    \ defined in this category.\n"
- title: 4.2.1  RSAEncryption
  contents:
  - "4.2.1  RSAEncryption\n   The RSAEncryption public-key encryption algorithm, defined\
    \ in PKCS #1\n   [11], is used for DEK and MIC encryption when asymmetric key\n\
    \   management is employed.  The character string \"RSA\" within a \"MIC-\n  \
    \ Info:\" or \"Key-Info:\" header field indicates the use of this\n   algorithm.\n\
    \   All PEM implementations supporting asymmetric key management shall\n   support\
    \ this algorithm.\n   As described in PKCS #1, all quantities input as data values\
    \ to the\n   RSAEncryption process shall be properly justified and padded to the\n\
    \   length of the modulus prior to the encryption process.  In general,\n   an\
    \ RSAEncryption input value is formed by concatenating a leading\n   NULL octet,\
    \ a block type BT, a padding string PS, a NULL octet, and\n   the data quantity\
    \ D, that is,\n     RSA input value = 0x00 || BT || PS || 0x00 || D.\n   To prepare\
    \ a DEK for RSAEncryption, the PKCS #1 \"block type 02\"\n   encryption-block\
    \ formatting scheme is employed.  The block type BT is\n   a single octet containing\
    \ the value 0x02 and the padding string PS is\n   one or more octets (enough octets\
    \ to make the length of the complete\n   RSA input value equal to the length of\
    \ the modulus) each containing a\n   pseudorandomly generated, non-zero value.\
    \  For multiple recipient\n   messages, a different, pseudorandom padding string\
    \ should be used for\n   each recipient.  The data quantity D is the DEK itself,\
    \ which is\n   right-justified within the RSA input such that the last (or rightmost\n\
    \   displayed, if one thinks in terms of the \"print\" representation)\n   octet\
    \ of the DEK is aligned with the right-most, or least-\n   significant, octet\
    \ of the RSA input.  Proceeding to the left, each of\n   the remaining octets\
    \ of the DEK, up through the first (or left-most\n   displayed) octet, are each\
    \ aligned in the next more significant octet\n   of the RSA input.\n   To prepare\
    \ a MIC for RSAEncryption, the PKCS #1 \"block type 01\"\n   encryption-block\
    \ formatting scheme is employed.  The block type BT is\n   a single octet containing\
    \ the value 0x01 and the padding string PS is\n   one or more octets (enough octets\
    \ to make the length of the complete\n   RSA input value equal to the length of\
    \ the modulus) each containing\n   the value 0xFF.  The data quantity D is comprised\
    \ of the MIC and the\n   MIC algorithm identifier which are ASN.1 encoded as the\
    \ following\n   sequence.\n     SEQUENCE {\n         digestAlgorithm   AlgorithmIdentifier,\n\
    \         digest            OCTET STRING\n     }\n   The ASN.1 type AlgorithmIdentifier\
    \ is defined in X.509 as follows.\n     AlgorithmIdentifier ::= SEQUENCE {\n \
    \        algorithm         OBJECT IDENTIFIER,\n         parameters        ANY\
    \ DEFINED BY algorithm OPTIONAL\n     }\n   An RSA input block is encrypted using\
    \ the RSA algorithm with the\n   first (or left-most) octet taken as the most\
    \ significant octet, and\n   the last (or right-most) octet taken as the least\
    \ significant octet.\n   The resulting RSA output block is interpreted in a similar\
    \ manner.\n   When RSAEncryption is used to encrypt a DEK, the second argument\
    \ in a\n   \"MIC-Info:\" header field, an asymmetrically encrypted DEK, is\n \
    \  represented using the printable encoding technique defined in Section\n   4.3.2.4\
    \ of RFC 1421 [12].\n   When RSAEncryption is used to sign a MIC, the third argument\
    \ in a\n   \"MIC-Info:\" header field, an asymmetrically signed MIC, is\n   represented\
    \ using the printable encoding technique defined in Section\n   4.3.2.4 of RFC\
    \ 1421.\n"
- title: 4.3  Asymmetric Signature Algorithms
  contents:
  - "4.3  Asymmetric Signature Algorithms\n   This section identifies the alternative\
    \ algorithms which shall be\n   used to asymmetrically sign certificates and certificate\
    \ revocation\n   lists (CRLs) in accordance with the SIGNED macro defined in Annex\
    \ G\n   of X.509.  ASN.1 object identifiers are identified for incorporation\n\
    \   in certificates and CRLs to indicate the choice of algorithm\n   employed.\n\
    \   Only one alternative is presently defined in this category.\n"
- title: 4.3.1  md2WithRSAEncryption
  contents:
  - "4.3.1  md2WithRSAEncryption\n   The md2WithRSAEncryption signature algorithm\
    \ is used to sign\n   certificates and CRLs.  The algorithm is defined in PKCS\
    \ #1 [11].  It\n   combines the RSA-MD2 message digest algorithm described here\
    \ in\n   Section 2.2 with the RSAEncryption asymmetric encryption algorithm\n\
    \   described here in Section 4.2.1.  As defined in PKCS #1, the ASN.1\n   object\
    \ identifier\n     md2WithRSAEncryption OBJECT IDENTIFIER ::= {\n         iso(1)\
    \ member-body(2) US(840) rsadsi(113549) pkcs(1)\n         pkcs-1(1) 2\n     }\n\
    \   identifies this algorithm.  When this object identifier is used with\n   the\
    \ ASN.1 type AlgorithmIdentifier, the parameters component of that\n   type is\
    \ the ASN.1 type NULL.\n   There is some ambiguity in X.509 regarding the definition\
    \ of the\n   SIGNED macro and, in particular, the representation of a signature\
    \ in\n   a certificate or a CRL.  The interpretation selected for PEM requires\n\
    \   that the data to be signed (in our case, an MD2 message digest) is\n   first\
    \ ASN.1 encoded as an OCTET STRING and the result is encrypted\n   (in our case,\
    \ using RSAEncryption) to form the signed quantity, which\n   is then ASN.1 encoded\
    \ as a BIT STRING.\n"
- title: 5.  Descriptive Grammar
  contents:
  - "5.  Descriptive Grammar\n   ; Addendum to PEM BNF representation, using RFC 822\
    \ notation\n   ; Provides specification for official PEM cryptographic algorithms,\n\
    \   ; modes, identifiers and formats.\n   ; Imports <hexchar> and <encbin> from\
    \ RFC [1421]\n       <dekalgid> ::= \"DES-CBC\"\n       <ikalgid>  ::= \"DES-EDE\"\
    \ / \"DES-ECB\" / \"RSA\"\n       <sigalgid> ::= \"RSA\"\n       <micalgid> ::=\
    \ \"RSA-MD2\" / \"RSA-MD5\"\n       <dekparameters> ::= <DESCBCparameters>\n \
    \      <DESCBCparameters> ::= <IV>\n       <IV> ::= <hexchar16>\n       <symencdek>\
    \ ::= <DESECBencDESCBC> / <DESEDEencDESCBC>\n       <DESECBencDESCBC> ::= <hexchar16>\n\
    \       <DESEDEencDESCBC> ::= <hexchar16>\n       <symencmic> ::= <DESECBencRSAMD2>\
    \ / <DESECBencRSAMD5>\n       <DESECBencRSAMD2> ::= 2*2<hexchar16>\n       <DESECBencRSAMD5>\
    \ ::= 2*2<hexchar16>\n       <asymsignmic> ::= <RSAsignmic>\n       <RSAsignmic>\
    \ ::= <encbin>\n       <asymencdek> ::= <RSAencdek>\n       <RSAencdek> ::= <encbin>\n\
    \       <hexchar16> ::= 16*16<hexchar>\n"
- title: References
  contents:
  - "References\n   [1] Federal Information Processing Standards Publication (FIPS\
    \ PUB)\n       46-1, Data Encryption Standard, Reaffirmed 1988 January 22\n  \
    \     (supersedes FIPS PUB 46, 1977 January 15).\n   [2] ANSI X3.92-1981, American\
    \ National Standard Data Encryption\n       Algorithm, American National Standards\
    \ Institute, Approved 30\n       December 1980.\n   [3] Federal Information Processing\
    \ Standards Publication (FIPS PUB)\n       81, DES Modes of Operation, 1980 December\
    \ 2.\n   [4] ANSI X3.106-1983, American National Standard for Information\n  \
    \     Systems - Data Encryption Algorithm - Modes of Operation,\n       American\
    \ National Standards Institute, Approved 16 May 1983.\n   [5] ISO 8372, Information\
    \ Processing Systems: Data Encipherment:\n       Modes of Operation of a 64-bit\
    \ Block Cipher.\n   [6] ANSI X9.17-1985, American National Standard, Financial\n\
    \       Institution Key Management (Wholesale), American Bankers\n       Association,\
    \ April 4, 1985, Section 7.2.\n   [7] Voydock, V. L. and Kent, S. T., \"Security\
    \ Mechanisms in High-\n       Level Network Protocols\", ACM Computing Surveys,\
    \ Vol. 15, No. 2,\n       June 1983, pp. 135-171.\n   [8] CCITT Recommendation\
    \ X.509, \"The Directory - Authentication\n       Framework\", November 1988,\
    \ (Developed in collaboration, and\n       technically aligned, with ISO 9594-8).\n\
    \   [9] Kaliski, B., \"The MD2 Message-Digest Algorithm\", RFC 1319, RSA\n   \
    \    Laboratories, April 1992.\n  [10] Rivest, R., \"The MD5 Message-Digest Algorithm\"\
    , RFC 1321, MIT\n       Laboratory for Computer Science and RSA Data Security,\
    \ Inc.,\n       April 1992.\n  [11] PKCS #1: RSA Encryption Standard, Version\
    \ 1.4, RSA Data Security,\n       Inc., June 3, 1991.\n  [12] Linn, J., \"Privacy\
    \ Enhancement for Internet Electronic Mail: Part\n       I: Message Encryption\
    \ and Authentication Procedures\", RFC 1421,\n       DEC, February 1993.\n  [13]\
    \ Kent, S., \"Privacy Enhancement for Internet Electronic Mail: Part\n       II:\
    \ Certificate-Based Key Management\", RFC 1422, BBN, February\n       1993.\n\
    \  [14] Kaliski, B., \"Privacy Enhancement for Internet Electronic Mail:\n   \
    \    Part IV: Key Certification and Related Services\", RFC 1424, RSA\n      \
    \ Laboratories, February 1993.\n"
- title: Patent Statement
  contents:
  - "Patent Statement\n   This version of Privacy Enhanced Mail (PEM) relies on the\
    \ use of\n   patented public key encryption technology for authentication and\n\
    \   encryption.  The Internet Standards Process as defined in RFC 1310\n   requires\
    \ a written statement from the Patent holder that a license\n   will be made available\
    \ to applicants under reasonable terms and\n   conditions prior to approving a\
    \ specification as a Proposed, Draft or\n   Internet Standard.\n   The Massachusetts\
    \ Institute of Technology and the Board of Trustees\n   of the Leland Stanford\
    \ Junior University have granted Public Key\n   Partners (PKP) exclusive sub-licensing\
    \ rights to the following\n   patents issued in the United States, and all of\
    \ their corresponding\n   foreign patents:\n      Cryptographic Apparatus and\
    \ Method\n      (\"Diffie-Hellman\")............................... No. 4,200,770\n\
    \      Public Key Cryptographic Apparatus\n      and Method (\"Hellman-Merkle\"\
    ).................... No. 4,218,582\n      Cryptographic Communications System\
    \ and\n      Method (\"RSA\")................................... No. 4,405,829\n\
    \      Exponential Cryptographic Apparatus\n      and Method (\"Hellman-Pohlig\"\
    ).................... No. 4,424,414\n   These patents are stated by PKP to cover\
    \ all known methods of\n   practicing the art of Public Key encryption, including\
    \ the variations\n   collectively known as El Gamal.\n   Public Key Partners has\
    \ provided written assurance to the Internet\n   Society that parties will be\
    \ able to obtain, under reasonable,\n   nondiscriminatory terms, the right to\
    \ use the technology covered by\n   these patents.  This assurance is documented\
    \ in RFC 1170 titled\n   \"Public Key Standards and Licenses\".  A copy of the\
    \ written assurance\n   dated April 20, 1990, may be obtained from the Internet\
    \ Assigned\n   Number Authority (IANA).\n   The Internet Society, Internet Architecture\
    \ Board, Internet\n   Engineering Steering Group and the Corporation for National\
    \ Research\n   Initiatives take no position on the validity or scope of the patents\n\
    \   and patent applications, nor on the appropriateness of the terms of\n   the\
    \ assurance.  The Internet Society and other groups mentioned above\n   have not\
    \ made any determination as to any other intellectual property\n   rights which\
    \ may apply to the practice of this standard. Any further\n   consideration of\
    \ these matters is the user's own responsibility.\n"
- title: Security Considerations
  contents:
  - "Security Considerations\n   This entire document is about security.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   David Balenson\n   Trusted Information Systems\n   3060\
    \ Washington Road\n   Glenwood, Maryland 21738\n   Phone: 301-854-6889\n   EMail:\
    \ balenson@tis.com\n"
