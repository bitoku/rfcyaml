- title: __initial_text__
  contents:
  - "                            RFC - 869\n                   A Host Monitoring Protocol\n\
    \                        Robert M. Hinden\n                 BBN Communications\
    \ Corporation\n                          December 1983\n                     \
    \   Table of Contents\n1   Introduction..........................................\
    \ 1\n2   General Description................................... 3\n3   Relationship\
    \ to Other Protocols....................... 6\n4   Protocol Operation....................................\
    \ 7\n5   Header Formats....................................... 12\n5.1   IP Headers.........................................\
    \ 12\n5.2   HMP Header......................................... 13\n6   HMP Monitoring\
    \ Center Message Formats................ 16\n6.1   Message Type 100: Polling Message..................\
    \ 16\n6.2   Message Type 101: Error in Poll.................... 18\n6.3   Message\
    \ Type 102: Control acknowledgment........... 20\nA   Appendix A - IMP Monitoring..........................\
    \ 21\nA.1   Message Type 1: IMP Trap........................... 21\nA.2   Message\
    \ Type 2: IMP status......................... 24\nA.3   Message Type 3: IMP Modem\
    \ Throughput............... 29\nA.4   Message Type 4: IMP Host Throughput................\
    \ 32\nB   Appendix B - TAC Monitoring.......................... 35\nB.1   Message\
    \ Type 1: TAC Trap Message................... 35\nB.2   Message Type 2: TAC Status.........................\
    \ 38\nB.3   Message Type 3: TAC Throughput..................... 42\nC   Appendix\
    \ C - Gateway Monitoring...................... 47\nC.1   Gateway Parameters.................................\
    \ 47\nC.2   Message Type 1: Gateway Trap....................... 48\nC.3   Message\
    \ Type 2: Gateway Status..................... 51\nC.4   Message Type 3: Gateway\
    \ Throughput................. 58\nC.5   Message Type 4: Gateway Host Traffic Matrix........\
    \ 64\nC.6   Message Type 6: Gateway Routing.................... 67\n         \
    \          A Host Monitoring Protocol\n1  Introduction\n     The Host Monitoring\
    \   Protocol  (HMP)  is  used  to  collect\ninformation  from  hosts   in   various\
    \   networks.    A  host is\ndefined as an addressable  Internet  entity  that\
    \  can  send  and\nreceive  messages;  this  includes  hosts  such  as server\
    \ hosts,\npersonal work stations, terminal concentrators, packet  switches,\n\
    and  gateways.  At present  the Host Monitoring Protocol is being\nused to collect\
    \ information from Internet Gateways and TACs,  and\nimplementations  are  being\
    \  designed  for  other  hosts.   It is\ndesigned to monitor hosts spread over\
    \ the  internet  as  well  as\nhosts in a single network.\n     This document\
    \ is organized into three parts.  Section 2  and\n3  contains a general description\
    \ of the Host Monitoring protocol\nand its relationship to other  protocols. \
    \  Section  4  describes\nhow  it  operates.   Section 5 and 6 contain the descriptions\
    \ and\nformats of the HMP messages.  These are  followed  by  appendices\ncontaining\
    \ the formats of messages sent by some of the hosts that\nuse the HMP  to  collect\
    \  their  monitoring  information.   These\nappendicies included as examples only\
    \ and are not part of the HMP\nprotocol.\n     This document replaces the previous\
    \ HMP document \"IEN-197, A\nHost Monitoring Protocol.\"\n2  General Description\n\
    \     The  Host  Monitoring  Protocol  is  a  transaction-oriented\n(i.e.,  connection-less)\
    \  transport protocol.  It was designed to\nfacilitate  certain  simple  interactions\
    \  between  two  internet\nentities,  one  of which may be considered to be \"\
    monitoring\" the\nother.  (In discussing the protocol we will sometimes speak\
    \ of  a\n\"monitoring host\" and a \"monitored entity\".)  HMP was intended to\n\
    be a useful transport protocol for applications that involve  any\nor all of the\
    \ following three different kinds of interactions:\n   - The monitored entity\
    \ sometimes  needs  to  send  unsolicited\n     datagrams  to  the  monitoring\
    \  host.   The  monitoring host\n     should be able to tell  when  messages \
    \ from  the  monitored\n     entity  have  been lost in transit, and it should\
    \ be able to\n     determine the order in which the messages were sent, but the\n\
    \     application  does  not require that all messages be received\n     or that\
    \ they be received strictly in the  same  sequence  in\n     which they were sent.\n\
    \   - The monitoring host needs to gather data from the  monitored\n     entity\
    \ by using a query-response protocol at the application\n     level.  It is important\
    \ to be able to determine which  query\n     is being answered by a particular\
    \ response, and to determine\n     whether successive  responses  are  duplicates\
    \  of  previous\n     ones.\n   - The monitoring host must be able to initiate\
    \ certain control\n     functions  in  the  monitored entity, possibly including\
    \ the\n     setting  of  parameters  in  the  monitored   entity.    The\n   \
    \  monitoring  host  needs  to know if the control function has\n     been carried\
    \ out.\n     In addition, we assume that a given monitoring host  may  be\nmonitoring\
    \  several  different  types of entities simultaneously,\nand may be gathering\
    \ several different types of data from a given\ntype of monitored entity.  Several\
    \ different monitoring hosts may\nbe monitoring a given entity, and several processes\
    \ on  the  same\nhost may even be monitoring the same entity.\n     Messages from\
    \ the monitoring host to  the  monitored  entity\nare  called  \"polls\".  They\
    \ need to contain enough information to\nallow the monitored entity to make the\
    \ following determinations:\n   - The monitored entity must be able  to  determine\
    \  that  this\n     message  is  in  fact  a  poll  from a monitoring host.  The\n\
    \     \"system type,\" \"message type,\" and \"password\" fields in  the\n   \
    \  HMP header have been defined to meet this need.\n   - The monitored entity\
    \ may need to be  able  to  identify  the\n     particular  process  on  the \
    \ monitoring host that sent this\n     poll, so it can send its response back\
    \ to the right process.\n     The  \"port  number\" field in the HMP header has\
    \ been defined\n     to meet this need.\n   - The monitored  entity  must  be\
    \  able  to  indicate  to  the\n     monitoring  host,  in its response, precisely\
    \ which query is\n     being answered by  a  particular  response.   The  \"sequence\n\
    \     number field\" has been defined to meet this need.\n   - The monitored entity\
    \ must be able  to  determine  just  what\n     kind  of action the monitoring\
    \ host is requesting.  That is,\n     the  HMP  transport  protocol  must  provide\
    \  some  way   of\n     multiplexing  and  demultiplexing  the  various higher-level\n\
    \     applications which use it.  The  \"R-message  type\"  and  \"R-\n     subtype\"\
    \  fields of the polling message have been defined to\n     meet this need.\n\
    \     Messages from the monitored entity to  the  monitoring  host\nneed  to contain\
    \ enough information to enable the monitoring host\nto make the following determination:\n\
    \   - The monitoring host must be able to route  this  message  to\n     the \
    \ correct  process.   The  \"port number\" field meets this\n     need.\n   -\
    \ The monitoring host  must  be  able  to  match  up  received\n     messages\
    \  with  the  polls, if any, that elicited them.  The\n     \"returned sequence\
    \ number\" field in the HMP header has  been\n     defined to meet this need.\n\
    \   - The monitoring host must be able to determine  which  higher\n     level\
    \  application should receive a particular message.  The\n     \"system type\"\
    \ and \"message type\" fields are  used  for  this\n     purpose.\n   - The monitoring\
    \ host must be able to determine  whether  some\n     messages  of  a given type\
    \ were lost in transit, and whether\n     messages  have  arrived  out  of  sequence.\
    \   Although  this\n     function,  strictly speaking, belongs to the application\
    \ and\n     not to the  transport  layer,  the  HMP  header  contains  a\n   \
    \  \"sequence number\" for this purpose.\n     In addition, a simple one's complement\
    \ checksum is  provided\nin the HMP header to detect data corruption during transmission.\n\
    3  Relationship to Other Protocols\n     The  Host  Monitoring  Protocol  is \
    \ a  transport   protocol\ndesigned  to  fit into the layered internet protocol\
    \ environment.\nIt operates on  top  of  the  Internet/ICMP  protocol  and  under\n\
    applications  that  require  its  services.  This relationship is\nillustrated\
    \ in the following diagram:\n     +------+    +------+  +-------+      +------+\n\
    \     |TELNET| ...|  FTP |  |GATEWAY|  ... | TAC  |   Application Layer\n    \
    \ +------+    +------+  +-------+      +------+\n        |          |        \
    \   |             |\n        |          |           |             |\n        |__________|\
    \           |_____________|\n              |                       |\n       \
    \    +------+               +-------+\n           |  TCP |               |  HMP\
    \  |          Transport Layer\n           +------+               +-------+\n \
    \             |                       |\n              |                     \
    \  |\n           +-------------------------------------+\n           |    Internet\
    \ Protocol & ICMP         |   Internetwork Layer\n           +-------------------------------------+\n\
    \                              |\n                  +------------------------+\n\
    \                  | Local Network Protocol |         Network Layer\n        \
    \          +------------------------+\nIf internetwork services are not required\
    \ it should  be  possible\nto  run  the HMP without an Internetwork layer.  As\
    \ long as HMPs'\nservice requirnments (addressing,  protocol  demultiplexing,\
    \  and\noccasional  delivery)  are  met  it  should run over a variety of\nprotocols.\n\
    4  Protocol Operation\n     The  HMP  is  built  around  the  idea  that  most\
    \  of   the\nintelligence  needed  to  monitor  a  host  should  reside  in  a\n\
    monitoring center, not in the host.  The host should be  required\nonly to collect\
    \ data and send it to the monitoring center, either\nspontaneously or on request\
    \ from the monitoring center.  The host\nis  not  responsible  for insuring that\
    \ the data arrives reliably\n(except that it checksums  the  data);  instead,\
    \  the  monitoring\ncenter  is  responsible for ensuring that the data it requests\
    \ is\nreceived correctly.\n     Consequently,  the  HMP  is  based  on  polling\
    \  hosts   for\nmessages.   When the monitoring center requires a particular type\n\
    of data (e.g., throughput data), it sends  a  poll  to  the  host\nrequesting\
    \  that  type  of  report.  The host, upon receiving the\npoll, responds with\
    \ its latest set of  collected  data.   If  the\nhost  finds that the poll is\
    \ incorrect (e.g., if the poll was for\nthroughput data and the host is not collecting\
    \ throughput  data),\nit responds with an error message.  The monitoring center\
    \ waits a\nreasonable length of time for the host to answer its poll.  If no\n\
    response  is  received,  it sends another poll for the same data.\nIn this way,\
    \ if either a  poll  or  the  response  is  lost,  the\ncorrect data is still\
    \ collected.\n     The HMP is used to collect three different classes of data:\n\
    \     o  Spontaneous Events (or Traps)\n     o  Current status\n     o  Statistical\
    \ data collected over time\nThese classes of data allow a host to send data in\
    \ a manner  best\nsuited  to  the  data.  For instance, the host may quickly inform\n\
    the monitoring center that a particular  event  has  happened  by\nsending  a\
    \  trap message, while the monitoring center is reliably\ncollecting the host's\
    \ throughput and accounting data.\n     Traps report spontaneous  events,  as\
    \  they  occur,  to  the\nmonitoring center.  In order to insure their prompt\
    \ delivery, the\ntraps are  sent  as  datagrams  with  no  reliability  mechanisms\n\
    (except  checksums)  such as acknowledgments and retransmissions.\nTrap messages\
    \ usually contain an  identifier  to  indicate  which\nevent  is  being  reported,\
    \  the  local time in the host that the\nevent occured, and data pertinent to\
    \ the event.  The data portion\nis intended to be host and event specific.\n \
    \    Status information, the second type of data collected by the\nHost Monitoring\
    \ Protocol describes the current state of the host.\nStatus information is useful\
    \ at one point, but it does  not  have\nto be collected cumulatively over a certain\
    \ period of time.  Only\nthe latest status is of interest; old status provides\
    \  no  useful\ninformation.   The  monitoring center collects status information\n\
    by sending a poll for status to a host.  Upon receiving the poll,\nthe  host \
    \ responds  with  its  latest status information, always\ncreating a new status\
    \ message.  If the monitoring center does not\nreceive  a  response  to  its \
    \ poll,  it sends another poll.  The\nmonitoring center can decide if the host\
    \ is up or down  based  on\nwhether the host responds to its polls.\n     The\
    \ third type of data collected by the HMP  is  statistical\ndata.  These are measurements\
    \ taken over time, such as the number\nof packets sent or received by a host and\
    \ the  count  of  packets\ndropped  for  a  particular reason.  It is important\
    \ that none of\nthis type of data be lost.  Statistical data is  collected  in\
    \  a\nhost  over  a  time  interval.  When the collection time interval\nexpires,\
    \ the current data is copied  to  another  area,  and  the\ncounters  are cleared.\
    \  The copied data is sent to the monitoring\ncenter when the  host  receives\
    \  a  poll  requesting  statistical\ninformation.   If  another poll is received\
    \ before the collection\ntime interval has expired, the data in the buffer is\
    \ sent  again.\nThe  monitoring center can detect duplicate messages by using\
    \ the\nsequence number in the header of the message, since each type  of\nstatistical\
    \ data has its own sequence number counter.\n     The collection frequency  for\
    \  statistics  messages  from  a\nparticular  host  must be relatively long compared\
    \ to the average\nround trip message time between the monitoring  center  and\
    \  that\nhost inorder to allow the monitoring center to re-poll if it does\nnot\
    \ receive an answer.   With  this  restriction,  it  should  be\npossible   to\
    \   avoid  missing  any  statistics  messages.   Each\nstatistics message contains\
    \ a field giving the  local  time  when\nthe  data  was  collected  and  the time\
    \ at which the message was\nsent.  This information allows the monitoring center\
    \ to  schedule\nwhen  it sends a poll so that the poll arrives near the beginning\n\
    of each collection period.  This ensures that  if  a  message  is\nlost,  the\
    \  monitoring  center  will have sufficient time to poll\nagain for the statistics\
    \ message for that period.\n     The HMP also includes a provision to send data\
    \ to  and  read\nparameters  in  hosts.   The  data may be used to set switches\
    \ or\ninterval timers used to control measurements in  a  host,  or  to\ncontrol\
    \  the  host itself (e.g. a restart switch).  The format of\nthe data and parameters\
    \ is host specific.\n     To send data to a host, the monitoring center sends\
    \ the host\na  poll  for a control-acknowledgment message.  This poll message\n\
    includes the type of the data and the data being sent.  When  the\nhost  receives\
    \ this poll, it processes the data and responds with\na control-acknowledgment\
    \ message.\n     To read parameters in a host,  the  monitoring  center  will\n\
    send  a  poll for parameters to the host.  This poll includes the\ntype of the\
    \ parameters being read.  When the host  receives  this\npoll,  it  will  send\
    \ the parameters of the requested type to the\nmonitoring center in a parameters\
    \ message.\n5  Header Formats\n     Host Monitor Protocol messages have the following\
    \ format:\n                    +----------------+\n                    |  Local\
    \ Network |\n                    |    Header(s)   |\n                    +----------------+\n\
    \                    |  IP header     |\n                    +----------------+\n\
    \                    |      HMP       |\n                    |     Header    \
    \ |\n                    |                |\n                    +----------------+\n\
    \                    |    D           |\n                    |      A        \
    \ |\n                    |        T       |\n                    |          A\
    \     |\n                    +----------------+\n                    |  Padding\
    \       |\n                    +----------------+\n5.1  IP Headers\nHMP messages\
    \ are sent using the version 4 IP header as  described\nin  RFC-791  \"Internet\
    \  Protocol.\"  The HMP protocol number is 20\n(decimal).  The time to live field\
    \ should be set to a  reasonable\nvalue for the hosts being monitored.\nAll other\
    \ fields should be set as specified in RFC-791.\n5.2  HMP Header\nThe HMP header\
    \ format is:\n                  0             0 0             1\n            \
    \      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\n                 +---------------+---------------+\n\
    \               0 |  System Type  | Message Type  |\n                 +---------------+---------------+\n\
    \               1 |  Port Number  | Control Flag  |\n                 +---------------+---------------+\n\
    \               2 |        Sequence Number        |\n                 +---------------+---------------+\n\
    \               3 |  Password or Returned Seq. #  |\n                 +---------------+---------------+\n\
    \               4 |   One's Complement Checksum   |\n                 +---------------+---------------+\n\
    HMP FIELDS:\nSystem Type\nMessage Type\n     The combination  of system type and\
    \ message type  determines\n     the format of the data in the monitoring message.\n\
    \     The system types which have been defined are:\n                   System\
    \ Type  | Meaning\n                ----------------+-----------------\n      \
    \                 1        | Monitoring Host\n                       2       \
    \ | IMP\n                       3        | TAC\n                       4     \
    \   | Gateway\n                       5        | SIMP\n                      \
    \ 6        | BBN VAX/C70 TCP\n                       7        | PAD\n        \
    \               8        | Reserved\n                       9        | TIU\n \
    \                      10       | FEP\n                       11       | Cronus\
    \ Host\n                       12       | Cronus MCS\n     Message types are defined\
    \ and  used  for  each  system  type\n     according  to  the  needs of that system.\
    \  The message types\n     currently defined are:\n                    Type  \
    \ | Description\n                 ----------+--------------------------\n    \
    \                       |\n                    1      | Trap\n               \
    \     2      | Status\n                    3      | Thruput\n                \
    \    4      | HTM - Host Traffic Matrix\n                    5      | Parameters\n\
    \                    6      | Routing\n                    7      | Call Accounting\n\
    \                           |\n                    100    | Poll\n           \
    \         101    | Error\n                    102    | Control Acknowledgment\n\
    Port Number\n     This field can be used to multiplex similar messages to/from\n\
    \     different processes in one host.  It is currently unused.\nControl Flag\n\
    \     This field is used to pass control  information.   Currently\n     Bit \
    \ 15  is  defined  as  the  \"More bit\" which is used in a\n     message in responce\
    \ to a poll to indicate that there is more\n     data to poll for.\nSequence Number\n\
    \     Every message contains  a  sequence  number.   The  sequence\n     number\
    \  is incremented when each new message of that type is\n     sent.\nPassword\
    \ or Returned Sequence Number\n     The  Password field of a polling message from\
    \ an  monitoring\n     center  contains a password to  verify  that the  monitoring\n\
    \     center is  allowed  to  gather  information.   Responses  to\n     polling\
    \   messages   copy   the  Sequence  Number  from  the\n     polling  message\
    \   and  return  it   in   this   field   for\n     identification and round-trip\
    \ time calculations.\nChecksum\n     The  Checksum  field  is  the one's complement\
    \ of the  one's\n     complement  sum of all the 16-bit words in  the  header\
    \  and\n     data  area.\n6  HMP Monitoring Center Message Formats\n6.1  Message\
    \ Type 100: Polling Message\nDescription\n     The monitoring center will send\
    \ polls to  the  hosts  it  is\n     monitoring  to  collect their monitoring\
    \ data. When the host\n     receives a poll it will  return   a   message  of\
    \  the  type\n     requested.   It   will  only  answer a poll with the correct\n\
    \     system type and password and will return  an  error  message\n     (Message\
    \  Type  101)  if  it  receives  a poll for the wrong\n     system type or an\
    \ unsupported message type.\n     The Poll message includes a  facility  to  send\
    \  data  to  a\n     monitored host.  The poll message to send data consists of\
    \ a\n     poll  for  a  Control  Acknowledgment  message  (type   102)\n     followed\
    \  by  the data.  The R-Subtype specifies the type of\n     the data that  is\
    \  being  sent.   When  the  monitored  host\n     receives  a  Poll for a Control\
    \ acknowledgment, it processes\n     the data, and then responds with an  Control\
    \  acknowledgment\n     message.  If the monitored host can not process the data,\
    \ it\n     should respond with an error message.\n     A poll to read parameters\
    \ consists a poll for  a  Parameters\n     message.   The  R-Subtype  specifies\
    \  the type of parameters\n     being read.  When the monitored host receives\
    \ a poll  for  a\n     Parameters  message,  it  responds with a Parameters message\n\
    \     containing the requested information.\n     A polling message has the following\
    \ form:\n              0             0 0             1\n              0 1 2 3\
    \ 4 5 6 7 8 9 0 1 2 3 4 5\n             +---------------+---------------+\n  \
    \         0 | R-Message Type|   R-Subtype   |\n             +---------------+---------------+\n\
    \             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n           1 |             Data\
    \              |\n             +                               +\n           2\
    \ |                               |\n             +                          \
    \     +\n             .                               .\n             .      \
    \                         .\n           n |                               |\n\
    \             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\nHMP FIELDS\nSystem Type\n   \
    \  The type of machine being polled.\nMessage Type\n     Polling Message = 100\n\
    Port Number\n     Unused\nControl Flag\n     Unused\nSequence Number\n     The\
    \ sequence number identifies  the  polling  request.   The\n     Monitoring  Center\
    \  will  maintain separate sequence numbers\n     for each host it monitors. \
    \ This sequence number is returned\n     in the response to a poll and the monitoring\
    \ center will use\n     this information to associate polls with their responses\
    \ and\n     to determine round trip times.\nPassword\n     The monitoring password.\n\
    POLL FIELDS\nR-Message Type\n     The message type requested.\nR-Subtype\n   \
    \  This field is used when sending data and reading  parameters\n     and  it\
    \  specifies  the  type  of  the  data  being  sent or\n     parameters being\
    \ read.\nData\n     When  the  poll  is  requesting  a  Control   Acknowledgment\n\
    \     message,  data  is included in the poll message.  A poll for\n     any other\
    \ type of message does not include any data  .   The\n     contents of the data\
    \ is host specific.\n6.2  Message Type 101: Error in Poll\nDescription\n     This\
    \ message is sent  in  response  to  a  faulty  poll  and\n     specifies the\
    \ nature of the error.\n     An error message has the following form:\n      \
    \        0             0 0             1\n              0 1 2 3 4 5 6 7 8 9 0\
    \ 1 2 3 4 5\n             +---------------+---------------+\n           0 |  \
    \        Error Type           |\n             +---------------+---------------+\n\
    \           1 | R-Message Type|   R-Subtype   |\n             +---------------+---------------+\n\
    HMP FIELDS\nSystem Type\n     The type of machine sending message.\nMessage Type\n\
    \     Error Message = 101\nPort Number\n     Unused\nControl Flag\n     Unused\n\
    Sequence Number\n     A 16 bit number incremented each time an  error  message\
    \  is\n     sent.\nReturned Sequence Number\n     The Sequence Number of the polling\
    \ message which caused  the\n     error.\nERROR MESSAGE FIELDS\nError Type\n \
    \    This field specifies the nature of the error  in  the  poll.\n     The following\
    \ error types have been defined.\n                 1 = Reason unspecified.\n \
    \                2 = Bad R-Message Type.\n                 3 = Bad R-Subtype.\n\
    \                 4 = Unknown parameter\n                 5 = Invalid parameter\
    \ value\n                 6 = Invalid parameter/value format\n               \
    \  7 = Machine in Loader\nR-Message Type\nR-Subtype\n     These fields identify\
    \ the poll request in error.\n6.3  Message Type 102: Control acknowledgment\n\
    Description\n     This message is sent in response to a poll for this type  of\n\
    \     message.   It  is used to acknowledge poll messages that are\n     used\
    \ to set parameters in the monitored host.\n     The Control acknowledgment has\
    \ no fields other than the  HMP\n     header.\nHMP FIELDS\nSystem Type\n     The\
    \ type of the system sending the message.\nMessage Type\n     Control acknowledgment\
    \ = 102\nPort Number\n     Unused\nControl Flag\n     Unused\nSequence Number\n\
    \     A  16  bit  number   incremented   each   time   a   Control\n     acknowledgment\
    \ message is sent.\nReturned Sequence Number\n     The Sequence Number of the\
    \ polling message  which  requested\n     this message.\nA  Appendix A - IMP Monitoring\n\
    A.1  Message Type 1: IMP Trap\nDescription\n     When a trap occurs, it is buffered\
    \ in the IMP  and  sent  as\n     soon  as possible.  Trap messages are unsolicited.\
    \  If traps\n     happen in close sequence, several traps may be sent  in  one\n\
    \     message.\n     Through the use of sequence numbers, it will be possible\
    \  to\n     determine   how  many  traps  are  being  lost.   If  it  is\n   \
    \  discovered that many are lost, a  polling  scheme  might  be\n     implemented\
    \ for traps.\n     A IMP trap message has the following form:\n              \
    \    0             0 0             1\n                  0 1 2 3 4 5 6 7 8 9 0\
    \ 1 2 3 4 5\n                 +---------------+---------------+\n            \
    \   0 |       # of traps lost         |\n                 +---------------+---------------+\n\
    \               1 :         first                 :\n               . :      \
    \       trap              :\n               . :                 data         \
    \ :\n               . +---------------+---------------+\n               . :  \
    \       additional            :\n               . :             trap         \
    \     :\n               . :                 data          :\n                \
    \ +---------------+---------------+\nHMP Fields\nSystem Type\n     IMP = 2\nMessage\
    \ Type\n     IMP Trap Message = 1\nPort Number\n     Unused\nControl Flag\n  \
    \   Unused\nPassword\n     Unused\nSequence Number\n     A 16 bit number incremented\
    \ each time a trap message is sent\n     so  that  the  HM  can  order the received\
    \ trap messages and\n     detect missed messages.\nIMP TRAP FIELDS\n# of traps\
    \ lost\n     Under certain conditions, an IMP may overflow  its  internal\n  \
    \   trap  buffers  and  be  unable  to save traps to send.  This\n     counter\
    \ keeps track of such occurrences.\nTrap Reports\n     There can be several blocks\
    \ of trap data  in  each  message.\n     The format for each such block is below.\n\
    \                 +---------------+---------------+\n                 |      \
    \       Size              |\n                 +---------------+---------------+\n\
    \                 |             Time              |\n                 +---------------+---------------+\n\
    \                 |            Trap ID            |\n                 +---------------+---------------+\n\
    \                 :             Trap              :\n                 :      \
    \       Data              :\n                 +---------------+---------------+\n\
    \  Size\n     Size is the number of 16 bit words in the trap, not counting\n \
    \    the size field.\n  Time\n     The time (in 640 ms. units)  at  which  the\
    \  trap  occurred.\n     This  field  is  used to sequence the traps in a message\
    \ and\n     associate groups of traps.\n  Trap ID\n     This is usually the program\
    \ counter at  the  trap.   The  ID\n     identifies  the  trap,  and  does  not\
    \  have to be a program\n     counter, provided it uniquely identifies the trap.\n\
    \  Trap Data\n     The IMP returns data giving more information about the trap.\n\
    \     There are usually two entries: the values in the accumulator\n     and the\
    \ index register at the occurrence of the trap.\nA.2  Message Type 2: IMP status\n\
    Description\n     The status message gives a quick summary of the state of the\n\
    \     IMP.   Status  of the most important features of the IMP are\n     reported\
    \  as  well  as  the  current  configuration  of  the\n     machine.\n     The\
    \ format of the status message is as follows:\n                  0           \
    \  0 0             1\n                  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\n    \
    \             +---------------+---------------+\n               0 |    Software\
    \ Version Number    |\n                 +---------------+---------------+\n  \
    \               |       Last Trap Message       |\n                 +---------------+---------------+\n\
    \                 | Max # Hosts   | Max # Modems  |\n                 +---------------+---------------+\n\
    \                 | Max # Channels|  Max # IMPs   |\n                 +---------------+---------------+\n\
    \                 |      Package bits 0-15.       |\n                 +---------------+---------------+\n\
    \               5 |      Package bits 16.-31.     |\n                 +---------------+---------------+\n\
    \                 |                               |\n                 +      \
    \    Crash                +\n                 |                              \
    \ |\n                 +                Data           +\n                 |  \
    \                             |\n                 +---------------+---------------+\n\
    \                 |           Anomalies           |\n                 +---------------+---------------+\n\
    \              10 |   Free Pool   |   S+F Pool    |\n                 +---------------+---------------+\n\
    \                 |Reassembly Pool| Allocated Pool|\n                 +---------------+---------------+\n\
    \                 | HIHD0 | HIHD1 | HIHD2 | HIHD3 |\n               . +---------------+---------------+\n\
    \               . : HIHD4 | ...............       :\n               . +---------------+---------------+\n\
    \                             (cont.)\n     Imp Status (cont.)\n             \
    \  . +---------------+---------------+\n               . |        Modem      \
    \            |\n               . +             State             +\n         \
    \      . |                  Data         |\n               . +---------------+---------------+\n\
    \               . :         Modem   State         :\n               . :      \
    \       Data......        :\n                 +---------------+---------------+\n\
    HMP FIELDS\nSystem Type\n     IMP = 2\nMessage Type\n     IMP status message =\
    \ 2\nPort Number\n     Unused\nControl Flag\n     Unused\nSequence Number\n  \
    \   A 16 bit number incremented each time a  status  message  is\n     sent.\n\
    Password\n     The password contains the sequence  number  of  the  polling\n\
    \     message to which this message responds.\nIMP STATUS FIELDS\nSoftware Version\
    \ Number\n     The IMP version number.\nLast Trap Message\n     Contains the sequence\
    \ number of the last trap  message  sent\n     to  the  HM.  This will allow the\
    \ HM to detect how many trap\n     messages are being lost.\nHosts\n     The number\
    \ of configured hosts in this system.\nModems\n     The number of configured modems\
    \ in this system.\nChannels\n     The maximum possible number  of  IMP-IMP  channels\
    \  in  this\n     system.\nIMPs\n     The maximum possible number of IMPs in this\
    \ system.\nPackage Bits\n     This is a bit encoded word that reports the set\
    \ of  packages\n     currently loaded in the system.  The table below defines\
    \ the\n     bits.\n                    Bit    Package\n                 (octal)\n\
    \                (1st Word)\n                    1      VDH\n                \
    \    2      Logical address tables\n                    4      Mezmode\n     \
    \              10      Cumulative Statistics\n                   20      Trace\n\
    \                   40      TTY\n                  100      DDT\n            \
    \      200      HDLC\n                  400      HDH\n                 1000  \
    \    Cassette Writer\n                 2000      Propagation Delay Measurement\n\
    \                 4000      X25\n                10000      Profile Measurements\n\
    \                20000      Self Authenticating Password\n                40000\
    \      Host traffic Matrix\n               100000      Experimental/Special\n\
    \                (2nd Word)\n                    1      End-to-end Statistics\n\
    \                    2      Store and Forward statistics\nCrash Data\n     Crash\
    \  data  reports  the   circumstances   surrounding   an\n     unexpected  crash.\
    \   The  first word reports the location of\n     the crash and the following\
    \ two  are  the  contents  of  the\n     accumulator and index registers.\nAnomalies\n\
    \     Anomalies is a collection of bit  flags  that  indicate  the\n     state\
    \  of  various  switches or processes in the IMP.  These\n     are  very  machine\
    \  dependent  and  only  a   representative\n     sampling of bits is listed below.\n\
    \               Bit       Meaning\n             (octal)\n               20   \
    \   Override ON\n              200      Trace ON\n             1000      Statistics\
    \ ON\n             2000      Message Generator ON\n             4000      Packet\
    \ Trace ON\n            10000      Host Data Checksum is BAD\n            20000\
    \      Reload Location SET\nBuffer Pool Counts\n     These are four bytes  of\
    \  counters  indicating  the  current\n     usage  of  buffers in the IMP.   The\
    \ four counters are: free\n     buffers, store-and-forward buffers, reassembly\
    \  buffers  and\n     allocated buffers.\nHIHD0 - HIHDn\n     Each  four  bit\
    \  HIHD  field  gives   the   state   of   the\n     corresponding host.\n   \
    \        Value   Meaning\n             0       UP\n             1       ready\
    \ line down\n             2       tardy\n             3       non-existent\nModem\
    \ State Data\n     Modem state data contains six  fields  of  data  distributed\n\
    \     over  four  words.   The  first field (4 bits) indicates the\n     line\
    \ speed; the second field (4 bits) is the number  of  the\n     modem  that is\
    \ used by the neighboring IMP on this line; the\n     third field (8 bits) is\
    \ the number of  line  protocol  ticks\n     covered  by  this  report; the fourth\
    \ (1 bit) indicates line\n     down(1) or up(0); the fifth (7 bits) is the  IMP\
    \  number  of\n     neighbor  IMP on the line; and the sixth (8 bits) is a count\n\
    \     of missed protocol packets over the  interval  specified  in\n     the third\
    \ field.\nA.3  Message Type 3: IMP Modem Throughput\nDescription\n     The modem\
    \ throughput message reports traffic statistics  for\n     each modem in the system.\
    \ The IMP will collect these data at\n     regular intervals and save them awaiting\
    \ a poll from the HM.\n     If  a  period  is  missed  by the HM, the new results\
    \ simply\n     overwrite the old.  Two time stamps bracket  the  collection\n\
    \     interval  (data-time  and prev-time) and are an indicator of\n     missed\
    \ reports.  In addition, mess-time indicates  the  time\n     at which the message\
    \ was sent.\n     The modem throughput message will accommodate up to fourteen\n\
    \     modems  in  one  packet.   A provision is made to split this\n     into\
    \ multiple packets by including a modem  number  for  the\n     first  entry \
    \ in  the packet.  This field is not immediately\n     useful, but if machine\
    \ sizes grow beyond fourteen modems  or\n     if  modem  statistics become more\
    \ detailed and use more than\n     three words per modem, this can be used to\
    \ keep the  message\n     within a single ARPANET packet.\n     The format of\
    \ the modem throughput message is as follows:\n                  0           \
    \  0 0             1\n                  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\n    \
    \             +---------------+---------------+\n               0 |          \
    \ Mess-Time           |\n                 +---------------+---------------+\n\
    \                 |    Software Version Number    |\n                 +---------------+---------------+\n\
    \                 |           Data-Time           |\n                 +---------------+---------------+\n\
    \                 |           Prev-Time           |\n                 +---------------+---------------+\n\
    \                 | Total  Modems |  This  Modem  |\n                 +---------------+---------------+\n\
    \               5 |                               |\n               . +      \
    \       modem             +\n               . |                              \
    \ |\n               . +           throughput          +\n               . |  \
    \                             |\n               . +---------------+---------------+\n\
    \               . :             modem             :\n               . :      \
    \                         :\n               . :          throughput          \
    \ :\n                 +---------------+---------------+\nHMP FIELDS\nSystem Type\n\
    \     IMP = 2\nMessage Type\n     IMP Modem Throughput message = 3\nPort Number\n\
    \     Unused\nControl Flag\n     Unused\nSequence Number\n     A 16 bit number\
    \  incremented  at  each  collection  interval\n     (i.e.  when  a new throughput\
    \ message is assembled).  The HM\n     will be  able  to  detect  lost  or  duplicate\
    \  messages  by\n     checking the sequence numbers.\nPassword\n     The password\
    \ contains the sequence  number  of  the  polling\n     message to which this\
    \ message responds.\nIMP MODEM THROUGHPUT FIELDS\nMess-time\n     The time (in\
    \ 640ms. units) at which the message was sent  to\n     the HM.\nSoftware Version\
    \ Number\n     The IMP version number.\nData-Time\n     Data-time is the time\
    \ (in 640ms. units)  when  this  set  of\n     data was collected.  (See Description.)\n\
    Prev-Time\n     Prev-time is the time (in 640 ms.  units)  of  the  previous\n\
    \     collection of data (and therefore, is the time when the data\n     in this\
    \ message began accumulating.)\nTotal Modems\n     This is the number of modems\
    \ in the system.\nThis Modem\n     This Modem is the number of the first modem\
    \ reported in this\n     message.   Large  systems  that  are unable to fit all\
    \ their\n     modem reports into a single packet may  use  this  field  to\n \
    \    separate their message into smaller chunks to take advantage\n     of single\
    \ packet message efficiencies.\nModem Throughput\n     Modem  throughput  consists\
    \   of   three   words   of   data\n     reporting  packets  and  words  output\
    \  on  each modem.  The\n     first  word  counts packets  output and  the  following\
    \  two\n     count  word  throughput.   The  double  precision  words are\n  \
    \   arranged high order first.  (Note  also that  messages  from\n     Honeywell\
    \  type machines (316s, 516s and C30s) use a fifteen\n     bit low order word.)\
    \  The first block reports output on  the\n     modem  specified  by  \"This \
    \ Modem\".   The  following blocks\n     report on consecutive modems.\nA.4  Message\
    \ Type 4: IMP Host Throughput\nDescription\n     The host throughput message reports\
    \ traffic  statistics  for\n     each host in the system.  The IMP will collect\
    \ these data at\n     regular intervals and save them awaiting a poll from the\
    \ HM.\n     If  a  period  is  missed  by the HM, the new results simply\n   \
    \  overwrite the old.  Two time stamps bracket  the  collection\n     interval\
    \  (data-time  and prev-time) and are an indicator of\n     missed reports.  In\
    \ addition, mess-time indicates  the  time\n     at which the message was sent.\n\
    \     The host throughput format will hold  only  three  hosts  if\n     packet\
    \  boundaries are to be respected.  A provision is made\n     to split this into\
    \ multiple  packets  by  including  a  host\n     number for the first entry in\
    \ the packet.\n     The format of the host throughput message is as follows:\n\
    \                  0             0 0             1\n                  0 1 2 3\
    \ 4 5 6 7 8 9 0 1 2 3 4 5\n                 +---------------+---------------+\n\
    \               0 |           Mess-Time           |\n                 +---------------+---------------+\n\
    \                 |    Software Version Number    |\n                 +---------------+---------------+\n\
    \                 |           Data-Time           |\n                 +---------------+---------------+\n\
    \                 |           Prev-Time           |\n                 +---------------+---------------+\n\
    \                 |  Total Hosts  |   This  Host  |\n                 +---------------+---------------+\n\
    \               5 :              host             :\n               . :      \
    \     throughput          :\n                 +---------------+---------------+\n\
    HMP FIELDS\nSystem Type\n     IMP = 2\nMessage Type\n     IMP host Throughput\
    \ message = 4\nPort Number\n     Unused\nControl Flag\n     Unused\nSequence Number\n\
    \     A 16 bit number  incremented  at  each  collection  interval\n     (i.e.\
    \  when  a new throughput message is assembled).  The HM\n     will be  able \
    \ to  detect  lost  or  duplicate  messages  by\n     checking the sequence numbers.\n\
    Password\n     The password contains the sequence  number  of  the  polling\n\
    \     message to which this message responds.\nIMP HOST THROUGHPUT FIELDS\nMess-time\n\
    \     The time (in 640ms. units) at which the message was sent  to\n     the HM.\n\
    Software Version Number\n     The IMP version number.\nData-Time\n     Data-time\
    \ is the time (in 640ms. units)  when  this  set  of\n     data was collected.\
    \  (See Description.)\nPrev-Time\n     Prev-time is the time (in 640 ms.  units)\
    \  of  the  previous\n     collection of data (and therefore, is the time when\
    \ the data\n     in this message began accumulating.)\nTotal Hosts\n     The total\
    \ number of hosts in this system.\nThis Host\n     This host is the number of\
    \ the first host reported  in  this\n     message.   Large  systems  that  are\
    \ unable to fit all their\n     host reports into a single packet  may  use  this\
    \  field  to\n     separate their message into smaller chunks to take advantage\n\
    \     of single packet message efficiencies.\nHost Throughput\n     Each host\
    \ throughput block consists of eight  words  in  the\n     following format:\n\
    \                 +---------------+---------------+\n                 |      messages\
    \ to network      |\n                 +---------------+---------------+\n    \
    \             |     messages from network     |\n                 +---------------+---------------+\n\
    \                 |        packets to net         |\n                 +---------------+---------------+\n\
    \                 |       packets from net        |\n                 +---------------+---------------+\n\
    \                 |       messages to local       |\n                 +---------------+---------------+\n\
    \                 |      messages from local      |\n                 +---------------+---------------+\n\
    \                 |        packets to local       |\n                 +---------------+---------------+\n\
    \                 |       packets from local      |\n                 +---------------+---------------+\n\
    \     Each host throughput message will contain several blocks  of\n     data.\
    \   The  first  block  will  contain  data  for the host\n     specified in  First\
    \  Host  Number.   Following  blocks  will\n     contain data for consecutive\
    \ hosts.  All counters are single\n     precision.\nB  Appendix B - TAC Monitoring\n\
    B.1  Message Type 1: TAC Trap Message\nDescription\n     When a trap occurs, it\
    \ is buffered in the TAC  and  sent  as\n     soon  as possible.  Trap messages\
    \ are unsolicited.  If traps\n     happen in close sequence, several traps may\
    \ be sent  in  one\n     message.\n     Through the use of sequence numbers, it\
    \ will be possible  to\n     determine   how  many  traps  are  being  lost. \
    \  If  it  is\n     discovered that many are lost, a  polling  scheme  might \
    \ be\n     implemented for traps.\n     A TAC trap message has the following form:\n\
    \                  0             0 0             1\n                  0 1 2 3\
    \ 4 5 6 7 8 9 0 1 2 3 4 5\n                 +---------------+---------------+\n\
    \               0 |           Version #           |\n                 +---------------+---------------+\n\
    \               1 :         first                 :\n               . :      \
    \       trap              :\n               . :                 data         \
    \ :\n               . +---------------+---------------+\n               . :  \
    \       additional            :\n               . :             trap         \
    \     :\n               . :                 data          :\n                \
    \ +---------------+---------------+\nHMP FIELDS\nSystem Type\n     TAC = 3\nMessage\
    \ Type\n     TAC Trap Message = 1\nPort Number\n     Unused\nControl Flag\n  \
    \   Unused\nPassword or Returned Sequence Number\n     Unused\nSequence Number\n\
    \     A 16 bit number incremented each time a trap message is sent\n     so  that\
    \  the  HM  can  order the received trap messages and\n     detect missed messages.\n\
    TAC TRAP FIELDS\nVersion #\n     The version # of the TAC Software.\nTrap Reports\n\
    \     There can be several blocks of trap data in each message.\n     The format\
    \ of the trap data is as follows:\n                 +---------------+---------------+\n\
    \                 |             Size              |\n                 +---------------+---------------+\n\
    \                 |             Time              |\n                 +---------------+---------------+\n\
    \                 |            Trap ID            |\n                 +---------------+---------------+\n\
    \                 :             Trap              :\n                 :      \
    \       Data              :\n                 +---------------+---------------+\n\
    \                 |            Count              |\n                 +-------------------------------+\n\
    \  Size\n     Size is the number of 16 bit words in the trap, not counting\n \
    \    the size field.\n  Time\n     The time (in 640ms. units) at which the trap\
    \ occurred.  This\n     field  is  used  to  sequence  the  traps  in  a message\
    \ and\n     associate groups of traps.\n  Trap ID\n     This is (usually) the\
    \ program counter at the trap.   The  ID\n     identifies  the  trap,  and  does\
    \  not  have to be a program\n     counter, provided that it uniquely identifies\
    \ the trap.\n  Trap Data\n     The TAC returns data giving more information about\
    \ the trap.\n     There are usually two entries: the values in the accumulator\n\
    \     and the index register at the occurrence of the trap.\n  Count\n     The\
    \ TAC Counts repetitions of the same trap ID  and  reports\n     this count here.\n\
    B.2  Message Type 2: TAC Status\nDescription\n     The status message gives a\
    \ quick summary of the state of the\n     TAC.   Status  of the most important\
    \ features of the TAC are\n     reported  as  well  as  the  current  configuration\
    \  of  the\n     machine.\n     A TAC status message has the following form:\n\
    \                  0             0 0             1\n                  0 1 2 3\
    \ 4 5 6 7 8 9 0 1 2 3 4 5\n                  ---------------+---------------+\n\
    \               0 |         Version Number        |\n                 +---------------+---------------+\n\
    \                 |       Last Trap Message       |\n                 +---------------+---------------+\n\
    \                 |           Bit Flags           |\n                 +---------------+---------------+\n\
    \                 |         Free PDB count        |\n                 +---------------+---------------+\n\
    \                 |         Free MBLK count       |\n                 +---------------+---------------+\n\
    \               5 |      # of TCP connections     |\n                 +---------------+---------------+\n\
    \                 |      # of NCP connections     |\n                 +---------------+---------------+\n\
    \                 |         INA A Register        |\n                 +---------------+---------------+\n\
    \                 |         INA X Register        |\n                 +---------------+---------------+\n\
    \                 |         INA B Register        |\n                 +---------------+---------------+\n\
    \              l0 |         restart/reload        |\n                 +---------------+---------------+\n\
    \                 |                               |\n                 +      \
    \    Crash                +\n                 |                              \
    \ |\n                 +                Data           +\n              13 |  \
    \                             |\n                 +---------------+---------------+\n\
    HMP FIELDS\nSystem Type\n     TAC = 3\nMessage Type\n     TAC Status Message =\
    \ 2\nPort Number\n     Unused\nControl Flag\n     Unused\nSequence Number\n  \
    \   A 16 bit number incremented each time a  status  message  is\n     sent.\n\
    Returned Sequence Number\n     Contains  the  sequence  number  from  the  polling\
    \  message\n     requesting this report.\nTAC STATUS FIELDS\nVersion Number\n\
    \     The TAC's software version number.\nLast Trap Message\n     Contains the\
    \ sequence number of the last trap  message  sent\n     to  the  HM.  This will\
    \ allow the HM to detect how many trap\n     messages are being lost.\nBit Flags\n\
    \     There are sixteen bit  flags  available  for  reporting  the\n     state\
    \  of  various  switches  (hardware and software) in the\n     TAC.  The bits\
    \ are numbered as follows for purposes  of  the\n     discussion below.\n    \
    \             0             0 0             1\n                 0 1 2 3 4 5 6\
    \ 7 8 9 0 1 2 3 4 5\n                +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     \
    \           | | | | | | | | | | | | | | | | |\n                +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \          The bit flags report the status of the following:\n          Bit  \
    \       Meaning\n          15          0 => DDT override off; 1 => override on.\n\
    \          11-14       0 => Sense Switch n is off; 1 => SSn on.\n          10\
    \          0 => Traps to remote monitor;\n                      1 => Traps to\
    \ console.\n          9           1 => Message generator on.\n          0-8  \
    \       unused\nFree PDB count\n     The number of PDBs on the free queue.\nFree\
    \ MBLK count\n     The number of MBLKs on the free queue.\n# of TCP connections\n\
    # of NCP connections\n     The number of open connections for each protocol.\n\
    INA Report\n     These three fields report the values retained by an INA 1011\n\
    \     instruction  in  a  C/30.  This  instruction  returns micro-\n     machine\
    \ status and  errors.   In  a  #316,  the  fields  are\n     meaningless.\nRestart/Reload\n\
    \     This word reports a restart or reload of the TAC\n           Value     \
    \ Meaning\n             1       restarted\n             2       reloaded\nCrash\
    \ Data\n     Crash  data  reports  the   circumstances   surrounding   an\n  \
    \   unexpected  crash.   The  first word reports the location of\n     the crash\
    \ and the following two  are  the  contents  of  the\n     accumulator and index\
    \ registers.\nB.3  Message Type 3: TAC Throughput\nDescription\n     The  TAC\
    \  throughput  message  reports  statistics  for  the\n     various modules of\
    \ the TAC.  The TAC will collect these data\n     at regular intervals and save\
    \ them awaiting a poll from  the\n     HM.  If a period is missed by the HM, the\
    \ new results simply\n     overwrite the old.  Two time stamps bracket  the  collection\n\
    \     interval  (data-time  and prev-time) and are an indicator of\n     missed\
    \ reports.  In addition, mess-time indicates  the  time\n     at which the message\
    \ was sent.\n     A TAC throughput message has the following form:\n         \
    \      0             0 0             1\n               0 1 2 3 4 5 6 7 8 9 0 1\
    \ 2 3 4 5\n              +---------------+---------------+\n            0 |  \
    \         Mess-Time           |\n              +---------------+---------------+\n\
    \              |           Data-Time           |\n              +---------------+---------------+\n\
    \              |           Prev-Time           |\n              +---------------+---------------+\n\
    \              |         Version Number        |\n              +---------------+---------------+\n\
    \              |       Last Trap Message       |\n              +---------------+---------------+\n\
    \            5 |           Bit Flags           |\n              +---------------+---------------+\n\
    \              |         Free PDB count        |\n              +---------------+---------------+\n\
    \              |         Free MBLK count       |\n              +---------------+---------------+\n\
    \              |      # of TCP connections     |\n              +---------------+---------------+\n\
    \              |      # of NCP connections     |\n              +---------------+---------------+\
    \ ----\n           10 |     Host Input Throughput     |    ^\n              +---------------+---------------+\
    \    |\n              |     Host Input Abort Count    |    |\n              +---------------+---------------+\
    \    |\n              |    Host Input Garbled Count   |    |\n              +---------------+---------------+\
    \    |\n              |    Host Output Throughput     | 1822 info.\n         \
    \     +---------------+---------------+    |\n                            (continued)\n\
    \     TAC throughput (cont.)\n              +---------------+---------------+\
    \    |\n              |    Host Output Abort Count    | 1822 info.\n         \
    \     +---------------+---------------+    |\n           15 |        Host Down\
    \ Count        |    v\n              +---------------+---------------+ ----\n\
    \              |      # of datagrams sent      |    ^\n              +---------------+---------------+\
    \    |\n              |    # of datagrams received    |    |\n              +---------------+---------------+\
    \  IP info.\n              |    # of datagrams discarded   |    |\n          \
    \    +---------------+---------------+    |\n              |    # of fragments\
    \ received    |    v\n              +---------------+---------------+    |\n \
    \          20 |    # of fragments discarded   |    v\n              +---------------+---------------+\
    \ ----\n              |      # of segments sent       |    ^\n              +---------------+---------------+\
    \    |\n              |    # of segments received     |    |\n              +---------------+---------------+\
    \    |\n              |    # of segments discarded    |    |\n              +---------------+---------------+\
    \  TCP info.\n              |       # of octets sent        |    |\n         \
    \     +---------------+---------------+    |\n           25 |     # of octets\
    \ received      |    |\n              +---------------+---------------+    |\n\
    \              |     # of retransmissions      |    v\n              +---------------+---------------+\
    \ ----\nHMP FIELDS\nSystem Type\n     TAC = 3\nMessage Type\n     TAC Throughput\
    \ Message = 3\nPort Number\n     Unused\nControl Flag\n     Unused\nSequence Number\n\
    \     A 16 bit number  incremented  at  each  collection  interval\n     (i.e.\
    \  when  a new throughput message is assembled).  The HM\n     will be  able \
    \ to  detect  lost  or  duplicate  messages  by\n     checking the sequence numbers.\n\
    Returned Sequence Number\n     Contains  the  sequence  number  from  the  polling\
    \  message\n     requesting this report.\nTAC THROUGHPUT FIELDS\nMess-time\n \
    \    The time (in 640ms. units) at which the message was sent  to\n     the HM.\n\
    Data-Time\n     Data-time is the time (in 640ms. units)  when  this  set  of\n\
    \     data was collected.  (See Description.)\nPrev-Time\n     Prev-time is the\
    \ time (in 640 ms.  units)  of  the  previous\n     collection of data (and therefore,\
    \ is the time when the data\n     in this message began accumulating.)\nVersion\
    \ Number\n     The TAC's software version number.\nLast Trap Message\n     Contains\
    \ the sequence number of the last trap  message  sent\n     to  the  HM.  This\
    \ will allow the HM to detect how many trap\n     messages are being lost.\nBit\
    \ Flags\n     There are sixteen bit  flags  available  for  reporting  the\n \
    \    state  of  various  switches  (hardware and software) in the\n     TAC. \
    \ The bits are numbered as follows for purposes  of  the\n     discussion below.\n\
    \                 0             0 0             1\n                 0 1 2 3 4\
    \ 5 6 7 8 9 0 1 2 3 4 5\n                +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n \
    \               | | | | | | | | | | | | | | | | |\n                +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \          The bit flags report the status of the following:\n          Bit  \
    \       Meaning\n          15          0 => DDT override off; 1 => override on.\n\
    \          11-14       0 => Sense Switch n is off; 1 => SSn on.\n          10\
    \          0 => Traps to remote monitor;\n                      1 => Traps to\
    \ console.\n          9           1 => Message generator on.\n          0-8  \
    \       unused\nFree PDB count\n     The number of PDBs on the free queue.\nFree\
    \ MBLK count\n     The number of MBLKs on the free queue.\n# of TCP connections\n\
    # of NCP connections\n     The number of open connections for each protocol.\n\
    1822 info.\n     These  six  fields  report  statistics  which  concern   the\n\
    \     operation  of  the  1822 protocol module, i.e. the interface\n     between\
    \ the TAC and its IMP.\nIP info.\n     These five fields report statistics which\
    \  concern  Internet\n     Protocol in the TAC.\nTCP info.\n     These  six  fields\
    \  report  statistics  which  concern   TCP\n     protocol in the TAC.\nC  Appendix\
    \ C - Gateway Monitoring\nC.1  Gateway Parameters\n     The gateway supports parameters\
    \ to set Throughput  and  Host\n     traffic matrix measurements.  The type of\
    \ parameters and the\n     parameter and data pairs are as follows:\n     Throughput\
    \ - Type = 3\n          Parm.  Description             Control Data Word\n   \
    \       -----  -----------             -----------------\n          1      Start/Stop\
    \              0=Stop,1=Start\n          2      Collection Interval     Time in\
    \ 1 minute\n                                         ticks\n     Host Traffic\
    \ Matrix - Type = 4\n          Parm.  Description             Control Data Word\n\
    \          -----  -----------             -----------------\n          1     \
    \ Start/Stop              0=Stop,1=Start\n          2      Collection Interval\
    \     Time in 1 minute\n                                         ticks\n     \
    \     3      HTM Switch Control      Include Control\n                       \
    \                  Protocols\nC.2  Message Type 1: Gateway Trap\nDescription\n\
    \     When traps occur in the gateway they  are  buffered.   At  a\n     fixed\
    \  time interval (currently 10 seconds) the gateway will\n     send any traps\
    \ that are in  the  buffer  to  the  monitoring\n     center.  The traps are sent\
    \ as unsolicited messages.\n     A Gateway trap message has the following format:\n\
    \           0             0 0             1\n           0 1 2 3 4 5 6 7 8 9 0\
    \ 1 2 3 4 5\n          +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n          |      Gateway\
    \ Version #        |\n          +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n          +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \          |    Size of Trap Entry         |       ;First Trap\n          +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \          |       Time of Trap            |\n          +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \          |       Trap ID                 |\n          +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \          |       Process ID              |\n          +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \          |              R0               |\n          +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \          |              R1               |\n          +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \          |              R2               |\n          +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \          |              R3               |\n          +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                    (continued)\nGateway Trap Message (cont'd.)\n          +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \          |              R4               |\n          +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \          |              R5               |\n          +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \          |              R6               |\n          +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \          |     Count of this Trap        |\n          +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                          .\n                          .\n                  \
    \        .\n          +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n          |         \
    \                      |\n          |    Additional Trap reports    |\n      \
    \    |                               |\n          +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    HMP FIELDS\nSystem Type\n     Gateway = 4\nMessage Type\n     Gateway Trap Message\
    \ = 1\nPort Number\n     Unused\nControl Flag\n     Unused\nPassword or Returned\
    \ Sequence Number\n     Unused\nSequence Number\n     A 16 bit number incremented\
    \ each time a trap message is sent\n     so  that  the  monitoring center can\
    \ order the received trap\n     messages and detect missed messages.\nGATEWAY\
    \ TRAP FIELDS\nGateway Version #\n     The software version number of the gateway\
    \ sending the trap.\nTrap Reports\n     The remainder of the  trap  message  consists\
    \  of  the  trap\n     reports.  Each consists of the following fields:\n    \
    \ Size of Trap Entry\n          The size  in  16-bit  words  of  the  trap  entry,\
    \  not\n          including the size field.\n     Time of Trap\n          The\
    \ time in (in 1/60 sec.  ticks)  at  which  the  trap\n          occurred.\n \
    \    Trap ID\n          The number of the trap which is used  to  identify  the\n\
    \          trap.\n     Process ID\n          The identifier of the process that\
    \ executed the trap.\n     R0-R6\n          The registers of the machine at the\
    \ occurrence  of  the\n          trap.\n     Count of this Trap\n          The\
    \ number of times that this trap occurred.\nC.3  Message Type 2: Gateway Status\n\
    Description\n     The gateway status message gives a summary of the status  of\n\
    \     the  gateway.  It reports information such as version number\n     of the\
    \ gateway, buffer memory usage,  interface  status  and\n     neighbor gateway\
    \ status.\n     A Gateway Status message has the following format:\n      0  \
    \                 1         1         2                   3 3\n      0 1 2 3 4\
    \ 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |         Version Number        |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |     Patch Version Number      |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |  Time Since Gateway Restart   |       ;in minutes\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |       Measurement Flags       |       ; Bit flags to indicate which\n\
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+       ; measurements are on, 1= On\n \
    \    |      Routing Sequence No.     |       ; Sequence # of last routing\n  \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+       ;   update sent\n     |    Access\
    \ Table Version #     |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  Load\
    \ Sharing Table Ver. #    |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  \
    \       Memory in Use         |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \ |         Memory Idle           |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |         Memory Free           |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |   # of Blks   |                       ; Memory Allocation Info\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |  Size of 1st Block (in bytes) |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |  # Allocated  |\n     +-+-+-+-+-+-+-+-+\n     |    # Idle     |\n    \
    \ +-+-+-+-+-+-+-+-+\n             .\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     | Size of n'th Block (in bytes) |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |  # Allocated  |\n     +-+-+-+-+-+-+-+-+\n     |    # Idle     |\n    \
    \ +-+-+-+-+-+-+-+-+\n                  (continued)\nGateway Status Message (cont'd.)\n\
    \     +-+-+-+-+-+-+-+-+\n     |   # of Ints.  |\n     +-+-+-+-+-+-+-+-+\n    \
    \ | Int 1 Flags   |                       ;Interface 1 Status Flags\n     +-+-+-+-+-+-+-+-+\
    \                       ; Bit 0 - 1=Up, 0=Down\n                             \
    \                ;     1 - 1=Looped, 0=Not\n     +-+-+-+-+-+-+-+-+\n     | Buffers\
    \       |                       ; # of buffers on write Queue\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     | Time since last Status Change |       ;Time since last up/dwn change\n\
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |    # of Buffers Allocated    \
    \ |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |    Data Size for Interface\
    \    |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |    Interface 1 Address                                        |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n        \
    \             .\n                     .\n     +---------------+\n     | Int n\
    \ Flags   |                       ;Interface n Status Flags\n     +-+-+-+-+-+-+-+-+\n\
    \     | Buffers       |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     | Time since\
    \ last Status Change |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |    # of\
    \ Buffers Allocated     |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |    Data\
    \ Size for Interface    |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |    Interface n Address                                        |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     | #\
    \ Neighbors   |\n     +-+-+-+-+-+-+-+-+\n     | UP/DN Flags   |              \
    \         ;Bit flags for Up or Down\n     +-+-+-+-+-+-+-+-+                  \
    \     ; 0 = Dwn,  1 = Up\n             .                               ; MSB is\
    \ neighbor 1\n             .                               ; (as many bytes as\
    \ necessary)\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |    Neighbor 1 Address                                         |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n        \
    \             .\n                     .\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |    Neighbor n Address                                         |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\nHMP FIELDS\n\
    System Type\n     Gateway = 4\nMessage Type\n     Gateway Status Message = 2\n\
    Port Number\n     Unused\nControl Flag\n     Unused\nPassword or Returned Sequence\
    \ Number\n     Unused\nSequence Number\n     A 16 bit number incremented each\
    \ time a trap message is sent\n     so  that  the  monitoring center can order\
    \ the received trap\n     messages and detect missed messages.\nGATEWAY STATUS\
    \ FIELDS\nVersion Number\n     The  version  number  of  the  gateway  sending\
    \  the  Status\n     message.\nPatch Version Number\n     The patch version number\
    \ of the gateway.\nTime Since Gateway Restart\n     The time in minutes since\
    \ the gateway was last restarted  or\n     reloaded.\nMeasurement Flags\n    \
    \ Flags that, if set, indicate which measurements  are  turned\n     on.  Current\
    \ values are:\n          Bit 0   =   Message Generator\n              1   =  \
    \ Throughput\n              2   =   Host Traffic Matrix\n              3   = \
    \  Access Control 1\n              4   =   Access Control 2\n              5 \
    \  =   Load Sharing\n              6   =   EGP in Gateway\nRouting Sequence Number\n\
    \     The sequence number of the last routing update sent by  this\n     gateway.\n\
    Access Control Table Version #\n     The version number of the access control\
    \ table.\nLoad Sharing Table Version #\n     The version number of the load sharing\
    \ table.\nMemory In Use\n     The number of bytes of buffer memory that are  currently\
    \  in\n     use.\nMemory Idle\n     The  number  of  bytes  of  buffer  memory\
    \  that  have  been\n     allocated but are currently idle.\nMemory Free\n   \
    \  The number of bytes of  buffer  memory  that  has  not  been\n     allocated.\n\
    MEMORY ALLOCATION INFORMATION\n     The next part of the status message contains\
    \ information  on\n     the buffer pools in the gateway.    The fields are:\n\
    \     # of Blocks\n          The number of different buffer pools.\n     Size\
    \ of Block\n          The size of this block in bytes.\n     # Allocated\n   \
    \       The number of  blocks  of  this  size  that  have  been\n          allocated.\n\
    \     # Idle\n          The number of blocks of this size that are idle.\nGATEWAY\
    \ INTERFACE FIELDS\n     The next part of the status message are fields that \
    \ provide\n     information about the gateway's interfaces.  The fields are:\n\
    \     # of Interfaces\n          The number of network interfaces that the gateway\
    \ has.\n     Interface Flags\n          Flags that indicate the status of this\
    \ interface.   The\n          current values are:\n               Bit 0  -  1=Up/0=Down\n\
    \                   1  -  1=Looped/0=Not Looped\n     Buffers\n          The numbers\
    \ on this interfaces write queue.\n     Time Since Last Status Change\n      \
    \    The time in minutes since this interface changed status\n          (Up/Down).\n\
    \     # of Buffers Allocated\n          The number of buffers allocated for this\
    \ interface.\n     Data Size for Interface\n          The buffer size required\
    \ for this interface.\n     Interface Address\n          The Internet address\
    \ of this interface.\nNEIGHBOR GATEWAY FIELDS\n     The final part of the status\
    \ message consists of information\n     about this gateway's neighbor gateways.\
    \  The fields are:\n     # of Neighbors\n          The number of gateways that\
    \ are  neighbor  gateways  to\n          this gateway.\n     UP/DN Flags\n   \
    \       Bit flags to indicate if the neighbor is up or down.\n     Neighbor Address\n\
    \          The Internet address of the neighbor gateway.\nC.4  Message Type 3:\
    \ Gateway Throughput\nDescription\n     The gateway collects throughput statistics\
    \ for the  gateway,\n     its interfaces, and its neighbor gateways.  It collects\
    \ them\n     for regular intervals and will save them for collection  via\n  \
    \   a  Poll  message  from the Monitoring host.  If they are not\n     collected\
    \ by the end of the next interval, they will be lost\n     because another copy\
    \ will be put into the saved area.\n     A Gateway Throughput message has the\
    \ following format:\n      0                   1         1         2         \
    \          3 3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7\
    \ 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |     Gateway Version\
    \ Number    |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |     Collection Time\
    \ in Min    |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |      Number of Interfaces\
    \     |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |       Number of Neighbors\
    \     |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  Number of Host Unreachable\
    \   |       ; # of packets dropped because\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \       ;   Host was Unreachable\n     |  Number of Net Unreachable    |\n   \
    \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+       ;   Net was Unreachable\n     ; Interface\
    \ Counters\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |  Interface Address                                            |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  \
    \ Packets Dropped on Input    |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \ |     Count of IP Errors        |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |   Count of Datagrams for Us   |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |   Datagrams to be Forwarded   |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |   Count of Datagrams Looped   |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                             (continued)\nGateway Throughput Message (cont'd.)\n\
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \ |  Count of Bytes Input                                         |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |  Count of Datagrams From Us   |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     | Count that were Forwarded     |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |  Count of Local Net Dropped   |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |  Count of Queue full Dropped  |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |  Count of Bytes Output                                        |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n        \
    \             .\n                     .\n                     .\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |                                                               |\n    \
    \ |          Counters For Additional Interfaces                   |\n     |  \
    \                                                             |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     ; Neighbor counters\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |  Neighbor Address                                             |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     | Count\
    \ of Routing Updates TO   |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |Count\
    \ of Routing Updates FROM  |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       \
    \                       (continued)\nGateway Throughput Message (cont'd.)\n  \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     | Pkts from US sent to/via Neig |\n\
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  Pkts forwarded to/via Neighb\
    \ |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  Datagrams Local Net Dropped\
    \  |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     | Datagrams Queue full Dropped\
    \  |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     | Count of Bytes send to Neighbor                               |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n        \
    \             .\n                     .\n                     .\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |                                                               |\n    \
    \ |        Counters for Additional Neighbor Gateways              |\n     |  \
    \                                                             |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    HMP FIELDS\nSystem Type\n     Gateway = 4\nMessage Type\n     Gateway Throughput\
    \ Message = 3\nPort Number\n     Unused\nControl Flag\n     Unused\nPassword or\
    \ Returned Sequence Number\n     Unused\nSequence Number\n     A 16 bit number\
    \ incremented each time a trap message is sent\n     so  that  the  HM  can  order\
    \ the received trap messages and\n     detect missed messages.\nGATEWAY THROUGHPUT\
    \ FIELDS\nGateway Version Number\n     The software version number of the gateway\
    \ sending the trap.\nCollection Time in Min.\n     The time period in minutes\
    \ in which the throughput  data  is\n     to be collected.\nNumber of Interfaces\n\
    \     The number of interfaces this gateway has.\nNumber of Neighbors\n     The\
    \ number of neighbor gateways this gateway has.\nNumber of Host Unreachable\n\
    \     The  number  of  packets  dropped  because  the   Host   was\n     unreachable.\n\
    Number of Net Unreachable\n     The number  of  packets  dropped  because  the\
    \  Network  was\n     unreachable.\nINTERFACE COUNTERS\n     The next part of\
    \ the Throughput  message  contains  counters\n     for   the  gateways  interfaces.\
    \   Each  interface  has  the\n     following fields:\n     Interface Address\n\
    \          The Internet address of this interface.\n     Packets Dropped on Input\n\
    \          The number  of  packets  on  input  to  this  interface\n         \
    \ because there were not enough buffers.\n     Count of IP Errors\n          The\
    \ number of packets received with bad IP headers.\n     Count of Datagrams for\
    \ Us\n          The number of  datagrams  received  addressed  to  this\n    \
    \      gateway.\n     Datagrams to be Forwarded\n          The number of datagrams\
    \ were not for this  gateway  and\n          should be sent out another interface.\n\
    \     Count of Datagrams Looped\n          The number of datagrams that were received\
    \ on and  sent\n          out of this interface.\n     Count of Bytes Input\n\
    \          The number of bytes received on this interface.\n     Count of Datagrams\
    \ From Us\n          The  number  of  datagrams  that  originated  at   this\n\
    \          gateway.\n     Count that were Forwarded\n          The number of datagrams\
    \ that were forwarded to  another\n          gateway.\n     Count of Local Net\
    \ Dropped\n          The number of packets  that  were  dropped  because  of\n\
    \          local network flow control restrictions.\n     Count of Queue full\
    \ Dropped\n          The number of packets that  were  dropped  because  the\n\
    \          output queue was full.\n     Count of Bytes Output\n          The number\
    \ of bytes sent out on this interface.\nNEIGHBOR COUNTERS\n     The last part\
    \ of the Throughput message are counts for  each\n     neighbor gateway.  The\
    \ fields are:\n     Neighbor Address\n          The Internet address of this neighbor\
    \ gateway.\n     Count of Routing Updates TO\n          The number of routing\
    \ updates  sent  to  this  neighbor\n          gateway.\n     Count of Routing\
    \ Updates FROM\n          The  number  of  routing  updates  received  from  this\n\
    \          neighbor gateway.\n     Pkts from US sent to/via Neig\n          The\
    \ number of packets from this gateway sent to or  via\n          this neighbor\
    \ gateway.\n     Pkts forwarded to/via Neighb\n          The number of packets\
    \ forwarded to or via this neighbor\n          gateway.\n     Datagrams Local\
    \ Net Dropped\n          The  number  of  datagrams  dropped  to  this  neighbor\n\
    \          gateway   because   of   local   network  flow  control\n         \
    \ restrictions.\n     Datagrams Queue full Dropped\n          The  number  of\
    \  datagrams  dropped  to  this  neighbor\n          because the output queue\
    \ was full.\n     Count of Bytes send to Neighbor\n          The number of bytes\
    \ sent to this neighbor gateway.\nC.5  Message Type 4: Gateway Host Traffic Matrix\n\
    Description\n     The Host Traffic Matrix (HTM) message  contains  information\n\
    \     about  the  traffic  that  flows  through the gateway.  Each\n     entry\
    \ consists of the number of datagrams sent and  received\n     for a particular\
    \ source/destination pair.\n     A Gateway HTM message has the following format:\n\
    \      0                   1         1         2                   3 3\n     \
    \ 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |     Gateway Version Number    |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |        Overflow counter       |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |     Collection Time in Min    |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |     Number of HTM entries     |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \ |    IP Source Address                                          |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |    IP Destination Address                                     |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     | IP\
    \ Protocol   |  (unused)     |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |    Counter for SRC -> DST datagrams                           |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  \
    \  Counter for DST -> SRC datagrams                           |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                     .\n                     .\n                     .\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  \
    \                                                             |\n     |      Additional\
    \ HTM Reports                                   |\n     |                    \
    \                                           |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    HMP FIELDS\nSystem Type\n     Gateway = 4\nMessage Type\n     Gateway HTM Message\
    \ = 4\nPort Number\n     Unused\nControl Flag\n     Unused\nPassword or Returned\
    \ Sequence Number\n     Unused\nSequence Number\n     A 16 bit number incremented\
    \ each time a trap message is sent\n     so  that  the  HM  can  order the received\
    \ trap messages and\n     detect missed messages.\nGATEWAY HTM FIELDS\nGateway\
    \ Version Number\n     The software version number of this gateway.\nOverflow\
    \ counter\n     The number of HTM entries lost because the  HTM  buffer  was\n\
    \     full.\nCollection Time in Min\n     The time period in minutes in which\
    \ the HTM  data  is  being\n     collected.\nNumber of HTM entries\n     The number\
    \ of HTM reports included in this message.\nHTM ENTRIES\n     The remainder of\
    \ the HTM message consists of the actual  HTM\n     entries.  Each entry consists\
    \ of the following fields:\n     IP Source Address\n          The source Internet\
    \  address  of  the  datagrams  being\n          counted.\n     IP Destination\
    \ Address\n          The destination Internet address of the datagrams being\n\
    \          counted.\n     IP Protocol\n          The protocol number of the datagrams.\n\
    \     Counter for SRC -> DST datagrams\n          The  number  of  datagrams \
    \ sent  in  the   Source   to\n          Destination address direction.\n    \
    \ Counter for DST -> SRC datagrams\n          The number of datagrams  sent  in\
    \  the  Destination  to\n          Source address direction.\nC.6  Message Type\
    \ 6: Gateway Routing\nDescription\n     The Routing message contains information\
    \  about  routes  the\n     gateway  has  to the networks that make up the Internet.\
    \  It\n     includes information about its interfaces and  its  neighbor\n   \
    \  gateways.\n     A Gateway Routing message has the following format:\n     \
    \ 0                   1         1         2                   3 3\n      0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |         Version Number        |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |   # of Ints.  |\n     +-+-+-+-+-+-+-+-+\n     | UP/DN Flags   |      \
    \                 ;Bit flags for Up or Down\n     +-+-+-+-+-+-+-+-+          \
    \             ; 0 = Dwn,  1 = Up\n             .                             \
    \  ; MSB is interface 1\n             .                               ; (as many\
    \ bytes as necessary)\n             .\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |    Interface 1 Address                                        |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n        \
    \             .\n                     .\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |    Interface n Address                                        |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     | #\
    \ Neighbors   |\n     +-+-+-+-+-+-+-+-+\n     | UP/DN Flags   |              \
    \         ;Bit flags for Up or Down\n     +-+-+-+-+-+-+-+-+                  \
    \     ; 0 = Dwn,  1 = Up\n             .                               ; MSB is\
    \ neighbor 1\n             .                               ; (as many bytes as\
    \ necessary)\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |    Neighbor 1 Address                                         |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n        \
    \             .\n                     .\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |    Neighbor n Address                                         |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n        \
    \                 (continued)\nGateway Routing Message (cont'd.)\n     +-+-+-+-+-+-+-+-+\n\
    \     | # of Networks |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     | Network 1 #   |               |               |  ; 1, 2, or 3 bytes\n\
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |   Distance   \
    \ |\n     +-+-+-+-+-+-+-+-+\n     |   Neighbor #  |\n     +-+-+-+-+-+-+-+-+\n\
    \                     .\n                     .\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     | Network n #   |               |               |  ; 1, 2, or 3 bytes\n\
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |   Distance   \
    \ |\n     +-+-+-+-+-+-+-+-+\n     |   Neighbor #  |\n     +-+-+-+-+-+-+-+-+\n\
    HMP FIELDS\nSystem Type\n     Gateway = 4\nMessage Type\n     Gateway Trap Message\
    \ = 6\nPort Number\n     Unused\nControl Flag\n     Unused\nPassword or Returned\
    \ Sequence Number\n     Unused\nSequence Number\n     A 16 bit number incremented\
    \ each time a trap message is sent\n     so  that  the  HM  can  order the received\
    \ trap messages and\n     detect missed messages.\nGATEWAY ROUTING FIELDS\nGateway\
    \ Version #\n     The software version number of the gateway sending the trap.\n\
    INTERFACE FIELDS\n     The first part of the routing message  contains  information\n\
    \     about  the  gateway's  interfaces.   There  is data for each\n     interface.\
    \  The fields are:\n     # of Interfaces\n          The number of interfaces that\
    \ this gateway has.\n     UP/DN Flags\n          Bit flags to indicate if the\
    \ Interface is up or down.\n     Interface Address\n          The Internet address\
    \ of the Interface.\nNEIGHBOR FIELDS\n     The next part of the routing  message\
    \  contains  information\n     about this gateway's neighbor gateways.  The fields\
    \ are:\n     # of Neighbors\n          The number of gateways that are  neighbor\
    \  gateways  to\n          this gateway.\n     UP/DN Flags\n          Bit flags\
    \ to indicate if the neighbor is up or down.\n     Neighbor Address\n        \
    \  The Internet address of the neighbor gateway.\nNETWORK ROUTING FIELDS\n   \
    \  The last part of the routing  message  contains  information\n     about  \
    \ this  gateway's  routes  to  other  networks.   This\n     includes the distance\
    \ to each  network  and  which  neighbor\n     gateway is the route to the network.\
    \  The fields are:\n     # of Networks\n          The number of networks that\
    \  are  reachable  from  this\n          gateway.\n     Network #\n          The\
    \ network  number  of  this  network.   This  is  the\n          network  part\
    \  of  the Internet address and may be one,\n          two, or three bytes in\
    \ length depending on  whether  it\n          is a Class A, B, or C address.\n\
    \     Distance\n          The distance in hops to this network.  Zero hops  means\n\
    \          that the network is directly connected to this gateway.\n         \
    \ A negative number means that the network  is  currently\n          unreachable.\n\
    \     Neighbor #\n          The neighbor gateway that is the next hop to reach\
    \ this\n          network.    This   is   an   index  into  the  previous\n  \
    \        information on this gateway's neighbor gateways.   This\n          field\
    \  is  only  valid  if the Distance is greater than\n          zero.\n"
