- title: __initial_text__
  contents:
  - ''
- title: Independent Submission                                      A. Keromytis
  contents:
  - "Independent Submission                                      A. Keromytis\n  \
    \     Transport Layer Security (TLS) Authorization Using KeyNote\n"
- title: Abstract
  contents:
  - "Abstract\n   This document specifies the use of the KeyNote trust-management\n\
    \   system as an authorization extension in the Transport Layer Security\n   (TLS)\
    \ Handshake Protocol, according to guidelines in RFC 5878.\n   Extensions carried\
    \ in the client and server hello messages confirm\n   that both parties support\
    \ the desired authorization data types.\n   Then, if supported by both the client\
    \ and the server, KeyNote\n   credentials are exchanged in the supplemental data\
    \ handshake message.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This is a contribution to\
    \ the RFC Series, independently of any other\n   RFC stream.  The RFC Editor has\
    \ chosen to publish this document at\n   its discretion and makes no statement\
    \ about its value for\n   implementation or deployment.  Documents approved for\
    \ publication by\n   the RFC Editor are not a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 5741.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc6042.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2010 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document describes the identifiers necessary to exchange\
    \ KeyNote\n   [KEYNOTE] credential assertions inside a TLS [TLS1.0] [TLS1.1]\n\
    \   [TLS1.2] exchange.  Such credential assertions can authorize the\n   client\
    \ and/or the server to perform certain actions.  In most usage\n   scenarios,\
    \ the KeyNote credential assertions will be signed by a\n   cryptographic public\
    \ key [RFC2792].  By using the X.509 key and\n   signature encoding [X509KEY],\
    \ it is possible to add KeyNote-based\n   authorization and policy compliance\
    \ support to the existing,\n   unmodified X.509 authentication exchange in TLS.\n\
    \   A list of KeyNote credentials (e.g., forming a delegation chain) may\n   be\
    \ sent as part of the same payload.  Alternatively, a URL [RFC3986]\n   pointing\
    \ to the location of such a list of KeyNote credentials may be\n   provided.\n\
    \   In most scenarios, at least one of these credentials will be issued\n   to\
    \ the public key of the transmitter of the credentials, i.e., said\n   public\
    \ key will appear in the \"Licensees\" field of at least one\n   KeyNote credential\
    \ assertion.  The same public key will generally be\n   used by the transmitter\
    \ of the same credentials to authenticate as\n   part of the TLS exchange.  The\
    \ authentication material (e.g.,\n   cryptographic public key) that was used by\
    \ the transmitter to\n   authenticate in the TLS exchange will be provided to\
    \ the KeyNote\n   evaluation engine as an \"Action Authorizer\".\n"
- title: 1.1.  Conventions
  contents:
  - "1.1.  Conventions\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"\
    SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\"\
    , and \"OPTIONAL\" in this\n   document are to be interpreted as described in\
    \ [RFC2119].\n"
- title: 2.  KeyNote Credential Assertion Lists
  contents:
  - "2.  KeyNote Credential Assertion Lists\n   The KeyNote Assertion List type definition\
    \ in the TLS Authorization\n   Data Formats registry is:\n      keynote_assertion_list(64)\n\
    \   When the keynote_assertion_list value is present, the authorization\n   data\
    \ is a list of KeyNote credential assertions that conforms to the\n   profile\
    \ in RFC 2704 [KEYNOTE].\n   A KeyNote assertion list is transmitted inside an\n\
    \   AuthorizationDataEntry structure as an opaque sequence of\n   1 - 2^16-1 bytes:\n\
    \      opaque KeyNoteAssertionList<1..2^16-1>;\n   When KeyNoteAssertionList is\
    \ used, the field contains an ASCII-\n   encoded list of signed KeyNote assertions,\
    \ as described in RFC 2704\n   [KEYNOTE].  The assertions are separated by two\
    \ \"\\n\" (newline)\n   characters.  A KeyNote assertion is a structure similar\
    \ to a public\n   key certificate; the main difference is that instead of a binding\n\
    \   between a name and a public key, KeyNote assertions bind public keys\n   to\
    \ authorization rules that are evaluated by the peer when the sender\n   later\
    \ issues specific requests.\n   When making an authorization decision based on\
    \ a list of KeyNote\n   assertions, proper linkage between the KeyNote assertions\
    \ and the\n   public key certificate that is transferred in the TLS Certificate\n\
    \   message is needed.  Receivers of a KeyNote assertion list should\n   initialize\
    \ the ACTION_AUTHORIZER variable to be the sender's public\n   key, which was\
    \ used to authenticate the TLS exchange.  If a different\n   authentication mechanism\
    \ is used, it is the responsibility of the\n   credential issuer to issue the\
    \ appropriate credentials.\n"
- title: 3.  KeyNote Credential Assertion List URL
  contents:
  - "3.  KeyNote Credential Assertion List URL\n   The KeyNote Assertion List URL\
    \ type definition in the TLS\n   Authorization Data Formats registry is:\n   \
    \   keynote_assertion_list_url(65)\n   A KeyNote Assertion List URL is transmitted\
    \ inside an\n   AuthorizationDataEntry structure as a URLandHash structure [AUTHZ].\n\
    \   When the keynote_assertion_list_url value is present, the\n   authorization\
    \ data is a list of KeyNote assertions as described in\n   Section 2; however,\
    \ the KeyNote assertion list is fetched with the\n   supplied URL.  A one-way\
    \ hash value is provided to ensure that the\n   intended KeyNote credential assertion\
    \ is obtained.\n   Implementations that support keynote_assertion_list_url MUST\
    \ support\n   URLs that employ the HTTP scheme [HTTP].  These implementations\
    \ MUST\n   confirm that the hash value computed on the fetched authorization\n\
    \   matches the one received in the handshake.  Mismatch of the hash\n   values\
    \ SHOULD be treated as though the authorization was not\n   provided, which will\
    \ result in a bad_certificate alert [AUTHZ].\n   Other schemes may also be supported.\
    \  When dereferencing these URLs,\n   circular dependencies MUST be avoided. \
    \ Avoiding TLS when\n   dereferencing these URLs is one way to avoid circular\
    \ dependencies.\n   Therefore, clients using the HTTP scheme MUST NOT use these\
    \ TLS\n   extensions if the Upgrade mechanism in HTTP [UPGRADE] is used.  For\n\
    \   other schemes, similar care must be taken to avoid using these TLS\n   extensions.\n"
- title: 4.  IANA Considerations
  contents:
  - "4.  IANA Considerations\n   With this document, IANA has registered two new entries\
    \ in the TLS\n   Authorization Data Formats registry: keynote_assertion_list(64)\
    \ and\n   keynote_assertion_list_url(65).  This registry is defined in [AUTHZ].\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   There are no security considerations beyond those\
    \ discussed in\n   [KEYNOTE], [RFC2792], and [AUTHZ].\n"
- title: 6.  References
  contents:
  - '6.  References

    '
- title: 6.1.  Normative References
  contents:
  - "6.1.  Normative References\n   [RFC2119]   Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n               Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [TLS1.0]    Dierks, T. and C. Allen, \"The TLS Protocol Version 1.0\"\
    ,\n               RFC 2246, January 1999.\n   [TLS1.1]    Dierks, T. and E. Rescorla,\
    \ \"The Transport Layer Security\n               (TLS) Protocol Version 1.1\"\
    , RFC 4346, April 2006.\n   [TLS1.2]    Dierks, T. and E. Rescorla, \"The Transport\
    \ Layer Security\n               (TLS) Protocol Version 1.2\", RFC 5246, August\
    \ 2008.\n   [HTTP]      Fielding, R., Gettys, J., Mogul, J., Frystyk, H.,\n  \
    \             Masinter, L., Leach, P., and T. Berners-Lee, \"Hypertext\n     \
    \          Transfer Protocol -- HTTP/1.1\", RFC 2616, June 1999.\n   [UPGRADE]\
    \   Khare, R. and S. Lawrence, \"Upgrading to TLS Within\n               HTTP/1.1\"\
    , RFC 2817, May 2000.\n   [KEYNOTE]   Blaze, M., Feigenbaum, J., Ioannidis, J.,\
    \ and A.\n               Keromytis, \"The KeyNote Trust-Management System\n  \
    \             Version 2\", RFC 2704, September 1999.\n   [AUTHZ]     Brown, M.\
    \ and R. Housley, \"Transport Layer Security (TLS)\n               Authorization\
    \ Extensions\", RFC 5878, May 2010.\n"
- title: 6.2.  Informative References
  contents:
  - "6.2.  Informative References\n   [RFC2792]   Blaze, M., Ioannidis, J., and A.\
    \ Keromytis, \"DSA and RSA\n               Key and Signature Encoding for the\
    \ KeyNote Trust\n               Management System\", RFC 2792, March 2000.\n \
    \  [X509KEY]   Keromytis, A., \"X.509 Key and Signature Encoding for the\n   \
    \            KeyNote Trust Management System\", RFC 5708, January 2010.\n   [RFC3986]\
    \   Berners-Lee, T., Fielding, R., and L. Masinter, \"Uniform\n              \
    \ Resource Identifier (URI): Generic Syntax\", STD 66,\n               RFC 3986,\
    \ January 2005.\n"
- title: Appendix A.  Updated TLS Authorization Data Structures
  contents:
  - "Appendix A.  Updated TLS Authorization Data Structures\n   For clarity, this\
    \ Appendix shows an updated version of the relevant\n   data structures from Section\
    \ 3.3 in [AUTHZ] with the new entries\n   described in this document.  The added\
    \ elements are denoted with two\n   asterisks (\"**\") at the end of the respective\
    \ lines.\n      struct {\n         AuthorizationDataEntry authz_data_list<1..2^16-1>;\n\
    \      } AuthorizationData;\n      struct {\n         AuthzDataFormat authz_format;\n\
    \         select (AuthzDataFormat) {\n            case x509_attr_cert:       \
    \       X509AttrCert;\n            case saml_assertion:              SAMLAssertion;\n\
    \            case x509_attr_cert_url:          URLandHash;\n            case saml_assertion_url:\
    \          URLandHash;\n            case keynote_assertion_list:      KeyNoteAssertionList;\
    \   **\n            case keynote_assertion_list_url:  URLandHash;            \
    \ **\n         }\n      } AuthorizationDataEntry;\n      enum {\n         x509_attr_cert(0),\
    \ saml_assertion(1), x509_attr_cert_url(2),\n         saml_assertion_url(3),\n\
    \         keynote_assertion_list(64), keynote_assertion_list_url(65),  **\n  \
    \       (255)\n      } AuthzDataFormat;\n      opaque X509AttrCert<1..2^16-1>;\n\
    \      opaque SAMLAssertion<1..2^16-1>;\n      opaque KeyNoteAssertionList<1..2^16-1>;\
    \                         **\n      struct {\n         opaque url<1..2^16-1>;\n\
    \         HashAlgorithm hash_alg;\n         select (hash_alg) {\n            case\
    \ md5:    MD5Hash;\n            case sha1:   SHA1Hash;\n            case sha224:\
    \ SHA224Hash;\n            case sha256: SHA256Hash;\n            case sha384:\
    \ SHA384Hash;\n            case sha512: SHA512Hash;\n         } hash;\n      }\
    \ URLandHash;\n      enum {\n         none(0), md5(1), sha1(2), sha224(3), sha256(4),\
    \ sha384(5),\n         sha512(6), (255)\n      } HashAlgorithm;\n      opaque\
    \ MD5Hash[16];\n      opaque SHA1Hash[20];\n      opaque SHA224Hash[28];\n   \
    \   opaque SHA256Hash[32];\n      opaque SHA384Hash[48];\n      opaque SHA512Hash[64];\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Angelos D. Keromytis\n   Department of Computer Science\n\
    \   Columbia University\n   Mail Code 0401\n   1214 Amsterdam Avenue\n   New York,\
    \ NY  10027\n   USA\n   EMail: angelos@cs.columbia.edu\n"
