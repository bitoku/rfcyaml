- title: __initial_text__
  contents:
  - "   A Method for Generating Semantically Opaque Interface Identifiers\n      \
    \   with IPv6 Stateless Address Autoconfiguration (SLAAC)\n"
- title: Abstract
  contents:
  - "Abstract\n   This document specifies a method for generating IPv6 Interface\n\
    \   Identifiers to be used with IPv6 Stateless Address Autoconfiguration\n   (SLAAC),\
    \ such that an IPv6 address configured using this method is\n   stable within\
    \ each subnet, but the corresponding Interface Identifier\n   changes when the\
    \ host moves from one network to another.  This method\n   is meant to be an alternative\
    \ to generating Interface Identifiers\n   based on hardware addresses (e.g., IEEE\
    \ LAN Media Access Control\n   (MAC) addresses), such that the benefits of stable\
    \ addresses can be\n   achieved without sacrificing the security and privacy of\
    \ users.  The\n   method specified in this document applies to all prefixes a\
    \ host may\n   be employing, including link-local, global, and unique-local prefixes\n\
    \   (and their corresponding addresses).\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7217.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2014 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   3\n   2.  Terminology . . . . . . . . . . . . . . . . . . . . .\
    \ . . . .   5\n   3.  Relationship to Other Standards . . . . . . . . . . . .\
    \ . . .   5\n   4.  Design Goals  . . . . . . . . . . . . . . . . . . . . . .\
    \ . .   6\n   5.  Algorithm Specification . . . . . . . . . . . . . . . . . .\
    \ .   7\n   6.  Resolving DAD Conflicts . . . . . . . . . . . . . . . . . . .\
    \  12\n   7.  Specified Constants . . . . . . . . . . . . . . . . . . . . .  13\n\
    \   8.  Security Considerations . . . . . . . . . . . . . . . . . . .  13\n  \
    \ 9.  Acknowledgements  . . . . . . . . . . . . . . . . . . . . . .  15\n   10.\
    \ References  . . . . . . . . . . . . . . . . . . . . . . . . .  15\n     10.1.\
    \  Normative References . . . . . . . . . . . . . . . . . .  15\n     10.2.  Informative\
    \ References . . . . . . . . . . . . . . . . .  16\n   Appendix A.  Possible Sources\
    \ for the Net_Iface Parameter . . . .  19\n     A.1.  Interface Index . . . .\
    \ . . . . . . . . . . . . . . . . .  19\n     A.2.  Interface Name  . . . . .\
    \ . . . . . . . . . . . . . . . .  19\n     A.3.  Link-Layer Addresses  . . .\
    \ . . . . . . . . . . . . . . .  19\n     A.4.  Logical Network Service Identity\
    \  . . . . . . . . . . . .  20\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   [RFC4862] specifies Stateless Address Autoconfiguration\
    \ (SLAAC) for\n   IPv6 [RFC2460], which typically results in hosts configuring\
    \ one or\n   more \"stable\" addresses composed of a network prefix advertised\
    \ by a\n   local router, and an Interface Identifier (IID) that typically embeds\n\
    \   a hardware address (e.g., an IEEE LAN MAC address) [RFC4291].\n   Cryptographically\
    \ Generated Addresses (CGAs) [RFC3972] are yet\n   another method for generating\
    \ Interface Identifiers; CGAs bind a\n   public signature key to an IPv6 address\
    \ in the SEcure Neighbor\n   Discovery (SEND) [RFC3971] protocol.\n   Generally,\
    \ the traditional SLAAC addresses are thought to simplify\n   network management,\
    \ since they simplify Access Control Lists (ACLs)\n   and logging.  However, they\
    \ have a number of drawbacks:\n   o  Since the resulting Interface Identifiers\
    \ do not vary over time,\n      they allow correlation of host activities within\
    \ the same network,\n      thus negatively affecting the privacy of users (see\n\
    \      [ADDR-GEN-PRIVACY] and [IAB-PRIVACY]).\n   o  Since the resulting Interface\
    \ Identifiers are constant across\n      networks, the resulting IPv6 addresses\
    \ can be leveraged to track\n      and correlate the activity of a host across\
    \ multiple networks\n      (e.g., track and correlate the activities of a typical\
    \ client\n      connecting to the public Internet from different locations), thus\n\
    \      negatively affecting the privacy of users.\n   o  Since embedding the underlying\
    \ link-layer address in the Interface\n      Identifier will result in specific\
    \ address patterns, such patterns\n      may be leveraged by attackers to reduce\
    \ the search space when\n      performing address-scanning attacks [IPV6-RECON].\
    \  For example,\n      the IPv6 addresses of all hosts manufactured by the same\
    \ vendor\n      (within a given time frame) will likely contain the same IEEE\n\
    \      Organizationally Unique Identifier (OUI) in the Interface\n      Identifier.\n\
    \   o  Embedding the underlying hardware address in the Interface\n      Identifier\
    \ leaks device-specific information that could be\n      leveraged to launch device-specific\
    \ attacks.\n   o  Embedding the underlying link-layer address in the Interface\n\
    \      Identifier means that replacement of the underlying interface\n      hardware\
    \ will result in a change of the IPv6 address(es) assigned\n      to that interface.\n\
    \   [ADDR-GEN-PRIVACY] provides additional details regarding how the\n   aforementioned\
    \ vulnerabilities could be exploited and the extent to\n   which the method discussed\
    \ in this document mitigates them.\n   The \"Privacy Extensions for Stateless\
    \ Address Autoconfiguration in\n   IPv6\" [RFC4941] (henceforth referred to as\
    \ \"temporary addresses\")\n   were introduced to complicate the task of eavesdroppers\
    \ and other\n   information collectors (e.g., IPv6 addresses in web server logs\
    \ or\n   email headers, etc.) to correlate the activities of a host, and\n   basically\
    \ result in temporary (and random) Interface Identifiers.\n   These temporary\
    \ addresses are generated in addition to the\n   traditional IPv6 addresses based\
    \ on IEEE LAN MAC addresses, with the\n   temporary addresses being employed for\
    \ \"outgoing communications\", and\n   the traditional SLAAC addresses being employed\
    \ for \"server\" functions\n   (i.e., receiving incoming connections).\n   It\
    \ should be noted that temporary addresses can be challenging in a\n   number\
    \ of areas.  For example, from a network-management point of\n   view, they tend\
    \ to increase the complexity of event logging,\n   troubleshooting, enforcement\
    \ of access controls, and quality of\n   service, etc.  As a result, some organizations\
    \ disable the use of\n   temporary addresses even at the expense of reduced privacy\n\
    \   [BROERSMA].  Temporary addresses may also result in increased\n   implementation\
    \ complexity, which might not be possible or desirable\n   in some implementations\
    \ (e.g., some embedded devices).\n   In scenarios in which temporary addresses\
    \ are deliberately not used\n   (possibly for any of the aforementioned reasons),\
    \ all a host is left\n   with is the stable addresses that have typically been\
    \ generated from\n   the underlying hardware addresses.  In such scenarios, it\
    \ may still\n   be desirable to have addresses that mitigate address-scanning\
    \ attacks\n   and that, at the very least, do not reveal the host's identity when\n\
    \   roaming from one network to another -- without complicating the\n   operation\
    \ of the corresponding networks.\n   However, even with temporary addresses in\
    \ place, a number of issues\n   remain to be mitigated.  Namely,\n   o  since\
    \ temporary addresses [RFC4941] do not eliminate the use of\n      fixed identifiers\
    \ for server-like functions, they only partially\n      mitigate host-tracking\
    \ and activity correlation across networks\n      (see [ADDR-GEN-PRIVACY] for\
    \ some example attacks that are still\n      possible with temporary addresses).\n\
    \   o  since temporary addresses [RFC4941] do not replace the traditional\n  \
    \    SLAAC addresses, an attacker can still leverage patterns in SLAAC\n     \
    \ addresses to greatly reduce the search space for \"alive\" nodes\n      [GONT-DEEPSEC2011]\
    \ [CPNI-IPV6] [IPV6-RECON].\n   Hence, there is a motivation to improve the properties\
    \ of \"stable\"\n   addresses regardless of whether or not temporary addresses\
    \ are\n   employed.\n   This document specifies a method to generate Interface\
    \ Identifiers\n   that are stable for each network interface within each subnet,\
    \ but\n   that change as a host moves from one network to another.  Thus, this\n\
    \   method enables keeping the \"stability\" properties of the Interface\n   Identifiers\
    \ specified in [RFC4291], while still mitigating address-\n   scanning attacks\
    \ and preventing correlation of the activities of a\n   host as it moves from\
    \ one network to another.\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and\
    \ \"OPTIONAL\" in this\n   document are to be interpreted as described in [RFC2119].\n"
- title: 3.  Relationship to Other Standards
  contents:
  - "3.  Relationship to Other Standards\n   The method specified in this document\
    \ is orthogonal to the use of\n   temporary addresses [RFC4941], since it is meant\
    \ to improve the\n   security and privacy properties of the stable addresses that\
    \ are\n   employed along with the aforementioned temporary addresses.  In\n  \
    \ scenarios in which temporary addresses are employed, implementation\n   of the\
    \ mechanism described in this document (in replacement of stable\n   addresses\
    \ based on, e.g., IEEE LAN MAC addresses) will mitigate\n   address-scanning attacks\
    \ and also mitigate the remaining vectors for\n   correlating host activities\
    \ based on the host's constant (i.e.,\n   stable across networks) Interface Identifiers.\
    \  On the other hand,\n   for hosts that currently disable temporary addresses\
    \ [RFC4941],\n   implementation of this mechanism would mitigate the host-tracking\
    \ and\n   address-scanning issues discussed in Section 1.\n   While the method\
    \ specified in this document is meant to be used with\n   SLAAC, this does not\
    \ preclude this algorithm from being used with\n   other address configuration\
    \ mechanisms, such as DHCPv6 [RFC3315] or\n   manual address configuration.\n"
- title: 4.  Design Goals
  contents:
  - "4.  Design Goals\n   This document specifies a method for generating Interface\
    \ Identifiers\n   to be used with IPv6 SLAAC, with the following goals:\n   o\
    \  The resulting Interface Identifiers remain stable for each prefix\n      used\
    \ with SLAAC within each subnet for the same network interface.\n      That is,\
    \ the algorithm generates the same Interface Identifier\n      when configuring\
    \ an address (for the same interface) belonging to\n      the same prefix within\
    \ the same subnet.\n   o  The resulting Interface Identifiers must change when\
    \ addresses are\n      configured for different prefixes.  That is, if different\n\
    \      autoconfiguration prefixes are used to configure addresses for the\n  \
    \    same network interface card, the resulting Interface Identifiers\n      must\
    \ be (statistically) different.  This means that, given two\n      addresses produced\
    \ by the method specified in this document, it\n      must be difficult for an\
    \ attacker to tell whether the addresses\n      have been generated by the same\
    \ host.\n   o  It must be difficult for an outsider to predict the Interface\n\
    \      Identifiers that will be generated by the algorithm, even with\n      knowledge\
    \ of the Interface Identifiers generated for configuring\n      other addresses.\n\
    \   o  Depending on the specific implementation approach (see Section 5\n    \
    \  and Appendix A), the resulting Interface Identifiers may be\n      independent\
    \ of the underlying hardware (e.g., IEEE LAN MAC\n      address).  For example,\
    \ this means that replacing a Network\n      Interface Card (NIC) or adding links\
    \ dynamically to a Link\n      Aggregation Group (LAG) will not have the (generally\
    \ undesirable)\n      effect of changing the IPv6 addresses used for that network\n\
    \      interface.\n   o  The method specified in this document is meant to be\
    \ an\n      alternative to producing IPv6 addresses based on hardware\n      addresses\
    \ (e.g., IEEE LAN MAC addresses, as specified in\n      [RFC2464]).  That is,\
    \ this document does not formally obsolete or\n      deprecate any of the existing\
    \ algorithms to generate Interface\n      Identifiers.  It is meant to be employed\
    \ for all of the stable\n      (i.e., non-temporary) IPv6 addresses configured\
    \ with SLAAC for a\n      given interface, including global, link-local, and unique-local\n\
    \      IPv6 addresses.\n   We note that this method is incrementally deployable,\
    \ since it does\n   not pose any interoperability implications when deployed on\
    \ networks\n   where other nodes do not implement or employ it.  Additionally,\
    \ we\n   note that this document does not update or modify IPv6 Stateless\n  \
    \ Address Autoconfiguration (SLAAC) [RFC4862] itself, but rather it\n   only specifies\
    \ an alternative algorithm to generate Interface\n   Identifiers.  Therefore,\
    \ the usual address lifetime properties (as\n   specified in the corresponding\
    \ Prefix Information Options) apply when\n   IPv6 addresses are generated as a\
    \ result of employing the algorithm\n   specified in this document with SLAAC\
    \ [RFC4862].  Additionally, from\n   the point of view of renumbering, we note\
    \ that these addresses behave\n   like the traditional IPv6 addresses (that embed\
    \ a hardware address)\n   resulting from SLAAC [RFC4862].\n"
- title: 5.  Algorithm Specification
  contents:
  - "5.  Algorithm Specification\n   IPv6 implementations conforming to this specification\
    \ MUST generate\n   Interface Identifiers using the algorithm specified in this\
    \ section\n   as a replacement for any other algorithms for generating \"stable\"\
    \n   addresses with SLAAC (such as those specified in [RFC2464],\n   [RFC2467],\
    \ and [RFC2470]).  However, implementations conforming to\n   this specification\
    \ MAY employ the algorithm specified in [RFC4941] to\n   generate temporary addresses\
    \ in addition to the addresses generated\n   with the algorithm specified in this\
    \ document.  The method specified\n   in this document MUST be employed for generating\
    \ the Interface\n   Identifiers with SLAAC for all the stable addresses, including\
    \ IPv6\n   global, link-local, and unique-local addresses.\n   Implementations\
    \ conforming to this specification SHOULD provide the\n   means for a system administrator\
    \ to enable or disable the use of this\n   algorithm for generating Interface\
    \ Identifiers.\n   Unless otherwise noted, all of the parameters included in the\n\
    \   expression below MUST be included when generating an Interface\n   Identifier.\n\
    \   1.  Compute a random (but stable) identifier with the expression:\n      \
    \ RID = F(Prefix, Net_Iface, Network_ID, DAD_Counter, secret_key)\n       Where:\n\
    \       RID:\n          Random (but stable) Identifier\n       F():\n        \
    \  A pseudorandom function (PRF) that MUST NOT be computable from\n          the\
    \ outside (without knowledge of the secret key).  F() MUST\n          also be\
    \ difficult to reverse, such that it resists attempts to\n          obtain the\
    \ secret_key, even when given samples of the output\n          of F() and knowledge\
    \ or control of the other input parameters.\n          F() SHOULD produce an output\
    \ of at least 64 bits.  F() could\n          be implemented as a cryptographic\
    \ hash of the concatenation of\n          each of the function parameters.  SHA-1\
    \ [FIPS-SHS] and SHA-256\n          are two possible options for F().  Note: MD5\
    \ [RFC1321] is\n          considered unacceptable for F() [RFC6151].\n       Prefix:\n\
    \          The prefix to be used for SLAAC, as learned from an ICMPv6\n      \
    \    Router Advertisement message, or the link-local IPv6 unicast\n          prefix\
    \ [RFC4291].\n       Net_Iface:\n          An implementation-dependent stable\
    \ identifier associated with\n          the network interface for which the RID\
    \ is being generated.\n          An implementation MAY provide a configuration\
    \ option to select\n          the source of the identifier to be used for the\
    \ Net_Iface\n          parameter.  A discussion of possible sources for this value\n\
    \          (along with the corresponding trade-offs) can be found in\n       \
    \   Appendix A.\n       Network_ID:\n          Some network-specific data that\
    \ identifies the subnet to which\n          this interface is attached -- for\
    \ example, the IEEE 802.11\n          Service Set Identifier (SSID) corresponding\
    \ to the network to\n          which this interface is associated.  Additionally,\
    \ Simple DNA\n          [RFC6059] describes ideas that could be leveraged to generate\n\
    \          a Network_ID parameter.  This parameter is OPTIONAL.\n       DAD_Counter:\n\
    \          A counter that is employed to resolve Duplicate Address\n         \
    \ Detection (DAD) conflicts.  It MUST be initialized to 0, and\n          incremented\
    \ by 1 for each new tentative address that is\n          configured as a result\
    \ of a DAD conflict.  Implementations\n          that record DAD_Counter in non-volatile\
    \ memory for each\n          {Prefix, Net_Iface, Network_ID} tuple MUST initialize\n\
    \          DAD_Counter to the recorded value if such an entry exists in\n    \
    \      non-volatile memory.  See Section 6 for additional details.\n       secret_key:\n\
    \          A secret key that is not known by the attacker.  The secret\n     \
    \     key SHOULD be of at least 128 bits.  It MUST be initialized to\n       \
    \   a pseudo-random number (see [RFC4086] for randomness\n          requirements\
    \ for security) when the operating system is\n          installed or when the\
    \ IPv6 protocol stack is \"bootstrapped\"\n          for the first time.  An implementation\
    \ MAY provide the means\n          for the system administrator to display and\
    \ change the secret\n          key.\n   2.  The Interface Identifier is finally\
    \ obtained by taking as many\n       bits from the RID value (computed in the\
    \ previous step) as\n       necessary, starting from the least significant bit.\n\
    \          We note that [RFC4291] requires that the Interface IDs of all\n   \
    \       unicast addresses (except those that start with the binary\n         \
    \ value 000) be 64 bits long.  However, the method discussed in\n          this\
    \ document could be employed for generating Interface IDs\n          of any arbitrary\
    \ length, albeit at the expense of reduced\n          entropy (when employing\
    \ Interface IDs smaller than 64 bits).\n       The resulting Interface Identifier\
    \ SHOULD be compared against the\n       reserved IPv6 Interface Identifiers [RFC5453]\
    \ [IANA-RESERVED-IID]\n       and against those Interface Identifiers already\
    \ employed in an\n       address of the same network interface and the same network\n\
    \       prefix.  In the event that an unacceptable identifier has been\n     \
    \  generated, this situation SHOULD be handled in the same way as\n       the\
    \ case of duplicate addresses (see Section 6).\n   This document does not require\
    \ the use of any specific PRF for the\n   function F() above, since the choice\
    \ of such PRF is usually a trade-\n   off between a number of properties (processing\
    \ requirements, ease of\n   implementation, possible intellectual property rights,\
    \ etc.), and\n   since the best possible choice for F() might be different for\n\
    \   different types of devices (e.g., embedded systems vs. regular\n   servers)\
    \ and might possibly change over time.\n   Including the SLAAC prefix in the PRF\
    \ computation causes the\n   Interface Identifier to vary across each prefix (link-local,\
    \ global,\n   etc.) employed by the host and, consequently, also across networks.\n\
    \   This mitigates the correlation of activities of multihomed hosts\n   (since\
    \ each of the corresponding addresses will typically employ a\n   different prefix),\
    \ host-tracking (since the network prefix will\n   change as the host moves from\
    \ one network to another), and any other\n   attacks that benefit from predictable\
    \ Interface Identifiers (such as\n   IPv6 address-scanning attacks).\n   The Net_Iface\
    \ is a value that identifies the network interface for\n   which an IPv6 address\
    \ is being generated.  The following properties\n   are required for the Net_Iface\
    \ parameter:\n   o  It MUST be constant across system bootstrap sequences and\
    \ other\n      network events (e.g., bringing another interface up or down).\n\
    \   o  It MUST be different for each network interface simultaneously in\n   \
    \   use.\n   Since the stability of the addresses generated with this method\n\
    \   relies on the stability of all arguments of F(), it is key that the\n   Net_Iface\
    \ parameter be constant across system bootstrap sequences and\n   other network\
    \ events.  Additionally, the Net_Iface parameter must\n   uniquely identify an\
    \ interface within the host, such that two\n   interfaces connecting to the same\
    \ network do not result in duplicate\n   addresses.  Different types of operating\
    \ systems might benefit from\n   different stability properties of the Net_Iface\
    \ parameter.  For\n   example, a client-oriented operating system might want to\
    \ employ\n   Net_Iface identifiers that are attached to the NIC, such that a\n\
    \   removable NIC always gets the same IPv6 address, irrespective of the\n   system\
    \ communications port to which it is attached.  On the other\n   hand, a server-oriented\
    \ operating system might prefer Net_Iface\n   identifiers that are attached to\
    \ system slots/ports, such that\n   replacement of a NIC does not result in an\
    \ IPv6 address change.\n   Appendix A discusses possible sources for the Net_Iface\
    \ along with\n   their pros and cons.\n   Including the optional Network_ID parameter\
    \ when computing the RID\n   value above causes the algorithm to produce a different\
    \ Interface\n   Identifier when connecting to different networks, even when\n\
    \   configuring addresses belonging to the same prefix.  This means that\n   a\
    \ host would employ a different Interface Identifier as it moves from\n   one\
    \ network to another even for IPv6 link-local addresses or Unique\n   Local Addresses\
    \ (ULAs) [RFC4193].  In those scenarios where the\n   Network_ID is unknown to\
    \ the attacker, including this parameter might\n   help mitigate attacks where\
    \ a victim host connects to the same subnet\n   as the attacker and the attacker\
    \ tries to learn the Interface\n   Identifier used by the victim host for a remote\
    \ network (see\n   Section 8 for further details).\n   The DAD_Counter parameter\
    \ provides the means to intentionally cause\n   this algorithm to produce different\
    \ IPv6 addresses (all other\n   parameters being the same).  This could be necessary\
    \ to resolve DAD\n   conflicts, as discussed in detail in Section 6.\n   Note\
    \ that the result of F() in the algorithm above is no more secure\n   than the\
    \ secret key.  If an attacker is aware of the PRF that is\n   being used by the\
    \ victim (which we should expect), and the attacker\n   can obtain enough material\
    \ (i.e., addresses configured by the\n   victim), the attacker may simply search\
    \ the entire secret-key space\n   to find matches.  To protect against this, key\
    \ lengths of at least\n   128 bits should be adequate.  The secret key is initialized\
    \ at system\n   installation time to a pseudorandom number, thus allowing this\n\
    \   mechanism to be enabled and used automatically, without user\n   intervention.\
    \  Providing a mechanism to display and change the\n   secret_key would allow\
    \ an administrator to cause a new/replacement\n   system (with the same implementation\
    \ of this specification) to\n   generate the same IPv6 addresses as the system\
    \ being replaced.  We\n   note that since the privacy of the scheme specified\
    \ in this document\n   relies on the secrecy of the secret_key parameter, implementations\n\
    \   should constrain access to the secret_key parameter to the extent\n   practicable\
    \ (e.g., require superuser privileges to access it).\n   Furthermore, in order\
    \ to prevent leakages of the secret_key\n   parameter, it should not be used for\
    \ any purposes other than being a\n   parameter to the scheme specified in this\
    \ document.\n   We note that all of the bits in the resulting Interface IDs are\n\
    \   treated as \"opaque\" bits [RFC7136].  For example, the universal/local\n\
    \   bit of Modified EUI-64 format identifiers is treated as any other bit\n  \
    \ of such an identifier.  In theory, this might result in IPv6 address\n   collisions\
    \ and DAD failures that would otherwise not be encountered.\n   However, this\
    \ is not deemed as a likely issue because of the\n   following considerations:\n\
    \   o  The interface IDs of all addresses (except those of addresses that\n  \
    \    start with the binary value 000) are 64 bits long.  Since the\n      method\
    \ specified in this document results in random Interface IDs,\n      the probability\
    \ of DAD failures is very small.\n   o  Real-world data indicates that MAC address\
    \ reuse is far more\n      common than assumed [HD-MOORE].  This means that even\
    \ IPv6\n      addresses that employ (allegedly) unique identifiers (such as IEEE\n\
    \      LAN MAC addresses) might result in DAD failures and, hence,\n      implementations\
    \ should be prepared to gracefully handle such\n      occurrences.  Additionally,\
    \ some virtualization technologies\n      already employ hardware addresses that\
    \ are randomly selected, and,\n      hence, cannot be guaranteed to be unique\
    \ [IPV6-RECON].\n   o  Since some popular and widely deployed operating systems\
    \ (such as\n      Microsoft Windows) do not embed hardware addresses in the\n\
    \      Interface IDs of their stable addresses, reliance on such unique\n    \
    \  identifiers is reduced in the deployed world (fewer deployed\n      systems\
    \ rely on them for the avoidance of address collisions).\n   Finally, we note\
    \ that since different implementations are likely to\n   use different values\
    \ for the secret_key parameter, and may also\n   employ different PRFs for F()\
    \ and different sources for the Net_Iface\n   parameter, the addresses generated\
    \ by this scheme should not expected\n   to be stable across different operating-system\
    \ installations.  For\n   example, a host that is dual-boot or that is reinstalled\
    \ may result\n   in different IPv6 addresses for each operating system and/or\n\
    \   installation.\n"
- title: 6.  Resolving DAD Conflicts
  contents:
  - "6.  Resolving DAD Conflicts\n   If, as a result of performing DAD [RFC4862],\
    \ a host finds that the\n   tentative address generated with the algorithm specified\
    \ in Section 5\n   is a duplicate address, it SHOULD resolve the address conflict\
    \ by\n   trying a new tentative address as follows:\n   o  DAD_Counter is incremented\
    \ by 1.\n   o  A new Interface Identifier is generated with the algorithm\n  \
    \    specified in Section 5, using the incremented DAD_Counter value.\n   Hosts\
    \ SHOULD introduce a random delay between 0 and IDGEN_DELAY\n   seconds (see Section\
    \ 7) before trying a new tentative address, to\n   avoid lockstep behavior of\
    \ multiple hosts.\n   This procedure may be repeated a number of times until the\
    \ address\n   conflict is resolved.  Hosts SHOULD try at least IDGEN_RETRIES (see\n\
    \   Section 7) tentative addresses if DAD fails for successive generated\n   addresses,\
    \ in the hopes of resolving the address conflict.  We also\n   note that hosts\
    \ MUST limit the number of tentative addresses that are\n   tried (rather than\
    \ indefinitely try a new tentative address until the\n   conflict is resolved).\n\
    \   In those unlikely scenarios in which duplicate addresses are detected\n  \
    \ and the order in which the conflicting hosts configure their\n   addresses varies\
    \ (e.g., because they may be bootstrapped in different\n   orders), the algorithm\
    \ specified in this section for resolving DAD\n   conflicts could lead to addresses\
    \ that are not stable within the same\n   subnet.  In order to mitigate this potential\
    \ problem, hosts MAY\n   record the DAD_Counter value employed for a specific\
    \ {Prefix,\n   Net_Iface, Network_ID} tuple in non-volatile memory, such that\
    \ the\n   same DAD_Counter value is employed when configuring an address for\n\
    \   the same Prefix and subnet at any other point in time.  We note that\n   the\
    \ use of non-volatile memory is OPTIONAL, and hosts that do not\n   implement\
    \ this feature are still compliant to this protocol\n   specification.\n   In\
    \ the event that a DAD conflict cannot be solved (possibly after\n   trying a\
    \ number of different addresses), address configuration would\n   fail.  In those\
    \ scenarios, hosts MUST NOT automatically fall back to\n   employing other algorithms\
    \ for generating Interface Identifiers.\n"
- title: 7.  Specified Constants
  contents:
  - "7.  Specified Constants\n   This document specifies the following constant:\n\
    \   IDGEN_RETRIES:\n      defaults to 3.\n   IDGEN_DELAY:\n      defaults to 1\
    \ second.\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   This document specifies an algorithm for generating\
    \ Interface\n   Identifiers to be used with IPv6 Stateless Address Autoconfiguration\n\
    \   (SLAAC), as an alternative to e.g., Interface Identifiers that embed\n   hardware\
    \ addresses (such as those specified in [RFC2464], [RFC2467],\n   and [RFC2470]).\
    \  When compared to such identifiers, the identifiers\n   specified in this document\
    \ have a number of advantages:\n   o  They prevent trivial host-tracking based\
    \ on the IPv6 address,\n      since when a host moves from one network to another\
    \ the network\n      prefix used for autoconfiguration and/or the Network ID (e.g.,\n\
    \      IEEE 802.11 SSID) will typically change; hence, the resulting\n      Interface\
    \ Identifier will also change (see [ADDR-GEN-PRIVACY]).\n   o  They mitigate address-scanning\
    \ techniques that leverage\n      predictable Interface Identifiers (e.g., known\
    \ Organizationally\n      Unique Identifiers) [IPV6-RECON].\n   o  They may result\
    \ in IPv6 addresses that are independent of the\n      underlying hardware (i.e.,\
    \ the resulting IPv6 addresses do not\n      change if a network interface card\
    \ is replaced) if an appropriate\n      source for Net_Iface (see Section 5) is\
    \ employed.\n   o  They prevent the information leakage produced by embedding\n\
    \      hardware addresses in the Interface Identifier (which could be\n      exploited\
    \ to launch device-specific attacks).\n   o  Since the method specified in this\
    \ document will result in\n      different Interface Identifiers for each configured\
    \ address,\n      knowledge or leakage of the Interface Identifier employed for\
    \ one\n      stable address will not negatively affect the security/privacy of\n\
    \      other stable addresses configured for other prefixes (whether at\n    \
    \  the same time or at some other point in time).\n   We note that while some\
    \ probing techniques (such as the use of ICMPv6\n   Echo Request and ICMPv6 Echo\
    \ Response packets) could be mitigated by\n   a personal firewall at the target\
    \ host, for other probing vectors,\n   such as listening to ICMPv6 \"Destination\
    \ Unreachable, Address\n   Unreachable\" (Type 1, Code 3) error messages that\
    \ refer to the target\n   addresses [IPV6-RECON], there is nothing a host can\
    \ do (e.g., a\n   personal firewall at the target host would not be able to mitigate\n\
    \   this probing technique).  Hence, the method specified in this\n   document\
    \ is still of value for hosts that employ personal firewalls.\n   In scenarios\
    \ in which an attacker can connect to the same subnet as a\n   victim host, the\
    \ attacker might be able to learn the Interface\n   Identifier employed by the\
    \ victim host for an arbitrary prefix by\n   simply sending a forged Router Advertisement\
    \ [RFC4861] for that\n   prefix, and subsequently learning the corresponding address\n\
    \   configured by the victim host (either listening to the Duplicate\n   Address\
    \ Detection packets or to any other traffic that employs the\n   newly configured\
    \ address).  We note that a number of factors might\n   limit the ability of an\
    \ attacker to successfully perform such an\n   attack:\n   o  First-Hop security\
    \ mechanisms such as Router Advertisement Guard\n      (RA-Guard) [RFC6105] [RFC7113]\
    \ could prevent the forged Router\n      Advertisement from reaching the victim\
    \ host.\n   o  If the victim implementation includes the (optional) Network_ID\n\
    \      parameter for computing F() (see Section 5), and the Network_ID\n     \
    \ employed by the victim for a remote network is unknown to the\n      attacker,\
    \ the Interface Identifier learned by the attacker would\n      differ from the\
    \ one used by the victim when connecting to the\n      legitimate network.\n \
    \  In any case, we note that at the point in which this kind of attack\n   becomes\
    \ a concern, a host should consider employing SEND [RFC3971] to\n   prevent an\
    \ attacker from illegitimately claiming authority for a\n   network prefix.\n\
    \   We note that this algorithm is meant to be an alternative to\n   Interface\
    \ Identifiers such as those specified in [RFC2464], but it is\n   not meant as\
    \ an alternative to temporary Interface Identifiers (such\n   as those specified\
    \ in [RFC4941]).  Clearly, temporary addresses may\n   help to mitigate the correlation\
    \ of activities of a host within the\n   same network, and they may also reduce\
    \ the attack exposure window\n   (since temporary addresses are short-lived when\
    \ compared to the\n   addresses generated with the method specified in this document).\
    \  We\n   note that the implementation of this specification would still\n   benefit\
    \ those hosts employing temporary addresses, since it would\n   mitigate host-tracking\
    \ vectors still present when such addresses are\n   used (see [ADDR-GEN-PRIVACY])\
    \ and would also mitigate address-\n   scanning techniques that leverage patterns\
    \ in IPv6 addresses that\n   embed IEEE LAN MAC addresses.  Finally, we note that\
    \ the method\n   described in this document addresses some of the privacy concerns\n\
    \   arising from the use of IPv6 addresses that embed IEEE LAN MAC\n   addresses,\
    \ without the use of temporary addresses, thus possibly\n   offering an interesting\
    \ trade-off for those scenarios in which the\n   use of temporary addresses is\
    \ not feasible.\n"
- title: 9.  Acknowledgements
  contents:
  - "9.  Acknowledgements\n   The algorithm specified in this document has been inspired\
    \ by Steven\n   Bellovin's work ([RFC1948]) in the area of TCP sequence numbers.\n\
    \   The author would like to thank (in alphabetical order) Mikael\n   Abrahamsson,\
    \ Ran Atkinson, Karl Auer, Steven Bellovin, Matthias\n   Bethke, Ben Campbell,\
    \ Brian Carpenter, Tassos Chatzithomaoglou, Tim\n   Chown, Alissa Cooper, Dominik\
    \ Elsbroek, Stephen Farrell, Eric Gray,\n   Brian Haberman, Bob Hinden, Christian\
    \ Huitema, Ray Hunter, Jouni\n   Korhonen, Suresh Krishnan, Eliot Lear, Jong-Hyouk\
    \ Lee, Andrew\n   McGregor, Thomas Narten, Simon Perreault, Tom Petch, Michael\n\
    \   Richardson, Vincent Roca, Mark Smith, Hannes Frederic Sowa, Martin\n   Stiemerling,\
    \ Dave Thaler, Ole Troan, Lloyd Wood, James Woodyatt, and\n   He Xuan, for providing\
    \ valuable comments on earlier versions of this\n   document.\n   Hannes Frederic\
    \ Sowa produced a reference implementation of this\n   specification for the Linux\
    \ kernel.\n   Finally, the author wishes to thank Nelida Garcia and Guillermo\
    \ Gont\n   for their love and support.\n"
- title: 10.  References
  contents:
  - '10.  References

    '
- title: 10.1.  Normative References
  contents:
  - "10.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [RFC2460]  Deering, S. and R. Hinden, \"Internet Protocol, Version\
    \ 6\n              (IPv6) Specification\", RFC 2460, December 1998.\n   [RFC3315]\
    \  Droms, R., Bound, J., Volz, B., Lemon, T., Perkins, C.,\n              and\
    \ M. Carney, \"Dynamic Host Configuration Protocol for\n              IPv6 (DHCPv6)\"\
    , RFC 3315, July 2003.\n   [RFC3971]  Arkko, J., Kempf, J., Zill, B., and P. Nikander,\
    \ \"SEcure\n              Neighbor Discovery (SEND)\", RFC 3971, March 2005.\n\
    \   [RFC3972]  Aura, T., \"Cryptographically Generated Addresses (CGA)\",\n  \
    \            RFC 3972, March 2005.\n   [RFC4086]  Eastlake, D., Schiller, J.,\
    \ and S. Crocker, \"Randomness\n              Requirements for Security\", BCP\
    \ 106, RFC 4086, June 2005.\n   [RFC4122]  Leach, P., Mealling, M., and R. Salz,\
    \ \"A Universally\n              Unique IDentifier (UUID) URN Namespace\", RFC\
    \ 4122, July\n              2005.\n   [RFC4193]  Hinden, R. and B. Haberman, \"\
    Unique Local IPv6 Unicast\n              Addresses\", RFC 4193, October 2005.\n\
    \   [RFC4291]  Hinden, R. and S. Deering, \"IP Version 6 Addressing\n        \
    \      Architecture\", RFC 4291, February 2006.\n   [RFC4861]  Narten, T., Nordmark,\
    \ E., Simpson, W., and H. Soliman,\n              \"Neighbor Discovery for IP\
    \ version 6 (IPv6)\", RFC 4861,\n              September 2007.\n   [RFC4862] \
    \ Thomson, S., Narten, T., and T. Jinmei, \"IPv6 Stateless\n              Address\
    \ Autoconfiguration\", RFC 4862, September 2007.\n   [RFC4941]  Narten, T., Draves,\
    \ R., and S. Krishnan, \"Privacy\n              Extensions for Stateless Address\
    \ Autoconfiguration in\n              IPv6\", RFC 4941, September 2007.\n   [RFC5453]\
    \  Krishnan, S., \"Reserved IPv6 Interface Identifiers\", RFC\n              5453,\
    \ February 2009.\n   [RFC7136]  Carpenter, B. and S. Jiang, \"Significance of\
    \ IPv6\n              Interface Identifiers\", RFC 7136, February 2014.\n"
- title: 10.2.  Informative References
  contents:
  - "10.2.  Informative References\n   [ADDR-GEN-PRIVACY]\n              Cooper, A.,\
    \ Gont, F., and D. Thaler, \"Privacy\n              Considerations for IPv6 Address\
    \ Generation Mechanisms\",\n              Work in Progress, February 2014.\n \
    \  [BROERSMA] Broersma, R., \"IPv6 Everywhere: Living with a Fully\n         \
    \     IPv6-enabled environment\", Australian IPv6 Summit 2010,\n             \
    \ Melbourne, VIC Australia, October 2010,\n              <http://www.ipv6.org.au/10ipv6summit/talks/\n\
    \              Ron_Broersma.pdf>.\n   [CPNI-IPV6]\n              Gont, F., \"\
    Security Assessment of the Internet Protocol\n              version 6 (IPv6)\"\
    , UK Centre for the Protection of\n              National Infrastructure, (available\
    \ on request).\n   [FIPS-SHS] NIST, \"Secure Hash Standard (SHS)\", FIPS Publication\n\
    \              180-4, March 2012, <http://csrc.nist.gov/publications/\n      \
    \        fips/fips180-4/fips-180-4.pdf>.\n   [GONT-DEEPSEC2011]\n            \
    \  Gont, F., \"Results of a Security Assessment of the\n              Internet\
    \ Protocol version 6 (IPv6)\", DEEPSEC 2011\n              Conference, Vienna,\
    \ Austria, November 2011,\n              <http://www.si6networks.com/presentations/deepsec2011/\n\
    \              fgont-deepsec2011-ipv6-security.pdf>.\n   [HD-MOORE] Moore, HD.,\
    \ \"The Wild West\", Louisville, Kentucky, U.S.A,\n              DerbyCon 2012,\
    \ September 2012, <https://speakerdeck.com/\n              hdm/derbycon-2012-the-wild-west>.\n\
    \   [IAB-PRIVACY]\n              IAB, \"Privacy and IPv6 Addresses\", July 2011,\n\
    \              <http://www.iab.org/wp-content/IAB-uploads/2011/07/\n         \
    \     IPv6-addresses-privacy-review.txt>.\n   [IANA-RESERVED-IID]\n          \
    \    IANA, \"Reserved IPv6 Interface Identifiers\",\n              <http://www.iana.org/assignments/ipv6-interface-ids>.\n\
    \   [IPV6-RECON]\n              Gont, F. and T. Chown, \"Network Reconnaissance\
    \ in IPv6\n              Networks\", Work in Progress, January 2014.\n   [RFC1321]\
    \  Rivest, R., \"The MD5 Message-Digest Algorithm\", RFC 1321,\n             \
    \ April 1992.\n   [RFC1948]  Bellovin, S., \"Defending Against Sequence Number\
    \ Attacks\",\n              RFC 1948, May 1996.\n   [RFC2464]  Crawford, M., \"\
    Transmission of IPv6 Packets over Ethernet\n              Networks\", RFC 2464,\
    \ December 1998.\n   [RFC2467]  Crawford, M., \"Transmission of IPv6 Packets over\
    \ FDDI\n              Networks\", RFC 2467, December 1998.\n   [RFC2470]  Crawford,\
    \ M., Narten, T., and S. Thomas, \"Transmission of\n              IPv6 Packets\
    \ over Token Ring Networks\", RFC 2470, December\n              1998.\n   [RFC3493]\
    \  Gilligan, R., Thomson, S., Bound, J., McCann, J., and W.\n              Stevens,\
    \ \"Basic Socket Interface Extensions for IPv6\", RFC\n              3493, February\
    \ 2003.\n   [RFC3542]  Stevens, W., Thomas, M., Nordmark, E., and T. Jinmei,\n\
    \              \"Advanced Sockets Application Program Interface (API) for\n  \
    \            IPv6\", RFC 3542, May 2003.\n   [RFC6059]  Krishnan, S. and G. Daley,\
    \ \"Simple Procedures for\n              Detecting Network Attachment in IPv6\"\
    , RFC 6059, November\n              2010.\n   [RFC6105]  Levy-Abegnoli, E., Van\
    \ de Velde, G., Popoviciu, C., and J.\n              Mohacsi, \"IPv6 Router Advertisement\
    \ Guard\", RFC 6105,\n              February 2011.\n   [RFC6151]  Turner, S. and\
    \ L. Chen, \"Updated Security Considerations\n              for the MD5 Message-Digest\
    \ and the HMAC-MD5 Algorithms\",\n              RFC 6151, March 2011.\n   [RFC7113]\
    \  Gont, F., \"Implementation Advice for IPv6 Router\n              Advertisement\
    \ Guard (RA-Guard)\", RFC 7113, February 2014.\n"
- title: Appendix A.  Possible Sources for the Net_Iface Parameter
  contents:
  - "Appendix A.  Possible Sources for the Net_Iface Parameter\n   The following subsections\
    \ describe a number of possible sources for\n   the Net_Iface parameter employed\
    \ by the F() function in Section 5.\n   The choice of a specific source for this\
    \ value represents a number of\n   trade-offs, which may vary from one implementation\
    \ to another.\n"
- title: A.1.  Interface Index
  contents:
  - "A.1.  Interface Index\n   The Interface Index [RFC3493] [RFC3542] of an interface\
    \ uniquely\n   identifies that interface within the node.  However, these\n  \
    \ identifiers might or might not have the stability properties required\n   for\
    \ the Net_Iface value employed by this method.  For example, the\n   Interface\
    \ Index might change upon removal or installation of a\n   network interface (typically\
    \ one with a smaller value for the\n   Interface Index, when such a naming scheme\
    \ is used) or when network\n   interfaces happen to be initialized in a different\
    \ order.  We note\n   that some implementations are known to provide configuration\
    \ knobs to\n   set the Interface Index for a given interface.  Such configuration\n\
    \   knobs could be employed to prevent the Interface Index from changing\n   (e.g.,\
    \ as a result of the removal of a network interface).\n"
- title: A.2.  Interface Name
  contents:
  - "A.2.  Interface Name\n   The Interface Name (e.g., \"eth0\", \"em0\", etc.) tends\
    \ to be more\n   stable than the underlying Interface Index, since such stability\
    \ is\n   required or desired when interface names are employed in network\n  \
    \ configuration (firewall rules, etc.).  The stability properties of\n   Interface\
    \ Names depend on implementation details, such as what is the\n   namespace used\
    \ for Interface Names.  For example, \"generic\" interface\n   names such as \"\
    eth0\" or \"wlan0\" will generally be invariant with\n   respect to network interface\
    \ card replacements.  On the other hand,\n   vendor-dependent interface names\
    \ such as \"rtk0\" or the like will\n   generally change when a network interface\
    \ card is replaced with one\n   from a different vendor.\n   We note that Interface\
    \ Names might still change when network\n   interfaces are added or removed once\
    \ the system has been bootstrapped\n   (for example, consider USB-based network\
    \ interface cards that might\n   be added or removed once the system has been\
    \ bootstrapped).\n"
- title: A.3.  Link-Layer Addresses
  contents:
  - "A.3.  Link-Layer Addresses\n   Link-layer addresses typically provide for unique\
    \ identifiers for\n   network interfaces; although, for obvious reasons, they\
    \ generally\n   change when a network interface card is replaced.  In scenarios\
    \ in\n   which neither Interface Indexes nor Interface Names have the\n   stability\
    \ properties specified in Section 5 for Net_Iface, an\n   implementation might\
    \ want to employ the link-layer address of the\n   interface for the Net_Iface\
    \ parameter, albeit at the expense of\n   making the corresponding IPv6 addresses\
    \ dependent on the underlying\n   network interface card (i.e., the corresponding\
    \ IPv6 addresses would\n   typically change upon replacement of the underlying\
    \ network interface\n   card).\n"
- title: A.4.  Logical Network Service Identity
  contents:
  - "A.4.  Logical Network Service Identity\n   Host operating systems with a conception\
    \ of logical network service\n   identity, distinct from network interface identity\
    \ or index, may keep\n   a Universally Unique Identifier (UUID) [RFC4122] or similar\n\
    \   identifier with the stability properties appropriate for use as the\n   Net_Iface\
    \ parameter.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Fernando Gont\n   SI6 Networks / UTN-FRH\n   Evaristo Carriego\
    \ 2644\n   Haedo, Provincia de Buenos Aires  1706\n   Argentina\n   Phone: +54\
    \ 11 4650 8472\n   EMail: fgont@si6networks.com\n   URI:   http://www.si6networks.com\n"
