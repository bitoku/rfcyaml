- title: __initial_text__
  contents:
  - '             Simple Network Paging Protocol - Version 1(b)

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  This memo\n   does not specify an Internet standard of any kind.  Distribution\
    \ of\n   this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   This RFC suggests a simple way for delivering both alphanumeric\
    \ and\n   numeric pages (one-way) to radio paging terminals.  Gateways\n   supporting\
    \ this protocol, as well as SMTP, have been in use for\n   several months in one\
    \ nationwide paging firm.  One other paging firm\n   is in the process of adopting\
    \ it.\n   Earlier versions of this specification were reviewed by IESG members\n\
    \   and the IETF's \"822 Extensions\" Working Group.  They preferred an\n   alternate\
    \ strategy, as discussed under \"Relationship to Other IETF\n   Work\", below.\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   Beepers are as much a part of computer nerdom as X-terminals\n\
    \   (perhaps, unfortunately, more).  The intent of Simple Network Paging\n   Protocol\
    \ (SNPP) is to provide a standard whereby pages can be\n   delivered to individual\
    \ paging terminals.  The most obvious benefit\n   is the elimination of the need\
    \ for modems to produce alphanumeric\n   pages, and the added ease of delivery\
    \ of pages to terminals in other\n   cities or countries.  Additionally, automatic\
    \ page delivery should be\n   somewhat more simplified.\n"
- title: 2. System Philosophy
  contents:
  - "2. System Philosophy\n   Radio paging is somewhat taken for granted, because\
    \ of the wide\n   availability and wide use of paging products.  However, the\
    \ actual\n   delivery of the page, and the process used (especially in wider area\n\
    \   paging) is somewhat complicated.  When a user initiates a page, by\n   dialing\
    \ a number on a telephone, or entering an alphanumeric page\n   through some input\
    \ device, the page must ultimately be delivered to\n   some paging terminal, somewhere.\
    \  In most cases, this delivery is\n   made using TAP (Telocator Alphanumeric\
    \ input Protocol, also known as\n   IXO).  This protocol can be a somewhat convoluted,\
    \ and complicated\n   protocol using older style ASCII control characters and\
    \ a non-\n   standard checksumming routine to assist in validating the data. \
    \ One\n   note: even though the TAP protocol allows for a password for sending\n\
    \   simple pages, they are rarely used (especially in commercial\n   markets),\
    \ and therefore support for them has not been implemented in\n   this version\
    \ of the protocol.\n   Even though TAP is widely used throughout the industry,\
    \ there are\n   plans on the table to move to a more flexible \"standard\" protocol\n\
    \   (the proposal for which is actually more convoluted than most\n   Internet\
    \ RFC's).  However, acknowledging the complexity and\n   flexibility of the current\
    \ protocols (or the lack thereof), the final\n   user function is quite simple:\
    \ to deliver a page from point-of-origin\n   to someone's beeper.  That is the\
    \ simple, real-time function that\n   this protocol attempts to address.  Validation\
    \ of the paging\n   information is left completely up to the TAP/IXO paging terminal,\n\
    \   making an SNPP gateway a direct \"shim\" between a paging terminal and\n \
    \  the Internet.\n"
- title: 3. Why not just use Email and SMTP?
  contents:
  - "3. Why not just use Email and SMTP?\n   Email, while quite reliable, is not always\
    \ timely.  A good example of\n   this is deferred messaging when a gateway is\
    \ down. Suppose Mary Ghoti\n   (fish@hugecompany.org) sends a message to Zaphod\
    \ Beeblebrox's beeper\n   (5551212@pager.pagingcompany.com). Hugecompany's gateway\
    \ to the\n   Internet is down causing Mary's message to be deferred.  Mary,\n\
    \   however, is not notified of this delay because her message has not\n   actually\
    \ failed to reach its destination.  Three hours later, the\n   link is restored,\
    \ and (as soon as sendmail wakes up) the message is\n   sent.  Obviously, if Mary's\
    \ page concerned a meeting that was\n   supposed to happen 2 hours ago, there\
    \ will be some minor\n   administrative details to work out between Mary and Zaphod!\n\
    \   On the other hand, if Mary had used her SNPP client (or simply\n   telnetted\
    \ to the SNPP gateway), she would have immediately discovered\n   the network\
    \ problem.  She would have decided to invoke plan \"B\" and\n   call Zaphod's\
    \ pager on the telephone, ringing him that way.\n   The obvious difference here\
    \ is not page delivery, but the immediate\n   notification of a problem that affects\
    \ your message.  Standard email\n   and SMTP, while quite reliable in most cases,\
    \ cannot be positively\n   guaranteed between all nodes at all times, making it\
    \ less desirable\n   for emergency or urgent paging.  The other consideration\
    \ is the\n   relative simplicity of the SNPP protocol for manual Telnet sessions\n\
    \   versus someone trying to manually hack a mail message into a gateway.\n"
- title: 4. The Future of SNPP
  contents:
  - "4. The Future of SNPP\n   While the current form of the SNPP protocol is designed\
    \ for use with\n   TAP/IXO, it is intended to provide a porting base for use with\
    \ the\n   newer TME (TDP) protocol.  In addition, future releases of SNPP will\n\
    \   allow for multiple recipient messages with individual \"envelope\"\n   options\
    \ and specifications as allowed by TME.  For example, the\n   protocol should\
    \ allow the user to specify delivery of an urgent\n   message to Zaphod in Denver,\
    \ while carbon-copying Mary in Des Moines\n   at a lower priority.\n"
- title: 5. The Protocol
  contents:
  - "5. The Protocol\n   The SNPP protocol is a sequence of commands and replies,\
    \ and is based\n   on the philosophy of many other Internet protocols currently\
    \ in use.\n   SNPP has six input commands (the first 4 characters of each are\n\
    \   significant) that solicit various server responses falling into three\n  \
    \ categories: (1) successful, (2) failed-but-continue, and (3) failed-\n   with-connection-terminated.\
    \  The first character of every server\n   response code is a digit indicating\
    \ the category of response: '2xx',\n   '5xx', and '4xx' respectfully.  The text\
    \ portion of the response\n   following the code may be altered to suit individual\
    \ applications.\n   The session interaction is actually quite simple (hence the\
    \ name).\n   The client initiates the connection with the listening server.  Upon\n\
    \   opening the connection, the server issues a greeting followed by \"250\n \
    \  READY\" (indicating the willingness of the server to accept SNPP\n   commands).\
    \  The client passes pager ID information, and a message,\n   then issues a \"\
    SEND\" command.  The server then feeds the information\n   to the TAP paging terminal,\
    \ gathers a response, and reports the\n   success or failure to the client.\n"
- title: 6.1 A Typical Successful Connection
  contents:
  - "6.1 A Typical Successful Connection\n           Client                      \
    \   Server\n   Open Connection            -->\n                              <--\
    \  220 SNPP Gateway Ready\n   PAGE 5551212               -->\n               \
    \               <--  250 OK\n   MESS Your network is hosed -->\n             \
    \                 <--  250 OK\n   SEND                       -->\n           \
    \                   <--  250 Page Sent\n   QUIT                       -->\n  \
    \                            <--  221 OK, Goodbye\n"
- title: 6.2 Commands
  contents:
  - '6.2 Commands

    '
- title: 6.2.1 PAGEr <Pager ID>
  contents:
  - "6.2.1 PAGEr <Pager ID>\n   The PAGEr command sets the pager ID (PID) number,\
    \ for the\n   transaction, into the gateway.  The PID used must reside in the\
    \ TAP\n   terminal (and there is where it should be validated).  Limited\n   validation\
    \ may optionally be done on the server (such as all numeric,\n   and ID length),\
    \ or it can all be done by the TAP terminal at the time\n   the page is sent.\
    \  Duplicating the PAGEr command before SENDing the\n   message should produce\
    \ an \"503 ERROR, Already Entered\" message, and\n   allow the user to continue.\n\
    \   In the future, a series of PAGEr commands may be specified to allow\n   for\
    \ multiple recipients of the same message.  Right now, however,\n   TAP/IXO only\
    \ validates the PID at the time the message is accepted by\n   the paging terminal.\
    \  This makes \"pre\" validation of PID's currently\n   difficult.\n"
- title: 6.2.2 MESSage <Alpha or Numeric Message>
  contents:
  - "6.2.2 MESSage <Alpha or Numeric Message>\n   The MESSage command sets the numeric\
    \ or alphanumeric message for the\n   transaction, into the gateway.  Limited\
    \ validation of the message may\n   be done on the SNPP server (such as length),\
    \ but type-of-message\n   validation should be done by the TAP/IXO paging terminal.\n\
    \   Duplicating the MESSage command before SENDing the message should\n   produce\
    \ an \"503 ERROR, Already Entered\" message, and allow the user\n   to continue.\n"
- title: 6.2.3 RESEt
  contents:
  - "6.2.3 RESEt\n   The RESEt command clears the PAGEr and MESSage fields, and allows\
    \ the\n   client to start over.  This is provided, primarily, as a means to\n\
    \   reset accidentally entered information during a manual session. Upon\n   a\
    \ successful reset, the server should respond \"250 RESET OK\".\n"
- title: 6.2.4 SEND
  contents:
  - "6.2.4 SEND\n   The SEND command processes the page to the TAP terminal.  Prior\
    \ to\n   processing, the PAGEr and MESSage fields should be checked for the\n\
    \   existence of information.  Should one of these required fields be\n   missing,\
    \ the server should respond \"503 Error, Incomplete\n   Information\" and allow\
    \ the user to continue.  Assuming all of the\n   fields are filled in, the SNPP\
    \ server should format and send the page\n   to the TAP terminal, and await a\
    \ response.  Upon receiving a reply,\n   the server should respond as follows:\n\
    \    250 Page Sent         - successful delivery\n    554 Failed, <reason>  -\
    \ unsuccessful, and gives a reason\n   Or, in the case of an illegal or non-existent\
    \ pager ID, or some other\n   administrative reason for rejecting the page, the\
    \ server should\n   respond:\n    550 Failed, Illegal Pager ID (or other explanation)\n\
    \   After processing a SEND command, the server should remain online to\n   allow\
    \ the client to enter another page.\n"
- title: 6.2.5 QUIT
  contents:
  - "6.2.5 QUIT\n   The QUIT command terminates the current session.  The server should\n\
    \   respond \"221 OK, Goodbye\" and close the connection.\n"
- title: 6.2.6 HELP
  contents:
  - "6.2.6 HELP\n   The HELP command (optional) displays a screen of information about\n\
    \   commands that are valid on the SNPP server.  This is primarily to\n   assist\
    \ manual users of the gateway.  Each line of the HELP screen\n   (responses) are\
    \ preceded by a code \"214\".  At the end of the HELP\n   sequence, a \"250 OK\"\
    \ is issued.\n"
- title: 6.3 Illegal Commands
  contents:
  - "6.3 Illegal Commands\n   Should the client issue an illegal command, the server\
    \ should respond\n   \"421 ERROR, Goodbye\" and close the connection immediately.\n\
    \   Optionally, the server may respond \"502 Command Error, try again\"\n   should\
    \ it be desirable to leave the connection open.\n"
- title: 6.4 Timeouts
  contents:
  - "6.4 Timeouts\n   The SNPP server can, optionally, have an inactivity timeout\n\
    \   implemented.  At the expiration of the allotted time, the server\n   responds\
    \ \"421 Timeout, Goodbye\" and closes the connection.\n"
- title: 6.5 Rigidity of Command Structure
  contents:
  - "6.5 Rigidity of Command Structure\n   The commands from client to server should\
    \ remain constant.  However,\n   since the first character of the response indicates\
    \ success or\n   failure, the text of the server responses could be altered should\
    \ one\n   desire.  The following is a hunk of C code that is used currently in\n\
    \   an SNPP gateway.  The only response that has not been discussed is\n   \"\
    421 SERVER DOWN, Goodbye\" and is used when the gateway is\n   administratively\
    \ down, or when there are communication problems with\n   the TAP/IXO paging terminal.\n\
    \   /* SNPP Client Commands */\n   #define PAGER        \"PAGE\"\n   #define MESSAGE\
    \      \"MESS\"\n   #define SEND         \"SEND\"\n   #define QUIT         \"\
    QUIT\"\n   #define RESET        \"RESE\"\n   #define HELP         \"HELP\"\n \
    \  /* Responses from SNPP server to client */\n   #define SNPP_OK      \"250 OK\"\
    \n   #define SNPP_RESET   \"250 Reset OK\"\n   #define SNPP_SENT    \"250 Page\
    \ Sent\"\n   #define SNPP_BADPIN  \"550 Failed,\"\n   #define SNPP_NOTSENT \"\
    554 Failed,\"\n   #define SNPP_ENTERR  \"503 Error, Already Entered\"\n   #define\
    \ SNPP_ERRINC  \"503 Error, Incomplete Info\"\n   #define SNPP_OKCLOS  \"221 OK,\
    \ Goodbye\"\n   #define SNPP_TIMEOUT \"421 Timeout, Goodbye\"\n   #define SNPP_ERRCLOS\
    \ \"421 ERROR, Goodbye\"\n   #define SNPP_DOWN    \"421 SERVER DOWN, Goodbye\"\
    \n"
- title: 7. Revision History
  contents:
  - "7. Revision History\n   Originally, when proposed, the author employed POP2 style\n\
    \   result/response codes.  The Internet community suggested that this\n   '+'\
    \ and '-' style theory be altered to provide numeric response codes\n   -- similar\
    \ to those used in other services such as SMTP.  The\n   protocol has been altered\
    \ to this specification from the first\n   proposed draft.\n   When a bad pager\
    \ ID message (IXO/TAP administrative failure was\n   received from the paging\
    \ terminal, a 554 series (general failure) was\n   returned.  This has been changed\
    \ to a 550 failure code allowing a\n   distinction to be made.\n"
- title: 8. Relationship to Other IETF Work
  contents:
  - "8. Relationship to Other IETF Work\n   The strategy of this specification, and\
    \ many of its details, were\n   reviewed by an IETF Working Group and three IESG\
    \ members.  They\n   concluded that an approach using the existing email infrastructure\n\
    \   was preferable, due in large measure to the very high costs of\n   deploying\
    \ a new protocol and the advantages of using the Internet's\n   most widely-distributed\
    \ applications protocol infrastructure.  Most\n   reviewers felt that no new protocol\
    \ was needed at all because the\n   special \"deliver immediately or fail\" requirements\
    \ of SNPP could be\n   accomplished by careful configuration of clients and servers.\
    \  The\n   experimental network printing protocol [3] was identified as an\n \
    \  example of an existing infrastructure approach to an existing\n   problem.\
    \  Other reviewers believed that a case could be made for new\n   protocol details\
    \ to identify paging clients and servers to each other\n   and negotiate details\
    \ of the transactions, but that it would be\n   sensible to handle those details\
    \ as extensions to SMTP [1,2] rather\n   than deploying a new protocol structure.\n\
    \   The author, while recognizing these positions, believes that there is\n  \
    \ merit in a separate protocol to isolate details of TAP/IXO and its\n   evolving\
    \ successors from users and, indeed, from mail-based\n   approaches that might\
    \ reach systems that would act as SMTP/MIME [4]\n   to SNPP gateways.  Such systems\
    \ and gateways are, indeed, undergoing\n   design and development concurrent with\
    \ this work.  See the section\n   \"Why not just use Email and SMTP?\" for additional\
    \ discussion of the\n   author's view of the classical electronic email approach.\n"
- title: 9. References
  contents:
  - "9. References\n   [1] Postel, J., \"Simple Mail Transfer Protocol\", STD 10,\
    \ RFC 821,\n       USC/Information Sciences Institute, August 1982.\n   [2] Klensin,\
    \ J., Freed, N., Rose, M., Stefferud, E., and D. Crocker,\n       \"SMTP Service\
    \ Extensions\", United Nations University, Innosoft,\n       Dover Beach Consulting,\
    \ Inc., Network Management Associates,\n       Inc., The Branch Office, February\
    \ 1993.\n   [3] Rose, M., and C. Malamud, \"An Experiment in Remote Printing\"\
    , RFC\n       1486, Dover Beach Consulting, Inc., Internet Multicasting\n    \
    \   Service, July 1993.\n   [4] Borenstein, N., and N. Freed, \"MIME  (Multipurpose\
    \ Internet Mail\n       Extensions) Part One:  Mechanisms for Specifying and Describing\n\
    \       the Format of Internet Message Bodies\", RFC 1521, Bellcore,\n       Innosoft,\
    \ September 1993.\n"
- title: 10.  Security Considerations
  contents:
  - "10.  Security Considerations\n   Security issues are not discussed in this memo.\n"
- title: 11. Author's Address
  contents:
  - "11. Author's Address\n   R. Allen Gwinn, Jr.\n   Associate Director, Computing\
    \ Services\n   Business Information Center\n   Southern Methodist University\n\
    \   Dallas, TX  75275\n   Phone:  214/768-3186\n   EMail:  allen@mail.cox.smu.edu\
    \ or allen@sulaco.lonestar.org\n"
