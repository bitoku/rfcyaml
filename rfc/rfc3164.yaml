- title: __initial_text__
  contents:
  - '                        The BSD syslog Protocol

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2001).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes the observed behavior of the syslog protocol.\n\
    \   This protocol has been used for the transmission of event\n   notification\
    \ messages across networks for many years.  While this\n   protocol was originally\
    \ developed on the University of California\n   Berkeley Software Distribution\
    \ (BSD) TCP/IP system implementations,\n   its value to operations and management\
    \ has led it to be ported to\n   many other operating systems as well as being\
    \ embedded into many\n   other networked devices.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   5.3 Originating Process Information...............................15\n\
    \   5.4 Examples......................................................16\n   6.\
    \ Security Considerations........................................18\n   6.1 Packet\
    \ Parameters.............................................19\n   6.2 Message Authenticity..........................................19\n\
    \   6.2.1 Authentication Problems.....................................19\n   6.2.2\
    \ Message Forgery.............................................20\n   6.3 Sequenced\
    \ Delivery............................................20\n   6.3.1 Single Source\
    \ to a Destination..............................20\n   6.3.2 Multiple Sources\
    \ to a Destination...........................21\n   6.3.3 Multiple Sources to\
    \ Multiple Destinations...................21\n   6.3.4 Replaying...................................................22\n\
    \   6.4 Reliable Delivery.............................................22\n   6.5\
    \ Message Integrity.............................................22\n   6.6 Message\
    \ Observation...........................................22\n   6.7 Message Prioritization\
    \ and Differentiation....................23\n   6.8 Misconfiguration..............................................24\n\
    \   6.9 Forwarding Loop...............................................24\n   6.10\
    \ Load Considerations..........................................25\n   7. IANA\
    \ Considerations............................................25\n   8. Conclusion\
    \ and Other Efforts...................................25\n   Acknowledgements..................................................26\n\
    \   References........................................................27\n   Author's\
    \ Address..................................................28\n   Full Copyright\
    \ Statement..........................................29\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   Since the beginning, life has relied upon the transmission\
    \ of\n   messages.  For the self-aware organic unit, these messages can relay\n\
    \   many different things.  The messages may signal danger, the presence\n   of\
    \ food or the other necessities of life, and many other things.  In\n   many cases,\
    \ these messages are informative to other units and require\n   no acknowledgement.\
    \  As people interacted and created processes, this\n   same principle was applied\
    \ to societal communications.  As an\n   example, severe weather warnings may\
    \ be delivered through any number\n   of channels - a siren blowing, warnings\
    \ delivered over television and\n   radio stations, and even through the use of\
    \ flags on ships.  The\n   expectation is that people hearing or seeing these\
    \ warnings would\n   realize their significance and take appropriate action. \
    \ In most\n   cases, no responding acknowledgement of receipt of the warning is\n\
    \   required or even desired.  Along these same lines, operating systems,\n  \
    \ processes and applications were written to send messages of their own\n   status,\
    \ or messages to indicate that certain events had occurred.\n   These event messages\
    \ generally had local significance to the machine\n   operators.  As the operating\
    \ systems, processes and applications grew\n   ever more complex, systems were\
    \ devised to categorize and log these\n   diverse messages and allow the operations\
    \ staff to more quickly\n   differentiate the notifications of problems from simple\
    \ status\n   messages.  The syslog process was one such system that has been\n\
    \   widely accepted in many operating systems.  Flexibility was designed\n   into\
    \ this process so the operations staff have the ability to\n   configure the destination\
    \ of messages sent from the processes running\n   on the device.  In one dimension,\
    \ the events that were received by\n   the syslog process could be logged to different\
    \ files and also\n   displayed on the console of the device.  In another dimension,\
    \ the\n   syslog process could be configured to forward the messages across a\n\
    \   network to the syslog process on another machine. The syslog process\n   had\
    \ to be built network-aware for some modicum of scalability since\n   it was known\
    \ that the operators of multiple systems would not have\n   the time to access\
    \ each system to review the messages logged there.\n   The syslog process running\
    \ on the remote devices could therefore be\n   configured to either add the message\
    \ to a file, or to subsequently\n   forward it to another machine.\n   In its\
    \ most simplistic terms, the syslog protocol provides a\n   transport to allow\
    \ a machine to send event notification messages\n   across IP networks to event\
    \ message collectors - also known as syslog\n   servers.  Since each process,\
    \ application and operating system was\n   written somewhat independently, there\
    \ is little uniformity to the\n   content of syslog messages.  For this reason,\
    \ no assumption is made\n   upon the formatting or contents of the messages. \
    \ The protocol is\n   simply designed to transport these event messages.  In all\
    \ cases,\n   there is one device that originates the message.  The syslog process\n\
    \   on that machine may send the message to a collector.  No\n   acknowledgement\
    \ of the receipt is made.\n   One of the fundamental tenets of the syslog protocol\
    \ and process is\n   its simplicity.  No stringent coordination is required between\
    \ the\n   transmitters and the receivers.  Indeed, the transmission of syslog\n\
    \   messages may be started on a device without a receiver being\n   configured,\
    \ or even actually physically present.  Conversely, many\n   devices will most\
    \ likely be able to receive messages without explicit\n   configuration or definitions.\
    \  This simplicity has greatly aided the\n   acceptance and deployment of syslog.\n"
- title: 1.1 Events and Generated Messages
  contents:
  - "1.1 Events and Generated Messages\n   The writers of the operating systems, processes\
    \ and applications have\n   had total control over the circumstances that would\
    \ generate any\n   message.  In some cases, messages are generated to give status.\
    \ These\n   can be either at a certain period of time, or at some other interval\n\
    \   such as the invocation or exit of a program.  In other cases, the\n   messages\
    \ may be generated due to a set of conditions being met.  In\n   those cases,\
    \ either a status message or a message containing an alarm\n   of some type may\
    \ be generated.  It was considered that the writers of\n   the operating systems,\
    \ processes and applications would quantify\n   their messages into one of several\
    \ broad categories.  These broad\n   categories generally consist of the facility\
    \ that generated them,\n   along with an indication of the severity of the message.\
    \  This was so\n   that the operations staff could selectively filter the messages\
    \ and\n   be presented with the more important and time sensitive notifications\n\
    \   quickly, while also having the ability to place status or informative\n  \
    \ messages in a file for later perusal.   Other options for displaying\n   or\
    \ storing messages have been seen to exist as well.\n   Devices MUST be configured\
    \ with rules for displaying and/or\n   forwarding the event messages.  The rules\
    \ that have been seen are\n   generally very flexible.  An administrator may want\
    \ to have all\n   messages stored locally as well as to have all messages of a\
    \ high\n   severity forwarded to another device.  They may find it appropriate\n\
    \   to also have messages from a particular facility sent to some or all\n   of\
    \ the users of the device and displayed on the system console.\n   However the\
    \ administrator decides to configure the disposition of the\n   event messages,\
    \ the process of having them sent to a syslog collector\n   generally consists\
    \ of deciding which facility messages and which\n   severity levels will be forwarded,\
    \ and then defining the remote\n   receiver.  For example, an administrator may\
    \ want all messages that\n   are generated by the mail facility to be forwarded\
    \ to one particular\n   event message collector.  Then the administrator may want\
    \ to have all\n   kernel generated messages sent to a different syslog receiver\
    \ while,\n   at the same time, having the critically severe messages from the\n\
    \   kernel also sent to a third receiver.  It may also be appropriate to\n   have\
    \ those messages displayed on the system console as well as being\n   mailed to\
    \ some appropriate people, while at the same time, being sent\n   to a file on\
    \ the local disk of the device.  Conversely, it may be\n   appropriate to have\
    \ messages from a locally defined process only\n   displayed on the console but\
    \ not saved or forwarded from the device.\n   In any event, the rules for this\
    \ will have to be generated on the\n   device.  Since the administrators will\
    \ then know which types of\n   messages will be received on the collectors, they\
    \ should then make\n   appropriate rules on those syslog servers as well.\n  \
    \ The contents of a message have also been at the discretion of its\n   creator.\
    \  It has been considered to be good form to write the\n   messages so that they\
    \ are informative to the person who may be\n   reading them.  It has also been\
    \ considered good practice to include a\n   timestamp and some indication of the\
    \ sending device and the process\n   that originated it in the messages.  However,\
    \ none of those are\n   stringently required.\n   It should be assumed that any\
    \ process on any device might generate an\n   event message.  This may include\
    \ processes on machines that do not\n   have any local storage - e.g., printers,\
    \ routers, hubs, switches, and\n   diskless workstations.  In that case, it may\
    \ be imperative that event\n   messages are transported to a collector so that\
    \ they may be recorded\n   and hopefully viewed by an operator.\n"
- title: 1.2 Operations of the Message Receivers
  contents:
  - "1.2 Operations of the Message Receivers\n   It is beyond the scope of this document\
    \ to specify how event messages\n   should be processed when they are received.\
    \  Like the operations\n   described in Section 1.1, they generally may be displayed\
    \ to the\n   appropriate people, saved onto disk, further forwarded, or any\n\
    \   combination of these.  The rules for determining the disposition of\n   received\
    \ messages have been seen to be identical to the rules for\n   determining the\
    \ disposition of locally generated messages.\n   As a very general rule, there\
    \ are usually many devices sending\n   messages to relatively fewer collectors.\
    \  This fan-in process allows\n   an administrator to aggregate messages into\
    \ relatively few\n   repositories.\n"
- title: 2. Transport Layer Protocol
  contents:
  - "2. Transport Layer Protocol\n   syslog uses the user datagram protocol (UDP)\
    \ [1] as its underlying\n   transport layer mechanism.  The UDP port that has\
    \ been assigned to\n   syslog is 514.  It is RECOMMENDED that the source port\
    \ also be 514 to\n   indicate that the message is from the syslog process of the\
    \ sender,\n   but there have been cases seen where valid syslog messages have\
    \ come\n   from a sender with a source port other than 514.  If the sender uses\n\
    \   a source port other than 514 then it is RECOMMENDED and has been\n   considered\
    \ to be good form that subsequent messages are from a single\n   consistent port.\n"
- title: 3. Definitions and Architecture
  contents:
  - "3. Definitions and Architecture\n   The following definitions will be used in\
    \ this document.\n         A machine that can generate a message will be called\
    \ a\n         \"device\".\n         A machine that can receive the message and\
    \ forward it to\n         another machine will be called a \"relay\".\n      \
    \   A machine that receives the message and does not relay it to\n         any\
    \ other machines will be called a \"collector\".  This has been\n         commonly\
    \ known as a \"syslog server\".\n         Any device or relay will be known as\
    \ the \"sender\" when it sends\n         a message.\n         Any relay or collector\
    \ will be known as the \"receiver\" when it\n         receives the message.\n\
    \   The architecture of the devices may be summarized as follows:\n         Senders\
    \ send messages to relays or collectors with no knowledge\n         of whether\
    \ it is a collector or relay.\n         Senders may be configured to send the\
    \ same message to multiple\n         receivers.\n         Relays may send all\
    \ or some of the messages that they receive\n         to a subsequent relay or\
    \ collector.  In the case where they do\n         not forward all of their messages,\
    \ they are acting as both a\n         collector and a relay.  In the following\
    \ diagram, these devices\n         will be designated as relays.\n         Relays\
    \ may also generate their own messages and send them on to\n         subsequent\
    \ relays or collectors.  In that case it is acting as\n         a device.  These\
    \ devices will also be designated as a relay in\n         the following diagram.\n\
    \   The following architectures shown in Diagram 1 are valid while the\n   first\
    \ one has been known to be the most prevalent.  Other\n   arrangements of these\
    \ examples are also acceptable.  As noted above,\n   in the following diagram\
    \ relays may pass along all or some of the\n   messages that they receive along\
    \ with passing along messages that\n   they internally generate.\n         +------+\
    \         +---------+\n         |Device|---->----|Collector|\n         +------+\
    \         +---------+\n         +------+         +-----+         +---------+\n\
    \         |Device|---->----|Relay|---->----|Collector|\n         +------+    \
    \     +-----+         +---------+\n         +------+     +-----+            +-----+\
    \     +---------+\n         |Device|-->--|Relay|-->--..-->--|Relay|-->--|Collector|\n\
    \         +------+     +-----+            +-----+     +---------+\n         +------+\
    \         +-----+         +---------+\n         |Device|---->----|Relay|---->----|Collector|\n\
    \         |      |-\\       +-----+         +---------+\n         +------+  \\\
    \n                    \\      +-----+         +---------+\n                  \
    \   \\-->--|Relay|---->----|Collector|\n                           +-----+   \
    \      +---------+\n         +------+         +---------+\n         |Device|---->----|Collector|\n\
    \         |      |-\\       +---------+\n         +------+  \\\n             \
    \       \\      +-----+         +---------+\n                     \\-->--|Relay|---->----|Collector|\n\
    \                           +-----+         +---------+\n         +------+   \
    \      +-----+            +---------+\n         |Device|---->----|Relay|---->-------|Collector|\n\
    \         |      |-\\       +-----+         /--|         |\n         +------+\
    \  \\                     /   +---------+\n                    \\      +-----+\
    \      /\n                     \\-->--|Relay|-->--/\n                        \
    \   +-----+\n           Diagram 1.  Some Possible syslog Architectures\n"
- title: 4. Packet Format and Contents
  contents:
  - "4. Packet Format and Contents\n   The payload of any IP packet that has a UDP\
    \ destination port of 514\n   MUST be treated as a syslog message.  There MAY\
    \ be differences\n   between the format of an originally transmitted syslog message\
    \ and\n   the format of a relayed message.  In essence, it is RECOMMENDED to\n\
    \   transmit a syslog message in the format specified in this document,\n   but\
    \ it is not required.  If a relay is able to recognize the message\n   as adhering\
    \ to that format then it MUST retransmit the message\n   without making any changes\
    \ to it.  However, if a relay receives a\n   message but cannot discern the proper\
    \ implementation of the format,\n   it is REQUIRED to modify the message so that\
    \ it conforms to that\n   format before it retransmits it.  Section 4.1 will describe\
    \ the\n   RECOMMENDED format for syslog messages.  Section 4.2 will describe\n\
    \   the requirements for originally transmitted messages and Section 4.3\n   will\
    \ describe the requirements for relayed messages.\n"
- title: 4.1 syslog Message Parts
  contents:
  - "4.1 syslog Message Parts\n   The full format of a syslog message seen on the\
    \ wire has three\n   discernable parts.  The first part is called the PRI, the\
    \ second part\n   is the HEADER, and the third part is the MSG.  The total length\
    \ of\n   the packet MUST be 1024 bytes or less.  There is no minimum length of\n\
    \   the syslog message although sending a syslog packet with no contents\n   is\
    \ worthless and SHOULD NOT be transmitted.\n"
- title: 4.1.1 PRI Part
  contents:
  - "4.1.1 PRI Part\n   The PRI part MUST have three, four, or five characters and\
    \ will be\n   bound with angle brackets as the first and last characters.  The\
    \ PRI\n   part starts with a leading \"<\" ('less-than' character), followed by\
    \ a\n   number, which is followed by a \">\" ('greater-than' character). The\n\
    \   code set used in this part MUST be seven-bit ASCII in an eight-bit\n   field\
    \ as described in RFC 2234 [2].  These are the ASCII codes as\n   defined in \"\
    USA Standard Code for Information Interchange\" [3].  In\n   this, the \"<\" character\
    \ is defined as the Augmented Backus-Naur Form\n   (ABNF) %d60, and the \">\"\
    \ character has ABNF value %d62.  The number\n   contained within these angle\
    \ brackets is known as the Priority value\n   and represents both the Facility\
    \ and Severity as described below.\n   The Priority value consists of one, two,\
    \ or three decimal integers\n   (ABNF DIGITS) using values of %d48 (for \"0\"\
    ) through %d57 (for \"9\").\n   The Facilities and Severities of the messages\
    \ are numerically coded\n   with decimal values.  Some of the operating system\
    \ daemons and\n   processes have been assigned Facility values.  Processes and\
    \ daemons\n   that have not been explicitly assigned a Facility may use any of\
    \ the\n   \"local use\" facilities or they may use the \"user-level\" Facility.\n\
    \   Those Facilities that have been designated are shown in the following\n  \
    \ table along with their numerical code values.\n       Numerical            \
    \ Facility\n          Code\n           0             kernel messages\n       \
    \    1             user-level messages\n           2             mail system\n\
    \           3             system daemons\n           4             security/authorization\
    \ messages (note 1)\n           5             messages generated internally by\
    \ syslogd\n           6             line printer subsystem\n           7     \
    \        network news subsystem\n           8             UUCP subsystem\n   \
    \        9             clock daemon (note 2)\n          10             security/authorization\
    \ messages (note 1)\n          11             FTP daemon\n          12       \
    \      NTP subsystem\n          13             log audit (note 1)\n          14\
    \             log alert (note 1)\n          15             clock daemon (note\
    \ 2)\n          16             local use 0  (local0)\n          17           \
    \  local use 1  (local1)\n          18             local use 2  (local2)\n   \
    \       19             local use 3  (local3)\n          20             local use\
    \ 4  (local4)\n          21             local use 5  (local5)\n          22  \
    \           local use 6  (local6)\n          23             local use 7  (local7)\n\
    \           Table 1.  syslog Message Facilities\n        Note 1 - Various operating\
    \ systems have been found to utilize\n           Facilities 4, 10, 13 and 14 for\
    \ security/authorization,\n           audit, and alert messages which seem to\
    \ be similar.\n        Note 2 - Various operating systems have been found to utilize\n\
    \           both Facilities 9 and 15 for clock (cron/at) messages.\n   Each message\
    \ Priority also has a decimal Severity level indicator.\n   These are described\
    \ in the following table along with their numerical\n   values.\n        Numerical\
    \         Severity\n          Code\n           0       Emergency: system is unusable\n\
    \           1       Alert: action must be taken immediately\n           2    \
    \   Critical: critical conditions\n           3       Error: error conditions\n\
    \           4       Warning: warning conditions\n           5       Notice: normal\
    \ but significant condition\n           6       Informational: informational messages\n\
    \           7       Debug: debug-level messages\n           Table 2. syslog Message\
    \ Severities\n   The Priority value is calculated by first multiplying the Facility\n\
    \   number by 8 and then adding the numerical value of the Severity. For\n   example,\
    \ a kernel message (Facility=0) with a Severity of Emergency\n   (Severity=0)\
    \ would have a Priority value of 0.  Also, a \"local use 4\"\n   message (Facility=20)\
    \ with a Severity of Notice (Severity=5) would\n   have a Priority value of 165.\
    \  In the PRI part of a syslog message,\n   these values would be placed between\
    \ the angle brackets as <0> and\n   <165> respectively.  The only time a value\
    \ of \"0\" will follow the \"<\"\n   is for the Priority value of \"0\". Otherwise,\
    \ leading \"0\"s MUST NOT be\n   used.\n"
- title: 4.1.2 HEADER Part of a syslog Packet
  contents:
  - "4.1.2 HEADER Part of a syslog Packet\n   The HEADER part contains a timestamp\
    \ and an indication of the\n   hostname or IP address of the device.  The HEADER\
    \ part of the syslog\n   packet MUST contain visible (printing) characters.  The\
    \ code set used\n   MUST also be seven-bit ASCII in an eight-bit field like that\
    \ used in\n   the PRI part.  In this code set, the only allowable characters are\n\
    \   the ABNF VCHAR values (%d33-126) and spaces (SP value %d32).\n   The HEADER\
    \ contains two fields called the TIMESTAMP and the HOSTNAME.\n   The TIMESTAMP\
    \ will immediately follow the trailing \">\" from the PRI\n   part and single\
    \ space characters MUST follow each of the TIMESTAMP\n   and HOSTNAME fields.\
    \  HOSTNAME will contain the hostname, as it knows\n   itself.  If it does not\
    \ have a hostname, then it will contain its own\n   IP address.  If a device has\
    \ multiple IP addresses, it has usually\n   been seen to use the IP address from\
    \ which the message is\n   transmitted.  An alternative to this behavior has also\
    \ been seen.  In\n   that case, a device may be configured to send all messages\
    \ using a\n   single source IP address regardless of the interface from which\
    \ the\n   message is sent.  This will provide a single consistent HOSTNAME for\n\
    \   all messages sent from a device.\n   The TIMESTAMP field is the local time\
    \ and is in the format of \"Mmm dd\n   hh:mm:ss\" (without the quote marks) where:\n\
    \         Mmm is the English language abbreviation for the month of the\n    \
    \     year with the first character in uppercase and the other two\n         characters\
    \ in lowercase.  The following are the only acceptable\n         values:\n   \
    \      Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct, Nov, Dec\n         dd\
    \ is the day of the month.  If the day of the month is less\n         than 10,\
    \ then it MUST be represented as a space and then the\n         number.  For example,\
    \ the 7th day of August would be\n         represented as \"Aug  7\", with two\
    \ spaces between the \"g\" and\n         the \"7\".\n         hh:mm:ss is the\
    \ local time.  The hour (hh) is represented in a\n         24-hour format.  Valid\
    \ entries are between 00 and 23,\n         inclusive.  The minute (mm) and second\
    \ (ss) entries are between\n         00 and 59 inclusive.\n   A single space character\
    \ MUST follow the TIMESTAMP field.\n   The HOSTNAME field will contain only the\
    \ hostname, the IPv4 address,\n   or the IPv6 address of the originator of the\
    \ message.  The preferred\n   value is the hostname.  If the hostname is used,\
    \ the HOSTNAME field\n   MUST contain the hostname of the device as specified\
    \ in STD 13 [4].\n   It should be noted that this MUST NOT contain any embedded\
    \ spaces.\n   The Domain Name MUST NOT be included in the HOSTNAME field.  If\
    \ the\n   IPv4 address is used, it MUST be shown as the dotted decimal notation\n\
    \   as used in STD 13 [5].  If an IPv6 address is used, any valid\n   representation\
    \ used in RFC 2373 [6] MAY be used.  A single space\n   character MUST also follow\
    \ the HOSTNAME field.\n"
- title: 4.1.3 MSG Part of a syslog Packet
  contents:
  - "4.1.3 MSG Part of a syslog Packet\n   The MSG part will fill the remainder of\
    \ the syslog packet.  This will\n   usually contain some additional information\
    \ of the process that\n   generated the message, and then the text of the message.\
    \  There is no\n   ending delimiter to this part.  The MSG part of the syslog\
    \ packet\n   MUST contain visible (printing) characters.  The code set\n   traditionally\
    \ and most often used has also been seven-bit ASCII in an\n   eight-bit field\
    \ like that used in the PRI and HEADER parts.  In this\n   code set, the only\
    \ allowable characters are the ABNF VCHAR values\n   (%d33-126) and spaces (SP\
    \ value %d32).  However, no indication of the\n   code set used within the MSG\
    \ is required, nor is it expected.  Other\n   code sets MAY be used as long as\
    \ the characters used in the MSG are\n   exclusively visible characters and spaces\
    \ similar to those described\n   above.  The selection of a code set used in the\
    \ MSG part SHOULD be\n   made with thoughts of the intended receiver.  A message\
    \ containing\n   characters in a code set that cannot be viewed or understood\
    \ by a\n   recipient will yield no information of value to an operator or\n  \
    \ administrator looking at it.\n   The MSG part has two fields known as the TAG\
    \ field and the CONTENT\n   field.  The value in the TAG field will be the name\
    \ of the program or\n   process that generated the message.  The CONTENT contains\
    \ the details\n   of the message.  This has traditionally been a freeform message\
    \ that\n   gives some detailed information of the event.  The TAG is a string\
    \ of\n   ABNF alphanumeric characters that MUST NOT exceed 32 characters.  Any\n\
    \   non-alphanumeric character will terminate the TAG field and will be\n   assumed\
    \ to be the starting character of the CONTENT field.  Most\n   commonly, the first\
    \ character of the CONTENT field that signifies the\n   conclusion of the TAG\
    \ field has been seen to be the left square\n   bracket character (\"[\"), a colon\
    \ character (\":\"), or a space\n   character.  This is explained in more detail\
    \ in Section 5.3.\n"
- title: 4.2 Original syslog Packets Generated by a Device
  contents:
  - "4.2 Original syslog Packets Generated by a Device\n   There are no set requirements\
    \ on the contents of the syslog packet as\n   it is originally sent from a device.\
    \  It should be reiterated here\n   that the payload of any IP packet destined\
    \ to UDP port 514 MUST be\n   considered to be a valid syslog message.  It is,\
    \ however, RECOMMENDED\n   that the syslog packet have all of the parts described\
    \ in Section 4.1\n   - PRI, HEADER and MSG - as this enhances readability by the\
    \ recipient\n   and eliminates the need for a relay to modify the message.\n \
    \  For implementers that do choose to construct syslog messages with the\n   RECOMMENDED\
    \ format, the following guidance is offered.\n         If the originally formed\
    \ message has a TIMESTAMP in the HEADER\n         part, then it SHOULD be the\
    \ local time of the device within its\n         timezone.\n         If the originally\
    \ formed message has a HOSTNAME field, then it\n         will contain the hostname\
    \ as it knows itself.  If it does not\n         have a hostname, then it will\
    \ contain its own IP address.\n         If the originally formed message has a\
    \ TAG value, then that\n         will be the name of the program or process that\
    \ generated the\n         message.\n"
- title: 4.3 Relayed syslog Packets
  contents:
  - "4.3 Relayed syslog Packets\n   When a relay receives a packet, it will check\
    \ for a valid PRI.  If\n   the first character is not a less-than sign, the relay\
    \ MUST assume\n   that the packet does not contain a valid PRI.  If the 3rd, 4th,\
    \ or\n   5th character is not a right angle bracket character, the relay again\n\
    \   MUST assume that the PRI was not included in the original message.\n   If\
    \ the relay does find a valid PRI part then it must check for a\n   valid TIMESTAMP\
    \ in the HEADER part.  From these rules, there will be\n   three general cases\
    \ of received messages.  Table 3 gives the general\n   characteristics of these\
    \ cases and lists the subsequent section of\n   this document that describes the\
    \ handling of that case.\n              Case                                 \
    \        Section\n         Valid PRI and TIMESTAMP                           \
    \ 4.3.1\n         Valid PRI but no TIMESTAMP or invalid TIMESTAMP    4.3.2\n \
    \        No PRI or unidentifiable PRI                       4.3.3\n          \
    \    Table 3. Cases of Received syslog Messages\n"
- title: 4.3.1 Valid PRI and TIMESTAMP
  contents:
  - "4.3.1 Valid PRI and TIMESTAMP\n   If the relay does find a valid PRI and a valid\
    \ TIMESTAMP, then it\n   will check its internal configuration.  Relays MUST be\
    \ configured to\n   forward syslog packets on the basis of their Priority value.\
    \  If the\n   relay finds that it is configured to forward the received packet,\n\
    \   then it MUST do so without making any changes to the packet.  To\n   emphasize\
    \ the point one more time, it is for this reason that it is\n   RECOMMENDED that\
    \ the syslog message originally transmitted adhere to\n   the format described\
    \ in Section 4.1.\n   It should be noted here that the message receiver does not\
    \ need to\n   validate the time in the TIMESTAMP field.  The assumption may be\
    \ made\n   that a device whose date has not been correctly set will still have\n\
    \   the ability to send valid syslog messages.  Additionally, the relay\n   does\
    \ not need to validate that the value in the HOSTNAME field\n   matches the hostname\
    \ or IP address of the device sending the message.\n   A reason for this behavior\
    \ may be found in Section 4.1.2.\n"
- title: 4.3.2 Valid PRI but no TIMESTAMP or invalid TIMESTAMP
  contents:
  - "4.3.2 Valid PRI but no TIMESTAMP or invalid TIMESTAMP\n   If a relay does not\
    \ find a valid TIMESTAMP in a received syslog\n   packet, then it MUST add a TIMESTAMP\
    \ and a space character\n   immediately after the closing angle bracket of the\
    \ PRI part.  It\n   SHOULD additionally add a HOSTNAME and a space character after\
    \ the\n   TIMESTAMP.  These fields are described here and detailed in Section\n\
    \   4.1.2.  The remainder of the received packet MUST be treated as the\n   CONTENT\
    \ field of the MSG and appended.  Since the relay would have no\n   way to determine\
    \ the originating process from the device that\n   originated the message, the\
    \ TAG value cannot be determined and will\n   not be included.\n   The TIMESTAMP\
    \ will be the current local time of the relay.\n   The HOSTNAME will be the name\
    \ of the device, as it is known by the\n   relay.  If the name cannot be determined,\
    \ the IP address of the\n   device will be used.\n   If the relay adds a TIMESTAMP,\
    \ or a TIMESTAMP and HOSTNAME, after the\n   PRI part, then it MUST check that\
    \ the total length of the packet is\n   still 1024 bytes or less.  If the packet\
    \ has been expanded beyond\n   1024 bytes, then the relay MUST truncate the packet\
    \ to be 1024 bytes.\n   This may cause the loss of vital information from the\
    \ end of the\n   original packet.  It is for this reason that it is RECOMMENDED\
    \ that\n   the PRI and HEADER parts of originally generated syslog packets\n \
    \  contain the values and fields documented in Section 4.1.\n"
- title: 4.3.3 No PRI or Unidentifiable PRI
  contents:
  - "4.3.3 No PRI or Unidentifiable PRI\n   If the relay receives a syslog message\
    \ without a PRI, or with an\n   unidentifiable PRI, then it MUST insert a PRI\
    \ with a Priority value\n   of 13 as well as a TIMESTAMP as described in Section\
    \ 4.3.2.  The\n   relay SHOULD also insert a HOSTNAME as described in Section\
    \ 4.3.2.\n   The entire contents of the received packet will be treated as the\n\
    \   CONTENT of the relayed MSG and appended.\n   An example of an unidentifiable\
    \ PRI would be \"<00>\", without the\n   double quotes.  It may be that these\
    \ are the first 4 characters of\n   the message.  To continue this example, if\
    \ a relay does receive a\n   syslog message with the first four characters of\
    \ \"<00>\", then it will\n   consult its configuration.  If it is configured to\
    \ forward syslog\n   messages with a Priority value of 13 to another relay or\
    \ collector,\n   then it MUST modify the packet as described above.  The specifics\
    \ of\n   doing this, including the RECOMMENDED insertion of the HOSTNAME, are\n\
    \   given below.\n   Originally received message\n     <00>...\n   Relayed message\n\
    \     <13>TIMESTAMP HOSTNAME <00>...\n   If the relay adds a TIMESTAMP, or a TIMESTAMP\
    \ and HOSTNAME, after the\n   PRI part, then it MUST check that the total length\
    \ of the packet is\n   still 1024 bytes or less.  If the packet has been expanded\
    \ beyond\n   1024 bytes, then the relay MUST truncate the packet to be 1024 bytes.\n\
    \   This may cause the loss of vital information from the end of the\n   original\
    \ packet.  It is for this reason that it is RECOMMENDED that\n   the PRI and HEADER\
    \ parts of originally generated syslog packets\n   contain the values and fields\
    \ documented in Section 4.1.\n"
- title: 5. Conventions
  contents:
  - "5. Conventions\n   Although Section 4 of this document specifies all requirements\
    \ for\n   the syslog protocol format and contents, certain conventions have\n\
    \   come about over time for the inclusion of additional information\n   within\
    \ the syslog message.  It must be plainly stated that these\n   items are not\
    \ mandated but may be considered by implementers for\n   completeness and to give\
    \ the recipient some additional clues of their\n   origin and nature.\n"
- title: 5.1 Dates and Times
  contents:
  - "5.1 Dates and Times\n   It has been found that some network administrators like\
    \ to archive\n   their syslog messages over long periods of time.  It has been\
    \ seen\n   that some original syslog messages contain a more explicit time stamp\n\
    \   in which a 2 character or 4 character year field immediately follows\n   the\
    \ space terminating the TIMESTAMP.  This is not consistent with the\n   original\
    \ intent of the order and format of the fields.  If\n   implementers wish to contain\
    \ a more specific date and time stamp\n   within the transmitted message, it should\
    \ be within the CONTENT\n   field.  Implementers may wish to utilize the ISO 8601\
    \ [7] date and\n   time formats if they want to include more explicit date and\
    \ time\n   information.\n   Additional methods to address this desire for long-term\
    \ archiving\n   have been proposed and some have been successfully implemented.\
    \  One\n   such method is that the network administrators may choose to modify\n\
    \   the messages stored on their collectors.  They may run a simple\n   script\
    \ to add the year, and any other information, to each stored\n   record.  Alternatively,\
    \ the script may replace the stored time with a\n   format more appropriate for\
    \ the needs of the network administrators.\n   Another alternative has been to\
    \ insert a record into the file that\n   contains the current year.  By association\
    \ then, all other records\n   near that informative record should have been received\
    \ in that same\n   year.  Neither of these however, addresses the issue of associating\
    \ a\n   correct timezone with each record.\n"
- title: 5.2 Domain Name and Address
  contents:
  - "5.2 Domain Name and Address\n   To readily identify the device that originated\
    \ the message, it may be\n   a good practice to include its fully qualified domain\
    \ name (FQDN) and\n   its IP address within the CONTENT field.  Traditionally,\
    \ however,\n   only the hostname has been included in the HOSTNAME field.\n"
- title: 5.3 Originating Process Information
  contents:
  - "5.3 Originating Process Information\n   It has also been considered to be a good\
    \ practice to include some\n   information about the process on the device that\
    \ generated the\n   message - if that concept exists.  This is usually the process\
    \ name\n   and process id (often known as the \"pid\") for robust operating\n\
    \   systems.  The process name is commonly displayed in the TAG field.\n   Quite\
    \ often, additional information is included at the beginning of\n   the CONTENT\
    \ field.  The format of \"TAG[pid]:\" - without the quote\n   marks - is common.\
    \  The left square bracket is used to terminate the\n   TAG field in this case\
    \ and is then the first character in the CONTENT\n   field.  If the process id\
    \ is immaterial, it may be left off.\n   In that case, a colon and a space character\
    \ usually follow the TAG.\n   This would be displayed as \"TAG: \" without the\
    \ quotes.  In that case,\n   the colon is the first character in the CONTENT field.\n"
- title: 5.4 Examples
  contents:
  - "5.4 Examples\n   As examples, these are valid messages as they may be observed\
    \ on the\n   wire between two devices.  In the following examples, each message\n\
    \   has been indented, with line breaks inserted in this document for\n   readability.\n\
    \        Example 1\n        <34>Oct 11 22:14:15 mymachine su: 'su root' failed\
    \ for lonvick\n        on /dev/pts/8\n   This example shows an authentication\
    \ error in an attempt to acquire\n   additional privileges.  It also shows the\
    \ command attempted and the\n   user attempting it.  This was recorded as an original\
    \ message from\n   the device called mymachine.  A relay receiving this would\
    \ not make\n   any changes before sending it along as it contains a properly\n\
    \   formatted PRI part and TIMESTAMP field in the HEADER part.  The TAG\n   value\
    \ in this example is the process \"su\".  The colon has terminated\n   the TAG\
    \ field and is the first character of the CONTENT field.  In\n   this case, the\
    \ process id (pid) would be considered transient and\n   anyone looking at this\
    \ syslog message would gain no useful\n   information from knowing the pid.  It\
    \ has not been included so the\n   first two characters of the CONTENT field are\
    \ the colon and a space\n   character.\n        Example 2\n        Use the BFG!\n\
    \   While this is a valid message, it has extraordinarily little useful\n   information.\
    \  This message does not have any discernable PRI part. It\n   does not contain\
    \ a timestamp or any indication of the source of the\n   message.  If this message\
    \ is stored on paper or disk, subsequent\n   review of the message will not yield\
    \ anything of value.\n   This example is obviously an original message from a\
    \ device.  A relay\n   MUST make changes to the message as described in Section\
    \ 4.3 before\n   forwarding it.  The resulting relayed message is shown below.\n\
    \        <13>Feb  5 17:32:18 10.0.0.99 Use the BFG!\n   In this relayed message,\
    \ the entire message has been treated as the\n   CONTENT portion of the MSG part.\
    \  First, a valid PRI part has been\n   added using the default priority value\
    \ of 13.  Next, a TIMESTAMP has\n   been added along with a HOSTNAME in the HEADER\
    \ part.  Subsequent\n   relays will not make any further changes to this message.\
    \  It should\n   be noted in this example that the day of the month is less than\
    \ 10.\n   Since single digits in the date (5 in this case) are preceded by a\n\
    \   space in the TIMESTAMP format, there are two spaces following the\n   month\
    \ in the TIMESTAMP before the day of the month.  Also, the relay\n   appears to\
    \ have no knowledge of the host name of the device sending\n   the message so\
    \ it has inserted the IPv4 address of the device into\n   the HOSTNAME field.\n\
    \        Example 3\n         <165>Aug 24 05:34:00 CST 1987 mymachine myproc[10]:\
    \ %% It's\n         time to make the do-nuts.  %%  Ingredients: Mix=OK, Jelly=OK\
    \ #\n         Devices: Mixer=OK, Jelly_Injector=OK, Frier=OK # Transport:\n  \
    \       Conveyer1=OK, Conveyer2=OK # %%\n   This message does have a valid PRI\
    \ part with a Priority value\n   indicating that it came from a locally defined\
    \ facility (local4) with\n   a severity of Notice.  The HEADER part has a proper\
    \ TIMESTAMP field\n   in the message.  A relay will not modify this message before\
    \ sending\n   it.  However, the HOSTNAME and TAG fields are not consistent with\
    \ the\n   definitions in Section 4.  The HOSTNAME field would be construed to\n\
    \   be \"CST\" and the beginning of the MSG part would be \"1987\".\n   It should\
    \ be noted that the information contained in the CONTENT of\n   this example is\
    \ not telemetry data, nor is it supervisory control or\n   data acquisition information.\
    \  Due to the security concerns listed in\n   Section 6 of this document, information\
    \ of that nature should\n   probably not be conveyed across this protocol.\n \
    \       Example 4\n         <0>1990 Oct 22 10:52:01 TZ-6 scapegoat.dmz.example.org\
    \ 10.1.2.3\n         sched[0]: That's All Folks!\n   This example has a lot of\
    \ extraneous information throughout.  A human\n   or sufficiently adaptable automated\
    \ parser would be able to determine\n   the date and time information as well\
    \ as a fully qualified domain\n   name (FQDN) [4] and IP address.  The information\
    \ about the nature of\n   the event is, however, limited.  Due to the indicated\
    \ severity of the\n   event, the process may not have been able to gather or send\
    \ anything\n   more informative.  It may have been fortunate to have generated\
    \ and\n   sent this message at all.\n   This example is obviously an original\
    \ message from a device.  Since\n   the first field in the HEADER part is not\
    \ a TIMESTAMP in the format\n   defined in Section 4.1.2, it MUST be modified\
    \ by a relay.  A relay\n   will add a TIMESTAMP and SHOULD add a HOSTNAME as follows\
    \ and will\n   treat the entire received packet after the PRI part from the original\n\
    \   packet as the CONTENT field of the new packet.  The value used in the\n  \
    \ HOSTNAME field is only the hostname without the domain name as it is\n   known\
    \ by the relay.  A TAG value will not be added to the relayed\n   packet.  While\
    \ the inclusion of the domain name and IPv4 address in\n   the original message\
    \ is a noble endeavor, it is not consistent with\n   the use of the field as described\
    \ in Section 4.1.2.\n         <0>Oct 22 10:52:12 scapegoat 1990 Oct 22 10:52:01\
    \ TZ-6\n         scapegoat.dmz.example.org 10.1.2.3 sched[0]: That's All Folks!\n"
- title: 6. Security Considerations
  contents:
  - "6. Security Considerations\n   An odor may be considered to be a message that\
    \ does not require any\n   acknowledgement.  People tend to avoid bad odors but\
    \ are drawn to\n   odors that they associate with good food.  The acknowledgement\
    \ of the\n   receipt of the odor or scent is not required and indeed it may be\
    \ the\n   height of discretion to totally ignore some odors.  On the other\n \
    \  hand, it is usually considered good civility to acknowledge the\n   prowess\
    \ of the cook merely from the ambiance wafting from the\n   kitchen.  Similarly,\
    \ various species have been found to utilize odors\n   to attract mates.  One\
    \ species of moth uses this scent to find each\n   other.  However, it has been\
    \ found that bolas spiders can mimic the\n   odor of the female moths of this\
    \ species.  This scent will then\n   attract male moths, which will follow it\
    \ with the expectation of\n   finding a mate.  Instead, when they arrive at the\
    \ source of the\n   scent, they will be eaten [8].  This is a case of a false\
    \ message\n   being sent out with inimical intent.\n   In its local use, the syslog\
    \ process places event notification\n   messages into files on that system.  This\
    \ relies upon the integrity\n   of the system for the protection of the messages.\
    \  The subsequent\n   configuration of the syslog process to use the syslog protocol\
    \ to\n   transport the messages to a remote collector was an extension of the\n\
    \   delivery of event notification messages and it exhibits the same\n   trust\
    \ of the network.  There are several security consequences of the\n   fundamental\
    \ simplicity of syslog and there are some concerns about\n   the applicability\
    \ of this protocol in situations that require robust\n   delivery.  Along the\
    \ lines of the analogy, computer event messages\n   may be sent accidentally,\
    \ erroneously and even maliciously. At the\n   time of this writing, however,\
    \ there have not been any reports of any\n   networked device consuming any other\
    \ device.\n"
- title: 6.1 Packet Parameters
  contents:
  - "6.1 Packet Parameters\n   As was described above, the message length MUST NOT\
    \ exceed 1024\n   bytes.  Attacks have seen where syslog messages are sent to\
    \ a\n   receiver that have message lengths greater than 1024 bytes.  In some\n\
    \   older versions of syslog, the receipt of syslog packets that had a\n   message\
    \ greater than 1024 bytes caused problems.  syslog message\n   receivers must\
    \ not malfunction upon the receipt of packets where the\n   message length is\
    \ greater than 1024 bytes.  Various behaviors have\n   been seen on receivers\
    \ that do receive messages greater than 1024\n   bytes.  Some have been seen to\
    \ log the entire contents of the\n   message, while others have been seen to log\
    \ only portions of the\n   message.  Still others have been known to discard the\
    \ message\n   altogether.  Devices MUST NOT retransmit messages whose received\n\
    \   length exceeds 1024 bytes.\n   Similarly, the receiver must rigidly enforce\
    \ the correctness of the\n   message body.  syslog collectors must not malfunction\
    \ if received\n   messages do not have the less-than and greater-than characters\
    \ around\n   a valid Priority value.  They MUST treat these messages as the\n\
    \   unformatted CONTENT as was described in Section 4.3.3 if they relay\n   it.\n\
    \   Also, received messages must contain printable text in the message as\n  \
    \ was described throughout Section 4.  Devices must not malfunction if\n   they\
    \ receive a message containing characters other than the\n   characters described\
    \ above.\n"
- title: 6.2 Message Authenticity
  contents:
  - "6.2 Message Authenticity\n   The syslog delivery mechanism does not strongly\
    \ associate the message\n   with the message sender.  The receiver of that packet\
    \ will not be\n   able to ascertain that the message was indeed sent from the\
    \ reported\n   sender, or if the packet was sent from another device.  It should\
    \ be\n   noted here that the message receiver does not need to verify that the\n\
    \   HOSTNAME in the HEADER part match the name of the IP address\n   contained\
    \ in the Source Address field of the IP packet.\n"
- title: 6.2.1 Authentication Problems
  contents:
  - "6.2.1 Authentication Problems\n   One possible consequence of this behavior is\
    \ that a misconfigured\n   machine may send syslog messages to a collector representing\
    \ itself\n   as another machine.  The administrative staff may become confused\n\
    \   that the status of the supposed sender of the messages may not be\n   accurately\
    \ reflected in the received messages.  The administrators\n   may not be able\
    \ to readily discern that there are two or more\n   machines representing themselves\
    \ as the same machine.\n   It should also be noted that some cases of filling\
    \ the HOSTNAME field\n   in the HEADER part might only have local significance\
    \ and that may\n   only be ephemeral.  If the device had obtained an IP address\
    \ from a\n   DHCP pool, then any association between an identifier and an actual\n\
    \   source would not always hold true.  The inclusion of a fully\n   qualified\
    \ domain name in the CONTENT may give the administrators the\n   best chance of\
    \ identifying the source of each message if it can\n   always be associated with\
    \ an IP address or if it can always be\n   associated with a unique machine.\n"
- title: 6.2.2 Message Forgery
  contents:
  - "6.2.2 Message Forgery\n   Malicious exploits of this behavior have also been\
    \ noted.  An\n   attacker may transmit syslog messages (either from the machine\
    \ from\n   which the messages are purportedly sent or from any other machine)\
    \ to\n   a collector.  In one case, an attacker may hide the true nature of an\n\
    \   attack amidst many other messages.  As an example, an attacker may\n   start\
    \ generating forged messages indicating a problem on some\n   machine.  This may\
    \ get the attention of the system administrators who\n   will spend their time\
    \ investigating the alleged problem.  During this\n   time, the attacker may be\
    \ able to compromise a different machine, or\n   a different process on the same\
    \ machine.  Additionally, an attacker\n   may generate false syslog messages to\
    \ give untrue indications of\n   status or of events.  As an example, an attacker\
    \ may stop a critical\n   process on a machine, which may generate a notification\
    \ of exit.  The\n   attacker may subsequently generate a forged notification that\
    \ the\n   process had been restarted.  The system administrators may accept\n\
    \   that misinformation and not verify that the process had indeed been\n   restarted.\n"
- title: 6.3 Sequenced Delivery
  contents:
  - "6.3 Sequenced Delivery\n   As a general rule, the forensics of a network anomaly\
    \ rely upon\n   reconstructing the sequence of events.  In a perfect world, the\n\
    \   messages would be received on the syslog collector in the order of\n   their\
    \ generation from the other devices and anyone looking at these\n   records would\
    \ have an accurate picture of the sequence of events.\n   Unfortunately, the syslog\
    \ process and protocol do not ensure ordered\n   delivery.  This section details\
    \ some of the problems that may be\n   encountered from this.\n"
- title: 6.3.1 Single Source to a Destination
  contents:
  - "6.3.1 Single Source to a Destination\n   The syslog records are usually presented\
    \ (placed in a file, displayed\n   on the console, etc.) in the order in which\
    \ they are received.  This\n   is not always in accordance with the sequence in\
    \ which they were\n   generated.  As they are transported across an IP network,\
    \ some out of\n   order receipt should be expected.  This may lead to some confusion\
    \ as\n   messages may be received that would indicate that a process has\n   stopped\
    \ before it was started.  This may be somewhat rectified if the\n   originating\
    \ process had timestamped or numbered each of the messages\n   before transmission.\
    \  In this, the sending device should utilize an\n   authoritative time source.\
    \  It should be remembered, however, that\n   not all devices are capable of receiving\
    \ time updates, and not all\n   devices can timestamp their messages.\n"
- title: 6.3.2 Multiple Sources to a Destination
  contents:
  - "6.3.2 Multiple Sources to a Destination\n   In syslog, there is no concept of\
    \ unified event numbering.  Single\n   devices are free to include a sequence\
    \ number within the CONTENT but\n   that can hardly be coordinated between multiple\
    \ devices.  In such\n   cases, multiple devices may report that each one is sending\
    \ message\n   number one.  Again, this may be rectified somewhat if the sending\n\
    \   devices utilize a timestamp from an authoritative source in their\n   messages.\
    \  As has been noted, however, even messages from a single\n   device to a single\
    \ collector may be received out of order.  This\n   situation is compounded when\
    \ there are several devices configured to\n   send their syslog messages to a\
    \ single collector.  Messages from one\n   device may be delayed so the collector\
    \ receives messages from another\n   device first even though the messages from\
    \ the first device were\n   generated before the messages from the second.  If\
    \ there is no\n   timestamp or coordinated sequence number, then the messages\
    \ may be\n   presented in the order in which they were received which may give\
    \ an\n   inaccurate view of the sequence of actual events.\n"
- title: 6.3.3 Multiple Sources to Multiple Destinations
  contents:
  - "6.3.3 Multiple Sources to Multiple Destinations\n   The plethora of configuration\
    \ options available to the network\n   administrators may further skew the perception\
    \ of the order of\n   events.  It is possible to configure a group of devices\
    \ to send the\n   status messages -or other informative messages- to one collector,\n\
    \   while sending messages of relatively higher importance to another\n   collector.\
    \  Additionally, the messages may be sent to different files\n   on the same collector.\
    \  If the messages do not contain timestamps\n   from the source, it may be difficult\
    \ to order the messages if they\n   are kept in different places.  An administrator\
    \ may not be able to\n   determine if a record in one file occurred before or\
    \ after a record\n   in a different file.  This may be somewhat alleviated by\
    \ placing\n   marking messages with a timestamp into all destination files.  If\n\
    \   these have coordinated timestamps, then there will be some indication\n  \
    \ of the time of receipt of the individual messages.\n"
- title: 6.3.4 Replaying
  contents:
  - "6.3.4 Replaying\n   Without any sequence indication or timestamp, messages may\
    \ be\n   recorded and replayed at a later time.  An attacker may record a set\n\
    \   of messages that indicate normal activity of a machine.  At a later\n   time,\
    \ that attacker may remove that machine from the network and\n   replay the syslog\
    \ messages to the collector.  Even with a TIMESTAMP\n   field in the HEADER part,\
    \ an attacker may record the packets and\n   could simply modify them to reflect\
    \ the current time before\n   retransmitting them.  The administrators may find\
    \ nothing unusual in\n   the received messages and their receipt would falsely\
    \ indicate normal\n   activity of the machine.\n"
- title: 6.4 Reliable Delivery
  contents:
  - "6.4 Reliable Delivery\n   As there is no mechanism within either the syslog process\
    \ or the\n   protocol to ensure delivery, and since the underlying transport is\n\
    \   UDP, some messages may be lost.  They may either be dropped through\n   network\
    \ congestion, or they may be maliciously intercepted and\n   discarded.  The consequences\
    \ of the drop of one or more syslog\n   messages cannot be determined.  If the\
    \ messages are simple status\n   updates, then their non-receipt may either not\
    \ be noticed, or it may\n   cause an annoyance for the system operators.  On the\
    \ other hand, if\n   the messages are more critical, then the administrators may\
    \ not\n   become aware of a developing and potentially serious problem.\n   Messages\
    \ may also be intercepted and discarded by an attacker as a\n   way to hide unauthorized\
    \ activities.\n"
- title: 6.5 Message Integrity
  contents:
  - "6.5 Message Integrity\n   Besides being discarded, syslog messages may be damaged\
    \ in transit,\n   or an attacker may maliciously modify them.  In the case of\
    \ a packet\n   containing a syslog message being damaged, there are various\n\
    \   mechanisms built into the link layer as well as into the IP [9] and\n   UDP\
    \ protocols which may detect the damage.  An intermediary router\n   may discard\
    \ a damaged IP packet [10].  Damage to a UDP packet may be\n   detected by the\
    \ receiving UDP module, which may silently discard it.\n   In any case, the original\
    \ contents of the message will not be\n   delivered to the collector.  Additionally,\
    \ if an attacker is\n   positioned between the sender and collector of syslog\
    \ messages, they\n   may be able to intercept and modify those messages while\
    \ in-transit\n   to hide unauthorized activities.\n"
- title: 6.6 Message Observation
  contents:
  - "6.6 Message Observation\n   While there are no strict guidelines pertaining to\
    \ the event message\n   format, most syslog messages are generated in human readable\
    \ form\n   with the assumption that capable administrators should be able to\n\
    \   read them and understand their meaning.  Neither the syslog protocol\n   nor\
    \ the syslog application have mechanisms to provide confidentiality\n   of the\
    \ messages in transit.  In most cases passing clear-text\n   messages is a benefit\
    \ to the operations staff if they are sniffing\n   the packets off of the wire.\
    \  The operations staff may be able to\n   read the messages and associate them\
    \ with other events seen from\n   other packets crossing the wire to track down\
    \ and correct problems.\n   Unfortunately, an attacker may also be able to observe\
    \ the human-\n   readable contents of syslog messages.  The attacker may then\
    \ use the\n   knowledge gained from those messages to compromise a machine or\
    \ do\n   other damage.\n"
- title: 6.7 Message Prioritization and Differentiation
  contents:
  - "6.7 Message Prioritization and Differentiation\n   While the processes that create\
    \ the messages may signify the\n   importance of the events through the use of\
    \ the message Priority\n   value, there is no distinct association between this\
    \ value and the\n   importance of delivery of the packet.  As an example of this,\n\
    \   consider an application that generates two event messages.  The first\n  \
    \ is a normal status message but the second could be an important\n   message\
    \ denoting a problem with the process.  This second message\n   would have an\
    \ appropriately higher Severity value associated with the\n   importance of that\
    \ event.  If the operators had configured that both\n   of these messages be transported\
    \ to a syslog collector then they\n   would, in turn, be given to UDP for transmission.\
    \  Under normal\n   conditions, no distinction would be made between them and\
    \ they would\n   be transmitted in their order.\n   Again, under normal circumstances,\
    \ the receiver would accept syslog\n   messages as they are received.  If many\
    \ devices are transmitting\n   normal status messages, but one is transmitting\
    \ an important event\n   message, there is no inherent mechanism within the syslog\
    \ protocol to\n   prioritize the important message over the other messages.\n\
    \   On a case-by-case basis, device operators may find some way to\n   associate\
    \ the different levels with the quality of service\n   identifiers.  As an example,\
    \ the operators may elect to define some\n   linkage between syslog messages that\
    \ have a specific Priority value\n   with a specific value to be used in the IPv4\
    \ Precedence field [9],\n   the IPv6 Traffic Class octet [11], or the Differentiated\
    \ Services\n   field [12].  In the above example, the operators may have the ability\n\
    \   to associate the status message with normal delivery while\n   associating\
    \ the message indicating a problem with a high reliability,\n   low latency queue\
    \ as it goes through the network.  This would have\n   the affect of prioritizing\
    \ the essential messages before the normal\n   status messages.  Even with this\
    \ hop-by-hop prioritization, this\n   queuing mechanism could still lead to head\
    \ of line blocking on the\n   transmitting device as well as buffer starvation\
    \ on the receiving\n   device if there are many near-simultaneous messages being\
    \ sent or\n   received.  This behavior is not unique to syslog but is endemic\
    \ to\n   all operations that transmit messages serially.\n   There are security\
    \ concerns for this behavior.  Head of line blocking\n   of the transmission of\
    \ important event messages may relegate the\n   conveyance of important messages\
    \ behind less important messages.  If\n   the queue is cleared appropriately,\
    \ this may only add seconds to the\n   transmission of the important message.\
    \  On the other hand, if the\n   queue is not cleared, then important messages\
    \ may not be transmitted.\n   Also at the receiving side, if the syslog receiver\
    \ is suffering from\n   buffer starvation due to large numbers of messages being\
    \ received\n   near-simultaneously, important messages may be dropped\n   indiscriminately\
    \ along with other messages.  While these are problems\n   with the devices and\
    \ their capacities, the protocol security concern\n   is that there is no prioritization\
    \ of the relatively more important\n   messages over the less important messages.\n"
- title: 6.8 Misconfiguration
  contents:
  - "6.8 Misconfiguration\n   Since there is no control information distributed about\
    \ any messages\n   or configurations, it is wholly the responsibility of the network\n\
    \   administrator to ensure that the messages are actually going to the\n   intended\
    \ recipient.  Cases have been noted where devices were\n   inadvertently configured\
    \ to send syslog messages to the wrong\n   receiver.  In many cases, the inadvertent\
    \ receiver may not be\n   configured to receive syslog messages and it will probably\
    \ discard\n   them.  In certain other cases, the receipt of syslog messages has\n\
    \   been known to cause problems for the unintended recipient [13].  If\n   messages\
    \ are not going to the intended recipient, then they cannot be\n   reviewed or\
    \ processed.\n"
- title: 6.9 Forwarding Loop
  contents:
  - "6.9 Forwarding Loop\n   As it is shown in Figure 1, machines may be configured\
    \ to relay\n   syslog messages to subsequent relays before reaching a collector.\
    \ In\n   one particular case, an administrator found that he had mistakenly\n\
    \   configured two relays to forward messages with certain Priority\n   values\
    \ to each other.  When either of these machines either received\n   or generated\
    \ that type of message, it would forward it to the other\n   relay.  That relay\
    \ would, in turn, forward it back.  This cycle did\n   cause degradation to the\
    \ intervening network as well as to the\n   processing availability on the two\
    \ devices.  Network administrators\n   must take care to not cause such a death\
    \ spiral.\n"
- title: 6.10 Load Considerations
  contents:
  - "6.10 Load Considerations\n   Network administrators must take the time to estimate\
    \ the appropriate\n   size of the syslog receivers.  An attacker may perform a\
    \ Denial of\n   Service attack by filling the disk of the collector with false\n\
    \   messages.  Placing the records in a circular file may alleviate this\n   but\
    \ that has the consequence of not ensuring that an administrator\n   will be able\
    \ to review the records in the future. Along this line, a\n   receiver or collector\
    \ must have a network interface capable of\n   receiving all messages sent to\
    \ it.\n   Administrators and network planners must also critically review the\n\
    \   network paths between the devices, the relays, and the collectors.\n   Generated\
    \ syslog messages should not overwhelm any of the network\n   links.\n"
- title: 7. IANA Considerations
  contents:
  - "7. IANA Considerations\n   The syslog protocol has been assigned UDP port 514.\
    \  This port\n   assignment will be maintained by IANA exclusively for this protocol.\n\
    \   The syslog protocol provides for the definition of named attributes\n   to\
    \ indicate the Severity of each message and the Facility that\n   generated the\
    \ message as described in Section 4.  The name space\n   identifiers for these\
    \ attributes are defined as numbers.  The\n   protocol does not define the specific\
    \ assignment of the name space\n   for these numbers; the application developer\
    \ or system vendor is\n   allowed to define the attribute, its semantics, and\
    \ the associated\n   numbers.  This name space will not be controlled to prevent\n\
    \   collisions as systems are expected to use the same attributes,\n   semantics\
    \ and associated numbers to describe events that are deemed\n   similar even between\
    \ heterogeneous devices.\n"
- title: 8. Conclusion and Other Efforts
  contents:
  - "8. Conclusion and Other Efforts\n   The syslog protocol may be effectively used\
    \ to transport event\n   notification messages across a network.  In all cases,\
    \ it is\n   important that the syslog message receiver embody the principle of\n\
    \   \"be liberal in what you accept\".  It is highly recommended that the\n  \
    \ network operators who choose to use this understand the\n   characteristics\
    \ of the protocol and its security implications.\n   There have been attempts\
    \ in the past to standardize the format of the\n   syslog message.  The most notable\
    \ attempt culminated in a BOF at the\n   Fortieth Internet Engineering Task Force\
    \ meeting in 1997.  This was\n   the Universal Logging Protocol (ulp) BOF and\
    \ the minutes of their\n   meeting are on-line at the IETF Proceedings web site\
    \ [14].\n   Many good thoughts came from that effort and interested implementers\n\
    \   may want to find some of the notes or papers produced from that\n   effort.\n\
    \   At the time of this writing, efforts are underway to allow the usage\n   of\
    \ international character sets in applications that have been\n   traditionally\
    \ thought of as being text-only.  The HOSTNAME and\n   TIMESTAMP fields described\
    \ above are representative of this.  Also,\n   the entire CONTENT field has traditionally\
    \ been printing characters\n   and spaces in the code set known as US-ASCII. \
    \ It is hoped that the\n   proponents of these internationalization efforts will\
    \ find a suitable\n   way to allow the use of international character sets within\
    \ syslog\n   messages without being disruptive.  It should also be hoped that\n\
    \   implementers will allow for the future acceptance of additional code\n   sets\
    \ and that they may make appropriate plans.  Again, it must be\n   cautioned that\
    \ the simplicity of the existing system has been a\n   tremendous value to its\
    \ acceptance.  Anything that lessens that\n   simplicity may diminish that value.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   The following people provided content feedback during the\
    \ writing of\n   this document:\n         Jon Knight <J.P.Knight@lboro.ac.uk>\n\
    \         Magosanyi Arpad <mag@bunuel.tii.matav.hu>\n         Balazs Scheidler\
    \ <bazsi@balabit.hu>\n         Jon Callas <jon@counterpane.com>\n         Eliot\
    \ Lear <lear@cisco.com>\n         Petter Reinholdtsen <pere@hungry.com>\n    \
    \     Darren Reed <darrenr@reed.wattle.id.au>\n         Alfonso De Gregorio <dira@speedcom.it>\n\
    \         Eric Allman <eric@sendmail.com>\n         Andrew Ross <andrew@kiwi-enterprises.com>\n\
    \         George Maslyar <george.maslyar@primark.com>\n         Albert Mietus\
    \ <albert@ons-huis.net>\n         Russ Allbery <rra@stanford.edu>\n         Titus\
    \ D. Winters <titus@cs.hmc.edu>\n         Edwin P. Boon <Edwin.Boon@consul.com>\n\
    \         Jeroen M. Mostert <Jeroen.Mostert@consul.com>\n   Eric Allman is the\
    \ original inventor and author of the syslog daemon\n   and protocol.  The author\
    \ of this memo and the community at large\n   would like to express their appreciation\
    \ for this work and for the\n   usefulness that it has provided over the years.\n\
    \   A large amount of additional information about this de-facto standard\n  \
    \ operating system feature may usually be found in the syslog.conf file\n   as\
    \ well as in the man pages for syslog.conf, syslog, syslogd, and\n   logger, of\
    \ many Unix and Unix-like devices.\n"
- title: References
  contents:
  - "References\n   1  Postel, J., \"User Datagram Protocol\", STD 6, RFC 768, August\
    \ 1980.\n   2  Crocker, D. and P. Overell, \"Augmented BNF for Syntax\n      Specifications:\
    \ ABNF\", RFC 2234, November 1997.\n   3  USA Standard Code for Information Interchange,\
    \ USASI X3.4-1968\n   4  Mockapetris, P., \"Domain Names - Concepts and Facilities\"\
    , STD 13,\n      RFC 1034, November 1987.\n   5  Mockapetris, P., \"Domain names\
    \ - Implementation and\n      Specification\", STD 13, RFC 1035, November 1987.\n\
    \   6  Hinden, R. and S. Deering, \"IP Version 6 Addressing Architecture\",\n\
    \      RFC 2373, July 1998.\n   7  Data elements and interchange formats - Information\
    \ exchange -\n      Representation of dates and times, International Organization\
    \ for\n      Standardization, Reference number ISO 8601 : 1988 (E), 1988\n   8\
    \  Stowe, M., et al, \"Chemical Mimicry: Bolas Spiders Emit Components\n     \
    \ of Moth Prey Species Sex Pheromones\", Science, 1987\n   9  Postel, J., \"Internet\
    \ Protocol\", STD 5, RFC 791, September 1981.\n   10 Baker, F., \"Requirements\
    \ for IP Version 4 Routers\", RFC 1812, June\n      1995.\n   11 Deering, S. and\
    \ R. Hinden, \"Internet Protocol, Version 6 (IPv6)\n      Specification\", RFC\
    \ 2460, December 1998.\n   12 Nichols, K., Blake, S., Baker, F. and D. Black,\
    \ \"Definition of the\n      Differentiated Services Field (DS Field) in the IPv4\
    \ and IPv6\n      Headers\", RFC 2474, December 1998.\n   13 Cisco Systems Product\
    \ Security Incident Response Team (PSIRT),\n      \"Field Notice: Cisco IOS(r)\
    \ Syslog Crash\", January 11, 1999\n      http://www.cisco.com/warp/public/707/advisory.html\n\
    \   14 Walker, D., IETF Secretariat, \"Proceedings of the Fortieth\n      Internet\
    \ Engineering Task Force, Washington, DC, USA, December 8-\n      12, 1997\n \
    \     http://www.ietf.org/proceedings/97dec/index.html\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Chris Lonvick\n   Cisco Systems\n   12515 Research Blvd.\n\
    \   Austin, TX, USA\n   Phone:  +1.512.378.1182\n   EMail:  clonvick@cisco.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2001).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
