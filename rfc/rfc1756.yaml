- title: __initial_text__
  contents:
  - '                  REMOTE WRITE PROTOCOL - VERSION 1.0

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo defines an Experimental Protocol for the Internet\n\
    \   community.  This memo does not specify an Internet standard of any\n   kind.\
    \  Discussion and suggestions for improvement are requested.\n   Distribution\
    \ of this memo is unlimited.\n"
- title: 1. Background
  contents:
  - "1. Background\n   It is often convenient to use electronic communication somewhat\n\
    \   lighter than electronic mail.  Sometimes even the use of the talk(1)\n   *)\
    \ program seems like overkill.  We like to offer to user something\n   like UNIX\
    \ **) command write(1) ***) except that it can also pass\n   messages through\
    \ the network instead of the single host.\n   There have been few programs offering\
    \ this kind of service, but they\n   have either based on SUN-RPC protocol or\
    \ used a strictly undocumented\n   protocol.\n   This document describes a simple\
    \ Remote Write Protocol (RWP) that\n   should have been documented at least 10\
    \ years ago.  But late is\n   better than never.  Version number of the RWP protocol\
    \ in this\n   document is 1.0.\n"
- title: 2. Overview
  contents:
  - "2. Overview\n   RWP is a simple protocol that can be used to relay short messages\n\
    \   through the network to other users.  RWP looks pretty much like\n   Simple\
    \ Mail Transfer Protocol (SMTP) ****) though it is a bit more\n   complicated\
    \ due to the interactive nature of the RWP session.\n   The idea behind the RWP\
    \ session is that client program that is\n   relaying message to the host in which\
    \ the target user is logged in\n   opens the tcp or udp connection to the server\
    \ program running in the\n   target machine  Then the client gives the sender's\
    \ and recipient's\n   identification (usually login ids), actual message body\
    \ and tells the\n   server to deliver a message to the user.  On tcp-connection\
    \ server\n   returns a status from each action taken.  On udp-connection no\n\
    \   responses are sent.  RWP sessions through udp are implemented to\n   support\
    \ message broadcasting.\n   Message delivering methods are not defined within\
    \ this document, but\n   the basic method could be a simple write to users terminal.\
    \  This is\n   basically what UNIX command write(1) does.  Depending on server\n\
    \   implementation, the delivery method could be configurable personally\n   by\
    \ each user.\n"
- title: 3. Description
  contents:
  - "3. Description\n   Server program answers to each command submitted by a response.\
    \  All\n   responses have two parts: three number unique response code and a\n\
    \   short textual explanation of the response.  Also whenever the server\n   is\
    \ ready to accept new commands a notification is submitted to the\n   client.\n\
    \   There are three kinds of commands in RWP.  The first group is for\n   querying\
    \ a status of the server.  The second group is actual message\n   handling commands\
    \ and the last set of commands are for RWP session\n   control.\n   When the server\
    \ is ready to receive a command from the client, it\n   sends a message code 100\
    \ to the client.  This message is for example\n   as follows:\n              \
    \      100 Ready.\n    Server commands are as follows:\n    Status Query\n   \
    \     HELP    Gives a short help message that contains legal\n               \
    \ RWP commands.  Help lines have code 510.  Example RWP\n                implementation\
    \ *****) gives a following response to\n                HELP command:\n      \
    \              510 Valid commands are:\n                    510     BYE,    DATA,\
    \   HELP,   HELO,\n                    510     RSET,   SEND,   PROT,   QUIT,\n\
    \                    510     VRFY,   VER\n                    510     FROM senderlogin\n\
    \                    510     FHST senderhost\n                    510     TO \
    \  recipentlogin [tty]\n                    510     FWDS current_hop_count\n \
    \       HELO    Says hello to the server.  Server response to HELO\n         \
    \       command has code 500.  For example:\n                    500 Hello remote.host.\
    \  This is local.host speaking.\n        PROT    Asks the RWP protocol version\
    \ from the server.\n                Response code to PROT command is 502.  Protocol\n\
    \                version described in this document is RWP 1.0 and the\n     \
    \           response is as follows:\n                    502 RWP version 1.0.\n\
    \        VRFY    After the recipient of the message is set by to command\n   \
    \             described later, the possibility of message delivery\n         \
    \       can be queried by VRFY command.  If message can be\n                delivered\
    \ the response code is 108.  If message is\n                about to be forwarded\
    \ the response code is 110 and\n                message is either form:\n    \
    \                110 Recipient ok to forward.\n                or if the server\
    \ can tell the destination of the\n                forwarding:\n             \
    \       110 Recipient ok to forward <user@host.domain>.\n                Other\
    \ possible response codes are 669, 670, 671, 674\n                and 677 and\
    \ they all indicate that message delivery is\n                by one way or another\
    \ currently impossible.\n                Description of the codes is later in\
    \ this document.\n                After the SEND command the server may also give\n\
    \                autoreply from the remote user before the actual\n          \
    \      response code.  Autoreply lines are ones of code 300.\n        VER    \
    \ Asks the version of the server program.  Response code\n                to VER\
    \ command is 501 and the textual part of the\n                response is the\
    \ name and the version number of the RWP\n                server, for example:\n\
    \                    501 Rwrited version 1.0.\n    Message Handling:\n       \
    \ FROM senderlogin\n                Tells the server the identification information\
    \ of the\n                sender of the message.  Usually this id information\
    \ is\n                user's login id.  Response code to successful FROM\n   \
    \             command is 105, for example:\n                    105 Sender ok.\n\
    \        TO recipentlogin [tty]\n                Tells the server the identification\
    \ information of the\n                intended recipient of the message.  Usually\
    \ this id\n                information is user's login id.  If tty is submitted,\n\
    \                the message is delivered to that tty.  If tty is\n          \
    \      submitted between brackets '[]' the tty given is\n                treated\
    \ as a hint only.  Response code to successful\n                TO command is\
    \ 106.\n        FHST original.host [forwarder1.host forwarder2.host ...]\n   \
    \             Tells the server the host name that the message\n              \
    \  originates to and the path of the hosts that has\n                forwarded\
    \ the message.  The host name of the machine\n                that is currently\
    \ submitting the message to the server\n                should not be in the path\
    \ list.\n                This information is relevant if message is forwarded\n\
    \                and it is not originally coming from the host that is\n     \
    \           forwarding it.  Response code to successful FHST\n               \
    \ command is 111.\n        DATA    Tells the server to start receive the body\
    \ of the\n                message.  Response code to DATA command is 200, for\n\
    \                example:\n                200 Enter message.  Single dot '.'\
    \ on line terminates.\n                After response 200 the message lines are\
    \ submitted to\n                the server one after another.  Message is terminated\n\
    \                by the line that contains a single dot '.'.  The\n          \
    \      termination of the message is acknowledged by the\n                server\
    \ with the response code 107.  Server does not\n                notify client\
    \ about receiving the single message\n                lines.  If empty message\
    \ is submitted (i.e. single dot\n                is on the first line) the response\
    \ code is 672 and\n                DATA command only cancels possible previous\
    \ DATA\n                command.  Because of this all dots or at least dots\n\
    \                that are standing alone in the line have to be quoted.\n    \
    \    SEND    Sends the message.  If commands FROM, TO and DATA are\n         \
    \       successfully given before SEND command, the message is\n             \
    \   delivered to the target user.  If delivery is\n                successful\
    \ the response code is 103.  If message is\n                not delivered directly\
    \ to the target user but instead\n                forwarded to another host the\
    \ response code is 104.\n                Response codes 669, 670 and 671, 677\
    \ indicate an error\n                on message delivery and codes 673, 674, 675\
    \ indicate\n                that either command FROM, TO or DATA has not been\n\
    \                successfully given before SEND command.  After the\n        \
    \        SEND command the server may also give autoreply from\n              \
    \  the remote user before the actual response code.\n                Autoreply\
    \ lines are ones of code 300.\n        FWDS n  Tells the server that message has\
    \ been forwarded n\n                times.  If the server forwards the message\
    \ to the\n                another server, it increments the counter and tells\n\
    \                the remote server the current count of forwards.\n          \
    \      Response code to the FWDS command is 110 if n is less\n               \
    \ than the server specific forward limit.  If this limit\n                is exceeded\
    \ the response code is 676.  If the response\n                code is 676 the\
    \ client can either quit the session and\n                fail the message or\
    \ it can give the message to the\n                server despite the fact that\
    \ the forward limit is\n                exceeded.  If the message is given when\
    \ forward limit\n                is exceeded, the server tries to deliver it,\
    \ but does\n                not forward it to another server.  If forward count\
    \ is\n                given as -1, the message is considered as a autoreply\n\
    \                and never forwarded.\n    Session Control:\n        RSET    Resets\
    \ the RWP session.  FROM, TO and DATA -commands\n                that are given\
    \ before are canceled and they have to\n                be given again before\
    \ SEND command can be used.  Also\n                possible FWDS and FHST commands\
    \ are canceled.\n        BYE     Terminates the RWP session.  Server gives a response\n\
    \                code 101 and closes the connection.\n        QUIT    Is the synonym\
    \ to bye, but it's a lot more impolite.\n                Response code is however\
    \ 101 as in bye.\n    Server specific command:\n        QUOTE command\n      \
    \          Relay a command to the server.  If the QUOTE command\n            \
    \    is successfully completed response code 112 is\n                returned.\
    \  If QUOTE command is failed the response\n                code is 678.  If RWP\
    \ server doesn't recognize the\n                given QUOTE command the response\
    \ code is 679.\n                Currently reserved QUOTE commands are AGENT, CHARSET,\n\
    \                IDENT, KEY and KEYID.\n"
- title: 4. Response Codes
  contents:
  - "4. Response Codes\n   Here are all legal response codes of RWP server followed\
    \ by short\n   textual explanation.  Only the numeral codes are important and\
    \ texts\n   can contain practically anything, however in response code 110 there\n\
    \   is possibly useful information between '<' and '>' characters.  No\n   characters\
    \ '<' or '>' should be present in other responses.  Also\n   response 502 has\
    \ possibly interesting information about the RWP\n   protocol version the server\
    \ supports.\n    100 Ready.\n        The RWP server is ready to accept next command.\n\
    \    101 Goodbye.\n        The RWP server is closing connection.\n    103 Message\
    \ delivered.\n        The SEND command is successfully completed and the message\
    \ is\n        delivered directly to its destination.\n    104 Message forwarded.\n\
    \        The SEND command is completed and message is forwarded to the\n     \
    \   user.\n    105 Sender ok.\n        The FROM command successful.\n    106 Recipient\
    \ ok.\n        The TO command successful.\n    107 Message ok.\n        The DATA\
    \ command successful.\n    108 Recipient ok to send.\n        The VRFY command\
    \ successful and direct message delivery is\n        possible.\n    109 RSET ok.\n\
    \        The RWP server has received the RSET command and reset itself.\n    110\
    \ Ok to forward.\n        or\n    110 Ok to forward <user@host.domain>.\n    \
    \    The VRFY command successful and direct message delivery by\n        forwarding\
    \ is possible.  If response has also forwarding\n        address the client can\
    \ either forward the message itself or\n        give it to server for forwarding.\n\
    \    111 Original sender host ok.\n        The FHST command successful and original\
    \ sender host is set as\n        given by the client.\n    200 Enter message.\
    \  Single dot '.' on line terminates.\n        The RWP server is ready to receive\
    \ the message. Single dot on\n        message line terminates the message.\n \
    \   300 |I'm not in right now but I'll be back tomorrow\n    300 |at 8 o'clock\
    \ a.m.\n        Automatical response to the delivered message.  Every line of\n\
    \        this user defined reply message is delivered in its own 300\n       \
    \ line.  Response code 300 lines may appear only after SEND\n        command before\
    \ response code 103 (message delivered).  Client\n        receiving autoreply\
    \ 300 should show the text of the autoreply\n        to the user.  Actual autoreply\
    \ line begins after the '|'\n        -character in the line.\n    500 Hello remote.host.\
    \  This is local.host speaking.\n        Response to the HELO command.  This message\
    \ can also occur in\n        the beginning of the conversation without the VER\
    \ command and\n        it can be ignored.\n    501 Rwrited version X.X.\n    \
    \    Response to the VER command.  This message can also occur in\n        the\
    \ beginning of the conversation without the VER command and\n        it can be\
    \ ignored.\n    502 RWP version 1.0.\n        Response to the VER command.  This\
    \ message can also occur in\n        the beginning of the conversation without\
    \ the VER command and\n        it can be ignored.\n    510 Valid commands are:\n\
    \    510     BYE,    DATA,   HELP,   HELO,\n    510     RSET,   SEND,   PROT,\
    \   QUIT,\n    510     VRFY,   VER\n    510     FROM senderlogin\n    510    \
    \ FHST senderhost\n    510     TO   recipentlogin\n    510     FWDS current_hop_count\n\
    \        Response to the HELP command.\n    511 Information to the user.\n   \
    \     Server specific informational response.  These responses may\n        occur\
    \ anytime during the conversation.  The client can ignore\n        them.\n   \
    \ 512 Debug information to the user.\n        Server specific informational response.\
    \  Reserved for server\n        debugging.  These messages may occur anytime during\
    \ the\n        conversation.  The client can ignore them.\n    666 FATAL ERROR!\n\
    \        The RWP server got into the fatal error situation and is about\n    \
    \    to exit immediately.  Client programs are strongly encouraged\n        to\
    \ close the connection.\n    668 Syntax error.\n        The RWP server has received\
    \ an invalid command.\n    669 Permission denied.\n        The RWP server is unable\
    \ to deliver the message because the\n        target user has denied the send\
    \ permission.\n    670 User not logged in.\n        The RWP server is unable to\
    \ deliver the message because the\n        target user is not logged in.\n   \
    \ 671 No such user.\n        The RWP server is unable to deliver the message because\
    \ the\n        target user does not exist.  Error code 670 can be used to\n  \
    \      replace this message.\n    672 No message.\n        The DATA command is\
    \ terminated with empty message body.  No\n        SEND command can be executed\
    \ before a new DATA command is\n        given.\n    673 FROM command required.\n\
    \        Tried to give the SEND command before FROM.\n    674 TO command required.\n\
    \        Tried to give the SEND command before TO.\n    675 DATA command required.\n\
    \        Tried to give the SEND command before DATA.\n    676 Forward limit exceeded.\n\
    \        Response to the FWDS command that had an argument that\n        exceeded\
    \ the server specific limit of message forwarding\n        steps.\n    677 Unable\
    \ to forward message.\n        or\n    677 Unable to forward message to <user@host.domain>.\n\
    \        Response to the SEND or VRFY command if message forwarding is\n     \
    \   attempted and the server specific limit of message forwarding\n        steps\
    \ has been exceeded or if message forwarding has otherwise\n        failed.  If\
    \ message forwarding fails with message 669, 670 or\n        671, server will\
    \ not use response 667 but gives response but\n        instead it gives the response\
    \ analogous with the error\n        occured.  If message 677 includes address\
    \ the message was to\n        be forwarded, the client may try to deliver it itself.\n\
    \    698 Unknown error.\n        RWP server has faced an internal error that is\
    \ not fatal.\n    699 Unknown error.\n        RWP server has faced an unknown\
    \ error that is not fatal.\n"
- title: 5. RWP Compliant Software
  contents:
  - "5. RWP Compliant Software\n   Simple RWP 1.0 compliant server and client software\
    \ RWrite-1.1 will\n   be available during the fall 1994.\n"
- title: 6. Security of RWP
  contents:
  - "6. Security of RWP\n   RWP version 1.0 does not offer any mean to verify the\
    \ identity of the\n   user connecting the RWP server program.  It's possible to\
    \ identify\n   the sender using ident-service, but not all hosts currently support\n\
    \   that.  This vulnerability is analogous with the weakness of the SMTP\n   protocol.\
    \  Cryptographic user verification and message hiding method\n   is under development\
    \ and is to be defined in RWP version 2.0 during\n   the year 1995.\n   RWP server\
    \ also may offer a way to the intruder to get to know user\n   ids within the\
    \ target host by trying the TO and VRFY commands.  This\n   vulnerability is also\
    \ present in SMTP.  It is however possible to\n   build servers so that they never\
    \ give message 671 (no such user) but\n   use response 670 (user not logged in)\
    \ instead.\n   Another way to increase security even within RWP-1.0 described\
    \ in the\n   document is to design RWP servers so that they do not deliver\n \
    \  messages directly to user but instead connect to some kind of RWP\n   agent\
    \ process that is executed by each user willing to receive RWP\n   messages. \
    \ This user configurable message agent could then decide\n   whether to deliver\
    \ the message to the user and which way of delivery\n   to use.  Message agent\
    \ is the best way to prevent hostile user from\n   sending uncontrolled message\
    \ flood to the user's terminal.\n   Sample implementation (RWrite-1.0) of the\
    \ RWP server includes the\n   support for user configuration files in which each\
    \ user can either\n   allow or deny messages from some user(s), host(s) or network\n\
    \   domains(s).  Support for message agents is currently under\n   development.\n\
    \   The user that is receiving the message should be able to define\n   characters\
    \ to be stripped from the incoming messages to prevent\n   terminal mess-up.\n"
- title: 7. RWP Connection Type
  contents:
  - "7. RWP Connection Type\n   It is suggested that tcp (and udp) port 18 should\
    \ be allocated for\n   rwp in future versions of RFCs listing the reserved tcp/udp/rpc\n\
    \   ports.  Currently port 18 is assigned to the service called Message\n   Send\
    \ Protocol (msp) that is not known to be implemented.  Actually\n   port 18 is\
    \ not currently defined at all in the /etc/services -file of\n   the any common\
    \ UNIX-like system.  Entry for /etc/services -file is as\n   follows\n       rwrite\
    \    18/udp       # RWP rwrite\n       rwrite    18/tcp       # RWP rwrite\n \
    \  Given that RWP compliant daemon program is /usr/sbin/rwrited the\n   entry\
    \ for /etc/inetd.conf -file would be:\n       rwrite  stream  tcp  nowait  nobody\
    \  /usr/sbin/rwrited rwrited\n"
- title: 8. Character quotation
  contents:
  - "8. Character quotation\n   To offer a safe method to transfer various character\
    \ sets RWP defines\n   a method to quote characters in both message and autoreply.\
    \  RWP uses\n   quotation similar to MIME `quoted-printable' encoding.  Quoted\n\
    \   character is presented as a '=' -sign followed by a two character hex\n  \
    \ code.  This means also that all '='-signs have to be quoted.\n   Quotation is\
    \ also needed when message contains a line with only a\n   single dot '.' in it.\n\
    \    For example:\n                    '.'  ->  =2E\n                    '=' \
    \ ->  =3D\n                    '\\a' ->  =07\n                    '\\t' ->  =09\n"
- title: 9. Security Considerations
  contents:
  - "9. Security Considerations\n   Security issues are not discussed in this memo.\n"
- title: 10. Author's Address
  contents:
  - "10. Author's Address\n   Timo J. Rinne\n   Helsinki University of Technology.\n\
    \   Cirion oy\n   PO-BOX 250\n   FIN-00121\n   Helsinki, Finland\n   EMail: Timo.Rinne@hut.fi\n"
