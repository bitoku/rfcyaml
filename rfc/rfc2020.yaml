- title: __initial_text__
  contents:
  - '       Definitions of Managed Objects for IEEE 802.12 Interfaces

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n 1.  Introduction ...............................................\
    \    1\n 2.  Object Definitions .........................................    2\n\
    \ 3.  Overview ...................................................    2\n 3.1.\
    \  MAC Addresses ............................................    3\n 3.2.  Relation\
    \ to RFC 1213 .....................................    3\n 3.3.  Relation to RFC\
    \ 1573 .....................................    3\n 3.3.1.  Layering Model .........................................\
    \    4\n 3.3.2.  Virtual Circuits .......................................    4\n\
    \ 3.3.3.  ifTestTable ............................................    4\n 3.3.4.\
    \  ifRcvAddressTable ......................................    4\n 3.3.5.  ifPhysAddress\
    \ ..........................................    4\n 3.3.6.  Specific Interface\
    \ MIB Objects .........................    5\n 3.4.  Relation to RFC 1643, RFC\
    \ 1650, and RFC 1748 .............    8\n 3.5.  Relation to RFC 1749 .....................................\
    \    8\n 3.6.  Master Mode Operation ....................................    9\n\
    \ 3.7.  Normal and High Priority Counters ........................    9\n 3.8.\
    \  IEEE 802.12 Training Frames ..............................   10\n 3.9.  Mapping\
    \ of IEEE 802.12 Managed Objects ...................   12\n 4.  Definitions ................................................\
    \   14\n 5.  Acknowledgements ...........................................   30\n\
    \ 6.  References .................................................   30\n 7. \
    \ Security Considerations ....................................   31\n 8.  Author's\
    \ Address ...........................................   31\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This memo defines a portion of the Management Information\
    \ Base (MIB)\n   for use with network management protocols in TCP/IP-based internets.\n\
    \   In particular, it defines objects for managing network interfaces\n   based\
    \ on IEEE 802.12.\n"
- title: 2.  Object Definitions
  contents:
  - "2.  Object Definitions\n   Management information is viewed as a collection of\
    \ managed objects,\n   residing in a virtual information store, termed the Management\n\
    \   Information Base (MIB).  Collections of related objects are defined\n   in\
    \ MIB modules.  MIB modules are written using a subset of Abstract\n   Syntax\
    \ Notation One (ASN.1) [1] termed the Structure of Management\n   Information\
    \ (SMI) [2].  In particular, each object type is named by\n   an OBJECT IDENTIFIER,\
    \ an administratively assigned name.  The object\n   type together with an object\
    \ instance serves to uniquely identify a\n   specific instantiation of the object.\
    \  For human convenience, we\n   often use a textual string, termed the descriptor,\
    \ to refer to the\n   object type.\n"
- title: 3.  Overview
  contents:
  - "3.  Overview\n   Instances of these object types represent attributes of an interface\n\
    \   to an IEEE 802.12 communications medium.  At present, IEEE 802.12\n   media\
    \ are identified by one value of the ifType object in the\n   Internet-standard\
    \ MIB:\n      ieee80212(55)\n   For this interface, the value of the ifSpecific\
    \ variable in the MIB-\n   II [5] has the OBJECT IDENTIFIER value:\n      dot12MIB\
    \    OBJECT IDENTIFIER ::= { transmission 45 }\n   The values for the ifType object\
    \ are defined by the IANAifType\n   textual convention.  The Internet Assigned\
    \ Numbers Authority (IANA)\n   is responsible for the assignment of all Internet\
    \ numbers, including\n   new ifType values.  Therefore, IANA is responsible for\
    \ maintaining\n   the definition of this textual convention.  The current definition\
    \ of\n   the IANAifType textual convention is available from IANA's World Wide\n\
    \   Web server at:\n         http://www.iana.org/iana/\n   The definitions presented\
    \ here are based on the IEEE Standard\n   802.12-1995, [6] Clause 13 \"Layer management\
    \ functions and services\",\n   and Annex C \"GDMO Specifications for Demand Priority\
    \ Managed\n   Objects\".  Implementors of these MIB objects should note that the\n\
    \   IEEE document explicitly describes (in the form of Pascal pseudocode)\n  \
    \ when, where, and how various MAC attributes are measured.  The IEEE\n   document\
    \ also describes the effects of MAC actions that may be\n   invoked by manipulating\
    \ instances of the MIB objects defined here.\n   To the extent that some of the\
    \ attributes defined in [6] are\n   represented by previously defined objects\
    \ in the Internet-standard\n   MIB [5] or in the Evolution of the Interfaces Group\
    \ of MIB-II [7],\n   such attributes are not redundantly represented by objects\
    \ defined in\n   this memo.  Among the attributes represented by objects defined\
    \ in\n   other memos are the number of octets transmitted or received on a\n \
    \  particular interface, the MAC address of an interface, and multicast\n   information\
    \ associated with an interface.\n"
- title: 3.1.  MAC Addresses
  contents:
  - "3.1.  MAC Addresses\n   All representations of MAC addresses in this MIB module,\
    \ and in other\n   related MIB modules (like RFC 1573), are in \"canonical\" order\
    \ defined\n   by 802.1a, i.e., as if it were transmitted least significant bit\n\
    \   first.  This is true even if the interface is operating in token ring\n  \
    \ framing mode, which requires MAC addresses to be transmitted most\n   significant\
    \ bit first.\n"
- title: 3.2.  Relation to RFC 1213
  contents:
  - "3.2.  Relation to RFC 1213\n   This section applies only when this MIB is used\
    \ in conjunction with\n   the \"old\" (i.e., pre-RFC 1573) interface group.\n\
    \   The relationship between an IEEE 802.12 interface and an interface in\n  \
    \ the context of the Internet-standard MIB is one-to-one.  As such, the\n   value\
    \ of an ifIndex object instance can be directly used to identify\n   corresponding\
    \ instances of the objects defined herein.\n"
- title: 3.3.  Relation to RFC 1573
  contents:
  - "3.3.  Relation to RFC 1573\n   RFC 1573, the Interface MIB Evolution, requires\
    \ that any MIB which is\n   an adjunct of the Interface MIB, clarify specific\
    \ areas within the\n   Interface MIB.  These areas are intentionally left vague\
    \ in RFC 1573\n   to avoid over constraining the MIB, thereby precluding management\
    \ of\n   certain media-types.\n   An agent which implements this MIB module must\
    \ support the\n   ifGeneralGroup, ifStackGroup, ifHCPacketGroup, and ifRcvAddressGroup\n\
    \   of RFC 1573.\n   Section 3.3 of RFC 1573 enumerates several areas which a\
    \ media-\n   specific MIB must clarify.  In addition, there are some objects in\n\
    \   RFC 1573 for which additional clarification of how to apply them to\n   an\
    \ IEEE 802.12 interface would be helpful.  Each of these areas is\n   addressed\
    \ in a following subsection.  The implementor is referred to\n   RFC 1573 in order\
    \ to understand the general intent of these areas.\n"
- title: 3.3.1.  Layering Model
  contents:
  - "3.3.1.  Layering Model\n   For the typical usage of this MIB module, there will\
    \ be no sub-layers\n   \"above\" or \"below\" the 802.12 Interface.  However,\
    \ this MIB module\n   does not preclude such layering.\n"
- title: 3.3.2.  Virtual Circuits
  contents:
  - "3.3.2.  Virtual Circuits\n   This medium does not support virtual circuits and\
    \ this area is not\n   applicable to this MIB.\n"
- title: 3.3.3.  ifTestTable
  contents:
  - "3.3.3.  ifTestTable\n   This MIB does not define any tests for media instrumented\
    \ by this\n   MIB.  Implementation of the ifTestTable is not required.  An\n \
    \  implementation may optionally implement the ifTestTable to execute\n   vendor\
    \ specific tests.\n"
- title: 3.3.4.  ifRcvAddressTable
  contents:
  - "3.3.4.  ifRcvAddressTable\n   This table contains all IEEE addresses, unicast,\
    \ multicast, and\n   broadcast, for which this interface will receive packets\
    \ and forward\n   them up to a higher layer entity for consumption.  In addition,\
    \ when\n   the interface is using 802.5 framing mode, the ifRcvAddressTable will\n\
    \   contain the functional address mask.\n   In the event that the interface is\
    \ part of a MAC bridge, this table\n   does not include unicast addresses which\
    \ are accepted for possible\n   forwarding out some other port.  This table is\
    \ explicitly not\n   intended to provide a bridge address filtering mechanism.\n"
- title: 3.3.5.  ifPhysAddress
  contents:
  - "3.3.5.  ifPhysAddress\n   This object contains the IEEE 802.12 address which\
    \ is placed in the\n   source-address field of any frames that originate at this\
    \ interface.\n   Usually this will be kept in ROM on the interface hardware. \
    \ Some\n   systems may set this address via software.\n   In a system where there\
    \ are several such addresses the designer has a\n   tougher choice.  The address\
    \ chosen should be the one most likely to\n   be of use to network management\
    \ (e.g.  the address placed in ARP\n   responses for systems which are primarily\
    \ IP systems).\n   If the designer truly can not choose, use of the factory-provided\
    \ ROM\n   address is suggested.\n   If the address can not be determined, an octet\
    \ string of zero length\n   should be returned.\n   The address is stored in binary\
    \ in this object.  The address is\n   stored in \"canonical\" bit order, that\
    \ is, the Group Bit is positioned\n   as the low-order bit of the first octet.\
    \  Thus, the first byte of a\n   multicast address would have the bit 0x01 set.\
    \  This is true even\n   when the interface is using token ring framing mode,\
    \ which transmits\n   addresses high-order bit first.\n"
- title: 3.3.6.  Specific Interface MIB Objects
  contents:
  - "3.3.6.  Specific Interface MIB Objects\n   The following table provides specific\
    \ implementation guidelines for\n   the interface group objects in the conformance\
    \ groups listed above.\n     Object                 Use for an 802.12 Interface\n\
    \     ifIndex                Each 802.12 interface is represented by an\n    \
    \                        ifEntry.  Interface tables in this MIB\n            \
    \                module are indexed by ifIndex.\n     ifDescr                Refer\
    \ to [7].\n     ifType                 The IANA reserved value for 802.12 - 55.\n\
    \     ifMtu                  The value of ifMtu on an 802.12 interface\n     \
    \                       will depend on the type of framing that is\n         \
    \                   in use on that interface.  Changing the\n                \
    \            dot12DesiredFramingType may have the effect\n                   \
    \         of changing ifMtu after the next time that\n                       \
    \     the interface trains.  When\n                            dot12CurrentFramingType\
    \ is equal to\n                            frameType88023, ifMtu will be equal\
    \ to\n                            1500.  When dot12CurrentFramingType is\n   \
    \                         equal to frameType88025, ifMtu will be\n           \
    \                 4464.\n     ifSpeed                The speed of the interface\
    \ in bits per\n                            second.  For current 802.12\n     \
    \                       implementations, this will be equal to\n             \
    \               100,000,000 (100 million).\n     ifPhysAddress          See Section\
    \ 3.3.5.\n     ifAdminStatus          Write access is not required.  Support for\n\
    \                            'testing' is not required.  Setting this\n      \
    \                      object to 'up' will cause dot12Commands to\n          \
    \                  be set to 'open'.  Setting this object to\n               \
    \             'down' will cause dot12Commands to be set\n                    \
    \        to 'close'.  Setting dot12Commands to\n                            'open'\
    \ will set this object to 'up'.\n                            Setting dot12Commands\
    \ to 'close' will set\n                            this object to 'down'.  Setting\n\
    \                            dot12Commands to 'reset' will have no\n         \
    \                   effect on this object.\n     ifOperStatus           When dot12Status\
    \ is equal to 'opened', this\n                            object will be equal\
    \ to 'up'.  When\n                            dot12Status is equal to 'closed',\
    \ 'opening',\n                            'openFailure' or 'linkFailure', this\
    \ object\n                            will be equal to 'down'.  Support for\n\
    \                            'testing' is not required, but may be used\n    \
    \                        to indicate that a vendor specific test is\n        \
    \                    in progress.  The value 'dormant' has no\n              \
    \              meaning for an IEEE 802.12 interface.\n     ifLastChange      \
    \     Refer to [7].\n     ifInOctets             The number of octets in valid\
    \ MAC frames\n                            received on this interface, including\
    \ the\n                            MAC header and FCS.\n     ifInUcastPkts   \
    \       Refer to [7].\n     ifInDiscards           Refer to [7].\n     ifInErrors\
    \             The sum for this interface of\n                            dot12InIPMErrors,\n\
    \                            dot12InOversizeFrameErrors,\n                   \
    \         dot12InDataErrors, and any additional\n                            internal\
    \ errors that may occur in an\n                            implementation.\n \
    \    ifInUnknownProtos      Refer to [7].\n     ifOutOctets            The number\
    \ of octets transmitted in MAC\n                            frames on this interface,\
    \ including the MAC\n                            header and FCS.\n     ifOutUcastPkts\
    \         Refer to [7].\n     ifOutDiscards          Refer to [7].\n     ifOutErrors\
    \            The number of implementation-specific\n                         \
    \   internal transmit errors on this interface.\n     ifName                 Locally-significant\
    \ textual name for the\n                            interface (e.g. vg0).\n  \
    \   ifInMulticastPkts      Refer to [7].  When dot12CurrentFramingType\n     \
    \                       is frameType88025, this count includes\n             \
    \               packets addressed to functional addresses.\n     ifInBroadcastPkts\
    \      Refer to [7].\n     ifOutMulticastPkts     Refer to [7].  When dot12CurrentFramingType\n\
    \                            is frameType88025, this count includes\n        \
    \                    packets addressed to functional addresses.\n     ifOutBroadcastPkts\
    \     Refer to [7].\n     ifHCInOctets           64-bit version of ifInOctets.\n\
    \     ifHCOutOctets          64-bit version of ifOutOctets\n     ifHC*Pkts   \
    \           Not required for 100 MBit interfaces.\n                          \
    \  Future IEEE 802.12 interfaces which operate\n                            at\
    \ higher speeds may require implementation\n                            of these\
    \ counters, but such interfaces are\n                            beyond the scope\
    \ of this memo.\n     ifLinkUpDownTrapEnable Refer to [7].  Default is 'enabled'.\n\
    \     ifHighSpeed            The speed of the interface in millions of\n     \
    \                       bits per second.  For current 802.12\n               \
    \             implementations, this will be equal to 100.\n     ifPromiscuousMode\
    \      Reflects whether the interface has\n                            successfully\
    \ trained and is currently\n                            operating in promiscuous\
    \ mode.\n                            dot12DesiredPromiscStatus is used to select\n\
    \                            the promiscuous mode to be requested in the\n   \
    \                         next training attempt.  Setting\n                  \
    \          ifPromiscuousMode will update\n                            dot12DesiredPromiscStatus\
    \ and cause the\n                            interface to attempt to retrain using\
    \ the\n                            new promiscuous mode.  After the interface\n\
    \                            has retrained, ifPromiscuousMode will\n         \
    \                   reflect the mode that is in use, not the\n               \
    \             mode that was requested.\n     ifConnectorPresent     This will\
    \ normally be 'true'.\n     ifStackHigherLayer     Refer to section 3.3.1\n  \
    \   ifStackLowerLayer\n     ifStackStatus\n     ifRcvAddressAddress    Refer to\
    \ section 3.3.4.\n     ifRcvAddressStatus\n     ifRcvAddressType\n"
- title: 3.4.  Relation to RFC 1643, RFC 1650, and RFC 1748
  contents:
  - "3.4.  Relation to RFC 1643, RFC 1650, and RFC 1748\n   An IEEE 802.12 interface\
    \ can be configured to operate in either\n   ethernet or token ring framing mode.\
    \  An IEEE 802.12 interface uses\n   the frame format for the configured framing\
    \ mode, but does not use\n   the media access protocol for ethernet or token ring.\
    \  Instead, IEEE\n   802.12 defines its own media access protocol, the Demand\
    \ Priority\n   Access Method (DPAM).\n   There are existing standards-track MIB\
    \ modules for instrumenting\n   ethernet-like interfaces and token ring interfaces.\
    \  At the time of\n   this writing, they are: STD 50, RFC 1643, \"Definitions\
    \ of Managed\n   Objects for Ethernet-like Interface Types\" [8]; RFC 1650,\n\
    \   \"Definitions of Managed Objects for Ethernet-like Interface Types\n   using\
    \ SMIv2\" [9]; and RFC 1748, \"IEEE 802.5 MIB using SMIv2\" [10].\n   These MIB\
    \ modules are designed to instrument the media access\n   protocol for these respective\
    \ technologies.  Since IEEE 802.12\n   interfaces do not implement either of these\
    \ media access protocols,\n   an agent should not implement RFC 1643, RFC 1650,\
    \ or RFC 1748 for\n   IEEE 802.12 interfaces.\n"
- title: 3.5.  Relation to RFC 1749
  contents:
  - "3.5.  Relation to RFC 1749\n   When an IEEE 802.12 interface is operating in\
    \ token ring framing\n   mode, and the end node supports token ring source routing,\
    \ the agent\n   should implement RFC 1749, the IEEE 802.5 Station Source Routing\
    \ MIB\n   [11] for those interfaces.\n"
- title: 3.6.  Master Mode Operation
  contents:
  - "3.6.  Master Mode Operation\n   In an IEEE 802.12 network, \"master\" devices\
    \ act as network\n   controllers to decide when to grant requesting end-nodes\
    \ permission\n   to transmit.  These master devices may be repeaters, or other\
    \ active\n   controller devices such as switches.\n   Devices which do not act\
    \ as network controllers, such as end-nodes or\n   passive switches, are considered\
    \ to be operating in \"slave\" mode.\n   The dot12ControlMode object indicates\
    \ if the interface is operating\n   in master mode or slave mode.\n"
- title: 3.7.  Normal and High Priority Counters
  contents:
  - "3.7.  Normal and High Priority Counters\n   The IEEE 802.12 interface MIB does\
    \ not provide normal priority\n   transmit counters.  Standardization of normal\
    \ priority transmit\n   counters could not be justified -- ifOutUcastPkts,\n \
    \  ifOutMulticastPkts, ifOutBroadcastPkts, ifOutOctets,\n   dot12OutHighPriorityFrames,\
    \ and dot12OutHighPriorityOctets should\n   suffice.  More precisely, the number\
    \ of normal priority frames\n   transmitted can be calculated as:\n       outNormPriorityFrames\
    \ = ifOutUcastPkts             +\n                               ifOutMulticastPkts\
    \         +\n                               ifOutBroadcastPkts         -\n   \
    \                            dot12OutHighPriorityFrames\n   The number of normal\
    \ priority octets transmitted can be calculated\n   as:\n       outNormPriorityOctets\
    \ = ifOutOctets                -\n                               dot12OutHighPriorityOctets\n\
    \   On the other hand, normal priority receive counters are provided.\n   The\
    \ main reason for this is that the normal priority and high\n   priority counters\
    \ include errored frames, whereas the ifIn*Pkts and\n   ifInOctets do not include\
    \ errored frames.  dot12InNormPriorityFrames\n   could be calculated, but the\
    \ calculation is tedious:\n       inNormPriorityFrames = ifInUcastPkts       \
    \       +\n                              ifInMulticastPkts          +\n      \
    \                        ifInBroadcastPkts          +\n                      \
    \        dot12InNullAddressedFrames +\n                              ifInErrors\
    \                 +\n                              ifInDiscards              \
    \ +\n                              ifInUnknownProtos          -\n            \
    \                  dot12InHighPriorityFrames\n   dot12InNormPriorityOctets includes\
    \ octets in unreadable frames, which\n   is not available elsewhere.  The number\
    \ of octets in unreadable\n   frames can be calculated as:\n       octetsInUnreadableFrames\
    \ = dot12InNormPriorityOctets +\n                                  dot12InHighPriorityOctets\
    \ -\n                                  ifInOctets\n   Also, the total traffic\
    \ at this interface can be calculated as:\n       traffic = dot12InNormPriorityOctets\
    \ +\n                 dot12InHighPriorityOctets +\n                 ifOutOctets\n\
    \   In other words, the normal priority receive counters were deemed\n   useful,\
    \ whereas the normal priority transmit counters can be easily\n   calculated from\
    \ other available counters.\n"
- title: 3.8.  IEEE 802.12 Training Frames
  contents:
  - "3.8.  IEEE 802.12 Training Frames\n   Training frames are special MAC frames\
    \ that are used only during link\n   initialization.  Training frames are initially\
    \ constructed by the\n   device at the lower end of a link, which is the slave\
    \ mode device for\n   the link.  The training frame format is as follows:\n  \
    \     +----+----+------------+--------------+----------+-----+\n       | DA |\
    \ SA | Req Config | Allow Config |   Data   | FCS |\n       +----+----+------------+--------------+----------+-----+\n\
    \               DA = destination address (six octets)\n               SA = source\
    \ address (six octets)\n               Req Config = requested configuration (2\
    \ octets)\n               Allow Config = allowed configuration (2 octets)\n  \
    \             Data = data (594 to 675 octets)\n               FCS = frame check\
    \ sequence (4 octets)\n   Training frames are always sent with a null destination\
    \ address.  To\n   pass training, an end node must use its source address in the\
    \ source\n   address field of the training frame.  A repeater may use a non-null\n\
    \   source address if it has one, or it may use a null source address.\n   The\
    \ requested configuration field allows the slave mode device to\n   inform the\
    \ master mode device about itself and to request\n   configuration options.  The\
    \ training response frame from the master\n   mode device contains the slave mode\
    \ device's requested configuration\n   from the training request frame.  The currently\
    \ defined format of the\n   requested configuration field as defined in the IEEE\
    \ Standard\n   802.12-1995 standard is shown below.  Please refer to the most\n\
    \   current version of the IEEE document for a more up to date\n   description\
    \ of this field.  In particular, the reserved bits may be\n   used in later versions\
    \ of the standard.\n       First Octet:       Second Octet:\n        7 6 5 4 3\
    \ 2 1 0    7 6 5 4 3 2 1 0\n       +-+-+-+-+-+-+-+-+  +-+-+-+-+-+-+-+-+\n    \
    \   |v|v|v|r|r|r|r|r|  |r|r|r|F|F|P|P|R|\n       +-+-+-+-+-+-+-+-+  +-+-+-+-+-+-+-+-+\n\
    \       vvv: The version of the 802.12 training protocol with which\n        \
    \    the training initiator is compliant.  The current version\n            is\
    \ 100.\n       r:   Reserved bits (set to zero)\n       FF:  00 = frameType88023\n\
    \            01 = frameType88025\n            10 = reserved\n            11 =\
    \ frameTypeEither\n       PP:  00 = singleAddressMode\n            01 = promiscuousMode\n\
    \            10 = reserved\n            11 = reserved\n       R:   0  = the training\
    \ initiator is an end node\n            1  = the training initiator is a repeater\n\
    \   The allowed configuration field allows the master mode device to\n   respond\
    \ with the allowed configuration.  The slave mode device sets\n   the contents\
    \ of this field to all zero bits.  The master mode device\n   sets the allowed\
    \ configuration field as follows:\n       First Octet:       Second Octet:\n \
    \       7 6 5 4 3 2 1 0    7 6 5 4 3 2 1 0\n       +-+-+-+-+-+-+-+-+  +-+-+-+-+-+-+-+-+\n\
    \       |v|v|v|D|C|N|r|r|  |r|r|r|F|F|P|P|R|\n       +-+-+-+-+-+-+-+-+  +-+-+-+-+-+-+-+-+\n\
    \       vvv: The version of the 802.12 training protocol with which\n        \
    \    the training responder is compliant.  The current version\n            is\
    \ 100.\n       D:   0  = No duplicate address has been detected.\n           \
    \ 1  = Duplicate address has been detected\n       C:   0  = The requested configuration\
    \ is compatible with the\n                 network.\n            1  = The requested\
    \ configuration is not compatible with\n                 the network.  In this\
    \ case, the FF, PP, and R bits\n                 indicate the configuration that\
    \ would be allowed.\n       N:   0  = Access will be allowed, providing the configuration\n\
    \                 is compatible (C = 0).\n            1  = Access is not granted\
    \ because of security\n                 restrictions\n       r:   Reserved bits\
    \ (set to zero)\n       FF:  00 = frameType88023 will be used\n            01\
    \ = frameType88025 will be used\n            10 = reserved\n            11 = reserved\n\
    \       PP:  00 = singleAddressMode\n            01 = promiscuousMode\n      \
    \      10 = reserved\n            11 = reserved\n       R:   0  = Requested access\
    \ as an end node is allowed\n            1  = Requested access as a repeater is\
    \ allowed\n   Again, note that the most recent version of the IEEE 802.12 standard\n\
    \   should be consulted for the most up to date definition of the\n   requested\
    \ configuration and allowed configuration fields.\n   The data field contains\
    \ between 594 and 675 octets and is filled in\n   by the training initiator. \
    \ The first 55 octets may be used for\n   vendor specific protocol information.\
    \  The remaining octets are all\n   zeros.  The length of the training frame combined\
    \ with the\n   requirement that 24 consecutive training frames be received without\n\
    \   error to complete training ensures that marginal links will not\n   complete\
    \ training.\n"
- title: 3.9.  Mapping of IEEE 802.12 Managed Objects
  contents:
  - "3.9.  Mapping of IEEE 802.12 Managed Objects\n   The following table lists all\
    \ the managed objects defined for\n   oEndNode in the IEEE 802.12 Standard, and\
    \ the corresponding SNMP\n   objects.\n   IEEE 802.12 Managed Object         \
    \   Corresponding SNMP Object\n   oEndNode\n     .aBroadcastFramesReceived   \
    \        IF-MIB - ifInBroadcastPkts\n     .aBroadcastFramesTransmitted       \
    \ IF-MIB - ifOutBroadcastPkts\n     .aDataErrorFramesReceived           dot12InDataErrors\n\
    \     .aDesiredFramingType                dot12DesiredFramingType\n     .aDesiredPromiscuousStatus\
    \          dot12DesiredPromiscStatus\n     .aFramesTransmitted               \
    \  IF-MIB - ifOutUCastPkts +\n                                               \
    \   ifOutMulticastPkts +\n                                                  ifOutBroadcastPkts\n\
    \     .aFramingCapability                 dot12FramingCapability\n     .aFunctionalAddresses\
    \               IF-MIB - ifRcvAddressTable\n     .aHighPriorityFramesReceived\
    \        dot12InHighPriorityFrames\n     .aHighPriorityFramesTransmitted     dot12OutHighPriorityFrames\n\
    \     .aHighPriorityOctetsReceived        dot12InHighPriorityOctets or\n     \
    \                                    dot12InHCHighPriorityOctets\n     .aHighPriorityOctetsTransmitted\
    \     dot12OutHighPriorityOctets or\n                                        \
    \ dot12OutHCHighPriorityOctets\n     .aIPMFramesReceived                 dot12InIPMErrors\n\
    \     .aLastTrainingConfig                dot12LastTrainingConfig\n     .aMACID\
    \                             IF-MIB - ifIndex\n     .aMACStatus             \
    \            dot12Status\n     .aMACVersion                        dot12TrainingVersion\n\
    \     .aMediaType                         <not yet mapped>\n                 \
    \                        Tranceiver MIB issue\n     .aMulticastFramesReceived\
    \           IF-MIB - ifInMulticastPkts\n     .aMulticastFramesTransmitted    \
    \    IF-MIB - ifOutMulticastPkts\n     .aMulticastReceiveStatus            IF-MIB\
    \ - ifRcvAddressTable\n     .aNormalPriorityFramesReceived      dot12InNormPriorityFrames\n\
    \     .aNormalPriorityOctetsReceived      dot12InNormPriorityOctets or\n     \
    \                                    dot12InHCNormPriorityOctets\n     .aNullAddressedFramesReceived\
    \       dot12InNullAddressedFrames\n     .aOctetsTransmitted                 IF-MIB\
    \ - ifOutOctets or\n                                                  ifHCOutOctets\n\
    \     .aOversizeFramesReceived            dot12InOversizeFrameErrors\n     .aReadableFramesReceived\
    \            IF-MIB - ifInUcastPkts +\n                                      \
    \            ifInMulticastPkts +\n                                           \
    \       ifInBroadcastPkts\n     .aReadableOctetsReceived            IF-MIB - ifInOctets\
    \ or\n                                                  ifHCInOctets\n     .aReadMulticastList\
    \                 IF-MIB - ifRcvAddressTable\n     .aReadWriteMACAddress     \
    \          IF-MIB - ifPhysAddress\n     .aTransitionsIntoTraining           dot12TransitionIntoTrainings\n\
    \     .acAddGroupAddress                  IF-MIB - ifRcvAddressTable\n     .acClose\
    \                            dot12Commands: 'close'\n     .acDeleteGroupAddress\
    \               IF-MIB - ifRcvAddressTable\n     .acExecuteSelftest          \
    \        IF-MIB - ifAdminStatus\n     .acInitializeMAC                    dot12Commands:\
    \ 'reset'\n     .acOpen                             dot12Commands: 'open'\n"
- title: 4.  Definitions
  contents:
  - "4.  Definitions\n      DOT12-IF-MIB DEFINITIONS ::= BEGIN\n          IMPORTS\n\
    \              transmission, Counter32, Counter64, OBJECT-TYPE,\n            \
    \  MODULE-IDENTITY\n                  FROM SNMPv2-SMI\n              MODULE-COMPLIANCE,\
    \ OBJECT-GROUP\n                  FROM SNMPv2-CONF\n              ifIndex\n  \
    \                FROM IF-MIB;\n          dot12MIB MODULE-IDENTITY\n          \
    \     LAST-UPDATED \"9602220452Z\"  -- February 22, 1996\n               ORGANIZATION\
    \ \"IETF 100VG-AnyLAN MIB Working Group\"\n               CONTACT-INFO\n     \
    \                  \"       John Flick\n                       Postal: Hewlett\
    \ Packard Company\n                               8000 Foothills Blvd. M/S 5556\n\
    \                               Roseville, CA 95747-5556\n                   \
    \    Tel:    +1 916 785 4018\n                       Fax:    +1 916 785 3583\n\
    \                       E-mail: johnf@hprnd.rose.hp.com\"\n               DESCRIPTION\n\
    \                       \"This MIB module describes objects for\n            \
    \           managing IEEE 802.12 interfaces.\"\n               ::= { transmission\
    \ 45 }\n          dot12MIBObjects     OBJECT IDENTIFIER ::= { dot12MIB 1 }\n \
    \         dot12ConfigTable OBJECT-TYPE\n              SYNTAX     SEQUENCE OF Dot12ConfigEntry\n\
    \              MAX-ACCESS not-accessible\n              STATUS     current\n \
    \             DESCRIPTION\n                      \"Configuration information for\
    \ a collection of\n                      802.12 interfaces attached to a particular\n\
    \                      system.\"\n              ::= { dot12MIBObjects 1 }\n  \
    \        dot12ConfigEntry OBJECT-TYPE\n              SYNTAX     Dot12ConfigEntry\n\
    \              MAX-ACCESS not-accessible\n              STATUS     current\n \
    \             DESCRIPTION\n                      \"Configuration for a particular\
    \ interface to an\n                      802.12 medium.\"\n              INDEX\
    \      { ifIndex }\n              ::= { dot12ConfigTable 1 }\n          Dot12ConfigEntry\
    \ ::=\n              SEQUENCE {\n                  dot12CurrentFramingType   \
    \      INTEGER,\n                  dot12DesiredFramingType         INTEGER,\n\
    \                  dot12FramingCapability          INTEGER,\n                \
    \  dot12DesiredPromiscStatus       INTEGER,\n                  dot12TrainingVersion\
    \            INTEGER,\n                  dot12LastTrainingConfig         OCTET\
    \ STRING,\n                  dot12Commands                   INTEGER,\n      \
    \            dot12Status                     INTEGER,\n                  dot12ControlMode\
    \                INTEGER\n              }\n          dot12CurrentFramingType OBJECT-TYPE\n\
    \              SYNTAX     INTEGER {\n                             frameType88023(1),\n\
    \                             frameType88025(2),\n                           \
    \  frameTypeUnknown(3)\n                         }\n              MAX-ACCESS read-only\n\
    \              STATUS     current\n              DESCRIPTION\n               \
    \       \"When dot12DesiredFramingType is one of\n                      'frameType88023'\
    \ or 'frameType88025', this is the\n                      type of framing asserted\
    \ by the interface.\n                      When dot12DesiredFramingType is 'frameTypeEither',\n\
    \                      dot12CurrentFramingType shall be one of\n             \
    \         'frameType88023' or 'frameType88025' when the\n                    \
    \  dot12Status is 'opened'.   When the dot12Status is\n                      anything\
    \ other than 'opened',\n                      dot12CurrentFramingType shall take\
    \ the value of\n                      'frameTypeUnknown'.\"\n              ::=\
    \ { dot12ConfigEntry 1 }\n          dot12DesiredFramingType OBJECT-TYPE\n    \
    \          SYNTAX     INTEGER {\n                             frameType88023(1),\n\
    \                             frameType88025(2),\n                           \
    \  frameTypeEither(3)\n                         }\n              MAX-ACCESS read-write\n\
    \              STATUS     current\n              DESCRIPTION\n               \
    \       \"The type of framing which will be requested by\n                   \
    \   the interface during the next interface MAC\n                      initialization\
    \ or open action.\n                      In master mode, this is the framing mode\
    \ which\n                      will be granted by the interface.  Note that\n\
    \                      for a master mode interface, this object must be\n    \
    \                  equal to 'frameType88023' or 'frameType88025',\n          \
    \            since a master mode interface cannot grant\n                    \
    \  'frameTypeEither'.\"\n              REFERENCE\n                      \"IEEE\
    \ Standard 802.12-1995, 13.2.5.2.1,\n                      aDesiredFramingType.\"\
    \n              ::= { dot12ConfigEntry 2 }\n          dot12FramingCapability OBJECT-TYPE\n\
    \              SYNTAX     INTEGER {\n                             frameType88023(1),\n\
    \                             frameType88025(2),\n                           \
    \  frameTypeEither(3)\n                         }\n              MAX-ACCESS read-only\n\
    \              STATUS     current\n              DESCRIPTION\n               \
    \       \"The type of framing this interface is capable of\n                 \
    \     supporting.\"\n              REFERENCE\n                      \"IEEE Standard\
    \ 802.12-1995, 13.2.5.2.1,\n                      aFramingCapability.\"\n    \
    \          ::= { dot12ConfigEntry 3 }\n          dot12DesiredPromiscStatus OBJECT-TYPE\n\
    \              SYNTAX     INTEGER {\n                             singleAddressMode(1),\n\
    \                             promiscuousMode(2)\n                         }\n\
    \              MAX-ACCESS read-write\n              STATUS     current\n     \
    \         DESCRIPTION\n                      \"This object is used to select the\
    \ promiscuous\n                      mode that this interface will request in\
    \ the next\n                      training packet issued on this interface.\n\
    \                      Whether the repeater grants the requested mode\n      \
    \                must be verified by examining the state of the PP\n         \
    \             bits in the corresponding instance of\n                      dot12LastTrainingConfig.\n\
    \                      In master mode, this object controls whether or\n     \
    \                 not promiscuous mode will be granted by the\n              \
    \        interface when requested by the lower level\n                      device.\n\
    \                      Note that this object indicates the desired mode\n    \
    \                  for the next time the interface trains.  The\n            \
    \          currently active mode will be reflected in\n                      dot12LastTrainingConfig\
    \ and in ifPromiscuousMode.\"\n              REFERENCE\n                     \
    \ \"IEEE Standard 802.12-1995, 13.2.5.2.1,\n                      aDesiredPromiscuousStatus.\"\
    \n              ::= { dot12ConfigEntry 4 }\n          dot12TrainingVersion OBJECT-TYPE\n\
    \              SYNTAX     INTEGER (0..7)\n              MAX-ACCESS read-only\n\
    \              STATUS     current\n              DESCRIPTION\n               \
    \       \"The value that will be used in the version bits\n                  \
    \    (vvv bits) in training frames on this interface.\n                      This\
    \ is the highest version number supported by\n                      this MAC.\"\
    \n              REFERENCE\n                      \"IEEE Standard 802.12-1995,\
    \ 13.2.5.2.1,\n                      aMACVersion.\"\n              ::= { dot12ConfigEntry\
    \ 5 }\n          dot12LastTrainingConfig OBJECT-TYPE\n              SYNTAX   \
    \  OCTET STRING (SIZE(2))\n              MAX-ACCESS read-only\n              STATUS\
    \     current\n              DESCRIPTION\n                      \"This 16 bit\
    \ field contains the configuration\n                      bits from the most recent\
    \ error-free training\n                      frame received during training on\
    \ this interface.\n                      Training request frames are received\
    \ when in\n                      master mode, while training response frames are\n\
    \                      received in slave mode.  On master mode interfaces,\n \
    \                     this object contains the contents of the\n             \
    \         requested configuration field of the most recent\n                 \
    \     training request frame.  On slave mode interfaces,\n                   \
    \   this object contains the contents of the allowed\n                      configuration\
    \ field of the most recent training\n                      response frame.  The\
    \ format of the current version\n                      of this field is described\
    \ in section 3.8.  Please\n                      refer to the most recent version\
    \ of the IEEE\n                      802.12 standard for the most up-to-date definition\n\
    \                      of the format of this object.\"\n              REFERENCE\n\
    \                      \"IEEE Standard 802.12-1995, 13.2.5.2.1,\n            \
    \          aLastTrainingConfig.\"\n              ::= { dot12ConfigEntry 6 }\n\
    \          dot12Commands OBJECT-TYPE\n              SYNTAX     INTEGER {\n   \
    \                          noOp(1),\n                             open(2),\n \
    \                            reset(3),\n                             close(4)\n\
    \                         }\n              MAX-ACCESS read-write\n           \
    \   STATUS     current\n              DESCRIPTION\n                      \"If\
    \ the current value of dot12Status is 'closed',\n                      setting\
    \ the value of this object to 'open' will\n                      change the corresponding\
    \ instance of MIB-II's\n                      ifAdminStatus to 'up', cause this\
    \ interface to\n                      enter the 'opening' state, and will cause\
    \ training\n                      to be initiated on this interface.  The progress\n\
    \                      and success of the open is given by the values of\n   \
    \                   the dot12Status object.  Setting this object to\n        \
    \              'open' when dot12Status has a value other than\n              \
    \        'closed' has no effect.\n                      Setting the corresponding\
    \ instance of ifAdminStatus\n                      to 'up' when the current value\
    \ of dot12Status is\n                      'closed' will have the same effect\
    \ as setting this\n                      object to 'open'.  Setting ifAdminStatus\
    \ to 'up'\n                      when dot12Status has a value other than 'closed'\n\
    \                      has no effect.\n                      Setting the value\
    \ of this object to 'close' will\n                      move this interface into\
    \ the 'closed' state and\n                      cause all transmit and receive\
    \ actions to stop.\n                      This object will then have to be set\
    \ to 'open' in\n                      order to reinitiate training.\n        \
    \              Setting the corresponding instance of ifAdminStatus\n         \
    \             to 'down' will have the same effect as setting this\n          \
    \            object to 'close'.\n                      Setting the value of this\
    \ object to 'reset' when\n                      the current value of dot12Status\
    \ has a value other\n                      than 'closed' will reset the interface.\
    \  On a\n                      reset, all MIB counters should retain their values.\n\
    \                      This will cause the MAC to initiate an\n              \
    \        acInitializeMAC action as specified in IEEE 802.12.\n               \
    \       This will cause training to be reinitiated on this\n                 \
    \     interface.  Setting this object to 'reset' when\n                      dot12Status\
    \ has a value of 'closed' has no effect.\n                      Setting this object\
    \ to 'reset' has no effect on the\n                      corresponding instance\
    \ of ifAdminStatus.\n                      Setting the value of this object to\
    \ 'noOp' has no\n                      effect.\n                      When read,\
    \ this object will always have a value\n                      of 'noOp'.\"\n \
    \             REFERENCE\n                      \"IEEE Standard 802.12-1995, 13.2.5.2.2,\n\
    \                      acOpen, acClose, acInitializeMAC.\n                   \
    \   Also, RFC1231 IEEE802.5 Token Ring MIB,\n                      dot5Commands.\"\
    \n              ::= { dot12ConfigEntry 7 }\n          dot12Status OBJECT-TYPE\n\
    \              SYNTAX     INTEGER {\n                             opened(1),\n\
    \                             closed(2),\n                             opening(3),\n\
    \                             openFailure(5),\n                             linkFailure(6)\n\
    \                         }\n              MAX-ACCESS read-only\n            \
    \  STATUS     current\n              DESCRIPTION\n                      \"The\
    \ current interface status with respect to\n                      training.  One\
    \ of the following values:\n                          opened      - Training has\
    \ completed\n                                        successfully.\n         \
    \                 closed      - MAC has been disabled by\n                   \
    \                     setting dot12Commands to\n                             \
    \           'close'.\n                          opening     - MAC is in training.\
    \  Training\n                                        signals have been received.\n\
    \                          openFailure - Passed 24 error-free packets,\n     \
    \                                   but there is a problem, noted\n          \
    \                              in the training configuration\n               \
    \                         bits (dot12LastTrainingConfig).\n                  \
    \        linkFailure - Training signals not received,\n                      \
    \                  or could not pass 24 error-free\n                         \
    \               packets.\n                      Whenever the dot12Commands object\
    \ is set to\n                      'close' or ifAdminStatus is set to 'down',\
    \ the MAC\n                      will go silent, dot12Status will be 'closed',\
    \ and\n                      ifOperStatus will be 'down'.\n                  \
    \    When the value of this object is equal to 'closed'\n                    \
    \  and the dot12Commands object is set to 'open' or\n                      the\
    \ ifAdminStatus object is set to 'up', training\n                      will be\
    \ initiated on this interface.  When the\n                      value of this\
    \ object is not equal to 'closed' and\n                      the dot12Commands\
    \ object is set to 'reset',\n                      training will be reinitiated\
    \ on this interface.\n                      Note that sets of some other objects\
    \ (e.g.\n                      dot12ControlMode) or external events (e.g. MAC\n\
    \                      protocol violations) may also cause training to be\n  \
    \                    reinitiated on this interface.\n                      When\
    \ training is initiated or reinitiated on an\n                      interface,\
    \ the end node will send Training_Up to\n                      the master and\
    \ initially go to the 'linkFailure'\n                      state and ifOperStatus\
    \ will go to 'down'.\n                      When the master sends back Training_Down,\n\
    \                      dot12Status will change to the 'opening' state,\n     \
    \                 and training packets will be transferred.\n                \
    \      After all of the training packets have been\n                      passed,\
    \ dot12Status will change to 'linkFailure'\n                      if 24 consecutive\
    \ error-free packets were not\n                      passed, 'opened' if 24 consecutive\
    \ error-free\n                      packets were passed and the training\n   \
    \                   configuration bits were OK, or 'openFailure' if\n        \
    \              there were 24 consecutive error-free packets, but\n           \
    \           there was a problem with the training\n                      configuration\
    \ bits.\n                      When in the 'openFailure' state, the\n        \
    \              dot12LastTrainingConfig object will contain the\n             \
    \         configuration bits from the last training\n                      packet\
    \ which can be examined to determine the\n                      exact reason for\
    \ the training configuration\n                      failure.\n               \
    \       If training did not succeed (dot12Status is\n                      'linkFailure'\
    \ or 'openFailure), the entire\n                      process will be restarted\
    \ after\n                      MAC_Retraining_Delay_Timer seconds.\n         \
    \             If training does succeed (dot12Status changes to\n             \
    \         'opened'), ifOperStatus will change to 'up'.  If\n                 \
    \     training does not succeed (dot12Status changes to\n                    \
    \  'linkFailure' or 'openFailure'), ifOperStatus will\n                      remain\
    \ 'down'.\"\n              REFERENCE\n                      \"IEEE Standard 802.12-1995,\
    \ 13.2.5.2.1,\n                      aMACStatus.\"\n              ::= { dot12ConfigEntry\
    \ 8 }\n          dot12ControlMode OBJECT-TYPE\n              SYNTAX     INTEGER\
    \ {\n                             masterMode(1),\n                           \
    \  slaveMode(2),\n                             learn(3)\n                    \
    \     }\n              MAX-ACCESS read-write\n              STATUS     current\n\
    \              DESCRIPTION\n                      \"This object is used to configure\
    \ and report\n                      whether or not this interface is operating\
    \ in\n                      master mode.  In a Demand Priority network, end\n\
    \                      node interfaces typically operate in slave mode,\n    \
    \                  while switch interfaces may control the Demand\n          \
    \            Priority protocol and operate in master mode.\n                 \
    \     This object may be implemented as a read-only\n                      object\
    \ by those agents and interfaces that do not\n                      implement\
    \ software control of master mode.  In\n                      particular, interfaces\
    \ that cannot operate in\n                      master mode, and interfaces on\
    \ which master mode\n                      is controlled by a pushbutton on the\
    \ device,\n                      should implement this object read-only.\n   \
    \                   Some interfaces do not require network management\n      \
    \                configuration of this feature and can autosense\n           \
    \           whether to use master mode or slave mode.  The\n                 \
    \     value 'learn' is used for that purpose.  While\n                      autosense\
    \ is taking place, the value 'learn' is\n                      returned.\n   \
    \                   A network management operation which modifies the\n      \
    \                value of dot12ControlMode causes the interface\n            \
    \          to retrain.\"\n              ::= { dot12ConfigEntry 9 }\n         \
    \ dot12StatTable OBJECT-TYPE\n              SYNTAX     SEQUENCE OF Dot12StatEntry\n\
    \              MAX-ACCESS not-accessible\n              STATUS     current\n \
    \             DESCRIPTION\n                      \"Statistics for a collection\
    \ of 802.12 interfaces\n                      attached to a particular system.\"\
    \n              ::= { dot12MIBObjects 2 }\n          dot12StatEntry OBJECT-TYPE\n\
    \              SYNTAX     Dot12StatEntry\n              MAX-ACCESS not-accessible\n\
    \              STATUS     current\n              DESCRIPTION\n               \
    \       \"Statistics for a particular interface to an\n                      802.12\
    \ medium.  The receive statistics in this\n                      table apply only\
    \ to packets received by this\n                      station (i.e., packets whose\
    \ destination address\n                      is either the local station address,\
    \ the\n                      broadcast address, or a multicast address that\n\
    \                      this station is receiving, unless the station is\n    \
    \                  in promiscuous mode).\"\n              INDEX      { ifIndex\
    \ }\n              ::= { dot12StatTable 1 }\n          Dot12StatEntry ::=\n  \
    \            SEQUENCE {\n                  dot12InHighPriorityFrames       Counter32,\n\
    \                  dot12InHighPriorityOctets       Counter32,\n              \
    \    dot12InNormPriorityFrames       Counter32,\n                  dot12InNormPriorityOctets\
    \       Counter32,\n                  dot12InIPMErrors                Counter32,\n\
    \                  dot12InOversizeFrameErrors      Counter32,\n              \
    \    dot12InDataErrors               Counter32,\n                  dot12InNullAddressedFrames\
    \      Counter32,\n                  dot12OutHighPriorityFrames      Counter32,\n\
    \                  dot12OutHighPriorityOctets      Counter32,\n              \
    \    dot12TransitionIntoTrainings    Counter32,\n                  dot12HCInHighPriorityOctets\
    \     Counter64,\n                  dot12HCInNormPriorityOctets     Counter64,\n\
    \                  dot12HCOutHighPriorityOctets    Counter64\n              }\n\
    \          dot12InHighPriorityFrames OBJECT-TYPE\n              SYNTAX     Counter32\n\
    \              MAX-ACCESS read-only\n              STATUS     current\n      \
    \        DESCRIPTION\n                      \"This object is a count of high priority\
    \ frames\n                      that have been received on this interface.\n \
    \                     Includes both good and bad high priority frames,\n     \
    \                 as well as high priority training frames.  Does\n          \
    \            not include normal priority frames which were\n                 \
    \     priority promoted.\"\n              REFERENCE\n                      \"\
    IEEE Standard 802.12-1995, 13.2.5.2.1,\n                      aHighPriorityFramesReceived.\"\
    \n              ::= { dot12StatEntry 1 }\n          dot12InHighPriorityOctets\
    \ OBJECT-TYPE\n              SYNTAX     Counter32\n              MAX-ACCESS read-only\n\
    \              STATUS     current\n              DESCRIPTION\n               \
    \       \"This object is a count of the number of octets\n                   \
    \   contained in high priority frames that have been\n                      received\
    \ on this interface. This counter is\n                      incremented by OctetCount\
    \ for each frame received\n                      on this interface which is counted\
    \ by\n                      dot12InHighPriorityFrames.\n                     \
    \ Note that this counter will roll over very\n                      quickly. \
    \ It is provided for backward\n                      compatibility for Network\
    \ Management protocols\n                      that do not support 64 bit counters\
    \ (e.g. SNMP\n                      version 1).\"\n              REFERENCE\n \
    \                     \"IEEE Standard 802.12-1995, 13.2.5.2.1,\n             \
    \         aHighPriorityOctetsReceived.\"\n              ::= { dot12StatEntry 2\
    \ }\n          dot12InNormPriorityFrames OBJECT-TYPE\n              SYNTAX   \
    \  Counter32\n              MAX-ACCESS read-only\n              STATUS     current\n\
    \              DESCRIPTION\n                      \"This object is a count of\
    \ normal priority frames\n                      that have been received on this\
    \ interface.\n                      Includes both good and bad normal priority\n\
    \                      frames, as well as normal priority training\n         \
    \             frames and normal priority frames which were\n                 \
    \     priority promoted.\"\n              REFERENCE\n                      \"\
    IEEE Standard 802.12-1995, 13.2.5.2.1,\n                      aNormalPriorityFramesReceived.\"\
    \n              ::= { dot12StatEntry 3 }\n          dot12InNormPriorityOctets\
    \ OBJECT-TYPE\n              SYNTAX     Counter32\n              MAX-ACCESS read-only\n\
    \              STATUS     current\n              DESCRIPTION\n               \
    \       \"This object is a count of the number of octets\n                   \
    \   contained in normal priority frames that have\n                      been\
    \ received on this interface. This counter is\n                      incremented\
    \ by OctetCount for each frame received\n                      on this interface\
    \ which is counted by\n                      dot12InNormPriorityFrames.\n    \
    \                  Note that this counter will roll over very\n              \
    \        quickly.  It is provided for backward\n                      compatibility\
    \ for Network Management protocols\n                      that do not support\
    \ 64 bit counters (e.g. SNMP\n                      version 1).\"\n          \
    \    REFERENCE\n                      \"IEEE Standard 802.12-1995, 13.2.5.2.1,\n\
    \                      aNormalPriorityOctetsReceived.\"\n              ::= { dot12StatEntry\
    \ 4 }\n          dot12InIPMErrors OBJECT-TYPE\n              SYNTAX     Counter32\n\
    \              MAX-ACCESS read-only\n              STATUS     current\n      \
    \        DESCRIPTION\n                      \"This object is a count of the number\
    \ of frames\n                      that have been received on this interface with\
    \ an\n                      invalid packet marker and no PMI errors.  A\n    \
    \                  repeater will write an invalid packet marker to\n         \
    \             the end of a frame containing errors as it is\n                \
    \      forwarded through the repeater to the other\n                      ports.\
    \  This counter is incremented by one for\n                      each frame received\
    \ on this interface which has\n                      had an invalid packet marker\
    \ added to the end of\n                      the frame.\"\n              REFERENCE\n\
    \                      \"IEEE Standard 802.12-1995, 13.2.5.2.1,\n            \
    \          aIPMFramesReceived.\"\n              ::= { dot12StatEntry 5 }\n   \
    \       dot12InOversizeFrameErrors OBJECT-TYPE\n              SYNTAX     Counter32\n\
    \              MAX-ACCESS read-only\n              STATUS     current\n      \
    \        DESCRIPTION\n                      \"This object is a count of oversize\
    \ frames\n                      received on this interface.  This counter is\n\
    \                      incremented by one for each frame received on\n       \
    \               this interface whose OctetCount is larger than\n             \
    \         the maximum legal frame size.  The frame size\n                    \
    \  which causes this counter to increment is\n                      dependent\
    \ on the current framing type.\"\n              REFERENCE\n                  \
    \    \"IEEE Standard 802.12-1995, 13.2.5.2.1,\n                      aOversizeFramesReceived.\"\
    \n              ::= { dot12StatEntry 6 }\n          dot12InDataErrors OBJECT-TYPE\n\
    \              SYNTAX     Counter32\n              MAX-ACCESS read-only\n    \
    \          STATUS     current\n              DESCRIPTION\n                   \
    \   \"This object is a count of errored frames\n                      received\
    \ on this interface.  This counter is\n                      incremented by one\
    \ for each frame received on\n                      this interface with any of\
    \ the following errors:\n                      bad FCS (with no IPM), PMI errors\
    \ (excluding\n                      frames with an IPM as the only PMI error),\n\
    \                      undersize, bad start of frame delimiter, or bad\n     \
    \                 end of packet marker.  Does not include frames\n           \
    \           counted by dot12InIPMErrors,\n                      dot12InNullAddressedFrames,\
    \ or\n                      dot12InOversizeFrameErrors.\n                    \
    \  This counter indicates problems with the cable\n                      directly\
    \ attached to this interface, while\n                      dot12InIPMErrors indicates\
    \ problems with remote\n                      cables.\"\n              REFERENCE\n\
    \                      \"IEEE Standard 802.12-1995, 13.2.5.2.1,\n            \
    \          aDataErrorFramesReceived.\"\n              ::= { dot12StatEntry 7 }\n\
    \          dot12InNullAddressedFrames OBJECT-TYPE\n              SYNTAX     Counter32\n\
    \              MAX-ACCESS read-only\n              STATUS     current\n      \
    \        DESCRIPTION\n                      \"This object is a count of null addressed\
    \ frames\n                      received on this interface.  This counter is\n\
    \                      incremented by one for each frame received on\n       \
    \               this interface with a destination MAC address\n              \
    \        consisting of all zero bits.  Both void and\n                      training\
    \ frames are included in this counter.\n                      Note that since\
    \ this station would normally not\n                      receive null addressed\
    \ frames, this counter is\n                      only incremented when this station\
    \ is operating\n                      in promiscuous mode or in training.\"\n\
    \              REFERENCE\n                      \"IEEE Standard 802.12-1995, 13.2.5.2.1,\n\
    \                      aNullAddressedFramesReceived.\"\n              ::= { dot12StatEntry\
    \ 8 }\n          dot12OutHighPriorityFrames OBJECT-TYPE\n              SYNTAX\
    \     Counter32\n              MAX-ACCESS read-only\n              STATUS    \
    \ current\n              DESCRIPTION\n                      \"This counter is\
    \ incremented by one for each high\n                      priority frame successfully\
    \ transmitted out this\n                      interface.\"\n              REFERENCE\n\
    \                      \"IEEE Standard 802.12-1995, 13.2.5.2.1,\n            \
    \          aHighPriorityFramesTransmitted.\"\n              ::= { dot12StatEntry\
    \ 9 }\n          dot12OutHighPriorityOctets OBJECT-TYPE\n              SYNTAX\
    \     Counter32\n              MAX-ACCESS read-only\n              STATUS    \
    \ current\n              DESCRIPTION\n                      \"This counter is\
    \ incremented by OctetCount for\n                      each frame counted by dot12OutHighPriorityFrames.\n\
    \                      Note that this counter will roll over very\n          \
    \            quickly.  It is provided for backward\n                      compatibility\
    \ for Network Management protocols\n                      that do not support\
    \ 64 bit counters (e.g. SNMP\n                      version 1).\"\n          \
    \    REFERENCE\n                      \"IEEE Standard 802.12-1995, 13.2.5.2.1,\n\
    \                      aHighPriorityOctetsTransmitted.\"\n              ::= {\
    \ dot12StatEntry 10 }\n          dot12TransitionIntoTrainings OBJECT-TYPE\n  \
    \            SYNTAX     Counter32\n              MAX-ACCESS read-only\n      \
    \        STATUS     current\n              DESCRIPTION\n                     \
    \ \"This object is a count of the number of times\n                      this\
    \ interface has entered the training state.\n                      This counter\
    \ is incremented by one each time\n                      dot12Status transitions\
    \ to 'linkFailure' from any\n                      state other than 'opening'\
    \ or 'openFailure'.\"\n              REFERENCE\n                      \"IEEE Standard\
    \ 802.12-1995, 13.2.5.2.1,\n                      aTransitionsIntoTraining.\"\n\
    \              ::= { dot12StatEntry 11 }\n          dot12HCInHighPriorityOctets\
    \ OBJECT-TYPE\n              SYNTAX     Counter64\n              MAX-ACCESS read-only\n\
    \              STATUS     current\n              DESCRIPTION\n               \
    \       \"This object is a count of the number of octets\n                   \
    \   contained in high priority frames that have been\n                      received\
    \ on this interface. This counter is\n                      incremented by OctetCount\
    \ for each frame received\n                      on this interface which is counted\
    \ by\n                      dot12InHighPriorityFrames.\n                     \
    \ This counter is a 64 bit version of\n                      dot12InHighPriorityOctets.\
    \  It should be used by\n                      Network Management protocols which\
    \ support 64 bit\n                      counters (e.g. SNMPv2).\"\n          \
    \    REFERENCE\n                      \"IEEE Standard 802.12-1995, 13.2.5.2.1,\n\
    \                      aHighPriorityOctetsReceived.\"\n              ::= { dot12StatEntry\
    \ 12 }\n          dot12HCInNormPriorityOctets OBJECT-TYPE\n              SYNTAX\
    \     Counter64\n              MAX-ACCESS read-only\n              STATUS    \
    \ current\n              DESCRIPTION\n                      \"This object is a\
    \ count of the number of octets\n                      contained in normal priority\
    \ frames that have\n                      been received on this interface. This\
    \ counter is\n                      incremented by OctetCount for each frame received\n\
    \                      on this interface which is counted by\n               \
    \       dot12InNormPriorityFrames.\n                      This counter is a 64\
    \ bit version of\n                      dot12InNormPriorityOctets.  It should\
    \ be used by\n                      Network Management protocols which support\
    \ 64 bit\n                      counters (e.g. SNMPv2).\"\n              REFERENCE\n\
    \                      \"IEEE Standard 802.12-1995, 13.2.5.2.1,\n            \
    \          aNormalPriorityOctetsReceived.\"\n              ::= { dot12StatEntry\
    \ 13 }\n          dot12HCOutHighPriorityOctets OBJECT-TYPE\n              SYNTAX\
    \     Counter64\n              MAX-ACCESS read-only\n              STATUS    \
    \ current\n              DESCRIPTION\n                      \"This counter is\
    \ incremented by OctetCount for\n                      each frame counted by dot12OutHighPriorityFrames.\n\
    \                      This counter is a 64 bit version of\n                 \
    \     dot12OutHighPriorityOctets.  It should be used by\n                    \
    \  Network Management protocols which support 64 bit\n                      counters\
    \ (e.g. SNMPv2).\"\n              REFERENCE\n                      \"IEEE Standard\
    \ 802.12-1995, 13.2.5.2.1,\n                      aHighPriorityOctetsTransmitted.\"\
    \n             ::= { dot12StatEntry 14 }\n          -- conformance information\n\
    \          dot12Conformance  OBJECT IDENTIFIER ::= { dot12MIB 2 }\n          dot12Compliances\
    \  OBJECT IDENTIFIER ::= { dot12Conformance 1 }\n          dot12Groups       OBJECT\
    \ IDENTIFIER ::= { dot12Conformance 2 }\n          -- compliance statements\n\
    \          dot12Compliance MODULE-COMPLIANCE\n              STATUS     current\n\
    \              DESCRIPTION\n                         \"The compliance statement\
    \ for managed network\n                         entities that have 802.12 interfaces.\"\
    \n              MODULE  -- this module\n                  MANDATORY-GROUPS { dot12ConfigGroup,\
    \ dot12StatsGroup }\n                  OBJECT       dot12DesiredFramingType\n\
    \                  MIN-ACCESS   read-only\n                  DESCRIPTION\n   \
    \                      \"Write access to this object is not required.\"\n    \
    \              OBJECT       dot12DesiredPromiscStatus\n                  MIN-ACCESS\
    \   read-only\n                  DESCRIPTION\n                         \"Write\
    \ access to this object is not required.\"\n                  OBJECT       dot12Commands\n\
    \                  MIN-ACCESS   read-only\n                  DESCRIPTION\n   \
    \                      \"Write access to this object is not required.\"\n    \
    \              OBJECT       dot12ControlMode\n                  MIN-ACCESS   read-only\n\
    \                  DESCRIPTION\n                         \"Write access to this\
    \ object is not required.\"\n              ::= { dot12Compliances 1 }\n      \
    \    -- units of conformance\n          dot12ConfigGroup OBJECT-GROUP\n      \
    \        OBJECTS    { dot12DesiredFramingType,\n                           dot12FramingCapability,\n\
    \                           dot12DesiredPromiscStatus,\n                     \
    \      dot12TrainingVersion,\n                           dot12LastTrainingConfig,\n\
    \                           dot12Commands, dot12Status,\n                    \
    \       dot12CurrentFramingType,\n                           dot12ControlMode\
    \ }\n              STATUS     current\n              DESCRIPTION\n           \
    \           \"A collection of objects for managing the status\n              \
    \        and configuration of IEEE 802.12 interfaces.\"\n              ::= { dot12Groups\
    \ 1 }\n          dot12StatsGroup OBJECT-GROUP\n              OBJECTS    { dot12InHighPriorityFrames,\n\
    \                           dot12InHighPriorityOctets,\n                     \
    \      dot12InNormPriorityFrames,\n                           dot12InNormPriorityOctets,\n\
    \                           dot12InIPMErrors,\n                           dot12InOversizeFrameErrors,\n\
    \                           dot12InDataErrors,\n                           dot12InNullAddressedFrames,\n\
    \                           dot12OutHighPriorityFrames,\n                    \
    \       dot12OutHighPriorityOctets,\n                           dot12TransitionIntoTrainings,\n\
    \                           dot12HCInHighPriorityOctets,\n                   \
    \        dot12HCInNormPriorityOctets,\n                           dot12HCOutHighPriorityOctets\
    \ }\n              STATUS     current\n              DESCRIPTION\n           \
    \           \"A collection of objects providing statistics for\n             \
    \         IEEE 802.12 interfaces.\"\n              ::= { dot12Groups 2 }\n   \
    \   END\n"
- title: 5.  Acknowledgements
  contents:
  - "5.  Acknowledgements\n   This document was produced by the IETF 100VG-AnyLAN\
    \ Working Group.\n   It is based on the work of IEEE 802.12.\n"
- title: 6.  References
  contents:
  - "6.  References\n   [1]  Information processing systems - Open Systems Interconnection\
    \ -\n        Specification of Abstract Syntax Notation One (ASN.1),\n        International\
    \ Organization for Standardization.  International\n        Standard 8824 (December,\
    \ 1987).\n   [2]  SNMPv2 Working Group, Case, J., McCloghrie, K., Rose, M., and\n\
    \        S. Waldbusser, \"Structure of Management Information for Version\n  \
    \      2 of the Simple Network Management Protocol (SNMPv2)\", RFC 1902,\n   \
    \     SNMP Research, Inc., Cisco Systems, Inc., Dover Beach\n        Consulting,\
    \ Inc., International Network Services, January 1996.\n   [3]  SNMPv2 Working\
    \ Group, Case, J., McCloghrie, K., Rose, M., and\n        S. Waldbusser, \"Textual\
    \ Conventions for Version 2 of the Simple\n        Network Management Protocol\
    \ (SNMPv2)\", RFC 1903, SNMP Research,\n        Inc., Cisco Systems, Inc., Dover\
    \ Beach Consulting, Inc.,\n        International Network Services, January 1996.\n\
    \   [4]  SNMPv2 Working Group, Case, J., McCloghrie, K., Rose, M., and\n     \
    \   S. Waldbusser, \"Conformance Statements for Version 2 of the\n        Simple\
    \ Network Management Protocol (SNMPv2)\", RFC 1904, SNMP\n        Research, Inc.,\
    \ Cisco Systems, Inc., Dover Beach Consulting,\n        Inc., International Network\
    \ Services, January 1996.\n   [5]  McCloghrie, K., and M. Rose, \"Management Information\
    \ Base for\n        Network Management of TCP/IP-based internets - MIB-II\", STD\
    \ 17,\n        RFC 1213, Hughes LAN Systems, Performance Systems International,\n\
    \        March 1991.\n   [6]  IEEE, \"Demand Priority Access Method, Physical\
    \ Layer and\n        Repeater Specifications for 100 Mb/s Operation\", IEEE Standard\n\
    \        802.12-1995\"\n   [7]  McCloghrie, K., and Kastenholz, F., \"Evolution\
    \ of the Interfaces\n        Group of MIB-II\", RFC 1573, Hughes LAN Systems,\
    \ FTP Software,\n        January 1994.\n   [8]  Kastenholz, F., \"Definitions\
    \ of Managed Objects for the\n        Ethernet-like Interface Types\", STD 50,\
    \ RFC 1643, FTP Software,\n        Inc., July, 1994.\n   [9]  Kastenholz, F.,\
    \ \"Definitions of Managed Objects for the\n        Ethernet-like Interface Types\
    \ using SMIv2\", RFC 1650, FTP\n        Software, Inc., August, 1994.\n   [10]\
    \ McCloghrie, K., and Decker, E., \"IEEE 802.5 MIB using SMIv2\",\n        RFC\
    \ 1748, Cisco Systems, Inc., December, 1994.\n   [11] McCloghrie, K., Baker, F.,\
    \ and Decker, E., \"IEEE 802.5 Station\n        Source Routing MIB using SMIv2\"\
    , RFC 1749, Cisco Systems, Inc.,\n        December, 1994.\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   Security issues are not discussed in this memo.\n"
- title: 8.  Author's Address
  contents:
  - "8.  Author's Address\n   John Flick\n   Hewlett Packard Company\n   8000 Foothills\
    \ Blvd. M/S 5556\n   Roseville, CA 95747-5556\n   Phone: +1 916 785 4018\n   Email:\
    \ johnf@hprnd.rose.hp.com\n"
