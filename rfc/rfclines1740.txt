Abstract This memo describes the format to use when sending Apple Macintosh files via MIME [BORE93].
The format is compatible with existing mechanisms for distributing Macintosh files, while allowing non  Macintosh systems access to data in standardized formats.
Introduction Files on the Macintosh consists of two parts, called forks: Data fork:
The actual data included in the file.
The Data fork is typically the only meaningful part of a Macintosh file on a non Macintosh computer system.
For example, if a Macintosh user wants to send a file of data to a user on an IBM PC, she would only send the Data fork.
Contains a collection of arbitrary attribute/value pairs, including program segments, icon bitmaps, and parametric values.
Additional information regarding Macintosh files is stored by the Finder in a hidden file, called the "Desktop Database".
Because of the complications in storing different parts of a Macintosh file in a non Macintosh filesystem that only handles consecutive data in one part, it is common to convert the Macintosh file into some other format before transferring it over the network.
The two styles of use are [APPL90]:
Apple's standard format for encoding Macintosh files as one byte stream.
Similar to AppleSingle except that the Data fork is separated from the Macintosh specific parts by the AppleDouble encoding.
AppleDouble is the preferred format for a Macintosh file that is to be included in an Internet mail message, because it provides recipients with Macintosh computers the entire document, including Icons and other Macintosh specific information, while other users easily can extract the Data fork (the actual data) as it is separated from the AppleDouble encoding.
MIME format for Apple/Macintosh specific file information 2a.
Encoding considerations:   The presence of binary data will typically require use of Content Transfer Encoding:
See separate section in the document Published specification:
Apple single & Apple double [APPL90
See separate section in the document Published specification:
Apple single & Apple double [APPL90
Detail specific to MIME based usage Macintosh documents do not always need to be sent in a special format.
Those documents with well known MIME types and non existent or trivial resource forks can be sent as regular MIME body parts, without use of AppleSingle or AppleDouble.
Documents which lack a data fork must be sent as AppleSingle.
Unless there are strong reasons not to, all other documents should normally be sent as AppleDouble.
This includes documents with non trivial resource forks, and documents without corresponding well known MIME types.
It may be valuable in some cases to allow the user to choose one format over another, either because he disagrees with the implementor's definition of "trivial" resource forks, or for reasons of his own.
AppleSingle An AppleSingle, version 2 file, is sent as one consecutive stream of bytes.
The format is described in [APPL90] with a brief summary in Appendix A.
The one and only part of the file is sent in an application/applefile message.
The first four bytes of an AppleSingle header are, in hexadecimal: 00, 05, 16, 00.
The AppleSingle file is binary data.
Hence, it may be necessary to perform a Content Transfer Encoding for transmission, depending on the underlying email transport environment.
The safest encoding is Base64, since it permits transfer over the most restricted channels.
Even though an AppleSingle file includes the original Macintosh filename, it is recommended that a name parameter be included on the Content Type header to give the recipient a hint as to what file is attached.
The value of the name parameter must be a "value" as defined by RFC 1521 [BORE93].
Note that this restricts the value to seven bit US ASCII characters.
AppleSingle example Content Type: application/applefile
; name "Computers 1/2 93" [The AppleSingle file goes here] 4.
AppleDouble An AppleDouble, version 2, file is divided in two parts:
The AppleDouble format is described in [APPL90] with a brief summary in Appendix B.
The AppleDouble file itself is sent as a multipart/appledouble MIME body part, which may have only two sub parts.
The header is sent as application/applefile and the data fork as whatever best describes it.
For example, is the data for is actually a GIF image, it should be sent as image/gif.
If no appropriate Content Type has been registered for the data type, it should be sent as an application/octet stream.
The first four bytes of an AppleDouble header are, in hexadecimal: 00, 05, 16, 07.
The AppleDouble header is binary data.
Hence, it may be necessary to perform a Content Transfer Encoding for transmission, depending on the underlying email transport environment.
The safest encoding is Base64, since it permits transfer over the most restrictive channels.
Even though an AppleDouble file includes the original Macintosh filename, it is recommended that a name parameter be included on the Content Type header of both the header and data parts of the AppleDouble file to give the recipient a hint as to what file is attached.
The value of the name parameter must be a "value" as defined by RFC 1521 [BORE93].
Note that this restricts the value to seven bit US ASCII characters.
mac part Content Type: application/applefile
My new car" [The AppleDouble header goes here]
mac part Content Type: image/gif;
[The data fork goes here]
To the extent that application/applefile facilitates the transmission of operating system sensitive data, it may open a door for easier relaxation of security rules than is intended either by the sender of the administrator of the sender's system.
The AppleSingle format In the AppleSingle format, a file's contents and attributes are stored in a single file in the foreign file system.
For example, both forks of a Macintosh file, the Finder information, and an associated comment are arranged in a single file with a simple structure.
An AppleSingle file consists of a header followed by one or more data entries.
The header consists of several fixed fields and a list of entry descriptors, each pointing to a data entry.
Each entry is optional and may or may not appear in the file.
Number of entries    2 bytes Entry descriptor for each entry:
The fields in the header file follow the conventions described in the following sections.
Magic number This field, modelled after the UNIX magic number feature, specifies the file's format.
Apple has defined the magic number for the AppleSingle format as $00051600 or 0x00051600.
This field denotes the version of AppleSingle format in the event the format evolves (more fields may be added to the header).
The version described in this note is version $00020000 or 0x00020000.
This field is all zeros ($00 or 0x00).
This field specifies how many different entries are included in the file.
It is an unsigned 16 bit number.
If the number of entries is any number other than 0, then that number of entry descriptors immediately follows the number of entries field.
The entry descriptor is made up of the following three fields:
Entry ID:   an unsigned 32 bit number, defines what the entry is.
Entry IDs range from 1 to $FFFFFFFF.
Entry ID 0 is invalid.
The length can be 0.
Predefined entry ID's Apple has defined a set of entry IDs and their values as follows:
9 Standard Macintosh Finder information Macintosh File Info   10 Macintosh file information, attributes and so on ProDOS File Info
15 AFP directory ID Apple reserves the range of entry IDs from 1 to $7FFFFFFF.
The rest of the range is available for applications to define their own entries.
Apple does not arbitrate the use of the rest of the range.
The AppleDouble format The AppleDouble format uses two files to store data, resources and attributes.
The AppleDouble Data file contains the data fork and the AppleDouble Header file contains the resource fork.
The AppleDouble Data file contains the standard Macintosh data fork with no additional header.
The AppleDouble Header file has exactly the same format as the AppleSingle file, except that it does not contain a Data fork entry.
The magic number in the AppleDouble Header file differs from the magic number in the AppleSingle Header file so that an application can tell whether it needs to look in another file for the data fork.
The magic number for the AppleDouble format is $00051607 or 0x00051607.
The entries in the AppleDouble Header file can appear in any order; however, since the resource fork is the entry that is most commonly extended (after the data fork), Apple recommends that the resource fork entry to be placed last in the file.
The data fork is easily extended because it resides by itself in the AppleDouble Data file.
This is an example of a header file for the language C which can be used when parsing the data in either an AppleSingle file or AppleDouble header.
The file is written by Lee Jones.
For definitive information, see "AppleSingle/AppleDouble   Formats for Foreign Files Developer's Note"; Apple Computer   Inc.; (c) 1990.
I don't have ProDOS or
AFP Server documentation so related   entries may be a bit skimpy.
Following items define machine specific size (for porting).
the Motorola 680x0 is a big endian architecture!
In the QuickDraw coordinate plane, each coordinate is    32767..32767.
Each point is at the intersection of a   horizontal grid line and a vertical grid line.
Horizontal   coordinates increase from left to right.
Vertical   coordinates increase from top to bottom.
This is the way   both a TV screen and page of English text are scanned:   from top left to bottom right.
#define F fSwitchLaunch 0x0020 /
appl available to multiple users
/  file contains no INIT resources  /
Finder has loaded bundle res.
/  reserved (System 7)  /
/  file contains custom icon
/ #define F fStationary   0x0800 /  file is a stationary pad  /
file has a bundle  /
/  file's icon is invisible  /
Entry ID 0 is invalid.
The rest of the range is available   for applications to define their own entry types.
"Apple does   not arbitrate the use of the rest of the range."
4 /  standard Mac comment  /
8 /  file dates; create, modify, etc  /
/  Mac Finder info & extended info  /
/  Pro DOS file info, attrib., etc  /
12 /  MS DOS file info, attributes, etc  /
14 /  AFP file info, attrib., etc  /
Given the copyright dates   of the Inside Macintosh volumes, the 'cicn' resource predominated   when the AppleSingle Developer's Note was written (most probable   candidate).
See Inside Macintosh, Volume V,
pages 64 & 80 81 for   a description of 'cicn' resources.
With System 7, Apple introduced icon families.
If entry ID 6 is one of these, take your pick.
See Inside   Macintosh, Volume VI,
pages 2 18 to 2 22 and 9 9 to 9 13, for   descriptions.
Times are stored as a "signed number of seconds before of after   12:00 a.m. (midnight), January 1, 2000 Greenwich Mean Time (GMT).
Applications must convert to their native date and time   conventions.
Any unknown entries are set to 0x80000000
/ typedef struct ASFileDates ASFileDates;
/  See older Inside Macintosh, Volume II, page 115 for   PBGetFileInfo(), and Volume IV, page 155, for PBGetCatInfo().
entry ID 9, Macintosh Finder info & extended info
ProDOS 16 and GS/OS use entire fields.
ProDOS 8 uses low   order half of each item (low byte in access & filetype, low word   in auxtype); remainder of each field should be zero filled.
; since the Developer Note   is unspecific, I've placed them in the low order portion of the   field (based on example of other ASMacInfo & ASProdosInfo).
#define AS DOS READONLY 0x01 /
file is read only  /
0x02 /  hidden file (not shown by DIR)  /
0x04 /  system file (not shown by DIR)  /
AS DOS VOLID    0x08 /  volume label (only in root dir)  /
/  file is a subdirectory
0x20 /  new or modified (needs backup)
entry ID 13, short file name on AFP server
/ typedef struct ASAfpInfo ASAfpInfo
; #define AS AFP Invisible
0x01 /  file is invisible  /
0x02 /  simultaneous access allowed  /
0x04 /  system file  /
AFP server directory ID  /
the Motorola 680x0 is a big endian architecture!
