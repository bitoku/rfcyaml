- title: __initial_text__
  contents:
  - '                     Use of Language Codes in LDAP

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1999).  All Rights Reserved.\n"
- title: 1. Abstract
  contents:
  - "1. Abstract\n   The Lightweight Directory Access Protocol [1] provides a means\
    \ for\n   clients to interrogate and modify information stored in a distributed\n\
    \   directory system.  The information in the directory is maintained as\n   attributes\
    \ [2] of entries.  Most of these attributes have syntaxes\n   which are human-readable\
    \ strings, and it is desirable to be able to\n   indicate the natural language\
    \ associated with attribute values.\n   This document describes how language codes\
    \ [3] are carried in LDAP\n   and are to be interpreted by LDAP servers.  All\
    \ implementations MUST\n   be prepared to accept language codes in the LDAP protocols.\
    \  Servers\n   may or may not be capable of storing attributes with language codes\n\
    \   in the directory.  This document does not specify how to determine\n   whether\
    \ particular attributes can or cannot have language codes.\n   The key words \"\
    MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\",\
    \ \"SHOULD NOT\", \"RECOMMENDED\",  \"MAY\", and \"OPTIONAL\" in this\n   document\
    \ are to be interpreted as described in RFC 2119 [4].\n"
- title: 2. Language Codes
  contents:
  - "2. Language Codes\n   Section 2 of RFC 1766 [3] describes the language code format\
    \ which is\n   used in LDAP.  Briefly, it is a string of ASCII alphabetic characters\n\
    \   and hyphens.  Examples include \"fr\", \"en-US\" and \"ja-JP\".\n   Language\
    \ codes are case insensitive.  For example, the language code\n   \"en-us\" is\
    \ the same as \"EN-US\" and \"en-US\".\n   Implementations MUST NOT otherwise\
    \ interpret the structure of the\n   code when comparing two codes, and MUST treat\
    \ them as simply strings\n   of characters. Client and server implementations\
    \ MUST allow any\n   arbitrary string which follows the patterns given in RFC\
    \ 1766 to be\n   used as a language code.\n"
- title: 3. Use of Language Codes in LDAP
  contents:
  - "3. Use of Language Codes in LDAP\n   This section describes how LDAP implementations\
    \ MUST interpret\n   language codes in performing operations.\n   In general,\
    \ an attribute with a language code is to be treated as a\n   subtype of the attribute\
    \ without a language code.  If a server does\n   not support storing language\
    \ codes with attribute values in the DIT,\n   then it MUST always treat an attribute\
    \ with a language code as an\n   unrecognized attribute.\n"
- title: 3.1. Attribute Description
  contents:
  - "3.1. Attribute Description\n   An attribute consists of a type, a list of options\
    \ for that type, and\n   a set of one or more values.  In LDAP, the type and the\
    \ options are\n   combined into the AttributeDescription, defined in section 4.1.5\
    \ of\n   [1]. This is represented as an attribute type name and a possibly-\n\
    \   empty list of options.  One of these options associates a natural\n   language\
    \ with values for that attribute.\n        language-option = \"lang-\" lang-code\n\
    \        lang-code = printable-ascii ; a code as defined in RFC 1766\n   Multiple\
    \ language options may be present on a particular value.\n   The language code\
    \ has no effect on the character set encoding for\n   string representations of\
    \ DirectoryString syntax values; the UTF-8\n   representation of UniversalString\
    \ (ISO 10646) is always used.\n   Examples of valid AttributeDescription:\n  \
    \      givenName;lang-en-US\n        CN;lang-ja\n   In LDAP and in examples in\
    \ this document, a directory attribute is\n   represented as an AttributeDescription\
    \ with a list of values.  Note\n   that the data could be stored in the LDAP server\
    \ in a different\n   representation.\n"
- title: 3.2. Distinguished Names and Relative Distinguished Names
  contents:
  - "3.2. Distinguished Names and Relative Distinguished Names\n   No attribute description\
    \ options are permitted in Distinguished Names\n   or Relative Distinguished Names.\
    \  Thus language codes MUST NOT be\n   used in forming DNs.\n"
- title: 3.3. Search Filter
  contents:
  - "3.3. Search Filter\n   If a language code is present in an AttributeDescription\
    \ in a search\n   filter, then only attribute values in the directory which match\
    \ the\n   base attribute type or its subtype, the language code and the\n   assertion\
    \ value match this filter.\n   Thus for example a filter of an equality match\
    \ of type \"name;lang-\n   en-US\" and assertion value \"Billy Ray\", against\
    \ the following\n   directory entry\n   objectclass: top                     DOES\
    \ NOT MATCH (wrong type)\n   objectclass: person                  DOES NOT MATCH\
    \ (wrong type)\n   name;lang-EN-US: Billy Ray           MATCHES\n   name;lang-EN-US:\
    \ Billy Bob           DOES NOT MATCH (wrong value)\n   CN;lang-en-us: Billy Ray\
    \                MATCHES\n   CN;lang-EN-US;dynamic: Billy Ray     MATCHES\n  \
    \ CN;lang-en;dynamic: Billy Ray        DOES NOT MATCH (differing lang-)\n   name:\
    \ Billy Ray                      DOES NOT MATCH (no lang-)\n   SN: Ray       \
    \                       DOES NOT MATCH (wrong value)\n   (Note that \"CN\" and\
    \ \"SN\" are subtypes of \"name\".)\n   Client implementors should however note\
    \ that providing a language\n   code in a search filter AttributeDescription will\
    \ often filter out\n   desirable values where the language code does not match\
    \ exactly.  For\n   example, the filter (name;lang-en=Billy Ray) does NOT match\
    \ the\n   attribute \"name;lang-en-US: Billy Ray\".\n   If the server does not\
    \ support storing language codes with attribute\n   values in the DIT, then any\
    \ filter which includes a language code\n   will always fail to match, as it is\
    \ an unrecognized attribute type.\n   No error would be returned because of this;\
    \ a presence filter would\n   evaluate to FALSE and all other forms to Undefined.\n\
    \   If no language code is specified in the search filter, then only the\n   base\
    \ attribute type and the assertion value need match the value in\n   the directory.\n\
    \   Thus for example a filter of an equality match of type \"name\" and\n   assertion\
    \ value \"Billy Ray\", against the following directory entry\n   objectclass:\
    \ top                     DOES NOT MATCH (wrong type)\n   objectclass: person\
    \                  DOES NOT MATCH (wrong type)\n   name;lang-EN-US: Billy Ray\
    \           MATCHES\n   name;lang-EN-US: Billy Bob           DOES NOT MATCH (wrong\
    \ value)\n   CN;lang-EN-US;dynamic: Billy Ray     MATCHES\n   CN;lang-en;dynamic:\
    \ Billy Ray        MATCHES\n   name: Billy Ray                      MATCHES\n\
    \   SN: Ray                              DOES NOT MATCH (wrong value)\n   Thus\
    \ in general, clients SHOULD NOT use the language code option in\n   AttributeDescription\
    \ fields in search filters.\n"
- title: 3.4. Compare
  contents:
  - "3.4. Compare\n   A language code can be present in an AttributeDescription used\
    \ in a\n   compare request AttributeValueAssertion.  This is to be treated by\n\
    \   servers the same as the use of language codes in a search filter with\n  \
    \ an equality match, as described in the previous section.  If there is\n   no\
    \ attribute in the entry with the same subtype and language code,\n   the noSuchAttributeType\
    \ error will be returned.\n   Thus for example a compare request of type \"name\"\
    \ and assertion value\n   \"Johann\", against an entry with all the following\
    \ directory entry\n   objectclass: top\n   objectclass: person\n   givenName;lang-de-DE:\
    \ Johann\n   CN: Johann Sibelius\n   SN: Sibelius\n   will cause the server to\
    \ return compareTrue.\n   However, if the client issued a compare request of type\
    \ \"name;lang-\n   de\" and assertion value \"Johann\" against the above entry,\
    \ the request\n   would fail with the noSuchAttributeType error.\n   If the server\
    \ does not support storing language codes with attribute\n   values in the DIT,\
    \ then any comparison which includes a language code\n   will always fail to locate\
    \ an attribute type, and noSuchAttributeType\n   will be returned.\n   Thus in\
    \ general, clients SHOULD NOT use the language code option in\n   AttributeDescription\
    \ fields in the compare request.\n"
- title: 3.5. Requested Attributes in Search
  contents:
  - "3.5. Requested Attributes in Search\n   Clients MAY provide language codes in\
    \ AttributeDescription in the\n   requested attribute list in a search request.\n\
    \   If a language code is provided in an attribute description, then only\n  \
    \ attribute values in a directory entry which have the same language\n   code\
    \ as that provided are to be returned. Thus if a client requests\n   an attribute\
    \ \"description;lang-en\", the server MUST NOT return values\n   of an attribute\
    \ \"description\" or \"description;lang-fr\".\n   Clients MAY provide in the attribute\
    \ list multiple\n   AttributeDescription which have the same base attribute type\
    \ but\n   different options. For example a client MAY provide both \"name;lang-\n\
    \   en\" and \"name;lang-fr\", and this would permit an attribute with\n   either\
    \ language code to be returned.  Note there would be no need to\n   provide both\
    \ \"name\" and \"name;lang-en\" since all subtypes of name\n   would match \"\
    name\".\n   If a server does not support storing language codes with attribute\n\
    \   values in the DIT, then any attribute descriptions in the list which\n   include\
    \ language codes are to be ignored, just as if they were\n   unknown attribute\
    \ types.\n   If a request is made specifying all attributes or an attribute is\n\
    \   requested without providing a language code, then all attribute\n   values\
    \ regardless of their language code are returned.\n   For example, if the client\
    \ requests a \"description\" attribute, and a\n   matching entry contains\n  \
    \ objectclass: top\n   objectclass: organization\n   O: Software GmbH\n   description:\
    \ software\n   description;lang-en: software products\n   description;lang-de:\
    \ Softwareprodukte\n   postalAddress: Berlin 8001 Germany\n   postalAddress;lang-de:\
    \ Berlin 8001 Deutschland\n   The server will return:\n   description: software\n\
    \   description;lang-en: software products\n   description;lang-de: Softwareprodukte\n"
- title: 3.6. Add Operation
  contents:
  - "3.6. Add Operation\n   Clients MAY provide language codes in AttributeDescription\
    \ in\n   attributes of a new entry to be created, subject to the limitation\n\
    \   that the client MUST NOT use language codes in the attribute value or\n  \
    \ values which form the RDN of the entry.\n   A client MAY provide multiple attributes\
    \ with the same attribute type\n   and value, so long as each attribute has a\
    \ different language code,\n   and at most one attribute does not have a language\
    \ code option.\n   Servers which support storing language codes in the DIT MUST\
    \ allow\n   any attribute it recognizes that has the Directory String syntax to\n\
    \   have a language option associated with it. Servers SHOULD allow\n   language\
    \ options to be associated with other attributes.\n   For example, the following\
    \ is a legal request.\n   objectclass: top\n   objectclass: person\n   objectclass:\
    \ residentialPerson\n   name: John Smith\n   CN: John Smith\n   CN;lang-en: John\
    \ Smith\n   SN: Smith\n   streetAddress: 1 University Street\n   streetAddress;lang-en:\
    \ 1 University Street\n   streetAddress;lang-fr: 1 rue Universite\n   houseIdentifier;lang-fr:\
    \ 9e etage\n   If a server does not support storing language codes with attribute\n\
    \   values in the DIT, then it MUST treat an AttributeDescription with a\n   language\
    \ code as an unrecognized attribute. If the server forbids the\n   addition of\
    \ unrecognized attributes then it MUST fail the add request\n   with the appropriate\
    \ result code.\n"
- title: 3.7. Modify Operation
  contents:
  - "3.7. Modify Operation\n   A client MAY provide a language code in an AttributeDescription\
    \ as\n   part of a modification element in the modify operation.\n   Attribute\
    \ types and language codes MUST match exactly against values\n   stored in the\
    \ directory.  For example, if the modification is a\n   \"delete\", then if the\
    \ stored values to be deleted have a language\n   code, the language code MUST\
    \ be provided in the modify operation, and\n   if the stored values to be deleted\
    \ do not have a language code, then\n   no language code is to be provided.\n\
    \   If the server does not support storing language codes with attribute\n   values\
    \ in the DIT, then it MUST treat an AttributeDescription with a\n   language code\
    \ as an unrecognized attribute, and MUST fail the request\n   with an appropriate\
    \ result code.\n"
- title: 3.8. Diagnostic Messages
  contents:
  - "3.8. Diagnostic Messages\n   Servers SHOULD use only printable ASCII characters\
    \ in the\n   errorMessage field, as not all clients will be able to display the\n\
    \   full range of Unicode.\n"
- title: 4. Differences from X.500(1997)
  contents:
  - "4. Differences from X.500(1997)\n   X.500(1997) defines a different mechanism,\
    \ contexts, as the means of\n   representing language tags.  This section summarizes\
    \ the major\n   differences in approach.\n   a) An X.500 operation which has specified\
    \ a language code on a value\n      matches a value in the directory without a\
    \ language code.\n   b) LDAP references RFC 1766, which allows for IANA registration\
    \ of\n      new tags.\n   c) LDAP does not allow language codes in distinguished\
    \ names.\n   d) X.500 describes subschema administration procedures to allow\n\
    \      language codes to be associated with particular attributes types.\n"
- title: 5. Security Considerations
  contents:
  - "5. Security Considerations\n   There are no known security considerations for\
    \ this document.  See\n   the security considerations sections of [1] and [2]\
    \ for security\n   considerations of LDAP in general.\n"
- title: 6. Acknowledgements
  contents:
  - "6. Acknowledgements\n   This document is a product of the IETF ASID and LDAPEXT\
    \ working\n   groups.  Martin Duerst provided many valuable comments on an earlier\n\
    \   version of this document.\n"
- title: 7. Bibliography
  contents:
  - "7. Bibliography\n   [1] Wahl, M., Howes, T. and S. Kille, \"Lightweight Directory\
    \ Access\n       Protocol (v3)\", RFC 2251, December 1997.\n   [2] Wahl, M., Coulbeck,\
    \ A., Howes, T. and S. Kille, \"Lightweight\n       X.500 Directory Access Protocol\
    \ Attribute Syntax Definitions\",\n       RFC 2252, December 1997.\n   [3] Alvestrand,\
    \ H.,\"Tags for the Identification of Languages\", RFC\n       1766, March 1995.\n\
    \   [4] Bradner, S., \"Key words for use in RFCs to Indicate Requirement\n   \
    \    Levels\", BCP 14, RFC 2119, March 1997.\n"
- title: 8. Authors' Addresses
  contents:
  - "8. Authors' Addresses\n   Mark Wahl\n   Innosoft International, Inc.\n   8911\
    \ Capital of Texas Hwy Suite 4140\n   Austin, TX 78759 USA\n   EMail:  M.Wahl@innosoft.com\n\
    \   Tim Howes\n   Netscape Communications Corp.\n   501 E. Middlefield Rd\n  \
    \ Mountain View, CA 94043 USA\n   Phone:  +1 650 937-3419\n   EMail:   howes@netscape.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (1999).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
