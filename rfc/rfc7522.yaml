- contents:
  - "         Security Assertion Markup Language (SAML) 2.0 Profile\n      for OAuth
    2.0 Client Authentication and Authorization Grants\n"
  title: __initial_text__
- contents:
  - "Abstract\n   This specification defines the use of a Security Assertion Markup\n
    \  Language (SAML) 2.0 Bearer Assertion as a means for requesting an\n   OAuth
    2.0 access token as well as for client authentication.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7522.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2015 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .
    . . . . .   2\n     1.1.  Notational Conventions  . . . . . . . . . . . . . .
    . . .   4\n     1.2.  Terminology . . . . . . . . . . . . . . . . . . . . . .
    .   4\n   2.  HTTP Parameter Bindings for Transporting Assertions . . . . .   4\n
    \    2.1.  Using SAML Assertions as Authorization Grants . . . . . .   4\n     2.2.
    \ Using SAML Assertions for Client Authentication . . . . .   5\n   3.  Assertion
    Format and Processing Requirements  . . . . . . . .   6\n     3.1.  Authorization
    Grant Processing  . . . . . . . . . . . . .   8\n     3.2.  Client Authentication
    Processing  . . . . . . . . . . . .   9\n   4.  Authorization Grant Example .
    . . . . . . . . . . . . . . . .   9\n   5.  Interoperability Considerations .
    . . . . . . . . . . . . . .  11\n   6.  Security Considerations . . . . . . .
    . . . . . . . . . . . .  11\n   7.  Privacy Considerations  . . . . . . . . .
    . . . . . . . . . .  12\n   8.  IANA Considerations . . . . . . . . . . . . .
    . . . . . . . .  12\n     8.1.  Sub-Namespace Registration of\n           urn:ietf:params:oauth:grant-type:saml2-bearer
    . . . . . .  12\n     8.2.  Sub-Namespace Registration of\n           urn:ietf:params:oauth:client-assertion-type:saml2-bearer
    \  13\n   9.  References  . . . . . . . . . . . . . . . . . . . . . . . . .  13\n
    \    9.1.  Normative References  . . . . . . . . . . . . . . . . . .  13\n     9.2.
    \ Informative References  . . . . . . . . . . . . . . . . .  14\n   Acknowledgements
    \ . . . . . . . . . . . . . . . . . . . . . . . .  15\n   Authors' Addresses  .
    . . . . . . . . . . . . . . . . . . . . . .  15\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   The Security Assertion Markup Language (SAML) 2.0\n   [OASIS.saml-core-2.0-os]
    is an XML-based framework that allows\n   identity and security information to
    be shared across security\n   domains.  The SAML specification, while primarily
    targeted at\n   providing cross domain Web browser single sign-on (SSO), was also\n
    \  designed to be modular and extensible to facilitate use in other\n   contexts.\n
    \  The Assertion, an XML security token, is a fundamental construct of\n   SAML
    that is often adopted for use in other protocols and\n   specifications.  (Some
    examples include [OASIS.WSS-SAMLTokenProfile]\n   and [OASIS.WS-Fed].)  An Assertion
    is generally issued by an Identity\n   Provider and consumed by a Service Provider
    that relies on its\n   content to identify the Assertion's subject for security-related\n
    \  purposes.\n   The OAuth 2.0 Authorization Framework [RFC6749] provides a method
    for\n   making authenticated HTTP requests to a resource using an access\n   token.
    \ Access tokens are issued to third-party clients by an\n   authorization server
    (AS) with the (sometimes implicit) approval of\n   the resource owner.  In OAuth,
    an authorization grant is an abstract\n   term used to describe intermediate credentials
    that represent the\n   resource owner authorization.  An authorization grant is
    used by the\n   client to obtain an access token.  Several authorization grant
    types\n   are defined to support a wide range of client types and user\n   experiences.
    \ OAuth also allows for the definition of new extension\n   grant types to support
    additional clients or to provide a bridge\n   between OAuth and other trust frameworks.
    \ Finally, OAuth allows the\n   definition of additional authentication mechanisms
    to be used by\n   clients when interacting with the authorization server.\n   \"Assertion
    Framework for OAuth 2.0 Client Authentication and\n   Authorization Grants\" [RFC7521]
    is an abstract extension to OAuth 2.0\n   that provides a general framework for
    the use of assertions as client\n   credentials and/or authorization grants with
    OAuth 2.0.  This\n   specification profiles the OAuth Assertion Framework [RFC7521]
    to\n   define an extension grant type that uses a SAML 2.0 Bearer Assertion\n
    \  to request an OAuth 2.0 access token as well as for use as client\n   credentials.
    \ The format and processing rules for the SAML Assertion\n   defined in this specification
    are intentionally similar, though not\n   identical, to those in the Web Browser
    SSO profile defined in the\n   SAML Profiles [OASIS.saml-profiles-2.0-os] specification.
    \ This\n   specification is reusing, to the extent reasonable, concepts and\n
    \  patterns from that well-established profile.\n   This document defines how
    a SAML Assertion can be used to request an\n   access token when a client wishes
    to utilize an existing trust\n   relationship, expressed through the semantics
    of the SAML Assertion,\n   without a direct user approval step at the authorization
    server.  It\n   also defines how a SAML Assertion can be used as a client\n   authentication
    mechanism.  The use of an Assertion for client\n   authentication is orthogonal
    to and separable from using an Assertion\n   as an authorization grant.  They
    can be used either in combination or\n   separately.  Client assertion authentication
    is nothing more than an\n   alternative way for a client to authenticate to the
    token endpoint,\n   and it must be used in conjunction with some grant type to
    form a\n   complete and meaningful protocol request.  Assertion authorization\n
    \  grants may be used with or without client authentication or\n   identification.
    \ Whether or not client authentication is needed in\n   conjunction with an assertion
    authorization grant, as well as the\n   supported types of client authentication,
    are policy decisions at the\n   discretion of the authorization server.\n   The
    process by which the client obtains the SAML Assertion, prior to\n   exchanging
    it with the authorization server or using it for client\n   authentication, is
    out of scope.\n"
  - contents:
    - "1.1.  Notational Conventions\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\",
      \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\",
      and \"OPTIONAL\" in this\n   document are to be interpreted as described in
      RFC 2119 [RFC2119].\n   Unless otherwise noted, all the protocol parameter names
      and values\n   are case sensitive.\n"
    title: 1.1.  Notational Conventions
  - contents:
    - "1.2.  Terminology\n   All terms are as defined in the following specifications:
      \"The OAuth\n   2.0 Authorization Framework\" [RFC6749], the OAuth Assertion
      Framework\n   [RFC7521], and \"Assertions and Protocols for the OASIS Security\n
      \  Assertion Markup Language (SAML) V2.0\" [OASIS.saml-core-2.0-os].\n"
    title: 1.2.  Terminology
  title: 1.  Introduction
- contents:
  - "2.  HTTP Parameter Bindings for Transporting Assertions\n   The OAuth Assertion
    Framework [RFC7521] defines generic HTTP\n   parameters for transporting assertions
    during interactions with a\n   token endpoint.  This section defines specific
    parameters and\n   treatments of those parameters for use with SAML 2.0 Bearer\n
    \  Assertions.\n"
  - contents:
    - "2.1.  Using SAML Assertions as Authorization Grants\n   To use a SAML Bearer
      Assertion as an authorization grant, the client\n   uses an access token request
      as defined in Section 4 of the OAuth\n   Assertion Framework [RFC7521] with
      the following specific parameter\n   values and encodings.\n   The value of
      the \"grant_type\" parameter is\n   \"urn:ietf:params:oauth:grant-type:saml2-bearer\".\n
      \  The value of the \"assertion\" parameter contains a single SAML 2.0\n   Assertion.
      \ It MUST NOT contain more than one SAML 2.0 Assertion.\n   The SAML Assertion
      XML data MUST be encoded using base64url, where\n   the encoding adheres to
      the definition in Section 5 of RFC 4648\n   [RFC4648] and where the padding
      bits are set to zero.  To avoid the\n   need for subsequent encoding steps (by
      \"application/x-www-form-\n   urlencoded\" [W3C.REC-html401-19991224], for example),
      the base64url-\n   encoded data MUST NOT be line wrapped and pad characters
      (\"=\") MUST\n   NOT be included.\n   The \"scope\" parameter may be used, as
      defined in the OAuth Assertion\n   Framework [RFC7521], to indicate the requested
      scope.\n   Authentication of the client is optional, as described in\n   Section
      3.2.1 of OAuth 2.0 [RFC6749] and consequently, the\n   \"client_id\" is only
      needed when a form of client authentication that\n   relies on the parameter
      is used.\n   The following example demonstrates an access token request with
      an\n   Assertion as an authorization grant (with extra line breaks for\n   display
      purposes only):\n     POST /token.oauth2 HTTP/1.1\n     Host: as.example.com\n
      \    Content-Type: application/x-www-form-urlencoded\n     grant_type=urn%3Aietf%3Aparams%3Aoauth%3Agrant-type%3Asaml2-bearer&\n
      \    assertion=PHNhbWxwOl...[omitted for brevity]...ZT4\n"
    title: 2.1.  Using SAML Assertions as Authorization Grants
  - contents:
    - "2.2.  Using SAML Assertions for Client Authentication\n   To use a SAML Bearer
      Assertion for client authentication, the client\n   uses the following parameter
      values and encodings.\n   The value of the \"client_assertion_type\" parameter
      is\n   \"urn:ietf:params:oauth:client-assertion-type:saml2-bearer\".\n   The
      value of the \"client_assertion\" parameter MUST contain a single\n   SAML 2.0
      Assertion.  The SAML Assertion XML data MUST be encoded\n   using base64url,
      where the encoding adheres to the definition in\n   Section 5 of RFC 4648 [RFC4648]
      and where the padding bits are set to\n   zero.  To avoid the need for subsequent
      encoding steps (by\n   \"application/x-www-form-urlencoded\" [W3C.REC-html401-19991224],
      for\n   example), the base64url-encoded data SHOULD NOT be line wrapped and\n
      \  pad characters (\"=\") SHOULD NOT be included.\n   The following example
      demonstrates a client authenticating using an\n   Assertion during the presentation
      of an authorization code grant in\n   an access token request (with extra line
      breaks for display purposes\n   only):\n     POST /token.oauth2 HTTP/1.1\n     Host:
      as.example.com\n     Content-Type: application/x-www-form-urlencoded\n     grant_type=authorization_code&\n
      \    code=n0esc3NRze7LTCu7iYzS6a5acc3f0ogp4&\n     client_assertion_type=urn%3Aietf%3Aparams%3Aoauth\n
      \    %3Aclient-assertion-type%3Asaml2-bearer&\n     client_assertion=PHNhbW...[omitted
      for brevity]...ZT\n"
    title: 2.2.  Using SAML Assertions for Client Authentication
  title: 2.  HTTP Parameter Bindings for Transporting Assertions
- contents:
  - "3.  Assertion Format and Processing Requirements\n   In order to issue an access
    token response as described in OAuth 2.0\n   [RFC6749] or to rely on an Assertion
    for client authentication, the\n   authorization server MUST validate the Assertion
    according to the\n   criteria below.  Application of additional restrictions and
    policy\n   are at the discretion of the authorization server.\n   1.   The Assertion's
    <Issuer> element MUST contain a unique\n        identifier for the entity that
    issued the Assertion.  In the\n        absence of an application profile specifying
    otherwise,\n        compliant applications MUST compare Issuer values using the\n
    \       Simple String Comparison method defined in Section 6.2.1 of RFC\n        3986
    [RFC3986].\n   2.   The Assertion MUST contain a <Conditions> element with an\n
    \       <AudienceRestriction> element with an <Audience> element that\n        identifies
    the authorization server as an intended audience.\n        Section 2.5.1.4 of
    \"Assertions and Protocols for the OASIS\n        Security Assertion Markup Language
    (SAML) V2.0\"\n        [OASIS.saml-core-2.0-os] defines the <AudienceRestriction>
    and\n        <Audience> elements and, in addition to the URI references\n        discussed
    there, the token endpoint URL of the authorization\n        server MAY be used
    as a URI that identifies the authorization\n        server as an intended audience.
    \ The authorization server MUST\n        reject any Assertion that does not contain
    its own identity as\n        the intended audience.  In the absence of an application
    profile\n        specifying otherwise, compliant applications MUST compare the\n
    \       Audience values using the Simple String Comparison method\n        defined
    in Section 6.2.1 of RFC 3986 [RFC3986].  As noted in\n        Section 5, the precise
    strings to be used as the Audience for a\n        given authorization server must
    be configured out of band by the\n        authorization server and the issuer
    of the Assertion.\n   3.   The Assertion MUST contain a <Subject> element identifying
    the\n        principal that is the subject of the Assertion.  Additional\n        information
    identifying the subject/principal MAY be included in\n        an <AttributeStatement>.\n
    \       A.  For the authorization grant, the Subject typically\n            identifies
    an authorized accessor for which the access token\n            is being requested
    (i.e., the resource owner or an\n            authorized delegate), but in some
    cases, it may be a\n            pseudonymous identifier or other value denoting
    an anonymous\n            user.\n        B.  For client authentication, the Subject
    MUST be the\n            \"client_id\" of the OAuth client.\n   4.   The Assertion
    MUST have an expiry that limits the time window\n        during which it can be
    used.  The expiry can be expressed either\n        as the NotOnOrAfter attribute
    of the <Conditions> element or as\n        the NotOnOrAfter attribute of a suitable\n
    \       <SubjectConfirmationData> element.\n   5.   The <Subject> element MUST
    contain at least one\n        <SubjectConfirmation> element that has a Method
    attribute with a\n        value of \"urn:oasis:names:tc:SAML:2.0:cm:bearer\".
    \ If the\n        Assertion does not have a suitable NotOnOrAfter attribute on
    the\n        <Conditions> element, the <SubjectConfirmation> element MUST\n        contain
    a <SubjectConfirmationData> element.  When present, the\n        <SubjectConfirmationData>
    element MUST have a Recipient\n        attribute with a value indicating the token
    endpoint URL of the\n        authorization server (or an acceptable alias).  The\n
    \       authorization server MUST verify that the value of the Recipient\n        attribute
    matches the token endpoint URL (or an acceptable\n        alias) to which the
    Assertion was delivered.  The\n        <SubjectConfirmationData> element MUST
    have a NotOnOrAfter\n        attribute that limits the window during which the
    Assertion can\n        be confirmed.  The <SubjectConfirmationData> element MAY
    also\n        contain an Address attribute limiting the client address from\n
    \       which the Assertion can be delivered.  Verification of the\n        Address
    is at the discretion of the authorization server.\n   6.   The authorization server
    MUST reject the entire Assertion if the\n        NotOnOrAfter instant on the <Conditions>
    element has passed\n        (subject to allowable clock skew between systems).
    \ The\n        authorization server MUST reject the <SubjectConfirmation> (but\n
    \       MAY still use the rest of the Assertion) if the NotOnOrAfter\n        instant
    on the <SubjectConfirmationData> has passed (subject to\n        allowable clock
    skew).  Note that the authorization server may\n        reject Assertions with
    a NotOnOrAfter instant that is\n        unreasonably far in the future.  The authorization
    server MAY\n        ensure that Bearer Assertions are not replayed, by maintaining\n
    \       the set of used ID values for the length of time for which the\n        Assertion
    would be considered valid based on the applicable\n        NotOnOrAfter instant.\n
    \  7.   If the Assertion issuer directly authenticated the subject, the\n        Assertion
    SHOULD contain a single <AuthnStatement> representing\n        that authentication
    event.  If the Assertion was issued with the\n        intention that the client
    act autonomously on behalf of the\n        subject, an <AuthnStatement> SHOULD
    NOT be included and the\n        client presenting the Assertion SHOULD be identified
    in the\n        <NameID> or similar element in the <SubjectConfirmation>\n        element,
    or by other available means like \"SAML V2.0 Condition\n        for Delegation
    Restriction\" [OASIS.saml-deleg-cs].\n   8.   Other statements, in particular
    <AttributeStatement> elements,\n        MAY be included in the Assertion.\n   9.
    \  The Assertion MUST be digitally signed or have a Message\n        Authentication
    Code (MAC) applied by the issuer.  The\n        authorization server MUST reject
    Assertions with an invalid\n        signature or MAC.\n   10.  Encrypted elements
    MAY appear in place of their plaintext\n        counterparts as defined in [OASIS.saml-core-2.0-os].\n
    \  11.  The authorization server MUST reject an Assertion that is not\n        valid
    in all other respects per [OASIS.saml-core-2.0-os], such\n        as (but not
    limited to) all content within the Conditions\n        element including the NotOnOrAfter
    and NotBefore attributes,\n        unknown condition types, etc.\n"
  - contents:
    - "3.1.  Authorization Grant Processing\n   Assertion authorization grants may
      be used with or without client\n   authentication or identification.  Whether
      or not client\n   authentication is needed in conjunction with an Assertion\n
      \  authorization grant, as well as the supported types of client\n   authentication,
      are policy decisions at the discretion of the\n   authorization server.  However,
      if client credentials are present in\n   the request, the authorization server
      MUST validate them.\n   If the Assertion is not valid (including if its subject
      confirmation\n   requirements cannot be met), the authorization server constructs
      an\n   error response as defined in OAuth 2.0 [RFC6749].  The value of the\n
      \  \"error\" parameter MUST be the \"invalid_grant\" error code.  The\n   authorization
      server MAY include additional information regarding the\n   reasons the Assertion
      was considered invalid using the\n   \"error_description\" or \"error_uri\"
      parameters.\n   For example:\n     HTTP/1.1 400 Bad Request\n     Content-Type:
      application/json\n     Cache-Control: no-store\n     {\n       \"error\":\"invalid_grant\",\n
      \      \"error_description\":\"Audience validation failed\"\n     }\n"
    title: 3.1.  Authorization Grant Processing
  - contents:
    - "3.2.  Client Authentication Processing\n   If the client Assertion is not valid
      (including if its subject\n   confirmation requirements cannot be met), the
      authorization server\n   constructs an error response as defined in OAuth 2.0
      [RFC6749].  The\n   value of the \"error\" parameter MUST be the \"invalid_client\"
      error\n   code.  The authorization server MAY include additional information\n
      \  regarding the reasons the Assertion was considered invalid using the\n   \"error_description\"
      or \"error_uri\" parameters.\n"
    title: 3.2.  Client Authentication Processing
  title: 3.  Assertion Format and Processing Requirements
- contents:
  - "4.  Authorization Grant Example\n   The following examples illustrate what a
    conforming Assertion and an\n   access token request would look like.\n   The
    example shows an assertion issued and signed by the SAML Identity\n   Provider
    identified as \"https://saml-idp.example.com\".  The subject\n   of the Assertion
    is identified by email address as\n   \"brian@example.com\", who authenticated
    to the Identity Provider by\n   means of a digital signature where the key was
    validated as part of\n   an X.509 Public Key Infrastructure.  The intended audience
    of the\n   Assertion is \"https://saml-sp.example.net\", which is an identifier\n
    \  for a SAML Service Provider with which the authorization server\n   identifies
    itself.  The Assertion is sent as part of an access token\n   request to the authorization
    server's token endpoint at\n   \"https://authz.example.net/token.oauth2\".\n   Below
    is an example SAML 2.0 Assertion (whitespace formatting is for\n   display purposes
    only):\n     <Assertion IssueInstant=\"2010-10-01T20:07:34.619Z\"\n       ID=\"ef1xsbZxPV2oqjd7HTLRLIBlBb7\"\n
    \      Version=\"2.0\"\n       xmlns=\"urn:oasis:names:tc:SAML:2.0:assertion\">\n
    \     <Issuer>https://saml-idp.example.com</Issuer>\n      <ds:Signature xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\">\n
    \      [...omitted for brevity...]\n      </ds:Signature>\n      <Subject>\n       <NameID\n
    \       Format=\"urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress\">\n        brian@example.com\n
    \      </NameID>\n       <SubjectConfirmation\n         Method=\"urn:oasis:names:tc:SAML:2.0:cm:bearer\">\n
    \       <SubjectConfirmationData\n          NotOnOrAfter=\"2010-10-01T20:12:34.619Z\"\n
    \         Recipient=\"https://authz.example.net/token.oauth2\"/>\n        </SubjectConfirmation>\n
    \      </Subject>\n       <Conditions>\n         <AudienceRestriction>\n           <Audience>https://saml-sp.example.net</Audience>\n
    \        </AudienceRestriction>\n       </Conditions>\n       <AuthnStatement
    AuthnInstant=\"2010-10-01T20:07:34.371Z\">\n         <AuthnContext>\n           <AuthnContextClassRef>\n
    \            urn:oasis:names:tc:SAML:2.0:ac:classes:X509\n           </AuthnContextClassRef>\n
    \        </AuthnContext>\n       </AuthnStatement>\n     </Assertion>\n                   Figure
    1: Example SAML 2.0 Assertion\n   To present the Assertion shown in the previous
    example as part of an\n   access token request, for example, the client might
    make the\n   following HTTPS request (with extra line breaks for display purposes\n
    \  only):\n     POST /token.oauth2 HTTP/1.1\n     Host: authz.example.net\n     Content-Type:
    application/x-www-form-urlencoded\n     grant_type=urn%3Aietf%3Aparams%3Aoauth%3Agrant-type%3Asaml2-\n
    \    bearer&assertion=PEFzc2VydGlvbiBJc3N1ZUluc3RhbnQ9IjIwMTEtMDU\n     [...omitted
    for brevity...]aG5TdGF0ZW1lbnQ-PC9Bc3NlcnRpb24-\n                         Figure
    2: Example Request\n"
  title: 4.  Authorization Grant Example
- contents:
  - "5.  Interoperability Considerations\n   Agreement between system entities regarding
    identifiers, keys, and\n   endpoints is required in order to achieve interoperable
    deployments\n   of this profile.  Specific items that require agreement are as\n
    \  follows: values for the Issuer and Audience identifiers, the location\n   of
    the token endpoint, the key used to apply and verify the digital\n   signature
    over the Assertion, one-time use restrictions on\n   Assertions, maximum Assertion
    lifetime allowed, and the specific\n   Subject and attribute requirements of the
    Assertion.  The exchange of\n   such information is explicitly out of scope for
    this specification,\n   and typical deployment of it will be done alongside existing
    SAML Web\n   SSO deployments that have already established a means of exchanging\n
    \  such information.  \"Metadata for the OASIS Security Assertion Markup\n   Language
    (SAML) V2.0\" [OASIS.saml-metadata-2.0-os] specifies one\n   common method of
    exchanging SAML-related information about system\n   entities.\n   The RSA-SHA256
    algorithm, from [RFC6931], is a mandatory-to-implement\n   XML signature algorithm
    for this profile.\n"
  title: 5.  Interoperability Considerations
- contents:
  - "6.  Security Considerations\n   The security considerations described within
    the following\n   specifications are all applicable to this document: \"Assertion\n
    \  Framework for OAuth 2.0 Client Authentication and Authorization\n   Grants\"
    [RFC7521], \"The OAuth 2.0 Authorization Framework\" [RFC6749],\n   and \"Security
    and Privacy Considerations for the OASIS Security\n   Assertion Markup Language
    (SAML) V2.0\"\n   [OASIS.saml-sec-consider-2.0-os].\n   The specification does
    not mandate replay protection for the SAML\n   Assertion usage for either the
    authorization grant or for client\n   authentication.  It is an optional feature,
    which implementations may\n   employ at their own discretion.\n"
  title: 6.  Security Considerations
- contents:
  - "7.  Privacy Considerations\n   A SAML Assertion may contain privacy-sensitive
    information and, to\n   prevent disclosure of such information to unintended parties,
    should\n   only be transmitted over encrypted channels, such as Transport Layer\n
    \  Security (TLS).  In cases where it is desirable to prevent disclosure\n   of
    certain information to the client, the Subject and/or individual\n   attributes
    of a SAML Assertion should be encrypted to the\n   authorization server.\n   Deployments
    should determine the minimum amount of information\n   necessary to complete the
    exchange and include only that information\n   in an Assertion (typically by limiting
    what information is included\n   in an <AttributeStatement> or by omitting it
    altogether).  In some\n   cases, the Subject can be a value representing an anonymous
    or\n   pseudonymous user, as described in Section 6.3.1 of the OAuth\n   Assertion
    Framework [RFC7521].\n"
  title: 7.  Privacy Considerations
- contents:
  - '8.  IANA Considerations

    '
  - contents:
    - "8.1.  Sub-Namespace Registration of\n      urn:ietf:params:oauth:grant-type:saml2-bearer\n
      \  This section registers the value \"grant-type:saml2-bearer\" in the\n   IANA
      \"OAuth URI\" registry established by \"An IETF URN Sub-Namespace\n   for OAuth\"
      [RFC6755].\n   o  URN: urn:ietf:params:oauth:grant-type:saml2-bearer\n   o  Common
      Name: SAML 2.0 Bearer Assertion Grant Type Profile for\n      OAuth 2.0\n   o
      \ Change Controller: IESG\n   o  Specification Document: RFC 7522\n"
    title: 8.1.  Sub-Namespace Registration of
  - contents:
    - "8.2.  Sub-Namespace Registration of\n      urn:ietf:params:oauth:client-assertion-type:saml2-bearer\n
      \  This section registers the value \"client-assertion-type:saml2-bearer\"\n
      \  in the IANA \"OAuth URI\" registry established by \"An IETF URN Sub-\n   Namespace
      for OAuth\" [RFC6755].\n   o  URN: urn:ietf:params:oauth:client-assertion-type:saml2-bearer\n
      \  o  Common Name: SAML 2.0 Bearer Assertion Profile for OAuth 2.0\n      Client
      Authentication\n   o  Change Controller: IESG\n   o  Specification Document:
      RFC 7522\n"
    title: 8.2.  Sub-Namespace Registration of
  title: 8.  IANA Considerations
- contents:
  - '9.  References

    '
  - contents:
    - "9.1.  Normative References\n   [OASIS.saml-core-2.0-os]\n              Cantor,
      S., Kemp, J., Philpott, R., and E. Maler,\n              \"Assertions and Protocols
      for the OASIS Security Assertion\n              Markup Language (SAML) V2.0\",
      OASIS Standard\n              saml-core-2.0-os, March 2005, <http://docs.oasis-open.org/\n
      \             security/saml/v2.0/saml-core-2.0-os.pdf>.\n   [OASIS.saml-deleg-cs]\n
      \             Cantor, S., Ed., \"SAML V2.0 Condition for Delegation\n              Restriction
      Version 1\", Committee Specification 01,\n              November 2009, <http://docs.oasis-open.org/\n
      \             security/saml/Post2.0/sstc-saml-delegation-cs-01.html>.\n   [OASIS.saml-sec-consider-2.0-os]\n
      \             Hirsch, F., Philpott, R., and E. Maler, \"Security and\n              Privacy
      Considerations for the OASIS Security Assertion\n              Markup Language
      (SAML) V2.0\", OASIS Standard\n              saml-sec-consider-2.0-os, March
      2005,\n              <http://docs.oasis-open.org/security/saml/v2.0/\n              saml-sec-consider-2.0-os.pdf>.\n
      \  [RFC2119]  Bradner, S., \"Key words for use in RFCs to Indicate\n              Requirement
      Levels\", BCP 14, RFC 2119,\n              DOI 10.17487/RFC2119, March 1997,\n
      \             <http://www.rfc-editor.org/info/rfc2119>.\n   [RFC3986]  Berners-Lee,
      T., Fielding, R., and L. Masinter, \"Uniform\n              Resource Identifier
      (URI): Generic Syntax\", STD 66,\n              RFC 3986, DOI 10.17487/RFC3986,
      January 2005,\n              <http://www.rfc-editor.org/info/rfc3986>.\n   [RFC4648]
      \ Josefsson, S., \"The Base16, Base32, and Base64 Data\n              Encodings\",
      RFC 4648, DOI 10.17487/RFC4648, October 2006,\n              <http://www.rfc-editor.org/info/rfc4648>.\n
      \  [RFC6749]  Hardt, D., Ed., \"The OAuth 2.0 Authorization Framework\",\n              RFC
      6749, DOI 10.17487/RFC6749, October 2012,\n              <http://www.rfc-editor.org/info/rfc6749>.\n
      \  [RFC6931]  Eastlake 3rd, D., \"Additional XML Security Uniform\n              Resource
      Identifiers (URIs)\", RFC 6931,\n              DOI 10.17487/RFC6931, April 2013,\n
      \             <http://www.rfc-editor.org/info/rfc6931>.\n   [RFC7521]  Campbell,
      B., Mortimore, C., Jones, M., and Y. Goland,\n              \"Assertion Framework
      for OAuth 2.0 Client Authentication\n              and Authorization Grants\",
      RFC 7521, DOI 10.17487/RFC7521,\n              May 2015, <http://www.rfc-editor.org/info/rfc7521>.\n"
    title: 9.1.  Normative References
  - contents:
    - "9.2.  Informative References\n   [OASIS.WS-Fed]\n              Goodner, M.
      and A. Nadalin, \"Web Services Federation\n              Language (WS-Federation)
      Version 1.2\", OASIS Standard, May\n              2009, <http://docs.oasis-open.org/wsfed/\n
      \             federation/v1.2/os/ws-federation-1.2-spec-os.html>.\n   [OASIS.WSS-SAMLTokenProfile]\n
      \             Monzillo, R., Kaler, C., Nadalin, T., Hallam-Baker, P.,\n              and
      C. Milono, \"Web Services Security SAML Token Profile\n              Version
      1.1.1\", OASIS Standard, May 2012,\n              <http://docs.oasis-open.org/wss-m/wss/v1.1.1/\n
      \             wss-SAMLTokenProfile-v1.1.1.html>.\n   [OASIS.saml-metadata-2.0-os]\n
      \             Cantor, S., Moreh, J., Philpott, R., and E. Maler,\n              \"Metadata
      for the OASIS Security Assertion Markup Language\n              (SAML) V2.0\",
      OASIS Standard saml-metadata-2.0-os, March\n              2005, <http://docs.oasis-open.org/security/saml/v2.0/\n
      \             saml-metadata-2.0-os.pdf>.\n   [OASIS.saml-profiles-2.0-os]\n
      \             Hughes, J., Cantor, S., Hodges, J., Hirsch, F., Mishra,\n              P.,
      Philpott, R., and E. Maler, \"Profiles for the OASIS\n              Security
      Assertion Markup Language (SAML) V2.0\", OASIS\n              Standard OASIS.saml-profiles-2.0-os,
      March 2005,\n              <http://docs.oasis-open.org/security/saml/v2.0/\n
      \             saml-profiles-2.0-os.pdf>.\n   [RFC6755]  Campbell, B. and H.
      Tschofenig, \"An IETF URN Sub-Namespace\n              for OAuth\", RFC 6755,
      DOI 10.17487/RFC6755, October 2012,\n              <http://www.rfc-editor.org/info/rfc6755>.\n
      \  [W3C.REC-html401-19991224]\n              Raggett, D., Hors, A., and I. Jacobs,
      \"HTML 4.01\n              Specification\", World Wide Web Consortium Recommendation\n
      \             REC-html401-19991224, December 1999,\n              <http://www.w3.org/TR/1999/REC-html401-19991224>.\n"
    title: 9.2.  Informative References
  title: 9.  References
- contents:
  - "Acknowledgements\n   The following people contributed wording and concepts to
    this\n   document: Paul Madsen, Patrick Harding, Peter Motykowski, Eran\n   Hammer,
    Peter Saint-Andre, Ian Barnett, Eric Fazendin, Torsten\n   Lodderstedt, Susan
    Harper, Scott Tomilson, Scott Cantor, Hannes\n   Tschofenig, David Waite, Phil
    Hunt, and Mukesh Bhatnagar.\n"
  title: Acknowledgements
- contents:
  - "Authors' Addresses\n   Brian Campbell\n   Ping Identity\n   EMail: brian.d.campbell@gmail.com\n
    \  Chuck Mortimore\n   Salesforce.com\n   EMail: cmortimore@salesforce.com\n   Michael
    B. Jones\n   Microsoft\n   EMail: mbj@microsoft.com\n   URI:   http://self-issued.info/\n"
  title: Authors' Addresses
