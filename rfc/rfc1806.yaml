- title: __initial_text__
  contents:
  - "               Communicating Presentation Information in\n                  \
    \         Internet Messages:\n                     The Content-Disposition Header\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo defines an Experimental Protocol for the Internet\n\
    \   community.  This memo does not specify an Internet standard of any\n   kind.\
    \  Discussion and suggestions for improvement are requested.\n   Distribution\
    \ of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   This memo provides a mechanism whereby messages conforming to the\n\
    \   [RFC 1521] (\"MIME\") specification can convey presentational\n   information.\
    \  It specifies a new \"Content-Disposition\" header,\n   optional and valid for\
    \ any [RFC 1521] entity (\"message\" or \"body\n   part\"). Two values for this\
    \ header are described in this memo; one\n   for the ordinary linear presentation\
    \ of the body part, and another to\n   facilitate the use of mail to transfer\
    \ files. It is expected that\n   more values will be defined in the future, and\
    \ procedures are defined\n   for extending this set of values.\n   This document\
    \ is intended as an extension to [RFC 1521]. As such, the\n   reader is assumed\
    \ to be familiar with [RFC 1521], and [RFC 822]. The\n   information presented\
    \ herein supplements but does not replace that\n   found in those documents.\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   [RFC 1521] specifies a standard format for encapsulating\
    \ multiple\n   pieces of data into a single Internet message. That document does\
    \ not\n   address the issue of presentation styles; it provides a framework for\n\
    \   the interchange of message content, but leaves presentation issues\n   solely\
    \ in the hands of mail user agent (MUA) implementors.\n   Two common ways of presenting\
    \ multipart electronic messages are as a\n   main document with a list of separate\
    \ attachments, and as a single\n   document with the various parts expanded (displayed)\
    \ inline. The\n   display of an attachment is generally construed to require positive\n\
    \   action on the part of the recipient, while inline message components\n   are\
    \ displayed automatically when the message is viewed. A mechanism\n   is needed\
    \ to allow the sender to transmit this sort of presentational\n   information\
    \ to the recipient; the Content-Disposition header provides\n   this mechanism,\
    \ allowing each component of a message to be tagged\n   with an indication of\
    \ its desired presentation semantics.\n   Tagging messages in this manner will\
    \ often be sufficient for basic\n   message formatting. However, in many cases\
    \ a more powerful and\n   flexible approach will be necessary. The definition\
    \ of such\n   approaches is beyond the scope of this memo; however, such approaches\n\
    \   can benefit from additional Content-Disposition values and\n   parameters,\
    \ to be defined at a later date.\n   In addition to allowing the sender to specify\
    \ the presentational\n   disposition of a message component, it is desirable to\
    \ allow her to\n   indicate a default archival disposition; a filename. The optional\n\
    \   \"filename\" parameter provides for this.\n"
- title: 2.  The Content-Disposition Header Field
  contents:
  - "2.  The Content-Disposition Header Field\n   Content-Disposition is an optional\
    \ header; in its absence, the MUA\n   may use whatever presentation method it\
    \ deems suitable.\n   It is desirable to keep the set of possible disposition\
    \ types small\n   and well defined, to avoid needless complexity. Even so, evolving\n\
    \   usage will likely require the definition of additional disposition\n   types\
    \ or parameters, so the set of disposition values is extensible;\n   see below.\n\
    \   In the extended BNF notation of [RFC 822], the Content-Disposition\n   header\
    \ field is defined as follows:\n        disposition := \"Content-Disposition\"\
    \ \":\"\n                       disposition-type\n                       *(\"\
    ;\" disposition-parm)\n        disposition-type := \"inline\"\n              \
    \            / \"attachment\"\n                          / extension-token\n \
    \                         ; values are not case-sensitive\n        disposition-parm\
    \ := filename-parm / parameter\n        filename-parm := \"filename\" \"=\" value;\n\
    \   `Extension-token', `parameter' and `value' are defined according to\n   [RFC\
    \ 822] and [RFC 1521].\n"
- title: 2.1  The Inline Disposition Type
  contents:
  - "2.1  The Inline Disposition Type\n   A bodypart should be marked `inline' if\
    \ it is intended to be\n   displayed automatically upon display of the message.\
    \ Inline bodyparts\n   should be presented in the order in which they occur, subject\
    \ to the\n   normal semantics of multipart messages.\n"
- title: 2.2  The Attachment Disposition Type
  contents:
  - "2.2  The Attachment Disposition Type\n   Bodyparts can be designated `attachment'\
    \ to indicate that they are\n   separate from the main body of the mail message,\
    \ and that their\n   display should not be automatic, but contingent upon some\
    \ further\n   action of the user. The MUA might instead present the user of a\n\
    \   bitmap terminal with an iconic representation of the attachments, or,\n  \
    \ on character terminals, with a list of attachments from which the\n   user could\
    \ select for viewing or storage.\n"
- title: 2.3  The Filename Parameter
  contents:
  - "2.3  The Filename Parameter\n   The sender may want to suggest a filename to\
    \ be used if the entity is\n   detached and stored in a separate file. If the\
    \ receiving MUA writes\n   the entity to a file, the suggested filename should\
    \ be used as a\n   basis for the actual filename, where possible.\n   It is important\
    \ that the receiving MUA not blindly use the suggested\n   filename.  The suggested\
    \ filename should be checked (and possibly\n   changed) to see that it conforms\
    \ to local filesystem conventions,\n   does not overwrite an existing file, and\
    \ does not present a security\n   problem (see Security Considerations below).\n\
    \   The receiving MUA should not respect any directory path information\n   that\
    \ may seem to be present in the filename parameter.  The filename\n   should be\
    \ treated as a terminal component only.  Portable\n   specification of directory\
    \ paths might possibly be done in the future\n   via a separate Content-Disposition\
    \ parameter, but no provision is\n   made for it in this draft.\n   Current [RFC\
    \ 1521] grammar restricts parameter values (and hence\n   Content-Disposition\
    \ filenames) to US-ASCII.  We recognize the great\n   desirability of allowing\
    \ arbitrary character sets in filenames, but\n   it is beyond the scope of this\
    \ document to define the necessary\n   mechanisms.  We expect that the basic [RFC\
    \ 1521] `value'\n   specification will someday be amended to allow use of non-US-ASCII\n\
    \   characters, at which time the same mechanism should be used in the\n   Content-Disposition\
    \ filename parameter.\n   Beyond the limitation to US-ASCII, the sending MUA may\
    \ wish to bear\n   in mind the limitations of common filesystems.  Many have severe\n\
    \   length and character set restrictions.  Short alphanumeric filenames\n   are\
    \ least likely to require modification by the receiving system.\n   The presence\
    \ of the filename parameter does not force an\n   implementation to write the\
    \ entity to a separate file. It is\n   perfectly acceptable for implementations\
    \ to leave the entity as part\n   of the normal mail stream unless the user requests\
    \ otherwise. As a\n   consequence, the parameter may be used on any MIME entity,\
    \ even\n   `inline' ones. These will not normally be written to files, but the\n\
    \   parameter could be used to provide a filename if the receiving user\n   should\
    \ choose to write the part to a file.\n"
- title: 2.4  Future Extensions and Unrecognized Disposition Types
  contents:
  - "2.4  Future Extensions and Unrecognized Disposition Types\n   In the likely event\
    \ that new parameters or disposition types are\n   needed, they should be registered\
    \ with the IANA, in the manner\n   specified in [RFC 1521], appendix E.\n   Once\
    \ new disposition types and parameters are defined, there is of\n   course the\
    \ likelihood that implementations will see disposition types\n   and parameters\
    \ they do not understand.  Furthermore, since x-tokens\n   are allowed, implementations\
    \ may also see entirely unregistered\n   disposition types and parameters.\n \
    \  Unrecognized parameters should be ignored. Unrecognized disposition\n   types\
    \ should be treated as `attachment'. The choice of `attachment'\n   for unrecognized\
    \ types is made because a sender who goes to the\n   trouble of producing a Content-Disposition\
    \ header with a new\n   disposition type is more likely aiming for something more\
    \ elaborate\n   than inline presentation.\n   Unless noted otherwise in the definition\
    \ of a parameter, Content-\n   Disposition parameters are valid for all dispositions.\
    \  (In contrast\n   to [RFC 1521] content-type parameters, which are defined on\
    \ a per-\n   content-type basis.) Thus, for example, the `filename' parameter\n\
    \   still means the name of the file to which the part should be written,\n  \
    \ even if the disposition itself is unrecognized.\n"
- title: 2.5  Content-Disposition and Multipart
  contents:
  - "2.5  Content-Disposition and Multipart\n   If a Content-Disposition header is\
    \ used on a multipart body part, it\n   applies to the multipart as a whole, not\
    \ the individual subparts.\n   The disposition types of the subparts do not need\
    \ to be consulted\n   until the multipart itself is presented.  When the multipart\
    \ is\n   displayed, then the dispositions of the subparts should be respected.\n\
    \   If the `inline' disposition is used, the multipart should be\n   displayed\
    \ as normal; however, an `attachment' subpart should require\n   action from the\
    \ user to display.\n   If the `attachment' disposition is used, presentation of\
    \ the\n   multipart should not proceed without explicit user action.  Once the\n\
    \   user has chosen to display the multipart, the individual subpart\n   dispositions\
    \ should be consulted to determine how to present the\n   subparts.\n"
- title: 2.6  Content-Disposition and the Main Message
  contents:
  - "2.6  Content-Disposition and the Main Message\n   It is permissible to use Content-Disposition\
    \ on the main body of an\n   [RFC 822] message.\n"
- title: 3.  Examples
  contents:
  - "3.  Examples\n   Here is a an example of a body part containing a JPEG image\
    \ that is\n   intended to be viewed by the user immediately:\n         Content-Type:\
    \ image/jpeg\n         Content-Disposition: inline\n         Content-Description:\
    \ just a small picture of me\n         <jpeg data>\n   The following body part\
    \ contains a JPEG image that should be\n   displayed to the user only if the user\
    \ requests it. If the JPEG is\n   written to a file, the file should be named\
    \ \"genome.jpg\":\n         Content-Type: image/jpeg\n         Content-Disposition:\
    \ attachment; filename=genome.jpeg\n         Content-Description: a complete map\
    \ of the human genome\n         <jpeg data>\n   The following is an example of\
    \ the use of the `attachment'\n   disposition with a multipart body part.  The\
    \ user should see text-\n   part-1 immediately, then take some action to view\
    \ multipart-2.  After\n   taking action to view multipart-2, the user will see\
    \ text-part-2\n   right away, and be required to take action to view jpeg-1. \
    \ Subparts\n   are indented for clarity; they would not be so indented in a real\n\
    \   message.\n         Content-Type: multipart/mixed; boundary=outer\n       \
    \  Content-Description: multipart-1\n         --outer\n           Content-Type:\
    \ text/plain\n           Content-Disposition: inline\n           Content-Description:\
    \ text-part-1\n           Some text goes here\n         --outer\n           Content-Type:\
    \ multipart/mixed; boundary=inner\n           Content-Disposition: attachment\n\
    \           Content-Description: multipart-2\n           --inner\n           \
    \  Content-Type: text/plain\n             Content-Disposition: inline\n      \
    \       Content-Description: text-part-2\n             Some more text here.\n\
    \           --inner\n             Content-Type: image/jpeg\n             Content-Disposition:\
    \ attachment\n             Content-Description: jpeg-1\n             <jpeg data>\n\
    \           --inner--\n         --outer--\n"
- title: 4.  Summary
  contents:
  - "4.  Summary\n   Content-Disposition takes one of two values, `inline' and\n \
    \  `attachment'.  'Inline' indicates that the entity should be\n   immediately\
    \ displayed to the user, whereas `attachment' means that\n   the user should take\
    \ additional action to view the entity.\n   The `filename' parameter can be used\
    \ to suggest a filename for\n   storing the bodypart, if the user wishes to store\
    \ it in an external\n   file.\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   There are security issues involved any time users\
    \ exchange data.\n   While these are not to be minimized, neither does this memo\
    \ change\n   the status quo in that regard, except in one instance.\n   Since\
    \ this memo provides a way for the sender to suggest a filename,\n   a receiving\
    \ MUA must take care that the sender's suggested filename\n   does not represent\
    \ a hazard. Using UNIX as an example, some hazards\n   would be:\n          +\
    \ Creating startup files (e.g., \".login\").\n          + Creating or overwriting\
    \ system files (e.g.,\n            \"/etc/passwd\").\n          + Overwriting\
    \ any existing file.\n          + Placing executable files into any command search\
    \ path\n            (e.g., \"~/bin/more\").\n          + Sending the file to a\
    \ pipe (e.g., \"| sh\").\n   In general, the receiving MUA should never name or\
    \ place the file\n   such that it will get interpreted or executed without the\
    \ user\n   explicitly initiating the action.\n   It is very important to note\
    \ that this is not an exhaustive list; it\n   is intended as a small set of examples\
    \ only.  Implementors must be\n   alert to the potential hazards on their target\
    \ systems.\n"
- title: 6.  References
  contents:
  - "6.  References\n    [RFC 1521]\n        Borenstein N., and N. Freed, \"MIME (Multipurpose\
    \ Internet\n        Mail Extensions) Part One:  Mechanisms for Specifying and\n\
    \        Describing the Format of Internet Message Bodies\",\n        RFC 1521,\
    \ Bellcore, Innosoft, September 1993.\n    [RFC 822]\n        Crocker, D., \"\
    Standard for the Format of ARPA Internet\n        Text Messages\", STD 11, RFC\
    \ 822, UDEL, August 1982.\n"
- title: 7.  Acknowledgements
  contents:
  - '7.  Acknowledgements

    '
- title: We gratefully acknowledge the help these people provided
  contents:
  - 'We gratefully acknowledge the help these people provided

    '
- title: 'during the preparation of this draft:'
  contents:
  - "during the preparation of this draft:\n            Nathaniel Borenstein\n   \
    \         Ned Freed\n            Keith Moore\n            Dave Crocker\n     \
    \       Dan Pritchett\n"
- title: 8.  Authors' Addresses
  contents:
  - "8.  Authors' Addresses\n   Rens Troost\n   New Century Systems\n   324 East 41st\
    \ Street #804\n   New York, NY, 10017 USA\n   Phone: +1 (212) 557-2050\n   Fax:\
    \ +1 (212) 557-2049\n   EMail: rens@century.com\n   Steve Dorner\n   QUALCOMM\
    \ Incorporated\n   6455 Lusk Boulevard\n   San Diego, CA 92121\n   USA\n   EMail:\
    \ sdorner@qualcomm.com\n"
