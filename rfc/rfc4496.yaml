- title: __initial_text__
  contents:
  - '           Open Pluggable Edge Services (OPES) SMTP Use Cases

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2006).\n"
- title: Abstract
  contents:
  - "Abstract\n   The Open Pluggable Edge Services (OPES) framework is application\n\
    \   agnostic.  Application-specific adaptations extend that framework.\n   This\
    \ document describes OPES SMTP use cases and deployment scenarios\n   in preparation\
    \ for SMTP adaptation with OPES.\n"
- title: Table of Contents
  contents:
  - 'Table of Contents

    '
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The Open Pluggable Edge Services (OPES) architecture [1]\
    \ enables\n   cooperative application services (OPES services) between a data\n\
    \   provider, a data consumer, and zero or more OPES processors.  The\n   application\
    \ services under consideration analyze and possibly\n   transform application-level\
    \ messages exchanged between the data\n   provider and the data consumer.  The\
    \ OPES processor can distribute\n   the responsibility of service execution by\
    \ communicating and\n   collaborating with one or more remote callout servers.\n\
    \   The execution of such services is governed by a set of rules\n   installed\
    \ on the OPES processor.  The rule evaluation can trigger the\n   execution of\
    \ service applications local to the OPES processor or on a\n   remote callout\
    \ server.\n   Use cases for OPES based on HTTP [8] are described in [2].  This\
    \ work\n   focuses on OPES for SMTP [7] use cases, whereby additional use cases\n\
    \   and enhancements to the types of OPES services defined in [2] are\n   provided.\n\
    \   In SMTP, the OPES processor may be any agent participating in SMTP\n   exchanges,\
    \ including a Mail Submission Agent (MSA), a Mail Transfer\n   Agent (MTA), a\
    \ Mail Delivery Agent (MDA), and a Mail User Agent\n   (MUA).  This document focuses\
    \ on use cases in which the OPES\n   processor is a MTA.\n   SMTP is a store-and-forward\
    \ protocol.  Current email filtering\n   systems either operate during the SMTP\
    \ exchange or on messages that\n   have already been received, after the SMTP\
    \ connection has been closed\n   (for example, in an MTA's message queue).\n \
    \  This work focuses on SMTP-based services that want to modify command\n   values\
    \ or want to block SMTP commands.  In order to block a command,\n   the service\
    \ will provide an error message that the MTA should use in\n   response to the\
    \ command it received.  An OPES MTA will be involved in\n   SMTP command modification\
    \ and command satisfaction, analogous to\n   request modification and request\
    \ satisfaction from HTTP [8].\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and\
    \ \"OPTIONAL\" in this\n   document are to be interpreted as described in [6].\
    \  When used with\n   the normative meanings, these key words will be all uppercase.\n\
    \   Occurrences of these words in lowercase comprise normal prose usage,\n   with\
    \ no normative implications.\n"
- title: 3.  Brief Overview of SMTP Architecture
  contents:
  - "3.  Brief Overview of SMTP Architecture\n   The SMTP design, taken from RFC 2821\
    \ [7], is shown in Figure 1.  When\n   an SMTP client has a message to transmit,\
    \ it establishes a two-way\n   transmission channel to an SMTP server.  The responsibility\
    \ of an\n   SMTP client is to transfer mail messages to one or more SMTP servers,\n\
    \   or report its failure to do so.\n                  +----------+          \
    \      +----------+\n      +------+    |          |                |         \
    \ |\n      | User |<-->|          |      SMTP      |          |\n      +------+\
    \    |  Client  |Commands/Replies| Server   |\n      +------+    |   SMTP   |<-------------->|\
    \  SMTP    |    +------+\n      | File |<-->|          |    and Mail    |    \
    \      |<-->| File |\n      |System|    |          |                |        \
    \  |    |System|\n      +------+    +----------+                +----------+ \
    \   +------+\n                   SMTP client                SMTP server\n    \
    \                       Figure 1: SMTP Design\n   In some cases, the domain name(s)\
    \ transferred to, or determined by,\n   an SMTP client will identify the final\
    \ destination(s) of the mail\n   message.  In other cases, the domain name determined\
    \ will identify an\n   intermediate destination through which those mail messages\
    \ are to be\n   relayed.\n   An SMTP server may be either the ultimate destination\
    \ or an\n   intermediate \"relay\" or \"gateway\" (that is, it may transport the\n\
    \   message further using some protocol other than SMTP or using again\n   SMTP\
    \ and then acting as an SMTP client).\n   SMTP commands are generated by the SMTP\
    \ client and sent to the SMTP\n   server.  SMTP responses are sent from the SMTP\
    \ server to the SMTP\n   client in response to the commands.  SMTP message transfer\
    \ can occur\n   in a single connection between the original SMTP sender and the\
    \ final\n   SMTP recipient, or it can occur in a series of hops through\n   intermediary\
    \ systems.  SMTP clients and servers exchange commands and\n   responses and eventually\
    \ the mail message body.\n   Figure 2 expands on the mail flow in an SMTP system.\
    \  Further\n   information about the architecture of email in the Internet may\
    \ be\n   found in [9].\n   +-------+  +---------+      +---------+      +--------+\
    \  +-------+\n   |mail  M|  |M mail  M| SMTP |M mail  M| SMTP |M mail M|  |M mail\
    \ |\n   |clnt  U|--|S srvr  T|------|T gway  T|------|T srvr D|--|U clnt |\n \
    \  |      A|  |A       A|      |A       A|      |A      A|  |A      |\n   +-------+\
    \  +---------+      +---------+      +--------+  +-------+\n                 \
    \     Figure 2: Expanded SMTP Flow\n   In this work, the OPES processor may be\
    \ any agent that is\n   participating in SMTP exchanges, including an MSA, MTA,\
    \ MDA, and MUA.\n   However, this document focuses on use cases in which the OPES\n\
    \   processor uses the SMTP protocol or one of the protocols derived from\n  \
    \ SMTP Message Submission (SUBMIT) [10] and the Local Mail Transfer\n   Protocol\
    \ (LMTP) [11]).\n"
- title: 3.1.  Operation Flow of an OPES SMTP System
  contents:
  - "3.1.  Operation Flow of an OPES SMTP System\n   In this work, an MTA is the OPES\
    \ processor device that sits in the\n   data stream of the SMTP protocol.  The\
    \ OPES processor gets enhanced\n   by an OCP (OPES callout protocol) [3] client\
    \ that allows it to vector\n   out data to the callout server.  The filtering\
    \ functionality is on\n   the callout server.\n   A client (a mail user) starts\
    \ with an email client program (MUA).\n   The user sends email to an outgoing\
    \ email server.  In the email\n   server, there is an MSA (mail submission agent)\
    \ that is waiting to\n   receive email from the user.  The MSA uses an MTA within\
    \ the same\n   server to forward the user email to other domains.  (Communication\n\
    \   between the MUA and MSA may be via SMTP, SUBMIT [10], or something\n   else\
    \ such as MAPI).\n   The MTA in the user email server may directly contact the\
    \ email\n   server of the recipient or may use other intermediate email gateways.\n\
    \   The sending email server and all intermediate gateway MTAs usually\n   communicate\
    \ using SMTP.  Communication with the destination email\n   server usually uses\
    \ SMTP or its derivative, LMTP [11].\n   In the destination email server, a mail\
    \ delivery agent (MDA) may\n   deliver the email to the recipient's mailbox. \
    \ The email client\n   program of the recipient might use a different protocol\
    \ (such as the\n   Post Office Protocol version 3 (POP3) or IMAP) to access the\
    \ mailbox\n   and retrieve/read the messages.\n   +-------+  +---------+     \
    \ +---------+      +--------+  +-------+\n   |mail  M|  |M mail  M| SMTP |M mail\
    \  M| SMTP |M mail M|  |M mail |\n   |clnt  U|--|S srvr  T|------|T gway  T|------|T\
    \ srvr D|--|U clnt |\n   |      A|  |A       A|      |A       A|      |A     \
    \ A|  |A      |\n   +-------+  +---------+      +---------+      +--------+  +-------+\n\
    \                   |                |                |\n                   |\
    \ OCP            | OCP            | OCP\n                   |                |\
    \                |\n              +----------+     +----------+     +----------+\n\
    \              |  callout |     |  callout |     |  callout |\n              |\
    \  server  |     |  server  |     |  server  |\n              +----------+   \
    \  +----------+     +----------+\n                         Figure 3: OPES SMTP\
    \ Flow\n   From Figure 3, the MTA (the OPES processor) is either receiving or\n\
    \   sending an email (or both) within an email server/gateway.  An OPES\n   processor\
    \ might be the sender's SMTP server, the destination SMTP\n   server, or any intermediate\
    \ SMTP gateway.  (Which building block\n   belongs to which authoritative domain\
    \ is an important question but\n   different from deployment to deployment.) \
    \ Note that this figure\n   shows multiple OPES deployment options in a typical\
    \ chain of mail\n   servers and gateways with different roles as MSA, MTA, and\
    \ MDA; the\n   OPES standard case, however, will only have a single OPES processor\n\
    \   and a single callout server in the message flow.\n"
- title: 3.1.1.  OPES SMTP Example
  contents:
  - "3.1.1.  OPES SMTP Example\n   A typical (minimum) SMTP dialog between two OPES\
    \ SMTP processors\n   (MTA) will consist of the following (C: means client, S:\
    \ means\n   server):\n      S: 220 mail.example.com Sample ESMTP MAIL Service,\
    \ Version: 1.2\n      ready at Thu, 20 Jan 2005 11:24:40+0100\n      C: HELO [192.0.2.138]\n\
    \      S: 250 mail.example.com Hello [192.0.2.138]\n      C: MAIL FROM:<steve@example.org>\n\
    \      S: 250 2.1.0 steve@example.org....Sender OK\n      C: RCPT TO:<paul@example.com>\n\
    \      S: 250 2.1.5 paul@example.com\n      C: DATA\n      S: 354 Start mail input;\
    \ end with \"CRLF\".\"CRLF\"\n      C: From: steve@example.org\n      C: To: sandra@example.com\n\
    \      C: Subject: Test\n      C:\n      C: Hi, this is a test!\n      C: .\n\
    \      S: 250 2.6.0 \"MAIL0m4b1f@mail.example.com\" Queued mail for\n      delivery\n\
    \      C: QUIT\n      S: 221 2.0.0 mail.example.com Service closing transmission\
    \ channel\n   The client (C:) is issuing SMTP commands and the server (S:) is\n\
    \   generating responses.  All responses start with a status code and\n   then\
    \ some text.  At minimum, 4 commands are needed to send an email.\n   Together,\
    \ all commands and responses to send a single email message\n   form \"the dialog\"\
    .  The mail message body is the data sent after the\n   \"DATA\" command.  An\
    \ OPES processor could see that as command\n   modification.\n   If a callout\
    \ service wants to adapt the email message body, it is\n   mainly interested in\
    \ this part of the dialog:\n      From: steve@example.org\n      To: sandra@example.com\n\
    \      Subject: Test\n      Hi, this is a test!\n   The callout service may need\
    \ to examine values of previous commands\n   of the same dialog.  For example,\
    \ the callout service needs to\n   examine the value of the RCPT command (it is\
    \ \"paul@example.com\"),\n   which is different from the \"sandra@example.com\"\
    \ that the email\n   client displays in the visible \"To\" field.  That might\
    \ be an\n   important fact for some filters such as spam filters (Section 4.2).\n"
- title: 4.  OPES/SMTP Use Cases
  contents:
  - "4.  OPES/SMTP Use Cases\n   In principle, all filtering that is deployed at SMTP\
    \ gateways today\n   and tomorrow defines use cases for OPES callout filtering.\
    \  An\n   OCP/SMTP callout protocol will enable an SMTP gateway to vector out\n\
    \   (parts of) an SMTP message or parts of the SMTP dialog to a callout\n   server\
    \ that is then performing actions on behalf of the gateway.\n   (OCP/SMTP would\
    \ be a profile defined for OCP analogous to the\n   OCP/HTTP profile [4] that\
    \ has been defined earlier.)\n   Here is a collection of some typical use cases\
    \ describing different\n   filtering areas and different actions caused by those\
    \ filters.\n"
- title: 4.1.  Security Filters Applied to Email Messages
  contents:
  - "4.1.  Security Filters Applied to Email Messages\n   These filters concentrate\
    \ on the email message body and usually\n   filter the email sections one by one.\
    \  Email sections (attachments)\n   that violate the security policy (e.g., because\
    \ they contain a virus\n   or contain an unwanted mime type) define an event that\
    \ can cause a\n   combination of different actions to be performed:\n   o  The\
    \ attachment is replaced by an error message.\n   o  The email is marked by inserting\
    \ a warning into the subject or the\n      email body.\n   o  An additional header\
    \ is added for post-processing steps.\n   o  The email storage is advised to put\
    \ the email into quarantine.\n   o  Notifications are sent to sender, recipients,\
    \ and/or\n      administrators.\n   o  The incident is reported to other tools\
    \ such as intrusion\n      detection applications.\n   These kinds of filters\
    \ usually do not require working with elements\n   of the SMTP dialog other than\
    \ the email message body.  An exception\n   to this is the need to map email senders\
    \ and recipients to different\n   security sub-policies that are used for a particular\
    \ message.  A\n   security filter may therefore require receiving the information\
    \ of\n   the RCPT TO and MAIL FROM commands as meta data with the email\n   message\
    \ body it examines.\n"
- title: 4.2.  Spam Filter
  contents:
  - "4.2.  Spam Filter\n   Next to security filters, spam filters are probably the\
    \ most wanted\n   filtering application today.  Spam filters use several methods.\
    \  They\n   concentrate most on the email message body (that also includes the\n\
    \   email headers), but many of these filters are also interested in the\n   values\
    \ of the other SMTP commands in order to compare the SMTP\n   sender/recipients\
    \ with the visible From/To fields.  They may even\n   want to get the source IP\
    \ of the connected SMTP client as meta\n   information to verify this against\
    \ lists of open relays, known\n   spammers, etc.\n   These are typical actions\
    \ that could be performed when a message has\n   been classified as spam:\n  \
    \ o  Add a mark to the subject of the email.\n   o  Add an additional header for\
    \ post-processing steps.\n   o  The email storage is advised to put the email\
    \ into a spam queue.\n   o  The email is rejected or returned to the sender.\n"
- title: 4.3.  Logging and Reporting Filters
  contents:
  - "4.3.  Logging and Reporting Filters\n   The nature of these kinds of filters\
    \ is not to modify the email\n   message.  Depending on what is being logged or\
    \ reported on, the\n   filter may need access to any part of the SMTP dialog.\
    \  Most wanted\n   is the sender and recipient information.  Depending on the\
    \ ability of\n   the OPES processor to pre-calculate and transfer information\
    \ about\n   the message body, the callout filter may want to see the email\n \
    \  message body itself or just that meta info; an example is the email\n   size.\
    \  This information would be typical logging and reporting\n   information that\
    \ is easy for the SMTP gateway to calculate although\n   not a direct parameter\
    \ of the SMTP dialog.  Transferring the complete\n   email message body only because\
    \ the callout server wants to calculate\n   its size would be a waste of network\
    \ resources.\n"
- title: 4.4.  Access Control Filters
  contents:
  - "4.4.  Access Control Filters\n   These filters operate on the values of the MAIL\
    \ FROM and RCPT TO\n   commands of the SMTP dialog.  They run an access control\
    \ policy to\n   determine whether a sender is currently allowed to send a message\
    \ to\n   the given recipients.  The values of HELO/EHLO, AUTH, and STARTTLS\n\
    \   commands may also be applied.  The result of this filter has a direct\n  \
    \ influence on the SMTP response that the OPES processor has to send to\n   its\
    \ peer for the filtered SMTP command.\n"
- title: 4.5.  Secure Email Handling
  contents:
  - "4.5.  Secure Email Handling\n   Filters of this kind can support an email gateway\
    \ to centrally encode\n   and decode email, and to set and to verify email signatures.\
    \  They\n   will therefore modify the email message body to encrypt, decrypt,\n\
    \   verify, or sign the message, or use an action as specified in the\n   \"Security\
    \ Filter\" (Section 4.1) section if the decryption or\n   signature verification\
    \ fails.\n   Sending the SMTP sender and recipient information as meta data to\n\
    \   these filters is mission critical because these filters may not trust\n  \
    \ the information found in the header section of the email message\n   body.\n"
- title: 4.6.  Email Format Normalization
  contents:
  - "4.6.  Email Format Normalization\n   SMTP messages may be sent with an illegal\
    \ or uncommon format; this\n   may have happened by a buggy SMTP application or\
    \ on purpose in order\n   to exploit vulnerabilities of other products.  A normalization\
    \ filter\n   can correct the email format.  The format correction can be done\
    \ for\n   the email body and for the value of other SMTP commands.  An example\n\
    \   for the email body format correction would be a strange length of\n   UUencoded\
    \ lines or unusual names of MIME sections.  Command values\n   may be analysed\
    \ against buffer overflow exploits; a rewrite will not\n   always be possible\
    \ in this case (cannot simply rewrite an email\n   address that is very long)\
    \ but will require that the callout server\n   tells the OPES processor to send\
    \ an error response in reply to such a\n   command.\n"
- title: 4.7.  Mail Rerouting and Address Rewriting
  contents:
  - "4.7.  Mail Rerouting and Address Rewriting\n   A corporation with multiple locations\
    \ may want to deploy a central\n   gateway that receives all email messages for\
    \ all employees and then\n   determines at which location the mail storage of\
    \ the employee\n   resides.  The callout server will then need the RCPT TO command\
    \ value\n   and it will look up the location in the corporate directory service.\n\
    \   It then tells either the OPES processor where the next SMTP server is\n  \
    \ (i.e., the next SMTP server to connect to) or it rewrites the\n   recipient\
    \ address; in the first case, the SMTP servers at the\n   different locations\
    \ accept emails of the same domain as the central\n   gateway does; in the second\
    \ case, the other locations will probably\n   use the sublocation of the original\
    \ domain (joe@example.org ->\n   joe@fr.example.org or joe@de.example.org).\n"
- title: 4.8.  Block Email during SMTP Dialog
  contents:
  - "4.8.  Block Email during SMTP Dialog\n   In a first step, the callout server\
    \ will check the sender and\n   recipient information that was transmitted in\
    \ the SMTP dialog; that\n   information again maps to a policy that will deny\
    \ all messages either\n   from that sender or to that recipient, or it checks\
    \ the body of the\n   email and classifies it (maybe just by looking for some\
    \ words in the\n   subject or by doing in-depth content analysis), which can then\
    \ also\n   lead to the decision to deny the message.\n   Unlike previous examples,\
    \ this use case wants to deny the email while\n   the SMTP dialog is still active,\
    \ i.e., before the OPES processor\n   finally accepted the message.  Depending\
    \ on the exact policy, the\n   error response should then be sent in reply to\
    \ the MAIL FROM, RCPT\n   TO, or DATA command.\n"
- title: 4.9.  Convert Attachments to HTTP Links
  contents:
  - "4.9.  Convert Attachments to HTTP Links\n   This use case will only modify the\
    \ email message body without any\n   other influence on the SMTP dialogs, mail\
    \ routing, etc.  Larger\n   sections (attachments) are removed from the email,\
    \ and the content is\n   stored on a web server.  A link to that new URL is then\
    \ added into\n   the text of a first section that is likely to be displayed by\
    \ an\n   email client.  Storing the attachments onto the web server is not in\n\
    \   the scope of the OPES/SMTP scenario and needs to be implemented by\n   the\
    \ callout server.\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   Application-independent security considerations\
    \ are documented in\n   application-agnostic OPES specifications [5].  This document\
    \ contains\n   only use cases and defines no protocol operations.  Security\n\
    \   considerations for protocols that appear in these use cases are\n   documented\
    \ in the corresponding protocol specifications.\n   Use case \"Secure Email Handling\"\
    \ (Section 4.5) is special in this\n   regard because it requires the extension\
    \ of the end-to-end encryption\n   model and a secure handling of private cryptographic\
    \ keys when\n   creating digital signatures or when decrypting messages.  Both\
    \ are\n   out of scope of OPES protocol specifications.  An implementation of\n\
    \   such a service raises security issues (such as availability and\n   storage\
    \ of cryptographic keys) that must be addressed regardless of\n   whether the\
    \ implementation happens within an MTA or within an OPES\n   callout server.\n"
- title: 6.  References
  contents:
  - '6.  References

    '
- title: 6.1.  Normative References
  contents:
  - "6.1.  Normative References\n   [1]  Barbir, A., Penno, R., Chen, R., Hofmann,\
    \ M., and H. Orman, \"An\n        Architecture for Open Pluggable Edge Services\
    \ (OPES)\", RFC 3835,\n        August 2004.\n   [2]  Barbir, A., Burger, E., Chen,\
    \ R., McHenry, S., Orman, H., and R.\n        Penno, \"Open Pluggable Edge Services\
    \ (OPES) Use Cases and\n        Deployment Scenarios\", RFC 3752, April 2004.\n\
    \   [3]  Rousskov, A., \"Open Pluggable Edge Services (OPES) Callout\n       \
    \ Protocol (OCP) Core\", RFC 4037, March 2005.\n   [4]  Rousskov, A. and M. Stecher,\
    \ \"HTTP Adaptation with Open\n        Pluggable Edge Services (OPES)\", RFC 4236,\
    \ November 2005.\n   [5]  Barbir, A., Batuner, O., Srinivas, B., Hofmann, M.,\
    \ and H.\n        Orman, \"Security Threats and Risks for Open Pluggable Edge\n\
    \        Services (OPES)\", RFC 3837, August 2004.\n   [6]  Bradner, S., \"Key\
    \ words for use in RFCs to Indicate Requirement\n        Levels\", BCP 14, RFC\
    \ 2119, March 1997.\n"
- title: 6.2.  Informative References
  contents:
  - "6.2.  Informative References\n   [7]  Klensin, J., \"Simple Mail Transfer Protocol\"\
    , RFC 2821, April\n        2001.\n   [8]  Fielding, R., Gettys, J., Mogul, J.,\
    \ Frystyk, H., Masinter, L.,\n        Leach, P., and T. Berners-Lee, \"Hypertext\
    \ Transfer Protocol --\n        HTTP/1.1\", RFC 2616, June 1999.\n   [9]  Crocker,\
    \ D., \"Internet Mail Architecture\", Work in Progress,\n        March 2005.\n\
    \   [10] Gellens, R. and J. Klensin, \"Message Submission\", RFC 2476,\n     \
    \   December 1998.\n   [11] Myers, J., \"Local Mail Transfer Protocol\", RFC 2033,\
    \ October\n        1996.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   Many thanks to everybody who provided input for the use\
    \ case\n   examples, namely, jfc and Markus Hofmann.  Thanks also for the\n  \
    \ discussion and feedback given on the OPES mailing list.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Martin Stecher\n   Secure Computing Corporation\n   Vattmannstr.\
    \ 3\n   33100 Paderborn\n   Germany\n   EMail: martin.stecher@webwasher.com\n\
    \   URI:   http://www.securecomputing.com/\n   Abbie Barbir\n   Nortel\n   3500\
    \ Carling Avenue\n   Ottawa, Ontario\n   CA\n   Phone: +1 613 763 5229\n   EMail:\
    \ abbieb@nortel.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2006).\n   This\
    \ document is subject to the rights, licenses and restrictions\n   contained in\
    \ BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is provided by the IETF\n\
    \   Administrative Support Activity (IASA).\n"
