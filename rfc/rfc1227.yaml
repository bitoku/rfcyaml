- title: __initial_text__
  contents:
  - '                       SNMP MUX Protocol and MIB

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo suggests a mechanism by which a user process\
    \ may associate\n   itself with the local SNMP agent on a host, in order to implement\n\
    \   portions of the MIB.  This mechanism would be local to the host.\n   This\
    \ is an Experimental Protocol for the Internet community.\n   Discussion and suggestions\
    \ for improvement are requested.  Please\n   refer to the current edition of the\
    \ \"IAB Official Protocol Standards\"\n   for the standardization state and status\
    \ of this protocol.\n   Distribution of this memo is unlimited.\n"
- title: Table of Contents
  contents:
  - 'Table of Contents

    '
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   On typical kernel/user systems, an agent speaking the SNMP\
    \ [1] is\n   often implemented as a user-process, that reads kernel variables\
    \ in\n   order to realize the Internet-standard MIB [2].  This approach works\n\
    \   fine as long as all of the information needed by the SNMP agent\n   resides\
    \ in either the kernel or in stable storage (i.e., files).\n   However, when other\
    \ user-processes are employed to implement other\n   network services, such as\
    \ routing protocols, communication between\n   the SNMP agent and other processes\
    \ is problematic.\n   In order to solve this problem, a new protocol, the SNMP\
    \ multiplexing\n   (SMUX) protocol is introduced.  When a user-process, termed\
    \ a SMUX\n   peer, wishes to export a MIB module, it initiates a SMUX association\n\
    \   to the local SNMP agent, registers itself, and (later) fields\n   management\
    \ operations for objects in the MIB module.\n   Carrying this approach to its\
    \ fullest, it is possible to generalize\n   the SNMP agent so that it knows about\
    \ only the SNMP group of the\n   Internet-standard MIB.  All other portions of\
    \ the Internet-standard\n   MIB can be implemented by another process.  This is\
    \ quite useful, for\n   example, when a computer manufacturer wishes to provide\
    \ SNMP access\n   for its operating system in binary form.\n   In addition to\
    \ defining the SMUX protocol, this document defines a\n   MIB for the SMUX.  Obviously,\
    \ this MIB module must also be\n   implemented in the local SNMP agent.\n"
- title: 2.  Architecture
  contents:
  - "2.  Architecture\n   There are two approaches that can be taken when trying to\
    \ integrate\n   arbitrary MIB modules with the SNMP agent: request-response and\n\
    \   cache-ahead.\n   The request-response model simply propagates the SNMP requests\n\
    \   received by the SNMP agent to the user process which exported the MIB\n  \
    \ module.  The SMUX peer then performs the operation and returns a\n   response.\
    \  In turn, the SNMP agent propagates this response back to\n   the network management\
    \ station.  The request-response model is said\n   to be agent-driven since, after\
    \ registration, the SNMP agent\n   initiates all transactions.\n   The cache-ahead\
    \ model requires that the SMUX peer, after\n   registration, periodically updates\
    \ the SNMP agent with the subtree\n   for the MIB module which has been registered.\
    \  The SNMP agent, upon\n   receiving an SNMP request for information retrieval,\
    \ locally performs\n   the operation, and returns a response to the network management\n\
    \   station.  (SNMP set requests are given immediately to the SMUX peer.)\n  \
    \ The cache-ahead model is said to be peer-driven since, after\n   registration,\
    \ the SMUX peer initiates all transactions.\n   There are advantages and disadvantages\
    \ to both approaches.  As such,\n   the architecture envisioned supports both\
    \ models in the following\n   fashion: the protocol between the SNMP agent and\
    \ the SMUX peer is\n   based on the request-response model.  However, the SMUX\
    \ peer, may\n   itself be a user-process which employs the cache-ahead model with\n\
    \   other user-processes.\n   Obviously, the SMUX peer which employs the cache-ahead\
    \ model acts as\n   a \"firewall\" for those user-processes which actually implement\
    \ the\n   managed objects in the given MIB module.\n   Note that this document\
    \ describes only the SMUX protocol, for the\n   request-response model.  Each\
    \ SMUX peer is free to define a cache-\n   ahead protocol specific for the application\
    \ at hand.\n"
- title: 3.  Protocol
  contents:
  - "3.  Protocol\n   The SMUX protocol is simple: the SNMP agent listens for incoming\n\
    \   connections.  Upon establishing a connection, the SMUX peer issues an\n  \
    \ OpenPDU to initialize the SMUX association.  If the SNMP agent\n   declines\
    \ the association, it issues a closePDU and closes the\n   connection.  If the\
    \ SNMP agent accepts the association, no response\n   is issued by the SNMP agent.\n\
    \   For each subtree defined in a MIB module that the SMUX peer wishes to\n  \
    \ register (or unregister), the SMUX peer issues a RReqPDU.  When the\n   SNMP\
    \ agent receives such a PDU, it issues a corresponding RRspPDU.\n   The SNMP agent\
    \ returns RRspPDUs in the same order as the RReqPDUs\n   were received.\n   When\
    \ the SMUX peer wishes to issue a trap, it issues an SNMP Trap-\n   PDU.  When\
    \ the SNMP agent receives such a PDU, it propagates this to\n   the network management\
    \ stations that it is configured to send traps\n   to.\n   When the SNMP agent\
    \ receives an SNMP GetRequest-PDU, GetNextRequest-\n   PDU, or SetRequest-PDU\
    \ which includes one or more variable-bindings\n   within a subtree registered\
    \ by a SMUX peer, the SNMP agent sends an\n   equivalent SNMP PDU containing only\
    \ those variables within the\n   subtree registered by that SMUX peer.  When the\
    \ SMUX peer receives\n   such a PDU, it applies the indicated operation and issues\
    \ a\n   corresponding SNMP GetResponse-PDU.  The SNMP agent then correlates\n\
    \   this result and propagates the resulting GetResponse-PDU to the\n   network\
    \ management station.\n   When either the SNMP agent or the SMUX peer wishes to\
    \ release the\n   SMUX association, the ClosePDU is issued, the connection is\
    \ closed,\n   and all subtree registrations for that association are released.\n"
- title: 3.1.  Tricky Things
  contents:
  - "3.1.  Tricky Things\n   Although straight-forward, there are a few nuances.\n"
- title: 3.1.1.  Registration
  contents:
  - "3.1.1.  Registration\n   Associated with each registration is an integer priority,\
    \ from 0 to\n   (2^31)-1.  The lower the value, the higher the priority.\n   Multiple\
    \ SMUX peers may register the same subtree.  However, they\n   must do so at different\
    \ priorities (i.e., a subtree and a priority\n   uniquely identifies a SMUX peer).\
    \  As such, if a SMUX peer wishes to\n   register a subtree at a priority which\
    \ is already taken, the SNMP\n   agent repeatedly increments the integer value\
    \ until an unused\n   priority is found.\n   When registering a subtree, the special\
    \ priority -1 may be used,\n   which selects the highest available priority.\n\
    \   Of course, the SNMP agent may select an arbitrarily worse priority\n   for\
    \ a SMUX peer, based on local (configuration) information.\n   Note that when\
    \ a subtree is registered, the SMUX peer with the\n   highest registration priority\
    \ is exclusively consulted for all\n   operations on that subtree.  Further note\
    \ that SNMP agents must\n   enforce the \"subtree mounting effect\", which hides\
    \ the registrations\n   by other SMUX peers of objects within the subtree.  For\
    \ example, if a\n   SMUX peer registered \"sysDescr\", and later another SMUX\
    \ peer\n   registered \"system\" (which scopes \"sysDescr\"), then all requests\
    \ for\n   \"sysDescr\" would be given to the latter SMUX peer.\n   An SNMP agent\
    \ should disallow any attempt to register above, at, or\n   below, the SNMP and\
    \ SMUX subtrees of the MIB.  Other subtrees may be\n   disallowed as an implementation-specific\
    \ option.\n"
- title: 3.1.2.  Removing Registration
  contents:
  - "3.1.2.  Removing Registration\n   A SMUX peer may remove registrations for only\
    \ those subtrees which it\n   has registered.  If the priority given in the RReqPDU\
    \ is -1, then the\n   registration of highest priority is selected for deletion.\n\
    \   Otherwise, only that registration with the precise priority is\n   selected.\n"
- title: 3.1.3.  Atomic Sets
  contents:
  - "3.1.3.  Atomic Sets\n   A simple two-phase commit protocol is used between the\
    \ SNMP agent and\n   the SMUX peers.  When an SNMP SetRequest-PDU is received,\
    \ the SNMP\n   agent determines which SMUX peers will participate in the\n   transaction.\
    \  For each of these peers, at least one SNMP SetRequest-\n   PDU is sent, with\
    \ only those variables of interest to that peer.\n   Each SMUX peer must either\
    \ accept or refuse the set operation,\n   without actually performing the operation.\
    \  If the peer opts to\n   accept, it sends back an SNMP GetResponse-PDU with\
    \ an error-status of\n   noError(0); otherwise, if the peer refuses to perform\
    \ the operation,\n   then an SNMP GetResponse-PDU is returned with a non-zero\
    \ error-\n   status.\n   The SNMP agent examines all of the responses.  If at\
    \ least one SMUX\n   peer refused the operation, then a SMUX SOutPDU is sent to\
    \ each SMUX\n   peer, with value rollback, telling the SMUX peer to discard any\n\
    \   knowledge of the requested operation.\n   Otherwise if all SMUX peers accepted\
    \ the operation, then a SMUX\n   SOutPDU is sent to each SMUX peer, with value\
    \ commit, telling the\n   SMUX peer to perform the operation.\n   In either case,\
    \ the SMUX peer does not generate a response to the\n   SMUX SOutPDU.\n"
- title: 3.1.4.  Variables in Requests
  contents:
  - "3.1.4.  Variables in Requests\n   When constructing an SNMP GetRequest-PDU or\
    \ GetNextRequest-PDU for a\n   SMUX peer, the SNMP agent may send one, or more\
    \ than one variable in\n   a single request.  In all cases, the SNMP agent should\
    \ process each\n   variable sequentially, and block accordingly when a SMUX peer\
    \ is\n   contacted.\n"
- title: 3.1.5.  Request-ID
  contents:
  - "3.1.5.  Request-ID\n   When the SNMP agent constructs an SNMP GetRequest-PDU,\n\
    \   GetNextRequest-PDU, or SetRequest-PDU, for a SMUX peer, the\n   request_id\
    \ field of the SNMP takes a special meaning: if an SNMP\n   agent generates multiple\
    \ PDUs for a SMUX peer, upon receipt of a\n   single PDU from the network management\
    \ station, then the request_id\n   field of the PDUs sent to the SMUX peer must\
    \ take the same value\n   (which need bear no relationship to the value of the\
    \ request_id field\n   of the PDU originally received by the SNMP agent.)\n"
- title: 3.1.6.  The powerful get-next operator
  contents:
  - "3.1.6.  The powerful get-next operator\n   Each SMUX peer acts as though it contains\
    \ the entire MIB when\n   processing a SNMP GetNext-PDU from the SNMP agent. \
    \ This means that\n   the SNMP agent must check each variable returned in the\
    \ SNMP\n   GetResponse-PDU generated by the SMUX peer to ensure that each\n  \
    \ variable is still within the same registered subtree as caused the\n   SNMP\
    \ GetNext-PDU to be sent to that peer.  For each variable which is\n   not, the\
    \ SNMP agent must include it in a SNMP GetNext-PDU to the peer\n   for the succeeding\
    \ registered subtree, until responses are available\n   for all variables within\
    \ their expected registered subtree.\n"
- title: 3.2.  Protocol Data Units
  contents:
  - "3.2.  Protocol Data Units\n   The SMUX protocol data units are defined using\
    \ Abstract Syntax\n   Notation One (ASN.1) [3]:\n   SMUX DEFINITIONS ::= BEGIN\n\
    \   IMPORTS\n           DisplayString, ObjectName\n                   FROM RFC1155-SMI\n\
    \           PDUs\n                   FROM RFC1157-SNMP;\n   -- tags for SMUX-specific\
    \ PDUs are application-wide to\n   -- avoid conflict with tags for current (and\
    \ future)\n   -- SNMP-generic PDUs\n   SMUX-PDUs ::=\n       CHOICE {\n      \
    \     open            -- SMUX peer uses\n               OpenPDU,    -- immediately\
    \ after TCP open\n           close           -- either uses immediately before\
    \ TCP close\n               ClosePDU,\n           registerRequest -- SMUX peer\
    \ uses\n               RReqPDU,\n           registerResponse -- SNMP agent uses\n\
    \               RRspPDU,\n               PDUs,       -- note that roles are reversed:\n\
    \                           --   SNMP agent does get/get-next/set\n          \
    \                 --   SMUX peer does get-response/trap\n           commitOrRollback\
    \ -- SNMP agent uses\n               SOutPDU\n      }\n   -- open PDU\n   -- currently\
    \ only simple authentication\n   OpenPDU ::=\n       CHOICE {\n          simple\n\
    \              SimpleOpen\n       }\n   SimpleOpen ::=\n       [APPLICATION 0]\
    \ IMPLICIT\n           SEQUENCE {\n               version     -- of SMUX protocol\n\
    \                   INTEGER {\n                       version-1(0)\n         \
    \          },\n               identity    -- of SMUX peer, authoritative\n   \
    \                OBJECT IDENTIFIER,\n               description -- of SMUX peer,\
    \ implementation-specific\n                   DisplayString,\n               password\
    \    -- zero length indicates no authentication\n                   OCTET STRING\n\
    \           }\n   -- close PDU\n   ClosePDU ::=\n       [APPLICATION 1] IMPLICIT\n\
    \           INTEGER {\n               goingDown(0),\n               unsupportedVersion(1),\n\
    \               packetFormat(2),\n               protocolError(3),\n         \
    \      internalError(4),\n               authenticationFailure(5)\n          \
    \ }\n   -- insert PDU\n   RReqPDU ::=\n       [APPLICATION 2] IMPLICIT\n     \
    \      SEQUENCE {\n               subtree\n                   ObjectName,\n  \
    \             priority    -- the lower the better, \"-1\" means default\n    \
    \               INTEGER (-1..2147483647),\n               operation\n        \
    \           INTEGER {\n                       delete(0),    -- remove registration\n\
    \                       readOnly(1),  -- add registration, objects are RO\n  \
    \                     readWrite(2)  --   .., objects are RW\n                \
    \   }\n           }\n   RRspPDU ::=\n       [APPLICATION 3] IMPLICIT\n       \
    \    INTEGER {\n               failure(-1)\n              -- on success the non-negative\
    \ priority is returned\n           }\n   SOutPDU ::=\n       [APPLICATION 4] IMPLICIT\n\
    \           INTEGER {\n               commit(0),\n               rollback(1)\n\
    \           }\n   END\n"
- title: 3.3.  Mappings on Transport Service
  contents:
  - "3.3.  Mappings on Transport Service\n   The SMUX protocol may be mapped onto\
    \ any CO-mode transport service.\n   At present, only one such mapping is defined.\n"
- title: 3.3.1.  Mapping onto the TCP
  contents:
  - "3.3.1.  Mapping onto the TCP\n   When using the TCP to provide the transport-backing\
    \ for the SMUX\n   protocol, the SNMP agent listens on TCP port 199.\n   Each\
    \ SMUX PDU is serialized using the Basic Encoding Rules [4] and\n   sent on the\
    \ TCP.  As ASN.1 objects are self-delimiting when encoding\n   using the BER,\
    \ no packetization protocol is required.\n"
- title: 4.  MIB for the SMUX
  contents:
  - "4.  MIB for the SMUX\n   The MIB objects for the SMUX are implemented by the\
    \ local SNMP agent:\n          SMUX-MIB DEFINITIONS ::= BEGIN\n          IMPORTS\n\
    \                  enterprises\n                          FROM RFC1155-SMI\n \
    \                 OBJECT-TYPE\n                          FROM RFC1212;\n     \
    \     unix    OBJECT IDENTIFIER ::= { enterprises 4 }\n          smux    OBJECT\
    \ IDENTIFIER ::= { unix 4 }\n          smuxPeerTable   OBJECT-TYPE\n         \
    \         SYNTAX  SEQUENCE OF SmuxPeerEntry\n                  ACCESS  not-accessible\n\
    \                  STATUS  mandatory\n                  DESCRIPTION\n        \
    \              \"The SMUX peer table.\"\n                  ::= { smux 1 }\n  \
    \        smuxPeerEntry   OBJECT-TYPE\n                  SYNTAX  SmuxPeerEntry\n\
    \                  ACCESS  not-accessible\n                  STATUS  mandatory\n\
    \                  DESCRIPTION\n                      \"An entry in the SMUX peer\
    \ table.\"\n                  INDEX   { smuxPindex }\n                  ::= {\
    \ smuxPeerTable 1}\n          SmuxPeerEntry ::=\n              SEQUENCE {\n  \
    \                smuxPindex\n                      INTEGER,\n                \
    \  smuxPidentity\n                      OBJECT IDENTIFIER,\n                 \
    \ smuxPdescription\n                      DisplayString,\n                  smuxPstatus\n\
    \                      INTEGER\n              }\n          smuxPindex      OBJECT-TYPE\n\
    \                  SYNTAX  INTEGER\n                  ACCESS  read-only\n    \
    \              STATUS  mandatory\n                  DESCRIPTION\n            \
    \          \"An index which uniquely identifies a SMUX peer.\"\n             \
    \     ::= { smuxPeerEntry 1 }\n          smuxPidentity   OBJECT-TYPE\n       \
    \           SYNTAX  OBJECT IDENTIFIER\n                  ACCESS  read-only\n \
    \                 STATUS  mandatory\n                  DESCRIPTION\n         \
    \             \"The authoritative designation for a SMUX peer.\"\n           \
    \       ::= { smuxPeerEntry 2 }\n          smuxPdescription OBJECT-TYPE\n    \
    \              SYNTAX  DisplayString (SIZE (0..255))\n                  ACCESS\
    \  read-only\n                  STATUS  mandatory\n                  DESCRIPTION\n\
    \                      \"A human-readable description of a SMUX peer.\"\n    \
    \              ::= { smuxPeerEntry 3 }\n          smuxPstatus     OBJECT-TYPE\n\
    \                  SYNTAX  INTEGER { valid(1), invalid(2), connecting(3) }\n \
    \                 ACCESS  read-write\n                  STATUS  mandatory\n  \
    \                DESCRIPTION\n                      \"The type of SMUX peer.\n\
    \                      Setting this object to the value invalid(2) has\n     \
    \                 the effect of invaliding the corresponding entry\n         \
    \             in the smuxPeerTable.  It is an implementation-\n              \
    \        specific matter as to whether the agent removes an\n                \
    \      invalidated entry from the table.  Accordingly,\n                     \
    \ management stations must be prepared to receive\n                      tabular\
    \ information from agents that correspond to\n                      entries not\
    \ currently in use.  Proper\n                      interpretation of such entries\
    \ requires\n                      examination of the relative smuxPstatus object.\"\
    \n                  ::= { smuxPeerEntry 4 }\n          smuxTreeTable   OBJECT-TYPE\n\
    \                  SYNTAX  SEQUENCE OF SmuxTreeEntry\n                  ACCESS\
    \  not-accessible\n                  STATUS  mandatory\n                  DESCRIPTION\n\
    \                      \"The SMUX tree table.\"\n                  ::= { smux\
    \ 2 }\n          smuxTreeEntry   OBJECT-TYPE\n                  SYNTAX  SmuxTreeEntry\n\
    \                  ACCESS  not-accessible\n                  STATUS  mandatory\n\
    \                  DESCRIPTION\n                      \"An entry in the SMUX tree\
    \ table.\"\n                  INDEX   { smuxTsubtree, smuxTpriority }\n      \
    \            ::= { smuxTreeTable 1}\n          SmuxTreeEntry ::=\n           \
    \   SEQUENCE {\n                  smuxTsubtree\n                      OBJECT IDENTIFIER,\n\
    \                  smuxTpriority\n                      INTEGER,\n           \
    \       smuxTindex\n                      INTEGER,\n                  smuxTstatus\n\
    \                      INTEGER\n              }\n          smuxTsubtree    OBJECT-TYPE\n\
    \                  SYNTAX  OBJECT IDENTIFIER\n                  ACCESS  read-only\n\
    \                  STATUS  mandatory\n                  DESCRIPTION\n        \
    \              \"The MIB subtree being exported by a SMUX peer.\"\n          \
    \        ::= { smuxTreeEntry 1 }\n          smuxTpriority OBJECT-TYPE\n      \
    \            SYNTAX  INTEGER (0..'07fffffff'h)\n                  ACCESS  read-only\n\
    \                  STATUS  mandatory\n                  DESCRIPTION\n        \
    \              \"The SMUX peer's priority when exporting the MIB\n           \
    \           subtree.\"\n                  ::= { smuxTreeEntry 2 }\n          smuxTindex\
    \ OBJECT-TYPE\n                  SYNTAX  INTEGER\n                  ACCESS  read-only\n\
    \                  STATUS  mandatory\n                  DESCRIPTION\n        \
    \              \"The SMUX peer's identity.\"\n                  ::= { smuxTreeEntry\
    \ 3 }\n          smuxTstatus     OBJECT-TYPE\n                  SYNTAX  INTEGER\
    \ { valid(1), invalid(2) }\n                  ACCESS  read-write\n           \
    \       STATUS  mandatory\n                  DESCRIPTION\n                   \
    \   \"The type of SMUX tree.\n                      Setting this object to the\
    \ value invalid(2) has\n                      the effect of invaliding the corresponding\
    \ entry\n                      in the smuxTreeTable.  It is an implementation-\n\
    \                      specific matter as to whether the agent removes an\n  \
    \                    invalidated entry from the table.  Accordingly,\n       \
    \               management stations must be prepared to receive\n            \
    \          tabular information from agents that correspond to\n              \
    \        entries not currently in use.  Proper\n                      interpretation\
    \ of such entries requires\n                      examination of the relative\
    \ smuxTstatus object.\"\n                  ::= { smuxTreeEntry 4 }\n         \
    \ END\n"
- title: 5.  Acknowledgements
  contents:
  - "5.  Acknowledgements\n   SMUX was designed one afternoon by these people:\n \
    \              Jeffrey S. Case, UTK-CS\n               James R. Davin, MIT-LCS\n\
    \               Mark S. Fedor, PSI\n               Jeffrey C. Honig, Cornell\n\
    \               Louie A. Mamakos, UMD\n               Michael G. Petry, UMD\n\
    \               Yakov Rekhter, IBM\n               Marshall T. Rose, PSI\n"
- title: 6.  References
  contents:
  - "6.  References\n   [1] Case, J., Fedor, M., Schoffstall, M., and J. Davin, \"\
    Simple\n       Network Management Protocol\", RFC 1157, SNMP Research,\n     \
    \  Performance Systems International, Performance Systems\n       International,\
    \ MIT Laboratory for Computer Science, May 1990.\n   [2] McCloghrie K., and M.\
    \ Rose, \"Management Information Base for\n       Network Management of TCP/IP-based\
    \ Internets\", RFC 1156,\n       Performance Systems International and Hughes\
    \ LAN Systems, May\n       1990.\n   [3] Information processing systems - Open\
    \ Systems Interconnection -\n       Specification of Abstract Syntax Notation\
    \ One (ASN.1),\n       International Organization for Standardization, International\n\
    \       Standard 8824, December 1987.\n   [4] Information processing systems -\
    \ Open Systems Interconnection -\n       Specification of Basic Encoding Rules\
    \ for Abstract Notation One\n       (ASN.1), International Organization for Standardization,\n\
    \       International Standard 8825, December 1987.\n   [5] Rose, M., and K. McCloghrie,\
    \ \"Structure and Identification of\n       Management Information for TCP/IP-based\
    \ Internets\", RFC 1155,\n       Performance Systems International and Hughes\
    \ LAN Systems, May\n       1990.\n"
- title: 7. Security Considerations
  contents:
  - "7. Security Considerations\n   Security issues are not discussed in this memo.\n"
- title: 8. Author's Address
  contents:
  - "8. Author's Address\n   Marshall T. Rose\n   Performance Systems International,\
    \ Inc.\n   5201 Great America Parkway\n   Suite 3106\n   Santa Clara, CA  95054\n\
    \   Phone: +1 408 562 6222\n   EMail: mrose@psi.com\n   X.500:  rose, psi, us\n"
