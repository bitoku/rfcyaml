- title: __initial_text__
  contents:
  - "              SOME PROBLEMS WITH THE SPECIFICATION OF THE\n            MILITARY\
    \ STANDARD TRANSMISSION CONTROL PROTOCOL\n"
- title: STATUS OF THIS MEMO
  contents:
  - "STATUS OF THIS MEMO\n   The purpose of this RFC is to provide helpful information\
    \ on the\n   Military Standard Transmission Control Protocol (MIL-STD-1778) so\n\
    \   that one can obtain a reliable implementation of this protocol\n   standard.\
    \ Distribution of this note is unlimited.\n      Reprinted from: Proc. Protocol\
    \ Specification, Testing and\n      Verification IV, (ed.) Y. Yemini, et al, North-Holland\
    \ (1984).\n"
- title: ABSTRACT
  contents:
  - "ABSTRACT\n   This note points out three errors with the specification of the\n\
    \   Military Standard Transmission Control Protocol (MIL-STD-1778, dated\n   August\
    \ 1983 [MILS83]).  These results are based on an initial\n   investigation of\
    \ this protocol standard.  The first problem is that\n   data accompanying a SYN\
    \ can not be accepted because of errors in the\n   acceptance policy.  The second\
    \ problem is that no retransmission\n   timer is set for a SYN packet, and therefore\
    \ the SYN will not be\n   retransmitted if it is lost.  The third problem is that\
    \ when the\n   connection has been established, neither entity takes the proper\n\
    \   steps to accept incoming data.  This note also proposes solutions to\n   these\
    \ problems.\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   In recent years, much progress has been made in creating\
    \ an\n   integrated set of tools for developing reliable communication\n   protocols.\
    \  These tools provide assistance in the specification,\n   verification, implementation\
    \ and testing of protocols.  Several\n   protocols have been analyzed and developed\
    \ using such tools.\n   In a recent paper, the authors discussed the verification\
    \ of the\n   connection management of NBS class 4 transport protocol (TP4).  The\n\
    \   verification was carried out with the help of a software tool we\n   developed\
    \ [BLUT82] [BLUT83] [SIDD83].  In spite of the very precise\n   specification\
    \ of this protocol, our analysis discovered several\n   errors in the current\
    \ specification of NBS TP4.  These errors are\n   incompleteness errors in the\
    \ specification, that is, states where\n   there is no transition for the reception\
    \ of some input event.  Our\n   analysis did not find deadlocks, livelocks or\
    \ any other problem in\n   the connection management of TP4.  In that paper, we\
    \ proposed\n"
- title: RFC 964                                                    November 1985
  contents:
  - 'RFC 964                                                    November 1985

    '
- title: Some Problems with MIL-STD TCP
  contents:
  - "Some Problems with MIL-STD TCP\n   solutions for all errors except for errors\
    \ associated with 2 states\n   whose satisfactory resolution may require redesigning\
    \ parts of TP4.\n   Modifications to TP4 specification are currently underway\
    \ to solve\n   the remaining incompleteness problems with 2 states.  It is important\n\
    \   to emphasize that we did not find any obvious error in the NBS\n   specification\
    \ of TP4.\n   The authors are currently working on the verification of connection\n\
    \   management of the Military Standard Transmission Control Protocol\n   (TCP).\
    \  This analysis will be based on the published specification\n   [MILS83] of\
    \ TCP dated 12 August 1983.\n   While studying the MIL standard TCP specification\
    \ in preparation for\n   our analysis of the connection management features, we\
    \ have noticed\n   several errors in the specification.  As a consequence of these\n\
    \   errors, the Transmission Control Protocol (as specified in [MILS83])\n   will\
    \ not permit data to be received by TCP entities in SYN_RECVD and\n   ESTAB states.\n\
    \   The proof of this statement follows from the specification of the\n   three-way\
    \ handshake mechanism of TCP [MILS83] and from a decision\n   table associated\
    \ with ESTAB state.\n"
- title: 2.  Transmission Control Protocol
  contents:
  - "2.  Transmission Control Protocol\n   The Transmission Control Protocol (TCP)\
    \ is a transport level\n   connection-oriented protocol in the DoD protocol hierarchy\
    \ for use in\n   packet-switched and other networks.  Its most important services\
    \ are\n   reliable transfer and ordered delivery of data over full-duplex and\n\
    \   flow-controlled virtual connections.  TCP is designed to operate\n   successfully\
    \ over channels that are inherently unreliable, i.e., they\n   can lose, damage,\
    \ duplicate, and reorder packets.\n   TCP is based, in part, on a protocol discussed\
    \ by Cerf and Kahn\n   [CERV74].  Over the years, DARPA has supported specifications\
    \ of\n   several versions of this protocol, the last one appeared in [POSJ81].\n\
    \   Some issues in the connection management of this protocol are\n   discussed\
    \ in [SUNC78].\n   A few years ago, DCA decided to standardize TCP for use in\
    \ DoD\n   networks and supported formal specification of this protocol\n   following\
    \ the design of this protocol discussed in [POSJ81]. A\n   detailed specification\
    \ of this protocol given in [MILS83] has been\n   adopted as the DoD standard\
    \ for the Transmission Control Protocol, a\n   reliable connection-oriented transport\
    \ protocol for DoD networks.\n   A TCP connection progresses through three phases:\
    \ opening (or\n"
- title: RFC 964                                                    November 1985
  contents:
  - 'RFC 964                                                    November 1985

    '
- title: Some Problems with MIL-STD TCP
  contents:
  - "Some Problems with MIL-STD TCP\n   synchronization), maintenance, and closing.\
    \  In this note we consider\n   data transfer in the opening and maintenance phases\
    \ of the\n   connection.\n"
- title: 3.  Problems with MIL Standard TCP
  contents:
  - "3.  Problems with MIL Standard TCP\n   One basic feature of TCP is the three-way\
    \ handshake which is used to\n   set up a properly synchronized connection between\
    \ two remote TCP\n   entities.  This mechanism is incorrectly specified in the\
    \ current\n   specification of TCP.  One problem is that data associated with\
    \ the\n   SYN packet can not be delivered.  This results from an incorrect\n \
    \  specification of the interaction between the accept_policy action\n   procedure\
    \ and the record_syn action procedure.  Neither of the 2\n   possible strategies\
    \ suggested in accept_policy will give the correct\n   result when called from\
    \ the record_syn procedure, because the\n   recv_next variable is updated in record_syn\
    \ before the accept_policy\n   procedure is called.\n   Another problem with the\
    \ specification of the three-way handshake is\n   apparent in the actions listed\
    \ for the Active Open event (with or\n   without data) when in the CLOSED state.\
    \  No retransmission timer is\n   set in these actions, and therefore if the initial\
    \ SYN is lost, there\n   will be no timer expiration to trigger retransmission.\
    \  This will\n   prevent connection establishment if the initial SYN packet is\
    \ lost by\n   the network.\n   The third problem with the specification is that\
    \ the actions for\n   receiving data in the ESTAB state are incorrect.  The accept\
    \ action\n   procedure must be called when data is received, so that arriving\
    \ data\n   may be queued and possibly passed to the user.\n   A general problem\
    \ with this specification is that the program\n   language and action table portions\
    \ of the specification were clearly\n   not checked by any automatic syntax checking\
    \ process.  Several\n   variable and procedure names are misspelled, and the syntax\
    \ of the\n   action statements is often incorrect.  This can be confusing,\n \
    \  especially when a procedure name cannot be found in the alphabetized\n   list\
    \ of procedures because of misspelling.\n   These are some of the very serious\
    \ errors that we have discovered\n   with the MIL standard TCP.\n"
- title: RFC 964                                                    November 1985
  contents:
  - 'RFC 964                                                    November 1985

    '
- title: Some Problems with MIL-STD TCP
  contents:
  - 'Some Problems with MIL-STD TCP

    '
- title: 4.  Detailed Discussion of the Problem
  contents:
  - "4.  Detailed Discussion of the Problem\n   Problem 1:  Problem with Receiving\
    \ Data Accompanying SYN\n      The following scenario traces the actions of 2\
    \ communicating\n      entities during the establishment of a connection.  Only\
    \ the\n      simplest case is considered, i.e., the case where the connection\n\
    \      is established by the exchange of 3 segments.\n      TCP entity A     \
    \                                     TCP entity B\n      ------------       \
    \                                   ------------\n      state                segment\
    \         segment          state\n      transition           recvd or sent   recvd\
    \ or sent    transition\n                           by A            by B\n   \
    \                                                     CLOSED -> LISTEN\n     \
    \ CLOSED -> SYN_SENT   SYN -->\n                                           SYN\
    \ -->   LISTEN -> SYN_RECVD\n                                           <-- SYN\
    \ ACK\n      SYN_SENT -> ESTAB    <-- SYN ACK\n                           ACK\
    \ -->\n                                           ACK -->    SYN_RECVD -> ESTAB\n\
    \      As shown in the above diagram, 5 state transitions occur and 3 TCP\n  \
    \    segments are exchanged during the simplest case of the three-way\n      handshake.\
    \  We now examine in detail the actions of each entity\n      during this exchange.\
    \  Special attention is given to the sequence\n      numbers carried in each packet\
    \ and recorded in the state variables\n      of each entity.\n      In the diagram\
    \ below, the actions occurring within a procedure are\n      shown indented from\
    \ the procedure call.  The resulting values of\n      sequence number variables\
    \ are shown in square brackets to the\n      right of each statement.  The sequence\
    \ number variables are shown\n      with the entity name (A or B) as prefix so\
    \ that the two sets of\n      state variables may be easily distinguished.\n"
- title: RFC 964                                                    November 1985
  contents:
  - 'RFC 964                                                    November 1985

    '
- title: Some Problems with MIL-STD TCP
  contents:
  - "Some Problems with MIL-STD TCP\n      Transition 1 (entity B goes from state\
    \ CLOSED to state LISTEN).\n      The user associated with entity B issues a Passive\
    \ Open.\n         Actions: (see p. 104)\n            open; (see p. 144)\n    \
    \        new state := LISTEN;\n      Transition 2 (entity A goes from state CLOSED\
    \ to SYN_SENT). The\n      user associated with entity A issues an Active Open\
    \ with Data.\n         Actions: (see p. 104)\n            open; (see p. 144)\n\
    \            gen_syn(WITH_DATA); (see p. 141)\n               send_isn := gen_isn();\
    \                 [A.send_isn = 100]\n               send_next := send_isn + 1;\
    \            [A.send_next = 101]\n               send_una := send_isn;       \
    \           [A.send_una = 100]\n               seg.seq_num := send_isn;      \
    \        [seg.seq_num = 100]\n               seg.ack_flag := FALSE;          \
    \   [seg.ack_flag = FALSE]\n               seg.wndw := 0;                    \
    \         [seg.wndw = 0]\n               amount := send_policy()             \
    \  [assume amount > 0]\n            new state := SYN_SENT;\n"
- title: RFC 964                                                    November 1985
  contents:
  - 'RFC 964                                                    November 1985

    '
- title: Some Problems with MIL-STD TCP
  contents:
  - "Some Problems with MIL-STD TCP\n      Transition 3 (Entity B goes from state\
    \ LISTEN to state SYN_RECVD).\n      Entity B receives the SYN segment accompanying\
    \ data sent by entity\n      A.\n         Actions: (see p. 106)\n            (since\
    \ this segment has no RESET, no ACK, does have SYN, and\n            we assume\
    \ reasonable security and precedence parameters, row\n            3 of the table\
    \ applies)\n            record_syn; (see p. 147)\n               recv_isn := seg.seq_num;\
    \ [B.recv_isn = seg_seq_num = 100]\n               recv_next := recv_isn + 1;\
    \            [B.recv_next = 101]\n               if seg.ack_flag then\n      \
    \            send_una := seg.ack_num;                   [no change]\n        \
    \       accept_policy; (see p. 131)\n                  Accept in-order data only:\n\
    \                     Acceptance Test is\n                        seg.seq_num\
    \ = recv_next;\n                  Accept any data within the receive window:\n\
    \                     Acceptance Test has two parts\n                        recv_next\
    \ =< seg.seq_num =< recv_next +\n                                            \
    \                   recv_wndw\n                        or\n                  \
    \      recv_next =< seg.seq_num + length =<\n                                \
    \                   recv_next + recv_wndw\n                        ********************************************\n\
    \                           An error occurs here, with either possible\n     \
    \                      strategy given in accept_policy, because\n            \
    \               recv_next > seg.seq_num.  Therefore\n                        \
    \   accept_policy will incorrectly indicate that\n                           the\
    \ data cannot be accepted.\n                        ********************************************\n\
    \            gen_syn(WITH_ACK); (see p. 141)\n               send_isn := gen_isn();\
    \                 [B.send_isn = 300]\n               send_next := send_isn + 1;\
    \            [B.send_next = 301]\n               send_una := send_isn;       \
    \           [B.send_una = 300]\n               seg.seq_num := send_next;     \
    \        [seg.seq_num = 301]\n               seg.ack_flag := TRUE;           \
    \    [seg.ack_flag = TRUE]\n               seg.ack_num := recv_isn + 1;      \
    \    [seg.ack_num = 102]\n            new state := SYN_RECVD;\n"
- title: RFC 964                                                    November 1985
  contents:
  - 'RFC 964                                                    November 1985

    '
- title: Some Problems with MIL-STD TCP
  contents:
  - "Some Problems with MIL-STD TCP\n      Transition 4 (entity A goes from state\
    \ SYN_SENT to ESTAB) Entity A\n      receives the SYN ACK sent by entity B.\n\
    \         Actions: (see p. 107)\n            In order to select the applicable\
    \ row of the table on p.\n            107, we first evaluate the decision function\n\
    \            ACK_status_test1.\n               ACK_status_test1();\n         \
    \         if(seg.ack_flag = FALSE) then\n                     return(NONE);\n\
    \                  if(seg.ack_num <= send_una) or\n                     (seg.ack_num\
    \ > send_next) then\n                        return(INVALID)\n               \
    \   else\n                     return(VALID);\n                  ... and so on.\n\
    \      The important thing to notice in the above scenario is the error\n    \
    \  that occurs in transition 3, where the wrong value for recv_next\n      leads\
    \ to the routine record_syn refusing to accept the data.\n   Problem 2:  Problem\
    \ with Retransmission of SYN Packet\n      The actions listed for Active Open\
    \ (with or without data; see p.\n      103) are calls to the routines open and\
    \ gen_syn.  Neither of these\n      routines (or routines that they call) explicitly\
    \ sets a\n      retransmission timer.  Therefore if the initial SYN is lost there\n\
    \      is no timer expiration to trigger retransmission of the SYN.  If\n    \
    \  this happens, the TCP will fail in its attempt to establish the\n      desired\
    \ connection with a remote TCP.\n      Note that this differs with the actions\
    \ specified for transmission\n      of data from the ESTAB state.  In that transition\
    \ the routine\n      dispatch (p. 137) is called first which in turn calls the\
    \ routine\n      send_new_data (p.  156).  One of actions of the last routine\
    \ is to\n      start a retransmission timer for the newly sent data.\n"
- title: RFC 964                                                    November 1985
  contents:
  - 'RFC 964                                                    November 1985

    '
- title: Some Problems with MIL-STD TCP
  contents:
  - "Some Problems with MIL-STD TCP\n   Problem 3:  Problem with Receiving Data in\
    \ TCP ESTAB State\n      When both entities are in the state ESTAB, and one sends\
    \ data to\n      the other, an error in the actions of the receiver prohibits\
    \ the\n      data from being accepted.  The following simple scenario\n      illustrates\
    \ the problem.  Here the user associated with entity A\n      issues a Send request,\
    \ and A sends data to entity B.  When B\n      receives the data it replies with\
    \ an acknowledgment.\n      TCP entity A                                     \
    \     TCP entity B\n      ------------                                       \
    \   ------------\n      state                segment         segment         \
    \ state\n      transition           recvd or sent   recvd or sent    transition\n\
    \                           by A            by B\n      ESTAB -> ESTAB       DATA\
    \ -->\n                                           DATA -->       ESTAB -> ESTAB\n\
    \                                           <-- ACK\n      Transition 1 (entity\
    \ A goes from state ESTAB to ESTAB) Entity A\n      sends data packet to entity\
    \ B.\n         Actions: (see p. 110)\n            dispatch; (see p. 137)\n   \
    \   Transition 2 (entity B goes from state ESTAB to ESTAB) Entity B\n      receives\
    \ data packet from entity B.\n         Actions: (see p. 111)\n            Assuming\
    \ the data is in order and valid, we use row 6 of the\n            table.\n  \
    \          update; (see p. 159)\n            ************************************************************\n\
    \               An error occurs here, because the routine update does\n      \
    \         nothing to accept the incoming data, or to arrange to\n            \
    \   pass it on to the user.\n            ************************************************************\n"
- title: RFC 964                                                    November 1985
  contents:
  - 'RFC 964                                                    November 1985

    '
- title: Some Problems with MIL-STD TCP
  contents:
  - 'Some Problems with MIL-STD TCP

    '
- title: 5.  Solutions to Problems
  contents:
  - "5.  Solutions to Problems\n   The problem with record_syn and accept_policy can\
    \ be solved by having\n   record_syn call accept_policy before the variable recv_next\
    \ is\n   updated.\n   The problem with gen_syn can be corrected by having gen_syn\
    \ or open\n   explicitly request the retransmission timer.\n   The problem with\
    \ the reception of data in the ESTAB state is\n   apparently caused by the transposition\
    \ of the action tables on pages\n   111 and 112.  These tables should be interchanged.\
    \  This solution\n   will also correct a related problem, namely that an entity\
    \ can never\n   reach the CLOSE_WAIT state from the ESTAB state.\n   Syntax errors\
    \ in the action statements and tables could be easily\n   caught by an automatic\
    \ syntax checker if the document used a more\n   formal description technique.\
    \  This would be difficult to do for\n   [MILS83] since this document is not based\
    \ on a formalized description\n   technique [BREM83].\n   The errors pointed out\
    \ in this note have been submitted to DCA and\n   will be corrected in the next\
    \ update of the MIL STD TCP\n   specification.\n"
- title: 6.  Implementation of MIL Standard TCP
  contents:
  - "6.  Implementation of MIL Standard TCP\n   In the discussion above, we pointed\
    \ out several serious errors in the\n   specification of the Military Standard\
    \ Transmission Control Protocol\n   [MILS83].  These errors imply that a TCP implementation\
    \ that\n   faithfully conforms to the Military TCP standard will not be able to\n\
    \      Receive data sent with a SYN packet.\n      Establish a connection if the\
    \ initial SYN packet is lost.\n      Receive data when in the ESTAB state.\n \
    \  It also follows from our discussion that an implementation of MIL\n   Standard\
    \ TCP [MILS83] must include corrections mentioned above to get\n   a running TCP.\n\
    \   The problems pointed out in this paper with the current specification\n  \
    \ of the MIL Standard TCP [MILS83] are based on an initial\n   investigation of\
    \ this protocol standard by the authors.\n"
- title: RFC 964                                                    November 1985
  contents:
  - 'RFC 964                                                    November 1985

    '
- title: Some Problems with MIL-STD TCP
  contents:
  - 'Some Problems with MIL-STD TCP

    '
- title: REFERENCES
  contents:
  - "REFERENCES\n   [BLUT83]  Blumer, T. P., and Sidhu, D. P., \"Mechanical Verification\n\
    \             and Automatic Implementation of Authentication Protocols\n     \
    \        for Computer Networks\", SDC Burroughs Report (1983),\n             submitted\
    \ for publication.\n   [BLUT82]  Blumer, T. P., and Tenney, R. L., \"A Formal\
    \ Specification\n             Technique and Implementation Method for Protocols\"\
    ,\n             Computer Networks, Vol. 6, No. 3, July 1982, pp. 201-217.\n  \
    \ [BREM83]  Breslin, M., Pollack, R. and Sidhu D. P., \"Formalization of\n   \
    \          DoD Protocol Specification Technique\", SDC - Burroughs\n         \
    \    Report 1983.\n   [CERV74]  Cerf, V., and Kahn, R., \"A Protocol for Packet\
    \ Network\n             Interconnection\", IEEE Trans. Comm., May 1974.\n   [MILS83]\
    \  \"Military Standard Transmission Control Protocol\",\n             MIL-STD-1778,\
    \ 12 August 1983.\n   [POSJ81]  Postel, J. (ed.), \"DoD Standard Transmission\
    \ Control\n             Protocol\", Defense Advanced Research Projects Agency,\n\
    \             Information Processing Techniques Office, RFC-793,\n           \
    \  September 1981.\n   [SIDD83]  Sidhu, D. P., and Blumer, T. P., \"Verification\
    \ of NBS Class\n             4 Transport Protocol\", SDC Burroughs Report (1983),\n\
    \             submitted for publication.\n   [SUNC78]  Sunshine, C., and Dalal,\
    \ Y., \"Connection Management in\n             Transport Protocols\", Computer\
    \ Networks, Vol. 2, pp.454-473\n             (1978).\n"
