- title: __initial_text__
  contents:
  - '                           YANG Tree Diagrams

    '
- title: Abstract
  contents:
  - "Abstract\n   This document captures the current syntax used in YANG module tree\n\
    \   diagrams.  The purpose of this document is to provide a single\n   location\
    \ for this definition.  This syntax may be updated from time\n   to time based\
    \ on the evolution of the YANG language.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo documents an Internet Best Current Practice.\n\
    \   This document is a product of the Internet Engineering Task Force\n   (IETF).\
    \  It represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   BCPs is available in Section\
    \ 2 of RFC 7841.\n   Information about the current status of this document, any\
    \ errata,\n   and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8340.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2018 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (https://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n\
    \   2. Tree Diagram Syntax .............................................3\n  \
    \    2.1. Submodules .................................................5\n    \
    \  2.2. Groupings ..................................................5\n      2.3.\
    \ yang-data ..................................................5\n      2.4. Collapsed\
    \ Node Representation ..............................6\n      2.5. Comments ...................................................6\n\
    \      2.6. Node Representation ........................................6\n  \
    \ 3. Usage Guidelines for RFCs .......................................7\n    \
    \  3.1. Wrapping Long Lines ........................................8\n      3.2.\
    \ Groupings ..................................................8\n      3.3. Long\
    \ Diagrams ..............................................8\n   4. YANG Schema\
    \ Mount Tree Diagrams .................................9\n      4.1. Representation\
    \ of Mounted Schema Trees ....................10\n   5. IANA Considerations ............................................12\n\
    \   6. Security Considerations ........................................12\n  \
    \ 7. Informative References .........................................12\n   Authors'\
    \ Addresses ................................................13\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   YANG tree diagrams were first published in RFC 6536.  Such\
    \ diagrams\n   are used to provide a simplified graphical representation of a\
    \ data\n   model and can be automatically generated via tools such as \"pyang\"\
    \n   [PYANG].  This document describes the syntax used in YANG tree\n   diagrams.\
    \  It is expected that this document will be updated or\n   replaced as changes\
    \ to the YANG language [RFC7950] necessitate.\n   Today's common practice is to\
    \ include the definition of the syntax\n   used to represent a YANG module in\
    \ every document that provides a\n   tree diagram.  This practice has several\
    \ disadvantages; therefore,\n   the purpose of this document is to provide a single\
    \ location for this\n   definition.  It is not the intent of this document to\
    \ restrict future\n   changes, but rather to ensure that such changes are easily\
    \ identified\n   and suitably agreed upon.\n   An example tree diagram can be\
    \ found in Section 3 of [RFC8343]; the\n   following is a portion of it:\n   \
    \  +--rw interfaces\n        +--rw interface* [name]\n           +--rw name  \
    \                      string\n           +--rw description?                string\n\
    \           +--rw type                        identityref\n           +--rw enabled?\
    \                    boolean\n           +--rw link-up-down-trap-enable?   enumeration\
    \ {if-mib}?\n"
- title: 2.  Tree Diagram Syntax
  contents:
  - "2.  Tree Diagram Syntax\n   This section describes the meaning of the symbols\
    \ used in YANG tree\n   diagrams.\n   A full tree diagram of a module represents\
    \ all elements.  It includes\n   the name of the module and sections for top-level\
    \ module statements\n   (typically containers), augmentations, rpcs, and notifications\
    \ all\n   identified under a module statement.  Module trees may be included in\n\
    \   a document as a whole, by one or more sections, or even by subsets of\n  \
    \ nodes.\n   A module is identified by \"module:\" followed by the module-name.\n\
    \   This is followed by one or more sections, in order:\n   1.  The top-level\
    \ data nodes defined in the module, offset by\n       two spaces.\n   2.  Augmentations,\
    \ offset by two spaces and identified by the keyword\n       \"augment\" followed\
    \ by the augment target node and a colon (\":\")\n       character.\n   3.  RPCs,\
    \ offset by two spaces and identified by \"rpcs:\".\n   4.  Notifications, offset\
    \ by two spaces and identified by\n       \"notifications:\".\n   5.  Groupings,\
    \ offset by two spaces and identified by the keyword\n       \"grouping\" followed\
    \ by the name of the grouping and a colon (\":\")\n       character.\n   6.  yang-data,\
    \ offset by two spaces and identified by the keyword\n       \"yang-data\" followed\
    \ by the name of the yang-data structure and a\n       colon (\":\") character.\n\
    \   The relative organization of each section is provided using a\n   text-based\
    \ format that is typical of a file system directory tree\n   display command.\
    \  Each node in the tree is prefaced with \"+--\".\n   Schema nodes that are children\
    \ of another node are offset from the\n   parent by three spaces.  Sibling schema\
    \ nodes are listed with the\n   same space offset and, when separated by lines,\
    \ are linked via a\n   vertical bar (\"|\") character.\n   The full format, including\
    \ spacing conventions, is:\n     module: <module-name>\n       +--<node>\n   \
    \    |  +--<node>\n       |     +--<node>\n       +--<node>\n          +--<node>\n\
    \             +--<node>\n       augment <target-node>:\n         +--<node>\n \
    \           +--<node>\n            +--<node>\n               +--<node>\n     \
    \  augment <target-node>:\n         +--<node>\n       rpcs:\n         +--<rpc-node>\n\
    \         +--<rpc-node>\n            +--<node>\n            |  +--<node>\n   \
    \         +--<node>\n       notifications:\n         +--<notification-node>\n\
    \         +--<notification-node>\n            +--<node>\n            |  +--<node>\n\
    \            +--<node>\n       grouping <grouping-name>:\n         +--<node>\n\
    \            +--<node>\n            |  +--<node>\n            +--<node>\n    \
    \   grouping <grouping-name>:\n         +--<node>\n       yang-data <yang-data-name>:\n\
    \         +--<node>\n            +--<node>\n            |  +--<node>\n       \
    \     +--<node>\n       yang-data <yang-data-name>:\n         +--<node>\n"
- title: 2.1.  Submodules
  contents:
  - "2.1.  Submodules\n   Submodules are represented in the same fashion as modules\
    \ but are\n   identified by \"submodule:\" followed by the (sub)module-name. \
    \ For\n   example:\n     submodule: <module-name>\n       +--<node>\n       |\
    \  +--<node>\n       |     +--<node>\n"
- title: 2.2.  Groupings
  contents:
  - "2.2.  Groupings\n   Nodes within a used grouping are normally expanded as if\
    \ the nodes\n   were defined at the location of the \"uses\" statement.  However,\
    \ it is\n   also possible to not expand the \"uses\" statement but to instead\
    \ print\n   the name of the grouping.\n   For example, the following diagram shows\
    \ the \"tls-transport\" grouping\n   from [RFC7407] unexpanded:\n       +--rw\
    \ tls\n          +---u tls-transport\n   If the grouping is expanded, it could\
    \ be printed as:\n       +--rw tls\n          +--rw port?                 inet:port-number\n\
    \          +--rw client-fingerprint?   x509c2n:tls-fingerprint\n          +--rw\
    \ server-fingerprint?   x509c2n:tls-fingerprint\n          +--rw server-identity?\
    \      snmp:admin-string\n   Groupings may optionally be present in the \"groupings\"\
    \ section.\n"
- title: 2.3.  yang-data
  contents:
  - "2.3.  yang-data\n   If the module defines a \"yang-data\" structure [RFC8040],\
    \ these\n   structures may optionally be present in the \"yang-data\" section.\n"
- title: 2.4.  Collapsed Node Representation
  contents:
  - "2.4.  Collapsed Node Representation\n   At times when the composition of the\
    \ nodes within a module schema is\n   not important in the context of the presented\
    \ tree, sibling nodes and\n   their children can be collapsed using the notation\
    \ \"...\" in place of\n   the text lines used to represent the summarized nodes.\
    \  For example:\n       +--<node>\n       |  ...\n       +--<node>\n         \
    \ +--<node>\n             +--<node>\n"
- title: 2.5.  Comments
  contents:
  - "2.5.  Comments\n   Single line comments, starting with \"//\" (possibly indented)\
    \ and\n   ending at the end of the line, may be used in the tree notation.\n"
- title: 2.6.  Node Representation
  contents:
  - "2.6.  Node Representation\n   Each node in a YANG module is printed as:\n   \
    \  <status>--<flags> <name><opts> <type> <if-features>\n       <status> is one\
    \ of:\n         +  for current\n         x  for deprecated\n         o  for obsolete\n\
    \       <flags> is one of:\n         rw  for configuration data nodes and choice\
    \ nodes\n         ro  for non-configuration data nodes and choice nodes,\n   \
    \          output parameters to rpcs and actions, and\n             notification\
    \ parameters\n         -w  for input parameters to rpcs and actions\n        \
    \ -u  for uses of a grouping\n         -x  for rpcs and actions\n         -n \
    \ for notifications\n         mp  for nodes containing a \"mount-point\" extension\
    \ statement\n         Case nodes do not have any <flags>.\n       <name> is the\
    \ name of the node\n         (<name>) means that the node is a choice node\n \
    \       :(<name>) means that the node is a case node\n         If the node is\
    \ augmented into the tree from another module,\n         its name is printed as\
    \ <prefix>:<name>, where <prefix> is the\n         prefix defined in the module\
    \ where the node is defined.\n         If the node is a case node, there is no\
    \ space before the\n         <name>.\n       <opts> is one of:\n         ?  for\
    \ an optional leaf, choice, anydata, or anyxml\n         !  for a presence container\n\
    \         *  for a leaf-list or list\n         [<keys>] for a list's keys\n  \
    \       /  for a top-level data node in a mounted module\n         @  for a top-level\
    \ data node of a module identified in a\n            mount point parent reference\n\
    \       <type> is the name of the type for leafs and leaf-lists\n         If the\
    \ type is a leafref, the type is printed as either\n         (1) \"-> TARGET\"\
    , where TARGET is the leafref path,\n         with prefixes removed if possible\
    \ or (2) \"leafref\".\n       <if-features> is the list of features this node\
    \ depends on,\n         printed within curly brackets and a question mark \"{...}?\"\
    \n   Arbitrary whitespace is allowed between any of the whitespace-\n   separated\
    \ fields (e.g., <opts> and <type>).  Additional whitespace\n   may, for example,\
    \ be used to \"column align\" fields (e.g., within a\n   list or container) to\
    \ improve readability.\n"
- title: 3.  Usage Guidelines for RFCs
  contents:
  - "3.  Usage Guidelines for RFCs\n   This section provides general guidelines related\
    \ to the use of tree\n   diagrams in RFCs.\n"
- title: 3.1.  Wrapping Long Lines
  contents:
  - "3.1.  Wrapping Long Lines\n   Internet-Drafts and RFCs limit the number of characters\
    \ that may\n   appear in a line of text to 72 characters.  When the tree\n   representation\
    \ of a node results in a line being longer than this\n   limit, the line should\
    \ be broken between <opts> and <type> or between\n   <type> and <if-feature>.\
    \  The new line should be indented so that it\n   starts below <name> with a whitespace\
    \ offset of at least two\n   characters.  For example:\n     notifications:\n\
    \       +---n yang-library-change\n          +--ro module-set-id\n           \
    \       -> /modules-state/module-set-id\n   Long paths (e.g., leafref paths or\
    \ augment targets) can be split and\n   printed on more than one line.  For example:\n\
    \     augment /nat:nat/nat:instances/nat:instance/nat:mapping-table\n        \
    \       /nat:mapping-entry:\n   The previously mentioned \"pyang\" command can\
    \ be helpful in producing\n   such output; for example, the notification diagram\
    \ above was produced\n   using:\n     pyang -f tree --tree-line-length 50 ietf-yang-library.yang\n\
    \   When a tree diagram is included as a figure in an Internet-Draft or\n   RFC,\
    \ \"--tree-line-length 69\" works well.\n"
- title: 3.2.  Groupings
  contents:
  - "3.2.  Groupings\n   If the YANG module is comprised of groupings only, then the\
    \ tree\n   diagram should contain the groupings.  The \"pyang\" compiler can be\n\
    \   used to produce a tree diagram with groupings using the\n   \"-f tree --tree-print-groupings\"\
    \ command-line parameters.\n"
- title: 3.3.  Long Diagrams
  contents:
  - "3.3.  Long Diagrams\n   Tree diagrams can be split into sections to correspond\
    \ to document\n   structure.  As tree diagrams are intended to provide a simplified\n\
    \   view of a module, diagrams longer than a page should generally be\n   avoided.\
    \  If the complete tree diagram for a module becomes too long,\n   the diagram\
    \ can be split into several smaller diagrams.  For example,\n   it might be possible\
    \ to have one diagram with the data node and\n   another with all notifications.\
    \  If the data nodes tree is too long,\n   it is also possible to split the diagram\
    \ into smaller diagrams for\n   different subtrees.  When long diagrams are included\
    \ in a document,\n   authors should consider whether to include the long diagram\
    \ in the\n   main body of the document or in an appendix.\n   An example of such\
    \ a split can be found in [RFC7407], where\n   Section 2.4 of that document shows\
    \ the diagram for \"engine\n   configuration\":\n       +--rw snmp\n         \
    \ +--rw engine\n             // more parameters from the \"engine\" subtree here\n\
    \   Further, Section 2.5 of [RFC7407] shows the diagram for \"target\n   configuration\"\
    :\n       +--rw snmp\n          +--rw target* [name]\n             // more parameters\
    \ from the \"target\" subtree here\n   The previously mentioned \"pyang\" command\
    \ can be helpful in producing\n   such output; for example, the above example\
    \ was produced using:\n     pyang -f tree --tree-path /snmp/target ietf-snmp.yang\n"
- title: 4.  YANG Schema Mount Tree Diagrams
  contents:
  - "4.  YANG Schema Mount Tree Diagrams\n   \"YANG schema mount\" is defined in [SCHEMA-MOUNT]\
    \ and warrants some\n   specific discussion.  Schema mount is a generic mechanism\
    \ that allows\n   for the mounting of one or more YANG modules at a specified\
    \ location\n   of another (parent) schema.  The specific location is referred\
    \ to as\n   a \"mount point\", and any container or list node in a schema may\
    \ serve\n   as a mount point.  Mount points are identified via the inclusion of\n\
    \   the \"mount-point\" extension statement as a substatement under a\n   container\
    \ or list node.  Mount point nodes are thus directly\n   identified in a module\
    \ schema definition and can be identified in a\n   tree diagram as indicated above\
    \ using the \"mp\" flag.\n   In the following example taken from [YANG-NIs], \"\
    vrf-root\" is a\n   container that includes the \"mount-point\" extension statement\
    \ as part\n   of its definition:\n     module: ietf-network-instance\n       +--rw\
    \ network-instances\n          +--rw network-instance* [name]\n             +--rw\
    \ name           string\n             +--rw enabled?       boolean\n         \
    \    +--rw description?   string\n             +--rw (ni-type)?\n            \
    \ +--rw (root-type)\n                +--:(vrf-root)\n                |  +--mp\
    \ vrf-root\n"
- title: 4.1.  Representation of Mounted Schema Trees
  contents:
  - "4.1.  Representation of Mounted Schema Trees\n   The actual modules made available\
    \ under a mount point are controlled\n   by a server and are provided to clients.\
    \  This information is\n   typically provided via the schema mount module\n  \
    \ (\"ietf-yang-schema-mount\") defined in [SCHEMA-MOUNT].  The schema\n   mount\
    \ module supports the exposure of both mounted schema and\n   \"parent-references\"\
    .  Parent references are used for XML Path\n   Language (XPath) evaluation within\
    \ mounted modules and do not\n   represent client-accessible paths; the referenced\
    \ information is\n   available to clients via the parent schema.  Schema mount\
    \ also\n   defines an \"inline\" type of mount point, where mounted modules are\n\
    \   exposed via the YANG library module.\n   Although the modules made available\
    \ under a mount point are not\n   specified in YANG modules that include mount\
    \ points, the document\n   defining the module will describe the intended use\
    \ of the module and\n   may identify both modules that will be mounted and parent\
    \ modules\n   that can be referenced by mounted modules.  An example of such a\n\
    \   description can be found in [YANG-NIs].  A specific implementation of\n  \
    \ a module containing mount points will also support a specific list of\n   mounted\
    \ and referenced modules.  In describing both intended use and\n   actual implementations,\
    \ it is helpful to show how mounted modules\n   would be instantiated and referenced\
    \ under a mount point using tree\n   diagrams.\n   In such diagrams, the mount\
    \ point should be treated much like a\n   container that uses a grouping.  The\
    \ flags should also be set based\n   on the \"config\" leaf mentioned above, and\
    \ the mount-related options\n   indicated above should be shown for the top-level\
    \ nodes in a mounted\n   or referenced module.  The following example, taken from\
    \ [YANG-NIs],\n   represents the prior example with the YANG modules \"ietf-routing\"\
    \n   [YANG-Routing] and \"ietf-ospf\" [OSPF-YANG] mounted, nodes from the\n  \
    \ YANG module \"ietf-interfaces\" [RFC8343] accessible via a\n   parent-reference,\
    \ and \"config\" indicating \"true\":\n     module: ietf-network-instance\n  \
    \     +--rw network-instances\n          +--rw network-instance* [name]\n    \
    \         +--rw name           string\n             +--rw enabled?       boolean\n\
    \             +--rw description?   string\n             +--rw (ni-type)?\n   \
    \          +--rw (root-type)\n                +--:(vrf-root)\n               \
    \    +--mp vrf-root\n                      +--ro rt:routing-state/\n         \
    \             |  +--ro router-id?\n                      |  +--ro control-plane-protocols\n\
    \                      |     +--ro control-plane-protocol* [type name]\n     \
    \                 |        +--ro ospf:ospf\n                      |          \
    \ +--ro instance* [af]\n                      |           ...\n              \
    \        +--rw rt:routing/\n                      |  +--rw router-id?\n      \
    \                |  +--rw control-plane-protocols\n                      |   \
    \  +--rw control-plane-protocol* [type name]\n                      |     +--rw\
    \ ospf:ospf\n                      |        +--rw instance* [af]\n           \
    \           |           ...\n                      +--ro if:interfaces@\n    \
    \                  |  ...\n                      +--ro if:interfaces-state@\n\
    \                      |  ...\n   It is worth highlighting that the \"ietf-ospf\"\
    \ module augments the\n   \"ietf-routing\" module, and although it is listed in\
    \ the schema mount\n   module (or inline YANG library), there is no special mount-related\n\
    \   notation in the tree diagram.\n   A mount point definition alone is not sufficient\
    \ to identify whether\n   the mounted modules are used for configuration data\
    \ or for\n   non-configuration data.  This is determined by the\n   \"ietf-yang-schema-mount\"\
    \ module's \"config\" leaf associated with the\n   specific mount point and is\
    \ indicated on the top-level mounted nodes.\n   For example, in the above tree,\
    \ when the \"config\" leaf for the\n   \"ietf-routing\" module indicates \"false\"\
    , the nodes in the\n   \"rt:routing\" subtree would have different flags:\n  \
    \                    +--ro rt:routing/\n                      |  +--ro router-id?\n\
    \                      |  +--ro control-plane-protocols\n                    \
    \     ...\n"
- title: 5.  IANA Considerations
  contents:
  - "5.  IANA Considerations\n   This document has no IANA actions.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   There is no security impact related to the tree\
    \ diagrams defined in\n   this document.\n"
- title: 7.  Informative References
  contents:
  - "7.  Informative References\n   [OSPF-YANG]\n              Yeung, D., Qu, Y.,\
    \ Zhang, J., Chen, I., and A. Lindem,\n              \"Yang Data Model for OSPF\
    \ Protocol\", Work in Progress,\n              draft-ietf-ospf-yang-10, March\
    \ 2018.\n   [PYANG]    \"pyang\", February 2018,\n              <https://github.com/mbj4668/pyang>.\n\
    \   [RFC7407]  Bjorklund, M. and J. Schoenwaelder, \"A YANG Data Model for\n \
    \             SNMP Configuration\", RFC 7407, DOI 10.17487/RFC7407,\n        \
    \      December 2014, <https://www.rfc-editor.org/info/rfc7407>.\n   [RFC7950]\
    \  Bjorklund, M., Ed., \"The YANG 1.1 Data Modeling Language\",\n            \
    \  RFC 7950, DOI 10.17487/RFC7950, August 2016,\n              <https://www.rfc-editor.org/info/rfc7950>.\n\
    \   [RFC8040]  Bierman, A., Bjorklund, M., and K. Watsen, \"RESTCONF\n       \
    \       Protocol\", RFC 8040, DOI 10.17487/RFC8040, January 2017,\n          \
    \    <https://www.rfc-editor.org/info/rfc8040>.\n   [RFC8343]  Bjorklund, M.,\
    \ \"A YANG Data Model for Interface\n              Management\", RFC 8343, DOI\
    \ 10.17487/RFC8343, March 2018,\n              <https://www.rfc-editor.org/info/rfc8343>.\n\
    \   [SCHEMA-MOUNT]\n              Bjorklund, M. and L. Lhotka, \"YANG Schema Mount\"\
    , Work in\n              Progress, draft-ietf-netmod-schema-mount-08, October\
    \ 2017.\n   [YANG-NIs] Berger, L., Hopps, C., Lindem, A., Bogdanovic, D., and\
    \ X.\n              Liu, \"YANG Model for Network Instances\", Work in\n     \
    \         Progress, draft-ietf-rtgwg-ni-model-11, March 2018.\n   [YANG-Routing]\n\
    \              Lhotka, L., Lindem, A., and Y. Qu, \"A YANG Data Model for\n  \
    \            Routing Management (NMDA Version)\", Work in Progress,\n        \
    \      draft-ietf-netmod-rfc8022bis-11, January 2018.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Martin Bjorklund\n   Tail-f Systems\n   Email: mbj@tail-f.com\n\
    \   Lou Berger (editor)\n   LabN Consulting, L.L.C.\n   Email: lberger@labn.net\n"
