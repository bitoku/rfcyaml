- contents:
  - "             Lightweight Directory Access Protocol (LDAP):\n                  Internationalized
    String Preparation\n"
  title: __initial_text__
- contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2006).\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   The previous Lightweight Directory Access Protocol (LDAP) technical\n
    \  specifications did not precisely define how character string matching\n   is
    to be performed.  This led to a number of usability and\n   interoperability problems.
    \ This document defines string preparation\n   algorithms for character-based
    matching rules defined for use in\n   LDAP.\n"
  title: Abstract
- contents:
  - '1.  Introduction

    '
  - contents:
    - "1.1.  Background\n   A Lightweight Directory Access Protocol (LDAP) [RFC4510]
      matching\n   rule [RFC4517] defines an algorithm for determining whether a\n
      \  presented value matches an attribute value in accordance with the\n   criteria
      defined for the rule.  The proposition may be evaluated to\n   True, False,
      or Undefined.\n      True      - the attribute contains a matching value,\n
      \     False     - the attribute contains no matching value,\n      Undefined
      - it cannot be determined whether the attribute contains\n                  a
      matching value.\n   For instance, the caseIgnoreMatch matching rule may be used
      to\n   compare whether the commonName attribute contains a particular value\n
      \  without regard for case and insignificant spaces.\n"
    title: 1.1.  Background
  - contents:
    - "1.2.  X.500 String Matching Rules\n   \"X.520: Selected attribute types\" [X.520]
      provides (among other\n   things) value syntaxes and matching rules for comparing
      values\n   commonly used in the directory [X.500].  These specifications are\n
      \  inadequate for strings composed of Unicode [Unicode] characters.\n   The
      caseIgnoreMatch matching rule [X.520], for example, is simply\n   defined as
      being a case-insensitive comparison where insignificant\n   spaces are ignored.
      \ For printableString, there is only one space\n   character and case mapping
      is bijective, hence this definition is\n   sufficient.  However, for Unicode
      string types such as\n   universalString, this is not sufficient.  For example,
      a case-\n   insensitive matching implementation that folded lowercase characters\n
      \  to uppercase would yield different results than an implementation\n   that
      used uppercase to lowercase folding.  Or one implementation may\n   view space
      as referring to only SPACE (U+0020), a second\n   implementation may view any
      character with the space separator (Zs)\n   property as a space, and another
      implementation may view any\n   character with the whitespace (WS) category
      as a space.\n   The lack of precise specification for character string matching
      has\n   led to significant interoperability problems.  When used in\n   certificate
      chain validation, security vulnerabilities can arise.  To\n   address these
      problems, this document defines precise algorithms for\n   preparing character
      strings for matching.\n"
    title: 1.2.  X.500 String Matching Rules
  - contents:
    - "1.3.  Relationship to \"stringprep\"\n   The character string preparation algorithms
      described in this\n   document are based upon the \"stringprep\" approach [RFC3454].
      \ In\n   \"stringprep\", presented and stored values are first prepared for\n
      \  comparison so that a character-by-character comparison yields the\n   \"correct\"
      result.\n   The approach used here is a refinement of the \"stringprep\" [RFC3454]\n
      \  approach.  Each algorithm involves two additional preparation steps.\n   a)
      Prior to applying the Unicode string preparation steps outlined in\n      \"stringprep\",
      the string is transcoded to Unicode.\n   b) After applying the Unicode string
      preparation steps outlined in\n      \"stringprep\", the string is modified
      to appropriately handle\n      characters insignificant to the matching rule.\n
      \  Hence, preparation of character strings for X.500 [X.500] matching\n   [X.501]
      involves the following steps:\n      1) Transcode\n      2) Map\n      3) Normalize\n
      \     4) Prohibit\n      5) Check Bidi (Bidirectional)\n      6) Insignificant
      Character Handling\n   These steps are described in Section 2.\n   It is noted
      that while various tables of Unicode characters included\n   or referenced by
      this specification are derived from Unicode\n   [Unicode] data, these tables
      are to be considered definitive for the\n   purpose of implementing this specification.\n"
    title: 1.3.  Relationship to "stringprep"
  - contents:
    - "1.4.  Relationship to the LDAP Technical Specification\n   This document is
      an integral part of the LDAP technical specification\n   [RFC4510], which obsoletes
      the previously defined LDAP technical\n   specification [RFC3377] in its entirety.\n
      \  This document details new LDAP internationalized character string\n   preparation
      algorithms used by [RFC4517] and possible other technical\n   specifications
      defining LDAP syntaxes and/or matching rules.\n"
    title: 1.4.  Relationship to the LDAP Technical Specification
  - contents:
    - "1.5.  Relationship to X.500\n   LDAP is defined [RFC4510] in X.500 terms as
      an X.500 access\n   mechanism.  As such, there is a strong desire for alignment
      between\n   LDAP and X.500 syntax and semantics.  The character string\n   preparation
      algorithms described in this document are based upon\n   \"Internationalized
      String Matching Rules for X.500\" [XMATCH] proposal\n   to ITU/ISO Joint Study
      Group 2.\n"
    title: 1.5.  Relationship to X.500
  - contents:
    - "1.6.  Conventions and Terms\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\",
      \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\",
      and \"OPTIONAL\" in this\n   document are to be interpreted as described in
      BCP 14 [RFC2119].\n   Character names in this document use the notation for
      code points and\n   names from the Unicode Standard [Unicode].  For example,
      the letter\n   \"a\" may be represented as either <U+0061> or <LATIN SMALL LETTER
      A>.\n   In the lists of mappings and the prohibited characters, the \"U+\" is\n
      \  left off to make the lists easier to read.  The comments for\n   character
      ranges are shown in square brackets (such as \"[CONTROL\n   CHARACTERS]\") and
      do not come from the standard.\n   Note: a glossary of terms used in Unicode
      can be found in [Glossary].\n   Information on the Unicode character encoding
      model can be found in\n   [CharModel].\n   The term \"combining mark\", as used
      in this specification, refers to\n   any Unicode [Unicode] code point that has
      a mark property (Mn, Mc,\n   Me).  Appendix A provides a definitive list of
      combining marks.\n"
    title: 1.6.  Conventions and Terms
  title: 1.  Introduction
- contents:
  - "2.  String Preparation\n   The following six-step process SHALL be applied to
    each presented and\n   attribute value in preparation for character string matching
    rule\n   evaluation.\n      1) Transcode\n      2) Map\n      3) Normalize\n      4)
    Prohibit\n      5) Check bidi\n      6) Insignificant Character Handling\n   Failure
    in any step causes the assertion to evaluate to Undefined.\n   The character repertoire
    of this process is Unicode 3.2 [Unicode].\n   Note that this six-step process
    specification is intended to describe\n   expected matching behavior.  Implementations
    are free to use\n   alternative processes so long as the matching rule evaluation\n
    \  behavior provided is consistent with the behavior described by this\n   specification.\n"
  - contents:
    - "2.1.  Transcode\n   Each non-Unicode string value is transcoded to Unicode.\n
      \  PrintableString [X.680] values are transcoded directly to Unicode.\n   UniversalString,
      UTF8String, and bmpString [X.680] values need not be\n   transcoded as they
      are Unicode-based strings (in the case of\n   bmpString, a subset of Unicode).\n
      \  TeletexString [X.680] values are transcoded to Unicode.  As there is\n   no
      standard for mapping TeletexString values to Unicode, the mapping\n   is left
      a local matter.\n   For these and other reasons, use of TeletexString is NOT
      RECOMMENDED.\n   The output is the transcoded string.\n"
    title: 2.1.  Transcode
  - contents:
    - "2.2.  Map\n   SOFT HYPHEN (U+00AD) and MONGOLIAN TODO SOFT HYPHEN (U+1806)
      code\n   points are mapped to nothing.  COMBINING GRAPHEME JOINER (U+034F) and\n
      \  VARIATION SELECTORs (U+180B-180D, FF00-FE0F) code points are also\n   mapped
      to nothing.  The OBJECT REPLACEMENT CHARACTER (U+FFFC) is\n   mapped to nothing.\n
      \  CHARACTER TABULATION (U+0009), LINE FEED (LF) (U+000A), LINE\n   TABULATION
      (U+000B), FORM FEED (FF) (U+000C), CARRIAGE RETURN (CR)\n   (U+000D), and NEXT
      LINE (NEL) (U+0085) are mapped to SPACE (U+0020).\n   All other control code
      (e.g., Cc) points or code points with a\n   control function (e.g., Cf) are
      mapped to nothing.  The following is\n   a complete list of these code points:
      U+0000-0008, 000E-001F, 007F-\n   0084, 0086-009F, 06DD, 070F, 180E, 200C-200F,
      202A-202E, 2060-2063,\n   206A-206F, FEFF, FFF9-FFFB, 1D173-1D17A, E0001, E0020-E007F.\n
      \  ZERO WIDTH SPACE (U+200B) is mapped to nothing.  All other code\n   points
      with Separator (space, line, or paragraph) property (e.g., Zs,\n   Zl, or Zp)
      are mapped to SPACE (U+0020).  The following is a complete\n   list of these
      code points: U+0020, 00A0, 1680, 2000-200A, 2028-2029,\n   202F, 205F, 3000.\n
      \  For case ignore, numeric, and stored prefix string matching rules,\n   characters
      are case folded per B.2 of [RFC3454].\n   The output is the mapped string.\n"
    title: 2.2.  Map
  - contents:
    - "2.3.  Normalize\n   The input string is to be normalized to Unicode Form KC\n
      \  (compatibility composed) as described in [UAX15].  The output is the\n   normalized
      string.\n"
    title: 2.3.  Normalize
  - contents:
    - "2.4.  Prohibit\n   All Unassigned code points are prohibited.  Unassigned code
      points\n   are listed in Table A.1 of [RFC3454].\n   Characters that, per Section
      5.8 of [RFC3454], change display\n   properties or are deprecated are prohibited.
      \ These characters are\n   listed in Table C.8 of [RFC3454].\n   Private Use
      code points are prohibited.  These characters are listed\n   in Table C.3 of
      [RFC3454].\n   All non-character code points are prohibited.  These code points
      are\n   listed in Table C.4 of [RFC3454].\n   Surrogate codes are prohibited.
      \ These characters are listed in Table\n   C.5 of [RFC3454].\n   The REPLACEMENT
      CHARACTER (U+FFFD) code point is prohibited.\n   The step fails if the input
      string contains any prohibited code\n   point.  Otherwise, the output is the
      input string.\n"
    title: 2.4.  Prohibit
  - contents:
    - "2.5.  Check bidi\n   Bidirectional characters are ignored.\n"
    title: 2.5.  Check bidi
  - contents:
    - "2.6.  Insignificant Character Handling\n   In this step, the string is modified
      to ensure proper handling of\n   characters insignificant to the matching rule.
      \ This modification\n   differs from matching rule to matching rule.\n   Section
      2.6.1 applies to case ignore and exact string matching.\n   Section 2.6.2 applies
      to numericString matching.\n   Section 2.6.3 applies to telephoneNumber matching.\n"
    - contents:
      - "2.6.1.  Insignificant Space Handling\n   For the purposes of this section,
        a space is defined to be the SPACE\n   (U+0020) code point followed by no
        combining marks.\n       NOTE - The previous steps ensure that the string
        cannot contain\n              any code points in the separator class, other
        than SPACE\n              (U+0020).\n   For input strings that are attribute
        values or non-substring\n   assertion values:  If the input string contains
        no non-space\n   character, then the output is exactly two SPACEs.  Otherwise
        (the\n   input string contains at least one non-space character), the string\n
        \  is modified such that the string starts with exactly one space\n   character,
        ends with exactly one SPACE character, and any inner\n   (non-empty) sequence
        of space characters is replaced with exactly two\n   SPACE characters.  For
        instance, the input strings\n   \"foo<SPACE>bar<SPACE><SPACE>\", result in
        the output\n   \"<SPACE>foo<SPACE><SPACE>bar<SPACE>\".\n   For input strings
        that are substring assertion values: If the string\n   being prepared contains
        no non-space characters, then the output\n   string is exactly one SPACE.
        \ Otherwise, the following steps are\n   taken:\n   -  If the input string
        is an initial substring, it is modified to\n      start with exactly one SPACE
        character;\n   -  If the input string is an initial or an any substring that
        ends in\n      one or more space characters, it is modified to end with exactly\n
        \     one SPACE character;\n   -  If the input string is an any or a final
        substring that starts in\n      one or more space characters, it is modified
        to start with exactly\n      one SPACE character; and\n   -  If the input
        string is a final substring, it is modified to end\n      with exactly one
        SPACE character.\n   For instance, for the input string \"foo<SPACE>bar<SPACE><SPACE>\"
        as\n   an initial substring, the output would be\n   \"<SPACE>foo<SPACE><SPACE>bar<SPACE>\".
        \ As an any or final substring,\n   the same input would result in \"foo<SPACE>bar<SPACE>\".\n
        \  Appendix B discusses the rationale for the behavior.\n"
      title: 2.6.1.  Insignificant Space Handling
    - contents:
      - "2.6.2.  numericString Insignificant Character Handling\n   For the purposes
        of this section, a space is defined to be the SPACE\n   (U+0020) code point
        followed by no combining marks.\n   All spaces are regarded as insignificant
        and are to be removed.\n   For example, removal of spaces from the Form KC
        string:\n       \"<SPACE><SPACE>123<SPACE><SPACE>456<SPACE><SPACE>\"\n   would
        result in the output string:\n       \"123456\"\n   and the Form KC string:\n
        \      \"<SPACE><SPACE><SPACE>\"\n   would result in the output string:\n
        \      \"\" (an empty string).\n"
      title: 2.6.2.  numericString Insignificant Character Handling
    - contents:
      - "2.6.3.  telephoneNumber Insignificant Character Handling\n   For the purposes
        of this section, a hyphen is defined to be a\n   HYPHEN-MINUS (U+002D), ARMENIAN
        HYPHEN (U+058A), HYPHEN (U+2010),\n   NON-BREAKING HYPHEN (U+2011), MINUS
        SIGN (U+2212), SMALL HYPHEN-MINUS\n   (U+FE63), or FULLWIDTH HYPHEN-MINUS
        (U+FF0D) code point followed by\n   no combining marks and a space is defined
        to be the SPACE (U+0020)\n   code point followed by no combining marks.\n
        \  All hyphens and spaces are considered insignificant and are to be\n   removed.\n
        \  For example, removal of hyphens and spaces from the Form KC string:\n       \"<SPACE><HYPHEN>123<SPACE><SPACE>456<SPACE><HYPHEN>\"\n
        \  would result in the output string:\n       \"123456\"\n   and the Form
        KC string:\n       \"<HYPHEN><HYPHEN><HYPHEN>\"\n   would result in the (empty)
        output string:\n       \"\".\n"
      title: 2.6.3.  telephoneNumber Insignificant Character Handling
    title: 2.6.  Insignificant Character Handling
  title: 2.  String Preparation
- contents:
  - "3.  Security Considerations\n   \"Preparation of Internationalized Strings (\"stringprep\")\"
    [RFC3454]\n   security considerations generally apply to the algorithms described\n
    \  here.\n"
  title: 3.  Security Considerations
- contents:
  - "4.  Acknowledgements\n   The approach used in this document is based upon design
    principles\n   and algorithms described in \"Preparation of Internationalized
    Strings\n   ('stringprep')\" [RFC3454] by Paul Hoffman and Marc Blanchet.  Some\n
    \  additional guidance was drawn from Unicode Technical Standards,\n   Technical
    Reports, and Notes.\n   This document is a product of the IETF LDAP Revision (LDAPBIS)\n
    \  Working Group.\n"
  title: 4.  Acknowledgements
- contents:
  - '5.  References

    '
  - contents:
    - "5.1.  Normative References\n   [RFC2119]     Bradner, S., \"Key words for use
      in RFCs to Indicate\n                 Requirement Levels\", BCP 14, RFC 2119,
      March 1997.\n   [RFC3454]     Hoffman, P. and M. Blanchet, \"Preparation of\n
      \                Internationalized Strings (\"stringprep\")\", RFC 3454,\n                 December
      2002.\n   [RFC4510]     Zeilenga, K., \"Lightweight Directory Access Protocol\n
      \                (LDAP): Technical Specification Road Map\", RFC 4510,\n                 June
      2006.\n   [RFC4517]     Legg, S., Ed., \"Lightweight Directory Access Protocol\n
      \                (LDAP): Syntaxes and Matching Rules\", RFC 4517, June\n                 2006.\n
      \  [Unicode]     The Unicode Consortium, \"The Unicode Standard, Version\n                 3.2.0\"
      is defined by \"The Unicode Standard, Version\n                 3.0\" (Reading,
      MA, Addison-Wesley, 2000.  ISBN 0-201-\n                 61633-5), as amended
      by the \"Unicode Standard Annex\n                 #27: Unicode 3.1\"\n                 (http://www.unicode.org/reports/tr27/)
      and by the\n                 \"Unicode Standard Annex #28: Unicode 3.2\"\n                 (http://www.unicode.org/reports/tr28/).\n
      \  [UAX15]       Davis, M. and M. Duerst, \"Unicode Standard Annex #15:\n                 Unicode
      Normalization Forms, Version 3.2.0\".\n                 <http://www.unicode.org/unicode/reports/tr15/tr15-\n
      \                22.html>, March 2002.\n   [X.680]       International Telecommunication
      Union -\n                 Telecommunication Standardization Sector, \"Abstract\n
      \                Syntax Notation One (ASN.1) - Specification of Basic\n                 Notation\",
      X.680(2002) (also ISO/IEC 8824-1:2002).\n"
    title: 5.1.  Normative References
  - contents:
    - "5.2.  Informative References\n   [X.500]       International Telecommunication
      Union -\n                 Telecommunication Standardization Sector, \"The\n
      \                Directory -- Overview of concepts, models and\n                 services,\"
      X.500(1993) (also ISO/IEC 9594-1:1994).\n   [X.501]       International Telecommunication
      Union -\n                 Telecommunication Standardization Sector, \"The\n
      \                Directory -- Models,\" X.501(1993) (also ISO/IEC 9594-\n                 2:1994).\n
      \  [X.520]       International Telecommunication Union -\n                 Telecommunication
      Standardization Sector, \"The\n                 Directory: Selected Attribute
      Types\", X.520(1993) (also\n                 ISO/IEC 9594-6:1994).\n   [Glossary]
      \   The Unicode Consortium, \"Unicode Glossary\",\n                 <http://www.unicode.org/glossary/>.\n
      \  [CharModel]   Whistler, K. and M. Davis, \"Unicode Technical Report\n                 #17,
      Character Encoding Model\", UTR17,\n                 <http://www.unicode.org/unicode/reports/tr17/>,
      August\n                 2000.\n   [RFC3377]     Hodges, J. and R. Morgan, \"Lightweight
      Directory Access\n                 Protocol (v3): Technical Specification\",
      RFC 3377,\n                 September 2002.\n   [RFC4515]     Smith, M., Ed.
      and T. Howes, \"Lightweight Directory\n                 Access Protocol (LDAP):
      String Representation of Search\n                 Filters\", RFC 4515, June
      2006.\n   [XMATCH]      Zeilenga, K., \"Internationalized String Matching Rules\n
      \                for X.500\", Work in Progress.\n"
    title: 5.2.  Informative References
  title: 5.  References
- contents:
  - "Appendix A.  Combining Marks\n   This appendix is normative.\n   This table was
    derived from Unicode [Unicode] data files; it lists\n   all code points with the
    Mn, Mc, or Me properties.  This table is to\n   be considered definitive for the
    purposes of implementation of this\n   specification.\n         0300-034F 0360-036F
    0483-0486 0488-0489 0591-05A1\n         05A3-05B9 05BB-05BC 05BF 05C1-05C2 05C4
    064B-0655 0670\n         06D6-06DC 06DE-06E4 06E7-06E8 06EA-06ED 0711 0730-074A\n
    \        07A6-07B0 0901-0903 093C 093E-094F 0951-0954 0962-0963\n         0981-0983
    09BC 09BE-09C4 09C7-09C8 09CB-09CD 09D7\n         09E2-09E3 0A02 0A3C 0A3E-0A42
    0A47-0A48 0A4B-0A4D\n         0A70-0A71 0A81-0A83 0ABC 0ABE-0AC5 0AC7-0AC9 0ACB-0ACD\n
    \        0B01-0B03 0B3C 0B3E-0B43 0B47-0B48 0B4B-0B4D 0B56-0B57\n         0B82
    0BBE-0BC2 0BC6-0BC8 0BCA-0BCD 0BD7 0C01-0C03\n         0C3E-0C44 0C46-0C48 0C4A-0C4D
    0C55-0C56 0C82-0C83\n         0CBE-0CC4 0CC6-0CC8 0CCA-0CCD 0CD5-0CD6 0D02-0D03\n
    \        0D3E-0D43 0D46-0D48 0D4A-0D4D 0D57 0D82-0D83 0DCA\n         0DCF-0DD4
    0DD6 0DD8-0DDF 0DF2-0DF3 0E31 0E34-0E3A\n         0E47-0E4E 0EB1 0EB4-0EB9 0EBB-0EBC
    0EC8-0ECD 0F18-0F19\n         0F35 0F37 0F39 0F3E-0F3F 0F71-0F84 0F86-0F87 0F90-0F97\n
    \        0F99-0FBC 0FC6 102C-1032 1036-1039 1056-1059 1712-1714\n         1732-1734
    1752-1753 1772-1773 17B4-17D3 180B-180D 18A9\n         20D0-20EA 302A-302F 3099-309A
    FB1E FE00-FE0F FE20-FE23\n         1D165-1D169 1D16D-1D172 1D17B-1D182 1D185-1D18B\n
    \        1D1AA-1D1AD\n"
  title: Appendix A.  Combining Marks
- contents:
  - "Appendix B.  Substrings Matching\n   This appendix is non-normative.\n   In the
    absence of substrings matching, the insignificant space\n   handling for case
    ignore/exact matching could be simplified.\n   Specifically, the handling could
    be to require that all sequences of\n   one or more spaces be replaced with one
    space and, if the string\n   contains non-space characters, removal of all leading
    spaces and\n   trailing spaces.\n   In the presence of substrings matching, this
    simplified space\n   handling would lead to unexpected and undesirable matching
    behavior.\n   For instance:\n   1) (CN=foo\\20*\\20bar) would match the CN value
    \"foobar\";\n   2) (CN=*\\20foobar\\20*) would match \"foobar\", but\n      (CN=*\\20*foobar*\\20*)
    would not.\n   Note to readers not familiar with LDAP substrings matching: the
    LDAP\n   filter [RFC4515] assertion (CN=A*B*C) says to \"match any value (of\n
    \  the attribute CN) that begins with A, contains B after A, ends with C\n   where
    C is also after B.\"\n   The first case illustrates that this simplified space
    handling would\n   cause leading and trailing spaces in substrings of the string
    to be\n   regarded as insignificant.  However, only leading and trailing (as\n
    \  well as multiple consecutive spaces) of the string (as a whole) are\n   insignificant.\n
    \  The second case illustrates that this simplified space handling would\n   cause
    sub-partitioning failures.  That is, if a prepared any\n   substring matches a
    partition of the attribute value, then an\n   assertion constructed by subdividing
    that substring into multiple\n   substrings should also match.\n   In designing
    an appropriate approach for space handling for\n   substrings matching, one must
    study key aspects of X.500 case\n   exact/ignore matching.  X.520 [X.520] says:\n
    \     The [substrings] rule returns TRUE if there is a partitioning of\n      the
    attribute value (into portions) such that:\n         -  the specified substrings
    (initial, any, final) match\n            different portions of the value in the
    order of the strings\n            sequence;\n         -  initial, if present,
    matches the first portion of the value;\n         -  final, if present, matches
    the last portion of the value;\n         -  any, if present, matches some arbitrary
    portion of the\n            value.\n   That is, the substrings assertion (CN=foo\\20*\\20bar)
    matches the\n   attribute value \"foo<SPACE><SPACE>bar\" as the value can be\n
    \  partitioned into the portions \"foo<SPACE>\" and \"<SPACE>bar\" meeting\n   the
    above requirements.\n   X.520 also says:\n      [T]he following spaces are regarded
    as not significant:\n         -  leading spaces (i.e., those preceding the first
    character\n            that is not a space);\n         -  trailing spaces (i.e.,
    those following the last character\n            that is not a space);\n         -
    \ multiple consecutive spaces (these are taken as equivalent\n            to a
    single space character).\n   This statement applies to the assertion values and
    attribute values\n   as whole strings, and not individually to substrings of an
    assertion\n   value.  In particular, the statements should be taken to mean that
    if\n   an assertion value and attribute value match without any\n   consideration
    to insignificant characters, then that assertion value\n   should also match any
    attribute value that differs only by inclusion\n   nor removal of insignificant
    characters.\n   Hence the assertion (CN=foo\\20*\\20bar) matches\n   \"foo<SPACE><SPACE><SPACE>bar\"
    and \"foo<SPACE>bar\" as these values\n   only differ from \"foo<SPACE><SPACE>bar\"
    by the inclusion or removal\n   of insignificant spaces.\n   Astute readers of
    this text will also note that there are special\n   cases where the specified
    space handling does not ignore spaces that\n   could be considered insignificant.
    \ For instance, the assertion\n   (CN=\\20*\\20*\\20) does not match \"<SPACE><SPACE><SPACE>\"\n
    \  (insignificant spaces present in value) or \" \" (insignificant spaces\n   not
    present in value).  However, as these cases have no practical\n   application
    that cannot be met by simple assertions, e.g., (cn=\\20),\n   and this minor anomaly
    can only be fully addressed by a preparation\n   algorithm to be used in conjunction
    with character-by-character\n   partitioning and matching, the anomaly is considered
    acceptable.\n"
  title: Appendix B.  Substrings Matching
- contents:
  - "Author's Address\n   Kurt D. Zeilenga\n   OpenLDAP Foundation\n   EMail: Kurt@OpenLDAP.org\n"
  title: Author's Address
- contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2006).\n   This
    document is subject to the rights, licenses and restrictions\n   contained in
    BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n
    \  This document and the information contained herein are provided on an\n   \"AS
    IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n   OR IS SPONSORED
    BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING TASK FORCE
    DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT LIMITED TO
    ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT INFRINGE ANY
    RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR
    PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or
    scope of any\n   Intellectual Property Rights or other rights that might be claimed
    to\n   pertain to the implementation or use of the technology described in\n   this
    document or the extent to which any license under such rights\n   might or might
    not be available; nor does it represent that it has\n   made any independent effort
    to identify any such rights.  Information\n   on the procedures with respect to
    rights in RFC documents can be\n   found in BCP 78 and BCP 79.\n   Copies of IPR
    disclosures made to the IETF Secretariat and any\n   assurances of licenses to
    be made available, or the result of an\n   attempt made to obtain a general license
    or permission for the use of\n   such proprietary rights by implementers or users
    of this\n   specification can be obtained from the IETF on-line IPR repository
    at\n   http://www.ietf.org/ipr.\n   The IETF invites any interested party to bring
    to its attention any\n   copyrights, patents or patent applications, or other
    proprietary\n   rights that may cover technology that may be required to implement\n
    \  this standard.  Please address the information to the IETF at\n   ietf-ipr@ietf.org.\n"
  title: Intellectual Property
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is provided by the IETF\n
    \  Administrative Support Activity (IASA).\n"
  title: Acknowledgement
