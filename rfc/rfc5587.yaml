- contents:
  - '        Extended Generic Security Service Mechanism Inquiry APIs

    '
  title: __initial_text__
- contents:
  - "Abstract\n   This document introduces new application programming interfaces\n
    \  (APIs) to the Generic Security Services API (GSS-API) for extended\n   mechanism
    attribute inquiry.  These interfaces are primarily intended\n   to reduce instances
    of hardcoding of mechanism identifiers in GSS\n   applications.\n   These interfaces
    include mechanism attributes and attribute sets, a\n   function for inquiring
    the attributes of a mechanism, a function for\n   indicating mechanisms that possess
    given attributes, and a function\n   for displaying mechanism attributes.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2009 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents
    in effect on the date of\n   publication of this document (http://trustee.ietf.org/license-info).\n
    \  Please review these documents carefully, as they describe your rights\n   and
    restrictions with respect to this document.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n
    \  2. Conventions Used in This Document ...............................2\n   3.
    New GSS-API Interfaces ..........................................3\n      3.1.
    Mechanism Attributes and Attribute Sets ....................3\n      3.2. List
    of Known Mechanism Attributes .........................4\n      3.3. Mechanism
    Attribute Sets of Existing Mechs .................6\n      3.4. New GSS-API Function
    Interfaces ............................8\n           3.4.1. Mechanism Attribute
    Criticality .....................8\n           3.4.2. GSS_Indicate_mechs_by_attrs()
    .......................9\n           3.4.3. GSS_Inquire_attrs_for_mech() .......................10\n
    \          3.4.4. GSS_Display_mech_attr() ............................10\n           3.4.5.
    New Major Status Values ............................11\n           3.4.6. C-Bindings
    .........................................11\n   4. Requirements for Mechanism
    Designers ...........................13\n   5. IANA Considerations ............................................13\n
    \  6. Security Considerations ........................................13\n   7.
    References .....................................................13\n      7.1.
    Normative References ......................................13\n      7.2. Informative
    References ....................................14\n"
  - 'Appendix A. Typedefs and C Bindings ..................................15

    '
  title: Table of Contents
- contents:
  - "1.  Introduction\n   GSS-API [RFC2743] mechanisms have a number of properties
    that may be\n   of interest to applications.  The lack of APIs for inquiring about\n
    \  available mechanisms' properties has meant that many GSS-API\n   applications
    must hardcode mechanism Object Identifiers (OIDs).\n   Ongoing work may result
    in a variety of new GSS-API mechanisms.\n   Applications should not have to hardcode
    their OIDs.\n   For example, the Secure Shell version 2 (SSHv2) protocol [RFC4251]\n
    \  supports the use of GSS-API mechanisms for authentication [RFC4462]\n   but
    explicitly prohibits the use of Simple and Protected GSS-API\n   Negotiation (SPNEGO)
    [RFC4178].  Future mechanisms that negotiate\n   mechanisms would have to be forbidden
    as well, but there is no way to\n   implement applications that inquire what mechanisms
    are available and\n   then programmatically exclude mechanisms \"like SPNEGO\".\n"
  title: 1.  Introduction
- contents:
  - "2.  Conventions Used in This Document\n   The key words \"MUST\", \"MUST NOT\",
    \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\",
    \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described
    in [RFC2119].\n"
  title: 2.  Conventions Used in This Document
- contents:
  - "3.  New GSS-API Interfaces\n   We introduce a new concept -- that of mechanism
    attributes.  By\n   allowing applications to query the set of attributes associated
    with\n   individual mechanisms and to find out which mechanisms support a\n   given
    set of attributes, we allow applications to select mechanisms\n   based on their
    attributes without having to hardcode mechanism OIDs.\n   Section 3.1 describes
    the mechanism attributes concept.  Sections\n   3.4.2, 3.4.3, and 3.4.4 describe
    three new interfaces that deal in\n   mechanisms and attribute sets:\n   o  GSS_Indicate_mechs_by_attrs()\n
    \  o  GSS_Inquire_attrs_for_mech()\n   o  GSS_Display_mech_attr()\n"
  - contents:
    - "3.1.  Mechanism Attributes and Attribute Sets\n   An abstraction for the features
      provided by mechanisms and pseudo-\n   mechanisms is needed in order to facilitate
      the programmatic\n   selection of mechanisms.  Pseudo-mechanisms are mechanisms
      that make\n   reference to other mechanisms in order to provide their services.\n
      \  For example, SPNEGO is a pseudo-mechanism, for without other\n   mechanisms
      SPNEGO is useless.\n   Two data types are needed: one for individual mechanism
      attributes\n   and one for mechanism attribute sets.  To simplify the mechanism\n
      \  attribute interfaces, we reuse the 'OID' and 'OID set' data types and\n   model
      individual mechanism attribute types as OIDs.\n   To this end, we define an
      open namespace of mechanism attributes and\n   assign them arcs off of this
      OID:\n   <1.3.6.1.5.5.13>\n   Each mechanism has a set of mechanism attributes
      that it supports as\n   described in its specification.\n"
    title: 3.1.  Mechanism Attributes and Attribute Sets
  - contents:
    - "3.2.  List of Known Mechanism Attributes\n      +-------------------------+---------+-------------------------+\n
      \     | Mech Attr Name          | OID Arc | Arc Name                |\n      +-------------------------+---------+-------------------------+\n
      \     | GSS_C_MA_MECH_CONCRETE  |     (1) | concrete-mech           |\n      |
      GSS_C_MA_MECH_PSEUDO    |     (2) | pseudo-mech             |\n      | GSS_C_MA_MECH_COMPOSITE
      |     (3) | composite-mech          |\n      | GSS_C_MA_MECH_NEGO      |     (4)
      | mech-negotiation-mech   |\n      | GSS_C_MA_MECH_GLUE      |     (5) | mech-glue
      \              |\n      | GSS_C_MA_NOT_MECH       |     (6) | not-mech                |\n
      \     | GSS_C_MA_DEPRECATED     |     (7) | mech-deprecated         |\n      |
      GSS_C_MA_NOT_DFLT_MECH  |     (8) | mech-not-default        |\n      | GSS_C_MA_ITOK_FRAMED
      \   |     (9) | initial-is-framed       |\n      | GSS_C_MA_AUTH_INIT      |
      \   (10) | auth-init-princ         |\n      | GSS_C_MA_AUTH_TARG      |    (11)
      | auth-targ-princ         |\n      | GSS_C_MA_AUTH_INIT_INIT |    (12) | auth-init-princ-initial
      |\n      | GSS_C_MA_AUTH_TARG_INIT |    (13) | auth-targ-princ-initial |\n      |
      GSS_C_MA_AUTH_INIT_ANON |    (14) | auth-init-princ-anon    |\n      | GSS_C_MA_AUTH_TARG_ANON
      |    (15) | auth-targ-princ-anon    |\n      | GSS_C_MA_DELEG_CRED     |    (16)
      | deleg-cred              |\n      | GSS_C_MA_INTEG_PROT     |    (17) | integ-prot
      \             |\n      | GSS_C_MA_CONF_PROT      |    (18) | conf-prot               |\n
      \     | GSS_C_MA_MIC            |    (19) | mic                     |\n      |
      GSS_C_MA_WRAP           |    (20) | wrap                    |\n      | GSS_C_MA_PROT_READY
      \    |    (21) | prot-ready              |\n      | GSS_C_MA_REPLAY_DET     |
      \   (22) | replay-detection        |\n      | GSS_C_MA_OOS_DET        |    (23)
      | oos-detection           |\n      | GSS_C_MA_CBINDINGS      |    (24) | channel-bindings
      \       |\n      | GSS_C_MA_PFS            |    (25) | pfs                     |\n
      \     | GSS_C_MA_COMPRESS       |    (26) | compress                |\n      |
      GSS_C_MA_CTX_TRANS      |    (27) | context-transfer        |\n      | <reserved>
      \             | (28...) |                         |\n      +-------------------------+---------+-------------------------+\n
      \                                 Table 1\n   +-------------------------+-----------------------------------------+\n
      \  | Mech Attr Name          | Purpose                                 |\n   +-------------------------+-----------------------------------------+\n
      \  | GSS_C_MA_MECH_CONCRETE  | Indicates that a mech is neither a      |\n   |
      \                        | pseudo-mechanism nor a composite        |\n   |                         |
      mechanism.                              |\n   | GSS_C_MA_MECH_PSEUDO    | Indicates
      that a mech is a              |\n   |                         | pseudo-mechanism.
      \                      |\n   | GSS_C_MA_MECH_COMPOSITE | Indicates that a mech
      is a composite of |\n   |                         | other mechanisms.  This
      is reserved for |\n   |                         | a specification of \"stackable\"
      \         |\n   |                         | pseudo-mechanisms.                      |\n
      \  | GSS_C_MA_MECH_NEGO      | Indicates that a mech negotiates other  |\n   |
      \                        | mechs (e.g., SPNEGO has this            |\n   |                         |
      attribute).                             |\n   | GSS_C_MA_MECH_GLUE      | Indicates
      that the OID is not for a     |\n   |                         | mechanism but
      for the GSS-API itself.   |\n   | GSS_C_MA_NOT_MECH       | Indicates that the
      OID is known, yet it |\n   |                         | is also known not to
      be the OID of any  |\n   |                         | GSS-API mechanism (or of
      the GSS-API    |\n   |                         | itself).                                |\n
      \  | GSS_C_MA_DEPRECATED     | Indicates that a mech (or its OID) is   |\n   |
      \                        | deprecated and MUST NOT be used as a    |\n   |                         |
      default mechanism.                      |\n   | GSS_C_MA_NOT_DFLT_MECH  | Indicates
      that a mech (or its OID) MUST |\n   |                         | NOT be used
      as a default mechanism.     |\n   | GSS_C_MA_ITOK_FRAMED    | Indicates that
      the given mechanism's    |\n   |                         | initial context tokens
      are properly     |\n   |                         | framed as per Section 3.1
      of [RFC2743]. |\n   | GSS_C_MA_AUTH_INIT      | Indicates support for authentication
      of |\n   |                         | initiator to acceptor.                  |\n
      \  | GSS_C_MA_AUTH_TARG      | Indicates support for authentication of |\n   |
      \                        | acceptor to initiator.                  |\n   | GSS_C_MA_AUTH_INIT_INIT
      | Indicates support for \"initial\"         |\n   |                         |
      authentication of initiator to          |\n   |                         | acceptor.
      \ \"Initial authentication\"     |\n   |                         | refers to
      the use of passwords, or keys |\n   |                         | stored on tokens,
      for authentication.   |\n   |                         | Whether a mechanism
      supports initial    |\n   |                         | authentication may depend
      on IETF       |\n   |                         | consensus (see Security                 |\n
      \  |                         | Considerations).                        |\n   |
      GSS_C_MA_AUTH_TARG_INIT | Indicates support for initial           |\n   |                         |
      authentication of acceptor to           |\n   |                         | initiator.
      \                             |\n   | GSS_C_MA_AUTH_INIT_ANON | Indicates support
      for                   |\n   |                         | GSS_C_NT_ANONYMOUS as
      an initiator      |\n   |                         | principal name.                         |\n
      \  | GSS_C_MA_AUTH_TARG_ANON | Indicates support for                   |\n   |
      \                        | GSS_C_NT_ANONYMOUS as a target          |\n   |                         |
      principal name.                         |\n   | GSS_C_MA_DELEG_CRED     | Indicates
      support for credential        |\n   |                         | delegation.
      \                            |\n   | GSS_C_MA_INTEG_PROT     | Indicates support
      for per-message       |\n   |                         | integrity protection.
      \                  |\n   | GSS_C_MA_CONF_PROT      | Indicates support for per-message
      \      |\n   |                         | confidentiality protection.             |\n
      \  | GSS_C_MA_MIC            | Indicates support for Message Integrity |\n   |
      \                        | Code (MIC) tokens.                      |\n   | GSS_C_MA_WRAP
      \          | Indicates support for WRAP tokens.      |\n   | GSS_C_MA_PROT_READY
      \    | Indicates support for per-message       |\n   |                         |
      protection prior to full context        |\n   |                         | establishment.
      \                         |\n   | GSS_C_MA_REPLAY_DET     | Indicates support
      for replay detection. |\n   | GSS_C_MA_OOS_DET        | Indicates support for
      out-of-sequence   |\n   |                         | detection.                              |\n
      \  | GSS_C_MA_CBINDINGS      | Indicates support for channel bindings. |\n   |
      GSS_C_MA_PFS            | Indicates support for Perfect Forward   |\n   |                         |
      Security.                               |\n   | GSS_C_MA_COMPRESS       | Indicates
      support for compression of    |\n   |                         | data inputs
      to GSS_Wrap().              |\n   | GSS_C_MA_CTX_TRANS      | Indicates support
      for security context  |\n   |                         | export/import.                          |\n
      \  +-------------------------+-----------------------------------------+\n                                  Table
      2\n"
    title: 3.2.  List of Known Mechanism Attributes
  - contents:
    - "3.3.  Mechanism Attribute Sets of Existing Mechs\n   The Kerberos V mechanism
      [RFC1964] provides the following mechanism\n   attributes:\n   o  GSS_C_MA_MECH_CONCRETE\n
      \  o  GSS_C_MA_ITOK_FRAMED\n   o  GSS_C_MA_AUTH_INIT\n   o  GSS_C_MA_AUTH_TARG\n
      \  o  GSS_C_MA_DELEG_CRED\n   o  GSS_C_MA_INTEG_PROT\n   o  GSS_C_MA_CONF_PROT\n
      \  o  GSS_C_MA_MIC\n   o  GSS_C_MA_WRAP\n   o  GSS_C_MA_PROT_READY\n   o  GSS_C_MA_REPLAY_DET\n
      \  o  GSS_C_MA_OOS_DET\n   o  GSS_C_MA_CBINDINGS\n   o  GSS_C_MA_CTX_TRANS (some
      implementations, using implementation-\n      specific exported context token
      formats)\n   The Kerberos V mechanism also has a deprecated OID that has the
      same\n   mechanism attributes as above as well as GSS_C_MA_DEPRECATED.\n   The
      mechanism attributes of the Simple Public-Key GSS-API Mechanism\n   (SPKM) [RFC2025]
      family of mechanisms will be provided in a separate\n   document, as SPKM is
      currently being reviewed for possibly\n   significant changes due to problems
      in its specifications.\n   The Low Infrastructure Public Key (LIPKEY) mechanism
      [RFC2847] offers\n   the following attributes:\n   o  GSS_C_MA_MECH_CONCRETE\n
      \  o  GSS_C_MA_ITOK_FRAMED\n   o  GSS_C_MA_AUTH_INIT_INIT\n   o  GSS_C_MA_AUTH_TARG
      (from SPKM-3)\n   o  GSS_C_MA_AUTH_TARG_ANON (from SPKM-3)\n   o  GSS_C_MA_INTEG_PROT\n
      \  o  GSS_C_MA_CONF_PROT\n   o  GSS_C_MA_REPLAY_DET\n   o  GSS_C_MA_OOS_DET\n
      \  o  GSS_C_MA_CTX_TRANS (some implementations, using implementation-\n      specific
      exported context token formats)\n      (LIPKEY should also provide GSS_C_MA_CBINDINGS,
      but SPKM-3\n      requires clarifications on this point.)\n   The SPNEGO mechanism
      [RFC4178] provides the following attributes:\n   o  GSS_C_MA_MECH_NEGO\n   o
      \ GSS_C_MA_ITOK_FRAMED\n   All other mechanisms' attributes will be described
      elsewhere.\n"
    title: 3.3.  Mechanism Attribute Sets of Existing Mechs
  - contents:
    - "3.4.  New GSS-API Function Interfaces\n   Several new interfaces are given
      by which, for example, GSS-API\n   applications may determine what features
      are provided by a given\n   mechanism and what mechanisms provide what features.\n
      \  These new interfaces are all OPTIONAL.\n   Applications should use GSS_Indicate_mechs_by_attrs()
      instead of\n   GSS_Indicate_mechs() wherever possible.\n   Applications can
      use GSS_Indicate_mechs_by_attrs() to determine what,\n   if any, mechanisms
      provide a given set of features.\n   GSS_Indicate_mechs_by_attrs() can also
      be used to indicate (as in\n   GSS_Indicate_mechs()) the set of available mechanisms
      of each type\n   (concrete, mechanism negotiation pseudo-mechanism, etc.).\n"
    - contents:
      - "3.4.1.  Mechanism Attribute Criticality\n   Mechanism attributes may be added
        at any time.  Not only may\n   attributes be added to the list of known mechanism
        attributes at any\n   time, but the set of mechanism attributes supported
        by a mechanism\n   can be changed at any time.\n   For example, new attributes
        might be added to reflect whether a\n   mechanism's initiator must contact
        an online infrastructure and/or\n   whether the acceptor must do so.  In this
        example, the Kerberos V\n   mechanism would gain a new attribute even though
        the mechanism itself\n   is not modified.\n   Applications making use of attributes
        not defined herein would then\n   have no way of knowing whether a GSS-API
        implementation and its\n   mechanisms know about new mechanism attributes.
        \ To address this\n   problem, GSS_Indicate_mechs_by_attrs() and\n   GSS_Inquire_attrs_for_mech()
        support a notion of critical mechanism\n   attributes.  Applications can search
        for mechanisms that understand\n   mechanism attributes that are critical
        to the application, and the\n   application may ask what mechanism attributes
        are understood by a\n   given mechanism.\n"
      title: 3.4.1.  Mechanism Attribute Criticality
    - contents:
      - "3.4.2.  GSS_Indicate_mechs_by_attrs()\n   Inputs:\n   o  desired_mech_attrs
        SET OF OBJECT IDENTIFIER -- set of GSS_C_MA_*\n      OIDs that the mechanisms
        indicated in the mechs output parameter\n      MUST offer.\n   o  except_mech_attrs
        SET OF OBJECT IDENTIFIER -- set of GSS_C_MA_*\n      OIDs that the mechanisms
        indicated in the mechs output parameter\n      MUST NOT offer.\n   o  critical_mech_attrs
        SET OF OBJECT IDENTIFIER -- set of GSS_C_MA_*\n      OIDs that the mechanisms
        indicated in the mechs output parameter\n      MUST understand (i.e., mechs
        must know whether critical attributes\n      are or are not supported).\n
        \  Outputs:\n   o  major_status INTEGER\n   o  minor_status INTEGER\n   o
        \ mechs SET OF OBJECT IDENTIFIER -- set of mechanisms that support\n      the
        given desired_mech_attrs but not the except_mech_attrs, and\n      all of
        which understand the given critical_mech_attrs (the caller\n      must release
        this output with GSS_Release_oid_set()).\n   Return major_status codes:\n
        \  o  GSS_S_COMPLETE indicates success; the output mechs parameter MAY\n      be
        the empty set (GSS_C_NO_OID_SET).\n   o  GSS_S_FAILURE indicates that the
        request failed for some other\n      reason.\n   GSS_Indicate_mechs_by_attrs()
        returns the set of OIDs corresponding\n   to mechanisms that offer at least
        the desired_mech_attrs but none of\n   the except_mech_attrs, and that understand
        all of the attributes\n   listed in critical_mech_attrs.\n   When all three
        sets of OID input parameters are the empty set, this\n   function acts as
        a version of GSS_indicate_mechs() that outputs the\n   set of all supported
        mechanisms.\n"
      title: 3.4.2.  GSS_Indicate_mechs_by_attrs()
    - contents:
      - "3.4.3.  GSS_Inquire_attrs_for_mech()\n   Inputs:\n   o  mech OBJECT IDENTIFIER
        -- mechanism OID\n   Outputs:\n   o  major_status INTEGER\n   o  minor_status
        INTEGER\n   o  mech_attrs SET OF OBJECT IDENTIFIER -- set of mech_attrs OIDs\n
        \     (GSS_C_MA_*) supported by the mechanism (the caller must release\n      this
        output with GSS_Release_oid_set()).\n   o  known_mech_attrs SET OF OBJECT
        IDENTIFIER -- set of mech_attrs\n      OIDs known to the mechanism implementation
        (the caller must\n      release this output with GSS_Release_oid_set()).\n
        \  Return major_status codes:\n   o  GSS_S_COMPLETE indicates success; the
        output mech_attrs parameter\n      MAY be the empty set (GSS_C_NO_OID_SET).\n
        \  o  GSS_S_BAD_MECH indicates that the mechanism named by the mech\n      parameter
        does not exist or that the mech is GSS_C_NO_OID and no\n      default mechanism
        could be determined.\n   o  GSS_S_FAILURE indicates that the request failed
        for some other\n      reason.\n   GSS_Inquire_attrs_for_mech() indicates the
        set of mechanism\n   attributes supported by a given mechanism.\n"
      title: 3.4.3.  GSS_Inquire_attrs_for_mech()
    - contents:
      - "3.4.4.  GSS_Display_mech_attr()\n   Inputs:\n   o  mech_attr OBJECT IDENTIFIER
        -- mechanism attribute OID\n   Outputs:\n   o  major_status INTEGER\n   o
        \ minor_status INTEGER\n   o  name OCTET STRING, -- name of mechanism attribute
        (e.g.,\n      GSS_C_MA_*).\n   o  short_desc OCTET STRING, -- a short description
        of the mechanism\n      attribute (the caller must release this output with\n
        \     GSS_Release_buffer()).\n   o  long_desc OCTET STRING -- a longer description
        of the mechanism\n      attribute (the caller must release this output with\n
        \     GSS_Release_buffer()).\n   Return major_status codes:\n   o  GSS_S_COMPLETE
        indicates success.\n   o  GSS_S_BAD_MECH_ATTR indicates that the mechanism
        attribute\n      referenced by the mech_attr parameter is unknown to the\n
        \     implementation.\n   o  GSS_S_FAILURE indicates that the request failed
        for some other\n      reason.\n   This function can be used to obtain human-readable
        descriptions of\n   GSS-API mechanism attributes.\n"
      title: 3.4.4.  GSS_Display_mech_attr()
    - contents:
      - "3.4.5.  New Major Status Values\n   A single, new, major status code is added
        for\n   GSS_Display_mech_attr():\n   o  GSS_S_BAD_MECH_ATTR,\n   roughly corresponding
        to GSS_S_BAD_MECH but applicable to mechanism\n   attribute OIDs rather than
        to mechanism OIDs.\n   For the C-bindings of the GSS-API [RFC2744], GSS_S_BAD_MECH_ATTR\n
        \  shall have a routine error number of 19 (this is shifted to the left\n
        \  by GSS_C_ROUTINE_ERROR_OFFSET).\n"
      title: 3.4.5.  New Major Status Values
    - contents:
      - "3.4.6.  C-Bindings\n   Note that there is a bug in the C bindings of the
        GSS-APIv2u1\n   [RFC2744] in that the C 'const' attribute is applied to types
        that\n   are pointer typedefs.  This is a bug because it declares that the\n
        \  pointer argument is 'const' rather than that the object pointed by it\n
        \  is const.  To avoid this error, we hereby define new typedefs, which\n
        \  include const properly:\n      typedef const gss_buffer_desc * gss_const_buffer_t;\n
        \     typedef const struct gss_channel_bindings_struct *\n         gss_const_channel_bindings_t;\n
        \     typedef const <platform-specific> gss_const_ctx_id_t;\n      typedef
        const <platform-specific> gss_const_cred_id_t;\n      typedef const <platform-specific>
        gss_const_name_t;\n      typedef const gss_OID_desc * gss_const_OID;\n      typedef
        const gss_OID_set_desc * gss_const_OID_set;\n                         Figure
        1: const typedefs\n   Note that only gss_const_OID and gss_const_OID_set are
        used below.\n   We include the other const typedefs for convenience since
        the C\n   bindings of the GSS-API do use const with pointer typedefs when
        it\n   should often instead use the above typedefs instead.\n      #define
        GSS_S_BAD_MECH_ATTR (19ul << GSS_C_ROUTINE_ERROR_OFFSET)\n      OM_uint32
        gss_indicate_mechs_by_attrs(\n         OM_uint32         *minor_status,\n
        \        gss_const_OID_set  desired_mech_attrs,\n         gss_const_OID_set
        \ except_mech_attrs,\n         gss_const_OID_set  critical_mech_attrs,\n         gss_OID_set
        \      *mechs);\n      OM_uint32 gss_inquire_attrs_for_mech(\n         OM_uint32
        \        *minor_status,\n         gss_const_OID      mech,\n         gss_OID_set
        \      *mech_attrs,\n         gss_OID_set       *known_mech_attrs);\n      OM_uint32
        gss_display_mech_attr(\n         OM_uint32         *minor_status,\n         gss_const_OID
        \     mech_attr,\n         gss_buffer_t       name,\n         gss_buffer_t
        \      short_desc,\n         gss_buffer_t       long_desc);\n                           Figure
        2: C bindings\n   Note that output buffers must be released via gss_release_buffer().\n
        \  Output OID sets must be released via gss_release_oid_set().\n   Please
        see Appendix A for a full set of typedef fragments defined in\n   this document
        and the necessary code license.\n"
      title: 3.4.6.  C-Bindings
    title: 3.4.  New GSS-API Function Interfaces
  title: 3.  New GSS-API Interfaces
- contents:
  - "4.  Requirements for Mechanism Designers\n   All future GSS-API mechanism specifications
    MUST:\n   o  list the set of GSS-API mechanism attributes associated with them.\n"
  title: 4.  Requirements for Mechanism Designers
- contents:
  - "5.  IANA Considerations\n   The namespace of programming-language symbols with
    names beginning\n   with GSS_C_MA_* is reserved for allocation by IETF Consensus.
    \ IANA\n   allocated a base OID, as an arc of 1.3.6.1.5.5, for the set of\n   GSS_C_MA_*
    described herein, and registered all of the GSS_C_MA_*\n   values described in
    Section 3.2.\n"
  title: 5.  IANA Considerations
- contents:
  - "6.  Security Considerations\n   This document specifies extensions to a security-related
    API.  It\n   imposes new requirements on future GSS-API mechanisms, and the\n
    \  specifications of future protocols that use the GSS-API should make\n   reference
    to this document where applicable.  The ability to inquire\n   about specific
    properties of mechanisms should improve security.\n   The semantics of each mechanism
    attribute may include a security\n   component.\n   Application developers must
    understand that mechanism attributes may\n   be added at any time -- both to the
    set of known mechanism attributes\n   as well as to existing mechanisms' sets
    of supported mechanism\n   attributes.  Therefore, application developers using
    the APIs\n   described herein must understand what mechanism attributes their\n
    \  applications depend critically on, and must use the mechanism\n   attribute
    criticality features of these APIs.\n"
  title: 6.  Security Considerations
- contents:
  - '7.  References

    '
  - contents:
    - "7.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use
      in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March
      1997.\n   [RFC2743]  Linn, J., \"Generic Security Service Application Program\n
      \             Interface Version 2, Update 1\", RFC 2743, January 2000.\n   [RFC2744]
      \ Wray, J., \"Generic Security Service API Version 2 :\n              C-bindings\",
      RFC 2744, January 2000.\n"
    title: 7.1.  Normative References
  - contents:
    - "7.2.  Informative References\n   [RFC1964]  Linn, J., \"The Kerberos Version
      5 GSS-API Mechanism\",\n              RFC 1964, June 1996.\n   [RFC2025]  Adams,
      C., \"The Simple Public-Key GSS-API Mechanism\n              (SPKM)\", RFC 2025,
      October 1996.\n   [RFC2847]  Eisler, M., \"LIPKEY - A Low Infrastructure Public
      Key\n              Mechanism Using SPKM\", RFC 2847, June 2000.\n   [RFC4178]
      \ Zhu, L., Leach, P., Jaganathan, K., and W. Ingersoll, \"The\n              Simple
      and Protected Generic Security Service Application\n              Program Interface
      (GSS-API) Negotiation Mechanism\",\n              RFC 4178, October 2005.\n
      \  [RFC4251]  Ylonen, T. and C. Lonvick, \"The Secure Shell (SSH)\n              Protocol
      Architecture\", RFC 4251, January 2006.\n   [RFC4462]  Hutzelman, J., Salowey,
      J., Galbraith, J., and V. Welch,\n              \"Generic Security Service Application
      Program Interface\n              (GSS-API) Authentication and Key Exchange for
      the Secure\n              Shell (SSH) Protocol\", RFC 4462, May 2006.\n"
    title: 7.2.  Informative References
  title: 7.  References
- contents:
  - "Appendix A.  Typedefs and C Bindings\n   This appendix contains the full set
    of code fragments defined in this\n   document.\n   Copyright (c) 2009 IETF Trust
    and the persons identified as authors\n   of the code.  All rights reserved.\n
    \  Redistribution and use in source and binary forms, with or without\n   modification,
    are permitted provided that the following conditions\n   are met:\n   - Redistributions
    of source code must retain the above copyright\n     notice, this list of conditions
    and the following disclaimer.\n   - Redistributions in binary form must reproduce
    the above copyright\n     notice, this list of conditions and the following disclaimer
    in the\n     documentation and/or other materials provided with the\n     distribution.\n
    \  - Neither the name of Internet Society, IETF or IETF Trust, nor the\n     names
    of specific contributors, may be used to endorse or promote\n     products derived
    from this software without specific prior written\n     permission.\n   THIS SOFTWARE
    IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n   LIMITED TO, THE IMPLIED
    WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n   A PARTICULAR PURPOSE ARE DISCLAIMED.
    \ IN NO EVENT SHALL THE COPYRIGHT\n   OWNER OR CONTRIBUTORS BE LIABLE FOR ANY
    DIRECT, INDIRECT, INCIDENTAL,\n   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
    (INCLUDING, BUT NOT\n   LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
    LOSS OF USE,\n   DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
    ON ANY\n   THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n
    \  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n   OF
    THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n   typedef
    const gss_buffer_desc * gss_const_buffer_t;\n   typedef const struct gss_channel_bindings_struct
    *\n      gss_const_channel_bindings_t;\n   typedef const <platform-specific> gss_const_ctx_id_t;\n
    \  typedef const <platform-specific> gss_const_cred_id_t;\n   typedef const <platform-specific>
    gss_const_name_t;\n   typedef const gss_OID_desc * gss_const_OID;\n   typedef
    const gss_OID_set_desc * gss_const_OID_set;\n   #define GSS_S_BAD_MECH_ATTR (19ul
    << GSS_C_ROUTINE_ERROR_OFFSET)\n   OM_uint32 gss_indicate_mechs_by_attrs(\n      OM_uint32
    \        *minor_status,\n      gss_const_OID_set  desired_mech_attrs,\n      gss_const_OID_set
    \ except_mech_attrs,\n      gss_const_OID_set  critical_mech_attrs,\n      gss_OID_set
    \      *mechs);\n   OM_uint32 gss_inquire_attrs_for_mech(\n      OM_uint32         *minor_status,\n
    \     gss_const_OID      mech,\n      gss_OID_set       *mech_attrs,\n      gss_OID_set
    \      *known_mech_attrs);\n   OM_uint32 gss_display_mech_attr(\n      OM_uint32
    \        *minor_status,\n      gss_const_OID      mech_attr,\n      gss_buffer_t
    \      name,\n      gss_buffer_t       short_desc,\n      gss_buffer_t       long_desc);\n"
  title: Appendix A.  Typedefs and C Bindings
- contents:
  - "Author's Address\n   Nicolas Williams\n   Sun Microsystems\n   5300 Riata Trace
    Ct\n   Austin, TX  78727\n   US\n   EMail: Nicolas.Williams@sun.com\n"
  title: Author's Address
