- title: __initial_text__
  contents:
  - "                             Extensions to\n       the Path Computation Element\
    \ Communication Protocol (PCEP)\n    for Point-to-Multipoint Traffic Engineering\
    \ Label Switched Paths\n"
- title: Abstract
  contents:
  - "Abstract\n   Point-to-point Multiprotocol Label Switching (MPLS) and Generalized\n\
    \   MPLS (GMPLS) Traffic Engineering Label Switched Paths (TE LSPs) may\n   be\
    \ established using signaling techniques, but their paths may first\n   need to\
    \ be determined.  The Path Computation Element (PCE) has been\n   identified as\
    \ an appropriate technology for the determination of the\n   paths of point-to-multipoint\
    \ (P2MP) TE LSPs.\n   This document describes extensions to the PCE Communication\
    \ Protocol\n   (PCEP) to handle requests and responses for the computation of\
    \ paths\n   for P2MP TE LSPs.\n   This document obsoletes RFC 6006.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 7841.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8306.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2017 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (https://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n   This document\
    \ may contain material from IETF Documents or IETF\n   Contributions published\
    \ or made publicly available before November\n   10, 2008.  The person(s) controlling\
    \ the copyright in some of this\n   material may not have granted the IETF Trust\
    \ the right to allow\n   modifications of such material outside the IETF Standards\
    \ Process.\n   Without obtaining an adequate license from the person(s) controlling\n\
    \   the copyright in such materials, this document may not be modified\n   outside\
    \ the IETF Standards Process, and derivative works of it may\n   not be created\
    \ outside the IETF Standards Process, except to format\n   it for publication\
    \ as an RFC or to translate it into languages other\n   than English.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................4\n\
    \      1.1. Terminology ................................................5\n  \
    \    1.2. Requirements Language ......................................5\n   2.\
    \ PCC-PCE Communication Requirements ..............................5\n   3. Protocol\
    \ Procedures and Extensions ..............................6\n      3.1. P2MP Capability\
    \ Advertisement ..............................7\n           3.1.1. IGP Extensions\
    \ for P2MP Capability Advertisement ....7\n           3.1.2. Open Message Extension\
    \ ..............................7\n      3.2. Efficient Presentation of P2MP LSPs\
    \ ........................8\n      3.3. P2MP Path Computation Request/Reply Message\
    \ Extensions .....9\n           3.3.1. The Extension of the RP Object ......................9\n\
    \           3.3.2. The P2MP END-POINTS Object .........................11\n  \
    \    3.4. Request Message Format ....................................13\n    \
    \  3.5. Reply Message Format ......................................15\n      3.6.\
    \ P2MP Objective Functions and Metric Types .................16\n           3.6.1.\
    \ Objective Functions ................................16\n           3.6.2. METRIC\
    \ Object-Type Values ..........................17\n      3.7. Non-Support of P2MP\
    \ Path Computation ......................17\n      3.8. Non-Support by Back-Level\
    \ PCE Implementations .............17\n      3.9. P2MP TE Path Reoptimization\
    \ Request .......................17\n      3.10. Adding and Pruning Leaves to/from\
    \ the P2MP Tree ..........18\n      3.11. Discovering Branch Nodes .................................22\n\
    \           3.11.1. Branch Node Object ................................22\n  \
    \    3.12. Synchronization of P2MP TE Path Computation Requests .....22\n    \
    \  3.13. Request and Response Fragmentation .......................23\n      \
    \     3.13.1. Request Fragmentation Procedure ...................24\n        \
    \   3.13.2. Response Fragmentation Procedure ..................24\n          \
    \ 3.13.3. Fragmentation Example .............................24\n      3.14. UNREACH-DESTINATION\
    \ Object ...............................25\n      3.15. P2MP PCEP-ERROR Objects\
    \ and Types ........................27\n      3.16. PCEP NO-PATH Indicator ...................................28\n\
    \   4. Manageability Considerations ...................................28\n  \
    \    4.1. Control of Function and Policy ............................28\n    \
    \  4.2. Information and Data Models ...............................28\n      4.3.\
    \ Liveness Detection and Monitoring .........................29\n      4.4. Verifying\
    \ Correct Operation ...............................29\n      4.5. Requirements\
    \ for Other Protocols and Functional\n           Components ................................................29\n\
    \      4.6. Impact on Network Operation ...............................29\n  \
    \ 5. Security Considerations ........................................30\n   6.\
    \ IANA Considerations ............................................31\n      6.1.\
    \ PCEP TLV Type Indicators ..................................31\n      6.2. Request\
    \ Parameter Bit Flags ...............................31\n      6.3. Objective\
    \ Functions .......................................31\n      6.4. METRIC Object-Type\
    \ Values .................................32\n      6.5. PCEP Objects ..............................................32\n\
    \      6.6. PCEP-ERROR Objects and Types ..............................34\n  \
    \    6.7. PCEP NO-PATH Indicator ....................................35\n    \
    \  6.8. SVEC Object Flag ..........................................35\n      6.9.\
    \ OSPF PCE Capability Flag ..................................35\n   7. References\
    \ .....................................................36\n      7.1. Normative\
    \ References ......................................36\n      7.2. Informative\
    \ References ....................................37\n   Appendix A. Summary of\
    \ Changes from RFC 6006 ......................39\n   Appendix A.1. RBNF Changes\
    \ from RFC 6006 ..........................39\n   Acknowledgements ..................................................41\n\
    \   Contributors ......................................................42\n  \
    \ Authors' Addresses ................................................43\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The Path Computation Element (PCE) as defined in [RFC4655]\
    \ is an\n   entity that is capable of computing a network path or route based\
    \ on\n   a network graph and applying computational constraints.  A Path\n   Computation\
    \ Client (PCC) may make requests to a PCE for paths to be\n   computed.\n   [RFC4875]\
    \ describes how to set up point-to-multipoint (P2MP) Traffic\n   Engineering Label\
    \ Switched Paths (TE LSPs) for use in Multiprotocol\n   Label Switching (MPLS)\
    \ and Generalized MPLS (GMPLS) networks.\n   The PCE has been identified as a\
    \ suitable application for the\n   computation of paths for P2MP TE LSPs [RFC5671].\n\
    \   The PCE Communication Protocol (PCEP) is designed as a communication\n   protocol\
    \ between PCCs and PCEs for point-to-point (P2P) path\n   computations and is\
    \ defined in [RFC5440].  However, that\n   specification does not provide a mechanism\
    \ to request path\n   computation of P2MP TE LSPs.\n   A P2MP LSP is comprised\
    \ of multiple source-to-leaf (S2L) sub-LSPs.\n   These S2L sub-LSPs are set up\
    \ between ingress and egress Label\n   Switching Routers (LSRs) and are appropriately\
    \ overlaid to construct\n   a P2MP TE LSP.  During path computation, the P2MP\
    \ TE LSP may be\n   determined as a set of S2L sub-LSPs that are computed separately\
    \ and\n   combined to give the path of the P2MP LSP, or the entire P2MP TE LSP\n\
    \   may be determined as a P2MP tree in a single computation.\n   This document\
    \ relies on the mechanisms of PCEP to request path\n   computation for P2MP TE\
    \ LSPs.  One Path Computation Request message\n   from a PCC may request the computation\
    \ of the whole P2MP TE LSP, or\n   the request may be limited to a subset of the\
    \ S2L sub-LSPs.  In the\n   extreme case, the PCC may request the S2L sub-LSPs\
    \ to be computed\n   individually; the PCC is responsible for deciding whether\
    \ to signal\n   individual S2L sub-LSPs or combine the computation results to\
    \ signal\n   the entire P2MP TE LSP.  Hence, the PCC may use one Path Computation\n\
    \   Request message or may split the request across multiple path\n   computation\
    \ messages.\n   This document obsoletes [RFC6006] and incorporates the following\n\
    \   errata:\n   o  Erratum IDs 3819, 3830, 3836, 4867, and 4868 for [RFC6006]\n\
    \   o  Erratum ID 4956 for [RFC5440]\n   All changes from [RFC6006] are listed\
    \ in Appendix A.\n"
- title: 1.1.  Terminology
  contents:
  - "1.1.  Terminology\n   Terminology used in this document:\n   TE LSP: Traffic\
    \ Engineering Label Switched Path.\n   LSR: Label Switching Router.\n   OF: Objective\
    \ Function.  A set of one or more optimization criteria\n      used for the computation\
    \ of a single path (e.g., path cost\n      minimization) or for the synchronized\
    \ computation of a set of\n      paths (e.g., aggregate bandwidth consumption\
    \ minimization).\n   P2MP: Point-to-Multipoint.\n   P2P: Point-to-Point.\n   This\
    \ document also uses the terminology defined in [RFC4655],\n   [RFC4875], and\
    \ [RFC5440].\n"
- title: 1.2.  Requirements Language
  contents:
  - "1.2.  Requirements Language\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    NOT RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted\
    \ as described in\n   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear\
    \ in all\n   capitals, as shown here.\n"
- title: 2.  PCC-PCE Communication Requirements
  contents:
  - "2.  PCC-PCE Communication Requirements\n   This section summarizes the PCC-PCE\
    \ communication requirements as met\n   by the protocol extension specified in\
    \ this document for P2MP MPLS-TE\n   LSPs.  The numbering system in the list below\
    \ corresponds to the\n   requirement numbers (e.g., R1, R2) used in [RFC5862].\n\
    \   1.  The PCC MUST be able to specify that the request is a P2MP path\n    \
    \   computation request.\n   2.  The PCC MUST be able to specify that objective\
    \ functions are to\n       be applied to the P2MP path computation request.\n\
    \   3.  The PCE MUST have the capability to reject a P2MP path\n       computation\
    \ request and indicate non-support of P2MP path\n       computation.\n   4.  The\
    \ PCE MUST provide an indication of non-support of P2MP path\n       computation\
    \ by back-level PCE implementations.\n   5.  A P2MP path computation request MUST\
    \ be able to list multiple\n       destinations.\n   6.  A P2MP path computation\
    \ response MUST be able to carry the path\n       of a P2MP LSP.\n   7.  By default,\
    \ the path returned by the PCE SHOULD use the\n       compressed format.\n   8.\
    \  It MUST be possible for a single P2MP path computation request or\n       response\
    \ to be conveyed by a sequence of messages.\n   9.  It MUST NOT be possible for\
    \ a single P2MP path computation\n       request to specify a set of different\
    \ constraints, traffic\n       parameters, or quality-of-service requirements\
    \ for different\n       destinations of a P2MP LSP.\n   10. P2MP path modification\
    \ and P2MP path diversity MUST be supported.\n   11. It MUST be possible to reoptimize\
    \ existing P2MP TE LSPs.\n   12. It MUST be possible to add and remove P2MP destinations\
    \ from\n       existing paths.\n   13. It MUST be possible to specify a list of\
    \ applicable branch nodes\n       to use when computing the P2MP path.\n   14.\
    \ It MUST be possible for a PCC to discover P2MP path computation\n       capability.\n\
    \   15. The PCC MUST be able to request diverse paths when requesting a\n    \
    \   P2MP path.\n"
- title: 3.  Protocol Procedures and Extensions
  contents:
  - "3.  Protocol Procedures and Extensions\n   The following section describes the\
    \ protocol extensions required to\n   satisfy the requirements specified in Section\
    \ 2 (\"PCC-PCE\n   Communication Requirements\") of this document.\n"
- title: 3.1.  P2MP Capability Advertisement
  contents:
  - '3.1.  P2MP Capability Advertisement

    '
- title: 3.1.1.  IGP Extensions for P2MP Capability Advertisement
  contents:
  - "3.1.1.  IGP Extensions for P2MP Capability Advertisement\n   [RFC5088] defines\
    \ a PCE Discovery (PCED) TLV carried in an OSPF\n   Router Information Link State\
    \ Advertisement (LSA) as defined in\n   [RFC7770] to facilitate PCE discovery\
    \ using OSPF.  [RFC5088]\n   specifies that no new sub-TLVs may be added to the\
    \ PCED TLV.  This\n   document defines a flag in the OSPF PCE Capability Flags\
    \ to indicate\n   the capability of P2MP computation.\n   Similarly, [RFC5089]\
    \ defines the PCED sub-TLV for use in PCE\n   discovery using IS-IS.  This document\
    \ will use the same flag for the\n   OSPF PCE Capability Flags sub-TLV to allow\
    \ IS-IS to indicate the\n   capability of P2MP computation.\n   The IANA assignment\
    \ for a shared OSPF and IS-IS P2MP Capability Flag\n   is documented in Section\
    \ 6.9 (\"OSPF PCE Capability Flag\") of this\n   document.\n   PCEs wishing to\
    \ advertise that they support P2MP path computation\n   would set the bit (10)\
    \ accordingly.  PCCs that do not understand this\n   bit will ignore it (per [RFC5088]\
    \ and [RFC5089]).  PCEs that do not\n   support P2MP will leave the bit clear\
    \ (per the default behavior\n   defined in [RFC5088] and [RFC5089]).\n   PCEs\
    \ that set the bit to indicate support of P2MP path computation\n   MUST follow\
    \ the procedures in Section 3.3.2 (\"The P2MP END-POINTS\n   Object\") to further\
    \ qualify the level of support.\n"
- title: 3.1.2.  Open Message Extension
  contents:
  - "3.1.2.  Open Message Extension\n   Based on the Capabilities Exchange requirement\
    \ described in\n   [RFC5862], if a PCE does not advertise its P2MP capability\
    \ during\n   discovery, PCEP should be used to allow a PCC to discover, during\
    \ the\n   Open Message Exchange, which PCEs are capable of supporting P2MP path\n\
    \   computation.\n   To satisfy this requirement, we extend the PCEP OPEN object\
    \ by\n   defining an optional TLV to indicate the PCE's capability to perform\n\
    \   P2MP path computations.\n   IANA has allocated value 6 from the \"PCEP TLV\
    \ Type Indicators\"\n   subregistry, as documented in Section 6.1 (\"PCEP TLV\
    \ Type\n   Indicators\").  The description is \"P2MP capable\", and the length\n\
    \   value is 2 bytes.  The value field is set to default value 0.\n   The inclusion\
    \ of this TLV in an OPEN object indicates that the sender\n   can perform P2MP\
    \ path computations.\n   The capability TLV is meaningful only for a PCE, so it\
    \ will typically\n   appear only in one of the two Open messages during PCE session\n\
    \   establishment.  However, in the case of PCE cooperation (e.g.,\n   inter-domain),\
    \ when a PCE behaving as a PCC initiates a PCE session\n   it SHOULD also indicate\
    \ its path computation capabilities.\n"
- title: 3.2.  Efficient Presentation of P2MP LSPs
  contents:
  - "3.2.  Efficient Presentation of P2MP LSPs\n   When specifying additional leaves\
    \ or when optimizing existing P2MP TE\n   LSPs as specified in [RFC5862], it may\
    \ be necessary to pass existing\n   P2MP LSP route information between the PCC\
    \ and PCE in the request and\n   reply messages.  In each of these scenarios,\
    \ we need path objects for\n   efficiently passing the existing P2MP LSP between\
    \ the PCE and PCC.\n   We specify the use of the Resource Reservation Protocol\
    \ Traffic\n   Engineering (RSVP-TE) extensions Explicit Route Object (ERO) to\n\
    \   encode the explicit route of a TE LSP through the network.  PCEP ERO\n   sub-object\
    \ types correspond to RSVP-TE ERO sub-object types.  The\n   format and content\
    \ of the ERO are defined in [RFC3209] and [RFC3473].\n   The Secondary Explicit\
    \ Route Object (SERO) is used to specify the\n   explicit route of an S2L sub-LSP.\
    \  The path of each subsequent S2L\n   sub-LSP is encoded in a P2MP_SECONDARY_EXPLICIT_ROUTE\
    \ object SERO.\n   The format of the SERO is the same as the format of an ERO\
    \ as defined\n   in [RFC3209] and [RFC3473].\n   The Secondary Record Route Object\
    \ (SRRO) is used to record the\n   explicit route of the S2L sub-LSP.  The class\
    \ of the P2MP SRRO is the\n   same as the class of the SRRO as defined in [RFC4873].\n\
    \   The SERO and SRRO are used to report the route of an existing TE LSP\n   for\
    \ which a reoptimization is desired.  The format and content of the\n   SERO and\
    \ SRRO are defined in [RFC4875].\n   PCEP Object-Class and Object-Type values\
    \ for the SERO and SRRO have\n   been assigned:\n      Object-Class Value    29\n\
    \      Name                  SERO\n      Object-Type           0: Reserved\n \
    \                           1: SERO\n                            2-15: Unassigned\n\
    \      Reference             RFC 8306\n      Object-Class Value    30\n      Name\
    \                  SRRO\n      Object-Type           0: Reserved\n           \
    \                 1: SRRO\n                            2-15: Unassigned\n    \
    \  Reference             RFC 8306\n   The IANA assignments are documented in Section\
    \ 6.5 (\"PCEP Objects\").\n   Since the explicit path is available for immediate\
    \ signaling by the\n   MPLS or GMPLS control plane, the meanings of all of the\
    \ sub-objects\n   and fields in this object are identical to those defined for\
    \ the ERO.\n"
- title: 3.3.  P2MP Path Computation Request/Reply Message Extensions
  contents:
  - "3.3.  P2MP Path Computation Request/Reply Message Extensions\n   This document\
    \ extends the existing P2P RP (Request Parameters) object\n   so that a PCC can\
    \ signal a P2MP path computation request to the PCE\n   receiving the PCEP request.\
    \  The END-POINTS object is also extended\n   to improve the efficiency of the\
    \ message exchange between the PCC and\n   PCE in the case of P2MP path computation.\n"
- title: 3.3.1.  The Extension of the RP Object
  contents:
  - "3.3.1.  The Extension of the RP Object\n   The PCE path computation request and\
    \ reply messages will need the\n   following additional parameters to indicate\
    \ to the receiving PCE\n   (1) that the request and reply messages have been fragmented\
    \ across\n   multiple messages, (2) that they have been requested for a P2MP path,\n\
    \   and (3) whether the route is represented in the compressed or\n   uncompressed\
    \ format.\n   This document adds the following flags to the RP object:\n   The\
    \ F-bit is added to the flag bits of the RP object to indicate to\n   the receiver\
    \ that the request is part of a fragmented request or\n   is not a fragmented\
    \ request.\n   o  F (RP fragmentation bit - 1 bit):\n      0: This indicates that\
    \ the RP is not fragmented or it is the last\n         piece of the fragmented\
    \ RP.\n      1: This indicates that the RP is fragmented and this is not the\n\
    \         last piece of the fragmented RP.  The receiver needs to wait\n     \
    \    for additional fragments until it receives an RP with the same\n        \
    \ RP-ID and with the F-bit set to 0.\n   The N-bit is added in the flag bits field\
    \ of the RP object to signal\n   the receiver of the message that the request/reply\
    \ is for P2MP or\n   is not for P2MP.\n   o  N (P2MP bit - 1 bit):\n      0: This\
    \ indicates that this is not a Path Computation Request\n         (PCReq) or Path\
    \ Computation Reply (PCRep) message for P2MP.\n      1: This indicates that this\
    \ is a PCReq or PCRep message for P2MP.\n   The E-bit is added in the flag bits\
    \ field of the RP object to signal\n   the receiver of the message that the route\
    \ is in the compressed\n   format or is not in the compressed format.  By default,\
    \ the path\n   returned by the PCE SHOULD use the compressed format.\n   o  E\
    \ (ERO-compression bit - 1 bit):\n      0: This indicates that the route is not\
    \ in the compressed format.\n      1: This indicates that the route is in the\
    \ compressed format.\n   The IANA assignments are documented in Section 6.2 (\"\
    Request\n   Parameter Bit Flags\") of this document.\n"
- title: 3.3.2.  The P2MP END-POINTS Object
  contents:
  - "3.3.2.  The P2MP END-POINTS Object\n   The END-POINTS object is used in a PCReq\
    \ message to specify the\n   source IP address and the destination IP address\
    \ of the path for\n   which a path computation is requested.  To represent the\
    \ end points\n   for a P2MP path efficiently, we define two types of END-POINTS\n\
    \   objects for the P2MP path:\n   o  Old leaves whose path can be modified/reoptimized.\n\
    \   o  Old leaves whose path must be left unchanged.\n   With the P2MP END-POINTS\
    \ object, the PCE Path Computation Request\n   message is expanded in a way that\
    \ allows a single request message to\n   list multiple destinations.\n   In total,\
    \ there are now four possible types of leaves in a\n   P2MP request:\n   o  New\
    \ leaves to add (leaf type = 1)\n   o  Old leaves to remove (leaf type = 2)\n\
    \   o  Old leaves whose path can be modified/reoptimized (leaf type = 3)\n   o\
    \  Old leaves whose path must be left unchanged (leaf type = 4)\n   A given END-POINTS\
    \ object gathers the leaves of a given type.  The\n   type of leaf in a given\
    \ END-POINTS object is identified by the\n   END-POINTS object leaf type field.\n\
    \   Using the P2MP END-POINTS object, the END-POINTS portion of a request\n  \
    \ message for the multiple destinations can be reduced by up to 50% for\n   a\
    \ P2MP path where a single source address has a very large number of\n   destinations.\n\
    \   Note that a P2MP path computation request can mix the different types\n  \
    \ of leaves by including several END-POINTS objects per RP object as\n   shown\
    \ in the PCReq Routing Backus-Naur Form (RBNF) [RFC5511] format\n   in Section\
    \ 3.4 (\"Request Message Format\").\n   The format of the P2MP END-POINTS object\
    \ body for IPv4\n   (Object-Type 3) is as follows:\n     0                   1\
    \                   2                   3\n     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4\
    \ 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                          Leaf type                            |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                     Source IPv4 address                       |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                  Destination IPv4 address                     |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    ~                           ...                                 ~\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                  Destination IPv4 address                     |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \         Figure 1: The P2MP END-POINTS Object Body Format for IPv4\n   The format\
    \ of the END-POINTS object body for IPv6 (Object-Type 4) is\n   as follows:\n\
    \     0                   1                   2                   3\n     0 1\
    \ 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                          Leaf type                            |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                                                               |\n    |\
    \                Source IPv6 address (16 bytes)                 |\n    |     \
    \                                                          |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                                                               |\n    |\
    \              Destination IPv6 address (16 bytes)              |\n    |     \
    \                                                          |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    ~                           ...                                 ~\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                                                               |\n    |\
    \              Destination IPv6 address (16 bytes)              |\n    |     \
    \                                                          |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \         Figure 2: The P2MP END-POINTS Object Body Format for IPv6\n   The END-POINTS\
    \ object body has a variable length.  These are\n   o  multiples of 4 bytes for\
    \ IPv4\n   o  multiples of 16 bytes, plus 4 bytes, for IPv6\n"
- title: 3.4.  Request Message Format
  contents:
  - "3.4.  Request Message Format\n   As per [RFC5440], a Path Computation Request\
    \ message (also referred\n   to as a PCReq message) is a PCEP message sent by\
    \ a PCC to a PCE to\n   request a path computation.  A PCReq message may carry\
    \ more than one\n   path computation request.\n   As per [RFC5541], the OF object\
    \ MAY be carried within a PCReq\n   message.  If an objective function is to be\
    \ applied to a set of\n   synchronized path computation requests, the OF object\
    \ MUST be carried\n   just after the corresponding SVEC (Synchronization Vector)\
    \ object and\n   MUST NOT be repeated for each elementary request.\n   The PCReq\
    \ message is encoded as follows using RBNF as defined in\n   [RFC5511].\n   Below\
    \ is the message format for the request message:\n        <PCReq Message> ::=\
    \ <Common Header>\n                           [<svec-list>]\n                \
    \           <request-list>\n        where:\n             <svec-list> ::= <SVEC>\n\
    \                           [<OF>]\n                           [<metric-list>]\n\
    \                           [<svec-list>]\n             <request-list> ::= <request>[<request-list>]\n\
    \             <request> ::= <RP>\n                          <end-point-rro-pair-list>\n\
    \                          [<OF>]\n                          [<LSPA>]\n      \
    \                    [<BANDWIDTH>]\n                          [<metric-list>]\n\
    \                          [<IRO>|<BNC>]\n                          [<LOAD-BALANCING>]\n\
    \        where:\n             <end-point-rro-pair-list> ::=\n                \
    \                <END-POINTS>[<RRO-List>[<BANDWIDTH>]]\n                     \
    \           [<end-point-rro-pair-list>]\n             <RRO-List> ::= (<RRO>|<SRRO>)[<RRO-List>]\n\
    \             <metric-list> ::= <METRIC>[<metric-list>]\n           Figure 3:\
    \ The Message Format for the Request Message\n   Note that we preserve compatibility\
    \ with the definition of <request>\n   provided in [RFC5440].  At least one instance\
    \ of <END-POINTS> MUST be\n   present in this message.\n   We have documented\
    \ the IANA assignment of additional END-POINTS\n   Object-Type values in Section\
    \ 6.5 (\"PCEP Objects\") of this document.\n"
- title: 3.5.  Reply Message Format
  contents:
  - "3.5.  Reply Message Format\n   The PCEP Path Computation Reply message (also\
    \ referred to as a\n   PCRep message) is a PCEP message sent by a PCE to a requesting\
    \ PCC in\n   response to a previously received PCReq message.  PCEP supports the\n\
    \   bundling of multiple replies to a set of path computation requests\n   within\
    \ a single PCRep message.\n   The PCRep message is encoded as follows using RBNF\
    \ as defined in\n   [RFC5511].\n   Below is the message format for the reply message:\n\
    \        <PCRep Message> ::= <Common Header>\n                           <response-list>\n\
    \        where:\n            <response-list> ::= <response>[<response-list>]\n\
    \            <response> ::= <RP>\n                   [<end-point-path-pair-list>]\n\
    \                   [<NO-PATH>]\n                   [<UNREACH-DESTINATION>]\n\
    \                   [<attribute-list>]\n            <end-point-path-pair-list>\
    \ ::=\n                    [<END-POINTS>]<path>\n                    [<end-point-path-pair-list>]\n\
    \            <path> ::= (<ERO>|<SERO>) [<path>]\n        where:\n            <attribute-list>\
    \ ::= [<OF>]\n                               [<LSPA>]\n                      \
    \         [<BANDWIDTH>]\n                               [<metric-list>]\n    \
    \                           [<IRO>]\n            Figure 4: The Message Format\
    \ for the Reply Message\n   The optional END-POINTS object in the reply message\
    \ is used to\n   specify which paths are removed, changed, not changed, or added\
    \ for\n   the request.  The path is only needed for the end points that are\n\
    \   added or changed.\n   If the E-bit (ERO-Compress bit) was set to 1 in the\
    \ request, then the\n   path will be formed by an ERO followed by a list of SEROs.\n\
    \   Note that we preserve compatibility with the definition of <response>\n  \
    \ provided in [RFC5440] and with the optional\n   <end-point-path-pair-list> and\
    \ <path>.\n"
- title: 3.6.  P2MP Objective Functions and Metric Types
  contents:
  - '3.6.  P2MP Objective Functions and Metric Types

    '
- title: 3.6.1.  Objective Functions
  contents:
  - "3.6.1.  Objective Functions\n   Six objective functions have been defined in\
    \ [RFC5541] for P2P path\n   computation.\n   This document defines two additional\
    \ objective functions -- namely,\n   SPT (Shortest-Path Tree) and MCT (Minimum-Cost\
    \ Tree) -- that apply to\n   P2MP path computation.  Hence, two objective function\
    \ codes are\n   defined as follows:\n   Objective Function Code: 7\n      Name:\
    \ Shortest-Path Tree (SPT)\n      Description: Minimize the maximum source-to-leaf\
    \ cost with respect\n      to a specific metric or to the TE metric used as the\
    \ default\n      metric when the metric is not specified (e.g., TE or IGP metric).\n\
    \   Objective Function Code: 8\n      Name: Minimum-Cost Tree (MCT)\n      Description:\
    \ Minimize the total cost of the tree (i.e., the sum of\n      the costs of tree\
    \ links) with respect to a specific metric or to\n      the TE metric used as\
    \ the default metric when the metric is not\n      specified.\n   Processing these\
    \ two objective functions is subject to the rules\n   defined in [RFC5541].\n"
- title: 3.6.2.  METRIC Object-Type Values
  contents:
  - "3.6.2.  METRIC Object-Type Values\n   There are three types defined for the METRIC\
    \ object in [RFC5440] --\n   namely, the IGP metric, the TE metric, and Hop Counts.\
    \  This document\n   defines three additional types for the METRIC object: the\
    \ P2MP IGP\n   metric, the P2MP TE metric, and the P2MP hop count metric.  They\n\
    \   encode the sum of the metrics of all links of the tree.  The\n   following\
    \ values for these metric types have been assigned; see\n   Section 6.4.\n   o\
    \  P2MP IGP metric: T=8\n   o  P2MP TE metric: T=9\n   o  P2MP hop count metric:\
    \ T=10\n"
- title: 3.7.  Non-Support of P2MP Path Computation
  contents:
  - "3.7.  Non-Support of P2MP Path Computation\n   o  If a PCE receives a P2MP path\
    \ computation request and it\n      understands the P2MP flag in the RP object,\
    \ but the PCE is not\n      capable of P2MP computation, the PCE MUST send a PCErr\
    \ message\n      with a PCEP-ERROR object and corresponding Error-value.  The\n\
    \      request MUST then be cancelled at the PCC.  The Error-Types and\n     \
    \ Error-values have been assigned; see Section 6 (\"IANA\n      Considerations\"\
    ) of this document.\n   o  If the PCE does not understand the P2MP flag in the\
    \ RP object,\n      then the PCE would send a PCErr message with Error-Type=2\n\
    \      (Capability not supported) as per [RFC5440].\n"
- title: 3.8.  Non-Support by Back-Level PCE Implementations
  contents:
  - "3.8.  Non-Support by Back-Level PCE Implementations\n   If a PCE receives a P2MP\
    \ request and the PCE does not understand the\n   P2MP flag in the RP object,\
    \ and therefore the PCEP P2MP extensions,\n   then the PCE SHOULD reject the request.\n"
- title: 3.9.  P2MP TE Path Reoptimization Request
  contents:
  - "3.9.  P2MP TE Path Reoptimization Request\n   A reoptimization request for a\
    \ P2MP TE path is specified by the use\n   of the R-bit within the RP object as\
    \ defined in [RFC5440] and is\n   similar to the reoptimization request for a\
    \ P2P TE path.  The only\n   difference is that the PCC MUST insert the list of\
    \ Record Route\n   Objects (RROs) and SRROs after each instance of the END-POINTS\
    \ object\n   in the PCReq message, as described in Section 3.4 (\"Request Message\n\
    \   Format\") of this document.\n   An example of a reoptimization request and\
    \ subsequent PCReq message\n   is described below:\n                        Common\
    \ Header\n                        RP with P2MP flag/R-bit set\n              \
    \          END-POINTS for leaf type 3\n                          RRO list\n  \
    \                      OF (optional)\n            Figure 5: PCReq Message Example\
    \ 1 for Optimization\n   In this example, we request reoptimization of the path\
    \ to all leaves\n   without adding or pruning leaves.  The reoptimization request\
    \ would\n   use an END-POINTS object with leaf type 3.  The RRO list would\n \
    \  represent the P2MP LSP before the optimization, and the modifiable\n   path\
    \ leaves would be indicated in the END-POINTS object.\n   It is also possible\
    \ to specify distinct leaves whose path cannot be\n   modified.  An example of\
    \ the PCReq message in this scenario would be:\n                      Common Header\n\
    \                      RP with P2MP flag/R-bit set\n                      END-POINTS\
    \ for leaf type 3\n                        RRO list\n                      END-POINTS\
    \ for leaf type 4\n                        RRO list\n                      OF\
    \ (optional)\n            Figure 6: PCReq Message Example 2 for Optimization\n"
- title: 3.10.  Adding and Pruning Leaves to/from the P2MP Tree
  contents:
  - "3.10.  Adding and Pruning Leaves to/from the P2MP Tree\n   When adding new leaves\
    \ to or removing old leaves from the existing\n   P2MP tree, by supplying a list\
    \ of existing leaves, it is possible to\n   optimize the existing P2MP tree. \
    \ This section explains the methods\n   for adding new leaves to or removing old\
    \ leaves from the existing\n   P2MP tree.\n   To add new leaves, the PCC MUST\
    \ build a P2MP request using END-POINTS\n   with leaf type 1.\n   To remove old\
    \ leaves, the PCC MUST build a P2MP request using\n   END-POINTS with leaf type\
    \ 2.  If no type-2 END-POINTS exist, then the\n   PCE MUST send Error-Type 17,\
    \ Error-value 1: the PCE cannot satisfy\n   the request due to no END-POINTS with\
    \ leaf type 2.\n   When adding new leaves to or removing old leaves from the existing\n\
    \   P2MP tree, the PCC MUST also provide the list of old leaves, if any,\n   including\
    \ END-POINTS with leaf type 3, leaf type 4, or both.\n   Specific PCEP-ERROR objects\
    \ and types are used when certain\n   conditions are not satisfied (i.e., when\
    \ there are no END-POINTS with\n   leaf type 3 or 4, or in the presence of END-POINTS\
    \ with leaf type 1\n   or 2).  A generic \"Inconsistent END-POINTS\" error will\
    \ be used if a\n   PCC receives a request that has an inconsistent END-POINTS\
    \ setting\n   (i.e., if a leaf specified as type 1 already exists).  These IANA\n\
    \   assignments are documented in Section 6.6 (\"PCEP-ERROR Objects and\n   Types\"\
    ) of this document.\n   For old leaves, the PCC MUST provide the old path as a\
    \ list of RROs\n   that immediately follows each END-POINTS object.  This document\n\
    \   specifies Error-values when specific conditions are not satisfied.\n   The\
    \ following examples demonstrate full and partial reoptimization of\n   existing\
    \ P2MP LSPs:\n   Case 1: Adding leaves with full reoptimization of existing paths\n\
    \              Common Header\n              RP with P2MP flag/R-bit set\n    \
    \          END-POINTS for leaf type 1\n                RRO list\n            \
    \  END-POINTS for leaf type 3\n                RRO list\n              OF (optional)\n\
    \   Case 2: Adding leaves with partial reoptimization of existing paths\n    \
    \          Common Header\n              RP with P2MP flag/R-bit set\n        \
    \      END-POINTS for leaf type 1\n              END-POINTS for leaf type 3\n\
    \                RRO list\n              END-POINTS for leaf type 4\n        \
    \        RRO list\n              OF (optional)\n   Case 3: Adding leaves without\
    \ reoptimization of existing paths\n              Common Header\n            \
    \  RP with P2MP flag/R-bit set\n              END-POINTS for leaf type 1\n   \
    \             RRO list\n              END-POINTS for leaf type 4\n           \
    \     RRO list\n              OF (optional)\n   Case 4: Pruning leaves with full\
    \ reoptimization of existing paths\n              Common Header\n            \
    \  RP with P2MP flag/R-bit set\n              END-POINTS for leaf type 2\n   \
    \             RRO list\n              END-POINTS for leaf type 3\n           \
    \     RRO list\n              OF (optional)\n   Case 5: Pruning leaves with partial\
    \ reoptimization of existing paths\n              Common Header\n            \
    \  RP with P2MP flag/R-bit set\n              END-POINTS for leaf type 2\n   \
    \             RRO list\n              END-POINTS for leaf type 3\n           \
    \     RRO list\n              END-POINTS for leaf type 4\n                RRO\
    \ list\n              OF (optional)\n   Case 6: Pruning leaves without reoptimization\
    \ of existing paths\n              Common Header\n              RP with P2MP flag/R-bit\
    \ set\n              END-POINTS for leaf type 2\n                RRO list\n  \
    \            END-POINTS for leaf type 4\n                RRO list\n          \
    \    OF (optional)\n   Case 7: Adding and pruning leaves with full reoptimization\
    \ of\n           existing paths\n              Common Header\n              RP\
    \ with P2MP flag/R-bit set\n              END-POINTS for leaf type 1\n       \
    \       END-POINTS for leaf type 2\n                RRO list\n              END-POINTS\
    \ for leaf type 3\n                RRO list\n              OF (optional)\n   Case\
    \ 8: Adding and pruning leaves with partial reoptimization of\n           existing\
    \ paths\n              Common Header\n              RP with P2MP flag/R-bit set\n\
    \              END-POINTS for leaf type 1\n              END-POINTS for leaf type\
    \ 2\n                RRO list\n              END-POINTS for leaf type 3\n    \
    \            RRO list\n              END-POINTS for leaf type 4\n            \
    \    RRO list\n              OF (optional)\n   Case 9: Adding and pruning leaves\
    \ without reoptimization of existing\n           paths\n              Common Header\n\
    \              RP with P2MP flag/R-bit set\n              END-POINTS for leaf\
    \ type 1\n              END-POINTS for leaf type 2\n                RRO list\n\
    \              END-POINTS for leaf type 4\n                RRO list\n        \
    \      OF (optional)\n"
- title: 3.11.  Discovering Branch Nodes
  contents:
  - "3.11.  Discovering Branch Nodes\n   Before computing the P2MP path, a PCE may\
    \ need to be provided means\n   to know which nodes in the network are capable\
    \ of acting as branch\n   LSRs.  A PCE can discover such capabilities by using\
    \ the mechanisms\n   defined in [RFC5073].\n"
- title: 3.11.1.  Branch Node Object
  contents:
  - "3.11.1.  Branch Node Object\n   The PCC can specify a list of nodes that can\
    \ be used as branch nodes\n   or a list of nodes that cannot be used as branch\
    \ nodes by using the\n   Branch Node Capability (BNC) object.  The BNC object\
    \ has the same\n   format as the Include Route Object (IRO) as defined in [RFC5440],\n\
    \   except that it only supports IPv4 and IPv6 prefix sub-objects.  Two\n   Object-Type\
    \ parameters are also defined:\n   o  Branch node list: List of nodes that can\
    \ be used as branch nodes.\n   o  Non-branch node list: List of nodes that cannot\
    \ be used as branch\n      nodes.\n   The object can only be carried in a PCReq\
    \ message.  A path\n   computation request may carry at most one Branch Node object.\n\
    \   The Object-Class and Object-Type values have been allocated by IANA.\n   The\
    \ IANA assignments are documented in Section 6.5 (\"PCEP Objects\").\n"
- title: 3.12.  Synchronization of P2MP TE Path Computation Requests
  contents:
  - "3.12.  Synchronization of P2MP TE Path Computation Requests\n   There are cases\
    \ when multiple P2MP LSPs' computations need to be\n   synchronized.  For example,\
    \ one P2MP LSP is the designated backup of\n   another P2MP LSP.  In this case,\
    \ path diversity for these dependent\n   LSPs may need to be considered during\
    \ the path computation.\n   The synchronization can be done by using the existing\
    \ SVEC\n   functionality as defined in [RFC5440].\n   An example of synchronizing\
    \ two P2MP LSPs, each having two leaves for\n   Path Computation Request messages,\
    \ is illustrated below:\n                      Common Header\n               \
    \       SVEC for sync of LSP1 and LSP2\n                      OF (optional)\n\
    \                      RP for LSP1\n                        END-POINTS1 for LSP1\n\
    \                        RRO1 list\n                      RP for LSP2\n      \
    \                  END-POINTS2 for LSP2\n                        RRO2 list\n \
    \           Figure 7: PCReq Message Example for Synchronization\n   This specification\
    \ also defines two flags for the SVEC Object Flag\n   Field for P2MP path-dependent\
    \ computation requests.  The first flag\n   allows the PCC to request that the\
    \ PCE should compute a secondary\n   P2MP path tree with partial path diversity\
    \ for specific leaves or a\n   specific S2L sub-path to the primary P2MP path\
    \ tree.  The second flag\n   allows the PCC to request that partial paths should\
    \ be\n   link direction diverse.\n   The following flags are added to the SVEC\
    \ object body in this\n   document:\n   o  P (Partial Path Diverse bit - 1 bit):\n\
    \      When set, this would indicate a request for path diversity for a\n    \
    \  specific leaf, a set of leaves, or all leaves.\n   o  D (Link Direction Diverse\
    \ bit - 1 bit):\n      When set, this would indicate a request that a partial\
    \ path or\n      paths should be link direction diverse.\n   The IANA assignments\
    \ are referenced in Section 6.8 of this document.\n"
- title: 3.13.  Request and Response Fragmentation
  contents:
  - "3.13.  Request and Response Fragmentation\n   The total PCEP message length,\
    \ including the common header, is\n   16 bytes.  In certain scenarios, the P2MP\
    \ computation request may not\n   fit into a single request or response message.\
    \  For example, if a\n   tree has many hundreds or thousands of leaves, then the\
    \ request or\n   response may need to be fragmented into multiple messages.\n\
    \   The F-bit is outlined in Section 3.3.1 (\"The Extension of the RP\n   Object\"\
    ) of this document.  The F-bit is used in the RP object to\n   signal that the\
    \ initial request or response was too large to fit into\n   a single message and\
    \ will be fragmented into multiple messages.  In\n   order to identify the single\
    \ request or response, each message will\n   use the same request ID.\n"
- title: 3.13.1.  Request Fragmentation Procedure
  contents:
  - "3.13.1.  Request Fragmentation Procedure\n   If the initial request is too large\
    \ to fit into a single request\n   message, the PCC will split the request over\
    \ multiple messages.  Each\n   message sent to the PCE, except the last one, will\
    \ have the F-bit set\n   in the RP object to signify that the request has been\
    \ fragmented into\n   multiple messages.  In order to identify that a series of\
    \ request\n   messages represents a single request, each message will use the\
    \ same\n   request ID.\n   The assumption is that request messages are reliably\
    \ delivered and in\n   sequence, since PCEP relies on TCP.\n"
- title: 3.13.2.  Response Fragmentation Procedure
  contents:
  - "3.13.2.  Response Fragmentation Procedure\n   Once the PCE computes a path based\
    \ on the initial request, a response\n   is sent back to the PCC.  If the response\
    \ is too large to fit into a\n   single response message, the PCE will split the\
    \ response over\n   multiple messages.  Each message sent by the PCE, except the\
    \ last\n   one, will have the F-bit set in the RP object to signify that the\n\
    \   response has been fragmented into multiple messages.  In order to\n   identify\
    \ that a series of response messages represents a single\n   response, each message\
    \ will use the same response ID.\n   Again, the assumption is that response messages\
    \ are reliably\n   delivered and in sequence, since PCEP relies on TCP.\n"
- title: 3.13.3.  Fragmentation Example
  contents:
  - "3.13.3.  Fragmentation Example\n   The following example illustrates the PCC\
    \ sending a request message\n   with Req-ID1 to the PCE, in order to add one leaf\
    \ to an existing tree\n   with 1200 leaves.  The assumption used for this example\
    \ is that one\n   request message can hold up to 800 leaves.  In this scenario,\
    \ the\n   original single message needs to be fragmented and sent using two\n\
    \   smaller messages, which have Req-ID1 specified in the RP object, and\n   with\
    \ the F-bit set on the first message and the F-bit cleared on the\n   second message.\n\
    \                 Common Header\n                 RP1 with Req-ID1 and P2MP=1\
    \ and F-bit=1\n                 OF (optional)\n                 END-POINTS1 for\
    \ P2MP\n                   RRO1 list\n                 Common Header\n       \
    \          RP2 with Req-ID1 and P2MP=1 and F-bit=0\n                 OF (optional)\n\
    \                 END-POINTS1 for P2MP\n                   RRO1 list\n       \
    \        Figure 8: PCReq Message Fragmentation Example\n   To handle a scenario\
    \ where the last fragmented message piece is lost,\n   the receiver side of the\
    \ fragmented message may start a timer once it\n   receives the first piece of\
    \ the fragmented message.  If the timer\n   expires and it still has not received\
    \ the last piece of the\n   fragmented message, it should send an error message\
    \ to the sender to\n   signal that it has received an incomplete message.  The\
    \ relevant\n   error message is documented in Section 3.15 (\"P2MP PCEP-ERROR\
    \ Objects\n   and Types\").\n"
- title: 3.14.  UNREACH-DESTINATION Object
  contents:
  - "3.14.  UNREACH-DESTINATION Object\n   The PCE path computation request may fail\
    \ because all or a subset of\n   the destinations are unreachable.\n   In such\
    \ a case, the UNREACH-DESTINATION object allows the PCE to\n   optionally specify\
    \ the list of unreachable destinations.\n   This object can be present in PCRep\
    \ messages.  There can be up to one\n   such object per RP.\n   The following\
    \ UNREACH-DESTINATION objects (for IPv4 and IPv6) are\n   defined:\n      UNREACH-DESTINATION\
    \ Object-Class is 28.\n      UNREACH-DESTINATION Object-Type for IPv4 is 1.\n\
    \      UNREACH-DESTINATION Object-Type for IPv6 is 2.\n   The format of the UNREACH-DESTINATION\
    \ object body for IPv4\n   (Object-Type=1) is as follows:\n     0            \
    \       1                   2                   3\n     0 1 2 3 4 5 6 7 8 9 0\
    \ 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                  Destination IPv4 address                     |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    ~                           ...                                 ~\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                  Destination IPv4 address                     |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \            Figure 9: UNREACH-DESTINATION Object Body for IPv4\n   The format\
    \ of the UNREACH-DESTINATION object body for IPv6\n   (Object-Type=2) is as follows:\n\
    \     0                   1                   2                   3\n     0 1\
    \ 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                                                               |\n    |\
    \            Destination IPv6 address (16 bytes)                |\n    |     \
    \                                                          |\n    |          \
    \                                                     |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    ~                          ...                                  ~\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                                                               |\n    |\
    \              Destination IPv6 address (16 bytes)              |\n    |     \
    \                                                          |\n    |          \
    \                                                     |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \            Figure 10: UNREACH-DESTINATION Object Body for IPv6\n"
- title: 3.15.  P2MP PCEP-ERROR Objects and Types
  contents:
  - "3.15.  P2MP PCEP-ERROR Objects and Types\n   To indicate an error associated\
    \ with a policy violation, the\n   Error-value \"P2MP Path computation is not\
    \ allowed\" has been added to\n   the existing error code for Error-Type 5 (\"\
    Policy violation\") as\n   defined in [RFC5440] (see also Section 6.6 of this\
    \ document):\n      Error-Type=5; Error-value=7: if a PCE receives a P2MP path\n\
    \      computation request that is not compliant with administrative\n      privileges\
    \ (i.e., \"The PCE policy does not support P2MP path\n      computation\"), the\
    \ PCE MUST send a PCErr message with a PCEP-ERROR\n      object (Error-Type=5)\
    \ and an Error-value of 7.  The corresponding\n      P2MP path computation request\
    \ MUST also be cancelled.\n   To indicate capability errors associated with the\
    \ P2MP path\n   computation request, Error-Type (16) and subsequent Error-values\
    \ are\n   defined as follows for inclusion in the PCEP-ERROR object:\n      Error-Type=16;\
    \ Error-value=1: if a PCE receives a P2MP path\n      computation request and\
    \ the PCE is not capable of satisfying the\n      request due to insufficient\
    \ memory, the PCE MUST send a PCErr\n      message with a PCEP-ERROR object (Error-Type=16)\
    \ and an\n      Error-value of 1.  The corresponding P2MP path computation request\n\
    \      MUST also be cancelled.\n      Error-Type=16; Error-value=2: if a PCE receives\
    \ a P2MP path\n      computation request and the PCE is not capable of P2MP\n\
    \      computation, the PCE MUST send a PCErr message with a PCEP-ERROR\n    \
    \  object (Error-Type=16) and an Error-value of 2.  The corresponding\n      P2MP\
    \ path computation request MUST also be cancelled.\n   To indicate P2MP message\
    \ fragmentation errors associated with a P2MP\n   path computation request, Error-Type\
    \ (18) and subsequent Error-values\n   are defined as follows for inclusion in\
    \ the PCEP-ERROR object:\n      Error-Type=18; Error-value=1: if a PCE has not\
    \ received the last\n      piece of the fragmented message, it should send an\
    \ error message\n      to the sender to signal that it has received an incomplete\
    \ message\n      (i.e., \"Fragmented request failure\").  The PCE MUST send a\
    \ PCErr\n      message with a PCEP-ERROR object (Error-Type=18) and an\n     \
    \ Error-value of 1.\n"
- title: 3.16.  PCEP NO-PATH Indicator
  contents:
  - "3.16.  PCEP NO-PATH Indicator\n   To communicate the reasons for not being able\
    \ to find a P2MP path\n   computation, the NO-PATH object can be used in the PCRep\
    \ message.\n   One bit is defined in the NO-PATH-VECTOR TLV carried in the NO-PATH\n\
    \   object:\n      bit 24: when set, the PCE indicates that there is a reachability\n\
    \      problem with all or a subset of the P2MP destinations.\n      Optionally,\
    \ the PCE can specify the destination or list of\n      destinations that are\
    \ not reachable using the UNREACH-DESTINATION\n      object defined in Section\
    \ 3.14.\n"
- title: 4.  Manageability Considerations
  contents:
  - "4.  Manageability Considerations\n   [RFC5862] describes various manageability\
    \ requirements in support of\n   P2MP path computation when applying PCEP.  This\
    \ section describes how\n   manageability requirements mentioned in [RFC5862]\
    \ are supported in\n   the context of PCEP extensions specified in this document.\n\
    \   Note that [RFC5440] describes various manageability considerations\n   for\
    \ PCEP, and most of the manageability requirements mentioned in\n   [RFC5862]\
    \ are already covered there.\n"
- title: 4.1.  Control of Function and Policy
  contents:
  - "4.1.  Control of Function and Policy\n   In addition to PCE configuration parameters\
    \ listed in [RFC5440], the\n   following additional parameters might be required:\n\
    \   o  The PCE may be configured to enable or disable P2MP path\n      computations.\n\
    \   o  The PCE may be configured to enable or disable the advertisement\n    \
    \  of its P2MP path computation capability.  A PCE can advertise its\n      P2MP\
    \ capability via the IGP discovery mechanism discussed in\n      Section 3.1.1\
    \ (\"IGP Extensions for P2MP Capability Advertisement\")\n      or during the\
    \ Open Message Exchange discussed in Section 3.1.2\n      (\"Open Message Extension\"\
    ).\n"
- title: 4.2.  Information and Data Models
  contents:
  - "4.2.  Information and Data Models\n   A number of MIB objects have been defined\
    \ in [RFC7420] for general\n   PCEP control and monitoring of P2P computations.\
    \  [RFC5862] specifies\n   that MIB objects will be required to support the control\
    \ and\n   monitoring of the protocol extensions defined in this document.  A\n\
    \   new document will be required to define MIB objects for PCEP control\n   and\
    \ monitoring of P2MP computations.\n   The \"ietf-pcep\" PCEP YANG module is specified\
    \ in [PCEP-YANG].  The\n   P2MP capability of a PCEP entity or a configured peer\
    \ can be set\n   using this YANG module.  Also, support for P2MP path computation\
    \ can\n   be learned using this module.  The statistics are maintained in the\n\
    \   \"ietf-pcep-stats\" YANG module as specified in [PCEP-YANG].  This YANG\n\
    \   module will be required to be augmented to also include the\n   P2MP-related\
    \ statistics.\n"
- title: 4.3.  Liveness Detection and Monitoring
  contents:
  - "4.3.  Liveness Detection and Monitoring\n   There are no additional considerations\
    \ beyond those expressed in\n   [RFC5440], since [RFC5862] does not address any\
    \ additional\n   requirements.\n"
- title: 4.4.  Verifying Correct Operation
  contents:
  - "4.4.  Verifying Correct Operation\n   There are no additional requirements beyond\
    \ those expressed in\n   [RFC4657] for verifying the correct operation of the\
    \ PCEP sessions.\n   It is expected that future MIB objects will facilitate verification\n\
    \   of correct operation and reporting of P2MP PCEP requests, responses,\n   and\
    \ errors.\n"
- title: 4.5.  Requirements for Other Protocols and Functional Components
  contents:
  - "4.5.  Requirements for Other Protocols and Functional Components\n   The method\
    \ for the PCE to obtain information about a PCE capable of\n   P2MP path computations\
    \ via OSPF and IS-IS is discussed in\n   Section 3.1.1 (\"IGP Extensions for P2MP\
    \ Capability Advertisement\") of\n   this document.\n   The relevant IANA assignment\
    \ is documented in Section 6.9 (\"OSPF PCE\n   Capability Flag\") of this document.\n"
- title: 4.6.  Impact on Network Operation
  contents:
  - "4.6.  Impact on Network Operation\n   It is expected that the use of PCEP extensions\
    \ specified in this\n   document will not significantly increase the level of\
    \ operational\n   traffic.  However, computing a P2MP tree may require more PCE\
    \ state\n   compared to a P2P computation.  In the event of a major network\n\
    \   failure and multiple recovery P2MP tree computation requests being\n   sent\
    \ to the PCE, the load on the PCE may also be significantly\n   increased.\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   As described in [RFC5862], P2MP path computation\
    \ requests are more\n   CPU-intensive and also utilize more link bandwidth.  In\
    \ the event of\n   an unauthorized P2MP path computation request or a denial-of-service\n\
    \   attack, the subsequent PCEP requests and processing may be disruptive\n  \
    \ to the network.  Consequently, it is important that implementations\n   conform\
    \ to the relevant security requirements that specifically help\n   to minimize\
    \ or negate unauthorized P2MP path computation requests and\n   denial-of-service\
    \ attacks.  These mechanisms include the following:\n   o  Securing the PCEP session\
    \ requests and responses is RECOMMENDED\n      using TCP security techniques such\
    \ as the TCP Authentication\n      Option (TCP-AO) [RFC5925] or using Transport\
    \ Layer Security (TLS)\n      [RFC8253], as per the recommendations and best current\
    \ practices\n      in [RFC7525].\n   o  Authenticating the PCEP requests and responses\
    \ to ensure that the\n      message is intact and sent from an authorized node\
    \ using the\n      TCP-AO or TLS is RECOMMENDED.\n   o  Policy control could be\
    \ provided by explicitly defining which PCCs\n      are allowed to send P2MP path\
    \ computation requests to the PCE via\n      IP access lists.\n   PCEP operates\
    \ over TCP, so it is also important to secure the PCE and\n   PCC against TCP\
    \ denial-of-service attacks.\n   As stated in [RFC6952], PCEP implementations\
    \ SHOULD support the\n   TCP-AO [RFC5925] and not use TCP MD5 because of TCP MD5's\
    \ known\n   vulnerabilities and weakness.\n"
- title: 6.  IANA Considerations
  contents:
  - "6.  IANA Considerations\n   IANA maintains a registry of PCEP parameters.  A\
    \ number of IANA\n   considerations have been highlighted in previous sections\
    \ of this\n   document.  IANA made the allocations as per [RFC6006].\n"
- title: 6.1.  PCEP TLV Type Indicators
  contents:
  - "6.1.  PCEP TLV Type Indicators\n   As described in Section 3.1.2, the P2MP capability\
    \ TLV allows the PCE\n   to advertise its P2MP path computation capability.\n\
    \   IANA had previously made an allocation from the \"PCEP TLV Type\n   Indicators\"\
    \ subregistry, where RFC 6006 was the reference.  IANA has\n   updated the reference\
    \ as follows to point to this document.\n         Value       Description    \
    \      Reference\n         6           P2MP capable         RFC 8306\n"
- title: 6.2.  Request Parameter Bit Flags
  contents:
  - "6.2.  Request Parameter Bit Flags\n   As described in Section 3.3.1, three RP\
    \ Object Flags have been\n   defined.\n   IANA had previously made allocations\
    \ from the PCEP \"RP Object Flag\n   Field\" subregistry, where RFC 6006 was the\
    \ reference.  IANA has\n   updated the reference as follows to point to this document.\n\
    \         Bit      Description                         Reference\n         18\
    \       Fragmentation (F-bit)               RFC 8306\n         19       P2MP (N-bit)\
    \                        RFC 8306\n         20       ERO-compression (E-bit) \
    \            RFC 8306\n"
- title: 6.3.  Objective Functions
  contents:
  - "6.3.  Objective Functions\n   As described in Section 3.6.1, this document defines\
    \ two objective\n   functions.\n   IANA had previously made allocations from the\
    \ PCEP \"Objective\n   Function\" subregistry, where RFC 6006 was the reference.\
    \  IANA has\n   updated the reference as follows to point to this document.\n\
    \         Code Point        Name        Reference\n         7                \
    \ SPT         RFC 8306\n         8                 MCT         RFC 8306\n"
- title: 6.4.  METRIC Object-Type Values
  contents:
  - "6.4.  METRIC Object-Type Values\n   As described in Section 3.6.2, three METRIC\
    \ object T fields have been\n   defined.\n   IANA had previously made allocations\
    \ from the PCEP \"METRIC Object\n   T Field\" subregistry, where RFC 6006 was\
    \ the reference.  IANA has\n   updated the reference as follows to point to this\
    \ document.\n         Value           Description               Reference\n  \
    \       8               P2MP IGP metric           RFC 8306\n         9       \
    \        P2MP TE metric            RFC 8306\n         10              P2MP hop\
    \ count metric     RFC 8306\n"
- title: 6.5.  PCEP Objects
  contents:
  - "6.5.  PCEP Objects\n   As discussed in Section 3.3.2, two END-POINTS Object-Type\
    \ values are\n   defined.\n   IANA had previously made the Object-Type allocations\
    \ from the \"PCEP\n   Objects\" subregistry, where RFC 6006 was the reference.\
    \  IANA has\n   updated the reference as follows to point to this document.\n\
    \         Object-Class Value    4\n         Name                  END-POINTS\n\
    \         Object-Type           3: IPv4\n                               4: IPv6\n\
    \                               5-15: Unassigned\n         Reference         \
    \    RFC 8306\n   As described in Sections 3.2, 3.11.1, and 3.14, four PCEP\n\
    \   Object-Class values and six PCEP Object-Type values have been\n   defined.\n\
    \   IANA had previously made allocations from the \"PCEP Objects\"\n   subregistry,\
    \ where RFC 6006 was the reference.  IANA has updated the\n   reference to point\
    \ to this document.\n   Also, for the following four PCEP objects, codepoint 0\
    \ for the\n   Object-Type field is marked \"Reserved\", as per Erratum ID 4956\
    \ for\n   RFC 5440.  IANA has updated the reference to point to this document.\n\
    \         Object-Class Value    28\n         Name                  UNREACH-DESTINATION\n\
    \         Object-Type           0: Reserved\n                               1:\
    \ IPv4\n                               2: IPv6\n                             \
    \  3-15: Unassigned\n         Reference             RFC 8306\n         Object-Class\
    \ Value    29\n         Name                  SERO\n         Object-Type     \
    \      0: Reserved\n                               1: SERO\n                 \
    \              2-15: Unassigned\n         Reference             RFC 8306\n   \
    \      Object-Class Value    30\n         Name                  SRRO\n       \
    \  Object-Type           0: Reserved\n                               1: SRRO\n\
    \                               2-15: Unassigned\n         Reference         \
    \    RFC 8306\n         Object-Class Value    31\n         Name              \
    \    BNC\n         Object-Type           0: Reserved\n                       \
    \        1: Branch node list\n                               2: Non-branch node\
    \ list\n                               3-15: Unassigned\n         Reference  \
    \           RFC 8306\n"
- title: 6.6.  PCEP-ERROR Objects and Types
  contents:
  - "6.6.  PCEP-ERROR Objects and Types\n   As described in Section 3.15, a number\
    \ of PCEP-ERROR Object\n   Error-Types and Error-values have been defined.\n \
    \  IANA had previously made allocations from the PCEP \"PCEP-ERROR Object\n  \
    \ Error Types and Values\" subregistry, where RFC 6006 was the\n   reference.\
    \  IANA has updated the reference as follows to point to\n   this document.\n\
    \   Error\n   Type  Meaning                                            Reference\n\
    \   5     Policy violation\n           Error-value=7:                        \
    \          RFC 8306\n             P2MP Path computation is not allowed\n   16\
    \    P2MP Capability Error\n           Error-value=0: Unassigned             \
    \          RFC 8306\n           Error-value=1:                               \
    \   RFC 8306\n             The PCE cannot satisfy the request\n             due\
    \ to insufficient memory\n           Error-value=2:                          \
    \        RFC 8306\n             The PCE is not capable of P2MP computation\n \
    \  17    P2MP END-POINTS Error\n           Error-value=0: Unassigned         \
    \              RFC 8306\n           Error-value=1:                           \
    \       RFC 8306\n             The PCE cannot satisfy the request\n          \
    \   due to no END-POINTS with leaf type 2\n           Error-value=2:         \
    \                         RFC 8306\n             The PCE cannot satisfy the request\n\
    \             due to no END-POINTS with leaf type 3\n           Error-value=3:\
    \                                  RFC 8306\n             The PCE cannot satisfy\
    \ the request\n             due to no END-POINTS with leaf type 4\n          \
    \ Error-value=4:                                  RFC 8306\n             The PCE\
    \ cannot satisfy the request\n             due to inconsistent END-POINTS\n  \
    \ 18    P2MP Fragmentation Error\n           Error-value=0: Unassigned       \
    \                RFC 8306\n           Error-value=1:                         \
    \         RFC 8306\n             Fragmented request failure\n"
- title: 6.7.  PCEP NO-PATH Indicator
  contents:
  - "6.7.  PCEP NO-PATH Indicator\n   As discussed in Section 3.16, the NO-PATH-VECTOR\
    \ TLV Flag Field has\n   been defined.\n   IANA had previously made an allocation\
    \ from the PCEP \"NO-PATH-VECTOR\n   TLV Flag Field\" subregistry, where RFC 6006\
    \ was the reference.  IANA\n   has updated the reference as follows to point to\
    \ this document.\n         Bit    Description                               Reference\n\
    \         24     P2MP Reachability Problem                 RFC 8306\n"
- title: 6.8.  SVEC Object Flag
  contents:
  - "6.8.  SVEC Object Flag\n   As discussed in Section 3.12, two SVEC Object Flags\
    \ are defined.\n   IANA had previously made allocations from the PCEP \"SVEC Object\
    \ Flag\n   Field\" subregistry, where RFC 6006 was the reference.  IANA has\n\
    \   updated the reference as follows to point to this document.\n         Bit\
    \      Description                              Reference\n         19       Partial\
    \ Path Diverse                     RFC 8306\n         20       Link Direction\
    \ Diverse                   RFC 8306\n"
- title: 6.9.  OSPF PCE Capability Flag
  contents:
  - "6.9.  OSPF PCE Capability Flag\n   As discussed in Section 3.1.1, the OSPF Capability\
    \ Flag is defined to\n   indicate P2MP path computation capability.\n   IANA had\
    \ previously made an assignment from the OSPF Parameters \"Path\n   Computation\
    \ Element (PCE) Capability Flags\" registry, where RFC 6006\n   was the reference.\
    \  IANA has updated the reference as follows to\n   point to this document.\n\
    \         Bit      Description                              Reference\n      \
    \   10       P2MP path computation                    RFC 8306\n"
- title: 7.  References
  contents:
  - '7.  References

    '
- title: 7.1.  Normative References
  contents:
  - "7.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n  \
    \            DOI 10.17487/RFC2119, March 1997,\n              <https://www.rfc-editor.org/info/rfc2119>.\n\
    \   [RFC3209]  Awduche, D., Berger, L., Gan, D., Li, T., Srinivasan, V.,\n   \
    \           and G. Swallow, \"RSVP-TE: Extensions to RSVP for LSP\n          \
    \    Tunnels\", RFC 3209, DOI 10.17487/RFC3209, December 2001,\n             \
    \ <https://www.rfc-editor.org/info/rfc3209>.\n   [RFC3473]  Berger, L., Ed., \"\
    Generalized Multi-Protocol Label\n              Switching (GMPLS) Signaling Resource\
    \ ReserVation\n              Protocol-Traffic Engineering (RSVP-TE) Extensions\"\
    ,\n              RFC 3473, DOI 10.17487/RFC3473, January 2003,\n             \
    \ <https://www.rfc-editor.org/info/rfc3473>.\n   [RFC4873]  Berger, L., Bryskin,\
    \ I., Papadimitriou, D., and A. Farrel,\n              \"GMPLS Segment Recovery\"\
    , RFC 4873, DOI 10.17487/RFC4873,\n              May 2007, <https://www.rfc-editor.org/info/rfc4873>.\n\
    \   [RFC4875]  Aggarwal, R., Ed., Papadimitriou, D., Ed., and S.\n           \
    \   Yasukawa, Ed., \"Extensions to Resource Reservation\n              Protocol\
    \ - Traffic Engineering (RSVP-TE) for\n              Point-to-Multipoint TE Label\
    \ Switched Paths (LSPs)\",\n              RFC 4875, DOI 10.17487/RFC4875, May\
    \ 2007,\n              <https://www.rfc-editor.org/info/rfc4875>.\n   [RFC5073]\
    \  Vasseur, J., Ed., and J. Le Roux, Ed., \"IGP Routing\n              Protocol\
    \ Extensions for Discovery of Traffic Engineering\n              Node Capabilities\"\
    , RFC 5073, DOI 10.17487/RFC5073,\n              December 2007, <https://www.rfc-editor.org/info/rfc5073>.\n\
    \   [RFC5088]  Le Roux, JL., Ed., Vasseur, JP., Ed., Ikejiri, Y., and R.\n   \
    \           Zhang, \"OSPF Protocol Extensions for Path Computation\n         \
    \     Element (PCE) Discovery\", RFC 5088, DOI 10.17487/RFC5088,\n           \
    \   January 2008, <https://www.rfc-editor.org/info/rfc5088>.\n   [RFC5089]  Le\
    \ Roux, JL., Ed., Vasseur, JP., Ed., Ikejiri, Y., and R.\n              Zhang,\
    \ \"IS-IS Protocol Extensions for Path Computation\n              Element (PCE)\
    \ Discovery\", RFC 5089, DOI 10.17487/RFC5089,\n              January 2008, <https://www.rfc-editor.org/info/rfc5089>.\n\
    \   [RFC5440]  Vasseur, JP., Ed., and JL. Le Roux, Ed., \"Path Computation\n \
    \             Element (PCE) Communication Protocol (PCEP)\", RFC 5440,\n     \
    \         DOI 10.17487/RFC5440, March 2009,\n              <https://www.rfc-editor.org/info/rfc5440>.\n\
    \   [RFC5511]  Farrel, A., \"Routing Backus-Naur Form (RBNF): A Syntax\n     \
    \         Used to Form Encoding Rules in Various Routing Protocol\n          \
    \    Specifications\", RFC 5511, DOI 10.17487/RFC5511,\n              April 2009,\
    \ <https://www.rfc-editor.org/info/rfc5511>.\n   [RFC5541]  Le Roux, JL., Vasseur,\
    \ JP., and Y. Lee, \"Encoding of\n              Objective Functions in the Path\
    \ Computation Element\n              Communication Protocol (PCEP)\", RFC 5541,\n\
    \              DOI 10.17487/RFC5541, June 2009,\n              <https://www.rfc-editor.org/info/rfc5541>.\n\
    \   [RFC7770]  Lindem, A., Ed., Shen, N., Vasseur, JP., Aggarwal, R., and\n  \
    \            S. Shaffer, \"Extensions to OSPF for Advertising Optional\n     \
    \         Router Capabilities\", RFC 7770, DOI 10.17487/RFC7770,\n           \
    \   February 2016, <https://www.rfc-editor.org/info/rfc7770>.\n   [RFC8174]  Leiba,\
    \ B., \"Ambiguity of Uppercase vs Lowercase in\n              RFC 2119 Key Words\"\
    , BCP 14, RFC 8174,\n              DOI 10.17487/RFC8174, May 2017,\n         \
    \     <https://www.rfc-editor.org/info/rfc8174>.\n"
- title: 7.2.  Informative References
  contents:
  - "7.2.  Informative References\n   [PCEP-YANG]\n              Dhody, D., Ed., Hardwick,\
    \ J., Beeram, V., and J. Tantsura,\n              \"A YANG Data Model for Path\
    \ Computation Element\n              Communications Protocol (PCEP)\", Work in\
    \ Progress,\n              draft-ietf-pce-pcep-yang-05, July 2017.\n   [RFC4655]\
    \  Farrel, A., Vasseur, J.-P., and J. Ash, \"A Path\n              Computation\
    \ Element (PCE)-Based Architecture\", RFC 4655,\n              DOI 10.17487/RFC4655,\
    \ August 2006,\n              <https://www.rfc-editor.org/info/rfc4655>.\n   [RFC4657]\
    \  Ash, J., Ed., and J. Le Roux, Ed., \"Path Computation\n              Element\
    \ (PCE) Communication Protocol Generic\n              Requirements\", RFC 4657,\
    \ DOI 10.17487/RFC4657,\n              September 2006, <https://www.rfc-editor.org/info/rfc4657>.\n\
    \   [RFC5671]  Yasukawa, S. and A. Farrel, Ed., \"Applicability of the\n     \
    \         Path Computation Element (PCE) to Point-to-Multipoint\n            \
    \  (P2MP) MPLS and GMPLS Traffic Engineering (TE)\", RFC 5671,\n             \
    \ DOI 10.17487/RFC5671, October 2009,\n              <https://www.rfc-editor.org/info/rfc5671>.\n\
    \   [RFC5862]  Yasukawa, S. and A. Farrel, \"Path Computation Clients\n      \
    \        (PCC) - Path Computation Element (PCE) Requirements for\n           \
    \   Point-to-Multipoint MPLS-TE\", RFC 5862,\n              DOI 10.17487/RFC5862,\
    \ June 2010,\n              <https://www.rfc-editor.org/info/rfc5862>.\n   [RFC5925]\
    \  Touch, J., Mankin, A., and R. Bonica, \"The TCP\n              Authentication\
    \ Option\", RFC 5925, DOI 10.17487/RFC5925,\n              June 2010, <https://www.rfc-editor.org/info/rfc5925>.\n\
    \   [RFC6006]  Zhao, Q., Ed., King, D., Ed., Verhaeghe, F., Takeda, T.,\n    \
    \          Ali, Z., and J. Meuric, \"Extensions to the Path\n              Computation\
    \ Element Communication Protocol (PCEP) for\n              Point-to-Multipoint\
    \ Traffic Engineering Label Switched\n              Paths\", RFC 6006, DOI 10.17487/RFC6006,\
    \ September 2010,\n              <https://www.rfc-editor.org/info/rfc6006>.\n\
    \   [RFC6952]  Jethanandani, M., Patel, K., and L. Zheng, \"Analysis of\n    \
    \          BGP, LDP, PCEP, and MSDP Issues According to the Keying\n         \
    \     and Authentication for Routing Protocols (KARP) Design\n              Guide\"\
    , RFC 6952, DOI 10.17487/RFC6952, May 2013,\n              <https://www.rfc-editor.org/info/rfc6952>.\n\
    \   [RFC7420]  Koushik, A., Stephan, E., Zhao, Q., King, D., and J.\n        \
    \      Hardwick, \"Path Computation Element Communication Protocol\n         \
    \     (PCEP) Management Information Base (MIB) Module\",\n              RFC 7420,\
    \ DOI 10.17487/RFC7420, December 2014,\n              <https://www.rfc-editor.org/info/rfc7420>.\n\
    \   [RFC7525]  Sheffer, Y., Holz, R., and P. Saint-Andre,\n              \"Recommendations\
    \ for Secure Use of Transport Layer\n              Security (TLS) and Datagram\
    \ Transport Layer Security\n              (DTLS)\", BCP 195, RFC 7525, DOI 10.17487/RFC7525,\n\
    \              May 2015, <https://www.rfc-editor.org/info/rfc7525>.\n   [RFC8253]\
    \  Lopez, D., Gonzalez de Dios, O., Wu, Q., and D. Dhody,\n              \"PCEPS:\
    \ Usage of TLS to Provide a Secure Transport for the\n              Path Computation\
    \ Element Communication Protocol (PCEP)\",\n              RFC 8253, DOI 10.17487/RFC8253,\
    \ October 2017,\n              <https://www.rfc-editor.org/info/rfc8253>.\n"
- title: Appendix A.  Summary of Changes from RFC 6006
  contents:
  - "Appendix A.  Summary of Changes from RFC 6006\n   o  Updated the text to use\
    \ the term \"PCC\" instead of \"user\" while\n      describing the encoding rules\
    \ in Section 3.10.\n   o  Updated the example in Figure 7 to explicitly include\
    \ the\n      RP object.\n   o  Corrected the description of the F-bit in the RP\
    \ object in\n      Section 3.13, as per Erratum ID 3836.\n   o  Corrected the\
    \ description of the fragmentation procedure for the\n      response in Section\
    \ 3.13.2, as per Erratum ID 3819.\n   o  Corrected the Error-Type for fragmentation\
    \ in Section 3.15, as per\n      Erratum ID 3830.\n   o  Updated the references\
    \ for the OSPF Router Information Link State\n      Advertisement (LSA) [RFC7770]\
    \ and the PCEP MIB [RFC7420].\n   o  Added current information and references\
    \ for PCEP YANG [PCEP-YANG]\n      and PCEPS [RFC8253].\n   o  Updated the Security\
    \ Considerations section to include the TCP-AO\n      and TLS.\n   o  Updated\
    \ the IANA Considerations section (Section 6.5) to mark\n      codepoint 0 as\
    \ \"Reserved\" for the Object-Type defined in this\n      document, as per Erratum\
    \ ID 4956 for [RFC5440].  IANA references\n      have also been updated to point\
    \ to this document.\n"
- title: Appendix A.1.  RBNF Changes from RFC 6006
  contents:
  - "Appendix A.1.  RBNF Changes from RFC 6006\n   o  Updates to the RBNF for the\
    \ request message format, per\n      Erratum ID 4867:\n      *  Updated the request\
    \ message to allow for the bundling of\n         multiple path computation requests\
    \ within a single PCReq\n         message.\n      *  Added <svec-list> in PCReq\
    \ messages.  This object was missed in\n         [RFC6006].\n      *  Added the\
    \ BNC object in PCReq messages.  This object is\n         required to support\
    \ P2MP.  The BNC object shares the same\n         format as the IRO, but it only\
    \ supports IPv4 and IPv6 prefix\n         sub-objects.\n      *  Updated the <RRO-List>\
    \ format to also allow the SRRO.  This\n         object was missed in [RFC6006].\n\
    \      *  Removed the BANDWIDTH object followed by the RRO from\n         <RRO-List>.\
    \  The BANDWIDTH object was included twice in\n         RFC 6006 -- once as part\
    \ of <end-point-path-pair-list> and also\n         as part of <RRO-List>.  The\
    \ latter has been removed, and the\n         RBNF is backward compatible with\
    \ [RFC5440].\n      *  Updated the <end-point-rro-pair-list> to allow an optional\n\
    \         BANDWIDTH object only if <RRO-List> is included.\n   o  Updates to the\
    \ RBNF for the reply message format, per\n      Erratum ID 4868:\n      *  Updated\
    \ the reply message to allow for bundling of multiple\n         path computation\
    \ replies within a single PCRep message.\n      *  Added the UNREACH-DESTINATION\
    \ object in PCRep messages.  This\n         object was missed in [RFC6006].\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   The authors would like to thank Adrian Farrel, Young Lee,\
    \ Dan Tappan,\n   Autumn Liu, Huaimo Chen, Eiji Oki, Nic Neate, Suresh Babu K,\
    \ Gaurav\n   Agrawal, Vishwas Manral, Dan Romascanu, Tim Polk, Stewart Bryant,\n\
    \   David Harrington, and Sean Turner for their valuable comments and\n   input\
    \ on this document.\n   Thanks to Deborah Brungard for handling related errata\
    \ for RFC 6006.\n   The authors would like to thank Jonathan Hardwick and Adrian\
    \ Farrel\n   for providing review comments with suggested text for this document.\n\
    \   Thanks to Jonathan Hardwick for being the document shepherd and for\n   providing\
    \ comments and guidance.\n   Thanks to Ben Niven-Jenkins for RTGDIR reviews.\n\
    \   Thanks to Roni Even for GENART reviews.\n   Thanks to Fred Baker for the OPSDIR\
    \ review.\n   Thanks to Deborah Brungard for being the responsible AD and guiding\n\
    \   the authors.\n   Thanks to Mirja Kuehlewind, Alvaro Retana, Ben Campbell,\
    \ Adam Roach,\n   Benoit Claise, Suresh Krishnan, and Eric Rescorla for their\
    \ IESG\n   review and comments.\n"
- title: Contributors
  contents:
  - "Contributors\n   Fabien Verhaeghe\n   Thales Communication France\n   160 boulevard\
    \ Valmy\n   92700 Colombes\n   France\n   Email: fabien.verhaeghe@gmail.com\n\
    \   Tomonori Takeda\n   NTT Corporation\n   3-9-11, Midori-Cho\n   Musashino-Shi,\
    \ Tokyo  180-8585\n   Japan\n   Email: tomonori.takeda@ntt.com\n   Zafar Ali\n\
    \   Cisco Systems, Inc.\n   2000 Innovation Drive\n   Kanata, Ontario  K2K 3E8\n\
    \   Canada\n   Email: zali@cisco.com\n   Julien Meuric\n   Orange\n   2, Avenue\
    \ Pierre Marzin\n   22307 Lannion Cedex\n   France\n   Email: julien.meuric@orange.com\n\
    \   Jean-Louis Le Roux\n   Orange\n   2, Avenue Pierre Marzin\n   22307 Lannion\
    \ Cedex\n   France\n   Email: jeanlouis.leroux@orange.com\n   Mohamad Chaitou\n\
    \   France\n   Email: mohamad.chaitou@gmail.com\n   Udayasree Palle\n   Huawei\
    \ Technologies\n   Divyashree Techno Park, Whitefield\n   Bangalore, Karnataka\
    \  560066\n   India\n   Email: udayasreereddy@gmail.com\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Quintin Zhao\n   Huawei Technologies\n   125 Nagog Technology\
    \ Park\n   Acton, MA  01719\n   United States of America\n   Email: quintin.zhao@huawei.com\n\
    \   Dhruv Dhody (editor)\n   Huawei Technologies\n   Divyashree Techno Park, Whitefield\n\
    \   Bangalore, Karnataka  560066\n   India\n   Email: dhruv.ietf@gmail.com\n \
    \  Ramanjaneya Reddy Palleti\n   Huawei Technologies\n   Divyashree Techno Park,\
    \ Whitefield\n   Bangalore, Karnataka  560066\n   India\n   Email: ramanjaneya.palleti@huawei.com\n\
    \   Daniel King\n   Old Dog Consulting\n   United Kingdom\n   Email: daniel@olddog.co.uk\n"
