- title: __initial_text__
  contents:
  - '              Transmitting IP Traffic over ARCNET Networks

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo defines a protocol for the transmission of\
    \ IP and ARP\n   packets over the ARCnet Local Area Network.  This RFC specifies\
    \ an\n   IAB standards track protocol for the Internet community, and requests\n\
    \   discussion and suggestions for improvements.  Please refer to the\n   current\
    \ edition of the \"IAB Official Protocol Standards\" for the\n   standardization\
    \ state and status of this protocol.  Distribution of\n   this memo is unlimited.\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This memo specifies a method of encapsulating Internet Protocol\
    \ (IP)\n   [1] and Address Resolution Protocol (ARP) [2] datagrams for\n   transmission\
    \ across ARCNET [3] using the \"ARCNET Packet Header\n   Definition Standard\"\
    \ [4].  This memo offers a replacement for RFC\n   1051.  RFC 1051 uses an ARCNET\
    \ framing protocol which limits\n   unfragmented IP packets to 508 octets [5].\n"
- title: 2.  ARCNET Packet Format
  contents:
  - "2.  ARCNET Packet Format\n   In 1989, Apple Computers, Novell, ACTINET Systems,\
    \ Standard\n   Microsystems, and Pure Data Research agreed to use the ARCNET\n\
    \   datalink protocol defined in \"ARCNET Packet Header Definition\n   Standard\"\
    \ [4].  We'll begin with a brief description of that\n   protocol.\n"
- title: 2.1.  ARCNET Framing
  contents:
  - "2.1.  ARCNET Framing\n   ARCNET hardware supports two types of frames: short\
    \ frames, which are\n   always 256 octets long, and long frames, which are always\
    \ 512 octets\n   long.  All frames begin with a hardware header and end with the\n\
    \   client's data preceded by a software header.  Software places padding\n  \
    \ in the middle of the packet between the hardware header and the\n   software\
    \ header to make the frame the appropriate fixed length.\n   Unbeknown to the\
    \ software, the hardware removes this padding during\n   transmission.\n   Short\
    \ frames can hold from 0 to 249 octets of client data.  Long\n   frames can hold\
    \ from 253 to 504 octets of client data.  To handle\n   frames with 250, 251,\
    \ or 252 octets of data, the datalink protocol\n   introduces a third frame type:\
    \ the exception frame.\n   These three frame formats are shown here.  Except as\
    \ noted, each\n   block represents one octet.\n       Short Frame            \
    \ Long Frame          Exception Frame\n    +---------------+      +---------------+\
    \      +---------------+\n    |     source    |      |     source    |      |\
    \     source    |\n    +---------------+      +---------------+      +---------------+\n\
    \    |  destination  |      |  destination  |      |  destination  |\n    +---------------+\
    \      +---------------+      +---------------+\n    |     offset    |      |\
    \       0       |      |       0       |\n    +---------------+      +---------------+\
    \      +---------------+\n    .     unused    .      |     offset    |      |\
    \     offset    |\n    .  (offset - 3  .      +---------------+      +---------------+\n\
    \    .     octets)   .      .     unused    .      .     unused    .\n    +---------------+\
    \      .  (offset - 4  .      .  (offset - 4  .\n    |  protocol ID  |      .\
    \     octets)   .      .     octets)   .\n    +---------------+      +---------------+\
    \      +---------------+\n    |  split flag   |      |  protocol ID  |      |\
    \  protocol ID  |\n    +---------------+      +---------------+      +---------------+\n\
    \    |   sequence    |      |  split flag   |      | flag: FF hex  |\n    +  \
    \  number     +      +---------------+      +---------------+\n    |  (2 octets)\
    \   |      |   sequence    |      | padding: 0xFF |\n    +---------------+   \
    \   +    number     +      +---------------+\n    .               .      |  (2\
    \ octets)   |      | padding: 0xFF |\n    .  client data  .      +---------------+\
    \      +---------------+\n    . (256 - offset .      .               .      |\
    \ (protocol ID) |\n    .   - 4 octets) .      .               .      +---------------+\n\
    \    .               .      .               .      |  split flag   |\n    +---------------+\
    \      .               .      +---------------+\n                           .\
    \               .      |   sequence    |\n                           .  client\
    \ data  .      +    number     +\n                           . (512 - offset .\
    \      |  (2 octets)   |\n                           .   - 4 octets) .      +---------------+\n\
    \                           .               .      .               .\n       \
    \                    .               .      .  client data  .\n              \
    \             .               .      . (512 - offset .\n                     \
    \      .               .      .   - 8 octets) .\n                           .\
    \               .      .               .\n                           +---------------+\
    \      +---------------+\n      These packet formats are presented as software\
    \ would see them\n      through ARCNET hardware.  [3] refers to this as the \"\
    buffer\n      format\".  The actual format of packets on the wire is a little\n\
    \      different: the destination ID is duplicated, the padding between\n    \
    \  the offset field and the protocol ID field is not transmitted, and\n      there's\
    \ some hardware framing information.  In addition, the\n      hardware transmits\
    \ special packets for buffer allocation and\n      reception acknowledgement which\
    \ are not described here [3].\n"
- title: 2.2.  Datalink Layer Fragmentation
  contents:
  - "2.2.  Datalink Layer Fragmentation\n   ARCNET hardware limits individual frames\
    \ to 512 octets, which allows\n   504 octets of client data.  This ARCNET datalink\
    \ protocol allows the\n   datalink layer to break packets into as many as 120\
    \ fragments for\n   transmission.  This allows ARCNET clients to transmit up to\
    \ 60,480\n   octets in each packet.\n   The \"split flag\" describes datalink\
    \ layer packet fragments.  There\n   are three cases: an unfragmented packet,\
    \ the first fragment of a\n   fragmented packet, and any other fragment of a fragmented\
    \ packet.\n   Unfragmented packets always have a split flag of zero.\n   The first\
    \ fragment of a fragmented packet has a split flag equal to\n   ((T-2)*2)+1, where\
    \ T is the total number of fragments to expect for\n   the packet.\n   Subsequent\
    \ fragments of a fragmented packet have a split flag equal\n   to ((N-1)*2), where\
    \ N is the number of this fragment.  For example,\n   the fourth fragment of a\
    \ packet will always have the split flag value\n   of six ( (4-1)*2 ).\n   The\
    \ receiving station can identify the last fragment of a packet\n   because the\
    \ value of its 8-bit split flag will be one greater than\n   the split flag of\
    \ the first fragment of the packet.\n      A previous version of this ARCNET datalink\
    \ protocol definition\n      only allowed packets which could be contained in\
    \ two fragments.\n      In this older standard, the only legal split flags were\
    \ 0, 1, and\n      2.  Compatibility with this older standard can be maintained\
    \ by\n      configuring the maximum client data length to 1008 octets.\n   No\
    \ more that 120 fragments are allowed.  The highest legal split flag\n   value\
    \ is EE hex.  (Notice that the split flag value FF hex is used to\n   flag exception\
    \ packets in what would otherwise be a long packet's\n   split flag field.)\n\
    \   All fragments of a single packet carry the same sequence number.\n"
- title: 2.3.  Datalink Layer Reassembly
  contents:
  - "2.3.  Datalink Layer Reassembly\n   The previous section provides enough information\
    \ to implement\n   datalink reassembly.  To avoid buffer allocation problems during\n\
    \   reassembly, we recommend allocating enough space for the entire\n   reassembled\
    \ packet when the first fragment arrives.\n   Since fragments are sent in order,\
    \ the reassembly procedure can give\n   up on a packet if it receives a fragment\
    \ out of order.  There is one\n   exception, however.  It is possible for successfully\
    \ received\n   fragments to be retransmitted.  Reassembly software should ignore\n\
    \   repetitious fragments without giving up on the packet.\n   Since fragments\
    \ will be sent briskly, the reassembly procedure can\n   give up on a partially\
    \ reassembled packet if no additional fragments\n   for it arrive within a few\
    \ seconds.\n"
- title: 2.4.  Datalink Layer Retransmission
  contents:
  - "2.4.  Datalink Layer Retransmission\n   For each unicast ARCNET packet, the hardware\
    \ indicates to the sender\n   whether or not the receiver acknowledged the packet.\
    \  To improve\n   reliability, datalink implementations are encouraged to retransmit\n\
    \   unacknowledged packets or packet fragments.  Several retransmissions\n   may\
    \ be necessary.  Broadcast packets, however, are never acknowledged\n   and, therefore,\
    \ they should never be retransmitted.\n   Packets which are successfully received\
    \ may not be successfully\n   acknowledged.  Consequently, retransmission by the\
    \ datalink\n   implementation can cause duplicate packets or duplicate fragments.\n\
    \   Duplicate packets are not a problem for IP or ARP.  As mentioned in\n   the\
    \ previous section, ARCNET reassembly support should ignore any\n   redundant\
    \ fragments.\n"
- title: 3.  Transmitting IP and ARP Datagrams
  contents:
  - "3.  Transmitting IP and ARP Datagrams\n   IP and ARP datagrams are carried in\
    \ the client data area of ARCNET\n   packets.  Datalink support places each datagram\
    \ in an appropriate\n   size ARCNET frame, fragmenting IP datagrams larger than\
    \ 504 octets\n   into multiple frames as described in the previous section.\n"
- title: 4.  IP Address Mappings
  contents:
  - "4.  IP Address Mappings\n   This section explains how each of the three basic\
    \ 32-bit internet\n   address types are mapped to 8-bit ARCNET addresses.\n"
- title: 4.1.  Unicast Addresses
  contents:
  - "4.1.  Unicast Addresses\n   A unicast IP address is mapped to an 8-bit ARCNET\
    \ address using ARP\n   as specified in [2].  A later section covers the specific\
    \ values\n   which should be used in ARP packets sent on ARCNET networks.\n  \
    \    It is possible to assign IP addresses such that the last eight\n      bits\
    \ are the same as the 8-bit ARCNET address.  This would allow\n      direct mapping\
    \ of IP address to ARCNET address without using a\n      discovery protocol. \
    \ Some implementations might provide this as an\n      option, but it is not recommended\
    \ practice.  Although such hard-\n      wired mapping is initially appealing,\
    \ experience shows that ARP is\n      a much more flexible and convenient approach\
    \ which has a very\n      small cost.\n"
- title: 4.2.  Broadcast Addresses
  contents:
  - "4.2.  Broadcast Addresses\n   All IP broadcast addresses must be mapped to the\
    \ ARCNET broadcast\n   address of 0.\n      Unlike unicast packets, ARCNET does\
    \ not attempt to insure delivery\n      of broadcast packets, so they may be lost.\
    \  This will not have a\n      major impact on IP since neither IP nor ARP expect\
    \ all packets to\n      be delivered.\n"
- title: 4.3.  Multicast Addresses
  contents:
  - "4.3.  Multicast Addresses\n   Since ARCNET provides no support for multicasts,\
    \ all IP multicast\n   addresses must be mapped to the ARCNET broadcast address\
    \ of 0.\n"
- title: 5.  ARP
  contents:
  - "5.  ARP\n   The hardware address length is 1 octet for ARP packets sent over\n\
    \   ARCNET networks.  The ARP hardware type for ARCNET is 7.  ARP request\n  \
    \ packets are broadcast by directing them to ARCNET broadcast address,\n   which\
    \ is 0.\n"
- title: 6.  RARP
  contents:
  - "6.  RARP\n   Reverse Address Resolution Protocol [6] packets can also be\n  \
    \ transmitted over ARCNET.  For the purposes of datalink transmission\n   and\
    \ reception, RARP is identical to ARP and can be handled the same\n   way.  There\
    \ are a few differences to notice, however, between RARP\n   when running over\
    \ ARCNET, which has a one octet hardware address, and\n   Ethernet, which has\
    \ a six octet hardware address.\n   First, there are only 255 different hardware\
    \ addresses for any given\n   ARCNET while there's an very large number of possible\
    \ Ethernet\n   addresses.  Second, ARCNET hardware addresses are more likely to\
    \ be\n   duplicated on different ARCNET networks; Ethernet hardware addresses\n\
    \   will normally be globally unique.  Third, an ARCNET hardware address\n   is\
    \ not as constant as an Ethernet address:  ARCNET hardware addresses\n   are set\
    \ by switches, not fixed in ROM as they are on Ethernet.\n"
- title: 7.  Maximum Transmission Unit
  contents:
  - "7.  Maximum Transmission Unit\n   The maximum IP packet length possible using\
    \ this encapsulation method\n   is 60,480 octets.  Since this length is impractical,\
    \ all ARCNET\n   implementations on a given ARCNET network will need to agree\
    \ on a\n   smaller value.  Therefore, the maximum packet size MUST be\n   configurable\
    \ in implementations of this specification.\n   In any case, implementations must\
    \ be able to send and receive IP\n   datagrams up to 576 octets in length, and\
    \ are strongly encouraged to\n   handle IP datagrams up to 1500 octets in length.\n\
    \   Implementations may accept arriving IP datagrams which are larger\n   than\
    \ their configured maximum transmission unit.  They are not\n   required to discard\
    \ such datagrams.\n   To minimize the amount of ARCNET fragmentation, implementations\
    \ may\n   want to aim at an optimum IP packet size of 504 bytes.  This avoids\n\
    \   the overhead of datalink fragmentation, but at the expense of\n   increasing\
    \ the number of IP packets which must be handled by each\n   node in the path.\
    \  In addition to encouraging local applications to\n   generate smaller packets,\
    \ an implementation might also use the TCP\n   maximum segment size option to\
    \ indicate a desire for 464 octet TCP\n   segments [7], or it might  announce\
    \ an IP MTU of 504 octets through\n   an MTU discovery mechanism such as [8].\
    \  These would inform non-\n   ARCNET nodes of the smaller optimum packet size.\n"
- title: 8.  Assigned Numbers
  contents:
  - "8.  Assigned Numbers\n   Datapoint Corporation assigns ARCNET protocol IDs to\
    \ identify\n   different protocols running on the same ARCNET medium.  For\n \
    \  implementations of this specification, Datapoint has assigned 212\n   decimal\
    \ to IP, 213 decimal to ARP, and 214 decimal to RARP.  These\n   are not the numbers\
    \ assigned to the IP encapsulation defined by RFC\n   1051 [5].  Implementations\
    \ of RFC 1051 can exist on the same ARCNET\n   as implementations of this specification,\
    \ although the two would not\n   be able to communicate with each other.\n   The\
    \ Internet Assigned Numbers Authority (IANA) assigns ARP hardware\n   type values.\
    \  It has assigned ARCNET the ARP hardware type of 7 [9].\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   Several people have reviewed this specification and provided\
    \ useful\n   input.  I'd like to thank Wesley Hardell at Datapoint and Troy Thomas\n\
    \   at Novell's Provo office for helping me figure out ARCNET.  In\n   addition,\
    \ I particularly appreciate the effort by James VanBokkelen\n   at FTP Software\
    \ who picked on me until all the fuzzy edges were\n   smoothed out.\n   The pioneering\
    \ work in transmitting IP traffic on ARCNET networks was\n   done by Philippe\
    \ Prindeville.\n"
- title: References
  contents:
  - "References\n   [1] Postel, J., \"Internet Protocol\", RFC 791, DARPA, September\
    \ 1981.\n   [2] Plummer, D., \"An Ethernet Address Resolution Protocol\", RFC\
    \ 826,\n       MIT, November 1982.\n   [3] Datapoint, Corp., \"ARCNET Designer's\
    \ Handbook\", Document Number\n       61610, 2nd Edition, Datapoint Corporation,\
    \ 1988.\n   [4] Novell, Inc., \"ARCNET Packet Header Definition Standard\", Novell,\n\
    \       Inc., November 1989.\n   [5] Prindeville, P., \"A Standard for the Transmission\
    \ of IP Datagrams\n       and ARP Packets over ARCNET Networks\", RFC 1051, McGill\n\
    \       University, March 1988.\n   [6] Finlayson, R., Mann, T., Mogul, J., and\
    \ M. Theimer, \"A Reverse\n       Address Resolution Protocol\", RFC 903, Stanford,\
    \ June 1984.\n   [7] Postel, J., \"Transmission Control Protocol\", RFC 793, DARPA,\n\
    \       September 1981.\n   [8] Mogul, J., Kent, C., Partridge, C., and K. McCloghrie,\
    \ \"IP MTU\n       Discovery Options\", RFC 1063, DEC, BBN, TWG, July 1988.\n\
    \   [9] Reynolds, J., and J. Postel, \"Assigned Numbers\", RFC 1060,\n       USC/Information\
    \ Sciences Institute, March 1990.\n"
- title: Security Considerations
  contents:
  - "Security Considerations\n   Security issues are not discussed in this memo.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Don Provan\n   Novell, Inc.\n   2180 Fortune Drive\n   San\
    \ Jose, California, 95131\n   Phone: (408) 473-8440\n   EMail: donp@Novell.Com\n"
