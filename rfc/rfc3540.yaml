- title: __initial_text__
  contents:
  - "             Robust Explicit Congestion Notification (ECN)\n                \
    \         Signaling with Nonces\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo defines an Experimental Protocol for the Internet\n\
    \   community.  It does not specify an Internet standard of any kind.\n   Discussion\
    \ and suggestions for improvement are requested.\n   Distribution of this memo\
    \ is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2003).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This note describes the Explicit Congestion Notification (ECN)-nonce,\n\
    \   an optional addition to ECN that protects against accidental or\n   malicious\
    \ concealment of marked packets from the TCP sender.  It\n   improves the robustness\
    \ of congestion control by preventing receivers\n   from exploiting ECN to gain\
    \ an unfair share of network bandwidth.\n   The ECN-nonce uses the two ECN-Capable\
    \ Transport (ECT)codepoints in\n   the ECN field of the IP header, and requires\
    \ a flag in the TCP\n   header.  It is computationally efficient for both routers\
    \ and hosts.\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Statement of Intent\n      This specification describes\
    \ an optional addition to Explicit\n      Congestion Notification [RFC3168] improving\
    \ its robustness against\n      malicious or accidental concealment of marked\
    \ packets.  It has not\n      been deployed widely.  One goal of publication as\
    \ an Experimental\n      RFC is to be prudent, and encourage use and deployment\
    \ prior to\n      publication in the standards track.  Another consideration is\
    \ to\n      give time for firewall developers to recognize and accept the\n  \
    \    pattern presented by the nonce.  It is the intent of the Transport\n    \
    \  Area Working Group to re-submit this specification as an IETF\n      Proposed\
    \ Standard in the future after more experience has been\n      gained.\n   The\
    \ correct operation of ECN requires the cooperation of the receiver\n   to return\
    \ Congestion Experienced signals to the sender, but the\n   protocol lacks a mechanism\
    \ to enforce this cooperation.  This raises\n   the possibility that an unscrupulous\
    \ or poorly implemented receiver\n   could always clear ECN-Echo and simply not\
    \ return congestion signals\n   to the sender.  This would give the receiver a\
    \ performance advantage\n   at the expense of competing connections that behave\
    \ properly.  More\n   generally, any device along the path (NAT box, firewall,\
    \ QOS\n   bandwidth shapers, and so forth) could remove congestion marks with\n\
    \   impunity.\n   The above behaviors may or may not constitute a threat to the\n\
    \   operation of congestion control in the Internet.  However, given the\n   central\
    \ role of congestion control, it is prudent to design the ECN\n   signaling loop\
    \ to be robust against as many threats as possible.  In\n   this way, ECN can\
    \ provide a clear incentive for improvement over the\n   prior state-of-the-art\
    \ without potential incentives for abuse.  The\n   ECN-nonce is a simple, efficient\
    \ mechanism to eliminate the potential\n   abuse of ECN.\n   The ECN-nonce enables\
    \ the sender to verify the correct behavior of\n   the ECN receiver and that there\
    \ is no other interference that\n   conceals marked (or dropped) packets in the\
    \ signaling path.  The ECN-\n   nonce protects against both implementation errors\
    \ and deliberate\n   abuse.  The ECN-nonce:\n   -  catches a misbehaving receiver\
    \ with a high probability, and never\n      implicates an innocent receiver.\n\
    \   -  does not change other aspects of ECN, nor does it reduce the\n      benefits\
    \ of ECN for behaving receivers.\n   -  is cheap in both per-packet overhead (one\
    \ TCP header flag) and\n      processing requirements.\n   -  is simple and, to\
    \ the best of our knowledge, not prone to other\n      attacks.\n   We also note\
    \ that use of the ECN-nonce has two additional benefits,\n   even when only drop-tail\
    \ routers are used.  First, packet drops\n   cannot be concealed from the sender.\
    \  Second, it prevents optimistic\n   acknowledgements [Savage], in which TCP\
    \ segments are acknowledged\n   before they have been received.  These benefits\
    \ also serve to\n   increase the robustness of congestion control from attacks.\
    \  We do\n   not elaborate on these benefits in this document.\n   The rest of\
    \ this document describes the ECN-nonce.  We present an\n   overview followed\
    \ by detailed behavior at senders and receivers.\n   The keywords MUST, MUST NOT,\
    \ REQUIRED, SHALL, SHALL NOT, SHOULD,\n   SHOULD NOT, RECOMMENDED, MAY, and OPTIONAL,\
    \ when they appear in this\n   document, are to be interpreted as described in\
    \ [RFC2119].\n"
- title: 2.  Overview
  contents:
  - "2.  Overview\n   The ECN-nonce builds on the existing ECN-Echo and Congestion\
    \ Window\n   Reduced (CWR) signaling mechanism.  Familiarity with ECN [ECN] is\n\
    \   assumed.  For simplicity, we describe the ECN-nonce in one direction\n   only,\
    \ though it is run in both directions in parallel.\n   The ECN protocol for TCP\
    \ remains unchanged, except for the definition\n   of a new field in the TCP header.\
    \  As in [RFC3168], ECT(0) or ECT(1)\n   (ECN-Capable Transport) is set in the\
    \ ECN field of the IP header on\n   outgoing packets.  Congested routers change\
    \ this field to CE\n   (Congestion Experienced).  When TCP receivers notice CE,\
    \ the ECE\n   (ECN-Echo) flag is set in subsequent acknowledgements until receiving\n\
    \   a CWR flag.  The CWR flag is sent on new data whenever the sender\n   reacts\
    \ to congestion.\n   The ECN-nonce adds to this protocol, and enables the receiver\
    \ to\n   demonstrate to the sender that segments being acknowledged were\n   received\
    \ unmarked.  A random one-bit value (a nonce) is encoded in\n   the two ECT codepoints.\
    \  The one-bit sum of these nonces is returned\n   in a TCP header flag, the nonce\
    \ sum (NS) bit.  Packet marking erases\n   the nonce value in the ECT codepoints\
    \ because CE overwrites both ECN\n   IP header bits.  Since each nonce is required\
    \ to calculate the sum,\n   the correct nonce sum implies receipt of only unmarked\
    \ packets.  Not\n   only are receivers prevented from concealing marked packets,\
    \ middle-\n   boxes along the network path cannot unmark a packet without\n  \
    \ successfully guessing the value of the original nonce.\n   The sender can verify\
    \ the nonce sum returned by the receiver to\n   ensure that congestion indications\
    \ in the form of marked (or dropped)\n   packets are not being concealed.  Because\
    \ the nonce sum is only one\n   bit long, senders have a 50-50 chance of catching\
    \ a lying receiver\n   whenever an acknowledgement conceals a mark.  Because each\n\
    \   acknowledgement is an independent trial, cheaters will be caught\n   quickly\
    \ if there are repeated congestion signals.\n   The following paragraphs describe\
    \ aspects of the ECN-nonce protocol\n   in greater detail.\n   Each acknowledgement\
    \ carries a nonce sum, which is the one bit sum\n   (exclusive-or, or parity)\
    \ of nonces over the byte range represented\n   by the acknowledgement.  The sum\
    \ is used because not every packet is\n   acknowledged individually, nor are packets\
    \ acknowledged reliably.  If\n   a sum were not used, the nonce in an unmarked\
    \ packet could be echoed\n   to prove to the sender that the individual packet\
    \ arrived unmarked.\n   However, since these acks are not reliably delivered,\
    \ the sender\n   could not distinguish a lost ACK from one that was never sent\
    \ in\n   order to conceal a marked packet.  The nonce sum prevents the\n   receiver\
    \ from concealing individual marked packets by not\n   acknowledging them.  Because\
    \ the nonce and nonce sum are both one bit\n   quantities, the sum is no easier\
    \ to guess than the individual nonces.\n   We show the nonce sum calculation below\
    \ in Figure 1.\n    Sender             Receiver\n                         initial\
    \ sum = 1\n      -- 1:4 ECT(0)  --> NS = 1 + 0(1:4) = 1(:4)\n      <- ACK 4, NS=1\
    \ ---\n      -- 4:8 ECT(1)  --> NS = 1(:4) + 1(4:8) = 0(:8)\n      <- ACK 8, NS=0\
    \ ---\n      -- 8:12 ECT(1)  -> NS = 0(:8) + 1(8:12) = 1(:12)\n      <- ACK 12,\
    \ NS=1 --\n      -- 12:16 ECT(1) -> NS = 1(:12) + 1(12:16) = 0(:16)\n      <-\
    \ ACK 16, NS=0 --\n   Figure 1: The calculation of nonce sums at the receiver.\n\
    \   After congestion has occurred and packets have been marked or lost,\n   resynchronization\
    \ of the sender and receiver nonce sums is needed.\n   When packets are marked,\
    \ the nonce is cleared, and the sum of the\n   nonces at the receiver will no\
    \ longer match the sum at the sender.\n   Once nonces have been lost, the difference\
    \ between sender and\n   receiver nonce sums is constant until there is further\
    \ loss.  This\n   means that it is possible to resynchronize the sender and receiver\n\
    \   after congestion by having the sender set its nonce sum to that of\n   the\
    \ receiver.  Because congestion indications do not need to be\n   conveyed more\
    \ frequently than once per round trip, the sender\n   suspends checking while\
    \ the CWR signal is being delivered and resets\n   its nonce sum to the receiver's\
    \ when new data is acknowledged.  This\n   has the benefit that the receiver is\
    \ not explicitly involved in the\n   re-synchronization process.  The resynchronization\
    \ process is shown\n   in Figure 2 below.  Note that the nonce sum returned in\
    \ ACK 12 (NS=0)\n   differs from that in the previous example (NS=1), and it continues\
    \ to\n   differ for ACK 16.\n    Sender              Receiver\n              \
    \              initial sum = 1\n      -- 1:4 ECT(0)       -> NS = 1 + 0(1:4) =\
    \ 1(:4)\n      <- ACK 4, NS=1      --\n      -- 4:8 ECT(1) -> CE -> NS = 1(:4)\
    \ + ?(4:8) = 1(:8)\n      <- ACK 8, ECE NS=1  --\n      -- 8:12 ECT(1), CWR ->\
    \ NS = 1(:8) + 1(8:12) = 0(:12)\n      <- ACK 12, NS=0     --\n      -- 12:16\
    \ ECT(1)     -> NS = 0(:12) + 1(12:16) = 1(:16)\n      <- ACK 16, NS=1     --\n\
    \   Figure 2: The calculation of nonce sums at the receiver when a\n      packet\
    \ (4:8) is marked.  The receiver may calculate the wrong\n      nonce sum when\
    \ the original nonce information is lost after a\n      packet is marked.\n  \
    \ Third, we need to reconcile that nonces are sent with packets but\n   acknowledgements\
    \ cover byte ranges.  Acknowledged byte boundaries\n   need not match the transmitted\
    \ boundaries, and information can be\n   retransmitted in packets with different\
    \ byte boundaries.  We discuss\n   the first issue, how a receiver sets a nonce\
    \ when acknowledging part\n   of a segment, in Section 6.1. The second question,\
    \ what nonce to send\n   when retransmitting smaller segments as a large segment,\
    \ has a simple\n   answer: ECN is disabled for retransmissions, so can carry no\
    \ nonce.\n   Because retransmissions are associated with congestion events, nonce\n\
    \   checking is suspended until after CWR is acknowledged and the\n   congestion\
    \ event is over.\n   The next sections describe the detailed behavior of senders,\
    \ routers\n   and receivers, starting with sender transmit behavior, then around\n\
    \   the ECN signaling loop, and finish with sender acknowledgement\n   processing.\n"
- title: 3.  Sender Behavior (Transmit)
  contents:
  - "3.  Sender Behavior (Transmit)\n   Senders manage CWR and ECN-Echo as before.\
    \  In addition, they must\n   place nonces on packets as they are transmitted\
    \ and check the\n   validity of the nonce sums in acknowledgments as they are\
    \ received.\n   This section describes the transmit process.\n   To place a one\
    \ bit nonce value on every ECN-capable IP packet, the\n   sender uses the two\
    \ ECT codepoints: ECT(0) represents a nonce of 0,\n   and ECT(1) a nonce of 1.\
    \  As in ECN, retransmissions are not ECN-\n   capable, so carry no nonce.\n \
    \  The sender maintains a mapping from each packet's end sequence number\n   to\
    \ the expected nonce sum (not the nonce placed in the original\n   transmission)\
    \ in the acknowledgement bearing that sequence number.\n"
- title: 4.  Router Behavior
  contents:
  - "4.  Router Behavior\n   Routers behave as specified in [RFC3168].  By marking\
    \ packets to\n   signal congestion, the original value of the nonce, in ECT(0)\
    \ or\n   ECT(1), is removed.  Neither the receiver nor any other party can\n \
    \  unmark the packet without successfully guessing the value of the\n   original\
    \ nonce.\n"
- title: 5.  Receiver Behavior (Receive and Transmit)
  contents:
  - "5.  Receiver Behavior (Receive and Transmit)\n   ECN-nonce receivers maintain\
    \ the nonce sum as in-order packets arrive\n   and return the current nonce sum\
    \ in each acknowledgement.  Receiver\n   behavior is otherwise unchanged from\
    \ [RFC3168].  Returning the nonce\n   sum is optional, but recommended, as senders\
    \ are allowed to\n   discontinue sending ECN-capable packets to receivers that\
    \ do not\n   support the ECN-nonce.\n   As packets are removed from the queue\
    \ of out-of-order packets to be\n   acknowledged, the nonce is recovered from\
    \ the IP header.  The nonce\n   is added to the current nonce sum as the acknowledgement\
    \ sequence\n   number is advanced for the recent packet.\n   In the case of marked\
    \ packets, one or more nonce values may be\n   unknown to the receiver.  In this\
    \ case the missing nonce values are\n   ignored when calculating the sum (or equivalently\
    \ a value of zero is\n   assumed) and ECN-Echo will be set to signal congestion\
    \ to the sender.\n   Returning the nonce sum corresponding to a given acknowledgement\
    \ is\n   straightforward.  It is carried in a single \"NS\" (Nonce Sum) bit in\n\
    \   the TCP header.  This bit is adjacent to the CWR and ECN-Echo bits,\n   set\
    \ as Bit 7 in byte 13 of the TCP header, as shown below:\n     0   1   2   3 \
    \  4   5   6   7   8   9  10  11  12  13  14  15\n   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n\
    \   |               |           | N | C | E | U | A | P | R | S | F |\n   | Header\
    \ Length | Reserved  | S | W | C | R | C | S | S | Y | I |\n   |             \
    \  |           |   | R | E | G | K | H | T | N | N |\n   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n\
    \   Figure 3: The new definition of bytes 13 and 14 of the TCP Header.\n   The\
    \ initial nonce sum is 1, and is included in the SYN/ACK and ACK of\n   the three\
    \ way TCP handshake.  This allows the other endpoint to infer\n   nonce support,\
    \ but is not a negotiation, in that the receiver of the\n   SYN/ACK need not check\
    \ if NS is set to decide whether to set NS in\n   the subsequent ACK.\n"
- title: 6.  Sender Behavior (Receive)
  contents:
  - "6.  Sender Behavior (Receive)\n   This section completes the description of sender\
    \ behavior by\n   describing how senders check the validity of the nonce sums.\n\
    \   The nonce sum is checked when an acknowledgement of new data is\n   received,\
    \ except during congestion recovery when additional ECN-Echo\n   signals would\
    \ be ignored.  Checking consists of comparing the correct\n   nonce sum stored\
    \ in a buffer to that carried in the acknowledgement,\n   with a correction described\
    \ in the following subsection.\n   If ECN-Echo is not set, the receiver claims\
    \ to have received no\n   marked packets, and can therefore compute and return\
    \ the correct\n   nonce sum.  To conceal a mark, the receiver must successfully\
    \ guess\n   the sum of the nonces that it did not receive, because at least one\n\
    \   packet was marked and the corresponding nonce was erased.  Provided\n   the\
    \ individual nonces are equally likely to be 0 or 1, their sum is\n   equally\
    \ likely to be 0 or 1.  In other words, any guess is equally\n   likely to be\
    \ wrong and has a 50-50 chance of being caught by the\n   sender.  Because each\
    \ new acknowledgement is an independent trial, a\n   cheating receiver is likely\
    \ to be caught after a small number of\n   lies.\n   If ECN-Echo is set, the receiver\
    \ is sending a congestion signal and\n   it is not necessary to check the nonce\
    \ sum.  The congestion window\n   will be halved, CWR will be set on the next\
    \ packet with new data\n   sent, and ECN-Echo will be cleared once the CWR signal\
    \ is received,\n   as in [RFC3168].  During this recovery process, the sum may\
    \ be\n   incorrect because one or more nonces were not received.  This does\n\
    \   not matter during recovery, because TCP invokes congestion mechanisms\n  \
    \ at most once per RTT, whether there are one or more losses during\n   that period.\n"
- title: 6.1.  Resynchronization After Loss or Mark
  contents:
  - "6.1.  Resynchronization After Loss or Mark\n   After recovery, it is necessary\
    \ to re-synchronize the sender and\n   receiver nonce sums so that further acknowledgments\
    \ can be checked.\n   When the receiver's sum is incorrect, it will remain incorrect\
    \ until\n   further loss.\n   This leads to a simple re-synchronization mechanism\
    \ where the sender\n   resets its nonce sum to that of the receiver when it receives\
    \ an\n   acknowledgment for new data sent after the congestion window was\n  \
    \ reduced.  When responding to explicit congestion signals, this will\n   be the\
    \ first acknowledgement without the ECN-Echo flag set: the\n   acknowledgement\
    \ of the packet containing the CWR flag.\n    Sender              Receiver\n \
    \                            initial sum = 1\n      -- 1:4 ECT(0)       -> NS\
    \ = 1 + 0(1:4) = 1(:4)\n      <- ACK 4, NS=1      --\n      -- 4:8 ECT(1) -> LOST\n\
    \      -- 8:12 ECT(1)      -> nonce sum calculation deferred\n               \
    \                until in-order data received\n      <- ACK 4, NS=0      --\n\
    \      -- 12:16 ECT(1)     -> nonce sum calculation deferred\n      <- ACK 4,\
    \ NS=0      --\n      -- 4:8 retransmit   -> NS = 1(:4) + ?(4:8) +\n         \
    \                         1(8:12) + 1(12:16) = 1(:16)\n      <- ACK 16, NS=1 \
    \    --\n      -- 16:20 ECT(1) CWR ->\n      <- ACK 20, NS=0     -- NS = 1(:16)\
    \ + 1(16:20) = 0(:20)\n   Figure 4: The calculation of nonce sums at the receiver\
    \ when a\n      packet is lost, and resynchronization after loss.  The nonce sum\n\
    \      is not changed until the cumulative acknowledgement is advanced.\n   In\
    \ practice, resynchronization can be accomplished by storing a bit\n   that has\
    \ the value one if the expected nonce sum stored by the sender\n   and the received\
    \ nonce sum in the acknowledgement of CWR differ, and\n   zero otherwise.  This\
    \ synchronization offset bit can then be used in\n   the comparison between expected\
    \ nonce sum and received nonce sum.\n   The sender should ignore the nonce sum\
    \ returned on any\n   acknowledgements bearing the ECN-echo flag.\n   When an\
    \ acknowledgment covers only a portion of a segment, such as\n   when a middlebox\
    \ resegments at the TCP layer instead of fragmenting\n   IP packets, the sender\
    \ should accept the nonce sum expected at the\n   next segment boundary.  In other\
    \ words, an acknowledgement covering\n   part of an original segment will include\
    \ the nonce sum expected when\n   the entire segment is acknowledged.\n   Finally,\
    \ in ECN, senders can choose not to indicate ECN capability on\n   some packets\
    \ for any reason.  An ECN-nonce sender must resynchronize\n   after sending such\
    \ ECN-incapable packets, as though a CWR had been\n   sent with the first new\
    \ data after the ECN-incapable packets.  The\n   sender loses protection for any\
    \ unacknowledged packets until\n   resynchronization occurs.\n"
- title: 6.2.  Sender Behavior - Incorrect Nonce Received
  contents:
  - "6.2.  Sender Behavior - Incorrect Nonce Received\n   The sender's response to\
    \ an incorrect nonce is a matter of policy.\n   It is separate from the checking\
    \ mechanism and does not need to be\n   handled uniformly by senders.  Further,\
    \ checking received nonce sums\n   at all is optional, and may be disabled.\n\
    \   If the receiver has never sent a non-zero nonce sum, the sender can\n   infer\
    \ that the receiver does not understand the nonce, and rate limit\n   the connection,\
    \ place it in a lower-priority queue, or cease setting\n   ECT in outgoing segments.\n\
    \   If the received nonce sum has been set in a previous acknowledgement,\n  \
    \ the sender might infer that a network device has interfered with\n   correct\
    \ ECN signaling between ECN-nonce supporting endpoints.  The\n   minimum response\
    \ to an incorrect nonce is the same as the response to\n   a received ECE.  However,\
    \ to compensate for hidden congestion\n   signals, the sender might reduce the\
    \ congestion window to one segment\n   and cease setting ECT in outgoing segments.\
    \  An incorrect nonce sum\n   is a sign of misbehavior or error between ECN-nonce\
    \ supporting\n   endpoints.\n"
- title: 6.2.1.  Using the ECN-nonce to Protect Against Other Misbehaviors
  contents:
  - "6.2.1.  Using the ECN-nonce to Protect Against Other Misbehaviors\n   The ECN-nonce\
    \ can provide robustness beyond checking that marked\n   packets are signaled\
    \ to the sender.  It also ensures that dropped\n   packets cannot be concealed\
    \ from the sender (because their nonces\n   have been lost).  Drops could potentially\
    \ be concealed by a faulty\n   TCP implementation, certain attacks, or even a\
    \ hypothetical TCP\n   accelerator.  Such an accelerator could gamble that it\
    \ can either\n   successfully \"fast start\" to a preset bandwidth quickly, retry\
    \ with\n   another connection, or provide reliability at the application level.\n\
    \   If robustness against these faults is also desired, then the ECN-\n   nonce\
    \ should not be disabled.  Instead, reducing the congestion\n   window to one,\
    \ or using a low-priority queue, would penalize faulty\n   operation while providing\
    \ continued checking.\n   The ECN-nonce can also detect misbehavior in Eifel [Eifel],\
    \ a\n   recently proposed mechanism for removing the retransmission ambiguity\n\
    \   to improve TCP performance.  A misbehaving receiver might claim to\n   have\
    \ received only original transmissions to convince the sender to\n   undo congestion\
    \ actions.  Since retransmissions are sent without ECT,\n   and thus no nonce,\
    \ returning the correct nonce sum confirms that only\n   original transmissions\
    \ were received.\n"
- title: 7.  Interactions
  contents:
  - '7.  Interactions

    '
- title: 7.1.  Path MTU Discovery
  contents:
  - "7.1.  Path MTU Discovery\n   As described in RFC3168, use of the Don't Fragment\
    \ bit with ECN is\n   recommended.  Receivers that receive unmarked fragments\
    \ can\n   reconstruct the original nonce to conceal a marked fragment.  The\n\
    \   ECN-nonce cannot protect against misbehaving receivers that conceal\n   marked\
    \ fragments, so some protection is lost in situations where Path\n   MTU discovery\
    \ is disabled.\n   When responding to a small path MTU, the sender will retransmit\
    \ a\n   smaller frame in place of a larger one.  Since these smaller packets\n\
    \   are retransmissions, they will be ECN-incapable and bear no nonce.\n   The\
    \ sender should resynchronize on the first newly transmitted\n   packet.\n"
- title: 7.2.  SACK
  contents:
  - "7.2.  SACK\n   Selective acknowledgements allow receivers to acknowledge out\
    \ of\n   order segments as an optimization.  It is not necessary to modify the\n\
    \   selective acknowledgment option to fit per-range nonce sums, because\n   SACKs\
    \ cannot be used by a receiver to hide a congestion signal.  The\n   nonce sum\
    \ corresponds only to the data acknowledged by the cumulative\n   acknowledgement.\n"
- title: 7.3.  IPv6
  contents:
  - "7.3.  IPv6\n   Although the IPv4 header is protected by a checksum, this is not\
    \ the\n   case with IPv6, making undetected bit errors in the IPv6 header more\n\
    \   likely.  Bit errors that compromise the integrity of the congestion\n   notification\
    \ fields may cause an incorrect nonce to be received, and\n   an incorrect nonce\
    \ sum to be returned.\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   The random one-bit nonces need not be from a\
    \ cryptographic-quality\n   pseudo-random number generator.  A strong random number\
    \ generator\n   would compromise performance.  Consequently, the sequence of random\n\
    \   nonces should not be used for any other purpose.\n   Conversely, the pseudo-random\
    \ bit sequence should not be generated by\n   a linear feedback shift register\
    \ [Schneier], or similar scheme that\n   would allow an adversary who has seen\
    \ several previous bits to infer\n   the generation function and thus its future\
    \ output.\n   Although the ECN-nonce protects against concealment of congestion\n\
    \   signals and optimistic acknowledgement, it provides no additional\n   protection\
    \ for the integrity of the connection.\n"
- title: 9.  IANA Considerations
  contents:
  - "9.  IANA Considerations\n   The Nonce Sum (NS) is carried in a reserved TCP header\
    \ bit that must\n   be allocated.  This document describes the use of Bit 7, adjacent\
    \ to\n   the other header bits used by ECN.\n   The codepoint for the NS flag\
    \ in the TCP header is specified by the\n   Standards Action of this RFC, as is\
    \ required by RFC 2780.  The IANA\n   has added the following to the registry\
    \ for \"TCP Header Flags\":\n   RFC 3540 defines bit 7 from the Reserved field\
    \ to be used for the\n   Nonce Sum, as follows:\n     0   1   2   3   4   5  \
    \ 6   7   8   9  10  11  12  13  14  15\n   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n\
    \   |               |           | N | C | E | U | A | P | R | S | F |\n   | Header\
    \ Length | Reserved  | S | W | C | R | C | S | S | Y | I |\n   |             \
    \  |           |   | R | E | G | K | H | T | N | N |\n   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n\
    \   TCP Header Flags\n   Bit      Name                                    Reference\n\
    \   ---      ----                                    ---------\n    7        NS\
    \ (Nonce Sum)                         [RFC 3540]\n"
- title: 10.  Conclusion
  contents:
  - "10.  Conclusion\n   The ECN-nonce is a simple modification to the ECN signaling\
    \ mechanism\n   that improves ECN's robustness by preventing receivers from\n\
    \   concealing marked (or dropped) packets.  The intent of this work is\n   to\
    \ help improve the robustness of congestion control in the Internet.\n   The modification\
    \ retains the character and simplicity of existing ECN\n   signaling.  It is also\
    \ practical for deployment in the Internet.  It\n   uses the ECT(0) and ECT(1)\
    \ codepoints and one TCP header flag (as\n   well as CWR and ECN-Echo) and has\
    \ simple processing rules.\n"
- title: 11.  References
  contents:
  - "11.  References\n   [ECN]      \"The ECN Web Page\", URL\n              \"http://www.icir.org/floyd/ecn.html\"\
    .\n   [RFC3168]  Ramakrishnan, K., Floyd, S. and D. Black, \"The addition of\n\
    \              explicit congestion notification (ECN) to IP\", RFC 3168,\n   \
    \           September 2001.\n   [Eifel]    R. Ludwig and R. Katz. The Eifel Algorithm:\
    \ Making TCP\n              Robust Against Spurious Retransmissions. Computer\n\
    \              Communications Review, January, 2000.\n   [B97]      Bradner, S.,\
    \ \"Key words for use in RFCs to Indicate\n              Requirement Levels\"\
    , BCP 14, RFC 2119, March 1997.\n   [Savage]   S. Savage, N. Cardwell, D. Wetherall,\
    \ T. Anderson.  TCP\n              congestion control with a misbehaving receiver.\
    \ SIGCOMM\n              CCR, October 1999.\n   [Schneier] Bruce Schneier. Applied\
    \ Cryptography, 2nd ed., 1996\n"
- title: 12.  Acknowledgements
  contents:
  - "12.  Acknowledgements\n   This note grew out of research done by Stefan Savage,\
    \ David Ely,\n   David Wetherall, Tom Anderson and Neil Spring.  We are very grateful\n\
    \   for feedback and assistance from Sally Floyd.\n"
- title: 13.  Authors' Addresses
  contents:
  - "13.  Authors' Addresses\n   Neil Spring\n   EMail: nspring@cs.washington.edu\n\
    \   David Wetherall\n   Department of Computer Science and Engineering, Box 352350\n\
    \   University of Washington\n   Seattle WA 98195-2350\n   EMail: djw@cs.washington.edu\n\
    \   David Ely\n   Computer Science and Engineering, 352350\n   University of Washington\n\
    \   Seattle, WA 98195-2350\n   EMail: ely@cs.washington.edu\n"
- title: 14.  Full Copyright Statement
  contents:
  - "14.  Full Copyright Statement\n   Copyright (C) The Internet Society (2003).\
    \  All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
