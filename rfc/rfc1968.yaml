- title: __initial_text__
  contents:
  - '               The PPP Encryption Control Protocol (ECP)

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   The Point-to-Point Protocol (PPP) [1] provides a standard method\
    \ for\n   transporting multi-protocol datagrams over point-to-point links.  PPP\n\
    \   also defines an extensible Link Control Protocol.\n   This document defines\
    \ a method for negotiating data encryption over\n   PPP links.\n"
- title: Conventions
  contents:
  - "Conventions\n   The following language conventions are used in the items of\n\
    \   specification in this document:\n   o  MUST -- the item is an absolute requirement\
    \ of the specification.\n      MUST is only used where it is actually required\
    \ for interopera-\n      tion, not to try to impose a particular method on implementors\n\
    \      where not required for interoperability.\n   o  SHOULD -- the item should\
    \ be followed for all but exceptional cir-\n      cumstances.\n   o  MAY or optional\
    \ -- the item is truly optional and may be followed\n      or ignored according\
    \ to the needs of the implementor.\n      The words \"should\" and \"may\" are\
    \ also used, in lower case, in\n      their more ordinary senses.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n      1. Introduction ...........................................\
    \  2\n      2. Encryption Control Protocol (ECP) ......................  2\n \
    \         2.1 Sending Encrypted Datagrams .......................  3\n      3.\
    \ Additional Packets .....................................  4\n          3.1 Reset-Request\
    \ and Reset-Ack .......................  5\n      4. ECP Configuration Options\
    \ ..............................  6\n          4.1 Proprietary Encryption OUI\
    \ ........................  7\n          4.2 Publicly Available Encryption Types\
    \ ...............  8\n          4.3 Negotiating an Encryption Algorithm ...............\
    \  9\n      5. Security Considerations ................................ 10\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   In order to establish communications over a PPP link, each\
    \ end of the\n   link must first send LCP packets to configure and test the data\
    \ link\n   during Link Establishment phase.  After the link has been\n   established,\
    \ optional facilities may be negotiated as needed.\n   One such facility is data\
    \ encryption.  A wide variety of encryption\n   methods may be negotiated, although\
    \ typically only one method is used\n   in each direction of the link.\n   A different\
    \ encryption algorithm may be negotiated in each direction,\n   for speed, cost,\
    \ memory or other considerations.\n"
- title: 2. Encryption Control Protocol (ECP)
  contents:
  - "2. Encryption Control Protocol (ECP)\n   The Encryption Control Protocol (ECP)\
    \ is responsible for configuring\n   and enabling data encryption algorithms on\
    \ both ends of the point-\n   to-point link.\n   ECP uses the same packet exchange\
    \ mechanism as the Link Control\n   Protocol (LCP).  ECP packets may not be exchanged\
    \ until PPP has\n   reached the Network-Layer Protocol phase.  ECP packets received\n\
    \   before this phase is reached should be silently discarded.\n   The Encryption\
    \ Control Protocol is exactly the same as LCP [1] with\n   the following exceptions:\n\
    \      Frame Modifications\n         The packet may utilise any modifications\
    \ to the basic frame\n         format which have been negotiated during the Link\
    \ Establishment\n         phase.\n      Data Link Layer Protocol Field\n     \
    \    Exactly one ECP packet is encapsulated in the PPP Information\n         field,\
    \ where the PPP Protocol field indicates type hex 8053\n         (Encryption Control\
    \ Protocol).\n         When individual link data encryption is used in a multiple\
    \ link\n         connection to a single destination [2], the PPP Protocol field\n\
    \         indicates type hex 8055 (Individual link Encryption Control\n      \
    \   Protocol).\n      Code field\n         ECP uses (decimal) codes 1 through\
    \ 7 (Configure-Request,\n         Configure-Ack, Configure-Nak, Configure-Reject,\
    \ Terminate-\n         Request, Terminate-Ack and Code-Reject); And may also use\
    \ code\n         14 (Reset-Request) and code 15 (Reset-Ack).  Other codes should\n\
    \         be treated as unrecognised and should result in Code-Rejects.\n    \
    \  Negotiation\n         ECP packets may not be exchanged until PPP has reached\
    \ the\n         Network-Layer Protocol phase.  An implementation should be\n \
    \        prepared to wait for Authentication and Link Quality\n         Determination\
    \ to finish before timing out waiting for a\n         Configure-Ack or other response.\n\
    \         An implementation MUST NOT transmit data until ECP negotiation\n   \
    \      has completed successfully.  If ECP negotiation is not\n         successful\
    \ the link SHOULD be brought down.\n      Configuration Option Types\n       \
    \  ECP has a distinct set of Configuration Options.\n"
- title: 2.1 Sending Encrypted Datagrams
  contents:
  - "2.1 Sending Encrypted Datagrams\n   Before any encrypted packets may be communicated,\
    \ PPP must reach the\n   Network-Layer Protocol phase, and the Encryption Control\
    \ Protocol\n   must reach the Opened state.\n   An encrypted packet is encapsulated\
    \ in the PPP Information field,\n   where the PPP Protocol field indicates type\
    \ hex 0053 (Encrypted\n   datagram).\n   When using multiple PPP links to a single\
    \ destination [2], there are\n   two methods of employing data encryption:\n \
    \  o  The first method is to encrypt the data prior to sending it out\n      through\
    \ the multiple links.\n      The PPP Protocol field MUST indicate type hex 0053.\n\
    \   o  The second is to treat each link as a separate connection, that\n     \
    \ may or may not have encryption enabled.\n      On links which have negotiated\
    \ encryption, the PPP Protocol field\n      MUST be type hex 0055 (Individual\
    \ link encrypted datagram).\n   Only one encryption algorithm in each direction\
    \ is in use at a time,\n   and that is negotiated prior to sending the first encrypted\
    \ frame.\n   The PPP Protocol field of the encrypted datagram indicates that the\n\
    \   frame is encrypted, but not the algorithm with which it was\n   encrypted.\n\
    \   The maximum length of an encrypted packet transmitted over a PPP link\n  \
    \ is the same as the maximum length of the Information field of a PPP\n   encapsulated\
    \ packet.  If the encryption algorithm is likely to\n   increase the size of the\
    \ message beyond that, multilink should also\n   be negotiated to allow fragmentation\
    \ of the frames (even if only\n   using a single link).\n   If the encryption\
    \ algorithm carries history between frames, the\n   encryption algorithm must\
    \ supply a way of determining if it is\n   passing data reliably, or it must require\
    \ the use of a reliable\n   transport such as LAPB [3].\n   Compression may also\
    \ be negotiated using the Compression Control\n   Protocol [5].  To ensure interoperability,\
    \ plain text MUST be:\n   o  First compressed.\n   o  Then encrypted.\n   This\
    \ order has been chosen since it should result in smaller output\n   and more\
    \ secure encryption.\n"
- title: 3. Additional Packets
  contents:
  - "3. Additional Packets\n   The Packet format and basic facilities are already\
    \ defined for LCP\n   [1].\n   Up-to-date values of the ECP Code field are specified\
    \ in the most\n   recent \"Assigned Numbers\" RFC [4].  This specification concerns\
    \ the\n   following values:\n         14      Reset-Request\n         15     \
    \ Reset-Ack\n"
- title: 3.1 Reset-Request and Reset-Ack
  contents:
  - "3.1 Reset-Request and Reset-Ack\n   Description\n      ECP includes Reset-Request\
    \ and Reset-Ack Codes in order to provide\n      a mechanism for indicating a\
    \ decryption failure in one direction\n      of a decrypted link without affecting\
    \ traffic in the other\n      direction.  Some encryption algorithms may not require\
    \ this\n      mechanism.\n      Individual algorithms need to specify a mechanism\
    \ for determining\n      how to detect a decryption failure.  On initial detection\
    \ of a\n      decryption failure, an ECP implementation SHOULD transmit an ECP\n\
    \      packet with the Code field set to 14 (Reset-Request).  The Data\n     \
    \ field may be filled with any desired data.\n      Once a Reset-Request has been\
    \ sent, any encrypted packets received\n      are discarded.  Further Reset-Requests\
    \ MAY be sent with the same\n      Identifier, until a valid Reset-Ack is received.\n\
    \      When the link is busy, one decryption error is usually followed by\n  \
    \    several more before the Reset-Ack can be received.  It is\n      undesirable\
    \ to transmit Reset-Requests more frequently than the\n      round-trip-time of\
    \ the link, since this will result in redundant\n      Reset-Requests and Reset-Acks\
    \ being transmitted and processed.\n      The receiver MAY elect to limit transmission\
    \ of Reset-Requests (to\n      say one per second) while a Reset-Ack is outstanding.\n\
    \      Upon reception of a Reset-Request, the transmitting encrypter is\n    \
    \  reset to an initial state.  An ECP packet MUST be transmitted with\n      the\
    \ Code field set to 15 (Reset-Ack), the Identifier field copied\n      from the\
    \ Reset-Request packet, and the Data field filled with any\n      desired data.\n\
    \      On receipt of a Reset-Ack, the receiving decrypter is reset to an\n   \
    \   initial state.  Since there may be several Reset-Acks in the pipe,\n     \
    \ the decrypter MUST be reset for each Reset-Ack which matches the\n      currently\
    \ expected identifier.\n      A summary of the Reset-Request and Reset-Ack packet\
    \ formats is\n      shown below.  The fields are transmitted from left to right.\n\
    \        0                   1                   2                   3\n     \
    \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |     Code      |  Identifier   |            Length             |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |    Data ...\n       +-+-+-+-+\n   Code\n      14 for Reset-Request;\n  \
    \    15 for Reset-Ack.\n   Identifier\n      On transmission, the Identifier field\
    \ MUST be changed whenever the\n      content of the Data field changes, and whenever\
    \ a valid reply has\n      been received for a previous request.  For retransmissions,\
    \ the\n      Identifier SHOULD remain unchanged.\n      On reception, the Identifier\
    \ field of the Reset-Request is copied\n      into the Identifier field of the\
    \ Reset-Ack packet.\n   Data\n      The Data field is zero or more octets and\
    \ contains uninterpreted\n      data for use by the sender.  The data may consist\
    \ of any binary\n      value and may be of any length from zero to the peer's\
    \ established\n      MRU minus four.\n"
- title: 4. ECP Configuration Options
  contents:
  - "4. ECP Configuration Options\n   ECP Configuration Options allow negotiation\
    \ of encryption algorithms\n   and their parameters.  ECP uses the same Configuration\
    \ Option format\n   defined for LCP [1], with a separate set of Options.\n   Configuration\
    \ Options, in this protocol, indicate algorithms that the\n   receiver is willing\
    \ or able to use to decrypt data sent by the\n   sender.  Systems may offer to\
    \ accept several algorithms, and\n   negotiate a single one that will be used.\n\
    \   Up-to-date values of the ECP Option Type field are specified in the\n   most\
    \ recent \"Assigned Numbers\" RFC [4].  Current values are assigned\n   as follows:\n\
    \         ECP Option      Encryption type\n         0               OUI\n    \
    \     1               DESE\n   All compliant ECP implementations SHOULD implement\
    \ ECP option 1 - the\n   PPP DES Encryption Protocol (DESE) [6].\n   Vendors who\
    \ want to use proprietary encryption MAY use the OUI\n   mechanism to negotiate\
    \ these without recourse to requesting an\n   assigned option number from the\
    \ Internet Assigned Numbers Authority.\n   All other encryption options are registered\
    \ by IANA.  At the time of\n   writing only DESE (option 1) is registered.  Other\
    \ registered options\n   may be found by referring to future versions of the Assigned\
    \ Numbers\n   RFC.\n"
- title: 4.1 Proprietary Encryption OUI
  contents:
  - "4.1 Proprietary Encryption OUI\n   Description\n      This Configuration Option\
    \ provides a way to negotiate the use of a\n      proprietary encryption protocol.\n\
    \      Vendor's encryption protocols are distinguished from each other by\n  \
    \    means of an Organisationally Unique Identifier (OUI), namely the\n      first\
    \ three octets of a Vendor's Ethernet address assigned by IEEE\n      802.\n \
    \     Since the first matching encryption will be used, it is\n      recommended\
    \ that any known OUI encryption options be transmitted\n      first, before the\
    \ common options are used.\n      Before accepting this option, the implementation\
    \ must verify that\n      the OUI identifies a proprietary algorithm that the\
    \ implementation\n      can decrypt, and that any vendor specific negotiation\
    \ values are\n      fully understood.\n      A summary of the Proprietary Encryption\
    \ OUI Configuration Option\n      format is shown below.  The fields are transmitted\
    \ from left to\n      right.\n       0                   1                   2\
    \                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3\
    \ 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |     Type      |    Length     |       OUI ...\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \            OUI       |    Subtype    |  Values...\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\n\
    \   Type\n       0\n   Length\n      >= 6\n   IEEE OUI\n      The IEEE OUI is\
    \ the most significant three octets of an Ethernet\n      Physical Address, assigned\
    \ to the vendor by IEEE 802.  This\n      identifies the option as being proprietary\
    \ to the indicated\n      vendor.  The bits within the octet are in canonical\
    \ order, and the\n      most significant octet is transmitted first.\n   Subtype\n\
    \      This field is specific to each OUI, and indicates an encryption\n     \
    \ type for that OUI.  There is no standardisation for this field.\n      Each\
    \ OUI implements its own values.\n   Values\n      This field is zero or more\
    \ octets, and contains additional data as\n      determined by the vendor's encryption\
    \ protocol.\n"
- title: 4.2 Publicly Available Encryption Types
  contents:
  - "4.2 Publicly Available Encryption Types\n   Description\n      These Configuration\
    \ Options provide a way to negotiate the use of\n      a publicly defined encryption\
    \ algorithm.\n      These protocols should be made available to interested parties,\n\
    \      but may have certain licencing or export restrictions associated\n    \
    \  with them.  For additional information, refer to the encryption\n      protocol\
    \ documents that define each of the encryption types.\n      A summary of the\
    \ Encryption Type Configuration Option format is\n      shown below.  The fields\
    \ are transmitted from left to right.\n       0                   1          \
    \         2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8\
    \ 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |     Type      |    Length     |  Values...\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\n\
    \    Type\n       1 to 254, indicating the encryption protocol option\n      \
    \ being negotiated.  DESE [6] is option type 1.  Refer to the\n       latest Assigned\
    \ Numbers RFC for other encryption protocols.\n    Length\n       >= 2\n   Values\n\
    \      This field is zero or more octets, and contains additional data as\n  \
    \    determined by the encryption protocol.\n"
- title: 4.3 Negotiating an Encryption Algorithm
  contents:
  - "4.3 Negotiating an Encryption Algorithm\n   ECP uses LCP option negotiation techniques\
    \ to negotiate encryption\n   algorithms.  In contrast with most other LCP or\
    \ NCP negotiation of\n   multiple options, ECP negotiation is expected to converge\
    \ on a single\n   mutually agreeable option (encryption algorithm) - or none.\n\
    \   Encryption SHOULD be negotiated in both directions, but the\n   algorithms\
    \ MAY be different.\n   An implementation willing to decrypt using a particular\
    \ encryption\n   algorithm (or one of a set of algorithms) offers the algorithm(s)\
    \ as\n   an option (or options) in an ECP Configure-Request - call this end\n\
    \   the Decrypter; call the peer the Encrypter.\n   A Decrypter supporting more\
    \ than one encryption algorithm may send a\n   Configure-Request containing either:\n\
    \   o  an ordered list of options, with the most-preferred encryption\n      algorithm\
    \ coming first.\n   o  Or may just offer its preferred (not already Rejected)\
    \ option.\n   An Encrypter wishing to accept the first option (of several) MAY\n\
    \   Configure-Ack ALL Options to indicate complete acceptance of the\n   first-listed,\
    \ preferred, algorithm.\n   Otherwise, if the Encrypter does not recognise - or\
    \ is unwilling to\n   support - an option it MUST send a Configure-Reject for\
    \ that option.\n   Where more than one option is offered, the Encrypter SHOULD\n\
    \   Configure-Reject all but a single preferred option.\n   If the Encrypter Configure-Rejects\
    \ all offered ECP options - and the\n   Decrypter has no further (non-rejected)\
    \ options it can offer in a\n   Configure-Request - the Encrypter SHOULD take\
    \ the link down.\n   If the Encrypter recognises an option, but it is not acceptable\
    \ due\n   to values in the request (or optional parameters not in the request),\n\
    \   it MUST send a Configure-Nak with the option modified appropriately.\n   The\
    \ Configure-Nak MUST contain only those options that will be\n   acceptable. \
    \ The Decrypter SHOULD send a new Configure-Request with\n   only the single preferred\
    \ option, adjusted as specified in the\n   Configure-Nak.\n"
- title: 5. Security Considerations
  contents:
  - "5. Security Considerations\n   Negotiation of encryption using PPP is designed\
    \ to provide protection\n   against eavesdropping on that link.  The strength\
    \ of the protection\n   is dependent on the encryption algorithm used and the\
    \ care with which\n   any 'secret' used by the encryption algorithm is protected.\n\
    \   It must be recognised that complete security can only be obtained\n   through\
    \ end-to-end security between hosts.\n"
- title: References
  contents:
  - "References\n   [1]  Simpson, W., Editor; \"The Point-to-Point Protocol (PPP)\"\
    , STD\n        51, RFC 1661, Daydreamer, July 1994.\n   [2]  Sklower, K., Lloyd,\
    \ B., McGregor, G. and and D. Carr, \"The PPP\n        Multilink Protocol (MP)\"\
    , RFC 1717, University of California,\n        Berkeley, November 1994.\n   [3]\
    \  Rand, D., \"PPP Reliable Transmission\", RFC 1663, Novell, July\n        1994.\n\
    \   [4]  Reynolds, J., and Postel, J.; \"ASSIGNED NUMBERS\", STD 2,\n        RFC\
    \ 1700, USC/Information Sciences Institute, October 1994.\n   [5]  Rand, D., \"\
    The PPP Compression Control Protocol (CCP)\", RFC\n        1962, Novell, June\
    \ 1996.\n   [6]  Sklower, K., and G. Meyer, \"The PPP DES Encryption Protocol\n\
    \        (DESE)\", RFC 1969, University of California, Berkeley, June\n      \
    \  1996.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   The style and approach of this proposal owes much to the\
    \ work on the\n   Compression CP [5].\n"
- title: Chair's Address
  contents:
  - "Chair's Address\n   The working group can be contacted via the current chair:\n\
    \   Karl Fox\n   Ascend Communications\n   3518 Riverside Drive, Suite 101\n \
    \  Columbus, Ohio 43221\n   EMail: karl@ascend.com\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Gerry Meyer\n   Spider Systems\n   Stanwell Street\n   Edinburgh\
    \ EH6 5NG\n   Scotland, UK\n   Phone: (UK) 131 554 9424\n   Fax:   (UK) 131 554\
    \ 0649\n   EMail: gerry@spider.co.uk\n"
