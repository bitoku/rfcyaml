- title: __initial_text__
  contents:
  - ''
- title: Using the Encapsulating Security Payload (ESP) Transport Format with the
  contents:
  - "Using the Encapsulating Security Payload (ESP) Transport Format with the\n  \
    \                    Host Identity Protocol (HIP)\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo defines an Experimental Protocol for the Internet\n\
    \   community.  It does not specify an Internet standard of any kind.\n   Discussion\
    \ and suggestions for improvement are requested.\n   Distribution of this memo\
    \ is unlimited.\n"
- title: IESG Note
  contents:
  - "IESG Note\n   The following issues describe IESG concerns about this document.\
    \  The\n   IESG expects that these issues will be addressed when future versions\n\
    \   of HIP are designed.\n   In case of complex Security Policy Databases (SPDs)\
    \ and the co-\n   existence of HIP and security-related protocols such as IKE,\n\
    \   implementors may encounter conditions that are unspecified in these\n   documents.\
    \  For example, when the SPD defines an IP address subnet to\n   be protected\
    \ and a HIP host is residing in that IP address area,\n   there is a possibility\
    \ that the communication is encrypted multiple\n   times.  Readers are advised\
    \ to pay special attention when running HIP\n   with complex SPD settings.  Future\
    \ specifications should clearly\n   define when multiple encryption is intended,\
    \ and when it should be\n   avoided.\n"
- title: Abstract
  contents:
  - "Abstract\n   This memo specifies an Encapsulated Security Payload (ESP) based\n\
    \   mechanism for transmission of user data packets, to be used with the\n   Host\
    \ Identity Protocol (HIP).\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  3\n   2.  Conventions Used in This Document  . . . . . . . . .\
    \ . . . . .  3\n   3.  Using ESP with HIP . . . . . . . . . . . . . . . . . .\
    \ . . . .  4\n     3.1.  ESP Packet Format  . . . . . . . . . . . . . . . . .\
    \ . . .  4\n     3.2.  Conceptual ESP Packet Processing . . . . . . . . . . .\
    \ . .  4\n       3.2.1.  Semantics of the Security Parameter Index (SPI)  . .\
    \ .  5\n     3.3.  Security Association Establishment and Maintenance . . . .\
    \  6\n       3.3.1.  ESP Security Associations  . . . . . . . . . . . . . .  6\n\
    \       3.3.2.  Rekeying . . . . . . . . . . . . . . . . . . . . . . .  6\n  \
    \     3.3.3.  Security Association Management  . . . . . . . . . . .  7\n    \
    \   3.3.4.  Security Parameter Index (SPI) . . . . . . . . . . . .  7\n      \
    \ 3.3.5.  Supported Transforms . . . . . . . . . . . . . . . . .  7\n       3.3.6.\
    \  Sequence Number  . . . . . . . . . . . . . . . . . . .  8\n       3.3.7.  Lifetimes\
    \ and Timers . . . . . . . . . . . . . . . . .  8\n     3.4.  IPsec and HIP ESP\
    \ Implementation Considerations  . . . . .  8\n   4.  The Protocol  . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . 9\n     4.1.  ESP in HIP  . . . . .\
    \ . . . . . . . . . . . . . . . . . . . 9\n       4.1.1.  Setting Up an ESP Security\
    \ Association  . . . . . . . . 9\n       4.1.2.  Updating an Existing ESP SA \
    \ . . . . . . . . . . . . . 10\n   5.  Parameter and Packet Formats . . . . .\
    \ . . . . . . . . . . . . 10\n     5.1.  New Parameters . . . . . . . . . . .\
    \ . . . . . . . . . . . 11\n       5.1.1.  ESP_INFO . . . . . . . . . . . . .\
    \ . . . . . . . . . . 11\n       5.1.2.  ESP_TRANSFORM  . . . . . . . . . . .\
    \ . . . . . . . . . 13\n       5.1.3.  NOTIFY Parameter . . . . . . . . . . .\
    \ . . . . . . . . 14\n     5.2.  HIP ESP Security Association Setup . . . . .\
    \ . . . . . . . 14\n       5.2.1.  Setup During Base Exchange . . . . . . . .\
    \ . . . . . . 14\n     5.3.  HIP ESP Rekeying . . . . . . . . . . . . . . . .\
    \ . . . . . 16\n       5.3.1.  Initializing Rekeying  . . . . . . . . . . . .\
    \ . . . . 16\n       5.3.2.  Responding to the Rekeying Initialization  . . .\
    \ . . . 17\n     5.4.  ICMP Messages  . . . . . . . . . . . . . . . . . . . .\
    \ . . 17\n       5.4.1.  Unknown SPI  . . . . . . . . . . . . . . . . . . . .\
    \ . 17\n   6.  Packet Processing  . . . . . . . . . . . . . . . . . . . . . .\
    \ 18\n     6.1.  Processing Outgoing Application Data . . . . . . . . . . . 18\n\
    \     6.2.  Processing Incoming Application Data . . . . . . . . . . . 19\n  \
    \   6.3.  HMAC and SIGNATURE Calculation and Verification  . . . . . 19\n    \
    \ 6.4.  Processing Incoming ESP SA Initialization (R1) . . . . . . 19\n     6.5.\
    \  Processing Incoming Initialization Reply (I2)  . . . . . . 20\n     6.6.  Processing\
    \ Incoming ESP SA Setup Finalization (R2) . . . . 20\n     6.7.  Dropping HIP\
    \ Associations  . . . . . . . . . . . . . . . . 20\n     6.8.  Initiating ESP\
    \ SA Rekeying . . . . . . . . . . . . . . . . 20\n     6.9.  Processing Incoming\
    \ UPDATE Packets . . . . . . . . . . . . 22\n       6.9.1.  Processing UPDATE\
    \ Packet: No Outstanding Rekeying\n               Request  . . . . . . . . . .\
    \ . . . . . . . . . . . . . 22\n     6.10. Finalizing Rekeying  . . . . . . .\
    \ . . . . . . . . . . . . 23\n     6.11. Processing NOTIFY Packets  . . . . .\
    \ . . . . . . . . . . . 24\n   7.  Keying Material  . . . . . . . . . . . . .\
    \ . . . . . . . . . . 24\n   8.  Security Considerations  . . . . . . . . . .\
    \ . . . . . . . . . 25\n   9.  IANA Considerations  . . . . . . . . . . . . .\
    \ . . . . . . . . 25\n   10. Acknowledgments  . . . . . . . . . . . . . . . .\
    \ . . . . . . . 26\n   11. References . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . 26\n     11.1. Normative references . . . . . . . . . . . . . .\
    \ . . . . . 26\n     11.2. Informative references . . . . . . . . . . . . . .\
    \ . . . . 26\n   Appendix A.  A Note on Implementation Options  . . . . . . .\
    \ . . . 28\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   In the Host Identity Protocol Architecture [RFC4423], hosts\
    \ are\n   identified with public keys.  The Host Identity Protocol [RFC5201]\n\
    \   base exchange allows any two HIP-supporting hosts to authenticate\n   each\
    \ other and to create a HIP association between themselves.\n   During the base\
    \ exchange, the hosts generate a piece of shared keying\n   material using an\
    \ authenticated Diffie-Hellman exchange.\n   The HIP base exchange specification\
    \ [RFC5201] does not describe any\n   transport formats or methods for user data\
    \ to be used during the\n   actual communication; it only defines that it is mandatory\
    \ to\n   implement the Encapsulated Security Payload (ESP) [RFC4303] based\n \
    \  transport format and method.  This document specifies how ESP is used\n   with\
    \ HIP to carry actual user data.\n   To be more specific, this document specifies\
    \ a set of HIP protocol\n   extensions and their handling.  Using these extensions,\
    \ a pair of ESP\n   Security Associations (SAs) is created between the hosts during\
    \ the\n   base exchange.  The resulting ESP Security Associations use keys\n \
    \  drawn from the keying material (KEYMAT) generated during the base\n   exchange.\
    \  After the HIP association and required ESP SAs have been\n   established between\
    \ the hosts, the user data communication is\n   protected using ESP.  In addition,\
    \ this document specifies methods to\n   update an existing ESP Security Association.\n\
    \   It should be noted that representations of Host Identity are not\n   carried\
    \ explicitly in the headers of user data packets.  Instead, the\n   ESP Security\
    \ Parameter Index (SPI) is used to indicate the right host\n   context.  The SPIs\
    \ are selected during the HIP ESP setup exchange.\n   For user data packets, ESP\
    \ SPIs (in possible combination with IP\n   addresses) are used indirectly to\
    \ identify the host context, thereby\n   avoiding any additional explicit protocol\
    \ headers.\n"
- title: 2.  Conventions Used in This Document
  contents:
  - "2.  Conventions Used in This Document\n   The key words \"MUST\", \"MUST NOT\"\
    , \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in RFC 2119 [RFC2119].\n"
- title: 3.  Using ESP with HIP
  contents:
  - "3.  Using ESP with HIP\n   The HIP base exchange is used to set up a HIP association\
    \ between two\n   hosts.  The base exchange provides two-way host authentication\
    \ and\n   key material generation, but it does not provide any means for\n   protecting\
    \ data communication between the hosts.  In this document,\n   we specify the\
    \ use of ESP for protecting user data traffic after the\n   HIP base exchange.\
    \  Note that this use of ESP is intended only for\n   host-to-host traffic; security\
    \ gateways are not supported.\n   To support ESP use, the HIP base exchange messages\
    \ require some minor\n   additions to the parameters transported.  In the R1 packet,\
    \ the\n   Responder adds the possible ESP transforms in a new ESP_TRANSFORM\n\
    \   parameter before sending it to the Initiator.  The Initiator gets the\n  \
    \ proposed transforms, selects one of those proposed transforms, and\n   adds\
    \ it to the I2 packet in an ESP_TRANSFORM parameter.  In this I2\n   packet, the\
    \ Initiator also sends the SPI value that it wants to be\n   used for ESP traffic\
    \ flowing from the Responder to the Initiator.\n   This information is carried\
    \ using the new ESP_INFO parameter.  When\n   finalizing the ESP SA setup, the\
    \ Responder sends its SPI value to the\n   Initiator in the R2 packet, again using\
    \ ESP_INFO.\n"
- title: 3.1.  ESP Packet Format
  contents:
  - "3.1.  ESP Packet Format\n   The ESP specification [RFC4303] defines the ESP packet\
    \ format for\n   IPsec.  The HIP ESP packet looks exactly the same as the IPsec\
    \ ESP\n   transport format packet.  The semantics, however, are a bit different\n\
    \   and are described in more detail in the next subsection.\n"
- title: 3.2.  Conceptual ESP Packet Processing
  contents:
  - "3.2.  Conceptual ESP Packet Processing\n   ESP packet processing can be implemented\
    \ in different ways in HIP.\n   It is possible to implement it in a way that a\
    \ standards compliant,\n   unmodified IPsec implementation [RFC4303] can be used.\n\
    \   When a standards compliant IPsec implementation that uses IP\n   addresses\
    \ in the SPD and Security Association Database (SAD) is used,\n   the packet processing\
    \ may take the following steps.  For outgoing\n   packets, assuming that the upper-layer\
    \ pseudoheader has been built\n   using IP addresses, the implementation recalculates\
    \ upper-layer\n   checksums using Host Identity Tags (HITs) and, after that, changes\n\
    \   the packet source and destination addresses back to corresponding IP\n   addresses.\
    \  The packet is sent to the IPsec ESP for transport mode\n   handling and from\
    \ there the encrypted packet is sent to the network.\n   When an ESP packet is\
    \ received, the packet is first put to the IPsec\n   ESP transport mode handling,\
    \ and after decryption, the source and\n   destination IP addresses are replaced\
    \ with HITs and finally, upper-\n   layer checksums are verified before passing\
    \ the packet to the upper\n   layer.\n   An alternative way to implement packet\
    \ processing is the BEET (Bound\n   End-to-End Tunnel) [ESP-BEET] mode.  In BEET\
    \ mode, the ESP packet is\n   formatted as a transport mode packet, but the semantics\
    \ of the\n   connection are the same as for tunnel mode.  The \"outer\" addresses\
    \ of\n   the packet are the IP addresses and the \"inner\" addresses are the\n\
    \   HITs.  For outgoing traffic, after the packet has been encrypted, the\n  \
    \ packet's IP header is changed to a new one that contains IP addresses\n   instead\
    \ of HITs, and the packet is sent to the network.  When the ESP\n   packet is\
    \ received, the SPI value, together with the integrity\n   protection, allow the\
    \ packet to be securely associated with the right\n   HIT pair.  The packet header\
    \ is replaced with a new header containing\n   HITs, and the packet is decrypted.\n"
- title: 3.2.1.  Semantics of the Security Parameter Index (SPI)
  contents:
  - "3.2.1.  Semantics of the Security Parameter Index (SPI)\n   SPIs are used in\
    \ ESP to find the right Security Association for\n   received packets.  The ESP\
    \ SPIs have added significance when used\n   with HIP; they are a compressed representation\
    \ of a pair of HITs.\n   Thus, SPIs MAY be used by intermediary systems in providing\
    \ services\n   like address mapping.  Note that since the SPI has significance\
    \ at\n   the receiver, only the < DST, SPI >, where DST is a destination IP\n\
    \   address, uniquely identifies the receiver HIT at any given point of\n   time.\
    \  The same SPI value may be used by several hosts.  A single\n   < DST, SPI >\
    \ value may denote different hosts and contexts at\n   different points of time,\
    \ depending on the host that is currently\n   reachable at the DST.\n   Each host\
    \ selects for itself the SPI it wants to see in packets\n   received from its\
    \ peer.  This allows it to select different SPIs for\n   different peers.  The\
    \ SPI selection SHOULD be random; the rules of\n   Section 2.1 of the ESP specification\
    \ [RFC4303] must be followed.  A\n   different SPI SHOULD be used for each HIP\
    \ exchange with a particular\n   host; this is to avoid a replay attack.  Additionally,\
    \ when a host\n   rekeys, the SPI MUST be changed.  Furthermore, if a host changes\
    \ over\n   to use a different IP address, it MAY change the SPI.\n   One method\
    \ for SPI creation that meets the above criteria would be to\n   concatenate the\
    \ HIT with a 32-bit random or sequential number, hash\n   this (using SHA1), and\
    \ then use the high-order 32 bits as the SPI.\n   The selected SPI is communicated\
    \ to the peer in the third (I2) and\n   fourth (R2) packets of the base HIP exchange.\
    \  Changes in SPI are\n   signaled with ESP_INFO parameters.\n"
- title: 3.3.  Security Association Establishment and Maintenance
  contents:
  - '3.3.  Security Association Establishment and Maintenance

    '
- title: 3.3.1.  ESP Security Associations
  contents:
  - "3.3.1.  ESP Security Associations\n   In HIP, ESP Security Associations are setup\
    \ between the HIP nodes\n   during the base exchange [RFC5201].  Existing ESP\
    \ SAs can be updated\n   later using UPDATE messages.  The reason for updating\
    \ the ESP SA\n   later can be, for example, a need for rekeying the SA because\
    \ of\n   sequence number rollover.\n   Upon setting up a HIP association, each\
    \ association is linked to two\n   ESP SAs, one for incoming packets and one for\
    \ outgoing packets.  The\n   Initiator's incoming SA corresponds with the Responder's\
    \ outgoing\n   one, and vice versa.  The Initiator defines the SPI for its incoming\n\
    \   association, as defined in Section 3.2.1.  This SA is herein called\n   SA-RI,\
    \ and the corresponding SPI is called SPI-RI.  Respectively, the\n   Responder's\
    \ incoming SA corresponds with the Initiator's outgoing SA\n   and is called SA-IR,\
    \ with the SPI being called SPI-IR.\n   The Initiator creates SA-RI as a part\
    \ of R1 processing, before\n   sending out the I2, as explained in Section 6.4.\
    \  The keys are\n   derived from KEYMAT, as defined in Section 7.  The Responder\
    \ creates\n   SA-RI as a part of I2 processing; see Section 6.5.\n   The Responder\
    \ creates SA-IR as a part of I2 processing, before\n   sending out R2; see Section\
    \ 6.5.  The Initiator creates SA-IR when\n   processing R2; see Section 6.6.\n\
    \   The initial session keys are drawn from the generated keying\n   material,\
    \ KEYMAT, after the HIP keys have been drawn as specified in\n   [RFC5201].\n\
    \   When the HIP association is removed, the related ESP SAs MUST also be\n  \
    \ removed.\n"
- title: 3.3.2.  Rekeying
  contents:
  - "3.3.2.  Rekeying\n   After the initial HIP base exchange and SA establishment,\
    \ both hosts\n   are in the ESTABLISHED state.  There are no longer Initiator\
    \ and\n   Responder roles and the association is symmetric.  In this\n   subsection,\
    \ the party that initiates the rekey procedure is denoted\n   with I' and the\
    \ peer with R'.\n   An existing HIP-created ESP SA may need updating during the\
    \ lifetime\n   of the HIP association.  This document specifies the rekeying of\
    \ an\n   existing HIP-created ESP SA, using the UPDATE message.  The ESP_INFO\n\
    \   parameter introduced above is used for this purpose.\n   I' initiates the\
    \ ESP SA updating process when needed (see\n   Section 6.8).  It creates an UPDATE\
    \ packet with required information\n   and sends it to the peer node.  The old\
    \ SAs are still in use, local\n   policy permitting.\n   R', after receiving and\
    \ processing the UPDATE (see Section 6.9),\n   generates new SAs: SA-I'R' and\
    \ SA-R'I'.  It does not take the new\n   outgoing SA into use, but still uses\
    \ the old one, so there\n   temporarily exists two SA pairs towards the same peer\
    \ host.  The SPI\n   for the new outgoing SA, SPI-R'I', is specified in the received\n\
    \   ESP_INFO parameter in the UPDATE packet.  For the new incoming SA, R'\n  \
    \ generates the new SPI value, SPI-I'R', and includes it in the\n   response UPDATE\
    \ packet.\n   When I' receives a response UPDATE from R', it generates new SAs,\
    \ as\n   described in Section 6.9: SA-I'R' and SA-R'I'.  It starts using the\n\
    \   new outgoing SA immediately.\n   R' starts using the new outgoing SA when\
    \ it receives traffic on the\n   new incoming SA or when it receives the UPDATE\
    \ ACK confirming\n   completion of rekeying.  After this, R' can remove the old\
    \ SAs.\n   Similarly, when the I' receives traffic from the new incoming SA, it\n\
    \   can safely remove the old SAs.\n"
- title: 3.3.3.  Security Association Management
  contents:
  - "3.3.3.  Security Association Management\n   An SA pair is indexed by the 2 SPIs\
    \ and 2 HITs (both local and remote\n   HITs since a system can have more than\
    \ one HIT).  An inactivity timer\n   is RECOMMENDED for all SAs.  If the state\
    \ dictates the deletion of an\n   SA, a timer is set to allow for any late arriving\
    \ packets.\n"
- title: 3.3.4.  Security Parameter Index (SPI)
  contents:
  - "3.3.4.  Security Parameter Index (SPI)\n   The SPIs in ESP provide a simple compression\
    \ of the HIP data from all\n   packets after the HIP exchange.  This does require\
    \ a per HIT-pair\n   Security Association (and SPI), and a decrease of policy\
    \ granularity\n   over other Key Management Protocols like IKE.\n   When a host\
    \ updates the ESP SA, it provides a new inbound SPI to and\n   gets a new outbound\
    \ SPI from its partner.\n"
- title: 3.3.5.  Supported Transforms
  contents:
  - "3.3.5.  Supported Transforms\n   All HIP implementations MUST support AES-CBC\
    \ [RFC3602] and HMAC-SHA-\n   1-96 [RFC2404].  If the Initiator does not support\
    \ any of the\n   transforms offered by the Responder, it should abandon the\n\
    \   negotiation and inform the peer with a NOTIFY message about a non-\n   supported\
    \ transform.\n   In addition to AES-CBC, all implementations MUST implement the\
    \ ESP\n   NULL encryption algorithm.  When the ESP NULL encryption is used, it\n\
    \   MUST be used together with SHA1 or MD5 authentication as specified in\n  \
    \ Section 5.1.2\n"
- title: 3.3.6.  Sequence Number
  contents:
  - "3.3.6.  Sequence Number\n   The Sequence Number field is MANDATORY when ESP is\
    \ used with HIP.\n   Anti-replay protection MUST be used in an ESP SA established\
    \ with\n   HIP.  When ESP is used with HIP, a 64-bit sequence number MUST be\n\
    \   used.  This means that each host MUST rekey before its sequence\n   number\
    \ reaches 2^64.\n   When using a 64-bit sequence number, the higher 32 bits are\
    \ NOT\n   included in the ESP header, but are simply kept local to both peers.\n\
    \   See [RFC4301].\n"
- title: 3.3.7.  Lifetimes and Timers
  contents:
  - "3.3.7.  Lifetimes and Timers\n   HIP does not negotiate any lifetimes.  All ESP\
    \ lifetimes are local\n   policy.  The only lifetimes a HIP implementation MUST\
    \ support are\n   sequence number rollover (for replay protection), and SHOULD\
    \ support\n   timing out inactive ESP SAs.  An SA times out if no packets are\n\
    \   received using that SA.  The default timeout value is 15 minutes.\n   Implementations\
    \ MAY support lifetimes for the various ESP transforms.\n   Each implementation\
    \ SHOULD implement per-HIT configuration of the\n   inactivity timeout, allowing\
    \ statically configured HIP associations\n   to stay alive for days, even when\
    \ inactive.\n"
- title: 3.4.  IPsec and HIP ESP Implementation Considerations
  contents:
  - "3.4.  IPsec and HIP ESP Implementation Considerations\n   When HIP is run on\
    \ a node where a standards compliant IPsec is used,\n   some issues have to be\
    \ considered.\n   The HIP implementation must be able to co-exist with other IPsec\n\
    \   keying protocols.  When the HIP implementation selects the SPI value,\n  \
    \ it may lead to a collision if not implemented properly.  To avoid the\n   possibility\
    \ for a collision, the HIP implementation MUST ensure that\n   the SPI values\
    \ used for HIP SAs are not used for IPsec or other SAs,\n   and vice versa.\n\
    \   For outbound traffic, the SPD or (coordinated) SPDs if there are two\n   (one\
    \ for HIP and one for IPsec) MUST ensure that packets intended for\n   HIP processing\
    \ are given a HIP-enabled SA and that packets intended\n   for IPsec processing\
    \ are given an IPsec-enabled SA.  The SP then MUST\n   be bound to the matching\
    \ SA and non-HIP packets will not be processed\n   by this SA.  Data originating\
    \ from a socket that is not using HIP\n   MUST NOT have checksum recalculated\
    \ (as described in Section 3.2,\n   paragraph 2) and data MUST NOT be passed to\
    \ the SP or SA created by\n   the HIP.\n   Incoming data packets using an SA that\
    \ is not negotiated by HIP MUST\n   NOT be processed as described in Section 3.2,\
    \ paragraph 2.  The SPI\n   will identify the correct SA for packet decryption\
    \ and MUST be used\n   to identify that the packet has an upper-layer checksum\
    \ that is\n   calculated as specified in [RFC5201].\n"
- title: 4.  The Protocol
  contents:
  - "4.  The Protocol\n   In this section, the protocol for setting up an ESP association\
    \ to be\n   used with HIP association is described.\n"
- title: 4.1.  ESP in HIP
  contents:
  - '4.1.  ESP in HIP

    '
- title: 4.1.1.  Setting Up an ESP Security Association
  contents:
  - "4.1.1.  Setting Up an ESP Security Association\n   Setting up an ESP Security\
    \ Association between hosts using HIP\n   consists of three messages passed between\
    \ the hosts.  The parameters\n   are included in R1, I2, and R2 messages during\
    \ base exchange.\n                 Initiator                             Responder\n\
    \                                   I1\n                   ---------------------------------->\n\
    \                             R1: ESP_TRANSFORM\n                   <----------------------------------\n\
    \                       I2: ESP_TRANSFORM, ESP_INFO\n                   ---------------------------------->\n\
    \                               R2: ESP_INFO\n                   <----------------------------------\n\
    \   Setting up an ESP Security Association between HIP hosts requires\n   three\
    \ messages to exchange the information that is required during an\n   ESP communication.\n\
    \   The R1 message contains the ESP_TRANSFORM parameter, in which the\n   sending\
    \ host defines the possible ESP transforms it is willing to use\n   for the ESP\
    \ SA.\n   The I2 message contains the response to an ESP_TRANSFORM received in\n\
    \   the R1 message.  The sender must select one of the proposed ESP\n   transforms\
    \ from the ESP_TRANSFORM parameter in the R1 message and\n   include the selected\
    \ one in the ESP_TRANSFORM parameter in the I2\n   packet.  In addition to the\
    \ transform, the host includes the ESP_INFO\n   parameter containing the SPI value\
    \ to be used by the peer host.\n   In the R2 message, the ESP SA setup is finalized.\
    \  The packet\n   contains the SPI information required by the Initiator for the\
    \ ESP\n   SA.\n"
- title: 4.1.2.  Updating an Existing ESP SA
  contents:
  - "4.1.2.  Updating an Existing ESP SA\n   The update process is accomplished using\
    \ two messages.  The HIP\n   UPDATE message is used to update the parameters of\
    \ an existing ESP\n   SA.  The UPDATE mechanism and message is defined in [RFC5201],\
    \ and\n   the additional parameters for updating an existing ESP SA are\n   described\
    \ here.\n   The following picture shows a typical exchange when an existing ESP\n\
    \   SA is updated.  Messages include SEQ and ACK parameters required by\n   the\
    \ UPDATE mechanism.\n       H1                                               \
    \           H2\n            UPDATE: SEQ, ESP_INFO [, DIFFIE_HELLMAN]\n       \
    \   ----------------------------------------------------->\n            UPDATE:\
    \ SEQ, ACK, ESP_INFO [, DIFFIE_HELLMAN]\n          <-----------------------------------------------------\n\
    \            UPDATE: ACK\n          ----------------------------------------------------->\n\
    \   The host willing to update the ESP SA creates and sends an UPDATE\n   message.\
    \  The message contains the ESP_INFO parameter containing the\n   old SPI value\
    \ that was used, the new SPI value to be used, and the\n   index value for the\
    \ keying material, giving the point from where the\n   next keys will be drawn.\
    \  If new keying material must be generated,\n   the UPDATE message will also\
    \ contain the DIFFIE_HELLMAN parameter\n   defined in [RFC5201].\n   The host\
    \ receiving the UPDATE message requesting update of an\n   existing ESP SA MUST\
    \ reply with an UPDATE message.  In the reply\n   message, the host sends the\
    \ ESP_INFO parameter containing the\n   corresponding values: old SPI, new SPI,\
    \ and the keying material\n   index.  If the incoming UPDATE contained a DIFFIE_HELLMAN\
    \ parameter,\n   the reply packet MUST also contain a DIFFIE_HELLMAN parameter.\n"
- title: 5.  Parameter and Packet Formats
  contents:
  - "5.  Parameter and Packet Formats\n   In this section, new and modified HIP parameters\
    \ are presented, as\n   well as modified HIP packets.\n"
- title: 5.1.  New Parameters
  contents:
  - "5.1.  New Parameters\n   Two new HIP parameters are defined for setting up ESP\
    \ transport\n   format associations in HIP communication and for rekeying existing\n\
    \   ones.  Also, the NOTIFY parameter, described in [RFC5201], has two\n   new\
    \ error parameters.\n      Parameter         Type  Length     Data\n      ESP_INFO\
    \          65    12         Remote's old SPI,\n                              \
    \           new SPI, and other info\n      ESP_TRANSFORM     4095  variable  \
    \ ESP Encryption and\n                                         Authentication\
    \ Transform(s)\n"
- title: 5.1.1.  ESP_INFO
  contents:
  - "5.1.1.  ESP_INFO\n   During the establishment and update of an ESP SA, the SPI\
    \ value of\n   both hosts must be transmitted between the hosts.  During the\n\
    \   establishment and update of an ESP SA, the SPI value of both hosts\n   must\
    \ be transmitted between the hosts.  In addition, hosts need the\n   index value\
    \ to the KEYMAT when they are drawing keys from the\n   generated keying material.\
    \  The ESP_INFO parameter is used to\n   transmit the SPI values and the KEYMAT\
    \ index information between the\n   hosts.\n   During the initial ESP SA setup,\
    \ the hosts send the SPI value that\n   they want the peer to use when sending\
    \ ESP data to them.  The value\n   is set in the NEW SPI field of the ESP_INFO\
    \ parameter.  In the\n   initial setup, an old value for the SPI does not exist,\
    \ thus the OLD\n   SPI value field is set to zero.  The OLD SPI field value may\
    \ also be\n   zero when additional SAs are set up between HIP hosts, e.g., in\
    \ case\n   of multihomed HIP hosts [RFC5206].  However, such use is beyond the\n\
    \   scope of this specification.\n   RFC 4301 [RFC4301] describes how to establish\
    \ multiple SAs to\n   properly support QoS.  If different classes of traffic (distinguished\n\
    \   by Differentiated Services Code Point (DSCP) bits [RFC3474],\n   [RFC3260])\
    \ are sent on the same SA, and if the receiver is employing\n   the optional anti-replay\
    \ feature available in ESP, this could result\n   in inappropriate discarding\
    \ of lower priority packets due to the\n   windowing mechanism used by this feature.\
    \  Therefore, a sender SHOULD\n   put traffic of different classes but with the\
    \ same selector values on\n   different SAs to support Quality of Service (QoS)\
    \ appropriately.  To\n   permit this, the implementation MUST permit establishment\
    \ and\n   maintenance of multiple SAs between a given sender and receiver with\n\
    \   the same selectors.  Distribution of traffic among these parallel SAs\n  \
    \ to support QoS is locally determined by the sender and is not\n   negotiated\
    \ by HIP.  The receiver MUST process the packets from the\n   different SAs without\
    \ prejudice.  It is possible that the DSCP value\n   changes en route, but this\
    \ should not cause problems with respect to\n   IPsec processing since the value\
    \ is not employed for SA selection and\n   MUST NOT be checked as part of SA/packet\
    \ validation.\n   The KEYMAT index value points to the place in the KEYMAT from\
    \ where\n   the keying material for the ESP SAs is drawn.  The KEYMAT index value\n\
    \   is zero only when the ESP_INFO is sent during a rekeying process and\n   new\
    \ keying material is generated.\n   During the life of an SA established by HIP,\
    \ one of the hosts may\n   need to reset the Sequence Number to one and rekey.\
    \  The reason for\n   rekeying might be an approaching sequence number wrap in\
    \ ESP, or a\n   local policy on use of a key.  Rekeying ends the current SAs and\n\
    \   starts new ones on both peers.\n   During the rekeying process, the ESP_INFO\
    \ parameter is used to\n   transmit the changed SPI values and the keying material\
    \ index.\n      0                   1                   2                   3\n\
    \      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |             Type              |             Length            |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  \
    \         Reserved            |         KEYMAT Index          |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |                            OLD SPI                            |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  \
    \                          NEW SPI                            |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     Type           65\n     Length         12\n     KEYMAT Index   Index, in\
    \ bytes, where to continue to draw ESP keys\n                    from KEYMAT.\
    \  If the packet includes a new\n                    Diffie-Hellman key and the\
    \ ESP_INFO is sent in an\n                    UPDATE packet, the field MUST be\
    \ zero.  If the\n                    ESP_INFO is included in base exchange messages,\
    \ the\n                    KEYMAT Index must have the index value of the point\n\
    \                    from where the ESP SA keys are drawn.  Note that the\n  \
    \                  length of this field limits the amount of\n               \
    \     keying material that can be drawn from KEYMAT.  If\n                   \
    \ that amount is exceeded, the packet MUST contain\n                    a new\
    \ Diffie-Hellman key.\n     OLD SPI        old SPI for data sent to address(es)\
    \ associated\n                    with this SA.  If this is an initial SA setup,\
    \ the\n                    OLD SPI value is zero.\n     NEW SPI        new SPI\
    \ for data sent to address(es) associated\n                    with this SA.\n"
- title: 5.1.2.  ESP_TRANSFORM
  contents:
  - "5.1.2.  ESP_TRANSFORM\n   The ESP_TRANSFORM parameter is used during ESP SA establishment.\
    \  The\n   first party sends a selection of transform families in the\n   ESP_TRANSFORM\
    \ parameter, and the peer must select one of the proposed\n   values and include\
    \ it in the response ESP_TRANSFORM parameter.\n       0                   1  \
    \                 2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4\
    \ 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |             Type              |             Length            |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \          Reserved             |           Suite ID #1         |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |          Suite ID #2          |           Suite ID #3         |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \          Suite ID #n          |             Padding           |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \         Type           4095\n         Length         length in octets, excluding\
    \ Type, Length, and\n                        padding\n         Reserved      \
    \ zero when sent, ignored when received\n         Suite ID       defines the ESP\
    \ Suite to be used\n   The following Suite IDs are defined in RFC 5201 [RFC5201]:\n\
    \            Suite ID                          Value\n            RESERVED   \
    \                       0\n            AES-CBC with HMAC-SHA1            1\n \
    \           3DES-CBC with HMAC-SHA1           2\n            3DES-CBC with HMAC-MD5\
    \            3\n            BLOWFISH-CBC with HMAC-SHA1       4\n            NULL\
    \ with HMAC-SHA1               5\n            NULL with HMAC-MD5             \
    \   6\n   The sender of an ESP transform parameter MUST make sure that there\n\
    \   are no more than six (6) Suite IDs in one ESP transform parameter.\n   Conversely,\
    \ a recipient MUST be prepared to handle received transport\n   parameters that\
    \ contain more than six Suite IDs.  The limited number\n   of Suite IDs sets the\
    \ maximum size of the ESP_TRANSFORM parameter.\n   As the default configuration,\
    \ the ESP_TRANSFORM parameter MUST\n   contain at least one of the mandatory Suite\
    \ IDs.  There MAY be a\n   configuration option that allows the administrator\
    \ to override this\n   default.\n   Mandatory implementations: AES-CBC with HMAC-SHA1\
    \ and NULL with HMAC-\n   SHA1.\n   Under some conditions, it is possible to use\
    \ Traffic Flow\n   Confidentiality (TFC) [RFC4303] with ESP in BEET mode.  However,\
    \ the\n   definition of such operation is future work and must be done in a\n\
    \   separate specification.\n"
- title: 5.1.3.  NOTIFY Parameter
  contents:
  - "5.1.3.  NOTIFY Parameter\n   The HIP base specification defines a set of NOTIFY\
    \ error types.  The\n   following error types are required for describing errors\
    \ in ESP\n   Transform crypto suites during negotiation.\n         NOTIFY PARAMETER\
    \ - ERROR TYPES           Value\n         ------------------------------     \
    \      -----\n         NO_ESP_PROPOSAL_CHOSEN                    18\n        \
    \    None of the proposed ESP Transform crypto suites was\n            acceptable.\n\
    \         INVALID_ESP_TRANSFORM_CHOSEN              19\n            The ESP Transform\
    \ crypto suite does not correspond to\n            one offered by the Responder.\n"
- title: 5.2.  HIP ESP Security Association Setup
  contents:
  - "5.2.  HIP ESP Security Association Setup\n   The ESP Security Association is\
    \ set up during the base exchange.  The\n   following subsections define the ESP\
    \ SA setup procedure using both\n   base exchange messages (R1, I2, R2) and UPDATE\
    \ messages.\n"
- title: 5.2.1.  Setup During Base Exchange
  contents:
  - '5.2.1.  Setup During Base Exchange

    '
- title: 5.2.1.1.  Modifications in R1
  contents:
  - "5.2.1.1.  Modifications in R1\n   The ESP_TRANSFORM contains the ESP modes supported\
    \ by the sender, in\n   the order of preference.  All implementations MUST support\
    \ AES-CBC\n   [RFC3602] with HMAC-SHA-1-96 [RFC2404].\n   The following figure\
    \ shows the resulting R1 packet layout.\n      The HIP parameters for the R1 packet:\n\
    \      IP ( HIP ( [ R1_COUNTER, ]\n                 PUZZLE,\n                \
    \ DIFFIE_HELLMAN,\n                 HIP_TRANSFORM,\n                 ESP_TRANSFORM,\n\
    \                 HOST_ID,\n                 [ ECHO_REQUEST, ]\n             \
    \    HIP_SIGNATURE_2 )\n                 [, ECHO_REQUEST ])\n"
- title: 5.2.1.2.  Modifications in I2
  contents:
  - "5.2.1.2.  Modifications in I2\n   The ESP_INFO contains the sender's SPI for\
    \ this association as well\n   as the KEYMAT index from where the ESP SA keys\
    \ will be drawn.  The\n   old SPI value is set to zero.\n   The ESP_TRANSFORM\
    \ contains the ESP mode selected by the sender of R1.\n   All implementations\
    \ MUST support AES-CBC [RFC3602] with HMAC-SHA-1-96\n   [RFC2404].\n   The following\
    \ figure shows the resulting I2 packet layout.\n      The HIP parameters for the\
    \ I2 packet:\n      IP ( HIP ( ESP_INFO,\n                 [R1_COUNTER,]\n   \
    \              SOLUTION,\n                 DIFFIE_HELLMAN,\n                 HIP_TRANSFORM,\n\
    \                 ESP_TRANSFORM,\n                 ENCRYPTED { HOST_ID },\n  \
    \               [ ECHO_RESPONSE ,]\n                 HMAC,\n                 HIP_SIGNATURE\n\
    \                 [, ECHO_RESPONSE] ) )\n"
- title: 5.2.1.3.  Modifications in R2
  contents:
  - "5.2.1.3.  Modifications in R2\n   The R2 contains an ESP_INFO parameter, which\
    \ has the SPI value of the\n   sender of the R2 for this association.  The ESP_INFO\
    \ also has the\n   KEYMAT index value specifying where the ESP SA keys are drawn.\n\
    \   The following figure shows the resulting R2 packet layout.\n      The HIP\
    \ parameters for the R2 packet:\n      IP ( HIP ( ESP_INFO, HMAC_2, HIP_SIGNATURE\
    \ ) )\n"
- title: 5.3.  HIP ESP Rekeying
  contents:
  - "5.3.  HIP ESP Rekeying\n   In this section, the procedure for rekeying an existing\
    \ ESP SA is\n   presented.\n   Conceptually, the process can be represented by\
    \ the following message\n   sequence using the host names I' and R' defined in\
    \ Section 3.3.2.\n   For simplicity, HMAC and HIP_SIGNATURE are not depicted,\
    \ and\n   DIFFIE_HELLMAN keys are optional.  The UPDATE with ACK_I need not be\n\
    \   piggybacked with the UPDATE with SEQ_R; it may be ACKed separately\n   (in\
    \ which case the sequence would include four packets).\n           I'        \
    \                          R'\n                 UPDATE(ESP_INFO, SEQ_I, [DIFFIE_HELLMAN])\n\
    \            ----------------------------------->\n                 UPDATE(ESP_INFO,\
    \ SEQ_R, ACK_I, [DIFFIE_HELLMAN])\n            <-----------------------------------\n\
    \                 UPDATE(ACK_R)\n            ----------------------------------->\n\
    \   Below, the first two packets in this figure are explained.\n"
- title: 5.3.1.  Initializing Rekeying
  contents:
  - "5.3.1.  Initializing Rekeying\n   When HIP is used with ESP, the UPDATE packet\
    \ is used to initiate\n   rekeying.  The UPDATE packet MUST carry an ESP_INFO\
    \ and MAY carry a\n   DIFFIE_HELLMAN parameter.\n   Intermediate systems that\
    \ use the SPI will have to inspect HIP\n   packets for those that carry rekeying\
    \ information.  The packet is\n   signed for the benefit of the intermediate systems.\
    \  Since\n   intermediate systems may need the new SPI values, the contents cannot\n\
    \   be encrypted.\n   The following figure shows the contents of a rekeying initialization\n\
    \   UPDATE packet.\n      The HIP parameters for the UPDATE packet initiating\
    \ rekeying:\n      IP ( HIP ( ESP_INFO,\n                 SEQ,\n             \
    \    [DIFFIE_HELLMAN, ]\n                 HMAC,\n                 HIP_SIGNATURE\
    \ ) )\n"
- title: 5.3.2.  Responding to the Rekeying Initialization
  contents:
  - "5.3.2.  Responding to the Rekeying Initialization\n   The UPDATE ACK is used\
    \ to acknowledge the received UPDATE rekeying\n   initialization.  The acknowledgment\
    \ UPDATE packet MUST carry an\n   ESP_INFO and MAY carry a DIFFIE_HELLMAN parameter.\n\
    \   Intermediate systems that use the SPI will have to inspect HIP\n   packets\
    \ for packets carrying rekeying information.  The packet is\n   signed for the\
    \ benefit of the intermediate systems.  Since\n   intermediate systems may need\
    \ the new SPI values, the contents cannot\n   be encrypted.\n   The following\
    \ figure shows the contents of a rekeying acknowledgment\n   UPDATE packet.\n\
    \      The HIP parameters for the UPDATE packet:\n      IP ( HIP ( ESP_INFO,\n\
    \                 SEQ,\n                 ACK,\n                 [ DIFFIE_HELLMAN,\
    \ ]\n                 HMAC,\n                 HIP_SIGNATURE ) )\n"
- title: 5.4.  ICMP Messages
  contents:
  - "5.4.  ICMP Messages\n   ICMP message handling is mainly described in the HIP\
    \ base\n   specification [RFC5201].  In this section, we describe the actions\n\
    \   related to ESP security associations.\n"
- title: 5.4.1.  Unknown SPI
  contents:
  - "5.4.1.  Unknown SPI\n   If a HIP implementation receives an ESP packet that has\
    \ an\n   unrecognized SPI number, it MAY respond (subject to rate limiting the\n\
    \   responses) with an ICMP packet with type \"Parameter Problem\", with\n   the\
    \ pointer pointing to the beginning of SPI field in the ESP header.\n"
- title: 6.  Packet Processing
  contents:
  - "6.  Packet Processing\n   Packet processing is mainly defined in the HIP base\
    \ specification\n   [RFC5201].  This section describes the changes and new requirements\n\
    \   for packet handling when the ESP transport format is used.  Note that\n  \
    \ all HIP packets (currently protocol 253) MUST bypass ESP processing.\n"
- title: 6.1.  Processing Outgoing Application Data
  contents:
  - "6.1.  Processing Outgoing Application Data\n   Outgoing application data handling\
    \ is specified in the HIP base\n   specification [RFC5201].  When the ESP transport\
    \ format is used, and\n   there is an active HIP session for the given < source,\
    \ destination >\n   HIT pair, the outgoing datagram is protected using the ESP\
    \ security\n   association.  In a typical implementation, this will result in\
    \ a\n   BEET-mode ESP packet being sent.  BEET-mode [ESP-BEET] was introduced\n\
    \   above in Section 3.2.  The following additional steps define the\n   conceptual\
    \ processing rules for outgoing ESP protected datagrams.\n   1.  Detect the proper\
    \ ESP SA using the HITs in the packet header or\n       other information associated\
    \ with the packet\n   2.  Process the packet normally, as if the SA was a transport\
    \ mode\n       SA.\n   3.  Ensure that the outgoing ESP protected packet has proper\
    \ IP\n       header format depending on the used IP address family, and proper\n\
    \       IP addresses in its IP header, e.g., by replacing HITs left by\n     \
    \  the ESP processing.  Note that this placement of proper IP\n       addresses\
    \ MAY also be performed at some other point in the stack,\n       e.g., before\
    \ ESP processing.\n"
- title: 6.2.  Processing Incoming Application Data
  contents:
  - "6.2.  Processing Incoming Application Data\n   Incoming HIP user data packets\
    \ arrive as ESP protected packets.  In\n   the usual case, the receiving host\
    \ has a corresponding ESP security\n   association, identified by the SPI and\
    \ destination IP address in the\n   packet.  However, if the host has crashed\
    \ or otherwise lost its HIP\n   state, it may not have such an SA.\n   The basic\
    \ incoming data handling is specified in the HIP base\n   specification.  Additional\
    \ steps are required when ESP is used for\n   protecting the data traffic.  The\
    \ following steps define the\n   conceptual processing rules for incoming ESP\
    \ protected datagrams\n   targeted to an ESP security association created with\
    \ HIP.\n   1.  Detect the proper ESP SA using the SPI.  If the resulting SA is\
    \ a\n       non-HIP ESP SA, process the packet according to standard IPsec\n \
    \      rules.  If there are no SAs identified with the SPI, the host MAY\n   \
    \    send an ICMP packet as defined in Section 5.4.  How to handle\n       lost\
    \ state is an implementation issue.\n   2.  If the SPI matches with an active\
    \ HIP-based ESP SA, the IP\n       addresses in the datagram are replaced with\
    \ the HITs associated\n       with the SPI.  Note that this IP-address-to-HIT\
    \ conversion step\n       MAY also be performed at some other point in the stack,\
    \ e.g.,\n       after ESP processing.  Note also that if the incoming packet has\n\
    \       IPv4 addresses, the packet must be converted to IPv6 format\n       before\
    \ replacing the addresses with HITs (such that the transport\n       checksum\
    \ will pass if there are no errors).\n   3.  The transformed packet is next processed\
    \ normally by ESP, as if\n       the packet were a transport mode packet.  The\
    \ packet may be\n       dropped by ESP, as usual.  In a typical implementation,\
    \ the\n       result of successful ESP decryption and verification is a\n    \
    \   datagram with the associated HITs as source and destination.\n   4.  The datagram\
    \ is delivered to the upper layer.  Demultiplexing the\n       datagram to the\
    \ right upper layer socket is performed as usual,\n       except that the HITs\
    \ are used in place of IP addresses during the\n       demultiplexing.\n"
- title: 6.3.  HMAC and SIGNATURE Calculation and Verification
  contents:
  - "6.3.  HMAC and SIGNATURE Calculation and Verification\n   The new HIP parameters\
    \ described in this document, ESP_INFO and\n   ESP_TRANSFORM, must be protected\
    \ using HMAC and signature\n   calculations.  In a typical implementation, they\
    \ are included in R1,\n   I2, R2, and UPDATE packet HMAC and SIGNATURE calculations\
    \ as\n   described in [RFC5201].\n"
- title: 6.4.  Processing Incoming ESP SA Initialization (R1)
  contents:
  - "6.4.  Processing Incoming ESP SA Initialization (R1)\n   The ESP SA setup is\
    \ initialized in the R1 message.  The receiving\n   host (Initiator) selects one\
    \ of the ESP transforms from the presented\n   values.  If no suitable value is\
    \ found, the negotiation is\n   terminated.  The selected values are subsequently\
    \ used when\n   generating and using encryption keys, and when sending the reply\n\
    \   packet.  If the proposed alternatives are not acceptable to the\n   system,\
    \ it may abandon the ESP SA establishment negotiation, or it\n   may resend the\
    \ I1 message within the retry bounds.\n   After selecting the ESP transform and\
    \ performing other R1 processing,\n   the system prepares and creates an incoming\
    \ ESP security association.\n   It may also prepare a security association for\
    \ outgoing traffic, but\n   since it does not have the correct SPI value yet,\
    \ it cannot activate\n   it.\n"
- title: 6.5.  Processing Incoming Initialization Reply (I2)
  contents:
  - "6.5.  Processing Incoming Initialization Reply (I2)\n   The following steps are\
    \ required to process the incoming ESP SA\n   initialization replies in I2.  The\
    \ steps below assume that the I2 has\n   been accepted for processing (e.g., has\
    \ not been dropped due to HIT\n   comparisons as described in [RFC5201]).\n  \
    \ o  The ESP_TRANSFORM parameter is verified and it MUST contain a\n      single\
    \ value in the parameter, and it MUST match one of the values\n      offered in\
    \ the initialization packet.\n   o  The ESP_INFO NEW SPI field is parsed to obtain\
    \ the SPI that will\n      be used for the Security Association outbound from\
    \ the Responder\n      and inbound to the Initiator.  For this initial ESP SA\n\
    \      establishment, the old SPI value MUST be zero.  The KEYMAT Index\n    \
    \  field MUST contain the index value to the KEYMAT from where the\n      ESP\
    \ SA keys are drawn.\n   o  The system prepares and creates both incoming and\
    \ outgoing ESP\n      security associations.\n   o  Upon successful processing\
    \ of the initialization reply message,\n      the possible old Security Associations\
    \ (as left over from an\n      earlier incarnation of the HIP association) are\
    \ dropped and the\n      new ones are installed, and a finalizing packet, R2,\
    \ is sent.\n      Possible ongoing rekeying attempts are dropped.\n"
- title: 6.6.  Processing Incoming ESP SA Setup Finalization (R2)
  contents:
  - "6.6.  Processing Incoming ESP SA Setup Finalization (R2)\n   Before the ESP SA\
    \ can be finalized, the ESP_INFO NEW SPI field is\n   parsed to obtain the SPI\
    \ that will be used for the ESP Security\n   Association inbound to the sender\
    \ of the finalization message R2.\n   The system uses this SPI to create or activate\
    \ the outgoing ESP\n   security association used for sending packets to the peer.\n"
- title: 6.7.  Dropping HIP Associations
  contents:
  - "6.7.  Dropping HIP Associations\n   When the system drops a HIP association,\
    \ as described in the HIP base\n   specification, the associated ESP SAs MUST\
    \ also be dropped.\n"
- title: 6.8.  Initiating ESP SA Rekeying
  contents:
  - "6.8.  Initiating ESP SA Rekeying\n   During ESP SA rekeying, the hosts draw new\
    \ keys from the existing\n   keying material, or new keying material is generated\
    \ from where the\n   new keys are drawn.\n   A system may initiate the SA rekeying\
    \ procedure at any time.  It MUST\n   initiate a rekey if its incoming ESP sequence\
    \ counter is about to\n   overflow.  The system MUST NOT replace its keying material\
    \ until the\n   rekeying packet exchange successfully completes.\n   Optionally,\
    \ a system may include a new Diffie-Hellman key for use in\n   new KEYMAT generation.\
    \  New KEYMAT generation occurs prior to drawing\n   the new keys.\n   The rekeying\
    \ procedure uses the UPDATE mechanism defined in\n   [RFC5201].  Because each\
    \ peer must update its half of the security\n   association pair (including new\
    \ SPI creation), the rekeying process\n   requires that each side both send and\
    \ receive an UPDATE.  A system\n   will then rekey the ESP SA when it has sent\
    \ parameters to the peer\n   and has received both an ACK of the relevant UPDATE\
    \ message and\n   corresponding peer's parameters.  It may be that the ACK and\
    \ the\n   required HIP parameters arrive in different UPDATE messages.  This is\n\
    \   always true if a system does not initiate ESP SA update but responds\n   to\
    \ an update request from the peer, and may also occur if two systems\n   initiate\
    \ update nearly simultaneously.  In such a case, if the system\n   has an outstanding\
    \ update request, it saves the one parameter and\n   waits for the other before\
    \ completing rekeying.\n   The following steps define the processing rules for\
    \ initiating an ESP\n   SA update:\n   1.  The system decides whether to continue\
    \ to use the existing KEYMAT\n       or to generate a new KEYMAT.  In the latter\
    \ case, the system MUST\n       generate a new Diffie-Hellman public key.\n  \
    \ 2.  The system creates an UPDATE packet, which contains the ESP_INFO\n     \
    \  parameter.  In addition, the host may include the optional\n       DIFFIE_HELLMAN\
    \ parameter.  If the UPDATE contains the\n       DIFFIE_HELLMAN parameter, the\
    \ KEYMAT Index in the ESP_INFO\n       parameter MUST be zero, and the Diffie-Hellman\
    \ group ID must be\n       unchanged from that used in the initial handshake.\
    \  If the UPDATE\n       does not contain DIFFIE_HELLMAN, the ESP_INFO KEYMAT\
    \ Index MUST\n       be greater than or equal to the index of the next byte to\
    \ be\n       drawn from the current KEYMAT.\n   3.  The system sends the UPDATE\
    \ packet.  For reliability, the\n       underlying UPDATE retransmission mechanism\
    \ MUST be used.\n   4.  The system MUST NOT delete its existing SAs, but continue\
    \ using\n       them if its policy still allows.  The rekeying procedure SHOULD\n\
    \       be initiated early enough to make sure that the SA replay\n       counters\
    \ do not overflow.\n   5.  In case a protocol error occurs and the peer system\
    \ acknowledges\n       the UPDATE but does not itself send an ESP_INFO, the system\
    \ may\n       not finalize the outstanding ESP SA update request.  To guard\n\
    \       against this, a system MAY re-initiate the ESP SA update\n       procedure\
    \ after some time waiting for the peer to respond, or it\n       MAY decide to\
    \ abort the ESP SA after waiting for an\n       implementation-dependent time.\
    \  The system MUST NOT keep an\n       outstanding ESP SA update request for an\
    \ indefinite time.\n   To simplify the state machine, a host MUST NOT generate\
    \ new UPDATEs\n   while it has an outstanding ESP SA update request, unless it\
    \ is\n   restarting the update process.\n"
- title: 6.9.  Processing Incoming UPDATE Packets
  contents:
  - "6.9.  Processing Incoming UPDATE Packets\n   When a system receives an UPDATE\
    \ packet, it must be processed if the\n   following conditions hold (in addition\
    \ to the generic conditions\n   specified for UPDATE processing in Section 6.12\
    \ of [RFC5201]):\n   1.  A corresponding HIP association must exist.  This is\
    \ usually\n       ensured by the underlying UPDATE mechanism.\n   2.  The state\
    \ of the HIP association is ESTABLISHED or R2-SENT.\n   If the above conditions\
    \ hold, the following steps define the\n   conceptual processing rules for handling\
    \ the received UPDATE packet:\n   1.  If the received UPDATE contains a DIFFIE_HELLMAN\
    \ parameter, the\n       received KEYMAT Index MUST be zero and the Group ID must\
    \ match\n       the Group ID in use on the association.  If this test fails, the\n\
    \       packet SHOULD be dropped and the system SHOULD log an error\n       message.\n\
    \   2.  If there is no outstanding rekeying request, the packet\n       processing\
    \ continues as specified in Section 6.9.1.\n   3.  If there is an outstanding\
    \ rekeying request, the UPDATE MUST be\n       acknowledged, the received ESP_INFO\
    \ (and possibly DIFFIE_HELLMAN)\n       parameters must be saved, and the packet\
    \ processing continues as\n       specified in Section 6.10.\n"
- title: '6.9.1.  Processing UPDATE Packet: No Outstanding Rekeying Request'
  contents:
  - "6.9.1.  Processing UPDATE Packet: No Outstanding Rekeying Request\n   The following\
    \ steps define the conceptual processing rules for\n   handling a received UPDATE\
    \ packet with the ESP_INFO parameter:\n   1.  The system consults its policy to\
    \ see if it needs to generate a\n       new Diffie-Hellman key, and generates\
    \ a new key (with same Group\n       ID) if needed.  The system records any newly\
    \ generated or\n       received Diffie-Hellman keys for use in KEYMAT generation\
    \ upon\n       finalizing the ESP SA update.\n   2.  If the system generated a\
    \ new Diffie-Hellman key in the previous\n       step, or if it received a DIFFIE_HELLMAN\
    \ parameter, it sets the\n       ESP_INFO KEYMAT Index to zero.  Otherwise, the\
    \ ESP_INFO KEYMAT\n       Index MUST be greater than or equal to the index of\
    \ the next byte\n       to be drawn from the current KEYMAT.  In this case, it\
    \ is\n       RECOMMENDED that the host use the KEYMAT Index requested by the\n\
    \       peer in the received ESP_INFO.\n   3.  The system creates an UPDATE packet,\
    \ which contains an ESP_INFO\n       parameter and the optional DIFFIE_HELLMAN\
    \ parameter.  This UPDATE\n       would also typically acknowledge the peer's\
    \ UPDATE with an ACK\n       parameter, although a separate UPDATE ACK may be\
    \ sent.\n   4.  The system sends the UPDATE packet and stores any received\n \
    \      ESP_INFO and DIFFIE_HELLMAN parameters.  At this point, it only\n     \
    \  needs to receive an acknowledgment for the newly sent UPDATE to\n       finish\
    \ ESP SA update.  In the usual case, the acknowledgment is\n       handled by\
    \ the underlying UPDATE mechanism.\n"
- title: 6.10.  Finalizing Rekeying
  contents:
  - "6.10.  Finalizing Rekeying\n   A system finalizes rekeying when it has both received\
    \ the\n   corresponding UPDATE acknowledgment packet from the peer and it has\n\
    \   successfully received the peer's UPDATE.  The following steps are\n   taken:\n\
    \   1.  If the received UPDATE messages contain a new Diffie-Hellman key,\n  \
    \     the system has a new Diffie-Hellman key due to initiating ESP SA\n     \
    \  update, or both, the system generates a new KEYMAT.  If there is\n       only\
    \ one new Diffie-Hellman key, the old existing key is used as\n       the other\
    \ key.\n   2.  If the system generated a new KEYMAT in the previous step, it\n\
    \       sets the KEYMAT Index to zero, independent of whether the\n       received\
    \ UPDATE included a Diffie-Hellman key or not.  If the\n       system did not\
    \ generate a new KEYMAT, it uses the greater KEYMAT\n       Index of the two (sent\
    \ and received) ESP_INFO parameters.\n   3.  The system draws keys for new incoming\
    \ and outgoing ESP SAs,\n       starting from the KEYMAT Index, and prepares new\
    \ incoming and\n       outgoing ESP SAs.  The SPI for the outgoing SA is the new\
    \ SPI\n       value received in an ESP_INFO parameter.  The SPI for the\n    \
    \   incoming SA was generated when the ESP_INFO was sent to the peer.\n      \
    \ The order of the keys retrieved from the KEYMAT during the\n       rekeying\
    \ process is similar to that described in Section 7.\n       Note, that only IPsec\
    \ ESP keys are retrieved during the rekeying\n       process, not the HIP keys.\n\
    \   4.  The system starts to send to the new outgoing SA and prepares to\n   \
    \    start receiving data on the new incoming SA.  Once the system\n       receives\
    \ data on the new incoming SA, it may safely delete the\n       old SAs.\n"
- title: 6.11.  Processing NOTIFY Packets
  contents:
  - "6.11.  Processing NOTIFY Packets\n   The processing of NOTIFY packets is described\
    \ in the HIP base\n   specification.\n"
- title: 7.  Keying Material
  contents:
  - "7.  Keying Material\n   The keying material is generated as described in the\
    \ HIP base\n   specification.  During the base exchange, the initial keys are\
    \ drawn\n   from the generated material.  After the HIP association keys have\n\
    \   been drawn, the ESP keys are drawn in the following order:\n      SA-gl ESP\
    \ encryption key for HOST_g's outgoing traffic\n      SA-gl ESP authentication\
    \ key for HOST_g's outgoing traffic\n      SA-lg ESP encryption key for HOST_l's\
    \ outgoing traffic\n      SA-lg ESP authentication key for HOST_l's outgoing traffic\n\
    \   HOST_g denotes the host with the greater HIT value, and HOST_l\n   denotes\
    \ the host with the lower HIT value.  When HIT values are\n   compared, they are\
    \ interpreted as positive (unsigned) 128-bit\n   integers in network byte order.\n\
    \   The four HIP keys are only drawn from KEYMAT during a HIP I1->R2\n   exchange.\
    \  Subsequent rekeys using UPDATE will only draw the four ESP\n   keys from KEYMAT.\
    \  Section 6.9 describes the rules for reusing or\n   regenerating KEYMAT based\
    \ on the rekeying.\n   The number of bits drawn for a given algorithm is the \"\
    natural\" size\n   of the keys.  For the mandatory algorithms, the following sizes\n\
    \   apply:\n   AES  128 bits\n   SHA-1  160 bits\n   NULL  0 bits\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   In this document, the usage of ESP [RFC4303]\
    \ between HIP hosts to\n   protect data traffic is introduced.  The Security Considerations\
    \ for\n   ESP are discussed in the ESP specification.\n   There are different\
    \ ways to establish an ESP Security Association\n   between two nodes.  This can\
    \ be done, e.g., using IKE [RFC4306].\n   This document specifies how the Host\
    \ Identity Protocol is used to\n   establish ESP Security Associations.\n   The\
    \ following issues are new or have changed from the standard ESP\n   usage:\n\
    \   o  Initial keying material generation\n   o  Updating the keying material\n\
    \   The initial keying material is generated using the Host Identity\n   Protocol\
    \ [RFC5201] using the Diffie-Hellman procedure.  This document\n   extends the\
    \ usage of the UPDATE packet, defined in the base\n   specification, to modify\
    \ existing ESP SAs.  The hosts may rekey,\n   i.e., force the generation of new\
    \ keying material using the Diffie-\n   Hellman procedure.  The initial setup\
    \ of ESP SA between the hosts is\n   done during the base exchange, and the message\
    \ exchange is protected\n   using methods provided by base exchange.  Changes\
    \ in connection\n   parameters means basically that the old ESP SA is removed\
    \ and a new\n   one is generated once the UPDATE message exchange has been completed.\n\
    \   The message exchange is protected using the HIP association keys.\n   Both\
    \ HMAC and signing of packets is used.\n"
- title: 9.  IANA Considerations
  contents:
  - "9.  IANA Considerations\n   This document defines additional parameters and NOTIFY\
    \ error types\n   for the Host Identity Protocol [RFC5201].\n   The new parameters\
    \ and their type numbers are defined in\n   Section 5.1.1 and Section 5.1.2, and\
    \ they have been added to the\n   Parameter Type namespace specified in [RFC5201].\n\
    \   The new NOTIFY error types and their values are defined in\n   Section 5.1.3,\
    \ and they have been added to the Notify Message Type\n   namespace specified\
    \ in [RFC5201].\n"
- title: 10.  Acknowledgments
  contents:
  - "10.  Acknowledgments\n   This document was separated from the base \"Host Identity\
    \ Protocol\"\n   specification in the beginning of 2005.  Since then, a number\
    \ of\n   people have contributed to the text by providing comments and\n   modification\
    \ proposals.  The list of people include Tom Henderson,\n   Jeff Ahrenholz, Jan\
    \ Melen, Jukka Ylitalo, and Miika Komu.  The\n   authors also want to thank Charlie\
    \ Kaufman for reviewing the document\n   with his eye on the usage of crypto algorithms.\n\
    \   Due to the history of this document, most of the ideas are inherited\n   from\
    \ the base \"Host Identity Protocol\" specification.  Thus, the list\n   of people\
    \ in the Acknowledgments section of that specification is\n   also valid for this\
    \ document.  Many people have given valuable\n   feedback, and our apologies to\
    \ anyone whose name is missing.\n"
- title: 11.  References
  contents:
  - '11.  References

    '
- title: 11.1.  Normative references
  contents:
  - "11.1.  Normative references\n   [RFC2119]   Bradner, S., \"Key words for use\
    \ in RFCs to Indicate\n               Requirement Levels\", BCP 14, RFC 2119,\
    \ March 1997.\n   [RFC2404]   Madson, C. and R. Glenn, \"The Use of HMAC-SHA-1-96\
    \ within\n               ESP and AH\", RFC 2404, November 1998.\n   [RFC3602]\
    \   Frankel, S., Glenn, R., and S. Kelly, \"The AES-CBC Cipher\n             \
    \  Algorithm and Its Use with IPsec\", RFC 3602,\n               September 2003.\n\
    \   [RFC4303]   Kent, S., \"IP Encapsulating Security Payload (ESP)\",\n     \
    \          RFC 4303, December 2005.\n   [RFC5201]   Moskowitz, R., Nikander, P.,\
    \ Jokela, P., Ed., and T.\n               Henderson, \"Host Identity Protocol\"\
    , RFC 5201,\n               April 2008.\n"
- title: 11.2.  Informative references
  contents:
  - "11.2.  Informative references\n   [ESP-BEET]  Nikander, P. and J. Melen, \"A\
    \ Bound End-to-End Tunnel\n               (BEET) mode for ESP\", Work in Progress,\
    \ November 2007.\n   [RFC3260]   Grossman, D., \"New Terminology and Clarifications\
    \ for\n               Diffserv\", RFC 3260, April 2002.\n   [RFC3474]   Lin, Z.\
    \ and D. Pendarakis, \"Documentation of IANA\n               assignments for Generalized\
    \ MultiProtocol Label Switching\n               (GMPLS) Resource Reservation Protocol\
    \ - Traffic\n               Engineering (RSVP-TE) Usage and Extensions for\n \
    \              Automatically Switched Optical Network (ASON)\", RFC 3474,\n  \
    \             March 2003.\n   [RFC4301]   Kent, S. and K. Seo, \"Security Architecture\
    \ for the\n               Internet Protocol\", RFC 4301, December 2005.\n   [RFC4306]\
    \   Kaufman, C., \"Internet Key Exchange (IKEv2) Protocol\",\n               RFC\
    \ 4306, December 2005.\n   [RFC4423]   Moskowitz, R. and P. Nikander, \"Host Identity\
    \ Protocol\n               (HIP) Architecture\", RFC 4423, May 2006.\n   [RFC5206]\
    \   Henderson, T., Ed., \"End-Host Mobility and Multihoming\n               with\
    \ the Host Identity Protocol\", RFC 5206, April 2008.\n"
- title: Appendix A.  A Note on Implementation Options
  contents:
  - "Appendix A.  A Note on Implementation Options\n   It is possible to implement\
    \ this specification in multiple different\n   ways.  As noted above, one possible\
    \ way of implementing this is to\n   rewrite IP headers below IPsec.  In such\
    \ an implementation, IPsec is\n   used as if it was processing IPv6 transport\
    \ mode packets, with the\n   IPv6 header containing HITs instead of IP addresses\
    \ in the source and\n   destination address fields.  In outgoing packets, after\
    \ IPsec\n   processing, the HITs are replaced with actual IP addresses, based\
    \ on\n   the HITs and the SPI.  In incoming packets, before IPsec processing,\n\
    \   the IP addresses are replaced with HITs, based on the SPI in the\n   incoming\
    \ packet.  In such an implementation, all IPsec policies are\n   based on HITs\
    \ and the upper layers only see packets with HITs in the\n   place of IP addresses.\
    \  Consequently, support of HIP does not\n   conflict with other uses of IPsec\
    \ as long as the SPI spaces are kept\n   separate.\n   Another way to implement\
    \ this specification is to use the proposed\n   BEET mode (A Bound End-to-End\
    \ mode for ESP, [ESP-BEET]).  The BEET\n   mode provides some features from both\
    \ IPsec tunnel and transport\n   modes.  The HIP uses HITs as the \"inner\" addresses\
    \ and IP addresses\n   as \"outer\" addresses, like IP addresses are used in the\
    \ tunnel mode.\n   Instead of tunneling packets between hosts, a conversion between\n\
    \   inner and outer addresses is made at end-hosts and the inner address\n   is\
    \ never sent on the wire after the initial HIP negotiation.  BEET\n   provides\
    \ IPsec transport mode syntax (no inner headers) with limited\n   tunnel mode\
    \ semantics (fixed logical inner addresses - the HITs - and\n   changeable outer\
    \ IP addresses).\n   Compared to the option of implementing the required address\
    \ rewrites\n   outside of IPsec, BEET has one implementation level benefit.  The\n\
    \   BEET-way of implementing the address rewriting keeps all the\n   configuration\
    \ information in one place, at the SAD.  On the other\n   hand, when address rewriting\
    \ is implemented separately, the\n   implementation must make sure that the information\
    \ in the SAD and the\n   separate address rewriting DB are kept in synchrony.\
    \  As a result,\n   the BEET-mode-based way of implementing this specification\
    \ is\n   RECOMMENDED over the separate implementation.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Petri Jokela\n   Ericsson Research NomadicLab\n   JORVAS\
    \  FIN-02420\n   FINLAND\n   Phone: +358 9 299 1\n   EMail: petri.jokela@nomadiclab.com\n\
    \   Robert Moskowitz\n   ICSAlabs, An Independent Division of Verizon Business\
    \ Systems\n   1000 Bent Creek Blvd, Suite 200\n   Mechanicsburg, PA\n   USA\n\
    \   EMail: rgm@icsalabs.com\n   Pekka Nikander\n   Ericsson Research NomadicLab\n\
    \   JORVAS  FIN-02420\n   FINLAND\n   Phone: +358 9 299 1\n   EMail: pekka.nikander@nomadiclab.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2008).\n   This document\
    \ is subject to the rights, licenses and restrictions\n   contained in BCP 78,\
    \ and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE\
    \ INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED,\
    \ INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION\
    \ HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY\
    \ OR FITNESS FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
