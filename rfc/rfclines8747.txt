Abstract This specification describes how to declare in a CBOR Web Token (CWT) (which is defined by RFC 8392) that the presenter of the CWT possesses a particular proof of possession key.
Being able to prove possession of a key is also sometimes described as being the holder  of key.
This specification provides equivalent functionality to "Proof of Possession Key Semantics for JSON Web Tokens (JWTs)" (RFC 7800) but using Concise Binary Object Representation (CBOR) and CWTs rather than JavaScript Object Notation (JSON) and JSON Web Tokens (JWTs).
This specification describes how a CBOR Web Token (CWT) [RFC8392] can declare that the presenter of the CWT possesses a particular proof  of possession (PoP) key.
Proof of possession of a key is also sometimes described as being the holder of key.
This specification provides equivalent functionality to "Proof of Possession Key Semantics for JSON Web Tokens (JWTs)"
[RFC7800] but using Concise Binary Object Representation (CBOR)
[RFC7049] and CWTs [RFC8392] rather than JavaScript Object Notation (JSON) [RFC8259] and JSON Web Tokens (JWTs)
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in BCP 14
when, and only when, they appear in all capitals, as shown here.
This specification uses terms defined in the CBOR Web Token (CWT) [RFC8392], CBOR Object Signing and Encryption (COSE)
[RFC8152], and Concise Binary Object Representation (CBOR)
These terms are defined by this specification: Issuer Party that creates the CWT and binds the claims about the subject to the proof of possession key.
Presenter Party that proves possession of a private key (for asymmetric key cryptography) or secret key (for symmetric key cryptography) to a recipient of a CWT.
In the context of OAuth, this party is also called the OAuth Client.
Recipient Party that receives the CWT containing the proof of possession key information from the presenter.
In the context of OAuth, this party is also called the OAuth Resource Server.
This specification provides examples in CBOR extended diagnostic notation, as defined in Appendix G of [RFC8610].
The examples include line breaks for readability.
Representations for Proof of Possession Keys
By including a "cnf" (confirmation) claim in a CWT,
the issuer of the CWT declares that the presenter possesses a particular key and that the recipient can cryptographically confirm that the presenter has possession of that key.
The value of the "cnf" claim is a CBOR map (which is defined in Section 2.1 of [RFC7049]) and the members of that map identify the proof of possession key.
The presenter can be identified in one of several ways by the CWT, depending upon the application requirements.
For instance, some applications may use the CWT "sub" (subject) claim [RFC8392] to identify the presenter.
Other applications may use the "iss" (issuer) claim [RFC8392] to identify the presenter.
In some applications, the subject identifier might be relative to the issuer identified by the "iss" claim.
The actual mechanism used is dependent upon the application.
The case in which the presenter is the subject of the CWT is analogous to Security Assertion Markup Language (SAML)
2.0 [OASIS.saml core 2.0 os] SubjectConfirmation usage.
The "cnf" claim in the CWT is used to carry confirmation methods.
Some of them use proof of possession keys, while others do not.
This design is analogous to the SAML 2.0
[OASIS.saml core 2.0 os] SubjectConfirmation element in which a number of different subject confirmation methods can be included (including proof of possession key information).
The set of confirmation members that a CWT must contain to be considered valid is context dependent and is outside the scope of this specification.
Specific applications of CWTs will require implementations to understand and process some confirmation members in particular ways.
However, in the absence of such requirements, all confirmation members that are not understood by implementations MUST be ignored.
Section 7.2 establishes the IANA "CWT Confirmation Methods" registry for CWT "cnf" member values and registers the members defined by this specification.
Other specifications can register other members used for confirmation, including other members for conveying proof of  possession keys using different key representations.
The "cnf" claim value MUST represent only a single proof of  possession key.
At most one of the "COSE Key" and "Encrypted COSE Key" confirmation values defined in Table 1 may be present.
Note that if an application needs to represent multiple proof of possession keys in the same CWT, one way for it to achieve this is to use other claim names (in addition to "cnf") to hold the additional proof of possession key information.
These claims could use the same syntax and semantics as the "cnf" claim.
Those claims would be defined by applications or other specifications and could be registered in the IANA "CBOR Web Token (CWT) Claims" registry [IANA.CWT.Claims].
Summary of the "cnf" Names, Keys, and Value Types 3.2.
Representation of an Asymmetric Proof of Possession Key
When the key held by the presenter is an asymmetric private key, the "COSE Key" member is a COSE Key
[RFC8152] representing the corresponding asymmetric public key.
: h'd7cc072de2205bdc1537a543d53c60a6acb62eccd890c7fa27c9 e354089bbe13', /y/  3 : h'f95e1d4b851a2cc80fff87d8e23f22afb725d535e515d020731e
The "COSE Key" member MAY also be used for a COSE Key representing a symmetric key, provided that the CWT is encrypted so that the key is not revealed to unintended parties.
The means of encrypting a CWT is explained in [RFC8392].
If the CWT is not encrypted, the symmetric key MUST be encrypted as described in Section 3.3.
This procedure is equivalent to the one defined in Section 3.3 of [RFC7800].
Representation of an Encrypted Symmetric Proof of Possession Key
When the key held by the presenter is a symmetric key, the "Encrypted COSE Key" member is an encrypted COSE Key
[RFC8152] representing the symmetric key encrypted to a key known to the recipient using COSE Encrypt or COSE Encrypt0.
The COSE Key representation is used as the plaintext when encrypting the key.
"coaps://server.example.com", /sub/ 2 : "24400320", /aud/ 3: "s6BhdRkqt3", /exp/ 4 : 1311281970, /iat/
5 : 1311280970, /cnf/ 8 :
The example above was generated with the key: h'6162630405060708090a0b0c0d0e0f10' 3.4.
Representation of a Key ID for a Proof of Possession Key
The proof of possession key can also be identified using a Key ID instead of communicating the actual key, provided the recipient is able to obtain the identified key using the Key ID.
In this case, the issuer of a CWT declares that the presenter possesses a particular key and that the recipient can cryptographically confirm the presenter's proof of possession of the key by including a "cnf" claim in the CWT whose value is a CBOR map containing a "kid" member identifying the key.
For instance, some applications may choose to use a cryptographic hash of the public key value as the "kid" value.
Note that the use of a Key ID to identify a proof of possession key needs to be carefully circumscribed, as described below and in Section 6.
In cases where the Key ID is not a cryptographic value derived from the key or where not all of the parties involved are validating the cryptographic derivation, implementers should expect collisions where different keys are assigned the same Key ID.
Recipients of a CWT with a PoP key linked through only a Key ID should be prepared to handle such situations.
In the world of constrained Internet of Things (IoT) devices, there is frequently a restriction on the size of Key IDs, either because of table constraints or a desire to keep message sizes small.
Note that the value of a Key ID for a specific key is not necessarily the same for different parties.
When sending a COSE encrypted message with a shared key, the Key ID may be different on both sides of the conversation, with the appropriate one being included in the message based on the recipient of the message.
Proof of possession is often demonstrated by having the presenter sign a value determined by the recipient using the key possessed by the presenter.
This value is sometimes called a "nonce" or a "challenge".
There are, however, also other means to demonstrate freshness of the exchange and to link the proof of possession key to the participating parties, as demonstrated by various authentication and key exchange protocols.
The means of communicating the nonce and the nature of its contents are intentionally not described in this specification, as different protocols will communicate this information in different ways.
Likewise, the means of communicating the signed nonce is also not specified, as this is also protocol specific.
Note that other means of proving possession of the key exist, which could be used in conjunction with a CWT's confirmation key.
Applications making use of such alternate means are encouraged to register them in the IANA "CBOR Web Token (CWT) Confirmation Methods" registry established in Section 7.2. 4.
All the security considerations that are discussed in [RFC8392] also apply here.
In addition, proof of possession introduces its own unique security issues.
Possessing a key is only valuable if it is kept secret.
Appropriate means must be used to ensure that unintended parties do not learn private key or symmetric key values.
Applications utilizing proof of possession SHOULD also utilize audience restriction, as described in Section 3.1.3 of [RFC8392], because it provides additional protections.
Audience restriction can be used by recipients to reject messages intended for different recipients.
(Of course, applications not using proof of possession can also benefit from using audience restriction to reject messages intended for different recipients.)
CBOR Web Tokens with proof of possession keys are used in context of an architecture, such as the ACE OAuth Framework [ACE OAUTH], in which protocols are used by a presenter to request these tokens and to subsequently use them with recipients.
Proof of possession only provides the intended security gains when the proof is known to be current and not subject to replay attacks; security protocols using mechanisms such as nonces and timestamps can be used to avoid the risk of replay when performing proof of possession for a token.
Note that a discussion of the architecture or specific protocols that CWTs with proof of possession keys are used with is beyond the scope of this specification.
As is the case with other information included in a CWT, it is necessary to apply data origin authentication and integrity protection (via a keyed message digest or a digital signature).
Data origin authentication ensures that the recipient of the CWT learns about the entity that created the CWT, since this will be important for any policy decisions.
Integrity protection prevents an adversary from changing any elements conveyed within the CWT payload.
Special care has to be applied when carrying symmetric keys inside the CWT since those not only require integrity protection but also confidentiality protection.
As described in Section 6 (Key Identification) and Appendix D
(Notes on Key Selection) of [JWS]
, it is important to make explicit trust decisions about the keys.
Proof of possession signatures made with keys not meeting the application's trust criteria MUST NOT be relied upon.
A proof of possession key can be used as a correlation handle if the same key is used on multiple occasions.
Thus, for privacy reasons, it is recommended that different proof of possession keys be used when interacting with different parties.
The use of CWTs with proof of possession keys requires additional information to be shared between the involved parties in order to ensure correct processing.
The recipient needs to be able to use credentials to verify the authenticity and integrity of the CWT.
Furthermore, the recipient may need to be able to decrypt either the whole CWT or the encrypted parts
This requires the recipient to know information about the issuer.
Likewise, there needs to be agreement between the issuer and the recipient about the claims being used (which is also true of CWTs in general).
When an issuer creates a CWT containing a Key ID claim, it needs to make sure that it does not issue another CWT with different claims containing the same Key ID within the lifetime of the CWTs, unless intentionally desired.
Failure to do so may allow one party to impersonate another party, with the potential to gain additional privileges.
A case where such reuse of a Key ID would be intentional is when a presenter obtains a CWT with different claims (e.g., extended scope) for the same recipient but wants to continue using an existing security association (e.g., a DTLS session) bound to the key identified by the Key ID.
Likewise, if PoP keys are used for multiple different kinds of CWTs in an application and the PoP keys are identified by Key IDs, care must be taken to keep the keys for the different kinds of CWTs segregated so that an attacker cannot cause the wrong PoP key to be used by using a valid Key ID for the wrong kind of CWT.
Using an audience restriction for the CWT would be one strategy to mitigate this risk.
The following registration procedure is used for all the registries established by this specification.
Values are registered on a Specification Required
[RFC8126] basis after a three week review period on the <cwt reg review@ietf.org> mailing list, on the advice of one or more designated experts.
However, to allow for the allocation of values prior to publication, the designated experts may approve registration once they are satisfied that such a specification will be published.
Registration requests sent to the mailing list for review should use an appropriate subject (e.g., "Request to Register CWT Confirmation Method: example").
Registration requests that are undetermined for a period longer than 21 days can be brought directly to IANA's attention (using the iana@iana.org mailing list) for resolution.
Designated experts should determine whether a registration request contains enough information for the registry to be populated with the new values and whether the proposed new functionality already exists.
In the case of an incomplete registration or an attempt to register already existing functionality, the designated experts should ask for corrections or reject the registration.
It is suggested that multiple designated experts be appointed who are able to represent the perspectives of different applications using this specification in order to enable broadly informed review of registration decisions.
In cases where a registration decision could be perceived as creating a conflict of interest for a particular expert, that expert should defer to the judgment of the other experts.
CBOR Web Token Claims Registration
This specification registers the "cnf" claim in the IANA "CBOR Web Token (CWT) Claims" registry [IANA.CWT.Claims], established by [RFC8392].
Confirmation    JWT Claim Name: "cnf"
Claim Key: 8    Claim Value Type(s
): map    Change Controller: IESG    Specification Document(s)
: Section 3.1 of RFC 8747 7.2.
This specification establishes the IANA "CWT Confirmation Methods" registry for CWT "cnf" member values.
The registry records the confirmation method member and a reference to the specification that defines it.
Registration Template Confirmation Method Name:
The human readable name requested (e.g., "kid").
Brief description of the confirmation method (e.g., "Key Identifier").
Claim Name of the equivalent JWT confirmation method value, as registered in the "JSON Web Token Claims" subregistry in the "JSON Web Token (JWT)" registry [IANA.JWT].
CWT claims should normally have a corresponding JWT claim.
If a corresponding JWT claim would not make sense, the designated experts can choose to accept registrations for which the JWT Claim Name is listed as "N/A".
CBOR map key value for the confirmation method.
Confirmation Value Type(s): CBOR types that can be used for the confirmation method value.
For Standards Track RFCs, list the "IESG".
For others, give the name of the responsible party.
: Reference to the document or documents that specify the parameter, preferably including URIs that can be used to retrieve copies of the documents.
An indication of the relevant sections may also be included but is not required.
Note that the designated experts and IANA must be able to obtain copies of the specification document(s) to perform their work.
Initial Registry Contents    Confirmation Method Name: "COSE Key
COSE Key Representing Public Key    JWT Confirmation Method Name: "
COSE Key structure    Change Controller: IESG    Specification Document(s):
Section 3.2 of RFC 8747    Confirmation Method Name: "Encrypted COSE Key
COSE Encrypt or COSE Encrypt0 structure (with an optional corresponding COSE Encrypt or COSE Encrypt0 tag)
Change Controller: IESG    Specification Document(s):
Section 3.3 of RFC 8747    Confirmation Method Name:
Key Identifier    JWT Confirmation Method Name:
binary string    Change Controller: IESG    Specification Document(s)
: Section 3.4 of RFC 8747
