- title: __initial_text__
  contents:
  - ''
- title: Internet Research Task Force (IRTF)                        CJ. Bernardos
  contents:
  - "Internet Research Task Force (IRTF)                        CJ. Bernardos\n  \
    \             Network Virtualization Research Challenges\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes open research challenges for network\n \
    \  virtualization.  Network virtualization is following a similar path\n   as\
    \ previously taken by cloud computing.  Specifically, cloud\n   computing popularized\
    \ migration of computing functions (e.g.,\n   applications) and storage from local,\
    \ dedicated, physical resources\n   to remote virtual functions accessible through\
    \ the Internet.  In a\n   similar manner, network virtualization is encouraging\
    \ migration of\n   networking functions from dedicated physical hardware nodes\
    \ to a\n   virtualized pool of resources.  However, network virtualization can\n\
    \   be considered to be a more complex problem than cloud computing as it\n  \
    \ not only involves virtualization of computing and storage functions\n   but\
    \ also involves abstraction of the network itself.  This document\n   describes\
    \ current research and engineering challenges in network\n   virtualization including\
    \ the guarantee of quality of service,\n   performance improvement, support for\
    \ multiple domains, network\n   slicing, service composition, device virtualization,\
    \ privacy and\n   security, separation of control concerns, network function placement,\n\
    \   and testing.  In addition, some proposals are made for new activities\n  \
    \ in the IETF and IRTF that could address some of these challenges.\n   This document\
    \ is a product of the Network Function Virtualization\n   Research Group (NFVRG).\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Research Task Force\n   (IRTF).  The IRTF publishes the results\
    \ of Internet-related research\n   and development activities.  These results\
    \ might not be suitable for\n   deployment.  This RFC represents the consensus\
    \ of the Network\n   Function Virtualization Research Group of the Internet Research\
    \ Task\n   Force (IRTF).  Documents approved for publication by the IRSG are not\n\
    \   candidates for any level of Internet Standard; see Section 2 of RFC\n   7841.\n\
    \   Information about the current status of this document, any errata,\n   and\
    \ how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8568.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2019 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (https://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction and Scope  . . . . . . . . . . . . . .\
    \ . . . . .   4\n   2.  Terminology . . . . . . . . . . . . . . . . . . . . .\
    \ . . . .   4\n   3.  Background  . . . . . . . . . . . . . . . . . . . . . .\
    \ . . .   6\n     3.1.  Network Function Virtualization . . . . . . . . . . .\
    \ . .   6\n     3.2.  Software-Defined Networking . . . . . . . . . . . . . .\
    \ .   9\n     3.3.  ITU-T Functional Architecture of SDN  . . . . . . . . . .\
    \  13\n     3.4.  Multi-Access Edge Computing . . . . . . . . . . . . . . .  15\n\
    \     3.5.  IEEE 802.1CF (OmniRAN)  . . . . . . . . . . . . . . . . .  15\n  \
    \   3.6.  Distributed Management Task Force (DMTF)  . . . . . . . .  15\n    \
    \ 3.7.  Open-Source Initiatives . . . . . . . . . . . . . . . . .  16\n   4. \
    \ Network Virtualization Challenges . . . . . . . . . . . . . .  18\n     4.1.\
    \  Overview  . . . . . . . . . . . . . . . . . . . . . . . .  18\n     4.2.  Guaranteeing\
    \ Quality of Service . . . . . . . . . . . . .  18\n       4.2.1.  Virtualization\
    \ Technologies . . . . . . . . . . . . .  18\n       4.2.2.  Metrics for NFV Characterization\
    \  . . . . . . . . . .  19\n       4.2.3.  Predictive Analysis . . . . . . . .\
    \ . . . . . . . . .  20\n       4.2.4.  Portability . . . . . . . . . . . . .\
    \ . . . . . . . .  20\n     4.3.  Performance Improvement . . . . . . . . . .\
    \ . . . . . . .  21\n       4.3.1.  Energy Efficiency . . . . . . . . . . . .\
    \ . . . . . .  21\n       4.3.2.  Improved Link Usage . . . . . . . . . . . .\
    \ . . . . .  21\n     4.4.  Multiple Domains  . . . . . . . . . . . . . . . .\
    \ . . . .  22\n     4.5.  5G and Network Slicing  . . . . . . . . . . . . . .\
    \ . . .  22\n       4.5.1.  Virtual Network Operators . . . . . . . . . . . .\
    \ . .  23\n       4.5.2.  Extending Virtual Networks and Systems to the\n    \
    \           Internet of Things  . . . . . . . . . . . . . . . . .  24\n     4.6.\
    \  Service Composition . . . . . . . . . . . . . . . . . . .  25\n     4.7.  Device\
    \ Virtualization for End Users . . . . . . . . . . .  27\n     4.8.  Security\
    \ and Privacy  . . . . . . . . . . . . . . . . . .  27\n     4.9.  Separation\
    \ of Control Concerns  . . . . . . . . . . . . .  29\n     4.10. Network Function\
    \ Placement  . . . . . . . . . . . . . . .  29\n     4.11. Testing . . . . . .\
    \ . . . . . . . . . . . . . . . . . . .  30\n       4.11.1.  Changes in Methodology\
    \ . . . . . . . . . . . . . . .  30\n       4.11.2.  New Functionality  . . .\
    \ . . . . . . . . . . . . . .  31\n       4.11.3.  Opportunities  . . . . . .\
    \ . . . . . . . . . . . . .  32\n   5.  Technology Gaps and Potential IETF Efforts\
    \  . . . . . . . . .  33\n   6.  NFVRG Focus Areas . . . . . . . . . . . . . .\
    \ . . . . . . . .  34\n   7.  IANA Considerations . . . . . . . . . . . . . .\
    \ . . . . . . .  35\n   8.  Security Considerations . . . . . . . . . . . . .\
    \ . . . . . .  35\n   9.  Informative References  . . . . . . . . . . . . . .\
    \ . . . . .  35\n   Acknowledgments . . . . . . . . . . . . . . . . . . . . .\
    \ . . . .  41\n   Authors' Addresses  . . . . . . . . . . . . . . . . . . . .\
    \ . . .  41\n"
- title: 1.  Introduction and Scope
  contents:
  - "1.  Introduction and Scope\n   The telecommunications sector is experiencing\
    \ a major revolution that\n   will shape the way networks and services are designed\
    \ and deployed\n   for the next few decades.  In order to cope with continuously\n\
    \   increasing demand and cost, network operators are taking lessons from\n  \
    \ the IT paradigm of cloud computing.  This new approach of\n   virtualizing network\
    \ functions will enable multi-fold advantages by\n   moving communication services\
    \ from bespoke hardware in the operator's\n   core network to Commercial Off-The-Shelf\
    \ (COTS) equipment distributed\n   across data centers.\n   Some of the network\
    \ virtualization mechanisms that are being\n   considered include the following:\
    \ sharing of network infrastructure\n   to reduce costs, virtualization of core\
    \ and edge servers/services\n   running in data centers as a way of supporting\
    \ their load-aware\n   elastic dimensioning, and dynamic energy policies to reduce\
    \ the\n   electricity consumption.\n   This document presents research and engineering\
    \ challenges in network\n   virtualization that need to be addressed in order\
    \ to achieve these\n   goals, spanning from pure research and engineering/standards\
    \ space.\n   The objective of this memo is to document the technical challenges\n\
    \   and corresponding current approaches and to expose requirements that\n   should\
    \ be addressed by future research and standards work.\n   This document represents\
    \ the consensus of the Network Function\n   Virtualization Research Group (NFVRG).\
    \  It has been reviewed by the\n   RG members active in the specific areas of\
    \ work covered by the\n   document.\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   The following terms used in this document are defined by\
    \ the ETSI\n   Network Function Virtualization (NFV) Industrial Study Group (ISG)\n\
    \   [etsi_gs_nfv_003], the Open Networking Foundation (ONF) [onf_tr_521],\n  \
    \ and the IETF [RFC7426] [RFC7665]:\n   Application Plane:  The collection of\
    \ applications and services that\n      program network behavior.\n   Control\
    \ Plane (CP):  The collection of functions responsible for\n      controlling\
    \ one or more network devices.  The CP instructs network\n      devices with respect\
    \ to how to process and forward packets.  The\n      control plane interacts primarily\
    \ with the forwarding plane and,\n      to a lesser extent, with the operational\
    \ plane.\n   Forwarding Plane (FP):  The collection of resources across all\n\
    \      network devices responsible for forwarding traffic.\n   Management Plane\
    \ (MP):  The collection of functions responsible for\n      monitoring, configuring,\
    \ and maintaining one or more network\n      devices or parts of network devices.\
    \  The management plane is\n      mostly related to the operational plane (it\
    \ is related less to the\n      forwarding plane).\n   NFV Infrastructure (NFVI):\
    \  Totality of all hardware and software\n      components that build up the environment\
    \ in which VNFs are\n      deployed.\n   NFV Management and Orchestration (NFV-MANO):\
    \  Functions collectively\n      provided by NFVO, VNFM, and VIM.\n   NFV Orchestrator\
    \ (NFVO):  Functional block that manages the Network\n      Service (NS) life\
    \ cycle and coordinates the management of NS life\n      cycle, VNF life cycle\
    \ (supported by the VNFM) and NFVI resources\n      (supported by the VIM) to\
    \ ensure an optimized allocation of the\n      necessary resources and connectivity.\n\
    \   Operational Plane (OP):  The collection of resources responsible for\n   \
    \   managing the overall operation of individual network devices.\n   Physical\
    \ Network Function (PNF):  Physical implementation of a\n      network function\
    \ in a monolithic realization.\n   Service Function Chain (SFC):  For a given\
    \ service, the abstracted\n      view of the required service functions and the\
    \ order in which they\n      are to be applied.  This is somehow equivalent to\
    \ the Network\n      Function Forwarding Graph (NF-FG) at ETSI.\n   Service Function\
    \ Path (SFP):  The selection of specific service\n      function instances on\
    \ specific network nodes to form a service\n      graph through which an SFC is\
    \ instantiated.\n   Virtualized Infrastructure Manager (VIM):  Functional block\
    \ that is\n      responsible for controlling and managing the NFVI compute,\n\
    \      storage, and network resources, usually within one infrastructure\n   \
    \   operator's domain.\n   Virtualized Network Function (VNF):  Implementation\
    \ of a Network\n      Function that can be deployed on a Network Function Virtualization\n\
    \      Infrastructure (NFVI).\n   Virtualized Network Function Manager (VNFM):\
    \  Functional block that\n      is responsible for the life-cycle management of\
    \ VNF.\n"
- title: 3.  Background
  contents:
  - "3.  Background\n   This section briefly describes some basic background technologies\
    \ as\n   well as other Standards Developing Organizations (SDOs) and open-\n \
    \  source initiatives working on network virtualization or related\n   topics.\n"
- title: 3.1.  Network Function Virtualization
  contents:
  - "3.1.  Network Function Virtualization\n   The ETSI ISG Network Function Virtualization\
    \ (NFV) is a working group\n   that, since 2012, has aimed to evolve quasi-standard\
    \ IT\n   virtualization technology to consolidate many network equipment types\n\
    \   into industry standard high-volume servers, switches, and storage.\n   It\
    \ enables implementing network functions in software that can run on\n   a range\
    \ of industry-standard server hardware and can be moved to, or\n   loaded in,\
    \ various locations in the network as required, without the\n   need to install\
    \ new equipment.  The ETSI NFV is one of the\n   predominant NFV reference framework\
    \ and architectural footprints\n   [nfv_sota_research_challenges].  The ETSI NFV\
    \ framework architecture\n   is composed of three domains (Figure 1):\n   o  Virtualized\
    \ Network Function, running over the NFVI.\n   o  NFVI, including the diversity\
    \ of physical resources and how these\n      can be virtualized.  NFVI supports\
    \ the execution of the VNFs.\n   o  NFV Management and Orchestration, which covers\
    \ the orchestration\n      and life-cycle management of physical and/or software\
    \ resources\n      that support the infrastructure virtualization, and the life-cycle\n\
    \      management of VNFs.  NFV Management and Orchestration focuses on\n    \
    \  all virtualization-specific management tasks necessary in the NFV\n      framework.\n\
    \   +-------------------------------------------+  +---------------+\n   |   Virtualized\
    \ Network Functions (VNFs)    |  |               |\n   |  -------   -------  \
    \ -------   -------    |  |               |\n   |  |     |   |     |   |     |\
    \   |     |    |  |               |\n   |  | VNF |   | VNF |   | VNF |   | VNF\
    \ |    |  |               |\n   |  |     |   |     |   |     |   |     |    |\
    \  |               |\n   |  -------   -------   -------   -------    |  |    \
    \           |\n   +-------------------------------------------+  |           \
    \    |\n                                                  |               |\n\
    \   +-------------------------------------------+  |               |\n   |   \
    \      NFV Infrastructure (NFVI)         |  |      NFV      |\n   | -----------\
    \    -----------    ----------- |  |  Management   |\n   | | Virtual |    | Virtual\
    \ |    | Virtual | |  |      and      |\n   | | Compute |    | Storage |    |\
    \ Network | |  | Orchestration |\n   | -----------    -----------    -----------\
    \ |  |               |\n   | +---------------------------------------+ |  |  \
    \             |\n   | |         Virtualization Layer          | |  |         \
    \      |\n   | +---------------------------------------+ |  |               |\n\
    \   | +---------------------------------------+ |  |               |\n   | | -----------\
    \  -----------  ----------- | |  |               |\n   | | | Compute |  | Storage\
    \ |  | Network | | |  |               |\n   | | -----------  -----------  -----------\
    \ | |  |               |\n   | |          Hardware resources           | |  |\
    \               |\n   | +---------------------------------------+ |  |       \
    \        |\n   +-------------------------------------------+  +---------------+\n\
    \                       Figure 1: ETSI NFV Framework\n   The NFV architectural\
    \ framework identifies functional blocks and the\n   main reference points between\
    \ such blocks.  Some of these are already\n   present in current deployments,\
    \ whilst others might be necessary\n   additions in order to support the virtualization\
    \ process and\n   consequent operation.  The functional blocks are (Figure 2):\n\
    \   o  Virtualized Network Function (VNF)\n   o  Element Management (EM)\n   o\
    \  NFV Infrastructure, including: Hardware and virtualized resources\n      as\
    \ well as the Virtualization Layer.\n   o  Virtualized Infrastructure Manager(s)\
    \ (VIM)\n   o  NFV Orchestrator\n   o  VNF Manager(s)\n   o  Service, VNF and\
    \ Infrastructure Description\n   o  Operational Support Systems and Business Support\
    \ Systems (OSS and\n      BSS)\n                                             \
    \     +--------------------+\n   +-------------------------------------------+\
    \  | ----------------   |\n   |                 OSS/BSS                   |  |\
    \ | NFV          |   |\n   +-------------------------------------------+  | |\
    \ Orchestrator +-- |\n                                                  | ---+------------\
    \ | |\n   +-------------------------------------------+  |    |             |\
    \ |\n   |  ---------     ---------     ---------    |  |    |             | |\n\
    \   |  | EM 1  |     | EM 2  |     | EM 3  |    |  |    |             | |\n  \
    \ |  ----+----     ----+----     ----+----    |  | ---+----------   | |\n   |\
    \      |             |             |        |--|-|    VNF     |   | |\n   |  ----+----\
    \     ----+----     ----+----    |  | | manager(s) |   | |\n   |  | VNF 1 |  \
    \   | VNF 2 |     | VNF 3 |    |  | ---+----------   | |\n   |  ----+----    \
    \ ----+----     ----+----    |  |    |             | |\n   +------|-------------|-------------|--------+\
    \  |    |             | |\n          |             |             |           |\
    \    |             | |\n   +------+-------------+-------------+--------+  |  \
    \  |             | |\n   |         NFV Infrastructure (NFVI)         |  |    |\
    \             | |\n   | -----------    -----------    ----------- |  |    |  \
    \           | |\n   | | Virtual |    | Virtual |    | Virtual | |  |    |    \
    \         | |\n   | | Compute |    | Storage |    | Network | |  |    |      \
    \       | |\n   | -----------    -----------    ----------- |  | ---+------  \
    \     | |\n   | +---------------------------------------+ |  | |        |    \
    \   | |\n   | |         Virtualization Layer          | |--|-| VIM(s) +--------\
    \ |\n   | +---------------------------------------+ |  | |        |         |\n\
    \   | +---------------------------------------+ |  | ----------         |\n  \
    \ | | -----------  -----------  ----------- | |  |                    |\n   |\
    \ | | Compute |  | Storage |  | Network | | |  |                    |\n   | |\
    \ | hardware|  | hardware|  | hardware| | |  |                    |\n   | | -----------\
    \  -----------  ----------- | |  |                    |\n   | |          Hardware\
    \ resources           | |  |  NFV Management    |\n   | +---------------------------------------+\
    \ |  | and Orchestration  |\n   +-------------------------------------------+\
    \  +--------------------+\n                 Figure 2: ETSI NFV Reference Architecture\n"
- title: 3.2.  Software-Defined Networking
  contents:
  - "3.2.  Software-Defined Networking\n   The Software-Defined Networking (SDN) paradigm\
    \ pushes the\n   intelligence currently residing in the network elements to a\
    \ central\n   controller implementing the network functionality through software.\n\
    \   In contrast to traditional approaches, in which the network's control\n  \
    \ plane is distributed throughout all network devices, with SDN, the\n   control\
    \ plane is logically centralized.  In this way, the deployment\n   of new characteristics\
    \ in the network no longer requires complex and\n   costly changes in equipment\
    \ or firmware updates, but only a change in\n   the software running in the controller.\
    \  The main advantage of this\n   approach is the flexibility it provides operators\
    \ to manage their\n   network, i.e., an operator can easily change its policies\
    \ on how\n   traffic is distributed throughout the network.\n   One of the most\
    \ well-known protocols for the SDN control plane\n   between the central controller\
    \ and the networking elements is the\n   OpenFlow Protocol (OFP), which is maintained\
    \ and extended by the Open\n   Network Foundation (ONF) <https://www.opennetworking.org/>.\n\
    \   Originally, this protocol was developed specifically for IEEE 802.1\n   switches\
    \ conforming to the ONF OpenFlow Switch specification\n   [OpenFlow].  As the\
    \ benefits of the SDN paradigm have reached a wider\n   audience, its application\
    \ has been extended to more complex scenarios\n   such as wireless and mobile\
    \ networks.  Within this area of work, the\n   ONF is actively developing new\
    \ OFP extensions addressing three key\n   scenarios: (i) wireless backhaul, (ii)\
    \ cellular Evolved Packet Core\n   (EPC), and (iii) unified access and management\
    \ across enterprise\n   wireless and fixed networks.\n   +----------+\n   | -------\
    \  |\n   | |Oper.|  |            O\n   | |Mgmt.|  |<........> -+- Network Operator\n\
    \   | |Iface|  |            ^\n   | -------  |      +----------------------------------------+\n\
    \   |          |      | +------------------------------------+ |\n   |       \
    \   |      | | ---------  ---------     --------- | |\n   |--------- |      |\
    \ | | App 1 |  | App 2 | ... | App n | | |\n   ||Plugins| |<....>| | ---------\
    \  ---------     --------- | |\n   |--------- |      | | Plugins             \
    \               | |\n   |          |      | +------------------------------------+\
    \ |\n   |          |      | Application Plane                      |\n   |   \
    \       |      +----------------------------------------+\n   |          |   \
    \                      A\n   |          |                         |\n   |    \
    \      |                         V\n   |          |      +----------------------------------------+\n\
    \   |          |      | +------------------------------------+ |\n   |---------\
    \ |      | |     ------------  ------------     | |\n   || Netw. | |      | |\
    \     | Module 1 |  | Module 2 |     | |\n   ||Engine | |<....>| |     ------------\
    \  ------------     | |\n   |--------- |      | | Network Engine             \
    \        | |\n   |          |      | +------------------------------------+ |\n\
    \   |          |      | Control Plane                          |\n   |       \
    \   |      +----------------------------------------+\n   |          |       \
    \                  A\n   |          |                         |\n   |        \
    \  |                         V\n   |          |      +----------------------------------------+\n\
    \   |          |      |  +--------------+   +--------------+   |\n   |       \
    \   |      |  | ------------ |   | ------------ |   |\n   |----------|      |\
    \  | | OpenFlow | |   | | OpenFlow | |   |\n   ||OpenFlow||<....>|  | ------------\
    \ |   | ------------ |   |\n   |----------|      |  | NE           |   | NE  \
    \         |   |\n   |          |      |  +--------------+   +--------------+ \
    \  |\n   |          |      | Data Plane                             |\n   |Management|\
    \      +----------------------------------------+\n   +----------+\n         \
    \        Figure 3: High-Level SDN ONF Architecture\n   Figure 3 shows the blocks\
    \ and the functional interfaces of the ONF\n   architecture, which comprises three\
    \ planes: data, controller, and\n   application.  The data plane comprehends several\
    \ Network Entities\n   (NEs), which expose their capabilities toward the control\
    \ plane via a\n   Southbound API.  The control plane includes several cooperating\n\
    \   modules devoted to the creation and maintenance of an abstracted\n   resource\
    \ model of the underlying network.  Such a model is exposed to\n   the applications\
    \ via a Northbound API where the application plane\n   comprises several applications/services,\
    \ each of which has exclusive\n   control of a set of exposed resources.\n   The\
    \ management plane spans its functionality across all planes\n   performing the\
    \ initial configuration of the network elements in the\n   data plane, the assignment\
    \ of the SDN controller and the resources\n   under its responsibility.  In the\
    \ control plane, the management needs\n   to configure the policies defining the\
    \ scope of the control given to\n   the SDN applications, to monitor the performance\
    \ of the system and to\n   configure the parameters required by the SDN controller\
    \ modules.  In\n   the application plane, the management plane configures the\
    \ parameters\n   of the applications and the service-level agreements.  In addition\
    \ to\n   these interactions, the management plane exposes several functions to\n\
    \   network operators that can easily and quickly configure and tune the\n   network\
    \ at each layer.\n   In RFC 7426 [RFC7426], the IRTF Software-Defined Networking\
    \ Research\n   Group (SDNRG) documented a layer model of an SDN architecture.\
    \  This\n   was due to the following controversial discussion topics (among\n\
    \   others).  What exactly is SDN?  What is the layer structure of the\n   SDN\
    \ architecture?  How do layers interface with each other?\n   Figure 4 reproduces\
    \ the figure included in RFC 7426 [RFC7426] to\n   summarize the SDN architecture\
    \ abstractions in the form of a\n   detailed, high-level schematic.  In a particular\
    \ implementation,\n   planes can be collocated with other planes or can be physically\n\
    \   separated.\n   In SDN, a controller manipulates controlled entities via an\n\
    \   interface.  Interfaces, when local, are mostly API invocations\n   through\
    \ some library or system call.  However, such interfaces may be\n   extended via\
    \ some protocol definition, which may use local\n   interprocess communication\
    \ (IPC) or a protocol that could also act\n   remotely; the protocol may be defined\
    \ as an open standard or in a\n   proprietary manner.\n   SDN expands multiple\
    \ planes: forwarding, operational, control,\n   management, and application. \
    \ All planes mentioned above are\n   connected via interfaces.  Additionally,\
    \ RFC 7426 [RFC7426] considers\n   four abstraction layers: the Device and resource\
    \ Abstraction Layer\n   (DAL), the Control Abstraction Layer (CAL), the Management\n\
    \   Abstraction Layer (MAL), and the Network Services Abstraction Layer\n   (NSAL).\n\
    \                  o--------------------------------o\n                  |   \
    \                             |\n                  | +-------------+   +----------+\
    \ |\n                  | | Application |   |  Service | |\n                  |\
    \ +-------------+   +----------+ |\n                  |       Application Plane\
    \        |\n                  o---------------Y----------------o\n           \
    \                       |\n    *-----------------------------Y---------------------------------*\n\
    \    |           Network Services Abstraction Layer (NSAL)           |\n    *------Y------------------------------------------------Y-------*\n\
    \           |                                                |\n           | \
    \              Service Interface                |\n           |              \
    \                                  |\n    o------Y------------------o       o---------------------Y------o\n\
    \    |      |    Control Plane |       | Management Plane    |      |\n    | +----Y----+\
    \   +-----+   |       |  +-----+       +----Y----+ |\n    | | Service |   | App\
    \ |   |       |  | App |       | Service | |\n    | +----Y----+   +--Y--+   |\
    \       |  +--Y--+       +----Y----+ |\n    |      |           |      |      \
    \ |     |               |      |\n    | *----Y-----------Y----* |       | *---Y---------------Y----*\
    \ |\n    | | Control Abstraction | |       | | Management Abstraction | |\n  \
    \  | |     Layer (CAL)     | |       | |      Layer (MAL)       | |\n    | *----------Y----------*\
    \ |       | *----------Y-------------* |\n    |            |            |    \
    \   |            |               |\n    o------------|------------o       o------------|---------------o\n\
    \                 |                                 |\n                 | CP \
    \                             | MP\n                 | Southbound            \
    \          | Southbound\n                 | Interface                       |\
    \ Interface\n                 |                                 |\n    *------------Y---------------------------------Y----------------*\n\
    \    |         Device and resource Abstraction Layer (DAL)           |\n    *------------Y---------------------------------Y----------------*\n\
    \    |            |                                 |                |\n    |\
    \    o-------Y----------o   +-----+   o--------Y----------o     |\n    |    |\
    \ Forwarding Plane |   | App |   | Operational Plane |     |\n    |    o------------------o\
    \   +-----+   o-------------------o     |\n    |                       Network\
    \ Device                          |\n    +---------------------------------------------------------------+\n\
    \                     Figure 4: SDN-Layer Architecture\n   While SDN is often\
    \ directly associated to OpenFlow, this is just one\n   (relevant) example of\
    \ a southbound protocol between the central\n   controller and the network entities.\
    \  Other relevant examples of\n   protocols in the SDN family are NETCONF [RFC6241],\
    \ RESTCONF\n   [RFC8040], and ForCES [RFC5810].\n"
- title: 3.3.  ITU-T Functional Architecture of SDN
  contents:
  - "3.3.  ITU-T Functional Architecture of SDN\n   The ITU-T (the Telecommunication\
    \ standardization sector of the\n   International Telecommunication Union) has\
    \ also looked into SDN\n   architectures, defining a slightly modified one from\
    \ what other SDOs\n   have done.  In ITU-T recommendation Y.3302 [itu-t-y.3302],\
    \ the ITU-T\n   provides a functional architecture of SDN with descriptions of\n\
    \   functional components and reference points.  The described functional\n  \
    \ architecture is intended to be used as an enabler for further studies\n   on\
    \ other aspects such as protocols and security as well as being used\n   to customize\
    \ SDN in support of appropriate use cases (e.g., cloud\n   computing, mobile networks).\
    \  This recommendation is based on ITU-T\n   Y.3300 [itu-t-y.3300] and ITU-T Y.3301\
    \ [itu-t-y.3301].  While the\n   first describes the framework of SDN (including\
    \ definitions,\n   objectives, high-level capabilities, requirements, and the\
    \ high-level\n   architecture of SDN), the second describes more-detailed\n  \
    \ requirements.\n   Figure 5 shows the SDN functional architecture defined by\
    \ the ITU-T.\n   It is a layered architecture composed of the SDN application\
    \ layer\n   (SDN-AL), the SDN control layer (SDN-CL), and the SDN resource layer\n\
    \   (SDN-RL).  It also has multi-layer management functions (MMF), which\n   provide\
    \ the ability to manage the functionalities of SDN layers,\n   i.e., SDN-AL, SDN-CL,\
    \ and SDN-RL.  MMF interacts with these layers\n   using Multi-layer Management\
    \ Functions Application (MMFA), Multi-\n   layer Management Functions Control\
    \ (MMFC), and Multi-layer Management\n   Functions Resource (MMFR) reference points.\n\
    \   The SDN-AL enables a service-aware behavior of the underlying network\n  \
    \ in a programmatic manner.  The SDN-CL provides programmable means to\n   control\
    \ the behavior of SDN-RL resources (such as data transport and\n   processing)\
    \ following requests received from the SDN-AL according to\n   MMF policies. \
    \ The SDN-RL is where the physical or virtual network\n   elements perform transport\
    \ and/or processing of data packets\n   according to SDN-CL decisions.\n     \
    \     MMFO                      MMFA\n   +-----+ . +---------------------+ . +--------------------+\n\
    \   |     | . |+---+ +---+ +-------+| . |+---------+ +-----+ |\n   |     | . ||\
    \   | |   | |       || . ||   AL.   | |     | |\n   |     | . || E | |   | | \
    \ App. || . || Mngmt.  | | SDN | | SDN-AL\n   |     | . || x | | M | | Layer ||\
    \ . || Support | | App | |\n   |     | . || t.| | u | | Mngmt.|| . || & Orch.\
    \ | |     | |\n   |     | . ||   | | l | +-------+| . |+---------+ +-----+ |\n\
    \   |     | . || R | | t |          | . +--------------------+\n   |     | . ||\
    \ e | | i |          |MMFC ..................... ACI\n   |     | . || l | | -\
    \ |          | . +--------------------+\n   |     | . || a | | l | +-------+|\
    \ . |+------+ +---------+|\n   | OSS/| . || t | | a | |       || . ||      | |\
    \   App.  ||\n   | BSS | . || i | | y | |       || . ||      | | Support ||\n\
    \   |     | . || o | | e | |       || . ||      | +---------+|\n   |     | . ||\
    \ n | | r | |       || . ||  CL  | +---------+|\n   |     | . || s | |   | |Control||\
    \ . ||Mngmt.| | Control ||\n   |     | . || h | | M | | Layer || . || Supp.| |\
    \  Layer  || SDN-CL\n   |     | . || i | | a | | Mngmt.|| . || and  | |  Serv.\
    \  ||\n   |     | . || p | | n | |       || . || Orch.| +---------+|\n   |   \
    \  | . ||   | | a | |       || . ||      | +---------+|\n   |     | . || M | |\
    \ g | |       || . ||      | | Resource||\n   |     | . || n | | e | |       ||\
    \ . ||      | | Abstrac.||\n   |     | . || g | | m | +-------+| . |+------+ +---------+|\n\
    \   |     | . || m | | e |          | . +--------------------+\n   |     | . ||\
    \ t.| | n |          |MMFR ..................... RCI\n   |     | . ||   | | t\
    \ |          | . +--------------------+\n   +-----+ . |+---+ |   | +-------+|\
    \ . |+------++----------+|\n             |      | O | |       || . ||      ||RL\
    \ Control||\n             |      | r | |Resour.|| . ||  RL  |+----------+|\n \
    \       MMF  |      | c | | Layer || . ||Mngmt.|+----++----+| SDN-RL\n       \
    \      |      | h.| | Mngmt.|| . || Supp.||Data||Data||\n             |      |\
    \   | |       || . ||      ||Tran||Proc||\n             |      +---+ +-------+|\
    \ . |+------++----++----+|\n             +---------------------+ . +--------------------+\n\
    \   Legend:\n     ACI:  Application Control Interface\n     MMFA: Multi-layer\
    \ Management Functions Application\n     MMFC: Multi-layer Management Functions\
    \ Control\n     MMFO: Multi-layer Management Functions OSS/BSS\n     MMFR: Multi-layer\
    \ Management Functions Resource\n     RCI:  Resource Control Interfaces\n    \
    \ RL:   Resource Layer\n                Figure 5: ITU-T SDN Functional Architecture\n"
- title: 3.4.  Multi-Access Edge Computing
  contents:
  - "3.4.  Multi-Access Edge Computing\n   Multi-access Edge Computing (MEC) -- formerly\
    \ known as Mobile Edge\n   Computing -- capabilities deployed in the edge of the\
    \ mobile network\n   can facilitate the efficient and dynamic provision of services\
    \ to\n   mobile users.  The ETSI ISG MEC working group, operative from end of\n\
    \   2014, intends to specify an open environment for integrating MEC\n   capabilities\
    \ with service providers' networks, also including\n   applications from third\
    \ parties.  These distributed computing\n   capabilities provide IT infrastructure\
    \ as in a cloud environment for\n   the deployment of functions in mobile access\
    \ networks.  It can be\n   seen then as a complement to both NFV and SDN.\n"
- title: 3.5.  IEEE 802.1CF (OmniRAN)
  contents:
  - "3.5.  IEEE 802.1CF (OmniRAN)\n   The IEEE 802.1CF Recommended Practice [omniran]\
    \ specifies an access\n   network that connects terminals to their access routers\
    \ utilizing\n   technologies based on the family of IEEE 802 Standards (e.g.,\
    \ 802.3\n   Ethernet, 802.11 Wi-Fi, etc.).  The specification defines an access\n\
    \   network reference model, including entities and reference points\n   along\
    \ with behavioral and functional descriptions of communications\n   among those\
    \ entities.\n   The goal of this project is to help unify the support of different\n\
    \   interfaces, enabling shared-network control and use of SDN\n   principles,\
    \ thereby lowering the barriers to new network\n   technologies, to new network\
    \ operators, and to new service providers.\n"
- title: 3.6.  Distributed Management Task Force (DMTF)
  contents:
  - "3.6.  Distributed Management Task Force (DMTF)\n   The DMTF <https://www.dmtf.org/>\
    \ is an industry standards\n   organization working to simplify the manageability\
    \ of network-\n   accessible technologies through open and collaborative efforts\
    \ by\n   some technology companies.  The DMTF is involved in the creation and\n\
    \   adoption of interoperable management standards, supporting\n   implementations\
    \ that enable the management of diverse traditional and\n   emerging technologies\
    \ including cloud, virtualization, network, and\n   infrastructure.\n   There\
    \ are several DMTF initiatives that are relevant to the network\n   virtualization\
    \ area, such as the Open Virtualization Format (OVF) for\n   VNF packaging; the\
    \ Cloud Infrastructure Management Interface (CIMI)\n   for cloud infrastructure\
    \ management; the Network Management (NETMAN),\n   for VNF management; and the\
    \ Virtualization Management (VMAN), for\n   virtualization infrastructure management.\n"
- title: 3.7.  Open-Source Initiatives
  contents:
  - "3.7.  Open-Source Initiatives\n   The open-source community is especially active\
    \ in the area of network\n   virtualization and orchestration.  We next summarize\
    \ some of the\n   active efforts:\n   o  OpenStack.  OpenStack is a free and open-source\
    \ cloud-computing\n      software platform.  OpenStack software controls large\
    \ pools of\n      compute, storage, and networking resources throughout a data\n\
    \      center, managed through a dashboard or via the OpenStack API.\n   o  Kubernetes.\
    \  Kubernetes is an open-source system for automating\n      deployment, scaling\
    \ and management of containerized applications.\n      Kubernetes can schedule\
    \ and run application containers on clusters\n      of physical or virtual machines.\
    \  Kubernetes allows (i) Scale on\n      the fly, (ii) Limit hardware usage to\
    \ required resources only,\n      (iii) Load-balancing Monitoring, and (iv) Efficient\
    \ life-cycle\n      management.\n   o  OpenDayLight.  OpenDayLight (ODL) is a\
    \ highly available, modular,\n      extensible and scalable multiprotocol controller\
    \ infrastructure\n      built for SDN deployments on modern heterogeneous multi-vendor\n\
    \      networks.  It provides a model-driven service abstraction platform\n  \
    \    that allows users to write apps that easily work across a wide\n      variety\
    \ of hardware and southbound protocols.\n   o  ONOS.  The Open Network Operating\
    \ System (ONOS) project is an\n      open-source community hosted by The Linux\
    \ Foundation.  The goal of\n      the project is to create an SDN operating system\
    \ for\n      communications service providers that is designed for scalability,\n\
    \      high performance, and high availability.\n   o  OpenContrail.  OpenContrail\
    \ is a licensed Apache 2.0 project that\n      is built using standards-based\
    \ protocols and that provides all the\n      necessary components for network\
    \ virtualization: an SDN\n      controller, a virtual router, an analytics engine,\
    \ and published\n      northbound APIs.  It has an extensive Representational\
    \ State\n      Transfer (REST) API to configure and gather operational and\n \
    \     analytics data from the system.\n   o  OPNFV.  The Open Platform for NFV\
    \ (OPNFV) is a carrier-grade,\n      integrated, open-source platform to accelerate\
    \ the introduction of\n      new NFV products and services.  By integrating components\
    \ from\n      upstream projects, the OPNFV community aims at conducting\n    \
    \  performance and use case-based testing to ensure the platform's\n      suitability\
    \ for NFV use cases.  The scope of OPNFV's initial\n      release is focused on\
    \ building NFV Infrastructure (NFVI) and\n      Virtualized Infrastructure Manager\
    \ (VIM) by integrating components\n      from upstream projects such as OpenDayLight,\
    \ OpenStack, Ceph\n      Storage, Kernel-based Virtual Machine (KVM), Open vSwitch,\
    \ and\n      Linux.  These components, along with APIs to other NFV elements,\n\
    \      form the basic infrastructure required for Virtualized Network\n      Functions\
    \ (VNFs) and Management and Orchestration (MANO)\n      components.  OPNFV's goal\
    \ is to (i) increase performance and power\n      efficiency, (ii) improve reliability,\
    \ availability, and\n      serviceability, and (iii) deliver comprehensive platform\n\
    \      instrumentation.\n   o  OSM.  Open Source Mano (OSM) is an ETSI-hosted\
    \ project to develop\n      an Open Source NFV Management and Orchestration (MANO)\
    \ software\n      stack aligned with ETSI NFV.  OSM is based on components from\n\
    \      previous projects, such Telefonica's OpenMANO or Canonical's Juju,\n  \
    \    among others.\n   o  OpenBaton.  OpenBaton is a Network Function Virtualization\n\
    \      Orchestrator (NFVO) that is ETSI NFV compliant.  OpenBaton was\n      part\
    \ of the OpenSDNCore project started with the objective of\n      providing a\
    \ compliant implementation of the ETSI NFV\n      specification.\n   o  ONAP.\
    \  Open Network Automation Platform (ONAP) is an open-source\n      software platform\
    \ that delivers capabilities for the design,\n      creation, orchestration, monitoring,\
    \ and life-cycle management of\n      (i) Virtual Network Functions (VNFs), (ii)\
    \ The carrier-scale\n      Software-Defined Networks (SDNs) that contain them,\
    \ and (iii)\n      higher-level services that combine the above.  ONAP (derived\
    \ from\n      the AT&T's ECOMP) provides for automatic, policy-driven\n      interaction\
    \ of these functions and services in a dynamic, real-\n      time cloud environment.\n\
    \   o  SONA.  The Simplified Overlay Network Architecture (SONA) is an\n     \
    \ extension to ONOS to have an almost full SDN network control in\n      OpenStack\
    \ for virtual tenant network provisioning.  Basically,\n      SONA is an SDN-based\
    \ network virtualization solution for cloud DC.\n   Among the main areas that\
    \ are being developed by the aforementioned\n   open-source activities that relate\
    \ to network virtualization\n   research, we can highlight policy-based resource\
    \ management,\n   analytics for visibility and orchestration, and service verification\n\
    \   with regard to security and resiliency.\n"
- title: 4.  Network Virtualization Challenges
  contents:
  - '4.  Network Virtualization Challenges

    '
- title: 4.1.  Overview
  contents:
  - "4.1.  Overview\n   Network virtualization is changing the way the telecommunications\n\
    \   sector will deploy, extend, and operate their networks.  These new\n   technologies\
    \ aim at reducing the overall costs by moving\n   communication services from\
    \ specific hardware in the operators' cores\n   to server farms scattered in data\
    \ centers (i.e., compute and storage\n   virtualization).  In addition, the networks\
    \ interconnecting the\n   functions that compose a network service are fundamentally\
    \ affected\n   in the way they route, process, and control traffic (i.e., network\n\
    \   virtualization).\n"
- title: 4.2.  Guaranteeing Quality of Service
  contents:
  - "4.2.  Guaranteeing Quality of Service\n   Achieving a given QoS in an NFV environment\
    \ with virtualized and\n   distributed computing, storage, and networking functions\
    \ is more\n   challenging than providing the equivalent in discrete non-virtualized\n\
    \   components.  For example, ensuring a guaranteed and stable forwarding\n  \
    \ data rate has proven not to be straightforward when the forwarding\n   function\
    \ is virtualized and runs on top of COTS server hardware\n   [openmano_dataplane]\
    \ [NFV-COTS] [etsi_nfv_whitepaper_3].  Again, the\n   comparison point is against\
    \ a router or forwarder built on optimized\n   hardware.  We next identify some\
    \ of the challenges that this poses.\n"
- title: 4.2.1.  Virtualization Technologies
  contents:
  - "4.2.1.  Virtualization Technologies\n   The issue of guaranteeing a network QoS\
    \ is less of an issue for\n   \"traditional\" cloud computing because the workloads\
    \ that are treated\n   there are servers or clients in the networking sense and\
    \ hardly ever\n   process packets.  Cloud computing provides hosting for applications\n\
    \   on shared servers in a highly separated way.  Its main advantage is\n   that\
    \ the infrastructure costs are shared among tenants and that the\n   cloud infrastructure\
    \ provides levels of reliability that can not be\n   achieved on individual premises\
    \ in a cost-efficient way\n   [intel_10_differences_nfv_cloud].  NFV has very\
    \ strict requirements\n   posed in terms of performance, stability, and consistency.\
    \  Although\n   there are some tools and mechanisms to improve this, such as Enhanced\n\
    \   Performance Awareness (EPA), Single Root I/O Virtualization (SR-IOV),\n  \
    \ Non-Uniform Memory Access (NUMA), Data Plane Development Kit (DPDK),\n   etc.,\
    \ these are still unsolved challenges.  One open research issue\n   is finding\
    \ out technologies that are different from Virtual Machines\n   (VMs) and more\
    \ suitable for dealing with network functionalities.\n   Lately, a number of lightweight\
    \ virtualization technologies including\n   containers, unikernels (specialized\
    \ VMs) and minimalistic\n   distributions of general-purpose OSes have appeared\
    \ as virtualization\n   approaches that can be used when constructing an NFV platform.\n\
    \   [LIGHT-NFV] describes the challenges in building such a platform and\n   discusses\
    \ to what extent these technologies, as well as traditional\n   VMs, are able\
    \ to address them.\n"
- title: 4.2.2.  Metrics for NFV Characterization
  contents:
  - "4.2.2.  Metrics for NFV Characterization\n   Another relevant aspect is the need\
    \ for tools for diagnostics and\n   measurements suited for NFV.  There is a pressing\
    \ need to define\n   metrics and associated protocols to measure the performance\
    \ of NFV.\n   Specifically, since NFV is based on the concept of taking centralized\n\
    \   functions and evolving them to highly distributed software (SW)\n   functions,\
    \ there is a commensurate need to fully understand and\n   measure the baseline\
    \ performance of such systems.\n   The IP Performance Metrics (IPPM) WG defines\
    \ metrics that can be used\n   to measure the quality and performance of Internet\
    \ services and\n   applications running over transport-layer protocols (e.g.,\
    \ TCP and\n   UDP) over IP.  It also develops and maintains protocols for the\n\
    \   measurement of these metrics.  While the IPPM WG is a long-running WG\n  \
    \ that started in 1997, at the time of writing, it does not have a\n   charter\
    \ item or active Internet-Drafts related to the topic of\n   network virtualization.\
    \  In addition to using IPPM to evaluate QoS,\n   there is a need for specific\
    \ metrics for assessing the performance of\n   network-virtualization techniques.\n\
    \   The Benchmarking Methodology Working Group (BMWG) is also performing\n   work\
    \ related to NFV metrics.  For example, [RFC8172] investigates\n   additional\
    \ methodological considerations necessary when benchmarking\n   VNFs that are\
    \ instantiated and hosted in general-purpose hardware,\n   using bare-metal hypervisors\
    \ or other isolation environments (such as\n   Linux containers).  An essential\
    \ consideration is benchmarking\n   physical and VNFs in the same way when possible,\
    \ thereby allowing\n   direct comparison.\n   There is a clear motivation for\
    \ the work on performance metrics for\n   NFV [etsi_gs_nfv_per_001], as stated\
    \ in [RFC8172] (and replicated\n   here):\n      I'm designing and building my\
    \ NFV Infrastructure platform.  The\n      first steps were easy because I had\
    \ a small number of categories\n      of VNFs to support and the VNF vendor gave\
    \ HW recommendations that\n      I followed.  Now I need to deploy more VNFs from\
    \ new vendors, and\n      there are different hardware recommendations.  How well\
    \ will the\n      new VNFs perform on my existing hardware?  Which among several\
    \ new\n      VNFs in a given category are most efficient in terms of capacity\n\
    \      they deliver?  And, when I operate multiple categories of VNFs\n      (and\
    \ PNFs) *concurrently* on a hardware platform such that they\n      share resources,\
    \ what are the new performance limits, and what are\n      the software design\
    \ choices I can make to optimize my chosen\n      hardware platform?  Conversely,\
    \ what hardware platform upgrades\n      should I pursue to increase the capacity\
    \ of these concurrently\n      operating VNFs?\n   Lately, there are also some\
    \ efforts looking into VNF benchmarking.\n   The selection of an NFV Infrastructure\
    \ Point of Presence to host a\n   VNF or allocation of resources (e.g., virtual\
    \ CPUs, memory) needs to\n   be done over virtualized (abstracted and simplified)\
    \ resource views\n   [vnf_benchmarking] [VNF-VBAAS].\n"
- title: 4.2.3.  Predictive Analysis
  contents:
  - "4.2.3.  Predictive Analysis\n   On top of diagnostic tools that enable an assessment\
    \ of the QoS,\n   predictive analyses are required to react before anomalies occur.\n\
    \   Due to the SW characteristics of VNFs, a reliable diagnosis framework\n  \
    \ could potentially enable the prevention of issues by a proper\n   diagnosis\
    \ and then a reaction in terms of acting on the potentially\n   impacted service\
    \ (e.g., migration to a different compute node,\n   scaling in/out, up/down, etc.).\n"
- title: 4.2.4.  Portability
  contents:
  - "4.2.4.  Portability\n   Portability in NFV refers to the ability to run a given\
    \ VNF on\n   multiple NFVIs, that is, guaranteeing that the VNF would be able\
    \ to\n   perform its functions with a high and predictable performance given\n\
    \   that a set of requirements on the NFVI resources is met.  Therefore,\n   portability\
    \ is a key feature that, if fully enabled, would contribute\n   to making the\
    \ NFV environment achieve a better reliability than a\n   traditional system.\
    \  Implementing functionality in SW over\n   \"commodity\" infrastructure should\
    \ make it much easier to port/move\n   functions from one place to another.  However,\
    \ this is not yet as\n   ideal as it sounds, and there are aspects that are not\
    \ fully tackled.\n   The existence of different hypervisors, specific hardware\n\
    \   dependencies (e.g., EPA related), or state-synchronization aspects\n   are\
    \ just some examples of troublemakers for portability purposes.\n   The ETSI NFV\
    \ ISG is doing work in relation to portability.\n   [etsi_gs_nfv_per_001] provides\
    \ a list of minimal features that the VM\n   Descriptor and Compute Host Descriptor\
    \ should contain for the\n   appropriate deployment of VM images over an NFVI\
    \ (i.e., a \"telco data\n   center\"), in order to guarantee high and predictable\
    \ performance of\n   data-plane workloads while assuring their portability.  In\
    \ addition,\n   [etsi_gs_nfv_per_001] provides a set of recommendations on the\n\
    \   minimum requirements that hardware (HW) and hypervisor should have\n   for\
    \ a \"telco data center\" suitable for different workloads (data\n   plane, control\
    \ plane, etc.) present in VNFs.  The purpose of\n   [etsi_gs_nfv_per_001] is to\
    \ provide the list of VM requirements that\n   should be included in the VM Descriptor\
    \ template, and the list of HW\n   capabilities that should be included in the\
    \ Compute Host Descriptor\n   (CHD) to assure predictable high performance.  ETSI\
    \ NFV assumes that\n   the MANO functions will make the mix & match.  Therefore,\
    \ there are\n   still several research challenges to be addressed here.\n"
- title: 4.3.  Performance Improvement
  contents:
  - '4.3.  Performance Improvement

    '
- title: 4.3.1.  Energy Efficiency
  contents:
  - "4.3.1.  Energy Efficiency\n   Virtualization is typically seen as a direct enabler\
    \ of energy\n   savings.  Some of the enablers for this that are often mentioned\n\
    \   [nfv_sota_research_challenges] are (i) the multiplexing gains\n   achieved\
    \ by centralizing functions in data centers reduce the overall\n   energy consumed\
    \ and (ii) the flexibility brought by network\n   programmability enables to switch\
    \ off infrastructure as needed in a\n   much easier way.  However, there is still\
    \ a lot of room for\n   improvement in terms of virtualization techniques to reduce\
    \ the power\n   consumption, such as enhanced-hypervisor technologies.\n   Some\
    \ additional examples of research topics that could enable energy\n   savings\
    \ are [nfv_sota_research_challenges]:\n   o  Energy-aware scaling (e.g., reductions\
    \ in CPU speeds and partially\n      turning off some hardware components to meet\
    \ a given energy\n      consumption target.\n   o  Energy-aware function placement.\n\
    \   o  Scheduling and chaining algorithms, for example, adapting the\n      network\
    \ topology and operating parameters to minimize the\n      operation cost (e.g.,\
    \ tracking energy costs to identify the\n      cheapest prices).\n   Note that\
    \ it is also important to analyze the trade-off between\n   energy efficiency\
    \ and network performance.\n"
- title: 4.3.2.  Improved Link Usage
  contents:
  - "4.3.2.  Improved Link Usage\n   The use of NFV and SDN technologies can help\
    \ improve link usage.  SDN\n   has already shown that it can greatly increase\
    \ average link\n   utilization (e.g., Google example [google_sdn_wan]).  NFV adds\
    \ more\n   complexity (e.g., due to service-function chaining / VNF forwarding\n\
    \   graphs), which needs to be considered.  Aspects like the ones\n   described\
    \ in [NFVRG-TOPO] (on NFV data center topology design) have\n   to be looked at\
    \ carefully as well.\n"
- title: 4.4.  Multiple Domains
  contents:
  - "4.4.  Multiple Domains\n   Market fragmentation has resulted in a multitude of\
    \ network operators\n   each focused on different countries and regions.  This\
    \ makes it\n   difficult to create infrastructure services spanning multiple\n\
    \   countries, such as virtual connectivity or compute resources, as no\n   single\
    \ operator has a footprint everywhere.  Cross-domain\n   orchestration of services\
    \ over multiple administrations or over\n   multi-domain single administrations\
    \ will allow end-to-end network and\n   service elements to mix in multi-vendor,\
    \ heterogeneous technology,\n   and resource environments [multi-domain_5GEx].\n\
    \   For the specific use case of 'Network as a Service', it becomes even\n   more\
    \ important to ensure that Cross Domain Orchestration also takes\n   care of hierarchy\
    \ of networks and their association, with respect to\n   provisioning tunnels\
    \ and overlays.\n   Multi-domain orchestration is currently an active research\
    \ topic,\n   which is being tackled, among others, by ETSI NFV ISG and the 5GEx\n\
    \   project <https://www.5gex.eu/> [MULTI-NMRG] [multi-domain_5GEx].\n   Another\
    \ side of the multi-domain problem is the integration/\n   harmonization of different\
    \ management domains.  A key example comes\n   from Multi-access Edge Computing,\
    \ which, according to ETSI, comes\n   with its own MANO system and would require\
    \ integration if\n   interconnected to a generic NFV system.\n"
- title: 4.5.  5G and Network Slicing
  contents:
  - "4.5.  5G and Network Slicing\n   From the beginning of all 5G discussions in\
    \ the research and industry\n   fora, it has been agreed that 5G will have to\
    \ address many more use\n   cases than the preceding wireless generations, which\
    \ first focused on\n   voice services and then on voice and high-speed packet\
    \ data services.\n   In this case, 5G should be able to handle not only the same\
    \ (or\n   enhanced) voice and packet data services, but also emerging services\n\
    \   like tactile Internet and the Internet of Things (IoT).  These use\n   cases\
    \ take the requirements to opposite extremes, as some of them\n   require ultra-low\
    \ latency and higher-speed, whereas some others\n   require ultra-low power consumption\
    \ and high-delay tolerance.\n   Because of these very extreme 5G use cases, it\
    \ is envisioned that\n   selective combinations of radio access networks and core\
    \ network\n   components will have to be combined into a given network slice to\n\
    \   address the specific requirements of each use case.\n   For example, within\
    \ the major IoT category, which is perhaps the most\n   disrupting one, some autonomous\
    \ IoT devices will have very low\n   throughput, will have much longer sleep cycles\
    \ (and therefore high\n   latency), and a battery life time exceeding by a factor\
    \ of thousands\n   that of smartphones or some other devices that will have almost\n\
    \   continuous control and data communications.  Hence, it is envisioned\n   that\
    \ a customized network slice will have to be stitched together\n   from virtual\
    \ resources or sub-slices to meet these requirements.\n   The actual definition\
    \ of a \"network slice\" from an IP infrastructure\n   viewpoint is currently\
    \ undergoing intense debate; see [COMS-PS],\n   [NETSLICES], [SLICE-3GPP], and\
    \ [ngmn_5G_whitepaper].  Network slicing\n   is a key for introducing new actors\
    \ in existing markets at a low cost\n   -- by letting new players rent \"blocks\"\
    \ of capacity, if the new\n   business model enables performance that meets the\
    \ application needs\n   (e.g., broadcasting updates to many sensors with satellite\n\
    \   broadcasting capabilities).  However, more work needs to be done to\n   define\
    \ the basic architectural approach of how network slices will be\n   defined and\
    \ formed.  For example, is it mostly a matter of defining\n   the appropriate\
    \ network models (e.g., YANG) to stitch the network\n   slice from existing components?\
    \  Or do end-to-end timing,\n   synchronization, and other low-level requirements\
    \ mean that more\n   fundamental research has to be done?\n"
- title: 4.5.1.  Virtual Network Operators
  contents:
  - "4.5.1.  Virtual Network Operators\n   The widespread use/discussion/practice\
    \ of system and network\n   virtualization technologies has led to new business\
    \ opportunities,\n   enlarging the offer of IT resources with virtual network\
    \ and\n   computing resources, among others.  As a consequence, the network\n\
    \   ecosystem now differentiates between the owner of physical resources,\n  \
    \ the Infrastructure Provider (InP), and the intermediary that conforms\n   and\
    \ delivers network services to the final customers, the Virtual\n   Network Operator\
    \ (VNO).\n   VNOs aim to exploit the virtualized infrastructures to deliver new-\n\
    \   and-improved services to their customers.  However, current network\n   virtualization\
    \ techniques offer poor support for VNOs to control\n   their resources.  It has\
    \ been considered that the InP is responsible\n   for the reliability of the virtual\
    \ resources, but there are several\n   situations in which a VNO requires a finer\
    \ control on its resources.\n   For instance, dynamic events, such as the identification\
    \ of new\n   requirements or the detection of incidents within the virtual system,\n\
    \   might urge a VNO to quickly reform its virtual infrastructure and\n   resource\
    \ allocation.  However, the interfaces offered by current\n   virtualization platforms\
    \ do not offer the necessary functions for\n   VNOs to perform the elastic adaptations\
    \ they need to conduct in\n   dynamic environments.\n   Beyond their heterogeneity,\
    \ which can be resolved by software\n   adapters, current virtualization platforms\
    \ do not have common methods\n   and functions, so it is difficult for the virtual\
    \ network controllers\n   used by the VNOs to actually manage and control virtual\
    \ resources\n   instantiated on different platforms, not even considering different\n\
    \   InPs.  Therefore, it is necessary to reach a common definition of the\n  \
    \ functions that should be offered by underlying platforms to give such\n   overlay\
    \ controllers the possibility to allocate and deallocate\n   resources dynamically\
    \ and get monitoring data about them.\n   Such common methods should be offered\
    \ by all underlying controllers,\n   regardless of being network-oriented (e.g.,\
    \ ODL, ONOS, and Ryu) or\n   computing-oriented (e.g., OpenStack, OpenNebula,\
    \ and Eucalyptus).\n   Furthermore, it is important for those platforms to offer\
    \ some \"PUSH\"\n   function to report resource state, avoiding the need for the\
    \ VNO's\n   controller to \"POLL\" for such data.  A starting point to get proper\n\
    \   notifications within current REST APIs could be to consider the\n   protocol\
    \ proposed by the WEBPUSH WG [RFC8030].\n   Finally, in order to establish a proper\
    \ order and allow the\n   coexistence and collaboration of different systems,\
    \ a common ontology\n   regarding network and system virtualization should be\
    \ defined and\n   agreed upon, so different and heterogeneous systems can understand\n\
    \   each other without requiring reliance on specific adaptation\n   mechanisms\
    \ that might break with any update on any side of the\n   relation.\n"
- title: 4.5.2.  Extending Virtual Networks and Systems to the Internet of Things
  contents:
  - "4.5.2.  Extending Virtual Networks and Systems to the Internet of Things\n  \
    \ The Internet of Things (IoT) refers to the vision of connecting a\n   multitude\
    \ of automated devices (e.g., lights, environmental sensors,\n   traffic lights,\
    \ parking meters, health and security systems, etc.) to\n   the Internet for purposes\
    \ of reporting and remote command and control\n   of the device.  This vision\
    \ is being realized by a multi-pronged\n   approach of standardization in various\
    \ forums and complementary open-\n   source activities.  For example, in the IETF,\
    \ support of IoT web\n   services has been defined by an HTTP-like protocol adapted\
    \ for IoT\n   called \"CoAP\" [RFC7252]; and, lately, a group has been studying\
    \ the\n   need to develop a new network layer to support IP applications over\n\
    \   Low-Power Wide Area Networks (LPWAN).\n   Elsewhere, for 5G cellular evolution,\
    \ there is much discussion on the\n   need for supporting virtual network slices\
    \ for the expected massive\n   numbers of IoT devices.  A separate virtual network\
    \ slice is\n   considered necessary for different 5G IoT use cases because devices\n\
    \   will have very different characteristics than typical cellular\n   devices\
    \ like smartphones [ngmn_5G_whitepaper], and the number of IoT\n   devices is\
    \ expected to be at least one or two orders of magnitude\n   higher than other\
    \ 5G devices (see Section 4.5).\n   The specific nature of the IoT ecosystem,\
    \ particularly reflected in\n   the Machine-to-Machine (M2M) communications, leads\
    \ to the creation of\n   new and highly distributed systems which demand location-based\n\
    \   network and computing services.  A specific example can be\n   represented\
    \ by a set of \"things\" that suddenly require the setup of a\n   firewall to\
    \ allow external entities to access their data while\n   outsourcing some computation\
    \ requirements to more powerful systems\n   relying on cloud-based services. \
    \ This representative use case\n   exposes important requirements for both NFV\
    \ and the underlying cloud\n   infrastructures.\n   In order to provide the aforementioned\
    \ location-based functions\n   integrated with highly distributed systems, the\
    \ so-called fog\n   infrastructures should be able to instantiate VNFs, placing\
    \ them in\n   the required place, e.g., close to their consumers.  This requirement\n\
    \   implies that the interfaces offered by virtualization platforms must\n   support\
    \ the specification of location-based resources, which is a key\n   function in\
    \ those scenarios.  Moreover, those platforms must also be\n   able to interpret\
    \ and understand the references used by IoT systems\n   to their location (e.g.,\
    \ \"My-AP\" or \"5BLDG+2F\") and also the\n   specification of identifiers linked\
    \ to other resources, such as the\n   case of requiring the infrastructure to\
    \ establish a link between a\n   specific Access Point (AP) and a specific virtual\
    \ computing node.  In\n   summary, the research gap is exact localization of VNFs\
    \ at far\n   network edge infrastructure, which is highly distributed and dynamic.\n"
- title: 4.6.  Service Composition
  contents:
  - "4.6.  Service Composition\n   Current network services deployed by operators\
    \ often involve the\n   composition of several individual functions (such as packet\n\
    \   filtering, deep-packet inspection, load-balancing).  These services\n   are\
    \ typically implemented by the ordered combination of a number of\n   service\
    \ functions that are deployed at different points within a\n   network, not necessarily\
    \ on the direct data path.  This requires\n   traffic to be steered through the\
    \ required service functions,\n   wherever they are deployed [RFC7498].\n   For\
    \ a given service, the abstracted view of the required service\n   functions and\
    \ the order in which they are to be applied is called\n   \"Service Function Chaining\"\
    \ (SFC) [sfc_challenges], which is called\n   \"Network Function Forwarding Graph\"\
    \ (NF-FG) in ETSI.  SFC is\n   instantiated through the selection of specific\
    \ service function\n   instances on specific network nodes to form a service graph:\
    \ this is\n   called a \"Service Function Path\" (SFP).  The service functions\
    \ may be\n   applied at any layer within the network protocol stack (network\n\
    \   layer, transport layer, application layer, etc.).\n   Service composition\
    \ is a powerful means that can provide significant\n   benefits when applied in\
    \ a softwarized network environment.  However,\n   there are many research challenges\
    \ in this area; for example, the\n   ones related to composition mechanisms and\
    \ algorithms to enable load-\n   balancing and improve reliability.  The service\
    \ composition should\n   also act as an enabler to gather information across all\
    \ hierarchies\n   (underlays and overlays) of network deployments that may span\
    \ across\n   multiple operators for faster serviceability, thus facilitating\n\
    \   accomplishing aforementioned goals of \"load-balancing and improving\n   reliability\"\
    .\n   As described in [dynamic_chaining], different algorithms can be used\n \
    \  to enable dynamic service composition that optimizes a QoS-based\n   utility\
    \ function (e.g., minimizing the latency per-application\n   traffic flows) for\
    \ a given composition plan.  Such algorithms can\n   consider the computation\
    \ capabilities and load status of resources\n   executing the VNF instances, either\
    \ deduced through estimations from\n   historical usage data or collected through\
    \ real-time monitoring\n   (i.e., context-aware selection).  For this reason,\
    \ selections should\n   include references to dynamic information on the status\
    \ of the\n   service instance and its constituent elements, i.e., monitoring\n\
    \   information related to individual VNF instances and links connecting\n   them\
    \ as well as derived monitoring information at the chain level\n   (e.g., end-to-end\
    \ delay).  At runtime, if one or more VNF instances\n   are no longer available\
    \ or QoS degrades below a given threshold, the\n   service selection task can\
    \ be rerun to perform service substitution.\n   There are different research directions\
    \ that relate to the previous\n   point.  For example, the use of Integer Linear\
    \ Programming (ILP)\n   techniques can be explored to optimize the management\
    \ of diverse\n   traffic flows.  Deep-machine learning can also be applied to\
    \ optimize\n   service chains using information parameters, such as some of the\
    \ ones\n   mentioned above.  Newer scheduling paradigms, like co-flows, can also\n\
    \   be used.\n   The SFC working group is working on an architecture for SFC [RFC7665]\n\
    \   that includes the necessary protocols or protocol extensions to\n   convey\
    \ the SFC and SFP information to nodes that are involved in the\n   implementation\
    \ of service functions and SFCs as well as mechanisms\n   for steering traffic\
    \ through service functions.\n   In terms of actual work items, the SFC WG has\
    \ not yet considered\n   working on the management and configuration of SFC components\
    \ related\n   to the support of SFC.  This part is of special interest for\n \
    \  operators and would be required in order to actually put SFC\n   mechanisms\
    \ into operation.  Similarly, redundancy and reliability\n   mechanisms for SFC\
    \ are currently not dealt with by any WG in the\n   IETF.  While this was the\
    \ main goal of the VNFpool BoF efforts, it\n   still remains unaddressed.\n"
- title: 4.7.  Device Virtualization for End Users
  contents:
  - "4.7.  Device Virtualization for End Users\n   So far, most of the network softwarization\
    \ efforts have focused on\n   virtualizing functions of network elements.  While\
    \ virtualization of\n   network elements started with the core, mobile-network\
    \ architectures\n   are now heavily switching to also virtualize Radio Access\
    \ Network\n   (RAN) functions.  The next natural step is to get virtualization\
    \ down\n   at the level of the end-user device (e.g., virtualizing a smartphone)\n\
    \   [virtualization_mobile_device].  The cloning of a device in the cloud\n  \
    \ (central or local) bears attractive benefits to both the device and\n   network\
    \ operations alike (e.g., power saving at the device by\n   offloading computational-heaving\
    \ functions to the cloud, optimized\n   networking -- both device-to-device and\
    \ device-to-infrastructure) for\n   service delivery through tighter integration\
    \ of the device (via its\n   clone in the networking infrastructure).  This is,\
    \ for example, being\n   explored by the European H2020 ICIRRUS project\n   <https://www.icirrus-5gnet.eu>.\n"
- title: 4.8.  Security and Privacy
  contents:
  - "4.8.  Security and Privacy\n   Similar to any other situations where resources\
    \ are shared, security\n   and privacy are two important aspects that need to\
    \ be taken into\n   account.\n   In the case of security, there are situations\
    \ where multiple service\n   providers will need to coexist in a virtual or hybrid\
    \ physical/\n   virtual environment.  This requires attestation procedures amongst\n\
    \   different virtual/physical functions and resources as well as ongoing\n  \
    \ external monitoring.  Similarly, different network slices operating\n   on the\
    \ same infrastructure can present security problems, for\n   instance, if one\
    \ slice running critical applications (e.g., support\n   for a safety system)\
    \ is affected by another slice running a less\n   critical application.  In general,\
    \ the minimum common denominator for\n   security measures on a shared system\
    \ should be equal to or higher\n   than the one required by the most-critical\
    \ application.  Multiple and\n   continuous threat model analysis as well as a\
    \ DevOps model are\n   required to maintain a certain level of security in an\
    \ NFV system.\n   Simplistically, DevOps is a process that combines multiple functions\n\
    \   into single cohesive teams in order to quickly produce quality\n   software.\
    \  Typically, it relies on also applying the Agile\n   development process, which\
    \ focuses on (among many things) dividing\n   large features into multiple, smaller\
    \ deliveries.  One part of this\n   is to immediately test the new smaller features\
    \ in order to get\n   immediate feedback on errors so that if present, they can\
    \ be\n   immediately fixed and redeployed.\n   On the other hand, privacy refers\
    \ to concerns about the control of\n   personal data and the decision of what\
    \ to reveal to whom.  In this\n   case, the storage, transmission, collection,\
    \ and potential\n   correlation of information in the NFV system, for purposes\
    \ not\n   originally intended or not known by the user, should be avoided.\n \
    \  This is particularly challenging, as future intentions and threats\n   cannot\
    \ be easily predicted and still can be applied on data collected\n   in the past.\
    \  Therefore, well-known techniques, such as data\n   minimization using privacy\
    \ features as default and allowing users to\n   opt in/out, should be used to\
    \ prevent potential privacy issues.\n   Compared to traditional networks, NFV\
    \ will result in networks that\n   are much more dynamic (in function distribution\
    \ and topology) and\n   elastic (in size and boundaries).  Thus, NFV will require\
    \ network\n   operators to evolve their operational and administrative security\n\
    \   solutions to work in this new environment.  For example, in NFV, the\n   network\
    \ orchestrator will become a key node to provide security\n   policy orchestration\
    \ across the different physical and virtual\n   components of the virtualized\
    \ network.  For highly confidential data,\n   for example, the network orchestrator\
    \ should take into account if\n   certain physical HW of the network is considered\
    \ to be more secure\n   (e.g., because it is located in secure premises) than\
    \ other HW.\n   Traditional telecom networks typically run under a single\n  \
    \ administrative domain controlled by (exactly) one operator.  With\n   NFV, it\
    \ is expected that in many cases, the telecom operator will now\n   become a tenant\
    \ (running the VNFs), and the infrastructure (NFVI) may\n   be run by a different\
    \ operator and/or cloud service provider (see\n   also Section 4.4).  Thus, there\
    \ will be multiple administrative\n   domains involved, making security policy\
    \ coordination more complex.\n   For example, who will be in charge of provisioning\
    \ and maintaining\n   security credentials such as public and private keys?  Also,\
    \ should\n   private keys be allowed to be replicated across the NFV for\n   redundancy\
    \ reasons?  Alternatively, it can be investigated how to\n   develop a mechanism\
    \ that avoids such a security policy coordination,\n   thus making the system\
    \ more robust.\n   On a positive note, NFV may better defend against denial-of-service\n\
    \   (DoS) attacks because of the distributed nature of the network (i.e.,\n  \
    \ no single point of failure) and the ability to steer (undesirable)\n   traffic\
    \ quickly [etsi_gs_nfv_sec_001].  Also, NFVs that have physical\n   HW that is\
    \ distributed across multiple data centers will also provide\n   better fault\
    \ isolation environments.  Particularly, this holds true\n   if each data center\
    \ is protected separately via firewalls,\n   Demilitarized Zones (DMZs), and other\
    \ network-protection techniques.\n   SDN can also be used to help improve security\
    \ by facilitating the\n   operation of existing protocols, such as Authentication,\n\
    \   Authorization and Accounting (AAA).  The management of AAA\n   infrastructures,\
    \ namely the management of AAA routing and the\n   establishment of security associations\
    \ between AAA entities, can be\n   performed using SDN, as analyzed in [SDN-AAA].\n"
- title: 4.9.  Separation of Control Concerns
  contents:
  - "4.9.  Separation of Control Concerns\n   NFV environments offer two possible\
    \ levels of SDN control.  One level\n   is the need for controlling the NFVI to\
    \ provide connectivity end-to-\n   end among VNFs or among VNFs and Physical Network\
    \ Functions (PNFs).\n   A second level is the control and configuration of the\
    \ VNFs\n   themselves (in other words, the configuration of the network service\n\
    \   implemented by those VNFs), taking advantage of the programmability\n   brought\
    \ by SDN.  Both control concerns are separated in nature.\n   However, interaction\
    \ between both could be expected in order to\n   optimize, scale, or influence\
    \ each other.\n   Clear mechanisms for such interactions are needed in order to\
    \ avoid\n   malfunctioning or interference concerns.  These ideas are considered\n\
    \   in [etsi_gs_nfv_eve005] and [LAYERED-SDN].\n"
- title: 4.10.  Network Function Placement
  contents:
  - "4.10.  Network Function Placement\n   Network function placement is a problem\
    \ in any kind of network\n   telecommunications infrastructure.  Moreover, the\
    \ increased degree of\n   freedom added by network virtualization makes this problem\
    \ even more\n   important, and also harder to tackle.  Deciding where to place\
    \ VNFs\n   is a resource-allocation problem that needs to (or may) take into\n\
    \   consideration quite a few aspects: resiliency, (anti-)affinity,\n   security,\
    \ privacy, energy efficiency, etc.\n   When several functions are chained (typical\
    \ scenario), placement\n   algorithms become more complex and important (as described\
    \ in\n   Section 4.6).  While there has been research on the topic\n   ([nfv_piecing],\
    \ [dynamic_placement], and [vnf-p]), this still remains\n   an open challenge\
    \ that requires more attention.  The use of multi-\n   domains adds another component\
    \ of complexity to this problem that has\n   to be considered.\n"
- title: 4.11.  Testing
  contents:
  - "4.11.  Testing\n   The impacts of network virtualization on testing can be divided\
    \ into\n   three groups:\n   1.  Changes in methodology\n   2.  New functionality\n\
    \   3.  Opportunities\n"
- title: 4.11.1.  Changes in Methodology
  contents:
  - "4.11.1.  Changes in Methodology\n   The largest impact of NFV is the ability\
    \ to isolate the System Under\n   Test (SUT).  When testing PNFs, isolating the\
    \ SUT means that all the\n   other devices that the SUT communicates with are\
    \ replaced with\n   simulations (or controlled executions) in order to place the\
    \ SUT\n   under test by itself.  The SUT may be comprised of one or more\n   devices.\
    \  The simulations use the appropriate traffic type and\n   protocols in order\
    \ to execute test cases.\n   As shown in Figure 2, NFV provides a common architecture\
    \ for all\n   functions to use.  A VNF is executed using resources offered by\
    \ the\n   NFVI, which have been allocated using the MANO function.  It is not\n\
    \   possible to test a VNF by itself, without the entire supporting\n   environment\
    \ present.  This fundamentally changes how to consider the\n   SUT.  In the case\
    \ of a VNF (or multiple VNFs), the SUT is part of a\n   larger architecture that\
    \ is necessary in order to run the SUTs.\n   Therefore, isolation of the SUT becomes\
    \ controlling the environment\n   in a disciplined manner.  The components of\
    \ the environment necessary\n   to run the SUTs that are not part of the SUT itself\
    \ become the test\n   environment.  In the case of VNFs that are part of the SUT,\
    \ the NFVI\n   and MANO become the test environment.  The configurations and\n\
    \   policies that guide the test environment should remain constant\n   during\
    \ the execution of the tests, and also from test to test.\n   Configurations such\
    \ as CPU pinning, NUMA configuration, the SW\n   versions and configurations of\
    \ the hypervisor, vSwitch and NICs\n   should remain constant.  The only variables\
    \ in the testing should be\n   those controlling the SUT itself.  If any configuration\
    \ in the test\n   environment is changed from test to test, the results become\
    \ very\n   difficult, if not impossible, to compare since the test environment\n\
    \   behavior may change the results as a consequence of the configuration\n  \
    \ change.\n   Testing the NFVI itself also presents new considerations.  With\
    \ a\n   PNF, the dedicated hardware supporting it is optimized for the\n   particular\
    \ workload of the function.  Routing hardware is specially\n   built to support\
    \ packet forwarding functions, while the hardware to\n   support a purely control-plane\
    \ application (say, a DNS server, or a\n   Diameter function) will not have this\
    \ specialized capability.  In\n   NFV, the NFVI is required to support all types\
    \ of potentially\n   different workload types.\n   Therefore, testing the NFVI\
    \ requires careful consideration about what\n   types of metrics are sought. \
    \ This, in turn, depends on the workload\n   type the expected VNF will be.  Examples\
    \ of different workload types\n   are data forwarding, control plane, encryption,\
    \ and authentication.\n   All these types of expected workloads will determine\
    \ the types of\n   metrics that should be sought.  For example, if the workload\
    \ is\n   control plane, then a metric such as jitter is not useful, but\n   dropped\
    \ packets are critical.  In a multi-tenant environment, the\n   NFVI could support\
    \ various types of workloads.  In this case, testing\n   with a variety of traffic\
    \ types while measuring the corresponding\n   metrics simultaneously becomes necessary.\n\
    \   Test beds for any type of testing for an NFV-based system will be\n   largely\
    \ similar to previously used test architectures.  The methods\n   are impacted\
    \ by virtualization, as described above, but the design of\n   test beds are similar\
    \ as in the past.  There are two main new\n   considerations:\n   o  Since networking\
    \ is based on software, which has lead to greater\n      automation in deployment,\
    \ the test system should also be\n      deployable with the rest of the system\
    \ in order to fully automate\n      the system.  This is especially relevant in\
    \ a DevOps environment\n      supported by a Continuous Integration and Continuous\
    \ Deployment\n      (CI/CD) tool chain (see Section 4.11.3 below).\n   o  In any\
    \ performance test bed, the test system should not share the\n      same resources\
    \ as the SUT.  While multi-tenancy is a reality in\n      virtualization, having\
    \ the test system share resources with the\n      SUT will impact the measured\
    \ results in a performance test bed.\n      The test system should be deployed\
    \ on a separate platform in order\n      not to impact the resources available\
    \ to the SUT.\n"
- title: 4.11.2.  New Functionality
  contents:
  - "4.11.2.  New Functionality\n   NFV presents a collection of new functionality\
    \ in order to support\n   the goal of software networking.  Each component on\
    \ the architecture\n   shown in Figure 2 has an associated set of functionality\
    \ that allows\n   VNFs to run the following: onboarding, life-cycle management\
    \ for VNFs\n   and Network Services (NS), resource allocation, hypervisor functions,\n\
    \   etc.\n   One of the new capabilities enabled by NFV is VNF Forwarding Graphs\n\
    \   (VNFFG).  This refers to the graph that represents a network service\n   by\
    \ chaining together VNFs into a forwarding path.  In practice, the\n   forwarding\
    \ path can be implemented in a variety of ways using\n   different networking\
    \ capabilities: vSwitch, SDN, and SDN with a\n   northbound application.  Additionally,\
    \ the VNFFG might use tunneling\n   protocols like Virtual eXtensible Local Area\
    \ Network (VXLAN).  The\n   dynamic allocation and implementation of these networking\
    \ paths will\n   have different performance characteristics depending on the methods\n\
    \   used.  The path implementation mechanism becomes a variable in the\n   network\
    \ testing of the NSs.  The methodology used to test the various\n   mechanisms\
    \ should largely remain the same; as usual, the test\n   environment should remain\
    \ constant for each of the tests, focusing on\n   varying the path establishment\
    \ method.\n   \"Scaling\" refers to the change in allocation of resources to a\
    \ VNF or\n   NS.  It happens dynamically at run-time, based on defined policies\n\
    \   and triggers.  The triggers can be network, compute, or storage\n   based.\
    \  Scaling can allocate more resources in times of need, or\n   reduce the amount\
    \ of resources allocated when the demand is reduced.\n   The SUT in this case\
    \ becomes much larger than the VNF itself: MANO\n   controls how scaling is done\
    \ based on policies, and then allocates\n   the resources accordingly in the NFVI.\
    \  Essentially, the testing of\n   scaling includes the entire NFV architecture\
    \ components into the SUT.\n"
- title: 4.11.3.  Opportunities
  contents:
  - "4.11.3.  Opportunities\n   Softwarization of networking functionality leads to\
    \ softwarization of\n   the test as well.  As PNFs are being transformed into\
    \ VNFs, so are\n   the test tools.  This leads to the fact that test tools are\
    \ also\n   being controlled and executed in the same environment as the VNFs.\n\
    \   This presents an opportunity to include VNF-based test tools along\n   with\
    \ the deployment of the VNFs supporting the services of the\n   service provider\
    \ into the host data centers.  Therefore, tests can be\n   automatically executed\
    \ upon deployment in the target environment, for\n   each deployment, and each\
    \ service.  With PNFs, this was very\n   difficult to achieve.\n   This new concept\
    \ helps to enable modern concepts like DevOps and\n   Continuous Integration and\
    \ Continuous Deployment in the NFV\n   environment.  The CI/CD pipeline supports\
    \ this concept.  It consists\n   of a series of tools, among which immediate testing\
    \ is an integral\n   part, to deliver software from source to deployment.  The\
    \ ability to\n   deploy the test tools themselves into the production environment\n\
    \   stretches the CI/CD pipeline all the way to production deployment,\n   allowing\
    \ a range of tests to be executed.  The tests can be simple,\n   with a goal of\
    \ verifying the correct deployment and networking\n   establishment, but can also\
    \ be more complex, like testing VNF\n   functionality.\n"
- title: 5.  Technology Gaps and Potential IETF Efforts
  contents:
  - "5.  Technology Gaps and Potential IETF Efforts\n   Table 1 correlates the open\
    \ network virtualization research areas\n   identified in this document to potential\
    \ IETF and IRTF groups that\n   could address some aspects of them.  An example\
    \ of a specific gap\n   that the group could potentially address is identified\
    \ as a\n   parenthetical beside the group name.\n   +-------------------------+-----------------------------------------+\n\
    \   | Open Research Area      | Potential IETF/IRTF Group               |\n  \
    \ +-------------------------+-----------------------------------------+\n   |\
    \ 1) Guaranteeing QoS     | IPPM WG (Measurements of NFVI)          |\n   |  \
    \                       |                                         |\n   | 2) Performance\
    \          | SFC WG, NFVRG (energy-driven            |\n   | improvement     \
    \        | orchestration)                          |\n   |                   \
    \      |                                         |\n   | 3) Multiple Domains \
    \    | NFVRG (multi-domain orchestration)      |\n   |                       \
    \  |                                         |\n   | 4) Network Slicing      |\
    \ NVO3 WG, NETSLICES bar BoF (multi-      |\n   |                         | tenancy\
    \ support)                        |\n   |                         |          \
    \                               |\n   | 5) Service Composition  | SFC WG (SFC\
    \ Mgmt and Config)            |\n   |                         |              \
    \                           |\n   | 6) End-user device      | N/A            \
    \                         |\n   | virtualization          |                  \
    \                       |\n   |                         |                    \
    \                     |\n   | 7) Security             | N/A                  \
    \                   |\n   |                         |                        \
    \                 |\n   | 8) Separation of        | NFVRG (separation between\
    \ transport     |\n   | control concerns        | control and services)      \
    \             |\n   |                         |                              \
    \           |\n   | 9) Testing              | NFVRG (testing of scaling)     \
    \         |\n   |                         |                                  \
    \       |\n   | 10) Function placement  | NFVRG, SFC WG (VNF placement algorithms\
    \ |\n   |                         | and protocols)                          |\n\
    \   +-------------------------+-----------------------------------------+\n  \
    \   Table 1: Mapping of Open Research Areas to Potential IETF Groups\n"
- title: 6.  NFVRG Focus Areas
  contents:
  - "6.  NFVRG Focus Areas\n   Table 2 correlates the currently identified NFVRG topics\
    \ of interest\n   / focus areas to the open network virtualization research areas\n\
    \   enumerated in this document.  This can help the NFVRG in identifying\n   and\
    \ prioritizing research topics.  The current list of NFVRG focus\n   points is\
    \ the following:\n   o  Re-architecting functions, including aspects such as new\n\
    \      architectural and design patterns (e.g., containerization,\n      statelessness,\
    \ serverless, control/data plane separation), SDN\n      integration, and proposals\
    \ on programmability.\n   o  New management frameworks, considering aspects related\
    \ to new OAM\n      mechanisms (e.g., configuration control, hybrid descriptors)\
    \ and\n      lightweight MANO proposals.\n   o  Techniques to guarantee low latency,\
    \ resource isolation, and other\n      data-plane features, including hardware\
    \ acceleration, functional\n      offloading to data-plane elements (including\
    \ NICs), and related\n      approaches.\n   o  Measurement and benchmarking, addressing\
    \ both internal\n      measurements and external applications.\n     +-------------------------------------+-------------------------+\n\
    \     | NFVRG Focus Point                   | Open Research Area      |\n    \
    \ +-------------------------------------+-------------------------+\n     | 1)\
    \ Re-architecting functions        | - Performance improvem. |\n     |       \
    \                              | - Network Slicing       |\n     |           \
    \                          | - Guaranteeing QoS      |\n     |               \
    \                      | - Security              |\n     |                   \
    \                  | - End-user device virt. |\n     |                       \
    \              | - Separation of control |\n     |                           \
    \          |                         |\n     | 2) New management frameworks  \
    \      | - Multiple Domains      |\n     |                                   \
    \  | - Service Composition   |\n     |                                     | -\
    \ End-user device virt. |\n     |                                     |      \
    \                   |\n     | 3) Low latency, resource isolation, | - Performance\
    \ improvem. |\n     | etc.                                | - Separation of control\
    \ |\n     |                                     |                         |\n\
    \     | 4) Measurement and benchmarking     | - Guaranteeing QoS      |\n    \
    \ |                                     | - Testing               |\n     +-------------------------------------+-------------------------+\n\
    \       Table 2: Mapping of NFVRG Focus Points to Open Research Areas\n"
- title: 7.  IANA Considerations
  contents:
  - "7.  IANA Considerations\n   This document has no IANA actions.\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   This is an Informational RFC that details research\
    \ challenges; it\n   does not introduce any security threat.  Research challenges\
    \ and gaps\n   related to security and privacy have been included in Section 4.8.\n"
- title: 9.  Informative References
  contents:
  - "9.  Informative References\n   [COMS-PS]  Geng, L., Slawomir, S., Qiang, L.,\
    \ Matsushima, S., Galis,\n              A., and L. Contreras, \"Problem Statement\
    \ of Common\n              Operation and Management of Network Slicing\", Work\
    \ in\n              Progress, draft-geng-coms-problem-statement-04, March\n  \
    \            2018.\n   [dynamic_chaining]\n              Martini, B. and F. Paganelli,\
    \ \"A Service-Oriented Approach\n              for Dynamic Chaining of Virtual\
    \ Network Functions over\n              Multi-Provider Software-Defined Networks\"\
    , Future\n              Internet Vol. 8, No. 2, DOI 10.3390/fi8020024, June 2016.\n\
    \   [dynamic_placement]\n              Clayman, S., Maini, E., Galis, A., Manzalini,\
    \ A., and\n              N. Mazzocca, \"The dynamic placement of virtual network\n\
    \              functions\", 2014 IEEE Network Operations and Management\n    \
    \          Symposium (NOMS) pp. 1-9, DOI 10.1109/NOMS.2014.6838412,\n        \
    \      May 2014.\n   [etsi_gs_nfv_003]\n              ETSI NFV ISG, \"Network\
    \ Functions Virtualisation (NFV);\n              Terminology for Main Concepts\
    \ in NFV\", ETSI GS NFV 003\n              V1.2.1 NFV 003, December 2014,\n  \
    \            <http://www.etsi.org/deliver/etsi_gs/\n              NFV/001_099/003/01.02.01_60/gs_NFV003v010201p.pdf>.\n\
    \   [etsi_gs_nfv_eve005]\n              ETSI NFV ISG, \"Network Functions Virtualisation\
    \ (NFV);\n              Ecosystem; Report on SDN Usage in NFV Architectural\n\
    \              Framework\", ETSI GS NFV-EVE 005 V1.1.1 NFV-EVE 005,\n        \
    \      December 2015,\n              <http://www.etsi.org/deliver/etsi_gs/NFV-EVE/001_099/\n\
    \              005/01.01.01_60/gs_NFV-EVE005v010101p.pdf>.\n   [etsi_gs_nfv_per_001]\n\
    \              ETSI NFV ISG, \"Network Functions Virtualisation (NFV); NFV\n \
    \             Performance & Portability Best Practises\", ETSI GS NFV-PER\n  \
    \            001 V1.1.2 NFV-PER 001, December 2014,\n              <https://www.etsi.org/deliver/etsi_gs/nfv-per/\n\
    \              001_099/001/01.01.02_60/gs_nfv-per001v010102p.pdf>.\n   [etsi_gs_nfv_sec_001]\n\
    \              ETSI NFV ISG, \"Network Functions Virtualisation (NFV); NFV\n \
    \             Security; Problem Statement\", ETSI GS NFV-SEC 001 V1.1.1\n    \
    \          NFV-SEC 001, October 2014, <http://www.etsi.org/deliver/\n        \
    \      etsi_gs/NFV-SEC/001_099/001/01.01.01_60/\n              gs_NFV-SEC001v010101p.pdf>.\n\
    \   [etsi_nfv_whitepaper_3]\n              ETSI, \"Network Functions Virtualisation\
    \ (NFV) - White\n              Paper #3: Network Operator Perspectives on Industry\n\
    \              Progress\", Issue 1, SDN & OpenFlow World\n              Congress\
    \ Dusseldorf, Germany, October 2014,\n              <http://portal.etsi.org/NFV/NFV_White_Paper3.pdf>.\n\
    \   [google_sdn_wan]\n              Jain, S., et al., \"B4: experience with a\
    \ globally-deployed\n              Software Defined WAN\", SIGCOMM '13: Proceedings\
    \ of the ACM\n              SIGCOMM 2013 conference on SIGCOMM, pp. 3-14, Hong\n\
    \              Kong China, DOI 10.1145/2486001.2486019, August 2013.\n   [intel_10_differences_nfv_cloud]\n\
    \              Torre, P., \"Discover the Top 10 Differences Between NFV\n    \
    \          and Cloud Environments\", November 2015,\n              <https://software.intel.com/en-us/videos/discover-the-top-\n\
    \              10-differences-between-nfv-and-cloud-environments>.\n   [itu-t-y.3300]\n\
    \              ITU-T, \"Y.3300: Framework of software-defined networking\",\n\
    \              ITU-T Recommendation Y.3300, June 2014,\n              <http://www.itu.int/rec/T-REC-Y.3300-201406-I/en>.\n\
    \   [itu-t-y.3301]\n              ITU-T, \"Y.3301: Functional requirements of\
    \ software-\n              defined networking\", ITU-T Recommendation Y.3301,\n\
    \              September 2016,\n              <http://www.itu.int/rec/T-REC-Y.3301-201609-I/en>.\n\
    \   [itu-t-y.3302]\n              ITU-T, \"Y.3302: Functional architecture of\
    \ software-\n              defined networking\", ITU-T Recommendation Y.3302,\
    \ January\n              2017, <http://www.itu.int/rec/T-REC-Y.3302-201701-I/en>.\n\
    \   [LAYERED-SDN]\n              Contreras, L., Bernardos, C., Lopez, D., Boucadair,\
    \ M.,\n              and P. Iovanna, \"Cooperating Layered Architecture for\n\
    \              Software Defined Networking (CLAS)\", Work in Progress,\n     \
    \         draft-contreras-layered-sdn-03, November 2018.\n   [LIGHT-NFV]\n   \
    \           Sriram, N., Krishnan, R., Ghanwani, A., Krishnaswamy, D.,\n      \
    \        Willis, P., Chaudhary, A., and F. Huici, \"An Analysis of\n         \
    \     Lightweight Virtualization Technologies for NFV\", Work in\n           \
    \   Progress, draft-natarajan-nfvrg-containers-for-nfv-03,\n              July\
    \ 2016.\n   [multi-domain_5GEx]\n              Bernardos, C., Gero, B., Di Girolamo,\
    \ M., Kern, A.,\n              Martini, B., and I. Vaishnavi, \"5GEx: Realizing\
    \ a Europe-\n              wide Multi-domain framework for software-defined\n\
    \              infrastructures\", Transactions on Emerging\n              Telecommunications\
    \ Technologies Vol. 27, No. 9,\n              pp. 1271-1280, DOI 10.1002/ett.3085,\
    \ July 2016.\n   [MULTI-NMRG]\n              Bernardos, C., Contreras, L., Vaishnavi,\
    \ I., Szabo, R.,\n              Li, X., Paolucci, F., Sgambelluri, A., Martini,\
    \ B.,\n              Valcarenghi, L., Landi, G., Andrushko, D., and A. Mourad,\n\
    \              \"Multi-domain Network Virtualization\", Work in Progress,\n  \
    \            draft-bernardos-nmrg-multidomain-00, March 2019.\n   [NETSLICES]\n\
    \              Galis, A., Dong, J., Makhijani, K., Bryant, S., Boucadair,\n  \
    \            M., and P. Martinez-Julia, \"Network Slicing - Introductory\n   \
    \           Document and Revised Problem Statement\", Work in\n              Progress,\
    \ draft-gdmb-netslices-intro-and-ps-02, February\n              2017.\n   [NFV-COTS]\
    \ Mo, L. and B. Khasnabish, \"NFV Reliability using COTS\n              Hardware\"\
    , Work in Progress, draft-mlk-nfvrg-nfv-\n              reliability-using-cots-01,\
    \ October 2015.\n   [nfv_piecing]\n              Luizelli, M., Bays, L., Buriol,\
    \ L., Barcellos, M., and\n              L. Gaspary, \"Piecing together the NFV\
    \ provisioning puzzle:\n              Efficient placement and chaining of virtual\
    \ network\n              functions\", 2015 IFIP/IEEE International Symposium on\n\
    \              Integrated Network Management (IM) pp. 98-106,\n              DOI\
    \ 10.1109/INM.2015.7140281, May 2015.\n   [nfv_sota_research_challenges]\n   \
    \           Mijumbi, R., Serrat, J., Gorricho, J-L., Bouten, N.,\n           \
    \   De Turck, F., and R. Boutaba, \"Network Function\n              Virtualization:\
    \ State-of-the-art and Research Challenges\",\n              IEEE Communications\
    \ Surveys & Tutorials Volume: 18,\n              Issue: 1, pp. 236-262, DOI 10.1109/COMST.2015.2477041,\n\
    \              September 2015.\n   [NFVRG-TOPO]\n              Bagnulo, M. and\
    \ D. Dolson, \"NFVI PoP Network Topology:\n              Problem Statement\",\
    \ Work in Progress, draft-bagnulo-nfvrg-\n              topology-01, March 2016.\n\
    \   [ngmn_5G_whitepaper]\n              NGMN Alliance, \"NGMN 5G White Paper\"\
    , Version 1.0,\n              February 2015,\n              <https://www.ngmn.org/fileadmin/ngmn/content/\n\
    \              images/news/ngmn_news/NGMN_5G_White_Paper_V1_0.pdf>.\n   [omniran]\
    \  IEEE, \"Recommended Practice for Network Reference Model\n              and\
    \ Functional Description of IEEE 802 Access Network\",\n              P802.1CF\
    \ IEEE Draft, December 2017.\n   [onf_tr_521]\n              Open Networking Foundation,\
    \ \"SDN Architecture\", ONF\n              TR-521 TR-521, Issue 1.1, February\
    \ 2016,\n              <https://www.opennetworking.org/images/stories/downloads/\n\
    \              sdn-resources/technical-reports/\n              TR-521_SDN_Architecture_issue_1.1.pdf>.\n\
    \   [OpenFlow] Open Networking Foundation, \"OpenFlow Switch\n              Specification\"\
    , ONF TS-025, Version 1.5.1 (Protocol\n              version 0x06), March 2015.\n\
    \   [openmano_dataplane]\n              Lopez, D., \"OpenMANO: The Dataplane Ready\
    \ Open Source NFV\n              MANO Stack\", March 2015, <https://www.ietf.org/\n\
    \              proceedings/92/slides/slides-92-nfvrg-7.pdf>.\n   [RFC5810]  Doria,\
    \ A., Ed., Hadi Salim, J., Ed., Haas, R., Ed.,\n              Khosravi, H., Ed.,\
    \ Wang, W., Ed., Dong, L., Gopal, R., and\n              J. Halpern, \"Forwarding\
    \ and Control Element Separation\n              (ForCES) Protocol Specification\"\
    , RFC 5810,\n              DOI 10.17487/RFC5810, March 2010,\n              <https://www.rfc-editor.org/info/rfc5810>.\n\
    \   [RFC6241]  Enns, R., Ed., Bjorklund, M., Ed., Schoenwaelder, J., Ed.,\n  \
    \            and A. Bierman, Ed., \"Network Configuration Protocol\n         \
    \     (NETCONF)\", RFC 6241, DOI 10.17487/RFC6241, June 2011,\n              <https://www.rfc-editor.org/info/rfc6241>.\n\
    \   [RFC7252]  Shelby, Z., Hartke, K., and C. Bormann, \"The Constrained\n   \
    \           Application Protocol (CoAP)\", RFC 7252,\n              DOI 10.17487/RFC7252,\
    \ June 2014,\n              <https://www.rfc-editor.org/info/rfc7252>.\n   [RFC7426]\
    \  Haleplidis, E., Ed., Pentikousis, K., Ed., Denazis, S.,\n              Hadi\
    \ Salim, J., Meyer, D., and O. Koufopavlou, \"Software-\n              Defined\
    \ Networking (SDN): Layers and Architecture\n              Terminology\", RFC\
    \ 7426, DOI 10.17487/RFC7426, January\n              2015, <https://www.rfc-editor.org/info/rfc7426>.\n\
    \   [RFC7498]  Quinn, P., Ed. and T. Nadeau, Ed., \"Problem Statement for\n  \
    \            Service Function Chaining\", RFC 7498,\n              DOI 10.17487/RFC7498,\
    \ April 2015,\n              <https://www.rfc-editor.org/info/rfc7498>.\n   [RFC7665]\
    \  Halpern, J., Ed. and C. Pignataro, Ed., \"Service Function\n              Chaining\
    \ (SFC) Architecture\", RFC 7665,\n              DOI 10.17487/RFC7665, October\
    \ 2015,\n              <https://www.rfc-editor.org/info/rfc7665>.\n   [RFC8030]\
    \  Thomson, M., Damaggio, E., and B. Raymor, Ed., \"Generic\n              Event\
    \ Delivery Using HTTP Push\", RFC 8030,\n              DOI 10.17487/RFC8030, December\
    \ 2016,\n              <https://www.rfc-editor.org/info/rfc8030>.\n   [RFC8040]\
    \  Bierman, A., Bjorklund, M., and K. Watsen, \"RESTCONF\n              Protocol\"\
    , RFC 8040, DOI 10.17487/RFC8040, January 2017,\n              <https://www.rfc-editor.org/info/rfc8040>.\n\
    \   [RFC8172]  Morton, A., \"Considerations for Benchmarking Virtual\n       \
    \       Network Functions and Their Infrastructure\", RFC 8172,\n            \
    \  DOI 10.17487/RFC8172, July 2017,\n              <https://www.rfc-editor.org/info/rfc8172>.\n\
    \   [SDN-AAA]  Lopez, R. and G. Lopez-Millan, \"Software-Defined\n           \
    \   Networking (SDN)-based AAA Infrastructures Management\",\n              Work\
    \ in Progress, draft-marin-sdnrg-sdn-aaa-mng-00,\n              November 2015.\n\
    \   [sfc_challenges]\n              Medhat, A., Taleb, T., Elmangoush, A., Carella,\
    \ G.,\n              Covaci, S., and T. Magedanz, \"Service Function Chaining\
    \ in\n              Next Generation Networks: State of the Art and Research\n\
    \              Challenges\", IEEE Communications Magazine vol. 55, no. 2,\n  \
    \            pp. 216-223, DOI 10.1109/MCOM.2016.1600219RP, February\n        \
    \      2017.\n   [SLICE-3GPP]\n              Foy, X. and A. Rahman, \"Network\
    \ Slicing - 3GPP Use Case\",\n              Work in Prgoress, draft-defoy-netslices-3gpp-network-\n\
    \              slicing-02, October 2017.\n   [virtualization_mobile_device]\n\
    \              Sproule, W. and A. Fernando, \"Virtualization of Mobile\n     \
    \         Device User Experience\", US Patent 9.542.062 B2, filed\n          \
    \    October 2013 and issued December 2014, Current\n              Assignee: Microsoft\
    \ Technology Licensing LLC.\n   [vnf-p]    Moens, H. and , \"VNF-P: A model for\
    \ efficient placement of\n              virtualized network functions\", 10th\
    \ International\n              Conference on Network and Service Management (CNSM)\
    \ and\n              Workshop pp. 418-423, DOI 10.1109/CNSM.2014.7014205,\n  \
    \            November 2014.\n   [VNF-VBAAS]\n              Rosa, R., Rothenberg,\
    \ C., and R. Szabo, \"VNF Benchmark-as-\n              a-Service\", Work in Progress,\
    \ draft-rorosz-nfvrg-vbaas-00,\n              October 2015.\n   [vnf_benchmarking]\n\
    \              Rosa, R., Rothenberg, C., and R. Szabo, \"A VNF Testing\n     \
    \         Framework Design, Implementation and Partial Results\",\n          \
    \    NFVRG IETF 97, November 2016,\n              <https://www.ietf.org/proceedings/97/slides/\n\
    \              slides-97-nfvrg-06-vnf-benchmarking-00.pdf>.\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   The authors want to thank Dirk von Hugo, Rafa Marin, Diego\
    \ Lopez,\n   Ramki Krishnan, Kostas Pentikousis, Rana Pratap Sircar, Alfred\n\
    \   Morton, Nicolas Kuhn, Saumya Dikshit, Fabio Giust, Evangelos\n   Haleplidis,\
    \ Angeles Vazquez-Castro, Barbara Martini, Jose Saldana,\n   and Gino Carrozzo\
    \ for their very useful reviews and comments to the\n   document.  Special thanks\
    \ to Pedro Martinez-Julia, who provided text\n   for the network slicing section.\n\
    \   The authors want to also thank Dave Oran and Michael Welzl for their\n   very\
    \ detailed IRSG reviews.\n   The work of Carlos J. Bernardos and Luis M. Contreras\
    \ is partially\n   supported by the H2020 5GEx (Grant Agreement no. 671636) and\n\
    \   5G-TRANSFORMER (Grant Agreement no. 761536) projects.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Carlos J. Bernardos\n   Universidad Carlos III de Madrid\n\
    \   Av. Universidad, 30\n   Leganes, Madrid  28911\n   Spain\n   Phone: +34 91624\
    \ 6236\n   Email: cjbc@it.uc3m.es\n   URI:   http://www.it.uc3m.es/cjbc/\n   Akbar\
    \ Rahman\n   InterDigital Communications, LLC\n   1000 Sherbrooke Street West,\
    \ 10th floor\n   Montreal, Quebec  H3A 3G4\n   Canada\n   Email: Akbar.Rahman@InterDigital.com\n\
    \   URI:   http://www.InterDigital.com/\n   Juan Carlos Zuniga\n   SIGFOX\n  \
    \ 425 rue Jean Rostand\n   Labege  31670\n   France\n   Email: j.c.zuniga@ieee.org\n\
    \   URI:   http://www.sigfox.com/\n   Luis M. Contreras\n   Telefonica I+D\n \
    \  Ronda de la Comunicacion, S/N\n   Madrid  28050\n   Spain\n   Email: luismiguel.contrerasmurillo@telefonica.com\n\
    \   Pedro Aranda\n   Universidad Carlos III de Madrid\n   Av. Universidad, 30\n\
    \   Leganes, Madrid  28911\n   Spain\n   Email: pedroandres.aranda@uc3m.es\n \
    \  Pierre Lynch\n   Keysight Technologies\n   800 Perimeter Park Dr, Suite A\n\
    \   Morrisville, NC  27560\n   United States of America\n   Email: pierre.lynch@keysight.com\n\
    \   URI:   http://www.keysight.com\n"
