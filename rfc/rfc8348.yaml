- title: __initial_text__
  contents:
  - '               A YANG Data Model for Hardware Management

    '
- title: Abstract
  contents:
  - "Abstract\n   This document defines a YANG data model for the management of\n\
    \   hardware on a single server.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 7841.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8348.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2018 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (https://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \      1.1. Terminology ................................................3\n  \
    \    1.2. Tree Diagrams ..............................................3\n   2.\
    \ Objectives ......................................................4\n   3. Hardware\
    \ Data Model .............................................4\n      3.1. The Components\
    \ Lists .......................................5\n   4. Relationship to ENTITY-MIB\
    \ ......................................6\n   5. Relationship to ENTITY-SENSOR-MIB\
    \ ...............................8\n   6. Relationship to ENTITY-STATE-MIB ................................8\n\
    \   7. Hardware YANG Modules ...........................................9\n  \
    \    7.1. \"ietf-hardware\" Module .....................................9\n  \
    \    7.2. \"iana-hardware\" Module ....................................34\n  \
    \ 8. IANA Considerations ............................................38\n    \
    \  8.1. URI Registrations .........................................38\n      8.2.\
    \ YANG Module Registrations .................................39\n   9. Security\
    \ Considerations ........................................39\n   10. References\
    \ ....................................................40\n      10.1. Normative\
    \ References .....................................40\n      10.2. Informative\
    \ References ...................................41\n   Appendix A.  Hardware State\
    \ Data Model ............................42\n     A.1.  Hardware State YANG Module\
    \ ................................43\n   Acknowledgments ...................................................60\n\
    \   Authors' Addresses ................................................60\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document defines a YANG data model [RFC7950] for the\
    \ management\n   of hardware on a single server.\n   The data model includes configuration\
    \ and system state (status\n   information and counters for the collection of\
    \ statistics).\n   The data model in this document is designed to be compliant\
    \ with the\n   Network Management Datastore Architecture (NMDA) [RFC8342].  For\n\
    \   implementations that do not yet support NMDA, a temporary module with\n  \
    \ system state data only is defined in Appendix A.\n"
- title: 1.1.  Terminology
  contents:
  - "1.1.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"\
    SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT\
    \ RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted\
    \ as described in\n   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear\
    \ in all\n   capitals, as shown here.\n   The following terms are defined in [RFC8342]\
    \ and are not redefined\n   here:\n   o  client\n   o  server\n   o  configuration\n\
    \   o  system state\n   o  operational state\n   o  intended configuration\n"
- title: 1.2.  Tree Diagrams
  contents:
  - "1.2.  Tree Diagrams\n   Tree diagrams used in this document follow the notation\
    \ defined in\n   [RFC8340].\n"
- title: 2.  Objectives
  contents:
  - "2.  Objectives\n   This section describes some of the design objectives for the\
    \ hardware\n   data model.\n   o  The hardware data model needs to support many\
    \ common properties\n      used to identify hardware components.\n   o  Important\
    \ information and states about hardware components need to\n      be collected\
    \ from devices that support the hardware data model.\n   o  The hardware data\
    \ model should be suitable for new implementations\n      to use as is.\n   o\
    \  The hardware data model defined in this document can be\n      implemented\
    \ on a system that also implements ENTITY-MIB; thus, the\n      mapping between\
    \ the hardware data model and ENTITY-MIB should be\n      clear.\n   o  The data\
    \ model should support pre-provisioning of hardware\n      components.\n"
- title: 3.  Hardware Data Model
  contents:
  - "3.  Hardware Data Model\n   This document defines the YANG module \"ietf-hardware\"\
    , which has the\n   following structure:\n   module: ietf-hardware\n     +--rw\
    \ hardware\n        +--ro last-change?   yang:date-and-time\n        +--rw component*\
    \ [name]\n           +--rw name              string\n           +--rw class  \
    \           identityref\n           +--ro physical-index?   int32 {entity-mib}?\n\
    \           +--ro description?      string\n           +--rw parent?         \
    \  -> ../../component/name\n           +--rw parent-rel-pos?   int32\n       \
    \    +--ro contains-child*   -> ../../component/name\n           +--ro hardware-rev?\
    \     string\n           +--ro firmware-rev?     string\n           +--ro software-rev?\
    \     string\n           +--ro serial-num?       string\n           +--ro mfg-name?\
    \         string\n           +--ro model-name?       string\n           +--rw\
    \ alias?            string\n           +--rw asset-id?         string\n      \
    \     +--ro is-fru?           boolean\n           +--ro mfg-date?         yang:date-and-time\n\
    \           +--rw uri*              inet:uri\n           +--ro uuid?         \
    \    yang:uuid\n           +--rw state {hardware-state}?\n           |  +--ro\
    \ state-last-changed?   yang:date-and-time\n           |  +--rw admin-state? \
    \         admin-state\n           |  +--ro oper-state?           oper-state\n\
    \           |  +--ro usage-state?          usage-state\n           |  +--ro alarm-state?\
    \          alarm-state\n           |  +--ro standby-state?        standby-state\n\
    \           +--ro sensor-data {hardware-sensor}?\n              +--ro value? \
    \              sensor-value\n              +--ro value-type?          sensor-value-type\n\
    \              +--ro value-scale?         sensor-value-scale\n              +--ro\
    \ value-precision?     sensor-value-precision\n              +--ro oper-status?\
    \         sensor-status\n              +--ro units-display?       string\n   \
    \           +--ro value-timestamp?     yang:date-and-time\n              +--ro\
    \ value-update-rate?   uint32\n     notifications:\n       +---n hardware-state-change\n\
    \       +---n hardware-state-oper-enabled {hardware-state}?\n       |  +--ro name?\
    \          -> /hardware/component/name\n       |  +--ro admin-state?   -> /hardware/component/state/admin-state\n\
    \       |  +--ro alarm-state?   -> /hardware/component/state/alarm-state\n   \
    \    +---n hardware-state-oper-disabled {hardware-state}?\n          +--ro name?\
    \          -> /hardware/component/name\n          +--ro admin-state?   -> /hardware/component/state/admin-state\n\
    \          +--ro alarm-state?   -> /hardware/component/state/alarm-state\n"
- title: 3.1.  The Components Lists
  contents:
  - "3.1.  The Components Lists\n   The data model for hardware presented in this\
    \ document uses a flat\n   list of components.  Each component in the list is\
    \ identified by its\n   name.  Furthermore, each component has a mandatory \"\
    class\" leaf.\n   The \"iana-hardware\" module defines YANG identities for the\
    \ hardware\n   types in the IANA-maintained \"IANA-ENTITY-MIB\" registry.\n  \
    \ The \"class\" leaf is a YANG identity that describes the type of the\n   hardware.\
    \  Vendors are encouraged to either directly use one of the\n   common IANA-defined\
    \ identities or derive a more specific identity\n   from one of them.\n"
- title: 4.  Relationship to ENTITY-MIB
  contents:
  - "4.  Relationship to ENTITY-MIB\n   If the device implements the ENTITY-MIB [RFC6933],\
    \ each entry in the\n   \"/hardware/component\" list in the operational state\
    \ is mapped to one\n   EntPhysicalEntry.  Objects that are writable in the MIB\
    \ are mapped to\n   \"config true\" nodes in the \"/hardware/component\" list,\
    \ except\n   entPhysicalSerialNum, which is writable in the MIB but \"config false\"\
    \n   in the YANG module.\n   The \"physical-index\" leaf MUST contain the value\
    \ of the corresponding\n   entPhysicalEntry's entPhysicalIndex.\n   The \"class\"\
    \ leaf is mapped to both entPhysicalClass and\n   entPhysicalVendorType.  If the\
    \ value of the \"class\" leaf is an\n   identity that either is derived from or\
    \ is one of the identities in\n   the \"iana-hardware\" module, then entPhysicalClass\
    \ contains the\n   corresponding IANAPhysicalClass enumeration value.  Otherwise,\n\
    \   entPhysicalClass contains the IANAPhysicalClass value \"other(1)\".\n   Vendors\
    \ are encouraged to define an identity (derived from an\n   identity in \"iana-hardware\"\
    \ if possible) for each enterprise-specific\n   registration identifier used for\
    \ entPhysicalVendorType and use that\n   identity for the \"class\" leaf.\n  \
    \ The following table lists the YANG data nodes with corresponding\n   objects\
    \ in the ENTITY-MIB.\n   +--------------------------------+----------------------------------+\n\
    \   | YANG data node in              | ENTITY-MIB object                |\n  \
    \ | /hardware/component            |                                  |\n   +--------------------------------+----------------------------------+\n\
    \   | name                           | entPhysicalName                  |\n  \
    \ | class                          | entPhysicalClass                 |\n   |\
    \                                | entPhysicalVendorType            |\n   | physical-index\
    \                 | entPhysicalIndex                 |\n   | description     \
    \               | entPhysicalDescr                 |\n   | parent            \
    \             | entPhysicalContainedIn           |\n   | parent-rel-pos      \
    \           | entPhysicalParentRelPos          |\n   | contains-child        \
    \         | entPhysicalChildIndex            |\n   | hardware-rev            \
    \       | entPhysicalHardwareRev           |\n   | firmware-rev              \
    \     | entPhysicalFirmwareRev           |\n   | software-rev                \
    \   | entPhysicalSoftwareRev           |\n   | serial-num                    \
    \ | entPhysicalSerialNum             |\n   | mfg-name                       |\
    \ entPhysicalMfgName               |\n   | model-name                     | entPhysicalModelName\
    \             |\n   | alias                          | entPhysicalAlias      \
    \           |\n   | asset-id                       | entPhysicalAssetID      \
    \         |\n   | is-fru                         | entPhysicalIsFRU          \
    \       |\n   | mfg-date                       | entPhysicalMfgDate          \
    \     |\n   | uri                            | entPhysicalUris               \
    \   |\n   | uuid                           | entPhysicalUUID                 \
    \ |\n   +--------------------------------+----------------------------------+\n\
    \              YANG Data Nodes and Related ENTITY-MIB Objects\n"
- title: 5.  Relationship to ENTITY-SENSOR-MIB
  contents:
  - "5.  Relationship to ENTITY-SENSOR-MIB\n   If the device implements the ENTITY-SENSOR-MIB\
    \ [RFC3433], each entry\n   in the \"/hardware/component\" list where the container\
    \ \"sensor-data\"\n   exists is mapped to one EntPhySensorEntry.\n   The following\
    \ table lists the YANG data nodes with corresponding\n   objects in the ENTITY-SENSOR-MIB.\n\
    \   +-------------------------------------+-----------------------------+\n  \
    \ | YANG data node in                   | ENTITY-SENSOR-MIB object    |\n   |\
    \ /hardware/component/sensor-data     |                             |\n   +-------------------------------------+-----------------------------+\n\
    \   | value                               | entPhySensorValue           |\n  \
    \ | value-type                          | entPhySensorType            |\n   |\
    \ value-scale                         | entPhySensorScale           |\n   | value-precision\
    \                     | entPhySensorPrecision       |\n   | oper-status      \
    \                   | entPhySensorOperStatus      |\n   | units-display      \
    \                 | entPhySensorUnitsDisplay    |\n   | value-timestamp      \
    \               | entPhySensorValueTimeStamp  |\n   | value-update-rate      \
    \             | entPhySensorValueUpdateRate |\n   +-------------------------------------+-----------------------------+\n\
    \           YANG Data Nodes and Related ENTITY-SENSOR-MIB Objects\n"
- title: 6.  Relationship to ENTITY-STATE-MIB
  contents:
  - "6.  Relationship to ENTITY-STATE-MIB\n   If the device implements the ENTITY-STATE-MIB\
    \ [RFC4268], each entry\n   in the \"/hardware/component\" list where the container\
    \ \"state\" exists\n   is mapped to one EntStateEntry.\n   The following table\
    \ lists the YANG data nodes with corresponding\n   objects in the ENTITY-STATE-MIB.\n\
    \   +------------------------------------------+------------------------+\n  \
    \ | YANG data node in                        | ENTITY-STATE-MIB       |\n   |\
    \ /hardware/component/state                | object                 |\n   +------------------------------------------+------------------------+\n\
    \   | state-last-changed                       | entStateLastChanged    |\n  \
    \ | admin-state                              | entStateAdmin          |\n   |\
    \ oper-state                               | entStateOper           |\n   | usage-state\
    \                              | entStateUsage          |\n   | alarm-state  \
    \                            | entStateAlarm          |\n   | standby-state  \
    \                          | entStateStandby        |\n   +------------------------------------------+------------------------+\n\
    \           YANG Data Nodes and Related ENTITY-SENSOR-MIB Objects\n"
- title: 7.  Hardware YANG Modules
  contents:
  - '7.  Hardware YANG Modules

    '
- title: 7.1.  "ietf-hardware" Module
  contents:
  - "7.1.  \"ietf-hardware\" Module\n   This YANG module imports typedefs from [RFC6991].\n\
    \   <CODE BEGINS> file \"ietf-hardware@2018-03-13.yang\"\n  module ietf-hardware\
    \ {\n    yang-version 1.1;\n    namespace \"urn:ietf:params:xml:ns:yang:ietf-hardware\"\
    ;\n    prefix hw;\n    import ietf-inet-types {\n      prefix inet;\n    }\n \
    \   import ietf-yang-types {\n      prefix yang;\n    }\n    import iana-hardware\
    \ {\n      prefix ianahw;\n    }\n    organization\n      \"IETF NETMOD (Network\
    \ Modeling) Working Group\";\n    contact\n      \"WG Web:   <https://datatracker.ietf.org/wg/netmod/>\n\
    \       WG List:  <mailto:netmod@ietf.org>\n       Editor:   Andy Bierman\n  \
    \               <mailto:andy@yumaworks.com>\n       Editor:   Martin Bjorklund\n\
    \                 <mailto:mbj@tail-f.com>\n       Editor:   Jie Dong\n       \
    \          <mailto:jie.dong@huawei.com>\n       Editor:   Dan Romascanu\n    \
    \             <mailto:dromasca@gmail.com>\";\n    description\n      \"This module\
    \ contains a collection of YANG definitions for\n       managing hardware.\n \
    \      This data model is designed for the Network Management Datastore\n    \
    \   Architecture (NMDA) defined in RFC 8342.\n       Copyright (c) 2018 IETF Trust\
    \ and the persons identified as\n       authors of the code.  All rights reserved.\n\
    \       Redistribution and use in source and binary forms, with or\n       without\
    \ modification, is permitted pursuant to, and subject\n       to the license terms\
    \ contained in, the Simplified BSD License\n       set forth in Section 4.c of\
    \ the IETF Trust's Legal Provisions\n       Relating to IETF Documents\n     \
    \  (https://trustee.ietf.org/license-info).\n       This version of this YANG\
    \ module is part of RFC 8348; see\n       the RFC itself for full legal notices.\"\
    ;\n    revision 2018-03-13 {\n      description\n        \"Initial revision.\"\
    ;\n      reference\n        \"RFC 8348: A YANG Data Model for Hardware Management\"\
    ;\n    }\n    /*\n     * Features\n     */\n    feature entity-mib {\n      description\n\
    \        \"This feature indicates that the device implements\n         the ENTITY-MIB.\"\
    ;\n      reference\n        \"RFC 6933: Entity MIB (Version 4)\";\n    }\n   \
    \ feature hardware-state {\n      description\n        \"Indicates that ENTITY-STATE-MIB\
    \ objects are supported\";\n      reference\n        \"RFC 4268: Entity State\
    \ MIB\";\n    }\n    feature hardware-sensor {\n      description\n        \"\
    Indicates that ENTITY-SENSOR-MIB objects are supported\";\n      reference\n \
    \       \"RFC 3433: Entity Sensor Management Information Base\";\n    }\n    /*\n\
    \     * Typedefs\n     */\n    typedef admin-state {\n      type enumeration {\n\
    \        enum unknown {\n          value 1;\n          description\n         \
    \   \"The resource is unable to report administrative state.\";\n        }\n \
    \       enum locked {\n          value 2;\n          description\n           \
    \ \"The resource is administratively prohibited from use.\";\n        }\n    \
    \    enum shutting-down {\n          value 3;\n          description\n       \
    \     \"The resource usage is administratively limited to current\n          \
    \   instances of use.\";\n        }\n        enum unlocked {\n          value\
    \ 4;\n          description\n            \"The resource is not administratively\
    \ prohibited from\n             use.\";\n        }\n      }\n      description\n\
    \        \"Represents the various possible administrative states.\";\n      reference\n\
    \        \"RFC 4268: Entity State MIB - EntityAdminState\";\n    }\n    typedef\
    \ oper-state {\n      type enumeration {\n        enum unknown {\n          value\
    \ 1;\n          description\n            \"The resource is unable to report its\
    \ operational state.\";\n        }\n        enum disabled {\n          value 2;\n\
    \          description\n            \"The resource is totally inoperable.\";\n\
    \        }\n        enum enabled {\n          value 3;\n          description\n\
    \            \"The resource is partially or fully operable.\";\n        }\n  \
    \      enum testing {\n          value 4;\n          description\n           \
    \ \"The resource is currently being tested and cannot\n             therefore\
    \ report whether or not it is operational.\";\n        }\n      }\n      description\n\
    \        \"Represents the possible values of operational states.\";\n      reference\n\
    \        \"RFC 4268: Entity State MIB - EntityOperState\";\n    }\n    typedef\
    \ usage-state {\n      type enumeration {\n        enum unknown {\n          value\
    \ 1;\n          description\n            \"The resource is unable to report usage\
    \ state.\";\n        }\n        enum idle {\n          value 2;\n          description\n\
    \            \"The resource is servicing no users.\";\n        }\n        enum\
    \ active {\n          value 3;\n          description\n            \"The resource\
    \ is currently in use, and it has sufficient\n             spare capacity to provide\
    \ for additional users.\";\n        }\n        enum busy {\n          value 4;\n\
    \          description\n            \"The resource is currently in use, but it\
    \ currently has no\n             spare capacity to provide for additional users.\"\
    ;\n        }\n      }\n      description\n        \"Represents the possible values\
    \ of usage states.\";\n      reference\n        \"RFC 4268: Entity State MIB -\
    \  EntityUsageState\";\n    }\n    typedef alarm-state {\n      type bits {\n\
    \        bit unknown {\n          position 0;\n          description\n       \
    \     \"The resource is unable to report alarm state.\";\n        }\n        bit\
    \ under-repair {\n          position 1;\n          description\n            \"\
    The resource is currently being repaired, which, depending\n             on the\
    \ implementation, may make the other values in this\n             bit string not\
    \ meaningful.\";\n        }\n        bit critical {\n          position 2;\n \
    \         description\n            \"One or more critical alarms are active against\
    \ the\n             resource.\";\n        }\n        bit major {\n          position\
    \ 3;\n          description\n            \"One or more major alarms are active\
    \ against the\n             resource.\";\n        }\n        bit minor {\n   \
    \       position 4;\n          description\n            \"One or more minor alarms\
    \ are active against the\n             resource.\";\n        }\n        bit warning\
    \ {\n          position 5;\n          description\n            \"One or more warning\
    \ alarms are active against the\n             resource.\";\n        }\n      \
    \  bit indeterminate {\n          position 6;\n          description\n       \
    \     \"One or more alarms of whose perceived severity cannot be\n           \
    \  determined are active against this resource.\";\n        }\n      }\n     \
    \ description\n        \"Represents the possible values of alarm states.  An alarm\
    \ is a\n         persistent indication of an error or warning condition.\n   \
    \      When no bits of this attribute are set, then no active alarms\n       \
    \  are known against this component and it is not under repair.\";\n      reference\n\
    \        \"RFC 4268: Entity State MIB - EntityAlarmStatus\";\n    }\n    typedef\
    \ standby-state {\n      type enumeration {\n        enum unknown {\n        \
    \  value 1;\n          description\n            \"The resource is unable to report\
    \ standby state.\";\n        }\n        enum hot-standby {\n          value 2;\n\
    \          description\n            \"The resource is not providing service, but\
    \ it will be\n             immediately able to take over the role of the resource\
    \ to\n             be backed up, without the need for initialization\n       \
    \      activity, and will contain the same information as the\n             resource\
    \ to be backed up.\";\n        }\n        enum cold-standby {\n          value\
    \ 3;\n          description\n            \"The resource is to back up another\
    \ resource, but it will\n             not be immediately able to take over the\
    \ role of a\n             resource to be backed up and will require some\n   \
    \          initialization activity.\";\n        }\n        enum providing-service\
    \ {\n          value 4;\n          description\n            \"The resource is\
    \ providing service.\";\n        }\n      }\n      description\n        \"Represents\
    \ the possible values of standby states.\";\n      reference\n        \"RFC 4268:\
    \ Entity State MIB - EntityStandbyStatus\";\n    }\n    typedef sensor-value-type\
    \ {\n      type enumeration {\n        enum other {\n          value 1;\n    \
    \      description\n            \"A measure other than those listed below.\";\n\
    \        }\n        enum unknown {\n          value 2;\n          description\n\
    \            \"An unknown measurement or arbitrary, relative numbers\";\n    \
    \    }\n        enum volts-AC {\n          value 3;\n          description\n \
    \           \"A measure of electric potential (alternating current).\";\n    \
    \    }\n        enum volts-DC {\n          value 4;\n          description\n \
    \           \"A measure of electric potential (direct current).\";\n        }\n\
    \        enum amperes {\n          value 5;\n          description\n         \
    \   \"A measure of electric current.\";\n        }\n        enum watts {\n   \
    \       value 6;\n          description\n            \"A measure of power.\";\n\
    \        }\n        enum hertz {\n          value 7;\n          description\n\
    \            \"A measure of frequency.\";\n        }\n        enum celsius {\n\
    \          value 8;\n          description\n            \"A measure of temperature.\"\
    ;\n        }\n        enum percent-RH {\n          value 9;\n          description\n\
    \            \"A measure of percent relative humidity.\";\n        }\n       \
    \ enum rpm {\n          value 10;\n          description\n            \"A measure\
    \ of shaft revolutions per minute.\";\n        }\n        enum cmm {\n       \
    \   value 11;\n          description\n            \"A measure of cubic meters\
    \ per minute (airflow).\";\n        }\n        enum truth-value {\n          value\
    \ 12;\n          description\n            \"Value is one of 1 (true) or 2 (false)\"\
    ;\n        }\n      }\n      description\n        \"A node using this data type\
    \ represents the sensor measurement\n         data type associated with a physical\
    \ sensor value.  The actual\n         data units are determined by examining a\
    \ node of this type\n         together with the associated sensor-value-scale\
    \ node.\n         A node of this type SHOULD be defined together with nodes of\n\
    \         type sensor-value-scale and type sensor-value-precision.\n         These\
    \ three types are used to identify the semantics of a node\n         of type sensor-value.\"\
    ;\n      reference\n        \"RFC 3433: Entity Sensor Management Information Base\
    \ -\n                   EntitySensorDataType\";\n    }\n    typedef sensor-value-scale\
    \ {\n      type enumeration {\n        enum yocto {\n          value 1;\n    \
    \      description\n            \"Data scaling factor of 10^-24.\";\n        }\n\
    \        enum zepto {\n          value 2;\n          description\n           \
    \ \"Data scaling factor of 10^-21.\";\n        }\n        enum atto {\n      \
    \    value 3;\n          description\n            \"Data scaling factor of 10^-18.\"\
    ;\n        }\n        enum femto {\n          value 4;\n          description\n\
    \            \"Data scaling factor of 10^-15.\";\n        }\n        enum pico\
    \ {\n          value 5;\n          description\n            \"Data scaling factor\
    \ of 10^-12.\";\n        }\n        enum nano {\n          value 6;\n        \
    \  description\n            \"Data scaling factor of 10^-9.\";\n        }\n  \
    \      enum micro {\n          value 7;\n          description\n            \"\
    Data scaling factor of 10^-6.\";\n        }\n        enum milli {\n          value\
    \ 8;\n          description\n            \"Data scaling factor of 10^-3.\";\n\
    \        }\n        enum units {\n          value 9;\n          description\n\
    \            \"Data scaling factor of 10^0.\";\n        }\n        enum kilo {\n\
    \          value 10;\n          description\n            \"Data scaling factor\
    \ of 10^3.\";\n        }\n        enum mega {\n          value 11;\n         \
    \ description\n            \"Data scaling factor of 10^6.\";\n        }\n    \
    \    enum giga {\n          value 12;\n          description\n            \"Data\
    \ scaling factor of 10^9.\";\n        }\n        enum tera {\n          value\
    \ 13;\n          description\n            \"Data scaling factor of 10^12.\";\n\
    \        }\n        enum peta {\n          value 14;\n          description\n\
    \            \"Data scaling factor of 10^15.\";\n        }\n        enum exa {\n\
    \          value 15;\n          description\n            \"Data scaling factor\
    \ of 10^18.\";\n        }\n        enum zetta {\n          value 16;\n       \
    \   description\n            \"Data scaling factor of 10^21.\";\n        }\n \
    \       enum yotta {\n          value 17;\n          description\n           \
    \ \"Data scaling factor of 10^24.\";\n        }\n      }\n      description\n\
    \        \"A node using this data type represents a data scaling factor,\n   \
    \      represented with an International System of Units (SI) prefix.\n      \
    \   The actual data units are determined by examining a node of\n         this\
    \ type together with the associated sensor-value-type.\n         A node of this\
    \ type SHOULD be defined together with nodes of\n         type sensor-value-type\
    \ and type sensor-value-precision.\n         Together, associated nodes of these\
    \ three types are used to\n         identify the semantics of a node of type sensor-value.\"\
    ;\n      reference\n        \"RFC 3433: Entity Sensor Management Information Base\
    \ -\n                   EntitySensorDataScale\";\n    }\n    typedef sensor-value-precision\
    \ {\n      type int8 {\n        range \"-8 .. 9\";\n      }\n      description\n\
    \        \"A node using this data type represents a sensor value\n         precision\
    \ range.\n         A node of this type SHOULD be defined together with nodes of\n\
    \         type sensor-value-type and type sensor-value-scale.  Together,\n   \
    \      associated nodes of these three types are used to identify the\n      \
    \   semantics of a node of type sensor-value.\n         If a node of this type\
    \ contains a value in the range 1 to 9,\n         it represents the number of\
    \ decimal places in the fractional\n         part of an associated sensor-value\
    \ fixed-point number.\n         If a node of this type contains a value in the\
    \ range -8 to -1,\n         it represents the number of accurate digits in the\
    \ associated\n         sensor-value fixed-point number.\n         The value zero\
    \ indicates the associated sensor-value node is\n         not a fixed-point number.\n\
    \         Server implementers must choose a value for the associated\n       \
    \  sensor-value-precision node so that the precision and accuracy\n         of\
    \ the associated sensor-value node is correctly indicated.\n         For example,\
    \ a component representing a temperature sensor\n         that can measure 0 to\
    \ 100 degrees C in 0.1 degree\n         increments, +/- 0.05 degrees, would have\
    \ a\n         sensor-value-precision value of '1', a sensor-value-scale\n    \
    \     value of 'units', and a sensor-value ranging from '0' to\n         '1000'.\
    \  The sensor-value would be interpreted as\n         'degrees C * 10'.\";\n \
    \     reference\n        \"RFC 3433: Entity Sensor Management Information Base\
    \ -\n                   EntitySensorPrecision\";\n    }\n    typedef sensor-value\
    \ {\n      type int32 {\n        range \"-1000000000 .. 1000000000\";\n      }\n\
    \      description\n       \"A node using this data type represents a sensor value.\n\
    \        A node of this type SHOULD be defined together with nodes of\n      \
    \  type sensor-value-type, type sensor-value-scale, and\n        type sensor-value-precision.\
    \  Together, associated nodes of\n        those three types are used to identify\
    \ the semantics of a node\n        of this data type.\n        The semantics of\
    \ a node using this data type are determined by\n        the value of the associated\
    \ sensor-value-type node.\n        If the associated sensor-value-type node is\
    \ equal to 'voltsAC',\n        'voltsDC', 'amperes', 'watts', 'hertz', 'celsius',\
    \ or 'cmm',\n        then a node of this type MUST contain a fixed-point number\n\
    \        ranging from -999,999,999 to +999,999,999.  The value\n        -1000000000\
    \ indicates an underflow error.  The value\n        +1000000000 indicates an overflow\
    \ error.  The\n        sensor-value-precision indicates how many fractional digits\n\
    \        are represented in the associated sensor-value node.\n        If the\
    \ associated sensor-value-type node is equal to\n        'percentRH', then a node\
    \ of this type MUST contain a number\n        ranging from 0 to 100.\n       \
    \ If the associated sensor-value-type node is equal to 'rpm',\n        then a\
    \ node of this type MUST contain a number ranging from\n        -999,999,999 to\
    \ +999,999,999.\n        If the associated sensor-value-type node is equal to\n\
    \        'truth-value', then a node of this type MUST contain either the\n   \
    \     value 1 (true) or the value 2 (false).\n        If the associated sensor-value-type\
    \ node is equal to 'other' or\n        'unknown', then a node of this type MUST\
    \ contain a number\n        ranging from -1000000000 to 1000000000.\";\n     \
    \ reference\n        \"RFC 3433: Entity Sensor Management Information Base -\n\
    \                   EntitySensorValue\";\n    }\n    typedef sensor-status {\n\
    \      type enumeration {\n        enum ok {\n          value 1;\n          description\n\
    \            \"Indicates that the server can obtain the sensor value.\";\n   \
    \     }\n        enum unavailable {\n          value 2;\n          description\n\
    \            \"Indicates that the server presently cannot obtain the\n       \
    \      sensor value.\";\n        }\n        enum nonoperational {\n          value\
    \ 3;\n          description\n            \"Indicates that the server believes\
    \ the sensor is broken.\n             The sensor could have a hard failure (disconnected\
    \ wire)\n             or a soft failure such as out-of-range, jittery, or wildly\n\
    \             fluctuating readings.\";\n        }\n      }\n      description\n\
    \        \"A node using this data type represents the operational status\n   \
    \      of a physical sensor.\";\n      reference\n        \"RFC 3433: Entity Sensor\
    \ Management Information Base -\n                   EntitySensorStatus\";\n  \
    \  }\n    /*\n     * Data nodes\n     */\n    container hardware {\n      description\n\
    \        \"Data nodes representing components.\n         If the server supports\
    \ configuration of hardware components,\n         then this data model is instantiated\
    \ in the configuration\n         datastores supported by the server.  The leaf-list\
    \ 'datastore'\n         for the module 'ietf-hardware' in the YANG library provides\n\
    \         this information.\";\n      leaf last-change {\n        type yang:date-and-time;\n\
    \        config false;\n        description\n          \"The time the '/hardware/component'\
    \ list changed in the\n           operational state.\";\n      }\n      list component\
    \ {\n        key name;\n        description\n          \"List of components.\n\
    \           When the server detects a new hardware component, it\n           initializes\
    \ a list entry in the operational state.\n           If the server does not support\
    \ configuration of hardware\n           components, list entries in the operational\
    \ state are\n           initialized with values for all nodes as detected by the\n\
    \           implementation.\n           Otherwise, this procedure is followed:\n\
    \             1. If there is an entry in the '/hardware/component' list\n    \
    \            in the intended configuration with values for the nodes\n       \
    \         'class', 'parent', and 'parent-rel-pos' that are equal\n           \
    \     to the detected values, then the list entry in the\n                operational\
    \ state is initialized with the configured\n                values, including\
    \ the 'name'.\n             2. Otherwise (i.e., there is no matching configuration\n\
    \                entry), the list entry in the operational state is\n        \
    \        initialized with values for all nodes as detected by\n              \
    \  the implementation.\n           If the '/hardware/component' list in the intended\n\
    \           configuration is modified, then the system MUST behave as if\n   \
    \        it re-initializes itself and follow the procedure in (1).\";\n      \
    \  reference\n          \"RFC 6933: Entity MIB (Version 4) - entPhysicalEntry\"\
    ;\n        leaf name {\n          type string;\n          description\n      \
    \      \"The name assigned to this component.\n             This name is not required\
    \ to be the same as\n             entPhysicalName.\";\n        }\n        leaf\
    \ class {\n          type identityref {\n            base ianahw:hardware-class;\n\
    \          }\n          mandatory true;\n          description\n            \"\
    An indication of the general hardware type of the\n             component.\";\n\
    \          reference\n            \"RFC 6933: Entity MIB (Version 4) - entPhysicalClass\"\
    ;\n        }\n        leaf physical-index {\n          if-feature entity-mib;\n\
    \          type int32 {\n            range \"1..2147483647\";\n          }\n \
    \         config false;\n          description\n            \"The entPhysicalIndex\
    \ for the entPhysicalEntry represented\n             by this list entry.\";\n\
    \          reference\n            \"RFC 6933: Entity MIB (Version 4) - entPhysicalIndex\"\
    ;\n        }\n        leaf description {\n          type string;\n          config\
    \ false;\n          description\n            \"A textual description of the component.\
    \  This node should\n             contain a string that identifies the manufacturer's\
    \ name\n             for the component and should be set to a distinct value\n\
    \             for each version or model of the component.\";\n          reference\n\
    \            \"RFC 6933: Entity MIB (Version 4) - entPhysicalDescr\";\n      \
    \  }\n        leaf parent {\n          type leafref {\n            path \"../../component/name\"\
    ;\n            require-instance false;\n          }\n          description\n \
    \           \"The name of the component that physically contains this\n      \
    \       component.\n             If this leaf is not instantiated, it indicates\
    \ that this\n             component is not contained in any other component.\n\
    \             In the event that a physical component is contained by\n       \
    \      more than one physical component (e.g., double-wide\n             modules),\
    \ this node contains the name of one of these\n             components.  An implementation\
    \ MUST use the same name\n             every time this node is instantiated.\"\
    ;\n          reference\n            \"RFC 6933: Entity MIB (Version 4) - entPhysicalContainedIn\"\
    ;\n        }\n        leaf parent-rel-pos {\n          type int32 {\n        \
    \    range \"0 .. 2147483647\";\n          }\n          description\n        \
    \    \"An indication of the relative position of this child\n             component\
    \ among all its sibling components.  Sibling\n             components are defined\
    \ as components that:\n               o share the same value of the 'parent' node\
    \ and\n               o share a common base identity for the 'class' node.\n \
    \            Note that the last rule gives implementations flexibility\n     \
    \        in how components are numbered.  For example, some\n             implementations\
    \ might have a single number series for all\n             components derived from\
    \ 'ianahw:port', while some others\n             might have different number series\
    \ for different\n             components with identities derived from 'ianahw:port'\
    \ (for\n             example, one for registered jack 45 (RJ45) and one for\n\
    \             small form-factor pluggable (SFP)).\";\n          reference\n  \
    \          \"RFC 6933: Entity MIB (Version 4) -\n                       entPhysicalParentRelPos\"\
    ;\n        }\n        leaf-list contains-child {\n          type leafref {\n \
    \           path \"../../component/name\";\n          }\n          config false;\n\
    \          description\n            \"The name of the contained component.\";\n\
    \          reference\n            \"RFC 6933: Entity MIB (Version 4) - entPhysicalChildIndex\"\
    ;\n        }\n        leaf hardware-rev {\n          type string;\n          config\
    \ false;\n          description\n            \"The vendor-specific hardware revision\
    \ string for the\n             component.  The preferred value is the hardware\
    \ revision\n             identifier actually printed on the component itself (if\n\
    \             present).\";\n          reference\n            \"RFC 6933: Entity\
    \ MIB (Version 4) -\n                       entPhysicalHardwareRev\";\n      \
    \  }\n        leaf firmware-rev {\n          type string;\n          config false;\n\
    \          description\n            \"The vendor-specific firmware revision string\
    \ for the\n             component.\";\n          reference\n            \"RFC\
    \ 6933: Entity MIB (Version 4) -\n                       entPhysicalFirmwareRev\"\
    ;\n        }\n        leaf software-rev {\n          type string;\n          config\
    \ false;\n          description\n            \"The vendor-specific software revision\
    \ string for the\n             component.\";\n          reference\n          \
    \  \"RFC 6933: Entity MIB (Version 4) -\n                       entPhysicalSoftwareRev\"\
    ;\n        }\n        leaf serial-num {\n          type string;\n          config\
    \ false;\n          description\n            \"The vendor-specific serial number\
    \ string for the\n             component.  The preferred value is the serial number\n\
    \             string actually printed on the component itself (if\n          \
    \   present).\";\n          reference\n            \"RFC 6933: Entity MIB (Version\
    \ 4) - entPhysicalSerialNum\";\n        }\n        leaf mfg-name {\n         \
    \ type string;\n          config false;\n          description\n            \"\
    The name of the manufacturer of this physical component.\n             The preferred\
    \ value is the manufacturer name string\n             actually printed on the\
    \ component itself (if present).\n             Note that comparisons between instances\
    \ of the\n             'model-name', 'firmware-rev', 'software-rev', and\n   \
    \          'serial-num' nodes are only meaningful amongst components\n       \
    \      with the same value of 'mfg-name'.\n             If the manufacturer name\
    \ string associated with the\n             physical component is unknown to the\
    \ server, then this\n             node is not instantiated.\";\n          reference\n\
    \            \"RFC 6933: Entity MIB (Version 4) - entPhysicalMfgName\";\n    \
    \    }\n        leaf model-name {\n          type string;\n          config false;\n\
    \          description\n            \"The vendor-specific model name identifier\
    \ string\n             associated with this physical component.  The preferred\n\
    \             value is the customer-visible part number, which may be\n      \
    \       printed on the component itself.\n             If the model name string\
    \ associated with the physical\n             component is unknown to the server,\
    \ then this node is not\n             instantiated.\";\n          reference\n\
    \            \"RFC 6933: Entity MIB (Version 4) - entPhysicalModelName\";\n  \
    \      }\n        leaf alias {\n          type string;\n          description\n\
    \            \"An 'alias' name for the component, as specified by a\n        \
    \     network manager, that provides a non-volatile 'handle' for\n           \
    \  the component.\n             If no configured value exists, the server MAY\
    \ set the\n             value of this node to a locally unique value in the\n\
    \             operational state.\n             A server implementation MAY map\
    \ this leaf to the\n             entPhysicalAlias MIB object.  Such an implementation\
    \ needs\n             to use some mechanism to handle the differences in size\n\
    \             and characters allowed between this leaf and\n             entPhysicalAlias.\
    \  The definition of such a mechanism is\n             outside the scope of this\
    \ document.\";\n          reference\n            \"RFC 6933: Entity MIB (Version\
    \ 4) - entPhysicalAlias\";\n        }\n        leaf asset-id {\n          type\
    \ string;\n          description\n            \"This node is a user-assigned asset\
    \ tracking identifier for\n             the component.\n             A server\
    \ implementation MAY map this leaf to the\n             entPhysicalAssetID MIB\
    \ object.  Such an implementation\n             needs to use some mechanism to\
    \ handle the differences in\n             size and characters allowed between\
    \ this leaf and\n             entPhysicalAssetID.  The definition of such a mechanism\
    \ is\n             outside the scope of this document.\";\n          reference\n\
    \            \"RFC 6933: Entity MIB (Version 4) - entPhysicalAssetID\";\n    \
    \    }\n        leaf is-fru {\n          type boolean;\n          config false;\n\
    \          description\n            \"This node indicates whether or not this\
    \ component is\n             considered a 'field-replaceable unit' by the vendor.\
    \  If\n             this node contains the value 'true', then this component\n\
    \             identifies a field-replaceable unit.  For all components\n     \
    \        that are permanently contained within a field-replaceable\n         \
    \    unit, the value 'false' should be returned for this\n             node.\"\
    ;\n          reference\n            \"RFC 6933: Entity MIB (Version 4) - entPhysicalIsFRU\"\
    ;\n        }\n        leaf mfg-date {\n          type yang:date-and-time;\n  \
    \        config false;\n          description\n            \"The date of manufacturing\
    \ of the managed component.\";\n          reference\n            \"RFC 6933: Entity\
    \ MIB (Version 4) - entPhysicalMfgDate\";\n        }\n        leaf-list uri {\n\
    \          type inet:uri;\n          description\n            \"This node contains\
    \ identification information about the\n             component.\";\n         \
    \ reference\n            \"RFC 6933: Entity MIB (Version 4) - entPhysicalUris\"\
    ;\n        }\n        leaf uuid {\n          type yang:uuid;\n          config\
    \ false;\n          description\n            \"A Universally Unique Identifier\
    \ of the component.\";\n          reference\n            \"RFC 6933: Entity MIB\
    \ (Version 4) - entPhysicalUUID\";\n        }\n        container state {\n   \
    \       if-feature hardware-state;\n          description\n            \"State-related\
    \ nodes\";\n          reference\n            \"RFC 4268: Entity State MIB\";\n\
    \          leaf state-last-changed {\n            type yang:date-and-time;\n \
    \           config false;\n            description\n              \"The date and\
    \ time when the value of any of the\n               admin-state, oper-state, usage-state,\
    \ alarm-state, or\n               standby-state changed for this component.\n\
    \               If there has been no change since the last\n               re-initialization\
    \ of the local system, this node\n               contains the date and time of\
    \ local system\n               initialization.  If there has been no change since\
    \ the\n               component was added to the local system, this node\n   \
    \            contains the date and time of the insertion.\";\n            reference\n\
    \              \"RFC 4268: Entity State MIB - entStateLastChanged\";\n       \
    \   }\n          leaf admin-state {\n            type admin-state;\n         \
    \   description\n              \"The administrative state for this component.\n\
    \               This node refers to a component's administrative\n           \
    \    permission to service both other components within its\n               containment\
    \ hierarchy as well other users of its\n               services defined by means\
    \ outside the scope of this\n               module.\n               Some components\
    \ exhibit only a subset of the remaining\n               administrative state\
    \ values.  Some components cannot be\n               locked; hence, this node\
    \ exhibits only the 'unlocked'\n               state.  Other components cannot\
    \ be shut down gracefully;\n               hence, this node does not exhibit the\
    \ 'shutting-down'\n               state.\";\n            reference\n         \
    \     \"RFC 4268: Entity State MIB - entStateAdmin\";\n          }\n         \
    \ leaf oper-state {\n            type oper-state;\n            config false;\n\
    \            description\n              \"The operational state for this component.\n\
    \               Note that this node does not follow the administrative\n     \
    \          state.  An administrative state of 'down' does not\n              \
    \ predict an operational state of 'disabled'.\n               Note that some implementations\
    \ may not be able to\n               accurately report oper-state while the admin-state\
    \ node\n               has a value other than 'unlocked'.  In these cases, this\n\
    \               node MUST have a value of 'unknown'.\";\n            reference\n\
    \              \"RFC 4268: Entity State MIB - entStateOper\";\n          }\n \
    \         leaf usage-state {\n            type usage-state;\n            config\
    \ false;\n            description\n              \"The usage state for this component.\n\
    \               This node refers to a component's ability to service\n       \
    \        more components in a containment hierarchy.\n               Some components\
    \ will exhibit only a subset of the usage\n               state values.  Components\
    \ that are unable to ever\n               service any components within a containment\
    \ hierarchy\n               will always have a usage state of 'busy'.  In some\n\
    \               cases, a component will be able to support only one\n        \
    \       other component within its containment hierarchy and\n               will\
    \ therefore only exhibit values of 'idle' and\n               'busy'.\";\n   \
    \         reference\n              \"RFC 4268: Entity State MIB - entStateUsage\"\
    ;\n          }\n          leaf alarm-state {\n            type alarm-state;\n\
    \            config false;\n            description\n              \"The alarm\
    \ state for this component.  It does not\n               include the alarms raised\
    \ on child components within its\n               containment hierarchy.\";\n \
    \           reference\n              \"RFC 4268: Entity State MIB - entStateAlarm\"\
    ;\n          }\n          leaf standby-state {\n            type standby-state;\n\
    \            config false;\n            description\n              \"The standby\
    \ state for this component.\n               Some components will exhibit only\
    \ a subset of the\n               remaining standby state values.  If this component\n\
    \               cannot operate in a standby role, the value of this node\n   \
    \            will always be 'providing-service'.\";\n            reference\n \
    \             \"RFC 4268: Entity State MIB - entStateStandby\";\n          }\n\
    \        }\n        container sensor-data {\n          when 'derived-from-or-self(../class,\n\
    \                                     \"ianahw:sensor\")' {\n            description\n\
    \              \"Sensor data nodes present for any component of type\n       \
    \        'sensor'\";\n          }\n          if-feature hardware-sensor;\n   \
    \       config false;\n          description\n            \"Sensor-related nodes.\"\
    ;\n          reference\n            \"RFC 3433: Entity Sensor Management Information\
    \ Base\";\n          leaf value {\n            type sensor-value;\n          \
    \  description\n              \"The most recent measurement obtained by the server\n\
    \               for this sensor.\n               A client that periodically fetches\
    \ this node should also\n               fetch the nodes 'value-type', 'value-scale',\
    \ and\n               'value-precision', since they may change when the value\n\
    \               is changed.\";\n            reference\n              \"RFC 3433:\
    \ Entity Sensor Management Information Base -\n                         entPhySensorValue\"\
    ;\n          }\n          leaf value-type {\n            type sensor-value-type;\n\
    \            description\n              \"The type of data units associated with\
    \ the\n               sensor value\";\n            reference\n              \"\
    RFC 3433: Entity Sensor Management Information Base -\n                      \
    \   entPhySensorType\";\n          }\n          leaf value-scale {\n         \
    \   type sensor-value-scale;\n            description\n              \"The (power\
    \ of 10) scaling factor associated\n               with the sensor value\";\n\
    \            reference\n              \"RFC 3433: Entity Sensor Management Information\
    \ Base -\n                         entPhySensorScale\";\n          }\n       \
    \   leaf value-precision {\n            type sensor-value-precision;\n       \
    \     description\n              \"The number of decimal places of precision\n\
    \               associated with the sensor value\";\n            reference\n \
    \             \"RFC 3433: Entity Sensor Management Information Base -\n      \
    \                   entPhySensorPrecision\";\n          }\n          leaf oper-status\
    \ {\n            type sensor-status;\n            description\n              \"\
    The operational status of the sensor.\";\n            reference\n            \
    \  \"RFC 3433: Entity Sensor Management Information Base -\n                 \
    \        entPhySensorOperStatus\";\n          }\n          leaf units-display\
    \ {\n            type string;\n            description\n              \"A textual\
    \ description of the data units that should be\n               used in the display\
    \ of the sensor value.\";\n            reference\n              \"RFC 3433: Entity\
    \ Sensor Management Information Base -\n                         entPhySensorUnitsDisplay\"\
    ;\n          }\n          leaf value-timestamp {\n            type yang:date-and-time;\n\
    \            description\n              \"The time the status and/or value of\
    \ this sensor was last\n               obtained by the server.\";\n          \
    \  reference\n              \"RFC 3433: Entity Sensor Management Information Base\
    \ -\n                         entPhySensorValueTimeStamp\";\n          }\n   \
    \       leaf value-update-rate {\n            type uint32;\n            units\
    \ \"milliseconds\";\n            description\n              \"An indication of\
    \ the frequency that the server updates\n               the associated 'value'\
    \ node, represented in\n               milliseconds.  The value zero indicates:\n\
    \                - the sensor value is updated on demand (e.g.,\n            \
    \      when polled by the server for a get-request),\n                - the sensor\
    \ value is updated when the sensor\n                  value changes (event-driven),\
    \ or\n                - the server does not know the update rate.\";\n       \
    \     reference\n              \"RFC 3433: Entity Sensor Management Information\
    \ Base -\n                         entPhySensorValueUpdateRate\";\n          }\n\
    \        }\n      }\n    }\n    /*\n     * Notifications\n     */\n    notification\
    \ hardware-state-change {\n      description\n        \"A hardware-state-change\
    \ notification is generated when the\n         value of /hardware/last-change\
    \ changes in the operational\n         state.\";\n      reference\n        \"\
    RFC 6933: Entity MIB (Version 4) - entConfigChange\";\n    }\n    notification\
    \ hardware-state-oper-enabled {\n      if-feature hardware-state;\n      description\n\
    \        \"A hardware-state-oper-enabled notification signifies that a\n     \
    \    component has transitioned into the 'enabled' state.\";\n      leaf name\
    \ {\n        type leafref {\n          path \"/hardware/component/name\";\n  \
    \      }\n        description\n          \"The name of the component that has\
    \ transitioned into the\n           'enabled' state.\";\n      }\n      leaf admin-state\
    \ {\n        type leafref {\n          path \"/hardware/component/state/admin-state\"\
    ;\n        }\n        description\n          \"The administrative state for the\
    \ component.\";\n      }\n      leaf alarm-state {\n        type leafref {\n \
    \         path \"/hardware/component/state/alarm-state\";\n        }\n       \
    \ description\n          \"The alarm state for the component.\";\n      }\n  \
    \    reference\n        \"RFC 4268: Entity State MIB - entStateOperEnabled\";\n\
    \    }\n    notification hardware-state-oper-disabled {\n      if-feature hardware-state;\n\
    \      description\n        \"A hardware-state-oper-disabled notification signifies\
    \ that a\n         component has transitioned into the 'disabled' state.\";\n\
    \      leaf name {\n        type leafref {\n          path \"/hardware/component/name\"\
    ;\n        }\n        description\n          \"The name of the component that\
    \ has transitioned into the\n           'disabled' state.\";\n      }\n      leaf\
    \ admin-state {\n        type leafref {\n          path \"/hardware/component/state/admin-state\"\
    ;\n        }\n        description\n          \"The administrative state for the\
    \ component.\";\n      }\n      leaf alarm-state {\n        type leafref {\n \
    \         path \"/hardware/component/state/alarm-state\";\n        }\n       \
    \ description\n          \"The alarm state for the component.\";\n      }\n  \
    \    reference\n        \"RFC 4268: Entity State MIB - entStateOperDisabled\"\
    ;\n    }\n  }\n   <CODE ENDS>\n"
- title: 7.2.  "iana-hardware" Module
  contents:
  - "7.2.  \"iana-hardware\" Module\n   <CODE BEGINS> file \"iana-hardware@2018-03-13.yang\"\
    \n   module iana-hardware {\n     yang-version 1.1;\n     namespace \"urn:ietf:params:xml:ns:yang:iana-hardware\"\
    ;\n     prefix ianahw;\n     organization \"IANA\";\n     contact\n       \" \
    \       Internet Assigned Numbers Authority\n        Postal: ICANN\n         \
    \       12025 Waterfront Drive, Suite 300\n                Los Angeles, CA  90094-2536\n\
    \                United States of America\n        Tel:    +1 310 301 5800\n \
    \       E-Mail: iana@iana.org>\";\n     description\n       \"IANA-defined identities\
    \ for hardware class.\n        The latest revision of this YANG module can be\
    \ obtained from\n        the IANA website.\n        Requests for new values should\
    \ be made to IANA via\n        email (iana@iana.org).\n        Copyright (c) 2018\
    \ IETF Trust and the persons identified as\n        authors of the code.  All\
    \ rights reserved.\n        Redistribution and use in source and binary forms,\
    \ with or\n        without modification, is permitted pursuant to, and subject\n\
    \        to the license terms contained in, the Simplified BSD License\n     \
    \   set forth in Section 4.c of the IETF Trust's Legal Provisions\n        Relating\
    \ to IETF Documents\n        (https://trustee.ietf.org/license-info).\n      \
    \  The initial version of this YANG module is part of RFC 8348;\n        see the\
    \ RFC itself for full legal notices.\";\n     reference\n       \"https://www.iana.org/assignments/yang-parameters\"\
    ;\n     revision 2018-03-13 {\n       description\n         \"Initial revision.\"\
    ;\n       reference\n         \"RFC 8348: A YANG Data Model for Hardware Management\"\
    ;\n     }\n     /*\n      * Identities\n      */\n     identity hardware-class\
    \ {\n       description\n         \"This identity is the base for all hardware\
    \ class\n          identifiers.\";\n     }\n     identity unknown {\n       base\
    \ ianahw:hardware-class;\n       description\n         \"This identity is applicable\
    \ if the hardware class is unknown\n          to the server.\";\n     }\n    \
    \ identity chassis {\n       base ianahw:hardware-class;\n       description\n\
    \         \"This identity is applicable if the hardware class is an\n        \
    \  overall container for networking equipment.  Any class of\n          physical\
    \ component, except a stack, may be contained within a\n          chassis; a chassis\
    \ may only be contained within a stack.\";\n     }\n     identity backplane {\n\
    \       base ianahw:hardware-class;\n       description\n         \"This identity\
    \ is applicable if the hardware class is some sort\n          of device for aggregating\
    \ and forwarding networking traffic,\n          such as a shared backplane in\
    \ a modular ethernet switch.  Note\n          that an implementation may model\
    \ a backplane as a single\n          physical component, which is actually implemented\
    \ as multiple\n          discrete physical components (within a chassis or stack).\"\
    ;\n     }\n     identity container {\n       base ianahw:hardware-class;\n   \
    \    description\n         \"This identity is applicable if the hardware class\
    \ is capable\n          of containing one or more removable physical entities,\n\
    \          possibly of different types.  For example, each (empty or\n       \
    \   full) slot in a chassis will be modeled as a container.  Note\n          that\
    \ all removable physical components should be modeled\n          within a container\
    \ component, such as field-replaceable\n          modules, fans, or power supplies.\
    \  Note that all known\n          containers should be modeled by the agent, including\
    \ empty\n          containers.\";\n     }\n     identity power-supply {\n    \
    \   base ianahw:hardware-class;\n       description\n         \"This identity\
    \ is applicable if the hardware class is a\n          power-supplying component.\"\
    ;\n     }\n     identity fan {\n       base ianahw:hardware-class;\n       description\n\
    \         \"This identity is applicable if the hardware class is a fan or\n  \
    \        other heat-reduction component.\";\n     }\n     identity sensor {\n\
    \       base ianahw:hardware-class;\n       description\n         \"This identity\
    \ is applicable if the hardware class is some sort\n          of sensor, such\
    \ as a temperature sensor within a router\n          chassis.\";\n     }\n   \
    \  identity module {\n       base ianahw:hardware-class;\n       description\n\
    \         \"This identity is applicable if the hardware class is some sort\n \
    \         of self-contained sub-system.  If a module component is\n          removable,\
    \ then it should be modeled within a container\n          component; otherwise,\
    \ it should be modeled directly within\n          another physical component (e.g.,\
    \ a chassis or another\n          module).\";\n     }\n     identity port {\n\
    \       base ianahw:hardware-class;\n       description\n         \"This identity\
    \ is applicable if the hardware class is some sort\n          of networking port\
    \ capable of receiving and/or transmitting\n          networking traffic.\";\n\
    \     }\n     identity stack {\n       base ianahw:hardware-class;\n       description\n\
    \         \"This identity is applicable if the hardware class is some sort\n \
    \         of super-container (possibly virtual) intended to group\n          together\
    \ multiple chassis entities.  A stack may be realized\n          by a virtual\
    \ cable, a real interconnect cable attached to\n          multiple chassis, or\
    \ multiple interconnect cables.  A stack\n          should not be modeled within\
    \ any other physical components,\n          but a stack may be contained within\
    \ another stack.  Only\n          chassis components should be contained within\
    \ a stack.\";\n     }\n     identity cpu {\n       base ianahw:hardware-class;\n\
    \       description\n         \"This identity is applicable if the hardware class\
    \ is some sort\n          of central processing unit.\";\n     }\n     identity\
    \ energy-object {\n       base ianahw:hardware-class;\n       description\n  \
    \       \"This identity is applicable if the hardware class is some sort\n   \
    \       of energy object, i.e., it is a piece of equipment that is\n         \
    \ part of or attached to a communications network that is\n          monitored,\
    \ it is controlled, or it aids in the management of\n          another device\
    \ for Energy Management.\";\n     }\n     identity battery {\n       base ianahw:hardware-class;\n\
    \       description\n         \"This identity is applicable if the hardware class\
    \ is some sort\n          of battery.\";\n     }\n     identity storage-drive\
    \ {\n       base ianahw:hardware-class;\n       description\n         \"This identity\
    \ is applicable if the hardware class is some sort\n          of component with\
    \ data storage capability as its main\n          functionality, e.g., hard disk\
    \ drive (HDD), solid-state device\n          (SSD), solid-state hybrid drive (SSHD),\
    \ object storage device\n          (OSD), or other.\";\n     }\n   }\n   <CODE\
    \ ENDS>\n"
- title: 8.  IANA Considerations
  contents:
  - "8.  IANA Considerations\n   This document defines the initial version of the\
    \ IANA-maintained\n   \"iana-hardware\" YANG module.\n   The \"iana-hardware\"\
    \ YANG module is intended to reflect the\n   \"IANA-ENTITY-MIB\" MIB module so\
    \ that if a new enumeration is added to\n   the \"IANAPhysicalClass\" textual\
    \ convention, the same class is added\n   as an identity derived from \"ianahw:hardware-class\"\
    .\n   When the \"iana-hardware\" YANG module is updated, a new \"revision\"\n\
    \   statement must be added in front of the existing revision statements.\n"
- title: 8.1.  URI Registrations
  contents:
  - "8.1.  URI Registrations\n   This document registers three URIs in the \"IETF\
    \ XML Registry\"\n   [RFC3688].  Per the format in RFC 3688, the following registrations\n\
    \   have been made.\n     URI: urn:ietf:params:xml:ns:yang:iana-hardware\n   \
    \  Registrant Contact: The IESG.\n     XML: N/A, the requested URI is an XML namespace.\n\
    \     URI: urn:ietf:params:xml:ns:yang:ietf-hardware\n     Registrant Contact:\
    \ The IESG.\n     XML: N/A, the requested URI is an XML namespace.\n     URI:\
    \ urn:ietf:params:xml:ns:yang:ietf-hardware-state\n     Registrant Contact: The\
    \ IESG.\n     XML: N/A, the requested URI is an XML namespace.\n"
- title: 8.2.  YANG Module Registrations
  contents:
  - "8.2.  YANG Module Registrations\n   This document registers three YANG modules\
    \ in the \"YANG Module Names\"\n   registry [RFC6020].\n     name:         iana-hardware\n\
    \     namespace:    urn:ietf:params:xml:ns:yang:iana-hardware\n     prefix:  \
    \     ianahw\n     reference:    RFC 8348\n     name:         ietf-hardware\n\
    \     namespace:    urn:ietf:params:xml:ns:yang:ietf-hardware\n     prefix:  \
    \     hw\n     reference:    RFC 8348\n     name:         ietf-hardware-state\n\
    \     namespace:    urn:ietf:params:xml:ns:yang:ietf-hardware-state\n     prefix:\
    \       hw-state\n     reference:    RFC 8348\n"
- title: 9.  Security Considerations
  contents:
  - "9.  Security Considerations\n   The YANG modules specified in this document define\
    \ a schema for data\n   that is designed to be accessed via network management\
    \ protocols such\n   as NETCONF [RFC6241] or RESTCONF [RFC8040].  The lowest NETCONF\
    \ layer\n   is the secure transport layer, and the mandatory-to-implement secure\n\
    \   transport is Secure Shell (SSH) [RFC6242].  The lowest RESTCONF layer\n  \
    \ is HTTPS, and the mandatory-to-implement secure transport is TLS\n   [RFC5246].\n\
    \   The NETCONF access control model [RFC8341] provides the means to\n   restrict\
    \ access for particular NETCONF or RESTCONF users to a\n   preconfigured subset\
    \ of all available NETCONF or RESTCONF protocol\n   operations and content.\n\
    \   There are a number of data nodes defined in the YANG module\n   \"ietf-hardware\"\
    \ that are writable/creatable/deletable (i.e., config\n   true, which is the default).\
    \  These data nodes may be considered\n   sensitive or vulnerable in some network\
    \ environments.  Write\n   operations (e.g., edit-config) to these data nodes\
    \ without proper\n   protection can have a negative effect on network operations.\
    \  These\n   are the subtrees and data nodes and their sensitivity/vulnerability:\n\
    \   /hardware/component/admin-state:  Setting this node to 'locked' or\n     \
    \ 'shutting-down' can cause disruption of services ranging from\n      those running\
    \ on a port to those on an entire device, depending on\n      the type of component.\n\
    \   Some of the readable data nodes in these YANG modules may be\n   considered\
    \ sensitive or vulnerable in some network environments.  It\n   is thus important\
    \ to control read access (e.g., via get, get-config,\n   or notification) to these\
    \ data nodes.  These are the subtrees and\n   data nodes and their sensitivity/vulnerability:\n\
    \   /hardware/component:  The leafs in this list expose information about\n  \
    \    the physical components in a device, which may be used to identify\n    \
    \  the vendor, model, version, and specific device-identification\n      information\
    \ of each system component.\n   /hardware/component/sensor-data/value:  This node\
    \ may expose the\n      values of particular physical sensors in a device.\n \
    \  /hardware/component/state:  Access to this node allows one to figure\n    \
    \  out what the active and standby resources in a device are.\n"
- title: 10.  References
  contents:
  - '10.  References

    '
- title: 10.1.  Normative References
  contents:
  - "10.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n  \
    \            DOI 10.17487/RFC2119, March 1997,\n              <https://www.rfc-editor.org/info/rfc2119>.\n\
    \   [RFC3433]  Bierman, A., Romascanu, D., and K. Norseth, \"Entity Sensor\n \
    \             Management Information Base\", RFC 3433,\n              DOI 10.17487/RFC3433,\
    \ December 2002,\n              <https://www.rfc-editor.org/info/rfc3433>.\n \
    \  [RFC3688]  Mealling, M., \"The IETF XML Registry\", BCP 81, RFC 3688,\n   \
    \           DOI 10.17487/RFC3688, January 2004,\n              <https://www.rfc-editor.org/info/rfc3688>.\n\
    \   [RFC4268]  Chisholm, S. and D. Perkins, \"Entity State MIB\", RFC 4268,\n\
    \              DOI 10.17487/RFC4268, November 2005,\n              <https://www.rfc-editor.org/info/rfc4268>.\n\
    \   [RFC5246]  Dierks, T. and E. Rescorla, \"The Transport Layer Security\n  \
    \            (TLS) Protocol Version 1.2\", RFC 5246,\n              DOI 10.17487/RFC5246,\
    \ August 2008,\n              <https://www.rfc-editor.org/info/rfc5246>.\n   [RFC6020]\
    \  Bjorklund, M., Ed., \"YANG - A Data Modeling Language for\n              the\
    \ Network Configuration Protocol (NETCONF)\", RFC 6020,\n              DOI 10.17487/RFC6020,\
    \ October 2010,\n              <https://www.rfc-editor.org/info/rfc6020>.\n  \
    \ [RFC6241]  Enns, R., Ed., Bjorklund, M., Ed., Schoenwaelder, J., Ed.,\n    \
    \          and A. Bierman, Ed., \"Network Configuration Protocol\n           \
    \   (NETCONF)\", RFC 6241, DOI 10.17487/RFC6241, June 2011,\n              <https://www.rfc-editor.org/info/rfc6241>.\n\
    \   [RFC6242]  Wasserman, M., \"Using the NETCONF Protocol over Secure\n     \
    \         Shell (SSH)\", RFC 6242, DOI 10.17487/RFC6242, June 2011,\n        \
    \      <https://www.rfc-editor.org/info/rfc6242>.\n   [RFC6933]  Bierman, A.,\
    \ Romascanu, D., Quittek, J., and M.\n              Chandramouli, \"Entity MIB\
    \ (Version 4)\", RFC 6933,\n              DOI 10.17487/RFC6933, May 2013,\n  \
    \            <https://www.rfc-editor.org/info/rfc6933>.\n   [RFC6991]  Schoenwaelder,\
    \ J., Ed., \"Common YANG Data Types\",\n              RFC 6991, DOI 10.17487/RFC6991,\
    \ July 2013,\n              <https://www.rfc-editor.org/info/rfc6991>.\n   [RFC7950]\
    \  Bjorklund, M., Ed., \"The YANG 1.1 Data Modeling Language\",\n            \
    \  RFC 7950, DOI 10.17487/RFC7950, August 2016,\n              <https://www.rfc-editor.org/info/rfc7950>.\n\
    \   [RFC8040]  Bierman, A., Bjorklund, M., and K. Watsen, \"RESTCONF\n       \
    \       Protocol\", RFC 8040, DOI 10.17487/RFC8040, January 2017,\n          \
    \    <https://www.rfc-editor.org/info/rfc8040>.\n   [RFC8174]  Leiba, B., \"Ambiguity\
    \ of Uppercase vs Lowercase in RFC\n              2119 Key Words\", BCP 14, RFC\
    \ 8174, DOI 10.17487/RFC8174,\n              May 2017, <https://www.rfc-editor.org/info/rfc8174>.\n\
    \   [RFC8341]  Bierman, A. and M. Bjorklund, \"Network Configuration\n       \
    \       Access Control Model\", STD 91, RFC 8341,\n              DOI 10.17487/RFC8341,\
    \ March 2018,\n              <https://www.rfc-editor.org/info/rfc8341>.\n   [RFC8342]\
    \  Bjorklund, M., Schoenwaelder, J., Shafer, P., Watsen, K.,\n              and\
    \ R. Wilton, \"Network Management Datastore Architecture\n              (NMDA)\"\
    , RFC 8342, DOI 10.17487/RFC8342, March 2018,\n              <https://www.rfc-editor.org/info/rfc8342>.\n"
- title: 10.2.  Informative References
  contents:
  - "10.2.  Informative References\n   [RFC8340]  Bjorklund, M. and L. Berger, Ed.,\
    \ \"YANG Tree Diagrams\",\n              BCP 215, RFC 8340, DOI 10.17487/RFC8340,\
    \ March 2018,\n              <https://www.rfc-editor.org/info/rfc8340>.\n"
- title: Appendix A.  Hardware State Data Model
  contents:
  - "Appendix A.  Hardware State Data Model\n   This non-normative appendix contains\
    \ a data model designed as a\n   temporary solution for implementations that do\
    \ not yet support the\n   Network Management Datastore Architecture (NMDA) defined\
    \ in\n   [RFC8342].  It has the following structure:\n   module: ietf-hardware-state\n\
    \     x--ro hardware\n        x--ro last-change?   yang:date-and-time\n      \
    \  x--ro component* [name]\n           x--ro name              string\n      \
    \     x--ro class             identityref\n           x--ro physical-index?  \
    \ int32 {entity-mib}?\n           x--ro description?      string\n           x--ro\
    \ parent?           -> ../../component/name\n           x--ro parent-rel-pos?\
    \   int32\n           x--ro contains-child*   -> ../../component/name\n      \
    \     x--ro hardware-rev?     string\n           x--ro firmware-rev?     string\n\
    \           x--ro software-rev?     string\n           x--ro serial-num?     \
    \  string\n           x--ro mfg-name?         string\n           x--ro model-name?\
    \       string\n           x--ro alias?            string\n           x--ro asset-id?\
    \         string\n           x--ro is-fru?           boolean\n           x--ro\
    \ mfg-date?         yang:date-and-time\n           x--ro uri*              inet:uri\n\
    \           x--ro uuid?             yang:uuid\n           x--ro state {hardware-state}?\n\
    \           |  x--ro state-last-changed?   yang:date-and-time\n           |  x--ro\
    \ admin-state?          hw:admin-state\n           |  x--ro oper-state?      \
    \     hw:oper-state\n           |  x--ro usage-state?          hw:usage-state\n\
    \           |  x--ro alarm-state?          hw:alarm-state\n           |  x--ro\
    \ standby-state?        hw:standby-state\n           x--ro sensor-data {hardware-sensor}?\n\
    \              x--ro value?               hw:sensor-value\n              x--ro\
    \ value-type?          hw:sensor-value-type\n              x--ro value-scale?\
    \         hw:sensor-value-scale\n              x--ro value-precision?     hw:sensor-value-precision\n\
    \              x--ro oper-status?         hw:sensor-status\n              x--ro\
    \ units-display?       string\n              x--ro value-timestamp?     yang:date-and-time\n\
    \              x--ro value-update-rate?   uint32\n     notifications:\n      \
    \ x---n hardware-state-change\n       x---n hardware-state-oper-enabled {hardware-state}?\n\
    \       |  x--ro name?          -> /hardware/component/name\n       |  x--ro admin-state?\
    \   -> /hardware/component/state/admin-state\n       |  x--ro alarm-state?   ->\
    \ /hardware/component/state/alarm-state\n       x---n hardware-state-oper-disabled\
    \ {hardware-state}?\n          x--ro name?          -> /hardware/component/name\n\
    \          x--ro admin-state?   -> /hardware/component/state/admin-state\n   \
    \       x--ro alarm-state?   -> /hardware/component/state/alarm-state\n"
- title: A.1.  Hardware State YANG Module
  contents:
  - "A.1.  Hardware State YANG Module\n   <CODE BEGINS> file \"ietf-hardware-state@2018-03-13.yang\"\
    \n   module ietf-hardware-state {\n     yang-version 1.1;\n     namespace \"urn:ietf:params:xml:ns:yang:ietf-hardware-state\"\
    ;\n     prefix hw-state;\n     import ietf-inet-types {\n       prefix inet;\n\
    \     }\n     import ietf-yang-types {\n       prefix yang;\n     }\n     import\
    \ iana-hardware {\n       prefix ianahw;\n     }\n     import ietf-hardware {\n\
    \       prefix hw;\n     }\n     organization\n       \"IETF NETMOD (Network Modeling)\
    \ Working Group\";\n     contact\n       \"WG Web:   <https://datatracker.ietf.org/wg/netmod/>\n\
    \        WG List:  <mailto:netmod@ietf.org>\n        Editor:   Andy Bierman\n\
    \                  <mailto:andy@yumaworks.com>\n        Editor:   Martin Bjorklund\n\
    \                  <mailto:mbj@tail-f.com>\n        Editor:   Jie Dong\n     \
    \             <mailto:jie.dong@huawei.com>\n        Editor:   Dan Romascanu\n\
    \                  <mailto:dromasca@gmail.com>\";\n     description\n       \"\
    This module contains a collection of YANG definitions for\n        monitoring\
    \ hardware.\n        This data model is designed as a temporary solution for\n\
    \        implementations that do not yet support the Network Management\n    \
    \    Datastore Architecture (NMDA) defined in RFC 8342.  Such an\n        implementation\
    \ cannot implement the module 'ietf-hardware'\n        properly, since without\
    \ NMDA support, it is not possible to\n        distinguish between instances of\
    \ nodes in the running\n        configuration and operational states.\n      \
    \  The data model in this module is the same as the data model in\n        'ietf-hardware',\
    \ except all nodes are marked as 'config false'.\n        If a server that implements\
    \ this module but doesn't support NMDA\n        also supports configuration of\
    \ hardware components, it SHOULD\n        also implement the module 'ietf-hardware'\
    \ in the configuration\n        datastores.  The corresponding state data is found\
    \ in the\n        '/hw-state:hardware' subtree.\n        Copyright (c) 2018 IETF\
    \ Trust and the persons identified as\n        authors of the code.  All rights\
    \ reserved.\n        Redistribution and use in source and binary forms, with or\n\
    \        without modification, is permitted pursuant to, and subject\n       \
    \ to the license terms contained in, the Simplified BSD License\n        set forth\
    \ in Section 4.c of the IETF Trust's Legal Provisions\n        Relating to IETF\
    \ Documents\n        (https://trustee.ietf.org/license-info).\n        This version\
    \ of this YANG module is part of RFC 8348; see\n        the RFC itself for full\
    \ legal notices.\";\n     revision 2018-03-13 {\n       description\n        \
    \ \"Initial revision.\";\n       reference\n         \"RFC 8348: A YANG Data Model\
    \ for Hardware Management\";\n     }\n     /*\n      * Features\n      */\n  \
    \   feature entity-mib {\n       status deprecated;\n       description\n    \
    \     \"This feature indicates that the device implements\n          the ENTITY-MIB.\"\
    ;\n       reference\n         \"RFC 6933: Entity MIB (Version 4)\";\n     }\n\
    \     feature hardware-state {\n       status deprecated;\n       description\n\
    \         \"Indicates that ENTITY-STATE-MIB objects are supported\";\n       reference\n\
    \         \"RFC 4268: Entity State MIB\";\n     }\n     feature hardware-sensor\
    \ {\n       status deprecated;\n       description\n         \"Indicates that\
    \ ENTITY-SENSOR-MIB objects are supported\";\n       reference\n         \"RFC\
    \ 3433: Entity Sensor Management Information Base\";\n     }\n     /*\n      *\
    \ Data nodes\n      */\n     container hardware {\n       config false;\n    \
    \   status deprecated;\n       description\n         \"Data nodes representing\
    \ components.\";\n       leaf last-change {\n         type yang:date-and-time;\n\
    \         status deprecated;\n         description\n           \"The time the\
    \ '/hardware/component' list changed in the\n            operational state.\"\
    ;\n       }\n       list component {\n         key name;\n         status deprecated;\n\
    \         description\n           \"List of components.\n            When the\
    \ server detects a new hardware component, it\n            initializes a list\
    \ entry in the operational state.\n            If the server does not support\
    \ configuration of hardware\n            components, list entries in the operational\
    \ state are\n            initialized with values for all nodes as detected by\
    \ the\n            implementation.\n            Otherwise, this procedure is followed:\n\
    \              1. If there is an entry in the '/hardware/component' list\n   \
    \              in the intended configuration with values for the nodes\n     \
    \            'class', 'parent', and 'parent-rel-pos' that are equal\n        \
    \         to the detected values, then:\n              1a. If the configured entry\
    \ has a value for 'mfg-name'\n                  that is equal to the detected\
    \ value or if the\n                  'mfg-name' value cannot be detected, then\
    \ the list\n                  entry in the operational state is initialized with\
    \ the\n                  configured values for all configured nodes, including\n\
    \                  the 'name'.\n                  Otherwise, the list entry in\
    \ the operational state is\n                  initialized with values for all\
    \ nodes as detected by\n                  the implementation.  The implementation\
    \ may raise an\n                  alarm that informs about the 'mfg-name' mismatch\n\
    \                  condition.  How this is done is outside the scope of\n    \
    \              this document.\n              1b. Otherwise (i.e., there is no\
    \ matching configuration\n                  entry), the list entry in the operational\
    \ state is\n                  initialized with values for all nodes as detected\
    \ by\n                  the implementation.\n            If the '/hardware/component'\
    \ list in the intended\n            configuration is modified, then the system\
    \ MUST behave as if\n            it re-initializes itself and follow the procedure\
    \ in (1).\";\n         reference\n           \"RFC 6933: Entity MIB (Version 4)\
    \ - entPhysicalEntry\";\n         leaf name {\n           type string;\n     \
    \      status deprecated;\n           description\n             \"The name assigned\
    \ to this component.\n              This name is not required to be the same as\n\
    \              entPhysicalName.\";\n         }\n         leaf class {\n      \
    \     type identityref {\n             base ianahw:hardware-class;\n         \
    \  }\n           mandatory true;\n           status deprecated;\n           description\n\
    \             \"An indication of the general hardware type of the\n          \
    \    component.\";\n           reference\n             \"RFC 6933: Entity MIB\
    \ (Version 4) - entPhysicalClass\";\n         }\n         leaf physical-index\
    \ {\n           if-feature entity-mib;\n           type int32 {\n            \
    \ range \"1..2147483647\";\n           }\n           status deprecated;\n    \
    \       description\n             \"The entPhysicalIndex for the entPhysicalEntry\
    \ represented\n              by this list entry.\";\n           reference\n  \
    \           \"RFC 6933: Entity MIB (Version 4) - entPhysicalIndex\";\n       \
    \  }\n         leaf description {\n           type string;\n           status\
    \ deprecated;\n           description\n             \"A textual description of\
    \ the component.  This node should\n              contain a string that identifies\
    \ the manufacturer's name\n              for the component and should be set to\
    \ a distinct value\n              for each version or model of the component.\"\
    ;\n           reference\n             \"RFC 6933: Entity MIB (Version 4) - entPhysicalDescr\"\
    ;\n         }\n         leaf parent {\n           type leafref {\n           \
    \  path \"../../component/name\";\n             require-instance false;\n    \
    \       }\n           status deprecated;\n           description\n           \
    \  \"The name of the component that physically contains this\n              component.\n\
    \              If this leaf is not instantiated, it indicates that this\n    \
    \          component is not contained in any other component.\n              In\
    \ the event that a physical component is contained by\n              more than\
    \ one physical component (e.g., double-wide\n              modules), this node\
    \ contains the name of one of these\n              components.  An implementation\
    \ MUST use the same name\n              every time this node is instantiated.\"\
    ;\n           reference\n             \"RFC 6933: Entity MIB (Version 4) -\n \
    \                       entPhysicalContainedIn\";\n         }\n         leaf parent-rel-pos\
    \ {\n           type int32 {\n             range \"0 .. 2147483647\";\n      \
    \     }\n           status deprecated;\n           description\n             \"\
    An indication of the relative position of this child\n              component\
    \ among all its sibling components.  Sibling\n              components are defined\
    \ as components that:\n                o share the same value of the 'parent'\
    \ node and\n                o share a common base identity for the 'class' node.\n\
    \              Note that the last rule gives implementations flexibility\n   \
    \           in how components are numbered.  For example, some\n             \
    \ implementations might have a single number series for all\n              components\
    \ derived from 'ianahw:port', while some others\n              might have different\
    \ number series for different\n              components with identities derived\
    \ from 'ianahw:port' (for\n              example, one for RJ45 and one for SFP).\"\
    ;\n           reference\n             \"RFC 6933: Entity MIB (Version 4) -\n \
    \                       entPhysicalParentRelPos\";\n         }\n         leaf-list\
    \ contains-child {\n           type leafref {\n             path \"../../component/name\"\
    ;\n           }\n           status deprecated;\n           description\n     \
    \        \"The name of the contained component.\";\n           reference\n   \
    \          \"RFC 6933: Entity MIB (Version 4) - entPhysicalChildIndex\";\n   \
    \      }\n         leaf hardware-rev {\n           type string;\n           status\
    \ deprecated;\n           description\n             \"The vendor-specific hardware\
    \ revision string for the\n              component.  The preferred value is the\
    \ hardware revision\n              identifier actually printed on the component\
    \ itself (if\n              present).\";\n           reference\n             \"\
    RFC 6933: Entity MIB (Version 4) -\n                        entPhysicalHardwareRev\"\
    ;\n         }\n         leaf firmware-rev {\n           type string;\n       \
    \    status deprecated;\n           description\n             \"The vendor-specific\
    \ firmware revision string for the\n              component.\";\n           reference\n\
    \             \"RFC 6933: Entity MIB (Version 4) -\n                        entPhysicalFirmwareRev\"\
    ;\n         }\n         leaf software-rev {\n           type string;\n       \
    \    status deprecated;\n           description\n             \"The vendor-specific\
    \ software revision string for the\n              component.\";\n           reference\n\
    \             \"RFC 6933: Entity MIB (Version 4) -\n                        entPhysicalSoftwareRev\"\
    ;\n         }\n         leaf serial-num {\n           type string;\n         \
    \  status deprecated;\n           description\n             \"The vendor-specific\
    \ serial number string for the\n              component.  The preferred value\
    \ is the serial number\n              string actually printed on the component\
    \ itself (if\n              present).\";\n           reference\n             \"\
    RFC 6933: Entity MIB (Version 4) - entPhysicalSerialNum\";\n         }\n     \
    \    leaf mfg-name {\n           type string;\n           status deprecated;\n\
    \           description\n             \"The name of the manufacturer of this physical\
    \ component.\n              The preferred value is the manufacturer name string\n\
    \              actually printed on the component itself (if present).\n      \
    \        Note that comparisons between instances of the\n              'model-name',\
    \ 'firmware-rev', 'software-rev', and\n              'serial-num' nodes are only\
    \ meaningful amongst components\n              with the same value of 'mfg-name'.\n\
    \              If the manufacturer name string associated with the\n         \
    \     physical component is unknown to the server, then this\n              node\
    \ is not instantiated.\";\n           reference\n             \"RFC 6933: Entity\
    \ MIB (Version 4) - entPhysicalMfgName\";\n         }\n         leaf model-name\
    \ {\n           type string;\n           status deprecated;\n           description\n\
    \             \"The vendor-specific model name identifier string\n           \
    \   associated with this physical component.  The preferred\n              value\
    \ is the customer-visible part number, which may be\n              printed on\
    \ the component itself.\n              If the model name string associated with\
    \ the physical\n              component is unknown to the server, then this node\
    \ is not\n              instantiated.\";\n           reference\n             \"\
    RFC 6933: Entity MIB (Version 4) - entPhysicalModelName\";\n         }\n     \
    \    leaf alias {\n           type string;\n           status deprecated;\n  \
    \         description\n             \"An 'alias' name for the component, as specified\
    \ by a\n              network manager, that provides a non-volatile 'handle' for\n\
    \              the component.\n              If no configured value exists, the\
    \ server MAY set the\n              value of this node to a locally unique value\
    \ in the\n              operational state.\n              A server implementation\
    \ MAY map this leaf to the\n              entPhysicalAlias MIB object.  Such an\
    \ implementation needs\n              to use some mechanism to handle the differences\
    \ in size\n              and characters allowed between this leaf and\n      \
    \        entPhysicalAlias.  The definition of such a mechanism is\n          \
    \    outside the scope of this document.\";\n           reference\n          \
    \   \"RFC 6933: Entity MIB (Version 4) - entPhysicalAlias\";\n         }\n   \
    \      leaf asset-id {\n           type string;\n           status deprecated;\n\
    \           description\n             \"This node is a user-assigned asset tracking\
    \ identifier for\n              the component.\n              A server implementation\
    \ MAY map this leaf to the\n              entPhysicalAssetID MIB object.  Such\
    \ an implementation\n              needs to use some mechanism to handle the differences\
    \ in\n              size and characters allowed between this leaf and\n      \
    \        entPhysicalAssetID.  The definition of such a mechanism is\n        \
    \      outside the scope of this document.\";\n           reference\n        \
    \     \"RFC 6933: Entity MIB (Version 4) - entPhysicalAssetID\";\n         }\n\
    \         leaf is-fru {\n           type boolean;\n           status deprecated;\n\
    \           description\n             \"This node indicates whether or not this\
    \ component is\n              considered a 'field-replaceable unit' by the vendor.\
    \  If\n              this node contains the value 'true', then this component\n\
    \              identifies a field-replaceable unit.  For all components\n    \
    \          that are permanently contained within a field-replaceable\n       \
    \       unit, the value 'false' should be returned for this\n              node.\"\
    ;\n           reference\n             \"RFC 6933: Entity MIB (Version 4) - entPhysicalIsFRU\"\
    ;\n         }\n         leaf mfg-date {\n           type yang:date-and-time;\n\
    \           status deprecated;\n           description\n             \"The date\
    \ of manufacturing of the managed component.\";\n           reference\n      \
    \       \"RFC 6933: Entity MIB (Version 4) - entPhysicalMfgDate\";\n         }\n\
    \         leaf-list uri {\n           type inet:uri;\n           status deprecated;\n\
    \           description\n             \"This node contains identification information\
    \ about the\n              component.\";\n           reference\n             \"\
    RFC 6933: Entity MIB (Version 4) - entPhysicalUris\";\n         }\n         leaf\
    \ uuid {\n           type yang:uuid;\n           status deprecated;\n        \
    \   description\n             \"A Universally Unique Identifier of the component.\"\
    ;\n           reference\n             \"RFC 6933: Entity MIB (Version 4) - entPhysicalUUID\"\
    ;\n         }\n         container state {\n           if-feature hardware-state;\n\
    \           status deprecated;\n           description\n             \"State-related\
    \ nodes\";\n           reference\n             \"RFC 4268: Entity State MIB\"\
    ;\n           leaf state-last-changed {\n             type yang:date-and-time;\n\
    \             status deprecated;\n             description\n               \"\
    The date and time when the value of any of the\n                admin-state, oper-state,\
    \ usage-state, alarm-state, or\n                standby-state changed for this\
    \ component.\n                If there has been no change since the last\n   \
    \             re-initialization of the local system, this node\n             \
    \   contains the date and time of local system\n                initialization.\
    \  If there has been no change since the\n                component was added\
    \ to the local system, this node\n                contains the date and time of\
    \ the insertion.\";\n             reference\n               \"RFC 4268: Entity\
    \ State MIB - entStateLastChanged\";\n           }\n           leaf admin-state\
    \ {\n             type hw:admin-state;\n             status deprecated;\n    \
    \         description\n               \"The administrative state for this component.\n\
    \                This node refers to a component's administrative\n          \
    \      permission to service both other components within its\n              \
    \  containment hierarchy as well as other users of its\n                services\
    \ defined by means outside the scope of this\n                module.\n      \
    \          Some components exhibit only a subset of the remaining\n          \
    \      administrative state values.  Some components cannot be\n             \
    \   locked; hence, this node exhibits only the 'unlocked'\n                state.\
    \  Other components cannot be shut down gracefully;\n                hence, this\
    \ node does not exhibit the 'shutting-down'\n                state.\";\n     \
    \        reference\n               \"RFC 4268: Entity State MIB - entStateAdmin\"\
    ;\n           }\n           leaf oper-state {\n             type hw:oper-state;\n\
    \             status deprecated;\n             description\n               \"\
    The operational state for this component.\n                Note that this node\
    \ does not follow the administrative\n                state.  An administrative\
    \ state of 'down' does not\n                predict an operational state of 'disabled'.\n\
    \                Note that some implementations may not be able to\n         \
    \       accurately report oper-state while the admin-state node\n            \
    \    has a value other than 'unlocked'.  In these cases, this\n              \
    \  node MUST have a value of 'unknown'.\";\n             reference\n         \
    \      \"RFC 4268: Entity State MIB - entStateOper\";\n           }\n        \
    \   leaf usage-state {\n             type hw:usage-state;\n             status\
    \ deprecated;\n             description\n               \"The usage state for\
    \ this component.\n                This node refers to a component's ability to\
    \ service\n                more components in a containment hierarchy.\n     \
    \           Some components will exhibit only a subset of the usage\n        \
    \        state values.  Components that are unable to ever\n                service\
    \ any components within a containment hierarchy\n                will always have\
    \ a usage state of 'busy'.  In some\n                cases, a component will be\
    \ able to support only one\n                other component within its containment\
    \ hierarchy and\n                will therefore only exhibit values of 'idle'\
    \ and\n                'busy'.\";\n             reference\n               \"RFC\
    \ 4268: Entity State MIB - entStateUsage\";\n           }\n           leaf alarm-state\
    \ {\n             type hw:alarm-state;\n             status deprecated;\n    \
    \         description\n               \"The alarm state for this component.  It\
    \ does not\n                include the alarms raised on child components within\
    \ its\n                containment hierarchy.\";\n             reference\n   \
    \            \"RFC 4268: Entity State MIB - entStateAlarm\";\n           }\n \
    \          leaf standby-state {\n             type hw:standby-state;\n       \
    \      status deprecated;\n             description\n               \"The standby\
    \ state for this component.\n                Some components will exhibit only\
    \ a subset of the\n                remaining standby state values.  If this component\n\
    \                cannot operate in a standby role, the value of this node\n  \
    \              will always be 'providing-service'.\";\n             reference\n\
    \               \"RFC 4268: Entity State MIB - entStateStandby\";\n          \
    \ }\n         }\n         container sensor-data {\n           when 'derived-from-or-self(../class,\n\
    \                                      \"ianahw:sensor\")' {\n             description\n\
    \               \"Sensor data nodes present for any component of type\n      \
    \          'sensor'\";\n           }\n           if-feature hardware-sensor;\n\
    \           status deprecated;\n           description\n             \"Sensor-related\
    \ nodes.\";\n           reference\n             \"RFC 3433: Entity Sensor Management\
    \ Information Base\";\n           leaf value {\n             type hw:sensor-value;\n\
    \             status deprecated;\n             description\n               \"\
    The most recent measurement obtained by the server\n                for this sensor.\n\
    \                A client that periodically fetches this node should also\n  \
    \              fetch the nodes 'value-type', 'value-scale', and\n            \
    \    'value-precision', since they may change when the value\n               \
    \ is changed.\";\n             reference\n               \"RFC 3433: Entity Sensor\
    \ Management Information Base -\n                          entPhySensorValue\"\
    ;\n           }\n           leaf value-type {\n             type hw:sensor-value-type;\n\
    \             status deprecated;\n             description\n               \"\
    The type of data units associated with the\n                sensor value\";\n\
    \             reference\n               \"RFC 3433: Entity Sensor Management Information\
    \ Base -\n                          entPhySensorType\";\n           }\n      \
    \     leaf value-scale {\n             type hw:sensor-value-scale;\n         \
    \    status deprecated;\n             description\n               \"The (power\
    \ of 10) scaling factor associated\n                with the sensor value\";\n\
    \             reference\n               \"RFC 3433: Entity Sensor Management Information\
    \ Base -\n                          entPhySensorScale\";\n           }\n     \
    \      leaf value-precision {\n             type hw:sensor-value-precision;\n\
    \             status deprecated;\n             description\n               \"\
    The number of decimal places of precision\n                associated with the\
    \ sensor value\";\n             reference\n               \"RFC 3433: Entity Sensor\
    \ Management Information Base -\n                          entPhySensorPrecision\"\
    ;\n           }\n           leaf oper-status {\n             type hw:sensor-status;\n\
    \             status deprecated;\n             description\n               \"\
    The operational status of the sensor.\";\n             reference\n           \
    \    \"RFC 3433: Entity Sensor Management Information Base -\n               \
    \           entPhySensorOperStatus\";\n           }\n           leaf units-display\
    \ {\n             type string;\n             status deprecated;\n            \
    \ description\n               \"A textual description of the data units that should\
    \ be\n                used in the display of the sensor value.\";\n          \
    \   reference\n               \"RFC 3433: Entity Sensor Management Information\
    \ Base -\n                          entPhySensorUnitsDisplay\";\n           }\n\
    \           leaf value-timestamp {\n             type yang:date-and-time;\n  \
    \           status deprecated;\n             description\n               \"The\
    \ time the status and/or value of this sensor was last\n                obtained\
    \ by the server.\";\n             reference\n               \"RFC 3433: Entity\
    \ Sensor Management Information Base -\n                          entPhySensorValueTimeStamp\"\
    ;\n           }\n           leaf value-update-rate {\n             type uint32;\n\
    \             units \"milliseconds\";\n             status deprecated;\n     \
    \        description\n               \"An indication of the frequency that the\
    \ server updates\n                the associated 'value' node, represented in\n\
    \                milliseconds.  The value zero indicates:\n                 -\
    \ the sensor value is updated on demand (e.g.,\n                   when polled\
    \ by the server for a get-request),\n                 - the sensor value is updated\
    \ when the sensor\n                   value changes (event-driven), or\n     \
    \            - the server does not know the update rate.\";\n             reference\n\
    \               \"RFC 3433: Entity Sensor Management Information Base -\n    \
    \                      entPhySensorValueUpdateRate\";\n           }\n        \
    \ }\n       }\n     }\n     /*\n      * Notifications\n      */\n     notification\
    \ hardware-state-change {\n       status deprecated;\n       description\n   \
    \      \"A hardware-state-change notification is generated when the\n        \
    \  value of /hardware/last-change changes in the operational\n          state.\"\
    ;\n       reference\n         \"RFC 6933: Entity MIB (Version 4) - entConfigChange\"\
    ;\n     }\n     notification hardware-state-oper-enabled {\n       if-feature\
    \ hardware-state;\n       status deprecated;\n       description\n         \"\
    A hardware-state-oper-enabled notification signifies that a\n          component\
    \ has transitioned into the 'enabled' state.\";\n       leaf name {\n        \
    \ type leafref {\n           path \"/hardware/component/name\";\n         }\n\
    \         status deprecated;\n         description\n           \"The name of the\
    \ component that has transitioned into the\n            'enabled' state.\";\n\
    \       }\n       leaf admin-state {\n         type leafref {\n           path\
    \ \"/hardware/component/state/admin-state\";\n         }\n         status deprecated;\n\
    \         description\n           \"The administrative state for the component.\"\
    ;\n       }\n       leaf alarm-state {\n         type leafref {\n           path\
    \ \"/hardware/component/state/alarm-state\";\n         }\n         status deprecated;\n\
    \         description\n           \"The alarm state for the component.\";\n  \
    \     }\n       reference\n         \"RFC 4268: Entity State MIB - entStateOperEnabled\"\
    ;\n     }\n     notification hardware-state-oper-disabled {\n       if-feature\
    \ hardware-state;\n       status deprecated;\n       description\n         \"\
    A hardware-state-oper-disabled notification signifies that a\n          component\
    \ has transitioned into the 'disabled' state.\";\n       leaf name {\n       \
    \  type leafref {\n           path \"/hardware/component/name\";\n         }\n\
    \         status deprecated;\n         description\n           \"The name of the\
    \ component that has transitioned into the\n            'disabled' state.\";\n\
    \       }\n       leaf admin-state {\n         type leafref {\n           path\
    \ \"/hardware/component/state/admin-state\";\n         }\n         status deprecated;\n\
    \         description\n           \"The administrative state for the component.\"\
    ;\n       }\n       leaf alarm-state {\n         type leafref {\n           path\
    \ \"/hardware/component/state/alarm-state\";\n         }\n         status deprecated;\n\
    \         description\n           \"The alarm state for the component.\";\n  \
    \     }\n       reference\n         \"RFC 4268: Entity State MIB - entStateOperDisabled\"\
    ;\n     }\n   }\n   <CODE ENDS>\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   The authors wish to thank the following individuals, who\
    \ all provided\n   helpful comments on various draft versions of this document:\
    \ Bart\n   Bogaert, Timothy Carey, William Lupton, and Juergen Schoenwaelder.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Andy Bierman\n   YumaWorks\n   Email: andy@yumaworks.com\n\
    \   Martin Bjorklund\n   Tail-f Systems\n   Email: mbj@tail-f.com\n   Jie Dong\n\
    \   Huawei Technologies\n   Email: jie.dong@huawei.com\n   Dan Romascanu\n   Email:\
    \ dromasca@gmail.com\n"
