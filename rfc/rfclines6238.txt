Abstract This document describes an extension of the One Time Password (OTP) algorithm, namely the HMAC based One Time Password (HOTP) algorithm, as defined in RFC 4226, to support the time based moving factor.
The HOTP algorithm specifies an event based OTP algorithm, where the moving factor is an event counter.
The present work bases the moving factor on a time value.
A time based variant of the OTP algorithm provides short lived OTP values, which are desirable for enhanced security.
The proposed algorithm can be used across a wide range of network applications, from remote Virtual Private Network (VPN) access and Wi Fi network logon to transaction oriented Web applications.
The authors believe that a common and shared algorithm will facilitate adoption of two factor authentication on the Internet by enabling interoperability across commercial and open source implementations.
This document describes an extension of the One Time Password (OTP) algorithm, namely the HMAC based One Time Password (HOTP) algorithm, as defined in [RFC4226], to support the time based moving factor.
As defined in [RFC4226], the HOTP algorithm is based on the HMAC SHA 1 algorithm (as specified in [RFC2104]) and applied to an increasing counter value representing the message in the HMAC computation.
Basically, the output of the HMAC SHA 1 calculation is truncated to obtain user friendly values: HOTP(K,C)   Truncate(HMAC
SHA 1(K,C)) where Truncate represents the function that can convert an HMAC SHA 1 value into an HOTP value.
K and C represent the shared secret and counter value; see [RFC4226] for detailed definitions.
TOTP is the time based variant of this algorithm, where a value T, derived from a time reference and a time step, replaces the counter C in the HOTP computation.
TOTP implementations MAY use HMAC SHA 256 or HMAC SHA 512 functions, based on SHA 256 or SHA 512
[SHA2] hash functions, instead of the HMAC SHA 1 function that has been specified for the HOTP computation in [RFC4226].
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in [RFC2119].
This section summarizes the requirements taken into account for designing the TOTP algorithm.
The prover (e.g., token, soft token) and verifier (authentication or validation server) MUST know or be able to derive the current Unix time (i.e., the number of seconds elapsed since midnight UTC of January 1, 1970) for OTP generation.
See [UT] for a more detailed definition of the commonly known "Unix time".
The precision of the time used by the prover affects how often the clock synchronization should be done; see Section 6.
The prover and verifier MUST either share the same secret or the knowledge of a secret transformation to generate a shared secret.
The algorithm MUST use HOTP [RFC4226] as a key building block.
The prover and verifier MUST use the same time step value X. R5: There MUST be a unique secret (key) for each prover.
The keys SHOULD be randomly generated or derived using key derivation algorithms.
The keys MAY be stored in a tamper resistant device and SHOULD be protected against unauthorized access and usage.
This variant of the HOTP algorithm specifies the calculation of a one time password value, based on a representation of the counter as a time factor.
Notations  X represents the time step in seconds (default value X   30 seconds) and is a system parameter.
T0 is the Unix time to start counting time steps (default value is 0, i.e., the Unix epoch) and is also a system parameter.
Description Basically, we define TOTP as TOTP   HOTP(K, T), where T is an integer and represents the number of time steps between the initial counter time T0 and the current Unix time.
More specifically, T   (Current Unix time T0) / X, where the default floor function is used in the computation.
For example, with T0   0 and Time Step X   30, T   1 if the current Unix time is 59 seconds, and T   2 if the current Unix time is 60 seconds.
The implementation of this algorithm MUST support a time value T larger than a 32 bit integer when it is beyond the year 2038.
The value of the system parameters X and T0 are pre established during the provisioning process and communicated between a prover and verifier as part of the provisioning step.
The provisioning flow is out of scope of this document; refer to [RFC6030] for such provisioning container specifications.
The security and strength of this algorithm depend on the properties of the underlying building block HOTP, which is a construction based on HMAC [RFC2104] using SHA 1 as the hash function.
The conclusion of the security analysis detailed in [RFC4226] is that, for all practical purposes, the outputs of the dynamic truncation on distinct inputs are uniformly and independently distributed strings.
The analysis demonstrates that the best possible attack against the HOTP function is the brute force attack.
As indicated in the algorithm requirement section, keys SHOULD be chosen at random or using a cryptographically strong pseudorandom generator properly seeded with a random value.
Keys SHOULD be of the length of the HMAC output to facilitate interoperability.
We RECOMMEND following the recommendations in [RFC4086] for all pseudorandom and random number generations.
The pseudorandom numbers used for generating the keys SHOULD successfully pass the randomness test specified in [CN], or a similar well recognized test.
All the communications SHOULD take place over a secure channel, e.g., Secure Socket Layer/Transport Layer Security (SSL/TLS)
[RFC5246] or IPsec connections [RFC4301].
We also RECOMMEND storing the keys securely in the validation system, and, more specifically, encrypting them using tamper resistant hardware encryption and exposing them only when required: for example, the key is decrypted when needed to verify an OTP value, and re encrypted immediately to limit exposure in the RAM to a short period of time.
The key store MUST be in a secure area, to avoid, as much as possible, direct attack on the validation system and secrets database.
Particularly, access to the key material should be limited to programs and processes required by the validation system only.
5.2.  Validation and Time Step Size
An OTP generated within the same time step will be the same.
When an OTP is received at a validation system, it doesn't know a client's exact timestamp when an OTP was generated.
The validation system may typically use the timestamp when an OTP is received for OTP comparison.
Due to network latency, the gap (as measured by T, that is, the number of time steps since T0) between the time that the OTP was generated and the time that the OTP arrives at the receiving system may be large.
The receiving time at the validation system and the actual OTP generation may not fall within the same time step window that produced the same OTP.
When an OTP is generated at the end of a time step window, the receiving time most likely falls into the next time step window.
A validation system SHOULD typically set a policy for an acceptable OTP transmission delay window for validation.
The validation system should compare OTPs not only with the receiving timestamp but also the past timestamps that are within the transmission delay.
A larger acceptable delay window would expose a larger window for attacks.
We RECOMMEND that at most one time step is allowed as the network delay.
The time step size has an impact on both security and usability.
A larger time step size means a larger validity window for an OTP to be accepted by a validation system.
There are implications for using a larger time step size, as follows:
First, a larger time step size exposes a larger window to attack.
When an OTP is generated and exposed to a third party before it is consumed, the third party can consume the OTP within the time step window.
We RECOMMEND a default time step size of 30 seconds.
This default value of 30 seconds is selected as a balance between security and usability.
Second, the next different OTP must be generated in the next time  step window.
A user must wait until the clock moves to the next time step window from the last submission.
The waiting time may not be exactly the length of the time step, depending on when the last OTP was generated.
For example, if the last OTP was generated at the halfway point in a time step window, the waiting time for the next OTP is half the length of the time step.
In general, a larger time  step window means a longer waiting time for a user to get the next valid OTP after the last successful OTP validation.
A too large window (for example, 10 minutes) most probably won't be suitable for typical Internet login use cases; a user may not be able to get the next OTP within 10 minutes and therefore will have to re login to the same site in 10 minutes.
Note that a prover may send the same OTP inside a given time step window multiple times to a verifier.
The verifier MUST NOT accept the second attempt of the OTP after the successful validation has been issued for the first OTP, which ensures one time only use of an OTP.
Because of possible clock drifts between a client and a validation server, we RECOMMEND that the validator be set with a specific limit to the number of time steps a prover can be "out of synch" before being rejected.
This limit can be set both forward and backward from the calculated time step on receipt of the OTP value.
If the time step is 30 seconds as recommended, and the validator is set to only accept two time steps backward, then the maximum elapsed time drift would be around 89 seconds, i.e., 29 seconds in the calculated time step and 60 seconds for two backward time steps.
This would mean the validator could perform a validation against the current time and then two further validations for each backward step (for a total of 3 validations).
Upon successful validation, the validation server can record the detected clock drift for the token in terms of the number of time steps.
When a new OTP is received after this step, the validator can validate the OTP with the current timestamp adjusted with the recorded number of time step clock drifts for the token.
Also, it is important to note that the longer a prover has not sent an OTP to a validation system, the longer (potentially)
the accumulated clock drift between the prover and the verifier.
In such cases, the automatic resynchronization described above may not work if the drift exceeds the allowed threshold.
Additional authentication measures should be used to safely authenticate the prover and explicitly resynchronize the clock drift between the prover and the validator.
Reference Implementation <CODE BEGINS> /
2011 IETF Trust and the persons identified as authors of the code.
Redistribution and use in source and binary forms, with or without modification, is permitted pursuant to, and subject to the license terms contained in, the Simplified BSD License set forth in Section 4.c of the IETF Trust's Legal Provisions Relating to IETF Documents (http://trustee.ietf.org/license info).
UndeclaredThrowableException; import java.security.GeneralSecurityException; import java.text.
This method uses the JCE to provide the crypto algorithm.
HMAC computes a Hashed Message Authentication Code with the   crypto hash algorithm as a parameter.
keyBytes: the bytes to use for the HMAC key   @param
the message or text to be authenticated  / private static byte[] hmac sha(String crypto, byte[] keyBytes, byte[] text){ try { Mac hmac; hmac   Mac.getInstance(crypto); SecretKeySpec macKey   new SecretKeySpec(keyBytes, "RAW")
Adding one byte to get the right conversion //
Values starting with "0" can be converted byte[] bArray   new BigInteger("10"
; i < ret.length; i ) ret[i]
bArray[i 1]; return ret; } private static final int[] DIGITS POWER // 0 1  2
@param key: the shared secret
/ public static String generateTOTP(String key
@param key: the shared secret
@param key: the shared secret
@param key: the shared secret
/ public static String generateTOTP(String key
, String time, String returnDigits, String crypto){ int codeDigits   Integer.decode(returnDigits).intValue(); String result   null;
First 8 bytes are for the movingFactor //
Compliant with base RFC 4226
// put selected bytes into result int int offset   hash[hash.length 1] & 0xf; int binary
"   result; } return result; } public static void main(String
This section provides test values that can be used for the HOTP time  based variant algorithm interoperability test.
The test token shared secret uses the ASCII string value "12345678901234567890".
With Time Step X   30, and the Unix epoch as the initial value to count time steps, where T0   0, the TOTP algorithm will display the following values for specified modes and timestamps.
