- contents:
  - '           ACAP -- Application Configuration Access Protocol

    '
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society 1997.  All Rights Reserved.\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   The Application Configuration Access Protocol (ACAP) is designed
    to\n   support remote storage and access of program option, configuration\n   and
    preference information.  The data store model is designed to\n   allow a client
    relatively simple access to interesting data, to allow\n   new information to
    be easily added without server re-configuration,\n   and to promote the use of
    both standardized data and custom or\n   proprietary data.  Key features include
    \"inheritance\" which can be\n   used to manage default values for configuration
    settings and access\n   control lists which allow interesting personal information
    to be\n   shared and group information to be restricted.\n                           Table
    of Contents\n"
  - 'Status of this Memo ...............................................    i

    '
  - 'Copyright Notice ..................................................    i

    '
  - 'Abstract ..........................................................    i

    '
  - 'ACAP Protocol Specification .......................................    1

    '
  - '1.       Introduction .............................................    1

    '
  - '1.1.     Conventions Used in this Document ........................    1

    '
  - '1.2.     ACAP Data Model ..........................................    1

    '
  - '1.3.     ACAP Design Goals ........................................    1

    '
  - '1.4.     Validation ...............................................    2

    '
  - '1.5.     Definitions ..............................................    2

    '
  - '1.6.     ACAP Command Overview ....................................    4

    '
  - '2.       Protocol Framework .......................................    4

    '
  - '2.1.     Link Level ...............................................    4

    '
  - '2.2.     Commands and Responses ...................................    4

    '
  - '2.2.1.   Client Protocol Sender and Server Protocol Receiver ......    4

    '
  - '2.2.2.   Server Protocol Sender and Client Protocol Receiver ......    5

    '
  - '2.3.     Server States ............................................    6

    '
  - '2.3.1.   Non-Authenticated State ..................................    6

    '
  - '2.3.2.   Authenticated State ......................................    6

    '
  - '2.3.3.   Logout State .............................................    6

    '
  - '2.4.     Operational Considerations ...............................    7

    '
  - '2.4.1.   Untagged Status Updates ..................................    7

    '
  - '2.4.2.   Response when No Command in Progress .....................    7

    '
  - '2.4.3.   Auto-logout Timer ........................................    7

    '
  - '2.4.4.   Multiple Commands in Progress ............................    8

    '
  - '2.5.     Server Command Continuation Request ......................    8

    '
  - '2.6.     Data Formats .............................................    8

    '
  - '2.6.1.   Atom .....................................................    9

    '
  - '2.6.2.   Number ...................................................    9

    '
  - '2.6.3.   String ...................................................    9

    '
  - '2.6.3.1. 8-bit and Binary Strings .................................   10

    '
  - '2.6.4.   Parenthesized List .......................................   10

    '
  - '2.6.5.   NIL ......................................................   10

    '
  - '3.       Protocol Elements ........................................   10

    '
  - '3.1.     Entries and Attributes ...................................   10

    '
  - '3.1.1.   Predefined Attributes ....................................   11

    '
  - '3.1.2.   Attribute Metadata .......................................   12

    '
  - '3.2.     ACAP URL scheme ..........................................   13

    '
  - '3.2.1.   ACAP URL User Name and Authentication Mechanism ..........   13

    '
  - '3.2.2.   Relative ACAP URLs .......................................   14

    '
  - '3.3.     Contexts .................................................   14

    '
  - '3.4.     Comparators ..............................................   15

    '
  - '3.5.     Access Control Lists (ACLs) ..............................   17

    '
  - '3.6.     Server Response Codes ....................................   18

    '
  - '4.       Namespace Conventions ....................................   21

    '
  - '4.1.     Dataset Namespace ........................................   21

    '
  - '4.2.     Attribute Namespace ......................................   21

    '
  - '4.3.     Formal Syntax for Dataset and Attribute Namespace ........   22

    '
  - '5.       Dataset Management .......................................   23

    '
  - '5.1.     Dataset Inheritance ......................................   23

    '
  - '5.2.     Dataset Attributes .......................................   24

    '
  - '5.3.     Dataset Creation .........................................   25

    '
  - '5.4.     Dataset Class Capabilities ...............................   25

    '
  - '5.5.     Dataset Quotas ...........................................   26

    '
  - '6.       Command and Response Specifications ......................   26

    '
  - '6.1.     Initial Connection .......................................   26

    '
  - '6.1.1.   ACAP Untagged Response ...................................   26

    '
  - '6.2.     Any State ................................................   27

    '
  - '6.2.1.   NOOP Command .............................................   27

    '
  - '6.2.2.   LANG Command .............................................   28

    '
  - '6.2.3.   LANG Intermediate Response ...............................   28

    '
  - '6.2.4.   LOGOUT Command ...........................................   29

    '
  - '6.2.5.   OK Response ..............................................   29

    '
  - '6.2.6.   NO Response ..............................................   29

    '
  - '6.2.7.   BAD Response .............................................   30

    '
  - '6.2.8.   BYE Untagged Response ....................................   30

    '
  - '6.2.9.   ALERT Untagged Response ..................................   31

    '
  - '6.3.     Non-Authenticated State ..................................   31

    '
  - '6.3.1.   AUTHENTICATE Command .....................................   31

    '
  - '6.4.     Searching ................................................   33

    '
  - '6.4.1.   SEARCH Command ...........................................   33

    '
  - '6.4.2.   ENTRY Intermediate Response ..............................   37

    '
  - '6.4.3.   MODTIME Intermediate Response ............................   38

    '
  - '6.4.4.   REFER Intermediate Response ..............................   38

    '
  - '6.4.5.   Search Examples ..........................................   38

    '
  - '6.5.     Contexts .................................................   39

    '
  - '6.5.1.   FREECONTEXT Command ......................................   39

    '
  - '6.5.2.   UPDATECONTEXT Command ....................................   40

    '
  - '6.5.3.   ADDTO Untagged Response ..................................   40

    '
  - '6.5.4.   REMOVEFROM Untagged Response .............................   41

    '
  - '6.5.5.   CHANGE Untagged Response .................................   41

    '
  - '6.5.6.   MODTIME Untagged Response ................................   42

    '
  - '6.6.     Dataset modification .....................................   42

    '
  - '6.6.1.   STORE Command ............................................   42

    '
  - '6.6.2.   DELETEDSINCE Command .....................................   45

    '
  - '6.6.3.   DELETED Intermediate Response ............................   45

    '
  - '6.7.     Access Control List Commands .............................   45

    '
  - '6.7.1.   SETACL Command ...........................................   46

    '
  - '6.7.2.   DELETEACL Command ........................................   46

    '
  - '6.7.3.   MYRIGHTS Command .........................................   47

    '
  - '6.7.4.   MYRIGHTS Intermediate Response ...........................   47

    '
  - '6.7.5.   LISTRIGHTS Command .......................................   47

    '
  - '6.7.6.   LISTRIGHTS Intermediate Response .........................   48

    '
  - '6.8.     Quotas ...................................................   48

    '
  - '6.8.1.   GETQUOTA Command .........................................   48

    '
  - '6.8.3.   QUOTA Untagged Response ..................................   49

    '
  - '6.9.     Extensions ...............................................   49

    '
  - '7.       Registration Procedures ..................................   49

    '
  - '7.1.     ACAP Capabilities ........................................   50

    '
  - '7.2.     ACAP Response Codes ......................................   50

    '
  - '7.3.     Dataset Classes ..........................................   51

    '
  - '7.4.     Vendor Subtree ...........................................   51

    '
  - '8.       Formal Syntax ............................................   52

    '
  - '9.       Multi-lingual Considerations .............................   61

    '
  - '10.      Security Considerations ..................................   62

    '
  - '11.      Acknowledgments ..........................................   63

    '
  - '12.      Authors'' Addresses .......................................   63

    '
  - 'Appendices ........................................................   64

    '
  - 'A.       References ...............................................   64

    '
  - 'B.       ACAP Keyword Index .......................................   66

    '
  - 'C.       Full Copyright Statement

    '
  - 'ACAP Protocol Specification

    '
  title: Abstract
- contents:
  - '1.       Introduction

    '
  title: 1.       Introduction
- contents:
  - "1.1.     Conventions Used in this Document\n   In examples, \"C:\" and \"S:\"
    indicate lines sent by the client and\n   server respectively.  If such lines
    are wrapped without a new \"C:\" or\n   \"S:\" label, then the wrapping is for
    editorial clarity and is not\n   part of the command.\n   The key words \"REQUIRED\",
    \"MUST\", \"MUST NOT\", \"SHOULD\", \"SHOULD NOT\",\n   and \"MAY\" in this document
    are to be interpreted as described in \"Key\n   words for use in RFCs to Indicate
    Requirement Levels\" [KEYWORDS].\n"
  title: 1.1.     Conventions Used in this Document
- contents:
  - "1.2.     ACAP Data Model\n   An ACAP server exports a hierarchical tree of entries.
    \ Each level of\n   the tree is called a dataset, and each dataset is made up
    of a list\n   of entries.  Each entry has a unique name and may contain any number\n
    \  of named attributes.  Each attribute within an entry may be single\n   valued
    or multi-valued and may have associated metadata to assist\n   access and interpretation
    of the value.\n   The rules with which a client interprets the data within a portion
    of\n   ACAP's tree of entries are called a dataset class.\n"
  title: 1.2.     ACAP Data Model
- contents:
  - "1.3.     ACAP Design Goals\n   ACAP's primary purpose is to allow users access
    to their\n   configuration data from multiple network-connected computers.  Users\n
    \  can then sit down in front of any network-connected computer, run any\n   ACAP-enabled
    application and have access to their own configuration\n   data.  Because it is
    hoped that many applications will become ACAP-\n   enabled, client simplicity
    was preferred to server or protocol\n   simplicity whenever reasonable.\n   ACAP
    is designed to be easily manageable.  For this reason, it\n   includes \"inheritance\"
    which allows one dataset to inherit default\n   attributes from another dataset.
    \ In addition, access control lists\n   are included to permit delegation of management
    and quotas are\n   included to control storage.  Finally, an ACAP server which
    is\n   conformant to this base specification should be able to support most\n
    \  dataset classes defined in the future without requiring a server\n   reconfiguration
    or upgrade.\n   ACAP is designed to operate well with a client that only has\n
    \  intermittent access to an ACAP server.  For this reason, each entry\n   has
    a server maintained modification time so that the client may\n   detect changes.
    \ In addition, the client may ask the server for a\n   list of entries which have
    been removed since it last accessed the\n   server.\n   ACAP presumes that a dataset
    may be potentially large and/or the\n   client's network connection may be slow,
    and thus offers server\n   sorting, selective fetching and change notification
    for entries\n   within a dataset.\n   As required for most Internet protocols,
    security, scalability and\n   internationalization were important design goals.\n
    \  Given these design goals, an attempt was made to keep ACAP as simple\n   as
    possible.  It is a traditional Internet text based protocol which\n   massively
    simplifies protocol debugging.  It was designed based on\n   the successful IMAP
    [IMAP4] protocol framework, with a few\n   refinements.\n"
  title: 1.3.     ACAP Design Goals
- contents:
  - "1.4.     Validation\n   By default, any value may be stored in any attribute
    for which the\n   user has appropriate permission and quota.  This rule is necessary
    to\n   allow the addition of new simple dataset classes without\n   reconfiguring
    or upgrading the server.\n   In some cases, such as when the value has special
    meaning to the\n   server, it is useful to have the server enforce validation
    by\n   returning the INVALID response code to a STORE command. These cases\n   MUST
    be explicitly identified in the dataset class specification\n   which SHOULD include
    specific fixed rules for validation.  Since a\n   given ACAP server may be unaware
    of any particular dataset class\n   specification, clients MUST NOT depend on
    the presence of enforced\n   validation on the server.\n"
  title: 1.4.     Validation
- contents:
  - "1.5.     Definitions\n   access control list (ACL)\n        A set of identifier,
    rights pairs associated with an object.  An\n        ACL is used to determine
    which operations a user is permitted to\n        perform on that object.  See
    section 3.5.\n   attribute\n        A named value within an entry.  See section
    3.1.\n   comparator\n        A named function which can be used to perform one
    or more of\n        three comparison operations: ordering, equality and substring\n
    \       matching.  See section 3.4.\n   context\n        An ordered subset of
    entries in a dataset, created by a SEARCH\n        command with a MAKECONTEXT
    modifier.  See section 3.3.\n   dataset\n        One level of hierarchy in ACAP's
    tree of entries.\n   dataset class specification\n        The rules which allow
    a client to interpret the data within a\n        portion of ACAP's tree of entries.\n
    \  entry\n        A set of attributes with a unique entry name.  See section 3.1.\n
    \  metadata\n        Information describing an attribute, its value and any access\n
    \       controls associated with that attribute.  See section 3.1.2.\n   NIL  This
    represents the non-existence of a particular data item.\n   NUL  A control character
    encoded as 0 in US-ASCII [US-ASCII].\n   octet\n        An 8-bit value.  On most
    modern computer systems, an octet is\n        one byte.\n   SASL Simple Authentication
    and Security Layer [SASL].\n   UTC  Universal Coordinated Time as maintained by
    the Bureau\n        International des Poids et Mesures (BIPM).\n   UTF-8\n        An
    8-bit transformation format of the Universal Character Set\n        [UTF8].  Note
    that an incompatible change was made to the coded\n        character set referenced
    by [UTF8], so for the purpose of this\n        document, UTF-8 refers to the UTF-8
    encoding as defined by\n        version 2.0 of Unicode [UNICODE-2], or ISO 10646
    [ISO-10646]\n        including amendments one through seven.\n"
  title: 1.5.     Definitions
- contents:
  - "1.6.     ACAP Command Overview\n   The AUTHENTICATE, NOOP, LANG and LOGOUT commands
    provide basic\n   protocol services.  The SEARCH command is used to select, sort,
    fetch\n   and monitor changes to attribute values and metadata.  The\n   UPDATECONTEXT
    and FREECONTEXT commands are also used to assist in\n   monitoring changes in
    attribute values and metadata.  The STORE\n   command is used to add, modify and
    delete entries and attributes.\n   The DELETEDSINCE command is used to assist
    a client in\n   re-synchronizing a cache with the server.  The GETQUOTA, SETACL,\n
    \  DELETEACL, LISTRIGHTS and MYRIGHTS commands are used to examine\n   storage
    quotas and examine or modify access permissions.\n"
  title: 1.6.     ACAP Command Overview
- contents:
  - '2.       Protocol Framework

    '
  title: 2.       Protocol Framework
- contents:
  - "2.1.     Link Level\n   The ACAP protocol assumes a reliable data stream such
    as provided by\n   TCP.  When TCP is used, an ACAP server listens on port 674.\n"
  title: 2.1.     Link Level
- contents:
  - "2.2.     Commands and Responses\n   An ACAP session consists of the establishment
    of a client/server\n   connection, an initial greeting from the server, and client/server\n
    \  interactions.  These client/server interactions consist of a client\n   command,
    server data, and a server completion result.\n   ACAP is a text-based line-oriented
    protocol.  In general,\n   interactions transmitted by clients and servers are
    in the form of\n   lines; that is, sequences of characters that end with a CRLF.
    \ The\n   protocol receiver of an ACAP client or server is either reading a\n
    \  line, or is reading a sequence of octets with a known count (a\n   literal)
    followed by a line.  Both clients and servers must be\n   capable of handling
    lines of arbitrary length.\n"
  title: 2.2.     Commands and Responses
- contents:
  - "2.2.1.   Client Protocol Sender and Server Protocol Receiver\n   The client command
    begins an operation.  Each client command is\n   prefixed with a identifier (an
    alphanumeric string of no more than 32\n   characters, e.g., A0001, A0002, etc.)
    called a \"tag\".  A different\n   tag SHOULD be generated by the client for each
    command.\n   There are two cases in which a line from the client does not\n   represent
    a complete command.  In one case, a command argument is\n   quoted with an octet
    count (see the description of literal in section\n   2.6.3); in the other case,
    the command arguments require server\n   feedback (see the AUTHENTICATE command).
    \ In some of these cases, the\n   server sends a command continuation request
    if it is ready for the\n   next part of the command.  This response is prefixed
    with the token\n   \"+\".\n        Note: If, instead, the server detected an error
    in a\n        command, it sends a BAD completion response with tag\n        matching
    the command (as described below) to reject the\n        command and prevent the
    client from sending any more of the\n        command.\n        It is also possible
    for the server to send a completion or\n        intermediate response for some
    other command (if multiple\n        commands are in progress), or untagged data.
    \ In either\n        case, the command continuation request is still pending;\n
    \       the client takes the appropriate action for the response,\n        and
    reads another response from the server.\n   The ACAP server reads a command line
    from the client, parses the\n   command and its arguments, and transmits server
    data and a server\n   command completion result.\n"
  title: 2.2.1.   Client Protocol Sender and Server Protocol Receiver
- contents:
  - "2.2.2.   Server Protocol Sender and Client Protocol Receiver\n   Data transmitted
    by the server to the client come in four forms:\n   command continuation requests,
    command completion results,\n   intermediate responses, and untagged responses.\n
    \  A command continuation request is prefixed with the token \"+\".\n   A command
    completion result indicates the success or failure of the\n   operation.  It is
    tagged with the same tag as the client command\n   which began the operation.
    \ Thus, if more than one command is in\n   progress, the tag in a server completion
    response identifies the\n   command to which the response applies.  There are
    three possible\n   server completion responses: OK (indicating success), NO (indicating\n
    \  failure), or BAD (indicating protocol error such as unrecognized\n   command
    or command syntax error).\n   An intermediate response returns data which can
    only be interpreted\n   within the context of a command in progress.  It is tagged
    with the\n   same tag as the client command which began the operation.  Thus,
    if\n   more than one command is in progress, the tag in an intermediate\n   response
    identifies the command to which the response applies.  A\n   tagged response other
    than \"OK\", \"NO\", or \"BAD\" is an intermediate\n   response.\n   An untagged
    response returns data or status messages which may be\n   interpreted outside
    the context of a command in progress.  It is\n   prefixed with the token \"*\".
    \ Untagged data may be sent as a result\n   of a client command, or may be sent
    unilaterally by the server.\n   There is no syntactic difference between untagged
    data that resulted\n   from a specific command and untagged data that were sent\n
    \  unilaterally.\n   The protocol receiver of an ACAP client reads a response
    line from\n   the server.  It then takes action on the response based upon the\n
    \  first token of the response, which may be a tag, a \"*\", or a \"+\" as\n   described
    above.\n   A client MUST be prepared to accept any server response at all times.\n
    \  This includes untagged data that it may not have requested.\n   This topic
    is discussed in greater detail in the Server Responses\n   section.\n"
  title: 2.2.2.   Server Protocol Sender and Client Protocol Receiver
- contents:
  - "2.3.     Server States\n   An ACAP server is in one of three states.  Most commands
    are valid in\n   only certain states.  It is a protocol error for the client to\n
    \  attempt a command while the server is in an inappropriate state for\n   that
    command.  In this case, a server will respond with a BAD command\n   completion
    result.\n"
  title: 2.3.     Server States
- contents:
  - "2.3.1.   Non-Authenticated State\n   In non-authenticated state, the user must
    supply authentication\n   credentials before most commands will be permitted.
    \ This state is\n   entered when a connection starts.\n"
  title: 2.3.1.   Non-Authenticated State
- contents:
  - "2.3.2.   Authenticated State\n   In authenticated state, the user is authenticated
    and most commands\n   will be permitted.  This state is entered when acceptable\n
    \  authentication credentials have been provided.\n"
  title: 2.3.2.   Authenticated State
- contents:
  - "2.3.3.   Logout State\n   In logout state, the session is being terminated, and
    the server will\n   close the connection.  This state can be entered as a result
    of a\n   client request or by unilateral server decision.\n            +--------------------------------------+\n
    \           |initial connection and server greeting|\n            +--------------------------------------+\n
    \                     || (1)                  || (2)\n                      VV
    \                     ||\n            +-----------------+               ||\n            |non-authenticated|
    \              ||\n            +-----------------+               ||\n             ||
    (4)      || (3)               ||\n             ||          VV                   ||\n
    \            ||          +----------------+   ||\n             ||          | authenticated
    \ |   ||\n             ||          +----------------+   ||\n             ||            ||
    (4)             ||\n             VV            VV                 VV\n            +--------------------------------------+\n
    \           |     logout and close connection      |\n            +--------------------------------------+\n
    \        (1) connection (ACAP greeting)\n         (2) rejected connection (BYE
    greeting)\n         (3) successful AUTHENTICATE command\n         (4) LOGOUT command,
    server shutdown, or connection closed\n"
  title: 2.3.3.   Logout State
- contents:
  - '2.4.     Operational Considerations

    '
  title: 2.4.     Operational Considerations
- contents:
  - "2.4.1.   Untagged Status Updates\n   At any time, a server can send data that
    the client did not request.\n"
  title: 2.4.1.   Untagged Status Updates
- contents:
  - "2.4.2.   Response when No Command in Progress\n   Server implementations are
    permitted to send an untagged response\n   while there is no command in progress.
    \ Server implementations that\n   send such responses MUST deal with flow control
    considerations.\n   Specifically, they must either (1) verify that the size of
    the data\n   does not exceed the underlying transport's available window size,
    or\n   (2) use non-blocking writes.\n"
  title: 2.4.2.   Response when No Command in Progress
- contents:
  - "2.4.3.   Auto-logout Timer\n   If a server has an inactivity auto-logout timer,
    that timer MUST be\n   of at least 30 minutes duration.  The receipt of ANY command
    from the\n   client during that interval MUST suffice to reset the auto-logout\n
    \  timer.\n"
  title: 2.4.3.   Auto-logout Timer
- contents:
  - "2.4.4.   Multiple Commands in Progress\n   The client is not required to wait
    for the completion result of a\n   command before sending another command, subject
    to flow control\n   constraints on the underlying data stream.  Similarly, a server
    is\n   not required to process a command to completion before beginning\n   processing
    of the next command, unless an ambiguity would result\n   because of a command
    that would affect the results of other commands.\n   If there is such an ambiguity,
    the server executes commands to\n   completion in the order given by the client.\n"
  title: 2.4.4.   Multiple Commands in Progress
- contents:
  - "2.5.     Server Command Continuation Request\n   The command continuation request
    is indicated by a \"+\" token instead\n   of a tag.  This indicates that the server
    is ready to accept the\n   continuation of a command from the client.\n   This
    response is used in the AUTHENTICATE command to transmit server\n   data to the
    client, and request additional client data.  This\n   response is also used if
    an argument to any command is a\n   synchronizing literal (see section 2.6.3).\n
    \  The client is not permitted to send the octets of a synchronizing\n   literal
    unless the server indicates that it expects it.  This permits\n   the server to
    process commands and reject errors on a line-by-line\n   basis, assuming it checks
    for non-synchronizing literals at the end\n   of each line.  The remainder of
    the command, including the CRLF that\n   terminates a command, follows the octets
    of the literal.  If there\n   are any additional command arguments the literal
    octets are followed\n   by a space and those arguments.\n   Example:    C: A099
    FREECONTEXT {10}\n               S: + \"Ready for additional command text\"\n
    \              C: FRED\n               C: FOOB\n               S: A099 OK \"FREECONTEXT
    completed\"\n               C: A044 BLURDYBLOOP {102856}\n               S: A044
    BAD \"No such command as 'BLURDYBLOOP'\"\n"
  title: 2.5.     Server Command Continuation Request
- contents:
  - "2.6.     Data Formats\n   ACAP uses textual commands and responses.  Data in
    ACAP can be in one\n   of five forms: atom, number, string, parenthesized list
    or NIL.\n"
  title: 2.6.     Data Formats
- contents:
  - "2.6.1.   Atom\n   An atom consists of one to 1024 non-special characters.  It
    must\n   begin with a letter.  Atoms are used for protocol keywords.\n"
  title: 2.6.1.   Atom
- contents:
  - "2.6.2.   Number\n   A number consists of one or more digit characters, and represents
    a\n   numeric value.  Numbers are restricted to the range of an unsigned\n   32-bit
    integer: 0 < number < 4,294,967,296.\n"
  title: 2.6.2.   Number
- contents:
  - "2.6.3.   String\n   A string is in one of two forms: literal and quoted string.
    \ The\n   literal form is the general form of string.  The quoted string form\n
    \  is an alternative that avoids the overhead of processing a literal at\n   the
    cost of restrictions of what may be in a quoted string.\n   A literal is a sequence
    of zero or more octets (including CR and LF),\n   prefix-quoted with an octet
    count in the form of an open brace (\"{\"),\n   the number of octets, close brace
    (\"}\"), and CRLF.  In the case of\n   literals transmitted from server to client,
    the CRLF is immediately\n   followed by the octet data.\n   There are two forms
    of literals transmitted from client to server.\n   The form where the open brace
    (\"{\") and number of octets is\n   immediately followed by a close brace (\"}\")
    and CRLF is called a\n   synchronizing literal.  When sending a synchronizing
    literal, the\n   client must wait to receive a command continuation request before\n
    \  sending the octet data (and the remainder of the command).  The other\n   form
    of literal, the non-synchronizing literal, is used to transmit a\n   string from
    client to server without waiting for a command\n   continuation request.  The
    non-synchronizing literal differs from the\n   synchronizing literal by having
    a plus (\"+\") between the number of\n   octets and the close brace (\"}\") and
    by having the octet data\n   immediately following the CRLF.\n   A quoted string
    is a sequence of zero to 1024 octets excluding NUL,\n   CR and LF, with double
    quote (<\">) characters at each end.\n   The empty string is represented as \"\"
    (a quoted string with zero\n   characters between double quotes), as {0} followed
    by CRLF (a\n   synchronizing literal with an octet count of 0), or as {0+} followed\n
    \  by a CRLF (a non-synchronizing literal with an octet count of 0).\n        Note:
    Even if the octet count is 0, a client transmitting a\n        synchronizing literal
    must wait to receive a command\n        continuation request.\n"
  title: 2.6.3.   String
- contents:
  - "2.6.3.1. 8-bit and Binary Strings\n   Most strings in ACAP are restricted to
    UTF-8 characters and may not\n   contain NUL octets.  Attribute values MAY contain
    any octets\n   including NUL.\n"
  title: 2.6.3.1. 8-bit and Binary Strings
- contents:
  - "2.6.4.   Parenthesized List\n   Data structures are represented as a \"parenthesized
    list\"; a sequence\n   of data items, delimited by space, and bounded at each
    end by\n   parentheses.  A parenthesized list can contain other parenthesized\n
    \  lists, using multiple levels of parentheses to indicate nesting.\n   The empty
    list is represented as () -- a parenthesized list with no\n   members.\n"
  title: 2.6.4.   Parenthesized List
- contents:
  - "2.6.5.   NIL\n   The special atom \"NIL\" represents the non-existence of a particular\n
    \  data item that is represented as a string or parenthesized list, as\n   distinct
    from the empty string \"\" or the empty parenthesized list ().\n"
  title: 2.6.5.   NIL
- contents:
  - "3.       Protocol Elements\n   This section defines data formats and other protocol
    elements used\n   throughout the ACAP protocol.\n"
  title: 3.       Protocol Elements
- contents:
  - "3.1.     Entries and Attributes\n   Within a dataset, each entry name is made
    up of zero or more UTF-8\n   characters other than slash (\"/\").  A slash separated
    list of\n   entries, one at each level of the hierarchy, forms the full path to\n
    \  an entry.\n   Each entry is made up of a set of attributes.  Each attribute
    has a\n   hierarchical name in UTF-8, with each component of the name separated\n
    \  by a period (\".\").\n   The value of an attribute is either single or multi-valued.
    \ A single\n   value is NIL (has no value), or a string of zero or more octets.
    \ A\n   multi-value is a list of zero or more strings, each of zero or more\n
    \  octets.\n   Attribute names are not permitted to contain asterisk (\"*\") or\n
    \  percent (\"%\") and MUST be valid UTF-8 strings which do not contain\n   NUL.
    \ Invalid attribute names result in a BAD response.  Entry names\n   are not permitted
    to begin with \".\" or contain slash (\"/\") and MUST\n   be valid UTF-8 strings
    which do not contain NUL.  Invalid entry names\n   in the entry field of a command
    result in a BAD response.\n   Use of non-visible UTF-8 characters in attribute
    and entry names is\n   discouraged.\n"
  title: 3.1.     Entries and Attributes
- contents:
  - "3.1.1.   Predefined Attributes\n   Attribute names which do not contain a dot
    (\".\") are reserved for\n   standardized attributes which have meaning in any
    dataset.  The\n   following attributes are defined by the ACAP protocol.\n   entry\n
    \       Contains the name of the entry.  MUST be single valued.\n        Attempts
    to use illegal or multi-valued values for the entry\n        attribute are protocol
    errors and MUST result in a BAD\n        completion response.  This is a special
    case.\n   modtime\n        Contains the date and time any read-write metadata
    in the entry\n        was last modified.  This value MUST be in UTC, MUST be\n
    \       automatically updated by the server.\n        The value consists of 14
    or more US-ASCII digits.  The first\n        four indicate the year, the next
    two indicate the month, the\n        next two indicate the day of month, the next
    two indicate the\n        hour (0 - 23), the next two indicate the minute, and
    the next\n        two indicate the second.  Any further digits indicate fractions\n
    \       of a second.\n        The time, particularly fractions of a second, need
    not be\n        accurate.  It is REQUIRED, however, that any two entries in a\n
    \       dataset changed by successive modifications have strictly\n        ascending
    modtime values.  In addition, each STORE command\n        within a dataset (including
    simultaneous stores from different\n        connections) MUST use different modtime
    values.\n        This attribute has enforced validation, so any attempt to STORE\n
    \       a value in this attribute MAY result in a NO response with an\n        INVALID
    response code.\n   subdataset\n        If this attribute is set, it indicates
    the existence of a sub-\n        dataset of this entry.\n        The value consists
    of a list of relative ACAP URLs (see section\n        3.2) which may be used to
    locate the sub-dataset.  The base URL\n        is the full path to the entry followed
    by a slash (\"/\").  The\n        value \".\" indicates a subdataset is located
    directly under this\n        one.  Multiple values indicate replicated copies
    of the\n        subdataset.\n        For example, if the dataset \"/folder/site/\"
    has an entry\n        \"public-folder\" with a subdataset attribute of \".\",
    then there\n        exists a dataset \"/folder/site/public-folder/\".  If the
    value of\n        the subdataset attribute was instead\n        \"//other.acap.domain//folder/site/public-folder/\",
    that would\n        indicate the dataset is actually located on a different ACAP\n
    \       server.\n        A dataset can be created by storing a \"subdataset\"
    attribute\n        including \".\", and a sub-hierarchy of datasets is deleted
    by\n        storing a NIL value to the \"subdataset\" attribute on the entry\n
    \       in the parent dataset.\n        This attribute has enforced syntax validation.
    \ Specifically, if\n        an attempt is made to STORE a non-list value (other
    than NIL),\n        an empty list, or one of the values does not follow the URL\n
    \       syntax rules [BASIC-URL, REL-URL], then this will result in a NO\n        response
    with an INVALID response code.\n"
  title: 3.1.1.   Predefined Attributes
- contents:
  - "3.1.2.   Attribute Metadata\n   Each attribute is made up of metadata items which
    describe that\n   attribute, its value and any associated access controls.  Metadata\n
    \  items may be either read-only, in which case the client is never\n   permitted
    to modify the item, or read-write, in which case the client\n   may modify the
    item if the access control list (ACL) permits.\n   The following metadata items
    are defined in this specification:\n   acl    The access control list for the
    attribute, if one exists.  If\n          the attribute does not have an ACL, NIL
    is returned.\n          Read-write.  See section 3.5 for the contents of an ACL.\n
    \  attribute\n          The attribute name.  Read-only.\n   myrights\n          The
    set of rights that the client has to the attribute.\n          Read-only.  See
    section 3.5 for the possible rights.\n   size   This is the length of the value.
    \ In the case of a\n          multi-value, this is a list of lengths for each
    of the values.\n          Read-only.\n   value  The value.  For a multi-value,
    this is a list of single\n          values.  Read-write.\n   Additional items
    of metadata may be defined in extensions to this\n   protocol.  Servers MUST respond
    to unrecognized metadata by returning\n   a BAD command completion result.\n"
  title: 3.1.2.   Attribute Metadata
- contents:
  - "3.2.     ACAP URL scheme\n   ACAP URLs are used within the ACAP protocol for
    the \"subdataset\"\n   attribute, referrals and inheritance.  They provide a convenient\n
    \  syntax for referring to other ACAP datasets.  The ACAP URL follows\n   the
    common Internet scheme syntax as defined in [BASIC-URL] except\n   that plaintext
    passwords are not permitted.  If :<port> is omitted,\n   the port defaults to
    674.\n   An ACAP URL has the following general form:\n   url-acap  = \"acap://\"
    url-server \"/\" url-enc-entry [url-filter]\n               [url-extension]\n
    \  The <url-server> element includes the hostname, and optional user\n   name,
    authentication mechanism and port number.  The <url-enc-entry>\n   element contains
    the name of an entry path encoded according to the\n   rules in [BASIC-URL].\n
    \  The <url-filter> element is an optional list of interesting attribute\n   names.
    \ If omitted, the URL refers to all attributes of the named\n   entry.  The <url-extension>
    element is reserved for extensions to\n   this URL scheme.\n   Note that unsafe
    or reserved characters such as \" \" or \"?\" MUST be\n   hex encoded as described
    in the URL specification [BASIC-URL].  Hex\n   encoded octets are interpreted
    according to UTF-8 [UTF8].\n"
  title: 3.2.     ACAP URL scheme
- contents:
  - "3.2.1.   ACAP URL User Name and Authentication Mechanism\n   A user name and/or
    authentication mechanism may be supplied.  They\n   are used in the \"AUTHENTICATE\"
    command after making the connection to\n   the ACAP server.  If no user name or
    authentication mechanism is\n   supplied, then the SASL ANONYMOUS [SASL-ANON]
    mechanism is used by\n   default.  If an authentication mechanism is supplied
    without a user\n   name, then one SHOULD be obtained from the specified mechanism
    or\n   requested from the user as appropriate.  If a user name is supplied\n   without
    an authentication mechanism then \";AUTH=*\" is assumed.\n   The \";AUTH=\" authentication
    parameter is interpreted as described in\n   the IMAP URL Scheme [IMAP-URL].\n
    \  Note that if unsafe or reserved characters such as \" \" or \";\" are\n   present
    in the user name or authentication mechanism, they MUST be\n   encoded as described
    in the URL specification [BASIC-URL].\n"
  title: 3.2.1.   ACAP URL User Name and Authentication Mechanism
- contents:
  - "3.2.2.   Relative ACAP URLs\n   Because ACAP uses \"/\" as the hierarchy separator
    for dataset paths,\n   it works well with the relative URL rules defined in the
    relative URL\n   specification [REL-URL].\n   The <aauth> grammar element is considered
    part of the user name for\n   purposes of resolving relative ACAP URLs.\n   The
    base URL for a relative URL stored in an attribute's value is\n   formed by taking
    the path to the dataset containing that attribute,\n   appending a \"/\" followed
    by the entry name of the entry containing\n   that attribute followed by \"/\".\n"
  title: 3.2.2.   Relative ACAP URLs
- contents:
  - "3.3.     Contexts\n   A context is subset of entries in a dataset or datasets,
    created by a\n   SEARCH command with a MAKECONTEXT modifier.  Context names are\n
    \  client-generated strings and must not start with the slash ('/')\n   character.\n
    \  When a client creates a context, it may request automatic\n   notification
    of changes.  A client may also request enumeration of\n   entries within a context.
    \ Enumeration simplifies the implementation\n   of a \"virtual scrollbar\" by
    the client.\n   A context exists only within the ACAP session in which it was\n
    \  created.  When the connection is closed, all contexts associated with\n   that
    connection are automatically discarded.  A server is required to\n   support at
    least 100 active contexts within a session.  If the server\n   supports a larger
    limit it must advertise it in a CONTEXTLIMIT\n   capability.\n"
  title: 3.3.     Contexts
- contents:
  - "3.4.     Comparators\n   A comparator is a named function which takes two input
    values and can\n   be used to perform one or more of four comparison operations:\n
    \  ordering, equality, prefix and substring matching.\n   The ordering operation
    is used both for the SORT search modifier and\n   the COMPARE and COMPARESTRICT
    search keys.  Ordering comparators can\n   determine the ordinal precedence of
    any two values.  When used for\n   ordering, a comparator's name can be prefixed
    with \"+\" or \"-\" to\n   indicate that the ordering should be normal order or
    reversed order\n   respectively.  If no prefix is included, \"+\" is assumed.\n
    \  For the purpose of ordering, a comparator may designate certain\n   values
    as having an undefined ordinal precedence.  Such values always\n   collate with
    equal value after all other values regardless of whether\n   normal or reversed
    ordering is used.  Unless the comparator\n   definition specifies otherwise, multi-values
    and NIL values have an\n   undefined ordinal precedence.\n   The equality operation
    is used for the EQUAL search modifier, and\n   simply determines if the two values
    are considered equal under the\n   comparator function.  When comparing a single
    value to a multi-value,\n   the two are considered equal if any one of the multiple
    values is\n   equal to the single value.\n   The prefix match operation is used
    for the PREFIX search modifier,\n   and simply determines if the search value
    is a prefix of the item\n   being searched.  In the case of prefix search on a
    multi-value, the\n   match is successful if the value is a prefix of any one of
    the\n   multiple values.\n   The substring match operation is used for the SUBSTRING
    search\n   modifier, and simply determines if search value is a substring of the\n
    \  item being searched.  In the case of substring search on a multi-\n   value,
    the match is successful if the value is a substring of any one\n   of the multiple
    values.\n   Rules for naming and registering comparators will be defined in a\n
    \  future specification.  Servers MUST respond to unknown or improperly\n   used
    comparators with a BAD command completion result.\n   The following comparators
    are defined by this standard and MUST be\n   implemented:\n      i;octet\n           Operations:
    Ordering, Equality, Prefix match, Substring match\n           For collation, the
    i;octet comparator interprets the value of\n           an attribute as a series
    of unsigned octets with ordinal\n           values from 0 to 255.  When ordering
    two strings, each octet\n           pair is compared in sequence until the octets
    are unequal or\n           the end of the string is reached.  When collating two
    strings\n           where the shorter is a prefix of the longer, the shorter\n
    \          string is interpreted as having a smaller ordinal value.  The\n           \"i;octet\"
    or \"+i;octet\" forms collate smaller ordinal values\n           earlier, and
    the \"-i;octet\" form collates larger ordinal\n           values earlier.\n           For
    the equality function, two strings are equal if they are\n           the same
    length and contain the same octets in the same\n           order.  NIL is equal
    only to itself.\n           For non-binary, non-nil single values, i;octet ordering
    is\n           equivalent to the ANSI C [ISO-C] strcmp() function applied to\n
    \          C string representations of the values.  For non-binary,\n           non-nil
    single values, i;octet substring match is equivalent\n           to the ANSI C
    strstr() function applied to the C string\n           representations of the values.\n
    \     i;ascii-casemap\n           Operations: Ordering, Equality, Prefix match,
    Substring match\n           The i;ascii-casemap comparator first applies a mapping
    to the\n           attribute values which translates all US-ASCII letters to\n
    \          uppercase (octet values 0x61 to 0x7A are translated to octet\n           values
    0x41 to 0x5A respectively), then applies the i;octet\n           comparator as
    described above.  With this function the values\n           \"hello\" and \"HELLO\"
    have the same ordinal value and are\n           considered equal.\n      i;ascii-numeric\n
    \          Operations: Ordering, Equality\n           The i;ascii-numeric comparator
    interprets strings as decimal\n           positive integers represented as US-ASCII
    digits.  All values\n           which do not begin with a US-ASCII digit are considered
    equal\n           with an ordinal value higher than all non-NIL single-valued\n
    \          attributes.  Otherwise, all US-ASCII digits (octet values\n           0x30
    to 0x39) are interpreted starting from the beginning of\n           the string
    to the first non-digit or the end of the string.\n"
  title: 3.4.     Comparators
- contents:
  - "3.5.     Access Control Lists (ACLs)\n   An access control list is a set of identifier,
    rights pairs used to\n   restrict access to a given dataset, attribute or attribute
    within an\n   entry.  An ACL is represented by a multi-value with each value\n
    \  containing an identifier followed by a tab character followed by the\n   rights.
    \ The syntax is defined by the \"acl\" rule in the formal syntax\n   in section
    8.\n   Identifier is a UTF-8 string.  The identifier \"anyone\" is reserved to\n
    \  refer to the universal identity (all authentications, including\n   anonymous).
    \ All user name strings accepted by the AUTHENTICATE\n   command to authenticate
    to the ACAP server are reserved as\n   identifiers for the corresponding user.
    \ Identifiers starting with a\n   slash (\"/\") character are reserved for authorization
    groups which\n   will be defined in a future specification.  Identifiers MAY be\n
    \  prefixed with a dash (\"-\") to indicate a revocation of rights.  All\n   other
    identifiers have implementation-defined meanings.\n   Rights is a string listing
    a (possibly empty) set of alphanumeric\n   characters, each character listing
    a set of operations which is being\n   controlled.  Letters are reserved for \"standard\"
    rights, listed\n   below.  The set of standard rights may only be extended by
    a\n   standards-track or IESG approved experimental RFC.  Digits are\n   reserved
    for implementation or site defined rights.  The currently\n   defined standard
    rights are:\n   x - search (use EQUAL search key with i;octet comparator)\n   r
    - read (access with SEARCH command)\n   w - write (modify with STORE command)\n
    \  i - insert (perform STORE on a previously NIL value)\n   a - administer (perform
    SETACL or STORE on ACL attribute/metadata)\n   An implementation may force rights
    to always or never be granted.  In\n   particular, implementations are expected
    to grant implicit read and\n   administer rights to a user's personal dataset
    storage in order to\n   avoid denial of service problems.  Rights are never tied,
    unlike the\n   IMAP ACL extension [IMAP-ACL].\n   It is possible for multiple
    identifiers in an access control list to\n   apply to a given user (or other authentication
    identity).  For\n   example, an ACL may include rights to be granted to the identifier\n
    \  matching the user, one or more implementation-defined identifiers\n   matching
    groups which include the user, and/or the identifier\n   \"anyone\".  These rights
    are combined by taking the union of all\n   positive rights which apply to a given
    user and subtracting the union\n   of all negative rights which apply to that
    user.  A client MAY avoid\n   this calculation by using the MYRIGHTS command and
    metadata items.\n   Each attribute of each entry of a dataset may potentially
    have an\n   ACL.  If an attribute in an entry does not have an ACL, then access\n
    \  is controlled by a default ACL for that attribute in the dataset, if\n   it
    exists.  If there is no default ACL for that attribute in the\n   dataset, access
    is controlled by a default ACL for that dataset.  The\n   default ACL for a dataset
    must exist.\n   In order to perform any access or manipulation on an entry in
    a\n   dataset, the client must have 'r' rights on the \"entry\" attribute of\n
    \  the entry.  Implementations should take care not to reveal via error\n   messages
    the existence of an entry for which the client does not have\n   'r' rights.  A
    client does not need access to the \"subdataset\"\n   attribute of the parent
    dataset in order to access the contents of a\n   dataset.\n   Many of the ACL
    commands and responses include an \"acl object\"\n   parameter, for specifying
    what the ACL applies to.  This is a\n   parenthesized list.  The list contains
    just the dataset name when\n   referring to the default ACL for a dataset.  The
    list contains a\n   dataset name and an attribute name when referring to the default
    ACL\n   for an attribute in a dataset.  The list contains a dataset name, an\n
    \  attribute name, and an entry name when referring to the ACL for an\n   attribute
    of an entry of a dataset.\n"
  title: 3.5.     Access Control Lists (ACLs)
- contents:
  - "3.6.     Server Response Codes\n   An OK, NO, BAD, ALERT or BYE response from
    the server MAY contain a\n   response code to describe the event in a more detailed
    machine\n   parsable fashion.  A response code consists of data inside\n   parentheses
    in the form of an atom, possibly followed by a space and\n   arguments.  Response
    codes are defined when there is a specific\n   action that a client can take based
    upon the additional information.\n   In order to support future extension, the
    response code is\n   represented as a slash-separated hierarchy with each level
    of\n   hierarchy representing increasing detail about the error.  Clients\n   MUST
    tolerate additional hierarchical response code detail which they\n   don't understand.\n
    \  The currently defined response codes are:\n      AUTH-TOO-WEAK\n           This
    response code is returned on a tagged NO result from an\n           AUTHENTICATE
    command.  It indicates that site security policy\n           forbids the use of
    the requested mechanism for the specified\n           authentication identity.\n
    \     ENCRYPT-NEEDED\n           This response code is returned on a tagged NO
    result from an\n           AUTHENTICATE command.  It indicates that site security
    policy\n           requires the use of a strong encryption mechanism for the\n
    \          specified authentication identity and mechanism.\n      INVALID\n           This
    response code indicates that a STORE command included\n           data which the
    server implementation does not permit.  It\n           MUST NOT be used unless
    the dataset class specification for\n           the attribute in question explicitly
    permits enforced server\n           validation.  The argument is the attribute
    which was invalid.\n      MODIFIED\n           This response code indicates that
    a conditional store failed\n           because the modtime on the entry is later
    than the modtime\n           specified with the STORE command UNCHANGEDSINCE modifier.\n
    \          The argument is the entry which had been modified.\n      NOEXIST\n
    \          This response code indicates that a search or NOCREATE store\n           failed
    because a specified dataset did not exist.  The\n           argument is the dataset
    which does not exist.\n      PERMISSION\n           A command failed due to insufficient
    permission based on the\n           access control list or implicit rights.  The
    argument is the\n           acl-object which caused the permission failure.\n
    \     QUOTA\n           A STORE or SETACL command which would have increased the
    size\n           of the dataset failed due to insufficient quota.\n      REFER\n
    \          This response code may be returned in a tagged NO response to\n           any
    command that takes a dataset name as a parameter.  It has\n           one or more
    arguments with the syntax of relative URLs.  It\n           is a referral, indicating
    that the command should be retried\n           using one of the relative URLs.\n
    \     SASL This response code can occur in the tagged OK response to a\n           successful
    AUTHENTICATE command and includes the optional\n           final server response
    data from the server as specified by\n           SASL [SASL].\n      TOOMANY\n
    \          This response code may be returned in a tagged OK response to\n           a
    SEARCH command which includes the LIMIT modifier.  The\n           argument returns
    the total number of matching entries.\n      TOOOLD\n           The modtime specified
    in the DELETEDSINCE command is too old,\n           so deletedsince information
    is no longer available.\n      TRANSITION-NEEDED\n           This response code
    occurs on a NO response to an AUTHENTICATE\n           command.  It indicates
    that the user name is valid, but the\n           entry in the authentication database
    needs to be updated in\n           order to permit authentication with the specified
    mechanism.\n           This can happen if a user has an entry in a system\n           authentication
    database such as Unix /etc/passwd, but does\n           not have credentials suitable
    for use by the specified\n           mechanism.\n      TRYLATER\n           A
    command failed due to a temporary server failure.  The\n           client MAY
    continue using local information and try the\n           command later.\n      TRYFREECONTEXT\n
    \          This response code may be returned in a tagged NO response to\n           a
    SEARCH command which includes the MAKECONTEXT modifier.  It\n           indicates
    that a new context may not be created due to the\n           server's limit on
    the number of existing contexts.\n      WAYTOOMANY\n           This response code
    may be returned in a tagged NO response to\n           a SEARCH command which
    includes a HARDLIMIT search modifier.\n           It indicates that the SEARCH
    would have returned more entries\n           than the HARDLIMIT permitted.\n      Additional
    response codes MUST be registered with IANA according\n      to the proceedures
    in section 7.2.  Client implementations MUST\n      tolerate response codes that
    they do not recognize.\n"
  title: 3.6.     Server Response Codes
- contents:
  - '4.       Namespace Conventions

    '
  title: 4.       Namespace Conventions
- contents:
  - "4.1.     Dataset Namespace\n   The dataset namespace is a slash-separated hierarchy.
    \ The first\n   component of the dataset namespace is a dataset class.  Dataset\n
    \  classes MUST have a vendor prefix (vendor.<vendor/product>) or be\n   specified
    in a standards track or IESG approved experimental RFC.\n   See section 7.3 for
    the registration template.\n   The second component of the dataset name is \"site\",
    \"group\", \"host\",\n   or \"user\" referring to server-wide data, administrative
    group data,\n   per-host data and per-user data respectively.\n   For \"group\",
    \"host\", and \"user\" areas, the third component of the\n   path is the group
    name, the fully qualified host domain name, or the\n   user name.  A path of the
    form \"/<dataset-class>/~/\" is a convenient\n   abbreviation for \"/<dataset-class>/user/<current-user>/\".\n
    \  Dataset names which begin with \"/byowner/\" are reserved as an\n   alternate
    view of the namespace.  This provides a way to see all the\n   dataset classes
    which a particular owner uses.  For example,\n   \"/byowner/~/<dataset-class>/\"
    is an alternate name for\n   \"/<dataset-class>/~/\".  Byowner provides a way
    to view a list of\n   dataset classes owned by a given user; this is done using
    the dataset\n   \"/byowner/user/<current-user>/\" with the NOINHERIT SEARCH modifier.\n
    \  The dataset \"/\" may be used to find all dataset classes visible to\n   the
    current user.  A dataset of the form \"/<dataset-class>/user/\" may\n   be used
    to find all users which have made a dataset or entry of that\n   class visible
    to the current user.\n   The formal syntax for a dataset name is defined by the
    \"dataset-name\"\n   rule in section 4.3.\n"
  title: 4.1.     Dataset Namespace
- contents:
  - "4.2.     Attribute Namespace\n   Attribute names which do not contain a dot (\".\")
    are reserved for\n   standardized attributes which have meaning in any dataset.
    \ In order\n   to simplify client implementations, the attribute namespace is\n
    \  intended to be unique across all datasets.  To achieve this,\n   attribute
    names are prefixed with the dataset class name followed by\n   a dot (\".\").
    \ Attributes which affect management of the dataset are\n   prefixed with \"dataset.\".
    \ In addition, a subtree of the \"vendor.\"\n   attribute namespace may be registered
    with IANA according to the\n   rules in section 7.4.  ACAP implementors are encouraged
    to help\n   define interoperable dataset classes specifications rather than using\n
    \  the private attribute namespace.\n   Some users or sites may wish to add their
    own private attributes to\n   certain dataset classes.  In order to enable this,
    the \"user.<user-\n   name>.\" and \"site.\" subtrees of the attribute namespace
    are reserved\n   for user-specific and site-specific attributes respectively and
    will\n   not be standardized.  Such attributes are not interoperable so are\n
    \  discouraged in favor of defining standard attributes.  A future\n   extension
    is expected to permit discovery of syntax for user or\n   site-specific attributes.
    \ Clients wishing to support display of user\n   or site-specific attributes should
    display the value of any non-NIL\n   single-valued \"user.<user-name>.\" or \"site.\"
    \ attribute which has\n   valid UTF-8 syntax.\n   The formal syntax for an attribute
    name is defined by the\n   \"attribute-name\" rule in the next section.\n"
  title: 4.2.     Attribute Namespace
- contents:
  - "4.3.     Formal Syntax for Dataset and Attribute Namespace\n   The naming conventions
    for datasets and attributes are defined by the\n   following ABNF.   Note that
    this grammar is not part of the ACAP\n   protocol syntax in section 8, as dataset
    names and attribute names\n   are encoded as strings within the ACAP protocol.\n
    \  attribute-dacl  = \"dataset.acl\" *(\".\" name-component)\n   attribute-dset
    \ = dataset-std 1*(\".\" name-component)\n                     ;; MUST be defined
    in a dataset class specification\n   attribute-name  = attribute-std / attr-site
    / attr-user / vendor-name\n   attribute-std   = \"entry\" / \"subdataset\" / \"modtime\"
    /\n                     \"dataset.inherit\" / attribute-dacl / attribute-dset\n
    \  attr-site       = \"site\" 1*(\".\" name-component)\n   attr-user       = \"user.\"
    name-component 1*(\".\" name-component)\n   byowner         = \"/byowner/\" owner
    \"/\"\n                     [dataset-class \"/\" dataset-sub]\n   dataset-class
    \  = dataset-std / vendor-name\n   dataset-normal  = \"/\" [dataset-class \"/\"\n
    \                    (owner-prefix / dataset-tail)]\n   dataset-name    = byowner
    / dataset-normal\n   dataset-std     = name-component\n                     ;;
    MUST be registered with IANA and the spec MUST\n                     ;; be published
    as a standards track or\n                     ;; IESG-approved experimental RFC\n
    \  dataset-sub     = *(dname-component \"/\")\n                     ;; The rules
    for this portion of the namespace may\n                     ;; be further restricted
    by the dataset class\n                     ;; specification.\n   dataset-tail
    \   = owner \"/\" dataset-sub\n   dname-component = 1*UTF8-CHAR\n                     ;;
    MUST NOT begin with \".\" or contain \"/\"\n   name-component  = 1*UTF8-CHAR\n
    \                    ;; MUST NOT contain \".\", \"/\", \"%\", or \"*\"\n   owner
    \          = \"site\" / owner-host / owner-group /\n                     owner-user
    / \"~\"\n   owner-group     = \"group/\" dname-component\n   owner-host      =
    \"host/\" dname-component\n   owner-prefix    = \"group/\" / \"host/\" / \"user/\"\n
    \  owner-user      = \"user/\" dname-component\n   vendor-name     = vendor-token
    *(\".\" name-component)\n   vendor-token    = \"vendor.\" name-component\n                     ;;
    MUST be registered with IANA\n"
  title: 4.3.     Formal Syntax for Dataset and Attribute Namespace
- contents:
  - "5.       Dataset Management\n   The entry with an empty name (\"\") in the dataset
    is used to hold\n   management information for the dataset as a whole.\n"
  title: 5.       Dataset Management
- contents:
  - "5.1.     Dataset Inheritance\n   It is possible for one dataset to inherit data
    from another.  The\n   dataset from which the data is inherited is called the
    base dataset.\n   Data in the base dataset appears in the inheriting dataset,
    except\n   when overridden by a STORE to the inheriting dataset.\n   The base
    dataset is usually a system-wide or group-wide set of\n   defaults.  A system-wide
    dataset usually has one inheriting dataset\n   per user, allowing each user to
    add to or modify the defaults as\n   appropriate.\n   An entry which exists in
    both the inheriting and base dataset\n   inherits a modtime equal to the greater
    of the two modtimes.  An\n   attribute in such an entry is inherited from the
    base dataset if it\n   was never modified by a STORE command in the inheriting
    dataset or if\n   DEFAULT was stored to that attribute.  This permits default
    entries\n   to be amended rather than replaced in the inheriting dataset.\n   The
    \"subdataset\" attribute is not directly inherited.  If the base\n   dataset includes
    a \"subdataset\" attribute and the inheriting dataset\n   does not, then the \"subdataset\"
    attribute will inherit a virtual\n   value of a list containing a \".\".  The
    subdataset at that node is\n   said to be a \"virtual\" dataset as it is simply
    a virtual copy of the\n   appropriate base dataset with all \"subdataset\" attributes
    changed to\n   a list containing a \".\".  A virtual dataset is not visible if\n
    \  NOINHERIT is specified on the SEARCH command.\n   Servers MUST support at least
    two levels of inheritance.  This\n   permits a user's dataset such as \"/options/user/fred/common\"
    to\n   inherit from a group dataset such as \"/options/group/dinosaur\n   operators/common\"
    which in turn inherits from a server-wide dataset\n   such as \"/options/site/common\".\n"
  title: 5.1.     Dataset Inheritance
- contents:
  - "5.2.     Dataset Attributes\n   The following attributes apply to management
    of the dataset when\n   stored in the \"\" entry of a dataset.  These attributes
    are not\n   inherited.\n   dataset.acl\n        This holds the default access
    control list for the dataset.\n        This attribute is validated, so an invalid
    access control list\n        in a STORE command will result in a NO response with
    an INVALID\n        response code.\n   dataset.acl.<attribute>\n        This holds
    the default access control list for an attribute\n        within the dataset.
    \ This attribute is validated, so an invalid\n        access control list in a
    STORE command will result in a NO\n        response with an INVALID response code.\n
    \  dataset.inherit\n        This holds the name of a dataset from which to inherit
    according\n        to the rules in the previous section.  This attribute MAY refer\n
    \       to a non-existent dataset, in which case nothing is inherited.\n        This
    attribute is validated, so illegal dataset syntax or an\n        attempt to store
    a multi-value will result in a NO response with\n        an INVALID response code.\n"
  title: 5.2.     Dataset Attributes
- contents:
  - "5.3.     Dataset Creation\n   When a dataset is first created (by storing a \".\"
    in the subdataset\n   attribute or storing an entry in a previously non-existent
    dataset),\n   the dataset attributes are initialized with the values from the\n
    \  parent dataset in the \"/byowner/\" hierarchy.  In the case of the\n   \"dataset.inherit\"
    attribute, the appropriate hierarchy component is\n   added.  For example, given
    the following entry (note that \\t refers\n   to the US-ASCII horizontal tab character):\n
    \  entry path        \"/byowner/user/joe/\"\n   dataset.acl       (\"joe\\txrwia\"
    \"fred\\txr\")\n   dataset.inherit   \"/byowner/site\"\n   If a new dataset class
    \"/byowner/user/joe/new\" is created, it will\n   have the following dataset attributes:\n
    \  entry path        \"/byowner/user/joe/new/\"\n   dataset.acl       (\"joe\\txrwia\"
    \"fred\\txr\")\n   dataset.inherit   \"/byowner/site/new\"\n   Note that the dataset
    \"/byowner/user/joe/new/\" is equivalent to\n   \"/new/user/joe/\".\n"
  title: 5.3.     Dataset Creation
- contents:
  - "5.4.     Dataset Class Capabilities\n   Certain dataset classes or dataset class
    features may only be useful\n   if there is an active updating client or integrated
    server support\n   for the feature.  The dataset class \"capability\" is reserved
    to allow\n   clients or servers to advertise such features.  The \"entry\" attribute\n
    \  within this dataset class is the name of the dataset class whose\n   features
    are being described.  The attributes are prefixed with\n   \"capability.<dataset-class>.\"
    and are defined by the appropriate\n   dataset class specification.\n   Since
    it is possible for an unprivileged user to run an active client\n   for himself,
    a per-user capability dataset is useful.  The dataset\n   \"/capability/~/\" holds
    information about all features available to\n   the user (via inheritance), and
    the dataset \"/capability/site/\" holds\n   information about all features supported
    by the site.\n"
  title: 5.4.     Dataset Class Capabilities
- contents:
  - "5.5.     Dataset Quotas\n   Management and scope of quotas is implementation
    dependent.  Clients\n   can check the applicable quota limit and usage (in bytes)
    with the\n   GETQUOTA command.  Servers can notify the client of a low quota\n
    \  situation with the QUOTA untagged response.\n"
  title: 5.5.     Dataset Quotas
- contents:
  - "6.       Command and Response Specifications\n   ACAP commands and responses
    are described in this section.  Commands\n   are organized first by the state
    in which the command is permitted,\n   then by a general category of command type.\n
    \  Command arguments, identified by \"Arguments:\" in the command\n   descriptions
    below, are described by function, not by syntax.  The\n   precise syntax of command
    arguments is described in the Formal Syntax\n   section.\n   Some commands cause
    specific server data to be returned; these are\n   identified by \"Data:\" in
    the command descriptions below.  See the\n   response descriptions in the Responses
    section for information on\n   these responses, and the Formal Syntax section
    for the precise syntax\n   of these responses.  It is possible for server data
    to be transmitted\n   as a result of any command; thus, commands that do not specifically\n
    \  require server data specify \"no specific data for this command\"\n   instead
    of \"none\".\n   The \"Result:\" in the command description refers to the possible\n
    \  tagged status responses to a command, and any special interpretation\n   of
    these status responses.\n"
  title: 6.       Command and Response Specifications
- contents:
  - "6.1.     Initial Connection\n   Upon session startup, the server sends one of
    two untagged responses:\n   ACAP or BYE.  The untagged BYE response is described
    in section\n   6.2.8.\n"
  title: 6.1.     Initial Connection
- contents:
  - "6.1.1.   ACAP Untagged Response\n   Data:       capability list\n      The untagged
    ACAP response indicates the session is ready to\n      accept commands and contains
    a space-separated listing of\n      capabilities that the server supports.  Each
    capability is\n      represented by a list containing the capability name optionally\n
    \     followed by capability specific string arguments.\n      ACAP capability
    names MUST be registered with IANA according to\n      the rules in section 7.1.\n
    \     Client implementations SHOULD NOT require any capability name\n      beyond
    those defined in this specification, and MUST tolerate any\n      unknown capability
    names.  A client implementation MAY be\n      configurable to require SASL mechanisms
    other than CRAM-MD5\n      [CRAM-MD5] for site security policy reasons.\n      The
    following initial capabilities are defined:\n      CONTEXTLIMIT\n            The
    CONTEXTLIMIT capability has one argument which is a\n            number describing
    the maximum number of contexts the server\n            supports per connection.
    \ The number 0 indicates the server\n            has no limit, otherwise this
    number MUST be greater than\n            100.\n      IMPLEMENTATION\n            The
    IMPLEMENTATION capability has one argument which is a\n            string describing
    the server implementation.  ACAP clients\n            MUST NOT alter their behavior
    based on this value.  It is\n            intended primarily for debugging purposes.\n
    \     SASL  The SASL capability includes a list of the authentication\n            mechanisms
    supported by the server.  See section 6.3.1.\n   Example:    S: * ACAP (IMPLEMENTATION
    \"ACME v3.5\")\n                         (SASL \"CRAM-MD5\") (CONTEXTLIMIT \"200\")\n"
  title: 6.1.1.   ACAP Untagged Response
- contents:
  - "6.2.     Any State\n   The following commands and responses are valid in any
    state.\n"
  title: 6.2.     Any State
- contents:
  - "6.2.1.   NOOP Command\n   Arguments:  none\n   Data:       no specific data for
    this command (but see below)\n   Result:     OK - noop completed\n               BAD
    - command unknown or arguments invalid\n      The NOOP command always succeeds.
    \ It does nothing.  It can be\n      used to reset any inactivity auto-logout
    timer on the server.\n   Example:    C: a002 NOOP\n               S: a002 OK \"NOOP
    completed\"\n"
  title: 6.2.1.   NOOP Command
- contents:
  - "6.2.2.   LANG Command\n   Arguments:  list of language preferences\n   Data:
    \      intermediate response: LANG\n   Result:     OK - lang completed\n               NO
    - no matching language available\n               BAD - command unknown or arguments
    invalid\n      One or more arguments are supplied to indicate the client's\n      preferred
    languages [LANG-TAGS] for error messages.  The server\n      will match each client
    preference in order against its internal\n      table of available error string
    languages.  For a client\n      preference to match a server language, the client's
    language tag\n      MUST be a prefix of the server's tag and match up to a \"-\"
    or the\n      end of string.  If a match is found, the server returns an\n      intermediate
    LANG response and an OK response.  The LANG response\n      indicates the actual
    language selected and appropriate comparators\n      for use with the languages
    listed in the LANG command.\n      If no LANG command is issued, all error text
    strings MUST be in\n      the registered language \"i-default\" [CHARSET-LANG-POLICY],\n
    \     intended for an international audience.\n   Example:    C: A003 LANG \"fr-ca\"
    \"fr\" \"en-ca\" \"en-uk\"\n               S: A003 LANG \"fr-ca\" \"i;octet\"
    \"i;ascii-numeric\"\n                       \"i;ascii-casemap\" \"en;primary\"
    \"fr;primary\"\n               S: A003 OK \"Bonjour\"\n"
  title: 6.2.2.   LANG Command
- contents:
  - "6.2.3.   LANG Intermediate Response\n   Data:       language for error responses\n
    \              appropriate comparators\n      The LANG response indicates the
    language which will be used for\n      error responses and the comparators which
    are appropriate for the\n      languages listed in the LANG command.  The comparators
    SHOULD be\n      in approximate order from most efficient (usually \"i;octet\")
    to\n      most appropriate for human text in the preferred language.\n"
  title: 6.2.3.   LANG Intermediate Response
- contents:
  - "6.2.4.   LOGOUT Command\n   Arguments:  none\n   Data:       mandatory untagged
    response: BYE\n   Result:     OK - logout completed\n               BAD - command
    unknown or arguments invalid\n      The LOGOUT command informs the server that
    the client is done with\n      the session.  The server must send a BYE untagged
    response before\n      the (tagged) OK response, and then close the network connection.\n
    \  Example:    C: A023 LOGOUT\n               S: * BYE \"ACAP Server logging out\"\n
    \              S: A023 OK \"LOGOUT completed\"\n               (Server and client
    then close the connection)\n"
  title: 6.2.4.   LOGOUT Command
- contents:
  - "6.2.5.   OK Response\n   Data:       optional response code\n               human-readable
    text\n      The OK response indicates an information message from the server.\n
    \     When tagged, it indicates successful completion of the associated\n      command.
    \ The human-readable text may be presented to the user as\n      an information
    message.  The untagged form indicates an\n      information-only message; the
    nature of the information MAY be\n      indicated by a response code.\n   Example:
    \   S: * OK \"Master ACAP server is back up\"\n"
  title: 6.2.5.   OK Response
- contents:
  - "6.2.6.   NO Response\n   Data:       optional response code\n               human-readable
    text\n      The NO response indicates an operational error message from the\n
    \     server.  When tagged, it indicates unsuccessful completion of the\n      associated
    command.  The untagged form indicates a warning; the\n      command may still
    complete successfully.  The human-readable text\n      describes the condition.\n
    \  Example:    C: A010 SEARCH \"/addressbook/\" DEPTH 3 RETURN (\"*\")\n                       EQUAL
    \"entry\" \"+i;octet\" \"bozo\"\n               S: * NO \"Master ACAP server is
    down, your data may\n                        be out of date.\"\n               S:
    A010 OK \"search done\"\n                  ...\n               C: A222 STORE (\"/folder/site/comp.mail.misc\"\n
    \                             \"folder.creation-time\" \"19951206103412\")\n               S:
    A222 NO (PERMISSION (\"/folder/site/\")) \"Permission\n               denied\"\n"
  title: 6.2.6.   NO Response
- contents:
  - "6.2.7.   BAD Response\n   Data:       optional response code\n               human-readable
    text\n      The BAD response indicates an error message from the server.  When\n
    \     tagged, it reports a protocol-level error in the client's command;\n      the
    tag indicates the command that caused the error.  The untagged\n      form indicates
    a protocol-level error for which the associated\n      command can not be determined;
    it may also indicate an internal\n      server failure.  The human-readable text
    describes the condition.\n   Example:    C: ...empty line...\n               S:
    * BAD \"Empty command line\"\n               C: A443 BLURDYBLOOP\n               S:
    A443 BAD \"Unknown command\"\n               C: A444 NOOP Hello\n               S:
    A444 BAD \"invalid arguments\"\n"
  title: 6.2.7.   BAD Response
- contents:
  - "6.2.8.   BYE Untagged Response\n   Data:       optional response code\n               human-readable
    text\n      The untagged BYE response indicates that the server is about to\n
    \     close the connection.  The human-readable text may be displayed to\n      the
    user in a status report by the client.  The BYE response may\n      be sent as
    part of a normal logout sequence, or as a panic\n      shutdown announcement by
    the server.  It is also used by some\n      server implementations as an announcement
    of an inactivity auto-\n      logout.\n      This response is also used as one
    of two possible greetings at\n      session startup.  It indicates that the server
    is not willing to\n      accept a session from this client.\n   Example:    S:
    * BYE \"Auto-logout; idle for too long\"\n"
  title: 6.2.8.   BYE Untagged Response
- contents:
  - "6.2.9.   ALERT Untagged Response\n   Data:       optional response code\n               human-readable
    text\n      The human-readable text contains a special human generated alert\n
    \     message that MUST be presented to the user in a fashion that calls\n      the
    user's attention to the message.  This is intended to be used\n      for vital
    messages from the server administrator to the user, such\n      as a warning that
    the server will soon be shut down for\n      maintenance.\n   Example:    S: *
    ALERT \"This ACAP server will be shut down in\n                           10 minutes
    for system maintenance.\"\n"
  title: 6.2.9.   ALERT Untagged Response
- contents:
  - "6.3.     Non-Authenticated State\n   In non-authenticated state, the AUTHENTICATE
    command establishes\n   authentication and enters authenticated state.  The AUTHENTICATE\n
    \  command provides a general mechanism for a variety of authentication\n   techniques.\n
    \  Server implementations may allow non-authenticated access to certain\n   information
    by supporting the SASL ANONYMOUS [SASL-ANON] mechanism.\n   Once authenticated
    (including as anonymous), it is not possible to\n   re-enter non-authenticated
    state.\n   Only the any-state commands (NOOP, LANG and LOGOUT) and the\n   AUTHENTICATE
    command are valid in non-authenticated state.\n"
  title: 6.3.     Non-Authenticated State
- contents:
  - "6.3.1.   AUTHENTICATE Command\n   Arguments:  SASL mechanism name\n               optional
    initial response\n   Data:       continuation data may be requested\n   Result:
    \    OK - authenticate completed, now in authenticated state\n               NO
    - authenticate failure: unsupported authentication\n                    mechanism,
    credentials rejected\n               BAD - command unknown or arguments invalid,\n
    \                   authentication exchange cancelled\n      The AUTHENTICATE
    command indicates a SASL [SASL] authentication\n      mechanism to the server.
    \ If the server supports the requested\n      authentication mechanism, it performs
    an authentication protocol\n      exchange to authenticate and identify the user.
    \ Optionally, it\n      also negotiates a security layer for subsequent protocol\n
    \     interactions.  If the requested authentication mechanism is not\n      supported,
    the server rejects the AUTHENTICATE command by sending\n      a tagged NO response.\n
    \     The authentication protocol exchange consists of a series of\n      server
    challenges and client answers that are specific to the\n      authentication mechanism.
    \ A server challenge consists of a\n      command continuation request with the
    \"+\" token followed by a\n      string.  The client answer consists of a line
    consisting of a\n      string.  If the client wishes to cancel an authentication\n
    \     exchange, it should issue a line with a single unquoted \"*\".  If\n      the
    server receives such an answer, it must reject the\n      AUTHENTICATE command
    by sending a tagged BAD response.\n      The optional initial-response argument
    to the AUTHENTICATE command\n      is used to save a round trip when using authentication
    mechanisms\n      that are defined to send no data in the initial challenge.  When\n
    \     the initial-response argument is used with such a mechanism, the\n      initial
    empty challenge is not sent to the client and the server\n      uses the data
    in the initial-response argument as if it were sent\n      in response to the
    empty challenge.  If the initial-response\n      argument to the AUTHENTICATE
    command is used with a mechanism that\n      sends data in the initial challenge,
    the server rejects the\n      AUTHENTICATE command by sending a tagged NO response.\n
    \     The service name specified by this protocol's profile of SASL is\n      \"acap\".\n
    \     If a security layer is negotiated through the SASL authentication\n      exchange,
    it takes effect immediately following the CRLF that\n      concludes the authentication
    exchange for the client, and the CRLF\n      of the tagged OK response for the
    server.\n      All ACAP implementations MUST implement the CRAM-MD5 SASL\n      mechanism
    [CRAM-MD5], although they MAY offer a configuration\n      option to disable it
    if site security policy dictates.  The\n      example below is the same example
    described in the CRAM-MD5\n      specification.\n      If an AUTHENTICATE command
    fails with a NO response, the client\n      may try another authentication mechanism
    by issuing another\n      AUTHENTICATE command.  In other words, the client may
    request\n      authentication types in decreasing order of preference.\n   Example:
    \   S: * ACAP (IMPLEMENTATION \"Blorfysoft v3.5\")\n                         (SASL
    \"CRAM-MD5\" \"KERBEROS_V4\")\n               C: A001 AUTHENTICATE \"CRAM-MD5\"\n
    \              S: + \"<1896.697170952@postoffice.reston.mci.net>\"\n               C:
    \"tim b913a602c7eda7a495b4e6e7334d3890\"\n               S: A001 OK \"CRAM-MD5
    authentication successful\"\n"
  title: 6.3.1.   AUTHENTICATE Command
- contents:
  - "6.4.     Searching\n   This section describes the SEARCH command, for retrieving
    data from\n   datasets.\n"
  title: 6.4.     Searching
- contents:
  - "6.4.1.   SEARCH Command\n   Arguments:  dataset or context name\n               optional
    list of modifiers\n               search criteria\n   Data:       intermediate
    responses: ENTRY, MODTIME, REFER\n               untagged responses: ADDTO, REMOVEFROM,
    CHANGE, MODTIME\n   Result:     OK - search completed\n               NO - search
    failure: can't perform search\n               BAD - command unknown or arguments
    invalid\n      The SEARCH command identifies a subset of entries in a dataset
    and\n      returns information on that subset to the client.  Inherited\n      entries
    and attributes are included in the search unless the\n      NOINHERIT search modifier
    is included or the user does not have\n      permission to read the attributes
    in the base dataset.\n      The first argument to SEARCH identifies what is to
    be searched.\n      If the string begins with a slash (\"/\"), it is the name
    of a\n      dataset to be searched, otherwise it is a name of a context that\n
    \     was created by a SEARCH command given previously in the session.\n      A
    successful SEARCH command MAY result in intermediate ENTRY\n      responses and
    MUST result in a MODTIME intermediate response.\n      Following that are zero
    or more modifiers to the search.  Each\n      modifier may be specified at most
    once.  The defined modifiers\n      are:\n      DEPTH number\n           The SEARCH
    command will traverse the dataset tree up to the\n           specified depth.
    \ ENTRY responses will include the full path\n           to the entry.  A value
    of \"0\" indicates that the search\n           should traverse the entire tree.
    \ A value of \"1\" is the\n           default and indicates only the specified
    dataset should be\n           searched.  If a dataset is traversed which is not
    located on\n           the current server, then a REFER intermediate response
    is\n           returned for that subtree and the search continues.\n      HARDLIMIT
    number\n           If the SEARCH command would result in more than number\n           entries,
    the SEARCH fails with a NO completion result with a\n           WAYTOOMANY response
    code.\n      LIMIT number number\n           Limits the number of intermediate
    ENTRY responses that the\n           search may generate.  The first numeric argument
    specifies\n           the limit, the second number specifies the number of entries\n
    \          to return if the number of matches exceeds the limit.  If the\n           limit
    is exceeded, the SEARCH command still succeeds,\n           returning the total
    number of matches in a TOOMANY response\n           code in the tagged OK response.\n
    \     MAKECONTEXT [ENUMERATE] [NOTIFY] context\n           Causes the SEARCH command
    to create a context with the name\n           given in the argument to refer to
    the matching entries.  If\n           the SEARCH is successful, the context name
    may then be given\n           as an argument to subsequent SEARCH commands to
    search the\n           set of matching entries.  If a context with the specified\n
    \          name already exists, it is first freed.  If a new context may\n           not
    be created due to the server's limit on the number of\n           existing contexts,
    the command fails, returning a\n           TRYFREECONTEXT response code in the
    NO completion response.\n           The optional \"ENUMERATE\" and \"NOTIFY\"
    arguments may be\n           included to request enumeration of the context (for
    virtual\n           scroll bars) or change notifications for the context.  If\n
    \          \"NOTIFY\" is not requested, the context represents a snapshot\n           of
    the entries at the time the SEARCH was issued.\n           ENUMERATE requests
    that the contents of the context be\n           ordered according to the SORT
    modifier and that sequential\n           numbers, starting with one, be assigned
    to the entries in the\n           context.  This permits the RANGE modifier to
    be used to fetch\n           portions of the ordered context.\n           NOTIFY
    requests that the server send untagged ADDTO,\n           REMOVEFROM, CHANGE,
    and MODTIME responses while the context\n           created by this SEARCH command
    exists.  The server MAY issue\n           untagged ADDTO, REMOVEFROM, CHANGE and
    MODTIME notifications\n           for a context at any time between the issuing
    of the SEARCH\n           command with MAKECONTEXT NOTIFY and the completion of
    a\n           FREECONTEXT command for the context.  Notifications are only\n           issued
    for changes which occur after the server receives the\n           SEARCH command
    which created the context.  After issuing a\n           sequence of ADDTO, REMOVEFROM
    or CHANGE notifications, the\n           server MUST issue an untagged MODTIME
    notification indicating\n           that the client has all updates to the entries
    in the context\n           up to and including the given modtime value.  Servers
    are\n           permitted a reasonable delay to batch change notifications\n           before
    sending them to the client.\n           The position arguments of the ADDTO, REMOVEFROM
    and CHANGE\n           notifications are 0 if ENUMERATE is not requested.\n      NOINHERIT\n
    \          This causes the SEARCH command to operate without\n           inheritance.
    \ It can be used to tell which values are\n           explicit overrides.  If
    MAKECONTEXT is also specified, the\n           created context is also not affected
    by inheritance.\n      RETURN (metadata...)\n           Specifies what is to be
    returned in intermediate ENTRY\n           responses.  If this modifier is not
    specified, no\n           intermediate ENTRY responses are returned.\n           Inside
    the parentheses is an optional list of attributes,\n           each optionally
    followed by a parenthesized list of metadata.\n           If the parenthesized
    list of metadata is not specified, it\n           defaults to \"(value)\".\n           An
    attribute name with a trailing \"*\" requests all attributes\n           with
    that prefix.  A \"*\" by itself requests all attributes.\n           If the parenthesized
    list of metadata is not specified for an\n           attribute with a trailing
    \"*\", it defaults to \"(attribute\n           value)\".  Results matching such
    an attribute pattern are\n           grouped in parentheses.\n           Following
    the last intermediate ENTRY response, the server\n           returns a single
    intermediate MODTIME response.\n      SORT (attribute comparator ...)\n           Specifies
    the order in which any resulting ENTRY replies are\n           to be returned
    to the client.  The SORT modifier takes as an\n           argument a parenthesized
    list of one or more\n           attribute/comparator pairs.  Attribute lists the
    attribute to\n           sort on, comparator specifies the name of the collation
    rule\n           to apply to the values of the attribute.  Successive\n           attribute/comparator
    pairs are used to order two entries only\n           when all preceding pairs
    indicate the two entries collate the\n           same.\n           If the SORT
    modifier is used in conjunction with the\n           MAKECONTEXT modifier, the
    SORT modifier specifies the\n           ordering of entries in the created context.\n
    \          If no SORT modifier is specified, or none of the\n           attribute/comparator
    pairs indicates an order for the two\n           entries, the server uses the
    order of the entries that exists\n           in the context or dataset being searched.\n
    \     Following the modifiers is the search criteria.  Searching\n      criteria
    consist of one or more search keys.  Search keys may be\n      combined using
    the AND, and OR search keys.  For example, the\n      criteria (the newline is
    for readability and not part of the\n      criteria):\n          AND COMPARE \"modtime\"
    \"+i;octet\" \"19951206103400\"\n              COMPARE \"modtime\" \"-i;octet\"
    \"19960112000000\"\n      refers to all entries modified between 10:34 December
    6 1995 and\n      midnight January 12, 1996 UTC.\n      The currently defined
    search keys are as follows.\n      ALL  This matches all entries.\n      AND search-key1
    search-key2\n           Entries that match both search keys.\n      COMPARE attribute
    comparator value\n           Entries for which the value of the specified attribute\n
    \          collates using the specified comparator the same or later\n           than
    the specified value.\n      COMPARESTRICT attribute comparator value\n           Entries
    for which the specified attribute collates using the\n           specified comparator
    later than the specified value.\n      EQUAL attribute comparator value\n           Entries
    for which the value of the attribute is equal to the\n           specified value
    using the specified comparator.\n      NOT search-key\n           Entries that
    do not match the specified search key.\n      OR search-key1 search-key2\n           Entries
    that match either search key.\n      PREFIX attribute comparator value\n           Entries
    which begin with the specified value using the\n           specified comparator.
    \ If the specified comparator doesn't\n           support substring matching,
    a BAD response is returned.\n      RANGE start end time\n           Entries which
    are within the specified range of the\n           enumerated context's ordering.
    \ The lowest-ordered entry in\n           the context is assigned number one,
    the next lowest entry is\n           assigned number two, and so on.  The numeric
    arguments\n           specify the lowest and highest numbers to match. The time\n
    \          specifies that the client has processed notifications for the\n           context
    up to the specified time.  If the context has been\n           modified since
    then, the server MUST either return a NO with\n           a MODIFIED response
    code, or return the results that the\n           SEARCH would have returned if
    none of the changes since that\n           time had been made.\n           RANGE
    is only permitted on enumerated contexts.  If RANGE is\n           used with a
    dataset or non-enumerated context, the server\n           MUST return a BAD response.\n
    \     SUBSTRING attribute comparator value\n           Entries which contain the
    specified value, using the\n           specified comparator.  If the specified
    comparator doesn't\n           support substring matching, a BAD response is returned.\n"
  title: 6.4.1.   SEARCH Command
- contents:
  - "6.4.2.   ENTRY Intermediate Response\n   Data:       entry name\n               entry
    data\n      The ENTRY intermediate response occurs as a result of a SEARCH or\n
    \     STORE command. This is the means by which dataset entries are\n      returned
    to the client.\n      The ENTRY response begins with the entry name, if a SEARCH
    command\n      without the DEPTH modifier was issued, or the entry path in other\n
    \     cases.  This is followed by a set of zero or more items, one for\n      each
    metadata item in the RETURN search modifier.  Results\n      matching an attribute
    pattern or returning multiple metadata items\n      are grouped in parentheses.\n"
  title: 6.4.2.   ENTRY Intermediate Response
- contents:
  - "6.4.3.   MODTIME Intermediate Response\n   Data:       modtime value\n      The
    MODTIME intermediate response occurs as a result of a SEARCH\n      command.  It
    indicates that the just created context or the\n      previously returned ENTRY
    responses include all updates to the\n      returned entries up to and including
    the modtime value in the\n      argument.\n"
  title: 6.4.3.   MODTIME Intermediate Response
- contents:
  - "6.4.4.   REFER Intermediate Response\n   Data:       dataset path\n               relative
    ACAP URLs\n      The REFER intermediate response occurs as a result of a\n      multi-level
    SEARCH where one of the levels is located on a\n      different server.  The response
    indicates the dataset which is not\n      located on the current server and one
    or more relative ACAP URLs\n      for where that dataset may be found.\n"
  title: 6.4.4.   REFER Intermediate Response
- contents:
  - "6.4.5.   Search Examples\n   Here are some SEARCH command exchanges between the
    client and server:\n   C: A046 SEARCH \"/addressbook/\" DEPTH 3 RETURN (\"addressbook.Alias\"\n
    \          \"addressbook.Email\" \"addressbook.List\") OR NOT EQUAL\n           \"addressbook.Email\"
    \"i;octet\" NIL NOT EQUAL\n           \"addressbook.List\" \"i;octet\" NIL\n   S:
    A046 ENTRY \"/addressbook/user/joe/A0345\" \"fred\"\n           \"fred@stone.org\"
    NIL\n   S: A046 ENTRY \"/addressbook/user/fred/A0537\" \"joe\" \"joe@stone.org\"\n
    \          NIL\n   S: A046 ENTRY \"/addressbook/group/Dinosaur Operators/A423\"\n
    \          \"saurians\" NIL \"1\"\n   S: A046 MODTIME \"19970728105252\"\n   S:
    A046 OK \"SEARCH completed\"\n   C: A047 SEARCH \"/addressbook/user/fred/\" RETURN
    (\"*\") EQUAL \"entry\"\n           \"i;octet\" \"A0345\"\n   S: A047 ENTRY \"A0345\"
    ((\"modtime\" \"19970728102226\")\n           (\"addressbook.Alias\" \"fred\")
    (\"addressbook.Email\"\n           \"fred@stone.org\") (\"addressbook.CommonName\"\n
    \          \"Fred Flintstone\") (\"addressbook.Surname\" \"Flintstone\")\n           (\"addressbook.GivenName\"
    \"Fred\"))\n   S: A047 MODTIME \"19970728105258\"\n   S: A047 OK \"SEARCH completed\"\n
    \  C: A048 SEARCH \"/options/~/vendor.example/\" RETURN\n           (\"option.value\"(\"size\"
    \"value\" \"myrights\"))\n           SORT (\"entry\" \"i;octet\") COMPARE \"modtime\"
    \"i;octet\"\n           \"19970727123225\"\n   S: A048 ENTRY \"blurdybloop\" (5
    \"ghoti\" \"rwia\")\n   S: A048 ENTRY \"buckybits\" (2 \"10\" \"rwia\")\n   S:
    A048 ENTRY \"windowSize\" (7 \"100x100\" \"rwia\")\n   S: A048 MODTIME \"19970728105304\"\n
    \  S: A048 OK \"SEARCH completed\"\n   C: A049 SEARCH \"/addressbook/~/public\"
    RETURN (\"addressbook.Alias\"\n           \"addressbook.Email\") MAKECONTEXT ENUMERATE
    \"blob\" LIMIT 100 1\n           SORT (\"addressbook.Alias\" \"i;octet\") NOT
    EQUAL\n           \"addressbook.Email\" NIL\n   S: A049 ENTRY \"A437\" \"aaguy\"
    \"aaguy@stone.org\"\n   S: A049 MODTIME \"19970728105308\"\n   S: A049 OK (TOOMANY
    347) \"Context 'blob' created\"\n   C: A050 SEARCH \"blob\" RANGE 2 2 \"19970728105308\"
    ALL\n   S: A050 ENTRY \"A238\" \"abguy\" \"abguy@stone.org\"\n   S: A050 MODTIME
    \"19970728105310\"\n   S: A050 OK \"SEARCH Completed\"\n"
  title: 6.4.5.   Search Examples
- contents:
  - "6.5.     Contexts\n   The following commands use contexts created by a SEARCH
    command with\n   a MAKECONTEXT modifier.\n"
  title: 6.5.     Contexts
- contents:
  - "6.5.1.   FREECONTEXT Command\n   Arguments:  context name\n   Data:       no
    specific data for this command\n   Result:     OK - freecontext completed\n               NO
    - freecontext failure: no such context\n               BAD - command unknown or
    arguments invalid\n      The FREECONTEXT command causes the server to free all
    state\n      associated with the named context.  The context may no longer be\n
    \     searched and the server will no longer issue any untagged\n      responses
    for the context.  The context is no longer counted\n      against the server's
    limit on the number of contexts.\n   Example:    C: A683 FREECONTEXT \"blurdybloop\"\n
    \              S: A683 OK \"Freecontext completed\"\n"
  title: 6.5.1.   FREECONTEXT Command
- contents:
  - "6.5.2.   UPDATECONTEXT Command\n   Arguments:  list of context names\n   Data:
    \      untagged responses: ADDTO REMOVEFROM CHANGE MODTIME\n   Result:     OK
    - Updatecontext completed: all updates completed\n               NO - Updatecontext
    failed: no such context\n                                          not a notify
    context\n               BAD - command unknown or arguments invalid\n      The
    UPDATECONTEXT command causes the server to ensure that the\n      client is notified
    of all changes known to the server for the\n      contexts listed as arguments
    up to the current time.  The contexts\n      listed in the arguments must have
    been previously given to a\n      successful SEARCH command with a MAKECONTEXT
    NOTIFY modifier.  A\n      MODTIME untagged response MUST be returned if any read-write\n
    \     metadata in the context changed since the last MODTIME for that\n      context.
    \ This includes metadata which is not listed in the RETURN\n      modifier for
    the context.\n      While a server may issue untagged ADDTO, REMOVEFROM, CHANGE,
    and\n      MODTIME at any time, the UPDATECONTEXT command is used to \"prod\"\n
    \     the server to send any notifications it has not sent yet.\n      The UPDATECONTEXT
    command SHOULD NOT be used to poll for updates.\n   Example:    C: Z4S9 UPDATECONTEXT
    \"blurdybloop\" \"blarfl\"\n               S: Z4S9 OK \"client has been notified
    of all changes\"\n"
  title: 6.5.2.   UPDATECONTEXT Command
- contents:
  - "6.5.3.   ADDTO Untagged Response\n   Data:       context name\n               entry
    name\n               position\n               metadata list\n      The untagged
    ADDTO response informs the client that an entry has\n      been added to a context.
    \ The response includes the position\n      number of the added entry (the first
    entry in the context is\n      numbered 1) and those metadata contained in the
    entry which match\n      the RETURN statement when the context was created.\n
    \     For enumerated contexts, the ADDTO response implicitly adds one to\n      the
    position of all members of the context which had position\n      numbers that
    were greater than or equal to the ADDTO position\n      number.  For non-enumerated
    contexts, the position field is always\n      0.\n   Example:    S: * ADDTO \"blurdybloop\"
    \"fred\" 15\n                    (\"addressbook.Email\" \"fred@stone.org\")\n"
  title: 6.5.3.   ADDTO Untagged Response
- contents:
  - "6.5.4.   REMOVEFROM Untagged Response\n   Data:       context name\n               entry
    name\n               old position\n      The untagged REMOVEFROM response informs
    the client that an entry\n      has been removed from a context.  The response
    includes the\n      position number that the removed entry used to have (the first\n
    \     entry in the context is numbered 1).\n      For enumerated contexts, the
    REMOVEFROM response implicitly\n      subtracts one from the position numbers
    of all members of the\n      context which had position numbers greater than the
    REMOVEFROM\n      position number.  For non-enumerated contexts, the position
    field\n      is always 0.\n   Example:    S: * REMOVEFROM \"blurdybloop\" \"fred\"
    15\n"
  title: 6.5.4.   REMOVEFROM Untagged Response
- contents:
  - "6.5.5.   CHANGE Untagged Response\n   Data:       context name\n               entry
    name\n               old position\n               new position\n               metadata
    list\n      The untagged CHANGE response informs the client that an entry in a\n
    \     context has either changed position in the context or has changed\n      the
    values of one or more of the attributes specified in the\n      RETURN modifier
    when the context was created.\n      The response includes the previous and current
    position numbers of\n      the entry (which are 0 if ENUMERATE was not specified
    on the\n      context) and the attribute metadata requested in the RETURN\n      modifier
    when the context was created.\n      For enumerated contexts, the CHANGE response
    implicitly changes\n      the position numbers of all entries which had position
    numbers\n      between the old and new position.  If old position is less than\n
    \     new position, than one is subtracted from all entries which had\n      position
    numbers in that range.  Otherwise one is added to all\n      entries which had
    position numbers in that range.  If the old\n      position and new position are
    the same, then no implicit position\n      renumbering occurs.\n      CHANGE responses
    are not issued for entries which have changed\n      position implicitly due to
    another ADDTO, REMOVEFROM or CHANGE\n      response.\n   Example:    S: * CHANGE
    \"blurdybloop\" \"fred\" 15 10\n                    (\"addressbook.Email\" \"fred@stone.org\")\n"
  title: 6.5.5.   CHANGE Untagged Response
- contents:
  - "6.5.6.   MODTIME Untagged Response\n   Data:       context name\n               modtime
    value\n      The untagged MODTIME response informs the client that it has\n      received
    all updates to entries in the context which have modtime\n      values less than
    or equal to the modtime value in the argument.\n   Example:    S: * MODTIME mycontext
    \"19970320162338\"\n"
  title: 6.5.6.   MODTIME Untagged Response
- contents:
  - "6.6.     Dataset modification\n   The following commands and responses handle
    modification of datasets.\n"
  title: 6.6.     Dataset modification
- contents:
  - "6.6.1.   STORE Command\n   Arguments:  entry store list\n   Data:       intermediate
    responses: ENTRY\n   Result:     OK - store completed\n               NO - store
    failure: can't store that name\n                    UNCHANGEDSINCE specified and
    entry changed\n               BAD - command unknown or arguments invalid\n                     invalid
    UTF-8 syntax in attribute name\n      Creates, modifies, or deletes the named
    entries in the named\n      datasets.  The values of metadata not specified in
    the command are\n      not changed.  Setting the \"value\" metadata of an attribute
    to NIL\n      removes that attribute from the entry.  Setting the \"value\" of
    the\n      \"entry\" attribute to NIL removes that entry from the dataset and\n
    \     cancels inheritance for the entire entry.  Setting the \"value\" of\n      the
    \"entry\" attribute to DEFAULT removes that entry from the\n      inheriting dataset
    and reverts the entry and its attributes to\n      inherited values, if any.  Changing
    the value of the \"entry\"\n      attribute renames the entry.\n      Storing
    DEFAULT to the \"value\" metadata of an attribute is\n      equivalent to storing
    NIL, except that inheritance is enabled for\n      that attribute.  If a non-NIL
    value is inherited then an ENTRY\n      intermediate response is generated to
    notify the client of the\n      this change.  The ENTRY response includes the
    entry-path and the\n      attribute name and value metadata for each attribute
    which\n      reverted to a non-NIL inherited setting.\n      Storing NIL to the
    \"value\" metadata of an attribute MAY be treated\n      equivalent to storing
    DEFAULT to that \"value\" if there is a NIL\n      value in the base dataset.\n
    \     The STORE command is followed by one or more entry store lists.\n      Each
    entry store list begins with an entry path followed by STORE\n      modifiers,
    followed by zero or more attribute store items.  Each\n      attribute store item
    is made up of the attribute name followed by\n      NIL (to remove the attribute's
    value), DEFAULT (to revert the item\n      to any inherited value), a single value
    (to set the attribute's\n      single value), or a list of metadata items to modify.
    \ The\n      following STORE modifiers may be specified:\n      NOCREATE\n           By
    default, the server MUST create any datasets necessary to\n           store the
    entry, including multiple hierarchy levels.  If\n           NOCREATE is specified,
    the STORE command will fail with a\n           NOEXIST error unless the parent
    dataset already exists.\n      UNCHANGEDSINCE\n           If the \"modtime\" of
    the entry is later than the\n           unchangedsince time, then the store fails
    with a MODIFIED\n           response code.  Use of UNCHANGEDSINCE with a time
    of\n           \"00000101000000\" will always fail if the entry exists.\n           Clients
    writing to a shared dataset are encouraged to use\n           UNCHANGEDSINCE when
    modifying an existing entry.\n      The server MUST either make all the changes
    specified in a single\n      STORE command or make none of them.  If successful,
    the server\n      MUST update the \"modtime\" attribute for every entry which
    was\n      changed.\n      It is illegal to list any metadata item within an attribute
    twice,\n      any attribute within an entry twice or any entry path twice.  The\n
    \     server MUST return a BAD response if this happens.\n      The server MAY
    re-order the strings in a multi-value on STORE and\n      MAY remove duplicate
    strings.  However, SEARCH MUST return multi-\n      values and the associated
    size list metadata in a consistant\n      order.\n   Example:    C: A342 STORE
    (\"/addressbook/user/fred/ABC547\"\n                       \"addressbook.TelephoneNumber\"
    \"555-1234\"\n                       \"addressbook.CommonName\" \"Barney Rubble\"\n
    \                      \"addressbook.AlternateNames\" (\"value\"\n                       (\"Barnacus
    Rubble\" \"Coco Puffs Thief\"))\n                       \"addressbook.Email\"
    NIL)\n               S: A342 OK \"Store completed\"\n               C: A343 STORE
    (\"/addressbook/user/joe/ABD42\"\n                       UNCHANGEDSINCE \"19970320162338\"\n
    \                      \"user.joe.hair-length\" \"10 inches\")\n               S:
    A343 NO (MODIFIED) \"'ABD42' has been changed\n                       by somebody
    else.\"\n               C: A344 STORE (\"/addressbook/group/Developers/ACD54\"\n
    \                      \"entry\" NIL)\n               S: A344 OK \"Store completed\"\n
    \              C: A345 STORE (\"/option/~/common/SMTPserver\"\n                       \"option.value\"
    DEFAULT)\n               S: A345 ENTRY \"/option/~/common/SMTPserver\"\n                       \"option.value\"
    \"smtp.server.do.main\"\n               S: A345 OK \"Store completed\"\n               C:
    A347 STORE (\"/addressbook/~/\" \"dataset.inherit\"\n                       \"/addressbook/group/Developers\")\n
    \              S: A347 OK \"Store completed\"\n"
  title: 6.6.1.   STORE Command
- contents:
  - "6.6.2.   DELETEDSINCE Command\n   Arguments:  dataset name\n               time\n
    \  Data:       intermediate response: DELETED\n   Result:     OK - DELETEDSINCE
    completed\n               NO - DELETEDSINCE failure: can't read dataset\n                    date
    too far in the past\n               BAD - command unknown or arguments invalid\n
    \     The DELETEDSINCE command returns in intermediate DELETED replies\n      the
    names of entries that have been deleted from the named dataset\n      since the
    given time.\n      Servers may impose a limit on the number or age of deleted
    entry\n      names they keep track of.  If the server does not have information\n
    \     going back to the specified time, the command fails, returning a\n      TOOOLD
    response code in the tagged NO response.\n   Example:    C: Z4S9 DELETEDSINCE
    \"/folder/site/\" 19951205103412\n               S: Z4S9 DELETED \"blurdybloop\"\n
    \              S: Z4S9 DELETED \"anteaters\"\n               S: Z4S9 OK \"DELETEDSINCE
    completed\"\n               C: Z4U3 DELETEDSINCE \"/folder/site/\" 19951009040854\n
    \              S: Z4U3 NO (TOOOLD) \"Don't have that information\"\n"
  title: 6.6.2.   DELETEDSINCE Command
- contents:
  - "6.6.3.   DELETED Intermediate Response\n   Data:       entry name\n      The
    intermediate DELETED response occurs as a result of a\n      DELETEDSINCE command.
    It returns an entry that has been deleted\n      from the dataset specified in
    the DELETEDSINCE command.\n"
  title: 6.6.3.   DELETED Intermediate Response
- contents:
  - "6.7.     Access Control List Commands\n   The commands in this section are used
    to manage access control lists.\n"
  title: 6.7.     Access Control List Commands
- contents:
  - "6.7.1.   SETACL Command\n   Arguments:  acl object\n               authentication
    identifier\n               access rights\n   Data:       no specific data for
    this command\n   Result:     OK - setacl completed\n               NO - setacl
    failure: can't set acl\n               BAD - command unknown or arguments invalid\n
    \     The SETACL command changes the access control list on the\n      specified
    object so that the specified identifier is granted the\n      permissions enumerated
    in rights.  If the object did not\n      previously have an access control list,
    one is created.\n   Example:    C: A123 SETACL (\"/addressbook/~/public/\") \"anyone\"
    \"r\"\n               S: A123 OK \"Setacl complete\"\n               C: A124 SETACL
    (\"/folder/site/\") \"B1FF\" \"rwa\"\n               S: A124 NO (PERMISSION (\"/folder/site/\"))
    \"'B1FF' not\n                       permitted to modify access rights\n                       for
    '/folder/site/'\"\n"
  title: 6.7.1.   SETACL Command
- contents:
  - "6.7.2.   DELETEACL Command\n   Arguments:  acl object\n               optional
    authentication identifier\n   Data:       no specific data for this command\n
    \  Result:     OK - deleteacl completed\n               NO - deleteacl failure:
    can't delete acl\n               BAD - command unknown or arguments invalid\n
    \     If given the optional identifier argument, the DELETEACL command\n      removes
    any portion of the access control list on the specified\n      object for the
    specified identifier.\n      If not given the optional identifier argument, the
    DELETEACL\n      command removes the ACL from the object entirely, causing access\n
    \     to be controlled by a higher-level default ACL.  This form of the\n      DELETEACL
    command is not permitted on the default ACL for a\n      dataset and servers MUST
    return a BAD.\n   Example:    C: A223 DELETEACL (\"/addressbook/~/public\") \"anyone\"\n
    \              S: A223 OK \"Deleteacl complete\"\n               C: A224 DELETEACL
    (\"/folder/site\")\n               S: A224 BAD \"Can't delete ACL from dataset\"\n
    \              C: A225 DELETEACL (\"/addressbook/user/fred\"\n                       \"addressbook.Email\"
    \"barney\")\n               S: A225 OK \"Deleteacl complete\"\n"
  title: 6.7.2.   DELETEACL Command
- contents:
  - "6.7.3.   MYRIGHTS Command\n   Arguments:  acl object\n   Data:       intermediate
    responses: MYRIGHTS\n   Result:     OK - myrights completed\n               NO
    - myrights failure: can't get rights\n               BAD - command unknown or
    arguments invalid\n      The MYRIGHTS command returns the set of rights that the
    client has\n      to the given dataset or dataset attribute.\n   Example:    C:
    A003 MYRIGHTS (\"/folder/site\")\n               S: A003 MYRIGHTS \"r\"\n               S:
    A003 OK \"Myrights complete\"\n"
  title: 6.7.3.   MYRIGHTS Command
- contents:
  - "6.7.4.   MYRIGHTS Intermediate Response\n   Data:       rights\n      The MYRIGHTS
    response occurs as a result of a MYRIGHTS command.\n      The argument is the
    set of rights that the client has for the\n      object referred to in the MYRIGHTS
    command.\n"
  title: 6.7.4.   MYRIGHTS Intermediate Response
- contents:
  - "6.7.5.   LISTRIGHTS Command\n   Arguments:  acl object\n               authentication
    identifier\n   Data:       untagged responses: LISTRIGHTS\n   Result:     OK -
    listrights completed\n               NO - listrights failure: can't get rights
    list\n               BAD - command unknown or arguments invalid\n      The LISTRIGHTS
    command takes an object and an identifier and\n      returns information about
    what rights the current user may revoke\n      or grant to that identifier in
    the ACL for that object.\n   Example:    C: a001 LISTRIGHTS (\"/folder/~/\") \"smith\"\n
    \              S: a001 LISTRIGHTS \"xra\" \"w\" \"i\"\n               S: a001
    OK Listrights completed\n               C: a005 LISTRIGHTS (\"/folder/site/archive/imap\")
    \"anyone\"\n               S: a005 LISTRIGHTS \"\" \"x\" \"r\" \"w\" \"i\"\n               S:
    a005 OK Listrights completed\n"
  title: 6.7.5.   LISTRIGHTS Command
- contents:
  - "6.7.6.   LISTRIGHTS Intermediate Response\n   Data:       required rights\n               list
    of optional rights\n      The LISTRIGHTS response occurs as a result of a LISTRIGHTS\n
    \     command.  The first argument is a string containing the (possibly\n      empty)
    set of rights the identifier will always be granted on the\n      dataset or attribute.\n
    \     Following this are zero or more strings each containing a single\n      right
    which the current user may revoke or grant to the identifier\n      in the dataset
    or attribute.\n      The same right MUST NOT be listed more than once in the LISTRIGHTS\n
    \     response.\n"
  title: 6.7.6.   LISTRIGHTS Intermediate Response
- contents:
  - "6.8.     Quotas\n   The section defines the commands and responses relating to
    quotas.\n"
  title: 6.8.     Quotas
- contents:
  - "6.8.1.   GETQUOTA Command\n   Arguments:  dataset\n   Data:       untagged responses:
    QUOTA\n   Result:     OK - Quota information returned\n               NO - Quota
    failure: can't access resource limit\n                                   no resource
    limit\n               BAD - command unknown or arguments invalid\n      The GETQUOTA
    command takes the name of a dataset, and returns in\n      an untagged QUOTA response
    the name of the dataset, quota limit in\n      bytes that applies to that dataset
    and the quota usage within that\n      limit.  The scope of a quota limit is implementation
    dependent.\n   Example:    C: A043 GETQUOTA \"/option/user/fred/common\"\n               S:
    * QUOTA \"/option/user/fred/common\" 1048576 2475\n               S: A043 OK \"Getquota
    completed\"\n"
  title: 6.8.1.   GETQUOTA Command
- contents:
  - "6.8.3.   QUOTA Untagged Response\n   Data:       dataset\n               quota
    limit in bytes\n               amount of quota limit used\n               extension
    data\n      The QUOTA untagged response is generated as a result of a GETQUOTA\n
    \     command or MAY be generated by the server in response to a SEARCH\n      or
    STORE command to warn about high usage of a quota.  It includes\n      the name
    of the applicable dataset, the quota limit in bytes, the\n      quota usage and
    some optional extension data.  Clients MUST\n      tolerate the extension data
    as its use is reserved for a future\n      extension.\n"
  title: 6.8.3.   QUOTA Untagged Response
- contents:
  - "6.9.     Extensions\n   In order to simplify the process of extending the protocol,
    clients\n   MUST tolerate unknown server responses which meet the syntax of\n
    \  response-extend.  In addition, clients MUST tolerate unknown server\n   response
    codes which meet the syntax of resp-code-ext.  Availability\n   of new commands
    MUST be announced via a capability on the initial\n   greeting line and such commands
    SHOULD meet the syntax of\n   command-extend.\n   Servers MUST respond to unknown
    commands with a BAD command\n   completion result.  Servers MUST skip over non-synchronizing
    literals\n   contained in an unknown command.  This may be done by assuming the\n
    \  unknown command matches the command-extend syntax, or by reading a\n   line
    at a time and checking for the non-synchronizing literal syntax\n   at the end
    of the line.\n"
  title: 6.9.     Extensions
- contents:
  - "7.       Registration Procedures\n   ACAP's usefulness comes from providing a
    structured storage model for\n   all sorts of configuration data.  However, for
    its potential to be\n   achieved, it is important that the Internet community
    strives for the\n   following goals:\n   (1) Standardization.  It is very important
    to standardize dataset\n   classes.  The authors hope that ACAP achieves the success
    that SNMP\n   has seen with the definition of numerous standards track MIBs.\n
    \  (2) Community Review.  In the absence of standardization, it is\n   important
    to get community review on a proposal to improve its\n   engineering quality.
    \ Community review is strongly recommended prior\n   to registration.  The ACAP
    implementors mailing list\n   <ietf-acap@andrew.cmu.edu> should be used for this
    purpose.\n   (3) Registration.  Registration serves a two-fold purpose.  First
    it\n   prevents use of the same name for different purposes, and second it\n   provides
    a one-stop list which can be used to locate existing\n   extensions or dataset
    classes to prevent duplicate work.\n   The following registration templates may
    be used to register ACAP\n   protocol elements with the Internet Assigned Numbers
    Authority\n   (IANA).\n"
  title: 7.       Registration Procedures
- contents:
  - "7.1.     ACAP Capabilities\n   New ACAP capabilities MUST be registered prior
    to use.  Careful\n   consideration should be made before extending the protocol,
    as it can\n   lead to complexity or interoperability problems.  Review of proposals\n
    \  on the acap implementors mailing list is strongly encouraged prior to\n   registration.\n
    \  To: iana@iana.org\n   Subject: Registration of ACAP capability\n   Capability
    name:\n   Capability keyword:\n   Capability arguments:\n   Published Specification(s):\n
    \  (Optional, but strongly encouraged)\n   Person and email address to contact
    for further information:\n"
  title: 7.1.     ACAP Capabilities
- contents:
  - "7.2.     ACAP Response Codes\n   ACAP response codes are registered on a first
    come, first served\n   basis.  Review of proposals on the acap implementors mailing
    list is\n   strongly encouraged prior to registration.\n   To: iana@iana.org\n
    \  Subject: Registration of ACAP response code\n   Response Code:\n   Arguments
    (use ABNF to specify syntax):\n   Purpose:\n   Published Specification(s):\n   (Optional,
    but strongly encouraged)\n   Person and email address to contact for further information:\n"
  title: 7.2.     ACAP Response Codes
- contents:
  - "7.3.     Dataset Classes\n   A dataset class provides a core set of attributes
    for use in a\n   specified hierarchy.  It may also define rules for the dataset\n
    \  hierarchy underneath that class.  Dataset class specifications must\n   be
    standards track or IESG approved experimental RFCs.\n   To: iana@iana.org\n   Subject:
    Registration of ACAP dataset class\n   Dataset class name/attribute prefix:\n
    \  Purpose:\n   Published Specification(s):\n   (Standards track or IESG approved
    experimental RFC)\n   Person and email address to contact for further information:\n"
  title: 7.3.     Dataset Classes
- contents:
  - "7.4.     Vendor Subtree\n   Vendors may reserve a portion of the ACAP namespace
    for private use.\n   Dataset class names beginning with \"vendor.<company/product
    name>.\"\n   are reserved for use by that company or product.  In addition, all\n
    \  attribute names beginning with \"vendor.<company/product name>.\" are\n   reserved
    for use by that company or product once registered.\n   Registration is on a first
    come, first served basis.  Whenever\n   possible, private attributes and dataset
    classes should be avoided in\n   favor of improving interoperable dataset class
    definitions.\n   To: iana@iana.org\n   Subject: Registration of ACAP vendor subtree\n
    \  Private Prefix: vendor.<company/product name>.\n   Person and email address
    to contact for further information:\n   (company names and addresses should be
    included when appropriate)\n"
  title: 7.4.     Vendor Subtree
- contents:
  - "8.       Formal Syntax\n   The following syntax specification uses the augmented
    Backus-Naur\n   Form (BNF) notation as specified in [ABNF].  This uses the ABNF
    core\n   rules as specified in Appendix A of the ABNF specification [ABNF].\n
    \  Except as noted otherwise, all alphabetic characters are\n   case-insensitive.
    \ The use of upper or lower case characters to\n   define token strings is for
    editorial clarity only.  Implementations\n   MUST accept these strings in a case-insensitive
    fashion.\n   The \"initial-greeting\" rule below defines the initial ACAP greeting\n
    \  from the server.  The \"command\" rule below defines the syntax for\n   commands
    sent by the client.  The \"response\" rule below defines the\n   syntax for responses
    sent by the server.\n   ATOM-CHAR          = \"!\" / %x23-27 / %x2A-5B / %x5D-7A
    / %x7C-7E\n                        ;; Any CHAR except ATOM-SPECIALS\n   ATOM-SPECIALS
    \     = \"(\" / \")\" / \"{\" / SP / CTL / QUOTED-SPECIALS\n   CHAR               =
    %x01-7F\n   DIGIT-NZ           = %x31-39\n                        ; non-zero digits
    (\"1\" - \"9\")\n   QUOTED-CHAR        = SAFE-UTF8-CHAR / \"\\\" QUOTED-SPECIALS\n
    \  QUOTED-SPECIALS    = <\"> / \"\\\"\n   SAFE-CHAR          = %x01-09 / %x0B-0C
    / %x0E-21 /\n                        %x23-5B / %x5D-7F\n                        ;;
    any TEXT-CHAR except QUOTED-SPECIALS\n   SAFE-UTF8-CHAR     = SAFE-CHAR / UTF8-2
    / UTF8-3 / UTF8-4 /\n                        UTF8-5 / UTF8-6\n   TAG-CHAR           =
    %x21 / %x23-27 / %x2C-5B / %x5D-7A / %x7C-7E\n                        ;; Any ATOM-CHAR
    except \"*\" or \"+\"\n   TEXT-CHAR          = %x01-09 / %x0B-0C / %x0E-7F\n                        ;;
    any CHAR except CR and LF\n   TEXT-UTF8-CHAR     = SAFE-UTF8-CHAR / QUOTED-SPECIALS\n
    \  UTF8-1             = %x80-BF\n   UTF8-2             = %xC0-DF UTF8-1\n   UTF8-3
    \            = %xE0-EF 2UTF8-1\n   UTF8-4             = %xF0-F7 3UTF8-1\n   UTF8-5
    \            = %xF8-FB 4UTF8-1\n   UTF8-6             = %xFC-FD 5UTF8-1\n   UTF8-CHAR
    \         = TEXT-UTF8-CHAR / CR / LF\n   acl                = \"(\" [acl-identrights
    *(SP acl-identrights)] \")\"\n                        *(SPACE acl-identrights)]
    \")\"\n   acl-identifier     = string-utf8\n                        ;; MUST NOT
    contain HTAB\n   acl-identrights    = string-utf8\n                        ;;
    The identifier followed by a HTAB,\n                        ;; followed by the
    rights.\n   acl-delobject      = \"(\" dataset SP attribute [SP entry-name] \")\"\n
    \  acl-object         = \"(\" dataset [SP attribute [SP entry-name]] \")\"\n   acl-rights
    \        = quoted\n   atom               = ALPHA *1023ATOM-CHAR\n   attribute
    \         = string-utf8\n                        ;; dot-separated attribute name\n
    \                       ;; MUST NOT contain \"*\" or \"%\"\n   attribute-store
    \   = attribute SP (value-nildef /\n                        \"(\" 1*(metadata-write-q
    SP value-store) \")\")\n                        ;; MUST NOT include the same metadata
    twice\n   auth-type          = <\"> auth-type-name <\">\n   auth-type-name     =
    iana-token\n                        ;; as defined in SASL [SASL]\n   command            =
    tag SP (command-any / command-auth /\n                        command-nonauth)
    CRLF\n                        ;; Modal based on state\n   command-authent    =
    \"AUTHENTICATE\" SP auth-type\n                        [SP string] *(CRLF string)\n
    \  command-any        = \"NOOP\" / command-lang / \"LOGOUT\" /\n                        command-extend\n
    \  command-auth       = command-delacl / command-dsince /\n                        command-freectx
    / command-getquota /\n                        command-lrights / command-myrights
    /\n                        command-search / command-setacl /\n                        command-store\n
    \                       ;; only valid in authenticated state\n   command-delacl
    \    = \"DELETEACL\" SP acl-delobject [SP acl-identifier]\n   command-dsince     =
    \"DELETEDSINCE\" SP dataset SP time\n   command-extend     = extend-token [SP
    extension-data]\n   command-freectx    = \"FREECONTEXT\" SP context\n   command-getquota
    \  = \"GETQUOTA\" SP dataset\n   command-lang       = \"LANG\" *(SP lang-tag)\n
    \  command-lrights    = \"LISTRIGHTS\" SP acl-object\n   command-myrights   =
    \"MYRIGHTS\" SP acl-object\n   command-nonauth    = command-authent\n                        ;;
    only valid in non-authenticated state\n   command-search     = \"SEARCH\" SP (dataset
    / context)\n                        *(SP search-modifier) SP search-criteria\n
    \                       ;; MUST NOT include same search-modifier twice\n   command-setacl
    \    = \"SETACL\" SP acl-object SP acl-identifier\n                        SP
    acl-rights\n   command-store      = \"STORE\" SP store-entry-list\n   comparator
    \        = <\"> comparator-name <\">\n   comparator-name    = [\"+\" / \"-\"]
    iana-token\n   context            = string-utf8\n                        ;; MUST
    NOT begin with slash (\"/\")\n   dataset            = string-utf8\n                        ;;
    slash-separated dataset name\n                        ;; begins with slash\n   entry
    \             = entry-name / entry-path\n   entry-name         = string-utf8\n
    \                       ;; entry name MUST NOT contain slash\n                        ;;
    MUST NOT begin with \".\"\n   entry-path         = string-utf8\n                        ;;
    slash-separated path to entry\n                        ;; begins with slash\n
    \  entry-relative     = string-utf8\n                        ;; potentially relative
    path to entry\n   extend-token       = atom\n                        ;; MUST be
    defined by a standards track or\n                        ;; IESG approved experimental
    protocol extension\n   extension-data     = extension-item *(SP extension-item)\n
    \  extension-item     = extend-token / string / number /\n                        \"(\"
    [extension-data] \")\"\n   iana-token         = atom\n                        ;;
    MUST be registered with IANA\n   initial-greeting   = \"*\" SP \"ACAP\" *(SP \"(\"
    init-capability \")\") CRLF\n   init-capability    = init-cap-context / init-cap-extend
    /\n                        init-cap-implem / init-cap-sasl\n   init-cap-context
    \  = \"CONTEXTLIMIT\" SP string\n   init-cap-extend    = iana-token [SP string-list]\n
    \  init-cap-implem    = \"IMPLEMENTATION\" SP string\n   init-cap-sasl      =
    \"SASL\" SP string-list\n   lang-tag           = <\"> Language-Tag <\">\n                        ;;
    Language-Tag rule is defined in [LANG-TAGS]\n   literal            = \"{\" number
    [ \"+\" ] \"}\" CRLF *OCTET\n                        ;; The number represents
    the number of octets\n                        ;; MUST be literal-utf8 except for
    values\n   literal-utf8       = \"{\" number [ \"+\" ] \"}\" CRLF *UTF8-CHAR\n
    \                       ;; The number represents the number of octets\n                        ;;
    not the number of characters\n   metadata           = attribute [ \"(\" metadata-type-list
    \")\" ]\n                        ;; attribute MAY end in \"*\" as wildcard.\n
    \  metadata-list      = metadata *(SP metadata)\n   metadata-type      = \"attribute\"
    / \"myrights\" / \"size\" /\n                        \"count\" / metadata-write\n
    \  metadata-type-q    = <\"> metadata-type <\">\n   metadata-type-list = metadata-type-q
    *(SP metadata-type-q)\n   metadata-write     = \"value\" / \"acl\"\n   metadata-write-q
    \  = <\"> metadata-write <\">\n   nil                = \"NIL\"\n   number             =
    *DIGIT\n                        ;; A 32-bit unsigned number.\n                        ;;
    (0 <= n < 4,294,967,296)\n   nz-number          = DIGIT-NZ *DIGIT\n                        ;;
    A 32-bit unsigned non-zero number.\n                        ;; (0 < n < 4,294,967,296)\n
    \  position           = number\n                        ;; \"0\" if context is
    not enumerated\n                        ;; otherwise this is non-zero\n   quota-limit
    \       = number\n   quota-usage        = number\n   quoted             = <\">
    *QUOTED-CHAR <\">\n                        ;; limited to 1024 octets between the
    <\">s\n   response           = response-addto / response-alert / response-bye
    /\n                        response-change / response-cont /\n                        response-deleted
    / response-done /\n                        response-entry / response-extend /\n
    \                       response-listr / response-lang /\n                        response-mtimei
    / response-mtimeu /\n                        response-myright / response-quota
    /\n                        response-refer / response-remove / response-stat\n
    \  response-addto     = \"*\" SP \"ADDTO\" SP context SP entry-name\n                        SP
    position SP return-data-list\n   response-alert     = \"*\" SP \"ALERT\" SP resp-body
    CRLF\n                       ;; Client MUST display alert text to user\n   response-bye
    \      = \"*\" SP \"BYE\" SP resp-body CRLF\n                       ;; Server
    will disconnect condition\n   response-change    = \"*\" SP \"CHANGE\" SP context
    SP entry-name\n                        SP position SP position SP return-data-list\n
    \  response-cont      = \"+\" SP string\n   response-deleted   = tag SP \"DELETED\"
    SP entry-name\n   response-done      = tag SP resp-cond-state CRLF\n   response-entry
    \    = tag SP \"ENTRY\" SP entry SP return-data-list\n   response-extend    =
    (tag / \"*\") SP extend-token [SP extension-data]\n   response-lang      = \"*\"
    SP \"LANG\" SP lang-tag 1*(SP comparator)\n   response-listr     = tag SP \"LISTRIGHTS\"
    SP acl-rights\n                        *(SP acl-rights)\n   response-mtimei    =
    tag SP \"MODTIME\" SP time\n   response-mtimeu    = \"*\" SP \"MODTIME\" SP context
    SP time\n   response-myright   = tag SP \"MYRIGHTS\" SP acl-rights\n   response-quota
    \    = \"*\" SP \"QUOTA\" SP dataset SP quota-limit\n                        SP
    quota-usage [SP extension-data]\n   response-refer     = tag SP \"REFER\" SP dataset\n
    \                       1*(SP <\"> url-relative <\">)\n   response-remove    =
    \"*\" SP \"REMOVEFROM\" SP context SP\n                        entry-name SP position\n
    \  response-stat      = \"*\" SP resp-cond-state CRLF\n   resp-body          =
    [\"(\" resp-code \")\" SP] quoted\n   resp-code          = \"AUTH-TOO-WEAK\" /
    \"ENCRYPT-NEEDED\" /\n                        resp-code-inval / resp-code-mod
    /\n                        resp-code-noexist / resp-code-perm / \"QUOTA\" /\n
    \                       resp-code-refer / resp-code-sasl /\n                        resp-code-toomany
    / \"TOOOLD\" /\n                        \"TRANSITION-NEEDED\" / \"TRYFREECONTEXT\"
    /\n                        \"TRYLATER\" / \"WAYTOOMANY\" / resp-code-ext\n   resp-code-ext
    \     = iana-token [SP extension-data]\n                        ;; unknown codes
    MUST be tolerated by the client\n   resp-code-inval    = \"INVALID\" 1*(SP entry-path
    SP attribute)\n   resp-code-mod      = \"MODIFIED\" SP entry-path\n   resp-code-noexist
    \ = \"NOEXIST\" SP dataset\n   resp-code-perm     = \"PERMISSION\" SP acl-object\n
    \  resp-code-refer    = \"REFER\" 1*(SP <\"> url-relative <\">)\n   resp-code-sasl
    \    = \"SASL\" SP string\n   resp-code-toomany  = \"TOOMANY\" SP nz-number\n
    \  resp-cond-state    = (\"OK\" / \"NO\" / \"BAD\") SP resp-body\n                        ;;
    Status condition\n   return-attr-list   = \"(\" return-metalist *(SP return-metalist)
    \")\"\n                        ;; occurs when \"*\" in RETURN pattern on SEARCH\n
    \  return-data        = return-metadata / return-metalist /\n                        return-attr-list\n
    \  return-data-list   = return-data *(SP return-data)\n   return-metalist    =
    \"(\" return-metadata *(SP return-metadata) \")\"\n                        ;;
    occurs when multiple metadata items requested\n   return-metadata    = nil / string
    / value-list / acl\n   searchkey-equal    = \"EQUAL\" SP attribute SP comparator
    SP value-nil\n   searchkey-comp     = \"COMPARE\" SP attribute SP comparator SP
    value\n   searchkey-prefix   = \"PREFIX\" SP attribute SP comparator SP value\n
    \  searchkey-range    = \"RANGE\" SP nz-number SP nz-number SP time\n   searchkey-strict
    \  = \"COMPARESTRICT\" SP attribute SP comparator\n                        SP
    value\n   searchkey-substr   = \"SUBSTRING\" SP attribute SP comparator SP value\n
    \  searchmod-depth    = \"DEPTH\" SP number\n   searchmod-hard     = \"HARDLIMIT\"
    SP nz-number\n   searchmod-limit    = \"LIMIT\" SP number SP number\n   searchmod-make
    \    = \"MAKECONTEXT\" [SP \"ENUMERATE\"]\n                        [SP \"NOTIFY\"]
    SP context\n   searchmod-ninh     = \"NOINHERIT\"\n   searchmod-return   = \"RETURN\"
    SP \"(\" [metadata-list] \")\"\n   searchmod-sort     = \"SORT\" SP \"(\" sort-list
    \")\"\n   search-criteria    = \"ALL\" / searchkey-equal / searchkey-comp /\n
    \                       searchkey-strict / searchkey-range /\n                        searchkey-prefix
    / searchkey-substr /\n                        \"NOT\" SP search-criteria /\n                        \"OR\"
    SP search-criteria SP search-criteria /\n                        \"AND\" SP search-criteria
    SP search-criteria\n   search-modifier    = searchmod-depth / searchmod-hard /\n
    \                       searchmod-limit / searchmod-make /\n                        searchmod-ninh
    / searchmod-return /\n                        searchmod-sort\n   sort-list          =
    sort-item *(SP sort-item)\n   sort-item          = attribute SP comparator\n   store-entry
    \       = \"(\" entry-path *(SP store-modifier)\n                            *(SP
    attribute-store) \")\"\n                        ;; MUST NOT include same store-modifier
    twice\n                        ;; MUST NOT include same attribute twice\n   store-entry-list
    \  = store-entry *(SP store-entry)\n                        ;; MUST NOT include
    same entry twice\n   store-modifier     = store-mod-unchang / store-mod-nocreate\n
    \  store-mod-nocreate = \"NOCREATE\"\n   store-mod-unchang  = \"UNCHANGEDSINCE\"
    SP time\n   string             = quoted / literal\n   string-list        = string
    *(SP string)\n   string-utf8        = quoted / literal-utf8\n   tag                =
    1*32TAG-CHAR\n   time               = <\"> time-year time-month time-day time-hour\n
    \                       time-minute time-second time-subsecond <\">\n                        ;;
    Timestamp in UTC\n   time-day           = 2DIGIT ;; 01-31\n   time-hour          =
    2DIGIT ;; 00-23\n   time-minute        = 2DIGIT ;; 00-59\n   time-month         =
    2DIGIT ;; 01-12\n   time-second        = 2DIGIT ;; 00-60\n   time-subsecond     =
    *DIGIT\n   time-year          = 4DIGIT\n   value              = string\n   value-list
    \        = \"(\" [value *(SP value)] \")\"\n   value-nil          = value / nil\n
    \  value-nildef       = value-nil / \"DEFAULT\"\n   value-store        = value-nildef
    / value-list / acl\n   url-acap           = \"acap://\" url-server \"/\" url-enc-entry\n
    \                       [url-filter] [url-extension]\n                        ;;
    url-enc-entry interpreted relative to \"/\"\n   url-attr-list      = url-enc-attr
    *(\"&\" url-enc-attr)\n   url-auth           = \";AUTH=\" (\"*\" / url-enc-auth)\n
    \  url-achar          = uchar / \"&\" / \"=\" / \"~\"\n                        ;;
    See RFC 1738 for definition of \"uchar\"\n   url-char           = uchar / \"=\"
    / \"~\" / \":\" / \"@\" / \"/\"\n                        ;; See RFC 1738 for definition
    of \"uchar\"\n   url-enc-attr       = 1*url-char\n                        ;; encoded
    version of attribute name\n   url-enc-auth       = 1*url-achar\n                        ;;
    encoded version of auth-type-name above\n   url-enc-entry      = 1*url-char\n
    \                       ;; encoded version of entry-relative above\n   url-enc-user
    \      = *url-achar\n                        ;; encoded version of login userid\n
    \  url-extension      = *(\"?\" 1*url-char)\n   url-filter         = \"?\" url-attr-list\n
    \  url-relative       = url-acap / [url-enc-entry] [url-filter]\n                        ;;
    url-enc-entry is relative to base URL\n   url-server         = [url-enc-user [url-auth]
    \"@\"] hostport\n                        ;; See RFC 1738 for definition of \"hostport\"\n"
  title: 8.       Formal Syntax
- contents:
  - "9.       Multi-lingual Considerations\n   The IAB charset workshop [IAB-CHARSET]
    came to a number of\n   conclusions which influenced the design of ACAP.  The
    decision to use\n   UTF-8 as the character encoding scheme was based on that work.
    \ The\n   LANG command to negotiate a language for error messages is also\n   included.\n
    \  Section 3.4.5 of the IAB charset workshop report states that there\n   should
    be a way to identify the natural language for human readable\n   strings.  Several
    promising proposals have been made for use within\n   ACAP, but no clear consensus
    on a single method is apparent at this\n   stage.  The following rules are likely
    to permit the addition of\n   multi-lingual support in the future:\n   (1) A work
    in progress called Multi-Lingual String Format (MLSF)\n   proposes a layer on
    top of UTF-8 which uses otherwise illegal UTF-8\n   sequences to store language
    tags.  In order to permit its addition to\n   a future version of this standard,
    client-side UTF-8 interpreters\n   MUST be able to silently ignore illegal multi-byte
    UTF-8 characters,\n   and treat illegal single-byte UTF-8 characters as end of
    string\n   markers.  Servers, for the time being, MUST be able to silently\n   accept
    illegal UTF-8 characters, except in attribute names and entry\n   names.  Clients
    MUST NOT send illegal UTF-8 characters to the server\n   unless a future standard
    changes this rule.\n   (2) There is a proposal to add language tags to Unicode.
    \ To support\n   this, servers MUST be able to store UTF-8 characters of up to
    20 bits\n   of data.\n   (3) The metadata item \"language\" is reserved for future
    use.\n"
  title: 9.       Multi-lingual Considerations
- contents:
  - "10.      Security Considerations\n   The AUTHENTICATE command uses SASL [SASL]
    to provide basic\n   authentication, authorization, integrity and privacy services.
    \ This\n   is described in section 6.3.1.\n   When the CRAM-MD5 mechanism is used,
    the security considerations for\n   the CRAM-MD5 SASL mechanism [CRAM-MD5] apply.
    \ The CRAM-MD5 mechanism\n   is also susceptible to passive dictionary attacks.
    \ This means that\n   if an authentication session is recorded by a passive observer,
    that\n   observer can try common passwords through the CRAM-MD5 mechanism and\n
    \  see if the results match.  This attack is reduced by using hard to\n   guess
    passwords.  Sites are encouraged to educate users and have the\n   password change
    service test candidate passwords against a\n   dictionary.  ACAP implementations
    of CRAM-MD5 SHOULD permit passwords\n   of at least 64 characters in length.\n
    \  ACAP protocol transactions are susceptible to passive observers or\n   man
    in the middle attacks which alter the data, unless the optional\n   encryption
    and integrity services of the AUTHENTICATE command are\n   enabled, or an external
    security mechanism is used for protection.\n   It may be useful to allow configuration
    of both clients and servers\n   to refuse to transfer sensitive information in
    the absence of strong\n   encryption.\n   ACAP access control lists provide fine
    grained authorization for\n   access to attributes.  A number of related security
    issues are\n   described in section 3.5.\n   ACAP URLs have the same security
    considerations as IMAP URLs\n   [IMAP-URL].\n   ACAP clients are encouraged to
    consider the security problems\n   involved with a lab computer situation.  Specifically,
    a client cache\n   of ACAP configuration information MUST NOT allow access by
    an\n   unauthorized user.  One way to assure this is for an ACAP client to\n   be
    able to completely flush any non-public cached configuration data\n   when a user
    leaves.\n   As laptop computers can be easily stolen and a cache of configuration\n
    \  data may contain sensitive information, a disconnected mode ACAP\n   client
    may wish to encrypt and password protect cached configuration\n   information.\n"
  title: 10.      Security Considerations
- contents:
  - "11.      Acknowledgments\n   Many thanks to the follow people who have contributed
    to ACAP over\n   the past four years: Wallace Colyer, Mark Crispin, Jack DeWinter,
    Rob\n   Earhart, Ned Freed, Randy Gellens, Terry Gray, J. S. Greenfield,\n   Steve
    Dorner, Steve Hole, Steve Hubert, Dave Roberts, Bart Schaefer,\n   Matt Wall and
    other participants of the IETF ACAP working group.\n"
  title: 11.      Acknowledgments
- contents:
  - "12.      Authors' Addresses\n   Chris Newman\n   Innosoft International, Inc.\n
    \  1050 Lakes Drive\n   West Covina, CA 91790 USA\n   Email: chris.newman@innosoft.com\n
    \  John Gardiner Myers\n   Netscape Communications\n   501 East Middlefield Road\n
    \  Mail Stop MV-029\n   Mountain View, CA 94043\n   Email: jgmyers@netscape.com\n"
  title: 12.      Authors' Addresses
- contents:
  - 'Appendices

    '
  title: Appendices
- contents:
  - "A.       References\n   [ABNF] Crocker, Overell, \"Augmented BNF for Syntax Specifications:\n
    \  ABNF\", RFC 2234, Internet Mail Consortium, Demon Internet Ltd,\n   November
    1997.\n       <ftp://ds.internic.net/rfc/rfc2234.txt>\n   [BASIC-URL] Berners-Lee,
    Masinter, McCahill, \"Uniform Resource\n   Locators (URL)\", RFC 1738, CERN, Xerox
    Coproration, University of\n   Minnesota, December 1994.\n       <ftp://ds.internic.net/rfc/rfc1738.txt>\n
    \  [CHARSET-LANG-POLICY] Alvestrand, \"IETF Policy on Character Sets and\n   Languages\",
    work in progress.\n   [CRAM-MD5] Klensin, Catoe, Krumviede, \"IMAP/POP AUTHorize
    Extension\n   for Simple Challenge/Response\", RFC 2195, MCI, September 1997.\n
    \      <ftp://ds.internic.net/rfc/rfc2195.txt>\n   [IAB-CHARSET] Weider, Preston,
    Simonsen, Alvestrand, Atkinson,\n   Crispin, Svanberg, \"The Report of the IAB
    Character Set Workshop held\n   29 February - 1 March, 1996\", RFC 2130, April
    1997.\n       <ftp://ds.internic.net/rfc/rfc2130.txt>\n   [IMAP4] Crispin, M.,
    \"Internet Message Access Protocol - Version\n   4rev1\", RFC 2060, University
    of Washington, December 1996.\n       <ftp://ds.internic.net/rfc/rfc2060.txt>\n
    \  [IMAP-ACL] Myers, J., \"IMAP4 ACL extension\", RFC 2086, Carnegie\n   Mellon,
    January 1997.\n       <ftp://ds.internic.net/rfc/rfc2086.txt>\n   [IMAP-URL] Newman,
    \"IMAP URL Scheme\", RFC 2192, Innosoft, July 1997.\n       <ftp://ds.internic.net/rfc/rfc2192.txt>\n
    \  [ISO-10646] ISO/IEC 10646-1:1993(E) \"Information Technology--\n   Universal
    Multiple-octet Coded Character Set (UCS).\" See also\n   amendments 1 through
    7, plus editorial corrections.\n   [ISO-C] \"Programming languages -- C\", ISO/IEC
    9899:1990,\n   International Organization for Standardization.  This is effectively\n
    \  the same as ANSI C standard X3.159-1989.\n   [KEYWORDS] Bradner, \"Key words
    for use in RFCs to Indicate\n   Requirement Levels\", RFC 2119, Harvard University,
    March 1997.\n       <ftp://ds.internic.net/rfc/rfc2119.txt>\n   [LANG-TAGS] Alvestrand,
    H., \"Tags for the Identification of\n   Languages\", RFC 1766.\n       <ftp://ds.internic.net/rfc/rfc1766.txt>\n
    \  [REL-URL] Fielding, \"Relative Uniform Resource Locators\", RFC 1808,\n   UC
    Irvine, June 1995.\n       <ftp://ds.internic.net/rfc/rfc1808.txt>\n   [SASL]
    Myers, J., \"Simple Authentication and Security Layer (SASL)\",\n   RFC 2222,
    Netscape Communications, October 1997.\n       <ftp://ds.internic.net/rfc/rfc2222.txt>\n
    \  [SASL-ANON] Newman, C., \"Anonymous SASL Mechanism\", RFC 2245,\n   November
    1997.\n   [UNICODE-2] The Unicode Consortium, \"The Unicode Standard, Version\n
    \  2.0\", Addison-Wesley, 1996. ISBN 0-201-48345-9.\n   [US-ASCII] \"USA Standard
    Code for Information Interchange,\" X3.4.\n   American National Standards Institute:
    New York (1968).\n   [UTF8] Yergeau, F. \"UTF-8, a transformation format of Unicode
    and ISO\n   10646\", RFC 2044, Alis Technologies, October 1996.\n       <ftp://ds.internic.net/rfc/rfc2044.txt>\n"
  title: A.       References
- contents:
  - "B.       ACAP Keyword Index\n       ACAP (untagged response) ...................................
    \  26\n       ADDTO (untagged response) ..................................   40\n
    \      ALERT (untagged response) ..................................   31\n       ALL
    (search keyword) .......................................   36\n       AND (search
    keyword) .......................................   36\n       AUTH-TOO-WEAK (response
    code) ..............................   19\n       AUTHENTICATE (command) .....................................
    \  31\n       BAD (response) .............................................   30\n
    \      BYE (untagged response) ....................................   30\n       CHANGE
    (untagged response) .................................   41\n       COMPARE (search
    keyword) ...................................   36\n       COMPARESTRICT (search
    keyword) .............................   36\n       CONTEXTLIMIT (ACAP capability)
    .............................   27\n       DELETEACL (command) ........................................
    \  46\n       DELETED (intermediate response) ............................   45\n
    \      DELETEDSINCE (command) .....................................   45\n       DEPTH
    (search modifier) ....................................   34\n       ENCRYPT-NEEDED
    (response code) .............................   19\n       ENTRY (intermediate
    response) ..............................   37\n       EQUAL (search keyword) .....................................
    \  37\n       FREECONTEXT (command) ......................................   39\n
    \      GETQUOTA (command) .........................................   48\n       HARDLIMIT
    (search modifier) ................................   34\n       IMPLEMENTATION
    (ACAP capability) ...........................   27\n       INVALID (response code)
    ....................................   19\n       LANG (command) .............................................
    \  28\n       LANG (intermediate response) ...............................   28\n
    \      LIMIT (search modifier) ....................................   34\n       LISTRIGHTS
    (command) .......................................   47\n       LISTRIGHTS (intermediate
    response) .........................   48\n       LOGOUT (command) ...........................................
    \  29\n       MAKECONTEXT (search modifier) ..............................   34\n
    \      MODIFIED (response code) ...................................   19\n       MODTIME
    (intermediate response) ............................   38\n       MODTIME (untagged
    response) ................................   42\n       MYRIGHTS (command) .........................................
    \  47\n       MYRIGHTS (intermediate response) ...........................   47\n
    \      NO (response) ..............................................   29\n       NOCREATE
    (store modifier) ..................................   44\n       NOEXIST (response
    code) ....................................   19\n       NOINHERIT (search modifier)
    ................................   35\n       NOOP (command) .............................................
    \  27\n       NOT (search keyword) .......................................   37\n
    \      OK (response) ..............................................   29\n       OR
    (search keyword) ........................................   37\n       PERMISSION
    (response code) .................................   19\n       PREFIX (search
    keyword) ....................................   37\n       QUOTA (response code)
    ......................................   19\n       QUOTA (untagged response)
    ..................................   49\n       RANGE (search keyword) .....................................
    \  37\n       REFER (intermediate response) ..............................   38\n
    \      REFER (response code) ......................................   19\n       REMOVEFROM
    (untagged response) .............................   41\n       RETURN (search
    modifier) ...................................   35\n       SASL (ACAP capability)
    .....................................   27\n       SASL (response code) .......................................
    \  20\n       SEARCH (command) ...........................................   33\n
    \      SETACL (command) ...........................................   46\n       SORT
    (search modifier) .....................................   36\n       STORE (command)
    ............................................   42\n       SUBSTRING (search keyword)
    .................................   37\n       TOOMANY (response code) ....................................
    \  20\n       TOOOLD (response code) .....................................   20\n
    \      TRANSITION-NEEDED (response code) ..........................   20\n       TRYFREECONTEXT
    (response code) .............................   20\n       TRYLATER (response
    code) ...................................   20\n       UNCHANGEDSINCE (store modifier)
    ............................   44\n       UPDATECONTEXT (command) ....................................
    \  40\n       WAYTOOMANY (response code) .................................   20\n
    \      acl (attribute metadata) ...................................   12\n       anyone
    (ACL identifier) ....................................   17\n       attribute (attribute
    metadata) .............................   12\n       dataset.acl (dataset attribute)
    ............................   24\n       dataset.acl.<attribute> (dataset attribute)
    ................   24\n       dataset.inherit (dataset attribute) ........................
    \  24\n       entry (predefined attribute) ...............................   11\n
    \      i;ascii-casemap (comparator) ...............................   16\n       i;ascii-numeric
    (comparator) ...............................   16\n       i;octet (comparator)
    .......................................   16\n       modtime (predefined attribute)
    .............................   11\n       myrights (attribute metadata) ..............................
    \  12\n       size (attribute metadata) ..................................   13\n
    \      subdataset (predefined attribute) ..........................   11\n       value
    (attribute metadata) .................................   13\n"
  title: B.       ACAP Keyword Index
- contents:
  - "C.       Full Copyright Statement\n   Copyright (C) The Internet Society 1997.
    All Rights Reserved.\n   This document and translations of it may be copied and
    furnished to\n   others, and derivative works that comment on or otherwise explain
    it\n   or assist in its implmentation may be prepared, copied, published and\n
    \  distributed, in whole or in part, without restriction of any kind,\n   provided
    that the above copyright notice and this paragraph are\n   included on all such
    copies and derivative works.  However, this\n   document itself may not be modified
    in any way, such as by removing\n   the copyright notice or references to the
    Internet Society or other\n   Internet organizations, except as needed for the
    purpose of developing\n   Internet standards in which case the procedures for
    copyrights defined\n   in the Internet Standards process must be followed, or
    as required to\n   translate it into languages other than English.\n   The limited
    permissions granted above are perpetual and will not be\n   revoked by the Internet
    Society or its successors or assigns.\n   This document and the information contained
    herein is provided on an\n   \"AS IS\" basis and THE INTERNET SOCIETY AND THE
    INTERNET ENGINEERING\n   TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED,
    INCLUDING BUT\n   NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION
    HEREIN\n   WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY
    OR FITNESS FOR A PARTICULAR PURPOSE.\n"
  title: C.       Full Copyright Statement
