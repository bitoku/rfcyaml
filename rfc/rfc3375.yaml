- title: __initial_text__
  contents:
  - '            Generic Registry-Registrar Protocol Requirements

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2002).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes high-level functional and interface\n  \
    \ requirements for a client-server protocol for the registration and\n   management\
    \ of Internet domain names in shared registries.  Specific\n   technical requirements\
    \ detailed for protocol design are not presented\n   here.  Instead, this document\
    \ focuses on the basic functions and\n   interfaces required of a protocol to\
    \ support multiple registry and\n   registrar operational models.\n"
- title: Conventions Used In This Document
  contents:
  - "Conventions Used In This Document\n   The key words \"MUST\", \"MUST NOT\", \"\
    REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction .......................................\
    \  2\n   1.1 Definitions, Acronyms, and Abbreviations ...........  2\n   2.  General\
    \ Description ................................  4\n   2.1 System Perspective .................................\
    \  4\n   2.2 System Functions ...................................  4\n   2.3 User\
    \ Characteristics ...............................  5\n   2.4 Assumptions ........................................\
    \  5\n   3.  Functional Requirements ............................  5\n   3.1 Session\
    \ Management .................................  6\n   3.2 Identification and Authentication\
    \ ..................  6\n   3.3 Transaction Identification .........................\
    \  7\n   3.4 Object Management ..................................  7\n   3.5 Domain\
    \ Status Indicators ........................... 13\n   3.6 Transaction Completion\
    \ Status ...................... 13\n   4.  External Interface Requirements ....................\
    \ 14\n   4.1 User, Hardware, and Software Interfaces ............ 14\n   4.2 Communications\
    \ Interfaces .......................... 14\n   5.  Performance Requirements ...........................\
    \ 14\n   6.  Design Constraints ................................. 14\n   6.1 Standards\
    \ Compliance ............................... 14\n   6.2 Hardware Limitations ...............................\
    \ 15\n   7.  Service Attributes ................................. 15\n   7.1 Reliability\
    \ ........................................ 15\n   7.2 Availability .......................................\
    \ 15\n   7.3 Scalability ........................................ 16\n   7.4 Maintainability\
    \ .................................... 16\n   7.5 Extensibility ......................................\
    \ 16\n   7.6 Security ........................................... 16\n   8.  Other\
    \ Requirements ................................. 17\n   8.1 Database Requirements\
    \ .............................. 17\n   8.2 Operational Requirements ...........................\
    \ 17\n   8.3 Site Adaptation Requirements ....................... 17\n   8.4 Data\
    \ Collection Requirements ....................... 17\n   9.  Internationalization\
    \ Requirements .................. 18\n   10. IANA Considerations ................................\
    \ 18\n   11. Security Considerations ............................ 18\n   12. Acknowledgements\
    \ ................................... 19\n   13. References .........................................\
    \ 19\n   14. Editor's Address ................................... 20\n   15. Full\
    \ Copyright Statement ........................... 21\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   The advent of shared domain name registration systems illustrates\
    \ the\n   utility of a common, generic protocol for registry-registrar\n   interaction.\
    \  A standard generic protocol will allow registrars to\n   communicate with multiple\
    \ registries through a common interface,\n   reducing operational complexity.\
    \  This document describes high level\n   functional and interface requirements\
    \ for a generic provisioning\n   protocol suitable for registry-registrar operations.\
    \  Detailed\n   technical requirements are not addressed in this document.\n"
- title: 1.1 Definitions, Acronyms, and Abbreviations
  contents:
  - "1.1 Definitions, Acronyms, and Abbreviations\n   ccTLD: Country Code Top Level\
    \ Domain.  \".us\" is an example of a\n   ccTLD.\n   DNS: Domain Name System\n\
    \   gTLD: Generic Top Level Domain.  \".com\" is an example of a gTLD.\n   IANA:\
    \ Internet Assigned Numbers Authority\n   IETF: Internet Engineering Task Force\n\
    \   IP Address: Either or both IPv4 or IPv6 address.\n   IPv4: Internet Protocol\
    \ version 4\n   IPv6: Internet Protocol version 6\n   RRP: Registry-Registrar\
    \ Protocol\n   TLD: Top Level Domain.  A generic term used to describe both gTLDs\n\
    \   and ccTLDs that exist under the top-level root of the domain name\n   hierarchy.\n\
    \   Exclusive Registration System: A domain name registration system in\n   which\
    \ registry services are limited to a single registrar.  Exclusive\n   Registration\
    \ Systems are either loosely coupled (in which case the\n   separation between\
    \ registry and registrar systems is readily\n   evident), or tightly coupled (in\
    \ which case the separation between\n   registry and registrar systems is obscure).\n\
    \   Name Space: The range of values that can be assigned within a\n   particular\
    \ node of the domain name hierarchy.\n   Object: A generic term used to describe\
    \ entities that are created,\n   updated, deleted, and otherwise managed by a\
    \ generic registry-\n   registrar protocol.\n   Registrant: An entity that registers\
    \ domain names in a registry\n   through the services provided by a registrar.\
    \  Registrants include\n   individuals, organizations, and corporations.\n   Registrar:\
    \ An entity that provides front-end domain name registration\n   services to registrants,\
    \ providing a public interface to registry\n   services.\n   Registry: An entity\
    \ that provides back-end domain name registration\n   services to registrars,\
    \ managing a central repository of information\n   associated with domain name\
    \ delegations.  A registry is typically\n   responsible for publication and distribution\
    \ of zone files used by\n   the Domain Name System.\n   Shared Registration System:\
    \ A domain name registration system in\n   which registry services are shared\
    \ among multiple independent\n   registrars.  Shared Registration Systems require\
    \ a loose coupling\n   between registrars and a registry.\n   Thick Registry:\
    \ A registry in which all of the information associated\n   with registered entities,\
    \ including both technical information\n   (information needed to produce zone\
    \ files) and social information\n   (information needed to implement operational,\
    \ business, or legal\n   practices), is stored within the registry repository.\n\
    \   Thin Registry: A registry in which all elements of the social\n   information\
    \ associated with registered entities is distributed\n   between a shared registry\
    \ and the registrars served by the registry.\n   Zone: The complete set of information\
    \ for a particular \"pruned\"\n   subtree of the domain space.  The zone concept\
    \ is described fully in\n   [RFC1035].\n"
- title: 2. General Description
  contents:
  - "2. General Description\n   A basic understanding of domain name registration\
    \ systems provides\n   focus for the enumeration of functional and interface requirements\
    \ of\n   a protocol to serve those systems.  This section provides a high-\n \
    \  level description of domain name registration systems to provide\n   context\
    \ for the requirements identified later in this document.\n"
- title: 2.1 System Perspective
  contents:
  - "2.1 System Perspective\n   A domain name registration system consists of a protocol\
    \ and\n   associated software and hardware that permits registrars to provide\n\
    \   Internet domain name registration services within the name spaces\n   administered\
    \ by a registry.  A registration system can be shared\n   among multiple competing\
    \ registrars, or it can be served by a single\n   registrar that is either tightly\
    \ or loosely coupled with back-end\n   registry services.  The system providing\
    \ registration services for\n   the .com, .net, and .org gTLDs is an example of\
    \ a shared registration\n   system serving multiple competing registrars.  The\
    \ systems providing\n   registration services for some ccTLDs and the .gov and\
    \ .mil gTLDs are\n   examples of registration systems served by a single registrar.\n"
- title: 2.2 System Functions
  contents:
  - "2.2 System Functions\n   Registrars access a registry through a protocol to register\
    \ objects\n   and perform object management functions.  Required functions include\n\
    \   session management; object creation, update, renewal, and deletion;\n   object\
    \ query; and object transfer.\n   A registry generates DNS zone files for the\
    \ name spaces it serves.\n   Zone files are created and distributed to a series\
    \ of name servers\n   that provide the foundation for the domain name system.\n"
- title: 2.3 User Characteristics
  contents:
  - "2.3 User Characteristics\n   Protocol users fall into two broad categories: entities\
    \ that use\n   protocol client implementations and entities that use protocol\
    \ server\n   implementations, though an entity can provide both client and server\n\
    \   services if it provides intermediate services.  A protocol provides a\n  \
    \ loose coupling between these communicating entities.\n"
- title: 2.4 Assumptions
  contents:
  - "2.4 Assumptions\n   There is one and only one registry that is authoritative\
    \ for a given\n   name space and zone.\n   A registry can be authoritative for\
    \ more than one name space and\n   zone.  Some registry operations can be billable.\
    \  The impact of a\n   billable operation can be mitigated through the specification\
    \ of\n   non-billable operations that allow a registrar to make informed\n   decisions\
    \ before executing billable operations.\n   A registry can choose to implement\
    \ a subset of the features provided\n   by a generic registry-registrar protocol.\
    \  A thin registry, for\n   example, might not provide services to register social\
    \ information.\n   Specification of minimal implementation compliance requirements\
    \ is\n   thus an exercise left for a formal protocol definition document that\n\
    \   addresses the functional requirements specified here.\n   A protocol that\
    \ meets the requirements described here can be called\n   something other than\
    \ \"Generic Registry Registrar Protocol\".\n   The requirements described in this\
    \ document are not intended to limit\n   the set of objects that can be managed\
    \ by a generic registry-\n   registrar protocol.\n"
- title: 3. Functional Requirements
  contents:
  - "3. Functional Requirements\n   This section describes functional requirements\
    \ for a registry-\n   registrar protocol.  Technical requirements that describe\
    \ how these\n   requirements are to be met are out of scope for this document.\n"
- title: 3.1 Session Management
  contents:
  - "3.1 Session Management\n   [1] The protocol MUST provide services to explicitly\
    \ establish a\n   client session with a registry server.\n   [2] In a connection-oriented\
    \ environment, a server MUST respond to\n   connection attempts with information\
    \ that identifies the server and\n   the default server protocol version.\n  \
    \ [3] The protocol MUST provide services that allow a client to request\n   use\
    \ of a specific protocol version as part of negotiating a session.\n   [4] The\
    \ protocol MUST provide services that allow a server to decline\n   use of a specific\
    \ protocol version as part of negotiating a session.\n   [5] A session MUST NOT\
    \ be established if the client and server are\n   unable to reach agreement on\
    \ the protocol version to be used for the\n   requested session.\n   [6] The protocol\
    \ MUST provide services to explicitly end an\n   established session.\n   [7]\
    \ The protocol MUST provide services that provide transactional\n   atomicity,\
    \ consistency, isolation, and durability in the advent of\n   session management\
    \ failures.\n   [8] The protocol MUST provide services to confirm that a transaction\n\
    \   has been completed if a session is aborted prematurely.\n"
- title: 3.2 Identification and Authentication
  contents:
  - "3.2 Identification and Authentication\n   [1] The protocol or another layered\
    \ protocol MUST provide services to\n   identify registrar clients and registry\
    \ servers before granting\n   access to other protocol services.\n   [2] The protocol\
    \ or another layered protocol MUST provide services to\n   authenticate registrar\
    \ clients and registry servers before granting\n   access to other protocol services.\n\
    \   [3] The protocol or another layered protocol MUST provide services to\n  \
    \ negotiate an authentication mechanism acceptable to both client and\n   server.\n"
- title: 3.3 Transaction Identification
  contents:
  - "3.3 Transaction Identification\n   [1] Registry operations that create, modify,\
    \ or delete objects MUST\n   be associated with a registry-unique identifier.\
    \  The protocol MUST\n   allow each transaction to be identified in a permanent\
    \ and globally\n   unique manner to facilitate temporal ordering and state management\n\
    \   services.\n"
- title: 3.4 Object Management
  contents:
  - "3.4 Object Management\n   This section describes requirements for object management,\
    \ including\n   identification, registration, association, update, transfer, renewal,\n\
    \   deletion, and query.\n"
- title: 3.4.1 Object Identification
  contents:
  - "3.4.1 Object Identification\n   Some objects, such as name servers and contacts,\
    \ have utility in\n   multiple registries.  However, maintaining disjoint copies\
    \ of object\n   information in multiple registries can lead to inconsistencies\
    \ that\n   have adverse consequences for the Internet.  For example, changing\
    \ a\n   name server name in one registry, but not in a second registry that\n\
    \   refers to the server for domain name delegation, can produce\n   unexpected\
    \ DNS query results.\n   [1] The protocol MUST provide services to associate an\
    \ object\n   identifier with every object.\n   [2] Object identifiers MUST be\
    \ globally unique.\n   [3] An object's identifier MUST NOT change during the lifetime\
    \ of the\n   object in a particular repository, even if administrative control\
    \ of\n   the object changes over time.\n   [4] An object identifier MUST contain\
    \ information that unambiguously\n   identifies the object.\n   [5] Object identifier\
    \ format specified by the protocol SHOULD be\n   easily parsed and understood\
    \ by humans.\n   [6] An object's identifier MUST be generated and stored when\
    \ an\n   object is created.\n"
- title: 3.4.2 Object Registration
  contents:
  - "3.4.2 Object Registration\n   [1] The protocol MUST provide services to register\
    \ Internet domain\n   names.\n   [2] The protocol MUST permit a starting and ending\
    \ time for a domain\n   name registration to be negotiated, thereby allowing a\
    \ registry to\n   implement policies allowing a range of registration validity\
    \ periods\n   (the start and end points in time during which one normally assumes\n\
    \   that an object will be active), and enabling registrars to select a\n   period\
    \ for each registration they submit from within the valid range\n   based on out-of-band\
    \ negotiation between the registrar and the\n   registrant.  Registries SHOULD\
    \ be allowed to accept indefinitely\n   valid registrations if the policy that\
    \ they are implementing permits,\n   and to specify a default validity period\
    \ if one is not selected by a\n   registrar.  Registries MUST be allowed to specify\
    \ minimal validity\n   periods consistent with prevailing or preferred practices\
    \ for fee-\n   for-service recovery.  The protocol MUST provide features to ensure\n\
    \   that both registry and registrar have a mutual understanding of the\n   validity\
    \ period at the conclusion of a successful registration event.\n   [3] The protocol\
    \ MUST provide services to register name servers.\n   Name server registration\
    \ MUST NOT be limited to a specific period of\n   time.  Name servers MUST be\
    \ registered with a valid IPv4 or IPv6\n   address when a \"glue record\" is required\
    \ for delegation.  A name\n   server MAY be registered with multiple IP addresses.\
    \  Multiple name\n   servers using distinct server names MAY share an IP address.\n\
    \   [4] The protocol MUST provide services to manage delegation of zone\n   authority.\
    \  Names of name servers MUST NOT be required to be tied to\n   the name of the\
    \ zone(s) for which the server is authoritative.\n   [5] The protocol MUST provide\
    \ services to register social information\n   describing human and organizational\
    \ entities.  Registration of social\n   information MUST NOT be limited to a specific\
    \ period of time.  Social\n   information MAY include a name (individual name,\
    \ organization name,\n   or both), address (including street address, city, state\
    \ or province\n   (if applicable), postal code, and country), voice telephone\
    \ number,\n   email address, and facsimile telephone number.\n   [6] Protocol\
    \ services to register an object MUST be available to all\n   authorized registrars.\n"
- title: 3.4.3 Object Association
  contents:
  - "3.4.3 Object Association\n   [1] The protocol MUST provide services to associate\
    \ name servers with\n   domain names to delegate authority for zones.  A domain\
    \ name MAY have\n   multiple authoritative name servers.  Name servers MAY be\n\
    \   authoritative for multiple zones.\n   [2] The protocol MUST provide services\
    \ to associate IP addresses with\n   name servers.  A name server MAY have multiple\
    \ IP addresses.  An IP\n   address MAY be associated with multiple name server\
    \ registrations.\n   [3] The protocol MUST provide services to associate social\n\
    \   information with other objects.  Social information associations MUST\n  \
    \ be identified by type.  \"Registrant\" is an example social information\n  \
    \ type that might be associated with an object such as a domain name.\n   [4]\
    \ The protocol MUST provide services to associate object management\n   capabilities\
    \ on a per-registrar basis.\n   [5] Some managed objects represent shared resources\
    \ that might be\n   referenced by multiple registrars.  The protocol MUST provide\n\
    \   services that allow a registrar to associate an existing shared\n   resource\
    \ object with other registered objects sponsored by a second\n   registrar.  For\
    \ example, authority for the example.tld zone\n   (example.tld domain object managed\
    \ by registrar X) and authority for\n   the test.tld zone (test.tld domain object\
    \ managed by registrar Y)\n   might be delegated to server ns1.example.tld (managed\
    \ by registrar\n   X).  Registrar X maintains administrative control over domain\
    \ object\n   example.tld and server object ns1.example.tld, and registrar Y\n\
    \   maintains administrative control over domain object test.tld.\n   Registrar\
    \ Y does not have administrative control over server object\n   ns1.example.tld.\n"
- title: 3.4.4 Object Update
  contents:
  - "3.4.4 Object Update\n   [1] The protocol MUST provide services to update information\n\
    \   associated with registered Internet domain names.\n   [2] The protocol MUST\
    \ provide services to update information\n   associated with registered name servers.\n\
    \   [3] The protocol MUST provide services to update social information\n   associated\
    \ with registered human and organizational entities.\n   [4] The protocol MUST\
    \ provide services to limit requests to update a\n   registered object to the\
    \ registrar that currently sponsors the\n   registered object.\n   [5] The protocol\
    \ MUST provide services to explicitly reject\n   unauthorized attempts to update\
    \ a registered object.\n"
- title: 3.4.5 Object Transfer
  contents:
  - "3.4.5 Object Transfer\n   [1] The protocol MUST provide services to transfer\
    \ domain names among\n   authorized registrars.  Name servers registered in a\
    \ domain being\n   transferred MUST be transferred along with the domain itself.\
    \  For\n   example, name servers \"ns1.example.tld\" and \"ns2.example.tld\" MUST\
    \ be\n   implicitly transferred when domain \"example.tld\" is transferred.\n\
    \   [2] The protocol MUST provide services to describe all objects,\n   including\
    \ associated objects, that are transferred as a result of an\n   object transfer.\n\
    \   [3] The protocol MUST provide services to transfer social information\n  \
    \ objects among authorized registrars.\n   [4] Protocol transfer requests MUST\
    \ be initiated by the registrar who\n   wishes to become the new administrator\
    \ of an object.\n   [5] The protocol MUST provide services to confirm registrar\n\
    \   authorization to transfer an object.\n   [6] The protocol MUST provide services\
    \ that allow the requesting\n   registrar to cancel a requested object transfer\
    \ before the request\n   has been approved or rejected by the original sponsoring\
    \ registrar.\n   Requests to cancel the transfer of registered objects MUST be\
    \ limited\n   to the registrar that requested transfer of the registered object.\n\
    \   Unauthorized attempts to cancel the transfer of a registered object\n   MUST\
    \ be explicitly rejected.\n   [7] The protocol MUST provide services that allow\
    \ the original\n   sponsoring registrar to approve or reject a requested object\n\
    \   transfer.  Requests to approve or reject the transfer of registered\n   objects\
    \ MUST be limited to the registrar that currently sponsors the\n   registered\
    \ object.  Unauthorized attempts to approve or reject the\n   transfer of a registered\
    \ object MUST be explicitly rejected.\n   [8] The protocol MUST provide services\
    \ that allow both the original\n   sponsoring registrar and the potential new\
    \ registrar to monitor the\n   status of both pending and completed transfer requests.\n\
    \   [9] Transfer of an object MAY extend the object's registration\n   period.\
    \  If an object's registration period will be extended as the\n   result of a\
    \ transfer, the new expiration date and time MUST be\n   returned after successful\
    \ completion of a transfer request.\n   [10] Requests to initiate the transfer\
    \ of a registered object MUST be\n   available to all authorized registrars.\n\
    \   [11] Registrars might become non-functional and unable to respond to\n   transfer\
    \ requests.  It might be necessary for one registrar to assume\n   management\
    \ responsibility for the objects associated with another\n   registrar in the\
    \ event of registrar failure.  The protocol MUST NOT\n   restrict the ability\
    \ to transfer objects in the event of registrar\n   failure.\n"
- title: 3.4.6 Object Renewal/Extension
  contents:
  - "3.4.6 Object Renewal/Extension\n   [1] The protocol MUST provide services to\
    \ renew or extend the\n   validity period of registered domain names.  If applicable,\
    \ the new\n   expiration date and time MUST be returned after successful completion\n\
    \   of a request to renew or extend the validity period.\n   [2] Requests to renew\
    \ or extend the validity period of a registered\n   object MUST be limited to\
    \ the registrar that currently sponsors the\n   registered object.  Unauthorized\
    \ attempts to renew or extend the\n   validity period of a registered object MUST\
    \ be explicitly rejected.\n"
- title: 3.4.7 Object Deletion
  contents:
  - "3.4.7 Object Deletion\n   [1] The protocol MUST provide services to remove a\
    \ domain name from\n   the registry.\n   [2] The protocol MUST provide services\
    \ to remove a name server from\n   the registry.\n   [3] The protocol MUST provide\
    \ services to remove a social information\n   object from the registry.\n   [4]\
    \ Requests to remove a registered object MUST be limited to the\n   registrar\
    \ that currently sponsors the registered object.\n   Unauthorized attempts to\
    \ remove a registered object MUST be\n   explicitly rejected.\n"
- title: 3.4.8 Object Existence Query
  contents:
  - "3.4.8 Object Existence Query\n   This section describes requirements for a lightweight\
    \ query mechanism\n   whose sole purpose is to determine if an object exists in\
    \ a registry.\n   [1] The protocol MUST provide services to determine if a domain\
    \ name\n   exists in the registry.  Domain names MUST be searchable by fully\n\
    \   qualified name.\n   [2] The protocol MUST provide services to determine if\
    \ a name server\n   exists in the registry.  Name servers MUST be searchable by\
    \ fully\n   qualified name.\n   [3] The protocol MUST provide services to determine\
    \ if a social\n   information object exists in the registry.  Social information\
    \ MUST\n   be searchable by a registry-unique identifier.\n   [4] A query to determine\
    \ if an object exists in the registry MUST\n   return only a positive or negative\
    \ response so that server software\n   that responds to this query can be optimized\
    \ for speed.\n   [5] Requests to determine the existence of a registered object\
    \ MUST\n   be available to all authorized registrars.\n"
- title: 3.4.9 Object Information Query
  contents:
  - "3.4.9 Object Information Query\n   This section describes requirements for a\
    \ query mechanism whose\n   purpose is to provide detailed information describing\
    \ objects that\n   exist in a registry.\n   [1] The protocol MUST provide services\
    \ to retrieve information\n   describing a domain name from the registry.  Returned\
    \ information\n   MUST include the identifier of the current sponsoring registrar,\
    \ the\n   identifier of the registrar that originally registered the domain,\n\
    \   the creation date and time, the expiration date and time (if any),\n   the\
    \ date and time of the last successful update (if any), the\n   identifier of\
    \ the registrar that performed the last update, the date\n   and time of last\
    \ completed transfer (if any), the current status of\n   the domain, authorization\
    \ information, identifiers describing social\n   information associated with the\
    \ domain, and the subordinate name\n   servers registered in the domain.  Authorization\
    \ information MUST\n   only be returned to the current sponsoring registrar.\n\
    \   [2] The protocol MUST provide services to retrieve information\n   describing\
    \ a name server from the registry.  Returned information\n   MUST include the\
    \ identifier of the current sponsoring registrar, the\n   identifier of the registrar\
    \ that originally registered the name\n   server, the creation date and time,\
    \ the date and time of the last\n   successful update (if any), the identifier\
    \ of the registrar that\n   performed the last update, the date and time of last\
    \ completed\n   transfer (if any), and the IP addresses currently associated with\
    \ the\n   name server.\n   [3] The protocol MUST provide services to retrieve\
    \ social information\n   from the registry.  Returned information MUST include\
    \ identification\n   attributes (which MAY include name, address, telephone numbers,\
    \ and\n   email address), the identifier of the registrar that originally\n  \
    \ registered the information, the creation date and time, the date and\n   time\
    \ of the last successful update (if any), the identifier of the\n   registrar\
    \ that performed the last update, the date and time of last\n   completed transfer\
    \ (if any), and authorization information.\n   Authorization information MUST\
    \ only be returned to the current\n   sponsoring registrar.\n   [4] The protocol\
    \ MUST provide services to identify all associated\n   object references, such\
    \ as name servers associated with domains\n   (including delegations and hierarchical\
    \ relationships) and contacts\n   associated with domains.  This information MUST\
    \ be visible if the\n   object associations have an impact on the success or failure\
    \ of\n   protocol operations.\n   [5] Requests to retrieve information describing\
    \ a registered object\n   MAY be granted by the registrar that currently sponsors\
    \ the\n   registered object.  Unauthorized attempts to retrieve information\n\
    \   describing a registered object MUST be explicitly rejected.\n"
- title: 3.5 Domain Status Indicators
  contents:
  - "3.5 Domain Status Indicators\n   [1] The protocol MUST provide status indicators\
    \ that identify the\n   operational state of a domain name.  Indicators MAY be\
    \ provided to\n   identify a newly created state (the domain has been registered\
    \ but\n   has not yet appeared in a zone), a normal active state (the domain\n\
    \   can be modified and is published in a zone), an inactive state (the\n   domain\
    \ can be modified but is not published in a zone because it has\n   no authoritative\
    \ name servers), a hold state (the domain can not be\n   modified and is not published\
    \ in a zone), a lock state (the domain\n   can not be modified and is published\
    \ in a zone), a pending transfer\n   state, and a pending removal state.\n   [2]\
    \ If provided, protocol indicators for hold and lock status MUST\n   allow independent\
    \ setting by both registry and registrar.\n   [3] A domain MAY have multiple statuses\
    \ at any given time.  Some\n   statuses MAY be mutually exclusive.\n"
- title: 3.6 Transaction Completion Status
  contents:
  - "3.6 Transaction Completion Status\n   [1] The protocol MUST provide services\
    \ that unambiguously note the\n   success or failure of every transaction.  Individual\
    \ success and\n   error conditions MUST be noted distinctly.\n"
- title: 4. External Interface Requirements
  contents:
  - "4. External Interface Requirements\n   External interfaces define the interaction\
    \ points between a system\n   and entities that communicate with the system. \
    \ Specific areas of\n   interest include user interfaces, hardware interfaces,\
    \ software\n   interfaces, and communications interfaces.\n"
- title: 4.1 User, Hardware, and Software Interfaces
  contents:
  - "4.1 User, Hardware, and Software Interfaces\n   [1] The protocol MUST define\
    \ a wire format for data exchange, not an\n   application design for user, hardware,\
    \ or software interfaces so that\n   any application able to create the same bits\
    \ on the wire, and to\n   maintain the image of the same integrity constraints,\
    \ is a valid\n   implementation of the protocol.\n"
- title: 4.2 Communications Interfaces
  contents:
  - "4.2 Communications Interfaces\n   [1] Registries, registrars, and registrants\
    \ interact using a wide\n   spectrum of communications interfaces built upon multiple\
    \ protocols,\n   including transport layer protocols such as TCP and application\
    \ layer\n   protocols such as SMTP.  The protocol MUST only be run over IETF\n\
    \   approved protocols that feature congestion control, such as TCP and\n   SCTP.\n"
- title: 5. Performance Requirements
  contents:
  - "5. Performance Requirements\n   [1] Run-time performance is an absolutely critical\
    \ aspect of protocol\n   usability.  While performance is very heavily dependent\
    \ on the\n   hardware and software architecture that implements a protocol,\n\
    \   protocol features can have a direct impact on the ability of the\n   underlying\
    \ architecture to provide optimal performance.  The protocol\n   MUST be usable\
    \ in both high volume and low volume operating\n   environments.\n"
- title: 6. Design Constraints
  contents:
  - "6. Design Constraints\n   Protocol designers need to be aware of issues beyond\
    \ functional and\n   interface requirements when balancing protocol design decisions.\n\
    \   This section describes additional factors that might have an impact\n   on\
    \ protocol design, including standards compliance and hardware\n   limitations.\n"
- title: 6.1 Standards Compliance
  contents:
  - "6.1 Standards Compliance\n   [1] The protocol MUST conform to current IETF standards.\
    \  Standards\n   for domain and host name syntax, IP address syntax, security,\
    \ and\n   transport are particularly relevant.  Emerging standards for the\n \
    \  Domain Name System MUST be considered as they approach maturity.\n   [2] The\
    \ protocol MUST NOT reinvent services offered by lower layer\n   protocol standards.\
    \  For example, the use of a transport that\n   provides reliability is to be\
    \ chosen over use of a non-reliable\n   transport with the protocol itself using\
    \ retransmission to achieve\n   reliability.\n"
- title: 6.2 Hardware Limitations
  contents:
  - "6.2 Hardware Limitations\n   [1] The protocol MUST NOT define any features that\
    \ preclude hardware\n   independence.\n"
- title: 7. Service Attributes
  contents:
  - "7. Service Attributes\n   Elements of service beyond functional and interface\
    \ requirements are\n   essential factors to consider as part of a protocol design\
    \ effort.\n   This section describes several important service elements to be\n\
    \   addressed by protocol designers, including reliability, availability,\n  \
    \ scalability, maintainability, extensibility, and security.\n"
- title: 7.1 Reliability
  contents:
  - "7.1 Reliability\n   [1] Reliability is a measure of the extent to which a protocol\n\
    \   provides a consistent, dependable level of service.  Reliability is\n   an\
    \ important attribute for a domain name management protocol.  An\n   unreliable\
    \ protocol increases the risk of data exchange errors, which\n   at one extreme\
    \ can have a direct impact on protocol usability and at\n   the other extreme\
    \ can introduce discontinuity between registry and\n   registrar data stores.\
    \  The protocol MUST include features that\n   maximize reliability at the application\
    \ protocol layer. Services\n   provided by underlying transport, session, and\
    \ presentation protocols\n   SHOULD also be considered when addressing application\
    \ protocol\n   reliability.\n   [2] The protocol MUST be run over the most reliable\
    \ transport option\n   available in a given environment.  The protocol MUST NOT\
    \ implement a\n   service that is otherwise available in an applicable standard\n\
    \   transport.\n   [3] Default protocol actions for when a request or event times\
    \ out\n   MUST be well defined.\n"
- title: 7.2 Availability
  contents:
  - "7.2 Availability\n   [1] Availability is a measure of the extent to which the\
    \ services\n   provided by a protocol are accessible for an intended use.\n  \
    \ Availability of an application layer protocol is primarily dependent\n   on\
    \ the software and hardware systems that implement the protocol.\n   The protocol\
    \ MUST NOT include any features that impinge on the\n   underlying availability\
    \ of the software and hardware systems needed\n   to service the protocol.\n"
- title: 7.3 Scalability
  contents:
  - "7.3 Scalability\n   [1] Scalability is a measure of the extent to which a protocol\
    \ can\n   accommodate use growth while preserving acceptable operational\n   characteristics.\
    \  The protocol MUST be capable of operating at an\n   acceptable level as the\
    \ load on registry and registrar systems\n   increases.\n"
- title: 7.4 Maintainability
  contents:
  - "7.4 Maintainability\n   [1] Maintainability is a measure of the extent to which\
    \ a protocol\n   can be adapted or modified to address unforeseen operational\
    \ needs or\n   defects.  The protocol SHOULD be developed under the nominal working\n\
    \   group processes of the IETF to provide a well-known mechanism for\n   ongoing\
    \ maintenance.\n"
- title: 7.5 Extensibility
  contents:
  - "7.5 Extensibility\n   [1] Extensibility is a measure of the extent to which a\
    \ protocol can\n   be adapted for future uses that were not readily evident when\
    \ the\n   protocol was originally designed.  The protocol SHOULD provide\n   features\
    \ that at a minimum allow for the management of new object\n   types without requiring\
    \ revisions to the protocol itself.\n   [2] The requirements described in this\
    \ document are not intended to\n   limit the set of objects that might be managed\
    \ by the protocol.  The\n   protocol MUST include features that allow extension\
    \ to object types\n   that are not described in this document.\n   [3] The protocol\
    \ MUST provide an optional field within all commands\n   whose format and use\
    \ will be controlled by individual registry\n   policy.\n"
- title: 7.6 Security
  contents:
  - "7.6 Security\n   [1] Transactional privacy and integrity services MUST be available\
    \ at\n   some protocol layer.\n   [2] This document describes requirements for\
    \ basic user\n   identification and authentication services.  A generic protocol\
    \ MAY\n   include additional security services to protect against the attacks\n\
    \   described here.  A generic protocol MUST depend on other-layered\n   protocols\
    \ to provide security services that are not provided in the\n   generic protocol\
    \ itself.  A generic protocol that relies on security\n   services from other-layered\
    \ protocols MUST specify the protocol\n   layers needed to provide security services.\n"
- title: 8. Other Requirements
  contents:
  - "8. Other Requirements\n   Certain aspects of anticipated operational environments\
    \ have to be\n   considered when designing a generic registry-registrar protocol.\n\
    \   Areas of concern include database operations, operations, site\n   adaptation,\
    \ and data collection.\n"
- title: 8.1 Database Requirements
  contents:
  - "8.1 Database Requirements\n   [1] The protocol MUST NOT have any database dependencies.\
    \  However,\n   efficient use of database operations and resources has to be\n\
    \   considered as part of the protocol design effort.  The protocol\n   SHOULD\
    \ provide atomic features that can be efficiently implemented to\n   minimize\
    \ database load.\n"
- title: 8.2 Operational Requirements
  contents:
  - "8.2 Operational Requirements\n   [1] Registry-registrar interactions at the protocol\
    \ level SHOULD\n   operate without human intervention.  However, intermediate\
    \ services\n   that preserve the integrity of the protocol MAY be provided.  For\n\
    \   example, an intermediate service that determines if a registrant is\n   authorized\
    \ to register a name in a name space can be provided.\n   [2] The protocol MUST\
    \ provide services that allow clients and servers\n   to maintain a consistent\
    \ understanding of the current date and time\n   to effectively manage objects\
    \ with temporal properties.\n"
- title: 8.3 Site Adaptation Requirements
  contents:
  - "8.3 Site Adaptation Requirements\n   [1] Registries and registrars have varying\
    \ business and operational\n   requirements.  Several factors, including governance\
    \ standards, local\n   laws, customs, and business practices all play roles in\
    \ determining\n   how registries and registrars are operated.  The protocol MUST\
    \ be\n   flexible enough to operate in diverse registry-registrar\n   environments.\n"
- title: 8.4 Data Collection Requirements
  contents:
  - "8.4 Data Collection Requirements\n   [1] Some of the data exchanged between a\
    \ registrar and registry might\n   be considered personal, private, or otherwise\
    \ sensitive.  Disclosure\n   of such information might be restricted by laws and/or\
    \ business\n   practices.  The protocol MUST provide services to identify data\n\
    \   collection policies.\n   [2] Some of the social information exchanged between\
    \ a registrar and\n   registry might be required to create, manage, or operate\
    \ Internet or\n   DNS infrastructure facilities, such as zone files.  Such information\n\
    \   is subject to public disclosure per relevant IETF standards.\n"
- title: 9. Internationalization Requirements
  contents:
  - "9. Internationalization Requirements\n   [1] [RFC1035] describes Internet host\
    \ and domain names using\n   characters traditionally found in a subset of the\
    \ 7-bit US-ASCII\n   character set.  More recent standards, such as [RFC2130]\
    \ and\n   [RFC2277], describe the need to develop protocols for an\n   international\
    \ Internet.  These and other standards MUST be considered\n   during the protocol\
    \ design process to ensure world-wide usability of\n   a generic registry registrar\
    \ protocol.\n   [2] The protocol MUST allow exchange of data in formats consistent\n\
    \   with current international agreements for the representation of such\n   objects.\
    \  In particular, this means that addresses MUST include\n   country, that telephone\
    \ numbers MUST start with the international\n   prefix \"+\", and that appropriate\
    \ thought be given to the usability of\n   information in both local and international\
    \ contexts.  This means\n   that some elements (like names and addresses) might\
    \ need to be\n   represented multiple times, or formatted for different contexts\
    \ (for\n   instance English/French in Canada, or Latin/ideographic in Japan).\n\
    \   [3] All date and time values specified in a generic registry-\n   registrar\
    \ protocol MUST be expressed in Universal Coordinated Time.\n   Dates and times\
    \ MUST include information to represent a four-digit\n   calendar year, a calendar\
    \ month, a calendar day, hours, minutes,\n   seconds, fractional seconds, and\
    \ the time zone for Universal\n   Coordinated Time.  Calendars apart from the\
    \ Gregorian calendar MUST\n   NOT be used\n"
- title: 10. IANA Considerations
  contents:
  - "10. IANA Considerations\n   This document does not require any action on the\
    \ part of IANA.\n   Protocol specifications that require IANA action MUST follow\
    \ the\n   guidelines described in [RFC2434].\n"
- title: 11. Security Considerations
  contents:
  - "11. Security Considerations\n   Security services, including confidentiality,\
    \ authentication, access\n   control, integrity, and non-repudiation SHOULD be\
    \ applied to protect\n   interactions between registries and registrars as appropriate.\n\
    \   Confidentiality services protect sensitive exchanged information from\n  \
    \ inadvertent disclosure.  Authentication services confirm the claimed\n   identity\
    \ of registries and registrars before engaging in online\n   transactions.  Access\
    \ control services control access to data and\n   services based on identity.\
    \  Integrity services guarantee that\n   exchanged data has not been altered between\
    \ the registry and the\n   registrar.  Non-repudiation services provide assurance\
    \ that the\n   sender of a transaction can not deny being the source of the\n\
    \   transaction, and that the recipient cannot deny being the receiver of\n  \
    \ the transaction.\n"
- title: 12. Acknowledgements
  contents:
  - "12. Acknowledgements\n   This document was originally written as an individual\
    \ submission\n   Internet-Draft.  The provreg working group later adopted it as\
    \ a\n   working group document and provided many invaluable comments and\n   suggested\
    \ improvements.  The author wishes to acknowledge the efforts\n   of WG chairs\
    \ Edward Lewis and Jaap Akkerhuis for their process and\n   editorial contributions.\n\
    \   Specific comments that helped guide development of this document were\n  \
    \ provided by Harald Tveit Alvestrand, Christopher Ambler, Karl\n   Auerbach,\
    \ Jorg Bauer, George Belotsky, Eric Brunner-Williams, Jordyn\n   Buchanan, Randy\
    \ Bush, Bruce Campbell, Dan Cohen, Andre Cormier, Kent\n   Crispin, Dave Crocker,\
    \ Ayesha Damaraju, Lucio De Re, Mats Dufberg,\n   Peter Eisenhauer, Sheer El-Showk,\
    \ Urs Eppenberger, Patrik Faltstrom,\n   Paul George, Patrick Greenwell, Jarle\
    \ Greipsland, Olivier Guillard,\n   Alf Hansen, Paul Hoffman, Paul Kane, Shane\
    \ Kerr, Elmar Knipp, Mike\n   Lampson, Matt Larson, Ping Lu, Klaus Malorny, Bill\
    \ Manning, Michael\n   Mealling, Patrick Mevzek, Peter Mott, Catherine Murphy,\
    \ Martin\n   Oldfield, Geva Patz, Elisabeth Porteneuve, Ross Wm. Rader, Budi\n\
    \   Rahardjo, Annie Renard, Scott Rose, Takeshi Saigoh, Marcos Sanz,\n   Marcel\
    \ Schneider, J.  William Semich, James Seng, Richard Shockey,\n   Brian Spolarich,\
    \ William Tan, Stig Venaas, Herbert Vitzthum, and Rick\n   Wesson.\n"
- title: 13. References
  contents:
  - '13. References

    '
- title: 'Normative References:'
  contents:
  - "Normative References:\n   [RFC2119] Bradner, S., \"Key Words for Use in RFCs\
    \ to Indicate\n             Requirement Levels\", BCP 14, RFC 2119, March 1997.\n\
    \   [RFC2434] Narten, T. and H. Alvestrand, \"Guidelines for Writing an\n    \
    \         IANA Considerations Section in RFCs\", BCP 26, RFC 2434,\n         \
    \    October 1998.\n"
- title: 'Informative References:'
  contents:
  - "Informative References:\n   [RFC1035] Mockapetris, P., \"Domain Names - Implementation\
    \ and\n             Specification\", STD 13, RFC 1035, November 1987.\n   [RFC2130]\
    \ Weider, C., Preston, C., Simonsen, K., Alvestrand, H.,\n             Atkinson,\
    \ R., Cripsin, M. and P. Svanberg, \"The Report of\n             the IAB Character\
    \ Set Workshop\", RFC 2130, April 1997.\n   [RFC2277] Alvestrand, H., \"IETF Policy\
    \ on Character Sets and\n             Languages\", BCP 18, RFC 2277, January 1998.\n"
- title: 14. Editor's Address
  contents:
  - "14. Editor's Address\n   Scott Hollenbeck\n   VeriSign Global Registry Services\n\
    \   21345 Ridgetop Circle\n   Dulles, VA 20166-6503\n   USA\n   EMail: shollenbeck@verisign.com\n"
- title: 15.  Full Copyright Statement
  contents:
  - "15.  Full Copyright Statement\n   Copyright (C) The Internet Society (2002).\
    \  All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
