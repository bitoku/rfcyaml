- title: __initial_text__
  contents:
  - '   Grouping of Media Lines in the Session Description Protocol (SDP)

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2002).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document defines two Session Description Protocol (SDP)\n \
    \  attributes: \"group\" and \"mid\".  They allow to group together several\n\
    \   \"m\" lines for two different purposes: for lip synchronization and for\n\
    \   receiving media from a single flow (several media streams) that are\n   encoded\
    \ in different formats during a particular session, on\n   different ports and\
    \ host interfaces.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n          7.5.1 Parallel Encoding Using Different Codecs...........\
    \  11\n          7.5.2 Layered Encoding...................................  12\n\
    \          7.5.3 Same IP Address and Port Number....................  12\n   8.\
    \ Usage of the \"group\" Attribute in SIP........................  13\n      8.1\
    \ Mid Value in Answers.....................................  13\n          8.1.1\
    \ Example............................................  14\n      8.2 Group Value\
    \ in Answers...................................  15\n          8.2.1 Example............................................\
    \  15\n      8.3 Capability Negotiation...................................  16\n\
    \          8.3.1 Example............................................  17\n   \
    \   8.4 Backward Compatibility...................................  17\n      \
    \    8.4.1 Offerer does not Support \"group\"...................  17\n       \
    \   8.4.2 Answerer does not Support \"group\"..................  17\n   9.   \
    \ Security Considerations...................................  18\n   10.   IANA\
    \ Considerations.......................................  18\n   11.   Acknowledgements..........................................\
    \  19\n   12.   References................................................  19\n\
    \   13.   Authors' Addresses........................................  20\n   14.\
    \   Full Copyright Statement..................................  21\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   An SDP session description typically contains one or more\
    \ media lines\n   - they are commonly known as \"m\" lines.  When a session description\n\
    \   contains more than one \"m\" line, SDP does not provide any means to\n   express\
    \ a particular relationship between two or more of them.  When\n   an application\
    \ receives an SDP session description with more than one\n   \"m\" line, it is\
    \ up to the application what to do with them.  SDP does\n   not carry any information\
    \ about grouping media streams.\n   While in some environments this information\
    \ can be carried out of\n   band, it would be desirable to have extensions to\
    \ SDP that allow the\n   expression of how different media streams within a session\n\
    \   description relate to each other.  This document defines such\n   extensions.\n"
- title: 2. Terminology
  contents:
  - "2. Terminology\n   In this document, the key words \"MUST\", \"MUST NOT\", \"\
    REQUIRED\",\n   \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\",\n   and \"OPTIONAL\" are to be interpreted as described in BCP 14,\
    \ RFC 2119\n   [1] and indicate requirement levels for compliant implementations.\n"
- title: 3. Media Stream Identification Attribute
  contents:
  - "3. Media Stream Identification Attribute\n   A new \"media stream identification\"\
    \ media attribute is defined.  It\n   is used for identifying media streams within\
    \ a session description.\n   Its formatting in SDP [2] is described by the following\
    \ BNF:\n        mid-attribute      = \"a=mid:\" identification-tag\n        identification-tag\
    \ = token\n   The identification tag MUST be unique within an SDP session\n  \
    \ description.\n"
- title: 4. Group Attribute
  contents:
  - "4. Group Attribute\n   A new \"group\" session-level attribute is defined.  It\
    \ is used for\n   grouping together different media streams.  Its formatting in\
    \ SDP is\n   described by the following BNF:\n        group-attribute    = \"\
    a=group:\" semantics\n                             *(space identification-tag)\n\
    \        semantics          = \"LS\" | \"FID\"\n   This document defines two standard\
    \ semantics: LS (Lip\n   Synchronization) and FID (Flow Identification).  Further\
    \ semantics\n   need to be defined in a standards-track document.  However, defining\n\
    \   new semantics apart from LS and FID is discouraged.  Instead, it is\n   RECOMMENDED\
    \ to use other session description mechanisms such as\n   SDPng.\n"
- title: 5. Use of "group" and "mid"
  contents:
  - "5. Use of \"group\" and \"mid\"\n   All the \"m\" lines of a session description\
    \ that uses \"group\" MUST be\n   identified with a \"mid\" attribute whether\
    \ they appear in the group\n   line(s) or not.  If a session description contains\
    \ at least one \"m\"\n   line that has no \"mid\" identification the application\
    \ MUST NOT\n   perform any grouping of media lines.\n   \"a=group\" lines are\
    \ used to group together several \"m\" lines that are\n   identified by their\
    \ \"mid\" attribute.  \"a=group\" lines that contain\n   identification-tags that\
    \ do not correspond to any \"m\" line within the\n   session description MUST\
    \ be ignored.  The application acts as if the\n   \"a=group\" line did not exist.\
    \  The behavior of an application\n   receiving an SDP with grouped \"m\" lines\
    \ is defined by the semantics\n   field in the \"a=group\" line.\n   There MAY\
    \ be several \"a=group\" lines in a session description.  All\n   the \"a=group\"\
    \ lines of a session description MAY or MAY NOT use the\n   same semantics.  An\
    \ \"m\" line identified by its \"mid\" attribute MAY\n   appear in more than one\
    \ \"a=group\" line as long as the \"a=group\" lines\n   use different semantics.\
    \  An \"m\" line identified by its \"mid\"\n   attribute MUST NOT appear in more\
    \ than one \"a=group\" line using the\n   same semantics.\n"
- title: 6. Lip Synchronization (LS)
  contents:
  - "6. Lip Synchronization (LS)\n   An application that receives a session description\
    \ that contains \"m\"\n   lines that are grouped together using LS semantics MUST\
    \ synchronize\n   the playout of the corresponding media streams.  Note that LS\n\
    \   semantics not only apply to a video stream that has to be\n   synchronized\
    \ with an audio stream.  The playout of two streams of the\n   same type can be\
    \ synchronized as well.\n   For RTP streams synchronization is typically performed\
    \ using RTCP,\n   which provides enough information to map time stamps from the\n\
    \   different streams into a wall clock.  However, the concept of media\n   stream\
    \ synchronization MAY also apply to media streams that do not\n   make use of\
    \ RTP.  If this is the case, the application MUST recover\n   the original timing\
    \ relationship between the streams using whatever\n   available mechanism.\n"
- title: 6.1 Example of LS
  contents:
  - "6.1 Example of LS\n   The following example shows a session description of a\
    \ conference\n   that is being multicast.  The first media stream (mid:1) contains\
    \ the\n   voice of the speaker who speaks in English.  The second media stream\n\
    \   (mid:2) contains the video component and the third (mid:3) media\n   stream\
    \ carries the translation to Spanish of what he is saying.  The\n   first and\
    \ the second media streams MUST be synchronized.\n       v=0\n       o=Laura 289083124\
    \ 289083124 IN IP4 one.example.com\n       t=0 0\n       c=IN IP4 224.2.17.12/127\n\
    \       a=group:LS 1 2\n       m=audio 30000 RTP/AVP 0\n       a=mid:1\n     \
    \  m=video 30002 RTP/AVP 31\n       a=mid:2\n       m=audio 30004 RTP/AVP 0\n\
    \       i=This media stream contains the Spanish translation\n       a=mid:3\n\
    \   Note that although the third media stream is not present in the group\n  \
    \ line, it still MUST contain a mid attribute (mid:3), as stated\n   before.\n"
- title: 7. Flow Identification (FID)
  contents:
  - "7. Flow Identification (FID)\n   An \"m\" line in an SDP session description\
    \ defines a media stream.\n   However, SDP does not define what a media stream\
    \ is.  This definition\n   can be found in the RTSP specification. The RTSP RFC\
    \ [5] defines a\n   media stream as \"a single media instance, e.g., an audio\
    \ stream or a\n   video stream as well as a single whiteboard or shared application\n\
    \   group.  When using RTP, a stream consists of all RTP and RTCP packets\n  \
    \ created by a source within an RTP session\".\n   This definition assumes that\
    \ a single audio (or video) stream maps\n   into an RTP session.  The RTP RFC\
    \ [6] defines an RTP session as\n   follows: \"For each participant, the session\
    \ is defined by a\n   particular pair of destination transport addresses (one\
    \ network\n   address plus a port pair for RTP and RTCP)\".\n   While the previous\
    \ definitions cover the most common cases, there are\n   situations where a single\
    \ media instance, (e.g., an audio stream or a\n   video stream) is sent using\
    \ more than one RTP session.  Two examples\n   (among many others) of this kind\
    \ of situation are cellular systems\n   using SIP [3] and systems receiving DTMF\
    \ tones on a different host\n   than the voice.\n"
- title: 7.1 SIP and Cellular Access
  contents:
  - "7.1 SIP and Cellular Access\n   Systems using a cellular access and SIP as a\
    \ signalling protocol need\n   to receive media over the air.  During a session\
    \ the media can be\n   encoded using different codecs.  The encoded media has\
    \ to traverse\n   the radio interface.  The radio interface is generally characterized\n\
    \   by being bit error prone and associated with relatively high packet\n   transfer\
    \ delays.  In addition, radio interface resources in a\n   cellular environment\
    \ are scarce and thus expensive, which calls for\n   special measures in providing\
    \ a highly efficient transport.  In order\n   to get an appropriate speech quality\
    \ in combination with an efficient\n   transport, precise knowledge of codec properties\
    \ are required so that\n   a proper radio bearer for the RTP session can be configured\
    \ before\n   transferring the media.  These radio bearers are dedicated bearers\n\
    \   per media type, i.e., codec.\n   Cellular systems typically configure different\
    \ radio bearers on\n   different port numbers.  Therefore, incoming media has\
    \ to have\n   different destination port numbers for the different possible codecs\n\
    \   in order to be routed properly to the correct radio bearer.  Thus,\n   this\
    \ is an example in which several RTP sessions are used to carry a\n   single media\
    \ instance (the encoded speech from the sender).\n"
- title: 7.2 DTMF Tones
  contents:
  - "7.2 DTMF Tones\n   Some voice sessions include DTMF tones.  Sometimes the voice\
    \ handling\n   is performed by a different host than the DTMF handling.  It is\n\
    \   common to have an application server in the network gathering DTMF\n   tones\
    \ for the user while the user receives the encoded speech on his\n   user agent.\
    \  In this situations it is necessary to establish two RTP\n   sessions: one for\
    \ the voice and the other for the DTMF tones.  Both\n   RTP sessions are logically\
    \ part of the same media instance.\n"
- title: 7.3 Media Flow Definition
  contents:
  - "7.3 Media Flow Definition\n   The previous examples show that the definition\
    \ of a media stream in\n   [5] do not cover some scenarios.  It cannot be assumed\
    \ that a single\n   media instance maps into a single RTP session.  Therefore,\
    \ we\n   introduce the definition of a media flow:\n   Media flow consists of\
    \ a single media instance, e.g., an audio stream\n   or a video stream as well\
    \ as a single whiteboard or shared\n   application group.  When using RTP, a media\
    \ flow comprises one or\n   more RTP sessions.\n"
- title: 7.4 FID Semantics
  contents:
  - "7.4 FID Semantics\n   Several \"m\" lines grouped together using FID semantics\
    \ form a media\n   flow.  A media agent handling a media flow that comprises several\
    \ \"m\"\n   lines MUST send a copy of the media to every \"m\" line part of the\n\
    \   flow as long as the codecs and the direction attribute present in a\n   particular\
    \ \"m\" line allow it.\n   It is assumed that the application uses only one codec\
    \ at a time to\n   encode the media produced.  This codec MAY change dynamically\
    \ during\n   the session, but at any particular moment only one codec is in use.\n\
    \   The application encodes the media using the current codec and checks\n   one\
    \ by one all the \"m\" lines that are part of the flow.  If a\n   particular \"\
    m\" line contains the codec being used and the direction\n   attribute is \"sendonly\"\
    \ or \"sendrecv\", a copy of the encoded media is\n   sent to the address/port\
    \ specified in that particular media stream.\n   If either the \"m\" line does\
    \ not contain the codec being used or the\n   direction attribute is neither \"\
    sendonly\" nor \"sendrecv\", nothing is\n   sent over this media stream.\n   The\
    \ application typically ends up sending media to different\n   destinations (IP\
    \ address/port number) depending on the codec used at\n   any moment.\n"
- title: 7.4.1 Examples of FID
  contents:
  - "7.4.1 Examples of FID\n   The session description below might be sent by a SIP\
    \ user agent using\n   a cellular access.  The user agent supports GSM on port\
    \ 30000 and AMR\n   on port 30002.  When the remote party sends GSM, it will send\
    \ RTP\n   packets to port number 30000.  When AMR is the codec chosen, packets\n\
    \   will be sent to port 30002.  Note that the remote party can switch\n   between\
    \ both codecs dynamically in the middle of the session.\n   However, in this example,\
    \ only one media stream at a time carries\n   voice.  The other remains \"muted\"\
    \ while its corresponding codec is\n   not in use.\n         v=0\n         o=Laura\
    \ 289083124 289083124 IN IP4 two.example.com\n         t=0 0\n         c=IN IP4\
    \ 131.160.1.112\n         a=group:FID 1 2\n         m=audio 30000 RTP/AVP 3\n\
    \         a=rtpmap:3 GSM/8000\n         a=mid:1\n         m=audio 30002 RTP/AVP\
    \ 97\n         a=rtpmap:97 AMR/8000\n         a=fmtp:97 mode-set=0,2,5,7; mode-change-period=2;\n\
    \       mode-change-neighbor; maxframes=1\n         a=mid:2\n   (The linebreak\
    \ in the fmtp line accommodates RFC formatting\n   restrictions; SDP does not\
    \ have continuation lines.)\n   In the previous example, a system receives media\
    \ on the same IP\n   address on different port numbers.  The following example\
    \ shows how a\n   system can receive different codecs on different IP addresses.\n\
    \        v=0\n        o=Laura 289083124 289083124 IN IP4 three.example.com\n \
    \       t=0 0\n        c=IN IP4 131.160.1.112\n        a=group:FID 1 2\n     \
    \   m=audio 20000 RTP/AVP 0\n        c=IN IP4 131.160.1.111\n        a=rtpmap:0\
    \ PCMU/8000\n        a=mid:1\n        m=audio 30002 RTP/AVP 97\n        a=rtpmap:97\
    \ AMR/8000\n        a=fmtp:97 mode-set=0,2,5,7; mode-change-period=2;\n      mode-change-neighbor;\
    \ maxframes=1\n        a=mid:2\n   (The linebreak in the fmtp line accomodates\
    \ RFC formatting\n   restrictions; SDP does not have continuation lines.)\n  \
    \ The cellular terminal of this example only supports the AMR codec.\n   However,\
    \ many current IP phones only support PCM (payload 0).  In\n   order to be able\
    \ to interoperate with them, the cellular terminal\n   uses a transcoder whose\
    \ IP address is 131.160.1.111.  The cellular\n   terminal includes in its SDP\
    \ support for PCM at that IP address.\n   Remote systems will send AMR directly\
    \ to the terminal but PCM will be\n   sent to the transcoder.  The transcoder\
    \ will be configured (using\n   whatever method) to convert the incoming PCM audio\
    \ to AMR and send it\n   to the terminal.\n   The next example shows how the \"\
    group\" attribute used with FID\n   semantics can indicate the use of two different\
    \ codecs in the two\n   directions of a bidirectional media stream.\n       v=0\n\
    \       o=Laura 289083124 289083124 IN IP4 four.example.com\n       t=0 0\n  \
    \     c=IN IP4 131.160.1.112\n       a=group:FID 1 2\n       m=audio 30000 RTP/AVP\
    \ 0\n       a=mid:1\n       m=audio 30002 RTP/AVP 8\n       a=recvonly\n     \
    \  a=mid:2\n   A user agent that receives the SDP above knows that at a certain\n\
    \   moment it can send either PCM u-law to port number 30000 or PCM A-law\n  \
    \ to port number 30002.  However, the media agent also knows that the\n   other\
    \ end will only send PCM u-law (payload 0).\n   The following example shows a\
    \ session description with different \"m\"\n   lines grouped together using FID\
    \ semantics that contain the same\n   codec.\n       v=0\n       o=Laura 289083124\
    \ 289083124 IN IP4 five.example.com\n       t=0 0\n       c=IN IP4 131.160.1.112\n\
    \       a=group:FID 1 2 3\n       m=audio 30000 RTP/AVP 0\n       a=mid:1\n  \
    \     m=audio 30002 RTP/AVP 8\n       a=mid:2\n       m=audio 20000 RTP/AVP 0\
    \ 8\n       c=IN IP4 131.160.1.111\n       a=recvonly\n       a=mid:3\n   At a\
    \ particular point in time, if the media agent is sending PCM u-\n   law (payload\
    \ 0), it sends RTP packets to 131.160.1.112 on port 30000\n   and to 131.160.1.111\
    \ on port 20000 (first and third \"m\" lines).  If\n   it is sending PCM A-law\
    \ (payload 8), it sends RTP packets to\n   131.160.1.112 on port 30002 and to\
    \ 131.160.1.111 on port 20000\n   (second and third \"m\" lines).\n   The system\
    \ that generated the SDP above supports PCM u-law on port\n   30000 and PCM A-law\
    \ on port 30002.  Besides, it uses an application\n   server whose IP address\
    \ is 131.160.1.111 that records the\n   conversation.  That is why the application\
    \ server always receives a\n   copy of the audio stream regardless of the codec\
    \ being used at any\n   given moment (it actually performs an RTP dump, so it\
    \ can effectively\n   receive any codec).\n   Remember that if several \"m\" lines\
    \ grouped together using FID\n   semantics contain the same codec the media agent\
    \ MUST send media over\n   several RTP sessions at the same time.\n   The last\
    \ example of this section deals with DTMF tones.  DTMF tones\n   can be transmitted\
    \ using a regular voice codec or can be transmitted\n   as telephony events. \
    \ The RTP payload for DTMF tones treated as\n   telephone events is described\
    \ in RFC 2833 [7].  Below, there is an\n   example of an SDP session description\
    \ using FID semantics and this\n   payload type.\n       v=0\n       o=Laura 289083124\
    \ 289083124 IN IP4 six.example.com\n       t=0 0\n       c=IN IP4 131.160.1.112\n\
    \       a=group:FID 1 2\n       m=audio 30000 RTP/AVP 0\n       a=mid:1\n    \
    \   m=audio 20000 RTP/AVP 97\n       c=IN IP4 131.160.1.111\n       a=rtpmap:97\
    \ telephone-events\n       a=mid:2\n   The remote party would send PCM encoded\
    \ voice (payload 0) to\n   131.160.1.112 and DTMF tones encoded as telephony events\
    \ to\n   131.160.1.111.  Note that only voice or DTMF is sent at a particular\n\
    \   point of time.  When DTMF tones are sent, the first media stream does\n  \
    \ not carry any data and, when voice is sent, there is no data in the\n   second\
    \ media stream.  FID semantics provide different destinations\n   for alternative\
    \ codecs.\n"
- title: 7.5 Scenarios that FID does not Cover
  contents:
  - "7.5 Scenarios that FID does not Cover\n   It is worthwhile mentioning some scenarios\
    \ where the \"group\"\n   attribute using existing semantics (particularly FID)\
    \ might seem to\n   be applicable but is not.\n"
- title: 7.5.1 Parallel Encoding Using Different Codecs
  contents:
  - "7.5.1 Parallel Encoding Using Different Codecs\n   FID semantics are useful when\
    \ the application only uses one codec at\n   a time.  An application that encodes\
    \ the same media using different\n   codecs simultaneously MUST NOT use FID to\
    \ group those media lines.\n   Some systems that handle DTMF tones are a typical\
    \ example of parallel\n   encoding using different codecs.\n   Some systems implement\
    \ the RTP payload defined in RFC 2833, but when\n   they send DTMF tones they\
    \ do not mute the voice channel.  Therefore,\n   in effect they are sending two\
    \ copies of the same DTMF tone: encoded\n   as voice and encoded as a telephony\
    \ event.  When the receiver gets\n   both copies, it typically uses the telephony\
    \ event rather than the\n   tone encoded as voice.  FID semantics MUST NOT be\
    \ used in this\n   context to group both media streams since such a system is\
    \ not using\n   alternative codecs but rather different parallel encodings for\
    \ the\n   same information.\n"
- title: 7.5.2 Layered Encoding
  contents:
  - "7.5.2 Layered Encoding\n   Layered encoding schemes encode media in different\
    \ layers.  Quality\n   at the receiver varies depending on the number of layers\
    \ received.\n   SDP provides a means to group together contiguous multicast addresses\n\
    \   that transport different layers.  The \"c\" line below:\n       c=IN IP4 224.2.1.1/127/3\n\
    \   is equivalent to the following three \"c\" lines:\n       c=IN IP4 224.2.1.1/127\n\
    \       c=IN IP4 224.2.1.2/127\n       c=IN IP4 224.2.1.3/127\n   FID MUST NOT\
    \ be used to group \"m\" lines that do not represent the\n   same information.\
    \  Therefore, FID MUST NOT be used to group \"m\" lines\n   that contain the different\
    \ layers of layered encoding scheme.\n   Besides, we do not define new group semantics\
    \ to provide a more\n   flexible way of grouping different layers because the\
    \ already\n   existing SDP mechanism covers the most useful scenarios.\n"
- title: 7.5.3 Same IP Address and Port Number
  contents:
  - "7.5.3 Same IP Address and Port Number\n   If several codecs have to be sent to\
    \ the same IP address and port,\n   the traditional SDP syntax of listing several\
    \ codecs in the same \"m\"\n   line MUST be used.  FID MUST NOT be used to group\
    \ \"m\" lines with the\n   same IP address/port.  Therefore, an SDP like the one\
    \ below MUST NOT\n   be generated.\n       v=0\n       o=Laura 289083124 289083124\
    \ IN IP4 six.example.com\n       t=0 0\n       c=IN IP4 131.160.1.112\n      \
    \ a=group:FID 1 2\n       m=audio 30000 RTP/AVP 0\n       a=mid:1\n       m=audio\
    \ 30000 RTP/AVP 8\n       a=mid:2\n   The correct SDP for the session above would\
    \ be the following one:\n       v=0\n       o=Laura 289083124 289083124 IN IP4\
    \ six.example.com\n       t=0 0\n       c=IN IP4 131.160.1.112\n       m=audio\
    \ 30000 RTP/AVP 0 8\n   If two \"m\" lines are grouped using FID they MUST differ\
    \ in their\n   transport addresses (i.e., IP address plus port).\n"
- title: 8. Usage of the "group" Attribute in SIP
  contents:
  - "8. Usage of the \"group\" Attribute in SIP\n   SDP descriptions are used by several\
    \ different protocols, SIP among\n   them.  We include a section about SIP because\
    \ the \"group\" attribute\n   will most likely be used mainly by SIP systems.\n\
    \   SIP [3] is an application layer protocol for establishing,\n   terminating\
    \ and modifying multimedia sessions.  SIP carries session\n   descriptions in\
    \ the bodies of the SIP messages but is independent\n   from the protocol used\
    \ for describing sessions.  SDP [2] is one of\n   the protocols that can be used\
    \ for this purpose.\n   At session establishment SIP provides a three-way handshake\
    \ (INVITE-\n   200 OK-ACK) between end systems. However, just two of these three\n\
    \   messages carry SDP, as described in [4].\n"
- title: 8.1 Mid Value in Answers
  contents:
  - "8.1 Mid Value in Answers\n   The \"mid\" attribute is an identifier for a particular\
    \ media stream.\n   Therefore, the \"mid\" value in the offer MUST be the same\
    \ as the \"mid\"\n   value in the answer.  Besides, subsequent offers (e.g., in\
    \ a re-\n   INVITE) SHOULD use the same \"mid\" value for the already existing\n\
    \   media streams.\n   RFC 3264 [4] describes the usage of SDP in relation to\
    \ SIP.  The\n   offerer and the answerer align their media description so that\
    \ the\n   nth media stream (\"m=\" line) in the offerer's session description\n\
    \   corresponds to the nth media stream in the answerer's description.\n   The\
    \ presence of the \"group\" attribute in an SDP session description\n   does not\
    \ modify this behavior.\n   Since the \"mid\" attribute provides a means to label\
    \ \"m\" lines, it\n   would be possible to perform media alignment using \"mid\"\
    \ labels\n   rather than matching nth \"m\" lines.  However this would not bring\
    \ any\n   gain and would add complexity to implementations.  Therefore SIP\n \
    \  systems MUST perform media alignment matching nth lines regardless of\n   the\
    \ presence of the \"group\" or \"mid\" attributes.\n   If a media stream that\
    \ contained a particular \"mid\" identifier in the\n   offer contains a different\
    \ identifier in the answer the application\n   ignores all the \"mid\" and \"\
    group\" lines that might appear in the\n   session description.  The following\
    \ example illustrates this\n   scenario.\n"
- title: 8.1.1 Example
  contents:
  - "8.1.1 Example\n   Two SIP entities exchange SDPs during session establishment.\
    \ The\n   INVITE contains the SDP below:\n       v=0\n       o=Laura 289083124\
    \ 289083124 IN IP4 seven.example.com\n       t=0 0\n       c=IN IP4 131.160.1.112\n\
    \       a=group:FID 1 2\n       m=audio 30000 RTP/AVP 0 8\n       a=mid:1\n  \
    \     m=audio 30002 RTP/AVP 0 8\n       a=mid:2\n   The 200 OK response contains\
    \ the following SDP:\n       v=0\n       o=Bob 289083122 289083122 IN IP4 eigth.example.com\n\
    \       t=0 0\n       c=IN IP4 131.160.1.113\n       a=group:FID 1 2\n       m=audio\
    \ 25000 RTP/AVP 0 8\n       a=mid:2\n       m=audio 25002 RTP/AVP 0 8\n      \
    \ a=mid:1\n   Since alignment of \"m\" lines is performed based on matching of\
    \ nth\n   lines, the first stream had \"mid:1\" in the INVITE and \"mid:2\" in\
    \ the\n   200 OK.  Therefore, the application MUST ignore every \"mid\" and\n\
    \   \"group\" lines contained in the SDP.\n   A well-behaved SIP user agent would\
    \ have returned the SDP below in\n   the 200 OK:\n       v=0\n       o=Bob 289083122\
    \ 289083122 IN IP4 nine.example.com\n       t=0 0\n       c=IN IP4 131.160.1.113\n\
    \       a=group:FID 1 2\n       m=audio 25002 RTP/AVP 0 8\n       a=mid:1\n  \
    \     m=audio 25000 RTP/AVP 0 8\n       a=mid:2\n"
- title: 8.2 Group Value in Answers
  contents:
  - "8.2 Group Value in Answers\n   A SIP entity that receives an offer that contains\
    \ an \"a=group\" line\n   with semantics that it does not understand MUST return\
    \ an answer\n   without the \"group\" line.  Note that, as it was described in\
    \ the\n   previous section, the \"mid\" lines MUST still be present in the\n \
    \  answer.\n   A SIP entity that receives an offer that contains an \"a=group\"\
    \ line\n   with semantics that are understood MUST return an answer that\n   contains\
    \ an \"a=group\" line with the same semantics.  The\n   identification-tags contained\
    \ in this \"a=group\" lines MUST be the\n   same that were received in the offer\
    \ or a subset of them (zero\n   identification-tags is a valid subset).  When\
    \ the identification-tags\n   in the answer are a subset, the \"group\" value\
    \ to be used in the\n   session MUST be the one present in the answer.\n   SIP\
    \ entities refuse media streams by setting the port to zero in the\n   corresponding\
    \ \"m\" line.  \"a=group\" lines MUST NOT contain\n   identification-tags that\
    \ correspond to \"m\" lines with port zero.\n   Note that grouping of m lines\
    \ MUST always be requested by the\n   offerer, never by the answerer.  Since SIP\
    \ provides a two-way SDP\n   exchange, an answerer that requested grouping would\
    \ not know whether\n   the \"group\" attribute was accepted by the offerer or\
    \ not.  An\n   answerer that wants to group media lines SHOULD issue another offer\n\
    \   after having responded to the first one (in a re-INVITE for\n   instance).\n"
- title: 8.2.1 Example
  contents:
  - "8.2.1 Example\n   The example below shows how the callee refuses a media stream\
    \ offered\n   by the caller by setting its port number to zero.  The \"mid\" value\n\
    \   corresponding to that media stream is removed from the \"group\" value\n \
    \  in the answer.\n   SDP in the INVITE from caller to callee:\n       v=0\n \
    \      o=Laura 289083124 289083124 IN IP4 ten.example.com\n       t=0 0\n    \
    \   c=IN IP4 131.160.1.112\n       a=group:FID 1 2 3\n       m=audio 30000 RTP/AVP\
    \ 0\n       a=mid:1\n       m=audio 30002 RTP/AVP 8\n       a=mid:2\n       m=audio\
    \ 30004 RTP/AVP 3\n       a=mid:3\n   SDP in the INVITE from callee to caller:\n\
    \       v=0\n       o=Bob 289083125 289083125 IN IP4 eleven.example.com\n    \
    \   t=0 0\n       c=IN IP4 131.160.1.113\n       a=group:FID 1 3\n       m=audio\
    \ 20000 RTP/AVP 0\n       a=mid:1\n       m=audio 0 RTP/AVP 8\n       a=mid:2\n\
    \       m=audio 20002 RTP/AVP 3\n       a=mid:3\n"
- title: 8.3 Capability Negotiation
  contents:
  - "8.3 Capability Negotiation\n   A client that understands \"group\" and \"mid\"\
    \ but does not want to make\n   use of them in a particular session MAY want to\
    \ indicate that it\n   supports them.  If a client decides to do that, it SHOULD\
    \ add an\n   \"a=group\" line with no identification-tags for every semantics\
    \ it\n   understands.\n   If a server receives an offer that contains empty \"\
    a=group\" lines, it\n   SHOULD add its capabilities also in the form of empty\
    \ \"a=group\" lines\n   to its answer.\n"
- title: 8.3.1 Example
  contents:
  - "8.3.1 Example\n   A system that supports both LS and FID semantics but does not\
    \ want to\n   group any media stream for this particular session generates the\n\
    \   following SDP:\n       v=0\n       o=Bob 289083125 289083125 IN IP4 twelve.example.com\n\
    \       t=0 0\n       c=IN IP4 131.160.1.113\n       a=group:LS\n       a=group:FID\n\
    \       m=audio 20000 RTP/AVP 0 8\n   The server that receives that offer supports\
    \ FID but not LS.  It\n   responds with the SDP below:\n       v=0\n       o=Laura\
    \ 289083124 289083124 IN IP4 thirteen.example.com\n       t=0 0\n       c=IN IP4\
    \ 131.160.1.112\n       a=group:FID\n       m=audio 30000 RTP/AVP 0\n"
- title: 8.4 Backward Compatibility
  contents:
  - "8.4 Backward Compatibility\n   This document does not define any SIP \"Require\"\
    \ header.  Therefore,\n   if one of the SIP user agents does not understand the\
    \ \"group\"\n   attribute the standard SDP fall back mechanism MUST be used\n\
    \   (attributes that are not understood are simply ignored).\n"
- title: 8.4.1 Offerer does not Support "group"
  contents:
  - "8.4.1 Offerer does not Support \"group\"\n   This situation does not represent\
    \ a problem because grouping requests\n   are always performed by offerers, not\
    \ by answerers.  If the offerer\n   does not support \"group\" this attribute\
    \ will just not be used.\n"
- title: 8.4.2 Answerer does not Support "group"
  contents:
  - "8.4.2 Answerer does not Support \"group\"\n   The answerer will ignore the \"\
    group\" attribute, since it does not\n   understand it (it will also ignore the\
    \ \"mid\" attribute).  For LS\n   semantics, the answerer might decide to perform\
    \ or to not perform\n   synchronization between media streams.\n   For FID semantics,\
    \ the answerer will consider that the session\n   comprises several media streams.\n\
    \   Different implementations would behave in different ways.\n   In the case\
    \ of audio and different \"m\" lines for different codecs an\n   implementation\
    \ might decide to act as a mixer with the different\n   incoming RTP sessions,\
    \ which is the correct behavior.\n   An implementation might also decide to refuse\
    \ the request (e.g., 488\n   Not acceptable here or 606 Not Acceptable) because\
    \ it contains\n   several \"m\" lines.  In this case, the server does not support\
    \ the\n   type of session that the caller wanted to establish.  In case the\n\
    \   client is willing to establish a simpler session anyway, he SHOULD\n   re-try\
    \ the request without \"group\" attribute and only one \"m\" line\n   per flow.\n"
- title: 9. Security Considerations
  contents:
  - "9. Security Considerations\n   Using the \"group\" parameter with FID semantics,\
    \ an entity that\n   managed to modify the session descriptions exchanged between\
    \ the\n   participants to establish a multimedia session could force the\n   participants\
    \ to send a copy of the media to any particular\n   destination.\n   Integrity\
    \ mechanism provided by protocols used to exchange session\n   descriptions and\
    \ media encryption can be used to prevent this attack.\n"
- title: 10. IANA Considerations
  contents:
  - "10. IANA Considerations\n   This document defines two SDP attributes: \"mid\"\
    \ and \"group\".\n   The \"mid\" attribute is used to identify media streams within\
    \ a\n   session description and its format is defined in Section 3.\n   The \"\
    group\" attribute is used for grouping together different media\n   streams and\
    \ its format is defined in Section 4.\n   This document defines a framework to\
    \ group media lines in SDP using\n   different semantics. Semantics to be used\
    \ with this framework are\n   registered by the IANA when they are published in\
    \ standards track\n   RFCs.\n   The IANA Considerations section of the RFC MUST\
    \ include the following\n   information, which appears in the IANA registry along\
    \ with the RFC\n   number of the publication.\n      o  A brief description of\
    \ the semantics.\n      o  Token to be used within the group attribute. This token\
    \ may be\n         of any length, but SHOULD be no more than four characters long.\n\
    \      o  Reference to an standards track RFC.\n   The only entries in the registry\
    \ for the time being are:\n   Semantics            Token  Reference\n   -------------------\
    \  -----  -----------\n   Lip synchronization  LS     RFC 3388\n   Flow identification\
    \  FID    RFC 3388\n"
- title: 11. Acknowledgments
  contents:
  - "11. Acknowledgments\n   The authors would like to thank Jonathan Rosenberg, Adam\
    \ Roach, Orit\n   Levin and Joerg Ott for their feedback on this document.\n"
- title: 12. References
  contents:
  - '12. References

    '
- title: 12.1 Normative References
  contents:
  - "12.1 Normative References\n   [1] Bradner, S., \"Key words for use in RFCs to\
    \ Indicate Requirement\n       Levels\", BCP 14, RFC 2119, March 1997.\n   [2]\
    \ Handley, M. and V. Jacobson, \"SDP: Session Description Protocol\",\n      \
    \ RFC 2327, April 1998.\n   [3] Rosenberg, J., Schulzrinne, H., Camarillo, G.,\
    \ Johnston, A.,\n       Peterson, J., Sparks, R., Handley, M. and E. Schooler,\
    \ \"SIP:\n       Session Initiation Protocol\", RFC 3261, June 2002.\n   [4] Rosenberg,\
    \ J. and H. Schulzrinne, \"An Offer/Answer Model with the\n       Session Description\
    \ Protocol (SDP)\", RFC 3264, June 2002.\n"
- title: 12.2 Informative References
  contents:
  - "12.2 Informative References\n   [5] Schulzrinne, H., Rao, A. and R. Lanphier,\
    \ \"Real Time Streaming\n       Protocol (RTSP)\", RFC 2326, April 1998.\n   [6]\
    \ Schulzrinne, H., Casner, S., Frederick, R. and V. Jacobson, \"RTP:\n       A\
    \ Transport Protocol for Real-Time Applications\", RFC 1889,\n       January 1996.\n\
    \   [7] Schulzrinne, H. and S. Petrack, \"RTP Payload for DTMF Digits,\n     \
    \  Telephony Tones and Telephony Signals\", RFC 2833, May 2000.\n"
- title: 13. Authors' Addresses
  contents:
  - "13. Authors' Addresses\n   Gonzalo Camarillo\n   Ericsson\n   Advanced Signalling\
    \ Research Lab.\n   FIN-02420 Jorvas\n   Finland\n   Phone: +358 9 299 3371\n\
    \   Fax: +358 9 299 3052\n   EMail: Gonzalo.Camarillo@ericsson.com\n   Jan Holler\n\
    \   Ericsson Research\n   S-16480 Stockholm\n   Sweden\n   Phone: +46 8 58532845\n\
    \   Fax: +46 8 4047020\n   EMail: Jan.Holler@era.ericsson.se\n   Goran AP Eriksson\n\
    \   Ericsson Research\n   S-16480 Stockholm\n   Sweden\n   Phone: +46 8 58531762\n\
    \   Fax: +46 8 4047020\n   EMail: Goran.AP.Eriksson@era.ericsson.se\n   Henning\
    \ Schulzrinne\n   Dept. of Computer Science\n   Columbia University\n   1214 Amsterdam\
    \ Avenue\n   New York, NY 10027\n   USA\n   EMail: schulzrinne@cs.columbia.edu\n"
- title: 14. Full Copyright Statement
  contents:
  - "14. Full Copyright Statement\n   Copyright (C) The Internet Society (2002). \
    \ All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
