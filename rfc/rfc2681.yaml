- title: __initial_text__
  contents:
  - '                   A Round-trip Delay Metric for IPPM

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1999).  All Rights Reserved.\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   This memo defines a metric for round-trip delay of packets\
    \ across\n   Internet paths.  It builds on notions introduced and discussed in\
    \ the\n   IPPM Framework document, RFC 2330 [1], and follows closely the\n   corresponding\
    \ metric for One-way Delay (\"A One-way Delay Metric for\n   IPPM\") [2]; the\
    \ reader is assumed to be familiar with those\n   documents.\n   The memo was\
    \ largely written by copying material from the One-way\n   Delay metric.  The\
    \ intention is that, where the two metrics are\n   similar, they will be described\
    \ with similar or identical text, and\n   that where the two metrics differ, new\
    \ or modified text will be used.\n   This memo is intended to be parallel in structure\
    \ to a future\n   companion document for Packet Loss.\n   The key words \"MUST\"\
    , \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD\
    \ NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this\n   document are to\
    \ be interpreted as described in RFC 2119 [6].\n   Although RFC 2119 was written\
    \ with protocols in mind, the key words\n   are used in this document for similar\
    \ reasons.  They are used to\n   ensure the results of measurements from two different\
    \ implementations\n   are comparable, and to note instances when an implementation\
    \ could\n   perturb the network.\n   The structure of the memo is as follows:\n\
    \   +  A 'singleton' analytic metric, called Type-P-Round-trip-Delay,\n      will\
    \ be introduced to measure a single observation of round-trip\n      delay.\n\
    \   +  Using this singleton metric, a 'sample', called Type-P-Round-trip-\n  \
    \    Delay-Poisson-Stream, will be introduced to measure a sequence of\n     \
    \ singleton delays measured at times taken from a Poisson process.\n   +  Using\
    \ this sample, several 'statistics' of the sample will be\n      defined and discussed.\n\
    \   This progression from singleton to sample to statistics, with clear\n   separation\
    \ among them, is important.\n   Whenever a technical term from the IPPM Framework\
    \ document is first\n   used in this memo, it will be tagged with a trailing asterisk.\
    \  For\n   example, \"term*\" indicates that \"term\" is defined in the Framework.\n"
- title: 1.1. Motivation
  contents:
  - "1.1. Motivation\n   Round-trip delay of a Type-P* packet from a source host*\
    \ to a\n   destination host is useful for several reasons:\n   +  Some applications\
    \ do not perform well (or at all) if end-to-end\n      delay between hosts is\
    \ large relative to some threshold value.\n   +  Erratic variation in delay makes\
    \ it difficult (or impossible) to\n      support many interactive real-time applications.\n\
    \   +  The larger the value of delay, the more difficult it is for\n      transport-layer\
    \ protocols to sustain high bandwidths.\n   +  The minimum value of this metric\
    \ provides an indication of the\n      delay due only to propagation and transmission\
    \ delay.\n   +  The minimum value of this metric provides an indication of the\n\
    \      delay that will likely be experienced when the path* traversed is\n   \
    \   lightly loaded.\n   +  Values of this metric above the minimum provide an\
    \ indication of\n      the congestion present in the path.\n   The measurement\
    \ of round-trip delay instead of one-way delay has\n   several weaknesses, summarized\
    \ here:\n   +  The Internet path from a source to a destination may differ from\n\
    \      the path from the destination back to the source (\"asymmetric\n      paths\"\
    ), such that different sequences of routers are used for the\n      forward and\
    \ reverse paths.  Therefore round-trip measurements\n      actually measure the\
    \ performance of two distinct paths together.\n   +  Even when the two paths are\
    \ symmetric, they may have radically\n      different performance characteristics\
    \ due to asymmetric queueing.\n   +  Performance of an application may depend\
    \ mostly on the performance\n      in one direction.\n   +  In quality-of-service\
    \ (QoS) enabled networks, provisioning in one\n      direction may be radically\
    \ different than provisioning in the\n      reverse direction, and thus the QoS\
    \ guarantees differ.\n   On the other hand, the measurement of round-trip delay\
    \ has two\n   specific advantages:\n   +  Ease of deployment: unlike in one-way\
    \ measurement, it is often\n      possible to perform some form of round-trip\
    \ delay measurement\n      without installing measurement-specific software at\
    \ the intended\n      destination.  A variety of approaches are well-known, including\n\
    \      use of ICMP Echo or of TCP-based methodologies (similar to those\n    \
    \  outlined in \"IPPM Metrics for Measuring Connectivity\" [4]).\n      However,\
    \ some approaches may introduce greater uncertainty in the\n      time for the\
    \ destination to produce a response (see\n      Section 2.7.3).\n   +  Ease of\
    \ interpretation: in some circumstances, the round-trip time\n      is in fact\
    \ the quantity of interest. Deducing the round-trip time\n      from matching\
    \ one-way measurements and an assumption of the\n      destination processing\
    \ time is less direct and potentially less\n      accurate.\n"
- title: 1.2. General Issues Regarding Time
  contents:
  - "1.2. General Issues Regarding Time\n   Whenever a time (i.e., a moment in history)\
    \ is mentioned here, it is\n   understood to be measured in seconds (and fractions)\
    \ relative to UTC.\n   As described more fully in the Framework document, there\
    \ are four\n   distinct, but related notions of clock uncertainty:\n   synchronization*\n\
    \        measures the extent to which two clocks agree on what time it\n     \
    \   is.  For example, the clock on one host might be 5.4 msec ahead\n        of\
    \ the clock on a second host.\n   accuracy*\n        measures the extent to which\
    \ a given clock agrees with UTC.  For\n        example, the clock on a host might\
    \ be 27.1 msec behind UTC.\n   resolution*\n        measures the precision of\
    \ a given clock.  For example, the clock\n        on an old Unix host might tick\
    \ only once every 10 msec, and thus\n        have a resolution of only 10 msec.\n\
    \   skew*\n        measures the change of accuracy, or of synchronization, with\n\
    \        time.  For example, the clock on a given host might gain 1.3\n      \
    \  msec per hour and thus be 27.1 msec behind UTC at one time and\n        only\
    \ 25.8 msec an hour later.  In this case, we say that the\n        clock of the\
    \ given host has a skew of 1.3 msec per hour relative\n        to UTC, which threatens\
    \ accuracy.  We might also speak of the\n        skew of one clock relative to\
    \ another clock, which threatens\n        synchronization.\n"
- title: 2. A Singleton Definition for Round-trip Delay
  contents:
  - '2. A Singleton Definition for Round-trip Delay

    '
- title: '2.1. Metric Name:'
  contents:
  - "2.1. Metric Name:\n   Type-P-Round-trip-Delay\n"
- title: '2.2. Metric Parameters:'
  contents:
  - "2.2. Metric Parameters:\n   +  Src, the IP address of a host\n   +  Dst, the\
    \ IP address of a host\n   +  T, a time\n"
- title: '2.3. Metric Units:'
  contents:
  - "2.3. Metric Units:\n   The value of a Type-P-Round-trip-Delay is either a real\
    \ number, or an\n   undefined (informally, infinite) number of seconds.\n"
- title: '2.4. Definition:'
  contents:
  - "2.4. Definition:\n   For a real number dT, >>the *Type-P-Round-trip-Delay* from\
    \ Src to Dst\n   at T is dT<< means that Src sent the first bit of a Type-P packet\
    \ to\n   Dst at wire-time* T, that Dst received that packet, then immediately\n\
    \   sent a Type-P packet back to Src, and that Src received the last bit\n   of\
    \ that packet at wire-time T+dT.\n   >>The *Type-P-Round-trip-Delay* from Src\
    \ to Dst at T is undefined\n   (informally, infinite)<< means that Src sent the\
    \ first bit of a\n   Type-P packet to Dst at wire-time T and that (either Dst\
    \ did not\n   receive the packet, Dst did not send a Type-P packet in response,\
    \ or)\n   Src did not receive that response packet.\n   >>The *Type-P-Round-trip-Delay\
    \ between Src and Dst at T<< means\n   either the *Type-P-Round-trip-Delay from\
    \ Src to Dst at T or the\n   *Type-P-Round-trip-Delay from Dst to Src at T.  When\
    \ this notion is\n   used, it is understood to be specifically ambiguous which\
    \ host acts\n   as Src and which as Dst.  {Comment: This ambiguity will usually\
    \ be a\n   small price to pay for being able to have one measurement, launched\n\
    \   from either Src or Dst, rather than having two measurements.}\n   Suggestions\
    \ for what to report along with metric values appear in\n   Section 3.8 after\
    \ a discussion of the metric, methodologies for\n   measuring the metric, and\
    \ error analysis.\n"
- title: '2.5. Discussion:'
  contents:
  - "2.5. Discussion:\n   Type-P-Round-trip-Delay is a relatively simple analytic\
    \ metric, and\n   one that we believe will afford effective methods of measurement.\n\
    \   The following issues are likely to come up in practice:\n   +  The timestamp\
    \ values (T) for the time at which delays are measured\n      should be fairly\
    \ accurate in order to draw meaningful conclusions\n      about the state of the\
    \ network at a given T.  Therefore, Src\n      should have an accurate knowledge\
    \ of time-of-day.  NTP [3] affords\n      one way to achieve time accuracy to\
    \ within several milliseconds.\n      Depending on the NTP server, higher accuracy\
    \ may be achieved, for\n      example when NTP servers make use of GPS systems\
    \ as a time source.\n      Note that NTP will adjust the instrument's clock. \
    \ If an\n      adjustment is made between the time the initial timestamp is taken\n\
    \      and the time the final timestamp is taken the adjustment will\n      affect\
    \ the uncertainty in the measured delay.  This uncertainty\n      must be accounted\
    \ for in the instrument's calibration.\n   +  A given methodology will have to\
    \ include a way to determine\n      whether a delay value is infinite or whether\
    \ it is merely very\n      large (and the packet is yet to arrive at Dst).  As\
    \ noted by\n      Mahdavi and Paxson [4], simple upper bounds (such as the 255\n\
    \      seconds theoretical upper bound on the lifetimes of IP\n      packets [5])\
    \ could be used, but good engineering, including an\n      understanding of packet\
    \ lifetimes, will be needed in practice.\n      {Comment: Note that, for many\
    \ applications of these metrics, the\n      harm in treating a large delay as\
    \ infinite might be zero or very\n      small.  A TCP data packet, for example,\
    \ that arrives only after\n      several multiples of the RTT may as well have\
    \ been lost.}\n   +  If the packet is duplicated so that multiple non-corrupt\
    \ instances\n      of the response arrive back at the source, then the packet\
    \ is\n      counted as received, and the first instance to arrive back at the\n\
    \      source determines the packet's round-trip delay.\n   +  If the packet is\
    \ fragmented and if, for whatever reason,\n      reassembly does not occur, then\
    \ the packet will be deemed lost.\n"
- title: '2.6. Methodologies:'
  contents:
  - "2.6. Methodologies:\n   As with other Type-P-* metrics, the detailed methodology\
    \ will depend\n   on the Type-P (e.g., protocol number, UDP/TCP port number, size,\n\
    \   precedence).\n   Generally, for a given Type-P, the methodology would proceed\
    \ as\n   follows:\n   +  At the Src host, select Src and Dst IP addresses, and\
    \ form a test\n      packet of Type-P with these addresses.  Any 'padding' portion\
    \ of\n      the packet needed only to make the test packet a given size should\n\
    \      be filled with randomized bits to avoid a situation in which the\n    \
    \  measured delay is lower than it would otherwise be due to\n      compression\
    \ techniques along the path.  The test packet must have\n      some identifying\
    \ information so that the response to it can be\n      identified by Src when\
    \ Src receives the response; one means to do\n      this is by placing the timestamp\
    \ generated just before sending the\n      test packet in the packet itself.\n\
    \   +  At the Dst host, arrange to receive and respond to the test\n      packet.\
    \  At the Src host, arrange to receive the corresponding\n      response packet.\n\
    \   +  At the Src host, take the initial timestamp and then send the\n      prepared\
    \ Type-P packet towards Dst.  Note that the timestamp could\n      be placed inside\
    \ the packet, or kept separately as long as the\n      packet contains a suitable\
    \ identifier so the received timestamp\n      can be compared with the send timestamp.\n\
    \   +  If the packet arrives at Dst, send a corresponding response packet\n  \
    \    back from Dst to Src as soon as possible.\n   +  If the response packet arrives\
    \ within a reasonable period of time,\n      take the final timestamp as soon\
    \ as possible upon the receipt of\n      the packet.  By subtracting the two timestamps,\
    \ an estimate of\n      round-trip delay can be computed.  If the delay between\
    \ the\n      initial timestamp and the actual sending of the packet is known,\n\
    \      then the estimate could be adjusted by subtracting this amount;\n     \
    \ uncertainty in this value must be taken into account in error\n      analysis.\
    \  Similarly, if the delay between the actual receipt of\n      the response packet\
    \ and final timestamp is known, then the\n      estimate could be adjusted by\
    \ subtracting this amount; uncertainty\n      in this value must be taken into\
    \ account in error analysis.  See\n      the next section, \"Errors and Uncertainties\"\
    , for a more detailed\n      discussion.\n   +  If the packet fails to arrive\
    \ within a reasonable period of time,\n      the round-trip delay is taken to\
    \ be undefined (informally,\n      infinite).  Note that the threshold of 'reasonable'\
    \ is a parameter\n      of the methodology.\n   Issues such as the packet format\
    \ and the means by which Dst knows\n   when to expect the test packet are outside\
    \ the scope of this\n   document.\n   {Comment: Note that you cannot in general\
    \ add two Type-P-One-way-\n   Delay values (see [2]) to form a Type-P-Round-trip-Delay\
    \ value.  In\n   order to form a Type-P-Round-trip-Delay value, the return packet\
    \ must\n   be triggered by the reception of a packet from Src.}\n   {Comment:\
    \ \"ping\" would qualify as a round-trip measure under this\n   definition, with\
    \ a Type-P of ICMP echo request/reply with 60-byte\n   packets.  However, the\
    \ uncertainties associated with a typical ping\n   program must be analyzed as\
    \ in the next section, including the type\n   of reflecting point (a router may\
    \ not handle an ICMP request in the\n   fast path) and effects of load on the\
    \ reflecting point.}\n"
- title: '2.7. Errors and Uncertainties:'
  contents:
  - "2.7. Errors and Uncertainties:\n   The description of any specific measurement\
    \ method should include an\n   accounting and analysis of various sources of error\
    \ or uncertainty.\n   The Framework document provides general guidance on this\
    \ point, but\n   we note here the following specifics related to delay metrics:\n\
    \   +  Errors or uncertainties due to uncertainty in the clock of the Src\n  \
    \    host.\n   +  Errors or uncertainties due to the difference between 'wire\
    \ time'\n      and 'host time'.\n   +  Errors or uncertainties due to time required\
    \ by the Dst to receive\n      the packet from the Src and send the corresponding\
    \ response.\n   In addition, the loss threshold may affect the results.  Each\
    \ of\n   these are discussed in more detail below, along with a section\n   (\"\
    Calibration\") on accounting for these errors and uncertainties.\n"
- title: 2.7.1. Errors or Uncertainties Related to Clocks
  contents:
  - "2.7.1. Errors or Uncertainties Related to Clocks\n   The uncertainty in a measurement\
    \ of round-trip delay is related, in\n   part, to uncertainty in the clock of\
    \ the Src host.  In the following,\n   we refer to the clock used to measure when\
    \ the packet was sent from\n   Src as the source clock, and we refer to the observed\
    \ time when the\n   packet was sent by the source as Tinitial, and the observed\
    \ time when\n   the packet was received by the source as Tfinal.  Alluding to\
    \ the\n   notions of synchronization, accuracy, resolution, and skew mentioned\n\
    \   in the Introduction, we note the following:\n   +  While in one-way delay\
    \ there is an issue of the synchronization of\n      the source clock and the\
    \ destination clock, in round-trip delay\n      there is an (easier) issue of\
    \ self-synchronization, as it were,\n      between the source clock at the time\
    \ the test packet is sent and\n      the (same) source clock at the time the response\
    \ packet is\n      received.  Theoretically a very severe case of skew could threaten\n\
    \      this.  In practice, the greater threat is anything that would\n      cause\
    \ a discontinuity in the source clock during the time between\n      the taking\
    \ of the initial and final timestamp.  This might happen,\n      for example,\
    \ with certain implementations of NTP.\n   +  The accuracy of a clock is important\
    \ only in identifying the time\n      at which a given delay was measured.  Accuracy,\
    \ per se, has no\n      importance to the accuracy of the measurement of delay.\n\
    \   +  The resolution of a clock adds to uncertainty about any time\n      measured\
    \ with it.  Thus, if the source clock has a resolution of\n      10 msec, then\
    \ this adds 10 msec of uncertainty to any time value\n      measured with it.\
    \  We will denote the resolution of the source\n      clock as Rsource.\n   Taking\
    \ these items together, we note that naive computation Tfinal-\n   Tinitial will\
    \ be off by 2*Rsource.\n"
- title: 2.7.2. Errors or Uncertainties Related to Wire-time vs Host-time
  contents:
  - "2.7.2. Errors or Uncertainties Related to Wire-time vs Host-time\n   As we have\
    \ defined round-trip delay, we would like to measure the\n   time between when\
    \ the test packet leaves the network interface of Src\n   and when the corresponding\
    \ response packet (completely) arrives at\n   the network interface of Src, and\
    \ we refer to these as \"wire times\".\n   If the timings are themselves performed\
    \ by software on Src, however,\n   then this software can only directly measure\
    \ the time between when\n   Src grabs a timestamp just prior to sending the test\
    \ packet and when\n   it grabs a timestamp just after having received the response\
    \ packet,\n   and we refer to these two points as \"host times\".\n   Another\
    \ contributor to this problem is time spent at Dst between the\n   receipt there\
    \ of the test packet and the sending of the response\n   packet.  Ideally, this\
    \ time is zero; it is explored further in the\n   next section.\n   To the extent\
    \ that the difference between wire time and host time is\n   accurately known,\
    \ this knowledge can be used to correct for host time\n   measurements and the\
    \ corrected value more accurately estimates the\n   desired (wire time) metric.\n\
    \   To the extent, however, that the difference between wire time and\n   host\
    \ time is uncertain, this uncertainty must be accounted for in an\n   analysis\
    \ of a given measurement method.  We denote by Hinitial an\n   upper bound on\
    \ the uncertainty in the difference between wire time\n   and host time on the\
    \ Src host in sending the test packet, and\n   similarly define Hfinal for the\
    \ difference on the Src host in\n   receiving the response packet.  We then note\
    \ that these problems\n   introduce a total uncertainty of Hinitial + Hfinal.\
    \  This estimate of\n   total wire-vs-host uncertainty should be included in the\n\
    \   error/uncertainty analysis of any measurement implementation.\n"
- title: 2.7.3. Errors or Uncertainties Related to Dst Producing a Response
  contents:
  - "2.7.3. Errors or Uncertainties Related to Dst Producing a Response\n   Any time\
    \ spent by the destination host in receiving and recognizing\n   the packet from\
    \ Src, and then producing and sending the corresponding\n   response adds additional\
    \ error and uncertainty to the round-trip\n   delay measurement.  The error equals\
    \ the difference between the wire\n   time the first bit of the packet is received\
    \ by Dst and the wire time\n   the first bit of the response is sent by Dst. \
    \ To the extent that\n   this difference is accurately known, this knowledge can\
    \ be used to\n   correct the desired metric.  To the extent, however, that this\n\
    \   difference is uncertain, this uncertainty must be accounted for in\n   the\
    \ error analysis of a measurement implementation. We denote this\n   uncertainty\
    \ by Hrefl.  This estimate of uncertainty should be\n   included in the error/uncertainty\
    \ analysis of any measurement\n   implementation.\n"
- title: 2.7.4. Calibration
  contents:
  - "2.7.4. Calibration\n   Generally, the measured values can be decomposed as follows:\n\
    \       measured value = true value + systematic error + random error\n   If the\
    \ systematic error (the constant bias in measured values) can be\n   determined,\
    \ it can be compensated for in the reported results.\n       reported value =\
    \ measured value - systematic error\n   therefore\n       reported value = true\
    \ value + random error\n   The goal of calibration is to determine the systematic\
    \ and random\n   error generated by the instruments themselves in as much detail\
    \ as\n   possible.  At a minimum, a bound (\"e\") should be found such that the\n\
    \   reported value is in the range (true value - e) to (true value + e)\n   at\
    \ least 95 percent of the time.  We call \"e\" the calibration error\n   for the\
    \ measurements.  It represents the degree to which the values\n   produced by\
    \ the measurement instrument are repeatable; that is, how\n   closely an actual\
    \ delay of 30 ms is reported as 30 ms.  {Comment: 95\n   percent was chosen because\
    \ (1) some confidence level is desirable to\n   be able to remove outliers, which\
    \ will be found in measuring any\n   physical property; and (2) a particular confidence\
    \ level should be\n   specified so that the results of independent implementations\
    \ can be\n   compared.}\n   From the discussion in the previous three sections,\
    \ the error in\n   measurements could be bounded by determining all the individual\n\
    \   uncertainties, and adding them together to form\n       2*Rsource + Hinitial\
    \ + Hfinal + Hrefl.\n   However, reasonable bounds on both the clock-related uncertainty\n\
    \   captured by the first term and the host-related uncertainty captured\n   by\
    \ the last three terms should be possible by careful design\n   techniques and\
    \ calibrating the instruments using a known, isolated,\n   network in a lab.\n\
    \   The host-related uncertainties, Hinitial + Hfinal + Hrefl, could be\n   bounded\
    \ by connecting two instruments back-to-back with a high-speed\n   serial link\
    \ or isolated LAN segment.  In this case, repeated\n   measurements are measuring\
    \ the same round-trip delay.\n   If the test packets are small, such a network\
    \ connection has a\n   minimal delay that may be approximated by zero.  The measured\
    \ delay\n   therefore contains only systematic and random error in the\n   instrumentation.\
    \  The \"average value\" of repeated measurements is the\n   systematic error,\
    \ and the variation is the random error.\n   One way to compute the systematic\
    \ error, and the random error to a\n   95% confidence is to repeat the experiment\
    \ many times - at least\n   hundreds of tests.  The systematic error would then\
    \ be the median.\n   The random error could then be found by removing the systematic\
    \ error\n   from the measured values.  The 95% confidence interval would be the\n\
    \   range from the 2.5th percentile to the 97.5th percentile of these\n   deviations\
    \ from the true value.  The calibration error \"e\" could then\n   be taken to\
    \ be the largest absolute value of these two numbers, plus\n   the clock-related\
    \ uncertainty.  {Comment: as described, this bound is\n   relatively loose since\
    \ the uncertainties are added, and the absolute\n   value of the largest deviation\
    \ is used.  As long as the resulting\n   value is not a significant fraction of\
    \ the measured values, it is a\n   reasonable bound.  If the resulting value is\
    \ a significant fraction\n   of the measured values, then more exact methods will\
    \ be needed to\n   compute the calibration error.}\n   Note that random error\
    \ is a function of measurement load.  For\n   example, if many paths will be measured\
    \ by one instrument, this might\n   increase interrupts, process scheduling, and\
    \ disk I/O (for example,\n   recording the measurements), all of which may increase\
    \ the random\n   error in measured singletons.  Therefore, in addition to minimal\
    \ load\n   measurements to find the systematic error, calibration measurements\n\
    \   should be performed with the same measurement load that the\n   instruments\
    \ will see in the field.\n   We wish to reiterate that this statistical treatment\
    \ refers to the\n   calibration of the instrument; it is used to \"calibrate the\
    \ meter\n   stick\" and say how well the meter stick reflects reality.\n   In\
    \ addition to calibrating the instruments for finite delay, two\n   checks should\
    \ be made to ensure that packets reported as losses were\n   really lost.  First,\
    \ the threshold for loss should be verified.  In\n   particular, ensure the \"\
    reasonable\" threshold is reasonable: that it\n   is very unlikely a packet will\
    \ arrive after the threshold value, and\n   therefore the number of packets lost\
    \ over an interval is not\n   sensitive to the error bound on measurements.  Second,\
    \ consider the\n   possibility that a packet arrives at the network interface,\
    \ but is\n   lost due to congestion on that interface or to other resource\n \
    \  exhaustion (e.g. buffers) in the instrument.\n"
- title: '2.8. Reporting the Metric:'
  contents:
  - "2.8. Reporting the Metric:\n   The calibration and context in which the metric\
    \ is measured MUST be\n   carefully considered, and SHOULD always be reported\
    \ along with metric\n   results.  We now present four items to consider: the Type-P\
    \ of test\n   packets, the threshold of infinite delay (if any), error calibration,\n\
    \   and the path traversed by the test packets.  This list is not\n   exhaustive;\
    \ any additional information that could be useful in\n   interpreting applications\
    \ of the metrics should also be reported.\n"
- title: 2.8.1. Type-P
  contents:
  - "2.8.1. Type-P\n   As noted in the Framework document [1], the value of the metric\
    \ may\n   depend on the type of IP packets used to make the measurement, or\n\
    \   \"type-P\".  The value of Type-P-Round-trip-Delay could change if the\n  \
    \ protocol (UDP or TCP), port number, size, or arrangement for special\n   treatment\
    \ (e.g., IP precedence or RSVP) changes.  The exact Type-P\n   used to make the\
    \ measurements MUST be accurately reported.\n"
- title: 2.8.2. Loss threshold
  contents:
  - "2.8.2. Loss threshold\n   In addition, the threshold (or methodology to distinguish)\
    \ between a\n   large finite delay and loss MUST be reported.\n"
- title: 2.8.3. Calibration Results
  contents:
  - "2.8.3. Calibration Results\n   +  If the systematic error can be determined,\
    \ it SHOULD be removed\n      from the measured values.\n   +  You SHOULD also\
    \ report the calibration error, e, such that the\n      true value is the reported\
    \ value plus or minus e, with 95%\n      confidence (see the last section.)\n\
    \   +  If possible, the conditions under which a test packet with finite\n   \
    \   delay is reported as lost due to resource exhaustion on the\n      measurement\
    \ instrument SHOULD be reported.\n"
- title: 2.8.4. Path
  contents:
  - "2.8.4. Path\n   Finally, the path traversed by the packet SHOULD be reported,\
    \ if\n   possible.  In general it is impractical to know the precise path a\n\
    \   given packet takes through the network.  The precise path may be\n   known\
    \ for certain Type-P on short or stable paths.  For example, if\n   Type-P includes\
    \ the record route (or loose-source route) option in\n   the IP header, and the\
    \ path is short enough, and all routers* on the\n   path support record (or loose-source)\
    \ route, and the Dst host copies\n   the path from Src to Dst into the corresponding\
    \ reply packet, then\n   the path will be precisely recorded.  This is impractical\
    \ because the\n   route must be short enough, many routers do not support (or\
    \ are not\n   configured for) record route, and use of this feature would often\n\
    \   artificially worsen the performance observed by removing the packet\n   from\
    \ common-case processing.  However, partial information is still\n   valuable\
    \ context.  For example, if a host can choose between two\n   links* (and hence\
    \ two separate routes from Src to Dst), then the\n   initial link used is valuable\
    \ context.  {Comment: For example, with\n   Merit's NetNow setup, a Src on one\
    \ NAP can reach a Dst on another NAP\n   by either of several different backbone\
    \ networks.}\n"
- title: 3. A Definition for Samples of Round-trip Delay
  contents:
  - "3. A Definition for Samples of Round-trip Delay\n   Given the singleton metric\
    \ Type-P-Round-trip-Delay, we now define one\n   particular sample of such singletons.\
    \  The idea of the sample is to\n   select a particular binding of the parameters\
    \ Src, Dst, and Type-P,\n   then define a sample of values of parameter T.  The\
    \ means for\n   defining the values of T is to select a beginning time T0, a final\n\
    \   time Tf, and an average rate lambda, then define a pseudo-random\n   Poisson\
    \ process of rate lambda, whose values fall between T0 and Tf.\n   The time interval\
    \ between successive values of T will then average\n   1/lambda.\n   {Comment:\
    \ Note that Poisson sampling is only one way of defining a\n   sample.  Poisson\
    \ has the advantage of limiting bias, but other\n   methods of sampling might\
    \ be appropriate for different situations.\n   We encourage others who find such\
    \ appropriate cases to use this\n   general framework and submit their sampling\
    \ method for\n   standardization.}\n"
- title: '3.1. Metric Name:'
  contents:
  - "3.1. Metric Name:\n   Type-P-Round-trip-Delay-Poisson-Stream\n"
- title: '3.2. Metric Parameters:'
  contents:
  - "3.2. Metric Parameters:\n   +  Src, the IP address of a host\n   +  Dst, the\
    \ IP address of a host\n   +  T0, a time\n   +  Tf, a time\n   +  lambda, a rate\
    \ in reciprocal seconds\n"
- title: '3.3. Metric Units:'
  contents:
  - "3.3. Metric Units:\n   A sequence of pairs; the elements of each pair are:\n\
    \   +  T, a time, and\n   +  dT, either a real number or an undefined number of\
    \ seconds.\n   The values of T in the sequence are monotonic increasing.  Note\
    \ that\n   T would be a valid parameter to Type-P-Round-trip-Delay, and that dT\n\
    \   would be a valid value of Type-P-Round-trip-Delay.\n"
- title: '3.4. Definition:'
  contents:
  - "3.4. Definition:\n   Given T0, Tf, and lambda, we compute a pseudo-random Poisson\
    \ process\n   beginning at or before T0, with average arrival rate lambda, and\n\
    \   ending at or after Tf.  Those time values greater than or equal to T0\n  \
    \ and less than or equal to Tf are then selected.  At each of the times\n   in\
    \ this process, we obtain the value of Type-P-Round-trip-Delay at\n   this time.\
    \  The value of the sample is the sequence made up of the\n   resulting <time,\
    \ delay> pairs.  If there are no such pairs, the\n   sequence is of length zero\
    \ and the sample is said to be empty.\n"
- title: '3.5. Discussion:'
  contents:
  - "3.5. Discussion:\n   The reader should be familiar with the in-depth discussion\
    \ of Poisson\n   sampling in the Framework document [1], which includes methods\
    \ to\n   compute and verify the pseudo-random Poisson process.\n   We specifically\
    \ do not constrain the value of lambda, except to note\n   the extremes.  If the\
    \ rate is too large, then the measurement traffic\n   will perturb the network,\
    \ and itself cause congestion.  If the rate\n   is too small, then you might not\
    \ capture interesting network\n   behavior.  {Comment: We expect to document our\
    \ experiences with, and\n   suggestions for, lambda elsewhere, culminating in\
    \ a \"best current\n   practices\" document.}\n   Since a pseudo-random number\
    \ sequence is employed, the sequence of\n   times, and hence the value of the\
    \ sample, is not fully specified.\n   Pseudo-random number generators of good\
    \ quality will be needed to\n   achieve the desired qualities.\n   The sample\
    \ is defined in terms of a Poisson process both to avoid the\n   effects of self-synchronization\
    \ and also capture a sample that is\n   statistically as unbiased as possible.\
    \  {Comment: there is, of\n   course, no claim that real Internet traffic arrives\
    \ according to a\n   Poisson arrival process.}  The Poisson process is used to\
    \ schedule\n   the delay measurements.  The test packets will generally not arrive\n\
    \   at Dst according to a Poisson distribution, nor will response packets\n  \
    \ arrive at Src according to a Poisson distribution, since they are\n   influenced\
    \ by the network.\n   All the singleton Type-P-Round-trip-Delay metrics in the\
    \ sequence\n   will have the same values of Src, Dst, and Type-P.\n   Note also\
    \ that, given one sample that runs from T0 to Tf, and given\n   new time values\
    \ T0' and Tf' such that T0 <= T0' <= Tf' <= Tf, the\n   subsequence of the given\
    \ sample whose time values fall between T0'\n   and Tf' are also a valid Type-P-Round-trip-Delay-Poisson-Stream\n\
    \   sample.\n"
- title: '3.6. Methodologies:'
  contents:
  - "3.6. Methodologies:\n   The methodologies follow directly from:\n   +  the selection\
    \ of specific times, using the specified Poisson\n      arrival process, and\n\
    \   +  the methodologies discussion already given for the singleton Type-\n  \
    \    P-Round-trip-Delay metric.\n   Care must, of course, be given to correctly\
    \ handle out-of-order\n   arrival of test or response packets; it is possible\
    \ that the Src\n   could send one test packet at TS[i], then send a second test\
    \ packet\n   (later) at TS[i+1], and it could receive the second response packet\n\
    \   at TR[i+1], and then receive the first response packet (later) at\n   TR[i].\n"
- title: '3.7. Errors and Uncertainties:'
  contents:
  - "3.7. Errors and Uncertainties:\n   In addition to sources of errors and uncertainties\
    \ associated with\n   methods employed to measure the singleton values that make\
    \ up the\n   sample, care must be given to analyze the accuracy of the Poisson\n\
    \   process with respect to the wire-times of the sending of the test\n   packets.\
    \  Problems with this process could be caused by several\n   things, including\
    \ problems with the pseudo-random number techniques\n   used to generate the Poisson\
    \ arrival process, or with jitter in the\n   value of Hinitial (mentioned above\
    \ as uncertainty in the singleton\n   delay metric).  The Framework document shows\
    \ how to use the\n   Anderson-Darling test to verify the accuracy of a Poisson\
    \ process\n   over small time frames.  {Comment: The goal is to ensure that test\n\
    \   packets are sent \"close enough\" to a Poisson schedule, and avoid\n   periodic\
    \ behavior.}\n"
- title: '3.8. Reporting the Metric:'
  contents:
  - "3.8. Reporting the Metric:\n   You MUST report the calibration and context for\
    \ the underlying\n   singletons along with the stream.  (See \"Reporting the metric\"\
    \ for\n   Type-P-Round-trip-Delay.)\n"
- title: 4. Some Statistics Definitions for Round-trip Delay
  contents:
  - "4. Some Statistics Definitions for Round-trip Delay\n   Given the sample metric\
    \ Type-P-Round-trip-Delay-Poisson-Stream, we\n   now offer several statistics\
    \ of that sample.  These statistics are\n   offered mostly to be illustrative\
    \ of what could be done.\n"
- title: 4.1. Type-P-Round-trip-Delay-Percentile
  contents:
  - "4.1. Type-P-Round-trip-Delay-Percentile\n   Given a Type-P-Round-trip-Delay-Poisson-Stream\
    \ and a percent X\n   between 0% and 100%, the Xth percentile of all the dT values\
    \ in the\n   Stream.  In computing this percentile, undefined values are treated\n\
    \   as infinitely large.  Note that this means that the percentile could\n   thus\
    \ be undefined (informally, infinite).  In addition, the Type-P-\n   Round-trip-Delay-Percentile\
    \ is undefined if the sample is empty.\n   Example: suppose we take a sample and\
    \ the results are:\n      Stream1 = <\n      <T1, 100 msec>\n      <T2, 110 msec>\n\
    \      <T3, undefined>\n      <T4, 90 msec>\n      <T5, 500 msec>\n      >\n \
    \  Then the 50th percentile would be 110 msec, since 90 msec and 100\n   msec\
    \ are smaller and 110 msec and 'undefined' are larger.\n   Note that if the possibility\
    \ that a packet with finite delay is\n   reported as lost is significant, then\
    \ a high percentile (90th or\n   95th) might be reported as infinite instead of\
    \ finite.\n"
- title: 4.2. Type-P-Round-trip-Delay-Median
  contents:
  - "4.2. Type-P-Round-trip-Delay-Median\n   Given a Type-P-Round-trip-Delay-Poisson-Stream,\
    \ the median of all the\n   dT values in the Stream.  In computing the median,\
    \ undefined values\n   are treated as infinitely large.  As with Type-P-Round-trip-Delay-\n\
    \   Percentile, Type-P-Round-trip-Delay-Median is undefined if the sample\n  \
    \ is empty.\n   As noted in the Framework document, the median differs from the\
    \ 50th\n   percentile only when the sample contains an even number of values,\
    \ in\n   which case the mean of the two central values is used.\n   Example: suppose\
    \ we take a sample and the results are:\n      Stream2 = <\n      <T1, 100 msec>\n\
    \      <T2, 110 msec>\n      <T3, undefined>\n      <T4, 90 msec>\n      >\n \
    \  Then the median would be 105 msec, the mean of 100 msec and 110 msec,\n   the\
    \ two central values.\n"
- title: 4.3. Type-P-Round-trip-Delay-Minimum
  contents:
  - "4.3. Type-P-Round-trip-Delay-Minimum\n   Given a Type-P-Round-trip-Delay-Poisson-Stream,\
    \ the minimum of all\n   the dT values in the Stream.  In computing this, undefined\
    \ values are\n   treated as infinitely large.  Note that this means that the minimum\n\
    \   could thus be undefined (informally, infinite) if all the dT values\n   are\
    \ undefined.  In addition, the Type-P-Round-trip-Delay-Minimum is\n   undefined\
    \ if the sample is empty.\n   In the above example, the minimum would be 90 msec.\n"
- title: 4.4. Type-P-Round-trip-Delay-Inverse-Percentile
  contents:
  - "4.4. Type-P-Round-trip-Delay-Inverse-Percentile\n   Given a Type-P-Round-trip-Delay-Poisson-Stream\
    \ and a time duration\n   threshold, the fraction of all the dT values in the\
    \ Stream less than\n   or equal to the threshold.  The result could be as low\
    \ as 0% (if all\n   the dT values exceed threshold) or as high as 100%.  Type-P-Round-\n\
    \   trip-Delay-Inverse-Percentile is undefined if the sample is empty.\n   In\
    \ the above example, the Inverse-Percentile of 103 msec would be\n   50%.\n"
- title: 5. Security Considerations
  contents:
  - "5. Security Considerations\n   Conducting Internet measurements raises both security\
    \ and privacy\n   concerns.  This memo does not specify an implementation of the\n\
    \   metrics, so it does not directly affect the security of the Internet\n   nor\
    \ of applications which run on the Internet.  However,\n   implementations of\
    \ these metrics must be mindful of security and\n   privacy concerns.\n   There\
    \ are two types of security concerns: potential harm caused by\n   the measurements,\
    \ and potential harm to the measurements.  The\n   measurements could cause harm\
    \ because they are active, and inject\n   packets into the network.  The measurement\
    \ parameters MUST be\n   carefully selected so that the measurements inject trivial\
    \ amounts of\n   additional traffic into the networks they measure.  If they inject\n\
    \   \"too much\" traffic, they can skew the results of the measurement, and\n\
    \   in extreme cases cause congestion and denial of service.\n   The measurements\
    \ themselves could be harmed by routers giving\n   measurement traffic a different\
    \ priority than \"normal\" traffic, or by\n   an attacker injecting artificial\
    \ measurement traffic.  If routers can\n   recognize measurement traffic and treat\
    \ it separately, the\n   measurements will not reflect actual user traffic.  If\
    \ an attacker\n   injects artificial traffic that is accepted as legitimate, the\
    \ loss\n   rate will be artificially lowered.  Therefore, the measurement\n  \
    \ methodologies SHOULD include appropriate techniques to reduce the\n   probability\
    \ measurement traffic can be distinguished from \"normal\"\n   traffic.  Authentication\
    \ techniques, such as digital signatures, may\n   be used where appropriate to\
    \ guard against injected traffic attacks.\n   The privacy concerns of network\
    \ measurement are limited by the active\n   measurements described in this memo.\
    \  Unlike passive measurements,\n   there can be no release of existing user data.\n"
- title: 6. Acknowledgements
  contents:
  - "6. Acknowledgements\n   Special thanks are due to Vern Paxson and to Will Leland\
    \ for several\n   useful suggestions.\n"
- title: 7. References
  contents:
  - "7. References\n   [1]  Paxson, D., Almes, G., Mahdavi, J. and M. Mathis, \"Framework\
    \ for\n        IP Performance Metrics\", RFC 2330, May 1998.\n   [2]  Almes, G.,\
    \ Kalidindi,S. and M. Zekauskas, \"A One-way Delay\n        Metric for IPPM\"\
    , RFC 2679, September 1999.\n   [3]  Mills, D., \"Network Time Protocol (v3)\"\
    , RFC 1305, April 1992.\n   [4]  Mahdavi, J. and V. Paxson, \"IPPM Metrics for\
    \ Measuring\n        Connectivity\", RFC 2678, September 1999.\n   [5]  Postel,\
    \ J., \"Internet Protocol\", STD 5, RFC 791, September 1981.\n   [6]  Bradner,\
    \ S., \"Key words for use in RFCs to Indicate Requirement\n        Levels\", BCP\
    \ 14, RFC 2119, March 1997.\n"
- title: 8. Authors' Addresses
  contents:
  - "8. Authors' Addresses\n   Guy Almes\n   Advanced Network & Services, Inc.\n \
    \  200 Business Park Drive\n   Armonk, NY  10504\n   USA\n   Phone: +1 914 765\
    \ 1120\n   EMail: almes@advanced.org\n   Sunil Kalidindi\n   Advanced Network\
    \ & Services, Inc.\n   200 Business Park Drive\n   Armonk, NY  10504\n   USA\n\
    \   Phone: +1 914 765 1128\n   EMail: kalidindi@advanced.org\n   Matthew J. Zekauskas\n\
    \   Advanced Network & Services, Inc.\n   200 Business Park Drive\n   Armonk,\
    \ NY 10504\n   USA\n   Phone: +1 914 765 1112\n   EMail: matt@advanced.org\n"
- title: 9.  Full Copyright Statement
  contents:
  - "9.  Full Copyright Statement\n   Copyright (C) The Internet Society (1999). \
    \ All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
