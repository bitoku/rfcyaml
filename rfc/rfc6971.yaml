- title: __initial_text__
  contents:
  - '          Depth-First Forwarding (DFF) in Unreliable Networks

    '
- title: Abstract
  contents:
  - "Abstract\n   This document specifies the Depth-First Forwarding (DFF) protocol\
    \ for\n   IPv6 networks, a data-forwarding mechanism that can increase\n   reliability\
    \ of data delivery in networks with dynamic topology and/or\n   lossy links. \
    \ The protocol operates entirely on the forwarding plane\n   but may interact\
    \ with the routing plane.  DFF forwards data packets\n   using a mechanism similar\
    \ to a \"depth-first search\" for the\n   destination of a packet.  The routing\
    \ plane may be informed of\n   failures to deliver a packet or loops.  This document\
    \ specifies the\n   DFF mechanism both for IPv6 networks (as specified in RFC\
    \ 2460) and\n   for \"mesh-under\" Low-Power Wireless Personal Area Networks (LoWPANs),\n\
    \   as specified in RFC 4944.  The design of DFF assumes that the\n   underlying\
    \ link layer provides means to detect if a packet has been\n   successfully delivered\
    \ to the Next Hop or not.  It is applicable for\n   networks with little traffic\
    \ and is used for unicast transmissions\n   only.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for examination, experimental implementation, and\n   evaluation.\n\
    \   This document defines an Experimental Protocol for the Internet\n   community.\
    \  This document is a product of the Internet Engineering\n   Task Force (IETF).\
    \  It represents the consensus of the IETF\n   community.  It has received public\
    \ review and has been approved for\n   publication by the Internet Engineering\
    \ Steering Group (IESG).  Not\n   all documents approved by the IESG are a candidate\
    \ for any level of\n   Internet Standard; see Section 2 of RFC 5741.\n   Information\
    \ about the current status of this document, any errata,\n   and how to provide\
    \ feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6971.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2013 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  4\n     1.1.  Motivation . . . . . . . . . . . . . . . . . . .\
    \ . . . . .  4\n     1.2.  Experiments to Be Conducted  . . . . . . . . . . .\
    \ . . . .  5\n   2.  Notation and Terminology . . . . . . . . . . . . . . . .\
    \ . . .  6\n     2.1.  Notation . . . . . . . . . . . . . . . . . . . . . . .\
    \ . .  6\n     2.2.  Terminology  . . . . . . . . . . . . . . . . . . . . . .\
    \ .  7\n   3.  Applicability Statement  . . . . . . . . . . . . . . . . . . .\
    \  9\n   4.  Protocol Overview and Functioning  . . . . . . . . . . . . . . 10\n\
    \     4.1.  Overview of Information Sets . . . . . . . . . . . . . . . 11\n  \
    \   4.2.  Signaling Overview . . . . . . . . . . . . . . . . . . . . 11\n   5.\
    \  Protocol Dependencies  . . . . . . . . . . . . . . . . . . . . 13\n   6.  Information\
    \ Sets . . . . . . . . . . . . . . . . . . . . . . . 13\n     6.1.  Symmetric\
    \ Neighbor List  . . . . . . . . . . . . . . . . . 13\n     6.2.  Processed Set\
    \  . . . . . . . . . . . . . . . . . . . . . . 13\n   7.  Packet Header Fields\
    \ . . . . . . . . . . . . . . . . . . . . . 14\n   8.  Protocol Parameters  .\
    \ . . . . . . . . . . . . . . . . . . . . 15\n   9.  Data Packet Generation and\
    \ Processing  . . . . . . . . . . . . 15\n     9.1.  Data Packets Entering the\
    \ DFF Routing Domain . . . . . . . 16\n     9.2.  Data Packet Processing . . .\
    \ . . . . . . . . . . . . . . . 17\n   10. Unsuccessful Packet Transmission .\
    \ . . . . . . . . . . . . . . 19\n   11. Determining the Next Hop for a Packet\
    \  . . . . . . . . . . . . 20\n   12. Sequence Numbers . . . . . . . . . . . .\
    \ . . . . . . . . . . . 21\n   13. Modes of Operation . . . . . . . . . . . .\
    \ . . . . . . . . . . 21\n     13.1. Route-Over . . . . . . . . . . . . . . .\
    \ . . . . . . . . . 22\n       13.1.1.  Mapping of DFF Terminology to IPv6 Terminology\
    \  . . . 22\n       13.1.2.  Packet Format . . . . . . . . . . . . . . . . . .\
    \ . . 22\n     13.2. Mesh-Under . . . . . . . . . . . . . . . . . . . . . . .\
    \ . 24\n       13.2.1.  Mapping of DFF Terminology to LoWPAN Terminology  . .\
    \ 24\n       13.2.2.  Packet Format . . . . . . . . . . . . . . . . . . . . 25\n\
    \   14. Scope Limitation of DFF  . . . . . . . . . . . . . . . . . . . 26\n  \
    \   14.1. Route-Over MoP . . . . . . . . . . . . . . . . . . . . . . 28\n    \
    \ 14.2. Mesh-Under MoP . . . . . . . . . . . . . . . . . . . . . . 29\n   15.\
    \ MTU Exceedance . . . . . . . . . . . . . . . . . . . . . . . . 30\n   16. Security\
    \ Considerations  . . . . . . . . . . . . . . . . . . . 31\n     16.1. Attacks\
    \ That Are Out of Scope  . . . . . . . . . . . . . . 31\n     16.2. Protection\
    \ Mechanisms of DFF . . . . . . . . . . . . . . . 31\n     16.3. Attacks That\
    \ Are in Scope  . . . . . . . . . . . . . . . . 32\n       16.3.1.  Denial of\
    \ Service . . . . . . . . . . . . . . . . . . 32\n       16.3.2.  Packet Header\
    \ Modification  . . . . . . . . . . . . . 32\n         16.3.2.1.  Return Flag\
    \ Tampering . . . . . . . . . . . . . . 32\n         16.3.2.2.  Duplicate Flag\
    \ Tampering  . . . . . . . . . . . . 33\n         16.3.2.3.  Sequence Number Tampering\
    \ . . . . . . . . . . . . 33\n   17. IANA Considerations  . . . . . . . . . .\
    \ . . . . . . . . . . . 33\n   18. Acknowledgments  . . . . . . . . . . . . .\
    \ . . . . . . . . . . 34\n   19. References . . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . 34\n     19.1. Normative References . . . . . . . . . . .\
    \ . . . . . . . . 34\n     19.2. Informative References . . . . . . . . . . .\
    \ . . . . . . . 35\n   Appendix A.  Examples  . . . . . . . . . . . . . . . .\
    \ . . . . . . 36\n     A.1.  Example 1: Normal Delivery . . . . . . . . . . .\
    \ . . . . . 36\n     A.2.  Example 2: Forwarding with Link Failure  . . . . .\
    \ . . . . 37\n     A.3.  Example 3: Forwarding with Missed Link-Layer\n      \
    \     Acknowledgment . . . . . . . . . . . . . . . . . . . . . . 38\n     A.4.\
    \  Example 4: Forwarding with a Loop  . . . . . . . . . . . . 39\n   Appendix\
    \ B.  Deployment Experience . . . . . . . . . . . . . . . . 40\n     B.1.  Deployments\
    \ in Japan . . . . . . . . . . . . . . . . . . . 40\n     B.2.  Kit Carson Electric\
    \ Cooperative  . . . . . . . . . . . . . 40\n     B.3.  Simulations  . . . . .\
    \ . . . . . . . . . . . . . . . . . . 40\n     B.4.  Open-Source Implementation\
    \ . . . . . . . . . . . . . . . . 40\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document specifies the Depth-First Forwarding (DFF)\
    \ protocol for\n   IPv6 networks, both for IPv6 forwarding [RFC2460] (henceforth\
    \ denoted\n   \"route-over\"), and also for \"mesh-under\" forwarding using the\
    \ LoWPAN\n   adaptation layer [RFC4944].  The protocol operates entirely on the\n\
    \   forwarding plane but may interact with the routing plane.  The\n   purpose\
    \ of DFF is to increase reliability of data delivery in\n   networks with dynamic\
    \ topologies and/or lossy links.\n   DFF forwards data packets using a \"depth-first\
    \ search\" for the\n   destination of the packets.  DFF relies on an external\
    \ neighborhood\n   discovery mechanism that lists a router's neighbors that may\
    \ be\n   attempted as Next Hops for a data packet.  In addition, DFF may use\n\
    \   information from the Routing Information Base (RIB) for deciding in\n   which\
    \ order to try to send the packet to the neighboring routers.\n   If the packet\
    \ makes no forward progress using the first selected Next\n   Hop, DFF will successively\
    \ try all neighbors of the router.  If none\n   of the Next Hops successfully\
    \ receives or forwards the packet, DFF\n   returns the packet to the Previous\
    \ Hop, which in turn tries to send\n   it to alternate neighbors.\n   As network\
    \ topologies do not necessarily form trees, loops can occur.\n   Therefore, DFF\
    \ contains a loop detection and avoidance mechanism.\n   DFF may provide information\
    \ that may -- by a mechanism outside of\n   this specification -- be used for\
    \ updating the cost of routes in the\n   RIB based on failed or successful delivery\
    \ of packets through\n   alternative Next Hops.  Such information may also be\
    \ used by a\n   routing protocol.\n   DFF assumes that the underlying link layer\
    \ provides means to detect\n   if a packet has been successfully delivered to\
    \ the Next Hop or not,\n   is designed for networks with little traffic, and is\
    \ used for unicast\n   transmissions only.\n"
- title: 1.1.  Motivation
  contents:
  - "1.1.  Motivation\n   In networks with dynamic topologies and/or lossy links,\
    \ even frequent\n   exchanges of control messages between routers for updating\
    \ the\n   routing tables cannot guarantee that the routes correspond to the\n\
    \   effective topology of the network at all times.  Packets may not be\n   delivered\
    \ to their destination because the topology has changed since\n   the last routing\
    \ protocol update.\n   More frequent routing protocol updates can mitigate that\
    \ problem to a\n   certain extent; however, this requires additional signaling,\n\
    \   consuming channel and router resources (e.g., when flooding control\n   messages\
    \ through the network).  This is problematic in networks with\n   lossy links,\
    \ where further control traffic exchange can worsen the\n   network stability\
    \ because of collisions.  Moreover, additional\n   control traffic exchange may\
    \ drain energy from battery-driven\n   routers.\n   The data-forwarding mechanism\
    \ specified in this document allows for\n   forwarding data packets along alternate\
    \ paths for increasing\n   reliability of data delivery, using a depth-first search.\
    \  The\n   objective is to decrease the necessary control traffic overhead in\n\
    \   the network and, at the same time, to increase delivery success\n   rates.\n\
    \   As this specification is intended for experimentation, the mechanism\n   is\
    \ also specified for forwarding on the LoWPAN adaption layer\n   (according to\
    \ Section 11 of [RFC4944]), in addition to IPv6\n   forwarding as specified in\
    \ [RFC2460].  Other than different header\n   formats, the DFF mechanism for route-over\
    \ and mesh-under is similar,\n   and is therefore first defined in general and\
    \ then more specifically\n   for both IPv6 route-over forwarding (as specified\
    \ in Section 13.1)\n   and LoWPAN adaptation layer mesh-under (as specified in\n\
    \   Section 13.2).\n"
- title: 1.2.  Experiments to Be Conducted
  contents:
  - "1.2.  Experiments to Be Conducted\n   This document is presented as an Experimental\
    \ specification that can\n   increase reliability of data delivery in networks\
    \ with dynamic\n   topology and/or lossy links.  It is anticipated that, once\
    \ sufficient\n   operational experience has been gained, this specification will\
    \ be\n   revised to progress it on to the Standards Track.  This experiment is\n\
    \   intended to be tried in networks that meet the applicability\n   described\
    \ in Section 3, and with the scope limitations set out in\n   Section 14.  While\
    \ experimentation is encouraged in such networks,\n   operators should exercise\
    \ caution before attempting this experiment\n   in other types of networks as\
    \ the stability of interaction between\n   DFF and routing in those networks has\
    \ not been established.\n   Experience reports regarding DFF implementation and\
    \ deployment are\n   encouraged, particularly with respect to:\n   o  Optimal\
    \ values for the parameter P_HOLD_TIME, depending on the\n      size of the network,\
    \ the topology, and the amount of traffic\n      originated per router.  The longer\
    \ a Processed Tuple is held, the\n      more memory is consumed on a router. \
    \ Moreover, if a tuple is held\n      too long, a sequence number wrap-around\
    \ may occur, and a new\n      packet may have the same sequence number as one\
    \ indicated in an\n      old Processed Tuple.  However, if the tuple is expired\
    \ too soon\n      (before the packet has completed its path to the destination),\
    \ it\n      may be mistakenly detected as a new packet instead of one already\n\
    \      seen.\n   o  Optimal values for the parameter MAX_HOP_LIMIT, depending\
    \ on the\n      size of the network, the topology, and how lossy the link layer\n\
    \      is.  MAX_HOP_LIMIT makes sure that packets do not unnecessarily\n     \
    \ traverse in the network; it may be used to limit the \"detour\" of\n      packets\
    \ that is acceptable.  The value may also be issued on a\n      per-packet basis\
    \ if hop-count information is available from the\n      RIB or routing protocol.\
    \  In such a case, the Hop Limit for the\n      packet may be a percentage (e.g.,\
    \ 200%) of the hop-count value\n      indicated in the routing table.\n   o  Optimal\
    \ methods to increase the cost of a route when a loop or\n      lost Layer 2 (L2)\
    \ ACK is detected by DFF.  While this is not\n      specified as a normative part\
    \ of this document, it may be of\n      interest in an experiment to find good\
    \ values of how much to\n      increase link cost in the RIB or routing protocol.\n\
    \   o  Performance of using DFF in combination with different routing\n      protocols,\
    \ such as reactive and proactive protocols.  This also\n      implies how routes\
    \ are updated by the RIB or routing protocol when\n      informed by DFF about\
    \ loops or broken links.\n"
- title: 2.  Notation and Terminology
  contents:
  - "2.  Notation and Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    NOT RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted\
    \ as described in\n   [RFC2119].\n   Additionally, this document uses the notation\
    \ in Section 2.1 and the\n   terminology in Section 2.2.\n"
- title: 2.1.  Notation
  contents:
  - "2.1.  Notation\n   The following notations are used in this document:\n   List:\
    \  A list of elements is defined as [] for an empty list,\n      [element] for\
    \ a list with one element, and [element1, element2,\n      ...] for a list with\
    \ multiple elements.\n   Concatenation of Lists:  If List1 and List2 are lists,\
    \ then List1@\n      List2 is a new list with all elements of List1 first, followed\
    \ by\n      all elements of List2.\n   Byte Order:  All packet formats in this\
    \ specification use network\n      byte order (most significant octet first) for\
    \ all fields.  The\n      most significant bit in an octet is numbered bit 0,\
    \ and the least\n      significant bit of an octet is numbered bit 7.\n   Assignment:\
    \  a := b\n      An assignment operator, whereby the left side (a) is assigned\
    \ the\n      value of the right side (b).\n   Comparison:  c = d\n      A comparison\
    \ operator, returning true if the value of the left\n      side (c) is equal to\
    \ the value of the right side (d).\n   Flags:  This specification uses multiple\
    \ 1-bit flags.  A value of '0'\n      of a flag means 'false'; a value of '1'\
    \ means 'true'.\n"
- title: 2.2.  Terminology
  contents:
  - "2.2.  Terminology\n   The terms \"route-over\" and \"mesh-under\", introduced\
    \ in [RFC6775], are\n   used in this document, where \"route-over\" is not only\
    \ limited to IPv6\n   over Low-Power Wireless Personal Area Networks (6LoWPANs)\
    \ but also\n   applies to general IPv6 networks.\n   Mesh-under:  A topology where\
    \ nodes are connected to a 6LoWPAN Border\n      Router (6LBR) through a mesh\
    \ using link-layer forwarding.  Thus,\n      in a mesh-under configuration, all\
    \ IPv6 hosts in a LoWPAN are only\n      one IP hop away from the 6LBR.  This\
    \ topology simulates the\n      typical IP-subnet topology with one router with\
    \ multiple nodes in\n      the same subnet.\n   Route-over:  A topology where\
    \ hosts are connected to the 6LBR through\n      the use of intermediate layer-3\
    \ (IP) routing.  Here, hosts are\n      typically multiple IP hops away from a\
    \ 6LBR.  The route-over\n      topology typically consists of a 6LBR, a set of\
    \ 6LoWPAN Routers\n      (6LRs), and hosts.\n   The following terms are used in\
    \ this document.  As the DFF mechanism\n   is specified both for route-over IPv6\
    \ and for the mesh-under LoWPAN\n   adaptation layer, the terms are generally\
    \ defined in this section,\n   and then specifically mapped for each of the different\
    \ modes of\n   operation in Section 13.\n   Depth-First Search:  \"Depth-first\
    \ search (DFS) is an algorithm for\n      traversing or searching tree or graph\
    \ data structures.  One starts\n      at the root (selecting some node as the\
    \ root in the graph case)\n      and explores as far as possible along each branch\
    \ before\n      backtracking\" [DFS_wikipedia].  In this document, the algorithm\n\
    \      for traversing a graph is applied to forwarding packets in a\n      computer\
    \ network, with nodes being routers.\n   Routing Information Base (RIB):  A table\
    \ stored in the user space of\n      an operating system of a router or host.\
    \  The table lists routes\n      to network destinations, as well as associated\
    \ metrics with these\n      routes.\n   Mode of Operation (MoP):  The DFF mechanism\
    \ specified in this\n      document can either be used as the \"route-over\" IPv6-forwarding\n\
    \      mechanism (Mode of Operation: \"route-over\") or as the \"mesh-under\"\n\
    \      LoWPAN adaptation layer (Mode of Operation: \"mesh-under\").\n   Packet:\
    \  An IPv6 packet (for \"route-over\" MoP) or a \"LoWPAN-\n      encapsulated\
    \ packet\" (for \"mesh-under\" MoP), containing an IPv6\n      packet as payload.\n\
    \   Packet Header:  An IPv6 extension header (for \"route-over\" MoP) or a\n \
    \     LoWPAN header (for \"mesh-under\" MoP).\n   Address:  An IPv6 address (for\
    \ \"route-over\" MoP), or a 16-bit short\n      or 64-bit Extended Unique Identifier\
    \ (EUI-64) link-layer address\n      (for \"mesh-under\" MoP).\n   Originator:\
    \  The router that added the DFF header (specified in\n      Section 7) to a packet.\n\
    \   Originator Address:  An address of the Originator.  According to\n      [RFC6724],\
    \ this address SHOULD be selected from the addresses that\n      are configured\
    \ on the interface that transmits the packet.\n   Destination:  The router or\
    \ host to which a packet is finally\n      destined.  In case this router or host\
    \ is outside of the routing\n      domain in which DFF is used, the destination\
    \ is the router that\n      removes the DFF header (specified in Section 7) from\
    \ the packet.\n      This case is described in Section 14.1.\n   Destination Address:\
    \  An address to which the packet is sent.\n   Next Hop:  An address of the Next\
    \ Hop to which the packet is sent\n      along the path to the destination.\n\
    \   Previous Hop:  The address of the previous-hop router from which a\n     \
    \ packet has been received.  In case the packet has been received by\n      a\
    \ router from outside of the routing domain where DFF is used\n      (i.e., no\
    \ DFF header is contained in the packet), the Originator\n      Address of the\
    \ router adding the DFF header to the packet is used\n      as the Previous Hop.\n\
    \   Hop Limit:  An upper bound denoting how many times the packet may be\n   \
    \   forwarded.\n"
- title: 3.  Applicability Statement
  contents:
  - "3.  Applicability Statement\n   This document specifies DFF, a packet-forwarding\
    \ mechanism intended\n   for use in networks with dynamic topology and/or lossy\
    \ links with the\n   purpose of increasing reliability of data delivery.  The\
    \ protocol's\n   applicability is determined by its characteristics, which are\
    \ that\n   this protocol:\n   o  Is applicable for use in IPv6 networks, either\
    \ as a \"route-over\"\n      forwarding mechanism using IPv6 [RFC2460], or as\
    \ a \"mesh-under\"\n      forwarding mechanism using the frame format for transmission\
    \ of\n      IPv6 packets, as defined in [RFC4944].\n   o  Assumes addresses used\
    \ in the network are either IPv6 addresses\n      (if the protocol is used as\
    \ \"route-over\"), or 16-bit short or\n      EUI-64 link-layer addresses, as specified\
    \ in [RFC4944], if the\n      protocol is used as \"mesh-under\".  In \"mesh-under\"\
    \ mode, mixed\n      16-bit and EUI-64 addresses within one DFF routing domain\
    \ are\n      allowed (if they conform with [RFC4944]), as long as DFF is\n   \
    \   limited to use within one PAN (Personal Area Network).  It is\n      assumed\
    \ that the \"route-over\" mode and \"mesh-under\" mode are\n      mutually exclusive\
    \ in the same routing domain.\n   o  Assumes that the underlying link layer provides\
    \ means to detect if\n      a packet has been successfully delivered to the Next\
    \ Hop or not\n      (e.g., by L2 ACK messages).  Examples for such underlying\
    \ link\n      layers are specified in IEEE 802.15.4 and IEEE 802.11.\n   o  Is\
    \ applicable in networks with lossy links and/or with a dynamic\n      topology.\
    \  In networks with very stable links and fixed topology,\n      DFF will not\
    \ bring any benefit (but also will not be harmful,\n      other than the additional\
    \ overhead for the packet header).\n   o  Works in a completely distributed manner\
    \ and does not depend on\n      any central entity.\n   o  Is applicable for networks\
    \ with little traffic in terms of numbers\n      of packets per second, since\
    \ each recently forwarded packet\n      increases the state on a router.  The\
    \ amount of traffic per time\n      that is supported by DFF depends on the memory\
    \ resources of the\n      router running DFF, the density of the network, the\
    \ loss rate of\n      the channel, and the maximum Hop Limit for each packet:\
    \ for each\n      recently seen packet, a list of Next Hops that the packet has\
    \ been\n      sent to is stored in memory.  The stored entries can be deleted\n\
    \      after an expiration time, so that only recently received packets\n    \
    \  require storage on the router.  Implementations are advised to\n      measure\
    \ and report rates of packets in the network, and also to\n      report memory\
    \ usage.  Thus, operators can determine memory\n      exhaustion because of growing\
    \ information sets or problems because\n      of too rapid sequence-number wrap-around.\n\
    \   o  Is applicable for dense topologies with multiple paths between\n      each\
    \ source and each destination.  Certain topologies are less\n      suitable for\
    \ DFF: topologies that can be partitioned by the\n      removal of a single router\
    \ or link, topologies with multiple stub\n      routers that each have a single\
    \ link to the network, topologies\n      with only a single path to a destination,\
    \ or topologies where the\n      \"detour\" that a packet makes during the depth-first\
    \ search in\n      order to reach the destination would be too long.  Note that\
    \ the\n      number of retransmissions of a packet that stipulate a \"too long\"\
    \n      path depends on the underlying link layer (capacity and\n      probability\
    \ of packet loss), as well as how much bandwidth is\n      required for data traffic\
    \ by applications running in the network.\n      In such topologies, the packet\
    \ may never reach the destination;\n      therefore, unnecessary transmissions\
    \ of data packets may occur\n      until the Hop Limit of the packet reaches zero,\
    \ and the packet is\n      dropped.  This may consume channel and router resources.\n\
    \   o  Is used for unicast transmissions only (not for anycast or\n      multicast).\n\
    \   o  Is for use within stub networks and for traffic between a router\n    \
    \  inside the routing domain in which DFF is used and a known border\n      router.\
    \  Examples of such networks are LoWPANs.  Scope limitations\n      are described\
    \ in Section 14.\n"
- title: 4.  Protocol Overview and Functioning
  contents:
  - "4.  Protocol Overview and Functioning\n   When a packet is to be forwarded by\
    \ a router using DFF, the router\n   creates a list of candidate Next Hops for\
    \ that packet.  This list\n   (created per packet) is ordered, and Section 11\
    \ provides\n   recommendations on how to order the list, e.g., first listing Next\n\
    \   Hops listed in the RIB, if available, ordered in increasing cost,\n   followed\
    \ by other neighbors provided by an external neighborhood\n   discovery.  DFF\
    \ proceeds to forward the packet to the first Next Hop\n   in the list.  If the\
    \ transmission was not successful (as determined\n   by the underlying link layer)\
    \ or if the packet was \"returned\" by a\n   Next Hop to which it had been sent\
    \ before, the router will try to\n   forward the packet to the subsequent Next\
    \ Hop on the list.  A router\n   \"returns\" a packet to the router from which\
    \ it was originally\n   received once it has unsuccessfully tried to forward the\
    \ packet to\n   all elements in the candidate Next Hop list.  If the packet is\n\
    \   eventually returned to the Originator of the packet, and after the\n   Originator\
    \ has exhausted all of its Next Hops for the packet, the\n   packet is dropped.\n\
    \   For each recently forwarded packet, a router running DFF stores\n   information\
    \ about the packet as an entry in an information set,\n   denoted \"Processed\
    \ Set\".  Each entry in the Processed Set contains a\n   sequence number, included\
    \ in the packet header, identifying the\n   packet.  (Refer to Section 12 for\
    \ further details on the sequence\n   number.)  Furthermore, the entry contains\
    \ a list of Next Hops to\n   which the packet has been sent.  This list of recently\
    \ forwarded\n   packets also allows for avoiding loops when forwarding a packet.\n\
    \   Entries in the Processed Set expire after a given expiration timeout\n   and\
    \ are removed.\n"
- title: 4.1.  Overview of Information Sets
  contents:
  - "4.1.  Overview of Information Sets\n   This specification requires a single set\
    \ on each router, the\n   Processed Set.  The Processed Set stores the sequence\
    \ number, the\n   Originator Address, the Previous Hop, and a list of Next Hops\
    \ to\n   which the packet has been sent, for each recently seen packet.\n   Entries\
    \ in the set are removed after a predefined timeout.  Each time\n   a packet is\
    \ forwarded to a Next Hop, that Next Hop is added to the\n   list of Next Hops\
    \ of the entry for the packet.\n   Note that an implementation of this protocol\
    \ may maintain the\n   information of the Processed Set in the indicated form,\
    \ or in any\n   other organization that offers access to this information.  In\n\
    \   particular, it is not necessary to remove tuples from a set at the\n   exact\
    \ time indicated, only to behave as if the tuples were removed at\n   that time.\n\
    \   In addition to the Processed Set, a list of symmetric neighbors must\n   be\
    \ provided by an external neighborhood discovery mechanism, or may\n   be determined\
    \ from the RIB (e.g., if the RIB provides routes to\n   adjacent routers, and\
    \ if these one-hop routes are verified to be\n   symmetric).\n"
- title: 4.2.  Signaling Overview
  contents:
  - "4.2.  Signaling Overview\n   Information is needed on a per-packet basis by a\
    \ router that is\n   running DFF and receives a packet.  This information is encoded\
    \ in\n   the packet header that is specified in this document as the IPv6 Hop-\n\
    \   by-Hop Options header and LoWPAN header, respectively, for the\n   intended\
    \ \"route-over\" and \"mesh-under\" Modes of Operation.  This DFF\n   header contains\
    \ a sequence number used for uniquely identifying a\n   packet and two flags,\
    \ RET (for \"return\") and DUP (for \"duplicate\").\n   While a router successively\
    \ tries sending a data packet to one or\n   more of its neighbors, RET = 0.  If\
    \ none of the transmissions of the\n   packet to the neighbors of a router have\
    \ succeeded, the packet is\n   returned to the router from which the packet was\
    \ first received,\n   indicated by setting the return flag (RET := 1).  The RET\
    \ flag is\n   required to discern between a deliberately returned packet and a\n\
    \   looping packet: if a router receives a packet with RET = 1 (and DUP =\n  \
    \ 0 or DUP = 1) that it has already forwarded, the packet was\n   deliberately\
    \ returned, and the router will continue to successively\n   send the packet to\
    \ routers from the candidate Next Hop list.  If that\n   packet has RET = 0, the\
    \ router assumes that the packet is looping and\n   returns it to the router from\
    \ which it was last received.  An\n   external mechanism may use this information\
    \ for increasing the route\n   cost of the route to the destination using the\
    \ Next Hop that resulted\n   in the loop in the RIB or the routing protocol. \
    \ It is out of scope\n   of this document to specify such a mechanism.  Note that\
    \ once DUP is\n   set to 1, loop detection is not possible any more as the flag\
    \ is not\n   reset any more.  Therefore, a packet may loop if the RIBs of routers\n\
    \   in the domain are inconsistent, until the Hop Limit has reached 0.\n   Whenever\
    \ a packet transmission to a neighbor has failed (as\n   determined by the underlying\
    \ link layer, e.g., using L2 ACKs), the\n   DUP flag is set in the packet header\
    \ for the following transmissions.\n   The rationale is that the packet may have\
    \ been successfully received\n   by the neighbor and only the L2 ACK has been\
    \ lost, resulting in\n   possible duplicates of the packet in the network.  The\
    \ DUP flag tags\n   such a possible duplicate.  The DUP flag is required to discern\n\
    \   between a duplicated packet and a looping packet: if a router\n   receives\
    \ a packet with DUP = 1 (and RET = 0) that it has already\n   forwarded, the packet\
    \ is not considered looping and is successively\n   forwarded to the next router\
    \ from the candidate Next Hop list.  If\n   the received packet has DUP = 0 (and\
    \ RET = 0), the router assumes\n   that the packet is looping, sets RET := 1,\
    \ and returns it to the\n   Previous Hop.  Again, an external mechanism may use\
    \ this information\n   for increasing route costs and/or informing the routing\
    \ protocol.\n   The reason for not dropping received duplicated packets (with\
    \ DUP =\n   1) is that a duplicated packet may be duplicated again during its\n\
    \   path if another L2 ACK is lost.  However, when DUP is already set to\n   1,\
    \ it is not possible to discern the duplicate from the duplicate of\n   the duplicate.\
    \  As a consequence, loop detection is not possible\n   after the second lost\
    \ L2 ACK on the path of a packet.  However, if\n   duplicates are simply dropped,\
    \ it is possible that the packet was\n   actually a looping packet (and not a\
    \ duplicate), and so the depth-\n   first search would be interrupted.\n"
- title: 5.  Protocol Dependencies
  contents:
  - "5.  Protocol Dependencies\n   DFF MAY use information from the Routing Information\
    \ Base (RIB),\n   specifically for determining an order of preference for which\
    \ Next\n   Hops a packet should be forwarded to (e.g., the packet may be\n   forwarded\
    \ first to neighbors that are listed in the RIB as Next Hops\n   to the destination,\
    \ preferring those with the lowest route cost).\n   Section 11 provides recommendations\
    \ about the order of preference for\n   the Next Hops of a packet.\n   DFF MUST\
    \ have access to a list of symmetric neighbors for each\n   router; this list\
    \ is provided by a neighborhood discovery protocol,\n   such as the one defined\
    \ in [RFC6130].  A neighborhood discovery\n   protocol is not specified in this\
    \ document.\n"
- title: 6.  Information Sets
  contents:
  - "6.  Information Sets\n   This section specifies the information sets used by\
    \ DFF.\n"
- title: 6.1.  Symmetric Neighbor List
  contents:
  - "6.1.  Symmetric Neighbor List\n   DFF MUST have access to a list of addresses\
    \ of symmetric neighbors of\n   the router.  This list can be provided by an external\
    \ neighborhood\n   discovery mechanism or, alternatively, may be determined from\
    \ the RIB\n   (e.g., if the RIB provides routes to adjacent routers, and if these\n\
    \   one-hop routes are verified to be symmetric).  The list of addresses\n   of\
    \ symmetric neighbors is not specified within this document.  The\n   addresses\
    \ in the list are used to construct a list of candidate Next\n   Hops for a packet,\
    \ as specified in Section 11.\n"
- title: 6.2.  Processed Set
  contents:
  - "6.2.  Processed Set\n   Each router maintains a Processed Set in order to support\
    \ the loop\n   detection functionality.  The Processed Set lists sequence numbers\
    \ of\n   previously received packets, as well as a list of Next Hops to which\n\
    \   the packet has been sent successively as part of the depth-first\n   forwarding\
    \ mechanism.  To protect against this situation, it is\n   recommended that an\
    \ implementation retains the Processed Set in\n   non-volatile storage if such\
    \ is provided by the router.\n   The set consists of Processed Tuples\n      (P_orig_address,\
    \ P_seq_number, P_prev_hop,\n      P_next_hop_neighbor_list, P_time)\n   where\n\
    \      P_orig_address is the Originator Address of the received packet;\n    \
    \  P_seq_number is the sequence number of the received packet;\n      P_prev_hop\
    \ is the address of the Previous Hop of the packet;\n      P_next_hop_neighbor_list\
    \ is a list of addresses of Next Hops to\n      which the packet has been sent\
    \ previously, as part of the depth-\n      first forwarding mechanism, as specified\
    \ in Section 9.2;\n      P_time specifies when this tuple expires and MUST be\
    \ removed.\n   The consequences when no, or not enough, non-volatile storage is\n\
    \   available on a router (e.g., because of limited resources) or when an\n  \
    \ implementation chooses not to make the Processed Set persistent are\n   that\
    \ packets that are already in a loop caused by the routing\n   protocol may continue\
    \ to loop until the Hop Limit is exhausted.\n   Non-looping packets may be sent\
    \ to Next Hops that have already\n   received the packet previously and will return\
    \ the packet, leading to\n   some unnecessary retransmissions.  This effect is\
    \ only temporary and\n   applies only for packets already traversing the network.\n"
- title: 7.  Packet Header Fields
  contents:
  - "7.  Packet Header Fields\n   This section specifies the information required\
    \ by DFF in the packet\n   header.  Note that, depending on whether DFF is used\
    \ in the\n   \"route-over\" MoP or in the \"mesh-under\" MoP, the DFF header is\
    \ either\n   an IPv6 Hop-by-Hop Options header (as specified in Section 13.1.2)\
    \ or\n   a LoWPAN header (as specified in Section 13.2.2).  Sections 13.1.2\n\
    \   and 13.2.2 specify the precise order, format, and encoding of the\n   fields\
    \ that are listed in this section.\n   Version (VER)  - This 2-bit value indicates\
    \ the version of DFF that\n      is used.  This specification defines value '00'.\
    \  Packets with\n      other values of the version MUST be forwarded using the\
    \ route-over\n      MoP and mesh-under MoP as defined in [RFC2460] and [RFC4944],\n\
    \      respectively.\n   Duplicate (DUP) Packet Flag  - This 1-bit flag is set\
    \ in the DFF\n      header of a packet when that packet is being retransmitted\
    \ due to\n      a signal from the link layer that the original transmission\n\
    \      failed, as specified in Section 9.2.  Once the flag is set to 1,\n    \
    \  it MUST NOT be modified by routers forwarding the packet.\n   Return (RET)\
    \ Packet Flag  - This 1-bit flag MUST be set to 1 prior to\n      sending the\
    \ packet back to the Previous Hop.  Upon receiving a\n      packet with RET =\
    \ 1, and before sending it to a new candidate Next\n      Hop, that flag MUST\
    \ be set to 0, as specified in Section 9.2.\n   Sequence Number  - A 16-bit field,\
    \ containing an unsigned integer\n      sequence number generated by the Originator,\
    \ unique to each router\n      for each packet to which the DFF has been added,\
    \ as specified in\n      Section 12.  The Originator Address concatenated with\
    \ the sequence\n      number represents an identifier of previously seen data\
    \ packets.\n      Refer to Section 12 for further information about sequence\n\
    \      numbers.\n"
- title: 8.  Protocol Parameters
  contents:
  - "8.  Protocol Parameters\n   The parameters used in this specification are listed\
    \ in this section.\n   These parameters are configurable, do not need to be stored\
    \ in\n   non-volatile storage, and can be varied by implementations at run-\n\
    \   time.  Default values for the parameters depend on the network size,\n   topology,\
    \ link layer, and traffic patterns.  Part of the\n   experimentation described\
    \ in Section 1.2 is to determine suitable\n   default values.\n   P_HOLD_TIME\
    \  - Is the time period after which a newly created or\n      modified Processed\
    \ Tuple expires and MUST be deleted.  An\n      implementation SHOULD use a value\
    \ for P_HOLD_TIME that is high\n      enough that the Processed Tuple for a packet\
    \ is still in memory on\n      all forwarding routers while the packet is transiting\
    \ the routing\n      domain.  The value SHOULD at least be MAX_HOP_LIMIT times\
    \ the\n      expected time to send a packet to a router on the same link.  The\n\
    \      value MUST be lower than the time it takes until the same sequence\n  \
    \    number is reached again after a wrap-around on the router\n      identified\
    \ by P_orig_address of the Processed Tuple.\n   MAX_HOP_LIMIT  - Is the initial\
    \ value of Hop Limit, and therefore the\n      maximum number of times that a\
    \ packet is forwarded in the routing\n      domain.  When choosing the value of\
    \ MAX_HOP_LIMIT, the size of the\n      network, the distance between source and\
    \ destination in number of\n      hops, and the maximum possible \"detour\" of\
    \ a packet SHOULD be\n      considered (compared to the shortest path).  Such\
    \ information MAY\n      be used from the RIB, if provided.\n"
- title: 9.  Data Packet Generation and Processing
  contents:
  - "9.  Data Packet Generation and Processing\n   The following sections specify\
    \ the process of handling a packet\n   entering the DFF routing domain, i.e.,\
    \ without a DFF header\n   (Section 9.1), as well as forwarding a data packet\
    \ from another\n   router running DFF (Section 9.2).\n"
- title: 9.1.  Data Packets Entering the DFF Routing Domain
  contents:
  - "9.1.  Data Packets Entering the DFF Routing Domain\n   This section applies for\
    \ any data packets upon their first entry into\n   a routing domain in which DFF\
    \ is used.  This occurs when a new data\n   packet is generated on this router,\
    \ or when a data packet is\n   forwarded from outside the routing domain (i.e.,\
    \ from a host attached\n   to this router or from a router outside the routing\
    \ domain in which\n   DFF is used).  Before such a data packet (henceforth denoted\
    \ \"current\n   packet\") is transmitted, the following steps MUST be executed:\n\
    \   1.  If required, encapsulate the packet, as specified in Section 14.\n   2.\
    \  Add the DFF header to the current packet (to the outer header if\n       the\
    \ packet has been encapsulated) with:\n       *  DUP := 0;\n       *  RET := 0;\n\
    \       *  Sequence Number := a new sequence number of the packet (as\n      \
    \    specified in Section 12).\n   3.  Check that the packet does not exceed the\
    \ MTU, as specified in\n       Section 15.  In case it does, execute the procedures\
    \ listed in\n       Section 15 and do not further process the packet.\n   4. \
    \ Select the Next Hop (henceforth denoted \"next_hop\") for the\n       current\
    \ packet, as specified in Section 11.\n   5.  Add a Processed Tuple to the Processed\
    \ Set with:\n       *  P_orig_address := the Originator Address of the current\n\
    \          packet;\n       *  P_seq_number := the sequence number of the current\
    \ packet;\n       *  P_prev_hop := the Originator Address of the current packet;\n\
    \       *  P_next_hop_neighbor_list := [next_hop];\n       *  P_time := current\
    \ time + P_HOLD_TIME.\n   6.  Pass the current packet to the underlying link layer\
    \ for\n       transmission to next_hop.  If the transmission fails (as\n     \
    \  determined by the link layer), the procedures in Section 10 MUST\n       be\
    \ executed.\n"
- title: 9.2.  Data Packet Processing
  contents:
  - "9.2.  Data Packet Processing\n   When a packet (henceforth denoted the \"current\
    \ packet\") is received\n   by a router, the following tasks MUST be performed:\n\
    \   1.  If the packet header is malformed (i.e., the header format is not\n  \
    \     as expected by this specification), drop the packet.\n   2.  Otherwise,\
    \ if the Destination Address of the packet matches an\n       address of an interface\
    \ of this router, deliver the packet to\n       upper layers and do not further\
    \ process the packet, as specified\n       below.\n   3.  Decrement the value\
    \ of the Hop Limit field by one (1).\n   4.  Drop the packet if Hop Limit is decremented\
    \ to zero and do not\n       further process the packet, as specified below.\n\
    \   5.  If no Processed Tuple (henceforth denoted the \"current tuple\")\n   \
    \    exists in the Processed Set, where both of the following\n       conditions\
    \ are true:\n       +  P_orig_address = the Originator Address of the current\
    \ packet,\n          AND;\n       +  P_seq_number = the sequence number of the\
    \ current packet.\n       Then:\n       1.  Add a Processed Tuple (henceforth\
    \ denoted the \"current\n           tuple\") with:\n           +  P_orig_address\
    \ := the Originator Address of the current\n              packet;\n          \
    \ +  P_seq_number := the sequence number of the current packet;\n           +\
    \  P_prev_hop := the Previous Hop Address of the current\n              packet;\n\
    \           +  P_next_hop_neighbor_list := [];\n           +  P_time := current\
    \ time + P_HOLD_TIME.\n       2.  Set RET to 0 in the DFF header.\n       3. \
    \ Select the Next Hop (henceforth denoted \"next_hop\") for the\n           current\
    \ packet, as specified in Section 11.\n       4.  P_next_hop_neighbor_list :=\
    \ P_next_hop_neighbor_list@\n           [next_hop].\n       5.  Pass the current\
    \ packet to the underlying link layer for\n           transmission to next_hop.\
    \  If the transmission fails (as\n           determined by the link layer), the\
    \ procedures in Section 10\n           MUST be executed.\n   6.  Otherwise, if\
    \ a tuple exists:\n       1.  If the return flag of the current packet is not\
    \ set (RET = 0)\n           (i.e., a loop has been detected):\n           1. \
    \ Set RET := 1.\n           2.  Pass the current packet to the underlying link\
    \ layer for\n               transmission to the Previous Hop.\n       2.  Otherwise,\
    \ if the return flag of the current packet is set\n           (RET = 1):\n   \
    \        1.  If the Previous Hop of the packet is not contained in\n         \
    \      P_next_hop_neighbor_list of the current tuple, drop the\n             \
    \  packet.\n           2.  If the Previous Hop of the packet (i.e., the address\
    \ of\n               the router from which the current packet has just been\n\
    \               received) is equal to P_prev_hop of the current tuple\n      \
    \         (i.e., the address of the router from which the current\n          \
    \     packet has been first received), drop the packet.\n           3.  Set RET\
    \ := 0.\n           4.  Select the Next Hop (henceforth denoted \"next_hop\")\
    \ for\n               the current packet, as specified in Section 11.\n      \
    \     5.  Modify the current tuple:\n               -  P_next_hop_neighbor_list\
    \ := P_next_hop_neighbor_list@\n                  [next_hop];\n              \
    \ -  P_time := current time + P_HOLD_TIME.\n           6.  If the selected Next\
    \ Hop is equal to P_prev_hop of the\n               current tuple, as specified\
    \ in Section 11 (i.e., all\n               candidate Next Hops have been unsuccessfully\
    \ tried), set\n               RET := 1.  If this router (i.e., the router receiving\
    \ the\n               current packet) has the same address as the Originator\n\
    \               Address of the current packet, drop the packet.\n           7.\
    \  Pass the current packet to the underlying link layer for\n               transmission\
    \ to next_hop.  If transmission fails (as\n               determined by the link\
    \ layer), the procedures in\n               Section 10 MUST be executed.\n"
- title: 10.  Unsuccessful Packet Transmission
  contents:
  - "10.  Unsuccessful Packet Transmission\n   DFF requires that the underlying link\
    \ layer provides information as\n   to whether a packet is successfully received\
    \ by the Next Hop.\n   Absence of such a signal is interpreted as a delivery failure\
    \ of the\n   packet (henceforth denoted the \"current packet\").  Note that the\n\
    \   underlying link layer MAY retry sending the packet multiple times\n   (e.g.,\
    \ using exponential back-off) before determining that the packet\n   has not been\
    \ successfully received by the Next Hop.  The following\n   steps are executed\
    \ when a delivery failure occurs and Section 9\n   requests that they be executed.\n\
    \   1.  Set the DUP flag of the DFF header of the current packet to 1.\n   2.\
    \  Select the Next Hop (henceforth denoted \"next_hop\") for the\n       current\
    \ packet, as specified in Section 11.\n   3.  Find the Processed Tuple (the \"\
    current tuple\") in the Processed\n       Set with:\n       +  P_orig_address\
    \ = the Originator Address of the current packet,\n          AND;\n       +  P_seq_number\
    \ = the sequence number of the current packet.\n   4.  If no current tuple is\
    \ found, drop the packet.\n   5.  Otherwise, modify the current tuple:\n     \
    \  *  P_next_hop_neighbor_list := P_next_hop_neighbor_list@\n          [next_hop];\n\
    \       *  P_time := current time + P_HOLD_TIME.\n   6.  If the selected next_hop\
    \ is equal to P_prev_hop of the current\n       tuple, as specified in Section\
    \ 11 (i.e., all neighbors have been\n       unsuccessfully tried), then:\n   \
    \    *  RET := 1\n       *  Decrement the value of the Hop Limit field by one\
    \ (1).  Drop\n          the packet if the Hop Limit is decremented to zero.\n\
    \   7.  Otherwise\n       *  RET := 0\n   8.  Transmit the current packet to next_hop.\
    \  If transmission fails\n       (as determined by the link layer), and if the\
    \ next_hop does not\n       equal P_prev_hop from the current tuple, the procedures\
    \ in\n       Section 10 MUST be executed.\n"
- title: 11.  Determining the Next Hop for a Packet
  contents:
  - "11.  Determining the Next Hop for a Packet\n   When forwarding a packet, a router\
    \ determines a valid Next Hop for\n   that packet, as specified in this section.\
    \  As a Processed Tuple\n   either existed when receiving the packet (henceforth\
    \ denoted the\n   \"current packet\") or was created, it can be assumed that the\n\
    \   Processed Tuple for that packet (henceforth denoted the \"current\n   tuple\"\
    ) is available.\n   The Next Hop is chosen from a list of candidate Next Hops\
    \ in order of\n   decreasing priority.  This list is created per packet.  The\
    \ maximum\n   candidate Next Hop list for a packet contains all the neighbors\
    \ of\n   the router (as determined from an external neighborhood discovery\n \
    \  process), except for the Previous Hop of the current packet.  A\n   smaller\
    \ list MAY be used, if desired, and the exact selection of the\n   size of the\
    \ candidate Next Hop list is a local decision that is made\n   in each router\
    \ and does not affect interoperability.  Selecting a\n   smaller list may reduce\
    \ the path length of a packet traversing the\n   network and reduce the required\
    \ state in the Processed Set, but it\n   may result in valid paths that are not\
    \ explored.  If information from\n   the RIB is used, then the candidate Next\
    \ Hop list MUST contain at\n   least the Next Hop indicated in the RIB as the\
    \ Next Hop on the\n   shortest path to the destination, and it SHOULD contain\
    \ all Next Hops\n   indicated to the RIB as Next Hops on paths to the destination.\
    \  If a\n   Next Hop from the RIB equals the Previous Hop of the current packet,\n\
    \   it MUST NOT be added to the candidate Next Hop list.\n   The list MUST NOT\
    \ contain addresses that are listed in\n   P_next_hop_neighbor_list of the current\
    \ tuple, in order to avoid\n   sending the packet to the same neighbor multiple\
    \ times.  Moreover, an\n   address MUST NOT appear more than once in the list,\
    \ for the same\n   reason.  Also, addresses of an interface of this router MUST\
    \ NOT be\n   added to the list.\n   The list has an order of preference, where\
    \ packets are first sent to\n   the Next Hops at the top of the list during depth-first\
    \ processing as\n   specified in Sections 9.1 and 9.2.  The following order is\n\
    \   RECOMMENDED, with the elements listed on top having the highest\n   preference:\n\
    \   1.  The neighbor that is indicated in the RIB as the Next Hop on the\n   \
    \    shortest path to the destination of the current packet;\n   2.  Other neighbors\
    \ indicated in the RIB as Next Hops on the path to\n       the destination of\
    \ the current packet;\n   3.  All other symmetric neighbors (except the Previous\
    \ Hop of the\n       current packet).\n   Additional information from the RIB\
    \ or the list of symmetric\n   neighbors (such as route cost or link quality)\
    \ MAY be used for\n   determining the order.\n   If the candidate Next Hop list\
    \ created as specified in this section\n   is empty, the selected Next Hop MUST\
    \ be P_prev_hop of the current\n   tuple; this case applies when returning the\
    \ packet to the Previous\n   Hop.\n"
- title: 12.  Sequence Numbers
  contents:
  - "12.  Sequence Numbers\n   Whenever a router generates a packet or forwards a\
    \ packet on behalf\n   of a host or a router outside the routing domain where\
    \ DFF is used, a\n   sequence number MUST be created and included in the DFF header.\
    \  This\n   sequence number MUST be unique locally on each router where it is\n\
    \   created.  A sequence number MUST start at 0 for the first packet to\n   which\
    \ the DFF header is added, and then increment by 1 for each new\n   packet.  The\
    \ sequence number MUST NOT be greater than 65535 and MUST\n   wrap around to 0.\n"
- title: 13.  Modes of Operation
  contents:
  - "13.  Modes of Operation\n   DFF can be used either as the \"route-over\" IPv6-forwarding\
    \ protocol,\n   or alternatively as the \"mesh-under\" data-forwarding protocol\
    \ for the\n   LoWPAN adaptation layer [RFC4944].  Previous sections have specified\n\
    \   the DFF mechanism in general; specific differences for each MoP are\n   specified\
    \ in this section.\n"
- title: 13.1.  Route-Over
  contents:
  - "13.1.  Route-Over\n   This section maps the general terminology from Section\
    \ 2.2 to the\n   specific terminology when using the \"route-over\" MoP.\n"
- title: 13.1.1.  Mapping of DFF Terminology to IPv6 Terminology
  contents:
  - "13.1.1.  Mapping of DFF Terminology to IPv6 Terminology\n   The following terms\
    \ are those listed in Section 2.2, and their\n   meaning is explicitly defined\
    \ when DFF is used in the \"route-over\"\n   MoP:\n   Packet  - An IPv6 packet,\
    \ as specified in [RFC2460].\n   Packet Header  - An IPv6 extension header, as\
    \ specified in [RFC2460].\n   Address  - An IPv6 address, as specified in [RFC4291].\n\
    \   Originator Address  - The Originator Address corresponds to the\n      Source\
    \ Address field of the IPv6 header, as specified in\n      [RFC2460].\n   Destination\
    \ Address  - The Destination Address corresponds to the\n      destination field\
    \ of the IPv6 header, as specified in [RFC2460].\n   Next Hop  - The Next Hop\
    \ is the IPv6 address of the node to which the\n      packet is sent; the link-layer\
    \ address from that IP address is\n      resolved by a mechanism such as Neighbor\
    \ Discovery (ND) [RFC4861].\n      The link-layer address is then used by L2 as\
    \ the destination.\n   Previous Hop  - The Previous Hop is the IPv6 address from\
    \ the\n      interface of the node from which the packet has been received.\n\
    \   Hop Limit  - The Hop Limit corresponds to the Hop Limit field in the\n   \
    \   IPv6 header, as specified in [RFC2460].\n"
- title: 13.1.2.  Packet Format
  contents:
  - "13.1.2.  Packet Format\n   In the \"route-over\" MoP, all IPv6 packets MUST conform\
    \ with the\n   format specified in [RFC2460].\n   The DFF header, as specified\
    \ below, is an IPv6 Hop-by-Hop Options\n   header, and is depicted in Figure 1\
    \ (where DUP is abbreviated to D,\n   and RET is abbreviated to R because of the\
    \ limited space in the\n   figure).  This document specifies a new option to be\
    \ used inside the\n   Hop-by-Hop Options header, which contains the DFF fields\
    \ (DUP and RET\n   flags and sequence number, as specified in Section 7).\n  \
    \ [RFC6564] specifies:\n      New options for the existing Hop-by-Hop Header SHOULD\
    \ NOT be\n      created or specified unless no alternative solution is feasible.\n\
    \      Any proposal to create a new option for the existing Hop-by-Hop\n     \
    \ Header MUST include a detailed explanation of why the hop-by-hop\n      behavior\
    \ is absolutely essential in the document proposing the new\n      option with\
    \ hop-by-hop behavior.\n   [RFC6564] recommends to use destination headers instead\
    \ of Hop-by-Hop\n   Options headers.  Destination headers are only read by the\n\
    \   destination of an IPv6 packet, not by intermediate routers.  However,\n  \
    \ the mechanism specified in this document relies on intermediate\n   routers\
    \ reading and editing the header.  Specifically, the sequence\n   number and the\
    \ DUP and RET flags are read by each router running the\n   DFF protocol.  Modifying\
    \ the DUP and RET flags is essential for this\n   protocol to tag duplicate or\
    \ returned packets.  Without the DUP flag,\n   a duplicate packet cannot be discerned\
    \ from a looping packet, and\n   without the RET flag, a returned packet cannot\
    \ be discerned from a\n   looping packet.\n                          1       \
    \            2                   3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7\
    \ 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |  Next Header  |  Hdr Ext Len  |  OptTypeDFF   | OptDataLenDFF |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |VER|D|R|0|0|0|0|\
    \        Sequence Number        |      Pad1     |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                         Figure 1: IPv6 DFF Header\n   Field definitions of the\
    \ DFF header are as follows:\n   Next Header  - 8-bit selector.  Identifies the\
    \ type of header\n      immediately following the Hop-by-Hop Options header, as\
    \ specified\n      in [RFC2460].\n   Hdr Ext Len  - 8-bit unsigned integer.  Length\
    \ of the Hop-by-Hop\n      Options header in 8-octet units, not including the\
    \ first 8 octets,\n      as specified in [RFC2460].  This value is set to 0 (zero).\n\
    \   OptTypeDFF  - 8-bit identifier of the type of option, as specified in\n  \
    \    [RFC2460].  This value is set to IP_DFF.  The two high-order bits\n     \
    \ of the option type MUST be set to '11', and the third bit is equal\n      to\
    \ '1'.  With these bits, according to [RFC2460], routers that do\n      not understand\
    \ this option on a received packet discard the packet\n      and, only if the\
    \ packet's Destination Address was not a multicast\n      address, send an ICMP\
    \ Parameter Problem (Code 2) message to the\n      packet's Source Address, pointing\
    \ to the unrecognized option type.\n      Also, according to [RFC2460], the values\
    \ within the option are\n      expected to change en route.\n   OptDataLenDFF\
    \  - 8-bit unsigned integer.  Length of the option data\n      field of this option,\
    \ in octets, as specified in [RFC2460].  This\n      value is set to 2 (two).\n\
    \   DFF fields  - A 2-bit version field (abbreviated as VER); the DUP\n      (abbreviated\
    \ as D) and RET (abbreviated as R) flags follow after\n      Mesh Forw, as specified\
    \ in Section 13.2.2.  The version specified\n      in this document is '00'. \
    \ All other bits (besides VER, DUP, and\n      RET) of this octet are reserved\
    \ and MUST be set to 0.\n   Sequence Number  - A 16-bit field, containing an unsigned\
    \ integer\n      sequence number, as specified in Section 7.\n   Pad1  - Since\
    \ the Hop-by-Hop Options header must have a length that\n      is a multiple of\
    \ 8 octets, a Pad1 option is used, as specified in\n      [RFC2460].  All bits\
    \ of this octet are 0.\n"
- title: 13.2.  Mesh-Under
  contents:
  - "13.2.  Mesh-Under\n   This section maps the general terminology from Section\
    \ 2.2 to the\n   specific terminology when using the \"mesh-under\" MoP.\n"
- title: 13.2.1.  Mapping of DFF Terminology to LoWPAN Terminology
  contents:
  - "13.2.1.  Mapping of DFF Terminology to LoWPAN Terminology\n   The following terms\
    \ are those listed in Section 2.2 (besides \"Mode of\n   Operation\"), and their\
    \ meaning is explicitly defined when DFF is used\n   in the \"mesh-under\" MoP.\n\
    \   Packet  - A \"LoWPAN-encapsulated packet\" (as specified in [RFC4944]),\n\
    \      which contains an IPv6 packet as payload.\n   Packet Header  - A LoWPAN\
    \ header, as specified in [RFC4944].\n   Address  - A 16-bit short or EUI-64 link-layer\
    \ address, as specified\n      in [RFC4944].\n   Originator Address  - The Originator\
    \ Address corresponds to the\n      Originator Address field of the Mesh Addressing\
    \ header, as\n      specified in [RFC4944].\n   Destination Address  - The Destination\
    \ Address corresponds to the\n      Final Destination field of the Mesh Addressing\
    \ header, as\n      specified in [RFC4944].\n   Next Hop  - The Next Hop is the\
    \ Destination Address of a frame\n      containing a LoWPAN-encapsulated packet,\
    \ as specified in\n      [RFC4944].\n   Previous Hop  - The Previous Hop is the\
    \ Source Address of the frame\n      containing a LoWPAN-encapsulated packet,\
    \ as specified in\n      [RFC4944].\n   Hop Limit  - The Hop Limit corresponds\
    \ to the Deep Hops Left field in\n      the Mesh Addressing header, as specified\
    \ in [RFC4944].\n"
- title: 13.2.2.  Packet Format
  contents:
  - "13.2.2.  Packet Format\n   In the \"mesh-under\" MoP, all IPv6 packets MUST conform\
    \ with the\n   format specified in [RFC4944].  All data packets exchanged by routers\n\
    \   using this specification MUST contain the Mesh Addressing header as\n   part\
    \ of the LoWPAN encapsulation, as specified in [RFC4944].\n   The DFF header,\
    \ as specified below, MUST follow the Mesh Addressing\n   header.  After these\
    \ two headers, any other LoWPAN header, e.g.,\n   header compression or fragmentation\
    \ headers, MAY also be added before\n   the actual payload.  Figure 2 depicts\
    \ the Mesh Addressing header\n   defined in [RFC4944], and Figure 3 depicts the\
    \ DFF header.\n                          1                   2               \
    \    3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n\
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \ |1 0|V|F|HopsLft| DeepHopsLeft  |orig. address, final address...\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                     Figure 2: Mesh Addressing Header\n                     \
    \     1                   2                   3\n      0 1 2 3 4 5 6 7 8 9 0 1\
    \ 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |0 1| Mesh Forw |VER|D|R|0|0|0|0|        sequence number        |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n        \
    \           Figure 3: Header for DFF Data Packets\n   Field definitions of the\
    \ Mesh Addressing header are as specified in\n   [RFC4944].  When adding that\
    \ header to the LoWPAN encapsulation on\n   the Originator, the fields of the\
    \ Mesh Addressing header MUST be set\n   to the following values:\n   o  V :=\
    \ 0 if the Originator Address is an IEEE extended 64-bit\n      address (EUI-64);\
    \ otherwise, V := 1 if it is a short 16-bit\n      address.\n   o  F := 0 if the\
    \ Final Destination Address is an IEEE extended 64-bit\n      address (EUI-64);\
    \ otherwise, F := 1 if it is a short 16-bit\n      address.\n   o  Hops Left :=\
    \ 0xF (i.e., reserved value indicating that the Deep\n      Hops Left field follows);\n\
    \   o  Deep Hops Left := MAX_HOP_LIMIT.\n   Field definitions of the DFF header\
    \ are as follows:\n   Mesh Forw  - A 6-bit identifier that allows for the use\
    \ of different\n      mesh-forwarding mechanisms.  As specified in [RFC4944],\
    \ additional\n      mesh-forwarding mechanisms should use the reserved dispatch\
    \ byte\n      values following LOWPAN_BC0; therefore, '0 1' MUST precede Mesh\n\
    \      Forw.  The value of Mesh Forw is LOWPAN_DFF.\n   DFF fields  - A 2-bit\
    \ version (abbreviated as VER) field; the DUP\n      (abbreviated as D) and RET\
    \ (abbreviated as R) flags follow after\n      Mesh Forw, as specified in Section\
    \ 13.2.2.  The version specified\n      in this document is '00'.  All other bits\
    \ (besides VER, DUP, and\n      RET) of this octet are reserved and MUST be set\
    \ to 0.\n   Sequence Number  - A 16-bit field, containing an unsigned integer\n\
    \      sequence number, as specified in Section 7.\n"
- title: 14.  Scope Limitation of DFF
  contents:
  - "14.  Scope Limitation of DFF\n   The forwarding mechanism specified in this document\
    \ MUST be limited\n   in scope to the routing domain in which DFF is used.  That\
    \ also\n   implies that any headers specific to DFF do not traverse the\n   boundaries\
    \ of the routing domain.  This section specifies, both for\n   the \"route-over\"\
    \ MoP and the \"mesh-under\" MoP, how to limit the scope\n   of DFF to the routing\
    \ domain in which it is used.\n   Figures 4 to 7 depict four different cases for\
    \ source and destination\n   of traffic with regards to the scope of the routing\
    \ domain in which\n   DFF is used.  Sections 14.1 and 14.2 specify how routers\
    \ limit the\n   scope of DFF for the \"route-over\" MoP and the \"mesh-under\"\
    \ MoP,\n   respectively, for these cases.  In these sections, all nodes \"inside\n\
    \   the routing domain\" are routers and use DFF, and may also be sources\n  \
    \ or destinations.  Sources or destinations \"outside the routing\n   domain\"\
    \ do not run DFF; either they are hosts attached to a router in\n   the routing\
    \ domain that is running DFF, or they are themselves\n   routers but outside the\
    \ routing domain and not running DFF.\n                        +-----------------+\n\
    \                        |                 |\n                        |  (S) ---->\
    \ (D)  |\n                        |                 |\n                      \
    \  +-----------------+\n                        Routing Domain\n         Figure\
    \ 4: Traffic within the Routing Domain (from S to D)\n                       \
    \ +-----------------+\n                        |                 |\n         \
    \               |  (S) --------> (R) --------> (D)\n                        |\
    \                 |\n                        +-----------------+\n           \
    \             Routing Domain\n            Figure 5: Traffic from Within the Routing\
    \ Domain to\n                    Outside of the Domain (from S to D)\n       \
    \                 +-----------------+\n                        |             \
    \    |\n         (S) --------> (R) --------> (D)  |\n                        |\
    \                 |\n                        +-----------------+\n           \
    \             Routing Domain\n           Figure 6: Traffic from Outside the Routing\
    \ Domain to\n                      Inside the Domain (from S to D)\n         \
    \               +-----------------+\n                        |               \
    \  |\n         (S) --------> (R1) -----------> (R2) --------> (D)\n          \
    \              |                 |\n                        +-----------------+\n\
    \                        Routing Domain\n     Figure 7: Traffic from Outside the\
    \ Routing Domain, Traversing the\n        Domain and Then to the Outside of the\
    \ Domain (from S to D)\n              Key:\n                  (S) = source router\n\
    \                  (D) = destination router\n                  (R), (R1), (R2)\
    \ = other routers\n"
- title: 14.1.  Route-Over MoP
  contents:
  - "14.1.  Route-Over MoP\n   In Figure 4, both the source and destination of the\
    \ traffic are\n   routers within the routing domain.  If traffic is originated\
    \ at S,\n   the DFF header is added to the IPv6 header (as specified in\n   Section\
    \ 13.1.2).  The Originator Address is set to S and the\n   Destination Address\
    \ is set to D.  The packet is forwarded to D using\n   this specification.  When\
    \ router D receives the packet, it processes\n   the payload of the IPv6 packet\
    \ in upper layers.  This case assumes\n   that S has knowledge that D is in the\
    \ routing domain, e.g., because\n   of the administrative setting based on the\
    \ IP address of the\n   destination.  If S has no knowledge about whether D is\
    \ in the routing\n   domain, IPv6-in-IPv6 tunnels as specified in [RFC2473] MUST\
    \ be used.\n   These cases are described in the following paragraphs.\n   In Figure\
    \ 5, the source of the traffic (S) is within the routing\n   domain, and the destination\
    \ (D) is outside of the routing domain.\n   The IPv6 packet, originated at S,\
    \ MUST be encapsulated according to\n   [RFC2473] (IPv6-in-IPv6 tunnels) and the\
    \ DFF header MUST be added to\n   the outer IPv6 header.  S chooses the next router\
    \ that should process\n   the packet as the tunnel exit-point (R).  Administrative\
    \ settings, as\n   well as information from a routing protocol, may be used to\
    \ determine\n   the tunnel exit-point.  If no information is available for which\n\
    \   router to choose as the tunnel exit-point, the Next Hop MUST be used\n   as\
    \ the tunnel exit-point.  In some cases, the tunnel exit-point will\n   be the\
    \ final router along a path towards the packet's destination,\n   and the packet\
    \ will only traverse a single tunnel (e.g., if R is a\n   known border router\
    \ then S can choose R as the tunnel exit-point).\n   In other cases, the tunnel\
    \ exit-point will not be the final router\n   along the path to D, and the packet\
    \ may traverse multiple tunnels to\n   reach the destination; note that in this\
    \ case, the DFF mechanism is\n   only used inside each IPv6-in-IPv6 tunnel.  The\
    \ Originator Address of\n   the packet is set to S and the Destination Address\
    \ is set to the\n   tunnel exit-point (in the outer IPv6 header).  The packet\
    \ is\n   forwarded to the tunnel exit-point using this specification\n   (potentially\
    \ using multiple consecutive IPv6-in-IPv6 tunnels).  When\n   router R receives\
    \ the packet, it decapsulates the IPv6 packet and\n   forwards the inner IPv6\
    \ packet to D, using normal IPv6 forwarding as\n   specified in [RFC2460].\n \
    \  In Figure 6, the source of the traffic (S) is outside of the routing\n   domain,\
    \ and the destination (D) is inside of the routing domain.  The\n   IPv6 packet,\
    \ originated at S, is forwarded to R using normal IPv6\n   forwarding as specified\
    \ in [RFC2460].  Router R MUST encapsulate the\n   IPv6 packet according to [RFC2473]\
    \ and add the DFF header (as\n   specified in Section 13.1.2) to the outer IPv6\
    \ header.  Like in the\n   previous case, R has to select a tunnel exit-point;\
    \ if it knows that\n   D is in the routing domain (e.g., based on administrative\
    \ settings),\n   it SHOULD select D as the tunnel exit-point.  In case it does\
    \ not\n   have any information as to which exit-point to select, it MUST use\n\
    \   the Next Hop as the tunnel exit-point, limiting the effectiveness of\n   DFF\
    \ to inside each IPv6-in-IPv6 tunnel.  The Originator Address of\n   the packet\
    \ is set to R, the Destination Address to the tunnel exit-\n   point (both in\
    \ the outer IPv6 header), and the sequence number in the\n   DFF header is generated\
    \ locally on R.  The packet is forwarded to D\n   using this specification.  When\
    \ router D receives the packet, it\n   decapsulates the inner IPv6 packet and\
    \ processes the payload of the\n   inner IPv6 packet in upper layers.\n   This\
    \ mechanism is typically not used in transit networks; therefore,\n   this case\
    \ is discouraged, but described nevertheless for\n   completeness.  In Figure\
    \ 7, both the source of the traffic (S) and\n   the destination (D) are outside\
    \ of the routing domain.  The IPv6\n   packet, originated at S, is forwarded to\
    \ R1 using normal IPv6\n   forwarding, as specified in [RFC2460].  Router R1 MUST\
    \ encapsulate\n   the IPv6 packet according to [RFC2473] and add the DFF header\
    \ (as\n   specified in Section 13.1.2).  R1 selects a tunnel exit-point like in\n\
    \   the previous cases; if R2 is, e.g., a known border router, then R1\n   can\
    \ select R2 as the tunnel exit-point.  The Originator Address is\n   set to R1,\
    \ the Destination Address is set to the tunnel exit-point\n   (both in the outer\
    \ IPv6 header), and the sequence number in the DFF\n   header is generated locally\
    \ on R1.  The packet is forwarded to the\n   tunnel exit-point using this specification\
    \ (potentially traversing\n   multiple consecutive IPv6-in-IPv6 tunnels).  When\
    \ router R2 receives\n   the packet, it decapsulates the inner IPv6 packet and\
    \ forwards the\n   inner IPv6 packet to D, using normal IPv6 forwarding as specified\
    \ in\n   [RFC2460].\n"
- title: 14.2.  Mesh-Under MoP
  contents:
  - "14.2.  Mesh-Under MoP\n   In Figure 4, both the source and destination of the\
    \ traffic are\n   routers within the routing domain.  If traffic is originated\
    \ at\n   router S, the LoWPAN-encapsulated packet is created from the IPv6\n \
    \  packet, as specified in [RFC4944].  Then, the Mesh Addressing header\n   and\
    \ the DFF header (as specified in Section 13.2.2) are added to the\n   LoWPAN\
    \ encapsulation on router S.  The Originator Address is set to S\n   and the Destination\
    \ Address is set to D.  The packet is then\n   forwarded using this specification.\
    \  When router D receives the\n   packet, it processes the payload of the packet\
    \ in upper layers.\n   In Figure 5, the source of the traffic (S) is within the\
    \ routing\n   domain, and the destination (D) is outside of the routing domain\n\
    \   (which is known by S to be outside the routing domain because D uses\n   a\
    \ different IP prefix from the PAN).  The LoWPAN-encapsulated packet,\n   originated\
    \ at router S, is created from the IPv6 packet as specified\n   in [RFC4944].\
    \  Then, the Mesh Addressing header and the DFF header\n   (as specified in Section\
    \ 13.2.2) are added to the LoWPAN\n   encapsulation on router S.  The Originator\
    \ Address is set to S and\n   the Destination Address is set to R, which is a\
    \ known border router\n   of the PAN.  The packet is then forwarded using this\
    \ specification.\n   When router R receives the packet, it restores the IPv6 packet\
    \ from\n   the LoWPAN-encapsulated packet and forwards it to D, using normal\n\
    \   IPv6 forwarding, as specified in [RFC2460].\n   In Figure 6, the source of\
    \ the traffic (S) is outside of the routing\n   domain, and the destination (D)\
    \ is inside of the routing domain.  The\n   IPv6 packet, originated at S, is forwarded\
    \ to R using normal IPv6\n   forwarding, as specified in [RFC2460].  Router R\
    \ (which is a known\n   border router to the PAN) creates the LoWPAN-encapsulated\
    \ packet from\n   the IPv6 packet, as specified in [RFC4944].  Then, R adds the\
    \ Mesh\n   Addressing header and the DFF header (as specified in\n   Section 13.2.2).\
    \  The Originator Address is set to R, the Destination\n   Address to D, and the\
    \ sequence number in the DFF header is generated\n   locally on R.  The packet\
    \ is forwarded to D using this specification.\n   When router D receives the packet,\
    \ it restores the IPv6 packet from\n   the LoWPAN-encapsulated packet and processes\
    \ the payload in upper\n   layers.\n   As LoWPANs are typically not transit networks,\
    \ the following case is\n   discouraged, but described nevertheless for completeness:\
    \ In\n   Figure 7, both the source of the traffic (S) and the destination (D)\n\
    \   are outside of the routing domain.  The IPv6 packet, originated at S,\n  \
    \ is forwarded to R1 using normal IPv6 forwarding, as specified in\n   [RFC2460].\
    \  Router R1 (which is a known border router of the PAN)\n   creates the LoWPAN-encapsulated\
    \ packet from the IPv6 packet, as\n   specified in [RFC4944].  Then, it adds the\
    \ Mesh Addressing header and\n   the DFF header (as specified in Section 13.2.2).\
    \  The Originator\n   Address is set to R1, the Destination Address is set to\
    \ R2 (which is\n   another border router towards the destination), and the sequence\n\
    \   number in the DFF header is generated locally on R1.  The packet is\n   forwarded\
    \ to R2 using this specification.  When router R2 receives\n   the packet, it\
    \ restores the IPv6 packet from the LoWPAN-encapsulated\n   packet and forwards\
    \ the IPv6 packet to D, using normal IPv6\n   forwarding, as specified in [RFC2460].\n"
- title: 15.  MTU Exceedance
  contents:
  - "15.  MTU Exceedance\n   When adding the DFF header, as specified in Section 9.1,\
    \ or when\n   encapsulating the packet, as specified in Section 14, the packet\
    \ size\n   may exceed the MTU.  This is described in Section 5 of [RFC2460].\n\
    \   When the packet size of a packet to be forwarded by DFF exceeds the\n   MTU,\
    \ the following steps apply.\n   1.  The router MUST discard the packet.\n   2.\
    \  The router MAY log the event locally (depending on the storage\n       capabilities\
    \ of the router).\n   3.  The router MUST send back an ICMP \"Packet Too Big\"\
    \ message to the\n       source of the packet and report back the Next Hop MTU,\
    \ which\n       includes the overhead of adding the headers.\n"
- title: 16.  Security Considerations
  contents:
  - "16.  Security Considerations\n   Based on the recommendations in [RFC3552], this\
    \ section describes\n   security threats to DFF and lists which attacks are out\
    \ of scope,\n   which attacks DFF is susceptible to, and which attacks DFF protects\n\
    \   against.\n"
- title: 16.1.  Attacks That Are Out of Scope
  contents:
  - "16.1.  Attacks That Are Out of Scope\n   As DFF is a data-forwarding protocol,\
    \ any security issues concerning\n   the payload of the packets are not considered\
    \ in this section.\n   It is the responsibility of upper layers to use appropriate\
    \ security\n   mechanisms (IPsec, Transport Layer Security (TLS), etc.) according\
    \ to\n   application requirements.  As DFF does not modify the contents of IP\n\
    \   datagrams, other than the DFF header (which is a Hop-by-Hop Options\n   extension\
    \ header in the \"route-over\" MoP, and therefore not protected\n   by IPsec),\
    \ no special considerations for IPsec have to be addressed.\n   Any attack that\
    \ is not specific to DFF but that applies in general to\n   the link layer (e.g.,\
    \ wireless, Power Line Communication (PLC)) is\n   out of scope.  In particular,\
    \ these attacks are: eavesdropping,\n   packet insertion, packet replay, packet\
    \ deletion, and man-in-the-\n   middle attacks.  Appropriate link-layer encryption\
    \ can mitigate part\n   of these attacks and is therefore RECOMMENDED.\n"
- title: 16.2.  Protection Mechanisms of DFF
  contents:
  - "16.2.  Protection Mechanisms of DFF\n   DFF itself does not provide any additional\
    \ integrity,\n   confidentiality, or authentication.  Therefore, the level of\n\
    \   protection of DFF depends on the underlying link-layer security, as\n   well\
    \ as protection of the payload by upper-layer security (e.g.,\n   IPsec).\n  \
    \ In the following sections, whenever encrypting or digitally signing\n   packets\
    \ is suggested for protecting DFF, it is assumed that routers\n   are not compromised.\n"
- title: 16.3.  Attacks That Are in Scope
  contents:
  - "16.3.  Attacks That Are in Scope\n   This section discusses security threats\
    \ to DFF, and for each,\n   describes whether (and how) DFF is affected by the\
    \ threat.  DFF is\n   designed to be used in lossy and unreliable networks.  Predominant\n\
    \   examples of lossy networks are wireless networks, where routers send\n   packets\
    \ via broadcast.  The attacks listed below are easier to\n   exploit in wireless\
    \ media but can also be observed in wired networks.\n"
- title: 16.3.1.  Denial of Service
  contents:
  - "16.3.1.  Denial of Service\n   Denial-of-service (DoS) attacks are possible when\
    \ using DFF by either\n   exceeding the storage on a router or exceeding the available\n\
    \   bandwidth of the channel.  As DFF does not contain any algorithms\n   with\
    \ high complexity, it is unlikely that the processing power of the\n   router\
    \ could be exhausted by an attack on DFF.\n   The storage of a router can be exhausted\
    \ by increasing the size of\n   the Processed Set, i.e., by adding new tuples,\
    \ or by increasing the\n   size of each tuple.  New tuples can be added by injecting\
    \ new packets\n   in the network or by forwarding overheard packets.\n   Another\
    \ possible DoS attack is to send packets to a non-existing\n   address in the\
    \ network.  DFF would perform a depth-first search until\n   the Hop Limit has\
    \ reached zero.  It is therefore RECOMMENDED to set\n   the Hop Limit to a value\
    \ that limits the path length.\n   If security provided by the link layer is used,\
    \ this attack can be\n   mitigated if the malicious router does not possess valid\
    \ credentials,\n   since other routers would not forward data through the malicious\n\
    \   router.\n"
- title: 16.3.2.  Packet Header Modification
  contents:
  - "16.3.2.  Packet Header Modification\n   The following attacks can be exploited\
    \ by modifying the packet header\n   information, unless additional security (such\
    \ as link-layer security)\n   is used.\n"
- title: 16.3.2.1.  Return Flag Tampering
  contents:
  - "16.3.2.1.  Return Flag Tampering\n   A malicious router may tamper with the \"\
    return\" flag of a DFF packet\n   and send it back to the Previous Hop, but only\
    \ if the malicious\n   router has been selected as the Next Hop by the receiving\
    \ router (as\n   specified in Section 9.2).  If the malicious router had not been\n\
    \   selected as the Next Hop, then a returned packet is dropped by the\n   receiving\
    \ router.  Otherwise (i.e., the malicious router had been\n   selected as the\
    \ Next Hop by the receiving router, and the malicious\n   router has set the return\
    \ flag), the receiving router then tries\n   alternative neighbors.  This may\
    \ lead to packets never reaching their\n   destination, as well as an unnecessary\
    \ depth-first search in the\n   network (bandwidth exhaustion / energy drain).\n\
    \   This attack can be mitigated by using appropriate security of the\n   underlying\
    \ link layer.\n"
- title: 16.3.2.2.  Duplicate Flag Tampering
  contents:
  - "16.3.2.2.  Duplicate Flag Tampering\n   A malicious router may modify the Duplicate\
    \ Flag of a packet that it\n   forwards.\n   If it changes the flag from 0 to\
    \ 1, the packet would be detected as a\n   duplicate by other routers in the network\
    \ and not as a looping\n   packet.\n   If the Duplicate Flag is changed from 1\
    \ to 0, and a router receives\n   that packet for the second time (i.e., it has\
    \ already received a\n   packet with the same Originator Address and sequence\
    \ number before),\n   it will wrongly detect a loop.\n   This attack can be mitigated\
    \ by using appropriate security of the\n   underlying link layer.\n"
- title: 16.3.2.3.  Sequence Number Tampering
  contents:
  - "16.3.2.3.  Sequence Number Tampering\n   A malicious router may modify the sequence\
    \ number of a packet that it\n   forwards.\n   In particular, if the sequence\
    \ number is modified to a number of\n   another, previously sent packet of the\
    \ same Originator, this packet\n   may be wrongly perceived as a looping packet.\n\
    \   This attack can be mitigated by using appropriate security of the\n   underlying\
    \ link layer.\n"
- title: 17.  IANA Considerations
  contents:
  - "17.  IANA Considerations\n   IANA has allocated the value 01 000011 for LOWPAN_DFF\
    \ from the\n   Dispatch Type Field registry.\n   IANA has allocated the value\
    \ 0xEE for IP_DFF from the Destination\n   Options and Hop-by-Hop Options registry.\
    \  The first 3 bits of that\n   value are 111.\n"
- title: 18.  Acknowledgments
  contents:
  - "18.  Acknowledgments\n   Jari Arkko (Ericsson), Abdussalam Baryun (University\
    \ of Glamorgan),\n   Antonin Bas (Ecole Polytechnique), Thomas Clausen (Ecole\n\
    \   Polytechnifque), Yuichi Igarashi (Hitachi), Kazuya Monden (Hitachi),\n   Geoff\
    \ Mulligan (Proto6), Hiroki Satoh (Hitachi), Ganesh Venkatesh\n   (Mobelitix),\
    \ and Jiazi Yi (Ecole Polytechnique) provided useful\n   reviews of the draft\
    \ and discussions, which helped to improve this\n   document.\n   The authors\
    \ also would like to thank Ralph Droms, Adrian Farrel,\n   Stephen Farrell, Ted\
    \ Lemon, Alvaro Retana, Dan Romascanu, and Martin\n   Stiemerling for their reviews\
    \ during IETF LC and IESG evaluation.\n"
- title: 19.  References
  contents:
  - '19.  References

    '
- title: 19.1.  Normative References
  contents:
  - "19.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [RFC2460]  Deering, S. and R. Hinden, \"Internet Protocol, Version\
    \ 6\n              (IPv6) Specification\", RFC 2460, December 1998.\n   [RFC2473]\
    \  Conta, A. and S. Deering, \"Generic Packet Tunneling in\n              IPv6\
    \ Specification\", RFC 2473, December 1998.\n   [RFC4291]  Hinden, R. and S. Deering,\
    \ \"IP Version 6 Addressing\n              Architecture\", RFC 4291, February\
    \ 2006.\n   [RFC4944]  Montenegro, G., Kushalnagar, N., Hui, J., and D. Culler,\n\
    \              \"Transmission of IPv6 Packets over IEEE 802.15.4\n           \
    \   Networks\", RFC 4944, September 2007.\n   [RFC6130]  Clausen, T., Dearlove,\
    \ C., and J. Dean, \"Mobile Ad Hoc\n              Network (MANET) Neighborhood\
    \ Discovery Protocol (NHDP)\",\n              RFC 6130, April 2011.\n   [RFC6564]\
    \  Krishnan, S., Woodyatt, J., Kline, E., Hoagland, J., and\n              M.\
    \ Bhatia, \"A Uniform Format for IPv6 Extension Headers\",\n              RFC\
    \ 6564, April 2012.\n   [RFC6724]  Thaler, D., Draves, R., Matsumoto, A., and\
    \ T. Chown,\n              \"Default Address Selection for Internet Protocol Version\
    \ 6\n              (IPv6)\", RFC 6724, September 2012.\n"
- title: 19.2.  Informative References
  contents:
  - "19.2.  Informative References\n   [DFF_paper1]\n              Cespedes, S., Cardenas,\
    \ A., and T. Iwao, \"Comparison of\n              Data Forwarding Mechanisms for\
    \ AMI Networks\",  2012 IEEE\n              Innovative Smart Grid Technologies\
    \ Conference (ISGT),\n              January 2012.\n   [DFF_paper2]\n         \
    \     Iwao, T., Iwao, T., Yura, M., Nakaya, Y., Cardenas, A.,\n              Lee,\
    \ S., and R. Masuoka, \"Dynamic Data Forwarding in\n              Wireless Mesh\
    \ Networks\",  First IEEE International\n              Conference on Smart Grid\
    \ Communications (SmartGridComm),\n              October 2010.\n   [DFS_wikipedia]\n\
    \              Wikipedia, \"Depth-first search\", May 2013,\n              <http://en.wikipedia.org/w/\n\
    \              index.php?title=Depth-first_search&oldid=555203731>.\n   [KCEC_press_release]\n\
    \              Kit Carson Electric Cooperative (KCEC), \"DFF deployed by\n   \
    \           KCEC\", Press Release, 2011, <http://www.kitcarson.com/\n        \
    \      index.php?option=com_content&view=article&id=45&Itemid=1>.\n   [RFC3552]\
    \  Rescorla, E. and B. Korver, \"Guidelines for Writing RFC\n              Text\
    \ on Security Considerations\", BCP 72, RFC 3552,\n              July 2003.\n\
    \   [RFC4861]  Narten, T., Nordmark, E., Simpson, W., and H. Soliman,\n      \
    \        \"Neighbor Discovery for IP version 6 (IPv6)\", RFC 4861,\n         \
    \     September 2007.\n   [RFC6775]  Shelby, Z., Chakrabarti, S., Nordmark, E.,\
    \ and C. Bormann,\n              \"Neighbor Discovery Optimization for IPv6 over\
    \ Low-Power\n              Wireless Personal Area Networks (6LoWPANs)\", RFC 6775,\n\
    \              November 2012.\n"
- title: Appendix A.  Examples
  contents:
  - "Appendix A.  Examples\n   In this section, some example network topologies are\
    \ depicted, using\n   the DFF mechanism for data forwarding.  In these examples,\
    \ it is\n   assumed there is a routing protocol running that adds or inserts\n\
    \   entries into the RIB.\n"
- title: 'A.1.  Example 1: Normal Delivery'
  contents:
  - "A.1.  Example 1: Normal Delivery\n   Example 1 depicts a network topology with\
    \ seven routers, A to G, with\n   links between them as indicated by lines.  It\
    \ is assumed that router\n   A sends a packet to G, through B and D, according\
    \ to the routing\n   protocol.\n                                        +---+\n\
    \                                    +---+ D +-----+\n                       \
    \             |   +---+     |\n                            +---+   |         \
    \    |\n                        +---+ B +---+             |\n                \
    \        |   +---+   |             |\n                      +-+-+         |  \
    \ +---+   +-+-+\n                      | A |         +---+ E +---+ G +\n     \
    \                 +-+-+             +---+   +-+-+\n                        | \
    \  +---+                 |\n                        +---+ C +---+            \
    \ |\n                            +---+   |             |\n                   \
    \                 |   +---+     |\n                                    +---+ F\
    \ +-----+\n                                        +---+\n                   \
    \     Example 1: Normal Delivery\n   If no link fails in this topology, and no\
    \ loop occurs, then DFF\n   forwards the packet along the Next Hops listed in\
    \ the RIB of each of\n   the routers along the path towards the destination. \
    \ Each router adds\n   a Processed Tuple for the incoming packet and selects the\
    \ Next Hop,\n   as specified in Section 11, i.e., it will first select the Next\
    \ Hop\n   for router G, as determined by the routing protocol.\n"
- title: 'A.2.  Example 2: Forwarding with Link Failure'
  contents:
  - "A.2.  Example 2: Forwarding with Link Failure\n   Example 2 depicts the same\
    \ topology as Example 1, but both links\n   between B and D and between B and\
    \ E are unavailable (e.g., because of\n   wireless link characteristics).\n  \
    \                                      +---+\n                               \
    \     XXXX+ D +-----+\n                                    X   +---+     |\n \
    \                           +---+   X             |\n                        +---+\
    \ B +---+             |\n                        |   +---+   X             |\n\
    \                      +-+-+         X   +---+   +-+-+\n                     \
    \ | A |         XXXX+ E +---+ G +\n                      +-+-+             +---+\
    \   +-+-+\n                        |   +---+                 |\n             \
    \           +---+ C +---+             |\n                            +---+   |\
    \             |\n                                    |   +---+     |\n       \
    \                             +---+ F +-----+\n                              \
    \          +---+\n                          Example 2: Link Failure\n   When B\
    \ receives the packet from router A, it adds a Processed Tuple\n   and then tries\
    \ to forward the packet to D.  Once B detects that the\n   packet cannot be successfully\
    \ delivered to D because it does not\n   receive link-layer ACKs, it will follow\
    \ the procedures listed in\n   Section 10 by setting the DUP flag to 1, selecting\
    \ E as the new Next\n   Hop, adding E to the list of Next Hops in the Processed\
    \ Tuple, and\n   then forwarding the packet to E.\n   As the link to E also fails,\
    \ B will again follow the procedure in\n   Section 10.  As all possible Next Hops\
    \ (D and E) are listed in the\n   Processed Tuple, B will set the RET flag in\
    \ the packet and return it\n   to A.\n   A determines that it already has a Processed\
    \ Tuple for the returned\n   packet, resets the RET flag of the packet, and selects\
    \ a new Next Hop\n   for the packet.  As B is already in the list of Next Hops\
    \ in the\n   Processed Tuple, it will select C as the Next Hop and forward the\n\
    \   packet to it.  C will then forward the packet to F, and F delivers\n   the\
    \ packet to its destination G.\n"
- title: 'A.3.  Example 3: Forwarding with Missed Link-Layer Acknowledgment'
  contents:
  - "A.3.  Example 3: Forwarding with Missed Link-Layer Acknowledgment\n   Example\
    \ 3 depicts the same topology as Example 1, but the link-layer\n   acknowledgments\
    \ from C to A are lost (e.g., because the link is\n   unidirectional).  It is\
    \ assumed that A prefers a path to G through C\n   and F.\n                  \
    \                      +---+\n                                    +---+ D +-----+\n\
    \                                    |   +---+     |\n                       \
    \     +---+   |             |\n                        +---+ B +---+         \
    \    |\n                        |   +---+   |             |\n                \
    \      +-+-+         |   +---+   +-+-+\n                      | A |         +---+\
    \ E +---+ G +\n                      +-+-+             +---+   +-+-+\n       \
    \                 .   +---+                 |\n                        +...+ C\
    \ +---+             |\n                            +---+   |             |\n \
    \                                   |   +---+     |\n                        \
    \            +---+ F +-----+\n                                        +---+\n\
    \                Example 3: Missed Link-Layer Acknowledgment\n   While C successfully\
    \ receives the packet from A, A does not receive\n   the L2 ACK and assumes the\
    \ packet has not been delivered to C.\n   Therefore, it sets the DUP flag of the\
    \ packet to 1, in order to\n   indicate that this packet may be a duplicate. \
    \ Then, it forwards the\n   packet to B.\n"
- title: 'A.4.  Example 4: Forwarding with a Loop'
  contents:
  - "A.4.  Example 4: Forwarding with a Loop\n   Example 4 depicts the same topology\
    \ as Example 1, but there is a loop\n   from D to A, and A sends the packet to\
    \ G through B and D.\n                        +-----------------+\n          \
    \              |                 |\n                        |               +-+-+\n\
    \                        |           +---+ D +\n                        |    \
    \       |   +---+\n                       \\|/  +---+   |\n                  \
    \      +---+ B +---+\n                        |   +---+   |\n                \
    \      +-+-+         |   +---+   +-+-+\n                      | A |         +---+\
    \ E +---+ G +\n                      +-+-+             +---+   +-+-+\n       \
    \                 |   +---+                 |\n                        +---+ C\
    \ +---+             |\n                            +---+   |             |\n \
    \                                   |   +---+     |\n                        \
    \            +---+ F +-----+\n                                        +---+\n\
    \                              Example 4: Loop\n   When A receives the packet\
    \ through the loop from D, it will find a\n   Processed Tuple for the packet.\
    \  Router A will set the RET flag and\n   return the packet to D, which in turn\
    \ will return it to B.  B will\n   then select E as the Next Hop, which will then\
    \ forward it to G.\n"
- title: Appendix B.  Deployment Experience
  contents:
  - "Appendix B.  Deployment Experience\n   DFF has been deployed and experimented\
    \ with both in real deployments\n   and in network simulations, as described below.\n"
- title: B.1.  Deployments in Japan
  contents:
  - "B.1.  Deployments in Japan\n   The majority of the large Advanced Metering Infrastructure\
    \ (AMI)\n   deployments using DFF are located in Japan, but the data of these\n\
    \   networks is the property of Japanese utilities and cannot be\n   disclosed.\n"
- title: B.2.  Kit Carson Electric Cooperative
  contents:
  - "B.2.  Kit Carson Electric Cooperative\n   DFF has been deployed at Kit Carson\
    \ Electric Cooperative (KCEC), a\n   non-profit organization distributing electricity\
    \ to about 30,000\n   customers in New Mexico.  As described in a press release\n\
    \   [KCEC_press_release], DFF is running on currently about 2000 electric\n  \
    \ meters.  All meters are connected through a mesh network using an\n   unreliable,\
    \ wireless medium.  DFF is used together with a distance-\n   vector routing protocol.\
    \  Metering data from each meter is sent\n   towards a gateway periodically (every\
    \ 15 minutes).  The data delivery\n   reliability is over 99%.\n"
- title: B.3.  Simulations
  contents:
  - "B.3.  Simulations\n   DFF has been evaluated in Ns2 (http://nsnam.isi.edu/nsnam)\
    \ and OMNEST\n   (http://www.omnest.com) simulations, in conjuction with a distance-\n\
    \   vector routing protocol.  The performance of DFF has been compared to\n  \
    \ using only the routing protocol without DFF.  The results published\n   in peer-reviewed\
    \ academic papers [DFF_paper1] [DFF_paper2] show\n   significant improvements\
    \ of the packet delivery ratio compared to\n   using only the distance-vector\
    \ protocol.\n"
- title: B.4.  Open-Source Implementation
  contents:
  - "B.4.  Open-Source Implementation\n   Fujitsu Laboratories of America is currently\
    \ working on an open-\n   source implementation of DFF, which will be released\
    \ in 2013 and will\n   allow for interoperability testings of different DFF implementations.\n\
    \   The implementation is written in Java and can be used both on real\n   machines\
    \ and in the Ns2 simulator.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Ulrich Herberg (editor)\n   Fujitsu\n   1240 E. Arques\
    \ Avenue, M/S 345\n   Sunnyvale, CA  94085\n   USA\n   Phone: +1 408 530 4528\n\
    \   EMail: ulrich.herberg@us.fujitsu.com\n   Alvaro A. Cardenas\n   University\
    \ of Texas at Dallas\n   School of Computer Science, 800 West Campbell Rd, EC\
    \ 31\n   Richardson, TX  75080-3021\n   USA\n   EMail: alvaro.cardenas@me.com\n\
    \   Tadashige Iwao\n   Fujitsu\n   Shiodome City Center, 5-2, Higashi-shimbashi\
    \ 1-chome, Minato-ku\n   Tokyo,\n   JP\n   Phone: +81-44-754-3343\n   EMail: smartnetpro-iwao_std@ml.css.fujitsu.com\n\
    \   Michael L. Dow\n   Freescale\n   6501 William Cannon Drive West\n   Austin,\
    \ TX  78735\n   USA\n   Phone: +1 512 895 4944\n   EMail: m.dow@freescale.com\n\
    \   Sandra L. Cespedes\n   Icesi University\n   Calle 18 #122-135, Pance\n   Cali,\n\
    \   Colombia\n   Phone: +57 (2) 5552334\n   EMail: scespedes@icesi.edu.co\n"
