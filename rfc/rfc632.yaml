- title: __initial_text__
  contents:
  - "           Throughput Degradations for Single Packet Messages\nThe transmission\
    \ of digitized speech over the ARPANET represents a new\ndimension in the use\
    \ of packet switching systems.  The throughput and\ndelay requirements for this\
    \ newly emerging application area are quite\ndifferent from the throughput and\
    \ delay requirements for interactive use\nor file transfers.  In particular, we\
    \ need to achieve a high throughput\nfor small messages since long messages result\
    \ in long source delays to\nfill the large buffers.  Therefore we are currently\
    \ studying the\nthroughput limits for single-packet messages.  We realize that\
    \ up to now\nlittle attempt was made to optimize throughput for low delay traffic.\n\
    It was nevertheless surprising for us to find out that the observed\nthroughput\
    \ for single-packet messages is in many cases only about one\nfourth of what one\
    \ would expect.  In what follows we are going to\nexplain why this happens and\
    \ what could be done to correct this\nsituation.\nOn April 1, 1974, we sent, using\
    \ the IMP message generator, single-\npacket messages at the highest possible\
    \ rate (\"RFNM-driven\") from the\nMOFFET-IMP to the SRI-IMP.  There are two three-hop\
    \ paths from MOFFET to\nSRI, one of them involving two 230.4 kbs circuits.  Since\
    \ there was\nhardly any interfering traffic we expected an average round-trip\
    \ delay\nof not more than 100 msec.  Assuming that there are, on an average, 3\n\
    messages in transmission between MOFFET and SRI and assuming a message\nlength\
    \ of about 1000 bits this should result in a throughout of more\nthan 30 kbs.\
    \  The observed through was, however, less than 8 kbs.  A\nrepetition of the experiment\
    \ showed the same result.  A more detailed\nanalysis of the collected data revealed\
    \ that an average number of 3.5\nmessages were simultaneously in transmission\
    \ between MOFFET and SRI.\nThe throughput degradation could therefore not have\
    \ been due to\ninterfering traffic between these two sites.  Also the channel\n\
    utilization for all channels that were involved in the transmission was\nless\
    \ than 40 percent.  The observed mean round-trip times between MOFFET\nand SRI,\
    \ however, were about 500 msec.  Since these large round-trip\ntimes were obviously\
    \ not due to physical limitations, we studied the\nflow control mechanism for\
    \ single-packet messages and were able to come\nup with an explanation for this\
    \ undesirable behavior.\nWhen a single-packet message arrives at the destination\
    \ IMP out of order\n(i.e., the logically preceding message has not yet arrived\
    \ there) it is\nnot accepted by the destination IMP.  It is rather treated as\
    \ a request\nfor the allocation of one reassembly buffer.  The corresponding ALLOCATE\n\
    is then sent back to the source IMP only after the RFNM for the previous\nmessage\
    \ has been processed.  We therefore may have the following\nsequence of events:\n\
    \     1  MSG(i) sent from SOURCE-IMP (message i is sent from the source\n    \
    \    IMP to the destination IMP).\n     2  MSG(i+1) sent from SOURCE-IMP.\n  \
    \   3  MSG(i+1) arrives at DEST-IMP (due to an alternate path or a line\n    \
    \    error, message (i+1) arrives at the destination IMP out of\n        order;\
    \ it is treated as a request for one reassembly buffer\n        allocation and\
    \ then discarded).\n     4  MSG(i) arrives at DEST-IMP (message i arrives at the\
    \ destination\n        IMP; it is put on the proper HOST output queue).\n    \
    \ 5  RFNM(i) sent from DEST-IMP (after message i has been accepted by\n      \
    \  the destination HOST the RFNM is sent to the source IMP).\n     6  ALL(i+1)\
    \ sent from DEST-IMP (only after the RFNM for message i\n        has been processed\
    \ can the ALLOCATE for message i + 1 be sent).\n     7  RFNM(i) arrives at SOURCE-IMP.\n\
    \     8  ALL(i+1) arrives at SOURCE-IMP.\n     9  MSG(i+1) arrives at DEST-IMP\
    \ (now message i+1 is put on the\n        proper HOST output queue.)\n    10 \
    \ RFNM(i+1) sent form DEST-IMP.\n    11  RFNM(i+1) arrives at SOURCE-IMP.\nNote\
    \ that the round-trip time for message i+1 is the time interval\nbetween event\
    \ 2 and event 11.  Therefore the round-trip time for message\ni+1 is more than\
    \ twice as large as it would have been if it had arrived\nin order, other conditions\
    \ being unchanged.  Therefore a line error will\nin many cases not only delay\
    \ the message in error but also the next\nsingle-packet message if this message\
    \ follows the preceding message\nwithin 125 msec, the error retransmission timeout\
    \ interval.  Also, a\nfaster, alternate path to the destination IMP can actually\
    \ slow down the\ntransmission since it causes messages to arrive there out of\
    \ order.\nThis situation becomes even worse when we consider RFNM-driven single-\n\
    packet message traffic.  Table 1 shows a possible sequence of events.\nWe again\
    \ assume that message i+1 reaches the destination IMP before\nmessage i.\n   \
    \     SOURCE IMP                      DESTINATION IMP\n        MSG(i) sent\n \
    \       MSG(i+1) sent\n        MSG(i+2) sent                   MSG(i+1) arr\n\
    \        MSG(i+3) sent                   MSG(i) arr\n                        \
    \                RFNM(i) sent\n                                        ALL(i+1)\
    \ sent\n                                        MSG(i+2) arr\n               \
    \                         MSG(i+3) arr\n        RFNM(i)  arr\n        MSG(i+4)\
    \ sent\n        ALL(i+1) arr                    MSG(i+4) arr\n        MSG(i+1)\
    \ sent                   MSG(i+1) arr\n                                      \
    \  RFNM(i+1) sent\n        RFNM(i+1) arr                   ALL(i+2) sent\n   \
    \     MSG(i+5) sent\n        ALL(i+2) arr                    MSG(i+5) arr\n  \
    \      MSG(i+2) sent                   MSG(i+2) arr\n                        \
    \                RFNM(i+2) sent\n        RFNM(i+2) arr                   ALL(i+3)\
    \ sent\n        MSG(i+6) sent\n        ALL(i+3) arr                    MSG(i+6)\
    \ arr\n        MSG(i+3) sent                   MSG(i+3) arr\n                \
    \                        RFNM(i+3) sent\n        RFNM(i+3) arr               \
    \    ALL(i+4) ent\n        MSG(i+7) sent\n        ALL(i+4) arr               \
    \     MSG(i+7) arr\n        MSG(i+4) sent                   MSG(i+4) arr\n   \
    \                                     RFNM(i+4) sent\n        RFNM(i+4) arr  \
    \                 ALL(i+5)\n        MSG(i+8) sent\n        ALL(i+5) arr\n    \
    \    MSG(i+5) sent\n                                Table 1.\n       Retransmission\
    \ Pattern for the Current Flow Control Scheme\n(Since the traffic is RFNM-driven,\
    \ the arrival of RFNM i, i+1, ... is\nfollowed by the sending of message i+4,\
    \ i+5, ...)\nThe most interesting fact about this sequence of events is that the\n\
    arrival of message i+1 before message i at the destination IMP causes\nnot only\
    \ messages i+1 but all future messages to be retransmitted--\nthough we do not\
    \ assume that any of the future messages arrive out of\norder.  The table also\
    \ shows that the round-trip times for message i+4\nand all future messages is\
    \ more than four times as large as it would be\nwithout these undesirable retransmissions.\
    \  It is also noteworthy that,\nonce this retransmission pattern has established\
    \ itself, there is almost\nno way the system can recover from this condition other\
    \ than\ninterrupting the input stream at the source IMP.  A single arrival out\n\
    of order of any of the later user or control messages, for instance,\nwill not\
    \ change this retransmission pattern.  The normal flow of\nsingle-packet messages\
    \ will only reestablish itself if, for example,\nmessage i+4, i+5, and i+6 are\
    \ simultaneously delayed for several hundred\nmilliseconds such that messages\
    \ i+1, i+2, and i+3 can be retransmitted\nin the meantime.  The probability of\
    \ occurrence of such an event is,\nhowever, extremely small.  Therefore one can\
    \ consider the system as\nbeing trapped in this undesirable retransmission condition.\
    \  The\n\"normal\" flow of messages, on the other hand, represents only the\n\
    transient behavior of the system since there is always a finite\nprobability that\
    \ two message arrive out of order due to transmission\nerrors.\nAs mentioned before,\
    \ the system can only recover from this throughput\n(and delay) degradation if\
    \ the input stream of single-packet messages is\ninterrupted.  In case of speech\
    \ transmission, however, this might not\noccur for a long time.  Therefore speech\
    \ transmission systems would in\nmany cases have to work with only one fourth\
    \ of the expected single-\npacket bandwidth.  Since this is clearly an unacceptable\
    \ condition we\nlooked for a modification of the current flow control scheme which\n\
    corrects this situation.  In what follows we describe two methods that\ncould\
    \ be used to avoid the undesirable retransmission of messages.\nRecall that a\
    \ single-packet message is rejected at destination IMP and\nlater retransmitted\
    \ if the RFNM for the preceding message has not yet\nbeen sent to the source IMP.\
    \  This is mainly done to prevent the\noccurrence of reassembly lockup conditions\
    \ [1].  Therefore the problem\ncannot be solved by simply accepting all single-packet\
    \ messages without\nadditional measures to prevent deadlocks.  This could lead\
    \ to a\nreassembly lockup if a large number of single-packet messages from\nseveral\
    \ source IMPs arrives at their common destination IMP out of\norder.  In this\
    \ case the destination IMP might not be able to accept\nthose messages that are\
    \ in order because of the lack of reassembly\nbuffers.  As a result the system\
    \ is deadlocked.  Any solution of the\nthroughput degradation problem must guarantee\
    \ that all messages that\narrive in order can be accepted by the destination IMP.\n\
    One way to achieve this goal is to reject single-packet messages that\narrive\
    \ out of order only if the buffer requirement(s) of the preceding\nmessages(s)\
    \ is not known.  In the previous examples we have seen that\nthe destination IMP\
    \ continuously rejected messages although it knew the\nbuffer requirements for\
    \ the messages that had to be delivered first.  As\nthe buffer requirements become\
    \ known, the necessary number of buffers\ncan be set aside and future single-packet\
    \ messages can be accepted\nwithout the danger of deadlock. Therefore the undesirable\
    \ retransmission\npattern cannot establish itself.  Table 2 shows the sequence\
    \ of events\nfor this policy if message i+1 arrives before message i at the\n\
    destination IMP.\n        SOURCE IMP                      DESTINATION IMP\n  \
    \      MSG (i) sent\n        MSG(i+1) sent\n        MSG(i+2) sent            \
    \       MSG(i+1) arr. (rejected)\n        MSG(i+3) sent                   MSG(i)\
    \ arr. (HOST output)\n                                        RFNM(i) sent\n \
    \                                       ALL (i+1) sent\n                     \
    \                   MSG(i+2) arr (stored)\n                                  \
    \      MSG(i+3) arr (stored)\n        RFNM(i) arr\n        MSG(i+4) sent\n   \
    \     ALL(i+1) arr                    MSG(i+4) arr (stored)\n        MSG(i+1)\
    \ sent                   MSG(i+1) arr (HOST output)\n                        \
    \                RFNM(i+1) sent\n        RFNM(i+1) arr                   RFNM(i+2)\
    \ sent\n        MSG(i+5) sent                   RFNM(i+3) sent\n             \
    \                           RFNM(i+4) sent\n                                Table\
    \ 2.\n          Sequence of Events for Modified Flow Control Scheme\nNote that\
    \ in this modified scheme only one message, message i+1, is\nretransmitted.  In\
    \ view of the fact that the IMPs have plenty of\nreassembly buffer space it is,\
    \ however, desirable to avoid this one\nretransmission, too.  This is particularly\
    \ important for the\ntransmission of speech which depends on a steady flow of\
    \ data and will\nbe disrupted by a sudden large delay.  Therefore we suggest a\
    \ second\nmethod to solve the throughput degradation problem which, in most cases,\n\
    will not require any retransmissions.\nSuppose all single-packet messages are\
    \ initially accepted (or stored).\nCurrently single-packet messages that arrive\
    \ out of order are rejected\nbecause of the possibility of a deadlock.  But let\
    \ us take a closer look\nat the situation where all single-packet messages are\
    \ accepted (or\nstored) such that there is no reassembly buffer available for\
    \ messages\nthat have to be delivered to their HOST(s) next.  This is not really\
    \ a\nlockup condition because the source IMPs keep a copy of all single-\npacket\
    \ messages for which a RFNM has not yet been received.  Therefore\nany single-packet\
    \ message, which arrived out of order but was accepted\nby the destination IMP\
    \ nevertheless, can be deleted later without the\nmessage being lost.  The destination\
    \ IMP only has to send an ALLOCATE\nfor each deleted single-packet message to\
    \ the corresponding source IMP\nwhen reassembly buffer space is available.  This\
    \ can also be considered\nas deferred rejection.  But now a retransmission is\
    \ only necessary if\nthe destination IMP is really running out of reassembly buffers.\
    \  In\nthis case, the physical limitations of the system are reached and we\n\
    cannot hope to gain large throughput increases by means of protocol\nchanges.\n\
    It is our intention to pursue this issue with the IMP development group\nat BBN\
    \ in the future.  They agree that the two solutions we suggest\nwould improve\
    \ the situation.  However, they can think of alternative\nsolutions.\nI acknowledge\
    \ the help of Bill Naylor and Joe Katz in performing the\nexperiments which led\
    \ to the discovery of the throughput degradation.\nReferences:\n    [1] Kleinrock,\
    \ L. and H. Opderbeck.  \"On a Possible Lockup condition\n        in the IMP Subnet\
    \ Due to Message Sequencing\", RFC #626.\n        [ This RFC was put into machine\
    \ readable form for entry ]\n        [ into the online RFC archives by Alex McKenzie\
    \ with    ]\n        [ support from GTE, formerly BBN Corp.            11/99 ]\n"
