- contents:
  - '                     JSON Web Key (JWK) Thumbprint

    '
  title: __initial_text__
- contents:
  - "Abstract\n   This specification defines a method for computing a hash value over
    a\n   JSON Web Key (JWK).  It defines which fields in a JWK are used in the\n
    \  hash computation, the method of creating a canonical form for those\n   fields,
    and how to convert the resulting Unicode string into a byte\n   sequence to be
    hashed.  The resulting hash value can be used for\n   identifying or selecting
    the key represented by the JWK that is the\n   subject of the thumbprint.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7638.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2015 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .
    . . . . .   2\n     1.1.  Notational Conventions  . . . . . . . . . . . . . .
    . . .   2\n   2.  Terminology . . . . . . . . . . . . . . . . . . . . . . . .
    .   3\n   3.  JSON Web Key (JWK) Thumbprint . . . . . . . . . . . . . . . .   3\n
    \    3.1.  Example JWK Thumbprint Computation  . . . . . . . . . . .   4\n     3.2.
    \ JWK Members Used in the Thumbprint Computation  . . . . .   6\n       3.2.1.
    \ JWK Thumbprint of a Private Key . . . . . . . . . . .   6\n       3.2.2.  Why
    Not Include Optional Members? . . . . . . . . . .   7\n     3.3.  Order and Representation
    of Members in Hash Input . . . .   7\n     3.4.  Selection of Hash Function  .
    . . . . . . . . . . . . . .   8\n     3.5.  JWK Thumbprints of Keys Not in JWK
    Format . . . . . . . .   8\n   4.  Practical JSON and Unicode Considerations .
    . . . . . . . . .   8\n   5.  Relationship to Digests of X.509 Values . . . .
    . . . . . . .   9\n   6.  IANA Considerations . . . . . . . . . . . . . . . .
    . . . . .  10\n   7.  Security Considerations . . . . . . . . . . . . . . . .
    . . .  10\n   8.  References  . . . . . . . . . . . . . . . . . . . . . . . .
    .  11\n     8.1.  Normative References  . . . . . . . . . . . . . . . . . .  11\n
    \    8.2.  Informative References  . . . . . . . . . . . . . . . . .  12\n   Acknowledgements
    \ . . . . . . . . . . . . . . . . . . . . . . . .  13\n   Authors' Addresses  .
    . . . . . . . . . . . . . . . . . . . . . .  13\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   This specification defines a method for computing a hash
    value\n   (a.k.a. digest) over a JSON Web Key (JWK) [JWK].  It defines which\n
    \  fields in a JWK are used in the hash computation, the method of\n   creating
    a canonical form for those fields, and how to convert the\n   resulting Unicode
    string into a byte sequence to be hashed.  The\n   resulting hash value can be
    used for identifying or selecting the key\n   represented by the JWK that is the
    subject of the thumbprint, for\n   instance, by using the base64url-encoded JWK
    Thumbprint value as a\n   \"kid\" (key ID) value.\n"
  - contents:
    - "1.1.  Notational Conventions\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\",
      \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT
      RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted
      as described in\n   \"Key words for use in RFCs to Indicate Requirement Levels\"
      [RFC2119].\n   The interpretation should only be applied when the terms appear
      in\n   all capital letters.\n"
    title: 1.1.  Notational Conventions
  title: 1.  Introduction
- contents:
  - "2.  Terminology\n   This specification uses the same terminology as the \"JSON
    Web Key\n   (JWK)\" [JWK], \"JSON Web Signature (JWS)\" [JWS], and \"JSON Web\n
    \  Algorithms (JWA)\" [JWA] specifications.\n   This term is defined by this specification:\n
    \  JWK Thumbprint\n      The digest value for a JWK.\n"
  title: 2.  Terminology
- contents:
  - "3.  JSON Web Key (JWK) Thumbprint\n   The thumbprint of a JSON Web Key (JWK)
    is computed as follows:\n   1.  Construct a JSON object [RFC7159] containing only
    the required\n       members of a JWK representing the key and with no whitespace
    or\n       line breaks before or after any syntactic elements and with the\n       required
    members ordered lexicographically by the Unicode\n       [UNICODE] code points
    of the member names.  (This JSON object is\n       itself a legal JWK representation
    of the key.)\n   2.  Hash the octets of the UTF-8 representation of this JSON
    object\n       with a cryptographic hash function H.  For example, SHA-256 [SHS]\n
    \      might be used as H.  See Section 3.4 for a discussion on the\n       choice
    of hash function.\n   The resulting value is the JWK Thumbprint with H of the
    JWK.  The\n   details of this computation are further described in subsequent\n
    \  sections.\n"
  - contents:
    - "3.1.  Example JWK Thumbprint Computation\n   This section demonstrates the
      JWK Thumbprint computation for the JWK\n   below (with the long line broken
      for display purposes only):\n     {\n      \"kty\": \"RSA\",\n      \"n\": \"0vx7agoebGcQSuuPiLJXZptN9nndrQmbXEps2aiAFbWhM78LhWx4cbbfAAt\n
      \           VT86zwu1RK7aPFFxuhDR1L6tSoc_BJECPebWKRXjBZCiFV4n3oknjhMstn6\n            4tZ_2W-5JsGY4Hc5n9yBXArwl93lqt7_RN5w6Cf0h4QyQ5v-65YGjQR0_FD\n
      \           W2QvzqY368QQMicAtaSqzs8KJZgnYb9c7d0zgdAZHzu6qMQvRL5hajrn1n9\n            1CbOpbISD08qNLyrdkt-bFTWhAI4vMQFh6WeZu0fM4lFd2NcRwr3XPksINH\n
      \           aQ-G_xBniIqbw0Ls1jF44-csFCur-kEgU8awapJzKnqDKgw\",\n      \"e\":
      \"AQAB\",\n      \"alg\": \"RS256\",\n      \"kid\": \"2011-04-29\"\n     }\n
      \  As defined in \"JSON Web Key (JWK)\" [JWK] and \"JSON Web Algorithms\n   (JWA)\"
      [JWA], the required members for an RSA public key are:\n   o  \"kty\"\n   o
      \ \"n\"\n   o  \"e\"\n   Therefore, these are the members used in the thumbprint
      computation.\n   Their lexicographic order, per Section 3.3, is:\n   o  \"e\"\n
      \  o  \"kty\"\n   o  \"n\"\n   Therefore, the JSON object constructed as an
      intermediate step in the\n   computation is as follows (with the line broken
      for display purposes\n   only):\n     {\"e\":\"AQAB\",\"kty\":\"RSA\",\"n\":\"0vx7agoebGcQSuuPiLJXZptN9nndrQmbXEps2\n
      \    aiAFbWhM78LhWx4cbbfAAtVT86zwu1RK7aPFFxuhDR1L6tSoc_BJECPebWKRXjBZCi\n     FV4n3oknjhMstn64tZ_2W-5JsGY4Hc5n9yBXArwl93lqt7_RN5w6Cf0h4QyQ5v-65Y\n
      \    GjQR0_FDW2QvzqY368QQMicAtaSqzs8KJZgnYb9c7d0zgdAZHzu6qMQvRL5hajrn1n\n     91CbOpbISD08qNLyrdkt-bFTWhAI4vMQFh6WeZu0fM4lFd2NcRwr3XPksINHaQ-G_x\n
      \    BniIqbw0Ls1jF44-csFCur-kEgU8awapJzKnqDKgw\"}\n   The octets of the UTF-8
      representation of this JSON object are:\n   [123, 34, 101, 34, 58, 34, 65, 81,
      65, 66, 34, 44, 34, 107, 116, 121,\n   34, 58, 34, 82, 83, 65, 34, 44, 34, 110,
      34, 58, 34, 48, 118, 120,\n   55, 97, 103, 111, 101, 98, 71, 99, 81, 83, 117,
      117, 80, 105, 76, 74,\n   88, 90, 112, 116, 78, 57, 110, 110, 100, 114, 81,
      109, 98, 88, 69,\n   112, 115, 50, 97, 105, 65, 70, 98, 87, 104, 77, 55, 56,
      76, 104, 87,\n   120, 52, 99, 98, 98, 102, 65, 65, 116, 86, 84, 56, 54, 122,
      119, 117,\n   49, 82, 75, 55, 97, 80, 70, 70, 120, 117, 104, 68, 82, 49, 76,
      54,\n   116, 83, 111, 99, 95, 66, 74, 69, 67, 80, 101, 98, 87, 75, 82, 88,\n
      \  106, 66, 90, 67, 105, 70, 86, 52, 110, 51, 111, 107, 110, 106, 104,\n   77,
      115, 116, 110, 54, 52, 116, 90, 95, 50, 87, 45, 53, 74, 115, 71,\n   89, 52,
      72, 99, 53, 110, 57, 121, 66, 88, 65, 114, 119, 108, 57, 51,\n   108, 113, 116,
      55, 95, 82, 78, 53, 119, 54, 67, 102, 48, 104, 52, 81,\n   121, 81, 53, 118,
      45, 54, 53, 89, 71, 106, 81, 82, 48, 95, 70, 68,\n   87, 50, 81, 118, 122, 113,
      89, 51, 54, 56, 81, 81, 77, 105, 99, 65,\n   116, 97, 83, 113, 122, 115, 56,
      75, 74, 90, 103, 110, 89, 98, 57, 99,\n   55, 100, 48, 122, 103, 100, 65, 90,
      72, 122, 117, 54, 113, 77, 81,\n   118, 82, 76, 53, 104, 97, 106, 114, 110,
      49, 110, 57, 49, 67, 98, 79,\n   112, 98, 73, 83, 68, 48, 56, 113, 78, 76, 121,
      114, 100, 107, 116,\n   45, 98, 70, 84, 87, 104, 65, 73, 52, 118, 77, 81, 70,
      104, 54, 87,\n   101, 90, 117, 48, 102, 77, 52, 108, 70, 100, 50, 78, 99, 82,
      119,\n   114, 51, 88, 80, 107, 115, 73, 78, 72, 97, 81, 45, 71, 95, 120, 66,\n
      \  110, 105, 73, 113, 98, 119, 48, 76, 115, 49, 106, 70, 52, 52, 45, 99,\n   115,
      70, 67, 117, 114, 45, 107, 69, 103, 85, 56, 97, 119, 97, 112,\n   74, 122, 75,
      110, 113, 68, 75, 103, 119, 34, 125]\n   Using SHA-256 [SHS] as the hash function
      H, the JWK SHA-256\n   Thumbprint value is the SHA-256 hash of these octets,
      specifically:\n   [55, 54, 203, 177, 120, 124, 184, 48, 156, 119, 238, 140,
      55, 5, 197,\n   225, 111, 251, 158, 133, 151, 21, 144, 31, 30, 76, 89, 177,
      17, 130,\n   245, 123]\n   The base64url encoding [JWS] of this JWK SHA-256
      Thumbprint value\n   (which might, for instance, be used as a \"kid\" (key ID)
      value) is:\n     NzbLsXh8uDCcd-6MNwXF4W_7noWXFZAfHkxZsRGC9Xs\n"
    title: 3.1.  Example JWK Thumbprint Computation
  - contents:
    - "3.2.  JWK Members Used in the Thumbprint Computation\n   Only the required
      members of a key's representation are used when\n   computing its JWK Thumbprint
      value.  As defined in \"JSON Web Key\n   (JWK)\" [JWK] and \"JSON Web Algorithms
      (JWA)\" [JWA], the required\n   members for an elliptic curve public key for
      the curves specified in\n   Section 6.2.1.1 of RFC 7518 [JWA], in lexicographic
      order, are:\n   o  \"crv\"\n   o  \"kty\"\n   o  \"x\"\n   o  \"y\"\n   The
      required members for an RSA public key, in lexicographic order,\n   are:\n   o
      \ \"e\"\n   o  \"kty\"\n   o  \"n\"\n   The required members for a symmetric
      key, in lexicographic order,\n   are:\n   o  \"k\"\n   o  \"kty\"\n   As other
      \"kty\" (key type) values are defined, the specifications\n   defining them
      should be similarly consulted to determine which\n   members, in addition to
      \"kty\", are required.\n"
    - contents:
      - "3.2.1.  JWK Thumbprint of a Private Key\n   The JWK Thumbprint of a JWK representing
        a private key is computed as\n   the JWK Thumbprint of a JWK representing
        the corresponding public\n   key.  This has the intentional benefit that the
        same JWK Thumbprint\n   value can be computed both by parties using either
        the public or\n   private key.  The JWK Thumbprint can then be used to refer
        to both\n   keys of the key pair.  Application context can be used to determine\n
        \  if the public or private key is the one being referred to by the JWK\n
        \  Thumbprint.\n   This specification defines the method of computing JWK
        Thumbprints of\n   JWKs representing private keys for interoperability reasons
        -- so\n   that different implementations computing JWK Thumbprints of private\n
        \  keys will produce the same result.\n"
      title: 3.2.1.  JWK Thumbprint of a Private Key
    - contents:
      - "3.2.2.  Why Not Include Optional Members?\n   Optional members of JWKs are
        intentionally not included in the JWK\n   Thumbprint computation so that their
        absence or presence in the JWK\n   does not alter the resulting value.  The
        JWK Thumbprint value is a\n   digest of the members required to represent
        the key as a JWK -- not\n   of additional data that may also accompany the
        key.\n   Optional members are not included so that the JWK Thumbprint refers\n
        \  to a key -- not a key with an associated set of key attributes.\n   Different
        application contexts might or might not include different\n   subsets of optional
        attributes about the key in the JWK.  If these\n   were included in the calculation
        of the JWK thumbprint, the values\n   would be different for those JWKs, even
        though the keys are the same.\n   The benefit of including only the JWK required
        members is that the\n   JWK Thumbprint of any JWK representing the key remains
        the same,\n   regardless of any other attributes that are present.\n   Different
        kinds of thumbprints could be defined by other\n   specifications that might
        include some or all additional JWK members,\n   if use cases arise where such
        different kinds of thumbprints would be\n   useful.  See Section 9.1 of RFC
        7517 [JWK] for notes on some ways to\n   cryptographically bind attributes
        to a key.\n"
      title: 3.2.2.  Why Not Include Optional Members?
    title: 3.2.  JWK Members Used in the Thumbprint Computation
  - contents:
    - "3.3.  Order and Representation of Members in Hash Input\n   The required members
      in the input to the hash function are ordered\n   lexicographically by the Unicode
      code points of the member names.\n   Characters in member names and member values
      MUST be represented\n   without being escaped.  This means that thumbprints
      of JWKs that\n   require such characters are not defined by this specification.
      \ (This\n   is not expected to limit the applicability of this specification,
      in\n   practice, as the members of JWK representations are not expected to\n
      \  use any of these characters.)  The characters specified as requiring\n   escaping
      by Section 7 of [RFC7159] are quotation mark, reverse\n   solidus (a.k.a. backslash),
      and the control characters U+0000 through\n   U+001F.\n   If the JWK key type
      uses members whose values are themselves JSON\n   objects, then the members
      of those objects MUST likewise be\n   lexicographically ordered.  (As of the
      time of this writing, none are\n   defined that do.)\n   If the JWK key type
      uses members whose values are JSON numbers, and\n   if those numbers are integers,
      then they MUST be represented as a\n   JSON number as defined in Section 6 of
      [RFC7159] without including a\n   fraction part or exponent part.  For instance,
      the value \"1.024e3\"\n   MUST be represented as \"1024\".  This means that
      thumbprints of JWKs\n   using numbers that are not integers are not defined
      by this\n   specification.  Also, as noted in \"The I-JSON Message Format\"\n
      \  [RFC7493], implementations cannot expect an integer whose absolute\n   value
      is greater than 9007199254740991 (i.e., that is outside the\n   range [-(2**53)+1,
      (2**53)-1]) to be treated as an exact value.  (As\n   of the time of this writing,
      none are defined that use JSON numbers.)\n   See Section 4 for a discussion
      of further practical considerations\n   pertaining to the representation of
      the hash input.\n"
    title: 3.3.  Order and Representation of Members in Hash Input
  - contents:
    - "3.4.  Selection of Hash Function\n   A specific hash function must be chosen
      by an application to compute\n   the hash value of the hash input.  For example,
      SHA-256 [SHS] might\n   be used as the hash function by the application.  While
      SHA-256 is a\n   good default choice at the time of this writing, the hash function
      of\n   choice can be expected to change over time as the cryptographic\n   landscape
      evolves.\n   Note that in many cases, only the party that creates a key will
      need\n   to know the hash function used.  A typical usage is for the producer\n
      \  of the key to use the base64url-encoded JWK Thumbprint value as a\n   \"kid\"
      (key ID) value.  In this case, the consumer of the \"kid\" treats\n   it as
      an opaque value that it uses to select the key.\n   However, in some cases,
      multiple parties will be reproducing the JWK\n   Thumbprint calculation and
      comparing the results.  In these cases,\n   the parties will need to know which
      hash function was used and use\n   the same one.\n"
    title: 3.4.  Selection of Hash Function
  - contents:
    - "3.5.  JWK Thumbprints of Keys Not in JWK Format\n   Note that a key need not
      be in JWK format to create a JWK Thumbprint\n   of it.  The only prerequisites
      are that the JWK representation of the\n   key be defined and the party creating
      the JWK Thumbprint be in\n   possession of the necessary key material.  These
      are sufficient to\n   create the hash input from the JWK representation of the
      key, as\n   described in Section 3.3.\n"
    title: 3.5.  JWK Thumbprints of Keys Not in JWK Format
  title: 3.  JSON Web Key (JWK) Thumbprint
- contents:
  - "4.  Practical JSON and Unicode Considerations\n   Implementations will almost
    certainly use functionality provided by\n   the platform's JSON support when parsing
    the JWK and emitting the\n   JSON object used as the hash input.  As a practical
    consideration,\n   future JWK member names and values should be avoided for which\n
    \  different platforms or libraries might emit different\n   representations.
    \ As of the time of this writing, all defined JWK\n   member names and values
    use only printable ASCII characters, which\n   should not exhibit this problem.
    \ Note however, that JSON.stringify()\n   cannot be counted on to lexicographically
    sort the members of JSON\n   objects, so while it could be used to emit some kinds
    of member\n   values, different code is likely to be needed to perform the sorting.\n
    \  In particular, while the operation of lexicographically ordering\n   member
    names by their Unicode code points is well defined, different\n   platform sort
    functions may produce different results for non-ASCII\n   characters, in ways
    that may not be obvious to developers.  If\n   writers of future specifications
    defining new JWK key type values\n   choose to restrict themselves to printable
    ASCII member names and\n   values (which are for machine and not human consumption
    anyway), some\n   future interoperability problems might be avoided.\n   However,
    if new JWK members are defined that use non-ASCII member\n   names or values,
    their definitions should specify the exact Unicode\n   code point sequences used
    to represent them.  This is particularly\n   important in cases in which Unicode
    normalization could result in the\n   transformation of one set of code points
    into another under any\n   circumstances.\n   Use of escaped characters in JWKs
    for which JWK Thumbprints will be\n   computed should be avoided.  Use of escaped
    characters in the hash\n   input JWKs derived from these original JWKs is prohibited.\n
    \  There is a natural representation to use for numeric values that are\n   integers.
    \ However, this specification does not attempt to define a\n   standard representation
    for numbers that are not integers or that\n   contain an exponent component.  This
    is not expected to be a problem\n   in practice, as the required members of JWK
    representations are\n   expected to use only numbers that are integers.\n   Use
    of number representations containing fraction or exponent parts\n   in JWKs for
    which JWK Thumbprints will be computed should be avoided.\n   All of these practical
    considerations are really an instance of Jon\n   Postel's principle: \"Be liberal
    in what you accept, and conservative\n   in what you send.\"\n"
  title: 4.  Practical JSON and Unicode Considerations
- contents:
  - "5.  Relationship to Digests of X.509 Values\n   JWK Thumbprint values are computed
    on the JWK members required to\n   represent a key, rather than all members of
    a JWK that the key is\n   represented in.  Thus, they are more analogous to applications
    that\n   use digests of X.509 Subject Public Key Info (SPKI) values, which are\n
    \  defined in Section 4.1.2.7 of [RFC5280], than to applications that\n   use
    digests of complete certificate values, as the \"x5t\" (X.509\n   certificate
    SHA-1 thumbprint) [JWS] value defined for X.509\n   certificate objects does.
    \ While logically equivalent to a digest of\n   the SPKI representation of the
    key, a JWK Thumbprint is computed over\n   a JSON representation of that key,
    rather than over an ASN.1\n   representation of it.\n"
  title: 5.  Relationship to Digests of X.509 Values
- contents:
  - "6.  IANA Considerations\n   This specification adds to the instructions for the
    Designated\n   Experts of the following IANA registries, all of which are in the\n
    \  \"JSON Object Signing and Encryption (JOSE)\" registry [IANA.JOSE]:\n   o  JSON
    Web Key Types\n   o  JSON Web Key Elliptic Curve\n   o  JSON Web Key Parameters\n
    \  IANA has added a link to this specification in the Reference sections\n   of
    these registries.\n   For these registries, because of the practical JSON and
    Unicode\n   considerations described in Section 4, the Designated Experts must\n
    \  either:\n   (a) require that JWK member names and values being registered use\n
    \  only printable ASCII characters excluding double quote ('\"') and\n   backslash
    ('\\') (the Unicode characters with code points U+0021,\n   U+0023 through U+005B,
    and U+005D through U+007E), or\n   (b) if new JWK members or values are defined
    that use other code\n   points, require that their definitions specify the exact
    Unicode code\n   point sequences used to represent them.  Furthermore, proposed\n
    \  registrations that use Unicode code points that can only be\n   represented
    in JSON strings as escaped characters must not be\n   accepted.\n"
  title: 6.  IANA Considerations
- contents:
  - "7.  Security Considerations\n   The JSON Security Considerations and Unicode
    Comparison Security\n   Considerations described in Sections 10.12 and 10.13 of
    \"JSON Web\n   Signature (JWS)\" [JWS] also apply to this specification.\n   Also,
    as described in Section 4, some implementations may produce\n   incorrect results
    if esoteric or escaped characters are used in the\n   member names.  The security
    implications of this appear to be limited\n   for JWK Thumbprints of public keys,
    because while it may result in\n   implementations failing to identify the intended
    key, it should not\n   leak information.  The information in a public key is already
    public\n   in nature, by definition.\n   A hash of a symmetric key has the potential
    to leak information about\n   the key value.  Thus, the JWK Thumbprint of a symmetric
    key should\n   typically be concealed from parties not in possession of the\n
    \  symmetric key, unless in the application context, the cryptographic\n   hash
    used, such as SHA-256, is known to provide sufficient protection\n   against disclosure
    of the key value.\n   A JWK Thumbprint will only uniquely identify a particular
    key if a\n   single unambiguous JWK representation for that key is defined and\n
    \  used when computing the JWK Thumbprint.  (Such representations are\n   defined
    for all the key types defined in \"JSON Web Algorithms (JWA)\"\n   [JWA].)  For
    example, if an RSA key were to use \"e\":\"AAEAAQ\"\n   (representing [0, 1, 0,
    1]) rather than the specified correct\n   representation of \"e\":\"AQAB\" (representing
    [1, 0, 1]), then a\n   different thumbprint value would be produced for what could
    be\n   effectively the same key, at least for implementations that are lax\n   in
    validating the JWK values that they accept.  Thus, JWK Thumbprint\n   values can
    only be relied upon to be unique for a given key if the\n   implementation also
    validates that the correct representation of the\n   key is used.\n   Even more
    insidious is that an attacker may supply a key that is a\n   transformation of
    a legal key in order to have it appear to be a\n   different key.  For instance,
    if a legitimate RSA key uses a modulus\n   value N and an attacker supplies a
    key with modulus 3*N, the modified\n   key would still work about 1/3 of the time,
    but would appear to be a\n   different key.  Thus, while thumbprint values are
    valuable for\n   identifying legitimate keys, comparing thumbprint values is not
    a\n   reliable means of excluding (blacklisting) the use of particular keys\n
    \  (or transformations thereof).\n"
  title: 7.  Security Considerations
- contents:
  - '8.  References

    '
  - contents:
    - "8.1.  Normative References\n   [IANA.JOSE] IANA, \"JSON Object Signing and
      Encryption (JOSE)\",\n               <http://www.iana.org/assignments/jose>.\n
      \  [JWA]       Jones, M., \"JSON Web Algorithms (JWA)\", RFC 7518,\n               DOI
      10.17487/RFC7518, May 2015,\n               <http://www.rfc-editor.org/info/rfc7518>.\n
      \  [JWK]       Jones, M., \"JSON Web Key (JWK)\", RFC 7517,\n               DOI
      10.17487/RFC7517, May 2015,\n               <http://www.rfc-editor.org/info/rfc7517>.\n
      \  [JWS]       Jones, M., Bradley, J., and N. Sakimura, \"JSON Web\n               Signature
      (JWS)\", RFC 7515, DOI 10.17487/RFC7515, May\n               2015, <http://www.rfc-editor.org/info/rfc7515>.\n
      \  [RFC2119]   Bradner, S., \"Key words for use in RFCs to Indicate\n               Requirement
      Levels\", BCP 14, RFC 2119,\n               DOI 10.17487/RFC2119, March 1997,\n
      \              <http://www.rfc-editor.org/info/rfc2119>.\n   [RFC7159]   Bray,
      T., Ed., \"The JavaScript Object Notation (JSON)\n               Data Interchange
      Format\", RFC 7159, DOI 10.17487/RFC7159,\n               March 2014, <http://www.rfc-editor.org/info/rfc7159>.\n
      \  [SHS]       National Institute of Standards and Technology, \"Secure\n               Hash
      Standard (SHS)\", FIPS PUB 180-4, March 2012,\n               <http://csrc.nist.gov/publications/fips/fips180-4/\n
      \              fips-180-4.pdf>.\n   [UNICODE]   The Unicode Consortium, \"The
      Unicode Standard\",\n               <http://www.unicode.org/versions/latest/>.\n"
    title: 8.1.  Normative References
  - contents:
    - "8.2.  Informative References\n   [RFC5280]   Cooper, D., Santesson, S., Farrell,
      S., Boeyen, S.,\n               Housley, R., and W. Polk, \"Internet X.509 Public
      Key\n               Infrastructure Certificate and Certificate Revocation\n
      \              List (CRL) Profile\", RFC 5280, DOI 10.17487/RFC5280, May\n               2008,
      <http://www.rfc-editor.org/info/rfc5280>.\n   [RFC7493]   Bray, T., Ed., \"The
      I-JSON Message Format\", RFC 7493,\n               DOI 10.17487/RFC7493, March
      2015,\n               <http://www.rfc-editor.org/info/rfc7493>.\n"
    title: 8.2.  Informative References
  title: 8.  References
- contents:
  - "Acknowledgements\n   James Manger and John Bradley participated in discussions
    that led to\n   the creation of this specification.  Thanks also to Joel Halpern,\n
    \  Barry Leiba, Adam Montville, Kathleen Moriarty, and Jim Schaad for\n   their
    reviews of this specification.\n"
  title: Acknowledgements
- contents:
  - "Authors' Addresses\n   Michael B. Jones\n   Microsoft\n   Email: mbj@microsoft.com\n
    \  URI:   http://self-issued.info/\n   Nat Sakimura\n   Nomura Research Institute\n
    \  Email: n-sakimura@nri.co.jp\n   URI:   http://nat.sakimura.org/\n"
  title: Authors' Addresses
