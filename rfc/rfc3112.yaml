- title: __initial_text__
  contents:
  - '                  LDAP Authentication Password Schema

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2001).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes schema in support of user/password\n   authentication\
    \ in a LDAP (Lightweight Directory Access Protocol)\n   directory including the\
    \ authPassword attribute type.  This attribute\n   type holds values derived from\
    \ the user's password(s) (commonly using\n   cryptographic strength one-way hash).\
    \  authPassword is intended to\n   used instead of userPassword.\n"
- title: 1. Background and Intended Use
  contents:
  - "1. Background and Intended Use\n   The userPassword attribute type [RFC2256]\
    \ is intended to be used to\n   support the LDAP [RFC2251] \"simple\" bind operation.\
    \  However, values\n   of userPassword must be clear text passwords.  It is often\
    \ desirable\n   to store values derived from the user's password(s) instead of\
    \ actual\n   passwords.\n   The authPassword attribute type is intended to be\
    \ used to store\n   information used to implement simple password based authentication.\n\
    \   The attribute type may be used by LDAP servers to implement the LDAP\n   Bind\
    \ operation's \"simple\" authentication method.\n   The attribute type supports\
    \ multiple storage schemes.  A matching\n   rule is provided for use with extensible\
    \ search filters to allow\n   clients to assert that a clear text password \"\
    matches\" one of the\n   attribute's values.\n   Storage schemes often use cryptographic\
    \ strength one-way hashing.\n   Though the use of one-way hashing reduces the\
    \ potential that exposed\n   values will allow unauthorized access to the Directory\
    \ (unless the\n   hash algorithm/implementation is flawed), the hashing of passwords\
    \ is\n   intended to be as an additional layer of protection.  It is\n   RECOMMENDED\
    \ that hashed values be protected as if they were clear\n   text passwords.\n\
    \   This attribute may be used in conjunction with server side password\n   generation\
    \ mechanisms (such as the LDAP Password Modify [RFC3062]\n   extended operation).\n\
    \   Access to this attribute may governed by administrative controls such\n  \
    \ as those which implement password change policies.\n   The key words \"MUST\"\
    , \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD\
    \ NOT\", \"RECOMMENDED\", and \"MAY\" in this document are\n   to be interpreted\
    \ as described in RFC 2119 [RFC2119].\n"
- title: 2. Schema Definitions
  contents:
  - "2. Schema Definitions\n   The following schema definitions are described in terms\
    \ of LDAPv3\n   Attribute Syntax Definitions [RFC2252] with specific syntax detailed\n\
    \   using Augmented BNF [RFC2234].\n"
- title: 2.1. authPasswordSyntax
  contents:
  - "2.1. authPasswordSyntax\n      ( 1.3.6.1.4.1.4203.1.1.2\n        DESC 'authentication\
    \ password syntax' )\n   Values of this syntax are encoded according to:\n   \
    \   authPasswordValue = w scheme s authInfo s authValue w\n      scheme = %x30-39\
    \ / %x41-5A / %x2D-2F / %x5F\n            ; 0-9, A-Z, \"-\", \".\", \"/\", or\
    \ \"_\"\n      authInfo = schemeSpecificValue\n      authValue = schemeSpecificValue\n\
    \              schemeSpecificValue = *( %x21-23 / %x25-7E )\n            ; printable\
    \ ASCII less \"$\" and \" \"\n      s = w SEP w\n      w = *SP\n      SEP = %x24\
    \ ; \"$\"\n      SP = %x20 ; \" \" (space)\n   where scheme describes the mechanism\
    \ and authInfo and authValue are a\n   scheme specific.  The authInfo field is\
    \ often a base64 encoded salt.\n   The authValue field is often a base64 encoded\
    \ value derived from a\n   user's password(s).  Values of this attribute are case\
    \ sensitive.\n   Transfer of values of this syntax is strongly discouraged where\
    \ the\n   underlying transport service cannot guarantee confidentiality and may\n\
    \   result in disclosure of the values to unauthorized parties.\n   This document\
    \ describes a number of schemes, as well as requirements\n   for the scheme naming,\
    \ in section 3.\n"
- title: 2.2. authPasswordExactMatch
  contents:
  - "2.2. authPasswordExactMatch\n      ( 1.3.6.1.4.1.4203.1.2.2\n        NAME 'authPasswordExactMatch'\n\
    \        DESC 'authentication password exact matching rule'\n        SYNTAX 1.3.6.1.4.1.4203.1.1.2\
    \ )\n   This matching rule allows a client to assert that an asserted\n   authPasswordSyntax\
    \ value matches authPasswordSyntax values.  It is\n   meant to be used as the\
    \ EQUALITY matching rule of attributes whose\n   SYNTAX is authPasswordSyntax.\n\
    \   The assertion is \"TRUE\" if there is an attribute value which has the\n \
    \  same scheme, authInfo, and authValue components as the asserted\n   value;\
    \ \"FALSE\" if no attribute value has the same components as the\n   asserted\
    \ value; and \"Undefined\" otherwise.\n"
- title: 2.3. authPasswordMatch
  contents:
  - "2.3. authPasswordMatch\n       ( 1.3.6.1.4.1.4203.1.2.3\n         NAME 'authPasswordMatch'\n\
    \         DESC 'authentication password matching rule'\n         SYNTAX 1.3.6.1.4.1.1466.115.121.1.40{128}\
    \ )\n   This matching rule allows a client to assert that a password matches\n\
    \   values of authPasswordSyntax using an extensibleMatch filter\n   component.\
    \  Each value is matched per its scheme.  The assertion is\n   \"TRUE\" if one\
    \ or more attribute values matches the asserted value,\n   \"FALSE\" if all values\
    \ do not matches, and \"Undefined\" otherwise.\n   Servers which support use of\
    \ this matching rule SHOULD publish\n   appropriate matchingRuleUse values per\
    \ [RFC2252], 4.4.\n   Transfer of authPasswordMatch assertion values is strongly\n\
    \   discouraged where the underlying transport service cannot guarantee\n   confidentiality\
    \ and may result in disclosure of the values to\n   unauthorized parties.\n"
- title: 2.4. supportedAuthPasswordSchemes
  contents:
  - "2.4. supportedAuthPasswordSchemes\n      ( 1.3.6.1.4.1.4203.1.3.3\n        NAME\
    \ 'supportedAuthPasswordSchemes'\n        DESC 'supported password storage schemes'\n\
    \        EQUALITY caseExactIA5Match\n        SYNTAX 1.3.6.1.4.1.1466.115.121.1.26{32}\n\
    \        USAGE dSAOperation )\n   The values of this attribute are names of supported\
    \ authentication\n   password schemes which the server supports.  The syntax of\
    \ a scheme\n   name is described in section 2.1.  This attribute may only be present\n\
    \   in the root DSE.  If the server does not support any password\n   schemes,\
    \ this attribute will not be present.\n"
- title: 2.5. authPassword
  contents:
  - "2.5. authPassword\n      ( 1.3.6.1.4.1.4203.1.3.4 NAME 'authPassword'\n     \
    \   DESC 'password authentication information'\n        EQUALITY 1.3.6.1.4.1.4203.1.2.2\n\
    \        SYNTAX 1.3.6.1.4.1.4203.1.1.2 )\n   The values of this attribute are\
    \ representative of the user's\n   password(s) and conform to the authPasswordSyntax\
    \ described in 2.1.\n   The values of this attribute may be used for authentication\
    \ purposes.\n   Transfer of authPassword values is strongly discouraged where\
    \ the\n   underlying transport service cannot guarantee confidentiality and may\n\
    \   result in disclosure of the values to unauthorized parties.\n"
- title: 2.6. authPasswordObject
  contents:
  - "2.6. authPasswordObject\n      ( 1.3.6.1.4.1.4203.1.4.7 NAME 'authPasswordObject'\n\
    \        DESC 'authentication password mix in class'\n        MAY 'authPassword'\n\
    \        AUXILIARY )\n   Entries of this object class may contain authPassword\
    \ attribute\n   types.\n"
- title: 3. Schemes
  contents:
  - "3. Schemes\n   This section describes the \"MD5\" and \"SHA1\" schemes.  Other\
    \ schemes\n   may be defined by other documents.  Schemes which are not described\n\
    \   in an RFC SHOULD be named with a leading \"X-\" to indicate they are a\n \
    \  private or implementation specific scheme, or may be named using the\n   dotted-decimal\
    \ representation [RFC2252] of an OID assigned to the\n   scheme.\n"
- title: 3.1. MD5 scheme
  contents:
  - "3.1. MD5 scheme\n   The MD5 [RFC1321] scheme name is \"MD5\".\n   The authValue\
    \ is the base64 encoding of an MD5 digest of the\n   concatenation the user password\
    \ and salt.  The base64 encoding of the\n   salt is provided in the authInfo field.\
    \  The salt MUST be at least 64\n   bits long.  Implementations of this scheme\
    \ MUST support salts up to\n   128 bits in length.\n   Example:\n      Given a\
    \ user \"joe\" who's password is \"mary\" and a salt of \"salt\",\n      the authInfo\
    \ field would be the base64 encoding of \"salt\" and the\n      authValue field\
    \ would be the base64 encoding of the MD5 digest of\n      \"marysalt\".\n   A\
    \ match against an asserted password and an attribute value of this\n   scheme\
    \ SHALL be true if and only if the MD5 digest of concatenation\n   of the asserted\
    \ value and the salt is equal to the MD5 digest\n   contained in AuthValue.  The\
    \ match SHALL be undefined if the server\n   is unable to complete the equality\
    \ test for any reason.  Otherwise\n   the match SHALL be false.\n   Values of\
    \ this scheme SHOULD only be used to implement simple\n   user/password authentication.\n"
- title: 3.2. SHA1 scheme
  contents:
  - "3.2. SHA1 scheme\n   The SHA1 [SHA1] scheme name is \"SHA1\".\n   The authValue\
    \ is the base64 encoding of a SHA1 digest of the\n   concatenation the user password\
    \ and the salt.  The base64 encoding of\n   the salt is provided in the authInfo\
    \ field.  The salt MUST be at\n   least 64 bits long.  Implementations of this\
    \ scheme MUST support\n   salts up to 128 bits in length.\n   Example:\n     \
    \ Given a user \"joe\" who's password is \"mary\" and a salt of \"salt\",\n  \
    \    the authInfo field would be the base64 encoding of \"salt\" and the\n   \
    \   authValue field would be the base64 encoding of the SHA1 digest of\n     \
    \ \"marysalt\".\n   A match against an asserted password and an attribute value\
    \ of this\n   scheme SHALL be true if and only if the SHA1 digest of concatenation\n\
    \   of the asserted value and the salt is equal to the SHA1 digest\n   contained\
    \ in AuthValue.  The match SHALL be undefined if the server\n   is unable to complete\
    \ the equality test for any reason.  Otherwise\n   the match SHALL be false.\n\
    \   Values of this scheme SHOULD only be used to implement simple\n   user/password\
    \ authentication.\n"
- title: 4. Implementation Issues
  contents:
  - "4. Implementation Issues\n   For all implementations of this specification:\n\
    \      Servers MAY restrict which schemes are used in conjunction with a\n   \
    \   particular authentication process but SHOULD use all values of\n      selected\
    \ schemes.  If the asserted password matches any of the\n      stored values,\
    \ the asserted password SHOULD be considered valid.\n      Servers MAY use other\
    \ authentication storage mechanisms, such as\n      userPassword or an external\
    \ password store, in conjunction with\n      authPassword to support the authentication\
    \ process.\n      Servers that support simple bind MUST support the SHA1 scheme\
    \ and\n      SHOULD support the MD5 scheme.\n      Servers SHOULD NOT publish\
    \ values of authPassword nor allow\n      operations which expose authPassword\
    \ values or AuthPasswordMatch\n      assertions to unless confidentiality protection\
    \ is in place.\n      Clients SHOULD NOT initiate operations which provide or\
    \ request\n      values of authPassword or make authPasswordMatch assertions unless\n\
    \      confidentiality protection is in place.\n      Clients SHOULD NOT assume\
    \ that a successful AuthPasswordMatch,\n      whether by compare or search, is\
    \ sufficient to gain directory\n      access.  The bind operation MUST be used\
    \ to authenticate to the\n      directory.\n"
- title: 5. Security Considerations
  contents:
  - "5. Security Considerations\n   This document describes how authentication information\
    \ may be stored\n   in a directory.  Authentication information MUST be adequately\n\
    \   protected as unintended disclosure will allow attackers to gain\n   immediate\
    \ access to the directory as described by [RFC2829].\n   As flaws may be discovered\
    \ in the hashing algorithm or with a\n   particular implementation of the algorithm\
    \ or values could be subject\n   to various attacks if exposed, values of AuthPassword\
    \ SHOULD be\n   protected as if they were clear text passwords.  When values are\n\
    \   transferred, privacy protections, such as IPSEC or TLS, SHOULD be in\n   place.\n\
    \   Clients SHOULD use strong authentication mechanisms [RFC2829].\n   AuthPasswordMatch\
    \ matching rule allows applications to test the\n   validity of a user password\
    \ and, hence, may be used to mount an\n   attack.  Servers SHOULD take appropriate\
    \ measures to protect the\n   directory from such attacks.\n   Some password schemes\
    \ may require CPU intensive operations.  Servers\n   SHOULD take appropriate measures\
    \ to protect against Denial of Service\n   attacks.\n   AuthPassword does not\
    \ restrict an authentication identity to a single\n   password.  An attacker who\
    \ gains write access to this attribute may\n   store additional values without\
    \ disabling the user's true\n   password(s).  Use of policy aware clients and\
    \ servers is RECOMMENDED.\n   The level of protection offered against various\
    \ attacks differ from\n   scheme to scheme.  It is RECOMMENDED that servers support\
    \ scheme\n   selection as a configuration item.  This allows for a scheme to be\n\
    \   easily disabled if a significant security flaw is discovered.\n"
- title: 6. Acknowledgment
  contents:
  - "6. Acknowledgment\n   This document borrows from a number of IETF documents and\
    \ is based\n   upon input from the IETF LDAPext working group.\n"
- title: 7. Bibliography
  contents:
  - "7. Bibliography\n   [RFC1321] Rivest, R., \"The MD5 Message-Digest Algorithm\"\
    , RFC 1321,\n             April 1992\n   [RFC2219] Bradner, S., \"Key words for\
    \ use in RFCs to Indicate\n             Requirement Levels\", BCP 14, RFC 2119,\
    \ March 1997.\n   [RFC2234] Crocker, D., Editor, P. Overell, \"Augmented BNF for\
    \ Syntax\n             Specifications: ABNF\", RFC 2234, November 1997.\n   [RFC2251]\
    \ Wahl, M., Howes, T. and S. Kille, \"Lightweight Directory\n             Access\
    \ Protocol (v3)\", RFC 2251, December 1997.\n   [RFC2252] Wahl, M., Coulbeck,\
    \ A., Howes, T., and S. Kille,\n             \"Lightweight Directory Access Protocol\
    \ (v3): Attribute\n             Syntax Definitions\", RFC 2252, December 1997.\n\
    \   [RFC2256] Wahl, A., \"A Summary of the X.500(96) User Schema for use\n   \
    \          with LDAPv3\", RFC 2256, December 1997.\n   [RFC2307] Howard, L., \"\
    An Approach for Using LDAP as a Network\n             Information Service\", RFC\
    \ 2307, March 1998.\n   [RFC2829] Wahl, M., Alvestrand, H., Hodges, J. and R.\
    \ Morgan,\n             \"Authentication Methods for LDAP\", RFC 2829, June 2000.\n\
    \   [RFC3062] Zeilenga, K., \"LDAP Password Modify Extended Operation\",\n   \
    \          RFC 3062, February 2001.\n   [SHA1]    NIST, FIPS PUB 180-1: Secure\
    \ Hash Standard, April 1995.\n"
- title: 8. Author's Address
  contents:
  - "8. Author's Address\n   Kurt D. Zeilenga\n   OpenLDAP Foundation\n   EMail: Kurt@OpenLDAP.org\n"
- title: 9.  Full Copyright Statement
  contents:
  - "9.  Full Copyright Statement\n   Copyright (C) The Internet Society (2001). \
    \ All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
