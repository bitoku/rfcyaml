- title: __initial_text__
  contents:
  - '                         OpenPGP Message Format

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document is maintained in order to publish all necessary\n\
    \   information needed to develop interoperable applications based on the\n  \
    \ OpenPGP format.  It is not a step-by-step cookbook for writing an\n   application.\
    \  It describes only the format and methods needed to\n   read, check, generate,\
    \ and write conforming packets crossing any\n   network.  It does not deal with\
    \ storage and implementation questions.\n   It does, however, discuss implementation\
    \ issues necessary to avoid\n   security flaws.\n   OpenPGP software uses a combination\
    \ of strong public-key and\n   symmetric cryptography to provide security services\
    \ for electronic\n   communications and data storage.  These services include\n\
    \   confidentiality, key management, authentication, and digital\n   signatures.\
    \  This document specifies the message formats used in\n   OpenPGP.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................5\n\
    \      1.1. Terms ......................................................5\n  \
    \ 2. General functions ...............................................6\n    \
    \  2.1. Confidentiality via Encryption .............................6\n      2.2.\
    \ Authentication via Digital Signature .......................7\n      2.3. Compression\
    \ ................................................7\n      2.4. Conversion to\
    \ Radix-64 .....................................8\n      2.5. Signature-Only Applications\
    \ ................................8\n   3. Data Element Formats ............................................8\n\
    \      3.1. Scalar Numbers .............................................8\n  \
    \    3.2. Multiprecision Integers ....................................9\n    \
    \  3.3. Key IDs ....................................................9\n      3.4.\
    \ Text .......................................................9\n      3.5. Time\
    \ Fields ...............................................10\n      3.6. Keyrings\
    \ ..................................................10\n      3.7. String-to-Key\
    \ (S2K) Specifiers ............................10\n           3.7.1. String-to-Key\
    \ (S2K) Specifier Types ................10\n                  3.7.1.1. Simple\
    \ S2K ................................10\n                  3.7.1.2. Salted S2K\
    \ ................................11\n                  3.7.1.3. Iterated and\
    \ Salted S2K ...................11\n           3.7.2. String-to-Key Usage ................................12\n\
    \                  3.7.2.1. Secret-Key Encryption .....................12\n  \
    \                3.7.2.2. Symmetric-Key Message Encryption ..........13\n   4.\
    \ Packet Syntax ..................................................13\n      4.1.\
    \ Overview ..................................................13\n      4.2. Packet\
    \ Headers ............................................13\n           4.2.1. Old\
    \ Format Packet Lengths ..........................14\n           4.2.2. New Format\
    \ Packet Lengths ..........................15\n                  4.2.2.1. One-Octet\
    \ Lengths .........................15\n                  4.2.2.2. Two-Octet Lengths\
    \ .........................15\n                  4.2.2.3. Five-Octet Lengths ........................15\n\
    \                  4.2.2.4. Partial Body Lengths ......................16\n  \
    \         4.2.3. Packet Length Examples .............................16\n    \
    \  4.3. Packet Tags ...............................................17\n   5. Packet\
    \ Types ...................................................17\n      5.1. Public-Key\
    \ Encrypted Session Key Packets (Tag 1) ..........17\n      5.2. Signature Packet\
    \ (Tag 2) ..................................19\n           5.2.1. Signature Types\
    \ ....................................19\n           5.2.2. Version 3 Signature\
    \ Packet Format ..................21\n           5.2.3. Version 4 Signature Packet\
    \ Format ..................24\n                  5.2.3.1. Signature Subpacket\
    \ Specification .........25\n                  5.2.3.2. Signature Subpacket Types\
    \ .................27\n                  5.2.3.3. Notes on Self-Signatures ..................27\n\
    \                  5.2.3.4. Signature Creation Time ...................28\n  \
    \                5.2.3.5. Issuer ....................................28\n    \
    \              5.2.3.6. Key Expiration Time .......................28\n      \
    \            5.2.3.7. Preferred Symmetric Algorithms ............28\n        \
    \          5.2.3.8. Preferred Hash Algorithms .................29\n          \
    \        5.2.3.9. Preferred Compression Algorithms ..........29\n            \
    \      5.2.3.10. Signature Expiration Time ................29\n              \
    \    5.2.3.11. Exportable Certification .................29\n                \
    \  5.2.3.12. Revocable ................................30\n                  5.2.3.13.\
    \ Trust Signature ..........................30\n                  5.2.3.14. Regular\
    \ Expression .......................31\n                  5.2.3.15. Revocation\
    \ Key ...........................31\n                  5.2.3.16. Notation Data\
    \ ............................31\n                  5.2.3.17. Key Server Preferences\
    \ ...................32\n                  5.2.3.18. Preferred Key Server .....................33\n\
    \                  5.2.3.19. Primary User ID ..........................33\n  \
    \                5.2.3.20. Policy URI ...............................33\n    \
    \              5.2.3.21. Key Flags ................................33\n      \
    \            5.2.3.22. Signer's User ID .........................34\n        \
    \          5.2.3.23. Reason for Revocation ....................35\n          \
    \        5.2.3.24. Features .................................36\n            \
    \      5.2.3.25. Signature Target .........................36\n              \
    \    5.2.3.26. Embedded Signature .......................37\n           5.2.4.\
    \ Computing Signatures ...............................37\n                  5.2.4.1.\
    \ Subpacket Hints ...........................38\n      5.3. Symmetric-Key Encrypted\
    \ Session Key Packets (Tag 3) .......38\n      5.4. One-Pass Signature Packets\
    \ (Tag 4) ........................39\n      5.5. Key Material Packet .......................................40\n\
    \           5.5.1. Key Packet Variants ................................40\n  \
    \                5.5.1.1. Public-Key Packet (Tag 6) .................40\n    \
    \              5.5.1.2. Public-Subkey Packet (Tag 14) .............40\n      \
    \            5.5.1.3. Secret-Key Packet (Tag 5) .................41\n        \
    \          5.5.1.4. Secret-Subkey Packet (Tag 7) ..............41\n          \
    \ 5.5.2. Public-Key Packet Formats ..........................41\n           5.5.3.\
    \ Secret-Key Packet Formats ..........................43\n      5.6. Compressed\
    \ Data Packet (Tag 8) ............................45\n      5.7. Symmetrically\
    \ Encrypted Data Packet (Tag 9) ...............45\n      5.8. Marker Packet (Obsolete\
    \ Literal Packet) (Tag 10) ..........46\n      5.9. Literal Data Packet (Tag 11)\
    \ ..............................46\n      5.10. Trust Packet (Tag 12) ....................................47\n\
    \      5.11. User ID Packet (Tag 13) ..................................48\n  \
    \    5.12. User Attribute Packet (Tag 17) ...........................48\n    \
    \       5.12.1. The Image Attribute Subpacket .....................48\n      5.13.\
    \ Sym. Encrypted Integrity Protected Data Packet (Tag 18) ..49\n      5.14. Modification\
    \ Detection Code Packet (Tag 19) ..............52\n   6. Radix-64 Conversions\
    \ ...........................................53\n      6.1. An Implementation\
    \ of the CRC-24 in \"C\" ....................54\n      6.2. Forming ASCII Armor\
    \ .......................................54\n      6.3. Encoding Binary in Radix-64\
    \ ...............................57\n      6.4. Decoding Radix-64 .........................................58\n\
    \      6.5. Examples of Radix-64 ......................................59\n  \
    \    6.6. Example of an ASCII Armored Message .......................59\n   7.\
    \ Cleartext Signature Framework ..................................59\n      7.1.\
    \ Dash-Escaped Text .........................................60\n   8. Regular\
    \ Expressions ............................................61\n   9. Constants\
    \ ......................................................61\n      9.1. Public-Key\
    \ Algorithms .....................................62\n      9.2. Symmetric-Key\
    \ Algorithms ..................................62\n      9.3. Compression Algorithms\
    \ ....................................63\n      9.4. Hash Algorithms ...........................................63\n\
    \   10. IANA Considerations ...........................................63\n  \
    \    10.1. New String-to-Key Specifier Types ........................64\n    \
    \  10.2. New Packets ..............................................64\n      \
    \     10.2.1. User Attribute Types ..............................64\n        \
    \          10.2.1.1. Image Format Subpacket Types .............64\n          \
    \ 10.2.2. New Signature Subpackets ..........................64\n            \
    \      10.2.2.1. Signature Notation Data Subpackets .......65\n              \
    \    10.2.2.2. Key Server Preference Extensions .........65\n                \
    \  10.2.2.3. Key Flags Extensions .....................65\n                  10.2.2.4.\
    \ Reason For Revocation Extensions .........65\n                  10.2.2.5. Implementation\
    \ Features ..................66\n           10.2.3. New Packet Versions ...............................66\n\
    \      10.3. New Algorithms ...........................................66\n  \
    \         10.3.1. Public-Key Algorithms .............................66\n    \
    \       10.3.2. Symmetric-Key Algorithms ..........................67\n      \
    \     10.3.3. Hash Algorithms ...................................67\n        \
    \   10.3.4. Compression Algorithms ............................67\n   11. Packet\
    \ Composition ............................................67\n      11.1. Transferable\
    \ Public Keys .................................67\n      11.2. Transferable Secret\
    \ Keys .................................69\n      11.3. OpenPGP Messages .........................................69\n\
    \      11.4. Detached Signatures ......................................70\n  \
    \ 12. Enhanced Key Formats ..........................................70\n    \
    \  12.1. Key Structures ...........................................70\n      12.2.\
    \ Key IDs and Fingerprints .................................71\n   13. Notes on\
    \ Algorithms ...........................................72\n      13.1. PKCS#1\
    \ Encoding in OpenPGP ...............................72\n           13.1.1. EME-PKCS1-v1_5-ENCODE\
    \ .............................73\n           13.1.2. EME-PKCS1-v1_5-DECODE .............................73\n\
    \           13.1.3. EMSA-PKCS1-v1_5 ...................................74\n  \
    \    13.2. Symmetric Algorithm Preferences ..........................75\n    \
    \  13.3. Other Algorithm Preferences ..............................76\n      \
    \     13.3.1. Compression Preferences ...........................76\n        \
    \   13.3.2. Hash Algorithm Preferences ........................76\n      13.4.\
    \ Plaintext ................................................77\n      13.5. RSA\
    \ ......................................................77\n      13.6. DSA ......................................................77\n\
    \      13.7. Elgamal ..................................................78\n  \
    \    13.8. Reserved Algorithm Numbers ...............................78\n    \
    \  13.9. OpenPGP CFB Mode .........................................78\n      13.10.\
    \ Private or Experimental Parameters ......................79\n      13.11. Extension\
    \ of the MDC System .............................80\n      13.12. Meta-Considerations\
    \ for Expansion .......................80\n   14. Security Considerations .......................................81\n\
    \   15. Implementation Nits ...........................................84\n  \
    \ 16. References ....................................................86\n    \
    \  16.1. Normative References .....................................86\n      16.2.\
    \ Informative References ...................................88\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document provides information on the message-exchange\
    \ packet\n   formats used by OpenPGP to provide encryption, decryption, signing,\n\
    \   and key management functions.  It is a revision of RFC 2440, \"OpenPGP\n \
    \  Message Format\", which itself replaces RFC 1991, \"PGP Message\n   Exchange\
    \ Formats\" [RFC1991] [RFC2440].\n"
- title: 1.1.  Terms
  contents:
  - "1.1.  Terms\n     * OpenPGP - This is a term for security software that uses\
    \ PGP 5.x\n       as a basis, formalized in RFC 2440 and this document.\n    \
    \ * PGP - Pretty Good Privacy.  PGP is a family of software systems\n       developed\
    \ by Philip R. Zimmermann from which OpenPGP is based.\n     * PGP 2.6.x - This\
    \ version of PGP has many variants, hence the term\n       PGP 2.6.x.  It used\
    \ only RSA, MD5, and IDEA for its cryptographic\n       transforms.  An informational\
    \ RFC, RFC 1991, was written\n       describing this version of PGP.\n     * PGP\
    \ 5.x - This version of PGP is formerly known as \"PGP 3\" in the\n       community\
    \ and also in the predecessor of this document, RFC 1991.\n       It has new formats\
    \ and corrects a number of problems in the PGP\n       2.6.x design.  It is referred\
    \ to here as PGP 5.x because that\n       software was the first release of the\
    \ \"PGP 3\" code base.\n     * GnuPG - GNU Privacy Guard, also called GPG.  GnuPG\
    \ is an OpenPGP\n       implementation that avoids all encumbered algorithms.\n\
    \       Consequently, early versions of GnuPG did not include RSA public\n   \
    \    keys.  GnuPG may or may not have (depending on version) support\n       for\
    \ IDEA or other encumbered algorithms.\n   \"PGP\", \"Pretty Good\", and \"Pretty\
    \ Good Privacy\" are trademarks of PGP\n   Corporation and are used with permission.\
    \  The term \"OpenPGP\" refers\n   to the protocol described in this and related\
    \ documents.\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and\
    \ \"OPTIONAL\" in this\n   document are to be interpreted as described in [RFC2119].\n\
    \   The key words \"PRIVATE USE\", \"HIERARCHICAL ALLOCATION\", \"FIRST COME\n\
    \   FIRST SERVED\", \"EXPERT REVIEW\", \"SPECIFICATION REQUIRED\", \"IESG\n  \
    \ APPROVAL\", \"IETF CONSENSUS\", and \"STANDARDS ACTION\" that appear in\n  \
    \ this document when used to describe namespace allocation are to be\n   interpreted\
    \ as described in [RFC2434].\n"
- title: 2.  General functions
  contents:
  - "2.  General functions\n   OpenPGP provides data integrity services for messages\
    \ and data files\n   by using these core technologies:\n     - digital signatures\n\
    \     - encryption\n     - compression\n     - Radix-64 conversion\n   In addition,\
    \ OpenPGP provides key management and certificate\n   services, but many of these\
    \ are beyond the scope of this document.\n"
- title: 2.1.  Confidentiality via Encryption
  contents:
  - "2.1.  Confidentiality via Encryption\n   OpenPGP combines symmetric-key encryption\
    \ and public-key encryption\n   to provide confidentiality.  When made confidential,\
    \ first the object\n   is encrypted using a symmetric encryption algorithm.  Each\
    \ symmetric\n   key is used only once, for a single object.  A new \"session key\"\
    \ is\n   generated as a random number for each object (sometimes referred to\n\
    \   as a session).  Since it is used only once, the session key is bound\n   to\
    \ the message and transmitted with it.  To protect the key, it is\n   encrypted\
    \ with the receiver's public key.  The sequence is as\n   follows:\n   1.  The\
    \ sender creates a message.\n   2.  The sending OpenPGP generates a random number\
    \ to be used as a\n       session key for this message only.\n   3.  The session\
    \ key is encrypted using each recipient's public key.\n       These \"encrypted\
    \ session keys\" start the message.\n   4.  The sending OpenPGP encrypts the message\
    \ using the session key,\n       which forms the remainder of the message.  Note\
    \ that the message\n       is also usually compressed.\n   5.  The receiving OpenPGP\
    \ decrypts the session key using the\n       recipient's private key.\n   6. \
    \ The receiving OpenPGP decrypts the message using the session key.\n       If\
    \ the message was compressed, it will be decompressed.\n   With symmetric-key\
    \ encryption, an object may be encrypted with a\n   symmetric key derived from\
    \ a passphrase (or other shared secret), or\n   a two-stage mechanism similar\
    \ to the public-key method described\n   above in which a session key is itself\
    \ encrypted with a symmetric\n   algorithm keyed from a shared secret.\n   Both\
    \ digital signature and confidentiality services may be applied to\n   the same\
    \ message.  First, a signature is generated for the message\n   and attached to\
    \ the message.  Then the message plus signature is\n   encrypted using a symmetric\
    \ session key.  Finally, the session key is\n   encrypted using public-key encryption\
    \ and prefixed to the encrypted\n   block.\n"
- title: 2.2.  Authentication via Digital Signature
  contents:
  - "2.2.  Authentication via Digital Signature\n   The digital signature uses a hash\
    \ code or message digest algorithm,\n   and a public-key signature algorithm.\
    \  The sequence is as follows:\n   1.  The sender creates a message.\n   2.  The\
    \ sending software generates a hash code of the message.\n   3.  The sending software\
    \ generates a signature from the hash code\n       using the sender's private\
    \ key.\n   4.  The binary signature is attached to the message.\n   5.  The receiving\
    \ software keeps a copy of the message signature.\n   6.  The receiving software\
    \ generates a new hash code for the received\n       message and verifies it using\
    \ the message's signature.  If the\n       verification is successful, the message\
    \ is accepted as authentic.\n"
- title: 2.3.  Compression
  contents:
  - "2.3.  Compression\n   OpenPGP implementations SHOULD compress the message after\
    \ applying\n   the signature but before encryption.\n   If an implementation does\
    \ not implement compression, its authors\n   should be aware that most OpenPGP\
    \ messages in the world are\n   compressed.  Thus, it may even be wise for a space-constrained\n\
    \   implementation to implement decompression, but not compression.\n   Furthermore,\
    \ compression has the added side effect that some types of\n   attacks can be\
    \ thwarted by the fact that slightly altered, compressed\n   data rarely uncompresses\
    \ without severe errors.  This is hardly\n   rigorous, but it is operationally\
    \ useful.  These attacks can be\n   rigorously prevented by implementing and using\
    \ Modification Detection\n   Codes as described in sections following.\n"
- title: 2.4.  Conversion to Radix-64
  contents:
  - "2.4.  Conversion to Radix-64\n   OpenPGP's underlying native representation for\
    \ encrypted messages,\n   signature certificates, and keys is a stream of arbitrary\
    \ octets.\n   Some systems only permit the use of blocks consisting of seven-bit,\n\
    \   printable text.  For transporting OpenPGP's native raw binary octets\n   through\
    \ channels that are not safe to raw binary data, a printable\n   encoding of these\
    \ binary octets is needed.  OpenPGP provides the\n   service of converting the\
    \ raw 8-bit binary octet stream to a stream\n   of printable ASCII characters,\
    \ called Radix-64 encoding or ASCII\n   Armor.\n   Implementations SHOULD provide\
    \ Radix-64 conversions.\n"
- title: 2.5.  Signature-Only Applications
  contents:
  - "2.5.  Signature-Only Applications\n   OpenPGP is designed for applications that\
    \ use both encryption and\n   signatures, but there are a number of problems that\
    \ are solved by a\n   signature-only implementation.  Although this specification\
    \ requires\n   both encryption and signatures, it is reasonable for there to be\n\
    \   subset implementations that are non-conformant only in that they omit\n  \
    \ encryption.\n"
- title: 3.  Data Element Formats
  contents:
  - "3.  Data Element Formats\n   This section describes the data elements used by\
    \ OpenPGP.\n"
- title: 3.1.  Scalar Numbers
  contents:
  - "3.1.  Scalar Numbers\n   Scalar numbers are unsigned and are always stored in\
    \ big-endian\n   format.  Using n[k] to refer to the kth octet being interpreted,\
    \ the\n   value of a two-octet scalar is ((n[0] << 8) + n[1]).  The value of a\n\
    \   four-octet scalar is ((n[0] << 24) + (n[1] << 16) + (n[2] << 8) +\n   n[3]).\n"
- title: 3.2.  Multiprecision Integers
  contents:
  - "3.2.  Multiprecision Integers\n   Multiprecision integers (also called MPIs)\
    \ are unsigned integers used\n   to hold large integers such as the ones used\
    \ in cryptographic\n   calculations.\n   An MPI consists of two pieces: a two-octet\
    \ scalar that is the length\n   of the MPI in bits followed by a string of octets\
    \ that contain the\n   actual integer.\n   These octets form a big-endian number;\
    \ a big-endian number can be\n   made into an MPI by prefixing it with the appropriate\
    \ length.\n   Examples:\n   (all numbers are in hexadecimal)\n   The string of\
    \ octets [00 01 01] forms an MPI with the value 1.  The\n   string [00 09 01 FF]\
    \ forms an MPI with the value of 511.\n   Additional rules:\n   The size of an\
    \ MPI is ((MPI.length + 7) / 8) + 2 octets.\n   The length field of an MPI describes\
    \ the length starting from its\n   most significant non-zero bit.  Thus, the MPI\
    \ [00 02 01] is not\n   formed correctly.  It should be [00 01 01].\n   Unused\
    \ bits of an MPI MUST be zero.\n   Also note that when an MPI is encrypted, the\
    \ length refers to the\n   plaintext MPI.  It may be ill-formed in its ciphertext.\n"
- title: 3.3.  Key IDs
  contents:
  - "3.3.  Key IDs\n   A Key ID is an eight-octet scalar that identifies a key.\n\
    \   Implementations SHOULD NOT assume that Key IDs are unique.  The\n   section\
    \ \"Enhanced Key Formats\" below describes how Key IDs are\n   formed.\n"
- title: 3.4.  Text
  contents:
  - "3.4.  Text\n   Unless otherwise specified, the character set for text is the\
    \ UTF-8\n   [RFC3629] encoding of Unicode [ISO10646].\n"
- title: 3.5.  Time Fields
  contents:
  - "3.5.  Time Fields\n   A time field is an unsigned four-octet number containing\
    \ the number\n   of seconds elapsed since midnight, 1 January 1970 UTC.\n"
- title: 3.6.  Keyrings
  contents:
  - "3.6.  Keyrings\n   A keyring is a collection of one or more keys in a file or\
    \ database.\n   Traditionally, a keyring is simply a sequential list of keys,\
    \ but may\n   be any suitable database.  It is beyond the scope of this standard\
    \ to\n   discuss the details of keyrings or other databases.\n"
- title: 3.7.  String-to-Key (S2K) Specifiers
  contents:
  - "3.7.  String-to-Key (S2K) Specifiers\n   String-to-key (S2K) specifiers are used\
    \ to convert passphrase strings\n   into symmetric-key encryption/decryption keys.\
    \  They are used in two\n   places, currently: to encrypt the secret part of private\
    \ keys in the\n   private keyring, and to convert passphrases to encryption keys\
    \ for\n   symmetrically encrypted messages.\n"
- title: 3.7.1.  String-to-Key (S2K) Specifier Types
  contents:
  - "3.7.1.  String-to-Key (S2K) Specifier Types\n   There are three types of S2K\
    \ specifiers currently supported, and\n   some reserved values:\n       ID   \
    \       S2K Type\n       --          --------\n       0           Simple S2K\n\
    \       1           Salted S2K\n       2           Reserved value\n       3  \
    \         Iterated and Salted S2K\n       100 to 110  Private/Experimental S2K\n\
    \   These are described in Sections 3.7.1.1 - 3.7.1.3.\n"
- title: 3.7.1.1.  Simple S2K
  contents:
  - "3.7.1.1.  Simple S2K\n   This directly hashes the string to produce the key data.\
    \  See below\n   for how this hashing is done.\n       Octet 0:        0x00\n\
    \       Octet 1:        hash algorithm\n   Simple S2K hashes the passphrase to\
    \ produce the session key.  The\n   manner in which this is done depends on the\
    \ size of the session key\n   (which will depend on the cipher used) and the size\
    \ of the hash\n   algorithm's output.  If the hash size is greater than the session\
    \ key\n   size, the high-order (leftmost) octets of the hash are used as the\n\
    \   key.\n   If the hash size is less than the key size, multiple instances of\
    \ the\n   hash context are created -- enough to produce the required key data.\n\
    \   These instances are preloaded with 0, 1, 2, ... octets of zeros (that\n  \
    \ is to say, the first instance has no preloading, the second gets\n   preloaded\
    \ with 1 octet of zero, the third is preloaded with two\n   octets of zeros, and\
    \ so forth).\n   As the data is hashed, it is given independently to each hash\n\
    \   context.  Since the contexts have been initialized differently, they\n   will\
    \ each produce different hash output.  Once the passphrase is\n   hashed, the\
    \ output data from the multiple hashes is concatenated,\n   first hash leftmost,\
    \ to produce the key data, with any excess octets\n   on the right discarded.\n"
- title: 3.7.1.2.  Salted S2K
  contents:
  - "3.7.1.2.  Salted S2K\n   This includes a \"salt\" value in the S2K specifier\
    \ -- some arbitrary\n   data -- that gets hashed along with the passphrase string,\
    \ to help\n   prevent dictionary attacks.\n       Octet 0:        0x01\n     \
    \  Octet 1:        hash algorithm\n       Octets 2-9:     8-octet salt value\n\
    \   Salted S2K is exactly like Simple S2K, except that the input to the\n   hash\
    \ function(s) consists of the 8 octets of salt from the S2K\n   specifier, followed\
    \ by the passphrase.\n"
- title: 3.7.1.3.  Iterated and Salted S2K
  contents:
  - "3.7.1.3.  Iterated and Salted S2K\n   This includes both a salt and an octet\
    \ count.  The salt is combined\n   with the passphrase and the resulting value\
    \ is hashed repeatedly.\n   This further increases the amount of work an attacker\
    \ must do to try\n   dictionary attacks.\n       Octet  0:        0x03\n     \
    \  Octet  1:        hash algorithm\n       Octets 2-9:      8-octet salt value\n\
    \       Octet  10:       count, a one-octet, coded value\n   The count is coded\
    \ into a one-octet number using the following\n   formula:\n       #define EXPBIAS\
    \ 6\n           count = ((Int32)16 + (c & 15)) << ((c >> 4) + EXPBIAS);\n   The\
    \ above formula is in C, where \"Int32\" is a type for a 32-bit\n   integer, and\
    \ the variable \"c\" is the coded count, Octet 10.\n   Iterated-Salted S2K hashes\
    \ the passphrase and salt data multiple\n   times.  The total number of octets\
    \ to be hashed is specified in the\n   encoded count in the S2K specifier.  Note\
    \ that the resulting count\n   value is an octet count of how many octets will\
    \ be hashed, not an\n   iteration count.\n   Initially, one or more hash contexts\
    \ are set up as with the other S2K\n   algorithms, depending on how many octets\
    \ of key data are needed.\n   Then the salt, followed by the passphrase data,\
    \ is repeatedly hashed\n   until the number of octets specified by the octet count\
    \ has been\n   hashed.  The one exception is that if the octet count is less than\n\
    \   the size of the salt plus passphrase, the full salt plus passphrase\n   will\
    \ be hashed even though that is greater than the octet count.\n   After the hashing\
    \ is done, the data is unloaded from the hash\n   context(s) as with the other\
    \ S2K algorithms.\n"
- title: 3.7.2.  String-to-Key Usage
  contents:
  - "3.7.2.  String-to-Key Usage\n   Implementations SHOULD use salted or iterated-and-salted\
    \ S2K\n   specifiers, as simple S2K specifiers are more vulnerable to\n   dictionary\
    \ attacks.\n"
- title: 3.7.2.1.  Secret-Key Encryption
  contents:
  - "3.7.2.1.  Secret-Key Encryption\n   An S2K specifier can be stored in the secret\
    \ keyring to specify how\n   to convert the passphrase to a key that unlocks the\
    \ secret data.\n   Older versions of PGP just stored a cipher algorithm octet\
    \ preceding\n   the secret data or a zero to indicate that the secret data was\n\
    \   unencrypted.  The MD5 hash function was always used to convert the\n   passphrase\
    \ to a key for the specified cipher algorithm.\n   For compatibility, when an\
    \ S2K specifier is used, the special value\n   254 or 255 is stored in the position\
    \ where the hash algorithm octet\n   would have been in the old data structure.\
    \  This is then followed\n   immediately by a one-octet algorithm identifier,\
    \ and then by the S2K\n   specifier as encoded above.\n   Therefore, preceding\
    \ the secret data there will be one of these\n   possibilities:\n       0:   \
    \        secret data is unencrypted (no passphrase)\n       255 or 254:  followed\
    \ by algorithm octet and S2K specifier\n       Cipher alg:  use Simple S2K algorithm\
    \ using MD5 hash\n   This last possibility, the cipher algorithm number with an\
    \ implicit\n   use of MD5 and IDEA, is provided for backward compatibility; it\
    \ MAY\n   be understood, but SHOULD NOT be generated, and is deprecated.\n   These\
    \ are followed by an Initial Vector of the same length as the\n   block size of\
    \ the cipher for the decryption of the secret values, if\n   they are encrypted,\
    \ and then the secret-key values themselves.\n"
- title: 3.7.2.2.  Symmetric-Key Message Encryption
  contents:
  - "3.7.2.2.  Symmetric-Key Message Encryption\n   OpenPGP can create a Symmetric-key\
    \ Encrypted Session Key (ESK) packet\n   at the front of a message.  This is used\
    \ to allow S2K specifiers to\n   be used for the passphrase conversion or to create\
    \ messages with a\n   mix of symmetric-key ESKs and public-key ESKs.  This allows\
    \ a message\n   to be decrypted either with a passphrase or a public-key pair.\n\
    \   PGP 2.X always used IDEA with Simple string-to-key conversion when\n   encrypting\
    \ a message with a symmetric algorithm.  This is deprecated,\n   but MAY be used\
    \ for backward-compatibility.\n"
- title: 4.  Packet Syntax
  contents:
  - "4.  Packet Syntax\n   This section describes the packets used by OpenPGP.\n"
- title: 4.1.  Overview
  contents:
  - "4.1.  Overview\n   An OpenPGP message is constructed from a number of records\
    \ that are\n   traditionally called packets.  A packet is a chunk of data that\
    \ has a\n   tag specifying its meaning.  An OpenPGP message, keyring,\n   certificate,\
    \ and so forth consists of a number of packets.  Some of\n   those packets may\
    \ contain other OpenPGP packets (for example, a\n   compressed data packet, when\
    \ uncompressed, contains OpenPGP packets).\n   Each packet consists of a packet\
    \ header, followed by the packet body.\n   The packet header is of variable length.\n"
- title: 4.2.  Packet Headers
  contents:
  - "4.2.  Packet Headers\n   The first octet of the packet header is called the \"\
    Packet Tag\".  It\n   determines the format of the header and denotes the packet\
    \ contents.\n   The remainder of the packet header is the length of the packet.\n\
    \   Note that the most significant bit is the leftmost bit, called bit 7.\n  \
    \ A mask for this bit is 0x80 in hexadecimal.\n              +---------------+\n\
    \         PTag |7 6 5 4 3 2 1 0|\n              +---------------+\n         Bit\
    \ 7 -- Always one\n         Bit 6 -- New packet format if set\n   PGP 2.6.x only\
    \ uses old format packets.  Thus, software that\n   interoperates with those versions\
    \ of PGP must only use old format\n   packets.  If interoperability is not an\
    \ issue, the new packet format\n   is RECOMMENDED.  Note that old format packets\
    \ have four bits of\n   packet tags, and new format packets have six; some features\
    \ cannot be\n   used and still be backward-compatible.\n   Also note that packets\
    \ with a tag greater than or equal to 16 MUST\n   use new format packets.  The\
    \ old format packets can only express tags\n   less than or equal to 15.\n   Old\
    \ format packets contain:\n         Bits 5-2 -- packet tag\n         Bits 1-0\
    \ -- length-type\n   New format packets contain:\n         Bits 5-0 -- packet\
    \ tag\n"
- title: 4.2.1.  Old Format Packet Lengths
  contents:
  - "4.2.1.  Old Format Packet Lengths\n   The meaning of the length-type in old format\
    \ packets is:\n   0 - The packet has a one-octet length.  The header is 2 octets\
    \ long.\n   1 - The packet has a two-octet length.  The header is 3 octets long.\n\
    \   2 - The packet has a four-octet length.  The header is 5 octets long.\n  \
    \ 3 - The packet is of indeterminate length.  The header is 1 octet\n       long,\
    \ and the implementation must determine how long the packet\n       is.  If the\
    \ packet is in a file, this means that the packet\n       extends until the end\
    \ of the file.  In general, an implementation\n       SHOULD NOT use indeterminate-length\
    \ packets except where the end\n       of the data will be clear from the context,\
    \ and even then it is\n       better to use a definite length, or a new format\
    \ header.  The new\n       format headers described below have a mechanism for\
    \ precisely\n       encoding data of indeterminate length.\n"
- title: 4.2.2.  New Format Packet Lengths
  contents:
  - "4.2.2.  New Format Packet Lengths\n   New format packets have four possible ways\
    \ of encoding length:\n   1. A one-octet Body Length header encodes packet lengths\
    \ of up to 191\n      octets.\n   2. A two-octet Body Length header encodes packet\
    \ lengths of 192 to\n      8383 octets.\n   3. A five-octet Body Length header\
    \ encodes packet lengths of up to\n      4,294,967,295 (0xFFFFFFFF) octets in\
    \ length.  (This actually\n      encodes a four-octet scalar number.)\n   4. When\
    \ the length of the packet body is not known in advance by the\n      issuer,\
    \ Partial Body Length headers encode a packet of\n      indeterminate length,\
    \ effectively making it a stream.\n"
- title: 4.2.2.1.  One-Octet Lengths
  contents:
  - "4.2.2.1.  One-Octet Lengths\n   A one-octet Body Length header encodes a length\
    \ of 0 to 191 octets.\n   This type of length header is recognized because the\
    \ one octet value\n   is less than 192.  The body length is equal to:\n      \
    \ bodyLen = 1st_octet;\n"
- title: 4.2.2.2.  Two-Octet Lengths
  contents:
  - "4.2.2.2.  Two-Octet Lengths\n   A two-octet Body Length header encodes a length\
    \ of 192 to 8383\n   octets.  It is recognized because its first octet is in the\
    \ range 192\n   to 223.  The body length is equal to:\n       bodyLen = ((1st_octet\
    \ - 192) << 8) + (2nd_octet) + 192\n"
- title: 4.2.2.3.  Five-Octet Lengths
  contents:
  - "4.2.2.3.  Five-Octet Lengths\n   A five-octet Body Length header consists of\
    \ a single octet holding\n   the value 255, followed by a four-octet scalar. \
    \ The body length is\n   equal to:\n       bodyLen = (2nd_octet << 24) | (3rd_octet\
    \ << 16) |\n                 (4th_octet << 8)  | 5th_octet\n   This basic set\
    \ of one, two, and five-octet lengths is also used\n   internally to some packets.\n"
- title: 4.2.2.4.  Partial Body Lengths
  contents:
  - "4.2.2.4.  Partial Body Lengths\n   A Partial Body Length header is one octet\
    \ long and encodes the length\n   of only part of the data packet.  This length\
    \ is a power of 2, from 1\n   to 1,073,741,824 (2 to the 30th power).  It is recognized\
    \ by its one\n   octet value that is greater than or equal to 224, and less than\
    \ 255.\n   The Partial Body Length is equal to:\n       partialBodyLen = 1 <<\
    \ (1st_octet & 0x1F);\n   Each Partial Body Length header is followed by a portion\
    \ of the\n   packet body data.  The Partial Body Length header specifies this\n\
    \   portion's length.  Another length header (one octet, two-octet,\n   five-octet,\
    \ or partial) follows that portion.  The last length header\n   in the packet\
    \ MUST NOT be a Partial Body Length header.  Partial Body\n   Length headers may\
    \ only be used for the non-final parts of the\n   packet.\n   Note also that the\
    \ last Body Length header can be a zero-length\n   header.\n   An implementation\
    \ MAY use Partial Body Lengths for data packets, be\n   they literal, compressed,\
    \ or encrypted.  The first partial length\n   MUST be at least 512 octets long.\
    \  Partial Body Lengths MUST NOT be\n   used for any other packet types.\n"
- title: 4.2.3.  Packet Length Examples
  contents:
  - "4.2.3.  Packet Length Examples\n   These examples show ways that new format packets\
    \ might encode the\n   packet lengths.\n   A packet with length 100 may have its\
    \ length encoded in one octet:\n   0x64.  This is followed by 100 octets of data.\n\
    \   A packet with length 1723 may have its length encoded in two octets:\n   0xC5,\
    \ 0xFB.  This header is followed by the 1723 octets of data.\n   A packet with\
    \ length 100000 may have its length encoded in five\n   octets: 0xFF, 0x00, 0x01,\
    \ 0x86, 0xA0.\n   It might also be encoded in the following octet stream: 0xEF,\
    \ first\n   32768 octets of data; 0xE1, next two octets of data; 0xE0, next one\n\
    \   octet of data; 0xF0, next 65536 octets of data; 0xC5, 0xDD, last 1693\n  \
    \ octets of data.  This is just one possible encoding, and many\n   variations\
    \ are possible on the size of the Partial Body Length\n   headers, as long as\
    \ a regular Body Length header encodes the last\n   portion of the data.\n   Please\
    \ note that in all of these explanations, the total length of\n   the packet is\
    \ the length of the header(s) plus the length of the\n   body.\n"
- title: 4.3.  Packet Tags
  contents:
  - "4.3.  Packet Tags\n   The packet tag denotes what type of packet the body holds.\
    \  Note that\n   old format headers can only have tags less than 16, whereas new\n\
    \   format headers can have tags as great as 63.  The defined tags (in\n   decimal)\
    \ are as follows:\n       0        -- Reserved - a packet tag MUST NOT have this\
    \ value\n       1        -- Public-Key Encrypted Session Key Packet\n       2\
    \        -- Signature Packet\n       3        -- Symmetric-Key Encrypted Session\
    \ Key Packet\n       4        -- One-Pass Signature Packet\n       5        --\
    \ Secret-Key Packet\n       6        -- Public-Key Packet\n       7        --\
    \ Secret-Subkey Packet\n       8        -- Compressed Data Packet\n       9  \
    \      -- Symmetrically Encrypted Data Packet\n       10       -- Marker Packet\n\
    \       11       -- Literal Data Packet\n       12       -- Trust Packet\n   \
    \    13       -- User ID Packet\n       14       -- Public-Subkey Packet\n   \
    \    17       -- User Attribute Packet\n       18       -- Sym. Encrypted and\
    \ Integrity Protected Data Packet\n       19       -- Modification Detection Code\
    \ Packet\n       60 to 63 -- Private or Experimental Values\n"
- title: 5.  Packet Types
  contents:
  - '5.  Packet Types

    '
- title: 5.1.  Public-Key Encrypted Session Key Packets (Tag 1)
  contents:
  - "5.1.  Public-Key Encrypted Session Key Packets (Tag 1)\n   A Public-Key Encrypted\
    \ Session Key packet holds the session key used\n   to encrypt a message.  Zero\
    \ or more Public-Key Encrypted Session Key\n   packets and/or Symmetric-Key Encrypted\
    \ Session Key packets may\n   precede a Symmetrically Encrypted Data Packet, which\
    \ holds an\n   encrypted message.  The message is encrypted with the session key,\n\
    \   and the session key is itself encrypted and stored in the Encrypted\n   Session\
    \ Key packet(s).  The Symmetrically Encrypted Data Packet is\n   preceded by one\
    \ Public-Key Encrypted Session Key packet for each\n   OpenPGP key to which the\
    \ message is encrypted.  The recipient of the\n   message finds a session key\
    \ that is encrypted to their public key,\n   decrypts the session key, and then\
    \ uses the session key to decrypt\n   the message.\n   The body of this packet\
    \ consists of:\n     - A one-octet number giving the version number of the packet\
    \ type.\n       The currently defined value for packet version is 3.\n     - An\
    \ eight-octet number that gives the Key ID of the public key to\n       which\
    \ the session key is encrypted.  If the session key is\n       encrypted to a\
    \ subkey, then the Key ID of this subkey is used\n       here instead of the Key\
    \ ID of the primary key.\n     - A one-octet number giving the public-key algorithm\
    \ used.\n     - A string of octets that is the encrypted session key.  This\n\
    \       string takes up the remainder of the packet, and its contents are\n  \
    \     dependent on the public-key algorithm used.\n   Algorithm Specific Fields\
    \ for RSA encryption\n     - multiprecision integer (MPI) of RSA encrypted value\
    \ m**e mod n.\n   Algorithm Specific Fields for Elgamal encryption:\n     - MPI\
    \ of Elgamal (Diffie-Hellman) value g**k mod p.\n     - MPI of Elgamal (Diffie-Hellman)\
    \ value m * y**k mod p.\n   The value \"m\" in the above formulas is derived from\
    \ the session key\n   as follows.  First, the session key is prefixed with a one-octet\n\
    \   algorithm identifier that specifies the symmetric encryption\n   algorithm\
    \ used to encrypt the following Symmetrically Encrypted Data\n   Packet.  Then\
    \ a two-octet checksum is appended, which is equal to the\n   sum of the preceding\
    \ session key octets, not including the algorithm\n   identifier, modulo 65536.\
    \  This value is then encoded as described in\n   PKCS#1 block encoding EME-PKCS1-v1_5\
    \ in Section 7.2.1 of [RFC3447] to\n   form the \"m\" value used in the formulas\
    \ above.  See Section 13.1 of\n   this document for notes on OpenPGP's use of\
    \ PKCS#1.\n   Note that when an implementation forms several PKESKs with one\n\
    \   session key, forming a message that can be decrypted by several keys,\n  \
    \ the implementation MUST make a new PKCS#1 encoding for each key.\n   An implementation\
    \ MAY accept or use a Key ID of zero as a \"wild card\"\n   or \"speculative\"\
    \ Key ID.  In this case, the receiving implementation\n   would try all available\
    \ private keys, checking for a valid decrypted\n   session key.  This format helps\
    \ reduce traffic analysis of messages.\n"
- title: 5.2.  Signature Packet (Tag 2)
  contents:
  - "5.2.  Signature Packet (Tag 2)\n   A Signature packet describes a binding between\
    \ some public key and\n   some data.  The most common signatures are a signature\
    \ of a file or a\n   block of text, and a signature that is a certification of\
    \ a User ID.\n   Two versions of Signature packets are defined.  Version 3 provides\n\
    \   basic signature information, while version 4 provides an expandable\n   format\
    \ with subpackets that can specify more information about the\n   signature. \
    \ PGP 2.6.x only accepts version 3 signatures.\n   Implementations SHOULD accept\
    \ V3 signatures.  Implementations SHOULD\n   generate V4 signatures.\n   Note\
    \ that if an implementation is creating an encrypted and signed\n   message that\
    \ is encrypted to a V3 key, it is reasonable to create a\n   V3 signature.\n"
- title: 5.2.1.  Signature Types
  contents:
  - "5.2.1.  Signature Types\n   There are a number of possible meanings for a signature,\
    \ which are\n   indicated in a signature type octet in any given signature.  Please\n\
    \   note that the vagueness of these meanings is not a flaw, but a\n   feature\
    \ of the system.  Because OpenPGP places final authority for\n   validity upon\
    \ the receiver of a signature, it may be that one\n   signer's casual act might\
    \ be more rigorous than some other\n   authority's positive act.  See Section\
    \ 5.2.4, \"Computing Signatures\",\n   for detailed information on how to compute\
    \ and verify signatures of\n   each type.\n   These meanings are as follows:\n\
    \   0x00: Signature of a binary document.\n       This means the signer owns it,\
    \ created it, or certifies that it\n       has not been modified.\n   0x01: Signature\
    \ of a canonical text document.\n       This means the signer owns it, created\
    \ it, or certifies that it\n       has not been modified.  The signature is calculated\
    \ over the text\n       data with its line endings converted to <CR><LF>.\n  \
    \ 0x02: Standalone signature.\n       This signature is a signature of only its\
    \ own subpacket contents.\n       It is calculated identically to a signature\
    \ over a zero-length\n       binary document.  Note that it doesn't make sense\
    \ to have a V3\n       standalone signature.\n   0x10: Generic certification of\
    \ a User ID and Public-Key packet.\n       The issuer of this certification does\
    \ not make any particular\n       assertion as to how well the certifier has checked\
    \ that the owner\n       of the key is in fact the person described by the User\
    \ ID.\n   0x11: Persona certification of a User ID and Public-Key packet.\n  \
    \     The issuer of this certification has not done any verification of\n    \
    \   the claim that the owner of this key is the User ID specified.\n   0x12: Casual\
    \ certification of a User ID and Public-Key packet.\n       The issuer of this\
    \ certification has done some casual\n       verification of the claim of identity.\n\
    \   0x13: Positive certification of a User ID and Public-Key packet.\n       The\
    \ issuer of this certification has done substantial\n       verification of the\
    \ claim of identity.\n       Most OpenPGP implementations make their \"key signatures\"\
    \ as 0x10\n       certifications.  Some implementations can issue 0x11-0x13\n\
    \       certifications, but few differentiate between the types.\n   0x18: Subkey\
    \ Binding Signature\n       This signature is a statement by the top-level signing\
    \ key that\n       indicates that it owns the subkey.  This signature is calculated\n\
    \       directly on the primary key and subkey, and not on any User ID or\n  \
    \     other packets.  A signature that binds a signing subkey MUST have\n    \
    \   an Embedded Signature subpacket in this binding signature that\n       contains\
    \ a 0x19 signature made by the signing subkey on the\n       primary key and subkey.\n\
    \   0x19: Primary Key Binding Signature\n       This signature is a statement\
    \ by a signing subkey, indicating\n       that it is owned by the primary key\
    \ and subkey.  This signature\n       is calculated the same way as a 0x18 signature:\
    \ directly on the\n       primary key and subkey, and not on any User ID or other\
    \ packets.\n   0x1F: Signature directly on a key\n       This signature is calculated\
    \ directly on a key.  It binds the\n       information in the Signature subpackets\
    \ to the key, and is\n       appropriate to be used for subpackets that provide\
    \ information\n       about the key, such as the Revocation Key subpacket.  It\
    \ is also\n       appropriate for statements that non-self certifiers want to\
    \ make\n       about the key itself, rather than the binding between a key and\
    \ a\n       name.\n   0x20: Key revocation signature\n       The signature is\
    \ calculated directly on the key being revoked.  A\n       revoked key is not\
    \ to be used.  Only revocation signatures by the\n       key being revoked, or\
    \ by an authorized revocation key, should be\n       considered valid revocation\
    \ signatures.\n   0x28: Subkey revocation signature\n       The signature is calculated\
    \ directly on the subkey being revoked.\n       A revoked subkey is not to be\
    \ used.  Only revocation signatures\n       by the top-level signature key that\
    \ is bound to this subkey, or\n       by an authorized revocation key, should\
    \ be considered valid\n       revocation signatures.\n   0x30: Certification revocation\
    \ signature\n       This signature revokes an earlier User ID certification signature\n\
    \       (signature class 0x10 through 0x13) or direct-key signature\n       (0x1F).\
    \  It should be issued by the same key that issued the\n       revoked signature\
    \ or an authorized revocation key.  The signature\n       is computed over the\
    \ same data as the certificate that it\n       revokes, and should have a later\
    \ creation date than that\n       certificate.\n   0x40: Timestamp signature.\n\
    \       This signature is only meaningful for the timestamp contained in\n   \
    \    it.\n   0x50: Third-Party Confirmation signature.\n       This signature\
    \ is a signature over some other OpenPGP Signature\n       packet(s).  It is analogous\
    \ to a notary seal on the signed data.\n       A third-party signature SHOULD\
    \ include Signature Target\n       subpacket(s) to give easy identification. \
    \ Note that we really do\n       mean SHOULD.  There are plausible uses for this\
    \ (such as a blind\n       party that only sees the signature, not the key or\
    \ source\n       document) that cannot include a target subpacket.\n"
- title: 5.2.2.  Version 3 Signature Packet Format
  contents:
  - "5.2.2.  Version 3 Signature Packet Format\n   The body of a version 3 Signature\
    \ Packet contains:\n     - One-octet version number (3).\n     - One-octet length\
    \ of following hashed material.  MUST be 5.\n         - One-octet signature type.\n\
    \         - Four-octet creation time.\n     - Eight-octet Key ID of signer.\n\
    \     - One-octet public-key algorithm.\n     - One-octet hash algorithm.\n  \
    \   - Two-octet field holding left 16 bits of signed hash value.\n     - One or\
    \ more multiprecision integers comprising the signature.\n       This portion\
    \ is algorithm specific, as described below.\n   The concatenation of the data\
    \ to be signed, the signature type, and\n   creation time from the Signature packet\
    \ (5 additional octets) is\n   hashed.  The resulting hash value is used in the\
    \ signature algorithm.\n   The high 16 bits (first two octets) of the hash are\
    \ included in the\n   Signature packet to provide a quick test to reject some\
    \ invalid\n   signatures.\n   Algorithm-Specific Fields for RSA signatures:\n\
    \     - multiprecision integer (MPI) of RSA signature value m**d mod n.\n   Algorithm-Specific\
    \ Fields for DSA signatures:\n     - MPI of DSA value r.\n     - MPI of DSA value\
    \ s.\n   The signature calculation is based on a hash of the signed data, as\n\
    \   described above.  The details of the calculation are different for\n   DSA\
    \ signatures than for RSA signatures.\n   With RSA signatures, the hash value\
    \ is encoded using PKCS#1 encoding\n   type EMSA-PKCS1-v1_5 as described in Section\
    \ 9.2 of RFC 3447.  This\n   requires inserting the hash value as an octet string\
    \ into an ASN.1\n   structure.  The object identifier for the type of hash being\
    \ used is\n   included in the structure.  The hexadecimal representations for\
    \ the\n   currently defined hash algorithms are as follows:\n     - MD5:     \
    \   0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x02, 0x05\n     - RIPEMD-160: 0x2B, 0x24,\
    \ 0x03, 0x02, 0x01\n     - SHA-1:      0x2B, 0x0E, 0x03, 0x02, 0x1A\n     - SHA224:\
    \     0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x04\n     - SHA256:   \
    \  0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x01\n     - SHA384:     0x60,\
    \ 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x02\n     - SHA512:     0x60, 0x86,\
    \ 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x03\n   The ASN.1 Object Identifiers (OIDs)\
    \ are as follows:\n     - MD5:        1.2.840.113549.2.5\n     - RIPEMD-160: 1.3.36.3.2.1\n\
    \     - SHA-1:      1.3.14.3.2.26\n     - SHA224:     2.16.840.1.101.3.4.2.4\n\
    \     - SHA256:     2.16.840.1.101.3.4.2.1\n     - SHA384:     2.16.840.1.101.3.4.2.2\n\
    \     - SHA512:     2.16.840.1.101.3.4.2.3\n   The full hash prefixes for these\
    \ are as follows:\n       MD5:        0x30, 0x20, 0x30, 0x0C, 0x06, 0x08, 0x2A,\
    \ 0x86,\n                   0x48, 0x86, 0xF7, 0x0D, 0x02, 0x05, 0x05, 0x00,\n\
    \                   0x04, 0x10\n       RIPEMD-160: 0x30, 0x21, 0x30, 0x09, 0x06,\
    \ 0x05, 0x2B, 0x24,\n                   0x03, 0x02, 0x01, 0x05, 0x00, 0x04, 0x14\n\
    \       SHA-1:      0x30, 0x21, 0x30, 0x09, 0x06, 0x05, 0x2b, 0x0E,\n        \
    \           0x03, 0x02, 0x1A, 0x05, 0x00, 0x04, 0x14\n       SHA224:     0x30,\
    \ 0x31, 0x30, 0x0d, 0x06, 0x09, 0x60, 0x86,\n                   0x48, 0x01, 0x65,\
    \ 0x03, 0x04, 0x02, 0x04, 0x05,\n                   0x00, 0x04, 0x1C\n       SHA256:\
    \     0x30, 0x31, 0x30, 0x0d, 0x06, 0x09, 0x60, 0x86,\n                   0x48,\
    \ 0x01, 0x65, 0x03, 0x04, 0x02, 0x01, 0x05,\n                   0x00, 0x04, 0x20\n\
    \       SHA384:     0x30, 0x41, 0x30, 0x0d, 0x06, 0x09, 0x60, 0x86,\n        \
    \           0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x02, 0x05,\n                \
    \   0x00, 0x04, 0x30\n       SHA512:     0x30, 0x51, 0x30, 0x0d, 0x06, 0x09, 0x60,\
    \ 0x86,\n                   0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x03, 0x05,\n\
    \                   0x00, 0x04, 0x40\n   DSA signatures MUST use hashes that are\
    \ equal in size to the number\n   of bits of q, the group generated by the DSA\
    \ key's generator value.\n   If the output size of the chosen hash is larger than\
    \ the number of\n   bits of q, the hash result is truncated to fit by taking the\
    \ number\n   of leftmost bits equal to the number of bits of q.  This (possibly\n\
    \   truncated) hash function result is treated as a number and used\n   directly\
    \ in the DSA signature algorithm.\n"
- title: 5.2.3.  Version 4 Signature Packet Format
  contents:
  - "5.2.3.  Version 4 Signature Packet Format\n   The body of a version 4 Signature\
    \ packet contains:\n     - One-octet version number (4).\n     - One-octet signature\
    \ type.\n     - One-octet public-key algorithm.\n     - One-octet hash algorithm.\n\
    \     - Two-octet scalar octet count for following hashed subpacket data.\n  \
    \     Note that this is the length in octets of all of the hashed\n       subpackets;\
    \ a pointer incremented by this number will skip over\n       the hashed subpackets.\n\
    \     - Hashed subpacket data set (zero or more subpackets).\n     - Two-octet\
    \ scalar octet count for the following unhashed subpacket\n       data.  Note\
    \ that this is the length in octets of all of the\n       unhashed subpackets;\
    \ a pointer incremented by this number will\n       skip over the unhashed subpackets.\n\
    \     - Unhashed subpacket data set (zero or more subpackets).\n     - Two-octet\
    \ field holding the left 16 bits of the signed hash\n       value.\n     - One\
    \ or more multiprecision integers comprising the signature.\n       This portion\
    \ is algorithm specific, as described above.\n   The concatenation of the data\
    \ being signed and the signature data\n   from the version number through the\
    \ hashed subpacket data (inclusive)\n   is hashed.  The resulting hash value is\
    \ what is signed.  The left 16\n   bits of the hash are included in the Signature\
    \ packet to provide a\n   quick test to reject some invalid signatures.\n   There\
    \ are two fields consisting of Signature subpackets.  The first\n   field is hashed\
    \ with the rest of the signature data, while the second\n   is unhashed.  The\
    \ second set of subpackets is not cryptographically\n   protected by the signature\
    \ and should include only advisory\n   information.\n   The algorithms for converting\
    \ the hash function result to a signature\n   are described in a section below.\n"
- title: 5.2.3.1.  Signature Subpacket Specification
  contents:
  - "5.2.3.1.  Signature Subpacket Specification\n   A subpacket data set consists\
    \ of zero or more Signature subpackets.\n   In Signature packets, the subpacket\
    \ data set is preceded by a two-\n   octet scalar count of the length in octets\
    \ of all the subpackets.  A\n   pointer incremented by this number will skip over\
    \ the subpacket data\n   set.\n   Each subpacket consists of a subpacket header\
    \ and a body.  The header\n   consists of:\n     - the subpacket length (1, 2,\
    \ or 5 octets),\n     - the subpacket type (1 octet),\n   and is followed by the\
    \ subpacket-specific data.\n   The length includes the type octet but not this\
    \ length.  Its format\n   is similar to the \"new\" format packet header lengths,\
    \ but cannot have\n   Partial Body Lengths.  That is:\n       if the 1st octet\
    \ <  192, then\n           lengthOfLength = 1\n           subpacketLen = 1st_octet\n\
    \       if the 1st octet >= 192 and < 255, then\n           lengthOfLength = 2\n\
    \           subpacketLen = ((1st_octet - 192) << 8) + (2nd_octet) + 192\n    \
    \   if the 1st octet = 255, then\n           lengthOfLength = 5\n           subpacket\
    \ length = [four-octet scalar starting at 2nd_octet]\n   The value of the subpacket\
    \ type octet may be:\n            0 = Reserved\n            1 = Reserved\n   \
    \         2 = Signature Creation Time\n            3 = Signature Expiration Time\n\
    \            4 = Exportable Certification\n            5 = Trust Signature\n \
    \           6 = Regular Expression\n            7 = Revocable\n            8 =\
    \ Reserved\n            9 = Key Expiration Time\n           10 = Placeholder for\
    \ backward compatibility\n           11 = Preferred Symmetric Algorithms\n   \
    \        12 = Revocation Key\n           13 = Reserved\n           14 = Reserved\n\
    \           15 = Reserved\n           16 = Issuer\n           17 = Reserved\n\
    \           18 = Reserved\n           19 = Reserved\n           20 = Notation\
    \ Data\n           21 = Preferred Hash Algorithms\n           22 = Preferred Compression\
    \ Algorithms\n           23 = Key Server Preferences\n           24 = Preferred\
    \ Key Server\n           25 = Primary User ID\n           26 = Policy URI\n  \
    \         27 = Key Flags\n           28 = Signer's User ID\n           29 = Reason\
    \ for Revocation\n           30 = Features\n           31 = Signature Target\n\
    \           32 = Embedded Signature\n   100 To 110 = Private or experimental\n\
    \   An implementation SHOULD ignore any subpacket of a type that it does\n   not\
    \ recognize.\n   Bit 7 of the subpacket type is the \"critical\" bit.  If set,\
    \ it\n   denotes that the subpacket is one that is critical for the evaluator\n\
    \   of the signature to recognize.  If a subpacket is encountered that is\n  \
    \ marked critical but is unknown to the evaluating software, the\n   evaluator\
    \ SHOULD consider the signature to be in error.\n   An evaluator may \"recognize\"\
    \ a subpacket, but not implement it.  The\n   purpose of the critical bit is to\
    \ allow the signer to tell an\n   evaluator that it would prefer a new, unknown\
    \ feature to generate an\n   error than be ignored.\n   Implementations SHOULD\
    \ implement the three preferred algorithm\n   subpackets (11, 21, and 22), as\
    \ well as the \"Reason for Revocation\"\n   subpacket.  Note, however, that if\
    \ an implementation chooses not to\n   implement some of the preferences, it is\
    \ required to behave in a\n   polite manner to respect the wishes of those users\
    \ who do implement\n   these preferences.\n"
- title: 5.2.3.2.  Signature Subpacket Types
  contents:
  - "5.2.3.2.  Signature Subpacket Types\n   A number of subpackets are currently\
    \ defined.  Some subpackets apply\n   to the signature itself and some are attributes\
    \ of the key.\n   Subpackets that are found on a self-signature are placed on\
    \ a\n   certification made by the key itself.  Note that a key may have more\n\
    \   than one User ID, and thus may have more than one self-signature, and\n  \
    \ differing subpackets.\n   A subpacket may be found either in the hashed or unhashed\
    \ subpacket\n   sections of a signature.  If a subpacket is not hashed, then the\n\
    \   information in it cannot be considered definitive because it is not\n   part\
    \ of the signature proper.\n"
- title: 5.2.3.3.  Notes on Self-Signatures
  contents:
  - "5.2.3.3.  Notes on Self-Signatures\n   A self-signature is a binding signature\
    \ made by the key to which the\n   signature refers.  There are three types of\
    \ self-signatures, the\n   certification signatures (types 0x10-0x13), the direct-key\
    \ signature\n   (type 0x1F), and the subkey binding signature (type 0x18).  For\n\
    \   certification self-signatures, each User ID may have a self-\n   signature,\
    \ and thus different subpackets in those self-signatures.\n   For subkey binding\
    \ signatures, each subkey in fact has a self-\n   signature.  Subpackets that\
    \ appear in a certification self-signature\n   apply to the user name, and subpackets\
    \ that appear in the subkey\n   self-signature apply to the subkey.  Lastly, subpackets\
    \ on the\n   direct-key signature apply to the entire key.\n   Implementing software\
    \ should interpret a self-signature's preference\n   subpackets as narrowly as\
    \ possible.  For example, suppose a key has\n   two user names, Alice and Bob.\
    \  Suppose that Alice prefers the\n   symmetric algorithm CAST5, and Bob prefers\
    \ IDEA or TripleDES.  If the\n   software locates this key via Alice's name, then\
    \ the preferred\n   algorithm is CAST5; if software locates the key via Bob's\
    \ name, then\n   the preferred algorithm is IDEA.  If the key is located by Key\
    \ ID,\n   the algorithm of the primary User ID of the key provides the\n   preferred\
    \ symmetric algorithm.\n   Revoking a self-signature or allowing it to expire\
    \ has a semantic\n   meaning that varies with the signature type.  Revoking the\
    \ self-\n   signature on a User ID effectively retires that user name.  The\n\
    \   self-signature is a statement, \"My name X is tied to my signing key\n   K\"\
    \ and is corroborated by other users' certifications.  If another\n   user revokes\
    \ their certification, they are effectively saying that\n   they no longer believe\
    \ that name and that key are tied together.\n   Similarly, if the users themselves\
    \ revoke their self-signature, then\n   the users no longer go by that name, no\
    \ longer have that email\n   address, etc.  Revoking a binding signature effectively\
    \ retires that\n   subkey.  Revoking a direct-key signature cancels that signature.\n\
    \   Please see the \"Reason for Revocation\" subpacket (Section 5.2.3.23)\n  \
    \ for more relevant detail.\n   Since a self-signature contains important information\
    \ about the key's\n   use, an implementation SHOULD allow the user to rewrite\
    \ the self-\n   signature, and important information in it, such as preferences\
    \ and\n   key expiration.\n   It is good practice to verify that a self-signature\
    \ imported into an\n   implementation doesn't advertise features that the implementation\n\
    \   doesn't support, rewriting the signature as appropriate.\n   An implementation\
    \ that encounters multiple self-signatures on the\n   same object may resolve\
    \ the ambiguity in any way it sees fit, but it\n   is RECOMMENDED that priority\
    \ be given to the most recent self-\n   signature.\n"
- title: 5.2.3.4.  Signature Creation Time
  contents:
  - "5.2.3.4.  Signature Creation Time\n   (4-octet time field)\n   The time the signature\
    \ was made.\n   MUST be present in the hashed area.\n"
- title: 5.2.3.5.  Issuer
  contents:
  - "5.2.3.5.  Issuer\n   (8-octet Key ID)\n   The OpenPGP Key ID of the key issuing\
    \ the signature.\n"
- title: 5.2.3.6.  Key Expiration Time
  contents:
  - "5.2.3.6.  Key Expiration Time\n   (4-octet time field)\n   The validity period\
    \ of the key.  This is the number of seconds after\n   the key creation time that\
    \ the key expires.  If this is not present\n   or has a value of zero, the key\
    \ never expires.  This is found only on\n   a self-signature.\n"
- title: 5.2.3.7.  Preferred Symmetric Algorithms
  contents:
  - "5.2.3.7.  Preferred Symmetric Algorithms\n   (array of one-octet values)\n  \
    \ Symmetric algorithm numbers that indicate which algorithms the key\n   holder\
    \ prefers to use.  The subpacket body is an ordered list of\n   octets with the\
    \ most preferred listed first.  It is assumed that only\n   algorithms listed\
    \ are supported by the recipient's software.\n   Algorithm numbers are in Section\
    \ 9.  This is only found on a self-\n   signature.\n"
- title: 5.2.3.8.  Preferred Hash Algorithms
  contents:
  - "5.2.3.8.  Preferred Hash Algorithms\n   (array of one-octet values)\n   Message\
    \ digest algorithm numbers that indicate which algorithms the\n   key holder prefers\
    \ to receive.  Like the preferred symmetric\n   algorithms, the list is ordered.\
    \  Algorithm numbers are in Section 9.\n   This is only found on a self-signature.\n"
- title: 5.2.3.9.  Preferred Compression Algorithms
  contents:
  - "5.2.3.9.  Preferred Compression Algorithms\n   (array of one-octet values)\n\
    \   Compression algorithm numbers that indicate which algorithms the key\n   holder\
    \ prefers to use.  Like the preferred symmetric algorithms, the\n   list is ordered.\
    \  Algorithm numbers are in Section 9.  If this\n   subpacket is not included,\
    \ ZIP is preferred.  A zero denotes that\n   uncompressed data is preferred; the\
    \ key holder's software might have\n   no compression software in that implementation.\
    \  This is only found\n   on a self-signature.\n"
- title: 5.2.3.10.  Signature Expiration Time
  contents:
  - "5.2.3.10.  Signature Expiration Time\n   (4-octet time field)\n   The validity\
    \ period of the signature.  This is the number of seconds\n   after the signature\
    \ creation time that the signature expires.  If\n   this is not present or has\
    \ a value of zero, it never expires.\n"
- title: 5.2.3.11.  Exportable Certification
  contents:
  - "5.2.3.11.  Exportable Certification\n   (1 octet of exportability, 0 for not,\
    \ 1 for exportable)\n   This subpacket denotes whether a certification signature\
    \ is\n   \"exportable\", to be used by other users than the signature's issuer.\n\
    \   The packet body contains a Boolean flag indicating whether the\n   signature\
    \ is exportable.  If this packet is not present, the\n   certification is exportable;\
    \ it is equivalent to a flag containing a\n   1.\n   Non-exportable, or \"local\"\
    , certifications are signatures made by a\n   user to mark a key as valid within\
    \ that user's implementation only.\n   Thus, when an implementation prepares a\
    \ user's copy of a key for\n   transport to another user (this is the process\
    \ of \"exporting\" the\n   key), any local certification signatures are deleted\
    \ from the key.\n   The receiver of a transported key \"imports\" it, and likewise\
    \ trims\n   any local certifications.  In normal operation, there won't be any,\n\
    \   assuming the import is performed on an exported key.  However, there\n   are\
    \ instances where this can reasonably happen.  For example, if an\n   implementation\
    \ allows keys to be imported from a key database in\n   addition to an exported\
    \ key, then this situation can arise.\n   Some implementations do not represent\
    \ the interest of a single user\n   (for example, a key server).  Such implementations\
    \ always trim local\n   certifications from any key they handle.\n"
- title: 5.2.3.12.  Revocable
  contents:
  - "5.2.3.12.  Revocable\n   (1 octet of revocability, 0 for not, 1 for revocable)\n\
    \   Signature's revocability status.  The packet body contains a Boolean\n   flag\
    \ indicating whether the signature is revocable.  Signatures that\n   are not\
    \ revocable have any later revocation signatures ignored.  They\n   represent\
    \ a commitment by the signer that he cannot revoke his\n   signature for the life\
    \ of his key.  If this packet is not present,\n   the signature is revocable.\n"
- title: 5.2.3.13.  Trust Signature
  contents:
  - "5.2.3.13.  Trust Signature\n   (1 octet \"level\" (depth), 1 octet of trust amount)\n\
    \   Signer asserts that the key is not only valid but also trustworthy at\n  \
    \ the specified level.  Level 0 has the same meaning as an ordinary\n   validity\
    \ signature.  Level 1 means that the signed key is asserted to\n   be a valid\
    \ trusted introducer, with the 2nd octet of the body\n   specifying the degree\
    \ of trust.  Level 2 means that the signed key is\n   asserted to be trusted to\
    \ issue level 1 trust signatures, i.e., that\n   it is a \"meta introducer\".\
    \  Generally, a level n trust signature\n   asserts that a key is trusted to issue\
    \ level n-1 trust signatures.\n   The trust amount is in a range from 0-255, interpreted\
    \ such that\n   values less than 120 indicate partial trust and values of 120\
    \ or\n   greater indicate complete trust.  Implementations SHOULD emit values\n\
    \   of 60 for partial trust and 120 for complete trust.\n"
- title: 5.2.3.14.  Regular Expression
  contents:
  - "5.2.3.14.  Regular Expression\n   (null-terminated regular expression)\n   Used\
    \ in conjunction with trust Signature packets (of level > 0) to\n   limit the\
    \ scope of trust that is extended.  Only signatures by the\n   target key on User\
    \ IDs that match the regular expression in the body\n   of this packet have trust\
    \ extended by the trust Signature subpacket.\n   The regular expression uses the\
    \ same syntax as the Henry Spencer's\n   \"almost public domain\" regular expression\
    \ [REGEX] package.  A\n   description of the syntax is found in Section 8 below.\n"
- title: 5.2.3.15.  Revocation Key
  contents:
  - "5.2.3.15.  Revocation Key\n   (1 octet of class, 1 octet of public-key algorithm\
    \ ID, 20 octets of\n   fingerprint)\n   Authorizes the specified key to issue\
    \ revocation signatures for this\n   key.  Class octet must have bit 0x80 set.\
    \  If the bit 0x40 is set,\n   then this means that the revocation information\
    \ is sensitive.  Other\n   bits are for future expansion to other kinds of authorizations.\
    \  This\n   is found on a self-signature.\n   If the \"sensitive\" flag is set,\
    \ the keyholder feels this subpacket\n   contains private trust information that\
    \ describes a real-world\n   sensitive relationship.  If this flag is set, implementations\
    \ SHOULD\n   NOT export this signature to other users except in cases where the\n\
    \   data needs to be available: when the signature is being sent to the\n   designated\
    \ revoker, or when it is accompanied by a revocation\n   signature from that revoker.\
    \  Note that it may be appropriate to\n   isolate this subpacket within a separate\
    \ signature so that it is not\n   combined with other subpackets that need to\
    \ be exported.\n"
- title: 5.2.3.16.  Notation Data
  contents:
  - "5.2.3.16.  Notation Data\n       (4 octets of flags, 2 octets of name length\
    \ (M),\n                           2 octets of value length (N),\n           \
    \                M octets of name data,\n                           N octets of\
    \ value data)\n   This subpacket describes a \"notation\" on the signature that\
    \ the\n   issuer wishes to make.  The notation has a name and a value, each of\n\
    \   which are strings of octets.  There may be more than one notation in\n   a\
    \ signature.  Notations can be used for any extension the issuer of\n   the signature\
    \ cares to make.  The \"flags\" field holds four octets of\n   flags.\n   All\
    \ undefined flags MUST be zero.  Defined flags are as follows:\n       First octet:\
    \ 0x80 = human-readable.  This note value is text.\n       Other octets: none.\n\
    \   Notation names are arbitrary strings encoded in UTF-8.  They reside\n   in\
    \ two namespaces: The IETF namespace and the user namespace.\n   The IETF namespace\
    \ is registered with IANA.  These names MUST NOT\n   contain the \"@\" character\
    \ (0x40).  This is a tag for the user\n   namespace.\n   Names in the user namespace\
    \ consist of a UTF-8 string tag followed by\n   \"@\" followed by a DNS domain\
    \ name.  Note that the tag MUST NOT\n   contain an \"@\" character.  For example,\
    \ the \"sample\" tag used by\n   Example Corporation could be \"sample@example.com\"\
    .\n   Names in a user space are owned and controlled by the owners of that\n \
    \  domain.  Obviously, it's bad form to create a new name in a DNS space\n   that\
    \ you don't own.\n   Since the user namespace is in the form of an email address,\n\
    \   implementers MAY wish to arrange for that address to reach a person\n   who\
    \ can be consulted about the use of the named tag.  Note that due\n   to UTF-8\
    \ encoding, not all valid user space name tags are valid email\n   addresses.\n\
    \   If there is a critical notation, the criticality applies to that\n   specific\
    \ notation and not to notations in general.\n"
- title: 5.2.3.17.  Key Server Preferences
  contents:
  - "5.2.3.17.  Key Server Preferences\n   (N octets of flags)\n   This is a list\
    \ of one-bit flags that indicate preferences that the\n   key holder has about\
    \ how the key is handled on a key server.  All\n   undefined flags MUST be zero.\n\
    \   First octet: 0x80 = No-modify\n       the key holder requests that this key\
    \ only be modified or updated\n       by the key holder or an administrator of\
    \ the key server.\n   This is found only on a self-signature.\n"
- title: 5.2.3.18.  Preferred Key Server
  contents:
  - "5.2.3.18.  Preferred Key Server\n   (String)\n   This is a URI of a key server\
    \ that the key holder prefers be used for\n   updates.  Note that keys with multiple\
    \ User IDs can have a preferred\n   key server for each User ID.  Note also that\
    \ since this is a URI, the\n   key server can actually be a copy of the key retrieved\
    \ by ftp, http,\n   finger, etc.\n"
- title: 5.2.3.19.  Primary User ID
  contents:
  - "5.2.3.19.  Primary User ID\n   (1 octet, Boolean)\n   This is a flag in a User\
    \ ID's self-signature that states whether this\n   User ID is the main User ID\
    \ for this key.  It is reasonable for an\n   implementation to resolve ambiguities\
    \ in preferences, etc. by\n   referring to the primary User ID.  If this flag\
    \ is absent, its value\n   is zero.  If more than one User ID in a key is marked\
    \ as primary, the\n   implementation may resolve the ambiguity in any way it sees\
    \ fit, but\n   it is RECOMMENDED that priority be given to the User ID with the\
    \ most\n   recent self-signature.\n   When appearing on a self-signature on a\
    \ User ID packet, this\n   subpacket applies only to User ID packets.  When appearing\
    \ on a\n   self-signature on a User Attribute packet, this subpacket applies\n\
    \   only to User Attribute packets.  That is to say, there are two\n   different\
    \ and independent \"primaries\" -- one for User IDs, and one\n   for User Attributes.\n"
- title: 5.2.3.20.  Policy URI
  contents:
  - "5.2.3.20.  Policy URI\n   (String)\n   This subpacket contains a URI of a document\
    \ that describes the policy\n   under which the signature was issued.\n"
- title: 5.2.3.21.  Key Flags
  contents:
  - "5.2.3.21.  Key Flags\n   (N octets of flags)\n   This subpacket contains a list\
    \ of binary flags that hold information\n   about a key.  It is a string of octets,\
    \ and an implementation MUST\n   NOT assume a fixed size.  This is so it can grow\
    \ over time.  If a\n   list is shorter than an implementation expects, the unstated\
    \ flags\n   are considered to be zero.  The defined flags are as follows:\n  \
    \     First octet:\n       0x01 - This key may be used to certify other keys.\n\
    \       0x02 - This key may be used to sign data.\n       0x04 - This key may\
    \ be used to encrypt communications.\n       0x08 - This key may be used to encrypt\
    \ storage.\n       0x10 - The private component of this key may have been split\n\
    \              by a secret-sharing mechanism.\n       0x20 - This key may be used\
    \ for authentication.\n       0x80 - The private component of this key may be\
    \ in the\n              possession of more than one person.\n   Usage notes:\n\
    \   The flags in this packet may appear in self-signatures or in\n   certification\
    \ signatures.  They mean different things depending on\n   who is making the statement\
    \ -- for example, a certification signature\n   that has the \"sign data\" flag\
    \ is stating that the certification is\n   for that use.  On the other hand, the\
    \ \"communications encryption\"\n   flag in a self-signature is stating a preference\
    \ that a given key be\n   used for communications.  Note however, that it is a\
    \ thorny issue to\n   determine what is \"communications\" and what is \"storage\"\
    .  This\n   decision is left wholly up to the implementation; the authors of this\n\
    \   document do not claim any special wisdom on the issue and realize\n   that\
    \ accepted opinion may change.\n   The \"split key\" (0x10) and \"group key\"\
    \ (0x80) flags are placed on a\n   self-signature only; they are meaningless on\
    \ a certification\n   signature.  They SHOULD be placed only on a direct-key signature\n\
    \   (type 0x1F) or a subkey signature (type 0x18), one that refers to the\n  \
    \ key the flag applies to.\n"
- title: 5.2.3.22.  Signer's User ID
  contents:
  - "5.2.3.22.  Signer's User ID\n   (String)\n   This subpacket allows a keyholder\
    \ to state which User ID is\n   responsible for the signing.  Many keyholders\
    \ use a single key for\n   different purposes, such as business communications\
    \ as well as\n   personal communications.  This subpacket allows such a keyholder\
    \ to\n   state which of their roles is making a signature.\n   This subpacket\
    \ is not appropriate to use to refer to a User Attribute\n   packet.\n"
- title: 5.2.3.23.  Reason for Revocation
  contents:
  - "5.2.3.23.  Reason for Revocation\n   (1 octet of revocation code, N octets of\
    \ reason string)\n   This subpacket is used only in key revocation and certification\n\
    \   revocation signatures.  It describes the reason why the key or\n   certificate\
    \ was revoked.\n   The first octet contains a machine-readable code that denotes\
    \ the\n   reason for the revocation:\n        0  - No reason specified (key revocations\
    \ or cert revocations)\n        1  - Key is superseded (key revocations)\n   \
    \     2  - Key material has been compromised (key revocations)\n        3  - Key\
    \ is retired and no longer used (key revocations)\n        32 - User ID information\
    \ is no longer valid (cert revocations)\n   100-110 - Private Use\n   Following\
    \ the revocation code is a string of octets that gives\n   information about the\
    \ Reason for Revocation in human-readable form\n   (UTF-8).  The string may be\
    \ null, that is, of zero length.  The\n   length of the subpacket is the length\
    \ of the reason string plus one.\n   An implementation SHOULD implement this subpacket,\
    \ include it in all\n   revocation signatures, and interpret revocations appropriately.\n\
    \   There are important semantic differences between the reasons, and\n   there\
    \ are thus important reasons for revoking signatures.\n   If a key has been revoked\
    \ because of a compromise, all signatures\n   created by that key are suspect.\
    \  However, if it was merely\n   superseded or retired, old signatures are still\
    \ valid.  If the\n   revoked signature is the self-signature for certifying a\
    \ User ID, a\n   revocation denotes that that user name is no longer in use. \
    \ Such a\n   revocation SHOULD include a 0x20 code.\n   Note that any signature\
    \ may be revoked, including a certification on\n   some other person's key.  There\
    \ are many good reasons for revoking a\n   certification signature, such as the\
    \ case where the keyholder leaves\n   the employ of a business with an email address.\
    \  A revoked\n   certification is no longer a part of validity calculations.\n"
- title: 5.2.3.24.  Features
  contents:
  - "5.2.3.24.  Features\n   (N octets of flags)\n   The Features subpacket denotes\
    \ which advanced OpenPGP features a\n   user's implementation supports.  This\
    \ is so that as features are\n   added to OpenPGP that cannot be backwards-compatible,\
    \ a user can\n   state that they can use that feature.  The flags are single bits\
    \ that\n   indicate that a given feature is supported.\n   This subpacket is similar\
    \ to a preferences subpacket, and only\n   appears in a self-signature.\n   An\
    \ implementation SHOULD NOT use a feature listed when sending to a\n   user who\
    \ does not state that they can use it.\n   Defined features are as follows:\n\
    \       First octet:\n       0x01 - Modification Detection (packets 18 and 19)\n\
    \   If an implementation implements any of the defined features, it\n   SHOULD\
    \ implement the Features subpacket, too.\n   An implementation may freely infer\
    \ features from other suitable\n   implementation-dependent mechanisms.\n"
- title: 5.2.3.25.  Signature Target
  contents:
  - "5.2.3.25.  Signature Target\n   (1 octet public-key algorithm, 1 octet hash algorithm,\
    \ N octets hash)\n   This subpacket identifies a specific target signature to\
    \ which a\n   signature refers.  For revocation signatures, this subpacket\n \
    \  provides explicit designation of which signature is being revoked.\n   For\
    \ a third-party or timestamp signature, this designates what\n   signature is\
    \ signed.  All arguments are an identifier of that target\n   signature.\n   The\
    \ N octets of hash data MUST be the size of the hash of the\n   signature.  For\
    \ example, a target signature with a SHA-1 hash MUST\n   have 20 octets of hash\
    \ data.\n"
- title: 5.2.3.26.  Embedded Signature
  contents:
  - "5.2.3.26.  Embedded Signature\n   (1 signature packet body)\n   This subpacket\
    \ contains a complete Signature packet body as\n   specified in Section 5.2 above.\
    \  It is useful when one signature\n   needs to refer to, or be incorporated in,\
    \ another signature.\n"
- title: 5.2.4.  Computing Signatures
  contents:
  - "5.2.4.  Computing Signatures\n   All signatures are formed by producing a hash\
    \ over the signature\n   data, and then using the resulting hash in the signature\
    \ algorithm.\n   For binary document signatures (type 0x00), the document data\
    \ is\n   hashed directly.  For text document signatures (type 0x01), the\n   document\
    \ is canonicalized by converting line endings to <CR><LF>,\n   and the resulting\
    \ data is hashed.\n   When a signature is made over a key, the hash data starts\
    \ with the\n   octet 0x99, followed by a two-octet length of the key, and then\
    \ body\n   of the key packet.  (Note that this is an old-style packet header for\n\
    \   a key packet with two-octet length.)  A subkey binding signature\n   (type\
    \ 0x18) or primary key binding signature (type 0x19) then hashes\n   the subkey\
    \ using the same format as the main key (also using 0x99 as\n   the first octet).\
    \  Key revocation signatures (types 0x20 and 0x28)\n   hash only the key being\
    \ revoked.\n   A certification signature (type 0x10 through 0x13) hashes the User\n\
    \   ID being bound to the key into the hash context after the above\n   data.\
    \  A V3 certification hashes the contents of the User ID or\n   attribute packet\
    \ packet, without any header.  A V4 certification\n   hashes the constant 0xB4\
    \ for User ID certifications or the constant\n   0xD1 for User Attribute certifications,\
    \ followed by a four-octet\n   number giving the length of the User ID or User\
    \ Attribute data, and\n   then the User ID or User Attribute data.\n   When a\
    \ signature is made over a Signature packet (type 0x50), the\n   hash data starts\
    \ with the octet 0x88, followed by the four-octet\n   length of the signature,\
    \ and then the body of the Signature packet.\n   (Note that this is an old-style\
    \ packet header for a Signature packet\n   with the length-of-length set to zero.)\
    \  The unhashed subpacket data\n   of the Signature packet being hashed is not\
    \ included in the hash, and\n   the unhashed subpacket data length value is set\
    \ to zero.\n   Once the data body is hashed, then a trailer is hashed.  A V3\n\
    \   signature hashes five octets of the packet body, starting from the\n   signature\
    \ type field.  This data is the signature type, followed by\n   the four-octet\
    \ signature time.  A V4 signature hashes the packet body\n   starting from its\
    \ first field, the version number, through the end\n   of the hashed subpacket\
    \ data.  Thus, the fields hashed are the\n   signature version, the signature\
    \ type, the public-key algorithm, the\n   hash algorithm, the hashed subpacket\
    \ length, and the hashed\n   subpacket body.\n   V4 signatures also hash in a\
    \ final trailer of six octets: the\n   version of the Signature packet, i.e.,\
    \ 0x04; 0xFF; and a four-octet,\n   big-endian number that is the length of the\
    \ hashed data from the\n   Signature packet (note that this number does not include\
    \ these final\n   six octets).\n   After all this has been hashed in a single\
    \ hash context, the\n   resulting hash field is used in the signature algorithm\
    \ and placed\n   at the end of the Signature packet.\n"
- title: 5.2.4.1.  Subpacket Hints
  contents:
  - "5.2.4.1.  Subpacket Hints\n   It is certainly possible for a signature to contain\
    \ conflicting\n   information in subpackets.  For example, a signature may contain\n\
    \   multiple copies of a preference or multiple expiration times.  In\n   most\
    \ cases, an implementation SHOULD use the last subpacket in the\n   signature,\
    \ but MAY use any conflict resolution scheme that makes\n   more sense.  Please\
    \ note that we are intentionally leaving conflict\n   resolution to the implementer;\
    \ most conflicts are simply syntax\n   errors, and the wishy-washy language here\
    \ allows a receiver to be\n   generous in what they accept, while putting pressure\
    \ on a creator to\n   be stingy in what they generate.\n   Some apparent conflicts\
    \ may actually make sense -- for example,\n   suppose a keyholder has a V3 key\
    \ and a V4 key that share the same\n   RSA key material.  Either of these keys\
    \ can verify a signature\n   created by the other, and it may be reasonable for\
    \ a signature to\n   contain an issuer subpacket for each key, as a way of explicitly\n\
    \   tying those keys to the signature.\n"
- title: 5.3.  Symmetric-Key Encrypted Session Key Packets (Tag 3)
  contents:
  - "5.3.  Symmetric-Key Encrypted Session Key Packets (Tag 3)\n   The Symmetric-Key\
    \ Encrypted Session Key packet holds the\n   symmetric-key encryption of a session\
    \ key used to encrypt a message.\n   Zero or more Public-Key Encrypted Session\
    \ Key packets and/or\n   Symmetric-Key Encrypted Session Key packets may precede\
    \ a\n   Symmetrically Encrypted Data packet that holds an encrypted message.\n\
    \   The message is encrypted with a session key, and the session key is\n   itself\
    \ encrypted and stored in the Encrypted Session Key packet or\n   the Symmetric-Key\
    \ Encrypted Session Key packet.\n   If the Symmetrically Encrypted Data packet\
    \ is preceded by one or\n   more Symmetric-Key Encrypted Session Key packets,\
    \ each specifies a\n   passphrase that may be used to decrypt the message.  This\
    \ allows a\n   message to be encrypted to a number of public keys, and also to\
    \ one\n   or more passphrases.  This packet type is new and is not generated\n\
    \   by PGP 2.x or PGP 5.0.\n   The body of this packet consists of:\n     - A\
    \ one-octet version number.  The only currently defined version\n       is 4.\n\
    \     - A one-octet number describing the symmetric algorithm used.\n     - A\
    \ string-to-key (S2K) specifier, length as defined above.\n     - Optionally,\
    \ the encrypted session key itself, which is decrypted\n       with the string-to-key\
    \ object.\n   If the encrypted session key is not present (which can be detected\n\
    \   on the basis of packet length and S2K specifier size), then the S2K\n   algorithm\
    \ applied to the passphrase produces the session key for\n   decrypting the file,\
    \ using the symmetric cipher algorithm from the\n   Symmetric-Key Encrypted Session\
    \ Key packet.\n   If the encrypted session key is present, the result of applying\
    \ the\n   S2K algorithm to the passphrase is used to decrypt just that\n   encrypted\
    \ session key field, using CFB mode with an IV of all zeros.\n   The decryption\
    \ result consists of a one-octet algorithm identifier\n   that specifies the symmetric-key\
    \ encryption algorithm used to\n   encrypt the following Symmetrically Encrypted\
    \ Data packet, followed\n   by the session key octets themselves.\n   Note: because\
    \ an all-zero IV is used for this decryption, the S2K\n   specifier MUST use a\
    \ salt value, either a Salted S2K or an\n   Iterated-Salted S2K.  The salt value\
    \ will ensure that the decryption\n   key is not repeated even if the passphrase\
    \ is reused.\n"
- title: 5.4.  One-Pass Signature Packets (Tag 4)
  contents:
  - "5.4.  One-Pass Signature Packets (Tag 4)\n   The One-Pass Signature packet precedes\
    \ the signed data and contains\n   enough information to allow the receiver to\
    \ begin calculating any\n   hashes needed to verify the signature.  It allows\
    \ the Signature\n   packet to be placed at the end of the message, so that the\
    \ signer\n   can compute the entire signed message in one pass.\n   A One-Pass\
    \ Signature does not interoperate with PGP 2.6.x or\n   earlier.\n   The body\
    \ of this packet consists of:\n     - A one-octet version number.  The current\
    \ version is 3.\n     - A one-octet signature type.  Signature types are described\
    \ in\n       Section 5.2.1.\n     - A one-octet number describing the hash algorithm\
    \ used.\n     - A one-octet number describing the public-key algorithm used.\n\
    \     - An eight-octet number holding the Key ID of the signing key.\n     - A\
    \ one-octet number holding a flag showing whether the signature\n       is nested.\
    \  A zero value indicates that the next packet is\n       another One-Pass Signature\
    \ packet that describes another\n       signature to be applied to the same message\
    \ data.\n   Note that if a message contains more than one one-pass signature,\n\
    \   then the Signature packets bracket the message; that is, the first\n   Signature\
    \ packet after the message corresponds to the last one-pass\n   packet and the\
    \ final Signature packet corresponds to the first\n   one-pass packet.\n"
- title: 5.5.  Key Material Packet
  contents:
  - "5.5.  Key Material Packet\n   A key material packet contains all the information\
    \ about a public or\n   private key.  There are four variants of this packet type,\
    \ and two\n   major versions.  Consequently, this section is complex.\n"
- title: 5.5.1.  Key Packet Variants
  contents:
  - '5.5.1.  Key Packet Variants

    '
- title: 5.5.1.1.  Public-Key Packet (Tag 6)
  contents:
  - "5.5.1.1.  Public-Key Packet (Tag 6)\n   A Public-Key packet starts a series of\
    \ packets that forms an OpenPGP\n   key (sometimes called an OpenPGP certificate).\n"
- title: 5.5.1.2.  Public-Subkey Packet (Tag 14)
  contents:
  - "5.5.1.2.  Public-Subkey Packet (Tag 14)\n   A Public-Subkey packet (tag 14) has\
    \ exactly the same format as a\n   Public-Key packet, but denotes a subkey.  One\
    \ or more subkeys may be\n   associated with a top-level key.  By convention,\
    \ the top-level key\n   provides signature services, and the subkeys provide encryption\n\
    \   services.\n   Note: in PGP 2.6.x, tag 14 was intended to indicate a comment\n\
    \   packet.  This tag was selected for reuse because no previous version\n   of\
    \ PGP ever emitted comment packets but they did properly ignore\n   them.  Public-Subkey\
    \ packets are ignored by PGP 2.6.x and do not\n   cause it to fail, providing\
    \ a limited degree of backward\n   compatibility.\n"
- title: 5.5.1.3.  Secret-Key Packet (Tag 5)
  contents:
  - "5.5.1.3.  Secret-Key Packet (Tag 5)\n   A Secret-Key packet contains all the\
    \ information that is found in a\n   Public-Key packet, including the public-key\
    \ material, but also\n   includes the secret-key material after all the public-key\
    \ fields.\n"
- title: 5.5.1.4.  Secret-Subkey Packet (Tag 7)
  contents:
  - "5.5.1.4.  Secret-Subkey Packet (Tag 7)\n   A Secret-Subkey packet (tag 7) is\
    \ the subkey analog of the Secret\n   Key packet and has exactly the same format.\n"
- title: 5.5.2.  Public-Key Packet Formats
  contents:
  - "5.5.2.  Public-Key Packet Formats\n   There are two versions of key-material\
    \ packets.  Version 3 packets\n   were first generated by PGP 2.6.  Version 4\
    \ keys first appeared in\n   PGP 5.0 and are the preferred key version for OpenPGP.\n\
    \   OpenPGP implementations MUST create keys with version 4 format.  V3\n   keys\
    \ are deprecated; an implementation MUST NOT generate a V3 key,\n   but MAY accept\
    \ it.\n   A version 3 public key or public-subkey packet contains:\n     - A one-octet\
    \ version number (3).\n     - A four-octet number denoting the time that the key\
    \ was created.\n     - A two-octet number denoting the time in days that this\
    \ key is\n       valid.  If this number is zero, then it does not expire.\n  \
    \   - A one-octet number denoting the public-key algorithm of this key.\n    \
    \ - A series of multiprecision integers comprising the key material:\n       \
    \    - a multiprecision integer (MPI) of RSA public modulus n;\n           - an\
    \ MPI of RSA public encryption exponent e.\n   V3 keys are deprecated.  They contain\
    \ three weaknesses.  First, it is\n   relatively easy to construct a V3 key that\
    \ has the same Key ID as any\n   other key because the Key ID is simply the low\
    \ 64 bits of the public\n   modulus.  Secondly, because the fingerprint of a V3\
    \ key hashes the\n   key material, but not its length, there is an increased opportunity\n\
    \   for fingerprint collisions.  Third, there are weaknesses in the MD5\n   hash\
    \ algorithm that make developers prefer other algorithms.  See\n   below for a\
    \ fuller discussion of Key IDs and fingerprints.\n   V2 keys are identical to\
    \ the deprecated V3 keys except for the\n   version number.  An implementation\
    \ MUST NOT generate them and MAY\n   accept or reject them as it sees fit.\n \
    \  The version 4 format is similar to the version 3 format except for\n   the\
    \ absence of a validity period.  This has been moved to the\n   Signature packet.\
    \  In addition, fingerprints of version 4 keys are\n   calculated differently\
    \ from version 3 keys, as described in the\n   section \"Enhanced Key Formats\"\
    .\n   A version 4 packet contains:\n     - A one-octet version number (4).\n \
    \    - A four-octet number denoting the time that the key was created.\n     -\
    \ A one-octet number denoting the public-key algorithm of this key.\n     - A\
    \ series of multiprecision integers comprising the key material.\n       This\
    \ algorithm-specific portion is:\n       Algorithm-Specific Fields for RSA public\
    \ keys:\n         - multiprecision integer (MPI) of RSA public modulus n;\n  \
    \       - MPI of RSA public encryption exponent e.\n       Algorithm-Specific\
    \ Fields for DSA public keys:\n         - MPI of DSA prime p;\n         - MPI\
    \ of DSA group order q (q is a prime divisor of p-1);\n         - MPI of DSA group\
    \ generator g;\n         - MPI of DSA public-key value y (= g**x mod p where x\n\
    \           is secret).\n       Algorithm-Specific Fields for Elgamal public keys:\n\
    \         - MPI of Elgamal prime p;\n         - MPI of Elgamal group generator\
    \ g;\n         - MPI of Elgamal public key value y (= g**x mod p where x\n   \
    \        is secret).\n"
- title: 5.5.3.  Secret-Key Packet Formats
  contents:
  - "5.5.3.  Secret-Key Packet Formats\n   The Secret-Key and Secret-Subkey packets\
    \ contain all the data of the\n   Public-Key and Public-Subkey packets, with additional\
    \ algorithm-\n   specific secret-key data appended, usually in encrypted form.\n\
    \   The packet contains:\n     - A Public-Key or Public-Subkey packet, as described\
    \ above.\n     - One octet indicating string-to-key usage conventions.  Zero\n\
    \       indicates that the secret-key data is not encrypted.  255 or 254\n   \
    \    indicates that a string-to-key specifier is being given.  Any\n       other\
    \ value is a symmetric-key encryption algorithm identifier.\n     - [Optional]\
    \ If string-to-key usage octet was 255 or 254, a one-\n       octet symmetric\
    \ encryption algorithm.\n     - [Optional] If string-to-key usage octet was 255\
    \ or 254, a\n       string-to-key specifier.  The length of the string-to-key\n\
    \       specifier is implied by its type, as described above.\n     - [Optional]\
    \ If secret data is encrypted (string-to-key usage octet\n       not zero), an\
    \ Initial Vector (IV) of the same length as the\n       cipher's block size.\n\
    \     - Plain or encrypted multiprecision integers comprising the secret\n   \
    \    key data.  These algorithm-specific fields are as described\n       below.\n\
    \     - If the string-to-key usage octet is zero or 255, then a two-octet\n  \
    \     checksum of the plaintext of the algorithm-specific portion (sum\n     \
    \  of all octets, mod 65536).  If the string-to-key usage octet was\n       254,\
    \ then a 20-octet SHA-1 hash of the plaintext of the\n       algorithm-specific\
    \ portion.  This checksum or hash is encrypted\n       together with the algorithm-specific\
    \ fields (if string-to-key\n       usage octet is not zero).  Note that for all\
    \ other values, a\n       two-octet checksum is required.\n       Algorithm-Specific\
    \ Fields for RSA secret keys:\n       - multiprecision integer (MPI) of RSA secret\
    \ exponent d.\n       - MPI of RSA secret prime value p.\n       - MPI of RSA\
    \ secret prime value q (p < q).\n       - MPI of u, the multiplicative inverse\
    \ of p, mod q.\n       Algorithm-Specific Fields for DSA secret keys:\n      \
    \ - MPI of DSA secret exponent x.\n       Algorithm-Specific Fields for Elgamal\
    \ secret keys:\n       - MPI of Elgamal secret exponent x.\n   Secret MPI values\
    \ can be encrypted using a passphrase.  If a string-\n   to-key specifier is given,\
    \ that describes the algorithm for\n   converting the passphrase to a key, else\
    \ a simple MD5 hash of the\n   passphrase is used.  Implementations MUST use a\
    \ string-to-key\n   specifier; the simple hash is for backward compatibility and\
    \ is\n   deprecated, though implementations MAY continue to use existing\n   private\
    \ keys in the old format.  The cipher for encrypting the MPIs\n   is specified\
    \ in the Secret-Key packet.\n   Encryption/decryption of the secret data is done\
    \ in CFB mode using\n   the key created from the passphrase and the Initial Vector\
    \ from the\n   packet.  A different mode is used with V3 keys (which are only\
    \ RSA)\n   than with other key formats.  With V3 keys, the MPI bit count prefix\n\
    \   (i.e., the first two octets) is not encrypted.  Only the MPI non-\n   prefix\
    \ data is encrypted.  Furthermore, the CFB state is\n   resynchronized at the\
    \ beginning of each new MPI value, so that the\n   CFB block boundary is aligned\
    \ with the start of the MPI data.\n   With V4 keys, a simpler method is used.\
    \  All secret MPI values are\n   encrypted in CFB mode, including the MPI bitcount\
    \ prefix.\n   The two-octet checksum that follows the algorithm-specific portion\
    \ is\n   the algebraic sum, mod 65536, of the plaintext of all the algorithm-\n\
    \   specific octets (including MPI prefix and data).  With V3 keys, the\n   checksum\
    \ is stored in the clear.  With V4 keys, the checksum is\n   encrypted like the\
    \ algorithm-specific data.  This value is used to\n   check that the passphrase\
    \ was correct.  However, this checksum is\n   deprecated; an implementation SHOULD\
    \ NOT use it, but should rather\n   use the SHA-1 hash denoted with a usage octet\
    \ of 254.  The reason for\n   this is that there are some attacks that involve\
    \ undetectably\n   modifying the secret key.\n"
- title: 5.6.  Compressed Data Packet (Tag 8)
  contents:
  - "5.6.  Compressed Data Packet (Tag 8)\n   The Compressed Data packet contains\
    \ compressed data.  Typically, this\n   packet is found as the contents of an\
    \ encrypted packet, or following\n   a Signature or One-Pass Signature packet,\
    \ and contains a literal data\n   packet.\n   The body of this packet consists\
    \ of:\n     - One octet that gives the algorithm used to compress the packet.\n\
    \     - Compressed data, which makes up the remainder of the packet.\n   A Compressed\
    \ Data Packet's body contains an block that compresses\n   some set of packets.\
    \  See section \"Packet Composition\" for details on\n   how messages are formed.\n\
    \   ZIP-compressed packets are compressed with raw RFC 1951 [RFC1951]\n   DEFLATE\
    \ blocks.  Note that PGP V2.6 uses 13 bits of compression.  If\n   an implementation\
    \ uses more bits of compression, PGP V2.6 cannot\n   decompress it.\n   ZLIB-compressed\
    \ packets are compressed with RFC 1950 [RFC1950] ZLIB-\n   style blocks.\n   BZip2-compressed\
    \ packets are compressed using the BZip2 [BZ2]\n   algorithm.\n"
- title: 5.7.  Symmetrically Encrypted Data Packet (Tag 9)
  contents:
  - "5.7.  Symmetrically Encrypted Data Packet (Tag 9)\n   The Symmetrically Encrypted\
    \ Data packet contains data encrypted with\n   a symmetric-key algorithm.  When\
    \ it has been decrypted, it contains\n   other packets (usually a literal data\
    \ packet or compressed data\n   packet, but in theory other Symmetrically Encrypted\
    \ Data packets or\n   sequences of packets that form whole OpenPGP messages).\n\
    \   The body of this packet consists of:\n     - Encrypted data, the output of\
    \ the selected symmetric-key cipher\n       operating in OpenPGP's variant of\
    \ Cipher Feedback (CFB) mode.\n   The symmetric cipher used may be specified in\
    \ a Public-Key or\n   Symmetric-Key Encrypted Session Key packet that precedes\
    \ the\n   Symmetrically Encrypted Data packet.  In that case, the cipher\n   algorithm\
    \ octet is prefixed to the session key before it is\n   encrypted.  If no packets\
    \ of these types precede the encrypted data,\n   the IDEA algorithm is used with\
    \ the session key calculated as the MD5\n   hash of the passphrase, though this\
    \ use is deprecated.\n   The data is encrypted in CFB mode, with a CFB shift size\
    \ equal to the\n   cipher's block size.  The Initial Vector (IV) is specified\
    \ as all\n   zeros.  Instead of using an IV, OpenPGP prefixes a string of length\n\
    \   equal to the block size of the cipher plus two to the data before it\n   is\
    \ encrypted.  The first block-size octets (for example, 8 octets for\n   a 64-bit\
    \ block length) are random, and the following two octets are\n   copies of the\
    \ last two octets of the IV.  For example, in an 8-octet\n   block, octet 9 is\
    \ a repeat of octet 7, and octet 10 is a repeat of\n   octet 8.  In a cipher of\
    \ length 16, octet 17 is a repeat of octet 15\n   and octet 18 is a repeat of\
    \ octet 16.  As a pedantic clarification,\n   in both these examples, we consider\
    \ the first octet to be numbered 1.\n   After encrypting the first block-size-plus-two\
    \ octets, the CFB state\n   is resynchronized.  The last block-size octets of\
    \ ciphertext are\n   passed through the cipher and the block boundary is reset.\n\
    \   The repetition of 16 bits in the random data prefixed to the message\n   allows\
    \ the receiver to immediately check whether the session key is\n   incorrect.\
    \  See the \"Security Considerations\" section for hints on\n   the proper use\
    \ of this \"quick check\".\n"
- title: 5.8.  Marker Packet (Obsolete Literal Packet) (Tag 10)
  contents:
  - "5.8.  Marker Packet (Obsolete Literal Packet) (Tag 10)\n   An experimental version\
    \ of PGP used this packet as the Literal\n   packet, but no released version of\
    \ PGP generated Literal packets with\n   this tag.  With PGP 5.x, this packet\
    \ has been reassigned and is\n   reserved for use as the Marker packet.\n   The\
    \ body of this packet consists of:\n     - The three octets 0x50, 0x47, 0x50 (which\
    \ spell \"PGP\" in UTF-8).\n   Such a packet MUST be ignored when received.  It\
    \ may be placed at the\n   beginning of a message that uses features not available\
    \ in PGP 2.6.x\n   in order to cause that version to report that newer software\
    \ is\n   necessary to process the message.\n"
- title: 5.9.  Literal Data Packet (Tag 11)
  contents:
  - "5.9.  Literal Data Packet (Tag 11)\n   A Literal Data packet contains the body\
    \ of a message; data that is\n   not to be further interpreted.\n   The body of\
    \ this packet consists of:\n     - A one-octet field that describes how the data\
    \ is formatted.\n   If it is a 'b' (0x62), then the Literal packet contains binary\
    \ data.\n   If it is a 't' (0x74), then it contains text data, and thus may need\n\
    \   line ends converted to local form, or other text-mode changes.  The\n   tag\
    \ 'u' (0x75) means the same as 't', but also indicates that\n   implementation\
    \ believes that the literal data contains UTF-8 text.\n   Early versions of PGP\
    \ also defined a value of 'l' as a 'local' mode\n   for machine-local conversions.\
    \  RFC 1991 [RFC1991] incorrectly stated\n   this local mode flag as '1' (ASCII\
    \ numeral one).  Both of these local\n   modes are deprecated.\n     - File name\
    \ as a string (one-octet length, followed by a file\n       name).  This may be\
    \ a zero-length string.  Commonly, if the\n       source of the encrypted data\
    \ is a file, this will be the name of\n       the encrypted file.  An implementation\
    \ MAY consider the file name\n       in the Literal packet to be a more authoritative\
    \ name than the\n       actual file name.\n   If the special name \"_CONSOLE\"\
    \ is used, the message is considered to\n   be \"for your eyes only\".  This advises\
    \ that the message data is\n   unusually sensitive, and the receiving program\
    \ should process it more\n   carefully, perhaps avoiding storing the received\
    \ data to disk, for\n   example.\n     - A four-octet number that indicates a\
    \ date associated with the\n       literal data.  Commonly, the date might be\
    \ the modification date\n       of a file, or the time the packet was created,\
    \ or a zero that\n       indicates no specific time.\n     - The remainder of\
    \ the packet is literal data.\n       Text data is stored with <CR><LF> text endings\
    \ (i.e., network-\n       normal line endings).  These should be converted to\
    \ native line\n       endings by the receiving software.\n"
- title: 5.10.  Trust Packet (Tag 12)
  contents:
  - "5.10.  Trust Packet (Tag 12)\n   The Trust packet is used only within keyrings\
    \ and is not normally\n   exported.  Trust packets contain data that record the\
    \ user's\n   specifications of which key holders are trustworthy introducers,\n\
    \   along with other information that implementing software uses for\n   trust\
    \ information.  The format of Trust packets is defined by a given\n   implementation.\n\
    \   Trust packets SHOULD NOT be emitted to output streams that are\n   transferred\
    \ to other users, and they SHOULD be ignored on any input\n   other than local\
    \ keyring files.\n"
- title: 5.11.  User ID Packet (Tag 13)
  contents:
  - "5.11.  User ID Packet (Tag 13)\n   A User ID packet consists of UTF-8 text that\
    \ is intended to represent\n   the name and email address of the key holder. \
    \ By convention, it\n   includes an RFC 2822 [RFC2822] mail name-addr, but there\
    \ are no\n   restrictions on its content.  The packet length in the header\n \
    \  specifies the length of the User ID.\n"
- title: 5.12.  User Attribute Packet (Tag 17)
  contents:
  - "5.12.  User Attribute Packet (Tag 17)\n   The User Attribute packet is a variation\
    \ of the User ID packet.  It\n   is capable of storing more types of data than\
    \ the User ID packet,\n   which is limited to text.  Like the User ID packet,\
    \ a User Attribute\n   packet may be certified by the key owner (\"self-signed\"\
    ) or any other\n   key owner who cares to certify it.  Except as noted, a User\
    \ Attribute\n   packet may be used anywhere that a User ID packet may be used.\n\
    \   While User Attribute packets are not a required part of the OpenPGP\n   standard,\
    \ implementations SHOULD provide at least enough\n   compatibility to properly\
    \ handle a certification signature on the\n   User Attribute packet.  A simple\
    \ way to do this is by treating the\n   User Attribute packet as a User ID packet\
    \ with opaque contents, but\n   an implementation may use any method desired.\n\
    \   The User Attribute packet is made up of one or more attribute\n   subpackets.\
    \  Each subpacket consists of a subpacket header and a\n   body.  The header consists\
    \ of:\n     - the subpacket length (1, 2, or 5 octets)\n     - the subpacket type\
    \ (1 octet)\n   and is followed by the subpacket specific data.\n   The only currently\
    \ defined subpacket type is 1, signifying an image.\n   An implementation SHOULD\
    \ ignore any subpacket of a type that it does\n   not recognize.  Subpacket types\
    \ 100 through 110 are reserved for\n   private or experimental use.\n"
- title: 5.12.1.  The Image Attribute Subpacket
  contents:
  - "5.12.1.  The Image Attribute Subpacket\n   The Image Attribute subpacket is used\
    \ to encode an image, presumably\n   (but not required to be) that of the key\
    \ owner.\n   The Image Attribute subpacket begins with an image header.  The first\n\
    \   two octets of the image header contain the length of the image\n   header.\
    \  Note that unlike other multi-octet numerical values in this\n   document, due\
    \ to a historical accident this value is encoded as a\n   little-endian number.\
    \  The image header length is followed by a\n   single octet for the image header\
    \ version.  The only currently\n   defined version of the image header is 1, which\
    \ is a 16-octet image\n   header.  The first three octets of a version 1 image\
    \ header are thus\n   0x10, 0x00, 0x01.\n   The fourth octet of a version 1 image\
    \ header designates the encoding\n   format of the image.  The only currently\
    \ defined encoding format is\n   the value 1 to indicate JPEG.  Image format types\
    \ 100 through 110 are\n   reserved for private or experimental use.  The rest\
    \ of the version 1\n   image header is made up of 12 reserved octets, all of which\
    \ MUST be\n   set to 0.\n   The rest of the image subpacket contains the image\
    \ itself.  As the\n   only currently defined image type is JPEG, the image is\
    \ encoded in\n   the JPEG File Interchange Format (JFIF), a standard file format\
    \ for\n   JPEG images [JFIF].\n   An implementation MAY try to determine the type\
    \ of an image by\n   examination of the image data if it is unable to handle a\
    \ particular\n   version of the image header or if a specified encoding format\
    \ value\n   is not recognized.\n"
- title: 5.13.  Sym. Encrypted Integrity Protected Data Packet (Tag 18)
  contents:
  - "5.13.  Sym. Encrypted Integrity Protected Data Packet (Tag 18)\n   The Symmetrically\
    \ Encrypted Integrity Protected Data packet is a\n   variant of the Symmetrically\
    \ Encrypted Data packet.  It is a new\n   feature created for OpenPGP that addresses\
    \ the problem of detecting a\n   modification to encrypted data.  It is used in\
    \ combination with a\n   Modification Detection Code packet.\n   There is a corresponding\
    \ feature in the features Signature subpacket\n   that denotes that an implementation\
    \ can properly use this packet\n   type.  An implementation MUST support decrypting\
    \ these packets and\n   SHOULD prefer generating them to the older Symmetrically\
    \ Encrypted\n   Data packet when possible.  Since this data packet protects against\n\
    \   modification attacks, this standard encourages its proliferation.\n   While\
    \ blanket adoption of this data packet would create\n   interoperability problems,\
    \ rapid adoption is nevertheless important.\n   An implementation SHOULD specifically\
    \ denote support for this packet,\n   but it MAY infer it from other mechanisms.\n\
    \   For example, an implementation might infer from the use of a cipher\n   such\
    \ as Advanced Encryption Standard (AES) or Twofish that a user\n   supports this\
    \ feature.  It might place in the unhashed portion of\n   another user's key signature\
    \ a Features subpacket.  It might also\n   present a user with an opportunity\
    \ to regenerate their own self-\n   signature with a Features subpacket.\n   This\
    \ packet contains data encrypted with a symmetric-key algorithm\n   and protected\
    \ against modification by the SHA-1 hash algorithm.  When\n   it has been decrypted,\
    \ it will typically contain other packets (often\n   a Literal Data packet or\
    \ Compressed Data packet).  The last decrypted\n   packet in this packet's payload\
    \ MUST be a Modification Detection Code\n   packet.\n   The body of this packet\
    \ consists of:\n     - A one-octet version number.  The only currently defined\
    \ value is\n       1.\n     - Encrypted data, the output of the selected symmetric-key\
    \ cipher\n       operating in Cipher Feedback mode with shift amount equal to\
    \ the\n       block size of the cipher (CFB-n where n is the block size).\n  \
    \ The symmetric cipher used MUST be specified in a Public-Key or\n   Symmetric-Key\
    \ Encrypted Session Key packet that precedes the\n   Symmetrically Encrypted Data\
    \ packet.  In either case, the cipher\n   algorithm octet is prefixed to the session\
    \ key before it is\n   encrypted.\n   The data is encrypted in CFB mode, with\
    \ a CFB shift size equal to the\n   cipher's block size.  The Initial Vector (IV)\
    \ is specified as all\n   zeros.  Instead of using an IV, OpenPGP prefixes an\
    \ octet string to\n   the data before it is encrypted.  The length of the octet\
    \ string\n   equals the block size of the cipher in octets, plus two.  The first\n\
    \   octets in the group, of length equal to the block size of the cipher,\n  \
    \ are random; the last two octets are each copies of their 2nd\n   preceding octet.\
    \  For example, with a cipher whose block size is 128\n   bits or 16 octets, the\
    \ prefix data will contain 16 random octets,\n   then two more octets, which are\
    \ copies of the 15th and 16th octets,\n   respectively.  Unlike the Symmetrically\
    \ Encrypted Data Packet, no\n   special CFB resynchronization is done after encrypting\
    \ this prefix\n   data.  See \"OpenPGP CFB Mode\" below for more details.\n  \
    \ The repetition of 16 bits in the random data prefixed to the message\n   allows\
    \ the receiver to immediately check whether the session key is\n   incorrect.\n\
    \   The plaintext of the data to be encrypted is passed through the SHA-1\n  \
    \ hash function, and the result of the hash is appended to the\n   plaintext in\
    \ a Modification Detection Code packet.  The input to the\n   hash function includes\
    \ the prefix data described above; it includes\n   all of the plaintext, and then\
    \ also includes two octets of values\n   0xD3, 0x14.  These represent the encoding\
    \ of a Modification Detection\n   Code packet tag and length field of 20 octets.\n\
    \   The resulting hash value is stored in a Modification Detection Code\n   (MDC)\
    \ packet, which MUST use the two octet encoding just given to\n   represent its\
    \ tag and length field.  The body of the MDC packet is\n   the 20-octet output\
    \ of the SHA-1 hash.\n   The Modification Detection Code packet is appended to\
    \ the plaintext\n   and encrypted along with the plaintext using the same CFB\
    \ context.\n   During decryption, the plaintext data should be hashed with SHA-1,\n\
    \   including the prefix data as well as the packet tag and length field\n   of\
    \ the Modification Detection Code packet.  The body of the MDC\n   packet, upon\
    \ decryption, is compared with the result of the SHA-1\n   hash.\n   Any failure\
    \ of the MDC indicates that the message has been modified\n   and MUST be treated\
    \ as a security problem.  Failures include a\n   difference in the hash values,\
    \ but also the absence of an MDC packet,\n   or an MDC packet in any position\
    \ other than the end of the plaintext.\n   Any failure SHOULD be reported to the\
    \ user.\n   Note: future designs of new versions of this packet should consider\n\
    \   rollback attacks since it will be possible for an attacker to change\n   the\
    \ version back to 1.\n      NON-NORMATIVE EXPLANATION\n      The MDC system, as\
    \ packets 18 and 19 are called, were created to\n      provide an integrity mechanism\
    \ that is less strong than a\n      signature, yet stronger than bare CFB encryption.\n\
    \      It is a limitation of CFB encryption that damage to the ciphertext\n  \
    \    will corrupt the affected cipher blocks and the block following.\n      Additionally,\
    \ if data is removed from the end of a CFB-encrypted\n      block, that removal\
    \ is undetectable.  (Note also that CBC mode has\n      a similar limitation,\
    \ but data removed from the front of the block\n      is undetectable.)\n    \
    \  The obvious way to protect or authenticate an encrypted block is\n      to\
    \ digitally sign it.  However, many people do not wish to\n      habitually sign\
    \ data, for a large number of reasons beyond the\n      scope of this document.\
    \  Suffice it to say that many people\n      consider properties such as deniability\
    \ to be as valuable as\n      integrity.\n      OpenPGP addresses this desire\
    \ to have more security than raw\n      encryption and yet preserve deniability\
    \ with the MDC system.  An\n      MDC is intentionally not a MAC.  Its name was\
    \ not selected by\n      accident.  It is analogous to a checksum.\n      Despite\
    \ the fact that it is a relatively modest system, it has\n      proved itself\
    \ in the real world.  It is an effective defense to\n      several attacks that\
    \ have surfaced since it has been created.  It\n      has met its modest goals\
    \ admirably.\n      Consequently, because it is a modest security system, it has\n\
    \      modest requirements on the hash function(s) it employs.  It does\n    \
    \  not rely on a hash function being collision-free, it relies on a\n      hash\
    \ function being one-way.  If a forger, Frank, wishes to send\n      Alice a (digitally)\
    \ unsigned message that says, \"I've always\n      secretly loved you, signed\
    \ Bob\", it is far easier for him to\n      construct a new message than it is\
    \ to modify anything intercepted\n      from Bob.  (Note also that if Bob wishes\
    \ to communicate secretly\n      with Alice, but without authentication or identification\
    \ and with\n      a threat model that includes forgers, he has a problem that\n\
    \      transcends mere cryptography.)\n      Note also that unlike nearly every\
    \ other OpenPGP subsystem, there\n      are no parameters in the MDC system. \
    \ It hard-defines SHA-1 as its\n      hash function.  This is not an accident.\
    \  It is an intentional\n      choice to avoid downgrade and cross-grade attacks\
    \ while making a\n      simple, fast system.  (A downgrade attack would be an\
    \ attack that\n      replaced SHA-256 with SHA-1, for example.  A cross-grade\
    \ attack\n      would replace SHA-1 with another 160-bit hash, such as RIPE-\n\
    \      MD/160, for example.)\n      However, given the present state of hash function\
    \ cryptanalysis\n      and cryptography, it may be desirable to upgrade the MDC\
    \ system to\n      a new hash function.  See Section 13.11 in the \"IANA\n   \
    \   Considerations\" for guidance.\n"
- title: 5.14.  Modification Detection Code Packet (Tag 19)
  contents:
  - "5.14.  Modification Detection Code Packet (Tag 19)\n   The Modification Detection\
    \ Code packet contains a SHA-1 hash of\n   plaintext data, which is used to detect\
    \ message modification.  It is\n   only used with a Symmetrically Encrypted Integrity\
    \ Protected Data\n   packet.  The Modification Detection Code packet MUST be the\
    \ last\n   packet in the plaintext data that is encrypted in the Symmetrically\n\
    \   Encrypted Integrity Protected Data packet, and MUST appear in no\n   other\
    \ place.\n   A Modification Detection Code packet MUST have a length of 20 octets.\n\
    \   The body of this packet consists of:\n     - A 20-octet SHA-1 hash of the\
    \ preceding plaintext data of the\n       Symmetrically Encrypted Integrity Protected\
    \ Data packet,\n       including prefix data, the tag octet, and length octet\
    \ of the\n       Modification Detection Code packet.\n   Note that the Modification\
    \ Detection Code packet MUST always use a\n   new format encoding of the packet\
    \ tag, and a one-octet encoding of\n   the packet length.  The reason for this\
    \ is that the hashing rules for\n   modification detection include a one-octet\
    \ tag and one-octet length\n   in the data hash.  While this is a bit restrictive,\
    \ it reduces\n   complexity.\n"
- title: 6.  Radix-64 Conversions
  contents:
  - "6.  Radix-64 Conversions\n   As stated in the introduction, OpenPGP's underlying\
    \ native\n   representation for objects is a stream of arbitrary octets, and some\n\
    \   systems desire these objects to be immune to damage caused by\n   character\
    \ set translation, data conversions, etc.\n   In principle, any printable encoding\
    \ scheme that met the requirements\n   of the unsafe channel would suffice, since\
    \ it would not change the\n   underlying binary bit streams of the native OpenPGP\
    \ data structures.\n   The OpenPGP standard specifies one such printable encoding\
    \ scheme to\n   ensure interoperability.\n   OpenPGP's Radix-64 encoding is composed\
    \ of two parts: a base64\n   encoding of the binary data and a checksum.  The\
    \ base64 encoding is\n   identical to the MIME base64 content-transfer-encoding\
    \ [RFC2045].\n   The checksum is a 24-bit Cyclic Redundancy Check (CRC) converted\
    \ to\n   four characters of radix-64 encoding by the same MIME base64\n   transformation,\
    \ preceded by an equal sign (=).  The CRC is computed\n   by using the generator\
    \ 0x864CFB and an initialization of 0xB704CE.\n   The accumulation is done on\
    \ the data before it is converted to\n   radix-64, rather than on the converted\
    \ data.  A sample implementation\n   of this algorithm is in the next section.\n\
    \   The checksum with its leading equal sign MAY appear on the first line\n  \
    \ after the base64 encoded data.\n   Rationale for CRC-24: The size of 24 bits\
    \ fits evenly into printable\n   base64.  The nonzero initialization can detect\
    \ more errors than a\n   zero initialization.\n"
- title: 6.1.  An Implementation of the CRC-24 in "C"
  contents:
  - "6.1.  An Implementation of the CRC-24 in \"C\"\n      #define CRC24_INIT 0xB704CEL\n\
    \      #define CRC24_POLY 0x1864CFBL\n      typedef long crc24;\n      crc24 crc_octets(unsigned\
    \ char *octets, size_t len)\n      {\n          crc24 crc = CRC24_INIT;\n    \
    \      int i;\n          while (len--) {\n              crc ^= (*octets++) <<\
    \ 16;\n              for (i = 0; i < 8; i++) {\n                  crc <<= 1;\n\
    \                  if (crc & 0x1000000)\n                      crc ^= CRC24_POLY;\n\
    \              }\n          }\n          return crc & 0xFFFFFFL;\n      }\n"
- title: 6.2.  Forming ASCII Armor
  contents:
  - "6.2.  Forming ASCII Armor\n   When OpenPGP encodes data into ASCII Armor, it\
    \ puts specific headers\n   around the Radix-64 encoded data, so OpenPGP can reconstruct\
    \ the data\n   later.  An OpenPGP implementation MAY use ASCII armor to protect\
    \ raw\n   binary data.  OpenPGP informs the user what kind of data is encoded\n\
    \   in the ASCII armor through the use of the headers.\n   Concatenating the following\
    \ data creates ASCII Armor:\n     - An Armor Header Line, appropriate for the\
    \ type of data\n     - Armor Headers\n     - A blank (zero-length, or containing\
    \ only whitespace) line\n     - The ASCII-Armored data\n     - An Armor Checksum\n\
    \     - The Armor Tail, which depends on the Armor Header Line\n   An Armor Header\
    \ Line consists of the appropriate header line text\n   surrounded by five (5)\
    \ dashes ('-', 0x2D) on either side of the\n   header line text.  The header line\
    \ text is chosen based upon the type\n   of data that is being encoded in Armor,\
    \ and how it is being encoded.\n   Header line texts include the following strings:\n\
    \   BEGIN PGP MESSAGE\n       Used for signed, encrypted, or compressed files.\n\
    \   BEGIN PGP PUBLIC KEY BLOCK\n       Used for armoring public keys.\n   BEGIN\
    \ PGP PRIVATE KEY BLOCK\n       Used for armoring private keys.\n   BEGIN PGP\
    \ MESSAGE, PART X/Y\n       Used for multi-part messages, where the armor is split\
    \ amongst Y\n       parts, and this is the Xth part out of Y.\n   BEGIN PGP MESSAGE,\
    \ PART X\n       Used for multi-part messages, where this is the Xth part of an\n\
    \       unspecified number of parts.  Requires the MESSAGE-ID Armor\n       Header\
    \ to be used.\n   BEGIN PGP SIGNATURE\n       Used for detached signatures, OpenPGP/MIME\
    \ signatures, and\n       cleartext signatures.  Note that PGP 2.x uses BEGIN\
    \ PGP MESSAGE\n       for detached signatures.\n   Note that all these Armor Header\
    \ Lines are to consist of a complete\n   line.  That is to say, there is always\
    \ a line ending preceding the\n   starting five dashes, and following the ending\
    \ five dashes.  The\n   header lines, therefore, MUST start at the beginning of\
    \ a line, and\n   MUST NOT have text other than whitespace following them on the\
    \ same\n   line.  These line endings are considered a part of the Armor Header\n\
    \   Line for the purposes of determining the content they delimit.  This\n   is\
    \ particularly important when computing a cleartext signature (see\n   below).\n\
    \   The Armor Headers are pairs of strings that can give the user or the\n   receiving\
    \ OpenPGP implementation some information about how to decode\n   or use the message.\
    \  The Armor Headers are a part of the armor, not a\n   part of the message, and\
    \ hence are not protected by any signatures\n   applied to the message.\n   The\
    \ format of an Armor Header is that of a key-value pair.  A colon\n   (':' 0x38)\
    \ and a single space (0x20) separate the key and value.\n   OpenPGP should consider\
    \ improperly formatted Armor Headers to be\n   corruption of the ASCII Armor.\
    \  Unknown keys should be reported to\n   the user, but OpenPGP should continue\
    \ to process the message.\n   Note that some transport methods are sensitive to\
    \ line length.  While\n   there is a limit of 76 characters for the Radix-64 data\
    \ (Section\n   6.3), there is no limit to the length of Armor Headers.  Care should\n\
    \   be taken that the Armor Headers are short enough to survive\n   transport.\
    \  One way to do this is to repeat an Armor Header key\n   multiple times with\
    \ different values for each so that no one line is\n   overly long.\n   Currently\
    \ defined Armor Header Keys are as follows:\n     - \"Version\", which states\
    \ the OpenPGP implementation and version\n       used to encode the message.\n\
    \     - \"Comment\", a user-defined comment.  OpenPGP defines all text to\n  \
    \     be in UTF-8.  A comment may be any UTF-8 string.  However, the\n       whole\
    \ point of armoring is to provide seven-bit-clean data.\n       Consequently,\
    \ if a comment has characters that are outside the\n       US-ASCII range of UTF,\
    \ they may very well not survive transport.\n     - \"MessageID\", a 32-character\
    \ string of printable characters.  The\n       string must be the same for all\
    \ parts of a multi-part message\n       that uses the \"PART X\" Armor Header.\
    \  MessageID strings should be\n       unique enough that the recipient of the\
    \ mail can associate all\n       the parts of a message with each other.  A good\
    \ checksum or\n       cryptographic hash function is sufficient.\n       The MessageID\
    \ SHOULD NOT appear unless it is in a multi-part\n       message.  If it appears\
    \ at all, it MUST be computed from the\n       finished (encrypted, signed, etc.)\
    \ message in a deterministic\n       fashion, rather than contain a purely random\
    \ value.  This is to\n       allow the legitimate recipient to determine that\
    \ the MessageID\n       cannot serve as a covert means of leaking cryptographic\
    \ key\n       information.\n     - \"Hash\", a comma-separated list of hash algorithms\
    \ used in this\n       message.  This is used only in cleartext signed messages.\n\
    \     - \"Charset\", a description of the character set that the plaintext\n \
    \      is in.  Please note that OpenPGP defines text to be in UTF-8.  An\n   \
    \    implementation will get best results by translating into and out\n      \
    \ of UTF-8.  However, there are many instances where this is easier\n       said\
    \ than done.  Also, there are communities of users who have no\n       need for\
    \ UTF-8 because they are all happy with a character set\n       like ISO Latin-5\
    \ or a Japanese character set.  In such instances,\n       an implementation MAY\
    \ override the UTF-8 default by using this\n       header key.  An implementation\
    \ MAY implement this key and any\n       translations it cares to; an implementation\
    \ MAY ignore it and\n       assume all text is UTF-8.\n       The Armor Tail Line\
    \ is composed in the same manner as the Armor\n       Header Line, except the\
    \ string \"BEGIN\" is replaced by the string\n       \"END\".\n"
- title: 6.3.  Encoding Binary in Radix-64
  contents:
  - "6.3.  Encoding Binary in Radix-64\n   The encoding process represents 24-bit\
    \ groups of input bits as output\n   strings of 4 encoded characters.  Proceeding\
    \ from left to right, a\n   24-bit input group is formed by concatenating three\
    \ 8-bit input\n   groups.  These 24 bits are then treated as four concatenated\
    \ 6-bit\n   groups, each of which is translated into a single digit in the\n \
    \  Radix-64 alphabet.  When encoding a bit stream with the Radix-64\n   encoding,\
    \ the bit stream must be presumed to be ordered with the most\n   significant\
    \ bit first.  That is, the first bit in the stream will be\n   the high-order\
    \ bit in the first 8-bit octet, and the eighth bit will\n   be the low-order bit\
    \ in the first 8-bit octet, and so on.\n         +--first octet--+-second octet--+--third\
    \ octet--+\n         |7 6 5 4 3 2 1 0|7 6 5 4 3 2 1 0|7 6 5 4 3 2 1 0|\n     \
    \    +-----------+---+-------+-------+---+-----------+\n         |5 4 3 2 1 0|5\
    \ 4 3 2 1 0|5 4 3 2 1 0|5 4 3 2 1 0|\n         +--1.index--+--2.index--+--3.index--+--4.index--+\n\
    \   Each 6-bit group is used as an index into an array of 64 printable\n   characters\
    \ from the table below.  The character referenced by the\n   index is placed in\
    \ the output string.\n     Value Encoding  Value Encoding  Value Encoding  Value\
    \ Encoding\n         0 A            17 R            34 i            51 z\n   \
    \      1 B            18 S            35 j            52 0\n         2 C     \
    \       19 T            36 k            53 1\n         3 D            20 U   \
    \         37 l            54 2\n         4 E            21 V            38 m \
    \           55 3\n         5 F            22 W            39 n            56 4\n\
    \         6 G            23 X            40 o            57 5\n         7 H  \
    \          24 Y            41 p            58 6\n         8 I            25 Z\
    \            42 q            59 7\n         9 J            26 a            43\
    \ r            60 8\n        10 K            27 b            44 s            61\
    \ 9\n        11 L            28 c            45 t            62 +\n        12\
    \ M            29 d            46 u            63 /\n        13 N            30\
    \ e            47 v\n        14 O            31 f            48 w         (pad)\
    \ =\n        15 P            32 g            49 x\n        16 Q            33\
    \ h            50 y\n   The encoded output stream must be represented in lines\
    \ of no more\n   than 76 characters each.\n   Special processing is performed\
    \ if fewer than 24 bits are available\n   at the end of the data being encoded.\
    \  There are three possibilities:\n   1. The last data group has 24 bits (3 octets).\
    \  No special processing\n      is needed.\n   2. The last data group has 16 bits\
    \ (2 octets).  The first two 6-bit\n      groups are processed as above.  The\
    \ third (incomplete) data group\n      has two zero-value bits added to it, and\
    \ is processed as above.  A\n      pad character (=) is added to the output.\n\
    \   3. The last data group has 8 bits (1 octet).  The first 6-bit group\n    \
    \  is processed as above.  The second (incomplete) data group has\n      four\
    \ zero-value bits added to it, and is processed as above.  Two\n      pad characters\
    \ (=) are added to the output.\n"
- title: 6.4.  Decoding Radix-64
  contents:
  - "6.4.  Decoding Radix-64\n   In Radix-64 data, characters other than those in\
    \ the table, line\n   breaks, and other white space probably indicate a transmission\
    \ error,\n   about which a warning message or even a message rejection might be\n\
    \   appropriate under some circumstances.  Decoding software must ignore\n   all\
    \ white space.\n   Because it is used only for padding at the end of the data,\
    \ the\n   occurrence of any \"=\" characters may be taken as evidence that the\n\
    \   end of the data has been reached (without truncation in transit).  No\n  \
    \ such assurance is possible, however, when the number of octets\n   transmitted\
    \ was a multiple of three and no \"=\" characters are\n   present.\n"
- title: 6.5.  Examples of Radix-64
  contents:
  - "6.5.  Examples of Radix-64\n   Input data:  0x14FB9C03D97E\n   Hex:     1   4\
    \    F   B    9   C     | 0   3    D   9    7   E\n   8-bit:   00010100 11111011\
    \ 10011100  | 00000011 11011001 11111110\n   6-bit:   000101 001111 101110 011100\
    \ | 000000 111101 100111 111110\n   Decimal: 5      15     46     28       0 \
    \     61     37     62\n   Output:  F      P      u      c        A      9   \
    \   l      +\n   Input data:  0x14FB9C03D9\n   Hex:     1   4    F   B    9  \
    \ C     | 0   3    D   9\n   8-bit:   00010100 11111011 10011100  | 00000011 11011001\n\
    \                                                   pad with 00\n   6-bit:   000101\
    \ 001111 101110 011100 | 000000 111101 100100\n   Decimal: 5      15     46  \
    \   28       0      61     36\n                                              \
    \        pad with =\n   Output:  F      P      u      c        A      9      k\
    \      =\n   Input data:  0x14FB9C03\n   Hex:     1   4    F   B    9   C    \
    \ | 0   3\n   8-bit:   00010100 11111011 10011100  | 00000011\n              \
    \                            pad with 0000\n   6-bit:   000101 001111 101110 011100\
    \ | 000000 110000\n   Decimal: 5      15     46     28       0      48\n     \
    \                                          pad with =      =\n   Output:  F  \
    \    P      u      c        A      w      =      =\n"
- title: 6.6.  Example of an ASCII Armored Message
  contents:
  - "6.6.  Example of an ASCII Armored Message\n   -----BEGIN PGP MESSAGE-----\n \
    \  Version: OpenPrivacy 0.99\n   yDgBO22WxBHv7O8X7O/jygAEzol56iUKiXmV+XmpCtmpqQUKiQrFqclFqUDBovzS\n\
    \   vBSFjNSiVHsuAA==\n   =njUN\n   -----END PGP MESSAGE-----\n   Note that this\
    \ example has extra indenting; an actual armored message\n   would have no leading\
    \ whitespace.\n"
- title: 7.  Cleartext Signature Framework
  contents:
  - "7.  Cleartext Signature Framework\n   It is desirable to be able to sign a textual\
    \ octet stream without\n   ASCII armoring the stream itself, so the signed text\
    \ is still\n   readable without special software.  In order to bind a signature\
    \ to\n   such a cleartext, this framework is used.  (Note that this framework\n\
    \   is not intended to be reversible.  RFC 3156 [RFC3156] defines another\n  \
    \ way to sign cleartext messages for environments that support MIME.)\n   The\
    \ cleartext signed message consists of:\n     - The cleartext header '-----BEGIN\
    \ PGP SIGNED MESSAGE-----' on a\n       single line,\n     - One or more \"Hash\"\
    \ Armor Headers,\n     - Exactly one empty line not included into the message\
    \ digest,\n     - The dash-escaped cleartext that is included into the message\n\
    \       digest,\n     - The ASCII armored signature(s) including the '-----BEGIN\
    \ PGP\n       SIGNATURE-----' Armor Header and Armor Tail Lines.\n   If the \"\
    Hash\" Armor Header is given, the specified message digest\n   algorithm(s) are\
    \ used for the signature.  If there are no such\n   headers, MD5 is used.  If\
    \ MD5 is the only hash used, then an\n   implementation MAY omit this header for\
    \ improved V2.x compatibility.\n   If more than one message digest is used in\
    \ the signature, the \"Hash\"\n   armor header contains a comma-delimited list\
    \ of used message digests.\n   Current message digest names are described below\
    \ with the algorithm\n   IDs.\n   An implementation SHOULD add a line break after\
    \ the cleartext, but\n   MAY omit it if the cleartext ends with a line break.\
    \  This is for\n   visual clarity.\n"
- title: 7.1.  Dash-Escaped Text
  contents:
  - "7.1.  Dash-Escaped Text\n   The cleartext content of the message must also be\
    \ dash-escaped.\n   Dash-escaped cleartext is the ordinary cleartext where every\
    \ line\n   starting with a dash '-' (0x2D) is prefixed by the sequence dash '-'\n\
    \   (0x2D) and space ' ' (0x20).  This prevents the parser from\n   recognizing\
    \ armor headers of the cleartext itself.  An implementation\n   MAY dash-escape\
    \ any line, SHOULD dash-escape lines commencing \"From\"\n   followed by a space,\
    \ and MUST dash-escape any line commencing in a\n   dash.  The message digest\
    \ is computed using the cleartext itself, not\n   the dash-escaped form.\n   As\
    \ with binary signatures on text documents, a cleartext signature is\n   calculated\
    \ on the text using canonical <CR><LF> line endings.  The\n   line ending (i.e.,\
    \ the <CR><LF>) before the '-----BEGIN PGP\n   SIGNATURE-----' line that terminates\
    \ the signed text is not\n   considered part of the signed text.\n   When reversing\
    \ dash-escaping, an implementation MUST strip the string\n   \"- \" if it occurs\
    \ at the beginning of a line, and SHOULD warn on \"-\"\n   and any character other\
    \ than a space at the beginning of a line.\n   Also, any trailing whitespace --\
    \ spaces (0x20) and tabs (0x09) -- at\n   the end of any line is removed when\
    \ the cleartext signature is\n   generated.\n"
- title: 8.  Regular Expressions
  contents:
  - "8.  Regular Expressions\n   A regular expression is zero or more branches, separated\
    \ by '|'.  It\n   matches anything that matches one of the branches.\n   A branch\
    \ is zero or more pieces, concatenated.  It matches a match\n   for the first,\
    \ followed by a match for the second, etc.\n   A piece is an atom possibly followed\
    \ by '*', '+', or '?'.  An atom\n   followed by '*' matches a sequence of 0 or\
    \ more matches of the atom.\n   An atom followed by '+' matches a sequence of\
    \ 1 or more matches of\n   the atom.  An atom followed by '?' matches a match\
    \ of the atom, or\n   the null string.\n   An atom is a regular expression in\
    \ parentheses (matching a match for\n   the regular expression), a range (see\
    \ below), '.' (matching any\n   single character), '^' (matching the null string\
    \ at the beginning of\n   the input string), '$' (matching the null string at\
    \ the end of the\n   input string), a '\\' followed by a single character (matching\
    \ that\n   character), or a single character with no other significance\n   (matching\
    \ that character).\n   A range is a sequence of characters enclosed in '[]'. \
    \ It normally\n   matches any single character from the sequence.  If the sequence\n\
    \   begins with '^', it matches any single character not from the rest of\n  \
    \ the sequence.  If two characters in the sequence are separated\n   by '-', this\
    \ is shorthand for the full list of ASCII characters\n   between them (e.g., '[0-9]'\
    \ matches any decimal digit).  To include a\n   literal ']' in the sequence, make\
    \ it the first character (following a\n   possible '^').  To include a literal\
    \ '-', make it the first or last\n   character.\n"
- title: 9.  Constants
  contents:
  - "9.  Constants\n   This section describes the constants used in OpenPGP.\n   Note\
    \ that these tables are not exhaustive lists; an implementation\n   MAY implement\
    \ an algorithm not on these lists, so long as the\n   algorithm numbers are chosen\
    \ from the private or experimental\n   algorithm range.\n   See the section \"\
    Notes on Algorithms\" below for more discussion of\n   the algorithms.\n"
- title: 9.1.  Public-Key Algorithms
  contents:
  - "9.1.  Public-Key Algorithms\n      ID           Algorithm\n      --         \
    \  ---------\n      1          - RSA (Encrypt or Sign) [HAC]\n      2        \
    \  - RSA Encrypt-Only [HAC]\n      3          - RSA Sign-Only [HAC]\n      16\
    \         - Elgamal (Encrypt-Only) [ELGAMAL] [HAC]\n      17         - DSA (Digital\
    \ Signature Algorithm) [FIPS186] [HAC]\n      18         - Reserved for Elliptic\
    \ Curve\n      19         - Reserved for ECDSA\n      20         - Reserved (formerly\
    \ Elgamal Encrypt or Sign)\n      21         - Reserved for Diffie-Hellman (X9.42,\n\
    \                   as defined for IETF-S/MIME)\n      100 to 110 - Private/Experimental\
    \ algorithm\n   Implementations MUST implement DSA for signatures, and Elgamal\
    \ for\n   encryption.  Implementations SHOULD implement RSA keys (1).  RSA\n \
    \  Encrypt-Only (2) and RSA Sign-Only are deprecated and SHOULD NOT be\n   generated,\
    \ but may be interpreted.  See Section 13.5.  See Section\n   13.8 for notes on\
    \ Elliptic Curve (18), ECDSA (19), Elgamal Encrypt or\n   Sign (20), and X9.42\
    \ (21).  Implementations MAY implement any other\n   algorithm.\n"
- title: 9.2.  Symmetric-Key Algorithms
  contents:
  - "9.2.  Symmetric-Key Algorithms\n       ID           Algorithm\n       --    \
    \       ---------\n       0          - Plaintext or unencrypted data\n       1\
    \          - IDEA [IDEA]\n       2          - TripleDES (DES-EDE, [SCHNEIER] [HAC]\
    \ -\n                    168 bit key derived from 192)\n       3          - CAST5\
    \ (128 bit key, as per [RFC2144])\n       4          - Blowfish (128 bit key,\
    \ 16 rounds) [BLOWFISH]\n       5          - Reserved\n       6          - Reserved\n\
    \       7          - AES with 128-bit key [AES]\n       8          - AES with\
    \ 192-bit key\n       9          - AES with 256-bit key\n       10         - Twofish\
    \ with 256-bit key [TWOFISH]\n       100 to 110 - Private/Experimental algorithm\n\
    \   Implementations MUST implement TripleDES.  Implementations SHOULD\n   implement\
    \ AES-128 and CAST5.  Implementations that interoperate with\n   PGP 2.6 or earlier\
    \ need to support IDEA, as that is the only\n   symmetric cipher those versions\
    \ use.  Implementations MAY implement\n   any other algorithm.\n"
- title: 9.3.  Compression Algorithms
  contents:
  - "9.3.  Compression Algorithms\n       ID           Algorithm\n       --      \
    \     ---------\n       0          - Uncompressed\n       1          - ZIP [RFC1951]\n\
    \       2          - ZLIB [RFC1950]\n       3          - BZip2 [BZ2]\n       100\
    \ to 110 - Private/Experimental algorithm\n   Implementations MUST implement uncompressed\
    \ data.  Implementations\n   SHOULD implement ZIP.  Implementations MAY implement\
    \ any other\n   algorithm.\n"
- title: 9.4.  Hash Algorithms
  contents:
  - "9.4.  Hash Algorithms\n      ID           Algorithm                         \
    \    Text Name\n      --           ---------                             ---------\n\
    \      1          - MD5 [HAC]                             \"MD5\"\n      2   \
    \       - SHA-1 [FIPS180]                       \"SHA1\"\n      3          - RIPE-MD/160\
    \ [HAC]                     \"RIPEMD160\"\n      4          - Reserved\n     \
    \ 5          - Reserved\n      6          - Reserved\n      7          - Reserved\n\
    \      8          - SHA256 [FIPS180]                      \"SHA256\"\n      9\
    \          - SHA384 [FIPS180]                      \"SHA384\"\n      10      \
    \   - SHA512 [FIPS180]                      \"SHA512\"\n      11         - SHA224\
    \ [FIPS180]                      \"SHA224\"\n      100 to 110 - Private/Experimental\
    \ algorithm\n   Implementations MUST implement SHA-1.  Implementations MAY implement\n\
    \   other algorithms.  MD5 is deprecated.\n"
- title: 10.  IANA Considerations
  contents:
  - "10.  IANA Considerations\n   OpenPGP is highly parameterized, and consequently\
    \ there are a number\n   of considerations for allocating parameters for extensions.\
    \  This\n   section describes how IANA should look at extensions to the protocol\n\
    \   as described in this document.\n"
- title: 10.1.  New String-to-Key Specifier Types
  contents:
  - "10.1.  New String-to-Key Specifier Types\n   OpenPGP S2K specifiers contain a\
    \ mechanism for new algorithms to turn\n   a string into a key.  This specification\
    \ creates a registry of S2K\n   specifier types.  The registry includes the S2K\
    \ type, the name of the\n   S2K, and a reference to the defining specification.\
    \  The initial\n   values for this registry can be found in Section 3.7.1.  Adding\
    \ a new\n   S2K specifier MUST be done through the IETF CONSENSUS method, as\n\
    \   described in [RFC2434].\n"
- title: 10.2.  New Packets
  contents:
  - "10.2.  New Packets\n   Major new features of OpenPGP are defined through new\
    \ packet types.\n   This specification creates a registry of packet types.  The\
    \ registry\n   includes the packet type, the name of the packet, and a reference\
    \ to\n   the defining specification.  The initial values for this registry can\n\
    \   be found in Section 4.3.  Adding a new packet type MUST be done\n   through\
    \ the IETF CONSENSUS method, as described in [RFC2434].\n"
- title: 10.2.1.  User Attribute Types
  contents:
  - "10.2.1.  User Attribute Types\n   The User Attribute packet permits an extensible\
    \ mechanism for other\n   types of certificate identification.  This specification\
    \ creates a\n   registry of User Attribute types.  The registry includes the User\n\
    \   Attribute type, the name of the User Attribute, and a reference to\n   the\
    \ defining specification.  The initial values for this registry can\n   be found\
    \ in Section 5.12.  Adding a new User Attribute type MUST be\n   done through\
    \ the IETF CONSENSUS method, as described in [RFC2434].\n"
- title: 10.2.1.1.  Image Format Subpacket Types
  contents:
  - "10.2.1.1.  Image Format Subpacket Types\n   Within User Attribute packets, there\
    \ is an extensible mechanism for\n   other types of image-based user attributes.\
    \  This specification\n   creates a registry of Image Attribute subpacket types.\
    \  The registry\n   includes the Image Attribute subpacket type, the name of the\
    \ Image\n   Attribute subpacket, and a reference to the defining specification.\n\
    \   The initial values for this registry can be found in Section 5.12.1.\n   Adding\
    \ a new Image Attribute subpacket type MUST be done through the\n   IETF CONSENSUS\
    \ method, as described in [RFC2434].\n"
- title: 10.2.2.  New Signature Subpackets
  contents:
  - "10.2.2.  New Signature Subpackets\n   OpenPGP signatures contain a mechanism\
    \ for signed (or unsigned) data\n   to be added to them for a variety of purposes\
    \ in the Signature\n   subpackets as discussed in Section 5.2.3.1.  This specification\n\
    \   creates a registry of Signature subpacket types.  The registry\n   includes\
    \ the Signature subpacket type, the name of the subpacket, and\n   a reference\
    \ to the defining specification.  The initial values for\n   this registry can\
    \ be found in Section 5.2.3.1.  Adding a new\n   Signature subpacket MUST be done\
    \ through the IETF CONSENSUS method,\n   as described in [RFC2434].\n"
- title: 10.2.2.1.  Signature Notation Data Subpackets
  contents:
  - "10.2.2.1.  Signature Notation Data Subpackets\n   OpenPGP signatures further\
    \ contain a mechanism for extensions in\n   signatures.  These are the Notation\
    \ Data subpackets, which contain a\n   key/value pair.  Notations contain a user\
    \ space that is completely\n   unmanaged and an IETF space.\n   This specification\
    \ creates a registry of Signature Notation Data\n   types.  The registry includes\
    \ the Signature Notation Data type, the\n   name of the Signature Notation Data,\
    \ its allowed values, and a\n   reference to the defining specification.  The\
    \ initial values for this\n   registry can be found in Section 5.2.3.16.  Adding\
    \ a new Signature\n   Notation Data subpacket MUST be done through the EXPERT\
    \ REVIEW\n   method, as described in [RFC2434].\n"
- title: 10.2.2.2.  Key Server Preference Extensions
  contents:
  - "10.2.2.2.  Key Server Preference Extensions\n   OpenPGP signatures contain a\
    \ mechanism for preferences to be\n   specified about key servers.  This specification\
    \ creates a registry\n   of key server preferences.  The registry includes the\
    \ key server\n   preference, the name of the preference, and a reference to the\n\
    \   defining specification.  The initial values for this registry can be\n   found\
    \ in Section 5.2.3.17.  Adding a new key server preference MUST\n   be done through\
    \ the IETF CONSENSUS method, as described in [RFC2434].\n"
- title: 10.2.2.3.  Key Flags Extensions
  contents:
  - "10.2.2.3.  Key Flags Extensions\n   OpenPGP signatures contain a mechanism for\
    \ flags to be specified\n   about key usage.  This specification creates a registry\
    \ of key usage\n   flags.  The registry includes the key flags value, the name\
    \ of the\n   flag, and a reference to the defining specification.  The initial\n\
    \   values for this registry can be found in Section 5.2.3.21.  Adding a\n   new\
    \ key usage flag MUST be done through the IETF CONSENSUS method, as\n   described\
    \ in [RFC2434].\n"
- title: 10.2.2.4.  Reason for Revocation Extensions
  contents:
  - "10.2.2.4.  Reason for Revocation Extensions\n   OpenPGP signatures contain a\
    \ mechanism for flags to be specified\n   about why a key was revoked.  This specification\
    \ creates a registry\n   of \"Reason for Revocation\" flags.  The registry includes\
    \ the \"Reason\n   for Revocation\" flags value, the name of the flag, and a reference\
    \ to\n   the defining specification.  The initial values for this registry can\n\
    \   be found in Section 5.2.3.23.  Adding a new feature flag MUST be done\n  \
    \ through the IETF CONSENSUS method, as described in [RFC2434].\n"
- title: 10.2.2.5.  Implementation Features
  contents:
  - "10.2.2.5.  Implementation Features\n   OpenPGP signatures contain a mechanism\
    \ for flags to be specified\n   stating which optional features an implementation\
    \ supports.  This\n   specification creates a registry of feature-implementation\
    \ flags.\n   The registry includes the feature-implementation flags value, the\n\
    \   name of the flag, and a reference to the defining specification.  The\n  \
    \ initial values for this registry can be found in Section 5.2.3.24.\n   Adding\
    \ a new feature-implementation flag MUST be done through the\n   IETF CONSENSUS\
    \ method, as described in [RFC2434].\n   Also see Section 13.12 for more information\
    \ about when feature flags\n   are needed.\n"
- title: 10.2.3.  New Packet Versions
  contents:
  - "10.2.3.  New Packet Versions\n   The core OpenPGP packets all have version numbers,\
    \ and can be revised\n   by introducing a new version of an existing packet. \
    \ This\n   specification creates a registry of packet types.  The registry\n \
    \  includes the packet type, the number of the version, and a reference\n   to\
    \ the defining specification.  The initial values for this registry\n   can be\
    \ found in Section 5.  Adding a new packet version MUST be done\n   through the\
    \ IETF CONSENSUS method, as described in [RFC2434].\n"
- title: 10.3.  New Algorithms
  contents:
  - "10.3.  New Algorithms\n   Section 9 lists the core algorithms that OpenPGP uses.\
    \  Adding in a\n   new algorithm is usually simple.  For example, adding in a\
    \ new\n   symmetric cipher usually would not need anything more than allocating\n\
    \   a constant for that cipher.  If that cipher had other than a 64-bit\n   or\
    \ 128-bit block size, there might need to be additional\n   documentation describing\
    \ how OpenPGP-CFB mode would be adjusted.\n   Similarly, when DSA was expanded\
    \ from a maximum of 1024-bit public\n   keys to 3072-bit public keys, the revision\
    \ of FIPS 186 contained\n   enough information itself to allow implementation.\
    \  Changes to this\n   document were made mainly for emphasis.\n"
- title: 10.3.1.  Public-Key Algorithms
  contents:
  - "10.3.1.  Public-Key Algorithms\n   OpenPGP specifies a number of public-key algorithms.\
    \  This\n   specification creates a registry of public-key algorithm identifiers.\n\
    \   The registry includes the algorithm name, its key sizes and\n   parameters,\
    \ and a reference to the defining specification.  The\n   initial values for this\
    \ registry can be found in Section 9.  Adding a\n   new public-key algorithm MUST\
    \ be done through the IETF CONSENSUS\n   method, as described in [RFC2434].\n"
- title: 10.3.2.  Symmetric-Key Algorithms
  contents:
  - "10.3.2.  Symmetric-Key Algorithms\n   OpenPGP specifies a number of symmetric-key\
    \ algorithms.  This\n   specification creates a registry of symmetric-key algorithm\n\
    \   identifiers.  The registry includes the algorithm name, its key sizes\n  \
    \ and block size, and a reference to the defining specification.  The\n   initial\
    \ values for this registry can be found in Section 9.  Adding a\n   new symmetric-key\
    \ algorithm MUST be done through the IETF CONSENSUS\n   method, as described in\
    \ [RFC2434].\n"
- title: 10.3.3.  Hash Algorithms
  contents:
  - "10.3.3.  Hash Algorithms\n   OpenPGP specifies a number of hash algorithms. \
    \ This specification\n   creates a registry of hash algorithm identifiers.  The\
    \ registry\n   includes the algorithm name, a text representation of that name,\
    \ its\n   block size, an OID hash prefix, and a reference to the defining\n  \
    \ specification.  The initial values for this registry can be found in\n   Section\
    \ 9 for the algorithm identifiers and text names, and Section\n   5.2.2 for the\
    \ OIDs and expanded signature prefixes.  Adding a new\n   hash algorithm MUST\
    \ be done through the IETF CONSENSUS method, as\n   described in [RFC2434].\n"
- title: 10.3.4.  Compression Algorithms
  contents:
  - "10.3.4.  Compression Algorithms\n   OpenPGP specifies a number of compression\
    \ algorithms.  This\n   specification creates a registry of compression algorithm\n\
    \   identifiers.  The registry includes the algorithm name and a\n   reference\
    \ to the defining specification.  The initial values for this\n   registry can\
    \ be found in Section 9.3.  Adding a new compression key\n   algorithm MUST be\
    \ done through the IETF CONSENSUS method, as\n   described in [RFC2434].\n"
- title: 11.  Packet Composition
  contents:
  - "11.  Packet Composition\n   OpenPGP packets are assembled into sequences in order\
    \ to create\n   messages and to transfer keys.  Not all possible packet sequences\
    \ are\n   meaningful and correct.  This section describes the rules for how\n\
    \   packets should be placed into sequences.\n"
- title: 11.1.  Transferable Public Keys
  contents:
  - "11.1.  Transferable Public Keys\n   OpenPGP users may transfer public keys. \
    \ The essential elements of a\n   transferable public key are as follows:\n  \
    \   - One Public-Key packet\n     - Zero or more revocation signatures\n     -\
    \ One or more User ID packets\n     - After each User ID packet, zero or more\
    \ Signature packets\n       (certifications)\n     - Zero or more User Attribute\
    \ packets\n     - After each User Attribute packet, zero or more Signature packets\n\
    \       (certifications)\n     - Zero or more Subkey packets\n     - After each\
    \ Subkey packet, one Signature packet, plus optionally a\n       revocation\n\
    \   The Public-Key packet occurs first.  Each of the following User ID\n   packets\
    \ provides the identity of the owner of this public key.  If\n   there are multiple\
    \ User ID packets, this corresponds to multiple\n   means of identifying the same\
    \ unique individual user; for example, a\n   user may have more than one email\
    \ address, and construct a User ID\n   for each one.\n   Immediately following\
    \ each User ID packet, there are zero or more\n   Signature packets.  Each Signature\
    \ packet is calculated on the\n   immediately preceding User ID packet and the\
    \ initial Public-Key\n   packet.  The signature serves to certify the corresponding\
    \ public key\n   and User ID.  In effect, the signer is testifying to his or her\n\
    \   belief that this public key belongs to the user identified by this\n   User\
    \ ID.\n   Within the same section as the User ID packets, there are zero or\n\
    \   more User Attribute packets.  Like the User ID packets, a User\n   Attribute\
    \ packet is followed by zero or more Signature packets\n   calculated on the immediately\
    \ preceding User Attribute packet and the\n   initial Public-Key packet.\n   User\
    \ Attribute packets and User ID packets may be freely intermixed\n   in this section,\
    \ so long as the signatures that follow them are\n   maintained on the proper\
    \ User Attribute or User ID packet.\n   After the User ID packet or Attribute\
    \ packet, there may be zero or\n   more Subkey packets.  In general, subkeys are\
    \ provided in cases where\n   the top-level public key is a signature-only key.\
    \  However, any V4\n   key may have subkeys, and the subkeys may be encryption-only\
    \ keys,\n   signature-only keys, or general-purpose keys.  V3 keys MUST NOT have\n\
    \   subkeys.\n   Each Subkey packet MUST be followed by one Signature packet,\
    \ which\n   should be a subkey binding signature issued by the top-level key.\n\
    \   For subkeys that can issue signatures, the subkey binding signature\n   MUST\
    \ contain an Embedded Signature subpacket with a primary key\n   binding signature\
    \ (0x19) issued by the subkey on the top-level key.\n   Subkey and Key packets\
    \ may each be followed by a revocation Signature\n   packet to indicate that the\
    \ key is revoked.  Revocation signatures\n   are only accepted if they are issued\
    \ by the key itself, or by a key\n   that is authorized to issue revocations via\
    \ a Revocation Key\n   subpacket in a self-signature by the top-level key.\n \
    \  Transferable public-key packet sequences may be concatenated to allow\n   transferring\
    \ multiple public keys in one operation.\n"
- title: 11.2.  Transferable Secret Keys
  contents:
  - "11.2.  Transferable Secret Keys\n   OpenPGP users may transfer secret keys. \
    \ The format of a transferable\n   secret key is the same as a transferable public\
    \ key except that\n   secret-key and secret-subkey packets are used instead of\
    \ the public\n   key and public-subkey packets.  Implementations SHOULD include\
    \ self-\n   signatures on any user IDs and subkeys, as this allows for a complete\n\
    \   public key to be automatically extracted from the transferable secret\n  \
    \ key.  Implementations MAY choose to omit the self-signatures,\n   especially\
    \ if a transferable public key accompanies the transferable\n   secret key.\n"
- title: 11.3.  OpenPGP Messages
  contents:
  - "11.3.  OpenPGP Messages\n   An OpenPGP message is a packet or sequence of packets\
    \ that\n   corresponds to the following grammatical rules (comma represents\n\
    \   sequential composition, and vertical bar separates alternatives):\n   OpenPGP\
    \ Message :- Encrypted Message | Signed Message |\n                      Compressed\
    \ Message | Literal Message.\n   Compressed Message :- Compressed Data Packet.\n\
    \   Literal Message :- Literal Data Packet.\n   ESK :- Public-Key Encrypted Session\
    \ Key Packet |\n          Symmetric-Key Encrypted Session Key Packet.\n   ESK\
    \ Sequence :- ESK | ESK Sequence, ESK.\n   Encrypted Data :- Symmetrically Encrypted\
    \ Data Packet |\n         Symmetrically Encrypted Integrity Protected Data Packet\n\
    \   Encrypted Message :- Encrypted Data | ESK Sequence, Encrypted Data.\n   One-Pass\
    \ Signed Message :- One-Pass Signature Packet,\n               OpenPGP Message,\
    \ Corresponding Signature Packet.\n   Signed Message :- Signature Packet, OpenPGP\
    \ Message |\n               One-Pass Signed Message.\n   In addition, decrypting\
    \ a Symmetrically Encrypted Data packet or a\n   Symmetrically Encrypted Integrity\
    \ Protected Data packet as well as\n   decompressing a Compressed Data packet\
    \ must yield a valid OpenPGP\n   Message.\n"
- title: 11.4.  Detached Signatures
  contents:
  - "11.4.  Detached Signatures\n   Some OpenPGP applications use so-called \"detached\
    \ signatures\".  For\n   example, a program bundle may contain a file, and with\
    \ it a second\n   file that is a detached signature of the first file.  These\
    \ detached\n   signatures are simply a Signature packet stored separately from\
    \ the\n   data for which they are a signature.\n"
- title: 12.  Enhanced Key Formats
  contents:
  - '12.  Enhanced Key Formats

    '
- title: 12.1.  Key Structures
  contents:
  - "12.1.  Key Structures\n   The format of an OpenPGP V3 key is as follows.  Entries\
    \ in square\n   brackets are optional and ellipses indicate repetition.\n    \
    \       RSA Public Key\n              [Revocation Self Signature]\n          \
    \     User ID [Signature ...]\n              [User ID [Signature ...] ...]\n \
    \  Each signature certifies the RSA public key and the preceding User\n   ID.\
    \  The RSA public key can have many User IDs and each User ID can\n   have many\
    \ signatures.  V3 keys are deprecated.  Implementations MUST\n   NOT generate\
    \ new V3 keys, but MAY continue to use existing ones.\n   The format of an OpenPGP\
    \ V4 key that uses multiple public keys is\n   similar except that the other keys\
    \ are added to the end as \"subkeys\"\n   of the primary key.\n           Primary-Key\n\
    \              [Revocation Self Signature]\n              [Direct Key Signature...]\n\
    \               User ID [Signature ...]\n              [User ID [Signature ...]\
    \ ...]\n              [User Attribute [Signature ...] ...]\n              [[Subkey\
    \ [Binding-Signature-Revocation]\n                      Primary-Key-Binding-Signature]\
    \ ...]\n   A subkey always has a single signature after it that is issued using\n\
    \   the primary key to tie the two keys together.  This binding signature\n  \
    \ may be in either V3 or V4 format, but SHOULD be V4.  Subkeys that can\n   issue\
    \ signatures MUST have a V4 binding signature due to the REQUIRED\n   embedded\
    \ primary key binding signature.\n   In the above diagram, if the binding signature\
    \ of a subkey has been\n   revoked, the revoked key may be removed, leaving only\
    \ one key.\n   In a V4 key, the primary key MUST be a key capable of certification.\n\
    \   The subkeys may be keys of any other type.  There may be other\n   constructions\
    \ of V4 keys, too.  For example, there may be a single-\n   key RSA key in V4\
    \ format, a DSA primary key with an RSA encryption\n   key, or RSA primary key\
    \ with an Elgamal subkey, etc.\n   It is also possible to have a signature-only\
    \ subkey.  This permits a\n   primary key that collects certifications (key signatures),\
    \ but is\n   used only for certifying subkeys that are used for encryption and\n\
    \   signatures.\n"
- title: 12.2.  Key IDs and Fingerprints
  contents:
  - "12.2.  Key IDs and Fingerprints\n   For a V3 key, the eight-octet Key ID consists\
    \ of the low 64 bits of\n   the public modulus of the RSA key.\n   The fingerprint\
    \ of a V3 key is formed by hashing the body (but not\n   the two-octet length)\
    \ of the MPIs that form the key material (public\n   modulus n, followed by exponent\
    \ e) with MD5.  Note that both V3 keys\n   and MD5 are deprecated.\n   A V4 fingerprint\
    \ is the 160-bit SHA-1 hash of the octet 0x99,\n   followed by the two-octet packet\
    \ length, followed by the entire\n   Public-Key packet starting with the version\
    \ field.  The Key ID is the\n   low-order 64 bits of the fingerprint.  Here are\
    \ the fields of the\n   hash material, with the example of a DSA key:\n   a.1)\
    \ 0x99 (1 octet)\n   a.2) high-order length octet of (b)-(e) (1 octet)\n   a.3)\
    \ low-order length octet of (b)-(e) (1 octet)\n     b) version number = 4 (1 octet);\n\
    \     c) timestamp of key creation (4 octets);\n     d) algorithm (1 octet): 17\
    \ = DSA (example);\n     e) Algorithm-specific fields.\n   Algorithm-Specific\
    \ Fields for DSA keys (example):\n   e.1) MPI of DSA prime p;\n   e.2) MPI of\
    \ DSA group order q (q is a prime divisor of p-1);\n   e.3) MPI of DSA group generator\
    \ g;\n   e.4) MPI of DSA public-key value y (= g**x mod p where x is secret).\n\
    \   Note that it is possible for there to be collisions of Key IDs -- two\n  \
    \ different keys with the same Key ID.  Note that there is a much\n   smaller,\
    \ but still non-zero, probability that two different keys have\n   the same fingerprint.\n\
    \   Also note that if V3 and V4 format keys share the same RSA key\n   material,\
    \ they will have different Key IDs as well as different\n   fingerprints.\n  \
    \ Finally, the Key ID and fingerprint of a subkey are calculated in the\n   same\
    \ way as for a primary key, including the 0x99 as the first octet\n   (even though\
    \ this is not a valid packet ID for a public subkey).\n"
- title: 13.  Notes on Algorithms
  contents:
  - '13.  Notes on Algorithms

    '
- title: 13.1.  PKCS#1 Encoding in OpenPGP
  contents:
  - "13.1.  PKCS#1 Encoding in OpenPGP\n   This standard makes use of the PKCS#1 functions\
    \ EME-PKCS1-v1_5 and\n   EMSA-PKCS1-v1_5.  However, the calling conventions of\
    \ these functions\n   has changed in the past.  To avoid potential confusion and\n\
    \   interoperability problems, we are including local copies in this\n   document,\
    \ adapted from those in PKCS#1 v2.1 [RFC3447].  RFC 3447\n   should be treated\
    \ as the ultimate authority on PKCS#1 for OpenPGP.\n   Nonetheless, we believe\
    \ that there is value in having a self-\n   contained document that avoids problems\
    \ in the future with needed\n   changes in the conventions.\n"
- title: 13.1.1.  EME-PKCS1-v1_5-ENCODE
  contents:
  - "13.1.1.  EME-PKCS1-v1_5-ENCODE\n   Input:\n   k  = the length in octets of the\
    \ key modulus\n   M  = message to be encoded, an octet string of length mLen,\
    \ where\n        mLen <= k - 11\n   Output:\n   EM = encoded message, an octet\
    \ string of length k\n   Error:   \"message too long\"\n     1. Length checking:\
    \ If mLen > k - 11, output \"message too long\" and\n        stop.\n     2. Generate\
    \ an octet string PS of length k - mLen - 3 consisting of\n        pseudo-randomly\
    \ generated nonzero octets.  The length of PS will\n        be at least eight\
    \ octets.\n     3. Concatenate PS, the message M, and other padding to form an\n\
    \        encoded message EM of length k octets as\n        EM = 0x00 || 0x02 ||\
    \ PS || 0x00 || M.\n     4. Output EM.\n"
- title: 13.1.2.  EME-PKCS1-v1_5-DECODE
  contents:
  - "13.1.2.  EME-PKCS1-v1_5-DECODE\n   Input:\n   EM = encoded message, an octet\
    \ string\n   Output:\n   M  = message, an octet string\n   Error:   \"decryption\
    \ error\"\n   To decode an EME-PKCS1_v1_5 message, separate the encoded message\
    \ EM\n   into an octet string PS consisting of nonzero octets and a message M\n\
    \   as follows\n     EM = 0x00 || 0x02 || PS || 0x00 || M.\n   If the first octet\
    \ of EM does not have hexadecimal value 0x00, if the\n   second octet of EM does\
    \ not have hexadecimal value 0x02, if there is\n   no octet with hexadecimal value\
    \ 0x00 to separate PS from M, or if the\n   length of PS is less than 8 octets,\
    \ output \"decryption error\" and\n   stop.  See also the security note in Section\
    \ 14 regarding differences\n   in reporting between a decryption error and a padding\
    \ error.\n"
- title: 13.1.3.  EMSA-PKCS1-v1_5
  contents:
  - "13.1.3.  EMSA-PKCS1-v1_5\n   This encoding method is deterministic and only has\
    \ an encoding\n   operation.\n   Option:\n   Hash - a hash function in which hLen\
    \ denotes the length in octets of\n         the hash function output\n   Input:\n\
    \   M  = message to be encoded\n   mL = intended length in octets of the encoded\
    \ message, at least tLen\n        + 11, where tLen is the octet length of the\
    \ DER encoding T of a\n        certain value computed during the encoding operation\n\
    \   Output:\n   EM = encoded message, an octet string of length emLen\n   Errors:\
    \ \"message too long\"; \"intended encoded message length too\n   short\"\n  \
    \ Steps:\n     1. Apply the hash function to the message M to produce a hash value\n\
    \        H:\n        H = Hash(M).\n        If the hash function outputs \"message\
    \ too long,\" output \"message\n        too long\" and stop.\n     2. Using the\
    \ list in Section 5.2.2, produce an ASN.1 DER value for\n        the hash function\
    \ used.  Let T be the full hash prefix from\n        Section 5.2.2, and let tLen\
    \ be the length in octets of T.\n     3. If emLen < tLen + 11, output \"intended\
    \ encoded message length\n        too short\" and stop.\n     4. Generate an octet\
    \ string PS consisting of emLen - tLen - 3\n        octets with hexadecimal value\
    \ 0xFF.  The length of PS will be at\n        least 8 octets.\n     5. Concatenate\
    \ PS, the hash prefix T, and other padding to form the\n        encoded message\
    \ EM as\n        EM = 0x00 || 0x01 || PS || 0x00 || T.\n     6. Output EM.\n"
- title: 13.2.  Symmetric Algorithm Preferences
  contents:
  - "13.2.  Symmetric Algorithm Preferences\n   The symmetric algorithm preference\
    \ is an ordered list of algorithms\n   that the keyholder accepts.  Since it is\
    \ found on a self-signature,\n   it is possible that a keyholder may have multiple,\
    \ different\n   preferences.  For example, Alice may have TripleDES only specified\n\
    \   for \"alice@work.com\" but CAST5, Blowfish, and TripleDES specified for\n\
    \   \"alice@home.org\".  Note that it is also possible for preferences to\n  \
    \ be in a subkey's binding signature.\n   Since TripleDES is the MUST-implement\
    \ algorithm, if it is not\n   explicitly in the list, it is tacitly at the end.\
    \  However, it is\n   good form to place it there explicitly.  Note also that\
    \ if an\n   implementation does not implement the preference, then it is\n   implicitly\
    \ a TripleDES-only implementation.\n   An implementation MUST NOT use a symmetric\
    \ algorithm that is not in\n   the recipient's preference list.  When encrypting\
    \ to more than one\n   recipient, the implementation finds a suitable algorithm\
    \ by taking\n   the intersection of the preferences of the recipients.  Note that\
    \ the\n   MUST-implement algorithm, TripleDES, ensures that the intersection is\n\
    \   not null.  The implementation may use any mechanism to pick an\n   algorithm\
    \ in the intersection.\n   If an implementation can decrypt a message that a keyholder\
    \ doesn't\n   have in their preferences, the implementation SHOULD decrypt the\n\
    \   message anyway, but MUST warn the keyholder that the protocol has\n   been\
    \ violated.  For example, suppose that Alice, above, has software\n   that implements\
    \ all algorithms in this specification.  Nonetheless,\n   she prefers subsets\
    \ for work or home.  If she is sent a message\n   encrypted with IDEA, which is\
    \ not in her preferences, the software\n   warns her that someone sent her an\
    \ IDEA-encrypted message, but it\n   would ideally decrypt it anyway.\n"
- title: 13.3.  Other Algorithm Preferences
  contents:
  - "13.3.  Other Algorithm Preferences\n   Other algorithm preferences work similarly\
    \ to the symmetric algorithm\n   preference, in that they specify which algorithms\
    \ the keyholder\n   accepts.  There are two interesting cases that other comments\
    \ need to\n   be made about, though, the compression preferences and the hash\n\
    \   preferences.\n"
- title: 13.3.1.  Compression Preferences
  contents:
  - "13.3.1.  Compression Preferences\n   Compression has been an integral part of\
    \ PGP since its first days.\n   OpenPGP and all previous versions of PGP have\
    \ offered compression.\n   In this specification, the default is for messages\
    \ to be compressed,\n   although an implementation is not required to do so. \
    \ Consequently,\n   the compression preference gives a way for a keyholder to\
    \ request\n   that messages not be compressed, presumably because they are using\
    \ a\n   minimal implementation that does not include compression.\n   Additionally,\
    \ this gives a keyholder a way to state that it can\n   support alternate algorithms.\n\
    \   Like the algorithm preferences, an implementation MUST NOT use an\n   algorithm\
    \ that is not in the preference vector.  If the preferences\n   are not present,\
    \ then they are assumed to be [ZIP(1),\n   Uncompressed(0)].\n   Additionally,\
    \ an implementation MUST implement this preference to the\n   degree of recognizing\
    \ when to send an uncompressed message.  A robust\n   implementation would satisfy\
    \ this requirement by looking at the\n   recipient's preference and acting accordingly.\
    \  A minimal\n   implementation can satisfy this requirement by never generating\
    \ a\n   compressed message, since all implementations can handle messages\n  \
    \ that have not been compressed.\n"
- title: 13.3.2.  Hash Algorithm Preferences
  contents:
  - "13.3.2.  Hash Algorithm Preferences\n   Typically, the choice of a hash algorithm\
    \ is something the signer\n   does, rather than the verifier, because a signer\
    \ rarely knows who is\n   going to be verifying the signature.  This preference,\
    \ though, allows\n   a protocol based upon digital signatures ease in negotiation.\n\
    \   Thus, if Alice is authenticating herself to Bob with a signature, it\n   makes\
    \ sense for her to use a hash algorithm that Bob's software uses.\n   This preference\
    \ allows Bob to state in his key which algorithms Alice\n   may use.\n   Since\
    \ SHA1 is the MUST-implement hash algorithm, if it is not\n   explicitly in the\
    \ list, it is tacitly at the end.  However, it is\n   good form to place it there\
    \ explicitly.\n"
- title: 13.4.  Plaintext
  contents:
  - "13.4.  Plaintext\n   Algorithm 0, \"plaintext\", may only be used to denote secret\
    \ keys that\n   are stored in the clear.  Implementations MUST NOT use plaintext\
    \ in\n   Symmetrically Encrypted Data packets; they must use Literal Data\n  \
    \ packets to encode unencrypted or literal data.\n"
- title: 13.5.  RSA
  contents:
  - "13.5.  RSA\n   There are algorithm types for RSA Sign-Only, and RSA Encrypt-Only\n\
    \   keys.  These types are deprecated.  The \"key flags\" subpacket in a\n   signature\
    \ is a much better way to express the same idea, and\n   generalizes it to all\
    \ algorithms.  An implementation SHOULD NOT\n   create such a key, but MAY interpret\
    \ it.\n   An implementation SHOULD NOT implement RSA keys of size less than\n\
    \   1024 bits.\n"
- title: 13.6.  DSA
  contents:
  - "13.6.  DSA\n   An implementation SHOULD NOT implement DSA keys of size less than\n\
    \   1024 bits.  It MUST NOT implement a DSA key with a q size of less\n   than\
    \ 160 bits.  DSA keys MUST also be a multiple of 64 bits, and the\n   q size MUST\
    \ be a multiple of 8 bits.  The Digital Signature Standard\n   (DSS) [FIPS186]\
    \ specifies that DSA be used in one of the following\n   ways:\n     * 1024-bit\
    \ key, 160-bit q, SHA-1, SHA-224, SHA-256, SHA-384, or\n       SHA-512 hash\n\
    \     * 2048-bit key, 224-bit q, SHA-224, SHA-256, SHA-384, or SHA-512\n     \
    \  hash\n     * 2048-bit key, 256-bit q, SHA-256, SHA-384, or SHA-512 hash\n \
    \    * 3072-bit key, 256-bit q, SHA-256, SHA-384, or SHA-512 hash\n   The above\
    \ key and q size pairs were chosen to best balance the\n   strength of the key\
    \ with the strength of the hash.  Implementations\n   SHOULD use one of the above\
    \ key and q size pairs when generating DSA\n   keys.  If DSS compliance is desired,\
    \ one of the specified SHA hashes\n   must be used as well.  [FIPS186] is the\
    \ ultimate authority on DSS,\n   and should be consulted for all questions of\
    \ DSS compliance.\n   Note that earlier versions of this standard only allowed\
    \ a 160-bit q\n   with no truncation allowed, so earlier implementations may not\
    \ be\n   able to handle signatures with a different q size or a truncated\n  \
    \ hash.\n"
- title: 13.7.  Elgamal
  contents:
  - "13.7.  Elgamal\n   An implementation SHOULD NOT implement Elgamal keys of size\
    \ less than\n   1024 bits.\n"
- title: 13.8.  Reserved Algorithm Numbers
  contents:
  - "13.8.  Reserved Algorithm Numbers\n   A number of algorithm IDs have been reserved\
    \ for algorithms that\n   would be useful to use in an OpenPGP implementation,\
    \ yet there are\n   issues that prevent an implementer from actually implementing\
    \ the\n   algorithm.  These are marked in Section 9.1, \"Public-Key Algorithms\"\
    ,\n   as \"reserved for\".\n   The reserved public-key algorithms, Elliptic Curve\
    \ (18), ECDSA (19),\n   and X9.42 (21), do not have the necessary parameters,\
    \ parameter\n   order, or semantics defined.\n   Previous versions of OpenPGP\
    \ permitted Elgamal [ELGAMAL] signatures\n   with a public-key identifier of 20.\
    \  These are no longer permitted.\n   An implementation MUST NOT generate such\
    \ keys.  An implementation\n   MUST NOT generate Elgamal signatures.  See [BLEICHENBACHER].\n"
- title: 13.9.  OpenPGP CFB Mode
  contents:
  - "13.9.  OpenPGP CFB Mode\n   OpenPGP does symmetric encryption using a variant\
    \ of Cipher Feedback\n   mode (CFB mode).  This section describes the procedure\
    \ it uses in\n   detail.  This mode is what is used for Symmetrically Encrypted\
    \ Data\n   Packets; the mechanism used for encrypting secret-key material is\n\
    \   similar, and is described in the sections above.\n   In the description below,\
    \ the value BS is the block size in octets of\n   the cipher.  Most ciphers have\
    \ a block size of 8 octets.  The AES and\n   Twofish have a block size of 16 octets.\
    \  Also note that the\n   description below assumes that the IV and CFB arrays\
    \ start with an\n   index of 1 (unlike the C language, which assumes arrays start\
    \ with a\n   zero index).\n   OpenPGP CFB mode uses an initialization vector (IV)\
    \ of all zeros, and\n   prefixes the plaintext with BS+2 octets of random data,\
    \ such that\n   octets BS+1 and BS+2 match octets BS-1 and BS.  It does a CFB\n\
    \   resynchronization after encrypting those BS+2 octets.\n   Thus, for an algorithm\
    \ that has a block size of 8 octets (64 bits),\n   the IV is 10 octets long and\
    \ octets 7 and 8 of the IV are the same as\n   octets 9 and 10.  For an algorithm\
    \ with a block size of 16 octets\n   (128 bits), the IV is 18 octets long, and\
    \ octets 17 and 18 replicate\n   octets 15 and 16.  Those extra two octets are\
    \ an easy check for a\n   correct key.\n   Step by step, here is the procedure:\n\
    \   1.  The feedback register (FR) is set to the IV, which is all zeros.\n   2.\
    \  FR is encrypted to produce FRE (FR Encrypted).  This is the\n       encryption\
    \ of an all-zero value.\n   3.  FRE is xored with the first BS octets of random\
    \ data prefixed to\n       the plaintext to produce C[1] through C[BS], the first\
    \ BS octets\n       of ciphertext.\n   4.  FR is loaded with C[1] through C[BS].\n\
    \   5.  FR is encrypted to produce FRE, the encryption of the first BS\n     \
    \  octets of ciphertext.\n   6.  The left two octets of FRE get xored with the\
    \ next two octets of\n       data that were prefixed to the plaintext.  This produces\
    \ C[BS+1]\n       and C[BS+2], the next two octets of ciphertext.\n   7.  (The\
    \ resynchronization step) FR is loaded with C[3] through\n       C[BS+2].\n  \
    \ 8.  FR is encrypted to produce FRE.\n   9.  FRE is xored with the first BS octets\
    \ of the given plaintext, now\n       that we have finished encrypting the BS+2\
    \ octets of prefixed\n       data.  This produces C[BS+3] through C[BS+(BS+2)],\
    \ the next BS\n       octets of ciphertext.\n   10. FR is loaded with C[BS+3]\
    \ to C[BS + (BS+2)] (which is C11-C18 for\n       an 8-octet block).\n       11.\
    \ FR is encrypted to produce FRE.\n       12. FRE is xored with the next BS octets\
    \ of plaintext, to produce\n       the next BS octets of ciphertext.  These are\
    \ loaded into FR, and\n       the process is repeated until the plaintext is used\
    \ up.\n"
- title: 13.10.  Private or Experimental Parameters
  contents:
  - "13.10.  Private or Experimental Parameters\n   S2K specifiers, Signature subpacket\
    \ types, user attribute types,\n   image format types, and algorithms described\
    \ in Section 9 all reserve\n   the range 100 to 110 for private and experimental\
    \ use.  Packet types\n   reserve the range 60 to 63 for private and experimental\
    \ use.  These\n   are intentionally managed with the PRIVATE USE method, as described\n\
    \   in [RFC2434].\n   However, implementations need to be careful with these and\
    \ promote\n   them to full IANA-managed parameters when they grow beyond the\n\
    \   original, limited system.\n"
- title: 13.11.  Extension of the MDC System
  contents:
  - "13.11.  Extension of the MDC System\n   As described in the non-normative explanation\
    \ in Section 5.13, the\n   MDC system is uniquely unparameterized in OpenPGP.\
    \  This was an\n   intentional decision to avoid cross-grade attacks.  If the\
    \ MDC system\n   is extended to a stronger hash function, care must be taken to\
    \ avoid\n   downgrade and cross-grade attacks.\n   One simple way to do this is\
    \ to create new packets for a new MDC.\n   For example, instead of the MDC system\
    \ using packets 18 and 19, a new\n   MDC could use 20 and 21.  This has obvious\
    \ drawbacks (it uses two\n   packet numbers for each new hash function in a space\
    \ that is limited\n   to a maximum of 60).\n   Another simple way to extend the\
    \ MDC system is to create new versions\n   of packet 18, and reflect this in packet\
    \ 19.  For example, suppose\n   that V2 of packet 18 implicitly used SHA-256.\
    \  This would require\n   packet 19 to have a length of 32 octets.  The change\
    \ in the version\n   in packet 18 and the size of packet 19 prevent a downgrade\
    \ attack.\n   There are two drawbacks to this latter approach.  The first is that\n\
    \   using the version number of a packet to carry algorithm information\n   is\
    \ not tidy from a protocol-design standpoint.  It is possible that\n   there might\
    \ be several versions of the MDC system in common use, but\n   this untidiness\
    \ would reflect untidiness in cryptographic consensus\n   about hash function\
    \ security.  The second is that different versions\n   of packet 19 would have\
    \ to have unique sizes.  If there were two\n   versions each with 256-bit hashes,\
    \ they could not both have 32-octet\n   packet 19s without admitting the chance\
    \ of a cross-grade attack.\n   Yet another, complex approach to extend the MDC\
    \ system would be a\n   hybrid of the two above -- create a new pair of MDC packets\
    \ that are\n   fully parameterized, and yet protected from downgrade and cross-\n\
    \   grade.\n   Any change to the MDC system MUST be done through the IETF CONSENSUS\n\
    \   method, as described in [RFC2434].\n"
- title: 13.12.  Meta-Considerations for Expansion
  contents:
  - "13.12.  Meta-Considerations for Expansion\n   If OpenPGP is extended in a way\
    \ that is not backwards-compatible,\n   meaning that old implementations will\
    \ not gracefully handle their\n   absence of a new feature, the extension proposal\
    \ can be declared in\n   the key holder's self-signature as part of the Features\
    \ signature\n   subpacket.\n   We cannot state definitively what extensions will\
    \ not be upwards-\n   compatible, but typically new algorithms are upwards-compatible,\n\
    \   whereas new packets are not.\n   If an extension proposal does not update\
    \ the Features system, it\n   SHOULD include an explanation of why this is unnecessary.\
    \  If the\n   proposal contains neither an extension to the Features system nor\
    \ an\n   explanation of why such an extension is unnecessary, the proposal\n \
    \  SHOULD be rejected.\n"
- title: 14.  Security Considerations
  contents:
  - "14.  Security Considerations\n   * As with any technology involving cryptography,\
    \ you should check the\n     current literature to determine if any algorithms\
    \ used here have\n     been found to be vulnerable to attack.\n   * This specification\
    \ uses Public-Key Cryptography technologies.  It\n     is assumed that the private\
    \ key portion of a public-private key\n     pair is controlled and secured by\
    \ the proper party or parties.\n   * Certain operations in this specification\
    \ involve the use of random\n     numbers.  An appropriate entropy source should\
    \ be used to generate\n     these numbers (see [RFC4086]).\n   * The MD5 hash\
    \ algorithm has been found to have weaknesses, with\n     collisions found in\
    \ a number of cases.  MD5 is deprecated for use\n     in OpenPGP.  Implementations\
    \ MUST NOT generate new signatures using\n     MD5 as a hash function.  They MAY\
    \ continue to consider old\n     signatures that used MD5 as valid.\n   * SHA-224\
    \ and SHA-384 require the same work as SHA-256 and SHA-512,\n     respectively.\
    \  In general, there are few reasons to use them\n     outside of DSS compatibility.\
    \  You need a situation where one needs\n     more security than smaller hashes,\
    \ but does not want to have the\n     full 256-bit or 512-bit data length.\n \
    \  * Many security protocol designers think that it is a bad idea to use\n   \
    \  a single key for both privacy (encryption) and integrity\n     (signatures).\
    \  In fact, this was one of the motivating forces\n     behind the V4 key format\
    \ with separate signature and encryption\n     keys.  If you as an implementer\
    \ promote dual-use keys, you should\n     at least be aware of this controversy.\n\
    \   * The DSA algorithm will work with any hash, but is sensitive to the\n   \
    \  quality of the hash algorithm.  Verifiers should be aware that even\n     if\
    \ the signer used a strong hash, an attacker could have modified\n     the signature\
    \ to use a weak one.  Only signatures using acceptably\n     strong hash algorithms\
    \ should be accepted as valid.\n   * As OpenPGP combines many different asymmetric,\
    \ symmetric, and hash\n     algorithms, each with different measures of strength,\
    \ care should\n     be taken that the weakest element of an OpenPGP message is\
    \ still\n     sufficiently strong for the purpose at hand.  While consensus about\n\
    \     the strength of a given algorithm may evolve, NIST Special\n     Publication\
    \ 800-57 [SP800-57] recommends the following list of\n     equivalent strengths:\n\
    \           Asymmetric  |  Hash  |  Symmetric\n            key size   |  size\
    \  |   key size\n           ------------+--------+-----------\n              1024\
    \        160         80\n              2048        224        112\n          \
    \    3072        256        128\n              7680        384        192\n  \
    \           15360        512        256\n   * There is a somewhat-related potential\
    \ security problem in\n     signatures.  If an attacker can find a message that\
    \ hashes to the\n     same hash with a different algorithm, a bogus signature\
    \ structure\n     can be constructed that evaluates correctly.\n     For example,\
    \ suppose Alice DSA signs message M using hash algorithm\n     H.  Suppose that\
    \ Mallet finds a message M' that has the same hash\n     value as M with H'. \
    \ Mallet can then construct a signature block\n     that verifies as Alice's signature\
    \ of M' with H'.  However, this\n     would also constitute a weakness in either\
    \ H or H' or both.  Should\n     this ever occur, a revision will have to be made\
    \ to this document\n     to revise the allowed hash algorithms.\n   * If you are\
    \ building an authentication system, the recipient may\n     specify a preferred\
    \ signing algorithm.  However, the signer would\n     be foolish to use a weak\
    \ algorithm simply because the recipient\n     requests it.\n   * Some of the\
    \ encryption algorithms mentioned in this document have\n     been analyzed less\
    \ than others.  For example, although CAST5 is\n     presently considered strong,\
    \ it has been analyzed less than\n     TripleDES.  Other algorithms may have other\
    \ controversies\n     surrounding them.\n   * In late summer 2002, Jallad, Katz,\
    \ and Schneier published an\n     interesting attack on the OpenPGP protocol and\
    \ some of its\n     implementations [JKS02].  In this attack, the attacker modifies\
    \ a\n     message and sends it to a user who then returns the erroneously\n  \
    \   decrypted message to the attacker.  The attacker is thus using the\n     user\
    \ as a random oracle, and can often decrypt the message.\n     Compressing data\
    \ can ameliorate this attack.  The incorrectly\n     decrypted data nearly always\
    \ decompresses in ways that defeat the\n     attack.  However, this is not a rigorous\
    \ fix, and leaves open some\n     small vulnerabilities.  For example, if an implementation\
    \ does not\n     compress a message before encryption (perhaps because it knows\
    \ it\n     was already compressed), then that message is vulnerable.  Because\n\
    \     of this happenstance -- that modification attacks can be thwarted\n    \
    \ by decompression errors -- an implementation SHOULD treat a\n     decompression\
    \ error as a security problem, not merely a data\n     problem.\n     This attack\
    \ can be defeated by the use of Modification Detection,\n     provided that the\
    \ implementation does not let the user naively\n     return the data to the attacker.\
    \  An implementation MUST treat an\n     MDC failure as a security problem, not\
    \ merely a data problem.\n     In either case, the implementation MAY allow the\
    \ user access to the\n     erroneous data, but MUST warn the user as to potential\
    \ security\n     problems should that data be returned to the sender.\n     While\
    \ this attack is somewhat obscure, requiring a special set of\n     circumstances\
    \ to create it, it is nonetheless quite serious as it\n     permits someone to\
    \ trick a user to decrypt a message.\n     Consequently, it is important that:\n\
    \      1. Implementers treat MDC errors and decompression failures as\n      \
    \   security problems.\n      2. Implementers implement Modification Detection\
    \ with all due\n         speed and encourage its spread.\n      3. Users migrate\
    \ to implementations that support Modification\n         Detection with all due\
    \ speed.\n   * PKCS#1 has been found to be vulnerable to attacks in which a system\n\
    \     that reports errors in padding differently from errors in\n     decryption\
    \ becomes a random oracle that can leak the private key in\n     mere millions\
    \ of queries.  Implementations must be aware of this\n     attack and prevent\
    \ it from happening.  The simplest solution is to\n     report a single error\
    \ code for all variants of decryption errors so\n     as not to leak information\
    \ to an attacker.\n   * Some technologies mentioned here may be subject to government\n\
    \     control in some countries.\n   * In winter 2005, Serge Mister and Robert\
    \ Zuccherato from Entrust\n     released a paper describing a way that the \"\
    quick check\" in OpenPGP\n     CFB mode can be used with a random oracle to decrypt\
    \ two octets of\n     every cipher block [MZ05].  They recommend as prevention\
    \ not using\n     the quick check at all.\n     Many implementers have taken this\
    \ advice to heart for any data that\n     is symmetrically encrypted and for which\
    \ the session key is\n     public-key encrypted.  In this case, the quick check\
    \ is not needed\n     as the public-key encryption of the session key should guarantee\n\
    \     that it is the right session key.  In other cases, the\n     implementation\
    \ should use the quick check with care.\n     On the one hand, there is a danger\
    \ to using it if there is a random\n     oracle that can leak information to an\
    \ attacker.  In plainer\n     language, there is a danger to using the quick check\
    \ if timing\n     information about the check can be exposed to an attacker,\n\
    \     particularly via an automated service that allows rapidly repeated\n   \
    \  queries.\n     On the other hand, it is inconvenient to the user to be informed\n\
    \     that they typed in the wrong passphrase only after a petabyte of\n     data\
    \ is decrypted.  There are many cases in cryptographic\n     engineering where\
    \ the implementer must use care and wisdom, and\n     this is one.\n"
- title: 15.  Implementation Nits
  contents:
  - "15.  Implementation Nits\n   This section is a collection of comments to help\
    \ an implementer,\n   particularly with an eye to backward compatibility.  Previous\n\
    \   implementations of PGP are not OpenPGP compliant.  Often the\n   differences\
    \ are small, but small differences are frequently more\n   vexing than large differences.\
    \  Thus, this is a non-comprehensive\n   list of potential problems and gotchas\
    \ for a developer who is trying\n   to be backward-compatible.\n     * The IDEA\
    \ algorithm is patented, and yet it is required for PGP\n       2.x interoperability.\
    \  It is also the de-facto preferred\n       algorithm for a V3 key with a V3\
    \ self-signature (or no self-\n       signature).\n     * When exporting a private\
    \ key, PGP 2.x generates the header \"BEGIN\n       PGP SECRET KEY BLOCK\" instead\
    \ of \"BEGIN PGP PRIVATE KEY BLOCK\".\n       All previous versions ignore the\
    \ implied data type, and look\n       directly at the packet data type.\n    \
    \ * PGP 2.0 through 2.5 generated V2 Public-Key packets.  These are\n       identical\
    \ to the deprecated V3 keys except for the version\n       number.  An implementation\
    \ MUST NOT generate them and may accept\n       or reject them as it sees fit.\
    \  Some older PGP versions generated\n       V2 PKESK packets (Tag 1) as well.\
    \  An implementation may accept\n       or reject V2 PKESK packets as it sees\
    \ fit, and MUST NOT generate\n       them.\n     * PGP 2.6.x will not accept key-material\
    \ packets with versions\n       greater than 3.\n     * There are many ways possible\
    \ for two keys to have the same key\n       material, but different fingerprints\
    \ (and thus Key IDs).  Perhaps\n       the most interesting is an RSA key that\
    \ has been \"upgraded\" to V4\n       format, but since a V4 fingerprint is constructed\
    \ by hashing the\n       key creation time along with other things, two V4 keys\
    \ created at\n       different times, yet with the same key material will have\n\
    \       different fingerprints.\n     * If an implementation is using zlib to\
    \ interoperate with PGP 2.x,\n       then the \"windowBits\" parameter should\
    \ be set to -13.\n     * The 0x19 back signatures were not required for signing\
    \ subkeys\n       until relatively recently.  Consequently, there may be keys\
    \ in\n       the wild that do not have these back signatures.  Implementing\n\
    \       software may handle these keys as it sees fit.\n     * OpenPGP does not\
    \ put limits on the size of public keys.  However,\n       larger keys are not\
    \ necessarily better keys.  Larger keys take\n       more computation time to\
    \ use, and this can quickly become\n       impractical.  Different OpenPGP implementations\
    \ may also use\n       different upper bounds for public key sizes, and so care\
    \ should\n       be taken when choosing sizes to maintain interoperability.  As\
    \ of\n       2007 most implementations have an upper bound of 4096 bits.\n   \
    \  * ASCII armor is an optional feature of OpenPGP.  The OpenPGP\n       working\
    \ group strives for a minimal set of mandatory-to-implement\n       features,\
    \ and since there could be useful implementations that\n       only use binary\
    \ object formats, this is not a \"MUST\" feature for\n       an implementation.\
    \  For example, an implementation that is using\n       OpenPGP as a mechanism\
    \ for file signatures may find ASCII armor\n       unnecessary. OpenPGP permits\
    \ an implementation to declare what\n       features it does and does not support,\
    \ but ASCII armor is not one\n       of these.  Since most implementations allow\
    \ binary and armored\n       objects to be used indiscriminately, an implementation\
    \ that does\n       not implement ASCII armor may find itself with compatibility\n\
    \       issues with general-purpose implementations.  Moreover,\n       implementations\
    \ of OpenPGP-MIME [RFC3156] already have a\n       requirement for ASCII armor\
    \ so those implementations will\n       necessarily have support.\n"
- title: 16.  References
  contents:
  - '16.  References

    '
- title: 16.1.  Normative References
  contents:
  - "16.1.  Normative References\n   [AES]            NIST, FIPS PUB 197, \"Advanced\
    \ Encryption Standard\n                    (AES),\" November 2001.\n         \
    \           http://csrc.nist.gov/publications/fips/fips197/fips-\n           \
    \         197.{ps,pdf}\n   [BLOWFISH]       Schneier, B. \"Description of a New\
    \ Variable-Length\n                    Key, 64-Bit Block Cipher (Blowfish)\" Fast\
    \ Software\n                    Encryption, Cambridge Security Workshop Proceedings\n\
    \                    (December 1993), Springer-Verlag, 1994, pp191-204\n     \
    \               <http://www.counterpane.com/bfsverlag.html>\n   [BZ2]        \
    \    J. Seward, jseward@acm.org, \"The Bzip2 and libbzip2\n                  \
    \  home page\" <http://www.bzip.org/>\n   [ELGAMAL]        T. Elgamal, \"A Public-Key\
    \ Cryptosystem and a\n                    Signature Scheme Based on Discrete Logarithms,\"\
    \ IEEE\n                    Transactions on Information Theory, v. IT-31, n. 4,\n\
    \                    1985, pp. 469-472.\n   [FIPS180]        Secure Hash Signature\
    \ Standard (SHS) (FIPS PUB 180-\n                    2).\n                   \
    \ <http://csrc.nist.gov/publications/fips/fips180-\n                    2/fips180-2withchangenotice.pdf>\n\
    \   [FIPS186]        Digital Signature Standard (DSS) (FIPS PUB 186-2).\n    \
    \                <http://csrc.nist.gov/publications/fips/fips186-2/\n        \
    \             fips186-2-change1.pdf> FIPS 186-3 describes keys\n             \
    \       greater than 1024 bits.  The latest draft is at:\n                   \
    \ <http://csrc.nist.gov/publications/drafts/\n                    fips_186-3/Draft-FIPS-186-3%20_March2006.pdf>\n\
    \   [HAC]            Alfred Menezes, Paul van Oorschot, and Scott\n          \
    \          Vanstone, \"Handbook of Applied Cryptography,\" CRC\n             \
    \       Press, 1996.\n                    <http://www.cacr.math.uwaterloo.ca/hac/>\n\
    \   [IDEA]           Lai, X, \"On the design and security of block\n         \
    \           ciphers\", ETH Series in Information Processing, J.L.\n          \
    \          Massey (editor), Vol. 1, Hartung-Gorre Verlag\n                   \
    \ Knostanz, Technische Hochschule (Zurich), 1992\n   [ISO10646]       ISO/IEC\
    \ 10646-1:1993. International Standard --\n                    Information technology\
    \ -- Universal Multiple-Octet\n                    Coded Character Set (UCS) --\
    \ Part 1: Architecture\n                    and Basic Multilingual Plane.\n  \
    \ [JFIF]           JPEG File Interchange Format (Version 1.02).  Eric\n      \
    \              Hamilton, C-Cube Microsystems, Milpitas, CA,\n                \
    \    September 1, 1992.\n   [RFC1950]        Deutsch, P. and J-L. Gailly, \"ZLIB\
    \ Compressed Data\n                    Format Specification version 3.3\", RFC\
    \ 1950, May\n                    1996.\n   [RFC1951]        Deutsch, P., \"DEFLATE\
    \ Compressed Data Format\n                    Specification version 1.3\", RFC\
    \ 1951, May 1996.\n   [RFC2045]        Freed, N. and N. Borenstein, \"Multipurpose\
    \ Internet\n                    Mail Extensions (MIME) Part One: Format of Internet\n\
    \                    Message Bodies\", RFC 2045, November 1996\n   [RFC2119] \
    \       Bradner, S., \"Key words for use in RFCs to Indicate\n               \
    \     Requirement Levels\", BCP 14, RFC 2119, March 1997.\n   [RFC2144]      \
    \  Adams, C., \"The CAST-128 Encryption Algorithm\", RFC\n                   \
    \ 2144, May 1997.\n   [RFC2434]        Narten, T. and H. Alvestrand, \"Guidelines\
    \ for\n                    Writing an IANA Considerations Section in RFCs\", BCP\n\
    \                    26, RFC 2434, October 1998.\n   [RFC2822]        Resnick,\
    \ P., \"Internet Message Format\", RFC 2822,\n                    April 2001.\n\
    \   [RFC3156]        Elkins, M., Del Torto, D., Levien, R., and T.\n         \
    \           Roessler, \"MIME Security with OpenPGP\", RFC 3156,\n            \
    \        August 2001.\n   [RFC3447]        Jonsson, J. and B. Kaliski, \"Public-Key\
    \ Cryptography\n                    Standards (PKCS) #1: RSA Cryptography Specifications\n\
    \                    Version 2.1\", RFC 3447, February 2003.\n   [RFC3629]   \
    \     Yergeau, F., \"UTF-8, a transformation format of ISO\n                 \
    \   10646\", STD 63, RFC 3629, November 2003.\n   [RFC4086]        Eastlake, D.,\
    \ 3rd, Schiller, J., and S. Crocker,\n                    \"Randomness Requirements\
    \ for Security\", BCP 106, RFC\n                    4086, June 2005.\n   [SCHNEIER]\
    \      Schneier, B., \"Applied Cryptography Second Edition:\n                \
    \    protocols, algorithms, and source code in C\", 1996.\n   [TWOFISH]      \
    \  B. Schneier, J. Kelsey, D. Whiting, D. Wagner, C.\n                    Hall,\
    \ and N. Ferguson, \"The Twofish Encryption\n                    Algorithm\",\
    \ John Wiley & Sons, 1999.\n"
- title: 16.2.  Informative References
  contents:
  - "16.2.  Informative References\n   [BLEICHENBACHER] Bleichenbacher, Daniel, \"\
    Generating Elgamal\n                    signatures without knowing the secret\
    \ key,\"\n                    Eurocrypt 96. Note that the version in the\n   \
    \                 proceedings has an error. A revised version is\n           \
    \         available at the time of writing from\n                    <ftp://ftp.inf.ethz.ch/pub/publications/papers/ti\n\
    \                    /isc/ElGamal.ps>\n   [JKS02]          Kahil Jallad, Jonathan\
    \ Katz, Bruce Schneier\n                    \"Implementation of Chosen-Ciphertext\
    \ Attacks against\n                    PGP and GnuPG\" http://www.counterpane.com/pgp-\n\
    \                    attack.html\n   [MAURER]         Ueli Maurer, \"Modelling\
    \ a Public-Key\n                    Infrastructure\", Proc. 1996 European Symposium\
    \ on\n                    Research in Computer Security (ESORICS' 96), Lecture\n\
    \                    Notes in Computer Science, Springer-Verlag, vol.\n      \
    \              1146, pp. 325-350, Sep 1996.\n   [MZ05]           Serge Mister,\
    \ Robert Zuccherato, \"An Attack on CFB\n                    Mode Encryption As\
    \ Used By OpenPGP,\" IACR ePrint\n                    Archive: Report 2005/033,\
    \ 8 Feb 2005\n                    http://eprint.iacr.org/2005/033\n   [REGEX]\
    \          Jeffrey Friedl, \"Mastering Regular Expressions,\"\n              \
    \      O'Reilly, ISBN 0-596-00289-0.\n   [RFC1423]        Balenson, D., \"Privacy\
    \ Enhancement for Internet\n                    Electronic Mail: Part III: Algorithms,\
    \ Modes, and\n                    Identifiers\", RFC 1423, February 1993.\n  \
    \ [RFC1991]        Atkins, D., Stallings, W., and P. Zimmermann, \"PGP\n     \
    \               Message Exchange Formats\", RFC 1991, August 1996.\n   [RFC2440]\
    \        Callas, J., Donnerhacke, L., Finney, H., and R.\n                   \
    \ Thayer, \"OpenPGP Message Format\", RFC 2440, November\n                   \
    \ 1998.\n   [SP800-57]       NIST Special Publication 800-57, Recommendation on\n\
    \                    Key Management\n                    <http://csrc.nist.gov/publications/nistpubs/\
    \ 800-\n                    57/SP800-57-Part1.pdf>\n                    <http://csrc.nist.gov/publications/nistpubs/\
    \ 800-\n                    57/SP800-57-Part2.pdf>\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   This memo also draws on much previous work from a number\
    \ of other\n   authors, including: Derek Atkins, Charles Breed, Dave Del Torto,\
    \ Marc\n   Dyksterhouse, Gail Haspert, Gene Hoffman, Paul Hoffman, Ben Laurie,\n\
    \   Raph Levien, Colin Plumb, Will Price, David Shaw, William Stallings,\n   Mark\
    \ Weaver, and Philip R. Zimmermann.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   The working group can be contacted via the current chair:\n\
    \      Derek Atkins\n      IHTFP Consulting, Inc.\n      4 Farragut Ave\n    \
    \  Somerville, MA  02144  USA\n      EMail: derek@ihtfp.com\n      Tel: +1 617\
    \ 623 3745\n   The principal authors of this document are as follows:\n      Jon\
    \ Callas\n      EMail: jon@callas.org\n      Lutz Donnerhacke\n      IKS GmbH\n\
    \      Wildenbruchstr. 15\n      07745 Jena, Germany\n      EMail: lutz@iks-jena.de\n\
    \      Hal Finney\n      EMail: hal@finney.org\n      David Shaw\n      EMail:\
    \ dshaw@jabberwocky.com\n      Rodney Thayer\n      EMail: rodney@canola-jones.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2007).\n   This document\
    \ is subject to the rights, licenses and restrictions\n   contained in BCP 78,\
    \ and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE\
    \ INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED,\
    \ INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION\
    \ HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY\
    \ OR FITNESS FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
