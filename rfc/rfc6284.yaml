- title: __initial_text__
  contents:
  - '        Port Mapping between Unicast and Multicast RTP Sessions

    '
- title: Abstract
  contents:
  - "Abstract\n   This document presents a port mapping solution that allows RTP\n\
    \   receivers to choose their own ports for an auxiliary unicast session\n   in\
    \ RTP applications using both unicast and multicast services.  The\n   solution\
    \ provides protection against denial-of-service or packet\n   amplification attacks\
    \ that could be used to cause one or more RTP\n   packets to be sent to a victim\
    \ client.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6284.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2011 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  3\n   2.  Requirements Notation  . . . . . . . . . . . . . . .\
    \ . . . . .  4\n   3.  Token-Based Port Mapping . . . . . . . . . . . . . . .\
    \ . . . .  5\n     3.1.  Motivating Scenario  . . . . . . . . . . . . . . . .\
    \ . . .  6\n     3.2.  Normative Behavior and Requirements  . . . . . . . . .\
    \ . .  9\n   4.  Message Formats  . . . . . . . . . . . . . . . . . . . . . .\
    \ . 11\n     4.1.  Port Mapping Request . . . . . . . . . . . . . . . . . . .\
    \ 12\n     4.2.  Port Mapping Response  . . . . . . . . . . . . . . . . . . 13\n\
    \     4.3.  Token Verification Request . . . . . . . . . . . . . . . . 15\n  \
    \     4.3.1.  Where to Include Token . . . . . . . . . . . . . . . . 16\n    \
    \ 4.4.  Token Verification Failure . . . . . . . . . . . . . . . . 17\n   5. \
    \ Procedures for Token Construction  . . . . . . . . . . . . . . 18\n   6.  Validating\
    \ Tokens  . . . . . . . . . . . . . . . . . . . . . . 20\n   7.  SDP Signaling\
    \  . . . . . . . . . . . . . . . . . . . . . . . . 21\n     7.1.  The 'portmapping-req'\
    \ Attribute  . . . . . . . . . . . . . 21\n       7.1.1.  ABNF Definition of 'portmapping-req'\
    \ . . . . . . . . . 21\n       7.1.2.  Offer/Answer Model Considerations  . .\
    \ . . . . . . . . 22\n     7.2.  Requirements . . . . . . . . . . . . . . . .\
    \ . . . . . . . 22\n     7.3.  Example and Discussion . . . . . . . . . . . .\
    \ . . . . . . 23\n   8.  Address Pooling NATs . . . . . . . . . . . . . . . .\
    \ . . . . . 24\n   9.  Security Considerations  . . . . . . . . . . . . . . .\
    \ . . . . 24\n     9.1.  Tokens . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . 24\n     9.2.  The 'portmapping-req' Attribute  . . . . . . . . . . .\
    \ . . 26\n   10. IANA Considerations  . . . . . . . . . . . . . . . . . . . .\
    \ . 26\n     10.1. Registration of SDP Attributes . . . . . . . . . . . . . .\
    \ 26\n     10.2. Registration of RTCP Control Packet Types  . . . . . . . . 27\n\
    \     10.3. SMT Values for TOKEN Packet Type Registry  . . . . . . . . 27\n  \
    \   10.4. RAMS Response Code Space Registry  . . . . . . . . . . . . 27\n   11.\
    \ Acknowledgments  . . . . . . . . . . . . . . . . . . . . . . . 28\n   12. References\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . 28\n     12.1. Normative\
    \ References . . . . . . . . . . . . . . . . . . . 28\n     12.2. Informative\
    \ References . . . . . . . . . . . . . . . . . . 29\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   In (any-source or source-specific) multicast RTP applications,\n\
    \   destination ports (i.e., the ports on which the multicast receivers\n   receive\
    \ the RTP and RTP Control Protocol (RTCP) packets) are defined\n   declaratively.\
    \  In other words, the receivers cannot choose their\n   receive ports, and the\
    \ sender(s) use the predefined ports.\n   In unicast RTP applications, the receiving\
    \ end needs to choose its\n   ports for RTP and RTCP since these ports are local\
    \ resources and only\n   the receiving end can determine which ports are available\
    \ to use.  In\n   addition, Network Address Port Translation (NAPT, hereafter\
    \ simply\n   called NAT) devices are commonly deployed in networks; thus, static\n\
    \   port assignments cannot be used.  The receiving end may convey its\n   request\
    \ to the sending end through different ways, one of which is\n   the Offer/Answer\
    \ Model [RFC3264] for the Session Description Protocol\n   (SDP) [RFC4566].  However,\
    \ the Offer/Answer Model requires offer/\n   answer exchange(s) between the endpoints,\
    \ and the resulting delay may\n   not be desirable in delay-sensitive real-time\
    \ applications.\n   Furthermore, the Offer/Answer Model may be burdensome for\
    \ the\n   endpoints that are concurrently running a large number of unicast\n\
    \   sessions with other endpoints.\n   In this specification, we consider an RTP\
    \ application that uses one\n   or more unicast and multicast RTP sessions together.\
    \  While the\n   declaration and selection of the ports are well defined and work\
    \ well\n   for multicast and unicast RTP applications, respectively, the usage\n\
    \   of the ports introduces complications when a receiving end mixes\n   unicast\
    \ and multicast RTP sessions within the same RTP application.\n   An example scenario\
    \ is where the RTP packets are distributed through\n   source-specific multicast\
    \ (SSM) [RFC4607] and a receiver sends\n   unicast RTCP NACK feedback [RFC4585]\
    \ to a local repair server (also\n   functioning as a unicast RTCP feedback target)\
    \ [RFC5760] asking for a\n   retransmission of the packets it is missing, and\
    \ the local repair\n   server sends the retransmission packets over a unicast\
    \ RTP session\n   [RETRANSMISSION-FOR-SSM].\n   Another scenario is where a receiver\
    \ wants to rapidly acquire a new\n   primary multicast RTP session and receives\
    \ one or more RTP burst\n   packets over a unicast session before joining the\
    \ SSM session; see\n   [RFC6285] regarding Rapid Acquisition of Multicast RTP\
    \ Sessions\n   (RAMS).  Similar scenarios exist in applications where some part\
    \ of\n   the content is distributed through multicast while the receivers get\n\
    \   additional and/or auxiliary content through one or more unicast\n   connections,\
    \ as illustrated in Figure 1.\n   In this document, we discuss this problem and\
    \ introduce a solution\n   that we refer to as port mapping.  This solution allows\
    \ receivers to\n   choose their desired UDP ports for RTP and RTCP in every unicast\n\
    \   session when they are running RTP applications using both unicast and\n  \
    \ multicast services and offer/answer exchange is not available.  The\n   solution\
    \ includes a Token-based protection mechanism against denial-\n   of-service (DoS)\
    \ or packet amplification attacks that could be used\n   to cause one or more\
    \ RTP packets to be sent to a victim client.  This\n   solution is not applicable\
    \ in cases where TCP is used as the\n   transport protocol in the unicast sessions.\
    \  For such scenarios,\n   refer to [RFC4145].\n          -----------\n      \
    \   |  Unicast  |................\n         |  Source   |.............  :\n  \
    \       | (Server)  |            :  :\n          -----------             :  :\n\
    \                                  v  v\n          -----------          ----------\
    \             -----------\n         | Multicast |------->|  Router  |---------->|Client\
    \ RTP |\n         |  Source   |        |          |..........>|Application|\n\
    \          -----------          ----------             -----------\n         \
    \                          | :\n                                   | :       \
    \         -----------\n                                   | :..............>|Client\
    \ RTP |\n                                   +---------------->|Application|\n\
    \                                                      -----------\n         ------->\
    \ Multicast RTP Flow\n         .......> Unicast RTP Flow\n     Figure 1: RTP Applications\
    \ Simultaneously Using Both Unicast and\n                            Multicast\
    \ Services\n   In the remainder of this document, we refer to the RTP endpoints\
    \ that\n   serve other RTP endpoints over a unicast session as the Servers.  The\n\
    \   receiving RTP endpoints are referred to as Clients.  This terminology\n  \
    \ also reflects the fact that when port mapping is used, the RTP\n   packets can\
    \ only flow in one direction (from the server to the\n   client) in the unicast\
    \ sessions.\n"
- title: 2.  Requirements Notation
  contents:
  - "2.  Requirements Notation\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    NOT RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted\
    \ as described in\n   [RFC2119].\n"
- title: 3.  Token-Based Port Mapping
  contents:
  - "3.  Token-Based Port Mapping\n   Token-based port mapping consists of the server\
    \ providing the client\n   a Token that can be used to establish a unicast session\
    \ without the\n   possibility of an attacker redirecting traffic to an unsuspecting\n\
    \   third party to create a DoS attack.  The Token is essentially an\n   opaque\
    \ encapsulation that is based on the client's IP address (as\n   seen by the server),\
    \ a time-to-live value, and a random nonce\n   provided by the client.\n   Token-based\
    \ port mapping consists of two steps: (i) Token request and\n   retrieval, and\
    \ (ii) unicast session establishment.\n   When a Token request is received, the\
    \ server creates a Token for this\n   particular client and sends it back to the\
    \ client.\n   Once a Token is retrieved from a particular server, it can be used\n\
    \   for all the unicast sessions the client will be running with this\n   particular\
    \ server until the Token expires.  By default, Tokens are\n   server specific.\
    \  However, the client can use the same Token to\n   communicate with different\
    \ servers if these servers are provided with\n   the same secret key and algorithm\
    \ used to generate the Token and are\n   at least loosely clock-synchronized.\n\
    \   The Token becomes invalid if the client's IP address (as seen by the\n   server)\
    \ changes (note that the client cannot necessarily detect this\n   in a timely\
    \ manner) or if the server expires the Token.  In these\n   cases, the client\
    \ has to request a new Token.\n   As the second step, when the client wants to\
    \ establish a unicast\n   session, the client includes the Token with its RTCP\
    \ feedback\n   message.  The server validates the Token, making sure that the\
    \ IP\n   address information matches.  This is effective against DoS attacks,\n\
    \   e.g., an attacker cannot simply spoof another client's IP address and\n  \
    \ start a unicast transmission towards random clients.  If the\n   validation\
    \ passes, the unicast session gets established.  Otherwise,\n   the server notifies\
    \ the client that the validation has failed, and in\n   this case, the unicast\
    \ session will not be established.\n   Upon successful validation and once the\
    \ unicast session is\n   established, all the RTP and RTCP rules specified in\
    \ [RFC3550] and\n   other relevant specifications also apply in this session until\
    \ it is\n   terminated.  During the lifetime of a unicast session, a client might\n\
    \   need to send RTCP messages that require authorization.  Since such\n   messages\
    \ require a valid Token for authorization, the client needs to\n   include the\
    \ Token along with such RTCP messages as explained in\n   detail in later sections\
    \ of this document.\n   Below, we first present a motivating scenario for port\
    \ mapping and\n   then describe the normative behavior and requirements.\n"
- title: 3.1.  Motivating Scenario
  contents:
  - "3.1.  Motivating Scenario\n   Consider an SSM distribution network where a distribution\
    \ source\n   multicasts RTP packets to a large number of clients, and one or more\n\
    \   retransmission servers function as feedback targets to collect\n   unicast\
    \ RTCP feedback from these clients [RFC5760].  The\n   retransmission servers\
    \ also join the multicast session to receive the\n   multicast packets and cache\
    \ them for a certain time period.  When a\n   client detects missing packets in\
    \ the multicast session, it requests\n   a retransmission from one of the retransmission\
    \ servers by using an\n   RTCP NACK message [RFC4585].  The retransmission server\
    \ pulls the\n   requested packet(s) out of the cache and retransmits them to the\n\
    \   requesting client [RETRANSMISSION-FOR-SSM].\n   The RTP and RTCP flows pertaining\
    \ to the scenario described above are\n   illustrated in Figure 2.  Between the\
    \ client and server, we assume\n   there exists at least one NAT device [RFC4787].\
    \  (If there are no NAT\n   devices between the server and client, the method\
    \ still works in the\n   same fashion.)  The multicast and unicast sessions are\
    \ clearly\n   identified with their individual RTP and RTCP flows and port numbers.\n\
    \     --------------                                 ---     ----------\n    |\
    \              |-------------------------------|   |-->|P1        |\n    |   \
    \           |-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-|   |.->|P2        |\n    |      \
    \        |                               |   |   |          |\n    | Distribution\
    \ |      ----------------         |   |   |          |\n    |    Source    | \
    \    |                |        |   |   |          |\n    |              |---->|P1\
    \              |        |   |   |          |\n    |              |.-.->|P2   \
    \           |        |   |   |          |\n    |              |     |        \
    \        |        |   |   |          |\n     --------------      |           \
    \   P3|<.=.=.=.|   |=.=|*c0       |\n                         |              P3|<~~~~~~~|\
    \   |~~~|*c1       |\n    MULTICAST RTP        |                |        |   |\
    \   |          |\n    SESSION with         |                |        | N |   |\
    \          |\n    UNICAST FEEDBACK     |                |        | A |   |   \
    \       |\n                         | Retransmission |        | T |   |  Client\
    \  |\n    - - - - - - - - - - -| - - - - - - - -| - - - -| - |- -| - - - - -|-\n\
    \                         |     Server     |        |   |   |          |\n   \
    \                      |                |        |   |   |          |\n    PORT\
    \ MAPPING         |              PT|<~~~~~~~|   |~~>|*cT       |\n           \
    \              |                |        |   |   |          |\n    - - - - - -\
    \ - - - - -| - - - - - - - -| - - - -| - |- -| - - - - -|-\n                 \
    \        |                |        |   |   |          |\n    AUXILIARY UNICAST\
    \    |                |        |   |   |          |\n    RTP SESSION         \
    \ |                |        |   |   |          |\n                         | \
    \             P3|........|   |..>|*c1       |\n                         |    \
    \          P3|=.=.=.=.|   |=.>|*c1       |\n                         |       \
    \       P4|<.=.=.=.|   |=.=|*c2       |\n                         |          \
    \      |        |   |   |          |\n                          ----------------\
    \          ---     ----------\n    -------> Multicast RTP Flow\n    .-.-.-.> Multicast\
    \ RTCP Flow\n    .=.=.=.> Unicast RTCP Reports\n    ~~~~~~~> Unicast RTCP (Feedback)\
    \ Messages\n    .......> Unicast RTP Flow\n    Figure 2: Example Scenario Showing\
    \ an SSM Distribution with Support\n                     for Retransmissions from\
    \ a Server\n   In Figure 2, we have the following multicast and unicast ports:\n\
    \   o  Ports P1 and P2 denote the destination RTP and RTCP ports in the\n    \
    \  multicast session, respectively.  The clients listen to these\n      ports\
    \ to receive the multicast RTP and RTCP packets.  Ports P1 and\n      P2 are defined\
    \ declaratively.\n   o  Port P3 denotes the RTCP port on the feedback target running\
    \ on\n      the retransmission server to collect any RTCP packet sent by the\n\
    \      clients, including feedback messages and RTCP receiver and\n      extended\
    \ reports.  This is also the port that the retransmission\n      server uses to\
    \ send the RTP packets and RTCP sender reports in the\n      unicast session.\
    \  Port P3 is defined declaratively.\n   o  Port P4 denotes the RTCP port on the\
    \ retransmission server used to\n      collect the RTCP receiver and extended\
    \ reports for the unicast\n      session.  Port P4 is defined declaratively.\n\
    \   o  Ports *c0, *c1, and *c2 are chosen by the client.  (Note: \"*\"\n     \
    \ indicates that the port can be chosen randomly; once chosen, the\n      \"*\"\
    \ is no longer used.) *c0 denotes the port on the client used to\n      send the\
    \ RTCP reports for the multicast session. *c1 denotes the\n      port on the client\
    \ used to send the unicast RTCP feedback messages\n      in the multicast session\
    \ and to receive the RTP packets and RTCP\n      sender reports in the unicast\
    \ session. *c2 denotes the port on the\n      client used to send the RTCP receiver\
    \ and extended reports in the\n      unicast session.  Ports c0, c1, and c2 could\
    \ be the same port or\n      different ports.  There are two advantages of using\
    \ the same port\n      for both c0 and c1:\n      1.  Some NATs only keep bindings\
    \ active when a packet goes from\n          the inside to the outside of the NAT\
    \ (see REQ-6 of Section 4.3\n          of [RFC4787]).  When the gap between the\
    \ packets sent from the\n          client to the server is long, this can exceed\
    \ the timeout\n          limit.  If c0=c1, the occasional (periodic) RTCP receiver\n\
    \          reports sent from port c0 (for the multicast session's RTCP\n     \
    \     port P3) will ensure the NAT does not time out the public port\n       \
    \   associated with the incoming unicast traffic to port c1.\n      2.  Having\
    \ c0=c1 conserves NAT port bindings.\n   o  Ports PT and *cT denote the ports\
    \ through which the Token request\n      and retrieval occur at the server and\
    \ client sides, respectively.\n      Port PT is declared on a per-unicast-session\
    \ basis, although the\n      same port could be used for two or more unicast sessions\
    \ sourced\n      by the server.  A Token once requested and retrieved by a client\n\
    \      from port PT remains valid until its expiration time.\n   We assume that\
    \ the information declaratively defined is available as\n   part of the session\
    \ description information and is provided to the\n   clients.  The Session Description\
    \ Protocol (SDP) [RFC4566] and other\n   session description methods can be used\
    \ for this purpose.\n"
- title: 3.2.  Normative Behavior and Requirements
  contents:
  - "3.2.  Normative Behavior and Requirements\n   In this section, we describe the\
    \ normative behavior and requirements.\n   To simplify the presentation, we refer\
    \ to the port numbers described\n   in the example presented in Figure 2.  However,\
    \ the behavior and\n   requirements described here are not specific to that particular\n\
    \   example and can be applied to any scenario where analogous ports can\n   be\
    \ identified.\n   First of all, a client compliant with this specification MUST\
    \ be able\n   to include a Token with any type of RTCP message (as described below)\n\
    \   when it is needed.\n   Second, the solution provided in this specification\
    \ is not applicable\n   in cases where there is RTP traffic flowing from the client\
    \ to the\n   server in the unicast session.  In other words, the direction of\
    \ RTP\n   traffic MUST be only from the server to the client in the unicast\n\
    \   session.  If the client wants to send RTP traffic back to the server,\n  \
    \ the regular session establishment methods such as [RFC3264] need to\n   be used.\n\
    \   The following steps summarize the Token-based solution:\n   1.  The client\
    \ ascertains server address and port numbers (P3, P4 and\n       PT) from the\
    \ session description.  Port P4 MUST be different from\n       port P3.  Port\
    \ PT MAY be equal to port P3.\n   2.  The client selects its local port numbers\
    \ (*c0, *c1, *c2 and\n       *cT).  It is strongly RECOMMENDED that the client\
    \ uses the same\n       port for c0 and c1.  Port cT MAY be equal to ports c0\
    \ and c1.\n   3.  If the client does not have a Token (or the existing Token has\n\
    \       expired):\n       A.  The client first sends a Port Mapping Request message\n\
    \           (Section 4.1) to port PT.  This message is sent from port cT\n   \
    \        on the client side.  The server learns the client's IP\n           address\
    \ from the received message.  The client can send this\n           message anytime\
    \ it wants (e.g., during initialization) and\n           does not normally ever\
    \ need to resend this message (see\n           Section 6).\n       B.  The server\
    \ generates an opaque encapsulation (i.e., the\n           Token) based on certain\
    \ information, including the client's\n           IP address.\n       C.  The\
    \ server sends the Token back to the client using a Port\n           Mapping Response\
    \ message (Section 4.2).  This message MUST be\n           sent from port PT towards\
    \ port cT.\n   4.  The client needs to provide the Token to the server using a\
    \ Token\n       Verification Request message (Section 4.3) whenever the client\n\
    \       sends an RTCP feedback message for triggering or controlling a\n     \
    \  unicast session (see Section 4.3.1).  If the Token is invalid or\n       missing,\
    \ the server sends a Token Verification Failure message\n       (Section 4.4)\
    \ to the client.\n       Note that the unicast session is only established after\
    \ the\n       server has received a feedback message (along with a valid Token)\n\
    \       from the client for which it needs to react by sending unicast\n     \
    \  data.  Until a unicast session is established, neither the server\n       nor\
    \ the client needs to send RTCP reports for the unicast\n       session.\n   5.\
    \  Normal flows ensue as shown in Figure 2.  It is strongly\n       RECOMMENDED\
    \ that the client uses the same port for both c0 and\n       c1, as this causes\
    \ the periodic RTCP reports to keep the NAT\n       mapping alive.  However, if\
    \ the client uses different ports for\n       c0 and c1, the client MUST keep\
    \ its own NAT mapping alive for the\n       P3->c1 session (see [RFC6263] for\
    \ additional information).\n       In the unicast session, traffic from the server\
    \ to the client\n       (i.e., both the RTP and RTCP packets sent from port P3\
    \ towards\n       port c1) MUST be multiplexed on the same port [RFC5761].\n \
    \      The client sends the RTCP receiver and extended reports in the\n      \
    \ unicast session from port c2 towards port P4.  The server\n       correlates\
    \ these reports with the reports received in the\n       multicast session based\
    \ on the client's RTCP Canonical Name\n       (CNAME).  Thus, the client MUST\
    \ use the same RTCP CNAME in both\n       sessions, and its RTCP CNAME MUST be\
    \ unique [RFC6222].\n   A unicast session on a particular receive port c1 can\
    \ last as long as\n   the associated multicast session lasts.  However, a client\
    \ cannot\n   keep using the same receive port c1 for different subsequent unicast\n\
    \   sessions since there could be packet leakage when switching from one\n   unicast\
    \ session to another unless each received unicast stream has\n   its own distinct\
    \ Synchronization Source (SSRC) identifier to allow\n   the client to filter out\
    \ the undesired packets.  Unless this is\n   guaranteed (which is not often easy),\
    \ a client SHOULD use separate\n   receive ports for subsequent unicast sessions.\
    \  After a sufficient\n   time (two minutes is RECOMMENDED, similar to one TCP\
    \ Maximum Segment\n   Lifetime specified in [RFC0793]), a previously used receive\
    \ port can\n   be used again.\n   The established unicast session can be explicitly\
    \ terminated by the\n   procedures specified by an application or extension using\
    \ the port\n   mapping approach described in this document.  In addition, the\n\
    \   unicast session can also be terminated by the procedure defined\n   below,\
    \ which is based on timing all participants out following the\n   timeout rules\
    \ of [RFC3550].  Both the server and client periodically\n   check the liveness\
    \ of the other peer, and if there is no RTCP traffic\n   from the other peer for\
    \ a certain amount of time (Section 6.3.5 of\n   [RFC3550] suggests five RTCP\
    \ reporting intervals), the unicast\n   session SHOULD be considered terminated,\
    \ and no further RTP and/or\n   RTCP packets SHOULD be sent in that session. \
    \ The client can attempt\n   to establish a new unicast session if needed.  If\
    \ no explicit\n   procedure for session termination exists, the client MAY stop\
    \ sending\n   RTCP to the server to accomplish session termination.  However,\
    \ the\n   server SHALL NOT stop sending RTCP until the unicast session is\n  \
    \ terminated.  If Token-based authentication is also signaled to be\n   allowed\
    \ in the unicast session, i.e., in the RTCP messages sent from\n   port c2 towards\
    \ port P4, the client SHOULD terminate the unicast\n   session by sending an RTCP\
    \ BYE message for each SSRC it has used in\n   that unicast session.\n"
- title: 4.  Message Formats
  contents:
  - "4.  Message Formats\n   This section defines the formats of the RTCP messages\
    \ that are\n   exchanged between a server and a client for the purpose of port\n\
    \   mapping.  A new RTCP control packet type is introduced, and four port\n  \
    \ mapping messages using this control packet are defined:\n   1.  Port Mapping\
    \ Request\n   2.  Port Mapping Response\n   3.  Token Verification Request\n \
    \  4.  Token Verification Failure\n   Each message has a fixed-length field for\
    \ version (V), padding (P),\n   sub-message type (SMT), packet type (PT), length,\
    \ and SSRC of packet\n   sender.  Messages have other fields as defined below.\
    \  In all\n   messages defined in this section, the PT field is set to TOKEN (210).\n\
    \   Individual messages are identified by the SMT field.  The length\n   field\
    \ indicates the message size in 32-bit words minus one, including\n   the header\
    \ and any padding.  This definition is in line with the\n   definition of the\
    \ Length field used in RTCP sender and receiver\n   reports.  In all messages,\
    \ any Reserved field SHALL be set to zero\n   and ignored.\n   Following the rules\
    \ specified in [RFC3550], all integer fields in the\n   messages defined below\
    \ are carried in network-byte order, that is,\n   most significant byte (octet)\
    \ first, also known as big-endian.\n   Unless otherwise stated, numeric constants\
    \ are in decimal (base 10).\n   Note that RTCP is not a timely or reliable protocol.\
    \  The RTCP\n   packets might get lost or reordered in the network, and it is\
    \ not\n   easy to detect these events.  When sending a new Port Mapping Request\n\
    \   message, the scheduling rules that apply to sending initial RTCP\n   messages\
    \ [RFC4585] apply.  When a client sends a Port Mapping Request\n   or Token Verification\
    \ Request message but it does not receive a\n   response back from the server\
    \ (either a Port Mapping Response or\n   Token Verification Failure message),\
    \ it MAY resend its request by\n   following the timer rules defined for RTCP\
    \ feedback messages in\n   Section 3.5 of [RFC4585] as a good practice.  However,\n\
    \   implementations are advised to avoid sending spurious RTCP messages\n   just\
    \ because the timer rules (based on some RTCP configuration\n   parameters) allow.\
    \  Reasonably safe practices are to be used to\n   detect RTCP message loss. \
    \ When sending an RTCP (feedback) message\n   bundled with a Token Verification\
    \ Request message, the timer rules of\n   [RFC4585] apply as usual.\n"
- title: 4.1.  Port Mapping Request
  contents:
  - "4.1.  Port Mapping Request\n   The Port Mapping Request message is identified\
    \ by SMT=1.  This\n   message is transmitted by the client to a dedicated server\
    \ port (and\n   possibly a dedicated address) to request a Token.  In the Port\n\
    \   Mapping Request message, the packet sender's SSRC is set to the\n   client's\
    \ SSRC, which is chosen randomly by the client.  The packet\n   format has the\
    \ structure depicted in Figure 3.\n      0                   1               \
    \    2                   3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\
    \ 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |V=2|P|  SMT=1  |    PT=TOKEN   |         Length=3              |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  \
    \                    SSRC of Packet Sender                    |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |                             Random                            |\n    \
    \ |                             Nonce                             |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       Figure 3: Packet Format for the Port Mapping Request Message\n   o  Random\
    \ Nonce (64 bits): Field that contains a random value\n      generated by the\
    \ client following the procedures of [RFC4086].\n      This nonce is taken into\
    \ account by the server when generating a\n      Token for the client to enable\
    \ better security for clients that\n      share the same IP address (such clients\
    \ need to produce a random\n      value extremely unlikely to collide with other\
    \ clients sharing the\n      same IP address).  If the same Port Mapping Request\
    \ message is\n      transmitted multiple times for redundancy reasons, the random\n\
    \      nonce value MUST remain the same in these duplicated messages.\n      However,\
    \ the client MUST generate a new random nonce for every new\n      Port Mapping\
    \ Request message.\n"
- title: 4.2.  Port Mapping Response
  contents:
  - "4.2.  Port Mapping Response\n   The Port Mapping Response message is identified\
    \ by SMT=2.  This\n   message is sent by the server and delivers the Token to\
    \ the client as\n   a response to the Port Mapping Request message.  In the Port\
    \ Mapping\n   Response message, the packet sender's SSRC is set to the server's\n\
    \   SSRC.  The packet format has the structure depicted in Figure 4.\n      0\
    \                   1                   2                   3\n      0 1 2 3 4\
    \ 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |V=2|P|  SMT=2  |    PT=TOKEN   |          Length               |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  \
    \                    SSRC of Packet Sender                    |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |                    SSRC of Requesting Client                  |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  \
    \                         Associated                          |\n     |      \
    \                       Nonce                             |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     :                         Token Element                         :\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  \
    \                          Absolute                           |\n     |      \
    \                   Expiration Time                       |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |                     Relative Expiration Time                  |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     :  \
    \                     Packet Types Element                    :\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       Figure 4: Packet Format for the Port Mapping Response Message\n   o  SSRC\
    \ of Requesting Client (32 bits): Field that contains the SSRC\n      of the client\
    \ who sent the request.\n   o  Associated Nonce (64 bits): Field that contains\
    \ the nonce received\n      in the Port Mapping Request message and used in Token\n\
    \      construction.\n   o  Token Element (variable size): Element that is used\
    \ to carry the\n      Token generated by the server.  This element is a 32-bit\
    \ aligned\n      Length-Value element.  The Length field, which is 16 bits,\n\
    \      indicates the length (in octets) of the Value field that follows\n    \
    \  the Length field.  While a 16-bit length allows for Tokens with a\n      size\
    \ of up to 65535 bytes, using Tokens of sizes that make the\n      RTCP compound\
    \ packet larger than the MTU might have a negative\n      impact on functionality\
    \ because of IP fragmentation.  Some NATs or\n      other middleboxes do not pass\
    \ IP fragments; thus, a large Token\n      can cause the whole mechanism to fail.\
    \  In addition, fragmentation\n      increases the risk for packet loss.\n   \
    \   The length does not include any padding that is required for\n      alignment.\
    \  The Value field carries the Token (or more accurately,\n      the output of\
    \ the encoding process on the server).  If the Token\n      element does not fall\
    \ on a 32-bit boundary, the last word MUST be\n      padded to the boundary using\
    \ further bits set to zero.\n   o  Absolute Expiration Time (64 bits): Field that\
    \ contains the\n      absolute expiration time of the Token.  The absolute expiration\n\
    \      time is expressed as a Network Time Protocol (NTP) timestamp value\n  \
    \    in seconds since the year 1900 [RFC5905].  The client does not\n      need\
    \ to use this element directly and thus does not need to\n      synchronize its\
    \ clock with the server.  However, the client needs\n      to send this element\
    \ back to the server along with the associated\n      nonce in the Token Verification\
    \ Request message and thus needs to\n      keep it associated with the Token.\n\
    \   o  Relative Expiration Time (32 bits): Field that contains the\n      relative\
    \ expiration time of the Token.  The relative expiration\n      time is expressed\
    \ in seconds from the time the Token was\n      generated.  Whenever a server\
    \ decides to not grant a Token to a\n      requesting client, the relative expiration\
    \ time will be set to\n      zero (and hence, the accompanying Token will be invalid).\n\
    \      The server conveys the relative expiration time in the clear to\n     \
    \ the client to allow the client to request a new Token well before\n      the\
    \ expiration time.\n   o  Packet Types Element (variable size): Element that is\
    \ used to\n      signal which RTCP packet types require Token-based authentication.\n\
    \      This element is a 32-bit aligned Length-Value element.  The Length\n  \
    \    field, which is 8 bits, indicates the length (in octets) of the\n      Value\
    \ field that follows the Length field.  This length does not\n      include any\
    \ padding that is required for alignment.  The Value\n      field carries zero\
    \ or more 8-bit sub-fields, each carrying an RTCP\n      packet type.  If the\
    \ Packet Types element does not fall on a\n      32-bit boundary, the last word\
    \ MUST be padded to the boundary\n      using further bits set to zero.  An example\
    \ Packet Types element\n      is shown in Figure 5.\n      A server MAY change\
    \ its policy on which RTCP packet types would\n      require Token-based authentication\
    \ based on observations,\n      configuration, or other policies.  However, upon\
    \ such a change,\n      the server SHALL NOT send a new Port Mapping Response\
    \ message to\n      the clients who requested a Token earlier.  A client learns\
    \ about\n      this change when and if it gets a Token Verification Failure\n\
    \      message.\n      0                   1                   2             \
    \      3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0\
    \ 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |    Length=4   |      205      |      206      |      203      |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  \
    \    204      |                  Padding                      |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                    Figure 5: Example Packet Types Element\n"
- title: 4.3.  Token Verification Request
  contents:
  - "4.3.  Token Verification Request\n   The Token Verification Request message is\
    \ identified by SMT=3.  This\n   message contains the Token and accompanies any\
    \ RTCP message that\n   would trigger a new unicast session or control an existing\
    \ unicast\n   session.  For a list of such messages, see Section 4.3.1.\n   In\
    \ the Token Verification Request message, the packet sender's SSRC\n   is set\
    \ to the client's SSRC.  The client MUST NOT send a Token\n   Verification Request\
    \ message with a Token that has expired.  The\n   packet format has the structure\
    \ depicted in Figure 6.\n      0                   1                   2     \
    \              3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6\
    \ 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |V=2|P|  SMT=3  |    PT=TOKEN   |          Length               |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  \
    \                    SSRC of Packet Sender                    |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |                           Associated                          |\n    \
    \ |                             Nonce                             |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     :                         Token Element                         :\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  \
    \                     Associated Absolute                     |\n     |      \
    \                   Expiration Time                       |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    Figure 6: Packet Format for the Token Verification Request Message\n   o\
    \  Associated Nonce (64 bits): Field that contains the nonce\n      associated\
    \ with the Token below.\n   o  Token Element (variable size): Token element that\
    \ was previously\n      received in the Port Mapping Response message.\n   o \
    \ Associated Absolute Expiration Time (64 bits): Field that contains\n      the\
    \ absolute expiration time associated with the Token above.\n"
- title: 4.3.1.  Where to Include Token
  contents:
  - "4.3.1.  Where to Include Token\n   This section provides guidelines about which\
    \ RTCP packet types would\n   need to be accompanied by a Token Verification Request\
    \ message.\n   However, since a server might determine in real time that other\
    \ RTCP\n   messages also need to be authenticated by a Token, a client MUST act\n\
    \   according to the up-to-date list provided to the client in the Port\n   Mapping\
    \ Response message (in the Packet Types element).  Clients need\n   to support\
    \ the use of Token-based authentication with any necessary\n   RTCP message (see\
    \ Section 3.2).\n   As a general rule, when the Token capability is declared in\
    \ the\n   session description, the RTCP messages that trigger transmission of\n\
    \   RTP packets in a port mapped unicast session are REQUIRED to be\n   authenticated\
    \ by using a Token.  Such messages include but are not\n   limited to:\n   o \
    \ NACK messages [RFC4585]\n   o  RAMS Request (RAMS-R) messages [RFC6285]\n  \
    \ Additionally, some RTCP messages might directly or indirectly control\n   an\
    \ existing unicast session associated with a multicast session.\n   Unless another\
    \ authentication method as described in their respective\n   specifications is\
    \ used, implementations MUST support authenticating\n   such RTCP messages by\
    \ using a Token.\n   Examples are:\n   o  BYE messages [RFC3550]\n   o  RAMS Termination\
    \ (RAMS-T) messages [RFC6285]\n   o  Codec Control Messages (CCMs) [RFC5104]\n\
    \   Note that even if a packet type is listed to require Token-based\n   authentication,\
    \ it does not need to be authenticated when it does not\n   control the unicast\
    \ session.  For example, if BYE (203) is listed in\n   the Port Mapping Response\
    \ message as one of the packet types that\n   requires authentication, the client\
    \ does not need to bundle the RTCP\n   BYE message with a Token when it is sending\
    \ it for the multicast\n   session.\n   The Token Verification Request message\
    \ might also be bundled with\n   packets carrying RTCP receiver and/or extended\
    \ reports.  While such\n   packets do not have a strong security impact, a specific\
    \ application\n   might desire to have a more controlled reporting scheme from\
    \ the\n   clients.  In this case, the server lists the packet types for the\n\
    \   receiver (201) and/or extended reports (207) in the Port Mapping\n   Response\
    \ message.\n"
- title: 4.4.  Token Verification Failure
  contents:
  - "4.4.  Token Verification Failure\n   The Token Verification Failure message is\
    \ identified by SMT=4.  This\n   message is sent by the server and notifies the\
    \ client that the Token\n   was invalid or that the client did not include a Token\
    \ Verification\n   Request message in the RTCP packet although it was supposed\
    \ to (the\n   message is sent from port P3 towards port c1).  The packet format\
    \ has\n   the structure depicted in Figure 7.\n      0                   1   \
    \                2                   3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\
    \ 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |V=2|P|  SMT=4  |    PT=TOKEN   |         Length=5              |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  \
    \                    SSRC of Packet Sender                    |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |                    SSRC of Requesting Client                  |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  \
    \ Failed PT   |   FMT   |              Reserved               |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |                           Associated                          |\n    \
    \ |                             Nonce                             |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    Figure 7: Packet Format for the Token Verification Failure Message\n   o\
    \  SSRC of Packet Sender: This is the server's SSRC, which equals the\n      SSRC\
    \ of the respective multicast stream.  Note that this SSRC\n      value is from\
    \ a different SSRC space than the one used in the\n      unicast session.\n  \
    \ o  SSRC of Requesting Client (32 bits): Field that contains the SSRC\n     \
    \ of the client.\n   o  Failed PT (8 bits): Field that indicates the type of the\
    \ RTCP\n      packet that caused this failure message.\n   o  FMT (5 bits): Field\
    \ that indicates the feedback message type (FMT)\n      value of the RTCP packet\
    \ that caused this failure.  Together with\n      the field above, the client\
    \ can infer which RTCP message it had\n      previously sent caused this failure\
    \ message to be sent by the\n      server.  For example, if the client did not\
    \ include a valid Token\n      with an RTCP NACK message, the Failed PT field\
    \ will indicate 205\n      (RTPFB) and the FMT field will indicate 1 (Generic\
    \ NACK).  If the\n      RTCP message did not have an associated FMT value (such\
    \ as an RTCP\n      BYE message), the FMT field SHALL be set to zero.\n   o  Associated\
    \ Nonce (64 bits): Field that contains the nonce received\n      in the Token\
    \ Verification Request message.  If there was no Token\n      Verification Request\
    \ message included by the client, this field is\n      set to zero.\n"
- title: 5.  Procedures for Token Construction
  contents:
  - "5.  Procedures for Token Construction\n   The Token encoding is known to the\
    \ server but opaque to the client.\n   Implementations MUST encode the following\
    \ information into the Token\n   as a minimum, in order to provide adequate security:\n\
    \   o  Client's IP address as seen by the server (32/128 bits for IPv4/\n    \
    \  IPv6 addresses)\n   o  The nonce generated and inserted in the Port Mapping\
    \ Request\n      message by the client (64 bits)\n   o  The absolute expiration\
    \ time chosen by the server indicated as an\n      NTP timestamp value in seconds\
    \ since the year 1900 [RFC5905] (64\n      bits, to protect against replay attacks)\n\
    \   The RECOMMENDED way for constructing Tokens is to perform HMAC-SHA1\n   [RFC2104]\
    \ on the concatenated values of the information listed above\n   (implementations\
    \ might adopt different approaches).  If HMAC-SHA1 is\n   used, the Hashed Message\
    \ Authentication Code (HMAC) key MUST be at\n   least 160 bits long and generated\
    \ using a cryptographically secure\n   random source [RFC4086].\n   In addition\
    \ to the information listed above, implementations are\n   encouraged to encode\
    \ whatever additional information is deemed\n   necessary or useful.  For example,\
    \ key rollover is simplified by\n   encoding a key-id into the Token.  As another\
    \ example, a cluster of\n   anycast servers could find advantage by encoding a\
    \ server identifier\n   into the Token.  As another example, while HMAC-SHA1 provides\
    \ a level\n   of security that is widely regarded as being more than sufficient\
    \ for\n   providing message authentication and it is secure against all known\n\
    \   cryptanalytic attacks that use computational resources that are\n   currently\
    \ economically feasible, a replacement HMAC algorithm (e.g.,\n   HMAC-SHA256)\
    \ could be used instead if HMAC-SHA1 has been compromised.\n   To protect from\
    \ offline attacks, the server SHOULD occasionally\n   choose a new HMAC key. \
    \ To ease implementation, a key-id can be\n   assigned to each HMAC key.  This\
    \ can be encoded as simply as one bit\n   (where the new key is X (e.g., 1) and\
    \ the old key is the inverted\n   value of X (e.g., 0)), or if several keys are\
    \ supported at once, the\n   key-id could be encoded into several bits.  As the\
    \ encoding of the\n   Token is entirely private to the server and opaque to the\
    \ clients,\n   any encoding can be used.  By encoding the key-id into the Token\n\
    \   element, the server can reject an old key without bothering to do\n   HMAC\
    \ validation (saving CPU cycles).  The key-id can be encoded into\n   the Value\
    \ field of the Token element by simply concatenating the\n   (plaintext) key-id\
    \ with the hashed information (i.e., the Token\n   itself).\n   For example, the\
    \ Value field in the Token element can be computed as:\n           key-id || mac-alg\
    \ (client-ip | nonce | abs-expiration)\n   During Token construction, the expiration\
    \ time has to be chosen\n   carefully based on the intended service duration.\
    \  Tokens that are\n   valid for an unnecessarily long period of time (e.g., several\
    \ hours)\n   might impose security risks.  Depending on the application and use\n\
    \   cases, a reasonable value needs to be chosen by the server.  Note\n   that\
    \ using shorter lifetimes requires the clients to acquire Tokens\n   more frequently.\
    \  However, since a client can acquire a new Token\n   well before it will need\
    \ to use it, the client will not necessarily\n   be penalized for the acquisition\
    \ delay.\n   Finally, be aware that NTP timestamps will wrap around in the year\n\
    \   2036.  Refer to Section 6 of [RFC5905] for further details.\n"
- title: 6.  Validating Tokens
  contents:
  - "6.  Validating Tokens\n   The server MUST validate the Token upon receipt of\
    \ an RTCP feedback\n   message along with the Token Verification Request message\
    \ that\n   contains a Token, nonce, and absolute expiration time.\n   The server\
    \ first applies its own procedure for constructing the\n   Tokens by using the\
    \ client's IP address from the received Token\n   Verification Request message\
    \ and the nonce and absolute expiration\n   time values reported in the received\
    \ Token Verification Request\n   message.  The server then compares the resulting\
    \ output with the\n   Token sent by the client in the Token Verification Request\
    \ message.\n   If they match and the absolute expiration time has not passed yet,\n\
    \   the server declares that the Token is valid.\n   Note that if the client's\
    \ IP address changes, the Token will not\n   validate.  Similarly, if the client\
    \ inserts an incorrect nonce or\n   absolute expiration time value in the Token\
    \ Verification Request\n   message, validation will fail.  It is also possible\
    \ that the server\n   wants to expire the Token prematurely.  In these cases,\
    \ the server\n   MUST reply back to the client with a Token Verification Failure\n\
    \   message (that goes from port P3 on the server towards port c1 on the\n   client).\n\
    \   In addition to the Token Verification Failure message, it is\n   RECOMMENDED\
    \ that applications define an application-specific error\n   response to be sent\
    \ by the server when the server detects that the\n   Token is invalid.  For applications\
    \ using [RFC6285], this document\n   defines a new 4xx-level response code in\
    \ the RAMS Response Code Space\n   Registry.  A client that receives a Token Verification\
    \ Failure\n   message can request a new Token from the server.\n   If a client\
    \ receives a Port Mapping Response message with an invalid\n   Token (i.e., the\
    \ relative expiration time is set to zero) two or more\n   times for a particular\
    \ Port Mapping Request message or the client\n   receives a Token Verification\
    \ Failure message two or more times for\n   the same Token Verification Request\
    \ message, the client SHOULD do the\n   following:\n   1.  Check whether or not\
    \ the session description has been updated.\n       If it was updated, act according\
    \ to the new session description.\n   2.  Exponentially back off for the third\
    \ and subsequent attempts.\n       Exponential back-off does not apply when the\
    \ client sends a Port\n       Mapping Request or Token Verification Request message\
    \ to a new\n       address and/or port.\n"
- title: 7.  SDP Signaling
  contents:
  - '7.  SDP Signaling

    '
- title: 7.1.  The 'portmapping-req' Attribute
  contents:
  - "7.1.  The 'portmapping-req' Attribute\n   This attribute is used declaratively\
    \ in any media block that\n   describes an RTP session that uses Token-based authentication\
    \ for one\n   or more RTCP messages relating to that session.  It indicates the\n\
    \   port and optionally the address for obtaining a Token.\n   The presence of\
    \ the 'portmapping-req' attribute indicates that (i) a\n   Token MUST be included\
    \ in certain RTCP messages sent to the server\n   triggering or controlling a\
    \ unicast session (see Section 4.3.1) and\n   (ii) the client MUST receive the\
    \ unicast session's RTP and RTCP\n   packets from the server on the port from\
    \ which it sent the RTCP\n   message triggering the unicast session.\n      Note:\
    \ This does not imply that Token Verification Request messages\n      always need\
    \ to be sent in the unicast session.  Token Verification\n      Request messages\
    \ accompany RTCP messages that trigger or control\n      this unicast session\
    \ and are sent either in the multicast session\n      or the unicast session,\
    \ depending on the RTCP message (see\n      Section 4.3.1).\n"
- title: 7.1.1.  ABNF Definition of 'portmapping-req'
  contents:
  - "7.1.1.  ABNF Definition of 'portmapping-req'\n   The formal description of the\
    \ 'portmapping-req' attribute is defined\n   by the following ABNF [RFC5234] syntax:\n\
    \      portmapping-req-attr = \"a=portmapping-req:\" port [SP nettype SP\n   \
    \                            addrtype SP connection-address] CRLF\n   Here, 'port',\
    \ 'nettype', 'addrtype', and 'connection-address' are\n   defined as specified\
    \ in Section 9 of [RFC4566].\n   The 'portmapping-req' attribute SHALL only be\
    \ used as a media-level\n   attribute.\n   In the optional address value, only\
    \ unicast addresses SHOULD be used\n   unless one wants to use a multicast address\
    \ after evaluating the\n   additional security risks such as non-legit servers\
    \ generating fake\n   Tokens.  If the address is not specified, the (source) address\
    \ in the\n   \"c\" line applicable to the media description SHALL be used.\n"
- title: 7.1.2.  Offer/Answer Model Considerations
  contents:
  - "7.1.2.  Offer/Answer Model Considerations\n   When using the 'portmapping-req'\
    \ attribute in SDP offer/answer\n   exchanges [RFC3264], the following considerations\
    \ apply.  When an\n   offerer sends an answerer an offer of an SDP description\
    \ making use\n   of the Token approach described in this specification, the\n\
    \   'portmapping-req' attribute is included declaratively.  There will\n   not\
    \ be offer/answer exchanges between the answerer and the actual\n   server providing\
    \ the unicast service(s).\n   When the answerer supports the Token approach, it\
    \ MUST echo in its\n   answer back to the offerer the 'portmapping-req' attribute\
    \ from the\n   offer including the same port number and address (if any).  If\
    \ the\n   answerer does not implement this specification, it follows normal SDP\n\
    \   parsing of unknown attributes (they are ignored and are not sent in\n   the\
    \ answer).  This means that the answerer can still join the\n   multicast session\
    \ but will not be able to use the unicast service(s)\n   that require the use\
    \ of Tokens.\n"
- title: 7.2.  Requirements
  contents:
  - "7.2.  Requirements\n   The use of SDP for the port mapping solution normatively\
    \ requires\n   support for:\n   o  The SDP grouping framework and flow identification\
    \ (FID) semantics\n      [RFC5888]\n   o  The RTP/Audio-Visual Profile with Feedback\
    \ (AVPF) profile\n      [RFC4585]\n   o  The 'rtcp-mux' attribute (to multiplex\
    \ RTP and RTCP on a single\n      port on both endpoints in the unicast session\
    \ [RFC5761])\n"
- title: 7.3.  Example and Discussion
  contents:
  - "7.3.  Example and Discussion\n   The declarative SDP describing the scenario\
    \ given in Figure 2 is\n   written as:\n        v=0\n        o=ali 1122334455\
    \ 1122334466 IN IP4 nack.example.com\n        s=Local Retransmissions\n      \
    \  t=0 0\n        a=group:FID 1 2\n        a=rtcp-unicast:rsi\n        m=video\
    \ 41000 RTP/AVPF 98\n        i=Multicast Stream\n        c=IN IP4 233.252.0.2/255\n\
    \        a=source-filter:incl IN IP4 233.252.0.2 198.51.100.1   ; Note 1\n   \
    \     a=rtpmap:98 MP2T/90000\n        a=multicast-rtcp:41500                 \
    \                ; Note 1\n        a=rtcp:42000 IN IP4 192.0.2.1             \
    \             ; Note 2\n        a=rtcp-fb:98 nack                            \
    \          ; Note 2\n        a=portmapping-req:30000 IN IP4 192.0.2.1        \
    \       ; Note 3\n        a=mid:1\n        m=video 42000 RTP/AVPF 99         \
    \                     ; Note 4\n        i=Unicast Retransmission Stream\n    \
    \    c=IN IP4 192.0.2.1\n        a=sendonly\n        a=rtpmap:99 rtx/90000\n \
    \       a=rtcp-mux                                             ; Note 5\n    \
    \    a=rtcp:42500                                           ; Note 6\n       \
    \ a=fmtp:99 apt=98; rtx-time=5000\n        a=portmapping-req:30001           \
    \                     ; Note 3\n        a=mid:2\n       Figure 8: SDP Describing\
    \ an SSM Distribution with Support for\n                    Retransmissions from\
    \ a Local Server\n   In this description, we highlight the following notes:\n\
    \   Note 1: The source stream is multicast from a distribution source\n   with\
    \ a source IP address of 198.51.100.1 to the multicast destination\n   address\
    \ of 233.252.0.2 and port 41000 (P1).  The associated RTCP\n   packets are multicast\
    \ in the same group to port 41500 (P2).\n   Note 2: A retransmission server including\
    \ feedback target\n   functionality with an IP address of 192.0.2.1 and port of\
    \ 42000 (P3)\n   is specified with the 'rtcp' attribute.  The feedback functionality\n\
    \   is enabled for the RTP stream with payload type 98 through the\n   'rtcp-fb'\
    \ attribute [RFC4585].\n   Note 3: The \"a=portmapping-req\" line indicates that\
    \ one or more RTCP\n   messages relating to the RTP session described in this\
    \ media block\n   uses Token-based authentication, and a Token needs to be retrieved\n\
    \   first from the designated port (PT) before the unicast session can be\n  \
    \ established.  In the first appearance, an explicit address is\n   provided.\
    \  In the second appearance, there is no address indicated in\n   this line and\
    \ the client needs to send the Token request to the\n   address specified in the\
    \ \"c\" line in the unicast media block.\n   Note 4: The port specified in the\
    \ second \"m\" line (for the unicast\n   stream) does not mean anything in this\
    \ scenario as the client does\n   not send any RTP traffic back to the server.\n\
    \   Note 5: The server multiplexes RTP and RTCP packets sent towards c1\n   on\
    \ the same port.\n   Note 6: The server uses port 42500 (P4) for the unicast session.\n"
- title: 8.  Address Pooling NATs
  contents:
  - "8.  Address Pooling NATs\n   Large-scale NAT devices have a pool of public IPv4\
    \ addresses and map\n   internal hosts to one of those public IPv4 addresses.\
    \  As long as an\n   internal host maintains an active mapping in the NAT, the\
    \ same IPv4\n   address is assigned to new connections.  However, once all of\
    \ the\n   host's mappings have been deleted (e.g., because of timeout), it is\n\
    \   possible that a new connection from that same host will be assigned a\n  \
    \ different IPv4 address from the pool.  When that occurs, the Token\n   will\
    \ be considered invalid by the server, causing an additional round\n   trip for\
    \ the client to acquire a fresh Token.\n   Any traffic from the host that traverses\
    \ the NAT will prevent this\n   problem.  As the host is sending RTCP receiver\
    \ reports at least every\n   5 seconds (Section 6.2 of [RFC3550]) for the multicast\
    \ session it is\n   receiving, those RTCP messages will be sufficient to prevent\
    \ this\n   problem.\n"
- title: 9.  Security Considerations
  contents:
  - '9.  Security Considerations

    '
- title: 9.1.  Tokens
  contents:
  - "9.1.  Tokens\n   The Token, which is generated based on a client's IP address\
    \ and\n   expiration date, provides protection against off-path denial-of-\n \
    \  service (DoS) attacks.  An attacker using a certain IP address cannot\n   cause\
    \ one or more RTP packets to be sent to a victim client who has a\n   different\
    \ IP address.  However, if the attacker acquires a valid\n   Token for a victim\
    \ and can spoof the victim's source address, this\n   approach becomes vulnerable\
    \ to replay attacks.  This is especially\n   easy if the attacker and victim are\
    \ behind a large-scale NAT and\n   share the same IP address.\n   Multicast is\
    \ deployed on managed networks, not the Internet.  These\n   managed networks\
    \ will choose whether or not to enable network ingress\n   filtering [RFC2827].\
    \  If ingress filtering is enabled on a network,\n   an attacker cannot spoof\
    \ a victim's IP address to use a Token to\n   initiate an attack against a victim.\
    \  However, if ingress filtering\n   is not enabled on a network, an attacker\
    \ could obtain a Token and\n   spoof the victim's address, causing traffic to\
    \ flood the victim.  On\n   such a network, the server can reduce the time period\
    \ for such an\n   attack by expiring a Token in a short period of time.  In the\
    \ extreme\n   case, the server can expire the Token in such a short period of\
    \ time\n   that the client will have to acquire a new Token immediately before\n\
    \   using it in a Token Verification Request message.  One should,\n   however,\
    \ note that such a behavior might have an adverse effect on\n   the delay in establishing\
    \ or controlling a unicast session.\n   RTCP messages could be subject to on-path\
    \ or man-in-the-middle\n   attacks.  For example, an attacker can modify a value\
    \ in one or more\n   fields in the Port Mapping Response or the Token Verification\
    \ Request\n   message that are used in Token construction.  This will result in\n\
    \   Token validation failure.  Consequently, the client ends up asking\n   the\
    \ server to generate a new Token.  The resulting delay and extra\n   processing\
    \ on the server is undesirable.\n   Alternatively, the attacker can modify a value\
    \ in a field that is not\n   used in Token construction.  For example, the attacker\
    \ can reduce the\n   value in the Relative Expiration Time field in the Port Mapping\n\
    \   Response message from two hours to two minutes.  While the Token will\n  \
    \ still validate, this attack will result in more frequent requests to\n   the\
    \ server for a new Token.  Oppositely, the attacker can increase\n   the value\
    \ in the Relative Expiration Time field and make the client\n   think the Token\
    \ will be valid for a longer time.  This attack can be\n   only detected by monitoring\
    \ the activity on the server.  Note that\n   using the relative expiration time\
    \ in Token construction does not\n   necessarily make this attack easier to detect\
    \ since the attacker\n   might revert the modified value back to its original\
    \ value in the\n   Token Verification Request message.  This allows the Token\
    \ to still\n   validate on the server.  In this case, the attack is still only\n\
    \   detectable by monitoring the server activity.\n   If there is a risk or concern\
    \ for on-path or man-in-the-middle\n   attacks, RTCP messages SHOULD be protected\
    \ by Secure RTCP (SRTCP)\n   [RFC3711].\n   To minimize the risk of cross-protocol\
    \ attacks, a server MUST NOT use\n   the same secret key it used for Token construction\
    \ for other\n   purposes.\n"
- title: 9.2.  The 'portmapping-req' Attribute
  contents:
  - "9.2.  The 'portmapping-req' Attribute\n   The 'portmapping-req' attribute is\
    \ not believed to introduce any\n   significant security risk to multimedia applications.\
    \  A malevolent\n   third party could use this attribute to redirect the Port\
    \ Mapping\n   Request messages by altering the port number or cause the unicast\n\
    \   session establishment to fail by removing it from the SDP\n   description.\
    \  However, this requires intercepting and rewriting the\n   packets carrying\
    \ the SDP description, and if an interceptor can do\n   that, many more attacks\
    \ are possible, including a wholesale change of\n   the addresses and port numbers\
    \ at which the media will be sent.\n   In order to avoid attacks of this sort,\
    \ the SDP description needs to\n   be integrity protected and provided with source\
    \ authentication.  This\n   can, for example, be achieved on an end-to-end basis\
    \ using Secure/\n   Multipurpose Internet Mail Extensions (S/MIME) [RFC5652] [RFC5751]\n\
    \   when SDP is used in a signaling packet using MIME types (application/\n  \
    \ sdp).  Alternatively, HTTPS [RFC2818] or the authentication method in\n   the\
    \ Session Announcement Protocol (SAP) [RFC2974] could be used as\n   well.\n"
- title: 10.  IANA Considerations
  contents:
  - "10.  IANA Considerations\n   The following contact information is used for all\
    \ registrations in\n   this document:\n   Ali Begen\n   abegen@cisco.com\n"
- title: 10.1.  Registration of SDP Attributes
  contents:
  - "10.1.  Registration of SDP Attributes\n   This document registers one new attribute\
    \ name in SDP.\n        SDP Attribute (\"att-field\"):\n        Attribute name:\
    \     portmapping-req\n        Long form:          Port and address for requesting\
    \ Token\n        Type of name:       att-field\n        Type of attribute:  Media\
    \ level\n        Subject to charset: No\n        Purpose:            See this\
    \ document\n        Reference:          [RFC6284]\n        Values:           \
    \  See this document\n"
- title: 10.2.  Registration of RTCP Control Packet Types
  contents:
  - "10.2.  Registration of RTCP Control Packet Types\n   In accordance with Section\
    \ 15 of [RFC3550], this specification adds\n   the following value to the RTCP\
    \ Control Packet types sub-registry in\n   the Real-Time Transport Protocol (RTP)\
    \ Parameters registry:\n   Value     Abbrev.    Name                         \
    \          Reference\n   --------  ---------  -------------------------------------\
    \  ---------\n   210       TOKEN      Port Mapping                           [RFC6284]\n"
- title: 10.3.  SMT Values for TOKEN Packet Type Registry
  contents:
  - "10.3.  SMT Values for TOKEN Packet Type Registry\n   This document creates a\
    \ new sub-registry for the sub-message type\n   (SMT) values to be used with the\
    \ TOKEN packet type.  The registry is\n   called the SMT Values for TOKEN Packet\
    \ Type Registry.  This registry\n   is managed by the IANA according to the IETF\
    \ Review policy of\n   [RFC5226].\n   The length of the SMT field is five bits,\
    \ allowing 32 values.  The\n   registry is initialized with the following entries:\n\
    \   Value Name                                               Reference\n   -----\
    \ -------------------------------------------------- ------------\n   0     Reserved\
    \                                           [RFC6284]\n   1     Port Mapping Request\
    \                               [RFC6284]\n   2     Port Mapping Response    \
    \                          [RFC6284]\n   3     Token Verification Request    \
    \                     [RFC6284]\n   4     Token Verification Failure         \
    \                [RFC6284]\n   5-30  Unassigned                              \
    \           IETF Review\n   31    Reserved                                   \
    \        [RFC6284]\n   The SMT values 0 and 31 are reserved for future use.\n"
- title: 10.4.  RAMS Response Code Space Registry
  contents:
  - "10.4.  RAMS Response Code Space Registry\n   This document adds the following\
    \ entry to the RAMS Response Code\n   Space Registry.\n   Code  Description  \
    \                                      Reference\n   ----- --------------------------------------------------\
    \ ------------\n   405   Invalid Token                                      [RFC6284]\n\
    \   This response code is used when the Token included by the RTP_Rx in\n   the\
    \ RAMS-R message is invalid.\n"
- title: 11.  Acknowledgments
  contents:
  - "11.  Acknowledgments\n   The approach presented in this document came out after\
    \ discussions\n   with various individuals in the AVT and MMUSIC WGs and the breakout\n\
    \   session held at the Anaheim meeting.  We thank each of these\n   individuals,\
    \ particularly Magnus Westerlund and Colin Perkins.\n"
- title: 12.  References
  contents:
  - '12.  References

    '
- title: 12.1.  Normative References
  contents:
  - "12.1.  Normative References\n   [RFC2104]  Krawczyk, H., Bellare, M., and R.\
    \ Canetti, \"HMAC: Keyed-\n              Hashing for Message Authentication\"\
    , RFC 2104,\n              February 1997.\n   [RFC2119]  Bradner, S., \"Key words\
    \ for use in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC\
    \ 2119, March 1997.\n   [RFC3550]  Schulzrinne, H., Casner, S., Frederick, R.,\
    \ and V.\n              Jacobson, \"RTP: A Transport Protocol for Real-Time\n\
    \              Applications\", STD 64, RFC 3550, July 2003.\n   [RFC3711]  Baugher,\
    \ M., McGrew, D., Naslund, M., Carrara, E., and K.\n              Norrman, \"\
    The Secure Real-time Transport Protocol (SRTP)\",\n              RFC 3711, March\
    \ 2004.\n   [RFC4086]  Eastlake, D., Schiller, J., and S. Crocker, \"Randomness\n\
    \              Requirements for Security\", BCP 106, RFC 4086, June 2005.\n  \
    \ [RFC4566]  Handley, M., Jacobson, V., and C. Perkins, \"SDP: Session\n     \
    \         Description Protocol\", RFC 4566, July 2006.\n   [RFC4585]  Ott, J.,\
    \ Wenger, S., Sato, N., Burmeister, C., and J. Rey,\n              \"Extended\
    \ RTP Profile for Real-time Transport Control\n              Protocol (RTCP)-Based\
    \ Feedback (RTP/AVPF)\", RFC 4585,\n              July 2006.\n   [RFC5234]  Crocker,\
    \ D. and P. Overell, \"Augmented BNF for Syntax\n              Specifications:\
    \ ABNF\", STD 68, RFC 5234, January 2008.\n   [RFC5760]  Ott, J., Chesterfield,\
    \ J., and E. Schooler, \"RTP Control\n              Protocol (RTCP) Extensions\
    \ for Single-Source Multicast\n              Sessions with Unicast Feedback\"\
    , RFC 5760, February 2010.\n   [RFC5761]  Perkins, C. and M. Westerlund, \"Multiplexing\
    \ RTP Data and\n              Control Packets on a Single Port\", RFC 5761, April\
    \ 2010.\n   [RFC5888]  Camarillo, G. and H. Schulzrinne, \"The Session Description\n\
    \              Protocol (SDP) Grouping Framework\", RFC 5888, June 2010.\n   [RFC5905]\
    \  Mills, D., Martin, J., Burbank, J., and W. Kasch, \"Network\n             \
    \ Time Protocol Version 4: Protocol and Algorithms\n              Specification\"\
    , RFC 5905, June 2010.\n   [RFC6222]  Begen, A., Perkins, C., and D. Wing, \"\
    Guidelines for\n              Choosing RTP Control Protocol (RTCP) Canonical Names\n\
    \              (CNAMEs)\", RFC 6222, April 2011.\n"
- title: 12.2.  Informative References
  contents:
  - "12.2.  Informative References\n   [RETRANSMISSION-FOR-SSM]\n              Van\
    \ Caenegem, T., Ver Steeg, B., and A. Begen,\n              \"Retransmission for\
    \ Source-Specific Multicast (SSM)\n              Sessions\", Work in Progress,\
    \ May 2011.\n   [RFC0793]  Postel, J., \"Transmission Control Protocol\", STD\
    \ 7,\n              RFC 793, September 1981.\n   [RFC2818]  Rescorla, E., \"HTTP\
    \ Over TLS\", RFC 2818, May 2000.\n   [RFC2827]  Ferguson, P. and D. Senie, \"\
    Network Ingress Filtering:\n              Defeating Denial of Service Attacks\
    \ which employ IP Source\n              Address Spoofing\", BCP 38, RFC 2827,\
    \ May 2000.\n   [RFC2974]  Handley, M., Perkins, C., and E. Whelan, \"Session\n\
    \              Announcement Protocol\", RFC 2974, October 2000.\n   [RFC3264]\
    \  Rosenberg, J. and H. Schulzrinne, \"An Offer/Answer Model\n              with\
    \ Session Description Protocol (SDP)\", RFC 3264,\n              June 2002.\n\
    \   [RFC4145]  Yon, D. and G. Camarillo, \"TCP-Based Media Transport in\n    \
    \          the Session Description Protocol (SDP)\", RFC 4145,\n             \
    \ September 2005.\n   [RFC4607]  Holbrook, H. and B. Cain, \"Source-Specific Multicast\
    \ for\n              IP\", RFC 4607, August 2006.\n   [RFC4787]  Audet, F. and\
    \ C. Jennings, \"Network Address Translation\n              (NAT) Behavioral Requirements\
    \ for Unicast UDP\", BCP 127,\n              RFC 4787, January 2007.\n   [RFC5104]\
    \  Wenger, S., Chandra, U., Westerlund, M., and B. Burman,\n              \"Codec\
    \ Control Messages in the RTP Audio-Visual Profile\n              with Feedback\
    \ (AVPF)\", RFC 5104, February 2008.\n   [RFC5226]  Narten, T. and H. Alvestrand,\
    \ \"Guidelines for Writing an\n              IANA Considerations Section in RFCs\"\
    , BCP 26, RFC 5226,\n              May 2008.\n   [RFC5652]  Housley, R., \"Cryptographic\
    \ Message Syntax (CMS)\", STD 70,\n              RFC 5652, September 2009.\n \
    \  [RFC5751]  Ramsdell, B. and S. Turner, \"Secure/Multipurpose Internet\n   \
    \           Mail Extensions (S/MIME) Version 3.2 Message\n              Specification\"\
    , RFC 5751, January 2010.\n   [RFC6263]  Marjou, X. and A. Sollaud, \"Application\
    \ Mechanism for\n              Keeping Alive the NAT Mappings Associated with\
    \ RTP / RTP\n              Control Protocol (RTCP) Flows\", RFC 6263, June 2011.\n\
    \   [RFC6285]  Ver Steeg, B., Begen, A., Van Caenegem, T., and Z. Vax,\n     \
    \         \"Unicast-Based Rapid Acquisition of Multicast RTP\n              Sessions\"\
    , RFC 6285, June 2011.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Ali Begen\n   Cisco\n   181 Bay Street\n   Toronto, ON\
    \  M5J 2T3\n   Canada\n   EMail: abegen@cisco.com\n   Dan Wing\n   Cisco\n   170\
    \ West Tasman Dr.\n   San Jose, CA  95134\n   USA\n   EMail: dwing@cisco.com\n\
    \   Tom Van Caenegem\n   Alcatel-Lucent\n   Copernicuslaan 50\n   Antwerpen  2018\n\
    \   Belgium\n   EMail: Tom.Van_Caenegem@alcatel-lucent.com\n"
