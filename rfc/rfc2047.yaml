- title: __initial_text__
  contents:
  - "        MIME (Multipurpose Internet Mail Extensions) Part Three:\n          \
    \    Message Header Extensions for Non-ASCII Text\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   STD 11, RFC 822, defines a message representation protocol specifying\n\
    \   considerable detail about US-ASCII message headers, and leaves the\n   message\
    \ content, or message body, as flat US-ASCII text.  This set of\n   documents,\
    \ collectively called the Multipurpose Internet Mail\n   Extensions, or MIME,\
    \ redefines the format of messages to allow for\n   (1) textual message bodies\
    \ in character sets other than US-ASCII,\n   (2) an extensible set of different\
    \ formats for non-textual message\n       bodies,\n   (3) multi-part message bodies,\
    \ and\n   (4) textual header information in character sets other than US-ASCII.\n\
    \   These documents are based on earlier work documented in RFC 934, STD\n   11,\
    \ and RFC 1049, but extends and revises them.  Because RFC 822 said\n   so little\
    \ about message bodies, these documents are largely\n   orthogonal to (rather\
    \ than a revision of) RFC 822.\n   This particular document is the third document\
    \ in the series.  It\n   describes extensions to RFC 822 to allow non-US-ASCII\
    \ text data in\n   Internet mail header fields.\n   Other documents in this series\
    \ include:\n   + RFC 2045, which specifies the various headers used to describe\n\
    \     the structure of MIME messages.\n   + RFC 2046, which defines the general\
    \ structure of the MIME media\n     typing system and defines an initial set of\
    \ media types,\n   + RFC 2048, which specifies various IANA registration procedures\n\
    \     for MIME-related facilities, and\n   + RFC 2049, which describes MIME conformance\
    \ criteria and\n     provides some illustrative examples of MIME message formats,\n\
    \     acknowledgements, and the bibliography.\n   These documents are revisions\
    \ of RFCs 1521, 1522, and 1590, which\n   themselves were revisions of RFCs 1341\
    \ and 1342.  An appendix in RFC\n   2049 describes differences and changes from\
    \ previous versions.\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   RFC 2045 describes a mechanism for denoting textual body\
    \ parts which\n   are coded in various character sets, as well as methods for\
    \ encoding\n   such body parts as sequences of printable US-ASCII characters.\
    \  This\n   memo describes similar techniques to allow the encoding of non-ASCII\n\
    \   text in various portions of a RFC 822 [2] message header, in a manner\n  \
    \ which is unlikely to confuse existing message handling software.\n   Like the\
    \ encoding techniques described in RFC 2045, the techniques\n   outlined here\
    \ were designed to allow the use of non-ASCII characters\n   in message headers\
    \ in a way which is unlikely to be disturbed by the\n   quirks of existing Internet\
    \ mail handling programs.  In particular,\n   some mail relaying programs are\
    \ known to (a) delete some message\n   header fields while retaining others, (b)\
    \ rearrange the order of\n   addresses in To or Cc fields, (c) rearrange the (vertical)\
    \ order of\n   header fields, and/or (d) \"wrap\" message headers at different\
    \ places\n   than those in the original message.  In addition, some mail reading\n\
    \   programs are known to have difficulty correctly parsing message\n   headers\
    \ which, while legal according to RFC 822, make use of\n   backslash-quoting to\
    \ \"hide\" special characters such as \"<\", \",\", or\n   \":\", or which exploit\
    \ other infrequently-used features of that\n   specification.\n   While it is\
    \ unfortunate that these programs do not correctly\n   interpret RFC 822 headers,\
    \ to \"break\" these programs would cause\n   severe operational problems for\
    \ the Internet mail system.  The\n   extensions described in this memo therefore\
    \ do not rely on little-\n   used features of RFC 822.\n   Instead, certain sequences\
    \ of \"ordinary\" printable ASCII characters\n   (known as \"encoded-words\")\
    \ are reserved for use as encoded data.  The\n   syntax of encoded-words is such\
    \ that they are unlikely to\n   \"accidentally\" appear as normal text in message\
    \ headers.\n   Furthermore, the characters used in encoded-words are restricted\
    \ to\n   those which do not have special meanings in the context in which the\n\
    \   encoded-word appears.\n   Generally, an \"encoded-word\" is a sequence of\
    \ printable ASCII\n   characters that begins with \"=?\", ends with \"?=\", and\
    \ has two \"?\"s in\n   between.  It specifies a character set and an encoding\
    \ method, and\n   also includes the original text encoded as graphic ASCII characters,\n\
    \   according to the rules for that encoding method.\n   A mail composer that\
    \ implements this specification will provide a\n   means of inputting non-ASCII\
    \ text in header fields, but will\n   translate these fields (or appropriate portions\
    \ of these fields) into\n   encoded-words before inserting them into the message\
    \ header.\n   A mail reader that implements this specification will recognize\n\
    \   encoded-words when they appear in certain portions of the message\n   header.\
    \  Instead of displaying the encoded-word \"as is\", it will\n   reverse the encoding\
    \ and display the original text in the designated\n   character set.\n"
- title: NOTES
  contents:
  - "NOTES\n   This memo relies heavily on notation and terms defined RFC 822 and\n\
    \   RFC 2045.  In particular, the syntax for the ABNF used in this memo\n   is\
    \ defined in RFC 822, as well as many of the terminal or nonterminal\n   symbols\
    \ from RFC 822 are used in the grammar for the header\n   extensions defined here.\
    \  Among the symbols defined in RFC 822 and\n   referenced in this memo are: 'addr-spec',\
    \ 'atom', 'CHAR', 'comment',\n   'CTLs', 'ctext', 'linear-white-space', 'phrase',\
    \ 'quoted-pair'.\n   'quoted-string', 'SPACE', and 'word'.  Successful implementation\
    \ of\n   this protocol extension requires careful attention to the RFC 822\n \
    \  definitions of these terms.\n   When the term \"ASCII\" appears in this memo,\
    \ it refers to the \"7-Bit\n   American Standard Code for Information Interchange\"\
    , ANSI X3.4-1986.\n   The MIME charset name for this character set is \"US-ASCII\"\
    .  When not\n   specifically referring to the MIME charset name, this document\
    \ uses\n   the term \"ASCII\", both for brevity and for consistency with RFC 822.\n\
    \   However, implementors are warned that the character set name must be\n   spelled\
    \ \"US-ASCII\" in MIME message and body part headers.\n   This memo specifies\
    \ a protocol for the representation of non-ASCII\n   text in message headers.\
    \  It specifically DOES NOT define any\n   translation between \"8-bit headers\"\
    \ and pure ASCII headers, nor is\n   any such translation assumed to be possible.\n"
- title: 2. Syntax of encoded-words
  contents:
  - "2. Syntax of encoded-words\n   An 'encoded-word' is defined by the following\
    \ ABNF grammar.  The\n   notation of RFC 822 is used, with the exception that\
    \ white space\n   characters MUST NOT appear between components of an 'encoded-word'.\n\
    \   encoded-word = \"=?\" charset \"?\" encoding \"?\" encoded-text \"?=\"\n \
    \  charset = token    ; see section 3\n   encoding = token   ; see section 4\n\
    \   token = 1*<Any CHAR except SPACE, CTLs, and especials>\n   especials = \"\
    (\" / \")\" / \"<\" / \">\" / \"@\" / \",\" / \";\" / \":\" / \"\n           \
    \    <\"> / \"/\" / \"[\" / \"]\" / \"?\" / \".\" / \"=\"\n   encoded-text = 1*<Any\
    \ printable ASCII character other than \"?\"\n                     or SPACE>\n\
    \                  ; (but see \"Use of encoded-words in message\n            \
    \      ; headers\", section 5)\n   Both 'encoding' and 'charset' names are case-independent.\
    \  Thus the\n   charset name \"ISO-8859-1\" is equivalent to \"iso-8859-1\", and\
    \ the\n   encoding named \"Q\" may be spelled either \"Q\" or \"q\".\n   An 'encoded-word'\
    \ may not be more than 75 characters long, including\n   'charset', 'encoding',\
    \ 'encoded-text', and delimiters.  If it is\n   desirable to encode more text\
    \ than will fit in an 'encoded-word' of\n   75 characters, multiple 'encoded-word's\
    \ (separated by CRLF SPACE) may\n   be used.\n   While there is no limit to the\
    \ length of a multiple-line header\n   field, each line of a header field that\
    \ contains one or more\n   'encoded-word's is limited to 76 characters.\n   The\
    \ length restrictions are included both to ease interoperability\n   through internetwork\
    \ mail gateways, and to impose a limit on the\n   amount of lookahead a header\
    \ parser must employ (while looking for a\n   final ?= delimiter) before it can\
    \ decide whether a token is an\n   \"encoded-word\" or something else.\n   IMPORTANT:\
    \ 'encoded-word's are designed to be recognized as 'atom's\n   by an RFC 822 parser.\
    \  As a consequence, unencoded white space\n   characters (such as SPACE and HTAB)\
    \ are FORBIDDEN within an\n   'encoded-word'.  For example, the character sequence\n\
    \      =?iso-8859-1?q?this is some text?=\n   would be parsed as four 'atom's,\
    \ rather than as a single 'atom' (by\n   an RFC 822 parser) or 'encoded-word'\
    \ (by a parser which understands\n   'encoded-words').  The correct way to encode\
    \ the string \"this is some\n   text\" is to encode the SPACE characters as well,\
    \ e.g.\n      =?iso-8859-1?q?this=20is=20some=20text?=\n   The characters which\
    \ may appear in 'encoded-text' are further\n   restricted by the rules in section\
    \ 5.\n"
- title: 3. Character sets
  contents:
  - "3. Character sets\n   The 'charset' portion of an 'encoded-word' specifies the\
    \ character\n   set associated with the unencoded text.  A 'charset' can be any\
    \ of\n   the character set names allowed in an MIME \"charset\" parameter of a\n\
    \   \"text/plain\" body part, or any character set name registered with\n   IANA\
    \ for use with the MIME text/plain content-type.\n   Some character sets use code-switching\
    \ techniques to switch between\n   \"ASCII mode\" and other modes.  If unencoded\
    \ text in an 'encoded-word'\n   contains a sequence which causes the charset interpreter\
    \ to switch\n   out of ASCII mode, it MUST contain additional control codes such\
    \ that\n   ASCII mode is again selected at the end of the 'encoded-word'.  (This\n\
    \   rule applies separately to each 'encoded-word', including adjacent\n   'encoded-word's\
    \ within a single header field.)\n   When there is a possibility of using more\
    \ than one character set to\n   represent the text in an 'encoded-word', and in\
    \ the absence of\n   private agreements between sender and recipients of a message,\
    \ it is\n   recommended that members of the ISO-8859-* series be used in\n   preference\
    \ to other character sets.\n"
- title: 4. Encodings
  contents:
  - "4. Encodings\n   Initially, the legal values for \"encoding\" are \"Q\" and \"\
    B\".  These\n   encodings are described below.  The \"Q\" encoding is recommended\
    \ for\n   use when most of the characters to be encoded are in the ASCII\n   character\
    \ set; otherwise, the \"B\" encoding should be used.\n   Nevertheless, a mail\
    \ reader which claims to recognize 'encoded-word's\n   MUST be able to accept\
    \ either encoding for any character set which it\n   supports.\n   Only a subset\
    \ of the printable ASCII characters may be used in\n   'encoded-text'.  Space\
    \ and tab characters are not allowed, so that\n   the beginning and end of an\
    \ 'encoded-word' are obvious.  The \"?\"\n   character is used within an 'encoded-word'\
    \ to separate the various\n   portions of the 'encoded-word' from one another,\
    \ and thus cannot\n   appear in the 'encoded-text' portion.  Other characters\
    \ are also\n   illegal in certain contexts.  For example, an 'encoded-word' in\
    \ a\n   'phrase' preceding an address in a From header field may not contain\n\
    \   any of the \"specials\" defined in RFC 822.  Finally, certain other\n   characters\
    \ are disallowed in some contexts, to ensure reliability for\n   messages that\
    \ pass through internetwork mail gateways.\n   The \"B\" encoding automatically\
    \ meets these requirements.  The \"Q\"\n   encoding allows a wide range of printable\
    \ characters to be used in\n   non-critical locations in the message header (e.g.,\
    \ Subject), with\n   fewer characters available for use in other locations.\n"
- title: 4.1. The "B" encoding
  contents:
  - "4.1. The \"B\" encoding\n   The \"B\" encoding is identical to the \"BASE64\"\
    \ encoding defined by RFC\n   2045.\n"
- title: 4.2. The "Q" encoding
  contents:
  - "4.2. The \"Q\" encoding\n   The \"Q\" encoding is similar to the \"Quoted-Printable\"\
    \ content-\n   transfer-encoding defined in RFC 2045.  It is designed to allow\
    \ text\n   containing mostly ASCII characters to be decipherable on an ASCII\n\
    \   terminal without decoding.\n   (1) Any 8-bit value may be represented by a\
    \ \"=\" followed by two\n       hexadecimal digits.  For example, if the character\
    \ set in use\n       were ISO-8859-1, the \"=\" character would thus be encoded\
    \ as\n       \"=3D\", and a SPACE by \"=20\".  (Upper case should be used for\n\
    \       hexadecimal digits \"A\" through \"F\".)\n   (2) The 8-bit hexadecimal\
    \ value 20 (e.g., ISO-8859-1 SPACE) may be\n       represented as \"_\" (underscore,\
    \ ASCII 95.).  (This character may\n       not pass through some internetwork\
    \ mail gateways, but its use\n       will greatly enhance readability of \"Q\"\
    \ encoded data with mail\n       readers that do not support this encoding.) \
    \ Note that the \"_\"\n       always represents hexadecimal 20, even if the SPACE\
    \ character\n       occupies a different code position in the character set in\
    \ use.\n   (3) 8-bit values which correspond to printable ASCII characters other\n\
    \       than \"=\", \"?\", and \"_\" (underscore), MAY be represented as those\n\
    \       characters.  (But see section 5 for restrictions.)  In\n       particular,\
    \ SPACE and TAB MUST NOT be represented as themselves\n       within encoded words.\n"
- title: 5. Use of encoded-words in message headers
  contents:
  - "5. Use of encoded-words in message headers\n   An 'encoded-word' may appear in\
    \ a message header or body part header\n   according to the following rules:\n"
- title: (1) An 'encoded-word' may replace a 'text' token (as defined by RFC 822)
  contents:
  - "(1) An 'encoded-word' may replace a 'text' token (as defined by RFC 822)\n  \
    \  in any Subject or Comments header field, any extension message\n    header\
    \ field, or any MIME body part field for which the field body\n    is defined\
    \ as '*text'.  An 'encoded-word' may also appear in any\n    user-defined (\"\
    X-\") message or body part header field.\n    Ordinary ASCII text and 'encoded-word's\
    \ may appear together in the\n    same header field.  However, an 'encoded-word'\
    \ that appears in a\n    header field defined as '*text' MUST be separated from\
    \ any adjacent\n    'encoded-word' or 'text' by 'linear-white-space'.\n"
- title: (2) An 'encoded-word' may appear within a 'comment' delimited by "(" and
  contents:
  - "(2) An 'encoded-word' may appear within a 'comment' delimited by \"(\" and\n\
    \    \")\", i.e., wherever a 'ctext' is allowed.  More precisely, the RFC\n  \
    \  822 ABNF definition for 'comment' is amended as follows:\n    comment = \"\
    (\" *(ctext / quoted-pair / comment / encoded-word) \")\"\n    A \"Q\"-encoded\
    \ 'encoded-word' which appears in a 'comment' MUST NOT\n    contain the characters\
    \ \"(\", \")\" or \"\n    'encoded-word' that appears in a 'comment' MUST be separated\
    \ from\n    any adjacent 'encoded-word' or 'ctext' by 'linear-white-space'.\n\
    \    It is important to note that 'comment's are only recognized inside\n    \"\
    structured\" field bodies.  In fields whose bodies are defined as\n    '*text',\
    \ \"(\" and \")\" are treated as ordinary characters rather than\n    comment\
    \ delimiters, and rule (1) of this section applies.  (See RFC\n    822, sections\
    \ 3.1.2 and 3.1.3)\n"
- title: (3) As a replacement for a 'word' entity within a 'phrase', for example,
  contents:
  - "(3) As a replacement for a 'word' entity within a 'phrase', for example,\n  \
    \  one that precedes an address in a From, To, or Cc header.  The ABNF\n    definition\
    \ for 'phrase' from RFC 822 thus becomes:\n    phrase = 1*( encoded-word / word\
    \ )\n    In this case the set of characters that may be used in a \"Q\"-encoded\n\
    \    'encoded-word' is restricted to: <upper and lower case ASCII\n    letters,\
    \ decimal digits, \"!\", \"*\", \"+\", \"-\", \"/\", \"=\", and \"_\"\n    (underscore,\
    \ ASCII 95.)>.  An 'encoded-word' that appears within a\n    'phrase' MUST be\
    \ separated from any adjacent 'word', 'text' or\n    'special' by 'linear-white-space'.\n\
    \   These are the ONLY locations where an 'encoded-word' may appear.  In\n   particular:\n\
    \   + An 'encoded-word' MUST NOT appear in any portion of an 'addr-spec'.\n  \
    \ + An 'encoded-word' MUST NOT appear within a 'quoted-string'.\n   + An 'encoded-word'\
    \ MUST NOT be used in a Received header field.\n   + An 'encoded-word' MUST NOT\
    \ be used in parameter of a MIME\n     Content-Type or Content-Disposition field,\
    \ or in any structured\n     field body except within a 'comment' or 'phrase'.\n\
    \   The 'encoded-text' in an 'encoded-word' must be self-contained;\n   'encoded-text'\
    \ MUST NOT be continued from one 'encoded-word' to\n   another.  This implies\
    \ that the 'encoded-text' portion of a \"B\"\n   'encoded-word' will be a multiple\
    \ of 4 characters long; for a \"Q\"\n   'encoded-word', any \"=\" character that\
    \ appears in the 'encoded-text'\n   portion will be followed by two hexadecimal\
    \ characters.\n   Each 'encoded-word' MUST encode an integral number of octets.\
    \  The\n   'encoded-text' in each 'encoded-word' must be well-formed according\n\
    \   to the encoding specified; the 'encoded-text' may not be continued in\n  \
    \ the next 'encoded-word'.  (For example, \"=?charset?Q?=?=\n   =?charset?Q?AB?=\"\
    \ would be illegal, because the two hex digits \"AB\"\n   must follow the \"=\"\
    \ in the same 'encoded-word'.)\n   Each 'encoded-word' MUST represent an integral\
    \ number of characters.\n   A multi-octet character may not be split across adjacent\
    \ 'encoded-\n   word's.\n   Only printable and white space character data should\
    \ be encoded using\n   this scheme.  However, since these encoding schemes allow\
    \ the\n   encoding of arbitrary octet values, mail readers that implement this\n\
    \   decoding should also ensure that display of the decoded data on the\n   recipient's\
    \ terminal will not cause unwanted side-effects.\n   Use of these methods to encode\
    \ non-textual data (e.g., pictures or\n   sounds) is not defined by this memo.\
    \  Use of 'encoded-word's to\n   represent strings of purely ASCII characters\
    \ is allowed, but\n   discouraged.  In rare cases it may be necessary to encode\
    \ ordinary\n   text that looks like an 'encoded-word'.\n"
- title: 6. Support of 'encoded-word's by mail readers
  contents:
  - '6. Support of ''encoded-word''s by mail readers

    '
- title: 6.1. Recognition of 'encoded-word's in message headers
  contents:
  - "6.1. Recognition of 'encoded-word's in message headers\n   A mail reader must\
    \ parse the message and body part headers according\n   to the rules in RFC 822\
    \ to correctly recognize 'encoded-word's.\n   'encoded-word's are to be recognized\
    \ as follows:\n   (1) Any message or body part header field defined as '*text',\
    \ or any\n       user-defined header field, should be parsed as follows: Beginning\n\
    \       at the start of the field-body and immediately following each\n      \
    \ occurrence of 'linear-white-space', each sequence of up to 75\n       printable\
    \ characters (not containing any 'linear-white-space')\n       should be examined\
    \ to see if it is an 'encoded-word' according to\n       the syntax rules in section\
    \ 2.  Any other sequence of printable\n       characters should be treated as\
    \ ordinary ASCII text.\n   (2) Any header field not defined as '*text' should\
    \ be parsed\n       according to the syntax rules for that header field.  However,\n\
    \       any 'word' that appears within a 'phrase' should be treated as an\n  \
    \     'encoded-word' if it meets the syntax rules in section 2.\n       Otherwise\
    \ it should be treated as an ordinary 'word'.\n   (3) Within a 'comment', any\
    \ sequence of up to 75 printable characters\n       (not containing 'linear-white-space'),\
    \ that meets the syntax\n       rules in section 2, should be treated as an 'encoded-word'.\n\
    \       Otherwise it should be treated as normal comment text.\n   (4) A MIME-Version\
    \ header field is NOT required to be present for\n       'encoded-word's to be\
    \ interpreted according to this\n       specification.  One reason for this is\
    \ that the mail reader is\n       not expected to parse the entire message header\
    \ before displaying\n       lines that may contain 'encoded-word's.\n"
- title: 6.2. Display of 'encoded-word's
  contents:
  - "6.2. Display of 'encoded-word's\n   Any 'encoded-word's so recognized are decoded,\
    \ and if possible, the\n   resulting unencoded text is displayed in the original\
    \ character set.\n   NOTE: Decoding and display of encoded-words occurs *after*\
    \ a\n   structured field body is parsed into tokens.  It is therefore\n   possible\
    \ to hide 'special' characters in encoded-words which, when\n   displayed, will\
    \ be indistinguishable from 'special' characters in the\n   surrounding text.\
    \  For this and other reasons, it is NOT generally\n   possible to translate a\
    \ message header containing 'encoded-word's to\n   an unencoded form which can\
    \ be parsed by an RFC 822 mail reader.\n   When displaying a particular header\
    \ field that contains multiple\n   'encoded-word's, any 'linear-white-space' that\
    \ separates a pair of\n   adjacent 'encoded-word's is ignored.  (This is to allow\
    \ the use of\n   multiple 'encoded-word's to represent long strings of unencoded\
    \ text,\n   without having to separate 'encoded-word's where spaces occur in the\n\
    \   unencoded text.)\n   In the event other encodings are defined in the future,\
    \ and the mail\n   reader does not support the encoding used, it may either (a)\
    \ display\n   the 'encoded-word' as ordinary text, or (b) substitute an appropriate\n\
    \   message indicating that the text could not be decoded.\n   If the mail reader\
    \ does not support the character set used, it may\n   (a) display the 'encoded-word'\
    \ as ordinary text (i.e., as it appears\n   in the header), (b) make a \"best\
    \ effort\" to display using such\n   characters as are available, or (c) substitute\
    \ an appropriate message\n   indicating that the decoded text could not be displayed.\n\
    \   If the character set being used employs code-switching techniques,\n   display\
    \ of the encoded text implicitly begins in \"ASCII mode\".  In\n   addition, the\
    \ mail reader must ensure that the output device is once\n   again in \"ASCII\
    \ mode\" after the 'encoded-word' is displayed.\n"
- title: 6.3. Mail reader handling of incorrectly formed 'encoded-word's
  contents:
  - "6.3. Mail reader handling of incorrectly formed 'encoded-word's\n   It is possible\
    \ that an 'encoded-word' that is legal according to the\n   syntax defined in\
    \ section 2, is incorrectly formed according to the\n   rules for the encoding\
    \ being used.   For example:\n   (1) An 'encoded-word' which contains characters\
    \ which are not legal\n       for a particular encoding (for example, a \"-\"\
    \ in the \"B\"\n       encoding, or a SPACE or HTAB in either the \"B\" or \"\
    Q\" encoding),\n       is incorrectly formed.\n   (2) Any 'encoded-word' which\
    \ encodes a non-integral number of\n       characters or octets is incorrectly\
    \ formed.\n   A mail reader need not attempt to display the text associated with\
    \ an\n   'encoded-word' that is incorrectly formed.  However, a mail reader\n\
    \   MUST NOT prevent the display or handling of a message because an\n   'encoded-word'\
    \ is incorrectly formed.\n"
- title: 7. Conformance
  contents:
  - "7. Conformance\n   A mail composing program claiming compliance with this specification\n\
    \   MUST ensure that any string of non-white-space printable ASCII\n   characters\
    \ within a '*text' or '*ctext' that begins with \"=?\" and\n   ends with \"?=\"\
    \ be a valid 'encoded-word'.  (\"begins\" means: at the\n   start of the field-body,\
    \ immediately following 'linear-white-space',\n   or immediately following a \"\
    (\" for an 'encoded-word' within '*ctext';\n   \"ends\" means: at the end of the\
    \ field-body, immediately preceding\n   'linear-white-space', or immediately preceding\
    \ a \")\" for an\n   'encoded-word' within '*ctext'.)  In addition, any 'word'\
    \ within a\n   'phrase' that begins with \"=?\" and ends with \"?=\" must be a\
    \ valid\n   'encoded-word'.\n   A mail reading program claiming compliance with\
    \ this specification\n   must be able to distinguish 'encoded-word's from 'text',\
    \ 'ctext', or\n   'word's, according to the rules in section 6, anytime they appear\
    \ in\n   appropriate places in message headers.  It must support both the \"B\"\
    \n   and \"Q\" encodings for any character set which it supports.  The\n   program\
    \ must be able to display the unencoded text if the character\n   set is \"US-ASCII\"\
    .  For the ISO-8859-* character sets, the mail\n   reading program must at least\
    \ be able to display the characters which\n   are also in the ASCII set.\n"
- title: 8. Examples
  contents:
  - "8. Examples\n   The following are examples of message headers containing 'encoded-\n\
    \   word's:\n   From: =?US-ASCII?Q?Keith_Moore?= <moore@cs.utk.edu>\n   To: =?ISO-8859-1?Q?Keld_J=F8rn_Simonsen?=\
    \ <keld@dkuug.dk>\n   CC: =?ISO-8859-1?Q?Andr=E9?= Pirard <PIRARD@vm1.ulg.ac.be>\n\
    \   Subject: =?ISO-8859-1?B?SWYgeW91IGNhbiByZWFkIHRoaXMgeW8=?=\n    =?ISO-8859-2?B?dSB1bmRlcnN0YW5kIHRoZSBleGFtcGxlLg==?=\n\
    \      Note: In the first 'encoded-word' of the Subject field above, the\n   \
    \   last \"=\" at the end of the 'encoded-text' is necessary because each\n  \
    \    'encoded-word' must be self-contained (the \"=\" character completes a\n\
    \      group of 4 base64 characters representing 2 octets).  An additional\n \
    \     octet could have been encoded in the first 'encoded-word' (so that\n   \
    \   the encoded-word would contain an exact multiple of 3 encoded\n      octets),\
    \ except that the second 'encoded-word' uses a different\n      'charset' than\
    \ the first one.\n   From: =?ISO-8859-1?Q?Olle_J=E4rnefors?= <ojarnef@admin.kth.se>\n\
    \   To: ietf-822@dimacs.rutgers.edu, ojarnef@admin.kth.se\n   Subject: Time for\
    \ ISO 10646?\n   To: Dave Crocker <dcrocker@mordor.stanford.edu>\n   Cc: ietf-822@dimacs.rutgers.edu,\
    \ paf@comsol.se\n   From: =?ISO-8859-1?Q?Patrik_F=E4ltstr=F6m?= <paf@nada.kth.se>\n\
    \   Subject: Re: RFC-HDR care and feeding\n   From: Nathaniel Borenstein <nsb@thumper.bellcore.com>\n\
    \         (=?iso-8859-8?b?7eXs+SDv4SDp7Oj08A==?=)\n   To: Greg Vaudreuil <gvaudre@NRI.Reston.VA.US>,\
    \ Ned Freed\n      <ned@innosoft.com>, Keith Moore <moore@cs.utk.edu>\n   Subject:\
    \ Test of new header generator\n   MIME-Version: 1.0\n   Content-type: text/plain;\
    \ charset=ISO-8859-1\n   The following examples illustrate how text containing\
    \ 'encoded-word's\n   which appear in a structured field body.  The rules are\
    \ slightly\n   different for fields defined as '*text' because \"(\" and \")\"\
    \ are not\n   recognized as 'comment' delimiters.  [Section 5, paragraph (1)].\n\
    \   In each of the following examples, if the same sequence were to occur\n  \
    \ in a '*text' field, the \"displayed as\" form would NOT be treated as\n   encoded\
    \ words, but be identical to the \"encoded form\".  This is\n   because each of\
    \ the encoded-words in the following examples is\n   adjacent to a \"(\" or \"\
    )\" character.\n   encoded form                                displayed as\n\
    \   ---------------------------------------------------------------------\n  \
    \ (=?ISO-8859-1?Q?a?=)                        (a)\n   (=?ISO-8859-1?Q?a?= b) \
    \                     (a b)\n           Within a 'comment', white space MUST appear\
    \ between an\n           'encoded-word' and surrounding text.  [Section 5,\n \
    \          paragraph (2)].  However, white space is not needed between\n     \
    \      the initial \"(\" that begins the 'comment', and the\n           'encoded-word'.\n\
    \   (=?ISO-8859-1?Q?a?= =?ISO-8859-1?Q?b?=)     (ab)\n           White space between\
    \ adjacent 'encoded-word's is not\n           displayed.\n   (=?ISO-8859-1?Q?a?=\
    \  =?ISO-8859-1?Q?b?=)    (ab)\n        Even multiple SPACEs between 'encoded-word's\
    \ are ignored\n        for the purpose of display.\n   (=?ISO-8859-1?Q?a?=   \
    \                      (ab)\n       =?ISO-8859-1?Q?b?=)\n           Any amount\
    \ of linear-space-white between 'encoded-word's,\n           even if it includes\
    \ a CRLF followed by one or more SPACEs,\n           is ignored for the purposes\
    \ of display.\n   (=?ISO-8859-1?Q?a_b?=)                      (a b)\n        \
    \   In order to cause a SPACE to be displayed within a portion\n           of\
    \ encoded text, the SPACE MUST be encoded as part of the\n           'encoded-word'.\n\
    \   (=?ISO-8859-1?Q?a?= =?ISO-8859-2?Q?_b?=)    (a b)\n           In order to\
    \ cause a SPACE to be displayed between two strings\n           of encoded text,\
    \ the SPACE MAY be encoded as part of one of\n           the 'encoded-word's.\n"
- title: 9. References
  contents:
  - "9. References\n   [RFC 822] Crocker, D., \"Standard for the Format of ARPA Internet\
    \ Text\n       Messages\", STD 11, RFC 822, UDEL, August 1982.\n   [RFC 2049]\
    \ Borenstein, N., and N. Freed, \"Multipurpose Internet Mail\n       Extensions\
    \ (MIME) Part Five: Conformance Criteria and Examples\",\n       RFC 2049, November\
    \ 1996.\n   [RFC 2045] Borenstein, N., and N. Freed, \"Multipurpose Internet Mail\n\
    \       Extensions (MIME) Part One: Format of Internet Message Bodies\",\n   \
    \    RFC 2045, November 1996.\n   [RFC 2046] Borenstein N., and N. Freed, \"Multipurpose\
    \ Internet Mail\n       Extensions (MIME) Part Two: Media Types\", RFC 2046,\n\
    \       November 1996.\n   [RFC 2048] Freed, N., Klensin, J., and J. Postel, \"\
    Multipurpose\n       Internet Mail Extensions (MIME) Part Four: Registration\n\
    \       Procedures\", RFC 2048, November 1996.\n"
- title: 10. Security Considerations
  contents:
  - "10. Security Considerations\n   Security issues are not discussed in this memo.\n"
- title: 11. Acknowledgements
  contents:
  - "11. Acknowledgements\n   The author wishes to thank Nathaniel Borenstein, Issac\
    \ Chan, Lutz\n   Donnerhacke, Paul Eggert, Ned Freed, Andreas M. Kirchwitz, Olle\n\
    \   Jarnefors, Mike Rosin, Yutaka Sato, Bart Schaefer, and Kazuhiko\n   Yamamoto,\
    \ for their helpful advice, insightful comments, and\n   illuminating questions\
    \ in response to earlier versions of this\n   specification.\n"
- title: 12. Author's Address
  contents:
  - "12. Author's Address\n   Keith Moore\n   University of Tennessee\n   107 Ayres\
    \ Hall\n   Knoxville TN 37996-1301\n   EMail: moore@cs.utk.edu\n"
- title: Appendix - changes since RFC 1522 (in no particular order)
  contents:
  - "Appendix - changes since RFC 1522 (in no particular order)\n   + explicitly state\
    \ that the MIME-Version is not requried to use\n     'encoded-word's.\n   + add\
    \ explicit note that SPACEs and TABs are not allowed within\n     'encoded-word's,\
    \ explaining that an 'encoded-word' must look like an\n     'atom' to an RFC822\
    \ parser.values, to be precise).\n   + add examples from Olle Jarnefors (thanks!)\
    \ which illustrate how\n     encoded-words with adjacent linear-white-space are\
    \ displayed.\n   + explicitly list terms defined in RFC822 and referenced in this\
    \ memo\n   + fix transcription typos that caused one or two lines and a couple\
    \ of\n     characters to disappear in the resulting text, due to nroff quirks.\n\
    \   + clarify that encoded-words are allowed in '*text' fields in both\n     RFC822\
    \ headers and MIME body part headers, but NOT as parameter\n     values.\n   +\
    \ clarify the requirement to switch back to ASCII within the encoded\n     portion\
    \ of an 'encoded-word', for any charset that uses code switching\n     sequences.\n\
    \   + add a note about 'encoded-word's being delimited by \"(\" and \")\"\n  \
    \   within a comment, but not in a *text (how bizarre!).\n   + fix the Andre Pirard\
    \ example to get rid of the trailing \"_\" after\n     the =E9.  (no longer needed\
    \ post-1342).\n   + clarification: an 'encoded-word' may appear immediately following\n\
    \     the initial \"(\" or immediately before the final \")\" that delimits a\n\
    \     comment, not just adjacent to \"(\" and \")\" *within* *ctext.\n   + add\
    \ a note to explain that a \"B\" 'encoded-word' will always have a\n     multiple\
    \ of 4 characters in the 'encoded-text' portion.\n   + add note about the \"=\"\
    \ in the examples\n   + note that processing of 'encoded-word's occurs *after*\
    \ parsing, and\n     some of the implications thereof.\n   + explicitly state\
    \ that you can't expect to translate between\n     1522 and either vanilla 822\
    \ or so-called \"8-bit headers\".\n   + explicitly state that 'encoded-word's\
    \ are not valid within a\n     'quoted-string'.\n"
