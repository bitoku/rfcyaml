- title: __initial_text__
  contents:
  - ''
- title: An Extensible Markup Language (XML) Configuration Access Protocol (XCAP)
  contents:
  - "An Extensible Markup Language (XML) Configuration Access Protocol (XCAP)\n  \
    \         Usage for Manipulating Presence Document Contents\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The IETF Trust (2007).\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes a usage of the Extensible Markup Language\n\
    \   (XML) Configuration Access Protocol (XCAP) for manipulating the\n   contents\
    \ of Presence Information Data Format (PIDF) based presence\n   documents.  It\
    \ is intended to be used in Session Initiation Protocol\n   (SIP) based presence\
    \ systems, where the Event State Compositor can\n   use the XCAP-manipulated presence\
    \ document as one of the inputs on\n   which it builds the overall presence state\
    \ for the presentity.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . 3\n   2.  Conventions . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . 4\n   3.  Relationship with Presence State Published Using SIP\n \
    \      PUBLISH . . . . . . . . . . . . . . . . . . . . . . . . . . . . 4\n   4.\
    \  Application Usage ID  . . . . . . . . . . . . . . . . . . . . . 6\n   5.  MIME\
    \ Type . . . . . . . . . . . . . . . . . . . . . . . . . . . 6\n   6.  Structure\
    \ of Manipulated Presence Information . . . . . . . . . 6\n   7.  Additional Constraints\
    \  . . . . . . . . . . . . . . . . . . . . 6\n   8.  Resource Interdependencies\
    \  . . . . . . . . . . . . . . . . . . 6\n   9.  Naming Conventions  . . . . .\
    \ . . . . . . . . . . . . . . . . . 6\n   10. Authorization Policies  . . . .\
    \ . . . . . . . . . . . . . . . . 6\n   11. Example . . . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . 7\n   12. Security Considerations . . . . . .\
    \ . . . . . . . . . . . . . . 8\n   13. IANA Considerations . . . . . . . . .\
    \ . . . . . . . . . . . . . 9\n     13.1.  XCAP Application Usage ID  . . . .\
    \ . . . . . . . . . . . . 9\n   14. Acknowledgements  . . . . . . . . . . . .\
    \ . . . . . . . . . . . 9\n   15. References  . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . 9\n     15.1.  Normative References . . . . . . . . . .\
    \ . . . . . . . . . 9\n     15.2.  Informative References . . . . . . . . . .\
    \ . . . . . . . . 9\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The Session Initiation Protocol (SIP) for Instant Messaging\
    \ and\n   Presence (SIMPLE) specifications allow a user, called a watcher, to\n\
    \   subscribe to another user, called a presentity, in order to learn its\n  \
    \ presence information [7].  The presence data model has been specified\n   in\
    \ [10].  The data model makes a clean separation between person-,\n   service-,\
    \ and device-related information.\n   A SIP-based mechanism, SIP PUBLISH method,\
    \ has been defined for\n   publishing presence state [4].  Using SIP PUBLISH,\
    \ a Presence User\n   Agent (PUA) can publish its view of the presence state,\
    \ independently\n   of and without the need to learn about the states set by other\
    \ PUAs.\n   However, SIP PUBLISH has a limited scope and does not address all\
    \ the\n   requirements for setting presence state.  The main issue is that SIP\n\
    \   PUBLISH creates a soft state that expires after the negotiated\n   lifetime\
    \ unless it is refreshed.  This makes it unsuitable for cases\n   where the state\
    \ should prevail without active devices capable of\n   refreshing the state.\n\
    \   There are three main use cases where setting of permanent presence\n   state\
    \ that is independent of activeness of any particular device is\n   useful.  The\
    \ first case concerns setting person-related state.  The\n   presentity would\
    \ often like to set its presence state even for\n   periods when it has no active\
    \ devices capable of publishing\n   available.  Good examples are traveling, vacations,\
    \ and so on.  The\n   second case is about setting state for services that are\
    \ open for\n   communication, even if the presentity does not have a device running\n\
    \   that service online.  Examples of these kinds of services include\n   e-mail,\
    \ Multimedia Messaging Service (MMS), and Short Message Service\n   (SMS).  In\
    \ these services, the presentity is provisioned with a\n   server that makes the\
    \ service persistently available, at least in\n   certain forms, and it would\
    \ be good to be able to advertise this to\n   the watchers.  Since it is not realistic\
    \ to assume that all e-mail,\n   MMS, or SMS servers can publish presence state\
    \ on their own (and even\n   if this were possible, such state would almost never\
    \ change), this\n   has to be done by some other device.  And since the availability\
    \ of\n   the service is not dependent on that device, it would be impractical\n\
    \   to require that device to be constantly active just to publish such\n   availability.\
    \  The third case concerns setting the default state of\n   any person, service,\
    \ or device in the absence of any device capable\n   of actively publishing such\
    \ state.  For instance, the presentity\n   might want to advertise that his or\
    \ her voice service is currently\n   closed, just to let the watchers know that\
    \ such service might be open\n   at some point.  Again, this type of default state\
    \ is independent of\n   any particular device and can be considered rather persistent.\n\
    \   Even though SIP PUBLISH remains the main way of publishing presence\n   state\
    \ in SIMPLE-based presence systems and is especially well-suited\n   for publishing\
    \ dynamic state (which presence mainly is), it needs to\n   be complemented by\
    \ the mechanism described in this document to\n   address the use cases presented\
    \ above.\n   XML Configuration Access Protocol (XCAP) [2] allows a client to read,\n\
    \   write, and modify application configuration data stored in XML format\n  \
    \ on a server.  The data has no expiration time, so it must be\n   explicitly\
    \ inserted and deleted.  The protocol allows multiple\n   clients to manipulate\
    \ the data, provided that they are authorized to\n   do so.  XCAP is already used\
    \ in SIMPLE-based presence systems for\n   manipulation of presence lists and\
    \ presence authorization policies.\n   This makes XCAP an ideal choice for doing\
    \ device-independent presence\n   document manipulation.\n   This document defines\
    \ an XML Configuration Access Protocol (XCAP)\n   application usage for manipulating\
    \ the contents of presence document.\n   Presence Information Document Format\
    \ (PIDF) [3] is used as the\n   presence document format, since the event state\
    \ compositor already\n   has to support it, as it is used in SIP PUBLISH.\n  \
    \ Section 3 describes in detail how the presence document manipulated\n   with\
    \ XCAP is related to soft state publishing done with SIP PUBLISH.\n   XCAP requires\
    \ application usages to standardize several pieces of\n   information, including\
    \ a unique application usage ID (AUID) and an\n   XML schema for the manipulated\
    \ data.  These are specified starting\n   from Section 4.\n"
- title: 2.  Conventions
  contents:
  - "2.  Conventions\n   In this document, the key words 'MUST', 'MUST NOT', 'REQUIRED',\n\
    \   'SHALL', 'SHALL NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'MAY',\n   and\
    \ 'OPTIONAL' are to be interpreted as described in RFC 2119 [1] and\n   indicate\
    \ requirement levels for compliant implementations.\n   Comprehensive terminology\
    \ of presence and event state publishing is\n   provided in \"Session Initiation\
    \ Protocol (SIP) Extension for Event\n   State Publication\" [4].\n"
- title: 3.  Relationship with Presence State Published Using SIP PUBLISH
  contents:
  - "3.  Relationship with Presence State Published Using SIP PUBLISH\n   The framework\
    \ for publishing presence state is described in Figure 1.\n   A central part of\
    \ the framework is the event state compositor\n   element, whose function is to\
    \ compose presence information received\n   from several sources into a single\
    \ coherent presence document.\n   The presence state manipulated with XCAP can\
    \ be seen as one of the\n   information sources for the compositor to be combined\
    \ with the soft\n   state information published using SIP PUBLISH.  This is illustrated\n\
    \   in Figure 1.  It is expected that, in the normal case, there can be\n   several\
    \ PUAs publishing their separate views with SIP PUBLISH, but\n   only a single\
    \ XCAP manipulated presence document.  As shown in the\n   figure, multiple XCAP\
    \ clients (for instance, in different physical\n   devices) can manipulate the\
    \ same document on the XCAP server, but\n   this still creates only one input\
    \ to the event state compositor.  The\n   XCAP server stores the XCAP manipulated\
    \ presence document under the\n   \"users\" tree in the XCAP document hierarchy.\
    \  See Section 9 for\n   details and Section 11 for an example.\n   As individual\
    \ inputs, the presence states set by XCAP and SIP PUBLISH\n   are completely separated,\
    \ and it is not possible to directly\n   manipulate the state set by one mechanism\
    \ with the other.  How the\n   compositor treats XCAP-based inputs with respect\
    \ to SIP PUBLISH-based\n   inputs is a matter of compositor policy, which is beyond\
    \ the scope of\n   this specification.  Since the SIP PUBLISH specification already\n\
    \   mandates the compositor to be able to construct the overall presence\n   state\
    \ from multiple inputs, which may contain non-orthogonal (or in\n   some ways\
    \ even conflicting) information, this XCAP usage does not\n   impose any new requirements\
    \ on the compositor functionality.\n               +---------------+         +------------+\n\
    \               |   Event State |         |  Presence  |<-- SIP SUBSCRIBE\n  \
    \             |   Compositor  +---------+  Agent     |--> SIP NOTIFY\n       \
    \        |               |         |   (PA)     |\n               +-------+-------+\
    \         +------------+\n                 ^     ^     ^\n                 | \
    \    |     |\n                 |     |     |       +---------------+\n       \
    \ +--------+     |     +-------|  XCAP server  |\n        |              |   \
    \          +-------+-------+\n        |              |                 ^     \
    \    ^\n        | SIP Publish  |                 |  XCAP   |\n        |      \
    \        |                 |         |\n     +--+--+        +--+--+         +-------+\
    \   +-------+\n     | PUA |        | PUA |         | XCAP  |   | XCAP  |\n   \
    \  |     |        |     |         | client|   | client|\n     +-----+        +-----+\
    \         +-------+   +-------+\n        Figure 1: Framework for Presence Publishing\
    \ and Event State\n                                Composition\n   The protocol\
    \ interface between XCAP server and the event state\n   compositor is not specified\
    \ here.\n"
- title: 4.  Application Usage ID
  contents:
  - "4.  Application Usage ID\n   XCAP requires application usages to define a unique\
    \ application usage\n   ID (AUID) in either the IETF tree or a vendor tree.  This\n\
    \   specification defines the 'pidf-manipulation' AUID within the IETF\n   tree,\
    \ via the IANA registration in Section 13.\n"
- title: 5.  MIME Type
  contents:
  - "5.  MIME Type\n   The MIME type for this application usage is 'application/pidf+xml'.\n"
- title: 6.  Structure of Manipulated Presence Information
  contents:
  - "6.  Structure of Manipulated Presence Information\n   The XML Schema of the presence\
    \ information is defined in the Presence\n   Information Data Format (PIDF) [3].\
    \  The PIDF also defines a\n   mechanism for extending presence information. \
    \ See [8], [9], [11],\n   and [12] for currently defined PIDF extensions and their\
    \ XML Schemas.\n   The namespace URI for PIDF is 'urn:ietf:params:xml:ns:pidf'\
    \ which is\n   also the XCAP default document namespace.\n"
- title: 7.  Additional Constraints
  contents:
  - "7.  Additional Constraints\n   There are no constraints on the document beyond\
    \ those described in\n   the XML schemas (PIDF and its extensions) and in the\
    \ description of\n   PIDF [3].\n"
- title: 8.  Resource Interdependencies
  contents:
  - "8.  Resource Interdependencies\n   There are no resource interdependencies beyond\
    \ the possible\n   interdependencies defined in PIDF [3] and XCAP [2] that need\
    \ to be\n   defined for this application usage.\n"
- title: 9.  Naming Conventions
  contents:
  - "9.  Naming Conventions\n   The XCAP server MUST store only a single XCAP manipulated\
    \ presence\n   document for each user.  The presence document MUST be located\
    \ under\n   the \"users\" tree, using filename \"index\".  See an example in\n\
    \   Section 11.\n"
- title: 10.  Authorization Policies
  contents:
  - "10.  Authorization Policies\n   This application usage does not modify the default\
    \ XCAP authorization\n   policy, which allows only a user (owner) to read, write,\
    \ or modify\n   their own documents.  A server can allow privileged users to modify\n\
    \   documents that they do not own, but the establishment and indication\n   of\
    \ such policies is outside the scope of this document.\n"
- title: 11.  Example
  contents:
  - "11.  Example\n   The section provides an example of a presence document provided\
    \ by an\n   XCAP Client to an XCAP Server.  The presence document illustrates\
    \ the\n   situation where a (human) presentity has left for vacation, and\n  \
    \ before that, has set his presence information so that he is only\n   available\
    \ via e-mail.  In the absence of any published soft state\n   information, this\
    \ would be the sole input to the compositor forming\n   the presence document.\
    \  The example document contains PIDF extensions\n   specified in \"RPID: Rich\
    \ Presence Extensions to the Presence\n   Information Data Format (PIDF)\" [8]\
    \ and \"CIPID: Contact Information\n   in Presence Information Data Format\" [9].\n\
    \   It is assumed that the presentity is a SIP user with Address-of-\n   Record\
    \ (AOR) sip:someone@example.com.  The XCAP root URI for\n   example.com is assumed\
    \ to be http://xcap.example.com.  The XCAP User\n   Identifier (XUI) is assumed\
    \ to be identical to the SIP AOR, according\n   to XCAP recommendations.  In this\
    \ case, the presence document would\n   be located at http://xcap.example.com/pidf-manipulation/users/\n\
    \   sip:someone@example.com/index.\n   The presence document is created with the\
    \ following XCAP operation:\n  PUT /pidf-manipulation/users/sip:someone@example.com/index\
    \ HTTP/1.1\n  Host: xcap.example.com\n  Content-Type: application/pidf+xml\n \
    \ ...\n  <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n        <presence xmlns=\"\
    urn:ietf:params:xml:ns:pidf\"\n             xmlns:rp=\"urn:ietf:params:xml:ns:pidf:rpid\"\
    \n             xmlns:dm=\"urn:ietf:params:xml:ns:pidf:data-model\"\n         \
    \    xmlns:ci=\"urn:ietf:params:xml:ns:pidf:cipid\"\n             entity=\"sip:someone@example.com\"\
    >\n          <tuple id=\"x8eg92m\">\n            <status>\n              <basic>closed</basic>\n\
    \            </status>\n            <rp:user-input>idle</rp:user-input>\n    \
    \        <rp:class>auth-1</rp:class>\n            <contact priority=\"0.5\">sip:user@example.com</contact>\n\
    \            <note>I'm available only by e-mail.</note>\n            <timestamp>2004-02-06T16:49:29Z</timestamp>\n\
    \          </tuple>\n          <tuple id=\"x8eg92n\">\n            <status>\n\
    \              <basic>open</basic>\n            </status>\n            <rp:class>auth-1</rp:class>\n\
    \            <contact priority=\"1.0\">mailto:someone@example.com</contact>\n\
    \            <note>I'm reading mail a couple of times a week</note>\n        \
    \  </tuple>\n          <dm:person id=\"p1\">\n             <rp:class>auth-A</rp:class>\n\
    \             <ci:homepage>http://www.example.com/~someone</ci:homepage>\n   \
    \          <rp:activities>\n                 <rp:vacation/>\n             </rp:activities>\n\
    \          </dm:person>\n        </presence>\n  When the user wants to change\
    \ the note related to e-mail service,\n  it is done with the following XCAP operation:\n\
    \  PUT /pidf-manipulation/users/sip:someone@example.com/index/\n  ~~/presence/tuple%5b@id='x8eg92n'%5d/note\
    \ HTTP/1.1\n  If-Match: \"xyz\"\n  Host: xcap.example.com\n  Content-Type: application/xcap-el+xml\n\
    \  ...\n  <note>I'm reading mails on Tuesdays and Fridays</note>\n"
- title: 12.  Security Considerations
  contents:
  - "12.  Security Considerations\n   A presence document may contain information\
    \ that is highly sensitive.\n   Its delivery to watchers needs to happen strictly\
    \ according to the\n   relevant authorization policies.  It is also important\
    \ that only\n   authorized clients are able to manipulate the presence information.\n\
    \   The XCAP base specification mandates that all XCAP servers MUST\n   implement\
    \ HTTP Digest authentication specified in RFC 2617 [5].\n   Furthermore, XCAP\
    \ servers MUST implement HTTP over TLS [6].  It is\n   recommended that administrators\
    \ of XCAP servers use an HTTPS URI as\n   the XCAP root services' URI, so that\
    \ the digest client authentication\n   occurs over TLS.  By using these means,\
    \ XCAP client and server can\n   ensure the confidentiality and integrity of the\
    \ XCAP presence\n   document manipulation operations, and that only authorized\
    \ clients\n   are allowed to perform them.\n"
- title: 13.  IANA Considerations
  contents:
  - "13.  IANA Considerations\n   There is an IANA consideration associated with this\
    \ specification.\n"
- title: 13.1.  XCAP Application Usage ID
  contents:
  - "13.1.  XCAP Application Usage ID\n   This section registers a new XCAP Application\
    \ Usage ID (AUID)\n   according to the IANA procedures defined in [2].\n   Name\
    \ of the AUID: pidf-manipulation\n   Description: Pidf-manipulation application\
    \ usage defines how XCAP is\n   used to manipulate the contents of PIDF-based\
    \ presence documents.\n"
- title: 14.  Acknowledgements
  contents:
  - "14.  Acknowledgements\n   The authors would like to thank Jari Urpalainen, Jonathan\
    \ Rosenberg,\n   Hisham Khartabil, Aki Niemi, Mikko Lonnfors, Oliver Biot, Alex\
    \ Audu,\n   Krisztian Kiss, Jose Costa-Requena, George Foti, and Paul Kyzivat\
    \ for\n   their comments.\n"
- title: 15.  References
  contents:
  - '15.  References

    '
- title: 15.1.  Normative References
  contents:
  - "15.1.  Normative References\n   [1]   Bradner, S., \"Key words for use in RFCs\
    \ to Indicate Requirement\n         Levels\", BCP 14, RFC 2119, March 1997.\n\
    \   [2]   Rosenberg, J., \"The Extensible Markup Language (XML)\n         Configuration\
    \ Access Protocol (XCAP)\", RFC 4825, May 2007.\n   [3]   Sugano, H., Fujimoto,\
    \ S., Klyne, G., Bateman, A., Carr, W., and\n         J. Peterson, \"Presence\
    \ Information Data Format (PIDF)\",\n         RFC 3863, August 2004.\n   [4] \
    \  Niemi, A., \"Session Initiation Protocol (SIP) Extension for\n         Event\
    \ State Publication\", RFC 3903, October 2004.\n   [5]   Franks, J., \"HTTP Authentication:\
    \ Basic and Digest Access\n         Authentication\", RFC 2617, June 1999.\n \
    \  [6]   Rescorla, E., \"HTTP Over TLS\", RFC 2818, May 2000.\n"
- title: 15.2.  Informative References
  contents:
  - "15.2.  Informative References\n   [7]   Rosenberg, J., \"A Presence Event Package\
    \ for the Session\n         Initiation Protocol (SIP)\", RFC 3856, August 2004.\n\
    \   [8]   Schulzrinne, H., Gurbani, V., Kyzivat, P., and J. Rosenberg,\n     \
    \    \"RPID: Rich Presence Extensions to the Presence Information\n         Data\
    \ Format (PIDF)\", RFC 4480, July 2006.\n   [9]   Schulzrinne, H., \"CIPID: Contact\
    \ Information for the Presence\n         Information Data Format\", RFC 4482,\
    \ July 2006.\n   [10]  Rosenberg, J., \"A Data Model for Presence\", RFC 4479,\n\
    \         July 2006.\n   [11]  Lonnfors, M. and K. Kiss, \"Session Initiation\
    \ Protocol (SIP)\n         User Agent Capability Extension to Presence Information\
    \ Data\n         Format (PIDF)\", Work in Progress, July 2006.\n   [12]  Schulzrinne,\
    \ H., \"Timed Presence Extensions to the Presence\n         Information Data Format\
    \ (PIDF) to Indicate Status Information\n         for Past and Future Time Intervals\"\
    , RFC 4481, July 2006.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Markus Isomaki\n   Nokia\n   P.O. BOX 100\n   00045 NOKIA\
    \ GROUP\n   Finland\n   EMail: markus.isomaki@nokia.com\n   Eva Leppanen\n   Nokia\n\
    \   P.O. BOX 785\n   33101 Tampere\n   Finland\n   EMail: eva-maria.leppanen@nokia.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2007).\n   This document\
    \ is subject to the rights, licenses and restrictions\n   contained in BCP 78,\
    \ and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE\
    \ INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED,\
    \ INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION\
    \ HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY\
    \ OR FITNESS FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
