- title: __initial_text__
  contents:
  - '                IPv6 Stateless Address Autoconfiguration

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1998).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document specifies the steps a host takes in deciding how to\n\
    \   autoconfigure its interfaces in IP version 6. The autoconfiguration\n   process\
    \ includes creating a link-local address and verifying its\n   uniqueness on a\
    \ link, determining what information should be\n   autoconfigured (addresses,\
    \ other information, or both), and in the\n   case of addresses, whether they\
    \ should be obtained through the\n   stateless mechanism, the stateful mechanism,\
    \ or both.  This document\n   defines the process for generating a link-local\
    \ address, the process\n   for generating site-local and global addresses via\
    \ stateless address\n   autoconfiguration, and the Duplicate Address Detection\
    \ procedure. The\n   details of autoconfiguration using the stateful protocol\
    \ are\n   specified elsewhere.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n      5.4.  Duplicate Address Detection.........................\
    \   13\n         5.4.1.  Message Validation.............................   14\n\
    \         5.4.2.  Sending Neighbor Solicitation Messages.........   14\n     \
    \    5.4.3.  Receiving Neighbor Solicitation Messages.......   15\n         5.4.4.\
    \  Receiving Neighbor Advertisement Messages......   16\n         5.4.5.  When\
    \ Duplicate Address Detection Fails.........   16\n      5.5.  Creation of Global\
    \ and Site-Local Addresses.........   16\n         5.5.1.  Soliciting Router Advertisements...............\
    \   16\n         5.5.2.  Absence of Router Advertisements...............   17\n\
    \         5.5.3.  Router Advertisement Processing................   17\n     \
    \    5.5.4.  Address Lifetime Expiry........................   19\n      5.6.\
    \  Configuration Consistency...........................   19\n   6.  SECURITY\
    \ CONSIDERATIONS..................................   20\n   7.  References...............................................\
    \   20\n   8.  Acknowledgements and Authors' Addresses..................   21\n\
    \   9.  APPENDIX A: LOOPBACK SUPPRESSION & DUPLICATE ADDRESS\n         DETECTION..............................................\
    \   22\n   10. APPENDIX B: CHANGES SINCE RFC 1971.......................   24\n\
    \   11. Full Copyright Statement.................................   25\n"
- title: 1.  INTRODUCTION
  contents:
  - "1.  INTRODUCTION\n   This document specifies the steps a host takes in deciding\
    \ how to\n   autoconfigure its interfaces in IP version 6. The autoconfiguration\n\
    \   process includes creating a link-local address and verifying its\n   uniqueness\
    \ on a link, determining what information should be\n   autoconfigured (addresses,\
    \ other information, or both), and in the\n   case of addresses, whether they\
    \ should be obtained through the\n   stateless mechanism, the stateful mechanism,\
    \ or both.  This document\n   defines the process for generating a link-local\
    \ address, the process\n   for generating site-local and global addresses via\
    \ stateless address\n   autoconfiguration, and the Duplicate Address Detection\
    \ procedure. The\n   details of autoconfiguration using the stateful protocol\
    \ are\n   specified elsewhere.\n   IPv6 defines both a stateful and stateless\
    \ address autoconfiguration\n   mechanism. Stateless autoconfiguration requires\
    \ no manual\n   configuration of hosts, minimal (if any) configuration of routers,\n\
    \   and no additional servers.  The stateless mechanism allows a host to\n   generate\
    \ its own addresses using a combination of locally available\n   information and\
    \ information advertised by routers. Routers advertise\n   prefixes that identify\
    \ the subnet(s) associated with a link, while\n   hosts generate an \"interface\
    \ identifier\" that uniquely identifies an\n   interface on a subnet. An address\
    \ is formed by combining the two. In\n   the absence of routers, a host can only\
    \ generate link-local\n   addresses. However, link-local addresses are sufficient\
    \ for allowing\n   communication among nodes attached to the same link.\n   In\
    \ the stateful autoconfiguration model, hosts obtain interface\n   addresses and/or\
    \ configuration information and parameters from a\n   server.  Servers maintain\
    \ a database that keeps track of which\n   addresses have been assigned to which\
    \ hosts. The stateful\n   autoconfiguration protocol allows hosts to obtain addresses,\
    \ other\n   configuration information or both from a server.  Stateless and\n\
    \   stateful autoconfiguration complement each other. For example, a host\n  \
    \ can use stateless autoconfiguration to configure its own addresses,\n   but\
    \ use stateful autoconfiguration to obtain other information.\n   Stateful autoconfiguration\
    \ for IPv6 is the subject of future work\n   [DHCPv6].\n   The stateless approach\
    \ is used when a site is not particularly\n   concerned with the exact addresses\
    \ hosts use, so long as they are\n   unique and properly routable. The stateful\
    \ approach is used when a\n   site requires tighter control over exact address\
    \ assignments.  Both\n   stateful and stateless address autoconfiguration may\
    \ be used\n   simultaneously.  The site administrator specifies which type of\n\
    \   autoconfiguration to use through the setting of appropriate fields in\n  \
    \ Router Advertisement messages [DISCOVERY].\n   IPv6 addresses are leased to\
    \ an interface for a fixed (possibly\n   infinite) length of time. Each address\
    \ has an associated lifetime\n   that indicates how long the address is bound\
    \ to an interface. When a\n   lifetime expires, the binding (and address) become\
    \ invalid and the\n   address may be reassigned to another interface elsewhere\
    \ in the\n   Internet. To handle the expiration of address bindings gracefully,\
    \ an\n   address goes through two distinct phases while assigned to an\n   interface.\
    \ Initially, an address is \"preferred\", meaning that its use\n   in arbitrary\
    \ communication is unrestricted. Later, an address becomes\n   \"deprecated\"\
    \ in anticipation that its current interface binding will\n   become invalid.\
    \ While in a deprecated state, the use of an address is\n   discouraged, but not\
    \ strictly forbidden.  New communication (e.g.,\n   the opening of a new TCP connection)\
    \ should use a preferred address\n   when possible.  A deprecated address should\
    \ be used only by\n   applications that have been using it and would have difficulty\n\
    \   switching to another address without a service disruption.\n   To insure that\
    \ all configured addresses are likely to be unique on a\n   given link, nodes\
    \ run a \"duplicate address detection\" algorithm on\n   addresses before assigning\
    \ them to an interface.  The Duplicate\n   Address Detection algorithm is performed\
    \ on all addresses,\n   independent of whether they are obtained via stateless\
    \ or stateful\n   autoconfiguration. This document defines the Duplicate Address\n\
    \   Detection algorithm.\n   The autoconfiguration process specified in this document\
    \ applies only\n   to hosts and not routers. Since host autoconfiguration uses\n\
    \   information advertised by routers, routers will need to be configured\n  \
    \ by some other means. However, it is expected that routers will\n   generate\
    \ link-local addresses using the mechanism described in this\n   document. In\
    \ addition, routers are expected to successfully pass the\n   Duplicate Address\
    \ Detection procedure described in this document on\n   all addresses prior to\
    \ assigning them to an interface.\n   Section 2 provides definitions for terminology\
    \ used throughout this\n   document. Section 3 describes the design goals that\
    \ lead to the\n   current autoconfiguration procedure. Section 4 provides an overview\n\
    \   of the protocol, while Section 5 describes the protocol in detail.\n"
- title: 2.  TERMINOLOGY
  contents:
  - "2.  TERMINOLOGY\n   IP - Internet Protocol Version 6.  The terms IPv4 and are\
    \ used\n        only in contexts where necessary to avoid ambiguity.\n   node\
    \ - a device that implements IP.\n   router - a node that forwards IP packets\
    \ not explicitly addressed to\n        itself.\n   host - any node that is not\
    \ a router.\n   upper layer - a protocol layer immediately above IP.  Examples\
    \ are\n        transport protocols such as TCP and UDP, control protocols such\n\
    \        as ICMP, routing protocols such as OSPF, and internet or lower-\n   \
    \     layer protocols being \"tunneled\" over (i.e., encapsulated in) IP\n   \
    \     such as IPX, AppleTalk, or IP itself.\n   link - a communication facility\
    \ or medium over which nodes can\n        communicate at the link layer, i.e.,\
    \ the layer immediately below\n        IP.  Examples are Ethernets (simple or\
    \ bridged); PPP links;\n        X.25, Frame Relay, or ATM networks; and internet\
    \ (or higher)\n        layer \"tunnels\", such as tunnels over IPv4 or IPv6 itself.\n\
    \   interface - a node's attachment to a link.\n   packet - an IP header plus\
    \ payload.\n   address - an IP-layer identifier for an interface or a set of\n\
    \        interfaces.\n   unicast address - an identifier for a single interface.\
    \ A packet sent\n        to a unicast address is delivered to the interface identified\
    \ by\n        that address.\n   multicast address - an identifier for a set of\
    \ interfaces (typically\n        belonging to different nodes). A packet sent\
    \ to a multicast\n        address is delivered to all interfaces identified by\
    \ that\n        address.\n   anycast address - an identifier for a set of interfaces\
    \ (typically\n        belonging to different nodes).  A packet sent to an anycast\n\
    \        address is delivered to one of the interfaces identified by that\n  \
    \      address (the \"nearest\" one, according to the routing protocol's\n   \
    \     measure of distance).  See [ADDR-ARCH].\n   solicited-node multicast address\
    \ - a multicast address to which\n        Neighbor Solicitation messages are sent.\
    \ The algorithm for\n        computing the address is given in [DISCOVERY].\n\
    \   link-layer address - a link-layer identifier for an interface.\n        Examples\
    \ include IEEE 802 addresses for Ethernet links and E.164\n        addresses for\
    \ ISDN links.\n   link-local address - an address having link-only scope that\
    \ can be\n        used to reach neighboring nodes attached to the same link. \
    \ All\n        interfaces have a link-local unicast address.\n   site-local address\
    \ - an address having scope that is limited to the\n        local site.\n   global\
    \ address - an address with unlimited scope.\n   communication - any packet exchange\
    \ among nodes that requires that\n        the address of each node used in the\
    \ exchange remain the same\n        for the duration of the packet exchange. \
    \ Examples are a TCP\n        connection or a UDP request- response.\n   tentative\
    \ address - an address whose uniqueness on a link is being\n        verified,\
    \ prior to its assignment to an interface.  A tentative\n        address is not\
    \ considered assigned to an interface in the usual\n        sense. An interface\
    \ discards received packets addressed to a\n        tentative address, but accepts\
    \ Neighbor Discovery packets\n        related to Duplicate Address Detection for\
    \ the tentative\n        address.\n   preferred address - an address assigned\
    \ to an interface whose use by\n        upper layer protocols is unrestricted.\
    \ Preferred addresses may\n        be used as the source (or destination) address\
    \ of packets sent\n        from (or to) the interface.\n   deprecated address\
    \ - An address assigned to an interface whose use is\n        discouraged, but\
    \ not forbidden.  A deprecated address should no\n        longer be used as a\
    \ source address in new communications, but\n        packets sent from or to deprecated\
    \ addresses are delivered as\n        expected.  A deprecated address may continue\
    \ to be used as a\n        source address in communications where switching to\
    \ a preferred\n        address causes hardship to a specific upper-layer activity\n\
    \        (e.g., an existing TCP connection).\n   valid address - a preferred or\
    \ deprecated address. A valid address\n        may appear as the source or destination\
    \ address of a packet, and\n        the internet routing system is expected to\
    \ deliver packets sent\n        to a valid address to their intended recipients.\n\
    \   invalid address - an address that is not assigned to any interface. A\n  \
    \      valid address becomes invalid when its valid lifetime expires.\n      \
    \  Invalid addresses should not appear as the destination or source\n        address\
    \ of a packet. In the former case, the internet routing\n        system will be\
    \ unable to deliver the packet, in the later case\n        the recipient of the\
    \ packet will be unable to respond to it.\n   preferred lifetime - the length\
    \ of time that a valid address is\n        preferred (i.e., the time until deprecation).\
    \ When the preferred\n        lifetime expires, the address becomes deprecated.\n\
    \   valid lifetime - the length of time an address remains in the valid\n    \
    \    state (i.e., the time until invalidation). The valid lifetime\n        must\
    \ be greater then or equal to the preferred lifetime.  When\n        the valid\
    \ lifetime expires, the address becomes invalid.\n   interface identifier - a\
    \ link-dependent identifier for an interface\n        that is (at least) unique\
    \ per link [ADDR-ARCH]. Stateless\n        address autoconfiguration combines\
    \ an interface identifier with\n        a prefix to form an address. From address\
    \ autoconfiguration's\n        perspective, an interface identifier is a bit string\
    \ of known\n        length.  The exact length of an interface identifier and the\
    \ way\n        it is created is defined in a separate link-type specific\n   \
    \     document that covers issues related to the transmission of IP\n        over\
    \ a particular link type (e.g., [IPv6-ETHER]).  In many\n        cases, the identifier\
    \ will be the same as the interface's link-\n        layer address.\n"
- title: 2.1.  Requirements
  contents:
  - "2.1.  Requirements\n   The keywords MUST, MUST NOT, REQUIRED, SHALL, SHALL NOT,\
    \ SHOULD,\n   SHOULD NOT, RECOMMENDED, MAY, and OPTIONAL, when they appear in\
    \ this\n   document, are to be interpreted as described in [KEYWORDS].\n"
- title: 3.  DESIGN GOALS
  contents:
  - "3.  DESIGN GOALS\n   Stateless autoconfiguration is designed with the following\
    \ goals in\n   mind:\n      o Manual configuration of individual machines before\
    \ connecting\n        them to the network should not be required. Consequently,\
    \ a\n        mechanism is needed that allows a host to obtain or create\n    \
    \    unique addresses for each of its interfaces. Address\n        autoconfiguration\
    \ assumes that each interface can provide a\n        unique identifier for that\
    \ interface (i.e., an \"interface\n        identifier\").  In the simplest case,\
    \ an interface identifier\n        consists of the interface's link-layer address.\
    \ An interface\n        identifier can be combined with a prefix to form an address.\n\
    \      o Small sites consisting of a set of machines attached to a single\n  \
    \      link should not require the presence of a stateful server or\n        router\
    \ as a prerequisite for communicating.  Plug-and-play\n        communication is\
    \ achieved through the use of link-local\n        addresses.  Link-local addresses\
    \ have a well-known prefix that\n        identifies the (single) shared link to\
    \ which a set of nodes\n        attach. A host forms a link-local address by appending\
    \ its\n        interface identifier to the link-local prefix.\n      o A large\
    \ site with multiple networks and routers should not\n        require the presence\
    \ of a stateful address configuration server.\n        In order to generate site-local\
    \ or global addresses, hosts must\n        determine the prefixes that identify\
    \ the subnets to which they\n        attach.  Routers generate periodic Router\
    \ Advertisements that\n        include options listing the set of active prefixes\
    \ on a link.\n      o Address configuration should facilitate the graceful renumbering\n\
    \        of a site's machines. For example, a site may wish to renumber\n    \
    \    all of its nodes when it switches to a new network service\n        provider.\
    \  Renumbering is achieved through the leasing of\n        addresses to interfaces\
    \ and the assignment of multiple addresses\n        to the same interface.  Lease\
    \ lifetimes provide the mechanism\n        through which a site phases out old\
    \ prefixes.  The assignment of\n        multiple addresses to an interface provides\
    \ for a transition\n        period during which both a new address and the one\
    \ being phased\n        out work simultaneously.\n      o System administrators\
    \ need the ability to specify whether\n        stateless autoconfiguration, stateful\
    \ autoconfiguration, or both\n        should be used.  Router Advertisements include\
    \ flags specifying\n        which mechanisms a host should use.\n"
- title: 4.  PROTOCOL OVERVIEW
  contents:
  - "4.  PROTOCOL OVERVIEW\n   This section provides an overview of the typical steps\
    \ that take\n   place when an interface autoconfigures itself.  Autoconfiguration\
    \ is\n   performed only on multicast-capable links and begins when a\n   multicast-capable\
    \ interface is enabled, e.g., during system startup.\n   Nodes (both hosts and\
    \ routers) begin the autoconfiguration process by\n   generating a link-local\
    \ address for the interface. A link-local\n   address is formed by appending the\
    \ interface's identifier to the\n   well-known link-local prefix.\n   Before the\
    \ link-local address can be assigned to an interface and\n   used, however, a\
    \ node must attempt to verify that this \"tentative\"\n   address is not already\
    \ in use by another node on the link.\n   Specifically, it sends a Neighbor Solicitation\
    \ message containing the\n   tentative address as the target. If another node\
    \ is already using\n   that address, it will return a Neighbor Advertisement saying\
    \ so. If\n   another node is also attempting to use the same address, it will\
    \ send\n   a Neighbor Solicitation for the target as well. The exact number of\n\
    \   times the Neighbor Solicitation is (re)transmitted and the delay time\n  \
    \ between consecutive solicitations is link-specific and may be set by\n   system\
    \ management.\n   If a node determines that its tentative link-local address is\
    \ not\n   unique, autoconfiguration stops and manual configuration of the\n  \
    \ interface is required.  To simplify recovery in this case, it should\n   be\
    \ possible for an administrator to supply an alternate interface\n   identifier\
    \ that overrides the default identifier in such a way that\n   the autoconfiguration\
    \ mechanism can then be applied using the new\n   (presumably unique) interface\
    \ identifier.  Alternatively, link-local\n   and other addresses will need to\
    \ be configured manually.\n   Once a node ascertains that its tentative link-local\
    \ address is\n   unique, it assigns it to the interface. At this point, the node\
    \ has\n   IP-level connectivity with neighboring nodes.  The remaining\n   autoconfiguration\
    \ steps are performed only by hosts; the\n   (auto)configuration of routers is\
    \ beyond the scope of this document.\n   The next phase of autoconfiguration involves\
    \ obtaining a Router\n   Advertisement or determining that no routers are present.\
    \ If routers\n   are present, they will send Router Advertisements that specify\
    \ what\n   sort of autoconfiguration a host should do.  If no routers are\n  \
    \ present, stateful autoconfiguration should be invoked.\n   Routers send Router\
    \ Advertisements periodically, but the delay\n   between successive advertisements\
    \ will generally be longer than a\n   host performing autoconfiguration will want\
    \ to wait [DISCOVERY].  To\n   obtain an advertisement quickly, a host sends one\
    \ or more Router\n   Solicitations to the all-routers multicast group.  Router\n\
    \   Advertisements contain two flags indicating what type of stateful\n   autoconfiguration\
    \ (if any) should be performed. A \"managed address\n   configuration\" flag indicates\
    \ whether hosts should use stateful\n   autoconfiguration to obtain addresses.\
    \ An \"other stateful\n   configuration\" flag indicates whether hosts should\
    \ use stateful\n   autoconfiguration to obtain additional information (excluding\n\
    \   addresses).\n   Router Advertisements also contain zero or more Prefix Information\n\
    \   options that contain information used by stateless address\n   autoconfiguration\
    \ to generate site-local and global addresses.  It\n   should be noted that the\
    \ stateless and stateful address\n   autoconfiguration fields in Router Advertisements\
    \ are processed\n   independently of one another, and a host may use both stateful\
    \ and\n   stateless address autoconfiguration simultaneously.  One Prefix\n  \
    \ Information option field, the \"autonomous address-configuration\n   flag\"\
    , indicates whether or not the option even applies to stateless\n   autoconfiguration.\
    \  If it does, additional option fields contain a\n   subnet prefix together with\
    \ lifetime values indicating how long\n   addresses created from the prefix remain\
    \ preferred and valid.\n   Because routers generate Router Advertisements periodically,\
    \ hosts\n   will continually receive new advertisements. Hosts process the\n \
    \  information contained in each advertisement as described above,\n   adding\
    \ to and refreshing information received in previous\n   advertisements.\n   For\
    \ safety, all addresses must be tested for uniqueness prior to\n   their assignment\
    \ to an interface.  In the case of addresses created\n   through stateless autoconfig,\
    \ however, the uniqueness of an address\n   is determined primarily by the portion\
    \ of the address formed from an\n   interface identifier.  Thus, if a node has\
    \ already verified the\n   uniqueness of a link-local address, additional addresses\
    \ created from\n   the same interface identifier need not be tested individually.\
    \ In\n   contrast, all addresses obtained manually or via stateful address\n \
    \  autoconfiguration should be tested for uniqueness individually. To\n   accommodate\
    \ sites that believe the overhead of performing Duplicate\n   Address Detection\
    \ outweighs its benefits, the use of Duplicate\n   Address Detection can be disabled\
    \ through the administrative setting\n   of a per-interface configuration flag.\n\
    \   To speed the autoconfiguration process, a host may generate its\n   link-local\
    \ address (and verify its uniqueness) in parallel with\n   waiting for a Router\
    \ Advertisement. Because a router may delay\n   responding to a Router Solicitation\
    \ for a few seconds, the total time\n   needed to complete autoconfiguration can\
    \ be significantly longer if\n   the two steps are done serially.\n"
- title: 4.1.  Site Renumbering
  contents:
  - "4.1.  Site Renumbering\n   Address leasing facilitates site renumbering by providing\
    \ a mechanism\n   to time-out addresses assigned to interfaces in hosts.  At present,\n\
    \   upper layer protocols such as TCP provide no support for changing\n   end-point\
    \ addresses while a connection is open. If an end-point\n   address becomes invalid,\
    \ existing connections break and all\n   communication to the invalid address\
    \ fails.  Even when applications\n   use UDP as a transport protocol, addresses\
    \ must generally remain the\n   same during a packet exchange.\n   Dividing valid\
    \ addresses into preferred and deprecated categories\n   provides a way of indicating\
    \ to upper layers that a valid address may\n   become invalid shortly and that\
    \ future communication using the\n   address will fail, should the address's valid\
    \ lifetime expire before\n   communication ends.  To avoid this scenario, higher\
    \ layers should use\n   a preferred address (assuming one of sufficient scope\
    \ exists) to\n   increase the likelihood that an address will remain valid for\
    \ the\n   duration of the communication.  It is up to system administrators to\n\
    \   set appropriate prefix lifetimes in order to minimize the impact of\n   failed\
    \ communication when renumbering takes place.  The deprecation\n   period should\
    \ be long enough that most, if not all, communications\n   are using the new address\
    \ at the time an address becomes invalid.\n   The IP layer is expected to provide\
    \ a means for upper layers\n   (including applications) to select the most appropriate\
    \ source\n   address given a particular destination and possibly other\n   constraints.\
    \  An application may choose to select the source address\n   itself before starting\
    \ a new communication or may leave the address\n   unspecified, in which case\
    \ the upper networking layers will use the\n   mechanism provided by the IP layer\
    \ to choose a suitable address on\n   the application's behalf.\n   Detailed address\
    \ selection rules are beyond the scope of this\n   document.\n"
- title: 5.  PROTOCOL SPECIFICATION
  contents:
  - "5.  PROTOCOL SPECIFICATION\n   Autoconfiguration is performed on a per-interface\
    \ basis on\n   multicast-capable interfaces.  For multihomed hosts,\n   autoconfiguration\
    \ is performed independently on each interface.\n   Autoconfiguration applies\
    \ primarily to hosts, with two exceptions.\n   Routers are expected to generate\
    \ a link-local address using the\n   procedure outlined below. In addition, routers\
    \ perform Duplicate\n   Address Detection on all addresses prior to assigning\
    \ them to an\n   interface.\n"
- title: 5.1.  Node Configuration Variables
  contents:
  - "5.1.  Node Configuration Variables\n   A node MUST allow the following autoconfiguration-related\
    \ variable to\n   be configured by system management for each multicast interface:\n\
    \      DupAddrDetectTransmits\n                     The number of consecutive\
    \ Neighbor Solicitation\n                     messages sent while performing Duplicate\
    \ Address\n                     Detection on a tentative address. A value of zero\n\
    \                     indicates that Duplicate Address Detection is not\n    \
    \                 performed on tentative addresses. A value of one\n         \
    \            indicates a single transmission with no follow up\n             \
    \        retransmissions.\n                     Default: 1, but may be overridden\
    \ by a link-type\n                     specific value in the document that covers\
    \ issues\n                     related to the transmission of IP over a particular\n\
    \                     link type (e.g., [IPv6-ETHER]).\n                     Autoconfiguration\
    \ also assumes the presence of the\n                     variable RetransTimer\
    \ as defined in [DISCOVERY].\n                     For autoconfiguration purposes,\
    \ RetransTimer\n                     specifies the delay between consecutive Neighbor\n\
    \                     Solicitation transmissions performed during\n          \
    \           Duplicate Address Detection (if\n                     DupAddrDetectTransmits\
    \ is greater than 1), as well\n                     as the time a node waits after\
    \ sending the last\n                     Neighbor Solicitation before ending the\
    \ Duplicate\n                     Address Detection process.\n"
- title: 5.2.  Autoconfiguration-Related Variables
  contents:
  - "5.2.  Autoconfiguration-Related Variables\n   A host maintains a number of data\
    \ structures and flags related to\n   autoconfiguration. In the following, we\
    \ present conceptual variables\n   and show how they are used to perform autoconfiguration.\
    \ The specific\n   variables are used for demonstration purposes only, and an\n\
    \   implementation is not required to have them, so long as its external\n   behavior\
    \ is consistent with that described in this document.\n   Beyond the formation\
    \ of a link-local address and using Duplicate\n   Address Detection, how routers\
    \ (auto)configure their interfaces is\n   beyond the scope of this document.\n\
    \   Hosts maintain the following variables on a per-interface basis:\n      ManagedFlag\
    \      Copied from the M flag field (i.e., the\n                       \"managed\
    \ address configuration\" flag) of the most\n                       recently received\
    \ Router Advertisement message.\n                       The flag indicates whether\
    \ or not addresses are\n                       to be configured using the stateful\n\
    \                       autoconfiguration mechanism. It starts out in a\n    \
    \                   FALSE state.\n      OtherConfigFlag  Copied from the O flag\
    \ field (i.e., the \"other\n                       stateful configuration\" flag)\
    \ of the most\n                       recently received Router Advertisement message.\n\
    \                       The flag indicates whether or not information\n      \
    \                 other than addresses is to be obtained using the\n         \
    \              stateful autoconfiguration mechanism. It starts\n             \
    \          out in a FALSE state.\n                       In addition, when the\
    \ value of the ManagedFlag is\n                       TRUE, the value of OtherConfigFlag\
    \ is implicitely\n                       TRUE as well. It is not a valid configuration\
    \ for\n                       a host to use stateful address autoconfiguration\n\
    \                       to request addresses only, without also accepting\n  \
    \                     other configuration\n                       information.\n\
    \   A host also maintains a list of addresses together with their\n   corresponding\
    \ lifetimes. The address list contains both\n   autoconfigured addresses and those\
    \ configured manually.\n"
- title: 5.3.  Creation of Link-Local Addresses
  contents:
  - "5.3.  Creation of Link-Local Addresses\n   A node forms a link-local address\
    \ whenever an interface becomes\n   enabled.  An interface may become enabled\
    \ after any of the\n   following\n   events:\n      - The interface is initialized\
    \ at system startup time.\n      - The interface is reinitialized after a temporary\
    \ interface\n        failure or after being temporarily disabled by system\n \
    \       management.\n      - The interface attaches to a link for the first time.\n\
    \      - The interface becomes enabled by system management after\n        having\
    \ been administratively\n        disabled.\n   A link-local address is formed\
    \ by prepending the well-known link-\n   local prefix FE80::0 [ADDR-ARCH] (of\
    \ appropriate length) to the\n   interface identifier. If the interface identifier\
    \ has a length of N\n   bits, the interface identifier replaces the right-most\
    \ N zero bits of\n   the link-local prefix.  If the interface identifier is more\
    \ than 118\n   bits in length, autoconfiguration fails and manual configuration\
    \ is\n   required. Note that interface identifiers will typically be 64-bits\n\
    \   long and based on EUI-64 identifiers as described in [ADDR-ARCH].\n   A link-local\
    \ address has an infinite preferred and valid lifetime; it\n   is never timed\n\
    \   out.\n"
- title: 5.4.  Duplicate Address Detection
  contents:
  - "5.4.  Duplicate Address Detection\n   Duplicate Address Detection is performed\
    \ on unicast addresses prior\n   to assigning them to an interface whose DupAddrDetectTransmits\n\
    \   variable is greater than zero. Duplicate Address Detection MUST take\n   place\
    \ on all unicast addresses, regardless of whether they are\n   obtained through\
    \ stateful, stateless or manual configuration, with\n   the exception of the following\
    \ cases:\n      - Duplicate Address Detection MUST NOT be performed on anycast\n\
    \        addresses.\n      - Each individual unicast address SHOULD be tested\
    \ for uniqueness.\n        However, when stateless address autoconfiguration is\
    \ used,\n        address uniqueness is determined solely by the interface\n  \
    \      identifier, assuming that subnet prefixes are assigned correctly\n    \
    \    (i.e., if all of an interface's addresses are generated from the\n      \
    \  same identifier, either all addresses or none of them will be\n        duplicates).\
    \ Thus, for a set of addresses formed from the same\n        interface identifier,\
    \ it is sufficient to check that the link-\n        local address generated from\
    \ the identifier is unique on the\n        link. In such cases, the link-local\
    \ address MUST be tested for\n        uniqueness, and if no duplicate address\
    \ is detected, an\n        implementation MAY choose to skip Duplicate Address\
    \ Detection\n        for additional addresses derived from the same interface\n\
    \        identifier.\n   The procedure for detecting duplicate addresses uses\
    \ Neighbor\n   Solicitation and Advertisement messages as described below. If\
    \ a\n   duplicate address is discovered during the procedure, the address\n  \
    \ cannot be assigned to the interface. If the address is derived from\n   an interface\
    \ identifier, a new identifier will need to be assigned to\n   the interface,\
    \ or all IP addresses for the interface will need to be\n   manually configured.\
    \  Note that the method for detecting duplicates\n   is not completely reliable,\
    \ and it is possible that duplicate\n   addresses will still exist (e.g., if the\
    \ link was partitioned while\n   Duplicate Address Detection was performed).\n\
    \   An address on which the duplicate Address Detection Procedure is\n   applied\
    \ is said to be tentative until the procedure has completed\n   successfully.\
    \  A tentative address is not considered \"assigned to an\n   interface\" in the\
    \ traditional sense. That is, the interface must\n   accept Neighbor Solicitation\
    \ and Advertisement messages containing\n   the tentative address in the Target\
    \ Address field, but processes such\n   packets differently from those whose Target\
    \ Address matches an\n   address assigned to the interface. Other packets addressed\
    \ to the\n   tentative address should be silently discarded.\n   It should also\
    \ be noted that Duplicate Address Detection must be\n   performed prior to assigning\
    \ an address to an interface in order to\n   prevent multiple nodes from using\
    \ the same address simultaneously.\n   If a node begins using an address in parallel\
    \ with Duplicate Address\n   Detection, and another node is already using the\
    \ address, the node\n   performing Duplicate Address Detection will erroneously\
    \ process\n   traffic intended for the other node, resulting in such possible\n\
    \   negative consequences as the resetting of open TCP connections.\n   The following\
    \ subsections describe specific tests a node performs to\n   verify an address's\
    \ uniqueness.  An address is considered unique if\n   none of the tests indicate\
    \ the presence of a duplicate address within\n   RetransTimer milliseconds after\
    \ having sent DupAddrDetectTransmits\n   Neighbor Solicitations. Once an address\
    \ is determined to be unique,\n   it may be assigned to an interface.\n"
- title: 5.4.1.  Message Validation
  contents:
  - "5.4.1.  Message Validation\n   A node MUST silently discard any Neighbor Solicitation\
    \ or\n   Advertisement message that does not pass the validity checks\n   specified\
    \ in [DISCOVERY]. A solicitation that passes these validity\n   checks is called\
    \ a valid solicitation or valid advertisement.\n"
- title: 5.4.2.  Sending Neighbor Solicitation Messages
  contents:
  - "5.4.2.  Sending Neighbor Solicitation Messages\n   Before sending a Neighbor\
    \ Solicitation, an interface MUST join the\n   all-nodes multicast address and\
    \ the solicited-node multicast address\n   of the tentative address.  The former\
    \ insures that the node receives\n   Neighbor Advertisements from other nodes\
    \ already using the address;\n   the latter insures that two nodes attempting\
    \ to use the same address\n   simultaneously detect each other's presence.\n \
    \  To check an address, a node sends DupAddrDetectTransmits Neighbor\n   Solicitations,\
    \ each separated by RetransTimer milliseconds. The\n   solicitation's Target Address\
    \ is set to the address being checked,\n   the IP source is set to the unspecified\
    \ address and the IP\n   destination is set to the solicited-node multicast address\
    \ of the\n   target address.\n   If the Neighbor Solicitation is the first message\
    \ to be sent from an\n   interface after interface (re)initialization, the node\
    \ should delay\n   sending the message by a random delay between 0 and\n   MAX_RTR_SOLICITATION_DELAY\
    \ as specified in [DISCOVERY].  This serves\n   to alleviate congestion when many\
    \ nodes start up on the link at the\n   same time, such as after a power failure,\
    \ and may help to avoid race\n   conditions when more than one node is trying\
    \ to solicit for the same\n   address at the same time. In order to improve the\
    \ robustness of the\n   Duplicate Address Detection algorithm, an interface MUST\
    \ receive and\n   process datagrams sent to the all-nodes multicast address or\n\
    \   solicited-node multicast address of the tentative address while\n   delaying\
    \ transmission of the initial Neighbor Solicitation.\n"
- title: 5.4.3.  Receiving Neighbor Solicitation Messages
  contents:
  - "5.4.3.  Receiving Neighbor Solicitation Messages\n   On receipt of a valid Neighbor\
    \ Solicitation message on an interface,\n   node behavior depends on whether the\
    \ target address is tentative or\n   not.  If the target address is not tentative\
    \ (i.e., it is assigned to\n   the receiving interface), the solicitation is processed\
    \ as described\n   in [DISCOVERY].  If the target address is tentative, and the\
    \ source\n   address is a unicast address, the solicitation's sender is performing\n\
    \   address resolution on the target; the solicitation should be silently\n  \
    \ ignored.  Otherwise, processing takes place as described below. In\n   all cases,\
    \ a node MUST NOT respond to a Neighbor Solicitation for a\n   tentative address.\n\
    \   If the source address of the Neighbor Solicitation is the unspecified\n  \
    \ address, the solicitation is from a node performing Duplicate Address\n   Detection.\
    \ If the solicitation is from another node, the tentative\n   address is a duplicate\
    \ and should not be used (by either node). If\n   the solicitation is from the\
    \ node itself (because the node loops back\n   multicast packets), the solicitation\
    \ does not indicate the presence\n   of a duplicate address.\n   Implementor's\
    \ Note: many interfaces provide a way for upper layers to\n   selectively enable\
    \ and disable the looping back of multicast packets.\n   The details of how such\
    \ a facility is implemented may prevent\n   Duplicate Address Detection from working\
    \ correctly.  See the Appendix\n   for further discussion.\n   The following tests\
    \ identify conditions under which a tentative\n   address is not unique:\n   \
    \   - If a Neighbor Solicitation for a tentative address is\n        received\
    \ prior to having sent one, the tentative address is a\n        duplicate.  This\
    \ condition occurs when two nodes run Duplicate\n        Address Detection simultaneously,\
    \ but transmit initial\n        solicitations at different times (e.g., by selecting\
    \ different\n        random delay values before transmitting an initial\n    \
    \    solicitation).\n      - If the actual number of Neighbor Solicitations received\
    \ exceeds\n        the number expected based on the loopback semantics (e.g.,\
    \ the\n        interface does not loopback packet, yet one or more\n        solicitations\
    \ was received), the tentative address is a\n        duplicate. This condition\
    \ occurs when two nodes run Duplicate\n        Address Detection simultaneously\
    \ and transmit solicitations at\n        roughly the same time.\n"
- title: 5.4.4.  Receiving Neighbor Advertisement Messages
  contents:
  - "5.4.4.  Receiving Neighbor Advertisement Messages\n   On receipt of a valid Neighbor\
    \ Advertisement message on an interface,\n   node behavior depends on whether\
    \ the target address is tentative or\n   matches a unicast or anycast address\
    \ assigned to the interface.  If\n   the target address is assigned to the receiving\
    \ interface, the\n   solicitation is processed as described in [DISCOVERY]. If\
    \ the target\n   address is tentative, the tentative address is not unique.\n"
- title: 5.4.5.  When Duplicate Address Detection Fails
  contents:
  - "5.4.5.  When Duplicate Address Detection Fails\n   A tentative address that is\
    \ determined to be a duplicate as described\n   above, MUST NOT be assigned to\
    \ an interface and the node SHOULD log a\n   system management error.  If the\
    \ address is a link-local address\n   formed from an interface identifier, the\
    \ interface SHOULD be\n   disabled.\n"
- title: 5.5.  Creation of Global and Site-Local Addresses
  contents:
  - "5.5.  Creation of Global and Site-Local Addresses\n   Global and site-local addresses\
    \ are formed by appending an interface\n   identifier to a prefix of appropriate\
    \ length. Prefixes are obtained\n   from Prefix Information options contained\
    \ in Router Advertisements.\n   Creation of global and site-local addresses and\
    \ configuration of\n   other parameters as described in this section SHOULD be\
    \ locally\n   configurable. However, the processing described below MUST be enabled\n\
    \   by default.\n"
- title: 5.5.1.  Soliciting Router Advertisements
  contents:
  - "5.5.1.  Soliciting Router Advertisements\n   Router Advertisements are sent periodically\
    \ to the all-nodes\n   multicast address. To obtain an advertisement quickly,\
    \ a host sends\n   out Router Solicitations as described in [DISCOVERY].\n"
- title: 5.5.2.  Absence of Router Advertisements
  contents:
  - "5.5.2.  Absence of Router Advertisements\n   If a link has no routers, a host\
    \ MUST attempt to use stateful\n   autoconfiguration to obtain addresses and other\
    \ configuration\n   information. An implementation MAY provide a way to disable\
    \ the\n   invocation of stateful autoconfiguration in this case, but the\n   default\
    \ SHOULD be enabled.  From the perspective of\n   autoconfiguration, a link has\
    \ no routers if no Router Advertisements\n   are received after having sent a\
    \ small number of Router Solicitations\n   as described in [DISCOVERY].\n"
- title: 5.5.3.  Router Advertisement Processing
  contents:
  - "5.5.3.  Router Advertisement Processing\n   On receipt of a valid Router Advertisement\
    \ (as defined in\n   [DISCOVERY]), a host copies the value of the advertisement's\
    \ M bit\n   into ManagedFlag. If the value of ManagedFlag changes from FALSE to\n\
    \   TRUE, and the host is not already running the stateful address\n   autoconfiguration\
    \ protocol, the host should invoke the stateful\n   address autoconfiguration\
    \ protocol, requesting both address\n   information and other information.  If\
    \ the value of the ManagedFlag\n   changes from TRUE to FALSE, the host should\
    \ continue running the\n   stateful address autoconfiguration, i.e., the change\
    \ in the value of\n   the ManagedFlag has no effect.  If the value of the flag\
    \ stays\n   unchanged, no special action takes place. In particular, a host MUST\n\
    \   NOT reinvoke stateful address configuration if it is already\n   participating\
    \ in the stateful protocol as a result of an earlier\n   advertisement.\n   An\
    \ advertisement's O flag field is processed in an analogous manner.\n   A host\
    \ copies the value of the O flag into OtherConfigFlag. If the\n   value of OtherConfigFlag\
    \ changes from FALSE to TRUE, the host should\n   invoke the stateful autoconfiguration\
    \ protocol, requesting\n   information (excluding addresses if ManagedFlag is\
    \ set to FALSE).  If\n   the value of the OtherConfigFlag changes from TRUE to\
    \ FALSE, the host\n   should continue running the stateful address autoconfiguration\n\
    \   protocol, i.e., the change in the value of OtherConfigFlag has no\n   effect.\
    \ If the value of the flag stays unchanged, no special action\n   takes place.\
    \ In particular, a host MUST NOT reinvoke stateful\n   configuration if it is\
    \ already participating in the stateful protocol\n   as a result of an earlier\
    \ advertisement.\n   For each Prefix-Information option in the Router Advertisement:\n\
    \    a) If the Autonomous flag is not set, silently ignore the\n       Prefix\
    \ Information\n       option.\n    b) If the prefix is the link-local prefix,\
    \ silently ignore the\n       Prefix Information option.\n    c) If the preferred\
    \ lifetime is greater than the valid lifetime,\n       silently ignore the Prefix\
    \ Information option. A node MAY wish to\n       log a system management error\
    \ in this case.\n    d) If the prefix advertised does not match the prefix of\
    \ an address\n       already in the list, and the Valid Lifetime is not 0, form\
    \ an\n       address (and add it to the list) by combining the advertised\n  \
    \     prefix with the link's interface identifier as follows:\n   |          \
    \  128 - N bits               |       N bits           |\n   +---------------------------------------+------------------------+\n\
    \   |            link prefix                |  interface identifier  |\n   +----------------------------------------------------------------+\n\
    \       If the sum of the prefix length and interface identifier length\n    \
    \   does not equal 128 bits, the Prefix Information option MUST be\n       ignored.\
    \  An implementation MAY wish to log a system management\n       error in this\
    \ case. It is the responsibility of the system\n       administrator to insure\
    \ that the lengths of prefixes contained in\n       Router Advertisements are\
    \ consistent with the length of interface\n       identifiers for that link type.\
    \ Note that interface identifiers\n       will typically be 64-bits long and based\
    \ on EUI-64 identifiers as\n       described in [ADDR-ARCH].\n       If an address\
    \ is formed successfully, the host adds it to the\n       list of addresses assigned\
    \ to the interface, initializing its\n       preferred and valid lifetime values\
    \ from the Prefix Information\n       option.\n    e) If the advertised prefix\
    \ matches the prefix of an autoconfigured\n       address (i.e., one obtained\
    \ via stateless or stateful address\n       autoconfiguration) in the list of\
    \ addresses associated with the\n       interface, the specific action to perform\
    \ depends on the Valid\n       Lifetime in the received advertisement and the\
    \ Lifetime\n       associated with the previously autoconfigured address (which\
    \ we\n       call StoredLifetime in the discussion that follows):\n       1) If\
    \ the received Lifetime is greater than 2 hours or greater\n          than StoredLifetime,\
    \ update the stored Lifetime of the\n          corresponding address.\n      \
    \ 2) If the StoredLifetime is less than or equal to 2 hours and the\n        \
    \  received Lifetime is less than or equal to StoredLifetime,\n          ignore\
    \ the prefix, unless the Router Advertisement from which\n          this Prefix\
    \ Information option was obtained has been\n          authenticated (e.g., via\
    \ IPSec [RFC2402]). If the Router\n          Advertisment was authenticated, the\
    \ StoredLifetime should be\n          set to the Lifetime in the received option.\n\
    \       3) Otherwise, reset the stored Lifetime in the corresponding\n       \
    \   address to two hours.\n       The above rules address a specific denial of\
    \ service attack in\n       which a bogus advertisement could contain prefixes\
    \ with very\n       small Valid Lifetimes. Without the above rules, a single\n\
    \       unauthenticated advertisement containing bogus Prefix Information\n  \
    \     options with short Lifetimes could cause all of a node's\n       addresses\
    \ to expire prematurely. The above rules insure that\n       legitimate advertisements\
    \ (which are sent periodically) will\n       \"cancel\" the short lifetimes before\
    \ they actually take effect.\n"
- title: 5.5.4.  Address Lifetime Expiry
  contents:
  - "5.5.4.  Address Lifetime Expiry\n   A preferred address becomes deprecated when\
    \ its preferred lifetime\n   expires.  A deprecated address SHOULD continue to\
    \ be used as a source\n   address in existing communications, but SHOULD NOT be\
    \ used in new\n   communications if an alternate (non-deprecated) address is available\n\
    \   and has sufficient scope.  IP and higher layers (e.g., TCP, UDP) MUST\n  \
    \ continue to accept datagrams destined to a deprecated address since a\n   deprecated\
    \ address is still a valid address for the interface. An\n   implementation MAY\
    \ prevent any new communication from using a\n   deprecated address, but system\
    \ management MUST have the ability to\n   disable such a facility, and the facility\
    \ MUST be disabled by\n   default.\n   An address (and its association with an\
    \ interface) becomes invalid\n   when its valid lifetime expires.  An invalid\
    \ address MUST NOT be used\n   as a source address in outgoing communications\
    \ and MUST NOT be\n   recognized as a destination on a receiving interface.\n"
- title: 5.6.  Configuration Consistency
  contents:
  - "5.6.  Configuration Consistency\n   It is possible for hosts to obtain address\
    \ information using both\n   stateless and stateful protocols since both may be\
    \ enabled at the\n   same time.  It is also possible that the values of other\n\
    \   configuration parameters such as MTU size and hop limit will be\n   learned\
    \ from both Router Advertisements and the stateful\n   autoconfiguration protocol.\
    \  If the same configuration information is\n   provided by multiple sources,\
    \ the value of this information should be\n   consistent. However, it is not considered\
    \ a fatal error if\n   information received from multiple sources is inconsistent.\
    \ Hosts\n   accept the union of all information received via the stateless and\n\
    \   stateful protocols. If inconsistent information is learned different\n   sources,\
    \ the most recently obtained values always have precedence\n   over information\
    \ learned earlier.\n"
- title: 6.  SECURITY CONSIDERATIONS
  contents:
  - "6.  SECURITY CONSIDERATIONS\n   Stateless address autoconfiguration allows a\
    \ host to connect to a\n   network, configure an address and start communicating\
    \ with other\n   nodes without ever registering or authenticating itself with\
    \ the\n   local site.  Although this allows unauthorized users to connect to\n\
    \   and use a network, the threat is inherently present in the\n   Internet  \
    \      architecture. Any node with a physical attachment to\n   a network can\
    \ generate an address (using a variety of ad hoc\n   techniques) that provides\
    \ connectivity.\n   The use of Duplicate Address Detection opens up the possibility\
    \ of\n   denial of service attacks. Any node can respond to Neighbor\n   Solicitations\
    \ for a tentative address, causing the other node to\n   reject the address as\
    \ a duplicate.  This attack is similar to other\n   attacks involving the spoofing\
    \ of Neighbor Discovery messages and can\n   be addressed by requiring that Neighbor\
    \ Discovery packets be\n   authenticated [RFC2402].\n"
- title: 7.  References
  contents:
  - "7.  References\n   [RFC2402]    Kent, S. and R. Atkinson, \"IP Authentication\
    \ Header\",\n                RFC 2402, November 1998.\n   [IPv6-ETHER] Crawford,\
    \ M., \"A Method for the Transmission of\n                IPv6        Packets\
    \ over Ethernet Networks\", RFC 2464,\n                December 1998.\n   [KEYWORDS]\
    \   Bradner, S., \"Key words for use in RFCs to Indicate\n                Requirement\
    \ Levels\", BCP 14, RFC 2119, March\n                1997.\n   [RFC1112]    Deering,\
    \ S., \"Host Extensions for IP Multicasting\", STD\n                5, RFC 1112,\
    \ August\n                1989.\n   [ADDR-ARCH]  Hinden, R. and S. Deering, \"\
    Internet Protocol Version\n                (IPv6) Addressing Architecture\", RFC\
    \ 2373, July 1998\n   [DHCPv6]     Bound, J. and C. Perkins, \"Dynamic Host Configuration\n\
    \                Protocol for IPv6 (DHCPv6)\", Work in Progress.\n   [DISCOVERY]\
    \  Narten, T., Nordmark, E. and W. Simpson, \"Neighbor\n                Discovery\
    \ for IP Version 6 (IPv6)\", RFC 2461, December\n                1998.\n"
- title: 8.  Acknowledgements
  contents:
  - "8.  Acknowledgements\n   The authors would like to thank the members of both\
    \ the IPNG and\n   ADDRCONF working groups for their input. In particular, thanks\
    \ to Jim\n   Bound, Steve Deering, Richard Draves, and Erik Nordmark.  Thanks\
    \ also\n   goes to John Gilmore for alerting the WG of the \"0 Lifetime Prefix\n\
    \   Advertisement\" denial of service attack vulnerability; this document\n  \
    \ incorporates changes that address this vulnerability.\n"
- title: AUTHORS' ADDRESSES
  contents:
  - "AUTHORS' ADDRESSES\n   Susan Thomson\n   Bellcore\n   445 South Street\n   Morristown,\
    \ NJ 07960\n   USA\n   Phone: +1 201-829-4514\n   EMail: set@thumper.bellcore.com\n\
    \   Thomas Narten\n   IBM Corporation\n   P.O. Box 12195\n   Research Triangle\
    \ Park, NC 27709-2195\n   USA\n   Phone: +1 919 254 7798\n   EMail: narten@raleigh.ibm.com\n"
- title: '9.  APPENDIX A: LOOPBACK SUPPRESSION & DUPLICATE ADDRESS DETECTION'
  contents:
  - "9.  APPENDIX A: LOOPBACK SUPPRESSION & DUPLICATE ADDRESS DETECTION\n   Determining\
    \ whether a received multicast solicitation was looped back\n   to the sender\
    \ or actually came from another node is implementation-\n   dependent.  A problematic\
    \ case occurs when two interfaces attached to\n   the same link happen to have\
    \ the same identifier and link-layer\n   address, and they both send out packets\
    \ with identical contents at\n   roughly the same time (e.g., Neighbor Solicitations\
    \ for a tentative\n   address as part of Duplicate Address Detection messages).\
    \ Although a\n   receiver will receive both packets, it cannot determine which\
    \ packet\n   was looped back and which packet came from the other node by simply\n\
    \   comparing packet contents (i.e., the contents are identical). In this\n  \
    \ particular case, it is not necessary to know precisely which packet\n   was\
    \ looped back and which was sent by another node; if one receives\n   more solicitations\
    \ than were sent, the tentative address is a\n   duplicate. However, the situation\
    \ may not always be this\n   straightforward.\n   The IPv4 multicast specification\
    \ [RFC1112] recommends that the\n   service interface provide a way for an upper-layer\
    \ protocol to\n   inhibit local delivery of packets sent to a multicast group\
    \ that the\n   sending host is a member of. Some applications know that there\
    \ will\n   be no other group members on the same host, and suppressing loopback\n\
    \   prevents them from having to receive (and discard) the packets they\n   themselves\
    \ send out.  A straightforward way to implement this\n   facility is to disable\
    \ loopback at the hardware level (if supported\n   by the hardware), with packets\
    \ looped back (if requested) by\n   software.  On interfaces in which the hardware\
    \ itself suppresses\n   loopbacks, a node running Duplicate Address Detection\
    \ simply counts\n   the number of Neighbor Solicitations received for a tentative\
    \ address\n   and compares them with the number expected. If there is a mismatch,\n\
    \   the tentative address is a duplicate.\n   In those cases where the hardware\
    \ cannot suppress loopbacks, however,\n   one possible software heuristic to filter\
    \ out unwanted loopbacks is\n   to discard any received packet whose link-layer\
    \ source address is the\n   same as the receiving interface's.  Unfortunately,\
    \ use of that\n   criteria also results in the discarding of all packets sent\
    \ by\n   another node using the same link-layer address. Duplicate Address\n \
    \  Detection will fail on interfaces that filter received packets in\n   this\
    \ manner:\n      o If a node performing Duplicate Address Detection discards\n\
    \        received packets having the same source link-layer address as\n     \
    \   the receiving interface, it will also discard packets from other\n       \
    \ nodes also using the same link-layer address, including Neighbor\n        Advertisement\
    \ and Neighbor Solicitation messages required to\n        make Duplicate Address\
    \ Detection work correctly.  This\n        particular problem can be avoided by\
    \ temporarily disabling the\n        software suppression of loopbacks while a\
    \ node performs\n        Duplicate Address Detection.\n      o If a node that\
    \ is already using a particular IP address discards\n        received packets\
    \ having the same link-layer source address as\n        the interface, it will\
    \ also discard Duplicate Address\n        Detection-related Neighbor Solicitation\
    \ messages sent by another\n        node also using the same link-layer address.\
    \  Consequently,\n        Duplicate Address Detection will fail, and the other\
    \ node will\n        configure a non-unique address. Since it is generally impossible\n\
    \        to know when another node is performing Duplicate Address\n        Detection,\
    \ this scenario can be avoided only if software\n        suppression of loopback\
    \ is permanently disabled.\n   Thus, to perform Duplicate Address Detection correctly\
    \ in the case\n   where two interfaces are using the same link-layer address,\
    \ an\n   implementation must have a good understanding of the interface's\n  \
    \ multicast loopback semantics, and the interface cannot discard\n   received\
    \ packets simply because the source link-layer address is the\n   same as the\
    \ interfaces.\n"
- title: '10.  APPENDIX B: CHANGES SINCE RFC 1971'
  contents:
  - "10.  APPENDIX B: CHANGES SINCE RFC 1971\n   o Changed document to use term \"\
    interface identifier\" rather than\n     \"interface token\" for consistency with\
    \ other IPv6 documents.\n   o Clarified definition of deprecated address to make\
    \ clear it is OK\n     to continue sending to or from deprecated addresses.\n\
    \   o Reworded section 5.4 for clarity (no substantive change).\n   o Added rules\
    \ to Section 5.5.3 Router Advertisement processing to\n     address potential\
    \ denial-of-service attack when prefixes are\n     advertised with very short\
    \ Lifetimes.\n   o Clarified wording in Section 5.5.4 to make clear that all upper\n\
    \     layer protocols must process (i.e., send and receive) packets sent\n   \
    \  to deprecated addresses.\n"
- title: 11.  Full Copyright Statement
  contents:
  - "11.  Full Copyright Statement\n   Copyright (C) The Internet Society (1998).\
    \  All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
