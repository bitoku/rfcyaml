- title: __initial_text__
  contents:
  - '   NEC''s Simple Middlebox Configuration (SIMCO) Protocol Version 3.0

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo defines an Experimental Protocol for the Internet\n\
    \   community.  It does not specify an Internet standard of any kind.\n   Discussion\
    \ and suggestions for improvement are requested.\n   Distribution of this memo\
    \ is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2006).\n"
- title: IESG Note
  contents:
  - "IESG Note\n   The content of this RFC was at one time considered by the IETF,\
    \ and\n   therefore it may resemble a current IETF work in progress or a\n   published\
    \ IETF work.  This RFC is not a candidate for any level of\n   Internet Standard.\
    \  The IETF disclaims any knowledge of the fitness\n   of this RFC for any purpose\
    \ and in particular notes that the decision\n   to publish is not based on IETF\
    \ review for such things as security,\n   congestion control, or inappropriate\
    \ interaction with deployed\n   protocols.  The RFC Editor has chosen to publish\
    \ this document at its\n   discretion.  Readers of this RFC should exercise caution\
    \ in\n   evaluating its value for implementation and deployment.  See RFC 3932\n\
    \   [RFC3932] for more information.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes a protocol for controlling middleboxes such\n\
    \   as firewalls and network address translators.  It is a fully\n   compliant\
    \ implementation of the Middlebox Communications (MIDCOM)\n   semantics described\
    \ in RFC 3989.  Compared to earlier experimental\n   versions of the SIMCO protocol,\
    \ this version (3.0) uses binary\n   message encodings in order to reduce resource\
    \ requirements.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................4\n\
    \      1.1. Terminology ................................................4\n  \
    \    1.2. Binary Encodings ...........................................4\n   2.\
    \ Compliance with MIDCOM Protocol Semantics .......................5\n   3. SIMCO\
    \ Sessions ..................................................6\n   4. SIMCO Message\
    \ Components ........................................6\n      4.1. Message Types\
    \ ..............................................7\n      4.2. The SIMCO Header\
    \ ...........................................7\n           4.2.1. Basic Message\
    \ Types .................................8\n           4.2.2. Message Sub-types\
    \ for Requests and Positive\n                  Replies .............................................8\n\
    \           4.2.3. Message Sub-types for Negative Replies ..............8\n  \
    \         4.2.4. Message Sub-types for Notifications .................9\n    \
    \       4.2.5. Transaction Identifier ..............................9\n      4.3.\
    \ The SIMCO Payload .........................................10\n           4.3.1.\
    \ SIMCO Protocol Version Attribute ...................11\n           4.3.2. Authentication\
    \ Attributes ..........................11\n           4.3.3. Middlebox Capabilities\
    \ Attribute ...................12\n           4.3.4. Policy Rule Identifier Attribute\
    \ ...................13\n           4.3.5. Group Identifier Attribute .........................13\n\
    \           4.3.6. Policy Rule Lifetime Attribute .....................13\n  \
    \         4.3.7. Policy Rule Owner Attribute ........................14\n    \
    \       4.3.8. Address Tuple Attribute ............................14\n      \
    \     4.3.9. PRR Parameter Set Attribute ........................16\n        \
    \   4.3.10. PER Parameter Set Attribute .......................18\n   5. SIMCO\
    \ Message Formats ..........................................19\n      5.1. Protocol\
    \ Error Replies and Notifications ..................19\n           5.1.1. BFM\
    \ Notification ...................................19\n           5.1.2. Protocol\
    \ Error Negative Replies ....................19\n      5.2. Session Control Messages\
    \ ..................................20\n           5.2.1. SE Request .........................................20\n\
    \           5.2.2. SE Positive Reply ..................................21\n  \
    \         5.2.3. SA Positive Reply ..................................21\n    \
    \       5.2.4. SA Request .........................................21\n      \
    \     5.2.5. ST Request and ST Positive Reply ...................22\n        \
    \   5.2.6. SE Negative Replies ................................22\n          \
    \ 5.2.7. AST Notification ...................................23\n      5.3. Policy\
    \ Rule Control Messages ..............................23\n           5.3.1. Policy\
    \ Events and Asynchronous Notifications .......24\n           5.3.2. PRR Request\
    \ ........................................24\n           5.3.3. PER Request ........................................25\n\
    \           5.3.4. PEA Request ........................................26\n  \
    \         5.3.5. PLC Request ........................................26\n    \
    \       5.3.6. PRS Request ........................................27\n      \
    \     5.3.7. PRL Request ........................................27\n        \
    \   5.3.8. PDR Request ........................................27\n          \
    \ 5.3.9. PRR Positive Reply .................................28\n           5.3.10.\
    \ PER Positive Reply ................................28\n           5.3.11. PLC\
    \ Positive Reply ................................29\n           5.3.12. PRD Positive\
    \ Reply ................................29\n           5.3.13. PRS Positive Reply\
    \ ................................30\n           5.3.14. PES Positive Reply ................................31\n\
    \           5.3.15. PDS Positive Reply ................................32\n  \
    \         3.5.16. PRL Positive Reply ................................32\n    \
    \       5.3.17. PDR Positive Replies ..............................33\n      \
    \     5.3.18. Policy Rule Control Negative Replies ..............33\n        \
    \   5.3.19. ARE Notification ..................................33\n   6. Message\
    \ Format Checking ........................................34\n   7. Session Control\
    \ Message Processing .............................36\n      7.1. Session State\
    \ Machine .....................................36\n      7.2. Processing SE Requests\
    \ ....................................37\n      7.3. Processing SA Requests ....................................38\n\
    \      7.4. Processing ST Requests ....................................39\n  \
    \    7.5. Generating AST Notifications ..............................39\n    \
    \  7.6. Session Termination by Interruption of Connection .........39\n   8. Policy\
    \ Rule Control Message Processing .........................40\n      8.1. Policy\
    \ Rule State Machine .................................40\n      8.2. Processing\
    \ PRR Requests ...................................41\n           8.2.1. Initial\
    \ Checks .....................................41\n           8.2.2. Processing\
    \ on Pure Firewalls .......................43\n           8.2.3. Processing on\
    \ Network Address Translators ..........44\n      8.3. Processing PER Requests\
    \ ...................................45\n           8.3.1. Initial Checks .....................................46\n\
    \           8.3.2. Processing on Pure Firewalls .......................48\n  \
    \         8.3.3. Processing on Network Address Translators ..........49\n    \
    \       8.3.4. Processing on Combined Firewalls and NATs ..........51\n      8.4.\
    \ Processing PEA Requests ...................................51\n           8.4.1.\
    \ Initial Checks .....................................51\n           8.4.2. Processing\
    \ on Pure Firewalls .......................53\n           8.4.3. Processing on\
    \ Network Address Translators ..........54\n      8.5. Processing PLC Requests\
    \ ...................................55\n      8.6. Processing PRS Requests ...................................56\n\
    \      8.7. Processing PRL Requests ...................................57\n  \
    \    8.8. Processing PDR requests ...................................57\n    \
    \       8.8.1. Extending the MIDCOM semantics .....................58\n      \
    \     8.8.2. Initial Checks .....................................58\n        \
    \   8.8.3. Processing on Pure Firewalls .......................61\n          \
    \ 8.8.4. Processing on Network Address Translators ..........61\n           8.8.5.\
    \ Processing on Combined Firewalls and NATs ..........62\n      8.9. Generating\
    \ ARE Notifications ..............................62\n   9. Security Considerations\
    \ ........................................63\n      9.1. Possible Threats to SIMCO\
    \ .................................63\n      9.2. Securing SIMCO with IPsec .................................63\n\
    \   10. IAB Considerations on UNSAF ...................................64\n  \
    \ 11. Acknowledgements ..............................................64\n   12.\
    \ Normative References ..........................................65\n   13. Informative\
    \ References ........................................65\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The Simple Middlebox Configuration (SIMCO) protocol is used\
    \ to\n   control firewalls and Network Address Translators (NATs).  As defined\n\
    \   in [RFC3234], firewalls and NATs are classified as middleboxes.  A\n   middlebox\
    \ is a device on the datagram path between the source and\n   destination that\
    \ performs other functions than just IP routing.  As\n   outlined in [RFC3303],\
    \ firewalls and NATs are potential obstacles to\n   packet streams, for example,\
    \ if dynamically negotiated UDP or TCP\n   port numbers are used, as in many peer-to-peer\
    \ communication\n   applications.\n   SIMCO allows applications to communicate\
    \ with middleboxes on the\n   datagram path in order to request a dynamic configuration\
    \ at the\n   middlebox that enables datagram streams to pass the middlebox.\n\
    \   Applications can request pinholes at firewalls and address bindings\n   at\
    \ NATs.\n   The semantics for the SIMCO protocol are described in [RFC3989].\n"
- title: 1.1.  Terminology
  contents:
  - "1.1.  Terminology\n   The terminology used in this document is fully aligned\
    \ with the\n   terminology defined in [RFC3989].  In the remainder of the text,\
    \ the\n   term SIMCO refers to SIMCO version 3.0.  The term \"prefix-length\"\
    \ is\n   used as described in [RFC4291] and [RFC1519].  With respect to\n   wildcarding,\
    \ the prefix length determines the part of an IP address\n   that will be used\
    \ in address match operations.\n"
- title: 1.2.  Binary Encodings
  contents:
  - "1.2.  Binary Encodings\n   Previous experimental versions of SIMCO used simple\
    \ ASCII encodings\n   with augmented BNF for syntax specification.  This encoding\
    \ requires\n   more resources than binary encodings do for generation and parsing\
    \ of\n   messages.  This applies to resources for coding agents and\n   middleboxes\
    \ as well as to resources for executing a SIMCO stack.\n   Low resource requirements\
    \ are important properties for two main\n   reasons:\n      - For many applications\
    \ (for example, IP telephony), session setup\n        times are critical.  Users\
    \ do accept setup times only up to some\n        limit, and some signaling protocols\
    \ start retransmitting\n        messages if setup is not completed within a certain\
    \ time.\n      - Many middleboxes are rather small and relatively low-cost\n \
    \       devices.  For these, support of resource-intensive protocols\n       \
    \ might be a problem.  The acceptance of a protocol on these\n        devices\
    \ depends, among other things, on the cost of implementing\n        the protocol\
    \ and of its hardware requirements.\n   Therefore, we decided to use a simple\
    \ and efficient binary encoding\n   for SIMCO version 3.0, which is described\
    \ in this document.\n"
- title: 2.  Compliance with MIDCOM Protocol Semantics
  contents:
  - "2.  Compliance with MIDCOM Protocol Semantics\n   SIMCO version 3 is fully compliant\
    \ with the MIDCOM protocol semantics\n   defined by [RFC3989].  SIMCO implements\
    \ protocol transactions as\n   defined in Section 2.1.1 of [RFC3989].  All message\
    \ types defined in\n   Section 2.1.2 of [RFC3989] are supported by SIMCO, and\
    \ all mandatory\n   transactions are implemented.  SIMCO does not implement the\
    \ optional\n   group transactions.  For all implemented transactions, SIMCO\n\
    \   implements all parameters concerning the information contained.\n   SIMCO\
    \ defines a few new terms to reference functionality in the\n   semantics.  Among\
    \ these terms are Session Authentication (SA) and\n   Policy Enable Rule After\
    \ reservation (PEA) messages.  SA is used to\n   model the state transition given\
    \ in Figure 2 of [RFC3989] from NOAUTH\n   to OPEN.  PEA is used to model the\
    \ state transition given in Figure 4\n   of [RFC3989] from RESERVED to ENABLED.\n\
    \   SIMCO implements one additional transaction, the Policy Disable Rule\n   (PDR)\
    \ transaction, to those defined in [RFC3989].  PDR transactions\n   are used by\
    \ security functions such as intrusion detection and attack\n   detection.  They\
    \ allow the agent to block a specified kind of\n   traffic.  PDRs have priority\
    \ above Policy Enable Rules (PERs).  When\n   a PDR is established, all conflicting\
    \ PERs (including PERs with just\n   a partial overlap) are terminated, and no\
    \ new conflicting PER can be\n   established before the PDR is terminated.  Support\
    \ of the PDR\n   transaction by SIMCO is optional.  For a detailed description\
    \ of the\n   PDR transaction semantics, see Section 8.8.\n"
- title: 3.  SIMCO Sessions
  contents:
  - "3.  SIMCO Sessions\n   The SIMCO protocol uses a session model with two parties:\
    \ an agent\n   representing one or more applications and a middlebox.  Both parties\n\
    \   may participate in multiple sessions.  An agent may simultaneously\n   communicate\
    \ with several middleboxes using one session per middlebox.\n   A middlebox may\
    \ simultaneously communicate with several agents using\n   one session per agent.\n\
    \                +-------+  SIMCO protocol  +-----------+\n                | agent\
    \ +------------------+ middlebox |\n                +-------+                \
    \  +-----------+\n                Figure 1: Participants in a SIMCO session\n\
    \   SIMCO sessions must run over a reliable transport layer protocol and\n   are\
    \ initiated by the agent.  SIMCO implementations must support TCP,\n   while other\
    \ reliable transport protocols can be used as transport for\n   SIMCO as well.\
    \  When using TCP as transport, middleboxes must wait\n   for agents to connect\
    \ on port 7626.  This port is assigned to SIMCO\n   servers by IANA (see http://www.iana.org/assignments/port-numbers).\n\
    \   The session may be secured, if required, by either IPsec or TLS\n   [RFC4346]\
    \ to guarantee authentication, message integrity and\n   confidentiality.  The\
    \ use of IPsec is outlined in Section 9,\n   \"Security Considerations\".\n  \
    \ The transaction semantics of sessions is explained in [RFC3989]\n   Section\
    \ 2.2.\n"
- title: 4.  SIMCO Message Components
  contents:
  - "4.  SIMCO Message Components\n   All SIMCO messages from agent to middlebox and\
    \ from middlebox to\n   agent are sent over the transport protocol as specified\
    \ in Section 3.\n   SIMCO messages are Type-Length-Value (TLV) encoded using big\
    \ endian\n   (network ordered) binary data representations.\n   All SIMCO messages\
    \ start with the SIMCO header containing message\n   type, message length, and\
    \ a message identifier.  The rest of the\n   message, the payload, contains zero,\
    \ one, or more TLV message\n   attributes.\n"
- title: 4.1.  Message Types
  contents:
  - "4.1.  Message Types\n   The message type in the SIMCO header is divided into\
    \ a basic type and\n   a sub-type.  There are four basic types of SIMCO messages:\n\
    \      - request,\n      - positive reply,\n      - negative reply,\n      - notification.\n\
    \   Messages sent from the agent to the middlebox are always of basic\n   type\
    \ 'request message', while the basic type of messages sent from\n   the middlebox\
    \ to the agent is one of the three other types.  Request\n   messages and positive\
    \ and negative reply messages belong to request\n   transactions.  From the agent's\
    \ point of view, notification messages\n   belong to notification transactions\
    \ only.  From the middlebox's point\n   of view, a notification message may also\
    \ belong to a request\n   transaction.  See section 2.3.4. of [RFC3989] for a\
    \ detailed\n   discussion of this issue.\n   The message sub-type gives further\
    \ information on the message type\n   within the context of the basic message\
    \ type.  Only the combination\n   of basic type and sub-type clearly identify\
    \ the type of a message.\n"
- title: 4.2.  The SIMCO Header
  contents:
  - "4.2.  The SIMCO Header\n   The SIMCO header is the first part of all SIMCO messages.\
    \  It\n   contains four fields: the basic message type, the message sub-type,\n\
    \   the message length (excluding the SIMCO header) in octets, and the\n   transaction\
    \ identifier.  The SIMCO header has a size of 64 bits.  Its\n   layout is defined\
    \ in Figure 2.\n                Message Type\n       _______________^_______________\n\
    \      /                               \\\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |  Basic Type   |   Sub-Type    |         Message Length        |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \               Transaction Identifier (TID)                    |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                        Figure 2: The SIMCO header\n"
- title: 4.2.1.  Basic Message Types
  contents:
  - "4.2.1.  Basic Message Types\n   For the basic type field, the following values\
    \ are defined:\n      0x01  :  Request Message\n      0x02  :  Positive Reply\
    \ Message\n      0x03  :  Negative Reply Message\n      0x04  :  Notification\
    \ Message\n"
- title: 4.2.2.  Message Sub-types for Requests and Positive Replies
  contents:
  - "4.2.2.  Message Sub-types for Requests and Positive Replies\n   For basic types\
    \ 0x01 (request) and 0x02 (positive reply), a common\n   set of values for the\
    \ sub-type field is defined.  Most of the sub-\n   types can be used for both\
    \ basic types.  Restricted sub-types are\n   marked accordingly.\n      0x01 \
    \ :  (SE)  session establishment\n      0x02  :  (SA)  session authentication\n\
    \      0x03  :  (ST)  session termination\n      0x11  :  (PRR) policy reserve\
    \ rule\n      0x12  :  (PER) policy enable rule\n      0x13  :  (PEA) PER after\
    \ reservation (request only)\n      0x14  :  (PDR) policy disable rule\n     \
    \ 0x15  :  (PLC) policy rule lifetime change\n      0x16  :  (PRD) policy rule\
    \ deletion (positive reply only)\n      0x21  :  (PRS) policy rule status\n  \
    \    0x22  :  (PRL) policy rule list\n      0x23  :  (PES) policy enable rule\
    \ status (positive reply only)\n      0x24  :  (PDS) policy disable rule status\
    \ (positive reply only)\n"
- title: 4.2.3.  Message Sub-types for Negative Replies
  contents:
  - "4.2.3.  Message Sub-types for Negative Replies\n   For basic type 0x03 (negative\
    \ reply message), the following values of\n   the sub-type field are defined:\n\
    \      Replies concerning general message handling\n      0x10  :  wrong basic\
    \ request message type\n      0x11  :  wrong request message sub-type\n      0x12\
    \  :  badly formed request\n      0x13  :  reply message too big\n      Replies\
    \ concerning sessions\n      0x20  :  request not applicable\n      0x21  :  lack\
    \ of resources\n      0x22  :  protocol version mismatch\n      0x23  :  authentication\
    \ failed\n      0x24  :  no authorization\n      0x25  :  transport protocol problem\n\
    \      0x26  :  security of underlying protocol layers insufficient\n      Replies\
    \ concerning policy rules\n      0x40  :  transaction not supported\n      0x41\
    \  :  agent not authorized for this transaction\n      0x42  :  no resources available\
    \ for this transaction\n      0x43  :  specified policy rule does not exist\n\
    \      0x44  :  specified policy rule group does not exist\n      0x45  :  not\
    \ authorized for accessing specified policy\n      0x46  :  not authorized for\
    \ accessing specified group\n      0x47  :  requested address space not available\n\
    \      0x48  :  lack of IP addresses\n      0x49  :  lack of port numbers\n  \
    \    0x4A  :  middlebox configuration failed\n      0x4B  :  inconsistent request\n\
    \      0x4C  :  requested wildcarding not supported\n      0x4D  :  protocol type\
    \ doesn't match\n      0x4E  :  NAT mode not supported\n      0x4F  :  IP version\
    \ mismatch\n      0x50  :  conflict with existing rule\n      0x51  :  not authorized\
    \ to change lifetime\n      0x52  :  lifetime can't be extended\n      0x53  :\
    \  illegal IP Address\n      0x54  :  protocol type not supported\n      0x55\
    \  :  illegal port number\n      0x56  :  illegal number of subsequent ports (NOSP)\n\
    \      0x57  :  already enable PID\n      0x58  :  parity doesn't match\n"
- title: 4.2.4.  Message Sub-types for Notifications
  contents:
  - "4.2.4.  Message Sub-types for Notifications\n   For basic type 0x04, the following\
    \ values of the sub-type field are\n   defined:\n      0x01  :  (BFM) badly formed\
    \ message received\n      0x02  :  (AST) asynchronous session termination\n  \
    \    0x03  :  (ARE) asynchronous policy rule event\n"
- title: 4.2.5.  Transaction Identifier
  contents:
  - "4.2.5.  Transaction Identifier\n   The transaction identifier (TID) is an arbitrary\
    \ number identifying\n   the transaction.  In a request message, the agent chooses\
    \ an agent-\n   unique TID, such that the same agent never uses the same TID in\
    \ two\n   different request messages belonging to the same session.  Reply\n \
    \  messages must contain the same TID as the corresponding request\n   message.\
    \  In a notification message, the middlebox chooses a\n   middlebox-unique TID,\
    \ such that the same middlebox never uses the\n   same TID in two different notification\
    \ messages belonging to the same\n   session.\n"
- title: 4.3.  The SIMCO Payload
  contents:
  - "4.3.  The SIMCO Payload\n   A SIMCO payload consists of zero, one, or more type-length-value\n\
    \   (TLV) attributes.  Each TLV attribute starts with a 16-bit type field\n  \
    \ and a 16-bit length field, as shown in Figure 3.\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |        attribute type         |        attribute length       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                             value\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                                  ...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                                                                   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \             Figure 3: Structure of TLV attribute\n   The attribute length field\
    \ contains the length of the value field in\n   octets.\n   The following attribute\
    \ types are defined:\n      type       description               length\n    \
    \  ----------------------------------------------------\n      0x0001  :  SIMCO\
    \ protocol version    32 bits\n      0x0002  :  authentication challenge  <= 4096\
    \ octets\n      0x0003  :  authentication token      <= 4096 octets\n      0x0004\
    \  :  middlebox capabilities    64 bits\n      0x0005  :  policy rule identifier\
    \    32 bits\n      0x0006  :  group identifier          32 bits\n      0x0007\
    \  :  policy rule lifetime      32 bits\n      0x0008  :  policy rule owner  \
    \       <= 255 octets\n      0x0009  :  address tuple             32, 96 or 192\
    \ bits\n      0x000A  :  PRR parameter set         32 bits\n      0x000B  :  PER\
    \ parameter set         32 bits\n"
- title: 4.3.1.  SIMCO Protocol Version Attribute
  contents:
  - "4.3.1.  SIMCO Protocol Version Attribute\n   The SIMCO protocol version attribute\
    \ has a length of four octets.\n   The first two octets contain the version number,\
    \ one the major\n   version number and the other the minor version number.  Two\
    \ remaining\n   octets are reserved.\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |            0x0001             |            0x0004             |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |major\
    \ version #|minor version #|           reserved            |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                    Figure 4: Protocol version attribute\n   The SIMCO protocol\
    \ specified within this document is version 3.0.\n   The version numbers carried\
    \ in the protocol version attribute are 3\n   for major version number and 0 for\
    \ minor version number.\n"
- title: 4.3.2.  Authentication Attributes
  contents:
  - "4.3.2.  Authentication Attributes\n   The authentication challenge attribute\
    \ and the authentication token\n   attribute have the same format.  Both contain\
    \ a single value field\n   with variable length.  For both, the maximum length\
    \ is limited to\n   4096 octets.  Please note that the length of these attributes\
    \ may\n   have values that are not multiples of 4 octets.  In case of an\n   authentication\
    \ challenge attribute, the value field contains an\n   authentication challenge\
    \ sent from one peer to the other, requesting\n   that the other peer authenticate\
    \ itself.\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |            0x0002             |        challenge length       |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                           challenge\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                                     ...\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                                                                      |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      \
    \           Figure 5: Authentication challenge attribute\n   The authentication\
    \ token attribute is used for transmitting an\n   authentication token.\n    \
    \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \            0x0003             |     authentication length     |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                      authentication token\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                                     ...\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                                                                      |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      \
    \               Figure 6: Authentication attribute\n"
- title: 4.3.3.  Middlebox Capabilities Attribute
  contents:
  - "4.3.3.  Middlebox Capabilities Attribute\n   The middlebox capabilities attribute\
    \ has a length of eight octets.\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |            0x0004             |             0x0008            |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \    MB type    |I|E|P|S|IIV|EIV|           reserved            |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                  max policy rule lifetime                     |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      \
    \              Figure 7: Capabilities attribute\n   The first parameter field\
    \ carries a bit field called MB type and\n   provides information about the middlebox\
    \ type.  The following bits\n   within the field are defined.  The remaining ones\
    \ are reserved.\n      0x80  :  packet filter firewall\n      0x40  :  network\
    \ address translator\n      0x10  :  support of PDR transaction\n      0x01  :\
    \  port translation (requires 0x40 set)\n      0x02  :  protocol translation (requires\
    \ 0x40 set)\n      0x04  :  twice NAT support (requires 0x40 set)\n   For middleboxes\
    \ that implement combinations of NAT and firewalls,\n   combinations of those\
    \ flags are possible.  For instance, for a\n   Network Address and Port Translator\
    \ (NAPT) with packet filter and PDR\n   transaction support, the value of the\
    \ MB type parameter field is\n   0xD1.\n   The following four parameters fields\
    \ are binary flags with a size of\n   one bit:\n      I     :  internal IP address\
    \ wildcard support\n      E     :  external IP address wildcard support\n    \
    \  P     :  port wildcard support\n      S     :  persistent storage of policy\
    \ rules\n   The supported IP version for the internal and external network are\n\
    \   coded into the IIV (Internal IP version) and EIV (external IP\n   version)\
    \ parameter fields.  They both have a size of two bits.\n   Allowed values are\
    \ 0x1 for IP version 4 (IPv4), 0x2 for IP version 6\n   (IPv6), and the combination\
    \ of both (0x3) for IPv4 and IPv6 dual\n   stack.\n   The next parameter field\
    \ with a length of 16 bits is reserved.\n   The max policy rule lifetime parameter\
    \ field specifies the maximum\n   lifetime a policy rule may have.\n"
- title: 4.3.4.  Policy Rule Identifier Attribute
  contents:
  - "4.3.4.  Policy Rule Identifier Attribute\n   The policy rule identifier (PID)\
    \ attribute contains an identifier of\n   a policy rule.  The identifier has a\
    \ length of four octets.\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |            0x0005             |            0x0004             |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                  policy rule identifier (PID)                 |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                Figure 8: Policy rule identifier attribute\n"
- title: 4.3.5.  Group Identifier Attribute
  contents:
  - "4.3.5.  Group Identifier Attribute\n   The group identifier (GID) attribute contains\
    \ an identifier of a\n   policy rule group.  The identifier has a length of four\
    \ octets.\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |            0x0006             |            0x0004             |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                     group identifier (GID)                    |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                  Figure 9: Group identifier attribute\n"
- title: 4.3.6.  Policy Rule Lifetime Attribute
  contents:
  - "4.3.6.  Policy Rule Lifetime Attribute\n   The policy rule lifetime attribute\
    \ specifies the requested or actual\n   remaining lifetime of a policy rule, in\
    \ seconds.  Its value field\n   contains a 32-bit unsigned integer.\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |            0x0007             |            0x0004             |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                      policy rule lifetime                     |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                 Figure 10: Policy rule lifetime attribute\n"
- title: 4.3.7.  Policy Rule Owner Attribute
  contents:
  - "4.3.7.  Policy Rule Owner Attribute\n   The policy rule owner attribute specifies\
    \ the authenticated agent\n   that created and owns the policy rule.  Its value\
    \ field does not have\n   a fixed length, but its length is limited to 255 octets.\
    \  Please note\n   that the length of this attribute may have values that are\
    \ not\n   multiples of 4 octets.  The owner is set by the middlebox.\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |            0x0008             |          owner length         |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                             owner\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                                     ...\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                                                                      |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      \
    \           Figure 11: Policy rule owner attribute\n"
- title: 4.3.8.  Address Tuple Attribute
  contents:
  - "4.3.8.  Address Tuple Attribute\n   The address tuple attribute contains a set\
    \ of parameters specifying\n   IP and transport addresses.  The length of this\
    \ attribute is 32, 96,\n   or 192 bits.\n   The first parameter field has a length\
    \ of 4 bits.  It indicates\n   whether the contained parameters specify just the\
    \ used protocols or\n   also concrete addresses.  Defined values for this field\
    \ are:\n      0x0  :  full addresses\n      0x1  :  protocols only\n   The second\
    \ parameter field also has a length of 4 bits.  It specifies\n   the IP version\
    \ number.  Defined values for this field are:\n      0x1  :  IPv4\n      0x2 \
    \ :  IPv6\n   The third parameter field has a length of 8 bits.  It specifies\
    \ a\n   prefix length to be used for IP address wildcarding (see Section\n   1.1).\n\
    \   The fourth parameter field has also a length of 8 bits.  It specifies\n  \
    \ the transport protocol.  Defined values for this field are all values\n   that\
    \ are allowed in the 'Protocol' field of the IPv4 header [RFC791]\n   or in the\
    \ 'Next Header field' of the IPv6 header [RFC2460].  The set\n   of defined numbers\
    \ for these fields is maintained by the Internet\n   Assigned Numbers Authority\
    \ (IANA) under the label 'PROTOCOL NUMBERS'.\n   The fifth parameter field has\
    \ also a length of 8 bits.  It specifies\n   the location of the address.  Defined\
    \ values for this field are:\n      0x00  :  internal (A0)\n      0x01  :  inside\
    \   (A1)\n      0x02  :  outside  (A2)\n      0x03  :  external (A3)\n   Port\
    \ and address wildcarding can only be used in PER and PEA\n   transactions.  The\
    \ address tuple attribute carries a port number of 0\n   if the port should be\
    \ wildcarded.  For IPv4, a prefix length less\n   than 0x20 is IP address wildcarding.\
    \  For IPv6, a prefix length less\n   than 0x80 is IP address wildcarding.\n \
    \  The port range field must be always greater than zero, but at least\n   1.\n\
    \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   \
    \   |            0x0009             |            0x0004             |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |  0x1  |IP ver.| prefix length |trnsp. protocol|   location    |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |            0x0009             |            0x000C             |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \  0x0  |  0x1  | prefix length |trnsp. protocol|   location    |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |          port number          |          port range           |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                          IPv4 address                         |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   \
    \   |            0x0009             |            0x0018             |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |  0x0  |  0x2  | prefix length |trnsp. protocol|   location    |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \          port number          |          port range           |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                                                               |\n   \
    \   +                                                               +\n      |\
    \                                                               |\n      +   \
    \                       IPv6 address                         +\n      |      \
    \                                                         |\n      +         \
    \                                                      +\n      |            \
    \                                                   |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                  Figure 12: Address tuple attributes\n"
- title: 4.3.9.  PRR Parameter Set Attribute
  contents:
  - "4.3.9.  PRR Parameter Set Attribute\n   The policy reserve rule (PRR) parameter\
    \ set attribute contains all\n   parameters of the PRR request except the group\
    \ identifier:\n      - NAT mode\n      - port parity\n      - requested inside\
    \ IP version\n      - requested outside IP version\n      - transport protocol\n\
    \      - port range\n   The attribute value field has a total size of 32 bits.\
    \  It is sub-\n   divided into six parameter fields.\n   The first parameter field,\
    \ called NM, has a length of 2 bits and\n   specifies the requested NAT mode of\
    \ the middlebox at which a\n   reservation is requested.  Defined values for this\
    \ field are:\n      01  :  traditional\n      10  :  twice\n   The second parameter\
    \ field, called PP, has also a length of 2 bits.\n   It specifies the requested\
    \ port parity.  Defined values for this\n   field are:\n      00  :  any\n   \
    \   01  :  odd\n      10  :  even\n   The third and the fourth parameter fields\
    \ are called IPi and IPo,\n   respectively.  Both have a length of 2 bits.  They\
    \ specify the\n   requested version of the IP protocol at the inside (IPi) or\
    \ outside\n   (IPo) of the middlebox, respectively.  Defined values for these\n\
    \   fields are:\n      00  :  any\n      01  :  IPv4\n      10  :  IPv6\n   The\
    \ fifth parameter field has a length of 8 bits.  It specifies the\n   transport\
    \ protocol for which the reservation should be made.  A value\n   of zero indicates\
    \ that the reservation is requested for an IP address\n   without specific selection\
    \ of a protocol and a port number.  Allowed\n   non-zero values are the defined\
    \ values for the 'protocol' field in\n   the IPv4 header and IPv6 extension headers.\
    \  The set of defined\n   numbers for these fields is maintained by the Internet\
    \ Assigned\n   Numbers Authority (IANA) under the label 'PROTOCOL NUMBERS'.\n\
    \   The sixth parameter field has a length of 16 bits.  It contains an\n   unsigned\
    \ integer specifying the length of the port range that should\n   be supported.\
    \  A value of 0xFFFF indicates that the reservation\n   should be made for all\
    \ port numbers of the specified transport\n   protocol.  A port range field with\
    \ the value of 0x0001 specifies that\n   only a single port number should be reserved.\
    \  Values greater than\n   one indicate the number of consecutive port numbers\
    \ to be reserved.\n   A value of zero is not valid for this field.\n   Please\
    \ note that the wildcarding value 0xFFFF can only be used in the\n   port range\
    \ field in the PRR parameter set attribute.  In the address\n   tuple attribute,\
    \ wildcarding of port numbers is specified by the port\n   number field having\
    \ a value of zero (see Section 4.3.8).\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |            0x000A             |            0x0004             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |NM |PP |IPi|IPo|trnsp. protocol|           port range          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \             Figure 13: PRR parameter set attribute\n"
- title: 4.3.10.  PER Parameter Set Attribute
  contents:
  - "4.3.10.  PER Parameter Set Attribute\n   The policy enable rule (PER) parameter\
    \ set attribute contains two\n   parameters: the requested port parity, and the\
    \ direction of the\n   enabled data stream.  The attribute value field has a total\
    \ size of\n   32 bits, and it is sub-divided into 3 parameter fields.\n   The\
    \ first parameter field has a length of 8 bits.  It specifies the\n   requested\
    \ port parity.  Defined values for this field are:\n      0x00  :  any\n     \
    \ 0x03  :  same\n   The second parameter field has a length of 8 bits.  It specifies\
    \ the\n   direction of the enabled data stream.  Defined values for this field\n\
    \   are:\n      0x01  :  inbound\n      0x02  :  outbound\n      0x03  :  bi-directional\n\
    \   The third parameter field has a length of 16 bits and is reserved.\n     \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      | \
    \           0x000B             |            0x0004             |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |  port parity  |   direction   |           reserved            |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      \
    \           Figure 14: PER parameter set attribute\n"
- title: 5.  SIMCO Message Formats
  contents:
  - "5.  SIMCO Message Formats\n   In the following, the formats of the different\
    \ SIMCO message types\n   are defined.  The definitions are grouped into protocol\
    \ error\n   messages, session control messages, and policy rule control messages.\n"
- title: 5.1.  Protocol Error Replies and Notifications
  contents:
  - "5.1.  Protocol Error Replies and Notifications\n   When processing a received\
    \ message, the middlebox might run into\n   message processing problems before\
    \ it can identify whether the\n   message concerns session control or policy rule\
    \ control.  Also, it\n   might not be possible to determine the message type,\
    \ or it might\n   detect a wrong message format.  In these cases, the Badly Formed\n\
    \   Message (BFM) notification or one of the following negative replies\n   is\
    \ sent:\n      0x0401  :  BFM notification\n      0x0310  :  wrong basic request\
    \ message type\n      0x0311  :  wrong request message sub-type\n      0x0312\
    \  :  badly formed request\n"
- title: 5.1.1.  BFM Notification
  contents:
  - "5.1.1.  BFM Notification\n   The Badly Formed Message (BFM) notification message\
    \ is sent from the\n   middlebox to the agent after a message was received that\
    \ does not\n   comply to the SIMCO message format definition.  The BFM notification\n\
    \   has no attributes and contains the SIMCO header only.\n                  \
    \    +--------------------------+\n                      | SIMCO header      \
    \       |\n                      +--------------------------+\n              \
    \    Figure 15: BFM notification structure\n"
- title: 5.1.2.  Protocol Error Negative Replies
  contents:
  - "5.1.2.  Protocol Error Negative Replies\n   Protocol error negative replies are\
    \ sent from the middlebox to the\n   agent if a message cannot be clearly interpreted,\
    \ as it does not\n   comply with any defined message format.  Protocol error negative\n\
    \   replies include 'wrong basic request message type' (0x0310), 'wrong\n   request\
    \ message sub-type' (0x0311), and 'badly formed request'\n   (0x0312).  These\
    \ replies have no attributes.  They consist of the\n   SIMCO header only.\n  \
    \                    +--------------------------+\n                      | SIMCO\
    \ header             |\n                      +--------------------------+\n \
    \          Figure 16: Protocol error negative reply structure\n"
- title: 5.2.  Session Control Messages
  contents:
  - "5.2.  Session Control Messages\n   Session control messages include the following\
    \ list of message types\n   (composed of basic type and sub-type):\n      0x0101\
    \  :  SE request\n      0x0102  :  SA request\n      0x0103  :  ST request\n \
    \     0x0201  :  SE positive reply\n      0x0202  :  SA positive reply\n     \
    \ 0x0203  :  ST positive reply\n      0x0310  :  negative reply: wrong basic request\
    \ message type\n      0x0311  :  negative reply: wrong request message sub-type\n\
    \      0x0312  :  negative reply: badly formed request\n      0x0320  :  negative\
    \ reply: request not applicable\n      0x0321  :  negative reply: lack of resources\n\
    \      0x0322  :  negative reply: protocol version mismatch\n      0x0323  : \
    \ negative reply: authentication failed\n      0x0324  :  negative reply: no authorization\n\
    \      0x0325  :  negative reply: transport protocol problem\n      0x0326  :\
    \  negative reply: security of underlying protocol layers\n                  \
    \               insufficient\n      0x0401  :  BFM notification\n      0x0402\
    \  :  AST notification\n"
- title: 5.2.1.  SE Request
  contents:
  - "5.2.1.  SE Request\n   The Session Establishment (SE) request message is sent\
    \ from the agent\n   to the middlebox to request establishment of a session. \
    \ The SE\n   request message contains one or two attributes: a mandatory SIMCO\n\
    \   version number attribute and an optional authentication challenge\n   attribute\
    \ requesting that the middlebox authenticate itself.\n                      +--------------------------+\n\
    \                      | SIMCO header             |\n                      +--------------------------+\n\
    \                      | SIMCO protocol version   |\n                      +--------------------------+\n\
    \                      | authentication challenge | optional\n               \
    \       +--------------------------+\n                   Figure 17: Structure\
    \ of SE request\n"
- title: 5.2.2.  SE Positive Reply
  contents:
  - "5.2.2.  SE Positive Reply\n   The Session Establishment (SE) reply message indicates\
    \ completion of\n   session establishment.  It contains a single mandatory attribute:\
    \ the\n   middlebox capabilities attribute.\n                      +--------------------------+\n\
    \                      | SIMCO header             |\n                      +--------------------------+\n\
    \                      | middlebox capabilities   |\n                      +--------------------------+\n\
    \                Figure 18: Structure of SE positive reply\n"
- title: 5.2.3.  SA Positive Reply
  contents:
  - "5.2.3.  SA Positive Reply\n   If the agent requested middlebox authentication,\
    \ or if the middlebox\n   wants the agent to authenticate itself, then the middlebox\
    \ replies on\n   the SE request with a Session Authentication (SA) reply message\n\
    \   instead of an SE reply message.  The SA reply message contains two\n   optional\
    \ attributes, but at least one of them needs to be present.\n   The first one\
    \ is an authentication challenge attribute requesting\n   that the agent authenticate\
    \ itself.  The second one is an\n   authentication token attribute authenticating\
    \ the middlebox as the\n   reply to an authentication request by the agent.\n\
    \                      +--------------------------+\n                      | SIMCO\
    \ header             |\n                      +--------------------------+\n \
    \                     | authentication challenge | optional\n                \
    \      +--------------------------+\n                      | authentication token\
    \     | optional\n                      +--------------------------+\n       \
    \         Figure 19: Structure of SA positive reply\n"
- title: 5.2.4.  SA Request
  contents:
  - "5.2.4.  SA Request\n   The Session Authentication (SA) request message is sent\
    \ from the\n   agent to the middlebox after an initial SE request was answered\
    \ by an\n   SA reply.  The SE request message contains one optional attribute:\
    \ an\n   authentication token attribute authenticating the agent as the\n   response\
    \ to an authentication challenge sent by the middlebox in an\n   SA reply.\n \
    \                     +--------------------------+\n                      | SIMCO\
    \ header             |\n                      +--------------------------+\n \
    \                     | authentication token     | optional\n                \
    \      +--------------------------+\n                   Figure 20: Structure of\
    \ SA request\n"
- title: 5.2.5.  ST Request and ST Positive Reply
  contents:
  - "5.2.5.  ST Request and ST Positive Reply\n   The Session Termination (ST) request\
    \ message is sent from the agent\n   to the middlebox to request termination of\
    \ a session.  The ST\n   positive reply is returned, acknowledging the session\
    \ termination.\n   Both messages have no attributes and contain the SIMCO header\
    \ only.\n                      +--------------------------+\n                \
    \      | SIMCO header             |\n                      +--------------------------+\n\
    \           Figure 21: Structure of ST request and positive reply\n"
- title: 5.2.6.  SE Negative Replies
  contents:
  - "5.2.6.  SE Negative Replies\n   There are nine different negative reply messages\
    \ that can be sent\n   from a middlebox to the agent if the middlebox rejects\
    \ an SE request.\n   Three of them are protocol error negative replies (0x031X)\
    \ already\n   covered in Section 4.1.2.\n   The remaining six negative replies\
    \ are specific to session\n   establishment.  One of them, the 'protocol version\
    \ mismatch' negative\n   reply (0x0322), contains a single attribute: the protocol\
    \ version\n   attribute.\n                      +--------------------------+\n\
    \                      | SIMCO header             |\n                      +--------------------------+\n\
    \                      | SIMCO protocol version   |\n                      +--------------------------+\n\
    \                Figure 22a: Structure of SE negative replies\n   The remaining\
    \ three replies include 'request not applicable'\n   (0x0320), 'lack of resources'\
    \ (0x0321), 'authentication failed'\n   (0x0323), 'no authorization' (0x0324),\
    \ 'transport protocol problem'\n   (0x0325), and 'security of underlying protocol\
    \ layers insufficient'\n   (0x0326).  They consist of the SIMCO header only.\n\
    \                      +--------------------------+\n                      | SIMCO\
    \ header             |\n                      +--------------------------+\n \
    \               Figure 22b: Structure of SE negative replies\n"
- title: 5.2.7.  AST Notification
  contents:
  - "5.2.7.  AST Notification\n   The Asynchronous Session Termination (AST) notification\
    \ message is\n   sent from the middlebox to the agent, if the middlebox wants\
    \ to\n   terminate a SIMCO session.  It has no attributes and contains the\n \
    \  SIMCO header only.\n                      +--------------------------+\n  \
    \                    | SIMCO header             |\n                      +--------------------------+\n\
    \                Figure 22a: Structure of AST notifications\n"
- title: 5.3.  Policy Rule Control Messages
  contents:
  - "5.3.  Policy Rule Control Messages\n   Policy Rule control messages include the\
    \ following list of message\n   types (composed of basic type and sub-type):\n\
    \   0x0111  :  PRR request\n   0x0112  :  PER request\n   0x0113  :  PEA request\n\
    \   0x0114  :  PDR request\n   0x0115  :  PLC request\n   0x0121  :  PRS request\n\
    \   0x0122  :  PRL request\n   0x0211  :  PRR positive reply\n   0x0212  :  PER\
    \ positive reply\n   0x0214  :  PDR positive reply\n   0x0215  :  PLC positive\
    \ reply\n   0x0216  :  PRD positive reply\n   0x0221  :  PRS positive reply\n\
    \   0x0223  :  PES positive reply\n   0x0224  :  PDS positive reply\n   0x0222\
    \  :  PRL positive reply\n   0x0310  :  negative reply: wrong basic request message\
    \ type\n   0x0311  :  negative reply: wrong request message sub-type\n   0x0312\
    \  :  negative reply: badly formed request\n   0x0340  :  negative reply: transaction\
    \ not supported\n   0x0341  :  negative reply: agent not authorized for this transaction\n\
    \   0x0342  :  negative reply: no resources available for this\n             \
    \                 transaction\n   0x0343  :  negative reply: specified policy\
    \ rule does not exist\n   0x0344  :  negative reply: specified policy rule group\
    \ does not exist\n   0x0345  :  negative reply: not authorized for accessing this\
    \ policy\n   0x0346  :  negative reply: not authorized for accessing specified\n\
    \                              group\n   0x0347  :  negative reply: requested\
    \ address space not available\n   0x0348  :  negative reply: lack of IP addresses\n\
    \   0x0349  :  negative reply: lack of port numbers\n   0x034A  :  negative reply:\
    \ middlebox configuration failed\n   0x034B  :  negative reply: inconsistent request\n\
    \   0x034C  :  negative reply: requested wildcarding not supported\n   0x034D\
    \  :  negative reply: protocol type doesn't match\n   0x034E  :  negative reply:\
    \ NAT mode not supported\n   0x034F  :  negative reply: IP version mismatch\n\
    \   0x0350  :  negative reply: conflict with existing rule\n   0x0351  :  negative\
    \ reply: not authorized to change lifetime\n   0x0352  :  negative reply: lifetime\
    \ can't be extended\n   0x0353  :  negative reply: illegal IP Address\n   0x0354\
    \  :  negative reply: protocol type not supported\n   0x0355  :  negative reply:\
    \ illegal port number\n   0x0356  :  negative reply: illegal NOSP\n   0x0357 \
    \ :  negative reply: already enable PID\n   0x0358  :  negative reply: parity\
    \ doesn't match\n   0x0401  :  negative reply: BFM notification\n   0x0403  :\
    \  negative reply: ARE notification\n"
- title: 5.3.1.  Policy Events and Asynchronous Notifications
  contents:
  - "5.3.1.  Policy Events and Asynchronous Notifications\n   SIMCO maintains an owner\
    \ attribute for each policy rule at the\n   middlebox.  Depending on the configuration\
    \ of the middlebox, several\n   agents may access the same policy rule; see also\
    \ [RFC3989], Sections\n   2.1.5 and 2.3.4.\n   To keep all agents synchronized\
    \ about the state of their policy\n   rules, SIMCO generates Asynchronous Rule\
    \ Event (ARE) notifications.\n   When an agent is reserving or enabling a policy\
    \ rule, the middlebox\n   sends an ARE to all agents that are authorized to access\
    \ this policy\n   rule.  The middlebox sends an ARE to all agents authorized to\
    \ access\n   this policy rule when the rule lifetime is modified or if the rule\
    \ is\n   deleted.\n"
- title: 5.3.2.  PRR Request
  contents:
  - "5.3.2.  PRR Request\n   The Policy Reserve Rule (PRR) request message is sent\
    \ from the agent\n   to the middlebox to request reservation of an IP address\
    \ (and\n   potentially also a range of port numbers) at the middlebox.  Besides\n\
    \   the SIMCO header, the request message contains two or three\n   attributes.\
    \  The first one is the PRR parameter set attribute\n   specifying all parameters\
    \ of the request except the requested policy\n   rule lifetime and the group identifier.\
    \  The missing parameters are\n   covered by the following two attributes.  The\
    \ last attribute, the\n   group identifier, is optional.\n                   \
    \   +--------------------------+\n                      | SIMCO header       \
    \      |\n                      +--------------------------+\n               \
    \       | PRR parameter set        |\n                      +--------------------------+\n\
    \                      | policy rule lifetime     |\n                      +--------------------------+\n\
    \                      | group identifier         | optional\n               \
    \       +--------------------------+\n                   Figure 23: Structure\
    \ of PRR request\n"
- title: 5.3.3.  PER Request
  contents:
  - "5.3.3.  PER Request\n   The Policy Enable Rule (PER) request message is sent\
    \ from the agent\n   to the middlebox to request enabling of data communication\
    \ between an\n   internal and an external address.  Besides the SIMCO header,\
    \ the\n   request message contains four or five attributes.  The first one is\n\
    \   the PER parameter set attribute specifying all parameters of the\n   request\
    \ except the internal address, the external address, the\n   requested policy\
    \ rule lifetime, and the group identifier.  The\n   missing parameters are covered\
    \ by the following four attributes.  Two\n   address tuple parameters specify\
    \ internal and external address\n   tuples.  Much like the PRR request, the last\
    \ two attributes specify\n   the requested lifetime and group identifier.  The\
    \ group identifier\n   attribute is optional.\n                      +--------------------------+\n\
    \                      | SIMCO header             |\n                      +--------------------------+\n\
    \                      | PER parameter set        |\n                      +--------------------------+\n\
    \                      | address tuple (internal) |\n                      +--------------------------+\n\
    \                      | address tuple (external) |\n                      +--------------------------+\n\
    \                      | policy rule lifetime     |\n                      +--------------------------+\n\
    \                      | group identifier         | optional\n               \
    \       +--------------------------+\n                   Figure 24: Structure\
    \ of PER request\n"
- title: 5.3.4.  PEA Request
  contents:
  - "5.3.4.  PEA Request\n   The Policy Enable rule After reservation (PEA) request\
    \ message is\n   sent from the agent to the middlebox to request enabling of data\n\
    \   communication between an internal and an external address.  It is\n   similar\
    \ to the PER request.  There is just one difference.  The\n   optional group identifier\
    \ attribute of the PER request is replaced by\n   a mandatory policy rule identifier\
    \ attribute referencing an already\n   established policy reserve rule established\
    \ by a PRR transaction.\n                      +--------------------------+\n\
    \                      | SIMCO header             |\n                      +--------------------------+\n\
    \                      | PER parameter set        |\n                      +--------------------------+\n\
    \                      | address tuple (internal) |\n                      +--------------------------+\n\
    \                      | address tuple (external) |\n                      +--------------------------+\n\
    \                      | policy rule lifetime     |\n                      +--------------------------+\n\
    \                      | policy rule identifier   |\n                      +--------------------------+\n\
    \                   Figure 25: Structure of PEA request\n   The group identifier\
    \ attribute is not included in the PEA request,\n   since the group membership\
    \ of the policy enable rule is inherited of\n   the policy reserve rule.\n"
- title: 5.3.5.  PLC Request
  contents:
  - "5.3.5.  PLC Request\n   The Policy Rule Lifetime Change (PLC) request message\
    \ is sent from\n   the agent to the middlebox to request a change of the remaining\n\
    \   policy lifetime.  Besides the SIMCO header, the request message\n   contains\
    \ two attributes specifying the policy rule to which the\n   change should be\
    \ applied and specifying the requested remaining\n   lifetime.\n             \
    \         +--------------------------+\n                      | SIMCO header \
    \            |\n                      +--------------------------+\n         \
    \             | policy rule identifier   |\n                      +--------------------------+\n\
    \                      | policy rule lifetime     |\n                      +--------------------------+\n\
    \                   Figure 26: Structure of PLC request\n"
- title: 5.3.6.  PRS Request
  contents:
  - "5.3.6.  PRS Request\n   The Policy Rule Status (PRS) request message is sent\
    \ from the agent\n   to the middlebox to request a report on the status of a specified\n\
    \   policy rule.  Besides the SIMCO header, the request message contains\n   just\
    \ one attribute specifying the policy rule for which the report is\n   requested.\n\
    \                      +--------------------------+\n                      | SIMCO\
    \ header             |\n                      +--------------------------+\n \
    \                     | policy rule identifier   |\n                      +--------------------------+\n\
    \                   Figure 27: Structure of PRS request\n"
- title: 5.3.7.  PRL Request
  contents:
  - "5.3.7.  PRL Request\n   The Policy Rule List (PRL) request message is sent from\
    \ the agent to\n   the middlebox to request a list of all policy rules accessible\
    \ to the\n   agent.  The message consists of the SIMCO header only.\n        \
    \              +--------------------------+\n                      | SIMCO header\
    \             |\n                      +--------------------------+\n        \
    \           Figure 28: Structure of PRL request\n"
- title: 5.3.8.  PDR Request
  contents:
  - "5.3.8.  PDR Request\n   The Policy Disable Rule (PDR) request message is sent\
    \ from the agent\n   to the middlebox to request a disable rule.  The message\
    \ consists of\n   the SIMCO header, an internal address tuple, an external address\n\
    \   tuple, and a lifetime attribute.\n                      +--------------------------+\n\
    \                      | SIMCO header             |\n                      +--------------------------+\n\
    \                      | address tuple (internal) |\n                      +--------------------------+\n\
    \                      | address tuple (external) |\n                      +--------------------------+\n\
    \                      | policy rule lifetime     |\n                      +--------------------------+\n\
    \                   Figure 29: Structure of PDR request\n"
- title: 5.3.9.  PRR Positive Reply
  contents:
  - "5.3.9.  PRR Positive Reply\n   The Policy Reserve Rule (PRR) positive reply is\
    \ sent after successful\n   reservation of an address at the inside or outside\
    \ of the middlebox.\n   The message contains four mandatory attributes and an\
    \ optional\n   attribute: the policy rule identifier of the new policy reserve\
    \ rule,\n   the corresponding group identifier, the remaining lifetime of the\n\
    \   policy rule, the reserved outside address tuple, and the optional\n   reserved\
    \ inside address tuple.  The reserved inside address tuple is\n   only returned\
    \ when the middlebox is of type twice-NAT.\n                      +--------------------------+\n\
    \                      | SIMCO header             |\n                      +--------------------------+\n\
    \                      | policy rule identifier   |\n                      +--------------------------+\n\
    \                      | group identifier         |\n                      +--------------------------+\n\
    \                      | policy rule lifetime     |\n                      +--------------------------+\n\
    \                      | address tuple (outside)  |\n                      +--------------------------+\n\
    \                      | address tuple (inside)   | optional\n               \
    \       +--------------------------+\n               Figure 30: Structure of PRR\
    \ positive reply\n"
- title: 5.3.10.  PER Positive Reply
  contents:
  - "5.3.10.  PER Positive Reply\n   The Policy Enable Rule (PER) positive reply is\
    \ sent after the\n   middlebox successfully enables data transfer between an internal\
    \ and\n   an external address (by using a PER or PEA request message).  The\n\
    \   message contains five attributes: the policy rule identifier of the\n   new\
    \ policy enable rule, the corresponding group identifier, the\n   remaining lifetime\
    \ of the policy rule, the address tuple at the\n   outside of the middlebox, and\
    \ the address tuple at the inside of the\n   middlebox.\n                    \
    \  +--------------------------+\n                      | SIMCO header        \
    \     |\n                      +--------------------------+\n                \
    \      | policy rule identifier   |\n                      +--------------------------+\n\
    \                      | group identifier         |\n                      +--------------------------+\n\
    \                      | policy rule lifetime     |\n                      +--------------------------+\n\
    \                      | address tuple (outside)  |\n                      +--------------------------+\n\
    \                      | address tuple (inside)   |\n                      +--------------------------+\n\
    \               Figure 31: Structure of PER positive reply\n"
- title: 5.3.11.  PLC Positive Reply
  contents:
  - "5.3.11.  PLC Positive Reply\n   The Policy Lifetime Change (PLC) positive reply\
    \ is sent after the\n   middlebox changes the lifetime of a policy rule to a positive\
    \ (non-\n   zero) value.  The message contains just a single attribute: the\n\
    \   remaining lifetime of the policy rule.\n                      +--------------------------+\n\
    \                      | SIMCO header             |\n                      +--------------------------+\n\
    \                      | policy rule lifetime     |\n                      +--------------------------+\n\
    \               Figure 32: Structure of PLC positive reply\n"
- title: 5.3.12.  PRD Positive Reply
  contents:
  - "5.3.12.  PRD Positive Reply\n   The Policy Rule Deleted (PRD) positive reply\
    \ is sent after the\n   middlebox changes the remaining lifetime of a policy rule\
    \ to zero,\n   which means that it terminates the policy rule.  The message consists\n\
    \   of the SIMCO header only.\n                      +--------------------------+\n\
    \                      | SIMCO header             |\n                      +--------------------------+\n\
    \               Figure 33: Structure of PRD positive reply\n"
- title: 5.3.13.  PRS Positive Reply
  contents:
  - "5.3.13.  PRS Positive Reply\n   The Policy Reserve Rule Status (PRS) positive\
    \ reply is used for\n   reporting the status of a policy reserve rule.  The message\
    \ format is\n   identical with the format of the PRR positive reply except that\
    \ it\n   contains, in addition, a policy rule owner attribute.\n             \
    \         +--------------------------+\n                      | SIMCO header \
    \            |\n                      +--------------------------+\n         \
    \             | policy rule identifier   |\n                      +--------------------------+\n\
    \                      | group identifier         |\n                      +--------------------------+\n\
    \                      | policy rule lifetime     |\n                      +--------------------------+\n\
    \                      | address tuple (outside)  |\n                      +--------------------------+\n\
    \                      | address tuple (inside)   | optional\n               \
    \       +--------------------------+\n                      | policy rule owner\
    \        |\n                      +--------------------------+\n             \
    \  Figure 34: Structure of PRS positive reply\n"
- title: 5.3.14.  PES Positive Reply
  contents:
  - "5.3.14.  PES Positive Reply\n   The Policy Enable Rule Status (PES) positive\
    \ reply is used for\n   reporting the status of a policy enable rule.\n      \
    \                +--------------------------+\n                      | SIMCO header\
    \             |\n                      +--------------------------+\n        \
    \              | policy rule identifier   |\n                      +--------------------------+\n\
    \                      | group identifier         |\n                      +--------------------------+\n\
    \                      | PER parameter set        |\n                      +--------------------------+\n\
    \                      | address tuple (internal) |\n                      +--------------------------+\n\
    \                      | address tuple (inside)   |\n                      +--------------------------+\n\
    \                      | address tuple (outside)  |\n                      +--------------------------+\n\
    \                      | address tuple (external) |\n                      +--------------------------+\n\
    \                      | policy rule lifetime     |\n                      +--------------------------+\n\
    \                      | policy rule owner        |\n                      +--------------------------+\n\
    \               Figure 35: Structure of PES positive reply\n"
- title: 5.3.15.  PDS Positive Reply
  contents:
  - "5.3.15.  PDS Positive Reply\n   The Policy Disable Rule Status (PDS) positive\
    \ reply is used for\n   reporting the status of a policy disable rule.  The message\
    \ contains\n   five attributes:  the policy rule identifier, the internal and\n\
    \   external address tuples, the policy disable rule lifetime, and the\n   policy\
    \ rule owner.\n                      +--------------------------+\n          \
    \            | SIMCO header             |\n                      +--------------------------+\n\
    \                      | policy rule identifier   |\n                      +--------------------------+\n\
    \                      | address tuple (internal) |\n                      +--------------------------+\n\
    \                      | address tuple (external) |\n                      +--------------------------+\n\
    \                      | policy rule lifetime     |\n                      +--------------------------+\n\
    \                      | policy rule owner        |\n                      +--------------------------+\n\
    \               Figure 36: Structure of PDS positive reply\n"
- title: 3.5.16.  PRL Positive Reply
  contents:
  - "3.5.16.  PRL Positive Reply\n   The Policy Rule List (PRL) positive reply is\
    \ used for reporting the\n   list of all established policy rules.  The number\
    \ of attributes of\n   this message is variable.  The message contains one policy\
    \ rule\n   identifier attribute per established policy rule.\n               \
    \       +--------------------------+\n                      | SIMCO header   \
    \          |\n                      +--------------------------+\n           \
    \           | policy rule identifier   |\n                      +--------------------------+\n\
    \                      | policy rule identifier   |\n                      +--------------------------+\n\
    \                      |                          |\n                        \
    \        . . .\n                      |                          |\n         \
    \             +--------------------------+\n                      | policy rule\
    \ identifier   |\n                      +--------------------------+\n       \
    \        Figure 37: Structure of PRL positive reply\n"
- title: 5.3.17.  PDR Positive Replies
  contents:
  - "5.3.17.  PDR Positive Replies\n   The Policy Disable Rule (PDR) positive reply\
    \ is sent after the\n   middlebox successfully enables the policy disable rule\
    \ and removal of\n   conflicting policy rules.  The message contains two attributes:\
    \ the\n   policy rule identifier of the new policy disable rule, and the\n   remaining\
    \ lifetime of the policy rule.\n                      +--------------------------+\n\
    \                      | SIMCO header             |\n                      +--------------------------+\n\
    \                      | policy rule identifier   |\n                      +--------------------------+\n\
    \                      | policy rule lifetime     |\n                      +--------------------------+\n\
    \                 Figure 38: Structure of PDR positive reply\n"
- title: 5.3.18.  Policy Rule Control Negative Replies
  contents:
  - "5.3.18.  Policy Rule Control Negative Replies\n   Session establishment negative\
    \ replies are sent from the middlebox to\n   the agent if a middlebox rejects\
    \ a policy rule control request.\n   Beyond protocol error replies, a number of\
    \ policy rule control-\n   specific negative reply messages that can be sent.\
    \  They are listed\n   at the beginning of Section 5.3.  They all have no attributes.\
    \  They\n   consist of the SIMCO header only.\n                      +--------------------------+\n\
    \                      | SIMCO header             |\n                      +--------------------------+\n\
    \       Figure 39: Structure of Policy rule control negative replies\n"
- title: 5.3.19.  ARE Notification
  contents:
  - "5.3.19.  ARE Notification\n   The Asynchronous Policy Rule Event (ARE) notification\
    \ message is sent\n   from the middlebox to the agent.  All agents participating\
    \ in an open\n   SIMCO session that are authorized to access this policy rule\
    \ and are\n   not explicitly requesting an action (i.e., reserving, enabling,\
    \ and\n   changing lifetime) receive such an ARE notification, when:\n     - a\
    \ policy rule is deleted (lifetime attribute = 0)\n     - a policy rule is reserved\
    \ (lifetime attribute = lifetime)\n     - a policy rule is enabled (lifetime attribute\
    \ = lifetime)\n     - a policy rule's lifetime changed (lifetime attribute = lifetime)\n\
    \   Besides the SIMCO header, the request message contains two attributes\n  \
    \ specifying the policy rule that is concerned and the current\n   lifetime.\n\
    \                      +--------------------------+\n                      | SIMCO\
    \ header             |\n                      +--------------------------+\n \
    \                     | policy rule identifier   |\n                      +--------------------------+\n\
    \                      | policy rule lifetime     |\n                      +--------------------------+\n\
    \                 Figure 40: Structure of ARE notification\n"
- title: 6.  Message Format Checking
  contents:
  - "6.  Message Format Checking\n   This section describes common processing of all\
    \ messages that are\n   received by a middlebox.\n   1) When a message arrives\
    \ at a middlebox, the header is checked for\n      consistency before the payload\
    \ is processed.\n      o  If the header checks fail, the middlebox sends a BFM\n\
    \         notification.\n      o  If a session is already established, then the\
    \ middlebox also\n         sends an AST notification and closes the connection.\n\
    \   2) The middlebox waits until it has received as many octets from the\n   \
    \   agent as specified by the message length plus 8 octets (the length\n     \
    \ of the SIMCO header).\n      o  If the middlebox is still waiting and does not\
    \ receive any more\n         octets from the agent for 60 seconds, it sends a\
    \ BFM\n         notification.\n      o  If a session is already established, then\
    \ the middlebox also\n         sends an AST notification and closes the connection\
    \ after\n         sending the BFM notification; otherwise, it closes the\n   \
    \      connection without sending another message.\n   3) After receiving a sufficient\
    \ number of octets, the middlebox reads\n      the transaction identifier and\
    \ the basic message type.\n      o  If the value of the basic message type fields\
    \ does not equal\n         0x01 (request message), then the middlebox stops processing\
    \ the\n         message and sends a negative reply of type 'wrong basic request\n\
    \         message type' (0x0310) to the agent.\n      o  If no session is established,\
    \ then the middlebox closes the\n         connection after sending the 0x0310\
    \ reply.\n   4) Then the middlebox checks the message sub-type.\n      o  If no\
    \ session is established, then only sub-type 'session\n         establishment'\
    \ (0x01) is accepted.  For all other sub-types,\n         the middlebox sends\
    \ a reply of type 'wrong request message\n         sub-type' (0x0311) to the agent\
    \ and closes the connection after\n         sending the reply.\n      o  If a\
    \ session is already established, then the middlebox checks\n         if the message\
    \ sub-type is one of the sub-types defined in\n         Section 4.2.2. (excluding\
    \ 'session establishment' (0x01),\n         'session termination' (0x03), and\
    \ 'policy rule\n         deletion'(0x15)).\n         o  If not, then the middlebox\
    \ stops processing the message and\n            sends a reply of type 'wrong request\
    \ message sub-type'\n            (0x0311) to the agent.\n   5) Then the middlebox\
    \ checks the TLV-structured attributes in the\n      message.\n      o  If their\
    \ type or number does not comply with the defined format\n         for this message\
    \ type, the middlebox stops processing the\n         message and sends a reply\
    \ of type 'badly formed request'\n         (0x0312) to the agent.\n      o  If\
    \ no session is established, then the middlebox closes the\n         connection\
    \ after sending the 0x0312 reply.\n   6) After all message format checks are passed,\
    \ the middlebox\n      processes the content of the attributes as described in\
    \ the\n      following sections.\n"
- title: 7.  Session Control Message Processing
  contents:
  - "7.  Session Control Message Processing\n   For session control, the agent can\
    \ send SE, SA, and ST request\n   messages.  The middlebox then sends per request\
    \ a single reply back\n   to the agent.  Additionally, the middlebox may send\
    \ unsolicited AST\n   notifications.\n"
- title: 7.1.  Session State Machine
  contents:
  - "7.1.  Session State Machine\n   For each session, there is a session state machine\
    \ illustrated by the\n   figure below.\n                  SE/BFM\n           \
    \       SE/0x031X\n                  SE/0x032X\n                  +-------+\n\
    \                  |       v\n                 +----------+\n                \
    \ |  CLOSED  |----------------+\n                 +----------+               \
    \ |\n                    |   ^  ^                 |\n                    |   |\
    \  | SA/BFM          | SE/SA\n                    |   |  | SA/0x031X       |\n\
    \                    |   |  | SA/0x032X       |\n              SE/SE |   |  |\
    \ ST/ST           v\n                    |   |  | AST        +----------+\n  \
    \                  |   |  +------------|  NOAUTH  |\n                    |   |\
    \               +----------+\n                    |   | AST                |\n\
    \                    v   | ST/ST              | SA/SE\n                 +----------+\
    \                |\n                 |   OPEN   |<---------------+\n         \
    \        +----------+\n                Figure 41: Session state machine\n   The\
    \ figure illustrates all possible state transitions of a session.\n   Request\
    \ transactions (SE, SA, ST) are denoted by a descriptor of the\n   request message,\
    \ a '/' symbol, and a descriptor of the reply message.\n   Notification transactions\
    \ are denoted just by the a notification\n   descriptor.  For example, a successful\
    \ SE transaction is denoted by\n   'SE/SE', and an AST notification is denoted\
    \ by 'AST'.\n   Initially, all sessions are in state CLOSED.  From there, a\n\
    \   successful SE transaction can change its state either to NOAUTH or to\n  \
    \ OPEN.  From state NOAUTH, a successful SA transaction changes session\n   state\
    \ to OPEN.  A failed SA transaction changes session state from\n   NOAUTH back\
    \ to CLOSED.  Successful ST transactions and AST\n   notifications change sessions\
    \ from state NOAUTH or from state OPEN to\n   state CLOSED.\n   A SIMCO session\
    \ is established in state OPEN, which is the only state\n   in which the middlebox\
    \ accepts requests other than SE, SA, and ST.\n"
- title: 7.2.  Processing SE Requests
  contents:
  - "7.2.  Processing SE Requests\n   The SE request is only applicable if the session\
    \ is in state CLOSED.\n   If a session is in state NOAUTH or OPEN, then the middlebox\
    \ sends a\n   negative reply message of type 'request not applicable' (0x0320)\
    \ to\n   the agent, leaving the state of the session unchanged.\n   Before processing\
    \ the content of the SE request message, the\n   middlebox may check its resources\
    \ and decide that available resources\n   are not sufficient to serve the agent.\
    \  In such a case, the middlebox\n   returns a negative reply of type 'lack of\
    \ resources' (0x0321) and\n   closes the connection.  Furthermore, the middlebox\
    \ may decide to\n   reject the SE request if the selected network connection and\
    \ its\n   protocol specific parameters are not acceptable for the middlebox.\n\
    \   In such a case, the middlebox returns a negative reply of type\n   'transport\
    \ protocol problem' (0x0325) and closes the connection.  The\n   middlebox returns\
    \ a negative reply of type 'security of underlying\n   protocol layers insufficient'\
    \ (0x0326) and closes the connection, if\n   the security properties of the network\
    \ connection do not match the\n   middlebox's requirements.\n   Processing of\
    \ an SE request message starts with checking the major\n   and minor protocol\
    \ version number in the protocol version attribute.\n   If the middlebox does\
    \ not support the specified version number, then\n   the middlebox returns a negative\
    \ reply message of type 'protocol\n   version mismatch' (0x0322) with the protocol\
    \ version attribute\n   indicating a version number that is supported by the middlebox.\n\
    \   After sending this reply, the middlebox closes the connection.\n   If the\
    \ agent is already sufficiently authenticated by means of the\n   underlying network\
    \ connection (for instance, IPsec or TLS), then the\n   middlebox checks whether\
    \ the agent is authorized to configure the\n   middlebox.  If it is not, the middlebox\
    \ returns a negative reply of\n   type 'no authorization' (0x0324) and closes\
    \ the connection.\n   A positive reply on the SE request may be of sub-type SE\
    \ or SA.  An\n   SE request is sent after both parties sufficiently authenticate\
    \ and\n   authorize each other.  An SA reply message is sent if explicit\n   authentication\
    \ is requested by any party.  The agent requests\n   explicit authentication by\
    \ adding an authentication challenge\n   attribute to the SE request message.\
    \  The middlebox requests explicit\n   authentication by returning an SA reply\
    \ message with an\n   authentication challenge attribute to the agent.  If both\
    \ parties\n   request explicit authentication, then the SA reply message contains\n\
    \   both an authentication challenge attribute for the agent and an\n   authentication\
    \ token attribute authenticating the middlebox.\n   If the SE request message\
    \ contains an authentication challenge\n   attribute, then the middlebox checks\
    \ if it can authenticate itself.\n   If yes, it adds a corresponding authentication\
    \ token attribute to the\n   SA reply.  If it cannot authenticate based on the\
    \ authentication\n   challenge attribute, it adds an authentication token attribute\
    \ to the\n   SA reply message with a value field of length zero.\n   If the middlebox\
    \ wants the agent to explicitly authenticate itself,\n   then the middlebox creates\
    \ an authentication challenge attribute for\n   the agent and adds it to the SA\
    \ reply message.\n   If the middlebox replies to the SE request message with an\
    \ SA reply\n   message, then the session state changes from CLOSED to NO_AUTH.\n\
    \   If the SE request message did not contain an authentication challenge\n  \
    \ attribute and if the middlebox does not request the agent to\n   explicitly\
    \ authenticate itself, then the middlebox sends an SE reply\n   message in response\
    \ to the SE request message.  This implies that the\n   session state changes\
    \ from CLOSED to OPEN.\n   The SE reply message contains a capabilities attribute\
    \ describing the\n   middlebox capabilities.\n"
- title: 7.3.  Processing SA Requests
  contents:
  - "7.3.  Processing SA Requests\n   The SA request is only applicable if the session\
    \ is in state NOAUTH.\n   If a session is in state CLOSED or OPEN, then the middlebox\
    \ sends a\n   negative reply message of type 'request not applicable' (0x0320)\
    \ to\n   the agent.  The state of the session remains unchanged.\n   After receiving\
    \ an SA request message in state NOAUTH, the middlebox\n   checks if the agent\
    \ is sufficiently authenticated.  Authentication\n   may be based on an authentication\
    \ token attribute that is optionally\n   contained in the SA request message.\
    \  If the agent is not\n   sufficiently authenticated, then the middlebox returns\
    \ a negative\n   reply of type 'authentication failed' (0x0323) and closes the\n\
    \   connection.\n   If authentication of the agent is successful, the middlebox\
    \ checks if\n   the agent is authorized to configure the middlebox.  If not, the\n\
    \   middlebox returns a negative reply of type 'no authorization'\n   (0x0324)\
    \ and closes the connection.\n   If authorization is successful, then the session\
    \ state changes from\n   NOAUTH to OPEN, and the agent returns an SE reply message\
    \ that\n   concludes session setup.  The middlebox states its capabilities in\n\
    \   the capability attribute contained in the SE reply message.\n"
- title: 7.4.  Processing ST Requests
  contents:
  - "7.4.  Processing ST Requests\n   The ST request is only applicable if the session\
    \ is in state NOAUTH\n   or OPEN.  If a session is in state CLOSED, then the middlebox\
    \ sends a\n   negative reply message of type 'request not applicable' (0x0320)\
    \ to\n   the agent.  The state of the session remains unchanged.\n   The middlebox\
    \ always replies to a correct ST request with a positive\n   ST reply.  The state\
    \ of the session changes from OPEN or from NOAUTH\n   to CLOSED.  After sending\
    \ the ST reply, the middlebox closes the\n   connection.  Requests received after\
    \ receiving the ST request and\n   before closing the connection are ignored by\
    \ the middlebox.\n"
- title: 7.5.  Generating AST Notifications
  contents:
  - "7.5.  Generating AST Notifications\n   At any time, the middlebox may terminate\
    \ an established session and\n   change the session state from OPEN or from NOAUTH\
    \ to CLOSED.  Session\n   termination is indicated to the agent by sending an\
    \ AST notification.\n   Before sending the notification, the middlebox ensures\
    \ that for all\n   requests that have been processed, according replies are returned\
    \ to\n   the agent, such that the agent exactly knows the state of the\n   middlebox\
    \ at the time of session termination.  After sending the AST\n   notification,\
    \ the middlebox sends no more messages to the agent, and\n   it closes the connection.\n"
- title: 7.6.  Session Termination by Interruption of Connection
  contents:
  - "7.6.  Session Termination by Interruption of Connection\n   Section 2.2.4 of\
    \ [RFC3989] describes the session behavior when the\n   network connection is\
    \ interrupted.  The behavior is defined for the\n   middlebox (i.e., the SIMCO\
    \ server) only and does not consider the\n   behavior of the SIMCO agent in such\
    \ an event.\n   If the SIMCO agent detects an interruption of the underlying network\n\
    \   connection, it can terminate the session.  The detection of the\n   interrupted\
    \ network connection can be done by several means, for\n   instance, feedback\
    \ of the operating system or a connection timeout.\n   The definition of this\
    \ detection mechanism is out of the scope of\n   this memo.\n"
- title: 8.  Policy Rule Control Message Processing
  contents:
  - "8.  Policy Rule Control Message Processing\n   For policy rule control and monitoring,\
    \ the agent can send the PRR,\n   PER, PEA, PLC, PRS, and PRL requests.  The middlebox\
    \ then sends a\n   single reply message per request message back to the agent.\n\
    \   Additionally, the middlebox may send unsolicited ARE notifications at\n  \
    \ any time.\n   The transaction semantics of policy rule control messages is\n\
    \   explained in detail in [RFC3989], Section 2.3.\n   For examples about protocol\
    \ operation, see Section 4 of [RFC3989].\n"
- title: 8.1.  Policy Rule State Machine
  contents:
  - "8.1.  Policy Rule State Machine\n   Policy rules are established by successful\
    \ PRR, PEA, or PER\n   transactions.  Each time a policy rule is created, an unused\
    \ policy\n   rule identifier (PID) is assigned to the new policy rule.  For each\n\
    \   policy rule identifier, a state machine exists at the middlebox.  The\n  \
    \ state machine is illustrated by the figure below.\n                        PRR/PRR\
    \       +---------------+\n          +----+    +-----------------+  PID UNUSED\
    \   |<-+\n          |    |    |                 +---------------+  |\n       \
    \   |    v    v        PLC(lt=0)/ ^   |            |\n          |  +-------------+\
    \    PRD     |   | PER/PER    | ARE(lt=0)\n          |  |   RESERVED  +------------+\
    \   |            | PLC(lt=0)/\n          |  +-+----+------+  ARE(lt=0)     v \
    \           |    PRD\n          |    |    |                 +---------------+\
    \  |\n          +----+    +---------------->|    ENABLED    +--+\n        PLC(lt>0)/\
    \    PEA/PER         +-+-------------+\n           PLC                       \
    \   |           ^\n                                        +-----------+\n   \
    \           lt = lifetime             PLC(lt>0)/PLC\n                Figure 42:\
    \ Policy rule state machine\n   The figure illustrates all possible state transitions\
    \ of a PID and\n   its associated policy.  Successful configuration request transactions\n\
    \   (PER, PRR, PEA, PLC) are denoted by a descriptor of the request\n   message,\
    \ a '/' symbol, and a descriptor of the reply message.  Failed\n   configuration\
    \ request transactions are not displayed, because they do\n   not change the PID\
    \ state.  Notification transactions are denoted just\n   by the a notification\
    \ descriptor.  For example, a successful PRR\n   request transaction is denoted\
    \ by 'PRR/PRR', and an ARE notification\n   is denoted by 'ARE'.  For PLC request\
    \ transactions, the descriptor\n   for the request message is extended by an indication\
    \ of the value of\n   the lifetime parameter contained in the message.\n   A successful\
    \ PRR transaction (PRR/PRR) picks a PID in state UNUSED\n   and changes the state\
    \ to RESERVED.  A successful PER transitions\n   picks a PID in state UNUSED and\
    \ changes the state to ENABLED.  A PID\n   in state RESERVED is changed to ENABLED\
    \ by a successful PEA\n   transaction.  In state RESERVED or UNUSED, a successful\
    \ PLC\n   transaction with a lifetime parameter greater than zero does not\n \
    \  change the PID's state.  A successful PLC transaction with a lifetime\n   parameter\
    \ equal to zero changes the state of a PID from RESERVED to\n   UNUSED or from\
    \ ENABLED to UNUSED.\n   A failed request transaction does not change state at\
    \ the middlebox.\n   An ARE notification transaction with the lifetime attribute\
    \ set to\n   zero has the same effect as a successful PLC transaction with a\n\
    \   lifetime parameter equal to zero.\n"
- title: 8.2.  Processing PRR Requests
  contents:
  - "8.2.  Processing PRR Requests\n   Processing PRR requests is much simpler on\
    \ pure firewalls than on\n   middleboxes with NAT functions.  Therefore, this\
    \ section has three\n   sub-sections: The first one describes initial checks that\
    \ are\n   performed in any case.  The second sub-section describes processing\n\
    \   of PRR requests on pure firewalls, and the third one describes\n   processing\
    \ on all devices with NAT functions.\n"
- title: 8.2.1.  Initial Checks
  contents:
  - "8.2.1.  Initial Checks\n   When a middlebox receives a PRR request message, it\
    \ first checks if\n   the authenticated agent is authorized for requesting reservations.\n\
    \   If not, it returns a negative reply message of type 'agent not\n   authorized\
    \ for this transaction' (0x0341).\n   If the request contains the optional group\
    \ identifier, then the\n   middlebox checks if the group already exists.  If not,\
    \ the middlebox\n   returns a negative reply message of type 'specified policy\
    \ rule group\n   does not exist' (0x0344).\n   If the request contains the optional\
    \ group identifier, then the\n   middlebox checks if the authenticated agent is\
    \ authorized for adding\n   members to this group.  If not, the middlebox returns\
    \ a negative\n   reply message of type 'not authorized for accessing specified\
    \ group'\n   (0x0346).\n   The middlebox may then check the PRR parameter set.\
    \  A negative reply\n   of type 'IP version mismatch' (0x034F) is returned if\
    \ the IPi field\n   does not match the inside IP version of the address at the\
    \ middlebox.\n   A negative reply of type 'IP version mismatch' (0x034F) is returned\n\
    \   if the IPo field does not match the outside IP version of the address\n  \
    \ at the middlebox.  The requested transport protocol type is checked,\n   and\
    \ a negative reply of type 'protocol type not supported' (0x0354)\n   is returned\
    \ if it is not supported.  The middlebox may return a\n   negative reply of type\
    \ 'requested address space not available'\n   (0x0347) if the requested address\
    \ space is completely blocked or not\n   supported by the middlebox in any way;\
    \ for example, if a UDP port\n   number is requested and all UDP packets are blocked\
    \ by a middlebox\n   acting as firewall.\n   The latter check at the middlebox\
    \ is optional.  If the check would\n   fail and is not performed at this transaction,\
    \ then two superfluous\n   transactions will follow.  First, the agent will send\
    \ a request\n   message for a corresponding PER transaction and will receive a\n\
    \   negative reply on this.  Second, either the agent will send a\n   corresponding\
    \ PLC request message with lifetime set to zero in order\n   to delete the reservation,\
    \ or the reservation will time out and the\n   middlebox will send an ARE notification\
    \ message with the lifetime\n   attribute set to zero.  Both transactions can\
    \ be avoided if the\n   middlebox initially performs this check.\n   A reason\
    \ for avoiding this check might be its complexity.  If the\n   check is passed,\
    \ the same check will have to be performed again for a\n   subsequent corresponding\
    \ PEA request.  If processing two more\n   transactions is considered to consume\
    \ less resources than performing\n   the check twice, it might be desirable not\
    \ to perform it during the\n   PRR transaction.\n   After checking the PRR parameter\
    \ set, the middlebox chooses a\n   lifetime value for the new policy rule to be\
    \ created, which is\n   greater than or equal to zero and less than or equal to\
    \ the minimum\n   of the requested value and the maximum lifetime specified by\
    \ the\n   middlebox capabilities attribute at session setup.  Formally, the\n\
    \   lifetime is chosen such that\n         0 <= lt_granted <= MINIMUM(lt_requested,\
    \ lt_maximum)\n   holds, where 'lt_granted' is the actual lifetime chosen by the\n\
    \   middlebox, 'lt_requested' is the lifetime requested by the agent, and\n  \
    \ 'lt_maximum' is the maximum lifetime specified during capability\n   exchange\
    \ at session setup.\n   If there are further sessions in state OPEN with authenticated\
    \ agents\n   authorized to access the policy rule, then to each of these agents\
    \ a\n   corresponding ARE notification with lifetime set to lt_granted is\n  \
    \ sent.\n   If the chosen lifetime is zero, the middlebox sends a negative reply\n\
    \   of type 'middlebox configuration failed' (0x034A) to the agent.\n"
- title: 8.2.2.  Processing on Pure Firewalls
  contents:
  - "8.2.2.  Processing on Pure Firewalls\n   If the middlebox is configured as a\
    \ pure firewall, then it accepts\n   the request after the initial checks.  It\
    \ establishes a new policy\n   reserve rule and assigns to it a policy rule identifier\
    \ in state\n   RESERVED.  It generates a positive PRR reply and sets the attributes\n\
    \   as specified below.  No configuration of the firewall function is\n   required.\n\
    \   The identifier chosen for the new policy rule is reported in the\n   policy\
    \ rule identifier attribute of the PRR reply.\n   If a group identifier attribute\
    \ is contained in the PRR request, then\n   the middlebox adds the new policy\
    \ rule to the members of this group.\n   If the PRR request does not contain a\
    \ group identifier attribute,\n   then the middlebox creates a new group with\
    \ the new policy rule as\n   the only member.  In any case, the middlebox reports\
    \ the group of\n   which the new policy rule is a member in the group identifier\n\
    \   attribute of the PRR reply.\n   The chosen lifetime is reported in the lifetime\
    \ attribute of the PRR\n   reply.\n   In the address tuple (outside) attribute\
    \ of the PRR reply, the first\n   parameter field is set to 'protocols only' (0x1).\
    \  Consequently, the\n   attribute has a length of 32 bits.  The IP version parameter\
    \ field is\n   set according to the IPo parameter field in the PRR parameter set\n\
    \   attribute of the PRR request message.  The prefix length parameter\n   field\
    \ is set to 0x00, and the transport protocol parameter field in\n   the address\
    \ tuple (outside) attribute of the PRR reply is set\n   identically to the transport\
    \ protocol attribute in the PRR parameter\n   set attribute of the PRR request\
    \ message.  The location parameter\n   field is set to 'outside' (0x02).\n"
- title: 8.2.3.  Processing on Network Address Translators
  contents:
  - "8.2.3.  Processing on Network Address Translators\n   If the middlebox is configured\
    \ as a Network Address Translator (NAT),\n   then it tries to reserve a NAT binding.\n\
    \   The middlebox first checks the PRR parameter set further if the NM\n   (NAT\
    \ mode) parameter matches its configuration.  A negative reply of\n   type 'NAT\
    \ mode not supported' (0x034E) is returned by the middlebox\n   if the configuration\
    \ is not matched.\n   The following actions are performed, depending on the middlebox\
    \ NAT\n   type:\n     - traditional NAT\n       A NAT binding at the outside (A2)\
    \ with the requested transport\n       protocol, external IP version, port range,\
    \ and port parity is\n       reserved.\n     - twice NAT\n       A NAT binding\
    \ at the outside (A2) with the requested transport\n       protocol, external\
    \ IP version, port range, and port parity is\n       reserved.  Furthermore, the\
    \ middlebox reserves an inside (A1) NAT\n       binding with the requested transport\
    \ protocol, internal IP\n       version, port range, and port parity.\n   The\
    \ identifier chosen for the new policy rule is reported in the\n   policy rule\
    \ identifier attribute of the PRR reply.\n   After the checks are successfully\
    \ performed, the middlebox\n   establishes a new policy reserve rule, with the\
    \ requested PRR\n   parameter set, and assigns to it a policy rule identifier\
    \ in state\n   RESERVED.  It generates a positive PRR reply and sets the attributes\n\
    \   as specified below.\n   If a group identifier attribute is contained in the\
    \ PRR request, then\n   the middlebox adds the new policy rule to the members\
    \ of this group.\n   If the PRR request does not contain a group identifier attribute,\n\
    \   then the middlebox creates a new group with the new policy rule as\n   the\
    \ only member.  In any case, the middlebox reports the group of\n   which the\
    \ new policy rule is a member in the group identifier\n   attribute of the PRR\
    \ reply.\n   The chosen lifetime is reported in the lifetime attribute of the\
    \ PRR\n   reply.\n   In the address tuple (outside) attribute of the PRR reply,\
    \ the first\n   parameter field is set to 'full addresses' (0x0).  The location\n\
    \   parameter field is set to 'outside' (0x02).  The IP version parameter\n  \
    \ field is set according to the IPo parameter field in the PRR\n   parameter set\
    \ attribute of the PRR request message.  For IPv4\n   addresses, the prefix length\
    \ field is set to 0x20 to indicate a full\n   address, and the reserved outside\
    \ IPv4 address is set in the address\n   field.  For IPv6 addresses, the prefix\
    \ length field is set to 0x80 to\n   indicate a full address, and the reserved\
    \ outside IPv6 address is set\n   in the address field.  The transport protocol\
    \ parameter field in the\n   address tuple (outside) attribute of the PRR reply\
    \ is set identically\n   to the transport protocol attribute in the PRR parameter\
    \ set\n   attribute of the PRR request message.  The reserved outside base port\n\
    \   number (i.e., the lowest port number of the allocated range) is\n   stored\
    \ in the port number parameter field, and the allocated port\n   range is stored\
    \ in the port range parameter field.\n   If the NM (NAT mode) parameter in the\
    \ PRR parameter set attribute of\n   the PRR request message has the value 'traditional',\
    \ then the PRR\n   reply message does not contain an address tuple (inside) attribute.\n\
    \   If otherwise (it has the value 'twice'), then the PRR reply message\n   contains\
    \ an address tuple (inside) attribute.  In the address tuple\n   (inside) attribute\
    \ of the PRR reply, the first parameter field is set\n   to 'full addresses' (0x0).\
    \  The location parameter field is set to\n   'inside' (0x01).  The IP version\
    \ parameter field is set according to\n   the IPi parameter field in the PRR parameter\
    \ set attribute of the PRR\n   request message.  For IPv4 addresses, the prefix\
    \ length field is set\n   to 0x20 to indicate a full address, and the reserved\
    \ inside IPv4\n   address is set in the address field.  For IPv6 addresses, the\
    \ prefix\n   length field is set to 0x80 to indicate a full address, and the\n\
    \   reserved inside IPv6 address is set in the address field.  The\n   transport\
    \ protocol parameter field in the address tuple (inside)\n   attribute of the\
    \ PRR reply is set identically to the transport\n   protocol attribute in the\
    \ PRR parameter set attribute of the PRR\n   request message.  The reserved inside\
    \ base port number (i.e., the\n   lowest port number of the allocated range) is\
    \ stored in the port\n   number parameter field, and the allocated port range\
    \ is stored in the\n   port range parameter field.\n"
- title: 8.3.  Processing PER Requests
  contents:
  - "8.3.  Processing PER Requests\n   Processing PER requests is much simpler on\
    \ pure firewalls than on\n   middleboxes with NAT functions.  Therefore, this\
    \ section has three\n   sub-sections: The first one describes initial checks that\
    \ are\n   performed in any case.  The second sub-section describes processing\n\
    \   of PER requests on pure firewalls, and the third one describes\n   processing\
    \ on all devices with NAT functions.\n"
- title: 8.3.1.  Initial Checks
  contents:
  - "8.3.1.  Initial Checks\n   When a middlebox receives a PER request message, it\
    \ first checks if\n   the authenticated agent is authorized for requesting middlebox\n\
    \   configurations for enabling communication.  If not, it returns a\n   negative\
    \ reply message of type 'agent not authorized for this\n   transaction' (0x0341).\n\
    \   If the request contains the optional group identifier, then the\n   middlebox\
    \ checks if the group already exists.  If not, the middlebox\n   returns a negative\
    \ reply message of type 'specified policy rule group\n   does not exist' (0x0344).\n\
    \   If the request contains the optional group identifier, then the\n   middlebox\
    \ checks if the authenticated agent is authorized for adding\n   members to this\
    \ group.  If not, the middlebox returns a negative\n   reply message of type 'not\
    \ authorized for accessing specified group'\n   (0x0346).\n   Then the middlebox\
    \ checks the contained address tuple attributes.\n   If the first one does not\
    \ have the location parameter field set to\n   'internal' (0x00), or if the second\
    \ one does not have the location\n   parameter field set to 'external' (0x03),\
    \ then the middlebox returns\n   a negative reply message of type 'inconsistent\
    \ request' (0x034B).\n   If the transport protocol parameter field does not have\
    \ the same\n   value in both address tuple attributes, then the middlebox returns\
    \ a\n   negative reply message of type 'inconsistent request' (0x034B).\n   If\
    \ both address tuple attributes contain a port range parameter\n   field, if both\
    \ port range parameter fields have values not equal to\n   0xFFFF, and if the\
    \ values of both port range parameter fields are\n   different, then the middlebox\
    \ returns a negative reply message of\n   type 'inconsistent request' (0x034B).\n\
    \   Then the agent checks if wildcarding is requested and if the\n   requested\
    \ wildcarding is supported by the middlebox.  Wildcarding\n   support may be different\
    \ for internal address tuples and external\n   address tuples.  The following\
    \ parameter fields of the address tuple\n   attribute can indicate wildcarding:\n\
    \     - the first parameter field\n       If it is set to 'protocols only' (0x1),\
    \ then IP addresses and\n       port numbers are completely wildcarded.\n    \
    \ - the transport protocol field\n       If it is set to 0x00, then the transport\
    \ protocol is completely\n       wildcarded.  Please note that a completely wildcarded\
    \ transport\n       protocol might still support only a limited set of transport\n\
    \       protocols according to the capabilities of the middlebox.  For\n     \
    \  example, a typical NAT implementation may apply transport\n       wildcarding\
    \ to UDP and TCP transport only.  Wildcarding the\n       transport protocol implies\
    \ wildcarding of port numbers.  If this\n       field is set to 0x00, then the\
    \ values of the port number field\n       and the port range field are irrelevant.\n\
    \     - the prefix length field\n       If the IP version number field indicates\
    \ IPv4 and the value of\n       this field is less than 0x20, then IP addresses\
    \ are wildcarding\n       according to this prefix length.  If the IP version\
    \ number field\n       indicates IPv6 and the value of this field is less than\
    \ 0x80,\n       then IP addresses are wildcarding according to this prefix\n \
    \      length.  If the first parameter field is set to 'protocols only'\n    \
    \   (0x1), then the value of the prefix length field is irrelevant.\n     - the\
    \ port number field\n       If it is set to zero, then port numbers are completely\n\
    \       wildcarded.  In this case, the value of the port range field is\n    \
    \   irrelevant.\n   If any of these kinds of wildcarding is used, and if this\
    \ is in\n   conflict with wildcarding support for internal or external addresses\n\
    \   of the middlebox, then the middlebox returns a negative reply message\n  \
    \ of type 'requested wildcarding not supported' (0x034C).\n   Please note that\
    \ the port range field cannot be used for wildcarding.\n   If it is set to a value\
    \ greater than one, then middlebox\n   configuration is requested for all port\
    \ numbers in the interval\n   starting with the specified port number and containing\
    \ as many\n   consecutive port numbers as specified by the parameter.\n   If the\
    \ direction parameter field in the PER parameter set attribute\n   has the value\
    \ 'bi-directional', then only transport protocol\n   wildcarding is allowed. \
    \ If any other kind of wildcarding is\n   specified in one or both of the IP address\
    \ tuple attributes, then the\n   middlebox returns a negative reply message of\
    \ type 'inconsistent\n   request' (0x034B).\n   If the PER request conflicts with\
    \ any policy disable rule (see\n   Section 8.8.1), then the middlebox returns\
    \ a negative reply message\n   of type 'conflict with existing rule' (0x0350).\n\
    \   After checking the address tuple attributes, the middlebox chooses a\n   lifetime\
    \ value for the new policy rule to be created, which is\n   greater than or equal\
    \ to zero and less than or equal to the minimum\n   of the requested value and\
    \ the maximum lifetime specified by the\n   middlebox capabilities attribute at\
    \ session setup.  Formally, the\n   lifetime is chosen such that\n         0 <=\
    \ lt_granted <= MINIMUM(lt_requested, lt_maximum)\n   holds, where 'lt_granted'\
    \ is the actual lifetime chosen by the\n   middlebox, 'lt_requested' is the lifetime\
    \ requested by the agent, and\n   'lt_maximum' is the maximum lifetime specified\
    \ during capability\n   exchange at session setup.\n   If there are further sessions\
    \ in state OPEN with authenticated agents\n   authorized to access the policy\
    \ rule, then to each of these agents a\n   corresponding ARE notification with\
    \ lifetime set to lt_granted is\n   sent.\n   If the chosen lifetime is zero,\
    \ the middlebox sends a negative reply\n   of type 'middlebox configuration failed'\
    \ (0x034A) to the agent.\n"
- title: 8.3.2.  Processing on Pure Firewalls
  contents:
  - "8.3.2.  Processing on Pure Firewalls\n   If the middlebox is acting as a pure\
    \ firewall, then it tries to\n   configure the requested pinhole.  The firewall\
    \ configuration ignores\n   the port parity parameter field in the PER parameter\
    \ set attribute,\n   but it considers the direction parameter field in this attribute.\n\
    \   The pinhole is configured such that communication between the\n   specified\
    \ internal and external address tuples is enabled in the\n   specified direction\
    \ and covering the specified wildcarding.  If the\n   configuration fails (for\
    \ example, because the pinhole would conflict\n   with high-level firewall policies),\
    \ then the middlebox returns a\n   negative reply message of type 'middlebox configuration\
    \ failed'\n   (0x034A).\n   If the configuration was successful, the middlebox\
    \ establishes a new\n   policy enable rule and assigns to it a policy rule identifier\
    \ in\n   state ENABLED.  It generates a positive PER reply and sets the\n   attributes\
    \ as specified below.\n   The identifier chosen for the new policy rule is reported\
    \ in the\n   policy rule identifier attribute of the PER reply.\n   If a group\
    \ identifier attribute is contained in the PER request, then\n   the middlebox\
    \ adds the new policy rule to the members of this group.\n   If the PRR request\
    \ does not contain a group identifier attribute,\n   then the middlebox creates\
    \ a new group with the new policy rule as\n   the only member.  In any case, the\
    \ middlebox reports the group of\n   which the new policy rule is a member in\
    \ the group identifier\n   attribute of the PER reply.\n   The chosen lifetime\
    \ is reported in the lifetime attribute of the PER\n   reply.\n   The address\
    \ tuple (internal) attribute of the PER request is reported\n   as address tuple\
    \ (outside) attribute of the PER reply.  The address\n   tuple (external) attribute\
    \ of the PER request is reported as address\n   tuple (inside) attribute of the\
    \ PER reply.\n"
- title: 8.3.3.  Processing on Network Address Translators
  contents:
  - "8.3.3.  Processing on Network Address Translators\n   If the middlebox is configured\
    \ as a NAT, then it tries to configure\n   the requested NAT binding.  The actions\
    \ taken by the NAT are quite\n   similar to the actions of the Policy Reserve\
    \ Rule (PRR) request, but\n   in the PER request a NAT binding is enabled.\n \
    \  The following actions are performed, depending on the middlebox NAT\n   type:\n\
    \     - traditional NAT\n       A NAT binding is established between the internal\
    \ and external\n       address tuple with the requested transport protocol, port\
    \ range,\n       direction, and port parity.  The outside address tuple is\n \
    \      created.\n     - twice NAT\n       A NAT binding is established between\
    \ the internal and external\n       address tuple with the requested transport\
    \ protocol, port range,\n       and port parity.  But two address tuples are created:\
    \ an outside\n       address tuple and an inside address tuple.\n   Should the\
    \ configuration fail in either NAT case, a negative reply\n   'middlebox configuration\
    \ failed' (0x034A) is returned.\n   If the configuration was successful, the middlebox\
    \ establishes a new\n   policy enable rule and assigns to it a policy rule identifier\
    \ in\n   state ENABLED.  It generates a positive PER reply and sets the\n   attributes\
    \ as specified below.\n   The identifier chosen for the new policy rule is reported\
    \ in the\n   policy rule identifier attribute of the PER reply.\n   If a group\
    \ identifier attribute is contained in the PER request, then\n   the middlebox\
    \ adds the new policy rule to the members of this group.\n   If the PRR request\
    \ does not contain a group identifier attribute,\n   then the middlebox creates\
    \ a new group with the new policy rule as\n   the only member.  In any case, the\
    \ middlebox reports the group of\n   which the new policy rule is a member in\
    \ the group identifier\n   attribute of the PER reply.\n   The chosen lifetime\
    \ is reported in the lifetime attribute of the PER\n   reply.\n   In the address\
    \ tuple (outside) attribute of the PER reply, the first\n   parameter field is\
    \ set to 'full addresses' (0x0).  The location\n   parameter field is set to 'outside'\
    \ (0x02).  The IP version parameter\n   field is set according to the IP version\
    \ parameter field in the PER\n   parameter set attribute of the PER request message.\
    \  For IPv4\n   addresses, the prefix length field is set to 0x20 to indicate\
    \ a full\n   address, and the reserved outside IPv4 address is set in the address\n\
    \   field.  For IPv6 addresses, the prefix length field is set to 0x80 to\n  \
    \ indicate a full address, and the reserved outside IPv6 address is set\n   in\
    \ the address field.  The transport protocol parameter field in the\n   address\
    \ tuple (outside) attribute of the PER reply is set identically\n   to the transport\
    \ protocol attribute in the PER parameter set\n   attribute of the PER request\
    \ message.  The reserved outside base port\n   number (i.e., the lowest port number\
    \ of the allocated range) is\n   stored in the port number parameter field, and\
    \ the allocated port\n   range is stored in the port range parameter field.\n\
    \   The address tuple (inside) is only returned if the middlebox is a\n   twice\
    \ NAT; otherwise, it is omitted.  In the address tuple (inside)\n   attribute\
    \ of the PER reply, the first parameter field is set to 'full\n   addresses' (0x0).\
    \  The location parameter field is set to 'inside'\n   (0x01).  The IP version\
    \ parameter field is set according to the IP\n   version parameter field in the\
    \ PER parameter set attribute of the PER\n   request message.  For IPv4 addresses,\
    \ the prefix length field is set\n   to 0x20 to indicate a full address, and the\
    \ reserved inside IPv4\n   address is set in the address field.  For IPv6 addresses,\
    \ the prefix\n   length field is set to 0x80 to indicate a full address, and the\n\
    \   reserved inside IPv6 address is set in the address field.  The\n   transport\
    \ protocol parameter field in the address tuple (inside)\n   attribute of the\
    \ PER reply is set identically to the transport\n   protocol attribute in the\
    \ PER parameter set attribute of the PER\n   request message.  The reserved inside\
    \ base port number (i.e., the\n   lowest port number of the allocated range) is\
    \ stored in the port\n   number parameter field, and the allocated port range\
    \ is stored in the\n   port range parameter field.\n"
- title: 8.3.4.  Processing on Combined Firewalls and NATs
  contents:
  - "8.3.4.  Processing on Combined Firewalls and NATs\n   Middleboxes that are combinations\
    \ of firewalls and NATs are\n   configured in such a way that first the NAT bindings\
    \ are configured\n   and afterwards the firewall pinholes.  This sequence is needed\
    \ since\n   the firewall rules must be configured according to the outside\n \
    \  address tuples and for twice NATs the inside address tuples as well.\n   This\
    \ aspect of middlebox operation may be irrelevant to SIMCO, since\n   some NATs\
    \ already do firewall configuration on their own.\n"
- title: 8.4.  Processing PEA Requests
  contents:
  - "8.4.  Processing PEA Requests\n   Processing PEA requests is much simpler on\
    \ pure firewalls than on\n   middleboxes with NAT functions.  Therefore, this\
    \ section has three\n   sub-sections: The first one describes initial checks that\
    \ are\n   performed in any case.  The second sub-section describes processing\n\
    \   of PEA requests on pure firewalls, and the third one describes\n   processing\
    \ on all devices with NAT functions.\n"
- title: 8.4.1.  Initial Checks
  contents:
  - "8.4.1.  Initial Checks\n   When a middlebox receives a PEA request message, it\
    \ first checks if\n   the authenticated agent is authorized for requesting middlebox\n\
    \   configurations for enabling communication.  If not, it returns a\n   negative\
    \ reply message of type 'agent not authorized for this\n   transaction' (0x0341).\n\
    \   Then the middlebox checks the policy rule identifier attribute\n   contained\
    \ in the PEA message.  If no policy rule with this identifier\n   exists, then\
    \ the middlebox returns a negative reply message of type\n   'specified policy\
    \ rule does not exist' (0x0343).  If there exists a\n   policy with this identifier\
    \ and if it is in a state other than\n   RESERVED, then the middlebox returns\
    \ a negative reply message of type\n   'inconsistent request' (0x034B).\n   If\
    \ a policy rule with this identifier exists, but the authenticated\n   agent is\
    \ not authorized for terminating this policy reserve rule,\n   then the middlebox\
    \ returns a negative reply message of type 'agent\n   not authorized for accessing\
    \ this policy' (0x0345).\n   Then the middlebox checks the contained address tuple\
    \ attributes.\n   If the first one does not have the location parameter field\
    \ set to\n   'internal' (0x00) or if the second one does not have the location\n\
    \   parameter field set to 'external' (0x03), then the middlebox returns\n   a\
    \ negative reply message of type 'inconsistent request' (0x034B).\n   If the transport\
    \ protocol parameter field does not have the same\n   value in both address tuple\
    \ attributes, then the middlebox returns a\n   negative reply message of type\
    \ 'inconsistent request' (0x034B).\n   If both address tuple attributes contain\
    \ a port range parameter\n   field, if both port range parameter fields have values\
    \ not equal to\n   0xFFFF, and if the values of both port range parameter fields\
    \ are\n   different, then the middlebox returns a negative reply message of\n\
    \   type 'inconsistent request' (0x034B).\n   Then the agent checks if wildcarding\
    \ is requested and if the\n   requested wildcarding is supported by the middlebox.\
    \  Wildcarding\n   support may be different for internal address tuples and external\n\
    \   address tuples.  The following parameter fields of the address tuple\n   attribute\
    \ can indicate wildcarding:\n     - the first parameter field\n       If it is\
    \ set to 'protocols only' (0x1), then IP addresses and\n       port numbers are\
    \ completely wildcarded.\n     - the transport protocol field\n       If it is\
    \ set to 0x00, then IP the transport protocol is\n       completely wildcarded.\
    \  Please note that a completely wildcarded\n       transport protocol might still\
    \ support only a limited set of\n       transport protocols according to the capabilities\
    \ of the\n       middlebox.  For example, a typical NAT implementation may apply\n\
    \       transport wildcarding to UDP and TCP transport only.\n     - the prefix\
    \ length field\n       If the IP version number field indicates IPv4 and the value\
    \ of\n       this field is less than 0x20, then IP addresses are wildcarding\n\
    \       according to this prefix length.  If the IP version number field\n   \
    \    indicates IPv6 and the value of this field is less than 0x80,\n       then\
    \ IP addresses are wildcarding according to this prefix\n       length.  If the\
    \ first parameter field is set to 'protocols only'\n       (0x1), then the value\
    \ of the prefix length field is irrelevant.\n     - the port number field\n  \
    \     If it is set to zero, then port numbers are completely\n       wildcarded.\n\
    \     - the port range field\n       If it is set to a value greater than one,\
    \ then port numbers are\n       wildcarded within an interval starting with the\
    \ specified port\n       number and containing as many consecutive port numbers\
    \ as\n       specified by the parameter.\n   If any of these kinds of wildcarding\
    \ is used, and if this is in\n   conflict with wildcarding support for internal\
    \ or external addresses\n   of the middlebox, then the middlebox returns a negative\
    \ reply message\n   of type 'requested wildcarding not supported' (0x034C).\n\
    \   If the PEA request conflicts with any policy disable rule (see\n   Section\
    \ 8.8.1), then the middlebox returns a negative reply message\n   of type 'conflict\
    \ with existing rule' (0x0350).\n   After checking the address tuple attributes,\
    \ the middlebox chooses a\n   lifetime value for the new policy enable rule to\
    \ be created, which is\n   greater than or equal to zero and less than or equal\
    \ to the minimum\n   of the requested value and the maximum lifetime specified\
    \ by the\n   middlebox capabilities attribute at session setup.  Formally, the\n\
    \   lifetime is chosen such that\n         0 <= lt_granted <= MINIMUM(lt_requested,\
    \ lt_maximum)\n   holds, where 'lt_granted' is the actual lifetime chosen by the\n\
    \   middlebox, 'lt_requested' is the lifetime requested by the agent, and\n  \
    \ 'lt_maximum' is the maximum lifetime specified during capability\n   exchange\
    \ at session setup.\n   If there are further sessions in state OPEN with authenticated\
    \ agents\n   authorized to access the policy rule, then to each of these agents\
    \ a\n   corresponding ARE notification with lifetime set to lt_granted is\n  \
    \ sent.\n   If the chosen lifetime is zero, the middlebox sends a negative reply\n\
    \   of type 'middlebox configuration failed' (0x034A) to the agent.\n"
- title: 8.4.2.  Processing on Pure Firewalls
  contents:
  - "8.4.2.  Processing on Pure Firewalls\n   If the middlebox is configured as a\
    \ pure firewall, then it tries to\n   configure the requested pinhole.  The firewall\
    \ configuration ignores\n   the port parity parameter field in the PER parameter\
    \ set attribute,\n   but it considers the direction parameter field in this attribute.\n\
    \   The pinhole is configured such that communication between the\n   specified\
    \ internal and external address tuples is enabled in the\n   specified direction\
    \ and covering the specified wildcarding.  If the\n   configuration fails, then\
    \ the middlebox returns a negative reply\n   message of type 'middlebox configuration\
    \ failed' (0x034A).\n   If the configuration was successful, the middlebox replaces\
    \ the\n   policy reserve rule referenced by the policy rule identifier\n   attribute\
    \ in the PEA request message with a new policy enable rule.\n   The policy enable\
    \ rule re-uses the policy rule identifier of the\n   replaced policy reserve rule.\
    \  The state of the policy rule\n   identifier changes from RESERVED to ENABLED.\
    \  The policy reserve rule\n   is a member of the same group as the replaced policy\
    \ reserve rule\n   was.\n   Then the middlebox generates a positive PER reply\
    \ and sets the\n   attributes as specified below.\n   The identifier chosen for\
    \ the new policy rule is reported in the\n   policy rule identifier attribute\
    \ of the PER reply.\n   The group identifier is reported in the group identifier\
    \ attribute of\n   the PER reply.\n   The chosen lifetime is reported in the lifetime\
    \ attribute of the PER\n   reply.\n   The address tuple (internal) attribute of\
    \ the PER request is reported\n   as the address tuple (outside) attribute of\
    \ the PER reply.  The\n   address tuple (external) attribute of the PER request\
    \ is reported as\n   the address tuple (inside) attribute of the PER reply.\n"
- title: 8.4.3.  Processing on Network Address Translators
  contents:
  - "8.4.3.  Processing on Network Address Translators\n   If the middlebox is configured\
    \ as a NAT, then it tries to configure\n   the requested NAT binding, i.e., enabling\
    \ the already reserved\n   binding.  The already reserved NAT binding from the\
    \ PRR request is\n   now enabled in the middlebox.\n   If the enable configuration\
    \ was successful, the middlebox replaces\n   the policy reserve rule referenced\
    \ by the policy rule identifier\n   attribute in the PEA request message with\
    \ a new policy enable rule.\n   The policy enable rule re-uses the policy rule\
    \ identifier of the\n   replaced policy reserve rule.  The state of the policy\
    \ rule\n   identifier changes from RESERVED to ENABLED.  The policy reserve rule\n\
    \   is a member of the same group as the replaced policy reserve rule\n   was.\n\
    \   Then the middlebox generates a positive PER reply and sets the\n   attributes\
    \ as specified below.\n   The reserved outside address tuple is reported as the\
    \ address tuple\n   (outside) attribute of the PER reply.  The reserved inside\
    \ address\n   tuple is reported as the address tuple (inside) attribute of the\
    \ PER\n   reply.  Both reserved outside and inside address tuples are taken\n\
    \   from the reserve policy rule generated during the PRR transaction.\n"
- title: 8.5.  Processing PLC Requests
  contents:
  - "8.5.  Processing PLC Requests\n   When a middlebox receives a PLC request message,\
    \ it first checks if\n   the authenticated agent is authorized for requesting\
    \ policy rule\n   lifetime changes.  If not, it returns a negative reply message\
    \ of\n   type 'agent not authorized for this transaction' (0x0341).\n   Then the\
    \ middlebox checks the policy rule identifier attribute\n   contained in the PLC\
    \ message.  If no policy rule with this identifier\n   exists, then the middlebox\
    \ returns a negative reply message of type\n   'specified policy rule does not\
    \ exist' (0x0343).\n   If a policy rule with this identifier exists, but the authenticated\n\
    \   agent is not authorized for changing the lifetime of this policy\n   rule,\
    \ then the middlebox returns a negative reply message of type\n   'agent not authorized\
    \ for accessing this policy' (0x0345).\n   Then the middlebox chooses a lifetime\
    \ value for the new policy rule,\n   which is greater than zero and less than\
    \ or equal to the minimum of\n   the requested value and the maximum lifetime\
    \ specified by the\n   middlebox capabilities attribute at session setup.  Formally,\
    \ the\n   lifetime is chosen such that\n         0 <= lt_granted <= MINIMUM(lt_requested,\
    \ lt_maximum)\n   holds, where 'lt_granted' is the actual lifetime chosen by the\n\
    \   middlebox, 'lt_requested' is the lifetime requested by the agent, and\n  \
    \ 'lt_maximum' is the maximum lifetime specified during capability\n   exchange\
    \ at session setup.  This procedure implies that the chosen\n   lifetime is zero\
    \ if the requested lifetime is zero.\n   If the chosen lifetime is greater than\
    \ zero, the middlebox changes\n   the lifetime of the policy rule to the chosen\
    \ value and generates a\n   PLC reply message.  The chosen lifetime is reported\
    \ in the lifetime\n   attribute of the message.\n   If otherwise (the chosen lifetime\
    \ is zero), then the middlebox\n   terminates the policy rule and changes the\
    \ PID state from ENABLED or\n   RESERVED, respectively, to UNUSED.\n   The middlebox\
    \ generates a PRD reply message and sends it to the\n   requesting agent.  If\
    \ there are further sessions in state OPEN with\n   authenticated agents authorized\
    \ to access the policy rule, then to\n   each of these agents a corresponding\
    \ ARE notification with lifetime\n   set to zero is sent.\n"
- title: 8.6.  Processing PRS Requests
  contents:
  - "8.6.  Processing PRS Requests\n   When a middlebox receives a PRS request message,\
    \ it first checks if\n   the authenticated agent is authorized for receiving policy\
    \ status\n   information.  If not, it returns a negative reply message of type\n\
    \   'agent not authorized for this transaction' (0x0341).\n   Then the middlebox\
    \ checks the policy rule identifier attribute\n   contained in the PRS message.\
    \  If no policy rule with this identifier\n   exists in state RESERVED or ENABLED,\
    \ then the middlebox returns a\n   negative reply message of type 'specified policy\
    \ rule does not exist'\n   (0x0343).\n   If a policy rule with this identifier\
    \ exists, but the authenticated\n   agent is not authorized to receive status\
    \ information for this policy\n   rule, then the middlebox returns a negative\
    \ reply message of type\n   'agent not authorized for accessing this policy' (0x0345).\n\
    \   If the checks described above are passed, the middlebox accepts the\n   requests\
    \ and generates a reply.  If the policy rule for which status\n   information\
    \ is requested is in state RESERVED, then a PRS reply is\n   generated and sent\
    \ to the agent.  If otherwise (the policy rule is in\n   state ENABLED), then\
    \ a PES reply is generated and sent to the agent.\n   For policy disable rules,\
    \ a PDS reply is generated and sent to the\n   agent.\n   In both message formats,\
    \ the lifetime attribute reports the current\n   remaining lifetime of the policy\
    \ rule, and the owner attribute\n   reports the owner of the policy rule for which\
    \ status information is\n   requested.\n   The PRS reply message format is identical\
    \ to the PRR reply message\n   format except for an appended owner attribute.\
    \  In the PRS reply, the\n   attributes that are common with the PRR reply (except\
    \ for the\n   lifetime attribute) have exactly the same values as the corresponding\n\
    \   attributes of the PRR reply that was sent as part of the PRR\n   transaction\
    \ that established the policy reserve rule.\n   In the PES reply message, the\
    \ PER parameter set attribute, the\n   address tuple (internal) attribute, and\
    \ the address tuple (external)\n   attribute have exactly the same values as the\
    \ corresponding\n   attributes of the PER or PEA request that were sent as part\
    \ of the\n   corresponding transaction that established the policy enable rule.\n\
    \   In the PES reply message, the policy rule identifier attribute, the\n   group\
    \ identifier attribute, the address tuple (inside) attribute, and\n   the address\
    \ tuple (outside) attribute have exactly the same values as\n   the corresponding\
    \ attributes of the PER reply that was sent as part\n   of the PER or PEA transaction\
    \ that established the policy enable\n   rule.\n   In the PDS reply message, the\
    \ policy rule identifier attribute, the\n   address tuple (internal) attribute,\
    \ and the address tuple (external)\n   attribute have exactly the same values\
    \ as the corresponding\n   attributes of the PDR request message.\n   This transaction\
    \ does not change the state of any policy rule.\n"
- title: 8.7.  Processing PRL Requests
  contents:
  - "8.7.  Processing PRL Requests\n   When a middlebox receives a PRL request message,\
    \ it first checks if\n   the authenticated agent is authorized for receiving policy\n\
    \   information.  If not, it returns a negative reply message of type\n   'agent\
    \ not authorized for this transaction' (0x0341).\n   Then the middlebox generates\
    \ a PRL reply message.  For each policy\n   rule at the middlebox in state RESERVED\
    \ or ENABLED that the\n   authenticated agent can access, a policy rule identifier\
    \ attribute is\n   generated and added to the PRL reply message before the message\
    \ is\n   sent to the agent.  A negative reply message of type 'reply message\n\
    \   too big' (0x0313) is generated if the number of policy rule\n   attributes\
    \ to be returned exceeds the maximum transport unit size of\n   the underlying\
    \ network connection or the maximum length of a SIMCO\n   message.  The total\
    \ size of a SIMCO message is limited to 65,536\n   octets in total (see Section\
    \ 4.2 for the SIMCO header).\n   This transaction does not change the state of\
    \ any policy rule.\n"
- title: 8.8.  Processing PDR requests
  contents:
  - "8.8.  Processing PDR requests\n   Processing of PDR requests is structured into\
    \ five sub-sections.  The\n   first one describes the general extension of the\
    \ MIDCOM protocol\n   semantics by PDR.  The second sub-section describes the\
    \ initial\n   checks that are performed in any case.  The third sub-section\n\
    \   describes the processing of PDR requests on pure firewalls.  The\n   fourth\
    \ one describes processing on devices with NATs, and the fifth\n   describes processing\
    \ of devices with combined firewall and NAT\n   functions.\n"
- title: 8.8.1.  Extending the MIDCOM semantics
  contents:
  - "8.8.1.  Extending the MIDCOM semantics\n   The Policy Disable Rule (PDR) extends\
    \ the MIDCOM protocol semantics\n   [RFC3989] by another policy rule type.  The\
    \ PDR is intended to be\n   used for dynamically blocking unwanted traffic, particularly\
    \ in case\n   of an attack, for example, a distributed denial of service attack.\n\
    \   PDR requests follow the same ownership concept as all other\n   transactions\
    \ do (see [RFC3989], Section 2.1.5).  However, PDR\n   prioritization over PERs\
    \ is independent of ownership.  A PDR always\n   overrules a conflicting PER,\
    \ even if the respective owners are\n   different.  Typically, only a highly privileged\
    \ agent will be allowed\n   to issue PDR requests.\n   A PDR rule and PER rule\
    \ conflict with each other if their address\n   tuples overlap such that there\
    \ exists at least one IP packet that\n   matches address tuple A0 of both rules\
    \ in the internal network and\n   that matches address tuple A3 of both rules\
    \ in the external network.\n   Note that the packet may be translated from the\
    \ internal to external\n   network, or vice versa.\n   Let's assume, for instance,\
    \ that a policy enable rule (PER) enables\n   all traffic from any external host\
    \ using any UDP port to a certain\n   UDP port of a certain internal host:\n \
    \        PER A3={ any external IP address,      UDP, any port   }\n         PER\
    \ A0={ internal IP address 10.1.8.3, UDP, port 12345 }\n   Then this conflicts\
    \ with a policy disable rule (PDR) blocking all UDP\n   traffic from a potentially\
    \ attacking host:\n         PDR A3={ external IP address 192.0.2.100, UDP, any\
    \ port }\n         PDR A0={ any internal IP address,         UDP, any port }\n\
    \   If a new PDR is established, then all conflicting PERS are terminated\n  \
    \ immediately.  A new PER can only be established if it does not\n   conflict\
    \ with any already existing PDR.\n"
- title: 8.8.2.  Initial Checks
  contents:
  - "8.8.2.  Initial Checks\n   When a middlebox receives a PDR request message, it\
    \ first checks if\n   the authenticated agent is authorized for requesting middlebox\n\
    \   configurations for disabling communication.  If not, it returns a\n   negative\
    \ reply message of type 'agent not authorized for this\n   transaction' (0x0341).\n\
    \   Then the middlebox checks the contained address tuple attributes.\n   If the\
    \ first one does not have the location parameter field set to\n   'internal' (0x00),\
    \ or if the second one does not have the location\n   parameter field set to 'external'\
    \ (0x03), then the middlebox returns\n   a negative reply message of type 'inconsistent\
    \ request' (0x034B).\n   If the transport protocol parameter field does not have\
    \ the same\n   value in both address tuple attributes, then the middlebox returns\
    \ a\n   negative reply message of type 'inconsistent request' (0x034B).\n   If\
    \ both address tuple attributes contain a port range parameter\n   field, if both\
    \ port range parameter fields have values not equal to\n   0xFFFF, and if the\
    \ values of both port range parameter fields are\n   different, then the middlebox\
    \ returns a negative reply message of\n   type 'inconsistent request' (0x034B).\n\
    \   Then the agent checks if wildcarding is requested and if the\n   requested\
    \ wildcarding is supported by the middlebox.  Wildcarding\n   support may be different\
    \ for internal address tuples and external\n   address tuples.  The following\
    \ parameter fields of the address tuple\n   attribute can indicate wildcarding:\n\
    \     - the first parameter field\n       If it is set to 'protocols only' (0x1),\
    \ then IP addresses and\n       port numbers are completely wildcarded.\n    \
    \ - the transport protocol field\n       If it is set to 0x00, then the transport\
    \ protocol is completely\n       wildcarded.  Please note that a completely wildcarded\
    \ transport\n       protocol might still support only a limited set of transport\n\
    \       protocols according to the capabilities of the middlebox.  For\n     \
    \  example, a typical NAT implementation may apply transport\n       wildcarding\
    \ to UDP and TCP transport only.  Wildcarding the\n       transport protocol implies\
    \ wildcarding of port numbers.  If this\n       field is set to 0x00, then the\
    \ values of the port number field\n       and the port range field are irrelevant.\n\
    \     - the prefix length field\n       If the IP version number field indicates\
    \ IPv4 and the value of\n       this field is less than 0x20, then IP addresses\
    \ are wildcarding\n       according to this prefix length.  If the IP version\
    \ number field\n       indicates IPv6 and the value of this field is less than\
    \ 0x80,\n       then IP addresses are wildcarding according to this prefix\n \
    \      length.  If the first parameter field is set to 'protocols only'\n    \
    \   (0x1), then the value of the prefix length field is irrelevant.\n     - the\
    \ port number field\n       If it is set to zero, then port numbers are completely\n\
    \       wildcarded.  In this case, the value of the port range field is\n    \
    \   irrelevant.\n   If any of these kinds of wildcarding is used, and if this\
    \ is in\n   conflict with wildcarding support for internal or external addresses\n\
    \   of the middlebox, then the middlebox returns a negative reply message\n  \
    \ of type 'requested wildcarding not supported' (0x034C).\n   Please note that\
    \ the port range field cannot be used for wildcarding.\n   If it is set to a value\
    \ greater than one, then middlebox\n   configuration is requested for all port\
    \ numbers in the interval\n   starting with the specified port number and containing\
    \ as many\n   consecutive port numbers as specified by the parameter.\n   The\
    \ specified policy disable rule is activated, and the middlebox\n   will terminate\
    \ any conflicting policy enable rule immediately.\n   Conflicts are defined in\
    \ Section 8.8.1.  Agents with open sessions\n   that have access to the policy\
    \ rules to be terminated are notified\n   via the ARE notification.\n   The middlebox\
    \ will reject all requests for new policy enable rules\n   that conflict with\
    \ the just established PDR as long as the PDR is not\n   terminated.  In such\
    \ a case, a negative 'conflict with existing rule'\n   (0x0350) reply will be\
    \ generated.\n   After checking the address tuple attributes, the middlebox chooses\
    \ a\n   lifetime value for the new policy rule to be created, which is\n   greater\
    \ than or equal to zero and less than or equal to the minimum\n   of the requested\
    \ value and the maximum lifetime specified by the\n   middlebox capabilities attribute\
    \ at session setup.  Formally, the\n   lifetime is chosen such that\n        \
    \ 0 <= lt_granted <= MINIMUM(lt_requested, lt_maximum)\n   holds, where 'lt_granted'\
    \ is the actual lifetime chosen by the\n   middlebox, 'lt_requested' is the lifetime\
    \ requested by the agent, and\n   'lt_maximum' is the maximum lifetime specified\
    \ during capability\n   exchange at session setup.\n   If there are further sessions\
    \ in state OPEN with authenticated agents\n   authorized to access the policy\
    \ rule, then to each of these agents a\n   corresponding ARE notification with\
    \ lifetime set to lt_granted is\n   sent.\n   If the chosen lifetime is zero,\
    \ the middlebox sends a negative reply\n   of type 'middlebox configuration failed'\
    \ (0x034A) to the agent.\n"
- title: 8.8.3.  Processing on Pure Firewalls
  contents:
  - "8.8.3.  Processing on Pure Firewalls\n   If the middlebox is acting as a pure\
    \ firewall, then it tries to\n   configure the requested disable rule, i.e., configuring\
    \ a blocking\n   rule at the firewall.  The disable rule is configured such that\n\
    \   communication between the specified internal and external address\n   tuples\
    \ is blocked, covering the specified wildcarding.  If the\n   configuration fails\
    \ (for example, because the blocking rule would\n   conflict with high-level firewall\
    \ policies), then the middlebox\n   returns a negative reply message of type 'middlebox\
    \ configuration\n   failed' (0x034A).\n   If the configuration was successful,\
    \ the middlebox establishes a new\n   policy disable rule and assigns to it a\
    \ policy rule identifier in\n   state ENABLED.  It generates a positive PDR reply\
    \ and sets the\n   attributes as specified below.\n   The identifier chosen for\
    \ the new policy rule is reported in the\n   policy rule identifier attribute\
    \ of the PDR reply.\n   The chosen lifetime is reported in the lifetime attribute\
    \ of the PDR\n   reply.\n"
- title: 8.8.4.  Processing on Network Address Translators
  contents:
  - "8.8.4.  Processing on Network Address Translators\n   If the middlebox is configured\
    \ as a NAT, then it tries to block the\n   specified address tuple in the NAT.\
    \  The mechanisms used for this\n   depend on the implementation and capabilities\
    \ of the NAT.\n   Should the configuration fail in either NAT case, a negative\
    \ reply\n   'middlebox configuration failed' (0x034A) is returned.\n   If the\
    \ configuration was successful, the middlebox establishes a new\n   policy disable\
    \ rule and assigns to it a policy rule identifier in\n   state ENABLED.  It generates\
    \ a positive PDR reply and sets the\n   attributes as specified below.\n   The\
    \ identifier chosen for the new policy rule is reported in the\n   policy rule\
    \ identifier attribute of the PDR reply.\n   The chosen lifetime is reported in\
    \ the lifetime attribute of the PDR\n   reply.\n"
- title: 8.8.5.  Processing on Combined Firewalls and NATs
  contents:
  - "8.8.5.  Processing on Combined Firewalls and NATs\n   Middleboxes that are combinations\
    \ of firewall and NAT are configured\n   in such a way that first the firewall\
    \ is configured with the blocking\n   rule and afterwards the NAT is configured\
    \ to block the address tuple.\n   This aspect of middlebox operation may be irrelevant\
    \ to SIMCO, since\n   some NATs already do firewall configuration on their own.\n"
- title: 8.9  Generating ARE Notifications
  contents:
  - "8.9  Generating ARE Notifications\n   At any time, the middlebox may terminate\
    \ a policy rule by deleting\n   the configuration of the rule and by changing\
    \ the corresponding PID\n   state from ENABLED or from RESERVED, respectively,\
    \ to UNUSED.\n   For each session in state OPEN with authenticated agents authorized\n\
    \   to access the policy rule, the middlebox generates a corresponding\n   ARE\
    \ notification with the lifetime attribute set to zero and sends it\n   to the\
    \ respective agent.  The identifier of the terminated policy\n   rule is reported\
    \ in the policy rule identifier attribute of the ARE\n   notification.\n   After\
    \ sending the notification, the middlebox will consider the\n   policy rule non-existent.\
    \  It will not process any further\n   transaction on this policy rule.\n   In\
    \ the case of PRR, PER, PEA, and PLC (reserving and enabling policy\n   rules\
    \ and changes of the lifetime), the middlebox generates an ARE\n   notification\
    \ after processing the request.  This ARE notification is\n   generated for each\
    \ session in state OPEN with authenticated agents\n   (other than the requesting\
    \ agent) who are authorized to access the\n   policy rule.  Through this ARE notification\
    \ all other agents are kept\n   synchronized with the latest state of the policy\
    \ rules.\n"
- title: 9.  Security Considerations
  contents:
  - '9.  Security Considerations

    '
- title: 9.1.  Possible Threats to SIMCO
  contents:
  - "9.1.  Possible Threats to SIMCO\n   Middleboxes, such as firewalls and NATs,\
    \ are usually operated for\n   improving the network security and for extending\
    \ the IP address space\n   (note that stand-alone NATs are not considered to improve\
    \ security;\n   see [RFC2663]).  The configuration of middleboxes from an external\n\
    \   entity looks quite counterproductive on the first glimpse, since an\n   attacker\
    \ using this can possibly configure the middlebox in such way\n   that no filtering\
    \ is applied anymore or that NAT bindings are\n   configured for malicious use.\
    \  So the middlebox is not performing the\n   intended function anymore.  Possible\
    \ threats to SIMCO are:\n     - Man-in-the-middle attack\n       A malicious host\
    \ intercepts messages exchanged between then SIMCO\n       agent and middlebox\
    \ and can change the content of the messages on\n       the fly.  This man-in-the-middle\
    \ attack would result, from the\n       agent's view, in a proper middlebox configuration,\
    \ but the\n       middlebox would not be configured accordingly.  The man in the\n\
    \       middlebox could open pinholes that compromise the protected\n       network's\
    \ security.\n     - Changing content\n       The message content could be changed\
    \ in such a way that the\n       requested policy rule configuration is not configured\
    \ in the\n       middlebox, but that any other unwanted configuration could be.\n\
    \       That way, an attacker can open the firewall for his own traffic.\n   \
    \  - Replaying\n       Already sent messages could be re-sent in order to configure\
    \ the\n       middlebox in such a way that hosts could configure policy rules\n\
    \       without the permission of an application-level gateway or system\n   \
    \    administrator.\n     - Wiretapping\n       An already configured policy rule\
    \ could be re-used by other hosts\n       if the policy rule is configured with\
    \ too broad a wildcarding\n       (see below).  These hosts could send unwanted\
    \ traffic.\n"
- title: 9.2.  Securing SIMCO with IPsec
  contents:
  - "9.2.  Securing SIMCO with IPsec\n   The previous subsection identifies several\
    \ issues on security for\n   SIMCO.  SIMCO can rely on IPsec mechanisms, as defined\
    \ in [RFC4302]\n   and [RFC4303], for ensuring proper operations.\n   When SIMCO\
    \ relies on IPsec, it uses IPsec in transport mode with an\n   authentication\
    \ header (AH) [RFC4302] and an encapsulating security\n   payload (ESP) [RFC4303],\
    \ so that IP traffic between SIMCO agent and\n   middlebox is protected.  The\
    \ authentication header is used for\n   protecting the whole packet against content\
    \ changes and replaying.\n   The ESP header is used to prevent wiretapping.\n\
    \   At either the agent or middlebox side, the following should be pre-\n   configured:\
    \ the IP addresses of the agent or middlebox, TCP (as the\n   transport protocol),\
    \ and the port numbers (if possible).  Only\n   packets from the pre-configured\
    \ address of the agents or middlebox\n   should be accepted.\n   The keys for\
    \ authentication for both the SIMCO agent and middlebox\n   are pre-configured\
    \ at each side.  For replay protection, the use of a\n   key management system\
    \ is recommended.  For the Internet Key Exchange\n   (IKE) protocol, see [RFC4306].\n"
- title: 10.  IAB Considerations on UNSAF
  contents:
  - "10.  IAB Considerations on UNSAF\n   UNilateral Self-Address Fixing (UNSAF) is\
    \ described in [RFC3424] as a\n   process at originating endpoints that attempt\
    \ to determine or fix the\n   address (and port) by which they are known to another\
    \ endpoint.\n   UNSAF proposals, such as STUN [RFC3489], are considered a general\n\
    \   class of work-arounds for NAT traversal and solutions for scenarios\n   with\
    \ no middlebox communication (MIDCOM).\n   This document describes a protocol\
    \ implementation of the MIDCOM\n   semantics and thus implements a middlebox communication\
    \ (MIDCOM)\n   solution.  MIDCOM is not intended as a short-term work-around,\
    \ but\n   more as a long-term solution for middlebox communication.  In MIDCOM,\n\
    \   endpoints are not involved in allocating, maintaining, and deleting\n   addresses\
    \ and ports at the middlebox.  The full control of addresses\n   and ports at\
    \ the middlebox is located at the SIMCO server.\n   Therefore, this document addresses\
    \ the UNSAF considerations in\n   [RFC3424] by proposing a long-term alternative\
    \ solution.\n"
- title: 11.  Acknowledgements
  contents:
  - "11.  Acknowledgements\n   The authors would like to thank Sebastian Kiesel and\
    \ Andreas Mueller\n   for valuable feedback from their SIMCO implementation and\
    \ Mary Barnes\n   for a thorough document review.\n"
- title: 12.  Normative References
  contents:
  - "12.  Normative References\n   [RFC3989]   Stiemerling, M., Quittek, J., and T.\
    \ Taylor, \"Middlebox\n               Communications (MIDCOM) Protocol Semantics\"\
    , RFC 3989,\n               February 2005.\n   [RFC4302]   Kent, S., \"IP Authentication\
    \ Header\", RFC 4302, December\n               2005.\n   [RFC4303]   Kent, S.,\
    \ \"IP Encapsulating Security Payload (ESP)\", RFC\n               4303, December\
    \ 2005.\n   [RFC4346]   Dierks, T. and E. Rescorla, \"The Transport Layer Security\n\
    \               (TLS) Protocol Version 1.1\", RFC 4346, April 2006.\n"
- title: 13.  Informative References
  contents:
  - "13.  Informative References\n   [RFC791]    Postel, J., \"Internet Protocol\"\
    , STD 5, RFC 791,\n               September 1981.\n   [RFC1519]   Fuller, V.,\
    \ Li, T., Yu, J., and K. Varadhan, \"Classless\n               Inter-Domain Routing\
    \ (CIDR): an Address Assignment and\n               Aggregation Strategy\", RFC\
    \ 1519, September 1993.\n   [RFC2460]   Deering, S. and R. Hinden, \"Internet\
    \ Protocol, Version 6\n               (IPv6) Specification\", RFC 2460, December\
    \ 1998.\n   [RFC2663]   Srisuresh, P. and M. Holdrege, \"IP Network Address\n\
    \               Translator (NAT) Terminology and Considerations\", RFC\n     \
    \          2663, August 1999.\n   [RFC3234]   Carpenter, B. and S. Brim, \"Middleboxes:\
    \ Taxonomy and\n               Issues\", RFC 3234, February 2002.\n   [RFC3303]\
    \   Srisuresh, P., Kuthan, J., Rosenberg, J., Molitor, A.,\n               and\
    \ A. Rayhan, \"Middlebox communication architecture and\n               framework\"\
    , RFC 3303, August 2002.\n   [RFC3424]   Daigle, L. and IAB, \"IAB Considerations\
    \ for UNilateral\n               Self-Address Fixing (UNSAF) Across Network Address\n\
    \               Translation\", RFC 3424, November 2002.\n   [RFC3489]   Rosenberg,\
    \ J., Weinberger, J., Huitema, C., and R. Mahy,\n               \"STUN - Simple\
    \ Traversal of User Datagram Protocol (UDP)\n               Through Network Address\
    \ Translators (NATs)\", RFC 3489,\n               March 2003.\n   [RFC3932]  \
    \ Alvestrand, H., \"The IESG and RFC Editor Documents:\n               Procedures\"\
    , BCP 92, RFC 3932, October 2004.\n   [RFC4291]   Hinden, R. and S. Deering, \"\
    IP Version 6 Addressing\n               Architecture\", RFC 4291, February 2006.\n\
    \   [RFC4306]   Kaufman, C., \"Internet Key Exchange (IKEv2) Protocol\",\n   \
    \            RFC 4306, December 2005.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Martin Stiemerling\n   NEC Europe Ltd.\n   Network Laboratories\
    \ Europe\n   Kurfuersten-Anlage 36\n   69115 Heidelberg\n   Germany\n   Phone:\
    \ +49 6221 4342-113\n   EMail: stiemerling@netlab.nec.de\n   Juergen Quittek\n\
    \   NEC Europe Ltd.\n   Network Laboratories Europe\n   Kurfuersten-Anlage 36\n\
    \   69115 Heidelberg\n   Germany\n   Phone: +49 6221 4342-115\n   EMail: quittek@netlab.nec.de\n\
    \   Cristian Cadar\n   Muelheimer Strasse 23\n   40239 Duesseldorf\n   Germany\n\
    \   EMail: ccadar2@yahoo.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2006).\n   This\
    \ document is subject to the rights, licenses and restrictions\n   contained in\
    \ BCP 78 and at www.rfc-editor.org/copyright.html, and\n   except as set forth\
    \ therein, the authors retain all their rights.\n   This document and the information\
    \ contained herein are provided on an\n   \"AS IS\" basis and THE CONTRIBUTOR,\
    \ THE ORGANIZATION HE/SHE REPRESENTS\n   OR IS SPONSORED BY (IF ANY), THE INTERNET\
    \ SOCIETY AND THE INTERNET\n   ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES,\
    \ EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE\
    \ OF THE\n   INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\n\
    \   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is provided by the IETF\n\
    \   Administrative Support Activity (IASA).\n"
