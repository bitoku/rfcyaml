- title: __initial_text__
  contents:
  - "                Guidelines for Mapping Implementations:\n          HTTP to the\
    \ Constrained Application Protocol (CoAP)\n"
- title: Abstract
  contents:
  - "Abstract\n   This document provides reference information for implementing a\n\
    \   cross-protocol network proxy that performs translation from the HTTP\n   protocol\
    \ to the Constrained Application Protocol (CoAP).  This will\n   enable an HTTP\
    \ client to access resources on a CoAP server through\n   the proxy.  This document\
    \ describes how an HTTP request is mapped to\n   a CoAP request and how a CoAP\
    \ response is mapped back to an HTTP\n   response.  This includes guidelines for\
    \ status code, URI, and media\n   type mappings, as well as additional interworking\
    \ advice.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 7841.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc8075.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2017 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   4\n   2.  Terminology . . . . . . . . . . . . . . . . . . . . .\
    \ . . . .   5\n   3.  HTTP-to-CoAP Proxy  . . . . . . . . . . . . . . . . . .\
    \ . . .   6\n   4.  Use Cases . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . .   7\n   5.  URI Mapping . . . . . . . . . . . . . . . . . . . . . . . .\
    \ .   7\n     5.1.  URI Terminology . . . . . . . . . . . . . . . . . . . . .\
    \   8\n     5.2.  Null Mapping  . . . . . . . . . . . . . . . . . . . . . .  \
    \ 9\n     5.3.  Default Mapping . . . . . . . . . . . . . . . . . . . . .   9\n\
    \       5.3.1.  Optional Scheme Omission  . . . . . . . . . . . . . .   9\n  \
    \     5.3.2.  Encoding Caveats  . . . . . . . . . . . . . . . . . .  10\n    \
    \ 5.4.  URI Mapping Template  . . . . . . . . . . . . . . . . . .  10\n      \
    \ 5.4.1.  Simple Form . . . . . . . . . . . . . . . . . . . . .  10\n       5.4.2.\
    \  Enhanced Form . . . . . . . . . . . . . . . . . . . .  12\n     5.5.  Discovery\
    \ . . . . . . . . . . . . . . . . . . . . . . . .  13\n       5.5.1.  Examples\
    \  . . . . . . . . . . . . . . . . . . . . . .  14\n   6.  Media Type Mapping\
    \  . . . . . . . . . . . . . . . . . . . . .  15\n     6.1.  Overview  . . . .\
    \ . . . . . . . . . . . . . . . . . . . .  15\n     6.2.  'application/coap-payload'\
    \ Media Type . . . . . . . . . .  16\n     6.3.  Loose Media Type Mapping  . .\
    \ . . . . . . . . . . . . . .  17\n     6.4.  Media Type to Content-Format Mapping\
    \ Algorithm  . . . . .  18\n     6.5.  Content Transcoding . . . . . . . . . .\
    \ . . . . . . . . .  19\n       6.5.1.  General . . . . . . . . . . . . . . .\
    \ . . . . . . . .  19\n       6.5.2.  CoRE Link Format  . . . . . . . . . . .\
    \ . . . . . . .  20\n     6.6.  Diagnostic Payloads . . . . . . . . . . . . .\
    \ . . . . . .  20\n   7.  Response Code Mapping . . . . . . . . . . . . . . .\
    \ . . . . .  21\n   8.  Additional Mapping Guidelines . . . . . . . . . . . .\
    \ . . . .  23\n     8.1.  Caching and Congestion Control  . . . . . . . . . .\
    \ . . .  23\n     8.2.  Cache Refresh via Observe . . . . . . . . . . . . . .\
    \ . .  24\n     8.3.  Use of CoAP Block-Wise Transfer . . . . . . . . . . . .\
    \ .  24\n     8.4.  CoAP Multicast  . . . . . . . . . . . . . . . . . . . . .\
    \  25\n     8.5.  Timeouts  . . . . . . . . . . . . . . . . . . . . . . . .  26\n\
    \   9.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .  26\n  \
    \   9.1.  New 'core.hc' Resource Type . . . . . . . . . . . . . . .  26\n    \
    \ 9.2.  New 'coap-payload' Internet Media Type  . . . . . . . . .  26\n   10.\
    \ Security Considerations . . . . . . . . . . . . . . . . . . .  28\n     10.1.\
    \  Multicast  . . . . . . . . . . . . . . . . . . . . . . .  29\n     10.2.  Traffic\
    \ Overflow . . . . . . . . . . . . . . . . . . . .  29\n     10.3.  Handling Secured\
    \ Exchanges . . . . . . . . . . . . . . .  30\n     10.4.  URI Mapping  . . .\
    \ . . . . . . . . . . . . . . . . . . .  30\n   11. References  . . . . . . .\
    \ . . . . . . . . . . . . . . . . . .  31\n     11.1.  Normative References .\
    \ . . . . . . . . . . . . . . . . .  31\n     11.2.  Informative References .\
    \ . . . . . . . . . . . . . . . .  32\n   Appendix A.  Media Type Mapping Source\
    \ Code . . . . . . . . . . .  35\n   Acknowledgments . . . . . . . . . . . . .\
    \ . . . . . . . . . . . .  39\n   Authors' Addresses  . . . . . . . . . . . .\
    \ . . . . . . . . . . .  40\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The Constrained Application Protocol (CoAP) [RFC7252] has\
    \ been\n   designed with a twofold aim: it's an application protocol specialized\n\
    \   for constrained environments and it's easily used in architectures\n   based\
    \ on Representational State Transfer (REST) [Fielding], such as\n   the web. \
    \ The latter goal has led to defining CoAP to easily\n   interoperate with HTTP\
    \ [RFC7230] through an intermediary proxy that\n   performs cross-protocol conversion.\n\
    \   Section 10 of [RFC7252] describes the fundamentals of the\n   CoAP-to-HTTP\
    \ and the HTTP-to-CoAP cross-protocol mapping process.\n   However, [RFC7252]\
    \ focuses on the basic mapping of request methods\n   and simple response code\
    \ mapping between HTTP and CoAP, while leaving\n   many details of the cross-protocol\
    \ proxy for future definition.\n   Therefore, a primary goal of this document\
    \ is to define a consistent\n   set of guidelines that an HTTP-to-CoAP proxy implementation\
    \ should\n   adhere to.  The key benefit to adhering to such guidelines is to\n\
    \   reduce variation between proxy implementations, thereby increasing\n   interoperability\
    \ between an HTTP client and a CoAP server independent\n   of the proxy that implements\
    \ the cross-protocol mapping.  (For\n   example, a proxy conforming to these guidelines\
    \ made by vendor A can\n   be easily replaced by a proxy from vendor B that also\
    \ conforms to the\n   guidelines without breaking API semantics.)\n   This document\
    \ describes HTTP mappings that apply to protocol elements\n   defined in the base\
    \ CoAP specification [RFC7252] and in the CoAP\n   block-wise transfer specification\
    \ [RFC7959].  It is up to CoAP\n   protocol extensions (new methods, response\
    \ codes, options, content-\n   formats) to describe their own HTTP mappings, if\
    \ applicable.\n   The rest of this document is organized as follows:\n   o  Section\
    \ 2 defines proxy terminology;\n   o  Section 3 introduces the HTTP-to-CoAP proxy;\n\
    \   o  Section 4 lists use cases in which HTTP clients need to contact\n     \
    \ CoAP servers;\n   o  Section 5 introduces a null, default, and advanced HTTP-to-CoAP\n\
    \      URI mapping syntax;\n   o  Section 6 describes how to map HTTP media types\
    \ to CoAP content-\n      formats, and vice versa;\n   o  Section 7 describes\
    \ how to map CoAP responses to HTTP responses;\n   o  Section 8 describes additional\
    \ mapping guidelines related to\n      caching, congestion, multicast, timeouts,\
    \ etc.; and\n   o  Section 10 discusses the possible security impact of HTTP-to-CoAP\n\
    \      protocol mapping.\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   The keywords \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\"\
    , \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted as described\
    \ in\n   [RFC2119].\n   This specification requires readers to be familiar with\
    \ the\n   vocabulary and concepts discussed in [RFC7228], in particular, the\n\
    \   terms \"constrained nodes\" and \"constrained networks\".  Readers must\n\
    \   also be familiar with all of the terminology of the normative\n   references\
    \ listed in this document, in particular [RFC7252] (CoAP)\n   and [RFC7230] (HTTP).\
    \  In addition, this specification makes use of\n   the following terms:\n   HC\
    \ Proxy\n       A proxy performing a cross-protocol mapping, in the context of\n\
    \       this document an HTTP-to-CoAP (HC) mapping.  Specifically, the HC\n  \
    \     Proxy acts as an HTTP server and a CoAP client.  The HC Proxy can\n    \
    \   take on the role of a forward, reverse, or interception Proxy.\n   Application\
    \ Level Gateway (ALG)\n       An application-specific translation agent that allows\
    \ an\n       application on a host in one address realm to connect to its\n  \
    \     counterpart running on a host in a different realm transparently.\n    \
    \   See Section 2.9 of [RFC2663].\n   forward-proxy\n       A message-forwarding\
    \ agent that is selected by the HTTP client,\n       usually via local configuration\
    \ rules, to receive requests for\n       some type(s) of absolute URI and to attempt\
    \ to satisfy those\n       requests via translation to the protocol indicated\
    \ by the\n       absolute URI.  The user agent decides (is willing) to use the\n\
    \       proxy as the forwarding/dereferencing agent for a predefined\n       subset\
    \ of the URI space.  In [RFC7230], this is called a \"proxy\".\n       [RFC7252]\
    \ defines forward-proxy similarly.\n   reverse-proxy\n       As in [RFC7230],\
    \ a receiving agent that acts as a layer above\n       some other server(s) and\
    \ translates the received requests to the\n       underlying server's protocol.\
    \  A reverse-proxy behaves as an\n       origin (HTTP) server on its connection\
    \ from the HTTP client.  The\n       HTTP client uses the \"origin-form\" (Section\
    \ 5.3.1 of [RFC7230])\n       as a request-target URI.  (Note that a reverse-proxy\
    \ appears to\n       an HTTP client as an origin server while a forward-proxy\
    \ does\n       not.  So, when communicating with a reverse-proxy, a client may\n\
    \       be unaware it is communicating with a proxy at all.)\n   interception\
    \ proxy\n       As in [RFC3040], a proxy that receives inbound HTTP traffic flows\n\
    \       through the process of traffic redirection, transparent to the\n     \
    \  HTTP client.\n"
- title: 3.  HTTP-to-CoAP Proxy
  contents:
  - "3.  HTTP-to-CoAP Proxy\n   An HC Proxy is accessed by an HTTP client that needs\
    \ to fetch a\n   resource on a CoAP server.  The HC Proxy handles the HTTP request\
    \ by\n   mapping it to the equivalent CoAP request, which is then forwarded to\n\
    \   the appropriate CoAP server.  The received CoAP response is then\n   mapped\
    \ to an appropriate HTTP response and finally sent back to the\n   originating\
    \ HTTP client.\n   Section 10.2 of [RFC7252] defines basic normative requirements\
    \ on\n   HTTP-to-CoAP mapping.  This document provides additional details and\n\
    \   guidelines for the implementation of an HC Proxy.\n                      \
    \                         Constrained Network\n                              \
    \                .-------------------.\n                                     \
    \        /      .------.       \\\n                                          \
    \  /       | CoAP |        \\\n                                           /  \
    \      |server|         \\\n                                          ||     \
    \   '------'         ||\n                                          ||        \
    \                 ||\n     .--------.  HTTP Request   .------------.  CoAP Req\
    \  .------.   ||\n     |  HTTP  |---------------->|HTTP-to-CoAP|----------->|\
    \ CoAP |   ||\n     | Client |<----------------|   Proxy    |<-----------|server|\
    \   ||\n     '--------'  HTTP Response  '------------'  CoAP Resp '------'   ||\n\
    \                                          ||                         ||\n   \
    \                                       ||   .------.              ||\n      \
    \                                    ||   | CoAP |              ||\n         \
    \                                  \\   |server|  .------.    /\n            \
    \                                \\  '------'  | CoAP |   /\n                \
    \                             \\           |server|  /\n                     \
    \                         \\          '------' /\n                           \
    \                    '-----------------'\n             Figure 1: HTTP-To-CoAP\
    \ Proxy Deployment Scenario\n   Figure 1 illustrates an example deployment scenario.\
    \  There, an HC\n   Proxy is located at the boundary of the constrained network\
    \ domain\n   and acts as an ALG that allows only a very specific type of traffic\n\
    \   (i.e., authorized inbound HTTP requests and their associated outbound\n  \
    \ CoAP responses) to pass through.  All other kinds of traffic are\n   segregated\
    \ within the respective network segments.\n"
- title: 4.  Use Cases
  contents:
  - "4.  Use Cases\n   To illustrate a few situations in which HTTP-to-CoAP protocol\n\
    \   translation may be used, three use cases are described below.\n   1.  Legacy\
    \ building control application without CoAP: A building\n       control application\
    \ that uses HTTP but not CoAP can check the\n       status of CoAP sensors and/or\
    \ control actuators via an HC Proxy.\n   2.  Making sensor data available to third\
    \ parties on the web: For\n       demonstration or public interest purposes, an\
    \ HC Proxy may be\n       configured to expose the contents of a CoAP sensor to\
    \ the world\n       via the web (HTTP and/or HTTPS).  Some sensors may only accept\n\
    \       secure 'coaps' requests; therefore, the proxy is configured to\n     \
    \  translate requests to those devices accordingly.  The HC Proxy is\n       furthermore\
    \ configured to only pass through GET requests in order\n       to protect the\
    \ constrained network.\n   3.  Smartphone and home sensor: A smartphone can access\
    \ directly a\n       CoAP home sensor using a mutually authenticated 'https' request,\n\
    \       provided its home router runs an HC Proxy and is configured with\n   \
    \    the appropriate certificate.  An HTML5 [W3C.REC-html5-20141028]\n       application\
    \ on the smartphone can provide a friendly UI using the\n       standard (HTTP)\
    \ networking functions of HTML5.\n   A key point in the above use cases is the\
    \ expected nature of the URI\n   to be used by the HTTP client initiating the\
    \ HTTP request to the HC\n   Proxy.  Specifically, in use case #1, there will\
    \ be no information\n   related to 'coap' or 'coaps' embedded in the HTTP URI\
    \ as it is a\n   legacy HTTP client sending the request.  Use case #2 is also\
    \ expected\n   to be similar.  In contrast, in use case #3, it is likely that\
    \ the\n   HTTP client will specifically embed information related to 'coap' or\n\
    \   'coaps' in the HTTP URI of the HTTP request to the HC Proxy.\n"
- title: 5.  URI Mapping
  contents:
  - "5.  URI Mapping\n   Though, in principle, a CoAP URI could be directly used by\
    \ an HTTP\n   client to dereference a CoAP resource through an HC Proxy; the\n\
    \   reality is that all major web browsers, networking libraries, and\n   command-line\
    \ tools do not allow making HTTP requests using URIs with\n   a scheme 'coap'\
    \ or 'coaps'.\n   Thus, there is a need for web applications to embed or \"pack\"\
    \ a CoAP\n   URI into an HTTP URI so that it can be (non-destructively)\n   transported\
    \ from the HTTP client to the HC Proxy.  The HC Proxy can\n   then \"unpack\"\
    \ the CoAP URI and finally dereference it via a CoAP\n   request to the target\
    \ server.\n   URI mapping is the term used in this document to describe the process\n\
    \   through which the URI of a CoAP resource is transformed into an HTTP\n   URI\
    \ so that:\n   o  The requesting HTTP client can handle it; and\n   o  The receiving\
    \ HC Proxy can extract the intended CoAP URI\n      unambiguously.\n   To this\
    \ end, the remainder of this section will identify:\n   o  The default mechanism\
    \ to map a CoAP URI into an HTTP URI;\n   o  The URI Template format to express\
    \ a class of CoAP-HTTP URI\n      mapping functions; and\n   o  The discovery\
    \ mechanism based on \"Constrained RESTful Environments\n      (CoRE) Link Format\"\
    \ [RFC6690] through which clients of an HC Proxy\n      can dynamically learn\
    \ about the supported URI mapping template(s),\n      as well as the URI where\
    \ the HC Proxy function is anchored.\n"
- title: 5.1.  URI Terminology
  contents:
  - "5.1.  URI Terminology\n   In the remainder of this section, the following terms\
    \ will be used\n   with a distinctive meaning:\n   HC Proxy URI:\n           URI\
    \ that refers to the HC Proxy function.  It conforms to\n           syntax defined\
    \ in Section 2.7 of [RFC7230].\n   Target CoAP URI:\n           URI that refers\
    \ to the (final) CoAP resource that has to be\n           dereferenced.  It conforms\
    \ to syntax defined in Section 6 of\n           [RFC7252].  Specifically, its\
    \ scheme is either 'coap' or\n           'coaps'.\n   Hosting HTTP URI:\n    \
    \       URI that conforms to syntax in Section 2.7 of [RFC7230].  Its\n      \
    \     authority component refers to an HC Proxy, whereas a path\n           and/or\
    \ query component(s) embed the information used by an HC\n           Proxy to\
    \ extract the Target CoAP URI.\n"
- title: 5.2.  Null Mapping
  contents:
  - "5.2.  Null Mapping\n   The null mapping is the case where there is no Target\
    \ CoAP URI\n   appended to the HC Proxy URI.  In other words, it is a \"pure\"\
    \ HTTP\n   URI that is sent to the HC Proxy.  This would typically occur in\n\
    \   situations like use case #1 described in Section 4, and the proxy\n   would\
    \ typically be a reverse-proxy.  In this scenario, the HC Proxy\n   will determine\
    \ through its own private algorithms what the Target\n   CoAP URI should be.\n"
- title: 5.3.  Default Mapping
  contents:
  - "5.3.  Default Mapping\n   The default mapping is for the Target CoAP URI to be\
    \ appended as is\n   (with the only caveat discussed in Section 5.3.2) to the\
    \ HC Proxy\n   URI, to form the Hosting HTTP URI.  This is the effective request\
    \ URI\n   (see Section 5.5 of [RFC7230]) that will then be sent by the HTTP\n\
    \   client in the HTTP request to the HC Proxy.\n   For example: given an HC Proxy\
    \ URI https://p.example.com/hc/ and a\n   Target CoAP URI coap://s.example.com/light,\
    \ the resulting Hosting\n   HTTP URI would be https://p.example.com/hc/coap://s.example.com/\n\
    \   light.\n   Provided a correct Target CoAP URI, the Hosting HTTP URI resulting\n\
    \   from the default mapping will be a syntactically valid HTTP URI.\n   Furthermore,\
    \ the Target CoAP URI can always be extracted\n   unambiguously from the Hosting\
    \ HTTP URI.\n   There is no default for the HC Proxy URI.  Therefore, it is either\n\
    \   known in advance, e.g., as a configuration preset, or dynamically\n   discovered\
    \ using the mechanism described in Section 5.5.\n   The default URI mapping function\
    \ SHOULD be implemented and SHOULD be\n   activated by default in an HC Proxy,\
    \ unless there are valid reasons\n   (e.g., application specific) to use a different\
    \ mapping function.\n"
- title: 5.3.1.  Optional Scheme Omission
  contents:
  - "5.3.1.  Optional Scheme Omission\n   When constructing a Hosting HTTP URI by\
    \ embedding a Target CoAP URI,\n   the scheme (i.e., 'coap' or 'coaps'), the scheme\
    \ component delimiter\n   (\":\"), and the double slash (\"//\") preceding the\
    \ authority MAY be\n   omitted if a local default -- not defined by this document\
    \ --\n   applies.  If no prior mutual agreement exists between the client and\n\
    \   the HC Proxy, then a Target CoAP URI without the scheme component is\n   syntactically\
    \ incorrect, and therefore:\n   o  It MUST NOT be emitted by clients; and\n  \
    \ o  It MUST elicit a suitable client error status (i.e., 4xx) by the\n      HC\
    \ Proxy.\n"
- title: 5.3.2.  Encoding Caveats
  contents:
  - "5.3.2.  Encoding Caveats\n   When the authority of the Target CoAP URI is given\
    \ as an IPv6address,\n   then the surrounding square brackets must be percent-encoded\
    \ in the\n   Hosting HTTP URI, in order to comply with the syntax defined in\n\
    \   Section 3.3. of [RFC3986] for a URI path segment.  For example:\n   coap://[2001:db8::1]/light?on\
    \ becomes\n   https://p.example.com/hc/coap://%5B2001:db8::1%5D/light?on.  (Note\n\
    \   that the percent-encoded square brackets shall be reverted to their\n   non-percent-encoded\
    \ form when the HC Proxy unpacks the Target CoAP\n   URI.)\n   Everything else\
    \ can be safely copied verbatim from the Target CoAP\n   URI to the Hosting HTTP\
    \ URI.\n"
- title: 5.4.  URI Mapping Template
  contents:
  - "5.4.  URI Mapping Template\n   This section defines a format for the URI Template\
    \ [RFC6570] used by\n   an HC Proxy to inform its clients about the expected syntax\
    \ for the\n   Hosting HTTP URI.  This can then be used by the HTTP client to\n\
    \   construct the effective request URI to be sent in the HTTP request to\n  \
    \ the HC Proxy.\n   When instantiated, a URI mapping template is always concatenated\
    \ to\n   an HC Proxy URI provided by the HC Proxy via discovery (see\n   Section\
    \ 5.5), or by other means.\n   A simple form (Section 5.4.1) and an enhanced form\
    \ (Section 5.4.2)\n   are provided to fit different users' requirements.\n   Both\
    \ forms are expressed as Level 2 URI Templates [RFC6570] to take\n   care of the\
    \ expansion of values that are allowed to include reserved\n   URI characters.\
    \  The syntax of all URI formats is specified in this\n   section in Augmented\
    \ Backus-Naur Form (ABNF) [RFC5234].\n"
- title: 5.4.1.  Simple Form
  contents:
  - "5.4.1.  Simple Form\n   The simple form MUST be used for mappings where the Target\
    \ CoAP URI\n   is going to be copied (using rules of Section 5.3.2) at some fixed\n\
    \   position into the Hosting HTTP URI.\n   The \"tu\" template variable is defined\
    \ below using the ABNF rules from\n   [RFC3986], Sections 3.2.2, 3.2.3, 3.3, and\
    \ 3.4.  It is intended to be\n   used in a template definition to represent a\
    \ Target CoAP URI:\n     tu = [ ( \"coap:\" / \"coaps:\" ) \"//\" ] host [ \"\
    :\" port ] path-abempty\n          [ \"?\" query ]\n   Note that the same considerations\
    \ as in Section 5.3.1 apply, in that\n   the CoAP scheme may be omitted from the\
    \ Hosting HTTP URI.\n"
- title: 5.4.1.1.  Examples
  contents:
  - "5.4.1.1.  Examples\n   All the following examples (given as a specific URI mapping\
    \ template,\n   a Target CoAP URI, and the produced Hosting HTTP URI) use\n  \
    \ https://p.example.com/hc/ as the HC Proxy URI.  Note that these\n   examples\
    \ all define mapping templates that deviate from the default\n   template of Section\
    \ 5.3 in order to illustrate the use of the above\n   template variables.\n  \
    \ 1.  Target CoAP URI is a query argument of the Hosting HTTP URI:\n   ?target_uri={+tu}\n\
    \   coap://s.example.com/light\n   => https://p.example.com/hc/?target_uri=coap://s.example.com/light\n\
    \   whereas\n   coaps://s.example.com/light\n   => https://p.example.com/hc/?target_uri=coaps://s.example.com/light\n\
    \   2.  Target CoAP URI in the path component of the Hosting HTTP URI:\n   forward/{+tu}\n\
    \   coap://s.example.com/light\n   => https://p.example.com/hc/forward/coap://s.example.com/light\n\
    \   whereas\n   coaps://s.example.com/light\n   => https://p.example.com/hc/forward/coaps://s.example.com/light\n\
    \   3.  Target CoAP URI is a query argument of the Hosting HTTP URI;\n       client\
    \ decides to omit the scheme because a default is agreed\n       beforehand between\
    \ client and proxy:\n   ?coap_uri={+tu}\n   coap://s.example.com/light\n   =>\
    \ https://p.example.com/hc/?coap_uri=s.example.com/light\n"
- title: 5.4.2.  Enhanced Form
  contents:
  - "5.4.2.  Enhanced Form\n   The enhanced form can be used to express more sophisticated\
    \ mappings\n   of the Target CoAP URI into the Hosting HTTP URI, i.e., mappings\
    \ that\n   do not fit into the simple form.\n   There MUST be at most one instance\
    \ of each of the following template\n   variables in a URI mapping template definition:\n\
    \     s  = \"coap\" / \"coaps\" ; from [RFC7252], Sections 6.1 and 6.2\n     hp\
    \ = host [\":\" port]  ; from [RFC3986], Sections 3.2.2 and 3.2.3\n     p  = path-abempty\
    \     ; from [RFC3986], Section 3.3\n     q  = query            ; from [RFC3986],\
    \ Section 3.4\n     qq = [ \"?\" query ]    ; qq is empty if and only if 'query'\
    \ is empty\n   The qq form is used when the path and the (optional) query components\n\
    \   are to be copied verbatim from the Target CoAP URI into the Hosting\n   HTTP\
    \ URI, i.e., as \"{+p}{+qq}\".  Instead, the q form is used when the\n   query\
    \ and path are mapped as separate entities, e.g., as in\n   \"coap_path={+p}&coap_query={+q}\"\
    .  So q and qq MUST be used in mutual\n   exclusion in a template definition.\n"
- title: 5.4.2.1.  Examples
  contents:
  - "5.4.2.1.  Examples\n   All the following examples (given as a specific URI mapping\
    \ template,\n   a Target CoAP URI, and the produced Hosting HTTP URI) use\n  \
    \ https://p.example.com/hc/ as the HC Proxy URI.\n   1.  Target CoAP URI components\
    \ in path segments and optional query in\n       query component:\n       {+s}/{+hp}{+p}{+qq}\n\
    \       coap://s.example.com/light\n       => https://p.example.com/hc/coap/s.example.com/light\n\
    \       whereas\n       coap://s.example.com/light?on\n       => https://p.example.com/hc/coap/s.example.com/light?on\n\
    \   2.  Target CoAP URI components split in individual query arguments:\n    \
    \ ?s={+s}&hp={+hp}&p={+p}&q={+q}\n     coap://s.example.com/light\n     => https://p.example.com/hc/?s=coap&hp=s.example.com&p=/light&q=\n\
    \     whereas\n     coaps://s.example.com/light?on\n     => https://p.example.com/hc/?s=coaps&hp=s.example.com&p=/light&q=on\n"
- title: 5.5.  Discovery
  contents:
  - "5.5.  Discovery\n   In order to accommodate site-specific needs while allowing\
    \ third\n   parties to discover the proxy function, the HC Proxy SHOULD publish\n\
    \   information related to the location and syntax of the HC Proxy\n   function\
    \ using the CoRE Link Format [RFC6690] interface.\n   To this aim, a new Resource\
    \ Type, \"core.hc\", is defined in this\n   document.  It can be used as the value\
    \ for the \"rt\" attribute in a\n   query to the \"/.well-known/core\" resource\
    \ in order to locate the URI\n   where the HC Proxy function is anchored, i.e.,\
    \ the HC Proxy URI.\n   Along with it, the new target attribute \"hct\" is defined\
    \ in this\n   document.  This attribute MAY be returned in a \"core.hc\" link\
    \ to\n   provide the URI mapping template associated with the mapping\n   resource.\
    \  The default template given in Section 5.3, i.e., {+tu},\n   MUST be assumed\
    \ if no \"hct\" attribute is found in a returned link.\n   If a \"hct\" attribute\
    \ is present in a returned link, the client MUST\n   use it to create a Hosting\
    \ HTTP URI.\n   The URI mapping SHOULD be discoverable (as specified in [RFC6690])\
    \ on\n   both the HTTP and the CoAP side of the HC Proxy, with one important\n\
    \   difference: on the CoAP side, the link associated with the \"core.hc\"\n \
    \  resource always needs an explicit anchor parameter referring to the\n   HTTP\
    \ origin [RFC6454], while on the HTTP interface, the context URI\n   of the link\
    \ may be equal to the HTTP origin of the discovery request:\n   in that case,\
    \ the anchor parameter is not needed.\n"
- title: 5.5.1.  Examples
  contents:
  - "5.5.1.  Examples\n   o  The first example exercises the CoAP interface and assumes\
    \ that\n      the default template, {+tu}, is used.  For example, a smartphone\n\
    \      may discover the public HC Proxy before leaving the home network.\n   \
    \   Then, when outside the home network, the smartphone will be able\n      to\
    \ query the appropriate home sensor.\n       Req:  GET coap://[ff02::fd]/.well-known/core?rt=core.hc\n\
    \       Res:  2.05 Content\n             </hc/>;anchor=\"https://p.example.com\"\
    ;rt=\"core.hc\"\n   o  The second example -- also on the CoAP side of the HC Proxy\
    \ --\n      uses a custom template, i.e., one where the CoAP URI is carried\n\
    \      inside the query component, thus the returned link carries the URI\n  \
    \    Template to be used in an explicit \"hct\" attribute:\n       Req:  GET coap://[ff02::fd]/.well-known/core?rt=core.hc\n\
    \       Res:  2.05 Content\n             </hc/>;anchor=\"https://p.example.com\"\
    ;\n             rt=\"core.hc\";hct=\"?uri={+tu}\"\n   On the HTTP side, link information\
    \ can be serialized in more than one\n   way:\n   o  using the 'application/link-format'\
    \ content type:\n       Req:  GET /.well-known/core?rt=core.hc HTTP/1.1\n    \
    \         Host: p.example.com\n       Res:  HTTP/1.1 200 OK\n             Content-Type:\
    \ application/link-format\n             Content-Length: 19\n             </hc/>;rt=\"\
    core.hc\"\n   o  using the 'application/link-format+json' content type as defined\n\
    \      in [CoRE-JSON-CBOR]:\n       Req:  GET /.well-known/core?rt=core.hc HTTP/1.1\n\
    \             Host: p.example.com\n       Res:  HTTP/1.1 200 OK\n            \
    \ Content-Type: application/link-format+json\n             Content-Length: 32\n\
    \             [{\"href\":\"/hc/\",\"rt\":\"core.hc\"}]\n"
- title: 6.  Media Type Mapping
  contents:
  - '6.  Media Type Mapping

    '
- title: 6.1.  Overview
  contents:
  - "6.1.  Overview\n   An HC Proxy needs to translate HTTP media types (Section 3.1.1.1\
    \ of\n   [RFC7231]) and content codings (Section 3.1.2.2 of [RFC7231]) into\n\
    \   CoAP content-formats (Section 12.3 of [RFC7252]), and vice versa.\n   Media\
    \ type translation can happen in GET, PUT, or POST requests going\n   from HTTP\
    \ to CoAP, in 2.xx (i.e., successful) responses going from\n   CoAP to HTTP, and\
    \ in 4.xx/5.xx error responses with a diagnostic\n   payload.  Specifically, PUT\
    \ and POST need to map both the Content-\n   Type and Content-Encoding HTTP headers\
    \ into a single CoAP Content-\n   Format option, whereas GET needs to map Accept\
    \ and Accept-Encoding\n   HTTP headers into a single CoAP Accept option.  To generate\
    \ the HTTP\n   response, the CoAP Content-Format option is mapped back to a suitable\n\
    \   HTTP Content-Type and Content-Encoding combination.\n   An HTTP request carrying\
    \ a Content-Type and Content-Encoding\n   combination that the HC Proxy is unable\
    \ to map to an equivalent CoAP\n   Content-Format SHALL elicit a 415 (Unsupported\
    \ Media Type) response\n   by the HC Proxy.\n   On the content negotiation side,\
    \ failure to map Accept and Accept-*\n   headers SHOULD be silently ignored: the\
    \ HC Proxy SHOULD therefore\n   forward as a CoAP request with no Accept option.\
    \  The HC Proxy thus\n   disregards the Accept/Accept-* header fields by treating\
    \ the response\n   as if it is not subject to content negotiation, as mentioned\
    \ in\n   Section 5.3 of [RFC7231].  However, an HC Proxy implementation is\n \
    \  free to attempt mapping a single Accept header in a GET request to\n   multiple\
    \ CoAP GET requests, each with a single Accept option, which\n   are then tried\
    \ in sequence until one succeeds.  Note that an HTTP\n   Accept */* MUST be mapped\
    \ to a CoAP request without an Accept option.\n   While the CoAP-to-HTTP direction\
    \ always has a well-defined mapping\n   (with the exception examined in Section\
    \ 6.2), the HTTP-to-CoAP\n   direction is more problematic because the source\
    \ set, i.e.,\n   potentially 1000+ IANA-registered media types, is much bigger\
    \ than\n   the destination set, i.e., the mere six values initially defined in\n\
    \   Section 12.3 of [RFC7252].\n   Depending on the tight/loose coupling with\
    \ the application(s) for\n   which it proxies, the HC Proxy could implement different\
    \ media type\n   mappings.\n   When tightly coupled, the HC Proxy knows exactly\
    \ which content-\n   formats are supported by the applications and can be strict\
    \ when\n   enforcing its forwarding policies in general, and the media type\n\
    \   mapping in particular.\n   On the other hand, when the HC Proxy is a general\
    \ purpose ALG, being\n   too strict could significantly reduce the amount of traffic\
    \ that it\n   would be able to successfully forward.  In this case, the \"loose\"\
    \n   media type mapping detailed in Section 6.3 MAY be implemented.\n   The latter\
    \ grants more evolution of the surrounding ecosystem, at the\n   cost of allowing\
    \ more attack surface.  In fact, as a result of such\n   strategy, payloads would\
    \ be forwarded more liberally across the\n   unconstrained/constrained network\
    \ boundary of the communication path.\n"
- title: 6.2.  'application/coap-payload' Media Type
  contents:
  - "6.2.  'application/coap-payload' Media Type\n   If the HC Proxy receives a CoAP\
    \ response with a Content-Format that\n   it does not recognize (e.g., because\
    \ the value has been registered\n   after the proxy has been deployed, or the\
    \ CoAP server uses an\n   experimental value that is not registered), then the\
    \ HC Proxy SHALL\n   return a generic \"application/coap-payload\" media type\
    \ with numeric\n   parameter \"cf\" as defined in Section 9.2.\n   For example,\
    \ the CoAP content-format '60' (\"application/cbor\") would\n   be represented\
    \ by \"application/coap-payload;cf=60\", if the HC Proxy\n   doesn't recognize\
    \ the content-format '60'.\n   An HTTP client may use the media type \"application/coap-payload\"\
    \ as a\n   means to send a specific content-format to a CoAP server via an HC\n\
    \   Proxy if the client has determined that the HC Proxy does not\n   directly\
    \ support the type mapping it needs.  This case may happen\n   when dealing, for\
    \ example, with newly registered, yet to be\n   registered, or experimental CoAP\
    \ content-formats.  However, unless\n   explicitly configured to allow pass-through\
    \ of unknown content-\n   formats, the HC Proxy SHOULD NOT forward requests carrying\
    \ a Content-\n   Type or Accept header with an \"application/coap-payload\", and\
    \ return\n   an appropriate client error instead.\n"
- title: 6.3.  Loose Media Type Mapping
  contents:
  - "6.3.  Loose Media Type Mapping\n   By structuring the type information in a super-class\
    \ (e.g., \"text\")\n   followed by a finer-grained sub-class (e.g., \"html\"),\
    \ and optional\n   parameters (e.g., \"charset=utf-8\"), Internet media types\
    \ provide a\n   rich and scalable framework for encoding the type of any given\n\
    \   entity.\n   This approach is not applicable to CoAP, where content-formats\n\
    \   conflate an Internet media type (potentially with specific\n   parameters)\
    \ and a content coding into one small integer value.\n   To remedy this loss of\
    \ flexibility, we introduce the concept of a\n   \"loose\" media type mapping,\
    \ where media types that are\n   specializations of a more generic media type\
    \ can be aliased to their\n   super-class and then mapped (if possible) to one\
    \ of the CoAP content-\n   formats.  For example, \"application/soap+xml\" can\
    \ be aliased to\n   \"application/xml\", which has a known conversion to CoAP.\
    \  In the\n   context of this \"loose\" media type mapping, \"application/\n \
    \  octet-stream\" can be used as a fallback when no better alias is found\n  \
    \ for a specific media type.\n   Table 1 defines the default lookup table for\
    \ the \"loose\" media type\n   mapping.  It is expected that an implementation\
    \ can refine it because\n   either application-specific knowledge is given or\
    \ new Content-Formats\n   are defined.  Given an input media type, the table returns\
    \ its best\n   generalized media type using the most specific match, i.e., the\
    \ table\n   entries are compared to the input in top to bottom order until an\n\
    \   entry matches.\n        +-----------------------------+--------------------------+\n\
    \        | Internet media type pattern | Generalized media type   |\n        +-----------------------------+--------------------------+\n\
    \        | application/*+xml           | application/xml          |\n        |\
    \ application/*+json          | application/json         |\n        | application/*+cbor\
    \          | application/cbor         |\n        | text/xml                  \
    \  | application/xml          |\n        | text/*                      | text/plain\
    \               |\n        | */*                         | application/octet-stream\
    \ |\n        +-----------------------------+--------------------------+\n    \
    \          Table 1: Media Type Generalization Lookup Table\n   The \"loose\" media\
    \ type mapping is an OPTIONAL feature.\n   Implementations supporting this kind\
    \ of mapping should provide a\n   flexible way to define the set of media type\
    \ generalizations allowed.\n"
- title: 6.4.  Media Type to Content-Format Mapping Algorithm
  contents:
  - "6.4.  Media Type to Content-Format Mapping Algorithm\n   This section defines\
    \ the algorithm used to map an HTTP Internet media\n   type to its correspondent\
    \ CoAP content-format; it can be used as a\n   building block for translating\
    \ HTTP Content-Type and Accept headers\n   into CoAP Content-Format and Accept\
    \ Options.\n   The algorithm uses an IANA-maintained table, \"CoAP Content-Formats\"\
    ,\n   as established by Section 12.3 of [RFC7252] plus, possibly, any\n   locally\
    \ defined extension of it.  Optionally, the table and lookup\n   mechanism described\
    \ in Section 6.3 can be used if the implementation\n   chooses so.\n   Note that\
    \ the algorithm assumes an \"identity\" Content-Encoding and\n   expects the resource\
    \ body has been already successfully content\n   decoded or transcoded to the\
    \ desired format.\n   In the following (Figure 2):\n   o  media_type is the media\
    \ type to translate;\n   o  coap_cf_registry is a lookup table matching the \"\
    CoAP Content-\n      Formats\" registry; and\n   o  loose_mapper is an optional\
    \ lookup table describing the loose\n      media type mappings (e.g., the one\
    \ defined in Table 1).\n   The full source code is provided in Appendix A.\n def\
    \ mt2cf(media_type, encoding=None,\n           coap_cf_registry=CoAPContentFormatRegistry(),\n\
    \           loose_mapper=None):\n     \"\"\"Return a CoAP Content-Format given\
    \ an Internet media type and\n        its optional encoding.  The current (as\
    \ of 2016/10/24) \"CoAP\n        Content-Formats\" registry is supplied by default.\
    \  An optional\n        'loose-mapping' implementation can be supplied by the\
    \ caller.\"\"\"\n     assert media_type is not None\n     assert coap_cf_registry\
    \ is not None\n     # Lookup the \"CoAP Content-Formats\" registry\n     content_format\
    \ = coap_cf_registry.lookup(media_type, encoding)\n     # If an exact match is\
    \ not found and a loose mapper has been\n     # supplied, try to use it to get\
    \ a media type with which to\n     # retry the \"CoAP Content-Formats\" registry\
    \ lookup.\n     if content_format is None and loose_mapper is not None:\n    \
    \     content_format = coap_cf_registry.lookup(\n             loose_mapper.lookup(media_type),\
    \ encoding)\n     return content_format\n                                 Figure\
    \ 2\n"
- title: 6.5.  Content Transcoding
  contents:
  - '6.5.  Content Transcoding

    '
- title: 6.5.1.  General
  contents:
  - "6.5.1.  General\n   Payload content transcoding is an OPTIONAL feature.  Implementations\n\
    \   supporting this feature should provide a flexible way to define the\n   set\
    \ of transcodings allowed.\n   The HC Proxy might decide to transcode the received\
    \ representation to\n   a different (compatible) format when an optimized version\
    \ of a\n   specific format exists.  For example, an XML-encoded resource could\n\
    \   be transcoded to Efficient XML Interchange (EXI) format, or a JSON-\n   encoded\
    \ resource into Concise Binary Object Representation (CBOR)\n   [RFC7049], effectively\
    \ achieving compression without losing any\n   information.\n   However, there\
    \ are a few important factors to keep in mind when\n   enabling a transcoding\
    \ function:\n   1.  Maliciously crafted inputs coming from the HTTP side might\n\
    \       inflate in size (see, for example, Section 4.2 of [RFC7049]),\n      \
    \ therefore creating a security threat for both the HC Proxy and\n       the target\
    \ resource.\n   2.  Transcoding can lose information in non-obvious ways.  For\n\
    \       example, encoding an XML document using schema-informed EXI\n       encoding\
    \ leads to a loss of information when the destination does\n       not know the\
    \ exact schema version used by the encoder.  That\n       means that whenever\
    \ the HC Proxy transcodes \"application/xml\" to\n       \"application/exi\",\
    \ in-band metadata could be lost.\n   3.  When the Content-Type is mapped, there\
    \ is a risk that the content\n       with the destination type would have malware\
    \ not active in the\n       source type.\n   It is crucial that these risks are\
    \ well understood and carefully\n   weighed against the actual benefits before\
    \ deploying the transcoding\n   function.\n"
- title: 6.5.2.  CoRE Link Format
  contents:
  - "6.5.2.  CoRE Link Format\n   The CoRE Link Format [RFC6690] is a set of links\
    \ (i.e., URIs and\n   their formal relationships) that is carried as content payload\
    \ in a\n   CoAP response.  These links usually include CoAP URIs that might be\n\
    \   translated by the HC Proxy to the correspondent HTTP URIs using the\n   implemented\
    \ URI mapping function (see Section 5).  Such a translation\n   process would\
    \ inspect the forwarded traffic and attempt to rewrite\n   the body of resources\
    \ with an application/link-format media type,\n   mapping the embedded CoAP URIs\
    \ to their HTTP counterparts.  Some\n   potential issues with this approach are:\n\
    \   1.  The client may be interested in retrieving original (unaltered)\n    \
    \   CoAP payloads through the HC Proxy, not modified versions.\n   2.  Tampering\
    \ with payloads is incompatible with resources that are\n       integrity protected\
    \ (although this is a problem with transcoding\n       in general).\n   3.  The\
    \ HC Proxy needs to fully understand syntax and semantics\n       defined in [RFC6690],\
    \ otherwise there is an inherent risk to\n       corrupt the payloads.\n   Therefore,\
    \ CoRE Link Format payload should only be transcoded at the\n   risk and discretion\
    \ of the proxy implementer.\n"
- title: 6.6.  Diagnostic Payloads
  contents:
  - "6.6.  Diagnostic Payloads\n   CoAP responses may, in certain error cases, contain\
    \ a diagnostic\n   message in the payload explaining the error situation, as described\n\
    \   in Section 5.5.2 of [RFC7252].  If present, the CoAP diagnostic\n   payload\
    \ SHOULD be copied into the HTTP response body with the media\n   type of the\
    \ response set to \"text/plain;charset=utf-8\".  The CoAP\n   diagnostic payload\
    \ MUST NOT be copied into the HTTP reason-phrase,\n   since it potentially contains\
    \ CR-LF characters that are incompatible\n   with HTTP reason-phrase syntax.\n"
- title: 7.  Response Code Mapping
  contents:
  - "7.  Response Code Mapping\n   Table 2 defines the HTTP response status codes\
    \ to which each CoAP\n   response code SHOULD be mapped.  Multiple HTTP status\
    \ codes in the\n   second column for a given CoAP response code indicates that\
    \ multiple\n   HTTP responses are possible for the same CoAP response code,\n\
    \   depending on the conditions cited in the Notes (see the third column\n   and\
    \ text below the table).\n   +-------------------------------+----------------------------+------+\n\
    \   | CoAP Response Code            | HTTP Status Code           | Note |\n  \
    \ +-------------------------------+----------------------------+------+\n   |\
    \ 2.01 Created                  | 201 Created                | 1    |\n   | 2.02\
    \ Deleted                  | 200 OK                     | 2    |\n   |       \
    \                        | 204 No Content             | 2    |\n   | 2.03 Valid\
    \                    | 304 Not Modified           | 3    |\n   |             \
    \                  | 200 OK                     | 4    |\n   | 2.04 Changed  \
    \                | 200 OK                     | 2    |\n   |                 \
    \              | 204 No Content             | 2    |\n   | 2.05 Content      \
    \            | 200 OK                     |      |\n   | 2.31 Continue       \
    \          | N/A                        | 10   |\n   | 4.00 Bad Request      \
    \        | 400 Bad Request            |      |\n   | 4.01 Unauthorized       \
    \      | 403 Forbidden              | 5    |\n   | 4.02 Bad Option           \
    \    | 400 Bad Request            | 6    |\n   |                             \
    \  | 500 Internal Server Error  | 6    |\n   | 4.03 Forbidden                |\
    \ 403 Forbidden              |      |\n   | 4.04 Not Found                | 404\
    \ Not Found              |      |\n   | 4.05 Method Not Allowed       | 400 Bad\
    \ Request            | 7    |\n   |                               | 405 Method\
    \ Not Allowed     | 7    |\n   | 4.06 Not Acceptable           | 406 Not Acceptable\
    \         |      |\n   | 4.08 Request Entity Incomplt. | N/A                 \
    \       | 10   |\n   | 4.12 Precondition Failed      | 412 Precondition Failed\
    \    |      |\n   | 4.13 Request Ent. Too Large   | 413 Payload Too Large    \
    \  | 11   |\n   | 4.15 Unsupported Content-Fmt. | 415 Unsupported Media Type |\
    \      |\n   | 5.00 Internal Server Error    | 500 Internal Server Error  |  \
    \    |\n   | 5.01 Not Implemented          | 501 Not Implemented        |    \
    \  |\n   | 5.02 Bad Gateway              | 502 Bad Gateway            |      |\n\
    \   | 5.03 Service Unavailable      | 503 Service Unavailable    | 8    |\n  \
    \ | 5.04 Gateway Timeout          | 504 Gateway Timeout        |      |\n   |\
    \ 5.05 Proxying Not Supported   | 502 Bad Gateway            | 9    |\n   +-------------------------------+----------------------------+------+\n\
    \                 Table 2: CoAP-HTTP Response Code Mappings\n   Notes:\n   1.\
    \   A CoAP server may return an arbitrary format payload along with\n        this\
    \ response.  If present, this payload MUST be returned as an\n        entity in\
    \ the HTTP 201 response.  Section 6.3.2 of [RFC7231]\n        does not put any\
    \ requirement on the format of the entity.  (In\n        the past, [RFC2616] did.\
    \  Note that [RFC2616] has been obsoleted\n        by [RFC7230].)\n   2.   The\
    \ HTTP code is 200 or 204, respectively, for the case where a\n        CoAP server\
    \ returns a payload or not.  [RFC7231], Section 6.3\n        requires code 200\
    \ in case a representation of the action result\n        is returned for DELETE/POST/PUT,\
    \ and code 204 if not.  Hence, a\n        proxy MUST transfer any CoAP payload\
    \ contained in a CoAP 2.02\n        response to the HTTP client using a 200 OK\
    \ response.\n   3.   HTTP code 304 (Not Modified) is sent if the HTTP client\n\
    \        performed a conditional HTTP request and the CoAP server\n        responded\
    \ with 2.03 (Valid) to the corresponding CoAP validation\n        request.  Note\
    \ that Section 4.1 of [RFC7232] puts some\n        requirements on header fields\
    \ that must be present in the HTTP\n        304 response.\n   4.   A 200 response\
    \ to a CoAP 2.03 occurs only when the HC Proxy, for\n        efficiency reasons,\
    \ is running a local cache.  An unconditional\n        HTTP GET that produces\
    \ a cache-hit could trigger a revalidation\n        (i.e., a conditional GET)\
    \ on the CoAP side.  The proxy receiving\n        2.03 updates the freshness of\
    \ its cached representation and\n        returns it to the HTTP client.\n   5.\
    \   An HTTP 401 Unauthorized (Section 3.1 of [RFC7235]) response is\n        not\
    \ applicable because there is no equivalent of\n        WWW-Authenticate in CoAP,\
    \ which is mandatory in an HTTP 401\n        response.\n   6.   If the proxy has\
    \ a way to determine that the Bad Option is due\n        to the straightforward\
    \ mapping of a client request header into a\n        CoAP option, then returning\
    \ HTTP 400 (Bad Request) is\n        appropriate.  In all other cases, the proxy\
    \ MUST return HTTP 500\n        (Internal Server Error) stating its inability\
    \ to provide a\n        suitable translation to the client's request.\n   7. \
    \  A CoAP 4.05 (Method Not Allowed) response SHOULD normally be\n        mapped\
    \ to an HTTP 400 (Bad Request) code, because the HTTP 405\n        response would\
    \ require specifying the supported methods -- which\n        are generally unknown.\
    \  In this case, the HC Proxy SHOULD also\n        return an HTTP reason-phrase\
    \ in the HTTP status line that starts\n        with the string \"CoAP server returned\
    \ 4.05\" in order to\n        facilitate troubleshooting.  However, if the HC\
    \ Proxy has more\n        granular information about the supported methods for\
    \ the\n        requested resource (e.g., via a Resource Directory ([CoRE-RD])),\n\
    \        then it MAY send back an HTTP 405 (Method Not Allowed) with a\n     \
    \   properly filled in \"Allow\" response-header field (Section 7.4.1\n      \
    \  of [RFC7231]).\n   8.   The value of the HTTP \"Retry-After\" response-header\
    \ field is\n        taken from the value of the CoAP Max-Age Option, if present.\n\
    \   9.   This CoAP response can only happen if the proxy itself is\n        configured\
    \ to use a CoAP forward-proxy (Section 5.7 of\n        [RFC7252]) to execute some,\
    \ or all, of its CoAP requests.\n   10.  Only used in CoAP block-wise transfer\
    \ [RFC7959] between HC Proxy\n        and CoAP server; never translated into an\
    \ HTTP response.\n   11.  Only returned to the HTTP client if the HC Proxy was\
    \ unable to\n        successfully complete the request by retrying it with CoAP\n\
    \        block-wise transfer; see Section 8.3.\n"
- title: 8.  Additional Mapping Guidelines
  contents:
  - '8.  Additional Mapping Guidelines

    '
- title: 8.1.  Caching and Congestion Control
  contents:
  - "8.1.  Caching and Congestion Control\n   An HC Proxy should cache CoAP responses\
    \ and reply whenever applicable\n   with a cached representation of the requested\
    \ resource.\n   If the HTTP client drops the connection after the HTTP request\
    \ was\n   made, an HC Proxy should wait for the associated CoAP response and\n\
    \   cache it if possible.  Subsequent requests to the HC Proxy for the\n   same\
    \ resource can use the result present in cache, or, if a response\n   has still\
    \ to come, the HTTP requests will wait on the open CoAP\n   request.\n   According\
    \ to [RFC7252], a proxy must limit the number of outstanding\n   requests to a\
    \ given CoAP server to NSTART.  To limit the amount of\n   aggregate traffic to\
    \ a constrained network, the HC Proxy should also\n   put a limit on the number\
    \ of concurrent CoAP requests pending on the\n   same constrained network; further\
    \ incoming requests may either be\n   queued or be dropped (returning 503 Service\
    \ Unavailable).  This limit\n   and the proxy queueing/dropping behavior should\
    \ be configurable.\n   Highly volatile resources that are being frequently requested\
    \ may be\n   observed [RFC7641] by the HC Proxy to keep their cached\n   representation\
    \ fresh while minimizing the amount of CoAP traffic in\n   the constrained network\
    \ (see Section 8.2).\n"
- title: 8.2.  Cache Refresh via Observe
  contents:
  - "8.2.  Cache Refresh via Observe\n   There are cases where using the CoAP observe\
    \ protocol [RFC7641] to\n   handle proxy cache refresh is preferable to the validation\
    \ mechanism\n   based on the entity-tag (ETag) as defined in [RFC7252].  Such\n\
    \   scenarios include sleepy CoAP nodes -- with possibly high variance in\n  \
    \ requests' distribution -- which would greatly benefit from a server-\n   driven\
    \ cache update mechanism.  Ideal candidates for CoAP observe are\n   also crowded\
    \ or very low throughput networks, where reduction of the\n   total number of\
    \ exchanged messages is an important requirement.\n   This subsection aims at\
    \ providing a practical evaluation method to\n   decide whether refreshing a cached\
    \ resource R is more efficiently\n   handled via ETag validation or by establishing\
    \ an observation on R.\n   The idea being that the HC Proxy proactively installs\
    \ an observation\n   on a \"popular enough\" resource and actively monitors:\n\
    \   a.  Its update pattern on the CoAP side\n   b.  The request pattern on the\
    \ HTTP side\n   and uses the formula below to determine whether the observation\n\
    \   should be kept alive or shut down.\n   Let T_R be the mean time between two\
    \ client requests to resource R,\n   let T_C be the mean time between two representation\
    \ changes of R, and\n   let M_R be the mean number of CoAP messages per second\
    \ exchanged to\n   and from resource R.  If we assume that the initial cost for\n\
    \   establishing the observation is negligible, an observation on R\n   reduces\
    \ M_R if and only if T_R < 2*T_C with respect to using ETag\n   validation, that\
    \ is, if and only if the mean arrival rate of requests\n   for resource R is greater\
    \ than half the change rate of R.\n   When observing the resource R, M_R is always\
    \ upper bounded by 2/T_C.\n"
- title: 8.3.  Use of CoAP Block-Wise Transfer
  contents:
  - "8.3.  Use of CoAP Block-Wise Transfer\n   An HC Proxy SHOULD support CoAP block-wise\
    \ transfers [RFC7959] to\n   allow transport of large CoAP payloads while avoiding\
    \ excessive link-\n   layer fragmentation in constrained networks and to cope\
    \ with small\n   datagram buffers in CoAP endpoints as described in [RFC7252],\n\
    \   Section 4.6.\n   An HC Proxy SHOULD attempt to retry a payload-carrying CoAP\
    \ PUT or\n   POST request with block-wise transfer if the destination CoAP server\n\
    \   responded with 4.13 (Request Entity Too Large) to the original\n   request.\
    \  An HC Proxy SHOULD attempt to use block-wise transfer when\n   sending a CoAP\
    \ PUT or POST request message that is larger than\n   BLOCKWISE_THRESHOLD bytes.\
    \  The value of BLOCKWISE_THRESHOLD is\n   implementation specific; for example,\
    \ it can be:\n   o  Calculated based on a known or typical UDP datagram buffer\
    \ size\n      for CoAP endpoints, or\n   o  Set to N times the known size of a\
    \ link-layer frame in a\n      constrained network where, e.g., N=5, or\n   o\
    \  Preset to a known IP MTU value, or\n   o  Set to a known Path MTU value.\n\
    \   The value BLOCKWISE_THRESHOLD, or the parameters from which it is\n   calculated,\
    \ should be configurable in a proxy implementation.  The\n   maximum block size\
    \ the proxy will attempt to use in CoAP requests\n   should also be configurable.\n\
    \   The HC Proxy SHOULD detect CoAP endpoints not supporting block-wise\n   transfers.\
    \  This can be done by checking for a 4.02 (Bad Option)\n   response returned\
    \ by an endpoint in response to a CoAP request with a\n   Block* Option, and subsequent\
    \ absence of the 4.02 in response to the\n   same request without Block* Options.\
    \  This allows the HC Proxy to be\n   more efficient, not attempting repeated\
    \ block-wise transfers to CoAP\n   servers that do not support it.\n"
- title: 8.4.  CoAP Multicast
  contents:
  - "8.4.  CoAP Multicast\n   An HC Proxy MAY support CoAP multicast.  If it does,\
    \ the HC Proxy\n   sends out a multicast CoAP request if the Target CoAP URI's\
    \ authority\n   is a multicast IP literal or resolves to a multicast IP address.\
    \  If\n   the HC Proxy does not support CoAP multicast, it SHOULD respond 403\n\
    \   (Forbidden) to any valid HTTP request that maps to a CoAP multicast\n   request.\n\
    \   Details related to supporting CoAP multicast are currently out of\n   scope\
    \ of this document since in a proxy scenario, an HTTP client\n   typically expects\
    \ to receive a single response, not multiple.\n   However, an HC Proxy that implements\
    \ CoAP multicast may include\n   application-specific functions to aggregate multiple\
    \ CoAP responses\n   into a single HTTP response.  We suggest using the \"application/http\"\
    \n   Internet media type (Section 8.3.2 of [RFC7230]) to enclose a set of\n  \
    \ one or more HTTP response messages, each representing the mapping of\n   one\
    \ CoAP response.\n   For further considerations related to the handling of multicast\n\
    \   requests, see Section 10.1.\n"
- title: 8.5.  Timeouts
  contents:
  - "8.5.  Timeouts\n   If the CoAP server takes a long time in responding, the HTTP\
    \ client\n   or any other proxy in between may timeout.  Further discussion of\n\
    \   timeouts in HTTP is available in Section 6.5 of [RFC7230].\n   An HC Proxy\
    \ MUST define an internal timeout for each pending CoAP\n   request, because the\
    \ CoAP server may silently die before completing\n   the request.  Assuming the\
    \ proxy uses confirmable CoAP requests, such\n   timeout value T SHOULD be\n \
    \  T = MAX_RTT + MAX_SERVER_RESPONSE_DELAY\n   where MAX_RTT is defined in [RFC7252]\
    \ and MAX_SERVER_RESPONSE_DELAY\n   is defined as the worst-case expected response\
    \ delay of the CoAP\n   server.  If unknown, a default value of 250 seconds can\
    \ be used for\n   MAX_SERVER_RESPONSE_DELAY as in Section 2.5 of [RFC7390].\n"
- title: 9.  IANA Considerations
  contents:
  - '9.  IANA Considerations

    '
- title: 9.1.  New 'core.hc' Resource Type
  contents:
  - "9.1.  New 'core.hc' Resource Type\n   This document registers a new Resource\
    \ Type (rt=) Link Target\n   Attribute, 'core.hc', in the \"Resource Type (rt=)\
    \ Link Target\n   Attribute Values\" subregistry under the \"Constrained RESTful\n\
    \   Environments (CoRE) Parameters\" registry.\n   Attribute Value: core.hc\n\
    \   Description: HTTP-to-CoAP mapping base resource.\n   Reference: See Section\
    \ 5.5 of RFC 8075.\n"
- title: 9.2.  New 'coap-payload' Internet Media Type
  contents:
  - "9.2.  New 'coap-payload' Internet Media Type\n   This document defines the \"\
    application/coap-payload\" media type with\n   a single parameter \"cf\".  This\
    \ media type represents any payload that\n   a CoAP message can carry, having\
    \ a content-format that can be\n   identified by an integer in range 0-65535 corresponding\
    \ to a CoAP\n   Content-Format parameter ([RFC7252], Section 12.3).  The parameter\n\
    \   \"cf\" is the integer defining the CoAP content-format.\n   Type name: application\n\
    \   Subtype name: coap-payload\n   Required parameters: \"cf\" (CoAP Content-Format\
    \ integer in range\n   0-65535 denoting the content-format of the CoAP payload\
    \ carried, as\n   defined by the \"CoAP Content-Formats\" subregistry that is\
    \ part of the\n   \"Constrained RESTful Environments (CoRE) Parameters\" registry).\n\
    \   Optional parameters: None\n   Encoding considerations: Common use is BINARY.\
    \  The specific CoAP\n   content-format encoding considerations for the selected\
    \ Content-\n   Format (\"cf\" parameter) apply.  The encoding can vary based on\
    \ the\n   value of the \"cf\" parameter.\n   Security considerations: The specific\
    \ CoAP content-format security\n   considerations for the selected Content-Format\
    \ (\"cf\" parameter)\n   apply.\n   Interoperability considerations: This media\
    \ type can never be used\n   directly in CoAP messages because there are no means\
    \ available to\n   encode the mandatory \"cf\" parameter in CoAP.\n   Published\
    \ specification: RFC 8075\n   Applications that use this media type: HTTP-to-CoAP\
    \ proxies.\n   Fragment identifier considerations: CoAP does not support URI\n\
    \   fragments; therefore, a CoAP payload fragment cannot be identified.\n   Fragments\
    \ are not applicable for this media type.\n   Additional information:\n      Deprecated\
    \ alias names for this type: N/A\n      Magic number(s): N/A\n      File extension(s):\
    \ N/A\n      Macintosh file type code(s): N/A\n   Person and email address to\
    \ contact for further information:\n      Esko Dijk (\"esko@ieee.org\")\n   Intended\
    \ usage: COMMON\n   Restrictions on usage:\n   An application (or user) can only\
    \ use this media type if it has to\n   represent a CoAP payload of which the specified\
    \ CoAP Content-Format\n   is an unrecognized number, such that a proper translation\
    \ directly to\n   the equivalent HTTP media type is not possible.\n   Author:\
    \ CoRE WG\n   Change controller: IETF\n   Provisional registration: No\n"
- title: 10.  Security Considerations
  contents:
  - "10.  Security Considerations\n   The security considerations in Section 9.2 of\
    \ [RFC7230] apply in full\n   to the HC Proxy.  This section discusses security\
    \ aspects and\n   requirements that are specific to the deployment and operation\
    \ of an\n   HC Proxy.\n   An HC Proxy located at the boundary of a constrained\
    \ network is an\n   easy single point of failure for reducing availability.  As\
    \ such,\n   special care should be taken in designing, developing, and operating\n\
    \   it, keeping in mind that, in most cases, it has fewer limitations\n   than\
    \ the constrained devices it is serving.  In particular, its\n   quality of implementation\
    \ and operation -- i.e., use of current\n   software development practices, careful\
    \ selection of third-party\n   libraries, sane configuration defaults, and an\
    \ expedited way to\n   upgrade a running instance -- are all essential attributes\
    \ of the HC\n   Proxy.\n   The correctness of request parsing in general (including\
    \ any content\n   transcoding), and of URI translation in particular, is essential\
    \ to\n   the security of the HC Proxy function.  This is especially true when\n\
    \   the constrained network hosts devices with genuinely limited\n   capabilities.\
    \  For this purpose, see also Sections 9.3, 9.4, 9.5 and\n   9.6 of [RFC7230]\
    \ for well-known issues related to HTTP request\n   parsing and Section 11.1 of\
    \ [RFC7252] for an overview of CoAP-\n   specific concerns related to URI processing\
    \ -- in particular, the\n   potential impact on access control mechanisms that\
    \ are based on URIs.\n   An HC Proxy MUST implement Transport Layer Security (TLS)\
    \ with a Pre-\n   Shared Key (PSK) [RFC4279] and SHOULD implement TLS [RFC5246]\
    \ with\n   support for client authentication using X.509 certificates.  A\n  \
    \ prerequisite of the latter is the availability of a Certification\n   Authority\
    \ (CA) to issue suitable certificates.  Although this can be\n   a challenging\
    \ requirement in certain application scenarios, it is\n   worth noting that there\
    \ exist open-source tools (e.g., [OpenSSL])\n   that can be used to set up and\
    \ operate an application-specific CA.\n   By default, the HC Proxy MUST authenticate\
    \ all incoming requests\n   prior to forwarding them to the CoAP server.  This\
    \ default behavior\n   MAY be explicitly disabled by an administrator.\n   The\
    \ following subparagraphs categorize and discuss a set of specific\n   security\
    \ issues related to the translation, caching, and forwarding\n   functionality\
    \ exposed by an HC Proxy.\n"
- title: 10.1.  Multicast
  contents:
  - "10.1.  Multicast\n   Multicast requests impose a non-trivial cost on the constrained\n\
    \   network and endpoints and might be exploited as a DoS attack vector\n   (see\
    \ also Section 10.2).  From a privacy perspective, they can be\n   used to gather\
    \ detailed information about the resources hosted in the\n   constrained network.\
    \  For example, an outsider that is able to\n   successfully query the \"/.well-known/core\"\
    \ resource could obtain a\n   comprehensive list of the target's home appliances\
    \ and devices.  From\n   a security perspective, they can be used to carry out\
    \ a network\n   reconnaissance attack to gather information about possible\n \
    \  vulnerabilities that could be exploited at a later point in time.\n   For these\
    \ reasons, it is RECOMMENDED that requests to multicast\n   resources are access\
    \ controlled with a default-deny policy.  It is\n   RECOMMENDED that the requestor\
    \ of a multicast resource be strongly\n   authenticated.  If privacy and/or security\
    \ are first class\n   requirements, for example, whenever the HTTP request transits\
    \ through\n   the public Internet, the request SHOULD be transported over a\n\
    \   mutually authenticated and encrypted TLS connection.\n"
- title: 10.2.  Traffic Overflow
  contents:
  - "10.2.  Traffic Overflow\n   Due to the typically constrained nature of CoAP nodes,\
    \ particular\n   attention should be given to the implementation of traffic reduction\n\
    \   mechanisms (see Section 8.1), because an inefficient proxy\n   implementation\
    \ can be targeted by unconstrained Internet attackers.\n   Bandwidth or complexity\
    \ involved in such attacks is very low.\n   An amplification attack to the constrained\
    \ network may be triggered\n   by a multicast request generated by a single HTTP\
    \ request that is\n   mapped to a CoAP multicast resource, as discussed in Section\
    \ 11.3 of\n   [RFC7252].\n   The risk likelihood of this amplification technique\
    \ is higher than an\n   amplification attack carried out by a malicious constrained\
    \ device\n   (e.g., ICMPv6 flooding, like Packet Too Big, or Parameter Problem\
    \ on\n   a multicast destination [RFC4732]) since it does not require direct\n\
    \   access to the constrained network.\n   The feasibility of this attack, which\
    \ disrupts availability of the\n   targeted CoAP server, can be limited by access\
    \ controlling the\n   exposed multicast resources, so that only known/authorized\
    \ users can\n   access such URIs.\n"
- title: 10.3.  Handling Secured Exchanges
  contents:
  - "10.3.  Handling Secured Exchanges\n   An HTTP request can be sent to the HC Proxy\
    \ over a secured\n   connection.  However, there may not always exist a secure\
    \ connection\n   mapping to CoAP.  For example, a secure distribution method for\n\
    \   multicast traffic is complex and may not be implemented (see\n   [RFC7390]).\n\
    \   An HC Proxy should implement rules for security context translations.\n  \
    \ For example, all 'https' unicast requests are translated to 'coaps'\n   requests,\
    \ or 'https' requests are translated to unsecured 'coap'\n   requests.  Another\
    \ rule could specify the security policy and\n   parameters used for Datagram\
    \ Transport Layer Security (DTLS) sessions\n   [RFC7925].  Such rules will largely\
    \ depend on the application and\n   network context in which the HC Proxy operates.\
    \  These rules should\n   be configurable.\n   It is RECOMMENDED that, by default,\
    \ accessing a 'coaps' URI is only\n   allowed from a corresponding 'https' URI.\n\
    \   By default, an HC Proxy SHOULD reject any secured CoAP client request\n  \
    \ (i.e., one with a 'coaps' scheme) if there is no configured security\n   policy\
    \ mapping.  This recommendation may be relaxed in case the\n   destination network\
    \ is believed to be secured by other means.\n   Assuming that CoAP nodes are isolated\
    \ behind a firewall as in the HC\n   Proxy deployment shown in Figure 1, the HC\
    \ Proxy may be configured to\n   translate the incoming HTTPS request using plain\
    \ CoAP (NoSec mode).\n"
- title: 10.4.  URI Mapping
  contents:
  - "10.4.  URI Mapping\n   The following risks related to the URI mapping described\
    \ in Section 5\n   and its use by an HC Proxy have been identified:\n   DoS attack\
    \ on the constrained/CoAP network.\n      Mitigation: by default, deny any Target\
    \ CoAP URI whose authority\n      is (or maps to) a multicast address.  Then explicitly\
    \ whitelist\n      multicast resources/authorities that are allowed to be\n  \
    \    dereferenced.  See also Section 8.4.\n   Leaking information on the constrained/CoAP\
    \ network resources and\n      topology.\n      Mitigation: by default, deny any\
    \ Target CoAP URI (especially\n      \"/.well-known/core\" is a resource to be\
    \ protected), and then\n      explicitly whitelist resources that are allowed\
    \ to be seen by\n      clients outside the constrained network.\n   The CoAP target\
    \ resource is totally transparent from outside the\n      constrained network.\n\
    \      Mitigation: implement an HTTPS-only interface, which makes the\n      Target\
    \ CoAP URI totally opaque to a passive attacker outside the\n      constrained\
    \ network.\n"
- title: 11.  References
  contents:
  - '11.  References

    '
- title: 11.1.  Normative References
  contents:
  - "11.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n  \
    \            DOI 10.17487/RFC2119, March 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n\
    \   [RFC3986]  Berners-Lee, T., Fielding, R., and L. Masinter, \"Uniform\n   \
    \           Resource Identifier (URI): Generic Syntax\", STD 66,\n           \
    \   RFC 3986, DOI 10.17487/RFC3986, January 2005,\n              <http://www.rfc-editor.org/info/rfc3986>.\n\
    \   [RFC4279]  Eronen, P., Ed. and H. Tschofenig, Ed., \"Pre-Shared Key\n    \
    \          Ciphersuites for Transport Layer Security (TLS)\",\n              RFC\
    \ 4279, DOI 10.17487/RFC4279, December 2005,\n              <http://www.rfc-editor.org/info/rfc4279>.\n\
    \   [RFC5234]  Crocker, D., Ed. and P. Overell, \"Augmented BNF for Syntax\n \
    \             Specifications: ABNF\", STD 68, RFC 5234,\n              DOI 10.17487/RFC5234,\
    \ January 2008,\n              <http://www.rfc-editor.org/info/rfc5234>.\n   [RFC5246]\
    \  Dierks, T. and E. Rescorla, \"The Transport Layer Security\n              (TLS)\
    \ Protocol Version 1.2\", RFC 5246,\n              DOI 10.17487/RFC5246, August\
    \ 2008,\n              <http://www.rfc-editor.org/info/rfc5246>.\n   [RFC6570]\
    \  Gregorio, J., Fielding, R., Hadley, M., Nottingham, M.,\n              and\
    \ D. Orchard, \"URI Template\", RFC 6570,\n              DOI 10.17487/RFC6570,\
    \ March 2012,\n              <http://www.rfc-editor.org/info/rfc6570>.\n   [RFC6690]\
    \  Shelby, Z., \"Constrained RESTful Environments (CoRE) Link\n              Format\"\
    , RFC 6690, DOI 10.17487/RFC6690, August 2012,\n              <http://www.rfc-editor.org/info/rfc6690>.\n\
    \   [RFC7230]  Fielding, R., Ed. and J. Reschke, Ed., \"Hypertext Transfer\n \
    \             Protocol (HTTP/1.1): Message Syntax and Routing\",\n           \
    \   RFC 7230, DOI 10.17487/RFC7230, June 2014,\n              <http://www.rfc-editor.org/info/rfc7230>.\n\
    \   [RFC7231]  Fielding, R., Ed. and J. Reschke, Ed., \"Hypertext Transfer\n \
    \             Protocol (HTTP/1.1): Semantics and Content\", RFC 7231,\n      \
    \        DOI 10.17487/RFC7231, June 2014,\n              <http://www.rfc-editor.org/info/rfc7231>.\n\
    \   [RFC7232]  Fielding, R., Ed. and J. Reschke, Ed., \"Hypertext Transfer\n \
    \             Protocol (HTTP/1.1): Conditional Requests\", RFC 7232,\n       \
    \       DOI 10.17487/RFC7232, June 2014,\n              <http://www.rfc-editor.org/info/rfc7232>.\n\
    \   [RFC7235]  Fielding, R., Ed. and J. Reschke, Ed., \"Hypertext Transfer\n \
    \             Protocol (HTTP/1.1): Authentication\", RFC 7235,\n             \
    \ DOI 10.17487/RFC7235, June 2014,\n              <http://www.rfc-editor.org/info/rfc7235>.\n\
    \   [RFC7252]  Shelby, Z., Hartke, K., and C. Bormann, \"The Constrained\n   \
    \           Application Protocol (CoAP)\", RFC 7252,\n              DOI 10.17487/RFC7252,\
    \ June 2014,\n              <http://www.rfc-editor.org/info/rfc7252>.\n   [RFC7641]\
    \  Hartke, K., \"Observing Resources in the Constrained\n              Application\
    \ Protocol (CoAP)\", RFC 7641,\n              DOI 10.17487/RFC7641, September\
    \ 2015,\n              <http://www.rfc-editor.org/info/rfc7641>.\n   [RFC7959]\
    \  Bormann, C. and Z. Shelby, Ed., \"Block-Wise Transfers in\n              the\
    \ Constrained Application Protocol (CoAP)\", RFC 7959,\n              DOI 10.17487/RFC7959,\
    \ August 2016,\n              <http://www.rfc-editor.org/info/rfc7959>.\n"
- title: 11.2.  Informative References
  contents:
  - "11.2.  Informative References\n   [CoRE-JSON-CBOR]\n              Li, K., Rahman,\
    \ A., and C. Bormann, \"Representing CoRE\n              Formats in JSON and CBOR\"\
    , Work in Progress, draft-ietf-\n              core-links-json-06, July 2016.\n\
    \   [CoRE-RD]  Shelby, Z., Koster, M., Bormann, C., and P. Stok, \"CoRE\n    \
    \          Resource Directory\", Work in Progress, draft-ietf-core-\n        \
    \      resource-directory-09, October 2016.\n   [Fielding] Fielding, R., \"Architectural\
    \ Styles and the Design of\n              Network-based Software Architectures\"\
    , PhD\n              Dissertation, University of California, Irvine,\n       \
    \       ISBN 0-599-87118-0, 2000.\n   [OpenSSL]  The OpenSSL Project, , \"ca -\
    \ sample minimal CA\n              application\", 2000-2016,\n              <https://www.openssl.org/docs/manmaster/man1/ca.html>.\n\
    \   [RFC2616]  Fielding, R., Gettys, J., Mogul, J., Frystyk, H.,\n           \
    \   Masinter, L., Leach, P., and T. Berners-Lee, \"Hypertext\n              Transfer\
    \ Protocol -- HTTP/1.1\", RFC 2616,\n              DOI 10.17487/RFC2616, June\
    \ 1999,\n              <http://www.rfc-editor.org/info/rfc2616>.\n   [RFC2663]\
    \  Srisuresh, P. and M. Holdrege, \"IP Network Address\n              Translator\
    \ (NAT) Terminology and Considerations\",\n              RFC 2663, DOI 10.17487/RFC2663,\
    \ August 1999,\n              <http://www.rfc-editor.org/info/rfc2663>.\n   [RFC3040]\
    \  Cooper, I., Melve, I., and G. Tomlinson, \"Internet Web\n              Replication\
    \ and Caching Taxonomy\", RFC 3040,\n              DOI 10.17487/RFC3040, January\
    \ 2001,\n              <http://www.rfc-editor.org/info/rfc3040>.\n   [RFC4732]\
    \  Handley, M., Ed., Rescorla, E., Ed., and IAB, \"Internet\n              Denial-of-Service\
    \ Considerations\", RFC 4732,\n              DOI 10.17487/RFC4732, December 2006,\n\
    \              <http://www.rfc-editor.org/info/rfc4732>.\n   [RFC6454]  Barth,\
    \ A., \"The Web Origin Concept\", RFC 6454,\n              DOI 10.17487/RFC6454,\
    \ December 2011,\n              <http://www.rfc-editor.org/info/rfc6454>.\n  \
    \ [RFC7049]  Bormann, C. and P. Hoffman, \"Concise Binary Object\n           \
    \   Representation (CBOR)\", RFC 7049, DOI 10.17487/RFC7049,\n              October\
    \ 2013, <http://www.rfc-editor.org/info/rfc7049>.\n   [RFC7228]  Bormann, C.,\
    \ Ersue, M., and A. Keranen, \"Terminology for\n              Constrained-Node\
    \ Networks\", RFC 7228,\n              DOI 10.17487/RFC7228, May 2014,\n     \
    \         <http://www.rfc-editor.org/info/rfc7228>.\n   [RFC7390]  Rahman, A.,\
    \ Ed. and E. Dijk, Ed., \"Group Communication for\n              the Constrained\
    \ Application Protocol (CoAP)\", RFC 7390,\n              DOI 10.17487/RFC7390,\
    \ October 2014,\n              <http://www.rfc-editor.org/info/rfc7390>.\n   [RFC7925]\
    \  Tschofenig, H., Ed. and T. Fossati, \"Transport Layer\n              Security\
    \ (TLS) / Datagram Transport Layer Security (DTLS)\n              Profiles for\
    \ the Internet of Things\", RFC 7925,\n              DOI 10.17487/RFC7925, July\
    \ 2016,\n              <http://www.rfc-editor.org/info/rfc7925>.\n   [W3C.REC-html5-20141028]\n\
    \              Hickson, I., Berjon, R., Faulkner, S., Leithead, T.,\n        \
    \      Navara, E., O'Connor, E., and S. Pfeiffer, \"HTML5\", World\n         \
    \     Wide Web Consortium Recommendation REC-html5-20141028,\n              October\
    \ 2014,\n              <http://www.w3.org/TR/2014/REC-html5-20141028>.\n"
- title: Appendix A.  Media Type Mapping Source Code
  contents:
  - 'Appendix A.  Media Type Mapping Source Code

    '
- title: '#!/usr/bin/env python'
  contents:
  - '#!/usr/bin/env python

    '
- title: import unittest
  contents:
  - 'import unittest

    '
- title: import re
  contents:
  - 'import re

    '
- title: 'class CoAPContentFormatRegistry(object):'
  contents:
  - "class CoAPContentFormatRegistry(object):\n    \"\"\"Map an Internet media type\
    \ (and optional inherent encoding) to a\n       CoAP Content-Format.\n    \"\"\
    \"\n    TEXT_PLAIN = 0\n    LINK_FORMAT = 40\n    XML = 41\n    OCTET_STREAM =\
    \ 42\n    EXI = 47\n    JSON = 50\n    CBOR = 60\n    GROUP_JSON = 256\n"
- title: '# http://www.iana.org/assignments/core-parameters'
  contents:
  - '# http://www.iana.org/assignments/core-parameters

    '
- title: '# as of 2016/10/24.'
  contents:
  - "# as of 2016/10/24.\n    LOOKUP_TABLE = {\n        (\"text/plain;charset=utf-8\"\
    , None): TEXT_PLAIN,\n        (\"application/link-format\", None): LINK_FORMAT,\n\
    \        (\"application/xml\", None): XML,\n        (\"application/octet-stream\"\
    , None): OCTET_STREAM,\n        (\"application/exi\", None): EXI,\n        (\"\
    application/json\", None): JSON,\n        (\"application/cbor\", None): CBOR,\n\
    \        (\"application/coap-group+json\", \"utf-8\"): GROUP_JSON,\n    }\n  \
    \  def lookup(self, media_type, encoding):\n        \"\"\"Return the CoAP Content-Format\
    \ matching the supplied\n           media type (and optional encoding), or None\
    \ if no\n           match can be found.\"\"\"\n        return CoAPContentFormatRegistry.LOOKUP_TABLE.get(\n\
    \            (media_type, encoding), None)\n"
- title: 'class LooseMediaTypeMapper(object):'
  contents:
  - "class LooseMediaTypeMapper(object):\n    # Order matters in this table: more\
    \ specific types have higher rank\n    # compared to less specific types.\n  \
    \  # This code only performs a shallow validation of acceptable\n    # characters\
    \ and assumes overall validation of the media type and\n    # subtype has been\
    \ done beforehand.\n    LOOKUP_TABLE = [\n        (re.compile(\"application/.+\\\
    +xml$\"), \"application/xml\"),\n        (re.compile(\"application/.+\\+json$\"\
    ), \"application/json\"),\n        (re.compile(\"application/.+\\+cbor$\"), \"\
    application/cbor\"),\n        (re.compile(\"text/xml$\"), \"application/xml\"\
    ),\n        (re.compile(\"text/[a-z\\.\\-\\+]+$\"), \"text/plain;charset=utf-8\"\
    ),\n        (re.compile(\"[a-z]+/[a-z\\.\\-\\+]+$\"), \"application/octet-stream\"\
    )\n    ]\n    def lookup(self, media_type):\n        \"\"\"Return the best loose\
    \ media type match available using\n           the contents of LOOKUP_TABLE.\"\
    \"\"\n        for entry in LooseMediaTypeMapper.LOOKUP_TABLE:\n            if\
    \ entry[0].match(media_type) is not None:\n                return entry[1]\n \
    \       return None\n"
- title: def mt2cf(media_type, encoding=None,
  contents:
  - "def mt2cf(media_type, encoding=None,\n          coap_cf_registry=CoAPContentFormatRegistry(),\n\
    \          loose_mapper=None):\n    \"\"\"Return a CoAP Content-Format given an\
    \ Internet media type and\n       its optional encoding.  The current (as of 2016/10/24)\
    \ \"CoAP\n       Content-Formats\" registry is supplied by default.  An optional\n\
    \       'loose-mapping' implementation can be supplied by the caller.\"\"\"\n\
    \    assert media_type is not None\n    assert coap_cf_registry is not None\n\
    \    # Lookup the \"CoAP Content-Formats\" registry\n    content_format = coap_cf_registry.lookup(media_type,\
    \ encoding)\n    # If an exact match is not found and a loose mapper has been\n\
    \    # supplied, try to use it to get a media type with which to\n    # retry\
    \ the \"CoAP Content-Formats\" registry lookup.\n    if content_format is None\
    \ and loose_mapper is not None:\n        content_format = coap_cf_registry.lookup(\n\
    \            loose_mapper.lookup(media_type), encoding)\n    return content_format\n"
- title: 'class TestMT2CF(unittest.TestCase):'
  contents:
  - "class TestMT2CF(unittest.TestCase):\n    def testMissingContentType(self):\n\
    \        with self.assertRaises(AssertionError):\n            mt2cf(None)\n  \
    \  def testMissingContentFormatRegistry(self):\n        with self.assertRaises(AssertionError):\n\
    \            mt2cf(None, coap_cf_registry=None)\n    def testTextPlain(self):\n\
    \        self.assertEqual(mt2cf(\"text/plain;charset=utf-8\"),\n             \
    \            CoAPContentFormatRegistry.TEXT_PLAIN)\n    def testLinkFormat(self):\n\
    \        self.assertEqual(mt2cf(\"application/link-format\"),\n              \
    \           CoAPContentFormatRegistry.LINK_FORMAT)\n    def testXML(self):\n \
    \       self.assertEqual(mt2cf(\"application/xml\"),\n                       \
    \  CoAPContentFormatRegistry.XML)\n    def testOctetStream(self):\n        self.assertEqual(mt2cf(\"\
    application/octet-stream\"),\n                         CoAPContentFormatRegistry.OCTET_STREAM)\n\
    \    def testEXI(self):\n        self.assertEqual(mt2cf(\"application/exi\"),\n\
    \                         CoAPContentFormatRegistry.EXI)\n    def testJSON(self):\n\
    \        self.assertEqual(mt2cf(\"application/json\"),\n                     \
    \    CoAPContentFormatRegistry.JSON)\n    def testCBOR(self):\n        self.assertEqual(mt2cf(\"\
    application/cbor\"),\n                         CoAPContentFormatRegistry.CBOR)\n\
    \    def testCoAPGroupJSON(self):\n        self.assertEqual(mt2cf(\"application/coap-group+json\"\
    ,\n                               \"utf-8\"),\n                         CoAPContentFormatRegistry.GROUP_JSON)\n\
    \    def testUnknownMediaType(self):\n        self.assertFalse(mt2cf(\"unknown/media-type\"\
    ))\n    def testLooseXML1(self):\n        self.assertEqual(\n            mt2cf(\n\
    \                \"application/somesubtype+xml\",\n                loose_mapper=LooseMediaTypeMapper()),\n\
    \            CoAPContentFormatRegistry.XML)\n    def testLooseXML2(self):\n  \
    \      self.assertEqual(\n            mt2cf(\n                \"text/xml\",\n\
    \                loose_mapper=LooseMediaTypeMapper()),\n            CoAPContentFormatRegistry.XML)\n\
    \    def testLooseJSON(self):\n        self.assertEqual(\n            mt2cf(\n\
    \                \"application/somesubtype+json\",\n                loose_mapper=LooseMediaTypeMapper()),\n\
    \            CoAPContentFormatRegistry.JSON)\n    def testLooseCBOR(self):\n \
    \       self.assertEqual(\n            mt2cf(\n                \"application/somesubtype+cbor\"\
    ,\n                loose_mapper=LooseMediaTypeMapper()),\n            CoAPContentFormatRegistry.CBOR)\n\
    \    def testLooseText(self):\n        self.assertEqual(\n            mt2cf(\n\
    \                \"text/somesubtype\",\n                loose_mapper=LooseMediaTypeMapper()),\n\
    \            CoAPContentFormatRegistry.TEXT_PLAIN)\n    def testLooseUnknown(self):\n\
    \        self.assertEqual(\n            mt2cf(\n                \"application/somesubtype-of-some-sort+format\"\
    ,\n                loose_mapper=LooseMediaTypeMapper()),\n            CoAPContentFormatRegistry.OCTET_STREAM)\n\
    \    def testLooseInvalidStartsWithNonAlpha(self):\n        self.assertFalse(\n\
    \            mt2cf(\n                \" application/somesubtype\",\n         \
    \       loose_mapper=LooseMediaTypeMapper()))\n    def testLooseInvalidEndsWithUnexpectedChar(self):\n\
    \        self.assertFalse(\n            mt2cf(\n                \"application/somesubtype\
    \ \",\n                loose_mapper=LooseMediaTypeMapper()))\n    def testLooseInvalidUnexpectedCharInTheMiddle(self):\n\
    \        self.assertFalse(\n            mt2cf(\n                \"application\
    \ /somesubtype\",\n                loose_mapper=LooseMediaTypeMapper()))\n   \
    \ def testLooseInvalidNoSubType1(self):\n        self.assertFalse(\n         \
    \   mt2cf(\n                \"application\",\n                loose_mapper=LooseMediaTypeMapper()))\n\
    \    def testLooseInvalidNoSubType2(self):\n        self.assertFalse(\n      \
    \      mt2cf(\n                \"application/\",\n                loose_mapper=LooseMediaTypeMapper()))\n"
- title: 'if __name__ == "__main__":'
  contents:
  - "if __name__ == \"__main__\":\n    unittest.main(verbosity=2)\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   An initial version of Table 2 in Section 7 has been provided\
    \ in\n   revision -05 of the CoRE CoAP I-D.  Special thanks to Peter van der\n\
    \   Stok for countless comments and discussions on this document that\n   contributed\
    \ to its current structure and text.\n   Thanks to Abhijan Bhattacharyya, Alexey\
    \ Melnikov, Brian Frank,\n   Carsten Bormann, Christian Amsuess, Christian Groves,\
    \ Cullen\n   Jennings, Dorothy Gellert, Francesco Corazza, Francis Dupont, Hannes\n\
    \   Tschofenig, Jaime Jimenez, Kathleen Moriarty, Kepeng Li, Kerry Lynn,\n   Klaus\
    \ Hartke, Larry Masinter, Linyi Tian, Michele Rossi, Michele\n   Zorzi, Nicola\
    \ Bui, Peter Saint-Andre, Sean Leonard, Spencer Dawkins,\n   Stephen Farrell,\
    \ Suresh Krishnan, and Zach Shelby for helpful\n   comments and discussions that\
    \ have shaped the document.\n   The research leading to these results has received\
    \ funding from the\n   European Community's Seventh Framework Programme [FP7/2007-2013]\n\
    \   under grant agreement n.251557.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Angelo P. Castellani\n   University of Padova\n   Via\
    \ Gradenigo 6/B\n   Padova  35131\n   Italy\n   Email: angelo@castellani.net\n\
    \   Salvatore Loreto\n   Ericsson\n   Hirsalantie 11\n   Jorvas  02420\n   Finland\n\
    \   Email: salvatore.loreto@ericsson.com\n   Akbar Rahman\n   InterDigital Communications,\
    \ LLC\n   1000 Sherbrooke Street West\n   Montreal  H3A 3G4\n   Canada\n   Phone:\
    \ +1 514 585 0761\n   Email: Akbar.Rahman@InterDigital.com\n   Thomas Fossati\n\
    \   Nokia\n   3 Ely Road\n   Milton, Cambridge  CB24 6DD\n   United Kingdom\n\
    \   Email: thomas.fossati@nokia.com\n   Esko Dijk\n   Philips Lighting\n   High\
    \ Tech Campus 7\n   Eindhoven  5656 AE\n   The Netherlands\n   Email: esko.dijk@philips.com\n"
