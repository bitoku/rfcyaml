- contents:
  - '          The Minimum Rank with Hysteresis Objective Function

    '
  title: __initial_text__
- contents:
  - "Abstract\n   The Routing Protocol for Low-Power and Lossy Networks (RPL)\n   constructs
    routes by using Objective Functions that optimize or\n   constrain the routes
    it selects and uses.  This specification\n   describes the Minimum Rank with Hysteresis
    Objective Function\n   (MRHOF), an Objective Function that selects routes that
    minimize a\n   metric, while using hysteresis to reduce churn in response to small\n
    \  metric changes.  MRHOF works with additive metrics along a route, and\n   the
    metrics it uses are determined by the metrics that the RPL\n   Destination Information
    Object (DIO) messages advertise.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6719.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2012 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .
    . . . . . .  2\n   2.  Terminology  . . . . . . . . . . . . . . . . . . . . .
    . . . .  3\n   3.  The Minimum Rank with Hysteresis Objective Function  . . .
    . .  4\n     3.1.  Computing the Path Cost  . . . . . . . . . . . . . . . . .
    \ 4\n     3.2.  Parent Selection . . . . . . . . . . . . . . . . . . . . .  5\n
    \      3.2.1.  When Parent Selection Runs . . . . . . . . . . . . . .  6\n       3.2.2.
    \ Parent Selection Algorithm . . . . . . . . . . . . . .  6\n     3.3.  Computing
    Rank . . . . . . . . . . . . . . . . . . . . . .  7\n     3.4.  Advertising the
    Path Cost  . . . . . . . . . . . . . . . .  8\n     3.5.  Working without Metric
    Containers  . . . . . . . . . . . .  8\n   4.  Using MRHOF for Metric Maximization
    \ . . . . . . . . . . . . .  9\n   5.  MRHOF Variables and Parameters . . . .
    . . . . . . . . . . . .  9\n   6.  Manageability  . . . . . . . . . . . . . .
    . . . . . . . . . . 10\n     6.1.  Device Configuration . . . . . . . . . . .
    . . . . . . . . 10\n     6.2.  Device Monitoring  . . . . . . . . . . . . . .
    . . . . . . 11\n   7.  Acknowledgements . . . . . . . . . . . . . . . . . . .
    . . . . 12\n   8.  IANA Considerations  . . . . . . . . . . . . . . . . . . .
    . . 12\n   9.  Security Considerations  . . . . . . . . . . . . . . . . . . .
    12\n   10. References . . . . . . . . . . . . . . . . . . . . . . . . . . 12\n
    \    10.1. Normative References . . . . . . . . . . . . . . . . . . . 12\n     10.2.
    Informative References . . . . . . . . . . . . . . . . . . 13\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   An Objective Function specifies how RPL [RFC6550] selects
    paths.  For\n   example, if an RPL instance uses an Objective Function that minimizes\n
    \  hop count, RPL will select paths with a minimum hop count.  RPL\n   requires
    that all nodes in a network use a common Objective Function;\n   relaxing this
    requirement may be a subject of future study.\n   The nodes running RPL might
    use a number of metrics to describe a\n   link or a node [RFC6551] and make these
    metrics available for route\n   selection.  RPL advertises metrics in RPL Destination
    Information\n   Object (DIO) messages with a Metric Container suboption.  An\n
    \  Objective Function can use these metrics to choose routes.\n   To decouple
    the details of an individual metric or Objective Function\n   from forwarding
    and routing, RPL describes routes through a value\n   called Rank.  Rank, roughly
    speaking, corresponds to the distance\n   associated with a route.  RPL defines
    how nodes decide on paths based\n   on Rank and advertise their Rank.  An Objective
    Function defines how\n   nodes calculate Rank, based on the Rank of its potential
    parents,\n   metrics, and other network properties.\n   This specification describes
    the Minimum Rank with Hysteresis\n   Objective Function (MRHOF), an Objective
    Function for RPL, which uses\n   hysteresis while selecting the path with the
    smallest metric value.\n   The metric that MRHOF uses is determined by the metrics
    in the DIO\n   Metric Container.  For example, the use of MRHOF with the latency\n
    \  metric allows RPL to find stable minimum-latency paths from the nodes\n   to
    a root in the Directed Acyclic Graph (DAG) instance [RFC6550].\n   The use of
    MRHOF with the Expected Transmission Count (ETX) metric\n   [RFC6551] allows RPL
    to find the stable minimum-ETX paths from the\n   nodes to a root in the DAG instance.
    \ In the absence of a metric in\n   the DIO Metric Container or of a DIO Metric
    Container, MRHOF defaults\n   to using ETX to compute Rank, as described in Section
    3.5.\n   Because MRHOF seeks to minimize path costs as described by metrics,\n
    \  it can only be used with additive metrics.  MRHOF does not support\n   metrics
    that are not additive.\n"
  title: 1.  Introduction
- contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
    \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\",
    \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted as described
    in RFC\n   2119 [RFC2119].\n   The terminologies used in this document are consistent
    with the\n   terminologies described in [ROLL-TERM] and [RFC6551].\n   The terminologies
    used in this document are also consistent with the\n   terminologies described
    in [RFC6550], except the term Rank.  In this\n   document, Rank refers to the
    value of the Rank field, not DAGRank as\n   in [RFC6550].\n   This document introduces
    three terms:\n   Selected metric:  The metric chosen for path selection by the
    network\n      operator.  MRHOF supports using a single metric for path\n      selection.
    \ The decision to use a metric (other than ETX) as the\n      selected metric
    is indicated by the presence of the chosen metric\n      in the DIO Metric Container.
    \ The selection of the ETX metric is\n      indicated by the absence of the Metric
    Container, in which case\n      ETX is advertised as Rank.\n   Path cost:  Path
    cost quantifies a property of an end-to-end path.\n      Path cost is obtained
    by each node summing up the selected link\n      metric to the path cost advertised
    by the parent.  Path cost can\n      be used by RPL to compare different paths.\n
    \  Worst parent:  The node in the parent set with the largest path cost.\n"
  title: 2.  Terminology
- contents:
  - "3.  The Minimum Rank with Hysteresis Objective Function\n   The Minimum Rank
    with Hysteresis Objective Function, MRHOF, is\n   designed to find the paths with
    the smallest path cost while\n   preventing excessive churn in the network.  It
    does so by using two\n   mechanisms.  First, it finds the minimum cost path, i.e.,
    path with\n   the minimum Rank.  Second, it switches to that minimum Rank path
    only\n   if it is shorter (in terms of path cost) than the current path by at\n
    \  least a given threshold.  This second mechanism is called\n   \"hysteresis\".\n
    \  MRHOF may be used with any additive metric listed in [RFC6551] as\n   long
    as the routing objective is to minimize the given routing\n   metric.  Nodes MUST
    support at least one of these metrics: hop count,\n   latency, or ETX.  Nodes
    SHOULD support the ETX metric.  MRHOF does\n   not support non-additive metrics.\n"
  - contents:
    - "3.1.  Computing the Path Cost\n   Root nodes (Grounded or Floating) set the
      variable cur_min_path_cost\n   to the metric value that computes to a Rank of
      MinHopRankIncrease.\n   If a non-root node does not have metrics to compute
      the path cost\n   through any of the candidate neighbors, it MUST join one of
      the\n   candidate neighbors as a RPL Leaf.\n   Otherwise, nodes compute the
      path cost for each candidate neighbor\n   reachable on an interface.  The path
      cost of a neighbor represents\n   the cost of the path, in terms of the selected
      metric, from a node to\n   the root of the Destination-Oriented DAG (DODAG)
      through that\n   neighbor.  A non-root node computes a neighbor's path cost
      by adding\n   two components:\n   1.  If the selected metric is a link metric,
      the selected metric for\n       the link to the candidate neighbor.  If the
      selected metric is a\n       node metric, the selected metric for the node.\n
      \  2.  The value of the selected metric in the Metric Container in the\n       DIO
      sent by that neighbor.  In case the Metric Container is\n       empty, ETX is
      the selected metric -- use the Rank advertised by\n       that neighbor as the
      second component.  See Section 3.5 for\n       details on how an ETX metric
      is used in MRHOF.\n   A node SHOULD compute the path cost for the path through
      each\n   candidate neighbor reachable through an interface.  If a node cannot\n
      \  compute the path cost for the path through a candidate neighbor, the\n   node
      MUST NOT select the candidate neighbor as its preferred parent.\n   However,
      if the node cannot compute the path cost through any\n   neighbor, it may join
      the candidate neighbor as a Leaf, as described\n   above.\n   If the selected
      metric is a link metric and the metric of the link to\n   a neighbor is not
      available, the path cost for the path through that\n   neighbor SHOULD be set
      to MAX_PATH_COST.  This cost value will\n   prevent this path from being considered
      for path selection.\n   If the selected metric is a node metric, and the metric
      is not\n   available, the path cost through all the neighbors SHOULD be set
      to\n   MAX_PATH_COST.\n   The path cost corresponding to a neighbor SHOULD be
      recomputed each\n   time any of the following conditions are met:\n   1.  The
      selected metric of the link to the candidate neighbor is\n       updated.\n
      \  2.  The selected metric is a node metric and the metric is updated.\n   3.
      \ A node receives a new metric advertisement from the candidate\n       neighbor.\n
      \  This computation SHOULD also be performed periodically.  While it is\n   harmless
      to delay this computation up to a minimum Trickle interval\n   [RFC6550], longer
      delays in updating the path cost after the metric\n   is updated or a new metric
      advertisement is received can lead to\n   stale information.\n"
    title: 3.1.  Computing the Path Cost
  - contents:
    - "3.2.  Parent Selection\n   After computing the path cost for all the candidate
      neighbors\n   reachable through an interface for the current DODAG iteration\n
      \  [RFC6550], a node selects the preferred parent.  This process is\n   called
      \"parent selection\".  To allow hysteresis, parent selection\n   maintains a
      variable, cur_min_path_cost, which is the path cost of\n   the current preferred
      parent.\n"
    - contents:
      - "3.2.1.  When Parent Selection Runs\n   A MRHOF implementation SHOULD perform
        Parent Selection each time:\n   1.  The path cost for an existing candidate
        neighbor, including the\n       preferred parent, changes.  This condition
        can be checked\n       immediately after the path cost is computed.\n   2.
        \ A new candidate neighbor is inserted into the neighbor table.\n   If, despite
        the above, it is necessary to defer the parent selection\n   until a later
        time (e.g., up to the Trickle minimum interval\n   [RFC6550]), note that doing
        so can delay the use of better paths\n   available in the network.\n"
      title: 3.2.1.  When Parent Selection Runs
    - contents:
      - "3.2.2.  Parent Selection Algorithm\n   If the selected metric for a link
        is greater than MAX_LINK_METRIC,\n   the node SHOULD exclude that link from
        consideration during parent\n   selection.\n   A node MUST select the candidate
        neighbor with the lowest path cost\n   as its preferred parent, except as
        indicated below:\n   1.  A node MAY declare itself as a Floating root, and
        hence have no\n       preferred parent, depending on system configuration.\n
        \  2.  If cur_min_path_cost is greater than MAX_PATH_COST, the node MAY\n
        \      declare itself as a Floating root.\n   3.  If the smallest path cost
        for paths through the candidate\n       neighbors is smaller than cur_min_path_cost
        by less than\n       PARENT_SWITCH_THRESHOLD, the node MAY continue to use
        the current\n       preferred parent.  This is the hysteresis component of
        MRHOF.\n   4.  If ALLOW_FLOATING_ROOT is 0 and no neighbors are discovered,
        the\n       node does not have a preferred parent and MUST set\n       cur_min_path_cost
        to MAX_PATH_COST.\n   If there are multiple neighbors that share the smallest
        path cost, a\n   node MAY use a different selection criteria to select which
        of these\n   neighbors should be considered to have the lowest cost.\n   A
        node MAY include up to PARENT_SET_SIZE-1 additional candidate\n   neighbors
        in its parent set.  The cost of the path through the nodes\n   in the parent
        set is smaller than or equal to the cost of the paths\n   through any of the
        nodes that are not in the parent set.  If the cost\n   of the path through
        the preferred parent and the worst parent is too\n   large, a node MAY keep
        a smaller parent set than PARENT_SET_SIZE.\n   Once the preferred parent is
        selected, the node sets its\n   cur_min_path_cost variable to the path cost
        corresponding to the\n   preferred parent.  The value of the cur_min_path_cost
        is carried in\n   the Metric Container corresponding to the selected metric
        when DIO\n   messages are sent.\n"
      title: 3.2.2.  Parent Selection Algorithm
    title: 3.2.  Parent Selection
  - contents:
    - "3.3.  Computing Rank\n   DAG roots set their Rank to MinHopRankIncrease.\n
      \  Once a non-root node selects its parent set, it can use the following\n   table
      to covert the path cost of a parent (written as Cost in the\n   table) to a
      Rank value:\n                     +------------------+------------+\n                     |
      Node/link Metric |    Rank    |\n                     +------------------+------------+\n
      \                    |     Hop-Count    |    Cost    |\n                     |
      \     Latency     | Cost/65536 |\n                     |        ETX       |
      \   Cost    |\n                     +------------------+------------+\n                   Table
      1: Conversion of Metric to Rank\n   If MRHOF is used with other metrics, the
      Rank is undefined.  If the\n   Rank is undefined, the node must join one of
      the neighbors as a RPL\n   Leaf node according to [RFC6550].\n   MRHOF uses
      this Rank value to compute the Rank it associates with the\n   path through
      each member of the parent set.  The Rank associated with\n   a path through
      a member of the parent set is the maximum of two\n   values.  The first is the
      corresponding Rank value calculated with\n   the table above, the second is
      that nodes' advertised Rank plus\n   MinHopRankIncrease.\n   A node sets its
      Rank to the maximum of three values:\n   1.  The Rank calculated for the path
      through the preferred parent.\n   2.  The Rank of the member of the parent set
      with the highest\n       advertised Rank, rounded to the next higher integral
      Rank, i.e.,\n       to MinHopRankIncrease * (1 + floor(Rank/MinHopRankIncrease)).\n
      \  3.  The largest calculated Rank among paths through the parent set,\n       minus
      MaxRankIncrease.\n   The first case is the Rank associated with the path through
      the\n   preferred parent.  The second case covers requirement 5 of Rank\n   advertisements
      in Section 8.2.1 of [RFC6550].  The third case ensures\n   that a node does
      not advertise a Rank, which then precludes it from\n   using members of its
      parent set.\n   Note that the third case means that a node advertises a conservative\n
      \  Rank value based on members of its parent set.  This conservative\n   value
      might be significantly higher than the Rank calculated for the\n   path through
      the preferred parent.  Accordingly, picking a parent set\n   whose paths have
      a large range of Ranks will likely result in\n   subptimal routing: nodes might
      not choose good paths because they are\n   advertised as much worse than they
      actually are.  The exact selection\n   of a parent set is an implementation
      decision.\n"
    title: 3.3.  Computing Rank
  - contents:
    - "3.4.  Advertising the Path Cost\n   Once the preferred parent is selected,
      the node sets its\n   cur_min_path_cost variable to the path cost corresponding
      to its\n   preferred parent.  It then calculates the metric it will advertise
      in\n   its metric container.  This value is the path cost of the member of\n
      \  the parent set with the highest path cost.  Thus, while\n   cur_min_path_cost
      is the cost through the preferred parent, a node\n   advertises the highest
      cost path from the node to the root through a\n   member of the parent set.
      \ The value of the highest cost path is\n   carried in the metric container
      corresponding to the selected metric\n   when DIO messages are sent.\n   If
      ETX is the selected metric, a node MUST NOT advertise it in a\n   metric container.
      \ Instead, a node MUST advertise an approximation of\n   its ETX in its advertised
      Rank value, following the rules described\n   in Section 3.3.  If a node receives
      a DIO with a Metric Container\n   holding an ETX metric, MRHOF MUST ignore the
      ETX metric value in its\n   Rank calculations.\n   DODAG Roots advertise a metric
      value that computes to a Rank value of\n   MinHopRankIncrease.\n"
    title: 3.4.  Advertising the Path Cost
  - contents:
    - "3.5.  Working without Metric Containers\n   In the absence of a Metric Container,
      MRHOF uses ETX as its metric.\n   It locally computes the ETX of links to its
      neighbors and adds this\n   value to their advertised Rank to compute the associated
      Rank of\n   routes.  Once parent selection and rank computation is performed\n
      \  using the ETX metric, the node advertises the Rank and MUST NOT\n   include
      a metric container in its DIO messages.  While assigning Rank\n   in this case,
      use the representation of ETX described in [RFC6551],\n   i.e., assign Rank
      equal to ETX * 128.\n"
    title: 3.5.  Working without Metric Containers
  title: 3.  The Minimum Rank with Hysteresis Objective Function
- contents:
  - "4.  Using MRHOF for Metric Maximization\n   MRHOF cannot be directly used for
    parent selection using metrics that\n   require finding paths with a maximum value
    of the selected metric,\n   such as path reliability.  It is possible to convert
    such a metric\n   maximization problem to a metric minimization problem for some\n
    \  metrics and use MRHOF provided:\n      There is a fixed and well-known maximum
    metric value corresponding\n      to the best path.  This is the path cost for
    the DAG root.  For\n      example, the logarithm of the best link reliability
    has a value of\n      0.\n      The metrics in the maximization problem are all
    negative.  The\n      logarithm of the link reliability is always negative.\n
    \  For metrics meeting the above conditions, the problem of maximizing\n   the
    metric value is equivalent to minimizing the modified metric\n   value, e.g.,
    logarithm of link reliability.  MRHOF is not required to\n   work with these metrics.\n"
  title: 4.  Using MRHOF for Metric Maximization
- contents:
  - "5.  MRHOF Variables and Parameters\n   MRHOF uses the following variable:\n      cur_min_path_cost:
    The cost of the path from a node through its\n      preferred parent to the root
    computed at the last parent\n      selection.\n   MRHOF uses the following parameters:\n
    \     MAX_LINK_METRIC: Maximum allowed value for the selected link\n      metric
    for each link on the path.\n      MAX_PATH_COST: Maximum allowed value for the
    path metric of a\n      selected path.\n      PARENT_SWITCH_THRESHOLD: The difference
    between the cost of the\n      path through the preferred parent and the minimum
    cost path in\n      order to trigger the selection of a new preferred parent.\n
    \     PARENT_SET_SIZE: The number of candidate parents, including the\n      preferred
    parent, in the parent set.\n      ALLOW_FLOATING_ROOT: If set to 1, allows a node
    to become a\n      floating root.\n   The parameter values are assigned depending
    on the selected metric.\n   The best values for these parameters are determined
    by the\n   requirement of the specific RPL deployment.  For instance, if we use\n
    \  ETX as the selected metric and UDP as the transport protocol, we\n   should
    use a small MAX_LINK_METRIC (e.g., ETX of 1.1) so that link-\n   layer retransmissions
    are sufficient to provide a good chance of end-\n   to-end reliability.\n   The
    working group has extensive experience routing with the ETX\n   metric [Hui08b].
    \ Based on those experiences, the following values\n   are RECOMMENDED when ETX
    is the selected metric:\n      MAX_LINK_METRIC: 512.  Disallow links with greater
    than 4 expected\n      transmission counts on the selected path.\n      MAX_PATH_COST:
    32768.  Disallow paths with greater than 256\n      expected transmission counts.\n
    \     PARENT_SWITCH_THRESHOLD: 192.  Switch to a new path only if it is\n      expected
    to require at least 1.5 fewer transmissions than the\n      current path.\n      PARENT_SET_SIZE:
    3.  If the preferred parent is not available, two\n      candidate parents are
    still available without triggering a new\n      round of route discovery.\n      ALLOW_FLOATING_ROOT:
    0.  Do not allow a node to become a floating\n      root.\n"
  title: 5.  MRHOF Variables and Parameters
- contents:
  - "6.  Manageability\n   Section 18 of [RFC6550] depicts the management of RPL.
    \ This\n   specification inherits from that section and its subsections, with\n
    \  the exception that metrics as specified in [RFC6551] are not used and\n   do
    not require management.\n"
  - contents:
    - "6.1.  Device Configuration\n   An implementation SHOULD allow the following
      parameters to be\n   configured at installation time: MAX_LINK_METRIC, MAX_PATH_COST,\n
      \  PARENT_SWITCH_THRESHOLD, PARENT_SET_SIZE, and ALLOW_FLOATING_ROOT.\n   An
      implementation MAY allow these parameters to be configured\n   dynamically at
      run time once a network has been deployed.\n   A MRHOF implementation MUST support
      the DODAG Configuration option as\n   described in [RFC6550] and apply the parameters
      it specifies.  Care\n   should be taken in the relationship between the MRHOF\n
      \  PARENT_SWITCH_THRESHOLD parameter and the RPL MaxRankIncrease\n   parameter.
      \ For example, if MaxRankIncrease is smaller than\n   PARENT_SWITCH_THRESHOLD,
      a RPL node using MRHOF could enter a\n   situation in which its current preferred
      parent causes the node's\n   Rank to increase more than MaxRankIncrease but
      MRHOF does not change\n   preferred parents.  This could cause the node to leave
      the routing\n   topology even though there may be other members of the parent
      set\n   that would allow the node's Rank to remain within MaxRankIncrease.\n
      \  Unless configured otherwise, a MRHOF implementation SHOULD use the\n   default
      parameters as specified in Section 5.\n   Because of the partially coupled relationship
      between Rank and metric\n   values, networks using MRHOF require care in setting\n
      \  MinHopRankIncrease.  A large MinHopRankIncrease will cause MRHOF to\n   be
      unable to select paths with different hop counts but similar\n   metric values.
      \ If MinHopRankIncrease is large enough that its\n   increment is greater than
      that caused by link cost, then metrics will\n   be used to select a preferred
      parent, but the advertised Rank will be\n   a simple hop count.  This behavior
      might be desirable, but it also\n   might be unintended; care is recommended.\n
      \  With ETX as the selected metric, RPL's Rank advertisement rules can\n   require
      a DODAG Root to advertise a Rank higher than its\n   corresponding ETX value,
      as a DODAG Root advertises a Rank of\n   MinHopRankIncrease.  Because all DODAG
      Roots within a DODAG Version\n   advertise the same Rank, this constant value
      typically does not\n   affect route selection.  Nevertheless, it means that
      if a DODAG\n   Version has a MinHopRankIncrease of M and a path has an advertised\n
      \  ETX of E, then the actual ETX of the path is likely closer to a value\n   of
      E-M than a value of E.\n"
    title: 6.1.  Device Configuration
  - contents:
    - "6.2.  Device Monitoring\n   A MRHOF implementation should provide an interface
      for monitoring its\n   operation.  At a minimum, the information provided should
      include:\n      DAG information as specified in Section 6.3.1 of [RFC6550],\n
      \     including the DODAGID, the RPLInstanceID, the Mode of Operation,\n      the
      Rank of this node, the current Version Number, and the value\n      of the Grounded
      flag.\n      A list of neighbors indicating the preferred parent.  The list\n
      \     should indicate, for each neighbor, the Rank, the current Version\n      Number,
      the value of the Grounded flag, and associated metrics.\n"
    title: 6.2.  Device Monitoring
  title: 6.  Manageability
- contents:
  - "7.  Acknowledgements\n   Thanks to Antonio Grilo, Nicolas Tsiftes, Matteo Paris,
    JP Vasseur,\n   and Phoebus Chen for their comments.  Thanks to Barry Leiba, Brian\n
    \  Haberman, Martin Stiemerling, Ralph Droms, Robert Sparks, Russ\n   Housley,
    Stephen Farrell, Wesley Eddy, Miguel A. Garcia, Mukul Goyal,\n   and Michael Richardson
    for their feedback during the publication\n   phase of this document.\n"
  title: 7.  Acknowledgements
- contents:
  - "8.  IANA Considerations\n   Per this document, IANA has allocated value 1 from
    the \"Objective\n   Code Point (OCP)\" sub-registry of the \"Routing Protocol
    for Low Power\n   and Lossy Networks (RPL)\" registry.\n"
  title: 8.  IANA Considerations
- contents:
  - "9.  Security Considerations\n   This specification makes simple extensions to
    RPL and so is\n   vulnerable to and benefits from the security issues and mechanisms\n
    \  described in [RFC6550] and [ROLL-SEC].  This document does not\n   introduce
    new flows or new messages, and thus requires no specific\n   mitigation for new
    threats.\n   MRHOF depends on information exchanged in a number of RPL protocol\n
    \  elements.  If those elements were compromised, then an implementation\n   of
    MRHOF might generate the wrong path for a packet, resulting in it\n   being misrouted.
    \ Therefore, deployments are RECOMMENDED to use RPL\n   security mechanisms if
    there is a risk that routing information might\n   be modified or spoofed.\n"
  title: 9.  Security Considerations
- contents:
  - '10.  References

    '
  - contents:
    - "10.1.  Normative References\n   [RFC2119]   Bradner, S., \"Key words for use
      in RFCs to Indicate\n               Requirement Levels\", BCP 14, RFC 2119,
      March 1997.\n   [RFC6550]   Winter, T., Thubert, P., Brandt, A., Hui, J., Kelsey,
      R.,\n               Levis, P., Pister, K., Struik, R., Vasseur, JP., and R.\n
      \              Alexander, \"RPL: IPv6 Routing Protocol for Low-Power and\n               Lossy
      Networks\", RFC 6550, March 2012.\n   [RFC6551]   Vasseur, JP., Kim, M., Pister,
      K., Dejean, N., and D.\n               Barthel, \"Routing Metrics Used for Path
      Calculation in\n               Low-Power and Lossy Networks\", RFC 6551, March
      2012.\n"
    title: 10.1.  Normative References
  - contents:
    - "10.2.  Informative References\n   [Hui08b]    Hui, J. and D. Culler, \"IP is
      dead, long live IP for\n               wireless sensor networks\", Proceedings
      of the 6th ACM\n               Conference on Embedded Networked Systems SenSys
      2008,\n               November 2008,\n               <http://portal.acm.org/citation.cfm?id=1460412.1460415>.\n
      \  [ROLL-SEC]  Tsao, T., Alexander, R., Dohler, M., Daza, V., and A.\n               Lozano,
      \"A Security Framework for Routing over Low Power\n               and Lossy
      Networks\", Work in Progress, January 2012.\n   [ROLL-TERM] Vasseur, J., \"Terminology
      in Low power And Lossy\n               Networks\", Work in Progress, September
      2011.\n"
    title: 10.2.  Informative References
  title: 10.  References
- contents:
  - "Authors' Addresses\n   Omprakash Gnawali\n   University of Houston\n   PGH 577,
    University of Houston\n   Houston, TX  77204\n   USA\n   Phone: +1 713 743 3356\n
    \  EMail: gnawali@cs.uh.edu\n   Philip Levis\n   Stanford University\n   412 Gates
    Hall, Stanford University\n   Stanford, CA  94305\n   USA\n   EMail: pal@cs.stanford.edu\n"
  title: Authors' Addresses
