- title: __initial_text__
  contents:
  - '          A Description of the Rabbit Stream Cipher Algorithm

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2006).\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes the encryption algorithm Rabbit.  It is\
    \ a\n   stream cipher algorithm with a 128-bit key and 64-bit initialization\n\
    \   vector (IV).  The method was published in 2003 and has been subject\n   to\
    \ public security and performance revision.  Its high performance\n   makes it\
    \ particularly suited for the use with Internet protocols\n   where large amounts\
    \ of data have to be processed.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n\
    \   2. Algorithm Description ...........................................2\n  \
    \    2.1. Notation ...................................................2\n    \
    \  2.2. Inner State ................................................3\n      2.3.\
    \ Key Setup Scheme ...........................................3\n      2.4. IV\
    \ Setup Scheme ............................................3\n      2.5. Counter\
    \ System .............................................4\n      2.6. Next-State\
    \ Function ........................................4\n      2.7. Extraction Scheme\
    \ ..........................................5\n      2.8. Encryption/Decryption\
    \ Scheme ...............................5\n   3. Security Considerations .........................................6\n\
    \      3.1. Message Length .............................................6\n  \
    \    3.2. Initialization Vector ......................................6\n   4.\
    \ Informative References ..........................................7\n   Appendix\
    \ A: Test Vectors ...........................................8\n      A.1. Testing\
    \ without IV Setup ...................................8\n      A.2. Testing with\
    \ IV Setup ......................................8\n   Appendix B: Debugging Vectors\
    \ ......................................9\n      B.1. Testing Round Function and\
    \ Key Setup .......................9\n      B.2. Testing the IV setup ......................................10\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Rabbit is a stream cipher algorithm that has been designed\
    \ for high\n   performance in software implementations.  Both key setup and\n\
    \   encryption are very fast, making the algorithm particularly suited\n   for\
    \ all applications where large amounts of data or large numbers of\n   data packages\
    \ have to be encrypted.  Examples include, but are not\n   limited to, server-side\
    \ encryption, multimedia encryption, hard-disk\n   encryption, and encryption\
    \ on limited-resource devices.\n   The cipher is based on ideas derived from the\
    \ behavior of certain\n   chaotic maps.  These maps have been carefully discretized,\
    \ resulting\n   in a compact stream cipher.  Rabbit has been openly published\
    \ in 2003\n   [1] and has not displayed any weaknesses as of the time of this\n\
    \   writing.  To ensure ongoing security evaluation, it was also\n   submitted\
    \ to the ECRYPT eSTREAM project[2].\n   Technically, Rabbit consists of a pseudorandom\
    \ bitstream generator\n   that takes a 128-bit key and a 64-bit initialization\
    \ vector (IV) as\n   input and generates a stream of 128-bit blocks.  Encryption\
    \ is\n   performed by combining this output with the message, using the\n   exclusive-OR\
    \ operation.  Decryption is performed in exactly the same\n   way as encryption.\n\
    \   Further information about Rabbit, including reference implementation,\n  \
    \ test vectors, performance figures, and security white papers, is\n   available\
    \ from http://www.cryptico.com/.\n"
- title: 2.  Algorithm Description
  contents:
  - '2.  Algorithm Description

    '
- title: 2.1.  Notation
  contents:
  - "2.1.  Notation\n   This document uses the following elementary operators:\n \
    \   +     integer addition.\n    *     integer multiplication.\n   div    integer\
    \ division.\n   mod    integer modulus.\n    ^     bitwise exclusive-OR operation.\n\
    \   <<<    left rotation operator.\n    ||    concatenation operator.\n   When\
    \ labeling bits of a variable, A, the least significant bit is\n   denoted by\
    \ A[0].  The notation A[h..g] represents bits h through g of\n   variable A, where\
    \ h is more significant than g.  Similar variables\n   are labeled by A0,A1,...\
    \ with the notation A(0),A(1),... being used\n   to denote those same variables\
    \ if this improves readability.\n   Given a 64-bit word, the function MSW extracts\
    \ the most significant\n   32 bits, whereas the function LSW extracts the least\
    \ significant 32\n   bits.\n   Constants prefixed with 0x are in hexadecimal notation.\
    \  In\n   particular, the constant WORDSIZE is defined to be 0x100000000.\n"
- title: 2.2.  Inner State
  contents:
  - "2.2.  Inner State\n   The internal state of the stream cipher consists of 513\
    \ bits.  512\n   bits are divided between eight 32-bit state variables, X0,...,X7\
    \ and\n   eight 32-bit counter variables, C0,...,C7.  In addition, there is one\n\
    \   counter carry bit, b.\n"
- title: 2.3.  Key Setup Scheme
  contents:
  - "2.3.  Key Setup Scheme\n   The counter carry bit b is initialized to zero.  The\
    \ state and\n   counter words are derived from the key K[127..0].\n   The key\
    \ is divided into subkeys K0 = K[15..0], K1 = K[31..16], ... K7\n   = K[127..112].\
    \  The initial state is initialized as follows:\n     for j=0 to 7:\n       if\
    \ j is even:\n         Xj = K(j+1 mod 8) || Kj\n         Cj = K(j+4 mod 8) ||\
    \ K(j+5 mod 8)\n       else:\n         Xj = K(j+5 mod 8) || K(j+4 mod 8)\n   \
    \      Cj = Kj || K(j+1 mod 8)\n   The system is then iterated four times, each\
    \ iteration consisting of\n   counter update (Section 2.5) and next-state function\
    \ (Section 2.6).\n   After that, the counter variables are reinitialized to\n\
    \     for j=0 to 7:\n       Cj = Cj ^ X(j+4 mod 8)\n"
- title: 2.4.  IV Setup Scheme
  contents:
  - "2.4.  IV Setup Scheme\n   If an IV is used for encryption, the counter variables\
    \ are modified\n   after the key setup.  Denoting the IV bits by IV[63..0], the\
    \ setup\n   proceeds as follows:\n     C0 = C0 ^ IV[31..0]        C1 = C1 ^ (IV[63..48]\
    \ || IV[31..16])\n     C2 = C2 ^ IV[63..32]       C3 = C3 ^ (IV[47..32] || IV[15..0])\n\
    \     C4 = C4 ^ IV[31..0]        C5 = C5 ^ (IV[63..48] || IV[31..16])\n     C6\
    \ = C6 ^ IV[63..32]       C7 = C7 ^ (IV[47..32] || IV[15..0])\n   The system is\
    \ then iterated another 4 times, each iteration\n   consisting of counter update\
    \ (Section 2.5) and next-state function\n   (Section 2.6).\n   The relationship\
    \ between key and IV setup is as follows:\n   - After the key setup, the resulting\
    \ inner state is saved as a master\n     state.  Then the IV setup is run to obtain\
    \ the first encryption\n     starting state.\n   - Whenever re-initialization\
    \ under a new IV is necessary, the IV\n     setup is run on the master state again\
    \ to derive the next\n     encryption starting state.\n"
- title: 2.5.  Counter System
  contents:
  - "2.5.  Counter System\n   Before each execution of the next-state function (Section\
    \ 2.6), the\n   counter system has to be updated.  This system uses constants\n\
    \   A1,...,A7, as follows:\n     A0 = 0x4D34D34D         A1 = 0xD34D34D3\n   \
    \  A2 = 0x34D34D34         A3 = 0x4D34D34D\n     A4 = 0xD34D34D3         A5 =\
    \ 0x34D34D34\n     A6 = 0x4D34D34D         A7 = 0xD34D34D3\n   It also uses the\
    \ counter carry bit b to update the counter system, as\n   follows:\n     for\
    \ j=0 to 7:\n       temp = Cj + Aj + b\n       b    = temp div WORDSIZE\n    \
    \   Cj   = temp mod WORDSIZE\n   Note that on exiting this loop, the variable\
    \ b has to be preserved\n   for the next iteration of the system.\n"
- title: 2.6.  Next-State Function
  contents:
  - "2.6.  Next-State Function\n   The core of the Rabbit algorithm is the next-state\
    \ function.  It is\n   based on the function g, which transforms two 32-bit inputs\
    \ into one\n   32-bit output, as follows:\n     g(u,v) = LSW(square(u+v)) ^ MSW(square(u+v))\n\
    \   where square(u+v) = ((u+v mod WORDSIZE) * (u+v mod WORDSIZE)).\n   Using this\
    \ function, the algorithm updates the inner state as\n   follows:\n     for j=0\
    \ to 7:\n       Gj = g(Xj,Cj)\n     X0 = G0 + (G7 <<< 16) + (G6 <<< 16) mod WORDSIZE\n\
    \     X1 = G1 + (G0 <<<  8) +  G7         mod WORDSIZE\n     X2 = G2 + (G1 <<<\
    \ 16) + (G0 <<< 16) mod WORDSIZE\n     X3 = G3 + (G2 <<<  8) +  G1         mod\
    \ WORDSIZE\n     X4 = G4 + (G3 <<< 16) + (G2 <<< 16) mod WORDSIZE\n     X5 = G5\
    \ + (G4 <<<  8) +  G3         mod WORDSIZE\n     X6 = G6 + (G5 <<< 16) + (G4 <<<\
    \ 16) mod WORDSIZE\n     X7 = G7 + (G6 <<<  8) +  G5         mod WORDSIZE\n"
- title: 2.7.  Extraction Scheme
  contents:
  - "2.7.  Extraction Scheme\n   After the key and IV setup are concluded, the algorithm\
    \ is iterated\n   in order to produce one 128-bit output block, S, per round.\
    \  Each\n   round consists of executing steps 2.5 and 2.6 and then extracting\
    \ an\n   output S[127..0] as follows:\n     S[15..0]    = X0[15..0]  ^ X5[31..16]\n\
    \     S[31..16]   = X0[31..16] ^ X3[15..0]\n     S[47..32]   = X2[15..0]  ^ X7[31..16]\n\
    \     S[63..48]   = X2[31..16] ^ X5[15..0]\n     S[79..64]   = X4[15..0]  ^ X1[31..16]\n\
    \     S[95..80]   = X4[31..16] ^ X7[15..0]\n     S[111..96]  = X6[15..0]  ^ X3[31..16]\n\
    \     S[127..112] = X6[31..16] ^ X1[15..0]\n"
- title: 2.8.  Encryption/Decryption Scheme
  contents:
  - "2.8.  Encryption/Decryption Scheme\n   Given a 128-bit message block, M, encryption\
    \ E and decryption M' are\n   computed via\n     E  = M ^ S    and\n     M' =\
    \ E ^ S.\n   If S is the same in both operations (as it should be if the same\
    \ key\n   and IV are used), then M = M'.\n   The encryption/decryption scheme\
    \ is repeated until all blocks in the\n   message have been encrypted/decrypted.\
    \  If the message size is not a\n   multiple of 128 bits, only the needed amount\
    \ of least significant\n   bits from the last output block S is used for the last\
    \ message block\n   M.\n   If the application requires the encryption of smaller\
    \ blocks (or even\n   individual bits), a 128-bit buffer is used.  The buffer\
    \ is\n   initialized by generating a new value, S, and copying it into the\n \
    \  buffer.  After that, all data blocks are encrypted using the least\n   significant\
    \ bits in this buffer.  Whenever the buffer is empty, a new\n   value S is generated\
    \ and copied into the buffer.\n"
- title: 3.  Security Considerations
  contents:
  - "3.  Security Considerations\n   For an encryption algorithm, the security provided\
    \ is, of course, the\n   most important issue.  No security weaknesses have been\
    \ found to\n   date, neither by the designers nor by independent cryptographers\n\
    \   scrutinizing the algorithms after its publication in [1].  Note that\n   a\
    \ full discussion of Rabbit's security against known cryptanalytic\n   techniques\
    \ is provided in [3].\n   In the following, we restrict ourselves to some rules\
    \ on how to use\n   the Rabbit algorithm properly.\n"
- title: 3.1.  Message Length
  contents:
  - "3.1.  Message Length\n   Rabbit was designed to encrypt up to 2 to the power\
    \ of 64 128-bit\n   message blocks under the same the key.  Should this amount\
    \ of data\n   ever be exceeded, the key has to be replaced.  It is recommended\
    \ to\n   follow this rule even when the IV is changed on a regular basis.\n"
- title: 3.2.  Initialization Vector
  contents:
  - "3.2.  Initialization Vector\n   It is possible to run Rabbit without the IV setup.\
    \  However, in this\n   case, the generator must never be reset under the same\
    \ key, since\n   this would destroy its security (for a recent example, see [4]).\n\
    \   However, in order to guarantee synchronization between sender and\n   receiver,\
    \ ciphers are frequently reset in practice.  This means that\n   both sender and\
    \ receiver set the inner state of the cipher back to a\n   known value and then\
    \ derive the new encryption state using an IV.  If\n   this is done, it is important\
    \ to make sure that no IV is ever reused\n   under the same key.\n"
- title: 4.  Informative References
  contents:
  - "4.  Informative References\n   [1]   M. Boesgaard, M. Vesterager, T. Pedersen,\
    \ J. Christiansen, O.\n         Scavenius. \"Rabbit: A New High-Performance Stream\
    \ Cipher\".\n         Proc. Fast Software Encryption 2003, Lecture Notes in Computer\n\
    \         Science 2887, p. 307-329. Springer, 2003.\n   [2]   ECRYPT eSTREAM project,\
    \ available from\n         http://www.ecrypt.eu.org/stream/\n   [3]   M. Boesgaard,\
    \ T. Pedersen, M. Vesterager, E. Zenner. \"The\n         Rabbit Stream Cipher\
    \ - Design and Security Analysis\". Proc.\n         SASC Workshop 2004, available\
    \ from\n         http://www.isg.rhul.ac.uk/research/\n         projects/ecrypt/stvl/sasc.html.\n\
    \   [4]   H. Wu. \"The Misuse of RC4 in Microsoft Word and Excel\". IACR\n   \
    \      eprint archive 2005/007, available from\n         http://eprint.iacr.org/2005/007.pdf.\n\
    \   [5]   Jonsson, J. and B. Kaliski, \"Public-Key Cryptography Standards\n  \
    \       (PKCS) #1: RSA Cryptography Specifications Version 2.1\", RFC\n      \
    \   3447, February 2003.\n"
- title: 'Appendix A: Test Vectors'
  contents:
  - "Appendix A: Test Vectors\n   This is a set of test vectors for conformance testing,\
    \ given in octet\n   form.  For use with Rabbit, they have to be transformed into\
    \ integers\n   by the conversion primitives OS2IP and I2OSP, as described in [5].\n"
- title: A.1.  Testing without IV Setup
  contents:
  - "A.1.  Testing without IV Setup\n     key  = [00 00 00 00 00 00 00 00 00 00 00\
    \ 00 00 00 00 00]\n     S[0] = [B1 57 54 F0 36 A5 D6 EC F5 6B 45 26 1C 4A F7 02]\n\
    \     S[1] = [88 E8 D8 15 C5 9C 0C 39 7B 69 6C 47 89 C6 8A A7]\n     S[2] = [F4\
    \ 16 A1 C3 70 0C D4 51 DA 68 D1 88 16 73 D6 96]\n     key  = [91 28 13 29 2E 3D\
    \ 36 FE 3B FC 62 F1 DC 51 C3 AC]\n     S[0] = [3D 2D F3 C8 3E F6 27 A1 E9 7F C3\
    \ 84 87 E2 51 9C]\n     S[1] = [F5 76 CD 61 F4 40 5B 88 96 BF 53 AA 85 54 FC 19]\n\
    \     S[2] = [E5 54 74 73 FB DB 43 50 8A E5 3B 20 20 4D 4C 5E]\n     key  = [83\
    \ 95 74 15 87 E0 C7 33 E9 E9 AB 01 C0 9B 00 43]\n     S[0] = [0C B1 0D CD A0 41\
    \ CD AC 32 EB 5C FD 02 D0 60 9B]\n     S[1] = [95 FC 9F CA 0F 17 01 5A 7B 70 92\
    \ 11 4C FF 3E AD]\n     S[2] = [96 49 E5 DE 8B FC 7F 3F 92 41 47 AD 3A 94 74 28]\n"
- title: A.2.  Testing with IV Setup
  contents:
  - "A.2.  Testing with IV Setup\n     mkey = [00 00 00 00 00 00 00 00 00 00 00 00\
    \ 00 00 00 00]\n     iv   = [00 00 00 00 00 00 00 00]\n     S[0] = [C6 A7 27 5E\
    \ F8 54 95 D8 7C CD 5D 37 67 05 B7 ED]\n     S[1] = [5F 29 A6 AC 04 F5 EF D4 7B\
    \ 8F 29 32 70 DC 4A 8D]\n     S[2] = [2A DE 82 2B 29 DE 6C 1E E5 2B DB 8A 47 BF\
    \ 8F 66]\n     iv   = [C3 73 F5 75 C1 26 7E 59]\n     S[0] = [1F CD 4E B9 58 00\
    \ 12 E2 E0 DC CC 92 22 01 7D 6D]\n     S[1] = [A7 5F 4E 10 D1 21 25 01 7B 24 99\
    \ FF ED 93 6F 2E]\n     S[2] = [EB C1 12 C3 93 E7 38 39 23 56 BD D0 12 02 9B A7]\n\
    \     iv   = [A6 EB 56 1A D2 F4 17 27]\n     S[0] = [44 5A D8 C8 05 85 8D BF 70\
    \ B6 AF 23 A1 51 10 4D]\n     S[1] = [96 C8 F2 79 47 F4 2C 5B AE AE 67 C6 AC C3\
    \ 5B 03]\n     S[2] = [9F CB FC 89 5F A7 1C 17 31 3D F0 34 F0 15 51 CB]\n"
- title: 'Appendix B: Debugging Vectors'
  contents:
  - "Appendix B: Debugging Vectors\n   The following set of vectors describes the\
    \ inner state of Rabbit\n   during key and iv setup.  It is meant mainly for debugging\
    \ purposes.\n   Octet strings are written according to I2OSP conventions.\n"
- title: B.1.  Testing Round Function and Key Setup
  contents:
  - "B.1.  Testing Round Function and Key Setup\n     key  = [91 28 13 29 2E ED 36\
    \ FE 3B FC 62 F1 DC 51 C3 AC]\n     Inner state after key expansion:\n     b \
    \ = 0\n     X0 = 0xDC51C3AC, X1 = 0x13292E3D, X2 = 0x3BFC62F1, X3 = 0xC3AC9128,\n\
    \     X4 = 0x2E3D36FE, X5 = 0x62F1DC51, X6 = 0x91281329, X7 = 0x36FE3BFC,\n  \
    \   C0 = 0x36FE2E3D, C1 = 0xDC5162F1, C2 = 0x13299128, C3 = 0x3BFC36FE,\n    \
    \ C4 = 0xC3ACDC51, C5 = 0x2E3D1329, C6 = 0x62F13BFC, C7 = 0x9128C3AC\n     Inner\
    \ state after first key setup iteration:\n     b  = 1\n     X0 = 0xF2E8C8B1, X1\
    \ = 0x38E06FA7, X2 = 0x9A0D72C0, X3 = 0xF21F5334,\n     X4 = 0xCACDCCC3, X5 =\
    \ 0x4B239CBE, X6 = 0x0565DCCC, X7 = 0xB1587C8D,\n     C0 = 0x8433018A, C1 = 0xAF9E97C4,\
    \ C2 = 0x47FCDE5D, C3 = 0x89310A4B,\n     C4 = 0x96FA1124, C5 = 0x6310605E, C6\
    \ = 0xB0260F49, C7 = 0x6475F87F\n     Inner state after fourth key setup iteration:\n\
    \     b  = 0\n     X0 = 0x1D059312, X1 = 0xBDDC3E45, X2 = 0xF440927D, X3 = 0x50CBB553,\n\
    \     X4 = 0x36709423, X5 = 0x0B6F0711, X6 = 0x3ADA3A7B, X7 = 0xEB9800C8,\n  \
    \   C0 = 0x6BD17B74, C1 = 0x2986363E, C2 = 0xE676C5FC, C3 = 0x70CF8432,\n    \
    \ C4 = 0x10E1AF9E, C5 = 0x018A47FD, C6 = 0x97C48931, C7 = 0xDE5D96F9\n     Inner\
    \ state after final key setup xor:\n     b  = 0\n     X0 = 0x1D059312, X1 = 0xBDDC3E45,\
    \ X2 = 0xF440927D, X3 = 0x50CBB553,\n     X4 = 0x36709423, X5 = 0x0B6F0711, X6\
    \ = 0x3ADA3A7B, X7 = 0xEB9800C8,\n     C0 = 0x5DA1EF57, C1 = 0x22E9312F, C2 =\
    \ 0xDCACFF87, C3 = 0x9B5784FA,\n     C4 = 0x0DE43C8C, C5 = 0xBC5679B8, C6 = 0x63841B4C,\
    \ C7 = 0x8E9623AA\n     Inner state after generation of 48 bytes of output:\n\
    \     b  = 1\n     X0 = 0xB5428566, X1 = 0xA2593617, X2 = 0xFF5578DE, X3 = 0x7293950F,\n\
    \     X4 = 0x145CE109, X5 = 0xC93875B0, X6 = 0xD34306E0, X7 = 0x43FEEF87,\n  \
    \   C0 = 0x45406940, C1 = 0x9CD0CFA9, C2 = 0x7B26E725, C3 = 0x82F5FEE2,\n    \
    \ C4 = 0x87CBDB06, C5 = 0x5AD06156, C6 = 0x4B229534, C7 = 0x087DC224\n     The\
    \ 48 output bytes:\n     S[0] = [3D 2D F3 C8 3E F6 27 A1 E9 7F C3 84 87 E2 51\
    \ 9C]\n     S[1] = [F5 76 CD 61 F4 40 5B 88 96 BF 53 AA 85 54 FC 19]\n     S[2]\
    \ = [E5 54 74 73 FB DB 43 50 8A E5 3B 20 20 4D 4C 5E]\n"
- title: B.2.  Testing the IV Setup
  contents:
  - "B.2.  Testing the IV Setup\n     key  = [91 28 13 29 2E ED 36 FE 3B FC 62 F1\
    \ DC 51 C3 AC]\n     iv   = [C3 73 F5 75 C1 26 7E 59]\n     Inner state during\
    \ key setup:\n     as above\n     Inner state after IV expansion:\n     b  = 0\n\
    \     X0 = 0x1D059312, X1 = 0xBDDC3E45, X2 = 0xF440927D, X3 = 0x50CBB553,\n  \
    \   X4 = 0x36709423, X5 = 0x0B6F0711, X6 = 0x3ADA3A7B, X7 = 0xEB9800C8,\n    \
    \ C0 = 0x9C87910E, C1 = 0xE19AF009, C2 = 0x1FDF0AF2, C3 = 0x6E22FAA3,\n     C4\
    \ = 0xCCC242D5, C5 = 0x7F25B89E, C6 = 0xA0F7EE39, C7 = 0x7BE35DF3\n     Inner\
    \ state after first IV setup iteration:\n     b  = 1\n     X0 = 0xC4FF831A, X1\
    \ = 0xEF5CD094, X2 = 0xC5933855, X3 = 0xC05A5C03,\n     X4 = 0x4A50522F, X5 =\
    \ 0xDF487BE4, X6 = 0xA45FA013, X7 = 0x05531179,\n     C0 = 0xE9BC645B, C1 = 0xB4E824DC,\
    \ C2 = 0x54B25827, C3 = 0xBB57CDF0,\n     C4 = 0xA00F77A8, C5 = 0xB3F905D3, C6\
    \ = 0xEE2CC186, C7 = 0x4F3092C6\n     Inner state after fourth IV setup iteration:\n\
    \     b  = 1\n     X0 = 0x6274E424, X1 = 0xE14CE120, X2 = 0xDA8739D9, X3 = 0x65E0402D,\n\
    \     X4 = 0xD1281D10, X5 = 0xBD435BAA, X6 = 0x4E9E7A02, X7 = 0x9B467ABD,\n  \
    \   C0 = 0xD15ADE44, C1 = 0x2ECFC356, C2 = 0xF32C3FC6, C3 = 0xA2F647D7,\n    \
    \ C4 = 0x19F71622, C5 = 0x5272ED72, C6 = 0xD5CB3B6E, C7 = 0xC9183140\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Martin Boesgaard\n   Cryptico A/S\n   Fruebjergvej 3\n\
    \   2100 Copenhagen\n   Denmark\n   Phone: +45 39 17 96 06\n   EMail: mab@cryptico.com\n\
    \   URL:   http://www.cryptico.com\n   Mette Vesterager\n   Cryptico A/S\n   Fruebjergvej\
    \ 3\n   2100 Copenhagen\n   Denmark\n   Phone: +45 39 17 96 06\n   EMail: mvp@cryptico.com\n\
    \   URL:   http://www.cryptico.com\n   Erik Zenner\n   Cryptico A/S\n   Fruebjergvej\
    \ 3\n   2100 Copenhagen\n   Denmark\n   Phone: +45 39 17 96 06\n   EMail: ez@cryptico.com\n\
    \   URL:   http://www.cryptico.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2006).\n   This\
    \ document is subject to the rights, licenses and restrictions\n   contained in\
    \ BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is provided by the IETF\n\
    \   Administrative Support Activity (IASA).\n"
