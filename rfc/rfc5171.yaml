- title: __initial_text__
  contents:
  - '      Cisco Systems UniDirectional Link Detection (UDLD) Protocol

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: IESG Note
  contents:
  - "IESG Note\n   This RFC is not a candidate for any level of Internet Standard.\
    \  The\n   IETF disclaims any knowledge of the fitness of this RFC for any\n \
    \  purpose and in particular notes that the decision to publish is not\n   based\
    \ on IETF review for such things as security, congestion control,\n   or inappropriate\
    \ interaction with deployed protocols.  The RFC Editor\n   has chosen to publish\
    \ this document at its discretion.  Readers of\n   this document should exercise\
    \ caution in evaluating its value for\n   implementation and deployment.  See\
    \ RFC 3932 for more information.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes a Cisco Systems protocol that can be used\
    \ to\n   detect and disable unidirectional Ethernet fiber or copper links\n  \
    \ caused, for instance, by mis-wiring of fiber strands, interface\n   malfunctions,\
    \ media converters' faults, etc.  It operates at Layer 2\n   in conjunction with\
    \ IEEE 802.3's existing Layer 1 fault detection\n   mechanisms.\n   This document\
    \ explains the protocol objectives and applications,\n   illustrates the specific\
    \ premises the protocol was based upon, and\n   describes the protocol architecture\
    \ and related deployment issues to\n   serve as a possible base for future standardization.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n\
    \   2. Protocol Objectives and Applications ............................3\n  \
    \ 3. Protocol Design Premises ........................................4\n   4.\
    \ Protocol Background .............................................4\n   5. Protocol\
    \ Architecture ...........................................5\n      5.1. The Basics\
    \ .................................................5\n      5.2. Neighbor Database\
    \ Maintenance ..............................5\n      5.3. Event-driven Detection\
    \ and Echoing .........................6\n      5.4. Event-based versus Event-less\
    \ Detection ....................6\n   6. Packet Format ...................................................7\n\
    \      6.1. TLV Description ............................................9\n  \
    \ 7. Protocol Logic .................................................10\n    \
    \  7.1. Protocol Timers ...........................................10\n   8. Comparison\
    \ with Bidirectional Forwarding Detection .............11\n   9. Security Considerations\
    \ ........................................11\n   10. Deployment Considerations\
    \ .....................................11\n   11. Normative References ..........................................12\n\
    \   12. Informative Reference .........................................12\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Today's Ethernet-based switched networks often rely on the\
    \ Spanning\n   Tree Protocol (STP) defined in the IEEE 802.1D standard [1] to\
    \ create\n   a loop-free topology that is used to forward the traffic from a\n\
    \   source to a destination based on the Layer 2 packet information\n   learned\
    \ by the switches and on the knowledge of the status of the\n   physical links\
    \ along the path.\n   Issues arise when, due to mis-wirings or to hardware faults,\
    \ the\n   communication path behaves abnormally and generates forwarding\n   anomalies.\
    \  The simplest example of such anomalies is the case of a\n   bidirectional link\
    \ that stops passing traffic in one direction and\n   therefore breaks one of\
    \ the most basic assumptions that high-level\n   protocols typically depend upon:\
    \ reliable two-way communication\n   between peers.\n   The purpose of the UDLD\
    \ protocol is to detect the presence of\n   anomalous conditions in the Layer\
    \ 2 communication channel, while\n   relying on the mechanisms defined by the\
    \ IEEE in the 802.3 standard\n   [2] to properly handle conditions inherent to\
    \ the physical layer.\n"
- title: 2.  Protocol Objectives and Applications
  contents:
  - "2.  Protocol Objectives and Applications\n   The UniDirectional Link Detection\
    \ protocol (often referred to in\n   short as \"UDLD\") is a lightweight protocol\
    \ that can be used to detect\n   and disable one-way connections before they create\
    \ dangerous\n   situations such as Spanning Tree loops or other protocol\n   malfunctions.\n\
    \   The protocol's main goal is to advertise the identities of all the\n   capable\
    \ devices attached to the same LAN segment and to collect the\n   information\
    \ received on the ports of each device to determine if the\n   Layer 2 communication\
    \ is happening in the appropriate fashion.\n   In a network that has an extensive\
    \ fiber cabling plant, problems may\n   arise when incorrect patching causes a\
    \ switch port to have its RX\n   fiber strand connected to one neighbor port and\
    \ its TX fiber strand\n   connected to another.  In these cases, a port may be\
    \ deemed active if\n   it is receiving an optical signal on its RX strand.  However,\
    \ the\n   problem is that this link does not provide a valid communication path\n\
    \   at Layer 2 (and above).\n   If this scenario of wrongly connected fiber strands\
    \ is applied to\n   multiple ports to create a fiber loop, each device in the\
    \ loop could\n   directly send packets to a neighbor but would not be able to\
    \ receive\n   from that neighbor.\n   Albeit the above scenario is rather extreme,\
    \ it exemplifies how the\n   lack of mutual identification of the neighbors can\
    \ bring protocols to\n   the wrong assumption that during a transmission the sender\
    \ and the\n   receiver are always properly matched.  Another equally dangerous\n\
    \   incorrect assumption is that the lack of reception of protocol\n   messages\
    \ on a port unmistakably indicates the absence of transmitting\n   protocol entities\
    \ at the other end of the link.\n   The UDLD protocol was implemented to help\
    \ correct certain assumptions\n   made by other protocols, and in particular to\
    \ help the Spanning Tree\n   Protocol to function properly so as to avoid the\
    \ creation of\n   dangerous Layer 2 loops.  It has been available on most Cisco\
    \ Systems\n   switches for several years and is now part of numerous network design\n\
    \   best practices.\n"
- title: 3.  Protocol Design Premises
  contents:
  - "3.  Protocol Design Premises\n   The current implementation of UDLD is based\
    \ on the following\n   considerations/presuppositions:\n      o  The protocol\
    \ would have to be run in the control plane of a\n         network device to be\
    \ flexible enough to support upgrades and\n         bug fixes.  The control plane\
    \ speed would ultimately be the\n         limiting factor to the capability of\
    \ fast fault detection of\n         the protocol (CPU speed, task switching speed,\
    \ event processing\n         speed, etc.).  The transmission medium's propagation\
    \ delay at\n         10 Mbps speed (or higher) would instead be considered a\n\
    \         negligible factor.\n      o  Network events typically do not happen\
    \ with optimal timing, but\n         rather at the speed determined by the software/firmware\n\
    \         infrastructure that controls them.  (For psychological and\n       \
    \  practical reasons, developers tend to choose round timer values\n         rather\
    \ than determine the optimal value for the specific\n         software architecture\
    \ in use.  Also, software bugs, coding\n         oversights, slow process switching,\
    \ implementation overhead can\n         all affect the control plane responsiveness\
    \ and event timings.)\n         Hence it was deemed necessary to adopt a conservative\
    \ protocol\n         design to minimize false positives during the detection\n\
    \         process.\n      o  If a fault were discovered, it was assumed that the\
    \ user would\n         want to keep the faulty port down for a predetermined amount\
    \ of\n         time to avoid unnecessary port state flapping.  For that\n    \
    \     reason, a time-based fault recovery mechanism was provided\n         (although\
    \ alternative recovery mechanisms are not implicitly\n         precluded by the\
    \ protocol itself).\n"
- title: 4.  Protocol Background
  contents:
  - "4.  Protocol Background\n   UDLD is meant to be a Layer 2 detection protocol\
    \ that works on top of\n   the existing Layer 1 detection mechanisms defined by\
    \ the IEEE\n   standards.  For example, the Far End Fault Indication (FEFI) function\n\
    \   for 100BaseFX interfaces and the Auto-Negotiation function for\n   100BaseTX/1000BaseX\
    \ interfaces represent standard physical-layer\n   mechanisms to determine if\
    \ the transmission media is bidirectional.\n   (Please see sections 24.3.2.1 and\
    \ 28.2.3.5 of [2] for more details.)\n   The typical case of a Layer 1 \"fault\"\
    \ indication is the \"loss of\n   light\" indication.\n   UDLD differs from the\
    \ above-mentioned mechanisms insofar as it\n   performs mutual neighbor identification;\
    \ in addition, it performs\n   neighbor acknowledgement on top of the Logical\
    \ Link Control (LLC)\n   layer and thus is able to discover logical one-way miscommunication\n\
    \   between neighbors even when either one of the said PHY layer\n   mechanisms\
    \ has deemed the transmission medium bidirectional.\n"
- title: 5.  Protocol Architecture
  contents:
  - '5.  Protocol Architecture

    '
- title: 5.1.  The Basics
  contents:
  - "5.1.  The Basics\n   UDLD uses two basic mechanisms:\n      a. It advertises\
    \ a port's identity and learns about its neighbors\n         on a specific LAN\
    \ segment; it keeps the acquired information on\n         the neighbors in a cache\
    \ table.\n      b. It sends a train of echo messages in certain circumstances\
    \ that\n         require fast notifications or fast resynchronization of the\n\
    \         cached information.\n   Because of the above, the algorithm run by UDLD\
    \ requires that all the\n   devices connected to the same LAN segment be running\
    \ the protocol in\n   order for a potential misconfiguration to be detected and\
    \ for a\n   prompt corrective action to be taken.\n"
- title: 5.2.  Neighbor Database Maintenance
  contents:
  - "5.2.  Neighbor Database Maintenance\n   UDLD sends periodical \"hello\" packets\
    \ (also called \"advertisements\"\n   or \"probes\") on every active interface\
    \ to keep each device informed\n   about its neighbors.  When a hello message\
    \ is received, it is cached\n   and kept in memory at most for a defined time\
    \ interval, called\n   \"holdtime\" or \"time-to-live\", after which the cache\
    \ entry is\n   considered stale and is aged out.\n   If a new hello message is\
    \ received when a correspondent old cache\n   entry has not been aged out yet,\
    \ then the old entry is dropped and is\n   replaced by the new one with a reset\
    \ time-to-live timer.  Whenever an\n   interface gets disabled and UDLD is running,\
    \ or whenever UDLD is\n   disabled on an interface, or whenever the device is\
    \ reset, all\n   existing cache entries for the interfaces affected by the\n \
    \  configuration change are cleared, and UDLD sends at least one message\n   to\
    \ inform the neighbors to flush the part of their caches also\n   affected by\
    \ the status change.  This mechanism is meant to keep the\n   caches coherent\
    \ on all the connected devices.\n"
- title: 5.3.  Event-driven Detection and Echoing
  contents:
  - "5.3.  Event-driven Detection and Echoing\n   The echoing mechanism is the base\
    \ of UDLD's detection algorithm:\n   whenever a UDLD device learns about a new\
    \ neighbor or receives a\n   resynchronization request from an out-of-synch neighbor,\
    \ it\n   (re)starts the detection process on its side of the connection and\n\
    \   sends N echo messages in reply.  (This mechanism implicitly assumes\n   that\
    \ N packets are sufficient to get through a link and reach the\n   other end,\
    \ even though some of them might get dropped during the\n   transmission.)\n \
    \  Since this behavior must be the same on all the neighbors, the sender\n   of\
    \ the echoes expects to receive (after some time) an echo in reply.\n   If the\
    \ detection process ends without the proper echo information\n   being received,\
    \ and under specific conditions, the link is considered\n   to be unidirectional.\n"
- title: 5.4.  Event-based versus Event-less Detection
  contents:
  - "5.4.  Event-based versus Event-less Detection\n   UDLD can function in two modes:\
    \ normal mode and aggressive mode.\n   In normal mode, a protocol determination\
    \ at the end of the detection\n   process is always based on information received\
    \ in UDLD messages:\n   whether it's the information about the exchange of proper\
    \ neighbor\n   identifications or the information about the absence of such proper\n\
    \   identifications.  Hence, albeit bound by a timer, normal mode\n   determinations\
    \ are always based on gleaned information, and as such\n   are \"event-based\"\
    .  If no such information can be obtained (e.g.,\n   because of a bidirectional\
    \ loss of connectivity), UDLD follows a\n   conservative approach based on the\
    \ considerations in Section 3 and\n   deems a port to be in \"undetermined\" state.\
    \  In other words, normal\n   mode will shut down a port only if it can explicitly\
    \ determine that\n   the associated link is faulty for an extended period of time.\n\
    \   In contrast, in aggressive mode, UDLD will also shut down a port if\n   it\
    \ loses bidirectional connectivity with the neighbor for the same\n   extended\
    \ period of time mentioned above and subsequently fails\n   repeated last-resort\
    \ attempts to re-establish communication with the\n   other end of the link. \
    \ This mode of operation assumes that loss of\n   communication with the neighbor\
    \ is a meaningful network event in\n   itself and is a symptom of a serious connectivity\
    \ problem.  Because\n   this type of detection can be event-less, and lack of\
    \ information\n   cannot always be associated to an actual malfunction of the\
    \ link,\n   this mode is optional and is recommended only in certain scenarios\n\
    \   (typically only on point-to-point links where no communication\n   failure\
    \ between two neighbors is admissible).\n"
- title: 6.  Packet Format
  contents:
  - "6.  Packet Format\n   The UDLD protocol runs on top of the LLC sub-layer of the\
    \ data link\n   layer of the OSI model.  It uses a specially assigned multicast\n\
    \   destination MAC address and encapsulates its messages using the\n   standard\
    \ Subnetwork Access Protocol (SNAP) format as described in the\n   following:\n\
    \         Destination MAC address            01-00-0C-CC-CC-CC\n         UDLD\
    \ SNAP format:\n           LLC value                        0xAAAA03\n       \
    \    Org Id                           0x00000C\n           HDLC protocol type\
    \               0x0111\n   UDLD's Protocol Data Unit (PDU) format is as follows:\n\
    \    0                   1                   2                   3\n    0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | Ver | Opcode  |     Flags     |           Checksum            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |               List of TLVs (variable length list)             |\n   |  \
    \                            ...                              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The TLV format is the basic one described below:\n    0                  \
    \ 1                   2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4\
    \ 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |             TYPE              |            LENGTH             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                             VALUE                             |\n   |  \
    \                            ...                              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Type (16 bits): If an implementation does not understand a Type\n        \
    \ value, it should skip over it using the length field.\n   Length (16 bits):\
    \ Length in bytes of the Type, Length, and Value\n         fields.  In order for\
    \ this field value to be valid, it should\n         be greater than or equal to\
    \ the minimum allowed length, 4\n         bytes.  If the value is less than the\
    \ minimum, the whole packet\n         is to be considered corrupted and therefore\
    \ it must be\n         discarded right away during the parsing process.  TLVs\
    \ should\n         not be split across packet boundaries.\n   Value (variable\
    \ length): Object contained in the TLV.\n   The protocol header fields are defined\
    \ as follows:\n   Ver (3 bits):\n         0x01: UDLD PDU version number\n   Opcode\
    \ (5 bits):\n         0x00: Reserved\n         0x01: Probe message\n         0x02:\
    \ Echo message\n         0x03: Flush message\n         0x04-0x1F: Reserved for\
    \ future use\n   Flags (8 bits):\n         bit 0: Recommended timeout flag (RT)\n\
    \         bit 1: ReSynch flag (RSY)\n         bit 2-7: Reserved for future use\n\
    \   PDU Checksum (16 bits):\n         IP-like checksum.  Take the one's complement\
    \ of the one's\n         complement sum (with the modification that the odd byte\
    \ at the\n         end of an odd length message is used as the low 8 bits of an\n\
    \         extra word, rather than as the high 8 bits.)  NB: All UDLD\n       \
    \  implementations must comply with this specification.\n   The list of currently\
    \ defined TLVs comprises:\n      Name                   Type      Value format\n\
    \      Device-ID TLV          0x0001    ASCII character string\n      Port-ID\
    \ TLV            0x0002    ASCII character string\n      Echo TLV            \
    \   0x0003    List of ID pairs\n      Message Interval TLV   0x0004    8-bit unsigned\
    \ integer\n      Timeout Interval TLV   0x0005    8-bit unsigned integer\n   \
    \   Device Name TLV        0x0006    ASCII character string\n      Sequence Number\
    \ TLV    0x0007    32-bit unsigned integer\n      Reserved TLVs          > 0x0007\
    \  Format unknown.\n                                       To be skipped by parsing\
    \ routine.\n"
- title: 6.1.  TLV Description
  contents:
  - "6.1.  TLV Description\n   Device-ID TLV:\n      This TLV uniquely identifies\
    \ the device that is sending the UDLD\n      packet.  The TLV length field determines\
    \ the length of the carried\n      identifier and must be greater than zero. \
    \ In version 1 of the\n      protocol, the lack of this ID is considered a symptom\
    \ of packet\n      corruption that implies that the message is invalid and must\
    \ be\n      discarded.\n   Port-ID TLV:\n      This TLV uniquely identifies the\
    \ physical port the UDLD packet is\n      sent on.  The TLV length field determines\
    \ the length of the\n      carried identifier and must be greater than zero. \
    \ In version 1 of\n      the protocol, the lack of this ID is considered a symptom\
    \ of\n      packet corruption that implies that the message is invalid and\n \
    \     must be discarded.\n   Echo TLV:\n      This TLV contains the list of valid\
    \ DeviceID/PortID pairs received\n      by a port from all its neighbors.  If\
    \ either one of the\n      identifiers in a pair is corrupted, the message will\
    \ be ignored.\n      This list includes only DeviceIDs and PortIDs extracted from\
    \ UDLD\n      messages received and cached on the same interface on which this\n\
    \      TLV is sent.  If no UDLD messages are received, then this TLV is\n    \
    \  sent containing zero pairs.  Despite its name, this TLV must be\n      present\
    \ in both probe and echo messages, whereas in flush messages\n      it's not required.\n\
    \   Message Interval TLV:\n      This required TLV contains the 8-bit time interval\
    \ value used by a\n      neighbor to send UDLD probes after the linkup or detection\
    \ phases.\n      Its time unit is 1 second.  The holdtime of a cache item for\
    \ a\n      received message is calculated as (advertised-message-interval x\n\
    \      R), where R is a constant called \"TTL to message interval ratio\".\n \
    \  Timeout Interval TLV:\n      This optional TLV contains the 8-bit timeout interval\
    \ value (T)\n      used by UDLD to decide the basic length of the detection phase.\n\
    \      Its time unit is 1 second.  If it's not present in an\n      advertisement,\
    \ T is assumed to be a hard-coded constant.\n   Device Name TLV:\n      This required\
    \ TLV is meant to be used by the CLI or SNMP and\n      typically contains the\
    \ user-readable device name string.\n   Sequence Number TLV:\n      The purpose\
    \ of this optional TLV is to inform the neighbors of the\n      sequence number\
    \ of the current message being transmitted.  A\n      counter from 1 to 2^32-1\
    \ is supposed to keep track of the sequence\n      number; it is reset whenever\
    \ a transition of phase occurs so that\n      it will restart counting from one,\
    \ for instance, whenever an echo\n      message sequence is initiated, or whenever\
    \ a linkup message train\n      is triggered.\n      No wraparound of the counter\
    \ is supposed to happen.\n      The zero value is reserved and can be used as\
    \ a representation of\n      a missing or invalid sequence number by the user\
    \ interface.\n      Therefore, the TLV should never contain zero.  (NB: The use\
    \ of\n      this TLV is currently limited only to informational purposes.)\n"
- title: 7.  Protocol Logic
  contents:
  - "7.  Protocol Logic\n   UDLD's protocol logic relies on specific internal timers\
    \ and is\n   sensitive to certain network events.\n   The type of messages that\
    \ UDLD transmits and the timing intervals\n   that it uses are dependent upon\
    \ the internal state of the protocol,\n   which changes based on network events\
    \ such as:\n      o  Link up\n      o  Link down\n      o  Protocol enabled\n\
    \      o  Protocol disabled\n      o  New neighbor discovery\n      o  Neighbor\
    \ state change\n      o  Neighbor resynchronization requests\n"
- title: 7.1.  Protocol Timers
  contents:
  - "7.1.  Protocol Timers\n   UDLD timer values could vary within certain \"safety\"\
    \ ranges based on\n   the considerations in Section 3.  However, in practice,\
    \ in the\n   current implementation, timers use only certain values verified\n\
    \   during testing.  Their time unit is one second.\n   During the detection phase,\
    \ messages are exchanged at the maximum\n   possible rate of one per second. \
    \ After that, if the protocol reaches\n   a stable state and can make a certain\
    \ determination on the\n   \"bidirectionality\" of the link, the message interval\
    \ is increased to\n   a configurable value based on a curve known as M1(t), a\
    \ time-based\n   function.\n   In case the link is deemed anything other than\
    \ bidirectional at the\n   end of the detection, this curve is a flat line with\
    \ a fixed value of\n   Mfast (7 seconds in the current implementation).\n   In\
    \ case the link is instead deemed bidirectional, the curve will use\n   Mfast\
    \ for the first 4 subsequent message transmissions and then will\n   transition\
    \ to an Mslow value for all other steady-state\n   transmissions.  Mslow can be\
    \ either a fixed value (60 seconds in some\n   obsolete implementations) or a\
    \ user-configurable value (between Mfast\n   and 90 seconds with a default of\
    \ 15 seconds in the current\n   implementations).\n"
- title: 8.  Comparison with Bidirectional Forwarding Detection
  contents:
  - "8.  Comparison with Bidirectional Forwarding Detection\n   Similarly to UDLD,\
    \ the Bidirectional Forwarding Detection (BFD) [3]\n   protocol is intended to\
    \ detect faults in the path between two network\n   nodes.  However, BFD is supposed\
    \ to operate independently of media,\n   data protocols, and routing protocols.\
    \  There is no address discovery\n   mechanism in BFD, which is left to the application\
    \ to determine.\n   On the other hand, UDLD works exclusively on top of a L2 transport\n\
    \   supporting the SNAP encapsulation and operates independently of the\n   other\
    \ bridge protocols (UDLD's main \"applications\"), with which it\n   has limited\
    \ interaction.  It also performs full neighbor discovery on\n   point-to-point\
    \ and point-to-multipoint media.\n"
- title: 9.  Security Considerations
  contents:
  - "9.  Security Considerations\n   In a heterogeneous Layer 2 network that is built\
    \ with different\n   models of network devices or with devices running different\
    \ software\n   images, the UDLD protocol should be supported and configured on\
    \ all\n   ports interconnecting said devices in order to achieve a complete\n\
    \   coverage of its detection process.  Note that UDLD is not supposed to\n  \
    \ be used on ports connected to untrusted devices or incapable devices;\n   hence,\
    \ it should be disabled on such ports.\n"
- title: 10.  Deployment Considerations
  contents:
  - "10.  Deployment Considerations\n   Cisco Systems has supported the UDLD protocol\
    \ in its Catalyst family\n   of switches since 1999.\n"
- title: 11.  Normative References
  contents:
  - "11.  Normative References\n   [1]  IEEE 802.1D-2004 Standard -- Media access\
    \ control (MAC) Bridges\n   [2]  IEEE 802.3-2002 IEEE Standard -- Local and metropolitan\
    \ area\n        networks Specific requirements--Part 3: Carrier Sense Multiple\n\
    \        Access with Collision Detection (CSMA/CD) Access Method and\n       \
    \ Physical Layer Specifications\n"
- title: 12.  Informative Reference
  contents:
  - "12.  Informative Reference\n   [3]  Katz, D., and D. Ward, \"Bidirectional Forwarding\
    \ Detection\",\n        Work in Progress, March 2008.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Marco Foschiano\n   Cisco Systems, Inc.\n   Via Torri Bianche\
    \ 7,\n   20059 Vimercate (Mi)\n   Italy\n   EMail: foschia@cisco.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2008).\n   This document\
    \ is subject to the rights, licenses and restrictions\n   contained in BCP 78\
    \ and at http://www.rfc-editor.org/copyright.html,\n   and except as set forth\
    \ therein, the authors retain all their rights.\n   This document and the information\
    \ contained herein are provided on an\n   \"AS IS\" basis and THE CONTRIBUTOR,\
    \ THE ORGANIZATION HE/SHE REPRESENTS\n   OR IS SPONSORED BY (IF ANY), THE INTERNET\
    \ SOCIETY, THE IETF TRUST AND\n   THE INTERNET ENGINEERING TASK FORCE DISCLAIM\
    \ ALL WARRANTIES, EXPRESS\n   OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTY\
    \ THAT THE USE OF\n   THE INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY\
    \ IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
