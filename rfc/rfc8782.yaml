- title: __initial_text__
  contents:
  - "   Distributed Denial-of-Service Open Threat Signaling (DOTS) Signal\n      \
    \                   Channel Specification\n"
- title: Abstract
  contents:
  - "Abstract\n   This document specifies the Distributed Denial-of-Service Open Threat\n\
    \   Signaling (DOTS) signal channel, a protocol for signaling the need\n   for\
    \ protection against Distributed Denial-of-Service (DDoS) attacks\n   to a server\
    \ capable of enabling network traffic mitigation on behalf\n   of the requesting\
    \ client.\n   A companion document defines the DOTS data channel, a separate\n\
    \   reliable communication layer for DOTS management and configuration\n   purposes.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 7841.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8782.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2020 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (https://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction\n   2.  Terminology\n   3.  Design Overview\n\
    \   4.  DOTS Signal Channel: Messages & Behaviors\n     4.1.  DOTS Server(s) Discovery\n\
    \     4.2.  CoAP URIs\n     4.3.  Happy Eyeballs for DOTS Signal Channel\n   \
    \  4.4.  DOTS Mitigation Methods\n       4.4.1.  Request Mitigation\n       4.4.2.\
    \  Retrieve Information Related to a Mitigation\n         4.4.2.1.  DOTS Servers\
    \ Sending Mitigation Status\n         4.4.2.2.  DOTS Clients Polling for Mitigation\
    \ Status\n       4.4.3.  Efficacy Update from DOTS Clients\n       4.4.4.  Withdraw\
    \ a Mitigation\n     4.5.  DOTS Signal Channel Session Configuration\n       4.5.1.\
    \  Discover Configuration Parameters\n       4.5.2.  Convey DOTS Signal Channel\
    \ Session Configuration\n       4.5.3.  Configuration Freshness and Notifications\n\
    \       4.5.4.  Delete DOTS Signal Channel Session Configuration\n     4.6.  Redirected\
    \ Signaling\n     4.7.  Heartbeat Mechanism\n   5.  DOTS Signal Channel YANG Modules\n\
    \     5.1.  Tree Structure\n     5.2.  IANA DOTS Signal Channel YANG Module\n\
    \     5.3.  IETF DOTS Signal Channel YANG Module\n   6.  YANG/JSON Mapping Parameters\
    \ to CBOR\n   7.  (D)TLS Protocol Profile and Performance Considerations\n   \
    \  7.1.  (D)TLS Protocol Profile\n     7.2.  (D)TLS 1.3 Considerations\n     7.3.\
    \  DTLS MTU and Fragmentation\n   8.  Mutual Authentication of DOTS Agents & Authorization\
    \ of DOTS\n           Clients\n   9.  IANA Considerations\n     9.1.  DOTS Signal\
    \ Channel UDP and TCP Port Number\n     9.2.  Well-Known 'dots' URI\n     9.3.\
    \  Media Type Registration\n     9.4.  CoAP Content-Formats Registration\n   \
    \  9.5.  CBOR Tag Registration\n     9.6.  DOTS Signal Channel Protocol Registry\n\
    \       9.6.1.  DOTS Signal Channel CBOR Key Values Subregistry\n         9.6.1.1.\
    \  Registration Template\n         9.6.1.2.  Initial Subregistry Content\n   \
    \    9.6.2.  Status Codes Subregistry\n       9.6.3.  Conflict Status Codes Subregistry\n\
    \       9.6.4.  Conflict Cause Codes Subregistry\n       9.6.5.  Attack Status\
    \ Codes Subregistry\n     9.7.  DOTS Signal Channel YANG Modules\n   10. Security\
    \ Considerations\n   11. References\n     11.1.  Normative References\n     11.2.\
    \  Informative References\n   Appendix A.  CUID Generation\n   Acknowledgements\n\
    \   Contributors\n   Authors' Addresses\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   A Distributed Denial-of-Service (DDoS) attack is a distributed\n\
    \   attempt to make machines or network resources unavailable to their\n   intended\
    \ users.  In most cases, sufficient scale for an effective\n   attack can be achieved\
    \ by compromising enough end hosts and using\n   those infected hosts to perpetrate\
    \ and amplify the attack.  The\n   victim in this attack can be an application\
    \ server, a host, a router,\n   a firewall, or an entire network.\n   Network\
    \ applications have finite resources like CPU cycles, the\n   number of processes\
    \ or threads they can create and use, the maximum\n   number of simultaneous connections\
    \ they can handle, the resources\n   assigned to the control plane, etc.  When\
    \ processing network traffic,\n   such applications are supposed to use these\
    \ resources to provide the\n   intended functionality in the most efficient manner.\
    \  However, a DDoS\n   attacker may be able to prevent an application from performing\
    \ its\n   intended task by making the application exhaust its finite resources.\n\
    \   A TCP DDoS SYN flood [RFC4987], for example, is a memory-exhausting\n   attack\
    \ while an ACK flood is a CPU-exhausting attack.  Attacks on the\n   link are\
    \ carried out by sending enough traffic so that the link\n   becomes congested,\
    \ thereby likely causing packet loss for legitimate\n   traffic.  Stateful firewalls\
    \ can also be attacked by sending traffic\n   that causes the firewall to maintain\
    \ an excessive number of states\n   that may jeopardize the firewall's operation\
    \ overall, in addition to\n   likely performance impacts.  The firewall then runs\
    \ out of memory,\n   and it can no longer instantiate the states required to process\n\
    \   legitimate flows.  Other possible DDoS attacks are discussed in\n   [RFC4732].\n\
    \   In many cases, it may not be possible for network administrators to\n   determine\
    \ the cause(s) of an attack.  They may instead just realize\n   that certain resources\
    \ seem to be under attack.  This document\n   defines a lightweight protocol that\
    \ allows a DOTS client to request\n   mitigation from one or more DOTS servers\
    \ for protection against\n   detected, suspected, or anticipated attacks.  This\
    \ protocol enables\n   cooperation between DOTS agents to permit a highly automated\
    \ network\n   defense that is robust, reliable, and secure.  Note that \"secure\"\
    \n   means the support of the features defined in Section 2.4 of\n   [RFC8612].\n\
    \   An example of a network diagram that illustrates a deployment of DOTS\n  \
    \ agents is shown in Figure 1.  In this example, a DOTS server is\n   operating\
    \ on the access network.  A DOTS client is located on the LAN\n   (Local Area\
    \ Network), while a DOTS gateway is embedded in the CPE\n   (Customer Premises\
    \ Equipment).\n      Network\n      Resource         CPE Router        Access\
    \ Network     __________\n    |           |___|              |____|          \
    \   |___ | Internet |\n    |DOTS Client|   | DOTS Gateway |    | DOTS Server |\
    \    |          |\n                    Figure 1: Sample DOTS Deployment (1)\n\
    \   DOTS servers can also be reachable over the Internet, as depicted in\n   Figure\
    \ 2.\n      Network                                           DDoS Mitigation\n\
    \      Resource         CPE Router        __________         Service\n    |  \
    \         |___|              |____|          |___ |             |\n    |DOTS Client|\
    \   | DOTS Gateway |    | Internet |    | DOTS Server |\n                    Figure\
    \ 2: Sample DOTS Deployment (2)\n   In typical deployments, the DOTS client belongs\
    \ to a different\n   administrative domain than the DOTS server.  For example,\
    \ the DOTS\n   client is embedded in a firewall protecting services owned and\n\
    \   operated by a customer, while the DOTS server is owned and operated\n   by\
    \ a different administrative entity (service provider, typically)\n   providing\
    \ DDoS mitigation services.  The latter might or might not\n   provide connectivity\
    \ services to the network hosting the DOTS client.\n   The DOTS server may (not)\
    \ be co-located with the DOTS mitigator.  In\n   typical deployments, the DOTS\
    \ server belongs to the same\n   administrative domain as the mitigator.  The\
    \ DOTS client can\n   communicate directly with a DOTS server or indirectly via\
    \ a DOTS\n   gateway.\n   This document adheres to the DOTS architecture [DOTS-ARCH].\
    \  The\n   requirements for DOTS signal channel protocol are documented in\n \
    \  [RFC8612].  This document satisfies all the use cases discussed in\n   [DOTS-USE-CASES].\n\
    \   This document focuses on the DOTS signal channel.  This is a\n   companion\
    \ document of the DOTS data channel specification [RFC8783]\n   that defines a\
    \ configuration and a bulk data exchange mechanism\n   supporting the DOTS signal\
    \ channel.\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\"\
    , \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted as described\
    \ in BCP\n   14 [RFC2119][RFC8174] when, and only when, they appear in all\n \
    \  capitals, as shown here.\n   (D)TLS is used for statements that apply to both\
    \ Transport Layer\n   Security [RFC5246] [RFC8446] and Datagram Transport Layer\
    \ Security\n   [RFC6347].  Specific terms are used for any statement that applies\
    \ to\n   either protocol alone.\n   The reader should be familiar with the terms\
    \ defined in [RFC8612].\n   The meaning of the symbols in YANG tree diagrams is\
    \ defined in\n   [RFC8340].\n"
- title: 3.  Design Overview
  contents:
  - "3.  Design Overview\n   The DOTS signal channel is built on top of the Constrained\n\
    \   Application Protocol (CoAP) [RFC7252], a lightweight protocol\n   originally\
    \ designed for constrained devices and networks.  The many\n   features of CoAP\
    \ (expectation of packet loss, support for\n   asynchronous Non-confirmable messaging,\
    \ congestion control, small\n   message overhead limiting the need for fragmentation,\
    \ use of minimal\n   resources, and support for (D)TLS) make it a good candidate\
    \ upon\n   which to build the DOTS signaling mechanism.\n   DOTS clients and servers\
    \ behave as CoAP endpoints.  By default, a\n   DOTS client (or server) behaves\
    \ as a CoAP client (or server).\n   Nevertheless, a DOTS client (or server) behaves\
    \ as a CoAP server (or\n   client) for specific operations such as DOTS heartbeat\
    \ operations\n   (Section 4.7).\n   The DOTS signal channel is layered on existing\
    \ standards (see\n   Figure 3).\n                          | DOTS Signal Channel\
    \ |\n                          |   TLS    |   DTLS   |\n                     \
    \     |   TCP    |   UDP    |\n     Figure 3: Abstract Layering of DOTS Signal\
    \ Channel over CoAP over\n   In some cases, a DOTS client and server may have\
    \ a mutual agreement\n   to use a specific port number, such as by explicit configuration\
    \ or\n   dynamic discovery [DOTS-SERVER-DISC].  Absent such mutual agreement,\n\
    \   the DOTS signal channel MUST run over port number 4646 as defined in\n   Section\
    \ 9.1, for both UDP and TCP.  In order to use a distinct port\n   number (as opposed\
    \ to 4646), DOTS clients and servers SHOULD support\n   a configurable parameter\
    \ to supply the port number to use.\n      |  Note: The rationale for not using\
    \ the default port number 5684\n      |  ((D)TLS CoAP) is to avoid the discovery\
    \ of services and\n      |  resources discussed in [RFC7252] and allow for differentiated\n\
    \      |  behaviors in environments where both a DOTS gateway and an\n      |\
    \  Internet of Things (IoT) gateway (e.g., Figure 3 of [RFC7452])\n      |  are\
    \ co-located.\n      |  \n      |  Particularly, the use of a default port number\
    \ is meant to\n      |  simplify DOTS deployment in scenarios where no explicit\
    \ IP\n      |  address configuration is required.  For example, the use of the\n\
    \      |  default router as the DOTS server aims to ease DOTS deployment\n   \
    \   |  within LANs (in which CPEs embed a DOTS gateway as illustrated\n      |\
    \  in Figures 1 and 2) without requiring a sophisticated discovery\n      |  method\
    \ and configuration tasks within the LAN.  It is also\n      |  possible to use\
    \ anycast addresses for DOTS servers to simplify\n      |  DOTS client configuration,\
    \ including service discovery.  In\n      |  such an anycast-based scenario, a\
    \ DOTS client initiating a DOTS\n      |  session to the DOTS server anycast address\
    \ may, for example, be\n      |  (1) redirected to the DOTS server unicast address\
    \ to be used by\n      |  the DOTS client following the procedure discussed in\n\
    \      |  Section 4.6 or (2) relayed to a unicast DOTS server.\n   The signal\
    \ channel uses the \"coaps\" URI scheme defined in Section 6\n   of [RFC7252]\
    \ and the \"coaps+tcp\" URI scheme defined in Section 8.2 of\n   [RFC8323] to\
    \ identify DOTS server resources that are accessible using\n   CoAP over UDP secured\
    \ with DTLS and CoAP over TCP secured with TLS,\n   respectively.\n   The DOTS\
    \ signal channel can be established between two DOTS agents\n   prior to or during\
    \ an attack.  The DOTS signal channel is initiated\n   by the DOTS client.  The\
    \ DOTS client can then negotiate, configure,\n   and retrieve the DOTS signal\
    \ channel session behavior with its DOTS\n   peer (Section 4.5).  Once the signal\
    \ channel is established, the DOTS\n   agents may periodically send heartbeats\
    \ to keep the channel active\n   (Section 4.7).  At any time, the DOTS client\
    \ may send a mitigation\n   request message (Section 4.4) to a DOTS server over\
    \ the active signal\n   channel.  While mitigation is active (because of the higher\n\
    \   likelihood of packet loss during a DDoS attack), the DOTS server\n   periodically\
    \ sends status messages to the client, including basic\n   mitigation feedback\
    \ details.  Mitigation remains active until the\n   DOTS client explicitly terminates\
    \ mitigation or the mitigation\n   lifetime expires.  Also, the DOTS server may\
    \ rely on the signal\n   channel session loss to trigger mitigation for preconfigured\n\
    \   mitigation requests (if any).\n   DOTS signaling can happen with DTLS over\
    \ UDP and TLS over TCP.\n   Likewise, DOTS requests may be sent using IPv4 or\
    \ IPv6 transfer\n   capabilities.  A Happy Eyeballs procedure for the DOTS signal\
    \ channel\n   is specified in Section 4.3.\n   A DOTS client is entitled to access\
    \ only the resources it creates.\n   In particular, a DOTS client cannot retrieve\
    \ data related to\n   mitigation requests created by other DOTS clients of the\
    \ same DOTS\n   client domain.\n   Messages exchanged between DOTS agents are\
    \ serialized using Concise\n   Binary Object Representation (CBOR) [RFC7049],\
    \ a binary encoding\n   scheme designed for small code and message size.  CBOR-encoded\n\
    \   payloads are used to carry signal channel-specific payload messages\n   that\
    \ convey request parameters and response information such as\n   errors.  In order\
    \ to allow the reusing of data models across\n   protocols, [RFC7951] specifies\
    \ the JavaScript Object Notation (JSON)\n   encoding of YANG-modeled data.  A\
    \ similar effort for CBOR is defined\n   in [CORE-YANG-CBOR].\n   DOTS agents\
    \ determine that a CBOR data structure is a DOTS signal\n   channel object from\
    \ the application context, such as from the port\n   number assigned to the DOTS\
    \ signal channel.  The other method DOTS\n   agents use to indicate that a CBOR\
    \ data structure is a DOTS signal\n   channel object is the use of the \"application/dots+cbor\"\
    \ content type\n   (Section 9.3).\n   This document specifies a YANG module for\
    \ representing DOTS\n   mitigation scopes, DOTS signal channel session configuration\
    \ data,\n   and DOTS redirected signaling (Section 5).  All parameters in the\n\
    \   payload of the DOTS signal channel are mapped to CBOR types as\n   specified\
    \ in Table 5 (Section 6).\n   In order to prevent fragmentation, DOTS agents must\
    \ follow the\n   recommendations documented in Section 4.6 of [RFC7252].  Refer\
    \ to\n   Section 7.3 for more details.\n   DOTS agents MUST support GET, PUT,\
    \ and DELETE CoAP methods.  The\n   payload included in CoAP responses with 2.xx\
    \ Response Codes MUST be\n   of content type \"application/dots+cbor\".  CoAP\
    \ responses with 4.xx\n   and 5.xx error Response Codes MUST include a diagnostic\
    \ payload\n   (Section 5.5.2 of [RFC7252]).  The diagnostic payload may contain\n\
    \   additional information to aid troubleshooting.\n   In deployments where multiple\
    \ DOTS clients are enabled in a network\n   (owned and operated by the same entity),\
    \ the DOTS server may detect\n   conflicting mitigation requests from these clients.\
    \  This document\n   does not aim to specify a comprehensive list of conditions\
    \ under\n   which a DOTS server will characterize two mitigation requests from\n\
    \   distinct DOTS clients as conflicting, nor does it recommend a DOTS\n   server\
    \ behavior for processing conflicting mitigation requests.\n   Those considerations\
    \ are implementation and deployment specific.\n   Nevertheless, this document\
    \ specifies the mechanisms to notify DOTS\n   clients when conflicts occur, including\
    \ the conflict cause\n   (Section 4.4).\n   In deployments where one or more translators\
    \ (e.g., Traditional NAT\n   [RFC3022], CGN [RFC6888], NAT64 [RFC6146], NPTv6\
    \ [RFC6296]) are\n   enabled between the client's network and the DOTS server,\
    \ any DOTS\n   signal channel messages forwarded to a DOTS server MUST NOT include\n\
    \   internal IP addresses/prefixes and/or port numbers; instead, external\n  \
    \ addresses/prefixes and/or port numbers as assigned by the translator\n   MUST\
    \ be used.  This document does not make any recommendations about\n   possible\
    \ translator discovery mechanisms.  The following are some\n   (non-exhaustive)\
    \ deployment examples that may be considered:\n   *  Port Control Protocol (PCP)\
    \ [RFC6887] or Session Traversal\n      Utilities for NAT (STUN) [RFC8489] may\
    \ be used to retrieve the\n      external addresses/prefixes and/or port numbers.\
    \  Information\n      retrieved by means of PCP or STUN will be used to feed the\
    \ DOTS\n      signal channel messages that will be sent to a DOTS server.\n  \
    \ *  A DOTS gateway may be co-located with the translator.  The DOTS\n      gateway\
    \ will need to update the DOTS messages based upon the local\n      translator's\
    \ binding table.\n"
- title: '4.  DOTS Signal Channel: Messages & Behaviors'
  contents:
  - '4.  DOTS Signal Channel: Messages & Behaviors

    '
- title: 4.1.  DOTS Server(s) Discovery
  contents:
  - "4.1.  DOTS Server(s) Discovery\n   This document assumes that DOTS clients are\
    \ provisioned with the\n   reachability information of their DOTS server(s) using\
    \ any of a\n   variety of means (e.g., local configuration or dynamic means such\
    \ as\n   DHCP [DOTS-SERVER-DISC]).  The description of such means is out of\n\
    \   scope of this document.\n   Likewise, it is out of the scope of this document\
    \ to specify the\n   behavior to be followed by a DOTS client in order to send\
    \ DOTS\n   requests when multiple DOTS servers are provisioned (e.g., contact\n\
    \   all DOTS servers, select one DOTS server among the list).  Such\n   behavior\
    \ is specified in other documents (e.g., [DOTS-MH]).\n"
- title: 4.2.  CoAP URIs
  contents:
  - "4.2.  CoAP URIs\n   The DOTS server MUST support the use of the path prefix of\
    \ \"/.well-\n   known/\" as defined in [RFC8615] and the registered name of \"\
    dots\".\n   Each DOTS operation is denoted by a path suffix that indicates the\n\
    \   intended operation.  The operation path (Table 1) is appended to the\n   path\
    \ prefix to form the URI used with a CoAP request to perform the\n   desired DOTS\
    \ operation.\n         | Operation             | Operation Path | Details    \
    \ |\n         | Mitigation            | /mitigate      | Section 4.4 |\n     \
    \    | Session configuration | /config        | Section 4.5 |\n         | Heartbeat\
    \             | /hb            | Section 4.7 |\n                Table 1: Operations\
    \ and Corresponding URIs\n"
- title: 4.3.  Happy Eyeballs for DOTS Signal Channel
  contents:
  - "4.3.  Happy Eyeballs for DOTS Signal Channel\n   [RFC8612] mentions that DOTS\
    \ agents will have to support both\n   connectionless and connection-oriented\
    \ protocols.  As such, the DOTS\n   signal channel is designed to operate with\
    \ DTLS over UDP and TLS over\n   TCP.  Further, a DOTS client may acquire a list\
    \ of IPv4 and IPv6\n   addresses (Section 4.1), each of which can be used to contact\
    \ the\n   DOTS server using UDP and TCP.  If no list of IPv4 and IPv6 addresses\n\
    \   to contact the DOTS server is configured (or discovered), the DOTS\n   client\
    \ adds the IPv4/IPv6 addresses of its default router to the\n   candidate list\
    \ to contact the DOTS server.\n   The following specifies the procedure to follow\
    \ to select the address\n   family and the transport protocol for sending DOTS\
    \ signal channel\n   messages.\n   Such a procedure is needed to avoid experiencing\
    \ long connection\n   delays.  For example, if an IPv4 path to a DOTS server is\
    \ functional,\n   but the DOTS server's IPv6 path is nonfunctional, a dual-stack\
    \ DOTS\n   client may experience a significant connection delay compared to an\n\
    \   IPv4-only DOTS client in the same network conditions.  The other\n   problem\
    \ is that if a middlebox between the DOTS client and DOTS\n   server is configured\
    \ to block UDP traffic, the DOTS client will fail\n   to establish a DTLS association\
    \ with the DOTS server; consequently,\n   it will have to fall back to TLS over\
    \ TCP, thereby incurring\n   significant connection delays.\n   To overcome these\
    \ connection setup problems, the DOTS client attempts\n   to connect to its DOTS\
    \ server(s) using both IPv6 and IPv4, and it\n   tries both DTLS over UDP and\
    \ TLS over TCP following a DOTS Happy\n   Eyeballs approach.  To some extent,\
    \ this approach is similar to the\n   Happy Eyeballs mechanism defined in [RFC8305].\
    \  The connection\n   attempts are performed by the DOTS client when it initializes\
    \ or, in\n   general, when it has to select an address family and transport to\n\
    \   contact its DOTS server.  The results of the Happy Eyeballs procedure\n  \
    \ are used by the DOTS client for sending its subsequent messages to\n   the DOTS\
    \ server.  The differences in behavior with respect to the\n   Happy Eyeballs\
    \ mechanism [RFC8305] are listed below:\n   *  The order of preference of the\
    \ DOTS signal channel address family\n      and transport protocol (most preferred\
    \ first) is the following:\n      UDP over IPv6, UDP over IPv4, TCP over IPv6,\
    \ and finally TCP over\n      IPv4.  This order adheres to the address preference\
    \ order\n      specified in [RFC6724] and the DOTS signal channel preference that\n\
    \      promotes the use of UDP over TCP (to avoid TCP's head of line\n      blocking).\n\
    \   *  After successfully establishing a connection, the DOTS client MUST\n  \
    \    cache information regarding the outcome of each connection attempt\n    \
    \  for a specific time period; it uses that information to avoid\n      thrashing\
    \ the network with subsequent attempts.  The cached\n      information is flushed\
    \ when its age exceeds a specific time period\n      on the order of few minutes\
    \ (e.g., 10 min).  Typically, if the\n      DOTS client has to reestablish the\
    \ connection with the same DOTS\n      server within a few seconds after the Happy\
    \ Eyeballs mechanism is\n      completed, caching avoids thrashing the network\
    \ especially in the\n      presence of DDoS attack traffic.\n   *  If a DOTS signal\
    \ channel session is established with TLS (but DTLS\n      failed), the DOTS client\
    \ periodically repeats the mechanism to\n      discover whether DOTS signal channel\
    \ messages with DTLS over UDP\n      become available from the DOTS server; this\
    \ is so the DOTS client\n      can migrate the DOTS signal channel from TCP to\
    \ UDP.  Such probing\n      SHOULD NOT be done more frequently than every 24 hours\
    \ and MUST\n      NOT be done more frequently than every 5 minutes.\n   When connection\
    \ attempts are made during an attack, the DOTS client\n   SHOULD use a \"Connection\
    \ Attempt Delay\" [RFC8305] set to 100 ms.\n   In Figure 4, the DOTS client proceeds\
    \ with the connection attempts\n   following the rules in [RFC8305].  In this\
    \ example, it is assumed\n   that the IPv6 path is broken and UDP traffic is dropped\
    \ by a\n   middlebox, but this has little impact on the DOTS client because\n\
    \   there is not a long delay before using IPv4 and TCP.\n    |DOTS Client|  \
    \                                       |DOTS Server|\n       T0 |--DTLS ClientHello,\
    \ IPv6 ---->X                      |\n       T1 |--DTLS ClientHello, IPv4 ---->X\
    \                      |\n       T2 |--TCP SYN, IPv6-------------->X         \
    \             |\n       T3 |--TCP SYN, IPv4------------------------------------->|\n\
    \          |<-TCP SYNACK-----------------------------------------|\n         \
    \ |--TCP ACK------------------------------------------->|\n          |<------------Establish\
    \ TLS Session------------------>|\n          |----------------DOTS signal------------------------->|\n\
    \     Note:\n      * Retransmission messages are not shown.\n      * T1-T0=T2-T1=T3-T2=\
    \ Connection Attempt Delay.\n                Figure 4: DOTS Happy Eyeballs (Sample\
    \ Flow)\n   A single DOTS signal channel between DOTS agents can be used to\n\
    \   exchange multiple DOTS signal messages.  To reduce DOTS client and\n   DOTS\
    \ server workload, DOTS clients SHOULD reuse the (D)TLS session.\n"
- title: 4.4.  DOTS Mitigation Methods
  contents:
  - "4.4.  DOTS Mitigation Methods\n   The following methods are used by a DOTS client\
    \ to request, withdraw,\n   or retrieve the status of mitigation requests:\n \
    \  PUT:      DOTS clients use the PUT method to request mitigation from\n    \
    \         a DOTS server (Section 4.4.1).  During active mitigation,\n        \
    \     DOTS clients may use PUT requests to carry mitigation\n             efficacy\
    \ updates to the DOTS server (Section 4.4.3).\n   GET:      DOTS clients may use\
    \ the GET method to subscribe to DOTS\n             server status messages or\
    \ to retrieve the list of its\n             mitigations maintained by a DOTS server\
    \ (Section 4.4.2).\n   DELETE:   DOTS clients use the DELETE method to withdraw\
    \ a request\n             for mitigation from a DOTS server (Section 4.4.4).\n\
    \   Mitigation request and response messages are marked as Non-\n   confirmable\
    \ messages (Section 2.2 of [RFC7252]).\n   DOTS agents MUST NOT send more than\
    \ one UDP datagram per round-trip\n   time (RTT) to the peer DOTS agent on average\
    \ following the data\n   transmission guidelines discussed in Section 3.1.3 of\
    \ [RFC8085].\n   Requests marked by the DOTS client as Non-confirmable messages\
    \ are\n   sent at regular intervals until a response is received from the DOTS\n\
    \   server.  If the DOTS client cannot maintain an RTT estimate, it MUST\n   NOT\
    \ send more than one Non-confirmable request every 3 seconds, and\n   SHOULD use\
    \ an even less aggressive rate whenever possible (case 2 in\n   Section 3.1.3\
    \ of [RFC8085]).  Mitigation requests MUST NOT be delayed\n   because of checks\
    \ on probing rate (Section 4.7 of [RFC7252]).\n   JSON encoding of YANG modeled\
    \ data [RFC7951] is used to illustrate\n   the various methods defined in the\
    \ following subsections.  Also, the\n   examples use the Labels defined in Sections\
    \ 9.6.2, 9.6.3, 9.6.4, and\n   9.6.5.\n"
- title: 4.4.1.  Request Mitigation
  contents:
  - "4.4.1.  Request Mitigation\n   When a DOTS client requires mitigation for some\
    \ reason, the DOTS\n   client uses the CoAP PUT method to send a mitigation request\
    \ to its\n   DOTS server(s) (Figures 5 and 6).\n   If a DOTS client is entitled\
    \ to solicit the DOTS service, the DOTS\n   server enables mitigation on behalf\
    \ of the DOTS client by\n   communicating the DOTS client's request to a mitigator\
    \ (which may be\n   co-located with the DOTS server) and relaying the feedback\
    \ of the\n   thus-selected mitigator to the requesting DOTS client.\n     Header:\
    \ PUT (Code=0.03)\n     Uri-Path: \".well-known\"\n     Uri-Path: \"dots\"\n \
    \    Uri-Path: \"mitigate\"\n     Uri-Path: \"cuid=dz6pHjaADkaFTbjr0JGBpw\"\n\
    \     Uri-Path: \"mid=123\"\n     Content-Format: \"application/dots+cbor\"\n\
    \     {\n       ...\n     }\n              Figure 5: PUT to Convey DOTS Mitigation\
    \ Requests\n   The order of the Uri-Path options is important as it defines the\
    \ CoAP\n   resource.  In particular, 'mid' MUST follow 'cuid'.\n   The additional\
    \ Uri-Path parameters to those defined in Section 4.2\n   are as follows:\n  \
    \ cuid:  Stands for Client Unique Identifier.  A globally unique\n         identifier\
    \ that is meant to prevent collisions among DOTS\n         clients, especially\
    \ those from the same domain.  It MUST be\n         generated by DOTS clients.\n\
    \         For the reasons discussed in Appendix A, implementations SHOULD\n  \
    \       set 'cuid' using the following procedure: first, the DOTS\n         client\
    \ inputs one of the following into the SHA-256 [RFC6234]\n         cryptographic\
    \ hash: the DER-encoded ASN.1 representation of the\n         Subject Public Key\
    \ Info (SPKI) of its X.509 certificate\n         [RFC5280], its raw public key\
    \ [RFC7250], the \"Pre-Shared Key\n         (PSK) identity\" it uses in the TLS\
    \ 1.2 ClientKeyExchange\n         message, or the \"identity\" it uses in the\
    \ \"pre_shared_key\" TLS\n         1.3 extension.  Then, the output of the cryptographic\
    \ hash\n         algorithm is truncated to 16 bytes; truncation is done by\n \
    \        stripping off the final 16 bytes.  The truncated output is\n        \
    \ base64url encoded (Section 5 of [RFC4648]) with the trailing\n         \"=\"\
    \ removed from the encoding, and the resulting value used as\n         the 'cuid'.\n\
    \         The 'cuid' is intended to be stable when communicating with a\n    \
    \     given DOTS server, i.e., the 'cuid' used by a DOTS client\n         SHOULD\
    \ NOT change over time.  Distinct 'cuid' values MAY be\n         used by a single\
    \ DOTS client per DOTS server.\n         If a DOTS client has to change its 'cuid'\
    \ for some reason, it\n         MUST NOT do so when mitigations are still active\
    \ for the old\n         'cuid'.  The 'cuid' SHOULD be 22 characters to avoid DOTS\n\
    \         signal message fragmentation over UDP.  Furthermore, if that\n     \
    \    DOTS client created aliases and filtering entries at the DOTS\n         server\
    \ by means of the DOTS data channel, it MUST delete all\n         the entries\
    \ bound to the old 'cuid' and reinstall them using\n         the new 'cuid'.\n\
    \         DOTS servers MUST return 4.09 (Conflict) error code to a DOTS\n    \
    \     peer to notify that the 'cuid' is already in use by another\n         DOTS\
    \ client.  Upon receipt of that error code, a new 'cuid'\n         MUST be generated\
    \ by the DOTS peer (e.g., using [RFC4122]).\n         Client-domain DOTS gateways\
    \ MUST handle 'cuid' collision\n         directly and it is RECOMMENDED that 'cuid'\
    \ collision is handled\n         directly by server-domain DOTS gateways.\n  \
    \       DOTS gateways MAY rewrite the 'cuid' used by peer DOTS clients.\n    \
    \     Triggers for such rewriting are out of scope.\n         This is a mandatory\
    \ Uri-Path parameter.\n   mid:  Identifier for the mitigation request represented\
    \ with an\n         integer.  This identifier MUST be unique for each mitigation\n\
    \         request bound to the DOTS client, i.e., the 'mid' parameter\n      \
    \   value in the mitigation request needs to be unique (per 'cuid'\n         and\
    \ DOTS server) relative to the 'mid' parameter values of\n         active mitigation\
    \ requests conveyed from the DOTS client to the\n         DOTS server.\n     \
    \    In order to handle out-of-order delivery of mitigation\n         requests,\
    \ 'mid' values MUST increase monotonically.\n         If the 'mid' value has reached\
    \ 3/4 of (2^(32) - 1) (i.e.,\n         3221225471) and no attack is detected,\
    \ the DOTS client MUST\n         reset 'mid' to 0 to handle 'mid' rollover.  If\
    \ the DOTS client\n         maintains mitigation requests with preconfigured scopes,\
    \ it\n         MUST recreate them with the 'mid' restarting at 0.\n         This\
    \ identifier MUST be generated by the DOTS client.\n         This is a mandatory\
    \ Uri-Path parameter.\n   'cuid' and 'mid' MUST NOT appear in the PUT request\
    \ message body\n   (Figure 6).  The schema in Figure 6 uses the types defined\
    \ in\n   Section 6.  Note that this figure (and other similar figures\n   depicting\
    \ a schema) are non-normative sketches of the structure of\n   the message.\n\
    \     {\n       \"ietf-dots-signal-channel:mitigation-scope\": {\n         \"\
    scope\": [\n           {\n             \"target-prefix\": [\n                \"\
    string\"\n              ],\n             \"target-port-range\": [\n          \
    \      {\n                  \"lower-port\": number,\n                  \"upper-port\"\
    : number\n                }\n              ],\n              \"target-protocol\"\
    : [\n                number\n              ],\n              \"target-fqdn\":\
    \ [\n                \"string\"\n              ],\n              \"target-uri\"\
    : [\n                \"string\"\n              ],\n              \"alias-name\"\
    : [\n                \"string\"\n              ],\n             \"lifetime\":\
    \ number,\n             \"trigger-mitigation\": true|false\n           }\n   \
    \      ]\n       }\n     }\n       Figure 6: PUT to Convey DOTS Mitigation Requests\
    \ (Message Body\n   The parameters in the CBOR body (Figure 6) of the PUT request\
    \ are\n   described below:\n   target-prefix:  A list of prefixes identifying\
    \ resources under\n      attack.  Prefixes are represented using Classless Inter-Domain\n\
    \      Routing (CIDR) notation [RFC4632].\n      As a reminder, the prefix length\
    \ must be less than or equal to 32\n      (or 128) for IPv4 (or IPv6).\n     \
    \ The prefix list MUST NOT include broadcast, loopback, or multicast\n      addresses.\
    \  These addresses are considered to be invalid values.\n      In addition, the\
    \ DOTS server MUST validate that target prefixes\n      are within the scope of\
    \ the DOTS client domain.  Other validation\n      checks may be supported by\
    \ DOTS servers.\n      This is an optional attribute.\n   target-port-range: \
    \ A list of port numbers bound to resources under\n      attack.\n      A port\
    \ range is defined by two bounds, a lower port number\n      ('lower-port') and\
    \ an upper port number ('upper-port').  When only\n      'lower-port' is present,\
    \ it represents a single port number.\n      For TCP, UDP, Stream Control Transmission\
    \ Protocol (SCTP)\n      [RFC4960], or Datagram Congestion Control Protocol (DCCP)\n\
    \      [RFC4340], a range of ports can be, for example, 0-1023,\n      1024-65535,\
    \ or 1024-49151.\n      This is an optional attribute.\n   target-protocol:  A\
    \ list of protocols involved in an attack.  Values\n      are taken from the IANA\
    \ protocol registry [IANA-Proto].\n      If 'target-protocol' is not specified,\
    \ then the request applies to\n      any protocol.\n      This is an optional\
    \ attribute.\n   target-fqdn:  A list of Fully Qualified Domain Names (FQDNs)\n\
    \      identifying resources under attack [RFC8499].\n      How a name is passed\
    \ to an underlying name resolution library is\n      implementation and deployment\
    \ specific.  Nevertheless, once the\n      name is resolved into one or multiple\
    \ IP addresses, DOTS servers\n      MUST apply the same validation checks as those\
    \ for 'target-\n      prefix'.\n      The use of FQDNs may be suboptimal because:\n\
    \      *  It induces both an extra load and increased delays on the DOTS\n   \
    \      server to handle and manage DNS resolution requests.\n      *  It does\
    \ not guarantee that the DOTS server will resolve a name\n         to the same\
    \ IP addresses that the DOTS client does.\n      This is an optional attribute.\n\
    \   target-uri:  A list of URIs [RFC3986] identifying resources under\n      attack.\n\
    \      The same validation checks used for 'target-fqdn' MUST be followed\n  \
    \    by DOTS servers to validate a target URI.\n      This is an optional attribute.\n\
    \   alias-name:  A list of aliases of resources for which the mitigation\n   \
    \   is requested.  Aliases can be created using the DOTS data channel\n      (Section\
    \ 6.1 of [RFC8783]), direct configuration, or other means.\n      An alias is\
    \ used in subsequent signal channel exchanges to refer\n      more efficiently\
    \ to the resources under attack.\n      This is an optional attribute.\n   lifetime:\
    \  Lifetime of the mitigation request in seconds.  The\n      RECOMMENDED lifetime\
    \ of a mitigation request is 3600 seconds: this\n      value was chosen to be\
    \ long enough so that refreshing is not\n      typically a burden on the DOTS\
    \ client, while still making the\n      request expire in a timely manner when\
    \ the client has unexpectedly\n      quit.  DOTS clients MUST include this parameter\
    \ in their\n      mitigation requests.  Upon the expiry of this lifetime, and\
    \ if the\n      request is not refreshed, the mitigation request is removed. \
    \ The\n      request can be refreshed by sending the same request again.\n   \
    \   A lifetime of '0' in a mitigation request is an invalid value.\n      A lifetime\
    \ of negative one (-1) indicates indefinite lifetime for\n      the mitigation\
    \ request.  The DOTS server MAY refuse an indefinite\n      lifetime, for policy\
    \ reasons; the granted lifetime value is\n      returned in the response.  DOTS\
    \ clients MUST be prepared to not be\n      granted mitigations with indefinite\
    \ lifetimes.\n      The DOTS server MUST always indicate the actual lifetime in\
    \ the\n      response and the remaining lifetime in status messages sent to the\n\
    \      DOTS client.\n      This is a mandatory attribute.\n   trigger-mitigation:\
    \  If the parameter value is set to 'false', DDoS\n      mitigation will not be\
    \ triggered for the mitigation request unless\n      the DOTS signal channel session\
    \ is lost.\n      If the DOTS client ceases to respond to heartbeat messages,\
    \ the\n      DOTS server can detect that the DOTS signal channel session is\n\
    \      lost.  More details are discussed in Section 4.7.\n      The default value\
    \ of the parameter is 'true' (that is, the\n      mitigation starts immediately).\
    \  If 'trigger-mitigation' is not\n      present in a request, this is equivalent\
    \ to receiving a request\n      with 'trigger-mitigation' set to 'true'.\n   \
    \   This is an optional attribute.\n   In deployments where server-domain DOTS\
    \ gateways are enabled,\n   identity information about the origin source client\
    \ domain ('cdid')\n   SHOULD be propagated to the DOTS server.  That information\
    \ is meant\n   to assist the DOTS server in enforcing some policies such as grouping\n\
    \   DOTS clients that belong to the same DOTS domain, limiting the number\n  \
    \ of DOTS requests, and identifying the mitigation scope.  These\n   policies\
    \ can be enforced per client, per client domain, or both.\n   Also, the identity\
    \ information may be used for auditing and debugging\n   purposes.\n   Figure\
    \ 7 shows an example of a request relayed by a server-domain\n   DOTS gateway.\n\
    \     Header: PUT (Code=0.03)\n     Uri-Path: \".well-known\"\n     Uri-Path:\
    \ \"dots\"\n     Uri-Path: \"mitigate\"\n     Uri-Path: \"cdid=7eeaf349529eb55ed50113\"\
    \n     Uri-Path: \"cuid=dz6pHjaADkaFTbjr0JGBpw\"\n     Uri-Path: \"mid=123\"\n\
    \     Content-Format: \"application/dots+cbor\"\n     {\n       ...\n     }\n\
    \       Figure 7: PUT for DOTS Mitigation Request as Relayed by a DOTS\n   A server-domain\
    \ DOTS gateway SHOULD add the following Uri-Path\n   parameter:\n   cdid:  Stands\
    \ for Client Domain Identifier.  The 'cdid' is conveyed\n         by a server-domain\
    \ DOTS gateway to propagate the source domain\n         identity from the gateway's\
    \ client-facing side to the gateway's\n         server-facing side, and from the\
    \ gateway's server-facing side\n         to the DOTS server. 'cdid' may be used\
    \ by the final DOTS server\n         for policy enforcement purposes (e.g., enforce\
    \ a quota on\n         filtering rules).  These policies are deployment specific.\n\
    \         Server-domain DOTS gateways SHOULD support a configuration\n       \
    \  option to instruct whether 'cdid' parameter is to be inserted.\n         In\
    \ order to accommodate deployments that require enforcing per-\n         client\
    \ policies, per-client domain policies, or a combination\n         thereof, server-domain\
    \ DOTS gateways instructed to insert the\n         'cdid' parameter MUST supply\
    \ the SPKI hash of the DOTS client\n         X.509 certificate, the DOTS client\
    \ raw public key, or the hash\n         of the \"PSK identity\" in the 'cdid',\
    \ following the same rules\n         for generating the hash conveyed in 'cuid',\
    \ which is then used\n         by the ultimate DOTS server to determine the corresponding\n\
    \         client's domain.  The 'cdid' generated by a server-domain\n        \
    \ gateway is likely to be the same as the 'cuid' except the case\n         in\
    \ which the DOTS message was relayed by a client-domain DOTS\n         gateway\
    \ or the 'cuid' was generated from a rogue DOTS client.\n         If a DOTS client\
    \ is provisioned, for example, with distinct\n         certificates as a function\
    \ of the peer server-domain DOTS\n         gateway, distinct 'cdid' values may\
    \ be supplied by a server-\n         domain DOTS gateway.  The ultimate DOTS server\
    \ MUST treat those\n         'cdid' values as equivalent.\n         The 'cdid'\
    \ attribute MUST NOT be generated and included by DOTS\n         clients.\n  \
    \       DOTS servers MUST ignore 'cdid' attributes that are directly\n       \
    \  supplied by source DOTS clients or client-domain DOTS gateways.\n         This\
    \ implies that first server-domain DOTS gateways MUST strip\n         'cdid' attributes\
    \ supplied by DOTS clients.  DOTS servers\n         SHOULD support a configuration\
    \ parameter to identify DOTS\n         gateways that are trusted to supply 'cdid'\
    \ attributes.\n         Only single-valued 'cdid' are defined in this document.\
    \  That\n         is, only the first on-path server-domain DOTS gateway can\n\
    \         insert a 'cdid' value.  This specification does not allow\n        \
    \ multiple server-domain DOTS gateways, whenever involved in the\n         path,\
    \ to insert a 'cdid' value for each server-domain gateway.\n         This is an\
    \ optional Uri-Path.  When present, 'cdid' MUST be\n         positioned before\
    \ 'cuid'.\n   A DOTS gateway SHOULD add the CoAP Hop-Limit option [RFC8768].\n\
    \   Because of the complexity of handling partial failure cases, this\n   specification\
    \ does not allow the inclusion of multiple mitigation\n   requests in the same\
    \ PUT request.  Concretely, a DOTS client MUST NOT\n   include multiple entries\
    \ in the 'scope' array of the same PUT\n   request.\n   FQDN and URI mitigation\
    \ scopes may be thought of as a form of scope\n   alias, in which the addresses\
    \ associated with the domain name or URI\n   (as resolved by the DOTS server)\
    \ represent the scope of the\n   mitigation.  Particularly, the IP addresses to\
    \ which the host\n   subcomponent of authority component of a URI resolves represent\
    \ the\n   'target-prefix', the URI scheme represents the 'target-protocol', the\n\
    \   port subcomponent of authority component of a URI represents the\n   'target-port-range'.\
    \  If the optional port information is not present\n   in the authority component,\
    \ the default port defined for the URI\n   scheme represents the 'target-port'.\n\
    \   In the PUT request, at least one of the attributes 'target-prefix',\n   'target-fqdn','target-uri',\
    \ or 'alias-name' MUST be present.\n   Attributes and Uri-Path parameters with\
    \ empty values MUST NOT be\n   present in a request as an empty value will render\
    \ the entire request\n   invalid.\n   Figure 8 shows a PUT request example to\
    \ signal that servers\n   2001:db8:6401::1 and 2001:db8:6401::2 are receiving\
    \ attack traffic on\n   TCP port numbers 80, 8080, and 443.  The presence of 'cdid'\
    \ indicates\n   that a server-domain DOTS gateway has modified the initial PUT\n\
    \   request sent by the DOTS client.  Note that 'cdid' MUST NOT appear in\n  \
    \ the PUT request message body.\n     Header: PUT (Code=0.03)\n     Uri-Path:\
    \ \".well-known\"\n     Uri-Path: \"dots\"\n     Uri-Path: \"mitigate\"\n    \
    \ Uri-Path: \"cdid=7eeaf349529eb55ed50113\"\n     Uri-Path: \"cuid=dz6pHjaADkaFTbjr0JGBpw\"\
    \n     Uri-Path: \"mid=123\"\n     Content-Format: \"application/dots+cbor\"\n\
    \     {\n       \"ietf-dots-signal-channel:mitigation-scope\": {\n         \"\
    scope\": [\n           {\n             \"target-prefix\": [\n                \"\
    2001:db8:6401::1/128\",\n                \"2001:db8:6401::2/128\"\n          \
    \    ],\n             \"target-port-range\": [\n               {\n           \
    \      \"lower-port\": 80\n               },\n               {\n             \
    \    \"lower-port\": 443\n               },\n               {\n              \
    \    \"lower-port\": 8080\n               }\n              ],\n              \"\
    target-protocol\": [\n                6\n              ],\n             \"lifetime\"\
    : 3600\n           }\n         ]\n       }\n     }\n           Figure 8: PUT for\
    \ DOTS Mitigation Request (An Example)\n   The corresponding CBOR encoding format\
    \ for the payload is shown in\n   Figure 9.\n      A1                        \
    \              # map(1)\n         01                                   # unsigned(1)\n\
    \         A1                                   # map(1)\n            02      \
    \                          # unsigned(2)\n            81                     \
    \           # array(1)\n               A4                             # map(4)\n\
    \                  06                          # unsigned(6)\n               \
    \   82                          # array(2)\n                     74          \
    \             # text(20)\n                        323030313A6462383A363430313A3A312F313238\n\
    \                     74                       # text(20)\n                  \
    \      323030313A6462383A363430313A3A322F313238\n                  07        \
    \                  # unsigned(7)\n                  83                       \
    \   # array(3)\n                     A1                       # map(1)\n     \
    \                   08                    # unsigned(8)\n                    \
    \    18 50                 # unsigned(80)\n                     A1           \
    \            # map(1)\n                        08                    # unsigned(8)\n\
    \                        19 01BB               # unsigned(443)\n             \
    \        A1                       # map(1)\n                        08       \
    \             # unsigned(8)\n                        19 1F90               # unsigned(8080)\n\
    \                  0A                          # unsigned(10)\n              \
    \    81                          # array(1)\n                     06         \
    \              # unsigned(6)\n                  0E                          #\
    \ unsigned(14)\n                  19 0E10                     # unsigned(3600)\n\
    \              Figure 9: PUT for DOTS Mitigation Request (CBOR)\n   In both DOTS\
    \ signal and data channel sessions, the DOTS client MUST\n   authenticate itself\
    \ to the DOTS server (Section 8).  The DOTS server\n   MAY use the algorithm presented\
    \ in Section 7 of [RFC7589] to derive\n   the DOTS client identity or username\
    \ from the client certificate.\n   The DOTS client identity allows the DOTS server\
    \ to accept mitigation\n   requests with scopes that the DOTS client is authorized\
    \ to manage.\n   The DOTS server couples the DOTS signal and data channel sessions\n\
    \   using the DOTS client identity and optionally the 'cdid' parameter\n   value,\
    \ so the DOTS server can validate whether the aliases conveyed\n   in the mitigation\
    \ request were indeed created by the same DOTS client\n   using the DOTS data\
    \ channel session.  If the aliases were not created\n   by the DOTS client, the\
    \ DOTS server MUST return 4.00 (Bad Request) in\n   the response.\n   The DOTS\
    \ server couples the DOTS signal channel sessions using the\n   DOTS client identity\
    \ and optionally the 'cdid' parameter value, and\n   the DOTS server uses 'mid'\
    \ and 'cuid' Uri-Path parameter values to\n   detect duplicate mitigation requests.\
    \  If the mitigation request\n   contains the 'alias-name' and other parameters\
    \ identifying the target\n   resources (such as 'target-prefix', 'target-port-range',\
    \ 'target-\n   fqdn', or 'target-uri'), the DOTS server appends the parameter\
    \ values\n   in 'alias-name' with the corresponding parameter values in 'target-\n\
    \   prefix', 'target-port-range', 'target-fqdn', or 'target-uri'.\n   The DOTS\
    \ server indicates the result of processing the PUT request\n   using CoAP Response\
    \ Codes.  CoAP 2.xx codes are success.  CoAP 4.xx\n   codes are some sort of invalid\
    \ requests (client errors).  COAP 5.xx\n   codes are returned if the DOTS server\
    \ is in an error state or is\n   currently unavailable to provide mitigation in\
    \ response to the\n   mitigation request from the DOTS client.\n   Figure 10 shows\
    \ an example response to a PUT request that is\n   successfully processed by a\
    \ DOTS server (i.e., CoAP 2.xx Response\n   Codes).  This version of the specification\
    \ forbids 'cuid' and 'cdid'\n   (if used) to be returned in a response message\
    \ body.\n   {\n     \"ietf-dots-signal-channel:mitigation-scope\": {\n       \
    \ \"scope\": [\n           {\n             \"mid\": 123,\n             \"lifetime\"\
    : 3600\n           }\n         ]\n      }\n   }\n                       Figure\
    \ 10: 2.xx Response Body\n   If the request is missing a mandatory attribute,\
    \ does not include\n   'cuid' or 'mid' Uri-Path options, includes multiple 'scope'\n\
    \   parameters, or contains invalid or unknown parameters, the DOTS\n   server\
    \ MUST reply with 4.00 (Bad Request).  DOTS agents can safely\n   ignore comprehension-optional\
    \ parameters they don't understand\n   (Section 9.6.1.1).\n   A DOTS server that\
    \ receives a mitigation request with a 'lifetime'\n   set to '0' MUST reply with\
    \ a 4.00 (Bad Request).\n   If the DOTS server does not find the 'mid' parameter\
    \ value conveyed\n   in the PUT request in its configuration data, it MAY accept\
    \ the\n   mitigation request by sending back a 2.01 (Created) response to the\n\
    \   DOTS client; the DOTS server will consequently try to mitigate the\n   attack.\
    \  A DOTS server could reject mitigation requests when it is\n   near capacity\
    \ or needs to rate-limit a particular client, for\n   example.\n   The relative\
    \ order of two mitigation requests with the same 'trigger-\n   mitigation' type\
    \ from a DOTS client is determined by comparing their\n   respective 'mid' values.\
    \  If two mitigation requests with the same\n   'trigger-mitigation' type have\
    \ overlapping mitigation scopes, the\n   mitigation request with the highest numeric\
    \ 'mid' value will override\n   the other mitigation request.  Two mitigation\
    \ requests from a DOTS\n   client have overlapping scopes if there is a common\
    \ IP address, IP\n   prefix, FQDN, URI, or alias.  To avoid maintaining a long\
    \ list of\n   overlapping mitigation requests (i.e., requests with the same\n\
    \   'trigger-mitigation' type and overlapping scopes) from a DOTS client\n   and\
    \ to avoid error-prone provisioning of mitigation requests from a\n   DOTS client,\
    \ the overlapped lower numeric 'mid' MUST be automatically\n   deleted and no\
    \ longer available at the DOTS server.  For example, if\n   the DOTS server receives\
    \ a mitigation request that overlaps with an\n   existing mitigation with a higher\
    \ numeric 'mid', the DOTS server\n   rejects the request by returning 4.09 (Conflict)\
    \ to the DOTS client.\n   The response includes enough information for a DOTS\
    \ client to\n   recognize the source of the conflict as described below in the\n\
    \   'conflict-information' subtree with only the relevant nodes listed:\n   conflict-information:\
    \  Indicates that a mitigation request is\n      conflicting with another mitigation\
    \ request.  This optional\n      attribute has the following structure:\n    \
    \  conflict-cause:  Indicates the cause of the conflict.  The\n         following\
    \ values are defined:\n         1:  Overlapping targets. 'conflict-scope' provides\
    \ more details\n             about the conflicting target clauses.\n      conflict-scope:\
    \  Characterizes the exact conflict scope.  It may\n         include a list of\
    \ IP addresses, a list of prefixes, a list of\n         port numbers, a list of\
    \ target protocols, a list of FQDNs, a\n         list of URIs, a list of aliases,\
    \ or a 'mid'.\n   If the DOTS server receives a mitigation request that overlaps\
    \ with\n   an active mitigation request, but both have distinct 'trigger-\n  \
    \ mitigation' types, the DOTS server SHOULD deactivate (absent explicit\n   policy/configuration\
    \ otherwise) the mitigation request with 'trigger-\n   mitigation' set to 'false'.\
    \  Particularly, if the mitigation request\n   with 'trigger-mitigation' set to\
    \ 'false' is active, the DOTS server\n   withdraws the mitigation request (i.e.,\
    \ status code is set to '7' as\n   defined in Table 3) and transitions the status\
    \ of the mitigation\n   request to '8'.\n   Upon DOTS signal channel session loss\
    \ with a peer DOTS client, the\n   DOTS server SHOULD withdraw (absent explicit\
    \ policy/configuration\n   otherwise) any active mitigation requests that overlap\
    \ with\n   mitigation requests having 'trigger-mitigation' set to 'false' from\n\
    \   that DOTS client, as the loss of the session implicitly activates\n   these\
    \ preconfigured mitigation requests, and they take precedence.\n   Note that the\
    \ active-but-terminating period is not observed for\n   mitigations withdrawn\
    \ at the initiative of the DOTS server.\n   DOTS clients may adopt various strategies\
    \ for setting the scopes of\n   immediate and preconfigured mitigation requests\
    \ to avoid potential\n   conflicts.  For example, a DOTS client may tweak preconfigured\
    \ scopes\n   so that the scope of any overlapping immediate mitigation request\n\
    \   will be a subset of the preconfigured scopes.  Also, if an immediate\n   mitigation\
    \ request overlaps with any of the preconfigured scopes, the\n   DOTS client sets\
    \ the scope of the overlapping immediate mitigation\n   request to be a subset\
    \ of the preconfigured scopes, so as to get a\n   broad mitigation when the DOTS\
    \ signal channel collapses and to\n   maximize the chance of recovery.\n   If\
    \ the request conflicts with an existing mitigation request from a\n   different\
    \ DOTS client, the DOTS server may return 2.01 (Created) or\n   4.09 (Conflict)\
    \ to the requesting DOTS client.  If the DOTS server\n   decides to maintain the\
    \ new mitigation request, the DOTS server\n   returns 2.01 (Created) to the requesting\
    \ DOTS client.  If the DOTS\n   server decides to reject the new mitigation request,\
    \ the DOTS server\n   returns 4.09 (Conflict) to the requesting DOTS client. \
    \ For both 2.01\n   (Created) and 4.09 (Conflict) responses, the response includes\
    \ enough\n   information for a DOTS client to recognize the source of the conflict\n\
    \   as described below:\n   conflict-information:  Indicates that a mitigation\
    \ request is\n      conflicting with another mitigation request(s) from other\
    \ DOTS\n      client(s).  This optional attribute has the following structure:\n\
    \      conflict-status:  Indicates the status of a conflicting mitigation\n  \
    \       request.  The following values are defined:\n         1:  DOTS server\
    \ has detected conflicting mitigation requests\n             from different DOTS\
    \ clients.  This mitigation request is\n             currently inactive until\
    \ the conflicts are resolved.\n             Another mitigation request is active.\n\
    \         2:  DOTS server has detected conflicting mitigation requests\n     \
    \        from different DOTS clients.  This mitigation request is\n          \
    \   currently active.\n         3:  DOTS server has detected conflicting mitigation\
    \ requests\n             from different DOTS clients.  All conflicting mitigation\n\
    \             requests are inactive.\n      conflict-cause:  Indicates the cause\
    \ of the conflict.  The\n         following values are defined:\n         1: \
    \ Overlapping targets. 'conflict-scope' provides more details\n             about\
    \ the conflicting target clauses.\n         2:  Conflicts with an existing accept-list.\
    \  This code is\n             returned when the DDoS mitigation detects source\
    \ addresses/\n             prefixes in the accept-listed ACLs are attacking the\n\
    \             target.\n         3:  CUID Collision.  This code is returned when\
    \ a DOTS client\n             uses a 'cuid' that is already used by another DOTS\
    \ client.\n             This code is an indication that the request has been\n\
    \             rejected and a new request with a new 'cuid' is to be re-\n    \
    \         sent by the DOTS client (see the example shown in\n             Figure\
    \ 11).  Note that 'conflict-status', 'conflict-scope',\n             and 'retry-timer'\
    \ MUST NOT be returned in the error\n             response.\n      conflict-scope:\
    \  Characterizes the exact conflict scope.  It may\n         include a list of\
    \ IP addresses, a list of prefixes, a list of\n         port numbers, a list of\
    \ target protocols, a list of FQDNs, a\n         list of URIs, a list of aliases,\
    \ or references to conflicting\n         ACLs (by an 'acl-name', typically [RFC8783]).\n\
    \      retry-timer:  Indicates, in seconds, the time after which the DOTS\n  \
    \       client may reissue the same request.  The DOTS server returns\n      \
    \   'retry-timer' only to DOTS client(s) for which a mitigation\n         request\
    \ is deactivated.  Any retransmission of the same\n         mitigation request\
    \ before the expiry of this timer is likely to\n         be rejected by the DOTS\
    \ server for the same reasons.\n         The 'retry-timer' SHOULD be equal to\
    \ the lifetime of the active\n         mitigation request resulting in the deactivation\
    \ of the\n         conflicting mitigation request.\n         If the DOTS server\
    \ decides to maintain a state for the\n         deactivated mitigation request,\
    \ the DOTS server updates the\n         lifetime of the deactivated mitigation\
    \ request to 'retry-timer\n         + 45 seconds' (that is, this mitigation request\
    \ remains\n         deactivated for the entire duration of 'retry-timer + 45\n\
    \         seconds') so that the DOTS client can refresh the deactivated\n    \
    \     mitigation request after 'retry-timer' seconds, but before the\n       \
    \  expiry of the lifetime, and check if the conflict is resolved.\n     Header:\
    \ PUT (Code=0.03)\n     Uri-Path: \".well-known\"\n     Uri-Path: \"dots\"\n \
    \    Uri-Path: \"mitigate\"\n     Uri-Path: \"cuid=7eeaf349529eb55ed50113\"\n\
    \     Uri-Path: \"mid=12\"\n     (1) Request with a conflicting 'cuid'\n     {\n\
    \       \"ietf-dots-signal-channel:mitigation-scope\": {\n          \"scope\"\
    : [\n             {\n               \"conflict-information\": {\n            \
    \     \"conflict-cause\": \"cuid-collision\"\n                }\n            \
    \ }\n           ]\n        }\n     }\n     (2) Message body of the 4.09 (Conflict)\
    \ response\n       from the DOTS server\n     Header: PUT (Code=0.03)\n     Uri-Path:\
    \ \".well-known\"\n     Uri-Path: \"dots\"\n     Uri-Path: \"mitigate\"\n    \
    \ Uri-Path: \"cuid=f30d281ce6b64fc5a0b91e\"\n     Uri-Path: \"mid=12\"\n     (3)\
    \ Request with a new 'cuid'\n               Figure 11: Example of Generating a\
    \ New 'cuid'\n   As an active attack evolves, DOTS clients can adjust the scope\
    \ of\n   requested mitigation as necessary, by refining the scope of resources\n\
    \   requiring mitigation.  This can be achieved by sending a PUT request\n   with\
    \ a new 'mid' value that will override the existing one with\n   overlapping mitigation\
    \ scopes.\n   For a mitigation request to continue beyond the initial negotiated\n\
    \   lifetime, the DOTS client has to refresh the current mitigation\n   request\
    \ by sending a new PUT request.  This PUT request MUST use the\n   same 'mid'\
    \ value, and it MUST repeat all the other parameters as sent\n   in the original\
    \ mitigation request apart from a possible change to\n   the 'lifetime' parameter\
    \ value.  In such a case, the DOTS server MAY\n   update the mitigation request,\
    \ and a 2.04 (Changed) response is\n   returned to indicate a successful update\
    \ of the mitigation request.\n   If this is not the case, the DOTS server MUST\
    \ reject the request with\n   a 4.00 (Bad Request).\n"
- title: 4.4.2.  Retrieve Information Related to a Mitigation
  contents:
  - "4.4.2.  Retrieve Information Related to a Mitigation\n   A GET request is used\
    \ by a DOTS client to retrieve information\n   (including status) of DOTS mitigations\
    \ from a DOTS server.\n   'cuid' is a mandatory Uri-Path parameter for GET requests.\n\
    \   Uri-Path parameters with empty values MUST NOT be present in a\n   request.\n\
    \   The same considerations for manipulating the 'cdid' parameter by\n   server-domain\
    \ DOTS gateways specified in Section 4.4.1 MUST be\n   followed for GET requests.\n\
    \   The 'c' Uri-Query option is used to control selection of\n   configuration\
    \ and non-configuration data nodes.  Concretely, the 'c'\n   (content) parameter\
    \ and its permitted values defined in Table 2\n   [COMI] can be used to retrieve\
    \ non-configuration data (attack\n   mitigation status), configuration data, or\
    \ both.  The DOTS server MAY\n   support this optional filtering capability. \
    \ It can safely ignore it\n   if not supported.  If the DOTS client supports the\
    \ optional filtering\n   capability, it SHOULD use \"c=n\" query (to get back\
    \ only the\n   dynamically changing data) or \"c=c\" query (to get back the static\n\
    \   configuration values) when the DDoS attack is active to limit the\n   size\
    \ of the response.\n      | Value | Description                              \
    \           |\n      | c     | Return only configuration descendant data nodes\
    \     |\n      | n     | Return only non-configuration descendant data nodes |\n\
    \      | a     | Return all descendant data nodes                    |\n     \
    \          Table 2: Permitted Values of the 'c' Parameter\n   The DOTS client\
    \ can use block-wise transfer [RFC7959] to get the list\n   of all its mitigations\
    \ maintained by a DOTS server, it can send a\n   Block2 Option in a GET request\
    \ with NUM = 0 to aid in limiting the\n   size of the response.  If the representation\
    \ of all the active\n   mitigation requests associated with the DOTS client does\
    \ not fit\n   within a single datagram, the DOTS server MUST use the Block2 Option\n\
    \   with NUM = 0 in the GET response.  The Size2 Option may be conveyed\n   in\
    \ the response to indicate the total size of the resource\n   representation.\
    \  The DOTS client retrieves the rest of the\n   representation by sending additional\
    \ GET requests with Block2 Options\n   containing NUM values greater than zero.\
    \  The DOTS client MUST adhere\n   to the block size preferences indicated by\
    \ the DOTS server in the\n   response.  If the DOTS server uses the Block2 Option\
    \ in the GET\n   response, and the response is for a dynamically changing resource\n\
    \   (e.g., \"c=n\" or \"c=a\" query), the DOTS server MUST include the ETag\n\
    \   Option in the response.  The DOTS client MUST include the same ETag\n   value\
    \ in subsequent GET requests to retrieve the rest of the\n   representation.\n\
    \   The following examples illustrate how a DOTS client retrieves active\n   mitigation\
    \ requests from a DOTS server.  In particular:\n   *  Figure 12 shows the example\
    \ of a GET request to retrieve all DOTS\n      mitigation requests signaled by\
    \ a DOTS client.\n   *  Figure 13 shows the example of a GET request to retrieve\
    \ a\n      specific DOTS mitigation request signaled by a DOTS client.  The\n\
    \      configuration data to be reported in the response is formatted in\n   \
    \   the same order as it was processed by the DOTS server in the\n      original\
    \ mitigation request.\n   These two examples assume the default of \"c=a\"; that\
    \ is, the DOTS\n   client asks for all data to be reported by the DOTS server.\n\
    \     Header: GET (Code=0.01)\n     Uri-Path: \".well-known\"\n     Uri-Path:\
    \ \"dots\"\n     Uri-Path: \"mitigate\"\n     Uri-Path: \"cuid=dz6pHjaADkaFTbjr0JGBpw\"\
    \n     Observe: 0\n          Figure 12: GET to Retrieve All DOTS Mitigation Requests\n\
    \     Header: GET (Code=0.01)\n     Uri-Path: \".well-known\"\n     Uri-Path:\
    \ \"dots\"\n     Uri-Path: \"mitigate\"\n     Uri-Path: \"cuid=dz6pHjaADkaFTbjr0JGBpw\"\
    \n     Uri-Path: \"mid=12332\"\n     Observe: 0\n       Figure 13: GET to Retrieve\
    \ a Specific DOTS Mitigation Request\n   If the DOTS server does not find the\
    \ 'mid' Uri-Path value conveyed in\n   the GET request in its configuration data\
    \ for the requesting DOTS\n   client, it MUST respond with a 4.04 (Not Found)\
    \ error Response Code.\n   Likewise, the same error MUST be returned as a response\
    \ to a request\n   to retrieve all mitigation records (i.e., 'mid' Uri-Path is\
    \ not\n   defined) of a given DOTS client if the DOTS server does not find any\n\
    \   mitigation record for that DOTS client.  As a reminder, a DOTS client\n  \
    \ is identified by its identity (e.g., client certificate, 'cuid') and\n   optionally\
    \ the 'cdid'.\n   Figure 14 shows a response example of all active mitigation\
    \ requests\n   associated with the DOTS client as maintained by the DOTS server.\n\
    \   The response indicates the mitigation status of each mitigation\n   request.\n\
    \   {\n     \"ietf-dots-signal-channel:mitigation-scope\": {\n       \"scope\"\
    : [\n         {\n           \"mid\": 12332,\n           \"mitigation-start\":\
    \ \"1507818434\",\n           \"target-prefix\": [\n                \"2001:db8:6401::1/128\"\
    ,\n                \"2001:db8:6401::2/128\"\n           ],\n           \"target-protocol\"\
    : [\n             17\n           ],\n           \"lifetime\": 1756,\n        \
    \   \"status\": \"attack-successfully-mitigated\",\n           \"bytes-dropped\"\
    : \"134334555\",\n           \"bps-dropped\": \"43344\",\n           \"pkts-dropped\"\
    : \"333334444\",\n           \"pps-dropped\": \"432432\"\n         },\n      \
    \   {\n           \"mid\": 12333,\n           \"mitigation-start\": \"1507818393\"\
    ,\n           \"target-prefix\": [\n                \"2001:db8:6401::1/128\",\n\
    \                \"2001:db8:6401::2/128\"\n           ],\n           \"target-protocol\"\
    : [\n             6\n           ],\n           \"lifetime\": 1755,\n         \
    \  \"status\": \"attack-stopped\",\n           \"bytes-dropped\": \"0\",\n   \
    \        \"bps-dropped\": \"0\",\n           \"pkts-dropped\": \"0\",\n      \
    \     \"pps-dropped\": \"0\"\n         }\n       ]\n     }\n   }\n           \
    \      Figure 14: Response Body to a GET Request\n   The mitigation status parameters\
    \ are described below:\n   mitigation-start:  Mitigation start time is expressed\
    \ in seconds\n      relative to 1970-01-01T00:00Z in UTC time (Section 2.4.1 of\n\
    \      [RFC7049]).  The CBOR encoding is modified so that the leading tag\n  \
    \    1 (epoch-based date/time) MUST be omitted.\n      This is a mandatory attribute\
    \ when an attack mitigation is active.\n      Particularly, 'mitigation-start'\
    \ is not returned for a mitigation\n      with 'status' code set to 8.\n   lifetime:\
    \  The remaining lifetime of the mitigation request, in\n      seconds.\n    \
    \  This is a mandatory attribute.\n   status:  Status of attack mitigation.  The\
    \ various possible values of\n      'status' parameter are explained in Table\
    \ 3.\n      This is a mandatory attribute.\n   bytes-dropped:  The total dropped\
    \ byte count for the mitigation\n      request since the attack mitigation was\
    \ triggered.  The count\n      wraps around when it reaches the maximum value\
    \ of unsigned\n      integer64.\n      This is an optional attribute.\n   bps-dropped:\
    \  The average number of dropped bytes per second for the\n      mitigation request\
    \ since the attack mitigation was triggered.\n      This average SHOULD be over\
    \ five-minute intervals (that is,\n      measuring bytes into five-minute buckets\
    \ and then averaging these\n      buckets over the time since the mitigation was\
    \ triggered).\n      This is an optional attribute.\n   pkts-dropped:  The total\
    \ number of dropped packet count for the\n      mitigation request since the attack\
    \ mitigation was triggered.  The\n      count wraps around when it reaches the\
    \ maximum value of unsigned\n      integer64.\n      This is an optional attribute.\n\
    \   pps-dropped:  The average number of dropped packets per second for\n     \
    \ the mitigation request since the attack mitigation was triggered.\n      This\
    \ average SHOULD be over five-minute intervals (that is,\n      measuring packets\
    \ into five-minute buckets and then averaging\n      these buckets over the time\
    \ since the mitigation was triggered).\n      This is an optional attribute.\n\
    \    | Parameter | Description                                        |\n    |\
    \     Value |                                                    |\n    |    \
    \     1 | Attack mitigation setup is in progress (e.g.,      |\n    |        \
    \   | changing the network path to redirect the inbound  |\n    |           |\
    \ traffic to a DOTS mitigator).                      |\n    |         2 | Attack\
    \ is being successfully mitigated (e.g.,      |\n    |           | traffic is\
    \ redirected to a DDoS mitigator and      |\n    |           | attack traffic\
    \ is dropped).                        |\n    |         3 | Attack has stopped\
    \ and the DOTS client can         |\n    |           | withdraw the mitigation\
    \ request.  This status code |\n    |           | will be transmitted for immediate\
    \ mitigation       |\n    |           | requests till the mitigation is withdrawn\
    \ or the   |\n    |           | lifetime expires.  For mitigation requests with\
    \    |\n    |           | preconfigured scopes (i.e., 'trigger-mitigation'   |\n\
    \    |           | set to 'false'), this status code will be          |\n    |\
    \           | transmitted four times and then transition to \"8\". |\n    |  \
    \       4 | Attack has exceeded the mitigation provider        |\n    |      \
    \     | capability.                                        |\n    |         5\
    \ | DOTS client has withdrawn the mitigation request   |\n    |           | and\
    \ the mitigation is active but terminating.      |\n    |         6 | Attack mitigation\
    \ is now terminated.               |\n    |         7 | Attack mitigation is withdrawn\
    \ (by the DOTS        |\n    |           | server).  If a mitigation request with\
    \ 'trigger-   |\n    |           | mitigation' set to 'false' is withdrawn because\
    \ it |\n    |           | overlaps with an immediate mitigation request,     |\n\
    \    |           | this status code will be transmitted four times    |\n    |\
    \           | and then transition to \"8\" for the mitigation      |\n    |  \
    \         | request with preconfigured scopes.                 |\n    |      \
    \   8 | Attack mitigation will be triggered for the        |\n    |          \
    \ | mitigation request only when the DOTS signal       |\n    |           | channel\
    \ session is lost.                           |\n                  Table 3: Values\
    \ of 'status' Parameter\n"
- title: 4.4.2.1.  DOTS Servers Sending Mitigation Status
  contents:
  - "4.4.2.1.  DOTS Servers Sending Mitigation Status\n   The Observe Option defined\
    \ in [RFC7641] extends the CoAP core\n   protocol with a mechanism for a CoAP\
    \ client to \"observe\" a resource\n   on a CoAP server: the client retrieves\
    \ a representation of the\n   resource and requests this representation be updated\
    \ by the server as\n   long as the client is interested in the resource.  DOTS\n\
    \   implementations MUST use the Observe Option for both 'mitigate' and\n   'config'\
    \ (Section 4.2).\n   A DOTS client conveys the Observe Option set to '0' in the\
    \ GET\n   request to receive asynchronous notifications of attack mitigation\n\
    \   status from the DOTS server.\n   Unidirectional mitigation notifications within\
    \ the bidirectional\n   signal channel enables asynchronous notifications between\
    \ the agents.\n   [RFC7641] indicates that (1) a notification can be sent in a\n\
    \   Confirmable or a Non-confirmable message, and (2) the message type\n   used\
    \ is typically application dependent and may be determined by the\n   server for\
    \ each notification individually.  For the DOTS server\n   application, the message\
    \ type MUST always be set to Non-confirmable\n   even if the underlying COAP library\
    \ elects a notification to be sent\n   in a Confirmable message.  This overrides\
    \ the behavior defined in\n   Section 4.5 of [RFC7641] to send a Confirmable message\
    \ instead of a\n   Non-confirmable message at least every 24 hours for the following\n\
    \   reasons: First, the DOTS signal channel uses a heartbeat mechanism to\n  \
    \ determine if the DOTS client is alive.  Second, Confirmable messages\n   are\
    \ not suitable during an attack.\n   Due to the higher likelihood of packet loss\
    \ during a DDoS attack, the\n   DOTS server periodically sends attack mitigation\
    \ status to the DOTS\n   client and also notifies the DOTS client whenever the\
    \ status of the\n   attack mitigation changes.  If the DOTS server cannot maintain\
    \ an RTT\n   estimate, it MUST NOT send more than one asynchronous notification\n\
    \   every 3 seconds, and SHOULD use an even less aggressive rate whenever\n  \
    \ possible (case 2 in Section 3.1.3 of [RFC8085]).\n   When conflicting requests\
    \ are detected, the DOTS server enforces the\n   corresponding policy (e.g., accept\
    \ all requests, reject all requests,\n   accept only one request but reject all\
    \ the others, etc.).  It is\n   assumed that this policy is supplied by the DOTS\
    \ server administrator\n   or that it is a default behavior of the DOTS server\
    \ implementation.\n   Then, the DOTS server sends a notification message(s) to\
    \ the DOTS\n   client(s) at the origin of the conflict (refer to the conflict\n\
    \   parameters defined in Section 4.4.1).  A conflict notification\n   message\
    \ includes information about the conflict cause, scope, and the\n   status of\
    \ the mitigation request(s).  For example:\n   *  A notification message with\
    \ 'status' code set to '7 (Attack\n      mitigation is withdrawn)' and 'conflict-status'\
    \ set to '1' is sent\n      to a DOTS client to indicate that an active mitigation\
    \ request is\n      deactivated because a conflict is detected.\n   *  A notification\
    \ message with 'status' code set to '1 (Attack\n      mitigation is in progress)'\
    \ and 'conflict-status' set to '2' is\n      sent to a DOTS client to indicate\
    \ that this mitigation request is\n      in progress, but a conflict is detected.\n\
    \   Upon receipt of a conflict notification message indicating that a\n   mitigation\
    \ request is deactivated because of a conflict, a DOTS\n   client MUST NOT resend\
    \ the same mitigation request before the expiry\n   of 'retry-timer'.  It is also\
    \ recommended that DOTS clients support\n   the means to alert administrators\
    \ about mitigation conflicts.\n   A DOTS client that is no longer interested in\
    \ receiving notifications\n   from the DOTS server can simply \"forget\" the observation.\
    \  When the\n   DOTS server sends the next notification, the DOTS client will\
    \ not\n   recognize the token in the message and, thus, will return a Reset\n\
    \   message.  This causes the DOTS server to remove the associated entry.\n  \
    \ Alternatively, the DOTS client can explicitly de-register itself by\n   issuing\
    \ a GET request that has the Token field set to the token of\n   the observation\
    \ to be canceled and includes an Observe Option with\n   the value set to '1'\
    \ (de-register).  The latter is more deterministic\n   and, thus, is RECOMMENDED.\n\
    \   Figure 15 shows an example of a DOTS client requesting a DOTS server\n   to\
    \ send notifications related to a mitigation request.  Note that for\n   mitigations\
    \ with preconfigured scopes (i.e., 'trigger-mitigation' set\n   to 'false'), the\
    \ state will need to transition from 3 (attack-\n   stopped) to 8 (attack-mitigation-signal-loss).\n\
    \   |DOTS Client|                              |DOTS Server|\n         |  GET\
    \ /<mid>                              |\n         |  Token: 0x4a             \
    \                | Registration\n         |  Observe: 0                      \
    \        |\n         |  2.05 Content                            |\n         |\
    \  Token: 0x4a                             | Notification of\n         |  Observe:\
    \ 12                             | the current state\n         |  status: \"attack-mitigation-in-progress\"\
    \ |\n         |  2.05 Content                            |\n         |  Token:\
    \ 0x4a                             | Notification upon\n         |  Observe: 44\
    \                             | a state change\n         |  status: \"attack-successfully-mitigated\"\
    \ |\n         |  2.05 Content                            |\n         |  Token:\
    \ 0x4a                             | Notification upon\n         |  Observe: 60\
    \                             | a state change\n         |  status: \"attack-stopped\"\
    \                |\n            Figure 15: Notifications of Attack Mitigation\
    \ Status\n"
- title: 4.4.2.2.  DOTS Clients Polling for Mitigation Status
  contents:
  - "4.4.2.2.  DOTS Clients Polling for Mitigation Status\n   The DOTS client can\
    \ send the GET request at frequent intervals\n   without the Observe Option to\
    \ retrieve the configuration data of the\n   mitigation request and non-configuration\
    \ data (i.e., the attack\n   status).  DOTS clients MAY be configured with a policy\
    \ indicating the\n   frequency of polling DOTS servers to get the mitigation status.\
    \  This\n   frequency MUST NOT be more than one UDP datagram per RTT as discussed\n\
    \   in Section 3.1.3 of [RFC8085].\n   If the DOTS server has been able to mitigate\
    \ the attack and the\n   attack has stopped, the DOTS server indicates as such\
    \ in the status.\n   In such case, the DOTS client recalls the mitigation request\
    \ by\n   issuing a DELETE request for this mitigation request (Section 4.4.4).\n\
    \   A DOTS client SHOULD react to the status of the attack per the\n   information\
    \ sent by the DOTS server rather than performing its own\n   detection that the\
    \ attack has been mitigated.  This ensures that the\n   DOTS client does not recall\
    \ a mitigation request prematurely because\n   it is possible that the DOTS client\
    \ does not sense the DDoS attack on\n   its resources, but the DOTS server could\
    \ be actively mitigating the\n   attack because the attack is not completely averted.\n"
- title: 4.4.3.  Efficacy Update from DOTS Clients
  contents:
  - "4.4.3.  Efficacy Update from DOTS Clients\n   While DDoS mitigation is in progress,\
    \ due to the likelihood of packet\n   loss, a DOTS client MAY periodically transmit\
    \ DOTS mitigation\n   efficacy updates to the relevant DOTS server.  A PUT request\
    \ is used\n   to convey the mitigation efficacy update to the DOTS server.  This\n\
    \   PUT request is treated as a refresh of the current mitigation.\n   The PUT\
    \ request used for the efficacy update MUST include all the\n   parameters used\
    \ in the PUT request to carry the DOTS mitigation\n   request (Section 4.4.1)\
    \ unchanged apart from the 'lifetime' parameter\n   value.  If this is not the\
    \ case, the DOTS server MUST reject the\n   request with a 4.00 (Bad Request).\n\
    \   The If-Match Option (Section 5.10.8.1 of [RFC7252]) with an empty\n   value\
    \ is used to make the PUT request conditional on the current\n   existence of\
    \ the mitigation request.  If UDP is used as transport,\n   CoAP requests may\
    \ arrive out of order.  For example, the DOTS client\n   may send a PUT request\
    \ to convey an efficacy update to the DOTS\n   server followed by a DELETE request\
    \ to withdraw the mitigation\n   request, but the DELETE request arrives at the\
    \ DOTS server before the\n   PUT request.  To handle out-of-order delivery of\
    \ requests, if an If-\n   Match Option is present in the PUT request and the 'mid'\
    \ in the\n   request matches a mitigation request from that DOTS client, the\n\
    \   request is processed by the DOTS server.  If no match is found, the\n   PUT\
    \ request is silently ignored by the DOTS server.\n   An example of an efficacy\
    \ update message, which includes an If-Match\n   Option with an empty value, is\
    \ depicted in Figure 16.\n      Header: PUT (Code=0.03)\n      Uri-Path: \".well-known\"\
    \n      Uri-Path: \"dots\"\n      Uri-Path: \"mitigate\"\n      Uri-Path: \"cuid=dz6pHjaADkaFTbjr0JGBpw\"\
    \n      Uri-Path: \"mid=123\"\n      If-Match:\n      Content-Format: \"application/dots+cbor\"\
    \n      {\n       \"ietf-dots-signal-channel:mitigation-scope\": {\n         \"\
    scope\": [\n           {\n             \"target-prefix\": [\n                \"\
    2001:db8:6401::1/128\",\n                \"2001:db8:6401::2/128\"\n          \
    \    ],\n             \"target-port-range\": [\n               {\n           \
    \      \"lower-port\": 80\n               },\n               {\n             \
    \    \"lower-port\": 443\n               },\n               {\n              \
    \    \"lower-port\": 8080\n               }\n             ],\n             \"\
    target-protocol\": [\n                6\n             ],\n             \"attack-status\"\
    : \"under-attack\"\n           }\n         ]\n       }\n      }\n            \
    \      Figure 16: An Example of Efficacy Update\n   The 'attack-status' parameter\
    \ is a mandatory attribute when\n   performing an efficacy update.  The various\
    \ possible values contained\n   in the 'attack-status' parameter are described\
    \ in Table 4.\n            | Parameter | Description                         |\n\
    \            |     Value |                                     |\n           \
    \ |         1 | The DOTS client determines that it  |\n            |         \
    \  | is still under attack.              |\n            |         2 | The DOTS\
    \ client determines that the |\n            |           | attack is successfully\
    \ mitigated    |\n            |           | (e.g., attack traffic is not seen).\
    \ |\n                Table 4: Values of 'attack-status' Parameter\n   The DOTS\
    \ server indicates the result of processing a PUT request\n   using CoAP Response\
    \ Codes.  The Response Code 2.04 (Changed) is\n   returned if the DOTS server\
    \ has accepted the mitigation efficacy\n   update.  The error Response Code 5.03\
    \ (Service Unavailable) is\n   returned if the DOTS server has erred or is incapable\
    \ of performing\n   the mitigation.  As specified in [RFC7252], 5.03 uses Max-Age\
    \ Option\n   to indicate the number of seconds after which to retry.\n"
- title: 4.4.4.  Withdraw a Mitigation
  contents:
  - "4.4.4.  Withdraw a Mitigation\n   DELETE requests are used to withdraw DOTS mitigation\
    \ requests from\n   DOTS servers (Figure 17).\n   'cuid' and 'mid' are mandatory\
    \ Uri-Path parameters for DELETE\n   requests.\n   The same considerations for\
    \ manipulating 'cdid' parameter by DOTS\n   gateways, as specified in Section\
    \ 4.4.1, MUST be followed for DELETE\n   requests.  Uri-Path parameters with empty\
    \ values MUST NOT be present\n   in a request.\n     Header: DELETE (Code=0.04)\n\
    \     Uri-Path: \".well-known\"\n     Uri-Path: \"dots\"\n     Uri-Path: \"mitigate\"\
    \n     Uri-Path: \"cuid=dz6pHjaADkaFTbjr0JGBpw\"\n     Uri-Path: \"mid=123\"\n\
    \                   Figure 17: Withdraw a DOTS Mitigation\n   If the DELETE request\
    \ does not include 'cuid' and 'mid' parameters,\n   the DOTS server MUST reply\
    \ with a 4.00 (Bad Request).\n   Once the request is validated, the DOTS server\
    \ immediately\n   acknowledges a DOTS client's request to withdraw the DOTS signal\n\
    \   using 2.02 (Deleted) Response Code with no response payload.  A 2.02\n   (Deleted)\
    \ Response Code is returned even if the 'mid' parameter value\n   conveyed in\
    \ the DELETE request does not exist in its configuration\n   data before the request.\n\
    \   If the DOTS server finds the 'mid' parameter value conveyed in the\n   DELETE\
    \ request in its configuration data for the DOTS client, then to\n   protect against\
    \ route or DNS flapping caused by a DOTS client rapidly\n   removing a mitigation,\
    \ and to dampen the effect of oscillating\n   attacks, the DOTS server MAY allow\
    \ mitigation to continue for a\n   limited period after acknowledging a DOTS client's\
    \ withdrawal of a\n   mitigation request.  During this period, the DOTS server\
    \ status\n   messages SHOULD indicate that mitigation is active but terminating\n\
    \   (Section 4.4.2).\n   The initial active-but-terminating period SHOULD be sufficiently\
    \ long\n   to absorb latency incurred by route propagation.  The active-but-\n\
    \   terminating period SHOULD be set by default to 120 seconds.  If the\n   client\
    \ requests mitigation again before the initial active-but-\n   terminating period\
    \ elapses, the DOTS server MAY exponentially\n   increase (the base of the exponent\
    \ is 2) the active-but-terminating\n   period up to a maximum of 300 seconds (5\
    \ minutes).\n   Once the active-but-terminating period elapses, the DOTS server\
    \ MUST\n   treat the mitigation as terminated, as the DOTS client is no longer\n\
    \   responsible for the mitigation.\n   If a mitigation is triggered due to a\
    \ signal channel loss, the DOTS\n   server relies upon normal triggers to stop\
    \ that mitigation\n   (typically, receipt of a valid DELETE request, expiry of\
    \ the\n   mitigation lifetime, or scrubbing the traffic to the attack target).\n\
    \   In particular, the DOTS server MUST NOT consider the signal channel\n   recovery\
    \ as a trigger to stop the mitigation.\n"
- title: 4.5.  DOTS Signal Channel Session Configuration
  contents:
  - "4.5.  DOTS Signal Channel Session Configuration\n   A DOTS client can negotiate,\
    \ configure, and retrieve the DOTS signal\n   channel session behavior with its\
    \ DOTS peers.  The DOTS signal\n   channel can be used, for example, to configure\
    \ the following:\n   a.  Heartbeat interval (heartbeat-interval): DOTS agents\
    \ regularly\n       send heartbeats to each other after mutual authentication\
    \ is\n       successfully completed in order to keep the DOTS signal channel\n\
    \       open.  Heartbeat messages are exchanged between DOTS agents every\n  \
    \     'heartbeat-interval' seconds to detect the current status of the\n     \
    \  DOTS signal channel session.\n   b.  Missing heartbeats allowed (missing-hb-allowed):\
    \ This variable\n       indicates the maximum number of consecutive heartbeat\
    \ messages\n       for which a DOTS agent did not receive a response before\n\
    \       concluding that the session is disconnected or defunct.\n   c.  Acceptable\
    \ probing rate (probing-rate): This parameter indicates\n       the average data\
    \ rate that must not be exceeded by a DOTS agent\n       in sending to a peer\
    \ DOTS agent that does not respond.\n   d.  Acceptable signal loss ratio: Maximum\
    \ retransmissions,\n       retransmission timeout value, and other message transmission\n\
    \       parameters for Confirmable messages over the DOTS signal channel.\n  \
    \ When the DOTS signal channel is established over a reliable transport\n   (e.g.,\
    \ TCP), there is no need for the reliability mechanisms provided\n   by CoAP over\
    \ UDP since the underlying TCP connection provides\n   retransmissions and deduplication\
    \ [RFC8323].  As a reminder, CoAP\n   over reliable transports does not support\
    \ Confirmable or Non-\n   confirmable message types.  As such, the transmission-related\n\
    \   parameters ('missing-hb-allowed' and acceptable signal loss ratio)\n   are\
    \ negotiated only for DOTS over unreliable transports.\n   The same or distinct\
    \ configuration sets may be used during times when\n   a mitigation is active\
    \ ('mitigating-config') and when no mitigation\n   is active ('idle-config').\
    \  This is particularly useful for DOTS\n   servers that might want to reduce\
    \ heartbeat frequency or cease\n   heartbeat exchanges when an active DOTS client\
    \ has not requested\n   mitigation.  If distinct configurations are used, DOTS\
    \ agents MUST\n   follow the appropriate configuration set as a function of the\n\
    \   mitigation activity (e.g., if no mitigation request is active (also\n   referred\
    \ to as 'idle' time), values related to 'idle-config' must be\n   followed). \
    \ Additionally, DOTS agents MUST automatically switch to\n   the other configuration\
    \ upon a change in the mitigation activity\n   (e.g., if an attack mitigation\
    \ is launched after an 'idle' time, the\n   DOTS agent switches from values related\
    \ to 'idle-config' to values\n   related to 'mitigating-config').\n   CoAP requests\
    \ and responses are indicated for reliable delivery by\n   marking them as Confirmable\
    \ messages.  DOTS signal channel session\n   configuration requests and responses\
    \ are marked as Confirmable\n   messages.  As explained in Section 2.1 of [RFC7252],\
    \ a Confirmable\n   message is retransmitted using a default timeout and exponential\n\
    \   backoff between retransmissions, until the DOTS server sends an\n   Acknowledgement\
    \ message (ACK) with the same Message ID conveyed from\n   the DOTS client.\n\
    \   Message transmission parameters are defined in Section 4.8 of\n   [RFC7252].\
    \  The DOTS server can either piggyback the response in the\n   Acknowledgement\
    \ message or, if the DOTS server cannot respond\n   immediately to a request carried\
    \ in a Confirmable message, it simply\n   responds with an Empty Acknowledgement\
    \ message so that the DOTS\n   client can stop retransmitting the request.  Empty\
    \ Acknowledgement\n   messages are explained in Section 2.2 of [RFC7252].  When\
    \ the\n   response is ready, the server sends it in a new Confirmable message,\n\
    \   which, in turn, needs to be acknowledged by the DOTS client (see\n   Sections\
    \ 5.2.1 and 5.2.2 of [RFC7252]).  Requests and responses\n   exchanged between\
    \ DOTS agents during 'idle' time, except heartbeat\n   messages, are marked as\
    \ Confirmable messages.\n      |  Implementation Note: A DOTS client that receives\
    \ a response in\n      |  a Confirmable message may want to clean up the message\
    \ state\n      |  right after sending the ACK.  If that ACK is lost and the DOTS\n\
    \      |  server retransmits the Confirmable message, the DOTS client may\n  \
    \    |  no longer have any state that would help it correlate this\n      |  response:\
    \ from the DOTS client's standpoint, the retransmission\n      |  message is unexpected.\
    \  The DOTS client will send a Reset\n      |  message so it does not receive\
    \ any more retransmissions.  This\n      |  behavior is normal and not an indication\
    \ of an error (see\n      |  Section 5.3.2 of [RFC7252] for more details).\n"
- title: 4.5.1.  Discover Configuration Parameters
  contents:
  - "4.5.1.  Discover Configuration Parameters\n   A GET request is used to obtain\
    \ acceptable (e.g., minimum and maximum\n   values) and current configuration\
    \ parameters on the DOTS server for\n   DOTS signal channel session configuration.\
    \  This procedure occurs\n   between a DOTS client and its immediate peer DOTS\
    \ server.  As such,\n   this GET request MUST NOT be relayed by a DOTS gateway.\n\
    \   Figure 18 shows how to obtain configuration parameters that the DOTS\n   server\
    \ will find acceptable.\n     Header: GET (Code=0.01)\n     Uri-Path: \".well-known\"\
    \n     Uri-Path: \"dots\"\n     Uri-Path: \"config\"\n                  Figure\
    \ 18: GET to Retrieve Configuration\n   The DOTS server in the 2.05 (Content)\
    \ response conveys the current,\n   minimum, and maximum attribute values acceptable\
    \ by the DOTS server\n   (Figure 19).\n   {\n     \"ietf-dots-signal-channel:signal-config\"\
    : {\n       \"mitigating-config\": {\n         \"heartbeat-interval\": {\n   \
    \        \"max-value\": number,\n           \"min-value\": number,\n         \
    \  \"current-value\": number\n         },\n         \"missing-hb-allowed\": {\n\
    \           \"max-value\": number,\n           \"min-value\": number,\n      \
    \     \"current-value\": number\n         },\n         \"probing-rate\": {\n \
    \          \"max-value\": number,\n           \"min-value\": number,\n       \
    \    \"current-value\": number\n         },\n         \"max-retransmit\": {\n\
    \           \"max-value\": number,\n           \"min-value\": number,\n      \
    \     \"current-value\": number\n         },\n         \"ack-timeout\": {\n  \
    \         \"max-value-decimal\": \"string\",\n           \"min-value-decimal\"\
    : \"string\",\n           \"current-value-decimal\": \"string\"\n         },\n\
    \         \"ack-random-factor\": {\n           \"max-value-decimal\": \"string\"\
    ,\n           \"min-value-decimal\": \"string\",\n           \"current-value-decimal\"\
    : \"string\"\n         }\n       },\n       \"idle-config\": {\n         \"heartbeat-interval\"\
    : {\n           \"max-value\": number,\n           \"min-value\": number,\n  \
    \         \"current-value\": number\n         },\n         \"missing-hb-allowed\"\
    : {\n           \"max-value\": number,\n           \"min-value\": number,\n  \
    \         \"current-value\": number\n         },\n         \"probing-rate\": {\n\
    \           \"max-value\": number,\n           \"min-value\": number,\n      \
    \     \"current-value\": number\n         },\n         \"max-retransmit\": {\n\
    \           \"max-value\": number,\n           \"min-value\": number,\n      \
    \     \"current-value\": number\n         },\n         \"ack-timeout\": {\n  \
    \         \"max-value-decimal\": \"string\",\n           \"min-value-decimal\"\
    : \"string\",\n           \"current-value-decimal\": \"string\"\n         },\n\
    \         \"ack-random-factor\": {\n           \"max-value-decimal\": \"string\"\
    ,\n           \"min-value-decimal\": \"string\",\n           \"current-value-decimal\"\
    : \"string\"\n         }\n       }\n     }\n   }\n             Figure 19: GET\
    \ Configuration Response Body Schema\n   The parameters in Figure 19 are described\
    \ below:\n   mitigating-config:  Set of configuration parameters to use when a\n\
    \      mitigation is active.  The following parameters may be included:\n    \
    \  heartbeat-interval:  Time interval in seconds between two\n         consecutive\
    \ heartbeat messages.\n         '0' is used to disable the heartbeat mechanism.\n\
    \         This is an optional attribute.\n      missing-hb-allowed:  Maximum number\
    \ of consecutive heartbeat\n         messages for which the DOTS agent did not\
    \ receive a response\n         before concluding that the session is disconnected.\n\
    \         This is an optional attribute.\n      probing-rate:  The average data\
    \ rate that must not be exceeded by\n         a DOTS agent in sending to a peer\
    \ DOTS agent that does not\n         respond (referred to as PROBING_RATE parameter\
    \ in CoAP).\n         This is an optional attribute.\n      max-retransmit:  Maximum\
    \ number of retransmissions for a message\n         (referred to as MAX_RETRANSMIT\
    \ parameter in CoAP).\n         This is an optional attribute.\n      ack-timeout:\
    \  Timeout value in seconds used to calculate the\n         initial retransmission\
    \ timeout value (referred to as\n         ACK_TIMEOUT parameter in CoAP).\n  \
    \       This is an optional attribute.\n      ack-random-factor:  Random factor\
    \ used to influence the timing of\n         retransmissions (referred to as ACK_RANDOM_FACTOR\
    \ parameter in\n         CoAP).\n         This is an optional attribute.\n   idle-config:\
    \  Set of configuration parameters to use when no\n      mitigation is active.\
    \  This attribute has the same structure as\n      'mitigating-config'.\n   Figure\
    \ 20 shows an example of acceptable and current configuration\n   parameters on\
    \ a DOTS server for DOTS signal channel session\n   configuration.  The same acceptable\
    \ configuration is used during\n   mitigation and idle times.\n   {\n     \"ietf-dots-signal-channel:signal-config\"\
    : {\n       \"mitigating-config\": {\n         \"heartbeat-interval\": {\n   \
    \        \"max-value\": 240,\n           \"min-value\": 15,\n           \"current-value\"\
    : 30\n         },\n         \"missing-hb-allowed\": {\n           \"max-value\"\
    : 20,\n           \"min-value\": 3,\n           \"current-value\": 15\n      \
    \   },\n         \"probing-rate\": {\n           \"max-value\": 20,\n        \
    \   \"min-value\": 5,\n           \"current-value\": 15\n         },\n       \
    \  \"max-retransmit\": {\n           \"max-value\": 15,\n           \"min-value\"\
    : 2,\n           \"current-value\": 3\n         },\n         \"ack-timeout\":\
    \ {\n           \"max-value-decimal\": \"30.00\",\n           \"min-value-decimal\"\
    : \"1.00\",\n           \"current-value-decimal\": \"2.00\"\n         },\n   \
    \      \"ack-random-factor\": {\n           \"max-value-decimal\": \"4.00\",\n\
    \           \"min-value-decimal\": \"1.10\",\n           \"current-value-decimal\"\
    : \"1.50\"\n         }\n       },\n       \"idle-config\": {\n         \"heartbeat-interval\"\
    : {\n           \"max-value\": 240,\n           \"min-value\": 15,\n         \
    \  \"current-value\": 30\n         },\n         \"missing-hb-allowed\": {\n  \
    \         \"max-value\": 20,\n           \"min-value\": 3,\n           \"current-value\"\
    : 15\n         },\n         \"probing-rate\": {\n           \"max-value\": 20,\n\
    \           \"min-value\": 5,\n           \"current-value\": 15\n         },\n\
    \         \"max-retransmit\": {\n           \"max-value\": 15,\n           \"\
    min-value\": 2,\n           \"current-value\": 3\n         },\n         \"ack-timeout\"\
    : {\n           \"max-value-decimal\": \"30.00\",\n           \"min-value-decimal\"\
    : \"1.00\",\n           \"current-value-decimal\": \"2.00\"\n         },\n   \
    \      \"ack-random-factor\": {\n           \"max-value-decimal\": \"4.00\",\n\
    \           \"min-value-decimal\": \"1.10\",\n           \"current-value-decimal\"\
    : \"1.50\"\n         }\n       }\n     }\n   }\n            Figure 20: Example\
    \ of a Configuration Response Body\n"
- title: 4.5.2.  Convey DOTS Signal Channel Session Configuration
  contents:
  - "4.5.2.  Convey DOTS Signal Channel Session Configuration\n   A PUT request (Figures\
    \ 21 and 22) is used to convey the configuration\n   parameters for the signal\
    \ channel (e.g., heartbeat interval, maximum\n   retransmissions).  Message transmission\
    \ parameters for CoAP are\n   defined in Section 4.8 of [RFC7252].  The RECOMMENDED\
    \ values of\n   transmission parameter values are 'ack-timeout' (2 seconds), 'max-\n\
    \   retransmit' (3), and 'ack-random-factor' (1.5).  In addition to those\n  \
    \ parameters, the RECOMMENDED specific DOTS transmission parameter\n   values\
    \ are 'heartbeat-interval' (30 seconds) and 'missing-hb-allowed'\n   (15).\n \
    \     |  Note: 'heartbeat-interval' should be tweaked to also assist\n      |\
    \  DOTS messages for NAT traversal (SIG-011 of [RFC8612]).\n      |  According\
    \ to [RFC8085], heartbeat messages must not be sent\n      |  more frequently\
    \ than once every 15 seconds and should use\n      |  longer intervals when possible.\
    \  Furthermore, [RFC4787]\n      |  recommends that NATs use a state timeout of\
    \ 2 minutes or\n      |  longer, but experience shows that sending packets every\
    \ 15 to\n      |  30 seconds is necessary to prevent the majority of middleboxes\n\
    \      |  from losing state for UDP flows.  From that standpoint, the\n      |\
    \  RECOMMENDED minimum 'heartbeat-interval' is 15 seconds and the\n      |  RECOMMENDED\
    \ maximum 'heartbeat-interval' is 240 seconds.  The\n      |  recommended value\
    \ of 30 seconds is selected to anticipate the\n      |  expiry of NAT state.\n\
    \      |  \n      |  A 'heartbeat-interval' of 30 seconds may be considered to\
    \ be\n      |  too chatty in some deployments.  For such deployments, DOTS\n \
    \     |  agents may negotiate longer 'heartbeat-interval' values to\n      | \
    \ prevent any network overload with too frequent heartbeats.\n      |  \n    \
    \  |  Different heartbeat intervals can be defined for 'mitigating-\n      | \
    \ config' and 'idle-config' to reduce being too chatty during\n      |  idle times.\
    \  If there is an on-path translator between the DOTS\n      |  client (standalone\
    \ or part of a DOTS gateway) and the DOTS\n      |  server, the 'mitigating-config'\
    \ 'heartbeat-interval' has to be\n      |  smaller than the translator session\
    \ timeout.  It is recommended\n      |  that the 'idle-config' 'heartbeat-interval'\
    \ also be smaller\n      |  than the translator session timeout to prevent translator\n\
    \      |  traversal issues or that it be disabled entirely.  Means to\n      |\
    \  discover the lifetime assigned by a translator are out of\n      |  scope.\n\
    \      |  \n      |  Given that the size of the heartbeat request cannot exceed\n\
    \      |  ('heartbeat-interval' * 'probing-rate') bytes, 'probing-rate'\n    \
    \  |  should be set appropriately to avoid slowing down heartbeat\n      |  exchanges.\
    \  For example, 'probing-rate' may be set to 2 *\n      |  (\"size of encrypted\
    \ DOTS heartbeat request\"/'heartbeat-\n      |  interval') or ((\"size of encrypted\
    \ DOTS heartbeat request\" +\n      |  \"average size of an encrypted mitigation\
    \ request\")/'heartbeat-\n      |  interval').  Absent any explicit configuration\
    \ or inability to\n      |  dynamically adjust 'probing-rate' values (Section\
    \ 4.8.1 of\n      |  [RFC7252]), DOTS agents use 5 bytes/second as a default\n\
    \      |  'probing-rate' value.\n   If the DOTS agent wishes to change the default\
    \ values of message\n   transmission parameters, it SHOULD follow the guidance\
    \ given in\n   Section 4.8.1 of [RFC7252].  The DOTS agents MUST use the negotiated\n\
    \   values for message transmission parameters and default values for\n   non-negotiated\
    \ message transmission parameters.\n   The signal channel session configuration\
    \ is applicable to a single\n   DOTS signal channel session between DOTS agents,\
    \ so the 'cuid' Uri-\n   Path MUST NOT be used.\n     Header: PUT (Code=0.03)\n\
    \     Uri-Path: \".well-known\"\n     Uri-Path: \"dots\"\n     Uri-Path: \"config\"\
    \n     Uri-Path: \"sid=123\"\n     Content-Format: \"application/dots+cbor\"\n\
    \     {\n      ...\n     }\n          Figure 21: PUT to Convey the DOTS Signal\
    \ Channel Session\n                             Configuration Data\n   The additional\
    \ Uri-Path parameter to those defined in Table 1 is as\n   follows:\n   sid: \
    \ Session Identifier is an identifier for the DOTS signal channel\n        session\
    \ configuration data represented as an integer.  This\n        identifier MUST\
    \ be generated by DOTS clients.  'sid' values MUST\n        increase monotonically\
    \ (when a new PUT is generated by a DOTS\n        client to convey the configuration\
    \ parameters for the signal\n        channel).\n        This is a mandatory attribute.\n\
    \     {\n       \"ietf-dots-signal-channel:signal-config\": {\n         \"mitigating-config\"\
    : {\n           \"heartbeat-interval\": {\n             \"current-value\": number\n\
    \           },\n           \"missing-hb-allowed\": {\n             \"current-value\"\
    : number\n           },\n           \"probing-rate\": {\n             \"current-value\"\
    : number\n           },\n           \"max-retransmit\": {\n             \"current-value\"\
    : number\n           },\n           \"ack-timeout\": {\n             \"current-value-decimal\"\
    : \"string\"\n           },\n           \"ack-random-factor\": {\n           \
    \  \"current-value-decimal\": \"string\"\n           }\n         },\n        \
    \ \"idle-config\": {\n           \"heartbeat-interval\": {\n             \"current-value\"\
    : number\n           },\n           \"missing-hb-allowed\": {\n             \"\
    current-value\": number\n           },\n           \"probing-rate\": {\n     \
    \        \"current-value\": number\n           },\n           \"max-retransmit\"\
    : {\n             \"current-value\": number\n           },\n           \"ack-timeout\"\
    : {\n             \"current-value-decimal\": \"string\"\n           },\n     \
    \      \"ack-random-factor\": {\n             \"current-value-decimal\": \"string\"\
    \n           }\n         }\n       }\n     }\n          Figure 22: PUT to Convey\
    \ the DOTS Signal Channel Session\n                  Configuration Data (Message\
    \ Body Schema)\n   The meaning of the parameters in the CBOR body (Figure 22)\
    \ is defined\n   in Section 4.5.1.\n   At least one of the attributes 'heartbeat-interval',\
    \ 'missing-hb-\n   allowed', 'probing-rate', 'max-retransmit', 'ack-timeout',\
    \ and 'ack-\n   random-factor' MUST be present in the PUT request.  Note that\n\
    \   'heartbeat-interval', 'missing-hb-allowed', 'probing-rate', 'max-\n   retransmit',\
    \ 'ack-timeout', and 'ack-random-factor', if present, do\n   not need to be provided\
    \ for both 'mitigating-config', and 'idle-\n   config' in a PUT request.\n   The\
    \ PUT request with a higher numeric 'sid' value overrides the DOTS\n   signal\
    \ channel session configuration data installed by a PUT request\n   with a lower\
    \ numeric 'sid' value.  To avoid maintaining a long list\n   of 'sid' requests\
    \ from a DOTS client, the lower numeric 'sid' MUST be\n   automatically deleted\
    \ and no longer available at the DOTS server.\n   Figure 23 shows a PUT request\
    \ example to convey the configuration\n   parameters for the DOTS signal channel.\
    \  In this example, the\n   heartbeat mechanism is disabled when no mitigation\
    \ is active, while\n   the heartbeat interval is set to '30' when a mitigation\
    \ is active.\n     Header: PUT (Code=0.03)\n     Uri-Path: \".well-known\"\n \
    \    Uri-Path: \"dots\"\n     Uri-Path: \"config\"\n     Uri-Path: \"sid=123\"\
    \n     Content-Format: \"application/dots+cbor\"\n     {\n       \"ietf-dots-signal-channel:signal-config\"\
    : {\n         \"mitigating-config\": {\n           \"heartbeat-interval\": {\n\
    \             \"current-value\": 30\n           },\n           \"missing-hb-allowed\"\
    : {\n             \"current-value\": 15\n           },\n           \"probing-rate\"\
    : {\n             \"current-value\": 15\n           },\n           \"max-retransmit\"\
    : {\n             \"current-value\": 3\n           },\n           \"ack-timeout\"\
    : {\n             \"current-value-decimal\": \"2.00\"\n           },\n       \
    \    \"ack-random-factor\": {\n             \"current-value-decimal\": \"1.50\"\
    \n           }\n         },\n         \"idle-config\": {\n           \"heartbeat-interval\"\
    : {\n             \"current-value\": 0\n           },\n           \"max-retransmit\"\
    : {\n             \"current-value\": 3\n           },\n           \"ack-timeout\"\
    : {\n             \"current-value-decimal\": \"2.00\"\n           },\n       \
    \    \"ack-random-factor\": {\n             \"current-value-decimal\": \"1.50\"\
    \n           }\n         }\n       }\n     }\n           Figure 23: PUT to Convey\
    \ the Configuration Parameters\n   The DOTS server indicates the result of processing\
    \ the PUT request\n   using CoAP Response Codes:\n   *  If the request is missing\
    \ a mandatory attribute, does not include\n      a 'sid' Uri-Path, or contains\
    \ one or more invalid or unknown\n      parameters, 4.00 (Bad Request) MUST be\
    \ returned in the response.\n   *  If the DOTS server does not find the 'sid'\
    \ parameter value\n      conveyed in the PUT request in its configuration data\
    \ and if the\n      DOTS server has accepted the configuration parameters, then\
    \ a\n      Response Code 2.01 (Created) MUST be returned in the response.\n  \
    \ *  If the DOTS server finds the 'sid' parameter value conveyed in the\n    \
    \  PUT request in its configuration data and if the DOTS server has\n      accepted\
    \ the updated configuration parameters, 2.04 (Changed) MUST\n      be returned\
    \ in the response.\n   *  If any of the 'heartbeat-interval', 'missing-hb-allowed',\n\
    \      'probing-rate', 'max-retransmit', 'target-protocol', 'ack-\n      timeout',\
    \ and 'ack-random-factor' attribute values are not\n      acceptable to the DOTS\
    \ server, 4.22 (Unprocessable Entity) MUST be\n      returned in the response.\
    \  Upon receipt of this error code, the\n      DOTS client SHOULD retrieve the\
    \ maximum and minimum attribute\n      values acceptable to the DOTS server (Section\
    \ 4.5.1).\n      The DOTS client may retry and send the PUT request with updated\n\
    \      attribute values acceptable to the DOTS server.\n   A DOTS client may issue\
    \ a GET message with a 'sid' Uri-Path parameter\n   to retrieve the negotiated\
    \ configuration.  The response does not need\n   to include 'sid' in its message\
    \ body.\n"
- title: 4.5.3.  Configuration Freshness and Notifications
  contents:
  - "4.5.3.  Configuration Freshness and Notifications\n   Max-Age Option (Section\
    \ 5.10.5 of [RFC7252]) SHOULD be returned by a\n   DOTS server to associate a\
    \ validity time with a configuration it\n   sends.  This feature allows the update\
    \ of the configuration data if a\n   change occurs at the DOTS server side.  For\
    \ example, the new\n   configuration may instruct a DOTS client to cease heartbeats\
    \ or\n   reduce heartbeat frequency.\n   It is NOT RECOMMENDED to return a Max-Age\
    \ Option set to 0.\n   Returning a Max-Age Option set to 2^(32)-1 is equivalent\
    \ to\n   associating an infinite lifetime with the configuration.\n   If a non-zero\
    \ value of Max-Age Option is received by a DOTS client,\n   it MUST issue a GET\
    \ request with a 'sid' Uri-Path parameter to\n   retrieve the current and acceptable\
    \ configuration before the expiry\n   of the value enclosed in the Max-Age Option.\
    \  This request is\n   considered by the client and the server to be a means to\
    \ refresh the\n   configuration parameters for the signal channel.  When a DDoS\
    \ attack\n   is active, refresh requests MUST NOT be sent by DOTS clients, and\
    \ the\n   DOTS server MUST NOT terminate the (D)TLS session after the expiry of\n\
    \   the value returned in Max-Age Option.\n   If Max-Age Option is not returned\
    \ in a response, the DOTS client\n   initiates GET requests to refresh the configuration\
    \ parameters each\n   60 seconds (Section 5.10.5 of [RFC7252]).  To prevent such\
    \ overload,\n   it is RECOMMENDED that DOTS servers return a Max-Age Option in\
    \ GET\n   responses.  Considerations related to which value to use and how such\n\
    \   a value is set are implementation and deployment specific.\n   If an Observe\
    \ Option set to 0 is included in the configuration\n   request, the DOTS server\
    \ sends notifications of any configuration\n   change (Section 4.2 of [RFC7641]).\n\
    \   If a DOTS server detects that a misbehaving DOTS client does not\n   contact\
    \ the DOTS server after the expiry of Max-Age to retrieve the\n   signal channel\
    \ configuration data, it MAY terminate the (D)TLS\n   session.  A (D)TLS session\
    \ is terminated by the receipt of an\n   authenticated message that closes the\
    \ connection (e.g., a fatal alert\n   (Section 6 of [RFC8446])).\n"
- title: 4.5.4.  Delete DOTS Signal Channel Session Configuration
  contents:
  - "4.5.4.  Delete DOTS Signal Channel Session Configuration\n   A DELETE request\
    \ is used to delete the installed DOTS signal channel\n   session configuration\
    \ data (Figure 24).\n     Header: DELETE (Code=0.04)\n     Uri-Path: \".well-known\"\
    \n     Uri-Path: \"dots\"\n     Uri-Path: \"config\"\n     Uri-Path: \"sid=123\"\
    \n                      Figure 24: Delete Configuration\n   The DOTS server resets\
    \ the DOTS signal channel session configuration\n   back to the default values\
    \ and acknowledges a DOTS client's request\n   to remove the DOTS signal channel\
    \ session configuration using 2.02\n   (Deleted) Response Code.\n   Upon bootstrapping\
    \ or reboot, a DOTS client MAY send a DELETE request\n   to set the configuration\
    \ parameters to default values.  Such a\n   request does not include any 'sid'.\n"
- title: 4.6.  Redirected Signaling
  contents:
  - "4.6.  Redirected Signaling\n   Redirected DOTS signaling is discussed in detail\
    \ in Section 3.2.2 of\n   [DOTS-ARCH].\n   If a DOTS server wants to redirect\
    \ a DOTS client to an alternative\n   DOTS server for a signal session, then the\
    \ Response Code 5.03\n   (Service Unavailable) will be returned in the response\
    \ to the DOTS\n   client.\n   The DOTS server can return the error Response Code\
    \ 5.03 in response\n   to a request from the DOTS client or convey the error Response\
    \ Code\n   5.03 in a unidirectional notification response from the DOTS server.\n\
    \   The DOTS server in the error response conveys the alternate DOTS\n   server's\
    \ FQDN, and the alternate DOTS server's IP address(es) values\n   in the CBOR\
    \ body (Figure 25).\n   {\n     \"ietf-dots-signal-channel:redirected-signal\"\
    : {\n       \"alt-server\": \"string\",\n       \"alt-server-record\": [\n   \
    \       \"string\"\n       ]\n     }\n   }\n          Figure 25: Redirected Server\
    \ Error Response Body Schema\n   The parameters are described below:\n   alt-server:\
    \  FQDN of an alternate DOTS server.\n      This is a mandatory attribute.\n \
    \  alt-server-record:  A list of IP addresses of an alternate DOTS\n      server.\n\
    \      This is an optional attribute.\n   The DOTS server returns the Time to\
    \ Live (TTL) of the alternate DOTS\n   server in a Max-Age Option.  That is, the\
    \ time interval that the\n   alternate DOTS server may be cached for use by a\
    \ DOTS client.  A Max-\n   Age Option set to 2^(32)-1 is equivalent to receiving\
    \ an infinite\n   TTL.  This value means that the alternate DOTS server is to\
    \ be used\n   until the alternate DOTS server redirects the traffic with another\n\
    \   5.03 response that conveys an alternate server's FQDN.\n   A Max-Age Option\
    \ set to '0' may be returned for redirecting\n   mitigation requests.  Such a\
    \ value means that the redirection applies\n   only for the mitigation request\
    \ in progress.  Returning short TTL in\n   a Max-Age Option may adversely impact\
    \ DOTS clients on slow links.\n   Returning short values should be avoided under\
    \ such conditions.\n   If the alternate DOTS server TTL has expired, the DOTS\
    \ client MUST\n   use the DOTS server(s) that was provisioned using means discussed\
    \ in\n   Section 4.1.  This fallback mechanism is triggered immediately upon\n\
    \   expiry of the TTL, except when a DDoS attack is active.\n   Requests issued\
    \ by misbehaving DOTS clients that do not honor the TTL\n   conveyed in the Max-Age\
    \ Option or react to explicit redirect messages\n   can be rejected by DOTS servers.\n\
    \   Figure 26 shows a 5.03 response example to convey the DOTS alternate\n   server\
    \ 'alt-server.example' together with its IP addresses\n   2001:db8:6401::1 and\
    \ 2001:db8:6401::2.\n   {\n     \"ietf-dots-signal-channel:redirected-signal\"\
    : {\n       \"alt-server\": \"alt-server.example\",\n       \"alt-server-record\"\
    : [\n          \"2001:db8:6401::1\",\n          \"2001:db8:6401::2\"\n       ]\n\
    \     }\n   }\n        Figure 26: Example of Redirected Server Error Response\
    \ Body\n   When the DOTS client receives a 5.03 response with an alternate\n \
    \  server included, it considers the current request to have failed, but\n   it\
    \ SHOULD try resending the request to the alternate DOTS server.\n   During a\
    \ DDoS attack, the DNS server may be the target of another\n   DDoS attack, the\
    \ alternate DOTS server's IP addresses conveyed in the\n   5.03 response help\
    \ the DOTS client skip the DNS lookup of the\n   alternate DOTS server, at the\
    \ cost of trusting the first DOTS server\n   to provide accurate information.\
    \  The DOTS client can then try to\n   establish a UDP or a TCP session with the\
    \ alternate DOTS server.  The\n   DOTS client MAY implement a method to construct\
    \ IPv4-embedded IPv6\n   addresses [RFC6052]; this is required to handle the scenario\
    \ where an\n   IPv6-only DOTS client communicates with an IPv4-only alternate\
    \ DOTS\n   server.\n   If the DOTS client has been redirected to a DOTS server\
    \ with which it\n   has already communicated within the last five (5) minutes,\
    \ it MUST\n   ignore the redirection and try to contact other DOTS servers listed\n\
    \   in the local configuration or discovered using dynamic means such as\n   DHCP\
    \ or SRV procedures [DOTS-SERVER-DISC].  It is RECOMMENDED that\n   DOTS clients\
    \ support the means to alert administrators about redirect\n   loops.\n"
- title: 4.7.  Heartbeat Mechanism
  contents:
  - "4.7.  Heartbeat Mechanism\n   To provide an indication of signal health and to\
    \ distinguish an\n   'idle' signal channel from a 'disconnected' or 'defunct'\
    \ session, the\n   DOTS agent sends a heartbeat over the signal channel to maintain\
    \ its\n   half of the channel (also, aligned with the \"consents\" recommendation\n\
    \   in Section 6 of [RFC8085]).  The DOTS agent similarly expects a\n   heartbeat\
    \ from its peer DOTS agent, and it may consider a session\n   terminated in the\
    \ prolonged absence of a peer agent heartbeat.\n   Concretely, while the communication\
    \ between the DOTS agents is\n   otherwise quiescent, the DOTS client will probe\
    \ the DOTS server to\n   ensure it has maintained cryptographic state and vice\
    \ versa.  Such\n   probes can also keep the bindings of firewalls and/or stateful\n\
    \   translators alive.  This probing reduces the frequency of\n   establishing\
    \ a new handshake when a DOTS signal needs to be conveyed\n   to the DOTS server.\n\
    \      |  Implementation Note: Given that CoAP roles can be multiplexed\n    \
    \  |  over the same session as discussed in [RFC7252] and are already\n      |\
    \  supported by CoAP implementations, both the DOTS client and\n      |  server\
    \ can send DOTS heartbeat requests.\n   The DOTS heartbeat mechanism uses Non-confirmable\
    \ PUT requests\n   (Figure 27) with an expected 2.04 (Changed) Response Code\n\
    \   (Figure 28).  This procedure occurs between a DOTS agent and its\n   immediate\
    \ peer DOTS agent.  As such, this PUT request MUST NOT be\n   relayed by a DOTS\
    \ gateway.  The PUT request used for DOTS heartbeat\n   MUST NOT have a 'cuid',\
    \ 'cdid', or 'mid' Uri-Path.\n        Header: PUT (Code=0.03)\n        Uri-Path:\
    \ \".well-known\"\n        Uri-Path: \"dots\"\n        Uri-Path: \"hb\"\n    \
    \    Content-Format: \"application/dots+cbor\"\n        {\n          \"ietf-dots-signal-channel:heartbeat\"\
    : {\n             \"peer-hb-status\": true\n           }\n        }\n        \
    \   Figure 27: PUT to Check Peer DOTS Agent Is Responding\n   The mandatory 'peer-hb-status'\
    \ attribute is set to 'true' (or\n   'false') to indicate that a DOTS agent is\
    \ (or is not) receiving\n   heartbeat messages from its peer in the last (2 *\
    \ 'heartbeat-\n   interval') period.  Such information can be used by a peer DOTS\
    \ agent\n   to detect or confirm connectivity issues and react accordingly.  For\n\
    \   example, if a DOTS client receives a 2.04 response for its heartbeat\n   messages\
    \ but no server-initiated heartbeat messages, the DOTS client\n   sets 'peer-hb-status'\
    \ to 'false'.  The DOTS server then will need to\n   try another strategy for\
    \ sending the heartbeats (e.g., adjust the\n   heartbeat interval or send a server-initiated\
    \ heartbeat immediately\n   after receiving a client-initiated heartbeat message).\n\
    \        Header: (Code=2.04)\n              Figure 28: Response to a DOTS Heartbeat\
    \ Request\n   DOTS servers MAY trigger their heartbeat requests immediately after\n\
    \   receiving heartbeat probes from peer DOTS clients.  As a reminder, it\n  \
    \ is the responsibility of DOTS clients to ensure that on-path\n   translators/firewalls\
    \ are maintaining a binding so that the same\n   external IP address and/or port\
    \ number is retained for the DOTS\n   signal channel session.\n   Under normal\
    \ traffic conditions (i.e., no attack is ongoing), if a\n   DOTS agent does not\
    \ receive any response from the peer DOTS agent for\n   'missing-hb-allowed' number\
    \ of consecutive heartbeat messages, it\n   concludes that the DOTS signal channel\
    \ session is disconnected.  The\n   DOTS client MUST then try to reestablish the\
    \ DOTS signal channel\n   session, preferably by resuming the (D)TLS session.\n\
    \      |  Note: If a new DOTS signal channel session cannot be\n      |  established,\
    \ the DOTS client SHOULD NOT retry to establish the\n      |  DOTS signal channel\
    \ session more frequently than every 300\n      |  seconds (5 minutes) and MUST\
    \ NOT retry more frequently than\n      |  every 60 seconds (1 minute).  It is\
    \ recommended that DOTS\n      |  clients support the means to alert administrators\
    \ about the\n      |  failure to establish a (D)TLS session.\n   In case of a\
    \ massive DDoS attack that saturates the incoming link(s)\n   to the DOTS client,\
    \ all traffic from the DOTS server to the DOTS\n   client will likely be dropped,\
    \ although the DOTS server receives\n   heartbeat requests in addition to DOTS\
    \ messages sent by the DOTS\n   client.  In this scenario, DOTS clients MUST behave\
    \ differently to\n   handle message transmission and DOTS signal channel session\n\
    \   liveliness during link saturation:\n      The DOTS client MUST NOT consider\
    \ the DOTS signal channel session\n      terminated even after a maximum 'missing-hb-allowed'\
    \ threshold is\n      reached.  The DOTS client SHOULD keep on using the current\
    \ DOTS\n      signal channel session to send heartbeat requests over it, so that\n\
    \      the DOTS server knows the DOTS client has not disconnected the\n      DOTS\
    \ signal channel session.\n      After the maximum 'missing-hb-allowed' threshold\
    \ is reached, the\n      DOTS client SHOULD try to establish a new DOTS signal\
    \ channel\n      session.  The DOTS client SHOULD send mitigation requests over\
    \ the\n      current DOTS signal channel session and, in parallel, send the\n\
    \      mitigation requests over the new DOTS signal channel session.\n      This\
    \ may be handled, for example, by resumption of the (D)TLS\n      session or using\
    \ 0-RTT mode in DTLS 1.3 to piggyback the\n      mitigation request in the ClientHello\
    \ message.\n      As soon as the link is no longer saturated, if traffic from\
    \ the\n      DOTS server reaches the DOTS client over the current DOTS signal\n\
    \      channel session, the DOTS client can stop the new DOTS signal\n      channel\
    \ session attempt or if a new DOTS signal channel session is\n      successful\
    \ then disconnect the current DOTS signal channel\n      session.\n   If the DOTS\
    \ server receives traffic from the peer DOTS client (e.g.,\n   peer DOTS client-initiated\
    \ heartbeats) but the maximum 'missing-hb-\n   allowed' threshold is reached,\
    \ the DOTS server MUST NOT consider the\n   DOTS signal channel session disconnected.\
    \  The DOTS server MUST keep\n   on using the current DOTS signal channel session\
    \ so that the DOTS\n   client can send mitigation requests over the current DOTS\
    \ signal\n   channel session.  In this case, the DOTS server can identify that\
    \ the\n   DOTS client is under attack and that the inbound link to the DOTS\n\
    \   client (domain) is saturated.  Furthermore, if the DOTS server does\n   not\
    \ receive a mitigation request from the DOTS client, it implies\n   that the DOTS\
    \ client has not detected the attack or, if an attack\n   mitigation is in progress,\
    \ it implies that the applied DDoS\n   mitigation actions are not yet effectively\
    \ handling the DDoS attack\n   volume.\n   If the DOTS server does not receive\
    \ any traffic from the peer DOTS\n   client during the time span required to exhaust\
    \ the maximum 'missing-\n   hb-allowed' threshold, the DOTS server concludes the\
    \ session is\n   disconnected.  The DOTS server can then trigger preconfigured\n\
    \   mitigation requests for this DOTS client (if any).\n   In DOTS over TCP, the\
    \ sender of a DOTS heartbeat message has to allow\n   up to 'heartbeat-interval'\
    \ seconds when waiting for a heartbeat\n   reply.  When a failure is detected\
    \ by a DOTS client, it proceeds with\n   the session recovery, following the same\
    \ approach as the one used for\n   unreliable transports.\n"
- title: 5.  DOTS Signal Channel YANG Modules
  contents:
  - "5.  DOTS Signal Channel YANG Modules\n   This document defines a YANG module\
    \ [RFC7950] for DOTS mitigation\n   scope, DOTS signal channel session configuration\
    \ data, DOTS\n   redirection signaling, and DOTS heartbeats.\n   This YANG module\
    \ (ietf-dots-signal-channel) defines the DOTS client\n   interaction with the\
    \ DOTS server as seen by the DOTS client.  A DOTS\n   server is allowed to update\
    \ the non-configurable 'ro' entities in the\n   responses.  This YANG module is\
    \ not intended to be used via NETCONF/\n   RESTCONF for DOTS server management\
    \ purposes; such a module is out of\n   the scope of this document.  It serves\
    \ only to provide a data model\n   and encoding, but not a management data model.\n\
    \   A companion YANG module is defined to include a collection of types\n   defined\
    \ by IANA: \"iana-dots-signal-channel\" (Section 5.2).\n"
- title: 5.1.  Tree Structure
  contents:
  - "5.1.  Tree Structure\n   This document defines the YANG module \"ietf-dots-signal-channel\"\
    \n   (Section 5.3), which has the following tree structure.  A DOTS signal\n \
    \  message can be a mitigation, a configuration, a redirect, or a\n   heartbeat\
    \ message.\n   module: ietf-dots-signal-channel\n     +--rw dots-signal\n    \
    \    +--rw (message-type)?\n           +--:(mitigation-scope)\n           |  +--rw\
    \ scope* [cuid mid]\n           |     +--rw cdid?                   string\n \
    \          |     +--rw cuid                    string\n           |     +--rw\
    \ mid                     uint32\n           |     +--rw target-prefix*      \
    \    inet:ip-prefix\n           |     +--rw target-port-range*      [lower-port]\n\
    \           |     |  +--rw lower-port    inet:port-number\n           |     |\
    \  +--rw upper-port?   inet:port-number\n           |     +--rw target-protocol*\
    \        uint8\n           |     +--rw target-fqdn*            inet:domain-name\n\
    \           |     +--rw target-uri*             inet:uri\n           |     +--rw\
    \ alias-name*             string\n           |     +--rw lifetime?           \
    \    int32\n           |     +--rw trigger-mitigation?     boolean\n         \
    \  |     +--ro mitigation-start?       uint64\n           |     +--ro status?\
    \                 iana-signal:status\n           |     +--ro conflict-information\n\
    \           |     |  +--ro conflict-status?   iana-signal:conflict-status\n  \
    \         |     |  +--ro conflict-cause?    iana-signal:conflict-cause\n     \
    \      |     |  +--ro retry-timer?       uint32\n           |     |  +--ro conflict-scope\n\
    \           |     |     +--ro target-prefix*       inet:ip-prefix\n          \
    \ |     |     +--ro target-port-range*   [lower-port]\n           |     |    \
    \ |  +--ro lower-port      inet:port-number\n           |     |     |  +--ro upper-port?\
    \     inet:port-number\n           |     |     +--ro target-protocol*     uint8\n\
    \           |     |     +--ro target-fqdn*         inet:domain-name\n        \
    \   |     |     +--ro target-uri*          inet:uri\n           |     |     +--ro\
    \ alias-name*          string\n           |     |     +--ro acl-list* [acl-name]\n\
    \           |     |     |  +--ro acl-name\n           |     |     |  +--ro acl-type?\n\
    \           |     |     +--ro mid?                 -> ../../../mid\n         \
    \  |     +--ro bytes-dropped?          yang:zero-based-counter64\n           |\
    \     +--ro bps-dropped?            yang:gauge64\n           |     +--ro pkts-dropped?\
    \           yang:zero-based-counter64\n           |     +--ro pps-dropped?   \
    \         yang:gauge64\n           |     +--rw attack-status?          iana-signal:attack-status\n\
    \           +--:(signal-config)\n           |  +--rw sid                   uint32\n\
    \           |  +--rw mitigating-config\n           |  |  +--rw heartbeat-interval\n\
    \           |  |  |  +--ro max-value?       uint16\n           |  |  |  +--ro\
    \ min-value?       uint16\n           |  |  |  +--rw current-value?   uint16\n\
    \           |  |  +--rw missing-hb-allowed\n           |  |  |  +--ro max-value?\
    \       uint16\n           |  |  |  +--ro min-value?       uint16\n          \
    \ |  |  |  +--rw current-value?   uint16\n           |  |  +--rw probing-rate\n\
    \           |  |  |  +--ro max-value?       uint16\n           |  |  |  +--ro\
    \ min-value?       uint16\n           |  |  |  +--rw current-value?   uint16\n\
    \           |  |  +--rw max-retransmit\n           |  |  |  +--ro max-value? \
    \      uint16\n           |  |  |  +--ro min-value?       uint16\n           |\
    \  |  |  +--rw current-value?   uint16\n           |  |  +--rw ack-timeout\n \
    \          |  |  |  +--ro max-value-decimal?       decimal64\n           |  |\
    \  |  +--ro min-value-decimal?       decimal64\n           |  |  |  +--rw current-value-decimal?\
    \   decimal64\n           |  |  +--rw ack-random-factor\n           |  |     +--ro\
    \ max-value-decimal?       decimal64\n           |  |     +--ro min-value-decimal?\
    \       decimal64\n           |  |     +--rw current-value-decimal?   decimal64\n\
    \           |  +--rw idle-config\n           |     +--rw heartbeat-interval\n\
    \           |     |  +--ro max-value?       uint16\n           |     |  +--ro\
    \ min-value?       uint16\n           |     |  +--rw current-value?   uint16\n\
    \           |     +--rw missing-hb-allowed\n           |     |  +--ro max-value?\
    \       uint16\n           |     |  +--ro min-value?       uint16\n          \
    \ |     |  +--rw current-value?   uint16\n           |     +--rw probing-rate\n\
    \           |     |  +--ro max-value?       uint16\n           |     |  +--ro\
    \ min-value?       uint16\n           |     |  +--rw current-value?   uint16\n\
    \           |     +--rw max-retransmit\n           |     |  +--ro max-value? \
    \      uint16\n           |     |  +--ro min-value?       uint16\n           |\
    \     |  +--rw current-value?   uint16\n           |     +--rw ack-timeout\n \
    \          |     |  +--ro max-value-decimal?       decimal64\n           |   \
    \  |  +--ro min-value-decimal?       decimal64\n           |     |  +--rw current-value-decimal?\
    \   decimal64\n           |     +--rw ack-random-factor\n           |        +--ro\
    \ max-value-decimal?       decimal64\n           |        +--ro min-value-decimal?\
    \       decimal64\n           |        +--rw current-value-decimal?   decimal64\n\
    \           +--:(redirected-signal)\n           |  +--ro alt-server          \
    \  string\n           |  +--ro alt-server-record*    inet:ip-address\n       \
    \    +--:(heartbeat)\n              +--rw peer-hb-status              boolean\n"
- title: 5.2.  IANA DOTS Signal Channel YANG Module
  contents:
  - "5.2.  IANA DOTS Signal Channel YANG Module\n   <CODE BEGINS> file \"iana-dots-signal-channel@2020-05-28.yang\"\
    \n   module iana-dots-signal-channel {\n     yang-version 1.1;\n     namespace\
    \ \"urn:ietf:params:xml:ns:yang:iana-dots-signal-channel\";\n     prefix iana-signal;\n\
    \     organization\n       \"IANA\";\n     contact\n       \"Internet Assigned\
    \ Numbers Authority\n        Postal: ICANN\n             12025 Waterfront Drive,\
    \ Suite 300\n             Los Angeles, CA  90094-2536\n             United States\
    \ of America\n        Tel:    +1 310 301 5800\n        <mailto:iana@iana.org>\"\
    ;\n     description\n       \"This module contains a collection of YANG data types\
    \ defined\n        by IANA and used for DOTS signal channel protocol.\n      \
    \  Copyright (c) 2020 IETF Trust and the persons identified as\n        authors\
    \ of the code.  All rights reserved.\n        Redistribution and use in source\
    \ and binary forms, with or\n        without modification, is permitted pursuant\
    \ to, and subject\n        to the license terms contained in, the Simplified BSD\
    \ License\n        set forth in Section 4.c of the IETF Trust's Legal Provisions\n\
    \        Relating to IETF Documents\n        (http://trustee.ietf.org/license-info).\n\
    \        This version of this YANG module is part of RFC 8782; see\n        the\
    \ RFC itself for full legal notices.\";\n     revision 2020-05-28 {\n       description\n\
    \         \"Initial revision.\";\n       reference\n         \"RFC 8782: Distributed\
    \ Denial-of-Service Open Threat\n                    Signaling (DOTS) Signal Channel\
    \ Specification\";\n     }\n     typedef status {\n       type enumeration {\n\
    \         enum attack-mitigation-in-progress {\n           value 1;\n        \
    \   description\n             \"Attack mitigation setup is in progress (e.g.,\
    \ changing\n              the network path to reroute the inbound traffic\n  \
    \            to DOTS mitigator).\";\n         }\n         enum attack-successfully-mitigated\
    \ {\n           value 2;\n           description\n             \"Attack is being\
    \ successfully mitigated (e.g., traffic\n              is redirected to a DDoS\
    \ mitigator and attack\n              traffic is dropped or blackholed).\";\n\
    \         }\n         enum attack-stopped {\n           value 3;\n           description\n\
    \             \"Attack has stopped and the DOTS client can\n              withdraw\
    \ the mitigation request.\";\n         }\n         enum attack-exceeded-capability\
    \ {\n           value 4;\n           description\n             \"Attack has exceeded\
    \ the mitigation provider\n              capability.\";\n         }\n        \
    \ enum dots-client-withdrawn-mitigation {\n           value 5;\n           description\n\
    \             \"DOTS client has withdrawn the mitigation\n              request\
    \ and the mitigation is active but\n              terminating.\";\n         }\n\
    \         enum attack-mitigation-terminated {\n           value 6;\n         \
    \  description\n             \"Attack mitigation is now terminated.\";\n     \
    \    }\n         enum attack-mitigation-withdrawn {\n           value 7;\n   \
    \        description\n             \"Attack mitigation is withdrawn.\";\n    \
    \     }\n         enum attack-mitigation-signal-loss {\n           value 8;\n\
    \           description\n             \"Attack mitigation will be triggered\n\
    \              for the mitigation request only when\n              the DOTS signal\
    \ channel session is lost.\";\n         }\n       }\n       description\n    \
    \     \"Enumeration for status reported by the DOTS server.\";\n     }\n     typedef\
    \ conflict-status {\n       type enumeration {\n         enum request-inactive-other-active\
    \ {\n           value 1;\n           description\n             \"DOTS Server has\
    \ detected conflicting mitigation\n              requests from different DOTS\
    \ clients.\n              This mitigation request is currently inactive\n    \
    \          until the conflicts are resolved. Another\n              mitigation\
    \ request is active.\";\n         }\n         enum request-active {\n        \
    \   value 2;\n           description\n             \"DOTS Server has detected\
    \ conflicting mitigation\n              requests from different DOTS clients.\n\
    \              This mitigation request is currently active.\";\n         }\n \
    \        enum all-requests-inactive {\n           value 3;\n           description\n\
    \             \"DOTS Server has detected conflicting mitigation\n            \
    \  requests from different DOTS clients.  All\n              conflicting mitigation\
    \ requests are inactive.\";\n         }\n       }\n       description\n      \
    \   \"Enumeration for conflict status.\";\n     }\n     typedef conflict-cause\
    \ {\n       type enumeration {\n         enum overlapping-targets {\n        \
    \   value 1;\n           description\n             \"Overlapping targets. conflict-scope\
    \ provides\n              more details about the exact conflict.\";\n        \
    \ }\n         enum conflict-with-acceptlist {\n           value 2;\n         \
    \  description\n             \"Conflicts with an existing accept-list.\n     \
    \         This code is returned when the DDoS mitigation\n              detects\
    \ that some of the source addresses/prefixes\n              listed in the accept-list\
    \ ACLs are actually\n              attacking the target.\";\n         }\n    \
    \     enum cuid-collision {\n           value 3;\n           description\n   \
    \          \"Conflicts with the cuid used by another\n              DOTS client.\"\
    ;\n         }\n       }\n       description\n         \"Enumeration for conflict\
    \ causes.\";\n     }\n     typedef attack-status {\n       type enumeration {\n\
    \         enum under-attack {\n           value 1;\n           description\n \
    \            \"The DOTS client determines that it is still under\n           \
    \   attack.\";\n         }\n         enum attack-successfully-mitigated {\n  \
    \         value 2;\n           description\n             \"The DOTS client determines\
    \ that the attack is\n              successfully mitigated.\";\n         }\n \
    \      }\n       description\n         \"Enumeration for attack status codes.\"\
    ;\n     }\n   }\n   <CODE ENDS>\n"
- title: 5.3.  IETF DOTS Signal Channel YANG Module
  contents:
  - "5.3.  IETF DOTS Signal Channel YANG Module\n   This module uses the common YANG\
    \ types defined in [RFC6991] and types\n   defined in [RFC8783].\n   <CODE BEGINS>\
    \ file \"ietf-dots-signal-channel@2020-05-28.yang\"\n   module ietf-dots-signal-channel\
    \ {\n     yang-version 1.1;\n     namespace \"urn:ietf:params:xml:ns:yang:ietf-dots-signal-channel\"\
    ;\n     prefix signal;\n     import ietf-inet-types {\n       prefix inet;\n \
    \      reference\n         \"Section 4 of RFC 6991\";\n     }\n     import ietf-yang-types\
    \ {\n       prefix yang;\n       reference\n         \"Section 3 of RFC 6991\"\
    ;\n     }\n     import ietf-dots-data-channel {\n       prefix ietf-data;\n  \
    \     reference\n         \"RFC 8783: Distributed Denial-of-Service Open Threat\
    \ Signaling\n                    (DOTS) Data Channel Specification\";\n     }\n\
    \     import iana-dots-signal-channel {\n       prefix iana-signal;\n     }\n\
    \     organization\n       \"IETF DDoS Open Threat Signaling (DOTS) Working Group\"\
    ;\n     contact\n       \"WG Web:   <https://datatracker.ietf.org/wg/dots/>\n\
    \        WG List:  <mailto:dots@ietf.org>\n        Editor:  Konda, Tirumaleswar\
    \ Reddy.K\n                 <mailto:TirumaleswarReddy_Konda@McAfee.com>\n    \
    \    Editor:  Mohamed Boucadair\n                 <mailto:mohamed.boucadair@orange.com>\n\
    \        Author:  Prashanth Patil\n                 <mailto:praspati@cisco.com>\n\
    \        Author:  Andrew Mortensen\n                 <mailto:amortensen@arbor.net>\n\
    \        Author:  Nik Teague\n                 <mailto:nteague@ironmountain.co.uk>\"\
    ;\n     description\n       \"This module contains YANG definition for the signaling\n\
    \        messages exchanged between a DOTS client and a DOTS server.\n       \
    \ Copyright (c) 2020 IETF Trust and the persons identified as\n        authors\
    \ of the code.  All rights reserved.\n        Redistribution and use in source\
    \ and binary forms, with or\n        without modification, is permitted pursuant\
    \ to, and subject\n        to the license terms contained in, the Simplified BSD\
    \ License\n        set forth in Section 4.c of the IETF Trust's Legal Provisions\n\
    \        Relating to IETF Documents\n        (http://trustee.ietf.org/license-info).\n\
    \        This version of this YANG module is part of RFC 8782; see\n        the\
    \ RFC itself for full legal notices.\";\n     revision 2020-05-28 {\n       description\n\
    \         \"Initial revision.\";\n       reference\n         \"RFC 8782: Distributed\
    \ Denial-of-Service Open Threat\n                    Signaling (DOTS) Signal Channel\
    \ Specification\";\n     }\n     /*\n      * Groupings\n      */\n     grouping\
    \ mitigation-scope {\n       description\n         \"Specifies the scope of the\
    \ mitigation request.\";\n       list scope {\n         key \"cuid mid\";\n  \
    \       description\n           \"The scope of the request.\";\n         leaf\
    \ cdid {\n           type string;\n           description\n             \"The\
    \ cdid should be included by a server-domain\n              DOTS gateway to propagate\
    \ the client domain\n              identification information from the\n     \
    \         gateway's client-facing side to the gateway's\n              server-facing\
    \ side, and from the gateway's\n              server-facing side to the DOTS server.\n\
    \              It may be used by the final DOTS server\n              for policy\
    \ enforcement purposes.\";\n         }\n         leaf cuid {\n           type\
    \ string;\n           description\n             \"A unique identifier that is\n\
    \              generated by a DOTS client to prevent\n              request collisions.\
    \  It is expected that the\n              cuid will remain consistent throughout\
    \ the\n              lifetime of the DOTS client.\";\n         }\n         leaf\
    \ mid {\n           type uint32;\n           description\n             \"Mitigation\
    \ request identifier.\n              This identifier must be unique for each mitigation\n\
    \              request bound to the DOTS client.\";\n         }\n         uses\
    \ ietf-data:target;\n         leaf-list alias-name {\n           type string;\n\
    \           description\n             \"An alias name that points to a resource.\"\
    ;\n         }\n         leaf lifetime {\n           type int32;\n           units\
    \ \"seconds\";\n           default \"3600\";\n           description\n       \
    \      \"Indicates the lifetime of the mitigation request.\n              A lifetime\
    \ of '0' in a mitigation request is an\n              invalid value.\n       \
    \       A lifetime of negative one (-1) indicates indefinite\n              lifetime\
    \ for the mitigation request.\";\n         }\n         leaf trigger-mitigation\
    \ {\n           type boolean;\n           default \"true\";\n           description\n\
    \             \"If set to 'false', DDoS mitigation will not be\n             \
    \ triggered unless the DOTS signal channel\n              session is lost.\";\n\
    \         }\n         leaf mitigation-start {\n           type uint64;\n     \
    \      config false;\n           description\n             \"Mitigation start\
    \ time is represented in seconds\n              relative to 1970-01-01T00:00:00Z\
    \ in UTC time.\";\n         }\n         leaf status {\n           type iana-signal:status;\n\
    \           config false;\n           description\n             \"Indicates the\
    \ status of a mitigation request.\n              It must be included in responses\
    \ only.\";\n         }\n         container conflict-information {\n          \
    \ config false;\n           description\n             \"Indicates that a conflict\
    \ is detected.\n              Must only be used for responses.\";\n          \
    \ leaf conflict-status {\n             type iana-signal:conflict-status;\n   \
    \          description\n               \"Indicates the conflict status.\";\n \
    \          }\n           leaf conflict-cause {\n             type iana-signal:conflict-cause;\n\
    \             description\n               \"Indicates the cause of the conflict.\"\
    ;\n           }\n           leaf retry-timer {\n             type uint32;\n  \
    \           units \"seconds\";\n             description\n               \"The\
    \ DOTS client must not resend the\n                same request that has a conflict\
    \ before the expiry of\n                this timer.\";\n           }\n       \
    \    container conflict-scope {\n             description\n               \"Provides\
    \ more information about the conflict scope.\";\n             uses ietf-data:target\
    \ {\n               when \"/dots-signal/scope/conflict-information/\"\n      \
    \            + \"conflict-cause = 'overlapping-targets'\";\n             }\n \
    \            leaf-list alias-name {\n               when \"../../conflict-cause\
    \ = 'overlapping-targets'\";\n               type string;\n               description\n\
    \                 \"Conflicting alias-name.\";\n             }\n             list\
    \ acl-list {\n               when \"../../conflict-cause = 'conflict-with-acceptlist'\"\
    ;\n               key \"acl-name\";\n               description\n            \
    \     \"List of conflicting ACLs as defined in the DOTS data\n               \
    \   channel.  These ACLs are uniquely defined by\n                  cuid and acl-name.\"\
    ;\n               leaf acl-name {\n                 type leafref {\n         \
    \          path \"/ietf-data:dots-data/ietf-data:dots-client/\"\n            \
    \          + \"ietf-data:acls/ietf-data:acl/ietf-data:name\";\n              \
    \   }\n                 description\n                   \"Reference to the conflicting\
    \ ACL name bound to\n                    a DOTS client.\";\n               }\n\
    \               leaf acl-type {\n                 type leafref {\n           \
    \        path \"/ietf-data:dots-data/ietf-data:dots-client/\"\n              \
    \        + \"ietf-data:acls/ietf-data:acl/ietf-data:type\";\n                \
    \ }\n                 description\n                   \"Reference to the conflicting\
    \ ACL type bound to\n                    a DOTS client.\";\n               }\n\
    \             }\n             leaf mid {\n               when \"../../conflict-cause\
    \ = 'overlapping-targets'\";\n               type leafref {\n                \
    \ path \"../../../mid\";\n               }\n               description\n     \
    \            \"Reference to the conflicting 'mid' bound to\n                 \
    \ the same DOTS client.\";\n             }\n           }\n         }\n       \
    \  leaf bytes-dropped {\n           type yang:zero-based-counter64;\n        \
    \   units \"bytes\";\n           config false;\n           description\n     \
    \        \"The total dropped byte count for the mitigation\n              request\
    \ since the attack mitigation was triggered.\n              The count wraps around\
    \ when it reaches the maximum value\n              of counter64 for dropped bytes.\"\
    ;\n         }\n         leaf bps-dropped {\n           type yang:gauge64;\n  \
    \         config false;\n           description\n             \"The average number\
    \ of dropped bits per second for\n              the mitigation request since the\
    \ attack\n              mitigation was triggered.  This should be over\n     \
    \         five-minute intervals (that is, measuring bytes\n              into\
    \ five-minute buckets and then averaging these\n              buckets over the\
    \ time since the mitigation was\n              triggered).\";\n         }\n  \
    \       leaf pkts-dropped {\n           type yang:zero-based-counter64;\n    \
    \       config false;\n           description\n             \"The total number\
    \ of dropped packet count for the\n              mitigation request since the\
    \ attack mitigation was\n              triggered.  The count wraps around when\
    \ it reaches\n              the maximum value of counter64 for dropped packets.\"\
    ;\n         }\n         leaf pps-dropped {\n           type yang:gauge64;\n  \
    \         config false;\n           description\n             \"The average number\
    \ of dropped packets per second\n              for the mitigation request since\
    \ the attack\n              mitigation was triggered.  This should be over\n \
    \             five-minute intervals (that is, measuring packets\n            \
    \  into five-minute buckets and then averaging these\n              buckets over\
    \ the time since the mitigation was\n              triggered).\";\n         }\n\
    \         leaf attack-status {\n           type iana-signal:attack-status;\n \
    \          description\n             \"Indicates the status of an attack as seen\
    \ by the\n              DOTS client.\";\n         }\n       }\n     }\n     grouping\
    \ config-parameters {\n       description\n         \"Subset of DOTS signal channel\
    \ session configuration.\";\n       container heartbeat-interval {\n         description\n\
    \           \"DOTS agents regularly send heartbeats to each other\n          \
    \  after mutual authentication is successfully\n            completed in order\
    \ to keep the DOTS signal channel\n            open.\";\n         leaf max-value\
    \ {\n           type uint16;\n           units \"seconds\";\n           config\
    \ false;\n           description\n             \"Maximum acceptable heartbeat-interval\
    \ value.\";\n         }\n         leaf min-value {\n           type uint16;\n\
    \           units \"seconds\";\n           config false;\n           description\n\
    \             \"Minimum acceptable heartbeat-interval value.\";\n         }\n\
    \         leaf current-value {\n           type uint16;\n           units \"seconds\"\
    ;\n           default \"30\";\n           description\n             \"Current\
    \ heartbeat-interval value.\n              '0' means that heartbeat mechanism\
    \ is deactivated.\";\n         }\n       }\n       container missing-hb-allowed\
    \ {\n         description\n           \"Maximum number of missing heartbeats allowed.\"\
    ;\n         leaf max-value {\n           type uint16;\n           config false;\n\
    \           description\n             \"Maximum acceptable missing-hb-allowed\
    \ value.\";\n         }\n         leaf min-value {\n           type uint16;\n\
    \           config false;\n           description\n             \"Minimum acceptable\
    \ missing-hb-allowed value.\";\n         }\n         leaf current-value {\n  \
    \         type uint16;\n           default \"15\";\n           description\n \
    \            \"Current missing-hb-allowed value.\";\n         }\n       }\n  \
    \     container probing-rate {\n         description\n           \"The limit for\
    \ sending Non-confirmable messages with\n            no response.\";\n       \
    \  leaf max-value {\n           type uint16;\n           units \"byte/second\"\
    ;\n           config false;\n           description\n             \"Maximum acceptable\
    \ probing-rate value.\";\n         }\n         leaf min-value {\n           type\
    \ uint16;\n           units \"byte/second\";\n           config false;\n     \
    \      description\n             \"Minimum acceptable probing-rate value.\";\n\
    \         }\n         leaf current-value {\n           type uint16;\n        \
    \   units \"byte/second\";\n           default \"5\";\n           description\n\
    \             \"Current probing-rate value.\";\n         }\n       }\n       container\
    \ max-retransmit {\n         description\n           \"Maximum number of retransmissions\
    \ of a Confirmable\n            message.\";\n         leaf max-value {\n     \
    \      type uint16;\n           config false;\n           description\n      \
    \       \"Maximum acceptable max-retransmit value.\";\n         }\n         leaf\
    \ min-value {\n           type uint16;\n           config false;\n           description\n\
    \             \"Minimum acceptable max-retransmit value.\";\n         }\n    \
    \     leaf current-value {\n           type uint16;\n           default \"3\"\
    ;\n           description\n             \"Current max-retransmit value.\";\n \
    \        }\n       }\n       container ack-timeout {\n         description\n \
    \          \"Initial retransmission timeout value.\";\n         leaf max-value-decimal\
    \ {\n           type decimal64 {\n             fraction-digits 2;\n          \
    \ }\n           units \"seconds\";\n           config false;\n           description\n\
    \             \"Maximum ack-timeout value.\";\n         }\n         leaf min-value-decimal\
    \ {\n           type decimal64 {\n             fraction-digits 2;\n          \
    \ }\n           units \"seconds\";\n           config false;\n           description\n\
    \             \"Minimum ack-timeout value.\";\n         }\n         leaf current-value-decimal\
    \ {\n           type decimal64 {\n             fraction-digits 2;\n          \
    \ }\n           units \"seconds\";\n           default \"2\";\n           description\n\
    \             \"Current ack-timeout value.\";\n         }\n       }\n       container\
    \ ack-random-factor {\n         description\n           \"Random factor used to\
    \ influence the timing of\n            retransmissions.\";\n         leaf max-value-decimal\
    \ {\n           type decimal64 {\n             fraction-digits 2;\n          \
    \ }\n           config false;\n           description\n             \"Maximum\
    \ acceptable ack-random-factor value.\";\n         }\n         leaf min-value-decimal\
    \ {\n           type decimal64 {\n             fraction-digits 2;\n          \
    \ }\n           config false;\n           description\n             \"Minimum\
    \ acceptable ack-random-factor value.\";\n         }\n         leaf current-value-decimal\
    \ {\n           type decimal64 {\n             fraction-digits 2;\n          \
    \ }\n           default \"1.5\";\n           description\n             \"Current\
    \ ack-random-factor value.\";\n         }\n       }\n     }\n     grouping signal-config\
    \ {\n       description\n         \"DOTS signal channel session configuration.\"\
    ;\n       leaf sid {\n         type uint32;\n         mandatory true;\n      \
    \   description\n           \"An identifier for the DOTS signal channel\n    \
    \        session configuration data.\";\n       }\n       container mitigating-config\
    \ {\n         description\n           \"Configuration parameters to use when a\
    \ mitigation\n            is active.\";\n         uses config-parameters;\n  \
    \     }\n       container idle-config {\n         description\n           \"Configuration\
    \ parameters to use when no mitigation\n            is active.\";\n         uses\
    \ config-parameters;\n       }\n     }\n     grouping redirected-signal {\n  \
    \     description\n         \"Grouping for the redirected signaling.\";\n    \
    \   leaf alt-server {\n         type string;\n         config false;\n       \
    \  mandatory true;\n         description\n           \"FQDN of an alternate server.\"\
    ;\n       }\n       leaf-list alt-server-record {\n         type inet:ip-address;\n\
    \         config false;\n         description\n           \"List of records for\
    \ the alternate server.\";\n       }\n     }\n     /*\n      * Main Container\
    \ for DOTS Signal Channel\n      */\n     container dots-signal {\n       description\n\
    \         \"Main container for DOTS signal message.\n          A DOTS signal message\
    \ can be a mitigation, a configuration,\n          or a redirected signal message.\"\
    ;\n       choice message-type {\n         description\n           \"Can be a mitigation,\
    \ a configuration, or a redirect\n            message.\";\n         case mitigation-scope\
    \ {\n           description\n             \"Mitigation scope of a mitigation message.\"\
    ;\n           uses mitigation-scope;\n         }\n         case signal-config\
    \ {\n           description\n             \"Configuration message.\";\n      \
    \     uses signal-config;\n         }\n         case redirected-signal {\n   \
    \        description\n             \"Redirected signaling.\";\n           uses\
    \ redirected-signal;\n         }\n         case heartbeat {\n           description\n\
    \             \"DOTS heartbeats.\";\n           leaf peer-hb-status {\n      \
    \       type boolean;\n             mandatory true;\n             description\n\
    \               \"Indicates whether a DOTS agent receives heartbeats\n       \
    \         from its peer.  The value is set to 'true' if the\n                DOTS\
    \ agent is receiving heartbeat messages\n                from its peer.\";\n \
    \          }\n         }\n       }\n     }\n   }\n   <CODE ENDS>\n"
- title: 6.  YANG/JSON Mapping Parameters to CBOR
  contents:
  - "6.  YANG/JSON Mapping Parameters to CBOR\n   All parameters in the payload of\
    \ the DOTS signal channel MUST be\n   mapped to CBOR types as shown in Table 5\
    \ and are assigned an integer\n   key to save space.\n      Note: Implementers\
    \ must check that the mapping output provided by\n      their YANG-to-CBOR encoding\
    \ schemes is aligned with the content of\n      Table 5.  For example, some CBOR\
    \ and JSON types for enumerations\n      and the 64-bit quantities can differ\
    \ depending on the encoder\n      used.\n   The CBOR key values are divided into\
    \ two types: comprehension-\n   required and comprehension-optional.  DOTS agents\
    \ can safely ignore\n   comprehension-optional values they don't understand, but\
    \ they cannot\n   successfully process a request if it contains comprehension-required\n\
    \   values that are not understood.  The 4.00 response SHOULD include a\n   diagnostic\
    \ payload describing the unknown comprehension-required CBOR\n   key values. \
    \ The initial set of CBOR key values defined in this\n   specification are of\
    \ type comprehension-required.\n   | Parameter Name      | YANG Type    | CBOR\
    \ | CBOR Major  | JSON   |\n   | ietf-dots-signal-   | container    | 1    | 5\
    \ map       | Object |\n   | channel:mitigation- |              |      |     \
    \        |        |\n   | scope               |              |      |        \
    \     |        |\n   | scope               | list         | 2    | 4 array   \
    \  | Array  |\n   | cdid                | string       | 3    | 3 text      |\
    \ String |\n   | cuid                | string       | 4    | 3 text      | String\
    \ |\n   | mid                 | uint32       | 5    | 0 unsigned  | Number |\n\
    \   | target-prefix       | leaf-list    | 6    | 4 array     | Array  |\n   |\
    \                     | inet:ip-     |      | 3 text      | String |\n   |   \
    \                  | prefix       |      | string      |        |\n   | target-port-range\
    \   | list         | 7    | 4 array     | Array  |\n   | lower-port          |\
    \ inet:port-   | 8    | 0 unsigned  | Number |\n   |                     | number\
    \       |      |             |        |\n   | upper-port          | inet:port-\
    \   | 9    | 0 unsigned  | Number |\n   |                     | number       |\
    \      |             |        |\n   | target-protocol     | leaf-list    | 10\
    \   | 4 array     | Array  |\n   |                     | uint8        |      |\
    \ 0 unsigned  | Number |\n   | target-fqdn         | leaf-list    | 11   | 4 array\
    \     | Array  |\n   |                     | inet:domain- |      | 3 text    \
    \  | String |\n   |                     | name         |      | string      |\
    \        |\n   | target-uri          | leaf-list    | 12   | 4 array     | Array\
    \  |\n   |                     | inet:uri     |      | 3 text      | String |\n\
    \   | alias-name          | leaf-list    | 13   | 4 array     | Array  |\n   |\
    \                     | string       |      | 3 text      | String |\n   | lifetime\
    \            | int32        | 14   | 0 unsigned  | Number |\n   | mitigation-start\
    \    | uint64       | 15   | 0 unsigned  | String |\n   | status             \
    \ | enumeration  | 16   | 0 unsigned  | String |\n   | conflict-           | container\
    \    | 17   | 5 map       | Object |\n   | information         |             \
    \ |      |             |        |\n   | conflict-status     | enumeration  | 18\
    \   | 0 unsigned  | String |\n   | conflict-cause      | enumeration  | 19   |\
    \ 0 unsigned  | String |\n   | retry-timer         | uint32       | 20   | 0 unsigned\
    \  | String |\n   | conflict-scope      | container    | 21   | 5 map       |\
    \ Object |\n   | acl-list            | list         | 22   | 4 array     | Array\
    \  |\n   | acl-name            | leafref      | 23   | 3 text      | String |\n\
    \   | acl-type            | leafref      | 24   | 3 text      | String |\n   |\
    \ bytes-dropped       | yang:zero-   | 25   | 0 unsigned  | String |\n   |   \
    \                  | based-       |      |             |        |\n   |      \
    \               | counter64    |      |             |        |\n   | bps-dropped\
    \         | yang:gauge64 | 26   | 0 unsigned  | String |\n   | pkts-dropped  \
    \      | yang:zero-   | 27   | 0 unsigned  | String |\n   |                  \
    \   | based-       |      |             |        |\n   |                     |\
    \ counter64    |      |             |        |\n   | pps-dropped         | yang:gauge64\
    \ | 28   | 0 unsigned  | String |\n   | attack-status       | enumeration  | 29\
    \   | 0 unsigned  | String |\n   | ietf-dots-signal-   | container    | 30   |\
    \ 5 map       | Object |\n   | channel:signal-     |              |      |   \
    \          |        |\n   | config              |              |      |      \
    \       |        |\n   | sid                 | uint32       | 31   | 0 unsigned\
    \  | Number |\n   | mitigating-config   | container    | 32   | 5 map       |\
    \ Object |\n   | heartbeat-interval  | container    | 33   | 5 map       | Object\
    \ |\n   | max-value           | uint16       | 34   | 0 unsigned  | Number |\n\
    \   | min-value           | uint16       | 35   | 0 unsigned  | Number |\n   |\
    \ current-value       | uint16       | 36   | 0 unsigned  | Number |\n   | missing-hb-allowed\
    \  | container    | 37   | 5 map       | Object |\n   | max-retransmit      |\
    \ container    | 38   | 5 map       | Object |\n   | ack-timeout         | container\
    \    | 39   | 5 map       | Object |\n   | ack-random-factor   | container   \
    \ | 40   | 5 map       | Object |\n   | max-value-decimal   | decimal64    | 41\
    \   | 6 tag 4     | String |\n   | min-value-decimal   | decimal64    | 42   |\
    \ 6 tag 4     | String |\n   | current-value-      | decimal64    | 43   | 6 tag\
    \ 4     | String |\n   | decimal             |              |      | [-2,    \
    \    |        |\n   | idle-config         | container    | 44   | 5 map      \
    \ | Object |\n   | trigger-mitigation  | boolean      | 45   | 7 bits 20   | False\
    \  |\n   | ietf-dots-signal-   | container    | 46   | 5 map       | Object |\n\
    \   | channel:redirected- |              |      |             |        |\n   |\
    \ signal              |              |      |             |        |\n   | alt-server\
    \          | string       | 47   | 3 text      | String |\n   | alt-server-record\
    \   | leaf-list    | 48   | 4 array     | Array  |\n   |                     |\
    \ inet:ip-     |      | 3 text      | String |\n   |                     | address\
    \      |      | string      |        |\n   | ietf-dots-signal-   | container \
    \   | 49   | 5 map       | Object |\n   | channel:heartbeat   |              |\
    \      |             |        |\n   | probing-rate        | container    | 50\
    \   | 5 map       | Object |\n   | peer-hb-status      | boolean      | 51   |\
    \ 7 bits 20   | False  |\n     Table 5: CBOR Key Values Used in DOTS Signal Channel\
    \ Messages &\n                     Their Mappings to JSON and YANG\n"
- title: 7.  (D)TLS Protocol Profile and Performance Considerations
  contents:
  - '7.  (D)TLS Protocol Profile and Performance Considerations

    '
- title: 7.1.  (D)TLS Protocol Profile
  contents:
  - "7.1.  (D)TLS Protocol Profile\n   This section defines the (D)TLS protocol profile\
    \ of DOTS signal\n   channel over (D)TLS and DOTS data channel over TLS.\n   There\
    \ are known attacks on (D)TLS, such as man-in-the-middle and\n   protocol downgrade\
    \ attacks.  These are general attacks on (D)TLS and,\n   as such, they are not\
    \ specific to DOTS over (D)TLS; refer to the\n   (D)TLS RFCs for discussion of\
    \ these security issues.  DOTS agents\n   MUST adhere to the (D)TLS implementation\
    \ recommendations and security\n   considerations of [RFC7525] except with respect\
    \ to (D)TLS version.\n   Because DOTS signal channel encryption relying upon (D)TLS\
    \ is\n   virtually a greenfield deployment, DOTS agents MUST implement only\n\
    \   (D)TLS 1.2 or later.\n   When a DOTS client is configured with a domain name\
    \ of the DOTS\n   server, and it connects to its configured DOTS server, the server\
    \ may\n   present it with a PKIX certificate.  In order to ensure proper\n   authentication,\
    \ a DOTS client MUST verify the entire certification\n   path per [RFC5280]. \
    \ Additionally, the DOTS client MUST use [RFC6125]\n   validation techniques to\
    \ compare the domain name with the certificate\n   provided.  Certification authorities\
    \ that issue DOTS server\n   certificates SHOULD support the DNS-ID and SRV-ID\
    \ identifier types.\n   DOTS servers SHOULD prefer the use of DNS-ID and SRV-ID\
    \ over CN-ID\n   identifier types in certificate requests (as described in Section\
    \ 2.3\n   of [RFC6125]), and the wildcard character '*' SHOULD NOT be included\n\
    \   in the presented identifier.  DOTS doesn't use URI-IDs for server\n   identity\
    \ verification.\n   A key challenge to deploying DOTS is the provisioning of DOTS\n\
    \   clients, including the distribution of keying material to DOTS\n   clients\
    \ to enable the required mutual authentication of DOTS agents.\n   Enrollment\
    \ over Secure Transport (EST) [RFC7030] defines a method of\n   certificate enrollment\
    \ by which domains operating DOTS servers may\n   provide DOTS clients with all\
    \ the necessary cryptographic keying\n   material, including a private key and\
    \ a certificate, to authenticate\n   themselves.  One deployment option is to\
    \ have DOTS clients behave as\n   EST clients for certificate enrollment from\
    \ an EST server provisioned\n   by the mitigation provider.  This document does\
    \ not specify which EST\n   or other mechanism the DOTS client uses to achieve\
    \ initial\n   enrollment.\n   The Server Name Indication (SNI) extension [RFC6066]\
    \ i defines a\n   mechanism for a client to tell a (D)TLS server the name of the\
    \ server\n   it wants to contact.  This is a useful extension for hosting\n  \
    \ environments where multiple virtual servers are reachable over a\n   single\
    \ IP address.  The DOTS client may or may not know if it is\n   interacting with\
    \ a DOTS server in a virtual server hosting\n   environment, so the DOTS client\
    \ SHOULD include the DOTS server FQDN\n   in the SNI extension.\n   Implementations\
    \ compliant with this profile MUST implement all of the\n   following items:\n\
    \   *  DTLS record replay detection (Section 3.3 of [RFC6347]) or an\n      equivalent\
    \ mechanism to protect against replay attacks.\n   *  DTLS session resumption\
    \ without server-side state to resume\n      session and convey the DOTS signal.\n\
    \   *  At least one of raw public keys [RFC7250] or PSK handshake\n      [RFC4279]\
    \ with (EC)DHE key exchange.  This reduces the size of the\n      ServerHello.\
    \  Also, this can be used by DOTS agents that cannot\n      obtain certificates.\n\
    \   Implementations compliant with this profile SHOULD implement all of\n   the\
    \ following items to reduce the delay required to deliver a DOTS\n   signal channel\
    \ message:\n   *  TLS False Start [RFC7918], which reduces round-trips by allowing\n\
    \      the TLS client's second flight of messages (ChangeCipherSpec) to\n    \
    \  also contain the DOTS signal.  TLS False Start is formally defined\n      for\
    \ use with TLS, but the same technique is applicable to DTLS as\n      well.\n\
    \   *  Cached Information Extension [RFC7924] which avoids transmitting\n    \
    \  the server's certificate and certificate chain if the client has\n      cached\
    \ that information from a previous TLS handshake.\n   Compared to UDP, DOTS signal\
    \ channel over TCP requires an additional\n   round-trip time (RTT) of latency\
    \ to establish a TCP connection.  DOTS\n   implementations are encouraged to implement\
    \ TCP Fast Open [RFC7413]\n   to eliminate that RTT.\n"
- title: 7.2.  (D)TLS 1.3 Considerations
  contents:
  - "7.2.  (D)TLS 1.3 Considerations\n   TLS 1.3 provides critical latency improvements\
    \ for connection\n   establishment over TLS 1.2.  The DTLS 1.3 protocol [DTLS]\
    \ is based\n   upon the TLS 1.3 protocol and provides equivalent security\n  \
    \ guarantees.  (D)TLS 1.3 provides two basic handshake modes the DOTS\n   signal\
    \ channel can take advantage of:\n   *  A full handshake mode in which a DOTS\
    \ client can send a DOTS\n      mitigation request message after one round trip\
    \ and the DOTS\n      server immediately responds with a DOTS mitigation response.\
    \  This\n      assumes no packet loss is experienced.\n   *  0-RTT mode in which\
    \ the DOTS client can authenticate itself and\n      send DOTS mitigation request\
    \ messages in the first message, thus\n      reducing handshake latency. 0-RTT\
    \ only works if the DOTS client\n      has previously communicated with that DOTS\
    \ server, which is very\n      likely with the DOTS signal channel.\n   The DOTS\
    \ client has to establish a (D)TLS session with the DOTS\n   server during 'idle'\
    \ time and share a PSK.\n   During a DDoS attack, the DOTS client can use the\
    \ (D)TLS session to\n   convey the DOTS mitigation request message and, if there\
    \ is no\n   response from the server after multiple retries, the DOTS client can\n\
    \   resume the (D)TLS session in 0-RTT mode using PSK.\n   DOTS servers that support\
    \ (D)TLS 1.3 MAY allow DOTS clients to send\n   early data (0-RTT).  DOTS clients\
    \ MUST NOT send \"CoAP Ping\" as early\n   data; such messages MUST be rejected\
    \ by DOTS servers.  Section 8 of\n   [RFC8446] discusses some mechanisms to implement\
    \ in order to limit\n   the impact of replay attacks on 0-RTT data.  If the DOTS\
    \ server\n   accepts 0-RTT, it MUST implement one of these mechanisms to prevent\n\
    \   replay at the TLS layer.  A DOTS server can reject 0-RTT by sending a\n  \
    \ TLS HelloRetryRequest.\n   The DOTS signal channel messages sent as early data\
    \ by the DOTS\n   client are idempotent requests.  As a reminder, the Message\
    \ ID\n   (Section 3 of [RFC7252]) is changed each time a new CoAP request is\n\
    \   sent, and the Token (Section 5.3.1 of [RFC7252]) is randomized in\n   each\
    \ CoAP request.  The DOTS server(s) MUST use the Message ID and\n   the Token\
    \ in the DOTS signal channel message to detect replay of\n   early data at the\
    \ application layer and accept 0-RTT data at most\n   once from the same DOTS\
    \ client.  This anti-replay defense requires\n   sharing the Message ID and the\
    \ Token in the 0-RTT data between DOTS\n   servers in the DOTS server domain.\
    \  DOTS servers do not rely on\n   transport coordinates to identify DOTS peers.\
    \  As specified in\n   Section 4.4.1, DOTS servers couple the DOTS signal channel\
    \ sessions\n   using the DOTS client identity and optionally the 'cdid' parameter\n\
    \   value.  Furthermore, the 'mid' value is monotonically increased by\n   the\
    \ DOTS client for each mitigation request, thus attackers that\n   replay mitigation\
    \ requests with lower numeric 'mid' values and\n   overlapping scopes with mitigation\
    \ requests having higher numeric\n   'mid' values will be rejected systematically\
    \ by the DOTS server.\n   Likewise, the 'sid' value is monotonically increased\
    \ by the DOTS\n   client for each configuration request (Section 4.5.2); attackers\n\
    \   replaying configuration requests with lower numeric 'sid' values will\n  \
    \ be rejected by the DOTS server if it maintains a higher numeric 'sid'\n   value\
    \ for this DOTS client.\n   Owing to the aforementioned protections, all DOTS\
    \ signal channel\n   requests are safe to transmit in TLS 1.3 as early data. \
    \ Refer to\n   [DOTS-EARLYDATA] for more details.\n   A simplified TLS 1.3 handshake\
    \ with 0-RTT DOTS mitigation request\n   message exchange is shown in Figure 29.\n\
    \       DOTS Client                                    DOTS Server\n       ClientHello\n\
    \       (0-RTT DOTS signal message)\n       (end_of_early_data)\n       {Finished}\
    \                -------->\n       [DOTS signal message]     <------->   [DOTS\
    \ signal message]\n   Note that:\n       () Indicates messages protected 0-RTT\
    \ keys\n       {} Indicates messages protected using handshake keys\n       []\
    \ Indicates messages protected using 1-RTT keys\n            Figure 29: A Simplified\
    \ TLS 1.3 Handshake with 0-RTT\n"
- title: 7.3.  DTLS MTU and Fragmentation
  contents:
  - "7.3.  DTLS MTU and Fragmentation\n   To avoid DOTS signal message fragmentation\
    \ and the subsequent\n   decreased probability of message delivery, DOTS agents\
    \ MUST ensure\n   that the DTLS record fits within a single datagram.  As a reminder,\n\
    \   DTLS handles fragmentation and reassembly only for handshake messages\n  \
    \ and not for the application data (Section 4.1.1 of [RFC6347]).  If\n   the path\
    \ MTU (PMTU) cannot be discovered, DOTS agents MUST assume a\n   PMTU of 1280\
    \ bytes, as IPv6 requires that every link in the Internet\n   have an MTU of 1280\
    \ octets or greater as specified in [RFC8200].  If\n   IPv4 support on legacy\
    \ or otherwise unusual networks is a\n   consideration and the PMTU is unknown,\
    \ DOTS implementations MAY\n   assume a PMTU of 576 bytes for IPv4 datagrams,\
    \ as every IPv4 host\n   must be capable of receiving a packet whose length is\
    \ equal to 576\n   bytes as discussed in [RFC0791] and [RFC1122].\n   The DOTS\
    \ client must consider the amount of record expansion expected\n   by the DTLS\
    \ processing when calculating the size of the CoAP message\n   that fits within\
    \ the PMTU.  PMTU MUST be greater than or equal to\n   [CoAP message size + DTLS\
    \ 1.2 overhead of 13 octets + authentication\n   overhead of the negotiated DTLS\
    \ cipher suite + block padding]\n   (Section 4.1.1.1 of [RFC6347]).  If the total\
    \ request size exceeds\n   the PMTU, then the DOTS client MUST split the DOTS\
    \ signal into\n   separate messages; for example, the list of addresses in the\
    \ 'target-\n   prefix' parameter could be split into multiple lists and each list\n\
    \   conveyed in a new PUT request.\n      |  Implementation Note: DOTS choice\
    \ of message size parameters\n      |  works well with IPv6 and with most of today's\
    \ IPv4 paths.\n      |  However, with IPv4, it is harder to safely make sure that\
    \ there\n      |  is no IP fragmentation.  If the IPv4 PMTU is unknown,\n    \
    \  |  implementations may want to limit themselves to more\n      |  conservative\
    \ IPv4 datagram sizes such as 576 bytes, per\n      |  [RFC0791].\n"
- title: 8.  Mutual Authentication of DOTS Agents & Authorization of DOTS Clients
  contents:
  - "8.  Mutual Authentication of DOTS Agents & Authorization of DOTS Clients\n  \
    \ (D)TLS based upon client certificates can be used for mutual\n   authentication\
    \ between DOTS agents.  If, for example, a DOTS gateway\n   is involved, DOTS\
    \ clients and DOTS gateways must perform mutual\n   authentication; only authorized\
    \ DOTS clients are allowed to send DOTS\n   signals to a DOTS gateway.  The DOTS\
    \ gateway and the DOTS server must\n   perform mutual authentication; a DOTS server\
    \ only allows DOTS signal\n   channel messages from an authorized DOTS gateway,\
    \ thereby creating a\n   two-link chain of transitive authentication between the\
    \ DOTS client\n   and the DOTS server.\n   The DOTS server should support certificate-based\
    \ client\n   authentication.  The DOTS client should respond to the DOTS server's\n\
    \   TLS CertificateRequest message with the PKIX certificate held by the\n   DOTS\
    \ client.  DOTS client certificate validation must be performed\n   per [RFC5280],\
    \ and the DOTS client certificate must conform to the\n   [RFC5280] certificate\
    \ profile.  If a DOTS client does not support TLS\n   client certificate authentication,\
    \ it must support client\n   authentication based on pre-shared key or raw public\
    \ key.\n   |       example.com domain       +---------+  |\n   | | Application\
    \   |              +------+--+  |\n   | | server        +<---------------+   \
    \ ^     |\n   | | (DOTS client) |                |    |     |\n   | |   Guest\
    \      +<----x---->+    DOTS     +<----->+    DOTS       |\n   | | (DOTS client)|\
    \           |    gateway  |  |    |    server     |\n   | | DDoS detector  | \
    \             |           |\n   | | (DOTS client)  +<-------------+          \
    \ |\n   Figure 30: Example of Authentication and Authorization of DOTS Agents\n\
    \   In the example depicted in Figure 30, the DOTS gateway and DOTS\n   clients\
    \ within the 'example.com' domain mutually authenticate.  After\n   the DOTS gateway\
    \ validates the identity of a DOTS client, it\n   communicates with the AAA server\
    \ in the 'example.com' domain to\n   determine if the DOTS client is authorized\
    \ to request DDoS\n   mitigation.  If the DOTS client is not authorized, a 4.01\n\
    \   (Unauthorized) is returned in the response to the DOTS client.  In\n   this\
    \ example, the DOTS gateway only allows the application server and\n   DDoS attack\
    \ detector to request DDoS mitigation, but does not permit\n   the user of type\
    \ 'guest' to request DDoS mitigation.\n   Also, DOTS gateways and servers located\
    \ in different domains must\n   perform mutual authentication (e.g., using certificates).\
    \  A DOTS\n   server will only allow a DOTS gateway with a certificate for a\n\
    \   particular domain to request mitigation for that domain.  In\n   reference\
    \ to Figure 30, the DOTS server only allows the DOTS gateway\n   to request mitigation\
    \ for the 'example.com' domain and not for other\n   domains.\n"
- title: 9.  IANA Considerations
  contents:
  - '9.  IANA Considerations

    '
- title: 9.1.  DOTS Signal Channel UDP and TCP Port Number
  contents:
  - "9.1.  DOTS Signal Channel UDP and TCP Port Number\n   IANA has assigned the port\
    \ number 4646 (the ASCII decimal value for\n   \"..\" (DOTS)) to the DOTS signal\
    \ channel protocol for both UDP and TCP\n   from the \"Service Name and Transport\
    \ Protocol Port Number Registry\"\n   available at <https://www.iana.org/assignments/service-names-port-\n\
    \   numbers/>.\n      Service Name:  dots-signal\n      Port Number:  4646\n \
    \     Transport Protocol:  TCP\n      Description:  Distributed Denial-of-Service\
    \ Open Threat Signaling\n         (DOTS) Signal Channel\n      Assignee:  IESG\n\
    \      Contact:  IETF Chair\n      Registration Date:  2020-01-16\n      Reference:\
    \  [RFC8782]\n      Service Name:  dots-signal\n      Port Number:  4646\n   \
    \   Transport Protocol:  UDP\n      Description:  Distributed Denial-of-Service\
    \ Open Threat Signaling\n         (DOTS) Signal Channel\n      Assignee:  IESG\n\
    \      Contact:  IETF Chair\n      Registration Date:  2020-01-16\n      Reference:\
    \  [RFC8782]\n"
- title: 9.2.  Well-Known 'dots' URI
  contents:
  - "9.2.  Well-Known 'dots' URI\n   IANA has registered the 'dots' well-known URI\
    \ (Table 6) in the Well-\n   Known URIs registry (<https://www.iana.org/assignments/well-known-\n\
    \   uris/well-known-uris.xhtml>) as defined by [RFC8615]:\n     | URI Suffix |\
    \ Change     | Reference | Status    | Related     |\n     |            | Controller\
    \ |           |           | information |\n     | dots       | IETF       | [RFC8782]\
    \ | permanent | None        |\n                       Table 6: 'dots' Well-Known\
    \ URI\n"
- title: 9.3.  Media Type Registration
  contents:
  - "9.3.  Media Type Registration\n   IANA has registered the \"application/dots+cbor\"\
    \ media type in the\n   \"Media Types\" registry [IANA-MediaTypes] in the manner\
    \ described in\n   [RFC6838], which can be used to indicate that the content is\
    \ a DOTS\n   signal channel object:\n   Type name: application\n   Subtype name:\
    \ dots+cbor\n   Required parameters: N/A\n   Optional parameters: N/A\n   Encoding\
    \ considerations: binary\n   Security considerations: See the Security Considerations\
    \ section of\n   [RFC8782].\n   Interoperability considerations: N/A\n   Published\
    \ specification: [RFC8782]\n   Applications that use this media type: DOTS agents\
    \ sending DOTS\n   messages over CoAP over (D)TLS.\n   Fragment identifier considerations:\
    \ N/A\n   Additional information:\n      Deprecated alias names for this type:\
    \ N/A\n      Magic number(s): N/A\n      File extension(s): N/A\n      Macintosh\
    \ file type code(s): N/A\n   Person & email address to contact for further information:\
    \ IESG,\n   iesg@ietf.org\n   Intended usage: COMMON\n   Restrictions on usage:\
    \ none\n   Author: See Authors' Addresses section.\n   Change controller: IESG\n\
    \   Provisional registration?  No\n"
- title: 9.4.  CoAP Content-Formats Registration
  contents:
  - "9.4.  CoAP Content-Formats Registration\n   IANA has registered the CoAP Content-Format\
    \ ID for the \"application/\n   dots+cbor\" media type in the \"CoAP Content-Formats\"\
    \ registry\n   [IANA-CoAP-Content-Formats]:\n   *  Media Type: application/dots+cbor\n\
    \   *  Encoding: -\n   *  ID: 271\n   *  Reference: [RFC8782]\n"
- title: 9.5.  CBOR Tag Registration
  contents:
  - "9.5.  CBOR Tag Registration\n   This section defines the DOTS CBOR tag as another\
    \ means for\n   applications to declare that a CBOR data structure is a DOTS signal\n\
    \   channel object.  Its use is optional and is intended for use in cases\n  \
    \ in which this information would not otherwise be known.  The DOTS\n   CBOR tag\
    \ is not required for DOTS signal channel protocol version\n   specified in this\
    \ document.  If present, the DOTS tag MUST prefix a\n   DOTS signal channel object.\n\
    \   IANA has registered the DOTS signal channel CBOR tag in the \"CBOR\n   Tags\"\
    \ registry [IANA-CBOR-Tags]:\n   *  Tag: 271\n   *  Data Item: DDoS Open Threat\
    \ Signaling (DOTS) signal channel object\n   *  Semantics: DDoS Open Threat Signaling\
    \ (DOTS) signal channel\n      object, as defined in [RFC8782]\n   *  Reference:\
    \ [RFC8782]\n"
- title: 9.6.  DOTS Signal Channel Protocol Registry
  contents:
  - "9.6.  DOTS Signal Channel Protocol Registry\n   IANA has created a new registry\
    \ titled the \"Distributed Denial-of-\n   Service Open Threat Signaling (DOTS)\
    \ Signal Channel\" registry.  The\n   following sections define subregistries.\n"
- title: 9.6.1.  DOTS Signal Channel CBOR Key Values Subregistry
  contents:
  - "9.6.1.  DOTS Signal Channel CBOR Key Values Subregistry\n   IANA has created\
    \ a new subregistry titled \"DOTS Signal Channel CBOR\n   Key Values\".\n   The\
    \ structure of this subregistry is provided in Section 9.6.1.1.\n   Section 9.6.1.2\
    \ provides the registry as initially populated with the\n   values in Table 7.\n"
- title: 9.6.1.1.  Registration Template
  contents:
  - "9.6.1.1.  Registration Template\n   Parameter name:\n      Parameter name as\
    \ used in the DOTS signal channel.\n   CBOR Key Value:\n      Key value for the\
    \ parameter.  The key value MUST be an integer in\n      the 1-65535 range.  The\
    \ key values of the comprehension-required\n      range (0x0001 - 0x3FFF) and\
    \ of the comprehension-optional range\n      (0x8000 - 0xBFFF) are assigned by\
    \ IETF Review (Section 4.8 of\n      [RFC8126]).  The key values of the comprehension-optional\
    \ range\n      (0x4000 - 0x7FFF) are assigned by Specification Required\n    \
    \  (Section 4.6 of [RFC8126]) and of the comprehension-optional range\n      (0xC000\
    \ - 0xFFFF) are reserved for Private Use (Section 4.1 of\n      [RFC8126]).\n\
    \      Registration requests for the 0x4000 - 0x7FFF range are evaluated\n   \
    \   after a three-week review period on the dots-signal-reg-\n      review@ietf.org\
    \ mailing list, on the advice of one or more\n      Designated Experts.  However,\
    \ to allow for the allocation of\n      values prior to publication, the Designated\
    \ Experts may approve\n      registration once they are satisfied that such a\
    \ specification\n      will be published.  New registration requests should be\
    \ sent in\n      the form of an email to the review mailing list; the request\n\
    \      should use an appropriate subject (e.g., \"Request to register CBOR\n \
    \     Key Value for DOTS: example\").  IANA will only accept new\n      registrations\
    \ from the Designated Experts, and it will check that\n      review was requested\
    \ on the mailing list in accordance with these\n      procedures.\n      Within\
    \ the review period, the Designated Experts will either\n      approve or deny\
    \ the registration request, communicating this\n      decision to the review list\
    \ and IANA.  Denials should include an\n      explanation and, if applicable,\
    \ suggestions as to how to make the\n      request successful.  Registration requests\
    \ that are undetermined\n      for a period longer than 21 days can be brought\
    \ to the IESG's\n      attention (using the iesg@ietf.org mailing list) for resolution.\n\
    \      Criteria that should be applied by the Designated Experts include\n   \
    \   determining whether the proposed registration duplicates existing\n      functionality,\
    \ whether it is likely to be of general applicability\n      or whether it is\
    \ useful only for a single use case, and whether\n      the registration description\
    \ is clear.  IANA must only accept\n      registry updates to the 0x4000 - 0x7FFF\
    \ range from the Designated\n      Experts and should direct all requests for\
    \ registration to the\n      review mailing list.  It is suggested that multiple\
    \ Designated\n      Experts be appointed.  In cases where a registration decision\n\
    \      could be perceived as creating a conflict of interest for a\n      particular\
    \ Expert, that Expert should defer to the judgment of the\n      other Experts.\n\
    \   CBOR Major Type:\n      CBOR Major type and optional tag for the parameter.\n\
    \   Change Controller:\n      For Standards Track RFCs, list the \"IESG\".  For\
    \ others, give the\n      name of the responsible party.  Other details (e.g.,\
    \ email\n      address) may also be included.\n   Specification Document(s):\n\
    \      Reference to the document or documents that specify the parameter,\n  \
    \    preferably including URIs that can be used to retrieve copies of\n      the\
    \ documents.  An indication of the relevant sections may also be\n      included\
    \ but is not required.\n"
- title: 9.6.1.2.  Initial Subregistry Content
  contents:
  - "9.6.1.2.  Initial Subregistry Content\n   | Parameter Name      | CBOR Key  \
    \ |CBOR | Change   | Specification |\n   |                     | Value      |Major|Controller|\
    \ Document(s)   |\n   | Reserved            | 0          |     |          | [RFC8782]\
    \     |\n   | ietf-dots-signal-   | 1          | 5   | IESG     | [RFC8782]  \
    \   |\n   | channel:mitigation- |            |     |          |              \
    \ |\n   | scope               |            |     |          |               |\n\
    \   | scope               | 2          | 4   | IESG     | [RFC8782]     |\n  \
    \ | cdid                | 3          | 3   | IESG     | [RFC8782]     |\n   |\
    \ cuid                | 4          | 3   | IESG     | [RFC8782]     |\n   | mid\
    \                 | 5          | 0   | IESG     | [RFC8782]     |\n   | target-prefix\
    \       | 6          | 4   | IESG     | [RFC8782]     |\n   | target-port-range\
    \   | 7          | 4   | IESG     | [RFC8782]     |\n   | lower-port         \
    \ | 8          | 0   | IESG     | [RFC8782]     |\n   | upper-port          |\
    \ 9          | 0   | IESG     | [RFC8782]     |\n   | target-protocol     | 10\
    \         | 4   | IESG     | [RFC8782]     |\n   | target-fqdn         | 11  \
    \       | 4   | IESG     | [RFC8782]     |\n   | target-uri          | 12    \
    \     | 4   | IESG     | [RFC8782]     |\n   | alias-name          | 13      \
    \   | 4   | IESG     | [RFC8782]     |\n   | lifetime            | 14        \
    \ | 0/1 | IESG     | [RFC8782]     |\n   | mitigation-start    | 15         |\
    \ 0   | IESG     | [RFC8782]     |\n   | status              | 16         | 0\
    \   | IESG     | [RFC8782]     |\n   |conflict-information | 17         | 5  \
    \ | IESG     | [RFC8782]     |\n   | conflict-status     | 18         | 0   |\
    \ IESG     | [RFC8782]     |\n   | conflict-cause      | 19         | 0   | IESG\
    \     | [RFC8782]     |\n   | retry-timer         | 20         | 0   | IESG  \
    \   | [RFC8782]     |\n   | conflict-scope      | 21         | 5   | IESG    \
    \ | [RFC8782]     |\n   | acl-list            | 22         | 4   | IESG     |\
    \ [RFC8782]     |\n   | acl-name            | 23         | 3   | IESG     | [RFC8782]\
    \     |\n   | acl-type            | 24         | 3   | IESG     | [RFC8782]  \
    \   |\n   | bytes-dropped       | 25         | 0   | IESG     | [RFC8782]    \
    \ |\n   | bps-dropped         | 26         | 0   | IESG     | [RFC8782]     |\n\
    \   | pkts-dropped        | 27         | 0   | IESG     | [RFC8782]     |\n  \
    \ | pps-dropped         | 28         | 0   | IESG     | [RFC8782]     |\n   |\
    \ attack-status       | 29         | 0   | IESG     | [RFC8782]     |\n   | ietf-dots-signal-\
    \   | 30         | 5   | IESG     | [RFC8782]     |\n   |channel:signal-config|\
    \            |     |          |               |\n   | sid                 | 31\
    \         | 0   | IESG     | [RFC8782]     |\n   | mitigating-config   | 32  \
    \       | 5   | IESG     | [RFC8782]     |\n   | heartbeat-interval  | 33    \
    \     | 5   | IESG     | [RFC8782]     |\n   | min-value           | 34      \
    \   | 0   | IESG     | [RFC8782]     |\n   | max-value           | 35        \
    \ | 0   | IESG     | [RFC8782]     |\n   | current-value       | 36         |\
    \ 0   | IESG     | [RFC8782]     |\n   | missing-hb-allowed  | 37         | 5\
    \   | IESG     | [RFC8782]     |\n   | max-retransmit      | 38         | 5  \
    \ | IESG     | [RFC8782]     |\n   | ack-timeout         | 39         | 5   |\
    \ IESG     | [RFC8782]     |\n   | ack-random-factor   | 40         | 5   | IESG\
    \     | [RFC8782]     |\n   | min-value-decimal   | 41         |6tag4| IESG  \
    \   | [RFC8782]     |\n   | max-value-decimal   | 42         |6tag4| IESG    \
    \ | [RFC8782]     |\n   |current-value-decimal| 43         |6tag4| IESG     |\
    \ [RFC8782]     |\n   | idle-config         | 44         | 5   | IESG     | [RFC8782]\
    \     |\n   | trigger-mitigation  | 45         | 7   | IESG     | [RFC8782]  \
    \   |\n   | ietf-dots-signal-   | 46         | 5   | IESG     | [RFC8782]    \
    \ |\n   | channel:redirected- |            |     |          |               |\n\
    \   | signal              |            |     |          |               |\n  \
    \ | alt-server          | 47         | 3   | IESG     | [RFC8782]     |\n   |\
    \ alt-server-record   | 48         | 4   | IESG     | [RFC8782]     |\n   | ietf-dots-signal-\
    \   | 49         | 5   | IESG     | [RFC8782]     |\n   | channel:heartbeat  \
    \ |            |     |          |               |\n   | probing-rate        |\
    \ 50         | 5   | IESG     | [RFC8782]     |\n   | peer-hb-status      | 51\
    \         | 7   | IESG     | [RFC8782]     |\n   | Unassigned          | 52-49151\
    \   |     |          |               |\n   |Reserved for Private |49152-65535\
    \ |     |          | [RFC8782]     |\n   | Use                 |            |\
    \     |          |               |\n       Table 7: Initial DOTS Signal Channel\
    \ CBOR Key Values Registry\n"
- title: 9.6.2.  Status Codes Subregistry
  contents:
  - "9.6.2.  Status Codes Subregistry\n   IANA has created a new subregistry titled\
    \ \"DOTS Signal Channel Status\n   Codes\".  Codes in this registry are used as\
    \ valid values of 'status'\n   parameter.\n   The registry is initially populated\
    \ with the following values:\n    |         Code | Label         | Description\
    \          | Reference |\n    |            0 | Reserved      |               \
    \       | [RFC8782] |\n    |            1 | attack-       | Attack mitigation\
    \    | [RFC8782] |\n    |              | mitigation-   | setup is in progress\
    \ |           |\n    |              | in-progress   | (e.g., changing the  | \
    \          |\n    |            2 | attack-       | Attack is being      | [RFC8782]\
    \ |\n    |              | successfully- | successfully         |           |\n\
    \    |              | mitigated     | mitigated (e.g.,     |           |\n   \
    \ |            3 | attack-       | Attack has stopped   | [RFC8782] |\n    | \
    \             | stopped       | and the DOTS client  |           |\n    |    \
    \        4 | attack-       | Attack has exceeded  | [RFC8782] |\n    |       \
    \       | exceeded-     | the mitigation       |           |\n    |          \
    \    | capability    | provider capability. |           |\n    |            5\
    \ | dots-client-  | DOTS client has      | [RFC8782] |\n    |              | withdrawn-\
    \    | withdrawn the        |           |\n    |              | mitigation   \
    \ | mitigation request   |           |\n    |            6 | attack-       | Attack\
    \ mitigation is | [RFC8782] |\n    |              | mitigation-   | now terminated.\
    \      |           |\n    |              | terminated    |                   \
    \   |           |\n    |            7 | attack-       | Attack mitigation is |\
    \ [RFC8782] |\n    |              | mitigation-   | withdrawn.           |   \
    \        |\n    |              | withdrawn     |                      |      \
    \     |\n    |            8 | attack-       | Attack mitigation    | [RFC8782]\
    \ |\n    |              | mitigation-   | will be triggered    |           |\n\
    \    |              | signal-loss   | for the mitigation   |           |\n   \
    \ | 9-2147483647 | Unassigned    |                      |           |\n      \
    \       Table 8: Initial DOTS Signal Channel Status Codes\n   New codes can be\
    \ assigned via Standards Action [RFC8126].\n"
- title: 9.6.3.  Conflict Status Codes Subregistry
  contents:
  - "9.6.3.  Conflict Status Codes Subregistry\n   IANA has created a new subregistry\
    \ titled \"DOTS Signal Channel\n   Conflict Status Codes\".  Codes in this registry\
    \ are used as valid\n   values of 'conflict-status' parameter.\n   The registry\
    \ is initially populated with the following values:\n   |         Code | Label\
    \             | Description        | Reference |\n   |            0 | Reserved\
    \          |                    | [RFC8782] |\n   |            1 | request-inactive-\
    \ | DOTS server        | [RFC8782] |\n   |              | other-active      |\
    \ has detected       |           |\n   |            2 | request-active    | DOTS\
    \ server        | [RFC8782] |\n   |            3 | all-requests-     | DOTS server\
    \        | [RFC8782] |\n   |              | inactive          | has detected \
    \      |           |\n   | 4-2147483647 | Unassigned        |                \
    \    |           |\n         Table 9: Initial DOTS Signal Channel Conflict Status\
    \ Codes\n   New codes can be assigned via Standards Action [RFC8126].\n"
- title: 9.6.4.  Conflict Cause Codes Subregistry
  contents:
  - "9.6.4.  Conflict Cause Codes Subregistry\n   IANA has created a new subregistry\
    \ titled \"DOTS Signal Channel\n   Conflict Cause Codes\".  Codes in this registry\
    \ are used as valid\n   values of 'conflict-cause' parameter.\n   The registry\
    \ is initially populated with the following values:\n    |         Code | Label\
    \               | Description    | Reference |\n    |            0 | Reserved\
    \            |                | [RFC8782] |\n    |            1 | overlapping-targets\
    \ | Overlapping    | [RFC8782] |\n    |            2 | conflict-with-      | Conflicts\
    \ with | [RFC8782] |\n    |              | acceptlist          | an existing \
    \   |           |\n    |            3 | cuid-collision      | CUID           |\
    \ [RFC8782] |\n    | 4-2147483647 | Unassigned          |                |   \
    \        |\n         Table 10: Initial DOTS Signal Channel Conflict Cause Codes\n\
    \   New codes can be assigned via Standards Action [RFC8126].\n"
- title: 9.6.5.  Attack Status Codes Subregistry
  contents:
  - "9.6.5.  Attack Status Codes Subregistry\n   IANA has created a new subregistry\
    \ titled \"DOTS Signal Channel Attack\n   Status Codes\".  Codes in this registry\
    \ are used as valid values of\n   'attack-status' parameter.\n   The registry\
    \ is initially populated with the following values:\n   |         Code | Label\
    \                | Description     | Reference |\n   |            0 | Reserved\
    \             |                 | [RFC8782] |\n   |            1 | under-attack\
    \         | The DOTS        | [RFC8782] |\n   |            2 | attack-successfully-\
    \ | The DOTS        | [RFC8782] |\n   |              | mitigated            |\
    \ client          |           |\n   | 3-2147483647 | Unassigned           |  \
    \               |           |\n         Table 11: Initial DOTS Signal Channel\
    \ Attack Status Codes\n   New codes can be assigned via Standards Action [RFC8126].\n"
- title: 9.7.  DOTS Signal Channel YANG Modules
  contents:
  - "9.7.  DOTS Signal Channel YANG Modules\n   IANA has registered the following\
    \ URIs in the \"ns\" subregistry within\n   the \"IETF XML Registry\" [RFC3688]:\n\
    \      URI:  urn:ietf:params:xml:ns:yang:ietf-dots-signal-channel\n      Registrant\
    \ Contact:  The IESG.\n      XML:  N/A; the requested URI is an XML namespace.\n\
    \      URI:  urn:ietf:params:xml:ns:yang:iana-dots-signal-channel\n      Registrant\
    \ Contact:  IANA.\n      XML:  N/A; the requested URI is an XML namespace.\n \
    \  IANA has registered the following YANG modules in the \"YANG Module\n   Names\"\
    \ subregistry [RFC7950] within the \"YANG Parameters\" registry.\n      Name:\
    \  ietf-dots-signal-channel\n      Maintained by IANA:  N\n      Namespace:  urn:ietf:params:xml:ns:yang:ietf-dots-signal-channel\n\
    \      Prefix:  signal\n      Reference:  RFC8782\n      Name:  iana-dots-signal-channel\n\
    \      Maintained by IANA:  Y\n      Namespace:  urn:ietf:params:xml:ns:yang:iana-dots-signal-channel\n\
    \      Prefix:  iana-signal\n      Reference:  RFC8782\n   This document defines\
    \ the initial version of the IANA-maintained\n   iana-dots-signal-channel YANG\
    \ module.  IANA has added this note:\n      Status, conflict status, conflict\
    \ cause, and attack status values\n      must not be directly added to the iana-dots-signal-channel\
    \ YANG\n      module.  They must instead be respectively added to the \"DOTS\n\
    \      Status Codes\", \"DOTS Conflict Status Codes\", \"DOTS Conflict Cause\n\
    \      Codes\", and \"DOTS Attack Status Codes\" registries.\n   When a 'status',\
    \ 'conflict-status', 'conflict-cause', or 'attack-\n   status' value is respectively\
    \ added to the \"DOTS Status Codes\", \"DOTS\n   Conflict Status Codes\", \"DOTS\
    \ Conflict Cause Codes\", or \"DOTS Attack\n   Status Codes\" registry, a new\
    \ \"enum\" statement must be added to the\n   iana-dots-signal-channel YANG module.\
    \  The following \"enum\"\n   statement, and substatements thereof, should be\
    \ defined:\n   \"enum\":        Replicates the label from the registry.\n   \"\
    value\":       Contains the IANA-assigned value corresponding to the\n       \
    \           'status', 'conflict-status', 'conflict-cause', or\n              \
    \    'attack-status'.\n   \"description\":  Replicates the description from the\
    \ registry.\n   \"reference\":   Replicates the reference from the registry and\
    \ adds\n                  the title of the document.\n   When the iana-dots-signal-channel\
    \ YANG module is updated, a new\n   \"revision\" statement must be added in front\
    \ of the existing revision\n   statements.\n   IANA added this note to \"DOTS\
    \ Status Codes\", \"DOTS Conflict Status\n   Codes\", \"DOTS Conflict Cause Codes\"\
    , and \"DOTS Attack Status Codes\"\n   registries:\n      When this registry is\
    \ modified, the YANG module iana-dots-signal-\n      channel must be updated as\
    \ defined in [RFC8782].\n"
- title: 10.  Security Considerations
  contents:
  - "10.  Security Considerations\n   High-level DOTS security considerations are\
    \ documented in [RFC8612]\n   and [DOTS-ARCH].\n   Authenticated encryption MUST\
    \ be used for data confidentiality and\n   message integrity.  The interaction\
    \ between the DOTS agents requires\n   Datagram Transport Layer Security (DTLS)\
    \ or Transport Layer Security\n   (TLS) with a cipher suite offering confidentiality\
    \ protection, and\n   the guidance given in [RFC7525] MUST be followed to avoid\
    \ attacks on\n   (D)TLS.  The (D)TLS protocol profile used for the DOTS signal\
    \ channel\n   is specified in Section 7.\n   If TCP is used between DOTS agents,\
    \ an attacker may be able to inject\n   RST packets, bogus application segments,\
    \ etc., regardless of whether\n   TLS authentication is used.  Because the application\
    \ data is TLS\n   protected, this will not result in the application receiving\
    \ bogus\n   data, but it will constitute a DoS on the connection.  This attack\n\
    \   can be countered by using TCP Authentication Option (TCP-AO)\n   [RFC5925].\
    \  Although not widely adopted, if TCP-AO is used, then any\n   bogus packets\
    \ injected by an attacker will be rejected by the TCP-AO\n   integrity check and\
    \ therefore will never reach the TLS layer.\n   If the 'cuid' is guessable, a\
    \ misbehaving DOTS client from within the\n   client's domain can use the 'cuid'\
    \ of another DOTS client of the\n   domain to delete or alter active mitigations.\
    \  For this attack vector\n   to happen, the misbehaving client needs to pass\
    \ the security\n   validation checks by the DOTS server, and eventually the checks\
    \ of a\n   client-domain DOTS gateway.\n   A similar attack can be achieved by\
    \ a compromised DOTS client that\n   can sniff the TLS 1.2 handshake, use the\
    \ client certificate to\n   identify the 'cuid' used by another DOTS client. \
    \ This attack is not\n   possible if algorithms such as version 4 Universally\
    \ Unique\n   IDentifiers (UUIDs) in Section 4.4 of [RFC4122] are used to generate\n\
    \   the 'cuid' because such UUIDs are not a deterministic function of the\n  \
    \ client certificate.  Likewise, this attack is not possible with TLS\n   1.3\
    \ because most of the TLS handshake is encrypted and the client\n   certificate\
    \ is not visible to eavesdroppers.\n   A compromised DOTS client can collude with\
    \ a DDoS attacker to send\n   mitigation request for a target resource, get the\
    \ mitigation efficacy\n   from the DOTS server, and convey the mitigation efficacy\
    \ to the DDoS\n   attacker to possibly change the DDoS attack strategy.  Obviously,\n\
    \   signaling an attack by the compromised DOTS client to the DOTS server\n  \
    \ will trigger attack mitigation.  This attack can be prevented by\n   monitoring\
    \ and auditing DOTS clients to detect misbehavior and to\n   deter misuse, and\
    \ by only authorizing the DOTS client to request\n   mitigation for specific target\
    \ resources (e.g., an application server\n   is authorized to request mitigation\
    \ for its IP addresses, but a DDoS\n   mitigator can request mitigation for any\
    \ target resource in the\n   network).  Furthermore, DOTS clients are typically\
    \ co-located on\n   network security services (e.g., firewall), and a compromised\n\
    \   security service potentially can do a lot more damage to the network.\n  \
    \ Rate-limiting DOTS requests, including those with new 'cuid' values,\n   from\
    \ the same DOTS client defend against DoS attacks that would\n   result in varying\
    \ the 'cuid' to exhaust DOTS server resources.  Rate-\n   limit policies SHOULD\
    \ be enforced on DOTS gateways (if deployed) and\n   DOTS servers.\n   In order\
    \ to prevent leaking internal information outside a client's\n   domain, DOTS\
    \ gateways located in the client domain SHOULD NOT reveal\n   the identification\
    \ information that pertains to internal DOTS clients\n   (e.g., source IP address,\
    \ client's hostname) unless explicitly\n   configured to do so.\n   DOTS servers\
    \ MUST verify that requesting DOTS clients are entitled to\n   trigger actions\
    \ on a given IP prefix.  That is, only actions on IP\n   resources that belong\
    \ to the DOTS client's domain MUST be authorized\n   by a DOTS server.  The exact\
    \ mechanism for the DOTS servers to\n   validate that the target prefixes are\
    \ within the scope of the DOTS\n   client domain is deployment specific.\n   The\
    \ presence of DOTS gateways may lead to infinite forwarding loops,\n   which is\
    \ undesirable.  To prevent and detect such loops, this\n   document uses the Hop-Limit\
    \ option.\n   When FQDNs are used as targets, the DOTS server MUST rely upon DNS\n\
    \   privacy-enabling protocols (e.g., DNS over TLS [RFC7858] or DNS over\n   HTTPS\
    \ (DoH) [RFC8484]) to prevent eavesdroppers from possibly\n   identifying the\
    \ target resources protected by the DDoS mitigation\n   service to ensure the\
    \ target FQDN resolution is authentic (e.g.,\n   DNSSEC [RFC4034]).\n   CoAP-specific\
    \ security considerations are discussed in Section 11 of\n   [RFC7252], while\
    \ CBOR-related security considerations are discussed\n   in Section 8 of [RFC7049].\n"
- title: 11.  References
  contents:
  - '11.  References

    '
- title: 11.1.  Normative References
  contents:
  - "11.1.  Normative References\n   [RFC0791]  Postel, J., \"Internet Protocol\"\
    , STD 5, RFC 791,\n              DOI 10.17487/RFC0791, September 1981,\n     \
    \         <https://www.rfc-editor.org/info/rfc791>.\n   [RFC1122]  Braden, R.,\
    \ Ed., \"Requirements for Internet Hosts -\n              Communication Layers\"\
    , STD 3, RFC 1122,\n              DOI 10.17487/RFC1122, October 1989,\n      \
    \        <https://www.rfc-editor.org/info/rfc1122>.\n   [RFC2119]  Bradner, S.,\
    \ \"Key words for use in RFCs to Indicate\n              Requirement Levels\"\
    , BCP 14, RFC 2119,\n              DOI 10.17487/RFC2119, March 1997,\n       \
    \       <https://www.rfc-editor.org/info/rfc2119>.\n   [RFC3688]  Mealling, M.,\
    \ \"The IETF XML Registry\", BCP 81, RFC 3688,\n              DOI 10.17487/RFC3688,\
    \ January 2004,\n              <https://www.rfc-editor.org/info/rfc3688>.\n  \
    \ [RFC3986]  Berners-Lee, T., Fielding, R., and L. Masinter, \"Uniform\n     \
    \         Resource Identifier (URI): Generic Syntax\", STD 66,\n             \
    \ RFC 3986, DOI 10.17487/RFC3986, January 2005,\n              <https://www.rfc-editor.org/info/rfc3986>.\n\
    \   [RFC4279]  Eronen, P., Ed. and H. Tschofenig, Ed., \"Pre-Shared Key\n    \
    \          Ciphersuites for Transport Layer Security (TLS)\",\n              RFC\
    \ 4279, DOI 10.17487/RFC4279, December 2005,\n              <https://www.rfc-editor.org/info/rfc4279>.\n\
    \   [RFC4632]  Fuller, V. and T. Li, \"Classless Inter-domain Routing\n      \
    \        (CIDR): The Internet Address Assignment and Aggregation\n           \
    \   Plan\", BCP 122, RFC 4632, DOI 10.17487/RFC4632, August\n              2006,\
    \ <https://www.rfc-editor.org/info/rfc4632>.\n   [RFC4648]  Josefsson, S., \"\
    The Base16, Base32, and Base64 Data\n              Encodings\", RFC 4648, DOI\
    \ 10.17487/RFC4648, October 2006,\n              <https://www.rfc-editor.org/info/rfc4648>.\n\
    \   [RFC5246]  Dierks, T. and E. Rescorla, \"The Transport Layer Security\n  \
    \            (TLS) Protocol Version 1.2\", RFC 5246,\n              DOI 10.17487/RFC5246,\
    \ August 2008,\n              <https://www.rfc-editor.org/info/rfc5246>.\n   [RFC5280]\
    \  Cooper, D., Santesson, S., Farrell, S., Boeyen, S.,\n              Housley,\
    \ R., and W. Polk, \"Internet X.509 Public Key\n              Infrastructure Certificate\
    \ and Certificate Revocation List\n              (CRL) Profile\", RFC 5280, DOI\
    \ 10.17487/RFC5280, May 2008,\n              <https://www.rfc-editor.org/info/rfc5280>.\n\
    \   [RFC6066]  Eastlake 3rd, D., \"Transport Layer Security (TLS)\n          \
    \    Extensions: Extension Definitions\", RFC 6066,\n              DOI 10.17487/RFC6066,\
    \ January 2011,\n              <https://www.rfc-editor.org/info/rfc6066>.\n  \
    \ [RFC6125]  Saint-Andre, P. and J. Hodges, \"Representation and\n           \
    \   Verification of Domain-Based Application Service Identity\n              within\
    \ Internet Public Key Infrastructure Using X.509\n              (PKIX) Certificates\
    \ in the Context of Transport Layer\n              Security (TLS)\", RFC 6125,\
    \ DOI 10.17487/RFC6125, March\n              2011, <https://www.rfc-editor.org/info/rfc6125>.\n\
    \   [RFC6347]  Rescorla, E. and N. Modadugu, \"Datagram Transport Layer\n    \
    \          Security Version 1.2\", RFC 6347, DOI 10.17487/RFC6347,\n         \
    \     January 2012, <https://www.rfc-editor.org/info/rfc6347>.\n   [RFC6991] \
    \ Schoenwaelder, J., Ed., \"Common YANG Data Types\",\n              RFC 6991,\
    \ DOI 10.17487/RFC6991, July 2013,\n              <https://www.rfc-editor.org/info/rfc6991>.\n\
    \   [RFC7049]  Bormann, C. and P. Hoffman, \"Concise Binary Object\n         \
    \     Representation (CBOR)\", RFC 7049, DOI 10.17487/RFC7049,\n             \
    \ October 2013, <https://www.rfc-editor.org/info/rfc7049>.\n   [RFC7250]  Wouters,\
    \ P., Ed., Tschofenig, H., Ed., Gilmore, J.,\n              Weiler, S., and T.\
    \ Kivinen, \"Using Raw Public Keys in\n              Transport Layer Security\
    \ (TLS) and Datagram Transport\n              Layer Security (DTLS)\", RFC 7250,\
    \ DOI 10.17487/RFC7250,\n              June 2014, <https://www.rfc-editor.org/info/rfc7250>.\n\
    \   [RFC7252]  Shelby, Z., Hartke, K., and C. Bormann, \"The Constrained\n   \
    \           Application Protocol (CoAP)\", RFC 7252,\n              DOI 10.17487/RFC7252,\
    \ June 2014,\n              <https://www.rfc-editor.org/info/rfc7252>.\n   [RFC7525]\
    \  Sheffer, Y., Holz, R., and P. Saint-Andre,\n              \"Recommendations\
    \ for Secure Use of Transport Layer\n              Security (TLS) and Datagram\
    \ Transport Layer Security\n              (DTLS)\", BCP 195, RFC 7525, DOI 10.17487/RFC7525,\
    \ May\n              2015, <https://www.rfc-editor.org/info/rfc7525>.\n   [RFC7641]\
    \  Hartke, K., \"Observing Resources in the Constrained\n              Application\
    \ Protocol (CoAP)\", RFC 7641,\n              DOI 10.17487/RFC7641, September\
    \ 2015,\n              <https://www.rfc-editor.org/info/rfc7641>.\n   [RFC7918]\
    \  Langley, A., Modadugu, N., and B. Moeller, \"Transport\n              Layer\
    \ Security (TLS) False Start\", RFC 7918,\n              DOI 10.17487/RFC7918,\
    \ August 2016,\n              <https://www.rfc-editor.org/info/rfc7918>.\n   [RFC7924]\
    \  Santesson, S. and H. Tschofenig, \"Transport Layer Security\n             \
    \ (TLS) Cached Information Extension\", RFC 7924,\n              DOI 10.17487/RFC7924,\
    \ July 2016,\n              <https://www.rfc-editor.org/info/rfc7924>.\n   [RFC7950]\
    \  Bjorklund, M., Ed., \"The YANG 1.1 Data Modeling Language\",\n            \
    \  RFC 7950, DOI 10.17487/RFC7950, August 2016,\n              <https://www.rfc-editor.org/info/rfc7950>.\n\
    \   [RFC7959]  Bormann, C. and Z. Shelby, Ed., \"Block-Wise Transfers in\n   \
    \           the Constrained Application Protocol (CoAP)\", RFC 7959,\n       \
    \       DOI 10.17487/RFC7959, August 2016,\n              <https://www.rfc-editor.org/info/rfc7959>.\n\
    \   [RFC8085]  Eggert, L., Fairhurst, G., and G. Shepherd, \"UDP Usage\n     \
    \         Guidelines\", BCP 145, RFC 8085, DOI 10.17487/RFC8085,\n           \
    \   March 2017, <https://www.rfc-editor.org/info/rfc8085>.\n   [RFC8126]  Cotton,\
    \ M., Leiba, B., and T. Narten, \"Guidelines for\n              Writing an IANA\
    \ Considerations Section in RFCs\", BCP 26,\n              RFC 8126, DOI 10.17487/RFC8126,\
    \ June 2017,\n              <https://www.rfc-editor.org/info/rfc8126>.\n   [RFC8174]\
    \  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n              2119\
    \ Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n              May 2017,\
    \ <https://www.rfc-editor.org/info/rfc8174>.\n   [RFC8200]  Deering, S. and R.\
    \ Hinden, \"Internet Protocol, Version 6\n              (IPv6) Specification\"\
    , STD 86, RFC 8200,\n              DOI 10.17487/RFC8200, July 2017,\n        \
    \      <https://www.rfc-editor.org/info/rfc8200>.\n   [RFC8305]  Schinazi, D.\
    \ and T. Pauly, \"Happy Eyeballs Version 2:\n              Better Connectivity\
    \ Using Concurrency\", RFC 8305,\n              DOI 10.17487/RFC8305, December\
    \ 2017,\n              <https://www.rfc-editor.org/info/rfc8305>.\n   [RFC8323]\
    \  Bormann, C., Lemay, S., Tschofenig, H., Hartke, K.,\n              Silverajan,\
    \ B., and B. Raymor, Ed., \"CoAP (Constrained\n              Application Protocol)\
    \ over TCP, TLS, and WebSockets\",\n              RFC 8323, DOI 10.17487/RFC8323,\
    \ February 2018,\n              <https://www.rfc-editor.org/info/rfc8323>.\n \
    \  [RFC8446]  Rescorla, E., \"The Transport Layer Security (TLS) Protocol\n  \
    \            Version 1.3\", RFC 8446, DOI 10.17487/RFC8446, August 2018,\n   \
    \           <https://www.rfc-editor.org/info/rfc8446>.\n   [RFC8615]  Nottingham,\
    \ M., \"Well-Known Uniform Resource Identifiers\n              (URIs)\", RFC 8615,\
    \ DOI 10.17487/RFC8615, May 2019,\n              <https://www.rfc-editor.org/info/rfc8615>.\n\
    \   [RFC8768]  Boucadair, M., Reddy.K, T., and J. Shallow, \"Constrained\n   \
    \           Application Protocol (CoAP) Hop-Limit Option\", RFC 8768,\n      \
    \        DOI 10.17487/RFC8768, March 2020,\n              <https://www.rfc-editor.org/info/rfc8768>.\n"
- title: 11.2.  Informative References
  contents:
  - "11.2.  Informative References\n   [COMI]     Veillette, M., Stok, P., Pelov,\
    \ A., Bierman, A., and I.\n              Petrov, \"CoAP Management Interface\"\
    , Work in Progress,\n              Internet-Draft, draft-ietf-core-comi-09, 9\
    \ March 2020,\n              <https://tools.ietf.org/html/draft-ietf-core-comi-09>.\n\
    \   [CORE-YANG-CBOR]\n              Veillette, M., Petrov, I., and A. Pelov, \"\
    CBOR Encoding of\n              Data Modeled with YANG\", Work in Progress, Internet-Draft,\n\
    \              draft-ietf-core-yang-cbor-12, 9 March 2020,\n              <https://tools.ietf.org/html/draft-ietf-core-yang-cbor-\n\
    \              12>.\n   [DOTS-ARCH]\n              Mortensen, A., Reddy.K, T.,\
    \ Andreasen, F., Teague, N., and\n              R. Compton, \"Distributed-Denial-of-Service\
    \ Open Threat\n              Signaling (DOTS) Architecture\", Work in Progress,\n\
    \              Internet-Draft, draft-ietf-dots-architecture-18, 6 March\n    \
    \          2020, <https://tools.ietf.org/html/draft-ietf-dots-\n             \
    \ architecture-18>.\n   [DOTS-EARLYDATA]\n              Boucadair, M. and T. Reddy.K,\
    \ \"Using Early Data in DOTS\",\n              Work in Progress, Internet-Draft,\
    \ draft-boucadair-dots-\n              earlydata-00, 29 January 2019,\n      \
    \        <https://tools.ietf.org/html/draft-boucadair-dots-\n              earlydata-00>.\n\
    \   [DOTS-MH]  Boucadair, M., Reddy.K, T., and W. Pan, \"Multi-homing\n      \
    \        Deployment Considerations for Distributed-Denial-of-\n              Service\
    \ Open Threat Signaling (DOTS)\", Work in Progress,\n              Internet-Draft,\
    \ draft-ietf-dots-multihoming-03, 22 January\n              2020, <https://tools.ietf.org/html/draft-ietf-dots-\n\
    \              multihoming-03>.\n   [DOTS-SERVER-DISC]\n              Boucadair,\
    \ M. and T. Reddy.K, \"Distributed-Denial-of-\n              Service Open Threat\
    \ Signaling (DOTS) Agent Discovery\",\n              Work in Progress, Internet-Draft,\
    \ draft-ietf-dots-server-\n              discovery-10, 7 February 2020,\n    \
    \          <https://tools.ietf.org/html/draft-ietf-dots-server-\n            \
    \  discovery-10>.\n   [DOTS-USE-CASES]\n              Dobbins, R., Migault, D.,\
    \ Moskowitz, R., Teague, N., Xia,\n              L., and K. Nishizuka, \"Use cases\
    \ for DDoS Open Threat\n              Signaling\", Work in Progress, Internet-Draft,\
    \ draft-ietf-\n              dots-use-cases-21, 15 May 2020,\n              <https://tools.ietf.org/html/draft-ietf-dots-use-cases-\n\
    \              21>.\n   [DTLS]     Rescorla, E., Tschofenig, H., and N. Modadugu,\
    \ \"The\n              Datagram Transport Layer Security (DTLS) Protocol Version\n\
    \              1.3\", Work in Progress, Internet-Draft, draft-ietf-tls-\n    \
    \          dtls13-37, 9 March 2020,\n              <https://tools.ietf.org/html/draft-ietf-tls-dtls13-37>.\n\
    \   [IANA-CBOR-Tags]\n              IANA, \"Concise Binary Object Representation\
    \ (CBOR) Tags\",\n              <http://www.iana.org/assignments/cbor-tags/cbor-\n\
    \              tags.xhtml>.\n   [IANA-CoAP-Content-Formats]\n              IANA,\
    \ \"CoAP Content-Formats\",\n              <http://www.iana.org/assignments/core-parameters/core-\n\
    \              parameters.xhtml#content-formats>.\n   [IANA-MediaTypes]\n    \
    \          IANA, \"Media Types\",\n              <http://www.iana.org/assignments/media-types>.\n\
    \   [IANA-Proto]\n              IANA, \"Protocol Numbers\", 2011,\n          \
    \    <http://www.iana.org/assignments/protocol-numbers>.\n   [RFC3022]  Srisuresh,\
    \ P. and K. Egevang, \"Traditional IP Network\n              Address Translator\
    \ (Traditional NAT)\", RFC 3022,\n              DOI 10.17487/RFC3022, January\
    \ 2001,\n              <https://www.rfc-editor.org/info/rfc3022>.\n   [RFC4034]\
    \  Arends, R., Austein, R., Larson, M., Massey, D., and S.\n              Rose,\
    \ \"Resource Records for the DNS Security Extensions\",\n              RFC 4034,\
    \ DOI 10.17487/RFC4034, March 2005,\n              <https://www.rfc-editor.org/info/rfc4034>.\n\
    \   [RFC4122]  Leach, P., Mealling, M., and R. Salz, \"A Universally\n       \
    \       Unique IDentifier (UUID) URN Namespace\", RFC 4122,\n              DOI\
    \ 10.17487/RFC4122, July 2005,\n              <https://www.rfc-editor.org/info/rfc4122>.\n\
    \   [RFC4340]  Kohler, E., Handley, M., and S. Floyd, \"Datagram\n           \
    \   Congestion Control Protocol (DCCP)\", RFC 4340,\n              DOI 10.17487/RFC4340,\
    \ March 2006,\n              <https://www.rfc-editor.org/info/rfc4340>.\n   [RFC4732]\
    \  Handley, M., Ed., Rescorla, E., Ed., and IAB, \"Internet\n              Denial-of-Service\
    \ Considerations\", RFC 4732,\n              DOI 10.17487/RFC4732, December 2006,\n\
    \              <https://www.rfc-editor.org/info/rfc4732>.\n   [RFC4787]  Audet,\
    \ F., Ed. and C. Jennings, \"Network Address\n              Translation (NAT)\
    \ Behavioral Requirements for Unicast\n              UDP\", BCP 127, RFC 4787,\
    \ DOI 10.17487/RFC4787, January\n              2007, <https://www.rfc-editor.org/info/rfc4787>.\n\
    \   [RFC4960]  Stewart, R., Ed., \"Stream Control Transmission Protocol\",\n \
    \             RFC 4960, DOI 10.17487/RFC4960, September 2007,\n              <https://www.rfc-editor.org/info/rfc4960>.\n\
    \   [RFC4987]  Eddy, W., \"TCP SYN Flooding Attacks and Common\n             \
    \ Mitigations\", RFC 4987, DOI 10.17487/RFC4987, August 2007,\n              <https://www.rfc-editor.org/info/rfc4987>.\n\
    \   [RFC5925]  Touch, J., Mankin, A., and R. Bonica, \"The TCP\n             \
    \ Authentication Option\", RFC 5925, DOI 10.17487/RFC5925,\n              June\
    \ 2010, <https://www.rfc-editor.org/info/rfc5925>.\n   [RFC6052]  Bao, C., Huitema,\
    \ C., Bagnulo, M., Boucadair, M., and X.\n              Li, \"IPv6 Addressing\
    \ of IPv4/IPv6 Translators\", RFC 6052,\n              DOI 10.17487/RFC6052, October\
    \ 2010,\n              <https://www.rfc-editor.org/info/rfc6052>.\n   [RFC6146]\
    \  Bagnulo, M., Matthews, P., and I. van Beijnum, \"Stateful\n              NAT64:\
    \ Network Address and Protocol Translation from IPv6\n              Clients to\
    \ IPv4 Servers\", RFC 6146, DOI 10.17487/RFC6146,\n              April 2011, <https://www.rfc-editor.org/info/rfc6146>.\n\
    \   [RFC6234]  Eastlake 3rd, D. and T. Hansen, \"US Secure Hash Algorithms\n \
    \             (SHA and SHA-based HMAC and HKDF)\", RFC 6234,\n              DOI\
    \ 10.17487/RFC6234, May 2011,\n              <https://www.rfc-editor.org/info/rfc6234>.\n\
    \   [RFC6296]  Wasserman, M. and F. Baker, \"IPv6-to-IPv6 Network Prefix\n   \
    \           Translation\", RFC 6296, DOI 10.17487/RFC6296, June 2011,\n      \
    \        <https://www.rfc-editor.org/info/rfc6296>.\n   [RFC6724]  Thaler, D.,\
    \ Ed., Draves, R., Matsumoto, A., and T. Chown,\n              \"Default Address\
    \ Selection for Internet Protocol Version 6\n              (IPv6)\", RFC 6724,\
    \ DOI 10.17487/RFC6724, September 2012,\n              <https://www.rfc-editor.org/info/rfc6724>.\n\
    \   [RFC6838]  Freed, N., Klensin, J., and T. Hansen, \"Media Type\n         \
    \     Specifications and Registration Procedures\", BCP 13,\n              RFC\
    \ 6838, DOI 10.17487/RFC6838, January 2013,\n              <https://www.rfc-editor.org/info/rfc6838>.\n\
    \   [RFC6887]  Wing, D., Ed., Cheshire, S., Boucadair, M., Penno, R., and\n  \
    \            P. Selkirk, \"Port Control Protocol (PCP)\", RFC 6887,\n        \
    \      DOI 10.17487/RFC6887, April 2013,\n              <https://www.rfc-editor.org/info/rfc6887>.\n\
    \   [RFC6888]  Perreault, S., Ed., Yamagata, I., Miyakawa, S., Nakagawa,\n   \
    \           A., and H. Ashida, \"Common Requirements for Carrier-Grade\n     \
    \         NATs (CGNs)\", BCP 127, RFC 6888, DOI 10.17487/RFC6888,\n          \
    \    April 2013, <https://www.rfc-editor.org/info/rfc6888>.\n   [RFC7030]  Pritikin,\
    \ M., Ed., Yee, P., Ed., and D. Harkins, Ed.,\n              \"Enrollment over\
    \ Secure Transport\", RFC 7030,\n              DOI 10.17487/RFC7030, October 2013,\n\
    \              <https://www.rfc-editor.org/info/rfc7030>.\n   [RFC7413]  Cheng,\
    \ Y., Chu, J., Radhakrishnan, S., and A. Jain, \"TCP\n              Fast Open\"\
    , RFC 7413, DOI 10.17487/RFC7413, December 2014,\n              <https://www.rfc-editor.org/info/rfc7413>.\n\
    \   [RFC7452]  Tschofenig, H., Arkko, J., Thaler, D., and D. McPherson,\n    \
    \          \"Architectural Considerations in Smart Object Networking\",\n    \
    \          RFC 7452, DOI 10.17487/RFC7452, March 2015,\n              <https://www.rfc-editor.org/info/rfc7452>.\n\
    \   [RFC7589]  Badra, M., Luchuk, A., and J. Schoenwaelder, \"Using the\n    \
    \          NETCONF Protocol over Transport Layer Security (TLS) with\n       \
    \       Mutual X.509 Authentication\", RFC 7589,\n              DOI 10.17487/RFC7589,\
    \ June 2015,\n              <https://www.rfc-editor.org/info/rfc7589>.\n   [RFC7858]\
    \  Hu, Z., Zhu, L., Heidemann, J., Mankin, A., Wessels, D.,\n              and\
    \ P. Hoffman, \"Specification for DNS over Transport\n              Layer Security\
    \ (TLS)\", RFC 7858, DOI 10.17487/RFC7858, May\n              2016, <https://www.rfc-editor.org/info/rfc7858>.\n\
    \   [RFC7951]  Lhotka, L., \"JSON Encoding of Data Modeled with YANG\",\n    \
    \          RFC 7951, DOI 10.17487/RFC7951, August 2016,\n              <https://www.rfc-editor.org/info/rfc7951>.\n\
    \   [RFC8340]  Bjorklund, M. and L. Berger, Ed., \"YANG Tree Diagrams\",\n   \
    \           BCP 215, RFC 8340, DOI 10.17487/RFC8340, March 2018,\n           \
    \   <https://www.rfc-editor.org/info/rfc8340>.\n   [RFC8484]  Hoffman, P. and\
    \ P. McManus, \"DNS Queries over HTTPS\n              (DoH)\", RFC 8484, DOI 10.17487/RFC8484,\
    \ October 2018,\n              <https://www.rfc-editor.org/info/rfc8484>.\n  \
    \ [RFC8489]  Petit-Huguenin, M., Salgueiro, G., Rosenberg, J., Wing,\n       \
    \       D., Mahy, R., and P. Matthews, \"Session Traversal\n              Utilities\
    \ for NAT (STUN)\", RFC 8489, DOI 10.17487/RFC8489,\n              February 2020,\
    \ <https://www.rfc-editor.org/info/rfc8489>.\n   [RFC8499]  Hoffman, P., Sullivan,\
    \ A., and K. Fujiwara, \"DNS\n              Terminology\", BCP 219, RFC 8499,\
    \ DOI 10.17487/RFC8499,\n              January 2019, <https://www.rfc-editor.org/info/rfc8499>.\n\
    \   [RFC8612]  Mortensen, A., Reddy, T., and R. Moskowitz, \"DDoS Open\n     \
    \         Threat Signaling (DOTS) Requirements\", RFC 8612,\n              DOI\
    \ 10.17487/RFC8612, May 2019,\n              <https://www.rfc-editor.org/info/rfc8612>.\n\
    \   [RFC8783]  Boucadair, M., Ed. and T. Reddy.K, Ed., \"Distributed\n       \
    \       Denial-of-Service Open Threat Signaling (DOTS) Data\n              Channel\
    \ Specification\", RFC 8783, DOI 10.17487/RFC8783,\n              May 2020, <https://www.rfc-editor.org/info/rfc8783>.\n"
- title: Appendix A.  CUID Generation
  contents:
  - "Appendix A.  CUID Generation\n   The document recommends the use of SPKI to generate\
    \ the 'cuid'.  This\n   design choice is motivated by the following reasons:\n\
    \   *  SPKI is globally unique.\n   *  It is deterministic.\n   *  It allows the\
    \ avoidance of extra cycles that may be induced by\n      'cuid' collision.\n\
    \   *  DOTS clients do not need to store the 'cuid' in a persistent\n      storage.\n\
    \   *  It allows the detection of compromised DOTS clients that do not\n     \
    \ adhere to the 'cuid' generation algorithm.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   Thanks to Christian Jacquenet, Roland Dobbins, Roman Danyliw,\
    \ Michael\n   Richardson, Ehud Doron, Kaname Nishizuka, Dave Dolson, Liang Xia,\n\
    \   Gilbert Clark, Xialiang Frank, Jim Schaad, Klaus Hartke, Nesredien\n   Suleiman,\
    \ Stephen Farrell, and Yoshifumi Nishida for the discussion\n   and comments.\n\
    \   The authors would like to give special thanks to Kaname Nishizuka and\n  \
    \ Jon Shallow for their efforts in implementing the protocol and\n   performing\
    \ interop testing at IETF Hackathons.\n   Thanks to the core WG for the recommendations\
    \ on Hop-Limit and\n   redirect signaling.\n   Special thanks to Benjamin Kaduk\
    \ for the detailed AD review.\n   Thanks to Alexey Melnikov, Adam Roach, Suresh\
    \ Krishnan, Mirja\n   K\xFChlewind, and Alissa Cooper for the review.\n   Thanks\
    \ to Carsten Bormann for his review of the DOTS heartbeat\n   mechanism.\n"
- title: Contributors
  contents:
  - "Contributors\n   The following individuals have contributed to this document:\n\
    \   Jon Shallow\n   NCC Group\n   Email: jon.shallow@nccgroup.trust\n   Mike Geller\n\
    \   Cisco Systems, Inc.\n   FL 33309\n   United States of America\n   Email: mgeller@cisco.com\n\
    \   Robert Moskowitz\n   HTT Consulting\n   Oak Park, MI 42837\n   United States\
    \ of America\n   Email: rgm@htt-consult.com\n   Dan Wing\n   Email: dwing-ietf@fuggles.com\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Tirumaleswar Reddy.K (editor)\n   McAfee, Inc.\n   Embassy\
    \ Golf Link Business Park\n   Bangalore 560071\n   Karnataka\n   India\n   Email:\
    \ kondtir@gmail.com\n   Mohamed Boucadair (editor)\n   Orange\n   35000 Rennes\n\
    \   France\n   Email: mohamed.boucadair@orange.com\n   Prashanth Patil\n   Cisco\
    \ Systems, Inc.\n   Email: praspati@cisco.com\n   Andrew Mortensen\n   Arbor Networks,\
    \ Inc.\n   2727 S. State Street\n   Ann Arbor, MI 48104\n   United States of America\n\
    \   Email: andrew@moretension.com\n   Nik Teague\n   Iron Mountain Data Centers\n"
