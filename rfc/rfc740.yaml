- title: __initial_text__
  contents:
  - '                            NETRJS PROTOCOL

    '
- title: A.  Introduction
  contents:
  - "A.  Introduction\n   NETRJS, a private protocol for remote job entry service,\
    \ was defined\n   and implemented by the UCLA Campus Computing Network (CCN) for\
    \ batch\n   job submission to an IBM 360 Model 91. CCN's NETRJS server allows\
    \ a\n   remote user, or a daemon process working in behalf of a user, to\n   access\
    \ CCN's RJS (\"Remote Job Service\") subsystem.  RJS provides\n   remote job entry\
    \ service to real remote batch (card reader/line\n   printer) terminals over direct\
    \ communications lines as well as to the\n   ARPANET.\n   A batch user at a remote\
    \ host needs a NETRJS user process to\n   communicate with the NETRJS server at\
    \ the batch host. An active\n   NETRJS user process simulates a \"Virtual Remote\
    \ Batch Terminal\", or\n   \"VRBT\".\n   A VRBT may have virtual card readers,\
    \ printers, and punches. In\n   addition, every VRBT has a virtual remote operator\
    \ console. Using a\n   virtual card reader, a Network user can transmit a stream\
    \ of card\n   images comprising one or more batch jobs, complete with job control\n\
    \   language (\"JCL\"), to the batch server host. The NETRJS server will\n   cause\
    \ these jobs to be spooled into the batch system to be executed\n   according\
    \ to their priority.  NETRJS will automatically return the\n   print and/or punch\
    \ output images which are created by these jobs to\n   the virtual printer and/or\
    \ card punch at the VRBT from which the job\n   was submitted. The batch user\
    \ can wait for his output, or he can\n   signoff and signon again later to receive\
    \ it.\n   To initiate  a NETRJS session, the user process must execute a\n   standard\
    \ ICP to a fixed socket at the server.  The result is to\n   establish a full-duplex\
    \ Telnet connection for the virtual remote\n   operator console, allowing the\
    \ VRBT to signon to RJS.  The virtual\n   remote operator console can then be\
    \ used to issue commands to NETRJS\n   and to receive status, confirmation, and\
    \ error messages from the\n"
- title: Braden                                                          [page 1]
  contents:
  - "Braden                                                          [page 1]\f"
- title: NETRJS Protocol
  contents:
  - "NETRJS Protocol\n   server.  The most important remote operator commands are\
    \ summarized\n   in Appendix D.\n   Different VRBT's are distinguished by 8-character\
    \ terminal id's,\n   which are assigned by the server site to individual batch\
    \ users or\n   user groups.\n"
- title: B.  Connections and Protocols
  contents:
  - "B.  Connections and Protocols\n   The protocol uses up to five connections between\
    \ the user and server\n   processes.  The operator console uses a a full-duplex\
    \ Telnet\n   connection. The data transfer streams for the virtual card reader,\n\
    \   printer, and punch each use a separate simplex connection under a\n   data\
    \ transfer protocol defined in Appendix A. This document will use\n   the term\
    \ \"channel\" for one of these simplex data transfer connections\n   and will\
    \ designate a connection \"input\" or \"output\" with reference to\n   the server.\n\
    \   A particular data transfer channel needs to be open only while it is\n   in\
    \ use, and different channels may be used sequentially or\n   simultaneously.\
    \ CCN's NETRJS server will support simultaneous\n   operation of a virtual card\
    \ reader, a virtual printer, and a virtual\n   punch (in addition to the operator\
    \ console) on the same VRBT process.\n   The NETRJS protocol could easily be extended\
    \ to any number of\n   simultaneously-operating virtual card readers, printers,\
    \ and punches.\n   The NETRJS server takes a passive role in opening the data\
    \ channels:\n   the server only \"listens\" for an RFC from the user process.\
    \ NETRJS is\n   defined with an 8-bit byte size on all data channels.\n   Some\
    \ implementations of NETRJS user processes are daemons, operating\n   as background\
    \ processes to submit jobs from a list of user requests;\n   other implementations\
    \ are interactive processes executed directly\n   under terminal control by remote\
    \ users. In the latter case, the VRBT\n   process generally multiplexes the user\
    \ terminal between NETRJS, i.e.,\n   acting as the remote operator console, and\
    \ entering local commands to\n   control the VRBT. Local VRBT commands allow selection\
    \ of the files\n   containing job streams to be sent to the server as well as\
    \ files to\n   receive job output from the server.  Other local commands would\
    \ cause\n   the VRBT to open data transfer channels to the NETRJS server and to\n\
    \   close these channels to free buffer space or abort transmission.\n   The user\
    \ process has a choice of three ICP sockets, to select the\n   character set of\
    \ the VRBT -- ASCII-68, ASCII-63, or EBCDIC. The\n   server will make the corresponding\
    \ translation of the data in the\n   card reader and printer channels. (In the\
    \ CCN implementation of\n   NETRJS, an EBCDIC VRBT will transmit and receive,\
    \ without\n"
- title: Braden                                                          [page 2]
  contents:
  - "Braden                                                          [page 2]\f"
- title: NETRJS Protocol
  contents:
  - "NETRJS Protocol\n   translation, \"transparent\" streams of 8-bit bytes, since\
    \ CCN is an\n   EBCDIC installation). The punch stream will always be transparent,\n\
    \   outputting \"binary decks\"  of 80-byte records untranslated. The\n   operator\
    \ console connections always use Network ASCII, as defined by\n   the Telnet protocol.\n\
    \   The NETRJS protocol provides data compression, replacing repeated\n   blanks\
    \ or other characters by repeat counts.  However, when the\n   terminal id is\
    \ assigned, a particular network VRBT may be specified\n   to use no data compression.\
    \  In this case, NETRJS will simply\n   truncate trailing blanks and send records\
    \ in a simple \"op\n   code-length-data\" form, called \"truncated format\" (see\
    \ Appendix A).\n"
- title: C.  Starting and Terminating a Session
  contents:
  - "C.  Starting and Terminating a Session\n   The remote user establishes a connection\
    \ to the NETRJS server by\n   executing an ICP to the contact socket 71 (decimal)\
    \ for EBCDIC,\n   socket 73 (decimal) for ASCII-68, or to socket 75 (decimal)\
    \ for\n   ASCII-63. A successful ICP results in a pair of connections which are\n\
    \   in fact the NETRJS operator console connections. NETRJS will send a\n   READY\
    \ message over the operator output connection.\n   The user (process) must now\
    \ enter a valid NETRJS signon command\n   (\"SIGNON terminal-id\") through the\
    \ virtual remote operator console.\n   RJS will normally acknowledge signon with\
    \ a console message; however,\n   if there is no available NETRJS server port,\
    \ NETRJS will indicate\n   refusal by closing both operator connections.  If the\
    \ user fails to\n   enter a valid signon within 3 minutes, NETRJS will close the\
    \ operator\n   connections. If the VRBT attempts to open data transfer channels\n\
    \   before the signon command is accepted, the data transfer channels\n   will\
    \ be refused  with an error message to the VRBT operator console.\n   Suppose\
    \ that S is the even number sent in the ICP; then the NETRJS\n   connections have\
    \ sockets at the server with fixed relation to S, as\n   shown in the following\
    \ table:\n   Channel                          Server Socket     User Socket\n\
    \   Remote Operator Console Input         S            U + 3 Telnet\n   Remote\
    \ Operator Console Output        S + 1        U + 2 Telnet\n   Data Transfer -\
    \ Card Reader #1        S + 2        any odd number\n   Data Transfer - Printer\
    \ #1            S + 3        any even number\n   Data Transfer - Punch #1    \
    \          S + 5        any even number\n   Once the VRBT has issued a valid signon,\
    \ it can open data transfer\n   channels and initiate input and output operations\
    \ as explained in the\n   following sections.  To terminate the session, the VRBT\
    \ may close all\n"
- title: Braden                                                          [page 3]
  contents:
  - "Braden                                                          [page 3]\f"
- title: NETRJS Protocol
  contents:
  - "NETRJS Protocol\n   connections.  Alternatively, it may enter a SIGNOFF command\
    \ through\n   the virtual remote operator console.  Receiving a SIGNOFF, NETRJS\n\
    \   will wait until the current job output streams are complete and then\n   itself\
    \ terminate the session by closing all connections.\n"
- title: D.  Input Operations
  contents:
  - "D.  Input Operations\n   A job stream for submission to the NETRJS server is\
    \ a series of\n   logical records, each of which is a card image of at most 80\n\
    \   characters. The user can submit a \"stack\" of successive jobs through\n \
    \  the card reader channel with no end-of-job indication between jobs;\n   NETRJS\
    \ is able to parse the JCL sufficiently to recognize the\n   beginning of each\
    \ job.\n   To submit a batch job or stack of jobs for execution, the user\n  \
    \ process must first open the card reader channel by issuing an Init\n   for foreign\
    \ socket S+2 and the appropriate local socket. NETRJS,\n   which is listening\
    \ on socket S+2, will return an RTS command to open\n   the channel. When the\
    \ channel is open, the user can begin sending his\n   job stream using the protocol\
    \ defined in Apendix A.  For each job\n   successfully spooled, NETRJS will send\
    \ a confirming message to the\n   remote operator console.\n   At the end of the\
    \ job stack, the user process must send an\n   End-of-Data transaction to initiate\
    \ processing of the last job.\n   NETRJS will then close the channel (to avoid\
    \ holding buffer space\n   unnecessarily).  At any time during the session, the\
    \ user process can\n   re-open the card reader channel and transmit another job\
    \ stack.  It\n   can also terminate the session and signon later to get the output.\n\
    \   If the user process leaves the channel open for 5 minutes without\n   sending\
    \ any bits, the server will abort (close) the channel. The user\n   process can\
    \ abort the card reader channel at any time by closing the\n   channel;  NETRJS\
    \ will then discard the last partially spooled job.\n   If NETRJS finds an error\
    \ (e.g., transaction sequence number error or\n   a dropped bit), it will abort\
    \ the channel by closing the channel\n   prematurely, and also inform the user\
    \ process that the job was\n   discarded (thus solving the race condition between\
    \ End-of-Data and\n   aborting).  The user process should retransmit only those\
    \ jobs in the\n   stack that have not been completely spooled.\n   If the user's\
    \ process, NCP, or host, or the Network itself fails\n   during input, RJS will\
    \ discard the job being transmitted.  A message\n   informing the user that this\
    \ job was discarded will be generated and\n   sent to him the next time he signs\
    \ on.  On the other hand, those jobs\n   whose receipt have been acknowledged\
    \ on the operator's console will\n   not be affected by the failure, but will\
    \ be executed by the server.\n"
- title: Braden                                                          [page 4]
  contents:
  - "Braden                                                          [page 4]\f"
- title: NETRJS Protocol
  contents:
  - 'NETRJS Protocol

    '
- title: E.  Output Operations
  contents:
  - "E.  Output Operations\n   The VRBT may wait to set up a virtual printer or punch\
    \ and open its\n   channel until a STATUS message from NETRJS indicates output\
    \ is ready;\n   or it may leave the output channel(s) open during the entire session,\n\
    \   ready to receive output whenever it becomes available.  The VRBT can\n   also\
    \ control which one of several available jobs is to be returned by\n   entering\
    \ appropriate operator commands.\n   To be prepared to receive printer (or punch)\
    \ output from its jobs,\n   the VRBT issues an Init for foreign socket S+3 or\
    \ S+5 for printer or\n   punch output, respectively. NETRJS is listening on these\
    \ sockets and\n   should immediately return an STR.  However, it is possible that\n\
    \   because of a buffer shortage, NETRJS will refuse the connection by\n   returning\
    \ a CLS; in this case, try again later.\n   When NETRJS has job output for a particular\
    \ virtual terminal and a\n   corresponding open output channel, it will send the\
    \ output as a\n   series of logical records using the protocol in Appendix A.\
    \  The\n   first record will consist of the job name (8 characters) followed by\n\
    \   a comma and then the ID string from the JOB card, if any.  In the\n   printer\
    \ stream, the first column of each record after the first will\n   be an ASA carriage\
    \ control character (see Appendix C). A virtual\n   printer in NETRJS has 254\
    \ columns, exclusive of carriage control;\n   NETRJS will send up to 255 characters\
    \ of a logical record it finds in\n   a SYSOUT data set.  If the user wishes to\
    \ reject or fold records\n   longer than some smaller record size, he can do so\
    \ in his VRBT\n   process.\n   NETRJS will send an End-of-Data transaction and\
    \ then close an output\n   channel at the end of the output for each complete\
    \ batch job; the\n   remote site must then send a new RFC to start output for\
    \ another job.\n   This gives the remote site a chance to allocate a new file\
    \ for each\n   job without breaking the output within a job.\n   If the batch\
    \ user wants to cancel (or backspace or defer) the output\n   of a particular\
    \ job, he can enter appropriate NETRJS commands on the\n   operator input channel\
    \ (see Appendix D).\n   If NETRJS encounters a permanent I/O error in reading\
    \ the disk data\n   set, it will notify the user via his console, skip forward\
    \ to the\n   next set of system messages or SYSOUT data set in the same job, and\n\
    \   continue. If the user process stops accepting bits for 5 minutes, the\n  \
    \ server will abort the channel. In any case, the user will receive\n   notification\
    \ of termination of output data transfer for each job via\n   a remote console\
    \ message.\n"
- title: Braden                                                          [page 5]
  contents:
  - "Braden                                                          [page 5]\f"
- title: NETRJS Protocol
  contents:
  - "NETRJS Protocol\n   If the user detects an error in the stream, he can issue\
    \ a Backspace\n   (BSP) command from his console to repeat the last \"page\" of\
    \ output,\n   or a Restart (RST) command to repeat from the last SYSOUT data set\
    \ or\n   the beginning of the job, or he can abort the channel by closing his\n\
    \   socket.  If he aborts the channel, NETRJS will simulate a Backspace\n   command,\
    \ and when the user re-opens the channel the job will begin\n   transmission again\
    \ from an earlier point in the same data set.  This\n   is true even if the user\
    \ terminates the current session first and\n   reopens the channnel in a later\
    \ session; RJS saves the state of every\n   incomplete output stream.  However,\
    \ before re-opening the channel he\n   can defer this job for later output, restart\
    \ it at the beginning, or\n   cancel its output (see Appendix D).  Note that aborting\
    \ the channel\n   is only effective if NETRJS has not yet sent the End-of-Data\n\
    \   transaction.\n   If the user's process, NCP, or host or the Network itself\
    \ fails\n   during an output operation, NETRJS will act as if the channel had\n\
    \   been aborted and the user signed off. NETRJS will discard the output\n   of\
    \ a job only after receiving the RFNM from the last data transfer\n   message\
    \ (containing an End-of-Data).  In no case should a NETRJS user\n   lose output\
    \ from a batch job.\n"
- title: Braden                                                          [page 6]
  contents:
  - "Braden                                                          [page 6]\f"
- title: NETRJS Protocol
  contents:
  - "NETRJS Protocol\n                               APPENDIX A\n                \
    \    Data Transfer Protocol in NETRJS\n   1.  Introduction\n      The records\
    \ in the data transfer channels (for virtual card\n      reader, printer, and\
    \ punch) are generally grouped into\n      transactions preceded by headers. \
    \ The transaction header includes\n      a sequence number and the length of the\
    \ transaction.  Network byte\n      size must be 8 bits in these data streams.\n\
    \      A transaction is the unit of buffering within the server software,\n  \
    \    and is limited to 880 8-bit bytes. Transactions can be as short as\n    \
    \  one record; however, those sites which are concerned with\n      efficiency\
    \ should send transactions as close as possible to the\n      880 byte limit.\n\
    \      There is no necessary connection between physical message\n      boundaries\
    \ and transactions (\"logical messages\"); the NCP can\n      break a transaction\
    \ arbitrarily into physical messages. The CCN\n      server starts each transaction\
    \ at the beginning of a new physical\n      message, but this is not a requirement\
    \ of the protocol.\n      Each logical record within a transaction begins with\
    \ an \"op code\"\n      byte which contains the channel identification, so its\
    \ value is\n      unique to each channel but constant within a channel.  This\
    \ choice\n      provides the receiver with a convenient way to verify\n      bit-synchronization,\
    \ and it also allows an extension in the future\n      to true \"multi-leaving\"\
    \ (i.e., multiplexing all channels within\n      one connection in each direction).\n\
    \      The only provisions for transmission error detection in the\n      current\
    \ NETRJS protocol are (1) the \"op code\" byte to verify bit\n      synchronization\
    \ and (2) the transaction sequence number. Under the\n      NETRJS protocol, a\
    \ data transfer error must abort the entire\n      transmission; there is no provision\
    \ for restart.\n"
- title: Braden                                                          [page 7]
  contents:
  - "Braden                                                          [page 7]\f"
- title: NETRJS Protocol
  contents:
  - "NETRJS Protocol\n   2.  Meta-Notation\n      The following description of the\
    \ NETRJS data transfer protocol\n      uses a formal notation derived from that\
    \ proposed in RFC 31 by\n      Bobrow and Sutherland. The notation consists of\
    \ a series of\n      productions for bit string variables. Each variable name\
    \ which\n      represents a fixed length field is followed by the length in bits\n\
    \      (e.g., SEQNUMB(16)).  Numbers enclosed in quotes are decimal,\n      unless\
    \ qualified by a leading X meaning hex.  Since each hex digit\n      is 4 bits,\
    \ the length is not shown explicitly in hex numbers.  For\n      example, '255'(8)\
    \ and X'FF' both represent a string of 8 one bits.\n      The meta-syntactic operators\
    \ are:\n         |     :alternative string\n         [ ]   :optional string\n\
    \         ( )   :grouping\n         +     :catenation of bit strings\n      The\
    \ numerical value of a bit string (interpreted as an integer) is\n      symbolized\
    \ by a lower case identifier preceding the string\n      expression and separated\
    \ by a colon.  For example, in\n      \"i:FIELD(8)\", i symbolizes the numeric\
    \ value of the 8 bit string\n      FIELD.\n      Finally, we use Bobrow and Sutherland's\
    \ symbolism for iteration of\n      a sub-string:  (STRING-EXPRESSION = n); denotes\
    \ n occurrences of\n      STRING-EXPRESSION, implicitly catenated together.  Here\
    \ any n\n      greater or equal to 0 is assumed unless n is explicitly\n     \
    \ restricted.\n   3.  Protocol Definition\n      STREAM ::= (TRANSACTION = n)\
    \ + [END-OF-DATA]\n         That is, STREAM, the entire sequence of data on a\
    \ particular\n         open channel, is a sequence of n TRANSACTIONS followed\
    \ by an\n         END-OF-DATA marker (omitted if the sender aborts the channel).\n\
    \      TRANSACTION ::= THEAD(72) + (RECORD = r) + ('0'(1) = f)\n         That\
    \ is, a transaction consists of a 72 bit header, r records,\n         and f filler\
    \ bits; it may not exceed 880*8 bits.\n"
- title: Braden                                                          [page 8]
  contents:
  - "Braden                                                          [page 8]\f"
- title: NETRJS Protocol
  contents:
  - "NETRJS Protocol\n      THEAD ::= X'FF'+f:FILLER(8)+SEQNUMB(16)+LENGTH(32)+X'00'\n\
    \         Transactions are to be consecutively numbered in the SEQNUMB\n     \
    \    field, starting with 0 in the first transaction after the\n         channel\
    \ is (re-) opened.  The 32 bit LENGTH field gives the\n         total length in\
    \ bits of the r RECORD's which follow.  For\n         convenience, the using site\
    \ may add f additional filler bits at\n         the end of the transaction to\
    \ reach a convenient word boundary\n         on his machine; the value f is transmitted\
    \ in the FILLER field\n         of THEAD.\n      RECORD ::= COMPRESSED | TRUNCATED\n\
    \         RJS will accept intermixed RECORD's which are COMPRESSED or\n      \
    \   TRUNCATED in an input stream.  RJS will send one or the other\n         format\
    \ in the printer and punch streams to a given VRBT; the\n         choice is determined\
    \ for each terminal id.\n      COMPRESSED ::= '2'(2) + DEVID(6) + (STRING = p)\
    \ + '0'(8)\n      STRING     ::= ('6'(3) + i:DUPCOUNT(5))  |\n         This form\
    \ represents a string of i consecutive blanks\n                     ('7'(3) +\
    \ i:DUPCOUNT(5) + TEXTBYTE(8)) |\n         This form represents string of i consecutive\
    \ duplicates of\n         TEXTBYTE.\n                     ('2'(2) + j:LENGTH(6)\
    \ + (TEXTBYTE(8) = j))\n         This form represents a string of j characters.\n\
    \      TRUNCATED  ::= '3'(2) + DEVID(6) + n:COUNT(8) + (TEXTBYTE(8)=n)\n     \
    \ DEVID(6)   ::= DEVNO(3) + t:DEVTYPE(3)\n         DEVID identifies a particular\
    \ virtual device, i.e., it\n         identifies a channel.  DEVTYPE specifies\
    \ the type of device, as\n         follows:\n            t = 1:  Output to remote\
    \ operator console\n                2:  Input from remote operator console\n \
    \               3:  Input from card reader\n                4:  Output to printer\n\
    \                5:  Output to card punch\n              6,7:  Unused\n"
- title: Braden                                                          [page 9]
  contents:
  - "Braden                                                          [page 9]\f"
- title: NETRJS Protocol
  contents:
  - "NETRJS Protocol\n         DEVNO identifies the particular device of type t at\
    \ this remote\n         site; at present only DEVNO = 0 is possible.\n      END-OF-DATA\
    \ ::=X'FE'\n         Signals end of job (output) or job stack (input).\n"
- title: Braden                                                         [page 10]
  contents:
  - "Braden                                                         [page 10]\f"
- title: NETRJS Protocol
  contents:
  - "NETRJS Protocol\n                               APPENDIX B\n                \
    \    Telnet for VRBT Operator Console\n   The remote operator console connections\
    \ use the ASCII Telnet\n   protocol. Specifically:\n      1.  The following one-to-one\
    \ character mappings are used for the\n      three EBCDIC graphics not in ASCII:\n\
    \         ASCII in Telnet     |  NETRJS\n         broken vertical bar |  solid\
    \ vertical bar\n         tilde               |  not sign\n         back slash\
    \          |  cent sign\n      2.  Telnet controls are ignored.\n      3.  An\
    \ operator console input line which exceeds 133 characters\n      (exclusive of\
    \ CR LF) is truncated by NETRJS.\n      4.  NETRJS accepts BS (Control-H) to delete\
    \ a character and CAN\n      (Control-X) to delete the current line.  The sequence\
    \ CR LF\n      terminates each input and output line.  HT (Control-I) is\n   \
    \   translated to a single space. An ETX (Control-C) terminates\n      (aborts)\
    \ the session.  All other ASCII control characters are\n      ignored.\n     \
    \ 5.  NETRJS translates the six ASCII graphics with no equivalent in\n      EBCDIC\
    \ into the character question mark (\"?\") on input.\n"
- title: Braden                                                         [page 11]
  contents:
  - "Braden                                                         [page 11]\f"
- title: NETRJS Protocol
  contents:
  - "NETRJS Protocol\n                               APPENDIX C\n                \
    \            Carriage Control\n   The carriage control characters sent in a printer\
    \ channel by NETRJS\n   conform to IBM's extended USASI code, defined by the following\
    \ table:\n      CODE       ACTION BEFORE WRITING RECORD\n      Blank      Space\
    \ one line before printing\n      0          Space two lines before printing\n\
    \      -          Space three lines before printing\n      +          Suppress\
    \ space before printing\n      1          Skip to channel 1\n      2         \
    \ Skip to channel 2\n      3          Skip to channel 3\n      4          Skip\
    \ to channel 4\n      5          Skip to channel 5\n      6          Skip to channel\
    \ 6\n      7          Skip to channel 7\n      8          Skip to channel 8\n\
    \      9          Skip to channel 9\n      A          Skip to channel 10\n   \
    \   B          Skip to channel 11\n      C          Skip to channel 12\n"
- title: Braden                                                         [page 12]
  contents:
  - "Braden                                                         [page 12]\f"
- title: NETRJS Protocol
  contents:
  - "NETRJS Protocol\n                               APPENDIX D\n                \
    \      Network/RJS Command Summary\n   This section presents an overview of the\
    \ RJS Operator Commands, for\n   the complete form and parameter specifications\
    \ please see references\n   2 and 3.\n   Terminal Control and Information Commands\n\
    \      SIGNON       First command of a session; identifies VRBT by giving\n  \
    \                 its terminal id.\n      SIGNOFF      Last command of a session;\
    \ RJS waits for any data\n                   transfer in progress to complete\
    \ and then closes all\n                   connections.\n      STATUS       Outputs\
    \ on the remote operator console a complete\n                   list, or a summary,\
    \ of all jobs in the system for\n                   this VRBT, with an indication\
    \ of their processing\n                   status in the batch host.\n      ALERT\
    \        Outputs on the remote operator console an \"Alert\"\n               \
    \    message, if any, from the computer operator.  The\n                   Alert\
    \ message is also automatically sent when the\n                   user does a\
    \ SIGNON, or whenever the message changes.\n      MSG          Sends a message\
    \ to the computer operator or to any\n                   other RJS terminal (real\
    \ or virtual).  A message from\n                   the computer operator or another\
    \ RJS terminal will\n                   automatically appear on the remote operator\
    \ console.\n   Job Control and Routing Commands\n      Under CCN's job management\
    \ system, the default destination for\n      output is the input source.  Thus,\
    \ a job submitted under a given\n      VRBT will be returned to that VRBT (i.e.,\
    \ the same terminal id),\n      unless the user's JCL overrides the default destination.\n\
    \      RJS places print and punch output destined for a particular remote\n  \
    \    terminal into either an Active Queue or a Deferred Queue.  When\n      the\
    \ user opens his print or punch output channel, RJS immediately\n      starts\
    \ sending job output from the Active Queue, and continues\n      until this queue\
    \ is empty.  Job output in the Deferred Queue, on\n      the other hand, must\
    \ be called for by job name, (via a RESET\n      command from the remote operator)\
    \  before RJS will send it.  The\n      Active/Deferred choice for output from\
    \ a job is determined by the\n"
- title: Braden                                                         [page 13]
  contents:
  - "Braden                                                         [page 13]\f"
- title: NETRJS Protocol
  contents:
  - "NETRJS Protocol\n      deferral status of the VRBT when the job is entered; the\
    \ deferral\n      status, which is set to the Active option when the user signs\
    \ on,\n      may be changed by the SET command.\n      SET           Allows the\
    \ remote user to change certain properties\n                    of his VRBT for\
    \ the duration of the current session;\n                    (a)  May change the\
    \ default output destination to be\n                    another (real or virtual)\
    \ RJS terminal or the\n                    central facility.\n               \
    \     (b)  May change the deferral status of the VRBT.\n      DEFER         Moves\
    \ the print and punch output for a specified job\n                    or set of\
    \ jobs from the Active Queue to the Deferred\n                    Queue. If the\
    \ job's output is in the process of\n                    being transmitted over\
    \ a channel, RJS aborts the\n                    channel and saves the current\
    \ output location before\n                    moving the job to the Deferred Queue.\
    \  A subsequent\n                    RESET command will return it to the Active\
    \ Queue\n                    with an implied Backspace (BSP).\n      RESET   \
    \      Moves specified job(s) from Deferred to Active Queue\n                \
    \    so they may be sent to user.  A specific list of job\n                  \
    \  names or all jobs can be moved with one RESET\n                    command.\n\
    \      ROUTE         Re-routes output of specified jobs (or all jobs)\n      \
    \              waiting in the Active and Deferred Queues for the\n           \
    \         VRBT.  The new destination may be any other RJS\n                  \
    \  terminal or the central facility.\n      ABORT         Cancels a job which\
    \ was successfully submitted and\n                    awaiting execution or is\
    \ currently executing.\n   Output Stream Control Commands\n      BSP (BACKSPACE)\
    \  \"Backspaces\" output stream within current sysout\n                    data\
    \ set.  Actual amount backspaced depends upon\n                    sysout blocking\
    \ but is roughly equivalent to a page\n                    on the line printer.\n\
    \      CAN (CANCEL)  (a)  On an output channel, CAN causes the rest of\n     \
    \               the output in the sysout data set currently being\n          \
    \          transmitted to be omitted. Alternatively, may omit\n              \
    \      the rest of the sysout data sets for the job\n                    currently\
    \ being transmitted; however, the remaining\n"
- title: Braden                                                         [page 14]
  contents:
  - "Braden                                                         [page 14]\f"
- title: NETRJS Protocol
  contents:
  - "NETRJS Protocol\n                    system and accounting messages will be sent.\n\
    \                    (b)  On an input channel, CAN causes RJS to ignore\n    \
    \                the job currently being read.  However, the channel\n       \
    \             is not aborted as a result, and RJS will continue\n            \
    \        reading in jobs on the channel.\n                    (c)  CAN can delete\
    \ all sysout data sets for\n                    specified job(s) waiting in Active\
    \ or Deferred\n                    Queue.\n      RST (RESTART) (a)  Restarts a\
    \ specified output stream at the\n                    beginning of the current\
    \ sysout data set or,\n                    optionally, at the beginning of the\
    \ job.\n                    (b)  Marks as restarted specified job(s) whose\n \
    \                   transmission was earlier interrupted by system\n         \
    \           failure or user action (e.g., DEFER command or\n                 \
    \   aborting the channel).  When RJS transmits these\n                    jobs\
    \ again it will start at the beginning of the\n                    partially transmitted\
    \ sysout data set or,\n                    optionally, at the beginning of the\
    \ job. This\n                    function may be applied to jobs in either the\
    \ Active\n                    or the Deferred Queue; however, if the job was in\n\
    \                    the Deferred Queue then RST also moves it to the\n      \
    \              Active Queue.  If the job was never transmitted, RST\n        \
    \            has no effect other than this queue movement.\n      REPEAT     \
    \   Sends additional copies of the output of specified\n                    jobs.\n\
    \      EAM           Echoes the card reader stream back in the printer\n     \
    \               and/or punch stream.\n"
- title: Braden                                                         [page 15]
  contents:
  - "Braden                                                         [page 15]\f"
- title: NETRJS Protocol
  contents:
  - "NETRJS Protocol\n                               APPENDIX E\n                \
    \        NETRJS TERMINAL OPTIONS\n   When a new NETRJS virtual terminal is defined,\
    \ certain options are\n   available; these options are listed below.\n      1.\
    \ Truncated/Compressed Data Format\n         A VRBT may use either the truncated\
    \ data format (default) or\n         the compressed format for printer and punch\
    \ output.  See\n         Reference 9 for discussion of the virtues of compression.\n\
    \      2. Automatic Coldstart Job Resubmission\n         If \"R\" (Restart) is\
    \ specified in the accounting field on the\n         JOB card and if this option\
    \ is chosen, RJS will automatically\n         resubmit the job from the beginning\
    \ if the server operating\n         system should be \"coldstarted\" before all\
    \ output from the job\n         is returned.  Otherwise, the job will be lost\
    \ and must be\n         resubmitted from the remote terminal in case of a coldstart.\n\
    \      3. Automatic Output RESTART\n         With this option, transmission of\
    \ printer output which is\n         interrupted by a broken connection always\
    \ starts over at the\n         beginning.  Without this option, the output is\
    \ backspaced\n         approximately one page when restarted, unless the user\
    \ forces\n         the output to start over from the beginning with a RESTART\n\
    \         command when the printer channel is re-opened and before\n         printing\
    \ begins.\n      4. Password Protection\n         This option allows a password\
    \ to be supplied when a terminal is\n         signed on, preventing unauthorized\
    \ use of the terminal ID.\n      5. Suppression of Punch Separator and Large Letters.\n\
    \         This option suppresses both separator cards which RJS normally\n   \
    \      puts in front of each punched output deck, and separator pages\n      \
    \   on printed output containing the job name in large block\n         letters.\
    \  These separators are an operational aid when the\n         ouptut is directed\
    \ to a real printer or punch, but generally\n         undesirable for an ARPA\
    \ user who is saving the output in a file\n         for on-line examination.\n"
- title: Braden                                                         [page 16]
  contents:
  - "Braden                                                         [page 16]\f"
- title: NETRJS Protocol
  contents:
  - "NETRJS Protocol\n                               APPENDIX F\n                \
    \  Character Translation by CCN Server\n   A VRBT declares its character set for\
    \ job input and output by the\n   initial connection socket it chooses. A VRBT\
    \ can have the ASCII-68,\n   the ASCII-63, or the EBCDIC character set.  The ASCII-63\
    \ character\n   mapping was added to NETRJS at the request of users whose terminals\n\
    \   are equipped with keyboards like those found on the model 33\n   Teletype.\n\
    \   Since CCN operates an EBCDIC machine, its NETRJS server translates\n   ASCII\
    \ input to EBCDIC and translates printer output back to ASCII.\n   The details\
    \ of this translation are described in the following.\n   For ASCII-68, the following\
    \ rules are used:\n      1.  There is one-to-one mapping between the three ASCII\
    \ characters\n          broken vertical bar, tilde, and back slash, which are\
    \ not in\n          EBCDIC, and the three EBCDIC characters vertical bar, not\n\
    \          sign, and cent sign (respectively), which are not in ASCII.\n     \
    \ 2.  The other six ASCII graphics not in EBCDIC are translated on\n         \
    \ input to unused EBCDIC codes, shown in the table below.\n      3.  The ASCII\
    \ control DC4 is mapped to and from the EBCDIC control\n          TM.\n      4.\
    \  The other EBCDIC characters not in ASCII are mapped in the\n          printer\
    \ stream into the ASCII question mark.\n   For ASCII-63, the same rules are used\
    \ except that the ASCII-63 codes\n   X'60' and X'7B' - X'7E' are mapped as in\
    \ the following table.\n      EBCDIC              | ASCII-68 VRBT       | ASCII-63\
    \ VRBT\n      vertical bar  X'4F' | vertical bar  X'7C' | open bracket  X'5B'\n\
    \      not sign      X'5F' | tilde         X'7E' | close bracket X'5D'\n     \
    \ cent sign     X'4A' | back slash    X'5C' | back slash    X'5C'\n      underscore\
    \    X'6D' | underscore    X'5F' | left arrow    X'5F'\n      .             X'71'\
    \ | up arrow      X'5E' | up arrow      X'5E'\n      open bracket  X'AD' | open\
    \ bracket  X'5B' | .             X'7C'\n      close bracket X'BD' | close bracket\
    \ X'5D' | .             X'7E'\n      .             X'8B' | open brace    X'7B'\
    \ | .             X'7B'\n      .             X'9B' | close brace   X'7D' | . \
    \            X'7D'\n      .             X'79' | accent        X'60' | .      \
    \       X'60'\n"
- title: Braden                                                         [page 17]
  contents:
  - "Braden                                                         [page 17]\f"
- title: NETRJS Protocol
  contents:
  - "NETRJS Protocol\n                               APPENDIX G\n                \
    \               REFERENCES\n   1. \"Interim NETRJS Specifications\", R. T. Braden.\
    \  RFC #189:  NIC\n   #7133, July 15, 1971.\n      This was the basic system programmer's\
    \ definition document.  The\n      proposed changes mentioned on the first page\
    \ of RFC #189 were\n      never implemented, since the DTP then in vogue became\
    \ obsolete.\n   2. \"NETRJS Remote Operator Commands\", R. T. Braden.  NIC #7182,\n\
    \   August 9, 1971\n      This document together with References 3 and 8 define\
    \ the remote\n      operator (i.e. user) command language for NETRJS, and form\
    \ the\n      basic user documentation for NETRJS at CCN.\n   3. \"Implementation\
    \ of a Remote Job Service\", V. Martin and T. W.\n   Springer.  NIC #7183, July,\
    \ 1971.\n   4. \"Remote Job Entry to CCN via UCLA Sigma 7; A scenario\", UCLA/CCN.\n\
    \   NIC #7748, November 15, 1971.\n      This document described the first NETRJS\
    \ user implementation\n      available on a server host.  This program is no longer\
    \ of general\n      interest.\n   5. \"Using Network Remote Job Entry\", E. F.\
    \ Harslem.  RFC #307:  NIC\n   #9258, February 24, 1972.\n      This document\
    \ is out of date, but describes generally the Tenex\n      NETRJS user process\
    \ \"RJS\".\n   6. \"EBCDIC/ASCII Mapping for Network RJS\", R. T. Braden.  RFC\
    \ #338:\n   NIC #9931, May 17, 1972.\n      The ASCII-63 mapping described here\
    \ is no longer correct, but\n      CCN's standard ASCII-68/EBCDIC mapping is described\
    \ correctly.\n      This information is accurately described in Appendix F of\
    \ the\n      current document.\n"
- title: Braden                                                         [page 18]
  contents:
  - "Braden                                                         [page 18]\f"
- title: NETRJS Protocol
  contents:
  - "NETRJS Protocol\n   7. \"NETRJT--Remote Job Service Protocol for TIP's\", R.\
    \ T. Braden. RFC\n   #283: NIC 38165, December 20, 1971.\n      This was an attempt\
    \ to define an rje protocol to handle TIPs.\n      Although NETRJT was never implemented,\
    \ many of its features are\n      incorporated in the current Network standard\
    \ RJE protocol.\n   8. \"CCN NETRJS Server Messages to Remote User\", R. T. Braden.\
    \  NIC\n   #20268, November 26, 1973.\n   9. \"FTP Data Compression\", R. T. Braden.\
    \  RFC #468:  NIC #14742,\n   March 8, 1973.\n   10. \"Update on NETRJS\", R.\
    \ T. Braden.  RFC #599: NIC #20854, December\n   13, 1973.\n      This updated\
    \ reference 1, the current document combines the two.\n   11. \"Network Remote\
    \ Job Entry -- NETRJS\", G. Hicks.  RFC #325: NIC\n   9632, April 6, 1972.\n \
    \  12. \"CCNRJS: Remote Job Entry between Tenex and UCLA-CCN\", D.\n   Crocker.\
    \  NUTS Note 22, [ISI]<DOCUMENTATION>CCNRJS.DOC, March 5,\n   1975.\n   13. \"\
    Remote Job Service at UCSB\", M. Krilanovich.  RFC #477: NIC\n   #14992, May 23,\
    \ 1973.\n"
