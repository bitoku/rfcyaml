Abstract This memo defines a portion of the Management Information Base (MIB) for use with network management protocols in TCP/IP based internets.
In particular, it describes a representation of the SNMP parties defined in [8] as objects defined according to the Internet Standard SMI [1].
These definitions are consistent with the SNMP Security protocols set forth in [9].
the Internet standard Network Management Framework consists of three components.
They are: RFC 1155 which defines the SMI, the mechanisms used for describing and naming objects for the purpose of management.
RFC 1212 defines a more concise description mechanism, which is wholly consistent with the SMI.
RFC 1156 which defines MIB I, the core set of managed objects for the Internet suite of protocols.
RFC 1213, defines MIB II, an evolution of MIB I based on implementation experience and new operational requirements.
RFC 1157 which defines the SNMP, the protocol used for network access to managed objects.
The Framework permits new objects to be defined for the purpose of experimentation and evaluation.
Objects Managed objects are accessed via a virtual information store, termed the Management Information Base or MIB.
Objects in the MIB are defined using the subset of Abstract Syntax Notation One (ASN.1)
[5] defined in the SMI.
In particular, each object has a name, a syntax, and an encoding.
The name is an object identifier, an administratively assigned name, which specifies an object type.
The object type together with an object instance serves to uniquely identify a specific instantiation of the object.
For human convenience, we often use a textual string, termed the OBJECT DESCRIPTOR, to also refer to the object type.
The syntax of an object type defines the abstract data structure corresponding to that object type.
The ASN.1 language is used for this purpose.
However, the SMI [1] purposely restricts the ASN.1 constructs which may be used.
These restrictions are explicitly made for simplicity.
The encoding of an object type is simply how that object type is represented using the object type's syntax.
Implicitly tied to the notion of an object type's syntax and encoding
is how the object type is represented when being transmitted on the network.
The SMI specifies the use of the basic encoding rules of ASN.1 [6], subject to the additional requirements imposed by the SNMP.
Format of Definitions Section 4 contains the specification of all object types contained in this MIB module.
The object types are defined using the conventions defined in the SMI, as amended by the extensions specified in [7].
This MIB contains the definitions for four tables, a number of OBJECT IDENTIFIER assignments, and some conventions for initial use with some of the assignments.
The four tables are the SNMP Party Public database, the SNMP Party Secrets database, the SNMP Access Control database, and the SNMP Views database.
The SNMP Party Public database and the SNMP Party Secrets database are defined as separate tables specifically for the purpose of positioning them in different parts of the MIB tree namespace.
In particular, the SNMP Party Secrets database contains secret information, for which security demands that access to it be limited to parties which use both authentication and privacy.
It is therefore positioned in a separate branch of the MIB tree so as to provide for the easiest means of accommodating the required limitation.
In contrast, the SNMP Party Public database contains public information about SNMP parties.
In particular, it contains the parties' clocks which need to be read able (but not write able) by unauthenticated queries, since an unauthenticated query of a party's clock is the first step of the procedure to re establish clock synchronization (see [9]).
The objects in this MIB are organized into four groups.
All four of the groups are mandatory for those SNMP implementations that realize the security framework and mechanisms defined in [8] and [9].
In all four of the tables in this MIB, the object instances are identified by values which have an underlying syntax of OBJECT IDENTIFIER.
For the Party Public database and the Party Secrets database, the index variable is the party identifier.
For the Access Control database and the Views database, two index variables are defined, both of which have a syntax of OBJECT IDENTIFIER.
(See the INDEX clauses in the MIB definitions below for the specific variables.)
According to RFC 1212 [7], section 4.1.6, the syntax of the object(s) specified in an INDEX clause indicates how to form the instance  identifier.
In particular, for each index object which is object identifier valued, its contribution to the instance identifier is: `
n 1' sub identifiers, where `n' is the number of sub identifiers in the value (the first sub identifier is `n' itself, following this, each sub identifier in the value is copied).
The datatypes, Party, Clock, and TAddress, are used as textual conventions in this document.
These textual conventions have NO effect on either the syntax nor the semantics of any managed object.
Objects defined using these conventions are always encoded by means of the rules that define their primitive type.
Hence, no changes to the SMI or the SNMP are necessary to accommodate these textual conventions which are adopted merely for the convenience of readers.
For noAuth, a party's authentication clock is unused and   its value is undefined.
For md5AuthProtocol, a party's authentication clock is a   relative clock with 1 second granularity.
A textual convention denoting a transport service   address.
For rfc1351Domain, a TAddress is 6 octets long,   the initial 4 octets containing the IP address in   network byte order and the last 2 containing the   UDP port in network byte order.
OCTET STRING   Definitions of Security Protocols partyProtocols
The DES Privacy Protocol OBJECT
The MD5 Authentication Protocol OBJECT
When devices are installed, they need to be configured    with an initial set of SNMP parties.
The configuration    of SNMP parties requires (among other things)
the    assignment of several OBJECT IDENTIFIERs.
Any local    network administration can obtain the delegated    authority necessary to assign its own OBJECT    IDENTIFIERs.
However, to provide for those    administrations who have not obtained the necessary    authority, this document allocates a branch of the    naming tree for use with the following conventions.
a b c d 2 }
partySecretsAuthPrivate    assigned by local administration
partySecretsAuthPrivate    assigned by local administration
partySecretsAuthPrivate    assigned by local administration
partySecretsAuthPrivate    assigned by local administration
(Get, Get Next & Set)
(Get, Get Next & Set)
{ initialPartyId a b c d 6 }
{ initialPartyId a b c d 3 }
Implementation of the objects in this group is mandatory.
"The SNMP Party Public database.
An agent must ensure that there is, at all times, a one to one correspondence between entries in this table and entries in the partySecretsTable.
The creation/deletion of instances in this table via
SNMP Set Requests is not allowed.
Instead, entries in this table are created/deleted as a side effect of the creation/deletion of corresponding entries in the partySecretsTable.
Thus, a SNMP Set Request whose varbinds contain a reference to a non existent instance of a partyTable object, but no reference to the corresponding instance of a partySecretsTable object, will be rejected."
mandatory DESCRIPTION "Locally held non secret information about a particular SNMP party, which is available for access by network management.
Note that this does not include all locally held information about a party.
In particular, it does not include the 'last timestamp' (i.e., the timestamp of the last authentic message received) or the 'nonce' values.
TAddress, partyProxyFor Party, partyAuthProtocol OBJECT IDENTIFIER, partyAuthClock Clock, partyAuthPublic OCTET STRING, partyAuthLifetime INTEGER, partyPrivProtocol OBJECT IDENTIFIER, partyPrivPublic OCTET STRING, partyMaxMessageSize INTEGER, partyStatus INTEGER } partyIdentity
A party identifier uniquely identifying a particular SNMP party."
"Indicates the kind of transport service by which the party receives network management traffic.
An example of a transport domain is 'rfc1351Domain'
"The transport service address by which the party receives network management traffic, formatted according to the corresponding value of partyTDomain.
For rfc1351Domain, partyTAddress is formatted as a 4 octet IP Address concatenated with a 2 octet UDP port number.
"The identity of a second SNMP party or other management entity with which interaction may be necessary to satisfy received management requests.
In this context, the distinguished value { noProxy } signifies that the party responds to received management requests by entirely local mechanisms."
"The authentication protocol by which all messages generated by the party are authenticated as to origin and integrity.
In this context, the value { noAuth } signifies that messages generated by the party are not authenticated."
"The authentication clock which represents the local notion of the current time specific to the party.
This value must not be decremented unless the party's secret information is changed simultaneously, at which time the party's nonce and last timestamp values must also be reset to zero, and the new value of the clock, respectively."
mandatory DESCRIPTION "A publically readable value for the party.
Depending on the party's authentication protocol, this value may be needed to support the party's authentication protocol.
Alternatively, it may be used by a manager during the procedure for altering secret information about a party.
(For example, by altering the value of an instance of this object in the same SNMP Set Request used to update an instance of partyAuthPrivate, a subsequent Get Request can determine if the Set  Request was successful in the event that no response to the Set Request is received, see RFC 1352.)
The length of the value is dependent on the party's authentication protocol.
If not used by the authentication protocol, it is recommended that agents support values of any length up to and including the length of the corresponding partyAuthPrivate object.
partyEntry 7 } partyAuthLifetime OBJECT TYPE SYNTAX
The lifetime (in units of seconds) which represents an administrative upper bound on acceptable delivery delay for protocol messages generated by the party.
"The privacy protocol by which all protocol messages received by the party are protected from disclosure.
In this context, the value { noPriv } signifies that messages received by the party are not protected."
OCTET STRING   for desPrivProtocol: (SIZE (0..16))
mandatory DESCRIPTION "A publically readable value for the party.
Depending on the party's privacy protocol, this value may be needed to support the party's privacy protocol.
Alternatively, it may be used by a manager as a part of its procedure for altering secret information about a party.
(For example, by altering the value of an instance of this object in the same SNMP Set Request used to update an instance of partyPrivPrivate, a subsequent Get Request can determine if the Set Request was successful in the event that no response to the Set Request is received, see RFC 1352.)
The length of the value is dependent on the party's privacy protocol.
If not used by the privacy protocol, it is recommended that agents support values of any length up to and including the length of the corresponding partyPrivPrivate object.
{ partyEntry 10 } partyMaxMessageSize OBJECT
"The maximum length in octets of a SNMP message which this party will accept.
For parties which execute at an agent, the agent initializes this object to the maximum length supported by the agent, and does not let the object be set to any larger value.
For parties which do not execute at the agent, the agent must allow the manager to set this object to any legal value, even if it is larger than the agent can generate."
read only STATUS  mandatory DESCRIPTION
"The status of the locally held information on a particular SNMP party.
The instance of this object for a particular party and the instance of partySecretsStatus for the same party always have the same value.
This object will typically provide unrestricted read only access to the status of parties.
In contrast, partySecretsStatus will typically provide restricted read write access to the status of parties."
"The SNMP Party Secrets database."
mandatory DESCRIPTION "Locally held secret information about a particular SNMP party, which is available for access by network management.
When a SNMP Set Request is used to update the values of instances of objects in this table, it is recommended that the same SNMP Set Request also alter the value of a non secret object instance (e.g., an instance of partyAuthPublic or partyPrivPublic).
This allows a Get Request of that non secret object instance to determine if the Set Request was successful in the event that no response which matches the Set Request is received, see RFC 1352.
A party identifier uniquely identifying a particular SNMP party."
An encoding of the party's private authentication key which may be needed to support the authentication protocol.
Although the value of this variable may be altered by a management operation (e.g., a SNMP Set Request), its value can never be retrieved by a management operation: when read, the value of this variable is the zero length OCTET STRING.
The private authentication key is NOT directly represented by the value of this variable, but rather it is represented according to an encoding.
This encoding is the bitwise exclusive OR of the old key with the new key, i.e., of the old private authentication key (prior to the alteration) with the new private authentication key (after the alteration).
Thus, when processing a received protocol Set operation, the new private authentication key is obtained from the value of this variable as the result of a bitwise exclusive OR of the variable's value and the old private authentication key.
In calculating the exclusive OR, if the old key is shorter than the new key, zero valued padding is appended to the old key.
If no value for the old key exists, a zero length OCTET STRING is used in the calculation.
An encoding of the party's private encryption key which may be needed to support the privacy protocol.
Although the value of this variable may be altered by a management operation (e.g., a SNMP Set Request), its value can never be retrieved by a management operation: when read, the value of this variable is the zero length OCTET STRING.
The private encryption key is NOT directly represented by the value of this variable, but rather it is represented according to an encoding.
This encoding is the bitwise exclusive OR of the old key with the new key, i.e., of the old private encryption key (prior to the alteration) with the new private encryption key (after the alteration).
Thus, when processing a received protocol Set operation, the new private encryption key is obtained from the value of this variable as the result of a bitwise exclusive OR of the variable's value and the old private encryption key.
In calculating the exclusive OR, if the old key is shorter than the new key, zero valued padding is appended to the old key.
If no value for the old key exists, a zero length OCTET STRING is used in the calculation.
"The status of the locally held information on a particular SNMP party.
Setting an instance of this object to the value 'valid(1)' has the effect of ensuring that valid local knowledge exists for the corresponding party.
For valid local knowledge to exist, there must be corresponding instances of each object in this table and in the partyTable.
Thus, the creation of instances in the partyTable (but not in the aclTable or viewTable) occurs as a direct result of the creation of instances in this table.
Setting an instance of this object to the value 'invalid(2)' has the effect of invalidating all local knowledge of the corresponding party, including the invalidating of any/all entries in the partyTable, the partySecretsTable, the aclTable, and the viewTable which reference said party.
It is an implementation specific matter as to whether the agent removes an invalidated entry from the table.
Accordingly, management stations must be prepared to receive from agents tabular information corresponding to entries not currently in use.
Proper interpretation of such entries requires examination of the relevant partySecretsStatus object.
The SNMP Access Privileges Database Group
This group of objects allows the SNMP itself to be used to    configure new SNMP parties, or to manipulate the access    privileges of existing parties.
Implementation of the objects in this group is mandatory.
"The access privileges for a particular requesting SNMP party in accessing a particular target SNMP party.
"The subject SNMP party whose requests for management operations to be performed is constrained by this set of access privileges."
"The access privileges which govern what management operations a particular target party may perform when requested by a particular subject party.
These privileges are specified as a sum of values, where each value specifies a SNMP PDU type by which the subject party may request a permitted operation.
The value for a particular PDU type is computed as 2 raised to the value of the ASN.1 context specific tag for the appropriate SNMP PDU type.
The null set is represented by the value zero.
"The status of the access privileges for a particular requesting SNMP party in accessing a particular target SNMP party.
Setting an instance of this object to the value 'invalid(2)' has the effect of invalidating the corresponding access privileges.
It is an implementation specific matter as to whether the agent removes an invalidated entry from the table.
Accordingly, management stations must be prepared to receive from agents tabular information corresponding to entries not currently in use.
Proper interpretation of such entries requires examination of the relevant aclStatus object.
The MIB View Database Group
This group of objects allows the SNMP itself to be used to    configure new SNMP parties, or to manipulate the MIB    MIB views of existing parties.
Implementation of the objects in this group is mandatory.
"The table contained in the local database which defines local MIB views.
Each SNMP party has a single MIB view which is defined by two collections of view subtrees: the included view subtrees, and the excluded view subtrees.
Every such subtree, both included and excluded, is defined in this table.
To determine if a particular object instance is in a particular SNMP party's MIB view, compare the object instance's Object Identifier with each entry (for this party) in this table.
If none match, then the object instance is not in the MIB view.
If one or more match, then the object instance is included in, or excluded from, the MIB view according to the value of viewStatus in the entry whose value of viewSubtree has the most sub identifiers.
If multiple entries match and have the same number of sub identifiers, then the lexicographically greatest instance of viewStatus determines the inclusion or exclusion.
An object instance's Object Identifier X matches an entry in this table when the number of sub  identifiers in X is at least as many as in the value of viewSubtree for the entry, and each sub  identifier in the value of viewSubtree matches its corresponding sub identifier in X.
Two sub  identifiers match either if the corresponding bit of viewMask is zero (the 'wild card' value), or if they are equal.
Due to this 'wild card' capability, we introduce the term, a 'family' of view subtrees, to refer to the set of subtrees defined by a particular combination of values of viewSubtree and viewMask.
In the case where no 'wild card' is defined in viewMask, the family of view subtrees reduces to a single view subtree."
{ partyViews 1 } viewEntry OBJECT TYPE SYNTAX
mandatory DESCRIPTION "Information on a particular family of view
subtrees included in or excluded from a particular SNMP party's MIB view.
"The SNMP party whose single MIB view includes or excludes a particular family of view subtrees."
"The view subtree which, in combination with the corresponding instance of viewMask, defines a family of view subtrees.
This family is included in, or excluded from the particular SNMP party's MIB view, according to the value of the corresponding instance of viewStatus."
"The status of a particular family of view subtrees within the particular SNMP party's MIB view.
The value 'included(1)' indicates that the corresponding instances of viewSubtree and viewMask define a family of view subtrees included in the MIB view.
The  value 'excluded(2)' indicates that the corresponding instances of viewSubtree and viewMask define a family of view subtrees excluded from the MIB view.
Setting an instance of this object to the value 'invalid(3)' has the effect of invalidating the presence or absence of the corresponding family of view subtrees in the corresponding SNMP party's MIB view.
It is an implementation specific matter as to whether the agent removes an invalidated entry from the table.
Accordingly, management stations must be prepared to receive from agents tabular information corresponding to entries not currently in use.
Proper interpretation of such entries requires examination of the relevant viewStatus object.
"The bit mask which, in combination with the corresponding instance of viewSubtree, defines a family of view subtrees.
Each bit of this bit mask corresponds to a sub  identifier of viewSubtree, with the most significant bit of the i th octet of this octet string value
(extended if necessary, see below)
corresponding to the (8 i 7) th sub identifier, and the least significant bit of the i th octet of this octet string corresponding to the (8 i) th sub identifier, where i is in the range 1 through 16.
Each bit of this bit mask specifies whether or not the corresponding sub identifiers must match when determining if an Object Identifier is in this family of view subtrees; a '1' indicates that an exact match must occur; a '0' indicates 'wild card', i.e., any sub identifier value matches.
Thus, the Object Identifier X of an object instance is contained in a family of view subtrees if the following criteria are met: for each sub identifier of the value of viewSubtree, either:
the i th bit of viewMask is 0, or the i th sub identifier of X is equal to the i
th sub identifier of the value of viewSubtree.
If the value of this bit mask is M bits long and there are more than M sub identifiers in the corresponding instance of viewSubtree, then the bit mask is extended with 1's to be the required length.
Note that when the value of this object is the zero length string, this extension rule results in a mask of all 1's being used (i.e., no 'wild card'), and the family of view subtrees is the one view subtree uniquely identified by the corresponding instance of viewSubtree."
{ viewEntry 4 } END Security Considerstions Security issues are discussed in section 3.1.
and in RFCs 1351 and 1352.
