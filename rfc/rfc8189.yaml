- title: __initial_text__
  contents:
  - '        Multi-Cost Application-Layer Traffic Optimization (ALTO)

    '
- title: Abstract
  contents:
  - "Abstract\n   The Application-Layer Traffic Optimization (ALTO) protocol, specified\n\
    \   in RFC 7285, defines several services that return various metrics\n   describing\
    \ the costs between network endpoints.\n   This document defines a new service\
    \ that allows an ALTO Client to\n   retrieve several cost metrics in a single\
    \ request for an ALTO\n   filtered cost map and endpoint cost map.  In addition,\
    \ it extends the\n   constraints to further filter those maps by allowing an ALTO\
    \ Client\n   to specify a logical combination of tests on several cost metrics.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 7841.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8189.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2017 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (https://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   4\n     1.1.  Requirements Language . . . . . . . . . . . . . .\
    \ . . . .   5\n   2.  Terminology . . . . . . . . . . . . . . . . . . . . . .\
    \ . . .   5\n   3.  Overview Of Approach  . . . . . . . . . . . . . . . . . .\
    \ . .   6\n     3.1.  Multi-Cost Data Format  . . . . . . . . . . . . . . . .\
    \ .   6\n     3.2.  Compatibility with Legacy ALTO Clients  . . . . . . . . .\
    \   7\n     3.3.  Filtered Multi-Cost Map Resources . . . . . . . . . . . .  \
    \ 7\n     3.4.  Endpoint Cost Service Resources . . . . . . . . . . . . .   8\n\
    \     3.5.  Full Cost Map Resources . . . . . . . . . . . . . . . . .   8\n  \
    \   3.6.  Extended Constraint Tests . . . . . . . . . . . . . . . .   8\n    \
    \   3.6.1.  Extended Constraint Predicates  . . . . . . . . . . .   9\n      \
    \ 3.6.2.  Extended Logical Combination of Predicates  . . . . .   9\n       3.6.3.\
    \  Testable Cost Types in Constraints  . . . . . . . . .   9\n       3.6.4.  Testable\
    \ Cost Type Names in IRD Capabilities  . . . .  10\n       3.6.5.  Legacy ALTO\
    \ Client Issues . . . . . . . . . . . . . .  10\n   4.  Protocol Extensions for\
    \ Multi-Cost ALTO Transactions  . . . .  12\n     4.1.  Filtered Cost Map Extensions\
    \  . . . . . . . . . . . . . .  12\n       4.1.1.  Capabilities  . . . . . . .\
    \ . . . . . . . . . . . . .  13\n       4.1.2.  Accept Input Parameters . . .\
    \ . . . . . . . . . . . .  14\n       4.1.3.  Response  . . . . . . . . . . .\
    \ . . . . . . . . . . .  17\n     4.2.  Endpoint Cost Service Extensions  . .\
    \ . . . . . . . . . .  17\n       4.2.1.  Capabilities  . . . . . . . . . . .\
    \ . . . . . . . . .  17\n       4.2.2.  Accept Input Parameters . . . . . . .\
    \ . . . . . . . .  18\n       4.2.3.  Response  . . . . . . . . . . . . . . .\
    \ . . . . . . .  19\n   5.  Examples  . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  19\n     5.1.  Information Resource Directory  . . . . . . . .\
    \ . . . . .  19\n     5.2.  Multi-Cost Filtered Cost Map: Example #1  . . . .\
    \ . . . .  21\n     5.3.  Multi-Cost Filtered Cost Map: Example #2  . . . . .\
    \ . . .  23\n     5.4.  Multi-Cost Filtered Cost Map: Example #3  . . . . . .\
    \ . .  24\n     5.5.  Multi-Cost Filtered Cost Map: Example #4  . . . . . . .\
    \ .  25\n     5.6.  Endpoint Cost Service . . . . . . . . . . . . . . . . . .\
    \  26\n   6.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .  28\n\
    \   7.  Privacy and Security Considerations . . . . . . . . . . . . .  28\n  \
    \ 8.  References  . . . . . . . . . . . . . . . . . . . . . . . . .  28\n    \
    \ 8.1.  Normative References  . . . . . . . . . . . . . . . . . .  28\n     8.2.\
    \  Informative References  . . . . . . . . . . . . . . . . .  28\n   Acknowledgements\
    \  . . . . . . . . . . . . . . . . . . . . . . . .  29\n   Authors' Addresses\
    \  . . . . . . . . . . . . . . . . . . . . . . .  29\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   IETF has defined ALTO services in [RFC7285] to provide guidance\
    \ to\n   overlay applications, which have to select one or several hosts from\n\
    \   a set of candidates that are able to provide a desired resource.\n   This\
    \ guidance is based on parameters such as the topological distance\n   that affect\
    \ performance of the data transmission between the hosts.\n   The purpose of ALTO\
    \ is to improve Quality of Experience (QoE) in the\n   application while reducing\
    \ resource consumption in the underlying\n   network infrastructure.  The ALTO\
    \ protocol conveys a view of the\n   Internet called a Network Map, which is composed\
    \ of provider-defined\n   locations spanning from subnets to several Autonomous\
    \ Systems (ASes).\n   ALTO may also convey the provider-determined costs between\
    \ Network\n   Map locations or between groups of individual endpoints.\n   Current\
    \ ALTO cost types provide values such as \"hopcount\" and\n   administrative \"\
    routingcost\" to reflect ISP routing preferences.\n   Recently, new use cases\
    \ have extended the usage scope of ALTO to\n   Content Delivery Networks (CDNs),\
    \ data centers, and applications that\n   need additional information to select\
    \ their endpoints or network\n   locations.  Thus, a multitude of new cost types\
    \ that better reflect\n   the requirements of these applications are expected\
    \ to be specified.\n   The ALTO protocol [RFC7285], which this document refers\
    \ to as the\n   base protocol, restricts ALTO cost maps and Endpoint Cost Services\
    \ to\n   only one cost type per ALTO request.  To retrieve information for\n \
    \  several cost types, an ALTO Client must send several separate\n   requests\
    \ to the Server.\n   It is far more efficient, in terms of Round-Trip Time (RTT),\
    \ traffic,\n   and processing load on the ALTO Client and Server, to get all costs\n\
    \   with a single query/response transaction.  One cost map reporting on\n   N\
    \ cost types is less bulky than N cost maps containing one cost type\n   each.\
    \  This is valuable for both the storage of these maps and their\n   transmission.\
    \  Additionally, for many emerging applications that need\n   information on several\
    \ cost types, having them gathered in one map\n   will save time.  Another advantage\
    \ is consistency: providing values\n   for several cost types in one single batch\
    \ is useful for ALTO Clients\n   needing synchronized ALTO information updates.\
    \  This document defines\n   how to retrieve multiple cost metrics in a single\
    \ request for ALTO\n   filtered cost maps and endpoint cost maps.  To ensure compatibility\n\
    \   with legacy ALTO Clients, only the Filtered Cost Map and Endpoint\n   Cost\
    \ Map Services are extended to return multi-cost values.\n   Along with multi-cost\
    \ values queries, the filtering capabilities need\n   to be extended to allow\
    \ constraints on multiple metrics.  The base\n   protocol allows an ALTO Client\
    \ to provide optional constraint tests\n   for a Filtered Cost Map Service or\
    \ the Endpoint Cost Service, where\n   the constraint tests are limited to the\
    \ AND combination of comparison\n   tests on the value of the (single) requested\
    \ cost type.  However,\n   applications that are sensitive to several metrics\
    \ and struggle with\n   complicated network conditions may need to arbitrate between\n\
    \   conflicting objectives such as routing cost and network performance.\n   To\
    \ this end, this document extends the base protocol with constraints\n   that\
    \ may test multiple metrics and may be combined with logical 'ORs'\n   as well\
    \ as logical 'ANDs'.  This allows an application to make\n   requests such as:\
    \ \"select solutions with either (moderate \"hopcount\"\n   AND high \"routingcost\"\
    ) OR (higher \"hopcount\" AND moderate\n   \"routingcost\")\".\n   This document\
    \ is organized as follows.  Section 2 defines terminology\n   used in this document.\
    \  Section 3 gives a non-normative overview of\n   the multi-cost extensions,\
    \ and Section 4 gives the formal\n   definitions.  Section 5 gives several complete\
    \ examples.  The\n   remaining sections describe the IANA, privacy, and security\n\
    \   considerations.\n"
- title: 1.1.  Requirements Language
  contents:
  - "1.1.  Requirements Language\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    NOT RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted\
    \ as described in\n   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear\
    \ in all\n   capitals, as shown here.\n   When the words appear in lower case,\
    \ they are to be interpreted with\n   their natural language meanings.\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   o  ALTO transaction: A request/response exchange between\
    \ an ALTO\n      Client and an ALTO Server.\n   o  Client: When used with a capital\
    \ \"C\", this term refers to an ALTO\n      Client.\n   o  Endpoint (EP): An endpoint\
    \ is defined as in Section 2.1 of\n      [RFC7285].  It can be, for example, a\
    \ peer, a CDN storage\n      location, a physical server involved in a virtual\
    \ server-supported\n      application, a party in a resource-sharing swarm such\
    \ as a\n      computation grid, or an online multi-party game.\n   o  Server:\
    \ When used with a capital \"S\", this term refers to an ALTO\n      Server.\n"
- title: 3.  Overview Of Approach
  contents:
  - "3.  Overview Of Approach\n   The following is a non-normative overview of the\
    \ multi-cost ALTO\n   extensions defined in this document.  It assumes the reader\
    \ is\n   familiar with cost map resources in the ALTO protocol [RFC7285].\n"
- title: 3.1.  Multi-Cost Data Format
  contents:
  - "3.1.  Multi-Cost Data Format\n   Formally, the cost entries in an ALTO cost map\
    \ can be any type of\n   JSON value [RFC7159] (see the DstCosts object in Section\
    \ 11.2.3.6 of\n   [RFC7285]).  However, that section also says that an implementation\n\
    \   may assume costs are JSON numbers, unless the implementation is using\n  \
    \ an extension that signals a different data type.\n   Therefore, this document\
    \ extends the definition of a cost map to\n   allow a cost to be an array of costs,\
    \ one per metric, instead of just\n   one number.  For example, here is a cost\
    \ map with the \"routingcost\"\n   and \"hopcount\" metrics.  Note that this is\
    \ identical to a regular\n   ALTO cost map, except that the values are arrays\
    \ instead of numbers.\n   The multiple metrics are listed in member \"multi-cost-types\"\
    ,\n   indicating to the Client how to map values in the array to cost\n   metrics.\n\
    \   {\n    \"meta\" : {\n      \"dependent-vtags\" : [ ... ],\n      \"cost-type\"\
    \ : {},\n      \"multi-cost-types\" : [\n        {\"cost-mode\": \"numerical\"\
    , \"cost-metric\": \"routingcost\"},\n        {\"cost-mode\": \"numerical\", \"\
    cost-metric\": \"hopcount\"}\n      ]\n    }\n    \"cost-map\" : {\n      \"PID1\"\
    : { \"PID1\":[1,0],  \"PID2\":[5,23],  \"PID3\":[10,5] },\n      ...\n    }\n\
    \   }\n   Note also the presence of member '\"cost-type\" : {}' to maintain\n\
    \   backwards compatibility with [RFC7285].\n"
- title: 3.2.  Compatibility with Legacy ALTO Clients
  contents:
  - "3.2.  Compatibility with Legacy ALTO Clients\n   This document does not define\
    \ any new media types.  Instead, as\n   described below, it extends the specifications\
    \ in the ALTO Server's\n   Information Resource Directory (IRD) so that legacy\
    \ Clients will not\n   request array-valued multi-cost map resources.  This relies\
    \ on the\n   requirement that ALTO Clients MUST ignore unknown fields\n   (Section\
    \ 8.3.7 of [RFC7285]).\n"
- title: 3.3.  Filtered Multi-Cost Map Resources
  contents:
  - "3.3.  Filtered Multi-Cost Map Resources\n   This document extends the Filtered\
    \ Cost Map Service to allow the same\n   resource to return either a single-valued\
    \ cost map, as defined in\n   [RFC7285], or an array-valued multi-cost map, as\
    \ defined in this\n   document.  An extended Filtered Cost Map resource has a\
    \ new\n   capability, \"max-cost-types\".  The value is the maximum number of\n\
    \   cost types this resource can return for one request.  The existence\n   of\
    \ this capability means the resource understands the extensions in\n   this document.\n\
    \   For example, the following fragment from an IRD defines an extended\n   Filtered\
    \ Cost Map resource:\n      \"filtered-multicost-map\" : {\n        \"uri\" :\
    \ \"http://alto.example.com/multi/costmap/filtered\",\n        \"media-type\"\
    \ : \"application/alto-costmap+json\",\n        \"accepts\" : \"application/alto-costmapfilter+json\"\
    ,\n        \"uses\" : [ \"my-default-network-map\" ],\n        \"capabilities\"\
    \ : {\n          \"max-cost-types\" : 2,\n          \"cost-type-names\" : [ \"\
    num-routingcost\",\n                                \"num-hopcount\" ],\n    \
    \      ...\n        }\n   A legacy ALTO Client will ignore the \"max-cost-types\"\
    \ capability and\n   will send a request with the input parameter \"cost-type\"\
    \ describing\n   the desired cost metric, as defined in [RFC7285].  The ALTO Server\n\
    \   will return a single-valued legacy cost map.\n   However, a multi-cost-aware\
    \ ALTO Client will realize that this\n   resource supports the multi-cost extensions\
    \ and can send a POST\n   request with the new input parameter \"multi-cost-types\"\
    , whose value\n   is an array of cost types.  Because the request has the \"multi-cost-\n\
    \   types\" parameter (rather than the \"cost-type\" parameter defined in\n  \
    \ the base protocol), the Server realizes that the ALTO Client also\n   supports\
    \ the extensions in this document and hence responds with a\n   multi-cost map\
    \ with the costs in the order listed in \"multi-cost-\n   types\".\n"
- title: 3.4.  Endpoint Cost Service Resources
  contents:
  - "3.4.  Endpoint Cost Service Resources\n   Section 4.1.4 of [RFC7285] specifies\
    \ that \"The Endpoint Cost Service\n   allows an ALTO server to return costs directly\
    \ amongst endpoints\",\n   whereas the Filtered Cost Map Service returns costs\
    \ amongst Provider-\n   defined Identifiers (PIDs).  This document uses the technique\n\
    \   described in Section 3.3 to extend the Endpoint Cost Service to\n   return\
    \ array-valued costs to ALTO Clients who also are aware of these\n   extensions.\n"
- title: 3.5.  Full Cost Map Resources
  contents:
  - "3.5.  Full Cost Map Resources\n   Section 11.3.2.3 of [RFC7285] requires a filtered\
    \ cost map to return\n   the entire cost map if the ALTO Client omits the source\
    \ and\n   destination PIDs.  Hence, a multi-cost-aware ALTO Client can use an\n\
    \   extended Filtered Cost Map resource to get a full multi-cost map.\n   Full\
    \ cost map resources are GET-mode requests.  The response for a\n   full cost\
    \ map conveying multiple cost types would include a \"meta\"\n   field that would\
    \ itself include a \"cost-type\" field that would list\n   several values corresponding\
    \ to the cost types of the cost map.  A\n   legacy ALTO Client would not be able\
    \ to understand this list.\n   Neither would it be able to interpret the cost\
    \ values array provided\n   by a full multi-cost map.\n"
- title: 3.6.  Extended Constraint Tests
  contents:
  - "3.6.  Extended Constraint Tests\n   [RFC7285] defines a simple constraint test\
    \ capability for Filtered\n   Cost Map and Endpoint Cost Services.  If a resource\
    \ supports\n   constraints, the Server restricts the response to costs that satisfy\n\
    \   a list of simple predicates provided by the ALTO Client.  For\n   example,\
    \ if the ALTO Client gives the following constraints:\n        \"constraints\"\
    : [\"ge 10\", \"le 20\"]\n   then the Server only returns costs in the range [10,20].\n\
    \   To be useful with multi-cost requests, the constraint tests require\n   several\
    \ extensions.\n"
- title: 3.6.1.  Extended Constraint Predicates
  contents:
  - "3.6.1.  Extended Constraint Predicates\n   First, because a multi-cost request\
    \ involves more than one cost\n   metric, the simple predicates must be extended\
    \ to specify the metric\n   to test.  Therefore, we extend the predicate syntax\
    \ to \"[##] op\n   value\", where \"##\" is the index of a cost metric in this\
    \ multi-cost\n   request.\n"
- title: 3.6.2.  Extended Logical Combination of Predicates
  contents:
  - "3.6.2.  Extended Logical Combination of Predicates\n   Second, once multiple\
    \ cost metrics are involved, the \"AND\" of simple\n   predicates is no longer\
    \ sufficient.  To be useful, Clients must be\n   able to express \"OR\" tests.\
    \  Hence, we add a new field,\n   \"or-constraints\", to the Client request. \
    \ The value is an array of\n   arrays of simple predicates and represents the\
    \ OR of ANDs of those\n   predicates.\n   Thus, the following request tells the\
    \ Server to limit its response to\n   cost points with \"routingcost\" <= 100\
    \ AND \"hopcount\" <= 2, OR else\n   \"routingcost\" <= 10 AND \"hopcount\" <=\
    \ 6:\n      {\n        \"multi-cost-types\": [\n            {\"cost-metric\":\
    \ \"routingcost\", \"cost-mode\": \"numerical\"},\n            {\"cost-metric\"\
    : \"hopcount\",    \"cost-mode\": \"numerical\"}\n        ],\n        \"or-constraints\"\
    : [\n            [\"[0] le 100\", \"[1] le 2\"],\n            [\"[0] le 10\",\
    \  \"[1] le 6\"]\n        ],\n        \"pids\": {...}\n      }\n   Note that a\
    \ \"constraints\" parameter with the array of predicates [P1,\n   P2, ...] is\
    \ equivalent to an \"or-constraints\" parameter with one\n   array of value [[P1,\
    \ P2, ...]].  A Client is therefore allowed to\n   express either \"constraints\"\
    \ or \"or-constraints\" but not both.\n"
- title: 3.6.3.  Testable Cost Types in Constraints
  contents:
  - "3.6.3.  Testable Cost Types in Constraints\n   Finally, a Client may want to\
    \ test a cost type whose actual value is\n   irrelevant, as long as it satisfies\
    \ the tests.  For example, a Client\n   may want the value of the cost metric\
    \ \"routingcost\" for all PID pairs\n   that satisfy constraints on the metric\
    \ \"hopcount\", without needing\n   the actual value of \"hopcount\".\n   To this\
    \ end, we add a specific parameter named \"testable-cost-types\"\n   that does\
    \ not contain the same cost types as parameter \"multi-cost-\n   types\".  The\
    \ Client can express constraints only on cost types listed\n   in \"testable-cost-types\"\
    .\n   For example, the following request tells the Server to return just\n   \"\
    routingcost\" for those source and destination pairs for which\n   \"hopcount\"\
    \ is <= 6:\n      {\n        \"multi-cost-types\": [\n            {\"cost-metric\"\
    : \"routingcost\", \"cost-mode\": \"numerical\"},\n        ],\n        \"testable-cost-types\"\
    : [\n            {\"cost-metric\": \"hopcount\", \"cost-mode\": \"numerical\"\
    },\n        ],\n        \"constraints\": [\"[0] le 6\"],\n        \"pids\": {...}\n\
    \      }\n"
- title: 3.6.4.  Testable Cost Type Names in IRD Capabilities
  contents:
  - "3.6.4.  Testable Cost Type Names in IRD Capabilities\n   In [RFC7285], when a\
    \ resource's capability \"constraints\" is true, the\n   Server accepts constraints\
    \ on all the cost types listed in the \"cost-\n   type-names\" capability.  However,\
    \ some ALTO Servers may not be\n   willing to allow constraint tests on all available\
    \ cost metrics.\n   Therefore, the multi-cost ALTO protocol extension defines\
    \ the\n   capability field \"testable-cost-type-names\".  Like \"cost-type-names\"\
    ,\n   it is an array of cost type names.  If present, that resource only\n   allows\
    \ constraint tests on the cost types in that list. \"testable-\n   cost-type-names\"\
    \ must be a subset of \"cost-type-names\".\n"
- title: 3.6.5.  Legacy ALTO Client Issues
  contents:
  - "3.6.5.  Legacy ALTO Client Issues\n   While a multi-cost-aware Client will recognize\
    \ the \"testable-cost-\n   type-names\" field and will honor those restrictions,\
    \ a legacy Client\n   will not.  Hence, when \"constraints\" has the value 'true',\
    \ a legacy\n   Client may send a request with a constraint test on any of the\
    \ cost\n   types listed in \"cost-type-names\".\n   To avoid that problem, the\
    \ \"testable-cost-type-names\" and \"cost-\n   constraints\" fields are mutually\
    \ exclusive: a resource may define one\n   or the other capability but MUST NOT\
    \ define both.  Thus, a resource\n   that does not allow constraint tests on all\
    \ cost metrics will set\n   \"testable-cost-type-names\" to the testable metrics\
    \ and will set\n   \"cost-constraints\" to 'false'.  A multi-cost-aware Client\
    \ will\n   recognize the \"testable-cost-type-names\" field and will realize that\n\
    \   its existence means the resource does allow (limited) constraint\n   tests,\
    \ while a legacy Client will think that resource does not allow\n   constraint\
    \ tests at all.  To allow legacy Clients to use constraint\n   tests, the ALTO\
    \ Server can define an additional resource with \"cost-\n   constraints\" set\
    \ to 'true' and \"cost-type-names\" set to the metrics\n   that can be tested.\n\
    \   In the IRD example below, the resource \"filtered-cost-map-extended\"\n  \
    \ provides values for three metrics: \"num-routingcost\", \"num-hopcount\",\n\
    \   and \"num-bwscore\".  The capability \"testable-cost-type-names\"\n   indicates\
    \ that the Server only allows constraints on \"routingcost\"\n   and \"hopcount\"\
    .  A multi-cost-capable Client will see this capability\n   and will limit its\
    \ constraint tests to those metrics.  Because\n   capability \"cost-constraints\"\
    \ is false (by default), a legacy Client\n   will not use constraint tests on\
    \ this resource at all.\n   The second resource, \"filtered-multicost-map\", is\
    \ similar to the\n   first, except that all the metrics it returns are testable.\n\
    \   Therefore, it sets \"cost-constraints\" to 'true' and does not set the\n \
    \  \"testable-cost-type-names\" field.  A legacy Client that needs a\n   constraint\
    \ test will use this resource rather than the first.  A\n   multi-cost-aware Client\
    \ that does not need to retrieve the\n   \"num-bwscore\" metric may use either\
    \ resource.\n   Note that if a multi-cost Server specifies a \"filtered-cost-map-\n\
    \   extended\", it will most likely not specify an \"filtered-multicost-\n   map\"\
    \ if the capabilities of the latter are covered by the\n   capabilities of the\
    \ former or unless the \"filtered-multicost-map\"\n   resource is also intended\
    \ for legacy Clients.\n   \"filtered-cost-map-extended\" : {\n      \"uri\" :\
    \ \"http://alto.example.com/multi/extn/costmap/filtered\",\n      \"media-type\"\
    \ : \"application/alto-costmap+json\",\n      \"accepts\" : \"application/alto-costmapfilter+json\"\
    ,\n      \"uses\" : [ \"my-default-network-map\" ],\n      \"capabilities\" :\
    \ {\n         \"max-cost-types\" : 3,\n         \"cost-type-names\" : [ \"num-routingcost\"\
    ,\n                               \"num-hopcount\",\n                        \
    \       \"num-bwscore\"],\n         \"testable-cost-type-names\" : [ \"num-routingcost\"\
    ,\n                                        \"num-hopcount\" ]\n      }\n   },\n\
    \   \"filtered-multicost-map\" : {\n      \"uri\" : \"http://alto.example.com/multi/costmap/filtered\"\
    ,\n      \"media-type\" : \"application/alto-costmap+json\",\n      \"accepts\"\
    \ : \"application/alto-costmapfilter+json\",\n      \"uses\" : [ \"my-default-network-map\"\
    \ ],\n      \"capabilities\" : {\n        \"cost-constraints\" : true,\n     \
    \   \"max-cost-types\" : 2,\n        \"cost-type-names\" : [ \"num-routingcost\"\
    ,\n                              \"num-hopcount\"],\n      }\n   }\n"
- title: 4.  Protocol Extensions for Multi-Cost ALTO Transactions
  contents:
  - "4.  Protocol Extensions for Multi-Cost ALTO Transactions\n   This section formally\
    \ specifies the extensions to [RFC7285] to\n   support multi-cost ALTO transactions.\n\
    \   This document uses the notation rules specified in Section 8.2 of\n   [RFC7285].\
    \  In particular, an optional field is enclosed by [ ].  In\n   the definitions,\
    \ the JSON names of the fields are case sensitive.  An\n   array is indicated\
    \ by two numbers in angle brackets, <m..n>, where m\n   indicates the minimal\
    \ number of values and n is the maximum.  When\n   this document uses * for n,\
    \ it means no upper bound.\n"
- title: 4.1.  Filtered Cost Map Extensions
  contents:
  - "4.1.  Filtered Cost Map Extensions\n   This document extends Filtered Cost Maps,\
    \ as defined in\n   Section 11.3.2 of [RFC7285], by adding new input parameters\
    \ and\n   capabilities and by returning JSONArrays instead of JSONNumbers as\n\
    \   the cost values.\n   The media type, HTTP method, and \"uses\" specifications\
    \ (described in\n   Sections 11.3.2.1, 11.3.2.2, and 11.3.2.5 of [RFC7285], respectively)\n\
    \   are unchanged.\n"
- title: 4.1.1.  Capabilities
  contents:
  - "4.1.1.  Capabilities\n   The filtered cost map capabilities are extended with\
    \ two new members:\n   o  max-cost-types\n   o  testable-cost-type-names\n   The\
    \ capability \"max-cost-types\" indicates whether this resource\n   supports the\
    \ multi-cost ALTO extensions, and the capability\n   \"testable-cost-type-names\"\
    \ allows the resource to restrict constraint\n   tests to a subset of the available\
    \ cost types.  With these two\n   additional members, the FilteredCostMapCapabilities\
    \ object in\n   Section 11.3.2.4 of [RFC7285] is structured as follows:\n    \
    \   object {\n          JSONString cost-type-names<1..*>;\n          [JSONBool\
    \ cost-constraints;]\n          [JSONNumber max-cost-types;]\n          [JSONString\
    \ testable-cost-type-names<1..*>;]\n       } FilteredCostMapCapabilities;\n  \
    \ cost-type-names:  As defined in Section 11.3.2.4 of [RFC7285].\n   cost-constraints:\
    \  As defined in Section 11.3.2.4 of [RFC7285].\n      Thus, if \"cost-constraints\"\
    \ is true, the resource MUST accept\n      constraint tests on any cost type in\
    \ \"cost-type-names\".  In\n      addition, note that if \"cost-constraints\"\
    \ is true, the \"testable-\n      cost-type-names\" capability MUST NOT be present.\n\
    \   max-cost-types:  If present with value N greater than 0, this\n      resource\
    \ understands the multi-cost extensions in this document\n      and can return\
    \ a multi-cost map with any combination of N or fewer\n      cost types in the\
    \ \"cost-type-names\" list.  If omitted, the default\n      value is 0.\n   testable-cost-type-names:\
    \  If present, the resource allows constraint\n      tests, but only on the cost\
    \ type names in this array.  Each name\n      in \"testable-cost-type-names\"\
    \ MUST also be in \"cost-type-names\".\n      If \"testable-cost-type-names\"\
    \ is present, the \"cost-constraints\"\n      capability MUST NOT be true.\n \
    \     As discussed in Section 3.6.4, this capability is useful when a\n      Server\
    \ is unable or unwilling to implement constraint tests on all\n      cost types.\
    \  As discussed in Section 3.6.5, \"testable-cost-type-\n      names\" and \"\
    cost-constraints\" are mutually exclusive to prevent\n      legacy Clients from\
    \ issuing constraint tests on untestable cost\n      types.\n"
- title: 4.1.2.  Accept Input Parameters
  contents:
  - "4.1.2.  Accept Input Parameters\n   The ReqFilteredCostMap object in Section\
    \ 11.3.2.3 of [RFC7285] is\n   extended as follows:\n       object {\n       \
    \   [CostType cost-type;]\n          [CostType multi-cost-types<1..*>;]\n    \
    \      [CostType testable-cost-types<1..*>;]\n          [JSONString constraints<0..*>;]\n\
    \          [JSONString or-constraints<1..*><1..*>;]\n          [PIDFilter pids];\n\
    \       } ReqFilteredCostMap;\n   cost-type:  As defined in Section 11.3.2.3 of\
    \ [RFC7285], with the\n      additional requirement that the Client MUST specify\
    \ either \"cost-\n      type\" or \"multi-cost-types\" but MUST NOT specify both.\
    \  Therefore,\n      this field is made optional.  When placing a single cost\
    \ request\n      as specified in [RFC7285], a Client MUST use \"cost-type\".\n\
    \   multi-cost-types:  If present, the ALTO Server MUST return array-\n      valued\
    \ costs for the cost types in this list.  For each entry, the\n      \"cost-metric\"\
    \ and \"cost-mode\" fields MUST match one of the\n      supported cost types indicated\
    \ in member \"cost-type-names\" of this\n      resource's \"capabilities\" field\
    \ (Section 4.1.1).  The Client MUST\n      NOT use this field unless this resource's\
    \ \"max-cost-types\"\n      capability exists and has a value greater than 0.\
    \  This field MUST\n      NOT have more than \"max-cost-types\" cost types.  The\
    \ Client MUST\n      specify either \"cost-type\" or \"multi-cost-types\" but\
    \ MUST NOT\n      specify both.\n      Note that if \"multi-cost-types\" has one\
    \ cost type, the values in\n      the cost map will be arrays with one value.\n\
    \   testable-cost-types:  A list of cost types used for extended\n      constraint\
    \ tests, as described for the \"constraints\" and\n      \"or-constraints\" parameters.\
    \  These cost types must either be a\n      subset of the cost types in the resource's\n\
    \      \"testable-cost-type-names\" capability (Section 4.1.1), or else, if\n\
    \      the resource's capability \"cost-constraints\" is true, a subset of\n \
    \     the cost types in the resource's \"cost-type-names\" capability.\n     \
    \ If \"testable-cost-types\" is omitted, it is assumed to have the\n      cost\
    \ types in \"multi-cost-types\" or \"cost-type\".\n      This feature is useful\
    \ when a Client wants to test a cost type\n      whose actual value is irrelevant,\
    \ as long as it satisfies the\n      tests.  For example, a Client may want the\
    \ cost metric\n      \"routingcost\" for those PID pairs whose \"hopcount\" is\
    \ less than\n      10.  The exact hop count does not matter.\n   constraints:\
    \  If this resource's \"max-cost-types\" capability\n      (Section 4.1.1) has\
    \ the value 0 (or is not defined), this\n      parameter is as defined in Section\
    \ 11.3.2.3 of [RFC7285]: an array\n      of constraint tests related to each other\
    \ by a logical AND.  In\n      this case, it MUST NOT be specified unless the\
    \ resource's \"cost-\n      constraints\" capability is true.\n      If this resource's\
    \ \"max-cost-types\" capability has a value greater\n      than 0, then this parameter\
    \ is an array of extended constraint\n      predicates as defined below and related\
    \ to each other by a logical\n      AND.  In this case, it MAY be specified if\
    \ the resource allows\n      constraint tests (the resource's \"cost-constraints\"\
    \ capability is\n      true, or its \"testable-cost-type-names\" capability is\
    \ not empty).\n      This parameter MUST NOT be specified if the \"or-constraints\"\
    \n      parameter is specified.\n      An extended constraint predicate consists\
    \ of two or three entities\n      separated by white space: (1) an optional cost\
    \ type index of the\n      form \"[#]\" with default value \"[0]\", (2) a required\
    \ operator, and\n      (3) a required target value.  The operator and target value\
    \ are as\n      defined in Section 11.3.2.3 of [RFC7285].  The cost type index,\
    \ i,\n      specifies the cost type to test.  If the \"testable-cost-type\"\n\
    \      parameter is present, the test applies to the i'th cost type in\n     \
    \ \"testable-cost-types\", starting with index 0.  Otherwise, if the\n      \"\
    multi-cost-types\" parameter is present, the test applies to the\n      i'th cost\
    \ type in that array.  If neither parameter is present,\n      the test applies\
    \ to the cost type in the \"cost-type\" parameter, in\n      which case the index\
    \ MUST be 0.  Regardless of how the tested cost\n      type is selected, it MUST\
    \ be in the resource's \"testable-cost-\n      type-names\" capability or, if\
    \ not present, in the \"cost-type-\n      names\" capability.\n      As an example,\
    \ suppose \"multi-cost-types\" has the single element\n      \"routingcost\",\
    \ \"testable-cost-types\" has the single element\n      \"hopcount\", and \"constraints\"\
    \ has the single element \"[0] le 5\".\n      This is equivalent to the database\
    \ query \"SELECT and provide\n      routingcost WHERE hopcount <= 5\".\n     \
    \ Note that the index is optional, so a constraint test as defined\n      in Section\
    \ 11.3.2.3 of [RFC7285], such as \"le 10\", is equivalent\n      to \"[0] le 10\"\
    .  Thus, legacy constraint tests are also legal\n      extended constraint tests.\n\
    \      Note that a \"constraints\" parameter with the array of extended\n    \
    \  predicates [P1, P2, ...] is equivalent to an \"or-constraints\"\n      parameter\
    \ as defined below with the value [[P1, P2, ...]].\n   or-constraints:  A JSONArray\
    \ of JSONArrays of JSONStrings, where each\n      string is an extended constraint\
    \ predicate as defined above.  The\n      \"or-constraint\" tests are interpreted\
    \ as the logical OR of ANDs of\n      predicates.  That is, the ALTO Server should\
    \ return a cost point\n      only if it satisfies all constraints in any one of\
    \ the sub-arrays.\n      This parameter MAY be specified if this resource's \"\
    max-cost-\n      types\" capability is defined with a value greater than 0\n \
    \     (Section 4.1.1) and if the resource allows constraint tests (the\n     \
    \ resource's \"cost-constraints\" capability is true, or its\n      \"testable-cost-type-names\"\
    \ capability is not empty).  Otherwise,\n      this parameter MUST NOT be specified.\n\
    \      This parameter MUST NOT be specified if the \"constraints\"\n      parameter\
    \ is specified.\n      This parameter MUST NOT contain any empty array of AND\
    \ predicates.\n      An empty array would be equivalent to a constraint that is\
    \ always\n      true.  An OR combination including such a constraint would be\n\
    \      always true and thus useless.\n      As an example, suppose \"multi-cost-types\"\
    \ has the two elements\n      \"routingcost\" and \"bandwidthscore\", \"testable-cost-types\"\
    \ has the\n      two elements \"routingcost\" and \"hopcount\", and \"or-constraints\"\
    \n      has the two elements [\"[0] le 100\", \"[1] le 2\"] and [\"[0] le 10\"\
    ,\n      \"[1] le 6\"].  This is equivalent to the words: \"SELECT and provide\n\
    \      routingcost and bandwidthscore WHERE (\"routingcost\" <= 100 AND\n    \
    \  \"hopcount\" <= 2) OR (\"routingcost\" <= 10 AND \"hopcount\" <= 6)\".\n  \
    \    Note that if the \"max-cost-types\" capability has a value greater\n    \
    \  than 0, a Client MAY use the \"or-constraints\" parameter together\n      with\
    \ the \"cost-type\" parameter.  That is, if the Client and Server\n      are both\
    \ aware of the extensions in this document, a Client MAY\n      use an \"OR\"\
    \ test for a single-valued cost request.\n   pids:  As defined in Section 11.3.2.3\
    \ of [RFC7285].\n"
- title: 4.1.3.  Response
  contents:
  - "4.1.3.  Response\n   If the Client specifies the \"cost-type\" input parameter,\
    \ the response\n   is exactly as defined in Section 11.2.3.6 of [RFC7285].  If\
    \ the\n   Client provides the \"multi-cost-types\" instead, then the response\
    \ is\n   changed as follows:\n   o  In \"meta\", the value of field \"cost-type\"\
    \ will be ignored by the\n      receiver and set to {}.  Instead, the field \"\
    multi-cost-types\" is\n      added with the same value as the \"multi-cost-types\"\
    \ input\n      parameter.\n   o  The costs are JSONArrays instead of JSONNumbers.\
    \  All arrays have\n      the same cardinality as the \"multi-cost-types\" input\
    \ parameter and\n      contain the cost type values in that order.  If a cost\
    \ type is not\n      available for a particular source and destination, the ALTO\
    \ Server\n      MUST use the JSON \"null\" value for that array element.  If none\
    \ of\n      the cost types are available for a particular source and\n      destination,\
    \ the ALTO Server MAY omit the entry for that source\n      and destination.\n"
- title: 4.2.  Endpoint Cost Service Extensions
  contents:
  - "4.2.  Endpoint Cost Service Extensions\n   This document extends the Endpoint\
    \ Cost Service, as defined in\n   Section 11.5.1 of [RFC7285], by adding new input\
    \ parameters and\n   capabilities and by returning JSONArrays instead of JSONNumbers\
    \ as\n   the cost values.\n   The media type, HTTP method, and \"uses\" specifications\
    \ (described in\n   Sections 11.5.1.1, 11.5.1.2, and 11.5.1.5 of [RFC7285], respectively)\n\
    \   are unchanged.\n"
- title: 4.2.1.  Capabilities
  contents:
  - "4.2.1.  Capabilities\n   The extensions to the Endpoint Cost Service capabilities\
    \ are\n   identical to the extensions to the Filtered Cost Map (see\n   Section\
    \ 4.1.1).\n"
- title: 4.2.2.  Accept Input Parameters
  contents:
  - "4.2.2.  Accept Input Parameters\n   The ReqEndpointCostMap object in Section\
    \ 11.5.1.3 of [RFC7285] is\n   extended as follows:\n       object {\n       \
    \   [CostType cost-type;]\n          [CostType multi-cost-types<1..*>;]\n    \
    \      [CostType testable-cost-types<1..*>;]\n          [JSONString constraints<0..*>;]\n\
    \          [JSONString or-constraints<1..*><1..*>;]\n          EndpointFilter\
    \ endpoints;\n       } ReqEndpointCostMap;\n   cost-type:  As defined in Section\
    \ 11.5.1.3 of [RFC7285], with the\n      additional requirement that the Client\
    \ MUST specify either \"cost-\n      type\" or \"multi-cost-types\" but MUST NOT\
    \ specify both.\n   multi-cost-types:  If present, the ALTO Server MUST return\
    \ array-\n      valued costs for the cost types in this list.  For each entry,\
    \ the\n      \"cost-metric\" and \"cost-mode\" fields MUST match one of the\n\
    \      supported cost types indicated in this resource's \"capabilities\"\n  \
    \    field (Section 4.2.1).  The Client MUST NOT use this field unless\n     \
    \ this resource's \"max-cost-types\" capability exists and has a value\n     \
    \ greater than 0.  This field MUST NOT have more than \"max-cost-\n      types\"\
    \ cost types.  The Client MUST specify either \"cost-type\" or\n      \"multi-cost-types\"\
    \ but MUST NOT specify both.\n      Note that if \"multi-cost-types\" has one\
    \ cost type, the values in\n      the cost map will be arrays with one value.\n\
    \   testable-cost-types, constraints, or-constraints:  Defined\n      equivalently\
    \ to the corresponding input parameters for an extended\n      filtered cost map\
    \ (Section 4.1.2).\n   endpoints:  As defined in Section 11.5.1.3 of [RFC7285].\n"
- title: 4.2.3.  Response
  contents:
  - "4.2.3.  Response\n   The extensions to the Endpoint Cost Service response are\
    \ similar to\n   the extensions to the Filtered Cost Map response (Section 4.1.3).\n\
    \   Specifically, if the Client specifies the \"cost-type\" input\n   parameter,\
    \ the response is exactly as defined in Section 11.5.1.6 of\n   [RFC7285].  If\
    \ the Client provides the \"multi-cost-types\" instead,\n   then the response\
    \ is changed as follows:\n   o  In \"meta\", the value of field \"cost-type\"\
    \ will be ignored by the\n      receiver and set to {}.  Instead, the field \"\
    multi-cost-types\" is\n      added with the same value as the \"multi-cost-types\"\
    \ input\n      parameter.\n   o  The costs are JSONArrays instead of JSONNumbers.\
    \  All arrays have\n      the same cardinality as the \"multi-cost-types\" input\
    \ parameter and\n      contain the cost type values in that order.  If a cost\
    \ type is not\n      available for a particular source and destination, the ALTO\
    \ Server\n      MUST use the JSON \"null\" value for that array element.  If none\
    \ of\n      the cost types are available for a particular source and\n      destination,\
    \ the ALTO Server MAY omit the entry for that source\n      and destination.\n"
- title: 5.  Examples
  contents:
  - "5.  Examples\n   This section provides examples of multi-cost ALTO transactions.\
    \  It\n   uses cost metrics, in addition to the mandatory legacy \"routingcost\"\
    ,\n   that are deliberately irrelevant and not registered with IANA.\n"
- title: 5.1.  Information Resource Directory
  contents:
  - "5.1.  Information Resource Directory\n   The following is an example of an ALTO\
    \ Server's Information Resource\n   Directory.  In addition to network and cost\
    \ map resources, it defines\n   two Filtered Cost Maps and an Endpoint Cost Service,\
    \ which all\n   understand the multi-cost extensions.\n   GET /directory HTTP/1.1\n\
    \   Host: alto.example.com\n   Accept: application/alto-directory+json,application/alto-error+json\n\
    \   HTTP/1.1 200 OK\n   Content-Length: 2704\n   Content-Type: application/alto-directory+json\n\
    \   {\n     \"meta\" : {\n       \"default-alto-network-map\" : \"my-default-network-map\"\
    ,\n       \"cost-types\" : {\n         \"num-routing\" : {\n           \"cost-mode\"\
    \ : \"numerical\",\n           \"cost-metric\" : \"routingcost\"\n         },\n\
    \         \"num-shoesize\" : {\n           \"cost-mode\" : \"numerical\",\n  \
    \         \"cost-metric\" : \"shoesize\"\n         },\n         \"num-scenery\"\
    \ : {\n           \"cost-mode\" : \"numerical\",\n           \"cost-metric\" :\
    \ \"sceneryrate\"\n         }\n       }\n     },\n     \"resources\" : {\n   \
    \    \"my-default-network-map\" : {\n         \"uri\" : \"http://alto.example.com/networkmap\"\
    ,\n         \"media-type\" : \"application/alto-networkmap+json\"\n       },\n\
    \       \"numerical-routing-cost-map\" : {\n         \"uri\" : \"http://alto.example.com/costmap/num-routing\"\
    ,\n         \"media-type\" : \"application/alto-costmap+json\",\n         \"uses\"\
    \ : [ \"my-default-network-map\" ],\n         \"capabilities\" : {\n         \
    \  \"cost-type-names\" : [ \"num-routing\" ]\n         }\n       },\n       \"\
    numerical-shoesize-cost-map\" : {\n         \"uri\" : \"http://alto.example.com/costmap/num-shoesize\"\
    ,\n         \"media-type\" : \"application/alto-costmap+json\",\n         \"uses\"\
    \ : [ \"my-default-network-map\" ],\n         \"capabilities\" : {\n         \
    \  \"cost-type-names\" : [ \"num-shoesize\" ]\n         }\n       },\n       \"\
    filtered-multicost-map\" : {\n         \"uri\" : \"http://alto.example.com/multi/costmap/filtered\"\
    ,\n         \"media-type\" : \"application/alto-costmap+json\",\n         \"accepts\"\
    \ : \"application/alto-costmapfilter+json\",\n         \"uses\" : [ \"my-default-network-map\"\
    \ ],\n         \"capabilities\" : {\n           \"cost-constraints\" : true,\n\
    \           \"max-cost-types\" : 2,\n           \"cost-type-names\" : [ \"num-routingcost\"\
    ,\n                                 \"num-shoesize\" ]\n         }\n       },\n\
    \       \"filtered-cost-map-extended\" : {\n         \"uri\" : \"http://alto.example.com/multi/extn/costmap/filtered\"\
    ,\n         \"media-type\" : \"application/alto-costmap+json\",\n         \"accepts\"\
    \ : \"application/alto-costmapfilter+json\",\n         \"uses\" : [ \"my-default-network-map\"\
    \ ],\n         \"capabilities\" : {\n           \"max-cost-types\" : 3,\n    \
    \       \"cost-type-names\" : [ \"num-routingcost\",\n                       \
    \          \"num-shoesize\",\n                                 \"num-scenery\"\
    ],\n           \"testable-cost-type-names\" : [ \"num-routingcost\",\n       \
    \                                   \"num-shoesize\" ]\n         }\n       },\n\
    \       \"endpoint-multicost-map\" : {\n         \"uri\" : \"http://alto.example.com/multi/endpointcost/lookup\"\
    ,\n         \"media-type\" : \"application/alto-endpointcost+json\",\n       \
    \  \"accepts\" : \"application/alto-endpointcostparams+json\",\n         \"uses\"\
    \ : [ \"my-default-network-map\" ],\n         \"capabilities\" : {\n         \
    \  \"cost-constraints\" : true,\n           \"max-cost-types\" : 2,\n        \
    \   \"cost-type-names\" : [ \"num-routingcost\",\n                           \
    \      \"num-shoesize\" ]\n         }\n       }\n     }\n   }\n"
- title: '5.2.  Multi-Cost Filtered Cost Map: Example #1'
  contents:
  - "5.2.  Multi-Cost Filtered Cost Map: Example #1\n   This example illustrates a\
    \ simple multi-cost ALTO transaction.  The\n   ALTO Server provides two cost types,\
    \ \"routingcost\" and \"shoesize\",\n   both in \"numerical\" mode.  The Client\
    \ wants the entire multi-cost\n   map.  The Server does not know the value of\
    \ \"routingcost\" between\n   PID2 and PID3 and hence returns the value 'null'\
    \ for \"routingcost\"\n   between PID2 and PID3.\n   POST /multi/costmap/filtered\"\
    \ HTTP/1.1\n   Host: alto.example.com\n   Accept: application/alto-costmap+json,application/alto-error+json\n\
    \   Content-Type: application/alto-costmapfilter+json\n   Content-Length: 206\n\
    \   {\n     \"multi-cost-types\": [\n       {\"cost-mode\": \"numerical\", \"\
    cost-metric\": \"routingcost\"},\n       {\"cost-mode\": \"numerical\", \"cost-metric\"\
    : \"shoesize\"}\n     ],\n     \"pids\" : {\n       \"srcs\" : [ ],\n       \"\
    dsts\" : [ ]\n     }\n   }\n   HTTP/1.1 200 OK\n   Content-Type: application/alto-costmap+json\n\
    \   Content-Length: 549\n   {\n    \"meta\" : {\n      \"dependent-vtags\" : [\n\
    \        {\"resource-id\": \"my-default-network-map\",\n         \"tag\": \"3ee2cb7e8d63d9fab71b9b34cbf764436315542e\"\
    \n        }\n      ],\n      \"cost-type\" : {},\n      \"multi-cost-types\" :\
    \ [\n        {\"cost-mode\": \"numerical\", \"cost-metric\": \"routingcost\"},\n\
    \        {\"cost-mode\": \"numerical\", \"cost-metric\": \"shoesize\"}\n     \
    \ ]\n    }\n    \"cost-map\" : {\n      \"PID1\": { \"PID1\":[1,0],   \"PID2\"\
    :[4,3],    \"PID3\":[10,2]   },\n      \"PID2\": { \"PID1\":[15,5],  \"PID2\"\
    :[1,0],    \"PID3\":[null,9] },\n      \"PID3\": { \"PID1\":[20,12], \"PID2\"\
    :[null,1], \"PID3\":[1,0]    }\n    }\n   }\n"
- title: '5.3.  Multi-Cost Filtered Cost Map: Example #2'
  contents:
  - "5.3.  Multi-Cost Filtered Cost Map: Example #2\n   This example uses constraints\
    \ to restrict the returned source/\n   destination PID pairs to those with \"\
    routingcost\" between 5 and 10 or\n   \"shoesize\" equal to 0.\n   POST /multi/costmap/filtered\
    \ HTTP/1.1\n   Host: alto.example.com\n   Accept: application/alto-costmap+json,application/alto-error+json\n\
    \   Content-Type: application/alto-costmapfilter+json\n   Content-Length: 333\n\
    \   {\n     \"multi-cost-types\" : [\n       {\"cost-mode\": \"numerical\", \"\
    cost-metric\": \"routingcost\"},\n       {\"cost-mode\": \"numerical\", \"cost-metric\"\
    : \"shoesize\"}\n     ],\n     \"or-constraints\" : [ [\"[0] ge 5\", \"[0] le\
    \ 10\"],\n                          [\"[1] eq 0\"] ]\n     \"pids\" : {\n    \
    \   \"srcs\" : [ \"PID1\", \"PID2\" ],\n       \"dsts\" : [ \"PID1\", \"PID2\"\
    , \"PID3\" ]\n     }\n   }\n   HTTP/1.1 200 OK\n   Content-Type: application/alto-costmap+json\n\
    \   Content-Length: 461\n   {\n     \"meta\" : {\n       \"dependent-vtags\" :\
    \ [\n         {\"resource-id\": \"my-default-network-map\",\n          \"tag\"\
    : \"3ee2cb7e8d63d9fab71b9b34cbf764436315542e\"\n         }\n       ],\n      \
    \ \"cost-type\" : {},\n       \"multi-cost-types\" : [\n         {\"cost-mode\"\
    : \"numerical\", \"cost-metric\": \"routingcost\"},\n         {\"cost-mode\":\
    \ \"numerical\", \"cost-metric\": \"shoesize\"}\n       ]\n     }\n     \"cost-map\"\
    \ : {\n       \"PID1\": { \"PID1\": [1,0], \"PID3\": [10,5] },\n       \"PID2\"\
    : { \"PID2\": [1,0]                 }\n     }\n   }\n"
- title: '5.4.  Multi-Cost Filtered Cost Map: Example #3'
  contents:
  - "5.4.  Multi-Cost Filtered Cost Map: Example #3\n   This example uses extended\
    \ constraints to limit the response to cost\n   points with (\"routingcost\" <=\
    \ 10 AND \"shoesize\" <= 2), OR else\n   (\"routingcost\" <= 3 AND \"shoesize\"\
    \ <= 6).  Unlike the previous\n   example, the Client is only interested in the\
    \ \"routingcost\" cost type\n   and uses the \"cost-type\" parameter instead of\
    \ \"multi-cost-types\" to\n   tell the Server to return scalar costs instead of\
    \ array costs.\n   In this example, \"[0]\" means the constraint applies to \"\
    routingcost\"\n   because that is the first cost type in the \"testable-cost-types\"\
    \n   parameter.  (If \"testable-cost-types\" is omitted, it is assumed to be\n\
    \   the same as \"multi-cost-types\".)  The choice of using an index to\n   refer\
    \ to cost types aims at minimizing the length of the expression\n   of constraints,\
    \ especially for those combining several OR and AND\n   expressions.  It was also\
    \ the shortest path from the constraints\n   design in [RFC7285].\n   POST /multi/multicostmap/filtered\
    \ HTTP/1.1\n   Host: alto.example.com\n   Accept: application/alto-costmap+json,application/alto-error+json\n\
    \   Content-Type: application/alto-costmapfilter+json\n   Content-Length: 390\n\
    \   {\n     \"cost-type\" : {\n       \"cost-mode\": \"numerical\", \"cost-metric\"\
    : \"routingcost\"\n     },\n     \"testable-cost-types\" : [\n       {\"cost-mode\"\
    : \"numerical\", \"cost-metric\": \"routingcost\"},\n       {\"cost-mode\": \"\
    numerical\", \"cost-metric\": \"shoesize\"}\n     ],\n     \"or-constraints\"\
    : [\n            [\"[0] le 10\", \"[1] le 2\"],\n            [\"[0] le 3\",  \"\
    [1] le 6\"]\n     ],\n     \"pids\" : {\n       \"srcs\" : [ ],\n       \"dsts\"\
    \ : [ ]\n     }\n   }\n   HTTP/1.1 200 OK\n   Content-Type: application/alto-costmap+json\n\
    \   Content-Length: 368\n   {\n     \"meta\" : {\n       \"dependent-vtags\" :\
    \ [\n         {\"resource-id\": \"my-default-network-map\",\n          \"tag\"\
    : \"3ee2cb7e8d63d9fab71b9b34cbf764436315542e\"\n         }\n       ],\n      \
    \ \"cost-type\" : {\n         \"cost-mode\": \"numerical\", \"cost-metric\": \"\
    routingcost\"\n       }\n     }\n     \"cost-map\" : {\n       \"PID1\": { \"\
    PID1\": 1, \"PID3\": 10 },\n       \"PID2\": { \"PID2\": 1 },\n       \"PID3\"\
    : { \"PID3\": 1 }\n     }\n   }\n"
- title: '5.5.  Multi-Cost Filtered Cost Map: Example #4'
  contents:
  - "5.5.  Multi-Cost Filtered Cost Map: Example #4\n   This example uses extended\
    \ constraints to limit the response to cost\n   points with (\"routingcost\" <=\
    \ 10 AND \"shoesize\" <= 2), OR else\n   (\"routingcost\" <= 3 AND \"shoesize\"\
    \ <= 6).  In this example, the\n   Client is interested in the \"routingcost\"\
    \ and \"sceneryrate\" cost\n   metrics but not in the \"shoesize\" metric:\n \
    \  POST /multi/extn/costmap/filtered HTTP/1.1\n   Host: alto.example.com\n   Accept:\
    \ application/alto-costmap+json,application/alto-error+json\n   Content-Type:\
    \ application/alto-costmapfilter+json\n   Content-Length: 461\n   {\n     \"multi-cost-types\"\
    \ : [\n       {\"cost-mode\": \"numerical\", \"cost-metric\": \"routingcost\"\
    },\n       {\"cost-mode\": \"numerical\", \"cost-metric\": \"sceneryrate\"}\n\
    \     ],\n     \"testable-cost-types\" : [\n       {\"cost-mode\": \"numerical\"\
    , \"cost-metric\": \"routingcost\"},\n       {\"cost-mode\": \"numerical\", \"\
    cost-metric\": \"shoesize\"}\n     ],\n     \"or-constraints\": [\n          \
    \  [\"[0] le 10\", \"[1] le 2\"],\n            [\"[0] le 3\",  \"[1] le 6\"]\n\
    \     ],\n     \"pids\" : {\n       \"srcs\" : [ ],\n       \"dsts\" : [ ]\n \
    \    }\n   }\n   HTTP/1.1 200 OK\n   Content-Type: application/alto-costmap+json\n\
    \   Content-Length: 481\n   {\n     \"meta\" : {\n       \"dependent-vtags\" :\
    \ [\n         {\"resource-id\": \"my-default-network-map\",\n          \"tag\"\
    : \"3ee2cb7e8d63d9fab71b9b34cbf764436315542e\"\n         }\n       ],\n      \
    \ \"cost-type\" : {},\n       \"multi-cost-types\" : [\n         {\"cost-mode\"\
    : \"numerical\", \"cost-metric\": \"routingcost\"},\n         {\"cost-mode\":\
    \ \"numerical\", \"cost-metric\": \"sceneryrate\"}\n       ]\n     }\n     \"\
    cost-map\" : {\n       \"PID1\": { \"PID1\": [1,16] \"PID3\": [10,19] },\n   \
    \    \"PID2\": { \"PID2\": [1,8] },\n       \"PID3\": { \"PID3\": [1,19] }\n \
    \    }\n   }\n"
- title: 5.6.  Endpoint Cost Service
  contents:
  - "5.6.  Endpoint Cost Service\n   This example uses the Endpoint Cost Service to\
    \ retrieve the\n   \"routingcost\" and \"shoesize\" for selected endpoints, limiting\
    \ the\n   response to costs with either low \"shoesize\" and reasonable\n   \"\
    routingcost\" (\"shoesize\" <= 2 AND \"routingcost\" <= 10), OR else low\n   \"\
    routingcost\" and reasonable \"shoesize\" (\"routingcost\" <= 3 AND\n   \"shoesize\"\
    \ <= 6).\n   POST /multi/endpointcost/lookup HTTP/1.1\n   Host: alto.example.com\n\
    \   Accept: application/alto-endpointcost+json,\n           application/alto-error+json\n\
    \   Content-Type: application/alto-endpoincostparams+json\n   Content-Length:\
    \ 455\n   {\n     \"multi-cost-types\" : [\n       {\"cost-mode\": \"numerical\"\
    , \"cost-metric\": \"routingcost\"},\n       {\"cost-mode\": \"numerical\", \"\
    cost-metric\": \"shoesize\"}\n     ],\n     \"or-constraints\": [\n          \
    \  [\"[0] le 10\", \"[1] le 2\"],\n            [\"[0] le 3\",  \"[1] le 6\"]\n\
    \     ],\n     \"endpoints\" : {\n       \"srcs\": [ \"ipv4:192.0.2.2\", \"ipv6:2001:db8::1:0\
    \ ],\n       \"dsts\": [\n         \"ipv4:192.0.2.89\",\n         \"ipv4:198.51.100.34\"\
    ,\n         \"ipv4:203.0.113.45\",\n         \"ipv6:2001:db8::10\"\n       ]\n\
    \     }\n   }\n   HTTP/1.1 200 OK\n   Content-Length: 419\n   Content-Type: application/alto-endpointcost+json\n\
    \   {\n     \"meta\" : {\n       \"multi-cost-types\" : [\n         {\"cost-mode\"\
    : \"numerical\", \"cost-metric\": \"routingcost\"},\n         {\"cost-mode\":\
    \ \"numerical\", \"cost-metric\": \"shoesize\"}\n       ]\n     }\n     \"endpoint-cost-map\"\
    \ : {\n       \"ipv4:192.0.2.2\": {\n         \"ipv4:192.0.2.89\":    [15, 5],\n\
    \         \"ipv4:203.0.113.45\":  [4, 23]\n       }\n       \"ipv6:2001:db8::1:0\"\
    : {\n         \"ipv4:198.51.100.34\": [16, 5],\n         \"ipv6:2001:db8::10\"\
    :  [10, 2]\n       }\n     }\n   }\n"
- title: 6.  IANA Considerations
  contents:
  - "6.  IANA Considerations\n   This document does not define any new media types\
    \ or introduce any\n   new IANA considerations.\n"
- title: 7.  Privacy and Security Considerations
  contents:
  - "7.  Privacy and Security Considerations\n   This document does not introduce\
    \ any privacy or security issues not\n   already present in the ALTO protocol.\n\
    \   The multi-cost optimization even tends to reduce the on-the-wire data\n  \
    \ exchange volume compared to multiple single cost ALTO transactions.\n   Likewise,\
    \ the risk related to massive multi-cost requests is\n   moderated by the fact\
    \ that multi-cost constraints additionally filter\n   ALTO Server responses and\
    \ thus reduce their volume.\n   Note that, because queries for multiple metrics\
    \ represent a stronger\n   fingerprinting signal than queries for a single metric,\n\
    \   implementations of this protocol may leak more information about the\n   ALTO\
    \ Client than would occur with a succession of individual queries.\n   Though,\
    \ in many cases, it would already be possible to link those\n   queries by using\
    \ the source IP address or other existing information.\n"
- title: 8.  References
  contents:
  - '8.  References

    '
- title: 8.1.  Normative References
  contents:
  - "8.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n  \
    \            DOI 10.17487/RFC2119, March 1997,\n              <https://www.rfc-editor.org/info/rfc2119>.\n\
    \   [RFC7285]  Alimi, R., Ed., Penno, R., Ed., Yang, Y., Ed., Kiesel, S.,\n  \
    \            Previdi, S., Roome, W., Shalunov, S., and R. Woundy,\n          \
    \    \"Application-Layer Traffic Optimization (ALTO) Protocol\",\n           \
    \   RFC 7285, DOI 10.17487/RFC7285, September 2014,\n              <https://www.rfc-editor.org/info/rfc7285>.\n\
    \   [RFC8174]  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n     \
    \         2119 Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n        \
    \      May 2017, <https://www.rfc-editor.org/info/rfc8174>.\n"
- title: 8.2.  Informative References
  contents:
  - "8.2.  Informative References\n   [RFC7159]  Bray, T., Ed., \"The JavaScript Object\
    \ Notation (JSON) Data\n              Interchange Format\", RFC 7159, DOI 10.17487/RFC7159,\
    \ March\n              2014, <https://www.rfc-editor.org/info/rfc7159>.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   The authors would like to thank Richard Alimi, Fred Baker,\
    \ Dhruv\n   Dhodi, Vijay Gurbani, Dave Mac Dysan, Young Lee, and Richard Yang\
    \ for\n   fruitful discussions and feedback on this document and earlier draft\n\
    \   versions.  Gao Kai, Hans Seidel, Richard Yang, Qiao Xiang, and Wang\n   Xin\
    \ provided substantial review feedback and suggestions to the\n   protocol design.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Sabine Randriamasy\n   Nokia Bell Labs\n   Route de Villejust\n\
    \   Nozay  91460\n   France\n   Email: Sabine.Randriamasy@nokia-bell-labs.com\n\
    \   Wendy Roome\n   Nokia Bell Labs\n   124 Burlington Rd\n   Murray Hill, NJ\
    \  07974\n   United States of America\n   Email: ietf@wdroome.com\n   Nico Schwan\n\
    \   Thales Deutschland\n   Lorenzstrasse 10\n   Stuttgart  70435\n   Germany\n\
    \   Email: nico.schwan@thalesgroup.com\n"
