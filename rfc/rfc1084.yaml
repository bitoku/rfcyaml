- title: __initial_text__
  contents:
  - '                  BOOTP Vendor Information Extensions

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo describes an addition to the Bootstrap Protocol\
    \ (BOOTP).\n   Comments and suggestions for improvements are sought.  Distribution\n\
    \   of this memo is unlimited.\n"
- title: Introduction
  contents:
  - "Introduction\n   This RFC is a slight revision and extension of RFC-1048 by Philip\n\
    \   Prindeville, who should be credited with the original work in this\n   memo.\
    \  This memo will be updated as additional tags are are defined.\n   This edition\
    \ introduces Tag 13 for Boot File Size.\n   As workstations and personal computers\
    \ proliferate on the Internet,\n   the administrative complexity of maintaining\
    \ a network is increased\n   by an order of magnitude.  The assignment of local\
    \ network resources\n   to each client represents one such difficulty.  In most\
    \ environments,\n   delegating such responsibility to the user is not plausible\
    \ and,\n   indeed, the solution is to define the resources in uniform terms, and\n\
    \   to automate their assignment.\n   The basic Bootstrap Protocol [RFC-951] dealt\
    \ with the issue of\n   assigning an internet address to a client, as well as\
    \ a few other\n   resources.  The protocol included provisions for vendor-defined\n\
    \   resource information.\n   This memo defines a (potentially) vendor-independent\
    \ interpretation\n   of this resource information.\n"
- title: Overview of BOOTP
  contents:
  - "Overview of BOOTP\n   While the Reverse Address Resolution (RARP) Protocol [RFC-903]\
    \ may be\n   used to assign an IP address to a local network hardware address,\
    \ it\n   provides only part of the functionality needed.  Though this protocol\n\
    \   can be used in conjunction with other supplemental protocols (the\n   Resource\
    \ Location Protocol [RFC-887], the Domain Name System [RFC-\n   1034]), a more\
    \ integrated solution may be desirable.\n   Bootstrap Protocol (BOOTP) is a UDP/IP-based\
    \ protocol that allows a\n   booting host to configure itself dynamically, and\
    \ more significantly,\n   without user supervision.  It provides a means to assign\
    \ a host its\n   IP address, a file from which to download a boot program from\
    \ some\n   server, that server's address, and (if present) the address of an\n\
    \   Internet gateway.\n   One obvious advantage of this procedure is the centralized\
    \ management\n   of network addresses, which eliminates the need for per-host\
    \ unique\n   configuration files.  In an environment with several hundred hosts,\n\
    \   maintaining local configuration information and operating system\n   versions\
    \ specific to each host might otherwise become chaotic.  By\n   categorizing hosts\
    \ into classes and maintaining configuration\n   information and boot programs\
    \ for each class, the complexity of this\n   chore may be reduced in magnitude.\n"
- title: BOOTP Vendor Information Format
  contents:
  - "BOOTP Vendor Information Format\n   The full description of the BOOTP request/reply\
    \ packet format may be\n   found in [RFC-951].  The rest of this document will\
    \ concern itself\n   with the last field of the packet, a 64 octet area reserved\
    \ for\n   vendor information, to be used in a hitherto unspecified fashion.  A\n\
    \   generalized use of this area for giving information useful to a wide\n   class\
    \ of machines, operating systems, and configurations follows.  In\n   situations\
    \ where a single BOOTP server is to be used among\n   heterogeneous clients in\
    \ a single site, a generic class of data may\n   be used.\n   Vendor Information\
    \ \"Magic Cookie\"\n      As suggested in [RFC-951], the first four bytes of this\
    \ field have\n      been assigned to the magic cookie, which identifies the mode\
    \ in\n      which the succeeding data is to be interpreted.  The value of the\n\
    \      magic cookie is the 4 octet dotted decimal 99.130.83.99 (or\n      hexadecimal\
    \ number 63.82.53.63) in network byte order.\n   Format of Individual Fields\n\
    \      The vendor information field has been implemented as a free\n      format,\
    \ with extendable tagged sub-fields.  These sub-fields are\n      length tagged\
    \ (with exceptions; see below), allowing clients not\n      implementing certain\
    \ types to correctly skip fields they cannot\n      interpret.  Lengths are exclusive\
    \ of the tag and length octets;\n      all multi-byte quantities are in network\
    \ byte-order.\n      Fixed Length Data\n         The fixed length data are comprised\
    \ of two formats.  Those that\n         have no data consist of a single tag octet\
    \ and are implicitly\n         of one-octet length, while those that contain data\
    \ consist of\n         one tag octet, one length octet, and length octets of data.\n\
    \         Pad Field (Tag: 0, Data: None)\n            May be used to align subsequent\
    \ fields to word boundaries\n            required by the target machine (i.e.,\
    \ 32-bit quantities such\n            as IP addresses on 32-bit boundaries).\n\
    \         Subnet Mask Field (Tag: 1, Data: 4 subnet mask bytes)\n            Specifies\
    \ the net and local subnet mask as per the standard\n            on subnetting\
    \ [RFC-950].  For convenience, this field must\n            precede the GATEWAY\
    \ field (below), if present.\n         Time Offset Field (Tag: 2, Data: 4 time\
    \ offset bytes)\n            Specifies the time offset of the local subnet in\
    \ seconds\n            from Coordinated Universal Time (UTC); signed 32-bit\n\
    \            integer.\n         End Field (Tag: 255, Data: None)\n           \
    \ Specifies end of usable data in the vendor information area.\n            The\
    \ rest of this field should be filled with PAD zero)\n            octets.\n  \
    \    Variable Length Data\n         The variable length data has a single format;\
    \ it consists of\n         one tag octet, one length octet, and length octets\
    \ of data.\n         Gateway Field (Tag: 3, Data: N address bytes)\n         \
    \   Specifies the IP addresses of N/4 gateways for this subnet.\n            If\
    \ one of many gateways is preferred, that should be first.\n         Time Server\
    \ Field (Tag: 4, Data: N address bytes)\n            Specifies the IP addresses\
    \ of N/4 time servers [RFC-868].\n         IEN-116 Name Server Field (Tag: 5,\
    \ Data: N address bytes)\n            Specifies the IP addresses of N/4 name servers\
    \ [IEN-116].\n         Domain Name Server Field (Tag: 6, Data: N address bytes)\n\
    \            Specifies the IP addresses of N/4 domain name servers RFC-\n    \
    \        1034].\n         Log Server Field (Tag: 7, Data: N address bytes)\n \
    \           Specifies the IP addresses of N/4 MIT-LCS UDP log server\n       \
    \     [LOGGING].\n         Cookie/Quote Server Field (Tag: 8, Data: N address\
    \ bytes)\n            Specifies the IP addresses of N/4 Quote of the Day servers\n\
    \            [RFC-865].\n         LPR Server Field (Tag: 9, Data: N address bytes)\n\
    \            Specifies the IP addresses of N/4 Berkeley 4BSD printer\n       \
    \     servers [LPD].\n         Impress Server Field (Tag: 10, Data: N address\
    \ bytes)\n            Specifies the IP addresses of N/4 Impress network image\n\
    \            servers [IMAGEN].\n         RLP Server Field (Tag: 11, Data: N address\
    \ bytes)\n            Specifies the IP addresses of N/4 Resource Location Protocol\n\
    \            (RLP) servers [RFC-887].\n         Hostname (Tag: 12, Data: N bytes\
    \ of hostname)\n            Specifies the name of the client. The name may or\
    \ may not\n            domain qualified: this is a site-specific issue.\n    \
    \     Boot File Size (Tag: 13, Data: 2)\n            A two octet value (in network\
    \ order) specifying the number\n            of 512 octet blocks in the default\
    \ boot file.  Informs BOOTP\n            client how large the BOOTP file image\
    \ is.\n         Reserved Fields (Tag: 128-254, Data: N bytes of undefined\n  \
    \       content)\n            Specifies additional site-specific information,\
    \ to be\n            interpreted on an implementation-specific basis.  This\n\
    \            should follow all data with the preceding generic tags 0-\n     \
    \       127).\n"
- title: Extensions
  contents:
  - "Extensions\n   Additional generic data fields may be registered by contacting:\n\
    \          Joyce K. Reynolds\n          USC - Information Sciences Institute\n\
    \          4676 Admiralty Way\n          Marina del Rey, California  90292-6695\n\
    \          or by E-mail as: JKREYNOLDS@ISI.EDU\n          (nic handle JKR1).\n\
    \   Implementation specific use of undefined generic types (those in the\n   range\
    \ 12-127) may conflict with other implementations, and\n   registration is required.\n\
    \   When selecting information to put into the vendor specific area, care\n  \
    \ should be taken to not exceed the 64 byte length restriction.\n   Nonessential\
    \ information (such as host name and quote of the day\n   server) may be excluded,\
    \ which may later be located with a more\n   appropriate service protocol, such\
    \ as RLP or the WKS resource-type of\n   the domain name system.  Indeed, even\
    \ RLP servers may be discovered\n   using a broadcast request to locate a local\
    \ RLP server.\n"
- title: Comparison to Alternative Approaches
  contents:
  - "Comparison to Alternative Approaches\n   Extending BOOTP to provide more configuration\
    \ information than the\n   minimum required by boot PROMs may not be necessary.\
    \  Rather than\n   having each module in a host (e.g., the time module, the print\n\
    \   spooler, the domain name resolver) broadcast to the BOOTP server to\n   obtain\
    \ the addresses of required servers, it would be better for each\n   of them to\
    \ multicast directly to the particular server group of\n   interest, possibly\
    \ using \"expanding ring\" multicasts.\n   The multicast approach has the following\
    \ advantages over the BOOTP\n   approach:\n    - It eliminates dependency on a\
    \ third party (the BOOTP server) that\n    may be temporarily unavailable or whose\
    \ database may be incorrect or\n    incomplete.  Multicasting directly to the\
    \ desired services will\n    locate those servers that are currently available,\
    \ and only those.\n    - It reduces the administrative chore of keeping the (probably\n\
    \    replicated) BOOTP database up-to-date and consistent.  This is\n    especially\
    \ important in an environment with a growing number of\n    services and an evolving\
    \ population of servers.\n    - In some cases, it reduces the amount of packet\
    \ traffic and/or the\n    delay required to get the desired information.  For\
    \ example, the\n    current time can be obtained by a single multicast to a time\
    \ server\n    group which evokes replies from those time servers that are\n  \
    \  currently up.  The BOOTP approach would require a broadcast to the\n    BOOTP\
    \ server, a reply from the BOOTP server, one or more unicasts to\n    time servers\
    \ (perhaps waiting for long timeouts if the initially\n    chosen server(s) are\
    \ down), and finally a reply from a server.\n   One apparent advantage of the\
    \ proposed BOOTP extensions is that they\n   provide a uniform way to locate servers.\
    \  However, the multicast\n   approach could also be implemented in a consistent\
    \ way across\n   multiple services.  The V System naming protocol is a good example\
    \ of\n   this; character string pathnames are used to name any number of\n   resources\
    \ (i.e., not just files) and a standard subroutine library\n   looks after multicasting\
    \ to locate the resources, caching the\n   discovered locations, and detecting\
    \ stale cache data.\n   Another apparent advantage of the BOOTP approach is that\
    \ it allows an\n   administrator to easily control which hosts use which servers.\
    \  The\n   multicast approach favors more distributed control over resource\n\
    \   allocation, where each server decides which hosts it will serve,\n   using\
    \ whatever level of authentication is appropriate for the\n   particular service.\
    \  For example, time servers usually don't care who\n   they serve (i.e., administrative\
    \ control via the BOOTP database is\n   unnecessary), whereas file servers usually\
    \ require strong\n   authentication (i.e., administrative control via the BOOTP\
    \ database\n   is insufficient).\n   The main drawback of the multicast approach,\
    \ of course, is that IP\n   multicasting is not widely implemented, and there\
    \ is a need to locate\n   existing services which do not understand IP multicasts.\n\
    \   The BOOTP approach may be most efficient in the case that all the\n   information\
    \ needed by the client host is returned by a single BOOTP\n   reply and each program\
    \ module simply reads the information it needs\n   from a local table filled in\
    \ by the BOOTP reply.\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   The following people provided helpful comments on the first\
    \ edition\n   of this memo: Drew Perkins, of Carnagie Mellon University, Bill\n\
    \   Croft, of Stanford University, and co-author of BOOTP, and Steve\n   Deering,\
    \ also of Stanford University, for contributing the\n   \"Comparison to Alternative\
    \ Approaches\" section.\n"
- title: References
  contents:
  - "References\n   [RFC-951]   Croft, B., and J. Gilmore, \"Bootstrap Protocol\"\
    , Network\n               Information Center, SRI International, Menlo Park,\n\
    \               California, September 1985.\n   [RFC-903]   Finlayson, R., T.\
    \ Mann, J. Mogul, and M. Theimer, \"A\n               Reverse Address Resolution\
    \ Protocol\", Network Information\n               Center, SRI International, Menlo\
    \ Park, California, June\n               1984.\n   [RFC-887]   Accetta, M., \"\
    Resource Location Protocol\", Network\n               Information Center, SRI\
    \ International, Menlo Park,\n               California, December 1983.\n   [RFC-1034]\
    \  Mockapetris, P., \"Domain Names - Concepts and\n               Facilities\"\
    , Network Information Center, SRI\n               International, Menlo Park, California,\
    \ November 1987.\n   [RFC-950]   Mogul, J., \"Internet Standard Subnetting Procedure\"\
    ,\n               Network Information Center, SRI International, Menlo\n     \
    \          Park, California, August 1985.\n   [RFC-868]   Postel, J., \"Time Protocol\"\
    , Network Information Center,\n               SRI International, Menlo Park, California,\
    \ May 1983.\n   [IEN-116]   Postel, J., \"Internet Name Server\", Network Information\n\
    \               Center, SRI International, Menlo Park, California, August\n  \
    \             1979.\n   [LOGGING]   Clark, D., Logging and Status Protocol\",\
    \ Massachusetts\n               Institute of Technology Laboratory for Computer\
    \ Science,\n               Cambridge, Massachusetts, 1981.\n   [RFC-865]   Postel,\
    \ J., \"Quote of the Day Protocol\", Network\n               Information Center,\
    \ SRI International, Menlo Park,\n               California, May 1983.\n   [LPD]\
    \       Campbell, R., \"4.2BSD Line Printer Spooler Manual\", UNIX\n         \
    \      Programmer's Manual, Vol II,  University of California at\n           \
    \    Berkeley, Computer Science Division, July 1983.\n   [IMAGEN]    \"Image Server\
    \ XT Programmer's Guide\", Imagen Corporation,\n               Santa Clara, California,\
    \ August 1986.\n"
- title: 'Author''s Address:'
  contents:
  - "Author's Address:\n   Joyce K. Reynolds\n   USC/Information Sciences Institute\n\
    \   4676 Admiralty Way\n   Marina del Rey, CA 90292\n   Phone:  (213) 822-1511\n\
    \   EMail: JKREYNOLDS@ISI.EDU\n"
