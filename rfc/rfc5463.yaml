- title: __initial_text__
  contents:
  - '                Sieve Email Filtering:  Ihave Extension

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2009 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\
    \ in effect on the date of\n   publication of this document (http://trustee.ietf.org/license-info).\n\
    \   Please review these documents carefully, as they describe your rights\n  \
    \ and restrictions with respect to this document.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes the \"ihave\" extension to the Sieve email\n\
    \   filtering language.  The \"ihave\" extension provides a means to write\n \
    \  scripts that can take advantage of optional Sieve features but can\n   still\
    \ run when those optional features are not available.  The\n   extension also\
    \ defines a new error control command intended to be\n   used to report situations\
    \ where no combination of available\n   extensions satisfies the needs of the\
    \ script.\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Sieve [RFC5228] is a language for filtering email messages\
    \ at or\n   around the time of final delivery.  It is designed to be\n   implementable\
    \ on either a mail client or mail server.  It is suitable\n   for running on a\
    \ mail server where users may not be allowed to\n   execute arbitrary programs,\
    \ such as on black-box Internet Message\n   Access Protocol [RFC3501] servers,\
    \ as it has no user-controlled loops\n   or the ability to run external programs.\n\
    \   Various sieve extensions have already been defined, e.g., [RFC5229],\n   [RFC5230],\
    \ [RFC5231], [RFC5232], [RFC5233], [RFC5235], and many more\n   are sure to be\
    \ created over time.  Sieve's require clause is used to\n   specify the extensions\
    \ a particular sieve needs; an error results if\n   the script's require clause\
    \ calls for an extension that isn't\n   available.  This mechanism is sufficient\
    \ in most situations.\n   However, there can be cases where a script may be able\
    \ to take\n   advantage of an extension if it is available but can still operate\
    \ if\n   it is not, possibly with some degradation of functionality.  Cases\n\
    \   can also arise where a script would prefer one extension but can\n   employ\
    \ a different one if the first one is not available.\n   The \"ihave\" extension\
    \ provides a means to write scripts that make use\n   of extensions only when\
    \ they are actually available.  It defines a\n   new \"ihave\" test that takes\
    \ a list of capability names as an argument\n   and succeeds if and only if all\
    \ of those capabilities are present.\n   Additionally, specification of the \"\
    ihave\" extension in the require\n   clause disables parse-time checking of extension\
    \ use in scripts; run-\n   time checking must be used instead.  This makes it\
    \ possible to write\n   portable scripts that can operate in multiple environments\
    \ making\n   effective use of whatever extensions are available even though\n\
    \   differing sets of extensions are provided in different places.\n   The \"\
    ihave\" extension also defines a new error control command.  An\n   error causes\
    \ script execution to terminate with the error message\n   given as the argument\
    \ to the error control.\n"
- title: 2.  Conventions Used in This Document
  contents:
  - "2.  Conventions Used in This Document\n   The key words \"MUST\", \"MUST NOT\"\
    , \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n   The terms used to describe the various components of the Sieve\n\
    \   language are taken from Section 1.1 of [RFC5228].\n"
- title: 3.  Capability Identifiers
  contents:
  - "3.  Capability Identifiers\n   The capability string associated with the extension\
    \ defined in this\n   document is \"ihave\".\n"
- title: 4.  Ihave Test
  contents:
  - "4.  Ihave Test\n   Usage:   ihave <capabilities: string-list>\n   The \"ihave\"\
    \ test provides a means for Sieve scripts to test for the\n   existence of a given\
    \ extension prior to actually using it.  The\n   capabilities argument to \"ihave\"\
    \ is the same as the similarly-named\n   argument to the require control statement:\
    \ It specifies the names of\n   one or more Sieve extensions or comparators. \
    \ The \"ihave\" test\n   succeeds if all the extensions specified in the capabilities\
    \ list are\n   available to the script.\n   Unlike most Sieve tests, \"ihave\"\
    \ accepts no match or comparator\n   arguments.  The type of match for \"ihave\"\
    \ is always \":is\" and the\n   comparator is always \"i;octet\".\n   The strings\
    \ in the capabilities list are constant strings in the\n   context of Sieve variables\
    \ [RFC5229].  It is an error to pass a non-\n   constant string as an argument\
    \ to \"ihave\".\n   The Sieve base specification demands that all Sieve extensions\
    \ used\n   in a given script be specified in the initial require control\n   statement.\
    \  It is an error for a script to call for extensions the\n   interpreter doesn't\
    \ support or to attempt to use extensions that have\n   not been listed in the\
    \ script's require clause.  Using \"ihave\"\n   changes Sieve interpreter behavior\
    \ and the underlying requirements in\n   the following ways:\n   1.  Use of a\
    \ given extension is allowed subsequent to the successful\n       evaluation of\
    \ an \"ihave\" test on that extension all the way to\n       the end of the script,\
    \ even outside the block enclosed by the\n       \"ihave\" test.  In other words,\
    \ subsequent to a successful\n       \"ihave\", things operate just as if the\
    \ extension had been\n       specified in the script's require clause.  The extension\
    \ cannot\n       be used prior to the evaluation of such a test and a run-time\n\
    \       error MUST be generated if such usage is attempted.  However,\n      \
    \ subsequent use of that extension may still need to be\n       conditionally\
    \ handled via an \"ihave\" test to deal with the case\n       where it is not\
    \ supported.\n   2.  Sieve interpreters normally have the option of checking extension\n\
    \       use at either parse time or execution time.  The specification of\n  \
    \     \"ihave\" in a script's require clause changes this behavior:\n       Scripts\
    \ MUST either defer extension checking to run time or else\n       take the presence\
    \ of \"ihave\" tests into account at parse time.\n       Note that since \"ihave\"\
    \ can be used inside of \"anyof\", \"allof\",\n       and \"not\" tests, full\
    \ parse-time checking of \"ihave\" may be very\n       difficult to implement.\n\
    \   3.  Although it makes little sense to do so, an extension can be\n       specified\
    \ in both the require control statement and in an \"ihave\"\n       test.  If\
    \ this is done and the extension has been implemented,\n       the extension can\
    \ be used anywhere in the script and an \"ihave\"\n       test of that extension\
    \ will always return true.\n   4.  The \"ihave\" test accepts a list of capabilities.\
    \  If any of the\n       specified capabilities are unavailable, the test fails\
    \ and none\n       of the capabilities are enabled.\n   5.  The Sieve base specification\
    \ does not require that interpreters\n       evaluate arguments in any particular\
    \ order or that test\n       evaluation be short-circuited.  If \"ihave\" is enabled,\
    \ the\n       interpreter MUST short-circuit tests, i.e., not perform more\n \
    \      tests than necessary to find the result.  Additionally,\n       evaluation\
    \ order MUST be left to right if \"ihave\" is enabled.\n   The \"ihave\" extension\
    \ is designed to be used with other extensions\n   that add tests, actions, comparators,\
    \ or arguments.  Implementations\n   MUST NOT allow it to be used with extensions\
    \ that change the\n   underlying Sieve grammar, or extensions like encoded-character\n\
    \   [RFC5228], or variables [RFC5229] that change how the content of\n   Sieve\
    \ scripts are interpreted.  The test MUST fail and the extension\n   MUST NOT\
    \ be enabled if such usage is attempted.\n"
- title: 5.  Error Control
  contents:
  - "5.  Error Control\n   Usage:   error <message: string>\n   The error control\
    \ causes script execution to terminate with a run-\n   time error.  The message\
    \ argument provides a text description of the\n   error condition that SHOULD\
    \ be included in any generated report\n   regarding the error.  Section 2.10.6\
    \ of [RFC5228] describes how run-\n   time errors are handled in Sieve.\n   Note\
    \ that the message argument, like all Sieve strings, employs the\n   UTF-8 charset\
    \ and can contain non-US-ASCII characters.  This must be\n   taken into consideration\
    \ when reporting script errors.\n   The error control is included as part of the\
    \ \"ihave\" extension so\n   that it is unconditionally available to scripts using\
    \ ihave.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   A potential security issue with Sieve scripts\
    \ is that when a script\n   fails to run due to the lack of some extension, it\
    \ may fail to block\n   dangerous email.  The \"ihave\" extension makes it possible\
    \ to improve\n   script portability and generality, which may improve the overall\n\
    \   security provided by Sieve.\n   Script robustness aside, ihave is essentially\
    \ a more flexible variant\n   of Sieve's existing require mechanism.  As such,\
    \ it does not add any\n   additional capabilities to a Sieve implementation that\
    \ could create\n   security issues.  Of course, all of the security considerations\
    \ given\n   in the base Sieve specification and in any extensions that are\n \
    \  employed are still relevant.\n"
- title: 7.  IANA Considerations
  contents:
  - "7.  IANA Considerations\n   The following template specifies the IANA registration\
    \ of the Sieve\n   extension specified in this document:\n      To: iana@iana.org\n\
    \      Subject: Registration of new Sieve extension\n      Capability name: ihave\n\
    \      Description:     The \"ihave\" extension provides a means to write\n  \
    \                     scripts that make use of other extensions only\n       \
    \                when they are actually available.\n      RFC number:      RFC\
    \ 5463\n      Contact address: Sieve discussion list <ietf-mta-filters@imc.org>\n"
- title: 8.  References
  contents:
  - '8.  References

    '
- title: 8.1.  Normative References
  contents:
  - "8.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [RFC5228]  Guenther, P. and T. Showalter, \"Sieve: An Email Filtering\n\
    \              Language\", RFC 5228, January 2008.\n"
- title: 8.2.  Informative References
  contents:
  - "8.2.  Informative References\n   [RFC3501]  Crispin, M., \"INTERNET MESSAGE ACCESS\
    \ PROTOCOL - VERSION\n              4rev1\", RFC 3501, March 2003.\n   [RFC5229]\
    \  Homme, K., \"Sieve Email Filtering: Variables Extension\",\n              RFC\
    \ 5229, January 2008.\n   [RFC5230]  Showalter, T. and N. Freed, \"Sieve Email\
    \ Filtering:\n              Vacation Extension\", RFC 5230, January 2008.\n  \
    \ [RFC5231]  Segmuller, W. and B. Leiba, \"Sieve Email Filtering:\n          \
    \    Relational Extension\", RFC 5231, January 2008.\n   [RFC5232]  Melnikov,\
    \ A., \"Sieve Email Filtering: Imap4flags\n              Extension\", RFC 5232,\
    \ January 2008.\n   [RFC5233]  Murchison, K., \"Sieve Email Filtering: Subaddress\n\
    \              Extension\", RFC 5233, January 2008.\n   [RFC5235]  Daboo, C.,\
    \ \"Sieve Email Filtering: Spamtest and Virustest\n              Extensions\"\
    , RFC 5235, January 2008.\n"
- title: 9.  Acknowledgments
  contents:
  - "9.  Acknowledgments\n   Stephan Bosch, Cyrus Daboo, Arnt Gulbrandsen, Andrew\
    \ McKeon, and\n   Alexey Melnikov provided helpful suggestions and corrections.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Ned Freed\n   Sun Microsystems\n   800 Royal Oaks\n   Monrovia,\
    \ CA  91016-6347\n   USA\n   Phone: +1 909 457 4293\n   EMail: ned.freed@mrochek.com\n"
