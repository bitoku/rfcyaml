- title: __initial_text__
  contents:
  - "     RTP Payload Format for mU-law EMbedded Codec for Low-delay IP\n        \
    \          Communication (UEMCLIP) Speech Codec\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes the RTP payload format of a mU-law EMbedded\n\
    \   Coder for Low-delay IP communication (UEMCLIP), an enhanced speech\n   codec\
    \ of ITU-T G.711.  The bitstream has a scalable structure with an\n   embedded\
    \ u-law bitstream, also known as PCMU, thus providing a handy\n   transcoding\
    \ operation between narrowband and wideband speech.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2009 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the BSD License.\n   This document may\
    \ contain material from IETF Documents or IETF\n   Contributions published or\
    \ made publicly available before November\n   10, 2008.  The person(s) controlling\
    \ the copyright in some of this\n   material may not have granted the IETF Trust\
    \ the right to allow\n   modifications of such material outside the IETF Standards\
    \ Process.\n   Without obtaining an adequate license from the person(s) controlling\n\
    \   the copyright in such materials, this document may not be modified\n   outside\
    \ the IETF Standards Process, and derivative works of it may\n   not be created\
    \ outside the IETF Standards Process, except to format\n   it for publication\
    \ as an RFC or to translate it into languages other\n   than English.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n\
    \      1.1. Terminology ................................................3\n  \
    \ 2. Media Format Background .........................................3\n   3.\
    \ Payload Format ..................................................5\n      3.1.\
    \ RTP Header Usage ...........................................6\n      3.2. Multiple\
    \ Frames in an RTP Packet ...........................6\n      3.3. Payload Data\
    \ ...............................................7\n           3.3.1. Main Header\
    \ .........................................7\n           3.3.2. Sub-Layer ..........................................10\n\
    \   4. Transcoding between UEMCLIP and G.711 ..........................11\n  \
    \ 5. Congestion Control Considerations ..............................12\n   6.\
    \ Payload Format Parameters ......................................13\n      6.1.\
    \ Media Type Registration ...................................13\n      6.2. Mapping\
    \ to SDP Parameters .................................14\n           6.2.1. Mode\
    \ Specification .................................15\n      6.3. Offer-Answer Model\
    \ Considerations .........................16\n           6.3.1. Offer-Answer Guidelines\
    \ ............................16\n           6.3.2. Examples ...........................................17\n\
    \   7. Security Considerations ........................................19\n  \
    \ 8. IANA Considerations ............................................19\n   9.\
    \ References .....................................................19\n      9.1.\
    \ Normative References ......................................19\n      9.2. Informative\
    \ References ....................................20\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document specifies the payload format for sending UEMCLIP-\n\
    \   encoded (mU-law EMbedded Coder for Low-delay IP communication) speech\n  \
    \ using the Real-time Transport Protocol (RTP) [RFC3550].  UEMCLIP is a\n   proprietary\
    \ codec that enhances u-law ITU-T G.711 [ITU-T-G.711] and\n   that is designed\
    \ to help the market for smooth transition towards the\n   forthcoming wideband\
    \ communication environment while achieving a very\n   small media transcoding\
    \ load with the existing terminals, in which\n   the implementation of G.711 is\
    \ mandatory.\n   It should be noted that, generally speaking, codecs are negotiated\n\
    \   and changed using an SDP exchange.  Also, [RFC3550] defines general\n   RTP\
    \ mixer and translator models, where media transcoding may not take\n   place\
    \ at the node.  For those cases, the design concept of the\n   embedded structure\
    \ is not useful.  However, there are other cases\n   when costly transcoding is\
    \ unavoidable in commonly deployed types of\n   Multi-point Control Units (MCUs),\
    \ which terminate media and RTCP\n   packets [RFC5117], and when narrowband and\
    \ wideband terminals\n   coexist.  This embedded bitstream structure can reduce\
    \ the media\n   transcoding to a simple bitstream truncation.\n   The background\
    \ and the basic idea of the media format is described in\n   Section 2.  The details\
    \ of the payload format are given in Section 3.\n   The transcoding issues with\
    \ G.711 are discussed in Section 4, and the\n   considerations for congestion\
    \ control are in Section 5.  In\n   Section 6, the payload format parameters for\
    \ a media type\n   registration for UEMCLIP RTP payload format and Session Description\n\
    \   Protocol (SDP) mappings are provided.  The security considerations\n   and\
    \ IANA considerations are dealt with in Section 7 and Section 8,\n   respectively.\n"
- title: 1.1.  Terminology
  contents:
  - "1.1.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"\
    SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\"\
    , and \"OPTIONAL\" in this\n   document are to be interpreted as described in\
    \ [RFC2119].\n"
- title: 2.  Media Format Background
  contents:
  - "2.  Media Format Background\n   UEMCLIP is an enhanced version of u-law ITU-T\
    \ G.711, otherwise known\n   as PCMU [RFC4856].  It is targeted at Voice over\
    \ Internet Protocol\n   (VoIP) applications, and its main goal is to provide a\
    \ wideband\n   communication platform that is highly interoperable with existing\n\
    \   terminals equipped with G.711 and to stimulate the market to\n   gradually\
    \ shift to using wideband communication.  In widely deployed\n   multi-point conferencing\
    \ systems, the packets usually go through\n   RTCP-terminating (RTP Control Protocol)\
    \ MCUs, \"Topo-RTCP-terminating-\n   MCU\" as defined in [RFC5117].  Because the\
    \ G.711 bitstream is\n   embedded in the bitstream, costly media transcoding can\
    \ be avoided in\n   this case.\n   This document does not discuss the implementation\
    \ details of the\n   encoder and decoder, but only describes the bitstream format.\n\
    \   Because of its scalable nature, there are a number of sub-bitstreams\n   (sub-layer)\
    \ in a UEMCLIP bitstream.  By choosing appropriate sub-\n   layers, the codec\
    \ can adapt to the following requirements:\n   o  Sampling frequency,\n   o  Number\
    \ of channels,\n   o  Speech quality, and\n   o  Bit-rate.\n   The UEMCLIP codec\
    \ operates at a 20-ms frame, and includes three sub-\n   coders as shown in Table\
    \ 1.  The core layer is u-law G.711 at 64\n   kbit/s, and other two are quality\
    \ and bandwidth enhancement layers\n   with bit-rate of 16 kbit/s each.\n   +-------+---------------------+----------+--------------------------+\n\
    \   | Layer | Description         | Bit-rate | Coding algorithm         |\n  \
    \ +-------+---------------------+----------+--------------------------+\n   |\
    \   a   | G.711 core          |       64 | u-law PCM                |\n   |  \
    \     |                     |          |                          |\n   |   b\
    \   | Lower-band          |       16 | Time domain block        |\n   |      \
    \ | enhancement         |          | quantization             |\n   |       |\
    \                     |          |                          |\n   |   c   | Higher-band\
    \         |       16 | MDCT block quantization  |\n   +-------+---------------------+----------+--------------------------+\n\
    \                      Table 1: Sub-Layer Description\n   Based on these sub-layers,\
    \ the UEMCLIP codec operates in four modes\n   as shown in Table 2.  Here, \"\
    Ch\" is the number of channels and \"Fs\"\n   is the sampling frequency in kHz.\
    \  It should be noted that the\n   current version only supports single-channel\
    \ operation and there\n   might be future extensions with multi-channel capabilities.\
    \  The\n   absent Modes 2 and 5 are reserved for possible future extension to\
    \ 32\n   kHz sampling modes.  As the mode definition is expected to grow, any\n\
    \   other modes not defined in this table MUST NOT be used for\n   compatibility\
    \ and interoperability reasons.\n   +------+----+----+-------+-------+-------+-------------+------------+\n\
    \   | Mode | Ch | Fs | Layer | Layer | Layer |    Bit-rate |      Total |\n  \
    \ |      |    |    |   a   |   b   |   c   | w/o headers |   bit-rate |\n   |\
    \      |    |    |       |       |       |    [kbit/s] |   [kbit/s] |\n   +------+----+----+-------+-------+-------+-------------+------------+\n\
    \   |   0  |  1 |  8 |   x   |   -   |   -   |          64 |       67.2 |\n  \
    \ |      |    |    |       |       |       |             |            |\n   |\
    \   1  |  1 | 16 |   x   |   -   |   x   |          80 |       84.0 |\n   |  \
    \    |    |    |       |       |       |             |            |\n   |   2\
    \  |  - |  - |   -   |   -   |   -   |           - |          - |\n   |      |\
    \    |    |       |       |       |             |            |\n   |   3  |  1\
    \ |  8 |   x   |   x   |   -   |          80 |       84.0 |\n   |      |    |\
    \    |       |       |       |             |            |\n   |   4  |  1 | 16\
    \ |   x   |   x   |   x   |          96 |      100.8 |\n   |      |    |    |\
    \       |       |       |             |            |\n   |   5  |  - |  - |  \
    \ -   |   -   |   -   |           - |          - |\n   +------+----+----+-------+-------+-------+-------------+------------+\n\
    \                         Table 2: Mode Description\n   The UEMCLIP bitstream\
    \ contains internal headers and other side-\n   information apart from the layer\
    \ data.  This results in total bit-\n   rate larger than the sum of the layers\
    \ shown in the above table.  The\n   detail of the internal headers and auxiliary\
    \ information are\n   described in Section 3.3.1.\n   Defining the sampling frequency\
    \ and the number of channels does not\n   result in a singular mode, i.e., there\
    \ can be multiple modes for the\n   same sampling frequency or number of channels.\
    \  The supported modes\n   would differ between implementations; thus, the sender\
    \ and the\n   receiver must negotiate what mode to use for transmission.\n"
- title: 3.  Payload Format
  contents:
  - "3.  Payload Format\n   As an RTP payload, the UEMCLIP bitstream can contain one\
    \ or more\n   frames as shown in Figure 1.\n     0                   1       \
    \            2                   3\n     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8\
    \ 9 0 1 2 3 4 5 6 7 8 9 0 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                      RTP Header                               |\n    +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+\n\
    \    |                                                               |\n    |\
    \                 one or more frames of UEMCLIP                 |\n    |     \
    \                                                          |\n    +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+\n\
    \                       Figure 1: RTP Payload Format\n   The UEMCLIP bitstream\
    \ has a scalable structure; thus, it is possible\n   to reconstruct the signal\
    \ by decoding a part of it.  A UEMCLIP frame\n   is composed of a main header\
    \ (MH) followed by one or more (up to\n   three) sub-layers (SLs) as shown in\
    \ Figure 2.\n                            +--+-------+//-+\n                  \
    \          |MH| SL #1 |...|\n                            +--+-------+//-+\n  \
    \             Figure 2: A UEMCLIP Frame (Bitstream Format)\n   As a sub-layer,\
    \ the core layer, i.e., \"Layer a\", MUST always be\n   included.  It should be\
    \ noted that the location of the core layer may\n   or may not immediately follow\
    \ MH field.  The decoder MUST always\n   refer to the layer indices for proper\
    \ decoding because the order of\n   the sub-layers is arbitrary.\n   The UEMCLIP\
    \ bitstream does not explicitly include the following\n   information: mode and\
    \ sampling frequency (Fs).  As described before,\n   this information MUST be\
    \ exchanged while establishing a connection,\n   for example, by means of SDP.\n"
- title: 3.1.  RTP Header Usage
  contents:
  - "3.1.  RTP Header Usage\n   Each RTP packet starts with a fixed RTP header, as\
    \ explained in\n   [RFC3550].  The following fields of the RTP fixed header used\n\
    \   specifically for UEMCLIP streams are emphasized:\n   Payload type:  The assignment\
    \ of an RTP payload type for this packet\n      format is outside the scope of\
    \ this document; however, it is\n      expected that a payload type in the dynamic\
    \ range shall be\n      assigned.\n   Timestamp:  This encodes the sampling instant\
    \ of the first speech\n      signal sample in the RTP data packet.  For UEMCLIP\
    \ streams, the\n      RTP timestamp MUST advance based on a clock either at 8000\
    \ or\n      16000 (Hz).  In cases where the audio sampling rate can change\n \
    \     during a session, the RTP timestamp rate MUST be equal to the\n      maximum\
    \ rate (in Hz) given in the mode range (see Section 6.2.1).\n      This implies\
    \ that the RTP timestamp rate for UEMCLIP payload type\n      MUST NOT change\
    \ during a session.  For example, for a UEMCLIP\n      stream with 8-kHz audio\
    \ sampling, where a transition to a 16-kHz\n      audio sampling mode is allowed,\
    \ the RTP time stamp must always\n      advance using the 16-kHz clock rate. \
    \ For a fixed audio sampling\n      mode, the RTP timestamp rate should be either\
    \ 8 or 16 kHz,\n      depending on the sampling rate.\n   Marker bit:  If the\
    \ codec is used for applications with discontinuous\n      transmission (DTX,\
    \ or silence compression), the first packet after\n      a silence period during\
    \ which packets have not been transmitted\n      contiguously SHOULD have the\
    \ marker bit in the RTP data header set\n      to one.  The marker bit in all\
    \ other packets MUST be zero.\n      Applications without DTX MUST set the marker\
    \ bit to zero.\n"
- title: 3.2.  Multiple Frames in an RTP Packet
  contents:
  - "3.2.  Multiple Frames in an RTP Packet\n   More than one UEMCLIP frame may be\
    \ included in a single RTP packet by\n   a sender.  However, senders have the\
    \ following additional\n   restrictions:\n   o  A single RTP packet SHOULD NOT\
    \ include more UEMCLIP frames than\n      will fit in the path MTU.\n   o  All\
    \ frames contained in a single RTP packet MUST be of the same\n      mode.\n \
    \  o  Frames MUST NOT be split between RTP packets.\n   It is RECOMMENDED that\
    \ the number of frames contained within an RTP\n   packet be consistent with the\
    \ application.  Since UEMCLIP is designed\n   for telephony applications where\
    \ delay has a great impact on the\n   quality, then fewer frames per packet for\
    \ lower delay, is preferable.\n"
- title: 3.3.  Payload Data
  contents:
  - "3.3.  Payload Data\n   In a UEMCLIP bitstream, all numbers are encoded in a network\
    \ byte\n   order.\n"
- title: 3.3.1.  Main Header
  contents:
  - "3.3.1.  Main Header\n   The main header (MH) is placed at the top of a frame\
    \ and has a size\n   of 6 bytes.  The content of the main header is shown in Figure\
    \ 3.\n    0                   1                   2                   3\n    0\
    \ 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |      MX       |                      PC                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |          PC(cont'd)           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                 Figure 3: UEMCLIP Main Header Format (MH)\n   Mixing information\
    \ (MX):  8 bits\n      Mixing information field.  This field is only relevant\
    \ when Topo-\n      RTCP-terminating-MCUs are utilized to interpret these fields.\
    \  See\n      Section 3.3.1.1 for details of the fields.\n   Packet-loss Concealment\
    \ information (PC):  40 bits\n      Packet-loss concealment (PLC) information\
    \ field.  See\n      Section 3.3.1.2.\n"
- title: 3.3.1.1.  Mixing Information Field
  contents:
  - "3.3.1.1.  Mixing Information Field\n                            0 1 2 3 4 5 6\
    \ 7\n                           +-+-+-+-+-+-+-+-+\n                          \
    \ |C|R|V|   PW1   |\n                           |1|1|1|         |\n          \
    \                 +-+-+-+-+-+-+-+-+\n                  Figure 4: Mixing Information\
    \ Field (MX)\n   Check bit #1 (C1):  1 bit\n      Validity flag of V1 and PW1.\
    \  This bit being \"1\" indicates that\n      both parameters are valid, and \"\
    0\" indicates that the parameters\n      should be ignored.  If any of these parameters\
    \ is invalid, this\n      bit should be set to \"0\".  This flag is mainly intended\
    \ for a\n      UEMCLIP-conscious Topo-RTCP-terminating-MCU.  This flag should\
    \ be\n      set to \"0\" in case of upward transcoding from G.711 (see\n     \
    \ Section 4).\n   Reserved bit #1 (R1):  1 bit\n      This bit should be ignored.\
    \  The default of this bit is 0.\n   VAD flag #1 (V1):  1 bit\n      Voice activity\
    \ detection flag of the current frame, designed to be\n      used for MCU operations.\
    \  This flag being \"1\" indicates that the\n      frame is an active (voice)\
    \ segment, and \"0\" indicates that it is\n      an inactive (non-voice) or a\
    \ silent segment.  This flag is\n      specifically designed for mixing information.\
    \  DTX judgment based\n      this flag is not recommended.\n   Power #1 (PW1):\
    \  5 bits\n      Signal power code of the current frame.  The code is obtained\
    \ by\n      calculating a root mean square (RMS) of \"Layer a\" and encoding\n\
    \      this RMS using G.711 u-law [ITU-T-G.711].  Denoting the encoded\n     \
    \ RMS as R, then PW1 is obtained by PW1 = ((~R)>>2) & 0x1F, where\n      \"~\"\
    , \">>\", \"&\" are one's complement arithmetic, right SHIFT, and\n      bitwise\
    \ AND operators, respectively.\n"
- title: 3.3.1.2.  PLC Information Field
  contents:
  - "3.3.1.2.  PLC Information Field\n    0                   1                  \
    \ 2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4\
    \ 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |C|R2 |V|   K   |U|     P1      |U|     P2      |      PW2      |\n   |2|\
    \   |2|       |1|             |2|             |               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |      R3       |\n   |               |\n   +-+-+-+-+-+-+-+-+\n          \
    \         Figure 5: PLC Information Field (PC)\n   Check bit #2 (C2):  1 bit\n\
    \      Validity flag of V2, K, U1, P1, U2, P2, and PW2.  If the flag is\n    \
    \  \"1\", it means that all these parameters are valid, and \"0\" means\n    \
    \  that the parameters should be ignored.  If any of these parameters\n      is\
    \ invalid, this bit should be set to \"0\".  Similarly to C1, this\n      flag\
    \ should be set to \"0\" in case of upward transcoding from G.711\n      (see\
    \ Section 4).\n   Reserved bit #2 (R2):  2 bits\n      These bits should be ignored.\
    \  The default of these bits are 0.\n   VAD flag #2 (V2):  1 bit\n      Voice\
    \ activity detection flag of the current frame, designed to be\n      used for\
    \ packet-loss concealment.  This might not be the same as\n      V1 in the mixing\
    \ information, and might not be synchronous to the\n      marker bit in the RTP\
    \ header.  DTX judgment based this flag is not\n      recommended.\n   Frame indicator\
    \ (K):  4 bits\n      This value indicates the frame offset of U2, P2, and PW2.\
    \  Since\n      it is a better idea to carry the speech feature parameters as\
    \ PLC\n      information in a different frame to maintain the speech quality,\n\
    \      this frame offset value gives with which frame the parameters are\n   \
    \   to be associated.  The value ranges between \"0\" and \"15\".  If the\n  \
    \    current frame number is N, for example, the value K indicates that\n    \
    \  U2, P2, and PW2 are associated with the frame of N-K.  The frame\n      indicator\
    \ is equal to the difference in the RTP sequence number\n      when one UEMCLIP\
    \ frame is contained in a single RTP packet.\n   V/UV flag #1 (U1):  1 bit\n \
    \     Voiced/Unvoiced signal indicator of the current frame.  This flag\n    \
    \  being \"0\" indicates that the frame is a voiced signal segment, and\n    \
    \  \"1\" indicates that it is an unvoiced signal segment.\n   Pitch lag #1 (P1):\
    \  7 bits\n      Pitch code of the current frame.  The actual pitch lag is\n \
    \     calculated as P1+20 samples in 8-kHz sampling rate.  Pitch lag\n      must\
    \ be 20 <= pitch length <= 120.  Codes ranging between \"0x65\"\n      and \"\
    0x7F\" are not used.  To obtain the pitch lag, any pitch\n      estimation method\
    \ can be used, such as the one used in G.711\n      Appendix I [ITU-T-G.711Appendix1].\n\
    \   V/UV flag #2 (U2):  1 bit\n      Voiced/Unvoiced signal indicator of the offset\
    \ frame.  This flag\n      being \"0\" indicates that the frame is a voiced signal\
    \ segment, and\n      \"1\" indicates that it is an unvoiced signal segment. \
    \ The offset\n      value is defined as K.\n   Pitch lag #2 (P2):  7 bits\n  \
    \    Pitch code of the offset frame.  The offset value is defined as K.\n    \
    \  The calculation method is identical to \"P1\", except that it is\n      based\
    \ on the signal of offset frame.\n   Power #2 (PW2):  8 bits\n      Signal power\
    \ code of the offset frame.  The offset value is\n      defined as K.\n   Reserved\
    \ bits #3 (R3):  8 bits\n      These bits should be ignored.  The default of all\
    \ bits are \"0\".\n"
- title: 3.3.2.  Sub-Layer
  contents:
  - "3.3.2.  Sub-Layer\n   Sub-layer (SL) is a sub-header followed by layer bitstreams,\
    \ as shown\n   in Figure 6.  The sub-header indicates the layer location and the\n\
    \   number of bytes.\n     0                   1                   2\n     0 1\
    \ 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7   . . .\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+//-+-+-+\n\
    \    |CI |FI |QI |R4 |      SB       |               LD         ...  |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+//-+-+-+\n\
    \                      Figure 6: Sub-Layer Format (SL)\n   Channel index (CI):\
    \  2 bits\n      Indicates the channel number.  For all modes given in Table 2,\n\
    \      this should be \"0\".  The detail is given in Table 3.\n   Frequency index\
    \ (FI):  2 bits\n      Indicates the frequency number. \"0\" means that the layer\
    \ is in the\n      base frequency band, higher number means that the layer is\
    \ in\n      respective frequency band.  The detail is given in Table 3.\n   Quality\
    \ index (QI):  2 bits\n      Indicates the quality layer number. \"0\" means that\
    \ the layer is in\n      the base layer, and higher number means that the layer\
    \ is in\n      respective quality layer.  The detail is given in Table 3.\n  \
    \ Reserved #4 (R4):  2 bits\n      Not used (reserved).  The default value is\
    \ \"0\".\n   Sub-layer Size (SB):  8 bits\n      Indicates the byte size of the\
    \ following sub-layer data.\n   Layer Data (LD):  SB*8 bits\n      The actual\
    \ sub-layer data.\n   For all the layers shown in Table 1, the layer indices are\
    \ shown in\n   Table 3.\n                         +-------+----+----+----+\n \
    \                        | Layer | CI | FI | QI |\n                         +-------+----+----+----+\n\
    \                         |   a   |  0 |  0 |  0 |\n                         |\
    \       |    |    |    |\n                         |   b   |  0 |  0 |  1 |\n\
    \                         |       |    |    |    |\n                         |\
    \   c   |  0 |  1 |  0 |\n                         +-------+----+----+----+\n\
    \                          Table 3: Layer Indices\n"
- title: 4.  Transcoding between UEMCLIP and G.711
  contents:
  - "4.  Transcoding between UEMCLIP and G.711\n   As given in Section 2, the u-law-encoded\
    \ G.711 bitstream (Layer a) is\n   the core layer of a UEMCLIP bitstream, and\
    \ is always embedded.  This\n   means that media transcoding from the UEMCLIP\
    \ bitstream to G.711 does\n   not have to undergo decoding and re-encoding procedures,\
    \ but simple\n   extraction would suffice.  However, this does not apply for the\n\
    \   reverse procedure, i.e., transcoding from G.711 to UEMCLIP, because\n   the\
    \ auxiliary information in the main header (MH) must be assigned\n   separately.\
    \  It should be noted that this media transcoding is useful\n   for a Media Translator\
    \ (Topo-Media-Translator) or a Point-to-\n   Multipoint Using RTCP Terminating\
    \ MCU (Topo-RTCP-terminating-MCU) in\n   [RFC5117], and all the requirements apply.\
    \  This means that a\n   transcoding device of this sort MUST rewrite RTCP packets,\
    \ together\n   with the RTP media packets.\n   The transcoding from UEMCLIP to\
    \ u-law G.711 can be done easily by\n   finding an appropriate sub-layer.  Within\
    \ a frame, the transcoder\n   should look for a sub-layer with a layer index of\
    \ \"0x00\", and\n   subsequent LD that has a size of SB*8 bits (UEMCLIP has a\
    \ 20-ms frame\n   thus, SB=160) are the actual G.711 bitstream data.  It should\
    \ be\n   noted that the transcoder should not always expect the core layer to\n\
    \   be located right after the main header.\n   On the other hand, the transcoding\
    \ from G.711 to UEMCLIP is not\n   entirely straightforward.  Since there are\
    \ no means to generate\n   enhancement sub-layers, a G.711 bitstream can only\
    \ be converted to\n   UEMCLIP Mode 0 bitstream.  If the original G.711 bitstream\
    \ is encoded\n   in A-law, it should first be converted to u-law to become the\
    \ core\n   layer.  Because a UEMCLIP frame size is 20 ms, a u-law-encoded G.711\n\
    \   bitstream MUST be a 160-sample chunk to become a core layer.  For the\n  \
    \ main header contents, when the UEMCLIP encoder is not available, it\n   should\
    \ follow these guidelines:\n   o  The check bits for mixing and PLC (C1 and C2)\
    \ are set to 0.\n   o  The reserved bits (R1 to R3) in MH are set to respective\
    \ default\n      values.\n   For the core layer (i.e., u-law G.711 bitstream),\
    \ it should have the\n   following sub-layer header:\n   o  All CI, FI, QI, and\
    \ R4 MUST be 0.\n   o  Sub-layer size (SB) MUST be 160 for a 20-ms frame.\n"
- title: 5.  Congestion Control Considerations
  contents:
  - "5.  Congestion Control Considerations\n   The general congestion control considerations\
    \ for transporting RTP\n   data also apply to UEMCLIP over RTP [RFC3550] as well\
    \ as any\n   applicable RTP profile like Audio-Visual Profile (AVP) [RFC3551].\n\
    \   The bandwidth of a UEMCLIP bitstream can be reduced by changing to\n   lower-bit-rate\
    \ modes.  The embedded layer structure of UEMCLIP may\n   help to control congestion,\
    \ when dynamic mode changing (see\n   Section 6.2.1) is available, and the range\
    \ of modes is obtained by\n   offer-answer negotiation as given in Section 6.3.\
    \  It should be noted\n   that this involves proper RTCP handling when the bit-rate\
    \ is modified\n   in an RTP translator or a mixer [RFC3550].\n   Packing more\
    \ frames in each RTP payload can reduce the number of\n   packets sent, and hence\
    \ the overhead from IP/UDP/RTP headers, at the\n   expense of increased delay\
    \ and reduced error robustness against\n   packet losses.  It should be treated\
    \ with care because increased\n   delay means reduced quality.\n"
- title: 6.  Payload Format Parameters
  contents:
  - '6.  Payload Format Parameters

    '
- title: 6.1.  Media Type Registration
  contents:
  - "6.1.  Media Type Registration\n   This registration is done using the template\
    \ defined in [RFC4288] and\n   following [RFC4855].\n   Media type name:  audio\n\
    \   Media subtype name:  UEMCLIP\n   Required parameters:\n      Rate:  Defines\
    \ the sampling rate, and it MUST be either 8000 or\n         16000.  See Section\
    \ 6.2.1 \"Mode specification\" of RFC 5686\n         (this RFC) for details.\n\
    \   Optional parameters:\n      ptime:  See RFC 4566 [RFC4566].\n      maxptime:\
    \  See RFC 4566 [RFC4566].\n      mode:  Indicates the range of dynamically changeable\
    \ modes during\n         a session.  Possible values are a comma-separated list\
    \ of modes\n         from the supported mode set: 0, 1, 3, and 4.  If only one\
    \ mode\n         is specified, it means that the mode must not be changed during\n\
    \         the session.  When not specified, the mode transmission\n         defaults\
    \ to a singular mode as specified in Table 4.  See\n         Section 6.2.1 \"\
    Mode specification\" of RFC 5686 (this RFC) for\n         details.\n   Encoding\
    \ considerations:  This media type is framed and contains\n      binary data.\
    \  See Section 4.8 of RFC 4288.\n   Security considerations:  See Section 7 \"\
    Security Considerations\" of\n      RFC 5686 (this RFC).\n   Interoperability\
    \ considerations:  This media may be readily\n      transcoded to u-law-encoded\
    \ ITU-T G.711.  See Section 4\n      \"Transcoding between UEMCLIP and G.711\"\
    \ of RFC 5686 (this RFC).\n   Published specification:  RFC 5686 (this RFC)\n\
    \   Applications that use this media type:  Audio and video streaming and\n  \
    \    conferencing tools.\n   Additional information:  None\n   Intended usage:\
    \  COMMON\n   Restrictions on usage:  This media type depends on RTP framing,\
    \ and\n      hence is only defined for transfer via RTP.\n   Person & email address\
    \ to contact for further information:\n      Yusuke Hiwasaki <hiwasaki.yusuke@lab.ntt.co.jp>\n\
    \   Author:  Yusuke Hiwasaki\n   Change Controller:  IETF Audio/Video Transport\
    \ Working Group\n      delegated from the IESG\n"
- title: 6.2.  Mapping to SDP Parameters
  contents:
  - "6.2.  Mapping to SDP Parameters\n   The media types audio/UEMCLIP are mapped\
    \ to fields in the Session\n   Description Protocol (SDP) [RFC4566] as follows:\n\
    \   Media name:  The \"m=\" line of SDP MUST be audio.\n   Encoding name:  Registered\
    \ media subtype name should be used for the\n      \"a=rtpmap\" line.\n   Sampling\
    \ Frequency:  Depending on the mode, clock rate (sampling\n      frequency) specified\
    \ in \"a=rtpmap\" MUST be selected from the ones\n      defined in Table 2.  See\
    \ Section 6.2.1 for details.\n   Encoding parameters:  Since this is an audio\
    \ stream, the encoding\n      parameters indicate the number of audio channels,\
    \ and this SHOULD\n      default to \"1\", as selected from the ones defined in\
    \ Table 2.\n      This is OPTIONAL.\n   Packet time:  A frame length of any UEMCLIP\
    \ is 20 ms, thus the\n      argument of \"a=ptime\" SHOULD be a multiple of \"\
    20\".  When not\n      listed in SDP, it should also default to the minimum size:\
    \ \"20\".\n   UMECLIP specific:  Any description specific to UEMCLIP is defined\
    \ in\n      the Format Specification Parameters (\"a=fmtp\").  Each parameter\n\
    \      MUST be separated with \";\", and if any attribute (value) exists,\n  \
    \    it MUST be defined with \"=\".  For compatibility reasons, any\n      application/terminal\
    \ MUST ignore any parameters that it does not\n      understand.  This is to ensure\
    \ the upper-compatibility with\n      parameters added in future enhancements.\
    \  The mode specification\n      should be made here (see Section 6.2.1).\n"
- title: 6.2.1.  Mode Specification
  contents:
  - "6.2.1.  Mode Specification\n   Since UEMCLIP codec can operate in number of modes\
    \ (bit-rates), it is\n   desirable to specify the range of modes at which an encoder\
    \ or a\n   decoder can operate.  When exchanging SDP messages, an offerer should\n\
    \   specify all possible combinations of mode numbers as arguments to\n   \"mode=\"\
    \ in \"a=fmtp\" line, delimited by commas \",\".  In case of\n   specifying multiple\
    \ modes, those SHOULD appear in the descending\n   priority order.\n   Although\
    \ UEMCLIP decoders SHOULD accept bitstreams in any modes, an\n   implementation\
    \ may fail to adapt to the dynamic mode changes during a\n   session.  For this\
    \ reason, an application may choose to operate\n   either with one fixed mode\
    \ or with multiple modes that can be\n   dynamically changed.  If the mode is\
    \ to be fixed and changes are not\n   allowed, this can be indicated by specifying\
    \ a single mode per\n   payload type.\n   The mode numbers that can be specified\
    \ in a payload type as arguments\n   to \"mode\" are restricted by a combination\
    \ of a clock rate and a\n   number of audio channels.  This is because SDP binds\
    \ a payload type\n   to a combination of a sampling frequency and a number of\
    \ audio\n   channels.  Table 4 gives selectable mode numbers that are attributed\n\
    \   with clock rates.  When mode specifications are not given at all, a\n   payload\
    \ type MUST default to a single mode using the default value\n   specified in\
    \ this table.\n        +------------+----------+------------------+--------------+\n\
    \        | Clock rate | Channels | Selectable modes | Default mode |\n       \
    \ +------------+----------+------------------+--------------+\n        |     \
    \  8000 |     1    |        0,3       |       0      |\n        |            |\
    \          |                  |              |\n        |      16000 |     1 \
    \   |      0,1,3,4     |       1      |\n        +------------+----------+------------------+--------------+\n\
    \                          Table 4: Default Modes\n   It should be noted that\
    \ a mode attributed with a larger sampling\n   frequency (Fs) is not used in conjunction\
    \ with smaller clock rates\n   specified in \"a=rtpmap\".  This means that Modes\
    \ 0 and 3 can be\n   specified in a payload type having a clock rate of both 8000\
    \ and\n   16000 in \"a=rtpmap\", but Modes 1 and 4 cannot be specified with one\n\
    \   having a clock rate of 8000.\n"
- title: 6.3.  Offer-Answer Model Considerations
  contents:
  - '6.3.  Offer-Answer Model Considerations

    '
- title: 6.3.1.  Offer-Answer Guidelines
  contents:
  - "6.3.1.  Offer-Answer Guidelines\n   The procedures related to exchanging SDP\
    \ messages MUST follow\n   [RFC3264].  The following is a detailed list on the\
    \ semantics of\n   using the UEMCLIP payload format in an offer-answer exchange.\n\
    \   o  An offerer SHOULD offer every possible combination of UEMCLIP\n      payload\
    \ type it can handle, i.e., sampling frequency, channel\n      number, and fmtp\
    \ parameters, in a preferred order.  When the\n      transmission bandwidth is\
    \ restricted, it MUST be offered in\n      accordance to the restriction.\n  \
    \ o  When multiple UEMCLIP payload types are offered, it is RECOMMENDED\n    \
    \  that the answerer select a single UEMCLIP payload type and answer\n      it\
    \ back.\n   o  In a UEMCLIP payload type, an answerer MUST answer back suitable\n\
    \      mode number(s) as a subset of what has been offered.  This means\n    \
    \  that there is a symmetry assumption on sent and received streams,\n      and\
    \ the offerer MUST NOT send in modes that it does not offer.\n   o  In an offering/answering\
    \ SDP, any fmtp parameters that are not\n      known MUST be ignored.  If any\
    \ unknown/undefined parameters should\n      be offered, an answerer MUST delete\
    \ the entry from the answer\n      message.\n   o  A receiver of an SDP message\
    \ MUST only use specified payload types\n      and modes.  When a mode specification\
    \ is missing, i.e., a mode is\n      not specified at all, the session MUST default\
    \ to one single mode\n      without mode changes during a session.  For this case,\
    \ the default\n      mode values, as shown in Table 4, MUST be used based on the\n\
    \      sampling frequency and number of channels.  This table must be\n      looked\
    \ up only when there are no mode specifications; thus, the\n      offerer/answerer\
    \ MUST NOT assume that the default modes are always\n      available when it is\
    \ not in the specified list of modes.\n   o  When an offered condition does not\
    \ fit an answerer's capabilities,\n      it naturally MUST NOT answer any of the\
    \ conditions, and the\n      session MAY proceed to re-INVITE, if possible.  If\
    \ a condition\n      (mode) is decided upon, an offerer and an answerer MUST transmit\n\
    \      on this condition.\n"
- title: 6.3.2.  Examples
  contents:
  - "6.3.2.  Examples\n   When an offerer indicates that he/she wishes to dynamically\
    \ switch\n   between modes (0,1,3, and 4) during a session, an example of an\n\
    \   offered SDP could be:\n     v=0\n     o=john 51050101 51050101 IN IP4 offhost.example.com\n\
    \     s=-\n     c=IN IP4 offhost.example.com\n     t=0 0\n     m=audio 5004 RTP/AVP\
    \ 96\n     a=rtpmap:96 UEMCLIP/16000/1\n     a=fmtp:96 mode=4,1,3,0\n   It should\
    \ be noted that the listed modes appears in the offerer's\n   preference.\n  \
    \ When an answerer can only operate in Modes 1 and 0 but can\n   dynamically switch\
    \ between those modes during a session, an answerer\n   MUST delete the entries\
    \ of Mode 3 and 4, and answer back as:\n     v=0\n     o=lena 549947322 549947322\
    \ IN IP4 anshost.example.org\n     s=-\n     c=IN IP4 anshost.example.org\n  \
    \   t=0 0\n     m=audio 5004 RTP/AVP 96\n     a=rtpmap:96 UEMCLIP/16000/1\n  \
    \   a=fmtp:96 mode=1,0\n   As a result, both would start communicating in either\
    \ Mode 1 or 0,\n   and can dynamically switch between those modes during the session.\n\
    \   On the other hand, when the answerer is capable of communicating\n   either\
    \ in Modes 1 or 0, and cannot switch between modes during a\n   session, an example\
    \ of such answer is as follows:\n     v=0\n     o=lena 549947322 549947322 IN\
    \ IP4 anshost.example.org\n     s=-\n     c=IN IP4 anshost.example.org\n     t=0\
    \ 0\n     m=audio 5004 RTP/AVP 96\n     a=rtpmap:96 UEMCLIP/16000/1\n     a=fmtp:96\
    \ mode=1\n   As a result, both will start communicating in Mode 1.  It should\
    \ be\n   noted that mode change during this session is not allowed because the\n\
    \   answerer responded with a single mode, and answerer selected Mode 1\n   above\
    \ Mode 0 according to the offered order.\n   If an offerer does not want a mode\
    \ change during a session but is\n   capable of receiving either Modes 4 or 1\
    \ bitstreams, the SDP should\n   somewhat look like:\n     v=0\n     o=john 51050101\
    \ 51050101 IN IP4 offhost.example.com\n     s=-\n     c=IN IP4 offhost.example.com\n\
    \     t=0 0\n     m=audio 5004 RTP/AVP 96 97\n     a=rtpmap:96 UEMCLIP/16000/1\n\
    \     a=fmtp:96 mode=4\n     a=rtpmap:97 UEMCLIP/16000/1\n     a=fmtp:97 mode=1\n\
    \   and if the answerer prefers to communicate in Mode 1, an answer would\n  \
    \ be:\n     v=0\n     o=lena 549947322 549947322 IN IP4 anshost.example.org\n\
    \     s=-\n     c=IN IP4 anshost.example.org\n     t=0 0\n     m=audio 5004 RTP/AVP\
    \ 97\n     a=rtpmap:97 UEMCLIP/16000/1\n     a=fmtp:97 mode=1\n   Please note\
    \ that it is RECOMMENDED to select a single UEMCLIP payload\n   type for answers.\n\
    \   The \"ptime\" attribute is used to denote the desired packetization\n   interval.\
    \  When not specified, it SHOULD default to 20.  Since\n   UEMCLIP uses 20-ms\
    \ frames, ptime values of multiples of 20 imply\n   multiple frames per packet.\
    \  In the example below, the ptime is set\n   to 60, and this means that offerer\
    \ wants to receive 3 frames in each\n   packet.\n     v=0\n     o=kosuke 2890844730\
    \ 2890844730 IN IP4 anotherhost.example.com\n     s=-\n     c=IN IP4 anotherhost.example.com\n\
    \     t=0 0\n     m=audio 5004 RTP/AVP 96\n     a=ptime:60\n     a=rtpmap:96 UEMCLIP/16000/1\n\
    \   When mode specification is not present, it should default to a fixed\n   mode,\
    \ and in this case, Mode 1 (see Section 6.2.1).\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   RTP packets using the payload format defined\
    \ in this specification\n   are subject to the security considerations discussed\
    \ in the RTP\n   specification [RFC3550] and any appropriate profiles.  This implies\n\
    \   that confidentiality of the media streams is achieved by encryption\n   unless\
    \ the applicable profile specifies other means.\n   A potential denial-of-service\
    \ threat exists for data encoding using\n   compression techniques that have non-uniform\
    \ receiver-end\n   computational load.  The attacker can inject pathological datagrams\n\
    \   into the stream that are complex to decode and cause the receiver\n   output\
    \ to become overloaded.  However, the UEMCLIP covered in this\n   document do\
    \ not exhibit any significant non-uniformity.\n   Another potential threat is\
    \ memory attacks by illegal layer indices\n   or byte numbers.  The implementor\
    \ of the decoder should always be\n   aware that the indicated numbers may be\
    \ corrupted and not point to\n   the right sub-layer, and they may force reading\
    \ beyond the bitstream\n   boundaries.  It is advised that a decoder implementation\
    \ reject\n   layers of such indices.\n"
- title: 8.  IANA Considerations
  contents:
  - "8.  IANA Considerations\n   One new media subtype (audio/UEMCLIP) has been registered\
    \ by IANA.\n   For details, see Section 6.1.\n"
- title: 9.  References
  contents:
  - '9.  References

    '
- title: 9.1.  Normative References
  contents:
  - "9.1.  Normative References\n   [ITU-T-G.711]\n              International Telecommunications\
    \ Union, \"Pulse code\n              modulation (PCM) of voice frequencies\",\
    \ ITU-\n              T Recommendation G.711, November 1988.\n   [RFC2119]  Bradner,\
    \ S., \"Key words for use in RFCs to Indicate\n              Requirement Levels\"\
    , BCP 14, RFC 2119, March 1997.\n   [RFC3264]  Rosenberg, J. and H. Schulzrinne,\
    \ \"An Offer/Answer Model\n              with Session Description Protocol (SDP)\"\
    , RFC 3264,\n              June 2002.\n   [RFC3550]  Schulzrinne, H., Casner,\
    \ S., Frederick, R., and V.\n              Jacobson, \"RTP: A Transport Protocol\
    \ for Real-Time\n              Applications\", STD 64, RFC 3550, July 2003.\n\
    \   [RFC3551]  Schulzrinne, H. and S. Casner, \"RTP Profile for Audio and\n  \
    \            Video Conferences with Minimal Control\", STD 65, RFC 3551,\n   \
    \           July 2003.\n   [RFC4288]  Freed, N. and J. Klensin, \"Media Type Specifications\
    \ and\n              Registration Procedures\", BCP 13, RFC 4288, December 2005.\n\
    \   [RFC4566]  Handley, M., Jacobson, V., and C. Perkins, \"SDP: Session\n   \
    \           Description Protocol\", RFC 4566, July 2006.\n   [RFC4855]  Casner,\
    \ S., \"Media Type Registration of RTP Payload\n              Formats\", RFC 4855,\
    \ February 2007.\n   [RFC4856]  Casner, S., \"Media Type Registration of Payload\
    \ Formats in\n              the RTP Profile for Audio and Video Conferences\"\
    ,\n              RFC 4856, February 2007.\n   [RFC5117]  Westerlund, M. and S.\
    \ Wenger, \"RTP Topologies\", RFC 5117,\n              January 2008.\n"
- title: 9.2.  Informative References
  contents:
  - "9.2.  Informative References\n   [ITU-T-G.711Appendix1]\n              International\
    \ Telecommunications Union, \"Pulse code\n              modulation (PCM) of voice\
    \ frequencies, Appendix I: A high\n              quality low-complexity algorithm\
    \ for packet loss\n              concealment with G.711\", ITU-T Recommendation\
    \ G.711\n              Appendix I, September 1999.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Yusuke Hiwasaki\n   NTT Corporation\n   3-9-11 Midori-cho,\n\
    \   Musashino-shi\n   Tokyo  180-8585\n   Japan\n   Phone: +81(422)59-4815\n \
    \  EMail: hiwasaki.yusuke@lab.ntt.co.jp\n   Hitoshi Ohmuro\n   NTT Corporation\n\
    \   3-9-11 Midori-cho,\n   Musashino-shi\n   Tokyo  180-8585\n   Japan\n   Phone:\
    \ +81(422)59-2151\n   EMail: ohmuro.hitoshi@lab.ntt.co.jp\n"
