Abstract This memo describes the Application Exchange (APEX) access service, addressed as the well known endpoint "apex access".
The access service is used to control use of both the APEX "relaying mesh" and other APEX services.
This memo describes an access service that is built upon the APEX [1] "relaying mesh".
The APEX access service is used to control use of both the relaying mesh and other APEX services.
APEX, at its core, provides a best effort datagram service.
Within an administrative domain, all relays must be able to handle messages for any endpoint within that domain.
APEX services are logically defined as endpoints but given their ubiquitous semantics they do not necessarily need to be associated with a single physical endpoint.
That is, applications communicate with an APEX service by exchanging data with a "well known endpoint" (WKE).
APEX applications communicate with the access service by exchanging data with the well known endpoint "apex access" in the corresponding administrative domain, e.g., "apex access@example.com
" is the endpoint associated with the access service in the "example.com" administrative domain.
Note that within a single administrative domain, the relaying mesh makes use of the APEX access service in order to determine if an originator is allowed to transmit data to a recipient (c.f., Step 5.3 of Section 4.4.4.1 of [1]).
Use and Management of Access Information Access information is organized around access entries, each of which contains:  an owner: an APEX address with which the entry is associated;  an actor: an APEX address that is granted permission to perform some action in the context of the owner;  a list of actions; and,  a timestamp indicating when the service last created or modified the access entry.
The access entry for a given owner controls access to a potentially large range of different APEX services, such as data delivery, access control, and presence information.
In addition, Section 4.5 of [1] discusses APEX access policies that govern such activities as peer authentication, message relaying, and so on.
Management of access information falls into three categories:
applications may query the access service to see if one or more actions are allowed;  applications may retrieve access information associated with an owner/actor combination; and,  applications may modify (i.e., create, replace, or delete) access information associated with an owner/actor combination.
Each is now described in turn.
data content '#Content'> <originator identity 'fred@example.com' /
> <recipient identity 'apex access@example.com' /
> <data content Name 'Content'> <query owner 'fred@example.com
1' actor 'barney@example.com' actions 'core:data presence:subscribe' /
data content '#Content'> <originator identity 'apex access@example.com' /
> <allow transID '1' /
<data content '#Content'> <originator identity 'apex
> <data content Name 'Content'> <deny transID '1' /
2.2 Retrieval of Access Information
data content '#Content'> <originator identity 'fred@example.com' /
> <recipient identity 'apex access@example.com' /
> <data content Name 'Content'> <get transID '2' owner 'fred@example.com' actor ' @example.com' /
data content '#Content'> <originator identity 'apex access@example.com' /
> <access owner 'fred@example.com' actor ' @example.com' actions 'core:data presence:subscribe' lastUpdate '2000 05 14T13:02:00 08:00' /
2.3 Update of Access Information
data content '#Content'> <originator identity 'wilma@example.com' /
> <recipient identity 'apex access@example.com' /
> <data content Name 'Content'> <set transID '1'> <access owner 'fred@example.com' actor ' @example.com' actions 'core:data presence:subscribe' lastUpdate '2000 05 14T13:02:00 08:00' /
ok /> Note that Step 4 of Section 4.4 requires that the "lastUpdate" attribute of an access entry be supplied in order to update that entry
; accordingly, applications must successfully retrieve an access entry prior to trying to modify that entry.
(Naturally, administrators should ensure that applications authorized to modify an access entry are also authorized to retrieve that entry.)
data content '#Content'> <originator identity 'apex access@example.com' /
> <data content Name 'Content'> <reply code '250' transID '1' /
Note that Steps 6.2 and 9.2 of Section 4.4 require that the access service update the "lastUpdate" attribute of an access entry when it is created or modified.
data content '#Content'> <originator identity 'apex access@example.com' /
data content '#Content'> <originator identity 'wilma@example.com' /
> <recipient identity 'apex access@example.com' /
> <data content Name 'Content'> <set transID '2'> <access owner 'fred@example.com' actor ' @example.com
2000 05 14T13:02:00 08:00' /
data content '#Content'> <originator identity 'apex access@example.com' /
> <data content Name 'Content'>
<reply code '250' transID '2' /
data content '#Content'> <originator identity 'apex access@example.com' /
2000 05 14T13:02:00 08:00' /
Because there are no actions associated with this access entry, the owner knows that the entry has been deleted.
Note that because access control supported limited wildcarding of actors, deleting an access entry for a particular owner/actor combination, may modify, rather than remove, permission.
Because of this, a special action, "all:none", is used.
For example, consider these two access entries: <access owner 'fred@example.com' actor 'barney@example.com' actions 'core:data presence:
subscribe presence:watch' lastUpdate '2000 05 14T13:20:00 08:00' /
<access owner 'fred@example.com' actor ' @example.com' actions 'core:data'
lastUpdate '2000 05 14T13:20:00 08:00'
Deleting the first access entry will not remove all permissions for for the actor "barney@example.com".
Instead, the first access entry should be modified thusly: <access owner 'fred@example.com' actor 'barney@example.com' actions 'all:none' lastUpdate '2000 05 14T13:20:00 08:00' /
Each administrative domain is responsible for maintaining one or more "access entries" for each of its endpoints and associated subaddresses (regardless of whether those addresses are currently attached to the relaying mesh).
A separate access entry is required for each actor or group of actors for whom access permission is specified.
Section 6 defines the syntax for access entries.
Each access entry has an "owner" attribute, an "actor" attribute, an "actions" attribute, a "lastUpdate" attribute, and no content:  the "owner" attribute specifies the address (endpoint or subaddress) associated with the access entry;
the "actor" attribute specifies an entity or group of entities for whom access permissions are specified, as described below;  the "actions" attribute specifies the permissions granted to the actor in the context of the owner; and,  the "lastUpdate" attribute specifies the date and time that the service last created or modified the access entry.
An action is specified as a service/operation pair, e.g., the action "presence:publish" refers to the "publish" operation of the "presence" service.
Two service values are reserved:  "all" is used to refer to all services, e.g., "all:data"; and,  "core" is used to refer to the service implemented by the relaying mesh, e.g., the "core:data" permission is consulted by the relaying mesh (c.f., Step 5.3 of Section 4.4.4.1 of [1]).
Further, two operation values are reserved:  "all" is used to refer to all operations, e.g., "presence:all"; and,  "none" is used to refer to no operations whatsoever, e.g., "all:none".
An actor is an APEX address and is specified using the "entity" syntax specified in Section 2.2 of [1].
However, both the "local" and "domain" parts may contain limited wildcarding:
The following default entries are provided for each owner, but are overridden by an explicitly supplied entry with the same actor value:
actions 'core:data' allows endpoints from any domain to use the relaying mesh to send data to the owner, but does not override the default entry for "apex  @domain", which allows all APEX services in the owner's domain access to all actions.
Note that this convention is used only for the "actor" attribute of the "get" operation and of the "access" entry that appears in the "set" operation; however, this convention is not used in the "query" operation, as this operation does not allow wildcarding.
For example, to specify the endpoint named as "a\b c@example.com" in the "get" operation or in an "access" entry, the string "a\\b\ c@example.com" is used; but in the "query" operation, the string "a\b c@example.com" is used.
The use of actor wildcarding makes it possible for several access entries to apply for a given owner/actor combination.
When determining which access entry to use when responding to the query operation, the algorithm is:  Consider only those access entries that are associated with the given owner.
Consider only those access entries in which the actor value matches the actor address in the query.
When matching with the domain part, an exact match is the best match; otherwise, the shorter the wildcard match, the higher the priority.
For example, if the actor's domain is "bar.foo.example.com", a match against an entry of " .foo.example.com" is better than a match against an entry of " .example.com".
When matching with the local part, an exact match is the best match; otherwise, the shorter the wildcard match, the higher the priority.
This is true regardless of whether the wildcarding is for subaddress or service.
(Note that a local part with a wildcard subaddress does not have a non empty match with the same local part without a subaddress.)
For example, consider these access entries: <access owner 'fred@example.com' actor 'wilma@example.com' actions 'all:all' lastUpdate '2000 05
> <access owner 'fred@example.com' actor 'mr.slate@example.com' actions 'core:data' lastUpdate '2000 05 14T13:20:00 08:00' /
<access owner 'fred/appl wb@example.com' actor 'barney/appl wb@example.com' actions 'core:data' lastUpdate '2000 05 14T13:20:00 08:00' /
<access owner 'fred@example.com' actor ' @example.com' actions 'core:data presence:
subscribe presence:watch' lastUpdate '2000 05 14T13:20:00 08:00' /
> <access owner 'fred@example.com' actor ' @
' actions 'core:data' lastUpdate '2000 05 14T13:20:00 08:00' /
For any address outside the "example.com" administrative domain, the address is allowed access to send data, regardless of whether it is an APEX service.
3.2 Creating and Updating Access Entries
The get and set operations are provided as a basic mechanism for creating and updating access rules, for which no special wildcard processing is performed.
The actor value for an access entry may contain limited wildcard characters which have special significance only when performing a query operation (cf., Section 3.1).
For the purposes of retrieving and updating entries, actor values are treated simply as literal names.
The Access Service Section 5 contains the APEX service registration for the access service:  Within an administrative domain, the service is addressed using the well known endpoint of "apex access".
Section 6 defines the syntax of the operations exchanged with the service.
A consumer of the service initiates communications by sending data containing a query, get, or set operation.
The service replies to these operations.
When an access entry is changed, the service sends a notification to the owner associated with the changed entry.
An implementation of the service must maintain information about access entries in persistent storage.
Consult Section 6.1.1 of [1] for a discussion on the properties of long lived transaction identifiers.
4.1 Use of XML and MIME Section 4.1 of [1] describes how arbitrary MIME content is exchanged as a BEEP [2] payload.
1' actor 'barney@example.com' actions 'core:data presence:subscribe' /
then the corresponding BEEP message might look like this: C: MSG 1 2 .
Content Type: multipart/related; boundary "boundary";
Content Type: application/beep xml C:
Content Type: application/beep xml C:
C: C: <query owner 'fred@example.com
C: MSG 1 1 .
Content Type: application/beep xml C: C: <
When an application wants to see if a particular operation is allowed, it sends a "query" element to the service.
The "query" element has an "owner" attribute, an "actor" attribute, an "actions" attribute, a "transID" attribute, and no content:  the "owner" attribute specifies the address associated with the access entry;  the "actor" attribute specifies the address (without wildcarding) for which access permissions are queried;
the "actions" attribute specifies one or more actions for which permission is queried; and,  the "transID" attribute specifies the transaction identifier associated with this operation.
When the service receives a "query" element, we refer to the "owner" attribute as the "subject".
The service performs these steps: 1.
If the subject is outside this administrative domain, a "reply" element having code 553 is sent to the originator.
If the subject does not refer to a valid address, a "reply" element having code 550 is sent to the originator.
If the subject's access entry matching the originator does not contain an "access:query" token, a "reply" element having code 537 is sent to the originator.
The subject's access entry matching the actor attribute of the query element is selected (cf., Section 3.1).
If all of the permissions in the "actions" attribute of the query element are contained in the selected access entry, then an "allow" element is sent to the originator.
Otherwise, a "deny" element is sent to the originator.
Regardless of whether an "allow", "deny", or "reply" element is sent to the originator, the "transID" attribute is identical to the value found in the "query" element sent by the originator.
The Get Operation Prior to creating or updating an access entry for some owner/actor combination, an application will usually need to retrieve any existing access entry.
It does so by sending a "get" element to the service.
In particular, a successful response returns a "lastUpdate" value that is necessary when sending a subsequent "set" element.
The "get" element has an "owner" attribute, an "actor" attribute, a "transID" attribute, and no content:  the "owner" attribute specifies the address associated with the access entry;  the "actor" attribute specifies the address (with possible wildcarding) for which access permissions are retrieved; and,  the "transID" attribute specifies the transaction identifier associated with this operation.
When the service receives a "get" element, we refer to the "owner" attribute as the "subject".
The service performs these steps: 1.
If the subject is outside this administrative domain, a "reply" element having code 553 is sent to the originator.
If the subject does not refer to a valid address, a "reply" element having code 550 is sent to the originator.
If the subject's access entry matching the originator does not contain an "access:get" token, a "reply" element having code 537 is sent to the originator.
The subject's access entry whose "actor" attribute identically matches the "actor" attribute of the "get" element is selected.
If no such entry exists, a "reply" element having code 551 is sent to the originator.
Otherwise, a "set" element corresponding to the selected access entry is sent to the originator.
Regardless of whether a "set" or "reply" element is sent to the originator, the "transID" attribute is identical to the value found in the "get" element sent by the originator.
When an application wants to modify (i.e., create, replace, or delete)
the access entry associated with an owner/actor combination, it sends a "set" element to the service.
The "set" element has a "transID" attribute, and contains an "access" element:  the "transID" attribute specifies the transaction identifier associated with this operation; and,  the "access" element contains the access entry to be created, replaced, or deleted.
The "access" element has an "owner" attribute, an "actor" attribute, an optional "actions" attribute, an optional "lastUpdate" attribute, and no content:  the "owner" attribute specifies the address associated with the access entry;  the "actor" attribute specifies the address (with possible wildcarding) for which access permissions are specified;  the "actions" attribute (present only to add or replace an entry) specifies one or more actions for which permission is to be determined; and,  the "lastUpdate" attribute (present only to replace or delete an entry) specifies the current timestamp of the access entry that is to be replaced.
When the service receives a "set" element, we refer to the "owner" attribute of the access element as the "subject".
The service performs these steps: 1.
If the subject is outside this administrative domain, a "reply" element having code 553 is sent to the originator.
If the subject does not refer to a valid address, a "reply" element having code 550 is sent to the originator.
If the subject's access entry matching the originator does not contain an "access:set" token, a "reply" element having code 537 is sent to the originator.
The subject's access entry whose "actor" attribute identically matches the "actor" attribute of the "set" element is selected.
If no such entry exists and the "lastUpdate" attribute is present in the supplied "set" element, a "reply" element having code 555 is sent to the originator.
If no such entry exists and the "lastUpdate" attribute is absent in the supplied "set" element, then: 1.
The access entry for the owner/actor combination is created from the supplied "access" element.
The "lastUpdate" attribute of that access entry set to the service's notion of the current date and time.
A "reply" element having code 250 is sent to the originator.
A "set" element corresponding to the newly created access entry is sent to the subject's address.
If the selected entry exists, but its "lastUpdate" attribute is not semantically identical to the "lastUpdate" attribute of the supplied "access" element, a "reply" element having code 555 is sent to the originator.
If "actions" attribute of the supplied "access" element is not present, then: 1.
The selected entry is deleted.
A "reply" element having code 250 is sent to the originator.
A "set" element corresponding to the owner/actor combination, but lacking an "actions" attribute is sent to the subject's address.
The access entry for the owner/actor combination is updated from the supplied "access" element.
The "lastUpdate" attribute of the updated access entry is set to the service's notion of the current date and time (which should be different from the "lastUpdate" value associated with any replaced entry).
A "reply" element having code 250 is sent to the originator.
A "set" element corresponding to the newly updated access entry is sent to the subject's address.
When sending the "reply" element, the "transID" attribute is identical to the value found in the "set" element sent by the originator.
While processing operations, the service may respond with a "reply" element.
Consult Sections 10.2 and 6.1.2 of [1], respectively, for the definition and an exposition of the syntax of the reply element.
apex access Syntax of Messages Exchanged:
, Section 6 Sequence of Messages Exchanged:
, Section 4 Access Control Tokens:
get, access:set Contact Information: c.f., the "Authors' Addresses" section of this memo 6.
The Access Service DTD <!
DTD for the APEX access service, as of 2001 06 19 Refer to this DTD as: <!
Synopsis of the APEX access service service WKE: apex access message exchanges:
Security Considerations Consult [1]'s Section 11 for a discussion of security issues.
In addition, timestamps issued by the the access service may disclose location information.
If this information is considered sensitive, the special timezone value " 00:00" may be used (after converting the local time accordingly).
