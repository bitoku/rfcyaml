- title: __initial_text__
  contents:
  - "                 Problem Statement and Requirements of\n               the Peer-to-Peer\
    \ Streaming Protocol (PPSP)\n"
- title: Abstract
  contents:
  - "Abstract\n   Peer-to-Peer (P2P) streaming systems becoming more and more popular\n\
    \   on the Internet, and most of them are using proprietary protocols.\n   This\
    \ document identifies problems associated with proprietary\n   protocols; proposes\
    \ the development of the Peer-to-Peer Streaming\n   Protocol (PPSP), which includes\
    \ the tracker and peer protocols; and\n   discusses the scope, requirements, and\
    \ use cases of PPSP.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 5741.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc6972.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2013 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  3\n     1.1.  Backgrounds  . . . . . . . . . . . . . . . . . .\
    \ . . . . .  3\n     1.2.  Requirements Language  . . . . . . . . . . . . . .\
    \ . . . .  3\n   2.  Terminology and Concepts . . . . . . . . . . . . . . . .\
    \ . . .  3\n   3.  Problem Statement  . . . . . . . . . . . . . . . . . . . .\
    \ . .  5\n     3.1.  Heterogeneous P2P Traffic and P2P Cache Deployment . . .\
    \ .  5\n     3.2.  QoS Issue and CDN Deployment . . . . . . . . . . . . . . .\
    \  5\n     3.3.  Extended Applicability in Mobile and Wireless\n           Environments\
    \ . . . . . . . . . . . . . . . . . . . . . . .  6\n   4.  Tasks of PPSP: Standard\
    \ Peer-to-Peer Streaming Protocols . . .  7\n     4.1.  Tasks and Design Issues\
    \ of the Tracker Protocol  . . . . .  8\n     4.2.  Tasks and Design Issues of\
    \ the Peer Protocol . . . . . . .  9\n   5.  Use Cases of PPSP  . . . . . . .\
    \ . . . . . . . . . . . . . . .  9\n     5.1.  Worldwide Provision of Live/VoD\
    \ Streaming  . . . . . . . .  9\n     5.2.  Enabling CDN for P2P VoD Streaming\
    \ . . . . . . . . . . . . 11\n     5.3.  Cross-Screen Streaming . . . . . . .\
    \ . . . . . . . . . . . 12\n     5.4.  Cache Service Supporting P2P Streaming\
    \ . . . . . . . . . . 13\n     5.5.  Proxy Service Supporting P2P Streaming .\
    \ . . . . . . . . . 14\n       5.5.1.  Home Networking Scenario . . . . . . .\
    \ . . . . . . . . 14\n       5.5.2.  Browser-Based HTTP Streaming . . . . . .\
    \ . . . . . . . 14\n   6.  Requirements of PPSP . . . . . . . . . . . . . . .\
    \ . . . . . . 15\n     6.1.  Basic Requirements . . . . . . . . . . . . . . .\
    \ . . . . . 15\n     6.2.  Operational and Management Requirements  . . . . .\
    \ . . . . 15\n       6.2.1.  Operational Considerations . . . . . . . . . . .\
    \ . . . 16\n       6.2.2.  Management Considerations  . . . . . . . . . . . .\
    \ . . 17\n     6.3.  PPSP Tracker Protocol Requirements . . . . . . . . . . .\
    \ . 17\n     6.4.  PPSP Peer Protocol Requirements  . . . . . . . . . . . . .\
    \ 18\n   7.  Security Considerations  . . . . . . . . . . . . . . . . . . . 19\n\
    \   8.  Acknowledgements . . . . . . . . . . . . . . . . . . . . . . . 21\n  \
    \ 9.  References . . . . . . . . . . . . . . . . . . . . . . . . . . 21\n    \
    \ 9.1.  Normative References . . . . . . . . . . . . . . . . . . . 21\n     9.2.\
    \  Informative References . . . . . . . . . . . . . . . . . . 21\n"
- title: 1.  Introduction
  contents:
  - '1.  Introduction

    '
- title: 1.1.  Backgrounds
  contents:
  - "1.1.  Backgrounds\n   Streaming traffic is among the largest and fastest growing\
    \ traffic on\n   the Internet [Cisco].  Peer-to-Peer (P2P) streaming contributes\n\
    \   substantially to this growth.  With the advantage of high scalability\n  \
    \ and fault tolerance against a single point of failure, P2P streaming\n   applications\
    \ are able to distribute large-scale, live, and video-on-\n   demand (VoD) streaming\
    \ programs to a large audience with only a\n   handful of servers.  More and more\
    \ providers are joining the P2P\n   streaming ecosystem, e.g., Content Distribution\
    \ Networks (CDN)\n   providers started using P2P technologies to distribute their\n\
    \   streaming content.\n   Given the increasing integration of P2P streaming in\
    \ the global\n   content delivery infrastructure, there is a need for an open\
    \ and\n   standard streaming signaling protocol suite.  Almost all existing\n\
    \   systems use proprietary protocols.  Having multiple proprietary\n   protocols\
    \ that perform similar functions results in repetitious\n   development efforts\
    \ for new systems, and the lock-in effects lead to\n   substantial integration\
    \ difficulties with other players (e.g., CDN).\n   For example, in the enhancement\
    \ of existing caches and CDN systems to\n   support P2P streaming, proprietary\
    \ protocols may increase the\n   complexity of interactions with different P2P\
    \ streaming applications.\n   In this document, we propose the development of\
    \ an open, P2P\n   Streaming Protocol, which is abbreviated as PPSP, to standardize\n\
    \   signaling operations in the P2P streaming system to solve the above-\n   mentioned\
    \ problems.\n"
- title: 1.2.  Requirements Language
  contents:
  - "1.2.  Requirements Language\n   The key words \"MUST\" and \"MUST NOT\" in this\
    \ document are to be\n   interpreted as described in RFC 2119 [RFC2119] and indicate\n\
    \   requirement levels for compliant implementations.\n"
- title: 2.  Terminology and Concepts
  contents:
  - "2.  Terminology and Concepts\n   CHUNK: A CHUNK is a basic unit of data organized\
    \ in P2P streaming for\n   storage, scheduling, advertisement, and exchange among\
    \ peers [VoD].\n   A CHUNK size varies from several KBs to several MBs in different\n\
    \   systems.  In the case of the MB size CHUNK scenario, a sub-CHUNK\n   structure\
    \ named piece is often defined to fit in a single transmitted\n   packet.  A streaming\
    \ system may use different granularities for\n   different usage, e.g., using\
    \ CHUNKs during data exchange and using a\n   larger unit such as a set of CHUNKs\
    \ during advertisement.\n   CHUNK ID: The identifier of a CHUNK in a content stream.\n\
    \   CLIENT: A CLIENT refers to a participant in a P2P streaming system\n   that\
    \ only receives streaming content.  In some cases, a node not\n   having enough\
    \ computing and storage capabilities will act as a\n   CLIENT.  Such a node can\
    \ be viewed as a specific type of PEER.\n   CONTENT DISTRIBUTION NETWORK (CDN):\
    \ A CDN is a collection of nodes\n   that are deployed, in general, at the network\
    \ edge, like Points of\n   Presence (POP) or Data Centers (DC), and store content\
    \ provided by\n   the original content servers.  Typically, CDN nodes serve content\
    \ to\n   the users located nearby topologically.\n   LIVE STREAMING: LIVE STREAMING\
    \ refers to a scenario where all the\n   audiences receive streaming content for\
    \ the same ongoing event.  It\n   is desired that the lags between the play points\
    \ of the audiences and\n   streaming source be small.\n   P2P CACHE: A P2P CACHE\
    \ refers to a network entity that caches P2P\n   traffic in the network and, either\
    \ transparently or explicitly,\n   streams content to other PEERs.\n   PEER: A\
    \ PEER refers to a participant in a P2P streaming system that\n   not only receives\
    \ streaming content, but also caches and streams\n   streaming content to other\
    \ participants.\n   PEER LIST: A list of PEERs that are in the same SWARM maintained\
    \ by\n   the TRACKER.  A PEER can fetch the PEER LIST of a SWARM from the\n  \
    \ TRACKER or from other PEERs in order to know which PEERs have the\n   required\
    \ streaming content.\n   PEER ID: The identifier of a PEER such that other PEERs,\
    \ or the\n   TRACKER, can refer to the PEER by using its ID.\n   PEER-TO-PEER\
    \ STREAMING PROTOCOL (PPSP): PPSPs refer to the primary\n   signaling protocols\
    \ among various P2P streaming system components,\n   including the TRACKER and\
    \ the PEER.\n   TRACKER: A TRACKER refers to a directory service that maintains\
    \ a\n   list of PEERs participating in a specific audio/video channel or in\n\
    \   the distribution of a streaming file.  Also, the TRACKER answers PEER\n  \
    \ LIST queries received from PEERs.  The TRACKER is a logical component\n   that\
    \ can be centralized or distributed.\n   VIDEO ON DEMAND (VoD): VIDEO ON DEMAND\
    \ refers to a scenario in which\n   different audiences may watch different parts\
    \ of the same recorded\n   streaming with downloaded content.\n   SWARM: A SWARM\
    \ refers to a group of PEERs that exchange data to\n   distribute CHUNKs of the\
    \ same content (e.g., video/audio program,\n   digital file, etc.) at a given\
    \ time.\n   SWARM ID: The identifier of a SWARM containing a group of PEERs\n\
    \   sharing a common streaming content.\n   SUPER-NODE: A SUPER-NODE is a special\
    \ kind of PEER deployed by ISPs.\n   This kind of PEER is more stable with higher\
    \ computing, storage, and\n   bandwidth capabilities than normal PEERs.\n"
- title: 3.  Problem Statement
  contents:
  - "3.  Problem Statement\n   The problems caused by proprietary protocols for P2P\
    \ streaming\n   applications are described in this section.\n"
- title: 3.1.  Heterogeneous P2P Traffic and P2P Cache Deployment
  contents:
  - "3.1.  Heterogeneous P2P Traffic and P2P Cache Deployment\n   ISPs are faced with\
    \ different P2P streaming applications introducing\n   substantial traffic into\
    \ their infrastructure, including their\n   backbone and their exchange/interconnection\
    \ points.  P2P caches are\n   used by ISPs to locally store content and hence\
    \ reduce the P2P\n   traffic.  P2P caches usually operate at the chunk or file\n\
    \   granularity.\n   However, unlike web traffic that is represented by HTTP requests\
    \ and\n   responses and therefore allows any caching device to be served (as\n\
    \   long as it supports HTTP), P2P traffic is originated by multiple P2P\n   applications\
    \ that require the ISPs to deploy different type of caches\n   for the different\
    \ types of P2P streams.\n   This increases both engineering and operational costs\
    \ dramatically.\n"
- title: 3.2.  QoS Issue and CDN Deployment
  contents:
  - "3.2.  QoS Issue and CDN Deployment\n   When compared to client/server streaming,\
    \ P2P streaming is often\n   criticized due to its poorer QoS performance (e.g.,\
    \ longer startup\n   delay, longer seek delay, and channel switch delay).  Hybrid\
    \ CDN/P2P\n   is a good approach to address this problem [CDN-P2P].\n   In order\
    \ to form the hybrid P2P+CDN architecture, the CDN must be\n   aware of the specific\
    \ P2P streaming protocol in the collaboration.\n   Similar to what is described\
    \ in Section 3.1, proprietary P2P\n   protocols introduce complexity and the deployment\
    \ cost of CDN.\n"
- title: 3.3.  Extended Applicability in Mobile and Wireless Environments
  contents:
  - "3.3.  Extended Applicability in Mobile and Wireless Environments\n   Mobile and\
    \ wireless networks, which make considerable use of\n   streaming service, are\
    \ becoming increasingly important in today's\n   Internet.  It's reported that\
    \ the average volume of video traffic on\n   mobile networks had risen up to 50%\
    \ in the early part of 2012\n   [ByteMobile].  There are multiple prior studies\
    \ exploring P2P\n   streaming in mobile and wireless networks [Mobile-Streaming1]\n\
    \   [Mobile-Streaming2].\n   However, it's difficult to directly apply current\
    \ P2P streaming\n   protocols (even assuming we can reuse some of the proprietary\
    \ ones)\n   in mobile and wireless networks.\n   Following are some illustrative\
    \ problems:\n      First, P2P streaming assumes a stable Internet connection in\n\
    \      downlink and uplink directions, with decent capacity and peers\n      that\
    \ can run for hours.  This isn't the typical setting for mobile\n      terminals.\
    \  Usually, the connections are unstable and expensive in\n      terms of energy\
    \ consumption and transmission (especially in uplink\n      direction).  To make\
    \ mobile/wireless P2P streaming feasible,\n      trackers may need more information\
    \ on peers like packet loss rate,\n      peer battery status, and processing capability\
    \ during peer\n      selection as compared to fixed peers.  Unfortunately, current\n\
    \      protocols don't convey this kind of information.\n      Second, current\
    \ practices often use a \"bitmap\" message in order to\n      exchange chunk availability.\
    \  The message size is in kilobytes and\n      is exchanged frequently, e.g.,\
    \ an interval of several seconds or\n      less.  In a mobile environment with\
    \ scarce bandwidth, the message\n      size may need to be shortened, or it may\
    \ require more efficient\n      methods for expressing and distributing chunk-availability\n\
    \      information, which is different from wireline P2P streaming.\n      Third,\
    \ for resource-constrained peers, like mobile handsets or\n      set-top boxes\
    \ (STB), there are multiple systems competing for\n      severely limited resources\
    \ when using proprietary protocols.  The\n      terminal has to install different\
    \ streaming client software for\n      different usages, e.g., some for movies\
    \ and others for sports.\n      Each of these applications will compete for the\
    \ same set of\n      resources, even when one of the applications is running in\n\
    \      background mode.  PPSP can alleviate this problem with the basic\n    \
    \  idea that the \"one common client software with PPSP and different\n      scheduling\
    \ plug-ins\" is better than \"different client software\n      running at the\
    \ same time\" in memory and disk consumption.\n"
- title: '4.  Tasks of PPSP: Standard Peer-to-Peer Streaming Protocols'
  contents:
  - "4.  Tasks of PPSP: Standard Peer-to-Peer Streaming Protocols\n   PPSP aims to\
    \ solve the problems mentioned above by standardizing\n   signaling protocols\
    \ that support either live or VoD streaming.  PPSP\n   supports both centralized\
    \ and distributed trackers.  In distributed\n   trackers, the tracker functionality\
    \ is distributed in decentralized\n   peers.  In this section, the tracker is\
    \ a logic conception that can\n   be implemented in a dedicated tracker server\
    \ or in peers.\n   The PPSP design includes a signaling protocol between trackers\
    \ and\n   peers (the PPSP \"tracker protocol\") and a signaling protocol among\n\
    \   the peers (the PPSP \"peer protocol\") as shown in Figure 1.  The two\n  \
    \ protocols enable peers to receive streaming content within the time\n   constraints.\n\
    \                +------------------------------------------------+\n        \
    \        |                                                |\n                |\
    \     +--------------------------------+         |\n                |     |  \
    \          Tracker             |         |\n                |     +--------------------------------+\
    \         |\n                |        |     ^                   ^            \
    \ |\n                |Tracker |     | Tracker           |Tracker      |\n    \
    \            |Protocol|     | Protocol          |Protocol     |\n            \
    \    |        |     |                   |             |\n                |   \
    \     V     |                   |             |\n                |     +---------+\
    \    Peer     +---------+        |\n                |     |   Peer  |<----------->|\
    \   Peer  |        |\n                |     +---------+   Protocol  +---------+\
    \        |\n                |       | ^                                      |\n\
    \                |       | |Peer                                  |\n        \
    \        |       | |Protocol                              |\n                |\
    \       V |                                      |\n                |     +---------------+\
    \                          |\n                |     |      Peer     |        \
    \                  |\n                |     +---------------+                \
    \          |\n                |                                              \
    \  |\n                |                                                |\n   \
    \             +------------------------------------------------+\n           \
    \         Figure 1: PPSP System Architecture\n   The PPSP design, in general,\
    \ needs to solve the following challenges:\n      1) When joining a swarm, how\
    \ does a peer know which peers it\n      should contact for content?\n      2)\
    \ After determining a set of peers, how does a peer make contact\n      with these\
    \ peers?  In which manner?\n      3) How to choose peers with better service capabilities\
    \ and how to\n      collect such information from peers?\n      4) How to improve\
    \ the efficiency of the communication, e.g., which\n      compact on-the-wire\
    \ message format and suitable underlying\n      transport mechanism (UDP or TCP)?\n\
    \      5) How to improve the robustness of the system using PPSP, e.g.,\n    \
    \  when the tracker fails?  How to make the tracker protocol and the\n      peer\
    \ protocol loosely coupled?\n"
- title: 4.1.  Tasks and Design Issues of the Tracker Protocol
  contents:
  - "4.1.  Tasks and Design Issues of the Tracker Protocol\n   The tracker protocol\
    \ handles the initial and periodic exchange of\n   meta-information between trackers\
    \ and peers, such as a peer list and\n   content information.\n   Therefore, the\
    \ tracker protocol is best modeled as a request/response\n   protocol between\
    \ peers and trackers, and will carry information\n   needed for the selection\
    \ of peers suitable for real-time/VoD\n   streaming.\n   Special tasks for the\
    \ design of the tracker protocol are listed\n   below.  This is a high-level task\
    \ list.  The detailed requirements on\n   the design of the tracker protocol are\
    \ explicated in Section 6.\n      1) How should a peer be globally identified?\
    \  This is related to\n      the peer ID definition but irrelevant to how the\
    \ peer ID is\n      generated.\n      2) How to identify different peers, e.g.,\
    \ peers with public or\n      private IP addresses, peers behind or not behind\
    \ NAT, peers with\n      IPV4 or IPV6 addresses, peers with different properties?\n\
    \      3) The tracker protocol must be light weight, since a tracker may\n   \
    \   need to serve a large number of peers.  This is related to the\n      encoding\
    \ issue (e.g., Binary based or Text based) and keep-alive\n      mechanism.\n\
    \      4) How can the tracker report an optimized peer list to serve\n      particular\
    \ content?  This is related to the status statistic, with\n      which the tracker\
    \ can be aware of the peer status and content\n      status.\n   The PPSP tracker\
    \ protocol will consider all these issues in the\n   design according to the requirements\
    \ from both the peer and tracker\n   perspectives and will also take into consideration\
    \ deployment and\n   operation perspectives.\n"
- title: 4.2.  Tasks and Design Issues of the Peer Protocol
  contents:
  - "4.2.  Tasks and Design Issues of the Peer Protocol\n   The peer protocol controls\
    \ the advertising and exchange of content\n   between the peers.\n   Therefore,\
    \ the peer protocol is modeled as a gossip-like protocol\n   with periodic exchanges\
    \ of neighbor and chunk-availability\n   information.\n   Special tasks for the\
    \ design of the peer protocol are listed below.\n   This is a high-level task-list.\
    \  The detailed requirements on the\n   design of the peer protocol are explicated\
    \ in Section 6.\n      1) How is certain content globally identified and verified?\
    \  Since\n      the content can be retrieved from everywhere, how to ensure the\n\
    \      exchanged content between the peers is authentic?\n      2) How to identify\
    \ the chunk availability in certain content?\n      This is related to the chunk-addressing\
    \ and chunk-state\n      maintenance.  Considering the large amount of chunks\
    \ in certain\n      content, light-weight expression is necessary.\n      3) How\
    \ to ensure the peer protocol efficiency?  As we mentioned in\n      Section 3,\
    \ the chunk availability information exchange is quite\n      frequent.  How to\
    \ balance the information exchange size and amount\n      is a big challenge.\n\
    \   The PPSP peer protocol will consider all the above issues in the\n   design\
    \ according to the requirements from the peer perspective.\n"
- title: 5.  Use Cases of PPSP
  contents:
  - "5.  Use Cases of PPSP\n   This section is not a to-do list for the WG; it provides\
    \ details on\n   how PPSP could be used in practice.\n"
- title: 5.1.  Worldwide Provision of Live/VoD Streaming
  contents:
  - "5.1.  Worldwide Provision of Live/VoD Streaming\n   The content provider can\
    \ increase live streaming coverage by\n   introducing PPSP between different providers.\
    \  This is quite similar\n   to the case described in CDNI [RFC6707] [RFC6770].\n\
    \   Let us assume a scenario in which there is only provider A (e.g., in\n   China)\
    \ providing live streaming service in provider B's (e.g., in the\n   USA) and\
    \ C's (e.g., in Europe) coverage.  Without PPSP, when a user\n   (e.g., a Chinese\
    \ American) in the USA requests the program to the\n   tracker (which is located\
    \ in A's coverage), the tracker may generally\n   return a peer list to the user\
    \ including most of the peers in China,\n   because generally most users are in\
    \ China and there are only few\n   users in the USA.  This may affect the user\
    \ experience.  But, if we\n   can use the PPSP tracker protocol to involve B and\
    \ C in the\n   cooperative provision, as shown in Figure 2, even when the streaming\n\
    \   does no attract many users in the USA and Europe, the tracker in A\n   can\
    \ optimally return a peer list to the user including B's and C's\n   Super-Nodes\
    \ (SN for short) to provide a better user performance.\n   Furthermore, B's User2\
    \ and C's User3 can exchange data (availability)\n   with these local SNs using\
    \ the peer protocol.\n   +-------------------------------------------------------------------+\n\
    \   |                                                                   |\n  \
    \ |                          +------------------+                     |\n   |\
    \            +------------>| A's      Tracker |<----------+         |\n   |  \
    \          |             +------------------+           |         |\n   |    \
    \ Tracker|                ^              ^            |         |\n   |    Protocol|\
    \         Tracker|              |Tracker     |Tracker  |\n   |            |  \
    \      Protocol|              |Protocol    |Protocol |\n   |            |    \
    \            |              |            |         |\n   |            |      \
    \          |              |            |         |\n   |            v        \
    \        v              v            v         |\n   |      +------+ Peer    +------+\
    \            +------+    +------+    |\n   |      | B's  |<------->| B's  |  \
    \          | C's  |    | C's  |    |\n   |      | SN1  |Protocol | SN2  |    \
    \        | SN1  |    | SN2  |    |\n   |      +------+         +------+      \
    \      +------+    +------+    |\n   |         ^  ^                          \
    \                 ^ ^        |\n   |         |  |                            \
    \               | |        |\n   |         |  | Peer Protocol                Peer\
    \ Protocol| |        |\n   | Peer    |  +-------------+              +--------------+\
    \ |Peer    |\n   | Protocol|                |              |                |Protocol|\n\
    \   |         |                |              |                |        |\n  \
    \ |         |                |              |                |        |\n   |\
    \         |                |              |                |        |\n   |  \
    \       v                v              v                v        |\n   |    \
    \  +------+ Peer    +------+    +---------+  Peer   +---------+ |\n   |      |\
    \ A's  |<------> | B's  |    |A's      |<------> |C's      | |\n   |      | User1|Protocol\
    \ | User2|    | User1   |Protocol | User3   | |\n   |      +------+         +------+\
    \    +---------+         +---------+ |\n   |                                 \
    \                                  |\n   +-------------------------------------------------------------------+\n\
    \                 Figure 2: Cooperative Vendors Interaction\n"
- title: 5.2.  Enabling CDN for P2P VoD Streaming
  contents:
  - "5.2.  Enabling CDN for P2P VoD Streaming\n   Figure 3 shows an example of enabling\
    \ CDN to support P2P VoD\n   streaming from different content providers by introducing\
    \ PPSP inside\n   CDN overlays.  It is similar to Figure 2, except that the\n\
    \   intermediate SNs are replaced by 3rd party CDN surrogates.  The CDN\n   nodes\
    \ talk with the different streaming systems (including trackers\n   and peers)\
    \ using the same PPSP protocols.\n   +-------------------------------------------------------------------+\n\
    \   |                                                                   |\n  \
    \ |                   +-------------+    +--------------+             |\n   |\
    \            +----->| A's Tracker |    |  B's Tracker |<---+        |\n   |  \
    \          |      +-------------+    +--------------+    |        |\n   |    \
    \ Tracker|              ^  ^        ^    ^             |        |\n   |    Protocol|\
    \       Tracker|  |Tracker |    |Tracker      |Tracker |\n   |            |  \
    \    Protocol|  |Protocol|    |Protocol     |Protocol|\n   |            |    \
    \          |  |        |    |             |        |\n   |            |      \
    \        |  |        |    |             |        |\n   |            v        \
    \      v  |        |    v             v        |\n   |      +------+ Peer   +------+|\
    \        |  +------+Internal+------+ |\n   |      | CDN  |<------>| CDN  ||  \
    \      |  | CDN  |<-----> | CDN  | |\n   |      | Node1|Protocol| Node2||    \
    \    |  | Node3|Protocol| Node4| |\n   |      +------+        +------+|      \
    \  |  +------+        +------+ |\n   |         ^  ^                 |        |\
    \        ^         ^        |\n   |         |  |                 |        |  \
    \      |         |        |\n   |         |  | Peer Protocol   |        |   HTTP\
    \ |         |        |\n   | Peer    |  +-------------+   |        | +------+\
    \         |Peer    |\n   | Protocol|                |   |        | | Protocol\
    \       |Protocol|\n   |         |                | +-+        | |           \
    \     |        |\n   |         |                | |          | |             \
    \   |        |\n   |         |                | |          | |               \
    \ |        |\n   |         v                v v          v v                v\
    \        |\n   |      +------+ Peer    +------+    +---------+  Peer   +---------+\
    \ |\n   |      | A's  |<------> | A's  |    |B's      |<------> |B's      | |\n\
    \   |      | User1|Protocol | User2|    | User3   |Protocol | User4   | |\n  \
    \ |      +------+         +------+    +---------+         +---------+ |\n   |\
    \                                                                   |\n   +-------------------------------------------------------------------+\n\
    \                  Figure 3: CDN Supporting P2P Streaming\n   Furthermore, the\
    \ interaction between the CDN nodes can be executed by\n   either existing (maybe\
    \ proprietary) protocols or the PPSP peer\n   protocol.  The peer protocol is\
    \ useful for building new CDN systems\n   (e.g., operator CDN) that support streaming\
    \ at a low cost.\n   Note that for compatibility reasons, both HTTP and P2P streaming\
    \ can\n   be supported by CDN from the users' perspective.\n"
- title: 5.3.  Cross-Screen Streaming
  contents:
  - "5.3.  Cross-Screen Streaming\n   In this scenario, PC, STB/TV, and mobile terminals\
    \ from both fixed\n   and mobile/wireless networks share the streaming content.\
    \  With PPSP,\n   peers can identify the types of access networks, average load,\
    \ and\n   peer abilities and get to know what content other peers have even in\n\
    \   different networks (potentially with the conversion of the content\n   availability\
    \ expression in different networks) as shown in Figure 4.\n    +------------------------------------------------------------------+\n\
    \    |                                                                  |\n  \
    \  |      Tracker Protocol  +---------+   Tracker Protocol            |\n    |\
    \        +-------------> | Tracker |<------------------+           |\n    |  \
    \      |               +---------+                   |           |\n    |    \
    \    |                    ^                        |           |\n    |      \
    \  |                    |                        |           |\n    |        |\
    \                    |                        |           |\n    |        V  \
    \                  |                        V           |\n    |    +------+ \
    \                |                +------------+      |\n    |    |  STB |   \
    \        Tracker Protocol       |Mobile Phone|      |\n    |    +------+     \
    \            |                +------------+      |\n    |        ^          \
    \          |                        ^           |\n    |        |            \
    \        |                        |           |\n    |        |              \
    \      |                        |           |\n    |        |                \
    \    V                        |           |\n    |        |Peer Protocol  +---------+\
    \    Peer Protocol  |           |\n    |        +-------------> |    PC   |<------------------+\
    \           |\n    |                        +---------+                      \
    \         |\n    |                                                           \
    \       |\n    +------------------------------------------------------------------+\n\
    \              Figure 4: Heterogeneous P2P Streaming with PPSP\n   Such information\
    \ will play an important role in selecting suitable\n   peers, e.g., a PC or STB\
    \ is more likely to provide stable content,\n   and a mobile peer within a high-load\
    \ cell is unlikely to be selected,\n   which may lead to a higher load on the\
    \ base station.\n"
- title: 5.4.  Cache Service Supporting P2P Streaming
  contents:
  - "5.4.  Cache Service Supporting P2P Streaming\n   In Figure 5, when peers request\
    \ the P2P streaming data, the cache\n   nodes intercept the requests and ask for\
    \ the frequently visited\n   content (or part of) on behalf of the peers.  To\
    \ do this, it asks the\n   tracker for the peer list and the tracker replies with\
    \ external peers\n   in the peer list.  After the cache nodes exchange data with\
    \ these\n   peers, it can also act as a peer and report what it caches to the\n\
    \   tracker and serve inside requesting peers afterward.  This operation\n   greatly\
    \ decreases the inter-network traffic in many conditions and\n   enhances the\
    \ user experience.\n      +----------------------------------------------------------------+\n\
    \      |                                                                |\n  \
    \    |    Tracker Protocol +---------+                                |\n    \
    \  |  +----------------> | Tracker |                                |\n      |\
    \  |                  +---------+                                |\n      |  |\
    \                       ^                                     |\n      |  |  \
    \                     |                                     |\n      |  |    \
    \                   | Tracker Protocol                    |\n      |  |      \
    \                 |                                     |\n      |  |        \
    \               |                                     |\n      |  |          \
    \   +---------|-------------------------------------|\n      |  |            \
    \ |         V                                     |\n      |  |             |\
    \     +---------+                               |\n      |  |  +----------|--->\
    \ | Cache   |<-------------------+          |\n      |  |  |          |     +---------+\
    \        Tracker/Peer|          |\n      |  |  | Peer     |                  \
    \        Protocol  |          |\n      |  |  | Protocol |                    \
    \                |          |\n      |  |  |          |                      \
    \              |          |\n      |  |  |          |                        \
    \            |          |\n      |  V  V          |                          \
    \          V          |\n      |  +-----------+ |        ISP Domain          \
    \   +------------+  |\n      |  |  External | |                              \
    \ |   Inside   |  |\n      |  |  Peer     | |                               |\
    \   Peer     |  |\n      |  +-----------+ |                               +------------+\
    \  |\n      +----------------------------------------------------------------+\n\
    \          Figure 5: Cache Service Supporting Streaming with PPSP\n   The cache\
    \ nodes do not need to update their library when new\n   applications supporting\
    \ PPSP are introduced, which reduces the cost.\n"
- title: 5.5.  Proxy Service Supporting P2P Streaming
  contents:
  - '5.5.  Proxy Service Supporting P2P Streaming

    '
- title: 5.5.1.  Home Networking Scenario
  contents:
  - "5.5.1.  Home Networking Scenario\n   For applications where the peer is not colocated\
    \ with the Media\n   Player in the same device (e.g., the peer is located in a\
    \ Home Media\n   Gateway), we can use a PPSP Proxy, as shown in Figure 6.\n  \
    \     +---------------------------------------------------------------+\n    \
    \   |                                                               |\n      \
    \ |    Tracker Protocol +--------+                                |\n       |\
    \  +----------------> | Tracker|                                |\n       |  |\
    \                  +--------+                                |\n       |  |  \
    \                     ^                                    |\n       |  |    \
    \                   |                                    |\n       |  |      \
    \                 | Tracker Protocol                   |\n       |  |        \
    \               |                                    |\n       |  |          \
    \   +---------|------------------------------------|\n       |  |            \
    \ |         V                                    |\n       |  |             |\
    \     +--------+                               |\n       |  |  +----------|--->\
    \ |  PPSP   |<------------------+          |\n       |  |  |          |     |\
    \  Proxy  |       DLNA         |         |\n       |  |  | Peer     |     +--------+\
    \       Protocol     |          |\n       |  |  | Protocol|                  \
    \                  |          |\n       |  |  |          |                   \
    \                 |         |\n       |  V  V          |                     \
    \               V         |\n       |  +-----------+ |        Home Domain    \
    \        +-----------+  |\n       |  |  External | |                         \
    \      |DLNA  Pres.|  |\n       |  |  Peer     | |                           \
    \    |Devices    |  |\n       |  +-----------+ |                             \
    \  +-----------+  |\n       +---------------------------------------------------------------+\n\
    \             Figure 6: Proxy Service Supporting P2P Streaming\n   As shown in\
    \ Figure 6, the PPSP Proxy terminates both the tracker and\n   peer protocol,\
    \ allowing the legacy presentation devices to access P2P\n   streaming content.\
    \  In Figure 6, the Digital Living Network Alliance\n   (DLNA) protocol [DLNA]\
    \ is used in order to communicate with the\n   presentation devices, thanks to\
    \ its wide deployment.  Obviously,\n   other protocols can also be used.\n"
- title: 5.5.2.  Browser-Based HTTP Streaming
  contents:
  - "5.5.2.  Browser-Based HTTP Streaming\n   P2P Plug-ins are often used in browser-based\
    \ environments to stream\n   content.  With P2P plug-ins, HTTP streaming can be\
    \ turned into P2P\n   streaming.  From the browser (and hence the user) perspective,\
    \ it's\n   just HTTP-based streaming, but the PPSP-capable plug-in can actually\n\
    \   accelerate the process by leveraging streams from multiple sources/\n   peers\
    \ [P2PYoutube].  In this case, the plug-ins behave just like the\n   proxy.\n"
- title: 6.  Requirements of PPSP
  contents:
  - "6.  Requirements of PPSP\n   This section enumerates the requirements that should\
    \ be considered\n   when designing PPSP.\n"
- title: 6.1.  Basic Requirements
  contents:
  - "6.1.  Basic Requirements\n   PPSP.REQ-1: Each peer MUST have a unique ID (i.e.,\
    \ peer ID).\n      It's a basic requirement for a peer to be uniquely identified\
    \ in a\n      P2P streaming system so that other peers or trackers can refer to\n\
    \      the peer by ID.\n      Note that a peer can join multiple swarms with a\
    \ unique ID or\n      change swarm without changing its ID.\n   PPSP.REQ-2: The\
    \ streaming content MUST be uniquely identified by a\n   swarm ID.\n      A swarm\
    \ refers to a group of peers sharing the same streaming\n      content.  A swarm\
    \ ID uniquely identifies a swarm.  The swarm ID\n      can be used in two cases:\
    \ 1) a peer requests the tracker for the\n      peer list indexed by a swarm ID;\
    \ 2) a peer tells the tracker about\n      the swarms it belongs to.\n   PPSP.REQ-3:\
    \ The streaming content MUST be partitioned into chunks.\n   PPSP.REQ-4: Each\
    \ chunk MUST have a unique ID (i.e., chunk ID) in the\n   swarm.\n      Each chunk\
    \ must have a unique ID in the swarm so that the peer can\n      understand which\
    \ chunks are stored in which peers and which chunks\n      are requested by other\
    \ peers.\n"
- title: 6.2.  Operational and Management Requirements
  contents:
  - "6.2.  Operational and Management Requirements\n   This section lists some operational\
    \ and management requirements based\n   on the checklist presented in Appendix\
    \ A of [RFC5706].\n"
- title: 6.2.1.  Operational Considerations
  contents:
  - "6.2.1.  Operational Considerations\n   PPSP.OAM.REQ-1: PPSP MUST be sufficiently\
    \ configurable.\n      According to basic requirements, when setting up PPSP,\
    \ a content\n      provider should generate chunk IDs and a swarm ID for each\
    \ stream\n      of content.  An original content server and tracker are configured\n\
    \      and set up.  The content provider should then publish this\n      information,\
    \ typically by creating web links.\n      The configuration should allow the proxy-based\
    \ and end-client\n      scenarios.\n   PPSP.OAM.REQ-2: PPSP MUST implement a set\
    \ of configuration parameters\n   with default values.\n   PPSP.OAM.REQ-3: PPSP\
    \ MUST support diagnostic operations.\n      Mechanisms must be supported by PPSP\
    \ to verify correct operation.\n      The PPSP tracker should collect the status\
    \ of the peers including\n      the peer's activity, whether it obtained chunks\
    \ in time, etc.\n      Such information can be used to monitor the streaming behavior\
    \ of\n      PPSP.\n   PPSP.OAM.REQ-4: PPSP MUST facilitate achieving quality acceptable\
    \ to\n   the streaming application.\n      There are basic quality requirements\
    \ for streaming systems.  The\n      setup time to receive a new streaming channel\
    \ or to switch between\n      channels should be reasonably small.  End-to-end\
    \ delay, which\n      consists of the time between content generation (e.g., a\
    \ camera)\n      and content consumption (e.g., a monitor), will become critical\
    \ in\n      case of live streaming, especially in provisioning of sporting\n \
    \     events where an end-to-end delay of 1 minute or more are not\n      acceptable.\n\
    \      For instance, the tracker and peer protocol can carry quality\n      related\
    \ parameters (e.g., video quality and delay requirements)\n      together with\
    \ the priorities of these parameters, in addition to\n      the measured QoS situation\
    \ (e.g., performance, available uplink\n      bandwidth) of content providing\
    \ peers.\n      PPSP implementations may use techniques such as scalable streaming\n\
    \      to handle bandwidth shortages without disrupting playback.\n"
- title: 6.2.2.  Management Considerations
  contents:
  - "6.2.2.  Management Considerations\n   PPSP.OAM.REQ-5: When management objectives\
    \ need to be supported in\n   implementations, PPSP MUST support remote management\
    \ using a standard\n   interface, as well as a basic set of management information.\n\
    \      Due to large-scale peer networks, PPSP tracker service or seeders\n   \
    \   should remotely collect information from peers and expose the\n      information\
    \ via a standard interface for management purposes.\n      Peer information can\
    \ be collected via a PPSP tracker protocol or\n      peer protocol.\n      The\
    \ minimum set of management objects should include swarm\n      information such\
    \ as content characteristics and rate limits;\n      tracking information such\
    \ as swarm list and log events; and peer\n      information such as peer activity,\
    \ chunk statistics, and log\n      event.\n   PPSP.OAM.REQ-6: PPSP MUST support\
    \ fault monitoring including peer and\n   server health, as well as the streaming\
    \ behavior of peers.\n      Peer and server health will at least include node\
    \ activity and\n      connectivity, especially for peers behind NAT.  As mentioned\
    \ in\n      PPSP.OAM.REQ-4, streaming behavior of the peer can be learned from\n\
    \      chunk distribution information.\n   PPSP.OAM.REQ-7: PPSP MUST support configuration\
    \ management to define\n   the configuration parameters.\n      A set of configurable\
    \ parameters related to chunk generation in\n      the PPSP setup stage can be\
    \ defined by content providers via a\n      management interface to content servers.\n\
    \   PPSP.OAM.REQ-8: PPSP MUST support performance management with respect\n  \
    \ to streaming performance based on chunk distribution statistics,\n   network\
    \ load, and tracker and peer monitoring.\n   PPSP.OAM.REQ-9: PPSP MUST support\
    \ security management.  See Section 7\n   of this document.\n"
- title: 6.3.  PPSP Tracker Protocol Requirements
  contents:
  - "6.3.  PPSP Tracker Protocol Requirements\n   PPSP.TP.REQ-1: The tracker protocol\
    \ MUST allow the peer to solicit a\n   peer list in a swarm generated and possibly\
    \ tailored by the tracker\n   in a query and response manner.\n      The tracker\
    \ request message may include the requesting peer's\n      preference parameter\
    \ (e.g., preferred number of peers in the peer\n      list) or preferred downloading\
    \ bandwidth.  The tracker will then\n      be able to select an appropriate set\
    \ of peers for the requesting\n      peer according to the preference.\n     \
    \ The tracker may also generate the peer list with the help of\n      traffic\
    \ optimization services, e.g., Application-Layer Traffic\n      Optimization [ALTO].\n\
    \   PPSP.TP.REQ-2: The tracker protocol MUST report the peer's activity\n   in\
    \ the swarm to the tracker.\n   PPSP.TP.REQ-3: The tracker protocol MUST take\
    \ the frequency of\n   message exchange and efficient bandwidth use into consideration\
    \ when\n   communicating chunk availability information.\n      For example, the\
    \ chunk availability information between peer and\n      tracker can be presented\
    \ in a compact method, e.g., to express a\n      sequence of continuous \"1\"\
    \ more efficiently.\n   PPSP.TP.REQ-4: The tracker protocol MUST have a provision\
    \ for the\n   tracker to authenticate the peer.\n      This ensures that only\
    \ the authenticated users can access the\n      original content in the P2P streaming\
    \ system.\n"
- title: 6.4.  PPSP Peer Protocol Requirements
  contents:
  - "6.4.  PPSP Peer Protocol Requirements\n   PPSP.PP.REQ-1: The peer protocol MUST\
    \ allow the peer to solicit the\n   chunk information from other peers in a query\
    \ and response manner.\n   PPSP.PP.REQ-2: The chunk information exchanged between\
    \ a pair of\n   peers MUST NOT be passed to other peers, unless the chunk information\n\
    \   is validated (e.g., preventing hearsay and DoS attacks).\n   PPSP.PP.REQ-3:\
    \ The peer protocol MUST allow the peer to solicit an\n   additional list of peers\
    \ to that received from the tracker.\n      It is possible that a peer may need\
    \ additional peers for certain\n      streaming content.  Therefore, the peer\
    \ is allowed to communicate\n      with other peers in the current peer list to\
    \ obtain an additional\n      list of peers in the same swarm.\n   PPSP.PP.REQ-4:\
    \ When used for soliciting an additional list of peers,\n   the peer protocol\
    \ MUST contain swarm-membership information of the\n   peers that have explicitly\
    \ indicated they are part of the swarm,\n   which is verifiable by the receiver.\n\
    \   PPSP.PP.REQ-5: The additional list of peers MUST only contain peers\n   that\
    \ have been checked to be valid and online recently (e.g.,\n   preventing hearsay\
    \ and DoS attacks).\n   PPSP.PP.REQ-6: The peer protocol MUST report the peer's\
    \ chunk\n   availability update.\n      Due to the dynamic change of the buffered\
    \ streaming content in\n      each peer and the frequent join/leave of peers in\
    \ the swarm, the\n      streaming content availability among a peer's neighbors\
    \ (i.e., the\n      peers known to a peer by getting the peer list from either\
    \ the\n      tracker or peers) always changes, and thus requires being updated\n\
    \      on time.  This update should be done at least on demand.  For\n      example,\
    \ when a peer requires finding more peers with certain\n      chunks, it sends\
    \ a message to some other peers in the swarm for a\n      streaming content availability\
    \ update.  Alternatively, each peer\n      in the swarm can advertise its streaming\
    \ content availability to\n      some other peers periodically.  However, the\
    \ detailed mechanisms\n      for this update, such as how far to spread the update\
    \ message, how\n      often to send this update message, etc., should be left\
    \ to the\n      algorithms, rather than protocol concerns.\n   PPSP.PP.REQ-7:\
    \ The peer protocol MUST take the frequency of message\n   exchange and efficient\
    \ bandwidth use into consideration when\n   communicating chunk information.\n\
    \      For example, the chunk availability information between peers can\n   \
    \   be presented in a compact method.\n   PPSP.PP.REQ-8: The peer protocol MUST\
    \ exchange additional\n   information, e.g., status about the peers.\n      This\
    \ information can be, for instance, information about the\n      access link or\
    \ information about whether a peer is running on\n      battery or is connected\
    \ to a power supply.  With such information,\n      a peer can select more appropriate\
    \ peers for streaming.\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   This document discusses the problem statement\
    \ and requirements around\n   P2P streaming protocols without specifying the protocols.\
    \  However,\n   we believe it is important for the reader to understand areas\
    \ of\n   security introduced by the P2P nature of the proposed solution.  The\n\
    \   main issue is the usage of untrusted entities (peers) for service\n   provisioning.\
    \  For example, malicious peers/trackers may:\n   o  Originate DoS attacks to\
    \ the trackers by sending a large number of\n      requests with the tracker protocol;\n\
    \   o  Originate fake information on behalf of other peers;\n   o  Originate fake\
    \ information about chunk availability;\n   o  Originate fake reply messages on\
    \ behalf of the tracker;\n   o  Leak private information about other peers or\
    \ trackers.\n   We list some important security requirements for PPSP protocols\n\
    \   below:\n   PPSP.SEC.REQ-1: PPSP MUST support closed swarms, where the peers\
    \ are\n   authenticated or in a private network.\n      This ensures that only\
    \ the trusted peers can access the original\n      content in the P2P streaming\
    \ system.  This can be achieved by\n      security mechanisms such as peer authentication\
    \ and/or key\n      management schemes.\n      Another aspect is that confidentiality\
    \ of the streaming content in\n      PPSP needs to be supported.  In order to\
    \ achieve this, PPSP should\n      provide mechanisms to encrypt the data exchange\
    \ among the peers.\n   PPSP.SEC.REQ-2: Integrity of the streaming content in PPSP\
    \ MUST be\n   supported to provide a peer with the possibility of identifying\n\
    \   unauthentic content (undesirable modifications by other entities\n   rather\
    \ than its genuine source).\n      In a P2P live streaming system, a polluter\
    \ can introduce corrupted\n      chunks.  Each receiver integrates into its playback\
    \ stream the\n      polluted chunks it receives from its neighbors.  Since the\
    \ peers\n      forward chunks to other peers, the polluted content can\n     \
    \ potentially spread through the P2P streaming network.\n      The PPSP protocol\
    \ specifications will document the expected\n      threats (and how they will\
    \ be mitigated by each protocol) and also\n      considerations on threats and\
    \ mitigations when combining both\n      protocols in an application.  This will\
    \ include privacy of the\n      users and protection of the content distribution.\n\
    \   PPSP.SEC.REQ-3: The security mechanisms in PPSP, such as key\n   management\
    \ and checksum distribution, MUST scale well in P2P\n   streaming systems.\n"
- title: 8.  Acknowledgements
  contents:
  - "8.  Acknowledgements\n   Thanks to J. Seng, G. Camarillo, R. Yang, C. Schmidt,\
    \ R. Cruz, Y. Gu,\n   A. Bakker, and S. Previdi for contributing to many sections\
    \ of this\n   document.  Thank you to C. Williams, V. Pascual, and L. Xiao for\n\
    \   contributing to the PPSP requirements section.\n   We would like to acknowledge\
    \ the following people who provided\n   review, feedback, and suggestions to this\
    \ document: M. Stiemerling,\n   D. Bryan, E. Marocco, V. Gurbani, R. Even, H.\
    \ Zhang, D. Zhang,\n   J. Lei, H. Song, X. Jiang, J. Seedorf, D. Saumitra, A.\
    \ Rahman,\n   J. Pouwelse, W. Eddy, B. Claise, D. Harrington, J. Arkko, and all\
    \ the\n   AD reviewers.\n"
- title: 9.  References
  contents:
  - '9.  References

    '
- title: 9.1.  Normative References
  contents:
  - "9.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [RFC5706]  Harrington, D., \"Guidelines for Considering Operations\
    \ and\n              Management of New Protocols and Protocol Extensions\",\n\
    \              RFC 5706, November 2009.\n   [RFC6707]  Niven-Jenkins, B., Le Faucheur,\
    \ F., and N. Bitar, \"Content\n              Distribution Network Interconnection\
    \ (CDNI) Problem\n              Statement\", RFC 6707, September 2012.\n   [RFC6770]\
    \  Bertrand, G., Stephan, E., Burbridge, T., Eardley, P., Ma,\n              K.,\
    \ and G. Watson, \"Use Cases for Content Delivery Network\n              Interconnection\"\
    , RFC 6770, November 2012.\n"
- title: 9.2.  Informative References
  contents:
  - "9.2.  Informative References\n   [ALTO]     Alimi, R., Penno, R., and Y. Yang,\
    \ \"ALTO Protocol\", Work\n              in Progress, December 2009.\n   [ByteMobile]\n\
    \              Bytemobile, \"Mobile Video Traffic Hits Nearly 70% on\n       \
    \       Certain Networks\", February 2012,\n              <http://www.bytemobile.com/news-events/2012/\n\
    \              archive_230212.html>.\n   [CDN-P2P]  Xu, D., Kulkarni, S., Rosenberg,\
    \ C., and H-K. Chai,\n              \"Analysis of a CDN-P2P Hybrid Architecture\
    \ for\n              Cost-Effective Streaming Media Distribution\", Multimedia\n\
    \              Systems, vol. 11, no. 4, pp. 383-399, 2006.\n   [Cisco]    Cisco,\
    \ \"Cisco Visual Networking Index: Forecast and\n              Methodology, 2012\
    \ - 2017\", Visual Networking Index (VNI),\n              <http://www.cisco.com/en/US/solutions/collateral/ns341/\n\
    \              ns525/ns537/ns705/ns827/ white_paper_c11-481360_\n            \
    \  ns827_Networking_Solutions_White_Paper.html>.\n   [DLNA]     \"DLNA\", <http://www.dlna.org>.\n\
    \   [Mobile-Streaming1]\n              Noh, J., Makar, M., and B. Girod, \"Streaming\
    \ To Mobile\n              Users In A Peer-to-Peer Network\", MOBIMEDIA , 2009.\n\
    \   [Mobile-Streaming2]\n              Peltotalo, J., Harju, J., Saukkoh, M.,\
    \ Vaatamoinen, L.,\n              Bouazizi, I., Curcio, I., and J. van Gassel,\
    \ \"A Real-Time\n              Peer-to-Peer Streaming System for Mobile Networking\n\
    \              Environment\", Proceedings of the INFOCOM and Workshop on\n   \
    \           Mobile Video Delivery (MoVID '09), 2009.\n   [P2PYoutube]\n      \
    \        \"Youtube Extension-Opera Add-Ons\", Opera Software,\n              <https://addons.opera.com/en/extensions/details/\n\
    \              p2p-youtube/>.\n   [VoD]      Huang, Y., Fu, T., Chiu, D-M.,  Lui,\
    \ J., and C. Huang,\n              \"Challenges, Design and Analysis of a Large-Scale\
    \ P2P-VoD\n              System\", SIGCOMM , 2008.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Yunfei Zhang\n   Coolpad\n   EMail: hishigh@gmail.com\n\
    \   Ning Zong\n   Huawei Technologies\n   EMail: zongning@huawei.com\n"
