- contents:
  - '                Clarifications to the DNS Specification

    '
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "1. Abstract\n   This document considers some areas that have been identified
    as\n   problems with the specification of the Domain Name System, and\n   proposes
    remedies for the defects identified.  Eight separate issues\n   are considered:\n
    \    + IP packet header address usage from multi-homed servers,\n     + TTLs in
    sets of records with the same name, class, and type,\n     + correct handling
    of zone cuts,\n     + three minor issues concerning SOA records and their use,\n
    \    + the precise definition of the Time to Live (TTL)\n     + Use of the TC
    (truncated) header bit\n     + the issue of what is an authoritative, or canonical,
    name,\n     + and the issue of what makes a valid DNS label.\n   The first six
    of these are areas where the correct behaviour has been\n   somewhat unclear,
    we seek to rectify that.  The other two are already\n   adequately specified,
    however the specifications seem to be sometimes\n   ignored.  We seek to reinforce
    the existing specifications.\n"
  - "Contents\n    1  Abstract  ...................................................
    \  1\n    2  Introduction  ...............................................   2\n
    \   3  Terminology  ................................................   3\n    4
    \ Server Reply Source Address Selection  ......................   3\n    5  Resource
    Record Sets  .......................................   4\n    6  Zone Cuts  ..................................................
    \  8\n    7  SOA RRs  ....................................................  10\n
    \   8  Time to Live (TTL)  .........................................  10\n    9
    \ The TC (truncated) header bit  ..............................  11\n   10  Naming
    issues  ..............................................  11\n   11  Name syntax
    \ ................................................  13\n   12  Security Considerations
    \ ....................................  14\n   13  References  .................................................
    \ 14\n   14  Acknowledgements  ...........................................  15\n
    \  15  Authors' Addresses  .........................................  15\n"
  title: 1. Abstract
- contents:
  - "2. Introduction\n   Several problem areas in the Domain Name System specification\n
    \  [RFC1034, RFC1035] have been noted through the years [RFC1123].  This\n   document
    addresses several additional problem areas.  The issues here\n   are independent.
    \ Those issues are the question of which source\n   address a multi-homed DNS
    server should use when replying to a query,\n   the issue of differing TTLs for
    DNS records with the same label,\n   class and type, and the issue of canonical
    names, what they are, how\n   CNAME records relate, what names are legal in what
    parts of the DNS,\n   and what is the valid syntax of a DNS name.\n   Clarifications
    to the DNS specification to avoid these problems are\n   made in this memo.  A
    minor ambiguity in RFC1034 concerned with SOA\n   records is also corrected, as
    is one in the definition of the TTL\n   (Time To Live) and some possible confusion
    in use of the TC bit.\n"
  title: 2. Introduction
- contents:
  - "3. Terminology\n   This memo does not use the oft used expressions MUST, SHOULD,
    MAY, or\n   their negative forms.  In some sections it may seem that a\n   specification
    is worded mildly, and hence some may infer that the\n   specification is optional.
    \ That is not correct.  Anywhere that this\n   memo suggests that some action
    should be carried out, or must be\n   carried out, or that some behaviour is acceptable,
    or not, that is to\n   be considered as a fundamental aspect of this specification,\n
    \  regardless of the specific words used.  If some behaviour or action\n   is
    truly optional, that will be clearly specified by the text.\n"
  title: 3. Terminology
- contents:
  - "4. Server Reply Source Address Selection\n   Most, if not all, DNS clients, expect
    the address from which a reply\n   is received to be the same address as that
    to which the query\n   eliciting the reply was sent.  This is true for servers
    acting as\n   clients for the purposes of recursive query resolution, as well
    as\n   simple resolver clients.  The address, along with the identifier (ID)\n
    \  in the reply is used for disambiguating replies, and filtering\n   spurious
    responses.  This may, or may not, have been intended when\n   the DNS was designed,
    but is now a fact of life.\n   Some multi-homed hosts running DNS servers generate
    a reply using a\n   source address that is not the same as the destination address
    from\n   the client's request packet.  Such replies will be discarded by the\n
    \  client because the source address of the reply does not match that of\n   a
    host to which the client sent the original request.  That is, it\n   appears to
    be an unsolicited response.\n"
  - contents:
    - "4.1. UDP Source Address Selection\n   To avoid these problems, servers when
      responding to queries using UDP\n   must cause the reply to be sent with the
      source address field in the\n   IP header set to the address that was in the
      destination address\n   field of the IP header of the packet containing the
      query causing the\n   response.  If this would cause the response to be sent
      from an IP\n   address that is not permitted for this purpose, then the response
      may\n   be sent from any legal IP address allocated to the server.  That\n   address
      should be chosen to maximise the possibility that the client\n   will be able
      to use it for further queries.  Servers configured in\n   such a way that not
      all their addresses are equally reachable from\n   all potential clients need
      take particular care when responding to\n   queries sent to anycast, multicast,
      or similar, addresses.\n"
    title: 4.1. UDP Source Address Selection
  - contents:
    - "4.2. Port Number Selection\n   Replies to all queries must be directed to the
      port from which they\n   were sent.  When queries are received via TCP this
      is an inherent\n   part of the transport protocol.  For queries received by
      UDP the\n   server must take note of the source port and use that as the\n   destination
      port in the response.  Replies should always be sent from\n   the port to which
      they were directed.  Except in extraordinary\n   circumstances, this will be
      the well known port assigned for DNS\n   queries [RFC1700].\n"
    title: 4.2. Port Number Selection
  title: 4. Server Reply Source Address Selection
- contents:
  - "5. Resource Record Sets\n   Each DNS Resource Record (RR) has a label, class,
    type, and data.  It\n   is meaningless for two records to ever have label, class,
    type and\n   data all equal - servers should suppress such duplicates if\n   encountered.
    \ It is however possible for most record types to exist\n   with the same label,
    class and type, but with different data.  Such a\n   group of records is hereby
    defined to be a Resource Record Set\n   (RRSet).\n"
  - contents:
    - "5.1. Sending RRs from an RRSet\n   A query for a specific (or non-specific)
      label, class, and type, will\n   always return all records in the associated
      RRSet - whether that be\n   one or more RRs.  The response must be marked as
      \"truncated\" if the\n   entire RRSet will not fit in the response.\n"
    title: 5.1. Sending RRs from an RRSet
  - contents:
    - "5.2. TTLs of RRs in an RRSet\n   Resource Records also have a time to live
      (TTL).  It is possible for\n   the RRs in an RRSet to have different TTLs.  No
      uses for this have\n   been found that cannot be better accomplished in other
      ways.  This\n   can, however, cause partial replies (not marked \"truncated\")
      from a\n   caching server, where the TTLs for some but not all the RRs in the\n
      \  RRSet have expired.\n   Consequently the use of differing TTLs in an RRSet
      is hereby\n   deprecated, the TTLs of all RRs in an RRSet must be the same.\n
      \  Should a client receive a response containing RRs from an RRSet with\n   differing
      TTLs, it should treat this as an error.  If the RRSet\n   concerned is from
      a non-authoritative source for this data, the\n   client should simply ignore
      the RRSet, and if the values were\n   required, seek to acquire them from an
      authoritative source.  Clients\n   that are configured to send all queries to
      one, or more, particular\n   servers should treat those servers as authoritative
      for this purpose.\n   Should an authoritative source send such a malformed RRSet,
      the\n   client should treat the RRs for all purposes as if all TTLs in the\n
      \  RRSet had been set to the value of the lowest TTL in the RRSet.  In\n   no
      case may a server send an RRSet with TTLs not all equal.\n"
    title: 5.2. TTLs of RRs in an RRSet
  - contents:
    - "5.3. DNSSEC Special Cases\n   Two of the record types added by DNS Security
      (DNSSEC) [RFC2065]\n   require special attention when considering the formation
      of Resource\n   Record Sets.  Those are the SIG and NXT records.  It should
      be noted\n   that DNS Security is still very new, and there is, as yet, little\n
      \  experience with it.  Readers should be prepared for the information\n   related
      to DNSSEC contained in this document to become outdated as\n   the DNS Security
      specification matures.\n"
    - contents:
      - "5.3.1. SIG records and RRSets\n   A SIG record provides signature (validation)
        data for another RRSet\n   in the DNS.  Where a zone has been signed, every
        RRSet in the zone\n   will have had a SIG record associated with it.  The
        data type of the\n   RRSet is included in the data of the SIG RR, to indicate
        with which\n   particular RRSet this SIG record is associated.  Were the rules
        above\n   applied, whenever a SIG record was included with a response to\n
        \  validate that response, the SIG records for all other RRSets\n   associated
        with the appropriate node would also need to be included.\n   In some cases,
        this could be a very large number of records, not\n   helped by their being
        rather large RRs.\n   Thus, it is specifically permitted for the authority
        section to\n   contain only those SIG RRs with the \"type covered\" field
        equal to the\n   type field of an answer being returned.  However, where SIG
        records\n   are being returned in the answer section, in response to a query
        for\n   SIG records, or a query for all records associated with a name\n   (type=ANY)
        the entire SIG RRSet must be included, as for any other RR\n   type.\n   Servers
        that receive responses containing SIG records in the\n   authority section,
        or (probably incorrectly) as additional data, must\n   understand that the
        entire RRSet has almost certainly not been\n   included.  Thus, they must
        not cache that SIG record in a way that\n   would permit it to be returned
        should a query for SIG records be\n   received at that server.  RFC2065 actually
        requires that SIG queries\n   be directed only to authoritative servers to
        avoid the problems that\n   could be caused here, and while servers exist
        that do not understand\n   the special properties of SIG records, this will
        remain necessary.\n   However, careful design of SIG record processing in
        new\n   implementations should permit this restriction to be relaxed in the\n
        \  future, so resolvers do not need to treat SIG record queries\n   specially.\n
        \  It has been occasionally stated that a received request for a SIG\n   record
        should be forwarded to an authoritative server, rather than\n   being answered
        from data in the cache.  This is not necessary - a\n   server that has the
        knowledge of SIG as a special case for processing\n   this way would be better
        to correctly cache SIG records, taking into\n   account their characteristics.
        \ Then the server can determine when it\n   is safe to reply from the cache,
        and when the answer is not available\n   and the query must be forwarded.\n"
      title: 5.3.1. SIG records and RRSets
    - contents:
      - "5.3.2. NXT RRs\n   Next Resource Records (NXT) are even more peculiar.  There
        will only\n   ever be one NXT record in a zone for a particular label, so\n
        \  superficially, the RRSet problem is trivial.  However, at a zone cut,\n
        \  both the parent zone, and the child zone (superzone and subzone in\n   RFC2065
        terminology) will have NXT records for the same name.  Those\n   two NXT records
        do not form an RRSet, even where both zones are\n   housed at the same server.
        \ NXT RRSets always contain just a single\n   RR.  Where both NXT records
        are visible, two RRSets exist.  However,\n   servers are not required to treat
        this as a special case when\n   receiving NXT records in a response.  They
        may elect to notice the\n   existence of two different NXT RRSets, and treat
        that as they would\n   two different RRSets of any other type.  That is, cache
        one, and\n   ignore the other.  Security aware servers will need to correctly\n
        \  process the NXT record in the received response though.\n"
      title: 5.3.2. NXT RRs
    title: 5.3. DNSSEC Special Cases
  - contents:
    - "5.4. Receiving RRSets\n   Servers must never merge RRs from a response with
      RRs in their cache\n   to form an RRSet.  If a response contains data that would
      form an\n   RRSet with data in a server's cache the server must either ignore
      the\n   RRs in the response, or discard the entire RRSet currently in the\n
      \  cache, as appropriate.  Consequently the issue of TTLs varying\n   between
      the cache and a response does not cause concern, one will be\n   ignored.  That
      is, one of the data sets is always incorrect if the\n   data from an answer
      differs from the data in the cache.  The\n   challenge for the server is to
      determine which of the data sets is\n   correct, if one is, and retain that,
      while ignoring the other.  Note\n   that if a server receives an answer containing
      an RRSet that is\n   identical to that in its cache, with the possible exception
      of the\n   TTL value, it may, optionally, update the TTL in its cache with the\n
      \  TTL of the received answer.  It should do this if the received answer\n   would
      be considered more authoritative (as discussed in the next\n   section) than
      the previously cached answer.\n"
    - contents:
      - "5.4.1. Ranking data\n   When considering whether to accept an RRSet in a
        reply, or retain an\n   RRSet already in its cache instead, a server should
        consider the\n   relative likely trustworthiness of the various data.  An\n
        \  authoritative answer from a reply should replace cached data that had\n
        \  been obtained from additional information in an earlier reply.\n   However
        additional information from a reply will be ignored if the\n   cache contains
        data from an authoritative answer or a zone file.\n   The accuracy of data
        available is assumed from its source.\n   Trustworthiness shall be, in order
        from most to least:\n     + Data from a primary zone file, other than glue
        data,\n     + Data from a zone transfer, other than glue,\n     + The authoritative
        data included in the answer section of an\n       authoritative reply.\n     +
        Data from the authority section of an authoritative answer,\n     + Glue from
        a primary zone, or glue from a zone transfer,\n     + Data from the answer
        section of a non-authoritative answer, and\n       non-authoritative data
        from the answer section of authoritative\n       answers,\n     + Additional
        information from an authoritative answer,\n       Data from the authority
        section of a non-authoritative answer,\n       Additional information from
        non-authoritative answers.\n   Note that the answer section of an authoritative
        answer normally\n   contains only authoritative data.  However when the name
        sought is an\n   alias (see section 10.1.1) only the record describing that
        alias is\n   necessarily authoritative.  Clients should assume that other
        records\n   may have come from the server's cache.  Where authoritative answers\n
        \  are required, the client should query again, using the canonical name\n
        \  associated with the alias.\n   Unauthenticated RRs received and cached
        from the least trustworthy of\n   those groupings, that is data from the additional
        data section, and\n   data from the authority section of a non-authoritative
        answer, should\n   not be cached in such a way that they would ever be returned
        as\n   answers to a received query.  They may be returned as additional\n
        \  information where appropriate.  Ignoring this would allow the\n   trustworthiness
        of relatively untrustworthy data to be increased\n   without cause or excuse.\n
        \  When DNS security [RFC2065] is in use, and an authenticated reply has\n
        \  been received and verified, the data thus authenticated shall be\n   considered
        more trustworthy than unauthenticated data of the same\n   type.  Note that
        throughout this document, \"authoritative\" means a\n   reply with the AA
        bit set.  DNSSEC uses trusted chains of SIG and KEY\n   records to determine
        the authenticity of data, the AA bit is almost\n   irrelevant.  However DNSSEC
        aware servers must still correctly set\n   the AA bit in responses to enable
        correct operation with servers that\n   are not security aware (almost all
        currently).\n   Note that, glue excluded, it is impossible for data from two\n
        \  correctly configured primary zone files, two correctly configured\n   secondary
        zones (data from zone transfers) or data from correctly\n   configured primary
        and secondary zones to ever conflict.  Where glue\n   for the same name exists
        in multiple zones, and differs in value, the\n   nameserver should select
        data from a primary zone file in preference\n   to secondary, but otherwise
        may choose any single set of such data.\n   Choosing that which appears to
        come from a source nearer the\n   authoritative data source may make sense
        where that can be\n   determined.  Choosing primary data over secondary allows
        the source\n   of incorrect glue data to be discovered more readily, when
        a problem\n   with such data exists.  Where a server can detect from two zone
        files\n   that one or more are incorrectly configured, so as to create\n   conflicts,
        it should refuse to load the zones determined to be\n   erroneous, and issue
        suitable diagnostics.\n   \"Glue\" above includes any record in a zone file
        that is not properly\n   part of that zone, including nameserver records of
        delegated sub-\n   zones (NS records), address records that accompany those
        NS records\n   (A, AAAA, etc), and any other stray data that might appear.\n"
      title: 5.4.1. Ranking data
    title: 5.4. Receiving RRSets
  - contents:
    - "5.5. Sending RRSets (reprise)\n   A Resource Record Set should only be included
      once in any DNS reply.\n   It may occur in any of the Answer, Authority, or
      Additional\n   Information sections, as required.  However it should not be
      repeated\n   in the same, or any other, section, except where explicitly required\n
      \  by a specification.  For example, an AXFR response requires the SOA\n   record
      (always an RRSet containing a single RR) be both the first and\n   last record
      of the reply.  Where duplicates are required this way,\n   the TTL transmitted
      in each case must be the same.\n"
    title: 5.5. Sending RRSets (reprise)
  title: 5. Resource Record Sets
- contents:
  - "6. Zone Cuts\n   The DNS tree is divided into \"zones\", which are collections
    of\n   domains that are treated as a unit for certain management purposes.\n   Zones
    are delimited by \"zone cuts\".  Each zone cut separates a\n   \"child\" zone
    (below the cut) from a \"parent\" zone (above the cut).\n   The domain name that
    appears at the top of a zone (just below the cut\n   that separates the zone from
    its parent) is called the zone's\n   \"origin\".  The name of the zone is the
    same as the name of the domain\n   at the zone's origin.  Each zone comprises
    that subset of the DNS\n   tree that is at or below the zone's origin, and that
    is above the\n   cuts that separate the zone from its children (if any).  The\n
    \  existence of a zone cut is indicated in the parent zone by the\n   existence
    of NS records specifying the origin of the child zone.  A\n   child zone does
    not contain any explicit reference to its parent.\n"
  - contents:
    - "6.1. Zone authority\n   The authoritative servers for a zone are enumerated
      in the NS records\n   for the origin of the zone, which, along with a Start
      of Authority\n   (SOA) record are the mandatory records in every zone.  Such
      a server\n   is authoritative for all resource records in a zone that are not
      in\n   another zone.  The NS records that indicate a zone cut are the\n   property
      of the child zone created, as are any other records for the\n   origin of that
      child zone, or any sub-domains of it.  A server for a\n   zone should not return
      authoritative answers for queries related to\n   names in another zone, which
      includes the NS, and perhaps A, records\n   at a zone cut, unless it also happens
      to be a server for the other\n   zone.\n   Other than the DNSSEC cases mentioned
      immediately below, servers\n   should ignore data other than NS records, and
      necessary A records to\n   locate the servers listed in the NS records, that
      may happen to be\n   configured in a zone at a zone cut.\n"
    title: 6.1. Zone authority
  - contents:
    - "6.2. DNSSEC issues\n   The DNS security mechanisms [RFC2065] complicate this
      somewhat, as\n   some of the new resource record types added are very unusual
      when\n   compared with other DNS RRs.  In particular the NXT (\"next\") RR type\n
      \  contains information about which names exist in a zone, and hence\n   which
      do not, and thus must necessarily relate to the zone in which\n   it exists.
      \ The same domain name may have different NXT records in\n   the parent zone
      and the child zone, and both are valid, and are not\n   an RRSet.  See also
      section 5.3.2.\n   Since NXT records are intended to be automatically generated,
      rather\n   than configured by DNS operators, servers may, but are not required\n
      \  to, retain all differing NXT records they receive regardless of the\n   rules
      in section 5.4.\n   For a secure parent zone to securely indicate that a subzone
      is\n   insecure, DNSSEC requires that a KEY RR indicating that the subzone\n
      \  is insecure, and the parent zone's authenticating SIG RR(s) be\n   present
      in the parent zone, as they by definition cannot be in the\n   subzone.  Where
      a subzone is secure, the KEY and SIG records will be\n   present, and authoritative,
      in that zone, but should also always be\n   present in the parent zone (if secure).\n
      \  Note that in none of these cases should a server for the parent zone,\n   not
      also being a server for the subzone, set the AA bit in any\n   response for
      a label at a zone cut.\n"
    title: 6.2. DNSSEC issues
  title: 6. Zone Cuts
- contents:
  - "7. SOA RRs\n   Three minor issues concerning the Start of Zone of Authority (SOA)\n
    \  Resource Record need some clarification.\n"
  - contents:
    - "7.1. Placement of SOA RRs in authoritative answers\n   RFC1034, in section
      3.7, indicates that the authority section of an\n   authoritative answer may
      contain the SOA record for the zone from\n   which the answer was obtained.
      \ When discussing negative caching,\n   RFC1034 section 4.3.4 refers to this
      technique but mentions the\n   additional section of the response.  The former
      is correct, as is\n   implied by the example shown in section 6.2.5 of RFC1034.
      \ SOA\n   records, if added, are to be placed in the authority section.\n"
    title: 7.1. Placement of SOA RRs in authoritative answers
  - contents:
    - "7.2. TTLs on SOA RRs\n   It may be observed that in section 3.2.1 of RFC1035,
      which defines\n   the format of a Resource Record, that the definition of the
      TTL field\n   contains a throw away line which states that the TTL of an SOA
      record\n   should always be sent as zero to prevent caching.  This is mentioned\n
      \  nowhere else, and has not generally been implemented.\n   Implementations
      should not assume that SOA records will have a TTL of\n   zero, nor are they
      required to send SOA records with a TTL of zero.\n"
    title: 7.2. TTLs on SOA RRs
  - contents:
    - "7.3. The SOA.MNAME field\n   It is quite clear in the specifications, yet seems
      to have been\n   widely ignored, that the MNAME field of the SOA record should
      contain\n   the name of the primary (master) server for the zone identified
      by\n   the SOA.  It should not contain the name of the zone itself.  That\n
      \  information would be useless, as to discover it, one needs to start\n   with
      the domain name of the SOA record - that is the name of the\n   zone.\n"
    title: 7.3. The SOA.MNAME field
  title: 7. SOA RRs
- contents:
  - "8. Time to Live (TTL)\n   The definition of values appropriate to the TTL field
    in STD 13 is\n   not as clear as it could be, with respect to how many significant\n
    \  bits exist, and whether the value is signed or unsigned.  It is\n   hereby
    specified that a TTL value is an unsigned number, with a\n   minimum value of
    0, and a maximum value of 2147483647.  That is, a\n   maximum of 2^31 - 1.  When
    transmitted, this value shall be encoded\n   in the less significant 31 bits of
    the 32 bit TTL field, with the\n   most significant, or sign, bit set to zero.\n
    \  Implementations should treat TTL values received with the most\n   significant
    bit set as if the entire value received was zero.\n   Implementations are always
    free to place an upper bound on any TTL\n   received, and treat any larger values
    as if they were that upper\n   bound.  The TTL specifies a maximum time to live,
    not a mandatory\n   time to live.\n"
  title: 8. Time to Live (TTL)
- contents:
  - "9. The TC (truncated) header bit\n   The TC bit should be set in responses only
    when an RRSet is required\n   as a part of the response, but could not be included
    in its entirety.\n   The TC bit should not be set merely because some extra information\n
    \  could have been included, but there was insufficient room.  This\n   includes
    the results of additional section processing.  In such cases\n   the entire RRSet
    that will not fit in the response should be omitted,\n   and the reply sent as
    is, with the TC bit clear.  If the recipient of\n   the reply needs the omitted
    data, it can construct a query for that\n   data and send that separately.\n   Where
    TC is set, the partial RRSet that would not completely fit may\n   be left in
    the response.  When a DNS client receives a reply with TC\n   set, it should ignore
    that response, and query again, using a\n   mechanism, such as a TCP connection,
    that will permit larger replies.\n"
  title: 9. The TC (truncated) header bit
- contents:
  - "10. Naming issues\n   It has sometimes been inferred from some sections of the
    DNS\n   specification [RFC1034, RFC1035] that a host, or perhaps an interface\n
    \  of a host, is permitted exactly one authoritative, or official, name,\n   called
    the canonical name.  There is no such requirement in the DNS.\n"
  - contents:
    - "10.1. CNAME resource records\n   The DNS CNAME (\"canonical name\") record
      exists to provide the\n   canonical name associated with an alias name.  There
      may be only one\n   such canonical name for any one alias.  That name should
      generally be\n   a name that exists elsewhere in the DNS, though there are some
      rare\n   applications for aliases with the accompanying canonical name\n   undefined
      in the DNS.  An alias name (label of a CNAME record) may,\n   if DNSSEC is in
      use, have SIG, NXT, and KEY RRs, but may have no\n   other data.  That is, for
      any label in the DNS (any domain name)\n   exactly one of the following is true:\n
      \    + one CNAME record exists, optionally accompanied by SIG, NXT, and\n       KEY
      RRs,\n     + one or more records exist, none being CNAME records,\n     + the
      name exists, but has no associated RRs of any type,\n     + the name does not
      exist at all.\n"
    - contents:
      - "10.1.1. CNAME terminology\n   It has been traditional to refer to the label
        of a CNAME record as \"a\n   CNAME\".  This is unfortunate, as \"CNAME\" is
        an abbreviation of\n   \"canonical name\", and the label of a CNAME record
        is most certainly\n   not a canonical name.  It is, however, an entrenched
        usage.  Care\n   must therefore be taken to be very clear whether the label,
        or the\n   value (the canonical name) of a CNAME resource record is intended.\n
        \  In this document, the label of a CNAME resource record will always be\n
        \  referred to as an alias.\n"
      title: 10.1.1. CNAME terminology
    title: 10.1. CNAME resource records
  - contents:
    - "10.2. PTR records\n   Confusion about canonical names has lead to a belief
      that a PTR\n   record should have exactly one RR in its RRSet.  This is incorrect,\n
      \  the relevant section of RFC1034 (section 3.6.2) indicates that the\n   value
      of a PTR record should be a canonical name.  That is, it should\n   not be an
      alias.  There is no implication in that section that only\n   one PTR record
      is permitted for a name.  No such restriction should\n   be inferred.\n   Note
      that while the value of a PTR record must not be an alias, there\n   is no requirement
      that the process of resolving a PTR record not\n   encounter any aliases.  The
      label that is being looked up for a PTR\n   value might have a CNAME record.
      \ That is, it might be an alias.  The\n   value of that CNAME RR, if not another
      alias, which it should not be,\n   will give the location where the PTR record
      is found.  That record\n   gives the result of the PTR type lookup.  This final
      result, the\n   value of the PTR RR, is the label which must not be an alias.\n"
    title: 10.2. PTR records
  - contents:
    - "10.3. MX and NS records\n   The domain name used as the value of a NS resource
      record, or part of\n   the value of a MX resource record must not be an alias.
      \ Not only is\n   the specification clear on this point, but using an alias
      in either\n   of these positions neither works as well as might be hoped, nor
      well\n   fulfills the ambition that may have led to this approach.  This\n   domain
      name must have as its value one or more address records.\n   Currently those
      will be A records, however in the future other record\n   types giving addressing
      information may be acceptable.  It can also\n   have other RRs, but never a
      CNAME RR.\n   Searching for either NS or MX records causes \"additional section\n
      \  processing\" in which address records associated with the value of the\n
      \  record sought are appended to the answer.  This helps avoid needless\n   extra
      queries that are easily anticipated when the first was made.\n   Additional
      section processing does not include CNAME records, let\n   alone the address
      records that may be associated with the canonical\n   name derived from the
      alias.  Thus, if an alias is used as the value\n   of an NS or MX record, no
      address will be returned with the NS or MX\n   value.  This can cause extra
      queries, and extra network burden, on\n   every query.  It is trivial for the
      DNS administrator to avoid this\n   by resolving the alias and placing the canonical
      name directly in the\n   affected record just once when it is updated or installed.
      \ In some\n   particular hard cases the lack of the additional section address\n
      \  records in the results of a NS lookup can cause the request to fail.\n"
    title: 10.3. MX and NS records
  title: 10. Naming issues
- contents:
  - "11. Name syntax\n   Occasionally it is assumed that the Domain Name System serves
    only\n   the purpose of mapping Internet host names to data, and mapping\n   Internet
    addresses to host names.  This is not correct, the DNS is a\n   general (if somewhat
    limited) hierarchical database, and can store\n   almost any kind of data, for
    almost any purpose.\n   The DNS itself places only one restriction on the particular
    labels\n   that can be used to identify resource records.  That one restriction\n
    \  relates to the length of the label and the full name.  The length of\n   any
    one label is limited to between 1 and 63 octets.  A full domain\n   name is limited
    to 255 octets (including the separators).  The zero\n   length full name is defined
    as representing the root of the DNS tree,\n   and is typically written and displayed
    as \".\".  Those restrictions\n   aside, any binary string whatever can be used
    as the label of any\n   resource record.  Similarly, any binary string can serve
    as the value\n   of any record that includes a domain name as some or all of its
    value\n   (SOA, NS, MX, PTR, CNAME, and any others that may be added).\n   Implementations
    of the DNS protocols must not place any restrictions\n   on the labels that can
    be used.  In particular, DNS servers must not\n   refuse to serve a zone because
    it contains labels that might not be\n   acceptable to some DNS client programs.
    \ A DNS server may be\n   configurable to issue warnings when loading, or even
    to refuse to\n   load, a primary zone containing labels that might be considered\n
    \  questionable, however this should not happen by default.\n   Note however,
    that the various applications that make use of DNS data\n   can have restrictions
    imposed on what particular values are\n   acceptable in their environment.  For
    example, that any binary label\n   can have an MX record does not imply that any
    binary name can be used\n   as the host part of an e-mail address.  Clients of
    the DNS can impose\n   whatever restrictions are appropriate to their circumstances
    on the\n   values they use as keys for DNS lookup requests, and on the values\n
    \  returned by the DNS.  If the client has such restrictions, it is\n   solely
    responsible for validating the data from the DNS to ensure\n   that it conforms
    before it makes any use of that data.\n   See also [RFC1123] section 6.1.3.5.\n"
  title: 11. Name syntax
- contents:
  - "12. Security Considerations\n   This document does not consider security.\n   In
    particular, nothing in section 4 is any way related to, or useful\n   for, any
    security related purposes.\n   Section 5.4.1 is also not related to security.
    \ Security of DNS data\n   will be obtained by the Secure DNS [RFC2065], which
    is mostly\n   orthogonal to this memo.\n   It is not believed that anything in
    this document adds to any\n   security issues that may exist with the DNS, nor
    does it do anything\n   to that will necessarily lessen them.  Correct implementation
    of the\n   clarifications in this document might play some small part in\n   limiting
    the spread of non-malicious bad data in the DNS, but only\n   DNSSEC can help
    with deliberate attempts to subvert DNS data.\n"
  title: 12. Security Considerations
- contents:
  - "13. References\n   [RFC1034]   Mockapetris, P., \"Domain Names - Concepts and
    Facilities\",\n               STD 13, RFC 1034, November 1987.\n   [RFC1035]   Mockapetris,
    P., \"Domain Names - Implementation and\n               Specification\", STD 13,
    RFC 1035, November 1987.\n   [RFC1123]   Braden, R., \"Requirements for Internet
    Hosts - application\n               and support\", STD 3, RFC 1123, January 1989.\n
    \  [RFC1700]   Reynolds, J., Postel, J., \"Assigned Numbers\",\n               STD
    2, RFC 1700, October 1994.\n   [RFC2065]   Eastlake, D., Kaufman, C., \"Domain
    Name System Security\n               Extensions\", RFC 2065, January 1997.\n"
  title: 13. References
- contents:
  - "14. Acknowledgements\n   This memo arose from discussions in the DNSIND working
    group of the\n   IETF in 1995 and 1996, the members of that working group are
    largely\n   responsible for the ideas captured herein.  Particular thanks to\n
    \  Donald E. Eastlake, 3rd, and Olafur Gudmundsson, for help with the\n   DNSSEC
    issues in this document, and to John Gilmore for pointing out\n   where the clarifications
    were not necessarily clarifying.  Bob Halley\n   suggested clarifying the placement
    of SOA records in authoritative\n   answers, and provided the references.  Michael
    Patton, as usual, and\n   Mark Andrews, Alan Barrett and Stan Barber provided
    much assistance\n   with many details.  Josh Littlefield helped make sure that
    the\n   clarifications didn't cause problems in some irritating corner cases.\n"
  title: 14. Acknowledgements
- contents:
  - "15. Authors' Addresses\n   Robert Elz\n   Computer Science\n   University of
    Melbourne\n   Parkville, Victoria, 3052\n   Australia.\n   EMail: kre@munnari.OZ.AU\n
    \  Randy Bush\n   RGnet, Inc.\n   5147 Crystal Springs Drive NE\n   Bainbridge
    Island, Washington,  98110\n   United States.\n   EMail: randy@psg.com\n"
  title: 15. Authors' Addresses
