- contents:
  - '       Fault Tolerance for the Label Distribution Protocol (LDP)

    '
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2003).  All Rights Reserved.\n"
  title: Copyright Notice
- contents:
  - "IESG Note\n   This specification includes procedures for failure detection and\n
    \  failover for a TCP connection carrying MPLS LDP control traffic, so\n   that
    it can be switched to a new TCP connection.  It does not provide\n   a general
    approach to using multiple TCP connections to provide this\n   kind of fault tolerance.
    \ The specification lacks adequate guidance\n   for the timer and retry value
    choices related to the TCP connection\n   fault tolerance procedures.  The specification
    should not serve as a\n   model for TCP connection fault tolerance design for
    any future\n   document, and users are advised to test configurations based on
    this\n   specification very carefully for problems such as premature\n   failovers.\n"
  title: IESG Note
- contents:
  - "Abstract\n   Multiprotocol Label Switching (MPLS) systems will be used in core\n
    \  networks where system downtime must be kept to an absolute minimum.\n   Many
    MPLS Label Switching Routers (LSRs) may, therefore, exploit\n   Fault Tolerant
    (FT) hardware or software to provide high availability\n   of the core networks.\n
    \  The details of how FT is achieved for the various components of an FT\n   LSR,
    including Label Distribution Protocol (LDP), the switching\n   hardware and TCP,
    are implementation specific.  This document\n   identifies issues in the LDP specification
    in RFC 3036, \"LDP\n   Specification\", that make it difficult to implement an
    FT LSR using\n   the current LDP protocols, and defines enhancements to the LDP\n
    \  specification to ease such FT LSR implementations.\n   The issues and extensions
    described here are equally applicable to\n   RFC 3212, \"Constraint-Based LSP
    Setup Using LDP\" (CR-LDP).\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1. Conventions and Terminology used in this document..........3\n
    \  2. Contributing Authors.......................................4\n   3. Introduction...............................................4\n
    \     3.1. Fault Tolerance for MPLS..............................4\n      3.2.
    Issues with LDP.......................................5\n   4. Overview of LDP
    FT Enhancements............................7\n      4.1. Establishing an FT LDP
    Session........................8\n           4.1.1 Interoperation with Non-FT
    LSRs.................8\n      4.2. TCP Connection Failure................................9\n
    \          4.2.1 Detecting TCP Connection Failures...............9\n           4.2.2
    LDP Processing after Connection Failure.........9\n      4.3. Data Forwarding
    During TCP Connection Failure........10\n      4.4. FT LDP Session Reconnection..........................10\n
    \     4.5. Operations on FT Labels..............................11\n      4.6.
    Check-Pointing.......................................11\n           4.6.1 Graceful
    Termination...........................12\n      4.7. Label Space Depletion and
    Replenishment..............13\n      4.8. Tunneled LSPs........................................13\n
    \  5. FT Operations.............................................14\n      5.1.
    FT LDP Messages......................................14\n           5.1.1 Sequence
    Numbered FT Label Messages............14\n           5.1.2 FT Address Messages............................15\n
    \          5.1.3 Label Resources Available Notifications........15\n      5.2.
    FT Operation ACKs....................................17\n      5.3. Preservation
    of FT State.............................17\n      5.4. FT Procedure After TCP
    Failure.......................19\n           5.4.1 FT LDP Operations During TCP
    Failure...........20\n      5.5. FT Procedure After TCP Re-connection.................21\n
    \          5.5.1 Re-Issuing FT Messages.........................22\n   6. Check-Pointing
    Procedures.................................22\n      6.1 Check-Pointing with the
    Keepalive Message.............23\n      6.2 Quiesce and Keepalive.................................23\n
    \  7. Changes to Existing Messages..............................24\n      7.1.
    LDP Initialization Message...........................24\n      7.2. LDP Keepalive
    Messages...............................25\n      7.3. All Other LDP Session Messages.......................25\n
    \  8. New Fields and Values.....................................26\n      8.1.
    Status Codes.........................................26\n      8.2. FT Session
    TLV.......................................27\n      8.3. FT Protection TLV....................................29\n
    \     8.4. FT ACK TLV...........................................32\n      8.5.
    FT Cork TLV..........................................33\n   9. Example Use...............................................34\n
    \     9.1. Session Failure and Recovery - FT Procedures.........34\n      9.2.
    Use of Check-Pointing With FT Procedures.............37\n      9.3. Temporary
    Shutdown With FT Procedures................38\n      9.4. Temporary Shutdown With
    FT Procedures\n           and Check-Pointing...................................40\n
    \     9.5. Check-Pointing Without FT Procedures.................42\n      9.6.
    Graceful Shutdown With Check-Pointing\n           But No FT Procedures.................................44\n
    \  10. Security Considerations..................................45\n   11. Implementation
    Notes.....................................47\n      11.1. FT Recovery Support
    on Non-FT LSRs..................47\n      11.2. ACK generation logic................................47\n
    \           11.2.1 Ack Generation Logic When Using\n                   Check-Pointing...............................47\n
    \     11.3 Interactions With Other Label Distribution\n           Mechanisms...........................................48\n
    \  12. Acknowledgments..........................................48\n   13. Intellectual
    Property Consideration......................49\n   14. References...............................................49\n
    \     14.1. Normative References................................49\n      14.2.
    Informative References..............................50\n   15. Authors' Addresses.......................................50\n
    \  16. Full Copyright Statement.................................52\n"
  title: Table of Contents
- contents:
  - "1. Conventions and Terminology used in this document\n   Definitions of key words
    and terms applicable to LDP and CR-LDP are\n   inherited from [RFC3212] and [RFC3036].\n
    \  The term \"FT Label\" is introduced in this document to indicate a\n   label
    for which some fault tolerant operation is used.  A \"non-FT\n   Label\" is not
    fault tolerant and is handled as specified in\n   [RFC3036].\n   The term \"Sequence
    Numbered FT Label\" is used to indicate an FT label\n   which is secured using
    the sequence number in the FT Protection TLV\n   described in this document.\n
    \  The term \"Check-Pointable FT Label\" is used to indicate an FT label\n   which
    is secured by using the check-pointing techniques described in\n   this document.\n
    \  The extensions to LDP specified in this document are collectively\n   referred
    to as the \"LDP FT enhancements\".\n   Within the context of this document, \"Check-Pointing\"
    refers to a\n   process of message exchanges that confirm receipt and processing
    (or\n   secure storage) of specific protocol messages.\n   When talking about
    the individual bits in the 16-bit FT Flag Field,\n   the words \"bit\" and \"flag\"
    are used interchangeably.\n   In the examples quoted, the following notation is
    used:  Ln : An LSP.\n   For example L1.  Pn : An LDP peer.  For example P1.\n
    \  The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n
    \  \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this\n
    \  document are to be interpreted as described in BCP 14, RFC 2119\n   [RFC2119].\n"
  title: 1. Conventions and Terminology used in this document
- contents:
  - "2. Contributing Authors\n   This document was the collective work of several
    individuals over a\n   period of several years.  The text and content of this
    document was\n   contributed by the editor and the co-authors listed in section
    15,\n   \"Authors' Addresses\".\n"
  title: 2. Contributing Authors
- contents:
  - "3. Introduction\n   High Availability (HA) is typically claimed by equipment
    vendors when\n   their hardware achieves availability levels of at least 99.999%
    (five\n   9s).  To implement this, the equipment must be capable of recovering\n
    \  from local hardware and software failures through a process known as\n   fault
    tolerance (FT).\n   The usual approach to FT involves provisioning backup copies
    of\n   hardware and/or software.  When a primary copy fails, processing is\n   switched
    to the backup copy.  This process, called failover, should\n   result in minimal
    disruption to the Data Plane.\n   In an FT system, backup resources are sometimes
    provisioned on a\n   one-to-one basis (1:1), sometimes as one-to-many (1:n), and\n
    \  occasionally as many-to-many (m:n).  Whatever backup provisioning is\n   made,
    the system must switch to the backup automatically on failure\n   of the primary,
    and the software and hardware state in the backup\n   must be set to replicate
    the state in the primary at the point of\n   failure.\n"
  - contents:
    - "3.1.  Fault Tolerance for MPLS\n   MPLS is a technology that will be used in
      core networks where system\n   downtime must be kept to an absolute minimum.
      \ Many MPLS LSRs may,\n   therefore, exploit FT hardware or software to provide
      high\n   availability of core networks.\n   In order to provide HA, an MPLS
      system needs to be able to survive a\n   variety of faults with minimal disruption
      to the Data Plane,\n   including the following fault types:\n   -  failure/hot-swap
      of a physical connection between LSRs.\n   -  failure/hot-swap of the switching
      fabric in an LSR.\n   -  failure of the TCP or LDP stack in an LSR.\n   -  software
      upgrade to the TCP or LDP stacks in an LSR.\n   The first two examples of faults
      listed above are confined to the\n   Data Plane.  Such faults can be handled
      by providing redundancy in\n   the Data Plane which is transparent to LDP operating
      in the Control\n   Plane.  The last two example types of fault require action
      in the\n   Control Plane to recover from the fault without disrupting traffic
      in\n   the Data Plane.  This is possible because many recent router\n   architectures
      separate the Control and Data Planes such that\n   forwarding can continue unaffected
      by recovery action in the Control\n   Plane.\n"
    title: 3.1.  Fault Tolerance for MPLS
  - contents:
    - "3.2.  Issues with LDP\n   LDP uses TCP to provide reliable connections between
      LSRs over which\n   they exchange protocol messages to distribute labels and
      set up LSPs.\n   A pair of LSRs that have such a connection are referred to
      as LDP\n   peers.\n   TCP enables LDP to assume reliable transfer of protocol
      messages.\n   This means that some of the messages do not need to be acknowledged\n
      \  (for example, Label Release).\n   LDP is defined such that if the TCP connection
      fails, the LSR should\n   immediately tear down the LSPs associated with the
      session between\n   the LDP peers, and release any labels and resources assigned
      to those\n   LSPs.\n   It is notoriously hard to provide a Fault Tolerant implementation
      of\n   TCP.  To do so might involve making copies of all data sent and\n   received.
      \ This is an issue familiar to implementers of other TCP\n   applications such
      as BGP.\n   During failover affecting the TCP or LDP stacks, the TCP connection\n
      \  may be lost.  Recovery from this position is made worse by the fact\n   that
      LDP control messages may have been lost during the connection\n   failure.  Since
      these messages are unconfirmed, it is possible that\n   LSP or label state information
      will be lost.\n   This document describes a solution which involves:\n   -  negotiation
      between LDP peers of the intent to support extensions\n      to LDP that facilitate
      recovery from failover without loss of\n      LSPs.\n   -  selection of FT survival
      on a per LSP/label basis.\n   -  acknowledgement of LDP messages to ensure that
      a full handshake is\n      performed on those messages either frequently (such
      as per\n      message) or less frequently as in check-pointing.\n   -  solicitation
      of up-to-date acknowledgement (check-pointing) of\n      previous LDP messages
      to ensure the current state is flushed to\n      disk/NVRAM, with an additional
      option that allows an LDP partner\n      to request that state is flushed in
      both directions if graceful\n      shutdown is required.\n   -  re-issuing lost
      messages after failover to ensure that LSP/label\n      state is correctly recovered
      after reconnection of the LDP\n      session.\n   The issues and objectives
      described above are equally applicable to\n   CR-LDP.\n   Other objectives of
      this document are to:\n   -  offer backward-compatibility with LSRs that do
      not implement these\n      extensions to LDP.\n   -  preserve existing protocol
      rules described in [RFC3036] for\n      handling unexpected duplicate messages
      and for processing\n      unexpected messages referring to unknown LSPs/labels.\n
      \  -  avoid full state refresh solutions (such as those present in RSVP:\n      see
      [RFC2205], [RFC2961], [RFC3209] and [RFC3478]) whether they be\n      continual,
      or limited to post-failover recovery.\n   Note that this document concentrates
      on the preservation of label\n   state for labels exchanged between a pair of
      adjacent LSRs when the\n   TCP connection between those LSRs is lost.  This
      is a requirement for\n   Fault Tolerant operation of LSPs, but a full implementation
      of end-\n   to-end protection for LSPs requires that this be combined with other\n
      \  techniques that are outside the scope of this document.\n   In particular,
      this document does not attempt to describe how to\n   modify the routing of
      an LSP or the resources allocated to a label or\n   LSP, which is covered by
      [RFC3214].  This document also does not\n   address how to provide automatic
      layer 2 or layer 3 protection\n   switching for a label or LSP, which is a separate
      area for study.\n   This specification does not preclude an implementation from\n
      \  attempting (or require it to attempt) to use the FT behavior\n   described
      here to recover from a preemptive failure of a connection\n   on a non-FT system
      due to, for example, a partial system crash.\n   Note, however, that there are
      potential issues too numerous to list\n   here - not least the likelihood that
      the same crash will immediately\n   occur when processing the restored data.\n"
    title: 3.2.  Issues with LDP
  title: 3. Introduction
- contents:
  - "4. Overview of LDP FT Enhancements\n   The LDP FT enhancements consist of the
    following main elements, which\n   are described in more detail in the sections
    that follow.\n   -  The presence of an FT Session TLV on the LDP Initialization\n
    \     message indicates that an LSR supports some form of protection or\n      recovery
    from session failure.  A flag bit within this TLV (the S\n      bit) indicates
    that the LSR supports the LDP FT enhancements on\n      this session.  Another
    flag (the C bit) indicates that the check-\n      pointing procedures are to be
    used.\n   -  An FT Reconnect Flag in the FT Session TLV (the R bit) indicates\n
    \     whether an LSR has preserved FT Label state across a failure of\n      the
    TCP connection.\n   -  An FT Reconnection Timeout, exchanged on the LDP Initialization\n
    \     message, that indicates the maximum time peer LSRs will preserve\n      FT
    Label state after a failure of the TCP connection.\n   -  An FT Protection TLV
    used to identify operations that affect LDP\n      labels.  All LDP messages carrying
    the FT Protection TLV need to\n      be secured (e.g. to NVRAM) and ACKed to the
    sending LDP peer so\n      that the state for Sequence Numbered FT Labels can
    be correctly\n      recovered after LDP session reconnection.\n      Note that
    the implementation within an FT system is left open by\n      this document.  An
    implementation could choose to secure entire\n      messages relating to Sequence
    Numbered FT Labels, or it could\n      secure only the relevant state information.\n
    \  -  Address advertisement may also be secured by use of the FT\n      Protection
    TLV.  This enables recovery after LDP session\n      reconnection without the
    need to re-advertise what may be a very\n      large number of addresses.\n   -
    \ The FT Protection TLV may also be used on the Keepalive message to\n      flush
    acknowledgement of all previous FT operations.  This enables\n      a check-point
    for future recovery, either in mid-session or prior\n      to graceful shutdown
    of an LDP session.  This procedure may also\n      be used to check-point all
    (that is both FT and non-FT) operations\n      for future recovery.\n"
  - contents:
    - "4.1.  Establishing an FT LDP Session\n   In order that the extensions to LDP
      [RFC3036] described in this\n   document can be used successfully on an LDP
      session between a pair of\n   LDP peers, they MUST negotiate that the LDP FT
      enhancements are to be\n   used on the LDP session.\n   This is done on the
      LDP Initialization message exchange using a new\n   FT Session TLV.  Presence
      of this TLV indicates that the peer wants\n   to support some form of protection
      or recovery processing.  The S bit\n   within this TLV indicates that the peer
      wants to support the LDP FT\n   enhancements on this LDP session.  The C bit
      indicates that the peer\n   wants to support the check-pointing functions described
      in this\n   document.  The S and C bits may be set independently.\n   The relevant
      LDP FT enhancements MUST be supported on an LDP session\n   if both LDP peers
      include an FT Session TLV on the LDP Initialization\n   message and have the
      same setting of the S or C bit.\n   If either LDP Peer does not include the
      FT Session TLV LDP\n   Initialization message, or if there is no match of S
      and C bits\n   between the peers, the LDP FT enhancements MUST NOT be used during\n
      \  this LDP session.  Use of LDP FT enhancements by a sending LDP peer\n   in
      these cases MUST be interpreted by the receiving LDP peer as a\n   serious protocol
      error causing the session to be terminated.\n   An LSR MAY present different
      FT/non-FT behavior on different TCP\n   connections, even if those connections
      are successive instantiations\n   of the LDP session between the same LDP peers.\n"
    - contents:
      - "4.1.1 Interoperation with Non-FT LSRs\n   The FT Session TLV on the LDP Initialization
        message carries the U-\n   bit.  If an LSR does not support any protection
        or recovery\n   mechanisms, it will ignore this TLV.  Since such partners
        also do not\n   include the FT Session TLV, all LDP sessions to such LSRs
        will not\n   use the LDP FT enhancements.\n   The rest of this document assumes
        that the LDP sessions under\n   discussion are between LSRs that support the
        LDP FT enhancements,\n   except where explicitly stated otherwise.\n"
      title: 4.1.1 Interoperation with Non-FT LSRs
    title: 4.1.  Establishing an FT LDP Session
  - contents:
    - '4.2.  TCP Connection Failure

      '
    - contents:
      - "4.2.1 Detecting TCP Connection Failures\n   TCP connection failures may be
        detected and reported to the LDP\n   component in a variety of ways.  These
        should all be treated in the\n   same way by the LDP component.\n   -  Indication
        from the management component that a TCP connection or\n      underlying resource
        is no longer active.\n   -  Notification from a hardware management component
        of an interface\n      failure.\n   -  Sockets keepalive timeout.\n   -  Sockets
        send failure.\n   -  New (incoming) Socket opened.\n   -  LDP protocol timeout.\n"
      title: 4.2.1 Detecting TCP Connection Failures
    - contents:
      - "4.2.2 LDP Processing after Connection Failure\n   If the LDP FT enhancements
        are not in use on an LDP session, the\n   action of the LDP peers on failure
        of the TCP connection is as\n   specified in [RFC3036].\n   All state information
        and resources associated with non-FT Labels\n   MUST be released on the failure
        of the TCP connection, including\n   deprogramming the non-FT Label from the
        switching hardware.  This is\n   equivalent to the behavior specified in [RFC3036].\n
        \  If the LDP FT enhancements are in use on an LDP session, both LDP\n   peers
        SHOULD preserve state information and resources associated with\n   FT Labels
        exchanged on the LDP session.  Both LDP peers SHOULD use a\n   timer to release
        the preserved state information and resources\n   associated with FT-labels
        if the TCP connection is not restored\n   within a reasonable period.  The
        behavior when this timer expires is\n   equivalent to the LDP session failure
        behavior described in\n   [RFC3036].\n   The FT Reconnection Timeout each
        LDP peer intends to apply to the LDP\n   session is carried in the FT Session
        TLV on the LDP Initialization\n   messages.  Both LDP peers MUST use the value
        that corresponds to the\n   lesser timeout interval of the two proposed timeout
        values from the\n   LDP Initialization exchange, where a value of zero is
        treated as\n   positive infinity.\n"
      title: 4.2.2 LDP Processing after Connection Failure
    title: 4.2.  TCP Connection Failure
  - contents:
    - "4.3.  Data Forwarding During TCP Connection Failure\n   An LSR that implements
      the LDP FT enhancements SHOULD preserve the\n   programming of the switching
      hardware across a failover.  This\n   ensures that data forwarding is unaffected
      by the state of the TCP\n   connection between LSRs.\n   It is an integral part
      of FT failover processing in some hardware\n   configurations that some data
      packets might be lost.  If data loss is\n   not acceptable to the applications
      using the MPLS network, the LDP FT\n   enhancements described in this document
      SHOULD NOT be used.\n"
    title: 4.3.  Data Forwarding During TCP Connection Failure
  - contents:
    - "4.4.  FT LDP Session Reconnection\n   When a new TCP connection is established,
      the LDP peers MUST exchange\n   LDP Initialization messages.  When a new TCP
      connection is\n   established after failure, the LDP peers MUST re-exchange
      LDP\n   Initialization messages.\n   If an LDP peer includes the FT Session
      TLV with the S bit set in the\n   LDP Initialization message for the new instantiation
      of the LDP\n   session, it MUST also set the FT Reconnect Flag according to
      whether\n   it has been able to preserve label state.  The FT Reconnect Flag
      is\n   carried in the FT Session TLV.\n   If an LDP peer has preserved all state
      information for previous\n   instantiations of the LDP session, then it SHOULD
      set the FT\n   Reconnect Flag to 1 in the FT Session TLV.  Otherwise, it MUST
      set\n   the FT Reconnect Flag to 0.\n   If either LDP peer sets the FT Reconnect
      Flag to 0, or omits the FT\n   Session TLV, both LDP peers MUST release any
      state information and\n   resources associated with the previous instantiation
      of the LDP\n   session between the same LDP peers, including FT Label state
      and\n   Addresses.  This ensures that network resources are not permanently\n
      \  lost by one LSR if its LDP peer is forced to undergo a cold start.\n   If
      an LDP peer changes any session parameters (for example, the label\n   space
      bounds) from the previous instantiation, the nature of any\n   preserved labels
      may have changed.  In particular, previously\n   allocated labels may now be
      out of range.  For this reason, session\n   reconnection MUST use the same parameters
      as were in use on the\n   session before the failure.  If an LDP peer notices
      that the\n   parameters have been changed by the other peer, it SHOULD send
      a\n   Notification message with the 'FT Session parameters changed' status\n
      \  code.\n   If both LDP peers set the FT Reconnect Flag to 1, both LDP peers
      MUST\n   use the procedures indicated in this document to complete any label\n
      \  operations on Sequence Numbered FT Labels that were interrupted by\n   the
      LDP session failure.\n   If an LDP peer receives an LDP Initialization message
      with the FT\n   Reconnect Flag set before it sends its own Initialization message,\n
      \  but has retained no information about the previous version of the\n   session,
      it MUST respond with an Initialization message with the FT\n   Reconnect Flag
      clear.  If an LDP peer receives an LDP Initialization\n   message with the FT
      Reconnect Flag set in response to an\n   Initialization message that it has
      sent with the FT Reconnect Flag\n   clear, it MUST act as if no state was retained
      by either peer on the\n   session.\n"
    title: 4.4.  FT LDP Session Reconnection
  - contents:
    - "4.5.  Operations on FT Labels\n   Label operations on Sequence Numbered FT
      Labels are made Fault\n   Tolerant by providing acknowledgement of all LDP messages
      that affect\n   Sequence Numbered FT Labels.  Acknowledgements are achieved
      by means\n   of sequence numbers on these LDP messages.\n   The message exchanges
      used to achieve acknowledgement of label\n   operations and the procedures used
      to complete interrupted label\n   operations are detailed in section 5, \"FT
      Operations\".\n   Using these acknowledgements and procedures, it is not necessary
      for\n   LDP peers to perform a complete re-synchronization of state for all\n
      \  Sequence Numbered FT Labels, either on re-connection of the LDP\n   session
      between the LDP peers or on a timed basis.\n"
    title: 4.5.  Operations on FT Labels
  - contents:
    - "4.6.  Check-Pointing\n   Check-pointing is a useful feature that allows nodes
      to reduce the\n   amount of processing that they need to do to acknowledge LDP\n
      \  messages.  The C bit in the FT Session TLV is used to indicate that\n   check-pointing
      is supported.\n   Under the normal operation on Sequence Numbered FT Labels,\n
      \  acknowledgments may be deferred during normal processing and only\n   sent
      periodically.  Check-pointing may be used to flush\n   acknowledgement from
      a peer by including a sequence number on a\n   Keepalive message requesting
      acknowledgement of that message and all\n   previous messages.  In this case,
      all Sequence Numbered FT Labels are\n   Check-Pointable FT Labels.\n   If the
      S bit is not agreed upon, check-pointing may still be used.\n   In this case
      it is used to acknowledge all messages exchanged between\n   the peers, and
      all labels are Check-Pointable FT Labels.\n   This offers an approach where
      acknowledgements need not be sent to\n   every message or even frequently, but
      are only sent as check-points\n   in response to requests carried on Keepalive
      messages.  Such an\n   approach may be considered optimal in systems that do
      not show a high\n   degree of change over time (such as targeted LDP sessions)
      and that\n   are prepared to risk loss of state for the most recent LDP exchanges.\n
      \  More dynamic systems (such as LDP discovery sessions) are more likely\n   to
      want to acknowledge state changes more frequently so that the\n   maximum amount
      of state can be preserved over a failure.\n   Note that an important consideration
      of this document is that nodes\n   acknowledging messages on a one-for-one basis,
      nodes deferring\n   acknowledgements, and nodes relying on check-pointing, should
      all\n   interoperate seamlessly and without protocol negotiation beyond\n   session
      initialization.\n   Further discussion of this feature is provided in section
      5, \"FT\n   Operations\".\n"
    - contents:
      - "4.6.1 Graceful Termination\n   A feature that builds on check-pointing is
        graceful termination.\n   In some cases, such as controlled failover or software
        upgrade, it is\n   possible for a node to know in advance that it is going
        to terminate\n   its session with a peer.\n   In these cases the node that
        intends terminating the session can\n   flush acknowledgement using a check-point
        request as described above.\n   The sender SHOULD not send further label or
        address-related messages\n   after requesting shutdown check-pointing in order
        to preserve the\n   integrity of its saved state.\n   This, however, only
        provides for acknowledgement in one direction,\n   and the node that is being
        terminated also requires verification that\n   it has secured all state sent
        by its peer.  This is achieved by a\n   three-way hand shake of the check-point
        which is requested by an\n   additional TLV (the Cork TLV) in the Keepalive
        message.\n   Further discussion of this feature is provided in section 5,
        \"FT\n   Operations\".\n"
      title: 4.6.1 Graceful Termination
    title: 4.6.  Check-Pointing
  - contents:
    - "4.7.  Label Space Depletion and Replenishment\n   When an LDP peer is unable
      to satisfy a Label Request message because\n   it has no more available labels,
      it sends a Notification message\n   carrying the status code 'No label resources'.
      \ This warns the\n   requesting LDP peer that subsequent Label Request messages
      are also\n   likely to fail for the same reason.  This message does not need
      to be\n   acknowledged for FT purposes since Label Request messages sent after\n
      \  session recovery will receive the same response.  However, the LDP\n   peer
      that receives a 'No label resources' Notification stops sending\n   Label Request
      messages until it receives a 'Label resources\n   available' Notification message.
      \ Since this unsolicited Notification\n   might get lost during session failure,
      it may be protected using the\n   procedures described in this document.\n   An
      alternative approach allows that an implementation may always\n   assume that
      labels are available when a session is re-established.\n   In this case, it
      is possible that it may throw away the 'No label\n   resources' information
      from the previous incarnation of the session\n   and may send a batch of LDP
      messages on session re-establishment that\n   will fail and that it could have
      known would fail.\n   Note that the sender of a 'Label resources available'
      Notification\n   message may choose whether to add a sequence number requesting\n
      \  acknowledgement.  Conversely, the receiver of 'Label resources\n   available'
      Notification message may choose to acknowledge the message\n   without actually
      saving any state.\n   This is an implementation choice made possible by making
      the FT\n   parameters on the Notification message optional.  Implementations\n
      \  will interoperate fully if they take opposite approaches, but\n   additional
      LDP messages may be sent unnecessarily on session\n   recovery.\n"
    title: 4.7.  Label Space Depletion and Replenishment
  - contents:
    - "4.8.  Tunneled LSPs\n   The procedures described in this document can be applied
      to LSPs that\n   are tunnels and to LSPs that are carried by tunnels.  Recall
      that\n   tunneled LSPs are managed by a single LDP session that runs end to\n
      \  end, while the tunnel is managed by a different LDP session for each\n   hop
      along the path.  Nevertheless, a break in one of the sessions\n   that manages
      the tunnel is likely to correspond with a break in the\n   session that manages
      the tunneled LSP.  This is certainly the case\n   when the LDP exchanges share
      a failed link, but need not be the case\n   if the LDP messages have been routed
      along a path that is different\n   from that of the tunnel, or if the failure
      in the tunnel is caused by\n   an LDP software failure at a transit LSR.\n   In
      order that the forwarding path of a tunneled LSP be preserved, the\n   forwarding
      path of the tunnel itself must be preserved.  This means\n   that the tunnel
      must not be torn down if there is any session failure\n   along its path.  To
      achieve this, the label exchanges between each\n   pair of LDP peers along the
      path of the tunnel must use one of the\n   procedures in this document or in
      [RFC3478].\n   It is perfectly acceptable to mix the restart procedures used
      for the\n   tunnel and the tunneled LSP.  For example, the tunnel could be set
      up\n   using just check-pointing because it is a stable LSP, but the\n   tunneled
      LSPs might use full FT procedures so that they can recover\n   active state.\n
      \  Lastly, it is permissible to carry tunneled LSPs that do not have FT\n   protection
      in an LSP that has FT protection.\n"
    title: 4.8.  Tunneled LSPs
  title: 4. Overview of LDP FT Enhancements
- contents:
  - "5. FT Operations\n   Once an FT LDP session has been established, using the S
    bit in the\n   FT Session TLV on the Session Initialization message as described
    in\n   section 4.1, \"Establishing an FT LDP Session\", both LDP peers MUST\n
    \  apply the procedures described in this section for FT LDP message\n   exchanges.\n
    \  If the LDP session has been negotiated to not use the LDP FT\n   enhancements,
    these procedures MUST NOT be used.\n"
  - contents:
    - '5.1.  FT LDP Messages

      '
    - contents:
      - "5.1.1 Sequence Numbered FT Label Messages\n   A label is identified as being
        a Sequence Numbered FT Label if the\n   initial Label Request or Label Mapping
        message relating to that label\n   carries the FT Protection TLV.\n   It is
        a valid implementation option to flag all labels as Sequence\n   Numbered
        FT Labels.  Indeed this may be a preferred option for\n   implementations
        wishing to use Keepalive messages carrying the FT\n   Protection TLV to achieve
        periodic saves of the complete label\n   forwarding state.\n   If a label
        is a Sequence Numbered FT Label, all LDP messages\n   affecting that label
        MUST carry the FT Protection TLV so that the\n   state of the label can be
        recovered after a failure of the LDP\n   session.\n   A further valid option
        is for no labels to be Sequence Numbered FT\n   Labels.  In this case, check-pointing
        using the Keepalive message\n   applies to all messages exchanged on the session.\n"
      - contents:
        - "5.1.1.1  Scope of FT Labels\n   The scope of the FT/non-FT status of a
          label is limited to the LDP\n   message exchanges between a pair of LDP
          peers.\n   In Ordered Control, when the message is forwarded downstream
          or\n   upstream, the TLV may be present or absent according to the\n   requirements
          of the LSR sending the message.\n   If a platform-wide label space is used
          for FT Labels, an FT Label\n   value MUST NOT be reused until all LDP FT
          peers to which the label\n   was passed have acknowledged the withdrawal
          of the FT Label, either\n   by an explicit LABEL WITHDRAW/LABEL RELEASE,
          exchange or implicitly\n   if the LDP session is reconnected after failure
          but without the FT\n   Reconnect Flag set.  In the event that a session
          is not re-\n   established within the Reconnection Timeout, a label MAY
          become\n   available for re-use if it is not still in use on some other
          session.\n"
        title: 5.1.1.1  Scope of FT Labels
      title: 5.1.1 Sequence Numbered FT Label Messages
    - contents:
      - "5.1.2 FT Address Messages\n   If an LDP session uses the LDP FT enhancements,
        both LDP peers MUST\n   secure Address and Address Withdraw messages using
        FT Operation ACKs,\n   as described below.  This avoids any ambiguity over
        whether an\n   Address is still valid after the LDP session is reconnected.\n
        \  If an LSR determines that an Address message it sent on a previous\n   instantiation
        of a recovered LDP session is no longer valid, it MUST\n   explicitly issue
        an Address Withdraw for that address when the\n   session is reconnected.\n
        \  If the FT Reconnect Flag is not set by both LDP peers upon\n   reconnection
        of an LDP session (i.e. state has not been preserved),\n   both LDP peers
        MUST consider all Addresses to have been withdrawn.\n   The LDP peers SHOULD
        issue new Address messages for all their valid\n   addresses, as specified
        in [RFC3036].\n"
      title: 5.1.2 FT Address Messages
    - contents:
      - "5.1.3 Label Resources Available Notifications\n   In LDP, it is possible
        that a downstream LSR may not have labels\n   available to respond to a Label
        Request.  In this case, as specified\n   in RFC 3036, the downstream LSR must
        respond with a Notification - No\n   Label Resources message.  The upstream
        LSR then suspends asking for\n   new labels until it receives a Notification
        - Label Resources\n   Available message from the downstream LSR.\n   When
        the FT extensions are used on a session, implementations may\n   choose whether
        or not to secure the label resource state of their\n   peer.  This choice
        impacts the number of LDP messages that will be\n   incorrectly routed to
        a peer with depleted resources on session re-\n   establishment, but does
        not otherwise impact interoperability.\n   For full preservation of state:\n
        \  -  The downstream LSR must preserve the label availability state\n      across
        a failover so that it remembers to send Notification -\n      Label Resources
        Available when the resources become available.\n   -  The upstream LSR must
        recall the label availability state across\n      failover so that it can
        optimize not sending Label Requests when\n      it recovers.\n   -  The downstream
        LSR must use sequence numbers on Notification -\n      Label Resources Available
        so that it can check that LSR A has\n      received the message and clear
        its secured state, or resend the\n      message if LSR A recovers without
        having received it.\n   However, the following options also exist:\n   -  The
        downstream LSR may choose to not include a sequence number on\n      Notification
        - Label Resources Available.  This means that on\n      session re-establishment
        it does not know what its peer thinks the\n      LSR's resource state is,
        because the Notification may or may not\n      have been delivered.  Such
        an implementation MUST begin recovered\n      sessions by sending an additional
        Notification - Label Resources\n      Available to reset its peer.\n   -  The
        upstream node may choose not to secure information about its\n      peer's
        resource state.  It would acknowledge a Notification -\n      Label Resources
        Available, but would not save the information.\n      Such an implementation
        MUST assume that its peer's resource state\n      has been reset to Label
        Resources Available when the session is\n      re-established.\n   If the
        FT Reconnect Flag is not set by both LDP peers upon\n   reconnection of an
        LDP session (i.e. state has not been preserved),\n   both LDP peers MUST consider
        the label availability state to have\n   been reset as if the session had
        been set up for the first time.\n"
      title: 5.1.3 Label Resources Available Notifications
    title: 5.1.  FT LDP Messages
  - contents:
    - "5.2.  FT Operation ACKs\n   Handshaking of FT LDP messages is achieved by use
      of ACKs.\n   Correlation between the original message and the ACK is by means
      of\n   the FT Sequence Number contained in the FT Protection TLV, and passed\n
      \  back in the FT ACK TLV.  The FT ACK TLV may be carried on any LDP\n   message
      that is sent on the TCP connection between LDP peers.\n   An LDP peer maintains
      a separate FT sequence number for each LDP\n   session in which it participates.
      \ The FT Sequence number is\n   incremented by one for each FT LDP message (i.e.
      containing the FT\n   Protection TLV) issued by this LSR on the FT LDP session
      with which\n   the FT sequence number is associated.\n   When an LDP peer receives
      a message containing the FT Protection TLV,\n   it MUST take steps to secure
      this message (or the state information\n   derived from processing the message).
      \ Once the message is secured,\n   it MUST be ACKed.  However, there is no requirement
      on the LSR to\n   send this ACK immediately.\n   ACKs may be accumulated to
      reduce the message flow between LDP peers.\n   For example, if an LSR received
      FT LDP messages with sequence numbers\n   1, 2, 3, 4, it could send a single
      ACK with sequence number 4 to ACK\n   receipt, securing of all these messages.
      \ There is no protocol reason\n   why the number of ACKs accumulated, or the
      time for which an ACK is\n   deferred, should not be allowed to become relatively
      large.\n   ACKs MUST NOT be sent out of sequence, as this is incompatible with\n
      \  the use of accumulated ACKs.  Duplicate ACKs (that is two successive\n   messages
      that acknowledge the same sequence number) are acceptable.\n   If an LDP peer
      discovers that its sequence number space for a\n   specific session is full
      of un-acknowledged sequence numbers (because\n   its partner on the session
      has not acknowledged them in a timely\n   way), it cannot allocate a new sequence
      number for any further FT LPD\n   message.  It SHOULD send a Notification message
      with the status code\n   'FT Seq Numbers Exhausted'.\n"
    title: 5.2.  FT Operation ACKs
  - contents:
    - "5.3.  Preservation of FT State\n   If the LDP FT enhancements are in use on
      an LDP session, each LDP\n   peer SHOULD NOT release the state information and
      resources\n   associated with FT Labels exchanged on that LDP session when the
      TCP\n   connection fails.  This is contrary to [RFC3036], but allows label\n
      \  operations on FT Labels to be completed after re-connection of the\n   TCP
      connection.\n   Both LDP peers on an LDP session that is using the LDP FT\n
      \  enhancements SHOULD preserve the state information and resources they\n   hold
      for that LDP session as described below.\n   -  An upstream LDP peer SHOULD
      release the resources (in particular\n      bandwidth) associated with a Sequence
      Numbered FT Label when it\n      initiates a Label Release or Label Abort message
      for the label.\n      The upstream LDP peer MUST preserve state information
      for the\n      Sequence Numbered FT Label, even if it releases the resources\n
      \     associated with the label, as it may need to reissue the label\n      operation
      if the TCP connection is interrupted.\n   -  An upstream LDP peer MUST release
      the state information and\n      resources associated with a Sequence Numbered
      FT Label when it\n      receives an acknowledgement to a Label Release or Label
      Abort\n      message that it sent for the label, or when it sends a Label\n
      \     Release message in response to a Label Withdraw message received\n      from
      the downstream LDP peer.\n   -  A downstream LDP peer SHOULD NOT release the
      resources associated\n      with a Sequence Numbered FT Label when it sends
      a Label Withdraw\n      message for the label as it has not yet received confirmation
      that\n      the upstream LDP peer has ceased to send data using the label.\n
      \     The downstream LDP peer MUST NOT release the state information it\n      holds
      for the label as it may yet have to reissue the label\n      operation if the
      TCP connection is interrupted.\n   -  A downstream LDP peer MUST release the
      resources and state\n      information associated with a Sequence Numbered FT
      Label when it\n      receives an acknowledgement to a Label Withdraw message
      for the\n      label.\n   -  When the FT Reconnection Timeout expires, an LSR
      SHOULD release\n      all state information and resources from previous instantiations\n
      \     of the (permanently) failed LDP session.\n   -  Either LDP peer MAY elect
      to release state information based on\n      its internal knowledge of the loss
      of integrity of the state\n      information or an inability to pend (or queue)
      LDP operations (as\n      described in section 5.4.1, \"LDP Operations During
      TCP Failure\")\n      during a TCP failure.  That is, the peer is not required
      to wait\n      for the duration of the FT Reconnection Timeout before releasing\n
      \     state; the timeout provides an upper limit on the persistence of\n      state.
      \ However, in the event that a peer releases state before\n      the expiration
      of the Reconnection Timeout, it MUST NOT re-use any\n      label that was in
      use on the session until the Reconnection\n      Timeout has expired.\n   -
      \ When an LSR receives a Status TLV with the E-bit set in the status\n      code,
      which causes it to close the TCP connection, the LSR MUST\n      release all
      state information and resources associated with the\n      session.  This behavior
      is mandated because it is impossible for\n      the LSR to predict the precise
      state and future behavior of the\n      partner LSR that set the E-bit without
      knowledge of the\n      implementation of that partner LSR.\n      Note that
      the 'Temporary Shutdown' status code does not have the\n      E-bit set, and
      MAY be used during maintenance or upgrade\n      operations to indicate that
      the LSR intends to preserve state\n      across a closure and re-establishment
      of the TCP session.\n   -  If an LSR determines that it must release state for
      any single FT\n      Label during a failure of the TCP connection on which that
      label\n      was exchanged, it MUST release all state for all labels on the
      LDP\n      session.\n   The release of state information and resources associated
      with non-FT\n   labels is as described in [RFC3036].\n   Note that a Label Release
      and the acknowledgement to a Label Withdraw\n   may be received by a downstream
      LSR in any order.  The downstream LSR\n   MAY release its resources upon receipt
      of the first message and MUST\n   release its resources upon receipt of the
      second message.\n"
    title: 5.3.  Preservation of FT State
  - contents:
    - "5.4.  FT Procedure After TCP Failure\n   When an LSR discovers or is notified
      of a TCP connection failure it\n   SHOULD start an FT Reconnection Timer to
      allow a period for re-\n   connection of the TCP connection between the LDP
      peers.\n   The RECOMMENDED default value for this timer is 5 seconds.  During\n
      \  this time, failure must be detected and reported, new hardware may\n   need
      to be activated, software state must be audited, and a new TCP\n   session must
      be set up.\n   Once the TCP connection between LDP peers has failed, the active
      LSR\n   SHOULD attempt to re-establish the TCP connection.  The mechanisms,\n
      \  timers and retry counts to re-establish the TCP connection are an\n   implementation
      choice.  It is RECOMMENDED that any attempt to re-\n   establish the connection
      should take into account the failover\n   processing necessary on the peer LSR,
      the nature of the network\n   between the LDP peers, and the FT Reconnection
      Timeout chosen on the\n   previous instantiation of the TCP connection (if any).\n
      \  If the TCP connection cannot be re-established within the FT\n   Reconnection
      Timeout period, the LSR detecting this timeout SHOULD\n   release all state
      preserved for the failed LDP session.  If the TCP\n   connection is subsequently
      re-established (for example, after a\n   further Hello exchange to set up a
      new LDP session), the LSR MUST set\n   the FT Reconnect Flag to 0 if it released
      the preserved state\n   information on this timeout event.\n   If the TCP connection
      is successfully re-established within the FT\n   Reconnection Timeout, both
      peers MUST re-issue LDP operations that\n   were interrupted by (that is, un-acknowledged
      as a result of) the TCP\n   connection failure.  This procedure is described
      in section 5.5, \"FT\n   Procedure After TCP Re-connection\".\n   The Hold Timer
      for an FT LDP Session (see [RFC3036] section 2.5.5)\n   SHOULD be ignored while
      the FT Reconnection Timer is running.  The\n   hold timer SHOULD be restarted
      when the TCP connection is re-\n   established.\n"
    - contents:
      - "5.4.1 FT LDP Operations During TCP Failure\n   When the LDP FT enhancements
        are in use for an LDP session, it is\n   possible for an LSR to determine
        that it needs to send an LDP message\n   to an LDP peer, but that the TCP
        connection to that peer is currently\n   down.  These label operations affect
        the state of FT Labels preserved\n   for the failed TCP connection, so it
        is important that the state\n   changes are passed to the LDP peer when the
        TCP connection is\n   restored.\n   If an LSR determines that it needs to
        issue a new FT LDP operation to\n   an LDP peer to which the TCP connection
        is currently failed, it MUST\n   pend the operation (e.g. on a queue) and
        complete that operation with\n   the LDP peer when the TCP connection is restored,
        unless the label\n   operation is overridden by a subsequent additional operation
        during\n   the TCP connection failure (see section 5.5, \"FT Procedure After
        TCP\n   Re-connection\").\n   If, during TCP Failure, an LSR determines that
        it cannot pend an\n   operation which it cannot simply fail (for example,
        a Label Withdraw,\n   Release or Abort operation), it MUST NOT attempt to
        re-establish the\n   previous LDP session.  The LSR MUST behave as if the
        Reconnection\n   Timer expired and release all state information with respect
        to the\n   LDP peer.  An LSR may be unable (or unwilling) to pend operations;\n
        \  for instance, if a major routing transition occurred while TCP was\n   inoperable
        between LDP peers, it might result in excessively large\n   numbers of FT
        LDP Operations.  An LSR that releases state before the\n   expiration of the
        Reconnection Timeout MUST NOT re-use any label that\n   was in use on the
        session until the Reconnection Timeout has expired.\n   In ordered operation,
        received FT LDP operations that cannot be\n   correctly forwarded because
        of a TCP connection failure MAY be\n   processed immediately (provided sufficient
        state is kept to forward\n   the label operation) or pended for processing
        when the onward TCP\n   connection is restored and the operation can be correctly
        forwarded\n   upstream or downstream.  Operations on existing FT Labels SHOULD
        NOT\n   be failed during TCP session failure.\n   It is RECOMMENDED that Label
        Request operations for new FT Labels not\n   be pended awaiting the re-establishment
        of TCP connection that is\n   awaiting recovery at the time the LSR determines
        that it needs to\n   issue the Label Request message.  Instead, such Label
        Request\n   operations SHOULD be failed and, if necessary, a notification
        message\n   containing the 'No LDP Session' status code sent upstream.\n   Label
        Requests for new non-FT Labels MUST be rejected during TCP\n   connection
        failure, as specified in [RFC3036].\n"
      title: 5.4.1 FT LDP Operations During TCP Failure
    title: 5.4.  FT Procedure After TCP Failure
  - contents:
    - "5.5.  FT Procedure After TCP Re-connection\n   The FT operation handshaking
      described above means that all state\n   changes for Sequence Numbered FT Labels
      and Address messages are\n   confirmed or reproducible at each LSR.\n   If the
      TCP connection between LDP peers fails but is re-connected\n   within the FT
      Reconnection Timeout, and both LSRs have indicated they\n   will be re-establishing
      the previous LDP session, both LDP peers on\n   the connection MUST complete
      any label operations for Sequence\n   Numbered FT Labels that were interrupted
      by the failure and re-\n   connection of the TCP connection.\n   The procedures
      for FT Reconnection Timeout MAY have been invoked as a\n   result of either
      LDP peer being unable (or unwilling) to pend\n   operations which occurred during
      the TCP Failure (as described in\n   section 5.4.1, \"LDP Operations During
      TCP Failure\").\n   If, for any reason, an LSR has been unable to pend operations
      with\n   respect to an LDP peer, as described in section 5.4.1, \"LDP\n   Operations
      During TCP Failure\", the LSR MUST set the FT Reconnect\n   Flag to 0 on re-connection
      to that LDP peer indicating that no FT\n   state has been preserved.\n   Label
      operations are completed using the following procedure.\n"
    - contents:
      - "5.5.1 Re-Issuing FT Messages\n   Upon restoration of the TCP connection between
        LDP peers, any LDP\n   messages for Sequence Numbered FT Labels that were
        lost because of\n   the TCP connection failure are re-issued.  The LDP peer
        that receives\n   a re-issued message processes the message as if received
        for the\n   first time.\n   \"Net-zero\" combinations of messages need not
        be re-issued after re-\n   establishment of the TCP connection between LDP
        peers.  This leads to\n   the following rules for re-issuing messages that
        are not ACKed by the\n   LDP peer on the LDP Initialization message exchange
        after re-\n   connection of the TCP session.\n   -  A Label Request message
        MUST be re-issued unless a Label Abort\n      would be re-issued for the same
        Sequence Numbered FT Label.\n   -  A Label Mapping message MUST be re-issued
        unless a Label Withdraw\n      message would be re-issued for the same Sequence
        Numbered FT\n      Label.\n   -  All other messages on the LDP session that
        were sent and carried\n      the FT Protection TLV MUST be re-issued if an
        acknowledgement was\n      not previously been received.\n   Any FT Label
        operations that were pended (see section 5.4.1, \"LDP\n   Operations During
        TCP Failure\") during the TCP connection failure\n   MUST also be issued upon
        re-establishment of the LDP session, except\n   where they form part of a
        \"net-zero\" combination of messages\n   according to the above rules.\n   The
        determination of \"net-zero\" FT Label operations according to the\n   above
        rules MAY be performed on pended messages prior to the re-\n   establishment
        of the TCP connection in order to optimize the use of\n   queue resources.
        \ Messages that were sent to the LDP peer before the\n   TCP connection failure,
        or pended messages that were paired with\n   them, MUST NOT be subject to
        such optimization until an FT ACK TLV is\n   received from the LDP peer.  This
        ACK allows the LSR to identify\n   which messages were received by the LDP
        peer prior to the TCP\n   connection failure.\n"
      title: 5.5.1 Re-Issuing FT Messages
    title: 5.5.  FT Procedure After TCP Re-connection
  title: 5. FT Operations
- contents:
  - "6. Check-Pointing Procedures\n   Check-Pointing can be selected independently
    from the FT procedures\n   described above by using the C bit in the FT Session
    TLV on the\n   Session Initialization message.  Note, however, that check-pointing\n
    \  is an integral part of the FT procedures.  Setting the S and the C\n   bit
    will achieve the same function as setting just the S bit.\n   If the C bit is
    set, but the S bit is not set, no label is a Sequence\n   Numbered FT Label.  Instead,
    all labels are Check-Pointable FT\n   Labels.  Check-Pointing is used to synchronize
    all label exchanges.\n   No message, apart from the check-point request and acknowledgement,\n
    \  carries an active sequence number.  (Note that the Session\n   Initialization
    message may carry a sequence number to confirm that\n   the check-point is still
    in place).\n   It is an implementation matter to decide the ordering of received\n
    \  messages and check-point requests to ensure that check-point\n   acknowledgements
    are secured.\n   If the S and C bits are both set, or only the S bit is set, check-\n
    \  pointing applies only to Sequence Numbered FT Labels and to address\n   messages.\n
    \  The set of all messages check-pointed in this way is called the\n   Check-Pointable
    Messages.\n"
  - contents:
    - "6.1 Check-Pointing with the Keepalive Message\n   If an LSR receives a FT Protection
      TLV on a Keepalive message, this\n   is a request to flush the acknowledgements
      for all previously\n   received Check-Pointable Messages on the session.\n   As
      soon as the LSR has completed securing the Check-Pointable\n   Messages (or
      state changes consequent on those messages) received\n   before the Keepalive,
      it MUST send an acknowledgement to the sequence\n   number of the Keepalive
      message.\n   In the case where the FT procedures are in use and acknowledgements\n
      \  have been stored up, this may occur immediately upon receipt of the\n   Keepalive.\n
      \  An example message flow showing this use of the Keepalive message to\n   perform
      a periodic check-point of state is shown in section 9.2, \"Use\n   of Check-Pointing
      With FT Procedures\".\n   An example message flow showing the use of check-pointing
      without the\n   FT procedures is shown in section 9.5, \"Check-Pointing Without
      FT\n   Procedures\".\n"
    title: 6.1 Check-Pointing with the Keepalive Message
  - contents:
    - "6.2 Quiesce and Keepalive\n   If the Keepalive Message also contains the FT
      Cork TLV, this\n   indicates that the peer LSR wishes to quiesce the session
      prior to a\n   graceful restart.\n   It is RECOMMENDED that upon receiving a
      Keepalive with the FT CORK\n   TLV, an LSR should cease to send any further
      label or address related\n   messages on the session until it has been disconnected
      and\n   reconnected, other than messages generated while processing and\n   securing
      previously unacknowledged messages received from the peer\n   requesting the
      quiesce.  It should also attempt to complete this\n   processing and return
      a Keepalive with the FT ACK TLV as soon as\n   possible in order to allow the
      session to be quiesced.\n   An example message flow showing this use of the
      FT Cork TLV to\n   achieve a three-way handshake of state synchronization between
      two\n   LDP peers is given in section 9.4, \"Temporary Shutdown With FT\n   Procedures
      and Check-Pointing\".\n"
    title: 6.2 Quiesce and Keepalive
  title: 6. Check-Pointing Procedures
- contents:
  - '7. Changes to Existing Messages

    '
  - contents:
    - "7.1.  LDP Initialization Message\n   The LDP FT enhancements add the following
      optional parameters to a\n   LDP Initialization message:\n      Optional Parameter
      \   Length     Value\n      FT Session TLV        4          See Below\n      FT
      ACK TLV            4          See Below\n   The encoding for these TLVs is found
      in Section 8, \"New Fields and\n   Values\".\n   FT Session TLV\n      If present,
      specifies the FT behavior of the LDP session.\n   FT ACK TLV\n      If present,
      specifies the last FT message that the sending LDP\n      peer was able to secure
      prior to the failure of the previous\n      instantiation of the LDP session.
      \ This TLV is only present if the\n      FT Reconnect flag is set in the FT
      Session TLV, in which case this\n      TLV MUST be present.\n"
    title: 7.1.  LDP Initialization Message
  - contents:
    - "7.2.  LDP Keepalive Messages\n   The LDP FT enhancements add the following
      optional parameters to a\n   LDP Keepalive message:\n      Optional Parameter
      \    Length     Value\n      FT Protection TLV      4          See below\n      FT
      Cork TLV            0          See below\n      FT ACK TLV             4          See
      below\n   The encoding for these TLVs is found in Section 8, \"New Fields and\n
      \  Values\".\n   FT Protection TLV\n      If present, specifies the FT Sequence
      Number for the LDP message.\n      When present on a Keepalive message, this
      indicates a solicited\n      flush of the acknowledgements to all previous LDP
      messages\n      containing sequence numbers and issued by the sender of the\n
      \     Keepalive on the same session.\n   FT Cork TLV\n      Indicates that the
      remote LSR wishes to quiesce the LDP session.\n      See section 5, \"FT Operations\",
      for the recommended action in such\n      cases.\n   FT ACK TLV\n      If present,
      specifies the most recent FT message that the sending\n      LDP peer has been
      able to secure.\n"
    title: 7.2.  LDP Keepalive Messages
  - contents:
    - "7.3.  All Other LDP Session Messages\n   The LDP FT enhancements add the following
      optional parameters to all\n   other message types that flow on an LDP session
      after the LDP\n   Initialization message\n      Optional Parameter    Length
      \    Value\n      FT Protection TLV      4          See below\n      FT ACK
      TLV             4          See below\n   The encoding for these TLVs is found
      in section 8, \"New Fields and\n   Values\".\n   FT Protection TLV\n      If
      present, specifies the FT Sequence Number for the LDP message.\n   FT ACK TLV\n
      \     If present, identifies the most recent FT LDP message ACKed by the\n      sending
      LDP peer.\n"
    title: 7.3.  All Other LDP Session Messages
  title: 7. Changes to Existing Messages
- contents:
  - '8. New Fields and Values

    '
  - contents:
    - "8.1.  Status Codes\n   The following new status codes are defined to indicate
      various\n   conditions specific to the LDP FT enhancements.  These status codes\n
      \  are carried in the Status TLV of a Notification message.\n   The \"E\" column
      is the required setting of the Status Code E-bit; the\n   \"Status Data\" column
      is the value of the 30-bit Status Data field in\n   the Status Code TLV.\n   Note
      that the setting of the Status Code F-bit is at the discretion\n   of the LSR
      originating the Status TLV.  However, it is RECOMMENDED\n   that the F-bit is
      not set on Notification messages containing status\n   codes except 'No LDP
      Session' because the duplication of messages\n   SHOULD be restricted to being
      a per-hop behavior.\n   Status Code                 E   Status Data\n   No LDP
      Session              0   0x0000001A\n   Zero FT seqnum              1   0x0000001B\n
      \  Unexpected TLV /            1   0x0000001C\n      Session Not FT\n   Unexpected
      TLV /            1   0x0000001D\n      Label Not FT\n   Missing FT Protection
      TLV   1   0x0000001E\n   FT ACK sequence error       1   0x0000001F\n   Temporary
      Shutdown          0   0x00000020\n   FT Seq Numbers Exhausted    1   0x00000021\n
      \  FT Session parameters /     1   0x00000022\n      changed\n   Unexpected
      FT Cork TLV      1   0x00000023\n   The 'Temporary Shutdown' status code SHOULD
      be used in place of the\n   'Shutdown' status code (which has the E-bit set)
      if the LSR that is\n   shutting down wishes to inform its LDP peer that it expects
      to be\n   able to preserve FT Label state and return to service before the FT\n
      \  Reconnection Timer expires.\n"
    title: 8.1.  Status Codes
  - contents:
    - "8.2.  FT Session TLV\n   LDP peers can negotiate whether the LDP session between
      them supports\n   FT extensions by using a new OPTIONAL parameter, the FT Session
      TLV,\n   on LDP Initialization Messages.\n   The FT Session TLV is encoded as
      follows.\n    0                   1                   2                   3\n
      \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |1|0| FT Session TLV (0x0503)   |      Length (= 12)            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |     FT Flags                  |      Reserved                 |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                FT Reconnect Timeout (in milliseconds)         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                Recovery Time (in milliseconds)                |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  FT Flags\n      FT Flags: A 16 bit field that indicates various attributes
      the FT\n      support on this LDP session.  This field is formatted as follows:\n
      \     0                   1\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     |R|         Reserved    |S|A|C|L|\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  R: FT Reconnect Flag.\n      Set to 1 if the sending LSR has preserved state
      and resources for\n      all FT-labels since the previous LDP session between
      the same LDP\n      peers, and is otherwise set to 0.  See section 5.4, \"FT
      Procedures\n      After TCP Failure\", for details of how this flag is used.\n
      \     If the FT Reconnect Flag is set, the sending LSR MUST include an\n      FT
      ACK TLV on the LDP Initialization message.\n   S: Save State Flag.\n      Set
      to 1 if the use of the FT Protection TLV is supported on\n      messages other
      than the KeepAlive message used for check-pointing\n      (see the C bit).  I.e.,
      the S bit indicates that some label on the\n      session may be a Sequence
      Numbered FT Label.\n   A: All-Label Protection Required\n      Set to 1 if all
      labels on the session MUST be treated as Sequence\n      Numbered FT Labels.
      \ This removes from a node the option of\n      treating some labels as FT Labels
      and some labels as non-FT\n      Labels.\n      Passing this information may
      be considered helpful to a peer since\n      it may allow it to make optimizations
      in its processing.\n      The A bit only has meaning if the S bit is set.\n
      \  C: Check-Pointing Flag.\n      Set to 1 to indicate that the check-Pointing
      procedures in this\n      document are in use.\n      If the S bit is also set
      to 1 then the C bit indicates that\n      check-pointing is applied only to
      Sequence Numbered FT Labels.\n      If the S bit is set to 0 (zero) then the
      C bit indicates that\n      check-pointing applies to all labels - all labels
      are Check-\n      Pointable FT Labels.\n   L: Learn From Network Flag.\n      Set
      to 1 if the Fault Recovery procedures of [RFC3478] are to be\n      used to
      re-learn state from the network.\n      It is not valid for all of the S, C
      and L bits to be zero.\n      It is not valid for both the L and either the
      S or C bits to be\n      set to 1.\n      All other bits in this field are currently
      reserved and SHOULD be\n      set to zero on transmission and ignored upon receipt.\n
      \     The following table summarizes the settings of these bits.\n      S   A
      \  C   L    Comments\n      =========================\n      0   x   0   0    Invalid\n
      \     0   0   0   1    See [RFC3478]\n      0   1   0   1    Invalid\n      0
      \  x   1   0    Check-Pointing of all labels\n      0   x   1   1    Invalid\n
      \     1   0   0   0    Full FT on selected labels\n      1   1   0   0    Full
      FT on all labels\n      1   x   0   1    Invalid\n      1   x   1   0    Same
      as (S=1,A=x,C=0,L=0)\n      1   x   1   1    Invalid.\n   FT Reconnection Timeout\n
      \     If the S bit or C bit in the FT Flags field is set, this indicates\n      the
      period of time the sending LSR will preserve state and\n      resources for
      FT Labels exchanged on the previous instantiation of\n      an FT LDP session
      that has recently failed.  The timeout is\n      encoded as a 32-bit unsigned
      integer number of milliseconds.\n      A value of zero in this field means that
      the sending LSR will\n      preserve state and resources indefinitely.\n      See
      section 4.4 for details of how this field is used.\n      If the L bit is set
      to 1 in the FT Flags field, the meaning of\n      this field is defined in [RFC3478].\n
      \  Recovery Time\n      The Recovery Time only has meaning if the L bit is set
      in the FT\n      Flags.  The meaning is defined in [RFC3478].\n"
    title: 8.2.  FT Session TLV
  - contents:
    - "8.3.  FT Protection TLV\n   LDP peers use the FT Protection TLV to indicate
      that an LDP message\n   contains an FT label operation.\n   The FT Protection
      TLV MUST NOT be used in messages flowing on an LDP\n   session that does not
      support the LDP FT enhancements.  Its presence\n   in such messages SHALL be
      treated as a protocol error by the\n   receiving LDP peer which SHOULD send
      a Notification message with the\n   'Unexpected TLV Session Not FT' status code.
      \ LSRs that do not\n   recognize this TLV SHOULD respond with a Notification
      message with\n   the 'Unknown TLV' status code.\n   The FT Protection TLV MAY
      be carried on an LDP message transported on\n   the LDP session after the initial
      exchange of LDP Initialization\n   messages.  In particular, this TLV MAY optionally
      be present on the\n   following messages:\n   -  Label Request Messages in downstream
      on-demand distribution mode.\n   -  Label Mapping messages in downstream unsolicited
      mode.\n   -  Keepalive messages used to request flushing of acknowledgement
      of\n      all previous messages that contained this TLV.\n   If a label is to
      be a Sequence Numbered FT Label, then the Protection\n   TLV MUST be present:\n
      \  -  on the Label Request message in downstream on-demand distribution\n      mode.\n
      \  -  on the Label Mapping message in in downstream unsolicited\n      distribution
      mode.\n   -  on all subsequent messages concerning this label.\n   Here 'subsequent
      messages concerning this label' means any message\n   whose Label TLV specifies
      this label or whose Label Request Message\n   ID TLV specifies the initial Label
      Request message.\n   If a label is not to be a Sequence Numbered FT Label, then
      the\n   Protection TLV MUST NOT be present on any of these messages that\n   relate
      to the label.  The presence of the FT TLV on a message\n   relating to a non-FT
      Label SHALL be treated as a protocol error by\n   the receiving LDP peer which
      SHOULD send a notification message with\n   the 'Unexpected TLV Label Not FT'
      status code.\n   Where a Label Withdraw or Label Release message contains only
      an FEC\n   TLV and does not identify a single specific label, the FT TLV should\n
      \  be included in the message if any label affected by the message is a\n   Sequence
      Numbered FT Label.  If there is any doubt as to whether an\n   FT TLV should
      be present, it is RECOMMENDED that the sender add the\n   TLV.\n   When an LDP
      peer receives a Label Withdraw Message or Label Release\n   message that contains
      only a FEC, it SHALL accept the FT TLV if it is\n   present regardless of the
      FT status of the labels that it affects.\n   If an LDP session is an FT session
      as determined by the presence of\n   the FT Session TLV, with the S bit set
      on the LDP Initialization\n   messages, the FT Protection TLV MUST be present
      on all Address\n   messages on the session.\n   If the session is an FT session,
      the FT Protection TLV may also\n   optionally be present:\n   -  on Notification
      messages on the session that have the status code\n      'Label Resources Available'.\n
      \  -  on Keepalive messages.\n   The FT Protection TLV is encoded as follows.\n
      \   0                   1                   2                   3\n    0 1 2
      3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |0|0| FT Protection (0x0203)    |      Length (= 4)             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                      FT Sequence Number                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  FT Sequence Number\n      The sequence number for this Sequence Numbered
      FT Label operation.\n      The sequence number is encoded as a 32-bit unsigned
      integer.  The\n      initial value for this field on a new LDP session is 0x00000001\n
      \     and is incremented by one for each FT LDP message issued by the\n      sending
      LSR on this LDP session.  This field may wrap from\n      0xFFFFFFFF to 0x00000001.\n
      \     This field MUST be reset to 0x00000001 if either LDP peer does not\n      set
      the FT Reconnect Flag upon re-establishment of the TCP\n      connection.\n
      \     See section 5.2, \"FT Operation Acks\" for details of how this field\n
      \     is used.\n      The special use of 0x00000000 is discussed in the section
      8.4, \"FT\n      ACK TLV\" below.\n   If an LSR receives an FT Protection TLV
      on a session that does not\n   support the FT LDP enhancements, it SHOULD send
      a Notification\n   message to its LDP peer containing the 'Unexpected TLV, Session
      Not\n   FT' status code.  LSRs that do not recognize this TLV SHOULD respond\n
      \  with a Notification message with the 'Unknown TLV' status code.\n   If an
      LSR receives an FT Protection TLV on an operation affecting a\n   label that
      it believes is a non-FT Label, it SHOULD send a\n   Notification message to
      its LDP peer containing the 'Unexpected TLV,\n   Label Not FT' status code.\n
      \  If an LSR receives a message without the FT Protection TLV affecting\n   a
      label that it believes is a Sequence Numbered FT Label, it SHOULD\n   send a
      Notification message to its LDP peer containing the 'Missing\n   FT Protection
      TLV' status code.\n   If an LSR receives an FT Protection TLV containing a zero
      FT Sequence\n   Number, it SHOULD send a Notification message to its LDP peer\n
      \  containing the 'Zero FT Seqnum' status code.\n"
    title: 8.3.  FT Protection TLV
  - contents:
    - "8.4.  FT ACK TLV\n   LDP peers use the FT ACK TLV to acknowledge FT Label operations.\n
      \  The FT ACK TLV MUST NOT be used in messages flowing on an LDP session\n   that
      does not support the LDP FT enhancements.  Its presence on such\n   messages
      SHALL be treated as a protocol error by the receiving LDP\n   peer.\n   The
      FT ACK TLV MAY be present on any LDP message exchanged on an LDP\n   session
      after the initial LDP Initialization messages.  It is\n   RECOMMENDED that the
      FT ACK TLV be included in all FT Keepalive\n   messages in order to ensure that
      the LDP peers do not build up a\n   large backlog of unacknowledged state information.\n
      \  The FT ACK TLV is encoded as follows.\n    0                   1                   2
      \                 3\n   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
      6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |0|0|   FT ACK (0x0504)         |      Length (= 4)             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                      FT ACK Sequence Number                   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  FT ACK Sequence Number\n      The sequence number for the most recent FT
      label message that the\n      sending LDP peer has received from the receiving
      LDP peer and\n      secured against failure of the LDP session.  It is not necessary\n
      \     for the sending peer to have fully processed the message before\n      ACKing
      it.  For example, an LSR MAY ACK a Label Request message as\n      soon as it
      has securely recorded the message, without waiting\n      until it can send
      the Label Mapping message in response.\n      ACKs are cumulative.  Receipt
      of an LDP message containing an FT\n      ACK TLV with an FT ACK Sequence Number
      of 12 is treated as the\n      acknowledgement of all messages from 1 to 12
      inclusive (assuming\n      the LDP session started with a sequence number of
      1).\n      This field MUST be set to 0 if the LSR sending the FT ACK TLV has\n
      \     not received any FT label operations on this LDP session.  This\n      applies
      to LDP sessions, to new LDP peers or after an LSR\n      determines that it
      must drop all state for a failed TCP\n      connection.\n      See section 5.2,
      \"FT Operation Acks\" for details of how this field\n      is used.\n   If an
      LSR receives an FT ACK TLV that contains an FT ACK Sequence\n   Number that
      is less than the previously received FT ACK Sequence\n   Number (remembering
      to take account of wrapping), it SHOULD send a\n   Notification message to its
      LDP peer containing the 'FT ACK Sequence\n   Error' status code.\n"
    title: 8.4.  FT ACK TLV
  - contents:
    - "8.5.  FT Cork TLV\n   LDP peers use the FT Cork TLV on FT Keepalive messages
      to indicate\n   that they wish to quiesce the LDP session prior to a controlled\n
      \  shutdown and restart, for example during control-plane software\n   upgrade.\n
      \  The FT Cork TLV is encoded as follows.\n    0                   1                   2
      \                  3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
      5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |0|0|   FT Cork (0x0505)        |      Length (= 0)             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  Upon receipt of a Keepalive message with the FT Cork TLV and the FT\n   Protection
      TLV, an LSR SHOULD perform the following actions:\n   -  Process and secure
      any messages from the peer LSR that have\n      sequence numbers less than (accounting
      for wrap) that contained in\n      the FT Protection TLV on the Keepalive message.\n
      \  -  Send a Keepalive message back to the peer containing the FT Cork\n      TLV
      and the FT ACK TLV specifying the FT ACK sequence number\n      equal to that
      in the original Keepalive message (i.e. ACKing all\n      messages up to that
      point).\n   -  If this LSR has not yet received an FT ACK to all the messages
      it\n      has sent containing the FT Protection TLV, then also include an FT\n
      \     Protection TLV on the Keepalive sent to the peer LSR.  This tells\n      the
      remote peer that the local LSR has saved state prior to\n      quiesce but is
      still awaiting confirmation that the remote peer\n      has saved state.\n   -
      \ Cease sending any further state changing messages on this LDP\n      session
      until it has been disconnected and recovered.\n   On receipt of a Keepalive
      message with the FT Cork TLV and an FT ACK\n   TLV that acknowledges the previously
      sent Keepalive that carried the\n   FT Cork TLV, an LSR knows that quiesce is
      complete.  If the received\n   Keepalive also carries the FT Protection TLV,
      the LSR must respond\n   with a further Keepalive to complete the 3-way handshake.
      \ It SHOULD\n   now send a \"Temporary Shutdown\" Notification message, disconnect
      the\n   TCP session and perform whatever control plane actions required this\n
      \  session shutdown.\n   An example of such a 3-way handshake for controlled
      shutdown is given\n   in section section 9.4, \"Temporary Shutdown With FT Procedures
      and\n   Check-Pointing\".\n   If an LSR receives a message that should not carry
      the FT Cork TLV,\n   or if the FT Cork TLV is used on a Keepalive message without
      one of\n   the FT Protection or FT ACK TLVs present, it SHOULD send a\n   Notification
      message to its LDP peer containing the 'Unexpected FT\n   Cork TLV' status code.\n"
    title: 8.5.  FT Cork TLV
  title: 8. New Fields and Values
- contents:
  - "9. Example Use\n   Consider two LDP peers, P1 and P2, implementing LDP over a
    TCP\n   connection that connects them, and the message flow shown below.\n   The
    parameters shown on each message below are as follows:\n      message (label,
    senders FT sequence number, FT ACK number)\n      A \"-\" for FT ACK number means
    that the FT ACK TLV is not included\n      on that message.  \"n/a\" means that
    the parameter in question is\n      not applicable to that type of message.\n
    \  In the diagrams below, time flows from top to bottom.  The relative\n   position
    of each message shows when it is transmitted.  See the notes\n   for a description
    of when each message is received, secured for FT or\n   processed.\n"
  - contents:
    - "9.1.  Session Failure and Recovery - FT Procedures\n   notes         P1                         P2\n
      \  =====         ==                         ==\n   (1)           Label Request(L1,27,-)\n
      \                --------------------------->\n                 Label Request(L2,28,-)\n
      \                --------------------------->\n   (2)                Label Request(L3,93,27)\n
      \                <---------------------------\n   (3)                                      Label
      Request(L1,123,-)\n                                            -------------------------->\n
      \                                           Label Request(L2,124,-)\n                                            -------------------------->\n
      \  (4)                                           Label Mapping(L1,57,-)\n                                            <--------------------------\n
      \                     Label Mapping(L1,94,28)\n                 <---------------------------\n
      \  (5)                                           Label Mapping(L2,58,-)\n                                            <--------------------------\n
      \                      Label Mapping(L2,95,-)\n                 <---------------------------\n
      \  (6)           Address(n/a,29,-)\n                 --------------------------->\n
      \  (7)           Label Request(L4,30,-)\n                 --------------------------->\n
      \  (8)           Keepalive(n/a,-,94)\n                 --------------------------->\n
      \  (9)                   Label Abort(L3,96,-)\n                 <---------------------------\n
      \  (10)          ===== TCP Session lost =====\n                   :\n   (11)
      \           :                            Label Withdraw(L1,59,-)\n                   :
      \                       <--------------------------\n                   :\n
      \  (12)          === TCP Session restored ===\n                 LDP Init(n/a,n/a,94)\n
      \                --------------------------->\n                         LDP
      Init(n/a,n/a,29)\n                 <---------------------------\n   (13)          Label
      Request(L4,30,-)\n                 --------------------------->\n   (14)                Label
      Mapping(L2,95,-)\n                 <---------------------------\n                        Label
      Abort(L3,96,30)\n                 <---------------------------\n   (15)               Label
      Withdraw(L1,97,-)\n                 <---------------------------\n   Notes:\n
      \  ======\n   (1)  Assume that the LDP session has already been initialized.
      \ P1\n        issues 2 new Label Requests using the next sequence numbers.\n
      \  (2)  P2 issues a Label Request to P1.  At the time of sending this\n        request,
      P2 has secured the receipt of the label request for L1\n        from P1, so
      it includes an ACK for that message.\n   (3)  P2 processes the Label Requests
      for L1 and L2 and forwards them\n        downstream.  Details of downstream
      processing are not shown in\n        the diagram above.\n   (4)  P2 receives
      a Label Mapping from downstream for L1, which it\n        forwards to P1.  It
      includes an ACK to the Label Request for L2,\n        as that message has now
      been secured and processed.\n   (5)  P2 receives the Label Mapping for L2, which
      it forwards to P1.\n        This time it does not include an ACK as it has not
      received any\n        further messages from P1.\n   (6)  Meanwhile, P1 sends
      a new Address Message to P2.\n   (7)  P1 also sends a fourth Label Request to
      P2\n   (8)  P1 sends a Keepalive message to P2, on which it includes an ACK\n
      \       for the Label Mapping for L1, which is the latest message P1 has\n        received
      and secured at the time the Keepalive is sent.\n   (9)  P2 issues a Label Abort
      for L3.\n   (10) At this point, the TCP session goes down.\n   (11) While the
      TCP session is down, P2 receives a Label Withdraw\n        Message for L1, which
      it queues.\n   (12) The TCP session is reconnected and P1 and P2 exchange LDP\n
      \       Initialization messages on the recovered session, which include\n        ACKS
      for the last message each peer received and secured prior\n        to the failure.\n
      \  (13) From the LDP Init exchange, P1 determines that it needs to re-\n        issue
      the Label request for L4.\n   (14) Similarly, P2 determines that it needs to
      re-issue the Label\n        Mapping for L2 and the Label Abort.\n   (15) P2
      issues the queued Label Withdraw to P1.\n"
    title: 9.1.  Session Failure and Recovery - FT Procedures
  - contents:
    - "9.2.  Use of Check-Pointing With FT Procedures\n   notes         P1                         P2\n
      \  =====         ==                         ==\n   (1)           Label Request(L1,27,-)\n
      \                --------------------------->\n                 Label Request(L2,28,-)\n
      \                --------------------------->\n   (2)                Label Request(L3,93,-)\n
      \                <---------------------------\n   (3)                                      Label
      Request(L1,123,-)\n                                            -------------------------->\n
      \                                           Label Request(L2,124,-)\n                                            -------------------------->\n
      \  (4)                                           Label Mapping(L1,57,-)\n                                            <--------------------------\n
      \                     Label Mapping(L1,94,-)\n                 <---------------------------\n
      \  (5)                                           Label Mapping(L2,58,-)\n                                            <--------------------------\n
      \                      Label Mapping(L2,95,-)\n                 <---------------------------\n
      \  (6)           Address(n/a,29,-)\n                 --------------------------->\n
      \  (7)           Label Request(L4,30,-)\n                 --------------------------->\n
      \  (8)           Keepalive(n/a,31,-)\n                 --------------------------->\n
      \  (9)                   Keepalive(n/a,-,31)\n                 <---------------------------\n
      \  (10)                                          Keepalive(n/a,59,124)\n                                            <---------------------------\n
      \  (11)                                     Keepalive(n/a,-,59)\n                                            --------------------------->\n
      \  Notes:\n   ======\n   Notes (1) through (7) are as in the previous example
      except note that\n   no acknowledgements are piggy-backed on reverse direction
      messages.\n   This means that at note (8) there are deferred acknowledgements
      in\n   both directions on both links.\n   (8)  P1 wishes to synchronize state
      with P2.  It sends a Keepalive\n        message containing an FT Protection
      TLV with sequence number 31.\n        Since it is not interested in P2's perception
      of the state that\n        it has stored, it does not include an FT ACK TLV.\n
      \  (9)  P2 responds at once with a Keepalive acknowledging the sequence\n        number
      on the received Keepalive.  This tells P1 that P2 has\n        preserved all
      state/messages previously received on this\n        session.\n   (10) The downstream
      node wishes to synchronize state with P2.  It\n        sends a Keepalive message
      containing an FT Protection TLV with\n        sequence number 59.  P3 also takes
      this opportunity to get up to\n        date with its acknowledgements to P2
      by including an FT ACK TLV\n        acknowledging up to sequence number 124.\n
      \  (11) P2 responds at once with a Keepalive acknowledging the sequence\n        number
      on the received Keepalive.\n"
    title: 9.2.  Use of Check-Pointing With FT Procedures
  - contents:
    - "9.3.  Temporary Shutdown With FT Procedures\n   notes         P1                         P2\n
      \  =====         ==                         ==\n   (1)           Label Request(L1,27,-)\n
      \                --------------------------->\n                 Label Request(L2,28,-)\n
      \                --------------------------->\n   (2)                Label Request(L3,93,27)\n
      \                <---------------------------\n   (3)                                      Label
      Request(L1,123,-)\n                                            -------------------------->\n
      \                                           Label Request(L2,124,-)\n                                            -------------------------->\n
      \  (4)                                           Label Mapping(L1,57,-)\n                                            <--------------------------\n
      \                     Label Mapping(L1,94,28)\n                 <---------------------------\n
      \  (5)                                           Label Mapping(L2,58,-)\n                                            <--------------------------\n
      \                      Label Mapping(L2,95,-)\n                 <---------------------------\n
      \  (6)           Address(n/a,29,-)\n                 --------------------------->\n
      \  (7)           Label Request(L4,30,-)\n                 --------------------------->\n
      \  (8)           Keepalive(n/a,-,94)\n                 --------------------------->\n
      \  (9)                   Label Abort(L3,96,-)\n                 <---------------------------\n
      \  (10)          Notification(Temporary shutdown)\n                 --------------------------->\n
      \                ===== TCP Session shutdown =====\n                   :\n   (11)
      \           :                            Label Withdraw(L1,59,-)\n                   :
      \                       <--------------------------\n                   :\n
      \                ===== TCP Session restored =====\n   (12)          LDP Init(n/a,n/a,94)\n
      \                --------------------------->\n                         LDP
      Init(n/a,n/a,29)\n                 <---------------------------\n   (13)          Label
      Request(L4,30,-)\n                 --------------------------->\n   (14)                Label
      Mapping(L2,95,-)\n                 <---------------------------\n                        Label
      Abort(L3,96,30)\n                 <---------------------------\n   (15)               Label
      Withdraw(L1,97,-)\n                 <---------------------------\n   Notes:\n
      \  ======\n   Notes are as in the previous example except as follows.\n   (10)
      P1 needs to upgrade the software or hardware that it is running.\n        It
      issues a Notification message to terminate the LDP session,\n        but sets
      the status code as 'Temporary shutdown' to inform P2\n        that this is not
      a fatal error, and P2 should maintain FT state.\n        The TCP connection
      may also fail during the period that the LDP\n        session is down (in which
      case it will need to be re-\n        established), but it is also possible that
      the TCP connection\n        will be preserved.\n"
    title: 9.3.  Temporary Shutdown With FT Procedures
  - contents:
    - "9.4.  Temporary Shutdown With FT Procedures and Check-Pointing\n   notes         P1
      \                        P2\n   =====         ==                         ==\n
      \  (1)           Label Request(L1,27,-)\n                 --------------------------->\n
      \                Label Request(L2,28,-)\n                 --------------------------->\n
      \  (2)                Label Request(L3,93,-)\n                 <---------------------------\n
      \                                           Label Request(L1,123,-)\n                                            -------------------------->\n
      \                                           Label Request(L2,124,-)\n                                            -------------------------->\n
      \                                                Label Mapping(L1,57,-)\n                                            <--------------------------\n
      \  (3)                 Label Mapping(L1,94,-)\n                 <---------------------------\n
      \                                                Label Mapping(L2,58,-)\n                                            <--------------------------\n
      \                      Label Mapping(L2,95,-)\n                 <---------------------------\n
      \  (4)           Address(n/a,29,-)\n                 --------------------------->\n
      \  (5)           Label Request(L4,30,-)\n                 --------------------------->\n
      \  (6)           Keepalive(n/a,31,95) * with FT Cork TLV *\n                 --------------------------->\n
      \  (7)                   Label Abort(L3,96,-)\n                 <---------------------------\n
      \  (8)                    Keepalive(n/a,97,31) * with FT Cork TLV *\n                 <---------------------------\n
      \  (9)           Keepalive(n/a,-,97) * with FT Cork TLV *\n                 --------------------------->\n
      \  (10)          Notification(Temporary shutdown)\n                 --------------------------->\n
      \                ===== TCP Session shutdown =====\n                   :\n                   :
      \                           Label Withdraw(L1,59,-)\n                   :                        <--------------------------\n
      \                  :\n                 ===== TCP Session restored =====\n   (11)
      \         LDP Init(n/a,n/a,96)\n                 --------------------------->\n
      \                        LDP Init(n/a,n/a,31)\n                 <---------------------------\n
      \                     Label Withdraw(L1,97,-)\n                 <---------------------------\n
      \  Notes:\n   ======\n   This example operates much as the previous one.  However,
      at (1),\n   (2), (3), (4) and (5), no acknowledgements are made.\n   At (6),
      P1 determines that graceful shutdown is required and sends a\n   Keepalive acknowledging
      all previously received messages and itself\n   containing an FT Protection
      TLV number and the FT Cork TLV.\n   The Label abort at (7) crosses with this
      Keepalive, so at (8) P2\n   sends a Keepalive that acknowledges all messages
      received so far, but\n   also includes the FT Protection and FT Cork TLVs to
      indicate that\n   there are still messages outstanding to be acknowledged.\n
      \  P1 is then able to complete the 3-way handshake at (9) and close the\n   TCP
      session at (10).\n   Upon recovery at (11), there are no messages to be re-sent
      because\n   the KeepAlives flushed the acknowledgements.  The only messages
      sent\n   after recovery is the Label Withdraw that was pended during the TCP\n
      \  session failure.\n"
    title: 9.4.  Temporary Shutdown With FT Procedures and Check-Pointing
  - contents:
    - "9.5.  Check-Pointing Without FT Procedures\n   notes         P1                         P2\n
      \  =====         ==                         ==\n   (1)           Label Request(L1)\n
      \                --------------------------->\n   (2)                Label Request(L2)\n
      \                <---------------------------\n                                            Label
      Request(L1)\n                                            -------------------------->\n
      \                                                Label Mapping(L1)\n                                            <--------------------------\n
      \  (3)                 Label Mapping(L1)\n                 <---------------------------\n
      \  (4)           Keepalive(n/a,12,-)\n                 --------------------------->\n
      \  (5)           Label Request(L3)\n                 --------------------------->\n
      \  (6)                    Keepalive(n/a,-,12)\n                 <---------------------------\n
      \                                           Label Request(L3)\n                                            -------------------------->\n
      \                                                Label Mapping(L3)\n                                            <--------------------------\n
      \  (7)                 Label Mapping(L3)\n                 <---------------------------\n
      \                ===== TCP Session failure =====\n                   :\n                   :\n
      \                  :\n                 ===== TCP Session restored =====\n   (8)
      \         LDP Init(n/a,n/a,23)\n                 --------------------------->\n
      \                        LDP Init(n/a,n/a,12)\n                 <---------------------------\n
      \  (9)           Label Request(L3)\n                 --------------------------->\n
      \                                           Label Request(L3)\n                                            -------------------------->\n
      \                                                Label Mapping(L3)\n                                            <--------------------------\n
      \  (10)                Label Mapping(L3)\n                 <---------------------------\n
      \  (11)                Label Request(L2)\n                 <---------------------------\n
      \  Notes:\n   ======\n   (1), (2) and (3) show label distribution without FT
      sequence numbers.\n   (4)  A check-Point request from P1.  It carries the sequence
      number\n        of the check-point request.\n   (5)  P1 immediately starts a
      new label distribution request.\n   (6)  P2 confirms that it has secured all
      previous transactions.\n   (7)  The subsequent (un-acknowledged) label distribution
      completes.\n   (8)  The session fails and is restarted.  Initialization messages\n
      \       confirm the sequence numbers of the secured check-points.\n   (9)  P1
      recommences the unacknowledged label distribution request.\n   (10) P2 recommences
      an unacknowledged label distribution request.\n"
    title: 9.5.  Check-Pointing Without FT Procedures
  - contents:
    - "9.6.  Graceful Shutdown With Check-Pointing But No FT Procedures\n   notes
      \        P1                         P2\n   =====         ==                         ==\n
      \  (1)           Label Request(L1)\n                 --------------------------->\n
      \  (2)                Label Request(L2)\n                 <---------------------------\n
      \                                           Label Request(L1)\n                                            -------------------------->\n
      \                                                Label Mapping(L1)\n                                            <--------------------------\n
      \  (3)                 Label Mapping(L1)\n                 <---------------------------\n
      \  (4)           Keepalive(n/a,12,23) * With Cork TLV *\n                 --------------------------->\n
      \  (5)             :\n                   :\n                   :\n   (6)                    Keepalive(n/a,24,12)
      * With Cork TLV *\n                 <---------------------------\n   (7)           Keepalive(n/a,-,24)
      * With Cork TLV *\n                 --------------------------->\n   (8)           Notification(Temporary
      shutdown)\n                 --------------------------->\n                 =====
      TCP Session failure =====\n                   :\n                   :\n                   :\n
      \                ===== TCP Session restored =====\n   (9)          LDP Init(n/a,n/a,24)\n
      \                --------------------------->\n                         LDP
      Init(n/a,n/a,12)\n                 <---------------------------\n   (10)          Label
      Request(L3)\n                 --------------------------->\n                                            Label
      Request(L3)\n                                            -------------------------->\n
      \                                                Label Mapping(L3)\n                                            <--------------------------\n
      \  (11)                Label Mapping(L3)\n                 <---------------------------\n
      \  (12)                Label Mapping(L2)\n                 --------------------------->\n
      \  Notes:\n   ======\n   (1), (2) and (3) show label distribution without FT
      sequence numbers.\n   (4)  A check-point request from P1.  It carries the sequence
      number\n        of the check-point request and a Cork TLV.\n   (5)  P1 has sent
      a Cork TLV so quieces.\n   (6)  P2 confirms the check-point and continues the
      three-way\n        handshake by including a Cork TLV itself.\n   (7)  P1 completes
      the three-way handshake.  All operations have now\n        been check-pointed
      and the session is quiesced.\n   (8)  The session is gracefully shut down.\n
      \  (9)  The session recovers and the peers exchange the sequence numbers\n        of
      the last secured check-points.\n   (10) P1 starts a new label distribution request.\n
      \  (11) P1 continues processing a previously received label distribution\n        request.\n"
    title: 9.6.  Graceful Shutdown With Check-Pointing But No FT Procedures
  title: 9. Example Use
- contents:
  - "10.   Security Considerations\n   The LDP FT enhancements inherit similar security
    considerations to\n   those discussed in [RFC3036].\n   The LDP FT enhancements
    allow the re-establishment of a TCP\n   connection between LDP peers without a
    full re-exchange of the\n   attributes of established labels, which renders LSRs
    that implement\n   the extensions specified in this document vulnerable to additional\n
    \  denial-of-service attacks as follows:\n   -  An intruder may impersonate an
    LDP peer in order to force a\n      failure and reconnection of the TCP connection,
    but where the\n      intruder does not set the FT Reconnect Flag upon re-connection.\n
    \     This forces all FT labels to be released.\n   -  Similarly, an intruder
    could set the FT Reconnect Flag on re-\n      establishment of the TCP session
    without preserving the state and\n      resources for FT labels.\n   -  An intruder
    could intercept the traffic between LDP peers and\n      override the setting
    of the FT Label Flag to be set to 0 for all\n      labels.\n   All of these attacks
    may be countered by use of an authentication\n   scheme between LDP peers, such
    as the MD5-based scheme outlined in\n   [RFC3036].\n   Alternative authentication
    schemes for LDP peers are outside the\n   scope of this document, but could be
    deployed to provide enhanced\n   security to implementations of LDP and the LDP
    FT enhancements.\n   As with LDP, a security issue may exist if an LDP implementation\n
    \  continues to use labels after expiration of the session that first\n   caused
    them to be used.  This may arise if the upstream LSR detects\n   the session failure
    after the downstream LSR has released and re-used\n   the label.  The problem
    is most obvious with the platform-wide label\n   space and could result in mis-forwarding
    of data to other than\n   intended destinations and it is conceivable that these
    behaviors may\n   be deliberately exploited to either obtain services without\n
    \  authorization or to deny services to others.\n   In this document, the validity
    of the session may be extended by the\n   FT Reconnection Timeout, and the session
    may be re-established in\n   this period.  After the expiry of the Reconnection
    Timeout, the\n   session must be considered to have failed and the same security
    issue\n   applies as described above.\n   However, the downstream LSR may declare
    the session as failed before\n   the expiration of its Reconnection Timeout.  This
    increases the\n   period during which the downstream LSR might reallocate the
    label\n   while the upstream LSR continues to transmit data using the old usage\n
    \  of the label.  To reduce this issue, this document requires that\n   labels
    not be re-used until the Reconnection Timeout has expired.\n   A further issue
    might apply if labels were re-used prior to the\n   expiration of the FT Reconnection
    Timeout, but this is forbidden by\n   this document.\n   The issue of re-use of
    labels extends to labels managed through other\n   mechanisms including direct
    configuration through management\n   applications and distribution through other
    label distribution\n   protocols.  Avoiding this problem may be construed as an\n
    \  implementation issue (see below), but failure to acknowledge it could\n   result
    in the mis-forwarding of data between LSPs established using\n   some other mechanism
    and those recovered using the methods described\n   in this document.\n"
  title: 10.   Security Considerations
- contents:
  - '11.   Implementation Notes

    '
  - contents:
    - "11.1. FT Recovery Support on Non-FT LSRs\n   In order to take full advantage
      of the FT capabilities of LSRs in the\n   network, it may be that an LSR that
      does not itself contain the\n   ability to recover from local hardware or software
      faults still needs\n   to support the LDP FT enhancements described in this
      document.\n   Consider an LSR, P1, that is an LDP peer of a fully Fault Tolerant\n
      \  LSR, P2.  If P2 experiences a fault in the hardware or software that\n   serves
      an LDP session between P1 and P2, it may fail the TCP\n   connection between
      the peers.  When the connection is recovered, the\n   LSPs/labels between P1
      and P2 can only be recovered if both LSRs were\n   applying the FT recovery
      procedures to the LDP session.\n"
    title: 11.1. FT Recovery Support on Non-FT LSRs
  - contents:
    - "11.2. ACK generation logic\n   FT ACKs SHOULD be returned to the sending LSR
      as soon as is\n   practicable in order to avoid building up a large quantity
      of\n   unacknowledged state changes at the LSR.  However, immediate one-\n   for-one
      acknowledgements would waste bandwidth unnecessarily.\n   A possible implementation
      strategy for sending ACKs to FT LDP\n   messages is as follows:\n   -  An LSR
      secures received messages in order and tracks the sequence\n      number of
      the most recently secured message, Sr.\n   -  On each LDP KeepAlive that the
      LSR sends, it attaches an FT ACK\n      TLV listing Sr.\n   -  Optionally, the
      LSR may attach an FT ACK TLV to any other LDP\n      message sent between Keepalive
      messages if, for example, Sr has\n      increased by more than a threshold value
      since the last ACK sent.\n   This implementation combines the bandwidth benefits
      of accumulating\n   ACKs while still providing timely ACKs.\n"
    - contents:
      - "11.2.1 Ack Generation Logic When Using Check-Pointing\n   If check-pointing
        is in use, the LSRs need not be concerned with\n   sending ACKs in such a
        timely manner.\n   Check-points are solicitations for acknowledgements conveyed
        as a\n   sequence number in an FT Protection TLV on a Keepalive message.  Such\n
        \  check-point requests could be issued on a timer, after a significant\n
        \  amount of change, or before controlled shutdown of a session.\n   The use
        of check-pointing may considerably simplify an implementation\n   since it
        does not need to track the sequence numbers of all received\n   LDP messages.
        \ It must, however, still ensure that all received\n   messages (or the consequent
        state changes) are secured before\n   acknowledging the sequence number on
        the Keepalive.\n   This approach may be considered optimal in systems that
        do not show a\n   high degree of change over time (such as targeted LDP sessions)
        and\n   that are prepared to risk loss of state for the most recent LDP\n
        \  exchanges.  More dynamic systems (such as LDP discovery sessions) are\n
        \  more likely to want to acknowledge state changes more frequently so\n   that
        the maximum amount of state can be preserved over a failure.\n"
      title: 11.2.1 Ack Generation Logic When Using Check-Pointing
    title: 11.2. ACK generation logic
  - contents:
    - "11.3 Interactions With Other Label Distribution Mechanisms\n   Many LDP LSRs
      also run other label distribution mechanisms.  These\n   include management
      interfaces for configuration of static label\n   mappings, other distinct instances
      of LDP, and other label\n   distribution protocols.  The last example includes
      the traffic\n   engineering label distribution protocol that is used to construct\n
      \  tunnels through which LDP LSPs are established.\n   As with re-use of individual
      labels by LDP within a restarting LDP\n   system, care must be taken to prevent
      labels that need to be retained\n   by a restarting LDP session or protocol
      component from being used by\n   another label distribution mechanism since
      that might compromise data\n   security amongst other things.\n   It is a matter
      for implementations to avoid this issue through the\n   use of techniques such
      as a common label management component or\n   segmented label spaces.\n"
    title: 11.3 Interactions With Other Label Distribution Mechanisms
  title: 11.   Implementation Notes
- contents:
  - "12.   Acknowledgments\n   The work in this document is based on the LDP ideas
    expressed by the\n   authors of [RFC3036].\n   The ACK scheme used in this document
    was inspired by the proposal by\n   David Ward and John Scudder for restarting
    BGP sessions now included\n   in [BGP-RESTART].\n   The authors would also like
    to acknowledge the careful review and\n   comments of Nick Weeds, Piers Finlayson,
    Tim Harrison, Duncan Archer,\n   Peter Ashwood-Smith, Bob Thomas, S. Manikantan,
    Adam Sheppard,\n   Alan Davey, Iftekhar Hussain and Loa Andersson.\n"
  title: 12.   Acknowledgments
- contents:
  - "13.   Intellectual Property Consideration\n   The IETF takes no position regarding
    the validity or scope of any\n   intellectual property or other rights that might
    be claimed to\n   pertain to the implementation or use of the technology described
    in\n   this document or the extent to which any license under such rights\n   might
    or might not be available; neither does it represent that it\n   has made any
    effort to identify any such rights.  Information on the\n   IETF's procedures
    with respect to rights in standards-track and\n   standards-related documentation
    can be found in BCP-11.  Copies of\n   claims of rights made available for publication
    and any assurances of\n   licenses to be made available, or the result of an attempt
    made to\n   obtain a general license or permission for the use of such\n   proprietary
    rights by implementors or users of this specification can\n   be obtained from
    the IETF Secretariat.\n   The IETF invites any interested party to bring to its
    attention any\n   copyrights, patents or patent applications, or other proprietary\n
    \  rights which may cover technology that may be required to practice\n   this
    standard.  Please address the information to the IETF Executive\n   Director.\n
    \  The IETF has been notified of intellectual property rights claimed in\n   regard
    to some or all of the specification contained in this\n   document.  For more
    information, consult the online list of claimed\n   rights.\n"
  title: 13.   Intellectual Property Consideration
- contents:
  - '14.  References

    '
  - contents:
    - "14.1. Normative References\n   [RFC2026]      Bradner, S., \"The Internet Standards
      Process --\n                  Revision 3\", BCP 9, RFC 2026, October 1996.\n
      \  [RFC2119]      Bradner, S., \"Key words for use in RFCs to Indicate\n                  Requirement
      Levels\", BCP 14, RFC 2119, March 1997.\n   [RFC3036]      Andersson, L., Doolan,
      P., Feldman, N., Fredette, A.\n                  and B. Thomas, \"LDP Specification,
      RFC 3036, January\n                  2001.\n   [RFC3478]      Leelanivas, M.,
      Rekhter, Y. and R. Aggrawal, \"Graceful\n                  Restart Mechanism
      for Label Distribution Protocol\",\n                  RFC 3478, February 2003.\n"
    title: 14.1. Normative References
  - contents:
    - "14.2. Informative References\n   [RFC2205]      Braden, R., Zhang, L., Berson,
      S., Herzog, S. and S.\n                  Jamin, \"Resource ReSerVation Protocol
      (RSVP) --\n                  Version 1, Functional Specification\", RFC 2205,\n
      \                 September 1997.\n   [RFC2961]      Berger, L., Gan, D., Swallow,
      G., Pan, P., Tomassi, F.\n                  and S. Molendini, \"RSVP Refresh
      Reduction Extensions\",\n                  RFC 2961, April 2001.\n   [RFC3209]
      \     Awduche, D., Berger, L., Gan, D., Li, T., Srinivasan,\n                  V.
      and G. Swallow, \"Extensions to RSVP for LSP\n                  Tunnels\", RFC
      3209, December 2001.\n   [RFC3212]      Jamoussi, B., Andersson, L., Callon,
      R., Dantu, R.,\n                  Wu, L., Doolan, P., Worster, T., Feldman,
      N.,\n                  Fredette, A., Girish, M., Gray, E., Heinanen, J.,\n                  Kilty,
      T. and A. Malis, \"Constraint-Based LSP Setup\n                  using LDP\",
      RFC 3212, January 2002.\n   [RFC3214]      Ash, G., Lee, Y., Ashwood-Smith,
      P., Jamoussi, B.,\n                  Fedyk, D., Skalecki, D. and L. Li, \"LSP
      Modification\n                  Using CR-LDP\", RFC 3214, January 2001.\n   [BGP-RESTART]
      \ Sangli, S., et al., Graceful Restart Mechanism for\n                  BGP,
      Work in Progress.\n"
    title: 14.2. Informative References
  title: 14.  References
- contents:
  - "15.  Authors' Addresses\n   Adrian Farrel (editor)\n   Movaz Networks, Inc.\n
    \  7926 Jones Branch Drive, Suite 615\n   McLean, VA 22102\n   Phone:  +1 703-847-1867\n
    \  EMail:  afarrel@movaz.com\n   Paul Brittain\n   Data Connection Ltd.\n   Windsor
    House, Pepper Street,\n   Chester, Cheshire\n   CH1 1DF, UK\n   Phone:   +44-(0)20-8366-1177\n
    \  EMail:   pjb@dataconnection.com\n   Philip Matthews\n   Hyperchip\n   1800
    Rene-Levesque Blvd W\n   Montreal, Quebec H3H 2H2\n   Canada\n   Phone:  +1 514-906-4965\n
    \  EMail: pmatthews@hyperchip.com\n   Eric Gray\n   EMail: ewgray@GraIyMage.com\n
    \  Jack Shaio\n   Vivace Networks\n   2730 Orchard Parkway\n   San Jose, CA 95134\n
    \  Phone: +1 408 432 7623\n   EMail: jack.shaio@vivacenetworks.com\n   Toby Smith\n
    \  Laurel Networks, Inc.\n   1300 Omega Drive\n   Pittsburgh, PA 15205\n   EMail:
    tob@laurelnetworks.com\n   Andrew G. Malis\n   Vivace Networks\n   2730 Orchard
    Parkway\n   San Jose, CA 95134\n   Phone: +1 408 383 7223\n   EMail: andy.malis@vivacenetworks.com\n"
  title: 15.  Authors' Addresses
- contents:
  - "16.  Full Copyright Statement\n   Copyright (C) The Internet Society (2003).
    \ All Rights Reserved.\n   This document and translations of it may be copied
    and furnished to\n   others, and derivative works that comment on or otherwise
    explain it\n   or assist in its implementation may be prepared, copied, published\n
    \  and distributed, in whole or in part, without restriction of any\n   kind,
    provided that the above copyright notice and this paragraph are\n   included on
    all such copies and derivative works.  However, this\n   document itself may not
    be modified in any way, such as by removing\n   the copyright notice or references
    to the Internet Society or other\n   Internet organizations, except as needed
    for the purpose of\n   developing Internet standards in which case the procedures
    for\n   copyrights defined in the Internet Standards process must be\n   followed,
    or as required to translate it into languages other than\n   English.\n   The
    limited permissions granted above are perpetual and will not be\n   revoked by
    the Internet Society or its successors or assigns.\n   This document and the information
    contained herein is provided on an\n   \"AS IS\" basis and THE INTERNET SOCIETY
    AND THE INTERNET ENGINEERING\n   TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS
    OR IMPLIED, INCLUDING\n   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE
    INFORMATION\n   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES
    OF\n   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\n"
  title: 16.  Full Copyright Statement
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided
    by the\n   Internet Society.\n"
  title: Acknowledgement
