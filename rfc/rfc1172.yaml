- title: __initial_text__
  contents:
  - '    The Point-to-Point Protocol (PPP) Initial Configuration Options

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This RFC specifies an IAB standards track protocol for\
    \ the Internet\n   community.\n   Please refer to the current edition of the \"\
    IAB Official Protocol\n   Standards\" for the standardization state and status\
    \ of this protocol.\n   This proposal is the product of the Point-to-Point Protocol\
    \ Working\n   Group of the Internet Engineering Task Force (IETF).  Comments on\n\
    \   this memo should be submitted to the IETF Point-to-Point Protocol\n   Working\
    \ Group chair.\n   Distribution of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   The Point-to-Point Protocol (PPP) provides a method for transmitting\n\
    \   datagrams over serial point-to-point links.  PPP is composed of\n      1)\
    \ a method for encapsulating datagrams over serial links,\n      2) an extensible\
    \ Link Control Protocol (LCP), and\n      3) a family of Network Control Protocols\
    \ (NCP) for establishing\n      and configuring different network-layer protocols.\n\
    \   The PPP encapsulating scheme, the basic LCP, and an NCP for\n   controlling\
    \ and establishing the Internet Protocol (IP) (called the\n   IP Control Protocol,\
    \ IPCP) are defined in The Point-to-Point Protocol\n   (PPP) [1].\n   This document\
    \ defines the intial options used by the LCP and IPCP. It\n   also defines a method\
    \ of Link Quality Monitoring and a simple\n   authentication scheme.\n       \
    \                    Table of Contents\n     1.     Introduction ..........................................\
    \    1\n     2.     Link Control Protocol (LCP) Configuration Options .....  \
    \  1\n        2.1       Maximum-Receive-Unit ............................    2\n\
    \        2.2       Async-Control-Character-Map .....................    3\n  \
    \      2.3       Authentication-Type .............................    5\n    \
    \    2.4       Magic-Number ....................................    7\n      \
    \  2.5       Link-Quality-Monitoring .........................   10\n        2.6\
    \       Protocol-Field-Compression ......................   11\n        2.7  \
    \     Address-and-Control-Field-Compression ...........   13\n     3.     Link\
    \ Quality Monitoring ...............................   15\n        3.1       Design\
    \ Motivation ...............................   15\n        3.2       Design Overview\
    \ .................................   15\n        3.3       Processes .......................................\
    \   16\n        3.4       Counters ........................................  \
    \ 18\n        3.5       Measurements, Calculations, State Variables .....   19\n\
    \        3.6       Link-Quality-Report Packet Format ...............   21\n  \
    \      3.7       Policy Suggestions ..............................   25\n    \
    \    3.8       Example .........................................   25\n     4.\
    \     Password Authentication Protocol ......................   27\n        4.1\
    \       Packet Format ...................................   27\n        4.2  \
    \     Authenticate ....................................   29\n        4.3    \
    \   Authenticate-Ack ................................   31\n        4.4      \
    \ Authenticate-Nak ................................   32\n     5.     IP Control\
    \ Protocol (IPCP) Configuration Options ......   33\n        5.1       IP-Addresses\
    \ ....................................   34\n        5.2       Compression-Type\
    \ ................................   36\n     REFERENCES ...................................................\
    \   37\n     SECURITY CONSIDERATIONS ......................................  \
    \ 37\n     AUTHOR'S ADDRESS .............................................   37\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The Point-to-Point Protocol (PPP) [1] proposes a standard\
    \ method of\n   encapsulating IP datagrams, and other Network Layer protocol\n\
    \   information, over point-to-point links.  PPP also proposes an\n   extensible\
    \ Option Negotiation Protocol.  [1] specifies only the\n   protocol itself; the\
    \ initial set of Configuration Options are\n   described in this document.  These\
    \ Configuration Options allow MTUs\n   to be changed, IP addresses to be dynamically\
    \ assigned, header\n   compression to be enabled, and much more.\n   This memo\
    \ is divided into several sections.  Section 2 describes\n   Configuration Options\
    \ for the Link Control Protocol. Section 3\n   specifies the use of the Link Quality\
    \ Monitoring option. Section 4\n   defines a simple Password Authentication Protocol.\
    \ Finally, Section 5\n   specifies Configuration Options for the IP Control Protocol.\n"
- title: 2.  Link Control Protocol (LCP) Configuration Options
  contents:
  - "2.  Link Control Protocol (LCP) Configuration Options\n   As described in [1],\
    \ LCP Configuration Options allow modifications to\n   the standard characteristics\
    \ of a point-to-point link to be\n   negotiated.  Negotiable modifications proposed\
    \ in this document\n   include such things as the maximum receive unit, async\
    \ control\n   character mapping, the link authentication method, etc.\n   The\
    \ initial proposed values for the LCP Configuration Option Type\n   field (see\
    \ [1]) are assigned as follows:\n      1       Maximum-Receive-Unit\n      2 \
    \      Async-Control-Character-Map\n      3       Authentication-Type\n      4\
    \       NOT ASSIGNED\n      5       Magic-Number\n      6       Link-Quality-Monitoring\n\
    \      7       Protocol-Field-Compression\n      8       Address-and-Control-Field-Compression\n"
- title: 2.1.  Maximum-Receive-Unit
  contents:
  - "2.1.  Maximum-Receive-Unit\n   Description\n      This Configuration Option provides\
    \ a way to negotiate the maximum\n      packet size used across one direction\
    \ of a link.  By default, all\n      implementations must be able to receive frames\
    \ with 1500 octets of\n      Information.\n      This Configuration Option may\
    \ be sent to inform the remote end\n      that you can receive larger frames,\
    \ or to request that the remote\n      end send you smaller frames.  If smaller\
    \ frames are requested, an\n      implementation MUST still be able to receive\
    \ 1500 octet frames in\n      case link synchronization is lost.\n   A summary\
    \ of the Maximum-Receive-Unit Configuration Option format is\n   shown below.\
    \  The fields are transmitted from left to right.\n    0                   1 \
    \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\
    \ 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Type      |    Length     |      Maximum-Receive-Unit     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Type\n      1\n   Length\n      4\n   Maximum-Receive-Unit\n      The Maximum-Receive-Unit\
    \ field is two octets and indicates the new\n      maximum receive unit.  The\
    \ Maximum-Receive-Unit covers only the\n      Data Link Layer Information field\
    \ but not the header, trailer or\n      any transparency bits or bytes.\n   Default\n\
    \      1500\n"
- title: 2.2.  Async-Control-Character-Map
  contents:
  - "2.2.  Async-Control-Character-Map\n   Description\n      This Configuration Option\
    \ provides a way to negotiate the use of\n      control character mapping on asynchronous\
    \ links.  By default, PPP\n      maps all control characters into an appropriate\
    \ two character\n      sequence.  However, it is rarely necessary to map all control\n\
    \      characters and often times it is unnecessary to map any\n      characters.\
    \  A PPP implementation may use this Configuration\n      Option to inform the\
    \ remote end which control characters must\n      remain mapped and which control\
    \ characters need not remain mapped\n      when the remote end sends them.  The\
    \ remote end may still send\n      these control characters in mapped format if\
    \ it is necessary\n      because of constraints at its (the remote) end.  This\
    \ option does\n      not solve problems for communications links that can send\
    \ only 7-\n      bit characters or that can not send all non-control characters.\n\
    \      There may be some use of synchronous-to-asynchronous converters\n     \
    \ (some built into modems) in Point-to-point links resulting in a\n      synchronous\
    \ PPP implementation on one end of a link and an\n      asynchronous implemention\
    \ on the other. It is the responsibility\n      of the converter to do all mapping\
    \ conversions during operation.\n      To enable this functionality, synchronous\
    \ PPP implementations MUST\n      always accept a Async-Control-Character-Map\
    \ Configuration Option\n      (it MUST always respond to an LCP Configure-Request\
    \ specifying\n      this Configuration Option with an LCP Configure-Ack). However,\n\
    \      acceptance of this Configuration Option does not imply that the\n     \
    \ synchronous implementation will do any character mapping, since\n      synchronous\
    \ PPP uses bit-stuffing rather than character-stuffing.\n      Instead, all such\
    \ character mapping will be performed by the\n      asynchronous-to-synchronous\
    \ converter.\n   A summary of the Async-Control-Character-Map Configuration Option\n\
    \   format is shown below.  The fields are transmitted from left to\n   right.\n\
    \    0                   1                   2                   3\n    0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Type      |    Length     |  Async-Control-Character-Map\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \             (cont)                |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Type\n      2\n   Length\n      6\n   Async-Control-Character-Map\n      The\
    \ Async-Control-Character-Map field is four octets and indicates\n      the new\
    \ async control character map.  The map is encoded in big-\n      endian fashion\
    \ where each numbered bit corresponds to the ASCII\n      control character of\
    \ the same value.  If the bit is cleared to\n      zero, then that ASCII control\
    \ character need not be mapped.  If\n      the bit is set to one, then that ASCII\
    \ control character must\n      remain mapped.  E.g., if bit 19 is set to zero,\
    \ then the ASCII\n      control character 19 (DC3, Control-S) may be sent in the\
    \ clear.\n   Default\n      All ones (0xffffffff).\n"
- title: 2.3.  Authentication-Type
  contents:
  - "2.3.  Authentication-Type\n   Description\n      On some links it may be desirable\
    \ to require a peer to\n      authenticate itself before allowing Network Layer\
    \ protocol data to\n      be exchanged.  This Configuration Option provides a\
    \ way to\n      negotiate the use of a specific authentication protocol.  By\n\
    \      default, authentication is not necessary.  If an implementation\n     \
    \ requires that the remote end authenticate with some specific\n      authentication\
    \ protocol, then it should negotiate the use of that\n      authentication protocol\
    \ with this Configuration Option.\n      Successful negotiation of the Authentication-Type\
    \ option adds an\n      additional Authentication phase to the Link Control Protocol.\n\
    \      This phase is after the Link Quality Determination phase, and\n      before\
    \ the Network Layer Protocol Configuration Negotiation phase.\n      Advancement\
    \ from the Authentication phase to the Network Layer\n      Protocol Configuration\
    \ Negotiation phase may not occur until the\n      peer is successfully authenticated\
    \ using the negotiated\n      authentication protocol.\n      An implementation\
    \ may allow the remote end to pick from more than\n      one authentication protocol.\
    \ To achieve this, it may include\n      multiple Authentication-Type Configuration\
    \ Options in its\n      Configure-Request packets.  An implementation receiving\
    \ a\n      Configure-Request specifying multiple Authentication-Types may\n  \
    \    accept at most one of the negotiable authentication protocols and\n     \
    \ should send a Configure-Reject specifying all of the other\n      specified\
    \ authentication protocols.\n      It is recommended that each PPP implementation\
    \ support\n      configuration of authentication parameters at least on a per-\n\
    \      interface basis, if not a per peer entity basis.  The parameters\n    \
    \  should specify which authetication techniques are minimally\n      required\
    \ as a prerequisite to establishment of a PPP connection,\n      either for the\
    \ specified interface or for the specified peer\n      entity.  Such configuration\
    \ facilities are necessary to prevent an\n      attacker from negotiating a reduced\
    \ security authentication\n      protocol, or no authentication at all, in an\
    \ attempt to circumvent\n      this authentication facility.\n      If an implementation\
    \ sends a Configure-Ack with this Configuration\n      Option, then it is agreeing\
    \ to authenticate with the specified\n      protocol.  An implementation receiving\
    \ a Configure-Ack with this\n      Configuration Option should expect the remote\
    \ end to authenticate\n      with the acknowledged protocol.\n      There is no\
    \ requirement that authentication be full duplex or that\n      the same authentication\
    \ protocol be used in both directions.  It\n      is perfectly acceptable for\
    \ different authentication protocols to\n      be used in each direction.  This\
    \ will, of course, depend on the\n      specific authentication protocols negotiated.\n\
    \      This document defines a simple Password Authentication Protocol in\n  \
    \    Section 4.  Development of other more secure protocols is\n      encouraged.\n\
    \   A summary of the Authentication-Type Configuration Option format is\n   shown\
    \ below.  The fields are transmitted from left to right.\n    0              \
    \     1                   2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Type      |    Length     |     Authentication-Type       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |    Data ...\n   +-+-+-+-+\n   Type\n      3\n   Length\n      >= 4\n   Authentication-Type\n\
    \      The Authentication-Type field is two octets and indicates the type\n  \
    \    of authentication protocol desired.  Values for the\n      Authentication-Type\
    \ are always the same as the PPP Data Link Layer\n      Protocol field values\
    \ for that same authentication protocol.  The\n      most up-to-date values of\
    \ the Authentication-Type field are\n      specified in \"Assigned Numbers\" [2].\
    \  Initial values are assigned\n      as follows:\n         Value (in hex)   \
    \       Protocol\n         c023                    Password Authentication Protocol\n\
    \   Data\n      The Data field is zero or more octets and contains additional\
    \ data\n      as determined by the particular authentication protocol.\n   Default\n\
    \      No authentication protocol necessary.\n"
- title: 2.4.  Magic-Number
  contents:
  - "2.4.  Magic-Number\n   Description\n      This Configuration Option provides\
    \ a way to detect looped-back\n      links and other Data Link Layer anomalies.\
    \  This Configuration\n      Option may be required by some other Configuration\
    \ Options such as\n      the Link-Quality-Monitoring Configuration Option.\n \
    \     Before this Configuration Option is requested, an implementation\n     \
    \ must choose its Magic-Number.  It is recommended that the Magic-\n      Number\
    \ be chosen in the most random manner possible in order to\n      guarantee with\
    \ very high probability that an implementation will\n      arrive at a unique\
    \ number.  A good way to choose a unique random\n      number is to start with\
    \ an unique seed. Suggested sources of\n      uniqueness include machine serial\
    \ numbers, other network hardware\n      addresses, time-of-day clocks, etc. \
    \ Particularly good random\n      number seeds are precise measurements of the\
    \ inter-arrival time of\n      physical events such as packet reception on other\
    \ connected\n      networks, server response time, or the typing rate of a human\n\
    \      user.  It is also suggested that as many sources as possible be\n     \
    \ used simultaneously.\n      When a Configure-Request is received with a Magic-Number\n\
    \      Configuration Option, the received Magic-Number should be compared\n  \
    \    with the Magic-Number of the last Configure-Request sent to the\n      peer.\
    \  If the two Magic-Numbers are different, then the link is\n      not looped-back,\
    \ and the Magic-Number should be acknowledged.  If\n      the two Magic-Numbers\
    \ are equal, then it is possible, but not\n      certain, that the link is looped-back\
    \ and that this Configure-\n      Request is actually the one last sent.  To determine\
    \ this, a\n      Configure-Nak should be sent specifying a different Magic-Number\n\
    \      value.  A new Configure-Request should not be sent to the peer\n      until\
    \ normal processing would cause it to be sent (i.e., until a\n      Configure-Nak\
    \ is received or the Restart timer runs out).\n      Reception of a Configure-Nak\
    \ with a Magic-Number different from\n      that of the last Configure-Nak sent\
    \ to the peer proves that a link\n      is not looped-back, and indicates a unique\
    \ Magic-Number.  If the\n      Magic-Number is equal to the one sent in the last\
    \ Configure-Nak,\n      the possibility of a loop-back is increased, and a new\
    \ Magic-\n      Number should be chosen.  In either case, a new Configure-Request\n\
    \      should be sent with the new Magic-Number.\n      If the link is indeed\
    \ looped-back, this sequence (transmit\n      Configure-Request, receive Configure-Request,\
    \ transmit Configure-\n      Nak, receive Configure-Nak) will repeat over and\
    \ over again.  If\n      the link is not looped-back, this sequence may occur\
    \ a few times,\n      but it is extremely unlikely to occur repeatedly.  More\
    \ likely,\n      the Magic-Numbers chosen at either end will quickly diverge,\n\
    \      terminating the sequence.  The following table shows the\n      probability\
    \ of collisions assuming that both ends of the link\n      select Magic-Numbers\
    \ with a perfectly uniform distribution:\n         Number of Collisions      \
    \  Probability\n         --------------------   ---------------------\n      \
    \           1              1/2**32    = 2.3 E-10\n                 2         \
    \     1/2**32**2 = 5.4 E-20\n                 3              1/2**32**3 = 1.3\
    \ E-29\n      Good sources of uniqueness or randomness are required for this\n\
    \      divergence to occur.  If a good source of uniqueness cannot be\n      found,\
    \ it is recommended that this Configuration Option not be\n      enabled; Configure-Requests\
    \ with the option should not be\n      transmitted and any Magic-Number Configuration\
    \ Options which the\n      peer sends should be either acknowledged or rejected.\
    \  In this\n      case, loop-backs cannot be reliably detected by the\n      implementation,\
    \ although they may still be detectable by the peer.\n      If an implementation\
    \ does transmit a Configure-Request with a\n      Magic-Number Configuration Option,\
    \ then it MUST NOT respond with a\n      Configure-Reject if its peer also transmits\
    \ a Configure-Request\n      with a Magic-Number Configuration Option.  That is,\
    \ if an\n      implementation desires to use Magic Numbers, then it MUST also\n\
    \      allow its peer to do so.  If an implementation does receive a\n      Configure-Reject\
    \ in response to a Configure-Request, it can only\n      mean that the link is\
    \ not looped-back, and that its peer will not\n      be using Magic-Numbers. \
    \ In this case, an implementation may act\n      as if the negotiation had been\
    \ successful (as if it had instead\n      received a Configure-Ack).\n      The\
    \ Magic-Number also may be used to detect looped-back links\n      during normal\
    \ operation as well as during Configuration Option\n      negotiation.  All Echo-Request,\
    \ Echo-Reply, Discard-Request, and\n      Link-Quality-Report LCP packets have\
    \ a Magic-Number field which\n      MUST normally be transmitted as zero, and\
    \ MUST normally be ignored\n      on reception.  However, once a Magic-Number\
    \ has been successfully\n      negotiated, an LCP implementation MUST begin transmitting\
    \ these\n      packets with the Magic-Number field set to its negotiated Magic-\n\
    \      Number.  Additionally, the Magic-Number field of these packets may\n  \
    \    be inspected on reception. All received Magic-Number fields should\n    \
    \  be equal to either zero or the peer's unique Magic-Number,\n      depending\
    \ on whether or not the peer negotiated one.  Reception of\n      a Magic-Number\
    \ field equal to the negotiated local Magic-Number\n      indicates a looped-back\
    \ link.  Reception of a Magic-Number other\n      than the negotiated local Magic-Number\
    \ or or the peer's negotiated\n      Magic-Number, or zero if the peer didn't\
    \ negotiate one, indicates\n      a link which has been (mis)configured for communications\
    \ with a\n      different peer.\n      Procedures for recovery from either case\
    \ are unspecified and may\n      vary from implementation to implementation. \
    \ A somewhat\n      pessimistic procedure is to assume an LCP Physical-Layer-Down\n\
    \      event and make an immediate transition to the Closed state.  A\n      further\
    \ Active-Open event will begin the process of re-\n      establishing the link,\
    \ which can't complete until the loop-back\n      condition is terminated and\
    \ Magic-Numbers are successfully\n      negotiated.  A more optimistic procedure\
    \ (in the case of a loop-\n      back) is to begin transmitting LCP Echo-Request\
    \ packets until an\n      appropriate Echo-Reply is received, indicating a termination\
    \ of\n      the loop-back condition.\n   A summary of the Magic-Number Configuration\
    \ Option format is shown\n   below.  The fields are transmitted from left to right.\n\
    \    0                   1                   2                   3\n    0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Type      |    Length     |          Magic-Number\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       Magic-Number (cont)         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Type\n      5\n   Length\n      6\n   Magic-Number\n      The Magic-Number\
    \ field is four octets and indicates a number which\n      is very likely to be\
    \ unique to one end of the link.  A Magic-\n      Number of zero is illegal and\
    \ must not be sent.\n   Default\n      None.\n"
- title: 2.5.  Link-Quality-Monitoring
  contents:
  - "2.5.  Link-Quality-Monitoring\n   Description\n      On some links it may be\
    \ desirable to determine when, and how\n      often, the link is dropping data.\
    \  This process is called Link\n      Quality Monitoring and is implemented by\
    \ periodically transmitting\n      Link-Quality-Report packets as described in\
    \ Section 3.  The Link-\n      Quality-Monitoring Configuration Option provides\
    \ a way to enable\n      the use of Link-Quality-Report packets, and also to negotiate\
    \ the\n      rate at which they are transmitted.  By default, Link Quality\n \
    \     Monitoring and the use of Link-Quality-Report packets is disabled.\n   A\
    \ summary of the Link-Quality-Monitoring Configuration Option format\n   is shown\
    \ below.  The fields are transmitted from left to right.\n    0              \
    \     1                   2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Type      |    Length     |        Reporting-Period\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       Reporting-Period (cont)     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Type\n      6\n   Length\n      6\n   Reporting-Period\n      The Reporting-Period\
    \ field is four octets and indicates the\n      maximum time in micro-seconds\
    \ that the remote end should wait\n      between transmission of LCP Link-Quality-Report\
    \ packets.  A value\n      of zero is illegal and should always be nak'd or rejected.\
    \  An LCP\n      implementation is always free to transmit LCP Link-Quality-Report\n\
    \      packets at a faster rate than that which was requested by, and\n      acknowledged\
    \ to, the remote end.\n   Default\n      None\n"
- title: 2.6.  Protocol-Field-Compression
  contents:
  - "2.6.  Protocol-Field-Compression\n   Description\n      This Configuration Option\
    \ provides a way to negotiate the\n      compression of the Data Link Layer Protocol\
    \ field.  By default,\n      all implementations must transmit standard PPP frames\
    \ with two\n      octet Protocol fields. However, PPP Protocol field numbers are\n\
    \      chosen such that some values may be compressed into a single octet\n  \
    \    form which is clearly distinguishable from the two octet form.\n      This\
    \ Configuration Option may be sent to inform the remote end\n      that you can\
    \ receive compressed single octet Protocol fields.\n      Compressed Protocol\
    \ fields may not be transmitted unless this\n      Configuration Option has been\
    \ received.\n      As previously mentioned, the Protocol field uses an extension\n\
    \      mechanism consistent with the ISO 3309 extension mechanism for the\n  \
    \    Address field; the Least Significant Bit (LSB) of each octet is\n      used\
    \ to indicate extension of the Protocol field.  A binary \"0\" as\n      the LSB\
    \ indicates that the Protocol field continues with the\n      following octet.\
    \  The presence of a binary \"1\" as the LSB marks\n      the last octet of the\
    \ Protocol field.  Notice that any number of\n      \"0\" octets may be prepended\
    \ to the field, and will still indicate\n      the same value (consider the two\
    \ representations for 3, 00000011\n      and 00000000 00000011).\n      In the\
    \ interest of simplicity, the standard PPP frame uses this\n      fact and always\
    \ sends Protocol fields with a two octet\n      representation.  Protocol field\
    \ values less than 256 (decimal) are\n      prepended with a single zero octet\
    \ even though transmission of\n      this, the zero and most significant octet,\
    \ is unnecessary.\n      However, when using low speed links, it is desirable\
    \ to conserve\n      bandwidth by sending as little redundant data as possible.\
    \  The\n      Protocol Compression Configuration Option allows a trade-off\n \
    \     between implementation simplicity and bandwidth efficiency.  If\n      successfully\
    \ negotiated, the ISO 3309 extension mechanism may be\n      used to compress\
    \ the Protocol field to one octet instead of two.\n      The large majority of\
    \ frames are compressible since data protocols\n      are typically assigned with\
    \ Protocol field values less than 256.\n      To guarantee unambiguous recognition\
    \ of LCP packets, the Protocol\n      field must never be compressed when sending\
    \ any LCP packet.  In\n      addition, PPP implementations must continue to be\
    \ robust and MUST\n      accept PPP frames with double-octet, as well as single-octet,\n\
    \      Protocol fields, and MUST NOT distinguish between them.\n      When a Protocol\
    \ field is compressed, the Data Link Layer FCS field\n      is calculated on the\
    \ compressed frame, not the original\n      uncompressed frame.\n   A summary\
    \ of the Protocol-Field-Compression Configuration Option\n   format is shown below.\
    \  The fields are transmitted from left to\n   right.\n    0                 \
    \  1\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Type      |    Length     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Type\n      7\n   Length\n      2\n   Default\n      Disabled.\n"
- title: 2.7.  Address-and-Control-Field-Compression
  contents:
  - "2.7.  Address-and-Control-Field-Compression\n   Description\n      This Configuration\
    \ Option provides a way to negotiate the\n      compression of the Data Link Layer\
    \ Address and Control fields.  By\n      default all implementations must transmit\
    \ frames with Address and\n      Control fields and must use the hexadecimal values\
    \ 0xff and 0x03\n      respectively.  Since these fields have constant values,\
    \ they are\n      easily compressed.  this Configuration Option may be used to\n\
    \      inform the remote end that you can receive compressed Address and\n   \
    \   Control fields.\n      Compressed Address and Control fields are formed by\
    \ simply\n      omitting them in all non-ambiguous cases.  Ambiguous frames may\n\
    \      not be compressed.  Ambiguous cases result when the two octets\n      following\
    \ the Address and Control fields have values that could be\n      interpreted\
    \ as valid Address and Control fields (i.e., 0xff,\n      0x03).  This can happen\
    \ when Protocol-Field-Compression is enabled\n      and the Protocol field is\
    \ compressed to one octet.  If the\n      Protocol value is 0xff, and the first\
    \ octet of the Information\n      field is 0x03, the result is ambiguous and the\
    \ Address and Control\n      fields must not be compressed on transmission.\n\
    \      On reception, the Address and Control fields are decompressed by\n    \
    \  examining the first two octets.  If they contain the values 0xff\n      and\
    \ 0x03, they are assumed to be the Address and Control fields.\n      If not,\
    \ it is assumed that the fields were compressed and were not\n      transmitted.\n\
    \      One additional case in which the Address and Control fields must\n    \
    \  never be compressed is when sending any LCP packet.  This rule\n      guarantees\
    \ unambiguous recognition of LCP packets.\n      When the Address and Control\
    \ fields are compressed, the Data Link\n      Layer FCS field is calculated on\
    \ the compressed frame, not the\n      original uncompressed frame.\n   A summary\
    \ of the Address-and-Control-Field-Compression configuration\n   option format\
    \ is shown below.  The fields are transmitted from left\n   to right.\n    0 \
    \                  1\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Type      |    Length     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Type\n      8\n   Length\n      2\n   Default\n      Not compressed.\n"
- title: 3.  Link Quality Monitoring
  contents:
  - "3.  Link Quality Monitoring\n   Data communications links are rarely perfect.\
    \ Packets can be dropped\n   or corrupted for various reasons (line noise, equipment\
    \ failure,\n   buffer overruns, etc.).  Sometimes, it is desirable to determine\n\
    \   when, and how often, the link is dropping data.  Routers, for\n   example,\
    \ may want to temporarily allow another route to take\n   precedence.  An implementation\
    \ may also have the option of\n   disconnecting and switching to an alternate\
    \ link.  The process of\n   determining data loss is called \"Link Quality Monitoring\"\
    .\n"
- title: 3.1.  Design Motivation
  contents:
  - "3.1.  Design Motivation\n   There are many different ways to measure link quality,\
    \ and even more\n   ways to react to it.  Rather than specifying a single scheme,\
    \ Link\n   Quality Monitoring is divided into a \"mechanism\" and a \"policy\"\
    .  PPP\n   fully specifies the \"mechanism\" for Link Quality Monitoring by\n\
    \   defining the LCP Link-Quality-Report (LQR) packet and specifying a\n   procedure\
    \ for its use.  PPP does NOT specify a Link Quality\n   Monitoring \"policy\"\
    \ -- how to judge link quality or what to do when\n   it is inadequate.  That\
    \ is left as an implementation decision, and\n   can be different at each end\
    \ of the link.  Implementations are\n   allowed, and even encouraged, to experiment\
    \ with various link quality\n   policies.  The Link Quality Monitoring mechanism\
    \ specification\n   insures that two implementations with different policies may\n\
    \   communicate and interoperate.\n   To allow flexible policies to be implemented,\
    \ the PPP Link Quality\n   Monitoring mechanism measures data loss in units of\
    \ packets, octets,\n   and Link-Quality-Reports.  Each measurement is made separately\
    \ for\n   each half of the link, both inbound and outbound.  All measurements\n\
    \   are communicated to both ends of the link so that each end of the\n   link\
    \ can implement its own link quality policy for both its outbound\n   and inbound\
    \ links.\n   Finally, the Link Quality Monitoring protocol is designed to be\n\
    \   implementable on many different kinds of systems. Although it may be\n   common\
    \ to implement PPP (and especially Link Quality Monitoring) as a\n   single software\
    \ process, multi-process implementations with hardware\n   support are also envisioned.\
    \ The PPP Link Quality Monitoring\n   mechanism provides for this by careful definition\
    \ of the Link-\n   Quality-Report packet format, and by specifiying reference\
    \ points for\n   all data transmission and reception measurements.\n"
- title: 3.2.  Design Overview
  contents:
  - "3.2.  Design Overview\n   Each Link Quality Monitoring implementation maintains\
    \ counts of the\n   number of packets and octets transmitted and successfully\
    \ received,\n   and periodically transmits this information to its peer in a Link-\n\
    \   Quality-Report packet.  These packets contain three sections: a\n   Header\
    \ section, a Counters section, and a Measurements section.\n   The Header section\
    \ of the packet consists of the normal LCP Link\n   Maintenance packet header\
    \ including Code, Identifier, Length and\n   Magic-Number fields.\n   The Counters\
    \ section of the packet consists of four counters, and\n   provides the information\
    \ necessary to measure the quality of the\n   link.  The LQR transmitter fills\
    \ in two of these counters: Out-Tx-\n   Packets-Ctr and Out-Tx-Octets-Ctr (described\
    \ later).  The LQR\n   receiver fills in the two remaining counters: In-Rx-Packets-Ctr\
    \ and\n   In-Rx-Octets-Ctr (described later).  These counters are similar to\n\
    \   sequence numbers; they are constantly increasing to give a \"relative\"\n\
    \   indication of the number of packets and octets communicated across\n   the\
    \ outbound link.  By comparing the values in successive Link-\n   Quality-Reports,\
    \ an LQR receiver can compute the \"absolute\" number of\n   packets and octets\
    \ communicated across its inbound link. Comparing\n   these absolute numbers then\
    \ gives an indication of an inbound link's\n   quality.  Relative numbers, rather\
    \ than absolute, are transmitted\n   because they greatly simplify link synchronization;\
    \ an implementation\n   merely waits to receive two LQR packets.\n   The Measurements\
    \ section of the packet consists of six state\n   variables: In-Tx-LQRs, Last-In-Id,\
    \ In-Tx-Packets, In-Tx-Octets, In-\n   Rx-Packets, and In-Rx-Octets (described\
    \ later).  This section allows\n   an implementation to report inbound link quality\
    \ measurements to its\n   peer (for which the report will instead indicate outbound\
    \ link\n   quality) by transmitting the absolute, rather than relative, number\n\
    \   of LQRs, packets, and octets communicated across the inbound link.\n   These\
    \ values are calculated by observing the Counters section of the\n   Link-Quality-Report\
    \ packets received on the inbound link.  Absolute\n   numbers may be used in this\
    \ section without synchronization problems\n   because it is necessary to receive\
    \ only one LQR packet to have valid\n   information.\n   Link Quality Monitoring\
    \ is described in more detail in the following\n   sections.  First, a description\
    \ of the processes comprising the Link\n   Quality Monitoring mechanism is presented.\
    \  This is followed by the\n   packet and byte counters maintained; the measurements,\
    \ calculations,\n   and state variables used; the format of the Link-Quality-Report\n\
    \   packet; some policy suggestions; and, finally, an example link\n   quality\
    \ calculation.\n"
- title: 3.3.  Processes
  contents:
  - "3.3.  Processes\n   The PPP Link Quality Monitoring mechanism is described using\
    \ a\n   \"logical process\" model. As shown below, there are five logical\n  \
    \ processes duplicated at each end of the duplex link.\n   +---------+   +-------+\
    \   +----+ Outbound\n   |         |-->|  Mux  |-->| Tx |=========>\n   | Link-\
    \   |   +-------+   +----+\n   | Manager |\n   |         |   +-------+   +----+\
    \ Inbound\n   |         |<--| Demux |<--| Rx |<=========\n   +---------+   +-------+\
    \   +----+\n   Link-Manager\n      The Link-Manager process transmits and receives\
    \ Link-Quality-\n      Reports, and implements the desired link quality policy.\
    \  LQR\n      packets are transmitted at a constant rate, which is negotiated\
    \ by\n      the LCP Link-Quality-Monitoring Configuration Option.  The Link-\n\
    \      Manager process fills in only the Header and Measurements sections\n  \
    \    of the packet; the Counters section of the packet is filled in by\n     \
    \ the Tx and Rx processes.\n   Mux\n      The Mux process multiplexes packets\
    \ from the various protocols\n      (e.g., LCP, IP, XNS, etc.) into a single,\
    \ sequential, and\n      prioritized stream of packets.  Link-Quality-Report packets\
    \ MUST\n      be given the highest possible priority to insure that link quality\n\
    \      information is communicated in a timely manner.\n   Tx\n      The Tx process\
    \ maintains the counters Out-Tx-Packets-Ctr and Out-\n      Tx-Octets-Ctr which\
    \ are used to measure the amount of data which\n      is transmitted on the outbound\
    \ link.  When Tx processes a Link-\n      Quality-Report packet, it inserts the\
    \ values of these counters\n      into the Counters section of the packet.  Because\
    \ these counters\n      represent relative, rather than absolute, values, the\
    \ question of\n      when to update the counters, before or after they are inserted\n\
    \      into a Link-Quality-Report packet, is left as an implementation\n     \
    \ decision. However, an implementation MUST make this decision the\n      same\
    \ way every time.  The Tx process MUST follow the Mux process\n      so that packets\
    \ are counted in the order transmitted to the link.\n   Rx\n      The Rx process\
    \ maintains the counters In-Rx-Packets-Ctr and In-\n      Rx-Octets-Ctr which\
    \ are used to measure the amount of data which\n      is received by the inbound\
    \ link.  When Rx processes a Link-\n      Quality-Report packet, it inserts the\
    \ values of these counters\n      into the Counters section of the packet.  Again,\
    \ the question of\n      when to update the counters, before or after they are\
    \ inserted\n      into a Link-Quality-Report packet, is left as an implementation\n\
    \      decision which MUST be made consistently the same way.\n   Demux\n    \
    \  The Demux process demultiplexes packets for the various protocols.\n      The\
    \ Demux process MUST follow the Rx process so that packets are\n      counted\
    \ in the order received from the link.\n"
- title: 3.4.  Counters
  contents:
  - "3.4.  Counters\n   In order to fill in the Counters section of a Link-Quality-Report\n\
    \   packet, Link Quality Monitoring requires the implementation of one\n   8-bit\
    \ unsigned, and four 32-bit unsigned, monotonically increasing\n   counters. \
    \ These counters may be reset to any initial value before\n   the first Link-Quality-Report\
    \ is transmitted, but MUST NOT be reset\n   again until LCP has left the Open\
    \ state.  Counters wrap to zero when\n   their maximum value is reached (for 32\
    \ bit counters: 0xffffffff + 1 =\n   0).\n   Out-Identifier-Ctr\n      Out-Identifier-Ctr\
    \ is an 8-bit counter maintained by the Link-\n      Manager process which increases\
    \ by one for each transmitted Link-\n      Quality-Report packet.\n   Out-Tx-Packets-Ctr\n\
    \      Out-Tx-Packets-Ctr is a 32-bit counter maintained by the Tx\n      process\
    \ which increases by one for each transmitted Data Link\n      Layer packet.\n\
    \   Out-Tx-Octets-Ctr\n      Out-Tx-Octets-Ctr is a 32-bit counter maintained\
    \ by the Tx process\n      which increases by one for each octet in a transmitted\
    \ Data Link\n      Layer packet.  All octets which are included in the FCS\n \
    \     calculation MUST be counted, as should the FCS octets themselves.\n    \
    \  All other octets MUST NOT be counted.\n   In-Rx-Packets-Ctr\n      In-Rx-Packets-Ctr\
    \ is a 32-bit counter maintained by the Rx process\n      which increases by one\
    \ for each successfully received Data Link\n      Layer packet.  Packets with\
    \ incorrect FCS fields or other problems\n      MUST not be counted.\n   In-Rx-Octets-Ctr\n\
    \      In-Rx-Octets-Ctr is a 32-bit counter maintained by the Rx process\n   \
    \   which increases by one for each octet in a successfully received\n      Data\
    \ Link Layer packet.  All octets which are included in an FCS\n      calculation\
    \ MUST be counted, as should the FCS octets themselves.\n      All other octets\
    \ MUST NOT be counted.\n"
- title: 3.5.  Measurements, Calculations, State Variables
  contents:
  - "3.5.  Measurements, Calculations, State Variables\n   In order to fill in the\
    \ Measurements section of a Link-Quality-Report\n   packet, Link Quality Monitoring\
    \ requires the Link-Manager process to\n   make a number of calculations and keep\
    \ a number of state variables.\n   These calculations are made, and these state\
    \ variables updated, each\n   time a Link-Quality-Report packet is received from\
    \ the inbound link.\n   In-Tx-LQRs\n      In-Tx-LQRs is an 8-bit state variable\
    \ which indicates the number\n      of Link-Quality-Report packets which the peer\
    \ had to transmit in\n      order for the local end to receive exactly one LQR.\
    \  In-Tx-LQRs\n      defines the length of the \"period\" over which In-Tx-Packets,\
    \ In-\n      Tx-Octets, In-Rx-Packets, and In-Rx-Octets were measured.  In-Tx-\n\
    \      LQRs is calculated by subtracting Last-In-Id from the received\n      Identifier.\
    \  If more than 255 LQRs in a row are lost, In-Tx-LQRs\n      will be ambiguous\
    \ since the Identifier field and all state\n      variables based on it are only\
    \ 8 bits.  It is assumed that the\n      Link Quality Monitoring policy will be\
    \ robust enough to handle\n      this case (it should probably close down the\
    \ link long before this\n      happens).\n   Last-In-Id\n      Last-In-Id is an\
    \ 8-bit state variable which stores the value of\n      the last received Identifier.\
    \  Last-In-Id should be updated after\n      In-Tx-LQRs has been calculated.\n\
    \   In-Tx-Packets\n      In-Tx-Packets is a 32-bit state variable which indicates\
    \ the\n      number of packets which were transmitted on the inbound link\n  \
    \    during the last period.  In-Tx-Packets is calculated by\n      subtracting\
    \ Last-Out-Tx-Packets-Ctr from the received Out-Tx-\n      Packets-Ctr.\n   Last-Out-Tx-Packets-Ctr\n\
    \      Last-Out-Tx-Packets-Ctr is a 32-bit state variable which stores\n     \
    \ the value of the last received Out-Tx-Packets-Ctr.  Last-Out-Tx-\n      Packets-Ctr\
    \ should be updated after In-Tx-Packets has been\n      calculated.\n   In-Tx-Octets\n\
    \      In-Tx-Octets is a 32-bit state variable which indicates the number\n  \
    \    of octets which were transmitted on the inbound link during the\n      last\
    \ period.  In-Tx-Octets is calculated by subtracting Last-Out-\n      Tx-Octets-Ctr\
    \ from the received Out-Tx-Octets-Ctr.\n   Last-Out-Tx-Octets-Ctr\n      Last-Out-Tx-Octets-Ctr\
    \ is a 32-bit state variable which stores the\n      value of the last received\
    \ Out-Tx-Octets-Ctr.  Last-Out-Tx-\n      Octets-Ctr should be updated after In-Tx-Octets\
    \ has been\n      calculated.\n   In-Rx-Packets\n      In-Rx-Packets is a 32-bit\
    \ state variable which indicates the\n      number of packets which were received\
    \ on the inbound link during\n      the last period.  In-Rx-Packets is calculated\
    \ by subtracting\n      Last-In-Rx-Packets-Ctr from the received In-Rx-Packets-Ctr.\n\
    \   Last-In-Rx-Packets-Ctr\n      Last-In-Rx-Packets-Ctr is a 32-bit state variable\
    \ which stores the\n      value of the last received In-Rx-Packets-Ctr.  Last-In-Rx-\n\
    \      Packets-Ctr should be updated after In-Rx-Packets has been\n      calculated.\n\
    \   In-Rx-Octets\n      In-Rx-Octets is a 32-bit state variable which indicates\
    \ the number\n      of octets which were received on the inbound link during the\
    \ last\n      period.  In-Rx-Octets is calculated by subtracting Last-In-Rx-\n\
    \      Octets-Ctr from the received In-Rx-Octets-Ctr.\n   Last-In-Rx-Octets-Ctr\n\
    \      Last-In-Rx-Octets-Ctr is a 32-bit state variable which stores the\n   \
    \   value of the last received In-Rx-Octets-Ctr.  Last-In-Rx-Octets-\n      Ctr\
    \ should be updated after In-Rx-Octets has been calculated.\n   Measurements-Valid\n\
    \      Measurements-Valid is a 1-bit boolean state variable which\n      indicates\
    \ whether or not the In-Tx-Packets, In-Tx-Octets, In-Rx-\n      Packets, and In-Rx-Octets\
    \ state variables contain valid\n      measurements.  These measurements cannot\
    \ be considered valid until\n      two or more Link-Quality-Report packets have\
    \ been received on the\n      inbound link.  This bit should be reset when LCP\
    \ reaches the Open\n      state and should be set after the receipt of exactly\
    \ two LQRs.\n"
- title: 3.6.  Link-Quality-Report Packet Format
  contents:
  - "3.6.  Link-Quality-Report Packet Format\n   A Summary of the Link-Quality-Report\
    \ packet format is shown below.\n   The fields are transmitted from left to right.\
    \  The Code, Identifier,\n   Length, and Magic-Number fields make up the normal\
    \ LCP Link\n   Maintenance packet header; the In-Tx-LQRS, Last-In-Id, V, In-Tx-\n\
    \   Packets, In-Tx-Octets, In-Rx-Packets, In-Rx-Octets fields contain\n   digested\
    \ absolute measurements; and the Out-Tx-Packets-Ctr, Out-Tx-\n   Octets-Ctr, In-Rx-Packets-Ctr,\
    \ and In-Rx-Octets-Ctr fields contain\n   raw relative counts.  Note that as transmitted\
    \ over the link, this\n   packet format does not include the In-Rx-Packets-Ctr\
    \ and In-Rx-\n   Octets-Ctr fields which are logically appended to the packet\
    \ by the\n   Rx process after reception on the inbound link.\n    0          \
    \         1                   2                   3\n    0 1 2 3 4 5 6 7 8 9 0\
    \ 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Code      |  Identifier   |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                         Magic-Number                          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  In-Tx-LQRs   |   Last-In-Id  |           Reserved          |V|\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                         In-Tx-Packets                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                         In-Tx-Octets                          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                         In-Rx-Packets                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                         In-Rx-Octets                          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                       Out-Tx-Packets-Ctr                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                       Out-Tx-Octets-Ctr                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   /\n   /\n   /\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                        In-Rx-Packets-Ctr                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                        In-Rx-Octets-Ctr                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Code\n      12 for Link-Quality-Report.\n   Identifier\n      The Identifier\
    \ field is one octet and indicates the sequence\n      number for this Link-Quality-Report.\
    \ The Identifier field is\n      copied from the Out-Identifier-Ctr counter on\
    \ transmission.  On\n      reception, the Identifier field is used to calculate\
    \ In-Tx-LQRs\n      and is then stored in Last-In-Id.\n      The Link-Quality-Report\
    \ Identifier sequence number space MUST be\n      separate from that of all other\
    \ LCP packets; for example,\n      transmission of an LCP Echo-Request must not\
    \ cause the Out-\n      Identifier-Ctr counter to be incremented.\n   Length\n\
    \      The Length field is two octets and indicates the length of the LQM\n  \
    \    packet including the Code, Identifier, Length and all defined\n      fields.\
    \ Octets outside the range of the length field should be\n      treated as Data\
    \ Link Layer padding and should be ignored on\n      reception.  In order for\
    \ the correct In-Tx-Octets and In-Rx-Octets\n      values to be calculated, Link-Quality-Reports\
    \ MUST be consistently\n      transmitted with the same amount of padding.\n \
    \  Magic-Number\n      The Magic-Number field is four octets and aids in detecting\n\
    \      looped-back links.  Unless modified by a Configuration Option, the\n  \
    \    Magic-Number MUST always be transmitted as zero and MUST always be\n    \
    \  ignored on reception. If Magic-Numbers have been negotiated,\n      incoming\
    \ LQM packets should be checked to make sure that the local\n      end is not\
    \ seeing its own Magic-Number and thus a looped-back\n      link.\n   In-Tx-LQRs\n\
    \      The In-Tx-LQRs field is one octet and indicates the number of\n      periods\
    \ covered by the Measurements section of this Link-Quality-\n      Report.  The\
    \ In-Tx-LQRs field is copied from the In-Tx-LQRs state\n      variable on transmission.\n\
    \   Last-In-Id\n      The Prev-In-Id field is one octet and indicates the age\
    \ of the\n      Measurements section of this Link-Quality-Report. The Last-In-Id\n\
    \      field is copied from the Last-In-Id field on transmission.  On\n      reception,\
    \ the Last-In-Id field may be compared with the Out-\n      Identifier-Ctr to\
    \ determine how many, if any, outbound Link-\n      Quality-Reports have been\
    \ lost.\n   V\n      The V field is 1 bit and indicates whether or not the Measurements\n\
    \      section of this Link-Quality-Report is valid.  The V field is\n      copied\
    \ from the Measurements-Valid state variable on transmission.\n      If the V\
    \ field is not set to 1, then the In-Tx-LQRs, Last-In-Id,\n      In-Tx-Packets,\
    \ In-Tx-Octets, In-Rx-Packets and In-Rx-Octets fields\n      should be ignored.\n\
    \   Reserved\n      The Reserved field is 15 bits and is intended to pad the remaining\n\
    \      packet fields to even four-octet boundaries for the convenience of\n  \
    \    hardware implementations. The Reserved field should always be\n      transmitted\
    \ as zero and ignored on reception.\n   In-Tx-Packets\n      The In-Tx-Packets\
    \ field is four octets and indicates the number of\n      packets transmitted\
    \ on the inbound link of the Link-Quality-Report\n      transmitter during the\
    \ last measured period.  The In-Tx-Packets\n      field is copied from the In-Tx-Packets\
    \ state variable on\n      transmission.\n   In-Tx-Octets\n      The In-Tx-Octets\
    \ field is four octets and indicates the number of\n      octets transmitted on\
    \ the inbound link of the Link-Quality-Report\n      transmitter during the last\
    \ measured period.  The In-Tx-Octets\n      field is copied from the In-Tx-Octets\
    \ state variable on\n      transmission.\n   In-Rx-Packets\n      The In-Rx-Packets\
    \ field is four octets and indicates the number of\n      packets received on\
    \ the inbound link of the Link-Quality-Report\n      transmitter during the last\
    \ measured period.  The In-Rx-Packets\n      field is copied from the In-Rx-Packets\
    \ state variable on\n      transmission.\n   In-Rx-Octets\n      The In-Rx-Octets\
    \ field is four octets and indicates the number of\n      octets received on the\
    \ inbound link of the Link-Quality-Report\n      transmitter during the last measured\
    \ period.  The In-Rx-Octets\n      field is copied from the In-Rx-Octets state\
    \ variable on\n      transmission.\n   Out-Tx-Packets\n      The Out-Tx-Packets\
    \ field is four octets and is used to calculate\n      the number of packets transmitted\
    \ on the outbound link of the\n      Link-Quality-Report transmitter during a\
    \ period.  The Out-Tx-\n      Packets field is copied from the Out-Tx-Packets-Ctr\
    \ counter on\n      transmission.\n   Out-Tx-Octets\n      The Out-Tx-Octets field\
    \ is four octets and is used to calculate\n      the number of octets transmitted\
    \ on the outbound link of the\n      Link-Quality-Report transmitter during a\
    \ period.  The Out-Tx-\n      Octets field is copied from the Out-Tx-Octets-Ctr\
    \ counter on\n      transmission.\n   In-Rx-Packets\n      The In-Rx-Packets field\
    \ is four octets and is used to calculate\n      the number of packets received\
    \ on the inbound link of the Link-\n      Quality-Report receiver during a period.\
    \  The In-Rx-Packets field\n      is copied from the In-Rx-Packets-Ctr counter\
    \ on reception.  The\n      In-Rx-Packets is not shown because it is not actually\
    \ transmitted\n      over the link.  Rather, it is logically appended (in an\n\
    \      implementation dependent manner) to the packet by the\n      implementation's\
    \ Rx process.\n   In-Rx-Octets\n      The In-Rx-Octets field is four octets and\
    \ is used to calculate the\n      number of octets  received on the inbound link\
    \ of the Link-\n      Quality-Report receiver during a period.  The In-Rx-Octets\
    \ field\n      is copied from the In-Rx-Octets-Ctr counter on reception.  The\n\
    \      In-Rx-Octets is not shown because it is not actually transmitted\n    \
    \  over the link.  Rather, it is logically appended (in an\n      implementation\
    \ dependent manner) to the packet by the\n      implementation's Rx process.\n"
- title: 3.7.  Policy Suggestions
  contents:
  - "3.7.  Policy Suggestions\n   Link-Quality-Report packets provide a mechanism\
    \ to determine the link\n   quality, but it is up to each implementation to decide\
    \ when the link\n   is usable.  It is recommended that this policy implement some\
    \ amount\n   of hysteresis so that the link does not bounce up and down.  A\n\
    \   particularly good policy is to use a K out of N algorithm.  In such\n   an\
    \ algorithm, there must be K successes out of the last N periods for\n   the link\
    \ to be considered of good quality.\n   Procedures for recovery from poor quality\
    \ links are unspecified and\n   may vary from implementation to implementation.\
    \  A suggested approach\n   is to immediately close all other Network-Layer protocols\
    \ (i.e.,\n   cause IPCP to transmit a Terminate-Req), but to continue transmitting\n\
    \   Link-Quality-Reports.  Once the link quality again reaches an\n   acceptable\
    \ level, Network-Layer protocols can be reconfigured.\n"
- title: 3.8.  Example
  contents:
  - "3.8.  Example\n   An example may be helpful.  Assume that Link-Manager implementation\
    \ A\n   transmits a Link-Quality-Report which is received by Link-Manager\n  \
    \ implementation B at time t0 with the following values:\n      Out-Tx-Packets\
    \    5\n      Out-Tx-Octets   100\n      In-Rx-Packets     3\n      In-Rx-Octets\
    \     70\n   Assume that A then transmits 20 IP packets with 200 octets, of which\n\
    \   15 packets and 150 octets are received by B.  At time t1, A transmits\n  \
    \ another LQR which is received by B as follows:\n      Out-Tx-Packets   26 (5\
    \ old, plus 20 IP, plus 1 LQR)\n      Out-Tx-Octets   342 (42 for LQR)\n     \
    \ In-Rx-Packets    19\n      In-Rx-Octets    262\n   Implementation B can now\
    \ calculate the number of packets and octets\n   transmitted, received and lost\
    \ on its inbound link as follows:\n      In-Tx-Packets   =  26 -   5 =  21\n \
    \     In-Tx-Octets    = 342 - 100 = 242\n      In-Rx-Packets   =  10 -   3 = \
    \ 16\n      In-Rx-Octets    = 262 -  70 = 192\n      In-Lost-Packets =  21 - \
    \ 16 =   5\n      In-Lost-Octets  = 242 - 192 =  50\n   After doing these calculations,\
    \ B evaluates the measurements in what\n   ever way its implemented policy specifies.\
    \  Also, the next time that\n   B transmits an LQR to A, it will report these\
    \ values in the\n   Measurements section, thereby allowing A to evaluate these\
    \ same\n   measurements.\n"
- title: 4.  Password Authentication Protocol
  contents:
  - "4.  Password Authentication Protocol\n   The Password Authentication Protocol\
    \ (PAP) may be used to\n   authenticate a peer by verifying the identity of the\
    \ remote end of\n   the link.  Use of the PAP must first be negotiated using the\
    \ LCP\n   Authentication-Type Configuration Option.  Successful negotiation\n\
    \   adds an additional Authentication phase to the Link Control Protocol,\n  \
    \ after the Link Quality Determination phase, and before the Network\n   Layer\
    \ Protocol Configuration Negotiation phase.  PAP packets received\n   before the\
    \ Authentication phase is reached should be silently\n   discarded.  The Authentication\
    \ phase is exited once an Authenticate-\n   Ack packet is sent or received.\n\
    \   PAP is intended for use primarily by hosts and routers that connect\n   via\
    \ switched circuits or dial-up lines to a PPP network server.  The\n   server\
    \ can then use the identification of the connecting host or\n   router in the\
    \ selection of options for network layer negotiations or\n   failing authentication,\
    \ drop the connection.\n   Note that PAP is not a strong authentication method.\
    \  Passwords are\n   passed over the circuit in the clear and there is no protection\
    \ from\n   repeated trial and error attacks.  Work is currently underway on more\n\
    \   secure authentication methods for PPP and other protocols.  It is\n   strongly\
    \ recommended to switch to these methods when they become\n   available.\n"
- title: 4.1.  Packet Format
  contents:
  - "4.1.  Packet Format\n   Exactly one Password Authentication Protocol packet is\
    \ encapsulated\n   in the Information field of PPP Data Link Layer frames where\
    \ the\n   protocol field indicates type hex c023 (Password Authentication\n  \
    \ Protocol).  A summary of the Password Authentication Protocol packet\n   format\
    \ is shown below.  The fields are transmitted from left to\n   right.\n    0 \
    \                  1                   2                   3\n    0 1 2 3 4 5\
    \ 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Code      |  Identifier   |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |    Data ...\n   +-+-+-+-+\n   Code\n      The Code field is one octet and\
    \ identifies the type of PAP packet.\n      PAP Codes are assigned as follows:\n\
    \         1       Authenticate\n         2       Authenticate-Ack\n         3\
    \       Authenticate-Nak\n   Identifier\n      The Identifier field is one octet\
    \ and aids in matching requests\n      and replies.\n   Length\n      The Length\
    \ field is two octets and indicates the length of the PAP\n      packet including\
    \ the Code, Identifier, Length and Data fields.\n      Octets outside the range\
    \ of the Length field should be treated as\n      Data Link Layer padding and\
    \ should be ignored on reception.\n   Data\n      The Data field is zero or more\
    \ octets.  The format of the Data\n      field is determined by the Code field.\n"
- title: 4.2.  Authenticate
  contents:
  - "4.2.  Authenticate\n   Description\n      The Authenticate packet is used to\
    \ begin the Password\n      Authentication Protocol.  An implementation having\
    \ sent a LCP\n      Configure-Ack packet with an Authentication-Type Configuration\n\
    \      Option further specifying the Password Authentication Protocol\n      must\
    \ send an Authenticate packet during the Authentication phase.\n      An implementation\
    \ receiving a Configure-Ack with said\n      Configuration Option should expect\
    \ the remote end to send an\n      Authenticate packet during this phase.\n  \
    \    An Authenticate packet is sent with the Code field set to 1\n      (Authenticate)\
    \ and the Peer-ID and Password fields filled as\n      desired.\n      Upon reception\
    \ of an Authenticate, some type of Authenticate reply\n      MUST be transmitted.\n\
    \   A summary of the Authenticate packet format is shown below.  The\n   fields\
    \ are transmitted from left to right.\n    0                   1             \
    \      2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\
    \ 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Code      |  Identifier   |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | Peer-ID Length|  Peer-Id ...\n   +-+-+-+-+-+-+-+-+-+-+-+-+\n   | Passwd-Length\
    \ |  Password  ...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+\n   Code\n      1 for Authenticate.\n\
    \   Identifier\n      The Identifier field is one octet and aids in matching requests\n\
    \      and replies.  The Identifier field should be changed each time a\n    \
    \  Authenticate is transmitted which is different from the preceding\n      request.\n\
    \   Peer-ID-Length\n      The Peer-ID-Length field is one octet and indicates\
    \ the length of\n      the Peer-ID field\n   Peer-ID\n      The Peer-ID field\
    \ is zero or more octets and indicates the name of\n      the peer to be authenticated.\n\
    \   Passwd-Length\n      The Passwd-Length field is one octet and indicates the\
    \ length of\n      the Password field\n   Password\n      The Password field is\
    \ zero or more octets and indicates the\n      password to be used for authentication.\n"
- title: 4.3.  Authenticate-Ack
  contents:
  - "4.3.  Authenticate-Ack\n   Description\n      If the Peer-ID/Password pair received\
    \ in an Authenticate is both\n      recognizable and acceptable, then a PAP implementation\
    \ should\n      transmit a PAP packet with the Code field set to 2 (Authenticate-\n\
    \      Ack), the Identifier field copied from the received Authenticate,\n   \
    \   and the Message field optionally filled with an ASCII message.\n   A summary\
    \ of the Authenticate-Ack packet format is shown below.  The\n   fields are transmitted\
    \ from left to right.\n    0                   1                   2         \
    \          3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\
    \ 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Code      |  Identifier   |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  Msg-Length   |  Message  ...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-\n   Code\n\
    \      2 for Authenticate-Ack.\n   Identifier\n      The Identifier field is one\
    \ octet and aids in matching requests\n      and replies.  The Identifier field\
    \ MUST be copied from the\n      Identifier field of the Authenticate which caused\
    \ this\n      Authenticate-Ack.\n   Msg-Length\n      The Msg-Length field is\
    \ one octet and indicates the length of the\n      Message field\n   Message\n\
    \      The Message field is zero or more octets and indicates an ASCII\n     \
    \ message.\n"
- title: 4.4.  Authenticate-Nak
  contents:
  - "4.4.  Authenticate-Nak\n   Description\n      If the Peer-ID/Password pair received\
    \ in a Authenticate is not\n      recognizable or acceptable, then a PAP implementation\
    \ should\n      transmit a PAP packet with the Code field set to 3 (Authenticate-\n\
    \      Nak), the Identifier field copied from the received Authenticate,\n   \
    \   and the Message field optionally filled with an ASCII message.\n   A summary\
    \ of the Authenticate-Nak packet format is shown below.  The\n   fields are transmitted\
    \ from left to right.\n    0                   1                   2         \
    \          3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\
    \ 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Code      |  Identifier   |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  Msg-Length   |  Message  ...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-\n   Code\n\
    \      3 for Authenticate-Nak.\n   Identifier\n      The Identifier field is one\
    \ octet and aids in matching requests\n      and replies.  The Identifier field\
    \ MUST be copied from the\n      Identifier field of the Authenticate which caused\
    \ this\n      Authenticate-Nak.\n   Msg-Length\n      The Msg-Length field is\
    \ one octet and indicates the length of the\n      Message field\n   Message\n\
    \      The Message field is zero or more octets and indicates an ASCII\n     \
    \ message.\n"
- title: 5.  IP Control Protocol (IPCP) Configuration Options
  contents:
  - '5.  IP Control Protocol (IPCP) Configuration Options

    '
- title: IPCP Configuration Options allow negotiatiation of desirable Internet
  contents:
  - 'IPCP Configuration Options allow negotiatiation of desirable Internet

    '
- title: Protocol parameters.  Negotiable modifications proposed in this document
  contents:
  - 'Protocol parameters.  Negotiable modifications proposed in this document

    '
- title: include IP addresses and compression protocols.
  contents:
  - 'include IP addresses and compression protocols.

    '
- title: The initial proposed values for the IPCP Configuration Option Type field
  contents:
  - 'The initial proposed values for the IPCP Configuration Option Type field

    '
- title: '(see [1]) are assigned as follows:'
  contents:
  - "(see [1]) are assigned as follows:\n   1       IP-Addresses\n   2       Compression-Type\n"
- title: 5.1.  IP-Addresses
  contents:
  - "5.1.  IP-Addresses\n   Description\n      This Configuration Option provides\
    \ a way to negotiate the IP\n      addresses to be used on each end of the link.\
    \  By default, no IP\n      addresses are assigned to either end.  An address\
    \ specified as\n      zero shall be interpreted as requesting the remote end to\
    \ specify\n      the address.  If an implementation allows the assignment of\n\
    \      multiple IP addresses, then it may include multiple IP Address\n      Configuration\
    \ Options in its Configure-Request packets.  An\n      implementation receiving\
    \ a Configure-Request specifying multiple\n      IP Address Configuration Options\
    \ may send a Configure-Reject\n      specifying one or more of the specified IP\
    \ Addresses.  An\n      implementation which desires that no IP addresses be assigned\n\
    \      (such as a \"half-gateway\") may reject all IP Address Configuration\n\
    \      Options.\n   A summary of the IP-Addresses Configuration Option format\
    \ is shown\n   below.  The fields are transmitted from left to right.\n    0 \
    \                  1                   2                   3\n    0 1 2 3 4 5\
    \ 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Type      |    Length     |     Source-IP-Address\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     Source-IP-Address (cont)      |  Destination-IP-Address\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    Destination-IP-Address (cont)  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Type\n      1\n   Length\n      10\n   Source-IP-Address\n      The four octet\
    \ Source-IP-Address is the desired local address of\n      the sender of a Configure-Request.\
    \  In a Configure-Ack,\n      Configure-Nak or Configure-Reject, the Source-IP-Address\
    \ is the\n      remote address of the sender, and is thus a local address with\n\
    \      respect to the Configuration Option receiver.\n   Destination-IP-Address\n\
    \      The four octet Destination-IP-Address is the remote address with\n    \
    \  respect to the sender of a Configure-Request.  In a Configure-Ack,\n      Configure-Nak\
    \ or Configure-Reject, the Destination-IP-Address is\n      the local address\
    \ of the sender, and is thus a remote address with\n      respect to the Configuration\
    \ Option receiver.\n   Default\n      No IP addresses assigned.\n"
- title: 5.2.  Compression-Type
  contents:
  - "5.2.  Compression-Type\n   Description\n      This Configuration Option provides\
    \ a way to negotiate the use of a\n      specific compression protocol.  By default,\
    \ compression is not\n      enabled.\n   A summary of the Compression-Type Configuration\
    \ Option format is\n   shown below.  The fields are transmitted from left to right.\n\
    \    0                   1                   2                   3\n    0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Type      |    Length     |       Compression-Type        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |    Data ...\n   +-+-+-+-+\n   Type\n      2\n   Length\n      >= 4\n   Compression-Type\n\
    \      The Compression-Type field is two octets and indicates the type of\n  \
    \    compression protocol desired.  Values for the Compression-Type are\n    \
    \  always the same as the PPP Data Link Layer Protocol field values\n      for\
    \ that same compression protocol.  The most up-to-date values of\n      the Compression-Type\
    \ field are specified in \"Assigned Numbers\"\n      [2].  Initial values are\
    \ assigned as follows:\n         Value (in hex)          Protocol\n         0037\
    \                    Van Jacobson Compressed TCP/IP\n   Data\n      The Data field\
    \ is zero or more octets and contains additional data\n      as determined by\
    \ the compression protocol indicated in the\n      Compression-Type field.\n \
    \  Default\n      No compression protocol enabled.\n"
- title: References
  contents:
  - "References\n   [1]   Perkins, D., \"The Point-to-Point Protocol for the Transmission\n\
    \         of Multi-Protocol of Datagrams Over Point-to-Point Links\", RFC\n  \
    \       1171, July, 1990.\n   [2]   Reynolds, J., and J. Postel, \"Assigned Numbers\"\
    , RFC 1060,\n         USC/Information Sciences Institute, March 1990.\n"
- title: Security Considerations
  contents:
  - "Security Considerations\n   Security issues are discussed in Section 2.3.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   This proposal is the product of the Point-to-Point Protocol\
    \ Working\n   Group of the Internet Engineering Task Force (IETF). The working\n\
    \   group can be contacted via the chair:\n      Russ Hobby\n      UC Davis\n\
    \      Computing Services\n      Davis, CA 95616\n      Phone: (916) 752-0236\n\
    \      EMail: rdhobby@ucdavis.edu\n   Questions about this memo can also be directed\
    \ to:\n      Drew D. Perkins\n      Carnegie Mellon University\n      Networking\
    \ and Communications\n      Pittsburgh, PA 15213\n      Phone: (412) 268-8576\n\
    \      EMail: ddp@andrew.cmu.edu\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   Many people spent significant time helping to develop the\
    \ Point-to-\n   Point Protocol.  The complete list of people is too numerous to\
    \ list,\n   but the following people deserve special thanks: Ken Adelman (TGV),\n\
    \   Craig Fox (NSC), Phill Gross (NRI), Russ Hobby (UC Davis), David\n   Kaufman\
    \ (Proteon), John LoVerso (Xylogics), Bill Melohn (Sun\n   Microsystems), Mike\
    \ Patton (MIT), Drew Perkins (CMU), Greg Satz\n   (cisco systems) and Asher Waldfogel\
    \ (Wellfleet).\n"
