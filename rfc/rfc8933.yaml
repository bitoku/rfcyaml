- title: __initial_text__
  contents:
  - "     Update to the Cryptographic Message Syntax (CMS) for Algorithm\n       \
    \                  Identifier Protection\n"
- title: Abstract
  contents:
  - "Abstract\n   This document updates the Cryptographic Message Syntax (CMS)\n \
    \  specified in RFC 5652 to ensure that algorithm identifiers in signed-\n   data\
    \ and authenticated-data content types are adequately protected.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 7841.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8933.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2020 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (https://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction\n   2.  Terminology\n   3.  Required Use\
    \ of the Same Hash Algorithm\n     3.1.  RFC 5652, Section 5.3\n     3.2.  RFC\
    \ 5652, Section 5.4\n     3.3.  RFC 5652, Section 5.6\n     3.4.  Backward Compatibility\
    \ Considerations\n     3.5.  Timestamp Compatibility Considerations\n   4.  Recommended\
    \ Inclusion of the CMSAlgorithmProtection Attribute\n     4.1.  RFC 5652, Section\
    \ 14\n   5.  IANA Considerations\n   6.  Security Considerations\n   7.  References\n\
    \     7.1.  Normative References\n     7.2.  Informative References\n   Acknowledgements\n\
    \   Author's Address\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document updates the Cryptographic Message Syntax (CMS)\n\
    \   [RFC5652] to ensure that algorithm identifiers in signed-data and\n   authenticated-data\
    \ content types are adequately protected.\n   The CMS signed-data content type\
    \ [RFC5652], unlike X.509 certificates\n   [RFC5280], can be vulnerable to algorithm\
    \ substitution attacks.  In\n   an algorithm substitution attack, the attacker\
    \ changes either the\n   algorithm identifier or the parameters associated with\
    \ the algorithm\n   identifier to change the verification process used by the\
    \ recipient.\n   The X.509 certificate structure protects the algorithm identifier\
    \ and\n   the associated parameters by signing them.\n   In an algorithm substitution\
    \ attack, the attacker looks for a\n   different algorithm that produces the same\
    \ result as the algorithm\n   used by the originator.  As an example, if the signer\
    \ of a message\n   used SHA-256 [SHS] as the digest algorithm to hash the message\n\
    \   content, then the attacker looks for a weaker hash algorithm that\n   produces\
    \ a result that is of the same length.  The attacker's goal is\n   to find a different\
    \ message that results in the same hash value,\n   which is called a cross-algorithm\
    \ collision.  Today, there are many\n   hash functions that produce 256-bit results.\
    \  One of them may be\n   found to be weak in the future.\n   Further, when a\
    \ digest algorithm produces a larger result than is\n   needed by a digital signature\
    \ algorithm, the digest value is reduced\n   to the size needed by the signature\
    \ algorithm.  This can be done both\n   by truncation and modulo operations, with\
    \ the simplest being\n   straightforward truncation.  In this situation, the attacker\
    \ needs to\n   find a collision with the reduced digest value.  As an example,\
    \ if\n   the message signer uses SHA-512 [SHS] as the digest algorithm and the\n\
    \   Elliptic Curve Digital Signature Algorithm (ECDSA) with the P-256\n   curve\
    \ [DSS] as the signature algorithm, then the attacker needs to\n   find a collision\
    \ with the first half of the digest.\n   Similar attacks can be mounted against\
    \ parameterized algorithm\n   identifiers.  When randomized hash functions are\
    \ employed, such as\n   the example in [RFC6210], the algorithm identifier parameter\
    \ includes\n   a random value that can be manipulated by an attacker looking for\n\
    \   collisions.  Some other algorithm identifiers include complex\n   parameter\
    \ structures, and each value provides another opportunity for\n   manipulation\
    \ by an attacker.\n   This document makes two updates to CMS to provide protection\
    \ for the\n   algorithm identifier.  First, it mandates a convention followed\
    \ by\n   many implementations by requiring the originator to use the same hash\n\
    \   algorithm to compute the digest of the message content and the digest\n  \
    \ of signed attributes.  Second, it recommends that the originator\n   include\
    \ the CMSAlgorithmProtection attribute [RFC6211].\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\"\
    , \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted as described\
    \ in\n   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all\n\
    \   capitals, as shown here.\n"
- title: 3.  Required Use of the Same Hash Algorithm
  contents:
  - "3.  Required Use of the Same Hash Algorithm\n   This section updates [RFC5652]\
    \ to require the originator to use the\n   same hash algorithm to compute the\
    \ digest of the message content and\n   the digest of signed attributes.\n"
- title: 3.1.  RFC 5652, Section 5.3
  contents:
  - "3.1.  RFC 5652, Section 5.3\n   Change the paragraph describing the digestAlgorithm\
    \ as follows:\n   OLD:\n   |  digestAlgorithm identifies the message digest algorithm,\
    \ and any\n   |  associated parameters, used by the signer.  The message digest\
    \ is\n   |  computed on either the content being signed or the content\n   | \
    \ together with the signed attributes using the process described in\n   |  Section\
    \ 5.4.  The message digest algorithm SHOULD be among those\n   |  listed in the\
    \ digestAlgorithms field of the associated SignerData.\n   |  Implementations\
    \ MAY fail to validate signatures that use a digest\n   |  algorithm that is not\
    \ included in the SignedData digestAlgorithms\n   |  set.\n   NEW:\n   |  digestAlgorithm\
    \ identifies the message digest algorithm, and any\n   |  associated parameters,\
    \ used by the signer.  The message digest is\n   |  computed on either the content\
    \ being signed or the content\n   |  together with the signedAttrs using the process\
    \ described in\n   |  Section 5.4.  The message digest algorithm SHOULD be among\
    \ those\n   |  listed in the digestAlgorithms field of the associated SignerData.\n\
    \   |  If the signedAttrs field is present in the SignerInfo, then the\n   | \
    \ same digest algorithm MUST be used to compute both the digest of\n   |  the\
    \ SignedData encapContentInfo eContent, which is carried in the\n   |  message-digest\
    \ attribute, and the digest of the DER-encoded\n   |  signedAttrs, which is passed\
    \ to the signature algorithm.\n   |  Implementations MAY fail to validate signatures\
    \ that use a digest\n   |  algorithm that is not included in the SignedData digestAlgorithms\n\
    \   |  set.\n"
- title: 3.2.  RFC 5652, Section 5.4
  contents:
  - "3.2.  RFC 5652, Section 5.4\n   Add the following paragraph as the second paragraph\
    \ in Section 5.4.\n   ADD:\n   |  When the signedAttrs field is present, the same\
    \ digest algorithm\n   |  MUST be used to compute the digest of the encapContentInfo\n\
    \   |  eContent OCTET STRING, which is carried in the message-digest\n   |  attribute\
    \ and the digest of the collection of attributes that are\n   |  signed.\n"
- title: 3.3.  RFC 5652, Section 5.6
  contents:
  - "3.3.  RFC 5652, Section 5.6\n   Change the paragraph discussing the signed attributes\
    \ as follows:\n   OLD:\n   |  The recipient MUST NOT rely on any message digest\
    \ values computed\n   |  by the originator.  If the SignedData signerInfo includes\n\
    \   |  signedAttributes, then the content message digest MUST be\n   |  calculated\
    \ as described in Section 5.4.  For the signature to be\n   |  valid, the message\
    \ digest value calculated by the recipient MUST\n   |  be the same as the value\
    \ of the messageDigest attribute included\n   |  in the signedAttributes of the\
    \ SignedData signerInfo.\n   NEW:\n   |  The recipient MUST NOT rely on any message\
    \ digest values computed\n   |  by the originator.  If the SignedData signerInfo\
    \ includes the\n   |  signedAttrs field, then the content message digest MUST\
    \ be\n   |  calculated as described in Section 5.4 using the same digest\n   |\
    \  algorithm to compute the digest of the encapContentInfo eContent\n   |  OCTET\
    \ STRING and the message-digest attribute.  For the signature\n   |  to be valid,\
    \ the message digest value calculated by the recipient\n   |  MUST be the same\
    \ as the value of the messageDigest attribute\n   |  included in the signedAttrs\
    \ field of the SignedData signerInfo.\n"
- title: 3.4.  Backward Compatibility Considerations
  contents:
  - "3.4.  Backward Compatibility Considerations\n   The new requirement introduced\
    \ above might lead to incompatibility\n   with an implementation that allowed\
    \ different digest algorithms to be\n   used to compute the digest of the message\
    \ content and the digest of\n   signed attributes.  The signatures produced by\
    \ such an implementation\n   when two different digest algorithms are used will\
    \ be considered\n   invalid by an implementation that follows this specification.\n\
    \   However, most, if not all, implementations already require the\n   originator\
    \ to use the same digest algorithm for both operations.\n"
- title: 3.5.  Timestamp Compatibility Considerations
  contents:
  - "3.5.  Timestamp Compatibility Considerations\n   The new requirement introduced\
    \ above might lead to compatibility\n   issues for timestamping systems when the\
    \ originator does not wish to\n   share the message content with the Time Stamping\
    \ Authority (TSA)\n   [RFC3161].  In this situation, the originator sends a TimeStampReq\
    \ to\n   the TSA that includes a MessageImprint, which consists of a digest\n\
    \   algorithm identifier and a digest value.  The TSA then uses the\n   originator-provided\
    \ digest in the MessageImprint.\n   When producing the TimeStampToken, the TSA\
    \ MUST use the same digest\n   algorithm to compute the digest of the encapContentInfo\
    \ eContent,\n   which is an OCTET STRING that contains the TSTInfo, and the message-\n\
    \   digest attribute within the SignerInfo.\n   To ensure that TimeStampToken\
    \ values that were generated before this\n   update remain valid, no requirement\
    \ is placed on a TSA to ensure that\n   the digest algorithm for the TimeStampToken\
    \ matches the digest\n   algorithm for the MessageImprint embedded within the\
    \ TSTInfo.\n"
- title: 4.  Recommended Inclusion of the CMSAlgorithmProtection Attribute
  contents:
  - "4.  Recommended Inclusion of the CMSAlgorithmProtection Attribute\n   This section\
    \ updates [RFC5652] to recommend that the originator\n   include the CMSAlgorithmProtection\
    \ attribute [RFC6211] whenever\n   signed attributes or authenticated attributes\
    \ are present.\n"
- title: 4.1.  RFC 5652, Section 14
  contents:
  - "4.1.  RFC 5652, Section 14\n   Add the following paragraph as the eighth paragraph\
    \ in Section 14:\n   ADD:\n   |  While there are no known algorithm substitution\
    \ attacks today, the\n   |  inclusion of the algorithm identifiers used by the\
    \ originator as a\n   |  signed attribute or an authenticated attribute makes\
    \ such an\n   |  attack significantly more difficult.  Therefore, the originator\
    \ of\n   |  a signed-data content type that includes signed attributes SHOULD\n\
    \   |  include the CMSAlgorithmProtection attribute [RFC6211] as one of\n   |\
    \  the signed attributes.  Likewise, the originator of an\n   |  authenticated-data\
    \ content type that includes authenticated\n   |  attributes SHOULD include the\
    \ CMSAlgorithmProtection attribute\n   |  [RFC6211] as one of the authenticated\
    \ attributes.\n"
- title: 5.  IANA Considerations
  contents:
  - "5.  IANA Considerations\n   This document has no IANA actions.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   The security properties of the CMS [RFC5652]\
    \ signed-data and\n   authenticated-data content types are updated to offer protection\
    \ for\n   algorithm identifiers, which makes algorithm substitution attacks\n\
    \   significantly more difficult.\n   For the signed-data content type, the improvements\
    \ specified in this\n   document force an attacker to mount a hash algorithm substitution\n\
    \   attack on the overall signature, not just on the message digest of\n   the\
    \ encapContentInfo eContent.\n   Some digital signature algorithms have prevented\
    \ hash function\n   substitutions by including a digest algorithm identifier as\
    \ an input\n   to the signature algorithm.  As discussed in [HASHID], such a\n\
    \   \"firewall\" may not be effective or even possible with newer signature\n\
    \   algorithms.  For example, RSASSA-PKCS1-v1_5 [RFC8017] protects the\n   digest\
    \ algorithm identifier, but RSASSA-PSS [RFC8017] does not.\n   Therefore, it remains\
    \ important that a signer have a way to signal to\n   a recipient which digest\
    \ algorithms are allowed to be used in\n   conjunction with the verification of\
    \ an overall signature.  This\n   signaling can be done as part of the specification\
    \ of the signature\n   algorithm in an X.509v3 certificate extension [RFC5280]\
    \ or some other\n   means.  The Digital Signature Standard (DSS) [DSS] takes the\
    \ first\n   approach by requiring the use of an \"approved\" one-way hash\n  \
    \ algorithm.\n   For the authenticated-data content type, the improvements specified\n\
    \   in this document force an attacker to mount a MAC algorithm\n   substitution\
    \ attack, which is difficult because the attacker does not\n   know the authentication\
    \ key.\n   The CMSAlgorithmProtection attribute [RFC6211] offers protection for\n\
    \   the algorithm identifiers used in the signed-data and authenticated-\n   data\
    \ content types.  However, no protection is provided for the\n   algorithm identifiers\
    \ in the enveloped-data, digested-data, or\n   encrypted-data content types. \
    \ Likewise, the CMSAlgorithmProtection\n   attribute provides no protection for\
    \ the algorithm identifiers used\n   in the authenticated-enveloped-data content\
    \ type defined in\n   [RFC5083].  A mechanism for algorithm identifier protection\
    \ for these\n   content types is work for the future.\n"
- title: 7.  References
  contents:
  - '7.  References

    '
- title: 7.1.  Normative References
  contents:
  - "7.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n  \
    \            DOI 10.17487/RFC2119, March 1997,\n              <https://www.rfc-editor.org/info/rfc2119>.\n\
    \   [RFC3161]  Adams, C., Cain, P., Pinkas, D., and R. Zuccherato,\n         \
    \     \"Internet X.509 Public Key Infrastructure Time-Stamp\n              Protocol\
    \ (TSP)\", RFC 3161, DOI 10.17487/RFC3161, August\n              2001, <https://www.rfc-editor.org/info/rfc3161>.\n\
    \   [RFC5652]  Housley, R., \"Cryptographic Message Syntax (CMS)\", STD 70,\n\
    \              RFC 5652, DOI 10.17487/RFC5652, September 2009,\n             \
    \ <https://www.rfc-editor.org/info/rfc5652>.\n   [RFC6211]  Schaad, J., \"Cryptographic\
    \ Message Syntax (CMS) Algorithm\n              Identifier Protection Attribute\"\
    , RFC 6211,\n              DOI 10.17487/RFC6211, April 2011,\n              <https://www.rfc-editor.org/info/rfc6211>.\n\
    \   [RFC8174]  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n     \
    \         2119 Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n        \
    \      May 2017, <https://www.rfc-editor.org/info/rfc8174>.\n"
- title: 7.2.  Informative References
  contents:
  - "7.2.  Informative References\n   [DSS]      National Institute of Standards and\
    \ Technology (NIST),\n              \"Digital Signature Standard (DSS)\", FIPS\
    \ 186-4,\n              DOI 10.6028/NIST.FIPS.186-4, July 2013,\n            \
    \  <https://doi.org/10.6028/NIST.FIPS.186-4>.\n   [HASHID]   Kaliski, B., \"On\
    \ Hash Function Firewalls in Signature\n              Schemes\", DOI 10.1007/3-540-45760-7_1,\
    \ Lecture Notes in\n              Computer Science, Volume 2271, February 2002,\n\
    \              <https://doi.org/10.1007/3-540-45760-7_1>.\n   [RFC5083]  Housley,\
    \ R., \"Cryptographic Message Syntax (CMS)\n              Authenticated-Enveloped-Data\
    \ Content Type\", RFC 5083,\n              DOI 10.17487/RFC5083, November 2007,\n\
    \              <https://www.rfc-editor.org/info/rfc5083>.\n   [RFC5280]  Cooper,\
    \ D., Santesson, S., Farrell, S., Boeyen, S.,\n              Housley, R., and\
    \ W. Polk, \"Internet X.509 Public Key\n              Infrastructure Certificate\
    \ and Certificate Revocation List\n              (CRL) Profile\", RFC 5280, DOI\
    \ 10.17487/RFC5280, May 2008,\n              <https://www.rfc-editor.org/info/rfc5280>.\n\
    \   [RFC6210]  Schaad, J., \"Experiment: Hash Functions with Parameters in\n \
    \             the Cryptographic Message Syntax (CMS) and S/MIME\",\n         \
    \     RFC 6210, DOI 10.17487/RFC6210, April 2011,\n              <https://www.rfc-editor.org/info/rfc6210>.\n\
    \   [RFC8017]  Moriarty, K., Ed., Kaliski, B., Jonsson, J., and A. Rusch,\n  \
    \            \"PKCS #1: RSA Cryptography Specifications Version 2.2\",\n     \
    \         RFC 8017, DOI 10.17487/RFC8017, November 2016,\n              <https://www.rfc-editor.org/info/rfc8017>.\n\
    \   [SHS]      National Institute of Standards and Technology (NIST),\n      \
    \        \"Secure Hash Standard (SHS)\", FIPS 180-4,\n              DOI 10.6028/NIST.FIPS.180-4,\
    \ August 2015,\n              <https://doi.org/10.6028/NIST.FIPS.180-4>.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   Many thanks to Jim Schaad and Peter Gutmann; without knowing\
    \ it, they\n   motivated me to write this document.  Thanks to Roman Danyliw,\
    \ Ben\n   Kaduk, and Peter Yee for their careful review and editorial\n   suggestions.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Russ Housley\n   Vigil Security, LLC\n   516 Dranesville\
    \ Road\n   Herndon, VA 20170\n"
