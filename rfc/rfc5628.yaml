- contents:
  - "               Registration Event Package Extension for\n                   Session
    Initiation Protocol (SIP)\n               Globally Routable User Agent URIs (GRUUs)\n"
  title: __initial_text__
- contents:
  - "Abstract\n   RFC 3680 defines a Session Initiation Protocol (SIP) event package\n
    \  for registration state.  This package allows a watcher to learn about\n   information
    stored by a SIP registrar, including its registered\n   contact.\n   However,
    the registered contact is frequently unreachable and thus\n   not useful for watchers.
    \ The Globally Routable User Agent URI\n   (GRUU), defined in RFC 5627, is a URI
    that is capable of reaching a\n   particular contact.  However this URI is not
    included in the document\n   format defined in RFC 3680.  This specification defines
    an extension\n   to the registration event package to include GRUUs assigned by
    the\n   registrar.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2009 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the BSD License.\n   This document may contain material from
    IETF Documents or IETF\n   Contributions published or made publicly available
    before November\n   10, 2008.  The person(s) controlling the copyright in some
    of this\n   material may not have granted the IETF Trust the right to allow\n
    \  modifications of such material outside the IETF Standards Process.\n   Without
    obtaining an adequate license from the person(s) controlling\n   the copyright
    in such materials, this document may not be modified\n   outside the IETF Standards
    Process, and derivative works of it may\n   not be created outside the IETF Standards
    Process, except to format\n   it for publication as an RFC or to translate it
    into languages other\n   than English.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .
    . . . . . .  3\n   2.  Terminology  . . . . . . . . . . . . . . . . . . . . .
    . . . .  4\n   3.  Description  . . . . . . . . . . . . . . . . . . . . . . .
    . .  4\n   4.  Notifier Processing of SUBSCRIBE Requests  . . . . . . . . . .
    \ 4\n   5.  Notifier Generation of NOTIFY Requests . . . . . . . . . . . .  4\n
    \  6.  Subscriber Processing of NOTIFY Requests . . . . . . . . . . .  5\n     6.1.
    \ Managing Temporary GRUU Lifetime . . . . . . . . . . . . .  5\n   7.  Sample
    reginfo Document  . . . . . . . . . . . . . . . . . . .  7\n   8.  Examples .
    . . . . . . . . . . . . . . . . . . . . . . . . . .  7\n     8.1.  Example: Welcome
    Notice  . . . . . . . . . . . . . . . . .  8\n     8.2.  Example: Implicit Registration
    . . . . . . . . . . . . . .  8\n   9.  XML Schema Definition  . . . . . . . .
    . . . . . . . . . . . . 11\n   10. IANA Considerations  . . . . . . . . . . .
    . . . . . . . . . . 12\n     10.1. URN Sub-Namespace Registration . . . . . .
    . . . . . . . . 12\n     10.2. XML Schema Registration  . . . . . . . . . . .
    . . . . . . 13\n   11. Security Considerations  . . . . . . . . . . . . . . .
    . . . . 13\n   12. Acknowledgements . . . . . . . . . . . . . . . . . . . . .
    . . 14\n   13. References . . . . . . . . . . . . . . . . . . . . . . . . . .
    14\n     13.1. Normative References . . . . . . . . . . . . . . . . . . . 14\n
    \    13.2. Informative References . . . . . . . . . . . . . . . . . . 14\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   RFC 3680 [2] defines a Session Initiation Protocol (SIP)
    [5] event\n   package for registration state.  This package allows a watcher to\n
    \  learn about information stored by a SIP registrar, including the\n   registered
    contacts.\n   However, a registered contact is frequently unreachable from hosts\n
    \  outside of the domain of the User Agent (UA).  It is commonly a\n   private
    address, or, when it is a public address, access to it may be\n   blocked by firewalls.\n
    \  The Globally Routable User Agent URI (GRUU), defined in RFC 5627 [3],\n   is
    a URI that reaches a particular UA instance, but is reachable by\n   any host
    on the Internet.  GRUUs assigned by the registrar represent\n   additional registration
    state.  However, GRUUs assigned by the\n   registrar are not included in the notifications
    provided by RFC 3680.\n   For many applications of the registration event package,
    a GRUU is\n   needed, and not the registered contact.\n   For example, the Welcome
    Notices example in [2] will only operate\n   correctly if the contact address
    in the registration event\n   notification is reachable by the sender of the welcome
    notice.  When\n   the registering device is using the GRUU extension, it is likely
    that\n   the registered contact address will not be globally addressable, and\n
    \  a GRUU should be used as the target address for the MESSAGE.\n   Another case
    where this feature may be helpful is within the Third\n   Generation Partnership
    Project (3GPP) IP Multimedia Subsystem (IMS).\n   IMS employs a technique where
    a REGISTER of a contact address to one\n   Address of Record (AOR) causes the
    implicit registration of the same\n   contact to other associated AORs.  If GRUUs
    are requested and\n   obtained as part of the registration request, then additional
    GRUUs\n   will also be needed for the implicit registrations.  While assigning\n
    \  the additional GRUUs is straightforward, informing the registering UA\n   of
    them is not.  In IMS, UAs typically subscribe to the registration\n   event, and
    subscriptions to the registration event for an AOR result\n   in notifications,
    each containing the registration state of all the\n   associated AORs.  The proposed
    extension provides a way to easily\n   deliver the GRUUs for the associated AORs.\n
    \  As specified in RFC 5627 [3], temporary GRUUs are invalidated when\n   contact
    address bindings for the corresponding AOR and instance ID\n   are not refreshed,
    or when a registration to the AOR and instance ID\n   is performed with a new
    Call-ID.  A UA cannot always determine with\n   certainty which temporary GRUUs
    are valid based solely on the\n   response to the REGISTER requests it has issued,
    or from\n   notifications according to RFC 3680 [2].  The extension defined in\n
    \  this document provides sufficient information for a UA to determine\n   which
    temporary GRUUs are valid.\n   The registration event package has provisions for
    including extension\n   elements within the <contact> element.  This document
    defines new\n   elements that may be used in that context to deliver the public
    and\n   temporary GRUUs corresponding to the contact.\n"
  title: 1.  Introduction
- contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
    \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\"
    in this\n   document are to be interpreted as described in RFC 2119. [1]\n"
  title: 2.  Terminology
- contents:
  - "3.  Description\n   Two new elements (<pub-gruu> and <temp-gruu>) are defined,
    each of\n   which contains a GRUU.  The <temp-gruu> element also identifies the\n
    \  oldest temporary GRUU that is currently valid.\n   These optional elements
    may be included within the body of a NOTIFY\n   for the registration event package
    when GRUUs are associated with the\n   contact.  The contact URI and the GRUUs
    are then all available to the\n   watcher.\n"
  title: 3.  Description
- contents:
  - "4.  Notifier Processing of SUBSCRIBE Requests\n   Unchanged from RFC 3680 [2].\n"
  title: 4.  Notifier Processing of SUBSCRIBE Requests
- contents:
  - "5.  Notifier Generation of NOTIFY Requests\n   A notifier for the registration
    event package [2] SHOULD include the\n   <pub-gruu> element when a contact has
    an instance ID and a public\n   GRUU is associated with the combination of the
    AOR and the instance\n   ID.  When present, the <pub-gruu> element MUST be positioned
    as a\n   child of the <contact> element.\n   A notifier for the registration event
    package [2] MAY include the\n   <temp-gruu> element when a contact has an instance
    ID and a temporary\n   GRUU is associated with the combination of the AOR and
    the instance\n   ID.  This element SHOULD be included if the subscriber is also\n
    \  authorized to register to the AOR.  This element SHOULD NOT be\n   included
    if the subscriber is not authorized to register to the AOR,\n   unless there is
    an explicitly configured policy directing that it be\n   included.  When present,
    the <temp-gruu> element MUST be positioned\n   as a child of the <contact> element.\n
    \  Note that it is possible for multiple registered contacts to share\n   the
    same instance ID.  In such a case, each <contact> element will\n   have child
    <pub-gruu> and <temp-gruu> elements, which are identical\n   to the corresponding
    child elements in those other <contact> elements\n   that share the same instance
    ID.  Since a particular contact cannot\n   be associated with more than one instance
    ID, a <contact> element\n   will never have more than one <pub-gruu> and one <temp-gruu>
    child\n   element.\n   If the notifier includes the <pub-gruu> element, it MUST
    populate the\n   element with the public GRUU that is associated with the instance
    ID\n   and AOR of the registered contact.\n   If the notifier includes the <temp-gruu>
    element, it MUST populate\n   the element with the most recently assigned temporary
    GRUU that is\n   associated with the instance ID and AOR of the registered contact.\n
    \  It MUST also populate the element with a \"cseq\" attribute\n   corresponding
    to the first (oldest) currently active temporary GRUU\n   that is associated with
    the instance ID and AOR of the registered\n   contact.  The value of the \"cseq\"
    attribute is set to the value of\n   the CSeq header field of the REGISTER request
    that caused that first\n   temporary GRUU to be assigned.\n"
  title: 5.  Notifier Generation of NOTIFY Requests
- contents:
  - "6.  Subscriber Processing of NOTIFY Requests\n   When a subscriber receives a
    registration event notification with a\n   <contact> containing a <pub-gruu>,
    it MAY associate the public GRUU\n   with the corresponding AOR and instance ID.
    \ Any previously received\n   public GRUU for the same AOR and instance ID MUST
    be discarded.  (It\n   will no longer function.)\n   When a subscriber receives
    a registration event notification with a\n   <contact> containing a <temp-gruu>,
    it MAY associate the temporary\n   GRUU, together with the \"callid\" and \"cseq\"
    attributes, with the\n   corresponding AOR and instance ID.\n   Subscribers that
    are unaware of this extension will, as required by\n   [2], ignore the <pub-gruu>
    and <temp-gruu> elements.\n"
  - contents:
    - "6.1.  Managing Temporary GRUU Lifetime\n   Section 4.2 of RFC 5627 [3] gives
      guidance for developers of UAs on\n   how to ensure that only valid temporary
      GRUUs are retained and used\n   by the UA.  A UA cannot always determine with
      certainty which\n   temporary GRUUs are valid based solely on the information
      contained\n   in responses to the REGISTER requests it has issued or from the\n
      \  information contained in notifications that conform solely to RFC\n   3680
      [2].  The extension defined in this document provides sufficient\n   added information
      for a UA to determine which temporary GRUUs are\n   valid.  The extension to
      RFC 3680 defined in this document provides\n   added information to help with
      that process.  The following are steps\n   that the UA MAY take to ensure it
      only retains valid GRUUs:\n   o  The UA should subscribe to the registration
      event package for the\n      AOR it is registering.\n   o  When a UA receives
      a 2xx response to a REGISTER request, it may\n      extract and retain temporary
      GRUUs from the response for future\n      use, as long as they remain valid.
      \ Appropriate GRUUs to retain\n      are those corresponding to the contact
      address and instance ID it\n      has registered.  (Typically, the UA will register
      only one contact\n      address, and so receive at most one temporary GRUU.)\n
      \  o  The UA may add the temporary GRUU to the set of valid temporary\n      GRUUs
      associated with the AOR.  (Note, in this case AOR is the\n      To-address of
      the REGISTER request.)  To aid in tracking validity,\n      the UA should also
      associate a \"callid\" attribute and \"cseq\"\n      attribute with the temporary
      GRUU, with values obtained\n      respectively from the Call-ID and CSeq values
      of the REGISTER\n      response containing the temporary GRUU.\n   o  If the
      UA receives a registration event notification with an AOR\n      (that it supports)
      and a <contact>, for a contact address and\n      instance ID (that it has registered
      and that contains a <temp-\n      gruu>), it may update its set of valid temporary
      GRUUs associated\n      with the AOR, as follows:\n      *  It may add the temporary
      GRUU to the set.  To aid in tracking\n         validity, the UA should associate
      the \"callid\" and \"cseq\"\n         attributes of the <contact> with the GRUU
      in the set.\n      *  It should remove any temporary GRUUs with a \"callid\"
      attribute\n         value different from that in the value of the \"callid\"\n
      \        attribute of the <contact>, or with a \"cseq\" attribute with\n         value
      less than the value of the \"first-cseq\" attribute of the\n         <temp-gruu>.\n
      \  o  If the UA receives a registration event notification with an AOR\n      that
      it supports, and there are no <contact> entries for its\n      instance ID,
      then it should discard all the temporary GRUUs it has\n      saved for that
      AOR.\n"
    title: 6.1.  Managing Temporary GRUU Lifetime
  title: 6.  Subscriber Processing of NOTIFY Requests
- contents:
  - "7.  Sample reginfo Document\n      Note: This example and others in the following
    section are\n      indented for readability by the addition of a fixed amount
    of\n      whitespace to the beginning of each line.  This whitespace is not\n
    \     part of the example.  The conventions of [7] are used to describe\n      representation
    of long message lines.\n   The following is an example registration information
    document that\n   includes the new element:\n     <?xml version=\"1.0\"?>\n         <reginfo
    xmlns=\"urn:ietf:params:xml:ns:reginfo\"\n             xmlns:gr=\"urn:ietf:params:xml:ns:gruuinfo\"\n
    \            version=\"0\" state=\"full\">\n           <registration aor=\"sip:user@example.com\"
    id=\"as9\"\n                state=\"active\">\n             <contact id=\"76\"
    state=\"active\" event=\"registered\"\n                duration-registered=\"36001\"
    expires=\"3599\"\n                callid=\"1j9FpLxk3uxtm8tn@192.0.2.1\" cseq=\"54321\"\n
    \               q=\"0.8\">\n                  <uri>sip:user@192.0.2.1</uri>\n
    \    <allOneLine>\n                  <unknown-param name=\"+sip.instance\">\n
    \    \"&lt;urn:uuid:f81d4fae-7dec-11d0-a765-00a0c91e6bf6&gt;\"\n     </unknown-param>\n
    \    </allOneLine>\n     <allOneLine>\n                  <gr:pub-gruu uri=\"sip:user@example.com\n
    \    ;gr=hha9s8d-999a\"/>\n     </allOneLine>\n     <allOneLine>\n                  <gr:temp-gruu
    uri=\"sip:8ffkas08af7fasklzi9@example.com\n     ;gr\" first-cseq=\"54301\"/>\n
    \    </allOneLine>\n             </contact>\n           </registration>\n         </reginfo>\n"
  title: 7.  Sample reginfo Document
- contents:
  - "8.  Examples\n   Note: In the following examples, the SIP messages have been\n
    \  simplified, removing headers that are not pertinent to the example.\n   When
    the value of the Content-Length header field is \"...\", this\n   means that the
    value should be the computed length of the body.\n"
  - contents:
    - "8.1.  Example: Welcome Notice\n   Consider the Welcome Notices example in [2].
      \ When the application\n   server receives a notification of a new registration
      containing the\n   reginfo shown in Section 7, it should address messages using
      the\n   contained public GRUU as follows:\n      MESSAGE sip:user@example.com;gr=hha9s8d-999a
      SIP/2.0\n      To: <sip:user@example.com>\n      From: \"SIPland Notifier\"
      <sip:notifier@example.com>;tag=7xy8\n      Content-Type: text/plain\n      Content-Length:
      ...\n      Welcome to SIPland!\n      Blah, blah, blah.\n"
    title: '8.1.  Example: Welcome Notice'
  - contents:
    - "8.2.  Example: Implicit Registration\n   In a 3GPP IMS setting, a UA may send
      a single register message,\n   requesting assignment of GRUUs, as follows:\n
      \     REGISTER sip:example.net SIP/2.0\n      From: <sip:user_aor_1@example.net>;tag=5ab4\n
      \     To: <sip:user_aor_1@example.net>\n      Call-ID: faif9a@ua.example.com\n
      \     CSeq: 23001 REGISTER\n      Contact: <sip:ua.example.com>\n        ;expires=3600\n
      \       ;+sip.instance=\"<urn:uuid:f81d4fae-7dec-11d0-a765-00a0c91e6bf6>\"\n
      \     Supported: path, gruu\n      Content-Length: 0\n   The response reports
      success of the registration and returns the\n   GRUUs assigned for the combination
      of AOR, instance ID, and Contact.\n   It also indicates (via the P-Associated-URI
      header [6]) that there\n   are two other associated AORs that may have been
      implicitly\n   registered using the same contact.  Each of those implicitly\n
      \  registered AORs will have unique GRUUs assigned.  The REGISTER\n   response
      will not include those GRUUs; it will only include the GRUUs\n   for the AOR
      and instance ID explicitly included in the registration.\n      SIP/2.0 200
      OK\n      From: <sip:user_aor_1@example.net>;tag=5ab4\n      To: <sip:user_aor_1@example.net>;tag=373392\n
      \     Call-ID: faif9a@ua.example.com\n      CSeq: 23001 REGISTER\n      Path:
      <sip:proxy.example.net;lr>\n      Service-Route: <sip:proxy.example.net;lr>\n
      \     Contact: <sip:ua.example.com>\n        ;expires=3600\n        ;+sip.instance=\"<urn:uuid:f81d4fae-7dec-11d0-a765-00a0c91e6bf6>\"\n
      \       ;pub-gruu=\"sip:user_aor_1@example.net;gr=hha9s8d-999a\"\n        ;temp-gruu=\"sip:8ffkas08af7fasklzi9@example.net;gr\"\n
      \     P-Associated-URI: <sip:user_aor_2@example.net>,\n        <sip:+358504821437@example.net;user=phone>\n
      \     Content-Length: 0\n   The UA then subscribes to the registration event
      package as follows:\n      SUBSCRIBE sip:user_aor_1@example.net SIP/2.0\n      From:
      <sip:user_aor_1@example.net>;tag=27182\n      To: <sip:user_aor_1@example.net>\n
      \     Call-ID: gbjg0b@ua.example.com\n      CSeq: 45001 SUBSCRIBE\n      Route:
      <sip:proxy.example.net;lr>\n      Event: reg\n      Expires: 3600\n      Accept:
      application/reginfo+xml\n      Contact: <sip:user_aor_1@example.net;gr=hha9s8d-999a>\n
      \     Content-Length: 0\n   (The successful response to the subscription is
      not shown.)  Once the\n   subscription is established, an initial notification
      is sent giving\n   registration status.  In IMS deployments, the response includes,
      in\n   addition to the status for the requested URI, the status for the\n   other
      associated URIs.\n     NOTIFY sip:user_aor_1@example.net;gr=hha9s8d-999a SIP/2.0\n
      \    From: <sip:user_aor_1@example.net>;tag=27182\n     To: <sip:user_aor_1@example.net>;tag=262281\n
      \    Call-ID: gbjg0b@ua.example.com\n     CSeq: 633 NOTIFY\n     Subscription-State:
      active;expires=3600\n     Event: reg\n     Content-Type: application/reginfo+xml\n
      \    Contact: <sip:registrar.example.net>\n     Content-Length: ...\n     <?xml
      version=\"1.0\"?>\n         <reginfo xmlns=\"urn:ietf:params:xml:ns:reginfo\"\n
      \            xmlns:gr=\"urn:ietf:params:xml:ns:gruuinfo\"\n             version=\"1\"
      state=\"full\">\n           <registration aor=\"sip:user_aor_1@example.net\"
      id=\"a7\"\n                state=\"active\">\n             <contact id=\"92\"
      state=\"active\" event=\"registered\"\n                duration-registered=\"1\"
      expires=\"3599\"\n                callid=\"faif9a@ua.example.com\" cseq=\"23001\">\n
      \                 <uri>\n                     sip:ua.example.com\n                  </uri>\n
      \    <allOneLine>\n                  <unknown-param name=\"+sip.instance\">\n
      \    \"&lt;urn:uuid:f81d4fae-7dec-11d0-a765-00a0c91e6bf6&gt;\"\n     </unknown-param>\n
      \    </allOneLine>\n     <allOneLine>\n                  <gr:pub-gruu uri=\"sip:user_aor_1@example.net\n
      \    ;gr=hha9s8d-999a\"/>\n     </allOneLine>\n     <allOneLine>\n                  <gr:temp-gruu
      uri=\"sip:8ffkas08af7fasklzi9@example.net\n     ;gr\" first-cseq=\"54301\"/>\n
      \    </allOneLine>\n             </contact>\n           </registration>\n           <registration
      aor=\"sip:user_aor_2@example.net\" id=\"a8\"\n                state=\"active\">\n
      \            <contact id=\"93\" state=\"active\" event=\"created\"\n                duration-registered=\"1\"
      expires=\"3599\"\n                callid=\"faif9a@ua.example.com\" cseq=\"23001\">\n
      \                 <uri>\n                     sip:ua.example.com\n                  </uri>\n
      \    <allOneLine>\n                  <unknown-param name=\"+sip.instance\">\n
      \    \"&lt;urn:uuid:f81d4fae-7dec-11d0-a765-00a0c91e6bf6&gt;\"\n     </unknown-param>\n
      \    </allOneLine>\n     <allOneLine>\n                  <gr:pub-gruu uri=\"sip:user_aor_2@example.net\n
      \    ;gr=hha9s8d-999b\"/>\n     </allOneLine>\n     <allOneLine>\n                  <gr:temp-gruu
      uri=\"sip:07hcovy36vp6vngvbia@example.net\n     ;gr\" first-cseq=\"54301\"/>\n
      \    </allOneLine>\n             </contact>\n           </registration>\n           <registration\n
      \               aor=\"sip:+358504821437@example.net;user=phone\"\n                id=\"a9\"\n
      \               state=\"active\">\n             <contact id=\"94\" state=\"active\"
      event=\"created\"\n                duration-registered=\"1\" expires=\"3599\"\n
      \               callid=\"faif9a@ua.example.com\" cseq=\"23001\">\n                  <uri>\n
      \                    sip:ua.example.com\n                  </uri>\n     <allOneLine>\n
      \                 <unknown-param name=\"+sip.instance\">\n     \"&lt;urn:uuid:f81d4fae-7dec-11d0-a765-00a0c91e6bf6&gt;\"\n
      \    </unknown-param>\n     </allOneLine>\n     <allOneLine>\n                  <gr:pub-gruu
      uri=\"sip:+358504821437@example.net\n     ;user=phone;gr=hha9s8d-999c\"/>\n
      \    </allOneLine>\n     <allOneLine>\n                  <gr:temp-gruu uri=\"sip:h99egjbv17fe8ibvlka@example.net\n
      \    ;gr\" first-cseq=\"54301\"/>\n     </allOneLine>\n             </contact>\n
      \          </registration>\n         </reginfo>\n   The status indicates that
      the associated URIs all have the same\n   contact registered.  It also includes
      the unique GRUUs that have been\n   assigned to each.  The UA may then retain
      those GRUUs for use when\n   establishing dialogs using the corresponding AORs.\n"
    title: '8.2.  Example: Implicit Registration'
  title: 8.  Examples
- contents:
  - "9.  XML Schema Definition\n   The <pub-gruu> and <temp-gruu> elements are defined
    within a new XML\n   namespace URI.  This namespace is \"urn:ietf:params:xml:ns:gruuinfo\".\n
    \  The schema for these elements is:\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n
    \    <xs:schema targetNamespace=\"urn:ietf:params:xml:ns:gruuinfo\"\n       elementFormDefault=\"qualified\"\n
    \      attributeFormDefault=\"unqualified\"\n       xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"\n
    \      xmlns:tns=\"urn:ietf:params:xml:ns:gruuinfo\">\n       <xs:complexType
    name=\"pubGruu\">\n         <xs:attribute name=\"uri\" type=\"xs:anyURI\"\n                       use=\"required\"/>\n
    \      </xs:complexType>\n       <xs:complexType name=\"tempGruu\">\n         <xs:complexContent>\n
    \          <xs:extension base=\"tns:pubGruu\">\n             <xs:attribute name=\"first-cseq\"\n
    \                          type=\"xs:unsignedLong\"\n                           use=\"required\"/>\n
    \          </xs:extension>\n         </xs:complexContent>\n       </xs:complexType>\n
    \      <xs:element name=\"pub-gruu\" type=\"tns:pubGruu\"/>\n       <xs:element
    name=\"temp-gruu\" type=\"tns:tempGruu\"/>\n     </xs:schema>\n"
  title: 9.  XML Schema Definition
- contents:
  - "10.  IANA Considerations\n   There are two IANA considerations associated with
    this specification.\n"
  - contents:
    - "10.1.  URN Sub-Namespace Registration\n   This section registers a new XML
      namespace, per the guidelines in\n   [4].\n   URI: The URI for this namespace
      is urn:ietf:params:xml:ns:gruuinfo\n   Registrant Contact: IETF, SIPPING working
      group, <sipping@ietf.org>,\n   Paul Kyzivat <pkyzivat@cisco.com>\n   XML:\n
      \        BEGIN\n         <?xml version=\"1.0\"?>\n         <!DOCTYPE html PUBLIC
      \"-//W3C//DTD XHTML Basic 1.0//EN\"\n                   \"http://www.w3.org/TR/xhtml-basic/xhtml-basic10.dtd\">\n
      \        <html xmlns=\"http://www.w3.org/1999/xhtml\">\n         <head>\n           <meta
      http-equiv=\"content-type\"\n              content=\"text/html;charset=iso-8859-1\"/>\n
      \          <title>Reg Information GRUU Extension Namespace</title>\n         </head>\n
      \        <body>\n            <h1>Namespace for Reg Information GRUU Extension</h1>\n
      \           <h2>urn:ietf:params:xml:ns:gruuinfo</h2>\n            <p>See <a
      href=\"http://www.rfc-editor.org/rfc/rfc5628.txt\">\n               RFC5628</a>.</p>\n
      \         </body>\n         </html>\n         END\n"
    title: 10.1.  URN Sub-Namespace Registration
  - contents:
    - "10.2.  XML Schema Registration\n   This section registers an XML schema per
      the procedures in [4].\n   URI: urn:ietf:params:xml:schema:gruuinfo.\n   Registrant
      Contact: IETF, SIPPING working group, <sipping@ietf.org>,\n   Paul Kyzivat <pkyzivat@cisco.com>\n
      \  The XML for this schema can be found in Section 9.\n"
    title: 10.2.  XML Schema Registration
  title: 10.  IANA Considerations
- contents:
  - "11.  Security Considerations\n   Security considerations for the registration
    event package are\n   discussed in RFC 3680 [2], and those considerations apply
    here.\n   If a contact address obtained via subscription to the registration\n
    \  event package is not reachable by the subscriber, then its disclosure\n   may
    arguably be considered a minimal security risk.  In that case,\n   the inclusion
    of a GRUU may be considered to increase the risk by\n   providing a reachable
    address.  On the other hand, requests addressed\n   to a GRUU are always first
    processed by the servicing proxy before\n   they reach the intended User Agent.
    \ The proxy may control access as\n   desired, just as it may for the AOR.  For
    instance, the proxy\n   servicing a GRUU may accept requests from senders whose
    identity\n   appears on a white list, and reject other requests.  In this respect,\n
    \  disclosing a GRUU presents no more risk than disclosing the AOR.\n   Temporary
    GRUUs have an additional security consideration.  The\n   intent of the temporary
    GRUU is to provide a contact address that\n   cannot be correlated to the identity
    of the calling party.  The\n   recipient of a call using a temporary GRUU may
    guess the identity of\n   the calling party and then attempt to obtain the temporary
    GRUUs\n   assigned to that caller to confirm the conjecture.  Two possible\n   approaches
    to obtaining the temporary GRUUs are:\n   o  Send a REGISTER request to a conjectured
    caller.\n   o  Send a SUBSCRIBE request for the registration event package to
    the\n      conjectured caller.\n   Typically, REGISTER is restricted to devices
    or users that are\n   authorized to originate and receive calls with the AOR.
    \ Anonymity\n   among users of the same AOR is hard to achieve and typically\n
    \  unnecessary.  It is recommended (see Section 5) that the\n   authorization
    policy for the registration event package permit only\n   those subscribers who
    are authorized to register to the AOR to\n   receive temporary GRUUs.  With this
    policy, the confidentiality of\n   the temporary GRUU will be the same with and
    without the registration\n   event package.  User Agents that use a temporary
    GRUU should note\n   that confidentiality does not extend to parties that are
    permitted to\n   register to the AOR or to obtain the temporary GRUU when subscribing\n
    \  to the registration event package.\n"
  title: 11.  Security Considerations
- contents:
  - "12.  Acknowledgements\n   The author would like to thank Jonathan Rosenberg for
    help with this\n   document, and Jari Urpalainen for assistance with the XML.\n"
  title: 12.  Acknowledgements
- contents:
  - '13.  References

    '
  - contents:
    - "13.1.  Normative References\n   [1]  Bradner, S., \"Key words for use in RFCs
      to Indicate Requirement\n        Levels\", BCP 14, RFC 2119, March 1997.\n   [2]
      \ Rosenberg, J., \"A Session Initiation Protocol (SIP) Event\n        Package
      for Registrations\", RFC 3680, March 2004.\n   [3]  Rosenberg, J., \"Obtaining
      and Using Globally Routable User Agent\n        (UA) URIs (GRUU) in the Session
      Initiation Protocol (SIP)\", RFC\n        5627, October 2009.\n   [4]  Mealling,
      M., \"The IETF XML Registry\", BCP 81, RFC 3688,\n        January 2004.\n"
    title: 13.1.  Normative References
  - contents:
    - "13.2.  Informative References\n   [5]  Rosenberg, J., Schulzrinne, H., Camarillo,
      G., Johnston, A.,\n        Peterson, J., Sparks, R., Handley, M., and E. Schooler,
      \"SIP:\n        Session Initiation Protocol\", RFC 3261, June 2002.\n   [6]
      \ Garcia-Martin, M., Henrikson, E., and D. Mills, \"Private Header\n        (P-Header)
      Extensions to the Session Initiation Protocol (SIP)\n        for the 3rd-Generation
      Partnership Project (3GPP)\", RFC 3455,\n        January 2003.\n   [7]  Sparks,
      R., Hawrylyshen, A., Johnston, A., Rosenberg, J., and H.\n        Schulzrinne,
      \"Session Initiation Protocol (SIP) Torture Test\n        Messages\", RFC 4475,
      May 2006.\n"
    title: 13.2.  Informative References
  title: 13.  References
- contents:
  - "Author's Address\n   Paul H. Kyzivat\n   Cisco Systems, Inc.\n   1414 Massachusetts
    Avenue\n   Boxborough, MA  01719\n   USA\n   EMail: pkyzivat@cisco.com\n"
  title: Author's Address
