- title: __initial_text__
  contents:
  - "             Extensible Authentication Protocol Method for\n             Global\
    \ System for Mobile Communications (GSM)\n                 Subscriber Identity\
    \ Modules (EAP-SIM)\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2006).\n"
- title: IESG Note
  contents:
  - "IESG Note\n   The EAP-SIM protocol was developed by 3GPP.  The documentation\
    \ of\n   EAP-SIM is provided as information to the Internet community.  While\n\
    \   the EAP WG has verified that EAP-SIM is compatible with EAP, as\n   defined\
    \ in RFC 3748, no other review has been done, including\n   validation of the\
    \ security claims.  The IETF has also not reviewed\n   the security of the cryptographic\
    \ algorithms.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document specifies an Extensible Authentication Protocol (EAP)\n\
    \   mechanism for authentication and session key distribution using the\n   Global\
    \ System for Mobile Communications (GSM) Subscriber Identity\n   Module (SIM).\
    \  GSM is a second generation mobile network standard.\n   The EAP-SIM mechanism\
    \ specifies enhancements to GSM authentication\n   and key agreement whereby multiple\
    \ authentication triplets can be\n   combined to create authentication responses\
    \ and session keys of\n   greater strength than the individual GSM triplets. \
    \ The mechanism\n   also includes network authentication, user anonymity support,\
    \ result\n   indications, and a fast re-authentication procedure.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................4\n\
    \   2. Terms ...........................................................5\n  \
    \ 3. Overview ........................................................8\n   4.\
    \ Operation ......................................................10\n      4.1.\
    \ Version Negotiation .......................................10\n      4.2. Identity\
    \ Management .......................................11\n           4.2.1. Format,\
    \ Generation and Usage of Peer Identities ....11\n           4.2.2. Communicating\
    \ the Peer Identity to the Server ......17\n           4.2.3. Choice of Identity\
    \ for the EAP-Response/Identity ...19\n           4.2.4. Server Operation in the\
    \ Beginning of\n                  EAP-SIM Exchange ...................................19\n\
    \           4.2.5. Processing of EAP-Request/SIM/Start by the Peer ....20\n  \
    \         4.2.6. Attacks Against Identity Privacy ...................21\n    \
    \       4.2.7. Processing of AT_IDENTITY by the Server ............22\n      4.3.\
    \ Message Sequence Examples (Informative) ...................23\n           4.3.1.\
    \ Full Authentication ................................24\n           4.3.2. Fast\
    \ Re-authentication .............................25\n           4.3.3. Fall Back\
    \ to Full Authentication ...................26\n           4.3.4. Requesting the\
    \ Permanent Identity 1 ................27\n           4.3.5. Requesting the Permanent\
    \ Identity 2 ................28\n           4.3.6. Three EAP-SIM/Start Roundtrips\
    \ .....................28\n   5. Fast Re-Authentication .........................................30\n\
    \      5.1. General ...................................................30\n  \
    \    5.2. Comparison to UMTS AKA ....................................31\n    \
    \  5.3. Fast Re-authentication Identity ...........................31\n      5.4.\
    \ Fast Re-authentication Procedure ..........................33\n      5.5. Fast\
    \ Re-authentication Procedure when Counter Is\n           Too Small .................................................36\n\
    \   6. EAP-SIM Notifications ..........................................37\n  \
    \    6.1. General ...................................................37\n    \
    \  6.2. Result Indications ........................................39\n      6.3.\
    \ Error Cases ...............................................40\n           6.3.1.\
    \ Peer Operation .....................................40\n           6.3.2. Server\
    \ Operation ...................................41\n           6.3.3. EAP-Failure\
    \ ........................................42\n           6.3.4. EAP-Success ........................................42\n\
    \   7. Key Generation .................................................43\n  \
    \ 8. Message Format and Protocol Extensibility ......................45\n    \
    \  8.1. Message Format ............................................45\n      8.2.\
    \ Protocol Extensibility ....................................47\n   9. Messages\
    \ .......................................................48\n      9.1. EAP-Request/SIM/Start\
    \ .....................................48\n      9.2. EAP-Response/SIM/Start ....................................49\n\
    \      9.3. EAP-Request/SIM/Challenge .................................49\n  \
    \    9.4. EAP-Response/SIM/Challenge ................................50\n    \
    \  9.5. EAP-Request/SIM/Re-authentication .........................51\n      9.6.\
    \ EAP-Response/SIM/Re-authentication ........................51\n      9.7. EAP-Response/SIM/Client-Error\
    \ .............................52\n      9.8. EAP-Request/SIM/Notification ..............................52\n\
    \      9.9. EAP-Response/SIM/Notification .............................53\n  \
    \ 10. Attributes ....................................................53\n    \
    \  10.1. Table of Attributes ......................................53\n      10.2.\
    \ AT_VERSION_LIST ..........................................54\n      10.3. AT_SELECTED_VERSION\
    \ ......................................55\n      10.4. AT_NONCE_MT ..............................................55\n\
    \      10.5. AT_PERMANENT_ID_REQ ......................................56\n  \
    \    10.6. AT_ANY_ID_REQ ............................................56\n    \
    \  10.7. AT_FULLAUTH_ID_REQ .......................................57\n      10.8.\
    \ AT_IDENTITY ..............................................57\n      10.9. AT_RAND\
    \ ..................................................58\n      10.10. AT_NEXT_PSEUDONYM\
    \ .......................................59\n      10.11. AT_NEXT_REAUTH_ID .......................................59\n\
    \      10.12. AT_IV, AT_ENCR_DATA, and AT_PADDING .....................60\n  \
    \    10.13. AT_RESULT_IND ...........................................62\n    \
    \  10.14. AT_MAC ..................................................62\n      10.15.\
    \ AT_COUNTER ..............................................63\n      10.16. AT_COUNTER_TOO_SMALL\
    \ ....................................63\n      10.17. AT_NONCE_S ..............................................64\n\
    \      10.18. AT_NOTIFICATION .........................................64\n  \
    \    10.19. AT_CLIENT_ERROR_CODE ....................................65\n   11.\
    \ IANA Considerations ...........................................66\n   12. Security\
    \ Considerations .......................................66\n      12.1. A3 and\
    \ A8 Algorithms .....................................66\n      12.2. Identity\
    \ Protection ......................................66\n      12.3. Mutual Authentication\
    \ and Triplet Exposure ...............67\n      12.4. Flooding the Authentication\
    \ Centre .......................69\n      12.5. Key Derivation ...........................................69\n\
    \      12.6. Cryptographic Separation of Keys and Session\n            Independence\
    \ .............................................70\n      12.7. Dictionary Attacks\
    \ .......................................71\n      12.8. Credentials Re-use .......................................71\n\
    \      12.9. Integrity and Replay Protection, and Confidentiality .....72\n  \
    \    12.10. Negotiation Attacks .....................................73\n    \
    \  12.11. Protected Result Indications ............................73\n      12.12.\
    \ Man-in-the-Middle Attacks ...............................74\n      12.13. Generating\
    \ Random Numbers ...............................74\n   13. Security Claims ...............................................74\n\
    \   14. Acknowledgements and Contributions ............................75\n  \
    \    14.1. Contributors .............................................75\n    \
    \  14.2. Acknowledgements .........................................75\n      \
    \     14.2.1. Contributors' Addresses ...........................77\n   15. References\
    \ ....................................................78\n      15.1. Normative\
    \ References .....................................78\n      15.2. Informative\
    \ References ...................................79\n   Appendix A.  Test Vectors\
    \ .........................................81\n      A.1.  EAP-Request/Identity\
    \ .....................................81\n      A.2.  EAP-Response/Identity ....................................81\n\
    \      A.3.  EAP-Request/SIM/Start ....................................82\n  \
    \    A.4.  EAP-Response/SIM/Start ...................................82\n    \
    \  A.5.  EAP-Request/SIM/Challenge ................................83\n      A.6.\
    \  EAP-Response/SIM/Challenge ...............................86\n      A.7.  EAP-Success\
    \ ..............................................86\n      A.8.  Fast Re-authentication\
    \ ...................................86\n      A.9.  EAP-Request/SIM/Re-authentication\
    \ ........................87\n      A.10.  EAP-Response/SIM/Re-authentication\
    \ ......................89\n   Appendix B.  Pseudo-Random Number Generator .......................90\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document specifies an Extensible Authentication Protocol\
    \ (EAP)\n   [RFC3748] mechanism for authentication and session key distribution\n\
    \   using the Global System for Mobile Communications (GSM) Subscriber\n   Identity\
    \ Module (SIM).\n   GSM is a second generation mobile network standard.  Second\n\
    \   generation mobile networks and third generation mobile networks use\n   different\
    \ authentication and key agreement mechanisms.  EAP-AKA\n   [EAP-AKA] specifies\
    \ an EAP method that is based on the Authentication\n   and Key Agreement (AKA)\
    \ mechanism used in 3rd generation mobile\n   networks.\n   GSM authentication\
    \ is based on a challenge-response mechanism.  The\n   A3/A8 authentication and\
    \ key derivation algorithms that run on the\n   SIM can be given a 128-bit random\
    \ number (RAND) as a challenge.  The\n   SIM runs operator-specific algorithms,\
    \ which take the RAND and a\n   secret key Ki (stored on the SIM) as input, and\
    \ produce a 32-bit\n   response (SRES) and a 64-bit long key Kc as output.  The\
    \ Kc key is\n   originally intended to be used as an encryption key over the air\n\
    \   interface, but in this protocol, it is used for deriving keying\n   material\
    \ and is not directly used.  Hence, the secrecy of Kc is\n   critical to the security\
    \ of this protocol.  For more information\n   about GSM authentication, see [GSM-03.20].\
    \  See Section 12.1 for more\n   discussion about the GSM algorithms used in EAP-SIM.\n\
    \   The lack of mutual authentication is a weakness in GSM\n   authentication.\
    \  The derived 64-bit cipher key (Kc) is not strong\n   enough for data networks\
    \ in which stronger and longer keys are\n   required.  Hence, in EAP-SIM, several\
    \ RAND challenges are used for\n   generating several 64-bit Kc keys, which are\
    \ combined to constitute\n   stronger keying material.  In EAP-SIM, the client\
    \ issues a random\n   number NONCE_MT to the network in order to contribute to\
    \ key\n   derivation, and to prevent replays of EAP-SIM requests from previous\n\
    \   exchanges.  The NONCE_MT can be conceived as the client's challenge\n   to\
    \ the network.  EAP-SIM also extends the combined RAND challenges\n   and other\
    \ messages with a message authentication code in order to\n   provide message\
    \ integrity protection along with mutual\n   authentication.\n   EAP-SIM specifies\
    \ optional support for protecting the privacy of\n   subscriber identity using\
    \ the same concept as the GSM, which uses\n   pseudonyms/temporary identifiers.\
    \  It also specifies an optional fast\n   re-authentication procedure.\n   The\
    \ security of EAP-SIM builds on underlying GSM mechanisms.  The\n   security properties\
    \ of EAP-SIM are documented in Section 11 of this\n   document.  Implementers\
    \ and users of EAP-SIM are advised to carefully\n   study the security considerations\
    \ in Section 11 in order to determine\n   whether the security properties are\
    \ sufficient for the environment in\n   question, especially as the secrecy of\
    \ Kc keys is essential to the\n   security of EAP-SIM.  In brief, EAP-SIM is in\
    \ no sense weaker than\n   the GSM mechanisms.  In some cases EAP-SIM provides\
    \ better security\n   properties than the underlying GSM mechanisms, particularly\
    \ if the\n   SIM credentials are only used for EAP-SIM and are not re-used from\n\
    \   GSM/GPRS.  Many of the security features of EAP-SIM rely upon the\n   secrecy\
    \ of the Kc values in the SIM triplets, so protecting these\n   values is key\
    \ to the security of the EAP-SIM protocol.\n   The 3rd Generation Partnership\
    \ Project (3GPP) has specified an\n   enhanced Authentication and Key Agreement\
    \ (AKA) architecture for the\n   Universal Mobile Telecommunications System (UMTS).\
    \  The 3rd\n   generation AKA mechanism includes mutual authentication, replay\n\
    \   protection, and derivation of longer session keys.  EAP-AKA [EAP-AKA]\n  \
    \ specifies an EAP method that is based on the 3rd generation AKA.\n   EAP-AKA,\
    \ which is a more secure protocol, may be used instead of\n   EAP-SIM, if 3rd\
    \ generation identity modules and 3G network\n   infrastructures are available.\n"
- title: 2.  Terms
  contents:
  - "2.  Terms\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",\
    \ \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and\
    \ \"OPTIONAL\" in this\n   document are to be interpreted as described in [RFC2119].\n\
    \   The terms and abbreviations \"authenticator\", \"backend authentication\n\
    \   server\", \"EAP server\", \"peer\", \"Silently Discard\", \"Master Session\n\
    \   Key (MSK)\", and \"Extended Master Session Key (EMSK)\" in this document\n\
    \   are to be interpreted as described in [RFC3748].\n   This document frequently\
    \ uses the following terms and abbreviations:\n   AAA protocol\n         Authentication,\
    \ Authorization, and Accounting protocol\n   AuC\n         Authentication Centre.\
    \  The GSM network element that provides\n         the authentication triplets\
    \ for authenticating\n         the subscriber.\n   Authentication vector\n   \
    \      GSM triplets can be alternatively called authentication\n         vectors.\n\
    \   EAP\n         Extensible Authentication Protocol\n   Fast re-authentication\n\
    \         An EAP-SIM authentication exchange that is based on keys\n         derived\
    \ upon a preceding full authentication exchange.\n         The GSM authentication\
    \ and key exchange algorithms are not\n         used in the fast re-authentication\
    \ procedure.\n   Fast Re-authentication Identity\n         A fast re-authentication\
    \ identity of the peer, including an NAI\n         realm portion in environments\
    \ where a realm is used.  Used on\n         fast re-authentication only.\n   Fast\
    \ Re-authentication Username\n         The username portion of fast re-authentication\
    \ identity,\n         i.e., not including any realm portions.\n   Full authentication\n\
    \         An EAP-SIM authentication exchange based on the GSM\n         authentication\
    \ and key agreement algorithms.\n   GSM\n         Global System for Mobile communications.\n\
    \   GSM Triplet\n         The tuple formed by the three GSM authentication values\
    \ RAND,\n         Kc, and SRES.\n   IMSI\n         International Mobile Subscriber\
    \ Identifier, used in GSM to\n         identify subscribers.\n   MAC\n       \
    \  Message Authentication Code\n   NAI\n         Network Access Identifier\n \
    \  Nonce\n         A value that is used at most once or that is never repeated\n\
    \         within the same cryptographic context.  In general, a nonce can\n  \
    \       be predictable (e.g., a counter) or unpredictable (e.g., a\n         random\
    \ value).  Since some cryptographic properties may depend\n         on the randomness\
    \ of the nonce, attention should be paid to\n         whether a nonce is required\
    \ to be random or not.  In this\n         document, the term nonce is only used\
    \ to denote random nonces,\n         and it is not used to denote counters.\n\
    \   Permanent Identity\n         The permanent identity of the peer, including\
    \ an NAI realm\n         portion in environments where a realm is used.  The permanent\n\
    \         identity is usually based on the IMSI.  Used on full\n         authentication\
    \ only.\n   Permanent Username\n         The username portion of permanent identity,\
    \ i.e., not including\n         any realm portions.\n   Pseudonym Identity\n \
    \        A pseudonym identity of the peer, including an NAI realm\n         portion\
    \ in environments where a realm is used.  Used on\n         full authentication\
    \ only.\n   Pseudonym Username\n         The username portion of pseudonym identity,\
    \ i.e., not including\n         any realm portions.\n   SIM\n         Subscriber\
    \ Identity Module.  The SIM is traditionally a smart\n         card distributed\
    \ by a GSM operator.\n"
- title: 3.  Overview
  contents:
  - "3.  Overview\n   Figure 1 shows an overview of the EAP-SIM full authentication\n\
    \   procedure, wherein optional protected success indications are not\n   used.\
    \  The authenticator typically communicates with an EAP server\n   that is located\
    \ on a backend authentication server using an AAA\n   protocol.  The authenticator\
    \ shown in the figure is often simply\n   relaying EAP messages to and from the\
    \ EAP server, but these backend\n   AAA communications are not shown.\n     Peer\
    \                                               Authenticator\n       |      \
    \                         EAP-Request/Identity       |\n       |<---------------------------------------------------------|\n\
    \       |                                                          |\n       |\
    \ EAP-Response/Identity                                    |\n       |--------------------------------------------------------->|\n\
    \       |                                                          |\n       |\
    \                  EAP-Request/SIM/Start (AT_VERSION_LIST) |\n       |<---------------------------------------------------------|\n\
    \       |                                                          |\n       |\
    \ EAP-Response/SIM/Start (AT_NONCE_MT, AT_SELECTED_VERSION)|\n       |--------------------------------------------------------->|\n\
    \       |                                                          |\n       |\
    \           EAP-Request/SIM/Challenge (AT_RAND, AT_MAC)    |\n       |<---------------------------------------------------------|\n\
    \   +-------------------------------------+                        |\n   | Peer\
    \ runs GSM algorithms, verifies  |                        |\n   | AT_MAC and derives\
    \ session keys     |                        |\n   +-------------------------------------+\
    \                        |\n       | EAP-Response/SIM/Challenge (AT_MAC)     \
    \                 |\n       |--------------------------------------------------------->|\n\
    \       |                                                          |\n       |\
    \                                             EAP-Success  |\n       |<---------------------------------------------------------|\n\
    \       |                                                          |\n       \
    \     Figure 1: EAP-SIM full authentication procedure\n   The first EAP Request\
    \ issued by the authenticator is\n   EAP-Request/Identity.  On full authentication,\
    \ the peer's response\n   includes either the user's International Mobile Subscriber\
    \ Identity\n   (IMSI) or a temporary identity (pseudonym) if identity privacy\
    \ is in\n   effect, as specified in Section 4.2.\n   Following the peer's EAP-Response/Identity\
    \ packet, the peer receives\n   EAP Requests of Type 18 (SIM) from the EAP server\
    \ and sends the\n   corresponding EAP Responses.  The EAP packets that are of\
    \ the Type\n   SIM also have a Subtype field.  On full authentication, the first\n\
    \   EAP-Request/SIM packet is of the Subtype 10 (Start).  EAP-SIM packets\n  \
    \ encapsulate parameters in attributes, encoded in a Type, Length,\n   Value format.\
    \  The packet format and the use of attributes are\n   specified in Section 8.\n\
    \   The EAP-Request/SIM/Start packet contains the list of EAP-SIM\n   versions\
    \ supported by the EAP server in the AT_VERSION_LIST\n   attribute.  This packet\
    \ may also include attributes for requesting\n   the subscriber identity, as specified\
    \ in Section 4.2.\n   The peer responds to a EAP-Request/SIM/Start with the\n\
    \   EAP-Response/SIM/Start packet, which includes the AT_NONCE_MT\n   attribute\
    \ that contains a random number NONCE_MT, chosen by the peer,\n   and the AT_SELECTED_VERSION\
    \ attribute that contains the version\n   number selected by the peer.  The version\
    \ negotiation is protected by\n   including the version list and the selected\
    \ version in the\n   calculation of keying material (Section 7).\n   After receiving\
    \ the EAP Response/SIM/Start, the EAP server obtains n\n   GSM triplets for use\
    \ in authenticating the subscriber, where n = 2 or\n   n = 3.  From the triplets,\
    \ the EAP server derives the keying\n   material, as specified in Section 7. \
    \ The triplets may be obtained by\n   contacting an Authentication Centre (AuC)\
    \ on the GSM network; per GSM\n   specifications, between 1 and 5 triplets may\
    \ be obtained at a time.\n   Triplets may be stored in the EAP server for use\
    \ at a later time, but\n   triplets MUST NOT be re-used, except in some error\
    \ cases that are\n   specified in Section 10.9.\n   The next EAP Request the EAP\
    \ Server issues is of the type SIM and\n   subtype Challenge (11).  It contains\
    \ the RAND challenges and a\n   message authentication code attribute AT_MAC to\
    \ cover the challenges.\n   The AT_MAC attribute is a general message authentication\
    \ code\n   attribute that is used in many EAP-SIM messages.\n   On receipt of\
    \ the EAP-Request/SIM/Challenge message, the peer runs\n   the GSM authentication\
    \ algorithm and calculates a copy of the message\n   authentication code.  The\
    \ peer then verifies that the calculated MAC\n   equals the received MAC.  If\
    \ the MAC's do not match, then the peer\n   sends the EAP-Response/SIM/Client-Error\
    \ packet and the authentication\n   exchange terminates.\n   Since the RANDs given\
    \ to a peer are accompanied by the message\n   authentication code AT_MAC, and\
    \ since the peer's NONCE_MT value\n   contributes to AT_MAC, the peer is able\
    \ to verify that the EAP-SIM\n   message is fresh (i.e., not a replay) and that\
    \ the sender possesses\n   valid GSM triplets for the subscriber.\n   If all checks\
    \ out, the peer responds with the\n   EAP-Response/SIM/Challenge, containing the\
    \ AT_MAC attribute that\n   covers the peer's SRES response values (Section 9.4).\
    \  The EAP server\n   verifies that the MAC is correct.  Because protected success\n\
    \   indications are not used in this example, the EAP server sends the\n   EAP-Success\
    \ packet, indicating that the authentication was\n   successful.  (Protected success\
    \ indications are discussed in\n   Section 6.2.)  The EAP server may also include\
    \ derived keying\n   material in the message it sends to the authenticator.  The\
    \ peer has\n   derived the same keying material, so the authenticator does not\n\
    \   forward the keying material to the peer along with EAP-Success.\n   EAP-SIM\
    \ also includes a separate fast re-authentication procedure\n   that does not\
    \ make use of the A3/A8 algorithms or the GSM\n   infrastructure.  Fast re-authentication\
    \ is based on keys derived on\n   full authentication.  If the peer has maintained\
    \ state information\n   for fast re-authentication and wants to use fast re-authentication,\n\
    \   then the peer indicates this by using a specific fast\n   re-authentication\
    \ identity instead of the permanent identity or a\n   pseudonym identity.  The\
    \ fast re-authentication procedure is\n   described in Section 5.\n"
- title: 4.  Operation
  contents:
  - '4.  Operation

    '
- title: 4.1.  Version Negotiation
  contents:
  - "4.1.  Version Negotiation\n   EAP-SIM includes version negotiation so as to allow\
    \ future\n   developments in the protocol.  The version negotiation is performed\n\
    \   on full authentication and it uses two attributes, AT_VERSION_LIST,\n   which\
    \ the server always includes in EAP-Request/SIM/Start, and\n   AT_SELECTED_VERSION,\
    \ which the peer includes in\n   EAP-Response/SIM/Start on full authentication.\n\
    \   AT_VERSION_LIST includes the EAP-SIM versions supported by the\n   server.\
    \  If AT_VERSION_LIST does not include a version that is\n   implemented by the\
    \ peer and allowed in the peer's security policy,\n   then the peer MUST send\
    \ the EAP-Response/SIM/Client-Error packet\n   (Section 9.7) to the server with\
    \ the error code \"unsupported\n   version\".  If a suitable version is included,\
    \ then the peer includes\n   the AT_SELECTED_VERSION attribute, containing the\
    \ selected version in\n   the EAP-Response/SIM/Start packet.  The peer MUST only\
    \ indicate a\n   version that is included in the AT_VERSION_LIST.  If several\
    \ versions\n   are acceptable, then the peer SHOULD choose the version that occurs\n\
    \   first in the version list.\n   The version number list of AT_VERSION_LIST\
    \ and the selected version\n   of AT_SELECTED_VERSION are included in the key\
    \ derivation procedure\n   (Section 7).  If an attacker modifies either one of\
    \ these attributes,\n   then the peer and the server derive different keying material.\n\
    \   Because K_aut keys are different, the server and peer calculate\n   different\
    \ AT_MAC values.  Hence, the peer detects that AT_MAC,\n   included in EAP-Request/SIM/Challenge,\
    \ is incorrect and sends the\n   EAP-Response/SIM/Client-Error packet.  The authentication\
    \ procedure\n   terminates.\n"
- title: 4.2.  Identity Management
  contents:
  - '4.2.  Identity Management

    '
- title: 4.2.1.  Format, Generation and Usage of Peer Identities
  contents:
  - '4.2.1.  Format, Generation and Usage of Peer Identities

    '
- title: 4.2.1.1.  General
  contents:
  - "4.2.1.1.  General\n   In the beginning of EAP authentication, the Authenticator\
    \ or the EAP\n   server usually issues the EAP-Request/Identity packet to the\
    \ peer.\n   The peer responds with the EAP-Response/Identity, which contains the\n\
    \   user's identity.  The formats of these packets are specified in\n   [RFC3748].\n\
    \   GSM subscribers are identified with the International Mobile\n   Subscriber\
    \ Identity (IMSI) [GSM-03.03].  The IMSI is a string of not\n   more than 15 digits.\
    \  It is composed of a three digit Mobile Country\n   Code (MCC), a two or three\
    \ digit Mobile Network Code (MNC), and a\n   Mobile Subscriber Identification\
    \ Number (MSIN) of no more than 10\n   digits.  MCC and MNC uniquely identify\
    \ the GSM operator and help\n   identify the AuC from which the authentication\
    \ vectors need to be\n   retrieved for this subscriber.\n   Internet AAA protocols\
    \ identify users with the Network Access\n   Identifier (NAI) [RFC4282].  When\
    \ used in a roaming environment, the\n   NAI is composed of a username and a realm,\
    \ separated with \"@\"\n   (username@realm).  The username portion identifies\
    \ the subscriber\n   within the realm.\n   This section specifies the peer identity\
    \ format used in EAP-SIM.  In\n   this document, the term \"identity\" or \"peer\
    \ identity\" refers to the\n   whole identity string that is used to identify\
    \ the peer.  The peer\n   identity may include a realm portion.  \"Username\"\
    \ refers to the\n   portion of the peer identity that identifies the user, i.e.,\
    \ the\n   username does not include the realm portion.\n"
- title: 4.2.1.2.  Identity Privacy Support
  contents:
  - "4.2.1.2.  Identity Privacy Support\n   EAP-SIM includes optional identity privacy\
    \ (anonymity) support that\n   can be used to hide the cleartext permanent identity\
    \ and thereby make\n   the subscriber's EAP exchanges untraceable to eavesdroppers.\
    \  Because\n   the permanent identity never changes, revealing it would help\n\
    \   observers to track the user.  The permanent identity is usually based\n  \
    \ on the IMSI, which may further help the tracking, because the same\n   identifier\
    \ may be used in other contexts as well.  Identity privacy\n   is based on temporary\
    \ identities, or pseudonyms, which are equivalent\n   to but separate from the\
    \ Temporary Mobile Subscriber Identities\n   (TMSI) that are used on cellular\
    \ networks.  Please see Section 12.2\n   for security considerations regarding\
    \ identity privacy.\n"
- title: 4.2.1.3.  Username Types in EAP-SIM identities
  contents:
  - "4.2.1.3.  Username Types in EAP-SIM identities\n   There are three types of usernames\
    \ in EAP-SIM peer identities:\n   (1) Permanent usernames.  For example,\n   1123456789098765@myoperator.com\
    \ might be a valid permanent identity.\n   In this example, 1123456789098765 is\
    \ the permanent username.\n   (2) Pseudonym usernames.  For example, 3s7ah6n9q@myoperator.com\
    \ might\n   be a valid pseudonym identity.  In this example, 3s7ah6n9q is the\n\
    \   pseudonym username.\n   (3) Fast re-authentication usernames.  For example,\n\
    \   53953754@myoperator.com might be a valid fast re-authentication\n   identity.\
    \  In this case, 53953754 is the fast re-authentication\n   username.  Unlike\
    \ permanent usernames and pseudonym usernames, fast\n   re-authentication usernames\
    \ are one-time identifiers, which are not\n   re-used across EAP exchanges.\n\
    \   The first two types of identities are used only on full\n   authentication\
    \ and the last one only on fast re-authentication.  When\n   the optional identity\
    \ privacy support is not used, the non-pseudonym\n   permanent identity is used\
    \ on full authentication.  The fast\n   re-authentication exchange is specified\
    \ in Section 5.\n"
- title: 4.2.1.4.  Username Decoration
  contents:
  - "4.2.1.4.  Username Decoration\n   In some environments, the peer may need to\
    \ decorate the identity by\n   prepending or appending the username with a string,\
    \ in order to\n   indicate supplementary AAA routing information in addition to\
    \ the NAI\n   realm.  (The usage of an NAI realm portion is not considered\n \
    \  decoration.)  Username decoration is out of the scope of this\n   document.\
    \  However, it should be noted that username decoration might\n   prevent the\
    \ server from recognizing a valid username.  Hence,\n   although the peer MAY\
    \ use username decoration in the identities that\n   the peer includes in EAP-Response/Identity,\
    \ and although the EAP\n   server MAY accept a decorated peer username in this\
    \ message, the peer\n   or the EAP server MUST NOT decorate any other peer identities\
    \ that\n   are used in various EAP-SIM attributes.  Only the identity used in\n\
    \   the EAP-Response/Identity may be decorated.\n"
- title: 4.2.1.5.  NAI Realm Portion
  contents:
  - "4.2.1.5.  NAI Realm Portion\n   The peer MAY include a realm portion in the peer\
    \ identity, as per the\n   NAI format.  The use of a realm portion is not mandatory.\n\
    \   If a realm is used, the realm MAY be chosen by the subscriber's home\n   operator\
    \ and it MAY be a configurable parameter in the EAP-SIM peer\n   implementation.\
    \  In this case, the peer is typically configured with\n   the NAI realm of the\
    \ home operator.  Operators MAY reserve a specific\n   realm name for EAP-SIM\
    \ users.  This convention makes it easy to\n   recognize that the NAI identifies\
    \ a GSM subscriber.  Such a reserved\n   NAI realm may be a useful hint as to\
    \ the first authentication method\n   to use during method negotiation.  When\
    \ the peer is using a pseudonym\n   username instead of the permanent username,\
    \ the peer selects the\n   realm name portion similarly as it select the realm\
    \ portion when\n   using the permanent username.\n   If no configured realm name\
    \ is available, the peer MAY derive the\n   realm name from the MCC and MNC portions\
    \ of the IMSI.  A RECOMMENDED\n   way to derive the realm from the IMSI using\
    \ the realm 3gppnetwork.org\n   is specified in [3GPP-TS-23.003].\n   Some old\
    \ implementations derive the realm name from the IMSI by\n   concatenating \"\
    mnc\", the MNC digits of IMSI, \".mcc\", the MCC digits\n   of IMSI, and \".owlan.org\"\
    .  For example, if the IMSI is\n   123456789098765, and the MNC is three digits\
    \ long, then the derived\n   realm name is \"mnc456.mcc123.owlan.org\".  As there\
    \ are no DNS servers\n   running at owlan.org, these realm names can only be used\
    \ with\n   manually configured AAA routing.  New implementations SHOULD use the\n\
    \   mechanism specified in [3GPP-TS-23.003] instead of owlan.org.\n   The IMSI\
    \ is a string of digits without any explicit structure, so the\n   peer may not\
    \ be able to determine the length of the MNC portion.  If\n   the peer is not\
    \ able to determine whether the MNC is two or three\n   digits long, the peer\
    \ MAY use a 3-digit MNC.  If the correct length\n   of the MNC is two, then the\
    \ MNC used in the realm name includes the\n   first digit of the MSIN.  Hence,\
    \ when configuring AAA networks for\n   operators that have 2-digit MNCs, the\
    \ network SHOULD also be prepared\n   for realm names with incorrect, 3-digit\
    \ MNCs.\n"
- title: 4.2.1.6.  Format of the Permanent Username
  contents:
  - "4.2.1.6.  Format of the Permanent Username\n   The non-pseudonym permanent username\
    \ SHOULD be derived from the IMSI.\n   In this case, the permanent username MUST\
    \ be of the format \"1\" |\n   IMSI, where the character \"|\" denotes concatenation.\
    \  In other words,\n   the first character of the username is the digit one (ASCII\
    \ value 31\n   hexadecimal), followed by the IMSI.  The IMSI is encoded as an\
    \ ASCII\n   string that consists of not more than 15 decimal digits (ASCII values\n\
    \   between 30 and 39 hexadecimal), one character per IMSI digit, in the\n   order\
    \ specified in [GSM-03.03].  For example, a permanent username\n   derived from\
    \ the IMSI 295023820005424 would be encoded as the ASCII\n   string \"1295023820005424\"\
    \ (byte values in hexadecimal notation: 31 32\n   39 35 30 32 33 38 32 30 30 30\
    \ 35 34 32 34).\n   The EAP server MAY use the leading \"1\" as a hint to try\
    \ EAP-SIM as\n   the first authentication method during method negotiation, rather\n\
    \   than, for example EAP/AKA.  The EAP-SIM server MAY propose EAP-SIM,\n   even\
    \ if the leading character was not \"1\".\n   Alternatively, an implementation\
    \ MAY choose a permanent username that\n   is not based on the IMSI.  In this\
    \ case, the selection of the\n   username, its format, and its processing is out\
    \ of the scope of this\n   document.  In this case, the peer implementation MUST\
    \ NOT prepend any\n   leading characters to the username.\n"
- title: 4.2.1.7.  Generating Pseudonyms and Fast Re-authentication Identities by
  contents:
  - "4.2.1.7.  Generating Pseudonyms and Fast Re-authentication Identities by\n  \
    \        the Server\n   Pseudonym usernames and fast re-authentication identities\
    \ are\n   generated by the EAP server.  The EAP server produces pseudonym\n  \
    \ usernames and fast re-authentication identities in an\n   implementation-dependent\
    \ manner.  Only the EAP server needs to be\n   able to map the pseudonym username\
    \ to the permanent identity, or to\n   recognize a fast re-authentication identity.\n\
    \   EAP-SIM includes no provisions to ensure that the same EAP server\n   that\
    \ generated a pseudonym username will be used on the\n   authentication exchange\
    \ when the pseudonym username is used.  It is\n   recommended that the EAP servers\
    \ implement some centralized mechanism\n   to allow all EAP servers of the home\
    \ operator to map pseudonyms\n   generated by other severs to the permanent identity.\
    \  If no such\n   mechanism is available, then the EAP server failing to understand\
    \ a\n   pseudonym issued by another server can request the that peer send the\n\
    \   permanent identity.\n   When issuing a fast re-authentication identity, the\
    \ EAP server may\n   include a realm name in the identity to make the fast\n \
    \  re-authentication request be forwarded to the same EAP server.\n   When generating\
    \ fast re-authentication identities, the server SHOULD\n   choose a fresh, new\
    \ fast re-authentication identity that is different\n   from the previous ones\
    \ that were used after the same full\n   authentication exchange.  A full authentication\
    \ exchange and the\n   associated fast re-authentication exchanges are referred\
    \ to here as\n   the same \"full authentication context\".  The fast re-authentication\n\
    \   identity SHOULD include a random component.  This random component\n   works\
    \ as a full authentication context identifier.  A\n   context-specific fast re-authentication\
    \ identity can help the server\n   to detect whether its fast re-authentication\
    \ state information\n   matches that of its peer (in other words, whether the\
    \ state\n   information is from the same full authentication exchange).  The\n\
    \   random component also makes the fast re-authentication identities\n   unpredictable,\
    \ so an attacker cannot initiate a fast\n   re-authentication exchange to get\
    \ the server's EAP-Request/SIM/\n   Re-authentication packet.\n   Transmitting\
    \ pseudonyms and fast re-authentication identities from\n   the server to the\
    \ peer is discussed in Section 4.2.1.8.  The\n   pseudonym is transmitted as a\
    \ username, without an NAI realm, and the\n   fast re-authentication identity\
    \ is transmitted as a complete NAI,\n   including a realm portion if a realm is\
    \ required.  The realm is\n   included in the fast re-authentication identity\
    \ to allow the server\n   to include a server-specific realm.\n   Regardless of\
    \ the construction method, the pseudonym username MUST\n   conform to the grammar\
    \ specified for the username portion of an NAI.\n   The fast re-authentication\
    \ identity also MUST conform to the NAI\n   grammar.  The EAP servers that the\
    \ subscribers of an operator can use\n   MUST ensure that the pseudonym usernames\
    \ and the username portions\n   used in fast re-authentication identities they\
    \ generate are unique.\n   In any case, it is necessary that permanent usernames,\
    \ pseudonym\n   usernames, and fast re-authentication usernames are separate and\n\
    \   recognizable from each other.  It is also desirable that EAP-SIM and\n   EAP-AKA\
    \ [EAP-AKA] usernames be distinguishable from each other as an\n   aid for the\
    \ server on which method to offer.\n   In general, it is the task of the EAP server\
    \ and the policies of its\n   administrator to ensure sufficient separation of\
    \ the usernames.\n   Pseudonym usernames and fast re-authentication usernames\
    \ are both\n   produced and used by the EAP server.  The EAP server MUST compose\n\
    \   pseudonym usernames and fast re-authentication usernames so that it\n   can\
    \ determine if an NAI username is an EAP-SIM pseudonym username or\n   an EAP-SIM\
    \ fast re-authentication username.  For instance, when the\n   usernames have\
    \ been derived from the IMSI, the server could use\n   different leading characters\
    \ in the pseudonym usernames and fast\n   re-authentication usernames (e.g., the\
    \ pseudonym could begin with a\n   leading \"3\" character).  When mapping a fast\
    \ re-authentication\n   identity to a permanent identity, the server SHOULD only\
    \ examine the\n   username portion of the fast re-authentication identity and\
    \ ignore\n   the realm portion of the identity.\n   Because the peer may fail\
    \ to save a pseudonym username sent in an\n   EAP-Request/SIM/Challenge, for example\
    \ due to malfunction, the EAP\n   server SHOULD maintain at least the most recently\
    \ used pseudonym\n   username in addition to the most recently issued pseudonym\
    \ username.\n   If the authentication exchange is not completed successfully,\
    \ then\n   the server SHOULD NOT overwrite the pseudonym username that was\n \
    \  issued during the most recent successful authentication exchange.\n"
- title: 4.2.1.8.  Transmitting Pseudonyms and Fast Re-authentication Identities
  contents:
  - "4.2.1.8.  Transmitting Pseudonyms and Fast Re-authentication Identities\n   \
    \       to the Peer\n   The server transmits pseudonym usernames and fast re-authentication\n\
    \   identities to the peer in cipher, using the AT_ENCR_DATA attribute.\n   The\
    \ EAP-Request/SIM/Challenge message MAY include an encrypted\n   pseudonym username\
    \ and/or an encrypted fast re-authentication\n   identity in the value field of\
    \ the AT_ENCR_DATA attribute.  Because\n   identity privacy support and fast re-authentication\
    \ are optional\n   implementations, the peer MAY ignore the AT_ENCR_DATA attribute\
    \ and\n   always use the permanent identity.  On fast re-authentication\n   (discussed\
    \ in Section 5), the server MAY include a new, encrypted\n   fast re-authentication\
    \ identity in the\n   EAP-Request/SIM/Re-authentication message.\n   On receipt\
    \ of the EAP-Request/SIM/Challenge, the peer MAY decrypt the\n   encrypted data\
    \ in AT_ENCR_DATA.  If the authentication exchange is\n   successful, and the\
    \ encrypted data includes a pseudonym username,\n   then the peer may use the\
    \ obtained pseudonym username on the next\n   full authentication.  If a fast\
    \ re-authentication identity is\n   included, then the peer MAY save it together\
    \ with other fast\n   re-authentication state information, as discussed in Section\
    \ 5, for\n   the next fast re-authentication.  If the authentication exchange\
    \ does\n   not complete successfully, the peer MUST ignore the received\n   pseudonym\
    \ username and the fast re-authentication identity.\n   If the peer does not receive\
    \ a new pseudonym username in the\n   EAP-Request/SIM/Challenge message, the peer\
    \ MAY use an old pseudonym\n   username instead of the permanent username on the\
    \ next full\n   authentication.  The username portions of fast re-authentication\n\
    \   identities are one-time usernames, which the peer MUST NOT re-use.\n   When\
    \ the peer uses a fast re-authentication identity in an EAP\n   exchange, the\
    \ peer MUST discard the fast re-authentication identity\n   and not re-use it\
    \ in another EAP authentication exchange, even if the\n   authentication exchange\
    \ was not completed.\n"
- title: 4.2.1.9.  Usage of the Pseudonym by the Peer
  contents:
  - "4.2.1.9.  Usage of the Pseudonym by the Peer\n   When the optional identity privacy\
    \ support is used on full\n   authentication, the peer MAY use a pseudonym username\
    \ received as\n   part of a previous full authentication sequence as the username\n\
    \   portion of the NAI.  The peer MUST NOT modify the pseudonym username\n   received\
    \ in AT_NEXT_PSEUDONYM.  However, as discussed above, the peer\n   MAY need to\
    \ decorate the username in some environments by appending\n   or prepending the\
    \ username with a string that indicates supplementary\n   AAA routing information.\n\
    \   When using a pseudonym username in an environment where a realm\n   portion\
    \ is used, the peer concatenates the received pseudonym\n   username with the\
    \ \"@\" character and an NAI realm portion.  The\n   selection of the NAI realm\
    \ is discussed above.  The peer can select\n   the realm portion similarly, regardless\
    \ of whether it uses the\n   permanent username or a pseudonym username.\n"
- title: 4.2.1.10.  Usage of the Fast Re-authentication Identity by the Peer
  contents:
  - "4.2.1.10.  Usage of the Fast Re-authentication Identity by the Peer\n   On fast\
    \ re-authentication, the peer uses the fast re-authentication\n   identity that\
    \ was received as part of the previous authentication\n   sequence.  A new re-authentication\
    \ identity may be delivered as part\n   of both full authentication and fast re-authentication.\
    \  The peer\n   MUST NOT modify the username part of the fast re-authentication\n\
    \   identity received in AT_NEXT_REAUTH_ID, except in cases when username\n  \
    \ decoration is required.  Even in these cases, the \"root\" fast\n   re-authentication\
    \ username must not be modified, but it may be\n   appended or prepended with\
    \ another string.\n"
- title: 4.2.2.  Communicating the Peer Identity to the Server
  contents:
  - '4.2.2.  Communicating the Peer Identity to the Server

    '
- title: 4.2.2.1.  General
  contents:
  - "4.2.2.1.  General\n   The peer identity MAY be communicated to the server with\
    \ the\n   EAP-Response/Identity message.  This message MAY contain the\n   permanent\
    \ identity, a pseudonym identity, or a fast re-authentication\n   identity.  If\
    \ the peer uses the permanent identity or a pseudonym\n   identity, which the\
    \ server is able to map to the permanent identity,\n   then the authentication\
    \ proceeds as discussed in the overview of\n   Section 3.  If the peer uses a\
    \ fast re-authentication identity, and\n   if the fast re-authentication identity\
    \ matches with a valid fast\n   re-authentication identity maintained by the server,\
    \ and if the\n   server agrees to use fast re-authentication, then a fast\n  \
    \ re-authentication exchange is performed, as described in Section 5.\n   The\
    \ peer identity can also be transmitted from the peer to the server\n   using\
    \ EAP-SIM messages instead of the EAP-Response/Identity.  In this\n   case, the\
    \ server includes an identity-requesting attribute\n   (AT_ANY_ID_REQ, AT_FULLAUTH_ID_REQ\
    \ or AT_PERMANENT_ID_REQ) in the\n   EAP-Request/SIM/Start message, and the peer\
    \ includes the AT_IDENTITY\n   attribute, which contains the peer's identity,\
    \ in the\n   EAP-Response/SIM/Start message.  The AT_ANY_ID_REQ attribute is a\n\
    \   general identity-requesting attribute, which the server uses if it\n   does\
    \ not specify which kind of an identity the peer should return in\n   AT_IDENTITY.\
    \  The server uses the AT_FULLAUTH_ID_REQ attribute to\n   request either the\
    \ permanent identity or a pseudonym identity.  The\n   server uses the AT_PERMANENT_ID_REQ\
    \ attribute to request that the\n   peer send its permanent identity.\n   The\
    \ identity format in the AT_IDENTITY attribute is the same as in\n   the EAP-Response/Identity\
    \ packet (except that identity decoration is\n   not allowed).  The AT_IDENTITY\
    \ attribute contains a permanent\n   identity, a pseudonym identity, or a fast\
    \ re-authentication identity.\n   Please note that the EAP-SIM peer and the EAP-SIM\
    \ server only process\n   the AT_IDENTITY attribute; entities that only pass through\
    \ EAP\n   packets do not process this attribute.  Hence, the authenticator and\n\
    \   other intermediate AAA elements (such as possible AAA proxy servers)\n   will\
    \ continue to refer to the peer with the original identity from\n   the EAP-Response/Identity\
    \ packet unless the identity authenticated in\n   the AT_IDENTITY attribute is\
    \ communicated to them in another way\n   within the AAA protocol.\n"
- title: 4.2.2.2.  Relying on EAP-Response/Identity Discouraged
  contents:
  - "4.2.2.2.  Relying on EAP-Response/Identity Discouraged\n   The EAP-Response/Identity\
    \ packet is not method-specific, so in many\n   implementations it may be handled\
    \ by an EAP Framework.  This\n   introduces an additional layer of processing\
    \ between the EAP peer and\n   EAP server.  The extra layer of processing may\
    \ cache identity\n   responses or add decorations to the identity.  A modification\
    \ of the\n   identity response will cause the EAP peer and EAP server to use\n\
    \   different identities in the key derivation, which will cause the\n   protocol\
    \ to fail.\n   For this reason, it is RECOMMENDED that the EAP peer and server\
    \ use\n   the method-specific identity attributes in EAP-SIM, and the server is\n\
    \   strongly discouraged from relying upon the EAP-Response/Identity.\n   In particular,\
    \ if the EAP server receives a decorated identity in\n   EAP-Response/Identity,\
    \ then the EAP server MUST use the\n   identity-requesting attributes to request\
    \ that the peer send an\n   unmodified and undecorated copy of the identity in\
    \ AT_IDENTITY.\n"
- title: 4.2.3.  Choice of Identity for the EAP-Response/Identity
  contents:
  - "4.2.3.  Choice of Identity for the EAP-Response/Identity\n   If EAP-SIM peer\
    \ is started upon receiving an EAP-Request/Identity\n   message, then the peer\
    \ MAY use an EAP-SIM identity in the EAP-\n   Response/Identity packet.  In this\
    \ case, the peer performs the\n   following steps.\n   If the peer has maintained\
    \ fast re-authentication state information\n   and wants to use fast re-authentication,\
    \ then the peer transmits the\n   fast re-authentication identity in EAP-Response/Identity.\n\
    \   Else, if the peer has a pseudonym username available, then the peer\n   transmits\
    \ the pseudonym identity in EAP-Response/Identity.\n   In other cases, the peer\
    \ transmits the permanent identity in\n   EAP-Response/Identity.\n"
- title: 4.2.4.  Server Operation in the Beginning of EAP-SIM Exchange
  contents:
  - "4.2.4.  Server Operation in the Beginning of EAP-SIM Exchange\n   As discussed\
    \ in Section 4.2.2.2, the server SHOULD NOT rely on an\n   identity string received\
    \ in EAP-Response/Identity.  Therefore, the\n   RECOMMENDED way to start an EAP-SIM\
    \ exchange is to ignore any\n   received identity strings.  The server SHOULD\
    \ begin the EAP-SIM\n   exchange by issuing the EAP-Request/SIM/Start packet with\
    \ an\n   identity-requesting attribute to indicate that the server wants the\n\
    \   peer to include an identity in the AT_IDENTITY attribute of the EAP-\n   Response/SIM/Start\
    \ message.  Three methods to request an identity\n   from the peer are discussed\
    \ below.\n   If the server chooses not to ignore the contents of EAP-\n   Response/Identity,\
    \ then the server may have already received an EAP-\n   SIM identity in this packet.\
    \  However, if the EAP server has not\n   received any EAP-SIM peer identity (permanent\
    \ identity, pseudonym\n   identity, or fast re-authentication identity) from the\
    \ peer when\n   sending the first EAP-SIM request, or if the EAP server has received\n\
    \   an EAP-Response/Identity packet but the contents do not appear to be\n   a\
    \ valid permanent identity, pseudonym identity or a re-authentication\n   identity,\
    \ then the server MUST request an identity from the peer\n   using one of the\
    \ methods below.\n   The server sends the EAP-Request/SIM/Start message with the\n\
    \   AT_PERMANENT_ID_REQ attribute to indicate that the server wants the\n   peer\
    \ to include the permanent identity in the AT_IDENTITY attribute\n   of the EAP-Response/SIM/Start\
    \ message.  This is done in the following\n   cases:\n   o  The server does not\
    \ support fast re-authentication or identity\n      privacy.\n   o  The server\
    \ decided to process a received identity, and the server\n      recognizes the\
    \ received identity as a pseudonym identity but the\n      server is not able\
    \ to map the pseudonym identity to a permanent\n      identity.\n   The server\
    \ issues the EAP-Request/SIM/Start packet with the\n   AT_FULLAUTH_ID_REQ attribute\
    \ to indicate that the server wants the\n   peer to include a full authentication\
    \ identity (pseudonym identity or\n   permanent identity) in the AT_IDENTITY attribute\
    \ of the\n   EAP-Response/SIM/Start message.  This is done in the following cases:\n\
    \   o  The server does not support fast re-authentication and the server\n   \
    \   supports identity privacy.\n   o  The server decided to process a received\
    \ identity, and the server\n      recognizes the received identity as a re-authentication\
    \ identity\n      but the server is not able to map the re-authentication identity\n\
    \      to a permanent identity.\n   The server issues the EAP-Request/SIM/Start\
    \ packet with the\n   AT_ANY_ID_REQ attribute to indicate that the server wants\
    \ the peer to\n   include an identity in the AT_IDENTITY attribute of the\n  \
    \ EAP-Response/SIM/Start message, and the server does not indicate any\n   preferred\
    \ type for the identity.  This is done in other cases, such\n   as when the server\
    \ ignores a received EAP-Response/Identity, the\n   server does not have any identity,\
    \ or the server does not recognize\n   the format of a received identity.\n"
- title: 4.2.5.  Processing of EAP-Request/SIM/Start by the Peer
  contents:
  - "4.2.5.  Processing of EAP-Request/SIM/Start by the Peer\n   Upon receipt of an\
    \ EAP-Request/SIM/Start message, the peer MUST\n   perform the following steps.\n\
    \   If the EAP-Request/SIM/Start does not include an identity request\n   attribute,\
    \ then the peer responds with EAP-Response/SIM/Start without\n   AT_IDENTITY.\
    \  The peer includes the AT_SELECTED_VERSION and\n   AT_NONCE_MT attributes, because\
    \ the exchange is a full authentication\n   exchange.\n   If the EAP-Request/SIM/Start\
    \ includes AT_PERMANENT_ID_REQ, and if the\n   peer does not have a pseudonym\
    \ available, then the peer MUST respond\n   with EAP-Response/SIM/Start and include\
    \ the permanent identity in\n   AT_IDENTITY.  If the peer has a pseudonym available,\
    \ then the peer\n   MAY refuse to send the permanent identity; hence, in this\
    \ case the\n   peer MUST either respond with EAP-Response/SIM/Start and include\
    \ the\n   permanent identity in AT_IDENTITY or respond with EAP-Response/SIM/\n\
    \   Client-Error packet with the code \"unable to process packet\".\n   If the\
    \ EAP-Request/SIM/Start includes AT_FULL_AUTH_ID_REQ, and if the\n   peer has\
    \ a pseudonym available, then the peer SHOULD respond with\n   EAP-Response/SIM/Start\
    \ and include the pseudonym identity in\n   AT_IDENTITY.  If the peer does not\
    \ have a pseudonym when it receives\n   this message, then the peer MUST respond\
    \ with EAP-Response/SIM/Start\n   and include the permanent identity in AT_IDENTITY.\
    \  The Peer MUST NOT\n   use a re-authentication identity in the AT_IDENTITY attribute.\n\
    \   If the EAP-Request/SIM/Start includes AT_ANY_ID_REQ, and if the peer\n   has\
    \ maintained fast re-authentication state information and the peer\n   wants to\
    \ use fast re-authentication, then the peer responds with\n   EAP-Response/SIM/Start\
    \ and includes the fast re-authentication\n   identity in AT_IDENTITY.  Else,\
    \ if the peer has a pseudonym identity\n   available, then the peer responds with\
    \ EAP-Response/SIM/Start and\n   includes the pseudonym identity in AT_IDENTITY.\
    \  Else, the peer\n   responds with EAP-Response/SIM/Start and includes the permanent\n\
    \   identity in AT_IDENTITY.\n   An EAP-SIM exchange may include several EAP/SIM/Start\
    \ rounds.  The\n   server may issue a second EAP-Request/SIM/Start if it was not\
    \ able to\n   recognize the identity that the peer used in the previous AT_IDENTITY\n\
    \   attribute.  At most, three EAP/SIM/Start rounds can be used, so the\n   peer\
    \ MUST NOT respond to more than three EAP-Request/SIM/Start\n   messages within\
    \ an EAP exchange.  The peer MUST verify that the\n   sequence of EAP-Request/SIM/Start\
    \ packets that the peer receives\n   comply with the sequencing rules defined\
    \ in this document.  That is,\n   AT_ANY_ID_REQ can only be used in the first\
    \ EAP-Request/SIM/Start; in\n   other words, AT_ANY_ID_REQ MUST NOT be used in\
    \ the second or third\n   EAP-Request/SIM/Start.  AT_FULLAUTH_ID_REQ MUST NOT\
    \ be used if the\n   previous EAP-Request/SIM/Start included AT_PERMANENT_ID_REQ.\
    \  The\n   peer operation, in cases when it receives an unexpected attribute or\n\
    \   an unexpected message, is specified in Section 6.3.1.\n"
- title: 4.2.6.  Attacks Against Identity Privacy
  contents:
  - "4.2.6.  Attacks Against Identity Privacy\n   The section above specifies two\
    \ possible ways the peer can operate\n   upon receipt of AT_PERMANENT_ID_REQ.\
    \  This is because a received\n   AT_PERMANENT_ID_REQ does not necessarily originate\
    \ from the valid\n   network, but an active attacker may transmit an EAP-Request/SIM/\n\
    \   Start packet with an AT_PERMANENT_ID_REQ attribute to the peer, in an\n  \
    \ effort to find out the true identity of the user.  If the peer does\n   not\
    \ want to reveal its permanent identity, then the peer sends the\n   EAP-Response/SIM/Client-Error\
    \ packet with the error code \"unable to\n   process packet\", and the authentication\
    \ exchange terminates.\n   Basically, there are two different policies that the\
    \ peer can employ\n   with regard to AT_PERMANENT_ID_REQ.  A \"conservative\"\
    \ peer assumes\n   that the network is able to maintain pseudonyms robustly. \
    \ Therefore,\n   if a conservative peer has a pseudonym username, the peer responds\n\
    \   with EAP-Response/SIM/Client-Error to the EAP packet with\n   AT_PERMANENT_ID_REQ,\
    \ because the peer believes that the valid network\n   is able to map the pseudonym\
    \ identity to the peer's permanent\n   identity.  (Alternatively, the conservative\
    \ peer may accept\n   AT_PERMANENT_ID_REQ in certain circumstances, for example,\
    \ if the\n   pseudonym was received a long time ago.)  The benefit of this policy\n\
    \   is that it protects the peer against active attacks on anonymity.  On\n  \
    \ the other hand, a \"liberal\" peer always accepts the\n   AT_PERMANENT_ID_REQ\
    \ and responds with the permanent identity.  The\n   benefit of this policy is\
    \ that it works even if the valid network\n   sometimes loses pseudonyms and is\
    \ not able to map them to the\n   permanent identity.\n"
- title: 4.2.7.  Processing of AT_IDENTITY by the Server
  contents:
  - "4.2.7.  Processing of AT_IDENTITY by the Server\n   When the server receives\
    \ an EAP-Response/SIM/Start message with the\n   AT_IDENTITY (in response to the\
    \ server's identity requesting\n   attribute), the server MUST operate as follows.\n\
    \   If the server used AT_PERMANENT_ID_REQ, and if the AT_IDENTITY does\n   not\
    \ contain a valid permanent identity, then the server sends\n   EAP-Request/SIM/Notification\
    \ with AT_NOTIFICATION code \"General\n   failure\" (16384), and the EAP exchange\
    \ terminates.  If the server\n   recognizes the permanent identity and is able\
    \ to continue, then the\n   server proceeds with full authentication by sending\
    \ EAP-Request/SIM/\n   Challenge.\n   If the server used AT_FULLAUTH_ID_REQ, and\
    \ if AT_IDENTITY contains a\n   valid permanent identity or a pseudonym identity\
    \ that the server can\n   map to a valid permanent identity, then the server proceeds\
    \ with full\n   authentication by sending EAP-Request/SIM/Challenge.  If AT_IDENTITY\n\
    \   contains a pseudonym identity that the server is not able to map to a\n  \
    \ valid permanent identity, or an identity that the server is not able\n   to\
    \ recognize or classify, then the server sends EAP-Request/SIM/Start\n   with\
    \ AT_PERMANENT_ID_REQ.\n   If the server used AT_ANY_ID_REQ, and if the AT_IDENTITY\
    \ contains a\n   valid permanent identity or a pseudonym identity that the server\
    \ can\n   map to a valid permanent identity, then the server proceeds with full\n\
    \   authentication by sending EAP-Request/SIM/Challenge.\n   If the server used\
    \ AT_ANY_ID_REQ, and if AT_IDENTITY contains a valid\n   fast re-authentication\
    \ identity and the server agrees on using\n   re-authentication, then the server\
    \ proceeds with fast\n   re-authentication by sending EAP-Request/SIM/Re-authentication\n\
    \   (Section 5).\n   If the server used AT_ANY_ID_REQ, and if the peer sent an\n\
    \   EAP-Response/SIM/Start with only AT_IDENTITY (indicating\n   re-authentication),\
    \ but the server is not able to map the identity to\n   a permanent identity,\
    \ then the server sends EAP-Request/SIM/Start\n   with AT_FULLAUTH_ID_REQ.\n \
    \  If the server used AT_ANY_ID_REQ, and if AT_IDENTITY contains a valid\n   fast\
    \ re-authentication identity that the server is able to map to a\n   permanent\
    \ identity, and if the server does not want to use fast\n   re-authentication,\
    \ then the server sends EAP-Request/SIM/Start\n   without any identity requesting\
    \ attributes.\n   If the server used AT_ANY_ID_REQ, and AT_IDENTITY contains an\n\
    \   identity that the server recognizes as a pseudonym identity but the\n   server\
    \ is not able to map the pseudonym identity to a permanent\n   identity, then\
    \ the server sends EAP-Request/SIM/Start with\n   AT_PERMANENT_ID_REQ.\n   If\
    \ the server used AT_ANY_ID_REQ, and AT_IDENTITY contains an\n   identity that\
    \ the server is not able to recognize or classify, then\n   the server sends EAP-Request/SIM/Start\
    \ with AT_FULLAUTH_ID_REQ.\n"
- title: 4.3.  Message Sequence Examples (Informative)
  contents:
  - "4.3.  Message Sequence Examples (Informative)\n   This section contains non-normative\
    \ message sequence examples to\n   illustrate how the peer identity can be communicated\
    \ to the server.\n"
- title: 4.3.1.  Full Authentication
  contents:
  - "4.3.1.  Full Authentication\n   This case for full authentication is illustrated\
    \ below in Figure 2.\n   In this case, AT_IDENTITY contains either the permanent\
    \ identity or a\n   pseudonym identity.  The same sequence is also used in case\
    \ the\n   server uses the AT_FULLAUTH_ID_REQ in EAP-Request/SIM/Start.\n     \
    \ Peer                                             Authenticator\n        |  \
    \                                                     |\n        |           \
    \                 +------------------------------+\n        |                \
    \            | Server does not have a       |\n        |                     \
    \       | Subscriber identity available|\n        |                          \
    \  | When starting EAP-SIM        |\n        |                            +------------------------------+\n\
    \        |                                                       |\n        |\
    \          EAP-Request/SIM/Start                        |\n        |         \
    \ (AT_ANY_ID_REQ, AT_VERSION_LIST)             |\n        |<------------------------------------------------------|\n\
    \        |                                                       |\n        |\
    \                                                       |\n        | EAP-Response/SIM/Start\
    \                                |\n        | (AT_IDENTITY, AT_NONCE_MT,     \
    \                       |\n        |  AT_SELECTED_VERSION)                   \
    \              |\n        |------------------------------------------------------>|\n\
    \        |                                                       |\n         Figure\
    \ 2: Requesting any identity, full authentication\n   If the peer uses its full\
    \ authentication identity and the AT_IDENTITY\n   attribute contains a valid permanent\
    \ identity or a valid pseudonym\n   identity that the EAP server is able to map\
    \ to the permanent\n   identity, then the full authentication sequence proceeds\
    \ as usual\n   with the EAP Server issuing the EAP-Request/SIM/Challenge message.\n"
- title: 4.3.2.  Fast Re-authentication
  contents:
  - "4.3.2.  Fast Re-authentication\n   The case when the server uses the AT_ANY_ID_REQ\
    \ and the peer wants to\n   perform fast re-authentication is illustrated below\
    \ in Figure 3.\n      Peer                                             Authenticator\n\
    \        |                                                       |\n        |\
    \                            +------------------------------+\n        |     \
    \                       | Server does not have a       |\n        |          \
    \                  | Subscriber identity available|\n        |               \
    \             | When starting EAP-SIM        |\n        |                    \
    \        +------------------------------+\n        |                         \
    \                              |\n        |        EAP-Request/SIM/Start     \
    \                     |\n        |        (AT_ANY_ID_REQ, AT_VERSION_LIST)   \
    \            |\n        |<------------------------------------------------------|\n\
    \        |                                                       |\n        |\
    \                                                       |\n        | EAP-Response/SIM/Start\
    \                                |\n        | (AT_IDENTITY containing a fast re-auth.\
    \ identity)     |\n        |------------------------------------------------------>|\n\
    \        |                                                       |\n       Figure\
    \ 3: Requesting any identity, fast re-authentication\n   On fast re-authentication,\
    \ if the AT_IDENTITY attribute contains a\n   valid fast re-authentication identity\
    \ and the server agrees on using\n   fast re-authentication, then the server proceeds\
    \ with the fast\n   re-authentication sequence and issues the EAP-Request/SIM/\n\
    \   Re-authentication packet, as specified in Section 5.\n"
- title: 4.3.3.  Fall Back to Full Authentication
  contents:
  - "4.3.3.  Fall Back to Full Authentication\n   Figure 4 illustrates cases in which\
    \ the server does not recognize the\n   fast re-authentication identity the peer\
    \ used in AT_IDENTITY, and\n   issues a second EAP-Request/SIM/Start message.\n\
    \      Peer                                             Authenticator\n      \
    \  |                                                       |\n        |      \
    \                      +------------------------------+\n        |           \
    \                 | Server does not have a       |\n        |                \
    \            | Subscriber identity available|\n        |                     \
    \       | When starting EAP-SIM        |\n        |                          \
    \  +------------------------------+\n        |                               \
    \                        |\n        |        EAP-Request/SIM/Start           \
    \               |\n        |        (AT_ANY_ID_REQ, AT_VERSION_LIST)         \
    \      |\n        |<------------------------------------------------------|\n\
    \        |                                                       |\n        |\
    \                                                       |\n        | EAP-Response/SIM/Start\
    \                                |\n        | (AT_IDENTITY containing a fast re-auth.\
    \ identity)     |\n        |------------------------------------------------------>|\n\
    \        |                                                       |\n        |\
    \                            +------------------------------+\n        |     \
    \                       | Server does not recognize    |\n        |          \
    \                  | The fast re-auth.            |\n        |               \
    \             | Identity                     |\n        |                    \
    \        +------------------------------+\n        |                         \
    \                              |\n        |     EAP-Request/SIM/Start        \
    \                     |\n        |     (AT_FULLAUTH_ID_REQ, AT_VERSION_LIST) \
    \            |\n        |<------------------------------------------------------|\n\
    \        |                                                       |\n        |\
    \                                                       |\n        | EAP-Response/SIM/Start\
    \                                |\n        | (AT_IDENTITY with a full-auth. identity,\
    \ AT_NONCE_MT, |\n        |  AT_SELECTED_VERSION)                            \
    \     |\n        |------------------------------------------------------>|\n \
    \       |                                                       |\n          \
    \    Figure 4: Fall back to full authentication\n"
- title: 4.3.4.  Requesting the Permanent Identity 1
  contents:
  - "4.3.4.  Requesting the Permanent Identity 1\n   Figure 5 illustrates the case\
    \ in which the EAP server fails to map\n   the pseudonym identity included in\
    \ the EAP-Response/Identity packet\n   to a valid permanent identity.\n      Peer\
    \                                             Authenticator\n         |      \
    \                                                 |\n         |              \
    \                 EAP-Request/Identity    |\n         |<------------------------------------------------------|\n\
    \         |                                                       |\n        \
    \ | EAP-Response/Identity                                 |\n         | (Includes\
    \ a pseudonym)                                |\n         |------------------------------------------------------>|\n\
    \         |                                                       |\n        \
    \ |                            +------------------------------+\n         |  \
    \                          | Server fails to map the      |\n         |      \
    \                      | Pseudonym to a permanent id. |\n         |          \
    \                  +------------------------------+\n         |  EAP-Request/SIM/Start\
    \                                |\n         |  (AT_PERMANENT_ID_REQ, AT_VERSION_LIST)\
    \               |\n         |<------------------------------------------------------|\n\
    \         |                                                       |\n        \
    \ | EAP-Response/SIM/Start                                |\n         | (AT_IDENTITY\
    \ with permanent identity, AT_NONCE_MT,    |\n         |  AT_SELECTED_VERSION)\
    \                                 |\n         |------------------------------------------------------>|\n\
    \         |                                                       |\n        \
    \      Figure 5: Requesting the permanent identity\n   If the server recognizes\
    \ the permanent identity, then the\n   authentication sequence proceeds as usual\
    \ with the EAP Server issuing\n   the EAP-Request/SIM/Challenge message.\n"
- title: 4.3.5.  Requesting the Permanent Identity 2
  contents:
  - "4.3.5.  Requesting the Permanent Identity 2\n   Figure 6 illustrates the case\
    \ in which the EAP server fails to map\n   the pseudonym included in the AT_IDENTITY\
    \ attribute to a valid\n   permanent identity.\n      Peer                   \
    \                          Authenticator\n         |                         \
    \                              |\n         |                            +------------------------------+\n\
    \         |                            | Server does not have a       |\n    \
    \     |                            | Subscriber identity available|\n        \
    \ |                            | When starting EAP-SIM        |\n         |  \
    \                          +------------------------------+\n         |      \
    \  EAP-Request/SIM/Start                          |\n         |        (AT_ANY_ID_REQ,\
    \ AT_VERSION_LIST)               |\n         |<------------------------------------------------------|\n\
    \         |                                                       |\n        \
    \ |EAP-Response/SIM/Start                                 |\n         |(AT_IDENTITY\
    \ with a pseudonym identity, AT_NONCE_MT,   |\n         | AT_SELECTED_VERSION)\
    \                                  |\n         |------------------------------------------------------>|\n\
    \         |                           +-------------------------------+\n    \
    \     |                           | Server fails to map the       |\n        \
    \ |                           | Pseudonym in AT_IDENTITY      |\n         |  \
    \                         | to a valid permanent identity |\n         |      \
    \                     +-------------------------------+\n         |          \
    \                                             |\n         |                EAP-Request/SIM/Start\
    \                  |\n         |                (AT_PERMANENT_ID_REQ, AT_VERSION_LIST)\
    \ |\n         |<------------------------------------------------------|\n    \
    \     |                                                       |\n         | EAP-Response/SIM/Start\
    \                                |\n         | (AT_IDENTITY with permanent identity,\
    \                 |\n         |  AT_NONCE_MT, AT_SELECTED_VERSION)           \
    \         |\n         |------------------------------------------------------>|\n\
    \         |                                                       |\n   Figure\
    \ 6: Requesting a permanent identity (two EAP-SIM Start rounds)\n"
- title: 4.3.6.  Three EAP-SIM/Start Roundtrips
  contents:
  - "4.3.6.  Three EAP-SIM/Start Roundtrips\n   In the worst case, there are three\
    \ EAP/SIM/Start round trips before\n   the server obtains an acceptable identity.\
    \  This case is illustrated\n   in Figure 7.\n      Peer                     \
    \                        Authenticator\n       |                             \
    \                          |\n       |                            +------------------------------+\n\
    \       |                            | Server does not have a       |\n      \
    \ |                            | Subscriber identity available|\n       |    \
    \                        | When starting EAP-SIM        |\n       |          \
    \                  +------------------------------+\n       |        EAP-Request/SIM/Start\
    \                          |\n       |        (Includes AT_ANY_ID_REQ, AT_VERSION_LIST)\
    \      |\n       |<------------------------------------------------------|\n \
    \      |                                                       |\n       | EAP-Response/SIM/Start\
    \                                |\n       | (AT_IDENTITY with fast re-auth. identity)\
    \             |\n       |------------------------------------------------------>|\n\
    \       |                                                       |\n       |  \
    \                          +------------------------------+\n       |        \
    \                    | Server does not accept       |\n       |              \
    \              | The fast re-auth.            |\n       |                    \
    \        | Identity                     |\n       |                          \
    \  +------------------------------+\n       |     EAP-Request/SIM/Start      \
    \                       |\n       |     (AT_FULLAUTH_ID_REQ, AT_VERSION_LIST)\
    \             |\n       |<------------------------------------------------------|\n\
    \       |                                                       |\n       :  \
    \                                                     :\n       :            \
    \                                           :\n       :                      \
    \                                 :\n       :                                \
    \                       :\n       |EAP-Response/SIM/Start                    \
    \             |\n       |(AT_IDENTITY with a pseudonym identity, AT_NONCE_MT,\
    \   |\n       | AT_SELECTED_VERSION)                                  |\n    \
    \   |------------------------------------------------------>|\n       |      \
    \                                                 |\n       |                \
    \           +-------------------------------+\n       |                      \
    \     | Server fails to map the       |\n       |                           |\
    \ Pseudonym in AT_IDENTITY      |\n       |                           | to a valid\
    \ permanent identity |\n       |                           +-------------------------------+\n\
    \       |           EAP-Request/SIM/Start                       |\n       |  \
    \         (AT_PERMANENT_ID_REQ, AT_VERSION_LIST)      |\n       |<------------------------------------------------------|\n\
    \       |                                                       |\n       | EAP-Response/SIM/Start\
    \                                |\n       | (AT_IDENTITY with permanent identity,\
    \ AT_NONCE_MT,    |\n       |  AT_SELECTED_VERSION)                          \
    \       |\n       |------------------------------------------------------>|\n\
    \       |                                                       |\n          \
    \      Figure 7: Three EAP-SIM Start rounds\n   After the last EAP-Response/SIM/Start\
    \ message, the full\n   authentication sequence proceeds as usual.  If the EAP\
    \ Server\n   recognizes the permanent identity and is able to proceed, the server\n\
    \   issues the EAP-Request/SIM/Challenge message.\n"
- title: 5.  Fast Re-Authentication
  contents:
  - '5.  Fast Re-Authentication

    '
- title: 5.1.  General
  contents:
  - "5.1.  General\n   In some environments, EAP authentication may be performed frequently.\n\
    \   Because the EAP-SIM full authentication procedure makes use of the\n   GSM\
    \ SIM A3/A8 algorithms, and therefore requires 2 or 3 fresh\n   triplets from\
    \ the Authentication Centre, the full authentication\n   procedure is not very\
    \ well suited for frequent use.  Therefore,\n   EAP-SIM includes a more inexpensive\
    \ fast re-authentication procedure\n   that does not make use of the SIM A3/A8\
    \ algorithms and does not need\n   new triplets from the Authentication Centre.\
    \  Re-authentication can\n   be performed in fewer roundtrips than the full authentication.\n\
    \   Fast re-authentication is optional to implement for both the EAP-SIM\n   server\
    \ and peer.  On each EAP authentication, either one of the\n   entities may also\
    \ fall back on full authentication if it does not\n   want to use fast re-authentication.\n\
    \   Fast re-authentication is based on the keys derived on the preceding\n   full\
    \ authentication.  The same K_aut and K_encr keys that were used\n   in full authentication\
    \ are used to protect EAP-SIM packets and\n   attributes, and the original Master\
    \ Key from full authentication is\n   used to generate a fresh Master Session\
    \ Key, as specified in Section\n   7.\n   The fast re-authentication exchange\
    \ makes use of an unsigned 16-bit\n   counter, included in the AT_COUNTER attribute.\
    \  The counter has three\n   goals: 1) it can be used to limit the number of successive\n\
    \   reauthentication exchanges without full authentication 2) it\n   contributes\
    \ to the keying material, and 3) it protects the peer and\n   the server from\
    \ replays.  On full authentication, both the server and\n   the peer initialize\
    \ the counter to one.  The counter value of at\n   least one is used on the first\
    \ fast re-authentication.  On subsequent\n   fast re-authentications, the counter\
    \ MUST be greater than on any of\n   the previous re-authentications.  For example,\
    \ on the second fast\n   re-authentication, the counter value is two or greater.\
    \  The\n   AT_COUNTER attribute is encrypted.\n   Both the peer and the EAP server\
    \ maintain a copy of the counter.  The\n   EAP server sends its counter value\
    \ to the peer in the fast\n   re-authentication request.  The peer MUST verify\
    \ that its counter\n   value is less than or equal to the value sent by the EAP\
    \ server.\n   The server includes an encrypted server random nonce (AT_NONCE_S)\
    \ in\n   the fast re-authentication request.  The AT_MAC attribute in the\n  \
    \ peer's response is calculated over NONCE_S to provide a\n   challenge/response\
    \ authentication scheme.  The NONCE_S also\n   contributes to the new Master Session\
    \ Key.\n   Both the peer and the server SHOULD have an upper limit for the\n \
    \  number of subsequent fast re-authentications allowed before a full\n   authentication\
    \ needs to be performed.  Because a 16-bit counter is\n   used in fast re-authentication,\
    \ the theoretical maximum number of\n   re-authentications is reached when the\
    \ counter value reaches FFFF\n   hexadecimal.\n   In order to use fast re-authentication,\
    \ the peer and the EAP server\n   need to store the following values: Master Key,\
    \ latest counter value\n   and the next fast re-authentication identity.  K_aut,\
    \ K_encr may\n   either be stored or derived again from MK.  The server may also\
    \ need\n   to store the permanent identity of the user.\n"
- title: 5.2.  Comparison to UMTS AKA
  contents:
  - "5.2.  Comparison to UMTS AKA\n   When analyzing the fast re-authentication exchange,\
    \ it may be helpful\n   to compare it with the UMTS Authentication and Key Agreement\
    \ (AKA)\n   exchange, which it resembles closely.  The counter corresponds to\
    \ the\n   UMTS AKA sequence number, NONCE_S corresponds to RAND, AT_MAC in\n \
    \  EAP-Request/SIM/Re-authentication corresponds to AUTN, the AT_MAC in\n   EAP-Response/SIM/Re-authentication\
    \ corresponds to RES,\n   AT_COUNTER_TOO_SMALL corresponds to AUTS, and encrypting\
    \ the counter\n   corresponds to the usage of the Anonymity Key.  Also, the key\n\
    \   generation on fast re-authentication, with regard to random or fresh\n   material,\
    \ is similar to UMTS AKA -- the server generates the NONCE_S\n   and counter values,\
    \ and the peer only verifies that the counter value\n   is fresh.\n   It should\
    \ also be noted that encrypting the AT_NONCE_S, AT_COUNTER,\n   or AT_COUNTER_TOO_SMALL\
    \ attributes is not important to the security\n   of the fast re-authentication\
    \ exchange.\n"
- title: 5.3.  Fast Re-authentication Identity
  contents:
  - "5.3.  Fast Re-authentication Identity\n   The fast re-authentication procedure\
    \ makes use of separate\n   re-authentication user identities.  Pseudonyms and\
    \ the permanent\n   identity are reserved for full authentication only.  If a\n\
    \   re-authentication identity is lost and the network does not recognize\n  \
    \ it, the EAP server can fall back on full authentication.\n   If the EAP server\
    \ supports fast re-authentication, it MAY include the\n   skippable AT_NEXT_REAUTH_ID\
    \ attribute in the encrypted data of\n   EAP-Request/SIM/Challenge message (Section\
    \ 9.3).  This attribute\n   contains a new fast re-authentication identity for\
    \ the next fast\n   re-authentication.  The attribute also works as a capability\
    \ flag\n   that, indicating that the server supports fast re-authentication, and\n\
    \   that the server wants to continue using fast re-authentication within\n  \
    \ the current context.  The peer MAY ignore this attribute, in which\n   case\
    \ it MUST use full authentication next time.  If the peer wants to\n   use re-authentication,\
    \ it uses this fast re-authentication identity\n   on next authentication.  Even\
    \ if the peer has a fast\n   re-authentication identity, the peer MAY discard\
    \ the fast\n   re-authentication identity and use a pseudonym or the permanent\n\
    \   identity instead, in which case full authentication MUST be\n   performed.\
    \  If the EAP server does not include the AT_NEXT_REAUTH_ID\n   in the encrypted\
    \ data of EAP-Request/SIM/Challenge or\n   EAP-Request/SIM/ Re-authentication,\
    \ then the peer MUST discard its\n   current fast re-authentication state information\
    \ and perform a full\n   authentication next time.\n   In environments where a\
    \ realm portion is needed in the peer identity,\n   the fast re-authentication\
    \ identity received in AT_NEXT_REAUTH_ID\n   MUST contain both a username portion\
    \ and a realm portion, as per the\n   NAI format.  The EAP Server can choose an\
    \ appropriate realm part in\n   order to have the AAA infrastructure route subsequent\
    \ fast\n   re-authentication related requests to the same AAA server.  For\n \
    \  example, the realm part MAY include a portion that is specific to the\n   AAA\
    \ server.  Hence, it is sufficient to store the context required\n   for fast\
    \ re-authentication in the AAA server that performed the full\n   authentication.\n\
    \   The peer MAY use the fast re-authentication identity in the\n   EAP-Response/Identity\
    \ packet or, in response to the server's\n   AT_ANY_ID_REQ attribute, the peer\
    \ MAY use the fast re-authentication\n   identity in the AT_IDENTITY attribute\
    \ of the EAP-Response/SIM/Start\n   packet.\n   The peer MUST NOT modify the username\
    \ portion of the fast\n   re-authentication identity, but the peer MAY modify\
    \ the realm portion\n   or replace it with another realm portion.  The peer might\
    \ need to\n   modify the realm in order to influence the AAA routing, for example,\n\
    \   to make sure that the correct server is reached.  It should be noted\n   that\
    \ sharing the same fast re-authentication key among several\n   servers may have\
    \ security risks, so changing the realm portion of the\n   NAI in order to change\
    \ the EAP server is not desirable.\n   Even if the peer uses a fast re-authentication\
    \ identity, the server\n   may want to fall back on full authentication, for example\
    \ because the\n   server does not recognize the fast re-authentication identity\
    \ or does\n   not want to use fast re-authentication.  In this case, the server\n\
    \   starts the full authentication procedure by issuing an\n   EAP-Request/SIM/Start\
    \ packet.  This packet always starts a full\n   authentication sequence if it\
    \ does not include the AT_ANY_ID_REQ\n   attribute.  If the server was not able\
    \ to recover the peer's identity\n   from the fast re-authentication identity,\
    \ the server includes either\n   the AT_FULLAUTH_ID_REQ or the AT_PERMANENT_ID_REQ\
    \ attribute in this\n   EAP request.\n"
- title: 5.4.  Fast Re-authentication Procedure
  contents:
  - "5.4.  Fast Re-authentication Procedure\n   Figure 8 illustrates the fast re-authentication\
    \ procedure.  In this\n   example, the optional protected success indication is\
    \ not used.\n   Encrypted attributes are denoted with '*'.  The peer uses its\n\
    \   re-authentication identity in the EAP-Response/Identity packet.  As\n   discussed\
    \ above, an alternative way to communicate the\n   re-authentication identity\
    \ to the server is for the peer to use the\n   AT_IDENTITY attribute in the EAP-Response/SIM/Start\
    \ message.  This\n   latter case is not illustrated in the figure below, and it\
    \ is only\n   possible when the server requests that the peer send its identity\
    \ by\n   including the AT_ANY_ID_REQ attribute in the EAP-Request/SIM/Start\n\
    \   packet.\n   If the server recognizes the identity as a valid fast\n   re-authentication\
    \ identity, and if the server agrees to use fast\n   re-authentication, then the\
    \ server sends the EAP-Request/SIM/\n   Re-authentication packet to the peer.\
    \  This packet MUST include the\n   encrypted AT_COUNTER attribute, with a fresh\
    \ counter value, the\n   encrypted AT_NONCE_S attribute that contains a random\
    \ number chosen\n   by the server, the AT_ENCR_DATA and the AT_IV attributes used\
    \ for\n   encryption, and the AT_MAC attribute that contains a message\n   authentication\
    \ code over the packet.  The packet MAY also include an\n   encrypted AT_NEXT_REAUTH_ID\
    \ attribute that contains the next fast\n   re-authentication identity.\n   Fast\
    \ re-authentication identities are one-time identities.  If the\n   peer does\
    \ not receive a new fast re-authentication identity, it MUST\n   use either the\
    \ permanent identity or a pseudonym identity on the next\n   authentication to\
    \ initiate full authentication.\n   The peer verifies that AT_MAC is correct,\
    \ and that the counter value\n   is fresh (greater than any previously used value).\
    \  The peer MAY save\n   the next fast re-authentication identity from the encrypted\n\
    \   AT_NEXT_REAUTH_ID for next time.  If all checks are successful, the\n   peer\
    \ responds with the EAP-Response/SIM/Re-authentication packet,\n   including the\
    \ AT_COUNTER attribute with the same counter value and\n   AT_MAC attribute.\n\
    \   The server verifies the AT_MAC attribute and also verifies that the\n   counter\
    \ value is the same that it used in the EAP-Request/SIM/\n   Re-authentication\
    \ packet.  If these checks are successful, the\n   re-authentication has succeeded\
    \ and the server sends the EAP-Success\n   packet to the peer.\n   If protected\
    \ success indications (Section 6.2) were used, the\n   EAP-Success packet would\
    \ be preceded by an EAP-SIM notification\n   round.\n       Peer             \
    \                                Authenticator\n          |                  \
    \                                     |\n          |                         \
    \      EAP-Request/Identity    |\n          |<------------------------------------------------------|\n\
    \          |                                                       |\n       \
    \   | EAP-Response/Identity                                 |\n          | (Includes\
    \ a fast re-authentication identity)          |\n          |------------------------------------------------------>|\n\
    \          |                                                       |\n       \
    \   |                          +--------------------------------+\n          |\
    \                          | Server recognizes the identity |\n          |   \
    \                       | and agrees to use fast         |\n          |      \
    \                    | re-authentication              |\n          |         \
    \                 +--------------------------------+\n          |            \
    \                                           |\n          :                   \
    \                                    :\n          :                          \
    \                             :\n          :                                 \
    \                      :\n          :                                        \
    \               :\n          |  EAP-Request/SIM/Re-authentication            \
    \        |\n          |  (AT_IV, AT_ENCR_DATA, *AT_COUNTER,                  \
    \ |\n          |   *AT_NONCE_S, *AT_NEXT_REAUTH_ID, AT_MAC)            |\n   \
    \       |<------------------------------------------------------|\n          |\
    \                                                       |\n     +-----------------------------------------------+\
    \            |\n     | Peer verifies AT_MAC and the freshness of     |       \
    \     |\n     | the counter. Peer MAY store the new fast re-  |            |\n\
    \     | authentication identity for next re-auth.     |            |\n     +-----------------------------------------------+\
    \            |\n          |                                                  \
    \     |\n          | EAP-Response/SIM/Re-authentication                    |\n\
    \          | (AT_IV, AT_ENCR_DATA, *AT_COUNTER with same value,    |\n       \
    \   |  AT_MAC)                                              |\n          |------------------------------------------------------>|\n\
    \          |                          +--------------------------------+\n   \
    \       |                          | Server verifies AT_MAC and     |\n      \
    \    |                          | the counter                    |\n         \
    \ |                          +--------------------------------+\n          | \
    \                                                      |\n          |        \
    \                                  EAP-Success  |\n          |<------------------------------------------------------|\n\
    \          |                                                       |\n       \
    \             Figure 8: Fast Re-authentication\n"
- title: 5.5.  Fast Re-authentication Procedure when Counter Is Too Small
  contents:
  - "5.5.  Fast Re-authentication Procedure when Counter Is Too Small\n   If the peer\
    \ does not accept the counter value of EAP-Request/SIM/\n   Re-authentication,\
    \ it indicates the counter synchronization problem\n   by including the encrypted\
    \ AT_COUNTER_TOO_SMALL in EAP-Response/SIM/\n   Re-authentication.  The server\
    \ responds with EAP-Request/SIM/Start to\n   initiate a normal full authentication\
    \ procedure.  This is illustrated\n   in Figure 9.  Encrypted attributes are denoted\
    \ with '*'.\n       Peer                                             Authenticator\n\
    \          |          EAP-Request/SIM/Start                        |\n       \
    \   |          (AT_ANY_ID_REQ, AT_VERSION_LIST)             |\n          |<------------------------------------------------------|\n\
    \          |                                                       |\n       \
    \   | EAP-Response/SIM/Start                                |\n          | (AT_IDENTITY)\
    \                                         |\n          | (Includes a fast re-authentication\
    \ identity)          |\n          |------------------------------------------------------>|\n\
    \          |                                                       |\n       \
    \   |  EAP-Request/SIM/Re-authentication                    |\n          |  (AT_IV,\
    \ AT_ENCR_DATA, *AT_COUNTER,                   |\n          |   *AT_NONCE_S, *AT_NEXT_REAUTH_ID,\
    \ AT_MAC)            |\n          |<------------------------------------------------------|\n\
    \     +-----------------------------------------------+            |\n     | AT_MAC\
    \ is valid but the counter is not fresh. |            |\n     +-----------------------------------------------+\
    \            |\n          |                                                  \
    \     |\n          | EAP-Response/SIM/Re-authentication                    |\n\
    \          | (AT_IV, AT_ENCR_DATA, *AT_COUNTER_TOO_SMALL,          |\n       \
    \   |  *AT_COUNTER, AT_MAC)                                 |\n          |------------------------------------------------------>|\n\
    \          |            +----------------------------------------------+\n   \
    \       |            | Server verifies AT_MAC but detects           |\n      \
    \    |            | That peer has included AT_COUNTER_TOO_SMALL  |\n         \
    \ |            +----------------------------------------------+\n          | \
    \                                                      |\n          |        \
    \                EAP-Request/SIM/Start          |\n          |               \
    \         (AT_VERSION_LIST)              |\n          |<------------------------------------------------------|\n\
    \     +---------------------------------------------------------------+\n    \
    \ |                Normal full authentication follows.            |\n     +---------------------------------------------------------------+\n\
    \          |                                                       |\n       \
    \   Figure 9: Fast Re-authentication, counter is not fresh\n   In the figure above,\
    \ the first three messages are similar to the\n   basic fast re-authentication\
    \ case.  When the peer detects that the\n   counter value is not fresh, it includes\
    \ the AT_COUNTER_TOO_SMALL\n   attribute in EAP-Response/SIM/Re-authentication.\
    \  This attribute\n   doesn't contain any data, but it is a request for the server\
    \ to\n   initiate full authentication.  In this case, the peer MUST ignore the\n\
    \   contents of the server's AT_NEXT_REAUTH_ID attribute.\n   On receipt of AT_COUNTER_TOO_SMALL,\
    \ the server verifies AT_MAC and\n   verifies that AT_COUNTER contains the same\
    \ counter value as in the\n   EAP-Request/SIM/Re-authentication packet.  If not,\
    \ the server\n   terminates the authentication exchange by sending the\n   EAP-Request/SIM/Notification\
    \ with AT_NOTIFICATION code \"General\n   failure\" (16384).  If all checks on\
    \ the packet are successful, the\n   server transmits a new EAP-Request/SIM/Start\
    \ packet and the full\n   authentication procedure is performed as usual.  Since\
    \ the server\n   already knows the subscriber identity, it MUST NOT include\n\
    \   AT_ANY_ID_REQ, AT_FULLAUTH_ID_REQ, or AT_PERMANENT_ID_REQ in the\n   EAP-Request/SIM/Start.\n\
    \   It should be noted that in this case, peer identity is only\n   transmitted\
    \ in the AT_IDENTITY attribute at the beginning of the\n   whole EAP exchange.\
    \  The fast re-authentication identity used in this\n   AT_IDENTITY attribute\
    \ will be used in key derivation (see Section 7).\n"
- title: 6.  EAP-SIM Notifications
  contents:
  - '6.  EAP-SIM Notifications

    '
- title: 6.1.  General
  contents:
  - "6.1.  General\n   EAP-SIM does not prohibit the use of the EAP Notifications\
    \ as\n   specified in [RFC3748].  EAP Notifications can be used at any time in\n\
    \   the EAP-SIM exchange.  It should be noted that EAP-SIM does not\n   protect\
    \ EAP Notifications.  EAP-SIM also specifies method-specific\n   EAP-SIM notifications\
    \ that are protected in some cases.\n   The EAP server can use EAP-SIM notifications\
    \ to convey notifications\n   and result indications (Section 6.2) to the peer.\n\
    \   The server MUST use notifications in cases discussed in\n   Section 6.3.2.\
    \  When the EAP server issues an\n   EAP-Request/SIM/Notification packet to the\
    \ peer, the peer MUST\n   process the notification packet.  The peer MAY show\
    \ a notification\n   message to the user and the peer MUST respond to the EAP\
    \ server with\n   an EAP-Response/SIM/Notification packet, even if the peer did\
    \ not\n   recognize the notification code.\n   An EAP-SIM full authentication\
    \ exchange or a fast re-authentication\n   exchange MUST NOT include more than\
    \ one EAP-SIM notification round.\n   The notification code is a 16-bit number.\
    \  The most significant bit\n   is called the Success bit (S bit).  The S bit\
    \ specifies whether the\n   notification implies failure.  The code values with\
    \ the S bit set to\n   zero (code values 0...32767) are used on unsuccessful cases.\
    \  The\n   receipt of a notification code from this range implies a failed EAP\n\
    \   exchange, so the peer can use the notification as a failure\n   indication.\
    \  After receiving the EAP-Response/SIM/Notification for\n   these notification\
    \ codes, the server MUST send the EAP-Failure\n   packet.\n   The receipt of a\
    \ notification code with the S bit set to one (values\n   32768...65536) does\
    \ not imply failure.  Notification code \"Success\"\n   (32768) has been reserved\
    \ as a general notification code to indicate\n   successful authentication.\n\
    \   The second most significant bit of the notification code is called\n   the\
    \ Phase bit (P bit).  It specifies at which phase of the EAP-SIM\n   exchange\
    \ the notification can be used.  If the P bit is set to zero,\n   the notification\
    \ can only be used after a successful\n   EAP/SIM/Challenge round in full authentication\
    \ or a successful\n   EAP/SIM/Re-authentication round in reauthentication.  A\n\
    \   re-authentication round is considered successful only if the peer has\n  \
    \ successfully verified AT_MAC and AT_COUNTER attributes, and does not\n   include\
    \ the AT_COUNTER_TOO_SMALL attribute in\n   EAP-Response/SIM/Re-authentication.\n\
    \   If the P bit is set to one, the notification can only by used before\n   the\
    \ EAP/SIM/Challenge round in full authentication, or before the\n   EAP/SIM/Re-authentication\
    \ round in reauthentication.  These\n   notifications can only be used to indicate\
    \ various failure cases.  In\n   other words, if the P bit is set to one, then\
    \ the S bit MUST be set\n   to zero.\n   Section 9.8 and Section 9.9 specify what\
    \ other attributes must be\n   included in the notification packets.\n   Some\
    \ of the notification codes are authorization related and, hence,\n   are not\
    \ usually considered part of the responsibility of an EAP\n   method.  However,\
    \ they are included as part of EAP-SIM because there\n   are currently no other\
    \ ways to convey this information to the user in\n   a localizable way, and the\
    \ information is potentially useful for the\n   user.  An EAP-SIM server implementation\
    \ may decide never to send\n   these EAP-SIM notifications.\n"
- title: 6.2.  Result Indications
  contents:
  - "6.2.  Result Indications\n   As discussed in Section 6.3, the server and the\
    \ peer use explicit\n   error messages in all error cases.  If the server detects\
    \ an error\n   after successful authentication, the server uses an EAP-SIM\n \
    \  notification to indicate failure to the peer.  In this case, the\n   result\
    \ indication is integrity and replay protected.\n   By sending an EAP-Response/SIM/Challenge\
    \ packet or an\n   EAP-Response/SIM/Re-authentication packet (without\n   AT_COUNTER_TOO_SMALL),\
    \ the peer indicates that it has successfully\n   authenticated the server and\
    \ that the peer's local policy accepts the\n   EAP exchange.  In other words,\
    \ these packets are implicit success\n   indications from the peer to the server.\n\
    \   EAP-SIM also supports optional protected success indications from the\n  \
    \ server to the peer.  If the EAP server wants to use protected success\n   indications,\
    \ it includes the AT_RESULT_IND attribute in the\n   EAP-Request/SIM/Challenge\
    \ or the EAP-Request/SIM/Re-authentication\n   packet.  This attribute indicates\
    \ that the EAP server would like to\n   use result indications in both successful\
    \ and unsuccessful cases.  If\n   the peer also wants this, the peer includes\
    \ AT_RESULT_IND in\n   EAP-Response/SIM/Challenge or EAP-Response/SIM/Re-authentication.\n\
    \   The peer MUST NOT include AT_RESULT_IND if it did not receive\n   AT_RESULT_IND\
    \ from the server.  If both the peer and the server used\n   AT_RESULT_IND, then\
    \ the EAP exchange is not complete yet, but an\n   EAP-SIM notification round\
    \ will follow.  The following EAP-SIM\n   notification may indicate either failure\
    \ or success.\n   Success indications with the AT_NOTIFICATION code \"Success\"\
    \ (32768)\n   can only be used if both the server and the peer indicate they want\n\
    \   to use them with AT_RESULT_IND.  If the server did not include\n   AT_RESULT_IND\
    \ in the EAP-Request/SIM/Challenge or\n   EAP-Request/SIM/Re-authentication packet,\
    \ or if the peer did not\n   include AT_RESULT_IND in the corresponding response\
    \ packet, then the\n   server MUST NOT use protected success indications.\n  \
    \ Because the server uses the AT_NOTIFICATION code \"Success\" (32768) to\n  \
    \ indicate that the EAP exchange has completed successfully, the EAP\n   exchange\
    \ cannot fail when the server processes the EAP-SIM response\n   to this notification.\
    \  Hence, the server MUST ignore the contents of\n   the EAP-SIM response it receives\
    \ from the\n   EAP-Request/SIM/Notification with this code.  Regardless of the\n\
    \   contents of the EAP-SIM response, the server MUST send EAP-Success as\n  \
    \ the next packet.\n"
- title: 6.3.  Error Cases
  contents:
  - "6.3.  Error Cases\n   This section specifies the operation of the peer and the\
    \ server in\n   error cases.  The subsections below require the EAP-SIM peer and\n\
    \   server to send an error packet (EAP-Response/SIM/Client-Error from\n   the\
    \ peer or EAP-Request/SIM/Notification from the server) in error\n   cases.  However,\
    \ implementations SHOULD NOT rely upon the correct\n   error reporting behavior\
    \ of the peer, authenticator, or the server.\n   It is possible for error and\
    \ other messages to be lost in transit or\n   for a malicious participant to attempt\
    \ to consume resources by not\n   issuing error messages.  Both the peer and the\
    \ EAP server SHOULD have\n   a mechanism to clean up state, even if an error message\
    \ or\n   EAP-Success is not received after a timeout period.\n"
- title: 6.3.1.  Peer Operation
  contents:
  - "6.3.1.  Peer Operation\n   In general, if an EAP-SIM peer detects an error in\
    \ a received EAP-SIM\n   packet, the EAP-SIM implementation responds with the\n\
    \   EAP-Response/SIM/Client-Error packet.  In response to the\n   EAP-Response/SIM/Client-Error,\
    \ the EAP server MUST issue the\n   EAP-Failure packet and the authentication\
    \ exchange terminates.\n   By default, the peer uses the client error code 0,\
    \ \"unable to process\n   packet\".  This error code is used in the following\
    \ cases:\n   o  EAP exchange is not acceptable according to the peer's local\n\
    \      policy.\n   o  the peer is not able to parse the EAP request, i.e., the\
    \ EAP\n      request is malformed.\n   o  the peer encountered a malformed attribute.\n\
    \   o  wrong attribute types or duplicate attributes have been included\n    \
    \  in the EAP request.\n   o  a mandatory attribute is missing.\n   o  unrecognized,\
    \ non-skippable attribute.\n   o  unrecognized or unexpected EAP-SIM Subtype in\
    \ the EAP request.\n   o  A RAND challenge repeated in AT_RAND.\n   o  invalid\
    \ AT_MAC.  The peer SHOULD log this event.\n   o  invalid pad bytes in AT_PADDING.\n\
    \   o  the peer does not want to process AT_PERMANENT_ID_REQ.\n   Separate error\
    \ codes have been defined for the following error cases\n   in Section 10.19:\n\
    \   As specified in Section 4.1, when processing the AT_VERSION_LIST\n   attribute,\
    \ which lists the EAP-SIM versions supported by the server,\n   if the attribute\
    \ does not include a version that is implemented by\n   the peer and allowed in\
    \ the peer's security policy, then the peer\n   MUST send the EAP-Response/SIM/Client-Error\
    \ packet with the error\n   code \"unsupported version\".\n   If the number of\
    \ RAND challenges is smaller than what is required by\n   peer's local policy\
    \ when processing the AT_RAND attribute, the peer\n   MUST send the EAP-Response/SIM/Client-Error\
    \ packet with the error\n   code \"insufficient number of challenges\".\n   If\
    \ the peer believes that the RAND challenges included in AT_RAND are\n   not fresh\
    \ e.g., because it is capable of remembering some previously\n   used RANDs, the\
    \ peer MUST send the EAP-Response/SIM/Client-Error\n   packet with the error code\
    \ \"RANDs are not fresh\".\n"
- title: 6.3.2.  Server Operation
  contents:
  - "6.3.2.  Server Operation\n   If an EAP-SIM server detects an error in a received\
    \ EAP-SIM response,\n   the server MUST issue the EAP-Request/SIM/Notification\
    \ packet with an\n   AT_NOTIFICATION code that implies failure.  By default, the\
    \ server\n   uses one of the general failure codes (\"General failure after\n\
    \   authentication\" (0), or \"General failure\" (16384)).  The choice\n   between\
    \ these two codes depends on the phase of the EAP-SIM exchange,\n   see Section\
    \ 6.  When the server issues an EAP-\n   Request/SIM/Notification that implies\
    \ failure, the error cases\n   include the following:\n   o  the server is not\
    \ able to parse the peer's EAP response\n   o  the server encounters a malformed\
    \ attribute, a non-recognized\n      non-skippable attribute, or a duplicate attribute\n\
    \   o  a mandatory attribute is missing or an invalid attribute was\n      included\n\
    \   o  unrecognized or unexpected EAP-SIM Subtype in the EAP Response\n   o  invalid\
    \ AT_MAC.  The server SHOULD log this event.\n   o  invalid AT_COUNTER\n"
- title: 6.3.3.  EAP-Failure
  contents:
  - "6.3.3.  EAP-Failure\n   The EAP-SIM server sends EAP-Failure in two cases:\n\
    \   1) In response to an EAP-Response/SIM/Client-Error packet the server\n   \
    \   has received from the peer, or\n   2) Following an EAP-SIM notification round,\
    \ when the AT_NOTIFICATION\n      code implies failure.\n   The EAP-SIM server\
    \ MUST NOT send EAP-Failure in cases other than\n   these two.  However, it should\
    \ be noted that even though the EAP-SIM\n   server would not send an EAP-Failure,\
    \ an authorization decision that\n   happens outside EAP-SIM, such as in the AAA\
    \ server or in an\n   intermediate AAA proxy, may result in a failed exchange.\n\
    \   The peer MUST accept the EAP-Failure packet in case 1) and case 2),\n   above.\
    \  The peer SHOULD silently discard the EAP-Failure packet in\n   other cases.\n"
- title: 6.3.4.  EAP-Success
  contents:
  - "6.3.4.  EAP-Success\n   On full authentication, the server can only send EAP-Success\
    \ after\n   the EAP/SIM/Challenge round.  The peer MUST silently discard any\n\
    \   EAP-Success packets if they are received before the peer has\n   successfully\
    \ authenticated the server and sent the\n   EAP-Response/SIM/Challenge packet.\n\
    \   If the peer did not indicate that it wants to use protected success\n   indications\
    \ with AT_RESULT_IND (as discussed in Section 6.2) on full\n   authentication,\
    \ then the peer MUST accept EAP-Success after a\n   successful EAP/SIM/Challenge\
    \ round.\n   If the peer indicated that it wants to use protected success\n  \
    \ indications with AT_RESULT_IND (as discussed in Section 6.2), then\n   the peer\
    \ MUST NOT accept EAP-Success after a successful\n   EAP/SIM/Challenge round.\
    \  In this case, the peer MUST only accept\n   EAP-Success after receiving an\
    \ EAP-SIM Notification with the\n   AT_NOTIFICATION code \"Success\" (32768).\n\
    \   On fast re-authentication, EAP-Success can only be sent after the\n   EAP/SIM/Re-authentication\
    \ round.  The peer MUST silently discard any\n   EAP-Success packets if they are\
    \ received before the peer has\n   successfully authenticated the server and sent\
    \ the\n   EAP-Response/SIM/Re-authentication packet.\n   If the peer did not indicate\
    \ that it wants to use protected success\n   indications with AT_RESULT_IND (as\
    \ discussed in Section 6.2) on fast\n   re-authentication, then the peer MUST\
    \ accept EAP-Success after a\n   successful EAP/SIM/Re-authentication round.\n\
    \   If the peer indicated that it wants to use protected success\n   indications\
    \ with AT_RESULT_IND (as discussed in Section 6.2), then\n   the peer MUST NOT\
    \ accept EAP-Success after a successful EAP/SIM/Re-\n   authentication round.\
    \  In this case, the peer MUST only accept\n   EAP-Success after receiving an\
    \ EAP-SIM Notification with the\n   AT_NOTIFICATION code \"Success\" (32768).\n\
    \   If the peer receives an EAP-SIM notification (Section 6) that\n   indicates\
    \ failure, then the peer MUST no longer accept the\n   EAP-Success packet, even\
    \ if the server authentication was\n   successfully completed.\n"
- title: 7.  Key Generation
  contents:
  - "7.  Key Generation\n   This section specifies how keying material is generated.\n\
    \   On EAP-SIM full authentication, a Master Key (MK) is derived from the\n  \
    \ underlying GSM authentication values (Kc keys), the NONCE_MT, and\n   other\
    \ relevant context as follows.\n   MK = SHA1(Identity|n*Kc| NONCE_MT| Version\
    \ List| Selected Version)\n   In the formula above, the \"|\" character denotes\
    \ concatenation.\n   \"Identity\" denotes the peer identity string without any\
    \ terminating\n   null characters.  It is the identity from the last AT_IDENTITY\n\
    \   attribute sent by the peer in this exchange, or, if AT_IDENTITY was\n   not\
    \ used, it is the identity from the EAP-Response/Identity packet.\n   The identity\
    \ string is included as-is, without any changes.  As\n   discussed in Section\
    \ 4.2.2.2, relying on EAP-Response/Identity for\n   conveying the EAP-SIM peer\
    \ identity is discouraged, and the server\n   SHOULD use the EAP-SIM method-specific\
    \ identity attributes.\n   The notation n*Kc in the formula above denotes the\
    \ n Kc values\n   concatenated.  The Kc keys are used in the same order as the\
    \ RAND\n   challenges in AT_RAND attribute.  NONCE_MT denotes the NONCE_MT value\n\
    \   (not the AT_NONCE_MT attribute, but only the nonce value).  The\n   Version\
    \ List includes the 2-byte-supported version numbers from\n   AT_VERSION_LIST,\
    \ in the same order as in the attribute.  The Selected\n   Version is the 2-byte\
    \ selected version from AT_SELECTED_VERSION.\n   Network byte order is used, just\
    \ as in the attributes.  The hash\n   function SHA-1 is specified in [SHA-1].\
    \  If several EAP/SIM/Start\n   roundtrips are used in an EAP-SIM exchange, then\
    \ the NONCE_MT,\n   Version List and Selected version from the last EAP/SIM/Start\
    \ round\n   are used, and the previous EAP/SIM/Start rounds are ignored.\n   The\
    \ Master Key is fed into a Pseudo-Random number Function (PRF)\n   which generates\
    \ separate Transient EAP Keys (TEKs) for protecting\n   EAP-SIM packets, as well\
    \ as a Master Session Key (MSK) for link layer\n   security, and an Extended Master\
    \ Session Key (EMSK) for other\n   purposes.  On fast re-authentication, the same\
    \ TEKs MUST be used for\n   protecting EAP packets, but a new MSK and a new EMSK\
    \ MUST be derived\n   from the original MK and from new values exchanged in the\
    \ fast\n   re-authentication.\n   EAP-SIM requires two TEKs for its own purposes;\
    \ the authentication\n   key K_aut is to be used with the AT_MAC attribute, and\
    \ the encryption\n   key K_encr is to be used with the AT_ENCR_DATA attribute.\
    \  The same\n   K_aut and K_encr keys are used in full authentication and subsequent\n\
    \   fast re-authentications.\n   Key derivation is based on the random number\
    \ generation specified in\n   NIST Federal Information Processing Standards (FIPS)\
    \ Publication\n   186-2 [PRF].  The pseudo-random number generator is specified\
    \ in the\n   change notice 1 (2001 October 5) of [PRF] (Algorithm 1).  As\n  \
    \ specified in the change notice (page 74), when Algorithm 1 is used as\n   a\
    \ general-purpose pseudo-random number generator, the \"mod q\" term in\n   step\
    \ 3.3 is omitted.  The function G used in the algorithm is\n   constructed via\
    \ the Secure Hash Standard, as specified in Appendix\n   3.3 of the standard.\
    \  It should be noted that the function G is very\n   similar to SHA-1, but the\
    \ message padding is different.  Please refer\n   to [PRF] for full details. \
    \ For convenience, the random number\n   algorithm with the correct modification\
    \ is cited in Appendix B.\n   160-bit XKEY and XVAL values are used, so b = 160.\
    \  On each full\n   authentication, the Master Key is used as the initial secret\
    \ seed-key\n   XKEY.  The optional user input values (XSEED_j) in step 3.1 are\
    \ set\n   to zero.\n   On full authentication, the resulting 320-bit random numbers\
    \ (x_0,\n   x_1, ..., x_m-1) are concatenated and partitioned into suitable-sized\n\
    \   chunks and used as keys in the following order: K_encr (128 bits),\n   K_aut\
    \ (128 bits), Master Session Key (64 bytes), Extended Master\n   Session Key (64\
    \ bytes).\n   On fast re-authentication, the same pseudo-random number generator\n\
    \   can be used to generate a new Master Session Key and a new Extended\n   Master\
    \ Session Key.  The seed value XKEY' is calculated as follows:\n   XKEY' = SHA1(Identity|counter|NONCE_S|\
    \ MK)\n   In the formula above, the Identity denotes the fast re-authentication\n\
    \   identity, without any terminating null characters, from the\n   AT_IDENTITY\
    \ attribute of the EAP-Response/SIM/Start packet, or, if\n   EAP-Response/SIM/Start\
    \ was not used on fast re-authentication, it\n   denotes the identity string from\
    \ the EAP-Response/Identity packet.\n   The counter denotes the counter value\
    \ from the AT_COUNTER attribute\n   used in the EAP-Response/SIM/Re-authentication\
    \ packet.  The counter\n   is used in network byte order.  NONCE_S denotes the\
    \ 16-byte NONCE_S\n   value from the AT_NONCE_S attribute used in the\n   EAP-Request/SIM/Re-authentication\
    \ packet.  The MK is the Master Key\n   derived on the preceding full authentication.\n\
    \   On fast re-authentication, the pseudo-random number generator is run\n   with\
    \ the new seed value XKEY', and the resulting 320-bit random\n   numbers (x_0,\
    \ x_1, ..., x_m-1) are concatenated and partitioned into\n   two 64-byte chunks\
    \ and used as the new 64-byte Master Session Key and\n   the new 64-byte Extended\
    \ Master Session Key.  Note that because\n   K_encr and K_aut are not derived\
    \ on fast re-authentication, the\n   Master Session Key and the Extended Master\
    \ Session key are obtained\n   from the beginning of the key stream (x_0, x_1,\
    \ ...).\n   The first 32 bytes of the MSK can be used as the Pairwise Master Key\n\
    \   (PMK) for IEEE 802.11i.\n   When the RADIUS attributes specified in [RFC2548]\
    \ are used to\n   transport keying material, then the first 32 bytes of the MSK\n\
    \   correspond to MS-MPPE-RECV-KEY and the second 32 bytes to\n   MS-MPPE-SEND-KEY.\
    \  In this case, only 64 bytes of keying material\n   (the MSK) are used.\n  \
    \ When generating the initial Master Key, the hash function is used as\n   a mixing\
    \ function to combine several session keys (Kc's) generated by\n   the GSM authentication\
    \ procedure and the random number NONCE_MT into\n   a single session key.  There\
    \ are several reasons for this.  The\n   current GSM session keys are, at most,\
    \ 64 bits, so two or more of\n   them are needed to generate a longer key.  By\
    \ using a one-way\n   function to combine the keys, we are assured that, even\
    \ if an\n   attacker managed to learn one of the EAP-SIM session keys, it\n  \
    \ wouldn't help him in learning the original GSM Kc's.  In addition,\n   since\
    \ we include the random number NONCE_MT in the calculation, the\n   peer is able\
    \ to verify that the EAP-SIM packets it receives from the\n   network are fresh\
    \ and not replays (also see Section 11).\n"
- title: 8.  Message Format and Protocol Extensibility
  contents:
  - '8.  Message Format and Protocol Extensibility

    '
- title: 8.1.  Message Format
  contents:
  - "8.1.  Message Format\n   As specified in [RFC3748], EAP packets begin with the\
    \ Code,\n   Identifiers, Length, and Type fields, which are followed by EAP-\n\
    \   method-specific Type-Data.  The Code field in the EAP header is set\n   to\
    \ 1 for EAP requests, and to 2 for EAP Responses.  The usage of the\n   Length\
    \ and Identifier fields in the EAP header are also specified in\n   [RFC3748].\
    \  In EAP-SIM, the Type field is set to 18.\n   In EAP-SIM, the Type-Data begins\
    \ with an EAP-SIM header that consists\n   of a 1-octet Subtype field and a 2-octet\
    \ reserved field.  The Subtype\n   values used in EAP-SIM are defined in the IANA\
    \ considerations section\n   of the EAP-AKA specification [EAP-AKA].  The formats\
    \ of the EAP\n   header and the EAP-SIM header are shown below.\n     0      \
    \             1                   2                   3\n     0 1 2 3 4 5 6 7\
    \ 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |     Code      |  Identifier   |            Length             |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |     Type      |    Subtype    |           Reserved            |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The rest of the Type-Data that immediately follows the EAP-SIM header\n  \
    \ consists of attributes that are encoded in Type, Length, Value\n   format. \
    \ The figure below shows the generic format of an attribute.\n     0         \
    \          1                   2                   3\n     0 1 2 3 4 5 6 7 8 9\
    \ 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |      Type     |    Length     |  Value...\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Attribute Type\n         Indicates the particular type of attribute.  The\
    \ attribute type\n         values are listed in the IANA considerations section\
    \ of the\n         EAP-AKA specification [EAP-AKA].\n   Length\n         Indicates\
    \ the length of this attribute in multiples of four\n         bytes.  The maximum\
    \ length of an attribute is 1024 bytes.  The\n         length includes the Attribute\
    \ Type and Length bytes.\n   Value\n         The particular data associated with\
    \ this attribute.  This field\n         is always included and it may be two or\
    \ more bytes in length.\n         The type and length fields determine the format\
    \ and length\n         of the value field.\n   Attributes numbered within the\
    \ range 0 through 127 are called\n   non-skippable attributes.  When an EAP-SIM\
    \ peer encounters a\n   non-skippable attribute that the peer does not recognize,\
    \ the peer\n   MUST send the EAP-Response/SIM/Client-Error packet, which terminates\n\
    \   the authentication exchange.  If an EAP-SIM server encounters a\n   non-skippable\
    \ attribute that the server does not recognize, then the\n   server sends the\
    \ EAP-Request/SIM/Notification packet with an\n   AT_NOTIFICATION code, which\
    \ implies general failure (\"General failure\n   after authentication\" (0), or\
    \ \"General failure\" (16384), depending on\n   the phase of the exchange), which\
    \ terminates the authentication\n   exchange.\n   Attributes within the range\
    \ of 128 through 255 are called skippable\n   attributes.  When a skippable attribute\
    \ is encountered and is not\n   recognized, it is ignored.  The rest of the attributes\
    \ and message\n   data MUST still be processed.  The Length field of the attribute\
    \ is\n   used to skip the attribute value in searching for the next attribute.\n\
    \   Unless otherwise specified, the order of the attributes in an EAP-SIM\n  \
    \ message is insignificant and an EAP-SIM implementation should not\n   assume\
    \ a certain order to be used.\n   Attributes can be encapsulated within other\
    \ attributes.  In other\n   words, the value field of an attribute type can be\
    \ specified to\n   contain other attributes.\n"
- title: 8.2.  Protocol Extensibility
  contents:
  - "8.2.  Protocol Extensibility\n   EAP-SIM can be extended by specifying new attribute\
    \ types.  If\n   skippable attributes are used, it is possible to extend the protocol\n\
    \   without breaking old implementations.\n   However, any new attributes added\
    \ to the EAP-Request/SIM/Start or\n   EAP-Response/SIM/Start packets would not\
    \ be integrity-protected.\n   Therefore, these messages MUST NOT be extended in\
    \ the current version\n   of EAP-SIM.  If the list of supported EAP-SIM versions\
    \ in the\n   AT_VERSION_LIST does not include versions other than 1, then the\n\
    \   server MUST NOT include attributes other than those specified in this\n  \
    \ document in the EAP-Request/SIM/Start message.  Note that future\n   versions\
    \ of this protocol might specify new attributes for\n   EAP-Request/SIM/Start\
    \ and still support version 1 of the protocol.\n   In this case, the server might\
    \ send an EAP-Request/SIM/Start message\n   that includes new attributes and indicates\
    \ support for protocol\n   version 1 and other versions in the AT_VERSION_LIST\
    \ attribute.  If\n   the peer selects version 1, then the peer MUST ignore any\
    \ other\n   attributes included in EAP-Request/SIM/Start, other than those\n \
    \  specified in this document.  If the selected EAP-SIM version in\n   peer's\
    \ AT_SELECTED_VERSION is 1, then the peer MUST NOT include other\n   attributes\
    \ aside from those specified in this document in the\n   EAP-Response/SIM/Start\
    \ message.\n   When specifying new attributes, it should be noted that EAP-SIM\
    \ does\n   not support message fragmentation.  Hence, the sizes of the new\n \
    \  extensions MUST be limited so that the maximum transfer unit (MTU) of\n   the\
    \ underlying lower layer is not exceeded.  According to [RFC3748],\n   lower layers\
    \ must provide an EAP MTU of 1020 bytes or greater, so any\n   extensions to EAP-SIM\
    \ SHOULD NOT exceed the EAP MTU of 1020 bytes.\n   Because EAP-SIM supports version\
    \ negotiation, new versions of the\n   protocol can also be specified by using\
    \ a new version number.\n"
- title: 9.  Messages
  contents:
  - "9.  Messages\n   This section specifies the messages used in EAP-SIM.  It specifies\n\
    \   when a message may be transmitted or accepted, which attributes are\n   allowed\
    \ in a message, which attributes are required in a message, and\n   other message-specific\
    \ details.  The general message format is\n   specified in Section 8.1.\n"
- title: 9.1.  EAP-Request/SIM/Start
  contents:
  - "9.1.  EAP-Request/SIM/Start\n   In full authentication the first SIM-specific\
    \ EAP Request is\n   EAP-Request/SIM/Start.  The EAP/SIM/Start roundtrip is used\
    \ for two\n   purposes.  In full authentication this packet is used to request\
    \ the\n   peer to send the AT_NONCE_MT attribute to the server.  In addition,\n\
    \   as specified in Section 4.2, the Start round trip may be used by the\n   server\
    \ for obtaining the peer identity.  As discussed in Section 4.2,\n   several Start\
    \ rounds may be required to obtain a valid peer identity.\n   The server MUST\
    \ always include the AT_VERSION_LIST attribute.\n   The server MAY include one\
    \ of the following identity-requesting\n   attributes: AT_PERMANENT_ID_REQ, AT_FULLAUTH_ID_REQ,\
    \ or\n   AT_ANY_ID_REQ.  These three attributes are mutually exclusive, so the\n\
    \   server MUST NOT include more than one of the attributes.\n   If the server\
    \ has received a response from the peer, it MUST NOT\n   issue a new EAP-Request/SIM/Start\
    \ packet if it has previously issued\n   an EAP-Request/SIM/Start message either\
    \ without any identity\n   requesting attributes or with the AT_PERMANENT_ID_REQ\
    \ attribute.\n   If the server has received a response from the peer, it MUST\
    \ NOT\n   issue a new EAP-Request/SIM/Start packet with the AT_ANY_ID_REQ or\n\
    \   AT_FULLAUTH_ID_REQ attributes if it has previously issued an\n   EAP-Request/SIM/Start\
    \ message with the AT_FULLAUTH_ID_REQ attribute.\n   If the server has received\
    \ a response from the peer, it MUST NOT\n   issue a new EAP-Request/SIM/Start\
    \ packet with the AT_ANY_ID_REQ\n   attribute if the server has previously issued\
    \ an\n   EAP-Request/SIM/Start message with the AT_ANY_ID_REQ attribute.\n   This\
    \ message MUST NOT include AT_MAC, AT_IV, or AT_ENCR_DATA.\n"
- title: 9.2.  EAP-Response/SIM/Start
  contents:
  - "9.2.  EAP-Response/SIM/Start\n   The peer sends EAP-Response/SIM/Start in response\
    \ to a valid\n   EAP-Request/SIM/Start from the server.\n   If and only if the\
    \ server's EAP-Request/SIM/Start includes one of the\n   identity-requesting attributes,\
    \ then the peer MUST include the\n   AT_IDENTITY attribute.  The usage of AT_IDENTITY\
    \ is defined in\n   Section 4.2.\n   The AT_NONCE_MT attribute MUST NOT be included\
    \ if the AT_IDENTITY\n   with a fast re-authentication identity is present for\
    \ fast\n   re-authentication.  AT_NONCE_MT MUST be included in all other cases\n\
    \   (full authentication).\n   The AT_SELECTED_VERSION attribute MUST NOT be included\
    \ if the\n   AT_IDENTITY attribute with a fast re-authentication identity is\n\
    \   present for fast re-authentication.  In all other cases,\n   AT_SELECTED_VERSION\
    \ MUST be included (full authentication).  This\n   attribute is used in version\
    \ negotiation, as specified in\n   Section 4.1.\n   This message MUST NOT include\
    \ AT_MAC, AT_IV, or AT_ENCR_DATA.\n"
- title: 9.3.  EAP-Request/SIM/Challenge
  contents:
  - "9.3.  EAP-Request/SIM/Challenge\n   The server sends the EAP-Request/SIM/Challenge\
    \ after receiving a\n   valid EAP-Response/SIM/Start that contains AT_NONCE_MT\
    \ and\n   AT_SELECTED_VERSION, and after successfully obtaining the subscriber\n\
    \   identity.\n   The AT_RAND attribute MUST be included.\n   The AT_RESULT_IND\
    \ attribute MAY be included.  The usage of this\n   attribute is discussed in\
    \ Section 6.2.\n   The AT_MAC attribute MUST be included.  For\n   EAP-Request/SIM/Challenge,\
    \ the MAC code is calculated over the\n   following data:\n   EAP packet| NONCE_MT\n\
    \   The EAP packet is represented as specified in Section 8.1.  It is\n   followed\
    \ by the 16-byte NONCE_MT value from the peer's AT_NONCE_MT\n   attribute.\n \
    \  The EAP-Request/SIM/Challenge packet MAY include encrypted attributes\n   for\
    \ identity privacy and for communicating the next fast\n   re-authentication identity.\
    \  In this case, the AT_IV and AT_ENCR_DATA\n   attributes are included (Section\
    \ 10.12).\n   The plaintext of the AT_ENCR_DATA value field consists of nested\n\
    \   attributes.  The nested attributes MAY include AT_PADDING (as\n   specified\
    \ in Section 10.12).  If the server supports identity privacy\n   and wants to\
    \ communicate a pseudonym to the peer for the next full\n   authentication, then\
    \ the nested encrypted attributes include the\n   AT_NEXT_PSEUDONYM attribute.\
    \  If the server supports\n   re-authentication and wants to communicate a fast\
    \ re-authentication\n   identity to the peer, then the nested encrypted attributes\
    \ include\n   the AT_NEXT_REAUTH_ID attribute.\n   When processing this message,\
    \ the peer MUST process AT_RAND before\n   processing other attributes.  Only\
    \ if AT_RAND is verified to be\n   valid, the peer derives keys and verifies AT_MAC.\
    \  The operation in\n   case an error occurs is specified in Section 6.3.1.\n"
- title: 9.4.  EAP-Response/SIM/Challenge
  contents:
  - "9.4.  EAP-Response/SIM/Challenge\n   The peer sends EAP-Response/SIM/Challenge\
    \ in response to a valid\n   EAP-Request/SIM/Challenge.\n   Sending this packet\
    \ indicates that the peer has successfully\n   authenticated the server and that\
    \ the EAP exchange will be accepted\n   by the peer's local policy.  Hence, if\
    \ these conditions are not met,\n   then the peer MUST NOT send EAP-Response/SIM/Challenge,\
    \ but the peer\n   MUST send EAP-Response/SIM/Client-Error.\n   The AT_MAC attribute\
    \ MUST be included.  For EAP-\n   Response/SIM/Challenge, the MAC code is calculated\
    \ over the following\n   data:\n   EAP packet| n*SRES\n   The EAP packet is represented\
    \ as specified in Section 8.1.  The EAP\n   packet bytes are immediately followed\
    \ by the two or three SRES values\n   concatenated, denoted above with the notation\
    \ n*SRES.  The SRES\n   values are used in the same order as the corresponding\
    \ RAND\n   challenges in the server's AT_RAND attribute.\n   The AT_RESULT_IND\
    \ attribute MAY be included if it was included in\n   EAP-Request/SIM/Challenge.\
    \  The usage of this attribute is discussed\n   in Section 6.2.\n   Later versions\
    \ of this protocol MAY make use of the AT_ENCR_DATA and\n   AT_IV attributes in\
    \ this message to include encrypted (skippable)\n   attributes.  The EAP server\
    \ MUST process EAP-Response/SIM/Challenge\n   messages that include these attributes\
    \ even if the server did not\n   implement these optional attributes.\n"
- title: 9.5.  EAP-Request/SIM/Re-authentication
  contents:
  - "9.5.  EAP-Request/SIM/Re-authentication\n   The server sends the EAP-Request/SIM/Re-authentication\
    \ message if it\n   wants to use fast re-authentication, and if it has received\
    \ a valid\n   fast re-authentication identity in EAP-Response/Identity or\n  \
    \ EAP-Response/SIM/Start.\n   AT_MAC MUST be included.  No message-specific data\
    \ is included in the\n   MAC calculation.  See Section 10.14.\n   The AT_RESULT_IND\
    \ attribute MAY be included.  The usage of this\n   attribute is discussed in\
    \ Section 6.2.\n   The AT_IV and AT_ENCR_DATA attributes MUST be included.  The\n\
    \   plaintext consists of the following nested encrypted attributes,\n   which\
    \ MUST be included: AT_COUNTER and AT_NONCE_S.  In addition, the\n   nested encrypted\
    \ attributes MAY include the following attributes:\n   AT_NEXT_REAUTH_ID and AT_PADDING.\n"
- title: 9.6.  EAP-Response/SIM/Re-authentication
  contents:
  - "9.6.  EAP-Response/SIM/Re-authentication\n   The client sends the EAP-Response/SIM/Re-authentication\
    \ packet in\n   response to a valid EAP-Request/SIM/Re-authentication.\n   The\
    \ AT_MAC attribute MUST be included.  For\n   EAP-Response/SIM/Re-authentication,\
    \ the MAC code is calculated over\n   the following data:\n   EAP packet| NONCE_S\n\
    \   The EAP packet is represented as specified in Section 8.1.  It is\n   followed\
    \ by the 16-byte NONCE_S value from the server's AT_NONCE_S\n   attribute.\n \
    \  The AT_IV and AT_ENCR_DATA attributes MUST be included.  The nested\n   encrypted\
    \ attributes MUST include the AT_COUNTER attribute.  The\n   AT_COUNTER_TOO_SMALL\
    \ attribute MAY be included in the nested\n   encrypted attributes, and it is\
    \ included in cases specified in\n   Section 5.  The AT_PADDING attribute MAY\
    \ be included.\n   The AT_RESULT_IND attribute MAY be included if it was included\
    \ in\n   EAP-Request/SIM/Re-authentication.  The usage of this attribute is\n\
    \   discussed in Section 6.2.\n   Sending this packet without AT_COUNTER_TOO_SMALL\
    \ indicates that the\n   peer has successfully authenticated the server and that\
    \ the EAP\n   exchange will be accepted by the peer's local policy.  Hence, if\n\
    \   these conditions are not met, then the peer MUST NOT send\n   EAP-Response/SIM/Re-authentication,\
    \ but the peer MUST send\n   EAP-Response/SIM/Client-Error.\n"
- title: 9.7.  EAP-Response/SIM/Client-Error
  contents:
  - "9.7.  EAP-Response/SIM/Client-Error\n   The peer sends EAP-Response/SIM/Client-Error\
    \ in error cases, as\n   specified in Section 6.3.1.\n   The AT_CLIENT_ERROR_CODE\
    \ attribute MUST be included.\n   The AT_MAC, AT_IV, or AT_ENCR_DATA attributes\
    \ MUST NOT be used with\n   this packet.\n"
- title: 9.8.  EAP-Request/SIM/Notification
  contents:
  - "9.8.  EAP-Request/SIM/Notification\n   The usage of this message is specified\
    \ in Section 6.  The\n   AT_NOTIFICATION attribute MUST be included.\n   The AT_MAC\
    \ attribute MUST be included if the P bit of the\n   notification code in AT_NOTIFICATION\
    \ is set to zero, and MUST NOT be\n   included in cases when the P bit is set\
    \ to one.  The P bit is\n   discussed in Section 6.\n   No message-specific data\
    \ is included in the MAC calculation.  See\n   Section 10.14.\n   If EAP-Request/SIM/Notification\
    \ is used on a fast re-authentication\n   exchange, and if the P bit in AT_NOTIFICATION\
    \ is set to zero, then\n   AT_COUNTER is used for replay protection.  In this\
    \ case, the\n   AT_ENCR_DATA and AT_IV attributes MUST be included, and the\n\
    \   encapsulated plaintext attributes MUST include the AT_COUNTER\n   attribute.\
    \  The counter value included in AT_COUNTER MUST be the same\n   as in the EAP-Request/SIM/Re-authentication\
    \ packet on the same fast\n   re-authentication exchange.\n"
- title: 9.9.  EAP-Response/SIM/Notification
  contents:
  - "9.9.  EAP-Response/SIM/Notification\n   The usage of this message is specified\
    \ in Section 6.  This packet is\n   an acknowledgement of EAP-Request/SIM/Notification.\n\
    \   The AT_MAC attribute MUST be included in cases when the P bit of the\n   notification\
    \ code in AT_NOTIFICATION of EAP-Request/SIM/Notification\n   is set to zero,\
    \ and MUST NOT be included in cases when the P bit is\n   set to one.  The P bit\
    \ is discussed in Section 6.\n   No message-specific data is included in the MAC\
    \ calculation, see\n   Section 10.14.\n   If EAP-Request/SIM/Notification is used\
    \ on a fast re-authentication\n   exchange, and if the P bit in AT_NOTIFICATION\
    \ is set to zero, then\n   AT_COUNTER is used for replay protection.  In this\
    \ case, the\n   AT_ENCR_DATA and AT_IV attributes MUST be included, and the\n\
    \   encapsulated plaintext attributes MUST include the AT_COUNTER\n   attribute.\
    \  The counter value included in AT_COUNTER MUST be the same\n   as in the EAP-Request/SIM/Re-authentication\
    \ packet on the same fast\n   re-authentication exchange.\n"
- title: 10.  Attributes
  contents:
  - "10.  Attributes\n   This section specifies the format of message attributes.\
    \  The\n   attribute type numbers are specified in the IANA considerations\n \
    \  section of the EAP-AKA specification [EAP-AKA].\n"
- title: 10.1.  Table of Attributes
  contents:
  - "10.1.  Table of Attributes\n   The following table provides a guide to which\
    \ attributes may be found\n   in which kinds of messages, and in what quantity.\
    \  Messages are\n   denoted with numbers in parentheses as follows: (1)\n   EAP-Request/SIM/Start,\
    \ (2) EAP-Response/SIM/Start, (3)\n   EAP-Request/SIM/Challenge, (4) EAP-Response/SIM/Challenge,\
    \ (5)\n   EAP-Request/SIM/Notification, (6) EAP-Response/SIM/Notification, (7)\n\
    \   EAP-Response/SIM/Client-Error, (8) EAP-Request/SIM/Re-authentication,\n  \
    \ and (9) EAP-Response/SIM/Re-authentication.  The column denoted with\n   \"\
    Encr\" indicates whether the attribute is a nested attribute that\n   MUST be\
    \ included within AT_ENCR_DATA, and the column denoted with\n   \"Skip\" indicates\
    \ whether the attribute is a skippable attribute.\n   \"0\" indicates that the\
    \ attribute MUST NOT be included in the message,\n   \"1\" indicates that the\
    \ attribute MUST be included in the message,\n   \"0-1\" indicates that the attribute\
    \ is sometimes included in the\n   message, and \"0*\" indicates that the attribute\
    \ is not included in the\n   message in cases specified in this document, but\
    \ MAY be included in\n   future versions of the protocol.\n              Attribute\
    \ (1) (2) (3) (4) (5) (6) (7) (8) (9)  Encr Skip\n        AT_VERSION_LIST  1 \
    \  0   0   0   0   0   0   0   0   N     N\n    AT_SELECTED_VERSION  0  0-1  0\
    \   0   0   0   0   0   0   N     N\n            AT_NONCE_MT  0  0-1  0   0  \
    \ 0   0   0   0   0   N     N\n    AT_PERMANENT_ID_REQ 0-1  0   0   0   0   0\
    \   0   0   0   N     N\n          AT_ANY_ID_REQ 0-1  0   0   0   0   0   0  \
    \ 0   0   N     N\n     AT_FULLAUTH_ID_REQ 0-1  0   0   0   0   0   0   0   0\
    \   N     N\n            AT_IDENTITY  0  0-1  0   0   0   0   0   0   0   N  \
    \   N\n                AT_RAND  0   0   1   0   0   0   0   0   0   N     N\n\
    \      AT_NEXT_PSEUDONYM  0   0  0-1  0   0   0   0   0   0   Y     Y\n      AT_NEXT_REAUTH_ID\
    \  0   0  0-1  0   0   0   0  0-1  0   Y     Y\n                  AT_IV  0   0\
    \  0-1  0* 0-1 0-1  0   1   1   N     Y\n           AT_ENCR_DATA  0   0  0-1 \
    \ 0* 0-1 0-1  0   1   1   N     Y\n             AT_PADDING  0   0  0-1  0* 0-1\
    \ 0-1  0  0-1 0-1  Y     N\n          AT_RESULT_IND  0   0  0-1 0-1  0   0   0\
    \  0-1 0-1  N     Y\n                 AT_MAC  0   0   1   1  0-1 0-1  0   1  \
    \ 1   N     N\n             AT_COUNTER  0   0   0   0  0-1 0-1  0   1   1   Y\
    \     N\n   AT_COUNTER_TOO_SMALL  0   0   0   0   0   0   0   0  0-1  Y     N\n\
    \             AT_NONCE_S  0   0   0   0   0   0   0   1   0   Y     N\n      \
    \  AT_NOTIFICATION  0   0   0   0   1   0   0   0   0   N     N\n   AT_CLIENT_ERROR_CODE\
    \  0   0   0   0   0   0   1   0   0   N     N\n   It should be noted that attributes\
    \ AT_PERMANENT_ID_REQ,\n   AT_ANY_ID_REQ, and AT_FULLAUTH_ID_REQ are mutually\
    \ exclusive; only\n   one of them can be included at the same time.  If one of\
    \ the\n   attributes AT_IV and AT_ENCR_DATA is included, then both of the\n  \
    \ attributes MUST be included.\n"
- title: 10.2.  AT_VERSION_LIST
  contents:
  - "10.2.  AT_VERSION_LIST\n   The format of the AT_VERSION_LIST attribute is shown\
    \ below.\n     0                   1                   2                   3\n\
    \     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    | AT_VERSION_L..| Length        | Actual Version List Length    |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |  Supported Version 1          |  Supported Version 2          |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    .                                                               .\n    .\
    \                                                               .\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    | Supported Version N           |     Padding                   |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   This attribute is used in version negotiation, as specified in\n   Section\
    \ 4.1.  The attribute contains the version numbers supported by\n   the EAP-SIM\
    \ server.  The server MUST only include versions that it\n   implements and that\
    \ are allowed in its security policy.  The server\n   SHOULD list the versions\
    \ in the order of preference, with the most\n   preferred versions listed first.\
    \  At least one version number MUST be\n   included.  The version number for the\
    \ protocol described in this\n   document is one (0001 hexadecimal).\n   The value\
    \ field of this attribute begins with 2-byte Actual Version\n   List Length, which\
    \ specifies the length of the Version List in bytes,\n   not including the Actual\
    \ Version List Length attribute length.  This\n   field is followed by the list\
    \ of the versions supported by the\n   server, which each have a length of 2 bytes.\
    \  For example, if there\n   is only one supported version, then the Actual Version\
    \ List Length is\n   2.  Because the length of the attribute must be a multiple\
    \ of 4\n   bytes, the sender pads the value field with zero bytes when\n   necessary.\n"
- title: 10.3.  AT_SELECTED_VERSION
  contents:
  - "10.3.  AT_SELECTED_VERSION\n   The format of the AT_SELECTED_VERSION attribute\
    \ is shown below.\n     0                   1                   2            \
    \       3\n     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0\
    \ 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n \
    \   | AT_SELECTED...| Length = 1    |    Selected Version           |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   This attribute is used in version negotiation, as specified in\n   Section\
    \ 4.1.  The value field of this attribute contains a two-byte\n   version number,\
    \ which indicates the EAP-SIM version that the peer\n   wants to use.\n"
- title: 10.4.  AT_NONCE_MT
  contents:
  - "10.4.  AT_NONCE_MT\n   The format of the AT_NONCE_MT attribute is shown below.\n\
    \     0                   1                   2                   3\n     0 1\
    \ 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |AT_NONCE_MT    | Length = 5    |           Reserved            |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                                                               |\n    |\
    \                           NONCE_MT                            |\n    |     \
    \                                                          |\n    |          \
    \                                                     |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The value field of the NONCE_MT attribute contains two reserved bytes\n  \
    \ followed by a random number freshly generated by the peer (16 bytes\n   long)\
    \ for this EAP-SIM authentication exchange.  The random number is\n   used as\
    \ a seed value for the new keying material.  The reserved bytes\n   are set to\
    \ zero upon sending and ignored upon reception.\n   The peer MUST NOT re-use the\
    \ NONCE_MT value from a previous EAP-SIM\n   authentication exchange.  If an EAP-SIM\
    \ exchange includes several\n   EAP/SIM/Start rounds, then the peer SHOULD use\
    \ the same NONCE_MT\n   value in all EAP-Response/SIM/Start packets.  The peer\
    \ SHOULD use a\n   good source of randomness to generate NONCE_MT.  Please see\
    \ [RFC4086]\n   for more information about generating random numbers for security\n\
    \   applications.\n"
- title: 10.5.  AT_PERMANENT_ID_REQ
  contents:
  - "10.5.  AT_PERMANENT_ID_REQ\n   The format of the AT_PERMANENT_ID_REQ attribute\
    \ is shown below.\n     0                   1                   2            \
    \       3\n     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0\
    \ 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n \
    \   |AT_PERM..._REQ | Length = 1    |           Reserved            |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The use of the AT_PERMANENT_ID_REQ is defined in Section 4.2.  The\n   value\
    \ field contains only two reserved bytes, which are set to zero\n   on sending\
    \ and ignored on reception.\n"
- title: 10.6.  AT_ANY_ID_REQ
  contents:
  - "10.6.  AT_ANY_ID_REQ\n   The format of the AT_ANY_ID_REQ attribute is shown below.\n\
    \     0                   1                   2                   3\n     0 1\
    \ 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |AT_ANY_ID_REQ  | Length = 1    |           Reserved            |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The use of the AT_ANY_ID_REQ is defined in Section 4.2.  The value\n   field\
    \ contains only two reserved bytes, which are set to zero on\n   sending and ignored\
    \ on reception.\n"
- title: 10.7.  AT_FULLAUTH_ID_REQ
  contents:
  - "10.7.  AT_FULLAUTH_ID_REQ\n   The format of the AT_FULLAUTH_ID_REQ attribute\
    \ is shown below.\n     0                   1                   2            \
    \       3\n     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0\
    \ 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n \
    \   |AT_FULLAUTH_...| Length = 1    |           Reserved            |\n    +---------------+---------------+-------------------------------+\n\
    \   The use of the AT_FULLAUTH_ID_REQ is defined in Section 4.2.  The\n   value\
    \ field contains only two reserved bytes, which are set to zero\n   on sending\
    \ and ignored on reception.\n"
- title: 10.8.  AT_IDENTITY
  contents:
  - "10.8.  AT_IDENTITY\n   The format of the AT_IDENTITY attribute is shown below.\n\
    \     0                   1                   2                   3\n     0 1\
    \ 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    | AT_IDENTITY   | Length        | Actual Identity Length        |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                                                               |\n    .\
    \                       Identity (optional)                     .\n    .     \
    \                                                          .\n    |          \
    \                                                     |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The use of the AT_IDENTITY is defined in Section 4.2.  The value\n   field\
    \ of this attribute begins with a 2-byte actual identity length,\n   which specifies\
    \ the length of the identity in bytes.  This field is\n   followed by the subscriber\
    \ identity of the indicated actual length.\n   The identity is the permanent identity,\
    \ a pseudonym identity, or a\n   fast re-authentication identity.  The identity\
    \ format is specified in\n   Section 4.2.1.  The same identity format is used\
    \ in the AT_IDENTITY\n   attribute and the EAP-Response/Identity packet, with\
    \ the exception\n   that the peer MUST NOT decorate the identity it includes in\n\
    \   AT_IDENTITY.  The identity does not include any terminating null\n   characters.\
    \  Because the length of the attribute must be a multiple\n   of 4 bytes, the\
    \ sender pads the identity with zero bytes when\n   necessary.\n"
- title: 10.9.  AT_RAND
  contents:
  - "10.9.  AT_RAND\n   The format of the AT_RAND attribute is shown below.\n    \
    \ 0                   1                   2                   3\n     0 1 2 3\
    \ 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    | AT_RAND       | Length        |           Reserved            |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                                                               |\n    .\
    \                            n*RAND                             .\n    .     \
    \                                                          .\n    |          \
    \                                                     |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The value field of this attribute contains two reserved bytes\n   followed\
    \ by n GSM RANDs, each 16 bytes long.  The value of n can be\n   determined by\
    \ the attribute length.  The reserved bytes are set to\n   zero upon sending and\
    \ ignored upon reception.\n   The number of RAND challenges (n) MUST be two or\
    \ three.  The peer\n   MUST verify that the number of RAND challenges is sufficient\n\
    \   according to the peer's policy.  The server MUST use different RAND\n   values.\
    \  In other words, a RAND value can only be included once in\n   AT_RAND.  When\
    \ processing the AT_RAND attribute, the peer MUST check\n   that the RANDs are\
    \ different.\n   The EAP server MUST obtain fresh RANDs for each EAP-SIM full\n\
    \   authentication exchange.  More specifically, the server MUST consider\n  \
    \ RANDs it included in AT_RAND to be consumed if the server receives an\n   EAP-Response/SIM/Challenge\
    \ packet with a valid AT_MAC, or an\n   EAP-Response/SIM/Client-Error with the\
    \ code \"insufficient number of\n   challenges\" or \"RANDs are not fresh\". \
    \ However, in other cases (if\n   the server does not receive a response to its\n\
    \   EAP-Request/SIM/Challenge packet, or if the server receives a\n   response\
    \ other than the cases listed above), the server does not need\n   to consider\
    \ the RANDs to be consumed, and the server MAY re-use the\n   RANDs in the AT_RAND\
    \ attribute of the next full authentication\n   attempt.\n"
- title: 10.10.  AT_NEXT_PSEUDONYM
  contents:
  - "10.10.  AT_NEXT_PSEUDONYM\n   The format of the AT_NEXT_PSEUDONYM attribute is\
    \ shown below.\n     0                   1                   2               \
    \    3\n     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n\
    \    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    |\
    \ AT_NEXT_PSEU..| Length        | Actual Pseudonym Length       |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                                                               |\n    .\
    \                          Next Pseudonym                       .\n    .     \
    \                                                          .\n    |          \
    \                                                     |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The value field of this attribute begins with the 2-byte actual\n   pseudonym\
    \ length, which specifies the length of the following\n   pseudonym in bytes.\
    \  This field is followed by a pseudonym username\n   that the peer can use in\
    \ the next authentication.  The username MUST\n   NOT include any realm portion.\
    \  The username does not include any\n   terminating null characters.  Because\
    \ the length of the attribute\n   must be a multiple of 4 bytes, the sender pads\
    \ the pseudonym with\n   zero bytes when necessary.  The username encoding MUST\
    \ follow the\n   UTF-8 transformation format [RFC3629].  This attribute MUST always\
    \ be\n   encrypted by encapsulating it within the AT_ENCR_DATA attribute.\n"
- title: 10.11.  AT_NEXT_REAUTH_ID
  contents:
  - "10.11.  AT_NEXT_REAUTH_ID\n   The format of the AT_NEXT_REAUTH_ID attribute is\
    \ shown below.\n     0                   1                   2               \
    \    3\n     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n\
    \    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    |\
    \ AT_NEXT_REAU..| Length        | Actual Re-Auth Identity Length|\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                                                               |\n    .\
    \               Next Fast Re-authentication Username            .\n    .     \
    \                                                          .\n    |          \
    \                                                     |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The value field of this attribute begins with the 2-byte actual\n   re-authentication\
    \ identity length which specifies the length of the\n   following fast re-authentication\
    \ identity in bytes.  This field is\n   followed by a fast re-authentication identity\
    \ that the peer can use\n   in the next fast re-authentication, as described in\
    \ Section 5.  In\n   environments where a realm portion is required, the fast\n\
    \   re-authentication identity includes both a username portion and a\n   realm\
    \ name portion.  The fast re-authentication identity does not\n   include any\
    \ terminating null characters.  Because the length of the\n   attribute must be\
    \ a multiple of 4 bytes, the sender pads the fast\n   re-authentication identity\
    \ with zero bytes when necessary.  The\n   identity encoding MUST follow the UTF-8\
    \ transformation format\n   [RFC3629].  This attribute MUST always be encrypted\
    \ by encapsulating\n   it within the AT_ENCR_DATA attribute.\n"
- title: 10.12.  AT_IV, AT_ENCR_DATA, and AT_PADDING
  contents:
  - "10.12.  AT_IV, AT_ENCR_DATA, and AT_PADDING\n   AT_IV and AT_ENCR_DATA attributes\
    \ can be used to transmit encrypted\n   information between the EAP-SIM peer and\
    \ server.\n   The value field of AT_IV contains two reserved bytes followed by\
    \ a\n   16-byte initialization vector required by the AT_ENCR_DATA attribute.\n\
    \   The reserved bytes are set to zero when sending and ignored on\n   reception.\
    \  The AT_IV attribute MUST be included if and only if the\n   AT_ENCR_DATA is\
    \ included.  Section 6.3 specifies the operation if a\n   packet that does not\
    \ meet this condition is encountered.\n   The sender of the AT_IV attribute chooses\
    \ the initialization vector\n   at random.  The sender MUST NOT re-use the initialization\
    \ vector\n   value from previous EAP-SIM packets.  The sender SHOULD use a good\n\
    \   source of randomness to generate the initialization vector.  Please\n   see\
    \ [RFC4086] for more information about generating random numbers\n   for security\
    \ applications.  The format of AT_IV is shown below.\n     0                 \
    \  1                   2                   3\n     0 1 2 3 4 5 6 7 8 9 0 1 2 3\
    \ 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |     AT_IV     | Length = 5    |           Reserved            |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                                                               |\n    |\
    \                 Initialization Vector                         |\n    |     \
    \                                                          |\n    |          \
    \                                                     |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The value field of the AT_ENCR_DATA attribute consists of two\n   reserved\
    \ bytes followed by cipher text bytes encrypted using the\n   Advanced Encryption\
    \ Standard (AES) [AES] with a 128-bit key in the\n   Cipher Block Chaining (CBC)\
    \ mode of operation using the\n   initialization vector from the AT_IV attribute.\
    \  The reserved bytes\n   are set to zero when sending and ignored on reception.\
    \  Please see\n   [CBC] for a description of the CBC mode.  The format of the\n\
    \   AT_ENCR_DATA attribute is shown below.\n     0                   1       \
    \            2                   3\n     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8\
    \ 9 0 1 2 3 4 5 6 7 8 9 0 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    | AT_ENCR_DATA  | Length        |           Reserved            |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                                                               |\n    .\
    \                    Encrypted Data                             .\n    .     \
    \                                                          .\n    |          \
    \                                                     |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The derivation of the encryption key (K_encr) is specified in Section\n  \
    \ 7.\n   The plaintext consists of nested EAP-SIM attributes.\n   The encryption\
    \ algorithm requires the length of the plaintext to be a\n   multiple of 16 bytes.\
    \  The sender may need to include the AT_PADDING\n   attribute as the last attribute\
    \ within AT_ENCR_DATA.  The AT_PADDING\n   attribute is not included if the total\
    \ length of other nested\n   attributes within the AT_ENCR_DATA attribute is a\
    \ multiple of 16\n   bytes.  As usual, the Length of the Padding attribute includes\
    \ the\n   Attribute Type and Attribute Length fields.  The length of the\n   Padding\
    \ attribute is 4, 8, or 12 bytes.  It is chosen so that the\n   length of the\
    \ value field of the AT_ENCR_DATA attribute becomes a\n   multiple of 16 bytes.\
    \  The actual pad bytes in the value field are\n   set to zero (00 hexadecimal)\
    \ on sending.  The recipient of the\n   message MUST verify that the pad bytes\
    \ are set to zero.  If this\n   verification fails on the peer, then it MUST send\
    \ the\n   EAP-Response/SIM/Client-Error packet with the error code \"unable to\n\
    \   process packet\" to terminate the authentication exchange.  If this\n   verification\
    \ fails on the server, then the server sends the peer the\n   EAP-Request/SIM/Notification\
    \ packet with an AT_NOTIFICATION code that\n   implies failure to terminate the\
    \ authentication exchange.  The format\n   of the AT_PADDING attribute is shown\
    \ below.\n     0                   1                   2                   3\n\
    \     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |  AT_PADDING   | Length        | Padding...                    |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \                               |\n    |                                     \
    \                          |\n    |                                          \
    \                     |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 10.13.  AT_RESULT_IND
  contents:
  - "10.13.  AT_RESULT_IND\n   The format of the AT_RESULT_IND attribute is shown\
    \ below.\n     0                   1                   2                   3\n\
    \     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |  AT_RESULT_...| Length = 1    |           Reserved            |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The value field of this attribute consists of two reserved bytes,\n   which\
    \ are set to zero upon sending and ignored upon reception.  This\n   attribute\
    \ is always sent unencrypted, so it MUST NOT be encapsulated\n   within the AT_ENCR_DATA\
    \ attribute.\n"
- title: 10.14.  AT_MAC
  contents:
  - "10.14.  AT_MAC\n   The AT_MAC attribute is used for EAP-SIM message authentication.\n\
    \   Section 8 specifies in which messages AT_MAC MUST be included.\n   The value\
    \ field of the AT_MAC attribute contains two reserved bytes\n   followed by a\
    \ keyed message authentication code (MAC).  The MAC is\n   calculated over the\
    \ whole EAP packet and concatenated with optional\n   message-specific data, with\
    \ the exception that the value field of the\n   MAC attribute is set to zero when\
    \ calculating the MAC.  The EAP\n   packet includes the EAP header that begins\
    \ with the Code field, the\n   EAP-SIM header that begins with the Subtype field,\
    \ and all the\n   attributes, as specified in Section 8.1.  The reserved bytes\
    \ in\n   AT_MAC are set to zero when sending and ignored on reception.  The\n\
    \   contents of the message-specific data that may be included in the MAC\n  \
    \ calculation are specified separately for each EAP-SIM message in\n   Section\
    \ 9.\n   The format of the AT_MAC attribute is shown below.\n     0          \
    \         1                   2                   3\n     0 1 2 3 4 5 6 7 8 9\
    \ 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |     AT_MAC    | Length = 5    |           Reserved            |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                                                               |\n    |\
    \                           MAC                                 |\n    |     \
    \                                                          |\n    |          \
    \                                                     |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The MAC algorithm is an HMAC-SHA1-128 [RFC2104] keyed hash value.\n   (The\
    \ HMAC-SHA1-128 value is obtained from the 20-byte HMAC-SHA1 value\n   by truncating\
    \ the output to the first 16 bytes.  Hence, the length of\n   the MAC is 16 bytes.\
    \  The derivation of the authentication key\n   (K_aut) used in the calculation\
    \ of the MAC is specified in Section 7.\n   When the AT_MAC attribute is included\
    \ in an EAP-SIM message, the\n   recipient MUST process the AT_MAC attribute before\
    \ looking at any\n   other attributes, except when processing EAP-Request/SIM/Challenge.\n\
    \   The processing of EAP-Request/SIM/Challenge is specified in Section\n   9.3.\
    \  If the message authentication code is invalid, then the\n   recipient MUST\
    \ ignore all other attributes in the message and operate\n   as specified in Section\
    \ 6.3.\n"
- title: 10.15.  AT_COUNTER
  contents:
  - "10.15.  AT_COUNTER\n   The format of the AT_COUNTER attribute is shown below.\n\
    \     0                   1                   2                   3\n     0 1\
    \ 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |  AT_COUNTER   | Length = 1    |           Counter             |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The value field of the AT_COUNTER attribute consists of a 16-bit\n   unsigned\
    \ integer counter value, represented in network byte order.\n   This attribute\
    \ MUST always be encrypted by encapsulating it within\n   the AT_ENCR_DATA attribute.\n"
- title: 10.16.  AT_COUNTER_TOO_SMALL
  contents:
  - "10.16.  AT_COUNTER_TOO_SMALL\n   The format of the AT_COUNTER_TOO_SMALL attribute\
    \ is shown below.\n     0                   1                   2            \
    \       3\n     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0\
    \ 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n \
    \   |  AT_COUNTER...| Length = 1    |           Reserved            |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The value field of this attribute consists of two reserved bytes,\n   which\
    \ are set to zero upon sending and ignored upon reception.  This\n   attribute\
    \ MUST always be encrypted by encapsulating it within the\n   AT_ENCR_DATA attribute.\n"
- title: 10.17.  AT_NONCE_S
  contents:
  - "10.17.  AT_NONCE_S\n   The format of the AT_NONCE_S attribute is shown below.\n\
    \     0                   1                   2                   3\n     0 1\
    \ 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    | AT_NONCE_S    | Length = 5    |           Reserved            |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                                                               |\n    |\
    \                                                               |\n    |     \
    \                       NONCE_S                            |\n    |          \
    \                                                     |\n    |               \
    \                                                |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The value field of the AT_NONCE_S attribute contains two reserved\n   bytes\
    \ followed by a random number freshly generated by the server (16\n   bytes) for\
    \ this EAP-SIM fast re-authentication.  The random number is\n   used as a challenge\
    \ for the peer and also as a seed value for the new\n   keying material.  The\
    \ reserved bytes are set to zero upon sending and\n   ignored upon reception.\
    \  This attribute MUST always be encrypted by\n   encapsulating it within the\
    \ AT_ENCR_DATA attribute.\n   The server MUST NOT re-use the NONCE_S value from\
    \ any previous\n   EAP-SIM fast re-authentication exchange.  The server SHOULD\
    \ use a\n   good source of randomness to generate NONCE_S.  Please see [RFC4086]\n\
    \   for more information about generating random numbers for security\n   applications.\n"
- title: 10.18.  AT_NOTIFICATION
  contents:
  - "10.18.  AT_NOTIFICATION\n   The format of the AT_NOTIFICATION attribute is shown\
    \ below.\n     0                   1                   2                   3\n\
    \     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |AT_NOTIFICATION| Length = 1    |S|P|  Notification Code        |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The value field of this attribute contains a two-byte notification\n   code.\
    \  The first and second bit (S and P) of the notification code\n   are interpreted\
    \ as described in Section 6.\n   The notification code values listed below have\
    \ been reserved.  The\n   descriptions below illustrate the semantics of the notifications.\n\
    \   The peer implementation MAY use different wordings when presenting\n   the\
    \ notifications to the user.  The \"requested service\" depends on\n   the environment\
    \ where EAP-SIM is applied.\n   0 - General failure after authentication.  (Implies\
    \ failure, used\n   after successful authentication.)\n   16384 - General failure.\
    \  (Implies failure, used before\n   authentication.)\n   32768 - Success.  User\
    \ has been successfully authenticated.  (Does\n   not imply failure, used after\
    \ successful authentication).  The usage\n   of this code is discussed in Section\
    \ 6.2.\n   1026 - User has been temporarily denied access to the requested\n \
    \  service.  (Implies failure, used after successful authentication.)\n   1031\
    \ - User has not subscribed to the requested service.  (Implies\n   failure, used\
    \ after successful authentication.)\n"
- title: 10.19.  AT_CLIENT_ERROR_CODE
  contents:
  - "10.19.  AT_CLIENT_ERROR_CODE\n   The format of the AT_CLIENT_ERROR_CODE attribute\
    \ is shown below.\n     0                   1                   2            \
    \       3\n     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0\
    \ 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n \
    \   |AT_CLIENT_ERR..| Length = 1    |     Client Error Code         |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The value field of this attribute contains a two-byte client error\n   code.\
    \  The following error code values have been reserved.\n    0    \"unable to process\
    \ packet\": a general error code\n    1    \"unsupported version\": the peer does\
    \ not support any of\n         the versions listed in AT_VERSION_LIST\n    2 \
    \   \"insufficient number of challenges\": the peer's policy\n         requires\
    \ more triplets than the server included in AT_RAND\n    3    \"RANDs are not\
    \ fresh\": the peer believes that the RAND\n         challenges included in AT_RAND\
    \ were not fresh\n"
- title: 11.  IANA Considerations
  contents:
  - "11.  IANA Considerations\n   IANA has assigned the EAP type number 18 for this\
    \ protocol.\n   EAP-SIM shares most of the protocol design, such as attributes\
    \ and\n   message Subtypes, with EAP-AKA [EAP-AKA].  EAP-SIM protocol numbers\n\
    \   should be administered in the same IANA registry as EAP-AKA.  The\n   initial\
    \ values are listed in [EAP-AKA] for both protocols, so this\n   document does\
    \ not require any new registries or parameter allocation.\n   As a common registry\
    \ is used for EAP-SIM and EAP-AKA, the protocol\n   number allocation policy for\
    \ both protocols is specified in\n   [EAP-AKA].\n"
- title: 12.  Security Considerations
  contents:
  - "12.  Security Considerations\n   The EAP specification [RFC3748] describes the\
    \ security\n   vulnerabilities of EAP, which does not include its own security\n\
    \   mechanisms.  This section discusses the claimed security properties\n   of\
    \ EAP-SIM, as well as vulnerabilities and security recommendations.\n"
- title: 12.1.  A3 and A8 Algorithms
  contents:
  - "12.1.  A3 and A8 Algorithms\n   The GSM A3 and A8 algorithms are used in EAP-SIM.\
    \  [GSM-03.20]\n   specifies the general GSM authentication procedure and the\
    \ external\n   interface (inputs and outputs) of the A3 and A8 algorithms.  The\n\
    \   operation of these functions falls completely within the domain of an\n  \
    \ individual operator, and therefore, the functions are specified by\n   each\
    \ operator rather than being fully standardised.  The GSM-MILENAGE\n   algorithm,\
    \ specified publicly in [3GPP-TS-55.205], is an example\n   algorithm set for\
    \ A3 and A8 algorithms.\n   The security of the A3 and A8 algorithms is important\
    \ to the security\n   of EAP-SIM.  Some A3/A8 algorithms have been compromised;\
    \ see [GSM-\n   Cloning] for discussion about the security of COMP-128 version\
    \ 1.\n   Note that several revised versions of the COMP-128 A3/A8 algorithm\n\
    \   have been devised after the publication of these weaknesses and that\n   the\
    \ publicly specified GSM-MILENAGE algorithm is not vulnerable to\n   any known\
    \ attacks.\n"
- title: 12.2.  Identity Protection
  contents:
  - "12.2.  Identity Protection\n   EAP-SIM includes optional identity privacy support\
    \ that protects the\n   privacy of the subscriber identity against passive eavesdropping.\n\
    \   This document only specifies a mechanism to deliver pseudonyms from\n   the\
    \ server to the peer as part of an EAP-SIM exchange.  Hence, a peer\n   that has\
    \ not yet performed any EAP-SIM exchanges does not typically\n   have a pseudonym\
    \ available.  If the peer does not have a pseudonym\n   available, then the privacy\
    \ mechanism cannot be used, but the\n   permanent identity will have to be sent\
    \ in the clear.  The terminal\n   SHOULD store the pseudonym in a non-volatile\
    \ memory so that it can be\n   maintained across reboots.  An active attacker\
    \ that impersonates the\n   network may use the AT_PERMANENT_ID_REQ attribute\
    \ to attempt to learn\n   the subscriber's permanent identity.  However, as discussed\
    \ in\n   Section 4.2.2, the terminal can refuse to send the cleartext\n   permanent\
    \ identity if it believes that the network should be able to\n   recognize the\
    \ pseudonym.\n   If the peer and server cannot guarantee that the pseudonym will\
    \ be\n   maintained reliably, and identity privacy is required, then\n   additional\
    \ protection from an external security mechanism (such as\n   Protected Extensible\
    \ Authentication Protocol (PEAP) [PEAP]) may be\n   used.  If an external security\
    \ mechanism is in use, the identity\n   privacy features of EAP-SIM may not be\
    \ useful.  The security\n   considerations of using an external security mechanism\
    \ with EAP-SIM\n   are beyond the scope of this document.\n"
- title: 12.3.  Mutual Authentication and Triplet Exposure
  contents:
  - "12.3.  Mutual Authentication and Triplet Exposure\n   EAP-SIM provides mutual\
    \ authentication.  The peer believes that the\n   network is authentic because\
    \ the network can calculate a correct\n   AT_MAC value in the EAP-Request/SIM/Challenge\
    \ packet.  To calculate\n   AT_MAC it is sufficient to know the RAND and Kc values\
    \ from the GSM\n   triplets (RAND, SRES, Kc) used in the authentication.  Because\
    \ the\n   network selects the RAND challenges and the triplets, an attacker\n\
    \   that knows n (2 or 3) GSM triplets for the subscriber is able to\n   impersonate\
    \ a valid network to the peer.  (Some peers MAY employ an\n   implementation-specific\
    \ counter-measure against impersonating a valid\n   network by re-using a previously\
    \ used RAND; see below.)  In other\n   words, the security of EAP-SIM is based\
    \ on the secrecy of Kc keys,\n   which are considered secret intermediate results\
    \ in the EAP-SIM\n   cryptographic calculations.\n   Given physical access to\
    \ the SIM card, it is easy to obtain any\n   number of GSM triplets.\n   Another\
    \ way to obtain triplets is to mount an attack on the peer\n   platform via a\
    \ virus or other malicious piece of software.  The peer\n   SHOULD be protected\
    \ against triplet querying attacks by malicious\n   software.  Care should be\
    \ taken not to expose Kc keys to attackers\n   when they are stored or handled\
    \ by the peer, or transmitted between\n   subsystems of the peer.  Steps should\
    \ be taken to limit the\n   transport, storage, and handling of these values outside\
    \ a protected\n   environment within the peer.  However, the virus protection\
    \ of the\n   peer and the security capabilities of the peer's operating system\
    \ are\n   outside the scope of this document.\n   The EAP-SIM server typically\
    \ obtains the triplets from the Home\n   Location Register (HLR).  An attacker\
    \ might try to obtain triplets by\n   attacking against the network used between\
    \ the EAP-SIM server and the\n   HLR.  Care should be taken not to expose Kc keys\
    \ to attackers when\n   they are stored or handled by the EAP-SIM server, or transmitted\n\
    \   between the EAP server and the HLR.  Steps should be taken to limit\n   the\
    \ transport, storage, and handling of these values outside a\n   protected environment.\
    \  However, the protection of the communications\n   between the EAP-SIM server\
    \ and the HLR is outside the scope of this\n   document.\n   If the same SIM credentials\
    \ are also used for GSM traffic, the\n   triplets could be revealed in the GSM\
    \ network; see Section 12.8.\n   In GSM, the network is allowed to re-use the\
    \ RAND challenge in\n   consecutive authentication exchanges.  This is not allowed\
    \ in\n   EAP-SIM.  The EAP-SIM server is mandated to use fresh triplets (RAND\n\
    \   challenges) in consecutive authentication exchanges, as specified in\n   Section\
    \ 3.  EAP-SIM does not mandate any means for the peer to check\n   if the RANDs\
    \ are fresh, so the security of the scheme leans on the\n   secrecy of the triplets.\
    \  However, the peer MAY employ\n   implementation-specific mechanisms to remember\
    \ some of the previously\n   used RANDs, and the peer MAY check the freshness\
    \ of the server's\n   RANDs.  The operation in cases when the peer detects that\
    \ the RANDs\n   are not fresh is specified in Section 6.3.1.\n   Preventing the\
    \ re-use of authentication vectors has been taken into\n   account in the design\
    \ of the UMTS Authentication and Key Agreement\n   (AKA), which is used in EAP-AKA\
    \ [EAP-AKA].  In cases when the triplet\n   re-use properties of EAP-SIM are not\
    \ considered sufficient, it is\n   advised to use EAP-AKA.\n   Note that EAP-SIM\
    \ mutual authentication is done with the EAP server.\n   In general, EAP methods\
    \ do not authenticate the identity or services\n   provided by the EAP authenticator\
    \ (if distinct from the EAP server)\n   unless they provide the so-called channel\
    \ bindings property.  The\n   vulnerabilities related to this have been discussed\
    \ in [RFC3748],\n   [EAP-Keying], [Service-Identity].\n   EAP-SIM does not provide\
    \ the channel bindings property, so it only\n   authenticates the EAP server.\
    \  However, ongoing work such as\n   [Service-Identity] may provide such support\
    \ as an extension to\n   popular EAP methods such as EAP-TLS, EAP-SIM, or EAP-AKA.\n"
- title: 12.4.  Flooding the Authentication Centre
  contents:
  - "12.4.  Flooding the Authentication Centre\n   The EAP-SIM server typically obtains\
    \ authentication vectors from the\n   Authentication Centre (AuC).  EAP-SIM introduces\
    \ a new usage for the\n   AuC.  The protocols between the EAP-SIM server and the\
    \ AuC are out of\n   the scope of this document.  However, it should be noted\
    \ that a\n   malicious EAP-SIM peer may generate a lot of protocol requests to\n\
    \   mount a denial of service attack.  The EAP-SIM server implementation\n   SHOULD\
    \ take this into account and SHOULD take steps to limit the\n   traffic that it\
    \ generates towards the AuC, preventing the attacker\n   from flooding the AuC\
    \ and from extending the denial of service attack\n   from EAP-SIM to other users\
    \ of the AuC.\n"
- title: 12.5.  Key Derivation
  contents:
  - "12.5.  Key Derivation\n   EAP-SIM supports key derivation.  The key hierarchy\
    \ is specified in\n   Section 7.  EAP-SIM combines several GSM triplets in order\
    \ to\n   generate stronger keying material and stronger AT_MAC values.  The\n\
    \   actual strength of the resulting keys depends, among other things, on\n  \
    \ operator-specific parameters including authentication algorithms, the\n   strength\
    \ of the Ki key, and the quality of the RAND challenges.  For\n   example, some\
    \ SIM cards generate Kc keys with 10 bits set to zero.\n   Such restrictions may\
    \ prevent the concatenation technique from\n   yielding strong session keys. \
    \ Because the strength of the Ki key is\n   128 bits, the ultimate strength of\
    \ any derived secret key material is\n   never more than 128 bits.\n   It should\
    \ also be noted that a security policy that allows n=2 to be\n   used may compromise\
    \ the security of a future policy that requires\n   three triplets, because adversaries\
    \ may be able to exploit the\n   messages exchanged when the weaker policy is\
    \ applied.\n   There is no known way to obtain complete GSM triplets by mounting\
    \ an\n   attack against EAP-SIM.  A passive eavesdropper can learn n*RAND and\n\
    \   AT_MAC and may be able to link this information to the subscriber\n   identity.\
    \  An active attacker that impersonates a GSM subscriber can\n   easily obtain\
    \ n*RAND and AT_MAC values from the EAP server for any\n   given subscriber identity.\
    \  However, calculating the Kc and SRES\n   values from AT_MAC would require the\
    \ attacker to reverse the keyed\n   message authentication code function HMAC-SHA1-128.\n\
    \   As EAP-SIM does not expose any values calculated from an individual\n   GSM\
    \ Kc keys, it is not possible to mount a brute force attack on only\n   one of\
    \ the Kc keys in EAP-SIM.  Therefore, when considering brute\n   force attacks\
    \ on the values exposed in EAP-SIM, the effective length\n   of EAP-SIM session\
    \ keys is not compromised by the fact that they are\n   combined from several\
    \ shorter keys, i.e., the effective length of 128\n   bits may be achieved.  For\
    \ additional considerations, see Section\n   12.8.\n"
- title: 12.6.  Cryptographic Separation of Keys and Session Independence
  contents:
  - "12.6.  Cryptographic Separation of Keys and Session Independence\n   The EAP\
    \ Transient Keys used to protect EAP-SIM packets (K_encr,\n   K_aut), the Master\
    \ Session Key, and the Extended Master Session Key\n   are cryptographically separate\
    \ in EAP-SIM.  An attacker cannot derive\n   any non-trivial information about\
    \ any of these keys based on the\n   other keys.  An attacker also cannot calculate\
    \ the pre-shared secret\n   (Ki) from the GSM Kc keys, from EAP-SIM K_encr, from\
    \ EAP-SIM K_aut,\n   from the Master Session Key, or from the Extended Master\
    \ Session Key.\n   Each EAP-SIM exchange generates fresh keying material, and\
    \ the keying\n   material exported from the method upon separate EAP-SIM exchanges\
    \ is\n   cryptographically separate.  The EAP-SIM peer contributes to the\n  \
    \ keying material with the NONCE_MT parameter, which must be chosen\n   freshly\
    \ for each full authentication exchange.  The EAP server is\n   mandated to choose\
    \ the RAND challenges freshly for each full\n   authentication exchange.  If either\
    \ the server or the peer chooses\n   its random value (NONCE_MT or RAND challenges)\
    \ freshly, even if the\n   other entity re-used its value from a previous exchange,\
    \ then the EAP\n   Transient Keys, the Master Session Key, and the Extended Master\n\
    \   Session Key will be different and cryptographically separate from the\n  \
    \ corresponding values derived upon the previous full authentication\n   exchange.\n\
    \   On fast re-authentication, freshness of the Master Session Key and\n   the\
    \ Extended Master Session Key is provided with a counter\n   (AT_COUNTER).  The\
    \ same EAP Transient Keys (K_encr, K_aut) that were\n   used in the full authentication\
    \ exchange are used to protect the EAP\n   negotiation.  However, replay and integrity\
    \ protection across all the\n   fast re-authentication exchanges that use the\
    \ same EAP Transient Keys\n   is provided with AT_COUNTER.\n   [RFC3748] defines\
    \ session independence as the \"demonstration that\n   passive attacks (such as\
    \ capture of the EAP conversation) or active\n   attacks (including compromise\
    \ of the MSK or EMSK) do not enable\n   compromise of subsequent or prior MSKs\
    \ or EMSKs\".  Because the MSKs\n   and EMSKs are separate between EAP exchanges,\
    \ EAP-SIM supports this\n   security claim.\n   It should be noted that [Patel-2003],\
    \ which predates [RFC3748], uses\n   a slightly different meaning for session\
    \ independence.  The EAP-SIM\n   protocol does not allow the peer to ensure that\
    \ different Kc key\n   values would be used in different exchanges.  Only the\
    \ server is able\n   to ensure that fresh RANDs, and therefore, fresh Kc keys\
    \ are used.\n   Hence, the peer cannot guarantee EAP-SIM sessions to be independent\n\
    \   with regard to the internal Kc values.  However, in EAP-SIM, the Kc\n   keys\
    \ are considered to be secret intermediate results, which are not\n   exported\
    \ outside the method.  See Section 12.3 for more information\n   about RAND re-use.\n"
- title: 12.7.  Dictionary Attacks
  contents:
  - "12.7.  Dictionary Attacks\n   Because EAP-SIM is not a password protocol, it\
    \ is not vulnerable to\n   dictionary attacks.  (The pre-shared symmetric secret\
    \ stored on the\n   SIM card is not a passphrase, nor is it derived from a passphrase.)\n"
- title: 12.8.  Credentials Re-use
  contents:
  - "12.8.  Credentials Re-use\n   EAP-SIM cannot prevent attacks over the GSM or\
    \ GPRS radio networks.\n   If the same SIM credentials are also used in GSM or\
    \ GPRS, it is\n   possible to mount attacks over the cellular interface.\n   A\
    \ passive attacker can eavesdrop GSM or GPRS traffic and obtain RAND,\n   SRES\
    \ pairs.  He can then use a brute force attack or other\n   cryptanalysis techniques\
    \ to obtain the 64-bit Kc keys used to encrypt\n   the GSM or GPRS data.  This\
    \ makes it possible to attack each 64-bit\n   key separately.\n   An active attacker\
    \ can mount a \"rogue GSM/GPRS base station attack\",\n   replaying previously\
    \ seen RAND challenges to obtain SRES values.  He\n   can then use a brute force\
    \ attack to obtain the Kc keys.  If\n   successful, the attacker can impersonate\
    \ a valid network or decrypt\n   previously seen traffic, because EAP-SIM does\
    \ not provide perfect\n   forward secrecy (PFS).\n   Due to several weaknesses\
    \ in the GSM encryption algorithms, the\n   effective key strength of the Kc keys\
    \ is much less than the expected\n   64 bits (no more than 40 bits if the A5/1\
    \ GSM encryption algorithm is\n   used; as documented in [Barkan-2003], an active\
    \ attacker can force\n   the peer to use the weaker A5/2 algorithm that can be\
    \ broken in less\n   than a second).\n   Because the A5 encryption algorithm is\
    \ not used in EAP-SIM, and\n   because EAP-SIM does not expose any values calculated\
    \ from individual\n   Kc keys, it should be noted that these attacks are not possible\
    \ if\n   the SIM credentials used in EAP-SIM are not shared in GSM/GPRS.\n   At\
    \ the time this document was written, the 3rd Generation Partnership\n   Project\
    \ (3GPP) has started to work on fixes to these A5\n   vulnerabilities.  One of\
    \ the solution proposals discussed in 3GPP is\n   integrity-protected A5 version\
    \ negotiation, which would require the\n   base station to prove knowledge of\
    \ the Kc key before the terminal\n   sends any values calculated from the Kc to\
    \ the network.  Another\n   proposal is so-called special RANDs, where some bits\
    \ of the RAND\n   challenge would be used for cryptographic separation by indicating\n\
    \   the allowed use of the triplet, such as the allowed A5 algorithm in\n   GSM\
    \ or the fact that the triplet is intended for EAP-SIM.  This is\n   currently\
    \ a work in progress, and the mechanisms have not been\n   selected yet.\n"
- title: 12.9.  Integrity and Replay Protection, and Confidentiality
  contents:
  - "12.9.  Integrity and Replay Protection, and Confidentiality\n   AT_MAC, AT_IV,\
    \ AT_ENCR_DATA, and AT_COUNTER attributes are used to\n   provide integrity, replay\
    \ and confidentiality protection for EAP-SIM\n   requests and responses.  Integrity\
    \ protection with AT_MAC includes\n   the EAP header.  These attributes cannot\
    \ be used during the\n   EAP/SIM/Start roundtrip.  However, the protocol values\
    \ (user identity\n   string, NONCE_MT, and version negotiation parameters) are\n\
    \   (implicitly) protected by later EAP-SIM messages by including them in\n  \
    \ key derivation.\n   Integrity protection (AT_MAC) is based on a keyed message\n\
    \   authentication code.  Confidentiality (AT_ENCR_DATA and AT_IV) is\n   based\
    \ on a block cipher.\n   Confidentiality protection is applied only to a part\
    \ of the protocol\n   fields.  The table of attributes in Section 10.1 summarizes\
    \ which\n   fields are confidentiality-protected.  It should be noted that the\n\
    \   error and notification code attributes AT_CLIENT_ERROR_CODE and\n   AT_NOTIFICATION\
    \ are not confidential, but they are transmitted in the\n   clear.  Identity protection\
    \ is discussed in Section 12.2.\n   On full authentication, replay protection\
    \ of the EAP exchange is\n   provided by the RAND values from the underlying GSM\
    \ authentication\n   scheme and the use of the NONCE_MT value.  Protection against\
    \ replays\n   of EAP-SIM messages is also based on the fact that messages that\
    \ can\n   include AT_MAC can only be sent once with a certain EAP-SIM Subtype,\n\
    \   and on the fact that a different K_aut key will be used for\n   calculating\
    \ AT_MAC in each full authentication exchange.\n   On fast re-authentication,\
    \ a counter included in AT_COUNTER and a\n   server random nonce is used to provide\
    \ replay protection.  The\n   AT_COUNTER attribute is also included in EAP-SIM\
    \ notifications if it\n   is used after successful authentication in order to\
    \ provide replay\n   protection between re-authentication exchanges.\n   Because\
    \ EAP-SIM is not a tunneling method, EAP-Request/Notification,\n   EAP-Response/Notification,\
    \ EAP-Success, or EAP-Failure packets are\n   not confidential, integrity-protected,\
    \ or replay-protected in\n   EAP-SIM.  On physically insecure networks, this may\
    \ enable an\n   attacker to send false notifications to the peer and to mount\
    \ denial\n   of service attacks by spoofing these packets.  As discussed in\n\
    \   Section 6.3, the peer will only accept EAP-Success after the peer\n   successfully\
    \ authenticates the server.  Hence, the attacker cannot\n   force the peer to\
    \ believe successful mutual authentication has\n   occurred until the peer successfully\
    \ authenticates the server or\n   after the peer fails to authenticate the server.\n\
    \   The security considerations of EAP-SIM result indications are covered\n  \
    \ in Section 12.11\n   An eavesdropper will see the EAP-Request/Notification,\n\
    \   EAP-Response/Notification, EAP-Success, and EAP-Failure packets sent\n   in\
    \ the clear.  With EAP-SIM, confidential information MUST NOT be\n   transmitted\
    \ in EAP Notification packets.\n"
- title: 12.10.  Negotiation Attacks
  contents:
  - "12.10.  Negotiation Attacks\n   EAP-SIM does not protect the EAP-Response/Nak\
    \ packet.  Because\n   EAP-SIM does not protect the EAP method negotiation, EAP\
    \ method\n   downgrading attacks may be possible, especially if the user uses\
    \ the\n   same identity with EAP-SIM and other EAP methods.\n   EAP-SIM includes\
    \ a version negotiation procedure.  In EAP-SIM the\n   keying material derivation\
    \ includes the version list and selected\n   version to ensure that the protocol\
    \ cannot be downgraded and that the\n   peer and server use the same version of\
    \ EAP-SIM.\n   EAP-SIM does not support ciphersuite negotiation.\n"
- title: 12.11.  Protected Result Indications
  contents:
  - "12.11.  Protected Result Indications\n   EAP-SIM supports optional protected\
    \ success indications and\n   acknowledged failure indications.  If a failure\
    \ occurs after\n   successful authentication, then the EAP-SIM failure indication\
    \ is\n   integrity- and replay-protected.\n   Even if an EAP-Failure packet is\
    \ lost when using EAP-SIM over an\n   unreliable medium, then the EAP-SIM failure\
    \ indications will help\n   ensure that the peer and EAP server will know the\
    \ other party's\n   authentication decision.  If protected success indications\
    \ are used,\n   then the loss of Success packet will also be addressed by the\n\
    \   acknowledged, integrity- and replay-protected EAP-SIM success\n   indication.\
    \  If the optional success indications are not used, then\n   the peer may end\
    \ up believing that the server succeeded\n   authentication, when it actually\
    \ failed.  Since access will not be\n   granted in this case, protected result\
    \ indications are not needed\n   unless the client is not able to realize it does\
    \ not have access for\n   an extended period of time.\n"
- title: 12.12.  Man-in-the-Middle Attacks
  contents:
  - "12.12.  Man-in-the-Middle Attacks\n   In order to avoid man-in-the-middle attacks\
    \ and session hijacking,\n   user data SHOULD be integrity-protected on physically\
    \ insecure\n   networks.  The EAP-SIM Master Session Key, or keys derived from\
    \ it,\n   MAY be used as the integrity protection keys, or, if an external\n \
    \  security mechanism such as PEAP is used, then the link integrity\n   protection\
    \ keys MAY be derived by the external security mechanism.\n   There are man-in-the-middle\
    \ attacks associated with the use of any\n   EAP method within a tunneled protocol.\
    \  For instance, an early\n   version of PEAP [PEAP-02] was vulnerable to this\
    \ attack.  This\n   specification does not address these attacks.  If EAP-SIM\
    \ is used\n   with a tunneling protocol, there should be cryptographic binding\n\
    \   provided between the protocol and EAP-SIM to prevent\n   man-in-the-middle\
    \ attacks through rogue authenticators being able to\n   setup one-way authenticated\
    \ tunnels.  For example, newer versions of\n   PEAP include such cryptographic\
    \ binding.  The EAP-SIM Master Session\n   Key MAY be used to provide the cryptographic\
    \ binding.  However, the\n   mechanism by which the binding is provided depends\
    \ on the tunneling\n   protocol and is beyond the scope of this document.\n"
- title: 12.13.  Generating Random Numbers
  contents:
  - "12.13.  Generating Random Numbers\n   An EAP-SIM implementation SHOULD use a\
    \ good source of randomness to\n   generate the random numbers required in the\
    \ protocol.  Please see\n   [RFC4086] for more information on generating random\
    \ numbers for\n   security applications.\n"
- title: 13.  Security Claims
  contents:
  - "13.  Security Claims\n   This section provides the security claims required by\
    \ [RFC3748].\n   Auth. mechanism: EAP-SIM is based on the GSM SIM mechanism, which\
    \ is\n   a challenge/response authentication and key agreement mechanism based\n\
    \   on a symmetric 128-bit pre-shared secret.  EAP-SIM also makes use of\n   a\
    \ peer challenge to provide mutual authentication.\n   Ciphersuite negotiation:\
    \ No\n   Mutual authentication: Yes (Section 12.3)\n   Integrity protection: Yes\
    \ (Section 12.9)\n   Replay protection: Yes (Section 12.9)\n   Confidentiality:\
    \ Yes, except method-specific success and failure\n   indications (Section 12.2,\
    \ Section 12.9)\n   Key derivation: Yes\n   Key strength: EAP-SIM supports key\
    \ derivation with 128-bit effective\n   key strength (Section 12.5).  However,\
    \ as discussed in Section 11, if\n   the same credentials are used in GSM/GPRS\
    \ and in EAP-SIM, then the\n   key strength may be reduced considerably, basically\
    \ to the same level\n   as in GSM, by mounting attacks over GSM/GPRS.  For example\
    \ an active\n   attack using a false GSM/GPRS base station reduces the effective\
    \ key\n   strength to almost zero.\n   Description of key hierarchy: Please see\
    \ Section 7.\n   Dictionary attack protection: N/A (Section 12.7)\n   Fast reconnect:\
    \ Yes\n   Cryptographic binding: N/A\n   Session independence: Yes (Section 12.6)\n\
    \   Fragmentation: No\n   Channel binding: No\n   Indication of vulnerabilities:\
    \ Vulnerabilities are discussed in\n   Section 12.\n"
- title: 14.  Acknowledgements and Contributions
  contents:
  - '14.  Acknowledgements and Contributions

    '
- title: 14.1.  Contributors
  contents:
  - "14.1.  Contributors\n   In addition to the editors, Nora Dabbous, Jose Puthenkulam,\
    \ and\n   Prasanna Satarasinghe were significant contributors to this document.\n\
    \   Pasi Eronen and Jukka-Pekka Honkanen contributed Appendix A.\n"
- title: 14.2.  Acknowledgements
  contents:
  - "14.2.  Acknowledgements\n   Juha Ala-Laurila, N. Asokan, Jan-Erik Ekberg, Patrik\
    \ Flykt,\n   Jukka-Pekka Honkanen, Antti Kuikka, Jukka Latva, Lassi Lehtinen,\
    \ Jyri\n   Rinnemaa, Timo Takamaki, and Raimo Vuonnala contributed many original\n\
    \   ideas and concepts to this protocol.\n   N. Asokan, Pasi Eronen, and Jukka-Pekka\
    \ Honkanen contributed and\n   helped in innumerable ways during the development\
    \ of the protocol.\n   Valtteri Niemi and Kaisa Nyberg contributed substantially\
    \ to the\n   design of the key derivation and the fast re-authentication\n   procedure,\
    \ and have also provided their cryptographic expertise in\n   many discussions\
    \ related to this protocol.\n   Simon Blake-Wilson provided very helpful comments\
    \ on key derivation\n   and version negotiation.\n   Thanks to Greg Rose for his\
    \ very valuable comments to an early\n   version of this specification [S3-020125],\
    \ and for reviewing and\n   providing very useful comments on version 12.\n  \
    \ Thanks to Bernard Aboba, Vladimir Alperovich, Florent Bersani,\n   Jacques Caron,\
    \ Gopal Dommety, Augustin Farrugia, Mark Grayson, Max de\n   Groot, Prakash Iyer,\
    \ Nishi Kant, Victor Lortz, Jouni Malinen, Sarvar\n   Patel, Tom Porcher, Michael\
    \ Richardson, Stefan Schroeder, Uma\n   Shankar, Jesse Walker, and Thomas Wieland\
    \ for their contributions and\n   critiques.  Special thanks to Max for proposing\
    \ improvements to the\n   MAC calculation.\n   Thanks to Glen Zorn for reviewing\
    \ this document and for providing\n   very useful comments on the protocol.\n\
    \   Thanks to Sarvar Patel for his review of the protocol [Patel-2003].\n   Thanks\
    \ to Bernard Aboba for reviewing this document for RFC 3748\n   compliance.\n\
    \   The identity privacy support is based on the identity privacy support\n  \
    \ of [EAP-SRP].  The attribute format is based on the extension format\n   of\
    \ Mobile IPv4 [RFC3344].\n   This protocol has been partly developed in parallel\
    \ with EAP-AKA\n   [EAP-AKA], and hence this specification incorporates many ideas\
    \ from\n   Jari Arkko.\n"
- title: 14.2.1.  Contributors' Addresses
  contents:
  - "14.2.1.  Contributors' Addresses\n   Nora Dabbous\n   Gemplus\n   34 rue Guynemer\n\
    \   92447 Issy les Moulineaux\n   France\n   Phone: +33 1 4648 2000\n   EMail:\
    \ nora.dabbous@gemplus.com\n   Jose Puthenkulam\n   Intel Corporation\n   2111\
    \ NE 25th Avenue, JF2-58\n   Hillsboro, OR 97124\n   USA\n   Phone: +1 503 264\
    \ 6121\n   EMail: jose.p.puthenkulam@intel.com\n   Prasanna Satarasinghe\n   Transat\
    \ Technologies\n   180 State Street, Suite 240\n   Southlake, TX 76092\n   USA\n\
    \   Phone: + 1 817 4814412\n   EMail: prasannas@transat-tech.com\n"
- title: 15.  References
  contents:
  - '15.  References

    '
- title: 15.1.  Normative References
  contents:
  - "15.1.  Normative References\n   [GSM-03.20]        European Telecommunications\
    \ Standards  Institute,\n                      \"GSM Technical Specification GSM\
    \ 03.20 (ETS 300\n                      534):  \"Digital cellular telecommunication\
    \ system\n                      (Phase 2); Security related network functions\"\
    \",\n                      August 1997.\n   [RFC2119]          Bradner, S., \"\
    Key words for use in RFCs to\n                      Indicate Requirement Levels\"\
    , BCP 14, RFC 2119,\n                      March 1997.\n   [GSM-03.03]       \
    \ European Telecommunications Standards Institute,\n                      \"GSM\
    \ Technical Specification GSM 03.03 (ETS 300\n                      523): \"Digital\
    \ cellular telecommunication system\n                      (Phase 2); Numbering,\
    \ addressing and\n                      identification\"\", April 1997.\n   [RFC2104]\
    \          Krawczyk, H., Bellare, M., and R. Canetti, \"HMAC:\n              \
    \        Keyed-Hashing for Message Authentication\", RFC\n                   \
    \   2104, February 1997.\n   [RFC4282]          Aboba, B., Beadles, M., Arkko,\
    \ J., and P. Eronen,\n                      \"The Network Access Identifier\"\
    , RFC 4282,\n                      December 2005.\n   [AES]              National\
    \ Institute of  Standards and Technology,\n                      \"Federal Information\
    \ Processing Standards (FIPS)\n                      Publication 197, \"Advanced\
    \ Encryption Standard\n                      (AES)\"\", November 2001.\n     \
    \                 http://csrc.nist.gov/publications/fips/fips197/\n          \
    \            fips-197.pdf\n   [CBC]              National Institute of Standards\
    \ and Technology,\n                      \"NIST Special Publication 800-38A, \"\
    Recommendation\n                      for Block Cipher Modes of Operation - Methods\
    \ and\n                      Techniques\"\", December 2001.\n                \
    \      http://csrc.nist.gov/publications/nistpubs/\n                      800-38a/sp800-38a.pdf\n\
    \   [SHA-1]            National Institute of Standards and Technology,\n     \
    \                 U.S.  Department of Commerce, \"Federal Information\n      \
    \                Processing Standard (FIPS) Publication 180-1,\n             \
    \         \"Secure Hash Standard\"\", April 1995.\n   [PRF]              National\
    \ Institute of Standards and Technology,\n                      \"Federal Information\
    \ Processing Standards (FIPS)\n                      Publication  186-2 (with\
    \ change notice); Digital\n                      Signature Standard (DSS)\", January\
    \ 2000.\n                      Available on-line at:\n                      http://csrc.nist.gov/publications/\n\
    \                      fips/fips186-2/fips186-2-change1.pdf\n   [RFC3629]    \
    \      Yergeau, F., \"UTF-8, a transformation format of\n                    \
    \  ISO 10646\", STD 63, RFC 3629, November 2003.\n   [RFC3748]          Aboba,\
    \ B., Blunk, L., Vollbrecht, J., Carlson, J.,\n                      and H. Levkowetz,\
    \ \"Extensible Authentication\n                      Protocol (EAP)\", RFC 3748,\
    \ June 2004.\n   [EAP-AKA]          Arkko, J. and H. Haverinen, \"Extensible\n\
    \                      Authentication Protocol Method for 3rd Generation\n   \
    \                   Authentication and Key Agreement (EAP-AKA)\", RFC\n      \
    \                4187, January 2006.\n"
- title: 15.2.  Informative References
  contents:
  - "15.2.  Informative References\n   [3GPP-TS-23.003]   3rd Generation Partnership\
    \ Project, \"3GPP\n                      Technical Specification 3GPP TS 23.003\
    \ V6.8.0:\n                      \"3rd Generation Parnership Project; Technical\n\
    \                      Specification Group Core Network; Numbering,\n        \
    \              addressing and identification (Release 6)\"\",\n              \
    \        December 2005.\n   [3GPP-TS-55.205]   3rd Generation Partnership Project,\
    \ \"3GPP\n                      Technical Specification 3GPP TS 55.205 V 6.0.0:\n\
    \                      \"3rd Generation Partnership Project; Technical\n     \
    \                 Specification Group Services and System Aspects;\n         \
    \             Specification of the GSM-MILENAGE Algorithms: An\n             \
    \         example algorithm set for the GSM Authentication\n                 \
    \     and Key Generation functions A3 and A8 (Release\n                      6)\"\
    \", December 2002.\n   [PEAP]             Palekar, A., Simon, D., Zorn, G., Salowey,\
    \ J.,\n                      Zhou, H., and S. Josefsson, \"Protected EAP\n   \
    \                   Protocol (PEAP) Version 2\", Work in Progress,\n         \
    \             October 2004.\n   [PEAP-02]          Anderson, H., Josefsson, S.,\
    \ Zorn, G., Simon, D.,\n                      and A. Palekar, \"Protected EAP\
    \ Protocol (PEAP)\",\n                      Work in Progress, February 2002.\n\
    \   [EAP-Keying]       Aboba, B., Simon, D., Arkko, J., Eronen, P., and\n    \
    \                  H.  Levkowetz, \"Extensible Authentication Protocol\n     \
    \                 (EAP) Key Management Framework\", Work in Progress,\n      \
    \                October 2005.\n   [Service-Identity] Arkko, J. and P. Eronen,\
    \ \"Authenticated Service\n                      Information for the Extensible\
    \ Authentication\n                      Protocol (EAP)\", Work in Progress, October\
    \ 2004.\n   [RFC4086]          Eastlake, D., 3rd, Schiller, J., and S. Crocker,\n\
    \                      \"Randomness Requirements for Security\", BCP 106,\n  \
    \                    RFC 4086, June 2005.\n   [S3-020125]        Qualcomm, \"\
    Comments on draft EAP/SIM, 3rd\n                      Generation Partnership Project\
    \ document 3GPP TSG\n                      SA WG3 Security S3#22, S3-020125\"\
    , February 2002.\n   [RFC3344]          Perkins, C., \"IP Mobility Support for\
    \ IPv4\", RFC\n                      3344, August 2002.\n   [RFC2548]        \
    \  Zorn, G., \"Microsoft Vendor-specific RADIUS\n                      Attributes\
    \ \", RFC 2548, March 1999.\n   [EAP-SRP]          Carlson, J., Aboba, B., and\
    \ H. Haverinen, \"EAP\n                      SRP-SHA1 Authentication Protocol\"\
    , Work in\n                      Progress, July 2001.\n   [GSM-Cloning]      Wagner,\
    \ D., \"GSM Cloning\".  Web page about\n                      COMP-128 version\
    \ 1 vulnerabilities, available at\n                      http://www.isaac.cs.berkeley.edu/isaac/gsm.html\n\
    \   [Barkan-2003]      Barkan, E., Biham, E., and N. Keller, \"Instant\n     \
    \                 Ciphertext-Only Cryptanalysis of GSM Encrypted\n           \
    \           Communications\".  available on-line at\n                      http://cryptome.org/gsm-crack-bbk.pdf\n\
    \   [Patel-2003]       Patel, S., \"Analysis of EAP-SIM Session Key\n        \
    \              Agreement\".  Posted to the EAP mailing list 29\n             \
    \         May,2003. http://\n                      mail.frascone.com/pipermail/public/eap/2003-May/\n\
    \                      001267.html\n"
- title: Appendix A.  Test Vectors
  contents:
  - "Appendix A.  Test Vectors\n   Test vectors for the NIST FIPS 186-2 pseudo-random\
    \ number generator\n   [PRF] are available at the following URL:\n   http://csrc.nist.gov/encryption/dss/Examples-1024bit.pdf\n\
    \   The following examples show the contents of EAP-SIM packets on full\n   authentication\
    \ and fast re-authentication.\n"
- title: A.1.  EAP-Request/Identity
  contents:
  - "A.1.  EAP-Request/Identity\n   The first packet is a plain Identity Request:\n\
    \      01                   ; Code: Request\n      00                   ; Identifier:\
    \ 0\n      00 05                ; Length: 5 octets\n      01                 \
    \  ; Type: Identity\n"
- title: A.2.  EAP-Response/Identity
  contents:
  - "A.2.  EAP-Response/Identity\n   The client's identity is \"1244070100000001@eapsim.foo\"\
    , so it\n   responds with the following packet:\n      02                   ;\
    \ Code: Response\n      00                   ; Identifier: 0\n      00 20    \
    \            ; Length: 32 octets\n      01                   ; Type: Identity\n\
    \         31 32 34 34       ; \"1244070100000001@eapsim.foo\"\n         30 37\
    \ 30 31\n         30 30 30 30\n         30 30 30 31\n         40 65 61 70\n  \
    \       73 69 6d 2e\n         66 6f 6f\n"
- title: A.3.  EAP-Request/SIM/Start
  contents:
  - "A.3.  EAP-Request/SIM/Start\n   The server's first packet looks like this:\n\
    \      01                   ; Code: Request\n      01                   ; Identifier:\
    \ 1\n      00 10                ; Length: 16 octets\n      12                \
    \   ; Type: EAP-SIM\n         0a                ; EAP-SIM subtype: Start\n   \
    \      00 00             ; (reserved)\n         0f                ; Attribute\
    \ type: AT_VERSION_LIST\n            02             ; Attribute length: 8 octets\
    \ (2*4)\n            00 02          ; Actual version list length: 2 octets\n \
    \           00 01          ; Version: 1\n            00 00          ; (attribute\
    \ padding)\n"
- title: A.4.  EAP-Response/SIM/Start
  contents:
  - "A.4.  EAP-Response/SIM/Start\n   The client selects a nonce and responds with\
    \ the following packet:\n      02                   ; Code: Response\n      01\
    \                   ; Identifier: 1\n      00 20                ; Length: 32 octets\n\
    \      12                   ; Type: EAP-SIM\n         0a                ; EAP-SIM\
    \ subtype: Start\n         00 00             ; (reserved)\n         07       \
    \         ; Attribute type: AT_NONCE_MT\n            05             ; Attribute\
    \ length: 20 octets (5*4)\n            00 00          ; (reserved)\n         \
    \   01 23 45 67    ; NONCE_MT value\n            89 ab cd ef\n            fe dc\
    \ ba 98\n            76 54 32 10\n         10                ; Attribute type:\
    \ AT_SELECTED_VERSION\n            01             ; Attribute length: 4 octets\
    \ (1*4)\n            00 01          ; Version: 1\n"
- title: A.5.  EAP-Request/SIM/Challenge
  contents:
  - "A.5.  EAP-Request/SIM/Challenge\n   Next, the server selects three authentication\
    \ triplets\n         (RAND1,SRES1,Kc1) = (10111213 14151617 18191a1b 1c1d1e1f,\n\
    \                              d1d2d3d4,\n                              a0a1a2a3\
    \ a4a5a6a7)\n         (RAND2,SRES2,Kc2) = (20212223 24252627 28292a2b 2c2d2e2f,\n\
    \                              e1e2e3e4,\n                              b0b1b2b3\
    \ b4b5b6b7)\n         (RAND3,SRES3,Kc3) = (30313233 34353637 38393a3b 3c3d3e3f,\n\
    \                              f1f2f3f4,\n                              c0c1c2c3\
    \ c4c5c6c7)\n   Next, the MK is calculated as specified in Section 7*.\n   MK\
    \ = e576d5ca 332e9930 018bf1ba ee2763c7 95b3c712\n   And the other keys are derived\
    \ using the PRNG:\n         K_encr = 536e5ebc 4465582a a6a8ec99 86ebb620\n   \
    \      K_aut =  25af1942 efcbf4bc 72b39434 21f2a974\n         MSK =    39d45aea\
    \ f4e30601 983e972b 6cfd46d1\n                  c3637733 65690d09 cd44976b 525f47d3\n\
    \                  a60a985e 955c53b0 90b2e4b7 3719196a\n                  40254296\
    \ 8fd14a88 8f46b9a7 886e4488\n         EMSK =   5949eab0 fff69d52 315c6c63 4fd14a7f\n\
    \                  0d52023d 56f79698 fa6596ab eed4f93f\n                  bb48eb53\
    \ 4d985414 ceed0d9a 8ed33c38\n                  7c9dfdab 92ffbdf2 40fcecf6 5a2c93b9\n\
    \   Next, the server selects a pseudonym and a fast re-authentication\n   identity\
    \ (in this case, \"w8w49PexCazWJ&xCIARmxuMKht5S1sxR\n   DqXSEFBEg3DcZP9cIxTe5J4OyIwNGVzxeJOU1G\"\
    \ and\n   \"Y24fNSrz8BP274jOJaF17WfxI8YO7QX0\n   0pMXk9XMMVOw7broaNhTczuFq53aEpOkk3L0dm@eapsim.foo\"\
    , respectively).\n   The following plaintext will be encrypted and stored in the\n\
    \   AT_ENCR_DATA attribute:\n         84               ; Attribute type: AT_NEXT_PSEUDONYM\n\
    \            13            ; Attribute length: 76 octets (19*4)\n            00\
    \ 46         ; Actual pseudonym length: 70 octets\n            77 38 77 34 39\
    \ 50 65 78 43 61 7a 57 4a 26 78 43\n            49 41 52 6d 78 75 4d 4b 68 74\
    \ 35 53 31 73 78 52\n            44 71 58 53 45 46 42 45 67 33 44 63 5a 50 39\
    \ 63\n            49 78 54 65 35 4a 34 4f 79 49 77 4e 47 56 7a 78\n          \
    \  65 4a 4f 55 31 47\n            00 00          ; (attribute padding)\n     \
    \    85                ; Attribute type: AT_NEXT_REAUTH_ID\n            16   \
    \          ; Attribute length: 88 octets (22*4)\n            00 51          ;\
    \ Actual re-auth identity length: 81 octets\n            59 32 34 66 4e 53 72\
    \ 7a 38 42 50 32 37 34 6a 4f\n            4a 61 46 31 37 57 66 78 49 38 59 4f\
    \ 37 51 58 30\n            30 70 4d 58 6b 39 58 4d 4d 56 4f 77 37 62 72 6f\n \
    \           61 4e 68 54 63 7a 75 46 71 35 33 61 45 70 4f 6b\n            6b 33\
    \ 4c 30 64 6d 40 65 61 70 73 69 6d 2e 66 6f\n            6f\n            00 00\
    \ 00       ; (attribute padding)\n         06                ; Attribute type:\
    \ AT_PADDING\n            03             ; Attribute length: 12 octets (3*4)\n\
    \            00 00 00 00\n            00 00 00 00\n            00 00\n   The EAP\
    \ packet looks like this:\n      01                   ; Code: Request\n      02\
    \                   ; Identifier: 2\n      01 18                ; Length: 280\
    \ octets\n      12                   ; Type: EAP-SIM\n         0b            \
    \    ; EAP-SIM subtype: Challenge\n         00 00             ; (reserved)\n \
    \        01                ; Attribute type: AT_RAND\n            0d         \
    \    ; Attribute length: 52 octets (13*4)\n            00 00          ; (reserved)\n\
    \            10 11 12 13    ; first RAND\n            14 15 16 17\n          \
    \  18 19 1a 1b\n            1c 1d 1e 1f\n            20 21 22 23    ; second RAND\n\
    \            24 25 26 27\n            28 29 2a 2b\n            2c 2d 2e 2f\n \
    \           30 31 32 33    ; third RAND\n            34 35 36 37\n           \
    \ 38 39 3a 3b\n            3c 3d 3e 3f\n         81                ; Attribute\
    \ type: AT_IV\n            05             ; Attribute length: 20 octets (5*4)\n\
    \            00 00          ; (reserved)\n            9e 18 b0 c2    ; IV value\n\
    \            9a 65 22 63\n            c0 6e fb 54\n            dd 00 a8 95\n \
    \        82               ; Attribute type: AT_ENCR_DATA\n            2d     \
    \       ; Attribute length: 180 octets (45*4)\n            00 00         ; (reserved)\n\
    \            55 f2 93 9b bd b1 b1 9e a1 b4 7f c0 b3 e0 be 4c\n            ab 2c\
    \ f7 37 2d 98 e3 02 3c 6b b9 24 15 72 3d 58\n            ba d6 6c e0 84 e1 01\
    \ b6 0f 53 58 35 4b d4 21 82\n            78 ae a7 bf 2c ba ce 33 10 6a ed dc\
    \ 62 5b 0c 1d\n            5a a6 7a 41 73 9a e5 b5 79 50 97 3f c7 ff 83 01\n \
    \           07 3c 6f 95 31 50 fc 30 3e a1 52 d1 e1 0a 2d 1f\n            4f 52\
    \ 26 da a1 ee 90 05 47 22 52 bd b3 b7 1d 6f\n            0c 3a 34 90 31 6c 46\
    \ 92 98 71 bd 45 cd fd bc a6\n            11 2f 07 f8 be 71 79 90 d2 5f 6d d7\
    \ f2 b7 b3 20\n            bf 4d 5a 99 2e 88 03 31 d7 29 94 5a ec 75 ae 5d\n \
    \           43 c8 ed a5 fe 62 33 fc ac 49 4e e6 7a 0d 50 4d\n         0b     \
    \           ; Attribute type: AT_MAC\n            05             ; Attribute length:\
    \ 20 octets (5*4)\n            00 00          ; (reserved)\n            fe f3\
    \ 24 ac    ; MAC value\n            39 62 b5 9f\n            3b d7 82 53\n   \
    \         ae 4d cb 6a\n   The MAC is calculated over the EAP packet above (with\
    \ MAC value set\n   to zero), followed by the NONCE_MT value (a total of 296 bytes).\n"
- title: A.6.  EAP-Response/SIM/Challenge
  contents:
  - "A.6.  EAP-Response/SIM/Challenge\n   The client's response looks like this:\n\
    \      02                   ; Code: Response\n      02                   ; Identifier:\
    \ 2\n      00 1c                ; Length: 28 octets\n      12                \
    \   ; Type: EAP-SIM\n         0b                ; EAP-SIM subtype: Challenge\n\
    \         00 00             ; (reserved)\n         0b                ; Attribute\
    \ type: AT_MAC\n            05             ; Attribute length: 20 octets (5*4)\n\
    \            00 00          ; (reserved)\n            f5 6d 64 33    ; MAC value\n\
    \            e6 8e d2 97\n            6a c1 19 37\n            fc 3d 11 54\n \
    \  The MAC is calculated over the EAP packet above (with MAC value set\n   to\
    \ zero), followed by the SRES values (a total of 40 bytes).\n"
- title: A.7.  EAP-Success
  contents:
  - "A.7.  EAP-Success\n   The last packet is an EAP-Success:\n      03          \
    \         ; Code: Success\n      02                   ; Identifier: 2\n      00\
    \ 04                ; Length: 4 octets\n"
- title: A.8.  Fast Re-authentication
  contents:
  - "A.8.  Fast Re-authentication\n   When performing fast re-authentication, the\
    \ EAP-Request/Identity\n   packet is the same as usual.  The EAP-Response/Identity\
    \ contains the\n   fast re-authentication identity (from AT_ENCR_DATA attribute\
    \ above):\n      02                   ; Code: Response\n      00             \
    \      ; Identifier: 0\n      00 56                ; Length: 86 octets\n     \
    \ 01                   ; Type: Identity\n         59 32 34 66 4e 53 72 7a 38 42\
    \ 50 32 37 34 6a 4f\n         4a 61 46 31 37 57 66 78 49 38 59 4f 37 51 58 30\n\
    \         30 70 4d 58 6b 39 58 4d 4d 56 4f 77 37 62 72 6f\n         61 4e 68 54\
    \ 63 7a 75 46 71 35 33 61 45 70 4f 6b\n         6b 33 4c 30 64 6d 40 65 61 70\
    \ 73 69 6d 2e 66 6f\n         6f\n"
- title: A.9.  EAP-Request/SIM/Re-authentication
  contents:
  - "A.9.  EAP-Request/SIM/Re-authentication\n   The server recognizes the reauthentication\
    \ identity, so it will\n   respond with EAP-Request/SIM/Re-authentication.  It\
    \ retrieves the\n   associated counter value, generates a nonce, and picks a new\n\
    \   reauthentication identity (in this case,\n   \"uta0M0iyIsMwWp5TTdSdnOLvg2XDVf21OYt1vnfiMcs5dnIDHOIFVavIRzMR\n\
    \   yzW6vFzdHW@eapsim.foo\").\n   The following plaintext will be encrypted and\
    \ stored in the\n   AT_ENCR_DATA attribute.  Note that AT_PADDING is not used\
    \ because the\n   length of the plaintext is a multiple of 16 bytes.\n       \
    \  13                ; Attribute type: AT_COUNTER\n            01            \
    \ ; Attribute length: 4 octets (1*4)\n            00 01          ; Counter value\n\
    \         15                ; Attribute type: AT_NONCE_S\n            05     \
    \        ; Attribute length: 20 octets (5*4)\n            00 00          ; (reserved)\n\
    \            01 23 45 67    ; NONCE_S value\n            89 ab cd ef\n       \
    \     fe dc ba 98\n            76 54 32 10\n         85                ; Attribute\
    \ type: AT_NEXT_REAUTH_ID\n            16             ; Attribute length: 88 octets\
    \ (22*4)\n            00 51          ; Actual re-auth identity length: 81 octets\n\
    \            75 74 61 30 4d 30 69 79 49 73 4d 77 57 70 35 54\n            54 64\
    \ 53 64 6e 4f 4c 76 67 32 58 44 56 66 32 31\n            4f 59 74 31 76 6e 66\
    \ 69 4d 63 73 35 64 6e 49 44\n            48 4f 49 46 56 61 76 49 52 7a 4d 52\
    \ 79 7a 57 36\n            76 46 7a 64 48 57 40 65 61 70 73 69 6d 2e 66 6f\n \
    \           6f\n            00 00 00       ; (attribute padding)\n   The EAP packet\
    \ looks like this:\n      01                   ; Code: Request\n      01     \
    \              ; Identifier: 1\n      00 a4                ; Length: 164 octets\n\
    \      12                   ; Type: EAP-SIM\n         0d                ; EAP-SIM\
    \ subtype: Re-authentication\n         00 00             ; (reserved)\n      \
    \   81                ; Attribute type: AT_IV\n            05             ; Attribute\
    \ length: 20 octets (5*4)\n            00 00          ; (reserved)\n         \
    \   d5 85 ac 77    ; IV value\n            86 b9 03 36\n            65 7c 77 b4\n\
    \            65 75 b9 c4\n         82                ; Attribute type: AT_ENCR_DATA\n\
    \            1d             ; Attribute length: 116 octets (29*4)\n          \
    \  00 00          ; (reserved)\n            68 62 91 a9 d2 ab c5 8c aa 32 94 b6\
    \ e8 5b 44 84\n            6c 44 e5 dc b2 de 8b 9e 80 d6 9d 49 85 8a 5d b8\n \
    \           4c dc 1c 9b c9 5c 01 b9 6b 6e ca 31 34 74 ae a6\n            d3 14\
    \ 16 e1 9d aa 9d f7 0f 05 00 88 41 ca 80 14\n            96 4d 3b 30 a4 9b cf\
    \ 43 e4 d3 f1 8e 86 29 5a 4a\n            2b 38 d9 6c 97 05 c2 bb b0 5c 4a ac\
    \ e9 7d 5e af\n            f5 64 04 6c 8b d3 0b c3 9b e5 e1 7a ce 2b 10 a6\n \
    \        0b                ; Attribute type: AT_MAC\n            05          \
    \   ; Attribute length: 20 octets (5*4)\n            00 00          ; (reserved)\n\
    \            48 3a 17 99    ; MAC value\n            b8 3d 7c d3\n           \
    \ d0 a1 e4 01\n            d9 ee 47 70\n   The MAC is calculated over the EAP\
    \ packet above (with MAC value set\n   to zero; a total of 164 bytes).\n   Finally,\
    \ the server derives new keys.  The XKEY' is calculated as\n   described in Section\
    \ 7*:\n   XKEY' = 863dc120 32e08343 c1a2308d b48377f6 801f58d4\n   The new MSK\
    \ and EMSK are derived using the PRNG (note that K_encr and\n   K_aut stay the\
    \ same).\n         MSK   =  6263f614 973895e1 335f7e30 cff028ee\n            \
    \      2176f519 002c9abe 732fe0ef 00cf167c\n                  756d9e4c ed6d5ed6\
    \ 40eb3fe3 8565ca07\n                  6e7fb8a8 17cfe8d9 adbce441 d47c4f5e\n \
    \        EMSK  =  3d8ff786 3a630b2b 06e2cf20 9684c13f\n                  6b82f992\
    \ f2b06f1b 54bf51ef 237f2a40\n                  1ef5e0d7 e098a34c 533eaebf 34578854\n\
    \                  b7721526 20a777f0 e0340884 a294fb73\n"
- title: A.10.  EAP-Response/SIM/Re-authentication
  contents:
  - "A.10.  EAP-Response/SIM/Re-authentication\n   The client's response includes\
    \ the counter as well.  The following\n   plaintext will be encrypted and stored\
    \ in the AT_ENCR_DATA attribute:\n         13                ; Attribute type:\
    \ AT_COUNTER\n            01             ; Attribute length: 4 octets (1*4)\n\
    \            00 01          ; Counter value\n         06                ; Attribute\
    \ type: AT_PADDING\n            03             ; Attribute length: 12 octets (3*4)\n\
    \            00 00 00 00\n            00 00 00 00\n            00 00\n   The EAP\
    \ packet looks like this:\n      02                   ; Code: Response\n     \
    \ 01                   ; Identifier: 1\n      00 44                ; Length: 68\
    \ octets\n      12                   ; Type: EAP-SIM\n         0d            \
    \    ; EAP-SIM subtype: Re-authentication\n         00 00             ; (reserved)\n\
    \         81                ; Attribute type: AT_IV\n            05          \
    \   ; Attribute length: 20 octets (5*4)\n            00 00          ; (reserved)\n\
    \            cd f7 ff a6    ; IV value\n            5d e0 4c 02\n            6b\
    \ 56 c8 6b\n            76 b1 02 ea\n         82                ; Attribute type:\
    \ AT_ENCR_DATA\n            05             ; Attribute length: 20 octets (5*4)\n\
    \            00 00          ; (reserved)\n            b6 ed d3 82\n          \
    \  79 e2 a1 42\n            3c 1a fc 5c\n            45 5c 7d 56\n         0b\
    \                ; Attribute type: AT_MAC\n            05             ; Attribute\
    \ length: 20 octets (5*4)\n            00 00          ; (reserved)\n         \
    \   fa f7 6b 71    ; MAC value\n            fb e2 d2 55\n            b9 6a 35\
    \ 66\n            c9 15 c6 17\n   The MAC is calculated over the EAP packet above\
    \ (with MAC value set\n   to zero), followed by the NONCE_S value (a total of\
    \ 84 bytes).\n   The next packet will be EAP-Success:\n      03              \
    \     ; Code: Success\n      01                   ; Identifier: 1\n      00 04\
    \                ; Length: 4 octets\n"
- title: Appendix B.  Pseudo-Random Number Generator
  contents:
  - "Appendix B.  Pseudo-Random Number Generator\n   The \"|\" character denotes concatenation,\
    \ and \"^\" denotes\n   exponentiation.\n   Step 1: Choose a new, secret value\
    \ for the seed-key, XKEY\n   Step 2: In hexadecimal notation let\n       t = 67452301\
    \ EFCDAB89 98BADCFE 10325476 C3D2E1F0\n       This is the initial value for H0|H1|H2|H3|H4\n\
    \       in the FIPS SHS [SHA-1]\n   Step 3: For j = 0 to m - 1 do\n         3.1\
    \ XSEED_j = 0 /* no optional user input */\n         3.2 For i = 0 to 1 do\n \
    \            a. XVAL = (XKEY + XSEED_j) mod 2^b\n             b. w_i = G(t, XVAL)\n\
    \             c. XKEY = (1 + XKEY + w_i) mod 2^b\n         3.3 x_j = w_0|w_1\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Henry Haverinen (editor)\n   Nokia Enterprise Solutions\n\
    \   P.O. Box 12\n   FIN-40101 Jyvaskyla\n   Finland\n   EMail: henry.haverinen@nokia.com\n\
    \   Joseph Salowey (editor)\n   Cisco Systems\n   2901 Third Avenue\n   Seattle,\
    \ WA  98121\n   USA\n   Phone: +1 206 256 3380\n   EMail: jsalowey@cisco.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2006).\n   This\
    \ document is subject to the rights, licenses and restrictions\n   contained in\
    \ BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is provided by the IETF\n\
    \   Administrative Support Activity (IASA).\n"
