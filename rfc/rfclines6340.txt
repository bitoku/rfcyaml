Abstract This memo defines a Management Information Base (MIB) module containing textual conventions (TCs) to represent floating point numbers.
This memo defines textual conventions for the representation of floating point numbers.
All of these definitions are in terms of the IEEE "Standard for Floating Point Arithmetic", IEEE 754 2008
The IEEE "Standard for Floating Point Arithmetic", IEEE 754 2008
[IEEE.754.2008], provides for a variety of interchange formats for floating point numbers.
The need for three of these, namely  32 bit,  64 bit,  128 bit, has been recognized in network management.
For example, Section 4.2.3 of the SMIng Objectives [RFC3216] elaborates the need for these three floating point data types in network management protocols.
The selection of a floating point format involves many considerations and trade offs.
For an introduction to the fundamentals of floating  point representations see Chapter 4 of [KNUTH]; for a discussion of these issues specifically with respect to the IEEE formats, see [GOLDBERG].
All of these textual conventions employ the binary interchange format defined in [IEEE.754.2008].
Specifically, this means that for all of them, the highest order bit of the first byte is the sign bit, with the remaining bits of the octet string corresponding to the exponent and fraction parts, in network byte order.
The Internet Standard Management Framework
For a detailed overview of the documents that describe the current Internet Standard Management Framework, please refer to section 7 of RFC 3410 [RFC3410].
Managed objects are accessed via a virtual information store, termed the Management Information Base or MIB.
MIB objects are generally accessed through the Simple Network Management Protocol (SNMP).
Objects in the MIB are defined using the mechanisms defined in the Structure of Management Information (SMI).
This memo specifies a MIB module that is compliant to the SMIv2, which is described in STD 58, RFC 2578 [RFC2578], STD 58
, RFC 2579 [RFC2579] and STD 58, RFC 2580
The following list highlights some of the issues MIB designers need to consider when deciding whether to employ these textual conventions:
Floating point numbers are useful if the number space needs to cover a large dynamic range.
For number spaces with a limited range, fixed point numbers can be more efficient and more precise.
Floating point numbers are typically the wrong answer for data that is truly decimal or can be handled adequately by re thinking the units and representing the scaled numbers as integers.
The SNMP "lexicographical" ordering for INDEX objects using these floating point textual conventions will simply be that of the octet strings corresponding to the floating point representations, which will not always reflect the numerical ordering of the corresponding floating point values.
Even if MIB designers take this into account, users might still find the results of a MIB "walk" surprising.
Consequently, it is suggested that whenever one of these textual conventions is used for an INDEX object, that the DESCRIPTION clause should provide some warning.
Embedded systems sometimes lack floating point support, which can complicate the implementation of MIB objects using floating point numbers.
In choosing from among the types defined in this memo, MIB designers need to consider both the range and the precision needed, as well as recognize that it could be inefficient to use, for example, Float128TC when Float64TC would do.
Since these textual conventions are defined in terms of the OCTET STRING type, the SMI's mechanisms for formally setting range constraints are not available.
MIB designers using these textual conventions will need to use DESCRIPTION clauses to spell out any applicable range constraints beyond those implied by the underlying IEEE types.
Whenever these textual conventions are used in a MIB module, the associated DESCRIPTION clause will need to clearly specify whether denormalized numbers, NaNs ("not a number") or infinities are permitted, along with any special semantics associated with these cases.
This is especially important for writeable objects.
Structure of the MIB Module
This MIB module defines three textual conventions.
It defines no MIB objects.
MIB Modules Required for IMPORTS
This MIB module employs definitions from [RFC2578] and [RFC2579].
Documents Required for REFERENCE Clauses
This MIB module contains REFERENCE clauses making reference to IEEE 754 2008
"Textual conventions for the representation of floating point numbers.
2011 IETF Trust and the persons identified as authors of the code.
Redistribution and use in source and binary forms, with or without modification, is permitted pursuant to, and subject to the license terms contained in, the Simplified BSD License set forth in Section 4.c of the IETF Trust's Legal Provisions Relating to IETF Documents (http://trustee.ietf.org/license info).
This version of this MIB module is part of RFC 6340; see the RFC itself for full legal notices."
"This type represents a 32 bit (4 octet)
IEEE floating point number in binary interchange format.
"This type represents a 64 bit (8 octet)
IEEE floating point number in binary interchange format.
"This type represents a 128 bit (16 octet)
IEEE floating point number in binary interchange format.
This module does not define any management objects.
Instead, it defines a set of textual conventions that can be used by other MIB modules to define management objects.
Meaningful security considerations can only be written in the MIB modules that define management objects.
Therefore, this memo has no impact on the security of the Internet.
The MIB module in this document uses the following IANA assigned OBJECT IDENTIFIER value recorded in the SMI Numbers registry:
{ mib 2 201 } 8.
The following people provided helpful comments during the development of this document:  Andy Bierman  Martin Duerst  Alfred Hoenes  Juergen Quittek  Juergen Schoenwaeder  Dave Shield  Robert Story
