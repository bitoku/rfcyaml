Abstract This specification describes how to declare in a JSON Web Token (JWT) that the presenter of the JWT possesses a particular proof of  possession key and how the recipient can cryptographically confirm proof of possession of the key by the presenter.
Being able to prove possession of a key is also sometimes described as the presenter being a holder of key.
This specification describes how a JSON Web Token [JWT] can declare that the presenter of the JWT possesses a particular proof of  possession (PoP)
key and how the recipient can cryptographically confirm proof of possession of the key by the presenter.
Proof of possession of a key is also sometimes described as the presenter being a holder of key.
The [OAUTH POP ARCH] specification describes key confirmation, among other confirmation mechanisms.
This specification defines how to communicate confirmation key information in JWTs.
Envision the following two use cases.
The first use case employs a symmetric proof of possession key and the second use case employs an asymmetric proof of possession key.
In the case illustrated in Figure 1, (1) either the presenter generates a symmetric key and privately sends it to the issuer or the issuer generates a symmetric key and privately sends it to the presenter.
The issuer generates a JWT with an encrypted copy of this symmetric key in the confirmation claim.
This symmetric key is encrypted with a key known only to the issuer and the recipient, which was previously established in step (0).
The entire JWT is integrity protected by the issuer.
The JWT is then (2) sent to the presenter.
Now, the presenter is in possession of the symmetric key as well as the JWT (which includes the confirmation claim).
When the presenter (3) presents the JWT to the recipient, it also needs to demonstrate possession of the symmetric key; the presenter, for example, (4) uses the symmetric key in a challenge/response protocol with the recipient.
The recipient is then able to verify that it is interacting with the genuine presenter by decrypting the key in the confirmation claim of the JWT.
By doing this, the recipient obtains the symmetric key, which it then uses to verify cryptographically protected messages exchanged with the presenter (4).
This symmetric key mechanism described above is conceptually similar to the use of Kerberos tickets.
Note that for simplicity, the diagram above and associated text describe the direct use of symmetric keys without the use of derived keys.
A more secure practice is to derive the symmetric keys actually used from secrets exchanged, such as the key exchanged in step (0), using a Key Derivation Function (KDF) and use the derived keys, rather than directly using the secrets exchanged.
In the case illustrated in Figure 2, the presenter generates a public/private key pair and (1) sends the public key to the issuer, which creates a JWT that contains the public key (or an identifier for it) in the confirmation claim.
The entire JWT is integrity protected using a digital signature to protect it against modifications.
The JWT is then (2) sent to the presenter.
When the presenter (3) presents the JWT to the recipient, it also needs to demonstrate possession of the private key.
The presenter, for example, (4) uses the private key in a Transport Layer Security (TLS) exchange with the recipient or (4) signs a nonce with the private key.
The recipient is able to verify that it is interacting with the genuine presenter by extracting the public key from the confirmation claim of the JWT (after verifying the digital signature of the JWT) and utilizing it with the private key in the TLS exchange or by checking the nonce signature.
In both cases, the JWT may contain other claims that are needed by the application.
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119
Unless otherwise noted, all the protocol parameter names and values are case sensitive.
This specification uses terms defined in the JSON Web Token [JWT], JSON Web Key [JWK], and JSON Web Encryption [JWE] specifications.
These terms are defined by this specification: Issuer Party that creates the JWT and binds the proof of possession key to it.
Presenter Party that proves possession of a private key (for asymmetric key cryptography) or secret key (for symmetric key cryptography) to a recipient.
Recipient Party that receives the JWT containing the proof of possession key information from the presenter.
Representations for Proof of Possession Keys
By including a "cnf" (confirmation) claim in a JWT, the issuer of the JWT declares that the presenter possesses a particular key and that the recipient can cryptographically confirm that the presenter has possession of that key.
The value of the "cnf" claim is a JSON object and the members of that object identify the proof of  possession key.
The presenter can be identified in one of several ways by the JWT depending upon the application requirements.
If the JWT contains a "sub" (subject) claim [JWT], the presenter is normally the subject identified by the JWT.
(In some applications, the subject identifier will be relative to the issuer identified by the "iss" (issuer) claim [JWT].)
If the JWT contains no "sub" claim, the presenter is normally the issuer identified by the JWT using the "iss" claim.
The case in which the presenter is the subject of the JWT is analogous to Security Assertion Markup Language (SAML)
2.0 [OASIS.saml core 2.0 os] SubjectConfirmation usage.
At least one of the "sub" and "iss" claims MUST be present in the JWT.
Some use cases may require that both be present.
Another means used by some applications to identify the presenter is an explicit claim, such as the "azp" (authorized party) claim defined by OpenID Connect
Ultimately, the means of identifying the presenter is application specific, as is the means of confirming possession of the key that is communicated.
The "cnf" claim is used in the JWT to contain members used to identify the proof of possession key.
Other members of the "cnf" object may be defined because a proof of possession key may not be the only means of confirming the authenticity of the token.
This is analogous to the SAML 2.0
[OASIS.saml core 2.0 os] SubjectConfirmation element in which a number of different subject confirmation methods can be included (including proof of possession key information).
The set of confirmation members that a JWT must contain to be considered valid is context dependent and is outside the scope of this specification.
Specific applications of JWTs will require implementations to understand and process some confirmation members in particular ways.
However, in the absence of such requirements, all confirmation members that are not understood by implementations MUST be ignored.
This specification establishes the IANA "JWT Confirmation Methods" registry for these members in Section 6.2 and registers the members defined by this specification.
Other specifications can register other members used for confirmation, including other members for conveying proof of possession keys using different key representations.
The "cnf" claim value MUST represent only a single proof of  possession key; thus, at most one of the "jwk", "jwe", and "jku" (JWK Set URL)
confirmation values defined below may be present.
Note that if an application needs to represent multiple proof of possession keys in the same JWT, one way for it to achieve this is to use other claim names, in addition to "cnf", to hold the additional proof of  possession key information.
These claims could use the same syntax and semantics as the "cnf" claim.
Those claims would be defined by applications or other specifications and could be registered in the IANA "JSON Web Token Claims" registry [IANA.JWT.Claims].
Representation of an Asymmetric Proof of Possession Key
When the key held by the presenter is an asymmetric private key, the "jwk" member is a JSON Web Key
[JWK] representing the corresponding asymmetric public key.
The JWK MUST contain the required key members for a JWK of that key type and MAY contain other JWK members, including the "kid" (Key ID) member.
The "jwk" member MAY also be used for a JWK representing a symmetric key, provided that the JWT is encrypted so that the key is not revealed to unintended parties.
The means of encrypting a JWT is explained in [JWT].
If the JWT is not encrypted, the symmetric key MUST be encrypted as described below.
Representation of an Encrypted Symmetric Proof of Possession Key
When the key held by the presenter is a symmetric key, the "jwe" member is an encrypted JSON Web Key [JWK] encrypted to a key known to the recipient using the JWE Compact Serialization containing the symmetric key.
The rules for encrypting a JWK are found in Section 7 of the JSON Web Key [JWK] specification.
The UTF 8 [RFC3629] encoding of this JWK is used as the JWE Plaintext when encrypting the key.
Representation of a Key ID for a Proof of Possession Key
The proof of possession key can also be identified by the use of a Key ID instead of communicating the actual key, provided the recipient is able to obtain the identified key using the Key ID.
In this case, the issuer of a JWT declares that the presenter possesses a particular key and that the recipient can cryptographically confirm proof of possession of the key by the presenter by including a "cnf" claim in the JWT whose value is a JSON object with the JSON object containing a "kid" member identifying the key.
The content of the "kid" value is application specific.
For instance, some applications may choose to use a JWK Thumbprint [JWK.Thumbprint] value as the "kid" value.
Representation of a URL for a Proof of Possession Key
The proof of possession key can be passed by reference instead of being passed by value.
This is done using the "jku" member.
Its value is a URI [RFC3986] that refers to a resource for a set of JSON
encoded public keys represented as a JWK Set [JWK], one of which is the proof of possession key.
If there are multiple keys in the referenced JWK Set document, a "kid" member MUST also be included with the referenced key's JWK also containing the same "kid" value.
The protocol used to acquire the resource MUST provide integrity protection.
An HTTP GET request to retrieve the JWK Set MUST use TLS
and the identity of the server MUST be validated, as per Section 6 of RFC 6125
Proof of possession is typically demonstrated by having the presenter sign a value determined by the recipient using the key possessed by the presenter.
This value is sometimes called a "nonce" or a "challenge".
The means of communicating the nonce and the nature of its contents are intentionally not described in this specification, as different protocols will communicate this information in different ways.
Likewise, the means of communicating the signed nonce is also not specified, as this is also protocol specific.
Note that another means of proving possession of the key when it is a symmetric key is to encrypt the key to the recipient.
The means of obtaining a key for the recipient is likewise protocol specific.
For examples using the mechanisms defined in this specification, see [OAUTH POP ARCH].
All of the security considerations that are discussed in [JWT] also apply here.
In addition, proof of possession introduces its own unique security issues.
Possessing a key is only valuable if it is kept secret.
Appropriate means must be used to ensure that unintended parties do not learn private key or symmetric key values.
Applications utilizing proof of possession should also utilize audience restriction, as described in Section 4.1.3 of [JWT], as it provides different protections.
Proof of possession can be used by recipients to reject messages from unauthorized senders.
Audience restriction can be used by recipients to reject messages intended for different recipients.
A recipient might not understand the "cnf" claim.
Applications that require the proof of possession keys communicated with it to be understood and processed must ensure that the parts of this specification that they use are implemented.
Proof of possession via encrypted symmetric secrets is subject to replay attacks.
This attack can, for example, be avoided when a signed nonce or challenge is used since the recipient can use a distinct nonce or challenge for each interaction.
Replay can also be avoided if a sub key is derived from a shared secret that is specific to the instance of the PoP demonstration.
As is the case with other information included in a JWT, it is necessary to apply data origin authentication and integrity protection (via a keyed message digest or a digital signature).
Data origin authentication ensures that the recipient of the JWT learns about the entity that created the JWT since this will be important for any policy decisions.
Integrity protection prevents an adversary from changing any elements conveyed within the JWT payload.
Special care has to be applied when carrying symmetric keys inside the JWT since those not only require integrity protection but also confidentiality protection.
A proof of possession key can be used as a correlation handle if the same key is used with multiple parties.
Thus, for privacy reasons, it is recommended that different proof of possession keys be used when interacting with different parties.
The following registration procedure is used for all the registries established by this specification.
Values are registered on a Specification Required
[RFC5226] basis after a three week review period on the jwt reg review@ietf.org mailing list, on the advice of one or more Designated Experts.
However, to allow for the allocation of values prior to publication, the Designated Experts may approve registration once they are satisfied that such a specification will be published.
Registration requests sent to the mailing list for review should use an appropriate subject (e.g., "Request to Register JWT Confirmation Method: example").
Registration requests that are undetermined for a period longer than 21 days can be brought to the IESG's attention (using the iesg@ietf.org mailing list) for resolution.
Criteria that should be applied by the Designated Experts include determining whether the proposed registration duplicates existing functionality, determining whether it is likely to be of general applicability or whether it is useful only for a single application, and evaluating the security properties of the item being registered and whether the registration makes sense.
It is suggested that multiple Designated Experts be appointed who are able to represent the perspectives of different applications using this specification in order to enable broadly informed review of registration decisions.
In cases where a registration decision could be perceived as creating a conflict of interest for a particular Expert, that Expert should defer to the judgment of the other Experts.
JSON Web Token Claims Registration
This specification registers the "cnf" claim in the IANA "JSON Web Token Claims" registry [IANA.JWT.Claims] established by [JWT].
Claim Name: "cnf"  Claim Description: Confirmation  Change Controller: IESG  Specification Document(s):
Section 3.1 of [RFC7800] 6.2.
This specification establishes the IANA "JWT Confirmation Methods" registry for JWT "cnf" member values.
The registry records the confirmation method member and a reference to the specification that defines it.
Registration Template Confirmation Method Value:
The name requested (e.g., "kid").
Because a core goal of this specification is for the resulting representations to be compact, it is RECOMMENDED that the name be short   not to exceed eight characters without a compelling reason to do so.
This name is case sensitive.
Names may not match other registered names in a case insensitive manner unless the Designated Experts state that there is a compelling reason to allow an exception.
Brief description of the confirmation method (e.g., "Key Identifier").
For Standards Track RFCs, list the "IESG".
For others, give the name of the responsible party.
Other details (e.g., postal address, email address, home page URI) may also be included.
: Reference to the document or documents that specify the parameter, preferably including URIs that can be used to retrieve copies of the documents.
An indication of the relevant sections may also be included but is not required.
Initial Registry Contents  Confirmation Method Value: "jwk"  Confirmation Method Description: JSON Web Key Representing Public Key
Change Controller: IESG  Specification Document(s):
Section 3.2 of [RFC7800]  Confirmation Method Value: "jwe"  Confirmation Method Description:
Change Controller: IESG  Specification Document(s):
Section 3.3 of [RFC7800]  Confirmation Method Value: "kid"  Confirmation Method Description:
Key Identifier  Change Controller: IESG  Specification Document(s):
Section 3.4 of [RFC7800]  Confirmation Method Value: "jku
JWK Set URL  Change Controller: IESG  Specification Document(s)
: Section 3.5 of [RFC7800]
