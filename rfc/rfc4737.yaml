- title: __initial_text__
  contents:
  - '                       Packet Reordering Metrics

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The IETF Trust (2006).\n"
- title: Abstract
  contents:
  - "Abstract\n   This memo defines metrics to evaluate whether a network has\n  \
    \ maintained packet order on a packet-by-packet basis.  It provides\n   motivations\
    \ for the new metrics and discusses the measurement issues,\n   including the\
    \ context information required for all metrics.  The memo\n   first defines a\
    \ reordered singleton, and then uses it as the basis\n   for sample metrics to\
    \ quantify the extent of reordering in several\n   useful dimensions for network\
    \ characterization or receiver design.\n   Additional metrics quantify the frequency\
    \ of reordering and the\n   distance between separate occurrences.  We then define\
    \ a metric\n   oriented toward assessment of reordering effects on TCP.  Several\n\
    \   examples of evaluation using the various sample metrics are included.\n  \
    \ An appendix gives extended definitions for evaluating order with\n   packet\
    \ fragmentation.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................4\n\
    \      1.1. Motivation .................................................4\n  \
    \    1.2. Goals and Objectives .......................................5\n    \
    \  1.3. Required Context for All Reordering Metrics ................6\n   2. Conventions\
    \ Used in this Document ...............................7\n   3. A Reordered Packet\
    \ Singleton Metric .............................7\n      3.1. Metric Name ................................................8\n\
    \      3.2. Metric Parameters ..........................................8\n  \
    \    3.3. Definition .................................................8\n    \
    \  3.4. Sequence Discontinuity Definition ..........................9\n      3.5.\
    \ Evaluation of Reordering in Dimensions of Time or Bytes ...10\n      3.6. Discussion\
    \ ................................................10\n   4. Sample Metrics .................................................11\n\
    \      4.1. Reordered Packet Ratio ....................................11\n  \
    \         4.1.1. Metric Name ........................................11\n    \
    \       4.1.2. Metric Parameters ..................................11\n      \
    \     4.1.3. Definition .........................................12\n        \
    \   4.1.4. Discussion .........................................12\n      4.2.\
    \ Reordering Extent .........................................12\n           4.2.1.\
    \ Metric Name ........................................12\n           4.2.2. Notation\
    \ and Metric Parameters .....................12\n           4.2.3. Definition\
    \ .........................................13\n           4.2.4. Discussion .........................................13\n\
    \      4.3. Reordering Late Time Offset ...............................14\n  \
    \         4.3.1. Metric Name ........................................14\n    \
    \       4.3.2. Metric Parameters ..................................14\n      \
    \     4.3.3. Definition .........................................15\n        \
    \   4.3.4. Discussion .........................................15\n      4.4.\
    \ Reordering Byte Offset ....................................16\n           4.4.1.\
    \ Metric Name ........................................16\n           4.4.2. Metric\
    \ Parameters ..................................16\n           4.4.3. Definition\
    \ .........................................16\n           4.4.4. Discussion .........................................17\n\
    \      4.5. Gaps between Multiple Reordering Discontinuities ..........17\n  \
    \         4.5.1. Metric Names .......................................17\n    \
    \       4.5.2. Parameters .........................................17\n      \
    \     4.5.3. Definition of Reordering Discontinuity .............17\n        \
    \   4.5.4. Definition of Reordering Gap .......................18\n          \
    \ 4.5.5. Discussion .........................................18\n      4.6. Reordering-Free\
    \ Runs ......................................19\n           4.6.1. Metric Names\
    \ .......................................19\n           4.6.2. Parameters .........................................19\n\
    \           4.6.3. Definition .........................................19\n  \
    \         4.6.4. Discussion and Illustration ........................20\n   5.\
    \ Metrics Focused on Receiver Assessment: A TCP-Relevant Metric ..21\n      5.1.\
    \ Metric Name ...............................................21\n      5.2. Parameter\
    \ Notation ........................................21\n      5.3. Definitions\
    \ ...............................................22\n      5.4. Discussion ................................................22\n\
    \   6. Measurement and Implementation Issues ..........................23\n  \
    \    6.1. Passive Measurement Considerations ........................26\n   7.\
    \ Examples of Arrival Order Evaluation ...........................26\n      7.1.\
    \ Example with a Single Packet Reordered ....................26\n      7.2. Example\
    \ with Two Packets Reordered ........................28\n      7.3. Example with\
    \ Three Packets Reordered ......................30\n      7.4. Example with Multiple\
    \ Packet Reordering Discontinuities ...31\n   8. Security Considerations ........................................32\n\
    \      8.1. Denial-of-Service Attacks .................................32\n  \
    \    8.2. User Data Confidentiality .................................32\n    \
    \  8.3. Interference with the Metric ..............................32\n   9. IANA\
    \ Considerations ............................................33\n   10. Normative\
    \ References ..........................................35\n   11. Informative\
    \ References ........................................36\n   12. Acknowledgements\
    \ ..............................................37\n   Appendix A. Example Implementations\
    \ in C (Informative) ............38\n   Appendix B. Fragment Order Evaluation\
    \ (Informative) ...............41\n      B.1. Metric Name ...............................................41\n\
    \      B.2. Additional Metric Parameters ..............................41\n  \
    \    B.3. Definition ................................................42\n    \
    \  B.4. Discussion: Notes on Sample Metrics When Evaluating\n           Fragments\
    \ .................................................43\n   Appendix C. Disclaimer\
    \ and License ................................43\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Ordered arrival is a property found in packets that transit\
    \ their\n   path, where the packet sequence number increases with each new\n \
    \  arrival and there are no backward steps.  The Internet Protocol\n   [RFC791]\
    \ [RFC2460] has no mechanisms to ensure either packet delivery\n   or sequencing,\
    \ and higher-layer protocols (above IP) should be\n   prepared to deal with both\
    \ loss and reordering.  This memo defines\n   reordering metrics.\n   A unique\
    \ sequence identifier carried in each packet, such as an\n   incrementing consecutive\
    \ integer message number, establishes the\n   source sequence.\n   The detection\
    \ of reordering at the destination is based on packet\n   arrival order in comparison\
    \ with a non-reversing reference value\n   [Cia03].\n   This metric is consistent\
    \ with [RFC2330] and classifies arriving\n   packets with sequence numbers smaller\
    \ than their predecessors as\n   out-of-order or reordered.  For example, if sequentially\
    \ numbered\n   packets arrive 1,2,4,5,3, then packet 3 is reordered.  This is\n\
    \   equivalent to Paxon's reordering definition in [Pax98], where \"late\"\n \
    \  packets were declared reordered.  The alternative is to emphasize\n   \"premature\"\
    \ packets instead (4 and 5 in the example), but only the\n   arrival of packet\
    \ 3 distinguishes this circumstance from packet loss.\n   Focusing attention on\
    \ late packets allows us to maintain\n   orthogonality with the packet loss metric.\
    \  The metric's construction\n   is very similar to the sequence space validation\
    \ for received\n   segments in [RFC793].  Earlier work to define ordered delivery\n\
    \   includes [Cia00], [Ben99], [Lou01], [Bel02], [Jai02], and [Cia03].\n"
- title: 1.1.  Motivation
  contents:
  - "1.1.  Motivation\n   A reordering metric is relevant for most applications, especially\n\
    \   when assessing network support for Real-Time media streams.  The\n   extent\
    \ of reordering may be sufficient to cause a received packet to\n   be discarded\
    \ by functions above the IP layer.\n   Packet order may change during transfer,\
    \ and several specific path\n   characteristics can make reordering more likely.\n\
    \   Examples are:\n   * When two (or more) paths with slightly differing transfer\
    \ times\n     support a single packet stream or flow, packets traversing the\n\
    \     longer path(s) may arrive out-of-order.  Multiple paths may be used\n  \
    \   to achieve load balancing or may arise from route instability.\n   * To increase\
    \ capacity, a network device designed with multiple\n     processors serving a\
    \ single port (or parallel links) may reorder as\n     a byproduct.\n   * A layer-2\
    \ retransmission protocol that compensates for an error-\n     prone link may\
    \ cause packet reordering.\n   * If for any reason the packets in a buffer are\
    \ not serviced in the\n     order of their arrival, their order will change.\n\
    \   * If packets in a flow are assigned to multiple buffers (following\n     evaluation\
    \ of traffic characteristics, for example), and the\n     buffers have different\
    \ occupation levels and/or service rates, then\n     order will likely change.\n\
    \   When one or more of the above path characteristics are present\n   continuously,\
    \ reordering may be present on a steady-state basis.  The\n   steady-state reordering\
    \ condition typically causes an appreciable\n   fraction of packets to be reordered.\
    \  This form of reordering is most\n   easily detected by minimizing the spacing\
    \ between test packets.\n   Transient reordering may occur in response to network\
    \ instability;\n   temporary routing loops can cause periods of extreme reordering.\n\
    \   This condition is characterized by long, in-order streams with\n   occasional\
    \ instances of reordering, sometimes with extreme\n   correlation.  However, we\
    \ do not expect packet delivery in a\n   completely random order, where, for example,\
    \ the last packet or the\n   first packet in a sample is equally likely to arrive\
    \ first at the\n   destination.  Thus, we expect at least a minimal degree of\
    \ order in\n   the packet arrivals, as exhibited in real networks.\n   The ability\
    \ to restore order at the destination will likely have\n   finite limits.  Practical\
    \ hosts have receiver buffers with finite\n   size in terms of packets, bytes,\
    \ or time (such as de-jitter buffers).\n   Once the initial determination of reordering\
    \ is made, it is useful to\n   quantify the extent of reordering, or lateness,\
    \ in all meaningful\n   dimensions.\n"
- title: 1.2.  Goals and Objectives
  contents:
  - "1.2.  Goals and Objectives\n   The definitions below intend to satisfy the goals\
    \ of:\n      1. Determining whether or not packet reordering has occurred.\n \
    \     2. Quantifying the degree of reordering.  (We define a number of\n     \
    \    metrics to meet this goal, because receiving procedures differ\n        \
    \ by protocol or application.  Since the effects of packet\n         reordering\
    \ vary with these procedures, a metric that quantifies\n         a key aspect\
    \ of one receiver's behavior could be irrelevant to\n         a different receiver.\
    \  If all the metrics defined below are\n         reported, they give a wide-ranging\
    \ view of reordering\n         conditions.)\n   Reordering Metrics MUST:\n   +\
    \  have one or more applications, such as receiver design or network\n      characterization,\
    \ and a compelling relevance in the view of the\n      interested community.\n\
    \   +  be computable \"on the fly\".\n   +  work even if the stream has duplicate\
    \ or lost packets.\n   It is desirable for Reordering Metrics to have one or more\
    \ of the\n   following attributes:\n   +  ability to concatenate results for segments\
    \ measured separately to\n      estimate the reordering of an entire path\n  \
    \ +  simplicity for easy consumption and understanding\n   +  relevance to TCP\
    \ design\n   +  relevance to real-time application performance\n   The current\
    \ set of metrics meets all the requirements above and\n   provides all but the\
    \ concatenation attribute (except in the case\n   where measurements of path segments\
    \ exhibit no reordering, and one\n   may estimate that the complete path composed\
    \ of these segments would\n   also exhibit no reordering).  However, satisfying\
    \ these goals\n   restricts the set of metrics to those that provide some clear\
    \ insight\n   into network characterization or receiver design.  They are not\n\
    \   likely to be exhaustive in their coverage of reordering effects on\n   applications,\
    \ and additional measurements may be possible.\n"
- title: 1.3.  Required Context for All Reordering Metrics
  contents:
  - "1.3.  Required Context for All Reordering Metrics\n   A critical aspect of all\
    \ reordering metrics is their inseparable bond\n   with the measurement conditions.\
    \  Packet reordering is not well\n   defined unless the full measurement context\
    \ is reported.  Therefore,\n   all reordering metric definitions include the following\
    \ parameters:\n   1. The \"Packet of Type-P\" [RFC2330] identifiers for the packet\n\
    \      stream, including the transport addresses for source and\n      destination,\
    \ and any other information that may result in\n      different packet treatments.\n\
    \   2. The stream parameter set for the sending discipline, such as the\n    \
    \  parameters unique to periodic streams (as in [RFC3432]), TCP-like\n      streams\
    \ (as in [RFC3148]), or Poisson streams (as in [RFC2330]).\n      The stream parameters\
    \ include the packet size, specified either as\n      a fixed value or as a pattern\
    \ of sizes (as applicable).\n   Whenever a metric is reported, it MUST include\
    \ a description of these\n   parameters to provide a context for the results.\n"
- title: 2.  Conventions Used in this Document
  contents:
  - "2.  Conventions Used in this Document\n   The key words \"MUST\", \"MUST NOT\"\
    , \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].  Although\n   RFC 2119 was written with protocols in mind, the\
    \ key words are used\n   in this document for similar reasons.  They are used\
    \ to ensure the\n   results of measurements from two different implementations\
    \ are\n   comparable, and to note instances when an implementation could\n   perturb\
    \ the network.\n   In this memo, the characters \"<=\" should be read as \"less\
    \ than or\n   equal to\" and \">=\" as \"greater than or equal to\".\n"
- title: 3.  A Reordered Packet Singleton Metric
  contents:
  - "3.  A Reordered Packet Singleton Metric\n   The IPPM framework [RFC2330] describes\
    \ the notions of singletons,\n   samples, and statistics.  For easy reference:\n\
    \         By a 'singleton' metric, we refer to metrics that are, in a\n      \
    \   sense, atomic.  For example, a single instance of \"bulk\n         throughput\
    \ capacity\" from one host to another might be defined\n         as a singleton\
    \ metric, even though the instance involves\n         measuring the timing of\
    \ a number of Internet packets.\n   The evaluation of packet order requires several\
    \ supporting concepts.\n   The first is an algorithm (function) that produces\
    \ a series of\n   strictly monotonically increasing identifiers applied to packets\
    \ at\n   the source to uniquely establish the order of packet transmission\n \
    \  (where a function, g(x), is strictly monotonically increasing if for\n   any\
    \ x>y, g(x)>g(y) ).  The unique sequence identifier may simply be\n   an incrementing\
    \ consecutive integer message number, or a sequence\n   number as used below.\
    \  The prospect of sequence number rollover is\n   discussed in Section 6.\n \
    \  The second supporting concept is a stored value that is the \"next\n   expected\"\
    \ packet number.  Under normal conditions, the value of Next\n   Expected (NextExp)\
    \ is the sequence number of the previous packet plus\n   1 for message numbering.\
    \  (In general, the receiver reproduces the\n   sender's algorithm and the sequence\
    \ of identifiers so that the \"next\n   expected\" can be determined.)\n   Each\
    \ packet within a packet stream can be evaluated with this order\n   singleton\
    \ metric.\n"
- title: 3.1.  Metric Name
  contents:
  - "3.1.  Metric Name\n   Type-P-Reordered\n"
- title: 3.2.  Metric Parameters
  contents:
  - "3.2.  Metric Parameters\n   +  Src, the IP address of a host.\n   +  Dst, the\
    \ IP address of a host.\n   +  SrcTime, the time of packet emission from the source\
    \ (or wire\n      time).\n   +  s, the unique packet sequence number applied at\
    \ the source, in\n      units of messages.\n   +  NextExp, the next expected sequence\
    \ number at the destination, in\n      units of messages.  The stored value in\
    \ NextExp is determined from\n      a previously arriving packet.\n   And optionally:\n\
    \   +  PayloadSize, the number of bytes contained in the information\n      field\
    \ and referred to when the SrcByte sequence is based on bytes\n      transferred.\n\
    \   +  SrcByte, the packet sequence number applied at the source, in\n      units\
    \ of payload bytes.\n"
- title: 3.3.  Definition
  contents:
  - "3.3.  Definition\n   If a packet s (sent at time, SrcTime) is found to be reordered\
    \ by\n   comparison with the NextExp value, its Type-P-Reordered = TRUE;\n   otherwise,\
    \ Type-P-Reordered = FALSE, as defined below:\n   The value of Type-P-Reordered\
    \ is defined as TRUE if s < NextExp (the\n   packet is reordered).  In this case,\
    \ the NextExp value does not\n   change.\n   The value of Type-P-Reordered is\
    \ defined as FALSE if s >= NextExp\n   (the packet is in-order).  In this case,\
    \ NextExp is set to s+1 for\n   comparison with the next packet to arrive.\n \
    \  Since the NextExp value cannot decrease, it provides a non-reversing\n   order\
    \ criterion to identify reordered packets.\n   This definition can also be specified\
    \ in pseudo-code.\n   On successful arrival of a packet with sequence number s:\n\
    \        if s >= NextExp then /* s is in-order */\n                NextExp = s\
    \ + 1;\n                Type-P-Reordered = False;\n        else     /* when s\
    \ < NextExp */\n                Type-P-Reordered = True\n"
- title: 3.4.  Sequence Discontinuity Definition
  contents:
  - "3.4.  Sequence Discontinuity Definition\n   Packets with s > NextExp are a special\
    \ case of in-order delivery.\n   This condition indicates a sequence discontinuity,\
    \ because of either\n   packet loss or reordering.  Reordered packets must arrive\
    \ for the\n   sequence discontinuity to be defined as a reordering discontinuity\n\
    \   (see Section 4).\n   We define two different states for in-order packets.\n\
    \   When s = NextExp, the original sequence has been maintained, and\n   there\
    \ is no discontinuity present.\n   When s > NextExp, some packets in the original\
    \ sequence have not yet\n   arrived, and there is a sequence discontinuity associated\
    \ with packet\n   s.  The size of the discontinuity is s - NextExp, equal to the\
    \ number\n   of packets presently missing, either reordered or lost.\n   In pseudo-code:\n\
    \   On successful arrival of a packet with sequence number s:\n        if s >=\
    \ NextExp, then /* s is in-order */\n                if s > NextExp then\n   \
    \                       SequenceDiscontinuty = True;\n                       \
    \   SeqDiscontinutySize = s - NextExp;\n                else\n               \
    \           SequenceDiscontinuty = False;\n                NextExp = s + 1;\n\
    \                Type-P-Reordered = False;\n        else /* when s < NextExp */\n\
    \                Type-P-Reordered = True;\n                SequenceDiscontinuty\
    \ = False;\n   Whether any sequence discontinuities occur (and their size) is\n\
    \   determined by the conditions causing loss and/or reordering along the\n  \
    \ measurement path.  Note that a packet could be reordered at one point\n   and\
    \ subsequently lost elsewhere on the path, but this cannot be known\n   from observations\
    \ at the destination.\n"
- title: 3.5.  Evaluation of Reordering in Dimensions of Time or Bytes
  contents:
  - "3.5.  Evaluation of Reordering in Dimensions of Time or Bytes\n   It is possible\
    \ to use alternate dimensions of time or payload bytes\n   to test for reordering\
    \ in the definition of Section 3.3, as long as\n   the SrcTimes and SrcBytes are\
    \ unique and reliable.  Sequence\n   Discontinuities are easily defined and detected\
    \ with message\n   numbering; however, this is not so simple in the dimensions\
    \ of time\n   or bytes.  This is a detractor for the alternate dimensions because\n\
    \   the sequence discontinuity definition plays a key role in the sample\n   metrics\
    \ that follow.\n   It is possible to detect sequence discontinuities with payload\
    \ byte\n   numbering, but only when the test device knows exactly what value to\n\
    \   assign as NextExp in response to any packet arrival.  This is\n   possible\
    \ when the complete pattern of payload sizes is stored at the\n   destination,\
    \ or if the size pattern can be generated using a pseudo-\n   random number generator\
    \ and a shared seed.  If payload size is\n   constant, byte numbering adds needless\
    \ complexity over message\n   numbering.\n   It may be possible to detect sequence\
    \ discontinuities with periodic\n   streams and source time numbering, but there\
    \ are practical pitfalls\n   with sending exactly on-schedule and with clock reliability.\n\
    \   The dimensions of time and bytes remain an important basis for\n   characterizing\
    \ the extent of reordering, as described in Sections 4.3\n   and 4.4.\n"
- title: 3.6.  Discussion
  contents:
  - "3.6.  Discussion\n   Any arriving packet bearing a sequence number from the sequence\
    \ that\n   establishes the NextExp value can be evaluated to determine whether\n\
    \   it is in-order or reordered, based on a previous packet's arrival.\n   In\
    \ the case where NextExp is Undefined (because the arriving packet\n   is the\
    \ first successful transfer), the packet is designated in-order\n   (Type-P-Reordered=FALSE).\n\
    \   This metric assumes reassembly of packet fragments before evaluation.\n  \
    \ In principle, it is possible to use the Type-P-Reordered metric to\n   evaluate\
    \ reordering among packet fragments, but each fragment must\n   contain source\
    \ sequence information.  See Appendix B, \"Fragment Order\n   Evaluation\", for\
    \ more detail.\n   If duplicate packets (multiple non-corrupt copies) arrive at\
    \ the\n   destination, they MUST be noted, and only the first to arrive is\n \
    \  considered for further analysis (copies would be declared reordered\n   according\
    \ to the definition above).  This requirement has the same\n   storage implications\
    \ as earlier IPPM metrics and follows the\n   precedent of [RFC2679].  We provide\
    \ a suggestion to minimize storage\n   size needed in Section 6 on Measurement\
    \ and Implementation Issues.\n"
- title: 4.  Sample Metrics
  contents:
  - "4.  Sample Metrics\n   In this section, we define metrics applicable to a sample\
    \ of packets\n   from a single source sequence number system.  When reordering\
    \ occurs,\n   it is highly desirable to assert the degree to which a packet is\n\
    \   out-of-order or reordered with respect other packets.  This section\n   defines\
    \ several metrics that quantify the extent of reordering in\n   various units\
    \ of measure.  Each metric highlights a relevant use.\n   The metrics in the sub-sections\
    \ below have a network characterization\n   orientation, but also have relevance\
    \ to receiver design where\n   reordering compensation is of interest.  We begin\
    \ with a simple ratio\n   metric indicating the reordered portion of the sample.\n"
- title: 4.1.  Reordered Packet Ratio
  contents:
  - '4.1.  Reordered Packet Ratio

    '
- title: 4.1.1.  Metric Name
  contents:
  - "4.1.1.  Metric Name\n   Type-P-Reordered-Ratio-Stream\n"
- title: 4.1.2.  Metric Parameters
  contents:
  - "4.1.2.  Metric Parameters\n   The parameter set includes Type-P-Reordered singleton\
    \ parameters; the\n   parameters unique to Poisson streams (as in [RFC2330]),\
    \ periodic\n   streams (as in [RFC3432]), or TCP-like streams (as in [RFC3148]);\n\
    \   packet size or size patterns; and the following:\n   +  T0, a start time\n\
    \   +  Tf, an end time\n   +  dT, a waiting time for each packet to arrive, in\
    \ seconds\n   +  K, the total number of packets in the stream sent from source\
    \ to\n      destination\n   +  L, the total number of packets received (arriving\
    \ between T0 and\n      Tf+dT) out of the K packets sent.  Recall that identical\
    \ copies\n      (duplicates) have been removed, so L <= K.\n   +  R, the ratio\
    \ of reordered packets to received packets, defined\n      below\n   Note that\
    \ parameter dT is effectively the threshold for declaring a\n   packet as lost.\
    \  The IPPM Packet Loss Metric [RFC2680] declines to\n   recommend a value for\
    \ this threshold, saying instead that \"good\n   engineering, including an understanding\
    \ of packet lifetimes, will be\n   needed in practice.\"\n"
- title: 4.1.3.  Definition
  contents:
  - "4.1.3.  Definition\n   Given a stream of packets sent from a source to a destination,\
    \ the\n   ratio of reordered packets in the sample is\n   R = (Count of packets\
    \ with Type-P-Reordered=TRUE) / ( L )\n   This fraction may be expressed as a\
    \ percentage (multiply by 100).\n   Note that in the case of duplicate packets,\
    \ only the first copy is\n   used.\n"
- title: 4.1.4.  Discussion
  contents:
  - "4.1.4.  Discussion\n   When the Type-P-Reordered-Ratio-Stream is zero, no further\
    \ reordering\n   metrics need be examined for that sample.  Therefore, the value\
    \ of\n   this metric is its simple ability to summarize the results for a\n  \
    \ reordering-free sample.\n"
- title: 4.2.  Reordering Extent
  contents:
  - "4.2.  Reordering Extent\n   This section defines the extent to which packets\
    \ are reordered and\n   associates a specific sequence discontinuity with each\
    \ reordered\n   packet.  This section inherits the Parameters defined above.\n"
- title: 4.2.1.  Metric Name
  contents:
  - "4.2.1.  Metric Name\n   Type-P-Packet-Reordering-Extent-Stream\n"
- title: 4.2.2.  Notation and Metric Parameters
  contents:
  - "4.2.2.  Notation and Metric Parameters\n   Recall that K is the number of packets\
    \ in the stream at the source,\n   and L is the number of packets received at\
    \ the destination.\n   Each packet has been assigned a sequence number, s, a consecutive\n\
    \   integer from 1 to K in the order of packet transmission (at the\n   source).\n\
    \   Let s[1], s[2], ..., s[L] represent the original sequence numbers\n   associated\
    \ with the packets in order of arrival.\n   s[i] can be thought of as a vector,\
    \ where the index i is the arrival\n   position of the packet with sequence number\
    \ s.  In theory, any source\n   sequence number could appear in any arrival position,\
    \ but this is\n   unlikely in reality.\n   Consider a reordered packet (Type-P-Reordered=TRUE)\
    \ with arrival\n   index i and source sequence number s[i].  There exists a set\
    \ of\n   indexes j (1 <= j < i) such that s[j] > s[i].\n   The new parameters\
    \ are:\n   +  i, the index for arrival position, where i-1 represents an arrival\n\
    \      earlier than i.\n   +  j, a set of one or more arrival indexes, where 1\
    \ <= j < i.\n   +  s[i], the original sequence numbers, s, in order of arrival.\n\
    \   +  e, the Reordering Extent, in units of packets, defined below.\n"
- title: 4.2.3.  Definition
  contents:
  - "4.2.3.  Definition\n   The reordering extent, e, of packet s[i] is defined to\
    \ be i-j for the\n   smallest value of j where s[j] > s[i].\n   Informally, the\
    \ reordering extent is the maximum distance, in\n   packets, from a reordered\
    \ packet to the earliest packet received that\n   has a larger sequence number.\
    \  If a packet is in-order, its\n   reordering extent is undefined.  The first\
    \ packet to arrive is\n   in-order by definition and has undefined reordering\
    \ extent.\n   Comment on the definition of extent:  For some arrival orders, the\n\
    \   assignment of a simple position/distance as the reordering extent\n   tends\
    \ to overestimate the receiver storage needed to restore order.\n   A more accurate\
    \ and complex procedure to calculate packet storage\n   would be to subtract any\
    \ earlier reordered packets that the receiver\n   could pass on to the upper layers\
    \ (see the Byte Offset metric).  With\n   the bias understood, this definition\
    \ is deemed sufficient, especially\n   for those who demand \"on the fly\" calculations.\n"
- title: 4.2.4.  Discussion
  contents:
  - "4.2.4.  Discussion\n   The packet with index j (s[j], identified in the Definition\
    \ above) is\n   the reordering discontinuity associated with packet s at index\
    \ i\n   (s[i]).  This definition is formalized below.\n   Note that the K packets\
    \ in the stream could be some subset of a\n   larger stream, but L is still the\
    \ total number of packets received\n   out of the K packets sent in that subset.\n\
    \   If a receiver intends to restore order, then its buffer capacity\n   determines\
    \ its ability to handle packets that are reordered.  For\n   cases with single\
    \ reordered packets, the extent e gives the number of\n   packets that must be\
    \ held in the receiver's buffer while waiting for\n   the reordered packet to\
    \ complete the sequence.  For more complex\n   scenarios, the extent may be an\
    \ overestimate of required storage (see\n   Section 4.4 on Reordering Byte Offset\
    \ and the examples in Section 7).\n   Also, if the receiver purges its buffer\
    \ for any reason, the extent\n   metric would not reflect this behavior, assuming\
    \ instead that the\n   receiver would exhaustively attempt to restore order.\n\
    \   Although reordering extent primarily quantifies the offset in terms\n   of\
    \ arrival position, it may also be useful for determining the\n   portion of reordered\
    \ packets that can or cannot be restored to order\n   in a typical receiver buffer\
    \ based on their arrival order alone (and\n   without the aid of retransmission).\n\
    \   A sample's reordering extents may be expressed as a histogram to\n   easily\
    \ summarize the frequency of various extents.\n"
- title: 4.3.  Reordering Late Time Offset
  contents:
  - "4.3.  Reordering Late Time Offset\n   Reordered packets can be assigned offset\
    \ values indicating their\n   lateness in terms of buffer time that a receiver\
    \ must possess to\n   accommodate them.  Offset metrics are calculated only on\
    \ reordered\n   packets, as identified by the reordered packet singleton metric\
    \ in\n   Section 3.\n"
- title: 4.3.1.  Metric Name
  contents:
  - "4.3.1.  Metric Name\n   Type-P-Packet-Late-Time-Stream\n"
- title: 4.3.2.  Metric Parameters
  contents:
  - "4.3.2.  Metric Parameters\n   In addition to the parameters defined for Type-P-Reordered-Ratio-\n\
    \   Stream, we specify:\n   +  DstTime, the time that each packet in the stream\
    \ arrives at the\n      destination, and may be associated with index i, or packet\
    \ s[i]\n   +  LateTime(s[i]), the offset of packet s[i] in units of seconds,\n\
    \      defined below\n"
- title: 4.3.3.  Definition
  contents:
  - "4.3.3.  Definition\n   Lateness in time is calculated using destination times.\
    \  When\n   received packet s[i] is reordered and has a reordering extent e,\n\
    \   then:\n   LateTime(s[i]) = DstTime(i)-DstTime(i-e)\n   Alternatively, using\
    \ similar notation to that of Section 4.2, an\n   equivalent definition is:\n\
    \   LateTime(s[i]) = DstTime(i)-DstTime(j), for min{j|1<=j<i} that\n   satisfies\
    \ s[j]>s[i].\n"
- title: 4.3.4.  Discussion
  contents:
  - "4.3.4.  Discussion\n   The offset metrics can help predict whether reordered\
    \ packets will be\n   useful in a general receiver buffer system with finite limits.\
    \  The\n   limit may be the time of storage prior to a cyclic play-out instant\n\
    \   (as with de-jitter buffers).\n   Note that the one-way IP Packet Delay Variation\
    \ (IPDV) [RFC3393]\n   gives the delay variation for a packet with respect to\
    \ the preceding\n   packet in the source sequence.  Lateness and IPDV give an\
    \ indication\n   of whether a buffer at the destination has sufficient storage\
    \ to\n   accommodate the network's behavior and restore order.  When an\n   earlier\
    \ packet in the source sequence is lost, IPDV will necessarily\n   be undefined\
    \ for adjacent packets, and LateTime may provide the only\n   way to evaluate\
    \ the usefulness of a packet.\n   In the case of de-jitter buffers, there are\
    \ circumstances where the\n   receiver employs loss concealment at the intended\
    \ play-out time of a\n   late packet.  However, if this packet arrives out of\
    \ order, the Late\n   Time determines whether the packet is still useful.  IPDV\
    \ no longer\n   applies, because the receiver establishes a new play-out schedule\n\
    \   with additional buffer delay to accommodate similar events in the\n   future\
    \ (this requires very minimal processing).\n   The combination of loss and reordering\
    \ influences the LateTime\n   metric.  If presented with the arrival sequence\
    \ 1, 10, 5 (where\n   packets 2, 3, 4, and 6 through 9 are lost), LateTime would\
    \ not\n   indicate exactly how \"late\" packet 5 is from its intended arrival\n\
    \   position.  IPDV [RFC3393] would not capture this either, because of\n   the\
    \ lack of adjacent packet pairs.  Assuming a periodic stream\n   [RFC3432], an\
    \ expected arrival time could be defined for all packets,\n   but this is essentially\
    \ a single-point delay variation metric (as\n   defined in ITU-T Recommendations\
    \ [I.356] and [Y.1540]), and not a\n   reordering metric.\n   A sample's LateTime\
    \ results may be expressed as a histogram to\n   summarize the frequency of buffer\
    \ times needed to accommodate\n   reordered packets and permit buffer tuning on\
    \ that basis.  A\n   cumulative distribution function (CDF) with buffer time vs.\
    \ percent\n   of reordered packets accommodated may be informative.\n"
- title: 4.4.  Reordering Byte Offset
  contents:
  - "4.4.  Reordering Byte Offset\n   Reordered packets can be assigned offset values\
    \ indicating the\n   storage in bytes that a receiver must possess to accommodate\
    \ them.\n   Offset metrics are calculated only on reordered packets, as\n   identified\
    \ by the reordered packet singleton metric in Section 3.\n"
- title: 4.4.1.  Metric Name
  contents:
  - "4.4.1.  Metric Name\n   Type-P-Packet-Byte-Offset-Stream\n"
- title: 4.4.2.  Metric Parameters
  contents:
  - "4.4.2.  Metric Parameters\n   We use the same parameters defined earlier, including\
    \ the optional\n   parameters of SrcByte and PayloadSize, and define:\n   +  ByteOffset(s[i]),\
    \ the offset of packet s[i] in bytes\n"
- title: 4.4.3.  Definition
  contents:
  - "4.4.3.  Definition\n   The Byte stream offset for reordered packet s[i] is the\
    \ sum of the\n   payload sizes of packets qualified by the following criteria:\n\
    \   * The arrival is prior to the reordered packet, s[i], and\n   * The send sequence\
    \ number, s, is greater than s[i].\n   Packets that meet both these criteria are\
    \ normally buffered until the\n   sequence beneath them is complete.  Note that\
    \ these criteria apply to\n   both in-order and reordered packets.\n   For reordered\
    \ packet s[i] with a reordering extent e:\n   ByteOffset(s[i]) = Sum[qualified\
    \ packets]\n                    = Sum[PayloadSize(packet at i-1 if qualified),\n\
    \                        PayloadSize(packet at i-2 if qualified), ...\n      \
    \                  PayloadSize(packet at i-e always qualified)]\n   Using our\
    \ earlier notation:\n   ByteOffset(s[i]) =\n               Sum[payloads of s[j]\
    \ where s[j]>s[i] and i > j >= i-e]\n"
- title: 4.4.4.  Discussion
  contents:
  - "4.4.4.  Discussion\n   We note that estimates of buffer size due to reordering\
    \ depend\n   greatly on the test stream, in terms of the spacing between test\n\
    \   packets and their size, especially when packet size is variable.  In\n   these\
    \ and other circumstances, it may be most useful to characterize\n   offset in\
    \ terms of the payload size(s) of stored packets, using the\n   Type-P-packet-Byte-Offset-Stream\
    \ metric.\n   The byte offset metric can help predict whether reordered packets\n\
    \   will be useful in a general receiver buffer system with finite\n   limits.\
    \  The limit is expressed as the number of bytes the buffer can\n   store.\n \
    \  A sample's ByteOffset results may be expressed as a histogram to\n   summarize\
    \ the frequency of buffer lengths needed to accommodate\n   reordered packets\
    \ and permit buffer tuning on that basis.  A CDF with\n   buffer size vs. percent\
    \ of reordered packets accommodated may be\n   informative.\n"
- title: 4.5.  Gaps between Multiple Reordering Discontinuities
  contents:
  - '4.5.  Gaps between Multiple Reordering Discontinuities

    '
- title: 4.5.1.  Metric Names
  contents:
  - "4.5.1.  Metric Names\n   Type-P-Packet-Reordering-Gap-Stream\n   Type-P-Packet-Reordering-GapTime-Stream\n"
- title: 4.5.2.  Parameters
  contents:
  - "4.5.2.  Parameters\n   We use the same parameters defined earlier, but add the\
    \ convention\n   that index i' is greater than i, likewise j' > j, and define:\n\
    \   +  Gap(s[j']), the Reordering Gap of packet s[j'] in units of integer\n  \
    \    messages\n   and the OPTIONAL parameter:\n   +  GapTime(s[j']), the Reordering\
    \ Gap of packet s[j'] in units of\n      seconds\n"
- title: 4.5.3.  Definition of Reordering Discontinuity
  contents:
  - "4.5.3.  Definition of Reordering Discontinuity\n   All reordered packets are\
    \ associated with a packet at a reordering\n   discontinuity, defined as the in-order\
    \ packet s[j] that arrived at\n   the minimum value of j (1<=j<i) for which s[j]>\
    \ s[i].\n   Note that s[j] will have been found to cause a sequence\n   discontinuity,\
    \ where s > NextExp when evaluated with the reordered\n   singleton metric as\
    \ described in Section 3.4.\n   Recall that i - e = min(j).  Subsequent reordered\
    \ packets may be\n   associated with the same s[j], or with a different discontinuity.\n\
    \   This fact is used in the definition of the Reordering Gap, below.\n"
- title: 4.5.4.  Definition of Reordering Gap
  contents:
  - "4.5.4.  Definition of Reordering Gap\n   A reordering gap is the distance between\
    \ successive reordering\n   discontinuities.  The Type-P-Packet-Reordering-Gap-Stream\
    \ metric\n   assigns a value for Gap(s[j']) to (all) packets in a stream (and\
    \ a\n   value for GapTime(s[j']), when reported).\n   If:\n      the packet s[j']\
    \ is found to be a reordering discontinuity, based\n      on the arrival of reordered\
    \ packet s[i'] with extent e', and\n      an earlier reordering discontinuity\
    \ s[j], based on the arrival of\n      reordered packet s[i] with extent e was\
    \ already detected, and\n      i' > i, and\n      there are no reordering discontinuities\
    \ between j and j',\n   then the Reordering Gap for packet s[j'] is the difference\
    \ between\n   the arrival positions the reordering discontinuities, as shown below:\n\
    \   Gap(s[j'])    =   (j')  -  (j)\n   Gaps MAY also be expressed in time:\n \
    \  GapTime(s[j']) = DstTime(j') - DstTime(j)\n   Otherwise:\n   Gap(s[j']) (and\
    \ GapTime(s[j']) ) for packet s[j'] is 0.\n"
- title: 4.5.5.  Discussion
  contents:
  - "4.5.5.  Discussion\n   When separate reordering discontinuities can be distinguished,\
    \ a\n   count may also be reported (along with the discontinuity description,\n\
    \   such as the number of reordered packets associated with that\n   discontinuity\
    \ and their extents and offsets).  The Gaps between a\n   sample's reordering\
    \ discontinuities may be expressed as a histogram\n   to easily summarize the\
    \ frequency of various gaps.  Reporting the\n   mode, average, range, etc., may\
    \ also summarize the distributions.\n   The Gap metric may help to correlate the\
    \ frequency of reordering\n   discontinuities with their cause.  Gap lengths are\
    \ also informative\n   to receiver designers, revealing the period of reordering\n\
    \   discontinuities.  The combination of reordering gaps and extent\n   reveals\
    \ whether receivers will be required to handle cases of\n   overlapping reordered\
    \ packets.\n"
- title: 4.6.  Reordering-Free Runs
  contents:
  - "4.6.  Reordering-Free Runs\n   This section defines a metric based on a count\
    \ of consecutive\n   in-order packets between reordered packets.\n"
- title: 4.6.1.  Metric Names
  contents:
  - "4.6.1.  Metric Names\n   Type-P-Packet-Reordering-Free-Run-x-numruns-Stream\n\
    \   Type-P-Packet-Reordering-Free-Run-q-squruns-Stream\n   Type-P-Packet-Reordering-Free-Run-p-numpkts-Stream\n\
    \   Type-P-Packet-Reordering-Free-Run-a-accpkts-Stream\n"
- title: 4.6.2.  Parameters
  contents:
  - "4.6.2.  Parameters\n   We use the same parameters defined earlier and define\
    \ the following:\n   +  r, the run counter\n   +  x, the number of runs, also\
    \ the number of reordered packets\n   +  a, the accumulator of in-order packets\n\
    \   +  p, the number of packets (when the stream is complete, p=(x+a)=L)\n   +\
    \  q, the sum of the squares of the runs counted\n"
- title: 4.6.3.  Definition
  contents:
  - "4.6.3.  Definition\n   As packets in a sample arrive at the destination, the\
    \ count of in-\n   order packets between reordered packets is a Reordering-Free\
    \ run.\n   Note that the minimum run-length is zero according to this\n   definition.\
    \  A pseudo-code example follows:\n   r = 0; /* r is the run counter */\n   x\
    \ = 0; /* x is the number of runs */\n   a = 0; /* a is the accumulator of in-order\
    \ packets */\n   p = 0; /* p is the number of packets */\n   q = 0; /* q is the\
    \ sum of the squares of the runs counted */\n   while(packets arrive with sequence\
    \ number s)\n   {\n        p++;\n        if (s >= NextExp) /* s is in-order */\n\
    \                then r++;\n                a++;\n        else    /* s is reordered\
    \ */\n                q+= r*r;\n                r = 0;\n                x++;\n\
    \   }\n   Each in-order arrival increments the run counter and the accumulator\n\
    \   of in-order packets; each reordered packet resets the run counter\n   after\
    \ adding it to the sum of the squared lengths.\n   Each arrival of a reordered\
    \ packet yields a new run count.  Long runs\n   accompany periods where order\
    \ was maintained, while short runs\n   indicate frequent or multi-packet reordering.\n\
    \   The percent of packets in-order is 100*a/p\n   The average Reordering-Free\
    \ run length is a/x\n   The q counter gives an indication of variation of the\
    \ Reordering-Free\n   runs from the average by comparing q/a to a/x ((q/a)/(a/x)).\n"
- title: 4.6.4.  Discussion and Illustration
  contents:
  - "4.6.4.  Discussion and Illustration\n   Type-P-packet-Reordering-Free-Run-Stream\
    \ parameters give a brief\n   summary of the stream's reordering characteristics\
    \ including the\n   average reordering-free run length, and the variation of run\
    \ lengths;\n   therefore, a key application of this metric is network evaluation.\n\
    \   For 36 packets with 3 runs of 11 in-order packets, we have:\n      p = 36\n\
    \      x = 3\n      a = 33\n      q = 3 * (11*11) = 363\n      ave. reordering-free\
    \ run = 11\n      q/a = 11\n      (q/a)/(a/x) = 1.0\n   For 36 packets with 3\
    \ runs, 2 runs of length 1, and one of length 31,\n   we have:\n      p = 36\n\
    \      x = 3\n      a = 33\n      q = 1 + 1 + 961 = 963\n      ave. reordering-free\
    \ run = 11\n      q/a = 29.18\n      (q/a)/(a/x) = 2.65\n   The variability in\
    \ run length is prominent in the difference between\n   the q values (sum of the\
    \ squared run lengths) and in comparing\n   average run length to the (q/a)/(a/x)\
    \ ratios (equals 1 when all runs\n   are the same length).\n"
- title: '5.  Metrics Focused on Receiver Assessment: A TCP-Relevant Metric'
  contents:
  - "5.  Metrics Focused on Receiver Assessment: A TCP-Relevant Metric\n   This section\
    \ describes a metric that conveys information associated\n   with the effect of\
    \ reordering on TCP.  However, in order to infer\n   anything about TCP performance,\
    \ the test stream MUST bear a close\n   resemblance to the TCP sender of interest.\
    \  [RFC3148] lists the\n   specific aspects of congestion control algorithms that\
    \ must be\n   specified.  Further, RFC 3148 recommends that Bulk Transfer Capacity\n\
    \   metrics SHOULD have instruments to distinguish three cases of packet\n   reordering\
    \ (in Section 3.3).  The sample metrics defined above\n   satisfy the requirements\
    \ to classify packets that are slightly or\n   grossly out-of-order.  The metric\
    \ in this section adds the capability\n   to estimate whether reordering might\
    \ cause the DUP-ACK threshold to\n   be exceeded causing the Fast Retransmit algorithm\
    \ to be invoked.\n   Additional TCP Kernel Instruments are summarized in [Mat03].\n"
- title: 5.1.  Metric Name
  contents:
  - "5.1.  Metric Name\n   Type-P-Packet-n-Reordering-Stream\n"
- title: 5.2.  Parameter Notation
  contents:
  - "5.2.  Parameter Notation\n   Let n be a positive integer (a parameter).  Let\
    \ k be a positive\n   integer equal to the number of packets sent (sample size).\
    \  Let l be\n   a non-negative integer representing the number of packets that\
    \ were\n   received out of the k packets sent.  (Note that there is no\n   relationship\
    \ between k and l: on one hand, losses can make l less\n   than k; on the other\
    \ hand, duplicates can make l greater than k.)\n   Assign each sent packet a sequence\
    \ number, 1 to k, in order of packet\n   emission.\n   Let s[1], s[2], ..., s[l]\
    \ be the original sequence numbers of the\n   received packets, in the order of\
    \ arrival.\n"
- title: 5.3.  Definitions
  contents:
  - "5.3.  Definitions\n   Definition 1: Received packet number i (n < i <= l), with\
    \ source\n   sequence number s[i], is n-reordered if and only if for all j such\n\
    \   that i-n <= j < i, s[j] > s[i].\n   Claim: If, by this definition, a packet\
    \ is n-reordered and 0 < n' <\n   n, then the packet is also n'-reordered.\n \
    \  Note: This definition is illustrated by C code in Appendix A.  The\n   code\
    \ determines and reports the n-reordering for n from 1 to a\n   specified parameter\
    \ (MAXN in the code, set to 100).  The value of n\n   conjectured to be relevant\
    \ for TCP is the TCP duplicate ACK threshold\n   (set to the value of 3 by paragraph\
    \ 2 of Section 3.2 of [RFC 2581]).\n   This definition does not assign an n to\
    \ all reordered packets as\n   defined by the singleton metric, in particular\
    \ when blocks of\n   successive packets are reordered.  (In the arrival sequence\n\
    \   s={1,2,3,7,8,9,4,5,6}, packets 4, 5, and 6 are reordered, but only\n   packet\
    \ 4 is n-reordered, with n=3.)\n   Definition 2: The degree of n-reordering of\
    \ a sample is m/l, where m\n   is the number of n-reordered packets in the sample.\n\
    \   Definition 3: The degree of monotonic reordering of a sample is its\n   degree\
    \ of 1-reordering.\n   Definition 4: A sample is said to have no reordering if\
    \ its degree of\n   monotonic reordering is 0.\n   Note: As follows from the claim\
    \ above, if monotonic reordering of a\n   sample is 0, then the n-reordering of\
    \ the sample is 0 for all n.\n"
- title: 5.4.  Discussion
  contents:
  - "5.4.  Discussion\n   The degree of n-reordering may be expressed as a percentage,\
    \ in which\n   case the number from Definition 2 is multiplied by 100.\n   The\
    \ n-reordering metric is helpful for matching the duplicate ACK\n   threshold\
    \ setting to a given path.  For example, if a path exhibits\n   no more than 5-reordering,\
    \ a DUP-ACK threshold of 6 may avoid\n   unnecessary retransmissions.\n   Important\
    \ special cases are n=1 and n=3:\n   - For n=1, absence of 1-reordering means\
    \ the sequence numbers that\n     the receiver sees are monotonically increasing\
    \ with respect to the\n     previous arriving packet.\n   - For n=3, a NewReno\
    \ TCP sender would retransmit 1 packet in response\n     to an instance of 3-reordering\
    \ and therefore consider this packet\n     lost for the purposes of congestion\
    \ control (the sender will halve\n     its congestion window, see [RFC2581]).\
    \  Three is the default\n     threshold for Stream Control Transport Protocol\
    \ (SCTP) [RFC2960],\n     and the Datagram Congestion Control Protocol (DCCP)\
    \ [RFC4340] when\n     used with Congestion Control ID 2: TCP-like Congestion\
    \ Control\n     [RFC4341].\n   A sample's n-reordering may be expressed as a histogram\
    \ to summarize\n   the frequency for each value of n.\n   We note that the definition\
    \ of n-reordering cannot predict the exact\n   number of packets unnecessarily\
    \ retransmitted by a TCP sender under\n   some circumstances, such as cases with\
    \ closely-spaced reordered\n   singletons.  Both time and position influence the\
    \ sender's behavior.\n   A packet's n-reordering designation is sometimes equal\
    \ to its\n   reordering extent, e.  n-reordering is different in the following\n\
    \   ways:\n   1. n is a count of early packets with consecutive arrival positions\n\
    \      at the receiver.\n   2. Reordered packets (Type-P-Reordered=TRUE) may not\
    \ be n-reordered,\n      but will have an extent, e (see the examples).\n"
- title: 6.  Measurement and Implementation Issues
  contents:
  - "6.  Measurement and Implementation Issues\n   The results of tests will be dependent\
    \ on the time interval between\n   measurement packets (both at the source, and\
    \ during transport where\n   spacing may change).  Clearly, packets launched infrequently\
    \ (e.g., 1\n   per 10 seconds) are unlikely to be reordered.\n   In order to gauge\
    \ the reordering for an application according to the\n   metrics defined in this\
    \ memo, it is RECOMMENDED to use the same\n   sending pattern as the application\
    \ of interest.  In any case, the\n   exact method of packet generation MUST be\
    \ reported with the\n   measurement results, including all stream parameters.\n\
    \   +  To make inferences about applications that use TCP, it is REQUIRED\n  \
    \    to use TCP-like Streams as in [RFC3148]\n   +  For real-time applications,\
    \ it is RECOMMENDED to use periodic\n      streams as in [RFC3432]\n   It is acceptable\
    \ to report the metrics of Sections 3 and 4 with other\n   IPPM metrics using\
    \ Poisson streams [RFC2330].  Poisson streams\n   represent an \"unbiased sample\"\
    \ of network performance for packet loss\n   and delay metrics.  However, it would\
    \ be incorrect to make inferences\n   about the application categories above using\
    \ reordering metrics\n   measured with Poisson streams.\n   Test stream designers\
    \ may prefer to use a periodic sending interval\n   in order to maintain a known\
    \ temporal bias and allow simplified\n   results analysis (as described in [RFC3432]).\
    \  In this case, it is\n   RECOMMENDED that the periodic sending interval be chosen\
    \ to reproduce\n   the closest source packet spacing expected.  Testers must recognize\n\
    \   that streams sent at the link speed serialization limit MUST have\n   limited\
    \ duration and MUST consider packet loss an indication that the\n   stream has\
    \ caused congestion, and suspend further testing.\n   When intending to compare\
    \ independent measurements of reordering, it\n   is RECOMMENDED to use the same\
    \ test stream parameters in each\n   measurement system.\n   Packet lengths might\
    \ also be varied to attempt to detect instances of\n   parallel processing (they\
    \ may cause steady state reordering).  For\n   example, a line-speed burst of\
    \ the longest (MTU-length) packets\n   followed by a burst of the shortest possible\
    \ packets may be an\n   effective detecting pattern.  Other size patterns are\
    \ possible.\n   The non-reversing order criterion and all metrics described above\n\
    \   remain valid and useful when a stream of packets experiences packet\n   loss,\
    \ or both loss and reordering.  In other words, losses alone do\n   not cause\
    \ subsequent packets to be declared reordered.\n   Since this metric definition\
    \ may use sequence numbers with finite\n   range, it is possible that the sequence\
    \ numbers could reach end-of-\n   range and roll over to zero during a measurement.\
    \  By definition, the\n   NextExp value cannot decrease, and all packets received\
    \ after a\n   rollover would be declared reordered.  Sequence number rollover\
    \ can\n   be avoided by using combinations of counter size and test duration\n\
    \   where rollover is impossible (and sequence is reset to zero at the\n   start).\
    \  Also, message-based numbering results in slower sequence\n   consumption. \
    \ There may still be cases where methodological\n   mitigation of this problem\
    \ is desirable (e.g., long-term testing).\n   The elements of mitigation are:\n\
    \   1. There must be a test to detect if a rollover has occurred.  It\n      would\
    \ be nearly impossible for the sequence numbers of successive\n      packets to\
    \ jump by more than half the total range, so these large\n      discontinuities\
    \ are designated as rollover.\n   2. All sequence numbers used in computations\
    \ are represented in a\n      sufficiently large precision.  The numbers have\
    \ a correction\n      applied (equivalent to adding a significant digit) whenever\n\
    \      rollover is detected.\n   3. Reordered packets coincident with sequence\
    \ numbers reaching end-\n      of-range must also be detected for proper application\
    \ of\n      correction factor.\n   Ideally, the test instrument would have the\
    \ ability to use all\n   earlier packets at any point in the test stream.  In\
    \ practice, there\n   will be limited ability to determine the extent of reordering,\
    \ due to\n   the storage requirements for previous packets.  Saving only packets\n\
    \   that indicate discontinuities (and their arrival positions) will\n   reduce\
    \ storage volume.\n   Another solution is to use a sliding history window of packets,\
    \ where\n   the window size would be determined by an upper bound on the useful\n\
    \   reordering extent.  This bound could be several packets or several\n   seconds\
    \ worth of packets, depending on the intended analysis.  When\n   discarding all\
    \ stream information beyond the window, the reordering\n   extent or degree of\
    \ n-reordering may need to be expressed as greater\n   than the window length\
    \ if the reordering discontinuity information\n   has been discarded, and Gap\
    \ calculations would not be possible.\n   The requirement to ignore duplicate\
    \ packets also mandates storage.\n   Here, tracking the sequence numbers of missing\
    \ packets may minimize\n   storage size.  Missing packets may eventually be declared\
    \ lost or be\n   reordered if they arrive.  The missing packet list and the largest\n\
    \   sequence number received thus far (NextExp - 1) are sufficient\n   information\
    \ to determine if a packet is a duplicate (assuming a\n   manageable storage size\
    \ for packets that are missing due to loss).\n   It is important to note that\
    \ practical IP networks also have limited\n   ability to \"store\" packets, even\
    \ when routing loops appear\n   temporarily.  Therefore, the maximum storage for\
    \ reordering metrics\n   (and their complexity) would only approach the number\
    \ packets in the\n   sample, K, when the sending time for K packets is small with\
    \ respect\n   to the network's largest possible transfer time.  Another possible\n\
    \   limitation on storage is the maximum length of the sequence number\n   field,\
    \ assuming that most test streams do not exhaust this length in\n   practice.\n\
    \   Last, we note that determining reordering extents and gaps is tricky\n   when\
    \ there are overlapped or nested events.  Test instrument\n   complexity and reordering\
    \ complexity are directly correlated.\n"
- title: 6.1.  Passive Measurement Considerations
  contents:
  - "6.1.  Passive Measurement Considerations\n   As with other IPPM metrics, the\
    \ definitions have been constructed\n   primarily for Active measurements.\n \
    \  Assuming that the necessary sequence information (message number) is\n   included\
    \ in the packet payload (possibly in application headers such\n   as RTP), reordering\
    \ metrics may be evaluated in a passive measurement\n   arrangement.  Also, it\
    \ is possible to evaluate order at any point\n   along a source-destination path,\
    \ recognizing that intermediate\n   measurements may differ from those made at\
    \ the destination (where the\n   reordering effect on applications can be inferred).\n\
    \   It is possible to apply these metrics to evaluate reordering in a TCP\n  \
    \ sender's stream.  In this case, the source sequence numbers would be\n   based\
    \ on byte stream or segment numbering.  Since the stream may\n   include retransmissions\
    \ due to loss or reordering, care must be taken\n   to avoid declaring retransmitted\
    \ packets reordered.  The additional\n   sequence reference of s or SrcTime helps\
    \ avoid this ambiguity in\n   active measurement, or the optional TCP timestamp\
    \ field [RFC1323] in\n   passive measurement.\n"
- title: 7.  Examples of Arrival Order Evaluation
  contents:
  - "7.  Examples of Arrival Order Evaluation\n   This section provides some examples\
    \ to illustrate how the non-\n   reversing order criterion works, how n-reordering\
    \ works in\n   comparison, and the value of quantifying reordering in all the\n\
    \   dimensions of time, bytes, and position.\n   Throughout this section, we will\
    \ refer to packets by their source\n   sequence number, except where noted.  So\
    \ \"Packet 4\" refers to the\n   packet with source sequence number 4, and the\
    \ reader should refer to\n   the tables in each example to determine packet 4's\
    \ arrival index\n   number, if needed.\n"
- title: 7.1.  Example with a Single Packet Reordered
  contents:
  - "7.1.  Example with a Single Packet Reordered\n   Table 1 gives a simple case\
    \ of reordering, where one packet is\n   reordered, Packet 4.  Packets are listed\
    \ according to their arrival,\n   and message numbering is used.  All packets\
    \ contain PayloadSize=100\n   bytes, with SrcByte=(s x 100)-99 for s=1,2,3,4,...\n\
    \   Table 1: Example with Packet 4 Reordered,\n   Sending order( s @Src): 1,2,3,4,5,6,7,8,9,10\n\
    \   s            Src     Dst                     Dst     Byte    Late\n   @Dst\
    \ NextExp Time    Time    Delay   IPDV    Order   Offset  Time\n   -----------------------------------------------------------------\n\
    \    1     1       0      68      68              1\n    2     2      20     \
    \ 88      68       0      2\n    3     3      40     108      68       0     \
    \ 3\n    5     4      80     148      68     -82      4\n    6     6     100 \
    \    168      68       0      5\n    7     7     120     188      68       0 \
    \     6\n    8     8     140     208      68       0      7\n    4     9     \
    \ 60     210     150      82      8      400     62\n    9     9     160     228\
    \      68       0      9\n   10    10     180     248      68       0     10\n\
    \   Each column gives the following information:\n   s           Packet sequence\
    \ number at the source.\n   NextExp     The value of NextExp when the packet arrived\
    \ (before\n               update).\n   SrcTime     Packet time stamp at the source,\
    \ ms.\n   DstTime     Packet time stamp at the destination, ms.\n   Delay    \
    \   1-way delay of the packet, ms.\n   IPDV        IP Packet Delay Variation,\
    \ ms\n               IPDV = Delay(SrcNum)-Delay(SrcNum-1)\n   DstOrder    Order\
    \ in which the packet arrived at the destination.\n   Byte Offset The byte offset\
    \ of a reordered packet, in bytes.\n   LateTime    The lateness of a reordered\
    \ packet, in ms.\n   We can see that when Packet 4 arrives, NextExp=9, and it\
    \ is declared\n   reordered.  We compute the extent of reordering as follows:\n\
    \   Using the notation <s[1], ..., s[i], ..., s[L]>, the received packets\n  \
    \ are represented as:\n                            \\/\n   s = 1, 2, 3, 5, 6,\
    \ 7, 8, 4, 9, 10\n   i = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n                     \
    \       /\\\n   Applying the definition of Type-P-Packet-Reordering-Extent-Stream:\n\
    \   when j=7, 8 > 4, so the reordering extent is 1 or more.\n   when j=6, 7 >\
    \ 4, so the reordering extent is 2 or more.\n   when j=5, 6 > 4, so the reordering\
    \ extent is 3 or more.\n   when j=4, 5 > 4, so the reordering extent is 4 or more.\n\
    \   when j=3, but 3 < 4, and 4 is the maximum extent, e=4 (assuming\n   there\
    \ are no earlier sequence discontinuities, as in this example).\n   Further, we\
    \ can compute the Late Time (210-148=62ms using DstTime)\n   compared to Packet\
    \ 5's arrival.  If the receiver has a de-jitter\n   buffer that holds more than\
    \ 4 packets, or at least 62 ms storage,\n   Packet 4 may be useful.  Note that\
    \ 1-way delay and IPDV indicate\n   unusual behavior for Packet 4.  Also, if Packet\
    \ 4 had arrived at\n   least 62ms earlier, it would have been in-order in this\
    \ example.\n   If all packets contained 100 byte payloads, then Byte Offset is\
    \ equal\n   to 400 bytes.\n   Following the definitions of Section 5.1, Packet\
    \ 4 is designated\n   4-reordered.\n"
- title: 7.2.  Example with Two Packets Reordered
  contents:
  - "7.2.  Example with Two Packets Reordered\n   Table 2 Example with Packets 5 and\
    \ 6 Reordered,\n   Sending order(s @Src): 1,2,3,4,5,6,7,8,9,10\n   s         \
    \   Src     Dst                     Dst     Byte    Late\n   @Dst NextExp Time\
    \    Time    Delay   IPDV    Order   Offset  Time\n   -----------------------------------------------------------------\n\
    \    1     1       0      68      68              1\n    2     2      20     \
    \ 88      68       0      2\n    3     3      40     108      68       0     \
    \ 3\n    4     4      60     128      68       0      4\n    7     5     120 \
    \    188      68     -22      5\n    5     8      80     189     109      41 \
    \     6      100     1\n    6     8     100     190      90     -19      7   \
    \   100     2\n    8     8     140     208      68       0      8\n    9     9\
    \     160     228      68       0      9\n   10    10     180     248      68\
    \       0     10\n   Table 2 shows a case where Packets 5 and 6 arrive just behind\
    \ Packet\n   7, so both 5 and 6 are reordered.  The Late times (189-188=1,\n \
    \  190-188=2) are small.\n   Using the notation <s[1], ..., s[i], ..., s[l]>,\
    \ the received packets\n   are represented as:\n                      \\/ \\/\n\
    \   s = 1, 2, 3, 4, 7, 5, 6, 8, 9, 10\n   i = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n\
    \                      /\\ /\\\n   Considering Packet 5 first:\n   when j=5, 7\
    \ > 5, so the reordering extent is 1 or more.\n   when j=4, we have 4 < 5, so\
    \ 1 is its maximum extent, and e=1.\n   Considering Packet 6 next:\n   when j=6,\
    \ 5 < 6, the extent is not yet defined.\n   when j=5, 7 > 6, so the reordering\
    \ extent is i-j=2 or more.\n   when j=4, 4 < 6, and we find 2 is its maximum extent,\
    \ and e=2.\n   We can also associate each of these reordered packets with a\n\
    \   reordering discontinuity.  We find the minimum j=5 (for both packets)\n  \
    \ according to Section 4.2.3.  So Packet 6 is associated with the same\n   reordering\
    \ discontinuity as Packet 5, the Reordering Discontinuity at\n   Packet 7.\n \
    \  This is a case where reordering extent e would over-estimate the\n   packet\
    \ storage required to restore order.  Only one packet storage is\n   required\
    \ (to hold Packet 7), but e=2 for Packet 6.\n   Following the definitions of Section\
    \ 5, Packet 5 is designated\n   1-reordered, but Packet 6 is not designated n-reordered.\n\
    \   A hypothetical sender/receiver pair may retransmit Packet 5\n   unnecessarily,\
    \ since it is 1-reordered (in agreement with the\n   singleton metric).  Though\
    \ Packet 6 may not be unnecessarily\n   retransmitted, the receiver cannot advance\
    \ Packet 7 to the higher\n   layers until after Packet 6 arrives.  Therefore,\
    \ the singleton metric\n   correctly determined that Packet 6 is reordered.\n"
- title: 7.3.  Example with Three Packets Reordered
  contents:
  - "7.3.  Example with Three Packets Reordered\n   Table 3 Example with Packets 4,\
    \ 5, and 6 reordered\n   Sending order(s @Src): 1,2,3,4,5,6,7,8,9,10,11\n   s\
    \            Src     Dst                     Dst     Byte    Late\n   @Dst NextExp\
    \ Time    Time    Delay   IPDV    Order   Offset  Time\n   -----------------------------------------------------------------\n\
    \    1    1        0      68      68              1\n    2    2       20     \
    \ 88      68       0      2\n    3    3       40     108      68       0     \
    \ 3\n    7    4      120     188      68     -88      4\n    8    8      140 \
    \    208      68       0      5\n    9    9      160     228      68       0 \
    \     6\n   10   10      180     248      68       0      7\n    4   11      \
    \ 60     250     190     122      8      400     62\n    5   11       80     252\
    \     172     -18      9      400     64\n    6   11      100     256     156\
    \     -16     10      400     68\n   11   11      200     268      68       0\
    \     11\n   The case in Table 3 is where three packets in sequence have long\n\
    \   transit times (Packets with s = 4, 5, and 6).  Delay, Late time, and\n   Byte\
    \ Offset capture this very well, and indicate variation in\n   reordering extent,\
    \ while IPDV indicates that the spacing between\n   packets 4,5,and 6 has changed.\n\
    \   The histogram of Reordering extents (e) would be:\n   Bin         1  2  3\
    \  4  5  6  7\n   Frequency   0  0  0  1  1  1  0\n   Using the notation <s[1],\
    \ ..., s[i], ..., s[l]>, the received packets\n   are represented as:\n   s =\
    \ 1, 2, 3, 7, 8, 9,10, 4, 5, 6, 11\n   i = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10,11\n\
    \   We first calculate the n-reordering.  Considering Packet 4 first:\n   when\
    \ n=1, 7<=j<8, and 10> 4, so the packet is 1-reordered.\n   when n=2, 6<=j<8,\
    \ and 9 > 4, so the packet is 2-reordered.\n   when n=3, 5<=j<8, and 8 > 4, so\
    \ the packet is 3-reordered.\n   when n=4, 4<=j<8, and 7 > 4, so the packet is\
    \ 4-reordered.\n   when n=5, 3<=j<8, but 3 < 4, and 4 is the maximum n-reordering.\n\
    \   Considering packet 5[9] next:\n   when n=1, 8<=j<9, but 4 < 5, so the packet\
    \ at i=9 is not designated\n   as n-reordered.  We find the same result for Packet\
    \ 6.\n   We now consider whether reordered Packets 5 and 6 are associated with\n\
    \   the same reordering discontinuity as Packet 4.  Using the test of\n   Section\
    \ 4.2.3, we find that the minimum j=4 for all three packets.\n   They are all\
    \ associated with the reordering discontinuity at Packet\n   7.\n   This example\
    \ shows again that the n-reordering definition identifies\n   a single Packet\
    \ (4) with a sufficient degree of n-reordering that\n   might cause one unnecessary\
    \ packet retransmission by the New Reno TCP\n   sender (with DUP-ACK threshold=3\
    \ or 4).  Also, the reordered arrival\n   of Packets 5 and 6 will allow the receiver\
    \ process to pass Packets 7\n   through 10 up the protocol stack (the singleton\
    \ Type-P-Reordered =\n   TRUE for Packets 5 and 6, and they are all associated\
    \ with a single\n   reordering discontinuity).\n"
- title: 7.4.  Example with Multiple Packet Reordering Discontinuities
  contents:
  - "7.4.  Example with Multiple Packet Reordering Discontinuities\n   Table 4 Example\
    \ with Multiple Packet Reordering Discontinuities\n   Sending order(s @Src): 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16\n\
    \          Discontinuity         Discontinuity\n                |---------Gap---------|\n\
    \   s = 1, 2, 3, 6, 7, 4, 5, 8, 9, 10, 12, 13, 11, 14, 15, 16\n   i = 1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16\n   r = 1, 2, 3, 4, 5, 0, 0, 1,\
    \ 2,  3,  4,  5,  0,  1,  2,  3, ...\n   number of runs,n = 1  2             \
    \        3\n   end r counts =     5  0                     5\n   (These values\
    \ are computed after the packet arrives.)\n   Packet 4 has extent e=2, Packet\
    \ 5 has extent e=3, and Packet 11 has\n   e=2.  There are two different reordering\
    \ discontinuities, one at\n   Packet 6 (where j=4) and one at Packet 12 (where\
    \ j'=11).\n   According to the definition of Reordering Gap\n   Gap(s[j']) = (j')\
    \ - (j)\n   Gap(Packet 12) = (11) - (4) = 7\n   We also have three reordering-free\
    \ runs of lengths 5, 0, and 5.\n   The differences between these two multiple-event\
    \ metrics are evident\n   here.  Gaps are the distance between sequence discontinuities\
    \ that\n   are subsequently defined as reordering discontinuities, while\n   reordering-free\
    \ runs capture the distance between reordered packets.\n"
- title: 8.  Security Considerations
  contents:
  - '8.  Security Considerations

    '
- title: 8.1.  Denial-of-Service Attacks
  contents:
  - "8.1.  Denial-of-Service Attacks\n   This metric requires a stream of packets\
    \ sent from one host (source)\n   to another host (destination) through intervening\
    \ networks.  This\n   method could be abused for denial-of-service attacks directed\
    \ at\n   destination and/or the intervening network(s).\n   Administrators of\
    \ the source, destination, and intervening network(s)\n   should establish bilateral\
    \ or multilateral agreements regarding the\n   timing, size, and frequency of\
    \ collection of sample metrics.  Use of\n   this method in excess of the terms\
    \ agreed between the participants\n   may be cause for immediate rejection or\
    \ discard of packets or other\n   escalation procedures defined between the affected\
    \ parties.\n"
- title: 8.2.  User Data Confidentiality
  contents:
  - "8.2.  User Data Confidentiality\n   Active use of this method generates packets\
    \ for a sample, rather than\n   taking samples based on user data, and does not\
    \ threaten user data\n   confidentiality.  Passive measurement must restrict attention\
    \ to the\n   headers of interest.  Since user payloads may be temporarily stored\n\
    \   for length analysis, suitable precautions MUST be taken to keep this\n   information\
    \ safe and confidential.  In most cases, a hashing function\n   will produce a\
    \ value suitable for payload comparisons.\n"
- title: 8.3.  Interference with the Metric
  contents:
  - "8.3.  Interference with the Metric\n   It may be possible to identify that a\
    \ certain packet or stream of\n   packets is part of a sample.  With that knowledge\
    \ at the destination\n   and/or the intervening networks, it is possible to change\
    \ the\n   processing of the packets (e.g., increasing or decreasing delay) that\n\
    \   may distort the measured performance.  It may also be possible to\n   generate\
    \ additional packets that appear to be part of the sample\n   metric.  These additional\
    \ packets are likely to perturb the results\n   of the sample measurement.  The\
    \ likely consequences of packet\n   injection are that the additional packets\
    \ would be declared\n   duplicates, or that the original packets would be seen\
    \ as duplicates\n   (if they arrive after the corresponding injected packets),\
    \ causing\n   invalid measurements on the injected packets.\n   The requirements\
    \ for data collection resistance to interference by\n   malicious parties and\
    \ mechanisms to achieve such resistance are\n   available in other IPPM memos.\
    \  A set of requirements for a data\n   collection protocol can be found in [RFC3763],\
    \ and a protocol\n   specification for the One-Way Active Measurement Protocol\
    \ (OWAMP) is\n   in [RFC4656].  The security considerations sections of the two\
    \ OWAMP\n   documents are extensive and should be consulted for additional\n \
    \  details.\n"
- title: 9.  IANA Considerations
  contents:
  - "9.  IANA Considerations\n   Metrics defined in this memo have been registered\
    \ in the IANA IPPM\n   METRICS REGISTRY as described in initial version of the\
    \ registry\n   [RFC4148].\n   IANA has registered the following metrics in the\
    \ IANA-IPPM-METRICS-\n   REGISTRY-MIB:\n   ietfReorderedSingleton OBJECT-IDENTITY\n\
    \       STATUS       current\n       DESCRIPTION\n          \"Type-P-Reordered\"\
    \n       REFERENCE\n          \"Reference RFC 4737, Section 3\"\n       ::= {\
    \ ianaIppmMetrics 34 }\n   ietfReorderedPacketRatio OBJECT-IDENTITY\n       STATUS\
    \       current\n       DESCRIPTION\n          \"Type-P-Reordered-Ratio-Stream\"\
    \n       REFERENCE\n          \"Reference RFC 4737, Section 4.1\"\n       ::=\
    \ { ianaIppmMetrics 35 }\n   ietfReorderingExtent OBJECT-IDENTITY\n       STATUS\
    \       current\n       DESCRIPTION\n          \"Type-P-Packet-Reordering-Extent-Stream\"\
    \n       REFERENCE\n          \"Reference RFC 4737, Section 4.2\"\n       ::=\
    \ { ianaIppmMetrics 36 }\n   ietfReorderingLateTimeOffset OBJECT-IDENTITY\n  \
    \     STATUS       current\n       DESCRIPTION\n          \"Type-P-Packet-Late-Time-Stream\"\
    \n       REFERENCE\n          \"Reference RFC 4737, Section 4.3\"\n       ::=\
    \ { ianaIppmMetrics 37 }\n   ietfReorderingByteOffset OBJECT-IDENTITY\n      \
    \ STATUS       current\n       DESCRIPTION\n          \"Type-P-Packet-Byte-Offset-Stream\"\
    \n       REFERENCE\n          \"Reference RFC 4737, Section 4.4\"\n       ::=\
    \ { ianaIppmMetrics 38 }\n   ietfReorderingGap OBJECT-IDENTITY\n       STATUS\
    \       current\n       DESCRIPTION\n          \"Type-P-Packet-Reordering-Gap-Stream\"\
    \n       REFERENCE\n          \"Reference RFC 4737, Section 4.5\"\n       ::=\
    \ { ianaIppmMetrics 39 }\n   ietfReorderingGapTime OBJECT-IDENTITY\n       STATUS\
    \       current\n       DESCRIPTION\n          \"Type-P-Packet-Reordering-GapTime-Stream\"\
    \n       REFERENCE\n          \"Reference RFC 4737, Section 4.5\"\n       ::=\
    \ { ianaIppmMetrics 40 }\n   ietfReorderingFreeRunx OBJECT-IDENTITY\n       STATUS\
    \       current\n       DESCRIPTION\n          \"Type-P-Packet-Reordering-Free-Run-x-numruns-Stream\"\
    \n       REFERENCE\n          \"Reference RFC 4737, Section 4.6\"\n       ::=\
    \ { ianaIppmMetrics 41 }\n   ietfReorderingFreeRunq OBJECT-IDENTITY\n       STATUS\
    \       current\n       DESCRIPTION\n          \"Type-P-Packet-Reordering-Free-Run-q-squruns-Stream\"\
    \n       REFERENCE\n          \"Reference RFC 4737, Section 4.6\"\n       ::=\
    \ { ianaIppmMetrics 42 }\n   ietfReorderingFreeRunp OBJECT-IDENTITY\n       STATUS\
    \       current\n       DESCRIPTION\n          \"Type-P-Packet-Reordering-Free-Run-p-numpkts-Stream\"\
    \n       REFERENCE\n          \"Reference RFC 4737, Section 4.6\"\n       ::=\
    \ { ianaIppmMetrics 43 }\n   ietfReorderingFreeRuna OBJECT-IDENTITY\n       STATUS\
    \       current\n       DESCRIPTION\n          \"Type-P-Packet-Reordering-Free-Run-a-accpkts-Stream\"\
    \n       REFERENCE\n          \"Reference RFC 4737, Section 4.6\"\n       ::=\
    \ { ianaIppmMetrics 44 }\n   ietfnReordering OBJECT-IDENTITY\n       STATUS  \
    \     current\n       DESCRIPTION\n          \"Type-P-Packet-n-Reordering-Stream\"\
    \n       REFERENCE\n          \"Reference RFC 4737, Section 5\"\n       ::= {\
    \ ianaIppmMetrics 45 }\n"
- title: 10.  Normative References
  contents:
  - "10.  Normative References\n   [RFC791]   Postel, J., \"Internet Protocol\", STD\
    \ 5, RFC 791, September\n              1981.\n   [RFC2119]  Bradner, S., \"Key\
    \ words for use in RFCs to Indicate\n              Requirement Levels\", BCP 14,\
    \ RFC 2119, March 1997.\n   [RFC2330]  Paxson, V., Almes, G., Mahdavi, J., and\
    \ M. Mathis,\n              \"Framework for IP Performance Metrics\", RFC 2330,\
    \ May\n              1998.\n   [RFC2460]  Deering, S. and R. Hinden, \"Internet\
    \ Protocol, Version 6\n              (IPv6) Specification\", RFC 2460, December\
    \ 1998.\n   [RFC3148]  Mathis, M. and M. Allman, \"A Framework for Defining\n\
    \              Empirical Bulk Transfer Capacity Metrics\", RFC 3148, July\n  \
    \            2001.\n   [RFC3432]  Raisanen, V., Grotefeld, G., and A. Morton,\
    \ \"Network\n              performance measurement with periodic streams\", RFC\
    \ 3432,\n              November 2002.\n   [RFC3763]  Shalunov, S. and B. Teitelbaum,\
    \ \"One-way Active\n              Measurement Protocol (OWAMP) Requirements\"\
    , RFC 3763,\n              April 2004.\n   [RFC4148]  Stephan, E., \"IP Performance\
    \ Metrics (IPPM) Metrics\n              Registry\", BCP 108, RFC 4148, August\
    \ 2005.\n   [RFC4656]  Shalunov, S., Teitelbaum, B., Karp, A., Boote, J., and\
    \ M.\n              Zeckauskas,  \"A One-way Active Measurement Protocol\n   \
    \           (OWAMP)\", RFC 4656, September 2006.\n"
- title: 11.  Informative References
  contents:
  - "11.  Informative References\n   [Bel02]    J. Bellardo and S. Savage, \"Measuring\
    \ Packet Reordering,\"\n              Proceedings of the ACM SIGCOMM Internet\
    \ Measurement\n              Workshop 2002, November 6-8, Marseille, France.\n\
    \   [Ben99]    J.C.R. Bennett, C. Partridge, and N. Shectman, \"Packet\n     \
    \         Reordering is Not Pathological Network Behavior,\" IEEE/ACM\n      \
    \        Transactions on Networking, vol. 7, no. 6, pp. 789-798,\n           \
    \   December 1999.\n   [Cia00]    L. Ciavattone and A. Morton, \"Out-of-Sequence\
    \ Packet\n              Parameter Definition (for Y.1540)\", Contribution number\n\
    \              T1A1.3/2000-047, October 30, 2000,\n              http://home.comcast.net/~acmacm/IDcheck/0A130470.doc.\n\
    \   [Cia03]    L. Ciavattone, A. Morton, and G. Ramachandran,\n              \"\
    Standardized Active Measurements on a Tier 1 IP\n              Backbone,\" IEEE\
    \ Communications Mag., pp. 90-97, June 2003.\n   [I.356]    ITU-T Recommendation\
    \ I.356, \"B-ISDN ATM layer cell\n              transfer performance\", March\
    \ 2000.\n   [Jai02]    S. Jaiswal et al., \"Measurement and Classification of\
    \ Out-\n              of-Sequence Packets in a Tier-1 IP Backbone,\" Proceedings\n\
    \              of the ACM SIGCOMM Internet Measurement Workshop 2002,\n      \
    \        November 6-8, Marseille, France.\n   [Lou01]    D. Loguinov and H. Radha,\
    \ \"Measurement Study of Low-\n              bitrate Internet Video Streaming\"\
    , Proceedings of the ACM\n              SIGCOMM Internet Measurement Workshop\
    \ 2001 November 1-2,\n              2001, San Francisco, USA.\n   [Mat03]    M.\
    \ Mathis, J. Heffner, and R. Reddy, \"Web100: Extended TCP\n              Instrumentation\
    \ for Research, Education and Diagnosis\",\n              ACM Computer Communications\
    \ Review, Vol 33, Num 3, July\n              2003, http://www.web100.org/docs/mathis03web100.pdf.\n\
    \   [Pax98]    V. Paxson, \"Measurements and Analysis of End-to-End\n        \
    \      Internet Dynamics,\" Ph.D. dissertation, U.C. Berkeley,\n             \
    \ 1997, ftp://ftp.ee.lbl.gov/papers/vp-thesis/dis.ps.gz.\n   [RFC793]   Postel,\
    \ J., \"Transmission Control Protocol\", STD 7, RFC\n              793, September\
    \ 1981.\n   [RFC1323]  Jacobson, V., Braden, R., and D. Borman, \"TCP Extensions\n\
    \              for High Performance\", RFC 1323, May 1992.\n   [RFC2581]  Allman,\
    \ M., Paxson, V., and W. Stevens, \"TCP Congestion\n              Control \",\
    \ RFC 2581, April 1999.\n   [RFC2679]  Almes, G., Kalidindi, S., and M. Zekauskas,\
    \ \"A One-way\n              Delay Metric for IPPM\", RFC 2679, September 1999.\n\
    \   [RFC2680]  Almes, G., Kalidindi, S., and M. Zekauskas, \"A One-way\n     \
    \         Packet Loss Metric for IPPM\", RFC 2680, September 1999.\n   [RFC2960]\
    \  Stewart, R., Xie, Q., Morneault, K., Sharp, C.,\n              Schwarzbauer,\
    \ H., Taylor, T., Rytina, I., Kalla, M.,\n              Zhang, L., and V. Paxson,\
    \ \"Stream Control Transmission\n              Protocol\", RFC 2960, October 2000.\n\
    \   [RFC3393]  Demichelis, C. and P. Chimento, \"IP Packet Delay Variation\n \
    \             Metric for IP Performance Metrics (IPPM)\", RFC 3393,\n        \
    \      November 2002.\n   [RFC4340]  Kohler, E., Handley, M., and S. Floyd, \"\
    Datagram\n              Congestion Control Protocol (DCCP)\", RFC 4340, March\
    \ 2006.\n   [RFC4341]  Floyd, S. and E. Kohler, \"Profile for Datagram Congestion\n\
    \              Control Protocol (DCCP) Congestion Control ID 2: TCP-like\n   \
    \           Congestion Control\", RFC 4341, March 2006.\n   [TBABAJ02] T. Banka,\
    \ A. Bare, A. P. Jayasumana, \"Metrics for Degree\n              of Reordering\
    \ in Packet Sequences\", Proc. 27th IEEE\n              Conference on Local Computer\
    \ Networks, Tampa, FL, Nov.\n              2002.\n   [Y.1540]   ITU-T Recommendation\
    \ Y.1540, \"Internet protocol data\n              communication service - IP packet\
    \ transfer and\n              availability performance parameters\", December\
    \ 2002.\n"
- title: 12.  Acknowledgements
  contents:
  - "12.  Acknowledgements\n   The authors would like to acknowledge many helpful\
    \ discussions with\n   Matt Zekauskas, Jon Bennett (who authored the sections\
    \ on\n   Reordering-Free Runs), and Matt Mathis.  We thank David Newman, Henk\n\
    \   Uijterwaal, Mark Allman, Vern Paxson, and Phil Chimento for their\n   reviews\
    \ and suggestions, and Michal Przybylski for sharing\n   implementation experiences\
    \ with us on the ippm-list.  Anura\n   Jayasumana and Nischal Piratla brought\
    \ in recent work-in-progress\n   [TBABAJ02].  We gratefully acknowledge the foundation\
    \ laid by the\n   authors of the IP performance framework [RFC2330].\n"
- title: Appendix A.  Example Implementations in C (Informative)
  contents:
  - "Appendix A.  Example Implementations in C (Informative)\n   Two example c-code\
    \ implementations of reordering definitions follow:\n   Example 1  n-reordering\
    \ ============================================\n   #include <stdio.h>\n   #define\
    \ MAXN   100\n   #define min(a, b) ((a) < (b)? (a): (b))\n   #define loop(x) ((x)\
    \ >= 0? x: x + MAXN)\n   /*\n    * Read new sequence number and return it.  Return\
    \ a sentinel value\n    * of EOF (at least once) when there are no more sequence\
    \ numbers.\n    * In this example, the sequence numbers come from stdin;\n   \
    \ * in an actual test, they would come from the network.\n    *\n   */\n   int\n\
    \   read_sequence_number()\n   {\n           int     res, rc;\n           rc =\
    \ scanf(\"%d\\n\", &res);\n           if (rc == 1) return res;\n           else\
    \ return EOF;\n   }\n   int\n   main()\n   {\n           int     m[MAXN];    \
    \   /* We have m[j-1] == number of\n                                         \
    \   * j-reordered packets.  */\n           int     ring[MAXN];    /* Last sequence\
    \ numbers seen.  */\n           int     r = 0;          /* Ring pointer for next\
    \ write.  */\n           int     l = 0;        /* Number of sequence numbers read.\
    \  */\n           int     s;              /* Last sequence number read.  */\n\
    \           int     j;\n           for (j = 0; j < MAXN; j++) m[j] = 0;\n    \
    \       for (;(s = read_sequence_number())!= EOF;l++,r=(r+1)%MAXN) {\n       \
    \      for (j=0; j<min(l, MAXN)&&s<ring[loop(r-j-1)];j++) m[j]++;\n          \
    \   ring[r] = s;\n           }\n           for (j = 0; j < MAXN && m[j]; j++)\n\
    \             printf(\"%d-reordering = %f%%\\n\", j+1, 100.0*m[j]/(l-j-1));\n\
    \           if (j == 0) printf(\"no reordering\\n\");\n           else if (j <\
    \ MAXN) printf(\"no %d-reordering\\n\", j+1);\n           else printf(\"only up\
    \ to %d-reordering is handled\\n\", MAXN);\n           exit(0);\n   }\n   /* Example\
    \ 2   singleton and n-reordering comparison =======\n      Author:  Jerry Perser\
    \ 7-2002 (mod by acm 12-2004)\n      Compile: $ gcc -o jpboth file.c\n      Usage:\
    \   $ jpboth 1 2 3 7 8 4 5 6 (pkt sequence given on cmdline)\n      Note to cut/pasters:\
    \ line 59 may need repair\n   */\n      #include <stdio.h>\n      #define MAXN\
    \   100\n      #define min(a, b) ((a) < (b)? (a): (b))\n      #define loop(x)\
    \ ((x) >= 0? x: x + MAXN)\n      /* Global counters */\n      int receive_packets=0;\
    \       /* number of received */\n      int reorder_packets_Al=0;    /* num reordered\
    \ pkts (singleton) */\n      int reorder_packets_Stas=0; /* num reordered pkts(n-reordering)*/\n\
    \      /* function to test if current packet has been reordered\n       * returns\
    \ 0 = not reordered\n       *         1 = reordered\n       */\n      int testorder1(int\
    \ seqnum)   // Al\n      {\n           static int NextExp = 1;\n           int\
    \ iReturn = 0;\n           if (seqnum >= NextExp) {\n                   NextExp\
    \ = seqnum+1;\n           } else {\n                   iReturn = 1;\n        \
    \   }\n           return iReturn;\n      }\n      int testorder2(int seqnum) \
    \  // Stanislav\n      {\n           static int  ring[MAXN];    /* Last sequence\
    \ numbers seen.  */\n           static int  r = 0;         /* Ring pointer for\
    \ next write */\n           int   l = 0;          /* Number of sequence numbers\
    \ read.  */\n           int   j;\n           int  iReturn = 0;\n           l++;\n\
    \           r = (r+1) % MAXN;\n           for (j=0; j<min(l, MAXN) && seqnum<ring[loop(r-j-1)];\
    \ j++)\n                       iReturn = 1;\n           ring[r] = seqnum;\n  \
    \         return iReturn;\n      }\n      int main(int argc, char *argv[])\n \
    \     {\n           int i, packet;\n           for (i=1; i< argc; i++) {\n   \
    \             receive_packets++;\n                packet = atoi(argv[i]);\n  \
    \              reorder_packets_Al += testorder1(packet); // singleton\n      \
    \          reorder_packets_Stas += testorder2(packet); //n-reord.\n          \
    \ }\n           printf(\"Received packets = %d, Singleton Reordered = %d, n-\n\
    \   reordered = %d\\n\",  receive_packets, reorder_packets_Al,\n   reorder_packets_Stas\
    \ );\n           exit(0);\n      }\n   Reference\n   ISO/IEC 9899:1999 (E), as\
    \ amended by ISO/IEC 9899:1999/Cor.1:2001\n   (E).  Also published as:\n   The\
    \ C Standard: Incorporating Technical Corrigendum 1, British\n   Standards Institute,\
    \ ISBN: 0-470-84573-2, Hardcover, 558 pages,\n   September 2003.\n"
- title: Appendix B.  Fragment Order Evaluation (Informative)
  contents:
  - "Appendix B.  Fragment Order Evaluation (Informative)\n   Section 3 stated that\
    \ fragment reassembly is assumed prior to order\n   evaluation, but that similar\
    \ procedures could be applied prior to\n   reassembly.  This appendix gives definitions\
    \ and procedures to\n   identify reordering in a packet stream that includes fragmentation.\n"
- title: B.1.  Metric Name
  contents:
  - "B.1.  Metric Name\n   The Metric retains the same name, Type-P-Reordered, but\
    \ additional\n   parameters are required.\n   This appendix assumes that the device\
    \ that divides a packet into\n   fragments sends them according to ascending fragment\
    \ offset.  Early\n   Linux OS sent fragments in reverse order, so this possibility\
    \ is\n   worth checking.\n"
- title: B.2.  Additional Metric Parameters
  contents:
  - "B.2.  Additional Metric Parameters\n   +  MoreFrag, the state of the More Fragments\
    \ Flag in the IP header.\n   +  FragOffset, the offset from the beginning of a\
    \ fragmented packet,\n      in 8 octet units (also from the IP header).\n   +\
    \  FragSeq#, the sequence number from the IP header of a fragmented\n      packet\
    \ currently under evaluation for reordering.  When set to\n      zero, fragment\
    \ evaluation is not in progress.\n   +  NextExpFrag, the next expected fragment\
    \ offset at the destination,\n      in 8 octet units.  Set to zero when fragment\
    \ evaluation is not in\n      progress.\n   The packet sequence number, s, is\
    \ assumed to be the same as the IP\n   header sequence number.  Also, the value\
    \ of NextExp does not change\n   with the in-order arrival of fragments.  NextExp\
    \ is only updated when\n   a last fragment or a complete packet arrives.\n   Note\
    \ that packets with missing fragments MUST be declared lost, and\n   the Reordering\
    \ status of any fragments that do arrive MUST be\n   excluded from sample metrics.\n"
- title: B.3.  Definition
  contents:
  - "B.3.  Definition\n   The value of Type-P-Reordered is typically false (the packet\
    \ is\n   in-order) when\n   * the sequence number s >= NextExp, AND\n   * the\
    \ fragment offset FragOffset >= NextExpFrag\n   However, it is more efficient\
    \ to define reordered conditions exactly\n   and designate Type-P-Reordered as\
    \ False otherwise.\n   The value of Type-P-Reordered is defined as True (the packet\
    \ is\n   reordered) under the conditions below.  In these cases, the NextExp\n\
    \   value does not change.\n   Case 1: if s < NextExp\n   Case 2: if s < FragSeq#\n\
    \   Case 3: if s>= NextExp AND s = FragSeq# AND FragOffset < NextExpFrag\n   This\
    \ definition can also be illustrated in pseudo-code.  A version of\n   the code\
    \ follows, and some simplification may be possible.\n   Housekeeping for the new\
    \ parameters will be challenging.\n   NextExp=0;\n   NextExpFrag=0;\n   FragSeq#=0;\n\
    \   while(packets arrive with s, MoreFrag, FragOffset)\n   {\n   if (s>=NextExp\
    \ AND MoreFrag==0 AND s>=FragSeq#){\n        /* a normal packet or last frag of\
    \ an in-order packet arrived */\n        NextExp = s+1;\n        FragSeq# = 0;\n\
    \        NextExpFrag = 0;\n        Reordering = False;\n        }\n   if (s>=NextExp\
    \ AND MoreFrag==1 AND s>FragSeq#>=0){\n        /* a fragment of a new packet arrived,\
    \ possibly with a\n        higher sequence number than the current fragmented\
    \ packet */\n        FragSeq# = s;\n        NextExpFrag = FragOffset+1;\n    \
    \    Reordering = False;\n        }\n   if (s>=NextExp AND MoreFrag==1 AND s==FragSeq#){\n\
    \        /* a fragment of the \"current packet s\" arrived */\n        if (FragOffset\
    \ >= NextExpFrag){\n                NextExpFrag = FragOffset+1;\n            \
    \    Reordering = False;\n                }\n        else{\n                Reordering\
    \ = True; /* fragment reordered  */\n                }\n        }\n   if (s>=NextExp\
    \ AND MoreFrag==1 AND s < FragSeq#){\n        /* case where a late fragment arrived,\n\
    \           for illustration only, redundant with else below */\n        Reordering\
    \ = True;\n        }\n   else { /* when s < NextExp, or MoreFrag==0 AND s < FragSeq#\
    \ */\n        Reordering = True;\n        }\n   }\n   A working version of the\
    \ code would include a check to ensure that\n   all fragments of a packet arrive\
    \ before using the Reordered status\n   further, such as in sample metrics.\n"
- title: 'B.4.  Discussion: Notes on Sample Metrics When Evaluating Fragments'
  contents:
  - "B.4.  Discussion: Notes on Sample Metrics When Evaluating Fragments\n   All fragments\
    \ with the same source sequence number are assigned the\n   same source time.\n\
    \   Evaluation with byte stream numbering may be simplified if the\n   fragment\
    \ offset is simply added to the SourceByte of the first packet\n   (with fragment\
    \ offset = 0), keeping the 8 octet units of the offset\n   in mind.\n"
- title: Appendix C.  Disclaimer and License
  contents:
  - "Appendix C.  Disclaimer and License\n   Regarding this entire document or any\
    \ portion of it (including the\n   pseudo-code and C code), the authors make no\
    \ guarantees and are not\n   responsible for any damage resulting from its use.\
    \  The authors grant\n   irrevocable permission to anyone to use, modify, and\
    \ distribute it in\n   any way that does not diminish the rights of anyone else\
    \ to use,\n   modify, and distribute it, provided that redistributed derivative\n\
    \   works do not contain misleading author or version information.\n   Derivative\
    \ works need not be licensed under similar terms.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Al Morton\n   AT&T Labs\n   Room D3 - 3C06\n   200 Laurel\
    \ Ave.  South\n   Middletown, NJ 07748 USA\n   Phone  +1 732 420 1571\n   EMail:\
    \ acmorton@att.com\n   Len Ciavattone\n   AT&T Labs\n   Room A2 - 4G06\n   200\
    \ Laurel Ave.  South\n   Middletown, NJ 07748 USA\n   Phone  +1 732 420 1239\n\
    \   EMail: lencia@att.com\n   Gomathi Ramachandran\n   AT&T Labs\n   Room C4 -\
    \ 3D22\n   200 Laurel Ave.  South\n   Middletown, NJ 07748 USA\n   Phone  +1 732\
    \ 420 2353\n   EMail: gomathi@att.com\n   Stanislav Shalunov\n   Internet2\n \
    \  1000 Oakbrook DR STE 300\n   Ann Arbor, MI 48104\n   Phone: +1 734 995 7060\n\
    \   EMail: shalunov@internet2.edu\n   Jerry Perser\n   Veriwave\n   8770 SW Nimbus\
    \ Ave.\n   Suite B\n   Beaverton, OR 97008 USA\n   Phone: +1 818 338 4112\n  \
    \ EMail: jperser@veriwave.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2006).\n   This document\
    \ is subject to the rights, licenses and restrictions\n   contained in BCP 78,\
    \ and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST,\n   AND THE\
    \ INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES,\n   EXPRESS OR IMPLIED,\
    \ INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT\n   THE USE OF THE INFORMATION\
    \ HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY\n   IMPLIED WARRANTIES OF MERCHANTABILITY\
    \ OR FITNESS FOR A PARTICULAR\n   PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
