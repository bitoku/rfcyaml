- title: __initial_text__
  contents:
  - "       Datagram Transport Layer Security (DTLS) over the Datagram\n         \
    \          Congestion Control Protocol (DCCP)\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document specifies the use of Datagram Transport Layer Security\n\
    \   (DTLS) over the Datagram Congestion Control Protocol (DCCP).  DTLS\n   provides\
    \ communications privacy for applications that use datagram\n   transport protocols\
    \ and allows client/server applications to\n   communicate in a way that is designed\
    \ to prevent eavesdropping and\n   detect tampering or message forgery.  DCCP\
    \ is a transport protocol\n   that provides a congestion-controlled unreliable\
    \ datagram service.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n      3.4. Relationships between DTLS Sessions/Connections\
    \ and DCCP\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document specifies how to carry application payloads\
    \ with\n   Datagram Transport Layer Security (DTLS), as specified in [RFC4347],\n\
    \   in the Datagram Congestion Control Protocol (DCCP), as specified in\n   [RFC4340].\n\
    \   DTLS is an adaptation of Transport Layer Security (TLS, [RFC4346])\n   that\
    \ modifies TLS for use with the unreliable transport protocol UDP.\n   TLS is\
    \ a protocol that allows client/server applications to\n   communicate in a way\
    \ that is designed to prevent eavesdropping and\n   detect tampering and message\
    \ forgery.  DTLS can be viewed as\n   TLS-plus-adaptations-for-unreliability.\n\
    \   DCCP provides an unreliable transport service, similar to UDP, but\n   with\
    \ adaptive congestion control, similar to TCP and Stream Control\n   Transmission\
    \ Protocol (SCTP).  DCCP can be viewed equally well as\n   either UDP-plus-congestion-control\
    \ or TCP-minus-reliability\n   (although, unlike TCP, DCCP offers multiple congestion\
    \ control\n   algorithms).\n   The combination of DTLS and DCCP will offer transport\
    \ security\n   capabilities to applications using DCCP similar to those available\n\
    \   for TCP, UDP, and SCTP.\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and\
    \ \"OPTIONAL\" in this\n   document are to be interpreted as described in [RFC2119].\n"
- title: 3.  DTLS over DCCP
  contents:
  - "3.  DTLS over DCCP\n   The approach here is very straightforward -- DTLS records\
    \ are\n   transmitted in the Application Data fields of DCCP-Data and\n   DCCP-DataAck\
    \ packets (in the rest of the document assume that\n   \"DCCP-Data packet\" means\
    \ \"DCCP-Data or DCCP-DataAck packet\").\n   Multiple DTLS records MAY be sent\
    \ in one DCCP-Data packet, as long as\n   the resulting packet is within the Path\
    \ Maximum Transfer Unit (PMTU)\n   currently in force for normal data packets,\
    \ if fragmentation is not\n   allowed (the Don't Fragment (DF) bit is set for\
    \ IPv4 or no\n   fragmentation extension headers are being used for IPv6), or\
    \ within\n   the current DCCP maximum packet size if fragmentation is allowed\
    \ (see\n   Section 3.5 for more information on PMTU Discovery).  A single DTLS\n\
    \   record MUST be fully contained in a single DCCP-Data packet; it MUST\n   NOT\
    \ be split over multiple packets.\n"
- title: 3.1.  DCCP and DTLS Sequence Numbers
  contents:
  - "3.1.  DCCP and DTLS Sequence Numbers\n   Both DCCP and DTLS use sequence numbers\
    \ in their packets/records.\n   These sequence numbers serve somewhat, but not\
    \ completely,\n   overlapping functions.  Consequently, there is no connection\
    \ between\n   the sequence number of a DCCP packet and the sequence number in\
    \ a\n   DTLS record contained in that packet, and there is no connection\n   between\
    \ sequence number-related features such as DCCP synchronization\n   and DTLS anti-replay\
    \ protection.\n"
- title: 3.2.  DCCP and DTLS Connection Handshakes
  contents:
  - "3.2.  DCCP and DTLS Connection Handshakes\n   Unlike UDP, DCCP is connection-oriented,\
    \ and has a connection\n   handshake procedure that precedes the transmission\
    \ of DCCP-Data and\n   DCCP-DataAck packets.  DTLS is also connection-oriented,\
    \ and has a\n   handshake procedure of its own that must precede the transmission\
    \ of\n   actual application information.  Using the rule of mapping DTLS\n   records\
    \ to DCCP-Data and DCCP-DataAck packets in Section 3, above,\n   the two handshakes\
    \ are forced to happen in series, with the DCCP\n   handshake first, followed\
    \ by the DTLS handshake.  This is how TLS\n   over TCP works.\n   However, the\
    \ DCCP handshake packets DCCP-Request and DCCP-Response\n   have Application Data\
    \ fields and can carry user data during the DCCP\n   handshake, and this creates\
    \ the opportunity to perform the handshakes\n   partially in parallel.  DTLS client\
    \ implementations MAY choose to\n   transmit one or more DTLS records (typically\
    \ containing DTLS\n   handshake messages or parts of them) in the DCCP-Request\
    \ packet.  A\n   DTLS server implementation MAY choose to process these records\
    \ as\n   usual, and if it has one or more DTLS records to send as a response\n\
    \   (typically containing DTLS handshake messages or parts of them), it\n   MAY\
    \ include those records in the DCCP-Response packet.  DTLS servers\n   MAY also\
    \ choose to delay the response until the DCCP handshake\n   completes and then\
    \ send the DTLS response in a DCCP-Data packet.\n   Note that even though the\
    \ DCCP handshake is a reliable process (DCCP\n   handshake messages are retransmitted\
    \ as required if messages are\n   lost), the transfer of Application Data in DCCP-Request\
    \ and\n   DCCP-Response packets is not necessarily reliable.  For example, DCCP\n\
    \   server implementations are free to discard Application Data received\n   in\
    \ DCCP-Request packets.  And if DCCP-Request or DCCP-Response\n   packets need\
    \ to be retransmitted, the DCCP implementation may choose\n   to not include the\
    \ Application Data present in the initial message.\n   Since the DTLS handshake\
    \ is also a reliable process, it will\n   interoperate across the data delivery\
    \ unreliability of DCCP (after\n   all, one of the basic functions of DTLS is\
    \ to work over unreliable\n   transport).  If the DTLS records containing DTLS\
    \ handshake messages\n   are lost, they will be retransmitted by DTLS.\n   This\
    \ is regardless of whether the messages were sent in\n   DCCP-Response/Request\
    \ packets or DCCP-Data packets.  However, the\n   only way for DTLS to retransmit\
    \ DTLS records that were originally\n   transmitted in DCCP-Request/Response packets\
    \ (and they or the\n   responses were lost somehow) is to wait for the DCCP handshake\
    \ to\n   complete and then resend the records in DCCP-Data packets.  This is\n\
    \   due to the characteristic of DCCP that the next opportunity to send\n   data\
    \ after sending data in a DCCP-Request is only after the\n   connection handshake\
    \ completes.\n   DCCP and DTLS use similar strategies for retransmitting handshake\n\
    \   messages.  If there is no response to the original request\n   (DCCP-Request\
    \ or any DTLS handshake message where a response is\n   expected) within normally\
    \ 1 second, the message is retransmitted.\n   The timer is then doubled and the\
    \ process repeated until a response\n   is received, or a maximum time is exceeded.\n\
    \   Therefore, if DTLS records are sent in a DCCP-Request packet, and the\n  \
    \ DCCP-Request or DCCP-Response message is lost, the DCCP and DTLS\n   handshakes\
    \ could be timing out on similar schedules.  The\n   DCCP-Request packets will\
    \ be retransmitted on timeout, but the DTLS\n   records cannot be retransmitted\
    \ until the DCCP handshake completes\n   (there is no possibility of adding new\
    \ Application Data to a\n   DCCP-Request retransmission).  In order to avoid multiple\
    \ DTLS\n   retransmissions queuing up before the first retransmission can be\n\
    \   sent, DTLS over DCCP MUST wait until the completion of the DCCP\n   handshake\
    \ before restarting its DTLS handshake retransmission timer.\n"
- title: 3.3.  Effects of DCCP Congestion Control
  contents:
  - "3.3.  Effects of DCCP Congestion Control\n   Given the large potential sizes\
    \ of the DTLS handshake messages, it is\n   possible that DCCP congestion control\
    \ could throttle the transmission\n   of the DTLS handshake to the point that\
    \ the transfer cannot complete\n   before the DTLS timeout and retransmission\
    \ procedures take effect.\n   Adding retransmitted messages to a congested situation\
    \ might only\n   make matters worse and delay connection establishment.\n   Note\
    \ that a DTLS over UDP application transmitting handshake data\n   into this same\
    \ network situation will not necessarily receive better\n   throughput, and might\
    \ actually see worse effective throughput.\n   Without the pacing of slow-start\
    \ and congestion control, a UDP\n   application might be making congestion worse\
    \ and lowering the\n   effective throughput it receives.\n   As stated in [RFC4347],\
    \ \"mishandling of the [retransmission] timer\n   can lead to serious congestion\
    \ problems\".  This remains as true for\n   DTLS over DCCP as it is for DTLS over\
    \ UDP.\n   DTLS over DCCP implementations SHOULD take steps to avoid\n   retransmitting\
    \ a request that has been queued but not yet actually\n   transmitted by DCCP,\
    \ when the underlying DCCP implementation can\n   provide this information.  For\
    \ example, DTLS could delay starting the\n   retransmission timer until DCCP indicates\
    \ the message has been\n   transferred from DCCP to the IP layer.\n   In addition\
    \ to the retransmission issues, if the throughput needs of\n   the actual application\
    \ data differ from the needs of the DTLS\n   handshake, it is possible that the\
    \ handshake transference could leave\n   the DCCP congestion control in a state\
    \ that is not immediately\n   suitable for the application data that will follow.\
    \  For example,\n   DCCP Congestion Control Identifier (CCID) 2 ([RFC4341]) congestion\n\
    \   control uses an Additive Increase Multiplicative Decrease (AIMD)\n   algorithm\
    \ similar to TCP congestion control.  If it is used, then it\n   is possible that\
    \ transference of a large handshake could cause a\n   multiplicative decrease\
    \ that would not have happened with the\n   application data.  The application\
    \ might then be throttled while\n   waiting for additive increase to return throughput\
    \ to acceptable\n   levels.\n   Applications where this might be a problem should\
    \ consider using DCCP\n   CCID 3 ([RFC4342]).  CCID 3 implements TCP-Friendly\
    \ Rate Control\n   (TFRC, [RFC3448])).  TFRC varies the allowed throughput more\
    \ slowly\n   than AIMD and might avoid the discontinuities possible with CCID\
    \ 2.\n"
- title: 3.4.  Relationships between DTLS Sessions/Connections and DCCP
  contents:
  - "3.4.  Relationships between DTLS Sessions/Connections and DCCP\n      Connections\n\
    \   DTLS uses the concepts of sessions and connections.  A DTLS\n   connection\
    \ is used by upper-layer endpoints to exchange data over a\n   transport protocol.\
    \  DTLS sessions contain cached state information\n   that is used to reduce the\
    \ number of roundtrips and computation\n   required to create multiple DTLS connections\
    \ between the same\n   endpoints.\n   In DTLS over DCCP, a DTLS connection is\
    \ carried by a DCCP connection.\n   Often the DCCP connection establishment is\
    \ immediately followed by\n   DTLS connection establishment (either creating a\
    \ new DTLS session\n   with full handshake, or resuming an existing DTLS session),\
    \ and the\n   DTLS connection termination is immediately followed by DCCP\n  \
    \ connection termination, but this is not the only possibility.\n   The life of\
    \ a DTLS over DCCP connection is completely contained\n   within the life of the\
    \ underlying DCCP connection; a DTLS connection\n   cannot continue if its underlying\
    \ DCCP connection terminates.\n   However, multiple DTLS connections can be resumed\
    \ from the same DTLS\n   session, each running over its own DCCP connection. \
    \ The session\n   resumption features of DTLS are widely used, and this situation\
    \ is\n   likely to occur in many use cases.  It is also possible to resume a\n\
    \   DTLS session with a new DTLS connection running over a different\n   transport.\n\
    \   Note that it is possible for an application to start a DCCP\n   connection\
    \ by transferring unprotected packets, and then switch to\n   DTLS after some\
    \ time.  This is likely to be useful for applications\n   that would like to negotiate\
    \ using DTLS or not and has implications\n   for the choice of DCCP Service Code.\
    \  See Section 3.6 for more\n   information.\n   Many DTLS Application Programming\
    \ Interfaces (APIs) do not prevent an\n   application from sending a mix of encrypted\
    \ and clear packets over\n   the same transport connection.  Applications MUST\
    \ NOT send\n   unprotected data on a DCCP connection while it is also carrying\
    \ a\n   DTLS connection, since this presents a vulnerability to packet\n   insertion\
    \ attacks.\n   Many DTLS APIs also allow an application to start multiple DTLS\n\
    \   connections over one transport connection in series, with the\n   termination\
    \ of one DTLS connection followed by the start of another.\n   Processing a DTLS\
    \ handshake is relatively CPU intensive.  An\n   application that uses this strategy\
    \ is open to an attacker that\n   repeatedly starts and immediately stops sessions.\
    \  Therefore,\n   applications that use this strategy SHOULD limit the potential\
    \ burden\n   on the system by some means.  For example, the application could\n\
    \   enforce a minimum time of 1 second between session initiations.\n"
- title: 3.5.  PMTU Discovery
  contents:
  - "3.5.  PMTU Discovery\n   Each DTLS record must fit within a single DCCP-Data\
    \ packet.  DCCP\n   packets are normally transmitted with the DF (Don't Fragment)\
    \ bit set\n   for IPv4 (or without fragmentation extension headers for IPv6).\n\
    \   Because of this, DCCP performs Path Maximum Transmission Unit (PMTU)\n   Discovery.\n\
    \   DTLS also normally uses the DF bit and performs PMTU Discovery on its\n  \
    \ own, using an algorithm that is strongly similar to the one used by\n   DCCP.\
    \  A DTLS over DCCP implementation MAY use the DCCP-managed value\n   for PMTU\
    \ and not perform PMTU Discovery on its own.  However,\n   implementations that\
    \ choose to use the DCCP-managed PMTU value SHOULD\n   continue to follow the\
    \ procedures of Section 4.1.1.1 of [RFC4347]\n   with regard to fragmenting handshake\
    \ messages during handshake\n   retransmissions.  Alternatively, a DTLS over DCCP\
    \ implementation MAY\n   choose to use its own PMTU Discovery calculations, as\
    \ specified in\n   [RFC4347], but MUST NOT use a value greater than the value\
    \ determined\n   by DCCP.\n   DTLS implementations normally allow applications\
    \ to reset the PMTU\n   estimate back to the initial state.  When that happens,\
    \ DTLS over\n   DCCP implementations SHOULD also reset the DCCP PMTU estimation.\n\
    \   DTLS implementations also sometimes allow applications to control the\n  \
    \ use of the DF bit (when running over IPv4) or the use of\n   fragmentation extension\
    \ headers (when running over IPv6).  DTLS over\n   DCCP implementations SHOULD\
    \ control the use of the DF bit or\n   fragmentation extension headers by DCCP\
    \ in concert with the\n   application's indications, when the DCCP implementation\
    \ supports\n   this.  Note that DCCP implementations are not required to support\n\
    \   sending fragmentable packets.\n   Note that the DCCP Maximum Packet Size (MPS\
    \ in [RFC4340]) is bounded\n   by the current congestion control state (Congestion\
    \ Control Maximum\n   Packet Size, CCMPS in [RFC4340]).  Even when the DF bit\
    \ is not set\n   and DCCP packets may then be fragmented, the MPS may be less\
    \ than the\n   65,535 bytes normally used in UDP.  It is also possible for the\
    \ DCCP\n   CCMPS, and thus the MPS, to vary over time as congestion conditions\n\
    \   change.  DTLS over DCCP implementations MUST NOT use a DTLS record\n   size\
    \ that is greater than the DCCP MPS currently in force.\n"
- title: 3.6.  DCCP Service Codes
  contents:
  - "3.6.  DCCP Service Codes\n   The DCCP connection handshake includes a field called\
    \ Service Code\n   that is intended to describe \"the application-level service\
    \ to which\n   the client application wants to connect\".  Further, \"Service\
    \ Codes\n   are intended to provide information about which application protocol\n\
    \   a connection intends to use, thus aiding middleboxes and reducing\n   reliance\
    \ on globally well-known ports\" [RFC4340].\n   It is expected that many middleboxes\
    \ will give different privileges\n   to applications running DTLS over DCCP versus\
    \ just DCCP.  Therefore,\n   applications that use DTLS over DCCP sometimes and\
    \ just DCCP other\n   times SHOULD register and use different Service Codes for\
    \ each mode\n   of operation.  Applications that use both DCCP and DTLS over DCCP\
    \ MAY\n   choose to listen for incoming connections on the same DCCP port and\n\
    \   distinguish the mode of the request by the offered Service Code.\n   Some\
    \ applications may start out using DCCP without DTLS, and then\n   optionally\
    \ switch to using DTLS over the same connection.  Since\n   there is no way to\
    \ change the Service Code for a connection after it\n   is established, these\
    \ applications will use one Service Code.\n"
- title: 3.7.  New Versions of DTLS
  contents:
  - "3.7.  New Versions of DTLS\n   As DTLS matures, revisions to and updates for\
    \ [RFC4347] can be\n   expected.  DTLS includes mechanisms for identifying the\
    \ version in\n   use, and presumably future versions will either include backward\n\
    \   compatibility modes or at least not allow connections between\n   dissimilar\
    \ versions.  Since DTLS over DCCP simply encapsulates the\n   DTLS records transparently,\
    \ these changes should not affect this\n   document and the methods of this document\
    \ should apply to future\n   versions of DTLS.\n   Therefore, in the absence of\
    \ a revision to this document, this\n   document is assumed to apply to all future\
    \ versions of DTLS.  This\n   document will only be revised if a revision to DTLS\
    \ or DCCP\n   (including its related CCIDs) makes a revision to the encapsulation\n\
    \   necessary.\n   It is RECOMMENDED that an application migrating to a new version\
    \ of\n   DTLS keep the same DCCP Service Code used for the old version and\n \
    \  allow DTLS to provide the version negotiation support.  If a new\n   version\
    \ of DTLS provides significant new capabilities to the\n   application that could\
    \ change the behavior of middleboxes with regard\n   to the application, an application\
    \ developer MAY register a new\n   Service Code.\n"
- title: 4. Security Considerations
  contents:
  - "4. Security Considerations\n   Security considerations for DTLS are specified\
    \ in [RFC4347] and for\n   DCCP in [RFC4340].  The combination of DTLS and DCCP\
    \ introduces no\n   new security considerations.\n"
- title: 5. Acknowledgments
  contents:
  - "5. Acknowledgments\n   The author would like to thank Eric Rescorla for initial\
    \ guidance on\n   adapting DTLS to DCCP, and Gorry Fairhurst, Pasi Eronen, Colin\n\
    \   Perkins, Lars Eggert, Magnus Westerlund, and Tom Petch for comments\n   on\
    \ the document.\n"
- title: 6. References
  contents:
  - '6. References

    '
- title: 6.1.  Normative References
  contents:
  - "6.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [RFC4340]  Kohler, E., Handley, M., and S. Floyd, \"Datagram\n   \
    \           Congestion Control Protocol (DCCP)\", RFC 4340, March 2006.\n   [RFC4346]\
    \  Dierks, T. and E. Rescorla, \"The Transport Layer Security\n              (TLS)\
    \ Protocol Version 1.1\", RFC 4346, April 2006.\n   [RFC4347]  Rescorla, E. and\
    \ N. Modadugu, \"Datagram Transport Layer\n              Security\", RFC 4347,\
    \ April 2006.\n"
- title: 6.2.  Informative References
  contents:
  - "6.2.  Informative References\n   [RFC3448]  Handley, M., Floyd, S., Padhye, J.,\
    \ and J. Widmer, \"TCP\n              Friendly Rate Control (TFRC): Protocol Specification\"\
    , RFC\n              3448, January 2003.\n   [RFC4341]  Floyd, S. and E. Kohler,\
    \ \"Profile for Datagram Congestion\n              Control Protocol (DCCP) Congestion\
    \ Control ID 2: TCP-like\n              Congestion Control\", RFC 4341, March\
    \ 2006.\n   [RFC4342]  Floyd, S., Kohler, E., and J. Padhye, \"Profile for\n \
    \             Datagram Congestion Control Protocol (DCCP) Congestion\n       \
    \       Control ID 3: TCP-Friendly Rate Control (TFRC)\", RFC 4342,\n        \
    \      March 2006.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Tom Phelan\n   Sonus Networks\n   7 Technology Park Dr.\n\
    \   Westford, MA USA 01886\n   Phone: 978-614-8456\n   Email: tphelan@sonusnet.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2008).\n   This document\
    \ is subject to the rights, licenses and restrictions\n   contained in BCP 78,\
    \ and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE\
    \ INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED,\
    \ INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION\
    \ HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY\
    \ OR FITNESS FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
