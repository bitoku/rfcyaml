Abstract This document describes the conventions for using several cryptographic algorithms with the Cryptographic Message Syntax (CMS) to protect the symmetric key package content type.
Specifically, it includes conventions necessary to implement SignedData, EnvelopedData, EncryptedData, and AuthEnvelopedData. 1.
This document describes the conventions for using several cryptographic algorithms with the Cryptographic Message Syntax (CMS) [RFC5652] to protect the symmetric key package content type defined in [RFC6031].
Specifically, it includes conventions necessary to implement the following CMS content types: SignedData [RFC5652], EnvelopedData [RFC5652], EncryptedData [RFC5652], and AuthEnvelopedData
Familiarity with [RFC5083], [RFC5652], [RFC5753], and [RFC6031] is assumed.
This document does not define any new algorithms; instead, it refers to previously defined algorithms.
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in [RFC2119].
If an implementation supports SignedData, then it MUST support the signature scheme RSA [RFC3370] and SHOULD support the signature schemes RSA Probabilistic Signature Scheme (RSASSA PSS)
[RFC4056] and Digital Signature Algorithm (DSA)
Additionally, implementations MUST support the hash function SHA 256
[RFC5754] in concert with these signature schemes, and they SHOULD support the hash function SHA 1
If an implementation supports SignedData, then it MAY support Elliptic Curve Digital Signature Algorithm (ECDSA) [RFC6090][RFC5753].
If an implementation supports EnvelopedData, then it MUST implement key transport, and it MAY implement key agreement.
When key transport is used, RSA encryption [RFC3370] MUST be supported, and RSA Encryption Scheme Optimal Asymmetric Encryption Padding (RSAES OAEP)
When key agreement is used, Diffie Hellman (DH) ephemeral static [RFC3370] MUST be supported.
When key agreement is used, Elliptic Curve Diffie Hellman (ECDH) [RFC6090][RFC5753] MAY be supported.
Regardless of the key management technique choice, implementations MUST support AES 128 Key Wrap with Padding [RFC5649] as the content  encryption algorithm.
Implementations SHOULD support AES 256 Key Wrap with Padding [RFC5649] as the content encryption algorithm.
When key agreement is used, the same key wrap algorithm MUST be used for both key and content encryption.
If the content encryption algorithm is AES 128 Key Wrap with Padding, then the key wrap algorithm MUST be AES 128 Key Wrap with Padding [RFC5649].
If the content encryption algorithm is AES 256 Key Wrap with Padding, then the key wrap algorithm MUST be AES 256 Key Wrap with Padding [RFC5649].
If an implementation supports EncryptedData, then it MUST implement AES 128 Key Wrap with Padding [RFC5649] and SHOULD implement AES 256 Key Wrap with Padding [RFC5649].
EncryptedData requires that keys be managed by other means;
therefore, the only algorithm specified is the content encryption algorithm.
If an implementation supports AuthEnvelopedData, then it MUST implement the EnvelopedData recommendations except for the content  encryption algorithm, which, in this case, MUST be AES GCM [RFC5084]; the 128 bit version MUST be implemented, and the 256 bit version SHOULD be implemented.
Implementations MAY also support AES CCM [RFC5084].
The easiest way to implement SignedData, EnvelopedData, and AuthEnvelopedData is with public key certificates [RFC5280].
If an implementation supports RSA, RSASSA PSS, DSA, RSAES OAEP, or Diffie  Hellman, then it MUST support key lengths from 1024 bit to 2048 bit, inclusive.
If an implementation supports ECDSA or ECDH, then it MUST support keys on P 256.
The security considerations from [RFC3370], [RFC3560], [RFC4056], [RFC5083], [RFC5084], [RFC5649], [RFC5652], [RFC5753], [RFC5754], and [RFC6031] apply.
The choice of content encryption algorithms for this document was based on [RFC5649]: In the design of some high assurance cryptographic modules, it is desirable to segregate cryptographic keying material from other data.
The use of a specific cryptographic mechanism solely for the protection of cryptographic keying material can assist in this goal.
Unfortunately, there is no AES GCM or AES CCM mode that provides the same properties.
If an AES GCM and AES CCM mode that provides the same properties is defined, then this document will be updated to adopt that algorithm.
[SP800 57] provides comparable bits of security for some algorithms and key sizes.
[SP800 57] also provides time frames during which certain numbers of bits of security are appropriate, and some environments may find these time frames useful.
