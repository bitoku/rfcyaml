- title: __initial_text__
  contents:
  - '        EAP Extensions for EAP Re-authentication Protocol (ERP)

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   The Extensible Authentication Protocol (EAP) is a generic framework\n\
    \   supporting multiple types of authentication methods.  In systems\n   where\
    \ EAP is used for authentication, it is desirable to not repeat\n   the entire\
    \ EAP exchange with another authenticator.  This document\n   specifies extensions\
    \ to EAP and the EAP keying hierarchy to support\n   an EAP method-independent\
    \ protocol for efficient re-authentication\n   between the peer and an EAP re-authentication\
    \ server through any\n   authenticator.  The re-authentication server may be in\
    \ the home\n   network or in the local network to which the peer is connecting.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  3\n   2.  Terminology  . . . . . . . . . . . . . . . . . . . .\
    \ . . . . .  4\n   3.  ERP Description  . . . . . . . . . . . . . . . . . . .\
    \ . . . .  5\n     3.1.  ERP With the Home ER Server  . . . . . . . . . . . .\
    \ . . .  6\n     3.2.  ERP with a Local ER Server . . . . . . . . . . . . . .\
    \ . .  8\n   4.  ER Key Hierarchy . . . . . . . . . . . . . . . . . . . . . .\
    \ . 10\n     4.1.  rRK Derivation . . . . . . . . . . . . . . . . . . . . . .\
    \ 11\n     4.2.  rRK Properties . . . . . . . . . . . . . . . . . . . . . . 12\n\
    \     4.3.  rIK Derivation . . . . . . . . . . . . . . . . . . . . . . 12\n  \
    \   4.4.  rIK Properties . . . . . . . . . . . . . . . . . . . . . . 13\n    \
    \ 4.5.  rIK Usage  . . . . . . . . . . . . . . . . . . . . . . . . 13\n     4.6.\
    \  rMSK Derivation  . . . . . . . . . . . . . . . . . . . . . 14\n     4.7.  rMSK\
    \ Properties  . . . . . . . . . . . . . . . . . . . . . 15\n   5.  Protocol Details\
    \ . . . . . . . . . . . . . . . . . . . . . . . 15\n     5.1.  ERP Bootstrapping\
    \  . . . . . . . . . . . . . . . . . . . . 15\n     5.2.  Steps in ERP . . . .\
    \ . . . . . . . . . . . . . . . . . . . 18\n       5.2.1.  Multiple Simultaneous\
    \ Runs of ERP  . . . . . . . . . . 20\n       5.2.2.  ERP Failure Handling . .\
    \ . . . . . . . . . . . . . . . 21\n     5.3.  New EAP Packets  . . . . . . .\
    \ . . . . . . . . . . . . . . 22\n       5.3.1.  EAP-Initiate/Re-auth-Start Packet\
    \  . . . . . . . . . . 23\n       5.3.2.  EAP-Initiate/Re-auth Packet  . . . .\
    \ . . . . . . . . . 25\n       5.3.3.  EAP-Finish/Re-auth Packet  . . . . . .\
    \ . . . . . . . . 26\n       5.3.4.  TV and TLV Attributes  . . . . . . . . .\
    \ . . . . . . . 29\n     5.4.  Replay Protection  . . . . . . . . . . . . . .\
    \ . . . . . . 30\n     5.5.  Channel Binding  . . . . . . . . . . . . . . . .\
    \ . . . . . 30\n   6.  Lower-Layer Considerations . . . . . . . . . . . . . .\
    \ . . . . 31\n   7.  Transport of ERP Messages  . . . . . . . . . . . . . . .\
    \ . . . 32\n   8.  Security Considerations  . . . . . . . . . . . . . . . . .\
    \ . . 33\n   9.  IANA Considerations  . . . . . . . . . . . . . . . . . . . .\
    \ . 37\n   10. Acknowledgments  . . . . . . . . . . . . . . . . . . . . . . .\
    \ 39\n   11. References . . . . . . . . . . . . . . . . . . . . . . . . . . 39\n\
    \     11.1. Normative References . . . . . . . . . . . . . . . . . . . 39\n  \
    \   11.2. Informative References . . . . . . . . . . . . . . . . . . 40\n   Appendix\
    \ A.  Example ERP Exchange  . . . . . . . . . . . . . . . . 42\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The Extensible Authentication Protocol (EAP) is a an authentication\n\
    \   framework that supports multiple authentication methods.  The primary\n  \
    \ purpose is network access authentication, and a key-generating method\n   is\
    \ used when the lower layer wants to enforce access control.  The\n   EAP keying\
    \ hierarchy defines two keys to be derived by all key-\n   generating EAP methods:\
    \ the Master Session Key (MSK) and the Extended\n   MSK (EMSK).  In the most common\
    \ deployment scenario, an EAP peer and\n   an EAP server authenticate each other\
    \ through a third party known as\n   the EAP authenticator.  The EAP authenticator\
    \ or an entity controlled\n   by the EAP authenticator enforces access control.\
    \  After successful\n   authentication, the EAP server transports the MSK to the\
    \ EAP\n   authenticator; the EAP authenticator and the EAP peer establish\n  \
    \ transient session keys (TSKs) using the MSK as the authentication\n   key, key\
    \ derivation key, or a key transport key, and use the TSK for\n   per-packet access\
    \ enforcement.\n   When a peer moves from one authenticator to another, it is\
    \ desirable\n   to avoid a full EAP authentication to support fast handovers.\
    \  The\n   full EAP exchange with another run of the EAP method can take several\n\
    \   round trips and significant time to complete, causing delays in\n   handover\
    \ times.  Some EAP methods specify the use of state from the\n   initial authentication\
    \ to optimize re-authentications by reducing the\n   computational overhead, but\
    \ method-specific re-authentication takes\n   at least 2 round trips with the\
    \ original EAP server in most cases\n   (e.g., [6]).  It is also important to\
    \ note that several methods do\n   not offer support for re-authentication.\n\
    \   Key sharing across authenticators is sometimes used as a practical\n   solution\
    \ to lower handover times.  In that case, compromise of an\n   authenticator results\
    \ in compromise of keying material established\n   via other authenticators. \
    \ Other solutions for fast re-authentication\n   exist in the literature [7] [8].\n\
    \   In conclusion, to achieve low latency handovers, there is a need for\n   a\
    \ method-independent re-authentication protocol that completes in\n   less than\
    \ 2 round trips, preferably with a local server.  The EAP\n   re-authentication\
    \ problem statement is described in detail in [9].\n   This document specifies\
    \ EAP Re-authentication Extensions (ERXs) for\n   efficient re-authentication\
    \ using EAP.  The protocol that uses these\n   extensions itself is referred to\
    \ as the EAP Re-authentication\n   Protocol (ERP).  It supports EAP method-independent\
    \ re-authentication\n   for a peer that has valid, unexpired key material from\
    \ a previously\n   performed EAP authentication.  The protocol and the key hierarchy\n\
    \   required for EAP re-authentication are described in this document.\n   Note\
    \ that to support ERP, lower-layer specifications may need to be\n   revised to\
    \ allow carrying EAP messages that have a code value higher\n   than 4 and to\
    \ accommodate the peer-initiated nature of ERP.\n   Specifically, the IEEE802.1x\
    \ specification must be revised and RFC\n   4306 must be updated to carry ERP\
    \ messages.\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and\
    \ \"OPTIONAL\" in this\n   document are to be interpreted as described in RFC\
    \ 2119 [1].\n   This document uses the basic EAP terminology [2] and EMSK keying\n\
    \   hierarchy terminology [3].  In addition, this document uses the\n   following\
    \ terms:\n      ER Peer - An EAP peer that supports the EAP Re-authentication\n\
    \      Protocol.  All references to \"peer\" in this document imply an ER\n  \
    \    peer, unless specifically noted otherwise.\n      ER Authenticator - An entity\
    \ that supports the authenticator\n      functionality for EAP re-authentication\
    \ described in this\n      document.  All references to \"authenticator\" in this\
    \ document\n      imply an ER authenticator, unless specifically noted otherwise.\n\
    \      ER Server - An entity that performs the server portion of ERP\n      described\
    \ here.  This entity may or may not be an EAP server.  All\n      references to\
    \ \"server\" in this document imply an ER server, unless\n      specifically noted\
    \ otherwise.  An ER server is a logical entity;\n      the home ER server is located\
    \ on the same backend authentication\n      server as the EAP server in the home\
    \ domain.  The local ER server\n      may not necessarily be a full EAP server.\n\
    \      ERX - EAP re-authentication extensions.\n      ERP - EAP Re-authentication\
    \ Protocol that uses the\n      re-authentication extensions.\n      rRK - re-authentication\
    \ Root Key, derived from the EMSK or DSRK.\n      rIK - re-authentication Integrity\
    \ Key, derived from the rRK.\n      rMSK - re-authentication MSK.  This is a per-authenticator\
    \ key,\n      derived from the rRK.\n      keyName-NAI - ERP messages are integrity\
    \ protected with the rIK or\n      the DS-rIK.  The use of rIK or DS-rIK for integrity\
    \ protection of\n      ERP messages is indicated by the EMSKname [3]; the protocol,\
    \ which\n      is ERP; and the realm, which indicates the domain name of the ER\n\
    \      server.  The EMSKname is copied into the username part of the NAI.\n  \
    \    Domain - Refers to a \"key management domain\" as defined in [3].\n     \
    \ For simplicity, it is referred to as \"domain\" in this document.\n      The\
    \ terms \"home domain\" and \"local domain\" are used to\n      differentiate\
    \ between the originating key management domain that\n      performs the full\
    \ EAP exchange with the peer and the local domain\n      to which a peer may be\
    \ attached at a given time.\n"
- title: 3.  ERP Description
  contents:
  - "3.  ERP Description\n   ERP allows a peer and server to mutually verify proof\
    \ of possession\n   of keying material from an earlier EAP method run and to establish\
    \ a\n   security association between the peer and the authenticator.  The\n  \
    \ authenticator acts as a pass-through entity for the Re-authentication\n   Protocol\
    \ in a manner similar to that of an EAP authenticator\n   described in RFC 3748\
    \ [2].  ERP is a single round-trip exchange\n   between the peer and the server;\
    \ it is independent of the lower layer\n   and the EAP method used during the\
    \ full EAP exchange.  The ER server\n   may be in the home domain or in the same\
    \ (visited) domain as the peer\n   and the authenticator.\n   Figure 2 shows the\
    \ protocol exchange.  The first time the peer\n   attaches to any network, it\
    \ performs a full EAP exchange (shown in\n   Figure 1) with the EAP server; as\
    \ a result, an MSK is distributed to\n   the EAP authenticator.  The MSK is then\
    \ used by the authenticator and\n   the peer to establish TSKs as needed.  At\
    \ the time of the initial EAP\n   exchange, the peer and the server also derive\
    \ an EMSK, which is used\n   to derive a re-authentication Root Key (rRK).  More\
    \ precisely, a\n   re-authentication Root Key is derived from the EMSK or from\
    \ a\n   Domain-Specific Root Key (DSRK), which itself is derived from the\n  \
    \ EMSK.  The rRK is only available to the peer and the ER server and is\n   never\
    \ handed out to any other entity.  Further, a re-authentication\n   Integrity\
    \ Key (rIK) is derived from the rRK; the peer and the ER\n   server use the rIK\
    \ to provide proof of possession while performing an\n   ERP exchange.  The rIK\
    \ is also never handed out to any entity and is\n   only available to the peer\
    \ and server.\n   When the ER server is in the home domain, the peer and the server\
    \ use\n   the rIK and rRK derived from the EMSK; and when the ER server is not\n\
    \   in the home domain, they use the DS-rIK and DS-rRK corresponding to\n   the\
    \ local domain.  The domain of the ER server is identified by the\n   realm portion\
    \ of the keyname-NAI in ERP messages.\n"
- title: 3.1.  ERP With the Home ER Server
  contents:
  - "3.1.  ERP With the Home ER Server\n   EAP Peer           EAP Authenticator  \
    \               EAP Server\n   ========           =================          \
    \       ==========\n    <--- EAP-Request/ ------\n            Identity\n    -----\
    \ EAP Response/ --->\n            Identity          ---AAA(EAP Response/Identity)-->\n\
    \    <--- EAP Method ------->  <------ AAA(EAP Method -------->\n           exchange\
    \                    exchange)\n                              <----AAA(MSK, EAP-Success)------\n\
    \    <---EAP-Success---------\n                       Figure 1: EAP Authentication\n\
    \   Peer               Authenticator                      Server\n   ====    \
    \           =============                      ======\n    [<-- EAP-Initiate/\
    \ -----\n        Re-auth-Start]\n    [<-- EAP-Request/ ------\n        Identity]\n\
    \    ---- EAP-Initiate/ ----> ----AAA(EAP-Initiate/ ---------->\n          Re-auth/\
    \                  Re-auth/\n         [Bootstrap]              [Bootstrap])\n\
    \    <--- EAP-Finish/ ------> <---AAA(rMSK,EAP-Finish/---------\n          Re-auth/\
    \                   Re-auth/\n        [Bootstrap]                [Bootstrap])\n\
    \   Note: [] brackets indicate optionality.\n                          Figure\
    \ 2: ERP Exchange\n   Two new EAP codes, EAP-Initiate and EAP-Finish, are specified\
    \ in this\n   document for the purpose of EAP re-authentication.  When the peer\n\
    \   identifies a target authenticator that supports EAP\n   re-authentication,\
    \ it performs an ERP exchange, as shown in Figure 2;\n   the exchange itself may\
    \ happen when the peer attaches to a new\n   authenticator supporting EAP re-authentication,\
    \ or prior to\n   attachment.  The peer initiates ERP by itself; it may also do\
    \ so in\n   response to an EAP-Initiate/Re-auth-Start message from the new\n \
    \  authenticator.  The EAP-Initiate/Re-auth-Start message allows the\n   authenticator\
    \ to trigger the ERP exchange.\n   It is plausible that the authenticator does\
    \ not know whether the peer\n   supports ERP and whether the peer has performed\
    \ a full EAP\n   authentication through another authenticator.  The authenticator\
    \ MAY\n   initiate the ERP exchange by sending the EAP-Initiate/Re-auth-Start\n\
    \   message, and if there is no response, it will send the EAP-Request/\n   Identity\
    \ message.  Note that this avoids having two EAP messages in\n   flight at the\
    \ same time [2].  The authenticator may send the EAP-\n   Initiate/Re-auth-Start\
    \ message and wait for a short, locally\n   configured amount of time.  If the\
    \ peer does not already know, this\n   message indicates to the peer that the\
    \ authenticator supports ERP.\n   In response to this trigger from the authenticator,\
    \ the peer can\n   initiate the ERP exchange by sending an EAP-Initiate/Re-auth\
    \ message.\n   If there is no response from the peer after the necessary\n   retransmissions\
    \ (see Section 6), the authenticator MUST initiate EAP\n   by sending an EAP-Request\
    \ message, typically the EAP-Request/Identity\n   message.  Note that the authenticator\
    \ may receive an EAP-Initiate/\n   Re-auth message after it has sent an EAP-Request/Identity\
    \ message.\n   If the authenticator supports ERP, it MUST proceed with the ERP\n\
    \   exchange.  When the EAP-Request/Identity times out, the authenticator\n  \
    \ MUST NOT close the connection if an ERP exchange is in progress or\n   has already\
    \ succeeded in establishing a re-authentication MSK.\n   If the authenticator\
    \ does not support ERP, it drops EAP-Initiate/\n   Re-auth messages [2] as the\
    \ EAP code of those packets is greater than\n   4.  An ERP-capable peer will exhaust\
    \ the EAP-Initiate/Re-auth message\n   retransmissions and fall back to EAP authentication\
    \ by responding to\n   EAP Request/Identity messages from the authenticator. \
    \ If the peer\n   does not support ERP or if it does not have unexpired key material\n\
    \   from a previous EAP authentication, it drops EAP-Initiate/\n   Re-auth-Start\
    \ messages.  If there is no response to the EAP-Initiate/\n   Re-auth-Start message,\
    \ the authenticator SHALL send an EAP Request\n   message (typically EAP Request/Identity)\
    \ to start EAP authentication.\n   From this stage onwards, RFC 3748 rules apply.\
    \  Note that this may\n   introduce some delay in starting EAP.  In some lower\
    \ layers, the\n   delay can be minimized or even avoided by the peer initiating\
    \ EAP by\n   sending messages such as EAPoL-Start in the IEEE 802.1X specification\n\
    \   [10].\n   The peer sends an EAP-Initiate/Re-auth message that contains the\n\
    \   keyName-NAI to identify the ER server's domain and the rIK used to\n   protect\
    \ the message, and a sequence number for replay protection.\n   The EAP-Initiate/Re-auth\
    \ message is integrity protected with the rIK.\n   The authenticator uses the\
    \ realm in the keyName-NAI [4] field to send\n   the message to the appropriate\
    \ ER server.  The server uses the\n   keyName to look up the rIK.  The server,\
    \ after verifying proof of\n   possession of the rIK, and freshness of the message,\
    \ derives a\n   re-authentication MSK (rMSK) from the rRK using the sequence number\n\
    \   as an input to the key derivation.  The server updates the expected\n   sequence\
    \ number to the received sequence number plus one.\n   In response to the EAP-Initiate/Re-auth\
    \ message, the server sends an\n   EAP-Finish/Re-auth message; this message is\
    \ integrity protected with\n   the rIK.  The server transports the rMSK along\
    \ with this message to\n   the authenticator.  The rMSK is transported in a manner\
    \ similar to\n   that of the MSK along with the EAP-Success message in a full\
    \ EAP\n   exchange.  Ongoing work in [11] describes an additional key\n   distribution\
    \ protocol that can be used to transport the rRK from an\n   EAP server to one\
    \ of many different ER servers that share a trust\n   relationship with the EAP\
    \ server.\n   The peer MAY request the server for the rMSK lifetime.  If so, the\
    \ ER\n   server sends the rMSK lifetime in the EAP-Finish/Re-auth message.\n \
    \  In an ERP bootstrap exchange, the peer MAY request the server for the\n   rRK\
    \ lifetime.  If so, the ER server sends the rRK lifetime in the\n   EAP-Finish/Re-auth\
    \ message.\n   The peer verifies the replay protection and the integrity of the\n\
    \   message.  It then uses the sequence number in the EAP-Finish/Re-auth\n   message\
    \ to compute the rMSK.  The lower-layer security association\n   protocol is ready\
    \ to be triggered after this point.\n"
- title: 3.2.  ERP with a Local ER Server
  contents:
  - "3.2.  ERP with a Local ER Server\n   The defined ER extensions allow executing\
    \ the ERP with an ER server\n   in the local domain (access network).  The local\
    \ ER server may be co-\n   located with a local AAA server.  The peer may learn\
    \ about the\n   presence of a local ER server in the network and the local domain\n\
    \   name (or ER server name) either via the lower layer or by means of\n   ERP\
    \ bootstrapping.  The peer uses the domain name and the EMSK to\n   compute the\
    \ DSRK and from that key, the DS-rRK; the peer also uses\n   the domain name in\
    \ the realm portion of the keyName-NAI for using ERP\n   in the local domain.\
    \  Figure 3 shows the full EAP and subsequent\n   local ERP exchange; Figure 4\
    \ shows it with a local ER server.\n   Peer        EAP Authenticator     Local\
    \ ER Server     Home EAP Server\n   ====        =================     ===============\
    \     ===============\n   <-- EAP-Request/ --\n        Identity\n   -- EAP Response/-->\n\
    \        Identity      --AAA(EAP Response/-->\n                            Identity)\
    \       --AAA(EAP Response/ -->\n                                            \
    \          Identity,\n                                                [DSRK Request,\n\
    \                                              domain name])\n   <------------------------\
    \ EAP Method exchange------------------>\n                                   \
    \         <---AAA(MSK, DSRK, ----\n                                          \
    \         EMSKname,\n                                                 EAP-Success)\n\
    \                       <---  AAA(MSK,  -----\n                            EAP-Success)\n\
    \   <---EAP-Success-----\n            Figure 3: Local ERP Exchange, Initial EAP\
    \ Exchange\n   Peer                ER Authenticator            Local ER Server\n\
    \   ====                ================            ===============\n   [<-- EAP-Initiate/\
    \ --------\n        Re-auth-Start]\n   [<-- EAP-Request/ ---------\n        Identity]\n\
    \    ---- EAP-Initiate/ -------> ----AAA(EAP-Initiate/ -------->\n          Re-auth\
    \                        Re-auth)\n    <--- EAP-Finish/ ---------- <---AAA(rMSK,EAP-Finish/-------\n\
    \          Re-auth                        Re-auth)\n                       Figure\
    \ 4: Local ERP Exchange\n   As shown in Figure 4, the local ER server may be present\
    \ in the path\n   of the full EAP exchange (e.g., this may be one of the AAA entities,\n\
    \   such as AAA proxies, in the path between the authenticator and the\n   home\
    \ EAP server of the peer).  In that case, the ER server requests\n   the DSRK\
    \ by sending the domain name to the EAP server.  In response,\n   the EAP server\
    \ computes the DSRK by following the procedure specified\n   in [3] and sends\
    \ the DSRK and the key name, EMSKname, to the ER\n   server in the claimed domain.\
    \  The local domain is responsible for\n   announcing that same domain name via\
    \ the lower layer to the peer.\n   If the peer does not know the domain name (did\
    \ not receive the domain\n   name via the lower-layer announcement, due to a missed\
    \ announcement\n   or lack of support for domain name announcements in a specific\
    \ lower\n   layer), it SHOULD initiate ERP bootstrap exchange with the home ER\n\
    \   server to obtain the domain name.  The local ER server SHALL request\n   the\
    \ home AAA server for the DSRK by sending the domain name in the\n   AAA message\
    \ that carries the EAP-Initiate/Re-auth bootstrap message.\n   The local ER server\
    \ MUST be in the path from the peer to the home ER\n   server.  If it is not,\
    \ it cannot request the DSRK.\n   After receiving the DSRK and the EMSKname, the\
    \ local ER server\n   computes the DS-rRK and the DS-rIK from the DSRK as defined\
    \ in\n   Sections 4.1 and 4.3 below.  After receiving the domain name, the\n \
    \  peer also derives the DSRK, the DS-rRK, and the DS-rIK.  These keys\n   are\
    \ referred to by a keyName-NAI formed as follows: the username part\n   of the\
    \ NAI is the EMSKname, the realm portion of the NAI is the\n   domain name.  Both\
    \ parties also maintain a sequence number\n   (initialized to zero) corresponding\
    \ to the specific keyName-NAI.\n   Subsequently, when the peer attaches to an\
    \ authenticator within the\n   local domain, it may perform an ERP exchange with\
    \ the local ER server\n   to obtain an rMSK for the new authenticator.\n"
- title: 4.  ER Key Hierarchy
  contents:
  - "4.  ER Key Hierarchy\n   Each time the peer re-authenticates to the network,\
    \ the peer and the\n   authenticator establish an rMSK.  The rMSK serves the same\
    \ purposes\n   that an MSK, which is the result of full EAP authentication, serves.\n\
    \   To prove possession of the rRK, we specify the derivation of another\n   key,\
    \ the rIK.  These keys are derived from the rRK.  Together they\n   constitute\
    \ the ER key hierarchy.\n   The rRK is derived from either the EMSK or a DSRK\
    \ as specified in\n   Section 4.1.  For the purpose of rRK derivation, this document\n\
    \   specifies derivation of a Usage-Specific Root Key (USRK) or a Domain-\n  \
    \ Specific USRK (DSUSRK) in accordance with [3] for re-authentication.\n   The\
    \ USRK designated for re-authentication is the re-authentication\n   root key\
    \ (rRK).  A DSUSRK designated for re-authentication is the DS-\n   rRK available\
    \ to a local ER server in a particular domain.  For\n   simplicity, the keys are\
    \ referred to without the DS label in the rest\n   of the document.  However,\
    \ the scope of the various keys is limited\n   to just the respective domains\
    \ they are derived for, in the case of\n   the domain specific keys.  Based on\
    \ the ER server with which the peer\n   performs the ERP exchange, it knows the\
    \ corresponding keys that must\n   be used.\n   The rRK is used to derive an rIK,\
    \ and rMSKs for one or more\n   authenticators.  The figure below shows the key\
    \ hierarchy with the\n   rRK, rIK, and rMSKs.\n                            rRK\n\
    \                             |\n                    +--------+--------+\n   \
    \                 |        |        |\n                   rIK     rMSK1 ...rMSKn\n\
    \                 Figure 5: Re-authentication Key Hierarchy\n   The derivations\
    \ in this document are according to [3].  Key\n   derivations and field encodings,\
    \ where unspecified, default to that\n   document.\n"
- title: 4.1.  rRK Derivation
  contents:
  - "4.1.  rRK Derivation\n   The rRK may be derived from the EMSK or DSRK.  This\
    \ section provides\n   the relevant key derivations for that purpose.\n   The\
    \ rRK is derived as specified in [3].\n   rRK = KDF (K, S), where\n      K = EMSK\
    \ or K = DSRK and\n      S = rRK Label | \"\\0\" | length\n   The rRK Label is\
    \ an IANA-assigned 8-bit ASCII string:\n      EAP Re-authentication Root Key@ietf.org\n\
    \   assigned from the \"USRK key labels\" name space in accordance with\n   [3].\n\
    \   The KDF and algorithm agility for the KDF are as defined in [3].\n   An rRK\
    \ derived from the DSRK is referred to as a DS-rRK in the rest\n   of the document.\
    \  All the key derivation and properties specified in\n   this section remain\
    \ the same.\n"
- title: 4.2.  rRK Properties
  contents:
  - "4.2.  rRK Properties\n   The rRK has the following properties.  These properties\
    \ apply to the\n   rRK regardless of the parent key used to derive it.\n   o \
    \ The length of the rRK MUST be equal to the length of the parent\n      key used\
    \ to derive it.\n   o  The rRK is to be used only as a root key for re-authentication\
    \ and\n      never used to directly protect any data.\n   o  The rRK is only used\
    \ for derivation of rIK and rMSK as specified\n      in this document.\n   o \
    \ The rRK MUST remain on the peer and the server that derived it and\n      MUST\
    \ NOT be transported to any other entity.\n   o  The lifetime of the rRK is never\
    \ greater than that of its parent\n      key.  The rRK is expired when the parent\
    \ key expires and MUST be\n      removed from use at that time.\n"
- title: 4.3.  rIK Derivation
  contents:
  - "4.3.  rIK Derivation\n   The re-authentication Integrity Key (rIK) is used for\
    \ integrity\n   protecting the ERP exchange.  This serves as the proof of possession\n\
    \   of valid keying material from a previous full EAP exchange by the\n   peer\
    \ to the server.\n   The rIK is derived as follows.\n   rIK = KDF (K, S), where\n\
    \      K = rRK and\n      S = rIK Label | \"\\0\" | cryptosuite | length\n   The\
    \ rIK Label is the 8-bit ASCII string:\n      Re-authentication Integrity Key@ietf.org\n\
    \   The length field refers to the length of the rIK in octets encoded as\n  \
    \ specified in [3].\n   The cryptosuite and length of the rIK are part of the\
    \ input to the\n   key derivation function to ensure cryptographic separation\
    \ of keys if\n   different rIKs of different lengths for use with different Message\n\
    \   Authentication Code (MAC) algorithms are derived from the same rRK.\n   The\
    \ cryptosuite is encoded as an 8-bit number; see Section 5.3.2 for\n   the cryptosuite\
    \ specification.\n   The rIK is referred to by EMSKname-NAI within the context\
    \ of ERP\n   messages.  The username part of EMSKname-NAI is the EMSKname; the\n\
    \   realm is the domain name of the ER server.  In case of ERP with the\n   home\
    \ ER server, the peer uses the realm from its original NAI; in\n   case of a local\
    \ ER server, the peer uses the domain name received at\n   the lower layer or\
    \ through an ERP bootstrapping exchange.\n   An rIK derived from a DS-rRK is referred\
    \ to as a DS-rIK in the rest\n   of the document.  All the key derivation and\
    \ properties specified in\n   this section remain the same.\n"
- title: 4.4.  rIK Properties
  contents:
  - "4.4.  rIK Properties\n   The rIK has the following properties.\n   o  The length\
    \ of the rIK MUST be equal to the length of the rRK.\n   o  The rIK is only used\
    \ for authentication of the ERP exchange as\n      specified in this document.\n\
    \   o  The rIK MUST NOT be used to derive any other keys.\n   o  The rIK must\
    \ remain on the peer and the server and MUST NOT be\n      transported to any\
    \ other entity.\n   o  The rIK is cryptographically separate from any other keys\
    \ derived\n      from the rRK.\n   o  The lifetime of the rIK is never greater\
    \ than that of its parent\n      key.  The rIK MUST be expired when the EMSK expires\
    \ and MUST be\n      removed from use at that time.\n"
- title: 4.5.  rIK Usage
  contents:
  - "4.5.  rIK Usage\n   The rIK is the key whose possession is demonstrated by the\
    \ peer and\n   the ERP server to the other party.  The peer demonstrates possession\n\
    \   of the rIK by computing the integrity checksum over the EAP-Initiate/\n  \
    \ Re-auth message.  When the peer uses the rIK for the first time, it\n   can\
    \ choose the integrity algorithm to use with the rIK.  The peer and\n   the server\
    \ MUST use the same integrity algorithm with a given rIK for\n   all ERP messages\
    \ protected with that key.  The peer and the server\n   store the algorithm information\
    \ after the first use, and they employ\n   the same algorithm for all subsequent\
    \ uses of that rIK.\n   If the server's policy does not allow the use of the cryptosuite\n\
    \   selected by the peer, the server SHALL reject the EAP-Initiate/\n   Re-auth\
    \ message and SHOULD send a list of acceptable cryptosuites in\n   the EAP-Finish/Re-auth\
    \ message.\n   The rIK length may be different from the key length required by\
    \ an\n   integrity algorithm.  In case of hash-based MAC algorithms, the key\n\
    \   is first hashed to the required key length as specified in [5].  In\n   case\
    \ of cipher-based MAC algorithms, if the required key length is\n   less than\
    \ 32 octets, the rIK is hashed using HMAC-SHA256 and the\n   first k octets of\
    \ the output are used, where k is the key length\n   required by the algorithm.\
    \  If the required key length is more than\n   32 octets, the first k octets of\
    \ the rIK are used by the cipher-based\n   MAC algorithm.\n"
- title: 4.6.  rMSK Derivation
  contents:
  - "4.6.  rMSK Derivation\n   The rMSK is derived at the peer and server and delivered\
    \ to the\n   authenticator.  The rMSK is derived following an EAP Re-auth Protocol\n\
    \   exchange.\n   The rMSK is derived as follows.\n   rMSK = KDF (K, S), where\n\
    \      K = rRK and\n      S = rMSK label | \"\\0\" | SEQ | length\n   The rMSK\
    \ label is the 8-bit ASCII string:\n      Re-authentication Master Session Key@ietf.org\n\
    \   The length field refers to the length of the rMSK in octets.  The\n   length\
    \ field is encoded as specified in [3].\n   SEQ is the sequence number sent by\
    \ the peer in the EAP-Initiate/\n   Re-auth message.  This field is encoded as\
    \ a 16-bit number in network\n   byte order (see Section 5.3.2).\n   An rMSK derived\
    \ from a DS-rRK is referred to as a DS-rIK in the rest\n   of the document.  All\
    \ the key derivation and properties specified in\n   this section remain the same.\n"
- title: 4.7.  rMSK Properties
  contents:
  - "4.7.  rMSK Properties\n   The rMSK has the following properties:\n   o  The length\
    \ of the rMSK MUST be equal to the length of the rRK.\n   o  The rMSK is delivered\
    \ to the authenticator and is used for the\n      same purposes that an MSK is\
    \ used at an authenticator.\n   o  The rMSK is cryptographically separate from\
    \ any other keys derived\n      from the rRK.\n   o  The lifetime of the rMSK\
    \ is less than or equal to that of the rRK.\n      It MUST NOT be greater than\
    \ the lifetime of the rRK.\n   o  If a new rRK is derived, subsequent rMSKs MUST\
    \ be derived from the\n      new rRK.  Previously delivered rMSKs MAY still be\
    \ used until the\n      expiry of the lifetime.\n   o  A given rMSK MUST NOT be\
    \ shared by multiple authenticators.\n"
- title: 5.  Protocol Details
  contents:
  - '5.  Protocol Details

    '
- title: 5.1.  ERP Bootstrapping
  contents:
  - "5.1.  ERP Bootstrapping\n   We identify two types of bootstrapping for ERP: explicit\
    \ and implicit\n   bootstrapping.  In implicit bootstrapping, the local ER server\
    \ SHOULD\n   include its domain name and SHOULD request the DSRK from the home\
    \ AAA\n   server during the initial EAP exchange, in the AAA message\n   encapsulating\
    \ the first EAP Response message sent by the peer.  If\n   the EAP exchange is\
    \ successful, the server sends the DSRK for the\n   local ER server (derived using\
    \ the EMSK and the domain name as\n   specified in [3]), EMSKname, and DSRK lifetime\
    \ along with the EAP-\n   Success message.  The local ER server MUST extract the\
    \ DSRK,\n   EMSKname, and DSRK lifetime (if present) before forwarding the EAP-\n\
    \   Success message to the peer, as specified in [12].  Note that the MSK\n  \
    \ (also present along with the EAP Success message) is extracted by the\n   EAP\
    \ authenticator as usual.  The peer learns the domain name through\n   the EAP-Initiate/Re-auth-Start\
    \ message or via lower-layer\n   announcements.  When the domain name is available\
    \ to the peer during\n   or after the full EAP authentication, it attempts to\
    \ use ERP when it\n   associates with a new authenticator.\n   If the peer does\
    \ not know the domain name (did not receive the domain\n   name via the lower-layer\
    \ announcement, due to a missed announcement\n   or lack of support for domain\
    \ name announcements in a specific lower\n   layer), it SHOULD initiate ERP bootstrap\
    \ exchange (ERP exchange with\n   the bootstrap flag turned on) with the home\
    \ ER server to obtain the\n   domain name.  The local ER server behavior is the\
    \ same as described\n   above.  The peer MAY also initiate bootstrapping to fetch\
    \ information\n   such as the rRK lifetime from the AAA server.\n   The following\
    \ steps describe the ERP explicit bootstrapping process:\n   o  The peer sends\
    \ the EAP-Initiate/Re-auth message with the\n      bootstrapping flag turned on.\
    \  The bootstrap message is always\n      sent to the home AAA server, and the\
    \ keyname-NAI attribute in the\n      bootstrap message is constructed as follows:\
    \ the username portion\n      of the NAI contains the EMSKname, and the realm\
    \ portion contains\n      the home domain name.\n   o  In addition, the message\
    \ MUST contain a sequence number for replay\n      protection, a cryptosuite,\
    \ and an integrity checksum.  The\n      cryptosuite indicates the authentication\
    \ algorithm.  The integrity\n      checksum indicates that the message originated\
    \ at the claimed\n      entity, the peer indicated by the Peer-ID, or the rIKname.\n\
    \   o  The peer MAY additionally set the lifetime flag to request the key\n  \
    \    lifetimes.\n   o  When an ERP-capable authenticator receives the EAP-Initiate/\n\
    \      Re-auth message from a peer, it copies the contents of the\n      keyName-NAI\
    \ into the User-Name attribute of RADIUS [13].  The rest\n      of the process\
    \ is similar to that described in [14] and [12].\n   o  If a local ER server is\
    \ present, the local ER server MUST include\n      the DSRK request and its domain\
    \ name in the AAA message\n      encapsulating the EAP-Initiate/Re-auth message\
    \ sent by the peer.\n   o  Upon receipt of an EAP-Initiate/Re-auth message, the\
    \ server\n      verifies whether the message is fresh or is a replay by evaluating\n\
    \      whether the received sequence number is equal to or greater than\n    \
    \  the expected sequence number for that rIK.  The server then\n      verifies\
    \ to ensure that the cryptosuite used by the peer is\n      acceptable.  Next,\
    \ it verifies the origin authentication of the\n      message by looking up the\
    \ rIK.  If any of the checks fail, the\n      server sends an EAP-Finish/Re-auth\
    \ message with the Result flag\n      set to '1'.  Please refer to Section 5.2.2\
    \ for details on failure\n      handling.  This error MUST NOT have any correlation\
    \ to any EAP-\n      Success message that may have been received by the EAP\n\
    \      authenticator and the peer earlier.  If the EAP-Initiate/Re-auth\n    \
    \  message is well-formed and valid, the server prepares the EAP-\n      Finish/Re-auth\
    \ message.  The bootstrap flag MUST be set to\n      indicate that this is a bootstrapping\
    \ exchange.  The message\n      contains the following fields:\n      *  A sequence\
    \ number for replay protection.\n      *  The same keyName-NAI as in the EAP-Initiate/Re-auth\
    \ message.\n      *  If the lifetime flag was set in the EAP-Initiate/Re-auth\n\
    \         message, the ER server SHOULD include the rRK lifetime and the\n   \
    \      rMSK lifetime in the EAP-Finish/Re-auth message.  The server\n        \
    \ may have a local policy for the network to maintain and enforce\n         lifetime\
    \ unilaterally.  In such cases, the server need not\n         respond to the peer's\
    \ request for the lifetime.\n      *  If the bootstrap flag is set and a DSRK\
    \ request is received,\n         the server MUST include the domain name to which\
    \ the DSRK is\n         being sent.\n      *  If the home ER server verifies the\
    \ authorization of a local\n         domain server, it MAY include the Authorization\
    \ Indication TLV\n         to indicate to the peer that the server (that received\
    \ the DSRK\n         and that is advertising the domain included in the domain\
    \ name\n         TLV) is authorized.\n      *  An authentication tag MUST be included\
    \ to prove that the EAP-\n         Finish/Re-auth message originates at a server\
    \ that possesses\n         the rIK corresponding to the EMSKname-NAI.\n   o  If\
    \ the ERP exchange is successful, and the local ER server sent a\n      DSRK request,\
    \ the home ER server MUST include the DSRK for the\n      local ER server (derived\
    \ using the EMSK and the domain name as\n      specified in [3]), EMSKname, and\
    \ DSRK lifetime along with the EAP-\n      Finish/Re-auth message.\n   o  In addition,\
    \ the rMSK is sent along with the EAP-Finish/Re-auth\n      message, in a AAA\
    \ attribute [12].\n   o  The local ER server MUST extract the DSRK, EMSKname,\
    \ and DSRK\n      lifetime (if present), before forwarding the EAP-Finish/Re-auth\n\
    \      message to the peer, as specified in [12].\n   o  The authenticator receives\
    \ the rMSK.\n   o  When the peer receives an EAP-Finish/Re-auth message with the\n\
    \      bootstrap flag set, if a local domain name is present, it MUST use\n  \
    \    that to derive the appropriate DSRK, DS-rRK, DS-rIK, and keyName-\n     \
    \ NAI, and initialize the replay counter for the DS-rIK.  If not,\n      the peer\
    \ SHOULD derive the domain-specific keys using the domain\n      name it learned\
    \ via the lower layer or from the EAP-Initiate/\n      Re-auth-Start message.\
    \  If the peer does not know the domain name,\n      it must assume that there\
    \ is no local ER server available.\n   o  The peer MAY also verify the Authorization\
    \ Indication TLV.\n   o  The procedures for encapsulating the ERP and obtaining\
    \ relevant\n      keys using RADIUS and Diameter are specified in [12] and [15],\n\
    \      respectively.\n   Since the ER bootstrapping exchange is typically done\
    \ immediately\n   following the full EAP exchange, it is feasible that the process\
    \ is\n   completed through the same entity that served as the EAP\n   authenticator\
    \ for the full EAP exchange.  In this case, the lower\n   layer may already have\
    \ established TSKs based on the MSK received\n   earlier.  The lower layer may\
    \ then choose to ignore the rMSK that was\n   received with the ER bootstrapping\
    \ exchange.  Alternatively, the\n   lower layer may choose to establish a new\
    \ TSK using the rMSK.  In\n   either case, the authenticator and the peer know\
    \ which key is used\n   based on whether or not a TSK establishment exchange is\
    \ initiated.\n   The bootstrapping exchange may also be carried out via a new\n\
    \   authenticator, in which case, the rMSK received SHOULD trigger a\n   lower\
    \ layer TSK establishment exchange.\n"
- title: 5.2.  Steps in ERP
  contents:
  - "5.2.  Steps in ERP\n   When a peer that has an active rRK and rIK associates\
    \ with a new\n   authenticator that supports ERP, it may perform an ERP exchange\
    \ with\n   that authenticator.  ERP is typically a peer-initiated exchange,\n\
    \   consisting of an EAP-Initiate/Re-auth and an EAP-Finish/Re-auth\n   message.\
    \  The ERP exchange may be performed with a local ER server\n   (when one is present)\
    \ or with the original EAP server.\n   It is plausible for the network to trigger\
    \ the EAP re-authentication\n   process, however.  An ERP-capable authenticator\
    \ SHOULD send an EAP-\n   Initiate/Re-auth-Start message to indicate support for\
    \ ERP.  The peer\n   may or may not wait for these messages to arrive to initiate\
    \ the EAP-\n   Initiate/Re-auth message.\n   The EAP-Initiate/Re-auth-Start message\
    \ SHOULD be sent by an ERP-\n   capable authenticator.  The authenticator may\
    \ retransmit it a few\n   times until it receives an EAP-Initiate/Re-auth message\
    \ in response\n   from the peer.  The EAP-Initiate/Re-auth message from the peer\
    \ may\n   have originated before the peer receives either an EAP-Request/\n  \
    \ Identity or an EAP-Initiate/Re-auth-Start message from the\n   authenticator.\
    \  Hence, the Identifier value in the EAP-Initiate/\n   Re-auth message is independent\
    \ of the Identifier value in the EAP-\n   Initiate/Re-auth-Start or the EAP-Request/Identity\
    \ messages.\n   Operational Considerations at the Peer:\n   ERP requires that\
    \ the peer maintain retransmission timers for\n   reliable transport of EAP re-authentication\
    \ messages.  The\n   reliability considerations of Section 4.3 of RFC 3748 apply\
    \ with the\n   peer as the retransmitting entity.\n   The EAP Re-auth Protocol\
    \ has the following steps:\n      The peer sends an EAP-Initiate/Re-auth message.\
    \  At a minimum, the\n      message SHALL include the following fields:\n    \
    \     a 16-bit sequence number for replay protection\n         keyName-NAI as\
    \ a TLV attribute to identify the rIK used to\n         integrity protect the\
    \ message.\n         cryptosuite to indicate the authentication algorithm used\
    \ to\n         compute the integrity checksum.\n         authentication tag over\
    \ the message.\n      When the peer is performing ERP with a local ER server,\
    \ it MUST\n      use the corresponding DS-rIK it shares with the local ER server.\n\
    \      The peer SHOULD set the lifetime flag to request the key lifetimes\n  \
    \    from the server.  The peer can use the rRK lifetime to know when\n      to\
    \ trigger an EAP method exchange and the rMSK lifetime to know\n      when to\
    \ trigger another ERP exchange.\n      The authenticator copies the contents of\
    \ the value field of the\n      keyName-NAI TLV into the User-Name RADIUS attribute\
    \ in the AAA\n      message to the ER server.\n      The server uses the keyName-NAI\
    \ to look up the rIK.  It MUST first\n      verify whether the sequence number\
    \ is equal to or greater than the\n      expected sequence number.  If the server\
    \ supports a sequence\n      number window size greater than 1, it MUST verify\
    \ whether the\n      sequence number falls within the window and has not been\
    \ received\n      before.  The server MUST then verify to ensure that the\n  \
    \    cryptosuite used by the peer is acceptable.  The server then\n      proceeds\
    \ to verify the integrity of the message using the rIK,\n      thereby verifying\
    \ proof of possession of that key by the peer.  If\n      any of these verifications\
    \ fail, the server MUST send an EAP-\n      Finish/Re-auth message with the Result\
    \ flag set to '1' (Failure).\n      Please refer to Section 5.2.2 for details\
    \ on failure handling.\n      Otherwise, it MUST compute an rMSK from the rRK\
    \ using the sequence\n      number as the additional input to the key derivation.\n\
    \      In response to a well-formed EAP Re-auth/Initiate message, the\n      server\
    \ MUST send an EAP-Finish/Re-auth message with the following\n      considerations:\n\
    \         a 16-bit sequence number for replay protection, which MUST be\n    \
    \     the same as the received sequence number.  The local copy of\n         the\
    \ sequence number MUST be incremented by 1.  If the server\n         supports\
    \ multiple simultaneous ERP exchanges, it MUST instead\n         update the sequence\
    \ number window.\n         keyName-NAI as a TLV attribute to identify the rIK\
    \ used to\n         integrity protect the message.\n         cryptosuite to indicate\
    \ the authentication algorithm used to\n         compute the integrity checksum.\n\
    \         authentication tag over the message.\n         If the lifetime flag\
    \ was set in the EAP-Initiate/Re-auth\n         message, the ER server SHOULD\
    \ include the rRK lifetime and the\n         rMSK lifetime.\n      The server\
    \ transports the rMSK along with this message to the\n      authenticator.  The\
    \ rMSK is transported in a manner similar to the\n      MSK transport along with\
    \ the EAP-Success message in a regular EAP\n      exchange.\n      The peer looks\
    \ up the sequence number to verify whether it is\n      expecting an EAP-Finish/Re-auth\
    \ message with that sequence number\n      protected by the keyName-NAI.  It then\
    \ verifies the integrity of\n      the message.  If the verifications fail, the\
    \ peer logs an error\n      and stops the process; otherwise, it proceeds to the\
    \ next step.\n      The peer uses the sequence number to compute the rMSK.\n \
    \     The lower-layer security association protocol can be triggered at\n    \
    \  this point.\n"
- title: 5.2.1.  Multiple Simultaneous Runs of ERP
  contents:
  - "5.2.1.  Multiple Simultaneous Runs of ERP\n   When a peer is within the range\
    \ of multiple authenticators, it may\n   choose to run ERP via all of them simultaneously\
    \ to the same ER\n   server.  In that case, it is plausible that the ERP messages\
    \ may\n   arrive out of order, resulting in the ER server rejecting legitimate\n\
    \   EAP-Initiate/Re-auth messages.\n   To facilitate such operation, an ER server\
    \ MAY allow multiple\n   simultaneous ERP exchanges by accepting all EAP-Initiate/Re-auth\n\
    \   messages with SEQ number values within a window of allowed values.\n   Recall\
    \ that the SEQ number allows replay protection.  Replay window\n   maintenance\
    \ mechanisms are a local matter.\n"
- title: 5.2.2.  ERP Failure Handling
  contents:
  - "5.2.2.  ERP Failure Handling\n   If the processing of the EAP-Initiate/Re-auth\
    \ message results in a\n   failure, the ER server MUST send an EAP-Finish Re-auth\
    \ message with\n   the Result flag set to '1'.  If the server has a valid rIK\
    \ for the\n   peer, it MUST integrity protect the EAP-Finish/Re-auth failure\n\
    \   message.  If the failure is due to an unacceptable cryptosuite, the\n   server\
    \ SHOULD send a list of acceptable cryptosuites (in a TLV of\n   Type 5) along\
    \ with the EAP-Finish/Re-auth message.  In this case, the\n   server MUST indicate\
    \ the cryptosuite used to protect the EAP-Finish/\n   Re-auth message in the cryptosuite.\
    \  The rIK used with the EAP-\n   Finish/Re-auth message in this case MUST be\
    \ computed as specified in\n   Section 4.3 using the new cryptosuite.  If the\
    \ server does not have a\n   valid rIK for the peer, the EAP-Finish/Re-auth message\
    \ indicating a\n   failure will be unauthenticated; the server MAY include a list\
    \ of\n   acceptable cryptosuites in the message.\n   The peer, upon receiving\
    \ an EAP-Finish/Re-auth message with the\n   Result flag set to '1', MUST verify\
    \ the sequence number and the\n   Authentication Tag to determine the validity\
    \ of the message.  If the\n   peer supports the cryptosuite, it MUST verify the\
    \ integrity of the\n   received EAP-Finish/Re-auth message.  If the EAP-Finish\
    \ message\n   contains a TLV of Type 5, the peer SHOULD retry the ERP exchange\
    \ with\n   a cryptosuite picked from the list included by the server.  The peer\n\
    \   MUST use the appropriate rIK for the subsequent ERP exchange, by\n   computing\
    \ it with the corresponding cryptosuite, as specified in\n   Section 4.3.  If\
    \ the PRF in the chosen cryptosuite is different from\n   the PRF originally used\
    \ by the peer, it MUST derive a new DSRK (if\n   required), rRK, and rIK before\
    \ proceeding with the subsequent ERP\n   exchange.\n   If the peer cannot verify\
    \ the integrity of the received message, it\n   MAY choose to retry the ERP exchange\
    \ with one of the cryptosuites in\n   the TLV of Type 5, after a failure has been\
    \ clearly determined\n   following the procedure in the next paragraph.\n   If\
    \ the replay or integrity checks fail, the failure message may have\n   been sent\
    \ by an attacker.  It may also imply that the server and peer\n   do not support\
    \ the same cryptosuites; however, the peer cannot\n   determine if that is the\
    \ case.  Hence, the peer SHOULD continue the\n   ERP exchange per the retransmission\
    \ timers before declaring a\n   failure.\n   When the peer runs explicit bootstrapping\
    \ (ERP with the bootstrapping\n   flag on), there may not be a local ER server\
    \ available to send a DSRK\n   Request and the domain name.  In that case, the\
    \ server cannot send\n   the DSRK and MUST NOT include the domain name TLV.  When\
    \ the peer\n   receives a response in the bootstrapping exchange without a domain\n\
    \   name TLV, it assumes that there is no local ER server.  The home ER\n   server\
    \ sends an rMSK to the ER authenticator, however, and the peer\n   SHALL run the\
    \ TSK establishment protocol as usual.\n"
- title: 5.3.  New EAP Packets
  contents:
  - "5.3.  New EAP Packets\n   Two new EAP Codes are defined for the purpose of ERP:\
    \ EAP-Initiate\n   and EAP-Finish.  The packet format for these messages follows\
    \ the EAP\n   packet format defined in RFC 3748 [2].\n   0                   1\
    \                   2                   3\n   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\
    \ 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Code      |  Identifier   |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Type      |  Type-Data ...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\n\
    \                           Figure 6: EAP Packet\n      Code\n         5 Initiate\n\
    \         6 Finish\n         Two new code values are defined for the purpose of\
    \ ERP.\n      Identifier\n         The Identifier field is one octet.  The Identifier\
    \ field MUST\n         be the same if an EAP-Initiate packet is retransmitted\
    \ due to a\n         timeout while waiting for a Finish message.  Any new\n  \
    \       (non-retransmission) Initiate message MUST use a new Identifier\n    \
    \     field.\n         The Identifier field of the Finish message MUST match that\
    \ of\n         the currently outstanding Initiate message.  A peer or\n      \
    \   authenticator receiving a Finish message whose Identifier value\n        \
    \ does not match that of the currently outstanding Initiate\n         message\
    \ MUST silently discard the packet.\n         In order to avoid confusion between\
    \ new EAP-Initiate messages\n         and retransmissions, the peer must choose\
    \ an Identifier value\n         that is different from the previous EAP-Initiate\
    \ message,\n         especially if that exchange has not finished.  It is\n  \
    \       RECOMMENDED that the authenticator clear EAP Re-auth state\n         after\
    \ 300 seconds.\n      Type\n         This field indicates that this is an ERP\
    \ exchange.  Two type\n         values are defined in this document for this purpose\
    \ --\n         Re-auth-Start (assigned Type 1) and Re-auth (assigned Type 2).\n\
    \      Type-Data\n         The Type-Data field varies with the Type of re-authentication\n\
    \         packet.\n"
- title: 5.3.1.  EAP-Initiate/Re-auth-Start Packet
  contents:
  - "5.3.1.  EAP-Initiate/Re-auth-Start Packet\n   The EAP-Initiate/Re-auth-Start\
    \ packet contains the parameters shown\n   in Figure 7.\n   0                \
    \   1                   2                   3\n   0 1 2 3 4 5 6 7 8 9 0 1 2 3\
    \ 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Code      |  Identifier   |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Type      |   Reserved    |     1 or more TVs or TLVs     ~\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                Figure 7: EAP-Initiate/Re-auth-Start Packet\n      Type = 1.\n\
    \      Reserved, MUST be zero.  Set to zero on transmission and ignored\n    \
    \  on reception.\n      One or more TVs or TLVs are used to convey information\
    \ to the\n      peer; for instance, the authenticator may send the domain name\
    \ to\n      the peer.\n      TVs or TLVs: In the TV payloads, there is a 1-octet\
    \ type payload\n      and a value with type-specific length.  In the TLV payloads,\
    \ there\n      is a 1-octet type payload and a 1-octet length payload.  The\n\
    \      length field indicates the length of the value expressed in number\n  \
    \    of octets.\n         Domain-Name: This is a TLV payload.  The Type is 4.\
    \  The domain\n         name is to be used as the realm in an NAI [4].  The Domain-Name\n\
    \         attribute SHOULD be present in an EAP-Initiate/Re-auth-Start\n     \
    \    message.\n         In addition, channel binding information MAY be included;\
    \ see\n         Section 5.5 for discussion.  See Figure 11 for parameter\n   \
    \      specification.\n"
- title: 5.3.1.1.  Authenticator Operation
  contents:
  - "5.3.1.1.  Authenticator Operation\n   The authenticator MAY send the EAP-Initiate/Re-auth-Start\
    \ message to\n   indicate support for ERP to the peer and to initiate ERP if the\
    \ peer\n   has already performed full EAP authentication and has unexpired key\n\
    \   material.  The authenticator SHOULD include the domain name TLV to\n   allow\
    \ the peer to learn it without lower-layer support or the ERP\n   bootstrapping\
    \ exchange.\n   The authenticator MAY include channel binding information so that\
    \ the\n   peer can send the information to the server in the EAP-Initiate/\n \
    \  Re-auth message so that the server can verify whether the\n   authenticator\
    \ is claiming the same identity to both parties.\n   The authenticator MAY re-transmit\
    \ the EAP-Initiate/Re-auth-Start\n   message a few times for reliable transport.\n"
- title: 5.3.1.2.  Peer Operation
  contents:
  - "5.3.1.2.  Peer Operation\n   The peer SHOULD send the EAP-Initiate/Re-auth message\
    \ in response to\n   the EAP-Initiate/Re-auth-Start message from the authenticator.\
    \  If\n   the peer does not recognize the Initiate code value, it silently\n \
    \  discards the message.  If the peer has already sent the EAP-Initiate/\n   Re-auth\
    \ message to begin the ERP exchange, it silently discards the\n   message.\n \
    \  If the EAP-Initiate/Re-auth-Start message contains the domain name,\n   and\
    \ if the peer does not already have the domain information, the\n   peer SHOULD\
    \ use the domain name to compute the DSRK and use the\n   corresponding DS-rIK\
    \ to send an EAP-Initiate/Re-auth message to start\n   an ERP exchange with the\
    \ local ER server.  If the peer has already\n   initiated an ERP exchange with\
    \ the home ER server, it MAY choose to\n   not start an ERP exchange with the\
    \ local ER server.\n"
- title: 5.3.2.  EAP-Initiate/Re-auth Packet
  contents:
  - "5.3.2.  EAP-Initiate/Re-auth Packet\n   The EAP-Initiate/Re-auth packet contains\
    \ the parameters shown in\n   Figure 8.\n   0                   1            \
    \       2                   3\n   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\
    \ 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Code      |  Identifier   |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Type      |R|B|L| Reserved|             SEQ               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                 1 or more TVs or TLVs                         ~\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | cryptosuite  |        Authentication Tag                     ~\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                   Figure 8: EAP-Initiate/Re-auth Packet\n      Type = 2.\n \
    \     Flags\n         'R' - The R flag is set to 0 and ignored upon reception.\n\
    \         'B' - The B flag is used as the bootstrapping flag.  If the\n      \
    \   flag is turned on, the message is a bootstrap message.\n         'L' - The\
    \ L flag is used to request the key lifetimes from the\n         server.\n   \
    \      The rest of the 5 bits are set to 0 and ignored on reception.\n      SEQ:\
    \ A 16-bit sequence number is used for replay protection.  The\n      SEQ number\
    \ field is initialized to 0 every time a new rRK is\n      derived.\n      TVs\
    \ or TLVs: In the TV payloads, there is a 1-octet type payload\n      and a value\
    \ with type-specific length.  In the TLV payloads, there\n      is a 1-octet type\
    \ payload and a 1-octet length payload.  The\n      length field indicates the\
    \ length of the value expressed in number\n      of octets.\n         keyName-NAI:\
    \ This is carried in a TLV payload.  The Type is 1.\n         The NAI is variable\
    \ in length, not exceeding 253 octets.  The\n         EMSKname is in the username\
    \ part of the NAI and is encoded in\n         hexadecimal values.  The EMSKname\
    \ is 64 bits in length and so\n         the username portion takes up 128 octets.\
    \  If the rIK is\n         derived from the EMSK, the realm part of the NAI is\
    \ the home\n         domain name, and if the rIK is derived from a DSRK, the realm\n\
    \         part of the NAI is the domain name used in the derivation of\n     \
    \    the DSRK.  The NAI syntax follows [4].  Exactly one keyName-NAI\n       \
    \  attribute SHALL be present in an EAP-Initiate/Re-auth packet.\n         In\
    \ addition, channel binding information MAY be included; see\n         Section\
    \ 5.5 for discussion.  See Figure 11 for parameter\n         specification.\n\
    \      Cryptosuite: This field indicates the integrity algorithm used for\n  \
    \    ERP.  Key lengths and output lengths are either indicated or are\n      obvious\
    \ from the cryptosuite name.  We specify some cryptosuites\n      below:\n   \
    \   *  0 RESERVED\n      *  1 HMAC-SHA256-64\n      *  2 HMAC-SHA256-128\n   \
    \   *  3 HMAC-SHA256-256\n      HMAC-SHA256-128 is mandatory to implement and\
    \ should be enabled in\n      the default configuration.\n      Authentication\
    \ Tag: This field contains the integrity checksum\n      over the ERP packet,\
    \ excluding the authentication tag field\n      itself.  The length of the field\
    \ is indicated by the Cryptosuite.\n"
- title: 5.3.3.  EAP-Finish/Re-auth Packet
  contents:
  - "5.3.3.  EAP-Finish/Re-auth Packet\n   The EAP-Finish/Re-auth packet contains\
    \ the parameters shown in\n   Figure 9.\n   0                   1            \
    \       2                   3\n   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\
    \ 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Code      |  Identifier   |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Type      |R|B|L| Reserved |             SEQ               ~\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                 1 or more TVs or TLVs                         ~\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | cryptosuite  |        Authentication Tag                     ~\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                    Figure 9: EAP-Finish/Re-auth Packet\n      Type = 2.\n  \
    \    Flags\n         'R' - The R flag is used as the Result flag.  When set to\
    \ 0, it\n         indicates success, and when set to '1', it indicates a failure.\n\
    \         'B' - The B flag is used as the bootstrapping flag.  If the\n      \
    \   flag is turned on, the message is a bootstrap message.\n         'L' - The\
    \ L flag is used to indicate the presence of the rRK\n         lifetime TLV.\n\
    \         The rest of the 5 bits are set to 0 and ignored on reception.\n    \
    \  SEQ: A 16-bit sequence number is used for replay protection.  The\n      SEQ\
    \ number field is initialized to 0 every time a new rRK is\n      derived.\n \
    \     TVs or TLVs: In the TV payloads, there is a 1-octet type payload\n     \
    \ and a value with type-specific length.  In the TLV payloads, there\n      is\
    \ a 1-octet type payload and a 1-octet length payload.  The\n      length field\
    \ indicates the length of the value expressed in number\n      of octets.\n  \
    \       keyName-NAI: This is carried in a TLV payload.  The Type is 1.\n     \
    \    The NAI is variable in length, not exceeding 253 octets.\n         EMSKname\
    \ is in the username part of the NAI and is encoded in\n         hexadecimal values.\
    \  The EMSKname is 64 bits in length and so\n         the username portion takes\
    \ up 16 octets.  If the rIK is derived\n         from the EMSK, the realm part\
    \ of the NAI is the home domain\n         name, and if the rIK is derived from\
    \ a DSRK, the realm part of\n         the NAI is the domain name used in the derivation\
    \ of the DSRK.\n         The NAI syntax follows [4].  Exactly one instance of\
    \ the\n         keyName-NAI attribute SHALL be present in an EAP-Finish/Re-auth\n\
    \         message.\n         rRK Lifetime: This is a TV payload.  The Type is\
    \ 2.  The value\n         field is a 32-bit field and contains the lifetime of\
    \ the rRK in\n         seconds.  If the 'L' flag is set, the rRK Lifetime attribute\n\
    \         SHOULD be present.\n         rMSK Lifetime: This is a TV payload.  The\
    \ Type is 3.  The value\n         field is a 32-bit field and contains the lifetime\
    \ of the rMSK\n         in seconds.  If the 'L' flag is set, the rMSK Lifetime\n\
    \         attribute SHOULD be present.\n         Domain-Name: This is a TLV payload.\
    \  The Type is 4.  The domain\n         name is to be used as the realm in an\
    \ NAI [4].  Domain-Name\n         attribute MUST be present in an EAP-Finish/Re-auth\
    \ message if\n         the bootstrapping flag is set and if the local ER server\
    \ sent a\n         DSRK request.\n         List of cryptosuites: This is a TLV\
    \ payload.  The Type is 5.\n         The value field contains a list of cryptosuites,\
    \ each of size 1\n         octet.  The cryptosuite values are as specified in\
    \ Figure 8.\n         The server SHOULD include this attribute if the cryptosuite\n\
    \         used in the EAP-Initiate/Re-auth message was not acceptable and\n  \
    \       the message is being rejected.  The server MAY include this\n        \
    \ attribute in other cases.  The server MAY use this attribute to\n         signal\
    \ to the peer about its cryptographic algorithm\n         capabilities.\n    \
    \     Authorization Indication: This is a TLV payload.  The Type is\n        \
    \ 6.  This attribute MAY be included in the EAP-Finish/Re-auth\n         message\
    \ when a DSRK is delivered to a local ER server and if\n         the home ER server\
    \ can verify the authorization of the local ER\n         server to advertise the\
    \ domain name included in the domain TLV\n         in the same message.  The value\
    \ field in the TLV contains an\n         authentication tag computed over the\
    \ entire packet, starting\n         from the first bit of the code field to the\
    \ last bit of the\n         cryptosuite field, with the value field of the Authorization\n\
    \         Indication TLV filled with all 0s for the computation.  The key\n  \
    \       used for the computation MUST be derived from the EMSK with key\n    \
    \     label \"DSRK Delivery Authorized Key@ietf.org\" and optional data\n    \
    \     containing an ASCII string representing the key management\n         domain\
    \ that the DSRK is being derived for.\n         In addition, channel binding information\
    \ MAY be included: see\n         Section 5.5 for discussion.  See Figure 11 for\
    \ parameter\n         specification.  The server sends this information so that\
    \ the\n         peer can verify the information seen at the lower layer, if\n\
    \         channel binding is to be supported.\n      Cryptosuite: This field indicates\
    \ the integrity algorithm and the\n      PRF used for ERP.  Key lengths and output\
    \ lengths are either\n      indicated or are obvious from the cryptosuite name.\n\
    \      Authentication Tag: This field contains the integrity checksum\n      over\
    \ the ERP packet, excluding the authentication tag field\n      itself.  The length\
    \ of the field is indicated by the Cryptosuite.\n"
- title: 5.3.4.  TV and TLV Attributes
  contents:
  - "5.3.4.  TV and TLV Attributes\n   The TV attributes that may be present in the\
    \ EAP-Initiate or EAP-\n   Finish messages are of the following format:\n   0\
    \                   1                   2                   3\n   0 1 2 3 4 5\
    \ 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Type      |              Value ...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                      Figure 10: TV Attribute Format\n   The TLV attributes that\
    \ may be present in the EAP-Initiate or EAP-\n   Finish messages are of the following\
    \ format:\n   0                   1                   2                   3\n\
    \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Type      |    Length     |            Value ...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                      Figure 11: TLV Attribute Format\n   The following Types\
    \ are defined in this document:\n      '1' - keyName-NAI: This is a TLV payload.\n\
    \      '2' - rRK Lifetime: This is a TV payload.\n      '3' - rMSK Lifetime: This\
    \ is a TV payload.\n      '4' - domain name: This is a TLV payload.\n      '5'\
    \ - cryptosuite list: This is a TLV payload.\n      '6' - Authorization Indication:\
    \ This is a TLV payload.\n      The TLV type range of 128-191 is reserved to carry\
    \ channel binding\n      information in the EAP-Initiate and Finish/Re-auth messages.\n\
    \      Below are the current assignments (all of them are TLVs):\n         '128'\
    \ - Called-Station-Id [13]\n         '129' - Calling-Station-Id [13]\n       \
    \  '130' - NAS-Identifier [13]\n         '131' - NAS-IP-Address [13]\n       \
    \  '132' - NAS-IPv6-Address [16]\n   The length field indicates the length of\
    \ the value part of the\n   attribute in octets.\n"
- title: 5.4.  Replay Protection
  contents:
  - "5.4.  Replay Protection\n   For replay protection, ERP uses sequence numbers.\
    \  The sequence\n   number is maintained per rIK and is initialized to zero in\
    \ both\n   directions.  In the first EAP-Initiate/Re-auth message, the peer uses\n\
    \   the sequence number zero or higher.  Note that the when the sequence\n   number\
    \ rotates, the rIK MUST be changed by running EAP\n   authentication.  The server\
    \ expects a sequence number of zero or\n   higher.  When the server receives an\
    \ EAP-Initiate/Re-auth message, it\n   uses the same sequence number in the EAP-Finish/Re-auth\
    \ message.  The\n   server then sets the expected sequence number to the received\n\
    \   sequence number plus 1.  The server accepts sequence numbers greater\n   than\
    \ or equal to the expected sequence number.\n   If the peer sends an EAP-Initiate/Re-auth\
    \ message, but does not\n   receive a response, it retransmits the request (with\
    \ no changes to\n   the message itself) a pre-configured number of times before\
    \ giving\n   up.  However, it is plausible that the server itself may have\n \
    \  responded to the message and it was lost in transit.  Thus, the peer\n   MUST\
    \ increment the sequence number and use the new sequence number to\n   send subsequent\
    \ EAP re-authentication messages.  The peer SHOULD\n   increment the sequence\
    \ number by 1; however, it may choose to\n   increment by a larger number.  When\
    \ the sequence number rotates, the\n   peer MUST run full EAP authentication.\n"
- title: 5.5.  Channel Binding
  contents:
  - "5.5.  Channel Binding\n   ERP provides a protected facility to carry channel\
    \ binding (CB)\n   information, according to the guidelines in Section 7.15 of\
    \ [2].  The\n   TLV type range of 128-191 is reserved to carry CB information\
    \ in the\n   EAP-Initiate/Re-auth and EAP-Finish/Re-auth messages.  Called-\n\
    \   Station-Id, Calling-Station-Id, NAS-Identifier, NAS-IP-Address, and\n   NAS-IPv6-Address\
    \ are some examples of channel binding information\n   listed in RFC 3748, and\
    \ they are assigned values 128-132.  Additional\n   values are IANA managed based\
    \ on IETF Consensus [17].\n   The authenticator MAY provide CB information to\
    \ the peer via the EAP-\n   Initiate/Re-auth-Start message.  The peer sends the\
    \ information to\n   the server in the EAP-Initiate/Re-auth message; the server\
    \ verifies\n   whether the authenticator identity available via AAA attributes\
    \ is\n   the same as the identity provided to the peer.\n   If the peer does not\
    \ include the CB information in the EAP-Initiate/\n   Re-auth message, and if\
    \ the local ER server's policy requires channel\n   binding support, it SHALL\
    \ send the CB attributes for the peer's\n   verification.  The peer attempts to\
    \ verify the CB information if the\n   authenticator has sent the CB parameters,\
    \ and it proceeds with the\n   lower-layer security association establishment\
    \ if the attributes\n   match.  Otherwise, the peer SHALL NOT proceed with the\
    \ lower-layer\n   security association establishment.\n"
- title: 6.  Lower-Layer Considerations
  contents:
  - "6.  Lower-Layer Considerations\n   The authenticator is responsible for retransmission\
    \ of EAP-Initiate/\n   Re-auth-Start messages.  The authenticator MAY retransmit\
    \ the message\n   a few times or until it receives an EAP-Initiate/Re-auth message\
    \ from\n   the peer.  The authenticator may not know whether the peer supports\n\
    \   ERP; in those cases, the peer may be silently dropping the EAP-\n   Initiate/Re-auth-Start\
    \ packets.  Thus, retransmission of these\n   packets should be kept to a minimum.\
    \  The exact number is up to each\n   lower layer.\n   The Identifier value in\
    \ the EAP-Initiate/Re-auth packet is\n   independent of the Identifier value in\
    \ the EAP-Initiate/Re-auth-Start\n   packet.\n   The peer is responsible for retransmission\
    \ of EAP-Initiate/Re-auth\n   messages.\n   Retransmitted packets MUST be sent\
    \ with the same Identifier value in\n   order to distinguish them from new packets.\
    \  By default, where the\n   EAP-Initiate message is sent over an unreliable lower\
    \ layer, the\n   retransmission timer SHOULD be dynamically estimated.  A maximum\
    \ of\n   3-5 retransmissions is suggested (this is based on the recommendation\n\
    \   of [2]).  Where the EAP-Initiate message is sent over a reliable\n   lower\
    \ layer, the retransmission timer SHOULD be set to an infinite\n   value, so that\
    \ retransmissions do not occur at the EAP layer.  Please\n   refer to RFC 3748\
    \ [2] for additional guidance on setting timers.\n   The Identifier value in the\
    \ EAP-Finish/Re-auth packet is the same as\n   the Identifier value in the EAP-Initiate/Re-auth\
    \ packet.\n   If an authenticator receives a valid duplicate EAP-Initiate/Re-auth\n\
    \   message for which it has already sent an EAP-Finish/Re-auth message,\n   it\
    \ MUST resend the EAP-Finish/Re-auth message without reprocessing\n   the EAP-Initiate/Re-auth\
    \ message.  To facilitate this, the\n   authenticator SHALL store a copy of the\
    \ EAP-Finish/Re-auth message\n   for a finite amount of time.  The actual value\
    \ of time is a local\n   matter; this specification recommends a value of 100\
    \ milliseconds.\n   The lower layer may provide facilities for exchanging information\n\
    \   between the peer and the authenticator about support for ERP, for the\n  \
    \ authenticator to send the domain name information and channel binding\n   information\
    \ to the peer\n   Note that to support ERP, lower-layer specifications may need\
    \ to be\n   revised.  Specifically, the IEEE802.1x specification must be revised\n\
    \   to allow carrying EAP messages of the new codes defined in this\n   document\
    \ in order to support ERP.  Similarly, RFC 4306 must be\n   updated to include\
    \ EAP code values higher than 4 in order to use ERP\n   with Internet Key Exchange\
    \ Protocol version 2 (IKEv2).  IKEv2 may\n   also be updated to support peer-initiated\
    \ ERP for optimized\n   operation.  Other lower layers may need similar revisions.\n\
    \   Our analysis indicates that some EAP implementations are not RFC 3748\n  \
    \ compliant in that instead of silently dropping EAP packets with code\n   values\
    \ higher than 4, they may consider it an error.  To accommodate\n   such non-compliant\
    \ EAP implementations, additional guidance has been\n   provided below.  Furthermore,\
    \ it may not be easy to upgrade all the\n   peers in some cases.  In such cases,\
    \ authenticators may be configured\n   to not send EAP-Initiate/Re-auth-Start;\
    \ peers may learn whether an\n   authenticator supports ERP via configuration,\
    \ from advertisements at\n   the lower layer.\n   In order to accommodate implementations\
    \ that are not compliant to RFC\n   3748, such lower layers SHOULD ensure that\
    \ both parties support ERP;\n   this is trivial for an instance when using a lower\
    \ layer that is\n   known to always support ERP.  For lower layers where ERP support\
    \ is\n   not guaranteed, ERP support may be indicated through signaling (e.g.,\n\
    \   piggy-backed on a beacon) or through negotiation.  Alternatively,\n   clients\
    \ may recognize environments where ERP is available based on\n   pre-configuration.\
    \  Other similar mechanisms may also be used.  When\n   ERP support cannot be\
    \ verified, lower layers may mandate falling back\n   to full EAP authentication\
    \ to accommodate EAP implementations that\n   are not compliant to RFC 3748.\n"
- title: 7.  Transport of ERP Messages
  contents:
  - "7.  Transport of ERP Messages\n   AAA Transport of ERP messages is specified\
    \ in [11] and [12].\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   This section provides an analysis of the protocol\
    \ in accordance with\n   the AAA key management requirements specified in [18].\n\
    \      Cryptographic algorithm independence\n         The EAP Re-auth Protocol\
    \ satisfies this requirement.  The\n         algorithm chosen by the peer for\
    \ the MAC generation is\n         indicated in the EAP-Initiate/Re-auth message.\
    \  If the chosen\n         algorithm is unacceptable, the EAP server returns an\
    \ EAP-\n         Finish/Re-auth message with Failure indication.  Algorithm\n\
    \         agility for the KDF is specified in [3].  Only when the\n         algorithms\
    \ used are acceptable, the server proceeds with\n         derivation of keys and\
    \ verification of the proof of possession\n         of relevant keying material\
    \ by the peer.  A full-blown\n         negotiation of algorithms cannot be provided\
    \ in a single round\n         trip protocol.  Hence, while the protocol provides\
    \ algorithm\n         agility, it does not provide true negotiation.\n      Strong,\
    \ fresh session keys\n         ERP results in the derivation of strong, fresh\
    \ keys that are\n         unique for the given session.  An rMSK is always derived\n\
    \         on-demand when the peer requires a key with a new\n         authenticator.\
    \  The derivation ensures that the compromise of\n         one rMSK does not result\
    \ in the compromise of a different rMSK\n         at any time.\n      Limit key\
    \ scope\n         The scope of all the keys derived by ERP is well defined.  The\n\
    \         rRK and rIK are never shared with any entity and always remain\n   \
    \      on the peer and the server.  The rMSK is provided only to the\n       \
    \  authenticator through which the peer performs the ERP exchange.\n         No\
    \ other authenticator is authorized to use that rMSK.\n      Replay detection\
    \ mechanism\n         For replay protection of ERP messages, a sequence number\n\
    \         associated with the rIK is used.  The sequence number is\n         maintained\
    \ by the peer and the server, and initialized to zero\n         when the rIK is\
    \ generated.  The peer increments the sequence\n         number by one after it\
    \ sends an ERP message.  The server sets\n         the expected sequence number\
    \ to the received sequence number\n         plus one after verifying the validity\
    \ of the received message\n         and responds to the message.\n      Authenticate\
    \ all parties\n         The EAP Re-auth Protocol provides mutual authentication\
    \ of the\n         peer and the server.  Both parties need to possess the keying\n\
    \         material that resulted from a previous EAP exchange in order to\n  \
    \       successfully derive the required keys.  Also, both the EAP\n         re-authentication\
    \ Response and the EAP re-authentication\n         Information messages are integrity\
    \ protected so that the peer\n         and the server can verify each other. \
    \ When the ERP exchange is\n         executed with a local ER server, the peer\
    \ and the local server\n         mutually authenticate each other via that exchange\
    \ in the same\n         manner.  The peer and the authenticator authenticate each\
    \ other\n         in the secure association protocol executed by the lower layer,\n\
    \         just as in the case of a regular EAP exchange.\n      Peer and authenticator\
    \ authorization\n         The peer and authenticator demonstrate possession of\
    \ the same\n         key material without disclosing it, as part of the lower-layer\n\
    \         secure association protocol.  Channel binding with ERP may be\n    \
    \     used to verify consistency of the identities exchanged, when\n         the\
    \ identities used in the lower layer differ from that\n         exchanged within\
    \ the AAA protocol.\n      Keying material confidentiality\n         The peer\
    \ and the server derive the keys independently using\n         parameters known\
    \ to each entity.  The AAA server sends the DSRK\n         of a domain to the\
    \ corresponding local ER server via the AAA\n         protocol.  Likewise, the\
    \ ER server sends the rMSK to the\n         authenticator via the AAA protocol.\n\
    \         Note that compromise of the DSRK results in compromise of all\n    \
    \     keys derived from it.  Moreover, there is no forward secrecy\n         within\
    \ ERP.  Thus, compromise of an DSRK retroactively\n         compromises all ERP\
    \ keys.\n         It is RECOMMENDED that the AAA protocol be protected using\n\
    \         IPsec or TLS so that the keys are protected in transit.  Note,\n   \
    \      however, that keys may be exposed to AAA proxies along the way\n      \
    \   and compromise of any of those proxies may result in compromise\n        \
    \ of keys being transported through them.\n         The home ER server MUST NOT\
    \ hand out a given DSRK to a local\n         domain server more than once, unless\
    \ it can verify that the\n         entity receiving the DSRK after the first time\
    \ is the same as\n         that received the DSRK originally.  If the home ER\
    \ server\n         verifies authorization of a local domain server, it MAY hand\n\
    \         out the DSRK to that domain more than once.  In this case, the\n   \
    \      home ER server includes the Authorization Indication TLV to\n         assure\
    \ the peer that DSRK delivery is secure.\n      Confirm cryptosuite selection\n\
    \         Crypto algorithms for integrity and key derivation in the\n        \
    \ context of ERP MAY be the same as that used by the EAP method.\n         In\
    \ that case, the EAP method is responsible for confirming the\n         cryptosuite\
    \ selection.  Furthermore, the cryptosuite is\n         included in the ERP exchange\
    \ by the peer and confirmed by the\n         server.  The protocol allows the\
    \ server to reject the\n         cryptosuite selected by the peer and provide\
    \ alternatives.\n         When a suitable rIK is not available for the peer, the\n\
    \         alternatives may be sent in an unprotected fashion.  The peer\n    \
    \     is allowed to retry the exchange using one of the allowed\n         cryptosuites.\
    \  However, in this case, any en route\n         modifications to the list sent\
    \ by the server will go\n         undetected.  If the server does have an rIK\
    \ available for the\n         peer, the list will be provided in a protected manner\
    \ and this\n         issue does not apply.\n      Uniquely named keys\n      \
    \   All keys produced within the ERP context can be referred to\n         uniquely\
    \ as specified in this document.  Also, the key names do\n         not reveal\
    \ any part of the keying material.\n      Prevent the domino effect\n        \
    \ The compromise of one peer does not result in the compromise of\n         keying\
    \ material held by any other peer in the system.  Also,\n         the rMSK is\
    \ meant for a single authenticator and is not shared\n         with any other\
    \ authenticator.  Hence, the compromise of one\n         authenticator does not\
    \ lead to the compromise of sessions or\n         keys held by any other authenticator\
    \ in the system.  Hence, the\n         EAP Re-auth Protocol allows prevention\
    \ of the domino effect by\n         appropriately defining key scope.\n      \
    \   However, if keys are transported using hop-by-hop protection,\n         compromise\
    \ of a proxy may result in compromise of key material,\n         i.e., the DSRK\
    \ being sent to a local ER server.\n      Bind key to its context\n         All\
    \ the keys derived for ERP are bound to the appropriate\n         context using\
    \ appropriate key labels.  Lifetime of a child key\n         is less than or equal\
    \ to that of its parent key as specified in\n         RFC 4962 [18].  The key\
    \ usage, lifetime and the parties that\n         have access to the keys are specified.\n\
    \      Confidentiality of identity\n         Deployments where privacy is a concern\
    \ may find the use of\n         rIKname-NAI to route ERP messages serves their\
    \ privacy\n         requirements.  Note that it is plausible to associate multiple\n\
    \         runs of ERP messages since the rIKname is not changed as part\n    \
    \     of the ERP protocol.  There was no consensus for that\n         requirement\
    \ at the time of development of this specification.\n         If the rIKname is\
    \ not used and the Peer-ID is used instead, the\n         ERP exchange will reveal\
    \ the Peer-ID over the wire.\n      Authorization restriction\n         All the\
    \ keys derived are limited in lifetime by that of the\n         parent key or\
    \ by server policy.  Any domain-specific keys are\n         further restricted\
    \ for use only in the domain for which the\n         keys are derived.  All the\
    \ keys specified in this document are\n         meant for use in ERP only.  Any\
    \ other restrictions of session\n         keys may be imposed by the specific\
    \ lower layer and are out of\n         scope for this specification.\n   A denial-of-service\
    \ (DoS) attack on the peer may be possible when\n   using the EAP Initiate/Re-auth\
    \ message.  An attacker may send a bogus\n   EAP-Initiate/Re-auth message, which\
    \ may be carried by the\n   authenticator in a RADIUS-Access-Request to the server;\
    \ in response,\n   the server may send an EAP-Finish/Re-auth with Failure indication\
    \ in\n   a RADIUS Access-Reject message.  Note that such attacks may be\n   plausible\
    \ with the EAPoL-Start capability of IEEE 802.11 and other\n   similar facilities\
    \ in other link layers and where the peer can\n   initiate EAP authentication.\
    \  An attacker may use such messages to\n   start an EAP method run, which fails\
    \ and may result in the server\n   sending a RADIUS Access-Reject message, thus\
    \ resulting in the link-\n   layer connections being terminated.\n   To prevent\
    \ such DoS attacks, an ERP failure should not result in\n   deletion of any authorization\
    \ state established by a full EAP\n   exchange.  Alternatively, the lower layers\
    \ and AAA protocols may\n   define mechanisms to allow two link-layer security\
    \ associations (SAs)\n   derived from different EAP keying materials for the same\
    \ peer to\n   exist so that smooth migration from the current link layer SA to\
    \ the\n   new one is possible during rekey.  These mechanisms prevent the link\n\
    \   layer connections from being terminated when a re-authentication\n   procedure\
    \ fails due to the bogus EAP-Initiate/Re-auth message.\n   When a DSRK is sent\
    \ from a home ER server to a local domain server or\n   when a rMSK is sent from\
    \ an ER server to an authenticator, in the\n   absence of end-to-end security\
    \ between the entity that is sending the\n   key and the entity receiving the\
    \ key, it is plausible for other\n   entities to get access to keys being sent\
    \ to an ER server in another\n   domain.  This mode of key transport is similar\
    \ to that of MSK\n   transport in the context of EAP authentication.  We further\
    \ observe\n   that ERP is for access authentication and does not support end-to-end\n\
    \   data security.  In typical implementations, the traffic is in the\n   clear\
    \ beyond the access control enforcement point (the authenticator\n   or an entity\
    \ delegated by the authenticator for access control\n   enforcement).  The model\
    \ works as long as entities in the middle of\n   the network do not use keys intended\
    \ for other parties to steal\n   service from an access network.  If that is not\
    \ achievable, key\n   delivery must be protected in an end-to-end manner.\n"
- title: 9.  IANA Considerations
  contents:
  - "9.  IANA Considerations\n   This document specifies IANA registration of two\
    \ new 'Packet Codes'\n   from the EAP registry:\n   o  5 (Initiate)\n   o  6 (Finish)\n\
    \   These values are in accordance with [2].\n   This document also specifies\
    \ creation of a new table, Message Types,\n   in the EAP registry with the following\
    \ assigned numbers:\n   o  0 Reserved\n   o  1 (Re-auth-Start, applies to Initiate\
    \ Code only)\n   o  2 (Re-auth, applies to Initiate and Finish Codes)\n   o  3-191\
    \ IANA managed and assigned based on IETF Consensus [17]\n   o  192-255 Private\
    \ use\n   Next, we specify creation of a new table, EAP Initiate and Finish\n\
    \   Attributes, associated with EAP Initiate and Finish messages in the\n   EAP\
    \ registry with the following assigned numbers.\n   o  0: Reserved\n   o  keyName-NAI:\
    \ This is a TLV payload.  The Type is 1.\n   o  rRK Lifetime: This is a TV payload.\
    \  The Type is 2.\n   o  rMSK Lifetime: This is a TV payload.  The Type is 3.\n\
    \   o  Domain name: This is a TLV payload.  The Type is 4.\n   o  Cryptosuite\
    \ list: This is a TLV payload.  The Type is 5.\n   o  Authorization Indication:\
    \ This is a TLV payload.  The Type is 6.\n   o  7-127: Used to carry other non-channel-binding-related\
    \ attributes.\n      IANA managed and assigned based on IETF Consensus [17].\n\
    \   o  The TLV type range of 128-191 is reserved to carry CB information\n   \
    \   in the EAP-Initiate/Re-auth and EAP-Finish/Re-auth messages.\n      Below\
    \ are the current assignments (all of them are TLVs):\n      *  Called-Station-Id:\
    \ 128\n      *  Calling-Station-Id: 129\n      *  NAS-Identifier: 130\n      *\
    \  NAS-IP-Address: 131\n      *  NAS-IPv6-Address: 132\n      133-191: Used to\
    \ carry other channel-binding-related attributes.\n      IANA managed and assigned\
    \ based on IETF Consensus [17].\n   o  192-255: Reserved for Private use.\n  \
    \ We specify creation of another registry, 'Re-authentication\n   Cryptosuites',\
    \ with the following assigned numbers:\n   o  0: Reserved\n   o  1: HMAC-SHA256-64\n\
    \   o  2: HMAC-SHA256-128\n   o  3: HMAC-SHA256-256\n   o  4-191: IANA managed\
    \ and assigned based on IETF consensus [17]\n   o  192-255: Reserved for Private\
    \ use.\n   Further, this document registers a Re-auth usage label from the \"\
    USRK\n   Key Labels\" name space with a value\n      EAP Re-authentication Root\
    \ Key@ietf.org\n   and DSRK-authorized delivery key from the \"USRK Key Labels\"\
    \ name\n   space\n      DSRK Delivery Authorized Key@ietf.org\n   in accordance\
    \ with [3].\n"
- title: 10.  Acknowledgments
  contents:
  - "10.  Acknowledgments\n   In writing this document, we benefited from discussing\
    \ the problem\n   space and the protocol itself with a number of folks including\n\
    \   Bernard Aboba, Jari Arkko, Sam Hartman, Russ Housley, Joe Salowey,\n   Jesse\
    \ Walker, Charles Clancy, Michaela Vanderveen, Kedar Gaonkar,\n   Parag Agashe,\
    \ Dinesh Dharmaraju, Pasi Eronen, Dan Harkins, Yoshi\n   Ohba, Glen Zorn, Alan\
    \ DeKok, Katrin Hoeper, and other participants of\n   the HOKEY working group.\
    \  The credit for the idea to use EAP-\n   Initiate/Re-auth-Start goes to Charles\
    \ Clancy, and the multiple link-\n   layer SAs idea to mitigate the DoS attack\
    \ goes to Yoshi Ohba.  Katrin\n   Hoeper suggested the use of the windowing technique\
    \ to handle\n   multiple simultaneous ER exchanges.  Many thanks to Pasi Eronen\
    \ for\n   the suggestion to use hexadecimal encoding for rIKname when sent as\n\
    \   part of keyName-NAI field.  Thanks to Bernard Aboba for suggestions\n   in\
    \ clarifying the EAP lock-step operation, and Joe Salowey and Glen\n   Zorn for\
    \ help in specifying AAA transport of ERP messages.  Thanks to\n   Sam Hartman\
    \ for the DSRK Authorization Indication mechanism.\n"
- title: 11.  References
  contents:
  - '11.  References

    '
- title: 11.1.  Normative References
  contents:
  - "11.1.  Normative References\n   [1]   Bradner, S., \"Key words for use in RFCs\
    \ to Indicate Requirement\n         Levels\", BCP 14, RFC 2119, March 1997.\n\
    \   [2]   Aboba, B., Blunk, L., Vollbrecht, J., Carlson, J., and H.\n        \
    \ Levkowetz, \"Extensible Authentication Protocol (EAP)\",\n         RFC 3748,\
    \ June 2004.\n   [3]   Salowey, J., Dondeti, L., Narayanan, V., and M. Nakhjiri,\n\
    \         \"Specification for the Derivation of Root Keys from an Extended\n \
    \        Master Session Key (EMSK)\", RFC 5295, August 2008.\n   [4]   Aboba,\
    \ B., Beadles, M., Arkko, J., and P. Eronen, \"The Network\n         Access Identifier\"\
    , RFC 4282, December 2005.\n   [5]   Krawczyk, H., Bellare, M., and R. Canetti,\
    \ \"HMAC: Keyed-Hashing\n         for Message Authentication\", RFC 2104, February\
    \ 1997.\n"
- title: 11.2.  Informative References
  contents:
  - "11.2.  Informative References\n   [6]   Arkko, J. and H. Haverinen, \"Extensible\
    \ Authentication Protocol\n         Method for 3rd Generation Authentication and\
    \ Key Agreement\n         (EAP-AKA)\", RFC 4187, January 2006.\n   [7]   Lopez,\
    \ R., Skarmeta, A., Bournelle, J., Laurent-Maknavicus, M.,\n         and J. Combes,\
    \ \"Improved EAP keying framework for a secure\n         mobility access service\"\
    , IWCMC '06, Proceedings of the 2006\n         International Conference on Wireless\
    \ Communications and Mobile\n         Computing, New York, NY, USA, 2006.\n  \
    \ [8]   Arbaugh, W. and B. Aboba, \"Handoff Extension to RADIUS\", Work\n    \
    \     in Progress, October 2003.\n   [9]   Clancy, T., Nakhjiri, M., Narayanan,\
    \ V., and L. Dondeti,\n         \"Handover Key Management and Re-Authentication\
    \ Problem\n         Statement\", RFC 5169, March 2008.\n   [10]  Institute of\
    \ Electrical and Electronics Engineers, \"IEEE\n         Standards for Local and\
    \ Metropolitan Area Networks: Port based\n         Network Access Control, IEEE\
    \ Std 802.1X-2004\", December 2004.\n   [11]  Nakhjiri, M. and Y. Ohba, \"Derivation,\
    \ delivery and management\n         of EAP based keys for handover and re-authentication\"\
    , Work\n         in Progress, February 2008.\n   [12]  Gaonkar, K., Dondeti, L.,\
    \ Narayanan, V., and G. Zorn, \"RADIUS\n         Support for EAP Re-authentication\
    \ Protocol\", Work in Progress,\n         February 2008.\n   [13]  Rigney, C.,\
    \ Willens, S., Rubens, A., and W. Simpson, \"Remote\n         Authentication Dial\
    \ In User Service (RADIUS)\", RFC 2865,\n         June 2000.\n   [14]  Aboba,\
    \ B. and P. Calhoun, \"RADIUS (Remote Authentication Dial\n         In User Service)\
    \ Support For Extensible Authentication Protocol\n         (EAP)\", RFC 3579,\
    \ September 2003.\n   [15]  Dondeti, L. and H. Tschofenig, \"Diameter Support\
    \ for EAP Re-\n         authentication Protocol\", Work in Progress, November\
    \ 2007.\n   [16]  Aboba, B., Zorn, G., and D. Mitton, \"RADIUS and IPv6\",\n \
    \        RFC 3162, August 2001.\n   [17]  Narten, T. and H. Alvestrand, \"Guidelines\
    \ for Writing an IANA\n         Considerations Section in RFCs\", BCP 26, RFC\
    \ 5226, May 2008.\n   [18]  Housley, R. and B. Aboba, \"Guidance for Authentication,\n\
    \         Authorization, and Accounting (AAA) Key Management\", BCP 132,\n   \
    \      RFC 4962, July 2007.\n"
- title: Appendix A.  Example ERP Exchange
  contents:
  - "Appendix A.  Example ERP Exchange\n   0. Authenticator --> Peer:  [EAP-Initiate/Re-auth-Start]\n\
    \   1. Peer --> Authenticator:  EAP Initiate/Re-auth(SEQ, keyName-NAI,\n     \
    \                           cryptosuite,Auth-tag*)\n   1a. Authenticator --> Re-auth-Server:\
    \ AAA-Request{Authenticator-Id,\n                                EAP Initiate/Re-auth(SEQ,keyName-NAI,\n\
    \                                cryptosuite,Auth-tag*)\n   2. ER-Server --> Authenticator:\
    \ AAA-Response{rMSK,\n                                EAP-Finish/Re-auth(SEQ,keyName-NAI,\n\
    \                                cryptosuite,[CB-Info],Auth-tag*)\n   2b. Authenticator\
    \ --> Peer: EAP-Finish/Re-auth(SEQ,keyName-NAI,\n                            \
    \    cryptosuite,[CB-Info],Auth-tag*)\n   * Auth-tag computation is over the entire\
    \ EAP Initiate/Finish\n     message; the code values for Initiate and Finish are\
    \ different and\n     thus reflection attacks are mitigated.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Vidya Narayanan\n   Qualcomm, Inc.\n   5775 Morehouse\
    \ Dr.\n   San Diego, CA  92121\n   USA\n   Phone: +1 858-845-2483\n   EMail: vidyan@qualcomm.com\n\
    \   Lakshminath Dondeti\n   Qualcomm, Inc.\n   5775 Morehouse Dr.\n   San Diego,\
    \ CA  92121\n   USA\n   Phone: +1 858-845-1267\n   EMail: ldondeti@qualcomm.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2008).\n   This document\
    \ is subject to the rights, licenses and restrictions\n   contained in BCP 78,\
    \ and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE\
    \ INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED,\
    \ INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION\
    \ HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY\
    \ OR FITNESS FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
