Public Key Cryptography for Initial Authentication in Kerberos (PKINIT)
This document updates the Public Key Cryptography for Initial Authentication in Kerberos (PKINIT) standard (RFC 4556) to remove protocol structures tied to specific cryptographic algorithms.
The PKINIT key derivation function is made negotiable, and the digest algorithms for signing the pre authentication data and the client's X.509 certificates are made discoverable.
These changes provide preemptive protection against vulnerabilities discovered in the future in any specific cryptographic algorithm and allow incremental deployment of newer algorithms.
The Public Key Cryptography for Initial Authentication in Kerberos (PKINIT) standard [RFC4556] defines several protocol structures that are either tied to SHA 1
[RFC6234] or do not support negotiation or discovery but are instead based on local policy:
The checksum algorithm in the authentication request is hardwired to use SHA 1.
The acceptable digest algorithms for signing the authentication data are not discoverable.
The key derivation function in Section 3.2.3.1 of [RFC4556] is hardwired to use SHA 1.
The acceptable digest algorithms for signing the client X.509 certificates are not discoverable.
In August 2004, Xiaoyun Wang's research group reported MD4 [RFC6150] collisions [WANG04], alongside attacks on later hash functions including MD5 [RFC1321] and SHA 1 [RFC6234].
These attacks and their consequences are discussed in [RFC6194].
These discoveries challenged the security of protocols relying on the collision  resistance properties of these hashes.
The Internet Engineering Task Force (IETF) called for action to update existing protocols to provide crypto algorithm agility so that protocols support multiple cryptographic algorithms (including hash functions) and provide clean, tested transition strategies between algorithms, as recommended by BCP 201 [RFC7696].
To address these concerns, new key derivation functions (KDFs), identified by object identifiers, are defined.
The PKINIT client provides a list of KDFs in the request, and the Key Distribution Center (KDC) picks one in the response.
Thus, a mutually supported KDF is negotiated.
Furthermore, structures are defined to allow the client to discover the Cryptographic Message Syntax (CMS)
digest algorithms supported by the KDC for signing the pre authentication data and the client X.509 certificate.
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in BCP 14
when, and only when, they appear in all capitals, as shown here.
The paChecksum defined in Section 3.2.1 of [RFC4556] provides a cryptographic binding between the client's pre authentication data and the corresponding Kerberos request body.
This also prevents the KDC REQ body from being tampered with.
SHA 1 is the only allowed checksum algorithm defined in [RFC4556].
This facility relies on the collision resistance properties of the SHA 1 checksum [RFC6234].
When the reply key delivery mechanism is based on public key encryption as described in Section 3.2.3.2 of [RFC4556], the asChecksum in the KDC reply provides integrity protection for the unauthenticated clear text in these messages and the binding between the pre authentication and the ticket request and response messages.
However, if the reply key delivery mechanism is based on the Diffie  Hellman key agreement as described in Section 3.2.3.1 of [RFC4556], the security provided by using SHA 1 in the paChecksum is weak, and nothing else cryptographically binds the Authentication Service (AS) request to the ticket response.
In this case, the new KDF selected by the KDC, as described in Section 6, provides the cryptographic binding and integrity protection.
CMS Digest Algorithm Agility Section 3.2.2 of [RFC4556] is updated to add optional typed data to the KDC ERR DIGEST IN SIGNED DATA
When a KDC implementation conforming to this specification returns this error code, it MAY include a list of supported CMS types signifying the digest algorithms supported by the KDC in decreasing order of preference.
This is accomplished by including a TD CMS DATA DIGEST ALGORITHMS typed data element in the error data.
The corresponding data for the TD CMS DATA DIGEST ALGORITHMS contains the TD CMS DIGEST ALGORITHMS DATA structure, which is ASN.1 Distinguished Encoding Rules (DER)
[X680] [X690] encoded and is defined as follows: TD CMS DIGEST
Contains the list of CMS algorithm [RFC5652]   identifiers indicating the digest algorithms   acceptable to the KDC for signing CMS data in
The algorithm identifiers in TD CMS DIGEST ALGORITHMS identify the digest algorithms supported by the KDC.
This information sent by the KDC via TD CMS DATA DIGEST ALGORITHMS can facilitate troubleshooting when none of the digest algorithms supported by the client is supported by the KDC.
X.509 Certificate Signer Algorithm Agility Section 3.2.2 of [RFC4556] is updated to add optional typed data to the KDC ERR DIGEST IN CERT NOT ACCEPTED error.
When a KDC conforming to this specification returns this error, it MAY send a list of digest algorithms acceptable to the KDC for use by the certification authority (CA) in signing the client's X.509 certificate in decreasing order of preference.
This is accomplished by including a TD CERT DIGEST
ALGORITHMS typed data element in the error data.
Contains the list of CMS algorithm [RFC5652]   identifiers indicating the digest algorithms   that are used by the CA to sign the client's   X.509 certificate and are acceptable to the KDC   in the process of validating the client's X.509   certificate in decreasing order of   preference.
This identifies the digest algorithm that was   used to sign the client's X.509 certificate and   has been rejected by the KDC in the process of   validating the client's X.509 certificate
The KDC fills in the allowedAlgorithm field with the list of algorithm [RFC5652] identifiers indicating digest algorithms that are used by the CA to sign the client's X.509 certificate and are acceptable to the KDC in the process of validating the client's X.509 certificate in decreasing order of preference.
The rejectedAlgorithm field identifies the signing algorithm for use in signing the client's X.509 certificate that has been rejected by the KDC in the process of validating the client's certificate [RFC5280].
KDF Agility Section 3.2.3.1 of [RFC4556] is updated to define additional key derivation functions (KDFs) to derive a Kerberos protocol key based on the secret value generated by the Diffie Hellman key exchange.
Section 3.2.1 of [RFC4556] is updated to add a new field to the AuthPack structure to indicate which new KDFs are supported by the client.
Section 3.2.3 of [RFC4556] is updated to add a new field to the DHRepInfo structure to indicate which KDF is selected by the KDC.
The KDF algorithm described in this document (based on [SP80056A])
can be implemented using any cryptographic hash function.
A new KDF for PKINIT usage is identified by an object identifier.
The following KDF object identifiers are defined:
id pkinit kdf ah sha1
56A ASN.1 structured hash based KDF using SHA 1
56A ASN.1 structured hash based KDF using SHA 256
56A ASN.1 structured hash based KDF using SHA 512
56A ASN.1 structured hash based KDF using SHA 384
Where id pkinit is defined in [RFC4556].
All key derivation functions specified above use the one step key derivation method described in Section 5.8.2.1 of [SP80056A], choosing the ASN.1 format for FixedInfo, and Section 4.1 of [SP80056C], choosing option 1 for the auxiliary function H.
id pkinit kdf ah sha1 uses SHA 1
[RFC6234] as the hash function.
d pkinit kdf ah sha256
, id pkinit kdf ah  sha356, and id pkinit kdf ah sha512 use SHA 256
[RFC6234], SHA 384 [RFC6234], and SHA 512 [RFC6234], respectively.
To name the input parameters, an abbreviated version of the key derivation method is described below.
Initialize a 32 bit, big endian bit string counter as 1.
For i   1 to reps by 1, do the following: 1.
Compute Hashi   H(counter    Z    OtherInfo).
Increment counter (not to exceed 2^32 1) 4.
The above KDF produces a bit string of length L in bits as the keying material.
The AS reply key is the output of random to  key()
[RFC3961], using that keying material as the input.
The input parameters for these KDFs are provided as follows:
H outputBits is 160 bits for id pkinit kdf ah sha1, 256 bits for id pkinit kdf ah sha256, 384 bits for id pkinit kdf ah sha384, and 512 bits for id pkinit kdf ah sha512.
max H inputBits is 2^64.
The secret value (Z) is the shared secret value generated by the Diffie Hellman exchange.
The Diffie Hellman shared value is first padded with leading zeros such that the size of the secret value in octets is the same as that of the modulus, then represented as a string of octets in big endian order.
The key data length (L) is the key generation seed length in bits [RFC3961] for the Authentication Service (AS) reply key.
The enctype of the AS reply key is selected according to [RFC4120].
input parameter is the identifier of the respective KDF.
For example, this is i
if the KDF uses SHA 1 as the hash.
The initiator identifier (partyUInfo) contains the ASN.1 DER encoding of the KRB5PrincipalName [RFC4556] that identifies the client as specified in the AS REQ [RFC4120] in the request.
The recipient identifier (partyVInfo) contains the ASN.1 DER encoding of the KRB5PrincipalName [RFC4556] that identifies the ticket granting server (TGS) as specified in the AS REQ [RFC4120] in the request.
The supplemental public information (suppPubInfo) is the ASN.1 DER encoding of the PkinitSuppPubInfo structure, as defined later in this section.
The supplemental private information (suppPrivInfo) is absent.
[2] OCTET STRING OPTIONAL, suppPrivInfo
[3] OCTET STRING OPTIONAL }
The PkinitSuppPubInfo structure is defined as follows:
Int32,   The enctype of the AS reply key.
OCTET STRING,   The DER encoding of the PA PK AS REP [RFC4556] in the   KDC reply.
The PkinitSuppPubInfo structure contains mutually known public information specific to the authentication exchange.
The enctype field is the enctype of the AS reply key as selected according to [RFC4120].
The as REQ field contains the DER encoding of the AS REQ type [RFC4120] in the request sent from the client to the KDC.
Note that the as REQ field does not include the wrapping 4 octet length when TCP is used.
The pk as rep field contains the DER encoding of the PA PK AS REP [RFC4556] type in the KDC reply.
The PkinitSuppPubInfo provides a cryptographic binding between the pre  authentication data and the corresponding ticket request and response, thus addressing the concerns described in Section 3.
The KDF is negotiated between the client and the KDC.
The client sends an unordered set of supported KDFs in the request, and the KDC picks one from the set in the reply.
To accomplish this, the AuthPack structure in [RFC4556] is extended as follows:
[4] SEQUENCE OF KDFAlgorithmId OPTIONAL,   Contains an unordered set of KDFs supported by the   client.
The new supportedKDFs field contains an unordered set of KDFs supported by the client.
The KDFAlgorithmId structure contains an object identifier that identifies a KDF.
The algorithm of the KDF and its parameters are defined by the corresponding specification of that KDF.
The DHRepInfo structure in [RFC4556] is extended as follows:
The new kdf field in the extended DHRepInfo structure identifies the KDF picked by the KDC.
If the supportedKDFs field is present in the request, a KDC conforming to this specification MUST choose one of the KDFs supported by the client and indicate its selection in the kdf field in the reply.
If the supportedKDFs field is absent in the request, the KDC MUST omit the kdf field in the reply and use the key derivation function from Section 3.2.3.1 of [RFC4556].
If none of the KDFs supported by the client is acceptable to the KDC, the KDC MUST reply with the new error code KDC ERR
If the client fills the supportedKDFs field in the request but the kdf field in the reply is not present, the client can deduce that the KDC is not updated to conform with this specification, or that the exchange was subjected to a downgrade attack.
It is a matter of local policy on the client whether to reject the reply when the kdf field is absent in the reply; if compatibility with non updated KDCs is not a concern, the reply should be rejected.
Implementations conforming to this specification MUST support i
d pkinit kdf ah sha256.
An old client interoperating with a new KDC will not recognize a TD CMS DIGEST ALGORITHMS DATA element in a KDC ERR DIGEST IN SIGNED DATA
NOT ACCEPTED error or a TD CERT DIGEST
ALGORITHMS DATA element in a KDC ERR DIGEST IN CERT
Because the error data is encoded as typed data, the client will ignore the unrecognized elements.
An old KDC interoperating with a new client will not include a TD CMS DIGEST ALGORITHMS DATA element in a KDC ERR DIGEST IN SIGNED DATA
NOT ACCEPTED error or a TD CERT DIGEST
ALGORITHMS DATA element in a KDC ERR DIGEST IN CERT
To the client, this appears just as if a new KDC elected not to include a list of digest algorithms.
An old client interoperating with a new KDC will not include the supportedKDFs field in the request.
The KDC MUST omit the kdf field in the reply and use the [RFC4556] KDF as expected by the client or reject the request if local policy forbids use of the old KDF.
A new client interoperating with an old KDC will include the supportedKDFs field in the request; this field will be ignored as an unknown extension by the KDC.
The KDC will omit the kdf field in the reply and will use the [RFC4556] KDF.
The client can deduce from the omitted kdf field that the KDC is not updated to conform to this specification or that the exchange was subjected to a downgrade attack.
The client MUST use the [RFC4556] KDF or reject the reply if local policy forbids the use of the old KDF.
This section contains test vectors for the KDF defined above.
Length   256 bytes, Hex Representation   (All Zerosclient:
Length   9 bytes, ASCII Representation
lha@SU.SE server: Length   18 bytes, ASCII Representation   krbtgt/SU.SE@SU.SE as req:
Length   10 bytes, Hex Representation   AAAAAAAA AAAAAAAA AAAA pk as rep:
Length   9 bytes, Hex Representation
Length    55 bytes, Hex Representation
Test Vector for SHA 1, enctype 18 8.2.1.
(id pkinit kdf ah sha1) Length   8 bytes, Hex Representation   2B060105 02030601 enctype:
(aes256 cts hmac sha1 96)
Length   1 byte, Decimal Representation   18 8.2.2.
Length   32 bytes, Hex Representation   E6AB38C9 413E035B B079201E
Length   32 bytes, Hex Representation   E6AB38C9 413E035B B079201E
Test Vector for SHA 256, enctype 18 8.3.1.
(id pkinit kdf ah sha256)
Length   8 bytes, Hex Representation
(aes256 cts hmac sha1 96)
Length   1 byte, Decimal Representation
Length   32 bytes, Hex Representation   77EF4E48 C420AE3F
FA9bC1D5 key: Length   32 bytes, Hex Representation   77EF4E48 C420AE3F
Test Vector for SHA 512, enctype 16 8.4.1.
(id pkinit kdf ah sha512)
Length   8 bytes, Hex Representation
Length   1 byte, Decimal Representation
Length   24 bytes, Hex Representation   D3C78A79 D65213EF E9A826F7 5DFB01F7 2362FB16
Length   32 bytes, Hex Representation   D3C78A79
This document describes negotiation of checksum types, key derivation functions, and other cryptographic functions.
If a given negotiation is unauthenticated, care must be taken to accept only secure values; to do otherwise allows an active attacker to perform a downgrade attack.
The discovery method described in Section 4 uses a Kerberos error message, which is unauthenticated in a typical exchange.
An attacker may attempt to downgrade a client to a weaker CMS type by forging a KDC ERR DIGEST IN SIGNED DATA
It is a matter of local policy whether a client accepts a downgrade to a weaker CMS type and whether the KDC accepts the weaker CMS type.
A client may reasonably assume that the real KDC implements all hash functions used in the client's X.509 certificate, and so the client may refuse attempts to downgrade to weaker hash functions.
The discovery method described in Section 5 also uses a Kerberos error message.
An attacker may attempt to downgrade a client to a certificate using a weaker signing algorithm by forging a KDC ERR DIGEST IN CERT
It is a matter of local policy whether a client accepts a downgrade to a weaker certificate and whether the KDC accepts the weaker certificate.
This attack is only possible if the client device possesses multiple client certificates of varying strengths.
In the KDF negotiation method described in Section 6, the client supportedKDFs value is protected by the signature on the signedAuthPack field in the request.
If this signature algorithm is vulnerable to collision attacks, an attacker may attempt to downgrade the negotiation by substituting an AuthPack with a different or absent supportedKDFs value, using a PKINIT freshness token [RFC8070] to partially control the legitimate AuthPack value.
A client that is performing anonymous PKINIT [RFC8062] does not sign the AuthPack, so an attacker can easily remove the supportedKDFs value in this case.
Finally, the kdf field in the DHRepInfo of the KDC response is unauthenticated and could be altered or removed by an attacker, although this alteration will likely result in a decryption failure by the client rather than a successful downgrade.
It is a matter of local policy whether a client accepts a downgrade to the old KDF and whether the KDC allows the use of the old KDF.
The paChecksum field, which binds the client pre authentication data to the Kerberos request body, remains fixed at SHA 1.
If an attacker substitutes a different request body using an attack against SHA 1 (a second preimage attack is likely required as the attacker does not control any part of the legitimate request body), the KDC will not detect the substitution.
Instead, if a new KDF is negotiated, the client will detect the substitution by failing to decrypt the reply.
An attacker may attempt to impersonate the KDC to the client via an attack on the hash function used in the dhSignedData signature, substituting the attacker's subjectPublicKey for the legitimate one without changing the hash value.
It is a matter of local policy which hash function the KDC uses in its signature and which hash functions the client will accept in the KDC signature.
A KDC may reasonably assume that the client implements all hash functions used in the KDF algorithms listed the supportedKDFs field of the request.
IANA Considerations IANA has made the following assignments in the Kerberos
"Pre  authentication and Typed Data" registry created by Section 7.1 of RFC 6113.
PK INIT Agility SPEC { iso(1) identified organization(3) dod(6)
FROM PKIX1Explicit88 { iso (1) identified organization (3)
dod (6) internet (1) security (5) mechanisms (5) pkix (7)
As defined in RFC 5280.
Ticket, Int32, Realm, EncryptionKey, Checksum FROM KerberosV5Spec2 { iso(1) identified organization(3) dod(6)
PK INIT SPEC { iso(1) identified organization(3)
id pkinit kdf ah sha1
56A ASN.1 structured hash based KDF using SHA 1
56A ASN.1 structured hash based KDF using SHA 256
56A ASN.1 structured hash based KDF using SHA 512
56A ASN.1 structured hash based KDF using SHA 384 TD CMS DIGEST ALGORITHMS DATA ::
Contains the list of CMS algorithm [RFC5652]   identifiers indicating the digest algorithms   acceptable to the KDC for signing CMS data in
This identifies the digest algorithm that was   used to sign the client's X.509 certificate and   has been rejected by the KDC in the process of   validating the client's X.509 certificate
[2] OCTET STRING OPTIONAL, suppPrivInfo
OCTET STRING OPTIONAL } PkinitSuppPubInfo ::
OCTET STRING,   The DER encoding of the PA PK AS REP [RFC4556] in the   KDC reply.
[4] SEQUENCE OF KDFAlgorithmId OPTIONAL,   Contains an unordered set of KDFs supported by the   client.
The object identifier of the KDF ...
The KDF picked by the KDC.
