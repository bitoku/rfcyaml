- contents:
  - "          Guidelines for Choosing RTP Control Protocol (RTCP)\n                        Canonical
    Names (CNAMEs)\n"
  title: __initial_text__
- contents:
  - "Abstract\n   The RTP Control Protocol (RTCP) Canonical Name (CNAME) is a\n   persistent
    transport-level identifier for an RTP endpoint.  While the\n   Synchronization
    Source (SSRC) identifier of an RTP endpoint may\n   change if a collision is detected
    or when the RTP application is\n   restarted, its RTCP CNAME is meant to stay
    unchanged, so that RTP\n   endpoints can be uniquely identified and associated
    with their RTP\n   media streams.\n   For proper functionality, RTCP CNAMEs should
    be unique within the\n   participants of an RTP session.  However, the existing
    guidelines for\n   choosing the RTCP CNAME provided in the RTP standard (RFC 3550)
    are\n   insufficient to achieve this uniqueness.  RFC 6222 was published to\n
    \  update those guidelines to allow endpoints to choose unique RTCP\n   CNAMEs.
    \ Unfortunately, later investigations showed that some parts\n   of the new algorithms
    were unnecessarily complicated and/or\n   ineffective.  This document addresses
    these concerns and replaces RFC\n   6222.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7022.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2013 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n
    \  2. Requirements Notation ...........................................3\n   3.
    Deficiencies with Earlier Guidelines for Choosing an\n      RTCP CNAME ......................................................3\n
    \  4. Choosing an RTCP CNAME ..........................................4\n      4.1.
    Persistent RTCP CNAMEs versus Per-Session RTCP CNAMEs ......4\n      4.2. Requirements
    ...............................................5\n   5. Procedure to Generate
    a Unique Identifier .......................6\n   6. Security Considerations .........................................7\n
    \     6.1. Considerations on Uniqueness of RTCP CNAMEs ................7\n      6.2.
    Session Correlation Based on RTCP CNAMEs ...................7\n   7. Acknowledgments
    .................................................8\n   8. References ......................................................8\n
    \     8.1. Normative References .......................................8\n      8.2.
    Informative References .....................................8\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   In Section 6.5.1 of [RFC3550], there are a number of recommendations\n
    \  for choosing a unique RTCP CNAME for an RTP endpoint.  However, in\n   practice,
    some of these methods are not guaranteed to produce a\n   unique RTCP CNAME.  [RFC6222]
    updated the guidelines for choosing\n   RTCP CNAMEs, superseding those presented
    in Section 6.5.1 of\n   [RFC3550].  Unfortunately, some parts of the new algorithms
    are\n   rather complicated and also produce RTCP CNAMEs that, in some cases,\n
    \  are potentially linkable over multiple RTCP sessions even if a new\n   RTCP
    CNAME is generated for each session.  This document specifies a\n   replacement
    for the algorithm in Section 5 of [RFC6222], which does\n   not have this limitation
    and is also simpler to implement.\n   For a discussion on the linkability of RTCP
    CNAMEs produced by\n   [RFC6222], refer to [RESCORLA].\n"
  title: 1.  Introduction
- contents:
  - "2.  Requirements Notation\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\",
    \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT
    RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted
    as described in\n   [RFC2119].\n"
  title: 2.  Requirements Notation
- contents:
  - "3.  Deficiencies with Earlier Guidelines for Choosing an RTCP CNAME\n   The recommendation
    in [RFC3550] is to generate an RTCP CNAME of the\n   form \"user@host\" for multiuser
    systems, or \"host\" if the username is\n   not available.  The \"host\" part
    is specified to be the fully\n   qualified domain name (FQDN) of the host from
    which the real-time\n   data originates.  While this guidance was appropriate
    at the time\n   [RFC3550] was written, FQDNs are no longer necessarily unique
    and can\n   sometimes be common across several endpoints in large service\n   provider
    networks.  This document replaces the use of the FQDN as an\n   RTCP CNAME by
    alternative mechanisms.\n   IPv4 addresses are also suggested for use in RTCP
    CNAMEs in\n   [RFC3550], where the \"host\" part of the RTCP CNAME is the numeric\n
    \  representation of the IPv4 address of the interface from which the\n   RTP
    data originates.  As noted in [RFC3550], the use of private\n   network address
    space [RFC1918] can result in hosts having network\n   addresses that are not
    globally unique.  Additionally, this shared\n   use of the same IPv4 address can
    occur with public IPv4 addresses if\n   multiple hosts are assigned the same public
    IPv4 address and are\n   connected to a Network Address Translation (NAT) device
    [RFC3022].\n   When multiple hosts share the same IPv4 address, whether private
    or\n   public, using the IPv4 address as the RTCP CNAME leads to RTCP CNAMEs\n
    \  that are not necessarily unique.\n   It is also noted in [RFC3550] that if
    hosts with private addresses\n   and no direct IP connectivity to the public Internet
    have their RTP\n   packets forwarded to the public Internet through an RTP-level\n
    \  translator, they could end up having non-unique RTCP CNAMEs.  The\n   suggestion
    in [RFC3550] is that such applications provide a\n   configuration option to allow
    the user to choose a unique RTCP CNAME;\n   this technique puts the burden on
    the translator to translate RTCP\n   CNAMEs from private addresses to public addresses
    if necessary to\n   keep private addresses from being exposed.  Experience has
    shown that\n   this does not work well in practice.\n"
  title: 3.  Deficiencies with Earlier Guidelines for Choosing an RTCP CNAME
- contents:
  - "4.  Choosing an RTCP CNAME\n   It is difficult, and in some cases impossible,
    for a host to\n   determine if there is a NAT between itself and its RTP peer.\n
    \  Furthermore, even some public IPv4 addresses can be shared by\n   multiple
    hosts in the Internet.  Using the numeric representation of\n   the IPv4 address
    as the \"host\" part of the RTCP CNAME is NOT\n   RECOMMENDED.\n"
  - contents:
    - "4.1.  Persistent RTCP CNAMEs versus Per-Session RTCP CNAMEs\n   The RTCP CNAME
      can be either persistent across different RTP sessions\n   for an RTP endpoint
      or unique per session, meaning that an RTP\n   endpoint chooses a different
      RTCP CNAME for each RTP session.\n   An RTP endpoint that is emitting multiple
      related RTP streams that\n   require synchronization at the other endpoint(s)
      MUST use the same\n   RTCP CNAME for all streams that are to be synchronized.
      \ This\n   requires a short-term, persistent RTCP CNAME that is common across\n
      \  several RTP streams, and potentially across several related RTP\n   sessions.
      \ A common example of such use occurs when syncing audio and\n   video streams
      in a multimedia session, where a single participant has\n   to use the same
      RTCP CNAME for its audio RTP session and for its\n   video RTP session.  Another
      example might be to synchronize the\n   layers of a layered audio codec, where
      the same RTCP CNAME has to be\n   used for each layer.\n   If the multiple RTP
      streams in an RTP session are not related, and\n   thus do not require synchronization,
      an RTP endpoint can use\n   different RTCP CNAMEs for these streams.\n   A longer-term
      persistent RTCP CNAME is sometimes useful to facilitate\n   third-party monitoring,
      consistent with [RFC3550].  One such use\n   might be to allow network management
      tools to correlate the ongoing\n   quality of service for a participant across
      multiple RTP sessions for\n   fault diagnosis and to understand long-term network
      performance\n   statistics.  An application developer that wishes to discourage
      this\n   type of third-party monitoring can choose to generate a unique RTCP\n
      \  CNAME for each RTP session, or group of related RTP sessions, that\n   the
      application will join.  Such a per-session RTCP CNAME cannot be\n   used for
      traffic analysis, and so provides some limited form of\n   privacy.  Note that
      there are non-RTP means that can be used by a\n   third party to correlate RTP
      sessions, so the use of per-session RTCP\n   CNAMEs will not prevent a determined
      traffic analyst from monitoring\n   such sessions.\n   This memo defines several
      different ways by which an implementation\n   can choose an RTCP CNAME.  It
      is possible, and legitimate, for\n   independent implementations to make different
      choices of RTCP CNAME\n   when running on the same host.  This can hinder third-party\n
      \  monitoring, unless some external means is provided to configure a\n   persistent
      choice of RTCP CNAME for those implementations.\n   Note that there is no backwards
      compatibility issue (with\n   implementations compatible with [RFC3550]) introduced
      in this memo,\n   since the RTCP CNAMEs are opaque strings to remote peers.\n"
    title: 4.1.  Persistent RTCP CNAMEs versus Per-Session RTCP CNAMEs
  - contents:
    - "4.2.  Requirements\n   RTP endpoints will choose to generate RTCP CNAMEs that
      are persistent\n   or per-session.  An RTP endpoint that wishes to generate
      a persistent\n   RTCP CNAME MUST use one of the following two methods:\n   o
      \ To produce a long-term persistent RTCP CNAME, an RTP endpoint MUST\n      generate
      and store a Universally Unique IDentifier (UUID)\n      [RFC4122] for use as
      the \"host\" part of its RTCP CNAME.  The UUID\n      MUST be version 1, 2,
      or 4, as described in [RFC4122], with the\n      \"urn:uuid:\" stripped, resulting
      in a 36-octet printable string\n      representation.\n   o  To produce a short-term
      persistent RTCP CNAME, an RTP endpoint\n      MUST generate and use an identifier
      by following the procedure\n      described in Section 5.  That procedure is
      performed at least once\n      per initialization of the software.  After obtaining
      an\n      identifier, minimally the least significant 96 bits SHOULD be\n      converted
      to ASCII using Base64 encoding [RFC4648] (to compromise\n      between packet
      size and uniqueness -- refer to Section 6.1).  If\n      96 bits are used, the
      resulting string will be 16 octets.  Note\n      the Base64 encoded value cannot
      exceed the maximum RTCP CNAME\n      length of 255 octets [RFC3550].\n   In
      the two cases above, the \"user@\" part of the RTCP CNAME MAY be\n   omitted
      on single-user systems and MAY be replaced by an opaque token\n   on multiuser
      systems, to preserve privacy.\n   An RTP endpoint that wishes to generate a
      per-session RTCP CNAME MUST\n   use the following method:\n   o  For every new
      RTP session, a new RTCP CNAME is generated following\n      the procedure described
      in Section 5.  After performing that\n      procedure, minimally the least significant
      96 bits SHOULD be\n      converted to ASCII using Base64 encoding [RFC4648].
      \ The RTCP\n      CNAME cannot change over the life of an RTP session [RFC3550].\n
      \     The \"user@\" part of the RTCP CNAME is omitted when generating\n      per-session
      RTCP CNAMEs.\n   It is believed that obtaining uniqueness (with a high probability)
      is\n   an important property that requires careful evaluation of the method.\n
      \  This document provides a number of methods, at least one of which\n   would
      be suitable for any given deployment scenarios.  This document\n   therefore
      does not provide for the implementor to define and select\n   an alternative
      method.\n   A future specification might define an alternative method for\n
      \  generating RTCP CNAMEs, as long as the proposed method has\n   appropriate
      uniqueness and there is consistency between the methods\n   used for multiple
      RTP sessions that are to be correlated.  However,\n   such a specification needs
      to be reviewed and approved before\n   deployment.\n   The mechanisms described
      in this document are to be used to generate\n   RTCP CNAMEs, and they are not
      to be used for generating general-\n   purpose unique identifiers.\n"
    title: 4.2.  Requirements
  title: 4.  Choosing an RTCP CNAME
- contents:
  - "5.  Procedure to Generate a Unique Identifier\n   To locally produce a unique
    identifier, one simply generates a\n   cryptographically pseudorandom value as
    described in [RFC4086].  This\n   value MUST be at least 96 bits.\n   The biggest
    bottleneck to implementation of this algorithm is the\n   availability of an appropriate
    cryptographically secure pseudorandom\n   number generator (CSPRNG).  In any setting
    that already has a secure\n   PRNG, this algorithm described is far simpler than
    the algorithm\n   described in Section 5 of [RFC6222].  SIP stacks [RFC3261] are\n
    \  required to use cryptographically random numbers to generate To and\n   From
    tags (Section 19.3).  Real-Time Communications on the Web\n   (RTCWEB) implementations
    [ARCH] will need to have secure PRNGs to\n   implement ICE [RFC5245] and DTLS-SRTP
    [RFC5764].  And, of course,\n   essentially every Web browser already supports
    TLS, which requires a\n   secure PRNG.\n"
  title: 5.  Procedure to Generate a Unique Identifier
- contents:
  - "6.  Security Considerations\n   The security considerations of [RFC3550] apply
    to this memo.\n"
  - contents:
    - "6.1.  Considerations on Uniqueness of RTCP CNAMEs\n   The considerations in
      this section apply to random RTCP CNAMEs.\n   The recommendations given in this
      document for RTCP CNAME generation\n   ensure that a set of cooperating participants
      in an RTP session will,\n   with very high probability, have unique RTCP CNAMEs.
      \ However,\n   neither [RFC3550] nor this document provides any way to ensure
      that\n   participants will choose RTCP CNAMEs appropriately; thus,\n   implementations
      MUST NOT rely on the uniqueness of RTCP CNAMEs for\n   any essential security
      services.  This is consistent with [RFC3550],\n   which does not require that
      RTCP CNAMEs are unique within a session\n   but instead says that condition
      SHOULD hold.  As described in the\n   Security Considerations section of [RFC3550],
      because each\n   participant in a session is free to choose its own RTCP CNAME,
      they\n   can do so in such a way as to impersonate another participant.  That\n
      \  is, participants are trusted not to impersonate each other.  No\n   recommendation
      for generating RTCP CNAMEs can prevent this\n   impersonation, because an attacker
      can neglect the stipulation.\n   Secure RTP (SRTP) [RFC3711] keeps unauthorized
      entities out of an RTP\n   session, but it does not aim to prevent impersonation
      attacks from\n   authorized entities.\n   Because of the properties of the PRNG,
      there is no significant\n   privacy/linkability difference between long and
      short RTCP CNAMEs.\n   However, the requirement to generate unique RTCP CNAMEs
      implies a\n   certain minimum length.  A length of 96 bits allows on the order
      of\n   2^{40} RTCP CNAMEs globally before there is a large chance of\n   collision
      (there is about a 50% chance of one collision after 2^{48}\n   RTCP CNAMEs).\n"
    title: 6.1.  Considerations on Uniqueness of RTCP CNAMEs
  - contents:
    - "6.2.  Session Correlation Based on RTCP CNAMEs\n   Earlier recommendations
      for RTCP CNAME generation allowed a fixed\n   RTCP CNAME value, which allows
      an attacker to easily link separate\n   RTP sessions, eliminating the obfuscation
      provided by IPv6 privacy\n   addresses [RFC4941] or IPv4 Network Address Port
      Translation (NAPT)\n   [RFC3022].\n   This specification no longer describes
      a procedure to generate fixed\n   RTCP CNAME values, so RTCP CNAME values no
      longer provide such\n   linkage between RTP sessions.  This was necessary to
      eliminate such\n   linking by an attacker, but of course complicates linking
      by traffic\n   analysis devices (e.g., devices that are looking for dropped
      or\n   delayed packets).\n"
    title: 6.2.  Session Correlation Based on RTCP CNAMEs
  title: 6.  Security Considerations
- contents:
  - "7.  Acknowledgments\n   Thanks to Marc Petit-Huguenin, who suggested using UUIDs
    in\n   generating RTCP CNAMEs.  Also, thanks to David McGrew for providing\n   text
    for the Security Considerations section in RFC 6222.\n"
  title: 7.  Acknowledgments
- contents:
  - '8.  References

    '
  - contents:
    - "8.1.  Normative References\n   [RFC3550]  Schulzrinne, H., Casner, S., Frederick,
      R., and V.\n              Jacobson, \"RTP: A Transport Protocol for Real-Time\n
      \             Applications\", STD 64, RFC 3550, July 2003.\n   [RFC2119]  Bradner,
      S., \"Key words for use in RFCs to Indicate\n              Requirement Levels\",
      BCP 14, RFC 2119, March 1997.\n   [RFC4122]  Leach, P., Mealling, M., and R.
      Salz, \"A Universally\n              Unique IDentifier (UUID) URN Namespace\",
      RFC 4122, July\n              2005.\n   [RFC4648]  Josefsson, S., \"The Base16,
      Base32, and Base64 Data\n              Encodings\", RFC 4648, October 2006.\n
      \  [RFC4086]  Eastlake, D., Schiller, J., and S. Crocker, \"Randomness\n              Requirements
      for Security\", BCP 106, RFC 4086, June 2005.\n"
    title: 8.1.  Normative References
  - contents:
    - "8.2.  Informative References\n   [RFC6222]  Begen, A., Perkins, C., and D.
      Wing, \"Guidelines for\n              Choosing RTP Control Protocol (RTCP) Canonical
      Names\n              (CNAMEs)\", RFC 6222, April 2011.\n   [RFC1918]  Rekhter,
      Y., Moskowitz, R., Karrenberg, D., Groot, G., and\n              E. Lear, \"Address
      Allocation for Private Internets\", BCP\n              5, RFC 1918, February
      1996.\n   [RFC3022]  Srisuresh, P. and K. Egevang, \"Traditional IP Network\n
      \             Address Translator (Traditional NAT)\", RFC 3022, January\n              2001.\n
      \  [RFC3711]  Baugher, M., McGrew, D., Naslund, M., Carrara, E., and K.\n              Norrman,
      \"The Secure Real-time Transport Protocol (SRTP)\",\n              RFC 3711,
      March 2004.\n   [RFC4941]  Narten, T., Draves, R., and S. Krishnan, \"Privacy\n
      \             Extensions for Stateless Address Autoconfiguration in\n              IPv6\",
      RFC 4941, September 2007.\n   [RFC5245]  Rosenberg, J., \"Interactive Connectivity
      Establishment\n              (ICE): A Protocol for Network Address Translator
      (NAT)\n              Traversal for Offer/Answer Protocols\", RFC 5245, April\n
      \             2010.\n   [RFC5764]  McGrew, D. and E. Rescorla, \"Datagram Transport
      Layer\n              Security (DTLS) Extension to Establish Keys for the Secure\n
      \             Real-time Transport Protocol (SRTP)\", RFC 5764, May 2010.\n   [RFC3261]
      \ Rosenberg, J., Schulzrinne, H., Camarillo, G., Johnston,\n              A.,
      Peterson, J., Sparks, R., Handley, M., and E.\n              Schooler, \"SIP:
      Session Initiation Protocol\", RFC 3261,\n              June 2002.\n   [ARCH]
      \    Rescorla, E., \"WebRTC Security Architecture\", Work in\n              Progress,
      July 2013.\n   [RESCORLA] Rescorla, E., \"Random algorithm for RTP CNAME generation\",\n
      \             Work in Progress, July 2012.\n"
    title: 8.2.  Informative References
  title: 8.  References
- contents:
  - "Authors' Addresses\n   Ali Begen\n   Cisco\n   181 Bay Street\n   Toronto, ON
    \ M5J 2T3\n   CANADA\n   EMail: abegen@cisco.com\n   Colin Perkins\n   University
    of Glasgow\n   School of Computing Science\n   Glasgow  G12 8QQ\n   UK\n   EMail:
    csp@csperkins.org\n   Dan Wing\n   Cisco Systems, Inc.\n   170 West Tasman Drive\n
    \  San Jose, California  95134\n   USA\n   EMail: dwing@cisco.com\n   Eric Rescorla\n
    \  RTFM, Inc.\n   2064 Edgewood Drive\n   Palo Alto, CA  94303\n   USA\n   Phone:
    +1 650 678 2350\n   EMail: ekr@rtfm.com\n"
  title: Authors' Addresses
