- contents:
  - "                         Definition of the URL\n                     MIME External-Body
    Access-Type\n"
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "1.  Abstract\n   This memo defines a new access-type for message/external-body
    MIME\n   parts for Uniform Resource Locators (URLs).  URLs provide schemes to\n
    \  access external objects via a growing number of protocols, including\n   HTTP,
    Gopher, and TELNET.  An initial set of URL schemes are defined\n   in RFC 1738.\n"
  title: 1.  Abstract
- contents:
  - "2.  Introduction\n   The Multipurpose Internet Message Extensions (MIME) define
    a facility\n   whereby an object can contain a reference or pointer to some form
    of\n   data rather than the actual data itself. This facility is embodied in\n
    \  the message/external-body media type defined in RFC 1521.  Use of\n   this
    facility is growing as a means of conserving bandwidth when\n   large objects
    are sent to large mailing lists.\n   Each message/external-body reference must
    specify a mechanism whereby\n   the actual data can be retrieved.  These mechanisms
    are called access\n   types, and RFC 1521 defines an initial set of access types:
    \"FTP\",\n   \"ANON-FTP\", \"TFTP\", \"LOCAL-FILE\", and \"MAIL-SERVER\".\n   Uniform
    Resource Locators, or URLs, also provide a means by which\n   remote data can
    be retrieved automatically.  Each URL string begins\n   with a scheme specification,
    which in turn specifies how the\n   remaining string is to be used in conjunction
    with some protocol to\n   retrieve the data. However, URL schemes exist for protocol
    operations\n   that have no corresponding MIME message/external-body access type.\n
    \  Registering an access type for URLs therefore provides\n   message/external-body
    with access to the retrieval mechanisms of URLs\n   that are not currently available
    as access types.  It also provides\n   access to any future mechanisms for which
    URL schemes are developed.\n   This access type is only intended for use with
    URLs that actually\n   retreive something. Other URL mechansisms, e.g.  mailto,
    may not be\n   used in this context.\n"
  title: 2.  Introduction
- contents:
  - "3.  Definition of the URL Access-Type\n   The URL access-type is defined as follows:\n
    \   (1)   The name of the access-type is URL.\n    (2)   A new message/external-body
    content-type parameter is\n          used to actually store the URL string. The
    name of the\n          parameter is also \"URL\", and this parameter is\n          mandatory
    for this access-type. The syntax and use of\n          this parameter is specified
    in the next section.\n    (3)   The phantom body area of the message/external-body
    is\n          not used and should be left blank.\n   For example, the following
    message illustrates how the URL access-\n   type is used:\n    Content-type: message/external-body;
    access-type=URL;\n                  URL=\"http://www.foo.com/file\"\n    Content-type:
    text/html\n    Content-Transfer-Encoding: binary\n    THIS IS NOT REALLY THE BODY!\n"
  - contents:
    - "3.1.  Syntax and Use of the URL parameter\n   Using the ANBF notations and
      definitions of RFC 822 and RFC 1521, the\n   syntax of the URL parameter Is
      as follows:\n     URL-parameter := <\"> URL-word *(*LWSP-char URL-word) <\">\n
      \    URL-word := token\n                 ; Must not exceed 40 characters in
      length\n   The syntax of an actual URL string is given in RFC 1738.  URL strings\n
      \  can be of any length and can contain arbitrary character content.\n   This
      presents problems when URLs are embedded in MIME body part\n   headers that
      are wrapped according to RFC 822 rules. For this reason\n   they are transformed
      into a URL-parameter for inclusion in a\n   message/external-body content-type
      specification as follows:\n    (1)   A check is made to make sure that all occurrences
      of\n          SPACE, CTLs, double quotes, backslashes, and 8-bit\n          characters
      in the URL string are already encoded using\n          the URL encoding scheme
      specified in RFC 1738. Any\n          unencoded occurrences of these characters
      must be\n          encoded.  Note that the result of this operation is\n          nothing
      more than a different representation of the\n          original URL.\n    (2)
      \  The resulting URL string is broken up into substrings\n          of 40 characters
      or less.\n    (3)   Each substring is placed in a URL-parameter string as a\n
      \         URL-word, separated by one or more spaces.  Note that\n          the
      enclosing quotes are always required since all URLs\n          contain one or
      more colons, and colons are tspecial\n          characters [RFC 1521].\n   Extraction
      of the URL string from the URL-parameter is even simpler:\n   The enclosing
      quotes and any linear whitespace are removed and the\n   remaining material
      is the URL string.\n   The following example shows how a long URL is handled:\n
      \    Content-type: message/external-body; access-type=URL;\n                   URL=\"ftp://ftp.deepdirs.org/1/2/3/4/5/6/7/\n
      \                       8/9/10/11/12/13/14/15/16/17/18/20/21/\n                        file.html\"\n
      \    Content-type: text/html\n     Content-Transfer-Encoding: binary\n     THIS
      IS NOT REALLY THE BODY!\n   Some URLs may provide access to multiple versions
      of the same object\n   in different formats. The HTTP URL mechanism has this
      capability, for\n   example.  However, applications may not expect to receive
      something\n   whose type doesn't agree with that expressed in the\n   message/external-body,
      and may in fact have already made irrevocable\n   choices based on this information.\n
      \  Due to these considerations, the following restriction is imposed:\n   When
      URLs are used in the context of an access-type only those\n   versions of an
      object whose content-type agrees with that specified\n   by the inner message/external-body
      header can be retrieved and used.\n"
    title: 3.1.  Syntax and Use of the URL parameter
  title: 3.  Definition of the URL Access-Type
- contents:
  - "4.  Security Considerations\n   The security considerations of using URLs in
    the context of a MIME\n   access-type are no different from the concerns that
    arise from their\n   use in other contexts. The specific security considerations\n
    \  associated with each type of URL are discussed in the URL's defining\n   document.\n
    \  Note that the Content-MD5 field can be used in conjunction with any\n   message/external-body
    access-type to provide an integrity check. This\n   insures that the referenced
    object really is what the message\n   originator intended it to be. This is not
    a signature service and\n   should not be confused with one, but nevetheless is
    quite useful in\n   many situations.\n"
  title: 4.  Security Considerations
- contents:
  - "5.  Acknowledgements\n   The authors are grateful for the feedback and review
    provided by John\n   Beck and John Klensin.\n"
  title: 5.  Acknowledgements
- contents:
  - "6.  References\n   [RFC-822]\n        Crocker, D., \"Standard for the Format
    of ARPA Internet\n        Text Messages\", STD 11, RFC 822, UDEL, August 1982.\n
    \  [RFC-1521]\n        Borenstein, N. and N. Freed, \"MIME (Multipurpose\n        Internet
    Mail Extensions): Mechanisms for Specifying and\n        Describing the Format
    of Internet Message Bodies\", RFC\n        1521, Bellcore, Innosoft, September,
    1993.\n   [RFC-1590]\n        Postel, J., \"Media Type Registration Procedure\",
    RFC\n        1590, USC/Information Sciences Institute, March 1994.\n   [RFC-1738]\n
    \       Berners-Lee, T., Masinter, L., and M. McCahill, \"Uniform\n        Resource
    Locators (URL)\", December 1994.\n"
  title: 6.  References
- contents:
  - "7.  Authors' Addresses\n   Ned Freed\n   Innosoft International, Inc.\n   1050
    East Garvey Avenue South\n   West Covina, CA 91790\n   USA\n   Phone: +1 818 919
    3600\n   Fax: +1 818 919 3614\n   EMail: ned@innosoft.com\n   Keith Moore\n   Computer
    Science Dept.\n   University of Tennessee\n   107 Ayres Hall\n   Knoxville, TN
    37996-1301\n   USA\n   EMail: moore@cs.utk.edu\n"
  title: 7.  Authors' Addresses
