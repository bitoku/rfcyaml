- title: __initial_text__
  contents:
  - '              IPv6 and UDP Checksums for Tunneled Packets

    '
- title: Abstract
  contents:
  - "Abstract\n   This document updates the IPv6 specification (RFC 2460) to improve\n\
    \   performance when a tunnel protocol uses UDP with IPv6 to tunnel\n   packets.\
    \  The performance improvement is obtained by relaxing the\n   IPv6 UDP checksum\
    \ requirement for tunnel protocols whose header\n   information is protected on\
    \ the \"inner\" packet being carried.\n   Relaxing this requirement removes the\
    \ overhead associated with the\n   computation of UDP checksums on IPv6 packets\
    \ that carry the tunnel\n   protocol packets.  This specification describes how\
    \ the IPv6 UDP\n   checksum requirement can be relaxed when the encapsulated packet\n\
    \   itself contains a checksum.  It also describes the limitations and\n   risks\
    \ of this approach and discusses the restrictions on the use of\n   this method.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6935.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2013 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  3\n   2.  Terminology  . . . . . . . . . . . . . . . . . . . .\
    \ . . . . .  4\n     2.1.  Requirements Language  . . . . . . . . . . . . . .\
    \ . . . .  4\n   3.  Problem Statement  . . . . . . . . . . . . . . . . . . .\
    \ . . .  4\n   4.  Discussion . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . .  4\n     4.1.  Analysis of Corruption in Tunnel Context . . . . . . . .\
    \ .  5\n     4.2.  Limitation to Tunnel Protocols . . . . . . . . . . . . . .\
    \  7\n     4.3.  Middleboxes  . . . . . . . . . . . . . . . . . . . . . . .  8\n\
    \   5.  The Zero UDP Checksum Update . . . . . . . . . . . . . . . . .  9\n  \
    \ 6.  Additional Observations  . . . . . . . . . . . . . . . . . . . 10\n   7.\
    \  Security Considerations  . . . . . . . . . . . . . . . . . . . 10\n   8.  Acknowledgments\
    \  . . . . . . . . . . . . . . . . . . . . . . . 11\n   9.  References . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . 11\n     9.1.  Normative References\
    \ . . . . . . . . . . . . . . . . . . . 11\n     9.2.  Informative References\
    \ . . . . . . . . . . . . . . . . . . 11\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document constitutes an update of the IPv6 specification\n\
    \   [RFC2460] for cases where a tunnel protocol uses UDP with IPv6 to\n   tunnel\
    \ packets.  With the rapid growth of the Internet, tunnel\n   protocols have become\
    \ increasingly important to enable the deployment\n   of new protocols.  Tunnel\
    \ protocols can be deployed rapidly, while\n   the time to upgrade and deploy\
    \ a new protocol on a critical mass of\n   routers, middleboxes, and hosts on\
    \ the global Internet is now\n   measured in decades.  At the same time, the increasing\
    \ use of\n   firewalls and other security-related middleboxes means that truly\
    \ new\n   tunnel protocols, with new protocol numbers, are also unlikely to be\n\
    \   deployable in a reasonable time frame.  The result is an increasing\n   interest\
    \ in and use of UDP-based tunnel protocols.  In such\n   protocols, there is an\
    \ encapsulated \"inner\" packet, and the \"outer\"\n   packet carrying the tunneled\
    \ inner packet is a UDP packet, which can\n   pass through firewalls and other\
    \ middleboxes that perform the\n   filtering that is a fact of life on the current\
    \ Internet.\n   Tunnel endpoints may be routers or middleboxes aggregating traffic\n\
    \   from a number of tunnel users.  Therefore, the computation of an\n   additional\
    \ checksum on the outer UDP packet may be seen as an\n   unwarranted burden on\
    \ nodes that implement a tunnel protocol,\n   especially if the inner packets\
    \ are already protected by a checksum.\n   IPv4 has a checksum over the IP packet\
    \ header, and the checksum on\n   the outer UDP packet may be set to zero.  However,\
    \ IPv6 has no\n   checksum in the IP header, and RFC 2460 [RFC2460] explicitly\
    \ states\n   that IPv6 receivers MUST discard UDP packets with a zero checksum.\n\
    \   So, while sending a UDP datagram with a zero checksum is permitted in\n  \
    \ IPv4 packets, it is explicitly forbidden in IPv6 packets.  To improve\n   support\
    \ for IPv6 UDP tunnels, this document updates RFC 2460 to allow\n   endpoints\
    \ to use a zero UDP checksum under constrained situations\n   (primarily for IPv6\
    \ tunnel transports that carry checksum-protected\n   packets), following the\
    \ applicability statements and constraints in\n   [RFC6936].\n   When reading\
    \ this document, the advice in \"Unicast UDP Usage\n   Guidelines for Application\
    \ Designers\" [RFC5405] is applicable.  It\n   discusses both UDP tunnels (Section\
    \ 3.1.3) and the usage of checksums\n   (Section 3.4).\n   While the origin of\
    \ this specification is the problem raised by the\n   draft titled \"Automatic\
    \ Multicast Tunnels\", also known as \"AMT\"\n   [AMT], we expect it to have wide\
    \ applicability.  Since the first\n   draft of this RFC was written, the need\
    \ for an efficient UDP\n   tunneling mechanism has increased.  Other IETF Working\
    \ Groups,\n   notably LISP [RFC6830] and Softwires [RFC5619], have expressed a\
    \ need\n   to update the UDP checksum processing in RFC 2460.  We therefore\n\
    \   expect this update to be applicable in the future to other tunnel\n   protocols\
    \ specified by these and other IETF Working Groups.\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   This document discusses only IPv6, because the problem being\n\
    \   addressed does not exist for IPv4.  Therefore, all references to \"IP\"\n\
    \   should be understood as references to IPv6.\n   The document uses the terms\
    \ \"tunneling\" and \"tunneled\" as adjectives\n   when describing packets.  When\
    \ we refer to \"tunneling packets\", we\n   refer to the outer packet header that\
    \ provides the tunneling\n   function.  When we refer to \"tunneled packets\"\
    , we refer to the inner\n   packet, i.e., the packet being carried in the tunnel.\n"
- title: 2.1.  Requirements Language
  contents:
  - "2.1.  Requirements Language\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in RFC 2119 [RFC2119].\n"
- title: 3.  Problem Statement
  contents:
  - "3.  Problem Statement\n   When using tunnel protocols based on UDP, there can\
    \ be both a benefit\n   and a cost to computing and checking the UDP checksum\
    \ of the outer\n   (encapsulating) UDP transport header.  In certain cases, where\n\
    \   reducing the forwarding cost is important, the cost of the\n   computation\
    \ may outweigh the benefit of the checksum.  This document\n   provides an update\
    \ for usage of the UDP checksum with IPv6.  The\n   update is specified for use\
    \ by a tunnel protocol that transports\n   packets that are themselves protected\
    \ by a checksum.\n"
- title: 4.  Discussion
  contents:
  - "4.  Discussion\n   \"Applicability Statement for the Use of IPv6 UDP Datagrams\
    \ with Zero\n   Checksums\" [RFC6936] describes issues related to allowing UDP\
    \ over\n   IPv6 to have a valid zero UDP checksum and is the starting point for\n\
    \   this discussion.  Sections 4 and 5 of [RFC6936], respectively,\n   identify\
    \ node implementation and usage requirements for datagrams\n   sent and received\
    \ with a zero UDP checksum.  These sections introduce\n   constraints on the usage\
    \ of a zero checksum for UDP over IPv6.  The\n   remainder of this section analyzes\
    \ the use of general tunnels and\n   explains the motivations for why tunnel protocols\
    \ are being permitted\n   to use the method described in this update.  It also\
    \ discusses issues\n   with middleboxes.\n"
- title: 4.1.  Analysis of Corruption in Tunnel Context
  contents:
  - "4.1.  Analysis of Corruption in Tunnel Context\n   This section analyzes the\
    \ impact of the different corruption modes in\n   the context of a tunnel protocol.\
    \  It specifies what needs to be\n   considered by the designer and user of a\
    \ tunnel protocol for the\n   protocol to be robust.  It also summarizes why use\
    \ of a zero UDP\n   checksum is thought to be safe for deployment.\n   o  Context\
    \ (i.e., tunneling state) should be established by\n      exchanging application\
    \ Protocol Data Units (PDUs) carried in\n      checksummed UDP datagrams or by\
    \ using other protocols that provide\n      integrity protection against corruption.\
    \  These control packets\n      should also carry any negotiation required to\
    \ enable the tunnel\n      endpoint to accept UDP datagrams with a zero checksum\
    \ and identify\n      the set of ports that are used.  It is important that the\
    \ control\n      traffic is robust against corruption, because undetected errors\n\
    \      can lead to long-lived and significant failures that may affect\n     \
    \ much more than the single packet that was corrupted.\n   o  Keepalive datagrams\
    \ with a zero UDP checksum should be sent to\n      validate the network path,\
    \ because the path between tunnel\n      endpoints can change, and therefore,\
    \ the set of middleboxes along\n      the path may change during the life of an\
    \ association.  Paths with\n      middleboxes that drop datagrams with a zero\
    \ UDP checksum will drop\n      these keepalives.  To enable the tunnel endpoints\
    \ to discover and\n      react to this behavior in a timely way, the keepalive\
    \ traffic\n      should include datagrams with a non-zero checksum and datagrams\n\
    \      with a zero checksum.\n   o  Receivers should attempt to detect corruption\
    \ of the address\n      information in an encapsulating packet.  A robust tunnel\
    \ protocol\n      should track tunnel context based on the 5-tuple (tunneled\n\
    \      protocol number, IPv6 source address, IPv6 destination address,\n     \
    \ UDP source port, UDP destination port).  A corrupted datagram that\n      arrives\
    \ at a destination may be filtered based on this check.\n      *  If the datagram\
    \ header matches the 5-tuple and the node has\n         enabled the zero checksum\
    \ for this port, the payload is matched\n         to the wrong context.  The tunneled\
    \ packet will then be\n         decapsulated and forwarded by the tunnel egress.\n\
    \      *  If a corrupted datagram matches a different 5-tuple and the\n      \
    \   node has enabled zero checksum for the port, the datagram\n         payload\
    \ is matched to the wrong context and may be processed by\n         the wrong\
    \ tunnel protocol, provided that it also passes the\n         verification of\
    \ that protocol.\n      *  If a corrupted datagram matches a 5-tuple and node\
    \ has not\n         enabled the zero checksum for this port, the datagram will\
    \ be\n         discarded.\n      When only the source information is corrupted,\
    \ the datagram could\n      arrive at the intended applications or protocol, which\
    \ will\n      process the datagram and try to match it against an existing\n \
    \     tunnel context.  The likelihood that a corrupted packet enters a\n     \
    \ valid context is reduced when the protocol restricts processing to\n      only\
    \ the source addresses with established contexts.  When both\n      source and\
    \ destination fields are corrupted, this also decreases\n      the likelihood\
    \ of matching a context.  However, the exception is\n      when errors replace\
    \ one packet header with another, so both\n      packets could be tunneled, and\
    \ therefore the corrupted packet\n      could match a previously defined context.\n\
    \   o  Receivers should attempt to detect corruption of source-fragmented\n  \
    \    encapsulating packets.  A tunnel protocol may reassemble fragments\n    \
    \  associated with the wrong context at the right tunnel endpoint, it\n      may\
    \ reassemble fragments associated with a context at the wrong\n      tunnel endpoint,\
    \ or corrupted fragments may be reassembled at the\n      right context at the\
    \ right tunnel endpoint.  In each of these\n      cases, the IPv6 length of the\
    \ encapsulating header may be checked\n      (although [RFC6936] points out the\
    \ weakness in this check).  In\n      addition, if the encapsulated packet is\
    \ protected by a transport\n      (or other) checksum, these errors can be detected\
    \ (with some\n      probability).\n   o  Compared to other applications, tunnel\
    \ protocols using UDP have\n      some advantages that reduce the risk for a corrupted\
    \ tunnel packet\n      reaching a destination that will receive it.  These advantages\n\
    \      result from processing by the network of the inner (tunneled)\n      packet\
    \ after it is forwarded from the tunnel egress using a wrong\n      context:\n\
    \      *  A tunneled packet may be forwarded to the wrong address domain,\n  \
    \       for example, to a private address domain where the inner\n         packet's\
    \ address is not routable, or it may fail a source\n         address check, such\
    \ as Unicast Reverse Path Forwarding\n         [RFC2827], resulting in the packet\
    \ being dropped.\n      *  The destination address of a tunneled packet may not\
    \ be\n         reachable at all from the delivered domain.  An example is an\n\
    \         Ethernet frame where the destination MAC address is not present\n  \
    \       on the LAN segment that was reached.\n      *  The type of the tunneled\
    \ packet may prevent delivery.  For\n         example, an attempt to interpret\
    \ an IP packet payload as an\n         Ethernet frame would likely to result in\
    \ the packet being\n         dropped as invalid.\n      *  The tunneled packet\
    \ checksum or integrity mechanism may detect\n         corruption of the inner\
    \ packet caused at the same time as\n         corruption to the outer packet header.\
    \  The resulting packet\n         would likely be dropped as invalid.\n   Each\
    \ of these checks significantly reduces the likelihood that a\n   corrupted inner\
    \ tunneled packet is finally delivered to a protocol\n   listener that can be\
    \ affected by the packet.  While the methods do\n   not guarantee correctness,\
    \ they can reduce the risks of relaxing the\n   UDP checksum requirement for a\
    \ tunnel application using IPv6.\n"
- title: 4.2.  Limitation to Tunnel Protocols
  contents:
  - "4.2.  Limitation to Tunnel Protocols\n   This document describes the applicability\
    \ of using a zero UDP\n   checksum to support tunnel protocols.  There are good\
    \ motivations\n   behind this, and the arguments are provided here.\n   o  Tunnels\
    \ carry inner packets that have their own semantics, which\n      may make any\
    \ corruption less likely to reach the indicated\n      destination and be accepted\
    \ as a valid packet.  This is true for\n      IP packets with the addition of\
    \ verification that can be made by\n      the tunnel protocol, the network processing\
    \ of the inner packet\n      headers as discussed above, and verification of the\
    \ inner packet\n      checksums.  Non-IP inner packets are likely to be subject\
    \ to\n      similar effects that may reduce the likelihood of a misdelivered\n\
    \      packet being delivered to a protocol listener that can be affected\n  \
    \    by the packet.\n   o  Protocols that directly consume the payload must have\
    \ sufficient\n      robustness against misdelivered packets (from any context),\n\
    \      including ones that are corrupted in tunnels or corrupted by other\n  \
    \    usage of the zero checksum.  This will require an integrity\n      mechanism.\
    \  Using a standard UDP checksum reduces the\n      computational load in the\
    \ receiver that is necessary to verify\n      this mechanism.\n   o  The design\
    \ for stateful protocols or protocols where corruption\n      causes cascade effects\
    \ requires extra care.  In tunnel usage, each\n      encapsulating packet provides\
    \ no functions other than a transport\n      from tunnel ingress to tunnel egress.\
    \  A corruption will commonly\n      affect only the single tunneled packet, not\
    \ the established\n      protocol state.  One common effect is that the inner\
    \ packet flow\n      will see only a corruption and a misdelivery of the outer\
    \ packet\n      as a lost packet.\n   o  Some non-tunnel protocols operate with\
    \ general servers that do not\n      know the source from which they will receive\
    \ a packet.  In such\n      applications, a zero UDP checksum is unsuitable, because\
    \ it is\n      necessary to provide the first level of verification that the\n\
    \      packet was intended for the receiving server.  A verification\n      prevents\
    \ the server from processing the datagram payload; without\n      this, the server\
    \ may spend significant resources processing the\n      packet, including sending\
    \ replies or error messages.\n   Tunnel protocols that encapsulate IP will generally\
    \ be safe for\n   deployment, because all IPv4 and IPv6 packets include at least\
    \ one\n   checksum at either the network or transport layer.  The network\n  \
    \ delivery of the inner packet will then further reduce the effects of\n   corruption.\
    \  Tunnel protocols carrying non-IP packets may offer\n   equivalent protection\
    \ when the non-IP networks reduce the risk of\n   misdelivery to applications.\
    \  However, further analysis is necessary\n   to understand the implications of\
    \ misdelivery of corrupted packets\n   for each non-IP protocol.  The analysis\
    \ above suggests that non-\n   tunnel protocols can be expected to have significantly\
    \ more cases\n   where a zero checksum would result in misdelivery or negative\
    \ side\n   effects.\n   One unfortunate side effect of increased use of a zero\
    \ checksum is\n   that it also increases the likelihood of acceptance when a datagram\n\
    \   with a zero UDP checksum is misdelivered.  This requires all tunnel\n   protocols\
    \ using this method to be designed to be robust in the face\n   of misdelivery.\n"
- title: 4.3.  Middleboxes
  contents:
  - "4.3.  Middleboxes\n   \"Applicability Statement for the Use of IPv6 UDP Datagrams\
    \ with Zero\n   Checksums\" [RFC6936] specifies requirements for middleboxes and\n\
    \   tunnels that need to traverse middleboxes.  Tunnel protocols\n   intending\
    \ to use a zero UDP checksum need to ensure that they have\n   defined a method\
    \ for handling cases when a middlebox prevents the\n   path between the tunnel\
    \ ingress and egress from supporting\n   transmission of datagrams with a zero\
    \ UDP checksum.  This is\n   especially important as middleboxes that conform\
    \ to RFC 2460 are\n   likely to discard datagrams with a zero UDP checksum.\n"
- title: 5.  The Zero UDP Checksum Update
  contents:
  - "5.  The Zero UDP Checksum Update\n   This specification updates IPv6 to allow\
    \ a zero UDP checksum in the\n   outer encapsulating datagram of a tunnel protocol.\
    \  UDP endpoints\n   that implement this update MUST follow the node requirements\
    \ in\n   \"Applicability Statement for the Use of IPv6 UDP Datagrams with Zero\n\
    \   Checksums\" [RFC6936].\n   The following text in [RFC2460], Section 8.1, fourth\
    \ bullet should be\n   deleted:\n      Unlike IPv4, when UDP packets are originated\
    \ by an IPv6 node, the\n      UDP checksum is not optional.  That is, whenever\
    \ originating a UDP\n      packet, an IPv6 node must compute a UDP checksum over\
    \ the packet\n      and the pseudo-header, and, if that computation yields a result\
    \ of\n      zero, it must be changed to hex FFFF for placement in the UDP\n  \
    \    header.  IPv6 receivers must discard UDP packets containing a zero\n    \
    \  checksum, and should log the error.\n   This text should be replaced by:\n\
    \      An IPv6 node associates a mode with each used UDP port (for\n      sending\
    \ and/or receiving packets).\n      Whenever originating a UDP packet for a port\
    \ in the default mode,\n      an IPv6 node MUST compute a UDP checksum over the\
    \ packet and the\n      pseudo-header, and, if that computation yields a result\
    \ of zero,\n      the checksum MUST be changed to hex FFFF for placement in the\
    \ UDP\n      header, as specified in [RFC2460].  IPv6 receivers MUST by default\n\
    \      discard UDP packets containing a zero checksum and SHOULD log the\n   \
    \   error.\n      As an alternative, certain protocols that use UDP as a tunnel\n\
    \      encapsulation MAY enable zero-checksum mode for a specific port\n     \
    \ (or set of ports) for sending and/or receiving.  Any node\n      implementing\
    \ zero-checksum mode MUST follow the node requirements\n      specified in Section\
    \ 4 of \"Applicability Statement for the use of\n      IPv6 UDP Datagrams with\
    \ Zero Checksums\" [RFC6936].\n      Any protocol that enables zero-checksum mode\
    \ for a specific port\n      or ports MUST follow the usage requirements specified\
    \ in Section 5\n      of \"Applicability Statement for the Use of IPv6 UDP Datagrams\
    \ with\n      Zero Checksums\" [RFC6936].\n      Middleboxes supporting IPv6 MUST\
    \ follow requirements 9, 10, and 11\n      of the usage requirements specified\
    \ in Section 5 of \"Applicability\n      Statement for the Use of IPv6 UDP Datagrams\
    \ with Zero Checksums\"\n      [RFC6936].\n"
- title: 6.  Additional Observations
  contents:
  - "6.  Additional Observations\n   This update was motivated by the existence of\
    \ a number of protocols\n   being developed in the IETF that are expected to benefit\
    \ from the\n   change.  The following observations are made:\n   o  An empirically\
    \ based analysis of the probabilities of packet\n      corruption (with or without\
    \ checksums) has not, to our knowledge,\n      been conducted since about 2000.\
    \  At the time of publication, it\n      is now 2013.  We strongly suggest that\
    \ a new empirical study be\n      performed, along with extensive analysis of\
    \ the corruption\n      probabilities of the IPv6 header.  This could potentially\
    \ allow\n      revising the recommendations in this document.\n   o  A key motivation\
    \ for the increase in use of UDP in tunneling is a\n      lack of protocol support\
    \ in middleboxes.  Specifically, new\n      protocols, such as LISP [RFC6830],\
    \ may prefer to use UDP tunnels\n      to traverse an end-to-end path successfully\
    \ and avoid having their\n      packets dropped by middleboxes.  If middleboxes\
    \ were updated to\n      support UDP-Lite [RFC3828], UDP-Lite would provide better\n\
    \      protection than offered by this update.  UDP-Lite may be suited to\n  \
    \    a variety of applications and would be expected to be preferred\n      over\
    \ this method for many tunnel protocols.\n   o  Another issue is that the UDP\
    \ checksum is overloaded with the task\n      of protecting the IPv6 header for\
    \ UDP flows (as is the TCP\n      checksum for TCP flows).  Protocols that do\
    \ not use a pseudo-\n      header approach to computing a checksum or CRC have\
    \ essentially no\n      protection from misdelivered packets.\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   Less work is required to generate an attack using\
    \ a zero UDP checksum\n   than one using a standard full UDP checksum.  However,\
    \ this does not\n   lead to significant new vulnerabilities, because checksums\
    \ are not a\n   security measure and can be easily generated by any attacker.\n\
    \   In general, any user of zero UDP checksums should apply the checks\n   and\
    \ context verification that are possible to minimize the risk of\n   unintended\
    \ traffic to reach a particular context.  This will,\n   however, not protect\
    \ against an intentional attack that creates\n   packets with the correct information.\
    \  Source address validation can\n   help prevent injection of traffic into contexts\
    \ by an attacker.\n   Depending on the hardware design, the processing requirements\
    \ may\n   differ for tunnels that have a zero UDP checksum and those that\n  \
    \ calculate a checksum.  This processing overhead may need to be\n   considered\
    \ when deciding whether to enable a tunnel and to determine\n   an acceptable\
    \ rate for transmission.  This processing overhead can\n   become a security risk\
    \ for designs that can handle a significantly\n   larger number of packets with\
    \ zero UDP checksums compared to\n   datagrams with a non-zero checksum, such\
    \ as a tunnel egress.  An\n   attacker could attempt to inject non-zero checksummed\
    \ UDP packets\n   into a tunnel forwarding zero checksum UDP packets and cause\
    \ overload\n   in the processing of the non-zero checksums, e.g., if this happens\
    \ in\n   a router's slow path.  Therefore, protection mechanisms should be\n \
    \  employed when this threat exists.  Protection may include source-\n   address\
    \ filtering to prevent an attacker from injecting traffic, as\n   well as throttling\
    \ the amount of non-zero checksum traffic.  The\n   latter may impact the functioning\
    \ of the tunnel protocol.\n"
- title: 8.  Acknowledgments
  contents:
  - "8.  Acknowledgments\n   We would like to thank Brian Haberman, Dan Wing, Joel\
    \ Halpern, David\n   Waltermire, J.W. Atwood, Peter Yee, Joe Touch, and the IESG\
    \ of 2012\n   for discussions and reviews.  Gorry Fairhurst has been very diligent\n\
    \   in reviewing and helping to ensure alignment between this document\n   and\
    \ [RFC6936].\n"
- title: 9.  References
  contents:
  - '9.  References

    '
- title: 9.1.  Normative References
  contents:
  - "9.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [RFC2460]  Deering, S. and R. Hinden, \"Internet Protocol, Version\
    \ 6\n              (IPv6) Specification\", RFC 2460, December 1998.\n   [RFC6936]\
    \  Fairhurst, G. and M. Westerlund, \"Applicability Statement\n              for\
    \ the Use of IPv6 UDP Datagrams with Zero Checksums\",\n              RFC 6936,\
    \ April 2013.\n"
- title: 9.2.  Informative References
  contents:
  - "9.2.  Informative References\n   [AMT]      Bumgardner, G., \"Automatic Multicast\
    \ Tunneling\", Work\n              in Progress, June 2012.\n   [RFC2827]  Ferguson,\
    \ P. and D. Senie, \"Network Ingress Filtering:\n              Defeating Denial\
    \ of Service Attacks which employ IP Source\n              Address Spoofing\"\
    , BCP 38, RFC 2827, May 2000.\n   [RFC3828]  Larzon, L-A., Degermark, M., Pink,\
    \ S., Jonsson, L-E., and\n              G. Fairhurst, \"The Lightweight User Datagram\
    \ Protocol\n              (UDP-Lite)\", RFC 3828, July 2004.\n   [RFC5405]  Eggert,\
    \ L. and G. Fairhurst, \"Unicast UDP Usage Guidelines\n              for Application\
    \ Designers\", BCP 145, RFC 5405,\n              November 2008.\n   [RFC5619]\
    \  Yamamoto, S., Williams, C., Yokota, H., and F. Parent,\n              \"Softwire\
    \ Security Analysis and Requirements\", RFC 5619,\n              August 2009.\n\
    \   [RFC6830]  Farinacci, D., Fuller, V., Meyer, D., and D. Lewis, \"The\n   \
    \           Locator/ID Separation Protocol (LISP)\", RFC 6830,\n             \
    \ January 2013.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Marshall Eubanks\n   AmericaFree.TV LLC\n   P.O. Box 141\n\
    \   Clifton, Virginia  20124\n   USA\n   Phone: +1-703-501-4376\n   EMail: marshall.eubanks@gmail.com\n\
    \   P.F. Chimento\n   Johns Hopkins University Applied Physics Laboratory\n  \
    \ 11100 Johns Hopkins Road\n   Laurel, Maryland  20723\n   USA\n   Phone: +1-443-778-1743\n\
    \   EMail: Philip.Chimento@jhuapl.edu\n   Magnus Westerlund\n   Ericsson\n   Farogatan\
    \ 6\n   SE-164 80 Kista\n   Sweden\n   Phone: +46 10 719 00 00\n   EMail: magnus.westerlund@ericsson.com\n"
