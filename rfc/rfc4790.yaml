- title: __initial_text__
  contents:
  - '            Internet Application Protocol Collation Registry

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The IETF Trust (2007).\n"
- title: Abstract
  contents:
  - "Abstract\n   Many Internet application protocols include string-based lookup,\n\
    \   searching, or sorting operations.  However, the problem space for\n   searching\
    \ and sorting international strings is large, not fully\n   explored, and is outside\
    \ the area of expertise for the Internet\n   Engineering Task Force (IETF).  Rather\
    \ than attempt to solve such a\n   large problem, this specification creates an\
    \ abstraction framework so\n   that application protocols can precisely identify\
    \ a comparison\n   function, and the repertoire of comparison functions can be\
    \ extended\n   in the future.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  4\n     1.1.  Conventions Used in This Document  . . . . . . .\
    \ . . . . .  4\n   2.  Collation Definition and Purpose . . . . . . . . . . .\
    \ . . . .  4\n     2.1.  Definition . . . . . . . . . . . . . . . . . . . . .\
    \ . . .  4\n     2.2.  Purpose  . . . . . . . . . . . . . . . . . . . . . . .\
    \ . .  4\n     2.3.  Some Other Terms Used in this Document . . . . . . . . .\
    \ .  5\n     2.4.  Sort Keys  . . . . . . . . . . . . . . . . . . . . . . . .\
    \  5\n   3.  Collation Identifier Syntax  . . . . . . . . . . . . . . . . .  6\n\
    \     3.1.  Basic Syntax . . . . . . . . . . . . . . . . . . . . . . .  6\n  \
    \   3.2.  Wildcards  . . . . . . . . . . . . . . . . . . . . . . . .  6\n    \
    \ 3.3.  Ordering Direction . . . . . . . . . . . . . . . . . . . .  7\n     3.4.\
    \  URIs . . . . . . . . . . . . . . . . . . . . . . . . . . .  7\n     3.5.  Naming\
    \ Guidelines  . . . . . . . . . . . . . . . . . . . .  7\n   4.  Collation Specification\
    \ Requirements . . . . . . . . . . . . .  8\n     4.1.  Collation/Server Interface\
    \ . . . . . . . . . . . . . . . .  8\n     4.2.  Operations Supported . . . .\
    \ . . . . . . . . . . . . . . .  8\n       4.2.1.  Validity . . . . . . . . .\
    \ . . . . . . . . . . . . . .  9\n       4.2.2.  Equality . . . . . . . . . .\
    \ . . . . . . . . . . . . .  9\n       4.2.3.  Substring  . . . . . . . . . .\
    \ . . . . . . . . . . . .  9\n       4.2.4.  Ordering . . . . . . . . . . . .\
    \ . . . . . . . . . . . 10\n     4.3.  Sort Keys  . . . . . . . . . . . . . .\
    \ . . . . . . . . . . 10\n     4.4.  Use of Lookup Tables . . . . . . . . . .\
    \ . . . . . . . . . 11\n   5.  Application Protocol Requirements  . . . . . .\
    \ . . . . . . . . 11\n     5.1.  Character Encoding . . . . . . . . . . . . .\
    \ . . . . . . . 11\n     5.2.  Operations . . . . . . . . . . . . . . . . . .\
    \ . . . . . . 11\n     5.3.  Wildcards  . . . . . . . . . . . . . . . . . . .\
    \ . . . . . 12\n     5.4.  String Comparison  . . . . . . . . . . . . . . . .\
    \ . . . . 12\n     5.5.  Disconnected Clients . . . . . . . . . . . . . . . .\
    \ . . . 12\n     5.6.  Error Codes  . . . . . . . . . . . . . . . . . . . . .\
    \ . . 13\n     5.7.  Octet Collation  . . . . . . . . . . . . . . . . . . . .\
    \ . 13\n   6.  Use by Existing Protocols  . . . . . . . . . . . . . . . . . .\
    \ 13\n   7.  Collation Registration . . . . . . . . . . . . . . . . . . . . 14\n\
    \     7.1.  Collation Registration Procedure . . . . . . . . . . . . . 14\n  \
    \   7.2.  Collation Registration Format  . . . . . . . . . . . . . . 15\n    \
    \   7.2.1.  Registration Template  . . . . . . . . . . . . . . . . 15\n      \
    \ 7.2.2.  The Collation Element  . . . . . . . . . . . . . . . . 15\n       7.2.3.\
    \  The Identifier Element . . . . . . . . . . . . . . . . 16\n       7.2.4.  The\
    \ Title Element  . . . . . . . . . . . . . . . . . . 16\n       7.2.5.  The Operations\
    \ Element . . . . . . . . . . . . . . . . 16\n       7.2.6.  The Specification\
    \ Element  . . . . . . . . . . . . . . 16\n       7.2.7.  The Submitter Element\
    \  . . . . . . . . . . . . . . . . 16\n       7.2.8.  The Owner Element  . . .\
    \ . . . . . . . . . . . . . . . 16\n       7.2.9.  The Version Element  . . .\
    \ . . . . . . . . . . . . . . 17\n       7.2.10. The Variable Element . . . .\
    \ . . . . . . . . . . . . . 17\n     7.3.  Structure of Collation Registry  .\
    \ . . . . . . . . . . . . 17\n     7.4.  Example Initial Registry Summary . .\
    \ . . . . . . . . . . . 18\n   8.  Guidelines for Expert Reviewer . . . . . .\
    \ . . . . . . . . . . 18\n   9.  Initial Collations . . . . . . . . . . . . .\
    \ . . . . . . . . . 19\n     9.1.  ASCII Numeric Collation  . . . . . . . . .\
    \ . . . . . . . . 20\n       9.1.1.  ASCII Numeric Collation Description  . .\
    \ . . . . . . . 20\n       9.1.2.  ASCII Numeric Collation Registration . . .\
    \ . . . . . . 20\n     9.2.  ASCII Casemap Collation  . . . . . . . . . . . .\
    \ . . . . . 21\n       9.2.1.  ASCII Casemap Collation Description  . . . . .\
    \ . . . . 21\n       9.2.2.  ASCII Casemap Collation Registration . . . . . .\
    \ . . . 22\n     9.3.  Octet Collation  . . . . . . . . . . . . . . . . . . .\
    \ . . 22\n       9.3.1.  Octet Collation Description  . . . . . . . . . . . .\
    \ . 22\n       9.3.2.  Octet Collation Registration . . . . . . . . . . . . .\
    \ 23\n   10. IANA Considerations  . . . . . . . . . . . . . . . . . . . . . 23\n\
    \   11. Security Considerations  . . . . . . . . . . . . . . . . . . . 23\n  \
    \ 12. Acknowledgements . . . . . . . . . . . . . . . . . . . . . . . 23\n   13.\
    \ References . . . . . . . . . . . . . . . . . . . . . . . . . . 24\n     13.1.\
    \ Normative References . . . . . . . . . . . . . . . . . . . 24\n     13.2. Informative\
    \ References . . . . . . . . . . . . . . . . . . 24\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The Application Configuration Access Protocol ACAP [11]\
    \ specification\n   introduced the concept of a comparator (which we call collation\
    \ in\n   this document), but failed to create an IANA registry.  With the\n  \
    \ introduction of stringprep [6] and the Unicode Collation Algorithm\n   [7],\
    \ it is now time to create that registry and populate it with some\n   initial\
    \ values appropriate for an international community.  This\n   specification replaces\
    \ and generalizes the definition of a comparator\n   in ACAP, and creates a collation\
    \ registry.\n"
- title: 1.1.  Conventions Used in This Document
  contents:
  - "1.1.  Conventions Used in This Document\n   The key words \"MUST\", \"MUST NOT\"\
    , \"SHOULD\", \"SHOULD NOT\", and \"MAY\"\n   in this document are to be interpreted\
    \ as defined in \"Key words for\n   use in RFCs to Indicate Requirement Levels\"\
    \ [1].\n   The attribute syntax specifications use the Augmented Backus-Naur\n\
    \   Form (ABNF) [2] notation, including the core rules defined in\n   Appendix\
    \ A.  The ABNF production \"Language-tag\" is imported from\n   Language Tags\
    \ [5] and \"reg-name\" from URI: Generic Syntax [4].\n"
- title: 2.  Collation Definition and Purpose
  contents:
  - '2.  Collation Definition and Purpose

    '
- title: 2.1.  Definition
  contents:
  - "2.1.  Definition\n   A collation is a named function which takes two arbitrary\
    \ length\n   strings as input and can be used to perform one or more of three\n\
    \   basic comparison operations: equality test, substring match, and\n   ordering\
    \ test.\n"
- title: 2.2.  Purpose
  contents:
  - "2.2.  Purpose\n   Collations are an abstraction for comparison functions so that\
    \ these\n   comparison functions can be used in multiple protocols.  The details\n\
    \   of a particular comparison operation can be specified by someone with\n  \
    \ appropriate expertise, independent of the application protocols that\n   use\
    \ that collation.  This is similar to the way a charset [13]\n   separates the\
    \ details of octet to character mapping from a protocol\n   specification, such\
    \ as MIME [9], or the way SASL [10] separates the\n   details of an authentication\
    \ mechanism from a protocol specification,\n   such as ACAP [11].\n   Here is\
    \ a small diagram to help illustrate the value of this\n   abstraction:\n   +-------------------+\
    \                         +-----------------+\n   | IMAP i18n SEARCH  |--+   \
    \                   | Basic           |\n   +-------------------+  |         \
    \          +--| Collation Spec  |\n                          |               \
    \    |  +-----------------+\n   +-------------------+  |  +-------------+  | \
    \ +-----------------+\n   | ACAP i18n SEARCH  |--+--| Collation   |--+--| A stringprep\
    \    |\n   +-------------------+  |  | Registry    |  |  | Collation Spec  |\n\
    \                          |  +-------------+  |  +-----------------+\n   +-------------------+\
    \  |                   |  +-----------------+\n   | ...other protocol |--+   \
    \                |  | locale-specific |\n   +-------------------+            \
    \          +--| Collation Spec  |\n                                          \
    \       +-----------------+\n   Thus IMAP, ACAP, and future application protocols\
    \ with international\n   search capability simply specify how to interface to\
    \ the collation\n   registry instead of each protocol specification having to\
    \ specify all\n   the collations it supports.\n"
- title: 2.3.  Some Other Terms Used in this Document
  contents:
  - "2.3.  Some Other Terms Used in this Document\n   The terms client, server, and\
    \ protocol are used in somewhat unusual\n   senses.\n   Client means a user, or\
    \ a program acting directly on behalf of a\n   user.  This may be a mail reader\
    \ acting as an IMAP client, or it may\n   be an interactive shell, where the user\
    \ can type protocol commands/\n   requests directly, or it may be a script or\
    \ program written by the\n   user.\n   Server means a program that performs services\
    \ requested by the\n   client.  This may be a traditional server such as an HTTP\
    \ server, or\n   it may be a Sieve [14] interpreter running a Sieve script written\
    \ by\n   a user.  A server needs to use the operations provided by collations\n\
    \   in order to fulfill the client's requests.\n   The protocol describes how\
    \ the client tells the server what it wants\n   done, and (if applicable) how\
    \ the server tells the client about the\n   results.  IMAP is a protocol by this\
    \ definition, and so is the Sieve\n   language.\n"
- title: 2.4.  Sort Keys
  contents:
  - "2.4.  Sort Keys\n   One component of a collation is a transformation, which turns\
    \ a\n   string into a sort key, which is then used while sorting.\n   The transformation\
    \ can range from an identity mapping (e.g., the\n   i;octet collation Section\
    \ 9.3) to a mapping that makes the string\n   unreadable to a human.\n   This\
    \ is an implementation detail of collations or servers.  A\n   protocol SHOULD\
    \ NOT expose it to clients, since some collations leave\n   the sort key's format\
    \ up to the implementation, and current\n   conformant implementations are known\
    \ to use different formats.\n"
- title: 3.  Collation Identifier Syntax
  contents:
  - '3.  Collation Identifier Syntax

    '
- title: 3.1.  Basic Syntax
  contents:
  - "3.1.  Basic Syntax\n   The collation identifier itself is a single US-ASCII string.\
    \  The\n   identifier MUST NOT be longer than 254 characters, and obeys the\n\
    \   following grammar:\n     collation-char  = ALPHA / DIGIT / \"-\" / \";\" /\
    \ \"=\" / \".\"\n     collation-id    = collation-prefix \";\" collation-core-name\n\
    \                       *collation-arg\n     collation-scope = Language-tag /\
    \ \"vnd-\" reg-name\n     collation-core-name = ALPHA *( ALPHA / DIGIT / \"-\"\
    \ )\n     collation-arg   = \";\" ALPHA *( ALPHA / DIGIT ) \"=\"\n           \
    \            1*( ALPHA / DIGIT / \".\" )\n   Note: the ABNF production \"Language-tag\"\
    \ is imported from Language\n   Tags [5] and \"reg-name\" from URI: Generic Syntax\
    \ [4].\n   There is a special identifier called \"default\".  For protocols that\n\
    \   have a default collation, \"default\" refers to that collation.  For\n   other\
    \ protocols, the identifier \"default\" MUST match no collations,\n   and servers\
    \ SHOULD treat it in the same way as they treat nonexistent\n   collations.\n"
- title: 3.2.  Wildcards
  contents:
  - "3.2.  Wildcards\n   The string a client uses to select a collation MAY contain\
    \ one or\n   more wildcard (\"*\") characters that match zero or more collation-\n\
    \   chars.  Wildcard characters MUST NOT be adjacent.  If the wildcard\n   string\
    \ matches multiple collations, the server SHOULD attempt to\n   select a widely\
    \ useful collation in preference to a narrowly useful\n   one.\n     collation-wild\
    \  =  (\"*\" / (ALPHA [\"*\"])) *(collation-char [\"*\"])\n                  \
    \       ; MUST NOT exceed 254 characters total\n"
- title: 3.3.  Ordering Direction
  contents:
  - "3.3.  Ordering Direction\n   When used as a protocol element for ordering, the\
    \ collation\n   identifier MAY be prefixed by either \"+\" or \"-\" to explicitly\
    \ specify\n   an ordering direction. \"+\" has no effect on the ordering operation,\n\
    \   while \"-\" inverts the result of the ordering operation.  In general,\n \
    \  collation-order is used when a client requests a collation, and\n   collation-selected\
    \ is used when the server informs the client of the\n   selected collation.\n\
    \     collation-selected =  [\"+\" / \"-\"] collation-id\n     collation-order\
    \ =  [\"+\" / \"-\"] collation-wild\n"
- title: 3.4.  URIs
  contents:
  - "3.4.  URIs\n   Some protocols are designed to use URIs [4] to refer to collations\n\
    \   rather than simple tokens.  A special section of the IANA URL space\n   is\
    \ reserved for such usage.  The \"collation-uri\" form is used to\n   refer to\
    \ a specific named collation (the collation registration may\n   not actually\
    \ be present).  The \"collation-auri\" form is an abstract\n   name for an ordering,\
    \ a collation pattern or a vendor private\n   collator.\n     collation-uri  \
    \ =  \"http://www.iana.org/assignments/collation/\"\n                        collation-id\
    \ \".xml\"\n     collation-auri  =  ( \"http://www.iana.org/assignments/collation/\"\
    \n                        collation-order \".xml\" ) / other-uri\n     other-uri\
    \       =  <absoluteURI>\n                     ;  excluding the IANA collation\
    \ namespace.\n"
- title: 3.5.  Naming Guidelines
  contents:
  - "3.5.  Naming Guidelines\n   While this specification makes no absolute requirements\
    \ on the\n   structure of collation identifiers, naming consistency is important,\n\
    \   so the following initial guidelines are provided.\n   Collation identifiers\
    \ with an international audience typically begin\n   with \"i;\".  Collation identifiers\
    \ intended for a particular language\n   or locale typically begin with a language\
    \ tag [5] followed by a \";\".\n   After the first \";\" is normally the name\
    \ of the general collation\n   algorithm, followed by a series of algorithm modifications\
    \ separated\n   by the \";\" delimiter.  Parameterized modifications will use\
    \ \"=\" to\n   delimit the parameter from the value.  The version numbers of any\n\
    \   lookup tables used by the algorithm SHOULD be present as\n   parameterized\
    \ modifications.\n   Collation identifiers of the form *;vnd-hostname;* are reserved\
    \ for\n   vendor-specific collations created by the owner of the hostname\n  \
    \ following the \"vnd-\" prefix (e.g., vnd-example.com for the vendor\n   example.com).\
    \  Registration of such collations (or the name space as\n   a whole), with intended\
    \ use of the \"Vendor\", is encouraged when a\n   public specification or open-source\
    \ implementation is available, but\n   is not required.\n"
- title: 4.  Collation Specification Requirements
  contents:
  - '4.  Collation Specification Requirements

    '
- title: 4.1.  Collation/Server Interface
  contents:
  - "4.1.  Collation/Server Interface\n   The collation itself defines what it operates\
    \ on.  Most collations\n   are expected to operate on character strings.  The\
    \ i;octet\n   (Section 9.3) collation operates on octet strings.  The i;ascii-\n\
    \   numeric (Section 9.1) operation operates on numbers.\n   This specification\
    \ defines the collation interface in terms of octet\n   strings.  However, implementations\
    \ may choose to use character\n   strings instead.  Such implementations may not\
    \ be able to implement\n   e.g., i;octet.  Since i;octet is not currently mandatory\
    \ to implement\n   for any protocol, this should not be a problem.\n"
- title: 4.2.  Operations Supported
  contents:
  - "4.2.  Operations Supported\n   A collation specification MUST state which of\
    \ the three basic\n   operations are supported (equality, substring, ordering)\
    \ and how to\n   perform each of the supported operations on any two input character\n\
    \   strings, including empty strings.  Collations must be deterministic,\n   i.e.,\
    \ given a collation with a specific identifier, and any two fixed\n   input strings,\
    \ the result MUST be the same for the same operation.\n   In general, collation\
    \ operations should behave as their names\n   suggest.  While a collation may\
    \ be new, the operations are not, so\n   the new collation's operations should\
    \ be similar to those of older\n   collations.  For example, a date/time collation\
    \ should not provide a\n   \"substring\" operation that would morph IMAP substring\
    \ SEARCH into\n   e.g., a date-range search.\n   A non-obvious consequence of\
    \ the rules for each collation operation\n   is that, for any single collation,\
    \ either none or all of the\n   operations can return \"undefined\".  For example,\
    \ it is not possible\n   to have an equality operation that never returns \"undefined\"\
    , and a\n   substring operation that occasionally does.\n"
- title: 4.2.1.  Validity
  contents:
  - "4.2.1.  Validity\n   The validity test takes one string as argument.  It returns\
    \ valid if\n   its input string is a valid input to the collation's other\n  \
    \ operations, and invalid if not.  (In other words, a string is valid\n   if it\
    \ is equal to itself according to the collation's equality\n   operation.)\n \
    \  The validity test is provided by all collations.  It MUST NOT be\n   listed\
    \ separately in the collation registration.\n"
- title: 4.2.2.  Equality
  contents:
  - "4.2.2.  Equality\n   The equality test always returns \"match\" or \"no-match\"\
    \ when it is\n   supplied valid input, and MAY return \"undefined\" if one or\
    \ both input\n   strings are not valid.\n   The equality test MUST be reflexive\
    \ and symmetric.  For valid input,\n   it MUST be transitive.\n   If a collation\
    \ provides either a substring or an ordering test, it\n   MUST also provide an\
    \ equality test.  The substring and/or ordering\n   tests MUST be consistent with\
    \ the equality test.\n   The return values of the equality test are called \"\
    match\", \"no-match\"\n   and \"undefined\" in this document.\n"
- title: 4.2.3.  Substring
  contents:
  - "4.2.3.  Substring\n   The substring matching operation determines if the first\
    \ string is a\n   substring of the second string, i.e., if one or more substrings\
    \ of\n   the second string is equal to the first, as defined by the\n   collation's\
    \ equality operation.\n   A collation that supports substring matching will automatically\n\
    \   support two special cases of substring matching: prefix and suffix\n   matching,\
    \ if those special cases are supported by the application\n   protocol.  It returns\
    \ \"match\" or \"no-match\" when it is supplied valid\n   input and returns \"\
    undefined\" when supplied invalid input.\n   Application protocols MAY return\
    \ position information for substring\n   matches.  If this is done, the position\
    \ information SHOULD include\n   both the starting offset and the ending offset\
    \ for each match.  This\n   is important because more sophisticated collations\
    \ can match strings\n   of unequal length (for example, a pre-composed accented\
    \ character can\n   match a decomposed accented character).  In general, overlapping\n\
    \   matches SHOULD be reported (as when \"ana\" occurs twice within\n   \"banana\"\
    ), although there are cases where a collation may decide not\n   to.  For example,\
    \ in a collation which treats all whitespace\n   sequences as identical, the substring\
    \ operation could be defined such\n   that \" 1 \" (SP \"1\" SP) is reported just\
    \ once within \"  1  \" (SP SP\n   \"1\" SP SP), not four times (SP SP \"1\" SP,\
    \ SP \"1\" SP, SP \"1\" SP SP and\n   SP SP \"1\" SP SP), since the four matches\
    \ are, in a sense, the same\n   match.\n   A string is a substring of itself.\
    \  The empty string is a substring\n   of all strings.\n   Note that the substring\
    \ operation of some collations can match\n   strings of unequal length.  For example,\
    \ a pre-composed accented\n   character can match a decomposed accented character.\
    \  The Unicode\n   Collation Algorithm [7] discusses this in more detail.\n  \
    \ The return values of the substring operation are called \"match\", \"no-\n \
    \  match\", and \"undefined\" in this document.\n"
- title: 4.2.4.  Ordering
  contents:
  - "4.2.4.  Ordering\n   The ordering operation determines how two strings are ordered.\
    \  It\n   MUST be reflexive.  For valid input, it MUST be transitive and\n   trichotomous.\n\
    \   Ordering returns \"less\" if the first string is listed before the\n   second\
    \ string, according to the collation; \"greater\", if the second\n   string is\
    \ listed before the first string; and \"equal\", if the two\n   strings are equal,\
    \ as defined by the collation's equality operation.\n   If one or both strings\
    \ are invalid, the result of ordering is\n   \"undefined\".\n   When the collation\
    \ is used with a \"+\" prefix, the behavior is the\n   same as when used with\
    \ no prefix.  When the collation is used with a\n   \"-\" prefix, the result of\
    \ the ordering operation of the collation\n   MUST be reversed.\n   The return\
    \ values of the ordering operation are called \"less\",\n   \"equal\", \"greater\"\
    , and \"undefined\" in this document.\n"
- title: 4.3.  Sort Keys
  contents:
  - "4.3.  Sort Keys\n   A collation specification SHOULD describe the internal transformation\n\
    \   algorithm to generate sort keys.  This algorithm can be applied to\n   individual\
    \ strings, and the result can be stored to potentially\n   optimize future comparison\
    \ operations.  A collation MAY specify that\n   the sort key is generated by the\
    \ identity function.  The sort key may\n   have no meaning to a human.  The sort\
    \ key may not be valid input to\n   the collation.\n"
- title: 4.4.  Use of Lookup Tables
  contents:
  - "4.4.  Use of Lookup Tables\n   Some collations use customizable lookup tables,\
    \ e.g., because the\n   tables depend on locale, and may be modified after shipping\
    \ the\n   software.  Collations that use more than one customizable lookup\n \
    \  table in a documented format MUST assign numbers to the tables they\n   use.\
    \  This permits an application protocol command to access the\n   tables used\
    \ by a server collation, so that clients and servers use\n   the same tables.\n"
- title: 5.  Application Protocol Requirements
  contents:
  - "5.  Application Protocol Requirements\n   This section describes the requirements\
    \ and issues that an\n   application protocol needs to consider if it offers searching,\n\
    \   substring matching and/or sorting, and permits the use of characters\n   outside\
    \ the US-ASCII charset.\n"
- title: 5.1.  Character Encoding
  contents:
  - "5.1.  Character Encoding\n   The protocol specification has to make sure that\
    \ it is clear on which\n   characters (rather than just octets) the collations\
    \ are used.  This\n   can be done by specifying the protocol itself in terms of\
    \ characters\n   (e.g., in the case of a query language), by specifying a single\n\
    \   character encoding for the protocol (e.g., UTF-8 [3]), or by\n   carefully\
    \ describing the relevant issues of character encoding\n   labeling and conversion.\
    \  In the later case, details to consider\n   include how to handle unknown charsets,\
    \ any charsets that are\n   mandatory-to-implement, any issues with byte-order\
    \ that might apply,\n   and any transfer encodings that need to be supported.\n"
- title: 5.2.  Operations
  contents:
  - "5.2.  Operations\n   The protocol must specify which of the operations defined\
    \ in this\n   specification (equality matching, substring matching, and ordering)\n\
    \   can be invoked in the protocol, and how they are invoked.  There may\n   be\
    \ more than one way to invoke an operation.\n   The protocol MUST provide a mechanism\
    \ for the client to select the\n   collation to use with equality matching, substring\
    \ matching, and\n   ordering.\n   If a protocol needs a total ordering and the\
    \ collation chosen does\n   not provide it because the ordering operation returns\
    \ \"undefined\" at\n   least once, the recommended fallback is to sort all invalid\
    \ strings\n   after the valid ones, and use i;octet to order the invalid strings.\n\
    \   Although the collation's substring function provides a list of\n   matches,\
    \ a protocol need not provide all that to the client.  It may\n   provide only\
    \ the first matching substring, or even just the\n   information that the substring\
    \ search matched.  In this way,\n   collations can be used with protocols that\
    \ are defined such that \"x\n   is a substring of y\" returns true-false.\n  \
    \ If the protocol provides positional information for the results of a\n   substring\
    \ match, that positional information SHOULD fully specify the\n   substring(s)\
    \ in the result that matches, independent of the length of\n   the search string.\
    \  For example, returning both the starting and\n   ending offset of the match\
    \ would suffice, as would the starting\n   offset and a length.  Returning just\
    \ the starting offset is not\n   acceptable.  This rule is necessary because advanced\
    \ collations can\n   treat strings of different lengths as equal (for example,\
    \ pre-\n   composed and decomposed accented characters).\n"
- title: 5.3.  Wildcards
  contents:
  - "5.3.  Wildcards\n   The protocol MUST specify whether it allows the use of wildcards\
    \ in\n   collation identifiers.  If the protocol allows wildcards, then:\n   \
    \   The protocol MUST specify how comparisons behave in the absence of\n     \
    \ explicit collation negotiation, or when a collation of \"default\"\n      is\
    \ requested.  The protocol MAY specify that the default collation\n      used\
    \ in such circumstances is sensitive to server configuration.\n      The protocol\
    \ SHOULD provide a way to list available collations\n      matching a given wildcard\
    \ pattern, or patterns.\n"
- title: 5.4.  String Comparison
  contents:
  - "5.4.  String Comparison\n   If a protocol compares strings in any nontrivial\
    \ way, using a\n   collation may be appropriate.  As an example, many protocols\
    \ use\n   case-independent strings.  In many cases, a simple ASCII mapping to\n\
    \   upper/lower case works well.  In other cases, it may be better to use\n  \
    \ a specifiable collation; for example, so that a server can treat \"i\"\n   and\
    \ \"I\" as equivalent in Italy, and different in Turkey (Turkish also\n   has\
    \ a dotted upper-case\" I\" and a dotless lower-case \"i\").\n   Protocol designers\
    \ should consider, in each case, whether to use a\n   specifiable collation. \
    \ Keywords often have other needs than user\n   variables, and search arguments\
    \ may be different again.\n"
- title: 5.5.  Disconnected Clients
  contents:
  - "5.5.  Disconnected Clients\n   If the protocol supports disconnected clients,\
    \ and a collation is\n   used that can use configurable tables (e.g., to support\n\
    \   locale-specific extensions), then the client may not be able to\n   reproduce\
    \ the server's collation operations while offline.\n   A mechanism to download\
    \ such tables has been discussed.  Such a\n   mechanism is not included in the\
    \ present specification, since the\n   problem is not yet well understood.\n"
- title: 5.6.  Error Codes
  contents:
  - "5.6.  Error Codes\n   The protocol specification should consider assigning protocol\
    \ error\n   codes for the following circumstances:\n   o  The client requests\
    \ the use of a collation by identifier or\n      pattern, but no implemented collation\
    \ matches that pattern.\n   o  The client attempts to use a collation for an operation\
    \ that is\n      not supported by that collation -- for example, attempting to\
    \ use\n      the \"i;ascii-numeric\" collation for substring matching.\n   o \
    \ The client uses an equality or substring matching collation, and\n      the\
    \ result is an error.  It may be appropriate to distinguish\n      between the\
    \ two input strings, particularly when one is supplied\n      by the client and\
    \ the other is stored by the server.  It might\n      also be appropriate to distinguish\
    \ the specific case of an invalid\n      UTF-8 string.\n"
- title: 5.7.  Octet Collation
  contents:
  - "5.7.  Octet Collation\n   The i;octet (Section 9.3) collation is only usable\
    \ with protocols\n   based on octet-strings.  Clients and servers MUST NOT use\
    \ i;octet\n   with other protocols.\n   If the protocol permits the use of collations\
    \ with data structures\n   other than strings, the protocol MUST describe the\
    \ default behavior\n   for a collation with those data structures.\n"
- title: 6.  Use by Existing Protocols
  contents:
  - "6.  Use by Existing Protocols\n   This section is informative.\n   Both ACAP\
    \ [11] and Sieve [14] are standards track specifications that\n   used collations\
    \ prior to the creation of this specification and\n   registry.  Those standards\
    \ do not meet all the application protocol\n   requirements described in Section\
    \ 5.\n   These protocols allow the use of the i;octet (Section 9.3) collation\n\
    \   working directly on UTF-8 data, as used in these protocols.\n   In Sieve,\
    \ all matches are either true or false.  Accordingly, Sieve\n   servers must treat\
    \ \"undefined\" and \"no-match\" results of the equality\n   and substring operations\
    \ as false, and only \"match\" as true.\n   In ACAP and Sieve, there are no invalid\
    \ strings.  In this document's\n   terms, invalid strings sort after valid strings.\n\
    \   IMAP [15] also collates, although that is explicit only when the\n   COMPARATOR\
    \ [17] extension is used.  The built-in IMAP substring\n   operation and the ordering\
    \ provided by the SORT [16] extension may\n   not meet the requirements made in\
    \ this document.\n   Other protocols may be in a similar position.\n   In IMAP,\
    \ the default collation is i;ascii-casemap, because its\n   operations are understood\
    \ to match IMAP's built-in operations.\n"
- title: 7.  Collation Registration
  contents:
  - '7.  Collation Registration

    '
- title: 7.1.  Collation Registration Procedure
  contents:
  - "7.1.  Collation Registration Procedure\n   The IETF will create a mailing list,\
    \ collation@ietf.org, which can be\n   used for public discussion of collation\
    \ proposals prior to\n   registration.  Use of the mailing list is strongly encouraged.\
    \  The\n   IESG will appoint a designated expert who will monitor the\n   collation@ietf.org\
    \ mailing list and review registrations.\n   The registration procedure begins\
    \ when a completed registration\n   template is sent to iana@iana.org and collation@ietf.org.\
    \  The\n   designated expert is expected to tell IANA and the submitter of the\n\
    \   registration within two weeks whether the registration is approved,\n   approved\
    \ with minor changes, or rejected with cause.  When a\n   registration is rejected\
    \ with cause, it can be re-submitted if the\n   concerns listed in the cause are\
    \ addressed.  Decisions made by the\n   designated expert can be appealed to the\
    \ IESG Applications Area\n   Director, then to the IESG.  They follow the normal\
    \ appeals procedure\n   for IESG decisions.\n   Collation registrations in a standards\
    \ track, BCP, or IESG-approved\n   experimental RFC are owned by the IETF, and\
    \ changes to the\n   registration follow normal procedures for updating such documents.\n\
    \   Collation registrations in other RFCs are owned by the RFC author(s).\n  \
    \ Other collation registrations are owned by the individual(s) listed\n   in the\
    \ contact field of the registration, and IANA will preserve this\n   information.\n\
    \   If the registration is a change of an existing collation, it MUST be\n   approved\
    \ by the owner.  In the event the owner cannot be contacted\n   for a period of\
    \ one month, and the designated expert deems the change\n   necessary, the IESG\
    \ MAY re-assign ownership to an appropriate party.\n"
- title: 7.2.  Collation Registration Format
  contents:
  - "7.2.  Collation Registration Format\n   Registration of a collation is done by\
    \ sending a well-formed XML\n   document to collation@ietf.org and iana@iana.org.\n"
- title: 7.2.1.  Registration Template
  contents:
  - "7.2.1.  Registration Template\n   Here is a template for the registration:\n\
    \   <?xml version='1.0'?>\n   <!DOCTYPE collation SYSTEM 'collationreg.dtd'>\n\
    \   <collation rfc=\"YYYY\" scope=\"global\" intendedUse=\"common\">\n     <identifier>collation\
    \ identifier</identifier>\n     <title>technical title for collation</title>\n\
    \     <operations>equality order substring</operations>\n     <specification>specification\
    \ reference</specification>\n     <owner>email address of owner or IETF</owner>\n\
    \     <submitter>email address of submitter</submitter>\n     <version>1</version>\n\
    \   </collation>\n"
- title: 7.2.2.  The Collation Element
  contents:
  - "7.2.2.  The Collation Element\n   The root of the registration document MUST\
    \ be a <collation> element.\n   The collation element contains the other elements\
    \ in the\n   registration, which are described in the following sub-subsections,\n\
    \   in the order given here.\n   The <collation> element MAY include an \"rfc=\"\
    \ attribute if the\n   specification is in an RFC.  The \"rfc=\" attribute gives\
    \ only the\n   number of the RFC, without any prefix, such as \"RFC\", or suffix,\
    \ such\n   as \".txt\".\n   The <collation> element MUST include a \"scope=\"\
    \ attribute, which MUST\n   have one of the values \"global\", \"local\", or \"\
    other\".\n   The <collation> element MUST include an \"intendedUse=\" attribute,\n\
    \   which must have one of the values \"common\", \"limited\", \"vendor\", or\n\
    \   \"deprecated\".  Collation specifications intended for \"common\" use are\n\
    \   expected to reference standards from standards bodies with\n   significant\
    \ experience dealing with the details of international\n   character sets.\n \
    \  Be aware that future revisions of this specification may add\n   additional\
    \ function types, as well as additional XML attributes,\n   values, and elements.\
    \  Any system that automatically parses these XML\n   documents MUST take this\
    \ into account to preserve future\n   compatibility.\n"
- title: 7.2.3.  The Identifier Element
  contents:
  - "7.2.3.  The Identifier Element\n   The <identifier> element gives the precise\
    \ identifier of the\n   collation, e.g., i;ascii-casemap.  The <identifier> element\
    \ is\n   mandatory.\n"
- title: 7.2.4.  The Title Element
  contents:
  - "7.2.4.  The Title Element\n   The <title> element gives the title of the collation.\
    \  The <title>\n   element is mandatory.\n"
- title: 7.2.5.  The Operations Element
  contents:
  - "7.2.5.  The Operations Element\n   The <operations> element lists which of the\
    \ three operations\n   (\"equality\", \"order\" or \"substring\") the collation\
    \ provides,\n   separated by single spaces.  The <operations> element is mandatory.\n"
- title: 7.2.6.  The Specification Element
  contents:
  - "7.2.6.  The Specification Element\n   The <specification> element describes where\
    \ to find the\n   specification.  The <specification> element is mandatory.  It\
    \ MAY\n   have a URI attribute.  There may be more than one <specification>\n\
    \   element, in which case, they together form the specification.\n   If it is\
    \ discovered that parts of a collation specification conflict,\n   a new revision\
    \ of the collation is necessary, and the\n   collation@ietf.org mailing list should\
    \ be notified.\n"
- title: 7.2.7.  The Submitter Element
  contents:
  - "7.2.7.  The Submitter Element\n   The <submitter> element provides an RFC 2822\
    \ [12] email address for\n   the person who submitted the registration.  It is\
    \ optional if the\n   <owner> element contains an email address.\n   There may\
    \ be more than one <submitter> element.\n"
- title: 7.2.8.  The Owner Element
  contents:
  - "7.2.8.  The Owner Element\n   The <owner> element contains either the four letters\
    \ \"IETF\" or an\n   email address of the owner of the registration.  The <owner>\
    \ element\n   is mandatory.  There may be more than one <owner> element.  If so,\n\
    \   all owners are equal.  Each owner can speak for all.\n"
- title: 7.2.9.  The Version Element
  contents:
  - "7.2.9.  The Version Element\n   The <version> element MUST be included when the\
    \ registration is\n   likely to be revised, or has been revised in such a way\
    \ that the\n   results change for one or more input strings.  The <version> element\n\
    \   is optional.\n"
- title: 7.2.10.  The Variable Element
  contents:
  - "7.2.10.  The Variable Element\n   The <variable> element specifies an optional\
    \ variable to control the\n   collation's behaviour, for example whether it is\
    \ case sensitive.  The\n   <variable> element is optional.  When <variable> is\
    \ used, it must\n   contain <name> and <default> elements, and it may contain\
    \ one or more\n   <value> elements.\n"
- title: 7.2.10.1.  The Name Element
  contents:
  - "7.2.10.1.  The Name Element\n   The <name> element specifies the name value of\
    \ a variable.  The\n   <name> element is mandatory.\n"
- title: 7.2.10.2.  The Default Element
  contents:
  - "7.2.10.2.  The Default Element\n   The <default> element specifies the default\
    \ value of a variable.  The\n   <default> element is mandatory.\n"
- title: 7.2.10.3.  The Value Element
  contents:
  - "7.2.10.3.  The Value Element\n   The <value> element specifies a legal value\
    \ of a variable.  The\n   <value> element is optional.  If one or more <value>\
    \ elements are\n   present, only those values are legal.  If none are, then the\n\
    \   variable's legal values do not form an enumerated set, and the rules\n   MUST\
    \ be specified in an RFC accompanying the registration.\n"
- title: 7.3.  Structure of Collation Registry
  contents:
  - "7.3.  Structure of Collation Registry\n   Once the registration is approved,\
    \ IANA will store each XML\n   registration document in a URL of the form\n  \
    \ http://www.iana.org/assignments/collation/collation-id.xml, where\n   collation-id\
    \ is the content of the identifier element in the\n   registration.  Both the\
    \ submitter and the designated expert are\n   responsible for verifying that the\
    \ XML is well-formed.  The\n   registration document should avoid using new elements.\
    \  If any are\n   necessary, it is important to be consistent with other registrations.\n\
    \   IANA will also maintain a text summary of the registry under the name\n  \
    \ http://www.iana.org/assignments/collation/collation-index.html.  This\n   summary\
    \ is divided into four sections.  The first section is for\n   collations intended\
    \ for common use.  This section is intended for\n   collation registrations published\
    \ in IESG-approved RFCs, or for\n   locally scoped collations from the primary\
    \ standards body for that\n   locale.  The designated expert is encouraged to\
    \ reject collation\n   registrations with an intended use of \"common\" if the\
    \ expert believes\n   it should be \"limited\", as it is desirable to keep the\
    \ number of\n   \"common\" registrations small and of high quality.  The second\
    \ section\n   is reserved for limited-use collations.  The third section is\n\
    \   reserved for registered vendor-specific collations.  The final\n   section\
    \ is reserved for deprecated collations.\n"
- title: 7.4.  Example Initial Registry Summary
  contents:
  - "7.4.  Example Initial Registry Summary\n   The following is an example of how\
    \ IANA might structure the initial\n   registry summary.html file:\n     Collation\
    \                              Functions Scope Reference\n     ---------     \
    \                         --------- ----- ---------\n   Common Use Collations:\n\
    \     i;ascii-casemap                        e, o, s   Local [RFC 4790]\n   Limited\
    \ Use Collations:\n     i;octet                                e, o, s   Other\
    \ [RFC 4790]\n     i;ascii-numeric                        e, o      Other [RFC\
    \ 4790]\n   Vendor Collations:\n   Deprecated Collations:\n   References\n   ----------\n\
    \   [RFC 4790]  Newman, C., Duerst, M., Gulbrandsen, A., \"Internet\n        \
    \       Application Protocol Collation Registry\", RFC 4790,\n               Sun\
    \ Microsystems, March 2007.\n"
- title: 8.  Guidelines for Expert Reviewer
  contents:
  - "8.  Guidelines for Expert Reviewer\n   The expert reviewer appointed by the IESG\
    \ has fairly broad latitude\n   for this registry.  While a number of collations\
    \ are expected\n   (particularly customizations of the UCA for localized use),\
    \ an\n   explosion of collations (particularly common-use collations) is not\n\
    \   desirable for widespread interoperability.  However, it is important\n   for\
    \ the expert reviewer to provide cause when rejecting a\n   registration, and,\
    \ when possible, to describe corrective action to\n   permit the registration\
    \ to proceed.  The following table includes\n   some example reasons to reject\
    \ a registration with cause:\n   o  The registration is not a well-formed XML\
    \ document.\n   o  The registration has an intended use of \"common\", but there\
    \ is no\n      evidence the collation will be widely deployed, so it should be\n\
    \      listed as \"limited\".\n   o  The registration has an intended use of \"\
    common\", but it is\n      redundant with the functionality of a previously registered\n\
    \      \"common\" collation.\n   o  The registration has an intended use of \"\
    common\", but the\n      specification is not detailed enough to allow interoperable\n\
    \      implementations by others.\n   o  The collation identifier fails to precisely\
    \ identify the version\n      numbers of relevant tables to use.\n   o  The registration\
    \ fails to meet one of the \"MUST\" requirements in\n      Section 4.\n   o  The\
    \ collation identifier fails to meet the syntax in Section 3.\n   o  The collation\
    \ specification referenced in the registration is\n      vague or has optional\
    \ features without a clear behavior specified.\n   o  The referenced specification\
    \ does not adequately address security\n      considerations specific to that\
    \ collation.\n   o  The registration's operations are needlessly different from\
    \ those\n      of traditional operations.\n   o  The registration's XML is needlessly\
    \ different from that of\n      already registered collations.\n"
- title: 9.  Initial Collations
  contents:
  - "9.  Initial Collations\n   This section registers the three collations that were\
    \ originally\n   defined in [11], and are implemented in most [14] engines.  Some\
    \ of\n   the behavior of these collations is perhaps not ideal, such as\n   i;ascii-casemap\
    \ accepting non-ASCII input.  Compatibility with widely\n   deployed code was\
    \ judged more important than fixing the collations.\n   Some of the aspects of\
    \ these collations are necessary to maintain\n   compatibility with widely deployed\
    \ code.\n"
- title: 9.1.  ASCII Numeric Collation
  contents:
  - '9.1.  ASCII Numeric Collation

    '
- title: 9.1.1.  ASCII Numeric Collation Description
  contents:
  - "9.1.1.  ASCII Numeric Collation Description\n   The \"i;ascii-numeric\" collation\
    \ is a simple collation intended for\n   use with arbitrarily-sized, unsigned\
    \ decimal integer numbers stored\n   as octet strings.  US-ASCII digits (0x30\
    \ to 0x39) represent digits of\n   the numbers.  Before converting from string\
    \ to integer, the input\n   string is truncated at the first non-digit character.\
    \  All input is\n   valid; strings that do not start with a digit represent positive\n\
    \   infinity.\n   The collation supports equality and ordering, but does not support\n\
    \   the substring operation.\n   The equality operation returns \"match\" if the\
    \ two strings represent\n   the same number (i.e., leading zeroes and trailing\
    \ non-digits are\n   disregarded), and \"no-match\" if the two strings represent\
    \ different\n   numbers.\n   The ordering operation returns \"less\" if the first\
    \ string represents\n   a smaller number than the second, \"equal\" if they represent\
    \ the same\n   number, and \"greater\" if the first string represents a larger\
    \ number\n   than the second.\n   Some examples: \"0\" is less than \"1\", and\
    \ \"1\" is less than\n   \"4294967298\". \"4294967298\", \"04294967298\", and\
    \ \"4294967298b\" are all\n   equal. \"04294967298\" is less than \"\". \"\",\
    \ \"x\", and \"y\" are equal.\n"
- title: 9.1.2.  ASCII Numeric Collation Registration
  contents:
  - "9.1.2.  ASCII Numeric Collation Registration\n   <?xml version='1.0'?>\n   <!DOCTYPE\
    \ collation SYSTEM 'collationreg.dtd'>\n   <collation rfc=\"4790\" scope=\"other\"\
    \ intendedUse=\"limited\">\n     <identifier>i;ascii-numeric</identifier>\n  \
    \   <title>ASCII Numeric</title>\n     <operations>equality order</operations>\n\
    \     <specification>RFC 4790</specification>\n     <owner>IETF</owner>\n    \
    \ <submitter>chris.newman@sun.com</submitter>\n   </collation>\n"
- title: 9.2.  ASCII Casemap Collation
  contents:
  - '9.2.  ASCII Casemap Collation

    '
- title: 9.2.1.  ASCII Casemap Collation Description
  contents:
  - "9.2.1.  ASCII Casemap Collation Description\n   The \"i;ascii-casemap\" collation\
    \ is a simple collation that operates\n   on octet strings and treats US-ASCII\
    \ letters case-insensitively.  It\n   provides equality, substring, and ordering\
    \ operations.  All input is\n   valid.  Note that letters outside ASCII are not\
    \ treated case-\n   insensitively.\n   Its equality, ordering, and substring operations\
    \ are as for i;octet,\n   except that at first, the lower-case letters (octet\
    \ values 97-122) in\n   each input string are changed to upper case (octet values\
    \ 65-90).\n   Care should be taken when using OS-supplied functions to implement\n\
    \   this collation, as it is not locale sensitive.  Functions, such as\n   strcasecmp\
    \ and toupper, are sometimes locale sensitive, and may\n   inappropriately map\
    \ lower-case letters other than a-z to upper case.\n   The i;ascii-casemap collation\
    \ is well-suited for use with many\n   Internet protocols and computer languages.\
    \  Use with natural language\n   is often inappropriate; even though the collation\
    \ apparently supports\n   languages such as Swahili and English, in real-world\
    \ use, it tends to\n   mis-sort a number of types of string:\n   o  people and\
    \ place names containing non-ASCII,\n   o  words such as \"naive\" (if spelled\
    \ with an accent, the accented\n      character could push the word to the wrong\
    \ spot in a sorted list),\n   o  names such as \"Lloyd\" (which, in Welsh, sorts\
    \ after \"Lyon\", unlike\n      in English),\n   o  strings containing euro and\
    \ pound sterling symbols, quotation\n      marks other than '\"', dashes/hyphens,\
    \ etc.\n"
- title: 9.2.2.  ASCII Casemap Collation Registration
  contents:
  - "9.2.2.  ASCII Casemap Collation Registration\n   <?xml version='1.0'?>\n   <!DOCTYPE\
    \ collation SYSTEM 'collationreg.dtd'>\n   <collation rfc=\"4790\" scope=\"local\"\
    \ intendedUse=\"common\">\n     <identifier>i;ascii-casemap</identifier>\n   \
    \  <title>ASCII Casemap</title>\n     <operations>equality order substring</operations>\n\
    \     <specification>RFC 4790</specification>\n     <owner>IETF</owner>\n    \
    \ <submitter>chris.newman@sun.com</submitter>\n   </collation>\n"
- title: 9.3.  Octet Collation
  contents:
  - '9.3.  Octet Collation

    '
- title: 9.3.1.  Octet Collation Description
  contents:
  - "9.3.1.  Octet Collation Description\n   The \"i;octet\" collation is a simple\
    \ and fast collation intended for\n   use on binary octet strings rather than\
    \ on character data.  Protocols\n   that want to make this collation available\
    \ have to do so by\n   explicitly allowing it.  If not explicitly allowed, it\
    \ MUST NOT be\n   used.  It never returns an \"undefined\" result.  It provides\
    \ equality,\n   substring, and ordering operations.\n   The ordering algorithm\
    \ is as follows:\n   1.  If both strings are the empty string, return the result\
    \ \"equal\".\n   2.  If the first string is empty and the second is not, return\
    \ the\n       result \"less\".\n   3.  If the second string is empty and the first\
    \ is not, return the\n       result \"greater\".\n   4.  If both strings begin\
    \ with the same octet value, remove the first\n       octet from both strings\
    \ and repeat this algorithm from step 1.\n   5.  If the unsigned value (0 to 255)\
    \ of the first octet of the first\n       string is less than the unsigned value\
    \ of the first octet of the\n       second string, then return \"less\".\n   6.\
    \  If this step is reached, return \"greater\".\n   This algorithm is roughly\
    \ equivalent to the C library function\n   memcmp, with appropriate length checks\
    \ added.\n   The matching operation returns \"match\" if the sorting algorithm\
    \ would\n   return \"equal\".  Otherwise, the matching operation returns \"no-\n\
    \   match\".\n   The substring operation returns \"match\" if the first string\
    \ is the\n   empty string, or if there exists a substring of the second string\
    \ of\n   length equal to the length of the first string, which would result in\n\
    \   a \"match\" result from the equality function.  Otherwise, the\n   substring\
    \ operation returns \"no-match\".\n"
- title: 9.3.2.  Octet Collation Registration
  contents:
  - "9.3.2.  Octet Collation Registration\n   This collation is defined with intendedUse=\"\
    limited\" because it can\n   only be used by protocols that explicitly allow it.\n\
    \   <?xml version='1.0'?>\n   <!DOCTYPE collation SYSTEM 'collationreg.dtd'>\n\
    \   <collation rfc=\"4790\" scope=\"global\" intendedUse=\"limited\">\n     <identifier>i;octet</identifier>\n\
    \     <title>Octet</title>\n     <operations>equality order substring</operations>\n\
    \     <specification>RFC 4790</specification>\n     <owner>IETF</owner>\n    \
    \ <submitter>chris.newman@sun.com</submitter>\n   </collation>\n"
- title: 10.  IANA Considerations
  contents:
  - "10.  IANA Considerations\n   Section 7 defines how to register collations with\
    \ IANA.  Section 9\n   defines a list of predefined collations that have been\
    \ registered\n   with IANA.\n"
- title: 11.  Security Considerations
  contents:
  - "11.  Security Considerations\n   Collations will normally be used with UTF-8\
    \ strings.  Thus, the\n   security considerations for UTF-8 [3], stringprep [6],\
    \ and Unicode\n   TR-36 [8] also apply, and are normative to this specification.\n"
- title: 12.  Acknowledgements
  contents:
  - "12.  Acknowledgements\n   The authors want to thank all who have contributed\
    \ to this document,\n   including Brian Carpenter, John Cowan, Dave Cridland,\
    \ Mark Davis,\n   Spencer Dawkins, Lisa Dusseault, Lars Eggert, Frank Ellermann,\
    \ Philip\n   Guenther, Tony Hansen, Ted Hardie, Sam Hartman, Kjetil Torgrim Homme,\n\
    \   Michael Kay, John Klensin, Alexey Melnikov, Jim Melton, and Abhijit\n   Menon-Sen.\n"
- title: 13.  References
  contents:
  - '13.  References

    '
- title: 13.1.  Normative References
  contents:
  - "13.1.  Normative References\n   [1]   Bradner, S., \"Key words for use in RFCs\
    \ to Indicate Requirement\n         Levels\", BCP 14, RFC 2119, March 1997.\n\
    \   [2]   Crocker, D. and P. Overell, \"Augmented BNF for Syntax\n         Specifications:\
    \ ABNF\", RFC 4234, October 2005.\n   [3]   Yergeau, F., \"UTF-8, a transformation\
    \ format of ISO 10646\",\n         STD 63, RFC 3629, November 2003.\n   [4]  \
    \ Berners-Lee, T., Fielding, R., and L. Masinter, \"Uniform\n         Resource\
    \ Identifier (URI): Generic Syntax\", RFC 3986,\n         January 2005.\n   [5]\
    \   Phillips, A. and M. Davis, \"Tags for Identifying Languages\",\n         BCP\
    \ 47, RFC 4646, September 2006.\n   [6]   Hoffman, P. and M. Blanchet, \"Preparation\
    \ of Internationalized\n         Strings (\"stringprep\")\", RFC 3454, December\
    \ 2002.\n   [7]   Davis, M. and K. Whistler, \"Unicode Collation Algorithm version\n\
    \         14\", May 2005,\n         <http://www.unicode.org/reports/tr10/tr10-14.html>.\n\
    \   [8]   Davis, M. and M. Suignard, \"Unicode Security Considerations\",\n  \
    \       February 2006, <http://www.unicode.org/reports/tr36/>.\n"
- title: 13.2.  Informative References
  contents:
  - "13.2.  Informative References\n   [9]   Freed, N. and N. Borenstein, \"Multipurpose\
    \ Internet Mail\n         Extensions (MIME) Part One: Format of Internet Message\
    \ Bodies\",\n         RFC 2045, November 1996.\n   [10]  Melnikov, A., \"Simple\
    \ Authentication and Security Layer\n         (SASL)\", RFC 4422, June 2006.\n\
    \   [11]  Newman, C. and J. Myers, \"ACAP -- Application Configuration\n     \
    \    Access Protocol\", RFC 2244, November 1997.\n   [12]  Resnick, P., \"Internet\
    \ Message Format\", RFC 2822, April 2001.\n   [13]  Freed, N. and J. Postel, \"\
    IANA Charset Registration\n         Procedures\", BCP 19, RFC 2978, October 2000.\n\
    \   [14]  Showalter, T., \"Sieve: A Mail Filtering Language\", RFC 3028,\n   \
    \      January 2001.\n   [15]  Crispin, M., \"Internet Message Access Protocol\
    \ - Version\n         4rev1\", RFC 3501, March 2003.\n   [16]  Crispin, M. and\
    \ K. Murchison, \"Internet Message Access Protocol\n         - Sort and Thread\
    \ Extensions\", Work in Progress, May 2004.\n   [17]  Newman, C. and A. Gulbrandsen,\
    \ \"Internet Message Access\n         Protocol Internationalization\", Work in\
    \ Progress, January 2006.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Chris Newman\n   Sun Microsystems\n   1050 Lakes Drive\n\
    \   West Covina, CA  91790\n   USA\n   EMail: chris.newman@sun.com\n   Martin\
    \ Duerst\n   Aoyama Gakuin University\n   5-10-1 Fuchinobe\n   Sagamihara, Kanagawa\
    \  229-8558\n   Japan\n   Phone: +81 42 759 6329\n   Fax:   +81 42 759 6495\n\
    \   EMail: duerst@it.aoyama.ac.jp\n   URI:   http://www.sw.it.aoyama.ac.jp/D%C3%BCrst/\n\
    \   Note: Please write \"Duerst\" with u-umlaut wherever possible, for\n   example\
    \ as \"D&#252;rst\" in XML and HTML.\n   Arnt Gulbrandsen\n   Oryx Mail Systems\
    \ GmbH\n   Schweppermannstr. 8\n   81671 Munich\n   Germany\n   Fax:   +49 89\
    \ 4502 9758\n   EMail: arnt@oryx.com\n   URI:   http://www.oryx.com/arnt/\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2007).\n   This document\
    \ is subject to the rights, licenses and restrictions\n   contained in BCP 78,\
    \ and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE\
    \ INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED,\
    \ INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION\
    \ HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY\
    \ OR FITNESS FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
