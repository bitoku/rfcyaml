- contents:
  - '             Explicit Reverse Path Forwarding (RPF) Vector

    '
  title: __initial_text__
- contents:
  - "Abstract\n   The PIM Reverse Path Forwarding (RPF) Vector TLV defined in RFC
    5496\n   can be included in a PIM Join Attribute such that the RPF neighbor is\n
    \  selected based on the unicast reachability of the RPF Vector instead\n   of
    the source or Rendezvous Point associated with the multicast tree.\n   This document
    defines a new RPF Vector Attribute type such that an\n   explicit RPF neighbor
    list can be encoded in the PIM Join Attribute,\n   thus bypassing the unicast
    route lookup.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    7841.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7891.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2016 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .
    . . . . .   3\n   2.  Specification of Requirements . . . . . . . . . . . . .
    . . .   3\n   3.  Motivation  . . . . . . . . . . . . . . . . . . . . . . . .
    .   3\n   4.  Use of the PIM Explicit RPF Vector  . . . . . . . . . . . . .   4\n
    \  5.  Explicit RPF Vector Attribute TLV Format  . . . . . . . . . .   5\n   6.
    \ Mixed Vector Processing . . . . . . . . . . . . . . . . . . .   5\n   7.  Conflicting
    RPF Vectors . . . . . . . . . . . . . . . . . . .   5\n   8.  PIM Asserts . .
    . . . . . . . . . . . . . . . . . . . . . . .   6\n   9.  Join Suppression  .
    . . . . . . . . . . . . . . . . . . . . .   6\n   10. Unsupported Explicit Vector
    Handling  . . . . . . . . . . . .   7\n   11. IANA Considerations . . . . . .
    . . . . . . . . . . . . . . .   7\n   12. Security Considerations . . . . . .
    . . . . . . . . . . . . .   7\n   13. References  . . . . . . . . . . . . . .
    . . . . . . . . . . .   8\n     13.1.  Normative References . . . . . . . . .
    . . . . . . . . .   8\n     13.2.  Informative References . . . . . . . . . .
    . . . . . . .   8\n   Acknowledgements  . . . . . . . . . . . . . . . . . . .
    . . . . .   8\n   Authors' Addresses  . . . . . . . . . . . . . . . . . . . .
    . . .   9\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   The procedures in [RFC5496] define how an RPF Vector can
    be used to\n   influence the path selection in the absence of a route to the source.\n
    \  The same procedures can be used to override a route to the source\n   when
    it exists.  It is possible to include multiple RPF Vectors in\n   the list where
    each router along the path will perform a unicast\n   route lookup on the first
    Vector in the attribute list.  Once the\n   router owning the address of the RPF
    Vector is reached, following the\n   procedures in [RFC5496], the RPF Vector will
    be removed from the\n   attribute list.  This will result in a 'loosely' routed
    path that\n   still depends on unicast reachability to the RPF Vector(s).\n   In
    some scenarios, the network administrators don't want to rely on\n   the unicast
    reachability to the RPF Vector address and want to build\n   a path strictly based
    on the RPF Vectors.  In that case, the RPF\n   Vectors represent a list of directly
    connected PIM neighbors along\n   the path.  For these Vectors, the router would
    not do a route lookup\n   in the unicast routing table.  These Vectors are referred
    to as\n   'Explicit' RPF Vector addresses.  If a router receiving an Explicit\n
    \  RPF Vector does not have a PIM neighbor matching the Explicit RPF\n   Vector
    address, it does not fall back to loosely routing the Join.\n   Instead, it could
    process the packet and store the RPF Vector list so\n   that the PIM Join can
    be sent out as soon as the neighbor comes up.\n   Since the behavior of the Explicit
    RPF Vector differs from the\n   'loose' RPF Vector as defined in [RFC5496], a
    new attribute called\n   the Explicit RPF Vector is defined.\n   This document
    defines a new TLV in the PIM Join Attribute message\n   [RFC5384] for specifying
    the explicit path.\n"
  title: 1.  Introduction
- contents:
  - "2.  Specification of Requirements\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\",
    \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\",
    and \"OPTIONAL\" in this\n   document are to be interpreted as described in [RFC2119].\n"
  title: 2.  Specification of Requirements
- contents:
  - "3.  Motivation\n   Some broadcast video transport networks use a multicast PIM
    Live-Live\n   resiliency model for video delivery based on PIM Source-Specific\n
    \  Multicast (PIM-SSM) or PIM Any-Source Multicast (PIM-ASM).  Live-Live\n   implies
    using two active, spatially diverse multicast trees to\n   transport video flows
    from root to leaf multicast routers.  The leaf\n   multicast router receives two
    copies from the PIM multicast core and\n   will replicate one copy towards the
    receivers [RFC7431].\n   One of the requirements of the PIM Live-Live resiliency
    model is to\n   ensure path diversity of the two active PIM trees in the core
    such\n   that they do not intersect to avoid a single point of failure.  IGP-\n
    \  routed RPF paths of two PIM trees could be routed over the same\n   transit
    router and create a single point of failure.  It is useful to\n   have a way to
    specify the explicit path along which the PIM Join is\n   propagated.\n   How
    the Explicit RPF Vector list is determined is outside the scope\n   of this document.
    \ For example, it may either be manually configured\n   by the network operator
    or procedures may be implemented on the\n   egress router to dynamically calculate
    the Vector list based on a\n   link-state database protocol, like OSPF or IS-IS.\n
    \  Due to the fact that the leaf router receives two copies of the\n   multicast
    stream via two diverse paths, there is no need for PIM to\n   repair the broken
    path immediately.  It is up to the egress router to\n   either wait for the broken
    path to be repaired or build a new\n   explicit path using a new RPF Vector list.
    \ Which method is applied\n   depends very much on how the Vector list was determined
    initially.\n   Double failures are not considered and are outside the scope of
    this\n   document.\n   This document describes the procedures to carry Explicit
    RPF Vectors\n   in PIM.  It is up to the mechanism(s) that produce the Explicit
    RPF\n   Vectors to ensure they are correct.  Existing mechanisms like\n   [MTRACE-V2]
    may be used to verify how the PIM tree was built.\n"
  title: 3.  Motivation
- contents:
  - "4.  Use of the PIM Explicit RPF Vector\n   Figure 1 provides an example multicast
    join path\n   R4->R3->R6->R5->R2->R1, where the multicast join is explicitly routed\n
    \  to the source hop by hop using the Explicit RPF Vector list.  When\n   the
    R5-R6 link fails, the Join will NOT take an alternate path.\n                  [S]---(R1)--(R2)---(R3)--(R4)---[R]\n
    \                        <---   |      |  ---\n                            |   |
    \     |  |\n                            | (R5)---(R6) |\n                            -
    (S,G) Join -\n                                |      |\n                                |
    \     |\n                              (R7)---(R8)\n                                 Figure
    1\n   In comparison, when the procedures specified in [RFC5496] are used,\n   if
    the R5-R6 link fails, then the Join may be rerouted using the\n   R6-R8-R7 path
    to reach R5.\n"
  title: 4.  Use of the PIM Explicit RPF Vector
- contents:
  - "5.  Explicit RPF Vector Attribute TLV Format\n       0                   1                   2
    \                  3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
    5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \      |F|E| Type      | Length        |        Value\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-.......\n
    \                                Figure 2\n   F bit:  'Transitive Attribute' bit.
    \ The F bit MUST be set to 0.\n      Otherwise, there could be loops.\n   E bit:
    \ 'End of Attributes' bit.  If the E bit is set, then this is\n      the last
    TLV specified in the list.\n   Type:  4 (Explicit RPF Vector)\n   Length:  The
    length depending on the Address Family (IPv4 or IPv6) of\n      the Encoded-Unicast
    address.\n   Value:  Encoded-Unicast address.  This SHOULD be a valid IPv4 or
    IPv6\n      address of an upstream router.\n"
  title: 5.  Explicit RPF Vector Attribute TLV Format
- contents:
  - "6.  Mixed Vector Processing\n   The Explicit RPF Vector Attribute does not impact
    or restrict the\n   functionality of other RPF Vector Attributes in a PIM Join.
    \ It is\n   possible to mix Vectors of different types such that some part of
    the\n   tree is explicit and other parts are loosely routed.  RPF Vectors are\n
    \  processed in the order in which they are specified.\n"
  title: 6.  Mixed Vector Processing
- contents:
  - "7.  Conflicting RPF Vectors\n   It is possible that a PIM router has multiple
    downstream neighbors.\n   If for the same multicast route there is an inconsistency
    between the\n   Explicit RPF Vector lists provided by the downstream PIM neighbor,\n
    \  the procedures as documented in Section 3.3.3 of [RFC5384] apply.\n   The conflict
    resolution procedures in Section 3.3.3 of [RFC5384] only\n   apply to attributes
    of the same Join Attribute type.  Join Attributes\n   that have a different type
    can't be compared because the content of\n   the Join Attribute may have a totally
    different meaning and/or\n   encoding.  This may cause a problem if a mix of Explicit
    RPF Vectors\n   (this document) and 'loose' RPF Vectors [RFC5496] is received
    from\n   two or more downstream routers.  The order in which the RPF Vectors\n
    \  are encoded may be different, and/or the combination of RPF Vectors\n   may
    be inconsistent.  The procedures in Section 3.3.3 of [RFC5384]\n   would not resolve
    the conflict.  The following procedures MUST be\n   applied to deal with this
    scenario.\n   When a PIM Join with a Join Attribute list is received from a\n
    \  downstream neighbor, the router MUST verify that the order in which\n   the
    RPF Vector types appear in the PIM Join Attribute list matches\n   what is stored
    as the Join Attribute list for reaching the source or\n   Rendezvous Point listed
    in the PIM Join.  Once it is determined that\n   the RPF Vector types on the stack
    are equal, the content of the RPF\n   Vectors MUST be compared ([RFC5384]).  If
    it is determined that there\n   is either a conflict with RPF Vector types or
    the RPF Vector content,\n   the router uses the RPF Vector stack from the PIM
    adjacency with the\n   numerically smallest IP address.  In the case of IPv6,
    the link-local\n   address will be used.  When two neighbors have the same IP
    address,\n   either for IPv4 or IPv6, the interface index MUST be used as a tie\n
    \  breaker.  It's RECOMMENDED that the router doing the conflict\n   resolution
    log a message.\n"
  title: 7.  Conflicting RPF Vectors
- contents:
  - "8.  PIM Asserts\n   Section 3.3.3 of [RFC5496] specifies the procedures for how
    to deal\n   with PIM Asserts when RPF Vectors are used.  The same procedures\n
    \  apply to the Explicit RPF Vector.  There is a minor behavioral\n   difference:
    the route 'metric' that is included in the PIM Assert\n   should be the route
    metric of the first Explicit RPF Vector address\n   in the list.  However, the
    first Explicit Vector should always be\n   directly connected, so the metric may
    likely be zero.  The metric\n   will therefore not be a tie breaker in the PIM
    Assert selection\n   procedure.\n"
  title: 8.  PIM Asserts
- contents:
  - "9.  Join Suppression\n   Section 3.3.4 of [RFC5496] specifies the procedures
    for how to apply\n   Join Suppression when an RPF Vector Attribute is included
    in the PIM\n   Join.  The same procedure applies to the Explicit RPF Vector\n
    \  Attribute.  The procedure MUST match against all the Explicit RPF\n   Vectors
    in the PIM Join before a PIM Join can be suppressed.\n"
  title: 9.  Join Suppression
- contents:
  - "10.  Unsupported Explicit Vector Handling\n   The F bit MUST be set to 0 in all
    Explicit RPF Vectors in case the\n   upstream router receiving the Join does not
    support the TLV.  As\n   described in Section 3.3.2 of [RFC5384], routers that
    do not\n   understand the type of a particular attribute that has the F bit\n
    \  clear will discard it and continue to process the Join.\n   This processing
    is particularly important when the routers that do\n   not support the Explicit
    RPF TLV are identified as hops in the\n   Explicit RPF list because failing to
    remove the RPF Vectors could\n   cause upstream routers to send the Join back
    toward these routers\n   causing loops.\n   As the administrator is manually specifying
    the path that the Joins\n   need to be sent on, it is recommended that the administrator
    computes\n   the path to include routers that support the Explicit Vector and\n
    \  check that the state is created correctly on each router along the\n   path.
    \ Tools like mtrace can be used for debugging and to ensure that\n   the Join
    state is setup correctly.\n"
  title: 10.  Unsupported Explicit Vector Handling
- contents:
  - "11.  IANA Considerations\n   In the \"PIM Join Attribute Types\" registry, IANA
    has assigned the\n   value 4 to the Explicit RPF Vector Attribute.\n"
  title: 11.  IANA Considerations
- contents:
  - "12.  Security Considerations\n   Security of the Explicit RPF Vector Attribute
    is only guaranteed by\n   the security of the PIM packet, so the security considerations
    for\n   PIM Join packets as described in PIM-SM [RFC7761] apply here.  A\n   malicious
    downstream node can attempt a denial-of-service attack by\n   sending PIM Join
    packets with invalid addresses listed in the RPF\n   Vector stack with an intent
    to stop the propagation of the Joins to\n   the correct upstream node.  Another
    denial-of-service attack would be\n   a malicious downstream node targeting all
    Joins to a specific node\n   with an intent to overload the bandwidth on that
    node by making it\n   responsible for forwarding multicast traffic for more streams
    that it\n   can handle.  In order to minimize the risk of a denial-of-service\n
    \  attack from forged PIM Join packets with Explicit RPF Vector stack,\n   it
    should be used within a single trusted management domain.\n   If a router finds
    that it cannot use the Vector list due to the next\n   hop router not being a
    PIM neighbor, it may log an error.  Also, if a\n   router is receiving two conflicting
    Vectors, it may log an error.  It\n   is up to the mechanisms that produced the
    Explicit RPF Vector to\n   ensure that the PIM tree is built correctly and to
    monitor any error\n   logs.\n"
  title: 12.  Security Considerations
- contents:
  - '13.  References

    '
  - contents:
    - "13.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use
      in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n
      \             DOI 10.17487/RFC2119, March 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n
      \  [RFC5384]  Boers, A., Wijnands, I., and E. Rosen, \"The Protocol\n              Independent
      Multicast (PIM) Join Attribute Format\",\n              RFC 5384, DOI 10.17487/RFC5384,
      November 2008,\n              <http://www.rfc-editor.org/info/rfc5384>.\n   [RFC5496]
      \ Wijnands, IJ., Boers, A., and E. Rosen, \"The Reverse Path\n              Forwarding
      (RPF) Vector TLV\", RFC 5496,\n              DOI 10.17487/RFC5496, March 2009,\n
      \             <http://www.rfc-editor.org/info/rfc5496>.\n   [RFC7761]  Fenner,
      B., Handley, M., Holbrook, H., Kouvelas, I.,\n              Parekh, R., Zhang,
      Z., and L. Zheng, \"Protocol Independent\n              Multicast - Sparse Mode
      (PIM-SM): Protocol Specification\n              (Revised)\", STD 83, RFC 7761,
      DOI 10.17487/RFC7761, March\n              2016, <http://www.rfc-editor.org/info/rfc7761>.\n"
    title: 13.1.  Normative References
  - contents:
    - "13.2.  Informative References\n   [MTRACE-V2]\n              Asaeda, H., Meyer,
      K., and W. Lee, \"Mtrace Version 2:\n              Traceroute Facility for IP
      Multicast\", Work in Progress,\n              draft-ietf-mboned-mtrace-v2-13,
      June 2016.\n   [RFC7431]  Karan, A., Filsfils, C., Wijnands, IJ., Ed., and B.\n
      \             Decraene, \"Multicast-Only Fast Reroute\", RFC 7431,\n              DOI
      10.17487/RFC7431, August 2015,\n              <http://www.rfc-editor.org/info/rfc7431>.\n"
    title: 13.2.  Informative References
  title: 13.  References
- contents:
  - "Acknowledgements\n   The authors would like to thank Vatsa Kumar, Nagendra Kumar,
    and\n   Bharat Joshi for their comments on the document.\n"
  title: Acknowledgements
- contents:
  - "Authors' Addresses\n   Javed Asghar\n   Cisco Systems\n   725, Alder Drive\n
    \  Milpitas, CA  95035\n   United States\n   Email: jasghar@cisco.com\n   IJsbrand
    Wijnands (editor)\n   Cisco Systems\n   De Kleetlaan 6a\n   Diegem  1831\n   Belgium\n
    \  Email: ice@cisco.com\n   Sowmya Krishnaswamy\n   Cisco Systems\n   3750 Cisco
    Way\n   San Jose, CA  95134\n   United States\n   Email: sowkrish@cisco.com\n
    \  Apoorva Karan\n   Cisco Systems\n   3750 Cisco Way\n   San Jose, CA  95134\n
    \  United States\n   Email: apoorva@cisco.com\n   Vishal Arya\n   DIRECTV Inc.\n
    \  2230 E Imperial Hwy\n   El Segundo, CA  90245\n   United States\n   Email:
    varya@directv.com\n"
  title: Authors' Addresses
