- title: __initial_text__
  contents:
  - ''
- title: Independent Submission                                     M. Mahalingam
  contents:
  - "Independent Submission                                     M. Mahalingam\n  \
    \     Virtual eXtensible Local Area Network (VXLAN): A Framework\n   for Overlaying\
    \ Virtualized Layer 2 Networks over Layer 3 Networks\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes Virtual eXtensible Local Area Network\n\
    \   (VXLAN), which is used to address the need for overlay networks\n   within\
    \ virtualized data centers accommodating multiple tenants.  The\n   scheme and\
    \ the related protocols can be used in networks for cloud\n   service providers\
    \ and enterprise data centers.  This memo documents\n   the deployed VXLAN protocol\
    \ for the benefit of the Internet\n   community.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This is a contribution to\
    \ the RFC Series, independently of any other\n   RFC stream.  The RFC Editor has\
    \ chosen to publish this document at\n   its discretion and makes no statement\
    \ about its value for\n   implementation or deployment.  Documents approved for\
    \ publication by\n   the RFC Editor are not a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 5741.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc7348.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2014 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \      1.1. Acronyms and Definitions ...................................4\n  \
    \ 2. Conventions Used in This Document ...............................4\n   3.\
    \ VXLAN Problem Statement .........................................5\n      3.1.\
    \ Limitations Imposed by Spanning Tree and VLAN Ranges .......5\n      3.2. Multi-tenant\
    \ Environments ..................................5\n      3.3. Inadequate Table\
    \ Sizes at ToR Switch .......................6\n   4. VXLAN ...........................................................6\n\
    \      4.1. Unicast VM-to-VM Communication .............................7\n  \
    \    4.2. Broadcast Communication and Mapping to Multicast ...........8\n    \
    \  4.3. Physical Infrastructure Requirements .......................9\n   5. VXLAN\
    \ Frame Format .............................................10\n   6. VXLAN Deployment\
    \ Scenarios .....................................14\n      6.1. Inner VLAN Tag\
    \ Handling ...................................18\n   7. Security Considerations\
    \ ........................................18\n   8. IANA Considerations ............................................19\n\
    \   9. References .....................................................19\n  \
    \    9.1. Normative References ......................................19\n    \
    \  9.2. Informative References ....................................20\n   10.\
    \ Acknowledgments ...............................................21\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Server virtualization has placed increased demands on the\
    \ physical\n   network infrastructure.  A physical server now has multiple Virtual\n\
    \   Machines (VMs) each with its own Media Access Control (MAC) address.\n   This\
    \ requires larger MAC address tables in the switched Ethernet\n   network due\
    \ to potential attachment of and communication among\n   hundreds of thousands\
    \ of VMs.\n   In the case when the VMs in a data center are grouped according\
    \ to\n   their Virtual LAN (VLAN), one might need thousands of VLANs to\n   partition\
    \ the traffic according to the specific group to which the VM\n   may belong.\
    \  The current VLAN limit of 4094 is inadequate in such\n   situations.\n   Data\
    \ centers are often required to host multiple tenants, each with\n   their own\
    \ isolated network domain.  Since it is not economical to\n   realize this with\
    \ dedicated infrastructure, network administrators\n   opt to implement isolation\
    \ over a shared network.  In such scenarios,\n   a common problem is that each\
    \ tenant may independently assign MAC\n   addresses and VLAN IDs leading to potential\
    \ duplication of these on\n   the physical network.\n   An important requirement\
    \ for virtualized environments using a Layer 2\n   physical infrastructure is\
    \ having the Layer 2 network scale across\n   the entire data center or even between\
    \ data centers for efficient\n   allocation of compute, network, and storage resources.\
    \  In such\n   networks, using traditional approaches like the Spanning Tree\n\
    \   Protocol (STP) for a loop-free topology can result in a large number\n   of\
    \ disabled links.\n   The last scenario is the case where the network operator\
    \ prefers to\n   use IP for interconnection of the physical infrastructure (e.g.,\
    \ to\n   achieve multipath scalability through Equal-Cost Multipath (ECMP),\n\
    \   thus avoiding disabled links).  Even in such environments, there is a\n  \
    \ need to preserve the Layer 2 model for inter-VM communication.\n   The scenarios\
    \ described above lead to a requirement for an overlay\n   network.  This overlay\
    \ is used to carry the MAC traffic from the\n   individual VMs in an encapsulated\
    \ format over a logical \"tunnel\".\n   This document details a framework termed\
    \ \"Virtual eXtensible Local\n   Area Network (VXLAN)\" that provides such an\
    \ encapsulation scheme to\n   address the various requirements specified above.\
    \  This memo\n   documents the deployed VXLAN protocol for the benefit of the\
    \ Internet\n   community.\n"
- title: 1.1.  Acronyms and Definitions
  contents:
  - "1.1.  Acronyms and Definitions\n   ACL      Access Control List\n   ECMP    \
    \ Equal-Cost Multipath\n   IGMP     Internet Group Management Protocol\n   IHL\
    \      Internet Header Length\n   MTU      Maximum Transmission Unit\n   PIM \
    \     Protocol Independent Multicast\n   SPB      Shortest Path Bridging\n   STP\
    \      Spanning Tree Protocol\n   ToR      Top of Rack\n   TRILL    Transparent\
    \ Interconnection of Lots of Links\n   VLAN     Virtual Local Area Network\n \
    \  VM       Virtual Machine\n   VNI      VXLAN Network Identifier (or VXLAN Segment\
    \ ID)\n   VTEP     VXLAN Tunnel End Point.  An entity that originates and/or\n\
    \            terminates VXLAN tunnels\n   VXLAN    Virtual eXtensible Local Area\
    \ Network\n   VXLAN Segment\n            VXLAN Layer 2 overlay network over which\
    \ VMs communicate\n   VXLAN Gateway\n            an entity that forwards traffic\
    \ between VXLANs\n"
- title: 2.  Conventions Used in This Document
  contents:
  - "2.  Conventions Used in This Document\n   The key words \"MUST\", \"MUST NOT\"\
    , \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in RFC 2119 [RFC2119].\n"
- title: 3.  VXLAN Problem Statement
  contents:
  - "3.  VXLAN Problem Statement\n   This section provides further details on the\
    \ areas that VXLAN is\n   intended to address.  The focus is on the networking\
    \ infrastructure\n   within the data center and the issues related to them.\n"
- title: 3.1.  Limitations Imposed by Spanning Tree and VLAN Ranges
  contents:
  - "3.1.  Limitations Imposed by Spanning Tree and VLAN Ranges\n   Current Layer\
    \ 2 networks use the IEEE 802.1D Spanning Tree Protocol\n   (STP) [802.1D] to\
    \ avoid loops in the network due to duplicate paths.\n   STP blocks the use of\
    \ links to avoid the replication and looping of\n   frames.  Some data center\
    \ operators see this as a problem with Layer\n   2 networks in general, since\
    \ with STP they are effectively paying for\n   more ports and links than they\
    \ can really use.  In addition,\n   resiliency due to multipathing is not available\
    \ with the STP model.\n   Newer initiatives, such as TRILL [RFC6325] and SPB [802.1aq],\
    \ have\n   been proposed to help with multipathing and surmount some of the\n\
    \   problems with STP.  STP limitations may also be avoided by\n   configuring\
    \ servers within a rack to be on the same Layer 3 network,\n   with switching\
    \ happening at Layer 3 both within the rack and between\n   racks.  However, this\
    \ is incompatible with a Layer 2 model for inter-\n   VM communication.\n   A\
    \ key characteristic of Layer 2 data center networks is their use of\n   Virtual\
    \ LANs (VLANs) to provide broadcast isolation.  A 12-bit VLAN\n   ID is used in\
    \ the Ethernet data frames to divide the larger Layer 2\n   network into multiple\
    \ broadcast domains.  This has served well for\n   many data centers that require\
    \ fewer than 4094 VLANs.  With the\n   growing adoption of virtualization, this\
    \ upper limit is seeing\n   pressure.  Moreover, due to STP, several data centers\
    \ limit the\n   number of VLANs that could be used.  In addition, requirements\
    \ for\n   multi-tenant environments accelerate the need for larger VLAN limits,\n\
    \   as discussed in Section 3.3.\n"
- title: 3.2.  Multi-tenant Environments
  contents:
  - "3.2.  Multi-tenant Environments\n   Cloud computing involves on-demand elastic\
    \ provisioning of resources\n   for multi-tenant environments.  The most common\
    \ example of cloud\n   computing is the public cloud, where a cloud service provider\
    \ offers\n   these elastic services to multiple customers/tenants over the same\n\
    \   physical infrastructure.\n   Isolation of network traffic by a tenant could\
    \ be done via Layer 2 or\n   Layer 3 networks.  For Layer 2 networks, VLANs are\
    \ often used to\n   segregate traffic -- so a tenant could be identified by its\
    \ own VLAN,\n   for example.  Due to the large number of tenants that a cloud\n\
    \   provider might service, the 4094 VLAN limit is often inadequate.  In\n   addition,\
    \ there is often a need for multiple VLANs per tenant, which\n   exacerbates the\
    \ issue.\n   A related use case is cross-pod expansion.  A pod typically consists\n\
    \   of one or more racks of servers with associated network and storage\n   connectivity.\
    \  Tenants may start off on a pod and, due to expansion,\n   require servers/VMs\
    \ on other pods, especially in the case when\n   tenants on the other pods are\
    \ not fully utilizing all their\n   resources.  This use case requires a \"stretched\"\
    \ Layer 2 environment\n   connecting the individual servers/VMs.\n   Layer 3 networks\
    \ are not a comprehensive solution for multi-tenancy\n   either.  Two tenants\
    \ might use the same set of Layer 3 addresses\n   within their networks, which\
    \ requires the cloud provider to provide\n   isolation in some other form.  Further,\
    \ requiring all tenants to use\n   IP excludes customers relying on direct Layer\
    \ 2 or non-IP Layer 3\n   protocols for inter VM communication.\n"
- title: 3.3.  Inadequate Table Sizes at ToR Switch
  contents:
  - "3.3.  Inadequate Table Sizes at ToR Switch\n   Today's virtualized environments\
    \ place additional demands on the MAC\n   address tables of Top-of-Rack (ToR)\
    \ switches that connect to the\n   servers.  Instead of just one MAC address per\
    \ server link, the ToR\n   now has to learn the MAC addresses of the individual\
    \ VMs (which could\n   range in the hundreds per server).  This is needed because\
    \ traffic\n   to/from the VMs to the rest of the physical network will traverse\
    \ the\n   link between the server and the switch.  A typical ToR switch could\n\
    \   connect to 24 or 48 servers depending upon the number of its server-\n   facing\
    \ ports.  A data center might consist of several racks, so each\n   ToR switch\
    \ would need to maintain an address table for the\n   communicating VMs across\
    \ the various physical servers.  This places a\n   much larger demand on the table\
    \ capacity compared to non-virtualized\n   environments.\n   If the table overflows,\
    \ the switch may stop learning new addresses\n   until idle entries age out, leading\
    \ to significant flooding of\n   subsequent unknown destination frames.\n"
- title: 4.  VXLAN
  contents:
  - "4.  VXLAN\n   VXLAN (Virtual eXtensible Local Area Network) addresses the above\n\
    \   requirements of the Layer 2 and Layer 3 data center network\n   infrastructure\
    \ in the presence of VMs in a multi-tenant environment.\n   It runs over the existing\
    \ networking infrastructure and provides a\n   means to \"stretch\" a Layer 2\
    \ network.  In short, VXLAN is a Layer 2\n   overlay scheme on a Layer 3 network.\
    \  Each overlay is termed a VXLAN\n   segment.  Only VMs within the same VXLAN\
    \ segment can communicate with\n   each other.  Each VXLAN segment is identified\
    \ through a 24-bit\n   segment ID, termed the \"VXLAN Network Identifier (VNI)\"\
    .  This allows\n   up to 16 M VXLAN segments to coexist within the same administrative\n\
    \   domain.\n   The VNI identifies the scope of the inner MAC frame originated\
    \ by the\n   individual VM.  Thus, you could have overlapping MAC addresses across\n\
    \   segments but never have traffic \"cross over\" since the traffic is\n   isolated\
    \ using the VNI.  The VNI is in an outer header that\n   encapsulates the inner\
    \ MAC frame originated by the VM.  In the\n   following sections, the term \"\
    VXLAN segment\" is used interchangeably\n   with the term \"VXLAN overlay network\"\
    .\n   Due to this encapsulation, VXLAN could also be called a tunneling\n   scheme\
    \ to overlay Layer 2 networks on top of Layer 3 networks.  The\n   tunnels are\
    \ stateless, so each frame is encapsulated according to a\n   set of rules.  The\
    \ end point of the tunnel (VXLAN Tunnel End Point or\n   VTEP) discussed in the\
    \ following sections is located within the\n   hypervisor on the server that hosts\
    \ the VM.  Thus, the VNI- and\n   VXLAN-related tunnel / outer header encapsulation\
    \ are known only to\n   the VTEP -- the VM never sees it (see Figure 1).  Note\
    \ that it is\n   possible that VTEPs could also be on a physical switch or physical\n\
    \   server and could be implemented in software or hardware.  One use\n   case\
    \ where the VTEP is a physical switch is discussed in Section 6 on\n   VXLAN deployment\
    \ scenarios.\n   The following sections discuss typical traffic flow scenarios\
    \ in a\n   VXLAN environment using one type of control scheme -- data plane\n\
    \   learning.  Here, the association of VM's MAC to VTEP's IP address is\n   discovered\
    \ via source-address learning.  Multicast is used for\n   carrying unknown destination,\
    \ broadcast, and multicast frames.\n   In addition to a learning-based control\
    \ plane, there are other\n   schemes possible for the distribution of the VTEP\
    \ IP to VM MAC\n   mapping information.  Options could include a central\n   authority-/directory-based\
    \ lookup by the individual VTEPs,\n   distribution of this mapping information\
    \ to the VTEPs by the central\n   authority, and so on.  These are sometimes characterized\
    \ as push and\n   pull models, respectively.  This document will focus on the\
    \ data\n   plane learning scheme as the control plane for VXLAN.\n"
- title: 4.1.  Unicast VM-to-VM Communication
  contents:
  - "4.1.  Unicast VM-to-VM Communication\n   Consider a VM within a VXLAN overlay\
    \ network.  This VM is unaware of\n   VXLAN.  To communicate with a VM on a different\
    \ host, it sends a MAC\n   frame destined to the target as normal.  The VTEP on\
    \ the physical\n   host looks up the VNI to which this VM is associated.  It then\n\
    \   determines if the destination MAC is on the same segment and if there\n  \
    \ is a mapping of the destination MAC address to the remote VTEP.  If\n   so,\
    \ an outer header comprising an outer MAC, outer IP header, and\n   VXLAN header\
    \ (see Figure 1 in Section 5 for frame format) are\n   prepended to the original\
    \ MAC frame.  The encapsulated packet is\n   forwarded towards the remote VTEP.\
    \  Upon reception, the remote VTEP\n   verifies the validity of the VNI and whether\
    \ or not there is a VM on\n   that VNI using a MAC address that matches the inner\
    \ destination MAC\n   address.  If so, the packet is stripped of its encapsulating\
    \ headers\n   and passed on to the destination VM.  The destination VM never knows\n\
    \   about the VNI or that the frame was transported with a VXLAN\n   encapsulation.\n\
    \   In addition to forwarding the packet to the destination VM, the\n   remote\
    \ VTEP learns the mapping from inner source MAC to outer source\n   IP address.\
    \  It stores this mapping in a table so that when the\n   destination VM sends\
    \ a response packet, there is no need for an\n   \"unknown destination\" flooding\
    \ of the response packet.\n   Determining the MAC address of the destination VM\
    \ prior to the\n   transmission by the source VM is performed as with non-VXLAN\n\
    \   environments except as described in Section 4.2.  Broadcast frames\n   are\
    \ used but are encapsulated within a multicast packet, as detailed\n   in the\
    \ Section 4.2.\n"
- title: 4.2.  Broadcast Communication and Mapping to Multicast
  contents:
  - "4.2.  Broadcast Communication and Mapping to Multicast\n   Consider the VM on\
    \ the source host attempting to communicate with the\n   destination VM using\
    \ IP.  Assuming that they are both on the same\n   subnet, the VM sends out an\
    \ Address Resolution Protocol (ARP)\n   broadcast frame.  In the non-VXLAN environment,\
    \ this frame would be\n   sent out using MAC broadcast across all switches carrying\
    \ that VLAN.\n   With VXLAN, a header including the VXLAN VNI is inserted at the\n\
    \   beginning of the packet along with the IP header and UDP header.\n   However,\
    \ this broadcast packet is sent out to the IP multicast group\n   on which that\
    \ VXLAN overlay network is realized.\n   To effect this, we need to have a mapping\
    \ between the VXLAN VNI and\n   the IP multicast group that it will use.  This\
    \ mapping is done at the\n   management layer and provided to the individual VTEPs\
    \ through a\n   management channel.  Using this mapping, the VTEP can provide\
    \ IGMP\n   membership reports to the upstream switch/router to join/leave the\n\
    \   VXLAN-related IP multicast groups as needed.  This will enable\n   pruning\
    \ of the leaf nodes for specific multicast traffic addresses\n   based on whether\
    \ a member is available on this host using the\n   specific multicast address\
    \ (see [RFC4541]).  In addition, use of\n   multicast routing protocols like Protocol\
    \ Independent Multicast -\n   Sparse Mode (PIM-SM see [RFC4601]) will provide\
    \ efficient multicast\n   trees within the Layer 3 network.\n   The VTEP will\
    \ use (*,G) joins.  This is needed as the set of VXLAN\n   tunnel sources is unknown\
    \ and may change often, as the VMs come up /\n   go down across different hosts.\
    \  A side note here is that since each\n   VTEP can act as both the source and\
    \ destination for multicast\n   packets, a protocol like bidirectional PIM (BIDIR-PIM\
    \ -- see\n   [RFC5015]) would be more efficient.\n   The destination VM sends\
    \ a standard ARP response using IP unicast.\n   This frame will be encapsulated\
    \ back to the VTEP connecting the\n   originating VM using IP unicast VXLAN encapsulation.\
    \  This is\n   possible since the mapping of the ARP response's destination MAC\
    \ to\n   the VXLAN tunnel end point IP was learned earlier through the ARP\n \
    \  request.\n   Note that multicast frames and \"unknown MAC destination\" frames\
    \ are\n   also sent using the multicast tree, similar to the broadcast frames.\n"
- title: 4.3.  Physical Infrastructure Requirements
  contents:
  - "4.3.  Physical Infrastructure Requirements\n   When IP multicast is used within\
    \ the network infrastructure, a\n   multicast routing protocol like PIM-SM can\
    \ be used by the individual\n   Layer 3 IP routers/switches within the network.\
    \  This is used to\n   build efficient multicast forwarding trees so that multicast\
    \ frames\n   are only sent to those hosts that have requested to receive them.\n\
    \   Similarly, there is no requirement that the actual network connecting\n  \
    \ the source VM and destination VM should be a Layer 3 network: VXLAN\n   can\
    \ also work over Layer 2 networks.  In either case, efficient\n   multicast replication\
    \ within the Layer 2 network can be achieved\n   using IGMP snooping.\n   VTEPs\
    \ MUST NOT fragment VXLAN packets.  Intermediate routers may\n   fragment encapsulated\
    \ VXLAN packets due to the larger frame size.\n   The destination VTEP MAY silently\
    \ discard such VXLAN fragments.  To\n   ensure end-to-end traffic delivery without\
    \ fragmentation, it is\n   RECOMMENDED that the MTUs (Maximum Transmission Units)\
    \ across the\n   physical network infrastructure be set to a value that accommodates\n\
    \   the larger frame size due to the encapsulation.  Other techniques\n   like\
    \ Path MTU discovery (see [RFC1191] and [RFC1981]) MAY be used to\n   address\
    \ this requirement as well.\n"
- title: 5.  VXLAN Frame Format
  contents:
  - "5.  VXLAN Frame Format\n   The VXLAN frame format is shown below.  Parsing this\
    \ from the bottom\n   of the frame -- above the outer Frame Check Sequence (FCS),\
    \ there is\n   an inner MAC frame with its own Ethernet header with source,\n\
    \   destination MAC addresses along with the Ethernet type, plus an\n   optional\
    \ VLAN.  See Section 6 for further details of inner VLAN tag\n   handling.\n \
    \  The inner MAC frame is encapsulated with the following four headers\n   (starting\
    \ from the innermost header):\n   VXLAN Header:  This is an 8-byte field that\
    \ has:\n      - Flags (8 bits): where the I flag MUST be set to 1 for a valid\n\
    \        VXLAN Network ID (VNI).  The other 7 bits (designated \"R\") are\n  \
    \      reserved fields and MUST be set to zero on transmission and\n        ignored\
    \ on receipt.\n      - VXLAN Segment ID/VXLAN Network Identifier (VNI): this is\
    \ a\n        24-bit value used to designate the individual VXLAN overlay\n   \
    \     network on which the communicating VMs are situated.  VMs in\n        different\
    \ VXLAN overlay networks cannot communicate with each\n        other.\n      -\
    \ Reserved fields (24 bits and 8 bits): MUST be set to zero on\n        transmission\
    \ and ignored on receipt.\n   Outer UDP Header:  This is the outer UDP header\
    \ with a source port\n      provided by the VTEP and the destination port being\
    \ a well-known\n      UDP port.\n      -  Destination Port: IANA has assigned\
    \ the value 4789 for the\n         VXLAN UDP port, and this value SHOULD be used\
    \ by default as the\n         destination UDP port.  Some early implementations\
    \ of VXLAN have\n         used other values for the destination port.  To enable\n\
    \         interoperability with these implementations, the destination\n     \
    \    port SHOULD be configurable.\n      -  Source Port:  It is recommended that\
    \ the UDP source port number\n         be calculated using a hash of fields from\
    \ the inner packet --\n         one example being a hash of the inner Ethernet\
    \ frame's headers.\n         This is to enable a level of entropy for the ECMP/load-\n\
    \         balancing of the VM-to-VM traffic across the VXLAN overlay.\n      \
    \   When calculating the UDP source port number in this manner, it\n         is\
    \ RECOMMENDED that the value be in the dynamic/private port\n         range 49152-65535\
    \ [RFC6335].\n      -  UDP Checksum: It SHOULD be transmitted as zero.  When a\
    \ packet\n         is received with a UDP checksum of zero, it MUST be accepted\n\
    \         for decapsulation.  Optionally, if the encapsulating end point\n   \
    \      includes a non-zero UDP checksum, it MUST be correctly\n         calculated\
    \ across the entire packet including the IP header,\n         UDP header, VXLAN\
    \ header, and encapsulated MAC frame.  When a\n         decapsulating end point\
    \ receives a packet with a non-zero\n         checksum, it MAY choose to verify\
    \ the checksum value.  If it\n         chooses to perform such verification, and\
    \ the verification\n         fails, the packet MUST be dropped.  If the decapsulating\n\
    \         destination chooses not to perform the verification, or\n         performs\
    \ it successfully, the packet MUST be accepted for\n         decapsulation.\n\
    \   Outer IP Header:  This is the outer IP header with the source IP\n      address\
    \ indicating the IP address of the VTEP over which the\n      communicating VM\
    \ (as represented by the inner source MAC address)\n      is running.  The destination\
    \ IP address can be a unicast or\n      multicast IP address (see Sections 4.1\
    \ and 4.2).  When it is a\n      unicast IP address, it represents the IP address\
    \ of the VTEP\n      connecting the communicating VM as represented by the inner\n\
    \      destination MAC address.  For multicast destination IP addresses,\n   \
    \   please refer to the scenarios detailed in Section 4.2.\n   Outer Ethernet\
    \ Header (example):  Figure 1 is an example of an inner\n      Ethernet frame\
    \ encapsulated within an outer Ethernet + IP + UDP +\n      VXLAN header.  The\
    \ outer destination MAC address in this frame may\n      be the address of the\
    \ target VTEP or of an intermediate Layer 3\n      router.  The outer VLAN tag\
    \ is optional.  If present, it may be\n      used for delineating VXLAN traffic\
    \ on the LAN.\n    0                   1                   2                 \
    \  3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n  \
    \ Outer Ethernet Header:\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |             Outer Destination MAC Address                     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | Outer Destination MAC Address | Outer Source MAC Address      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                Outer Source MAC Address                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |OptnlEthtype = C-Tag 802.1Q    | Outer.VLAN Tag Information    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | Ethertype = 0x0800            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Outer IPv4 Header:\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |Version|  IHL  |Type of Service|          Total Length         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |         Identification        |Flags|      Fragment Offset    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  Time to Live |Protocl=17(UDP)|   Header Checksum             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                       Outer Source IPv4 Address               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                   Outer Destination IPv4 Address              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Outer UDP Header:\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |           Source Port         |       Dest Port = VXLAN Port  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |           UDP Length          |        UDP Checksum           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   VXLAN Header:\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |R|R|R|R|I|R|R|R|            Reserved                           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                VXLAN Network Identifier (VNI) |   Reserved    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Inner Ethernet Header:\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |             Inner Destination MAC Address                     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | Inner Destination MAC Address | Inner Source MAC Address      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                Inner Source MAC Address                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |OptnlEthtype = C-Tag 802.1Q    | Inner.VLAN Tag Information    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Payload:\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | Ethertype of Original Payload |                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \                               |\n   |                                  Original\
    \ Ethernet Payload    |\n   |                                                \
    \               |\n   |(Note that the original Ethernet Frame's FCS is not included)\
    \  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n \
    \  Frame Check Sequence:\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   New FCS (Frame Check Sequence) for Outer Ethernet Frame     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \            Figure 1: VXLAN Frame Format with IPv4 Outer Header\n   The frame\
    \ format above shows tunneling of Ethernet frames using IPv4\n   for transport.\
    \  Use of VXLAN with IPv6 transport is detailed below.\n    0                \
    \   1                   2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3\
    \ 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   Outer Ethernet Header:\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |             Outer Destination MAC Address                     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | Outer Destination MAC Address | Outer Source MAC Address      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                Outer Source MAC Address                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |OptnlEthtype = C-Tag 802.1Q    | Outer.VLAN Tag Information    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | Ethertype = 0x86DD            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Outer IPv6 Header:\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |Version| Traffic Class |           Flow Label                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |         Payload Length        | NxtHdr=17(UDP)|   Hop Limit   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   +  \
    \                                                             +\n   |        \
    \                                                       |\n   +              \
    \       Outer Source IPv6 Address                 +\n   |                    \
    \                                           |\n   +                          \
    \                                     +\n   |                                \
    \                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   +  \
    \                                                             +\n   |        \
    \                                                       |\n   +              \
    \    Outer Destination IPv6 Address               +\n   |                    \
    \                                           |\n   +                          \
    \                                     +\n   |                                \
    \                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Outer UDP Header:\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |           Source Port         |       Dest Port = VXLAN Port  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |           UDP Length          |        UDP Checksum           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   VXLAN Header:\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |R|R|R|R|I|R|R|R|            Reserved                           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                VXLAN Network Identifier (VNI) |   Reserved    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Inner Ethernet Header:\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |             Inner Destination MAC Address                     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | Inner Destination MAC Address | Inner Source MAC Address      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                Inner Source MAC Address                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |OptnlEthtype = C-Tag 802.1Q    | Inner.VLAN Tag Information    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Payload:\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | Ethertype of Original Payload |                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \                               |\n   |                                  Original\
    \ Ethernet Payload    |\n   |                                                \
    \               |\n   |(Note that the original Ethernet Frame's FCS is not included)\
    \  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n \
    \  Frame Check Sequence:\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   New FCS (Frame Check Sequence) for Outer Ethernet Frame     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \            Figure 2: VXLAN Frame Format with IPv6 Outer Header\n"
- title: 6.  VXLAN Deployment Scenarios
  contents:
  - "6.  VXLAN Deployment Scenarios\n   VXLAN is typically deployed in data centers\
    \ on virtualized hosts,\n   which may be spread across multiple racks.  The individual\
    \ racks may\n   be parts of a different Layer 3 network or they could be in a\
    \ single\n   Layer 2 network.  The VXLAN segments/overlay networks are overlaid\
    \ on\n   top of these Layer 2 or Layer 3 networks.\n   Consider Figure 3, which\
    \ depicts two virtualized servers attached to\n   a Layer 3 infrastructure.  The\
    \ servers could be on the same rack, on\n   different racks, or potentially across\
    \ data centers within the same\n   administrative domain.  There are four VXLAN\
    \ overlay networks\n   identified by the VNIs 22, 34, 74, and 98.  Consider the\
    \ case of\n   VM1-1 in Server 1 and VM2-4 on Server 2, which are on the same VXLAN\n\
    \   overlay network identified by VNI 22.  The VMs do not know about the\n   overlay\
    \ networks and transport method since the encapsulation and\n   decapsulation\
    \ happen transparently at the VTEPs on Servers 1 and 2.\n   The other overlay\
    \ networks and the corresponding VMs are VM1-2 on\n   Server 1 and VM2-1 on Server\
    \ 2, both on VNI 34; VM1-3 on Server 1 and\n   VM2-2 on Server 2 on VNI 74; and\
    \ finally VM1-4 on Server 1 and VM2-3\n   on Server 2 on VNI 98.\n   +------------+-------------+\n\
    \   |        Server 1          |\n   | +----+----+  +----+----+ |\n   | |VM1-1\
    \    |  |VM1-2    | |\n   | |VNI 22   |  |VNI 34   | |\n   | |         |  |  \
    \       | |\n   | +---------+  +---------+ |\n   |                          |\n\
    \   | +----+----+  +----+----+ |\n   | |VM1-3    |  |VM1-4    | |\n   | |VNI 74\
    \   |  |VNI 98   | |\n   | |         |  |         | |\n   | +---------+  +---------+\
    \ |\n   | Hypervisor VTEP (IP1)    |\n   +--------------------------+\n      \
    \                   |\n                         |\n                         |\n\
    \                         |   +-------------+\n                         |   |\
    \   Layer 3   |\n                         |---|   Network   |\n              \
    \               |             |\n                             +-------------+\n\
    \                                 |\n                                 |\n    \
    \                             +-----------+\n                                \
    \             |\n                                             |\n            \
    \                          +------------+-------------+\n                    \
    \                  |        Server 2          |\n                            \
    \          | +----+----+  +----+----+ |\n                                    \
    \  | |VM2-1    |  |VM2-2    | |\n                                      | |VNI\
    \ 34   |  |VNI 74   | |\n                                      | |         | \
    \ |         | |\n                                      | +---------+  +---------+\
    \ |\n                                      |                          |\n    \
    \                                  | +----+----+  +----+----+ |\n            \
    \                          | |VM2-3    |  |VM2-4    | |\n                    \
    \                  | |VNI 98   |  |VNI 22   | |\n                            \
    \          | |         |  |         | |\n                                    \
    \  | +---------+  +---------+ |\n                                      | Hypervisor\
    \ VTEP (IP2)    |\n                                      +--------------------------+\n\
    \    Figure 3: VXLAN Deployment - VTEPs across a Layer 3 Network\n   One deployment\
    \ scenario is where the tunnel termination point is a\n   physical server that\
    \ understands VXLAN.  An alternate scenario is\n   where nodes on a VXLAN overlay\
    \ network need to communicate with nodes\n   on legacy networks that could be\
    \ VLAN based.  These nodes may be\n   physical nodes or virtual machines.  To\
    \ enable this communication, a\n   network can include VXLAN gateways (see Figure\
    \ 4 below with a switch\n   acting as a VXLAN gateway) that forward traffic between\
    \ VXLAN and\n   non-VXLAN environments.\n   Consider Figure 4 for the following\
    \ discussion.  For incoming frames\n   on the VXLAN connected interface, the gateway\
    \ strips out the VXLAN\n   header and forwards it to a physical port based on\
    \ the destination\n   MAC address of the inner Ethernet frame.  Decapsulated frames\
    \ with\n   the inner VLAN ID SHOULD be discarded unless configured explicitly\
    \ to\n   be passed on to the non-VXLAN interface.  In the reverse direction,\n\
    \   incoming frames for the non-VXLAN interfaces are mapped to a specific\n  \
    \ VXLAN overlay network based on the VLAN ID in the frame.  Unless\n   configured\
    \ explicitly to be passed on in the encapsulated VXLAN\n   frame, this VLAN ID\
    \ is removed before the frame is encapsulated for\n   VXLAN.\n   These gateways\
    \ that provide VXLAN tunnel termination functions could\n   be ToR/access switches\
    \ or switches higher up in the data center\n   network topology -- e.g., core\
    \ or even WAN edge devices.  The last\n   case (WAN edge) could involve a Provider\
    \ Edge (PE) router that\n   terminates VXLAN tunnels in a hybrid cloud environment.\
    \  In all these\n   instances, note that the gateway functionality could be implemented\n\
    \   in software or hardware.\n   +---+-----+---+                             \
    \       +---+-----+---+\n   |    Server 1 |                                  \
    \  |  Non-VXLAN  |\n   (VXLAN enabled)<-----+                       +---->|  server\
    \     |\n   +-------------+      |                       |     +-------------+\n\
    \                        |                       |\n   +---+-----+---+      |\
    \                       |     +---+-----+---+\n   |Server 2     |      |     \
    \                  |     |  Non-VXLAN  |\n   (VXLAN enabled)<-----+   +---+-----+---+\
    \     +---->|    server   |\n   +-------------+      |   |Switch acting|     |\
    \     +-------------+\n                        |---|  as VXLAN   |-----|\n   +---+-----+---+\
    \      |   |   Gateway   |\n   | Server 3    |      |   +-------------+\n   (VXLAN\
    \ enabled)<-----+\n   +-------------+      |\n                        |\n   +---+-----+---+\
    \      |\n   | Server 4    |      |\n   (VXLAN enabled)<-----+\n   +-------------+\n\
    \           Figure 4: VXLAN Deployment - VXLAN Gateway\n"
- title: 6.1.  Inner VLAN Tag Handling
  contents:
  - "6.1.  Inner VLAN Tag Handling\n   Inner VLAN Tag Handling in VTEP and VXLAN gateway\
    \ should conform to\n   the following:\n   Decapsulated VXLAN frames with the\
    \ inner VLAN tag SHOULD be discarded\n   unless configured otherwise.  On the\
    \ encapsulation side, a VTEP\n   SHOULD NOT include an inner VLAN tag on tunnel\
    \ packets unless\n   configured otherwise.  When a VLAN-tagged packet is a candidate\
    \ for\n   VXLAN tunneling, the encapsulating VTEP SHOULD strip the VLAN tag\n\
    \   unless configured otherwise.\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   Traditionally, Layer 2 networks can only be attacked\
    \ from 'within' by\n   rogue end points -- either by having inappropriate access\
    \ to a LAN\n   and snooping on traffic, by injecting spoofed packets to 'take\
    \ over'\n   another MAC address, or by flooding and causing denial of service.\
    \  A\n   MAC-over-IP mechanism for delivering Layer 2 traffic significantly\n\
    \   extends this attack surface.  This can happen by rogues injecting\n   themselves\
    \ into the network by subscribing to one or more multicast\n   groups that carry\
    \ broadcast traffic for VXLAN segments and also by\n   sourcing MAC-over-UDP frames\
    \ into the transport network to inject\n   spurious traffic, possibly to hijack\
    \ MAC addresses.\n   This document does not incorporate specific measures against\
    \ such\n   attacks, relying instead on other traditional mechanisms layered on\n\
    \   top of IP.  This section, instead, sketches out some possible\n   approaches\
    \ to security in the VXLAN environment.\n   Traditional Layer 2 attacks by rogue\
    \ end points can be mitigated by\n   limiting the management and administrative\
    \ scope of who deploys and\n   manages VMs/gateways in a VXLAN environment.  In\
    \ addition, such\n   administrative measures may be augmented by schemes like\
    \ 802.1X\n   [802.1X] for admission control of individual end points.  Also, the\n\
    \   use of the UDP-based encapsulation of VXLAN enables configuration and\n  \
    \ use of the 5-tuple-based ACL (Access Control List) functionality in\n   physical\
    \ switches.\n   Tunneled traffic over the IP network can be secured with traditional\n\
    \   security mechanisms like IPsec that authenticate and optionally\n   encrypt\
    \ VXLAN traffic.  This will, of course, need to be coupled with\n   an authentication\
    \ infrastructure for authorized end points to obtain\n   and distribute credentials.\n\
    \   VXLAN overlay networks are designated and operated over the existing\n   LAN\
    \ infrastructure.  To ensure that VXLAN end points and their VTEPs\n   are authorized\
    \ on the LAN, it is recommended that a VLAN be\n   designated for VXLAN traffic\
    \ and the servers/VTEPs send VXLAN traffic\n   over this VLAN to provide a measure\
    \ of security.\n   In addition, VXLAN requires proper mapping of VNIs and VM membership\n\
    \   in these overlay networks.  It is expected that this mapping be done\n   and\
    \ communicated to the management entity on the VTEP and the\n   gateways using\
    \ existing secure methods.\n"
- title: 8.  IANA Considerations
  contents:
  - "8.  IANA Considerations\n   A well-known UDP port (4789) has been assigned by\
    \ the IANA in the\n   Service Name and Transport Protocol Port Number Registry\
    \ for VXLAN.\n   See Section 5 for discussion of the port number.\n"
- title: 9.  References
  contents:
  - '9.  References

    '
- title: 9.1.  Normative References
  contents:
  - "9.1.  Normative References\n   [RFC2119] Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n             Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n"
- title: 9.2.  Informative References
  contents:
  - "9.2.  Informative References\n   [802.1aq] IEEE, \"Standard for Local and metropolitan\
    \ area networks --\n             Media Access Control (MAC) Bridges and Virtual\
    \ Bridged\n             Local Area Networks -- Amendment 20: Shortest Path\n \
    \            Bridging\", IEEE P802.1aq-2012, 2012.\n   [802.1D]  IEEE, \"Draft\
    \ Standard for Local and Metropolitan Area\n             Networks/ Media Access\
    \ Control (MAC) Bridges\", IEEE\n             P802.1D-2004, 2004.\n   [802.1X]\
    \  IEEE, \"IEEE Standard for Local and metropolitan area\n             networks\
    \ -- Port-Based Network Acces Control\", IEEE Std\n             802.1X-2010, February\
    \ 2010.\n   [RFC1191] Mogul, J. and S. Deering, \"Path MTU discovery\", RFC 1191,\n\
    \             November 1990.\n   [RFC1981] McCann, J., Deering, S., and J. Mogul,\
    \ \"Path MTU Discovery\n             for IP version 6\", RFC 1981, August 1996.\n\
    \   [RFC4541] Christensen, M., Kimball, K., and F. Solensky,\n             \"\
    Considerations for Internet Group Management Protocol\n             (IGMP) and\
    \ Multicast Listener Discovery (MLD) Snooping\n             Switches\", RFC 4541,\
    \ May 2006.\n   [RFC4601] Fenner, B., Handley, M., Holbrook, H., and I. Kouvelas,\n\
    \             \"Protocol Independent Multicast - Sparse Mode (PIM-SM):\n     \
    \        Protocol Specification (Revised)\", RFC 4601, August 2006.\n   [RFC5015]\
    \ Handley, M., Kouvelas, I., Speakman, T., and L. Vicisano,\n             \"Bidirectional\
    \ Protocol Independent Multicast (BIDIR-PIM)\",\n             RFC 5015, October\
    \ 2007.\n   [RFC6325] Perlman, R., Eastlake 3rd, D., Dutt, D., Gai, S., and A.\n\
    \             Ghanwani, \"Routing Bridges (RBridges): Base Protocol\n        \
    \     Specification\", RFC 6325, July 2011.\n   [RFC6335] Cotton, M., Eggert,\
    \ L., Touch, J., Westerlund, M., and S.\n             Cheshire, \"Internet Assigned\
    \ Numbers Authority (IANA)\n             Procedures for the Management of the\
    \ Service Name and\n             Transport Protocol Port Number Registry\", BCP\
    \ 165, RFC\n             6335, August 2011.\n"
- title: 10.  Acknowledgments
  contents:
  - "10.  Acknowledgments\n   The authors wish to thank: Ajit Sanzgiri for contributions\
    \ to the\n   Security Considerations section and editorial inputs; Joseph Cheng,\n\
    \   Margaret Petrus, Milin Desai, Nial de Barra, Jeff Mandin, and Siva\n   Kollipara\
    \ for their editorial reviews, inputs, and comments.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Mallik Mahalingam\n   Storvisor, Inc.\n   640 W. California\
    \ Ave, Suite #110\n   Sunnyvale, CA 94086.\n   USA\n   EMail: mallik_mahalingam@yahoo.com\n\
    \   Dinesh G. Dutt\n   Cumulus Networks\n   140C S. Whisman Road\n   Mountain\
    \ View, CA 94041\n   USA\n   EMail: ddutt.ietf@hobbesdutt.com\n   Kenneth Duda\n\
    \   Arista Networks\n   5453 Great America Parkway\n   Santa Clara, CA 95054\n\
    \   USA\n   EMail: kduda@arista.com\n   Puneet Agarwal\n   Broadcom Corporation\n\
    \   3151 Zanker Road\n   San Jose, CA 95134\n   USA\n   EMail: pagarwal@broadcom.com\n\
    \   Lawrence Kreeger\n   Cisco Systems, Inc.\n   170 W. Tasman Avenue\n   San\
    \ Jose, CA 95134\n   USA\n   EMail: kreeger@cisco.com\n   T. Sridhar\n   VMware,\
    \ Inc.\n   3401 Hillview\n   Palo Alto, CA 94304\n   USA\n   EMail: tsridhar@vmware.com\n\
    \   Mike Bursell\n   Intel\n   Bowyer's, North Road\n   Great Yeldham\n   Halstead\n\
    \   Essex. C09 4QD\n   UK\n   EMail: mike.bursell@intel.com\n   Chris Wright\n\
    \   Red Hat, Inc.\n   100 East Davie Street\n   Raleigh, NC 27601\n   USA\n  \
    \ EMail: chrisw@redhat.com\n"
