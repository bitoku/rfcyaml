- contents:
  - "                   ChaCha20, Poly1305, and Their Use\n         in the Internet
    Key Exchange Protocol (IKE) and IPsec\n"
  title: __initial_text__
- contents:
  - "Abstract\n   This document describes the use of the ChaCha20 stream cipher along\n
    \  with the Poly1305 authenticator, combined into an AEAD algorithm for\n   the
    Internet Key Exchange Protocol version 2 (IKEv2) and for IPsec.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7634.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2015 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .
    . . . . .   2\n     1.1.  Conventions Used in This Document . . . . . . . . .
    . . .   3\n   2.  ChaCha20 and Poly1305 for ESP . . . . . . . . . . . . . . .
    .   3\n     2.1.  AAD Construction  . . . . . . . . . . . . . . . . . . . .   5\n
    \  3.  Use in IKEv2  . . . . . . . . . . . . . . . . . . . . . . . .   6\n   4.
    \ Negotiation in IKEv2  . . . . . . . . . . . . . . . . . . . .   6\n   5.  Security
    Considerations . . . . . . . . . . . . . . . . . . .   6\n   6.  IANA Considerations
    . . . . . . . . . . . . . . . . . . . . .   7\n   7.  References  . . . . . .
    . . . . . . . . . . . . . . . . . . .   7\n     7.1.  Normative References  .
    . . . . . . . . . . . . . . . . .   7\n     7.2.  Informative References  . .
    . . . . . . . . . . . . . . .   8\n   Appendix A.  ESP Example  . . . . . . .
    . . . . . . . . . . . . .   9\n   Appendix B.  IKEv2 Example  . . . . . . . .
    . . . . . . . . . . .  11\n   Acknowledgements  . . . . . . . . . . . . . . .
    . . . . . . . . .  13\n   Author's Address  . . . . . . . . . . . . . . . . .
    . . . . . . .  13\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   The Advanced Encryption Standard (AES) [FIPS-197] has become
    the go-\n   to algorithm for encryption.  It is now the most commonly used\n   algorithm
    in many areas, including IPsec Virtual Private Networks\n   (VPNs).  On most modern
    platforms, AES is anywhere from four to ten\n   times as fast as the previously
    popular cipher, Triple Data\n   Encryption Standard (3DES) [SP800-67].  3DES also
    uses a 64-bit\n   block; this means that the amount of data that can be encrypted\n
    \  before rekeying is required is limited.  These reasons make AES not\n   only
    the best choice, but the only viable choice for IPsec.\n   The problem is that
    if future advances in cryptanalysis reveal a\n   weakness in AES, VPN users will
    be in an unenviable position.  With\n   the only other widely supported cipher
    for IPsec implementations\n   being the much slower 3DES, it is not feasible to
    reconfigure IPsec\n   installations away from AES.  [Standby-Cipher] describes
    this issue\n   and the need for a standby cipher in greater detail.\n   This document
    proposes the fast and secure ChaCha20 stream cipher as\n   such a standby cipher
    in an Authenticated Encryption with Associated\n   Data (AEAD) construction with
    the Poly1305 authenticator for use with\n   the Encapsulated Security Protocol
    (ESP) [RFC4303] and the Internet\n   Key Exchange Protocol version 2 (IKEv2) [RFC7296].
    \ The algorithms\n   are described in a separate document ([RFC7539]).  This document
    only\n   describes the IPsec-specific things.\n"
  - contents:
    - "1.1.  Conventions Used in This Document\n   The key words \"MUST\", \"MUST
      NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\",
      \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted
      as described in [RFC2119].\n"
    title: 1.1.  Conventions Used in This Document
  title: 1.  Introduction
- contents:
  - "2.  ChaCha20 and Poly1305 for ESP\n   AEAD_CHACHA20_POLY1305 ([RFC7539]) is a
    combined mode algorithm, or\n   AEAD.  Usage follows the AEAD construction in
    Section 2.8 of RFC\n   7539:\n   o  The Initialization Vector (IV) is 64 bits
    and is used as part of\n      the nonce.  The IV MUST be unique for each invocation
    for a\n      particular security association (SA) but does not need to be\n      unpredictable.
    \ The use of a counter or a linear feedback shift\n      register (LFSR) is RECOMMENDED.\n
    \  o  A 32-bit Salt is prepended to the 64-bit IV to form the 96-bit\n      nonce.
    \ The salt is fixed per SA, and it is not transmitted as\n      part of the ESP
    packet.\n   o  The encryption key is 256 bits.\n   o  The Internet Key Exchange
    Protocol generates a bitstring called\n      KEYMAT using a pseudorandom function
    (PRF).  That KEYMAT is\n      divided into keys for encryption, message authentication,
    and\n      whatever else is needed.  The KEYMAT requested for each\n      ChaCha20-Poly1305
    key is 36 octets.  The first 32 octets are the\n      256-bit ChaCha20 key, and
    the remaining 4 octets are used as the\n      Salt value in the nonce.\n   The
    ChaCha20 encryption algorithm requires the following parameters:\n   a 256-bit
    key, a 96-bit nonce, and a 32-bit Initial Block Counter.\n   For ESP, we set these
    as follows:\n   o  The key is set as mentioned above.\n   o  The 96-bit nonce
    is formed from a concatenation of the 32-bit Salt\n      and the 64-bit IV, as
    described above.\n   o  The Initial Block Counter is set to one (1).  The reason
    that one\n      is used for the initial counter rather than zero is that zero
    is\n      reserved for generating the one-time Poly1305 key (see below).\n   As
    the ChaCha20 block function is not applied directly to the\n   plaintext, no padding
    should be necessary.  However, in keeping with\n   the specification in RFC 4303,
    the plaintext always has a pad length\n   octet and a Next Header octet, and it
    may require padding octets so\n   as to align the buffer to an integral multiple
    of 4 octets.\n   The same key and nonce, along with a block counter of zero, are\n
    \  passed to the ChaCha20 block function, and the top 256 bits of the\n   result
    are used as the Poly1305 key.\n   Finally, the Poly1305 function is run on the
    data to be\n   authenticated, which is, as specified in Section 2.8 of [RFC7539],
    a\n   concatenation of the following in the order below:\n   o  The Authenticated
    Additional Data (AAD); see Section 2.1.\n   o  Zero-octet padding that rounds
    the length up to 16 octets.  This\n      is 4 or 8 octets depending on the length
    of the AAD.\n   o  The ciphertext.\n   o  Zero-octet padding that rounds the total
    length up to an integral\n      multiple of 16 octets.\n   o  The length of the
    AAD in octets (as a 64-bit integer encoded in\n      little-endian byte order).\n
    \  o  The length of the ciphertext in octets (as a 64-bit integer\n      encoded
    in little-endian byte order).\n   The 128-bit output of Poly1305 is used as the
    tag.  All 16 octets are\n   included in the packet.\n   The figure below is a
    copy of Figure 2 in RFC 4303:\n     0                   1                   2
    \                  3\n     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
    6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |               Security Parameters Index (SPI)                 |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |                      Sequence Number                          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+---\n
    \  |                    IV (optional)                              | ^ p\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    | a\n   |                    Rest of Payload Data  (variable)           | | y\n
    \  ~                                                               ~ | l\n   |
    \                                                              | | o\n   +               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    | a\n   |               |         TFC Padding * (optional, variable)    | v d\n
    \  +-+-+-+-+-+-+-+-+         +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+---\n   |
    \                        |        Padding (0-255 bytes)        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+
    \    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |                               |  Pad
    Length   | Next Header   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |         Integrity Check Value-ICV   (variable)                |\n   ~                                                               ~\n
    \  |                                                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  o  The IV field is 64 bits.  It is the final 64 bits of the 96-bit\n      nonce.
    \ If the counter method is used for generating unique IVs,\n      then the final
    32 bits of the IV will be equal to the Sequence\n      Number field.\n   o  The
    length of the Padding field need not exceed 4 octets.\n      However, neither
    RFC 4303 nor this specification require using the\n      minimal padding length.\n
    \  o  The Integrity Check Value field contains the 16-octet tag.\n"
  - contents:
    - "2.1.  AAD Construction\n   The construction of the Additional Authenticated
      Data (AAD) is\n   similar to the one in [RFC4106].  For security associations
      (SAs)\n   with 32-bit sequence numbers, the AAD is 8 octets: a 4-octet SPI\n
      \  followed by a 4-octet sequence number ordered exactly as it is in the\n   packet.
      \ For SAs with an Extended Sequence Number (ESN), the AAD is\n   12 octets:
      a 4-octet SPI followed by an 8-octet sequence number as a\n   64-bit integer
      in big-endian byte order.\n"
    title: 2.1.  AAD Construction
  title: 2.  ChaCha20 and Poly1305 for ESP
- contents:
  - "3.  Use in IKEv2\n   AEAD algorithms can be used in IKE, as described in [RFC5282].
    \ More\n   specifically:\n   o  The Encrypted Payload is as described in Section
    3 of RFC 5282.\n   o  The ChaCha20-Poly1305 keying material is derived similarly
    to ESP:\n      36 octets are requested for each of SK_ei and SK_er, of which the\n
    \     first 32 form the key and the last 4 form the salt.  No octets are\n      requested
    for SK_ai and SK_ar.\n   o  The IV is 64 bits, as described in Section 2, and
    is included\n      explicitly in the Encrypted payload.\n   o  The sender SHOULD
    include no padding and set the Pad Length field\n      to zero.  The receiver
    MUST accept any length of padding.\n   o  The AAD is as described in Section 5.1
    of RFC 5282, so it is 32\n      octets (28 for the IKEv2 header plus 4 octets
    for the encrypted\n      payload header), assuming no unencrypted payloads.\n"
  title: 3.  Use in IKEv2
- contents:
  - "4.  Negotiation in IKEv2\n   When negotiating the ChaCha20-Poly1305 algorithm
    for use in IKE or\n   IPsec, the value ENCR_CHACHA20_POLY1305 (28) should be used
    in the\n   transform substructure of the SA payload as the ENCR (type 1)\n   transform
    ID.  As with other AEAD algorithms, INTEG (type 3)\n   transform substructures
    MUST NOT be specified, or just one INTEG\n   transform MAY be included with value
    NONE (0).\n"
  title: 4.  Negotiation in IKEv2
- contents:
  - "5.  Security Considerations\n   The ChaCha20 cipher is designed to provide 256-bit
    security.\n   The Poly1305 authenticator is designed to ensure that forged messages\n
    \  are rejected with a probability of 1-(n/(2^102)) for a 16n-octet\n   message,
    even after sending 2^64 legitimate messages, so it is\n   SUF-CMA (strong unforgeability
    against chosen-message attacks) in the\n   terminology of [AE].\n   The most important
    security consideration in implementing this\n   document is the uniqueness of
    the nonce used in ChaCha20.  The nonce\n   should be selected uniquely for a particular
    key, but\n   unpredictability of the nonce is not required.  Counters and LFSRs\n
    \  are both acceptable ways of generating unique nonces.\n   Another issue with
    implementing these algorithms is avoiding side\n   channels.  This is trivial
    for ChaCha20, but requires some care for\n   Poly1305.  Considerations for implementations
    of these algorithms are\n   in [RFC7539].\n   The Salt value in used nonce construction
    in ESP and IKEv2 is derived\n   from the keystream, same as the encryption key.
    \ It is never\n   transmitted on the wire, but the security of the algorithm does
    not\n   depend on its secrecy.  Thus, implementations that keep keys and\n   other
    secret material within some security boundary MAY export the\n   Salt from the
    security boundary.  This may be useful if the API\n   provided by the library
    accepts the nonce as a parameter rather than\n   the IV.\n"
  title: 5.  Security Considerations
- contents:
  - "6.  IANA Considerations\n   IANA has assigned the value 28 as a transform identifier
    for the\n   algorithm described in this document in the \"Transform Type 1 -\n
    \  Encryption Algorithm Transform IDs\" registry with name\n   ENCR_CHACHA20_POLY1305
    and this document as reference for both ESP\n   and IKEv2.\n"
  title: 6.  IANA Considerations
- contents:
  - '7.  References

    '
  - contents:
    - "7.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use
      in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n
      \             DOI 10.17487/RFC2119, March 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n
      \  [RFC4303]  Kent, S., \"IP Encapsulating Security Payload (ESP)\",\n              RFC
      4303, DOI 10.17487/RFC4303, December 2005,\n              <http://www.rfc-editor.org/info/rfc4303>.\n
      \  [RFC5282]  Black, D. and D. McGrew, \"Using Authenticated Encryption\n              Algorithms
      with the Encrypted Payload of the Internet Key\n              Exchange version
      2 (IKEv2) Protocol\", RFC 5282,\n              DOI 10.17487/RFC5282, August
      2008,\n              <http://www.rfc-editor.org/info/rfc5282>.\n   [RFC7296]
      \ Kaufman, C., Hoffman, P., Nir, Y., Eronen, P., and T.\n              Kivinen,
      \"Internet Key Exchange Protocol Version 2\n              (IKEv2)\", STD 79,
      RFC 7296, DOI 10.17487/RFC7296, October\n              2014, <http://www.rfc-editor.org/info/rfc7296>.\n
      \  [RFC7539]  Nir, Y. and A. Langley, \"ChaCha20 and Poly1305 for IETF\n              Protocols\",
      RFC 7539, DOI 10.17487/RFC7539, May 2015,\n              <http://www.rfc-editor.org/info/rfc7539>.\n"
    title: 7.1.  Normative References
  - contents:
    - "7.2.  Informative References\n   [AE]       Bellare, M. and C. Namprempre,
      \"Authenticated Encryption:\n              Relations among notions and analysis
      of the generic\n              composition paradigm\", DOI 10.1007/s00145-008-9026-x,\n
      \             September 2008,\n              <http://cseweb.ucsd.edu/~mihir/papers/oem.html>.\n
      \  [FIPS-197]\n              National Institute of Standards and Technology,
      \"Advanced\n              Encryption Standard (AES)\", FIPS PUB 197, November
      2001,\n              <http://csrc.nist.gov/publications/fips/fips197/\n              fips-197.pdf>.\n
      \  [RFC1761]  Callaghan, B. and R. Gilligan, \"Snoop Version 2 Packet\n              Capture
      File Format\", RFC 1761, DOI 10.17487/RFC1761,\n              February 1995,
      <http://www.rfc-editor.org/info/rfc1761>.\n   [RFC4106]  Viega, J. and D. McGrew,
      \"The Use of Galois/Counter Mode\n              (GCM) in IPsec Encapsulating
      Security Payload (ESP)\",\n              RFC 4106, DOI 10.17487/RFC4106, June
      2005,\n              <http://www.rfc-editor.org/info/rfc4106>.\n   [SP800-67]\n
      \             National Institute of Standards and Technology,\n              \"Recommendation
      for the Triple Data Encryption Algorithm\n              (TDEA) Block Cipher\",
      FIPS SP800-67, January 2012,\n              <http://csrc.nist.gov/publications/nistpubs/800-67-Rev1/\n
      \             SP-800-67-Rev1.pdf>.\n   [Standby-Cipher]\n              McGrew,
      D., Grieco, A., and Y. Sheffer, \"Selection of\n              Future Cryptographic
      Standards\", Work in Progress\n              draft-mcgrew-standby-cipher-00,
      January 2013.\n"
    title: 7.2.  Informative References
  title: 7.  References
- contents:
  - "Appendix A.  ESP Example\n   For this example, we will use a tunnel-mode ESP
    SA using the\n   ChaCha20-Poly1305 algorithm.  The keying material is as follows:\n
    \ KEYMAT:\n  000  80 81 82 83 84 85 86 87 88 89 8a 8b 8c 8d 8e 8f  ................\n
    \ 016  90 91 92 93 94 95 96 97 98 99 9a 9b 9c 9d 9e 9f  ................\n  032
    \ a0 a1 a2 a3                                      ....\n   Obviously not a great
    PRF.  The first 32 octets are the key and the\n   final 4 octets (0xa0 0xa1 0xa2
    0xa3) are the salt.  For the packet,\n   we will use an ICMP packet from 198.51.100.5
    to 192.0.2.5:\n  Source Packet:\n  000  45 00 00 54 a6 f2 00 00 40 01 e7 78 c6
    33 64 05  E..T....@..x.3d.\n  016  c0 00 02 05 08 00 5b 7a 3a 08 00 00 55 3b ec
    10  ......[z:...U;..\n  032  00 07 36 27 08 09 0a 0b 0c 0d 0e 0f 10 11 12 13  ..6'............\n
    \ 048  14 15 16 17 18 19 1a 1b 1c 1d 1e 1f 20 21 22 23  ............ !\"#\n  064
    \ 24 25 26 27 28 29 2a 2b 2c 2d 2e 2f 30 31 32 33  $%&'()*+,-./0123\n  080  34
    35 36 37                                      4567\n   The SA details are as follows:\n
    \  o  The key and Salt are as above.\n   o  The SPI is 0x01 0x02 0x03 0x04.\n
    \  o  The next sequence number is 5; ESN is not enabled.\n   o  The gateway IP
    address for this side is 203.0.113.153; The peer\n      address is 203.0.113.5.\n
    \  o  NAT was not detected.\n   The 64-bit IV is 0x10 0x11 0x12 0x13 0x14 0x15
    0x16 0x17.  Putting\n   together the salt and IV we get the nonce:\n   The nonce:\n
    \  000  a0 a1 a2 a3 10 11 12 13 14 15 16 17              ............\n   The
    plaintext to encrypt consists of the source IP packet plus the\n   padding:\n
    \ Plaintext (includes padding and pad length):\n  000  45 00 00 54 a6 f2 00 00
    40 01 e7 78 c6 33 64 05  E..T....@..x.3d.\n  016  c0 00 02 05 08 00 5b 7a 3a 08
    00 00 55 3b ec 10  ......[z:...U;..\n  032  00 07 36 27 08 09 0a 0b 0c 0d 0e 0f
    10 11 12 13  ..6'............\n  048  14 15 16 17 18 19 1a 1b 1c 1d 1e 1f 20 21
    22 23  ............ !\"#\n  064  24 25 26 27 28 29 2a 2b 2c 2d 2e 2f 30 31 32
    33  $%&'()*+,-./0123\n  080  34 35 36 37 01 02 02 04                          4567....\n
    \  With the key, nonce, and plaintext available, we can call the\n   ChaCha20
    function and encrypt the packet, producing the ciphertext:\n  Ciphertext:\n  000
    \ 24 03 94 28 b9 7f 41 7e 3c 13 75 3a 4f 05 08 7b  $..(..A~<.u:O..{\n  016  67
    c3 52 e6 a7 fa b1 b9 82 d4 66 ef 40 7a e5 c6  g.R.......f.@z..\n  032  14 ee 80
    99 d5 28 44 eb 61 aa 95 df ab 4c 02 f7  .....(D.a....L..\n  048  2a a7 1e 7c 4c
    4f 64 c9 be fe 2f ac c6 38 e8 f3  *..|LOd.../..8..\n  064  cb ec 16 3f ac 46 9b
    50 27 73 f6 fb 94 e6 64 da  ...?.F.P's....d.\n  080  91 65 b8 28 29 f6 41 e0                          .e.().A.\n
    \  To calculate the tag, we need a one-time Poly1305 key, which we\n   calculate
    by calling the ChaCha20 function again with the same key\n   and nonce, but a
    block count of zero.\n  Poly1305 one-time key:\n  000  af 1f 41 2c c1 15 ad ce
    5e 4d 0e 29 d5 c1 30 bf  ..A,....^M.)..0.\n  016  46 31 21 0e 0f ef 74 31 c0 45
    4f e7 0f d7 c2 d1  F1!...t1.EO.....\n   The AAD is constructed by concatenating
    the SPI to the sequence\n   number:\n   000  01 02 03 04 00 00 00 05                          ........\n
    \  The input to the Poly1305 function is constructed by concatenating\n   and
    padding the AAD and ciphertext:\n  Poly1305 Input:\n  000  01 02 03 04 00 00 00
    05 00 00 00 00 00 00 00 00  ................\n  016  24 03 94 28 b9 7f 41 7e 3c
    13 75 3a 4f 05 08 7b  $..(..A~<.u:O..{\n  032  67 c3 52 e6 a7 fa b1 b9 82 d4 66
    ef 40 7a e5 c6  g.R.......f.@z..\n  048  14 ee 80 99 d5 28 44 eb 61 aa 95 df ab
    4c 02 f7  .....(D.a....L..\n  064  2a a7 1e 7c 4c 4f 64 c9 be fe 2f ac c6 38 e8
    f3  *..|LOd.../..8..\n  080  cb ec 16 3f ac 46 9b 50 27 73 f6 fb 94 e6 64 da  ...?.F.P's....d.\n
    \ 096  91 65 b8 28 29 f6 41 e0 00 00 00 00 00 00 00 00  .e.().A.........\n  112
    \ 08 00 00 00 00 00 00 00 58 00 00 00 00 00 00 00  ........X.......\n   The resulting
    tag is:\n  Tag:\n  000  76 aa a8 26 6b 7f b0 f7 b1 1b 36 99 07 e1 ad 43  v..&k.....6....C\n
    \  Putting it all together, the resulting packet is as follows:\n  ESP packet:\n
    \ 000  45 00 00 8c 23 45 00 00 40 32 de 5b cb 00 71 99  E...#E..@2.[..q.\n  016
    \ cb 00 71 05 01 02 03 04 00 00 00 05 10 11 12 13  ..q.............\n  032  14
    15 16 17 24 03 94 28 b9 7f 41 7e 3c 13 75 3a  ....$..(..A~<.u:\n  048  4f 05 08
    7b 67 c3 52 e6 a7 fa b1 b9 82 d4 66 ef  O..{g.R.......f.\n  064  40 7a e5 c6 14
    ee 80 99 d5 28 44 eb 61 aa 95 df  @z.......(D.a...\n  080  ab 4c 02 f7 2a a7 1e
    7c 4c 4f 64 c9 be fe 2f ac  .L..*..|LOd.../.\n  096  c6 38 e8 f3 cb ec 16 3f ac
    46 9b 50 27 73 f6 fb  .8.....?.F.P's..\n  112  94 e6 64 da 91 65 b8 28 29 f6 41
    e0 76 aa a8 26  ..d..e.().A.v..&\n  128  6b 7f b0 f7 b1 1b 36 99 07 e1 ad 43              k.....6....C\n"
  title: Appendix A.  ESP Example
- contents:
  - "Appendix B.  IKEv2 Example\n   For the IKEv2 example, we'll use the following:\n
    \  o  The key is 0x80..0x9f, the same as in Appendix A.\n   o  The Salt is 0xa0
    0xa1 0xa2 0xa3.\n   o  The IV will also be the same as in the previous example.
    \ The fact\n      that the IV and Salt are both the same means that the nonce
    is\n      also the same.\n   o  Because the key and nonce are the same, so is
    the one-time\n      Poly1305 key.\n   o  The packet will be an INFORMATIONAL request
    carrying a single\n      payload: a Notify payload with type SET_WINDOW_SIZE,
    setting the\n      window size to 10.\n   o  iSPI = 0xc0 0xc1 0xc2 0xc3 0xc4 0xc5
    0xc6 0xc7.\n   o  rSPI = 0xd0 0xd1 0xd2 0xd3 0xd4 0xd5 0xd6 0xd7.\n   o  Message
    ID shall be 9.\n   The Notify Payload:\n   000  00 00 00 0c 00 00 40 01 00 00
    00 0a              ......@.....\n   Plaintext (with no padding and a zero pad
    length):\n   000  00 00 00 0c 00 00 40 01 00 00 00 0a 00           ......@......\n
    \  Ciphertext:\n   000  61 03 94 70 1f 8d 01 7f 7c 12 92 48 89           a..p....|..H.\n
    \  The AAD is constructed by appending the IKE header to the encrypted\n   payload
    header.  Note that the length field in the IKE header and the\n   length field
    in the encrypted payload header have to be calculated\n   before constructing
    the AAD:\n  AAD:\n  000  c0 c1 c2 c3 c4 c5 c6 c7 d0 d1 d2 d3 d4 d5 d6 d7  ................\n
    \ 016  2e 20 25 00 00 00 00 09 00 00 00 45 29 00 00 29  . %........E)..)\n   In
    this case, the length of the AAD is an integral multiple of 16, so\n   when constructing
    the input to Poly1305 there was no need for\n   padding.  The ciphertext is 13
    octets long, so it is followed by 3\n   zero octets.  The input to Poly1305 is
    32 octets of AAD, 13 octets of\n   ciphertext, 3 octets of zero padding, and two
    8-octet length fields\n   in little-endian byte order.\n  Poly1305 Input:\n  000
    \ c0 c1 c2 c3 c4 c5 c6 c7 d0 d1 d2 d3 d4 d5 d6 d7  ................\n  016  2e
    20 25 00 00 00 00 09 00 00 00 45 29 00 00 29  . %........E)..)\n  032  61 03 94
    70 1f 8d 01 7f 7c 12 92 48 89 00 00 00  a..p....|..H....\n  048  20 00 00 00 00
    00 00 00 0d 00 00 00 00 00 00 00   ...............\n  Tag:\n  000  6b 71 bf e2
    52 36 ef d7 cd c6 70 66 90 63 15 b2  kq..R6....pf.c..\n  Encrypted Payload:\n
    \ 000  29 00 00 29 10 11 12 13 14 15 16 17 61 03 94 70  )..)........a..p\n  016
    \ 1f 8d 01 7f 7c 12 92 48 89 6b 71 bf e2 52 36 ef  ....|..H.kq..R6.\n  032  d7
    cd c6 70 66 90 63 15 b2                       ...pf.c..\n  The IKE Message:\n
    \ 000  c0 c1 c2 c3 c4 c5 c6 c7 d0 d1 d2 d3 d4 d5 d6 d7  ................\n  016
    \ 2e 20 25 00 00 00 00 09 00 00 00 45 29 00 00 29  . %........E)..)\n  032  10
    11 12 13 14 15 16 17 61 03 94 70 1f 8d 01 7f  ........a..p....\n  048  7c 12 92
    48 89 6b 71 bf e2 52 36 ef d7 cd c6 70  |..H.kq..R6....p\n  064  66 90 63 15 b2
    \                                  f.c..\n   The below file in the snoop format
    [RFC1761] contains three packets:\n   The first is the ICMP packet from the example
    in Appendix A, the\n   second is the ESP packet from the same appendix, and the
    third is the\n   IKEv2 packet from this appendix.  To convert this text back into
    a\n   file, you can use a Unix command line tool such as\n   \"openssl enc -d
    -a\":\n   c25vb3AAAAAAAAACAAAABAAAAGIAAABiAAAAegAAAABVPq8PAAADVdhs6fUQBHgx\n   wbcpwggARQAAVKbyAABAAed4xjNkBcAAAgUIAFt6OggAAFU77BAABzYnCAkKCwwN\n
    \  Dg8QERITFBUWFxgZGhscHR4fICEiIyQlJicoKSorLC0uLzAxMjM0NTY3AAAAmgAA\n   AJoAAACyAAAAAFU+rw8AAAo62Gzp9RAEeDHBtynCCABFAACMI0UAAEAy3lvLAHGZ\n
    \  ywBxBQECAwQAAAAFEBESExQVFhckA5QouX9BfjwTdTpPBQh7Z8NS5qf6sbmC1Gbv\n   QHrlxhTugJnVKETrYaqV36tMAvcqpx58TE9kyb7+L6zGOOjzy+wWP6xGm1Anc/b7\n
    \  lOZk2pFluCgp9kHgdqqoJmt/sPexGzaZB+GtQwAAAG8AAABvAAAAhwAAAABVPq8P\n   AAARH9hs6fUQBHgxwbcpwggARQAAYSNFAABAEd6nywBxmcsAcQUB9AH0AE0IUcDB\n
    \  wsPExcbH0NHS09TV1tcuICUAAAAACQAAAEUpAAApEBESExQVFhdhA5RwH40Bf3wS\n   kkiJa3G/4lI279fNxnBmkGMVsg==\n"
  title: Appendix B.  IKEv2 Example
- contents:
  - "Acknowledgements\n   All of the algorithms in this document were designed by
    D. J.\n   Bernstein.  The AEAD construction was designed by Adam Langley.  The\n
    \  author would also like to thank Adam for helpful comments, as well as\n   Yaron
    Sheffer for telling me to write the algorithms document.\n   Thanks also to Martin
    Willi for pointing out the discrepancy with the\n   final version of the algorithm
    document, and to Valery Smyslov and\n   Tero Kivinen for helpful comments on this
    document.  Thanks to Steve\n   Doyle and Martin Willi for pointing out mistakes
    in my examples.\n"
  title: Acknowledgements
- contents:
  - "Author's Address\n   Yoav Nir\n   Check Point Software Technologies Ltd.\n   5
    Hasolelim St.\n   Tel Aviv  6789735\n   Israel\n   Email: ynir.ietf@gmail.com\n"
  title: Author's Address
