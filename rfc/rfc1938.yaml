- title: __initial_text__
  contents:
  - "                       A One-Time Password System\nStatus of this Memo\n   This\
    \ document specifies an Internet standards track protocol for the\n   Internet\
    \ community, and requests discussion and suggestions for\n   improvements.  Please\
    \ refer to the current edition of the \"Internet\n   Official Protocol Standards\"\
    \ (STD 1) for the standardization state\n   and status of this protocol.  Distribution\
    \ of this memo is unlimited.\n1.0 ABSTRACT\n   This document describes a one-time\
    \ password authentication system\n   (OTP). The system provides authentication\
    \ for system access (login)\n   and other applications requiring authentication\
    \ that is secure\n   against passive attacks based on replaying captured reusable\n\
    \   passwords. OTP evolved from the S/KEY (S/KEY is a trademark of\n   Bellcore)\
    \ One-Time Password System that was released by Bellcore and\n   is described\
    \ in references [3] and [5].\n2.0 OVERVIEW\n   One form of attack on networked\
    \ computing systems is eavesdropping on\n   network connections to obtain authentication\
    \ information such as the\n   login IDs and passwords of legitimate users. Once\
    \ this information is\n   captured, it can be used at a later time to gain access\
    \ to the\n   system. One-time password systems are designed to counter this type\n\
    \   of attack, called a \"replay attack\" [4].\n   The authentication system described\
    \ in this document uses a secret\n   pass-phrase to generate a sequence of one-time\
    \ (single use)\n   passwords.  With this system, the user's secret pass-phrase\
    \ never\n   needs to cross the network at any time such as during authentication\n\
    \   or during pass-phrase changes. Thus, it is not vulnerable to replay\n   attacks.\
    \  Added security is provided by the property that no secret\n   information need\
    \ be stored on any system, including the server being\n   protected.\n   The OTP\
    \ system protects against external passive attacks against the\n   authentication\
    \ subsystem. It does not prevent a network eavesdropper\n   from gaining access\
    \ to private information and does not provide\n   protection against either \"\
    social engineering\" or active attacks [9].\n3.0 INTRODUCTION\n   There are two\
    \ entities in the operation of the OTP one-time password\n   system. The generator\
    \ must produce the appropriate one-time password\n   from the user's secret pass-phrase\
    \ and from information provided in\n   the challenge from the server. The server\
    \ must send a challenge that\n   includes the appropriate generation parameters\
    \ to the generator, must\n   verify the one-time password received, must store\
    \ the last valid\n   one-time password it received, and must store the corresponding\
    \ one-\n   time password sequence number. The server must also facilitate the\n\
    \   changing of the user's secret pass-phrase in a secure manner.\n   The OTP\
    \ system generator passes the user's secret pass-phrase, along\n   with a seed\
    \ received from the server as part of the challenge,\n   through multiple iterations\
    \ of a secure hash function to produce a\n   one-time password. After each successful\
    \ authentication, the number\n   of secure hash function iterations is reduced\
    \ by one.  Thus, a unique\n   sequence of passwords is generated.  The server\
    \ verifies the one-time\n   password received from the generator by computing\
    \ the secure hash\n   function once and comparing the result with the previously\
    \ accepted\n   one-time password.  This technique was first suggested by Leslie\n\
    \   Lamport [1].\n4.0 REQUIREMENTS TERMINOLOGY\n   In this document, the words\
    \ that are used to define the significance\n   of each particular requirement\
    \ are usually capitalized.  These words\n   are:\n    - MUST\n      This word\
    \ or the adjective \"REQUIRED\" means that the item is an\n      absolute requirement\
    \ of the specification.\n    - SHOULD\n      This word or the adjective \"RECOMMENDED\"\
    \ means that there might\n      exist valid reasons in particular circumstances\
    \ to ignore this\n      item, but the full implications should be understood and\
    \ the\n      case carefully weighed before taking a different course.\n    - MAY\n\
    \      This word or the adjective \"OPTIONAL\" means that this item is\n     \
    \ truly optional.  One vendor might choose to include the item\n      because\
    \ a particular marketplace requires it or because it\n      enhances the product,\
    \ for example; another vendor may omit the\n      same item.\n5.0 SECURE HASH\
    \ FUNCTION\n   The security of the OTP system is based on the non-invertability\
    \ of a\n   secure hash function. Such a function must be tractable to compute\
    \ in\n   the forward direction, but computationally infeasible to invert.\n  \
    \ The interfaces are currently defined for three such hash algorithms,\n   MD4\
    \ [2] and MD5 [6] by Ronald Rivest, and SHA [7] by NIST.  All\n   conforming implementations\
    \ of both server and generators MUST support\n   MD5.  They SHOULD support SHA\
    \ and MAY also support MD4.  Clearly, the\n   generator and server must use the\
    \ same algorithm in order to\n   interoperate. Other hash algorithms may be specified\
    \ for use with\n   this system by publishing the appropriate interfaces.\n   The\
    \ secure hash algorithms listed above have the property that they\n   accept an\
    \ input that is arbitrarily long and produce a fixed size\n   output. The OTP\
    \ system folds this output to 64 bits using the\n   algorithms in the Appendix\
    \ A. 64 bits is also the length of the one-\n   time passwords. This is believed\
    \ to be long enough to be secure and\n   short enough to be entered manually (see\
    \ below, Form of Output) when\n   necessary.\n6.0 GENERATION OF ONE-TIME PASSWORDS\n\
    \   This section describes the generation of the one-time passwords.\n   This\
    \ process consists of an initial step in which all inputs are\n   combined, a\
    \ computation step where the secure hash function is\n   applied a specified number\
    \ of times, and an output function where the\n   64 bit one-time password is converted\
    \ to a human readable form.\n   Initial Step\n      In principle, the user's secret\
    \ pass-phrase may be of any length.\n      To reduce the risk from techniques\
    \ such as exhaustive search or\n      dictionary attacks, character string pass-phrases\
    \ MUST contain at\n      least 10 characters (see Form of Inputs below).  All\n\
    \      implementations MUST support a pass-phrases of at least 63\n      characters.\
    \  The secret pass-phrase is frequently, but is not\n      required to be, textual\
    \ information provided by a user.\n      In this step, the pass phrase is concatenated\
    \ with a seed that is\n      transmitted from the server in clear text. This non-secret\
    \ seed\n      allows clients to use the same secret pass-phrase on multiple\n\
    \      machines (using different seeds) and to safely recycle their\n      secret\
    \ pass-phrases by changing the seed.\n      The result of the concatenation is\
    \ passed through the secure hash\n      function and then is reduced to 64 bits\
    \ using one of the function\n      dependent algorithms shown in Appendix A.\n\
    \   Computation Step\n      A sequence of one-time passwords is produced by applying\
    \ the\n      secure hash function multiple times to the output of the initial\n\
    \      step (called S). That is, the first one-time password to be used\n    \
    \  is produced by passing S through the secure hash function a number\n      of\
    \ times (N) specified by the user. The next one-time password to\n      be used\
    \ is generated by passing S though the secure hash function\n      N-1 times.\
    \ An eavesdropper who has monitored the transmission of a\n      one- time password\
    \ would not be able to generate the next required\n      password because doing\
    \ so would mean inverting the hash function.\n   Form of Inputs\n      The secret\
    \ pass-phrase is seen only by the OTP generator. To allow\n      interchangeability\
    \ of generators, all generators MUST support a\n      secret pass-phrase of 10\
    \ to 63 characters. Implementations MAY\n      support a longer pass-phrase, but\
    \ such implementations risk the\n      loss of interchangeability with implementations\
    \ supporting only\n      the minimum.\n      The seed MUST consist of purely alphanumeric\
    \ characters and MUST\n      be of one to 16 characters in length. The seed is\
    \ a string of\n      characters that MUST not contain any blanks and SHOULD consist\
    \ of\n      strictly alphanumeric characters from the ISO-646 Invariant Code\n\
    \      Set.  The seed MUST be case insensitive and MUST be internally\n      converted\
    \ to lower case before it is processed.\n      The sequence number and seed together\
    \ constitute a larger unit of\n      data called the challenge. The challenge\
    \ gives the generator the\n      parameters it needs to calculate the correct\
    \ one-time password\n      from the secret pass-phrase. The challenge MUST be\
    \ in a standard\n      syntax so that automated generators can recognize the challenge\
    \ in\n      context and extract these parameters. The syntax of the challenge\n\
    \      is:\n          otp-<algorithm identifier> <sequence integer> <seed>\n \
    \     The three tokens MUST be separated by a white space (defined as\n      any\
    \ number of spaces and/or tabs) and the entire challenge string\n      MUST be\
    \ terminated with either a space or a new line. The string\n      \"otp-\" MUST\
    \ be in lower case.  The algorithm identifier is case\n      sensitive (the existing\
    \ identifiers are all lower case), and the\n      seed is case insensitive and\
    \ converted before use to lower case.\n      If additional algorithms are defined,\
    \ appropriate identifiers\n      (short, but not limited to three or four characters)\
    \ must be\n      defined. The currently defined algorithm identifiers are:\n \
    \     md4        MD4 Message Digest\n      md5        MD5 Message Digest\n   \
    \   sha1       NIST Secure Hash Algorithm Revision 1\n      An example of an OTP\
    \ challenge is:   otp-md5 487 dog2\n   Form of Output\n      The one-time password\
    \ generated by the above procedure is 64 bits\n      in length. Entering a 64\
    \ bit number is a difficult and error prone\n      process. Some generators insert\
    \ this password into the input\n      stream and some others make it available\
    \ for system \"cut and\n      paste.\" Still other arrangements require the one-time\
    \ password to\n      be entered manually. The OTP system is designed to facilitate\
    \ this\n      manual entry without impeding automatic methods. The one-time\n\
    \      password therefore MAY be converted to, and all servers MUST be\n     \
    \ capable of accepting it as, a sequence of six short (1 to 4\n      letter) easily\
    \ typed words that only use characters from ISO-646\n      IVCS. Each word is\
    \ chosen from a dictionary of 2048 words; at 11\n      bits per word, all one-time\
    \ passwords may be encoded.\n      The two extra bits in this encoding are used\
    \ to store a checksum.\n      The 64 bits of key are broken down into pairs of\
    \ bits, then these\n      pairs are summed together. The two least significant\
    \ bits of this\n      sum are encoded in the last two bits of the six word sequence\
    \ with\n      the least significant bit of the sum as the last bit encoded. All\n\
    \      OTP generators MUST calculate this checksum and all OTP servers\n     \
    \ MUST verify this checksum explicitly as part of the operation of\n      decoding\
    \ this representation of the one-time password.\n      Generators that produce\
    \ the six-word format MUST present the words\n      in upper case with single\
    \ spaces used as separators. All servers\n      MUST accept six-word format without\
    \ regard to case and white space\n      used as a separator. The two lines below\
    \ represent the same one-\n      time password.  The first is valid as output\
    \ from a generator and\n      as input a server, the second is valid only as human\
    \ input to a\n      server.\n          OUST COAT FOAL MUG BEAK TOTE\n        \
    \  oust coat foal  mug  beak  tote\n      Interoperability requires that all OTP\
    \ servers and generators use\n      the same dictionary. The standard dictionary\
    \ was originally\n      specified in the \"S/KEY One Time Password System\" that\
    \ is\n      described in RFC 1760 [5].  This dictionary is included in this\n\
    \      document as Appendix C.\n      To facilitate the implementation of smaller\
    \ generators,\n      hexadecimal output is an acceptable alternative for the\n\
    \      presentation of the one-time password. All implementations of the\n   \
    \   server software MUST accept case-insensitive hexadecimal as well\n      as\
    \ six-word format. The hexadecimal digits may be separated by\n      white space\
    \ so servers are REQUIRED to ignore all white space.  If\n      the representation\
    \ is partitioned by white space, leading zeros\n      must be retained. Examples\
    \ of hexadecimal format are:\n         Representation                Value\n \
    \        3503785b369cda8b              0x3503785b369cda8b\n         e5cc a1b8\
    \ 7c13 096b           0xe5cca1b87c13096b\n         C7 48 90 F4 27 7B A1 CF   \
    \    0xc74890f4277ba1cf\n         47 9 A68 28 4C 9D 0 1BC       0x479a68284c9d01bc\n\
    \      In addition to accepting six-word and hexadecimal encodings of the\n  \
    \    64 bit one-time password, servers SHOULD accept the alternate\n      dictionary\
    \ encoding described in Appendix B.  The six words in\n      this encoding MUST\
    \ not overlap the set of words in the standard\n      dictionary.  To avoid ambiguity\
    \ with the hexadecimal\n      representation, words in the alternate dictionary\
    \ MUST not be\n      comprised solely of the letters A-F.  Decoding words thus\
    \ encoded\n      does not require any knowledge of the alternative dictionary\
    \ used\n      so the acceptance of any alternate dictionary implies the\n    \
    \  acceptance of all alternate dictionaries.  Words in the\n      alternative\
    \ dictionaries are case sensitive.  Generators and\n      servers MUST preserve\
    \ the case in the processing of these words.\n      In summary, all conforming\
    \ servers MUST accept six-word input that\n      uses the Standard Dictionary\
    \ (RFC 1760 and Appendix C), MUST\n      accept hexadecimal encoding, and SHOULD\
    \ accept six-word input that\n      uses the Alternative Dictionary technique\
    \ (Appendix B).  As there\n      is a remote possibility that a hexadecimal encoding\
    \ of a one-time\n      password will look like a valid six-word standard dictionary\n\
    \      encoding, all implementations MUST use the following scheme.  If a\n  \
    \    six-word encoded one-time password is valid, it is accepted.\n      Otherwise,\
    \ if the one-time password can be interpreted as\n      hexadecimal, and with\
    \ that decoding it is valid, then it is\n      accepted.\n7.0 VERIFICATION OF\
    \ ONE-TIME PASSWORDS\n   An application on the server system that requires OTP\
    \ authentication\n   is expected to issue an OTP challenge as described above.\
    \ Given the\n   parameters from this challenge and the secret pass-phrase, the\n\
    \   generator can compute (or lookup) the one-time password that is\n   passed\
    \ to the server to be verified.\n   The server system has a database containing,\
    \ for each user, the one-\n   time password from the last successful authentication\
    \ or the first\n   OTP of a newly initialized sequence. To authenticate the user,\
    \ the\n   server decodes the one-time password received from the generator into\n\
    \   a 64-bit key and then runs this key through the secure hash function\n   once.\
    \ If the result of this operation matches the stored previous\n   OTP, the authentication\
    \ is successful and the accepted one-time\n   password is stored for future use.\n\
    8.0 PASS-PHRASE CHANGES\n   Because the number of hash function applications executed\
    \ by the\n   generator decreases by one each time, at some point the user must\n\
    \   reinitialize the system or be unable to authenticate.\n   Although some installations\
    \ may not permit users to initialize\n   remotely, implementations MUST provide\
    \ a means to do so that does not\n   reveal the user's secret pass-phrase.  One\
    \ way is to provide a means\n   to reinitialize the  sequence through explicit\
    \ specification of the\n   first one-time password.\n   When the sequence of one-time\
    \ passwords is reinitialized,\n   implementations MUST verify that the seed or\
    \ the pass-phrase is\n   changed.  Installations SHOULD discourage any operation\
    \ that sends\n   the secret pass-phrase over a network in clear-text as such practice\n\
    \   defeats the concept of a one-time password.\n   Implementations MAY use the\
    \ following technique for\n   [re]initialization:\n    o  The user picks a new\
    \ seed and hash count (default values may\n       be offered).  The user provides\
    \ these, along with the\n       corresponding generated one-time password, to\
    \ the host system.\n    o  The user MAY also provide the corresponding generated\
    \ one\n       time password for count-1 as an error check.\n    o  The user SHOULD\
    \ provide the generated one-time password for\n       the old seed and old hash\
    \ count to protect an idle terminal\n       or workstation (this implies that\
    \ when the count is 1, the\n       user can login but cannot then change the seed\
    \ or count).\n   In the future a specific protocol may be defined for reinitialization\n\
    \   that will permit smooth and possibly automated interoperation of all\n   hosts\
    \ and generators.\n9.0 PROTECTION AGAINST RACE ATTACK\n   All conforming server\
    \ implementations MUST protect against the race\n   condition described in this\
    \ section.  A defense against this attack\n   is outlined; implementations MAY\
    \ use this approach or MAY select an\n   alternative defense.\n   It is possible\
    \ for an attacker to listen to most of a one-time\n   password, guess the remainder,\
    \ and then race the legitimate user to\n   complete the authentication.  Multiple\
    \ guesses against the last word\n   of the six-word format are likely to succeed.\n\
    \   One possible defense is to prevent a user from starting multiple\n   simultaneous\
    \ authentication sessions. This means that once the\n   legitimate user has initiated\
    \ authentication, an attacker would be\n   blocked until the first authentication\
    \ process has completed.  In\n   this approach, a timeout is necessary to thwart\
    \ a denial of service\n   attack.\n10.0 SECURITY CONSIDERATIONS\n   This entire\
    \ document discusses an authentication system that improves\n   security by limiting\
    \ the danger of eavesdropping/replay attacks that\n   have been used against simple\
    \ password systems [4].\n   The use of the OTP system only provides protections\
    \ against passive\n   eavesdropping/replay attacks.  It does not provide for the\
    \ privacy of\n   transmitted data, and it does not provide protection against\
    \ active\n   attacks.  Active attacks against TCP connections are known to be\n\
    \   present in the current Internet [9].\n   The success of the OTP system to\
    \ protect host systems is dependent on\n   the non-invertability of the secure\
    \ hash functions used.  To our\n   knowledge, none of the hash algorithms have\
    \ been broken, but it is\n   generally believed [6] that MD4 is not as strong\
    \ as MD5.  If a server\n   supports multiple hash algorithms, it is only as secure\
    \ as the\n   weakest algorithm.\n11.0 ACKNOWLEDGMENTS\n   The idea behind OTP\
    \ authentication was first proposed by Leslie\n   Lamport [1]. Bellcore's S/KEY\
    \ system, from which OTP is derived, was\n   proposed by Phil Karn, who also wrote\
    \ most of the Bellcore reference\n   implementation.\n12.0 REFERENCES\n  [1] \
    \ Leslie Lamport, \"Password Authentication with Insecure\n       Communication\"\
    , Communications of the ACM 24.11 (November\n       1981), 770-772\n  [2]  Rivest,\
    \ R., \"The MD4 Message-Digest Algorithm, RFC 1320\",\n       MIT and RSA Data\
    \ Security, Inc., April 1992.\n  [3]  Neil Haller, \"The S/KEY One-Time Password\
    \ System\", Proceedings\n       of the ISOC Symposium on Network and Distributed\
    \ System\n       Security, February 1994, San Diego, CA\n  [4]  Haller, N., and\
    \ R. Atkinson, \"On Internet Authentication\",\n       RFC 1704, Bellcore and\
    \ Naval Research Laboratory, October 1994.\n  [5]  Haller, N., \"The S/KEY One-Time\
    \ Password System\", RFC 1760,\n       Bellcore, February 1995.\n  [6]  Rivest,\
    \ R., \"The MD5 Message-Digest Algorithm\", RFC 1321,\n       MIT and RSA Data\
    \ Security, Inc., April 1992.\n  [7]  National Institute of Standards and Technology\
    \ (NIST),\n       \"Announcing the Secure Hash Standard\", FIPS 180-1, U.S.\n\
    \       Department of Commerce, April 1995.\n  [8]  International Standard - Information\
    \ Processing -- ISO 7-bit\n       coded character set for information interchange\
    \ (Invariant Code\n       Set), ISO-646, International Standards Organization,\
    \ Geneva,\n       Switzerland, 1983\n  [9]  Computer Emergency Response Team (CERT),\
    \ \"IP Spoofing and\n       Hijacked Terminal Connections\", CA-95:01, January\
    \ 1995.\n       Available via anonymous ftp from info.cert.org in\n       /pub/cert_advisories.\n\
    13.0 AUTHORS' ADDRESSES\n   Neil Haller\n   Bellcore\n   MCC 1C-265B\n   445 South\
    \ Street\n   Morristown, NJ, 07960-6438, USA\n   Phone: +1 201 829-4478\n   Fax:\
    \   +1 201 829-2504\n   EMail: nmh@bellcore.com\n   Craig Metz\n   Kaman Sciences\
    \ Corporation\n   For NRL Code 5544\n   4555 Overlook Avenue, S.W.\n   Washington,\
    \ DC, 20375-5337, USA\n   Phone: +1 202 404-7122\n   Fax:   +1 202 404-7942\n\
    \   EMail: cmetz@cs.nrl.navy.mil\nAppendix A   -   Interfaces to Secure Hash Algorithms\n\
    MD4 Message Digest (see reference [2])\n          strcpy(buf,seed);\n        \
    \  strcat(buf,passwd);\n          MDbegin(&md)\n          MDupdate(&md,(unsigned\
    \ char *)buf,8*buflen);\n          /* Fold result to 64 bits */\n          md.buffer[0]\
    \ ^= md.buffer[2];\n          md.buffer[1] ^= md.buffer[3];\nMD5 Message Digest\
    \ (see reference [6])\n          MD5_CTX mdCxt;\n          strcpy(buf,seed);\n\
    \          strcat(buf,passwd);\n          /* Crunch the key through MD5  */\n\
    \          MD5Init(&mdCxt);\n          MD5Update(&mdCxt,(unsigned char *)bits,strlen(bits));\n\
    \          MD5Update(&mdCxt,(unsigned char *)buf,buflen);\n          MD5Final(&mdCxt);\n\
    \          /* Fold result to 64 bits */\n          for( i = 0; i < 8; i++ )\n\
    \              result[i] = mdCxt.digest[i] ^ mdCxt.digest[i+8];\nSHA Secure Hash\
    \ Algorithm (see reference [7])\n          /*  Fold 160 bit result to 64 bits\
    \ */\n          md.buffer[0] ^= md.buffer[2];\n          md.buffer[1] ^= md.buffer[3];\n\
    \          md.buffer[0] ^= md.buffer[4];\nAppendix B   -   Alternative Dictionary\
    \ Algorithm\n   The purpose of alternative dictionary encoding of the OTP one-time\n\
    \   password is to allow the use of language specific or friendly words.\n   As\
    \ case translation is not always well defined, the alternative\n   dictionary\
    \ encoding is case insensitive.  Servers SHOULD accept this\n   encoding in addition\
    \ to the standard 6-word and hexadecimal\n   encodings.\nGENERATOR ENCODING USING\
    \ AN ALTERNATE DICTIONARY\n  The standard 6-word encoding uses the placement of\
    \ a word in the\n  dictionary to represent an 11-bit number. The 64-bit one-time\n\
    \  password can then be represented by six words.\n  An alternative dictionary\
    \ of 2048 words may be created such that\n  each word W and position of the word\
    \ in the dictionary N obey the\n  relationship:\n          alg( W ) % 2048 ==\
    \ N\n  where\n          alg is the hash algorithm used (e.g. MD4, MD5, SHA1).\n\
    \  In addition, no words in the standard dictionary may be chosen.\n  The generator\
    \ expands the 64-bit one-time password to 66 bits by\n  computing parity as with\
    \ the standard 6-word encoding.  The six 11-\n  bit numbers are then converted\
    \ to words using the dictionary that\n  was created such that the above relationship\
    \ holds.\nSERVER DECODING OF ALTERNATE DICTIONARY ONE-TIME PASSWORDS\n  The server\
    \ accepting alternative dictionary encoding converts each\n  word to an 11-bit\
    \ number using the above encoding. These numbers are\n  then used in the same\
    \ way as the decoded standard dictionary words\n  to form the 66-bit one-time\
    \ password.\n  The server does not need to have access to the alternate dictionary\n\
    \  that was used to create the one-time password it is authenticating.\n  This\
    \ is because the decoding from word to 11-bit number does not\n  make any use\
    \ of the dictionary.  As a result of the independence of\n  the dictionary, a\
    \ server accepting one alternate dictionary accept\n  all alternate dictionaries.\n\
    Appendix C - Dictionary for Converting Between 6-Word and Binary\nFormats\n  \
    \ This dictionary is from the module put.c in the original Bellcore\n   reference\
    \ distribution.\n{        \"A\",    \"ABE\",   \"ACE\",   \"ACT\",   \"AD\", \
    \   \"ADA\",   \"ADD\",\n\"AGO\",   \"AID\",  \"AIM\",   \"AIR\",   \"ALL\", \
    \  \"ALP\",   \"AM\",    \"AMY\",\n\"AN\",    \"ANA\",  \"AND\",   \"ANN\",  \
    \ \"ANT\",   \"ANY\",   \"APE\",   \"APS\",\n\"APT\",   \"ARC\",  \"ARE\",   \"\
    ARK\",   \"ARM\",   \"ART\",   \"AS\",    \"ASH\",\n\"ASK\",   \"AT\",   \"ATE\"\
    ,   \"AUG\",   \"AUK\",   \"AVE\",   \"AWE\",   \"AWK\",\n\"AWL\",   \"AWN\",\
    \  \"AX\",    \"AYE\",   \"BAD\",   \"BAG\",   \"BAH\",   \"BAM\",\n\"BAN\", \
    \  \"BAR\",  \"BAT\",   \"BAY\",   \"BE\",    \"BED\",   \"BEE\",   \"BEG\",\n\
    \"BEN\",   \"BET\",  \"BEY\",   \"BIB\",   \"BID\",   \"BIG\",   \"BIN\",   \"\
    BIT\",\n\"BOB\",   \"BOG\",  \"BON\",   \"BOO\",   \"BOP\",   \"BOW\",   \"BOY\"\
    ,   \"BUB\",\n\"BUD\",   \"BUG\",  \"BUM\",   \"BUN\",   \"BUS\",   \"BUT\", \
    \  \"BUY\",   \"BY\",\n\"BYE\",   \"CAB\",  \"CAL\",   \"CAM\",   \"CAN\",   \"\
    CAP\",   \"CAR\",   \"CAT\",\n\"CAW\",   \"COD\",  \"COG\",   \"COL\",   \"CON\"\
    ,   \"COO\",   \"COP\",   \"COT\",\n\"COW\",   \"COY\",  \"CRY\",   \"CUB\", \
    \  \"CUE\",   \"CUP\",   \"CUR\",   \"CUT\",\n\"DAB\",   \"DAD\",  \"DAM\",  \
    \ \"DAN\",   \"DAR\",   \"DAY\",   \"DEE\",   \"DEL\",\n\"DEN\",   \"DES\",  \"\
    DEW\",   \"DID\",   \"DIE\",   \"DIG\",   \"DIN\",   \"DIP\",\n\"DO\",    \"DOE\"\
    ,  \"DOG\",   \"DON\",   \"DOT\",   \"DOW\",   \"DRY\",   \"DUB\",\n\"DUD\", \
    \  \"DUE\",  \"DUG\",   \"DUN\",   \"EAR\",   \"EAT\",   \"ED\",    \"EEL\",\n\
    \"EGG\",   \"EGO\",  \"ELI\",   \"ELK\",   \"ELM\",   \"ELY\",   \"EM\",    \"\
    END\",\n\"EST\",   \"ETC\",  \"EVA\",   \"EVE\",   \"EWE\",   \"EYE\",   \"FAD\"\
    ,   \"FAN\",\n\"FAR\",   \"FAT\",  \"FAY\",   \"FED\",   \"FEE\",   \"FEW\", \
    \  \"FIB\",   \"FIG\",\n\"FIN\",   \"FIR\",  \"FIT\",   \"FLO\",   \"FLY\",  \
    \ \"FOE\",   \"FOG\",   \"FOR\",\n\"FRY\",   \"FUM\",  \"FUN\",   \"FUR\",   \"\
    GAB\",   \"GAD\",   \"GAG\",   \"GAL\",\n\"GAM\",   \"GAP\",  \"GAS\",   \"GAY\"\
    ,   \"GEE\",   \"GEL\",   \"GEM\",   \"GET\",\n\"GIG\",   \"GIL\",  \"GIN\", \
    \  \"GO\",    \"GOT\",   \"GUM\",   \"GUN\",   \"GUS\",\n\"GUT\",   \"GUY\", \
    \ \"GYM\",   \"GYP\",   \"HA\",    \"HAD\",   \"HAL\",   \"HAM\",\n\"HAN\",  \
    \ \"HAP\",  \"HAS\",   \"HAT\",   \"HAW\",   \"HAY\",   \"HE\",    \"HEM\",\n\"\
    HEN\",   \"HER\",  \"HEW\",   \"HEY\",   \"HI\",    \"HID\",   \"HIM\",   \"HIP\"\
    ,\n\"HIS\",   \"HIT\",  \"HO\",    \"HOB\",   \"HOC\",   \"HOE\",   \"HOG\", \
    \  \"HOP\",\n\"HOT\",   \"HOW\",  \"HUB\",   \"HUE\",   \"HUG\",   \"HUH\",  \
    \ \"HUM\",   \"HUT\",\n\"I\",     \"ICY\",  \"IDA\",   \"IF\",    \"IKE\",   \"\
    ILL\",   \"INK\",   \"INN\",\n\"IO\",    \"ION\",  \"IQ\",    \"IRA\",   \"IRE\"\
    ,   \"IRK\",   \"IS\",    \"IT\",\n\"ITS\",   \"IVY\",  \"JAB\",   \"JAG\",  \
    \ \"JAM\",   \"JAN\",   \"JAR\",   \"JAW\",\n\"JAY\",   \"JET\",  \"JIG\",   \"\
    JIM\",   \"JO\",    \"JOB\",   \"JOE\",   \"JOG\",\n\"JOT\",   \"JOY\",  \"JUG\"\
    ,   \"JUT\",   \"KAY\",   \"KEG\",   \"KEN\",   \"KEY\",\n\"KID\",   \"KIM\",\
    \  \"KIN\",   \"KIT\",   \"LA\",    \"LAB\",   \"LAC\",   \"LAD\",\n\"LAG\", \
    \  \"LAM\",  \"LAP\",   \"LAW\",   \"LAY\",   \"LEA\",   \"LED\",   \"LEE\",\n\
    \"LEG\",   \"LEN\",  \"LEO\",   \"LET\",   \"LEW\",   \"LID\",   \"LIE\",   \"\
    LIN\",\n\"LIP\",   \"LIT\",  \"LO\",    \"LOB\",   \"LOG\",   \"LOP\",   \"LOS\"\
    ,   \"LOT\",\n\"LOU\",   \"LOW\",  \"LOY\",   \"LUG\",   \"LYE\",   \"MA\",  \
    \  \"MAC\",   \"MAD\",\n\"MAE\",   \"MAN\",  \"MAO\",   \"MAP\",   \"MAT\",  \
    \ \"MAW\",   \"MAY\",   \"ME\",\n\"MEG\",   \"MEL\",  \"MEN\",   \"MET\",   \"\
    MEW\",   \"MID\",   \"MIN\",   \"MIT\",\n\"MOB\",   \"MOD\",  \"MOE\",   \"MOO\"\
    ,   \"MOP\",   \"MOS\",   \"MOT\",   \"MOW\",\n\"MUD\",   \"MUG\",  \"MUM\", \
    \  \"MY\",    \"NAB\",   \"NAG\",   \"NAN\",   \"NAP\",\n\"NAT\",   \"NAY\", \
    \ \"NE\",    \"NED\",   \"NEE\",   \"NET\",   \"NEW\",   \"NIB\",\n\"NIL\",  \
    \ \"NIP\",  \"NIT\",   \"NO\",    \"NOB\",   \"NOD\",   \"NON\",   \"NOR\",\n\"\
    NOT\",   \"NOV\",  \"NOW\",   \"NU\",    \"NUN\",   \"NUT\",   \"O\",     \"OAF\"\
    ,\n\"OAK\",   \"OAR\",  \"OAT\",   \"ODD\",   \"ODE\",   \"OF\",    \"OFF\", \
    \  \"OFT\",\n\"OH\",    \"OIL\",  \"OK\",    \"OLD\",   \"ON\",    \"ONE\",  \
    \ \"OR\",    \"ORB\",\n\"ORE\",   \"ORR\",  \"OS\",    \"OTT\",   \"OUR\",   \"\
    OUT\",   \"OVA\",   \"OW\",\n\"OWE\",   \"OWL\",  \"OWN\",   \"OX\",    \"PA\"\
    ,    \"PAD\",   \"PAL\",   \"PAM\",\n\"PAN\",   \"PAP\",  \"PAR\",   \"PAT\",\
    \   \"PAW\",   \"PAY\",   \"PEA\",   \"PEG\",\n\"PEN\",   \"PEP\",  \"PER\", \
    \  \"PET\",   \"PEW\",   \"PHI\",   \"PI\",    \"PIE\",\n\"PIN\",   \"PIT\", \
    \ \"PLY\",   \"PO\",    \"POD\",   \"POE\",   \"POP\",   \"POT\",\n\"POW\",  \
    \ \"PRO\",  \"PRY\",   \"PUB\",   \"PUG\",   \"PUN\",   \"PUP\",   \"PUT\",\n\"\
    QUO\",   \"RAG\",  \"RAM\",   \"RAN\",   \"RAP\",   \"RAT\",   \"RAW\",   \"RAY\"\
    ,\n\"REB\",   \"RED\",  \"REP\",   \"RET\",   \"RIB\",   \"RID\",   \"RIG\", \
    \  \"RIM\",\n\"RIO\",   \"RIP\",  \"ROB\",   \"ROD\",   \"ROE\",   \"RON\",  \
    \ \"ROT\",   \"ROW\",\n\"ROY\",   \"RUB\",  \"RUE\",   \"RUG\",   \"RUM\",   \"\
    RUN\",   \"RYE\",   \"SAC\",\n\"SAD\",   \"SAG\",  \"SAL\",   \"SAM\",   \"SAN\"\
    ,   \"SAP\",   \"SAT\",   \"SAW\",\n\"SAY\",   \"SEA\",  \"SEC\",   \"SEE\", \
    \  \"SEN\",   \"SET\",   \"SEW\",   \"SHE\",\n\"SHY\",   \"SIN\",  \"SIP\",  \
    \ \"SIR\",   \"SIS\",   \"SIT\",   \"SKI\",   \"SKY\",\n\"SLY\",   \"SO\",   \"\
    SOB\",   \"SOD\",   \"SON\",   \"SOP\",   \"SOW\",   \"SOY\",\n\"SPA\",   \"SPY\"\
    ,  \"SUB\",   \"SUD\",   \"SUE\",   \"SUM\",   \"SUN\",   \"SUP\",\n\"TAB\", \
    \  \"TAD\",  \"TAG\",   \"TAN\",   \"TAP\",   \"TAR\",   \"TEA\",   \"TED\",\n\
    \"TEE\",   \"TEN\",  \"THE\",   \"THY\",   \"TIC\",   \"TIE\",   \"TIM\",   \"\
    TIN\",\n\"TIP\",   \"TO\",   \"TOE\",   \"TOG\",   \"TOM\",   \"TON\",   \"TOO\"\
    ,   \"TOP\",\n\"TOW\",   \"TOY\",  \"TRY\",   \"TUB\",   \"TUG\",   \"TUM\", \
    \  \"TUN\",   \"TWO\",\n\"UN\",    \"UP\",   \"US\",    \"USE\",   \"VAN\",  \
    \ \"VAT\",   \"VET\",   \"VIE\",\n\"WAD\",   \"WAG\",  \"WAR\",   \"WAS\",   \"\
    WAY\",   \"WE\",    \"WEB\",   \"WED\",\n\"WEE\",   \"WET\",  \"WHO\",   \"WHY\"\
    ,   \"WIN\",   \"WIT\",   \"WOK\",   \"WON\",\n\"WOO\",   \"WOW\",  \"WRY\", \
    \  \"WU\",    \"YAM\",   \"YAP\",   \"YAW\",   \"YE\",\n\"YEA\",   \"YES\",  \"\
    YET\",   \"YOU\",   \"ABED\",  \"ABEL\",  \"ABET\",  \"ABLE\",\n\"ABUT\",  \"\
    ACHE\",  \"ACID\", \"ACME\",  \"ACRE\",  \"ACTA\",  \"ACTS\",  \"ADAM\",\n\"ADDS\"\
    ,  \"ADEN\",  \"AFAR\", \"AFRO\",  \"AGEE\",  \"AHEM\",  \"AHOY\",  \"AIDA\",\n\
    \"AIDE\",  \"AIDS\",  \"AIRY\", \"AJAR\",  \"AKIN\",  \"ALAN\",  \"ALEC\",  \"\
    ALGA\",\n\"ALIA\",  \"ALLY\",  \"ALMA\", \"ALOE\",  \"ALSO\",  \"ALTO\",  \"ALUM\"\
    ,  \"ALVA\",\n\"AMEN\",  \"AMES\",  \"AMID\", \"AMMO\",  \"AMOK\",  \"AMOS\",\
    \  \"AMRA\",  \"ANDY\",\n\"ANEW\",  \"ANNA\",  \"ANNE\", \"ANTE\",  \"ANTI\",\
    \  \"AQUA\",  \"ARAB\",  \"ARCH\",\n\"AREA\",  \"ARGO\",  \"ARID\", \"ARMY\",\
    \  \"ARTS\",  \"ARTY\",  \"ASIA\",  \"ASKS\",\n\"ATOM\",  \"AUNT\",  \"AURA\"\
    , \"AUTO\",  \"AVER\",  \"AVID\",  \"AVIS\",  \"AVON\",\n\"AVOW\",  \"AWAY\",\
    \  \"AWRY\", \"BABE\",  \"BABY\",  \"BACH\",  \"BACK\",  \"BADE\",\n\"BAIL\",\
    \  \"BAIT\",  \"BAKE\", \"BALD\",  \"BALE\",  \"BALI\",  \"BALK\",  \"BALL\",\n\
    \"BALM\",  \"BAND\",  \"BANE\", \"BANG\",  \"BANK\",  \"BARB\",  \"BARD\",  \"\
    BARE\",\n\"BARK\",  \"BARN\",  \"BARR\", \"BASE\",  \"BASH\",  \"BASK\",  \"BASS\"\
    ,  \"BATE\",\n\"BATH\",  \"BAWD\",  \"BAWL\", \"BEAD\",  \"BEAK\",  \"BEAM\",\
    \  \"BEAN\",  \"BEAR\",\n\"BEAT\",  \"BEAU\",  \"BECK\", \"BEEF\",  \"BEEN\",\
    \  \"BEER\",  \"BEET\",  \"BELA\",\n\"BELL\",  \"BELT\",  \"BEND\", \"BENT\",\
    \  \"BERG\",  \"BERN\",  \"BERT\",  \"BESS\",\n\"BEST\",  \"BETA\",  \"BETH\"\
    , \"BHOY\",  \"BIAS\",  \"BIDE\",  \"BIEN\",  \"BILE\",\n\"BILK\",  \"BILL\",\
    \  \"BIND\", \"BING\",  \"BIRD\",  \"BITE\",  \"BITS\",  \"BLAB\",\n\"BLAT\",\
    \  \"BLED\",  \"BLEW\", \"BLOB\",  \"BLOC\",  \"BLOT\",  \"BLOW\",  \"BLUE\",\n\
    \"BLUM\",  \"BLUR\",  \"BOAR\", \"BOAT\",  \"BOCA\",  \"BOCK\",  \"BODE\",  \"\
    BODY\",\n\"BOGY\",  \"BOHR\",  \"BOIL\", \"BOLD\",  \"BOLO\",  \"BOLT\",  \"BOMB\"\
    ,  \"BONA\",\n\"BOND\",  \"BONE\",  \"BONG\", \"BONN\",  \"BONY\",  \"BOOK\",\
    \  \"BOOM\",  \"BOON\",\n\"BOOT\",  \"BORE\",  \"BORG\", \"BORN\",  \"BOSE\",\
    \  \"BOSS\",  \"BOTH\",  \"BOUT\",\n\"BOWL\",  \"BOYD\",  \"BRAD\", \"BRAE\",\
    \  \"BRAG\",  \"BRAN\",  \"BRAY\",  \"BRED\",\n\"BREW\",  \"BRIG\",  \"BRIM\"\
    , \"BROW\",  \"BUCK\",  \"BUDD\",  \"BUFF\",  \"BULB\",\n\"BULK\",  \"BULL\",\
    \  \"BUNK\", \"BUNT\",  \"BUOY\",  \"BURG\",  \"BURL\",  \"BURN\",\n\"BURR\",\
    \  \"BURT\",  \"BURY\", \"BUSH\",  \"BUSS\",  \"BUST\",  \"BUSY\",  \"BYTE\",\n\
    \"CADY\",  \"CAFE\",  \"CAGE\", \"CAIN\",  \"CAKE\",  \"CALF\",  \"CALL\",  \"\
    CALM\",\n\"CAME\",  \"CANE\",  \"CANT\", \"CARD\",  \"CARE\",  \"CARL\",  \"CARR\"\
    ,  \"CART\",\n\"CASE\",  \"CASH\",  \"CASK\", \"CAST\",  \"CAVE\",  \"CEIL\",\
    \  \"CELL\",  \"CENT\",\n\"CERN\",  \"CHAD\",  \"CHAR\", \"CHAT\",  \"CHAW\",\
    \  \"CHEF\",  \"CHEN\",  \"CHEW\",\n\"CHIC\",  \"CHIN\",  \"CHOU\", \"CHOW\",\
    \  \"CHUB\",  \"CHUG\",  \"CHUM\",  \"CITE\",\n\"CITY\",  \"CLAD\",  \"CLAM\"\
    , \"CLAN\",  \"CLAW\",  \"CLAY\",  \"CLOD\",  \"CLOG\",\n\"CLOT\",  \"CLUB\",\
    \  \"CLUE\", \"COAL\",  \"COAT\",  \"COCA\",  \"COCK\",  \"COCO\",\n\"CODA\",\
    \  \"CODE\",  \"CODY\", \"COED\",  \"COIL\",  \"COIN\",  \"COKE\",  \"COLA\",\n\
    \"COLD\",  \"COLT\",  \"COMA\", \"COMB\",  \"COME\",  \"COOK\",  \"COOL\",  \"\
    COON\",\n\"COOT\",  \"CORD\",  \"CORE\", \"CORK\",  \"CORN\",  \"COST\",  \"COVE\"\
    ,  \"COWL\",\n\"CRAB\",  \"CRAG\",  \"CRAM\", \"CRAY\",  \"CREW\",  \"CRIB\",\
    \  \"CROW\",  \"CRUD\",\n\"CUBA\",  \"CUBE\",  \"CUFF\", \"CULL\",  \"CULT\",\
    \  \"CUNY\",  \"CURB\",  \"CURD\",\n\"CURE\",  \"CURL\",  \"CURT\", \"CUTS\",\
    \  \"DADE\",  \"DALE\",  \"DAME\",  \"DANA\",\n\"DANE\",  \"DANG\",  \"DANK\"\
    , \"DARE\",  \"DARK\",  \"DARN\",  \"DART\",  \"DASH\",\n\"DATA\",  \"DATE\",\
    \  \"DAVE\", \"DAVY\",  \"DAWN\",  \"DAYS\",  \"DEAD\",  \"DEAF\",\n\"DEAL\",\
    \  \"DEAN\",  \"DEAR\", \"DEBT\",  \"DECK\",  \"DEED\",  \"DEEM\",  \"DEER\",\n\
    \"DEFT\",  \"DEFY\",  \"DELL\", \"DENT\",  \"DENY\",  \"DESK\",  \"DIAL\",  \"\
    DICE\",\n\"DIED\",  \"DIET\",  \"DIME\", \"DINE\",  \"DING\",  \"DINT\",  \"DIRE\"\
    ,  \"DIRT\",\n\"DISC\",  \"DISH\",  \"DISK\", \"DIVE\",  \"DOCK\",  \"DOES\",\
    \  \"DOLE\",  \"DOLL\",\n\"DOLT\",  \"DOME\",  \"DONE\", \"DOOM\",  \"DOOR\",\
    \  \"DORA\",  \"DOSE\",  \"DOTE\",\n\"DOUG\",  \"DOUR\",  \"DOVE\", \"DOWN\",\
    \  \"DRAB\",  \"DRAG\",  \"DRAM\",  \"DRAW\",\n\"DREW\",  \"DRUB\",  \"DRUG\"\
    , \"DRUM\",  \"DUAL\",  \"DUCK\",  \"DUCT\",  \"DUEL\",\n\"DUET\",  \"DUKE\",\
    \  \"DULL\", \"DUMB\",  \"DUNE\",  \"DUNK\",  \"DUSK\",  \"DUST\",\n\"DUTY\",\
    \  \"EACH\",  \"EARL\", \"EARN\",  \"EASE\",  \"EAST\",  \"EASY\",  \"EBEN\",\n\
    \"ECHO\",  \"EDDY\",  \"EDEN\", \"EDGE\",  \"EDGY\",  \"EDIT\",  \"EDNA\",  \"\
    EGAN\",\n\"ELAN\",  \"ELBA\",  \"ELLA\", \"ELSE\",  \"EMIL\",  \"EMIT\",  \"EMMA\"\
    ,  \"ENDS\",\n\"ERIC\",  \"EROS\",  \"EVEN\", \"EVER\",  \"EVIL\",  \"EYED\",\
    \  \"FACE\",  \"FACT\",\n\"FADE\",  \"FAIL\",  \"FAIN\", \"FAIR\",  \"FAKE\",\
    \  \"FALL\",  \"FAME\",  \"FANG\",\n\"FARM\",  \"FAST\",  \"FATE\", \"FAWN\",\
    \  \"FEAR\",  \"FEAT\",  \"FEED\",  \"FEEL\",\n\"FEET\",  \"FELL\",  \"FELT\"\
    , \"FEND\",  \"FERN\",  \"FEST\",  \"FEUD\",  \"FIEF\",\n\"FIGS\",  \"FILE\",\
    \  \"FILL\", \"FILM\",  \"FIND\",  \"FINE\",  \"FINK\",  \"FIRE\",\n\"FIRM\",\
    \  \"FISH\",  \"FISK\", \"FIST\",  \"FITS\",  \"FIVE\",  \"FLAG\",  \"FLAK\",\n\
    \"FLAM\",  \"FLAT\",  \"FLAW\", \"FLEA\",  \"FLED\",  \"FLEW\",  \"FLIT\",  \"\
    FLOC\",\n\"FLOG\",  \"FLOW\",  \"FLUB\", \"FLUE\",  \"FOAL\",  \"FOAM\",  \"FOGY\"\
    ,  \"FOIL\",\n\"FOLD\",  \"FOLK\",  \"FOND\", \"FONT\",  \"FOOD\",  \"FOOL\",\
    \  \"FOOT\",  \"FORD\",\n\"FORE\",  \"FORK\",  \"FORM\", \"FORT\",  \"FOSS\",\
    \  \"FOUL\",  \"FOUR\",  \"FOWL\",\n\"FRAU\",  \"FRAY\",  \"FRED\", \"FREE\",\
    \  \"FRET\",  \"FREY\",  \"FROG\",  \"FROM\",\n\"FUEL\",  \"FULL\",  \"FUME\"\
    , \"FUND\",  \"FUNK\",  \"FURY\",  \"FUSE\",  \"FUSS\",\n\"GAFF\",  \"GAGE\",\
    \  \"GAIL\", \"GAIN\",  \"GAIT\",  \"GALA\",  \"GALE\",  \"GALL\",\n\"GALT\",\
    \  \"GAME\",  \"GANG\", \"GARB\",  \"GARY\",  \"GASH\",  \"GATE\",  \"GAUL\",\n\
    \"GAUR\",  \"GAVE\",  \"GAWK\", \"GEAR\",  \"GELD\",  \"GENE\",  \"GENT\",  \"\
    GERM\",\n\"GETS\",  \"GIBE\",  \"GIFT\", \"GILD\",  \"GILL\",  \"GILT\",  \"GINA\"\
    ,  \"GIRD\",\n\"GIRL\",  \"GIST\",  \"GIVE\", \"GLAD\",  \"GLEE\",  \"GLEN\",\
    \  \"GLIB\",  \"GLOB\",\n\"GLOM\",  \"GLOW\",  \"GLUE\", \"GLUM\",  \"GLUT\",\
    \  \"GOAD\",  \"GOAL\",  \"GOAT\",\n\"GOER\",  \"GOES\",  \"GOLD\", \"GOLF\",\
    \  \"GONE\",  \"GONG\",  \"GOOD\",  \"GOOF\",\n\"GORE\",  \"GORY\",  \"GOSH\"\
    , \"GOUT\",  \"GOWN\",  \"GRAB\",  \"GRAD\",  \"GRAY\",\n\"GREG\",  \"GREW\",\
    \  \"GREY\", \"GRID\",  \"GRIM\",  \"GRIN\",  \"GRIT\",  \"GROW\",\n\"GRUB\",\
    \  \"GULF\",  \"GULL\", \"GUNK\",  \"GURU\",  \"GUSH\",  \"GUST\",  \"GWEN\",\n\
    \"GWYN\",  \"HAAG\",  \"HAAS\", \"HACK\",  \"HAIL\",  \"HAIR\",  \"HALE\",  \"\
    HALF\",\n\"HALL\",  \"HALO\",  \"HALT\", \"HAND\",  \"HANG\",  \"HANK\",  \"HANS\"\
    ,  \"HARD\",\n\"HARK\",  \"HARM\",  \"HART\", \"HASH\",  \"HAST\",  \"HATE\",\
    \  \"HATH\",  \"HAUL\",\n\"HAVE\",  \"HAWK\",  \"HAYS\", \"HEAD\",  \"HEAL\",\
    \  \"HEAR\",  \"HEAT\",  \"HEBE\",\n\"HECK\",  \"HEED\",  \"HEEL\", \"HEFT\",\
    \  \"HELD\",  \"HELL\",  \"HELM\",  \"HERB\",\n\"HERD\",  \"HERE\",  \"HERO\"\
    , \"HERS\",  \"HESS\",  \"HEWN\",  \"HICK\",  \"HIDE\",\n\"HIGH\",  \"HIKE\",\
    \  \"HILL\", \"HILT\",  \"HIND\",  \"HINT\",  \"HIRE\",  \"HISS\",\n\"HIVE\",\
    \  \"HOBO\",  \"HOCK\", \"HOFF\",  \"HOLD\",  \"HOLE\",  \"HOLM\",  \"HOLT\",\n\
    \"HOME\",  \"HONE\",  \"HONK\", \"HOOD\",  \"HOOF\",  \"HOOK\",  \"HOOT\",  \"\
    HORN\",\n\"HOSE\",  \"HOST\",  \"HOUR\", \"HOVE\",  \"HOWE\",  \"HOWL\",  \"HOYT\"\
    ,  \"HUCK\",\n\"HUED\",  \"HUFF\",  \"HUGE\", \"HUGH\",  \"HUGO\",  \"HULK\",\
    \  \"HULL\",  \"HUNK\",\n\"HUNT\",  \"HURD\",  \"HURL\", \"HURT\",  \"HUSH\",\
    \  \"HYDE\",  \"HYMN\",  \"IBIS\",\n\"ICON\",  \"IDEA\",  \"IDLE\", \"IFFY\",\
    \  \"INCA\",  \"INCH\",  \"INTO\",  \"IONS\",\n\"IOTA\",  \"IOWA\",  \"IRIS\"\
    , \"IRMA\",  \"IRON\",  \"ISLE\",  \"ITCH\",  \"ITEM\",\n\"IVAN\",  \"JACK\",\
    \  \"JADE\", \"JAIL\",  \"JAKE\",  \"JANE\",  \"JAVA\",  \"JEAN\",\n\"JEFF\",\
    \  \"JERK\",  \"JESS\", \"JEST\",  \"JIBE\",  \"JILL\",  \"JILT\",  \"JIVE\",\n\
    \"JOAN\",  \"JOBS\",  \"JOCK\", \"JOEL\",  \"JOEY\",  \"JOHN\",  \"JOIN\",  \"\
    JOKE\",\n\"JOLT\",  \"JOVE\",  \"JUDD\", \"JUDE\",  \"JUDO\",  \"JUDY\",  \"JUJU\"\
    ,  \"JUKE\",\n\"JULY\",  \"JUNE\",  \"JUNK\", \"JUNO\",  \"JURY\",  \"JUST\",\
    \  \"JUTE\",  \"KAHN\",\n\"KALE\",  \"KANE\",  \"KANT\", \"KARL\",  \"KATE\",\
    \  \"KEEL\",  \"KEEN\",  \"KENO\",\n\"KENT\",  \"KERN\",  \"KERR\", \"KEYS\",\
    \  \"KICK\",  \"KILL\",  \"KIND\",  \"KING\",\n\"KIRK\",  \"KISS\",  \"KITE\"\
    , \"KLAN\",  \"KNEE\",  \"KNEW\",  \"KNIT\",  \"KNOB\",\n\"KNOT\",  \"KNOW\",\
    \  \"KOCH\", \"KONG\",  \"KUDO\",  \"KURD\",  \"KURT\",  \"KYLE\",\n\"LACE\",\
    \  \"LACK\",  \"LACY\", \"LADY\",  \"LAID\",  \"LAIN\",  \"LAIR\",  \"LAKE\",\n\
    \"LAMB\",  \"LAME\",  \"LAND\", \"LANE\",  \"LANG\",  \"LARD\",  \"LARK\",  \"\
    LASS\",\n\"LAST\",  \"LATE\",  \"LAUD\", \"LAVA\",  \"LAWN\",  \"LAWS\",  \"LAYS\"\
    ,  \"LEAD\",\n\"LEAF\",  \"LEAK\",  \"LEAN\", \"LEAR\",  \"LEEK\",  \"LEER\",\
    \  \"LEFT\",  \"LEND\",\n\"LENS\",  \"LENT\",  \"LEON\", \"LESK\",  \"LESS\",\
    \  \"LEST\",  \"LETS\",  \"LIAR\",\n\"LICE\",  \"LICK\",  \"LIED\", \"LIEN\",\
    \  \"LIES\",  \"LIEU\",  \"LIFE\",  \"LIFT\",\n\"LIKE\",  \"LILA\",  \"LILT\"\
    , \"LILY\",  \"LIMA\",  \"LIMB\",  \"LIME\",  \"LIND\",\n\"LINE\",  \"LINK\",\
    \  \"LINT\", \"LION\",  \"LISA\",  \"LIST\",  \"LIVE\",  \"LOAD\",\n\"LOAF\",\
    \  \"LOAM\",  \"LOAN\", \"LOCK\",  \"LOFT\",  \"LOGE\",  \"LOIS\",  \"LOLA\",\n\
    \"LONE\",  \"LONG\",  \"LOOK\", \"LOON\",  \"LOOT\",  \"LORD\",  \"LORE\",  \"\
    LOSE\",\n\"LOSS\",  \"LOST\",  \"LOUD\", \"LOVE\",  \"LOWE\",  \"LUCK\",  \"LUCY\"\
    ,  \"LUGE\",\n\"LUKE\",  \"LULU\",  \"LUND\", \"LUNG\",  \"LURA\",  \"LURE\",\
    \  \"LURK\",  \"LUSH\",\n\"LUST\",  \"LYLE\",  \"LYNN\", \"LYON\",  \"LYRA\",\
    \  \"MACE\",  \"MADE\",  \"MAGI\",\n\"MAID\",  \"MAIL\",  \"MAIN\", \"MAKE\",\
    \  \"MALE\",  \"MALI\",  \"MALL\",  \"MALT\",\n\"MANA\",  \"MANN\",  \"MANY\"\
    , \"MARC\",  \"MARE\",  \"MARK\",  \"MARS\",  \"MART\",\n\"MARY\",  \"MASH\",\
    \  \"MASK\", \"MASS\",  \"MAST\",  \"MATE\",  \"MATH\",  \"MAUL\",\n\"MAYO\",\
    \  \"MEAD\",  \"MEAL\", \"MEAN\",  \"MEAT\",  \"MEEK\",  \"MEET\",  \"MELD\",\n\
    \"MELT\",  \"MEMO\",  \"MEND\", \"MENU\",  \"MERT\",  \"MESH\",  \"MESS\",  \"\
    MICE\",\n\"MIKE\",  \"MILD\",  \"MILE\", \"MILK\",  \"MILL\",  \"MILT\",  \"MIMI\"\
    ,  \"MIND\",\n\"MINE\",  \"MINI\",  \"MINK\", \"MINT\",  \"MIRE\",  \"MISS\",\
    \  \"MIST\",  \"MITE\",\n\"MITT\",  \"MOAN\",  \"MOAT\", \"MOCK\",  \"MODE\",\
    \  \"MOLD\",  \"MOLE\",  \"MOLL\",\n\"MOLT\",  \"MONA\",  \"MONK\", \"MONT\",\
    \  \"MOOD\",  \"MOON\",  \"MOOR\",  \"MOOT\",\n\"MORE\",  \"MORN\",  \"MORT\"\
    , \"MOSS\",  \"MOST\",  \"MOTH\",  \"MOVE\",  \"MUCH\",\n\"MUCK\",  \"MUDD\",\
    \  \"MUFF\", \"MULE\",  \"MULL\",  \"MURK\",  \"MUSH\",  \"MUST\",\n\"MUTE\",\
    \  \"MUTT\",  \"MYRA\", \"MYTH\",  \"NAGY\",  \"NAIL\",  \"NAIR\",  \"NAME\",\n\
    \"NARY\",  \"NASH\",  \"NAVE\", \"NAVY\",  \"NEAL\",  \"NEAR\",  \"NEAT\",  \"\
    NECK\",\n\"NEED\",  \"NEIL\",  \"NELL\", \"NEON\",  \"NERO\",  \"NESS\",  \"NEST\"\
    ,  \"NEWS\",\n\"NEWT\",  \"NIBS\",  \"NICE\", \"NICK\",  \"NILE\",  \"NINA\",\
    \  \"NINE\",  \"NOAH\",\n\"NODE\",  \"NOEL\",  \"NOLL\", \"NONE\",  \"NOOK\",\
    \  \"NOON\",  \"NORM\",  \"NOSE\",\n\"NOTE\",  \"NOUN\",  \"NOVA\", \"NUDE\",\
    \  \"NULL\",  \"NUMB\",  \"OATH\",  \"OBEY\",\n\"OBOE\",  \"ODIN\",  \"OHIO\"\
    , \"OILY\",  \"OINT\",  \"OKAY\",  \"OLAF\",  \"OLDY\",\n\"OLGA\",  \"OLIN\",\
    \  \"OMAN\", \"OMEN\",  \"OMIT\",  \"ONCE\",  \"ONES\",  \"ONLY\",\n\"ONTO\",\
    \  \"ONUS\",  \"ORAL\", \"ORGY\",  \"OSLO\",  \"OTIS\",  \"OTTO\",  \"OUCH\",\n\
    \"OUST\",  \"OUTS\",  \"OVAL\", \"OVEN\",  \"OVER\",  \"OWLY\",  \"OWNS\",  \"\
    QUAD\",\n\"QUIT\",  \"QUOD\",  \"RACE\", \"RACK\",  \"RACY\",  \"RAFT\",  \"RAGE\"\
    ,  \"RAID\",\n\"RAIL\",  \"RAIN\",  \"RAKE\", \"RANK\",  \"RANT\",  \"RARE\",\
    \  \"RASH\",  \"RATE\",\n\"RAVE\",  \"RAYS\",  \"READ\", \"REAL\",  \"REAM\",\
    \  \"REAR\",  \"RECK\",  \"REED\",\n\"REEF\",  \"REEK\",  \"REEL\", \"REID\",\
    \  \"REIN\",  \"RENA\",  \"REND\",  \"RENT\",\n\"REST\",  \"RICE\",  \"RICH\"\
    , \"RICK\",  \"RIDE\",  \"RIFT\",  \"RILL\",  \"RIME\",\n\"RING\",  \"RINK\",\
    \  \"RISE\", \"RISK\",  \"RITE\",  \"ROAD\",  \"ROAM\",  \"ROAR\",\n\"ROBE\",\
    \  \"ROCK\",  \"RODE\", \"ROIL\",  \"ROLL\",  \"ROME\",  \"ROOD\",  \"ROOF\",\n\
    \"ROOK\",  \"ROOM\",  \"ROOT\", \"ROSA\",  \"ROSE\",  \"ROSS\",  \"ROSY\",  \"\
    ROTH\",\n\"ROUT\",  \"ROVE\",  \"ROWE\", \"ROWS\",  \"RUBE\",  \"RUBY\",  \"RUDE\"\
    ,  \"RUDY\",\n\"RUIN\",  \"RULE\",  \"RUNG\", \"RUNS\",  \"RUNT\",  \"RUSE\",\
    \  \"RUSH\",  \"RUSK\",\n\"RUSS\",  \"RUST\",  \"RUTH\", \"SACK\",  \"SAFE\",\
    \  \"SAGE\",  \"SAID\",  \"SAIL\",\n\"SALE\",  \"SALK\",  \"SALT\", \"SAME\",\
    \  \"SAND\",  \"SANE\",  \"SANG\",  \"SANK\",\n\"SARA\",  \"SAUL\",  \"SAVE\"\
    , \"SAYS\",  \"SCAN\",  \"SCAR\",  \"SCAT\",  \"SCOT\",\n\"SEAL\",  \"SEAM\",\
    \  \"SEAR\", \"SEAT\",  \"SEED\",  \"SEEK\",  \"SEEM\",  \"SEEN\",\n\"SEES\",\
    \  \"SELF\",  \"SELL\", \"SEND\",  \"SENT\",  \"SETS\",  \"SEWN\",  \"SHAG\",\n\
    \"SHAM\",  \"SHAW\",  \"SHAY\", \"SHED\",  \"SHIM\",  \"SHIN\",  \"SHOD\",  \"\
    SHOE\",\n\"SHOT\",  \"SHOW\",  \"SHUN\", \"SHUT\",  \"SICK\",  \"SIDE\",  \"SIFT\"\
    ,  \"SIGH\",\n\"SIGN\",  \"SILK\",  \"SILL\", \"SILO\",  \"SILT\",  \"SINE\",\
    \  \"SING\",  \"SINK\",\n\"SIRE\",  \"SITE\",  \"SITS\", \"SITU\",  \"SKAT\",\
    \  \"SKEW\",  \"SKID\",  \"SKIM\",\n\"SKIN\",  \"SKIT\",  \"SLAB\", \"SLAM\",\
    \  \"SLAT\",  \"SLAY\",  \"SLED\",  \"SLEW\",\n\"SLID\",  \"SLIM\",  \"SLIT\"\
    , \"SLOB\",  \"SLOG\",  \"SLOT\",  \"SLOW\",  \"SLUG\",\n\"SLUM\",  \"SLUR\",\
    \  \"SMOG\", \"SMUG\",  \"SNAG\",  \"SNOB\",  \"SNOW\",  \"SNUB\",\n\"SNUG\",\
    \  \"SOAK\",  \"SOAR\", \"SOCK\",  \"SODA\",  \"SOFA\",  \"SOFT\",  \"SOIL\",\n\
    \"SOLD\",  \"SOME\",  \"SONG\", \"SOON\",  \"SOOT\",  \"SORE\",  \"SORT\",  \"\
    SOUL\",\n\"SOUR\",  \"SOWN\",  \"STAB\", \"STAG\",  \"STAN\",  \"STAR\",  \"STAY\"\
    ,  \"STEM\",\n\"STEW\",  \"STIR\",  \"STOW\", \"STUB\",  \"STUN\",  \"SUCH\",\
    \  \"SUDS\",  \"SUIT\",\n\"SULK\",  \"SUMS\",  \"SUNG\", \"SUNK\",  \"SURE\",\
    \  \"SURF\",  \"SWAB\",  \"SWAG\",\n\"SWAM\",  \"SWAN\",  \"SWAT\", \"SWAY\",\
    \  \"SWIM\",  \"SWUM\",  \"TACK\",  \"TACT\",\n\"TAIL\",  \"TAKE\",  \"TALE\"\
    , \"TALK\",  \"TALL\",  \"TANK\",  \"TASK\",  \"TATE\",\n\"TAUT\",  \"TEAL\",\
    \  \"TEAM\", \"TEAR\",  \"TECH\",  \"TEEM\",  \"TEEN\",  \"TEET\",\n\"TELL\",\
    \  \"TEND\",  \"TENT\", \"TERM\",  \"TERN\",  \"TESS\",  \"TEST\",  \"THAN\",\n\
    \"THAT\",  \"THEE\",  \"THEM\", \"THEN\",  \"THEY\",  \"THIN\",  \"THIS\",  \"\
    THUD\",\n\"THUG\",  \"TICK\",  \"TIDE\", \"TIDY\",  \"TIED\",  \"TIER\",  \"TILE\"\
    ,  \"TILL\",\n\"TILT\",  \"TIME\",  \"TINA\", \"TINE\",  \"TINT\",  \"TINY\",\
    \  \"TIRE\",  \"TOAD\",\n\"TOGO\",  \"TOIL\",  \"TOLD\", \"TOLL\",  \"TONE\",\
    \  \"TONG\",  \"TONY\",  \"TOOK\",\n\"TOOL\",  \"TOOT\",  \"TORE\", \"TORN\",\
    \  \"TOTE\",  \"TOUR\",  \"TOUT\",  \"TOWN\",\n\"TRAG\",  \"TRAM\",  \"TRAY\"\
    , \"TREE\",  \"TREK\",  \"TRIG\",  \"TRIM\",  \"TRIO\",\n\"TROD\",  \"TROT\",\
    \  \"TROY\", \"TRUE\",  \"TUBA\",  \"TUBE\",  \"TUCK\",  \"TUFT\",\n\"TUNA\",\
    \  \"TUNE\",  \"TUNG\", \"TURF\",  \"TURN\",  \"TUSK\",  \"TWIG\",  \"TWIN\",\n\
    \"TWIT\",  \"ULAN\",  \"UNIT\", \"URGE\",  \"USED\",  \"USER\",  \"USES\",  \"\
    UTAH\",\n\"VAIL\",  \"VAIN\",  \"VALE\", \"VARY\",  \"VASE\",  \"VAST\",  \"VEAL\"\
    ,  \"VEDA\",\n\"VEIL\",  \"VEIN\",  \"VEND\", \"VENT\",  \"VERB\",  \"VERY\",\
    \  \"VETO\",  \"VICE\",\n\"VIEW\",  \"VINE\",  \"VISE\", \"VOID\",  \"VOLT\",\
    \  \"VOTE\",  \"WACK\",  \"WADE\",\n\"WAGE\",  \"WAIL\",  \"WAIT\", \"WAKE\",\
    \  \"WALE\",  \"WALK\",  \"WALL\",  \"WALT\",\n\"WAND\",  \"WANE\",  \"WANG\"\
    , \"WANT\",  \"WARD\",  \"WARM\",  \"WARN\",  \"WART\",\n\"WASH\",  \"WAST\",\
    \  \"WATS\", \"WATT\",  \"WAVE\",  \"WAVY\",  \"WAYS\",  \"WEAK\",\n\"WEAL\",\
    \  \"WEAN\",  \"WEAR\", \"WEED\",  \"WEEK\",  \"WEIR\",  \"WELD\",  \"WELL\",\n\
    \"WELT\",  \"WENT\",  \"WERE\", \"WERT\",  \"WEST\",  \"WHAM\",  \"WHAT\",  \"\
    WHEE\",\n\"WHEN\",  \"WHET\",  \"WHOA\", \"WHOM\",  \"WICK\",  \"WIFE\",  \"WILD\"\
    ,  \"WILL\",\n\"WIND\",  \"WINE\",  \"WING\", \"WINK\",  \"WINO\",  \"WIRE\",\
    \  \"WISE\",  \"WISH\",\n\"WITH\",  \"WOLF\",  \"WONT\", \"WOOD\",  \"WOOL\",\
    \  \"WORD\",  \"WORE\",  \"WORK\",\n\"WORM\",  \"WORN\",  \"WOVE\", \"WRIT\",\
    \  \"WYNN\",  \"YALE\",  \"YANG\",  \"YANK\",\n\"YARD\",  \"YARN\",  \"YAWL\"\
    , \"YAWN\",  \"YEAH\",  \"YEAR\",  \"YELL\",  \"YOGA\",\n\"YOKE\"            \
    \             };\n"
