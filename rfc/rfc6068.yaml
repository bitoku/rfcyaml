- title: __initial_text__
  contents:
  - '                        The ''mailto'' URI Scheme

    '
- title: Abstract
  contents:
  - "Abstract\n   This document defines the format of Uniform Resource Identifiers\n\
    \   (URIs) to identify resources that are reached using Internet mail.\n   It\
    \ adds better internationalization and compatibility with\n   Internationalized\
    \ Resource Identifiers (IRIs; RFC 3987) to the\n   previous syntax of 'mailto'\
    \ URIs (RFC 2368).\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6068.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2010 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n   This document\
    \ may contain material from IETF Documents or IETF\n   Contributions published\
    \ or made publicly available before November\n   10, 2008.  The person(s) controlling\
    \ the copyright in some of this\n   material may not have granted the IETF Trust\
    \ the right to allow\n   modifications of such material outside the IETF Standards\
    \ Process.\n   Without obtaining an adequate license from the person(s) controlling\n\
    \   the copyright in such materials, this document may not be modified\n   outside\
    \ the IETF Standards Process, and derivative works of it may\n   not be created\
    \ outside the IETF Standards Process, except to format\n   it for publication\
    \ as an RFC or to translate it into languages other\n   than English.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  3\n   2.  Syntax of a 'mailto' URI . . . . . . . . . . . . . .\
    \ . . . . .  3\n   3.  Semantics and Operations . . . . . . . . . . . . . . .\
    \ . . . .  7\n   4.  Unsafe Header Fields . . . . . . . . . . . . . . . . . .\
    \ . . .  7\n   5.  Encoding . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . .  8\n   6.  Examples . . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ .  9\n     6.1.  Basic Examples . . . . . . . . . . . . . . . . . . . . . .\
    \  9\n     6.2.  Examples of Complicated Email Addresses  . . . . . . . . . 10\n\
    \     6.3.  Examples Using UTF-8-Based Percent-Encoding  . . . . . . . 11\n  \
    \ 7.  Security Considerations  . . . . . . . . . . . . . . . . . . . 12\n   8.\
    \  IANA Considerations  . . . . . . . . . . . . . . . . . . . . . 14\n     8.1.\
    \  Update of the Registration of the 'mailto' URI Scheme  . . 14\n     8.2.  Registration\
    \ of the Body Header Field  . . . . . . . . . . 15\n   9.  Main Changes from RFC\
    \ 2368 . . . . . . . . . . . . . . . . . . 15\n   10. Acknowledgments  . . . .\
    \ . . . . . . . . . . . . . . . . . . . 15\n   11. References . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . . 16\n     11.1. Normative References . .\
    \ . . . . . . . . . . . . . . . . . 16\n     11.2. Informative References . .\
    \ . . . . . . . . . . . . . . . . 17\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The 'mailto' URI scheme is used to identify resources that\
    \ are\n   reached using Internet mail.  In its simplest form, a 'mailto' URI\n\
    \   contains an Internet mail address.  For interactions that require\n   message\
    \ headers or message bodies to be specified, the 'mailto' URI\n   scheme also\
    \ allows providing mail header fields and the message body.\n   This specification\
    \ extends the previous scheme definition to also\n   allow character data to be\
    \ percent-encoded based on UTF-8 [STD63],\n   which offers a better and more consistent\
    \ way of dealing with non-\n   ASCII characters for internationalization.\n  \
    \ This specification does not address the needs of the ongoing Email\n   Address\
    \ Internationalization effort (see [RFC4952]).  In particular,\n   this specification\
    \ does not include syntax for fallback addresses.\n   The key words \"MUST\",\
    \ \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD\
    \ NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this\n   document are to\
    \ be interpreted as described in [RFC2119].\n   In this document, URIs are enclosed\
    \ in '<' and '>' as described in\n   Appendix C of [STD66].  Extra whitespace\
    \ and line breaks are added to\n   present long URIs -- they are not part of the\
    \ actual URI.\n"
- title: 2.  Syntax of a 'mailto' URI
  contents:
  - "2.  Syntax of a 'mailto' URI\n   The syntax of a 'mailto' URI is described using\
    \ the ABNF of [STD68],\n   non-terminal definitions from [RFC5322] (dot-atom-text,\
    \ quoted-\n   string), and non-terminal definitions from [STD66] (unreserved,\
    \ pct-\n   encoded):\n      mailtoURI    = \"mailto:\" [ to ] [ hfields ]\n  \
    \    to           = addr-spec *(\",\" addr-spec )\n      hfields      = \"?\"\
    \ hfield *( \"&\" hfield )\n      hfield       = hfname \"=\" hfvalue\n      hfname\
    \       = *qchar\n      hfvalue      = *qchar\n      addr-spec    = local-part\
    \ \"@\" domain\n      local-part   = dot-atom-text / quoted-string\n      domain\
    \       = dot-atom-text / \"[\" *dtext-no-obs \"]\"\n      dtext-no-obs = %d33-90\
    \ / ; Printable US-ASCII\n                     %d94-126  ; characters not including\n\
    \                               ; \"[\", \"]\", or \"\\\"\n      qchar       \
    \ = unreserved / pct-encoded / some-delims\n      some-delims  = \"!\" / \"$\"\
    \ / \"'\" / \"(\" / \")\" / \"*\"\n                   / \"+\" / \",\" / \";\"\
    \ / \":\" / \"@\"\n   <addr-spec> is a mail address as specified in [RFC5322],\
    \ but\n   excluding <comment> from [RFC5322].  However, the following changes\n\
    \   apply:\n   1.  A number of characters that can appear in <addr-spec> MUST\
    \ be\n       percent-encoded.  These are the characters that cannot appear in\n\
    \       a URI according to [STD66] as well as \"%\" (because it is used for\n\
    \       percent-encoding) and all the characters in gen-delims except \"@\"\n\
    \       and \":\" (i.e., \"/\", \"?\", \"#\", \"[\", and \"]\").  Of the characters\n\
    \       in sub-delims, at least the following also have to be percent-\n     \
    \  encoded: \"&\", \";\", and \"=\".  Care has to be taken both when\n       encoding\
    \ as well as when decoding to make sure these operations\n       are applied only\
    \ once.\n   2.  <obs-local-part> and <NO-WS-CTL> as defined in [RFC5322] MUST\
    \ NOT\n       be used.\n   3.  Whitespace and comments within <local-part> and\
    \ <domain> MUST NOT\n       be used.  They would not have any operational semantics.\n\
    \   4.  Percent-encoding can be used in the <domain> part of an\n       <addr-spec>\
    \ in order to denote an internationalized domain name.\n       The considerations\
    \ for <reg-name> in [STD66] apply.  In\n       particular, non-ASCII characters\
    \ MUST first be encoded according\n       to UTF-8 [STD63], and then each octet\
    \ of the corresponding UTF-8\n       sequence MUST be percent-encoded to be represented\
    \ as URI\n       characters.  URI-producing applications MUST NOT use\n      \
    \ percent-encoding in domain names unless it is used to represent a\n       UTF-8\
    \ character sequence.  When the internationalized domain name\n       is used\
    \ to compose a message, the name MUST be transformed to the\n       Internationalizing\
    \ Domain Names in Applications (IDNA) encoding\n       [RFC5891] where appropriate.\
    \  URI producers SHOULD provide these\n       domain names in the IDNA encoding,\
    \ rather than percent-encoded,\n       if they wish to maximize interoperability\
    \ with legacy 'mailto'\n       URI interpreters.\n   5.  Percent-encoding of non-ASCII\
    \ octets in the <local-part> of an\n       <addr-spec> is reserved for the internationalization\
    \ of the\n       <local-part>.  Non-ASCII characters MUST first be encoded\n \
    \      according to UTF-8 [STD63], and then each octet of the\n       corresponding\
    \ UTF-8 sequence MUST be percent-encoded to be\n       represented as URI characters.\
    \  Any other percent-encoding of\n       non-ASCII characters is prohibited. \
    \ When a <local-part>\n       containing non-ASCII characters will be used to\
    \ compose a\n       message, the <local-part> MUST be transformed to conform to\n\
    \       whatever encoding may be defined in a future specification for\n     \
    \  the internationalization of email addresses.\n   <hfname> and <hfvalue> are\
    \ encodings of an [RFC5322] header field\n   name and value, respectively.  Percent-encoding\
    \ is needed for the\n   same characters as listed above for <addr-spec>. <hfname>\
    \ is case-\n   insensitive, but <hfvalue> in general is case-sensitive.  Note\
    \ that\n   [RFC5322] allows all US-ASCII printable characters except \":\" in\n\
    \   optional header field names (Section 3.6.8), which is the reason why\n   <pct-encoded>\
    \ is part of the header field name production.\n   The special <hfname> \"body\"\
    \ indicates that the associated <hfvalue>\n   is the body of the message.  The\
    \ \"body\" field value is intended to\n   contain the content for the first text/plain\
    \ body part of the\n   message.  The \"body\" pseudo header field is primarily\
    \ intended for\n   the generation of short text messages for automatic processing\
    \ (such\n   as \"subscribe\" messages for mailing lists), not for general MIME\n\
    \   bodies.  Except for the encoding of characters based on UTF-8 and\n   percent-encoding,\
    \ no additional encoding (such as e.g., base64 or\n   quoted-printable; see [RFC2045])\
    \ is used for the \"body\" field value.\n   As a consequence, header fields related\
    \ to message encoding (e.g.,\n   Content-Transfer-Encoding) in a 'mailto' URI\
    \ are irrelevant and MUST\n   be ignored.  The \"body\" pseudo header field name\
    \ has been registered\n   with IANA for this special purpose (see Section 8.2).\n\
    \   Within 'mailto' URIs, the characters \"?\", \"=\", and \"&\" are reserved,\n\
    \   serving as delimiters.  They have to be escaped (as \"%3F\", \"%3D\", and\n\
    \   \"%26\", respectively) when not serving as delimiters.\n   Additional restrictions\
    \ on what characters are allowed might apply\n   depending on the context where\
    \ the URI is used.  Such restrictions\n   can be addressed by context-specific\
    \ escaping mechanisms.  For\n   example, because the \"&\" (ampersand) character\
    \ is reserved in HTML\n   and XML, any 'mailto' URI that contains an ampersand\
    \ has to be\n   written with an HTML/XML entity (\"&amp;\") or numeric character\n\
    \   reference (\"&#x26;\" or \"&#38;\").\n   Non-ASCII characters can be encoded\
    \ in <hfvalue> as follows:\n   1.  MIME encoded words (as defined in [RFC2047])\
    \ are permitted in\n       header field values, but not in an <hfvalue> of a \"\
    body\"\n       <hfname>.  Sequences of characters that look like MIME encoded\n\
    \       words can appear in an <hfvalue> of a \"body\" <hfname>, but in\n    \
    \   that case have no special meaning.  Please note that the '=' and\n       '?'\
    \ characters used as delimiters in MIME encoded words have to\n       be percent-encoded.\
    \  Also note that the use of MIME encoded words\n       differs slightly for so-called\
    \ structured and unstructured header\n       fields.\n   2.  Non-ASCII characters\
    \ can be encoded according to UTF-8 [STD63],\n       and then each octet of the\
    \ corresponding UTF-8 sequence is\n       percent-encoded to be represented as\
    \ URI characters.  When header\n       field values encoded in this way are used\
    \ to compose a message,\n       the <hfvalue> has to be suitably encoded (transformed\
    \ into MIME\n       encoded words [RFC2047]), except for an <hfvalue> of a \"\
    body\"\n       <hfname>, which has to be encoded according to [RFC2045].  Please\n\
    \       note that for MIME encoded words and for bodies in composed email\n  \
    \     messages, encodings other than UTF-8 MAY be used as long as the\n      \
    \ characters are properly transcoded.\n   Also note that it is syntactically valid\
    \ to specify both <to> and an\n   <hfname> whose value is \"to\".  That is,\n\
    \   <mailto:addr1@an.example,addr2@an.example>\n   is equivalent to\n   <mailto:?to=addr1@an.example,addr2@an.example>\n\
    \   is equivalent to\n   <mailto:addr1@an.example?to=addr2@an.example>\n   However,\
    \ the latter form is NOT RECOMMENDED because different user\n   agents handle\
    \ this case differently.  In particular, some existing\n   clients ignore \"to\"\
    \ <hfvalue>s.\n   Implementations MUST NOT produce two \"To:\" header fields in\
    \ a\n   message; the \"To:\" header field may occur at most once in a message\n\
    \   ([RFC5322], Section 3.6).  Also, creators of 'mailto' URIs MUST NOT\n   include\
    \ other message header fields multiple times if these header\n   fields can only\
    \ be used once in a message.\n   To avoid interoperability problems, creators\
    \ of 'mailto' URIs SHOULD\n   NOT use the same <hfname> multiple times in the\
    \ same URI.  If the\n   same <hfname> appears multiple times in a URI, behavior\
    \ varies widely\n   for different user agents, and for each <hfname>.  Examples\
    \ include\n   using only the first or last <hfname>/<hfvalue> pair, creating\n\
    \   multiple header fields, and combining each <hfvalue> by simple\n   concatenation\
    \ or in a way appropriate for the corresponding header\n   field.\n   Note that\
    \ this specification, like any URI scheme specification, does\n   not define syntax\
    \ or meaning of a fragment identifier (see [STD66]),\n   because these depend\
    \ on the type of a retrieved representation.  In\n   the currently known usage\
    \ scenarios, a 'mailto' URI cannot be used to\n   retrieve such representations.\
    \  Therefore, fragment identifiers are\n   meaningless, SHOULD NOT be used on\
    \ 'mailto' URIs, and SHOULD be\n   ignored upon resolution.  The character \"\
    #\" in <hfvalue>s MUST be\n   escaped as %23.\n"
- title: 3.  Semantics and Operations
  contents:
  - "3.  Semantics and Operations\n   A 'mailto' URI designates an \"Internet resource\"\
    , which is the\n   mailbox specified in the address.  When additional header fields\
    \ are\n   supplied, the resource designated is the same address but with an\n\
    \   additional profile for accessing the resource.  While there are\n   Internet\
    \ resources that can only be accessed via electronic mail, the\n   'mailto' URI\
    \ is not intended as a way of retrieving such objects\n   automatically.\n   The\
    \ operation of how any URI scheme is resolved is not mandated by\n   the URI specifications.\
    \  In current practice, resolving URIs such as\n   those in the 'http' URI scheme\
    \ causes an immediate interaction\n   between client software and a host running\
    \ an interactive server.\n   The 'mailto' URI has unusual semantics because resolving\
    \ such a URI\n   does not cause an immediate interaction with a server.  Instead,\
    \ the\n   client creates a message to the designated address with the various\n\
    \   header fields set as default.  The user can edit the message, send\n   the\
    \ message unedited, or choose not to send the message.\n   The <hfname>/<hfvalue>\
    \ pairs in a 'mailto' URI, although\n   syntactically equivalent to header fields\
    \ in a mail message, do not\n   directly correspond to the header fields in a\
    \ mail message.  In\n   particular, the To, Cc, and Bcc <hfvalue>s don't necessarily\
    \ result\n   in a header field containing the specified value.  Mail client\n\
    \   software MAY eliminate duplicate addresses.  Creators of 'mailto'\n   URIs\
    \ SHOULD avoid using the same address twice in a 'mailto' URI.\n   Originator\
    \ fields like From and Date, fields related to routing\n   (Apparently-To, Resent-*,\
    \ etc.), trace fields, and MIME header fields\n   (MIME-Version, Content-*), when\
    \ present in the URI, MUST be ignored.\n   The mail client MUST create new fields\
    \ when necessary, as it would\n   for any new message.  Unrecognized header fields\
    \ and header fields\n   with values inconsistent with those the mail client would\
    \ normally\n   send SHOULD be treated as especially suspect.  For example, there\
    \ may\n   be header fields that are totally safe but not known to the MUA, so\n\
    \   the MUA MAY choose to show them to the user.\n"
- title: 4.  Unsafe Header Fields
  contents:
  - "4.  Unsafe Header Fields\n   The user agent interpreting a 'mailto' URI SHOULD\
    \ NOT create a\n   message if any of the header fields are considered dangerous;\
    \ it MAY\n   also choose to create a message with only a subset of the header\n\
    \   fields given in the URI.  Only a limited set of header fields such as\n  \
    \ Subject and Keywords, as well as Body, are believed to be both safe\n   and\
    \ useful in the general case.  In cases where the source of a URI\n   is well\
    \ known, and/or specific header fields are limited to specific\n   well-known\
    \ values, other header fields MAY be considered safe, too.\n   The creator of\
    \ a 'mailto' URI cannot expect the resolver of a URI to\n   understand more than\
    \ the \"subject\" header field and \"body\".  Clients\n   that resolve 'mailto'\
    \ URIs into mail messages MUST be able to\n   correctly create [RFC5322]-compliant\
    \ mail messages using the\n   \"subject\" header field and \"body\".\n"
- title: 5.  Encoding
  contents:
  - "5.  Encoding\n   [STD66] requires that many characters in URIs be encoded.  This\n\
    \   affects the 'mailto' URI scheme for some common characters that might\n  \
    \ appear in addresses, header fields, or message contents.  One such\n   character\
    \ is space (\" \", ASCII hex 20).  Note the examples below that\n   use \"%20\"\
    \ for space in the message body.  Also note that line breaks\n   in the body of\
    \ a message MUST be encoded with \"%0D%0A\".\n   Implementations MAY add a final\
    \ line break to the body of a message\n   even if there is no trailing \"%0D%0A\"\
    \ in the body <hfield> of the\n   'mailto' URI.  Line breaks in other <hfield>s\
    \ SHOULD NOT be used.\n   When creating 'mailto' URIs, any reserved characters\
    \ that are used in\n   the URIs MUST be encoded so that properly written URI interpreters\n\
    \   can read them.  Also, client software that reads URIs MUST decode\n   strings\
    \ before creating the mail message so that the mail message\n   appears in a form\
    \ that the recipient software will understand.  These\n   strings SHOULD be decoded\
    \ before showing the message to the sending\n   user.\n   Software creating 'mailto'\
    \ URIs likewise has to be careful to encode\n   any reserved characters that are\
    \ used.  HTML forms are one kind of\n   software that creates 'mailto' URIs. \
    \ Current implementations encode\n   a space as '+', but this creates problems\
    \ because such a '+' standing\n   for a space cannot be distinguished from a real\
    \ '+' in a 'mailto'\n   URI.  When producing 'mailto' URIs, all spaces SHOULD\
    \ be encoded as\n   %20, and '+' characters MAY be encoded as %2B.  Please note\
    \ that '+'\n   characters are frequently used as part of an email address to\n\
    \   indicate a subaddress, as for example in <bill+ietf@example.org>.\n   The\
    \ 'mailto' URI scheme is limited in that it does not provide for\n   substitution\
    \ of variables.  Thus, it is impossible to create a\n   'mailto' URI that includes\
    \ a user's email address in the message\n   body.  This limitation also prevents\
    \ 'mailto' URIs that are signed\n   with public keys and other such variable information.\n"
- title: 6.  Examples
  contents:
  - '6.  Examples

    '
- title: 6.1.  Basic Examples
  contents:
  - "6.1.  Basic Examples\n   A URI for an ordinary individual mailing address:\n\
    \   <mailto:chris@example.com>\n   A URI for a mail response system that requires\
    \ the name of the file\n   to be sent back in the subject:\n   <mailto:infobot@example.com?subject=current-issue>\n\
    \   A mail response system that requires a \"send\" request in the body:\n   <mailto:infobot@example.com?body=send%20current-issue>\n\
    \   A similar URI, with two lines with different \"send\" requests (in this\n\
    \   case, \"send current-issue\" and, on the next line, \"send index\"):\n   <mailto:infobot@\n\
    \   example.com?body=send%20current-issue%0D%0Asend%20index>\n   An interesting\
    \ use of 'mailto' URIs occurs when browsing archives of\n   messages.  A link\
    \ can be provided that allows replying to a message\n   and conserving threading\
    \ information.  This is done by adding an\n   In-Reply-To header field containing\
    \ the Message-ID of the message\n   where the link is added, for example:\n  \
    \ <mailto:list@example.org?In-Reply-To=%3C3469A91.D10AF4C@\n   example.com%3E>\n\
    \   A request to subscribe to a mailing list:\n   <mailto:majordomo@example.com?body=subscribe%20bamboo-l>\n\
    \   A URI that is for a single user and that includes a CC of another\n   user:\n\
    \   <mailto:joe@example.com?cc=bob@example.com&body=hello>\n   Note the use of\
    \ the \"&\" reserved character above.  The following\n   example, using \"?\"\
    \ twice, is incorrect:\n   <mailto:joe@example.com?cc=bob@example.com?body=hello>\
    \ ; WRONG!\n   According to [RFC5322], the characters \"?\", \"&\", and even \"\
    %\" may\n   occur in addr-specs.  The fact that they are reserved characters is\n\
    \   not a problem: those characters may appear in 'mailto' URIs -- they\n   just\
    \ may not appear in unencoded form.  The standard URI encoding\n   mechanisms\
    \ (\"%\" followed by a two-digit hex number) MUST be used in\n   these cases.\n\
    \   To indicate the address \"gorby%kremvax@example.com\" one would use:\n   <mailto:gorby%25kremvax@example.com>\n\
    \   To indicate the address \"unlikely?address@example.com\", and include\n  \
    \ another header field, one would use:\n   <mailto:unlikely%3Faddress@example.com?blat=foop>\n\
    \   As described above, the \"&\" (ampersand) character is reserved in HTML\n\
    \   and has to be replaced, e.g., with \"&amp;\".  Thus, a URI with an\n   internal\
    \ ampersand might look like:\n   Click\n   <a href=\"mailto:joe@an.example?cc=bob@an.example&amp;body=hello\"\
    \n   >mailto:joe@an.example?cc=bob@an.example&amp;body=hello</a> to send a\n \
    \  greeting message to Joe and Bob.\n   When an email address itself includes\
    \ an \"&\" (ampersand) character,\n   that character has to be percent-encoded.\
    \  For example, the 'mailto'\n   URI to send mail to \"Mike&family@example.org\"\
    \ is\n   <mailto:Mike%26family@example.org>.\n"
- title: 6.2.  Examples of Complicated Email Addresses
  contents:
  - "6.2.  Examples of Complicated Email Addresses\n   Following are a few examples\
    \ of how to treat email addresses that\n   contain complicated escaping syntax.\n\
    \   Email address: \"not@me\"@example.org; corresponding 'mailto' URI:\n   <mailto:%22not%40me%22@example.org>.\n\
    \   Email address: \"oh\\\\no\"@example.org; corresponding 'mailto' URI:\n   <mailto:%22oh%5C%5Cno%22@example.org>.\n\
    \   Email address: \"\\\\\\\"it's\\ ugly\\\\\\\"\"@example.org; corresponding\n\
    \   'mailto' URI:\n   <mailto:%22%5C%5C%5C%22it's%5C%20ugly%5C%5C%5C%22%22@example.org>.\n"
- title: 6.3.  Examples Using UTF-8-Based Percent-Encoding
  contents:
  - "6.3.  Examples Using UTF-8-Based Percent-Encoding\n   Sending a mail with the\
    \ subject \"coffee\" in French, i.e., \"cafe\"\n   where the final e is an e-acute,\
    \ using UTF-8 and percent-encoding:\n   <mailto:user@example.org?subject=caf%C3%A9>\n\
    \   The same subject, this time using an encoded-word (escaping the \"=\"\n  \
    \ and \"?\" characters used in the encoded-word syntax, because they are\n   reserved):\n\
    \   <mailto:user@\n   example.org?subject=%3D%3Futf-8%3FQ%3Fcaf%3DC3%3DA9%3F%3D>\n\
    \   The same subject, this time encoded as iso-8859-1:\n   <mailto:user@\n   example.org?subject=%3D%3Fiso-8859-1%3FQ%3Fcaf%3DE9%3F%3D>\n\
    \   Going back to straight UTF-8 and adding a body with the same value:\n   <mailto:user@example.org?subject=caf%C3%A9&body=caf%C3%A9>\n\
    \   This 'mailto' URI may result in a message looking like this:\n      From:\
    \ sender@example.net\n      To: user@example.org\n      Subject: =?utf-8?Q?caf=C3=A9?=\n\
    \      Content-Type: text/plain;charset=utf-8\n      Content-Transfer-Encoding:\
    \ quoted-printable\n      caf=C3=A9\n   The software sending the email is not\
    \ restricted to UTF-8, but can\n   use other encodings.  The following shows the\
    \ same email using\n   iso-8859-1 two times:\n      From: sender@example.net\n\
    \      To: user@example.org\n      Subject: =?iso-8859-1?Q?caf=E9?=\n      Content-Type:\
    \ text/plain;charset=iso-8859-1\n      Content-Transfer-Encoding: quoted-printable\n\
    \      caf=E9\n   Different content transfer encodings (i.e., \"8bit\" or \"base64\"\
    \n   instead of \"quoted-printable\") and different encodings in encoded\n   words\
    \ (i.e., \"B\" instead of \"Q\") can also be used.\n   For more examples of encoding\
    \ the word coffee in different languages,\n   see [RFC2324].\n   The following\
    \ example uses the Japanese word \"natto\" (Unicode\n   characters U+7D0D U+8C46)\
    \ as a domain name label, sending a mail to a\n   user at \"natto\".example.org:\n\
    \   <mailto:user@%E7%B4%8D%E8%B1%86.example.org?subject=Test&body=NATTO>\n   When\
    \ constructing the email, the domain name label is converted to\n   punycode.\
    \  The resulting message may look as follows:\n      From: sender@example.net\n\
    \      To: user@xn--99zt52a.example.org\n      Subject: Test\n      Content-Type:\
    \ text/plain\n      Content-Transfer-Encoding: 7bit\n      NATTO\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   The 'mailto' URI scheme can be used to send a\
    \ message from one user\n   to another, and thus can introduce many security concerns.\
    \  Mail\n   messages can be logged at the originating site, the recipient site,\n\
    \   and intermediary sites along the delivery path.  If the messages are\n   not\
    \ encrypted, they can also be read at any of those sites.\n   A 'mailto' URI gives\
    \ a template for a message that can be sent by\n   mail client software.  The\
    \ contents of that template may be opaque or\n   difficult to read by the user\
    \ at the time of specifying the URI, as\n   well as being hidden in the user interface\
    \ (for example, a link on an\n   HTML Web page might display something other than\
    \ the content of the\n   corresponding 'mailto' URI that would be used when clicked).\
    \  Thus, a\n   mail client SHOULD NOT send a message based on a 'mailto' URI without\n\
    \   first disclosing and showing to the user the full message that will\n   be\
    \ sent (including all header fields that were specified by the\n   'mailto' URI),\
    \ fully decoded, and asking the user for approval to\n   send the message as electronic\
    \ mail.  The mail client SHOULD also\n   make it clear that the user is about\
    \ to send an electronic mail\n   message, since the user may not be aware that\
    \ this is the result of a\n   'mailto' URI.  Users are strongly encouraged to\
    \ ensure that the\n   'mailto' URI presented to them matches the address included\
    \ in the\n   \"To:\" line of the email message.\n   Some header fields are inherently\
    \ unsafe to include in a message\n   generated from a URI.  For details, please\
    \ see Section 3.  In\n   general, the fewer header fields interpreted from the\
    \ URI, the less\n   likely it is that a sending agent will create an unsafe message.\n\
    \   Examples of problems with sending unapproved mail include:\n      mail that\
    \ breaks laws upon delivery, such as making illegal\n      threats;\n      mail\
    \ that identifies the sender as someone interested in breaking\n      laws;\n\
    \      mail that identifies the sender to an unwanted third party;\n      mail\
    \ that causes a financial charge to be incurred by the sender;\n      mail that\
    \ causes an action on the recipient machine that causes\n      damage that might\
    \ be attributed to the sender.\n   Programs that interpret 'mailto' URIs SHOULD\
    \ ensure that the SMTP\n   envelope return path address, which is given as an\
    \ argument to the\n   SMTP MAIL FROM command, is set and correct, and that the\
    \ resulting\n   email is a complete, workable message.\n   'mailto' URIs on public\
    \ Web pages expose mail addresses for\n   harvesting.  This applies to all mail\
    \ addresses that are part of the\n   'mailto' URI, including the addresses in\
    \ a \"bcc\" <hfvalue>.  Those\n   addresses will not be sent to the recipients\
    \ in the 'to' field and in\n   the \"to\" and \"cc\" <hfvalue>s, but will still\
    \ be publicly visible in\n   the URI.  Addresses in a \"bcc\" <hfvalue> may also\
    \ leak to other\n   addresses in the same <hfvalue> or become known otherwise,\
    \ depending\n   on the mail user agent used.\n   Programs manipulating 'mailto'\
    \ URIs have to take great care to not\n   inadvertently double-escape or double-unescape\
    \ 'mailto' URIs, and to\n   make sure that escaping and unescaping conventions\
    \ relating to URIs\n   and relating to mail addresses are applied in the right\
    \ order.\n   Implementations parsing 'mailto' URIs must take care to sanity check\n\
    \   'mailto' URIs in order to avoid buffer overflows and problems\n   resulting\
    \ from them (e.g., execution of code specified by the\n   attacker).\n   The security\
    \ considerations of [STD66], [RFC5890], [RFC5891], and\n   [RFC3987] also apply.\
    \  Implementers and users are advised to check\n   them carefully.\n"
- title: 8.  IANA Considerations
  contents:
  - '8.  IANA Considerations

    '
- title: 8.1.  Update of the Registration of the 'mailto' URI Scheme
  contents:
  - "8.1.  Update of the Registration of the 'mailto' URI Scheme\n   This document\
    \ changes the definition of the 'mailto' URI scheme; the\n   registry of URI schemes\
    \ has been updated to refer to this document\n   rather than its predecessor,\
    \ [RFC2368].  The registration template is\n   as follows:\n   URI scheme name:\n\
    \      'mailto'\n   Status:\n      permanent\n   URI scheme syntax:\n      See\
    \ the syntax section of RFC 6068.\n   URI scheme semantics:\n      See the semantics\
    \ section of RFC 6068.\n   Encoding considerations:\n      See the syntax and\
    \ encoding sections of RFC 6068.\n   Applications/protocols that use this URI\
    \ scheme name:\n      The 'mailto' URI scheme is widely used since the start of\
    \ the Web.\n   Interoperability considerations:\n      Interoperability for 'mailto'\
    \ URIs with UTF-8-based percent-\n      encoding might be somewhat lower than\
    \ interoperability for\n      'mailto' URIs with US-ASCII only.\n   Security considerations:\n\
    \      See the security considerations section of RFC 6068.\n   Contact:\n   \
    \   IETF\n   Author/Change controller:\n      IETF\n   References:\n      RFC\
    \ 6068\n"
- title: 8.2.  Registration of the Body Header Field
  contents:
  - "8.2.  Registration of the Body Header Field\n   IANA has registered the Body\
    \ header field in the Message Header\n   Fields Registry ([RFC3864]) as follows:\n\
    \   Header field name:\n      Body\n   Applicable protocol:\n      None.  This\
    \ registration is made to assure that this header field\n      name is not used\
    \ at all, in order to not create any problems for\n      'mailto' URIs.\n   Status:\n\
    \      reserved\n   Author/Change controller:\n      IETF\n   Specification document(s):\n\
    \      RFC 6068\n   Related information:\n      none\n"
- title: 9.  Main Changes from RFC 2368
  contents:
  - "9.  Main Changes from RFC 2368\n   The main changes from RFC 2368 are as follows:\n\
    \   o  Changed syntax from RFC 2822 <mailbox> to [RFC5322] <addr-spec>.\n   o\
    \  Allowed UTF-8-based percent-encoding for domain names and in\n      <hfvalue>.\n\
    \   o  Nailed down percent-encoding in <local-part> to be based on UTF-8,\n  \
    \    reserved for if and when there is a specification for the\n      internationalization\
    \ of email addresses.\n   o  Removed prohibition against \"Bcc:\" header fields,\
    \ but added a\n      warning about their visibility and harvesting for spam.\n\
    \   o  Added clarifications for escaping.\n"
- title: 10.  Acknowledgments
  contents:
  - "10.  Acknowledgments\n   This document was derived from [RFC2368]; the acknowledgments\
    \ from\n   that specification still apply.  In addition, we thank Paul Hoffman\n\
    \   for his work on [RFC2368].\n   Valuable input on this document was received\
    \ from (in no particular\n   order): Alexey Melnikov, Paul Hoffman, Charles Lindsey,\
    \ Tim Kindberg,\n   Frank Ellermann, Etan Wexler, Michael Haardt, Michael Anthony\n\
    \   Puls II, Eliot Lear, Dave Crocker, Dan Harkins, Nevil Brownlee, John\n   Klensin,\
    \ Alfred Hoenes, Ned Freed, Sean Turner, Peter Saint-Andre,\n   Adrian Farrel,\
    \ Avshalom Houri, Robert Sparks, and many others.\n"
- title: 11.  References
  contents:
  - '11.  References

    '
- title: 11.1.  Normative References
  contents:
  - "11.1.  Normative References\n   [RFC2045]  Freed, N. and N. Borenstein, \"Multipurpose\
    \ Internet Mail\n              Extensions (MIME) Part One: Format of Internet\
    \ Message\n              Bodies\", RFC 2045, November 1996.\n   [RFC2047]  Moore,\
    \ K., \"MIME Part Three: Message Header Extensions for\n              Non-ASCII\
    \ Text\", RFC 2047, November 1996.\n   [RFC2119]  Bradner, S., \"Key words for\
    \ use in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\
    \ March 1997.\n   [RFC3864]  Klyne, G., Nottingham, M., and J. Mogul, \"Registration\n\
    \              Procedures for Message Header Fields\", BCP 90, RFC 3864,\n   \
    \           September 2004.\n   [RFC3987]  Duerst, M. and M. Suignard, \"Internationalized\
    \ Resource\n              Identifiers (IRIs)\", RFC 3987, January 2005.\n   [RFC5322]\
    \  Resnik, P., \"Internet Message Format\", RFC 5322,\n              October 2008.\n\
    \   [RFC5890]  Klensin, J., \"Internationalized Domain Names for\n           \
    \   Applications (IDNA): Definitions and Document Framework\",\n             \
    \ RFC 5890, August 2010.\n   [RFC5891]  Klensin, J., \"Internationalized Domain\
    \ Names in\n              Applications (IDNA): Protocol\", RFC 5891, August 2010.\n\
    \   [STD63]    Yergeau, F., \"UTF-8, a transformation format of ISO\n        \
    \      10646\", STD 63, RFC 3629, November 2003.\n   [STD66]    Berners-Lee, T.,\
    \ Fielding, R., and L. Masinter, \"Uniform\n              Resource Identifier\
    \ (URI): Generic Syntax\", STD 66,\n              RFC 3986, January 2005.\n  \
    \ [STD68]    Crocker, D. and P. Overell, \"Augmented BNF for Syntax\n        \
    \      Specifications: ABNF\", STD 68, RFC 5234, January 2008.\n"
- title: 11.2.  Informative References
  contents:
  - "11.2.  Informative References\n   [RFC2324]  Masinter, L., \"Hyper Text Coffee\
    \ Pot Control Protocol\n              (HTCPCP/1.0)\", RFC 2324, April 1998.\n\
    \   [RFC2368]  Hoffman, P., Masinter, L., and J. Zawinski, \"The mailto\n    \
    \          URL scheme\", RFC 2368, July 1998.\n   [RFC4952]  Klensin, J. and Y.\
    \ Ko, \"Overview and Framework for\n              Internationalized Email\", RFC\
    \ 4952, July 2007.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Martin Duerst (Note: Please write \"Duerst\" with u-umlaut\
    \ wherever\n                 possible, for example as \"D&#252;rst\" in XML and\
    \ HTML.)\n   Aoyama Gakuin University\n   5-10-1 Fuchinobe\n   Sagamihara, Kanagawa\
    \  229-8558\n   Japan\n   Phone: +81 42 759 6329\n   Fax:   +81 42 759 6495\n\
    \   EMail: duerst@it.aoyama.ac.jp\n   URI:   http://www.sw.it.aoyama.ac.jp/D%C3%BCrst/\n\
    \   Larry Masinter\n   Adobe Systems Incorporated\n   345 Park Ave\n   San Jose,\
    \ CA  95110\n   USA\n   Phone: +1-408-536-3024\n   EMail: LMM@acm.org\n   URI:\
    \   http://larry.masinter.net/\n   Jamie Zawinski\n   DNA Lounge\n   375 Eleventh\
    \ Street\n   San Francisco, CA  94103\n   USA\n   EMail: jwz@jwz.org\n"
