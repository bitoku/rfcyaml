This document specifies the use of the KeyNote trust management system as an authorization extension in the Transport Layer Security (TLS) Handshake Protocol, according to guidelines in RFC 5878.
Extensions carried in the client and server hello messages confirm that both parties support the desired authorization data types.
Then, if supported by both the client and the server, KeyNote credentials are exchanged in the supplemental data handshake message.
This document describes the identifiers necessary to exchange KeyNote [KEYNOTE] credential assertions inside a TLS
Such credential assertions can authorize the client and/or the server to perform certain actions.
In most usage scenarios, the KeyNote credential assertions will be signed by a cryptographic public key [RFC2792].
By using the X.509 key and signature encoding [X509KEY], it is possible to add KeyNote based authorization and policy compliance support to the existing, unmodified X.509 authentication exchange in TLS.
A list of KeyNote credentials (e.g., forming a delegation chain) may be sent as part of the same payload.
Alternatively, a URL [RFC3986] pointing to the location of such a list of KeyNote credentials may be provided.
In most scenarios, at least one of these credentials will be issued to the public key of the transmitter of the credentials, i.e., said public key will appear in the "Licensees" field of at least one KeyNote credential assertion.
The same public key will generally be used by the transmitter of the same credentials to authenticate as part of the TLS exchange.
The authentication material (e.g., cryptographic public key) that was used by the transmitter to authenticate in the TLS exchange will be provided to the KeyNote evaluation engine as an "Action Authorizer".
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in [RFC2119].
The KeyNote Assertion List type definition in the TLS Authorization Data Formats registry is:
When the keynote assertion list value is present, the authorization data is a list of KeyNote credential assertions that conforms to the profile in RFC 2704 [KEYNOTE].
A KeyNote assertion list is transmitted inside an AuthorizationDataEntry structure as an opaque sequence of 1 2^16 1 bytes: opaque KeyNoteAssertionList<1..
1>; When KeyNoteAssertionList is used, the field contains an ASCII  encoded list of signed KeyNote assertions, as described in RFC 2704 [KEYNOTE].
The assertions are separated by two "\n" (newline) characters.
A KeyNote assertion is a structure similar to a public key certificate; the main difference is that instead of a binding between a name and a public key, KeyNote assertions bind public keys to authorization rules that are evaluated by the peer when the sender later issues specific requests.
When making an authorization decision based on a list of KeyNote assertions, proper linkage between the KeyNote assertions and the public key certificate that is transferred in the TLS Certificate message is needed.
Receivers of a KeyNote assertion list should initialize the ACTION AUTHORIZER variable to be the sender's public key, which was used to authenticate the TLS exchange.
If a different authentication mechanism is used, it is the responsibility of the credential issuer to issue the appropriate credentials.
KeyNote Credential Assertion List URL
The KeyNote Assertion List URL type definition in the TLS Authorization Data Formats registry is: keynote assertion list url(65)
A KeyNote Assertion List URL is transmitted inside an AuthorizationDataEntry structure as a URLandHash structure [AUTHZ].
When the keynote assertion list url value is present, the authorization data is a list of KeyNote assertions as described in Section 2; however, the KeyNote assertion list is fetched with the supplied URL.
A one way hash value is provided to ensure that the intended KeyNote credential assertion is obtained.
Implementations that support keynote assertion list url MUST support URLs that employ the HTTP scheme [HTTP].
These implementations MUST confirm that the hash value computed on the fetched authorization
matches the one received in the handshake.
Mismatch of the hash values SHOULD be treated as though the authorization was not provided, which will result in a bad certificate alert [AUTHZ].
Other schemes may also be supported.
When dereferencing these URLs, circular dependencies MUST be avoided.
Avoiding TLS when dereferencing these URLs is one way to avoid circular dependencies.
Therefore, clients using the HTTP scheme MUST NOT use these TLS extensions if the Upgrade mechanism in HTTP [UPGRADE] is used.
For other schemes, similar care must be taken to avoid using these TLS extensions.
IANA Considerations With this document, IANA has registered two new entries in the TLS Authorization Data Formats registry: keynote assertion list(64) and keynote assertion list url(65).
This registry is defined in [AUTHZ].
There are no security considerations beyond those discussed in [KEYNOTE], [RFC2792], and [AUTHZ].
Appendix A.  Updated TLS Authorization Data Structures
For clarity, this Appendix shows an updated version of the relevant data structures from Section 3.3 in [AUTHZ] with the new entries described in this document.
struct { AuthorizationDataEntry authz data list<1..
; opaque SAMLAssertion<1..2^16 1>; opaque KeyNoteAssertionList<1..
} HashAlgorithm; opaque MD5Hash[16]; opaque SHA1Hash[20]; opaque SHA224Hash[28]; opaque SHA256Hash[32]; opaque SHA384Hash[48]; opaque SHA512Hash[64];
