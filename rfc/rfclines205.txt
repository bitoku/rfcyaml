NETCRT PROTOCOL VERSION 3 A. INTRODUCTION
The UCLA Campus Computing Network (CCN) node intends to provide Network access to its conversational remote job entry system URSA.
The URSA system is display oriented, supporting only character displays with local buffers (originally IBM 2260 displays, now CCI 301 TV display consoles).
This document defines a third level protocol called NETCRT which allows a Network user in a remote Host to look like a CCI console to URSA.
NETCRT is defined in terms of a virtual character display ("VCD") terminal, simulated by a process in the user host.
URSA, like many on line console systems, attempts to provide a good man/machine interaction by keeping tight control over the state of the terminal.
On the other hand, the Network Working Group has deliberately built some "squishiness" into the standard Network protocols.
We believe this squishiness is a conceptual mistake when dealing with remote man/machine interaction, and we would support protocol revisions to allow control over the effective communication compliance between processes in different hosts.
However, this NETCRT protocol attempts to cope with the present squishiness, which is apparently built into a number of host's NCPs.
In fact, we have arranged things so a host can improve response time and reduce Network traffic with NETCRT by using the message buffering inherent in his NCP.
A VCD consists of the following virtual hardware (see Figure 1): 1.
A rectangular  display screen  capable of displaying N lines of M characters.
A  local buffer  of M x N characters used to refresh the display.
A  cursor register  which addresses the characters in the buffer (and hence on the screen).
This register controls the writing of text into the local buffer from either the keyboard or the server, and the reading of the local buffer by the server.
A  keyboard  containing text keys and control keys.
Each text key enters a character into local buffer at the current cursor address and steps the cursor register by 1.
A  communication interface  through which the server CPU can send a stream of  command  segments to the VCD and receive a stream of  response  segments from the VCD.
The command segments include control commands to the VCD and text to be written into the local buffer.
Response segments contain status indicators and text read from the buffer.
In addition, both VCD and server may send break signals.
The current address in the cursor register, an integer between 0 and M x N 1, is displayed as a blitch, underscore, or other visual indication at the corresponding point on the screen; this indication is called the  cursor .
Position 0 is the upper left corner of the screen.
The screen is addressed in line ("row") order, and read and write operations by the server overflow automatically from one line to the next.
The cursor register is not assumed to operate modulo M x Nxsy.
It is possible for a server command to set the cursor register to M x N, one position beyond the last screen position; however, the server should never set the register to an address beyond M x N, and it should not leave the cursor at M x N when the keyboard is unlocked.
The application program or conversational system using the VCD may format each display screen in a variety of ways, and may use a number of styles of interaction.
One consequence is that the application program might have to look anywhere on the screen (i.e., in the local buffer) to find the input information it requires.
We may consider three alternative mechanisms for transmitting information from the VCD to the serving CPU:
Whenever the user presses a "Transmit" control key, the entire M x N characters in the buffer are transmitted to the server CPU.
When the user presses "Transmit", the string of text between a "start" control character and the cursor is transmitted to the server.
The server must send a read command segment to the VCD before the "Transmit" key will have an effect.
The read command segment determines which parts of the buffer are to be transmitted to the server.
Mechanism 1 may be faulted as too costly in transmission time and channel capacity, while Mechanism 2 is too restrictive.
The scheme which we propose here is based on Mechanism 3, which subsumes the other two.
The VCD is assumed to include the following control keys:
Typically, the server will read specified areas of the screen and perhaps write out new data before unlocking the keyboard again.
The  Break  key always sends the interrupt, regardless of the state of the VCD.
These may be called pure control keys, since they do not correspond to any text characters.
The following control key does store a character into the display buffer:
If this character is encountered during a read or write operation, it is executed (i.e., the cursor is moved to the beginning of the next line) and the NL is counted as  one  character.
Finally, there are assumed to be keys for manually positioning the cursor to any address on the screen.
Cursor positioning keys may include: cursor right, cursor up, cursor left (BS), cursor down (LF), and cursor return (CR).
A tab (HT) mechanism could also be defined, although none is included here.
The VCD has two internal states,  Local  and  Control  (see Figure 2).
The keyboard is unlocked and all keys are active.
The VCD does not accept or recognize any commands from server except (reverse) Break.
The keyboard is locked, and only the  Break  and  Reset  keys are active.
The VCD accepts and executes command segments from the server, and returns response segments as the result of read commands.
The VCD changes from Local to Control state if either: (1)
The user presses the  Transmit  key; or (2) the user presses the  Break  key; or (3) the server sends a reverse Break request.
Transmit's  only effect is to enter Control State;  Break  enters Control State and also sends a break request (INS and X'80') to the server.
The VCD returns to Local State when either: 1.
The user presses the  Reset  key; or 2.
the VCD encounters a LOCAL command from the server and is not in the process of synchronizing a reverse break (see section E below).
We should note that CCI and IBM 2260 character display consoles actually have only one control key ("Interrupt" on CCI, "Enter" on 2260) to perform the functions of both  Break  and  Transmit ; this one key in fact has the function of the  Break  key of the VCD.
We have included both  Break  and  Transmit  keys in the VCD for generality, but the URSA NETCRT interface will be programmed to allow a Network user of URSA to either (1) employ the  Break  key exclusively, or (2) use either  Break  or  Transmit  as appropriate.
This will be achieved by URSA simply by ignoring those break requests (INS messages) which occur while there are outstanding read commands.
The server sends the VCD a string of command segments.
These are of varying length, consisting of an op code and none or more parameters.
The commands recognized by the VCD are as follows:
Display & Keyboard Control Commands:
i.e, clear the local buffer.
The result is to suspend command interpretation and unlock the keyboard.
Used to synchronize reverse Break from server.
SYNC (X'80) is placed in stream by server at same time that it sends an INS.
VCD enters Control State, synchronizes INS with BREAK command (see next section), and continues command interpretation.
Specifically, search backwards toward lower addresses) from the current cursor position and take the first occurrences of c (i.e., the one with the largest address).
If no occurrence is found, leave cursor at position 0.
Save a copy of the current cursor address in local register
16 bit integer  Write n bytes of text into display n, followed by  buffer starting at current cursor n text bytes.
position and advancing cursor by 1 for each byte (except NL character advances to beginning of next line).
NL counts as one character.
Send the text to the server as a response segment.
Must have n   [sigma] <
up to (but not including) the cursor address stored in register S.
The cursor is left in position S as a result.
Send the text to the server as a response segment.
16 bit integer  Same as WRITE n, except characters n, followed by  are not stored in buffer if they n text bytes.
have a lower cursor address than the value in S.
Here are some applications of these commands in URSA: 1.
One elementary URSA terminal operation reads the screen from position x up to (but not including) the current cursor position.
This could be done with the sequence of VCD command segments:
SAVE CURSOR x SREAD 2.
Another common operation in URSA is to remember the cursor, update specific information on the screen, and replace the cursor.
This can be done by the following 8   n byte sequence of command segments:
SAVE CURSOR x WRITE n, text RESTORE 3.
In URSA, the area in which a user is to type his response is usually delimited on the left by a "Start Symbol" (graphic '[1]').
This is a historical remnant of the IBM 2260, which has only two hardware read operators: read the full screen, and read from the Start Manual Input Symbol ("SMI") to the cursor.
The SMI read operation can be simulated easily on the VCD as follows:
SAVE FIND '[1]' SREAD 4.
The  Break  (or  Transmit )
key on the VCD may serve the function of the INTerrupt key on a CCI console (or ENTer on an IBM 2260).
URSA will often attempt to minimize Network traffic by sending a sequence of commands (one message if allocation allows) like the following:
At other times, URSA might send the sequence: CURSOR m WRITE n,TEXT LOCAL READ  0 and wait for the INS from the user pressing  Break  (or the response segment triggered by the zero length
read if he presses  Transmit ); then URSA will send the appropriate read command sequence.
The VCD connects the server through ICP to a standard socket, establishing thereby a pair of connections between the VCD and the server.
Command segments (server to VCD) and response segments (VCD to server) are sent over these connections, without regard to physical message boundaries, using byte size 8.
The VCD is defined to operate in a segment at a time mode (rather than character at a  time), with local echo.
Therefore, the server never echoes under NETCRT.
In many cases URSA will send a sequence of command segments (as in the examples of the preceding section) at once; if there is sufficient allcocation they will be sent in the same message.
Response time may be improved, therefore, if the user site is able to buffer ahead on command segments.
This buffering does raise break synchronization problems, which are solved in the following manner for reverse (server to user)
: The server sends an INS on the control link and also a SYNC command (X'80) on the data link to the VCD.
On receiving either, the VCD enters Control State and then achieves synchronization between the INS and BREAK; if the INS arrives first, the VCD executes normally all commands buffered in his host,  except  it ignores LOCAL commands, until the SYNC appears.
Having achieved synchronization, the VCD continues normal command interpretation (without ignoring ensuring LOCAL commands).
By this means the server can regain control of the VCD to write new information at any time.
For example, when URSA is used under NETCRT, most WRITE or AWRITE sequences will be preceded by a BREAK from the server, since URSA will not know the current state of the VCD.
Even if URSA left the VCD in Control State, the user might have manually returned his VCD to Local State by pressing  Reset .
After receiving an INS, the VCD executes rather than ignores buffered commands so that pending writes will not be lost in case that processing at the user side has been held up temporarily.
The read commands executed after the server sent an INS might be irrelevant to a server, which can ignore the corresponding response segments.
In order to do so, the server simply keeps matching counts of read commands sent and corresponding response segments received.
Command segments will use the following formats:
SREAD Form 2 (16 bit integer)
INTEGER(16) where q   X'9E' means READ n q
CURSOR n In both cases, 0 <  n <  M
x N Form 3 (count and text)
n) where q   X'9D' means WRITE q
X'9F' and n 1 means FIND
A response segment, caused by a READ or SREAD command, has the following format: RESPONSE
where n > 0 is the number of characters actually read.
CURSOR(16) is an integer giving the final cursor position after the corresponding read command.
Note that the command READ 0 is permissible and may be used by the server to find the current cursor position, or to find out when the user presses  Transmit .
E.  SCREEN SIZE For simplicity and consistency with URSA, we have chosen to treat the cursor as a single integer.
This in turn means that VCD and server must agree upon the number of columns M; it is also desirable for the server to know N.
The agreement on M and N takes place through a one sided negotiation.
The server is assumed to know what M and N values he can handle and these are published for user sites.
When the VCD is first connected to the server, the VCD must send an Open response segment with the values M and N:
X'0000' If the VCD fails to send this segment or the server does not like the values, the server closes the connections and the user is considered logged off.
Endnotes [1] Graphic representation of start symbol: shaded triangle on its side.
After INS is received, LOCAL command is ignored until SYNC (X'80') is encountered FIGURE 2.
[This RFC was put into machine readable form for entry] [into the online RFC archives by Lorrie Shiota, 2/02]
