- title: __initial_text__
  contents:
  - '                The Kerberos Version 5 GSS-API Mechanism

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: ABSTRACT
  contents:
  - "ABSTRACT\n   This specification defines protocols, procedures, and conventions\
    \ to\n   be employed by peers implementing the Generic Security Service\n   Application\
    \ Program Interface (as specified in RFCs 1508 and 1509)\n   when using Kerberos\
    \ Version 5 technology (as specified in RFC 1510).\n"
- title: ACKNOWLEDGMENTS
  contents:
  - "ACKNOWLEDGMENTS\n   Much of the material in this memo is based on working documents\n\
    \   drafted by John Wray of Digital Equipment Corporation and on\n   discussions,\
    \ implementation activities, and interoperability testing\n   involving Marc Horowitz,\
    \ Ted Ts'o, and John Wray.  Particular thanks\n   are due to each of these individuals\
    \ for their contributions towards\n   development and availability of GSS-API\
    \ support within the Kerberos\n   Version 5 code base.\n"
- title: 1. Token Formats
  contents:
  - "1. Token Formats\n   This section discusses protocol-visible characteristics\
    \ of the GSS-\n   API mechanism to be implemented atop Kerberos V5 security technology\n\
    \   per RFC-1508 and RFC-1510; it defines elements of protocol for\n   interoperability\
    \ and is independent of language bindings per RFC-\n   1509.\n   Tokens transferred\
    \ between GSS-API peers (for security context\n   management and per-message protection\
    \ purposes) are defined.  The\n   data elements exchanged between a GSS-API endpoint\
    \ implementation and\n   the Kerberos KDC are not specific to GSS-API usage and\
    \ are therefore\n   defined within RFC-1510 rather than within this specification.\n\
    \   To support ongoing experimentation, testing, and evolution of the\n   specification,\
    \ the Kerberos V5 GSS-API mechanism as defined in this\n   and any successor memos\
    \ will be identified with the following Object\n   Identifier, as defined in RFC-1510,\
    \ until the specification is\n   advanced to the level of Proposed Standard RFC:\n\
    \   {iso(1), org(3), dod(5), internet(1), security(5), kerberosv5(2)}\n   Upon\
    \ advancement to the level of Proposed Standard RFC, the Kerberos\n   V5 GSS-API\
    \ mechanism will be identified by an Object Identifier\n   having the value:\n\
    \   {iso(1) member-body(2) United States(840) mit(113554) infosys(1)\n   gssapi(2)\
    \ krb5(2)}\n"
- title: 1.1. Context Establishment Tokens
  contents:
  - "1.1. Context Establishment Tokens\n   Per RFC-1508, Appendix B, the initial context\
    \ establishment token\n   will be enclosed within framing as follows:\n   InitialContextToken\
    \ ::=\n   [APPLICATION 0] IMPLICIT SEQUENCE {\n           thisMech        MechType\n\
    \                   -- MechType is OBJECT IDENTIFIER\n                   -- representing\
    \ \"Kerberos V5\"\n           innerContextToken ANY DEFINED BY thisMech\n    \
    \               -- contents mechanism-specific;\n                   -- ASN.1 usage\
    \ within innerContextToken\n                   -- is not required\n          \
    \ }\n   The innerContextToken of the initial context token will consist of a\n\
    \   Kerberos V5 KRB_AP_REQ message, preceded by a two-byte token-id\n   (TOK_ID)\
    \ field, which shall contain the value 01 00.\n   The above GSS-API framing shall\
    \ be applied to all tokens emitted by\n   the Kerberos V5 GSS-API mechanism, including\
    \ KRB_AP_REP, KRB_ERROR,\n   context-deletion, and per-message tokens, not just\
    \ to the initial\n   token in a context establishment sequence.  While not required\
    \ by\n   RFC-1508, this enables implementations to perform enhanced error-\n \
    \  checking. The innerContextToken field of context establishment tokens\n   for\
    \ the Kerberos V5 GSS-API mechanism will contain a Kerberos message\n   (KRB_AP_REQ,\
    \ KRB_AP_REP or KRB_ERROR), preceded by a 2-byte TOK_ID\n   field containing 01\
    \ 00 for KRB_AP_REQ messages, 02 00 for KRB_AP_REP\n   messages and 03 00 for\
    \ KRB_ERROR messages.\n"
- title: 1.1.1. Initial Token
  contents:
  - "1.1.1. Initial Token\n   Relevant KRB_AP_REQ syntax (from RFC-1510) is as follows:\n\
    \   AP-REQ ::= [APPLICATION 14] SEQUENCE {\n           pvno [0]        INTEGER,\
    \        -- indicates Version 5\n           msg-type [1]    INTEGER,        --\
    \ indicates KRB_AP_REQ\n           ap-options[2]   APOptions,\n           ticket[3]\
    \       Ticket,\n           authenticator[4]        EncryptedData\n   }\n   APOptions\
    \ ::= BIT STRING {\n           reserved (0),\n           use-session-key (1),\n\
    \           mutual-required (2)\n   }\n   Ticket ::= [APPLICATION 1] SEQUENCE\
    \ {\n           tkt-vno [0]     INTEGER,        -- indicates Version 5\n     \
    \      realm [1]       Realm,\n           sname [2]       PrincipalName,\n   \
    \        enc-part [3]    EncryptedData\n   }\n   -- Encrypted part of ticket\n\
    \   EncTicketPart ::= [APPLICATION 3] SEQUENCE {\n           flags[0]        TicketFlags,\n\
    \           key[1]          EncryptionKey,\n           crealm[2]       Realm,\n\
    \           cname[3]        PrincipalName,\n           transited[4]    TransitedEncoding,\n\
    \           authtime[5]     KerberosTime,\n           starttime[6]    KerberosTime\
    \ OPTIONAL,\n           endtime[7]      KerberosTime,\n           renew-till[8]\
    \   KerberosTime OPTIONAL,\n           caddr[9]        HostAddresses OPTIONAL,\n\
    \           authorization-data[10]  AuthorizationData OPTIONAL\n   }\n   -- Unencrypted\
    \ authenticator\n   Authenticator ::= [APPLICATION 2] SEQUENCE  {\n          \
    \ authenticator-vno[0]    INTEGER,\n           crealm[1]               Realm,\n\
    \           cname[2]                PrincipalName,\n           cksum[3]      \
    \          Checksum OPTIONAL,\n           cusec[4]                INTEGER,\n \
    \          ctime[5]                KerberosTime,\n           subkey[6]       \
    \        EncryptionKey OPTIONAL,\n           seq-number[7]           INTEGER OPTIONAL,\n\
    \           authorization-data[8]   AuthorizationData OPTIONAL\n   }\n   For purposes\
    \ of this specification, the authenticator shall include\n   the optional sequence\
    \ number, and the checksum field shall be used to\n   convey channel binding,\
    \ service flags, and optional delegation\n   information.  The checksum will have\
    \ a type of 0x8003 (a value being\n   registered within the Kerberos protocol\
    \ specification), and a value\n   field of at least 24 bytes in length.  The length\
    \ of the value field\n   is extended beyond 24 bytes if and only if an optional\
    \ facility to\n   carry a Kerberos-defined KRB_CRED message for delegation purposes\
    \ is\n   supported by an implementation and active on a context. When\n   delegation\
    \ is active, a TGT with its FORWARDABLE flag set will be\n   transferred within\
    \ the KRB_CRED message.\n   The checksum value field's format is as follows:\n\
    \   Byte    Name    Description\n   0..3    Lgth    Number of bytes in Bnd field;\n\
    \                   Currently contains hex 10 00 00 00\n                   (16,\
    \ represented in little-endian form)\n   4..19   Bnd     MD5 hash of channel bindings,\
    \ taken over all non-null\n                   components of bindings, in order\
    \ of declaration.\n                   Integer fields within channel bindings are\
    \ represented\n                   in little-endian order for the purposes of the\
    \ MD5\n                   calculation.\n   20..23  Flags   Bit vector of context-establishment\
    \ flags,\n                   with values consistent with RFC-1509, p. 41:\n  \
    \                         GSS_C_DELEG_FLAG:       1\n                        \
    \   GSS_C_MUTUAL_FLAG:      2\n                           GSS_C_REPLAY_FLAG: \
    \     4\n                           GSS_C_SEQUENCE_FLAG:    8\n              \
    \             GSS_C_CONF_FLAG:        16\n                           GSS_C_INTEG_FLAG:\
    \       32\n                   The resulting bit vector is encoded into bytes\
    \ 20..23\n                   in little-endian form.\n   24..25  DlgOpt  The Delegation\
    \ Option identifier (=1) [optional]\n   26..27  Dlgth   The length of the Deleg\
    \ field. [optional]\n   28..n   Deleg   A KRB_CRED message (n = Dlgth + 29) [optional]\n\
    \   In computing the contents of the \"Bnd\" field, the following detailed\n \
    \  points apply:\n        (1) Each integer field shall be formatted into four\
    \ bytes, using\n        little-endian byte ordering, for purposes of MD5 hash\n\
    \        computation.\n        (2) All input length fields within gss_buffer_desc\
    \ elements of a\n        gss_channel_bindings_struct, even those which are zero-valued,\n\
    \        shall be included in the hash calculation; the value elements of\n  \
    \      gss_buffer_desc elements shall be dereferenced, and the\n        resulting\
    \ data shall be included within the hash computation,\n        only for the case\
    \ of gss_buffer_desc elements having non-zero\n        length specifiers.\n  \
    \      (3) If the caller passes the value GSS_C_NO_BINDINGS instead of\n     \
    \   a valid channel bindings structure, the Bnd field shall be set\n        to\
    \ 16 zero-valued bytes.\n   In the initial Kerberos V5 GSS-API mechanism token\
    \ (KRB_AP_REQ token)\n   from initiator to target, the GSS_C_DELEG_FLAG, GSS_C_MUTUAL_FLAG,\n\
    \   GSS_C_REPLAY_FLAG, and GSS_C_SEQUENCE_FLAG values shall each be set\n   as\
    \ the logical AND of the initiator's corresponding request flag to\n   GSS_Init_sec_context()\
    \ and a Boolean indicator of whether that\n   optional service is available to\
    \ GSS_Init_sec_context()'s caller.\n   GSS_C_CONF_FLAG and GSS_C_INTEG_FLAG, for\
    \ which no corresponding\n   context-level input indicator flags to GSS_Init_sec_context()\
    \ exist,\n   shall each be set to indicate whether their respective per-message\n\
    \   protection services are available for use on the context being\n   established.\n\
    \   When input source address channel binding values are provided by a\n   caller\
    \ (i.e., unless the input argument is GSS_C_NO_BINDINGS or the\n   source address\
    \ specifier value within the input structure is\n   GSS_C_NULL_ADDRTYPE), and\
    \ the corresponding token received from the\n   context's peer bears address restrictions,\
    \ it is recommended that an\n   implementation of the Kerberos V5 GSS-API mechanism\
    \ should check that\n   the source address as provided by the caller matches that\
    \ in the\n   received token, and should return the GSS_S_BAD_BINDINGS major_status\n\
    \   value if a mismatch is detected. Note: discussion is ongoing about\n   the\
    \ strength of recommendation to be made in this area, and on the\n   circumstances\
    \ under which such a recommendation should be applicable;\n   implementors are\
    \ therefore advised that changes on this matter may be\n   included in subsequent\
    \ versions of this specification.\n"
- title: 1.1.2. Response Tokens
  contents:
  - "1.1.2. Response Tokens\n   A context establishment sequence based on the Kerberos\
    \ V5 mechanism\n   will perform one-way authentication (without confirmation or\
    \ any\n   return token from target to initiator in response to the initiator's\n\
    \   KRB_AP_REQ) if the mutual_req bit is not set in the application's\n   call\
    \ to GSS_Init_sec_context().  Applications requiring confirmation\n   that their\
    \ authentication was successful should request mutual\n   authentication, resulting\
    \ in a \"mutual-required\" indication within\n   KRB_AP_REQ APoptions and the\
    \ setting of the mutual_req bit in the\n   flags field of the authenticator checksum.\
    \  In response to such a\n   request, the context target will reply to the initiator\
    \ with a token\n   containing either a KRB_AP_REP or KRB_ERROR, completing the\
    \ mutual\n   context establishment exchange.\n   Relevant KRB_AP_REP syntax is\
    \ as follows:\n   AP-REP ::= [APPLICATION 15] SEQUENCE {\n           pvno [0]\
    \        INTEGER,        -- represents Kerberos V5\n           msg-type [1]  \
    \  INTEGER,        -- represents KRB_AP_REP\n           enc-part [2]    EncryptedData\n\
    \   }\n   EncAPRepPart ::= [APPLICATION 27] SEQUENCE {\n           ctime [0] \
    \      KerberosTime,\n           cusec [1]       INTEGER,\n           subkey [2]\
    \      EncryptionKey OPTIONAL,\n           seq-number [3]  INTEGER OPTIONAL\n\
    \   }\n   The optional seq-number element within the AP-REP's EncAPRepPart\n \
    \  shall be included.\n   The syntax of KRB_ERROR is as follows:\n   KRB-ERROR\
    \ ::=   [APPLICATION 30] SEQUENCE {\n           pvno[0]         INTEGER,\n   \
    \        msg-type[1]     INTEGER,\n           ctime[2]        KerberosTime OPTIONAL,\n\
    \           cusec[3]        INTEGER OPTIONAL,\n           stime[4]        KerberosTime,\n\
    \           susec[5]        INTEGER,\n           error-code[6]   INTEGER,\n  \
    \         crealm[7]       Realm OPTIONAL,\n           cname[8]        PrincipalName\
    \ OPTIONAL,\n           realm[9]        Realm, -- Correct realm\n           sname[10]\
    \       PrincipalName, -- Correct name\n           e-text[11]      GeneralString\
    \ OPTIONAL,\n           e-data[12]      OCTET STRING OPTIONAL\n   }\n   Values\
    \ to be transferred in the error-code field of a KRB-ERROR\n   message are defined\
    \ in [RFC-1510], not in this specification.\n"
- title: 1.2. Per-Message and Context Deletion Tokens
  contents:
  - "1.2. Per-Message and Context Deletion Tokens\n   Three classes of tokens are\
    \ defined in this section: \"MIC\" tokens,\n   emitted by calls to GSS_GetMIC()\
    \ (formerly GSS_Sign()) and consumed\n   by calls to GSS_VerifyMIC() (formerly\
    \ GSS_Verify()), \"Wrap\" tokens,\n   emitted by calls to GSS_Wrap() (formerly\
    \ GSS_Seal()) and consumed by\n   calls to GSS_Unwrap() (formerly GSS_Unseal()),\
    \ and context deletion\n   tokens, emitted by calls to GSS_Delete_sec_context()\
    \ and consumed by\n   calls to GSS_Process_context_token().  Note: References\
    \ to GSS-API\n   per-message routines in the remainder of this specification will\
    \ be\n   based on those routines' newer recommended names rather than those\n\
    \   names' predecessors.\n   Several variants of cryptographic keys are used in\
    \ generation and\n   processing of per-message tokens:\n        (1) context key:\
    \ uses Kerberos session key (or subkey, if\n        present in authenticator emitted\
    \ by context initiator) directly\n        (2) confidentiality key: forms variant\
    \ of context key by\n        exclusive-OR with the hexadecimal constant f0f0f0f0f0f0f0f0.\n\
    \        (3) MD2.5 seed key: forms variant of context key by reversing\n     \
    \   the bytes of the context key (i.e. if the original key is the\n        8-byte\
    \ sequence {aa, bb, cc, dd, ee, ff, gg, hh}, the seed key\n        will be {hh,\
    \ gg, ff, ee, dd, cc, bb, aa}).\n"
- title: 1.2.1. Per-message Tokens - MIC
  contents:
  - '1.2.1. Per-message Tokens - MIC

    '
- title: Use of the GSS_GetMIC() call yields a token, separate from the user
  contents:
  - 'Use of the GSS_GetMIC() call yields a token, separate from the user

    '
- title: data being protected, which can be used to verify the integrity of
  contents:
  - 'data being protected, which can be used to verify the integrity of

    '
- title: 'that data as received.  The token has the following format:'
  contents:
  - "that data as received.  The token has the following format:\n   Byte no     \
    \     Name           Description\n    0..1           TOK_ID          Identification\
    \ field.\n                                   Tokens emitted by GSS_GetMIC() contain\n\
    \                                   the hex value 01 01 in this field.\n    2..3\
    \           SGN_ALG         Integrity algorithm indicator.\n                 \
    \                  00 00 - DES MAC MD5\n                                   01\
    \ 00 - MD2.5\n                                   02 00 - DES MAC\n    4..7   \
    \        Filler          Contains ff ff ff ff\n    8..15          SND_SEQ    \
    \     Sequence number field.\n    16..23         SGN_CKSUM       Checksum of \"\
    to-be-signed data\",\n                                   calculated according\
    \ to algorithm\n                                   specified in SGN_ALG field.\n\
    \   GSS-API tokens must be encapsulated within the higher-level protocol\n   by\
    \ the application; no embedded length field is necessary.\n"
- title: 1.2.1.1. Checksum
  contents:
  - "1.2.1.1. Checksum\n   Checksum calculation procedure (common to all algorithms):\
    \ Checksums\n   are calculated over the data field, logically prepended by the\
    \ first\n   8 bytes of the plaintext packet header.  The resulting value binds\n\
    \   the data to the packet type and signature algorithm identifier\n   fields.\n\
    \   DES MAC MD5 algorithm: The checksum is formed by computing an MD5\n   [RFC-1321]\
    \ hash over the plaintext data, and then computing a DES-CBC\n   MAC on the 16-byte\
    \ MD5 result.  A standard 64-bit DES-CBC MAC is\n   computed per [FIPS-PUB-113],\
    \ employing the context key and a zero IV.\n   The 8-byte result is stored in\
    \ the SGN_CKSUM field.\n   MD2.5 algorithm: The checksum is formed by first DES-CBC\
    \ encrypting a\n   16-byte zero-block, using a zero IV and a key formed by reversing\
    \ the\n   bytes of the context key (i.e. if the original key is the 8-byte\n \
    \  sequence {aa, bb, cc, dd, ee, ff, gg, hh}, the checksum key will be\n   {hh,\
    \ gg, ff, ee, dd, cc, bb, aa}).   The resulting 16-byte value is\n   logically\
    \ prepended to the to-be-signed data.  A standard MD5\n   checksum is calculated\
    \ over the combined data, and the first 8 bytes\n   of the result are stored in\
    \ the SGN_CKSUM field.  Note 1: we refer to\n   this algorithm informally as \"\
    MD2.5\" to connote the fact that it uses\n   half of the 128 bits generated by\
    \ MD5; use of only a subset of the\n   MD5 bits is intended to protect against\
    \ the prospect that data could\n   be postfixed to an existing message with corresponding\
    \ modifications\n   being made to the checksum.  Note 2: This algorithm is fairly\
    \ novel\n   and has received more limited evaluation than that to which other\n\
    \   integrity algorithms have been subjected.  An initial, limited\n   evaluation\
    \ indicates that it may be significantly weaker than DES MAC\n   MD5.\n   DES-MAC\
    \ algorithm: A standard 64-bit DES-CBC MAC is computed on the\n   plaintext data\
    \ per [FIPS-PUB-113], employing the context key and a\n   zero IV. Padding procedures\
    \ to accomodate plaintext data lengths\n   which may not be integral multiples\
    \ of 8 bytes are defined in [FIPS-\n   PUB-113].  The result is an 8-byte value,\
    \ which is stored in the\n   SGN_CKSUM field.  Support for this algorithm may\
    \ not be present in\n   all implementations.\n"
- title: 1.2.1.2. Sequence Number
  contents:
  - "1.2.1.2. Sequence Number\n   Sequence number field: The 8 byte plaintext sequence\
    \ number field is\n   formed from the sender's four-byte sequence number as follows.\
    \  If\n   the four bytes of the sender's sequence number are named s0, s1, s2\n\
    \   and s3 (from least to most significant), the plaintext sequence\n   number\
    \ field is the 8 byte sequence: (s0, s1, s2, s3, di, di, di,\n   di), where 'di'\
    \ is the direction-indicator (Hex 0 - sender is the\n   context initiator, Hex\
    \ FF - sender is the context acceptor).  The\n   field is then DES-CBC encrypted\
    \ using the context key and an IV\n   formed from the first 8 bytes of the previously\
    \ calculated SGN_CKSUM\n   field. After sending a GSS_GetMIC() or GSS_Wrap() token,\
    \ the sender's\n   sequence number is incremented by one.\n   The receiver of\
    \ the token will first verify the SGN_CKSUM field.  If\n   valid, the sequence\
    \ number field may be decrypted and compared to the\n   expected sequence number.\
    \  The repetition of the (effectively 1-bit)\n   direction indicator within the\
    \ sequence number field provides\n   redundancy so that the receiver may verify\
    \ that the decryption\n   succeeded.\n   Since the checksum computation is used\
    \ as an IV to the sequence\n   number decryption, attempts to splice a checksum\
    \ and sequence number\n   from different messages will be detected.  The direction\
    \ indicator\n   will detect packets that have been maliciously reflected.\n  \
    \ The sequence number provides a basis for detection of replayed\n   tokens. \
    \ Replay detection can be performed using state information\n   retained on received\
    \ sequence numbers, interpreted in conjunction\n   with the security context on\
    \ which they arrive.\n   Provision of per-message replay and out-of-sequence detection\n\
    \   services is optional for implementations of the Kerberos V5 GSS-API\n   mechanism.\
    \  Further, it is recommended that implementations of the\n   Kerberos V5 GSS-API\
    \ mechanism which offer these services should honor\n   a caller's request that\
    \ the services be disabled on a context.\n   Specifically, if replay_det_req_flag\
    \ is input FALSE, replay_det_state\n   should be returned FALSE and the GSS_DUPLICATE_TOKEN\
    \ and\n   GSS_OLD_TOKEN stati should not be indicated as a result of duplicate\n\
    \   detection when tokens are processed; if sequence_req_flag is input\n   FALSE,\
    \ sequence_state should be returned FALSE and\n   GSS_DUPLICATE_TOKEN, GSS_OLD_TOKEN,\
    \ and GSS_UNSEQ_TOKEN stati should\n   not be indicated as a result of out-of-sequence\
    \ detection when tokens\n   are processed.\n"
- title: 1.2.2. Per-message Tokens - Wrap
  contents:
  - "1.2.2. Per-message Tokens - Wrap\n   Use of the GSS_Wrap() call yields a token\
    \ which encapsulates the\n   input user data (optionally encrypted) along with\
    \ associated\n   integrity check quantities. The token emitted by GSS_Wrap() consists\n\
    \   of an integrity header whose format is identical to that emitted by\n   GSS_GetMIC()\
    \ (except that the TOK_ID field contains the value 02 01),\n   followed by a body\
    \ portion that contains either the plaintext data\n   (if SEAL_ALG = ff ff) or\
    \ encrypted data for any other supported value\n   of SEAL_ALG.  Currently, only\
    \ SEAL_ALG = 00 00 is supported, and\n   means that DES-CBC encryption is being\
    \ used to protect the data.\n   The GSS_Wrap() token has the following format:\n\
    \   Byte no          Name           Description\n    0..1           TOK_ID   \
    \       Identification field.\n                                   Tokens emitted\
    \ by GSS_Wrap() contain\n                                   the hex value 02 01\
    \ in this field.\n    2..3           SGN_ALG         Checksum algorithm indicator.\n\
    \                                   00 00 - DES MAC MD5\n                    \
    \               01 00 - MD2.5\n                                   02 00 - DES\
    \ MAC\n    4..5           SEAL_ALG        ff ff - none\n                     \
    \              00 00 - DES\n    6..7           Filler          Contains ff ff\n\
    \    8..15          SND_SEQ         Encrypted sequence number field.\n    16..23\
    \         SGN_CKSUM       Checksum of plaintext padded data,\n               \
    \                    calculated according to algorithm\n                     \
    \              specified in SGN_ALG field.\n    24..last       Data          \
    \  encrypted or plaintext padded data\n   GSS-API tokens must be encapsulated\
    \ within the higher-level protocol\n   by the application; no embedded length\
    \ field is necessary.\n"
- title: 1.2.2.1. Checksum
  contents:
  - "1.2.2.1. Checksum\n   Checksum calculation procedure (common to all algorithms):\
    \ Checksums\n   are calculated over the plaintext padded data field, logically\n\
    \   prepended by the first 8 bytes of the plaintext packet header.  The\n   resulting\
    \ signature binds the data to the packet type, protocol\n   version, and signature\
    \ algorithm identifier fields.\n   DES MAC MD5 algorithm: The checksum is formed\
    \ by computing an MD5\n   hash over the plaintext padded data, and then computing\
    \ a DES-CBC MAC\n   on the 16-byte MD5 result.  A standard 64-bit DES-CBC MAC\
    \ is computed\n   per [FIPS-PUB-113], employing the context key and a zero IV.\
    \ The 8-\n   byte result is stored in the SGN_CKSUM field.\n   MD2.5 algorithm:\
    \ The checksum is formed by first DES-CBC encrypting a\n   16-byte zero-block,\
    \ using a zero IV and a key formed by reversing the\n   bytes of the context key\
    \ (i.e., if the original key is the 8-byte\n   sequence {aa, bb, cc, dd, ee, ff,\
    \ gg, hh}, the checksum key will be\n   {hh, gg, ff, ee, dd, cc, bb, aa}). The\
    \ resulting 16-byte value is\n   logically pre-pended to the \"to-be-signed data\"\
    .  A standard MD5\n   checksum is calculated over the combined data, and the first\
    \ 8 bytes\n   of the result are stored in the SGN_CKSUM field.\n   DES-MAC algorithm:\
    \ A standard 64-bit DES-CBC MAC is computed on the\n   plaintext padded data per\
    \ [FIPS-PUB-113], employing the context key\n   and a zero IV. The plaintext padded\
    \ data is already assured to be an\n   integral multiple of 8 bytes; no additional\
    \ padding is required or\n   applied in order to accomplish MAC calculation. \
    \ The result is an 8-\n   byte value, which is stored in the SGN_CKSUM field.\
    \  Support for this\n   lgorithm may not be present in all implementations.\n"
- title: 1.2.2.2. Sequence Number
  contents:
  - "1.2.2.2. Sequence Number\n   Sequence number field: The 8 byte plaintext sequence\
    \ number field is\n   formed from the sender's four-byte sequence number as follows.\
    \  If\n   the four bytes of the sender's sequence number are named s0, s1, s2\n\
    \   and s3 (from least to most significant), the plaintext sequence\n   number\
    \ field is the 8 byte sequence: (s0, s1, s2, s3, di, di, di,\n   di), where 'di'\
    \ is the direction-indicator (Hex 0 - sender is the\n   context initiator, Hex\
    \ FF - sender is the context acceptor).\n   The field is then DES-CBC encrypted\
    \ using the context key and an IV\n   formed from the first 8 bytes of the SEAL_CKSUM\
    \ field.\n   After sending a GSS_GetMIC() or GSS_Wrap() token, the sender's\n\
    \   sequence numbers are incremented by one.\n"
- title: 1.2.2.3. Padding
  contents:
  - "1.2.2.3. Padding\n   Data padding: Before encryption and/or signature calculation,\n\
    \   plaintext data is padded to the next highest multiple of 8 bytes, by\n   appending\
    \ between 1 and 8 bytes, the value of each such byte being\n   the total number\
    \ of pad bytes.  For example, given data of length 20\n   bytes, four pad bytes\
    \ will be appended, and each byte will contain\n   the hex value 04.  An 8-byte\
    \ random confounder is prepended to the\n   data, and signatures are calculated\
    \ over the resulting padded\n   plaintext.\n   After padding, the data is encrypted\
    \ according to the algorithm\n   specified in the SEAL_ALG field.  For SEAL_ALG=DES\
    \ (the only non-null\n   algorithm currently supported), the data is encrypted\
    \ using DES-CBC,\n   with an IV of zero.  The key used is derived from the established\n\
    \   context key by XOR-ing the context key with the hexadecimal constant\n   f0f0f0f0f0f0f0f0.\n"
- title: 1.2.3. Context deletion token
  contents:
  - "1.2.3. Context deletion token\n   The token emitted by GSS_Delete_sec_context()\
    \ is based on the packet\n   format for tokens emitted by GSS_GetMIC().  The context-deletion\n\
    \   token has the following format:\n   Byte no          Name           Description\n\
    \    0..1           TOK_ID          Identification field.\n                  \
    \                 Tokens emitted by\n                                   GSS_Delete_sec_context()\
    \ contain\n                                   the hex value 01 02 in this field.\n\
    \    2..3           SGN_ALG         Integrity algorithm indicator.\n         \
    \                          00 00 - DES MAC MD5\n                             \
    \      01 00 - MD2.5\n                                   02 00 - DES MAC\n   \
    \ 4..7           Filler          Contains ff ff ff ff\n    8..15          SND_SEQ\
    \         Sequence number field.\n    16..23         SGN_CKSUM       Checksum\
    \ of \"to-be-signed data\",\n                                   calculated according\
    \ to algorithm\n                                   specified in SGN_ALG field.\n\
    \   SGN_ALG and SND_SEQ will be calculated as for tokens emitted by\n   GSS_GetMIC().\
    \  The SGN_CKSUM will be calculated as for tokens emitted\n   by GSS_GetMIC(),\
    \ except that the user-data component of the \"to-be-\n   signed\" data will be\
    \ a zero-length string.\n"
- title: 2. Name Types and Object Identifiers
  contents:
  - "2. Name Types and Object Identifiers\n   This section discusses the name types\
    \ which may be passed as input to\n   the Kerberos V5 GSS-API mechanism's GSS_Import_name()\
    \ call, and their\n   associated identifier values.  It defines interface elements\
    \ in\n   support of portability, and assumes use of C language bindings per\n\
    \   RFC-1509.  In addition to specifying OID values for name type\n   identifiers,\
    \ symbolic names are included and recommended to GSS-API\n   implementors in the\
    \ interests of convenience to callers.  It is\n   understood that not all implementations\
    \ of the Kerberos V5 GSS-API\n   mechanism need support all name types in this\
    \ list, and that\n   additional name forms will likely be added to this list over\
    \ time.\n   Further, the definitions of some or all name types may later migrate\n\
    \   to other, mechanism-independent, specifications. The occurrence of a\n   name\
    \ type in this specification is specifically not intended to\n   suggest that\
    \ the type may be supported only by an implementation of\n   the Kerberos V5 mechanism.\
    \   In particular, the occurrence of the\n   string \"_KRB5_\" in the symbolic\
    \ name strings constitutes a means to\n   unambiguously register the name strings,\
    \ avoiding collision with\n   other documents; it is not meant to limit the name\
    \ types' usage or\n   applicability.\n   For purposes of clarification to GSS-API\
    \ implementors, this section's\n   discussion of some name forms describes means\
    \ through which those\n   forms can be supported with existing Kerberos technology.\
    \  These\n   discussions are not intended to preclude alternative implementation\n\
    \   strategies for support of the name forms within Kerberos mechanisms\n   or\
    \ mechanisms based on other technologies.  To enhance application\n   portability,\
    \ implementors of mechanisms are encouraged to support\n   name forms as defined\
    \ in this section, even if their mechanisms are\n   independent of Kerberos V5.\n"
- title: 2.1. Mandatory Name Forms
  contents:
  - "2.1. Mandatory Name Forms\n   This section discusses name forms which are to\
    \ be supported by all\n   conformant implementations of the Kerberos V5 GSS-API\
    \ mechanism.\n"
- title: 2.1.1. Kerberos Principal Name Form
  contents:
  - "2.1.1. Kerberos Principal Name Form\n   This name form shall be represented by\
    \ the Object Identifier {iso(1)\n   member-body(2) United States(840) mit(113554)\
    \ infosys(1) gssapi(2)\n   krb5(2) krb5_name(1)}.  The recommended symbolic name\
    \ for this type\n   is \"GSS_KRB5_NT_PRINCIPAL_NAME\".\n   This name type corresponds\
    \ to the single-string representation of a\n   Kerberos name.  (Within the MIT\
    \ Kerberos V5 implementation, such\n   names are parseable with the krb5_parse_name()\
    \ function.)  The\n   elements included within this name representation are as\
    \ follows,\n   proceeding from the beginning of the string:\n        (1) One or\
    \ more principal name components; if more than one\n        principal name component\
    \ is included, the components are\n        separated by `/`.  Arbitrary octets\
    \ may be included within\n        principal name components, with the following\
    \ constraints and\n        special considerations:\n           (1a) Any occurrence\
    \ of the characters `@` or `/` within a\n           name component must be immediately\
    \ preceded by the `\\`\n           quoting character, to prevent interpretation\
    \ as a component\n           or realm separator.\n           (1b) The ASCII newline,\
    \ tab, backspace, and null characters\n           may occur directly within the\
    \ component or may be\n           represented, respectively, by `\\n`, `\\t`,\
    \ `\\b`, or `\\0`.\n           (1c) If the `\\` quoting character occurs outside\
    \ the contexts\n           described in (1a) and (1b) above, the following character\
    \ is\n           interpreted literally.  As a special case, this allows the\n\
    \           doubled representation `\\\\` to represent a single occurrence\n \
    \          of the quoting character.\n           (1d) An occurrence of the `\\\
    ` quoting character as the last\n           character of a component is illegal.\n\
    \        (2) Optionally, a `@` character, signifying that a realm name\n     \
    \   immediately follows. If no realm name element is included, the\n        local\
    \ realm name is assumed.  The `/` , `:`, and null characters\n        may not\
    \ occur within a realm name; the `@`, newline, tab, and\n        backspace characters\
    \ may be included using the quoting\n        conventions described in (1a), (1b),\
    \ and (1c) above.\n"
- title: 2.1.2. Host-Based Service Name Form
  contents:
  - "2.1.2. Host-Based Service Name Form\n   This name form has been incorporated\
    \ at the mechanism-independent\n   GSS-API level as of GSS-API, Version 2.  This\
    \ subsection retains the\n   Object Identifier and symbolic name assignments previously\
    \ made at\n   the Kerberos V5 GSS-API mechanism level, and adopts the definition\
    \ as\n   promoted to the mechanism-independent level.\n   This name form shall\
    \ be represented by the Object Identifier {iso(1)\n   member-body(2) United States(840)\
    \ mit(113554) infosys(1) gssapi(2)\n   generic(1) service_name(4)}.  The previously\
    \ recommended symbolic\n   name for this type is \"GSS_KRB5_NT_HOSTBASED_SERVICE_NAME\"\
    .  The\n   currently preferred symbolic name for this type is\n   \"GSS_C_NT_HOSTBASED_SERVICE\"\
    .\n   This name type is used to represent services associated with host\n   computers.\
    \  This name form is constructed using two elements,\n   \"service\" and \"hostname\"\
    , as follows:\n      service@hostname\n   When a reference to a name of this type\
    \ is resolved, the \"hostname\"\n   is canonicalized by attempting a DNS lookup\
    \ and using the fully-\n   qualified domain name which is returned, or by using\
    \ the \"hostname\"\n   as provided if the DNS lookup fails.  The canonicalization\
    \ operation\n   also maps the host's name into lower-case characters.\n   The\
    \ \"hostname\" element may be omitted. If no \"@\" separator is\n   included,\
    \ the entire name is interpreted as the service specifier,\n   with the \"hostname\"\
    \ defaulted to the canonicalized name of the local\n   host.\n   Values for the\
    \ \"service\" element will be registered with the IANA.\n"
- title: 2.1.3. Exported Name Object Form for Kerberos V5 Mechanism
  contents:
  - "2.1.3. Exported Name Object Form for Kerberos V5 Mechanism\n   Support for this\
    \ name form is not required for GSS-V1\n   implementations, but will be required\
    \ for use in conjunction with the\n   GSS_Export_name() call planned for GSS-API\
    \ Version 2.  Use of this\n   name form will be signified by a \"GSS-API Exported\
    \ Name Object\" OID\n   value which will be defined at the mechanism-independent\
    \ level for\n   GSS-API Version 2.\n   This name type represents a self-describing\
    \ object, whose framing\n   structure will be defined at the mechanism-independent\
    \ level for\n   GSS-API Version 2.  When generated by the Kerberos V5 mechanism,\
    \ the\n   Mechanism OID within the exportable name shall be that of the\n   Kerberos\
    \ V5 mechanism.  The name component within the exportable name\n   shall be a\
    \ contiguous string with structure as defined for the\n   Kerberos Principal Name\
    \ Form.\n   In order to achieve a distinguished encoding for comparison purposes,\n\
    \   the following additional constraints are imposed on the export\n   operation:\n\
    \        (1) all occurrences of the characters `@`,  `/`, and `\\` within\n  \
    \      principal components or realm names shall be quoted with an\n        immediately-preceding\
    \ `\\`.\n        (2) all occurrences of the null, backspace, tab, or newline\n\
    \        characters within principal components or realm names will be\n     \
    \   represented, respectively, with `\\0`, `\\b`, `\\t`, or `\\n`.\n        (3)\
    \ the `\\` quoting character shall not be emitted within an\n        exported\
    \ name except to accomodate cases (1) and (2).\n"
- title: 2.2. Optional Name Forms
  contents:
  - "2.2. Optional Name Forms\n   This section discusses additional name forms which\
    \ may optionally be\n   supported by implementations of the Kerberos V5 GSS-API\
    \ mechanism.\n   It is recognized that some of the name forms cited here are derived\n\
    \   from UNIX(tm) operating system platforms; some listed forms may be\n   irrelevant\
    \ to non-UNIX platforms, and definition of additional forms\n   corresponding\
    \ to such platforms may also be appropriate.  It is also\n   recognized that OS-specific\
    \ functions outside GSS-API are likely to\n   exist in order to perform translations\
    \ among these forms, and that\n   GSS-API implementations supporting these forms\
    \ may themselves be\n   layered atop such OS-specific functions.  Inclusion of\
    \ this support\n   within GSS-API implementations is intended as a convenience\
    \ to\n   applications.\n"
- title: 2.2.1. User Name Form
  contents:
  - "2.2.1. User Name Form\n   This name form shall be represented by the Object Identifier\
    \ {iso(1)\n   member-body(2) United States(840) mit(113554) infosys(1) gssapi(2)\n\
    \   generic(1) user_name(1)}.  The recommended symbolic name for this\n   type\
    \ is \"GSS_KRB5_NT_USER_NAME\".\n   This name type is used to indicate a named\
    \ user on a local system.\n   Its interpretation is OS-specific.  This name form\
    \ is constructed as:\n      username\n   Assuming that users' principal names\
    \ are the same as their local\n   operating system names, an implementation of\
    \ GSS_Import_name() based\n   on Kerberos V5 technology can process names of this\
    \ form by\n   postfixing an \"@\" sign and the name of the local realm.\n"
- title: 2.2.2. Machine UID Form
  contents:
  - "2.2.2. Machine UID Form\n   This name form shall be represented by the Object\
    \ Identifier {iso(1)\n   member-body(2) United States(840) mit(113554) infosys(1)\
    \ gssapi(2)\n   generic(1) machine_uid_name(2)}.  The recommended symbolic name\
    \ for\n   this type is \"GSS_KRB5_NT_MACHINE_UID_NAME\".\n   This name type is\
    \ used to indicate a numeric user identifier\n   corresponding to a user on a\
    \ local system.  Its interpretation is\n   OS-specific.  The gss_buffer_desc representing\
    \ a name of this type\n   should contain a locally-significant uid_t, represented\
    \ in host byte\n   order.  The GSS_Import_name() operation resolves this uid into\
    \ a\n   username, which is then treated as the User Name Form.\n"
- title: 2.2.3. String UID Form
  contents:
  - "2.2.3. String UID Form\n   This name form shall be represented by the Object\
    \ Identifier {iso(1)\n   member-body(2) United States(840) mit(113554) infosys(1)\
    \ gssapi(2)\n   generic(1) string_uid_name(3)}.  The recommended symbolic name\
    \ for\n   this type is \"GSS_KRB5_NT_STRING_UID_NAME\".\n   This name type is\
    \ used to indicate a string of digits representing\n   the numeric user identifier\
    \ of a user on a local system.  Its\n   interpretation is OS-specific. This name\
    \ type is similar to the\n   Machine UID Form, except that the buffer contains\
    \ a string\n   representing the uid_t.\n"
- title: 3. Credentials Management
  contents:
  - "3. Credentials Management\n   The Kerberos V5 protocol uses different credentials\
    \ (in the GSSAPI\n   sense) for initiating and accepting security contexts.  Normal\n\
    \   clients receive a ticket-granting ticket (TGT) and an associated\n   session\
    \ key at \"login\" time; the pair of a TGT and its corresponding\n   session key\
    \ forms a credential which is suitable for initiating\n   security contexts. \
    \ A ticket-granting ticket, its session key, and\n   any other (ticket, key) pairs\
    \ obtained through use of the ticket-\n   granting-ticket, are typically stored\
    \ in a Kerberos V5 credentials\n   cache, sometimes known as a ticket file.\n\
    \   The encryption key used by the Kerberos server to seal tickets for a\n   particular\
    \ application service forms the credentials suitable for\n   accepting security\
    \ contexts.  These service keys are typically stored\n   in a Kerberos V5 key\
    \ table, or srvtab file.  In addition to their use\n   as accepting credentials,\
    \ these service keys may also be used to\n   obtain initiating credentials for\
    \ their service principal.\n   The Kerberos V5 mechanism's credential handle may\
    \ contain references\n   to either or both types of credentials.  It is a local\
    \ matter how the\n   Kerberos V5 mechanism implementation finds the appropriate\
    \ Kerberos\n   V5 credentials cache or key table.\n   However, when the Kerberos\
    \ V5 mechanism attempts to obtain initiating\n   credentials for a service principal\
    \ which are not available in a\n   credentials cache, and the key for that service\
    \ principal is\n   available in a Kerberos V5 key table, the mechanism should\
    \ use the\n   service key to obtain initiating credentials for that service. \
    \ This\n   should be accomplished by requesting a ticket-granting-ticket from\n\
    \   the Kerberos Key Distribution Center (KDC), and decrypting the KDC's\n   reply\
    \ using the service key.\n"
- title: 4. Parameter Definitions
  contents:
  - "4. Parameter Definitions\n   This section defines parameter values used by the\
    \ Kerberos V5 GSS-API\n   mechanism.  It defines interface elements in support\
    \ of portability,\n   and assumes use of C language bindings per RFC-1509.\n"
- title: 4.1. Minor Status Codes
  contents:
  - "4.1. Minor Status Codes\n   This section recommends common symbolic names for\
    \ minor_status values\n   to be returned by the Kerberos V5 GSS-API mechanism.\
    \  Use of these\n   definitions will enable independent implementors to enhance\n\
    \   application portability across different implementations of the\n   mechanism\
    \ defined in this specification.  (In all cases,\n   implementations of GSS_Display_status()\
    \ will enable callers to\n   convert minor_status indicators to text representations.)\
    \ Each\n   implementation should make available, through include files or other\n\
    \   means, a facility to translate these symbolic names into the concrete\n  \
    \ values which a particular GSS-API implementation uses to represent\n   the minor_status\
    \ values specified in this section.\n   It is recognized that this list may grow\
    \ over time, and that the need\n   for additional minor_status codes specific\
    \ to particular\n   implementations may arise.  It is recommended, however, that\n\
    \   implementations should return a minor_status value as defined on a\n   mechanism-wide\
    \ basis within this section when that code is accurately\n   representative of\
    \ reportable status rather than using a separate,\n   implementation-defined code.\n"
- title: 4.1.1. Non-Kerberos-specific codes
  contents:
  - "4.1.1. Non-Kerberos-specific codes\n   GSS_KRB5_S_G_BAD_SERVICE_NAME\n      \
    \     /* \"No @ in SERVICE-NAME name string\" */\n   GSS_KRB5_S_G_BAD_STRING_UID\n\
    \           /* \"STRING-UID-NAME contains nondigits\" */\n   GSS_KRB5_S_G_NOUSER\n\
    \           /* \"UID does not resolve to username\" */\n   GSS_KRB5_S_G_VALIDATE_FAILED\n\
    \           /* \"Validation error\" */\n   GSS_KRB5_S_G_BUFFER_ALLOC\n       \
    \    /* \"Couldn't allocate gss_buffer_t data\" */\n   GSS_KRB5_S_G_BAD_MSG_CTX\n\
    \           /* \"Message context invalid\" */\n   GSS_KRB5_S_G_WRONG_SIZE\n  \
    \         /* \"Buffer is the wrong size\" */\n   GSS_KRB5_S_G_BAD_USAGE\n    \
    \       /* \"Credential usage type is unknown\" */\n   GSS_KRB5_S_G_UNKNOWN_QOP\n\
    \           /* \"Unknown quality of protection specified\" */\n"
- title: 4.1.2. Kerberos-specific-codes
  contents:
  - "4.1.2. Kerberos-specific-codes\n   GSS_KRB5_S_KG_CCACHE_NOMATCH\n           /*\
    \ \"Principal in credential cache does not match desired name\" */\n   GSS_KRB5_S_KG_KEYTAB_NOMATCH\n\
    \           /* \"No principal in keytab matches desired name\" */\n   GSS_KRB5_S_KG_TGT_MISSING\n\
    \           /* \"Credential cache has no TGT\" */\n   GSS_KRB5_S_KG_NO_SUBKEY\n\
    \           /* \"Authenticator has no subkey\" */\n   GSS_KRB5_S_KG_CONTEXT_ESTABLISHED\n\
    \           /* \"Context is already fully established\" */\n   GSS_KRB5_S_KG_BAD_SIGN_TYPE\n\
    \           /* \"Unknown signature type in token\" */\n   GSS_KRB5_S_KG_BAD_LENGTH\n\
    \           /* \"Invalid field length in token\" */\n   GSS_KRB5_S_KG_CTX_INCOMPLETE\n\
    \           /* \"Attempt to use incomplete security context\" */\n"
- title: 4.2. Quality of Protection Values
  contents:
  - "4.2. Quality of Protection Values\n   This section defines Quality of Protection\
    \ (QOP) values to be used\n   with the Kerberos V5 GSS-API mechanism as input\
    \ to GSS_Wrap() and\n   GSS_GetMIC() routines in order to select among alternate\
    \ integrity\n   and confidentiality algorithms. Additional QOP values may be added\
    \ in\n   future versions of this specification.  Non-overlapping bit positions\n\
    \   are and will be employed in order that both integrity and\n   confidentiality\
    \ QOP may be selected within a single parameter, via\n   inclusive-OR of the specified\
    \ integrity and confidentiality values.\n"
- title: 4.2.1. Integrity Algorithms
  contents:
  - "4.2.1. Integrity Algorithms\n   The following Quality of Protection (QOP) values\
    \ are currently\n   defined for the Kerberos V5 GSS-API mechanism, and are used\
    \ to select\n   among alternate integrity checking algorithms.\n   GSS_KRB5_INTEG_C_QOP_MD5\
    \        (numeric value: 1)\n           /* Integrity using partial MD5 (\"MD2.5\"\
    ) of plaintext */\n   GSS_KRB5_INTEG_C_QOP_DES_MD5    (numeric value: 2)\n   \
    \        /* Integrity using DES MAC of MD5 of plaintext */\n   GSS_KRB5_INTEG_C_QOP_DES_MAC\
    \    (numeric value: 3)\n           /* Integrity using DES MAC of plaintext */\n"
- title: 4.2.2. Confidentiality Algorithms
  contents:
  - "4.2.2. Confidentiality Algorithms\n   Only one confidentiality QOP value is currently\
    \ defined for the\n   Kerberos V5 GSS-API mechanism:\n   GSS_KRB5_CONF_C_QOP_DES\
    \         (numeric value: 0)\n           /* Confidentiality with DES */\n   Note:\
    \ confidentiality QOP should be indicated only by GSS-API calls\n   capable of\
    \ providing confidentiality services. If non-zero\n   confidentiality QOP values\
    \ are defined in future to represent\n   different algorithms, therefore, the\
    \ bit positions containing those\n   values should be cleared before being returned\
    \ by implementations of\n   GSS_GetMIC() and GSS_VerifyMIC().\n"
- title: 4.3. Buffer Sizes
  contents:
  - "4.3. Buffer Sizes\n   All implementations of this specification shall be capable\
    \ of\n   accepting buffers of at least 16 Kbytes as input to GSS_GetMIC(),\n \
    \  GSS_VerifyMIC(), and GSS_Wrap(), and shall be capable of accepting\n   the\
    \ output_token generated by GSS_Wrap() for a 16 Kbyte input buffer\n   as input\
    \ to GSS_Unwrap(). Support for larger buffer sizes is optional\n   but recommended.\n"
- title: 5. Security Considerations
  contents:
  - "5. Security Considerations\n   Security issues are discussed throughout this\
    \ memo.\n"
- title: 6. References
  contents:
  - "6. References\n   [RFC-1321]: Rivest, R., \"The MD5 Message-Digest Algorithm\"\
    , RFC\n   1321, April 1992.\n   [RFC-1508]: Linn, J., \"Generic Security Service\
    \ Application Program\n   Interface\", RFC 1508, September 1993.\n   [RFC-1509]:\
    \ Wray, J., \"Generic Security Service Application Program\n   Interface: C-bindings\"\
    , RFC 1509, September 1993.\n   [RFC-1510]: Kohl, J., and C. Neuman, \"The Kerberos\
    \ Network\n   Authentication Service (V5)\", RFC 1510, September 1993.\n   [FIPS-PUB-113]:\
    \ National Bureau of Standards, Federal Information\n   Processing Standard 113,\
    \ \"Computer Data Authentication\", May 1985.\n"
- title: AUTHOR'S ADDRESS
  contents:
  - "AUTHOR'S ADDRESS\n   John Linn\n   OpenVision Technologies\n   One Main St.\n\
    \   Cambridge, MA  02142  USA\n   Phone: +1 617.374.2245\n   EMail: John.Linn@ov.com\n"
