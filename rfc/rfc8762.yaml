- title: __initial_text__
  contents:
  - '               Simple Two-Way Active Measurement Protocol

    '
- title: Abstract
  contents:
  - "Abstract\n   This document describes the Simple Two-way Active Measurement\n\
    \   Protocol (STAMP), which enables the measurement of both one-way and\n   round-trip\
    \ performance metrics, like delay, delay variation, and\n   packet loss.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 7841.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8762.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2020 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (https://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction\n   2.  Conventions Used in This Document\n\
    \     2.1.  Terminology\n     2.2.  Requirements Language\n   3.  Operation and\
    \ Management of Performance Measurement Based on\n           STAMP\n   4.  Theory\
    \ of Operation\n     4.1.  UDP Port Numbers in STAMP Testing\n     4.2.  Session-Sender\
    \ Behavior and Packet Format\n       4.2.1.  Session-Sender Packet Format in Unauthenticated\
    \ Mode\n       4.2.2.  Session-Sender Packet Format in Authenticated Mode\n  \
    \   4.3.  Session-Reflector Behavior and Packet Format\n       4.3.1.  Session-Reflector\
    \ Packet Format in Unauthenticated Mode\n       4.3.2.  Session-Reflector Packet\
    \ Format in Authenticated Mode\n     4.4.  Integrity Protection in STAMP\n   \
    \  4.5.  Confidentiality Protection in STAMP\n     4.6.  Interoperability with\
    \ TWAMP Light\n   5.  Operational Considerations\n   6.  IANA Considerations\n\
    \   7.  Security Considerations\n   8.  References\n     8.1.  Normative References\n\
    \     8.2.  Informative References\n   Acknowledgments\n   Authors' Addresses\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Development and deployment of the Two-Way Active Measurement\
    \ Protocol\n   (TWAMP) [RFC5357] and its extensions (e.g., [RFC6038], which defines\n\
    \   Symmetrical Size for TWAMP) provided invaluable experience.  Several\n   independent\
    \ implementations of both TWAMP and TWAMP Light exist, have\n   been deployed,\
    \ and provide important operational performance\n   measurements.\n   At the same\
    \ time, there has been noticeable interest in using a more\n   straightforward\
    \ mechanism for active performance monitoring that can\n   provide deterministic\
    \ behavior and inherent separation of control\n   (vendor-specific configuration\
    \ or orchestration) and test functions.\n   Recent work on \"Performance Measurement\
    \ from IP Edge to Customer\n   Equipment using TWAMP Light\" [BBF.TR-390] by the\
    \ Broadband Forum\n   demonstrates that interoperability among implementations\
    \ of TWAMP\n   Light is difficult because the composition and operation of TWAMP\n\
    \   Light were not sufficiently specified in [RFC5357].  According to\n   [RFC8545],\
    \ TWAMP Light includes a subset of TWAMP-Test functions.\n   Thus, to have a comprehensive\
    \ tool to measure packet loss and delay\n   requires support by other applications\
    \ that provide, for example,\n   control and security.\n   This document defines\
    \ an active performance measurement test\n   protocol, Simple Two-way Active Measurement\
    \ Protocol (STAMP), that\n   enables measurement of both one-way and round-trip\
    \ performance\n   metrics, like delay, delay variation, and packet loss.  Support\
    \ of\n   some optional TWAMP extensions, e.g., [RFC7750], is discussed in\n  \
    \ [STAMP-OPTION].\n"
- title: 2.  Conventions Used in This Document
  contents:
  - '2.  Conventions Used in This Document

    '
- title: 2.1.  Terminology
  contents:
  - "2.1.  Terminology\n   STAMP:      Simple Two-way Active Measurement Protocol\n\
    \   NTP:        Network Time Protocol\n   PTP:        Precision Time Protocol\n\
    \   HMAC:       Hashed Message Authentication Code\n   OWAMP:      One-Way Active\
    \ Measurement Protocol\n   TWAMP:      Two-Way Active Measurement Protocol\n \
    \  MBZ:        Must be Zero\n   PDU:        Protocol Data Unit\n"
- title: 2.2.  Requirements Language
  contents:
  - "2.2.  Requirements Language\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    NOT RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted\
    \ as described in\n   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear\
    \ in all\n   capitals, as shown here.\n"
- title: 3.  Operation and Management of Performance Measurement Based on STAMP
  contents:
  - "3.  Operation and Management of Performance Measurement Based on STAMP\n   Figure\
    \ 1 presents the Simple Two-way Active Measurement Protocol\n   (STAMP) Session-Sender\
    \ and Session-Reflector with a measurement\n   session.  In this document, a measurement\
    \ session, also referred to\n   as a \"STAMP session\", is the bidirectional packet\
    \ flow between one\n   specific Session-Sender and one particular Session-Reflector\
    \ for a\n   time duration.  The configuration and management of the STAMP\n  \
    \ Session-Sender, Session-Reflector, and sessions are outside the scope\n   of\
    \ this document and can be achieved through various means.  A few\n   examples\
    \ are Command Line Interface, telecommunication services'\n   Operational Support\
    \ System (OSS) / Business Support System (BSS),\n   SNMP, and NETCONF/YANG-based\
    \ Software-Defined Networking (SDN)\n   controllers.\n         o----------------------------------------------------------o\n\
    \         o----------------------------------------------------------o\n     |\
    \ STAMP Session-Sender | <--- STAMP---> | STAMP Session-Reflector |\n        \
    \              Figure 1: STAMP Reference Model\n"
- title: 4.  Theory of Operation
  contents:
  - "4.  Theory of Operation\n   The STAMP Session-Sender transmits test packets over\
    \ UDP transport\n   toward the STAMP Session-Reflector.  The STAMP Session-Reflector\n\
    \   receives the Session-Sender's packet and acts according to the\n   configuration.\
    \  Two modes of the STAMP Session-Reflector characterize\n   the expected behavior\
    \ and, consequently, performance metrics that can\n   be measured:\n   Stateless:\n\
    \      The STAMP Session-Reflector does not maintain test state and will\n   \
    \   use the value in the Sequence Number field in the received packet\n      as\
    \ the value for the Sequence Number field in the reflected\n      packet.  As\
    \ a result, values in the Sequence Number and Session-\n      Sender Sequence\
    \ Number fields are the same, and only round-trip\n      packet loss can be calculated\
    \ while the reflector is operating in\n      stateless mode.\n   Stateful:\n \
    \     STAMP Session-Reflector maintains the test state, thus allowing\n      the\
    \ Session-Sender to determine directionality of loss using the\n      combination\
    \ of gaps recognized in the Session Sender Sequence\n      Number and Sequence\
    \ Number fields, respectively.  As a result,\n      both near-end (forward) and\
    \ far-end (backward) packet loss can be\n      computed.  That implies that the\
    \ STAMP Session-Reflector MUST\n      maintain a state for each configured STAMP-Test\
    \ session, thereby\n      uniquely associating STAMP-Test packets with one such\
    \ session\n      instance and, thus, enabling the addition of a sequence number\
    \ in\n      the test reply that is individually incremented by one on a per-\n\
    \      session basis.\n   STAMP supports two authentication modes: unauthenticated\
    \ and\n   authenticated.  Unauthenticated STAMP-Test packets, defined in\n   Sections\
    \ 4.2.1 and 4.3.1, ensure interworking between STAMP and TWAMP\n   Light, as described\
    \ in Section 4.6 regarding packet formats.\n   By default, STAMP uses symmetrical\
    \ packets, i.e., the size of the\n   packet transmitted by the Session-Reflector\
    \ equals the size of the\n   packet received by the Session-Reflector.\n"
- title: 4.1.  UDP Port Numbers in STAMP Testing
  contents:
  - "4.1.  UDP Port Numbers in STAMP Testing\n   A STAMP Session-Sender MUST use UDP\
    \ port 862 (TWAMP-Test Receiver\n   Port) as the default destination UDP port\
    \ number.  A STAMP\n   implementation of the Session-Sender MUST be able to be\
    \ used as the\n   destination UDP port numbers from the User Ports (aka Registered\n\
    \   Ports) and Dynamic Ports (aka Private or Ephemeral Ports) ranges\n   defined\
    \ in [RFC6335].  Before using numbers from the User Ports\n   range, the possible\
    \ impact on the network MUST be carefully studied\n   and agreed on by all users\
    \ of the network domain where the test has\n   been planned.\n   By default, an\
    \ implementation of the STAMP Session-Reflector MUST\n   receive STAMP-Test packets\
    \ on UDP port 862.  An implementation of the\n   Session-Reflector that supports\
    \ this specification MUST be able to\n   define the port number to receive STAMP-Test\
    \ packets from User Ports\n   and Dynamic Ports ranges, which are defined in [RFC6335].\
    \  STAMP\n   defines two different test packet formats: one for packets\n   transmitted\
    \ by the STAMP Session-Sender and one for packets\n   transmitted by the STAMP\
    \ Session-Reflector.\n"
- title: 4.2.  Session-Sender Behavior and Packet Format
  contents:
  - "4.2.  Session-Sender Behavior and Packet Format\n   A STAMP Session-Reflector\
    \ supports the symmetrical size of test\n   packets, as defined in Section 3 of\
    \ [RFC6038], as the default\n   behavior.  A reflected base test packet includes\
    \ information from the\n   Session-Reflector and, thus, is larger.  To maintain\
    \ the symmetry\n   between base STAMP packets, the base STAMP Session-Sender packet\n\
    \   includes the Must-Be-Zero (MBZ) field to match to the size of a base\n   reflected\
    \ STAMP test packet.  Hence, the base STAMP Session-Sender\n   packet has a minimum\
    \ size of 44 octets in unauthenticated mode (see\n   Figure 2) and 112 octets\
    \ in the authenticated mode (see Figure 4).\n   Generating variable length of\
    \ a test packet in STAMP is defined in\n   [STAMP-OPTION].\n"
- title: 4.2.1.  Session-Sender Packet Format in Unauthenticated Mode
  contents:
  - "4.2.1.  Session-Sender Packet Format in Unauthenticated Mode\n       0      \
    \             1                   2                   3\n       0 1 2 3 4 5 6\
    \ 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      |                 \
    \       Sequence Number                        |\n      |         Error Estimate\
    \        |                               |\n      |                        MBZ\
    \  (30 octets)                       |\n            Figure 2: STAMP Session-Sender\
    \ Test Packet Format in\n                            Unauthenticated Mode\n  \
    \ The fields are defined as following:\n   *  The Sequence Number field is four\
    \ octets long.  For each new\n      session, its value starts at zero and is incremented\
    \ by one with\n      each transmitted packet.\n   *  The Timestamp field is eight\
    \ octets long.  The STAMP node MUST\n      support the Network Time Protocol (NTP)\
    \ version 4 64-bit timestamp\n      format [RFC5905], the format used in [RFC5357].\
    \  The STAMP node\n      MAY support the IEEE 1588v2 Precision Time Protocol (PTP)\n\
    \      truncated 64-bit timestamp format [IEEE.1588.2008], the format\n      used\
    \ in [RFC8186].  The use of the specific format, NTP or PTP, is\n      part of\
    \ configuration of the Session-Sender or the particular test\n      session.\n\
    \   *  The Error Estimate field is two octets long with the format\n      displayed\
    \ in Figure 3:\n               0                   1\n               0 1 2 3 4\
    \ 5 6 7 8 9 0 1 2 3 4 5\n              |S|Z|   Scale   |   Multiplier  |\n   \
    \                    Figure 3: Error Estimate Format\n      The S, Scale, and\
    \ Multiplier fields are interpreted as they are\n      defined in Section 4.1.2\
    \ of [RFC4656].  The Z field is interpreted\n      as it is defined in Section\
    \ 2.3 of [RFC8186]:\n      0:  NTP 64-bit format of a timestamp\n      1:  PTPv2\
    \ truncated format of a timestamp\n      The default behavior of the STAMP Session-Sender\
    \ and Session-\n      Reflector is to use the NTP 64-bit timestamp format (Z field\
    \ value\n      of 0).  An operator using configuration/management function MAY\n\
    \      configure the STAMP Session-Sender and Session-Reflector to use\n     \
    \ the PTPv2 truncated format of a timestamp (Z field value of 1).\n      Note\
    \ that an implementation of a Session-Sender that supports this\n      specification\
    \ MAY be configured to use the PTPv2 format of a\n      timestamp even though\
    \ the Session-Reflector is configured to use\n      NTP format.\n   *  The MBZ\
    \ field in the Session-Sender unauthenticated packet is 30\n      octets long.\
    \  It MUST be all zeroed on the transmission and MUST\n      be ignored on receipt.\n"
- title: 4.2.2.  Session-Sender Packet Format in Authenticated Mode
  contents:
  - "4.2.2.  Session-Sender Packet Format in Authenticated Mode\n     0          \
    \         1                   2                   3\n     0 1 2 3 4 5 6 7 8 9\
    \ 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n    |                      Sequence\
    \ Number                          |\n    |                      MBZ (12 octets)\
    \                          |\n    |                        Timestamp         \
    \                     |\n    |        Error Estimate         |               \
    \                |\n    |                         MBZ (70 octets)            \
    \           |\n    |                       HMAC (16 octets)                  \
    \      |\n            Figure 4: STAMP Session-Sender Test Packet Format in\n \
    \                            Authenticated Mode\n   The field definitions are\
    \ the same as the unauthenticated mode,\n   listed in Section 4.2.1.  Also, MBZ\
    \ fields are used to make the\n   packet length a multiple of 16 octets.  The\
    \ value of the field MUST\n   be zeroed on transmission and MUST be ignored on\
    \ receipt.  Note, that\n   both MBZ fields are used to calculate a key hashed\
    \ message\n   authentication code (HMAC) [RFC2104] hash.  Also, the packet includes\n\
    \   an HMAC hash at the end of the PDU.  The detailed use of the HMAC\n   field\
    \ is described in Section 4.4.\n"
- title: 4.3.  Session-Reflector Behavior and Packet Format
  contents:
  - "4.3.  Session-Reflector Behavior and Packet Format\n   The Session-Reflector\
    \ receives the STAMP-Test packet and verifies it.\n   If the base STAMP-Test packet\
    \ is validated, the Session-Reflector\n   that supports this specification prepares\
    \ and transmits the reflected\n   test packet symmetric to the packet received\
    \ from the Session-Sender\n   copying the content beyond the size of the base\
    \ STAMP packet (see\n   Section 4.2).\n"
- title: 4.3.1.  Session-Reflector Packet Format in Unauthenticated Mode
  contents:
  - "4.3.1.  Session-Reflector Packet Format in Unauthenticated Mode\n     0     \
    \              1                   2                   3\n     0 1 2 3 4 5 6 7\
    \ 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n    |                     \
    \   Sequence Number                        |\n    |                          Timestamp\
    \                            |\n    |         Error Estimate        |        \
    \    MBZ                |\n    |                          Receive Timestamp  \
    \                  |\n    |                 Session-Sender Sequence Number   \
    \             |\n    |                  Session-Sender Timestamp             \
    \        |\n    | Session-Sender Error Estimate |            MBZ             \
    \   |\n    |Ses-Sender TTL |                      MBZ                      |\n\
    \          Figure 5: STAMP Session-Reflector Test Packet Format in\n         \
    \                   Unauthenticated Mode\n   Fields are defined as the following:\n\
    \   *  The Sequence Number field is four octets long.  The value of the\n    \
    \  Sequence Number field is set according to the mode of the STAMP\n      Session-Reflector:\n\
    \      -  In the stateless mode, the Session-Reflector copies the value\n    \
    \     from the received STAMP-Test packet's Sequence Number field.\n      -  In\
    \ the stateful mode, the Session-Reflector counts the\n         transmitted STAMP-Test\
    \ packets.  It starts with zero and is\n         incremented by one for each subsequent\
    \ packet for each test\n         session.  The Session-Reflector uses that counter\
    \ to set the\n         value of the Sequence Number field.\n   *  The Timestamp\
    \ and Receive Timestamp fields are each eight octets\n      long.  The format\
    \ of these fields, NTP or PTPv2, is indicated by\n      the Z field of the Error\
    \ Estimate field, as described in\n      Section 4.2.1.  Receive Timestamp is\
    \ the time the test packet was\n      received by the Session-Reflector.  Timestamp\
    \ is the time taken by\n      the Session-Reflector at the start of transmitting\
    \ the test\n      packet.\n   *  The Error Estimate field has the same size and\
    \ interpretation as\n      described in Section 4.2.1.  It is applicable to both\
    \ Timestamp\n      and Receive Timestamp.\n   *  The Session-Sender Sequence Number,\
    \ Session-Sender Timestamp, and\n      Session-Sender Error Estimate fields are\
    \ copies of the\n      corresponding fields in the STAMP-Test packet sent by the\
    \ Session-\n      Sender.\n   *  The Session-Sender TTL field is one octet long,\
    \ and its value is\n      the copy of the TTL field in IPv4 (or Hop Limit in IPv6)\
    \ from the\n      received STAMP-Test packet.\n   *  The MBZ fields are used to\
    \ achieve alignment of fields within the\n      packet on a four-octet boundary.\
    \  The value of each MBZ field MUST\n      be zeroed on transmission and MUST\
    \ be ignored on receipt.\n"
- title: 4.3.2.  Session-Reflector Packet Format in Authenticated Mode
  contents:
  - "4.3.2.  Session-Reflector Packet Format in Authenticated Mode\n      0      \
    \             1                   2                   3\n      0 1 2 3 4 5 6 7\
    \ 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      |                   \
    \     Sequence Number                        |\n      |                      \
    \  MBZ (12 octets)                        |\n      |         Error Estimate  \
    \      |                               |\n      |                        MBZ (6\
    \ octets)                         |\n      |                        Receive Timestamp\
    \                      |\n      |                        MBZ (8 octets)      \
    \                   |\n      |                 Session-Sender Sequence Number\
    \                |\n      |                        MBZ (12 octets)           \
    \             |\n      |                 Session-Sender Timestamp            \
    \          |\n      | Session-Sender Error Estimate |                        \
    \       |\n      |                        MBZ (6 octets)                     \
    \    |\n      |Ses-Sender TTL |                                              \
    \ |\n      |                        MBZ (15 octets)                        |\n\
    \      |                        HMAC (16 octets)                       |\n   \
    \       Figure 6: STAMP Session-Reflector Test Packet Format in\n            \
    \                 Authenticated Mode\n   The field definitions are the same as\
    \ the unauthenticated mode,\n   listed in Section 4.3.1.  Additionally, the MBZ\
    \ field is used to make\n   the packet length a multiple of 16 octets.  The value\
    \ of the field\n   MUST be zeroed on transmission and MUST be ignored on receipt.\
    \  Note\n   that the MBZ field is used to calculate the HMAC hash value.  Also,\n\
    \   the STAMP Session-Reflector test packet format in authenticated mode\n   includes\
    \ the HMAC [RFC2104] hash at the end of the PDU.  The detailed\n   use of the\
    \ HMAC field is in Section 4.4.\n"
- title: 4.4.  Integrity Protection in STAMP
  contents:
  - "4.4.  Integrity Protection in STAMP\n   Authenticated mode provides integrity\
    \ protection to each STAMP\n   message by adding Hashed Message Authentication\
    \ Code (HMAC).  STAMP\n   uses HMAC-SHA-256 truncated to 128 bits (similarly to\
    \ the use of it\n   in IPsec defined in [RFC4868]); hence, the length of the HMAC\
    \ field\n   is 16 octets.  In the authenticated mode, HMAC covers the first six\n\
    \   blocks (96 octets).  HMAC uses its own key, which may be unique for\n   each\
    \ STAMP-Test session; key management and the mechanisms to\n   distribute the\
    \ HMAC key are outside the scope of this specification.\n   One example is to\
    \ use an orchestrator to configure the HMAC key based\n   on the STAMP YANG data\
    \ model [STAMP-YANG].  HMAC MUST be verified as\n   early as possible to avoid\
    \ using or propagating corrupted data.\n   Future specifications may define the\
    \ use of other, more advanced\n   cryptographic algorithms, possibly providing\
    \ an update to the STAMP\n   YANG data model [STAMP-YANG].\n"
- title: 4.5.  Confidentiality Protection in STAMP
  contents:
  - "4.5.  Confidentiality Protection in STAMP\n   If confidentiality protection for\
    \ STAMP is required, a STAMP-Test\n   session MUST use a secured transport.  For\
    \ example, STAMP packets\n   could be transmitted in the dedicated IPsec tunnel\
    \ or share the IPsec\n   tunnel with the monitored flow.  Also, the Datagram Transport\
    \ Layer\n   Security protocol would provide the desired confidentiality\n   protection.\n"
- title: 4.6.  Interoperability with TWAMP Light
  contents:
  - "4.6.  Interoperability with TWAMP Light\n   One of the essential requirements\
    \ to STAMP is the ability to\n   interwork with a TWAMP Light device.  Because\
    \ STAMP and TWAMP use\n   different algorithms in authenticated mode (HMAC-SHA-256\
    \ versus HMAC-\n   SHA-1), interoperability is only considered for unauthenticated\
    \ mode.\n   There are two possible combinations for such a use case:\n   *  STAMP\
    \ Session-Sender with TWAMP Light Session-Reflector\n   *  TWAMP Light Session-Sender\
    \ with STAMP Session-Reflector\n   In the former case, the Session-Sender might\
    \ not be aware that its\n   Session-Reflector does not support STAMP.  For example,\
    \ a TWAMP Light\n   Session-Reflector may not support the use of UDP port 862,\
    \ as\n   specified in [RFC8545].  Thus, Section 4 permits a STAMP Session-\n \
    \  Sender to use alternative ports.  If any of STAMP extensions are\n   used,\
    \ the TWAMP Light Session-Reflector will view them as the Packet\n   Padding field.\n\
    \   In the latter scenario, if a TWAMP Light Session-Sender does not\n   support\
    \ the use of UDP port 862, the test management system MUST set\n   the STAMP Session-Reflector\
    \ to use UDP port number, as permitted by\n   Section 4.  The Session-Reflector\
    \ MUST be set to use the default\n   format for its timestamps, NTP.\n   A STAMP\
    \ Session-Reflector that supports this specification will\n   transmit the base\
    \ packet (Figure 5) if it receives a packet smaller\n   than the STAMP base packet.\
    \  If the packet received from the TWAMP\n   Session-Sender is larger than the\
    \ STAMP base packet, the STAMP\n   Session-Reflector that supports this specification\
    \ will copy the\n   content of the remainder of the received packet to transmit\
    \ a\n   reflected packet of symmetrical size.\n"
- title: 5.  Operational Considerations
  contents:
  - "5.  Operational Considerations\n   STAMP is intended to be used on production\
    \ networks to enable the\n   operator to assess service level agreements based\
    \ on packet delay,\n   delay variation, and loss.  When using STAMP over the Internet,\n\
    \   especially when STAMP-Test packets are transmitted with the\n   destination\
    \ UDP port number from the User Ports range, the possible\n   impact of the STAMP-Test\
    \ packets MUST be thoroughly analyzed.  The\n   use of STAMP for each case MUST\
    \ be agreed by users of nodes hosting\n   the Session-Sender and Session-Reflector\
    \ before starting the STAMP-\n   Test session.\n   Also, the use of the well-known\
    \ port number as the destination UDP\n   port number in STAMP-Test packets transmitted\
    \ by a Session-Sender\n   would not impede the ability to measure performance\
    \ in an Equal-Cost\n   Multipath environment, and analysis in Section 5.3 of [RFC8545]\
    \ fully\n   applies to STAMP.\n"
- title: 6.  IANA Considerations
  contents:
  - "6.  IANA Considerations\n   This document has no IANA actions.\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   [RFC5357] does not identify security considerations\
    \ specific to\n   TWAMP-Test but refers to security considerations identified\
    \ for OWAMP\n   in [RFC4656].  Since both OWAMP and TWAMP include control-plane\
    \ and\n   data-plane components, only security considerations related to OWAMP-\n\
    \   Test discussed in Sections 6.2 and 6.3 of [RFC4656] apply to STAMP.\n   STAMP\
    \ uses the well-known UDP port number allocated for the OWAMP-\n   Test/TWAMP-Test\
    \ Receiver Port.  Thus, the security considerations and\n   measures to mitigate\
    \ the risk of the attack using the registered port\n   number documented in Section\
    \ 6 of [RFC8545] equally apply to STAMP.\n   Because of the control and management\
    \ of a STAMP-Test being outside\n   the scope of this specification, only the\
    \ more general requirement is\n   set:\n      To mitigate the possible attack\
    \ vector, the control and management\n      of a STAMP-Test session MUST use the\
    \ secured transport.\n      The load of the STAMP-Test packets offered to a network\
    \ MUST be\n      carefully estimated, and the possible impact on the existing\n\
    \      services MUST be thoroughly analyzed before launching the test\n      session.\
    \  Section 3.1.5 of [RFC8085] provides guidance on handling\n      network load\
    \ for UDP-based protocol.  While the characteristic of\n      test traffic depends\
    \ on the test objective, it is highly\n      recommended to stay in the limits,\
    \ as provided in [RFC8085].\n   Use of HMAC-SHA-256 in the authenticated mode\
    \ protects the data\n   integrity of the STAMP-Test packets.\n"
- title: 8.  References
  contents:
  - '8.  References

    '
- title: 8.1.  Normative References
  contents:
  - "8.1.  Normative References\n   [IEEE.1588.2008]\n              IEEE, \"IEEE Standard\
    \ for a Precision Clock Synchronization\n              Protocol for Networked\
    \ Measurement and Control Systems\",\n              IEEE Standard 1588, July 2008.\n\
    \   [RFC2104]  Krawczyk, H., Bellare, M., and R. Canetti, \"HMAC: Keyed-\n   \
    \           Hashing for Message Authentication\", RFC 2104,\n              DOI\
    \ 10.17487/RFC2104, February 1997,\n              <https://www.rfc-editor.org/info/rfc2104>.\n\
    \   [RFC2119]  Bradner, S., \"Key words for use in RFCs to Indicate\n        \
    \      Requirement Levels\", BCP 14, RFC 2119,\n              DOI 10.17487/RFC2119,\
    \ March 1997,\n              <https://www.rfc-editor.org/info/rfc2119>.\n   [RFC4656]\
    \  Shalunov, S., Teitelbaum, B., Karp, A., Boote, J., and M.\n              Zekauskas,\
    \ \"A One-way Active Measurement Protocol\n              (OWAMP)\", RFC 4656,\
    \ DOI 10.17487/RFC4656, September 2006,\n              <https://www.rfc-editor.org/info/rfc4656>.\n\
    \   [RFC5357]  Hedayat, K., Krzanowski, R., Morton, A., Yum, K., and J.\n    \
    \          Babiarz, \"A Two-Way Active Measurement Protocol (TWAMP)\",\n     \
    \         RFC 5357, DOI 10.17487/RFC5357, October 2008,\n              <https://www.rfc-editor.org/info/rfc5357>.\n\
    \   [RFC5905]  Mills, D., Martin, J., Ed., Burbank, J., and W. Kasch,\n      \
    \        \"Network Time Protocol Version 4: Protocol and Algorithms\n        \
    \      Specification\", RFC 5905, DOI 10.17487/RFC5905, June 2010,\n         \
    \     <https://www.rfc-editor.org/info/rfc5905>.\n   [RFC6038]  Morton, A. and\
    \ L. Ciavattone, \"Two-Way Active Measurement\n              Protocol (TWAMP)\
    \ Reflect Octets and Symmetrical Size\n              Features\", RFC 6038, DOI\
    \ 10.17487/RFC6038, October 2010,\n              <https://www.rfc-editor.org/info/rfc6038>.\n\
    \   [RFC6335]  Cotton, M., Eggert, L., Touch, J., Westerlund, M., and S.\n   \
    \           Cheshire, \"Internet Assigned Numbers Authority (IANA)\n         \
    \     Procedures for the Management of the Service Name and\n              Transport\
    \ Protocol Port Number Registry\", BCP 165,\n              RFC 6335, DOI 10.17487/RFC6335,\
    \ August 2011,\n              <https://www.rfc-editor.org/info/rfc6335>.\n   [RFC8174]\
    \  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n              2119\
    \ Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n              May 2017,\
    \ <https://www.rfc-editor.org/info/rfc8174>.\n   [RFC8186]  Mirsky, G. and I.\
    \ Meilik, \"Support of the IEEE 1588\n              Timestamp Format in a Two-Way\
    \ Active Measurement Protocol\n              (TWAMP)\", RFC 8186, DOI 10.17487/RFC8186,\
    \ June 2017,\n              <https://www.rfc-editor.org/info/rfc8186>.\n   [RFC8545]\
    \  Morton, A., Ed. and G. Mirsky, Ed., \"Well-Known Port\n              Assignments\
    \ for the One-Way Active Measurement Protocol\n              (OWAMP) and the Two-Way\
    \ Active Measurement Protocol\n              (TWAMP)\", RFC 8545, DOI 10.17487/RFC8545,\
    \ March 2019,\n              <https://www.rfc-editor.org/info/rfc8545>.\n"
- title: 8.2.  Informative References
  contents:
  - "8.2.  Informative References\n   [BBF.TR-390]\n              Broadband Forum,\
    \ \"Performance Measurement from IP Edge to\n              Customer Equipment\
    \ using TWAMP Light\", TR-390 Issue 1, May\n              2017.\n   [RFC4868]\
    \  Kelly, S. and S. Frankel, \"Using HMAC-SHA-256, HMAC-SHA-\n              384,\
    \ and HMAC-SHA-512 with IPsec\", RFC 4868,\n              DOI 10.17487/RFC4868,\
    \ May 2007,\n              <https://www.rfc-editor.org/info/rfc4868>.\n   [RFC7750]\
    \  Hedin, J., Mirsky, G., and S. Baillargeon, \"Differentiated\n             \
    \ Service Code Point and Explicit Congestion Notification\n              Monitoring\
    \ in the Two-Way Active Measurement Protocol\n              (TWAMP)\", RFC 7750,\
    \ DOI 10.17487/RFC7750, February 2016,\n              <https://www.rfc-editor.org/info/rfc7750>.\n\
    \   [RFC8085]  Eggert, L., Fairhurst, G., and G. Shepherd, \"UDP Usage\n     \
    \         Guidelines\", BCP 145, RFC 8085, DOI 10.17487/RFC8085,\n           \
    \   March 2017, <https://www.rfc-editor.org/info/rfc8085>.\n   [STAMP-OPTION]\n\
    \              Mirsky, G., Xiao, M., Nydell, H., Foote, R., Masputra, A.,\n  \
    \            and E. Ruffini, \"Simple Two-way Active Measurement\n           \
    \   Protocol Optional Extensions\", Work in Progress, Internet-\n            \
    \  Draft, draft-ietf-ippm-stamp-option-tlv-03, 21 February\n              2020,\
    \ <https://tools.ietf.org/html/draft-ietf-ippm-stamp-\n              option-tlv-03>.\n\
    \   [STAMP-YANG]\n              Mirsky, G., Xiao, M., and W. Luo, \"Simple Two-way\
    \ Active\n              Measurement Protocol (STAMP) Data Model\", Work in\n \
    \             Progress, Internet-Draft, draft-ietf-ippm-stamp-yang-05,\n     \
    \         25 October 2019, <https://tools.ietf.org/html/draft-ietf-\n        \
    \      ippm-stamp-yang-05>.\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   The authors express their appreciation to Jose Ignacio Alvarez-\n\
    \   Hamelin and Brian Weis for their great insights into the security and\n  \
    \ identity protection as well as the most helpful and practical\n   suggestions.\
    \  Also, our sincere thanks to David Ball, Rakesh Gandhi,\n   and Xiao Min for\
    \ their thorough reviews and helpful comments.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Greg Mirsky\n   ZTE Corp.\n   Email: gregimirsky@gmail.com\n\
    \   Guo Jun\n   ZTE Corp.\n   68# Zijinghua Road\n   Nanjing\n   Jiangsu, 210012\n\
    \   China\n   Phone: +86 18105183663\n   Email: guo.jun2@zte.com.cn\n   Henrik\
    \ Nydell\n   Accedian Networks\n   Email: hnydell@accedian.com\n   Richard Foote\n"
