- title: __initial_text__
  contents:
  - '              Manufacturer Usage Description Specification

    '
- title: Abstract
  contents:
  - "Abstract\n   This memo specifies a component-based architecture for Manufacturer\n\
    \   Usage Descriptions (MUDs).  The goal of MUD is to provide a means for\n  \
    \ end devices to signal to the network what sort of access and network\n   functionality\
    \ they require to properly function.  The initial focus\n   is on access control.\
    \  Later work can delve into other aspects.\n   This memo specifies two YANG modules,\
    \ IPv4 and IPv6 DHCP options, a\n   Link Layer Discovery Protocol (LLDP) TLV,\
    \ a URL, an X.509 certificate\n   extension, and a means to sign and verify the\
    \ descriptions.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 7841.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8520.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2019 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (https://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   4\n     1.1.  What MUD Doesn't Do . . . . . . . . . . . . . . .\
    \ . . . .   5\n     1.2.  A Simple Example  . . . . . . . . . . . . . . . . .\
    \ . . .   5\n     1.3.  Terminology . . . . . . . . . . . . . . . . . . . . .\
    \ . .   6\n     1.4.  Determining Intended Use  . . . . . . . . . . . . . . .\
    \ .   6\n     1.5.  Finding a Policy: The MUD URL . . . . . . . . . . . . . .\
    \   7\n     1.6.  Processing of the MUD URL . . . . . . . . . . . . . . . .  \
    \ 8\n     1.7.  Types of Policies . . . . . . . . . . . . . . . . . . . .   8\n\
    \     1.8.  The Manufacturer Usage Description Architecture . . . . .  10\n  \
    \   1.9.  Order of Operations . . . . . . . . . . . . . . . . . . .  12\n   2.\
    \  The MUD Model and Semantic Meaning  . . . . . . . . . . . . .  12\n     2.1.\
    \  The IETF-MUD YANG Module  . . . . . . . . . . . . . . . .  14\n   3.  MUD Model\
    \ Definitions for the Root \"mud\" Container  . . . . .  15\n     3.1.  mud-version\
    \ . . . . . . . . . . . . . . . . . . . . . . .  15\n     3.2.  MUD URL . . .\
    \ . . . . . . . . . . . . . . . . . . . . . .  15\n     3.3.  to-device-policy\
    \ and from-device-policy Containers  . . .  16\n     3.4.  last-update . . . .\
    \ . . . . . . . . . . . . . . . . . . .  16\n     3.5.  cache-validity  . . .\
    \ . . . . . . . . . . . . . . . . . .  16\n     3.6.  is-supported  . . . . .\
    \ . . . . . . . . . . . . . . . . .  16\n     3.7.  systeminfo  . . . . . . .\
    \ . . . . . . . . . . . . . . . .  16\n     3.8.  mfg-name, software-rev, model-name,\
    \ and firmware-rev  . .  17\n     3.9.  extensions  . . . . . . . . . . . . .\
    \ . . . . . . . . . .  17\n   4.  Augmentation to the ACL Model . . . . . . .\
    \ . . . . . . . . .  17\n     4.1.  manufacturer  . . . . . . . . . . . . . .\
    \ . . . . . . . .  17\n     4.2.  same-manufacturer . . . . . . . . . . . . .\
    \ . . . . . . .  17\n     4.3.  documentation . . . . . . . . . . . . . . . .\
    \ . . . . . .  18\n     4.4.  model . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . .  18\n     4.5.  local-networks  . . . . . . . . . . . . . . . . .\
    \ . . . .  18\n     4.6.  controller  . . . . . . . . . . . . . . . . . . . .\
    \ . . .  18\n     4.7.  my-controller . . . . . . . . . . . . . . . . . . . .\
    \ . .  19\n     4.8.  direction-initiated . . . . . . . . . . . . . . . . . .\
    \ .  19\n   5.  Processing of the MUD File  . . . . . . . . . . . . . . . . .\
    \  19\n   6.  What Does a MUD URL Look Like?  . . . . . . . . . . . . . . .  19\n\
    \   7.  The MUD YANG Model  . . . . . . . . . . . . . . . . . . . . .  20\n  \
    \ 8.  The Domain Name Extension to the ACL Model  . . . . . . . . .  26\n    \
    \ 8.1.  src-dnsname . . . . . . . . . . . . . . . . . . . . . . .  27\n     8.2.\
    \  dst-dnsname . . . . . . . . . . . . . . . . . . . . . . .  27\n     8.3.  The\
    \ ietf-acldns Model . . . . . . . . . . . . . . . . . .  28\n   9.  MUD File Example\
    \  . . . . . . . . . . . . . . . . . . . . . .  30\n   10. The MUD URL DHCP Option\
    \ . . . . . . . . . . . . . . . . . . .  32\n     10.1.  Client Behavior  . .\
    \ . . . . . . . . . . . . . . . . . .  33\n     10.2.  Server Behavior  . . .\
    \ . . . . . . . . . . . . . . . . .  33\n     10.3.  Relay Requirements . . .\
    \ . . . . . . . . . . . . . . . .  33\n   11. The Manufacturer Usage Description\
    \ (MUD) URL X.509 Extension   34\n   12. The Manufacturer Usage Description LLDP\
    \ Extension . . . . . .  36\n   13. The Creating and Processing of Signed MUD\
    \ Files . . . . . . .  38\n     13.1.  Creating a MUD File Signature  . . . .\
    \ . . . . . . . . .  38\n     13.2.  Verifying a MUD File Signature . . . . .\
    \ . . . . . . . .  38\n   14. Extensibility . . . . . . . . . . . . . . . . .\
    \ . . . . . . .  39\n   15. Deployment Considerations . . . . . . . . . . . .\
    \ . . . . . .  39\n   16. Security Considerations . . . . . . . . . . . . . .\
    \ . . . . .  40\n   17. IANA Considerations . . . . . . . . . . . . . . . . .\
    \ . . . .  43\n     17.1.  YANG Module Registrations  . . . . . . . . . . . .\
    \ . . .  43\n     17.2.  URI Registrations  . . . . . . . . . . . . . . . . .\
    \ . .  43\n     17.3.  DHCPv4 and DHCPv6 Options  . . . . . . . . . . . . . .\
    \ .  43\n     17.4.  PKIX Extensions  . . . . . . . . . . . . . . . . . . . .\
    \  43\n     17.5.  Media Type Registration for MUD Files  . . . . . . . . .  44\n\
    \     17.6.  IANA LLDP TLV Subtype Registry . . . . . . . . . . . . .  45\n  \
    \   17.7.  The MUD Well-Known Universal Resource Name (URNs)  . . .  45\n    \
    \ 17.8.  Extensions Registry  . . . . . . . . . . . . . . . . . .  46\n   18.\
    \ References  . . . . . . . . . . . . . . . . . . . . . . . . .  46\n     18.1.\
    \  Normative References . . . . . . . . . . . . . . . . . .  46\n     18.2.  Informative\
    \ References . . . . . . . . . . . . . . . . .  49\n   Appendix A.  Default MUD\
    \ Nodes  . . . . . . . . . . . . . . . . .  52\n   Appendix B.  A Sample Extension:\
    \ DETNET-indicator . . . . . . . .  56\n   Acknowledgments . . . . . . . . . .\
    \ . . . . . . . . . . . . . . .  60\n   Authors' Addresses  . . . . . . . . .\
    \ . . . . . . . . . . . . . .  60\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The Internet has largely been constructed for general purpose\n\
    \   computers, those devices that may be used for a purpose that is\n   specified\
    \ by those who own the device.  In [RFC1984], it was presumed\n   that an end\
    \ device would be most capable of protecting itself.  This\n   made sense when\
    \ the typical device was a workstation or a mainframe,\n   and it continues to\
    \ make sense for general purpose computing devices\n   today, including laptops,\
    \ smart phones, and tablets.\n   [RFC7452] discusses design patterns for, and\
    \ poses questions about,\n   smart objects.  Let us then posit a group of objects\
    \ that are\n   specifically not intended to be used for general purpose computing\n\
    \   tasks.  These devices, which this memo refers to as Things, have a\n   specific\
    \ purpose.  By definition, therefore, all other uses are not\n   intended.  If\
    \ a small number of communication patterns follows from\n   those small number\
    \ of uses, the combination of these two statements\n   can be restated as a Manufacturer\
    \ Usage Description (MUD) that can be\n   applied at various points within a network.\
    \  MUD primarily addresses\n   threats to the device rather than the device as\
    \ a threat.  In some\n   circumstances, however, MUD may offer some protection\
    \ in the latter\n   case, depending on how the MUD URL is communicated and how\
    \ devices\n   and their communications are authenticated.\n   We use the notion\
    \ of \"manufacturer\" loosely in this context to refer\n   to the entity or organization\
    \ that will state how a device is\n   intended to be used.  For example, in the\
    \ context of a light bulb,\n   this might indeed be the light bulb manufacturer.\
    \  In the context of\n   a smarter device that has a built in Linux stack, it\
    \ might be an\n   integrator of that device.  The key points are that the device\
    \ itself\n   is assumed to serve a limited purpose, and that there exists an\n\
    \   organization in the supply chain of that device that will take\n   responsibility\
    \ for informing the network about that purpose.\n   The intent of MUD is to provide\
    \ the following:\n   o  Substantially reduce the threat surface on a device to\
    \ those\n      communications intended by the manufacturer.\n   o  Provide a means\
    \ to scale network policies to the ever-increasing\n      number of types of devices\
    \ in the network.\n   o  Provide a means to address at least some vulnerabilities\
    \ in a way\n      that is faster than the time it might take to update systems.\n\
    \      This will be particularly true for systems that are no longer\n      supported.\n\
    \   o  Keep the cost of implementation of such a system to the bare\n      minimum.\n\
    \   o  Provide a means of extensibility for manufacturers to express\n      other\
    \ device capabilities or requirements.\n   MUD consists of three architectural\
    \ building blocks:\n   o  A URL that can be used to locate a description;\n  \
    \ o  The description itself, including how it is interpreted; and\n   o  A means\
    \ for local network management systems to retrieve the\n      description.\n \
    \  MUD is most effective when the network is able to identify in some\n   way\
    \ the remote endpoints that Things will talk to.\n   In this specification, we\
    \ describe each of these building blocks and\n   how they are intended to be used\
    \ together.  However, they may also be\n   used separately, independent of this\
    \ specification, by local\n   deployments for their own purposes.\n"
- title: 1.1.  What MUD Doesn't Do
  contents:
  - "1.1.  What MUD Doesn't Do\n   MUD is not intended to address network authorization\
    \ of general\n   purpose computers, as their manufacturers cannot envision a specific\n\
    \   communication pattern to describe.  In addition, even those devices\n   that\
    \ have a single or small number of uses might have very broad\n   communication\
    \ patterns.  MUD on its own is not for them either.\n   Although MUD can provide\
    \ network administrators with some additional\n   protection when device vulnerabilities\
    \ exist, it will never replace\n   the need for manufacturers to patch vulnerabilities.\n\
    \   Finally, no matter what the manufacturer specifies in a MUD file,\n   these\
    \ are not directives, but suggestions.  How they are instantiated\n   locally\
    \ will depend on many factors and will be ultimately up to the\n   local network\
    \ administrator, who must decide what is appropriate in a\n   given circumstances.\n"
- title: 1.2.  A Simple Example
  contents:
  - "1.2.  A Simple Example\n   A light bulb is intended to light a room.  It may\
    \ be remotely\n   controlled through the network, and it may make use of a rendezvous\n\
    \   service (which could be accessed by an application on a smart phone).\n  \
    \ What we can say about that light bulb, then, is that all other\n   network access\
    \ is unwanted.  It will not contact a news service, nor\n   speak to the refrigerator,\
    \ and it has no need of a printer or other\n   devices.  It has no social networking\
    \ friends.  Therefore, applying\n   an access list to it that states it will only\
    \ connect to the single\n   rendezvous service will not impede performing its\
    \ function; at the\n   same time, this will allow the network to provide the light\
    \ bulb and\n   other devices an additional layer of protection.\n"
- title: 1.3.  Terminology
  contents:
  - "1.3.  Terminology\n   MUD:  Manufacturer Usage Description.\n   MUD file:  a\
    \ file containing YANG-based JSON that describes a Thing\n      and associated\
    \ suggested specific network behavior.\n   MUD file server:  a web server that\
    \ hosts a MUD file.\n   MUD manager:  the system that requests and receives the\
    \ MUD file from\n      the MUD server.  After it has processed a MUD file, it\
    \ may direct\n      changes to relevant network elements.\n   MUD controller:\
    \  a synonym that has been used in the past for MUD\n      manager.\n   MUD URL:\
    \  a URL that can be used by the MUD manager to receive the\n      MUD file.\n\
    \   Thing:  the device emitting a MUD URL.\n   Manufacturer:  the entity that\
    \ configures the Thing to emit the MUD\n      URL and the one who asserts a recommendation\
    \ in a MUD file.  The\n      manufacturer might not always be the entity that\
    \ constructs a\n      Thing.  It could, for instance, be a systems integrator,\
    \ or even a\n      component provider.\n   The key words \"MUST\", \"MUST NOT\"\
    , \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"NOT RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be\
    \ interpreted as described in\n   BCP 14 [RFC2119] [RFC8174] when, and only when,\
    \ they appear in all\n   capitals, as shown here.\n"
- title: 1.4.  Determining Intended Use
  contents:
  - "1.4.  Determining Intended Use\n   The notion of intended use is in itself not\
    \ new.  Network\n   administrators apply access lists every day to allow for only\
    \ such\n   use.  This notion of white listing was well described by Chapman and\n\
    \   Zwicky in [FW95].  Profiling systems that make use of heuristics to\n   identify\
    \ types of systems have existed for years as well.\n   A Thing could just as easily\
    \ tell the network what sort of access it\n   requires without going into what\
    \ sort of system it is.  This would,\n   in effect, be the converse of [RFC7488].\
    \  In seeking a general\n   solution, however, we assume that a device will implement\n\
    \   functionality necessary to fulfill its limited purpose.  This is\n   basic\
    \ economic constraint.  Unless the network would refuse access to\n   such a device,\
    \ its developers would have no reason to provide the\n   network any information.\
    \  To date, such an assertion has held true.\n"
- title: '1.5.  Finding a Policy: The MUD URL'
  contents:
  - "1.5.  Finding a Policy: The MUD URL\n   Our work begins with the device emitting\
    \ a Universal Resource Locator\n   (URL) [RFC3986].  This URL serves both to classify\
    \ the device type\n   and to provide a means to locate a policy file.\n   MUD\
    \ URLs MUST use the \"https\" scheme [RFC7230].\n   In this memo, three means\
    \ are defined to emit the MUD URL, as\n   follows:\n   o  A DHCP option [RFC2131]\
    \ [RFC8415] that the DHCP client uses to\n      inform the DHCP server.  The DHCP\
    \ server may take further actions,\n      such as acting as the MUD manager or\
    \ passing the MUD URL along to\n      the MUD manager.\n   o  An X.509 constraint.\
    \  The IEEE has developed IEEE 802.1AR\n      [IEEE8021AR] to provide a certificate-based\
    \ approach to\n      communicate device characteristics, which itself relies on\n\
    \      [RFC5280].  The MUD URL extension is non-critical, as required by\n   \
    \   IEEE 802.1AR.  Various means may be used to communicate that\n      certificate,\
    \ including the Tunnel Extensible Authentication\n      Protocol (TEAP) [RFC7170].\n\
    \   o  Finally, a Link Layer Discovery Protocol (LLDP) frame is defined\n    \
    \  [IEEE8021AB].\n   It is possible that there may be other means for a MUD URL\
    \ to be\n   learned by a network.  For instance, some devices may already be\n\
    \   fielded or have very limited ability to communicate a MUD URL, and\n   yet\
    \ they can be identified through some means, such as a serial\n   number or a\
    \ public key.  In these cases, manufacturers may be able to\n   map those identifiers\
    \ to particular MUD URLs (or even the files\n   themselves).  Similarly, there\
    \ may be alternative resolution\n   mechanisms available for situations where\
    \ Internet connectivity is\n   limited or does not exist.  Such mechanisms are\
    \ not described in this\n   memo, but they are possible.  Implementors are encouraged\
    \ to allow\n   for the flexibility of how MUD URLs may be learned.\n"
- title: 1.6.  Processing of the MUD URL
  contents:
  - "1.6.  Processing of the MUD URL\n   MUD managers that are able to do so SHOULD\
    \ retrieve MUD URLs and\n   signature files as per [RFC7230], using the GET method\
    \ [RFC7231].\n   They MUST validate the certificate using the rules in [RFC2818],\n\
    \   Section 3.1.\n   Requests for MUD URLs SHOULD include an \"Accept\" header\
    \ field\n   ([RFC7231], Section 5.3.2) containing \"application/mud+json\", an\n\
    \   \"Accept-Language\" header field ([RFC7231], Section 5.3.5), and a\n   \"\
    User-Agent\" header field ([RFC7231], Section 5.5.3).\n   MUD managers SHOULD\
    \ automatically process 3xx response status codes.\n   If a MUD manager is not\
    \ able to fetch a MUD URL, other means MAY be\n   used to import MUD files and\
    \ associated signature files.  So long as\n   the signature of the file can be\
    \ validated, the file can be used.  In\n   such environments, controllers SHOULD\
    \ warn administrators when cache-\n   validity expiry is approaching so that they\
    \ may check for new files.\n   It may not be possible for a MUD manager to retrieve\
    \ a MUD file at\n   any given time.  Should a MUD manager fail to retrieve a MUD\
    \ file, it\n   SHOULD consider the existing one safe to use, at least for a time.\n\
    \   After some period, it SHOULD log that it has been unable to retrieve\n   the\
    \ file.  There may be very good reasons for such failures,\n   including the possibility\
    \ that the MUD manager is in an offline\n   environment, the local Internet connection\
    \ has failed, or the remote\n   Internet connection has failed.  It is also possible\
    \ that an attacker\n   is attempting to interfere with the deployment of a device.\
    \  How to\n   handle such circumstances is a local decision.\n"
- title: 1.7.  Types of Policies
  contents:
  - "1.7.  Types of Policies\n   When the MUD URL is resolved, the MUD manager retrieves\
    \ a file that\n   describes what sort of communications a device is designed to\
    \ have.\n   The manufacturer may specify either specific hosts for cloud-based\n\
    \   services or certain classes for access within an operational network.\n  \
    \ An example of a class might be \"devices of a specified manufacturer\n   type\"\
    , where the manufacturer type itself is indicated simply by the\n   authority\
    \ component (e.g., the domain name) of the MUD URL.  Another\n   example might\
    \ be to allow or disallow local access.  Just like other\n   policies, these may\
    \ be combined.  For example:\n   o  Allow access to devices of the same manufacturer\n\
    \   o  Allow access to and from controllers via the Constrained\n      Application\
    \ Protocol (COAP) [RFC7252]\n   o  Allow access to local DNS/NTP\n   o  Deny all\
    \ other access\n   A printer might have a description that states:\n   o  Allow\
    \ access for port IPP or port LPD\n   o  Allow local access for port HTTP\n  \
    \ o  Deny all other access\n   In this way, anyone can print to the printer, but\
    \ local access would\n   be required for the management interface.\n   The files\
    \ that are retrieved are intended to be closely aligned to\n   existing network\
    \ architectures so that they are easy to deploy.  We\n   make use of YANG [RFC7950]\
    \ because it provides accurate and adequate\n   models for use by network devices.\
    \  JSON [RFC8259] is used as a\n   serialization format for compactness and readability,\
    \ relative to\n   XML.  Other formats may be chosen with later versions of MUD.\n\
    \   While the policy examples given here focus on access control, this is\n  \
    \ not intended to be the sole focus.  By structuring the model\n   described in\
    \ this document with clear extension points, other\n   descriptions could be included.\
    \  One that often comes to mind is\n   quality of service.\n   The YANG modules\
    \ specified here are extensions of [RFC8519].  The\n   extensions to this model\
    \ allow for a manufacturer to express classes\n   of systems that a manufacturer\
    \ would find necessary for the proper\n   function of the device.  Two modules\
    \ are specified.  The first module\n   specifies a means for domain names to be\
    \ used in Access Control Lists\n   (ACLs) so that devices that have their controllers\
    \ in the cloud may\n   be appropriately authorized with domain names, where the\
    \ mapping of\n   those names to addresses may rapidly change.\n   The other module\
    \ abstracts away IP addresses into certain classes\n   that are instantiated into\
    \ actual IP addresses through local\n   processing.  Through these classes, manufacturers\
    \ can specify how the\n   device is designed to communicate, so that network elements\
    \ can be\n   configured by local systems that have local topological knowledge.\n\
    \   That is, the deployment populates the classes that the manufacturer\n   specifies.\
    \  The abstractions below map to zero or more hosts, as\n   follows:\n   Manufacturer:\
    \  A device made by a particular manufacturer, as\n      identified by the authority\
    \ component of its MUD URL.\n   same-manufacturer:  Devices that have the same\
    \ authority component of\n      their MUD URL.\n   controller:  Devices that the\
    \ local network administrator admits to\n      the particular class.\n   my-controller:\
    \  Devices intended to serve as controllers for the MUD\n      URL that the Thing\
    \ emitted.\n   local:  The class of IP addresses that are scoped within some\n\
    \      administrative boundary.  By default, it is suggested that this be\n  \
    \    the local subnet.\n   The \"manufacturer\" classes can be easily specified\
    \ by the\n   manufacturer, whereas controller classes are initially envisioned\
    \ to\n   be specified by the administrator.\n   Because manufacturers do not know\
    \ who will be using their devices, it\n   is important for functionality referenced\
    \ in usage descriptions to be\n   relatively ubiquitous and mature.  For these\
    \ reasons, the YANG-based\n   configuration in a MUD file is limited to the modules\
    \ either\n   specified or referenced in this document, or specified in documented\n\
    \   extensions.\n"
- title: 1.8.  The Manufacturer Usage Description Architecture
  contents:
  - "1.8.  The Manufacturer Usage Description Architecture\n   With these components\
    \ laid out, we now have the basis for an\n   architecture.  This leads us to ASCII\
    \ art.\n    .......................................\n    .                   \
    \   ____________   .           _____________\n    .                     |    \
    \        |  .          |             |\n    .                     |    MUD   \
    \  |-->get URL-->|    MUD      |\n    .                     |  Manager   |  .(https)\
    \   | File Server |\n    .  End system network |____________|<-MUD file<-<|_____________|\n\
    \    .                             .       .\n    .                          \
    \   .       .\n    . _______                 _________   .\n    .|       | (DHCP\
    \ et al.) | router  |  .\n    .| Thing |---->MUD URL-->|   or    |  .\n    .|_______|\
    \               | switch  |  .\n    .                        |_________|  .\n\
    \    .......................................\n                        Figure 1:\
    \ MUD Architecture\n   In the above diagram, the switch or router collects MUD\
    \ URLs and\n   forwards them to the MUD manager (a network management system)\
    \ for\n   processing.  This happens in different ways, depending on how the URL\n\
    \   is communicated.  For instance, in the case of DHCP, the DHCP server\n   might\
    \ receive the URL and then process it.  In the case of IEEE\n   802.1X [IEEE8021X],\
    \ the switch would carry the URL via a certificate\n   to the authentication server\
    \ via the Extensible Authentication\n   Protocol (EAP) over Radius [RFC3748],\
    \ which would then process it.\n   One method to do this is TEAP, as described\
    \ in [RFC7170].  The\n   certificate extension is described below.\n   The information\
    \ returned by the MUD file server is valid for as long\n   as the Thing is connected.\
    \  There is no expiry.  However, if the MUD\n   manager has detected that the\
    \ MUD file for a Thing has changed, it\n   SHOULD update the policy expeditiously,\
    \ taking into account whatever\n   approval flow is required in a deployment.\
    \  In this way, new\n   recommendations from the manufacturer can be processed\
    \ in a timely\n   fashion.\n   The information returned by the MUD file server\
    \ (a web server) is\n   valid for the duration of the Thing's connection, or as\
    \ specified in\n   the description.  Thus, if the Thing is disconnected, any associated\n\
    \   configuration in the switch can be removed.  Similarly, from time to\n   time\
    \ the description may be refreshed, based on new capabilities or\n   communication\
    \ patterns or vulnerabilities.\n   The web server is typically run by or on behalf\
    \ of the manufacturer.\n   Its domain name is that of the authority found in the\
    \ MUD URL.  For\n   legacy cases where Things cannot emit a URL, if the switch\
    \ is able to\n   determine the appropriate URL, it may proxy it.  In a trivial\
    \ case,\n   it may hardcode a MUD URL on a switch port or a map from some\n  \
    \ available identifier such as an L2 address or certificate hash to a\n   MUD\
    \ URL.\n   The role of the MUD manager in this environment is to do the\n   following:\n\
    \   o  receive MUD URLs,\n   o  fetch MUD files,\n   o  translate abstractions\
    \ in the MUD files to specific network\n      element configuration,\n   o  maintain\
    \ and update any required mappings of the abstractions, and\n   o  update network\
    \ elements with appropriate configuration.\n   A MUD manager may be a component\
    \ of an Authentication, Authorization,\n   and Accounting (AAA) system or a network\
    \ management system.\n   Communication within those systems and from those systems\
    \ to network\n   elements is beyond the scope of this memo.\n"
- title: 1.9.  Order of Operations
  contents:
  - "1.9.  Order of Operations\n   As mentioned above, MUD contains architectural\
    \ building blocks, so\n   the order of operation may vary.  However, here is one\
    \ clear intended\n   example:\n   1.  Thing emits a URL.\n   2.  That URL is forwarded\
    \ to a MUD manager by the nearest switch (how\n       this happens depends on\
    \ the way in which the MUD URL is emitted).\n   3.  The MUD manager retrieves\
    \ the MUD file and signature from the MUD\n       file server, assuming it doesn't\
    \ already have copies.  After\n       validating the signature, it may test the\
    \ URL against a web or\n       domain reputation service, and it may test any\
    \ hosts within the\n       file against those reputation services, as it deems\
    \ fit.\n   4.  The MUD manager may query the administrator for permission to add\n\
    \       the Thing and associated policy.  If the Thing is known or the\n     \
    \  Thing type is known, it may skip this step.\n   5.  The MUD manager instantiates\
    \ local configuration based on the\n       abstractions defined in this document.\n\
    \   6.  The MUD manager configures the switch nearest the Thing.  Other\n    \
    \   systems may be configured as well.\n   7.  When the Thing disconnects, policy\
    \ is removed.\n"
- title: 2.  The MUD Model and Semantic Meaning
  contents:
  - "2.  The MUD Model and Semantic Meaning\n   A MUD file consists of a YANG model\
    \ instance that has been serialized\n   in JSON [RFC7951].  For purposes of MUD,\
    \ the nodes that can be\n   modified are access lists as augmented by this model.\
    \  The MUD file\n   is limited to the serialization of only the following YANG\
    \ schema:\n   o  ietf-access-control-list [RFC8519]\n   o  ietf-mud (RFC 8520)\n\
    \   o  ietf-acldns (RFC 8520)\n   Extensions may be used to add additional schema.\
    \  This is described\n   further on.\n   To provide the widest possible deployment,\
    \ publishers of MUD files\n   SHOULD make use of the abstractions in this memo\
    \ and avoid the use of\n   IP addresses.  A MUD manager SHOULD NOT automatically\
    \ implement any\n   MUD file that contains IP addresses, especially those that\
    \ might have\n   local significance.  The addressing of one side of an access\
    \ list is\n   implicit, based on whether it is applied as to-device-policy or\n\
    \   from-device-policy.\n   With the exceptions of the \"name\" of the ACL, \"\
    type\", \"name\" of the\n   Access Control Entry (ACE), and TCP and UDP source\
    \ and destination\n   port information, publishers of MUD files SHOULD limit the\
    \ use of ACL\n   model leaf nodes expressed to those found in this specification.\n\
    \   Absent any extensions, MUD files are assumed to implement only the\n   following\
    \ ACL model features:\n   o  match-on-ipv4, match-on-ipv6, match-on-tcp, match-on-udp,\n\
    \      match-on-icmp\n   Furthermore, only \"accept\" or \"drop\" actions SHOULD\
    \ be included.  A\n   MUD manager MAY choose to interpret \"reject\" as \"drop\"\
    .  A MUD\n   manager SHOULD ignore all other actions.  This is because\n   manufacturers\
    \ do not have sufficient context within a local\n   deployment to know whether\
    \ reject is appropriate.  That is a decision\n   that should be left to a network\
    \ administrator.\n   Given that MUD does not deal with interfaces, the support\
    \ of the\n   \"ietf-interfaces\" module [RFC8343] is not required.  Specifically,\n\
    \   the support of interface-related features and branches (e.g.,\n   interface-attachment\
    \ and interface-stats) of the ACL YANG module is\n   not required.\n   In fact,\
    \ MUD managers MAY ignore any particular component of a\n   description or MAY\
    \ ignore the description in its entirety, and they\n   SHOULD carefully inspect\
    \ all MUD descriptions.  Publishers of MUD\n   files MUST NOT include other nodes\
    \ except as described in\n   Section 3.9.  See that section for more information.\n"
- title: 2.1.  The IETF-MUD YANG Module
  contents:
  - "2.1.  The IETF-MUD YANG Module\n   This module is structured into three parts:\n\
    \   o  The first component, the \"mud\" container, holds information that\n  \
    \    is relevant to retrieval and validity of the MUD file itself, as\n      well\
    \ as policy intended to and from the Thing.\n   o  The second component augments\
    \ the matching container of the ACL\n      model to add several nodes that are\
    \ relevant to the MUD URL, or\n      they are otherwise abstracted for use within\
    \ a local environment.\n   o  The third component augments the tcp-acl container\
    \ of the ACL\n      model to add the ability to match on the direction of initiation\n\
    \      of a TCP connection.\n   A valid MUD file will contain two root objects:\
    \ a \"mud\" container and\n   an \"acls\" container.  Extensions may add additional\
    \ root objects as\n   required.  As a reminder, when parsing acls, elements within\
    \ a\n   \"match\" block are logically ANDed.  In general, a single abstraction\n\
    \   in a match statement should be used.  For instance, it makes little\n   sense\
    \ to match both \"my-controller\" and \"controller\" with an\n   argument, since\
    \ they are highly unlikely to be the same value.\n   A simplified graphical representation\
    \ of the data models is used in\n   this document.  The meaning of the symbols\
    \ in these diagrams is\n   explained in [RFC8340].\n   module: ietf-mud\n    \
    \ +--rw mud!\n        +--rw mud-version           uint8\n        +--rw mud-url\
    \               inet:uri\n        +--rw last-update           yang:date-and-time\n\
    \        +--rw mud-signature?        inet:uri\n        +--rw cache-validity? \
    \      uint8\n        +--rw is-supported          boolean\n        +--rw systeminfo?\
    \           string\n        +--rw mfg-name?             string\n        +--rw\
    \ model-name?           string\n        +--rw firmware-rev?         string\n \
    \       +--rw software-rev?         string\n        +--rw documentation?     \
    \   inet:uri\n        +--rw extensions*           string\n        +--rw from-device-policy\n\
    \        |  +--rw acls\n        |     +--rw access-list* [name]\n        |   \
    \     +--rw name    -> /acl:acls/acl/name\n        +--rw to-device-policy\n  \
    \         +--rw acls\n              +--rw access-list* [name]\n              \
    \   +--rw name    -> /acl:acls/acl/name\n     augment /acl:acls/acl:acl/acl:aces/acl:ace/acl:matches:\n\
    \       +--rw mud\n          +--rw manufacturer?        inet:host\n          +--rw\
    \ same-manufacturer?   empty\n          +--rw model?               inet:uri\n\
    \          +--rw local-networks?      empty\n          +--rw controller?     \
    \     inet:uri\n          +--rw my-controller?       empty\n     augment\n   \
    \    /acl:acls/acl:acl/acl:aces/acl:ace/acl:matches\n          /acl:l4/acl:tcp/acl:tcp:\n\
    \       +--rw direction-initiated?   direction\n"
- title: 3.  MUD Model Definitions for the Root "mud" Container
  contents:
  - '3.  MUD Model Definitions for the Root "mud" Container

    '
- title: 3.1.  mud-version
  contents:
  - "3.1.  mud-version\n   This node specifies the integer version of the MUD specification.\n\
    \   This memo specifies version 1.\n"
- title: 3.2.  MUD URL
  contents:
  - "3.2.  MUD URL\n   This URL identifies the MUD file.  This is useful when the\
    \ file and\n   associated signature are manually uploaded, say, in an offline\
    \ mode.\n"
- title: 3.3.  to-device-policy and from-device-policy Containers
  contents:
  - "3.3.  to-device-policy and from-device-policy Containers\n   [RFC8519] describes\
    \ access lists.  In the case of MUD, a MUD file\n   must be explicit in describing\
    \ the communication pattern of a Thing,\n   and that includes indicating what\
    \ is to be permitted or denied in\n   either direction of communication.  Hence,\
    \ each of these containers\n   indicates the appropriate direction of a flow in\
    \ association with a\n   particular Thing.  They contain references to specific\
    \ access lists.\n"
- title: 3.4.  last-update
  contents:
  - "3.4.  last-update\n   This is a date-and-time value of when the MUD file was\
    \ generated.\n   This is akin to a version number.  Its form is taken from [RFC6991].\n"
- title: 3.5.  cache-validity
  contents:
  - "3.5.  cache-validity\n   This uint8 is the period of time in hours that a network\
    \ management\n   station MUST wait since its last retrieval before checking for\
    \ an\n   update.  It is RECOMMENDED that this value be no less than 24, and it\n\
    \   MUST NOT be more than 168 for any Thing that is supported.  This\n   period\
    \ SHOULD be no shorter than any period determined through HTTP\n   caching directives\
    \ (e.g., \"cache-control\" or \"Expires\").  N.B., the\n   expiring of this timer\
    \ does not require the MUD manager to discard\n   the MUD file, nor terminate\
    \ access to a Thing.  See Section 16 for\n   more information.\n"
- title: 3.6.  is-supported
  contents:
  - "3.6.  is-supported\n   This boolean is an indication from the manufacturer to\
    \ the network\n   administrator as to whether or not the Thing is supported. \
    \ In this\n   context, a Thing is said to not be supported if the manufacturer\n\
    \   intends never to issue a firmware or software update to the Thing or\n   never\
    \ to update the MUD file.  A MUD manager MAY still periodically\n   check for\
    \ updates.\n"
- title: 3.7.  systeminfo
  contents:
  - "3.7.  systeminfo\n   This is a textual UTF-8 description of the Thing to be connected.\n\
    \   The intent is for administrators to be able to see a brief\n   displayable\
    \ description of the Thing.  It SHOULD NOT exceed 60\n   characters worth of display\
    \ space.\n"
- title: 3.8.  mfg-name, software-rev, model-name, and firmware-rev
  contents:
  - "3.8.  mfg-name, software-rev, model-name, and firmware-rev\n   These optional\
    \ fields are filled in as specified by [RFC8348].  Note\n   that firmware-rev\
    \ and software-rev MUST NOT be populated in a MUD\n   file if the device can be\
    \ upgraded but the MUD URL cannot be.  This\n   would be the case, for instance,\
    \ with MUD URLs that are contained in\n   802.1AR certificates.\n"
- title: 3.9.  extensions
  contents:
  - "3.9.  extensions\n   This optional leaf-list names MUD extensions that are used\
    \ in the MUD\n   file.  Note that MUD extensions MUST NOT be used in a MUD file\n\
    \   without the extensions being declared.  Implementations MUST ignore\n   any\
    \ node in this file that they do not understand.\n   Note that extensions can\
    \ either extend the MUD file as described in\n   the previous paragraph or reference\
    \ other work.  An extension example\n   can be found in Appendix B.\n"
- title: 4.  Augmentation to the ACL Model
  contents:
  - "4.  Augmentation to the ACL Model\n   Note that in this section, when we use\
    \ the term \"match\", we are\n   referring to the ACL model \"matches\" node.\n"
- title: 4.1.  manufacturer
  contents:
  - "4.1.  manufacturer\n   This node consists of a hostname that would be matched\
    \ against the\n   authority component of another Thing's MUD URL.  In its simplest\n\
    \   form, \"manufacturer\" and \"same-manufacturer\" may be implemented as\n \
    \  access lists.  In more complex forms, additional network capabilities\n   may\
    \ be used.  For example, if one saw the line \"manufacturer\" :\n   \"flobbidy.example.com\"\
    , then all Things that registered with a MUD\n   URL that contained flobbity.example.com\
    \ in its authority section\n   would match.\n"
- title: 4.2.  same-manufacturer
  contents:
  - "4.2.  same-manufacturer\n   This null-valued node is an equivalent for when the\
    \ manufacturer\n   element is used to indicate that the authority found in another\n\
    \   Thing's MUD URL matches that of the authority found in this Thing's\n   MUD\
    \ URL.  For example, if the Thing's MUD URL were\n   \"https://b1.example.com/ThingV1\"\
    , then all devices that had a MUD URL\n   with an authority section of b1.example.com\
    \ would match.\n"
- title: 4.3.  documentation
  contents:
  - "4.3.  documentation\n   This URI consists of a URL that points to documentation\
    \ relating to\n   the device and the MUD file.  This can prove particularly useful\
    \ when\n   the \"controller\" class is used, so that its use can be explained.\n"
- title: 4.4.  model
  contents:
  - "4.4.  model\n   This string matches the entire MUD URL, thus covering the model\
    \ that\n   is unique within the context of the authority.  It may contain not\n\
    \   only model information, but versioning information as well, and any\n   other\
    \ information that the manufacturer wishes to add.  The intended\n   use is for\
    \ devices of this precise class to match, to permit or deny\n   communication\
    \ between one another.\n"
- title: 4.5.  local-networks
  contents:
  - "4.5.  local-networks\n   This null-valued node expands to include local networks.\
    \  Its default\n   expansion is that packets must not traverse toward a default\
    \ route\n   that is received from the router.  However, administrators may expand\n\
    \   the expression as is appropriate in their deployments.\n"
- title: 4.6.  controller
  contents:
  - "4.6.  controller\n   This URI specifies a value that a controller will register\
    \ with the\n   MUD manager.  The node then is expanded to the set of hosts that\
    \ are\n   so registered.  This node may also be a URN.  In this case, the URN\n\
    \   describes a well-known service, such as DNS or NTP, that has been\n   standardized.\
    \  Both of those URNs may be found in Section 17.7.\n   When \"my-controller\"\
    \ is used, it is possible that the administrator\n   will be prompted to populate\
    \ that class for each and every model.\n   Use of \"controller\" with a named\
    \ class allows the user to populate\n   that class only once for many different\
    \ models that a manufacturer\n   may produce.\n   Controller URIs MAY take the\
    \ form of a URL (e.g., \"http[s]://\").\n   However, MUD managers MUST NOT resolve\
    \ and retrieve such files, and\n   it is RECOMMENDED that there be no such file\
    \ at this time, as their\n   form and function may be defined at a point in the\
    \ future.  For now,\n   URLs should serve simply as class names and may be populated\
    \ by the\n   local deployment administrator.\n   Great care should be taken by\
    \ MUD managers when invoking the\n   controller class in the form of URLs.  For\
    \ one thing, it requires\n   some understanding by the administrator as to when\
    \ it is appropriate.\n   Pre-registration in such classes by controllers with\
    \ the MUD server\n   is encouraged.  The mechanism to do that is beyond the scope\
    \ of this\n   work.\n"
- title: 4.7.  my-controller
  contents:
  - "4.7.  my-controller\n   This null-valued node signals to the MUD manager to use\
    \ whatever\n   mapping it has for this MUD URL to a particular group of hosts.\
    \  This\n   may require prompting the administrator for class members.  Future\n\
    \   work should seek to automate membership management.\n"
- title: 4.8.  direction-initiated
  contents:
  - "4.8.  direction-initiated\n   This MUST only be applied to TCP.  This matches\
    \ the direction in\n   which a TCP connection is initiated.  When the direction\
    \ initiated is\n   \"from-device\", packets that are transmitted in the direction\
    \ of a\n   Thing MUST be dropped unless the Thing has first initiated a TCP\n\
    \   connection.  By way of example, this node may be implemented in its\n   simplest\
    \ form by looking at naked SYN bits, but it may also be\n   implemented through\
    \ more stateful mechanisms.\n   When applied, this matches packets when the flow\
    \ was initiated in the\n   corresponding direction.  [RFC6092] specifies IPv6\
    \ guidance best\n   practices.  While that document is scoped specifically to\
    \ IPv6, its\n   contents are applicable for IPv4 as well.\n"
- title: 5.  Processing of the MUD File
  contents:
  - "5.  Processing of the MUD File\n   To keep things relatively simple in addition\
    \ to whatever definitions\n   exist, we also apply two additional default behaviors:\n\
    \   o  Anything not explicitly permitted is denied.\n   o  Local DNS and NTP are,\
    \ by default, permitted to and from the\n      Thing.\n   An explicit description\
    \ of the defaults can be found in Appendix A.\n   These are applied AFTER all\
    \ other explicit rules.  Thus, a default\n   behavior can be changed with a \"\
    drop\" action.\n"
- title: 6.  What Does a MUD URL Look Like?
  contents:
  - "6.  What Does a MUD URL Look Like?\n   MUD URLs are required to use the \"https\"\
    \ scheme, in order to\n   establish the MUD file server's identity and assure\
    \ integrity of the\n   MUD file.\n   Any \"https://\" URL can be a MUD URL.  For\
    \ example:\n     https://things.example.org/product_abc123/v5\n     https://www.example.net/mudfiles/temperature_sensor/\n\
    \     https://example.com/lightbulbs/colour/v1\n   A manufacturer may construct\
    \ a MUD URL in any way, so long as it\n   makes use of the \"https\" scheme.\n"
- title: 7.  The MUD YANG Model
  contents:
  - "7.  The MUD YANG Model\n   <CODE BEGINS>file \"ietf-mud@2019-01-28.yang\"\n \
    \  module ietf-mud {\n     yang-version 1.1;\n     namespace \"urn:ietf:params:xml:ns:yang:ietf-mud\"\
    ;\n     prefix ietf-mud;\n     import ietf-access-control-list {\n       prefix\
    \ acl;\n     }\n     import ietf-yang-types {\n       prefix yang;\n     }\n \
    \    import ietf-inet-types {\n       prefix inet;\n     }\n     organization\n\
    \       \"IETF OPSAWG (Operations and Management Area Working Group)\";\n    \
    \ contact\n       \"WG Web: <https://datatracker.ietf.org/wg/opsawg/>\n      \
    \  WG List: opsawg@ietf.org\n        Author: Eliot Lear\n                lear@cisco.com\n\
    \        Author: Ralph Droms\n                rdroms@gmail.com\n        Author:\
    \ Dan Romascanu\n                dromasca@gmail.com\n       \";\n     description\n\
    \       \"This YANG module defines a component that augments the\n        IETF\
    \ description of an access list.  This specific module\n        focuses on additional\
    \ filters that include local, model,\n        and same-manufacturer.\n       \
    \ This module is intended to be serialized via JSON and stored\n        as a file,\
    \ as described in RFC 8520.\n        The key words 'MUST', 'MUST NOT', 'REQUIRED',\
    \ 'SHALL', 'SHALL\n        NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'NOT RECOMMENDED',\n\
    \        'MAY', and 'OPTIONAL' in this document are to be interpreted as\n   \
    \     described in BCP 14 (RFC 2119) (RFC 8174) when, and only when,\n       \
    \ they appear in all capitals, as shown here.\n        Copyright (c) 2019 IETF\
    \ Trust and the persons identified as\n        authors of the code.  All rights\
    \ reserved.\n        Redistribution and use in source and binary forms, with or\n\
    \        without modification, is permitted pursuant to, and subject\n       \
    \ to the license terms contained in, the Simplified BSD License\n        set forth\
    \ in Section 4.c of the IETF Trust's Legal Provisions\n        Relating to IETF\
    \ Documents\n        (http://trustee.ietf.org/license-info).\n        This version\
    \ of this YANG module is part of RFC 8520; see\n        the RFC itself for full\
    \ legal notices.\";\n     revision 2019-01-28 {\n       description\n        \
    \ \"Initial proposed standard.\";\n       reference\n         \"RFC 8520: Manufacturer\
    \ Usage Description\n          Specification\";\n     }\n     typedef direction\
    \ {\n       type enumeration {\n         enum to-device {\n           description\n\
    \             \"packets or flows destined to the target\n              Thing.\"\
    ;\n         }\n         enum from-device {\n           description\n         \
    \    \"packets or flows destined from\n              the target Thing.\";\n  \
    \       }\n       }\n       description\n         \"Which way are we talking about?\"\
    ;\n     }\n     container mud {\n       presence \"Enabled for this particular\
    \ MUD URL\";\n       description\n         \"MUD-related information, as specified\n\
    \          by RFC 8520.\";\n       uses mud-grouping;\n     }\n     grouping mud-grouping\
    \ {\n       description\n         \"Information about when support ends (or ended)\n\
    \          and when to refresh.\";\n       leaf mud-version {\n         type uint8;\n\
    \         mandatory true;\n         description\n           \"This is the version\
    \ of the MUD\n            specification.  This memo specifies version 1.\";\n\
    \       }\n       leaf mud-url {\n         type inet:uri;\n         mandatory\
    \ true;\n         description\n           \"This is the MUD URL associated with\
    \ the entry found\n            in a MUD file.\";\n       }\n       leaf last-update\
    \ {\n         type yang:date-and-time;\n         mandatory true;\n         description\n\
    \           \"This is intended to be when the current MUD file\n            was\
    \ generated.  MUD managers SHOULD NOT check\n            for updates between this\
    \ time plus cache validity.\";\n       }\n       leaf mud-signature {\n      \
    \   type inet:uri;\n         description\n           \"A URI that resolves to\
    \ a signature as\n            described in this specification.\";\n       }\n\
    \       leaf cache-validity {\n         type uint8 {\n           range \"1..168\"\
    ;\n         }\n         units \"hours\";\n         default \"48\";\n         description\n\
    \           \"The information retrieved from the MUD server is\n            valid\
    \ for these many hours, after which it should\n            be refreshed.  N.B.,\
    \ MUD manager implementations\n            need not discard MUD files beyond this\
    \ period.\";\n       }\n       leaf is-supported {\n         type boolean;\n \
    \        mandatory true;\n         description\n           \"This boolean indicates\
    \ whether or not the Thing is\n            currently supported by the manufacturer.\"\
    ;\n       }\n       leaf systeminfo {\n         type string;\n         description\n\
    \           \"A UTF-8 description of this Thing.  This\n            should be\
    \ a brief description that may be\n            displayed to the user to determine\
    \ whether\n            to allow the Thing on the\n            network.\";\n  \
    \     }\n       leaf mfg-name {\n         type string;\n         description\n\
    \           \"Manufacturer name, as described in\n            the ietf-hardware\
    \ YANG module.\";\n       }\n       leaf model-name {\n         type string;\n\
    \         description\n           \"Model name, as described in the\n        \
    \    ietf-hardware YANG module.\";\n       }\n       leaf firmware-rev {\n   \
    \      type string;\n         description\n           \"firmware-rev, as described\
    \ in the\n            ietf-hardware YANG module.  Note that this field\n     \
    \       MUST NOT be included when the device can be\n            updated but the\
    \ MUD URL cannot.\";\n       }\n       leaf software-rev {\n         type string;\n\
    \         description\n           \"software-rev, as described in the\n      \
    \      ietf-hardware YANG module.  Note that this field\n            MUST NOT\
    \ be included when the device can be\n            updated but the MUD URL cannot.\"\
    ;\n       }\n       leaf documentation {\n         type inet:uri;\n         description\n\
    \           \"This URL points to documentation that\n            relates to this\
    \ device and any classes that it uses\n            in its MUD file.  A caution:\
    \ MUD managers need\n            not resolve this URL on their own but rather\
    \ simply\n            provide it to the administrator.  Parsing HTML is\n    \
    \        not an intended function of a MUD manager.\";\n       }\n       leaf-list\
    \ extensions {\n         type string {\n           length \"1..40\";\n       \
    \  }\n         description\n           \"A list of extension names that are used\
    \ in this MUD\n            file.  Each name is registered with the IANA and\n\
    \            described in an RFC.\";\n       }\n       container from-device-policy\
    \ {\n         description\n           \"The policies that should be enforced on\
    \ traffic\n            coming from the device.  These policies are not\n     \
    \       necessarily intended to be enforced at a single\n            point but\
    \ may be rendered by the controller to any\n            relevant enforcement points\
    \ in the network or\n            elsewhere.\";\n         uses access-lists;\n\
    \       }\n       container to-device-policy {\n         description\n       \
    \    \"The policies that should be enforced on traffic\n            going to the\
    \ device.  These policies are not\n            necessarily intended to be enforced\
    \ at a single\n            point but may be rendered by the controller to any\n\
    \            relevant enforcement points in the network or\n            elsewhere.\"\
    ;\n         uses access-lists;\n       }\n     }\n     grouping access-lists {\n\
    \       description\n         \"A grouping for access lists in the context of\
    \ device\n          policy.\";\n       container access-lists {\n         description\n\
    \           \"The access lists that should be applied to traffic\n           \
    \ to or from the device.\";\n         list access-list {\n           key \"name\"\
    ;\n           description\n             \"Each entry on this list refers to an\
    \ ACL that\n              should be present in the overall access list\n     \
    \         data model.  Each ACL is identified by name and\n              type.\"\
    ;\n           leaf name {\n             type leafref {\n               path \"\
    /acl:acls/acl:acl/acl:name\";\n             }\n             description\n    \
    \           \"The name of the ACL for this entry.\";\n           }\n         }\n\
    \       }\n     }\n     augment \"/acl:acls/acl:acl/acl:aces/acl:ace/acl:matches\"\
    \ {\n       description\n         \"adding abstractions to avoid the need of IP\
    \ addresses.\";\n       container mud {\n         description\n           \"MUD-specific\
    \ matches.\";\n         leaf manufacturer {\n           type inet:host;\n    \
    \       description\n             \"A domain that is intended to match the authority\n\
    \              section of the MUD URL.  This node is used to specify\n       \
    \       one or more manufacturers a device should\n              be authorized\
    \ to access.\";\n         }\n         leaf same-manufacturer {\n           type\
    \ empty;\n           description\n             \"This node matches the authority\
    \ section of the MUD URL\n              of a Thing.  It is intended to grant access\
    \ to all\n              devices with the same authority section.\";\n        \
    \ }\n         leaf model {\n           type inet:uri;\n           description\n\
    \             \"Devices of the specified model type will match if\n          \
    \    they have an identical MUD URL.\";\n         }\n         leaf local-networks\
    \ {\n           type empty;\n           description\n             \"IP addresses\
    \ will match this node if they are\n              considered local addresses.\
    \  A local address may be\n              a list of locally defined prefixes and\
    \ masks\n              that indicate a particular administrative scope.\";\n \
    \        }\n         leaf controller {\n           type inet:uri;\n          \
    \ description\n             \"This node names a class that has associated with\
    \ it\n              zero or more IP addresses to match against.  These\n     \
    \         may be scoped to a manufacturer or via a standard\n              URN.\"\
    ;\n         }\n         leaf my-controller {\n           type empty;\n       \
    \    description\n             \"This node matches one or more network elements\
    \ that\n              have been configured to be the controller for this\n   \
    \           Thing, based on its MUD URL.\";\n         }\n       }\n     }\n  \
    \   augment \"/acl:acls/acl:acl/acl:aces/acl:ace/acl:matches\"\n           + \"\
    /acl:l4/acl:tcp/acl:tcp\" {\n       description\n         \"add direction-initiated\"\
    ;\n       leaf direction-initiated {\n         type direction;\n         description\n\
    \           \"This node matches based on which direction a\n            connection\
    \ was initiated.  The means by which that\n            is determined is discussed\
    \ in this document.\";\n       }\n     }\n   }\n   <CODE ENDS>\n"
- title: 8.  The Domain Name Extension to the ACL Model
  contents:
  - "8.  The Domain Name Extension to the ACL Model\n   This module specifies an extension\
    \ to the IETF-ACL model such that\n   domain names may be referenced by augmenting\
    \ the \"matches\" node.\n   Different implementations may deploy differing methods\
    \ to maintain\n   the mapping between the IP address and domain name, if indeed\
    \ any are\n   needed.  However, the intent is that resources that are referred\
    \ to\n   using a name should be authorized (or not) within an access list.\n \
    \  The structure of the change is as follows:\n   module: ietf-acldns\n     augment\
    \ /acl:acls/acl:acl/acl:aces/acl:ace/\n       acl:matches/acl:l3/acl:ipv4/acl:ipv4:\n\
    \       +--rw src-dnsname?   inet:host\n       +--rw dst-dnsname?   inet:host\n\
    \     augment /acl:acls/acl:acl/acl:aces/acl:ace/\n       acl:matches/acl:l3/acl:ipv6/acl:ipv6:\n\
    \       +--rw src-dnsname?   inet:host\n       +--rw dst-dnsname?   inet:host\n\
    \   The choice of these particular points in the access control list\n   model\
    \ is based on the assumption that we are in some way referring to\n   IP-related\
    \ resources, as that is what the DNS returns.  A domain name\n   in our context\
    \ is defined in [RFC6991].  The augmentations are\n   replicated across IPv4 and\
    \ IPv6 to allow MUD file authors the ability\n   to control the IP version that\
    \ the Thing may utilize.\n   The following nodes are defined.\n"
- title: 8.1.  src-dnsname
  contents:
  - "8.1.  src-dnsname\n   The argument corresponds to a domain name of a source as\
    \ specified by\n   inet:host.  A number of means may be used to resolve hosts.\
    \  What is\n   important is that such resolutions be consistent with ACLs that\
    \ are\n   required by Things to properly operate.\n"
- title: 8.2.  dst-dnsname
  contents:
  - "8.2.  dst-dnsname\n   The argument corresponds to a domain name of a destination\
    \ as\n   specified by inet:host.  See the previous section (Section 8.1)\n   relating\
    \ to resolution.\n   Note that when using either of these with a MUD file, because\
    \ access\n   is associated with a particular Thing, MUD files MUST NOT contain\n\
    \   either a src-dnsname in an ACL associated with from-device-policy or\n   a\
    \ dst-dnsname associated with to-device-policy.\n"
- title: 8.3.  The ietf-acldns Model
  contents:
  - "8.3.  The ietf-acldns Model\n   <CODE BEGINS>file \"ietf-acldns@2019-01-28.yang\"\
    \n   module ietf-acldns {\n     yang-version 1.1;\n     namespace \"urn:ietf:params:xml:ns:yang:ietf-acldns\"\
    ;\n     prefix ietf-acldns;\n     import ietf-access-control-list {\n       prefix\
    \ acl;\n     }\n     import ietf-inet-types {\n       prefix inet;\n     }\n \
    \    organization\n       \"IETF OPSAWG (Operations and Management Area Working\
    \ Group)\";\n     contact\n       \"WG Web: <https://datatracker.ietf.org/wg/opsawg/>\n\
    \        WG List: opsawg@ietf.org\n        Author: Eliot Lear\n              \
    \  lear@cisco.com\n        Author: Ralph Droms\n                rdroms@gmail.com\n\
    \        Author: Dan Romascanu\n                dromasca@gmail.com\n       \"\
    ;\n     description\n       \"This YANG module defines a component that augments\
    \ the\n        IETF description of an access list to allow DNS names\n       \
    \ as matching criteria.\n        Copyright (c) 2019 IETF Trust and the persons\
    \ identified as\n        authors of the code.  All rights reserved.\n        Redistribution\
    \ and use in source and binary forms, with or\n        without modification, is\
    \ permitted pursuant to, and subject\n        to the license terms contained in,\
    \ the Simplified BSD License\n        set forth in Section 4.c of the IETF Trust's\
    \ Legal Provisions\n        Relating to IETF Documents\n        (http://trustee.ietf.org/license-info).\"\
    ;\n     revision 2019-01-28 {\n       description\n         \"Base version of\
    \ dnsname extension of the ACL model.\";\n       reference\n         \"RFC 8520:\
    \ Manufacturer Usage Description\n          Specification\";\n     }\n     grouping\
    \ dns-matches {\n       description\n         \"Domain names for matching.\";\n\
    \       leaf src-dnsname {\n         type inet:host;\n         description\n \
    \          \"domain name to be matched against.\";\n       }\n       leaf dst-dnsname\
    \ {\n         type inet:host;\n         description\n           \"domain name\
    \ to be matched against.\";\n       }\n     }\n     augment \"/acl:acls/acl:acl/acl:aces/acl:ace/acl:matches\"\
    \n           + \"/acl:l3/acl:ipv4/acl:ipv4\" {\n       description\n         \"\
    Adding domain names to matching.\";\n       uses dns-matches;\n     }\n     augment\
    \ \"/acl:acls/acl:acl/acl:aces/acl:ace/acl:matches\"\n           + \"/acl:l3/acl:ipv6/acl:ipv6\"\
    \ {\n       description\n         \"Adding domain names to matching.\";\n    \
    \   uses dns-matches;\n     }\n   }\n   <CODE ENDS>\n"
- title: 9.  MUD File Example
  contents:
  - "9.  MUD File Example\n   This example contains two access lists that are intended\
    \ to provide\n   outbound access to a cloud service on TCP port 443.\n   {\n \
    \    \"ietf-mud:mud\": {\n       \"mud-version\": 1,\n       \"mud-url\": \"https://lighting.example.com/lightbulb2000\"\
    ,\n       \"last-update\": \"2019-01-28T11:20:51+01:00\",\n       \"cache-validity\"\
    : 48,\n       \"is-supported\": true,\n       \"systeminfo\": \"The BMS Example\
    \ Light Bulb\",\n       \"from-device-policy\": {\n         \"access-lists\":\
    \ {\n           \"access-list\": [\n             {\n               \"name\": \"\
    mud-76100-v6fr\"\n             }\n           ]\n         }\n       },\n      \
    \ \"to-device-policy\": {\n         \"access-lists\": {\n           \"access-list\"\
    : [\n             {\n               \"name\": \"mud-76100-v6to\"\n           \
    \  }\n           ]\n         }\n       }\n     },\n     \"ietf-access-control-list:acls\"\
    : {\n       \"acl\": [\n         {\n           \"name\": \"mud-76100-v6to\",\n\
    \           \"type\": \"ipv6-acl-type\",\n           \"aces\": {\n           \
    \  \"ace\": [\n               {\n                 \"name\": \"cl0-todev\",\n \
    \                \"matches\": {\n                   \"ipv6\": {\n            \
    \         \"ietf-acldns:src-dnsname\": \"test.example.com\",\n               \
    \      \"protocol\": 6\n                   },\n                   \"tcp\": {\n\
    \                     \"ietf-mud:direction-initiated\": \"from-device\",\n   \
    \                  \"source-port\": {\n                       \"operator\": \"\
    eq\",\n                       \"port\": 443\n                     }\n        \
    \           }\n                 },\n                 \"actions\": {\n        \
    \           \"forwarding\": \"accept\"\n                 }\n               }\n\
    \             ]\n           }\n         },\n         {\n           \"name\": \"\
    mud-76100-v6fr\",\n           \"type\": \"ipv6-acl-type\",\n           \"aces\"\
    : {\n             \"ace\": [\n               {\n                 \"name\": \"\
    cl0-frdev\",\n                 \"matches\": {\n                   \"ipv6\": {\n\
    \                     \"ietf-acldns:dst-dnsname\": \"test.example.com\",\n   \
    \                  \"protocol\": 6\n                   },\n                  \
    \ \"tcp\": {\n                     \"ietf-mud:direction-initiated\": \"from-device\"\
    ,\n                     \"destination-port\": {\n                       \"operator\"\
    : \"eq\",\n                       \"port\": 443\n                     }\n    \
    \               }\n                 },\n                 \"actions\": {\n    \
    \               \"forwarding\": \"accept\"\n                 }\n             \
    \  }\n             ]\n           }\n         }\n       ]\n     }\n   }\n   In\
    \ this example, two policies are declared: one from the Thing and\n   the other\
    \ to the Thing.  Each policy names an access list that\n   applies to the Thing\
    \ and one that applies from the Thing.  Within\n   each access list, access is\
    \ permitted to packets flowing to or from\n   the Thing that can be mapped to\
    \ the domain name of\n   \"service.bms.example.com\".  For each access list, the\
    \ enforcement\n   point should expect that the Thing initiated the connection.\n"
- title: 10.  The MUD URL DHCP Option
  contents:
  - "10.  The MUD URL DHCP Option\n   The IPv4 MUD URL client option has the following\
    \ format:\n     +------+-----+------------------------------\n     | code | len\
    \ |  MUDstring\n     +------+-----+------------------------------\n   Code OPTION_MUD_URL_V4\
    \ (161) has been assigned by IANA.  len is a\n   single octet that indicates the\
    \ length of the MUD string in octets.\n   The MUDstring is defined as follows:\n\
    \    MUDstring = mudurl [ \" \" reserved ]\n    mudurl = URI; a URL [RFC3986]\
    \ that uses the \"https\" scheme [RFC7230]\n    reserved = 1*( OCTET ) ; from\
    \ [RFC5234]\n   The entire option MUST NOT exceed 255 octets.  If a space follows\
    \ the\n   MUD URL, a reserved string that will be defined in future\n   specifications\
    \ follows.  MUD managers that do not understand this\n   field MUST ignore it.\n\
    \   The IPv6 MUD URL client option has the following format:\n      0        \
    \           1                   2                   3\n      0 1 2 3 4 5 6 7 8\
    \ 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |         OPTION_MUD_URL_V6     |        option-length          |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  \
    \                          MUDstring                          |\n     |      \
    \                                                         |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   OPTION_MUD_URL_V6 (112).\n   option-length contains the length of the MUDstring,\
    \ as defined above,\n   in octets.\n   The intent of this option is to provide\
    \ both a new Thing classifier\n   to the network as well as some recommended configuration\
    \ to the\n   routers that implement the policy.  However, it is entirely the\n\
    \   purview of the network system as managed by the network administrator\n  \
    \ to decide what to do with this information.  The key function of this\n   option\
    \ is simply to identify the type of Thing to the network in a\n   structured way\
    \ such that the policy can be easily found with existing\n   toolsets.\n"
- title: 10.1.  Client Behavior
  contents:
  - "10.1.  Client Behavior\n   A DHCPv4 client MAY emit a DHCPv4 option, and a DHCPv6\
    \ client MAY\n   emit a DHCPv6 option.  These options are singletons, as specified\
    \ in\n   [RFC7227].  Because clients are intended to have at most one MUD URL\n\
    \   associated with them, they may emit at most one MUD URL option via\n   DHCPv4\
    \ and one MUD URL option via DHCPv6.  In the case where both v4\n   and v6 DHCP\
    \ options are emitted, the same URL MUST be used.\n"
- title: 10.2.  Server Behavior
  contents:
  - "10.2.  Server Behavior\n   A DHCP server may ignore these options or take action\
    \ based on\n   receipt of these options.  When a server consumes this option,\
    \ it\n   will either forward the URL and relevant client information (such as\n\
    \   the gateway address or giaddr and requested IP address, and lease\n   length)\
    \ to a network management system or retrieve the usage\n   description itself\
    \ by resolving the URL.\n   DHCP servers may implement MUD functionality themselves\
    \ or they may\n   pass along appropriate information to a network management system\
    \ or\n   MUD manager.  A DHCP server that does process the MUD URL MUST adhere\n\
    \   to the process specified in [RFC2818] and [RFC5280] to validate the\n   TLS\
    \ certificate of the web server hosting the MUD file.  Those\n   servers will\
    \ retrieve the file, process it, and create and install\n   the necessary configuration\
    \ on the relevant network element.  Servers\n   SHOULD monitor the gateway for\
    \ state changes on a given interface.  A\n   DHCP server that does not provide\
    \ MUD functionality and has forwarded\n   a MUD URL to a MUD manager MUST notify\
    \ the MUD manager of any\n   corresponding change to the DHCP state of the client\
    \ (such as\n   expiration or explicit release of a network address lease).\n \
    \  Should the DHCP server fail, in the case when it implements the MUD\n   manager\
    \ functionality, any backup mechanisms SHOULD include the MUD\n   state, and the\
    \ server SHOULD resolve the status of clients upon its\n   restart, similar to\
    \ what it would do absent MUD manager\n   functionality.  In the case where the\
    \ DHCP server forwards\n   information to the MUD manager, the MUD manager will\
    \ either make use\n   of redundant DHCP servers for information or clear state\
    \ based on\n   other network information, such as monitoring port status on a\
    \ switch\n   via SNMP, Radius accounting, or similar mechanisms.\n"
- title: 10.3.  Relay Requirements
  contents:
  - "10.3.  Relay Requirements\n   There are no additional requirements for relays.\n"
- title: 11.  The Manufacturer Usage Description (MUD) URL X.509 Extension
  contents:
  - "11.  The Manufacturer Usage Description (MUD) URL X.509 Extension\n   This section\
    \ defines an X.509 non-critical certificate extension that\n   contains a single\
    \ URL that points to an online Manufacturer Usage\n   Description concerning the\
    \ certificate subject.  The URI must be\n   represented as described in Section\
    \ 7.4 of [RFC5280].\n   Any Internationalized Resource Identifiers (IRIs) MUST\
    \ be mapped to\n   URIs as specified in Section 3.1 of [RFC3987] before they are\
    \ placed\n   in the certificate extension.\n   The semantics of the URL are defined\
    \ Section 6 of this document.\n   The choice of id-pe is based on guidance found\
    \ in Section 4.2.2 of\n   [RFC5280]:\n         These extensions may be used to\
    \ direct applications to on-line\n         information about the issuer or the\
    \ subject.\n   The MUD URL is precisely that: online information about the\n \
    \  particular subject.\n   In addition, a separate new extension is defined as\
    \ id-pe-mudsigner.\n   This contains the subject field of the signing certificate\
    \ of the MUD\n   file.  Processing of this field is specified in Section 13.2.\n\
    \   The purpose of this signature is to make a claim that the MUD file\n   found\
    \ on the server is valid for a given device, independent of any\n   other factors.\
    \  There are several security considerations below in\n   Section 16.\n   A new\
    \ content-type id-ct-mud is also defined.  While signatures are\n   detached today,\
    \ should a MUD file be transmitted as part of a\n   Cryptographic Message Syntax\
    \ (CMS) message, this content-type SHOULD\n   be used.\n   This module imports\
    \ from [RFC5912] and [RFC6268].  The new extension\n   is identified as follows:\n\
    \   <CODE BEGINS>\n      MUDURLExtnModule-2016 { iso(1) identified-organization(3)\
    \ dod(6)\n                   internet(1) security(5) mechanisms(5) pkix(7)\n \
    \                  id-mod(0) id-mod-mudURLExtn2016(88) }\n       DEFINITIONS IMPLICIT\
    \ TAGS ::= BEGIN\n       -- EXPORTS ALL --\n      IMPORTS\n        -- RFC 5912\n\
    \        EXTENSION\n        FROM PKIX-CommonTypes-2009\n             { iso(1)\
    \ identified-organization(3) dod(6) internet(1)\n               security(5) mechanisms(5)\
    \ pkix(7) id-mod(0)\n               id-mod-pkixCommon-02(57) }\n        -- RFC\
    \ 5912\n        id-ct\n        FROM PKIXCRMF-2009\n             { iso(1) identified-organization(3)\
    \ dod(6) internet(1)\n               security(5)  mechanisms(5) pkix(7) id-mod(0)\n\
    \               id-mod-crmf2005-02(55) }\n        -- RFC 6268\n        CONTENT-TYPE\n\
    \        FROM CryptographicMessageSyntax-2010\n          { iso(1) member-body(2)\
    \ us(840) rsadsi(113549)\n            pkcs(1) pkcs-9(9) smime(16) modules(0) id-mod-cms-2009(58)\
    \ }\n        -- RFC 5912\n        id-pe, Name\n        FROM PKIX1Explicit-2009\n\
    \              { iso(1) identified-organization(3) dod(6) internet(1)\n      \
    \          security(5) mechanisms(5) pkix(7) id-mod(0)\n                id-mod-pkix1-explicit-02(51)\
    \ } ;\n       --\n       -- Certificate Extensions\n       --\n       MUDCertExtensions\
    \ EXTENSION ::=\n          { ext-MUDURL | ext-MUDsigner, ... }\n       ext-MUDURL\
    \ EXTENSION ::=\n          { SYNTAX MUDURLSyntax IDENTIFIED BY id-pe-mud-url }\n\
    \       id-pe-mud-url OBJECT IDENTIFIER ::= { id-pe 25 }\n       MUDURLSyntax\
    \ ::= IA5String\n       ext-MUDsigner EXTENSION ::=\n          { SYNTAX MUDsignerSyntax\
    \ IDENTIFIED BY id-pe-mudsigner }\n       id-pe-mudsigner OBJECT IDENTIFIER ::=\
    \ { id-pe 30 }\n       MUDsignerSyntax ::= Name\n       --\n       -- CMS Content\
    \ Types\n       --\n       MUDContentTypes CONTENT-TYPE ::=\n          { ct-mud,\
    \ ... }\n        ct-mud CONTENT-TYPE ::=\n          { -- directly include the\
    \ content\n            IDENTIFIED BY id-ct-mudtype }\n          -- The binary\
    \ data that is in the form\n          -- \"application/mud+json\" is directly\
    \ encoded as the\n          -- signed data.  No additional ASN.1 encoding is added.\n\
    \       id-ct-mudtype OBJECT IDENTIFIER ::= { id-ct 41 }\n       END\n   <CODE\
    \ ENDS>\n   While this extension can appear in either an 802.AR manufacturer\n\
    \   certificate (IDevID) or a deployment certificate (LDevID), of course\n   it\
    \ is not guaranteed in either, nor is it guaranteed to be carried\n   over.  It\
    \ is RECOMMENDED that MUD manager implementations maintain a\n   table that maps\
    \ a Thing to its MUD URL based on IDevIDs.\n"
- title: 12.  The Manufacturer Usage Description LLDP Extension
  contents:
  - "12.  The Manufacturer Usage Description LLDP Extension\n   The IEEE802.1AB Link\
    \ Layer Discovery Protocol (LLDP) is a one-hop,\n   vendor-neutral link-layer\
    \ protocol used by end host network Things\n   for advertising their identity,\
    \ capabilities, and neighbors on an\n   IEEE 802 local area network.  Its Type-Length-Value\
    \ (TLV) design\n   allows for \"vendor-specific\" extensions to be defined.  IANA\
    \ has a\n   registered IEEE 802 organizationally unique identifier (OUI) defined\n\
    \   as documented in [RFC7042].  The MUD LLDP extension uses a subtype\n   defined\
    \ in this document to carry the MUD URL.\n   The LLDP vendor-specific frame has\
    \ the following format:\n   +--------+--------+----------+---------+--------------\n\
    \   |TLV Type|  len   |   OUI    |subtype  | MUDString\n   |  =127  |        |=\
    \ 00 00 5E|  = 1    |\n   |(7 bits)|(9 bits)|(3 octets)|(1 octet)|(1-255 octets)\n\
    \   +--------+--------+----------+---------+--------------\n   where:\n   o  TLV\
    \ Type = 127 indicates a vendor-specific TLV\n   o  len = indicates the TLV string\
    \ length\n   o  OUI = 00 00 5E is the organizationally unique identifier of IANA\n\
    \   o  subtype = 1 (as assigned by IANA for the MUDstring)\n   o  MUDstring =\
    \ the length MUST NOT exceed 255 octets\n   The intent of this extension is to\
    \ provide both a new Thing\n   classifier to the network as well as some recommended\
    \ configuration\n   to the routers that implement the policy.  However, it is\
    \ entirely\n   the purview of the network system as managed by the network\n \
    \  administrator to decide what to do with this information.  The key\n   function\
    \ of this extension is simply to identify the type of Thing to\n   the network\
    \ in a structured way such that the policy can be easily\n   found with existing\
    \ toolsets.\n   Hosts, routers, or other network elements that implement this\
    \ option\n   are intended to have at most one MUD URL associated with them, so\n\
    \   they may transmit at most one MUD URL value.\n   Hosts, routers, or other\
    \ network elements that implement this option\n   may ignore these options or\
    \ take action based on receipt of these\n   options.  For example, they may fill\
    \ in information in the respective\n   extensions of the LLDP Management Information\
    \ Base (MIB).  LLDP\n   operates in a one-way direction.  Link Layer Discovery\
    \ Protocol Data\n   Units (LLDPDUs) are not exchanged as information requests\
    \ by one\n   Thing and responses sent by another Thing.  The other Things do not\n\
    \   acknowledge LLDP information received from a Thing.  No specific\n   network\
    \ behavior is guaranteed.  When a Thing consumes this\n   extension, it may either\
    \ forward the URL and relevant remote Thing\n   information to a MUD manager or\
    \ retrieve the usage description by\n   resolving the URL in accordance with normal\
    \ HTTP semantics.\n"
- title: 13.  The Creating and Processing of Signed MUD Files
  contents:
  - "13.  The Creating and Processing of Signed MUD Files\n   Because MUD files contain\
    \ information that may be used to configure\n   network access lists, they are\
    \ sensitive.  To ensure that they have\n   not been tampered with, it is important\
    \ that they be signed.  We make\n   use of DER-encoded Cryptographic Message Syntax\
    \ (CMS) [RFC5652] for\n   this purpose.\n"
- title: 13.1.  Creating a MUD File Signature
  contents:
  - "13.1.  Creating a MUD File Signature\n   A MUD file MUST be signed using CMS\
    \ as an opaque binary object.  In\n   order to make successful verification more\
    \ likely, intermediate\n   certificates SHOULD be included.  The signature is\
    \ stored at the\n   location specified in the MUD file.  Signatures are transferred\
    \ using\n   content-type \"application/pkcs7-signature\".\n   For example:\n \
    \  % openssl cms -sign -signer mancertfile -inkey mankey \\\n                \
    \ -in mudfile -binary -outform DER -binary \\\n                 -certfile intermediatecert\
    \ -out mudfile.p7s\n   Note: A MUD file may need to be re-signed if the signature\
    \ expires.\n"
- title: 13.2.  Verifying a MUD File Signature
  contents:
  - "13.2.  Verifying a MUD File Signature\n   Prior to processing the rest of a MUD\
    \ file, the MUD manager MUST\n   retrieve the MUD signature file by retrieving\
    \ the value of \"mud-\n   signature\" and validating the signature across the\
    \ MUD file.  The Key\n   Usage Extension in the signing certificate MUST be present\
    \ and have\n   the bit digitalSignature(0) set.  When the id-pe-mudsigner extension\n\
    \   is present in a device's X.509 certificate, the MUD signature file\n   MUST\
    \ have been generated by a certificate whose subject matches the\n   contents\
    \ of that id-pe-mudsigner extension.  If these conditions are\n   not met, or\
    \ if it cannot validate the chain of trust to a known trust\n   anchor, the MUD\
    \ manager MUST cease processing the MUD file until an\n   administrator has given\
    \ approval.\n   The purpose of the signature on the file is to assign accountability\n\
    \   to an entity, whose reputation can be used to guide administrators on\n  \
    \ whether or not to accept a given MUD file.  It is already common\n   place to\
    \ check web reputation on the location of a server on which a\n   file resides.\
    \  While it is likely that the manufacturer will be the\n   signer of the file,\
    \ this is not strictly necessary, and it may not be\n   desirable.  For one thing,\
    \ in some environments, integrators may\n   install their own certificates.  For\
    \ another, what is more important\n   is the accountability of the recommendation,\
    \ and not just the\n   relationship between the Thing and the file.\n   An example:\n\
    \   % openssl cms -verify -in mudfile.p7s -inform DER -content mudfile\n   Note\
    \ the additional step of verifying the common trust root.\n"
- title: 14.  Extensibility
  contents:
  - "14.  Extensibility\n   One of our design goals is to see that MUD files are able\
    \ to be\n   understood by as broad a cross-section of systems as is possible.\n\
    \   Coupled with the fact that we have also chosen to leverage existing\n   mechanisms,\
    \ we are left with no ability to negotiate extensions and a\n   limited desire\
    \ for those extensions in any event.  As such, a two-\n   tier extensibility framework\
    \ is employed, as follows:\n   1.  At a coarse grain, a protocol version is included\
    \ in a MUD URL.\n       This memo specifies MUD version 1.  Any and all changes\
    \ are\n       entertained when this version is bumped.  Transition approaches\n\
    \       between versions would be a matter for discussion in future\n       versions.\n\
    \   2.  At a finer grain, only extensions that would not incur additional\n  \
    \     risk to the Thing are permitted.  Specifically, adding nodes to\n      \
    \ the mud container is permitted with the understanding that such\n       additions\
    \ will be ignored by unaware implementations.  Any such\n       extensions SHALL\
    \ be standardized through the IETF process and\n       MUST be named in the \"\
    extensions\" list.  MUD managers MUST ignore\n       YANG nodes they do not understand\
    \ and SHOULD create an exception\n       to be resolved by an administrator, so\
    \ as to avoid any policy\n       inconsistencies.\n"
- title: 15.  Deployment Considerations
  contents:
  - "15.  Deployment Considerations\n   Because MUD consists of a number of architectural\
    \ building blocks, it\n   is possible to assemble different deployment scenarios.\
    \  One key\n   aspect is where to place policy enforcement.  In order to protect\
    \ the\n   Thing from other Things within a local deployment, policy can be\n \
    \  enforced on the nearest switch or access point.  In order to limit\n   unwanted\
    \ traffic within a network, it may also be advisable to\n   enforce policy as\
    \ close to the Internet as possible.  In some\n   circumstances, policy enforcement\
    \ may not be available at the closest\n   hop.  At that point, the risk of lateral\
    \ infection (infection of\n   devices that reside near one another) is increased\
    \ to the number of\n   Things that are able to communicate without protection.\n\
    \   A caution about some of the classes: admission of a Thing into the\n   \"\
    manufacturer\" and \"same-manufacturer\" class may have impact on the\n   access\
    \ of other Things.  Put another way, the admission may grow the\n   access list\
    \ on switches connected to other Things, depending on how\n   access is managed.\
    \  Some care should be given on managing that access\n   list growth.  Alternative\
    \ methods such as additional network\n   segmentation can be used to keep that\
    \ growth within reason.\n   Because as of this writing MUD is a new concept, one\
    \ can expect a\n   great many devices to not have implemented it.  It remains\
    \ a local\n   deployment decision as to whether a device that is first connected\n\
    \   should be allowed broad or limited access.  Furthermore, as mentioned\n  \
    \ in the introduction, a deployment may choose to ignore a MUD policy\n   in its\
    \ entirety and simply take into account the MUD URL as a\n   classifier to be\
    \ used as part of a local policy decision.\n   Finally, please see directly below\
    \ information regarding device\n   lifetimes and use of domain names.\n"
- title: 16.  Security Considerations
  contents:
  - "16.  Security Considerations\n   Based on how a MUD URL is emitted, a Thing may\
    \ be able to lie about\n   what it is, thus gaining additional network access.\
    \  This can happen\n   in a number of ways when a device emits a MUD URL using\
    \ DHCP or LLDP,\n   such as being inappropriately admitted to a class such as\n\
    \   \"same-manufacturer\", being given access to a device such as\n   \"my-controller\"\
    , or being permitted access to an Internet resource,\n   where such access would\
    \ otherwise be disallowed.  Whether that is the\n   case will depend on the deployment.\
    \  Implementations SHOULD be\n   configurable to disallow additive access for\
    \ devices using MUD URLs\n   that are not emitted in a secure fashion such as\
    \ in a certificate.\n   Similarly, implementations SHOULD NOT grant elevated permissions\n\
    \   (beyond those of devices presenting no MUD policy) to devices that do\n  \
    \ not strongly bind their identity to their L2/L3 transmissions.  When\n   insecure\
    \ methods are used by the MUD manager, the classes SHOULD NOT\n   contain devices\
    \ that use both insecure and secure methods, in order\n   to prevent privilege\
    \ escalation attacks, and MUST NOT contain devices\n   with the same MUD URL that\
    \ are derived from both strong and weak\n   authentication methods.\n   Devices\
    \ may forge source (L2/L3) information.  Deployments should\n   apply appropriate\
    \ protections to bind communications to the\n   authentication that has taken\
    \ place.  For 802.1X authentication, IEEE\n   802.1AE (MACsec) [IEEE8021AE] is\
    \ one means by which this may happen.\n   A similar approach can be used with\
    \ 802.11i (Wi-Fi Protected Access 2\n   (WPA2)) [IEEE80211i].  Other means are\
    \ available with other lower-\n   layer technologies.  Implementations using session-oriented\
    \ access\n   that is not cryptographically bound should take care to remove state\n\
    \   when any form of break in the session is detected.\n   A rogue certification\
    \ authority (CA) may sign a certificate that\n   contains the same subject name\
    \ as is listed in the MUDsigner field in\n   the manufacturer certificate, thus\
    \ seemingly permitting a substitute\n   MUD file for a device.  There are two\
    \ mitigations available: First,\n   if the signer changes, this may be flagged\
    \ as an exception by the MUD\n   manager.  Second, if the MUD file also changes,\
    \ the MUD manager\n   SHOULD seek administrator approval (it should do this in\
    \ any case).\n   In all circumstances, the MUD manager MUST maintain a cache of\n\
    \   trusted CAs for this purpose.  When such a rogue is discovered, it\n   SHOULD\
    \ be removed.\n   Additional mitigations are described below.\n   When certificates\
    \ are not present, Things claiming to be of a certain\n   manufacturer SHOULD\
    \ NOT be included in that manufacturer grouping\n   without additional validation\
    \ of some form.  This will be relevant\n   when the MUD manager makes use of primitives\
    \ such as \"manufacturer\"\n   for the purpose of accessing Things of a particular\
    \ type.  Similarly,\n   network management systems may be able to fingerprint\
    \ the Thing.  In\n   such cases, the MUD URL can act as a classifier that can\
    \ be proven or\n   disproven.  Fingerprinting may have other advantages as well:\
    \ when\n   802.1AR certificates are used, because they themselves cannot change,\n\
    \   fingerprinting offers the opportunity to add artifacts to the MUD\n   string\
    \ in the form of the reserved field discussed in Section 10.\n   The meaning of\
    \ such artifacts is left as future work.\n   MUD managers SHOULD NOT accept a\
    \ usage description for a Thing with\n   the same Media Access Control (MAC) address\
    \ that has indicated a\n   change of the URL authority without some additional\
    \ validation (such\n   as review by a network administrator).  New Things that\
    \ present some\n   form of unauthenticated MUD URL SHOULD be validated by some\
    \ external\n   means when they would be given increased network access.\n   It\
    \ may be possible for a rogue manufacturer to inappropriately\n   exercise the\
    \ MUD file parser, in order to exploit a vulnerability.\n   There are two recommended\
    \ approaches to address this threat.  The\n   first is to validate that the signer\
    \ of the MUD file is known to and\n   trusted by the MUD manager.  The second\
    \ is to have a system do a\n   primary scan of the file to ensure that it is both\
    \ parseable and\n   believable at some level.  MUD files will likely be relatively\
    \ small,\n   to start with.  The number of ACEs used by any given Thing should\
    \ be\n   relatively small as well.  It may also be useful to limit retrieval\n\
    \   of MUD URLs to only those sites that are known to have decent web or\n   domain\
    \ reputations.\n   Use of a URL necessitates the use of domain names.  If a domain\
    \ name\n   changes ownership, the new owner of that domain may be able to\n  \
    \ provide MUD files that MUD managers would consider valid.  MUD\n   managers\
    \ SHOULD cache certificates used by the MUD file server.  When\n   a new certificate\
    \ is retrieved for whatever reason, the MUD manager\n   should check to see if\
    \ ownership of the domain has changed.  A fair\n   programmatic approximation\
    \ of this is when the name servers for the\n   domain have changed.  If the actual\
    \ MUD file has changed, the MUD\n   manager MAY check the WHOIS database to see\
    \ if registration ownership\n   of a domain has changed.  If a change has occurred,\
    \ or if for some\n   reason it is not possible to determine whether ownership\
    \ has changed,\n   further review may be warranted.  Note, this remediation does\
    \ not\n   take into account the case of a Thing that was produced long ago and\n\
    \   only recently fielded, or the case where a new MUD manager has been\n   installed.\n\
    \   The release of a MUD URL by a Thing reveals what the Thing is and\n   provides\
    \ an attacker with guidance on what vulnerabilities may be\n   present.\n   While\
    \ the MUD URL itself is not intended to be unique to a specific\n   Thing, the\
    \ release of the URL may aid an observer in identifying\n   individuals when combined\
    \ with other information.  This is a privacy\n   consideration.\n   In addressing\
    \ both of these concerns, implementors should take into\n   account what other\
    \ information they are advertising through\n   mechanisms such as Multicast DNS\
    \ (mDNS) [RFC6872]; how a Thing might\n   otherwise be identified, perhaps through\
    \ how it behaves when it is\n   connected to the network; and whether a Thing\
    \ is intended to be used\n   by individuals or carry personal identifying information,\
    \ and then\n   apply appropriate data minimization techniques.  One approach is\
    \ to\n   make use of TEAP [RFC7170] as the means to share information with\n \
    \  authorized components in the network.  Network elements may also\n   assist\
    \ in limiting access to the MUD URL through the use of\n   mechanisms such as\
    \ DHCPv6-Shield [RFC7610].\n   There is the risk of the MUD manager itself being\
    \ spied on to\n   determine what things are connected to the network.  To address\
    \ this\n   risk, MUD managers may choose to make use of TLS proxies that they\n\
    \   trust that would aggregate other information.\n   Please note that the security\
    \ considerations mentioned in Section 3.7\n   of [RFC8407] are not applicable\
    \ in this case because the YANG\n   serialization is not intended to be accessed\
    \ via NETCONF.  However,\n   for those who try to instantiate this model in a\
    \ network element via\n   the Network Configuration Protocol (NETCONF), all objects\
    \ in each\n   model in this document exhibit similar security characteristics\
    \ as\n   [RFC8519].  The basic purpose of MUD is to configure access, so by\n\
    \   its very nature, it can be disruptive if used by unauthorized\n   parties.\n"
- title: 17.  IANA Considerations
  contents:
  - '17.  IANA Considerations

    '
- title: 17.1.  YANG Module Registrations
  contents:
  - "17.1.  YANG Module Registrations\n   The following YANG modules have been registered\
    \ in the \"YANG Module\n   Names\" registry:\n      Name: ietf-mud\n      URN:\
    \ urn:ietf:params:xml:ns:yang:ietf-mud\n      Prefix: ietf-mud\n      Registrant\
    \ contact: The IESG\n      Reference: RFC 8520\n      Name: ietf-acldns\n    \
    \  URI: urn:ietf:params:xml:ns:yang:ietf-acldns\n      Prefix: ietf-acldns\n \
    \     Registrant contact: The IESG\n      Reference: RFC 8520\n"
- title: 17.2.  URI Registrations
  contents:
  - "17.2.  URI Registrations\n   IANA has added the following entries to the \"IETF\
    \ XML registry\":\n   URI: urn:ietf:params:xml:ns:yang:ietf-acldns\n   Registrant\
    \ Contact: The IESG.\n   XML: N/A.  The requested URI is an XML namespace.\n \
    \  URI: urn:ietf:params:xml:ns:yang:ietf-mud\n   Registrant Contact: The IESG.\n\
    \   XML: N/A.  The requested URI is an XML namespace.\n"
- title: 17.3.  DHCPv4 and DHCPv6 Options
  contents:
  - "17.3.  DHCPv4 and DHCPv6 Options\n   The IANA has allocated OPTION_MUD_URL_V4\
    \ (161) in the \"Dynamic Host\n   Configuration Protocol (DHCP) and Bootstrap\
    \ Protocol (BOOTP)\n   Parameters\" registry, and OPTION_MUD_URL_V6 (112) in the\
    \ \"Dynamic\n   Host Configuration Protocol for IPv6 (DHCPv6)\" registry, as described\n\
    \   in Section 10.\n"
- title: 17.4.  PKIX Extensions
  contents:
  - "17.4.  PKIX Extensions\n   IANA has made the following assignments for:\n   o\
    \  The MUDURLExtnModule-2016 ASN.1 module (88) in the \"SMI Security\n      for\
    \ PKIX Module Identifier\" registry (1.3.6.1.5.5.7.0).\n   o  id-pe-mud-url object\
    \ identifier (25) from the \"SMI Security for\n      PKIX Certificate Extension\"\
    \ registry (1.3.6.1.5.5.7.1).\n   o  id-pe-mudsigner object identifier (30) from\
    \ the \"SMI Security for\n      PKIX Certificate Extension\" registry.\n   o \
    \ id-ct-mudtype object identifier (41) from the \"SMI Security for\n      S/MIME\
    \ CMS Content Type\" registry.\n   o  The use of these values is specified in\
    \ Section 11.\n"
- title: 17.5.  Media Type Registration for MUD Files
  contents:
  - "17.5.  Media Type Registration for MUD Files\n   The following media type is\
    \ defined for the transfer of MUD files:\n   o  Type name: application\n   o \
    \ Subtype name: mud+json\n   o  Required parameters: N/A\n   o  Optional parameters:\
    \ N/A\n   o  Encoding considerations: 8bit; \"application/mud+json\" values are\n\
    \      represented as JSON objects; UTF-8 encoding MUST be employed\n      [RFC3629].\n\
    \   o  Security considerations: See Security Considerations of RFC 8520\n    \
    \  and Section 12 of [RFC8259].\n   o  Interoperability considerations: N/A\n\
    \   o  Published specification: RFC 8520\n   o  Applications that use this media\
    \ type: MUD managers as specified\n      by RFC 8520.\n   o  Fragment identifier\
    \ considerations: N/A\n   o  Additional information:\n      Magic number(s): N/A\n\
    \      File extension(s): N/A\n      Macintosh file type code(s): N/A\n   o  Person\
    \ & email address to contact for further information:\n      Eliot Lear <lear@cisco.com>,\
    \ Ralph Droms <rdroms@gmail.com>,\n      Dan Romascanu <dromasca@gmail.com>\n\
    \   o  Intended usage: COMMON\n   o  Restrictions on usage: none\n   o  Author:\n\
    \      Eliot Lear <lear@cisco.com>\n      Ralph Droms <rdroms@gmail.com>\n   \
    \   Dan Romascanu <dromasca@gmail.com>\n   o  Change controller: IESG\n   o  Provisional\
    \ registration? (standards tree only): No.\n"
- title: 17.6.  IANA LLDP TLV Subtype Registry
  contents:
  - "17.6.  IANA LLDP TLV Subtype Registry\n   IANA has created a new registry titled\
    \ \"IANA Link Layer Discovery\n   Protocol (LLDP) TLV Subtypes\" under \"IEEE\
    \ 802 Numbers\".  The policy\n   for this registry is Expert Review [RFC8126].\
    \  The maximum number of\n   entries in the registry is 256.\n   IANA has populated\
    \ the initial registry as follows:\n   LLDP subtype value: 1 (All the other 255\
    \ values are initially marked\n   as \"Unassigned\".)\n   Description: the Manufacturer\
    \ Usage Description (MUD) Uniform\n   Resource Locator (URL)\n   Reference: RFC\
    \ 8520\n"
- title: 17.7.  The MUD Well-Known Universal Resource Name (URNs)
  contents:
  - "17.7.  The MUD Well-Known Universal Resource Name (URNs)\n   The following parameter\
    \ registry has been added in accordance with\n   [RFC3553].\n      Registry name:\
    \ MUD Well-Known Universal Resource Name (URN)\n      Specification: RFC 8520\n\
    \      Repository: https://www.iana.org/assignments/mud\n      Index value:  Encoded\
    \ identically to a TCP/UDP port service\n                    name, as specified\
    \ in Section 5.1 of [RFC6335]\n   The following entries have been added to the\
    \ \"MUD Well-Known\n   Universal Resource Name (URN)\" registry:\n   \"urn:ietf:params:mud:dns\"\
    \ refers to the service specified by\n   [RFC1123].  \"urn:ietf:params:mud:ntp\"\
    \ refers to the service specified\n   by [RFC5905].\n"
- title: 17.8.  Extensions Registry
  contents:
  - "17.8.  Extensions Registry\n   The IANA has established a registry of extensions\
    \ as follows:\n      Registry name: MUD Extensions\n      Registry policy: Standards\
    \ Action\n      Reference: RFC 8520\n      Extension name: UTF-8-encoded string,\
    \ not to exceed 40 characters.\n   Each extension MUST follow the rules specified\
    \ in this specification.\n   As is usual, the IANA issues early allocations in\
    \ accordance with\n   [RFC7120].\n"
- title: 18.  References
  contents:
  - '18.  References

    '
- title: 18.1.  Normative References
  contents:
  - "18.1.  Normative References\n   [IEEE8021AB]\n              IEEE, \"IEEE Standard\
    \ for Local and Metropolitan Area\n              Networks-- Station and Media\
    \ Access Control Connectivity\n              Discovery\", IEEE 802.1AB.\n   [RFC1123]\
    \  Braden, R., Ed., \"Requirements for Internet Hosts -\n              Application\
    \ and Support\", STD 3, RFC 1123,\n              DOI 10.17487/RFC1123, October\
    \ 1989,\n              <https://www.rfc-editor.org/info/rfc1123>.\n   [RFC2119]\
    \  Bradner, S., \"Key words for use in RFCs to Indicate\n              Requirement\
    \ Levels\", BCP 14, RFC 2119,\n              DOI 10.17487/RFC2119, March 1997,\n\
    \              <https://www.rfc-editor.org/info/rfc2119>.\n   [RFC2131]  Droms,\
    \ R., \"Dynamic Host Configuration Protocol\",\n              RFC 2131, DOI 10.17487/RFC2131,\
    \ March 1997,\n              <https://www.rfc-editor.org/info/rfc2131>.\n   [RFC2818]\
    \  Rescorla, E., \"HTTP Over TLS\", RFC 2818,\n              DOI 10.17487/RFC2818,\
    \ May 2000,\n              <https://www.rfc-editor.org/info/rfc2818>.\n   [RFC3629]\
    \  Yergeau, F., \"UTF-8, a transformation format of ISO\n              10646\"\
    , STD 63, RFC 3629, DOI 10.17487/RFC3629, November\n              2003, <https://www.rfc-editor.org/info/rfc3629>.\n\
    \   [RFC3748]  Aboba, B., Blunk, L., Vollbrecht, J., Carlson, J., and H.\n   \
    \           Levkowetz, Ed., \"Extensible Authentication Protocol\n           \
    \   (EAP)\", RFC 3748, DOI 10.17487/RFC3748, June 2004,\n              <https://www.rfc-editor.org/info/rfc3748>.\n\
    \   [RFC3986]  Berners-Lee, T., Fielding, R., and L. Masinter, \"Uniform\n   \
    \           Resource Identifier (URI): Generic Syntax\", STD 66,\n           \
    \   RFC 3986, DOI 10.17487/RFC3986, January 2005,\n              <https://www.rfc-editor.org/info/rfc3986>.\n\
    \   [RFC3987]  Duerst, M. and M. Suignard, \"Internationalized Resource\n    \
    \          Identifiers (IRIs)\", RFC 3987, DOI 10.17487/RFC3987,\n           \
    \   January 2005, <https://www.rfc-editor.org/info/rfc3987>.\n   [RFC5234]  Crocker,\
    \ D., Ed. and P. Overell, \"Augmented BNF for Syntax\n              Specifications:\
    \ ABNF\", STD 68, RFC 5234,\n              DOI 10.17487/RFC5234, January 2008,\n\
    \              <https://www.rfc-editor.org/info/rfc5234>.\n   [RFC5280]  Cooper,\
    \ D., Santesson, S., Farrell, S., Boeyen, S.,\n              Housley, R., and\
    \ W. Polk, \"Internet X.509 Public Key\n              Infrastructure Certificate\
    \ and Certificate Revocation List\n              (CRL) Profile\", RFC 5280, DOI\
    \ 10.17487/RFC5280, May 2008,\n              <https://www.rfc-editor.org/info/rfc5280>.\n\
    \   [RFC5652]  Housley, R., \"Cryptographic Message Syntax (CMS)\", STD 70,\n\
    \              RFC 5652, DOI 10.17487/RFC5652, September 2009,\n             \
    \ <https://www.rfc-editor.org/info/rfc5652>.\n   [RFC5905]  Mills, D., Martin,\
    \ J., Ed., Burbank, J., and W. Kasch,\n              \"Network Time Protocol Version\
    \ 4: Protocol and Algorithms\n              Specification\", RFC 5905, DOI 10.17487/RFC5905,\
    \ June 2010,\n              <https://www.rfc-editor.org/info/rfc5905>.\n   [RFC5912]\
    \  Hoffman, P. and J. Schaad, \"New ASN.1 Modules for the\n              Public\
    \ Key Infrastructure Using X.509 (PKIX)\", RFC 5912,\n              DOI 10.17487/RFC5912,\
    \ June 2010,\n              <https://www.rfc-editor.org/info/rfc5912>.\n   [RFC6268]\
    \  Schaad, J. and S. Turner, \"Additional New ASN.1 Modules\n              for\
    \ the Cryptographic Message Syntax (CMS) and the Public\n              Key Infrastructure\
    \ Using X.509 (PKIX)\", RFC 6268,\n              DOI 10.17487/RFC6268, July 2011,\n\
    \              <https://www.rfc-editor.org/info/rfc6268>.\n   [RFC6335]  Cotton,\
    \ M., Eggert, L., Touch, J., Westerlund, M., and S.\n              Cheshire, \"\
    Internet Assigned Numbers Authority (IANA)\n              Procedures for the Management\
    \ of the Service Name and\n              Transport Protocol Port Number Registry\"\
    , BCP 165,\n              RFC 6335, DOI 10.17487/RFC6335, August 2011,\n     \
    \         <https://www.rfc-editor.org/info/rfc6335>.\n   [RFC6991]  Schoenwaelder,\
    \ J., Ed., \"Common YANG Data Types\",\n              RFC 6991, DOI 10.17487/RFC6991,\
    \ July 2013,\n              <https://www.rfc-editor.org/info/rfc6991>.\n   [RFC7120]\
    \  Cotton, M., \"Early IANA Allocation of Standards Track Code\n             \
    \ Points\", BCP 100, RFC 7120, DOI 10.17487/RFC7120, January\n              2014,\
    \ <https://www.rfc-editor.org/info/rfc7120>.\n   [RFC7227]  Hankins, D., Mrugalski,\
    \ T., Siodelski, M., Jiang, S., and\n              S. Krishnan, \"Guidelines for\
    \ Creating New DHCPv6 Options\",\n              BCP 187, RFC 7227, DOI 10.17487/RFC7227,\
    \ May 2014,\n              <https://www.rfc-editor.org/info/rfc7227>.\n   [RFC7230]\
    \  Fielding, R., Ed. and J. Reschke, Ed., \"Hypertext Transfer\n             \
    \ Protocol (HTTP/1.1): Message Syntax and Routing\",\n              RFC 7230,\
    \ DOI 10.17487/RFC7230, June 2014,\n              <https://www.rfc-editor.org/info/rfc7230>.\n\
    \   [RFC7231]  Fielding, R., Ed. and J. Reschke, Ed., \"Hypertext Transfer\n \
    \             Protocol (HTTP/1.1): Semantics and Content\", RFC 7231,\n      \
    \        DOI 10.17487/RFC7231, June 2014,\n              <https://www.rfc-editor.org/info/rfc7231>.\n\
    \   [RFC7610]  Gont, F., Liu, W., and G. Van de Velde, \"DHCPv6-Shield:\n    \
    \          Protecting against Rogue DHCPv6 Servers\", BCP 199,\n             \
    \ RFC 7610, DOI 10.17487/RFC7610, August 2015,\n              <https://www.rfc-editor.org/info/rfc7610>.\n\
    \   [RFC7950]  Bjorklund, M., Ed., \"The YANG 1.1 Data Modeling Language\",\n\
    \              RFC 7950, DOI 10.17487/RFC7950, August 2016,\n              <https://www.rfc-editor.org/info/rfc7950>.\n\
    \   [RFC7951]  Lhotka, L., \"JSON Encoding of Data Modeled with YANG\",\n    \
    \          RFC 7951, DOI 10.17487/RFC7951, August 2016,\n              <https://www.rfc-editor.org/info/rfc7951>.\n\
    \   [RFC8174]  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n     \
    \         2119 Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n        \
    \      May 2017, <https://www.rfc-editor.org/info/rfc8174>.\n   [RFC8259]  Bray,\
    \ T., Ed., \"The JavaScript Object Notation (JSON) Data\n              Interchange\
    \ Format\", STD 90, RFC 8259,\n              DOI 10.17487/RFC8259, December 2017,\n\
    \              <https://www.rfc-editor.org/info/rfc8259>.\n   [RFC8340]  Bjorklund,\
    \ M. and L. Berger, Ed., \"YANG Tree Diagrams\",\n              BCP 215, RFC 8340,\
    \ DOI 10.17487/RFC8340, March 2018,\n              <https://www.rfc-editor.org/info/rfc8340>.\n\
    \   [RFC8348]  Bierman, A., Bjorklund, M., Dong, J., and D. Romascanu, \"A\n \
    \             YANG Data Model for Hardware Management\", RFC 8348,\n         \
    \     DOI 10.17487/RFC8348, March 2018,\n              <https://www.rfc-editor.org/info/rfc8348>.\n\
    \   [RFC8415]  Mrugalski, T., Siodelski, M., Volz, B., Yourtchenko, A.,\n    \
    \          Richardson, M., Jiang, S., Lemon, T., and T. Winters,\n           \
    \   \"Dynamic Host Configuration Protocol for IPv6 (DHCPv6)\",\n             \
    \ RFC 8415, DOI 10.17487/RFC8415, November 2018,\n              <https://www.rfc-editor.org/info/rfc8415>.\n\
    \   [RFC8519]  Jethanandani, M., Agarwal, S., Huang, L., and D. Blair,\n     \
    \         \"YANG Data Model for Network Access Control Lists (ACLs)\",\n     \
    \         RFC 8519, DOI 10.17487/RFC8519, March 2019,\n              <https://www.rfc-editor.org/info/rfc8519>.\n"
- title: 18.2.  Informative References
  contents:
  - "18.2.  Informative References\n   [FW95]     Chapman, D. and E. Zwicky, \"Building\
    \ Internet Firewalls\",\n              First Edition, November 1995.\n   [IEEE80211i]\n\
    \              IEEE, \"IEEE Standard for information technology-\n           \
    \   Telecommunications and information exchange between\n              systems-Local\
    \ and metropolitan area networks-Specific\n              requirements-Part 11:\
    \ Wireless LAN Medium Access Control\n              (MAC) and Physical Layer (PHY)\
    \ specifications: Amendment\n              6: Medium Access Control (MAC) Security\
    \ Enhancements\",\n              IEEE 802.11i.\n   [IEEE8021AE]\n            \
    \  IEEE, \"IEEE Standard for Local and metropolitan area\n              networks-Media\
    \ Access Control (MAC) Security\",\n              IEEE 802.1AE.\n   [IEEE8021AR]\n\
    \              IEEE, \"IEEE Standard for Local and metropolitan area\n       \
    \       networks - Secure Device Identity\", IEEE 802.1AR.\n   [IEEE8021X]\n \
    \             IEEE, \"IEEE Standard for Local and metropolitan area\n        \
    \      networks--Port-Based Network Access Control\", IEEE 802.1X.\n   [RFC1984]\
    \  IAB and IESG, \"IAB and IESG Statement on Cryptographic\n              Technology\
    \ and the Internet\", BCP 200, RFC 1984,\n              DOI 10.17487/RFC1984,\
    \ August 1996,\n              <https://www.rfc-editor.org/info/rfc1984>.\n   [RFC3553]\
    \  Mealling, M., Masinter, L., Hardie, T., and G. Klyne, \"An\n              IETF\
    \ URN Sub-namespace for Registered Protocol\n              Parameters\", BCP 73,\
    \ RFC 3553, DOI 10.17487/RFC3553, June\n              2003, <https://www.rfc-editor.org/info/rfc3553>.\n\
    \   [RFC6092]  Woodyatt, J., Ed., \"Recommended Simple Security\n            \
    \  Capabilities in Customer Premises Equipment (CPE) for\n              Providing\
    \ Residential IPv6 Internet Service\", RFC 6092,\n              DOI 10.17487/RFC6092,\
    \ January 2011,\n              <https://www.rfc-editor.org/info/rfc6092>.\n  \
    \ [RFC6872]  Gurbani, V., Ed., Burger, E., Ed., Anjali, T., Abdelnur,\n      \
    \        H., and O. Festor, \"The Common Log Format (CLF) for the\n          \
    \    Session Initiation Protocol (SIP): Framework and\n              Information\
    \ Model\", RFC 6872, DOI 10.17487/RFC6872,\n              February 2013, <https://www.rfc-editor.org/info/rfc6872>.\n\
    \   [RFC7042]  Eastlake 3rd, D. and J. Abley, \"IANA Considerations and\n    \
    \          IETF Protocol and Documentation Usage for IEEE 802\n              Parameters\"\
    , BCP 141, RFC 7042, DOI 10.17487/RFC7042,\n              October 2013, <https://www.rfc-editor.org/info/rfc7042>.\n\
    \   [RFC7170]  Zhou, H., Cam-Winget, N., Salowey, J., and S. Hanna,\n        \
    \      \"Tunnel Extensible Authentication Protocol (TEAP) Version\n          \
    \    1\", RFC 7170, DOI 10.17487/RFC7170, May 2014,\n              <https://www.rfc-editor.org/info/rfc7170>.\n\
    \   [RFC7252]  Shelby, Z., Hartke, K., and C. Bormann, \"The Constrained\n   \
    \           Application Protocol (CoAP)\", RFC 7252,\n              DOI 10.17487/RFC7252,\
    \ June 2014,\n              <https://www.rfc-editor.org/info/rfc7252>.\n   [RFC7452]\
    \  Tschofenig, H., Arkko, J., Thaler, D., and D. McPherson,\n              \"\
    Architectural Considerations in Smart Object Networking\",\n              RFC\
    \ 7452, DOI 10.17487/RFC7452, March 2015,\n              <https://www.rfc-editor.org/info/rfc7452>.\n\
    \   [RFC7488]  Boucadair, M., Penno, R., Wing, D., Patil, P., and T.\n       \
    \       Reddy, \"Port Control Protocol (PCP) Server Selection\",\n           \
    \   RFC 7488, DOI 10.17487/RFC7488, March 2015,\n              <https://www.rfc-editor.org/info/rfc7488>.\n\
    \   [RFC8126]  Cotton, M., Leiba, B., and T. Narten, \"Guidelines for\n      \
    \        Writing an IANA Considerations Section in RFCs\", BCP 26,\n         \
    \     RFC 8126, DOI 10.17487/RFC8126, June 2017,\n              <https://www.rfc-editor.org/info/rfc8126>.\n\
    \   [RFC8343]  Bjorklund, M., \"A YANG Data Model for Interface\n            \
    \  Management\", RFC 8343, DOI 10.17487/RFC8343, March 2018,\n              <https://www.rfc-editor.org/info/rfc8343>.\n\
    \   [RFC8407]  Bierman, A., \"Guidelines for Authors and Reviewers of\n      \
    \        Documents Containing YANG Data Models\", BCP 216, RFC 8407,\n       \
    \       DOI 10.17487/RFC8407, October 2018,\n              <https://www.rfc-editor.org/info/rfc8407>.\n"
- title: Appendix A.  Default MUD Nodes
  contents:
  - "Appendix A.  Default MUD Nodes\n   What follows is the portion of a MUD file\
    \ that permits DNS traffic to\n   a controller that is registered with the URN\n\
    \   \"urn:ietf:params:mud:dns\" and traffic NTP to a controller that is\n   registered\
    \ with \"urn:ietf:params:mud:ntp\".  This is considered the\n   default behavior,\
    \ and the ACEs are in effect appended to whatever\n   other \"ace\" entries that\
    \ a MUD file contains.  To block DNS or NTP,\n   one repeats the matching statement\
    \ but replaces the \"forwarding\"\n   action \"accept\" with \"drop\".  Because\
    \ ACEs are processed in the order\n   they are received, the defaults would not\
    \ be reached.  A MUD manager\n   might further decide to optimize to simply not\
    \ include the defaults\n   when they are overridden.\n   Four \"acl\" list entries\
    \ that implement default MUD nodes are listed\n   below.  Two are for IPv4 and\
    \ two are for IPv6 (one in each direction\n   for both versions of IP).  Note\
    \ that neither the access list name nor\n   the ace name need be retained or used\
    \ in any way by local\n   implementations; they are simply there for the sake\
    \ of completeness.\n    \"ietf-access-control-list:acls\": {\n       \"acl\":\
    \ [\n         {\n           \"name\": \"mud-59776-v4to\",\n           \"type\"\
    : \"ipv4-acl-type\",\n           \"aces\": {\n             \"ace\": [\n      \
    \         {\n                 \"name\": \"ent0-todev\",\n                 \"matches\"\
    : {\n                   \"ietf-mud:mud\": {\n                     \"controller\"\
    : \"urn:ietf:params:mud:dns\"\n                   },\n                   \"ipv4\"\
    : {\n                     \"protocol\": 17\n                   },\n          \
    \         \"udp\": {\n                     \"source-port\": {\n              \
    \         \"operator\": \"eq\",\n                       \"port\": 53\n       \
    \              }\n                   }\n                 },\n                \
    \ \"actions\": {\n                   \"forwarding\": \"accept\"\n            \
    \     }\n               },\n               {\n                 \"name\": \"ent1-todev\"\
    ,\n                 \"matches\": {\n                   \"ietf-mud:mud\": {\n \
    \                    \"controller\": \"urn:ietf:params:mud:ntp\"\n           \
    \        },\n                   \"ipv4\": {\n                     \"protocol\"\
    : 17\n                   },\n                   \"udp\": {\n                 \
    \    \"source-port\": {\n                       \"operator\": \"eq\",\n      \
    \                 \"port\": 123\n                     }\n                   }\n\
    \                 },\n                 \"actions\": {\n                   \"forwarding\"\
    : \"accept\"\n                 }\n               }\n             ]\n         \
    \  }\n         },\n         {\n           \"name\": \"mud-59776-v4fr\",\n    \
    \       \"type\": \"ipv4-acl-type\",\n           \"aces\": {\n             \"\
    ace\": [\n               {\n                 \"name\": \"ent0-frdev\",\n     \
    \            \"matches\": {\n                   \"ietf-mud:mud\": {\n        \
    \             \"controller\": \"urn:ietf:params:mud:dns\"\n                  \
    \ },\n                   \"ipv4\": {\n                     \"protocol\": 17\n\
    \                   },\n                   \"udp\": {\n                     \"\
    destination-port\": {\n                       \"operator\": \"eq\",\n        \
    \               \"port\": 53\n                     }\n                   }\n \
    \                },\n                 \"actions\": {\n                   \"forwarding\"\
    : \"accept\"\n                 }\n               },\n               {\n      \
    \           \"name\": \"ent1-frdev\",\n                 \"matches\": {\n     \
    \              \"ietf-mud:mud\": {\n                     \"controller\": \"urn:ietf:params:mud:ntp\"\
    \n                   },\n                   \"ipv4\": {\n                    \
    \ \"protocol\": 17\n                   },\n                   \"udp\": {\n   \
    \                  \"destination-port\": {\n                       \"operator\"\
    : \"eq\",\n                       \"port\": 123\n                     }\n    \
    \               }\n                 },\n                 \"actions\": {\n    \
    \               \"forwarding\": \"accept\"\n                 }\n             \
    \  }\n             ]\n           }\n         },\n         {\n           \"name\"\
    : \"mud-59776-v6to\",\n           \"type\": \"ipv6-acl-type\",\n           \"\
    aces\": {\n             \"ace\": [\n               {\n                 \"name\"\
    : \"ent0-todev\",\n                 \"matches\": {\n                   \"ietf-mud:mud\"\
    : {\n                     \"controller\": \"urn:ietf:params:mud:dns\"\n      \
    \             },\n                   \"ipv6\": {\n                     \"protocol\"\
    : 17\n                   },\n                   \"udp\": {\n                 \
    \    \"source-port\": {\n                       \"operator\": \"eq\",\n      \
    \                 \"port\": 53\n                     }\n                   }\n\
    \                 },\n                 \"actions\": {\n                   \"forwarding\"\
    : \"accept\"\n                 }\n               },\n               {\n      \
    \           \"name\": \"ent1-todev\",\n                 \"matches\": {\n     \
    \              \"ietf-mud:mud\": {\n                     \"controller\": \"urn:ietf:params:mud:ntp\"\
    \n                   },\n                   \"ipv6\": {\n                    \
    \ \"protocol\": 17\n                   },\n                   \"udp\": {\n   \
    \                  \"source-port\": {\n                       \"operator\": \"\
    eq\",\n                       \"port\": 123\n                     }\n        \
    \           }\n                 },\n                 \"actions\": {\n        \
    \           \"forwarding\": \"accept\"\n                 }\n               }\n\
    \             ]\n           }\n         },\n         {\n           \"name\": \"\
    mud-59776-v6fr\",\n           \"type\": \"ipv6-acl-type\",\n           \"aces\"\
    : {\n             \"ace\": [\n               {\n                 \"name\": \"\
    ent0-frdev\",\n                 \"matches\": {\n                   \"ietf-mud:mud\"\
    : {\n                     \"controller\": \"urn:ietf:params:mud:dns\"\n      \
    \             },\n                   \"ipv6\": {\n                     \"protocol\"\
    : 17\n                   },\n                   \"udp\": {\n                 \
    \    \"destination-port\": {\n                       \"operator\": \"eq\",\n \
    \                      \"port\": 53\n                     }\n                \
    \   }\n                 },\n                 \"actions\": {\n                \
    \   \"forwarding\": \"accept\"\n                 }\n               },\n      \
    \         {\n                 \"name\": \"ent1-frdev\",\n                 \"matches\"\
    : {\n                   \"ietf-mud:mud\": {\n                     \"controller\"\
    : \"urn:ietf:params:mud:ntp\"\n                   },\n                   \"ipv6\"\
    : {\n                     \"protocol\": 17\n                   },\n          \
    \         \"udp\": {\n                     \"destination-port\": {\n         \
    \              \"operator\": \"eq\",\n                       \"port\": 123\n \
    \                    }\n                   }\n                 },\n          \
    \       \"actions\": {\n                   \"forwarding\": \"accept\"\n      \
    \           }\n               }\n             ]\n           }\n         }\n  \
    \     ]\n     }\n"
- title: 'Appendix B.  A Sample Extension: DETNET-indicator'
  contents:
  - "Appendix B.  A Sample Extension: DETNET-indicator\n   In this sample extension,\
    \ we augment the core MUD model to indicate\n   whether the device implements\
    \ DETNET.  If a device claims not to use\n   DETNET, but then later attempts to\
    \ do so, a notification or exception\n   might be generated.  Note that this example\
    \ is intended only for\n   illustrative purposes.\n Extension Name: \"Example-Extension\"\
    \ (to be used in the extensions list)\n Standard: RFC 8520 (but do not register\
    \ the example)\n   This extension augments the MUD model to include a single node,\
    \ using\n   the following sample module that has the following tree structure:\n\
    \   module: ietf-mud-detext-example\n     augment /ietf-mud:mud:\n       +--rw\
    \ is-detnet-required?   boolean\n   The model is defined as follows:\n   <CODE\
    \ BEGINS>file \"ietf-mud-detext-example@2019-01-28.yang\"\n   module ietf-mud-detext-example\
    \ {\n     yang-version 1.1;\n     namespace \"urn:ietf:params:xml:ns:yang:ietf-mud-detext-example\"\
    ;\n     prefix ietf-mud-detext-example;\n     import ietf-mud {\n       prefix\
    \ ietf-mud;\n     }\n     organization\n       \"IETF OPSAWG (Operations and Management\
    \ Area Working Group)\";\n     contact\n       \"WG Web: <https://datatracker.ietf.org/wg/opsawg/>\n\
    \        WG List: opsawg@ietf.org\n        Author: Eliot Lear\n              \
    \  lear@cisco.com\n        Author: Ralph Droms\n                rdroms@gmail.com\n\
    \        Author: Dan Romascanu\n                dromasca@gmail.com\n       \"\
    ;\n     description\n       \"Sample extension to a MUD module to indicate a need\n\
    \        for DETNET support.\";\n     revision 2019-01-28 {\n       description\n\
    \         \"Initial revision.\";\n       reference\n         \"RFC 8520: Manufacturer\
    \ Usage Description\n          Specification\";\n     }\n     augment \"/ietf-mud:mud\"\
    \ {\n       description\n         \"This adds a simple extension for a manufacturer\n\
    \           to indicate whether DETNET is required by a\n          device.\";\n\
    \       leaf is-detnet-required {\n         type boolean;\n         description\n\
    \           \"This value will equal 'true' if a device requires\n            DETNET\
    \ to properly function.\";\n       }\n     }\n   }\n   <CODE ENDS>\n   Using the\
    \ previous example, we now show how the extension would be\n   expressed:\n  \
    \ {\n     \"ietf-mud:mud\": {\n       \"mud-version\": 1,\n       \"mud-url\"\
    : \"https://lighting.example.com/lightbulb2000\",\n       \"last-update\": \"\
    2019-01-28T11:20:51+01:00\",\n       \"cache-validity\": 48,\n       \"extensions\"\
    : [\n           \"ietf-mud-detext-example\"\n        ],\n       \"ietf-mud-detext-example:is-detnet-required\"\
    : \"false\",\n       \"is-supported\": true,\n       \"systeminfo\": \"The BMS\
    \ Example Light Bulb\",\n       \"from-device-policy\": {\n         \"access-lists\"\
    : {\n           \"access-list\": [\n             {\n               \"name\": \"\
    mud-76100-v6fr\"\n             }\n           ]\n         }\n       },\n      \
    \ \"to-device-policy\": {\n         \"access-lists\": {\n           \"access-list\"\
    : [\n             {\n               \"name\": \"mud-76100-v6to\"\n           \
    \  }\n           ]\n         }\n       }\n     },\n     \"ietf-access-control-list:acls\"\
    : {\n       \"acl\": [\n         {\n           \"name\": \"mud-76100-v6to\",\n\
    \           \"type\": \"ipv6-acl-type\",\n           \"aces\": {\n           \
    \  \"ace\": [\n               {\n                 \"name\": \"cl0-todev\",\n \
    \                \"matches\": {\n                   \"ipv6\": {\n            \
    \         \"ietf-acldns:src-dnsname\": \"test.example.com\",\n               \
    \      \"protocol\": 6\n                   },\n                   \"tcp\": {\n\
    \                     \"ietf-mud:direction-initiated\": \"from-device\",\n   \
    \                  \"source-port\": {\n                       \"operator\": \"\
    eq\",\n                       \"port\": 443\n                     }\n        \
    \           }\n                 },\n                 \"actions\": {\n        \
    \           \"forwarding\": \"accept\"\n                 }\n               }\n\
    \             ]\n           }\n         },\n         {\n           \"name\": \"\
    mud-76100-v6fr\",\n           \"type\": \"ipv6-acl-type\",\n           \"aces\"\
    : {\n             \"ace\": [\n               {\n                 \"name\": \"\
    cl0-frdev\",\n                 \"matches\": {\n                   \"ipv6\": {\n\
    \                     \"ietf-acldns:dst-dnsname\": \"test.example.com\",\n   \
    \                  \"protocol\": 6\n                   },\n                  \
    \ \"tcp\": {\n                     \"ietf-mud:direction-initiated\": \"from-device\"\
    ,\n                     \"destination-port\": {\n                       \"operator\"\
    : \"eq\",\n                       \"port\": 443\n                     }\n    \
    \               }\n                 },\n                 \"actions\": {\n    \
    \               \"forwarding\": \"accept\"\n                 }\n             \
    \  }\n             ]\n           }\n         }\n       ]\n     }\n   }\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   The authors would like to thank Einar Nilsen-Nygaard, who\n\
    \   singlehandedly updated the model to match the updated ACL model,\n   Bernie\
    \ Volz, Tom Gindin, Brian Weis, Sandeep Kumar, Thorsten Dahm,\n   John Bashinski,\
    \ Steve Rich, Jim Bieda, Dan Wing, Joe Clarke, Henk\n   Birkholz, Adam Montville,\
    \ Jim Schaad, and Robert Sparks for their\n   valuable advice and reviews.  Russ\
    \ Housley entirely rewrote\n   Section 11 to be a complete module.  Adrian Farrel\
    \ provided the basis\n   for the privacy considerations text.  Kent Watsen provided\
    \ a thorough\n   review of the architecture and the YANG model.  The remaining\
    \ errors\n   in this work are entirely the responsibility of the authors.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Eliot Lear\n   Cisco Systems\n   Richtistrasse 7\n   Wallisellen\
    \  CH-8304\n   Switzerland\n   Phone: +41 44 878 9200\n   Email: lear@cisco.com\n\
    \   Ralph Droms\n   Google\n   355 Main St., 5th Floor\n   Cambridge, MA  02142\n\
    \   United States of America\n   Phone: +1 978 376 3731\n   Email: rdroms@gmail.com\n\
    \   Dan Romascanu\n   Phone: +972 54 5555347\n   Email: dromasca@gmail.com\n"
