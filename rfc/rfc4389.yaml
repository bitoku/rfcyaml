- title: __initial_text__
  contents:
  - '                 Neighbor Discovery Proxies (ND Proxy)

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo defines an Experimental Protocol for the Internet\n\
    \   community.  It does not specify an Internet standard of any kind.\n   Discussion\
    \ and suggestions for improvement are requested.\n   Distribution of this memo\
    \ is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2006).\n"
- title: Abstract
  contents:
  - "Abstract\n   Bridging multiple links into a single entity has several operational\n\
    \   advantages.  A single subnet prefix is sufficient to support multiple\n  \
    \ physical links.  There is no need to allocate subnet numbers to the\n   different\
    \ networks, simplifying management.  Bridging some types of\n   media requires\
    \ network-layer support, however.  This document\n   describes these cases and\
    \ specifies the IP-layer support that enables\n   bridging under these circumstances.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \      1.1. SCENARIO 1: Wireless Upstream ..............................3\n  \
    \    1.2. SCENARIO 2: PPP Upstream ...................................4\n    \
    \  1.3. Inapplicable Scenarios .....................................5\n   2. Terminology\
    \ .....................................................5\n   3. Requirements ....................................................5\n\
    \      3.1. Non-requirements ...........................................6\n  \
    \ 4. Proxy Behavior ..................................................7\n    \
    \  4.1. Forwarding Packets .........................................7\n      \
    \     4.1.1. Sending Packet Too Big Messages .....................8\n        \
    \   4.1.2. Proxying Packets with Link-Layer Addresses ..........8\n          \
    \ 4.1.3. IPv6 ND Proxying ....................................9\n            \
    \      4.1.3.1. ICMPv6 Neighbor Solicitations ..............9\n              \
    \    4.1.3.2. ICMPv6 Neighbor Advertisements .............9\n                \
    \  4.1.3.3. ICMPv6 Router Advertisements ...............9\n                  4.1.3.4.\
    \ ICMPv6 Redirects ..........................10\n      4.2. Originating Packets\
    \ .......................................10\n   5. Example ........................................................11\n\
    \   6. Loop Prevention ................................................12\n  \
    \ 7. Guidelines to Proxy Developers .................................12\n   8.\
    \ IANA Considerations ............................................13\n   9. Security\
    \ Considerations ........................................13\n   10. Acknowledgements\
    \ ..............................................14\n   11. Normative References\
    \ ..........................................14\n   12. Informative References\
    \ ........................................15\n   Appendix A: Comparison with Naive\
    \ RA Proxy ........................16\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   In the IPv4 Internet today, it is common for Network Address\n\
    \   Translators (NATs) [NAT] to be used to easily connect one or more\n   leaf\
    \ links to an existing network without requiring any coordination\n   with the\
    \ network service provider.  Since NATs modify IP addresses in\n   packets, they\
    \ are problematic for many IP applications.  As a result,\n   it is desirable\
    \ to address the problem (for both IPv4 and IPv6)\n   without the need for NATs,\
    \ while still maintaining the property that\n   no explicit cooperation from the\
    \ router is needed.\n   One common solution is IEEE 802 bridging, as specified\
    \ in [BRIDGE].\n   It is expected that whenever possible links will be bridged\
    \ at the\n   link layer using classic bridge technology [BRIDGE] as opposed to\n\
    \   using the mechanisms herein.  However, classic bridging at the data-\n   link\
    \ layer has the following limitations (among others):\n   o    It requires the\
    \ ports to support promiscuous mode.\n   o    It requires all ports to support\
    \ the same type of link-layer\n        addressing (in particular, IEEE 802 addressing).\n\
    \   As a result, two common scenarios, described below, are not solved,\n   and\
    \ it is these two scenarios we specifically target in this\n   document.  While\
    \ the mechanism described herein may apply to other\n   scenarios as well, we\
    \ will concentrate our discussion on these two\n   scenarios.\n"
- title: '1.1.  SCENARIO 1: Wireless Upstream'
  contents:
  - "1.1.  SCENARIO 1: Wireless Upstream\n   The following figure illustrates a likely\
    \ example:\n            |         +-------+           +--------+\n      local\
    \ |Ethernet |       | Wireless  | Access |\n            +---------+   A   +-)))\
    \   (((-+        +--> rest of network\n      hosts |         |       |   link\
    \    | Point  |\n            |         +-------+           +--------+\n   In this\
    \ scenario, the access point has assigned an IPv6 subnet prefix\n   to the wireless\
    \ link, and uses link-layer encryption so that wireless\n   clients may not see\
    \ each other's data.\n   Classic bridging requires the bridge (node A in the above\
    \ diagram) to\n   be in promiscuous mode.  In this wireless scenario, A cannot\
    \ put its\n   wireless interface into promiscuous mode, since one wireless node\n\
    \   cannot see traffic to/from other wireless nodes.\n   IPv4 Address Resolution\
    \ Protocol (ARP) proxying has been used for\n   some years to solve this problem\
    \ without involving NAT or requiring\n   any change to the access point or router.\
    \  In this document, we\n   describe equivalent functionality for IPv6 to remove\
    \ this incentive\n   to deploy NATs in IPv6.\n   We also note that Prefix Delegation\
    \ [PD] could also be used to solve\n   this scenario.  There are, however, two\
    \ disadvantages to this.\n   First, if an implementation already supports IPv4\
    \ ARP proxying (which\n   is indeed the case in a number of implementations today),\
    \ then IPv6\n   Prefix Delegation would result in separate IPv6 subnets on either\n\
    \   side of the device, while a single IPv4 subnet would span both\n   segments.\
    \  This topological discrepancy can complicate applications\n   and protocols\
    \ that use the concept of a local subnet.  Second, the\n   extent to which Prefix\
    \ Delegation is supported for any particular\n   subscriber class is up to the\
    \ service provider.  Hence, there is no\n   guarantee that Prefix Delegation will\
    \ work without explicit\n   configuration or additional charge.  Bridging, on\
    \ the other hand,\n   allows the device to work with zero configuration, regardless\
    \ of the\n   service provider's policies, just as a NAT does.  Hence bridging\n\
    \   avoids the incentive to NAT IPv6 just to avoid paying for, or\n   requiring\
    \ configuration to get, another prefix.\n"
- title: '1.2.  SCENARIO 2: PPP Upstream'
  contents:
  - "1.2.  SCENARIO 2: PPP Upstream\n   The following figure illustrates another likely\
    \ example:\n            |         +-------+           +--------+\n      local\
    \ |Ethernet |       | PPP link  |        |\n            +---------+   A   +-----------+\
    \ Router +--> rest of network\n      hosts |         |       |           |   \
    \     |\n            |         +-------+           +--------+\n   In this scenario,\
    \ the router has assigned a /64 to the PPP link and\n   advertises it in an IPv6\
    \ Router Advertisement.\n   Classic bridging does not support non-802 media. \
    \ The PPP Bridging\n   Control Protocol [BCP] defines a mechanism for supporting\
    \ bridging\n   over PPP, but it requires both ends to be configured to support\
    \ it.\n   Hence IPv4 connectivity is often solved by making the proxy (node A\n\
    \   in the above diagram) be a NAT or an IPv4 ARP proxy.  This document\n   specifies\
    \ a solution for IPv6 that does not involve NAT or require\n   any change to the\
    \ router.\n"
- title: 1.3.  Inapplicable Scenarios
  contents:
  - "1.3.  Inapplicable Scenarios\n   This document is not applicable to scenarios\
    \ with loops in the\n   physical topology, or where routers exist on multiple\
    \ segments.\n   These cases are detected and proxying is disabled (see Section\
    \ 6).\n   In addition, this document is not appropriate for scenarios where\n\
    \   classic bridging can be applied, or when configuration of the router\n   can\
    \ be done.\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and\
    \ \"OPTIONAL\" in this\n   document are to be interpreted as described in BCP\
    \ 14, RFC 2119\n   [KEYWORDS].\n   The term \"proxy interface\" will be used to\
    \ refer to an interface\n   (which could itself be a bridge interface) over which\
    \ network-layer\n   proxying is done as defined herein.\n   In this document,\
    \ we make no distinction between a \"link\" (in the\n   classic IPv6 sense) and\
    \ a \"subnet\".  We use the term \"segment\" to\n   apply to a bridged component\
    \ of the link.\n   Finally, while it is possible that functionality equivalent\
    \ to that\n   described herein may be achieved by nodes that do not fulfill all\
    \ the\n   requirements in [NODEREQ], in the remainder of this document we will\n\
    \   describe behavior in terms of an IPv6 node as defined in that\n   document.\n"
- title: 3.  Requirements
  contents:
  - "3.  Requirements\n   Proxy behavior is designed with the following requirements\
    \ in mind:\n   o    Support connecting multiple segments with a single subnet\n\
    \        prefix.\n   o    Support media that cannot be bridged at the link layer.\n\
    \   o    Do not require any changes to existing routers.  That is,\n        routers\
    \ on the subnet may be unaware that the subnet is being\n        bridged.\n  \
    \ o    Provide full connectivity between all nodes in the subnet.\n        For\
    \ example, if there are existing nodes (such as any routers\n        on the subnet)\
    \ that have addresses in the subnet prefix,\n        adding a proxy must allow\
    \ bridged nodes to have full\n        connectivity with existing nodes on the\
    \ subnet.\n   o    Prevent loops.\n   o    Also work in the absence of any routers.\n\
    \   o    Support nodes moving between segments.  For example, a node\n       \
    \ should be able to keep its address without seeing its address\n        as a\
    \ duplicate due to any cache maintained at the proxy.\n   o    Allow dynamic addition\
    \ of a proxy without adversely\n        disrupting the network.\n   o    The proxy\
    \ behavior should not break any existing classic\n        bridges in use on a\
    \ network segment.\n"
- title: 3.1.  Non-requirements
  contents:
  - "3.1.  Non-requirements\n   The following items are not considered requirements,\
    \ as they are not\n   met by classic bridges:\n   o    Show up as a hop in a traceroute.\n\
    \   o    Use the shortest path between two nodes on different\n        segments.\n\
    \   o    Be able to use all available interfaces simultaneously.\n        Instead,\
    \ bridging technology relies on disabling redundant\n        interfaces to prevent\
    \ loops.\n   o    Support connecting media on which Neighbor Discovery is not\n\
    \        possible.  For example, some technologies such as [6TO4] use\n      \
    \  an algorithmic mapping from IPv6 address to the underlying\n        link-layer\
    \ (IPv4 in this case) address, and hence cannot\n        support bridging arbitrary\
    \ IP addresses.\n   The following additional items are not considered requirements\
    \ for\n   this document:\n   o    Support network-layer protocols other than IPv6.\
    \  We do not\n        preclude such support, but it is not specified in this\n\
    \        document.\n   o    Support Redirects for off-subnet destinations that\
    \ point to a\n        router on a different segment from the redirected host.\n\
    \        While this scenario may be desirable, no solution is\n        currently\
    \ known that does not have undesirable side effects\n        outside the subnet.\
    \  As a result, this scenario is outside\n        the scope of this document.\n"
- title: 4.  Proxy Behavior
  contents:
  - "4.  Proxy Behavior\n   Network-layer support for proxying between multiple interfaces\
    \ SHOULD\n   be used only when classic bridging is not possible.\n   When a proxy\
    \ interface comes up, the node puts it in \"all-multicast\"\n   mode so that it\
    \ will receive all multicast packets.  It is common for\n   interfaces not to\
    \ support full promiscuous mode (e.g., on a wireless\n   client), but all-multicast\
    \ mode is generally still supported.\n   As with all other interfaces, IPv6 maintains\
    \ a neighbor cache for\n   each proxy interface, which will be used as described\
    \ below.\n"
- title: 4.1.  Forwarding Packets
  contents:
  - "4.1.  Forwarding Packets\n   When a packet from any IPv6 source address other\
    \ than the unspecified\n   address is received on a proxy interface, the neighbor\
    \ cache of that\n   interface SHOULD be consulted to find an entry for the source\
    \ IPv6\n   address.  If no entry exists, one is created in the STALE state.\n\
    \   When any IPv6 packet is received on a proxy interface, it must be\n   parsed\
    \ to see whether it is known to be of a type that negotiates\n   link-layer addresses.\
    \  This document covers the following types:\n   Neighbor Solicitations, Neighbor\
    \ Advertisements, Router\n   Advertisements, and Redirects.  These packets are\
    \ ones that can carry\n   link-layer addresses, and hence must be proxied (as\
    \ described below)\n   so that packets between nodes on different segments can\
    \ be received\n   by the proxy and have the correct link-layer address type on\
    \ each\n   segment.\n   When any other IPv6 multicast packet is received on a\
    \ proxy\n   interface, in addition to any normal IPv6 behavior such as being\n\
    \   delivered locally, it is forwarded unchanged (other than using a new\n   link-layer\
    \ header) out all other proxy interfaces on the same link.\n   (As specified in\
    \ [BRIDGE], the proxy may instead support multicast\n   learning and filtering,\
    \ but this is OPTIONAL.)  In particular, the\n   IPv6 Hop Limit is not updated,\
    \ and no ICMP errors (except as noted in\n   Section 4.1.1 below) are sent as\
    \ a result of attempting this\n   forwarding.\n   When any other IPv6 unicast\
    \ packet is received on a proxy interface,\n   if it is not locally destined then\
    \ it is forwarded unchanged (other\n   than using a new link-layer header) to\
    \ the proxy interface for which\n   the next hop address appears in the neighbor\
    \ cache.  Again the IPv6\n   Hop Limit is not updated, and no ICMP errors (except\
    \ as noted in\n   Section 4.1.1 below) are sent as a result of attempting this\n\
    \   forwarding.  To choose a proxy interface to forward to, the neighbor\n   cache\
    \ is consulted, and the interface with the neighbor entry in the\n   \"best\"\
    \ state is used.  In order of least to most preferred, the\n   states (per [ND])\
    \ are INCOMPLETE, STALE, DELAY, PROBE, REACHABLE.  A\n   packet is never forwarded\
    \ back out the same interface on which it\n   arrived; such a packet is instead\
    \ silently dropped.\n   If no cache entry exists (as may happen if the proxy has\
    \ previously\n   evicted the cache entry or if the proxy is restarted), the proxy\n\
    \   SHOULD queue the packet and initiate Neighbor Discovery as if the\n   packet\
    \ were being locally generated.  The proxy MAY instead silently\n   drop the packet.\
    \  In this case, the entry will eventually be re-\n   created when the sender\
    \ re-attempts Neighbor Discovery.\n   The link-layer header and the link-layer\
    \ address within the payload\n   for each forwarded packet will be modified as\
    \ follows:\n   1)   The source address will be the address of the outgoing\n \
    \       interface.\n   2)   The destination address will be the address in the\
    \ neighbor\n        entry corresponding to the destination IPv6 address.\n   3)\
    \   The link-layer address within the payload is substituted with\n        the\
    \ address of the outgoing interface.\n"
- title: 4.1.1.  Sending Packet Too Big Messages
  contents:
  - "4.1.1.  Sending Packet Too Big Messages\n   Whenever any IPv6 packet is to be\
    \ forwarded out an interface whose\n   MTU is smaller than the size of the packet,\
    \ the ND proxy drops the\n   packet and sends a Packet Too Big message back to\
    \ the source, as\n   described in [ICMPv6].\n"
- title: 4.1.2.  Proxying Packets with Link-Layer Addresses
  contents:
  - "4.1.2.  Proxying Packets with Link-Layer Addresses\n   Once it is determined\
    \ that the packet is either multicast or else is\n   not locally destined (if\
    \ unicast), the special types enumerated above\n   (ARP, etc.) that carry link-layer\
    \ addresses are handled by generating\n   a proxy packet that contains the proxy's\
    \ link-layer address on the\n   outgoing interface instead.  Such link-layer addresses\
    \ occur in the\n   link-layer header itself, as well as in the payloads of some\n\
    \   protocols.  As with all forwarded packets, the link-layer header is\n   new.\n\
    \   Section 4.1.3 enumerates the currently known cases where link-layer\n   addresses\
    \ must be changed in payloads.  For guidance on handling\n   future protocols,\
    \ Section 7, \"Guidelines to Proxy Developers\",\n   describes the scenarios in\
    \ which the link-layer address substitution\n   in the payload should be performed.\
    \  Note that any change to the\n   length of a proxied packet, such as when the\
    \ link-layer address\n   length changes, will require a corresponding change to\
    \ the IPv6\n   Payload Length field.\n"
- title: 4.1.3.  IPv6 ND Proxying
  contents:
  - "4.1.3.  IPv6 ND Proxying\n   When any IPv6 packet is received on a proxy interface,\
    \ it must be\n   parsed to see whether it is known to be one of the following\
    \ types:\n   Neighbor Solicitation, Neighbor Advertisement, Router Advertisement,\n\
    \   or Redirect.\n"
- title: 4.1.3.1.  ICMPv6 Neighbor Solicitations
  contents:
  - "4.1.3.1.  ICMPv6 Neighbor Solicitations\n   If the received packet is an ICMPv6\
    \ Neighbor Solicitation (NS), the\n   NS is processed locally as described in\
    \ Section 7.2.3 of [ND] but no\n   NA is generated immediately.  Instead the NS\
    \ is proxied as described\n   above and the NA will be proxied when it is received.\
    \  This ensures\n   that the proxy does not interfere with hosts moving from one\
    \ segment\n   to another since it never responds to an NS based on its own cache.\n"
- title: 4.1.3.2.  ICMPv6 Neighbor Advertisements
  contents:
  - "4.1.3.2.  ICMPv6 Neighbor Advertisements\n   If the received packet is an ICMPv6\
    \ Neighbor Advertisement (NA), the\n   neighbor cache on the receiving interface\
    \ is first updated as if the\n   NA were locally destined, and then the NA is\
    \ proxied as described in\n   4.1.2 above.\n"
- title: 4.1.3.3.  ICMPv6 Router Advertisements
  contents:
  - "4.1.3.3.  ICMPv6 Router Advertisements\n   The following special processing is\
    \ done for IPv6 Router\n   Advertisements (RAs).\n   A new \"Proxy\" bit is defined\
    \ in the existing Router Advertisement\n   flags field as follows:\n   +-+-+-+-+-+-+-+-+\n\
    \   |M|O|H|Prf|P|Rsv|\n   +-+-+-+-+-+-+-+-+\n   where \"P\" indicates the location\
    \ of the Proxy bit, and \"Rsv\"\n   indicates the remaining reserved bits.\n \
    \  The proxy determines an \"upstream\" proxy interface, typically through\n \
    \  a (zero-configuration) physical choice dictated by the scenario (see\n   Scenarios\
    \ 1 and 2 above), or through manual configuration.\n   When an RA with the P bit\
    \ clear arrives on the upstream interface,\n   the P bit is set when the RA is\
    \ proxied out all other (\"downstream\")\n   proxy interfaces (see Section 6).\n\
    \   If an RA with the P bit set has arrived on a given interface\n   (including\
    \ the upstream interface) within the last 60 minutes, that\n   interface MUST\
    \ NOT be used as a proxy interface; i.e., proxy\n   functionality is disabled\
    \ on that interface.\n   Furthermore, if any RA (regardless of the value of the\
    \ P bit) has\n   arrived on a \"downstream\" proxy interface within the last 60\
    \ minutes,\n   that interface MUST NOT be used as a proxy interface.\n   The RA\
    \ is processed locally as well as proxied as described in\n   Section 4.1.2, unless\
    \ such proxying is disabled as noted above.\n"
- title: 4.1.3.4.  ICMPv6 Redirects
  contents:
  - "4.1.3.4.  ICMPv6 Redirects\n   If the received packet is an ICMPv6 Redirect message,\
    \ then the\n   proxied packet should be modified as follows.  If the proxy has\
    \ a\n   valid (i.e., not INCOMPLETE) neighbor entry for the target address on\n\
    \   the same interface as the redirected host, then the Target Link-Layer\n  \
    \ Address (TLLA) option in the proxied Redirect simply contains the\n   link-layer\
    \ address of the target as found in the proxy's neighbor\n   entry, since the\
    \ redirected host may reach the target address\n   directly.  Otherwise, if the\
    \ proxy has a valid neighbor entry for the\n   target address on some other interface,\
    \ then the TLLA option in the\n   proxied packet contains the link-layer address\
    \ of the proxy on the\n   sending interface, since the redirected host must reach\
    \ the target\n   address through the proxy.  Otherwise, the proxy has no valid\n\
    \   neighbor entry for the target address, and the proxied packet\n   contains\
    \ no TLLA option, which will cause the redirected host to\n   perform Neighbor\
    \ Discovery for the target address.\n"
- title: 4.2.  Originating Packets
  contents:
  - "4.2.  Originating Packets\n   Locally originated packets that are sent on a proxy\
    \ interface also\n   follow the same rules as packets received on a proxy interface.\
    \  If\n   no neighbor entry exists when a unicast packet is to be locally\n  \
    \ originated, an interface can be chosen in any implementation-specific\n   fashion.\
    \  Once the neighbor is resolved, the actual interface will be\n   discovered\
    \ and the packet will be sent on that interface.  When a\n   multicast packet\
    \ is to be locally originated, an interface can be\n   chosen in any implementation-specific\
    \ fashion, and the packet will\n   then be forwarded out other proxy interfaces\
    \ on the same link as\n   described in Section 4.1 above.\n"
- title: 5.  Example
  contents:
  - "5.  Example\n   Consider the following topology, where A and B are nodes on separate\n\
    \   segments which are connected by a proxy P:\n        A---|---P---|---B\n  \
    \       a    p1 p2    b\n   A and B have link-layer addresses a and b, respectively.\
    \  P has\n   link-layer addresses p1 and p2 on the two segments.  We now walk\n\
    \   through the actions that happen when A attempts to send an initial\n   IPv6\
    \ packet to B.\n   A first does a route lookup on the destination address B. \
    \ This\n   matches the on-link subnet prefix, and a destination cache entry is\n\
    \   created as well as a neighbor cache entry in the INCOMPLETE state.\n   Before\
    \ the packet can be sent, A needs to resolve B's link-layer\n   address and sends\
    \ a Neighbor Solicitation (NS) to the solicited-node\n   multicast address for\
    \ B.  The Source Link-Layer Address (SLLA) option\n   in the solicitation contains\
    \ A's link-layer address.\n   P receives the solicitation (since it is receiving\
    \ all link-layer\n   multicast packets) and processes it as it would any multicast\
    \ packet\n   by forwarding it out to other segments on the link.  However, before\n\
    \   actually sending the packet, it determines if the packet being sent\n   is\
    \ one that requires proxying.  Since it is an NS, it creates a\n   neighbor entry\
    \ for A on interface 1 and records its link-layer\n   address.  It also creates\
    \ a neighbor entry for B (on an arbitrary\n   proxy interface) in the INCOMPLETE\
    \ state.  Since the packet is\n   multicast, P then needs to proxy the NS out\
    \ all other proxy\n   interfaces on the subnet.  Before sending the packet out\
    \ interface 2,\n   it replaces the link-layer address in the SLLA option with\
    \ its own\n   link-layer address, p2.\n   B receives this NS, processing it as\
    \ usual.  Hence it creates a\n   neighbor entry for A mapping it to the link-layer\
    \ address p2.  It\n   responds with a Neighbor Advertisement (NA) sent to A containing\
    \ B's\n   link-layer address b.  The NA is sent using A's neighbor entry, i.e.,\n\
    \   to the link-layer address p2.\n   The NA is received by P, which then processes\
    \ it as it would any\n   unicast packet; i.e., it forwards this out interface\
    \ 1, based on the\n   neighbor cache.  However, before actually sending the packet\
    \ out, it\n   inspects it to determine if the packet being sent is one that\n\
    \   requires proxying.  Since it is an NA, it updates its neighbor entry\n   for\
    \ B to be REACHABLE and records the link-layer address b.  P then\n   replaces\
    \ the link-layer address in the TLLA option with its own\n   link-layer address\
    \ on the outgoing interface, p1.  The packet is then\n   sent out interface 1.\n\
    \   A receives this NA, processing it as usual.  Hence it creates a\n   neighbor\
    \ entry for B on interface 2 in the REACHABLE state and\n   records the link-layer\
    \ address p1.\n"
- title: 6.  Loop Prevention
  contents:
  - "6.  Loop Prevention\n   An implementation MUST ensure that loops are prevented\
    \ by using the P\n   bit in RAs as follows.  The proxy determines an \"upstream\"\
    \ proxy\n   interface, typically through a (zero-configuration) physical choice\n\
    \   dictated by the scenario (see Scenarios 1 and 2 above), or through\n   manual\
    \ configuration.  As described in Section 4.1.3.3, only the\n   upstream interface\
    \ is allowed to receive RAs, and never from other\n   proxies.  Proxy functionality\
    \ is disabled on an interface otherwise.\n   Finally, a proxy MUST wait until\
    \ it has sent two P bit RAs on a given\n   \"downstream\" interface before it\
    \ enables forwarding on that\n   interface.\n"
- title: 7.  Guidelines to Proxy Developers
  contents:
  - "7.  Guidelines to Proxy Developers\n   Proxy developers will have to accommodate\
    \ protocols or protocol\n   options (for example, new ICMP messages) that are\
    \ developed in the\n   future, or protocols that are not mentioned in this document\
    \ (for\n   example, proprietary protocols).  This section prescribes guidelines\n\
    \   that can be used by proxy developers to accommodate protocols that\n   are\
    \ not mentioned herein.\n   1)   If a link-layer address carried in the payload\
    \ of the\n        protocol can be used in the link-layer header of future\n  \
    \      messages, then the proxy should substitute it with its own\n        address.\
    \  For example, the link-layer address in NA messages is\n        used in the\
    \ link-layer header for future messages, and,\n        hence, the proxy substitutes\
    \ it with its own address.\n        For multicast packets, the link-layer address\
    \ substituted\n        within the payload will be different for each outgoing\n\
    \        interface.\n   2)   If the link-layer address in the payload of the protocol\
    \ will\n        never be used in any link-layer header, then the proxy should\n\
    \        not substitute it with its own address.  No special actions\n       \
    \ are required for supporting these protocols.  For example,\n        [DHCPv6]\
    \ is in this category.\n"
- title: 8.  IANA Considerations
  contents:
  - "8.  IANA Considerations\n   This document defines a new bit in the RA flags (the\
    \ P bit).  There\n   is currently no registration procedure for such bits, so\
    \ IANA should\n   not take any action.\n"
- title: 9.  Security Considerations
  contents:
  - "9.  Security Considerations\n   Unsecured Neighbor Discovery has a number of\
    \ security issues, which\n   are discussed in detail in [PSREQ].  RFC 3971 [SEND]\
    \ defines security\n   mechanisms that can protect Neighbor Discovery.\n   Proxies\
    \ are susceptible to the same kind of security issues that\n   plague hosts using\
    \ unsecured Neighbor Discovery.  These issues\n   include hijacking traffic and\
    \ denial-of-service within the subnet.\n   Malicious nodes within the subnet can\
    \ take advantage of this\n   property, and hijack traffic.  In addition, a Neighbor\
    \ Discovery\n   proxy is essentially a legitimate man-in-the-middle, which implies\n\
    \   that there is a need to distinguish proxies from unwanted man-in-\n   the-middle\
    \ attackers.\n   This document does not introduce any new mechanisms for the\n\
    \   protection of proxy Neighbor Discovery.  That is, it does not provide\n  \
    \ a mechanism from authorizing certain devices to act as proxies, and\n   it does\
    \ not provide extensions to SEND to make it possible to use\n   both SEND and\
    \ proxies at the same time.  We note that RFC 2461 [ND]\n   already defines the\
    \ ability to proxy Neighbor Advertisements, and\n   extensions to SEND are already\
    \ needed to cover that case, independent\n   of this document.\n   Note also that\
    \ the use of proxy Neighbor Discovery may render it\n   impossible to use SEND\
    \ both on the leaf subnet and on the external\n   subnet.  This is because the\
    \ modifications performed by the proxy\n   will invalidate the RSA Signature Option\
    \ in a secured Neighbor\n   Discovery message, and cause SEND-capable nodes to\
    \ either discard the\n   messages or treat them as unsecured.  The latter is the\
    \ desired\n   operation when SEND is used together with this specification, and\
    \ it\n   ensures that SEND nodes within this environment can selectively\n   downgrade\
    \ themselves to unsecure Neighbor Discovery when proxies are\n   present.\n  \
    \ In the following, we outline some potential paths to follow when\n   defining\
    \ a secure proxy mechanism.\n   It is reasonable for nodes on the leaf subnet\
    \ to have a secure\n   relationship with the proxy and to accept ND packets either\
    \ from the\n   owner of a specific address (normal SEND) or from a trusted proxy\n\
    \   that it can verify (see below).\n   For nodes on the external subnet, there\
    \ is a trade-off between\n   security (where all nodes have a secure relationship\
    \ with the proxy)\n   and privacy (where no nodes are aware that the proxy is\
    \ a proxy).  In\n   the case of a point-to-point external link (Scenario 2), however,\n\
    \   SEND may not be a requirement on that link.\n   Verifying that ND packets\
    \ come from a trusted proxy requires an\n   extension to the SEND protocol and\
    \ is left for future work [SPND],\n   but is similar to the problem of securing\
    \ Router Advertisements that\n   is supported today.  For example, a rogue node\
    \ can send a Router\n   Advertisement to cause a proxy to disable its proxy behavior,\
    \ and\n   hence cause denial-of-service to other nodes; this threat is covered\n\
    \   in Section 4.2.1 of [PSREQ].\n   Alternative designs might involve schemes\
    \ where the right for\n   representing a particular host is delegated to the proxy,\
    \ or where\n   multiple nodes can make statements on behalf of one address\n \
    \  [RINGSIG].\n"
- title: 10.  Acknowledgements
  contents:
  - "10.  Acknowledgements\n   The authors wish to thank Jari Arkko for contributing\
    \ portions of the\n   Security Considerations text.\n"
- title: 11.  Normative References
  contents:
  - "11.  Normative References\n   [BRIDGE]    T. Jeffree, editor, \"Media Access\
    \ Control (MAC) Bridges\",\n               ANSI/IEEE Std 802.1D, 2004, http://standards.ieee.org/\n\
    \               getieee802/download/802.1D-2004.pdf.\n   [ICMPv6]    Conta, A.\
    \ and S. Deering, \"Internet Control Message\n               Protocol (ICMPv6)\
    \ for the Internet Protocol Version 6\n               (IPv6) Specification\",\
    \ RFC 2463, December 1998.\n   [KEYWORDS]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n               Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [ND]        Narten, T., Nordmark, E., and W. Simpson, \"Neighbor\n\
    \               Discovery for IP Version 6 (IPv6)\", RFC 2461, December\n    \
    \           1998.\n   [NODEREQ]   Loughney, J., Ed., \"IPv6 Node Requirements\"\
    , RFC 4294,\n               April 2006.\n"
- title: 12.  Informative References
  contents:
  - "12.  Informative References\n   [6TO4]      Carpenter, B. and K. Moore, \"Connection\
    \ of IPv6 Domains\n               via IPv4 Clouds\", RFC 3056, February 2001.\n\
    \   [BCP]       Higashiyama, M., Baker, F., and T. Liao, \"Point-to-Point\n  \
    \             Protocol (PPP) Bridging Control Protocol (BCP)\", RFC\n        \
    \       3518, April 2003.\n   [DHCPv6]    Droms, R., Ed., Bound, J., Volz, B.,\
    \ Lemon, T., Perkins,\n               C., and M. Carney, \"Dynamic Host Configuration\
    \ Protocol\n               for IPv6 (DHCPv6)\", RFC 3315, July 2003.\n   [NAT]\
    \       Srisuresh, P. and K. Egevang, \"Traditional IP Network\n             \
    \  Address Translator (Traditional NAT)\", RFC 3022, January\n               2001.\n\
    \   [PD]        Troan, O. and R. Droms, \"IPv6 Prefix Options for Dynamic\n  \
    \             Host Configuration Protocol (DHCP) version 6\", RFC 3633,\n    \
    \           December 2003.\n   [PSREQ]     Nikander, P., Kempf, J., and E. Nordmark,\
    \ \"IPv6 Neighbor\n               Discovery (ND) Trust Models and Threats\", RFC\
    \ 3756, May\n               2004.\n   [RINGSIG]   Kempf, J. and C. Gentry, \"\
    Secure IPv6 Address Proxying\n               using Multi-Key Cryptographically\
    \ Generated Addresses\n               (MCGAs)\", Work in Progress, August 2005.\n\
    \   [SEND]      Arkko, J., Ed., Kempf, J., Zill, B., and P. Nikander,\n      \
    \         \"SEcure Neighbor Discovery (SEND)\", RFC 3971, March 2005.\n   [SPND]\
    \      Daley, G., \"Securing Proxy Neighbour Discovery Problem\n             \
    \  Statement\", Work in Progress, February 2005.\n"
- title: 'Appendix A: Comparison with Naive RA Proxy'
  contents:
  - "Appendix A: Comparison with Naive RA Proxy\n   It has been suggested that a simple\
    \ Router Advertisement (RA) proxy\n   would be sufficient, where the subnet prefix\
    \ in an RA is \"stolen\" by\n   the proxy and applied to a downstream link instead\
    \ of an upstream\n   link.  Other ND messages are not proxied.\n   There are many\
    \ problems with this approach.  First, it requires\n   cooperation from all nodes\
    \ on the upstream link.  No node (including\n   the router sending the RA) can\
    \ have an address in the subnet or it\n   will not have connectivity with nodes\
    \ on the downstream link.  This\n   is because when a node on a downstream link\
    \ tries to do Neighbor\n   Discovery, and the proxy does not send the NS on the\
    \ upstream link,\n   it will never discover the neighbor on the upstream link.\
    \  Similarly,\n   if messages are not proxied during Duplicate Address Detection\
    \ (DAD),\n   conflicts can occur.\n   Second, if the proxy assumes that no nodes\
    \ on the upstream link have\n   addresses in the prefix, such a proxy could not\
    \ be safely deployed\n   without cooperation from the network administrator since\
    \ it\n   introduces a requirement that the router itself not have an address\n\
    \   in the prefix.  This rules out use in situations where bridges and\n   Network\
    \ Address Translators (NATs) are used today, which is the\n   problem this document\
    \ is directly addressing.  Instead, where a\n   prefix is desired for use on one\
    \ or more downstream links in\n   cooperation with the network administrator,\
    \ Prefix Delegation [PD]\n   should be used instead.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Dave Thaler\n   Microsoft Corporation\n   One Microsoft\
    \ Way\n   Redmond, WA  98052-6399\n   Phone: +1 425 703 8835\n   EMail: dthaler@microsoft.com\n\
    \   Mohit Talwar\n   Microsoft Corporation\n   One Microsoft Way\n   Redmond,\
    \ WA  98052-6399\n   Phone: +1 425 705 3131\n   EMail: mohitt@microsoft.com\n\
    \   Chirayu Patel\n   All Play, No Work\n   Bangalore, Karnataka 560038\n   Phone:\
    \ +91-98452-88078\n   EMail: chirayu@chirayu.org\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2006).\n   This\
    \ document is subject to the rights, licenses and restrictions\n   contained in\
    \ BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is provided by the IETF\n\
    \   Administrative Support Activity (IASA).\n"
