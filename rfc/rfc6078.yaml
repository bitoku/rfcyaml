- title: __initial_text__
  contents:
  - "     Host Identity Protocol (HIP) Immediate Carriage and Conveyance\n       \
    \       of Upper-Layer Protocol Signaling (HICCUPS)\n"
- title: Abstract
  contents:
  - "Abstract\n   This document defines a new Host Identity Protocol (HIP) packet\
    \ type\n   called DATA.  HIP DATA packets are used to reliably convey\n   authenticated\
    \ arbitrary protocol messages over various overlay\n   networks.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for examination, experimental implementation, and\n   evaluation.\n\
    \   This document defines an Experimental Protocol for the Internet\n   community.\
    \  This document is a product of the Internet Engineering\n   Task Force (IETF).\
    \  It represents the consensus of the IETF\n   community.  It has received public\
    \ review and has been approved for\n   publication by the Internet Engineering\
    \ Steering Group (IESG).  Not\n   all documents approved by the IESG are a candidate\
    \ for any level of\n   Internet Standard; see Section 2 of RFC 5741.\n   Information\
    \ about the current status of this document, any errata,\n   and how to provide\
    \ feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6078.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2011 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  3\n   2.  Terminology  . . . . . . . . . . . . . . . . . . . .\
    \ . . . . .  3\n   3.  Background on HIP  . . . . . . . . . . . . . . . . . .\
    \ . . . .  4\n     3.1.  Message Formats  . . . . . . . . . . . . . . . . . .\
    \ . . .  4\n       3.1.1.  HIP Fixed Header . . . . . . . . . . . . . . . . .\
    \ . .  4\n       3.1.2.  HIP Parameter Format . . . . . . . . . . . . . . . .\
    \ .  5\n     3.2.  HIP Base Exchange, Updates, and State Removal  . . . . . .\
    \  5\n   4.  Definition of the HIP_DATA Packet  . . . . . . . . . . . . . .  6\n\
    \     4.1.  Definition of the SEQ_DATA Parameter . . . . . . . . . . .  8\n  \
    \   4.2.  Definition of the ACK_DATA Parameter . . . . . . . . . . .  8\n    \
    \ 4.3.  Definition of the PAYLOAD_MIC Parameter  . . . . . . . . .  9\n     4.4.\
    \  Definition of the TRANSACTION_ID Parameter . . . . . . . . 10\n   5.  Generation\
    \ and Reception of HIP_DATA Packets . . . . . . . . . 10\n     5.1.  Handling\
    \ of SEQ_DATA and ACK_DATA  . . . . . . . . . . . . 10\n     5.2.  Generation\
    \ of a HIP_DATA Packet  . . . . . . . . . . . . . 11\n     5.3.  Reception of\
    \ a HIP_DATA Packet . . . . . . . . . . . . . . 12\n       5.3.1.  Handling of\
    \ SEQ_DATA in a Received HIP_DATA Packet . . 13\n       5.3.2.  Handling of ACK_DATA\
    \ in a Received HIP_DATA Packet . . 14\n   6.  Use of the HIP_DATA Packet . .\
    \ . . . . . . . . . . . . . . . . 14\n   7.  Security Considerations  . . . .\
    \ . . . . . . . . . . . . . . . 15\n   8.  IANA Considerations  . . . . . . .\
    \ . . . . . . . . . . . . . . 16\n   9.  Acknowledgments  . . . . . . . . . .\
    \ . . . . . . . . . . . . . 16\n   10. References . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . . 16\n     10.1. Normative References . . . . . . . .\
    \ . . . . . . . . . . . 16\n     10.2. Informative references . . . . . . . .\
    \ . . . . . . . . . . 16\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Two hosts can use HIP [RFC5201] to establish a security\
    \ association\n   (SA) between them in order to exchange arbitrary protocol messages\n\
    \   over that security association.  The establishment of such a security\n  \
    \ association involves a four-way handshake referred to as the HIP base\n   exchange.\
    \  When handling communications between the hosts, HIP\n   supports mobility,\
    \ multihoming, security, and NAT traversal.  Some\n   applications require these\
    \ features for their communications but\n   cannot accept the overhead involved\
    \ in establishing a security\n   association (i.e., the HIP base exchange) before\
    \ those communications\n   can start.\n   In this document, we define the HIP\
    \ DATA packet, which can be used to\n   convey (in a authenticated and reliable\
    \ way) protocol messages to a\n   remote host without running the HIP base exchange.\
    \  The HIP_DATA\n   packet has the following semantics: unordered, duplicate free,\n\
    \   reliable, and authenticated message-based delivery service.  We also\n   discuss\
    \ the trade-offs involved in using this packet (i.e., less\n   overhead but also\
    \ less denial-of-service (DoS) protection) and the\n   situations where it is\
    \ appropriate to use this packet.  The HIP_DATA\n   packet is not intended to\
    \ be a replacement for the Encapsulating\n   Security Payload (ESP) transport;\
    \ instead, it SHOULD NOT be used to\n   exchange more than a few packets between\
    \ peers.  If a continuous\n   communication is required or communication that\
    \ requires\n   confidentiality protection then hosts MUST run the HIP base exchange\n\
    \   to set up an ESP security association.  Additionally, APIs to higher-\n  \
    \ level protocols that might use this service are outside of the scope\n   of\
    \ this document.\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and\
    \ \"OPTIONAL\" in this\n   document are to be interpreted as described in RFC\
    \ 2119 [RFC2119].\n   In addition, this document uses the terms defined in [RFC5201].\n\
    \   Message Integrity Code (MIC)  is a collision-resistant hash sum\n      calculated\
    \ over the message that is being integrity protected.\n      The MIC does not\
    \ use secret keys, and thus it needs additional\n      means to ensure that it\
    \ has not been tampered with during\n      transmission.  Essentially, the MIC\
    \ is same as the Message\n      Authentication Code (MAC) with the distinction\
    \ that the MIC does\n      not use secret keys.  The MIC is also often referred\
    \ as the\n      Integrity Check Value (ICV), fingerprint, or unkeyed MAC.\n"
- title: 3.  Background on HIP
  contents:
  - "3.  Background on HIP\n   The HIP specification [RFC5201] defines a number of\
    \ messages and\n   parameters.  The parameters are encoded as TLVs, as shown in\n\
    \   Section 3.1.2.  Furthermore, the HIP header carries a Next Header\n   field,\
    \ allowing other arbitrary packets to be carried within HIP\n   packets.\n"
- title: 3.1.  Message Formats
  contents:
  - '3.1.  Message Formats

    '
- title: 3.1.1.  HIP Fixed Header
  contents:
  - "3.1.1.  HIP Fixed Header\n   The HIP packet format consists of a fixed header\
    \ followed by a\n   variable number of parameters.  The parameter format is described\
    \ in\n   Section 3.1.2.\n   The fixed header is defined in Section 5.1 of [RFC5201]\
    \ and copied\n   below.\n       0                   1                   2    \
    \               3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\
    \ 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      | Next Header   | Header Length |0| Packet Type |  VER. | RES.|1|\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \          Checksum             |           Controls            |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                Sender's Host Identity Tag (HIT)               |\n   \
    \   |                                                               |\n      |\
    \                                                               |\n      |   \
    \                                                            |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |               Receiver's Host Identity Tag (HIT)              |\n   \
    \   |                                                               |\n      |\
    \                                                               |\n      |   \
    \                                                            |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                                                               |\n   \
    \   /                        HIP Parameters                         /\n      /\
    \                                                               /\n      |   \
    \                                                            |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The HIP header is logically an IPv6 extension header.  The HIP\n   specification\
    \ [RFC5201] defines handling only for Next Header value\n   decimal 59, IPv6-NoNxt\
    \ [PROTOCOL-NUMBERS], the IPv6 'no next header'\n   value.  This document describes\
    \ processing for Next Header values\n   other than decimal 59, which indicates\
    \ that there are either more\n   extension headers and/or data following the HIP\
    \ header.\n"
- title: 3.1.2.  HIP Parameter Format
  contents:
  - "3.1.2.  HIP Parameter Format\n   The HIP parameter format is defined in Section\
    \ 5.2.1 of [RFC5201],\n   and copied below.\n       0                   1    \
    \               2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\
    \ 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |             Type            |C|             Length            |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                                                               |\n      /   \
    \                       Contents                             /\n      /      \
    \                                         +-+-+-+-+-+-+-+-+\n      |         \
    \                                      |    Padding    |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      Type         Type code for the parameter.  16 bits long, C-bit\n      \
    \             being part of the Type code.\n      C            Critical.  One\
    \ if this parameter is critical, and\n                   MUST be recognized by\
    \ the recipient; zero otherwise.\n                   The C bit is considered to\
    \ be a part of the Type\n                   field.  Consequently, critical parameters\
    \ are always\n                   odd and non-critical ones have an even value.\n\
    \      Length       Length of the Contents, in octets.\n      Contents     Parameter\
    \ specific, defined by Type.\n      Padding      Padding, 0-7 octets, added if\
    \ needed.\n"
- title: 3.2.  HIP Base Exchange, Updates, and State Removal
  contents:
  - "3.2.  HIP Base Exchange, Updates, and State Removal\n   The HIP base exchange\
    \ is a four-message authentication and key\n   exchange protocol that creates\
    \ shared, mutually authenticated keying\n   material at the communicating parties.\
    \  These keying materials,\n   together with associated public keys and IP addresses,\
    \ form a HIP\n   security association (SA).  The details of the protocol are defined\n\
    \   in the HIP base exchange specification [RFC5201].\n   In addition to creating\
    \ the HIP SA, the base exchange messages may\n   carry additional parameters that\
    \ are used to create additional state.\n   For example, the HIP ESP specification\
    \ [RFC5202] defines how HIP can\n   be used to create end-to-end, host-to-host\
    \ IPsec ESP security\n   associations, used to carry data packets.  However, it\
    \ is important\n   to understand that the HIP base exchange is by no means bound\
    \ to\n   IPsec; using IPsec ESP to carry data traffic forms just a baseline\n\
    \   and ensures interoperability between initial HIP implementations.\n   Once\
    \ there is a HIP SA between two HIP-enabled hosts, they can\n   exchange further\
    \ HIP control messages.  Typically, UPDATE messages\n   are used.  For example,\
    \ the HIP mobility and multihoming\n   specification [RFC5206] defines how to\
    \ use UPDATE messages to change\n   the set of IP addresses associated with a\
    \ HIP SA.\n   In addition to the base exchange and updates, the HIP base protocol\n\
    \   specification also defines how one can remove a HIP SA once it is no\n   longer\
    \ needed.\n"
- title: 4.  Definition of the HIP_DATA Packet
  contents:
  - "4.  Definition of the HIP_DATA Packet\n   The HIP DATA packet can be used to\
    \ convey protocol messages to a\n   remote host without running the HIP base exchange.\
    \  HIP DATA packets\n   are transmitted reliably, as discussed in Section 5. \
    \ The payload of\n   a HIP_DATA packet is placed after the HIP header and protected\
    \ by a\n   PAYLOAD_MIC parameter, which is defined in Section 4.3.  The\n   following\
    \ is the definition of the HIP_DATA packet (see the\n   definition of notation\
    \ in [RFC5201], Section 2.2):\n      Header:\n        Packet Type = 32\n     \
    \   SRC HIT = Sender's HIT\n        DST HIT = Receiver's HIT\n    IP ( HIP ( [HOST_ID,\
    \ ] SEQ_DATA, PAYLOAD_MIC,  [ PAYLOAD_MIC, ..., ]\n               HIP_SIGNATURE)\
    \ PAYLOAD )\n    IP ( HIP ( [HOST_ID, ] SEQ_DATA, ACK_DATA, PAYLOAD_MIC,\n   \
    \            [ PAYLOAD_MIC, ..., ] HIP_SIGNATURE) PAYLOAD )\n    IP ( HIP ( [HOST_ID,\
    \ ] ACK_DATA, HIP_SIGNATURE))\n   The SEQ_DATA and ACK_DATA parameters are defined\
    \ in Sections 4.1 and\n   4.2, respectively.  They are used to provide a reliable\
    \ delivery of\n   HIP_DATA packets, as discussed in Section 5.\n   The HOST_ID\
    \ parameter is defined in Section 5.2.8 of [RFC5201].  This\n   parameter is the\
    \ sender's Host Identifier that is used to compute the\n   HIP_DATA packet's signature\
    \ and to verify it against the received\n   signature.  The HOST_ID parameter\
    \ is optional as it MAY have been\n   delivered using out-of-band mechanism to\
    \ the receiver.  If the host\n   doesn't have reliable information that the corresponding\
    \ node has its\n   HOST_ID, it MUST always include the HOST_ID in the packet.\
    \  If the\n   receiver is unable to verify the SIGNATURE, then the packet MUST\
    \ be\n   dropped and the appropriate NOTIFY packet SHOULD be sent to the\n   sender\
    \ indicating AUTHENTICATION_FAILED as described in [RFC5201],\n   Section 5.2.16.\n\
    \   The PAYLOAD_MIC parameter is defined in Section 4.3.  This parameter\n   contains\
    \ the MIC of the payload carried by the HIP_DATA packet.  The\n   PAYLOAD_MIC\
    \ contains the collision-resistant hash of the payload\n   following the HIP DATA.\
    \  The PAYLOAD_MIC is included in the signed\n   part of the HIP DATA packet and\
    \ gives integrity protection for the\n   packet as well as the payload carried\
    \ after it.\n   The HIP_SIGNATURE parameter is defined in Section 5.2.11 of\n\
    \   [RFC5201].  It contains a signature over the contents of the HIP_DATA\n  \
    \ packet.  The calculation and verification of the signature is defined\n   in\
    \ Section 6.4.2. of [RFC5201].\n   Section 5.3 of [RFC5201] states the following:\n\
    \      In the future, an OPTIONAL upper-layer payload MAY follow the HIP\n   \
    \   header.  The Next Header field in the header indicates if there is\n     \
    \ additional data following the HIP header.\n   We have chosen to place the payload\
    \ after the HIP extension header\n   and only to place a MIC of the payload into\
    \ the HIP extension header\n   in a PAYLOAD_MIC parameter because that way the\
    \ data integrity is\n   protected by a public key signature with the help of the\
    \ MIC.  The\n   payload that is protected by the PAYLOAD_MIC parameter has been\n\
    \   linked to the appropriate upper-layer protocol by storing the upper-\n   layer\
    \ protocol number, 8 octets of payload data, and by calculating a\n   hash sum\
    \ (MIC) over the data.  The HIP_DATA packet MAY contain one or\n   more PAYLOAD_MIC\
    \ parameters, each bound to a different Next Header\n   type.  The hash algorithm\
    \ used to generate the MIC is the same as the\n   algorithm used to generate the\
    \ Host Identity Tag [RFC5201].\n   Upper-layer protocol messages, such as overlay\
    \ network control\n   traffic, sent in HIP DATA messages may need to be matched\
    \ to\n   different transactions.  For this purpose, a DATA message MAY also\n\
    \   contain a TRANSACTION_ID parameter.  The identifier value is a\n   variable\
    \ length bit string in network byte order that is unique for\n   each transaction.\
    \  A response to a request uses the same identifier\n   value, thereby allowing\
    \ the receiver to match requests to responses.\n"
- title: 4.1.  Definition of the SEQ_DATA Parameter
  contents:
  - "4.1.  Definition of the SEQ_DATA Parameter\n   The following is the definition\
    \ of the SEQ_DATA parameter:\n     0                   1                   2 \
    \                  3\n     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\
    \ 6 7 8 9 0 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |             Type              |             Length            |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                        Sequence number                        |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    Type              4481\n    Length            4\n    Sequence number   32-bit\
    \ unsigned integer in network byte order that\n                      MUST NOT\
    \ be reused before it has been acknowledged\n                      by the receiver.\n\
    \   This parameter has the critical bit set.  If it is not supported by\n   the\
    \ receiver, the packet MUST be dropped and the appropriate NOTIFY\n   packet SHOULD\
    \ be sent to the sender indicating\n   UNSUPPORTED_CRITICAL_PARAMETER_TYPE as\
    \ described in [RFC5201],\n   Section 5.2.16.\n"
- title: 4.2.  Definition of the ACK_DATA Parameter
  contents:
  - "4.2.  Definition of the ACK_DATA Parameter\n   The following is the definition\
    \ of the ACK_DATA parameter:\n       0                   1                   2\
    \                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3\
    \ 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |             Type              |             Length            |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                     Acked Sequence number                     /\n      /   \
    \                                                            /\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      Type                    4545\n      Length                  variable (multiple\
    \ of 4)\n      Acked Sequence number   A sequence of 32-bit unsigned integers\
    \ in\n                              network byte order corresponding to the\n\
    \                              sequence numbers being acknowledged.\n   This parameter\
    \ has the critical bit set.  If it is not supported by\n   the receiver, the packet\
    \ MUST be dropped and the appropriate NOTIFY\n   packet SHOULD be sent to the\
    \ sender indicating\n   UNSUPPORTED_CRITICAL_PARAMETER_TYPE as described in [RFC5201],\n\
    \   Section 5.2.16.\n"
- title: 4.3.  Definition of the PAYLOAD_MIC Parameter
  contents:
  - "4.3.  Definition of the PAYLOAD_MIC Parameter\n   The following is the definition\
    \ of the PAYLOAD_MIC parameter:\n    0                   1                   2\
    \                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\
    \ 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |             Type              |             Length            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  Next Header  |                   Reserved                    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                         Payload Data                          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   /  \
    \                       MIC Value                             /\n   /        \
    \                                       +-+-+-+-+-+-+-+-+\n   |              \
    \                                 |    Padding    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Type              4577\n   Length            Length in octets, excluding Type,\
    \ Length, and\n                     Padding.\n   Next Header       Identifies\
    \ the data that is protected by this MIC.\n                     The values for\
    \ this field are defined by IANA\n                     \"Protocol Numbers\" [PROTOCOL-NUMBERS].\n\
    \   Payload Data      Last 8 octets of the payload data over which the\n     \
    \                MIC is calculated.  This field is used to\n                 \
    \    uniquely bind the PAYLOAD_MIC parameter to the Next\n                   \
    \  Header, in case there are multiple copies of the\n                     same\
    \ type.\n   MIC Value         MIC computed over the data to which the Next\n \
    \                    Header and Payload Data point.  The size of the MIC\n   \
    \                  is the natural size of the computation output\n           \
    \          depending on the function used.\n   This parameter has the critical\
    \ bit set.  If it is not supported by\n   the receiver, the packet MUST be dropped\
    \ and the appropriate NOTIFY\n   packet SHOULD be sent to the sender indicating\n\
    \   UNSUPPORTED_CRITICAL_PARAMETER_TYPE as described in [RFC5201],\n   Section\
    \ 5.2.16.\n   There is a theoretical possibility that when generating multiple\n\
    \   PAYLOAD_MIC parameters that will be carried in a single packet, they\n   would\
    \ have identical Next Header and Payload Data fields; thus, it is\n   required\
    \ that PAYLOAD_MIC parameters MUST follow the natural order of\n   extension headers\
    \ in the packet so that it's possible to bind\n   PAYLOAD_MICs to correct payload\
    \ data.  In case the receiving host is\n   still unable to identify the payloads,\
    \ it MUST drop the packet and\n   SHOULD send a NOTIFY packet to the sender indicating\
    \ INVALID_SYNTAX\n   as described in [RFC5201], Section 5.2.16.\n"
- title: 4.4.  Definition of the TRANSACTION_ID Parameter
  contents:
  - "4.4.  Definition of the TRANSACTION_ID Parameter\n   The following is the definition\
    \ of the TRANSACTION_ID parameter:\n      0                   1              \
    \     2                   3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\
    \ 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |             Type              |             Length            |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  \
    \                         Identifier                          /\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     /                                               |    Padding    |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     Type\
    \        4580\n     Length      Length of the Identifier, in octets\n     Identifier\
    \  The identifier value\n     Padding     0-7 octets of padding if needed\n  \
    \                               Figure 1\n"
- title: 5.  Generation and Reception of HIP_DATA Packets
  contents:
  - "5.  Generation and Reception of HIP_DATA Packets\n   HIP_DATA packets are transmitted\
    \ reliably.  Reliable delivery is\n   achieved through the use of retransmissions\
    \ and of the SEQ_DATA and\n   ACK_DATA parameters.\n"
- title: 5.1.  Handling of SEQ_DATA and ACK_DATA
  contents:
  - "5.1.  Handling of SEQ_DATA and ACK_DATA\n   A HIP_DATA packet MUST contain at\
    \ least one of a SEQ_DATA or an\n   ACK_DATA parameter; if both parameters are\
    \ missing, then packet MUST\n   be dropped as invalid.\n   A HIP_DATA packet containing\
    \ a SEQ_DATA parameter MUST contain one or\n   more PAYLOAD_MIC parameters; otherwise,\
    \ the packet MUST be dropped.\n   The presence of a SEQ_DATA parameter indicates\
    \ that the receiver MUST\n   ACK the HIP_DATA packet.  A HIP_DATA packet that\
    \ does not contain a\n   SEQ_DATA parameter is simply an ACK of a previous HIP_DATA\
    \ packet,\n   and it MUST NOT be ACKed.\n   A HIP_DATA packet containing an ACK_DATA\
    \ parameter echoes the\n   SEQ_DATA sequence numbers of the HIP_DATA packets being\
    \ acknowledged.\n   The ACK_DATA parameter MUST acknowledge at least one SEQ_DATA\n\
    \   sequence number and MAY acknowledge multiple SEQ_DATA sequence\n   numbers\
    \ by adding all of them to the ACK_DATA parameter.\n   A HIP_DATA packet MAY contain\
    \ both a SEQ_DATA and an ACK_DATA\n   parameter.  In this case, the ACK is being\
    \ piggybacked on an outgoing\n   HIP_DATA packet.  In general, HIP_DATA packets\
    \ carrying SEQ_DATA\n   SHOULD be ACKed upon completion of the processing of the\
    \ HIP_DATA\n   packet.  A host MAY choose to hold the HIP DATA packet carrying\
    \ an\n   ACK for a short period of time to allow for the possibility of\n   piggybacking\
    \ the ACK_DATA parameter, in a manner similar to TCP\n   delayed acknowledgments.\n"
- title: 5.2.  Generation of a HIP_DATA Packet
  contents:
  - "5.2.  Generation of a HIP_DATA Packet\n   When a host has upper-layer protocol\
    \ data to send, it either runs the\n   HIP base exchange and sends the data over\
    \ a SA, or sends the data\n   directly using a HIP_DATA packet.  Section 6 discusses\
    \ when it is\n   appropriate to use each method.  This section discusses the case\
    \ when\n   the host chooses to use a HIP_DATA packet to send the upper-layer\n\
    \   protocol data.\n   1.  The host creates a HIP_DATA packet that contains a\
    \ SEQ_DATA\n       parameter.  The host is free to choose any value for the SEQ_DATA\n\
    \       sequence number in the first HIP_DATA packet it sends to a\n       destination.\
    \  After that first packet, the host MUST choose the\n       value of the SEQ_DATA\
    \ sequence number in subsequent HIP_DATA\n       packets to the same destination\
    \ so that no SEQ_DATA sequence\n       number is reused before the receiver has\
    \ closed the processing\n       window for the previous packet using the same\
    \ SEQ_DATA sequence\n       number.  Practically, giving the values of the retransmission\n\
    \       timers used with HIP_DATA packets, this means that hosts must\n      \
    \ wait the maximum likely lifetime of the packet before reusing a\n       given\
    \ SEQ_DATA sequence number towards a given destination.\n       However, it is\
    \ not required for the node to know the maximum\n       packet lifetime.  Rather,\
    \ it is assumed that the requirement can\n       be met by maintaining the value\
    \ as a simple, 32-bit, \"wrap-\n       around\" counter, incremented each time\
    \ a packet is sent.  It is\n       an implementation choice whether to maintain\
    \ a single counter for\n       the node or multiple counters (one for each <source,\
    \ destination>\n       HIT pair).\n   2.  The host creates the PAYLOAD_MIC parameter.\
    \  The MIC is a hash\n       calculated over the whole PAYLOAD that the Next Header\
    \ field of\n       the PAYLOAD_MIC parameter indicates.  If there are multiple\
    \ Next\n       Header types that the host wants to protect, it SHOULD create\n\
    \       separate PAYLOAD_MIC parameters for each of these.  The receiver\n   \
    \    MUST validate all these MICs as described in Section 5.3.1.  For\n      \
    \ calculating the MIC, the host MUST use the same hash algorithm as\n       the\
    \ one that has been used for generating the host's HIT as\n       defined in Section\
    \ 3.2. of [RFC5201].\n   3.  The host creates the HIP_SIGNATURE parameter.  The\
    \ signature is\n       calculated over the whole HIP envelope, excluding any parameters\n\
    \       after the HIP_SIGNATURE, as defined in Section 5.2.11. of\n       [RFC5201].\
    \  The receiver MUST validate this signature.  It MAY\n       use either the HI\
    \ in the packet or the HI acquired by some other\n       means.\n   4.  The host\
    \ sends the created HIP_DATA packet and starts a DATA\n       timer.  The default\
    \ value for the timer is 3 seconds.  If\n       multiple HIP DATA packets are\
    \ outstanding, multiple timers are in\n       effect.\n   5.  If the DATA timer\
    \ expires, the HIP_DATA packet is resent.  The\n       HIP DATA packet can be\
    \ resent DATA_RETRY_MAX times.  The DATA\n       timer MUST be exponentially backed\
    \ off for subsequent\n       retransmissions.  If no acknowledgment is received\
    \ from the peer\n       after DATA_RETRY_MAX times, the delivery of the HIP_DATA\
    \ packet\n       is considered unsuccessful and the application is notified about\n\
    \       the error.  The DATA timer is canceled upon receiving an ACK from\n  \
    \     the peer that acknowledges receipt of the HIP_DATA packet.  The\n      \
    \ default value for DATA_RETRY_MAX SHOULD be 5 retries, but it MAY\n       be\
    \ changed through local policy.\n"
- title: 5.3.  Reception of a HIP_DATA Packet
  contents:
  - "5.3.  Reception of a HIP_DATA Packet\n   A host receiving a HIP_DATA packet makes\
    \ a decision whether or not to\n   process the packet.  If the host, following\
    \ its local policy,\n   suspects that this packet could be part of a DoS attack.\
    \  The host\n   MAY respond with an R1 packet to the HIP_DATA packet, if the packet\n\
    \   contained SEQ_DATA and PAYLOAD_MIC parameters, in order to indicate\n   that\
    \ HIP base exchange MUST be completed before accepting payload\n   packets from\
    \ the originator of the HIP_DATA packet.\n      From RFC 5201 (Section 4.1):\n\
    \         The HIP base exchange serves to manage the establishment of\n      \
    \   state between an Initiator and a Responder.  The first packet,\n         I1,\
    \ initiates the exchange, and the last three packets, R1, I2,\n         and R2,\
    \ constitute an authenticated Diffie-Hellman [DIF76] key\n         exchange for\
    \ session key generation.\n   If the host chooses to respond to the HIP DATA with\
    \ an R1 packet, it\n   creates a new R1 or selects a precomputed R1 according\
    \ to the format\n   described in [RFC5201], Section 5.3.2.  The host SHOULD drop\
    \ the\n   received data packet if it responded with an R1 packet to the\n   HIP_DATA\
    \ packet.  The sender of HIP_DATA packet is responsible for\n   retransmission\
    \ of the upper-layer protocol data after successful\n   completion of the HIP\
    \ base exchange.\n   If the host, following its local policy, decides to process\
    \ the\n   incoming HIP_DATA packet, it processes the packet according to the\n\
    \   following rules:\n   1.  If the HIP_DATA packet contains a SEQ_DATA parameter\
    \ and no\n       ACK_DATA parameter, the HIP_DATA packet is processed and replied\n\
    \       to as described in Section 5.3.1.\n   2.  If the HIP_DATA packet contains\
    \ an ACK_DATA parameter and no\n       SEQ_DATA parameter, the HIP_DATA packet\
    \ is processed as described\n       in Section 5.3.2.\n   3.  If the HIP_DATA\
    \ packet contains both a SEQ_DATA parameter and an\n       ACK_DATA parameter,\
    \ the HIP_DATA packet is processed first as\n       described in Section 5.3.2,\
    \ and then the rest of the HIP_DATA\n       packet is processed and replied to\
    \ as described in Section 5.3.1.\n"
- title: 5.3.1.  Handling of SEQ_DATA in a Received HIP_DATA Packet
  contents:
  - "5.3.1.  Handling of SEQ_DATA in a Received HIP_DATA Packet\n   The following\
    \ steps define the conceptual processing rules for\n   handling a SEQ_DATA parameter\
    \ in a received HIP_DATA packet.\n   The system MUST verify the SIGNATURE in the\
    \ HIP_DATA packet.  If the\n   verification fails, the packet SHOULD be dropped\
    \ and an error message\n   logged.\n   If the value in the received SEQ_DATA and\
    \ the MIC value in the\n   received PAYLOAD_MIC correspond to a HIP_DATA packet\
    \ that has\n   recently been processed, the packet is treated as a retransmission.\n\
    \   It is recommended that a host cache HIP_DATA packets with ACKs to\n   avoid\
    \ the cost of generating a new ACK packet to respond to a\n   retransmitted HIP_DATA\
    \ packet.  The host MUST acknowledge, again,\n   such (apparent) HIP_DATA packet\
    \ retransmissions but SHOULD also\n   consider rate-limiting such retransmission\
    \ responses to guard against\n   replay attacks.\n   The system MUST verify the\
    \ PAYLOAD_MIC by calculating the MIC over\n   the PAYLOAD that the Next Header\
    \ field indicates.  For calculating\n   the MIC, the host will use the same hash\
    \ algorithm that has been used\n   to generate the sender's HIT as defined in\
    \ Section 3.2. of [RFC5201].\n   If the packet carried multiple PAYLOAD_MIC parameters,\
    \ each of them\n   are verified as described above.  If one or more of the verifications\n\
    \   fail, the packet SHOULD be dropped and an error message logged.\n   If a new\
    \ SEQ parameter is being processed, the parameters in the HIP\n   DATA packet\
    \ are then processed.\n   A HIP_DATA packet with an ACK_DATA parameter is prepared\
    \ and sent to\n   the peer.  This ACK_DATA parameter may be included in a separate\
    \ HIP\n   DATA packet or piggybacked in a HIP_DATA packet with a SEQ_DATA\n  \
    \ parameter.  The ACK_DATA parameter MAY acknowledge more than one of\n   the\
    \ peer's HIP_DATA packets.\n"
- title: 5.3.2.  Handling of ACK_DATA in a Received HIP_DATA Packet
  contents:
  - "5.3.2.  Handling of ACK_DATA in a Received HIP_DATA Packet\n   The following\
    \ steps define the conceptual processing rules for\n   handling an ACK_DATA parameter\
    \ in a received HIP_DATA packet.\n   The system MUST verify the SIGNATURE in the\
    \ HIP_DATA packet.  If the\n   verification fails, the packet SHOULD be dropped\
    \ and an error message\n   logged.\n   The sequence numbers reported in the ACK_DATA\
    \ must match with a\n   previously sent HIP_DATA packet containing SEQ_DATA that\
    \ has not\n   already been acknowledged.  If no match is found or if the ACK_DATA\n\
    \   does not acknowledge a new HIP_DATA packet, the packet either MUST be\n  \
    \ dropped if no SEQ_DATA parameter is present or the processing steps\n   in Section\
    \ 5.3.1 are followed.\n   The corresponding DATA timer is stopped so that the\
    \ now acknowledged\n   HIP_DATA packet is no longer retransmitted.  If multiple\
    \ HIP_DATA\n   packets are newly acknowledged, multiple timers are stopped.\n"
- title: 6.  Use of the HIP_DATA Packet
  contents:
  - "6.  Use of the HIP_DATA Packet\n   HIP currently requires that the four-message\
    \ base exchange is\n   executed at the first encounter of hosts that have not\
    \ communicated\n   before.  This may add additional RTTs (Round-Trip Times) to\
    \ protocols\n   based on a single message exchange.  However, the four-message\n\
    \   exchange is essential to preserve the DoS protection nature of the\n   base\
    \ exchange.  The use of the HIP_DATA packet defined in this\n   document reduces\
    \ the initial overhead in the communications between\n   two hosts.  However,\
    \ the HIP_DATA packet itself does not provide any\n   protection against DoS attacks.\
    \  Therefore, the HIP_DATA packet MUST\n   only be used in environments whose\
    \ policies provide protection\n   against DoS attacks.  For example, a HIP-based\
    \ overlay may have\n   policies in place to control which nodes can join the overlay.\n\
    \   However, authorization of who is allowed to join the overlay is\n   beyond\
    \ the scope of this specification.  Any particular node in the\n   overlay may\
    \ want to accept HIP_DATA packets from other nodes in the\n   overlay, given that\
    \ those other nodes were authorized to join the\n   overlay.  However, the same\
    \ node will not accept HIP_DATA packets\n   from random nodes that are not part\
    \ of the overlay.  Additionally,\n   the HIP_DATA packet itself does not provide\
    \ confidentiality for its\n   payload.  Therefore, the HIP_DATA packet MUST NOT\
    \ be used in\n   environments that do not provide an appropriate level of\n  \
    \ confidentiality (e.g., a HIP-based overlay MUST NOT send HIP_DATA\n   packets\
    \ unless the connections between overlay nodes are encrypted).\n   The type of\
    \ data to be sent is also relevant to whether the use of a\n   HIP_DATA packet\
    \ is appropriate.  HIP itself does not support\n   fragmentation but relies on\
    \ underlying IP-layer fragmentation.  This\n   may lead to reliability problems\
    \ in the case where a message cannot\n   be easily split over multiple HIP messages.\
    \  Therefore, applications\n   in environments where fragmentation could be an\
    \ issue SHOULD NOT\n   generate large HIP_DATA packets that may lead to fragmentation.\
    \  The\n   implementation SHOULD check the MTU of the link before sending the\n\
    \   packet, and if the packet size is larger than MTU, it SHOULD signal\n   to\
    \ the upper-layer protocol if the packet results in an ICMP error\n   message.\
    \  Note that there are environments where fragmentation is not\n   an issue. \
    \ For example, in some HIP-based overlays, nodes can\n   exchange HIP_DATA packets\
    \ on top of TCP connections that provide\n   transport-level fragmentation and,\
    \ thus, avoid IP-level\n   fragmentation.\n   HIP currently requires that all\
    \ messages excluding I1s but including\n   HIP_DATA packets are digitally signed.\
    \  This adds to the packet size\n   and the processing capacity needed to send\
    \ packets.  However, in\n   applications where security is not paramount, it is\
    \ possible to use\n   very short keys, thereby reducing resource consumption.\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   HIP is designed to provide secure authentication\
    \ of hosts.  HIP also\n   attempts to limit the exposure of the host to various\
    \ denial-of-\n   service and man-in-the-middle (MitM) attacks.  However, HIP_DATA\n\
    \   packet, which can be sent without running the HIP base exchange\n   between\
    \ hosts has a trade-off that it does not provide the denial-of-\n   service protection\
    \ or confidentiality protection that HIP generally\n   provides.  Thus, the host\
    \ should consider always situations where it\n   is appropriate to send or receive\
    \ HIP_DATA packet.  If the\n   communication consists more than few round trips\
    \ of data or the data\n   is highly sensitive in nature the host SHOULD run the\
    \ base exchange\n   with the peer host.\n   HIP_DATA packet is designed to protect\
    \ hosts from second preimage\n   attacks allowing receiving host to be able to\
    \ detect, if the message\n   was tampered during the transport.  This property\
    \ is also know as\n   \"weak collision-resistance\".  If a host tries to generate\
    \ a second\n   preimage, it would need to generate it such that the last 8 octets\n\
    \   match with the original message.\n   When handling the PAYLOAD_MIC parameter\
    \ in the receiving host, using\n   the last 8 octets to identify the upper-layer\
    \ protocol doesn't give\n   any guarantee that the MIC would be correct; thus,\
    \ an attacker could\n   send packets where the next header and last 8 octets match\
    \ the values\n   carried by the PAYLOAD_MIC parameter.  Therefore, it is always\n\
    \   mandatory to verify the MIC value by calculating the hash over the\n   payload.\n"
- title: 8.  IANA Considerations
  contents:
  - "8.  IANA Considerations\n   This document updates the IANA registry for HIP packet\
    \ types by\n   introducing a new packet type for the HIP_DATA (Section 4) packet.\n\
    \   This document updates the IANA registry for HIP parameter types by\n   introducing\
    \ new parameter values for the SEQ_DATA (Section 4.1),\n   ACK_DATA (Section 4.2),\
    \ PAYLOAD_MIC (Section 4.3), and TRANSACTION_ID\n   (Section 4.4) parameters.\n"
- title: 9.  Acknowledgments
  contents:
  - "9.  Acknowledgments\n   Pekka Nikander was one of the original authors of the\
    \ document.\n   Also, in the usual IETF fashion, a large number of people have\n\
    \   contributed to the actual text or ideas.  The list of these people\n   include\
    \ Miika Komu, Tobias Heer, Ari Keranen, Samu Varjonen, Thomas\n   Henderson, and\
    \ Jukka Ylitalo.  Our apologies to anyone whose name is\n   missing.\n"
- title: 10.  References
  contents:
  - '10.  References

    '
- title: 10.1.  Normative References
  contents:
  - "10.1.  Normative References\n   [RFC2119]           Bradner, S., \"Key words\
    \ for use in RFCs to\n                       Indicate Requirement Levels\", BCP\
    \ 14, RFC 2119,\n                       March 1997.\n   [RFC5201]           Moskowitz,\
    \ R., Nikander, P., Jokela, P., and T.\n                       Henderson, \"Host\
    \ Identity Protocol\", RFC 5201,\n                       April 2008.\n   [PROTOCOL-NUMBERS]\
    \  IANA, \"Protocol Numbers\", <http://www.iana.org>.\n"
- title: 10.2.  Informative references
  contents:
  - "10.2.  Informative references\n   [RFC5202]           Jokela, P., Moskowitz,\
    \ R., and P. Nikander,\n                       \"Using the Encapsulating Security\
    \ Payload (ESP)\n                       Transport Format with the Host Identity\
    \ Protocol\n                       (HIP)\", RFC 5202, April 2008.\n   [RFC5206]\
    \           Nikander, P., Henderson, T., Vogt, C., and J.\n                  \
    \     Arkko, \"End-Host Mobility and Multihoming with\n                      \
    \ the Host Identity Protocol\", RFC 5206, April\n                       2008.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Gonzalo Camarillo\n   Ericsson\n   Hirsalantie 11\n  \
    \ Jorvas  02420\n   Finland\n   EMail: Gonzalo.Camarillo@ericsson.com\n   Jan\
    \ Melen\n   Ericsson\n   Hirsalantie 11\n   Jorvas  02420\n   Finland\n   EMail:\
    \ Jan.Melen@ericsson.com\n"
