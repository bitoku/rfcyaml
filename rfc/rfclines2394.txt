Abstract This document describes a compression method based on the DEFLATE compression algorithm.
This document defines the application of the DEFLATE algorithm to the IP Payload Compression Protocol.
The IP Payload Compression Protocol allows the compression of IP datagrams by supporting different compression algorithms.
This document describes how to integrate the DEFLATE compression algorithm [Deutsch96] into IPCOMP [IPCOMP].
This document SHOULD be read in conjunction with [IPCOMP] and MUST be taken in its context.
The 'deflate' compression format [Deutsch96], as used by the PKZIP and gzip compressors and as embodied in the freely and widely distributed zlib [Gailly95] library source code, has the following features: an apparently unencumbered encoding and compression algorithm, with an open and publicly available specification.
low overhead escape mechanism for incompressible data.
The PPP Deflate specification offers options to reduce that overhead further.
heavily used for many years in networks, on modem and other point  to point links to transfer files for personal computers and workstations.
easily achieves 2:1 compression on the Calgary corpus [Corpus90] using less than 64KBytes of memory on both sender and receive.
The zlib source is widely and freely available, subject to the following copyright: (C)
Jean Loup Gailly and Mark Adler
This software is provided 'as is', without any express or implied warranty.
In no event will the authors be held liable for any damages arising from the use of this software.
Permission is granted to anyone to use this software for any purpose, including commercial applications, and to alter it and redistribute it freely, subject to the following restrictions: 1.
The origin of this software must not be misrepresented; you must not claim that you wrote the original software.
If you use this software in a product, an acknowledgment in the product documentation would be appreciated but is not required.
Altered source versions must be plainly marked as such, and must not be misrepresented as being the original software.
This notice may not be removed or altered from any source distribution.
If you use the zlib library in a product, we would appreciate  not  receiving lengthy legal documents to sign.
The sources are provided for free but without warranty of any kind.
The library has been entirely written by Jean Loup Gailly and Mark Adler; it does not include third party code.
The deflate format and compression algorithm are based on Lempel Ziv LZ77 compression; extensive research has been done by the GNU Project and the Portable Network Graphics working group supporting its patent free status.
The keywords "MUST", "MUST NOT", "REQUIRED", "SHOULD", "SHOULD NOT", and "MAY" that appear in this document are to be interpreted as described in [Bradner97].
The DEFLATE compression algorithm was designed by Phil Katz and its details are publicly available in [Deutsch96].
Thus it is a good freely available algorithm to implement within IPCOMP.
Compression and decompression algorithm details should be followed as outlined in [Deutsch96] or the use of a software library may be preferable.
Since IPComp is a stateless protocol, history MUST be cleared between packets when either compressing or decompressing.
2.1 Compression As defined in [IPCOMP], the compression process is determined by the IP Compression Association (IPCA).
The IPCA MUST define the DEFLATE algorithm for the process within this document to take place.
The compression process entails compressing the data from the IP datagram and placing the result after the IPComp header.
For example, compressing a TCP datagram; Before:  IP TCP ...
Please note how everything after the IPCOMP header is compressed.
DEFLATE allows for a number of compression levels ranging from best compression but slow to fast compression.
The level that one compresses data is implementation dependant since it is always compatible with the decompression algorithm.
2.2 Decompression As in the compression process, the IPCA defines the parameters and algorithm to utilize for the decompression process.
the data after the IPComp header is decompressed and replaces the IPComp header within the IP header.
Decompression using the DEFLATE algorithm follows the decompression process defined in [Deutsch96].
As stated in [IPCOMP], compression on small buffers does not usually work as well as on fast links since the time it takes to compress is slower than the time to transport the data.
Informal tests show that the average buffer size that produces larger results is around 90 bytes.
Thus implementations SHOULD NOT attempt to compress buffers smaller than 90 bytes.
Other than a packet size limit, no compressibility test as defined in [IPCOMP] is outlined in this document.
IPSec Transform Identifier [IPDOI] states
that the ISAKMP IPCOMP transform ID for the DEFLATE compression algorithm is IPCOMP DEFLATE.
No other ISAKMP parameters are required for the IPCOMP DEFLATE algorithm.
This document does not add any further security considerations that [IPCOMP] and [Deutsch96] have already declared.
Pereira TimeStep Corporation Phone:  1
(613) 599 3610 x 4808 EMail:
The IP Payload Compression Protocol (IPPCP) working group can be contacted via email (ippcp@cisco.com) or through its chair:
Naganand Dorswamy Bay Networks EMail:
