- contents:
  - '               Transmission of IP over InfiniBand (IPoIB)

    '
  title: __initial_text__
- contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2006).\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   This document specifies a method for encapsulating and transmitting\n
    \  IPv4/IPv6 and Address Resolution Protocol (ARP) packets over\n   InfiniBand
    (IB).  It describes the link-layer address to be used when\n   resolving the IP
    addresses in IP over InfiniBand (IPoIB) subnets.\n   The document also describes
    the mapping from IP multicast addresses\n   to InfiniBand multicast addresses.
    \ In addition, this document\n   defines the setup and configuration of IPoIB
    links.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n
    \  2. IP over UD Mode .................................................2\n   3.
    InfiniBand Datalink .............................................3\n   4. Multicast
    Mapping ...............................................3\n      4.1. Broadcast-GID
    Parameters ...................................5\n   5. Setting Up an IPoIB Link
    ........................................6\n   6. Frame Format ....................................................6\n
    \  7. Maximum Transmission Unit .......................................8\n   8.
    IPv6 Stateless Autoconfiguration ................................8\n      8.1.
    IPv6 Link-Local Address ....................................9\n   9. Address Mapping
    - Unicast .......................................9\n      9.1. Link Information
    ...........................................9\n           9.1.1. Link-Layer Address/Hardware
    Address ................11\n           9.1.2. Auxiliary Link Information .........................12\n
    \     9.2. Address Resolution in IPv4 Subnets ........................13\n      9.3.
    Address Resolution in IPv6 Subnets ........................14\n      9.4. Cautionary
    Note on QPN Caching ............................14\n   10. Sending and Receiving
    IP Multicast Packets ....................14\n   11. IP Multicast Routing ..........................................16\n
    \  12. New Types of Vulnerability in IB Multicast ....................17\n   13.
    Security Considerations .......................................17\n   14. IANA
    Considerations ...........................................18\n   15. Acknowledgements
    ..............................................18\n   16. References ....................................................18\n
    \     16.1. Normative References .....................................18\n      16.2.
    Informative References ...................................19\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   The InfiniBand specification [IBTA] can be found at\n   http://www.infinibandta.org.
    \ The document [RFC4392] provides a short\n   overview of InfiniBand architecture
    (IBA) along with considerations\n   for specifying IP over InfiniBand networks.\n
    \  IBA defines multiple modes of transport over which IP may be\n   implemented.
    \ The Unreliable Datagram (UD) transport mode best\n   matches the needs of IP
    and the need for universality as described in\n   [RFC4392].\n   This document
    specifies IPoIB over IB's UD mode.  The implementation\n   of IP subnets over
    IB's other transport mechanisms is out of scope of\n   this document.\n   This
    document describes the necessary steps required in order to lay\n   out an IP
    network on top of an IB network.  It describes all the\n   elements of an IPoIB
    link, how to configure its associated\n   attributes, and how to set up basic
    broadcast and multicast services\n   for it.\n   It further describes IP address
    resolution and the encapsulation of\n   IP and Address Resolution Protocol (ARP)
    packets in InfiniBand frame.\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\",
    \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\",
    and \"OPTIONAL\" in this\n   document are to be interpreted as described in RFC
    2119 [RFC2119].\n"
  title: 1.  Introduction
- contents:
  - "2.  IP over UD Mode\n   The unreliable datagram mode of communication is supported
    by all IB\n   elements be they IB routers, Host Channel Adapters (HCAs), or Target\n
    \  Channel Adapters (TCAs).  In addition to being the only universal\n   transmission
    method, it supports multicasting, partitioning, and a\n   32-bit Cyclic Redundancy
    Check (CRC) [IBTA].  Though multicasting\n   support is optional in IB fabrics,
    IPoIB architecture requires the\n   participating components to support it.\n
    \  All IPoIB implementations MUST support IP over the UD transport mode\n   of
    IBA.\n"
  title: 2.  IP over UD Mode
- contents:
  - "3.  InfiniBand Datalink\n   An IB subnet is formed by a network of IB nodes interconnected
    either\n   directly or via IB switches.  IB subnets may be connected using IB\n
    \  routers to form a fabric made of multiple IB subnets.  Nodes residing\n   in
    different IB subnets can communicate directly with one another\n   through IB
    routers at the IB network layer.  Multiple IP subnets may\n   be overlaid over
    this IB network.\n   An IP subnet is configured over a communication facility
    or medium\n   over which nodes can communicate at the \"link\" layer [IPV6].  For\n
    \  example, an ethernet segment is a link formed by interconnected\n   switches/hubs/bridges.
    \ The segment is therefore defined by the\n   physical topology of the network.
    \ This is not the case with IPoIB.\n   IPoIB subnets are built over an abstract
    \"link\".  The link is defined\n   by its members and common characteristics such
    as the P_Key, link\n   MTU, and the Q_Key.\n   Any two ports using UD communication
    mode in an IB fabric can\n   communicate only if they are in the same partition
    (i.e., have the\n   same P_Key and the same Q_Key) [RFC4392].  The link MTU provides
    a\n   limit to the size of the payload that may be used.  The packet\n   transmission
    and routing within the IB fabric are also affected by\n   additional parameters
    such as the traffic class (TClass), hop limit\n   (HopLimit), service level (SL),
    and the flow label (FlowLabel)\n   [RFC4392].  The determination and use of these
    values for IPoIB\n   communication are described in the following sections.\n"
  title: 3.  InfiniBand Datalink
- contents:
  - "4.  Multicast Mapping\n   IB identifies multicast groups by the Multicast Global
    Identifiers\n   (MGIDs), which follow the same rules as IPv6 multicast addresses.\n
    \  Hence the MGIDs follow the same rules regarding the transient\n   addresses
    and scope bits albeit in the context of the IB fabric.  The\n   resultant address
    therefore resembles IPv6 multicast addresses.  The\n   documents [IBTA, RFC4392]
    give a detailed description of IB\n   multicast.\n   The IPoIB multicast mapping
    is depicted in figure 1.  The same\n   mapping function is used for both IPv4
    and IPv6 except for the IPoIB\n   signature field.\n   Unless explicitly stated,
    all addresses and fields in the protocol\n   headers in this document are stored
    in the network byte order.\n   |   8    |  4 |  4 |     16 bits     | 16 bits
    |      80 bits      |\n   +------ -+----+----+-----------------+---------+-------------------+\n
    \  |11111111|0001|scop|<IPoIB signature>|< P_Key >|      group ID     |\n   +--------+----+----+-----------------+---------+-------------------+\n
    \                                Figure 1\n   Since an MGID allocated for transporting
    IP multicast datagrams is\n   considered only a transient link-layer multicast
    address [RFC4392],\n   all IB MGIDs allocated for IPoIB purpose MUST set T-flag
    to 1 [IBTA].\n   A special signature is embedded to identify the MGID for IPoIB
    use\n   only.  For IPv4 over IB, the signature MUST be \"0x401B\".  For IPv6\n
    \  over IB, the signature MUST be \"0x601B\".\n   The IP multicast address is
    used together with a given IPoIB link\n   P_Key to form the MGID of the IB multicast
    group.  For IPv6 the lower\n   80-bit of the group ID is used directly in the
    lower 80-bit of the\n   MGID.  For IPv4, the group ID is only 28-bit long, and
    is placed\n   directly in the lower 28 bits of the MGID.  The rest of the group
    ID\n   bits in the MGID are filled with 0.\n   E.g., on an IPoIB link that is
    fully contained within a single IB\n   subnet with a P_Key of 0x8000, the MGIDs
    for the all-router multicast\n   group with group ID 2 [AARCH, IGMP3] are:\n       FF12:401B:8000::2,
    \ for IPv4 in compressed format, and\n       FF12:601B:8000::2,  for IPv6 in compressed
    format.\n   A special case exists for the IPv4 limited broadcast address\n   \"255.255.255.255\"
    [HOSTS].  The address SHALL be mapped to the\n   \"broadcast-GID\", which is defined
    as follows:\n   |   8    |  4 |  4 |     16 bits    | 16 bits | 48 bits  | 32
    bits |\n   +--------+----+----+----------------+---------+----------+---------+\n
    \  |11111111|0001|scop|0100000000011011|< P_Key >|00.......0|<all 1's>|\n   +--------+----+----+----------------+---------+----------+---------+\n
    \                                Figure 2\n   All MGIDs used in the IPoIB subnet
    MUST use the same scop bits as in\n   the corresponding broadcast-GID.\n"
  - contents:
    - "4.1.  Broadcast-GID Parameters\n   The broadcast-GID is set up with the following
      attributes:\n       1. P_Key\n          A \"Full Membership\" P_Key (high-order
      bit is set to 1) MUST be\n          used so that all members may communicate
      with one another.\n       2. Q_Key\n          It is RECOMMENDED that a controlled
      Q_Key be used with the\n          high-order bit set.  This is to prevent non-privileged\n
      \         software from fabricating and sending out bogus IP datagrams.\n       3.
      IB MTU\n          The value assigned to the broadcast-GID must not be greater\n
      \         than any physical link MTU spanned by the IPoIB subnet.\n   The following
      attributes are required in multicast transmissions and\n   also in unicast transmissions
      if an IPoIB link covers more than a\n   single IB subnet.\n       4. Other parameters\n
      \         The selection of TClass, FlowLabel, and HopLimit values is\n          implementation
      dependent.  But it must take into account the\n          topology of IB subnets
      comprising the IPoIB link in order to\n          allow successful communication
      between any two nodes in the\n          same IPoIB link.\n          An SL also
      needs to be assigned to the broadcast-GID.  This SL\n          is used in all
      multicast communication in the subnet.\n          The broadcast-GID's scope
      bits need to be set based on whether\n          the IPoIB link is confined within
      an IB subnet or the IPoIB\n          link spans multiple IB subnets.  A default
      of local-subnet\n          scope (i.e., 0x2) is RECOMMENDED.  A node might determine
      the\n          scope bits to use by interactively searching for a broadcast-\n
      \         GID of ever greater scope by first starting with the local-\n          scope.
      \ Or, an implementation might include the scope bits as\n          a configuration
      parameter.\n"
    title: 4.1.  Broadcast-GID Parameters
  title: 4.  Multicast Mapping
- contents:
  - "5.  Setting Up an IPoIB Link\n   The broadcast-GID, as defined in the previous
    section, MUST be set up\n   for an IPoIB subnet to be formed.  Every IPoIB interface
    MUST\n   \"FullMember\" join the IB multicast group defined by the broadcast-\n
    \  GID.  This multicast group will henceforth be referred to as the\n   broadcast
    group.  The join operation returns the MTU, the Q_Key, and\n   other parameters
    associated with the broadcast group.  The node then\n   associates the parameters
    received as a result of the join operation\n   with its IPoIB interface.  The
    broadcast group also serves to provide\n   a link-layer broadcast service for
    protocols like ARP, net-directed,\n   subnet-directed, and all-subnets-directed
    broadcasts in IPv4 over IB\n   networks.\n   The join operation is successful
    only if the Subnet Manager (SM)\n   determines that the joining node can support
    the MTU registered with\n   the broadcast group [RFC4392] ensuring support for
    a common link MTU.\n   The SM also ensures that all the nodes joining the broadcast-GID
    have\n   paths to one another and can therefore send and receive unicast\n   packets.
    \ It further ensures that all the nodes do indeed form a\n   multicast tree that
    allows packets sent from any member to be\n   replicated to every other member.
    \ Thus, the IPoIB link is formed by\n   the IPoIB nodes joining the broadcast
    group.  There is no physical\n   demarcation of the IPoIB link other than that
    determined by the\n   broadcast group membership.\n   The P_Key is a configuration
    parameter that must be known before the\n   broadcast-GID can be formed.  For
    a node to join a partition, one of\n   its ports must be assigned the relevant
    P_Key by the SM [RFC4392].\n   The method of creation of the broadcast group and
    the\n   assignment/choice of its parameters are up to the implementation\n   and/or
    the administrator of the IPoIB subnet.  The broadcast group\n   may be created
    by the first IPoIB node to be initialized, or it can\n   be created administratively
    before the IPoIB subnet is set up.  It is\n   RECOMMENDED that the creation and
    deletion of the broadcast group be\n   under administrative control.\n   InfiniBand
    multicast management, which includes the creation,\n   joining, and leaving of
    IB multicast groups by IB nodes, is described\n   in [RFC4392].\n"
  title: 5.  Setting Up an IPoIB Link
- contents:
  - "6.  Frame Format\n   All IP and ARP datagrams transported over InfiniBand are
    prefixed by\n   a 4-octet encapsulation header as illustrated below.\n   0                   1
    \                  2                   3\n   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6
    7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |                               |                               |\n   |         Type
    \                 |       Reserved                |\n   |                               |
    \                              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \                                Figure 3\n   The \"Reserved\" field MUST be set
    to zero on send and ignored on\n   receive unless specified differently in a future
    document.\n   The \"Type\" field SHALL indicate the encapsulated protocol as per
    the\n   following table.\n                      +----------+-------------+\n                      |
    Type     |    Protocol |\n                      |------------------------|\n                      |
    0x800    |    IPv4     |\n                      |------------------------|\n                      |
    0x806    |    ARP      |\n                      |------------------------|\n                      |
    0x8035   |    RARP     |\n                      |------------------------|\n                      |
    0x86DD   |    IPv6     |\n                      +------------------------+\n                                 Table
    1\n   These values are taken from the \"ETHER TYPE\" numbers assigned by\n   Internet
    Assigned Numbers Authority (IANA) [IANA].  Other network\n   protocols, identified
    by different values of \"ETHER TYPE\", may use\n   the encapsulation format defined
    herein, but such use is outside of\n   the scope of this document.\n   |<------
    IB Frame headers -------->|<- Payload ->|<- IB trailers ->|\n   +-------+------+---------+---------+-------------+---------+-------+\n
    \  |Local  |      |Base     |Datagram |   4-octet   |         |       |\n   |Routing|
    GRH* |Transport|Extended |   header    |Invariant|Variant|\n   |Header |Header|Header
    \  |Transport|      +      |  CRC    |  CRC  |\n   |       |      |         |Header
    \  |   IP/ARP    |         |       |\n   +-------+------+---------+---------+-------------+---------+-------+\n
    \                                Figure 4\n   Figure 4 depicts the IB frame encapsulating
    an IP/ARP datagram.  The\n   InfiniBand specification requires the use of Global
    Routing Header\n   (GRH) [RFC4392] when multicasting or when an InfiniBand packet\n
    \  traverses from one IB subnet to another through an IB router.  Its\n   use
    is optional when used for unicast transmission between nodes\n   within an IB
    subnet.  The IPoIB implementation MUST be able to handle\n   packets received
    with or without the use of GRH.\n"
  title: 6.  Frame Format
- contents:
  - "7.  Maximum Transmission Unit\n   IB MTU:  The IB components, that is, IB links,
    switches, Channel\n      Adapters (CAs), and IB routers, may support maximum payloads
    of\n      256, 512, 1024, 2048, or 4096 octets.  The maximum IB payload\n      supported
    by the IB components in any IB path is the IB MTU for\n      the path.\n   IPoIB-Link
    MTU:  The IPoIB-link MTU is the MTU value associated with\n      the broadcast
    group.  The IPoIB-link MTU can be set to any value\n      up to the smallest IB
    MTU supported by the IB components\n      comprising the IPoIB link.\n   In order
    to reduce problems with fragmentation and path-MTU\n   discovery, this document
    requires that all IPoIB implementations\n   support an MTU of 2044 octets, that
    is, a 2048-octet IPoIB-link MTU\n   minus the 4-octet encapsulation overhead.
    \ Larger and smaller MTUs\n   MAY be supported subject to other existing MTU requirements
    [IPV6],\n   but the default configuration must support an MTU of 2044 octets.\n"
  title: 7.  Maximum Transmission Unit
- contents:
  - "8.  IPv6 Stateless Autoconfiguration\n   IB architecture associates an EUI-64
    identifier termed the Globally\n   Unique Identifier (GUID) [RFC4392, IBTA] with
    each port.  The Local\n   Identifier (LID) is unique within an IB subnet only.\n
    \  The interface identifier may be chosen from the following:\n      1) The EUI-64-compliant
    GUID assigned by the manufacturer.\n      2) If the IPoIB subnet is fully contained
    within an IB subnet, any\n         of the unique 16-bit LIDs of the port associated
    with the IPoIB\n         interface.\n         The LID values of a port may change
    after a reboot/power-cycle\n         of the IB node.  Therefore, if a persistent
    value is desired,\n         it would be prudent not to use the LID to form the
    interface\n         identifier.\n         On the other hand, the LID provides
    an identifier that can be\n         used to create a more anonymous IPv6 address
    since the LID is\n         not globally unique and is subject to change over time.\n
    \  It is RECOMMENDED that the link-local address be constructed from the\n   port's
    EUI-64 identifier as given below.\n   [AARCH] requires that the interface identifier
    be created in the\n   \"Modified EUI-64\" format when derived from an EUI-64 identifier.\n
    \  [IBTA] is unclear if the GUID should use IEEE EUI-64 format or the\n   \"Modified
    EUI-64\" format.  Therefore, when creating an interface\n   identifier from the
    GUID, an implementation MUST do the following:\n      => Determine if the GUID
    is a modified EUI-64 identifier (\"u\" bit\n      is toggled) as defined by [AARCH]\n
    \     => If the GUID is a modified EUI-64 identifier, then the \"u\" bit\n      MUST
    NOT be toggled when creating the interface identifier\n      => If the GUID is
    an unmodified EUI-64 identifier, then the \"u\"\n      bit MUST be toggled in
    compliance with [AARCH]\n"
  - contents:
    - "8.1.  IPv6 Link-Local Address\n   The IPv6 link-local address for an IPoIB
      interface is formed as\n   described in [AARCH] using the interface identifier
      as described in\n   the previous section.\n"
    title: 8.1.  IPv6 Link-Local Address
  title: 8.  IPv6 Stateless Autoconfiguration
- contents:
  - "9.  Address Mapping - Unicast\n   Address resolution in IPv4 subnets is accomplished
    through Address\n   Resolution Protocol (ARP) [ARP].  It is accomplished in IPv6
    subnets\n   using the Neighbor Discovery protocol [DISC].\n"
  - contents:
    - "9.1.  Link Information\n   An InfiniBand packet over the UD mode includes multiple
      headers such\n   as the LRH (local route header), GRH (global route header),
      BTH (base\n   transport header), DETH (datagram extended transport header) as\n
      \  depicted in figure 4 and specified in the InfiniBand architecture\n   [IBTA].
      \ All these headers comprise the link-layer in an IPoIB link.\n   The parameters
      needed in these IBA headers constitute the link-layer\n   information that needs
      to be determined before an IP packet may be\n   transmitted across the IPoIB
      link.\n   The parameters that need to be determined are as follows:\n      a)
      LID\n         The LID is always needed.  A packet always includes the LRH\n
      \        that is targeted at the remote node's LID, or an IB router's\n         LID
      to get to the remote node in another IB subnet.\n      b) Global Identifier
      (GID)\n         The GID is not needed when exchanging information within an
      IB\n         subnet though it may be included in any packet.  It is an\n         absolute
      necessity when transmitting across the IB subnet since\n         the IB routers
      use the GID to correctly forward the packets.\n         The source and destination
      GIDs are fields included in the GRH.\n         The GID, if formed using the
      GUID, can be used to unambiguously\n         identify an endpoint.\n      c)
      Queue Pair Number (QPN)\n         Every unicast UD communication is always directed
      to a\n         particular queue pair (QP) at the peer.\n      d) Q_Key\n         A
      Q_Key is associated with each Unreliable Datagram QPN.  The\n         received
      packets must contain a Q_Key that matches the QP's\n         Q_Key to be accepted.\n
      \     e) P_Key\n         A successful communication between two IB nodes using
      UD mode\n         can occur only if the two nodes have compatible P_Keys.  This\n
      \        is referred to as being in the same partition [IBTA].\n      f) SL\n
      \        Every IBA packet contains an SL value.  A path in IBA is\n         defined
      by the three-tuple (source LID, destination LID, SL).\n         The SL in turns
      is mapped to a virtual lane (VL) at every CA,\n         switch that sends/forwards
      the packet [RFC4392].  Multiple SLs\n         may be used between two endpoints
      to provide for load\n         balancing.  SLs may be used for providing a Quality
      of Service\n         (QoS) infrastructure, or may be used to avoid deadlocks
      in the\n         IBA fabric.\n   Another auxiliary piece of information, not
      included in the IBA\n   headers, is the following:\n      g) Path rate\n         IBA
      defines multiple link speeds.  A higher-speed transmitter\n         can swamp
      switches and the CAs.  To avoid such congestion,\n         every source transmitting
      at greater than 1x speeds is required\n         to determine the \"path rate\"
      before the data may be transmitted\n         [IBTA].\n"
    - contents:
      - "9.1.1.  Link-Layer Address/Hardware Address\n   Though the list of information
        required for a successful transmittal\n   of an IPoIB packet is large, not
        all the information need be\n   determined during the IP address resolution
        process.\n   The 20-octet IPoIB link-layer address used in the source/target\n
        \  link-layer address option in IPv6 and the \"hardware address\" in\n   IPv4/ARP
        has the same format.\n   The format is as described below:\n        0                   1
        \                  2                   3\n        0 1 2 3 4 5 6 7 8 9 0 1
        2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \      |    Reserved   |              Queue Pair Number                |\n
        \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \      |                                                               |\n
        \      +                                                               +\n
        \      |                                                               |\n
        \      +                            GID                                +\n
        \      |                                                               |\n
        \      +                                                               +\n
        \      |                                                               |\n
        \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \                                Figure 5\n      a) Reserved Flags\n         These
        8 bits are reserved for future use.  These bits MUST be\n         set to zero
        on send and ignored on receive unless specified\n         differently in a
        future document.\n      b) QPN\n         Every unicast communication in IB
        architecture is directed to a\n         specific QP [IBTA].  This QP number
        is included in the link\n         description.  All IP communication to the
        relevant IPoIB\n         interface MUST be directed to this QPN.  In the case
        of IPv4\n         subnets, the Address Resolution Protocol (ARP) reply packets\n
        \        are also directed to the same QPN.\n         The choice of the QPN
        for IP/ARP communication is up to the\n         implementation.\n      c)
        GID\n         This is one of the GIDs of the port associated with the IPoIB\n
        \        interface [IBTA].  IB associates multiple GIDs with a port.  It\n
        \        is RECOMMENDED that the GID formed by the combination of the IB\n
        \        subnet prefix and the port's \"Port GUID\" [IBTA] be included in\n
        \        the link-layer/hardware address.\n"
      title: 9.1.1.  Link-Layer Address/Hardware Address
    - contents:
      - "9.1.2.  Auxiliary Link Information\n   The rest of the parameters are determined
        as follows:\n      a) LID\n         The method of determining the peer's LID
        is not defined in this\n         document.  It is up to the implementation
        to use any of the\n         IBA-approved methods to determine the destination
        LID.  One\n         such method is to use the GID determined during the address\n
        \        resolution, to retrieve the associated LID from the IB routing\n
        \        infrastructure or the Subnet Administrator (SA).\n         It is
        the responsibility of the administrator to ensure that\n         the IB subnet(s)
        have unicast connectivity between the IPoIB\n         nodes.  The GID exchanged
        between two endpoints in a multicast\n         message (ARP/ND) does not guarantee
        the existence of a unicast\n         path between the two.\n         There
        may be multiple LIDs, and hence paths, between the\n         endpoints.  The
        criteria for selection of the LIDs are beyond\n         the scope of this
        document.\n      b) Q_Key\n         The Q_Key received on joining the broadcast
        group MUST be used\n         for all IPoIB communication over the particular
        IPoIB link.\n      c) P_Key\n         The P_Key to be used in the IP subnet
        is not discovered but is\n         a configuration parameter.\n      d) SL\n
        \        The method of determining the SL is not defined in this\n         document.
        \ The SL is determined by any of the IBA-approved\n         methods.\n      e)
        Path rate\n         The implementation must leverage IB methods to determine
        the\n         path rate as required.\n"
      title: 9.1.2.  Auxiliary Link Information
    title: 9.1.  Link Information
  - contents:
    - "9.2.  Address Resolution in IPv4 Subnets\n   The ARP packet header is as defined
      in [ARP].  The hardware type is\n   set to 32 (decimal) as specified by IANA
      [IANA].  The rest of the\n   fields are used as per [ARP].\n              16
      bits: hardware type\n              16 bits: protocol\n               8 bits:
      length of hardware address\n               8 bits: length of protocol address\n
      \             16 bits: ARP operation\n   The remaining fields in the packet
      hold the sender/target hardware\n   and protocol addresses.\n               [
      sender hardware address ]\n               [ sender protocol address ]\n               [
      target hardware address ]\n               [ target protocol address ]\n   The
      hardware address included in the ARP packet will be as specified\n   in section
      9.1.1 and depicted in figure 5.\n   The length of the hardware address used
      in ARP packet header\n   therefore is 20.\n"
    title: 9.2.  Address Resolution in IPv4 Subnets
  - contents:
    - "9.3.  Address Resolution in IPv6 Subnets\n   The Source/Target Link-layer address
      option is used in Router\n   Solicit, Router advertisements, Redirect, Neighbor
      Solicitation, and\n   Neighbor Advertisement messages when such messages are
      transmitted on\n   InfiniBand networks.\n   The source/target address option
      is specified as follows:\n       Type:\n           Source Link-layer address
      \      1\n           Target Link-layer address       2\n       Length: 3\n       Link-layer
      address:\n           The link-layer address is as specified in section 9.1.1
      and\n           depicted in figure 5.\n           [DISC] specifies the length
      of source/target option in\n           number of 8-octets as indicated by a
      length of '3' above.\n           Since the IPoIB link-layer address is only
      20 octets long,\n           two octets of zero MUST be prepended to fill the
      total\n           option length of 24 octets.\n"
    title: 9.3.  Address Resolution in IPv6 Subnets
  - contents:
    - "9.4.  Cautionary Note on QPN Caching\n   The link-layer address for IPoIB includes
      the QPN, which might not be\n   constant across reboots or even across network
      interface resets.\n   Cached QPN entries, such as in static ARP entries or in
      Reverse\n   Address Resolution Protocol (RARP) servers, will only work if the\n
      \  implementation(s) using these options ensure that the QPN associated\n   with
      an interface is invariant across reboots/network resets.\n   It is RECOMMENDED
      that implementations revalidate ARP caches\n   periodically due to the aforementioned
      QPN-induced volatility of\n   IPoIB link-layer addresses.\n"
    title: 9.4.  Cautionary Note on QPN Caching
  title: 9.  Address Mapping - Unicast
- contents:
  - "10.  Sending and Receiving IP Multicast Packets\n   Multicast in InfiniBand differs
    in a number of ways from multicast in\n   ethernet.  This adds some complexity
    to an IPoIB implementation when\n   supporting IP multicast over IB.\n      A)
    An IB multicast group must be explicitly created through the SA\n         before
    it can be used.\n         This implies that in order to send a packet destined
    for an IP\n         multicast address, the IPoIB implementation must check with
    the\n         SA on the outbound link first for a \"MCMemberRecord\" that\n         matches
    the MGID.  If one does exist, the Multicast Local\n         Identifier (MLID)
    associated with the multicast group is used\n         as the Destination Local
    Identifier (DLID) for the packet.\n         Otherwise, it implies no member exists
    on the local link.  If\n         the scope of the IP multicast group is beyond
    link-local, the\n         packet must be sent to the on-link routers through the
    use of\n         the all-router multicast group or the broadcast group.  This
    is\n         to allow local routers to forward the packet to multicast\n         listeners
    on remote networks.  The all-router multicast group\n         is preferred over
    the broadcast group for better efficiency.\n         If the all-router multicast
    group does not exist, the sender\n         can assume that there are no routers
    on the local link; hence\n         the packet can be safely dropped.\n      B)
    A multicast sender must join the target multicast group before\n         outgoing
    multicast messages from it can be successfully routed.\n         The \"SendOnlyNonMember\"
    join is different from the regular\n         \"FullMember\" join in two aspects.
    \ First, both types of joins\n         enable multicast packets to be routed FROM
    the local port, but\n         only the \"FullMember\" join causes multicast packets
    to be\n         routed TO the port.  Second, the sender port of a\n         \"SendOnlyNonMember\"
    join will not be counted as a member of the\n         multicast group for purposes
    of group creation and deletion.\n   The following code snippet demonstrates the
    steps in a typical\n   implementation when processing an egress multicast packet.\n
    \  if the egress port is already a \"SendOnlyNonMember\", or a\n   \"FullMember\"\n
    \      => send the packet\n   else if the target multicast group exists\n       =>
    do \"SendOnlyNonMember\" join\n       => send the packet\n   else if scope > link-local
    AND the all-router multicast group exists\n       => send the packet to all routers\n
    \  else\n       => drop the packet\n   Implementations should cache the information
    about the existence of\n   an IB multicast group, its MLID and other attributes.
    \ This is to\n   avoid expensive SA calls on every outgoing multicast packet.
    \ Senders\n   MUST subscribe to the multicast group create and delete traps in\n
    \  order to monitor the status of specific IB multicast groups.  For\n   example,
    multicast packets directed to the all-router multicast group\n   due to a lack
    of listener on the local subnet must be forwarded to\n   the right multicast group
    if the group is created later.  This\n   happens when a listener shows up on the
    local subnet.\n   A node joining an IP multicast group must first construct an
    MGID\n   according to the rule described in section 4 above.  Once the correct\n
    \  MGID is calculated, the node must call the SA of the outbound link to\n   attempt
    a \"FullMember\" join of the IB multicast group corresponding\n   to the MGID.
    \ If the IB multicast group does not already exist, one\n   must be created first
    with the IPoIB link MTU.  The MGID MUST use the\n   same P_Key, Q_Key, SL, MTU,
    and HopLimit as those used in the\n   broadcast-GID.  The rest of attributes SHOULD
    follow the values used\n   in the broadcast-GID as well.\n   The join request
    will cause the local port to be added to the\n   multicast group.  It also enables
    the SM to program IB switches and\n   routers with the new multicast information
    to ensure the correct\n   forwarding of multicast packets for the group.\n   When
    a node leaves an IP multicast group, it SHOULD make a\n   \"FullMember\" leave
    request to the SA.  This gives the SM an\n   opportunity to update relevant forwarding
    information, to delete an\n   IB multicast group if the local port is the last
    FullMember to leave,\n   and to free up the MLID allocated for it.  The specific
    algorithm is\n   implementation-dependent and is out of the scope of this document.\n
    \  Note that for an IPoIB link that spans more than one IB subnet\n   connected
    by IB routers, an adequate multicast forwarding support at\n   the IB level is
    required for multicast packets to reach listeners on\n   a remote IB subnet.  The
    specific mechanism for this is beyond the\n   scope of IPoIB.\n"
  title: 10.  Sending and Receiving IP Multicast Packets
- contents:
  - "11.  IP Multicast Routing\n   IP multicast routing requires each interface over
    which the router is\n   operating to be configured to listen to all link-layer
    multicast\n   addresses generated by IP [IPMULT, IP6MLD].  For an Ethernet\n   interface,
    this is often achieved by turning on the promiscuous\n   multicast mode on the
    interface.\n   IBA does not provide any hardware support for promiscuous multicast\n
    \  mode.  Fortunately, a promiscuous multicast mode can be emulated in\n   the
    software running on a router through the following steps:\n      A) Obtain a list
    of all active IB multicast groups from the local\n         SA.\n      B) Make
    a \"NonMember\" join request to the SA for every group that\n         has a signature
    in its MGID matching the one for either IPv4 or\n         IPv6.\n      C) Subscribe
    to the IB multicast group creation events using a\n         wildcarded MGID so
    that the router can \"NonMember\" join all IB\n         multicast groups created
    subsequently for IPv4 or IPv6.\n   The \"NonMember\" join has the same effect
    as a \"FullMember\" join\n   except that the former will not be counted as a member
    of the\n   multicast group for purposes of group creation or deletion.  That is,\n
    \  when the last \"FullMember\" leaves a multicast group, the group can be\n   safely
    deleted by the SA without concerning any \"NonMember\" routers.\n"
  title: 11.  IP Multicast Routing
- contents:
  - "12.  New Types of Vulnerability in IB Multicast\n   Many IB multicast functions
    are subject to failures due to a number\n   of possible resource constraints.
    \ These include the creation of IB\n   multicast groups, the join calls (\"SendOnlyNonMember\",
    \"FullMember\",\n   and \"NonMember\"), and the attaching of a QP to a multicast
    group.\n   In general, the occurrence of these failure conditions is highly\n
    \  implementation-dependent, and is believed to be rare.  Usually, a\n   failed
    multicast operation at the IB level can be propagated back to\n   the IP level,
    causing the original operation to fail and the\n   initiator of the operation
    to be notified.  But some IB multicast\n   functions are not tied to any foreground
    operation, making their\n   failures hard to detect.  For example, if an IP multicast
    router\n   attempts to \"NonMember\" join a newly created multicast group in the\n
    \  local subnet, but the join call fails, packet forwarding for that\n   particular
    multicast group will likely fail silently, that is,\n   without the attention
    of local multicast senders.  This type of\n   problem can add more vulnerability
    to the already unreliable IP\n   multicast operations.\n   Implementations SHOULD
    log error messages upon any failure from an IB\n   multicast operation.  Network
    administrators should be aware of this\n   vulnerability, and preserve enough
    multicast resources at the points\n   where IP multicast will be used heavily.
    \ For example, HCAs with\n   ample multicast resources should be used at any IP
    multicast router.\n"
  title: 12.  New Types of Vulnerability in IB Multicast
- contents:
  - "13.  Security Considerations\n   This document specifies IP transmission over
    a multicast network.\n   Any network of this kind is vulnerable to a sender claiming
    another's\n   identity and forging traffic or eavesdropping.  It is the\n   responsibility
    of the higher layers or applications to implement\n   suitable countermeasures
    if this is a problem.\n   Successful transmission of IP packets depends on the
    correct setup of\n   the IPoIB link, creation of the broadcast-GID, creation of
    the QP and\n   its attachment to the broadcast-GID, and the correct determination
    of\n   various link parameters such as the LID, service level, and path\n   rate.
    \ These operations, many of which involve interactions with the\n   SM/SA, MUST
    be protected by the underlying operating system.  This is\n   to prevent malicious,
    non-privileged software from hijacking\n   important resources and configurations.\n
    \  Controlled Q_Keys SHOULD be used in all transmissions.  This is to\n   prevent
    non-privileged software from fabricating IP datagrams.\n"
  title: 13.  Security Considerations
- contents:
  - "14.  IANA Considerations\n   To support ARP over InfiniBand, a value for the
    Address Resolution\n   Parameter \"Number Hardware Type (hrd)\" is required.  IANA
    has\n   assigned the number \"32\" to indicate InfiniBand [IANA_ARP].\n   Future
    uses of the reserved bits in the frame format (Figure 3) and\n   link-layer address
    (Figure 5) MUST be published as RFCs.  This\n   document requires that the reserved
    bits be set to zero on send and\n   ignored on receive.\n"
  title: 14.  IANA Considerations
- contents:
  - "15.  Acknowledgements\n   The authors would like to thank Bruce Beukema, David
    Brean, Dan\n   Cassiday, Aditya Dube, Yaron Haviv, Michael Krause, Thomas Narten,\n
    \  Erik Nordmark, Greg Pfister, Jim Pinkerton, Renato Recio, Kevin\n   Reilly,
    Kanoj Sarcar, Satya Sharma, Madhu Talluri, and David L.\n   Stevens for their
    suggestions and many clarifications on the IBA\n   specification.\n"
  title: 15.  Acknowledgements
- contents:
  - '16.  References

    '
  - contents:
    - "16.1.  Normative References\n   [AARCH]      Hinden, R. and S. Deering, \"Internet
      Protocol Version 6\n                (IPv6) Addressing Architecture\", RFC 3513,
      April 2003.\n   [ARP]        Plummer, David C., \"Ethernet Address Resolution\n
      \               Protocol: Or converting network protocol addresses to\n                48.bit
      Ethernet address for transmission on Ethernet\n                hardware \",
      STD 37, RFC 826, November 1982.\n   [DISC]       Narten, T., Nordmark, E., and
      W. Simpson, \"Neighbor\n                Discovery for IP Version 6 (IPv6)\",
      RFC 2461, December\n                1998.\n   [IANA]       Internet Assigned
      Numbers Authority, URL\n                http://www.iana.org\n   [IANA_ARP]   URL
      http://www.iana.org/assignments/arp-parameters\n   [IBTA]       InfiniBand Architecture
      Specification, URL\n                http://www.infinibandta.org/specs\n   [RFC4392]
      \   Kashyap, V., \"IP over InfiniBand (IPoIB) Architecture\",\n                RFC
      4392, April 2006.\n   [RFC2119]    Bradner, S., \"Key words for use in RFCs
      to Indicate\n                Requirement Levels\", BCP 14, RFC 2119, March 1997.\n"
    title: 16.1.  Normative References
  - contents:
    - "16.2.  Informative References\n   [HOSTS]      Braden, R., \"Requirements for
      Internet Hosts -\n                Communication Layers\", STD 3, RFC 1122, October
      1989.\n   [IGMP3]      Cain, B., Deering, S., Kouvelas, I., Fenner, B., and
      A.\n                Thyagarajan, \"Internet Group Management Protocol,\n                Version
      3\", RFC 3376, October 2002.\n   [IP6MLD]     Deering, S., Fenner, W., and B.
      Haberman, \"Multicast\n                Listener Discovery (MLD) for IPv6\",
      RFC 2710, October\n                1999.\n   [IPMULT]     Deering, S., \"Host
      extensions for IP multicasting\", STD\n                5, RFC 1112, August 1989.\n
      \  [IPV6]       Deering, S. and R. Hinden, \"Internet Protocol, Version 6\n
      \               (IPv6) Specification\", RFC 2460, December 1998.\n"
    title: 16.2.  Informative References
  title: 16.  References
- contents:
  - "Authors' Addresses\n   H.K. Jerry Chu\n   17 Network Circle, UMPK17-201\n   Menlo
    Park, CA 94025\n   USA\n   Phone: +1 650 786 5146\n   EMail: jerry.chu@sun.com\n
    \  Vivek Kashyap\n   15350, SW Koll Parkway\n   Beaverton, OR 97006\n   USA\n
    \  Phone: +1 503 578 3422\n   EMail: vivk@us.ibm.com\n"
  title: Authors' Addresses
- contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2006).\n   This
    document is subject to the rights, licenses and restrictions\n   contained in
    BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n
    \  This document and the information contained herein are provided on an\n   \"AS
    IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n   OR IS SPONSORED
    BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING TASK FORCE
    DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT LIMITED TO
    ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT INFRINGE ANY
    RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR
    PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or
    scope of any\n   Intellectual Property Rights or other rights that might be claimed
    to\n   pertain to the implementation or use of the technology described in\n   this
    document or the extent to which any license under such rights\n   might or might
    not be available; nor does it represent that it has\n   made any independent effort
    to identify any such rights.  Information\n   on the procedures with respect to
    rights in RFC documents can be\n   found in BCP 78 and BCP 79.\n   Copies of IPR
    disclosures made to the IETF Secretariat and any\n   assurances of licenses to
    be made available, or the result of an\n   attempt made to obtain a general license
    or permission for the use of\n   such proprietary rights by implementers or users
    of this\n   specification can be obtained from the IETF on-line IPR repository
    at\n   http://www.ietf.org/ipr.\n   The IETF invites any interested party to bring
    to its attention any\n   copyrights, patents or patent applications, or other
    proprietary\n   rights that may cover technology that may be required to implement\n
    \  this standard.  Please address the information to the IETF at\n   ietf-ipr@ietf.org.\n"
  title: Intellectual Property
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is provided by the IETF\n
    \  Administrative Support Activity (IASA).\n"
  title: Acknowledgement
