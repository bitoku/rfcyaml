- contents:
  - '  Simple Network Management Protocol (SNMP) Context EngineID Discovery

    '
  title: __initial_text__
- contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of This Memo
- contents:
  - "Abstract\n   The Simple Network Management Protocol (SNMP) version three (SNMPv3)\n
    \  requires that an application know the identifier (snmpEngineID) of\n   the
    remote SNMP protocol engine in order to retrieve or manipulate\n   objects maintained
    on the remote SNMP entity.\n   This document introduces a well-known localEngineID
    and a discovery\n   mechanism that can be used to learn the snmpEngineID of a
    remote SNMP\n   protocol engine.  The proposed mechanism is independent of the\n
    \  features provided by SNMP security models and may also be used by\n   other
    protocol interfaces providing access to managed objects.\n   This document updates
    RFC 3411.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .
    . . . . . . 2\n   2.  Background  . . . . . . . . . . . . . . . . . . . . . .
    . . . . 2\n   3.  Procedure . . . . . . . . . . . . . . . . . . . . . . . . .
    . . 3\n     3.1.  Local EngineID  . . . . . . . . . . . . . . . . . . . . . .
    4\n     3.2.  EngineID Discovery  . . . . . . . . . . . . . . . . . . . . 4\n
    \  4.  IANA Considerations . . . . . . . . . . . . . . . . . . . . . . 5\n   5.
    \ Security Considerations . . . . . . . . . . . . . . . . . . . . 6\n   6.  Acknowledgments
    . . . . . . . . . . . . . . . . . . . . . . . . 7\n   7.  References  . . . .
    . . . . . . . . . . . . . . . . . . . . . . 7\n     7.1.  Normative References
    \ . . . . . . . . . . . . . . . . . . . 7\n     7.2.  Informative References  .
    . . . . . . . . . . . . . . . . . 7\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   To retrieve or manipulate management information using the
    third\n   version of the Simple Network Management Protocol (SNMPv3) [RFC3410],\n
    \  it is necessary to know the identifier of the remote SNMP protocol\n   engine,
    the so-called snmpEngineID [RFC3411].  While an appropriate\n   snmpEngineID can
    in principle be configured on each management\n   application for each SNMP agent,
    it is often desirable to discover\n   the snmpEngineID automatically.\n   This
    document introduces a discovery mechanism that can be used to\n   learn the snmpEngineID
    of a remote SNMP protocol engine.  The\n   proposed mechanism is independent of
    the features provided by SNMP\n   security models.  The mechanism has been designed
    to coexist with\n   discovery mechanisms that may exist in SNMP security models,
    such as\n   the authoritative engine identifier discovery of the User-based\n
    \  Security Model (USM) of SNMP [RFC3414].\n   This document updates RFC 3411
    [RFC3411] by clarifying the IANA rules\n   for the maintenance of the SnmpEngineID
    format registry.\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
    \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\"
    in this\n   document are to be interpreted as described in RFC 2119 [RFC2119].\n"
  title: 1.  Introduction
- contents:
  - "2.  Background\n   Within an administrative domain, an SNMP engine is uniquely\n
    \  identified by an snmpEngineID value [RFC3411].  An SNMP entity, which\n   consists
    of an SNMP engine and several SNMP applications, may provide\n   access to multiple
    contexts.\n   An SNMP context is a collection of management information accessible\n
    \  by an SNMP entity.  An item of management information may exist in\n   more
    than one context and an SNMP entity potentially has access to\n   many contexts
    [RFC3411].  A context is identified by the snmpEngineID\n   value of the entity
    hosting the management information (also called a\n   contextEngineID) and a context
    name that identifies the specific\n   context (also called a contextName).\n   To
    identify an individual item of management information within an\n   administrative
    domain, a four tuple is used consisting of\n   1.  a contextEngineID,\n   2.  a
    contextName,\n   3.  an object type, and\n   4.  its instance identification.\n
    \  The last two elements are encoded in an object identifier (OID)\n   value.
    \ The contextName is a character string (following the\n   SnmpAdminString textual
    convention of the SNMP-FRAMEWORK-MIB\n   [RFC3411]) while the contextEngineID
    is an octet string constructed\n   according to the rules defined as part of the
    SnmpEngineID textual\n   convention of the SNMP-FRAMEWORK-MIB [RFC3411].\n   The
    SNMP protocol operations and the protocol data units (PDUs)\n   operate on OIDs
    and thus deal with object types and instances\n   [RFC3416].  The SNMP architecture
    [RFC3411] introduces the concept of\n   a scopedPDU as a data structure containing
    a contextEngineID, a\n   contextName, and a PDU.  The SNMP version 3 (SNMPv3)
    message format\n   uses ScopedPDUs to exchange management information [RFC3412].\n
    \  Within the SNMP framework, contextEngineIDs serve as end-to-end\n   identifiers.
    \ This becomes important in situations where SNMP proxies\n   are deployed to
    translate between protocol versions or to cross\n   middleboxes such as network
    address translators.  In addition,\n   snmpEngineIDs separate the identification
    of an SNMP engine from the\n   transport addresses used to communicate with an
    SNMP engine.  This\n   property can be used to correlate management information
    easily, even\n   in situations where multiple different transports were used to\n
    \  retrieve the information or where transport addresses can change\n   dynamically.\n
    \  To retrieve data from an SNMPv3 agent, it is necessary to know the\n   appropriate
    contextEngineID.  The User-based Security Model (USM) of\n   SNMPv3 provides a
    mechanism to discover the snmpEngineID of the\n   remote SNMP engine, since this
    is needed for security processing\n   reasons.  The discovered snmpEngineID can
    subsequently be used as a\n   contextEngineID in a ScopedPDU to access management
    information local\n   to the remote SNMP engine.  Other security models, such
    as the\n   Transport Security Model (TSM) [TSM], lack such a procedure and may\n
    \  use the discovery mechanism defined in this memo.\n"
  title: 2.  Background
- contents:
  - "3.  Procedure\n   The proposed discovery mechanism consists of two parts, namely
    (i)\n   the definition of a special well-known snmpEngineID value, called the\n
    \  localEngineID, which always refers to a local default context, and\n   (ii)
    the definition of a procedure to acquire the snmpEngineID scalar\n   of the SNMP-FRAMEWORK-MIB
    [RFC3411] using the special well-known\n   local localEngineID value.\n"
  - contents:
    - "3.1.  Local EngineID\n   An SNMP command responder implementing this specification
      MUST\n   register their pduTypes using the localEngineID snmpEngineID value\n
      \  (defined below) by invoking the registerContextEngineID() Abstract\n   Service
      Interface (ASI) defined in RFC 3412 [RFC3412].  This\n   registration is done
      in addition to the normal registration under the\n   SNMP engine's snmpEngineID.
      \ This is consistent with the SNMPv3\n   specifications since they explicitly
      allow registration of multiple\n   engineIDs and multiple pduTypes [RFC3412].\n
      \  The SnmpEngineID textual convention [RFC3411] defines that an\n   snmpEngineID
      value MUST be between 5 and 32 octets long.  This\n   specification proposes
      to use the variable length format 3) of the\n   SnmpEngineID textual convention
      and to allocate the reserved, unused\n   format value 6, using the enterprise
      ID 0 for the localEngineID.  An\n   ASN.1 definition for localEngineID would
      look like this:\n               localEngineID OCTET STRING ::= '8000000006'H\n
      \  The localEngineID value always provides access to the default context\n   of
      an SNMP engine.  Note that the localEngineID value is intended to\n   be used
      as a special value for the contextEngineID field in the\n   ScopedPDU.  It MUST
      NOT be used as a value to identify an SNMP\n   engine; that is, this value MUST
      NOT be used in the snmpEngineID.0\n   scalar [RFC3418] or in the msgAuthoritativeEngineID
      field in the\n   securityParameters of the User-based Security Model (USM) [RFC3414].\n"
    title: 3.1.  Local EngineID
  - contents:
    - "3.2.  EngineID Discovery\n   Discovery of the snmpEngineID is done by sending
      a Read Class\n   protocol operation (see Section 2.8 of [RFC3411]) to retrieve
      the\n   snmpEngineID scalar using the localEngineID defined above as a\n   contextEngineID
      value.  Implementations SHOULD only perform this\n   discovery step when it
      is needed.  In particular, if security models\n   are used that already discover
      the remote snmpEngineID (such as USM),\n   then no further discovery is necessary.
      \ The same is true in\n   situations where the application already knows a suitable\n
      \  snmpEngineID value.\n   The procedure to discover the snmpEngineID of a remote
      SNMP engine\n   can be described as follows:\n   1.  Check whether a suitable
      contextEngineID value is already known.\n       If yes, use the provided contextEngineID
      value and stop the\n       discovery procedure.\n   2.  Check whether the selected
      security model supports discovery of\n       the remote snmpEngineID (e.g.,
      USM with its discovery mechanism).\n       If yes, let the security model perform
      the discovery.  If the\n       remote snmpEngineID value has been successfully
      determined,\n       assign it to the contextEngineID and stop the discovery\n
      \      procedure.\n   3.  Send a Read Class operation to the remote SNMP engine
      using the\n       localEngineID value as the contextEngineID in order to retrieve\n
      \      the scalar snmpEngineID.0 of the SNMP-FRAMEWORK-MIB [RFC3411].\n       If
      successful, set the contextEngineID to the retrieved value and\n       stop
      the discovery procedure.\n   4.  Return an error indication that a suitable
      contextEngineID could\n       not be discovered.\n   The procedure outlined
      above is an example and can be modified to\n   retrieve more variables in step
      3, such as the sysObjectID.0 scalar\n   or the snmpSetSerialNo.0 scalar of the
      SNMPv2-MIB [RFC3418].\n"
    title: 3.2.  EngineID Discovery
  title: 3.  Procedure
- contents:
  - "4.  IANA Considerations\n   RFC 3411 requested that IANA create a registry for
    SnmpEngineID\n   formats.  However, RFC 3411 did not ask IANA to record the initial\n
    \  assignments made by RFC 3411 nor did RFC 3411 spell out the precise\n   allocation
    rules.  To address this issue, the following rules are\n   hereby established.\n
    \  IANA maintains a registry for SnmpEngineID formats.  The first four\n   octets
    of an SnmpEngineID carry an enterprise number, while the fifth\n   octet in a
    variable length SnmpEngineID value, called the format\n   octet, indicates how
    the following octets are formed.  The following\n   format values were allocated
    in [RFC3411]:\n     Format    Description                     References\n     -------
    \  -----------                     ----------\n          0    reserved, unused
    \                [RFC3411]\n          1    IPv4 address                     [RFC3411]\n
    \         2    IPv6 address                     [RFC3411]\n          3    MAC
    address                      [RFC3411]\n          4    administratively assigned
    text   [RFC3411]\n          5    administratively assigned octets [RFC3411]\n
    \      6-127   reserved, unused                 [RFC3411]\n     128-255   enterprise
    specific              [RFC3411]\n   IANA can assign new format values out of the
    originally assigned and\n   reserved number space 1-127.  For new assignments
    in this number\n   space, a specification is required as per [RFC5226].  The number\n
    \  space 128-255 is enterprise specific and is not controlled by IANA.\n   Per
    this document, IANA has made the following assignment:\n     Format    Description
    \                    References\n     -------   -----------                     ----------\n
    \         6    local engine                     [RFC5343]\n"
  title: 4.  IANA Considerations
- contents:
  - "5.  Security Considerations\n   SNMP version 3 (SNMPv3) provides cryptographic
    security to protect\n   devices from unauthorized access.  This specification
    recommends use\n   of the security services provided by SNMPv3.  In particular,
    it is\n   RECOMMENDED to protect the discovery exchange.\n   An snmpEngineID can
    contain information such as a device's MAC\n   address, IPv4 address, IPv6 address,
    or administratively assigned\n   text.  An attacker located behind a router /
    firewall / network\n   address translator may not be able to obtain this information\n
    \  directly, and he therefore might discover snmpEngineID values in\n   order
    to obtain this kind of device information.\n   In many environments, making snmpEngineID
    values accessible via a\n   security level of noAuthNoPriv will benefit legitimate
    tools that try\n   to algorithmically determine some basic information about a
    device.\n   For this reason, the default View-based Access Control Model (VACM)\n
    \  configuration in Appendix A of RFC 3415 [RFC3415] gives noAuthNoPriv\n   read
    access to the snmpEngineID.  Furthermore, the USM discovery\n   mechanism defined
    in RFC 3414 [RFC3414] uses unprotected messages and\n   reveals snmpEngineID values.\n
    \  In highly secure environments, snmpEngineID values can be protected\n   by
    using the discovery mechanism described in this document together\n   with a security
    model that does not exchange cleartext SNMP messages,\n   such as the Transport
    Security Model (TSM) [TSM].\n   The isAccessAllowed() abstract service primitive
    of the SNMP access\n   control subsystem does not take the contextEngineID into
    account when\n   checking access rights [RFC3411].  As a consequence, it is not\n
    \  possible to define a special view for context engineID discovery.  A\n   request
    with a localEngineID is thus treated like a request with the\n   correct snmpEngineID
    by the access control subsystem.  This is inline\n   with the SNMPv3 design where
    the authenticated identity is the\n   securityName (together with the securityModel
    and securityLevel\n   information), and transport addresses or knowledge of contextEngineID\n
    \  values do not impact the access-control decision.\n"
  title: 5.  Security Considerations
- contents:
  - "6.  Acknowledgments\n   Dave Perkins suggested the introduction of a \"local\"
    contextEngineID\n   during the interim meeting of the ISMS (Integrated Security
    Model for\n   SNMP) working group in Boston, 2006.  Joe Fernandez, David\n   Harrington,
    Dan Romascanu, and Bert Wijnen provided helpful review\n   and feedback, which
    helped to improve this document.\n"
  title: 6.  Acknowledgments
- contents:
  - '7.  References

    '
  - contents:
    - "7.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use
      in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March
      1997.\n   [RFC3411]  Harrington, D., Presuhn, R., and B. Wijnen, \"An\n              Architecture
      for Describing Simple Network Management\n              Protocol (SNMP) Management
      Frameworks\", STD 62, RFC 3411,\n              December 2002.\n   [RFC3412]
      \ Case, J., Harrington, D., Presuhn, R., and B. Wijnen,\n              \"Message
      Processing and Dispatching for the Simple Network\n              Management
      Protocol (SNMP)\", STD 62, RFC 3412,\n              December 2002.\n   [RFC3414]
      \ Blumenthal, U. and B. Wijnen, \"User-based Security Model\n              (USM)
      for version 3 of the Simple Network Management\n              Protocol (SNMPv3)\",
      STD 62, RFC 3414, December 2002.\n   [RFC3416]  Presuhn, R., \"Version 2 of
      the Protocol Operations for the\n              Simple Network Management Protocol
      (SNMP)\", STD 62,\n              RFC 3416, December 2002.\n   [RFC3418]  Presuhn,
      R., \"Management Information Base (MIB) for the\n              Simple Network
      Management Protocol (SNMP)\", STD 62,\n              RFC 3418, December 2002.\n
      \  [RFC5226]  Narten, T. and H. Alvestrand, \"Guidelines for Writing an\n              IANA
      Considerations Section in RFCs\", BCP 26, RFC 5226,\n              May 2008.\n"
    title: 7.1.  Normative References
  - contents:
    - "7.2.  Informative References\n   [RFC3410]  Case, J., Mundy, R., Partain, D.,
      and B. Stewart,\n              \"Introduction and Applicability Statements for
      Internet-\n              Standard Management Framework\", RFC 3410, December
      2002.\n   [RFC3415]  Wijnen, B., Presuhn, R., and K. McCloghrie, \"View-based\n
      \             Access Control Model (VACM) for the Simple Network\n              Management
      Protocol (SNMP)\", STD 62, RFC 3415,\n              December 2002.\n   [TSM]
      \     Harrington, D., \"Transport Security Model for SNMP\", Work\n              in
      Progress, July 2008.\n"
    title: 7.2.  Informative References
  title: 7.  References
- contents:
  - "Author's Address\n   Juergen Schoenwaelder\n   Jacobs University Bremen\n   Campus
    Ring 1\n   28725 Bremen\n   Germany\n   Phone: +49 421 200-3587\n   EMail: j.schoenwaelder@jacobs-university.de\n"
  title: Author's Address
- contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2008).\n   This document
    is subject to the rights, licenses and restrictions\n   contained in BCP 78, and
    except as set forth therein, the authors\n   retain all their rights.\n   This
    document and the information contained herein are provided on an\n   \"AS IS\"
    basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n   OR IS SPONSORED
    BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE INTERNET ENGINEERING
    TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED, INCLUDING BUT NOT
    LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION HEREIN WILL NOT INFRINGE
    ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR
    PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or
    scope of any\n   Intellectual Property Rights or other rights that might be claimed
    to\n   pertain to the implementation or use of the technology described in\n   this
    document or the extent to which any license under such rights\n   might or might
    not be available; nor does it represent that it has\n   made any independent effort
    to identify any such rights.  Information\n   on the procedures with respect to
    rights in RFC documents can be\n   found in BCP 78 and BCP 79.\n   Copies of IPR
    disclosures made to the IETF Secretariat and any\n   assurances of licenses to
    be made available, or the result of an\n   attempt made to obtain a general license
    or permission for the use of\n   such proprietary rights by implementers or users
    of this\n   specification can be obtained from the IETF on-line IPR repository
    at\n   http://www.ietf.org/ipr.\n   The IETF invites any interested party to bring
    to its attention any\n   copyrights, patents or patent applications, or other
    proprietary\n   rights that may cover technology that may be required to implement\n
    \  this standard.  Please address the information to the IETF at\n   ietf-ipr@ietf.org.\n"
  title: Intellectual Property
