- title: __initial_text__
  contents:
  - '              DISTRIBUTED ELECTRONIC MAIL MODELS IN IMAP4

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  This memo\n   does not specify an Internet standard of any kind.  Distribution\
    \ of\n   this memo is unlimited.\n"
- title: Distributed Electronic Mail Models
  contents:
  - "Distributed Electronic Mail Models\n   There are three fundamental models of\
    \ client/server email: offline,\n   online, and disconnected use.  IMAP4 can be\
    \ used in any one of these\n   three models.\n   The offline model is the most\
    \ familiar form of client/server email\n   today, and is used by protocols such\
    \ as POP-3 (RFC 1225) and UUCP.\n   In this model, a client application periodically\
    \ connects to a\n   server.  It downloads all the pending messages to the client\
    \ machine\n   and deletes these from the server.  Thereafter, all mail processing\n\
    \   is local to the client.  This model is store-and-forward; it moves\n   mail\
    \ on demand from an intermediate server (maildrop) to a single\n   destination\
    \ machine.\n   The online model is most commonly used with remote filesystem\n\
    \   protocols such as NFS.  In this model, a client application\n   manipulates\
    \ mailbox data on a server machine.  A connection to the\n   server is maintained\
    \ throughout the session.  No mailbox data are\n   kept on the client; the client\
    \ retrieves data from the server as is\n   needed.  IMAP4 introduces a form of\
    \ the online model that requires\n   considerably less network bandwidth than\
    \ a remote filesystem\n   protocol, and provides the opportunity for using the\
    \ server for CPU\n   or I/O intensive functions such as parsing and searching.\n\
    \   The disconnected use model is a hybrid of the offline and online\n   models,\
    \ and is used by protocols such as PCMAIL (RFC 1056).  In this\n   model, a client\
    \ user downloads some set of messages from the server,\n   manipulates them offline,\
    \ then at some later time uploads the\n   changes.  The server remains the authoritative\
    \ repository of the\n   messages.  The problems of synchronization (particularly\
    \ when\n   multiple clients are involved) are handled through the means of\n \
    \  unique identifiers for each message.\n   Each of these models have their own\
    \ strengths and weaknesses:\n      Feature                               Offline\
    \ Online  Disc\n      -------                               ------- ------  ----\n\
    \      Can use multiple clients               NO      YES     YES\n      Minimum\
    \ use of server connect time     YES     NO      YES\n      Minimum use of server\
    \ resources        YES     NO      NO\n      Minimum use of client disk resources\
    \   NO      YES     NO\n      Multiple remote mailboxes              NO      YES\
    \     YES\n      Fast startup                           NO      YES     NO\n \
    \     Mail processing when not online        YES     NO      YES\n   Although\
    \ IMAP4 has its origins as a protocol designed to accommodate\n   the online model,\
    \ it can support the other two models as well.  This\n   makes possible the creation\
    \ of clients that can be used in any of the\n   three models.  For example, a\
    \ user may wish to switch between the\n   online and disconnected models on a\
    \ regular basis (e.g. owing to\n   travel).\n   IMAP4 is designed to transmit\
    \ message data on demand, and to provide\n   the facilities necessary for a client\
    \ to decide what data it needs at\n   any particular time.  There is generally\
    \ no need to do a wholesale\n   transfer of an entire mailbox or even of the complete\
    \ text of a\n   message.  This makes a difference in situations where the mailbox\
    \ is\n   large, or when the link to the server is slow.\n   More specifically,\
    \ IMAP4 supports server-based RFC 822 and MIME\n   processing.  With this information,\
    \ it is possible for a client to\n   determine in advance whether it wishes to\
    \ retrieve a particular\n   message or part of a message.  For example, a user\
    \ connected to an\n   IMAP4 server via a dialup link can determine that a message\
    \ has a\n   2000 byte text segment and a 40 megabyte video segment, and elect\
    \ to\n   fetch only the text segment.\n   In IMAP4, the client/server relationship\
    \ lasts only for the duration\n   of the TCP connection.  There is no registration\
    \ of clients.  Except\n   for any unique identifiers used in disconnected use\
    \ operation, the\n   client initially has no knowledge of mailbox state and learns\
    \ it from\n   the IMAP4 server when a mailbox is selected.  This initial transfer\n\
    \   is minimal; the client requests additional state data as it needs.\n   As\
    \ noted above, the choice for the location of mailbox data depends\n   upon the\
    \ model chosen.  The location of message state (e.g. whether\n   or not a message\
    \ has been read or answered) is also determined by the\n   model, and is not necessarily\
    \ the same as the location of the mailbox\n   data.  For example, in the online\
    \ model message state can be co-\n   located with mailbox data; it can also be\
    \ located elsewhere (on the\n   client or on a third agent) using unique identifiers\
    \ to achieve\n   common reference across sessions.  The latter is particularly\
    \ useful\n   with a server that exports public data such as netnews and does not\n\
    \   maintain per-user state.\n   The IMAP4 protocol provides the generality to\
    \ implement these\n   different models.  This is done by means of server and (especially)\n\
    \   client configuration, and not by requiring changes to the protocol or\n  \
    \ the implementation of the protocol.\n"
- title: Security Considerations
  contents:
  - "Security Considerations\n   Security issues are not discussed in this memo.\n"
- title: 'Author''s Address:'
  contents:
  - "Author's Address:\n   Mark R. Crispin\n   Networks and Distributed Computing,\
    \ JE-30\n   University of Washington\n   Seattle, WA  98195\n   Phone: (206) 543-5762\n\
    \   EMail: MRC@CAC.Washington.EDU\n"
