- title: __initial_text__
  contents:
  - '                    TELNET Authentication Using DSA

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2000).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document defines a telnet authentication mechanism using the\n\
    \   Digital Signature Algorithm (DSA) [FIPS186].  It relies on the Telnet\n  \
    \ Authentication Option [RFC2941].\n"
- title: 1. Command Names and Codes
  contents:
  - "1. Command Names and Codes\n    AUTHENTICATION           37\n      Authentication\
    \ Commands:\n        IS                       0\n        SEND                \
    \     1\n        REPLY                    2\n        NAME                    \
    \ 3\n      Authentication Types:\n        DSS                     14\n      Modifiers:\n\
    \        AUTH_WHO_MASK            1\n        AUTH_CLIENT_TO_SERVER    0\n    \
    \    AUTH_SERVER_TO CLIENT    1\n        AUTH_HOW_MASK            2\n        AUTH_HOW_ONE_WAY\
    \         0\n        AUTH_HOW_MUTUAL          2\n        ENCRYPT_MASK        \
    \    20\n        ENCRYPT_OFF              0\n        ENCRYPT_USING_TELOPT    \
    \ 4\n        ENCRYPT_AFTER_EXCHANGE  16\n        ENCRYPT_RESERVED        20\n\
    \        INI_CRED_FWD_MASK        8\n        INI_CRED_FWD_OFF         0\n    \
    \    INI_CRED_FWD_ON          8\n      Sub-option Commands:\n        DSS_INITIALIZE\
    \           1\n        DSS_TOKENBA              2\n        DSS_CERTA_TOKENAB \
    \       3\n        DSS_CERTB_TOKENBA2       4\n"
- title: 2. TELNET Security Extensions
  contents:
  - "2. TELNET Security Extensions\n   TELNET, as a protocol, has no concept of security.\
    \  Without\n   negotiated options, it merely passes characters back and forth\n\
    \   between the NVTs represented by the two TELNET processes.  In its\n   most\
    \ common usage as a protocol for remote terminal access (TCP port\n   23), TELNET\
    \ connects to a server that requires user-level\n   authentication through a user\
    \ name and password in the clear; the\n   server does not authenticate itself\
    \ to the user.\n   The TELNET Authentication Option provides for user authentication\
    \ and\n   server authentication.  User authentication replaces or augments the\n\
    \   normal host password mechanism.  Server authentication is normally\n   done\
    \ in conjunction with user authentication.\n   In order to support these security\
    \ services, the two TELNET entities\n   must first negotiate their willingness\
    \ to support the TELNET\n   Authentication Option.  Upon agreeing to support this\
    \ option, the\n   parties are then able to perform sub-option negotiations to\
    \ the\n   authentication protocol to be used, and possibly the remote user name\n\
    \   to be used for authorization checking.\n   Authentication and parameter negotiation\
    \ occur within an unbounded\n   series of exchanges.  The server proposes a preference-ordered\
    \ list\n   of authentication types (mechanisms) which it supports.  In addition\n\
    \   to listing the mechanisms it supports, the server qualifies each\n   mechanism\
    \ with a modifier that specifies whether the authentication\n   is to be one-way\
    \ or mutual, and in which direction the authentication\n   is to be performed.\
    \  The client selects one mechanism from the list\n   and responds to the server\
    \ indicating its choice and the first set of\n   authentication data needed for\
    \ the selected authentication type.  The\n   server and the client then proceed\
    \ through whatever number of\n   iterations are required to arrive at the requested\
    \ authentication.\n"
- title: 3. Use of Digital Signature Algorithm (DSA)
  contents:
  - "3. Use of Digital Signature Algorithm (DSA)\n   DSA is also known as the Digital\
    \ Signature Standard (DSS), and the\n   names are used interchangeably.  This\
    \ paper specifies a method in\n   which DSA may be used to achieve certain security\
    \ services when used\n   in conjunction with the TELNET Authentication Option.\
    \  SHA-1\n   [FIPS180-1] is used with DSA [FIPS186].\n   DSA may provide either\
    \ unilateral or mutual authentication.  Due to\n   TELNET's character-by-character\
    \ nature, it is not well-suited to the\n   application of integrity-only services,\
    \ therefore use of the DSA\n   profile provides authentication but it does not\
    \ provide session\n   integrity.  This specification follows the token and exchanges\n\
    \   defined in NIST FIPS PUB 196 [FIPS196], Standard for Public Key\n   Cryptographic\
    \ Entity Authentication Mechanisms including Appendix A\n   on ASN.1 encoding\
    \ of messages and tokens.  All data that is covered\n   by a digital signature\
    \ must be encoded using the Distinguished\n   Encoding Rules (DER).  However,\
    \ other data may use either the Basic\n   Encoding Rules (BER) or DER [X.208].\n"
- title: 3.1.  Unilateral Authentication with DSA
  contents:
  - "3.1.  Unilateral Authentication with DSA\n   Unilateral authentication must be\
    \ done client-to-server.  What\n   follows are the protocol steps necessary to\
    \ perform DSA\n   authentication as specified in FIPS PUB 196 under the TELNET\n\
    \   Authentication Option framework.  Where failure modes are\n   encountered,\
    \ the return codes follow those specified in the TELNET\n   Authentication Option.\
    \  They are not enumerated here, as they are\n   invariant among the mechanisms\
    \ used.  FIPS PUB 196 employs a set of\n   exchanges that are transferred to provide\
    \ authentication.  Each\n   exchange employs various fields and tokens, some of\
    \ which are\n   optional.  In addition, each token has several subfields that\
    \ are\n   optional.  A conformant subset of the fields and subfields have been\n\
    \   selected.  The tokens are ASN.1 encoded as defined in Appendix A of\n   FIPS\
    \ PUB 196, and each token is named to indicate the direction in\n   which it flows\
    \ (e.g., TokenBA flows from Party B to Party A).  All\n   data that is covered\
    \ by a digital signature must be encoded using the\n   Distinguished Encoding\
    \ Rules (DER).  Data that is not covered by a\n   digital signature may use either\
    \ the Basic Encoding Rules (BER) or\n   DER [X.208].  Figure 1 illustrates the\
    \ exchanges for unilateral\n   authentication.\n   During authentication, the\
    \ client may provide the user name to the\n   server by using the authentication\
    \ name sub-option.  If the name\n   sub-option is not used, the server will generally\
    \ prompt for a name\n   and password in the clear.  The name sub-option must be\
    \ sent after\n   the server sends the list of authentication types supported and\n\
    \   before the client finishes the authentication exchange, this ensures\n   that\
    \ the server will not prompt for a user name and password.  In\n   figure 1, the\
    \ name sub-option is sent immediately after the server\n   presents the list of\
    \ authentication types supported.\n   For one-way DSS authentication, the two-octet\
    \ authentication type\n   pair is DSS AUTH_CLIENT_TO_SERVER | AUTH_HOW_ONE_WAY\
    \ | ENCRYPT_OFF |\n   INI_CRED_FWD_OFF.  This indicates that the DSS authentication\n\
    \   mechanism will be used to authenticate the client to the server and\n   that\
    \ no encryption will be performed.\n   CertA is the clients certificate.  Both\
    \ certificates are X.509\n   certificates that contain DSS public keys[RFC2459].\
    \  The client must\n   validate the server's certificate before using the DSA\
    \ public key it\n   contains.\n   Within the unbounded authentication exchange,\
    \ implementation is\n   greatly simplified if each portion of the exchange carries\
    \ a unique\n   identifier.  For this reason, a single octet sub-option identifier\
    \ is\n   carried immediately after the two-octet authentication type pair.\n \
    \  The exchanges detailed in Figure 1 below presume knowledge of FIPS\n   PUB\
    \ 196 and the TELNET Authentication Option.  The client is Party A,\n   while\
    \ the server is Party B.  At the end of the exchanges, the client\n   is authenticated\
    \ to the server.\n"
- title: '------------------------------------------------------------------'
  contents:
  - "------------------------------------------------------------------\n Client (Party\
    \ A)                   Server (Party B)\n                                 <--\
    \ IAC DO AUTHENTICATION\n IAC WILL AUTHENTICATION     -->\n                  \
    \               <-- IAC SB AUTHENTICATION SEND\n                             \
    \        <list of authentication options>\n                                  \
    \   IAC SE\n IAC SB AUTHENTICATION\n NAME <user name>            -->\n IAC SB\
    \ AUTHENTICATION IS\n DSS\n AUTH_CLIENT_TO_SERVER |\n     AUTH_HOW_ONE_WAY |\n\
    \     ENCRYPT_OFF |\n     INI_CRED_FWD_OFF\n DSS_INITIALIZE\n IAC SE         \
    \            -->\n                                 <-- IAC SB AUTHENTICATION REPLY\n\
    \                                     DSS\n                                  \
    \   AUTH_CLIENT_TO_SERVER |\n                                         AUTH_HOW_ONE_WAY\
    \ |\n                                         ENCRYPT_OFF |\n                \
    \                         INI_CRED_FWD_OFF\n                                 \
    \    DSS_TOKENBA\n                                     Sequence( TokenID, TokenBA\
    \ )\n                                     IAC SE\n IAC SB AUTHENTICATION IS\n\
    \ DSS\n AUTH_CLIENT_TO_SERVER |\n     AUTH_HOW_ONE_WAY |\n     ENCRYPT_OFF |\n\
    \     INI_CRED_FWD_OFF\n DSS_CERTA_TOKENAB\n Sequence( TokenID, CertA, TokenAB\
    \ )\n IAC SE                     -->\n"
- title: '------------------------------------------------------------------'
  contents:
  - "------------------------------------------------------------------\n        \
    \                      Figure 1\n"
- title: 3.2.  Mutual Authentication with DSA
  contents:
  - "3.2.  Mutual Authentication with DSA\n   Mutual authentication is slightly more\
    \ complex.  Figure 2 illustrates\n   the exchanges.\n   For mutual DSS authentication,\
    \ the two-octet authentication type pair\n   is DSS AUTH_CLIENT_TO_SERVER | AUTH_HOW_MUTUAL\
    \ | ENCRYPT_OFF |\n   INI_CRED_FWD_OFF.  This indicates that the DSS authentication\n\
    \   mechanism will be used to mutually authenticate the client and the\n   server\
    \ and that no encryption will be performed.\n"
- title: '---------------------------------------------------------------------'
  contents:
  - "---------------------------------------------------------------------\n Client\
    \ (Party A)                   Server (Party B)\n"
- title: IAC WILL AUTHENTICATION        -->
  contents:
  - "IAC WILL AUTHENTICATION        -->\n                                    <-- IAC\
    \ DO AUTHENTICATION\n                                    <-- IAC SB AUTHENTICATION\
    \ SEND\n                                        <list of authentication options>\n\
    \                                        IAC SE\n IAC SB AUTHENTICATION\n NAME\
    \ <user name>              -->\n IAC SB AUTHENTICATION IS\n DSS\n AUTH_CLIENT_TO_SERVER\
    \ |\n     AUTH_HOW_MUTUAL |\n     ENCRYPT_OFF |\n     INI_CRED_FWD_OFF\n DSS_INITIALIZE\n\
    \ IAC SE                        -->\n                                    <-- IAC\
    \ SB AUTHENTICATION REPLY\n                                        DSS\n     \
    \                                   AUTH_CLIENT_TO_SERVER |\n                \
    \                            AUTH_HOW_MUTUAL |\n                             \
    \               ENCRYPT_OFF |\n                                            INI_CRED_FWD_OFF\n\
    \                                        DSS_TOKENBA\n                       \
    \                 Sequence( TokenID, TokenBA )\n                             \
    \           IAC SE\n Client (Party A)                   Server (Party B)\n IAC\
    \ SB AUTHENTICATION IS\n DSS\n AUTH_CLIENT_TO_SERVER |\n     AUTH_HOW_MUTUAL |\n\
    \     ENCRYPT_OFF |\n     INI_CRED_FWD_OFF\n DSS_CERTA_TOKENAB\n Sequence( TokenID,\
    \ CertA, TokenAB )\n IAC SE                        -->\n                     \
    \               <-- IAC SB AUTHENTICATION REPLY\n                            \
    \            DSS\n                                        AUTH_CLIENT_TO_SERVER\
    \ |\n                                            AUTH_HOW_MUTUAL |\n         \
    \                                   ENCRYPT_OFF |\n                          \
    \                  INI_CRED_FWD_OFF\n                                        DSS_CERTB_TOKENBA2\n\
    \                                        Sequence( TokenID, CertB,\n         \
    \                                         TokenBA2 )\n                       \
    \                 IAC SE\n"
- title: '---------------------------------------------------------------------'
  contents:
  - "---------------------------------------------------------------------\n     \
    \                         Figure 2\n"
- title: 4.  ASN.1 Syntax
  contents:
  - "4.  ASN.1 Syntax\n   As stated earlier, a conformant subset of the defined fields\
    \ and\n   subfields from FIPS PUB 196 have been selected.  This section\n   provides\
    \ the ASN.1 syntax for that conformant subset.\n   Figure 1 and Figure 2 include\
    \ representations of the structures\n   defined in this section.  Implementors\
    \ should refer to the following\n   table to determine the ASN.1 definitions that\
    \ match the figure\n   references:\n      Figure 1   Sequence( TokenID, TokenBA\
    \ )           MessageBA\n                 Sequence( TokenID, CertA, TokenAB )\
    \    MessageAB\n      Figure 2   Sequence( TokenID, TokenBA )           MessageBA\n\
    \                 Sequence( TokenID, CertA, TokenAB )    MessageAB\n         \
    \        Sequence( TokenID, CertB, TokenBA2 )   MessageBA2\n   The following ASN.1\
    \ definitions specify the conformant subset of FIPS\n   196.  For simplicity,\
    \ no optional fields or subfields are included.\n   The ASN.1 definition for CertificationPath\
    \ is imported from CCITT\n   Recommendation X.509 [X.509], and The ASN.1 definition\
    \ for Name is\n   imported from CCITT Recommendation X.501 [X.501].  These ASN.1\n\
    \   definitions are not repeated here.  All DSA signature values are\n   encoded\
    \ as a sequence of two integers, employing the same conventions\n   specified\
    \ in RFC 2459, section 7.2.2.\n      MessageBA  ::=  SEQUENCE  {\n        tokenId\
    \       [0] TokenId,\n        tokenBA           TokenBA  }\n      TokenBA  ::=\
    \  SEQUENCE  {\n        ranB              RandomNumber,\n        timestampB  \
    \      TimeStamp  }\n      MessageAB  ::=  SEQUENCE  {\n        tokenId      \
    \ [0] TokenId,\n        certA         [1] CertData,\n        tokenAB         \
    \  TokenAB  }\n      TokenAB  ::=  SEQUENCE  {\n        ranA              RandomNumber,\n\
    \        ranB              RandomNumber,\n        entityB           EntityName,\n\
    \        timestampB        TimeStamp,\n        absigValue        OCTET STRING\
    \  }\n      MessageBA2  ::=  SEQUENCE  {\n        tokenId       [0] TokenId,\n\
    \        certB         [1] CertData,\n        tokenBA2          TokenBA2  }\n\
    \      TokenBA2  ::=  SEQUENCE  {\n        ranB          [0] RandomNumber,\n \
    \       ranA          [1] RandomNumber,\n        entityA           EntityName,\n\
    \        timestampB2       TimeStamp,\n        ba2sigValue       OCTET STRING\
    \  }\n      CertData  ::=  SEQUENCE  {\n        certPath      [0] CertificationPath\
    \  }  -- see X.509\n      EntityName  ::=  SEQUENCE OF CHOICE  {    -- only allow\
    \ one!\n        directoryName [4] Name  }               -- see X.501\n      RandomNumber\
    \  ::=  INTEGER                -- 20 octets\n      TokenId  ::=  SEQUENCE  {\n\
    \        tokenType         INTEGER,              -- see table below\n        protoVerNo\
    \        INTEGER  }            -- always 0x0001\n      TimeStamp  ::=  GeneralizedTime\n\
    \   The TokenId.TokenType is used to distinguish the message type and the\n  \
    \ authentication type (either unilateral or mutual).  The following\n   table\
    \ provides the values needed to implement this specification:\n      Message Type\
    \    Authentication Type     TokenId.TokenType\n        MessageBA       Unilateral\
    \              0x0001\n                        Mutual                  0x0011\n\
    \        MessageAB       Unilateral              0x0002\n                    \
    \    Mutual                  0x0012\n        MessageBA       Mutual          \
    \        0x0013\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   This entire memo is about security mechanisms.\
    \  For DSA to provide\n   the authentication discussed, the implementation must\
    \ protect the\n   private key from disclosure.\n   Implementations must randomly\
    \ generate DSS private keys, 'k' values\n   used in DSS signatures, and nonces.\
    \  The use of inadequate pseudo-\n   random number generators (PRNGs) to generate\
    \ cryptographic values can\n   result in little or no security.  An attacker may\
    \ find it much easier\n   to reproduce the PRNG environment that produced the\
    \ values, searching\n   the resulting small set of possibilities, rather than\
    \ using a brute\n   force search.  The generation of quality random numbers is\
    \ difficult.\n   RFC 1750 [RFC1750] offers important guidance in this area, and\n\
    \   Appendix 3 of FIPS PUB 186 [FIPS186] provides one quality PRNG\n   technique.\n"
- title: 6.  Acknowledgements
  contents:
  - "6.  Acknowledgements\n   We would like to thank William Nace for support during\
    \ implementation\n   of this specification.\n"
- title: 7. IANA Considerations
  contents:
  - "7. IANA Considerations\n   The authentication type DSS and its associated suboption\
    \ values are\n   registered with IANA.  Any suboption values used to extend the\n\
    \   protocol as described in this document must be registered with IANA\n   before\
    \ use.  IANA is instructed not to issue new suboption values\n   without submission\
    \ of documentation of their use.\n"
- title: 8.  References
  contents:
  - "8.  References\n   FIPS180-1 Secure Hash Standard. FIPS Pub 180-1. April 17,\
    \ 1995.\n             <http://csrc.nist.gov/fips/fips180-1.pdf>\n   FIPS186  \
    \ Digital Signature Standard (DSS). FIPS Pub 186.  May 19,\n             1994.\
    \ <http://csrc.nist.gov/fips/fips186.pdf>\n   FIPS196   Standard for Entity Authentication\
    \ Using Public Key\n             Cryptography.  FIPS Pub 196. February 18, 1997.\n\
    \             <http://csrc.nist.gov/fips/fips196.pdf>\n   RFC1750   Eastlake,\
    \ 3rd, D., Crocker, S. and J. Schiller, \"Randomness\n             Recommendations\
    \ for Security\", RFC 1750, December 1994.\n   RFC2459   Housley, R., Ford, W.,\
    \ Polk, W. and D. Solo, \"Internet\n             X.509 Public Key Infrastructure:\
    \ X.509 Certificate and CRL\n             Profile\", RFC 2459, January 1999.\n\
    \   RFC2941   T'so, T. and J. Altman, \"Telnet Authentication Option\", RFC\n\
    \             2941, September 2000.\n   X.208     CCITT.  Recommendation X.208:\
    \ Specification of Abstract\n             Syntax Notation One (ASN.1).  1988.\n\
    \   X.501     CCITT. Recommendation X.501: The Directory - Models. 1988.\n   X.509\
    \     CCITT.  Recommendation X.509: The Directory -\n             Authentication\
    \ Framework.  1988.\n"
- title: 9.  Authors' Addresses
  contents:
  - "9.  Authors' Addresses\n   Russell Housley\n   SPYRUS\n   381 Elden Street, Suite\
    \ 1120\n   Herndon, VA 20172\n   USA\n   EMail: housley@spyrus.com\n   Todd Horting\n\
    \   SPYRUS\n   381 Elden Street, Suite 1120\n   Herndon, VA 20172\n   USA\n  \
    \ EMail: thorting@spyrus.com\n   Peter Yee\n   SPYRUS\n   5303 Betsy Ross Drive\n\
    \   Santa Clara, CA 95054\n   USA\n   EMail: yee@spyrus.com\n"
- title: 10.  Full Copyright Statement
  contents:
  - "10.  Full Copyright Statement\n   Copyright (C) The Internet Society (2000).\
    \  All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
