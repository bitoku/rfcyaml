- title: __initial_text__
  contents:
  - "                  YANG - A Data Modeling Language for\n              the Network\
    \ Configuration Protocol (NETCONF)\n"
- title: Abstract
  contents:
  - "Abstract\n   YANG is a data modeling language used to model configuration and\n\
    \   state data manipulated by the Network Configuration Protocol\n   (NETCONF),\
    \ NETCONF remote procedure calls, and NETCONF notifications.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6020.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2010 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n   This document\
    \ may contain material from IETF Documents or IETF\n   Contributions published\
    \ or made publicly available before November\n   10, 2008.  The person(s) controlling\
    \ the copyright in some of this\n   material may not have granted the IETF Trust\
    \ the right to allow\n   modifications of such material outside the IETF Standards\
    \ Process.\n   Without obtaining an adequate license from the person(s) controlling\n\
    \   the copyright in such materials, this document may not be modified\n   outside\
    \ the IETF Standards Process, and derivative works of it may\n   not be created\
    \ outside the IETF Standards Process, except to format\n   it for publication\
    \ as an RFC or to translate it into languages other\n   than English.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................8\n\
    \   2. Keywords ........................................................8\n  \
    \ 3. Terminology .....................................................8\n    \
    \  3.1. Mandatory Nodes ...........................................10\n   4. YANG\
    \ Overview ..................................................11\n      4.1. Functional\
    \ Overview .......................................11\n      4.2. Language Overview\
    \ .........................................13\n           4.2.1. Modules and Submodules\
    \ .............................13\n           4.2.2. Data Modeling Basics ...............................13\n\
    \           4.2.3. State Data .........................................18\n  \
    \         4.2.4. Built-In Types .....................................18\n    \
    \       4.2.5. Derived Types (typedef) ............................19\n      \
    \     4.2.6. Reusable Node Groups (grouping) ....................20\n        \
    \   4.2.7. Choices ............................................21\n          \
    \ 4.2.8. Extending Data Models (augment) ....................22\n           4.2.9.\
    \ RPC Definitions ....................................23\n           4.2.10. Notification\
    \ Definitions ..........................24\n   5. Language Concepts ..............................................25\n\
    \      5.1. Modules and Submodules ....................................25\n  \
    \         5.1.1. Import and Include by Revision .....................26\n    \
    \       5.1.2. Module Hierarchies .................................27\n      5.2.\
    \ File Layout ...............................................28\n      5.3. XML\
    \ Namespaces ............................................29\n           5.3.1.\
    \ YANG XML Namespace .................................29\n      5.4. Resolving\
    \ Grouping, Type, and Identity Names ..............29\n      5.5. Nested Typedefs\
    \ and Groupings .............................29\n      5.6. Conformance ...............................................30\n\
    \           5.6.1. Basic Behavior .....................................31\n  \
    \         5.6.2. Optional Features ..................................31\n    \
    \       5.6.3. Deviations .........................................31\n      \
    \     5.6.4. Announcing Conformance Information in the\n                  <hello>\
    \ Message ....................................32\n      5.7. Data Store Modification\
    \ ...................................34\n   6. YANG Syntax ....................................................34\n\
    \      6.1. Lexical Tokenization ......................................34\n  \
    \         6.1.1. Comments ...........................................34\n    \
    \       6.1.2. Tokens .............................................34\n      \
    \     6.1.3. Quoting ............................................35\n      6.2.\
    \ Identifiers ...............................................36\n           6.2.1.\
    \ Identifiers and Their Namespaces ...................36\n      6.3. Statements\
    \ ................................................37\n           6.3.1. Language\
    \ Extensions ................................37\n      6.4. XPath Evaluations\
    \ .........................................38\n           6.4.1. XPath Context\
    \ ......................................38\n      6.5. Schema Node Identifier\
    \ ....................................39\n   7. YANG Statements ................................................39\n\
    \      7.1. The module Statement ......................................39\n  \
    \         7.1.1. The module's Substatements .........................41\n    \
    \       7.1.2. The yang-version Statement .........................41\n      \
    \     7.1.3. The namespace Statement ............................42\n        \
    \   7.1.4. The prefix Statement ...............................42\n          \
    \ 7.1.5. The import Statement ...............................42\n           7.1.6.\
    \ The include Statement ..............................43\n           7.1.7. The\
    \ organization Statement .........................44\n           7.1.8. The contact\
    \ Statement ..............................44\n           7.1.9. The revision Statement\
    \ .............................44\n           7.1.10. Usage Example .....................................45\n\
    \      7.2. The submodule Statement ...................................46\n  \
    \         7.2.1. The submodule's Substatements ......................48\n    \
    \       7.2.2. The belongs-to Statement ...........................48\n      \
    \     7.2.3. Usage Example ......................................49\n      7.3.\
    \ The typedef Statement .....................................49\n           7.3.1.\
    \ The typedef's Substatements ........................50\n           7.3.2. The\
    \ typedef's type Statement .......................50\n           7.3.3. The units\
    \ Statement ................................50\n           7.3.4. The typedef's\
    \ default Statement ....................50\n           7.3.5. Usage Example ......................................51\n\
    \      7.4. The type Statement ........................................51\n  \
    \         7.4.1. The type's Substatements ...........................51\n    \
    \  7.5. The container Statement ...................................51\n      \
    \     7.5.1. Containers with Presence ...........................52\n        \
    \   7.5.2. The container's Substatements ......................53\n          \
    \ 7.5.3. The must Statement .................................53\n           7.5.4.\
    \ The must's Substatements ...........................55\n           7.5.5. The\
    \ presence Statement .............................56\n           7.5.6. The container's\
    \ Child Node Statements ..............56\n           7.5.7. XML Mapping Rules\
    \ ..................................56\n           7.5.8. NETCONF <edit-config>\
    \ Operations ...................56\n           7.5.9. Usage Example ......................................57\n\
    \      7.6. The leaf Statement ........................................58\n  \
    \         7.6.1. The leaf's default value ...........................58\n    \
    \       7.6.2. The leaf's Substatements ...........................59\n      \
    \     7.6.3. The leaf's type Statement ..........................59\n        \
    \   7.6.4. The leaf's default Statement .......................59\n          \
    \ 7.6.5. The leaf's mandatory Statement .....................60\n           7.6.6.\
    \ XML Mapping Rules ..................................60\n           7.6.7. NETCONF\
    \ <edit-config> Operations ...................60\n           7.6.8. Usage Example\
    \ ......................................61\n      7.7. The leaf-list Statement\
    \ ...................................62\n           7.7.1. Ordering ...........................................62\n\
    \           7.7.2. The leaf-list's Substatements ......................63\n  \
    \         7.7.3. The min-elements Statement .........................63\n    \
    \       7.7.4. The max-elements Statement .........................63\n      \
    \     7.7.5. The ordered-by Statement ...........................64\n        \
    \   7.7.6. XML Mapping Rules ..................................64\n          \
    \ 7.7.7. NETCONF <edit-config> Operations ...................65\n           7.7.8.\
    \ Usage Example ......................................66\n      7.8. The list\
    \ Statement ........................................67\n           7.8.1. The\
    \ list's Substatements ...........................68\n           7.8.2. The list's\
    \ key Statement ...........................68\n           7.8.3. The list's unique\
    \ Statement ........................69\n           7.8.4. The list's Child Node\
    \ Statements ...................70\n           7.8.5. XML Mapping Rules ..................................70\n\
    \           7.8.6. NETCONF <edit-config> Operations ...................71\n  \
    \         7.8.7. Usage Example ......................................72\n    \
    \  7.9. The choice Statement ......................................75\n      \
    \     7.9.1. The choice's Substatements .........................76\n        \
    \   7.9.2. The choice's case Statement ........................76\n          \
    \ 7.9.3. The choice's default Statement .....................77\n           7.9.4.\
    \ The choice's mandatory Statement ...................79\n           7.9.5. XML\
    \ Mapping Rules ..................................79\n           7.9.6. NETCONF\
    \ <edit-config> Operations ...................79\n           7.9.7. Usage Example\
    \ ......................................79\n      7.10. The anyxml Statement .....................................80\n\
    \           7.10.1. The anyxml's Substatements ........................81\n  \
    \         7.10.2. XML Mapping Rules .................................81\n    \
    \       7.10.3. NETCONF <edit-config> Operations ..................81\n      \
    \     7.10.4. Usage Example .....................................82\n      7.11.\
    \ The grouping Statement ...................................82\n           7.11.1.\
    \ The grouping's Substatements ......................83\n           7.11.2. Usage\
    \ Example .....................................84\n      7.12. The uses Statement\
    \ .......................................84\n           7.12.1. The uses's Substatements\
    \ ..........................85\n           7.12.2. The refine Statement ..............................85\n\
    \           7.12.3. XML Mapping Rules .................................86\n  \
    \         7.12.4. Usage Example .....................................86\n    \
    \  7.13. The rpc Statement ........................................87\n      \
    \     7.13.1. The rpc's Substatements ...........................88\n        \
    \   7.13.2. The input Statement ...............................88\n          \
    \ 7.13.3. The output Statement ..............................89\n           7.13.4.\
    \ XML Mapping Rules .................................90\n           7.13.5. Usage\
    \ Example .....................................91\n      7.14. The notification\
    \ Statement ...............................91\n           7.14.1. The notification's\
    \ Substatements ..................92\n           7.14.2. XML Mapping Rules .................................92\n\
    \           7.14.3. Usage Example .....................................93\n  \
    \    7.15. The augment Statement ....................................93\n    \
    \       7.15.1. The augment's Substatements .......................94\n      \
    \     7.15.2. XML Mapping Rules .................................94\n        \
    \   7.15.3. Usage Example .....................................95\n      7.16.\
    \ The identity Statement ...................................97\n           7.16.1.\
    \ The identity's Substatements ......................97\n           7.16.2. The\
    \ base Statement ................................97\n           7.16.3. Usage\
    \ Example .....................................98\n      7.17. The extension Statement\
    \ ..................................98\n           7.17.1. The extension's Substatements\
    \ .....................99\n           7.17.2. The argument Statement ............................99\n\
    \           7.17.3. Usage Example ....................................100\n  \
    \    7.18. Conformance-Related Statements ..........................100\n    \
    \       7.18.1. The feature Statement ............................100\n      \
    \     7.18.2. The if-feature Statement .........................102\n        \
    \   7.18.3. The deviation Statement ..........................102\n      7.19.\
    \ Common Statements .......................................105\n           7.19.1.\
    \ The config Statement .............................105\n           7.19.2. The\
    \ status Statement .............................105\n           7.19.3. The description\
    \ Statement ........................106\n           7.19.4. The reference Statement\
    \ ..........................106\n           7.19.5. The when Statement ...............................107\n\
    \   8. Constraints ...................................................108\n  \
    \    8.1. Constraints on Data ......................................108\n    \
    \  8.2. Hierarchy of Constraints .................................109\n      8.3.\
    \ Constraint Enforcement Model .............................109\n           8.3.1.\
    \ Payload Parsing ...................................109\n           8.3.2. NETCONF\
    \ <edit-config> Processing ..................110\n           8.3.3. Validation\
    \ ........................................111\n   9. Built-In Types ................................................111\n\
    \      9.1. Canonical Representation .................................112\n  \
    \    9.2. The Integer Built-In Types ...............................112\n    \
    \       9.2.1. Lexical Representation ............................113\n      \
    \     9.2.2. Canonical Form ....................................114\n        \
    \   9.2.3. Restrictions ......................................114\n          \
    \ 9.2.4. The range Statement ...............................114\n           9.2.5.\
    \ Usage Example .....................................115\n      9.3. The decimal64\
    \ Built-In Type ..............................115\n           9.3.1. Lexical Representation\
    \ ............................115\n           9.3.2. Canonical Form ....................................115\n\
    \           9.3.3. Restrictions ......................................116\n  \
    \         9.3.4. The fraction-digits Statement .....................116\n    \
    \       9.3.5. Usage Example .....................................117\n      9.4.\
    \ The string Built-In Type .................................117\n           9.4.1.\
    \ Lexical Representation ............................117\n           9.4.2. Canonical\
    \ Form ....................................117\n           9.4.3. Restrictions\
    \ ......................................117\n           9.4.4. The length Statement\
    \ ..............................117\n           9.4.5. Usage Example .....................................118\n\
    \           9.4.6. The pattern Statement .............................119\n  \
    \         9.4.7. Usage Example .....................................119\n    \
    \  9.5. The boolean Built-In Type ................................120\n      \
    \     9.5.1. Lexical Representation ............................120\n        \
    \   9.5.2. Canonical Form ....................................120\n          \
    \ 9.5.3. Restrictions ......................................120\n      9.6. The\
    \ enumeration Built-In Type ............................120\n           9.6.1.\
    \ Lexical Representation ............................120\n           9.6.2. Canonical\
    \ Form ....................................120\n           9.6.3. Restrictions\
    \ ......................................120\n           9.6.4. The enum Statement\
    \ ................................120\n           9.6.5. Usage Example .....................................121\n\
    \      9.7. The bits Built-In Type ...................................122\n  \
    \         9.7.1. Restrictions ......................................122\n    \
    \       9.7.2. Lexical Representation ............................122\n      \
    \     9.7.3. Canonical Form ....................................122\n        \
    \   9.7.4. The bit Statement .................................122\n          \
    \ 9.7.5. Usage Example .....................................123\n      9.8. The\
    \ binary Built-In Type .................................123\n           9.8.1.\
    \ Restrictions ......................................124\n           9.8.2. Lexical\
    \ Representation ............................124\n           9.8.3. Canonical\
    \ Form ....................................124\n      9.9. The leafref Built-In\
    \ Type ................................124\n           9.9.1. Restrictions ......................................124\n\
    \           9.9.2. The path Statement ................................124\n  \
    \         9.9.3. Lexical Representation ............................125\n    \
    \       9.9.4. Canonical Form ....................................125\n      \
    \     9.9.5. Usage Example .....................................126\n      9.10.\
    \ The identityref Built-In Type ...........................129\n           9.10.1.\
    \ Restrictions .....................................129\n           9.10.2. The\
    \ identityref's base Statement .................129\n           9.10.3. Lexical\
    \ Representation ...........................130\n           9.10.4. Canonical\
    \ Form ...................................130\n           9.10.5. Usage Example\
    \ ....................................130\n      9.11. The empty Built-In Type\
    \ .................................131\n           9.11.1. Restrictions .....................................131\n\
    \           9.11.2. Lexical Representation ...........................131\n  \
    \         9.11.3. Canonical Form ...................................131\n    \
    \       9.11.4. Usage Example ....................................131\n      9.12.\
    \ The union Built-In Type .................................132\n           9.12.1.\
    \ Restrictions .....................................132\n           9.12.2. Lexical\
    \ Representation ...........................132\n           9.12.3. Canonical\
    \ Form ...................................133\n      9.13. The instance-identifier\
    \ Built-In Type ...................133\n           9.13.1. Restrictions .....................................134\n\
    \           9.13.2. The require-instance Statement ...................134\n  \
    \         9.13.3. Lexical Representation ...........................134\n    \
    \       9.13.4. Canonical Form ...................................134\n      \
    \     9.13.5. Usage Example ....................................134\n   10. Updating\
    \ a Module ............................................135\n   11. YIN ..........................................................137\n\
    \      11.1. Formal YIN Definition ...................................137\n  \
    \         11.1.1. Usage Example ....................................141\n   12.\
    \ YANG ABNF Grammar ............................................143\n   13. Error\
    \ Responses for YANG Related Errors ......................165\n      13.1. Error\
    \ Message for Data That Violates a unique\n            Statement ...............................................165\n\
    \      13.2. Error Message for Data That Violates a\n            max-elements\
    \ Statement ..................................165\n      13.3. Error Message for\
    \ Data That Violates a\n            min-elements Statement ..................................165\n\
    \      13.4. Error Message for Data That Violates a must Statement ...166\n  \
    \    13.5. Error Message for Data That Violates a\n            require-instance\
    \ Statement ..............................166\n      13.6. Error Message for Data\
    \ That Does Not Match a\n            leafref Type ............................................166\n\
    \      13.7. Error Message for Data That Violates a mandatory\n            choice\
    \ Statement ........................................166\n      13.8. Error Message\
    \ for the \"insert\" Operation ................167\n   14. IANA Considerations\
    \ ..........................................167\n      14.1. Media type application/yang\
    \ .............................168\n      14.2. Media type application/yin+xml\
    \ ..........................169\n   15. Security Considerations ......................................170\n\
    \   16. Contributors .................................................171\n  \
    \ 17. Acknowledgements .............................................171\n   18.\
    \ References ...................................................171\n      18.1.\
    \ Normative References ....................................171\n      18.2. Informative\
    \ References ..................................172\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   YANG is a data modeling language used to model configuration\
    \ and\n   state data manipulated by the Network Configuration Protocol\n   (NETCONF),\
    \ NETCONF remote procedure calls, and NETCONF notifications.\n   YANG is used\
    \ to model the operations and content layers of NETCONF\n   (see the NETCONF Configuration\
    \ Protocol [RFC4741], Section 1.1).\n   This document describes the syntax and\
    \ semantics of the YANG\n   language, how the data model defined in a YANG module\
    \ is represented\n   in the Extensible Markup Language (XML), and how NETCONF\
    \ operations\n   are used to manipulate the data.\n"
- title: 2.  Keywords
  contents:
  - "2.  Keywords\n   The keywords \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\"\
    , \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted as described\
    \ in BCP\n   14, [RFC2119].\n"
- title: 3.  Terminology
  contents:
  - "3.  Terminology\n   o  anyxml: A data node that can contain an unknown chunk\
    \ of XML data.\n   o  augment: Adds new schema nodes to a previously defined schema\n\
    \      node.\n   o  base type: The type from which a derived type was derived,\
    \ which\n      may be either a built-in type or another derived type.\n   o  built-in\
    \ type: A YANG data type defined in the YANG language, such\n      as uint32 or\
    \ string.\n   o  choice: A schema node where only one of a number of identified\n\
    \      alternatives is valid.\n   o  configuration data: The set of writable data\
    \ that is required to\n      transform a system from its initial default state\
    \ into its current\n      state [RFC4741].\n   o  conformance: A measure of how\
    \ accurately a device follows a data\n      model.\n   o  container: An interior\
    \ data node that exists in at most one\n      instance in the data tree.  A container\
    \ has no value, but rather a\n      set of child nodes.\n   o  data definition\
    \ statement: A statement that defines new data\n      nodes.  One of container,\
    \ leaf, leaf-list, list, choice, case,\n      augment, uses, and anyxml.\n   o\
    \  data model: A data model describes how data is represented and\n      accessed.\n\
    \   o  data node: A node in the schema tree that can be instantiated in a\n  \
    \    data tree.  One of container, leaf, leaf-list, list, and anyxml.\n   o  data\
    \ tree: The instantiated tree of configuration and state data\n      on a device.\n\
    \   o  derived type: A type that is derived from a built-in type (such as\n  \
    \    uint32), or another derived type.\n   o  device deviation: A failure of the\
    \ device to implement the module\n      faithfully.\n   o  extension: An extension\
    \ attaches non-YANG semantics to statements.\n      The extension statement defines\
    \ new statements to express these\n      semantics.\n   o  feature: A mechanism\
    \ for marking a portion of the model as\n      optional.  Definitions can be tagged\
    \ with a feature name and are\n      only valid on devices that support that feature.\n\
    \   o  grouping: A reusable set of schema nodes, which may be used\n      locally\
    \ in the module, in modules that include it, and by other\n      modules that\
    \ import from it.  The grouping statement is not a data\n      definition statement\
    \ and, as such, does not define any nodes in\n      the schema tree.\n   o  identifier:\
    \ Used to identify different kinds of YANG items by\n      name.\n   o  instance\
    \ identifier: A mechanism for identifying a particular node\n      in a data tree.\n\
    \   o  interior node: Nodes within a hierarchy that are not leaf nodes.\n   o\
    \  leaf: A data node that exists in at most one instance in the data\n      tree.\
    \  A leaf has a value but no child nodes.\n   o  leaf-list: Like the leaf node\
    \ but defines a set of uniquely\n      identifiable nodes rather than a single\
    \ node.  Each node has a\n      value but no child nodes.\n   o  list: An interior\
    \ data node that may exist in multiple instances\n      in the data tree.  A list\
    \ has no value, but rather a set of child\n      nodes.\n   o  module: A YANG\
    \ module defines a hierarchy of nodes that can be\n      used for NETCONF-based\
    \ operations.  With its definitions and the\n      definitions it imports or includes\
    \ from elsewhere, a module is\n      self-contained and \"compilable\".\n   o\
    \  RPC: A Remote Procedure Call, as used within the NETCONF protocol.\n   o  RPC\
    \ operation: A specific Remote Procedure Call, as used within\n      the NETCONF\
    \ protocol.  It is also called a protocol operation.\n   o  schema node: A node\
    \ in the schema tree.  One of container, leaf,\n      leaf-list, list, choice,\
    \ case, rpc, input, output, notification,\n      and anyxml.\n   o  schema node\
    \ identifier: A mechanism for identifying a particular\n      node in the schema\
    \ tree.\n   o  schema tree: The definition hierarchy specified within a module.\n\
    \   o  state data: The additional data on a system that is not\n      configuration\
    \ data such as read-only status information and\n      collected statistics [RFC4741].\n\
    \   o  submodule: A partial module definition that contributes derived\n     \
    \ types, groupings, data nodes, RPCs, and notifications to a module.\n      A\
    \ YANG module can be constructed from a number of submodules.\n   o  top-level\
    \ data node: A data node where there is no other data node\n      between it and\
    \ a module or submodule statement.\n   o  uses: The \"uses\" statement is used\
    \ to instantiate the set of\n      schema nodes defined in a grouping statement.\
    \  The instantiated\n      nodes may be refined and augmented to tailor them to\
    \ any specific\n      needs.\n"
- title: 3.1.  Mandatory Nodes
  contents:
  - "3.1.  Mandatory Nodes\n   A mandatory node is one of:\n   o  A leaf, choice,\
    \ or anyxml node with a \"mandatory\" statement with\n      the value \"true\"\
    .\n   o  A list or leaf-list node with a \"min-elements\" statement with a\n \
    \     value greater than zero.\n   o  A container node without a \"presence\"\
    \ statement, which has at\n      least one mandatory node as a child.\n"
- title: 4.  YANG Overview
  contents:
  - '4.  YANG Overview

    '
- title: 4.1.  Functional Overview
  contents:
  - "4.1.  Functional Overview\n   YANG is a language used to model data for the NETCONF\
    \ protocol.  A\n   YANG module defines a hierarchy of data that can be used for\
    \ NETCONF-\n   based operations, including configuration, state data, Remote\n\
    \   Procedure Calls (RPCs), and notifications.  This allows a complete\n   description\
    \ of all data sent between a NETCONF client and server.\n   YANG models the hierarchical\
    \ organization of data as a tree in which\n   each node has a name, and either\
    \ a value or a set of child nodes.\n   YANG provides clear and concise descriptions\
    \ of the nodes, as well as\n   the interaction between those nodes.\n   YANG structures\
    \ data models into modules and submodules.  A module\n   can import data from\
    \ other external modules, and include data from\n   submodules.  The hierarchy\
    \ can be augmented, allowing one module to\n   add data nodes to the hierarchy\
    \ defined in another module.  This\n   augmentation can be conditional, with new\
    \ nodes appearing only if\n   certain conditions are met.\n   YANG models can\
    \ describe constraints to be enforced on the data,\n   restricting the appearance\
    \ or value of nodes based on the presence or\n   value of other nodes in the hierarchy.\
    \  These constraints are\n   enforceable by either the client or the server, and\
    \ valid content\n   MUST abide by them.\n   YANG defines a set of built-in types,\
    \ and has a type mechanism\n   through which additional types may be defined.\
    \  Derived types can\n   restrict their base type's set of valid values using\
    \ mechanisms like\n   range or pattern restrictions that can be enforced by clients\
    \ or\n   servers.  They can also define usage conventions for use of the\n   derived\
    \ type, such as a string-based type that contains a host name.\n   YANG permits\
    \ the definition of reusable groupings of nodes.  The\n   instantiation of these\
    \ groupings can refine or augment the nodes,\n   allowing it to tailor the nodes\
    \ to its particular needs.  Derived\n   types and groupings can be defined in\
    \ one module or submodule and\n   used in either that location or in another module\
    \ or submodule that\n   imports or includes it.\n   YANG data hierarchy constructs\
    \ include defining lists where list\n   entries are identified by keys that distinguish\
    \ them from each other.\n   Such lists may be defined as either sorted by user\
    \ or automatically\n   sorted by the system.  For user-sorted lists, operations\
    \ are defined\n   for manipulating the order of the list entries.\n   YANG modules\
    \ can be translated into an equivalent XML syntax called\n   YANG Independent\
    \ Notation (YIN) (Section 11), allowing applications\n   using XML parsers and\
    \ Extensible Stylesheet Language Transformations\n   (XSLT) scripts to operate\
    \ on the models.  The conversion from YANG to\n   YIN is lossless, so content\
    \ in YIN can be round-tripped back into\n   YANG.\n   YANG strikes a balance between\
    \ high-level data modeling and low-level\n   bits-on-the-wire encoding.  The reader\
    \ of a YANG module can see the\n   high-level view of the data model while understanding\
    \ how the data\n   will be encoded in NETCONF operations.\n   YANG is an extensible\
    \ language, allowing extension statements to be\n   defined by standards bodies,\
    \ vendors, and individuals.  The statement\n   syntax allows these extensions\
    \ to coexist with standard YANG\n   statements in a natural way, while extensions\
    \ in a YANG module stand\n   out sufficiently for the reader to notice them.\n\
    \   YANG resists the tendency to solve all possible problems, limiting\n   the\
    \ problem space to allow expression of NETCONF data models, not\n   arbitrary\
    \ XML documents or arbitrary data models.  The data models\n   described by YANG\
    \ are designed to be easily operated upon by NETCONF\n   operations.\n   To the\
    \ extent possible, YANG maintains compatibility with Simple\n   Network Management\
    \ Protocol's (SNMP's) SMIv2 (Structure of Management\n   Information version 2\
    \ [RFC2578], [RFC2579]).  SMIv2-based MIB modules\n   can be automatically translated\
    \ into YANG modules for read-only\n   access.  However, YANG is not concerned\
    \ with reverse translation from\n   YANG to SMIv2.\n   Like NETCONF, YANG targets\
    \ smooth integration with the device's\n   native management infrastructure. \
    \ This allows implementations to\n   leverage their existing access control mechanisms\
    \ to protect or\n   expose elements of the data model.\n"
- title: 4.2.  Language Overview
  contents:
  - "4.2.  Language Overview\n   This section introduces some important constructs\
    \ used in YANG that\n   will aid in the understanding of the language specifics\
    \ in later\n   sections.  This progressive approach handles the inter-related\
    \ nature\n   of YANG concepts and statements.  A detailed description of YANG\n\
    \   statements and syntax begins in Section 7.\n"
- title: 4.2.1.  Modules and Submodules
  contents:
  - "4.2.1.  Modules and Submodules\n   A module contains three types of statements:\
    \ module-header\n   statements, revision statements, and definition statements.\
    \  The\n   module header statements describe the module and give information\n\
    \   about the module itself, the revision statements give information\n   about\
    \ the history of the module, and the definition statements are\n   the body of\
    \ the module where the data model is defined.\n   A NETCONF server may implement\
    \ a number of modules, allowing multiple\n   views of the same data, or multiple\
    \ views of disjoint subsections of\n   the device's data.  Alternatively, the\
    \ server may implement only one\n   module that defines all available data.\n\
    \   A module may be divided into submodules, based on the needs of the\n   module\
    \ owner.  The external view remains that of a single module,\n   regardless of\
    \ the presence or size of its submodules.\n   The \"include\" statement allows\
    \ a module or submodule to reference\n   material in submodules, and the \"import\"\
    \ statement allows references\n   to material defined in other modules.\n"
- title: 4.2.2.  Data Modeling Basics
  contents:
  - "4.2.2.  Data Modeling Basics\n   YANG defines four types of nodes for data modeling.\
    \  In each of the\n   following subsections, the example shows the YANG syntax\
    \ as well as a\n   corresponding NETCONF XML representation.\n"
- title: 4.2.2.1.  Leaf Nodes
  contents:
  - "4.2.2.1.  Leaf Nodes\n   A leaf node contains simple data like an integer or\
    \ a string.  It has\n   exactly one value of a particular type and no child nodes.\n\
    \   YANG Example:\n       leaf host-name {\n           type string;\n        \
    \   description \"Hostname for this system\";\n       }\n   NETCONF XML Example:\n\
    \       <host-name>my.example.com</host-name>\n   The \"leaf\" statement is covered\
    \ in Section 7.6.\n"
- title: 4.2.2.2.  Leaf-List Nodes
  contents:
  - "4.2.2.2.  Leaf-List Nodes\n   A leaf-list is a sequence of leaf nodes with exactly\
    \ one value of a\n   particular type per leaf.\n   YANG Example:\n     leaf-list\
    \ domain-search {\n         type string;\n         description \"List of domain\
    \ names to search\";\n     }\n   NETCONF XML Example:\n     <domain-search>high.example.com</domain-search>\n\
    \     <domain-search>low.example.com</domain-search>\n     <domain-search>everywhere.example.com</domain-search>\n\
    \   The \"leaf-list\" statement is covered in Section 7.7.\n"
- title: 4.2.2.3.  Container Nodes
  contents:
  - "4.2.2.3.  Container Nodes\n   A container node is used to group related nodes\
    \ in a subtree.  A\n   container has only child nodes and no value.  A container\
    \ may contain\n   any number of child nodes of any type (including leafs, lists,\n\
    \   containers, and leaf-lists).\n   YANG Example:\n     container system {\n\
    \         container login {\n             leaf message {\n                 type\
    \ string;\n                 description\n                     \"Message given\
    \ at start of login session\";\n             }\n         }\n     }\n   NETCONF\
    \ XML Example:\n     <system>\n       <login>\n         <message>Good morning</message>\n\
    \       </login>\n     </system>\n   The \"container\" statement is covered in\
    \ Section 7.5.\n"
- title: 4.2.2.4.  List Nodes
  contents:
  - "4.2.2.4.  List Nodes\n   A list defines a sequence of list entries.  Each entry\
    \ is like a\n   structure or a record instance, and is uniquely identified by\
    \ the\n   values of its key leafs.  A list can define multiple key leafs and\n\
    \   may contain any number of child nodes of any type (including leafs,\n   lists,\
    \ containers etc.).\n   YANG Example:\n     list user {\n         key \"name\"\
    ;\n         leaf name {\n             type string;\n         }\n         leaf\
    \ full-name {\n             type string;\n         }\n         leaf class {\n\
    \             type string;\n         }\n     }\n   NETCONF XML Example:\n    \
    \ <user>\n       <name>glocks</name>\n       <full-name>Goldie Locks</full-name>\n\
    \       <class>intruder</class>\n     </user>\n     <user>\n       <name>snowey</name>\n\
    \       <full-name>Snow White</full-name>\n       <class>free-loader</class>\n\
    \     </user>\n     <user>\n       <name>rzell</name>\n       <full-name>Rapun\
    \ Zell</full-name>\n       <class>tower</class>\n     </user>\n   The \"list\"\
    \ statement is covered in Section 7.8.\n"
- title: 4.2.2.5.  Example Module
  contents:
  - "4.2.2.5.  Example Module\n   These statements are combined to define the module:\n\
    \     // Contents of \"acme-system.yang\"\n     module acme-system {\n       \
    \  namespace \"http://acme.example.com/system\";\n         prefix \"acme\";\n\
    \         organization \"ACME Inc.\";\n         contact \"joe@acme.example.com\"\
    ;\n         description\n             \"The module for entities implementing the\
    \ ACME system.\";\n         revision 2007-06-09 {\n             description \"\
    Initial revision.\";\n         }\n         container system {\n             leaf\
    \ host-name {\n                 type string;\n                 description \"\
    Hostname for this system\";\n             }\n             leaf-list domain-search\
    \ {\n                 type string;\n                 description \"List of domain\
    \ names to search\";\n             }\n             container login {\n       \
    \          leaf message {\n                     type string;\n               \
    \      description\n                         \"Message given at start of login\
    \ session\";\n                 }\n                 list user {\n             \
    \        key \"name\";\n                     leaf name {\n                   \
    \      type string;\n                     }\n                     leaf full-name\
    \ {\n                         type string;\n                     }\n         \
    \            leaf class {\n                         type string;\n           \
    \          }\n                 }\n             }\n         }\n     }\n"
- title: 4.2.3.  State Data
  contents:
  - "4.2.3.  State Data\n   YANG can model state data, as well as configuration data,\
    \ based on\n   the \"config\" statement.  When a node is tagged with \"config\
    \ false\",\n   its subhierarchy is flagged as state data, to be reported using\n\
    \   NETCONF's <get> operation, not the <get-config> operation.  Parent\n   containers,\
    \ lists, and key leafs are reported also, giving the\n   context for the state\
    \ data.\n   In this example, two leafs are defined for each interface, a\n   configured\
    \ speed and an observed speed.  The observed speed is not\n   configuration, so\
    \ it can be returned with NETCONF <get> operations,\n   but not with <get-config>\
    \ operations.  The observed speed is not\n   configuration data, and it cannot\
    \ be manipulated using <edit-config>.\n     list interface {\n         key \"\
    name\";\n         leaf name {\n             type string;\n         }\n       \
    \  leaf speed {\n             type enumeration {\n                 enum 10m;\n\
    \                 enum 100m;\n                 enum auto;\n             }\n  \
    \       }\n         leaf observed-speed {\n             type uint32;\n       \
    \      config false;\n         }\n     }\n"
- title: 4.2.4.  Built-In Types
  contents:
  - "4.2.4.  Built-In Types\n   YANG has a set of built-in types, similar to those\
    \ of many\n   programming languages, but with some differences due to special\n\
    \   requirements from the management domain.  The following table\n   summarizes\
    \ the built-in types discussed in Section 9:\n       +---------------------+-------------------------------------+\n\
    \       | Name                | Description                         |\n      \
    \ +---------------------+-------------------------------------+\n       | binary\
    \              | Any binary data                     |\n       | bits        \
    \        | A set of bits or flags              |\n       | boolean           \
    \  | \"true\" or \"false\"                   |\n       | decimal64           |\
    \ 64-bit signed decimal number        |\n       | empty               | A leaf\
    \ that does not have any value |\n       | enumeration         | Enumerated strings\
    \                  |\n       | identityref         | A reference to an abstract\
    \ identity |\n       | instance-identifier | References a data tree node     \
    \    |\n       | int8                | 8-bit signed integer                |\n\
    \       | int16               | 16-bit signed integer               |\n      \
    \ | int32               | 32-bit signed integer               |\n       | int64\
    \               | 64-bit signed integer               |\n       | leafref    \
    \         | A reference to a leaf instance      |\n       | string           \
    \   | Human-readable string               |\n       | uint8               | 8-bit\
    \ unsigned integer              |\n       | uint16              | 16-bit unsigned\
    \ integer             |\n       | uint32              | 32-bit unsigned integer\
    \             |\n       | uint64              | 64-bit unsigned integer      \
    \       |\n       | union               | Choice of member types             \
    \ |\n       +---------------------+-------------------------------------+\n  \
    \ The \"type\" statement is covered in Section 7.4.\n"
- title: 4.2.5.  Derived Types (typedef)
  contents:
  - "4.2.5.  Derived Types (typedef)\n   YANG can define derived types from base types\
    \ using the \"typedef\"\n   statement.  A base type can be either a built-in type\
    \ or a derived\n   type, allowing a hierarchy of derived types.\n   A derived\
    \ type can be used as the argument for the \"type\" statement.\n   YANG Example:\n\
    \     typedef percent {\n         type uint8 {\n             range \"0 .. 100\"\
    ;\n         }\n         description \"Percentage\";\n     }\n     leaf completed\
    \ {\n         type percent;\n     }\n   NETCONF XML Example:\n     <completed>20</completed>\n\
    \   The \"typedef\" statement is covered in Section 7.3.\n"
- title: 4.2.6.  Reusable Node Groups (grouping)
  contents:
  - "4.2.6.  Reusable Node Groups (grouping)\n   Groups of nodes can be assembled\
    \ into reusable collections using the\n   \"grouping\" statement.  A grouping\
    \ defines a set of nodes that are\n   instantiated with the \"uses\" statement:\n\
    \     grouping target {\n         leaf address {\n             type inet:ip-address;\n\
    \             description \"Target IP address\";\n         }\n         leaf port\
    \ {\n             type inet:port-number;\n             description \"Target port\
    \ number\";\n         }\n     }\n     container peer {\n         container destination\
    \ {\n             uses target;\n         }\n     }\n   NETCONF XML Example:\n\
    \     <peer>\n       <destination>\n         <address>192.0.2.1</address>\n  \
    \       <port>830</port>\n       </destination>\n     </peer>\n   The grouping\
    \ can be refined as it is used, allowing certain\n   statements to be overridden.\
    \  In this example, the description is\n   refined:\n     container connection\
    \ {\n         container source {\n             uses target {\n               \
    \  refine \"address\" {\n                     description \"Source IP address\"\
    ;\n                 }\n                 refine \"port\" {\n                  \
    \   description \"Source port number\";\n                 }\n             }\n\
    \         }\n         container destination {\n             uses target {\n  \
    \               refine \"address\" {\n                     description \"Destination\
    \ IP address\";\n                 }\n                 refine \"port\" {\n    \
    \                 description \"Destination port number\";\n                 }\n\
    \             }\n         }\n     }\n   The \"grouping\" statement is covered\
    \ in Section 7.11.\n"
- title: 4.2.7.  Choices
  contents:
  - "4.2.7.  Choices\n   YANG allows the data model to segregate incompatible nodes\
    \ into\n   distinct choices using the \"choice\" and \"case\" statements.  The\n\
    \   \"choice\" statement contains a set of \"case\" statements that define\n \
    \  sets of schema nodes that cannot appear together.  Each \"case\" may\n   contain\
    \ multiple nodes, but each node may appear in only one \"case\"\n   under a \"\
    choice\".\n   When an element from one case is created, all elements from all\
    \ other\n   cases are implicitly deleted.  The device handles the enforcement\
    \ of\n   the constraint, preventing incompatibilities from existing in the\n \
    \  configuration.\n   The choice and case nodes appear only in the schema tree,\
    \ not in the\n   data tree or NETCONF messages.  The additional levels of hierarchy\n\
    \   are not needed beyond the conceptual schema.\n   YANG Example:\n     container\
    \ food {\n       choice snack {\n           case sports-arena {\n            \
    \   leaf pretzel {\n                   type empty;\n               }\n       \
    \        leaf beer {\n                   type empty;\n               }\n     \
    \      }\n           case late-night {\n               leaf chocolate {\n    \
    \               type enumeration {\n                       enum dark;\n      \
    \                 enum milk;\n                       enum first-available;\n \
    \                  }\n               }\n           }\n       }\n    }\n   NETCONF\
    \ XML Example:\n     <food>\n       <pretzel/>\n       <beer/>\n     </food>\n\
    \   The \"choice\" statement is covered in Section 7.9.\n"
- title: 4.2.8.  Extending Data Models (augment)
  contents:
  - "4.2.8.  Extending Data Models (augment)\n   YANG allows a module to insert additional\
    \ nodes into data models,\n   including both the current module (and its submodules)\
    \ or an external\n   module.  This is useful for example for vendors to add vendor-\n\
    \   specific parameters to standard data models in an interoperable way.\n   The\
    \ \"augment\" statement defines the location in the data model\n   hierarchy where\
    \ new nodes are inserted, and the \"when\" statement\n   defines the conditions\
    \ when the new nodes are valid.\n   YANG Example:\n     augment /system/login/user\
    \ {\n         when \"class != 'wheel'\";\n         leaf uid {\n             type\
    \ uint16 {\n                 range \"1000 .. 30000\";\n             }\n      \
    \   }\n     }\n   This example defines a \"uid\" node that only is valid when\
    \ the user's\n   \"class\" is not \"wheel\".\n   If a module augments another\
    \ module, the XML representation of the\n   data will reflect the prefix of the\
    \ augmenting module.  For example,\n   if the above augmentation were in a module\
    \ with prefix \"other\", the\n   XML would look like:\n   NETCONF XML Example:\n\
    \     <user>\n       <name>alicew</name>\n       <full-name>Alice N. Wonderland</full-name>\n\
    \       <class>drop-out</class>\n       <other:uid>1024</other:uid>\n     </user>\n\
    \   The \"augment\" statement is covered in Section 7.15.\n"
- title: 4.2.9.  RPC Definitions
  contents:
  - "4.2.9.  RPC Definitions\n   YANG allows the definition of NETCONF RPCs.  The\
    \ operations' names,\n   input parameters, and output parameters are modeled using\
    \ YANG data\n   definition statements.\n   YANG Example:\n     rpc activate-software-image\
    \ {\n         input {\n             leaf image-name {\n                 type string;\n\
    \             }\n         }\n         output {\n             leaf status {\n \
    \                type string;\n             }\n         }\n     }\n   NETCONF\
    \ XML Example:\n     <rpc message-id=\"101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    >\n       <activate-software-image xmlns=\"http://acme.example.com/system\">\n\
    \         <image-name>acmefw-2.3</image-name>\n      </activate-software-image>\n\
    \     </rpc>\n     <rpc-reply message-id=\"101\"\n                xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    >\n       <status xmlns=\"http://acme.example.com/system\">\n         The image\
    \ acmefw-2.3 is being installed.\n       </status>\n     </rpc-reply>\n   The\
    \ \"rpc\" statement is covered in Section 7.13.\n"
- title: 4.2.10.  Notification Definitions
  contents:
  - "4.2.10.  Notification Definitions\n   YANG allows the definition of notifications\
    \ suitable for NETCONF.\n   YANG data definition statements are used to model\
    \ the content of the\n   notification.\n   YANG Example:\n     notification link-failure\
    \ {\n         description \"A link failure has been detected\";\n         leaf\
    \ if-name {\n             type leafref {\n                 path \"/interface/name\"\
    ;\n             }\n         }\n         leaf if-admin-status {\n             type\
    \ admin-status;\n         }\n         leaf if-oper-status {\n             type\
    \ oper-status;\n         }\n     }\n   NETCONF XML Example:\n     <notification\n\
    \         xmlns=\"urn:ietf:params:netconf:capability:notification:1.0\">\n   \
    \    <eventTime>2007-09-01T10:00:00Z</eventTime>\n       <link-failure xmlns=\"\
    http://acme.example.com/system\">\n         <if-name>so-1/2/3.0</if-name>\n  \
    \       <if-admin-status>up</if-admin-status>\n         <if-oper-status>down</if-oper-status>\n\
    \       </link-failure>\n     </notification>\n   The \"notification\" statement\
    \ is covered in Section 7.14.\n"
- title: 5.  Language Concepts
  contents:
  - '5.  Language Concepts

    '
- title: 5.1.  Modules and Submodules
  contents:
  - "5.1.  Modules and Submodules\n   The module is the base unit of definition in\
    \ YANG.  A module defines\n   a single data model.  A module can define a complete,\
    \ cohesive model,\n   or augment an existing data model with additional nodes.\n\
    \   Submodules are partial modules that contribute definitions to a\n   module.\
    \  A module may include any number of submodules, but each\n   submodule may belong\
    \ to only one module.\n   The names of all standard modules and submodules MUST\
    \ be unique.\n   Developers of enterprise modules are RECOMMENDED to choose names\
    \ for\n   their modules that will have a low probability of colliding with\n \
    \  standard or other enterprise modules, e.g., by using the enterprise\n   or\
    \ organization name as a prefix for the module name.\n   A module uses the \"\
    include\" statement to include its submodules, and\n   the \"import\" statement\
    \ to reference external modules.  Similarly, a\n   submodule uses the \"import\"\
    \ statement to reference other modules, and\n   uses the \"include\" statement\
    \ to reference other submodules within its\n   module.  A module or submodule\
    \ MUST NOT include submodules from other\n   modules, and a submodule MUST NOT\
    \ import its own module.\n   The import and include statements are used to make\
    \ definitions\n   available to other modules and submodules:\n   o  For a module\
    \ or submodule to reference definitions in an external\n      module, the external\
    \ module MUST be imported.\n   o  For a module to reference definitions in one\
    \ of its submodules,\n      the module MUST include the submodule.\n   o  For\
    \ a submodule to reference definitions in a second submodule of\n      the same\
    \ module, the first submodule MUST include the second\n      submodule.\n   There\
    \ MUST NOT be any circular chains of imports or includes.  For\n   example, if\
    \ submodule \"a\" includes submodule \"b\", \"b\" cannot include\n   \"a\".\n\
    \   When a definition in an external module is referenced, a locally\n   defined\
    \ prefix MUST be used, followed by \":\", and then the external\n   identifier.\
    \  References to definitions in the local module MAY use\n   the prefix notation.\
    \  Since built-in data types do not belong to any\n   module and have no prefix,\
    \ references to built-in data types (e.g.,\n   int32) cannot use the prefix notation.\n"
- title: 5.1.1.  Import and Include by Revision
  contents:
  - "5.1.1.  Import and Include by Revision\n   Published modules evolve independently\
    \ over time.  In order to allow\n   for this evolution, modules need to be imported\
    \ using specific\n   revisions.  When a module is written, it uses the current\
    \ revisions\n   of other modules, based on what is available at the time.  As\
    \ future\n   revisions of the imported modules are published, the importing module\n\
    \   is unaffected and its contents are unchanged.  When the author of the\n  \
    \ module is prepared to move to the most recently published revision of\n   an\
    \ imported module, the module is republished with an updated\n   \"import\" statement.\
    \  By republishing with the new revision, the\n   authors explicitly indicate\
    \ their acceptance of any changes in the\n   imported module.\n   For submodules,\
    \ the issue is related but simpler.  A module or\n   submodule that includes submodules\
    \ needs to specify the revision of\n   the included submodules.  If a submodule\
    \ changes, any module or\n   submodule that includes it needs to be updated.\n\
    \   For example, module \"b\" imports module \"a\".\n     module a {\n       \
    \  revision 2008-01-01 { ... }\n         grouping a {\n             leaf eh {\
    \ .... }\n         }\n     }\n     module b {\n         import a {\n         \
    \    prefix p;\n             revision-date 2008-01-01;\n         }\n         container\
    \ bee {\n             uses p:a;\n         }\n     }\n   When the author of \"\
    a\" publishes a new revision, the changes may not\n   be acceptable to the author\
    \ of \"b\".  If the new revision is\n   acceptable, the author of \"b\" can republish\
    \ with an updated revision\n   in the \"import\" statement.\n"
- title: 5.1.2.  Module Hierarchies
  contents:
  - "5.1.2.  Module Hierarchies\n   YANG allows modeling of data in multiple hierarchies,\
    \ where data may\n   have more than one top-level node.  Models that have multiple\
    \ top-\n   level nodes are sometimes convenient, and are supported by YANG.\n\
    \   NETCONF is capable of carrying any XML content as the payload in the\n   <config>\
    \ and <data> elements.  The top-level nodes of YANG modules\n   are encoded as\
    \ child elements, in any order, within these elements.\n   This encapsulation\
    \ guarantees that the corresponding NETCONF messages\n   are always well-formed\
    \ XML documents.\n   For example:\n     module my-config {\n         namespace\
    \ \"http://example.com/schema/config\";\n         prefix \"co\";\n         container\
    \ system { ... }\n         container routing { ... }\n     }\n   could be encoded\
    \ in NETCONF as:\n     <rpc message-id=\"101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    \n          xmlns:nc=\"urn:ietf:params:xml:ns:netconf:base:1.0\">\n       <edit-config>\n\
    \         <target>\n           <running/>\n         </target>\n         <config>\n\
    \           <system xmlns=\"http://example.com/schema/config\">\n            \
    \ <!-- system data here -->\n           </system>\n           <routing xmlns=\"\
    http://example.com/schema/config\">\n             <!-- routing data here -->\n\
    \           </routing>\n         </config>\n       </edit-config>\n     </rpc>\n"
- title: 5.2.  File Layout
  contents:
  - "5.2.  File Layout\n   YANG modules and submodules are typically stored in files,\
    \ one module\n   or submodule per file.  The name of the file SHOULD be of the\
    \ form:\n     module-or-submodule-name ['@' revision-date] ( '.yang' / '.yin'\
    \ )\n   YANG compilers can find imported modules and included submodules via\n\
    \   this convention.  While the YANG language defines modules, tools may\n   compile\
    \ submodules independently for performance and manageability\n   reasons.  Errors\
    \ and warnings that cannot be detected during\n   submodule compilation may be\
    \ delayed until the submodules are linked\n   into a cohesive module.\n"
- title: 5.3.  XML Namespaces
  contents:
  - "5.3.  XML Namespaces\n   All YANG definitions are specified within a module that\
    \ is bound to a\n   particular XML namespace [XML-NAMES], which is a globally\
    \ unique URI\n   [RFC3986].  A NETCONF client or server uses the namespace during\
    \ XML\n   encoding of data.\n   Namespaces for modules published in RFC streams\
    \ [RFC4844] MUST be\n   assigned by IANA, see Section 14.\n   Namespaces for private\
    \ modules are assigned by the organization\n   owning the module without a central\
    \ registry.  Namespace URIs MUST be\n   chosen so they cannot collide with standard\
    \ or other enterprise\n   namespaces, for example by using the enterprise or organization\
    \ name\n   in the namespace.\n   The \"namespace\" statement is covered in Section\
    \ 7.1.3.\n"
- title: 5.3.1.  YANG XML Namespace
  contents:
  - "5.3.1.  YANG XML Namespace\n   YANG defines an XML namespace for NETCONF <edit-config>\
    \ operations\n   and <error-info> content.  The name of this namespace is\n  \
    \ \"urn:ietf:params:xml:ns:yang:1\".\n"
- title: 5.4.  Resolving Grouping, Type, and Identity Names
  contents:
  - "5.4.  Resolving Grouping, Type, and Identity Names\n   Grouping, type, and identity\
    \ names are resolved in the context in\n   which they are defined, rather than\
    \ the context in which they are\n   used.  Users of groupings, typedefs, and identities\
    \ are not required\n   to import modules or include submodules to satisfy all\
    \ references\n   made by the original definition.  This behaves like static scoping\
    \ in\n   a conventional programming language.\n   For example, if a module defines\
    \ a grouping in which a type is\n   referenced, when the grouping is used in a\
    \ second module, the type is\n   resolved in the context of the original module,\
    \ not the second\n   module.  There is no worry over conflicts if both modules\
    \ define the\n   type, since there is no ambiguity.\n"
- title: 5.5.  Nested Typedefs and Groupings
  contents:
  - "5.5.  Nested Typedefs and Groupings\n   Typedefs and groupings may appear nested\
    \ under many YANG statements,\n   allowing these to be lexically scoped by the\
    \ hierarchy under which\n   they appear.  This allows types and groupings to be\
    \ defined near\n   where they are used, rather than placing them at the top level\
    \ of the\n   hierarchy.  The close proximity increases readability.\n   Scoping\
    \ also allows types to be defined without concern for naming\n   conflicts between\
    \ types in different submodules.  Type names can be\n   specified without adding\
    \ leading strings designed to prevent name\n   collisions within large modules.\n\
    \   Finally, scoping allows the module author to keep types and groupings\n  \
    \ private to their module or submodule, preventing their reuse.  Since\n   only\
    \ top-level types and groupings (i.e., those appearing as\n   substatements to\
    \ a module or submodule statement) can be used outside\n   the module or submodule,\
    \ the developer has more control over what\n   pieces of their module are presented\
    \ to the outside world, supporting\n   the need to hide internal information and\
    \ maintaining a boundary\n   between what is shared with the outside world and\
    \ what is kept\n   private.\n   Scoped definitions MUST NOT shadow definitions\
    \ at a higher scope.  A\n   type or grouping cannot be defined if a higher level\
    \ in the schema\n   hierarchy has a definition with a matching identifier.\n \
    \  A reference to an unprefixed type or grouping, or one which uses the\n   prefix\
    \ of the current module, is resolved by locating the closest\n   matching \"typedef\"\
    \ or \"grouping\" statement among the immediate\n   substatements of each ancestor\
    \ statement.\n"
- title: 5.6.  Conformance
  contents:
  - "5.6.  Conformance\n   Conformance is a measure of how accurately a device follows\
    \ the\n   model.  Generally speaking, devices are responsible for implementing\n\
    \   the model faithfully, allowing applications to treat devices which\n   implement\
    \ the model identically.  Deviations from the model can\n   reduce the utility\
    \ of the model and increase fragility of\n   applications that use it.\n   YANG\
    \ modelers have three mechanisms for conformance:\n   o  the basic behavior of\
    \ the model\n   o  optional features that are part of the model\n   o  deviations\
    \ from the model\n   We will consider each of these in sequence.\n"
- title: 5.6.1.  Basic Behavior
  contents:
  - "5.6.1.  Basic Behavior\n   The model defines a contract between the NETCONF client\
    \ and server,\n   which allows both parties to have faith the other knows the\
    \ syntax\n   and semantics behind the modeled data.  The strength of YANG lies\
    \ in\n   the strength of this contract.\n"
- title: 5.6.2.  Optional Features
  contents:
  - "5.6.2.  Optional Features\n   In many models, the modeler will allow sections\
    \ of the model to be\n   conditional.  The device controls whether these conditional\
    \ portions\n   of the model are supported or valid for that particular device.\n\
    \   For example, a syslog data model may choose to include the ability to\n  \
    \ save logs locally, but the modeler will realize that this is only\n   possible\
    \ if the device has local storage.  If there is no local\n   storage, an application\
    \ should not tell the device to save logs.\n   YANG supports this conditional\
    \ mechanism using a construct called\n   \"feature\".  Features give the modeler\
    \ a mechanism for making portions\n   of the module conditional in a manner that\
    \ is controlled by the\n   device.  The model can express constructs that are\
    \ not universally\n   present in all devices.  These features are included in\
    \ the model\n   definition, allowing a consistent view and allowing applications\
    \ to\n   learn which features are supported and tailor their behavior to the\n\
    \   device.\n   A module may declare any number of features, identified by simple\n\
    \   strings, and may make portions of the module optional based on those\n   features.\
    \  If the device supports a feature, then the corresponding\n   portions of the\
    \ module are valid for that device.  If the device\n   doesn't support the feature,\
    \ those parts of the module are not valid,\n   and applications should behave\
    \ accordingly.\n   Features are defined using the \"feature\" statement.  Definitions\
    \ in\n   the module that are conditional to the feature are noted by the\n   \"\
    if-feature\" statement with the name of the feature as its argument.\n   Further\
    \ details are available in Section 7.18.1.\n"
- title: 5.6.3.  Deviations
  contents:
  - "5.6.3.  Deviations\n   In an ideal world, all devices would be required to implement\
    \ the\n   model exactly as defined, and deviations from the model would not be\n\
    \   allowed.  But in the real world, devices are often not able or\n   designed\
    \ to implement the model as written.  For YANG-based\n   automation to deal with\
    \ these device deviations, a mechanism must\n   exist for devices to inform applications\
    \ of the specifics of such\n   deviations.\n   For example, a BGP module may allow\
    \ any number of BGP peers, but a\n   particular device may only support 16 BGP\
    \ peers.  Any application\n   configuring the 17th peer will receive an error.\
    \  While an error may\n   suffice to let the application know it cannot add another\
    \ peer, it\n   would be far better if the application had prior knowledge of this\n\
    \   limitation and could prevent the user from starting down the path\n   that\
    \ could not succeed.\n   Device deviations are declared using the \"deviation\"\
    \ statement, which\n   takes as its argument a string that identifies a node in\
    \ the schema\n   tree.  The contents of the statement details the manner in which\
    \ the\n   device implementation deviates from the contract as defined in the\n\
    \   module.\n   Further details are available in Section 7.18.3.\n"
- title: 5.6.4.  Announcing Conformance Information in the <hello> Message
  contents:
  - "5.6.4.  Announcing Conformance Information in the <hello> Message\n   The namespace\
    \ URI MUST be advertised as a capability in the NETCONF\n   <hello> message to\
    \ indicate support for the YANG module by a NETCONF\n   server.  The capability\
    \ URI advertised MUST be of the form:\n     capability-string   = namespace-uri\
    \ [ parameter-list ]\n     parameter-list      = \"?\" parameter *( \"&\" parameter\
    \ )\n     parameter           = revision-parameter /\n                       \
    \    module-parameter /\n                           feature-parameter /\n    \
    \                       deviation-parameter\n     revision-parameter  = \"revision=\"\
    \ revision-date\n     module-parameter    = \"module=\" module-name\n     feature-parameter\
    \   = \"features=\" feature *( \",\" feature )\n     deviation-parameter = \"\
    deviations=\" deviation *( \",\" deviation )\n   Where \"revision-date\" is the\
    \ revision of the module (see\n   Section 7.1.9) that the NETCONF server implements,\
    \ \"module-name\" is\n   the name of module as it appears in the \"module\" statement\
    \ (see\n   Section 7.1), \"namespace-uri\" is the namespace URI for the module\
    \ as\n   it appears in the \"namespace\" statement (see Section 7.1.3),\n   \"\
    feature\" is the name of an optional feature implemented by the\n   device (see\
    \ Section 7.18.1), and \"deviation\" is the name of a module\n   defining device\
    \ deviations (see Section 7.18.3).\n   In the parameter list, each named parameter\
    \ MUST occur at most once.\n"
- title: 5.6.4.1.  Modules
  contents:
  - "5.6.4.1.  Modules\n   Servers indicate the names of supported modules via the\
    \ <hello>\n   message.  Module namespaces are encoded as the base URI in the\n\
    \   capability string, and the module name is encoded as the \"module\"\n   parameter\
    \ to the base URI.\n   A server MUST advertise all revisions of all modules it\
    \ implements.\n   For example, this <hello> message advertises one module \"syslog\"\
    .\n   <hello xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\">\n     <capability>\n\
    \       http://example.com/syslog?module=syslog&amp;revision=2008-04-01\n    \
    \ </capability>\n   </hello>\n"
- title: 5.6.4.2.  Features
  contents:
  - "5.6.4.2.  Features\n   Servers indicate the names of supported features via the\
    \ <hello>\n   message.  In <hello> messages, the features are encoded in the\n\
    \   \"features\" parameter within the URI.  The value of this parameter is\n \
    \  a comma-separated list of feature names that the device supports for\n   the\
    \ specific module.\n   For example, this <hello> message advertises one module,\
    \ informing\n   the client that it supports the \"local-storage\" feature of module\n\
    \   \"syslog\".\n"
- title: <hello xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
  contents:
  - "<hello xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\">\n  <capability>\n \
    \   http://example.com/syslog?module=syslog&amp;features=local-storage\n  </capability>\n"
- title: </hello>
  contents:
  - '</hello>

    '
- title: 5.6.4.3.  Deviations
  contents:
  - "5.6.4.3.  Deviations\n   Device deviations are announced via the \"deviations\"\
    \ parameter.  The\n   value of the \"deviations\" parameter is a comma-separated\
    \ list of\n   modules containing deviations from the capability's module.\n  \
    \ For example, this <hello> message advertises two modules, informing\n   the\
    \ client that it deviates from module \"syslog\" according to the\n   deviations\
    \ listed in the module \"my-devs\".\n   <hello xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    >\n       <capability>\n         http://example.com/syslog?module=syslog&amp;deviations=my-devs\n\
    \       </capability>\n       <capability>\n         http://example.com/my-deviations?module=my-devs\n\
    \       </capability>\n     </hello>\n"
- title: 5.7.  Data Store Modification
  contents:
  - "5.7.  Data Store Modification\n   Data models may allow the server to alter the\
    \ configuration data\n   store in ways not explicitly directed via NETCONF protocol\
    \ messages.\n   For example, a data model may define leafs that are assigned system-\n\
    \   generated values when the client does not provide one.  A formal\n   mechanism\
    \ for specifying the circumstances where these changes are\n   allowed is out\
    \ of scope for this specification.\n"
- title: 6.  YANG Syntax
  contents:
  - "6.  YANG Syntax\n   The YANG syntax is similar to that of SMIng [RFC3780] and\
    \ programming\n   languages like C and C++.  This C-like syntax was chosen specifically\n\
    \   for its readability, since YANG values the time and effort of the\n   readers\
    \ of models above those of modules writers and YANG tool-chain\n   developers.\
    \  This section introduces the YANG syntax.\n   YANG modules use the UTF-8 [RFC3629]\
    \ character encoding.\n"
- title: 6.1.  Lexical Tokenization
  contents:
  - "6.1.  Lexical Tokenization\n   YANG modules are parsed as a series of tokens.\
    \  This section details\n   the rules for recognizing tokens from an input stream.\
    \  YANG\n   tokenization rules are both simple and powerful.  The simplicity is\n\
    \   driven by a need to keep the parsers easy to implement, while the\n   power\
    \ is driven by the fact that modelers need to express their\n   models in readable\
    \ formats.\n"
- title: 6.1.1.  Comments
  contents:
  - "6.1.1.  Comments\n   Comments are C++ style.  A single line comment starts with\
    \ \"//\" and\n   ends at the end of the line.  A block comment is enclosed within\
    \ \"/*\"\n   and \"*/\".\n"
- title: 6.1.2.  Tokens
  contents:
  - "6.1.2.  Tokens\n   A token in YANG is either a keyword, a string, a semicolon\
    \ (\";\"), or\n   braces (\"{\" or \"}\").  A string can be quoted or unquoted.\
    \  A keyword\n   is either one of the YANG keywords defined in this document,\
    \ or a\n   prefix identifier, followed by \":\", followed by a language extension\n\
    \   keyword.  Keywords are case sensitive.  See Section 6.2 for a formal\n   definition\
    \ of identifiers.\n"
- title: 6.1.3.  Quoting
  contents:
  - "6.1.3.  Quoting\n   If a string contains any space or tab characters, a semicolon\
    \ (\";\"),\n   braces (\"{\" or \"}\"), or comment sequences (\"//\", \"/*\",\
    \ or \"*/\"), then\n   it MUST be enclosed within double or single quotes.\n \
    \  If the double-quoted string contains a line break followed by space\n   or\
    \ tab characters that are used to indent the text according to the\n   layout\
    \ in the YANG file, this leading whitespace is stripped from the\n   string, up\
    \ to and including the column of the double quote character,\n   or to the first\
    \ non-whitespace character, whichever occurs first.  In\n   this process, a tab\
    \ character is treated as 8 space characters.\n   If the double-quoted string\
    \ contains space or tab characters before a\n   line break, this trailing whitespace\
    \ is stripped from the string.\n   A single-quoted string (enclosed within ' ')\
    \ preserves each character\n   within the quotes.  A single quote character cannot\
    \ occur in a\n   single-quoted string, even when preceded by a backslash.\n  \
    \ Within a double-quoted string (enclosed within \" \"), a backslash\n   character\
    \ introduces a special character, which depends on the\n   character that immediately\
    \ follows the backslash:\n    \\n      new line\n    \\t      a tab character\n\
    \    \\\"      a double quote\n    \\\\      a single backslash\n   If a quoted\
    \ string is followed by a plus character (\"+\"), followed by\n   another quoted\
    \ string, the two strings are concatenated into one\n   string, allowing multiple\
    \ concatenations to build one string.\n   Whitespace trimming and substitution\
    \ of backslash-escaped characters\n   in double-quoted strings is done before\
    \ concatenation.\n"
- title: 6.1.3.1.  Quoting Examples
  contents:
  - "6.1.3.1.  Quoting Examples\n   The following strings are equivalent:\n     hello\n\
    \     \"hello\"\n     'hello'\n     \"hel\" + \"lo\"\n     'hel' + \"lo\"\n  \
    \ The following examples show some special strings:\n     \"\\\"\"  - string containing\
    \ a double quote\n     '\"'   - string containing a double quote\n     \"\\n\"\
    \  - string containing a new line character\n     '\\n'  - string containing a\
    \ backslash followed\n             by the character n\n   The following examples\
    \ show some illegal strings:\n     ''''  - a single-quoted string cannot contain\
    \ single quotes\n     \"\"\"   - a double quote must be escaped in a double-quoted\
    \ string\n   The following strings are equivalent:\n         \"first line\n  \
    \          second line\"\n     \"first line\\n\" + \"  second line\"\n"
- title: 6.2.  Identifiers
  contents:
  - "6.2.  Identifiers\n   Identifiers are used to identify different kinds of YANG\
    \ items by\n   name.  Each identifier starts with an uppercase or lowercase ASCII\n\
    \   letter or an underscore character, followed by zero or more ASCII\n   letters,\
    \ digits, underscore characters, hyphens, and dots.\n   Implementations MUST support\
    \ identifiers up to 64 characters in\n   length.  Identifiers are case sensitive.\
    \  The identifier syntax is\n   formally defined by the rule \"identifier\" in\
    \ Section 12.  Identifiers\n   can be specified as quoted or unquoted strings.\n"
- title: 6.2.1.  Identifiers and Their Namespaces
  contents:
  - "6.2.1.  Identifiers and Their Namespaces\n   Each identifier is valid in a namespace\
    \ that depends on the type of\n   the YANG item being defined.  All identifiers\
    \ defined in a namespace\n   MUST be unique.\n   o  All module and submodule names\
    \ share the same global module\n      identifier namespace.\n   o  All extension\
    \ names defined in a module and its submodules share\n      the same extension\
    \ identifier namespace.\n   o  All feature names defined in a module and its submodules\
    \ share the\n      same feature identifier namespace.\n   o  All identity names\
    \ defined in a module and its submodules share\n      the same identity identifier\
    \ namespace.\n   o  All derived type names defined within a parent node or at\
    \ the top\n      level of the module or its submodules share the same type\n \
    \     identifier namespace.  This namespace is scoped to all descendant\n    \
    \  nodes of the parent node or module.  This means that any\n      descendent\
    \ node may use that typedef, and it MUST NOT define a\n      typedef with the\
    \ same name.\n   o  All grouping names defined within a parent node or at the\
    \ top\n      level of the module or its submodules share the same grouping\n \
    \     identifier namespace.  This namespace is scoped to all descendant\n    \
    \  nodes of the parent node or module.  This means that any\n      descendent\
    \ node may use that grouping, and it MUST NOT define a\n      grouping with the\
    \ same name.\n   o  All leafs, leaf-lists, lists, containers, choices, rpcs,\n\
    \      notifications, and anyxmls defined (directly or through a uses\n      statement)\
    \ within a parent node or at the top level of the module\n      or its submodules\
    \ share the same identifier namespace.  This\n      namespace is scoped to the\
    \ parent node or module, unless the\n      parent node is a case node.  In that\
    \ case, the namespace is scoped\n      to the closest ancestor node that is not\
    \ a case or choice node.\n   o  All cases within a choice share the same case\
    \ identifier\n      namespace.  This namespace is scoped to the parent choice\
    \ node.\n   Forward references are allowed in YANG.\n"
- title: 6.3.  Statements
  contents:
  - "6.3.  Statements\n   A YANG module contains a sequence of statements.  Each statement\n\
    \   starts with a keyword, followed by zero or one argument, followed\n   either\
    \ by a semicolon (\";\") or a block of substatements enclosed\n   within braces\
    \ (\"{ }\"):\n     statement = keyword [argument] (\";\" / \"{\" *statement \"\
    }\")\n   The argument is a string, as defined in Section 6.1.2.\n"
- title: 6.3.1.  Language Extensions
  contents:
  - "6.3.1.  Language Extensions\n   A module can introduce YANG extensions by using\
    \ the \"extension\"\n   keyword (see Section 7.17).  The extensions can be imported\
    \ by other\n   modules with the \"import\" statement (see Section 7.1.5).  When\
    \ an\n   imported extension is used, the extension's keyword MUST be qualified\n\
    \   using the prefix with which the extension's module was imported.  If\n   an\
    \ extension is used in the module where it is defined, the\n   extension's keyword\
    \ MUST be qualified with the module's prefix.\n   Since submodules cannot include\
    \ the parent module, any extensions in\n   the module that need to be exposed\
    \ to submodules MUST be defined in a\n   submodule.  Submodules can then include\
    \ this submodule to find the\n   definition of the extension.\n   If a YANG compiler\
    \ does not support a particular extension, which\n   appears in a YANG module\
    \ as an unknown-statement (see Section 12),\n   the entire unknown-statement MAY\
    \ be ignored by the compiler.\n"
- title: 6.4.  XPath Evaluations
  contents:
  - "6.4.  XPath Evaluations\n   YANG relies on XML Path Language (XPath) 1.0 [XPATH]\
    \ as a notation\n   for specifying many inter-node references and dependencies.\
    \  NETCONF\n   clients and servers are not required to implement an XPath\n  \
    \ interpreter, but MUST ensure that the requirements encoded in the\n   data model\
    \ are enforced.  The manner of enforcement is an\n   implementation decision.\
    \  The XPath expressions MUST be syntactically\n   correct, and all prefixes used\
    \ MUST be present in the XPath context\n   (see Section 6.4.1).  An implementation\
    \ may choose to implement them\n   by hand, rather than using the XPath expression\
    \ directly.\n   The data model used in the XPath expressions is the same as that\
    \ used\n   in XPath 1.0 [XPATH], with the same extension for root node children\n\
    \   as used by XSLT 1.0 [XSLT] (Section 3.1).  Specifically, it means\n   that\
    \ the root node may have any number of element nodes as its\n   children.\n"
- title: 6.4.1.  XPath Context
  contents:
  - "6.4.1.  XPath Context\n   All YANG XPath expressions share the following XPath\
    \ context\n   definition:\n   o  The set of namespace declarations is the set\
    \ of all \"import\"\n      statements' prefix and namespace pairs in the module\
    \ where the\n      XPath expression is specified, and the \"prefix\" statement's\
    \ prefix\n      for the \"namespace\" statement's URI.\n   o  Names without a\
    \ namespace prefix belong to the same namespace as\n      the identifier of the\
    \ current node.  Inside a grouping, that\n      namespace is affected by where\
    \ the grouping is used (see\n      Section 7.12).\n   o  The function library\
    \ is the core function library defined in\n      [XPATH], and a function \"current()\"\
    \ that returns a node set with\n      the initial context node.\n   o  The set\
    \ of variable bindings is empty.\n   The mechanism for handling unprefixed names\
    \ is adopted from XPath 2.0\n   [XPATH2.0], and helps simplify XPath expressions\
    \ in YANG.  No\n   ambiguity may ever arise because YANG node identifiers are\
    \ always\n   qualified names with a non-null namespace URI.\n   The context node\
    \ varies with the YANG XPath expression, and is\n   specified where the YANG statement\
    \ with the XPath expression is\n   defined.\n"
- title: 6.5.  Schema Node Identifier
  contents:
  - "6.5.  Schema Node Identifier\n   A schema node identifier is a string that identifies\
    \ a node in the\n   schema tree.  It has two forms, \"absolute\" and \"descendant\"\
    , defined\n   by the rules \"absolute-schema-nodeid\" and \"descendant-schema-nodeid\"\
    \n   in Section 12, respectively.  A schema node identifier consists of a\n  \
    \ path of identifiers, separated by slashes (\"/\").  In an absolute\n   schema\
    \ node identifier, the first identifier after the leading slash\n   is any top-level\
    \ schema node in the local module or in all imported\n   modules.\n   References\
    \ to identifiers defined in external modules MUST be\n   qualified with appropriate\
    \ prefixes, and references to identifiers\n   defined in the current module and\
    \ its submodules MAY use a prefix.\n   For example, to identify the child node\
    \ \"b\" of top-level node \"a\",\n   the string \"/a/b\" can be used.\n"
- title: 7.  YANG Statements
  contents:
  - "7.  YANG Statements\n   The following sections describe all of the YANG statements.\n\
    \   Note that even a statement that does not have any substatements\n   defined\
    \ in YANG can have vendor-specific extensions as substatements.\n   For example,\
    \ the \"description\" statement does not have any\n   substatements defined in\
    \ YANG, but the following is legal:\n     description \"some text\" {\n      \
    \   acme:documentation-flag 5;\n     }\n"
- title: 7.1.  The module Statement
  contents:
  - "7.1.  The module Statement\n   The \"module\" statement defines the module's\
    \ name, and groups all\n   statements that belong to the module together.  The\
    \ \"module\"\n   statement's argument is the name of the module, followed by a\
    \ block\n   of substatements that hold detailed module information.  The module\n\
    \   name follows the rules for identifiers in Section 6.2.\n   Names of modules\
    \ published in RFC streams [RFC4844] MUST be assigned\n   by IANA, see Section\
    \ 14.\n   Private module names are assigned by the organization owning the\n \
    \  module without a central registry.  It is RECOMMENDED to choose\n   module\
    \ names that will have a low probability of colliding with\n   standard or other\
    \ enterprise modules and submodules, e.g., by using\n   the enterprise or organization\
    \ name as a prefix for the module name.\n   A module typically has the following\
    \ layout:\n     module <module-name> {\n         // header information\n     \
    \    <yang-version statement>\n         <namespace statement>\n         <prefix\
    \ statement>\n         // linkage statements\n         <import statements>\n \
    \        <include statements>\n         // meta information\n         <organization\
    \ statement>\n         <contact statement>\n         <description statement>\n\
    \         <reference statement>\n         // revision history\n         <revision\
    \ statements>\n         // module definitions\n         <other statements>\n \
    \    }\n"
- title: 7.1.1.  The module's Substatements
  contents:
  - "7.1.1.  The module's Substatements\n                 +--------------+---------+-------------+\n\
    \                 | substatement | section | cardinality |\n                 +--------------+---------+-------------+\n\
    \                 | anyxml       | 7.10    | 0..n        |\n                 |\
    \ augment      | 7.15    | 0..n        |\n                 | choice       | 7.9\
    \     | 0..n        |\n                 | contact      | 7.1.8   | 0..1      \
    \  |\n                 | container    | 7.5     | 0..n        |\n            \
    \     | description  | 7.19.3  | 0..1        |\n                 | deviation \
    \   | 7.18.3  | 0..n        |\n                 | extension    | 7.17    | 0..n\
    \        |\n                 | feature      | 7.18.1  | 0..n        |\n      \
    \           | grouping     | 7.11    | 0..n        |\n                 | identity\
    \     | 7.16    | 0..n        |\n                 | import       | 7.1.5   | 0..n\
    \        |\n                 | include      | 7.1.6   | 0..n        |\n      \
    \           | leaf         | 7.6     | 0..n        |\n                 | leaf-list\
    \    | 7.7     | 0..n        |\n                 | list         | 7.8     | 0..n\
    \        |\n                 | namespace    | 7.1.3   | 1           |\n      \
    \           | notification | 7.14    | 0..n        |\n                 | organization\
    \ | 7.1.7   | 0..1        |\n                 | prefix       | 7.1.4   | 1   \
    \        |\n                 | reference    | 7.19.4  | 0..1        |\n      \
    \           | revision     | 7.1.9   | 0..n        |\n                 | rpc \
    \         | 7.13    | 0..n        |\n                 | typedef      | 7.3   \
    \  | 0..n        |\n                 | uses         | 7.12    | 0..n        |\n\
    \                 | yang-version | 7.1.2   | 0..1        |\n                 +--------------+---------+-------------+\n"
- title: 7.1.2.  The yang-version Statement
  contents:
  - "7.1.2.  The yang-version Statement\n   The optional \"yang-version\" statement\
    \ specifies which version of the\n   YANG language was used in developing the\
    \ module.  The statement's\n   argument is a string.  If present, it MUST contain\
    \ the value \"1\",\n   which is the current YANG version and the default value.\n\
    \   Handling of the \"yang-version\" statement for versions other than \"1\"\n\
    \   (the version defined here) is out of scope for this specification.\n   Any\
    \ document that defines a higher version will need to define the\n   backward\
    \ compatibility of such a higher version.\n"
- title: 7.1.3.  The namespace Statement
  contents:
  - "7.1.3.  The namespace Statement\n   The \"namespace\" statement defines the XML\
    \ namespace that all\n   identifiers defined by the module are qualified by, with\
    \ the\n   exception of data node identifiers defined inside a grouping (see\n\
    \   Section 7.12 for details).  The argument to the \"namespace\" statement\n\
    \   is the URI of the namespace.\n   See also Section 5.3.\n"
- title: 7.1.4.  The prefix Statement
  contents:
  - "7.1.4.  The prefix Statement\n   The \"prefix\" statement is used to define the\
    \ prefix associated with\n   the module and its namespace.  The \"prefix\" statement's\
    \ argument is\n   the prefix string that is used as a prefix to access a module.\
    \  The\n   prefix string MAY be used to refer to definitions contained in the\n\
    \   module, e.g., \"if:ifName\".  A prefix follows the same rules as an\n   identifier\
    \ (see Section 6.2).\n   When used inside the \"module\" statement, the \"prefix\"\
    \ statement\n   defines the prefix to be used when this module is imported.  To\n\
    \   improve readability of the NETCONF XML, a NETCONF client or server\n   that\
    \ generates XML or XPath that use prefixes SHOULD use the prefix\n   defined by\
    \ the module, unless there is a conflict.\n   When used inside the \"import\"\
    \ statement, the \"prefix\" statement\n   defines the prefix to be used when accessing\
    \ definitions inside the\n   imported module.  When a reference to an identifier\
    \ from the imported\n   module is used, the prefix string for the imported module\
    \ is used in\n   combination with a colon (\":\") and the identifier, e.g., \"\
    if:\n   ifIndex\".  To improve readability of YANG modules, the prefix defined\n\
    \   by a module SHOULD be used when the module is imported, unless there\n   is\
    \ a conflict.  If there is a conflict, i.e., two different modules\n   that both\
    \ have defined the same prefix are imported, at least one of\n   them MUST be\
    \ imported with a different prefix.\n   All prefixes, including the prefix for\
    \ the module itself MUST be\n   unique within the module or submodule.\n"
- title: 7.1.5.  The import Statement
  contents:
  - "7.1.5.  The import Statement\n   The \"import\" statement makes definitions from\
    \ one module available\n   inside another module or submodule.  The argument is\
    \ the name of the\n   module to import, and the statement is followed by a block\
    \ of\n   substatements that holds detailed import information.  When a module\n\
    \   is imported, the importing module may:\n   o  use any grouping and typedef\
    \ defined at the top level in the\n      imported module or its submodules.\n\
    \   o  use any extension, feature, and identity defined in the imported\n    \
    \  module or its submodules.\n   o  use any node in the imported module's schema\
    \ tree in \"must\",\n      \"path\", and \"when\" statements, or as the target\
    \ node in \"augment\"\n      and \"deviation\" statements.\n   The mandatory \"\
    prefix\" substatement assigns a prefix for the imported\n   module that is scoped\
    \ to the importing module or submodule.  Multiple\n   \"import\" statements may\
    \ be specified to import from different\n   modules.\n   When the optional \"\
    revision-date\" substatement is present, any\n   typedef, grouping, extension,\
    \ feature, and identity referenced by\n   definitions in the local module are\
    \ taken from the specified revision\n   of the imported module.  It is an error\
    \ if the specified revision of\n   the imported module does not exist.  If no\
    \ \"revision-date\"\n   substatement is present, it is undefined from which revision\
    \ of the\n   module they are taken.\n   Multiple revisions of the same module\
    \ MUST NOT be imported.\n                        The import's Substatements\n\
    \                 +---------------+---------+-------------+\n                \
    \ | substatement  | section | cardinality |\n                 +---------------+---------+-------------+\n\
    \                 | prefix        | 7.1.4   | 1           |\n                \
    \ | revision-date | 7.1.5.1 | 0..1        |\n                 +---------------+---------+-------------+\n"
- title: 7.1.5.1.  The import's revision-date Statement
  contents:
  - "7.1.5.1.  The import's revision-date Statement\n   The import's \"revision-date\"\
    \ statement is used to specify the exact\n   version of the module to import.\
    \  The \"revision-date\" statement MUST\n   match the most recent \"revision\"\
    \ statement in the imported module.\n"
- title: 7.1.6.  The include Statement
  contents:
  - "7.1.6.  The include Statement\n   The \"include\" statement is used to make content\
    \ from a submodule\n   available to that submodule's parent module, or to another\
    \ submodule\n   of that parent module.  The argument is an identifier that is\
    \ the\n   name of the submodule to include.  Modules are only allowed to\n   include\
    \ submodules that belong to that module, as defined by the\n   \"belongs-to\"\
    \ statement (see Section 7.2.2).  Submodules are only\n   allowed to include other\
    \ submodules belonging to the same module.\n   When a module includes a submodule,\
    \ it incorporates the contents of\n   the submodule into the node hierarchy of\
    \ the module.  When a\n   submodule includes another submodule, the target submodule's\n\
    \   definitions are made available to the current submodule.\n   When the optional\
    \ \"revision-date\" substatement is present, the\n   specified revision of the\
    \ submodule is included in the module.  It is\n   an error if the specified revision\
    \ of the submodule does not exist.\n   If no \"revision-date\" substatement is\
    \ present, it is undefined which\n   revision of the submodule is included.\n\
    \   Multiple revisions of the same submodule MUST NOT be included.\n         \
    \              The includes's Substatements\n                 +---------------+---------+-------------+\n\
    \                 | substatement  | section | cardinality |\n                \
    \ +---------------+---------+-------------+\n                 | revision-date\
    \ | 7.1.5.1 | 0..1        |\n                 +---------------+---------+-------------+\n"
- title: 7.1.7.  The organization Statement
  contents:
  - "7.1.7.  The organization Statement\n   The \"organization\" statement defines\
    \ the party responsible for this\n   module.  The argument is a string that is\
    \ used to specify a textual\n   description of the organization(s) under whose\
    \ auspices this module\n   was developed.\n"
- title: 7.1.8.  The contact Statement
  contents:
  - "7.1.8.  The contact Statement\n   The \"contact\" statement provides contact\
    \ information for the module.\n   The argument is a string that is used to specify\
    \ contact information\n   for the person or persons to whom technical queries\
    \ concerning this\n   module should be sent, such as their name, postal address,\
    \ telephone\n   number, and electronic mail address.\n"
- title: 7.1.9.  The revision Statement
  contents:
  - "7.1.9.  The revision Statement\n   The \"revision\" statement specifies the editorial\
    \ revision history of\n   the module, including the initial revision.  A series\
    \ of revision\n   statements detail the changes in the module's definition.  The\n\
    \   argument is a date string in the format \"YYYY-MM-DD\", followed by a\n  \
    \ block of substatements that holds detailed revision information.  A\n   module\
    \ SHOULD have at least one initial \"revision\" statement.  For\n   every published\
    \ editorial change, a new one SHOULD be added in front\n   of the revisions sequence,\
    \ so that all revisions are in reverse\n   chronological order.\n"
- title: 7.1.9.1.  The revision's Substatement
  contents:
  - "7.1.9.1.  The revision's Substatement\n                 +--------------+---------+-------------+\n\
    \                 | substatement | section | cardinality |\n                 +--------------+---------+-------------+\n\
    \                 | description  | 7.19.3  | 0..1        |\n                 |\
    \ reference    | 7.19.4  | 0..1        |\n                 +--------------+---------+-------------+\n"
- title: 7.1.10.  Usage Example
  contents:
  - "7.1.10.  Usage Example\n     module acme-system {\n         namespace \"http://acme.example.com/system\"\
    ;\n         prefix \"acme\";\n         import ietf-yang-types {\n            \
    \ prefix \"yang\";\n         }\n         include acme-types;\n         organization\
    \ \"ACME Inc.\";\n         contact\n             \"Joe L. User\n             \
    \ ACME, Inc.\n              42 Anywhere Drive\n              Nowhere, CA 95134\n\
    \              USA\n              Phone: +1 800 555 0100\n              EMail:\
    \ joe@acme.example.com\";\n         description\n             \"The module for\
    \ entities implementing the ACME protocol.\";\n         revision \"2007-06-09\"\
    \ {\n             description \"Initial revision.\";\n         }\n         //\
    \ definitions follow...\n     }\n"
- title: 7.2.  The submodule Statement
  contents:
  - "7.2.  The submodule Statement\n   While the primary unit in YANG is a module,\
    \ a YANG module can itself\n   be constructed out of several submodules.  Submodules\
    \ allow a module\n   designer to split a complex model into several pieces where\
    \ all the\n   submodules contribute to a single namespace, which is defined by\
    \ the\n   module that includes the submodules.\n   The \"submodule\" statement\
    \ defines the submodule's name, and groups\n   all statements that belong to the\
    \ submodule together.  The\n   \"submodule\" statement's argument is the name\
    \ of the submodule,\n   followed by a block of substatements that hold detailed\
    \ submodule\n   information.  The submodule name follows the rules for identifiers\
    \ in\n   Section 6.2.\n   Names of submodules published in RFC streams [RFC4844]\
    \ MUST be\n   assigned by IANA, see Section 14.\n   Private submodule names are\
    \ assigned by the organization owning the\n   submodule without a central registry.\
    \  It is RECOMMENDED to choose\n   submodule names that will have a low probability\
    \ of colliding with\n   standard or other enterprise modules and submodules, e.g.,\
    \ by using\n   the enterprise or organization name as a prefix for the submodule\n\
    \   name.\n   A submodule typically has the following layout:\n     submodule\
    \ <module-name> {\n         <yang-version statement>\n         // module identification\n\
    \         <belongs-to statement>\n         // linkage statements\n         <import\
    \ statements>\n         <include statements>\n         // meta information\n \
    \        <organization statement>\n         <contact statement>\n         <description\
    \ statement>\n         <reference statement>\n         // revision history\n \
    \        <revision statements>\n         // module definitions\n         <other\
    \ statements>\n     }\n"
- title: 7.2.1.  The submodule's Substatements
  contents:
  - "7.2.1.  The submodule's Substatements\n                 +--------------+---------+-------------+\n\
    \                 | substatement | section | cardinality |\n                 +--------------+---------+-------------+\n\
    \                 | anyxml       | 7.10    | 0..n        |\n                 |\
    \ augment      | 7.15    | 0..n        |\n                 | belongs-to   | 7.2.2\
    \   | 1           |\n                 | choice       | 7.9     | 0..n        |\n\
    \                 | contact      | 7.1.8   | 0..1        |\n                 |\
    \ container    | 7.5     | 0..n        |\n                 | description  | 7.19.3\
    \  | 0..1        |\n                 | deviation    | 7.18.3  | 0..n        |\n\
    \                 | extension    | 7.17    | 0..n        |\n                 |\
    \ feature      | 7.18.1  | 0..n        |\n                 | grouping     | 7.11\
    \    | 0..n        |\n                 | identity     | 7.16    | 0..n       \
    \ |\n                 | import       | 7.1.5   | 0..n        |\n             \
    \    | include      | 7.1.6   | 0..n        |\n                 | leaf       \
    \  | 7.6     | 0..n        |\n                 | leaf-list    | 7.7     | 0..n\
    \        |\n                 | list         | 7.8     | 0..n        |\n      \
    \           | notification | 7.14    | 0..n        |\n                 | organization\
    \ | 7.1.7   | 0..1        |\n                 | reference    | 7.19.4  | 0..1\
    \        |\n                 | revision     | 7.1.9   | 0..n        |\n      \
    \           | rpc          | 7.13    | 0..n        |\n                 | typedef\
    \      | 7.3     | 0..n        |\n                 | uses         | 7.12    |\
    \ 0..n        |\n                 | yang-version | 7.1.2   | 0..1        |\n \
    \                +--------------+---------+-------------+\n"
- title: 7.2.2.  The belongs-to Statement
  contents:
  - "7.2.2.  The belongs-to Statement\n   The \"belongs-to\" statement specifies the\
    \ module to which the\n   submodule belongs.  The argument is an identifier that\
    \ is the name of\n   the module.\n   A submodule MUST only be included by the\
    \ module to which it belongs,\n   or by another submodule that belongs to that\
    \ module.\n   The mandatory \"prefix\" substatement assigns a prefix for the module\n\
    \   to which the submodule belongs.  All definitions in the local\n   submodule\
    \ and any included submodules can be accessed by using the\n   prefix.\n     \
    \                 The belongs-to's Substatements\n                 +--------------+---------+-------------+\n\
    \                 | substatement | section | cardinality |\n                 +--------------+---------+-------------+\n\
    \                 | prefix       | 7.1.4   | 1           |\n                 +--------------+---------+-------------+\n"
- title: 7.2.3.  Usage Example
  contents:
  - "7.2.3.  Usage Example\n     submodule acme-types {\n         belongs-to \"acme-system\"\
    \ {\n             prefix \"acme\";\n         }\n         import ietf-yang-types\
    \ {\n             prefix \"yang\";\n         }\n         organization \"ACME Inc.\"\
    ;\n         contact\n             \"Joe L. User\n              ACME, Inc.\n  \
    \            42 Anywhere Drive\n              Nowhere, CA 95134\n            \
    \  USA\n              Phone: +1 800 555 0100\n              EMail: joe@acme.example.com\"\
    ;\n         description\n             \"This submodule defines common ACME types.\"\
    ;\n         revision \"2007-06-09\" {\n             description \"Initial revision.\"\
    ;\n         }\n         // definitions follows...\n     }\n"
- title: 7.3.  The typedef Statement
  contents:
  - "7.3.  The typedef Statement\n   The \"typedef\" statement defines a new type\
    \ that may be used locally\n   in the module, in modules or submodules which include\
    \ it, and by\n   other modules that import from it, according to the rules in\n\
    \   Section 5.5.  The new type is called the \"derived type\", and the type\n\
    \   from which it was derived is called the \"base type\".  All derived\n   types\
    \ can be traced back to a YANG built-in type.\n   The \"typedef\" statement's\
    \ argument is an identifier that is the name\n   of the type to be defined, and\
    \ MUST be followed by a block of\n   substatements that holds detailed typedef\
    \ information.\n   The name of the type MUST NOT be one of the YANG built-in types.\
    \  If\n   the typedef is defined at the top level of a YANG module or\n   submodule,\
    \ the name of the type to be defined MUST be unique within\n   the module.\n"
- title: 7.3.1.  The typedef's Substatements
  contents:
  - "7.3.1.  The typedef's Substatements\n                 +--------------+---------+-------------+\n\
    \                 | substatement | section | cardinality |\n                 +--------------+---------+-------------+\n\
    \                 | default      | 7.3.4   | 0..1        |\n                 |\
    \ description  | 7.19.3  | 0..1        |\n                 | reference    | 7.19.4\
    \  | 0..1        |\n                 | status       | 7.19.2  | 0..1        |\n\
    \                 | type         | 7.3.2   | 1           |\n                 |\
    \ units        | 7.3.3   | 0..1        |\n                 +--------------+---------+-------------+\n"
- title: 7.3.2.  The typedef's type Statement
  contents:
  - "7.3.2.  The typedef's type Statement\n   The \"type\" statement, which MUST be\
    \ present, defines the base type\n   from which this type is derived.  See Section\
    \ 7.4 for details.\n"
- title: 7.3.3.  The units Statement
  contents:
  - "7.3.3.  The units Statement\n   The \"units\" statement, which is optional, takes\
    \ as an argument a\n   string that contains a textual definition of the units\
    \ associated\n   with the type.\n"
- title: 7.3.4.  The typedef's default Statement
  contents:
  - "7.3.4.  The typedef's default Statement\n   The \"default\" statement takes as\
    \ an argument a string that contains a\n   default value for the new type.\n \
    \  The value of the \"default\" statement MUST be valid according to the\n   type\
    \ specified in the \"type\" statement.\n   If the base type has a default value,\
    \ and the new derived type does\n   not specify a new default value, the base\
    \ type's default value is\n   also the default value of the new derived type.\n\
    \   If the type's default value is not valid according to the new\n   restrictions\
    \ specified in a derived type or leaf definition, the\n   derived type or leaf\
    \ definition MUST specify a new default value\n   compatible with the restrictions.\n"
- title: 7.3.5.  Usage Example
  contents:
  - "7.3.5.  Usage Example\n     typedef listen-ipv4-address {\n         type inet:ipv4-address;\n\
    \         default \"0.0.0.0\";\n     }\n"
- title: 7.4.  The type Statement
  contents:
  - "7.4.  The type Statement\n   The \"type\" statement takes as an argument a string\
    \ that is the name\n   of a YANG built-in type (see Section 9) or a derived type\
    \ (see\n   Section 7.3), followed by an optional block of substatements that are\n\
    \   used to put further restrictions on the type.\n   The restrictions that can\
    \ be applied depend on the type being\n   restricted.  The restriction statements\
    \ for all built-in types are\n   described in the subsections of Section 9.\n"
- title: 7.4.1.  The type's Substatements
  contents:
  - "7.4.1.  The type's Substatements\n               +------------------+---------+-------------+\n\
    \               | substatement     | section | cardinality |\n               +------------------+---------+-------------+\n\
    \               | bit              | 9.7.4   | 0..n        |\n               |\
    \ enum             | 9.6.4   | 0..n        |\n               | length        \
    \   | 9.4.4   | 0..1        |\n               | path             | 9.9.2   | 0..1\
    \        |\n               | pattern          | 9.4.6   | 0..n        |\n    \
    \           | range            | 9.2.4   | 0..1        |\n               | require-instance\
    \ | 9.13.2  | 0..1        |\n               | type             | 7.4     | 0..n\
    \        |\n               +------------------+---------+-------------+\n"
- title: 7.5.  The container Statement
  contents:
  - "7.5.  The container Statement\n   The \"container\" statement is used to define\
    \ an interior data node in\n   the schema tree.  It takes one argument, which\
    \ is an identifier,\n   followed by a block of substatements that holds detailed\
    \ container\n   information.\n   A container node does not have a value, but it\
    \ has a list of child\n   nodes in the data tree.  The child nodes are defined\
    \ in the\n   container's substatements.\n"
- title: 7.5.1.  Containers with Presence
  contents:
  - "7.5.1.  Containers with Presence\n   YANG supports two styles of containers,\
    \ those that exist only for\n   organizing the hierarchy of data nodes, and those\
    \ whose presence in\n   the configuration has an explicit meaning.\n   In the\
    \ first style, the container has no meaning of its own, existing\n   only to contain\
    \ child nodes.  This is the default style.\n   For example, the set of scrambling\
    \ options for Synchronous Optical\n   Network (SONET) interfaces may be placed\
    \ inside a \"scrambling\"\n   container to enhance the organization of the configuration\
    \ hierarchy,\n   and to keep these nodes together.  The \"scrambling\" node itself\
    \ has\n   no meaning, so removing the node when it becomes empty relieves the\n\
    \   user from performing this task.\n   In the second style, the presence of the\
    \ container itself is\n   configuration data, representing a single bit of configuration\
    \ data.\n   The container acts as both a configuration knob and a means of\n \
    \  organizing related configuration.  These containers are explicitly\n   created\
    \ and deleted.\n   YANG calls this style a \"presence container\" and it is indicated\n\
    \   using the \"presence\" statement, which takes as its argument a text\n   string\
    \ indicating what the presence of the node means.\n   For example, an \"ssh\"\
    \ container may turn on the ability to log into\n   the device using ssh, but\
    \ can also contain any ssh-related\n   configuration knobs, such as connection\
    \ rates or retry limits.\n   The \"presence\" statement (see Section 7.5.5) is\
    \ used to give\n   semantics to the existence of the container in the data tree.\n"
- title: 7.5.2.  The container's Substatements
  contents:
  - "7.5.2.  The container's Substatements\n                 +--------------+---------+-------------+\n\
    \                 | substatement | section | cardinality |\n                 +--------------+---------+-------------+\n\
    \                 | anyxml       | 7.10    | 0..n        |\n                 |\
    \ choice       | 7.9     | 0..n        |\n                 | config       | 7.19.1\
    \  | 0..1        |\n                 | container    | 7.5     | 0..n        |\n\
    \                 | description  | 7.19.3  | 0..1        |\n                 |\
    \ grouping     | 7.11    | 0..n        |\n                 | if-feature   | 7.18.2\
    \  | 0..n        |\n                 | leaf         | 7.6     | 0..n        |\n\
    \                 | leaf-list    | 7.7     | 0..n        |\n                 |\
    \ list         | 7.8     | 0..n        |\n                 | must         | 7.5.3\
    \   | 0..n        |\n                 | presence     | 7.5.5   | 0..1        |\n\
    \                 | reference    | 7.19.4  | 0..1        |\n                 |\
    \ status       | 7.19.2  | 0..1        |\n                 | typedef      | 7.3\
    \     | 0..n        |\n                 | uses         | 7.12    | 0..n      \
    \  |\n                 | when         | 7.19.5  | 0..1        |\n            \
    \     +--------------+---------+-------------+\n"
- title: 7.5.3.  The must Statement
  contents:
  - "7.5.3.  The must Statement\n   The \"must\" statement, which is optional, takes\
    \ as an argument a\n   string that contains an XPath expression (see Section 6.4).\
    \  It is\n   used to formally declare a constraint on valid data.  The constraint\n\
    \   is enforced according to the rules in Section 8.\n   When a datastore is validated,\
    \ all \"must\" constraints are\n   conceptually evaluated once for each data node\
    \ in the data tree, and\n   for all leafs with default values in use (see Section\
    \ 7.6.1).  If a\n   data node does not exist in the data tree, and it does not\
    \ have a\n   default value, its \"must\" statements are not evaluated.\n   All\
    \ such constraints MUST evaluate to true for the data to be valid.\n   The XPath\
    \ expression is conceptually evaluated in the following\n   context, in addition\
    \ to the definition in Section 6.4.1:\n   o  The context node is the node in the\
    \ data tree for which the \"must\"\n      statement is defined.\n   o  The accessible\
    \ tree is made up of all nodes in the data tree, and\n      all leafs with default\
    \ values in use (see Section 7.6.1).\n   The accessible tree depends on the context\
    \ node:\n   o  If the context node represents configuration, the tree is the data\n\
    \      in the NETCONF datastore where the context node exists.  The XPath\n  \
    \    root node has all top-level configuration data nodes in all\n      modules\
    \ as children.\n   o  If the context node represents state data, the tree is all\
    \ state\n      data on the device, and the <running/> datastore.  The XPath root\n\
    \      node has all top-level data nodes in all modules as children.\n   o  If\
    \ the context node represents notification content, the tree is\n      the notification\
    \ XML instance document.  The XPath root node has\n      the element representing\
    \ the notification being defined as the\n      only child.\n   o  If the context\
    \ node represents RPC input parameters, the tree is\n      the RPC XML instance\
    \ document.  The XPath root node has the\n      element representing the RPC operation\
    \ being defined as the only\n      child.\n   o  If the context node represents\
    \ RPC output parameters, the tree is\n      the RPC reply instance document. \
    \ The XPath root node has the\n      elements representing the RPC output parameters\
    \ as children.\n   The result of the XPath expression is converted to a boolean\
    \ value\n   using the standard XPath rules.\n   Note that since all leaf values\
    \ in the data tree are conceptually\n   stored in their canonical form (see Sections\
    \ 7.6 and 7.7), any XPath\n   comparisons are done on the canonical value.\n \
    \  Also note that the XPath expression is conceptually evaluated.  This\n   means\
    \ that an implementation does not have to use an XPath evaluator\n   on the device.\
    \  How the evaluation is done in practice is an\n   implementation decision.\n"
- title: 7.5.4.  The must's Substatements
  contents:
  - "7.5.4.  The must's Substatements\n                 +---------------+---------+-------------+\n\
    \                 | substatement  | section | cardinality |\n                \
    \ +---------------+---------+-------------+\n                 | description  \
    \ | 7.19.3  | 0..1        |\n                 | error-app-tag | 7.5.4.2 | 0..1\
    \        |\n                 | error-message | 7.5.4.1 | 0..1        |\n     \
    \            | reference     | 7.19.4  | 0..1        |\n                 +---------------+---------+-------------+\n"
- title: 7.5.4.1.  The error-message Statement
  contents:
  - "7.5.4.1.  The error-message Statement\n   The \"error-message\" statement, which\
    \ is optional, takes a string as\n   an argument.  If the constraint evaluates\
    \ to false, the string is\n   passed as <error-message> in the <rpc-error>.\n"
- title: 7.5.4.2.  The error-app-tag Statement
  contents:
  - "7.5.4.2.  The error-app-tag Statement\n   The \"error-app-tag\" statement, which\
    \ is optional, takes a string as\n   an argument.  If the constraint evaluates\
    \ to false, the string is\n   passed as <error-app-tag> in the <rpc-error>.\n"
- title: 7.5.4.3.  Usage Example of must and error-message
  contents:
  - "7.5.4.3.  Usage Example of must and error-message\n     container interface {\n\
    \         leaf ifType {\n             type enumeration {\n                 enum\
    \ ethernet;\n                 enum atm;\n             }\n         }\n        \
    \ leaf ifMTU {\n             type uint32;\n         }\n         must \"ifType\
    \ != 'ethernet' or \" +\n              \"(ifType = 'ethernet' and ifMTU = 1500)\"\
    \ {\n             error-message \"An ethernet MTU must be 1500\";\n         }\n\
    \         must \"ifType != 'atm' or \" +\n              \"(ifType = 'atm' and\
    \ ifMTU <= 17966 and ifMTU >= 64)\" {\n             error-message \"An atm MTU\
    \ must be  64 .. 17966\";\n         }\n     }\n"
- title: 7.5.5.  The presence Statement
  contents:
  - "7.5.5.  The presence Statement\n   The \"presence\" statement assigns a meaning\
    \ to the presence of a\n   container in the data tree.  It takes as an argument\
    \ a string that\n   contains a textual description of what the node's presence\
    \ means.\n   If a container has the \"presence\" statement, the container's\n\
    \   existence in the data tree carries some meaning.  Otherwise, the\n   container\
    \ is used to give some structure to the data, and it carries\n   no meaning by\
    \ itself.\n   See Section 7.5.1 for additional information.\n"
- title: 7.5.6.  The container's Child Node Statements
  contents:
  - "7.5.6.  The container's Child Node Statements\n   Within a container, the \"\
    container\", \"leaf\", \"list\", \"leaf-list\",\n   \"uses\", \"choice\", and\
    \ \"anyxml\" statements can be used to define child\n   nodes to the container.\n"
- title: 7.5.7.  XML Mapping Rules
  contents:
  - "7.5.7.  XML Mapping Rules\n   A container node is encoded as an XML element.\
    \  The element's local\n   name is the container's identifier, and its namespace\
    \ is the module's\n   XML namespace (see Section 7.1.3).\n   The container's child\
    \ nodes are encoded as subelements to the\n   container element.  If the container\
    \ defines RPC input or output\n   parameters, these subelements are encoded in\
    \ the same order as they\n   are defined within the \"container\" statement. \
    \ Otherwise, the\n   subelements are encoded in any order.\n   A NETCONF server\
    \ that replies to a <get> or <get-config> request MAY\n   choose not to send a\
    \ container element if the container node does not\n   have the \"presence\" statement\
    \ and no child nodes exist.  Thus, a\n   client that receives an <rpc-reply> for\
    \ a <get> or <get-config>\n   request, must be prepared to handle the case that\
    \ a container node\n   without a \"presence\" statement is not present in the\
    \ XML.\n"
- title: 7.5.8.  NETCONF <edit-config> Operations
  contents:
  - "7.5.8.  NETCONF <edit-config> Operations\n   Containers can be created, deleted,\
    \ replaced, and modified through\n   <edit-config>, by using the \"operation\"\
    \ attribute (see [RFC4741],\n   Section 7.2) in the container's XML element.\n\
    \   If a container does not have a \"presence\" statement and the last\n   child\
    \ node is deleted, the NETCONF server MAY delete the container.\n   When a NETCONF\
    \ server processes an <edit-config> request, the\n   elements of procedure for\
    \ the container node are:\n      If the operation is \"merge\" or \"replace\"\
    , the node is created if\n      it does not exist.\n      If the operation is\
    \ \"create\", the node is created if it does not\n      exist.  If the node already\
    \ exists, a \"data-exists\" error is\n      returned.\n      If the operation\
    \ is \"delete\", the node is deleted if it exists.\n      If the node does not\
    \ exist, a \"data-missing\" error is returned.\n"
- title: 7.5.9.  Usage Example
  contents:
  - "7.5.9.  Usage Example\n   Given the following container definition:\n     container\
    \ system {\n         description \"Contains various system parameters\";\n   \
    \      container services {\n             description \"Configure externally available\
    \ services\";\n             container \"ssh\" {\n                 presence \"\
    Enables SSH\";\n                 description \"SSH service specific configuration\"\
    ;\n                 // more leafs, containers and stuff here...\n            \
    \ }\n         }\n     }\n   A corresponding XML instance example:\n     <system>\n\
    \       <services>\n         <ssh/>\n       </services>\n     </system>\n   Since\
    \ the <ssh> element is present, ssh is enabled.\n   To delete a container with\
    \ an <edit-config>:\n     <rpc message-id=\"101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    \n          xmlns:nc=\"urn:ietf:params:xml:ns:netconf:base:1.0\">\n       <edit-config>\n\
    \         <target>\n           <running/>\n         </target>\n         <config>\n\
    \           <system xmlns=\"http://example.com/schema/config\">\n            \
    \ <services>\n               <ssh nc:operation=\"delete\"/>\n             </services>\n\
    \           </system>\n         </config>\n       </edit-config>\n     </rpc>\n"
- title: 7.6.  The leaf Statement
  contents:
  - "7.6.  The leaf Statement\n   The \"leaf\" statement is used to define a leaf\
    \ node in the schema\n   tree.  It takes one argument, which is an identifier,\
    \ followed by a\n   block of substatements that holds detailed leaf information.\n\
    \   A leaf node has a value, but no child nodes in the data tree.\n   Conceptually,\
    \ the value in the data tree is always in the canonical\n   form (see Section\
    \ 9.1).\n   A leaf node exists in zero or one instances in the data tree.\n  \
    \ The \"leaf\" statement is used to define a scalar variable of a\n   particular\
    \ built-in or derived type.\n"
- title: 7.6.1.  The leaf's default value
  contents:
  - "7.6.1.  The leaf's default value\n   The default value of a leaf is the value\
    \ that the server uses if the\n   leaf does not exist in the data tree.  The usage\
    \ of the default value\n   depends on the leaf's closest ancestor node in the\
    \ schema tree that\n   is not a non-presence container:\n   o  If no such ancestor\
    \ exists in the schema tree, the default value\n      MUST be used.\n   o  Otherwise,\
    \ if this ancestor is a case node, the default value MUST\n      be used if any\
    \ node from the case exists in the data tree, or if\n      the case node is the\
    \ choice's default case, and no nodes from any\n      other case exist in the\
    \ data tree.\n   o  Otherwise, the default value MUST be used if the ancestor\
    \ node\n      exists in the data tree.\n   In these cases, the default value is\
    \ said to be in use.\n   When the default value is in use, the server MUST operationally\n\
    \   behave as if the leaf was present in the data tree with the default\n   value\
    \ as its value.\n   If a leaf has a \"default\" statement, the leaf's default\
    \ value is the\n   value of the \"default\" statement.  Otherwise, if the leaf's\
    \ type has\n   a default value, and the leaf is not mandatory, then the leaf's\n\
    \   default value is the type's default value.  In all other cases, the\n   leaf\
    \ does not have a default value.\n"
- title: 7.6.2.  The leaf's Substatements
  contents:
  - "7.6.2.  The leaf's Substatements\n                 +--------------+---------+-------------+\n\
    \                 | substatement | section | cardinality |\n                 +--------------+---------+-------------+\n\
    \                 | config       | 7.19.1  | 0..1        |\n                 |\
    \ default      | 7.6.4   | 0..1        |\n                 | description  | 7.19.3\
    \  | 0..1        |\n                 | if-feature   | 7.18.2  | 0..n        |\n\
    \                 | mandatory    | 7.6.5   | 0..1        |\n                 |\
    \ must         | 7.5.3   | 0..n        |\n                 | reference    | 7.19.4\
    \  | 0..1        |\n                 | status       | 7.19.2  | 0..1        |\n\
    \                 | type         | 7.6.3   | 1           |\n                 |\
    \ units        | 7.3.3   | 0..1        |\n                 | when         | 7.19.5\
    \  | 0..1        |\n                 +--------------+---------+-------------+\n"
- title: 7.6.3.  The leaf's type Statement
  contents:
  - "7.6.3.  The leaf's type Statement\n   The \"type\" statement, which MUST be present,\
    \ takes as an argument the\n   name of an existing built-in or derived type. \
    \ The optional\n   substatements specify restrictions on this type.  See Section\
    \ 7.4 for\n   details.\n"
- title: 7.6.4.  The leaf's default Statement
  contents:
  - "7.6.4.  The leaf's default Statement\n   The \"default\" statement, which is\
    \ optional, takes as an argument a\n   string that contains a default value for\
    \ the leaf.\n   The value of the \"default\" statement MUST be valid according\
    \ to the\n   type specified in the leaf's \"type\" statement.\n   The \"default\"\
    \ statement MUST NOT be present on nodes where\n   \"mandatory\" is true.\n"
- title: 7.6.5.  The leaf's mandatory Statement
  contents:
  - "7.6.5.  The leaf's mandatory Statement\n   The \"mandatory\" statement, which\
    \ is optional, takes as an argument\n   the string \"true\" or \"false\", and\
    \ puts a constraint on valid data.\n   If not specified, the default is \"false\"\
    .\n   If \"mandatory\" is \"true\", the behavior of the constraint depends on\n\
    \   the type of the leaf's closest ancestor node in the schema tree that\n   is\
    \ not a non-presence container (see Section 7.5.1):\n   o  If no such ancestor\
    \ exists in the schema tree, the leaf MUST\n      exist.\n   o  Otherwise, if\
    \ this ancestor is a case node, the leaf MUST exist if\n      any node from the\
    \ case exists in the data tree.\n   o  Otherwise, the leaf MUST exist if the ancestor\
    \ node exists in the\n      data tree.\n   This constraint is enforced according\
    \ to the rules in Section 8.\n"
- title: 7.6.6.  XML Mapping Rules
  contents:
  - "7.6.6.  XML Mapping Rules\n   A leaf node is encoded as an XML element.  The\
    \ element's local name\n   is the leaf's identifier, and its namespace is the\
    \ module's XML\n   namespace (see Section 7.1.3).\n   The value of the leaf node\
    \ is encoded to XML according to the type,\n   and sent as character data in the\
    \ element.\n   A NETCONF server that replies to a <get> or <get-config> request\
    \ MAY\n   choose not to send the leaf element if its value is the default\n  \
    \ value.  Thus, a client that receives an <rpc-reply> for a <get> or\n   <get-config>\
    \ request, MUST be prepared to handle the case that a leaf\n   node with a default\
    \ value is not present in the XML.  In this case,\n   the value used by the server\
    \ is known to be the default value.\n   See Section 7.6.8 for an example.\n"
- title: 7.6.7.  NETCONF <edit-config> Operations
  contents:
  - "7.6.7.  NETCONF <edit-config> Operations\n   When a NETCONF server processes\
    \ an <edit-config> request, the\n   elements of procedure for the leaf node are:\n\
    \      If the operation is \"merge\" or \"replace\", the node is created if\n\
    \      it does not exist, and its value is set to the value found in the\n   \
    \   XML RPC data.\n      If the operation is \"create\", the node is created if\
    \ it does not\n      exist.  If the node already exists, a \"data-exists\" error\
    \ is\n      returned.\n      If the operation is \"delete\", the node is deleted\
    \ if it exists.\n      If the node does not exist, a \"data-missing\" error is\
    \ returned.\n"
- title: 7.6.8.  Usage Example
  contents:
  - "7.6.8.  Usage Example\n   Given the following \"leaf\" statement, placed in the\
    \ previously\n   defined \"ssh\" container (see Section 7.5.9):\n     leaf port\
    \ {\n         type inet:port-number;\n         default 22;\n         description\
    \ \"The port to which the SSH server listens\"\n     }\n   A corresponding XML\
    \ instance example:\n     <port>2022</port>\n   To set the value of a leaf with\
    \ an <edit-config>:\n     <rpc message-id=\"101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    \n          xmlns:nc=\"urn:ietf:params:xml:ns:netconf:base:1.0\">\n       <edit-config>\n\
    \         <target>\n           <running/>\n         </target>\n         <config>\n\
    \           <system xmlns=\"http://example.com/schema/config\">\n            \
    \ <services>\n               <ssh>\n                 <port>2022</port>\n     \
    \          </ssh>\n             </services>\n           </system>\n         </config>\n\
    \       </edit-config>\n     </rpc>\n"
- title: 7.7.  The leaf-list Statement
  contents:
  - "7.7.  The leaf-list Statement\n   Where the \"leaf\" statement is used to define\
    \ a simple scalar variable\n   of a particular type, the \"leaf-list\" statement\
    \ is used to define an\n   array of a particular type.  The \"leaf-list\" statement\
    \ takes one\n   argument, which is an identifier, followed by a block of\n   substatements\
    \ that holds detailed leaf-list information.\n   The values in a leaf-list MUST\
    \ be unique.\n   Conceptually, the values in the data tree are always in the canonical\n\
    \   form (see Section 9.1).\n   If the type referenced by the leaf-list has a\
    \ default value, it has\n   no effect in the leaf-list.\n"
- title: 7.7.1.  Ordering
  contents:
  - "7.7.1.  Ordering\n   YANG supports two styles for ordering the entries within\
    \ lists and\n   leaf-lists.  In many lists, the order of list entries does not\
    \ impact\n   the implementation of the list's configuration, and the device is\n\
    \   free to sort the list entries in any reasonable order.  The\n   \"description\"\
    \ string for the list may suggest an order to the device\n   implementor.  YANG\
    \ calls this style of list \"system ordered\" and they\n   are indicated with\
    \ the statement \"ordered-by system\".\n   For example, a list of valid users\
    \ would typically be sorted\n   alphabetically, since the order in which the users\
    \ appeared in the\n   configuration would not impact the creation of those users'\
    \ accounts.\n   In the other style of lists, the order of list entries matters\
    \ for\n   the implementation of the list's configuration and the user is\n   responsible\
    \ for ordering the entries, while the device maintains that\n   order.  YANG calls\
    \ this style of list \"user ordered\" and they are\n   indicated with the statement\
    \ \"ordered-by user\".\n   For example, the order in which firewall filters entries\
    \ are applied\n   to incoming traffic may affect how that traffic is filtered.\
    \  The\n   user would need to decide if the filter entry that discards all TCP\n\
    \   traffic should be applied before or after the filter entry that\n   allows\
    \ all traffic from trusted interfaces.  The choice of order\n   would be crucial.\n\
    \   YANG provides a rich set of facilities within NETCONF's <edit-config>\n  \
    \ operation that allows the order of list entries in user-ordered lists\n   to\
    \ be controlled.  List entries may be inserted or rearranged,\n   positioned as\
    \ the first or last entry in the list, or positioned\n   before or after another\
    \ specific entry.\n   The \"ordered-by\" statement is covered in Section 7.7.5.\n"
- title: 7.7.2.  The leaf-list's Substatements
  contents:
  - "7.7.2.  The leaf-list's Substatements\n                 +--------------+---------+-------------+\n\
    \                 | substatement | section | cardinality |\n                 +--------------+---------+-------------+\n\
    \                 | config       | 7.19.1  | 0..1        |\n                 |\
    \ description  | 7.19.3  | 0..1        |\n                 | if-feature   | 7.18.2\
    \  | 0..n        |\n                 | max-elements | 7.7.4   | 0..1        |\n\
    \                 | min-elements | 7.7.3   | 0..1        |\n                 |\
    \ must         | 7.5.3   | 0..n        |\n                 | ordered-by   | 7.7.5\
    \   | 0..1        |\n                 | reference    | 7.19.4  | 0..1        |\n\
    \                 | status       | 7.19.2  | 0..1        |\n                 |\
    \ type         | 7.4     | 1           |\n                 | units        | 7.3.3\
    \   | 0..1        |\n                 | when         | 7.19.5  | 0..1        |\n\
    \                 +--------------+---------+-------------+\n"
- title: 7.7.3.  The min-elements Statement
  contents:
  - "7.7.3.  The min-elements Statement\n   The \"min-elements\" statement, which\
    \ is optional, takes as an argument\n   a non-negative integer that puts a constraint\
    \ on valid list entries.\n   A valid leaf-list or list MUST have at least min-elements\
    \ entries.\n   If no \"min-elements\" statement is present, it defaults to zero.\n\
    \   The behavior of the constraint depends on the type of the leaf-list's\n  \
    \ or list's closest ancestor node in the schema tree that is not a non-\n   presence\
    \ container (see Section 7.5.1):\n   o  If this ancestor is a case node, the constraint\
    \ is enforced if any\n      other node from the case exists.\n   o  Otherwise,\
    \ it is enforced if the ancestor node exists.\n   The constraint is further enforced\
    \ according to the rules in\n   Section 8.\n"
- title: 7.7.4.  The max-elements Statement
  contents:
  - "7.7.4.  The max-elements Statement\n   The \"max-elements\" statement, which\
    \ is optional, takes as an argument\n   a positive integer or the string \"unbounded\"\
    , which puts a constraint\n   on valid list entries.  A valid leaf-list or list\
    \ always has at most\n   max-elements entries.\n   If no \"max-elements\" statement\
    \ is present, it defaults to\n   \"unbounded\".\n   The \"max-elements\" constraint\
    \ is enforced according to the rules in\n   Section 8.\n"
- title: 7.7.5.  The ordered-by Statement
  contents:
  - "7.7.5.  The ordered-by Statement\n   The \"ordered-by\" statement defines whether\
    \ the order of entries\n   within a list are determined by the user or the system.\
    \  The argument\n   is one of the strings \"system\" or \"user\".  If not present,\
    \ order\n   defaults to \"system\".\n   This statement is ignored if the list\
    \ represents state data, RPC\n   output parameters, or notification content.\n\
    \   See Section 7.7.1 for additional information.\n"
- title: 7.7.5.1.  ordered-by system
  contents:
  - "7.7.5.1.  ordered-by system\n   The entries in the list are sorted according\
    \ to an unspecified order.\n   Thus, an implementation is free to sort the entries\
    \ in the most\n   appropriate order.  An implementation SHOULD use the same order\
    \ for\n   the same data, regardless of how the data were created.  Using a\n \
    \  deterministic order will make comparisons possible using simple tools\n   like\
    \ \"diff\".\n   This is the default order.\n"
- title: 7.7.5.2.  ordered-by user
  contents:
  - "7.7.5.2.  ordered-by user\n   The entries in the list are sorted according to\
    \ an order defined by\n   the user.  This order is controlled by using special\
    \ XML attributes\n   in the <edit-config> request.  See Section 7.7.7 for details.\n"
- title: 7.7.6.  XML Mapping Rules
  contents:
  - "7.7.6.  XML Mapping Rules\n   A leaf-list node is encoded as a series of XML\
    \ elements.  Each\n   element's local name is the leaf-list's identifier, and\
    \ its namespace\n   is the module's XML namespace (see Section 7.1.3).\n   The\
    \ value of each leaf-list entry is encoded to XML according to the\n   type, and\
    \ sent as character data in the element.\n   The XML elements representing leaf-list\
    \ entries MUST appear in the\n   order specified by the user if the leaf-list\
    \ is \"ordered-by user\";\n   otherwise, the order is implementation-dependent.\
    \  The XML elements\n   representing leaf-list entries MAY be interleaved with\
    \ other sibling\n   elements, unless the leaf-list defines RPC input or output\n\
    \   parameters.\n   See Section 7.7.8 for an example.\n"
- title: 7.7.7.  NETCONF <edit-config> Operations
  contents:
  - "7.7.7.  NETCONF <edit-config> Operations\n   Leaf-list entries can be created\
    \ and deleted, but not modified,\n   through <edit-config>, by using the \"operation\"\
    \ attribute in the\n   leaf-list entry's XML element.\n   In an \"ordered-by user\"\
    \ leaf-list, the attributes \"insert\" and\n   \"value\" in the YANG XML namespace\
    \ (Section 5.3.1) can be used to\n   control where in the leaf-list the entry\
    \ is inserted.  These can be\n   used during \"create\" operations to insert a\
    \ new leaf-list entry, or\n   during \"merge\" or \"replace\" operations to insert\
    \ a new leaf-list\n   entry or move an existing one.\n   The \"insert\" attribute\
    \ can take the values \"first\", \"last\", \"before\",\n   and \"after\".  If\
    \ the value is \"before\" or \"after\", the \"value\"\n   attribute MUST also\
    \ be used to specify an existing entry in the leaf-\n   list.\n   If no \"insert\"\
    \ attribute is present in the \"create\" operation, it\n   defaults to \"last\"\
    .\n   If several entries in an \"ordered-by user\" leaf-list are modified in\n\
    \   the same <edit-config> request, the entries are modified one at the\n   time,\
    \ in the order of the XML elements in the request.\n   In a <copy-config>, or\
    \ an <edit-config> with a \"replace\" operation\n   that covers the entire leaf-list,\
    \ the leaf-list order is the same as\n   the order of the XML elements in the\
    \ request.\n   When a NETCONF server processes an <edit-config> request, the\n\
    \   elements of procedure for a leaf-list node are:\n      If the operation is\
    \ \"merge\" or \"replace\", the leaf-list entry is\n      created if it does not\
    \ exist.\n      If the operation is \"create\", the leaf-list entry is created\
    \ if it\n      does not exist.  If the leaf-list entry already exists, a\n   \
    \   \"data-exists\" error is returned.\n      If the operation is \"delete\",\
    \ the entry is deleted from the leaf-\n      list if it exists.  If the leaf-list\
    \ entry does not exist, a\n      \"data-missing\" error is returned.\n"
- title: 7.7.8.  Usage Example
  contents:
  - "7.7.8.  Usage Example\n     leaf-list allow-user  {\n         type string;\n\
    \         description \"A list of user name patterns to allow\";\n     }\n   A\
    \ corresponding XML instance example:\n     <allow-user>alice</allow-user>\n \
    \    <allow-user>bob</allow-user>\n   To create a new element in this list, using\
    \ the default <edit-config>\n   operation \"merge\":\n     <rpc message-id=\"\
    101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\n         \
    \ xmlns:nc=\"urn:ietf:params:xml:ns:netconf:base:1.0\">\n       <edit-config>\n\
    \         <target>\n           <running/>\n         </target>\n         <config>\n\
    \           <system xmlns=\"http://example.com/schema/config\">\n            \
    \ <services>\n               <ssh>\n                 <allow-user>eric</allow-user>\n\
    \               </ssh>\n             </services>\n           </system>\n     \
    \    </config>\n       </edit-config>\n     </rpc>\n   Given the following ordered-by\
    \ user leaf-list:\n     leaf-list cipher  {\n         type string;\n         ordered-by\
    \ user;\n         description \"A list of ciphers\";\n     }\n   The following\
    \ would be used to insert a new cipher \"blowfish-cbc\"\n   after \"3des-cbc\"\
    :\n     <rpc message-id=\"101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    \n          xmlns:nc=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\n          xmlns:yang=\"\
    urn:ietf:params:xml:ns:yang:1\">\n       <edit-config>\n         <target>\n  \
    \         <running/>\n         </target>\n         <config>\n           <system\
    \ xmlns=\"http://example.com/schema/config\">\n             <services>\n     \
    \          <ssh>\n                 <cipher nc:operation=\"create\"\n         \
    \                yang:insert=\"after\"\n                         yang:value=\"\
    3des-cbc\">blowfish-cbc</cipher>\n               </ssh>\n             </services>\n\
    \           </system>\n         </config>\n       </edit-config>\n     </rpc>\n"
- title: 7.8.  The list Statement
  contents:
  - "7.8.  The list Statement\n   The \"list\" statement is used to define an interior\
    \ data node in the\n   schema tree.  A list node may exist in multiple instances\
    \ in the data\n   tree.  Each such instance is known as a list entry.  The \"\
    list\"\n   statement takes one argument, which is an identifier, followed by a\n\
    \   block of substatements that holds detailed list information.\n   A list entry\
    \ is uniquely identified by the values of the list's keys,\n   if defined.\n"
- title: 7.8.1.  The list's Substatements
  contents:
  - "7.8.1.  The list's Substatements\n                 +--------------+---------+-------------+\n\
    \                 | substatement | section | cardinality |\n                 +--------------+---------+-------------+\n\
    \                 | anyxml       | 7.10    | 0..n        |\n                 |\
    \ choice       | 7.9     | 0..n        |\n                 | config       | 7.19.1\
    \  | 0..1        |\n                 | container    | 7.5     | 0..n        |\n\
    \                 | description  | 7.19.3  | 0..1        |\n                 |\
    \ grouping     | 7.11    | 0..n        |\n                 | if-feature   | 7.18.2\
    \  | 0..n        |\n                 | key          | 7.8.2   | 0..1        |\n\
    \                 | leaf         | 7.6     | 0..n        |\n                 |\
    \ leaf-list    | 7.7     | 0..n        |\n                 | list         | 7.8\
    \     | 0..n        |\n                 | max-elements | 7.7.4   | 0..1      \
    \  |\n                 | min-elements | 7.7.3   | 0..1        |\n            \
    \     | must         | 7.5.3   | 0..n        |\n                 | ordered-by\
    \   | 7.7.5   | 0..1        |\n                 | reference    | 7.19.4  | 0..1\
    \        |\n                 | status       | 7.19.2  | 0..1        |\n      \
    \           | typedef      | 7.3     | 0..n        |\n                 | unique\
    \       | 7.8.3   | 0..n        |\n                 | uses         | 7.12    |\
    \ 0..n        |\n                 | when         | 7.19.5  | 0..1        |\n \
    \                +--------------+---------+-------------+\n"
- title: 7.8.2.  The list's key Statement
  contents:
  - "7.8.2.  The list's key Statement\n   The \"key\" statement, which MUST be present\
    \ if the list represents\n   configuration, and MAY be present otherwise, takes\
    \ as an argument a\n   string that specifies a space-separated list of leaf identifiers\
    \ of\n   this list.  A leaf identifier MUST NOT appear more than once in the\n\
    \   key.  Each such leaf identifier MUST refer to a child leaf of the\n   list.\
    \  The leafs can be defined directly in substatements to the\n   list, or in groupings\
    \ used in the list.\n   The combined values of all the leafs specified in the\
    \ key are used to\n   uniquely identify a list entry.  All key leafs MUST be given\
    \ values\n   when a list entry is created.  Thus, any default values in the key\n\
    \   leafs or their types are ignored.  It also implies that any mandatory\n  \
    \ statement in the key leafs are ignored.\n   A leaf that is part of the key can\
    \ be of any built-in or derived\n   type, except it MUST NOT be the built-in type\
    \ \"empty\".\n   All key leafs in a list MUST have the same value for their \"\
    config\"\n   as the list itself.\n   The key string syntax is formally defined\
    \ by the rule \"key-arg\" in\n   Section 12.\n"
- title: 7.8.3.  The list's unique Statement
  contents:
  - "7.8.3.  The list's unique Statement\n   The \"unique\" statement is used to put\
    \ constraints on valid list\n   entries.  It takes as an argument a string that\
    \ contains a space-\n   separated list of schema node identifiers, which MUST\
    \ be given in the\n   descendant form (see the rule \"descendant-schema-nodeid\"\
    \ in\n   Section 12).  Each such schema node identifier MUST refer to a leaf.\n\
    \   If one of the referenced leafs represents configuration data, then\n   all\
    \ of the referenced leafs MUST represent configuration data.\n   The \"unique\"\
    \ constraint specifies that the combined values of all the\n   leaf instances\
    \ specified in the argument string, including leafs with\n   default values, MUST\
    \ be unique within all list entry instances in\n   which all referenced leafs\
    \ exist.  The constraint is enforced\n   according to the rules in Section 8.\n\
    \   The unique string syntax is formally defined by the rule \"unique-arg\"\n\
    \   in Section 12.\n"
- title: 7.8.3.1.  Usage Example
  contents:
  - "7.8.3.1.  Usage Example\n   With the following list:\n     list server {\n  \
    \       key \"name\";\n         unique \"ip port\";\n         leaf name {\n  \
    \           type string;\n         }\n         leaf ip {\n             type inet:ip-address;\n\
    \         }\n         leaf port {\n             type inet:port-number;\n     \
    \    }\n     }\n   The following configuration is not valid:\n     <server>\n\
    \       <name>smtp</name>\n       <ip>192.0.2.1</ip>\n       <port>25</port>\n\
    \     </server>\n     <server>\n       <name>http</name>\n       <ip>192.0.2.1</ip>\n\
    \       <port>25</port>\n     </server>\n   The following configuration is valid,\
    \ since the \"http\" and \"ftp\" list\n   entries do not have a value for all\
    \ referenced leafs, and are thus\n   not taken into account when the \"unique\"\
    \ constraint is enforced:\n     <server>\n       <name>smtp</name>\n       <ip>192.0.2.1</ip>\n\
    \       <port>25</port>\n     </server>\n     <server>\n       <name>http</name>\n\
    \       <ip>192.0.2.1</ip>\n     </server>\n     <server>\n       <name>ftp</name>\n\
    \       <ip>192.0.2.1</ip>\n     </server>\n"
- title: 7.8.4.  The list's Child Node Statements
  contents:
  - "7.8.4.  The list's Child Node Statements\n   Within a list, the \"container\"\
    , \"leaf\", \"list\", \"leaf-list\", \"uses\",\n   \"choice\", and \"anyxml\"\
    \ statements can be used to define child nodes\n   to the list.\n"
- title: 7.8.5.  XML Mapping Rules
  contents:
  - "7.8.5.  XML Mapping Rules\n   A list is encoded as a series of XML elements,\
    \ one for each entry in\n   the list.  Each element's local name is the list's\
    \ identifier, and\n   its namespace is the module's XML namespace (see Section\
    \ 7.1.3).\n   The list's key nodes are encoded as subelements to the list's\n\
    \   identifier element, in the same order as they are defined within the\n   \"\
    key\" statement.\n   The rest of the list's child nodes are encoded as subelements\
    \ to the\n   list element, after the keys.  If the list defines RPC input or\n\
    \   output parameters, the subelements are encoded in the same order as\n   they\
    \ are defined within the \"list\" statement.  Otherwise, the\n   subelements are\
    \ encoded in any order.\n   The XML elements representing list entries MUST appear\
    \ in the order\n   specified by the user if the list is \"ordered-by user\", otherwise\
    \ the\n   order is implementation-dependent.  The XML elements representing\n\
    \   list entries MAY be interleaved with other sibling elements, unless\n   the\
    \ list defines RPC input or output parameters.\n"
- title: 7.8.6.  NETCONF <edit-config> Operations
  contents:
  - "7.8.6.  NETCONF <edit-config> Operations\n   List entries can be created, deleted,\
    \ replaced, and modified through\n   <edit-config>, by using the \"operation\"\
    \ attribute in the list's XML\n   element.  In each case, the values of all keys\
    \ are used to uniquely\n   identify a list entry.  If all keys are not specified\
    \ for a list\n   entry, a \"missing-element\" error is returned.\n   In an \"\
    ordered-by user\" list, the attributes \"insert\" and \"key\" in\n   the YANG\
    \ XML namespace (Section 5.3.1) can be used to control where\n   in the list the\
    \ entry is inserted.  These can be used during \"create\"\n   operations to insert\
    \ a new list entry, or during \"merge\" or \"replace\"\n   operations to insert\
    \ a new list entry or move an existing one.\n   The \"insert\" attribute can take\
    \ the values \"first\", \"last\", \"before\",\n   and \"after\".  If the value\
    \ is \"before\" or \"after\", the \"key\"\n   attribute MUST also be used, to\
    \ specify an existing element in the\n   list.  The value of the \"key\" attribute\
    \ is the key predicates of the\n   full instance identifier (see Section 9.13)\
    \ for the list entry.\n   If no \"insert\" attribute is present in the \"create\"\
    \ operation, it\n   defaults to \"last\".\n   If several entries in an \"ordered-by\
    \ user\" list are modified in the\n   same <edit-config> request, the entries\
    \ are modified one at the time,\n   in the order of the XML elements in the request.\n\
    \   In a <copy-config>, or an <edit-config> with a \"replace\" operation\n   that\
    \ covers the entire list, the list entry order is the same as the\n   order of\
    \ the XML elements in the request.\n   When a NETCONF server processes an <edit-config>\
    \ request, the\n   elements of procedure for a list node are:\n      If the operation\
    \ is \"merge\" or \"replace\", the list entry is\n      created if it does not\
    \ exist.  If the list entry already exists\n      and the \"insert\" and \"key\"\
    \ attributes are present, the list entry\n      is moved according to the values\
    \ of the \"insert\" and \"key\"\n      attributes.  If the list entry exists and\
    \ the \"insert\" and \"key\"\n      attributes are not present, the list entry\
    \ is not moved.\n      If the operation is \"create\", the list entry is created\
    \ if it does\n      not exist.  If the list entry already exists, a \"data-exists\"\
    \n      error is returned.\n      If the operation is \"delete\", the entry is\
    \ deleted from the list\n      if it exists.  If the list entry does not exist,\
    \ a \"data-missing\"\n      error is returned.\n"
- title: 7.8.7.  Usage Example
  contents:
  - "7.8.7.  Usage Example\n   Given the following list:\n     list user {\n     \
    \    key \"name\";\n         config true;\n         description \"This is a list\
    \ of users in the system.\";\n         leaf name {\n             type string;\n\
    \         }\n         leaf type {\n             type string;\n         }\n   \
    \      leaf full-name {\n             type string;\n         }\n     }\n   A corresponding\
    \ XML instance example:\n     <user>\n       <name>fred</name>\n       <type>admin</type>\n\
    \       <full-name>Fred Flintstone</full-name>\n     </user>\n   To create a new\
    \ user \"barney\":\n     <rpc message-id=\"101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    \n          xmlns:nc=\"urn:ietf:params:xml:ns:netconf:base:1.0\">\n       <edit-config>\n\
    \         <target>\n           <running/>\n         </target>\n         <config>\n\
    \           <system xmlns=\"http://example.com/schema/config\">\n            \
    \ <user nc:operation=\"create\">\n               <name>barney</name>\n       \
    \        <type>admin</type>\n               <full-name>Barney Rubble</full-name>\n\
    \             </user>\n           </system>\n         </config>\n       </edit-config>\n\
    \     </rpc>\n   To change the type of \"fred\" to \"superuser\":\n     <rpc message-id=\"\
    101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\n         \
    \ xmlns:nc=\"urn:ietf:params:xml:ns:netconf:base:1.0\">\n       <edit-config>\n\
    \         <target>\n           <running/>\n         </target>\n         <config>\n\
    \           <system xmlns=\"http://example.com/schema/config\">\n            \
    \ <user>\n               <name>fred</name>\n               <type>superuser</type>\n\
    \             </user>\n           </system>\n         </config>\n       </edit-config>\n\
    \     </rpc>\n   Given the following ordered-by user list:\n     list user {\n\
    \         description \"This is a list of users in the system.\";\n         ordered-by\
    \ user;\n         config true;\n         key \"name\";\n         leaf name {\n\
    \             type string;\n         }\n         leaf type {\n             type\
    \ string;\n         }\n         leaf full-name {\n             type string;\n\
    \         }\n     }\n   The following would be used to insert a new user \"barney\"\
    \ after the\n   user \"fred\":\n     <rpc message-id=\"101\"\n          xmlns=\"\
    urn:ietf:params:xml:ns:netconf:base:1.0\"\n          xmlns:nc=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    \n          xmlns:yang=\"urn:ietf:params:xml:ns:yang:1\">\n       <edit-config>\n\
    \         <target>\n           <running/>\n         </target>\n         <config>\n\
    \           <system xmlns=\"http://example.com/schema/config\"\n             \
    \   xmlns:ex=\"http://example.com/schema/config\">\n             <user nc:operation=\"\
    create\"\n                   yang:insert=\"after\"\n                   yang:key=\"\
    [ex:name='fred']\">\n               <name>barney</name>\n               <type>admin</type>\n\
    \               <full-name>Barney Rubble</full-name>\n             </user>\n \
    \          </system>\n         </config>\n       </edit-config>\n     </rpc>\n\
    \   The following would be used to move the user \"barney\" before the user\n\
    \   \"fred\":\n     <rpc message-id=\"101\"\n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    \n          xmlns:nc=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\n          xmlns:yang=\"\
    urn:ietf:params:xml:ns:yang:1\">\n       <edit-config>\n         <target>\n  \
    \         <running/>\n         </target>\n         <config>\n           <system\
    \ xmlns=\"http://example.com/schema/config\"\n                xmlns:ex=\"http://example.com/schema/config\"\
    >\n             <user nc:operation=\"merge\"\n                   yang:insert=\"\
    before\"\n                   yang:key=\"[ex:name='fred']\">\n               <name>barney</name>\n\
    \             </user>\n           </system>\n         </config>\n       </edit-config>\n\
    \     </rpc>\n"
- title: 7.9.  The choice Statement
  contents:
  - "7.9.  The choice Statement\n   The \"choice\" statement defines a set of alternatives,\
    \ only one of\n   which may exist at any one time.  The argument is an identifier,\n\
    \   followed by a block of substatements that holds detailed choice\n   information.\
    \  The identifier is used to identify the choice node in\n   the schema tree.\
    \  A choice node does not exist in the data tree.\n   A choice consists of a number\
    \ of branches, defined with the \"case\"\n   substatement.  Each branch contains\
    \ a number of child nodes.  The\n   nodes from at most one of the choice's branches\
    \ exist at the same\n   time.\n   See Section 8.3.2 for additional information.\n"
- title: 7.9.1.  The choice's Substatements
  contents:
  - "7.9.1.  The choice's Substatements\n                 +--------------+---------+-------------+\n\
    \                 | substatement | section | cardinality |\n                 +--------------+---------+-------------+\n\
    \                 | anyxml       | 7.10    | 0..n        |\n                 |\
    \ case         | 7.9.2   | 0..n        |\n                 | config       | 7.19.1\
    \  | 0..1        |\n                 | container    | 7.5     | 0..n        |\n\
    \                 | default      | 7.9.3   | 0..1        |\n                 |\
    \ description  | 7.19.3  | 0..1        |\n                 | if-feature   | 7.18.2\
    \  | 0..n        |\n                 | leaf         | 7.6     | 0..n        |\n\
    \                 | leaf-list    | 7.7     | 0..n        |\n                 |\
    \ list         | 7.8     | 0..n        |\n                 | mandatory    | 7.9.4\
    \   | 0..1        |\n                 | reference    | 7.19.4  | 0..1        |\n\
    \                 | status       | 7.19.2  | 0..1        |\n                 |\
    \ when         | 7.19.5  | 0..1        |\n                 +--------------+---------+-------------+\n"
- title: 7.9.2.  The choice's case Statement
  contents:
  - "7.9.2.  The choice's case Statement\n   The \"case\" statement is used to define\
    \ branches of the choice.  It\n   takes as an argument an identifier, followed\
    \ by a block of\n   substatements that holds detailed case information.\n   The\
    \ identifier is used to identify the case node in the schema tree.\n   A case\
    \ node does not exist in the data tree.\n   Within a \"case\" statement, the \"\
    anyxml\", \"choice\", \"container\",\n   \"leaf\", \"list\", \"leaf-list\", and\
    \ \"uses\" statements can be used to\n   define child nodes to the case node.\
    \  The identifiers of all these\n   child nodes MUST be unique within all cases\
    \ in a choice.  For\n   example, the following is illegal:\n     choice interface-type\
    \ {     // This example is illegal YANG\n         case a {\n             leaf\
    \ ethernet { ... }\n         }\n         case b {\n             container ethernet\
    \ { ...}\n         }\n     }\n   As a shorthand, the \"case\" statement can be\
    \ omitted if the branch\n   contains a single \"anyxml\", \"container\", \"leaf\"\
    , \"list\", or\n   \"leaf-list\" statement.  In this case, the identifier of the\
    \ case node\n   is the same as the identifier in the branch statement.  The following\n\
    \   example:\n     choice interface-type {\n         container ethernet { ...\
    \ }\n     }\n   is equivalent to:\n     choice interface-type {\n         case\
    \ ethernet {\n             container ethernet { ... }\n         }\n     }\n  \
    \ The case identifier MUST be unique within a choice.\n"
- title: 7.9.2.1.  The case's Substatements
  contents:
  - "7.9.2.1.  The case's Substatements\n                 +--------------+---------+-------------+\n\
    \                 | substatement | section | cardinality |\n                 +--------------+---------+-------------+\n\
    \                 | anyxml       | 7.10    | 0..n        |\n                 |\
    \ choice       | 7.9     | 0..n        |\n                 | container    | 7.5\
    \     | 0..n        |\n                 | description  | 7.19.3  | 0..1      \
    \  |\n                 | if-feature   | 7.18.2  | 0..n        |\n            \
    \     | leaf         | 7.6     | 0..n        |\n                 | leaf-list \
    \   | 7.7     | 0..n        |\n                 | list         | 7.8     | 0..n\
    \        |\n                 | reference    | 7.19.4  | 0..1        |\n      \
    \           | status       | 7.19.2  | 0..1        |\n                 | uses\
    \         | 7.12    | 0..n        |\n                 | when         | 7.19.5\
    \  | 0..1        |\n                 +--------------+---------+-------------+\n"
- title: 7.9.3.  The choice's default Statement
  contents:
  - "7.9.3.  The choice's default Statement\n   The \"default\" statement indicates\
    \ if a case should be considered as\n   the default if no child nodes from any\
    \ of the choice's cases exist.\n   The argument is the identifier of the \"case\"\
    \ statement.  If the\n   \"default\" statement is missing, there is no default\
    \ case.\n   The \"default\" statement MUST NOT be present on choices where\n \
    \  \"mandatory\" is true.\n   The default case is only important when considering\
    \ the default\n   values of nodes under the cases.  The default values for nodes\
    \ under\n   the default case are used if none of the nodes under any of the cases\n\
    \   are present.\n   There MUST NOT be any mandatory nodes (Section 3.1) directly\
    \ under\n   the default case.\n   Default values for child nodes under a case\
    \ are only used if one of\n   the nodes under that case is present, or if that\
    \ case is the default\n   case.  If none of the nodes under a case are present\
    \ and the case is\n   not the default case, the default values of the cases' child\
    \ nodes\n   are ignored.\n   In this example, the choice defaults to \"interval\"\
    , and the default\n   value will be used if none of \"daily\", \"time-of-day\"\
    , or \"manual\" are\n   present.  If \"daily\" is present, the default value for\
    \ \"time-of-day\"\n   will be used.\n     container transfer {\n         choice\
    \ how {\n             default interval;\n             case interval {\n      \
    \           leaf interval {\n                     type uint16;\n             \
    \        default 30;\n                     units minutes;\n                 }\n\
    \             }\n             case daily {\n                 leaf daily {\n  \
    \                   type empty;\n                 }\n                 leaf time-of-day\
    \ {\n                     type string;\n                     units 24-hour-clock;\n\
    \                     default 1am;\n                 }\n             }\n     \
    \        case manual {\n                 leaf manual {\n                     type\
    \ empty;\n                 }\n             }\n         }\n     }\n"
- title: 7.9.4.  The choice's mandatory Statement
  contents:
  - "7.9.4.  The choice's mandatory Statement\n   The \"mandatory\" statement, which\
    \ is optional, takes as an argument\n   the string \"true\" or \"false\", and\
    \ puts a constraint on valid data.\n   If \"mandatory\" is \"true\", at least\
    \ one node from exactly one of the\n   choice's case branches MUST exist.\n  \
    \ If not specified, the default is \"false\".\n   The behavior of the constraint\
    \ depends on the type of the choice's\n   closest ancestor node in the schema\
    \ tree which is not a non-presence\n   container (see Section 7.5.1):\n   o  If\
    \ this ancestor is a case node, the constraint is enforced if any\n      other\
    \ node from the case exists.\n   o  Otherwise, it is enforced if the ancestor\
    \ node exists.\n   The constraint is further enforced according to the rules in\n\
    \   Section 8.\n"
- title: 7.9.5.  XML Mapping Rules
  contents:
  - "7.9.5.  XML Mapping Rules\n   The choice and case nodes are not visible in XML.\n\
    \   The child nodes of the selected \"case\" statement MUST be encoded in\n  \
    \ the same order as they are defined in the \"case\" statement if they\n   are\
    \ part of an RPC input or output parameter definition.  Otherwise,\n   the subelements\
    \ are encoded in any order.\n"
- title: 7.9.6.  NETCONF <edit-config> Operations
  contents:
  - "7.9.6.  NETCONF <edit-config> Operations\n   Since only one of the choice's cases\
    \ can be valid at any time, the\n   creation of a node from one case implicitly\
    \ deletes all nodes from\n   all other cases.  If an <edit-config> operation creates\
    \ a node from a\n   case, the NETCONF server will delete any existing nodes that\
    \ are\n   defined in other cases inside the choice.\n"
- title: 7.9.7.  Usage Example
  contents:
  - "7.9.7.  Usage Example\n   Given the following choice:\n     container protocol\
    \ {\n         choice name {\n             case a {\n                 leaf udp\
    \ {\n                     type empty;\n                 }\n             }\n  \
    \           case b {\n                 leaf tcp {\n                    type empty;\n\
    \                 }\n             }\n         }\n     }\n   A corresponding XML\
    \ instance example:\n     <protocol>\n       <tcp/>\n     </protocol>\n   To change\
    \ the protocol from tcp to udp:\n     <rpc message-id=\"101\"\n          xmlns=\"\
    urn:ietf:params:xml:ns:netconf:base:1.0\"\n          xmlns:nc=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    >\n       <edit-config>\n         <target>\n           <running/>\n         </target>\n\
    \         <config>\n           <system xmlns=\"http://example.com/schema/config\"\
    >\n             <protocol>\n               <udp nc:operation=\"create\"/>\n  \
    \           </protocol>\n           </system>\n         </config>\n       </edit-config>\n\
    \     </rpc>\n"
- title: 7.10.  The anyxml Statement
  contents:
  - "7.10.  The anyxml Statement\n   The \"anyxml\" statement defines an interior\
    \ node in the schema tree.\n   It takes one argument, which is an identifier,\
    \ followed by a block of\n   substatements that holds detailed anyxml information.\n\
    \   The \"anyxml\" statement is used to represent an unknown chunk of XML.\n \
    \  No restrictions are placed on the XML.  This can be useful, for\n   example,\
    \ in RPC replies.  An example is the <filter> parameter in the\n   <get-config>\
    \ operation.\n   An anyxml node cannot be augmented (see Section 7.15).\n   Since\
    \ the use of anyxml limits the manipulation of the content, it is\n   RECOMMENDED\
    \ that the \"anyxml\" statement not be used to represent\n   configuration data.\n\
    \   An anyxml node exists in zero or one instances in the data tree.\n"
- title: 7.10.1.  The anyxml's Substatements
  contents:
  - "7.10.1.  The anyxml's Substatements\n                 +--------------+---------+-------------+\n\
    \                 | substatement | section | cardinality |\n                 +--------------+---------+-------------+\n\
    \                 | config       | 7.19.1  | 0..1        |\n                 |\
    \ description  | 7.19.3  | 0..1        |\n                 | if-feature   | 7.18.2\
    \  | 0..n        |\n                 | mandatory    | 7.6.5   | 0..1        |\n\
    \                 | must         | 7.5.3   | 0..n        |\n                 |\
    \ reference    | 7.19.4  | 0..1        |\n                 | status       | 7.19.2\
    \  | 0..1        |\n                 | when         | 7.19.5  | 0..1        |\n\
    \                 +--------------+---------+-------------+\n"
- title: 7.10.2.  XML Mapping Rules
  contents:
  - "7.10.2.  XML Mapping Rules\n   An anyxml node is encoded as an XML element. \
    \ The element's local\n   name is the anyxml's identifier, and its namespace is\
    \ the module's\n   XML namespace (see Section 7.1.3).  The value of the anyxml\
    \ node is\n   encoded as XML content of this element.\n   Note that any prefixes\
    \ used in the encoding are local to each\n   instance encoding.  This means that\
    \ the same XML may be encoded\n   differently by different implementations.\n"
- title: 7.10.3.  NETCONF <edit-config> Operations
  contents:
  - "7.10.3.  NETCONF <edit-config> Operations\n   An anyxml node is treated as an\
    \ opaque chunk of data.  This data can\n   be modified in its entirety only.\n\
    \   Any \"operation\" attributes present on subelements of an anyxml node\n  \
    \ are ignored by the NETCONF server.\n   When a NETCONF server processes an <edit-config>\
    \ request, the\n   elements of procedure for the anyxml node are:\n      If the\
    \ operation is \"merge\" or \"replace\", the node is created if\n      it does\
    \ not exist, and its value is set to the XML content of the\n      anyxml node\
    \ found in the XML RPC data.\n      If the operation is \"create\", the node is\
    \ created if it does not\n      exist, and its value is set to the XML content\
    \ of the anyxml node\n      found in the XML RPC data.  If the node already exists,\
    \ a\n      \"data-exists\" error is returned.\n      If the operation is \"delete\"\
    , the node is deleted if it exists.\n      If the node does not exist, a \"data-missing\"\
    \ error is returned.\n"
- title: 7.10.4.  Usage Example
  contents:
  - "7.10.4.  Usage Example\n   Given the following \"anyxml\" statement:\n     anyxml\
    \ data;\n   The following are two valid encodings of the same anyxml value:\n\
    \     <data xmlns:if=\"http://example.com/ns/interface\">\n       <if:interface>\n\
    \         <if:ifIndex>1</if:ifIndex>\n       </if:interface>\n     </data>\n \
    \    <data>\n       <interface xmlns=\"http://example.com/ns/interface\">\n  \
    \       <ifIndex>1</ifIndex>\n       </interface>\n     </data>\n"
- title: 7.11.  The grouping Statement
  contents:
  - "7.11.  The grouping Statement\n   The \"grouping\" statement is used to define\
    \ a reusable block of nodes,\n   which may be used locally in the module, in modules\
    \ that include it,\n   and by other modules that import from it, according to\
    \ the rules in\n   Section 5.5.  It takes one argument, which is an identifier,\
    \ followed\n   by a block of substatements that holds detailed grouping information.\n\
    \   The \"grouping\" statement is not a data definition statement and, as\n  \
    \ such, does not define any nodes in the schema tree.\n   A grouping is like a\
    \ \"structure\" or a \"record\" in conventional\n   programming languages.\n \
    \  Once a grouping is defined, it can be referenced in a \"uses\"\n   statement\
    \ (see Section 7.12).  A grouping MUST NOT reference itself,\n   neither directly\
    \ nor indirectly through a chain of other groupings.\n   If the grouping is defined\
    \ at the top level of a YANG module or\n   submodule, the grouping's identifier\
    \ MUST be unique within the\n   module.\n   A grouping is more than just a mechanism\
    \ for textual substitution,\n   but defines a collection of nodes.  Identifiers\
    \ appearing inside the\n   grouping are resolved relative to the scope in which\
    \ the grouping is\n   defined, not where it is used.  Prefix mappings, type names,\
    \ grouping\n   names, and extension usage are evaluated in the hierarchy where\
    \ the\n   \"grouping\" statement appears.  For extensions, this means that\n \
    \  extensions are applied to the grouping node, not the uses node.\n"
- title: 7.11.1.  The grouping's Substatements
  contents:
  - "7.11.1.  The grouping's Substatements\n                 +--------------+---------+-------------+\n\
    \                 | substatement | section | cardinality |\n                 +--------------+---------+-------------+\n\
    \                 | anyxml       | 7.10    | 0..n        |\n                 |\
    \ choice       | 7.9     | 0..n        |\n                 | container    | 7.5\
    \     | 0..n        |\n                 | description  | 7.19.3  | 0..1      \
    \  |\n                 | grouping     | 7.11    | 0..n        |\n            \
    \     | leaf         | 7.6     | 0..n        |\n                 | leaf-list \
    \   | 7.7     | 0..n        |\n                 | list         | 7.8     | 0..n\
    \        |\n                 | reference    | 7.19.4  | 0..1        |\n      \
    \           | status       | 7.19.2  | 0..1        |\n                 | typedef\
    \      | 7.3     | 0..n        |\n                 | uses         | 7.12    |\
    \ 0..n        |\n                 +--------------+---------+-------------+\n"
- title: 7.11.2.  Usage Example
  contents:
  - "7.11.2.  Usage Example\n     import ietf-inet-types {\n         prefix \"inet\"\
    ;\n     }\n     grouping endpoint {\n         description \"A reusable endpoint\
    \ group.\";\n         leaf ip {\n             type inet:ip-address;\n        \
    \ }\n         leaf port {\n             type inet:port-number;\n         }\n \
    \    }\n"
- title: 7.12.  The uses Statement
  contents:
  - "7.12.  The uses Statement\n   The \"uses\" statement is used to reference a \"\
    grouping\" definition.\n   It takes one argument, which is the name of the grouping.\n\
    \   The effect of a \"uses\" reference to a grouping is that the nodes\n   defined\
    \ by the grouping are copied into the current schema tree, and\n   then updated\
    \ according to the \"refine\" and \"augment\" statements.\n   The identifiers\
    \ defined in the grouping are not bound to a namespace\n   until the contents\
    \ of the grouping are added to the schema tree via a\n   \"uses\" statement that\
    \ does not appear inside a \"grouping\" statement,\n   at which point they are\
    \ bound to the namespace of the current module.\n"
- title: 7.12.1.  The uses's Substatements
  contents:
  - "7.12.1.  The uses's Substatements\n                 +--------------+---------+-------------+\n\
    \                 | substatement | section | cardinality |\n                 +--------------+---------+-------------+\n\
    \                 | augment      | 7.15    | 0..1        |\n                 |\
    \ description  | 7.19.3  | 0..1        |\n                 | if-feature   | 7.18.2\
    \  | 0..n        |\n                 | refine       | 7.12.2  | 0..1        |\n\
    \                 | reference    | 7.19.4  | 0..1        |\n                 |\
    \ status       | 7.19.2  | 0..1        |\n                 | when         | 7.19.5\
    \  | 0..1        |\n                 +--------------+---------+-------------+\n"
- title: 7.12.2.  The refine Statement
  contents:
  - "7.12.2.  The refine Statement\n   Some of the properties of each node in the\
    \ grouping can be refined\n   with the \"refine\" statement.  The argument is\
    \ a string that\n   identifies a node in the grouping.  This node is called the\
    \ refine's\n   target node.  If a node in the grouping is not present as a target\n\
    \   node of a \"refine\" statement, it is not refined, and thus used\n   exactly\
    \ as it was defined in the grouping.\n   The argument string is a descendant schema\
    \ node identifier (see\n   Section 6.5).\n   The following refinements can be\
    \ done:\n   o  A leaf or choice node may get a default value, or a new default\n\
    \      value if it already had one.\n   o  Any node may get a specialized \"description\"\
    \ string.\n   o  Any node may get a specialized \"reference\" string.\n   o  Any\
    \ node may get a different \"config\" statement.\n   o  A leaf, anyxml, or choice\
    \ node may get a different \"mandatory\"\n      statement.\n   o  A container\
    \ node may get a \"presence\" statement.\n   o  A leaf, leaf-list, list, container,\
    \ or anyxml node may get\n      additional \"must\" expressions.\n   o  A leaf-list\
    \ or list node may get a different \"min-elements\" or\n      \"max-elements\"\
    \ statement.\n"
- title: 7.12.3.  XML Mapping Rules
  contents:
  - "7.12.3.  XML Mapping Rules\n   Each node in the grouping is encoded as if it\
    \ was defined inline,\n   even if it is imported from another module with another\
    \ XML\n   namespace.\n"
- title: 7.12.4.  Usage Example
  contents:
  - "7.12.4.  Usage Example\n   To use the \"endpoint\" grouping defined in Section\
    \ 7.11.2 in a\n   definition of an HTTP server in some other module, we can do:\n\
    \     import acme-system {\n         prefix \"acme\";\n     }\n     container\
    \ http-server {\n         leaf name {\n             type string;\n         }\n\
    \         uses acme:endpoint;\n     }\n   A corresponding XML instance example:\n\
    \     <http-server>\n       <name>extern-web</name>\n       <ip>192.0.2.1</ip>\n\
    \       <port>80</port>\n     </http-server>\n   If port 80 should be the default\
    \ for the HTTP server, default can be\n   added:\n     container http-server {\n\
    \         leaf name {\n             type string;\n         }\n         uses acme:endpoint\
    \ {\n             refine port {\n                 default 80;\n             }\n\
    \         }\n     }\n   If we want to define a list of servers, and each server\
    \ has the ip\n   and port as keys, we can do:\n     list server {\n         key\
    \ \"ip port\";\n         leaf name {\n             type string;\n         }\n\
    \         uses acme:endpoint;\n     }\n   The following is an error:\n     container\
    \ http-server {\n         uses acme:endpoint;\n         leaf ip {          //\
    \ illegal - same identifier \"ip\" used twice\n             type string;\n   \
    \      }\n     }\n"
- title: 7.13.  The rpc Statement
  contents:
  - "7.13.  The rpc Statement\n   The \"rpc\" statement is used to define a NETCONF\
    \ RPC operation.  It\n   takes one argument, which is an identifier, followed\
    \ by a block of\n   substatements that holds detailed rpc information.  This argument\
    \ is\n   the name of the RPC, and is used as the element name directly under\n\
    \   the <rpc> element, as designated by the substitution group\n   \"rpcOperation\"\
    \ in [RFC4741].\n   The \"rpc\" statement defines an rpc node in the schema tree.\
    \  Under\n   the rpc node, a schema node with the name \"input\", and a schema\
    \ node\n   with the name \"output\" are also defined.  The nodes \"input\" and\n\
    \   \"output\" are defined in the module's namespace.\n"
- title: 7.13.1.  The rpc's Substatements
  contents:
  - "7.13.1.  The rpc's Substatements\n                 +--------------+---------+-------------+\n\
    \                 | substatement | section | cardinality |\n                 +--------------+---------+-------------+\n\
    \                 | description  | 7.19.3  | 0..1        |\n                 |\
    \ grouping     | 7.11    | 0..n        |\n                 | if-feature   | 7.18.2\
    \  | 0..n        |\n                 | input        | 7.13.2  | 0..1        |\n\
    \                 | output       | 7.13.3  | 0..1        |\n                 |\
    \ reference    | 7.19.4  | 0..1        |\n                 | status       | 7.19.2\
    \  | 0..1        |\n                 | typedef      | 7.3     | 0..n        |\n\
    \                 +--------------+---------+-------------+\n"
- title: 7.13.2.  The input Statement
  contents:
  - "7.13.2.  The input Statement\n   The \"input\" statement, which is optional,\
    \ is used to define input\n   parameters to the RPC operation.  It does not take\
    \ an argument.  The\n   substatements to \"input\" define nodes under the RPC's\
    \ input node.\n   If a leaf in the input tree has a \"mandatory\" statement with\
    \ the\n   value \"true\", the leaf MUST be present in a NETCONF RPC invocation.\n\
    \   Otherwise, the server MUST return a \"missing-element\" error.\n   If a leaf\
    \ in the input tree has a default value, the NETCONF server\n   MUST use this\
    \ value in the same cases as described in Section 7.6.1.\n   In these cases, the\
    \ server MUST operationally behave as if the leaf\n   was present in the NETCONF\
    \ RPC invocation with the default value as\n   its value.\n   If a \"config\"\
    \ statement is present for any node in the input tree,\n   the \"config\" statement\
    \ is ignored.\n   If any node has a \"when\" statement that would evaluate to\
    \ false, then\n   this node MUST NOT be present in the input tree.\n"
- title: 7.13.2.1.  The input's Substatements
  contents:
  - "7.13.2.1.  The input's Substatements\n                 +--------------+---------+-------------+\n\
    \                 | substatement | section | cardinality |\n                 +--------------+---------+-------------+\n\
    \                 | anyxml       | 7.10    | 0..n        |\n                 |\
    \ choice       | 7.9     | 0..n        |\n                 | container    | 7.5\
    \     | 0..n        |\n                 | grouping     | 7.11    | 0..n      \
    \  |\n                 | leaf         | 7.6     | 0..n        |\n            \
    \     | leaf-list    | 7.7     | 0..n        |\n                 | list      \
    \   | 7.8     | 0..n        |\n                 | typedef      | 7.3     | 0..n\
    \        |\n                 | uses         | 7.12    | 0..n        |\n      \
    \           +--------------+---------+-------------+\n"
- title: 7.13.3.  The output Statement
  contents:
  - "7.13.3.  The output Statement\n   The \"output\" statement, which is optional,\
    \ is used to define output\n   parameters to the RPC operation.  It does not take\
    \ an argument.  The\n   substatements to \"output\" define nodes under the RPC's\
    \ output node.\n   If a leaf in the output tree has a \"mandatory\" statement\
    \ with the\n   value \"true\", the leaf MUST be present in a NETCONF RPC reply.\n\
    \   If a leaf in the output tree has a default value, the NETCONF client\n   MUST\
    \ use this value in the same cases as described in Section 7.6.1.\n   In these\
    \ cases, the client MUST operationally behave as if the leaf\n   was present in\
    \ the NETCONF RPC reply with the default value as its\n   value.\n   If a \"config\"\
    \ statement is present for any node in the output tree,\n   the \"config\" statement\
    \ is ignored.\n   If any node has a \"when\" statement that would evaluate to\
    \ false, then\n   this node MUST NOT be present in the output tree.\n"
- title: 7.13.3.1.  The output's Substatements
  contents:
  - "7.13.3.1.  The output's Substatements\n                 +--------------+---------+-------------+\n\
    \                 | substatement | section | cardinality |\n                 +--------------+---------+-------------+\n\
    \                 | anyxml       | 7.10    | 0..n        |\n                 |\
    \ choice       | 7.9     | 0..n        |\n                 | container    | 7.5\
    \     | 0..n        |\n                 | grouping     | 7.11    | 0..n      \
    \  |\n                 | leaf         | 7.6     | 0..n        |\n            \
    \     | leaf-list    | 7.7     | 0..n        |\n                 | list      \
    \   | 7.8     | 0..n        |\n                 | typedef      | 7.3     | 0..n\
    \        |\n                 | uses         | 7.12    | 0..n        |\n      \
    \           +--------------+---------+-------------+\n"
- title: 7.13.4.  XML Mapping Rules
  contents:
  - "7.13.4.  XML Mapping Rules\n   An rpc node is encoded as a child XML element\
    \ to the <rpc> element\n   defined in [RFC4741].  The element's local name is\
    \ the rpc's\n   identifier, and its namespace is the module's XML namespace (see\n\
    \   Section 7.1.3).\n   Input parameters are encoded as child XML elements to\
    \ the rpc node's\n   XML element, in the same order as they are defined within\
    \ the \"input\"\n   statement.\n   If the RPC operation invocation succeeded,\
    \ and no output parameters\n   are returned, the <rpc-reply> contains a single\
    \ <ok/> element defined\n   in [RFC4741].  If output parameters are returned,\
    \ they are encoded as\n   child elements to the <rpc-reply> element defined in\
    \ [RFC4741], in\n   the same order as they are defined within the \"output\" statement.\n"
- title: 7.13.5.  Usage Example
  contents:
  - "7.13.5.  Usage Example\n   The following example defines an RPC operation:\n\
    \     module rock {\n         namespace \"http://example.net/rock\";\n       \
    \  prefix \"rock\";\n         rpc rock-the-house {\n             input {\n   \
    \              leaf zip-code {\n                     type string;\n          \
    \       }\n             }\n         }\n     }\n   A corresponding XML instance\
    \ example of the complete rpc and rpc-\n   reply:\n     <rpc message-id=\"101\"\
    \n          xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\">\n       <rock-the-house\
    \ xmlns=\"http://example.net/rock\">\n         <zip-code>27606-0100</zip-code>\n\
    \       </rock-the-house>\n     </rpc>\n     <rpc-reply message-id=\"101\"\n \
    \               xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\">\n       <ok/>\n\
    \     </rpc-reply>\n"
- title: 7.14.  The notification Statement
  contents:
  - "7.14.  The notification Statement\n   The \"notification\" statement is used\
    \ to define a NETCONF\n   notification.  It takes one argument, which is an identifier,\n\
    \   followed by a block of substatements that holds detailed notification\n  \
    \ information.  The \"notification\" statement defines a notification\n   node\
    \ in the schema tree.\n   If a leaf in the notification tree has a \"mandatory\"\
    \ statement with\n   the value \"true\", the leaf MUST be present in a NETCONF\
    \ notification.\n   If a leaf in the notification tree has a default value, the\
    \ NETCONF\n   client MUST use this value in the same cases as described in\n \
    \  Section 7.6.1.  In these cases, the client MUST operationally behave\n   as\
    \ if the leaf was present in the NETCONF notification with the\n   default value\
    \ as its value.\n   If a \"config\" statement is present for any node in the notification\n\
    \   tree, the \"config\" statement is ignored.\n"
- title: 7.14.1.  The notification's Substatements
  contents:
  - "7.14.1.  The notification's Substatements\n                 +--------------+---------+-------------+\n\
    \                 | substatement | section | cardinality |\n                 +--------------+---------+-------------+\n\
    \                 | anyxml       | 7.10    | 0..n        |\n                 |\
    \ choice       | 7.9     | 0..n        |\n                 | container    | 7.5\
    \     | 0..n        |\n                 | description  | 7.19.3  | 0..1      \
    \  |\n                 | grouping     | 7.11    | 0..n        |\n            \
    \     | if-feature   | 7.18.2  | 0..n        |\n                 | leaf      \
    \   | 7.6     | 0..n        |\n                 | leaf-list    | 7.7     | 0..n\
    \        |\n                 | list         | 7.8     | 0..n        |\n      \
    \           | reference    | 7.19.4  | 0..1        |\n                 | status\
    \       | 7.19.2  | 0..1        |\n                 | typedef      | 7.3     |\
    \ 0..n        |\n                 | uses         | 7.12    | 0..n        |\n \
    \                +--------------+---------+-------------+\n"
- title: 7.14.2.  XML Mapping Rules
  contents:
  - "7.14.2.  XML Mapping Rules\n   A notification node is encoded as a child XML\
    \ element to the\n   <notification> element defined in NETCONF Event Notifications\n\
    \   [RFC5277].  The element's local name is the notification's\n   identifier,\
    \ and its namespace is the module's XML namespace (see\n   Section 7.1.3).\n"
- title: 7.14.3.  Usage Example
  contents:
  - "7.14.3.  Usage Example\n   The following example defines a notification:\n  \
    \   module event {\n         namespace \"http://example.com/event\";\n       \
    \  prefix \"ev\";\n         notification event {\n             leaf event-class\
    \ {\n                 type string;\n             }\n             anyxml reporting-entity;\n\
    \             leaf severity {\n                 type string;\n             }\n\
    \         }\n     }\n   A corresponding XML instance example of the complete notification:\n\
    \     <notification\n       xmlns=\"urn:ietf:params:xml:ns:netconf:notification:1.0\"\
    >\n       <eventTime>2008-07-08T00:01:00Z</eventTime>\n       <event xmlns=\"\
    http://example.com/event\">\n         <event-class>fault</event-class>\n     \
    \    <reporting-entity>\n           <card>Ethernet0</card>\n         </reporting-entity>\n\
    \         <severity>major</severity>\n       </event>\n     </notification>\n"
- title: 7.15.  The augment Statement
  contents:
  - "7.15.  The augment Statement\n   The \"augment\" statement allows a module or\
    \ submodule to add to the\n   schema tree defined in an external module, or the\
    \ current module and\n   its submodules, and to add to the nodes from a grouping\
    \ in a \"uses\"\n   statement.  The argument is a string that identifies a node\
    \ in the\n   schema tree.  This node is called the augment's target node.  The\n\
    \   target node MUST be either a container, list, choice, case, input,\n   output,\
    \ or notification node.  It is augmented with the nodes defined\n   in the substatements\
    \ that follow the \"augment\" statement.\n   The argument string is a schema node\
    \ identifier (see Section 6.5).\n   If the \"augment\" statement is on the top\
    \ level in a module or\n   submodule, the absolute form (defined by the rule\n\
    \   \"absolute-schema-nodeid\" in Section 12) of a schema node identifier\n  \
    \ MUST be used.  If the \"augment\" statement is a substatement to the\n   \"\
    uses\" statement, the descendant form (defined by the rule\n   \"descendant-schema-nodeid\"\
    \ in Section 12) MUST be used.\n   If the target node is a container, list, case,\
    \ input, output, or\n   notification node, the \"container\", \"leaf\", \"list\"\
    , \"leaf-list\",\n   \"uses\", and \"choice\" statements can be used within the\
    \ \"augment\"\n   statement.\n   If the target node is a choice node, the \"case\"\
    \ statement, or a case\n   shorthand statement (see Section 7.9.2) can be used\
    \ within the\n   \"augment\" statement.\n   If the target node is in another module,\
    \ then nodes added by the\n   augmentation MUST NOT be mandatory nodes (see Section\
    \ 3.1).\n   The \"augment\" statement MUST NOT add multiple nodes with the same\n\
    \   name from the same module to the target node.\n"
- title: 7.15.1.  The augment's Substatements
  contents:
  - "7.15.1.  The augment's Substatements\n                 +--------------+---------+-------------+\n\
    \                 | substatement | section | cardinality |\n                 +--------------+---------+-------------+\n\
    \                 | anyxml       | 7.10    | 0..n        |\n                 |\
    \ case         | 7.9.2   | 0..n        |\n                 | choice       | 7.9\
    \     | 0..n        |\n                 | container    | 7.5     | 0..n      \
    \  |\n                 | description  | 7.19.3  | 0..1        |\n            \
    \     | if-feature   | 7.18.2  | 0..n        |\n                 | leaf      \
    \   | 7.6     | 0..n        |\n                 | leaf-list    | 7.7     | 0..n\
    \        |\n                 | list         | 7.8     | 0..n        |\n      \
    \           | reference    | 7.19.4  | 0..1        |\n                 | status\
    \       | 7.19.2  | 0..1        |\n                 | uses         | 7.12    |\
    \ 0..n        |\n                 | when         | 7.19.5  | 0..1        |\n \
    \                +--------------+---------+-------------+\n"
- title: 7.15.2.  XML Mapping Rules
  contents:
  - "7.15.2.  XML Mapping Rules\n   All data nodes defined in the \"augment\" statement\
    \ are defined as XML\n   elements in the XML namespace of the module where the\
    \ \"augment\" is\n   specified.\n   When a node is augmented, the augmenting child\
    \ nodes are encoded as\n   subelements to the augmented node, in any order.\n"
- title: 7.15.3.  Usage Example
  contents:
  - "7.15.3.  Usage Example\n   In namespace http://example.com/schema/interfaces,\
    \ we have:\n     container interfaces {\n         list ifEntry {\n           \
    \  key \"ifIndex\";\n             leaf ifIndex {\n                 type uint32;\n\
    \             }\n             leaf ifDescr {\n                 type string;\n\
    \             }\n             leaf ifType {\n                 type iana:IfType;\n\
    \             }\n             leaf ifMtu {\n                 type int32;\n   \
    \          }\n         }\n     }\n   Then, in namespace http://example.com/schema/ds0,\
    \ we have:\n     import interface-module {\n         prefix \"if\";\n     }\n\
    \     augment \"/if:interfaces/if:ifEntry\" {\n         when \"if:ifType='ds0'\"\
    ;\n         leaf ds0ChannelNumber {\n             type ChannelNumber;\n      \
    \   }\n     }\n   A corresponding XML instance example:\n     <interfaces xmlns=\"\
    http://example.com/schema/interfaces\"\n                 xmlns:ds0=\"http://example.com/schema/ds0\"\
    >\n       <ifEntry>\n         <ifIndex>1</ifIndex>\n         <ifDescr>Flintstone\
    \ Inc Ethernet A562</ifDescr>\n         <ifType>ethernetCsmacd</ifType>\n    \
    \     <ifMtu>1500</ifMtu>\n       </ifEntry>\n       <ifEntry>\n         <ifIndex>2</ifIndex>\n\
    \         <ifDescr>Flintstone Inc DS0</ifDescr>\n         <ifType>ds0</ifType>\n\
    \         <ds0:ds0ChannelNumber>1</ds0:ds0ChannelNumber>\n       </ifEntry>\n\
    \     </interfaces>\n   As another example, suppose we have the choice defined\
    \ in\n   Section 7.9.7.  The following construct can be used to extend the\n \
    \  protocol definition:\n     augment /ex:system/ex:protocol/ex:name {\n     \
    \    case c {\n             leaf smtp {\n                 type empty;\n      \
    \       }\n         }\n     }\n   A corresponding XML instance example:\n    \
    \ <ex:system>\n       <ex:protocol>\n         <ex:tcp/>\n       </ex:protocol>\n\
    \     </ex:system>\n   or\n     <ex:system>\n       <ex:protocol>\n         <other:smtp/>\n\
    \       </ex:protocol>\n     </ex:system>\n"
- title: 7.16.  The identity Statement
  contents:
  - "7.16.  The identity Statement\n   The \"identity\" statement is used to define\
    \ a new globally unique,\n   abstract, and untyped identity.  Its only purpose\
    \ is to denote its\n   name, semantics, and existence.  An identity can either\
    \ be defined\n   from scratch or derived from a base identity.  The identity's\n\
    \   argument is an identifier that is the name of the identity.  It is\n   followed\
    \ by a block of substatements that holds detailed identity\n   information.\n\
    \   The built-in datatype \"identityref\" (see Section 9.10) can be used to\n\
    \   reference identities within a data model.\n"
- title: 7.16.1.  The identity's Substatements
  contents:
  - "7.16.1.  The identity's Substatements\n                 +--------------+---------+-------------+\n\
    \                 | substatement | section | cardinality |\n                 +--------------+---------+-------------+\n\
    \                 | base         | 7.16.2  | 0..1        |\n                 |\
    \ description  | 7.19.3  | 0..1        |\n                 | reference    | 7.19.4\
    \  | 0..1        |\n                 | status       | 7.19.2  | 0..1        |\n\
    \                 +--------------+---------+-------------+\n"
- title: 7.16.2.  The base Statement
  contents:
  - "7.16.2.  The base Statement\n   The \"base\" statement, which is optional, takes\
    \ as an argument a\n   string that is the name of an existing identity, from which\
    \ the new\n   identity is derived.  If no \"base\" statement is present, the identity\n\
    \   is defined from scratch.\n   If a prefix is present on the base name, it refers\
    \ to an identity\n   defined in the module that was imported with that prefix,\
    \ or the\n   local module if the prefix matches the local module's prefix.\n \
    \  Otherwise, an identity with the matching name MUST be defined in the\n   current\
    \ module or an included submodule.\n   Since submodules cannot include the parent\
    \ module, any identities in\n   the module that need to be exposed to submodules\
    \ MUST be defined in a\n   submodule.  Submodules can then include this submodule\
    \ to find the\n   definition of the identity.\n   An identity MUST NOT reference\
    \ itself, neither directly nor\n   indirectly through a chain of other identities.\n"
- title: 7.16.3.  Usage Example
  contents:
  - "7.16.3.  Usage Example\n     module crypto-base {\n         namespace \"http://example.com/crypto-base\"\
    ;\n         prefix \"crypto\";\n         identity crypto-alg {\n             description\n\
    \                \"Base identity from which all crypto algorithms\n          \
    \       are derived.\";\n         }\n     }\n     module des {\n         namespace\
    \ \"http://example.com/des\";\n         prefix \"des\";\n         import \"crypto-base\"\
    \ {\n             prefix \"crypto\";\n         }\n         identity des {\n  \
    \           base \"crypto:crypto-alg\";\n             description \"DES crypto\
    \ algorithm\";\n         }\n         identity des3 {\n             base \"crypto:crypto-alg\"\
    ;\n             description \"Triple DES crypto algorithm\";\n         }\n   \
    \  }\n"
- title: 7.17.  The extension Statement
  contents:
  - "7.17.  The extension Statement\n   The \"extension\" statement allows the definition\
    \ of new statements\n   within the YANG language.  This new statement definition\
    \ can be\n   imported and used by other modules.\n   The statement's argument\
    \ is an identifier that is the new keyword for\n   the extension and must be followed\
    \ by a block of substatements that\n   holds detailed extension information. \
    \ The purpose of the \"extension\"\n   statement is to define a keyword, so that\
    \ it can be imported and used\n   by other modules.\n   The extension can be used\
    \ like a normal YANG statement, with the\n   statement name followed by an argument\
    \ if one is defined by the\n   extension, and an optional block of substatements.\
    \  The statement's\n   name is created by combining the prefix of the module in\
    \ which the\n   extension was defined, a colon (\":\"), and the extension's keyword,\n\
    \   with no interleaving whitespace.  The substatements of an extension\n   are\
    \ defined by the extension, using some mechanism outside the scope\n   of this\
    \ specification.  Syntactically, the substatements MUST be YANG\n   statements,\
    \ or also defined using \"extension\" statements.  YANG\n   statements in extensions\
    \ MUST follow the syntactical rules in\n   Section 12.\n"
- title: 7.17.1.  The extension's Substatements
  contents:
  - "7.17.1.  The extension's Substatements\n                 +--------------+---------+-------------+\n\
    \                 | substatement | section | cardinality |\n                 +--------------+---------+-------------+\n\
    \                 | argument     | 7.17.2  | 0..1        |\n                 |\
    \ description  | 7.19.3  | 0..1        |\n                 | reference    | 7.19.4\
    \  | 0..1        |\n                 | status       | 7.19.2  | 0..1        |\n\
    \                 +--------------+---------+-------------+\n"
- title: 7.17.2.  The argument Statement
  contents:
  - "7.17.2.  The argument Statement\n   The \"argument\" statement, which is optional,\
    \ takes as an argument a\n   string that is the name of the argument to the keyword.\
    \  If no\n   argument statement is present, the keyword expects no argument when\n\
    \   it is used.\n   The argument's name is used in the YIN mapping, where it is\
    \ used as\n   an XML attribute or element name, depending on the argument's \"\
    yin-\n   element\" statement.\n"
- title: 7.17.2.1.  The argument's Substatements
  contents:
  - "7.17.2.1.  The argument's Substatements\n                 +--------------+----------+-------------+\n\
    \                 | substatement | section  | cardinality |\n                \
    \ +--------------+----------+-------------+\n                 | yin-element  |\
    \ 7.17.2.2 | 0..1        |\n                 +--------------+----------+-------------+\n"
- title: 7.17.2.2.  The yin-element Statement
  contents:
  - "7.17.2.2.  The yin-element Statement\n   The \"yin-element\" statement, which\
    \ is optional, takes as an argument\n   the string \"true\" or \"false\".  This\
    \ statement indicates if the\n   argument is mapped to an XML element in YIN or\
    \ to an XML attribute\n   (see Section 11).\n   If no \"yin-element\" statement\
    \ is present, it defaults to \"false\".\n"
- title: 7.17.3.  Usage Example
  contents:
  - "7.17.3.  Usage Example\n   To define an extension:\n     module my-extensions\
    \ {\n       ...\n       extension c-define {\n         description\n         \
    \  \"Takes as argument a name string.\n           Makes the code generator use\
    \ the given name in the\n           #define.\";\n         argument \"name\";\n\
    \       }\n     }\n   To use the extension:\n     module my-interfaces {\n   \
    \    ...\n       import my-extensions {\n         prefix \"myext\";\n       }\n\
    \       ...\n       container interfaces {\n         ...\n         myext:c-define\
    \ \"MY_INTERFACES\";\n       }\n     }\n"
- title: 7.18.  Conformance-Related Statements
  contents:
  - "7.18.  Conformance-Related Statements\n   This section defines statements related\
    \ to conformance, as described\n   in Section 5.6.\n"
- title: 7.18.1.  The feature Statement
  contents:
  - "7.18.1.  The feature Statement\n   The \"feature\" statement is used to define\
    \ a mechanism by which\n   portions of the schema are marked as conditional. \
    \ A feature name is\n   defined that can later be referenced using the \"if-feature\"\
    \ statement\n   (see Section 7.18.2).  Schema nodes tagged with a feature are\
    \ ignored\n   by the device unless the device supports the given feature.  This\n\
    \   allows portions of the YANG module to be conditional based on\n   conditions\
    \ on the device.  The model can represent the abilities of\n   the device within\
    \ the model, giving a richer model that allows for\n   differing device abilities\
    \ and roles.\n   The argument to the \"feature\" statement is the name of the\
    \ new\n   feature, and follows the rules for identifiers in Section 6.2.  This\n\
    \   name is used by the \"if-feature\" statement to tie the schema nodes to\n\
    \   the feature.\n   In this example, a feature called \"local-storage\" represents\
    \ the\n   ability for a device to store syslog messages on local storage of\n\
    \   some sort.  This feature is used to make the \"local-storage-limit\"\n   leaf\
    \ conditional on the presence of some sort of local storage.  If\n   the device\
    \ does not report that it supports this feature, the\n   \"local-storage-limit\"\
    \ node is not supported.\n     module syslog {\n         ...\n         feature\
    \ local-storage {\n             description\n                 \"This feature means\
    \ the device supports local\n                  storage (memory, flash or disk)\
    \ that can be used to\n                  store syslog messages.\";\n         }\n\
    \         container syslog {\n             leaf local-storage-limit {\n      \
    \           if-feature local-storage;\n                 type uint64;\n       \
    \          units \"kilobyte\";\n                 config false;\n             \
    \    description\n                     \"The amount of local storage that can\
    \ be\n                      used to hold syslog messages.\";\n             }\n\
    \         }\n     }\n   The \"if-feature\" statement can be used in many places\
    \ within the YANG\n   syntax.  Definitions tagged with \"if-feature\" are ignored\
    \ when the\n   device does not support that feature.\n   A feature MUST NOT reference\
    \ itself, neither directly nor indirectly\n   through a chain of other features.\n\
    \   In order for a device to implement a feature that is dependent on any\n  \
    \ other features (i.e., the feature has one or more \"if-feature\" sub-\n   statements),\
    \ the device MUST also implement all the dependant\n   features.\n"
- title: 7.18.1.1.  The feature's Substatements
  contents:
  - "7.18.1.1.  The feature's Substatements\n                 +--------------+---------+-------------+\n\
    \                 | substatement | section | cardinality |\n                 +--------------+---------+-------------+\n\
    \                 | description  | 7.19.3  | 0..1        |\n                 |\
    \ if-feature   | 7.18.2  | 0..n        |\n                 | status       | 7.19.2\
    \  | 0..1        |\n                 | reference    | 7.19.4  | 0..1        |\n\
    \                 +--------------+---------+-------------+\n"
- title: 7.18.2.  The if-feature Statement
  contents:
  - "7.18.2.  The if-feature Statement\n   The \"if-feature\" statement makes its\
    \ parent statement conditional.\n   The argument is the name of a feature, as\
    \ defined by a \"feature\"\n   statement.  The parent statement is implemented\
    \ by servers that\n   support this feature.  If a prefix is present on the feature\
    \ name, it\n   refers to a feature defined in the module that was imported with\
    \ that\n   prefix, or the local module if the prefix matches the local module's\n\
    \   prefix.  Otherwise, a feature with the matching name MUST be defined\n   in\
    \ the current module or an included submodule.\n   Since submodules cannot include\
    \ the parent module, any features in\n   the module that need to be exposed to\
    \ submodules MUST be defined in a\n   submodule.  Submodules can then include\
    \ this submodule to find the\n   definition of the feature.\n"
- title: 7.18.3.  The deviation Statement
  contents:
  - "7.18.3.  The deviation Statement\n   The \"deviation\" statement defines a hierarchy\
    \ of a module that the\n   device does not implement faithfully.  The argument\
    \ is a string that\n   identifies the node in the schema tree where a deviation\
    \ from the\n   module occurs.  This node is called the deviation's target node.\
    \  The\n   contents of the \"deviation\" statement give details about the\n  \
    \ deviation.\n   The argument string is an absolute schema node identifier (see\n\
    \   Section 6.5).\n   Deviations define the way a device or class of devices deviate\
    \ from a\n   standard.  This means that deviations MUST never be part of a\n \
    \  published standard, since they are the mechanism for learning how\n   implementations\
    \ vary from the standards.\n   Device deviations are strongly discouraged and\
    \ MUST only be used as a\n   last resort.  Telling the application how a device\
    \ fails to follow a\n   standard is no substitute for implementing the standard\
    \ correctly.  A\n   device that deviates from a module is not fully compliant\
    \ with the\n   module.\n   However, in some cases, a particular device may not\
    \ have the hardware\n   or software ability to support parts of a standard module.\
    \  When this\n   occurs, the device makes a choice either to treat attempts to\n\
    \   configure unsupported parts of the module as an error that is\n   reported\
    \ back to the unsuspecting application or ignore those\n   incoming requests.\
    \  Neither choice is acceptable.\n   Instead, YANG allows devices to document\
    \ portions of a base module\n   that are not supported or supported but with different\
    \ syntax, by\n   using the \"deviation\" statement.\n"
- title: 7.18.3.1.  The deviation's Substatements
  contents:
  - "7.18.3.1.  The deviation's Substatements\n                 +--------------+----------+-------------+\n\
    \                 | substatement | section  | cardinality |\n                \
    \ +--------------+----------+-------------+\n                 | description  |\
    \ 7.19.3   | 0..1        |\n                 | deviate      | 7.18.3.2 | 1..n\
    \        |\n                 | reference    | 7.19.4   | 0..1        |\n     \
    \            +--------------+----------+-------------+\n"
- title: 7.18.3.2.  The deviate Statement
  contents:
  - "7.18.3.2.  The deviate Statement\n   The \"deviate\" statement defines how the\
    \ device's implementation of\n   the target node deviates from its original definition.\
    \  The argument\n   is one of the strings \"not-supported\", \"add\", \"replace\"\
    , or \"delete\".\n   The argument \"not-supported\" indicates that the target\
    \ node is not\n   implemented by this device.\n   The argument \"add\" adds properties\
    \ to the target node.  The\n   properties to add are identified by substatements\
    \ to the \"deviate\"\n   statement.  If a property can only appear once, the property\
    \ MUST NOT\n   exist in the target node.\n   The argument \"replace\" replaces\
    \ properties of the target node.  The\n   properties to replace are identified\
    \ by substatements to the\n   \"deviate\" statement.  The properties to replace\
    \ MUST exist in the\n   target node.\n   The argument \"delete\" deletes properties\
    \ from the target node.  The\n   properties to delete are identified by substatements\
    \ to the \"delete\"\n   statement.  The substatement's keyword MUST match a corresponding\n\
    \   keyword in the target node, and the argument's string MUST be equal\n   to\
    \ the corresponding keyword's argument string in the target node.\n          \
    \             The deviates's Substatements\n                 +--------------+---------+-------------+\n\
    \                 | substatement | section | cardinality |\n                 +--------------+---------+-------------+\n\
    \                 | config       | 7.19.1  | 0..1        |\n                 |\
    \ default      | 7.6.4   | 0..1        |\n                 | mandatory    | 7.6.5\
    \   | 0..1        |\n                 | max-elements | 7.7.4   | 0..1        |\n\
    \                 | min-elements | 7.7.3   | 0..1        |\n                 |\
    \ must         | 7.5.3   | 0..n        |\n                 | type         | 7.4\
    \     | 0..1        |\n                 | unique       | 7.8.3   | 0..n      \
    \  |\n                 | units        | 7.3.3   | 0..1        |\n            \
    \     +--------------+---------+-------------+\n"
- title: 7.18.3.3.  Usage Example
  contents:
  - "7.18.3.3.  Usage Example\n   In this example, the device is informing client\
    \ applications that it\n   does not support the \"daytime\" service in the style\
    \ of RFC 867.\n     deviation /base:system/base:daytime {\n         deviate not-supported;\n\
    \     }\n   The following example sets a device-specific default value to a leaf\n\
    \   that does not have a default value defined:\n     deviation /base:system/base:user/base:type\
    \ {\n         deviate add {\n             default \"admin\"; // new users are\
    \ 'admin' by default\n         }\n     }\n   In this example, the device limits\
    \ the number of name servers to 3:\n     deviation /base:system/base:name-server\
    \ {\n         deviate replace {\n             max-elements 3;\n         }\n  \
    \   }\n   If the original definition is:\n     container system {\n         must\
    \ \"daytime or time\";\n         ...\n     }\n   a device might remove this must\
    \ constraint by doing:\n     deviation \"/base:system\" {\n         deviate delete\
    \ {\n             must \"daytime or time\";\n         }\n     }\n"
- title: 7.19.  Common Statements
  contents:
  - "7.19.  Common Statements\n   This section defines substatements common to several\
    \ other\n   statements.\n"
- title: 7.19.1.  The config Statement
  contents:
  - "7.19.1.  The config Statement\n   The \"config\" statement takes as an argument\
    \ the string \"true\" or\n   \"false\".  If \"config\" is \"true\", the definition\
    \ represents\n   configuration.  Data nodes representing configuration will be\
    \ part of\n   the reply to a <get-config> request, and can be sent in a\n   <copy-config>\
    \ or <edit-config> request.\n   If \"config\" is \"false\", the definition represents\
    \ state data.  Data\n   nodes representing state data will be part of the reply\
    \ to a <get>,\n   but not to a <get-config> request, and cannot be sent in a\n\
    \   <copy-config> or <edit-config> request.\n   If \"config\" is not specified,\
    \ the default is the same as the parent\n   schema node's \"config\" value.  If\
    \ the parent node is a \"case\" node,\n   the value is the same as the \"case\"\
    \ node's parent \"choice\" node.\n   If the top node does not specify a \"config\"\
    \ statement, the default is\n   \"true\".\n   If a node has \"config\" set to\
    \ \"false\", no node underneath it can have\n   \"config\" set to \"true\".\n"
- title: 7.19.2.  The status Statement
  contents:
  - "7.19.2.  The status Statement\n   The \"status\" statement takes as an argument\
    \ one of the strings\n   \"current\", \"deprecated\", or \"obsolete\".\n   o \
    \ \"current\" means that the definition is current and valid.\n   o  \"deprecated\"\
    \ indicates an obsolete definition, but it permits new/\n      continued implementation\
    \ in order to foster interoperability with\n      older/existing implementations.\n\
    \   o  \"obsolete\" means the definition is obsolete and SHOULD NOT be\n     \
    \ implemented and/or can be removed from implementations.\n   If no status is\
    \ specified, the default is \"current\".\n   If a definition is \"current\", it\
    \ MUST NOT reference a \"deprecated\" or\n   \"obsolete\" definition within the\
    \ same module.\n   If a definition is \"deprecated\", it MUST NOT reference an\
    \ \"obsolete\"\n   definition within the same module.\n   For example, the following\
    \ is illegal:\n     typedef my-type {\n       status deprecated;\n       type\
    \ int32;\n     }\n     leaf my-leaf {\n       status current;\n       type my-type;\
    \ // illegal, since my-type is deprecated\n     }\n"
- title: 7.19.3.  The description Statement
  contents:
  - "7.19.3.  The description Statement\n   The \"description\" statement takes as\
    \ an argument a string that\n   contains a human-readable textual description\
    \ of this definition.\n   The text is provided in a language (or languages) chosen\
    \ by the\n   module developer; for the sake of interoperability, it is RECOMMENDED\n\
    \   to choose a language that is widely understood among the community of\n  \
    \ network administrators who will use the module.\n"
- title: 7.19.4.  The reference Statement
  contents:
  - "7.19.4.  The reference Statement\n   The \"reference\" statement takes as an\
    \ argument a string that is used\n   to specify a textual cross-reference to an\
    \ external document, either\n   another module that defines related management\
    \ information, or a\n   document that provides additional information relevant\
    \ to this\n   definition.\n   For example, a typedef for a \"uri\" data type could\
    \ look like:\n     typedef uri {\n       type string;\n       reference\n    \
    \     \"RFC 3986: Uniform Resource Identifier (URI): Generic Syntax\";\n     \
    \  ...\n     }\n"
- title: 7.19.5.  The when Statement
  contents:
  - "7.19.5.  The when Statement\n   The \"when\" statement makes its parent data\
    \ definition statement\n   conditional.  The node defined by the parent data definition\n\
    \   statement is only valid when the condition specified by the \"when\"\n   statement\
    \ is satisfied.  The statement's argument is an XPath\n   expression (see Section\
    \ 6.4), which is used to formally specify this\n   condition.  If the XPath expression\
    \ conceptually evaluates to \"true\"\n   for a particular instance, then the node\
    \ defined by the parent data\n   definition statement is valid; otherwise, it\
    \ is not.\n   See Section 8.3.2 for additional information.\n   The XPath expression\
    \ is conceptually evaluated in the following\n   context, in addition to the definition\
    \ in Section 6.4.1:\n   o  If the \"when\" statement is a child of an \"augment\"\
    \ statement, then\n      the context node is the augment's target node in the\
    \ data tree, if\n      the target node is a data node.  Otherwise, the context\
    \ node is\n      the closest ancestor node to the target node that is also a data\n\
    \      node.\n   o  If the \"when\" statement is a child of a \"uses\", \"choice\"\
    , or\n      \"case\" statement, then the context node is the closest ancestor\n\
    \      node to the \"uses\", \"choice\", or \"case\" node that is also a data\n\
    \      node.\n   o  If the \"when\" statement is a child of any other data definition\n\
    \      statement, the context node is the data definition's node in the\n    \
    \  data tree.\n   o  The accessible tree is made up of all nodes in the data tree,\
    \ and\n      all leafs with default values in use (see Section 7.6.1).\n   The\
    \ accessible tree depends on the context node:\n   o  If the context node represents\
    \ configuration, the tree is the data\n      in the NETCONF datastore where the\
    \ context node exists.  The XPath\n      root node has all top-level configuration\
    \ data nodes in all\n      modules as children.\n   o  If the context node represents\
    \ state data, the tree is all state\n      data on the device, and the <running/>\
    \ datastore.  The XPath root\n      node has all top-level data nodes in all modules\
    \ as children.\n   o  If the context node represents notification content, the\
    \ tree is\n      the notification XML instance document.  The XPath root node\
    \ has\n      the element representing the notification being defined as the\n\
    \      only child.\n   o  If the context node represents RPC input parameters,\
    \ the tree is\n      the RPC XML instance document.  The XPath root node has the\n\
    \      element representing the RPC operation being defined as the only\n    \
    \  child.\n   o  If the context node represents RPC output parameters, the tree\
    \ is\n      the RPC reply instance document.  The XPath root node has the\n  \
    \    elements representing the RPC output parameters as children.\n   The result\
    \ of the XPath expression is converted to a boolean value\n   using the standard\
    \ XPath rules.\n   Note that the XPath expression is conceptually evaluated. \
    \ This means\n   that an implementation does not have to use an XPath evaluator\
    \ on the\n   device.  The \"when\" statement can very well be implemented with\n\
    \   specially written code.\n"
- title: 8.  Constraints
  contents:
  - '8.  Constraints

    '
- title: 8.1.  Constraints on Data
  contents:
  - "8.1.  Constraints on Data\n   Several YANG statements define constraints on valid\
    \ data.  These\n   constraints are enforced in different ways, depending on what\
    \ type of\n   data the statement defines.\n   o  If the constraint is defined\
    \ on configuration data, it MUST be\n      true in a valid configuration data\
    \ tree.\n   o  If the constraint is defined on state data, it MUST be true in\
    \ a\n      reply to a <get> operation without a filter.\n   o  If the constraint\
    \ is defined on notification content, it MUST be\n      true in any notification\
    \ instance.\n   o  If the constraint is defined on RPC input parameters, it MUST\
    \ be\n      true in an invocation of the RPC operation.\n   o  If the constraint\
    \ is defined on RPC output parameters, it MUST be\n      true in the RPC reply.\n"
- title: 8.2.  Hierarchy of Constraints
  contents:
  - "8.2.  Hierarchy of Constraints\n   Conditions on parent nodes affect constraints\
    \ on child nodes as a\n   natural consequence of the hierarchy of nodes. \"must\"\
    , \"mandatory\",\n   \"min-elements\", and \"max-elements\" constraints are not\
    \ enforced if\n   the parent node has a \"when\" or \"if-feature\" property that\
    \ is not\n   satisfied on the current device.\n   In this example, the \"mandatory\"\
    \ constraint on the \"longitude\" leaf\n   are not enforced on devices that lack\
    \ the \"has-gps\" feature:\n       container location {\n           if-feature\
    \ has-gps;\n           leaf longitude {\n               mandatory true;\n    \
    \           ...\n           }\n       }\n"
- title: 8.3.  Constraint Enforcement Model
  contents:
  - "8.3.  Constraint Enforcement Model\n   For configuration data, there are three\
    \ windows when constraints MUST\n   be enforced:\n   o  during parsing of RPC\
    \ payloads\n   o  during processing of NETCONF operations\n   o  during validation\n\
    \   Each of these scenarios is considered in the following sections.\n"
- title: 8.3.1.  Payload Parsing
  contents:
  - "8.3.1.  Payload Parsing\n   When content arrives in RPC payloads, it MUST be\
    \ well-formed XML,\n   following the hierarchy and content rules defined by the\
    \ set of\n   models the device implements.\n   o  If a leaf data value does not\
    \ match the type constraints for the\n      leaf, including those defined in the\
    \ type's \"range\", \"length\", and\n      \"pattern\" properties, the server\
    \ MUST reply with an\n      \"invalid-value\" error-tag in the rpc-error, and\
    \ with the error-\n      app-tag and error-message associated with the constraint,\
    \ if any\n      exist.\n   o  If all keys of a list entry are not present, the\
    \ server MUST reply\n      with a \"missing-element\" error-tag in the rpc-error.\n\
    \   o  If data for more than one case branch of a choice is present, the\n   \
    \   server MUST reply with a \"bad-element\" in the rpc-error.\n   o  If data\
    \ for a node tagged with \"if-feature\" is present, and the\n      feature is\
    \ not supported by the device, the server MUST reply with\n      an \"unknown-element\"\
    \ error-tag in the rpc-error.\n   o  If data for a node tagged with \"when\" is\
    \ present, and the \"when\"\n      condition evaluates to \"false\", the server\
    \ MUST reply with an\n      \"unknown-element\" error-tag in the rpc-error.\n\
    \   o  For insert handling, if the value for the attributes \"before\" and\n \
    \     \"after\" are not valid for the type of the appropriate key leafs,\n   \
    \   the server MUST reply with a \"bad-attribute\" error-tag in the rpc-\n   \
    \   error.\n   o  If the attributes \"before\" and \"after\" appears in any element\
    \ that\n      is not a list whose \"ordered-by\" property is \"user\", the server\n\
    \      MUST reply with an \"unknown-attribute\" error-tag in the rpc-error.\n"
- title: 8.3.2.  NETCONF <edit-config> Processing
  contents:
  - "8.3.2.  NETCONF <edit-config> Processing\n   After the incoming data is parsed,\
    \ the NETCONF server performs the\n   <edit-config> operation by applying the\
    \ data to the configuration\n   datastore.  During this processing, the following\
    \ errors MUST be\n   detected:\n   o  Delete requests for non-existent data.\n\
    \   o  Create requests for existent data.\n   o  Insert requests with \"before\"\
    \ or \"after\" parameters that do not\n      exist.\n   During <edit-config> processing:\n\
    \   o  If the NETCONF operation creates data nodes under a \"choice\", any\n \
    \     existing nodes from other \"case\" branches are deleted by the\n      server.\n\
    \   o  If the NETCONF operation modifies a data node such that any node's\n  \
    \    \"when\" expression becomes false, then the node with the \"when\"\n    \
    \  expression is deleted by the server.\n"
- title: 8.3.3.  Validation
  contents:
  - "8.3.3.  Validation\n   When datastore processing is complete, the final contents\
    \ MUST obey\n   all validation constraints.  This validation processing is performed\n\
    \   at differing times according to the datastore.  If the datastore is\n   <running/>\
    \ or <startup/>, these constraints MUST be enforced at the\n   end of the <edit-config>\
    \ or <copy-config> operation.  If the\n   datastore is <candidate/>, the constraint\
    \ enforcement is delayed\n   until a <commit> or <validate> operation.\n   o \
    \ Any \"must\" constraints MUST evaluate to \"true\".\n   o  Any referential integrity\
    \ constraints defined via the \"path\"\n      statement MUST be satisfied.\n \
    \  o  Any \"unique\" constraints on lists MUST be satisfied.\n   o  The \"min-elements\"\
    \ and \"max-elements\" constraints are enforced for\n      lists and leaf-lists.\n"
- title: 9.  Built-In Types
  contents:
  - "9.  Built-In Types\n   YANG has a set of built-in types, similar to those of\
    \ many\n   programming languages, but with some differences due to special\n \
    \  requirements from the management information model.\n   Additional types may\
    \ be defined, derived from those built-in types or\n   from other derived types.\
    \  Derived types may use subtyping to\n   formally restrict the set of possible\
    \ values.\n   The different built-in types and their derived types allow different\n\
    \   kinds of subtyping, namely length and regular expression restrictions\n  \
    \ of strings (Sections 9.4.4 and 9.4.6) and range restrictions of\n   numeric\
    \ types (Section 9.2.4).\n   The lexical representation of a value of a certain\
    \ type is used in\n   the NETCONF messages and when specifying default values\
    \ and numerical\n   ranges in YANG modules.\n"
- title: 9.1.  Canonical Representation
  contents:
  - "9.1.  Canonical Representation\n   For most types, there is a single canonical\
    \ representation of the\n   type's values.  Some types allow multiple lexical\
    \ representations of\n   the same value, for example, the positive integer \"\
    17\" can be\n   represented as \"+17\" or \"17\".  Implementations MUST support\
    \ all\n   lexical representations specified in this document.\n   When a NETCONF\
    \ server sends data, it MUST be in the canonical form.\n   Some types have a lexical\
    \ representation that depends on the XML\n   context in which they occur.  These\
    \ types do not have a canonical\n   form.\n"
- title: 9.2.  The Integer Built-In Types
  contents:
  - "9.2.  The Integer Built-In Types\n   The integer built-in types are int8, int16,\
    \ int32, int64, uint8,\n   uint16, uint32, and uint64.  They represent signed\
    \ and unsigned\n   integers of different sizes:\n   int8  represents integer values\
    \ between -128 and 127, inclusively.\n   int16  represents integer values between\
    \ -32768 and 32767,\n      inclusively.\n   int32  represents integer values between\
    \ -2147483648 and 2147483647,\n      inclusively.\n   int64  represents integer\
    \ values between -9223372036854775808 and\n      9223372036854775807, inclusively.\n\
    \   uint8  represents integer values between 0 and 255, inclusively.\n   uint16\
    \  represents integer values between 0 and 65535, inclusively.\n   uint32  represents\
    \ integer values between 0 and 4294967295,\n      inclusively.\n   uint64  represents\
    \ integer values between 0 and 18446744073709551615,\n      inclusively.\n"
- title: 9.2.1.  Lexical Representation
  contents:
  - "9.2.1.  Lexical Representation\n   An integer value is lexically represented\
    \ as an optional sign (\"+\" or\n   \"-\"), followed by a sequence of decimal\
    \ digits.  If no sign is\n   specified, \"+\" is assumed.\n   For convenience,\
    \ when specifying a default value for an integer in a\n   YANG module, an alternative\
    \ lexical representation can be used, which\n   represents the value in a hexadecimal\
    \ or octal notation.  The\n   hexadecimal notation consists of an optional sign\
    \ (\"+\" or \"-\"), the\n   characters \"0x\" followed a number of hexadecimal\
    \ digits, where\n   letters may be uppercase or lowercase.  The octal notation\
    \ consists\n   of an optional sign (\"+\" or \"-\"), the character \"0\" followed\
    \ a number\n   of octal digits.\n   Note that if a default value in a YANG module\
    \ has a leading zero\n   (\"0\"), it is interpreted as an octal number.  In the\
    \ XML instance\n   documents, an integer is always interpreted as a decimal number,\
    \ and\n   leading zeros are allowed.\n   Examples:\n     // legal values\n   \
    \  +4711                       // legal positive value\n     4711            \
    \            // legal positive value\n     -123                        // legal\
    \ negative value\n     0xf00f                      // legal positive hexadecimal\
    \ value\n     -0xf                        // legal negative hexadecimal value\n\
    \     052                         // legal positive octal value\n     // illegal\
    \ values\n     - 1                         // illegal intermediate space\n"
- title: 9.2.2.  Canonical Form
  contents:
  - "9.2.2.  Canonical Form\n   The canonical form of a positive integer does not\
    \ include the sign\n   \"+\".  Leading zeros are prohibited.  The value zero is\
    \ represented as\n   \"0\".\n"
- title: 9.2.3.  Restrictions
  contents:
  - "9.2.3.  Restrictions\n   All integer types can be restricted with the \"range\"\
    \ statement\n   (Section 9.2.4).\n"
- title: 9.2.4.  The range Statement
  contents:
  - "9.2.4.  The range Statement\n   The \"range\" statement, which is an optional\
    \ substatement to the\n   \"type\" statement, takes as an argument a range expression\
    \ string.  It\n   is used to restrict integer and decimal built-in types, or types\n\
    \   derived from those.\n   A range consists of an explicit value, or a lower-inclusive\
    \ bound,\n   two consecutive dots \"..\", and an upper-inclusive bound.  Multiple\n\
    \   values or ranges can be given, separated by \"|\".  If multiple values\n \
    \  or ranges are given, they all MUST be disjoint and MUST be in\n   ascending\
    \ order.  If a range restriction is applied to an already\n   range-restricted\
    \ type, the new restriction MUST be equal or more\n   limiting, that is raising\
    \ the lower bounds, reducing the upper\n   bounds, removing explicit values or\
    \ ranges, or splitting ranges into\n   multiple ranges with intermediate gaps.\
    \  Each explicit value and\n   range boundary value given in the range expression\
    \ MUST match the\n   type being restricted, or be one of the special values \"\
    min\" or\n   \"max\". \"min\" and \"max\" mean the minimum and maximum value accepted\n\
    \   for the type being restricted, respectively.\n   The range expression syntax\
    \ is formally defined by the rule\n   \"range-arg\" in Section 12.\n"
- title: 9.2.4.1.  The range's Substatements
  contents:
  - "9.2.4.1.  The range's Substatements\n                 +---------------+---------+-------------+\n\
    \                 | substatement  | section | cardinality |\n                \
    \ +---------------+---------+-------------+\n                 | description  \
    \ | 7.19.3  | 0..1        |\n                 | error-app-tag | 7.5.4.2 | 0..1\
    \        |\n                 | error-message | 7.5.4.1 | 0..1        |\n     \
    \            | reference     | 7.19.4  | 0..1        |\n                 +---------------+---------+-------------+\n"
- title: 9.2.5.  Usage Example
  contents:
  - "9.2.5.  Usage Example\n     typedef my-base-int32-type {\n         type int32\
    \ {\n             range \"1..4 | 10..20\";\n         }\n     }\n     typedef my-type1\
    \ {\n         type my-base-int32-type {\n             // legal range restriction\n\
    \             range \"11..max\"; // 11..20\n         }\n     }\n     typedef my-type2\
    \ {\n         type my-base-int32-type {\n             // illegal range restriction\n\
    \             range \"11..100\";\n         }\n     }\n"
- title: 9.3.  The decimal64 Built-In Type
  contents:
  - "9.3.  The decimal64 Built-In Type\n   The decimal64 type represents a subset\
    \ of the real numbers, which can\n   be represented by decimal numerals.  The\
    \ value space of decimal64 is\n   the set of numbers that can be obtained by multiplying\
    \ a 64-bit\n   signed integer by a negative power of ten, i.e., expressible as\n\
    \   \"i x 10^-n\" where i is an integer64 and n is an integer between 1 and\n\
    \   18, inclusively.\n"
- title: 9.3.1.  Lexical Representation
  contents:
  - "9.3.1.  Lexical Representation\n   A decimal64 value is lexically represented\
    \ as an optional sign (\"+\"\n   or \"-\"), followed by a sequence of decimal\
    \ digits, optionally\n   followed by a period ('.') as a decimal indicator and\
    \ a sequence of\n   decimal digits.  If no sign is specified, \"+\" is assumed.\n"
- title: 9.3.2.  Canonical Form
  contents:
  - "9.3.2.  Canonical Form\n   The canonical form of a positive decimal64 does not\
    \ include the sign\n   \"+\".  The decimal point is required.  Leading and trailing\
    \ zeros are\n   prohibited, subject to the rule that there MUST be at least one\
    \ digit\n   before and after the decimal point.  The value zero is represented\
    \ as\n   \"0.0\".\n"
- title: 9.3.3.  Restrictions
  contents:
  - "9.3.3.  Restrictions\n   A decimal64 type can be restricted with the \"range\"\
    \ statement\n   (Section 9.2.4).\n"
- title: 9.3.4.  The fraction-digits Statement
  contents:
  - "9.3.4.  The fraction-digits Statement\n   The \"fraction-digits\" statement,\
    \ which is a substatement to the\n   \"type\" statement, MUST be present if the\
    \ type is \"decimal64\".  It\n   takes as an argument an integer between 1 and\
    \ 18, inclusively.  It\n   controls the size of the minimum difference between\
    \ values of a\n   decimal64 type, by restricting the value space to numbers that\
    \ are\n   expressible as \"i x 10^-n\" where n is the fraction-digits argument.\n\
    \   The following table lists the minimum and maximum value for each\n   fraction-digit\
    \ value:\n     +----------------+-----------------------+----------------------+\n\
    \     | fraction-digit | min                   | max                  |\n    \
    \ +----------------+-----------------------+----------------------+\n     | 1\
    \              | -922337203685477580.8 | 922337203685477580.7 |\n     | 2    \
    \          | -92233720368547758.08 | 92233720368547758.07 |\n     | 3        \
    \      | -9223372036854775.808 | 9223372036854775.807 |\n     | 4            \
    \  | -922337203685477.5808 | 922337203685477.5807 |\n     | 5              | -92233720368547.75808\
    \ | 92233720368547.75807 |\n     | 6              | -9223372036854.775808 | 9223372036854.775807\
    \ |\n     | 7              | -922337203685.4775808 | 922337203685.4775807 |\n\
    \     | 8              | -92233720368.54775808 | 92233720368.54775807 |\n    \
    \ | 9              | -9223372036.854775808 | 9223372036.854775807 |\n     | 10\
    \             | -922337203.6854775808 | 922337203.6854775807 |\n     | 11    \
    \         | -92233720.36854775808 | 92233720.36854775807 |\n     | 12        \
    \     | -9223372.036854775808 | 9223372.036854775807 |\n     | 13            \
    \ | -922337.2036854775808 | 922337.2036854775807 |\n     | 14             | -92233.72036854775808\
    \ | 92233.72036854775807 |\n     | 15             | -9223.372036854775808 | 9223.372036854775807\
    \ |\n     | 16             | -922.3372036854775808 | 922.3372036854775807 |\n\
    \     | 17             | -92.23372036854775808 | 92.23372036854775807 |\n    \
    \ | 18             | -9.223372036854775808 | 9.223372036854775807 |\n     +----------------+-----------------------+----------------------+\n"
- title: 9.3.5.  Usage Example
  contents:
  - "9.3.5.  Usage Example\n     typedef my-decimal {\n         type decimal64 {\n\
    \             fraction-digits 2;\n             range \"1 .. 3.14 | 10 | 20..max\"\
    ;\n         }\n     }\n"
- title: 9.4.  The string Built-In Type
  contents:
  - "9.4.  The string Built-In Type\n   The string built-in type represents human-readable\
    \ strings in YANG.\n   Legal characters are tab, carriage return, line feed, and\
    \ the legal\n   characters of Unicode and ISO/IEC 10646 [ISO.10646]:\n     ;;\
    \ any Unicode character, excluding the surrogate blocks,\n     ;; FFFE, and FFFF.\n\
    \     string = *char\n     char = %x9 / %xA / %xD / %x20-D7FF / %xE000-FFFD /\n\
    \            %x10000-10FFFF\n"
- title: 9.4.1.  Lexical Representation
  contents:
  - "9.4.1.  Lexical Representation\n   A string value is lexically represented as\
    \ character data in the XML\n   instance documents.\n"
- title: 9.4.2.  Canonical Form
  contents:
  - "9.4.2.  Canonical Form\n   The canonical form is the same as the lexical representation.\
    \  No\n   Unicode normalization is performed of string values.\n"
- title: 9.4.3.  Restrictions
  contents:
  - "9.4.3.  Restrictions\n   A string can be restricted with the \"length\" (Section\
    \ 9.4.4) and\n   \"pattern\" (Section 9.4.6) statements.\n"
- title: 9.4.4.  The length Statement
  contents:
  - "9.4.4.  The length Statement\n   The \"length\" statement, which is an optional\
    \ substatement to the\n   \"type\" statement, takes as an argument a length expression\
    \ string.\n   It is used to restrict the built-in type \"string\", or types derived\n\
    \   from \"string\".\n   A \"length\" statement restricts the number of Unicode\
    \ characters in\n   the string.\n   A length range consists of an explicit value,\
    \ or a lower bound, two\n   consecutive dots \"..\", and an upper bound.  Multiple\
    \ values or ranges\n   can be given, separated by \"|\".  Length-restricting values\
    \ MUST NOT\n   be negative.  If multiple values or ranges are given, they all\
    \ MUST\n   be disjoint and MUST be in ascending order.  If a length restriction\n\
    \   is applied to an already length-restricted type, the new restriction\n   MUST\
    \ be equal or more limiting, that is, raising the lower bounds,\n   reducing the\
    \ upper bounds, removing explicit length values or ranges,\n   or splitting ranges\
    \ into multiple ranges with intermediate gaps.  A\n   length value is a non-negative\
    \ integer, or one of the special values\n   \"min\" or \"max\". \"min\" and \"\
    max\" mean the minimum and maximum length\n   accepted for the type being restricted,\
    \ respectively.  An\n   implementation is not required to support a length value\
    \ larger than\n   18446744073709551615.\n   The length expression syntax is formally\
    \ defined by the rule\n   \"length-arg\" in Section 12.\n"
- title: 9.4.4.1.  The length's Substatements
  contents:
  - "9.4.4.1.  The length's Substatements\n                 +---------------+---------+-------------+\n\
    \                 | substatement  | section | cardinality |\n                \
    \ +---------------+---------+-------------+\n                 | description  \
    \ | 7.19.3  | 0..1        |\n                 | error-app-tag | 7.5.4.2 | 0..1\
    \        |\n                 | error-message | 7.5.4.1 | 0..1        |\n     \
    \            | reference     | 7.19.4  | 0..1        |\n                 +---------------+---------+-------------+\n"
- title: 9.4.5.  Usage Example
  contents:
  - "9.4.5.  Usage Example\n     typedef my-base-str-type {\n         type string\
    \ {\n             length \"1..255\";\n         }\n     }\n     type my-base-str-type\
    \ {\n         // legal length refinement\n         length \"11 | 42..max\"; //\
    \ 11 | 42..255\n     }\n     type my-base-str-type {\n         // illegal length\
    \ refinement\n         length \"1..999\";\n     }\n"
- title: 9.4.6.  The pattern Statement
  contents:
  - "9.4.6.  The pattern Statement\n   The \"pattern\" statement, which is an optional\
    \ substatement to the\n   \"type\" statement, takes as an argument a regular expression\
    \ string,\n   as defined in [XSD-TYPES].  It is used to restrict the built-in\
    \ type\n   \"string\", or types derived from \"string\", to values that match\
    \ the\n   pattern.\n   If the type has multiple \"pattern\" statements, the expressions\
    \ are\n   ANDed together, i.e., all such expressions have to match.\n   If a pattern\
    \ restriction is applied to an already pattern-restricted\n   type, values must\
    \ match all patterns in the base type, in addition to\n   the new patterns.\n"
- title: 9.4.6.1.  The pattern's Substatements
  contents:
  - "9.4.6.1.  The pattern's Substatements\n                 +---------------+---------+-------------+\n\
    \                 | substatement  | section | cardinality |\n                \
    \ +---------------+---------+-------------+\n                 | description  \
    \ | 7.19.3  | 0..1        |\n                 | error-app-tag | 7.5.4.2 | 0..1\
    \        |\n                 | error-message | 7.5.4.1 | 0..1        |\n     \
    \            | reference     | 7.19.4  | 0..1        |\n                 +---------------+---------+-------------+\n"
- title: 9.4.7.  Usage Example
  contents:
  - "9.4.7.  Usage Example\n   With the following type:\n     type string {\n    \
    \     length \"0..4\";\n         pattern \"[0-9a-fA-F]*\";\n     }\n   the following\
    \ strings match:\n     AB          // legal\n     9A00        // legal\n   and\
    \ the following strings do not match:\n     00ABAB      // illegal, too long\n\
    \     xx00        // illegal, bad characters\n"
- title: 9.5.  The boolean Built-In Type
  contents:
  - "9.5.  The boolean Built-In Type\n   The boolean built-in type represents a boolean\
    \ value.\n"
- title: 9.5.1.  Lexical Representation
  contents:
  - "9.5.1.  Lexical Representation\n   The lexical representation of a boolean value\
    \ is a string with a\n   value of \"true\" or \"false\".  These values MUST be\
    \ in lowercase.\n"
- title: 9.5.2.  Canonical Form
  contents:
  - "9.5.2.  Canonical Form\n   The canonical form is the same as the lexical representation.\n"
- title: 9.5.3.  Restrictions
  contents:
  - "9.5.3.  Restrictions\n   A boolean cannot be restricted.\n"
- title: 9.6.  The enumeration Built-In Type
  contents:
  - "9.6.  The enumeration Built-In Type\n   The enumeration built-in type represents\
    \ values from a set of\n   assigned names.\n"
- title: 9.6.1.  Lexical Representation
  contents:
  - "9.6.1.  Lexical Representation\n   The lexical representation of an enumeration\
    \ value is the assigned\n   name string.\n"
- title: 9.6.2.  Canonical Form
  contents:
  - "9.6.2.  Canonical Form\n   The canonical form is the assigned name string.\n"
- title: 9.6.3.  Restrictions
  contents:
  - "9.6.3.  Restrictions\n   An enumeration cannot be restricted.\n"
- title: 9.6.4.  The enum Statement
  contents:
  - "9.6.4.  The enum Statement\n   The \"enum\" statement, which is a substatement\
    \ to the \"type\"\n   statement, MUST be present if the type is \"enumeration\"\
    .  It is\n   repeatedly used to specify each assigned name of an enumeration type.\n\
    \   It takes as an argument a string which is the assigned name.  The\n   string\
    \ MUST NOT be empty and MUST NOT have any leading or trailing\n   whitespace characters.\
    \  The use of Unicode control codes SHOULD be\n   avoided.\n   The statement is\
    \ optionally followed by a block of substatements that\n   holds detailed enum\
    \ information.\n   All assigned names in an enumeration MUST be unique.\n"
- title: 9.6.4.1.  The enum's Substatements
  contents:
  - "9.6.4.1.  The enum's Substatements\n                 +--------------+---------+-------------+\n\
    \                 | substatement | section | cardinality |\n                 +--------------+---------+-------------+\n\
    \                 | description  | 7.19.3  | 0..1        |\n                 |\
    \ reference    | 7.19.4  | 0..1        |\n                 | status       | 7.19.2\
    \  | 0..1        |\n                 | value        | 9.6.4.2 | 0..1        |\n\
    \                 +--------------+---------+-------------+\n"
- title: 9.6.4.2.  The value Statement
  contents:
  - "9.6.4.2.  The value Statement\n   The \"value\" statement, which is optional,\
    \ is used to associate an\n   integer value with the assigned name for the enum.\
    \  This integer\n   value MUST be in the range -2147483648 to 2147483647, and\
    \ it MUST be\n   unique within the enumeration type.  The value is unused by YANG\
    \ and\n   the XML encoding, but is carried as a convenience to implementors.\n\
    \   If a value is not specified, then one will be automatically assigned.\n  \
    \ If the \"enum\" substatement is the first one defined, the assigned\n   value\
    \ is zero (0); otherwise, the assigned value is one greater than\n   the current\
    \ highest enum value.\n   If the current highest value is equal to 2147483647,\
    \ then an enum\n   value MUST be specified for \"enum\" substatements following\
    \ the one\n   with the current highest value.\n"
- title: 9.6.5.  Usage Example
  contents:
  - "9.6.5.  Usage Example\n     leaf myenum {\n         type enumeration {\n    \
    \         enum zero;\n             enum one;\n             enum seven {\n    \
    \             value 7;\n             }\n         }\n     }\n   The lexical representation\
    \ of the leaf \"myenum\" with value \"seven\"\n   is:\n     <myenum>seven</myenum>\n"
- title: 9.7.  The bits Built-In Type
  contents:
  - "9.7.  The bits Built-In Type\n   The bits built-in type represents a bit set.\
    \  That is, a bits value\n   is a set of flags identified by small integer position\
    \ numbers\n   starting at 0.  Each bit number has an assigned name.\n"
- title: 9.7.1.  Restrictions
  contents:
  - "9.7.1.  Restrictions\n   A bits type cannot be restricted.\n"
- title: 9.7.2.  Lexical Representation
  contents:
  - "9.7.2.  Lexical Representation\n   The lexical representation of the bits type\
    \ is a space-separated list\n   of the individual bit values that are set.  An\
    \ empty string thus\n   represents a value where no bits are set.\n"
- title: 9.7.3.  Canonical Form
  contents:
  - "9.7.3.  Canonical Form\n   In the canonical form, the bit values are separated\
    \ by a single space\n   character and they appear ordered by their position (see\n\
    \   Section 9.7.4.2).\n"
- title: 9.7.4.  The bit Statement
  contents:
  - "9.7.4.  The bit Statement\n   The \"bit\" statement, which is a substatement\
    \ to the \"type\" statement,\n   MUST be present if the type is \"bits\".  It\
    \ is repeatedly used to\n   specify each assigned named bit of a bits type.  It\
    \ takes as an\n   argument a string that is the assigned name of the bit.  It\
    \ is\n   followed by a block of substatements that holds detailed bit\n   information.\
    \  The assigned name follows the same syntax rules as an\n   identifier (see Section\
    \ 6.2).\n   All assigned names in a bits type MUST be unique.\n"
- title: 9.7.4.1.  The bit's Substatements
  contents:
  - "9.7.4.1.  The bit's Substatements\n                 +--------------+---------+-------------+\n\
    \                 | substatement | section | cardinality |\n                 +--------------+---------+-------------+\n\
    \                 | description  | 7.19.3  | 0..1        |\n                 |\
    \ reference    | 7.19.4  | 0..1        |\n                 | status       | 7.19.2\
    \  | 0..1        |\n                 | position     | 9.7.4.2 | 0..1        |\n\
    \                 +--------------+---------+-------------+\n"
- title: 9.7.4.2.  The position Statement
  contents:
  - "9.7.4.2.  The position Statement\n   The \"position\" statement, which is optional,\
    \ takes as an argument a\n   non-negative integer value that specifies the bit's\
    \ position within a\n   hypothetical bit field.  The position value MUST be in\
    \ the range 0 to\n   4294967295, and it MUST be unique within the bits type. \
    \ The value is\n   unused by YANG and the NETCONF messages, but is carried as\
    \ a\n   convenience to implementors.\n   If a bit position is not specified, then\
    \ one will be automatically\n   assigned.  If the \"bit\" substatement is the\
    \ first one defined, the\n   assigned value is zero (0); otherwise, the assigned\
    \ value is one\n   greater than the current highest bit position.\n   If the current\
    \ highest bit position value is equal to 4294967295,\n   then a position value\
    \ MUST be specified for \"bit\" substatements\n   following the one with the current\
    \ highest position value.\n"
- title: 9.7.5.  Usage Example
  contents:
  - "9.7.5.  Usage Example\n   Given the following leaf:\n     leaf mybits {\n   \
    \      type bits {\n             bit disable-nagle {\n                 position\
    \ 0;\n             }\n             bit auto-sense-speed {\n                 position\
    \ 1;\n             }\n             bit 10-Mb-only {\n                 position\
    \ 2;\n             }\n         }\n         default \"auto-sense-speed\";\n   \
    \  }\n   The lexical representation of this leaf with bit values disable-nagle\n\
    \   and 10-Mb-only set would be:\n     <mybits>disable-nagle 10-Mb-only</mybits>\n"
- title: 9.8.  The binary Built-In Type
  contents:
  - "9.8.  The binary Built-In Type\n   The binary built-in type represents any binary\
    \ data, i.e., a sequence\n   of octets.\n"
- title: 9.8.1.  Restrictions
  contents:
  - "9.8.1.  Restrictions\n   A binary can be restricted with the \"length\" (Section\
    \ 9.4.4)\n   statement.  The length of a binary value is the number of octets\
    \ it\n   contains.\n"
- title: 9.8.2.  Lexical Representation
  contents:
  - "9.8.2.  Lexical Representation\n   Binary values are encoded with the base64\
    \ encoding scheme (see\n   [RFC4648], Section 4).\n"
- title: 9.8.3.  Canonical Form
  contents:
  - "9.8.3.  Canonical Form\n   The canonical form of a binary value follows the rules\
    \ in [RFC4648].\n"
- title: 9.9.  The leafref Built-In Type
  contents:
  - "9.9.  The leafref Built-In Type\n   The leafref type is used to reference a particular\
    \ leaf instance in\n   the data tree.  The \"path\" substatement (Section 9.9.2)\
    \ selects a set\n   of leaf instances, and the leafref value space is the set\
    \ of values\n   of these leaf instances.\n   If the leaf with the leafref type\
    \ represents configuration data, the\n   leaf it refers to MUST also represent\
    \ configuration.  Such a leaf\n   puts a constraint on valid data.  All leafref\
    \ nodes MUST reference\n   existing leaf instances or leafs with default values\
    \ in use (see\n   Section 7.6.1) for the data to be valid.  This constraint is\
    \ enforced\n   according to the rules in Section 8.\n   There MUST NOT be any\
    \ circular chains of leafrefs.\n   If the leaf that the leafref refers to is conditional\
    \ based on one or\n   more features (see Section 7.18.2), then the leaf with the\
    \ leafref\n   type MUST also be conditional based on at least the same set of\n\
    \   features.\n"
- title: 9.9.1.  Restrictions
  contents:
  - "9.9.1.  Restrictions\n   A leafref cannot be restricted.\n"
- title: 9.9.2.  The path Statement
  contents:
  - "9.9.2.  The path Statement\n   The \"path\" statement, which is a substatement\
    \ to the \"type\"\n   statement, MUST be present if the type is \"leafref\". \
    \ It takes as an\n   argument a string that MUST refer to a leaf or leaf-list\
    \ node.\n   The syntax for a path argument is a subset of the XPath abbreviated\n\
    \   syntax.  Predicates are used only for constraining the values for the\n  \
    \ key nodes for list entries.  Each predicate consists of exactly one\n   equality\
    \ test per key, and multiple adjacent predicates MAY be\n   present if a list\
    \ has multiple keys.  The syntax is formally defined\n   by the rule \"path-arg\"\
    \ in Section 12.\n   The predicates are only used when more than one key reference\
    \ is\n   needed to uniquely identify a leaf instance.  This occurs if a list\n\
    \   has multiple keys, or a reference to a leaf other than the key in a\n   list\
    \ is needed.  In these cases, multiple leafrefs are typically\n   specified, and\
    \ predicates are used to tie them together.\n   The \"path\" expression evaluates\
    \ to a node set consisting of zero,\n   one, or more nodes.  If the leaf with\
    \ the leafref type represents\n   configuration data, this node set MUST be non-empty.\n\
    \   The \"path\" XPath expression is conceptually evaluated in the\n   following\
    \ context, in addition to the definition in Section 6.4.1:\n   o  The context\
    \ node is the node in the data tree for which the \"path\"\n      statement is\
    \ defined.\n   The accessible tree depends on the context node:\n   o  If the\
    \ context node represents configuration data, the tree is the\n      data in the\
    \ NETCONF datastore where the context node exists.  The\n      XPath root node\
    \ has all top-level configuration data nodes in all\n      modules as children.\n\
    \   o  Otherwise, the tree is all state data on the device, and the\n      <running/>\
    \ datastore.  The XPath root node has all top-level data\n      nodes in all modules\
    \ as children.\n"
- title: 9.9.3.  Lexical Representation
  contents:
  - "9.9.3.  Lexical Representation\n   A leafref value is encoded the same way as\
    \ the leaf it references.\n"
- title: 9.9.4.  Canonical Form
  contents:
  - "9.9.4.  Canonical Form\n   The canonical form of a leafref is the same as the\
    \ canonical form of\n   the leaf it references.\n"
- title: 9.9.5.  Usage Example
  contents:
  - "9.9.5.  Usage Example\n   With the following list:\n     list interface {\n \
    \        key \"name\";\n         leaf name {\n             type string;\n    \
    \     }\n         leaf admin-status {\n             type admin-status;\n     \
    \    }\n         list address {\n             key \"ip\";\n             leaf ip\
    \ {\n                 type yang:ip-address;\n             }\n         }\n    \
    \ }\n   The following leafref refers to an existing interface:\n     leaf mgmt-interface\
    \ {\n         type leafref {\n             path \"../interface/name\";\n     \
    \    }\n     }\n   An example of a corresponding XML snippet:\n     <interface>\n\
    \       <name>eth0</name>\n     </interface>\n     <interface>\n       <name>lo</name>\n\
    \     </interface>\n     <mgmt-interface>eth0</mgmt-interface>\n   The following\
    \ leafrefs refer to an existing address of an interface:\n     container default-address\
    \ {\n         leaf ifname {\n             type leafref {\n                 path\
    \ \"../../interface/name\";\n             }\n         }\n         leaf address\
    \ {\n             type leafref {\n                 path \"../../interface[name\
    \ = current()/../ifname]\"\n                    + \"/address/ip\";\n         \
    \    }\n         }\n     }\n   An example of a corresponding XML snippet:\n  \
    \   <interface>\n       <name>eth0</name>\n       <admin-status>up</admin-status>\n\
    \       <address>\n         <ip>192.0.2.1</ip>\n       </address>\n       <address>\n\
    \         <ip>192.0.2.2</ip>\n       </address>\n     </interface>\n     <interface>\n\
    \       <name>lo</name>\n       <admin-status>up</admin-status>\n       <address>\n\
    \         <ip>127.0.0.1</ip>\n       </address>\n     </interface>\n     <default-address>\n\
    \       <ifname>eth0</ifname>\n       <address>192.0.2.2</address>\n     </default-address>\n\
    \   The following list uses a leafref for one of its keys.  This is\n   similar\
    \ to a foreign key in a relational database.\n     list packet-filter {\n    \
    \     key \"if-name filter-id\";\n         leaf if-name {\n             type leafref\
    \ {\n                 path \"/interface/name\";\n             }\n         }\n\
    \         leaf filter-id {\n             type uint32;\n         }\n         ...\n\
    \     }\n   An example of a corresponding XML snippet:\n     <interface>\n   \
    \    <name>eth0</name>\n       <admin-status>up</admin-status>\n       <address>\n\
    \         <ip>192.0.2.1</ip>\n       </address>\n       <address>\n         <ip>192.0.2.2</ip>\n\
    \       </address>\n     </interface>\n     <packet-filter>\n       <if-name>eth0</if-name>\n\
    \       <filter-id>1</filter-id>\n       ...\n     </packet-filter>\n     <packet-filter>\n\
    \       <if-name>eth0</if-name>\n       <filter-id>2</filter-id>\n       ...\n\
    \     </packet-filter>\n   The following notification defines two leafrefs to\
    \ refer to an\n   existing admin-status:\n     notification link-failure {\n \
    \        leaf if-name {\n             type leafref {\n                 path \"\
    /interface/name\";\n             }\n         }\n         leaf admin-status {\n\
    \             type leafref {\n                 path\n                   \"/interface[name\
    \ = current()/../if-name]\"\n                 + \"/admin-status\";\n         \
    \    }\n         }\n     }\n   An example of a corresponding XML notification:\n\
    \     <notification\n       xmlns=\"urn:ietf:params:xml:ns:netconf:notification:1.0\"\
    >\n       <eventTime>2008-04-01T00:01:00Z</eventTime>\n       <link-failure xmlns=\"\
    http://acme.example.com/system\">\n         <if-name>eth0</if-name>\n        \
    \ <admin-status>up</admin-status>\n       </link-failure>\n     </notification>\n"
- title: 9.10.  The identityref Built-In Type
  contents:
  - "9.10.  The identityref Built-In Type\n   The identityref type is used to reference\
    \ an existing identity (see\n   Section 7.16).\n"
- title: 9.10.1.  Restrictions
  contents:
  - "9.10.1.  Restrictions\n   An identityref cannot be restricted.\n"
- title: 9.10.2.  The identityref's base Statement
  contents:
  - "9.10.2.  The identityref's base Statement\n   The \"base\" statement, which is\
    \ a substatement to the \"type\"\n   statement, MUST be present if the type is\
    \ \"identityref\".  The\n   argument is the name of an identity, as defined by\
    \ an \"identity\"\n   statement.  If a prefix is present on the identity name,\
    \ it refers to\n   an identity defined in the module that was imported with that\
    \ prefix.\n   Otherwise, an identity with the matching name MUST be defined in\
    \ the\n   current module or an included submodule.\n   Valid values for an identityref\
    \ are any identities derived from the\n   identityref's base identity.  On a particular\
    \ server, the valid\n   values are further restricted to the set of identities\
    \ defined in the\n   modules supported by the server.\n"
- title: 9.10.3.  Lexical Representation
  contents:
  - "9.10.3.  Lexical Representation\n   An identityref is encoded as the referred\
    \ identity's qualified name\n   as defined in [XML-NAMES].  If the prefix is not\
    \ present, the\n   namespace of the identityref is the default namespace in effect\
    \ on\n   the element that contains the identityref value.\n   When an identityref\
    \ is given a default value using the \"default\"\n   statement, the identity name\
    \ in the default value MAY have a prefix.\n   If a prefix is present on the identity\
    \ name, it refers to an identity\n   defined in the module that was imported with\
    \ that prefix.  Otherwise,\n   an identity with the matching name MUST be defined\
    \ in the current\n   module or an included submodule.\n"
- title: 9.10.4.  Canonical Form
  contents:
  - "9.10.4.  Canonical Form\n   Since the lexical form depends on the XML context\
    \ in which the value\n   occurs, this type does not have a canonical form.\n"
- title: 9.10.5.  Usage Example
  contents:
  - "9.10.5.  Usage Example\n   With the identity definitions in Section 7.16.3 and\
    \ the following\n   module:\n     module my-crypto {\n         namespace \"http://example.com/my-crypto\"\
    ;\n         prefix mc;\n         import \"crypto-base\" {\n             prefix\
    \ \"crypto\";\n         }\n         identity aes {\n             base \"crypto:crypto-alg\"\
    ;\n         }\n         leaf crypto {\n             type identityref {\n     \
    \            base \"crypto:crypto-alg\";\n             }\n         }\n     }\n\
    \   the leaf \"crypto\" will be encoded as follows, if the value is the\n   \"\
    des3\" identity defined in the \"des\" module:\n     <crypto xmlns:des=\"http://example.com/des\"\
    >des:des3</crypto>\n   Any prefixes used in the encoding are local to each instance\n\
    \   encoding.  This means that the same identityref may be encoded\n   differently\
    \ by different implementations.  For example, the following\n   example encodes\
    \ the same leaf as above:\n     <crypto xmlns:x=\"http://example.com/des\">x:des3</crypto>\n\
    \   If the \"crypto\" leaf's value instead is \"aes\" defined in the\n   \"my-crypto\"\
    \ module, it can be encoded as:\n     <crypto xmlns:mc=\"http://example.com/my-crypto\"\
    >mc:aes</crypto>\n   or, using the default namespace:\n     <crypto>aes</crypto>\n"
- title: 9.11.  The empty Built-In Type
  contents:
  - "9.11.  The empty Built-In Type\n   The empty built-in type represents a leaf\
    \ that does not have any\n   value, it conveys information by its presence or\
    \ absence.\n   An empty type cannot have a default value.\n"
- title: 9.11.1.  Restrictions
  contents:
  - "9.11.1.  Restrictions\n   An empty type cannot be restricted.\n"
- title: 9.11.2.  Lexical Representation
  contents:
  - "9.11.2.  Lexical Representation\n   Not applicable.\n"
- title: 9.11.3.  Canonical Form
  contents:
  - "9.11.3.  Canonical Form\n   Not applicable.\n"
- title: 9.11.4.  Usage Example
  contents:
  - "9.11.4.  Usage Example\n   The following leaf\n     leaf enable-qos {\n     \
    \    type empty;\n     }\n   will be encoded as\n     <enable-qos/>\n   if it\
    \ exists.\n"
- title: 9.12.  The union Built-In Type
  contents:
  - "9.12.  The union Built-In Type\n   The union built-in type represents a value\
    \ that corresponds to one of\n   its member types.\n   When the type is \"union\"\
    , the \"type\" statement (Section 7.4) MUST be\n   present.  It is used to repeatedly\
    \ specify each member type of the\n   union.  It takes as an argument a string\
    \ that is the name of a member\n   type.\n   A member type can be of any built-in\
    \ or derived type, except it MUST\n   NOT be one of the built-in types \"empty\"\
    \ or \"leafref\".\n   When a string representing a union data type is validated,\
    \ the string\n   is validated against each member type, in the order they are\n\
    \   specified in the \"type\" statement, until a match is found.\n   Any default\
    \ value or \"units\" property defined in the member types is\n   not inherited\
    \ by the union type.\n   Example:\n     type union {\n         type int32;\n \
    \        type enumeration {\n             enum \"unbounded\";\n         }\n  \
    \   }\n"
- title: 9.12.1.  Restrictions
  contents:
  - "9.12.1.  Restrictions\n   A union cannot be restricted.  However, each member\
    \ type can be\n   restricted, based on the rules defined in Section 9.\n"
- title: 9.12.2.  Lexical Representation
  contents:
  - "9.12.2.  Lexical Representation\n   The lexical representation of a union is\
    \ a value that corresponds to\n   the representation of any one of the member\
    \ types.\n"
- title: 9.12.3.  Canonical Form
  contents:
  - "9.12.3.  Canonical Form\n   The canonical form of a union value is the same as\
    \ the canonical form\n   of the member type of the value.\n"
- title: 9.13.  The instance-identifier Built-In Type
  contents:
  - "9.13.  The instance-identifier Built-In Type\n   The instance-identifier built-in\
    \ type is used to uniquely identify a\n   particular instance node in the data\
    \ tree.\n   The syntax for an instance-identifier is a subset of the XPath\n \
    \  abbreviated syntax, formally defined by the rule\n   \"instance-identifier\"\
    \ in Section 12.  It is used to uniquely identify\n   a node in the data tree.\
    \  Predicates are used only for specifying the\n   values for the key nodes for\
    \ list entries, a value of a leaf-list\n   entry, or a positional index for a\
    \ list without keys.  For\n   identifying list entries with keys, each predicate\
    \ consists of one\n   equality test per key, and each key MUST have a corresponding\n\
    \   predicate.\n   If the leaf with the instance-identifier type represents\n\
    \   configuration data, and the \"require-instance\" property\n   (Section 9.13.2)\
    \ is \"true\", the node it refers to MUST also represent\n   configuration.  Such\
    \ a leaf puts a constraint on valid data.  All\n   such leaf nodes MUST reference\
    \ existing nodes or leaf nodes with\n   their default value in use (see Section\
    \ 7.6.1) for the data to be\n   valid.  This constraint is enforced according\
    \ to the rules in\n   Section 8.\n   The \"instance-identifier\" XPath expression\
    \ is conceptually evaluated\n   in the following context, in addition to the definition\
    \ in\n   Section 6.4.1:\n   o  The context node is the root node in the accessible\
    \ tree.\n   The accessible tree depends on the leaf with the instance-identifier\n\
    \   type:\n   o  If this leaf represents configuration data, the tree is the data\n\
    \      in the NETCONF datastore where the leaf exists.  The XPath root\n     \
    \ node has all top-level configuration data nodes in all modules as\n      children.\n\
    \   o  Otherwise, the tree is all state data on the device, and the\n      <running/>\
    \ datastore.  The XPath root node has all top-level data\n      nodes in all modules\
    \ as children.\n"
- title: 9.13.1.  Restrictions
  contents:
  - "9.13.1.  Restrictions\n   An instance-identifier can be restricted with the \"\
    require-instance\"\n   statement (Section 9.13.2).\n"
- title: 9.13.2.  The require-instance Statement
  contents:
  - "9.13.2.  The require-instance Statement\n   The \"require-instance\" statement,\
    \ which is a substatement to the\n   \"type\" statement, MAY be present if the\
    \ type is\n   \"instance-identifier\".  It takes as an argument the string \"\
    true\" or\n   \"false\".  If this statement is not present, it defaults to \"\
    true\".\n   If \"require-instance\" is \"true\", it means that the instance being\n\
    \   referred MUST exist for the data to be valid.  This constraint is\n   enforced\
    \ according to the rules in Section 8.\n   If \"require-instance\" is \"false\"\
    , it means that the instance being\n   referred MAY exist in valid data.\n"
- title: 9.13.3.  Lexical Representation
  contents:
  - "9.13.3.  Lexical Representation\n   An instance-identifier value is lexically\
    \ represented as a string.\n   All node names in an instance-identifier value\
    \ MUST be qualified with\n   explicit namespace prefixes, and these prefixes MUST\
    \ be declared in\n   the XML namespace scope in the instance-identifier's XML\
    \ element.\n   Any prefixes used in the encoding are local to each instance\n\
    \   encoding.  This means that the same instance-identifier may be\n   encoded\
    \ differently by different implementations.\n"
- title: 9.13.4.  Canonical Form
  contents:
  - "9.13.4.  Canonical Form\n   Since the lexical form depends on the XML context\
    \ in which the value\n   occurs, this type does not have a canonical form.\n"
- title: 9.13.5.  Usage Example
  contents:
  - "9.13.5.  Usage Example\n   The following are examples of instance identifiers:\n\
    \     /* instance-identifier for a container */\n     /ex:system/ex:services/ex:ssh\n\
    \     /* instance-identifier for a leaf */\n     /ex:system/ex:services/ex:ssh/ex:port\n\
    \     /* instance-identifier for a list entry */\n     /ex:system/ex:user[ex:name='fred']\n\
    \     /* instance-identifier for a leaf in a list entry */\n     /ex:system/ex:user[ex:name='fred']/ex:type\n\
    \     /* instance-identifier for a list entry with two keys */\n     /ex:system/ex:server[ex:ip='192.0.2.1'][ex:port='80']\n\
    \     /* instance-identifier for a leaf-list entry */\n     /ex:system/ex:services/ex:ssh/ex:cipher[.='blowfish-cbc']\n\
    \     /* instance-identifier for a list entry without keys */\n     /ex:stats/ex:port[3]\n"
- title: 10.  Updating a Module
  contents:
  - "10.  Updating a Module\n   As experience is gained with a module, it may be desirable\
    \ to revise\n   that module.  However, changes are not allowed if they have any\n\
    \   potential to cause interoperability problems between a client using\n   an\
    \ original specification and a server using an updated\n   specification.\n  \
    \ For any published change, a new \"revision\" statement (Section 7.1.9)\n   MUST\
    \ be included in front of the existing \"revision\" statements.  If\n   there\
    \ are no existing \"revision\" statements, then one MUST be added\n   to identify\
    \ the new revision.  Furthermore, any necessary changes\n   MUST be applied to\
    \ any meta-data statements, including the\n   \"organization\" and \"contact\"\
    \ statements (Sections 7.1.7, 7.1.8).\n   Note that definitions contained in a\
    \ module are available to be\n   imported by any other module, and are referenced\
    \ in \"import\"\n   statements via the module name.  Thus, a module name MUST\
    \ NOT be\n   changed.  Furthermore, the \"namespace\" statement MUST NOT be changed,\n\
    \   since all XML elements are qualified by the namespace.\n   Obsolete definitions\
    \ MUST NOT be removed from modules since their\n   identifiers may still be referenced\
    \ by other modules.\n   A definition may be revised in any of the following ways:\n\
    \   o  An \"enumeration\" type may have new enums added, provided the old\n  \
    \    enums's values do not change.\n   o  A \"bits\" type may have new bits added,\
    \ provided the old bit\n      positions do not change.\n   o  A \"range\", \"\
    length\", or \"pattern\" statement may expand the allowed\n      value space.\n\
    \   o  A \"default\" statement may be added to a leaf that does not have a\n \
    \     default value (either directly or indirectly through its type).\n   o  A\
    \ \"units\" statement may be added.\n   o  A \"reference\" statement may be added\
    \ or updated.\n   o  A \"must\" statement may be removed or its constraint relaxed.\n\
    \   o  A \"mandatory\" statement may be removed or changed from \"true\" to\n\
    \      \"false\".\n   o  A \"min-elements\" statement may be removed, or changed\
    \ to require\n      fewer elements.\n   o  A \"max-elements\" statement may be\
    \ removed, or changed to allow\n      more elements.\n   o  A \"description\"\
    \ statement may be added or clarified without\n      changing the semantics of\
    \ the definition.\n   o  New typedefs, groupings, rpcs, notifications, extensions,\n\
    \      features, and identities may be added.\n   o  New data definition statements\
    \ may be added if they do not add\n      mandatory nodes (Section 3.1) to existing\
    \ nodes or at the top\n      level in a module or submodule, or if they are conditionally\n\
    \      dependent on a new feature (i.e., have an \"if-feature\" statement\n  \
    \    that refers to a new feature).\n   o  A new \"case\" statement may be added.\n\
    \   o  A node that represented state data may be changed to represent\n      configuration,\
    \ provided it is not mandatory (Section 3.1).\n   o  An \"if-feature\" statement\
    \ may be removed, provided its node is not\n      mandatory (Section 3.1).\n \
    \  o  A \"status\" statement may be added, or changed from \"current\" to\n  \
    \    \"deprecated\" or \"obsolete\", or from \"deprecated\" to \"obsolete\".\n\
    \   o  A \"type\" statement may be replaced with another \"type\" statement\n\
    \      that does not change the syntax or semantics of the type.  For\n      example,\
    \ an inline type definition may be replaced with a typedef,\n      but an int8\
    \ type cannot be replaced by an int16, since the syntax\n      would change.\n\
    \   o  Any set of data definition nodes may be replaced with another set\n   \
    \   of syntactically and semantically equivalent nodes.  For example,\n      a\
    \ set of leafs may be replaced by a uses of a grouping with the\n      same leafs.\n\
    \   o  A module may be split into a set of submodules, or a submodule may\n  \
    \    be removed, provided the definitions in the module do not change\n      in\
    \ any other way than allowed here.\n   o  The \"prefix\" statement may be changed,\
    \ provided all local uses of\n      the prefix also are changed.\n   Otherwise,\
    \ if the semantics of any previous definition are changed\n   (i.e., if a non-editorial\
    \ change is made to any definition other than\n   those specifically allowed above),\
    \ then this MUST be achieved by a\n   new definition with a new identifier.\n\
    \   In statements that have any data definition statements as\n   substatements,\
    \ those data definition substatements MUST NOT be\n   reordered.\n"
- title: 11.  YIN
  contents:
  - "11.  YIN\n   A YANG module can be translated into an alternative XML-based syntax\n\
    \   called YIN.  The translated module is called a YIN module.  This\n   section\
    \ describes symmetric mapping rules between the two formats.\n   The YANG and\
    \ YIN formats contain equivalent information using\n   different notations.  The\
    \ YIN notation enables developers to\n   represent YANG data models in XML and\
    \ therefore use the rich set of\n   XML-based tools for data filtering and validation,\
    \ automated\n   generation of code and documentation, and other tasks.  Tools\
    \ like\n   XSLT or XML validators can be utilized.\n   The mapping between YANG\
    \ and YIN does not modify the information\n   content of the model.  Comments\
    \ and whitespace are not preserved.\n"
- title: 11.1.  Formal YIN Definition
  contents:
  - "11.1.  Formal YIN Definition\n   There is a one-to-one correspondence between\
    \ YANG keywords and YIN\n   elements.  The local name of a YIN element is identical\
    \ to the\n   corresponding YANG keyword.  This means, in particular, that the\n\
    \   document element (root) of a YIN document is always <module> or\n   <submodule>.\n\
    \   YIN elements corresponding to the YANG keywords belong to the\n   namespace\
    \ whose associated URI is\n   \"urn:ietf:params:xml:ns:yang:yin:1\".\n   YIN elements\
    \ corresponding to extension keywords belong to the\n   namespace of the YANG\
    \ module where the extension keyword is declared\n   via the \"extension\" statement.\n\
    \   The names of all YIN elements MUST be properly qualified with their\n   namespaces\
    \ specified above using the standard mechanisms of\n   [XML-NAMES], i.e., \"xmlns\"\
    \ and \"xmlns:xxx\" attributes.\n   The argument of a YANG statement is represented\
    \ in YIN either as an\n   XML attribute or a subelement of the keyword element.\
    \  Table 1\n   defines the mapping for the set of YANG keywords.  For extensions,\n\
    \   the argument mapping is specified within the \"extension\" statement\n   (see\
    \ Section 7.17).  The following rules hold for arguments:\n   o  If the argument\
    \ is represented as an attribute, this attribute has\n      no namespace.\n  \
    \ o  If the argument is represented as an element, it is qualified by\n      the\
    \ same namespace as its parent keyword element.\n   o  If the argument is represented\
    \ as an element, it MUST be the first\n      child of the keyword element.\n \
    \  Substatements of a YANG statement are represented as (additional)\n   children\
    \ of the keyword element and their relative order MUST be the\n   same as the\
    \ order of substatements in YANG.\n   Comments in YANG MAY be mapped to XML comments.\n\
    \               Mapping of arguments of the YANG statements.\n            +------------------+---------------+-------------+\n\
    \            | keyword          | argument name | yin-element |\n            +------------------+---------------+-------------+\n\
    \            | anyxml           | name          | false       |\n            |\
    \ argument         | name          | false       |\n            | augment    \
    \      | target-node   | false       |\n            | base             | name\
    \          | false       |\n            | belongs-to       | module        | false\
    \       |\n            | bit              | name          | false       |\n  \
    \          | case             | name          | false       |\n            | choice\
    \           | name          | false       |\n            | config           |\
    \ value         | false       |\n            | contact          | text       \
    \   | true        |\n            | container        | name          | false  \
    \     |\n            | default          | value         | false       |\n    \
    \        | description      | text          | true        |\n            | deviate\
    \          | value         | false       |\n            | deviation        | target-node\
    \   | false       |\n            | enum             | name          | false  \
    \     |\n            | error-app-tag    | value         | false       |\n    \
    \        | error-message    | value         | true        |\n            | extension\
    \        | name          | false       |\n            | feature          | name\
    \          | false       |\n            | fraction-digits  | value         | false\
    \       |\n            | grouping         | name          | false       |\n  \
    \          | identity         | name          | false       |\n            | if-feature\
    \       | name          | false       |\n            | import           | module\
    \        | false       |\n            | include          | module        | false\
    \       |\n            | input            | <no argument> | n/a         |\n  \
    \          | key              | value         | false       |\n            | leaf\
    \             | name          | false       |\n            | leaf-list       \
    \ | name          | false       |\n            | length           | value    \
    \     | false       |\n            | list             | name          | false\
    \       |\n            | mandatory        | value         | false       |\n  \
    \          | max-elements     | value         | false       |\n            | min-elements\
    \     | value         | false       |\n            | module           | name \
    \         | false       |\n            | must             | condition     | false\
    \       |\n            | namespace        | uri           | false       |\n  \
    \          | notification     | name          | false       |\n            | ordered-by\
    \       | value         | false       |\n            | organization     | text\
    \          | true        |\n            | output           | <no argument> | n/a\
    \         |\n            | path             | value         | false       |\n\
    \            | pattern          | value         | false       |\n            |\
    \ position         | value         | false       |\n            | prefix     \
    \      | value         | false       |\n            | presence         | value\
    \         | false       |\n            | range            | value         | false\
    \       |\n            | reference        | text          | true        |\n  \
    \          | refine           | target-node   | false       |\n            | require-instance\
    \ | value         | false       |\n            | revision         | date     \
    \     | false       |\n            | revision-date    | date          | false\
    \       |\n            | rpc              | name          | false       |\n  \
    \          | status           | value         | false       |\n            | submodule\
    \        | name          | false       |\n            | type             | name\
    \          | false       |\n            | typedef          | name          | false\
    \       |\n            | unique           | tag           | false       |\n  \
    \          | units            | name          | false       |\n            | uses\
    \             | name          | false       |\n            | value           \
    \ | value         | false       |\n            | when             | condition\
    \     | false       |\n            | yang-version     | value         | false\
    \       |\n            | yin-element      | value         | false       |\n  \
    \          +------------------+---------------+-------------+\n              \
    \                    Table 1\n"
- title: 11.1.1.  Usage Example
  contents:
  - "11.1.1.  Usage Example\n   The following YANG module:\n     module acme-foo {\n\
    \         namespace \"http://acme.example.com/foo\";\n         prefix \"acfoo\"\
    ;\n         import my-extensions {\n             prefix \"myext\";\n         }\n\
    \         list interface {\n             key \"name\";\n             leaf name\
    \ {\n                 type string;\n             }\n             leaf mtu {\n\
    \                 type uint32;\n                 description \"The MTU of the\
    \ interface.\";\n                 myext:c-define \"MY_MTU\";\n             }\n\
    \         }\n     }\n   where the extension \"c-define\" is defined in Section\
    \ 7.17.3, is\n   translated into the following YIN:\n     <module name=\"acme-foo\"\
    \n             xmlns=\"urn:ietf:params:xml:ns:yang:yin:1\"\n             xmlns:acfoo=\"\
    http://acme.example.com/foo\"\n             xmlns:myext=\"http://example.com/my-extensions\"\
    >\n       <namespace uri=\"http://acme.example.com/foo\"/>\n       <prefix value=\"\
    acfoo\"/>\n       <import module=\"my-extensions\">\n         <prefix value=\"\
    myext\"/>\n       </import>\n       <list name=\"interface\">\n         <key value=\"\
    name\"/>\n         <leaf name=\"name\">\n           <type name=\"string\"/>\n\
    \         </leaf>\n         <leaf name=\"mtu\">\n           <type name=\"uint32\"\
    />\n           <description>\n             <text>The MTU of the interface.</text>\n\
    \           </description>\n           <myext:c-define name=\"MY_MTU\"/>\n   \
    \      </leaf>\n       </list>\n     </module>\n"
- title: 12.  YANG ABNF Grammar
  contents:
  - "12.  YANG ABNF Grammar\n   In YANG, almost all statements are unordered.  The\
    \ ABNF grammar\n   [RFC5234] defines the canonical order.  To improve module\n\
    \   readability, it is RECOMMENDED that clauses be entered in this order.\n  \
    \ Within the ABNF grammar, unordered statements are marked with\n   comments.\n\
    \   This grammar assumes that the scanner replaces YANG comments with a\n   single\
    \ space character.\n   <CODE BEGINS> file \"yang.abnf\"\n   module-stmt      \
    \   = optsep module-keyword sep identifier-arg-str\n                         optsep\n\
    \                         \"{\" stmtsep\n                             module-header-stmts\n\
    \                             linkage-stmts\n                             meta-stmts\n\
    \                             revision-stmts\n                             body-stmts\n\
    \                         \"}\" optsep\n   submodule-stmt      = optsep submodule-keyword\
    \ sep identifier-arg-str\n                         optsep\n                  \
    \       \"{\" stmtsep\n                             submodule-header-stmts\n \
    \                            linkage-stmts\n                             meta-stmts\n\
    \                             revision-stmts\n                             body-stmts\n\
    \                         \"}\" optsep\n   module-header-stmts = ;; these stmts\
    \ can appear in any order\n                         [yang-version-stmt stmtsep]\n\
    \                          namespace-stmt stmtsep\n                          prefix-stmt\
    \ stmtsep\n   submodule-header-stmts =\n                         ;; these stmts\
    \ can appear in any order\n                         [yang-version-stmt stmtsep]\n\
    \                          belongs-to-stmt stmtsep\n   meta-stmts          = ;;\
    \ these stmts can appear in any order\n                         [organization-stmt\
    \ stmtsep]\n                         [contact-stmt stmtsep]\n                \
    \         [description-stmt stmtsep]\n                         [reference-stmt\
    \ stmtsep]\n   linkage-stmts       = ;; these stmts can appear in any order\n\
    \                         *(import-stmt stmtsep)\n                         *(include-stmt\
    \ stmtsep)\n   revision-stmts      = *(revision-stmt stmtsep)\n   body-stmts \
    \         = *((extension-stmt /\n                            feature-stmt /\n\
    \                            identity-stmt /\n                            typedef-stmt\
    \ /\n                            grouping-stmt /\n                           \
    \ data-def-stmt /\n                            augment-stmt /\n              \
    \              rpc-stmt /\n                            notification-stmt /\n \
    \                           deviation-stmt) stmtsep)\n   data-def-stmt       =\
    \ container-stmt /\n                         leaf-stmt /\n                   \
    \      leaf-list-stmt /\n                         list-stmt /\n              \
    \           choice-stmt /\n                         anyxml-stmt /\n          \
    \               uses-stmt\n   yang-version-stmt   = yang-version-keyword sep yang-version-arg-str\n\
    \                         optsep stmtend\n   yang-version-arg-str = < a string\
    \ that matches the rule\n                           yang-version-arg >\n   yang-version-arg\
    \    = \"1\"\n   import-stmt         = import-keyword sep identifier-arg-str optsep\n\
    \                         \"{\" stmtsep\n                             prefix-stmt\
    \ stmtsep\n                             [revision-date-stmt stmtsep]\n       \
    \                  \"}\"\n   include-stmt        = include-keyword sep identifier-arg-str\
    \ optsep\n                         (\";\" /\n                          \"{\" stmtsep\n\
    \                              [revision-date-stmt stmtsep]\n                \
    \          \"}\")\n   namespace-stmt      = namespace-keyword sep uri-str optsep\
    \ stmtend\n   uri-str             = < a string that matches the rule\n       \
    \                    URI in RFC 3986 >\n   prefix-stmt         = prefix-keyword\
    \ sep prefix-arg-str\n                         optsep stmtend\n   belongs-to-stmt\
    \     = belongs-to-keyword sep identifier-arg-str\n                         optsep\n\
    \                         \"{\" stmtsep\n                             prefix-stmt\
    \ stmtsep\n                         \"}\"\n   organization-stmt   = organization-keyword\
    \ sep string\n                         optsep stmtend\n   contact-stmt       \
    \ = contact-keyword sep string optsep stmtend\n   description-stmt    = description-keyword\
    \ sep string optsep\n                         stmtend\n   reference-stmt     \
    \ = reference-keyword sep string optsep stmtend\n   units-stmt          = units-keyword\
    \ sep string optsep stmtend\n   revision-stmt       = revision-keyword sep revision-date\
    \ optsep\n                         (\";\" /\n                          \"{\" stmtsep\n\
    \                              [description-stmt stmtsep]\n                  \
    \            [reference-stmt stmtsep]\n                          \"}\")\n   revision-date\
    \       =  date-arg-str\n   revision-date-stmt = revision-date-keyword sep revision-date\
    \ stmtend\n   extension-stmt      = extension-keyword sep identifier-arg-str optsep\n\
    \                         (\";\" /\n                          \"{\" stmtsep\n\
    \                              ;; these stmts can appear in any order\n      \
    \                        [argument-stmt stmtsep]\n                           \
    \   [status-stmt stmtsep]\n                              [description-stmt stmtsep]\n\
    \                              [reference-stmt stmtsep]\n                    \
    \      \"}\")\n   argument-stmt       = argument-keyword sep identifier-arg-str\
    \ optsep\n                         (\";\" /\n                          \"{\" stmtsep\n\
    \                              [yin-element-stmt stmtsep]\n                  \
    \        \"}\")\n   yin-element-stmt    = yin-element-keyword sep yin-element-arg-str\n\
    \                         stmtend\n   yin-element-arg-str = < a string that matches\
    \ the rule\n                           yin-element-arg >\n   yin-element-arg \
    \    = true-keyword / false-keyword\n   identity-stmt       = identity-keyword\
    \ sep identifier-arg-str optsep\n                         (\";\" /\n         \
    \                 \"{\" stmtsep\n                              ;; these stmts\
    \ can appear in any order\n                              [base-stmt stmtsep]\n\
    \                              [status-stmt stmtsep]\n                       \
    \       [description-stmt stmtsep]\n                              [reference-stmt\
    \ stmtsep]\n                          \"}\")\n   base-stmt           = base-keyword\
    \ sep identifier-ref-arg-str\n                         optsep stmtend\n   feature-stmt\
    \        = feature-keyword sep identifier-arg-str optsep\n                   \
    \      (\";\" /\n                          \"{\" stmtsep\n                   \
    \           ;; these stmts can appear in any order\n                         \
    \     *(if-feature-stmt stmtsep)\n                              [status-stmt stmtsep]\n\
    \                              [description-stmt stmtsep]\n                  \
    \            [reference-stmt stmtsep]\n                          \"}\")\n   if-feature-stmt\
    \     = if-feature-keyword sep identifier-ref-arg-str\n                      \
    \   optsep stmtend\n   typedef-stmt        = typedef-keyword sep identifier-arg-str\
    \ optsep\n                         \"{\" stmtsep\n                           \
    \  ;; these stmts can appear in any order\n                             type-stmt\
    \ stmtsep\n                             [units-stmt stmtsep]\n               \
    \              [default-stmt stmtsep]\n                             [status-stmt\
    \ stmtsep]\n                             [description-stmt stmtsep]\n        \
    \                     [reference-stmt stmtsep]\n                          \"}\"\
    \n   type-stmt           = type-keyword sep identifier-ref-arg-str optsep\n  \
    \                       (\";\" /\n                          \"{\" stmtsep\n  \
    \                            type-body-stmts\n                          \"}\"\
    )\n   type-body-stmts     = numerical-restrictions /\n                       \
    \  decimal64-specification /\n                         string-restrictions /\n\
    \                         enum-specification /\n                         leafref-specification\
    \ /\n                         identityref-specification /\n                  \
    \       instance-identifier-specification /\n                         bits-specification\
    \ /\n                         union-specification\n   numerical-restrictions =\
    \ range-stmt stmtsep\n   range-stmt          = range-keyword sep range-arg-str\
    \ optsep\n                         (\";\" /\n                          \"{\" stmtsep\n\
    \                              ;; these stmts can appear in any order\n      \
    \                        [error-message-stmt stmtsep]\n                      \
    \        [error-app-tag-stmt stmtsep]\n                              [description-stmt\
    \ stmtsep]\n                              [reference-stmt stmtsep]\n         \
    \                  \"}\")\n   decimal64-specification = fraction-digits-stmt\n\
    \   fraction-digits-stmt = fraction-digits-keyword sep\n                     \
    \     fraction-digits-arg-str stmtend\n   fraction-digits-arg-str = < a string\
    \ that matches the rule\n                              fraction-digits-arg >\n\
    \   fraction-digits-arg = (\"1\" [\"0\" / \"1\" / \"2\" / \"3\" / \"4\" /\n  \
    \                             \"5\" / \"6\" / \"7\" / \"8\"])\n              \
    \           / \"2\" / \"3\" / \"4\" / \"5\" / \"6\" / \"7\" / \"8\" / \"9\"\n\
    \   string-restrictions = ;; these stmts can appear in any order\n           \
    \              [length-stmt stmtsep]\n                         *(pattern-stmt\
    \ stmtsep)\n   length-stmt         = length-keyword sep length-arg-str optsep\n\
    \                         (\";\" /\n                          \"{\" stmtsep\n\
    \                              ;; these stmts can appear in any order\n      \
    \                        [error-message-stmt stmtsep]\n                      \
    \        [error-app-tag-stmt stmtsep]\n                              [description-stmt\
    \ stmtsep]\n                              [reference-stmt stmtsep]\n         \
    \                  \"}\")\n   pattern-stmt        = pattern-keyword sep string\
    \ optsep\n                         (\";\" /\n                          \"{\" stmtsep\n\
    \                              ;; these stmts can appear in any order\n      \
    \                        [error-message-stmt stmtsep]\n                      \
    \        [error-app-tag-stmt stmtsep]\n                              [description-stmt\
    \ stmtsep]\n                              [reference-stmt stmtsep]\n         \
    \                  \"}\")\n   default-stmt        = default-keyword sep string\
    \ stmtend\n   enum-specification  = 1*(enum-stmt stmtsep)\n   enum-stmt      \
    \     = enum-keyword sep string optsep\n                         (\";\" /\n  \
    \                        \"{\" stmtsep\n                              ;; these\
    \ stmts can appear in any order\n                              [value-stmt stmtsep]\n\
    \                              [status-stmt stmtsep]\n                       \
    \       [description-stmt stmtsep]\n                              [reference-stmt\
    \ stmtsep]\n                           \"}\")\n   leafref-specification =\n  \
    \                       ;; these stmts can appear in any order\n             \
    \            path-stmt stmtsep\n                         [require-instance-stmt\
    \ stmtsep]\n   path-stmt           = path-keyword sep path-arg-str stmtend\n \
    \  require-instance-stmt = require-instance-keyword sep\n                    \
    \        require-instance-arg-str stmtend\n   require-instance-arg-str = < a string\
    \ that matches the rule\n                              require-instance-arg >\n\
    \   require-instance-arg = true-keyword / false-keyword\n   instance-identifier-specification\
    \ =\n                         [require-instance-stmt stmtsep]\n   identityref-specification\
    \ =\n                         base-stmt stmtsep\n   union-specification = 1*(type-stmt\
    \ stmtsep)\n   bits-specification  = 1*(bit-stmt stmtsep)\n   bit-stmt       \
    \     = bit-keyword sep identifier-arg-str optsep\n                         (\"\
    ;\" /\n                          \"{\" stmtsep\n                             \
    \ ;; these stmts can appear in any order\n                              [position-stmt\
    \ stmtsep]\n                              [status-stmt stmtsep]\n            \
    \                  [description-stmt stmtsep]\n                              [reference-stmt\
    \ stmtsep]\n                            \"}\"\n                          \"}\"\
    )\n   position-stmt       = position-keyword sep\n                         position-value-arg-str\
    \ stmtend\n   position-value-arg-str = < a string that matches the rule\n    \
    \                          position-value-arg >\n   position-value-arg  = non-negative-integer-value\n\
    \   status-stmt         = status-keyword sep status-arg-str stmtend\n   status-arg-str\
    \      = < a string that matches the rule\n                           status-arg\
    \ >\n   status-arg          = current-keyword /\n                         obsolete-keyword\
    \ /\n                         deprecated-keyword\n   config-stmt         = config-keyword\
    \ sep\n                         config-arg-str stmtend\n   config-arg-str    \
    \  = < a string that matches the rule\n                           config-arg >\n\
    \   config-arg          = true-keyword / false-keyword\n   mandatory-stmt    \
    \  = mandatory-keyword sep\n                         mandatory-arg-str stmtend\n\
    \   mandatory-arg-str   = < a string that matches the rule\n                 \
    \          mandatory-arg >\n   mandatory-arg       = true-keyword / false-keyword\n\
    \   presence-stmt       = presence-keyword sep string stmtend\n   ordered-by-stmt\
    \     = ordered-by-keyword sep\n                         ordered-by-arg-str stmtend\n\
    \   ordered-by-arg-str  = < a string that matches the rule\n                 \
    \          ordered-by-arg >\n   ordered-by-arg      = user-keyword / system-keyword\n\
    \   must-stmt           = must-keyword sep string optsep\n                   \
    \      (\";\" /\n                          \"{\" stmtsep\n                   \
    \           ;; these stmts can appear in any order\n                         \
    \     [error-message-stmt stmtsep]\n                              [error-app-tag-stmt\
    \ stmtsep]\n                              [description-stmt stmtsep]\n       \
    \                       [reference-stmt stmtsep]\n                           \"\
    }\")\n   error-message-stmt  = error-message-keyword sep string stmtend\n   error-app-tag-stmt\
    \  = error-app-tag-keyword sep string stmtend\n   min-elements-stmt   = min-elements-keyword\
    \ sep\n                         min-value-arg-str stmtend\n   min-value-arg-str\
    \   = < a string that matches the rule\n                           min-value-arg\
    \ >\n   min-value-arg       = non-negative-integer-value\n   max-elements-stmt\
    \   = max-elements-keyword sep\n                         max-value-arg-str stmtend\n\
    \   max-value-arg-str   = < a string that matches the rule\n                 \
    \          max-value-arg >\n   max-value-arg       = unbounded-keyword /\n   \
    \                      positive-integer-value\n   value-stmt          = value-keyword\
    \ sep integer-value stmtend\n   grouping-stmt       = grouping-keyword sep identifier-arg-str\
    \ optsep\n                         (\";\" /\n                          \"{\" stmtsep\n\
    \                              ;; these stmts can appear in any order\n      \
    \                        [status-stmt stmtsep]\n                             \
    \ [description-stmt stmtsep]\n                              [reference-stmt stmtsep]\n\
    \                              *((typedef-stmt /\n                           \
    \      grouping-stmt) stmtsep)\n                              *(data-def-stmt\
    \ stmtsep)\n                          \"}\")\n   container-stmt      = container-keyword\
    \ sep identifier-arg-str optsep\n                         (\";\" /\n         \
    \                 \"{\" stmtsep\n                              ;; these stmts\
    \ can appear in any order\n                              [when-stmt stmtsep]\n\
    \                              *(if-feature-stmt stmtsep)\n                  \
    \            *(must-stmt stmtsep)\n                              [presence-stmt\
    \ stmtsep]\n                              [config-stmt stmtsep]\n            \
    \                  [status-stmt stmtsep]\n                              [description-stmt\
    \ stmtsep]\n                              [reference-stmt stmtsep]\n         \
    \                     *((typedef-stmt /\n                                 grouping-stmt)\
    \ stmtsep)\n                              *(data-def-stmt stmtsep)\n         \
    \                 \"}\")\n   leaf-stmt           = leaf-keyword sep identifier-arg-str\
    \ optsep\n                         \"{\" stmtsep\n                           \
    \  ;; these stmts can appear in any order\n                             [when-stmt\
    \ stmtsep]\n                             *(if-feature-stmt stmtsep)\n        \
    \                     type-stmt stmtsep\n                             [units-stmt\
    \ stmtsep]\n                             *(must-stmt stmtsep)\n              \
    \               [default-stmt stmtsep]\n                             [config-stmt\
    \ stmtsep]\n                             [mandatory-stmt stmtsep]\n          \
    \                   [status-stmt stmtsep]\n                             [description-stmt\
    \ stmtsep]\n                             [reference-stmt stmtsep]\n          \
    \                \"}\"\n   leaf-list-stmt      = leaf-list-keyword sep identifier-arg-str\
    \ optsep\n                         \"{\" stmtsep\n                           \
    \  ;; these stmts can appear in any order\n                             [when-stmt\
    \ stmtsep]\n                             *(if-feature-stmt stmtsep)\n        \
    \                     type-stmt stmtsep\n                             [units-stmt\
    \ stmtsep]\n                             *(must-stmt stmtsep)\n              \
    \               [config-stmt stmtsep]\n                             [min-elements-stmt\
    \ stmtsep]\n                             [max-elements-stmt stmtsep]\n       \
    \                      [ordered-by-stmt stmtsep]\n                           \
    \  [status-stmt stmtsep]\n                             [description-stmt stmtsep]\n\
    \                             [reference-stmt stmtsep]\n                     \
    \     \"}\"\n   list-stmt           = list-keyword sep identifier-arg-str optsep\n\
    \                         \"{\" stmtsep\n                             ;; these\
    \ stmts can appear in any order\n                             [when-stmt stmtsep]\n\
    \                             *(if-feature-stmt stmtsep)\n                   \
    \          *(must-stmt stmtsep)\n                             [key-stmt stmtsep]\n\
    \                             *(unique-stmt stmtsep)\n                       \
    \      [config-stmt stmtsep]\n                             [min-elements-stmt\
    \ stmtsep]\n                             [max-elements-stmt stmtsep]\n       \
    \                      [ordered-by-stmt stmtsep]\n                           \
    \  [status-stmt stmtsep]\n                             [description-stmt stmtsep]\n\
    \                             [reference-stmt stmtsep]\n                     \
    \        *((typedef-stmt /\n                                grouping-stmt) stmtsep)\n\
    \                             1*(data-def-stmt stmtsep)\n                    \
    \      \"}\"\n   key-stmt            = key-keyword sep key-arg-str stmtend\n \
    \  key-arg-str         = < a string that matches the rule\n                  \
    \         key-arg >\n   key-arg             = node-identifier *(sep node-identifier)\n\
    \   unique-stmt         = unique-keyword sep unique-arg-str stmtend\n   unique-arg-str\
    \      = < a string that matches the rule\n                           unique-arg\
    \ >\n   unique-arg          = descendant-schema-nodeid\n                     \
    \    *(sep descendant-schema-nodeid)\n   choice-stmt         = choice-keyword\
    \ sep identifier-arg-str optsep\n                         (\";\" /\n         \
    \                 \"{\" stmtsep\n                              ;; these stmts\
    \ can appear in any order\n                              [when-stmt stmtsep]\n\
    \                              *(if-feature-stmt stmtsep)\n                  \
    \            [default-stmt stmtsep]\n                              [config-stmt\
    \ stmtsep]\n                              [mandatory-stmt stmtsep]\n         \
    \                     [status-stmt stmtsep]\n                              [description-stmt\
    \ stmtsep]\n                              [reference-stmt stmtsep]\n         \
    \                     *((short-case-stmt / case-stmt) stmtsep)\n             \
    \             \"}\")\n   short-case-stmt     = container-stmt /\n            \
    \             leaf-stmt /\n                         leaf-list-stmt /\n       \
    \                  list-stmt /\n                         anyxml-stmt\n   case-stmt\
    \           = case-keyword sep identifier-arg-str optsep\n                   \
    \      (\";\" /\n                          \"{\" stmtsep\n                   \
    \           ;; these stmts can appear in any order\n                         \
    \     [when-stmt stmtsep]\n                              *(if-feature-stmt stmtsep)\n\
    \                              [status-stmt stmtsep]\n                       \
    \       [description-stmt stmtsep]\n                              [reference-stmt\
    \ stmtsep]\n                              *(data-def-stmt stmtsep)\n         \
    \                 \"}\")\n   anyxml-stmt         = anyxml-keyword sep identifier-arg-str\
    \ optsep\n                         (\";\" /\n                          \"{\" stmtsep\n\
    \                              ;; these stmts can appear in any order\n      \
    \                        [when-stmt stmtsep]\n                              *(if-feature-stmt\
    \ stmtsep)\n                              *(must-stmt stmtsep)\n             \
    \                 [config-stmt stmtsep]\n                              [mandatory-stmt\
    \ stmtsep]\n                              [status-stmt stmtsep]\n            \
    \                  [description-stmt stmtsep]\n                              [reference-stmt\
    \ stmtsep]\n                           \"}\")\n   uses-stmt           = uses-keyword\
    \ sep identifier-ref-arg-str optsep\n                         (\";\" /\n     \
    \                     \"{\" stmtsep\n                              ;; these stmts\
    \ can appear in any order\n                              [when-stmt stmtsep]\n\
    \                              *(if-feature-stmt stmtsep)\n                  \
    \            [status-stmt stmtsep]\n                              [description-stmt\
    \ stmtsep]\n                              [reference-stmt stmtsep]\n         \
    \                     *(refine-stmt stmtsep)\n                              *(uses-augment-stmt\
    \ stmtsep)\n                          \"}\")\n   refine-stmt         = refine-keyword\
    \ sep refine-arg-str optsep\n                         (\";\" /\n             \
    \             \"{\" stmtsep\n                              (refine-container-stmts\
    \ /\n                               refine-leaf-stmts /\n                    \
    \           refine-leaf-list-stmts /\n                               refine-list-stmts\
    \ /\n                               refine-choice-stmts /\n                  \
    \             refine-case-stmts /\n                               refine-anyxml-stmts)\n\
    \                          \"}\")\n   refine-arg-str      = < a string that matches\
    \ the rule\n                           refine-arg >\n   refine-arg          =\
    \ descendant-schema-nodeid\n   refine-container-stmts =\n                    \
    \     ;; these stmts can appear in any order\n                         *(must-stmt\
    \ stmtsep)\n                         [presence-stmt stmtsep]\n               \
    \          [config-stmt stmtsep]\n                         [description-stmt stmtsep]\n\
    \                         [reference-stmt stmtsep]\n   refine-leaf-stmts   = ;;\
    \ these stmts can appear in any order\n                         *(must-stmt stmtsep)\n\
    \                         [default-stmt stmtsep]\n                         [config-stmt\
    \ stmtsep]\n                         [mandatory-stmt stmtsep]\n              \
    \           [description-stmt stmtsep]\n                         [reference-stmt\
    \ stmtsep]\n   refine-leaf-list-stmts =\n                         ;; these stmts\
    \ can appear in any order\n                         *(must-stmt stmtsep)\n   \
    \                      [config-stmt stmtsep]\n                         [min-elements-stmt\
    \ stmtsep]\n                         [max-elements-stmt stmtsep]\n           \
    \              [description-stmt stmtsep]\n                         [reference-stmt\
    \ stmtsep]\n   refine-list-stmts   = ;; these stmts can appear in any order\n\
    \                         *(must-stmt stmtsep)\n                         [config-stmt\
    \ stmtsep]\n                         [min-elements-stmt stmtsep]\n           \
    \              [max-elements-stmt stmtsep]\n                         [description-stmt\
    \ stmtsep]\n                         [reference-stmt stmtsep]\n   refine-choice-stmts\
    \ = ;; these stmts can appear in any order\n                         [default-stmt\
    \ stmtsep]\n                         [config-stmt stmtsep]\n                 \
    \        [mandatory-stmt stmtsep]\n                         [description-stmt\
    \ stmtsep]\n                         [reference-stmt stmtsep]\n   refine-case-stmts\
    \   = ;; these stmts can appear in any order\n                         [description-stmt\
    \ stmtsep]\n                         [reference-stmt stmtsep]\n   refine-anyxml-stmts\
    \ = ;; these stmts can appear in any order\n                         *(must-stmt\
    \ stmtsep)\n                         [config-stmt stmtsep]\n                 \
    \        [mandatory-stmt stmtsep]\n                         [description-stmt\
    \ stmtsep]\n                         [reference-stmt stmtsep]\n   uses-augment-stmt\
    \   = augment-keyword sep uses-augment-arg-str optsep\n                      \
    \   \"{\" stmtsep\n                             ;; these stmts can appear in any\
    \ order\n                             [when-stmt stmtsep]\n                  \
    \           *(if-feature-stmt stmtsep)\n                             [status-stmt\
    \ stmtsep]\n                             [description-stmt stmtsep]\n        \
    \                     [reference-stmt stmtsep]\n                             1*((data-def-stmt\
    \ stmtsep) /\n                                (case-stmt stmtsep))\n         \
    \                 \"}\"\n   uses-augment-arg-str = < a string that matches the\
    \ rule\n                            uses-augment-arg >\n   uses-augment-arg  \
    \  = descendant-schema-nodeid\n   augment-stmt        = augment-keyword sep augment-arg-str\
    \ optsep\n                         \"{\" stmtsep\n                           \
    \  ;; these stmts can appear in any order\n                             [when-stmt\
    \ stmtsep]\n                             *(if-feature-stmt stmtsep)\n        \
    \                     [status-stmt stmtsep]\n                             [description-stmt\
    \ stmtsep]\n                             [reference-stmt stmtsep]\n          \
    \                   1*((data-def-stmt stmtsep) /\n                           \
    \     (case-stmt stmtsep))\n                          \"}\"\n   augment-arg-str\
    \     = < a string that matches the rule\n                           augment-arg\
    \ >\n   augment-arg         = absolute-schema-nodeid\n   unknown-statement   =\
    \ prefix \":\" identifier [sep string] optsep\n                         (\";\"\
    \ / \"{\" *unknown-statement2 \"}\")\n   unknown-statement2   = [prefix \":\"\
    ] identifier [sep string] optsep\n                         (\";\" / \"{\" *unknown-statement2\
    \ \"}\")\n   when-stmt           = when-keyword sep string optsep\n          \
    \               (\";\" /\n                          \"{\" stmtsep\n          \
    \                    ;; these stmts can appear in any order\n                \
    \              [description-stmt stmtsep]\n                              [reference-stmt\
    \ stmtsep]\n                           \"}\")\n   rpc-stmt            = rpc-keyword\
    \ sep identifier-arg-str optsep\n                         (\";\" /\n         \
    \                 \"{\" stmtsep\n                              ;; these stmts\
    \ can appear in any order\n                              *(if-feature-stmt stmtsep)\n\
    \                              [status-stmt stmtsep]\n                       \
    \       [description-stmt stmtsep]\n                              [reference-stmt\
    \ stmtsep]\n                              *((typedef-stmt /\n                \
    \                 grouping-stmt) stmtsep)\n                              [input-stmt\
    \ stmtsep]\n                              [output-stmt stmtsep]\n            \
    \              \"}\")\n   input-stmt          = input-keyword optsep\n       \
    \                  \"{\" stmtsep\n                             ;; these stmts\
    \ can appear in any order\n                             *((typedef-stmt /\n  \
    \                              grouping-stmt) stmtsep)\n                     \
    \        1*(data-def-stmt stmtsep)\n                         \"}\"\n   output-stmt\
    \         = output-keyword optsep\n                         \"{\" stmtsep\n  \
    \                           ;; these stmts can appear in any order\n         \
    \                    *((typedef-stmt /\n                                grouping-stmt)\
    \ stmtsep)\n                             1*(data-def-stmt stmtsep)\n         \
    \                \"}\"\n   notification-stmt   = notification-keyword sep\n  \
    \                       identifier-arg-str optsep\n                         (\"\
    ;\" /\n                          \"{\" stmtsep\n                             \
    \ ;; these stmts can appear in any order\n                              *(if-feature-stmt\
    \ stmtsep)\n                              [status-stmt stmtsep]\n            \
    \                  [description-stmt stmtsep]\n                              [reference-stmt\
    \ stmtsep]\n                              *((typedef-stmt /\n                \
    \                 grouping-stmt) stmtsep)\n                              *(data-def-stmt\
    \ stmtsep)\n                          \"}\")\n   deviation-stmt      = deviation-keyword\
    \ sep\n                         deviation-arg-str optsep\n                   \
    \      \"{\" stmtsep\n                             ;; these stmts can appear in\
    \ any order\n                             [description-stmt stmtsep]\n       \
    \                      [reference-stmt stmtsep]\n                            \
    \ (deviate-not-supported-stmt /\n                               1*(deviate-add-stmt\
    \ /\n                                  deviate-replace-stmt /\n              \
    \                    deviate-delete-stmt))\n                         \"}\"\n \
    \  deviation-arg-str   = < a string that matches the rule\n                  \
    \         deviation-arg >\n   deviation-arg       = absolute-schema-nodeid\n \
    \  deviate-not-supported-stmt =\n                         deviate-keyword sep\n\
    \                         not-supported-keyword optsep\n                     \
    \    (\";\" /\n                          \"{\" stmtsep\n                     \
    \     \"}\")\n   deviate-add-stmt    = deviate-keyword sep add-keyword optsep\n\
    \                         (\";\" /\n                          \"{\" stmtsep\n\
    \                              [units-stmt stmtsep]\n                        \
    \      *(must-stmt stmtsep)\n                              *(unique-stmt stmtsep)\n\
    \                              [default-stmt stmtsep]\n                      \
    \        [config-stmt stmtsep]\n                              [mandatory-stmt\
    \ stmtsep]\n                              [min-elements-stmt stmtsep]\n      \
    \                        [max-elements-stmt stmtsep]\n                       \
    \   \"}\")\n   deviate-delete-stmt = deviate-keyword sep delete-keyword optsep\n\
    \                         (\";\" /\n                          \"{\" stmtsep\n\
    \                              [units-stmt stmtsep]\n                        \
    \      *(must-stmt stmtsep)\n                              *(unique-stmt stmtsep)\n\
    \                              [default-stmt stmtsep]\n                      \
    \    \"}\")\n   deviate-replace-stmt = deviate-keyword sep replace-keyword optsep\n\
    \                         (\";\" /\n                          \"{\" stmtsep\n\
    \                              [type-stmt stmtsep]\n                         \
    \     [units-stmt stmtsep]\n                              [default-stmt stmtsep]\n\
    \                              [config-stmt stmtsep]\n                       \
    \       [mandatory-stmt stmtsep]\n                              [min-elements-stmt\
    \ stmtsep]\n                              [max-elements-stmt stmtsep]\n      \
    \                    \"}\")\n   ;; Ranges\n   range-arg-str       = < a string\
    \ that matches the rule\n                           range-arg >\n   range-arg\
    \           = range-part *(optsep \"|\" optsep range-part)\n   range-part    \
    \      = range-boundary\n                         [optsep \"..\" optsep range-boundary]\n\
    \   range-boundary      = min-keyword / max-keyword /\n                      \
    \   integer-value / decimal-value\n   ;; Lengths\n   length-arg-str      = < a\
    \ string that matches the rule\n                           length-arg >\n   length-arg\
    \          = length-part *(optsep \"|\" optsep length-part)\n   length-part  \
    \       = length-boundary\n                         [optsep \"..\" optsep length-boundary]\n\
    \   length-boundary     = min-keyword / max-keyword /\n                      \
    \   non-negative-integer-value\n   ;; Date\n   date-arg-str        = < a string\
    \ that matches the rule\n                           date-arg >\n   date-arg  \
    \          = 4DIGIT \"-\" 2DIGIT \"-\" 2DIGIT\n   ;; Schema Node Identifiers\n\
    \   schema-nodeid       = absolute-schema-nodeid /\n                         descendant-schema-nodeid\n\
    \   absolute-schema-nodeid = 1*(\"/\" node-identifier)\n   descendant-schema-nodeid\
    \ =\n                         node-identifier\n                         absolute-schema-nodeid\n\
    \   node-identifier     = [prefix \":\"] identifier\n   ;; Instance Identifiers\n\
    \   instance-identifier = 1*(\"/\" (node-identifier *predicate))\n   predicate\
    \           = \"[\" *WSP (predicate-expr / pos) *WSP \"]\"\n   predicate-expr\
    \      = (node-identifier / \".\") *WSP \"=\" *WSP\n                         ((DQUOTE\
    \ string DQUOTE) /\n                          (SQUOTE string SQUOTE))\n   pos\
    \                 = non-negative-integer-value\n   ;; leafref path\n   path-arg-str\
    \        = < a string that matches the rule\n                           path-arg\
    \ >\n   path-arg            = absolute-path / relative-path\n   absolute-path\
    \       = 1*(\"/\" (node-identifier *path-predicate))\n   relative-path      \
    \ = 1*(\"..\" \"/\") descendant-path\n   descendant-path     = node-identifier\n\
    \                         [*path-predicate absolute-path]\n   path-predicate \
    \     = \"[\" *WSP path-equality-expr *WSP \"]\"\n   path-equality-expr  = node-identifier\
    \ *WSP \"=\" *WSP path-key-expr\n   path-key-expr       = current-function-invocation\
    \ *WSP \"/\" *WSP\n                         rel-path-keyexpr\n   rel-path-keyexpr\
    \    = 1*(\"..\" *WSP \"/\" *WSP)\n                         *(node-identifier\
    \ *WSP \"/\" *WSP)\n                         node-identifier\n   ;;; Keywords,\
    \ using abnfgen's syntax for case-sensitive strings\n   ;; statement keywords\n\
    \   anyxml-keyword      = 'anyxml'\n   argument-keyword    = 'argument'\n   augment-keyword\
    \     = 'augment'\n   base-keyword        = 'base'\n   belongs-to-keyword  = 'belongs-to'\n\
    \   bit-keyword         = 'bit'\n   case-keyword        = 'case'\n   choice-keyword\
    \      = 'choice'\n   config-keyword      = 'config'\n   contact-keyword     =\
    \ 'contact'\n   container-keyword   = 'container'\n   default-keyword     = 'default'\n\
    \   description-keyword = 'description'\n   enum-keyword        = 'enum'\n   error-app-tag-keyword\
    \ = 'error-app-tag'\n   error-message-keyword = 'error-message'\n   extension-keyword\
    \   = 'extension'\n   deviation-keyword   = 'deviation'\n   deviate-keyword  \
    \   = 'deviate'\n   feature-keyword     = 'feature'\n   fraction-digits-keyword\
    \ = 'fraction-digits'\n   grouping-keyword    = 'grouping'\n   identity-keyword\
    \    = 'identity'\n   if-feature-keyword  = 'if-feature'\n   import-keyword  \
    \    = 'import'\n   include-keyword     = 'include'\n   input-keyword       =\
    \ 'input'\n   key-keyword         = 'key'\n   leaf-keyword        = 'leaf'\n \
    \  leaf-list-keyword   = 'leaf-list'\n   length-keyword      = 'length'\n   list-keyword\
    \        = 'list'\n   mandatory-keyword   = 'mandatory'\n   max-elements-keyword\
    \ = 'max-elements'\n   min-elements-keyword = 'min-elements'\n   module-keyword\
    \      = 'module'\n   must-keyword        = 'must'\n   namespace-keyword   = 'namespace'\n\
    \   notification-keyword= 'notification'\n   ordered-by-keyword  = 'ordered-by'\n\
    \   organization-keyword= 'organization'\n   output-keyword      = 'output'\n\
    \   path-keyword        = 'path'\n   pattern-keyword     = 'pattern'\n   position-keyword\
    \    = 'position'\n   prefix-keyword      = 'prefix'\n   presence-keyword    =\
    \ 'presence'\n   range-keyword       = 'range'\n   reference-keyword   = 'reference'\n\
    \   refine-keyword      = 'refine'\n   require-instance-keyword = 'require-instance'\n\
    \   revision-keyword    = 'revision'\n   revision-date-keyword = 'revision-date'\n\
    \   rpc-keyword         = 'rpc'\n   status-keyword      = 'status'\n   submodule-keyword\
    \   = 'submodule'\n   type-keyword        = 'type'\n   typedef-keyword     = 'typedef'\n\
    \   unique-keyword      = 'unique'\n   units-keyword       = 'units'\n   uses-keyword\
    \        = 'uses'\n   value-keyword       = 'value'\n   when-keyword        =\
    \ 'when'\n   yang-version-keyword= 'yang-version'\n   yin-element-keyword = 'yin-element'\n\
    \   ;; other keywords\n   add-keyword         = 'add'\n   current-keyword    \
    \ = 'current'\n   delete-keyword      = 'delete'\n   deprecated-keyword  = 'deprecated'\n\
    \   false-keyword       = 'false'\n   max-keyword         = 'max'\n   min-keyword\
    \         = 'min'\n   not-supported-keyword = 'not-supported'\n   obsolete-keyword\
    \    = 'obsolete'\n   replace-keyword     = 'replace'\n   system-keyword     \
    \ = 'system'\n   true-keyword        = 'true'\n   unbounded-keyword   = 'unbounded'\n\
    \   user-keyword        = 'user'\n   current-function-invocation = current-keyword\
    \ *WSP \"(\" *WSP \")\"\n   ;; Basic Rules\n   prefix-arg-str      = < a string\
    \ that matches the rule\n                           prefix-arg >\n   prefix-arg\
    \          = prefix\n   prefix              = identifier\n   identifier-arg-str\
    \  = < a string that matches the rule\n                           identifier-arg\
    \ >\n   identifier-arg      = identifier\n   ;; An identifier MUST NOT start with\
    \ (('X'|'x') ('M'|'m') ('L'|'l'))\n   identifier          = (ALPHA / \"_\")\n\
    \                         *(ALPHA / DIGIT / \"_\" / \"-\" / \".\")\n   identifier-ref-arg-str\
    \ = < a string that matches the rule\n                           identifier-ref-arg\
    \ >\n   identifier-ref-arg  = [prefix \":\"] identifier\n   string           \
    \   = < an unquoted string as returned by\n                           the scanner\
    \ >\n   integer-value       = (\"-\" non-negative-integer-value)  /\n        \
    \                  non-negative-integer-value\n   non-negative-integer-value =\
    \ \"0\" / positive-integer-value\n   positive-integer-value = (non-zero-digit\
    \ *DIGIT)\n   zero-integer-value  = 1*DIGIT\n   stmtend             = \";\" /\
    \ \"{\" *unknown-statement \"}\"\n   sep                 = 1*(WSP / line-break)\n\
    \                         ; unconditional separator\n   optsep              =\
    \ *(WSP / line-break)\n   stmtsep             = *(WSP / line-break / unknown-statement)\n\
    \   line-break          = CRLF / LF\n   non-zero-digit      = %x31-39\n   decimal-value\
    \       = integer-value (\".\" zero-integer-value)\n   SQUOTE              = %x27\n\
    \                         ; ' (Single Quote)\n   ;;\n   ;; RFC 5234 core rules.\n\
    \   ;;\n   ALPHA               = %x41-5A / %x61-7A\n                         ;\
    \ A-Z / a-z\n   CR                  = %x0D\n                         ; carriage\
    \ return\n   CRLF                = CR LF\n                         ; Internet\
    \ standard new line\n   DIGIT               = %x30-39\n                      \
    \   ; 0-9\n   DQUOTE              = %x22\n                         ; \" (Double\
    \ Quote)\n   HEXDIG              = DIGIT /\n                         %x61 / %x62\
    \ / %x63 / %x64 / %x65 / %x66\n                         ; only lower-case a..f\n\
    \   HTAB                = %x09\n                         ; horizontal tab\n  \
    \ LF                  = %x0A\n                         ; linefeed\n   SP     \
    \             = %x20\n                         ; space\n   VCHAR             \
    \  = %x21-7E\n                         ; visible (printing) characters\n   WSP\
    \                 = SP / HTAB\n                         ; whitespace\n   <CODE\
    \ ENDS>\n"
- title: 13.  Error Responses for YANG Related Errors
  contents:
  - "13.  Error Responses for YANG Related Errors\n   A number of NETCONF error responses\
    \ are defined for error cases\n   related to the data-model handling.  If the\
    \ relevant YANG statement\n   has an \"error-app-tag\" substatement, that overrides\
    \ the default value\n   specified below.\n"
- title: 13.1.  Error Message for Data That Violates a unique Statement
  contents:
  - "13.1.  Error Message for Data That Violates a unique Statement\n   If a NETCONF\
    \ operation would result in configuration data where a\n   unique constraint is\
    \ invalidated, the following error is returned:\n     error-tag:      operation-failed\n\
    \     error-app-tag:  data-not-unique\n     error-info:     <non-unique>: Contains\
    \ an instance identifier that\n                     points to a leaf that invalidates\
    \ the unique\n                     constraint. This element is present once for\
    \ each\n                     non-unique leaf.\n                     The <non-unique>\
    \ element is in the YANG\n                     namespace (\"urn:ietf:params:xml:ns:yang:1\"\
    ).\n"
- title: 13.2.  Error Message for Data That Violates a max-elements Statement
  contents:
  - "13.2.  Error Message for Data That Violates a max-elements Statement\n   If a\
    \ NETCONF operation would result in configuration data where a\n   list or a leaf-list\
    \ would have too many entries the following error\n   is returned:\n     error-tag:\
    \      operation-failed\n     error-app-tag:  too-many-elements\n   This error\
    \ is returned once, with the error-path identifying the list\n   node, even if\
    \ there are more than one extra child present.\n"
- title: 13.3.  Error Message for Data That Violates a min-elements Statement
  contents:
  - "13.3.  Error Message for Data That Violates a min-elements Statement\n   If a\
    \ NETCONF operation would result in configuration data where a\n   list or a leaf-list\
    \ would have too few entries the following error is\n   returned:\n     error-tag:\
    \      operation-failed\n     error-app-tag:  too-few-elements\n   This error\
    \ is returned once, with the error-path identifying the list\n   node, even if\
    \ there are more than one child missing.\n"
- title: 13.4.  Error Message for Data That Violates a must Statement
  contents:
  - "13.4.  Error Message for Data That Violates a must Statement\n   If a NETCONF\
    \ operation would result in configuration data where the\n   restrictions imposed\
    \ by a \"must\" statement is violated the following\n   error is returned, unless\
    \ a specific \"error-app-tag\" substatement is\n   present for the \"must\" statement.\n\
    \     error-tag:      operation-failed\n     error-app-tag:  must-violation\n"
- title: 13.5.  Error Message for Data That Violates a require-instance Statement
  contents:
  - "13.5.  Error Message for Data That Violates a require-instance Statement\n  \
    \ If a NETCONF operation would result in configuration data where a\n   leaf of\
    \ type \"instance-identifier\" marked with require-instance\n   \"true\" refers\
    \ to a non-existing instance, the following error is\n   returned:\n     error-tag:\
    \      data-missing\n     error-app-tag:  instance-required\n     error-path:\
    \     Path to the instance-identifier leaf.\n"
- title: 13.6.  Error Message for Data That Does Not Match a leafref Type
  contents:
  - "13.6.  Error Message for Data That Does Not Match a leafref Type\n   If a NETCONF\
    \ operation would result in configuration data where a\n   leaf of type \"leafref\"\
    \ refers to a non-existing instance, the\n   following error is returned:\n  \
    \   error-tag:      data-missing\n     error-app-tag:  instance-required\n   \
    \  error-path:     Path to the leafref leaf.\n"
- title: 13.7.  Error Message for Data That Violates a mandatory choice Statement
  contents:
  - "13.7.  Error Message for Data That Violates a mandatory choice Statement\n  \
    \ If a NETCONF operation would result in configuration data where no\n   nodes\
    \ exists in a mandatory choice, the following error is returned:\n     error-tag:\
    \      data-missing\n     error-app-tag:  missing-choice\n     error-path:   \
    \  Path to the element with the missing choice.\n     error-info:     <missing-choice>:\
    \ Contains the name of the missing\n                     mandatory choice.\n \
    \                    The <missing-choice> element is in the YANG\n           \
    \          namespace (\"urn:ietf:params:xml:ns:yang:1\").\n"
- title: 13.8.  Error Message for the "insert" Operation
  contents:
  - "13.8.  Error Message for the \"insert\" Operation\n   If the \"insert\" and \"\
    key\" or \"value\" attributes are used in an\n   <edit-config> for a list or leaf-list\
    \ node, and the \"key\" or \"value\"\n   refers to a non-existing instance, the\
    \ following error is returned:\n     error-tag:      bad-attribute\n     error-app-tag:\
    \  missing-instance\n"
- title: 14.  IANA Considerations
  contents:
  - "14.  IANA Considerations\n   This document defines a registry for YANG module\
    \ and submodule names.\n   The name of the registry is \"YANG Module Names\".\n\
    \   The registry shall record for each entry:\n   o  the name of the module or\
    \ submodule\n   o  for modules, the assigned XML namespace\n   o  for modules,\
    \ the prefix of the module\n   o  for submodules, the name of the module it belongs\
    \ to\n   o  a reference to the (sub)module's documentation (e.g., the RFC\n  \
    \    number)\n   There are no initial assignments.\n   For allocation, RFC publication\
    \ is required as per RFC 5226\n   [RFC5226].  All registered YANG module names\
    \ MUST comply with the\n   rules for identifiers stated in Section 6.2, and MUST\
    \ have a module\n   name prefix.\n   The module name prefix 'ietf-' is reserved\
    \ for IETF stream documents\n   [RFC4844], while the module name prefix 'irtf-'\
    \ is reserved for IRTF\n   stream documents.  Modules published in other RFC streams\
    \ MUST have a\n   similar suitable prefix.\n   All module and submodule names\
    \ in the registry MUST be unique.\n   All XML namespaces in the registry MUST\
    \ be unique.\n   This document registers two URIs for the YANG and YIN XML namespaces\n\
    \   in the IETF XML registry [RFC3688].  Following the format in RFC\n   3688,\
    \ the following have been registered.\n     URI: urn:ietf:params:xml:ns:yang:yin:1\n\
    \     URI: urn:ietf:params:xml:ns:yang:1\n     Registrant Contact: The IESG.\n\
    \     XML: N/A, the requested URIs are XML namespaces.\n   This document registers\
    \ two new media types as defined in the\n   following sections.\n"
- title: 14.1.  Media type application/yang
  contents:
  - "14.1.  Media type application/yang\n  MIME media type name:  application\n  MIME\
    \ subtype name:  yang\n  Mandatory parameters:  none\n  Optional parameters: \
    \ none\n  Encoding considerations:  8-bit\n  Security considerations:  See Section\
    \ 15 in RFC 6020\n  Interoperability considerations:  None\n  Published specification:\
    \  RFC 6020\n  Applications that use this media type:\n    YANG module validators,\
    \ web servers used for downloading YANG\n    modules, email clients, etc.\n  Additional\
    \ information:\n     Magic Number:  None\n     File Extension:  .yang\n     Macintosh\
    \ file type code:  'TEXT'\n  Personal and email address for further information:\n\
    \     Martin Bjorklund <mbj@tail-f.com>\n  Intended usage:  COMMON\n  Author:\n\
    \     This specification is a work item of the IETF NETMOD working group,\n  \
    \   with mailing list address <netmod@ietf.org>.\n  Change controller:\n     The\
    \ IESG <iesg@ietf.org>\n"
- title: 14.2.  Media type application/yin+xml
  contents:
  - "14.2.  Media type application/yin+xml\n  MIME media type name:  application\n\
    \  MIME subtype name:  yin+xml\n  Mandatory parameters:  none\n  Optional parameters:\n\
    \     \"charset\":  This parameter has identical semantics to the charset\n  \
    \   parameter of the \"application/xml\" media type as specified in\n     [RFC3023].\n\
    \  Encoding considerations:\n     Identical to those of \"application/xml\" as\n\
    \     described in [RFC3023], Section 3.2.\n  Security considerations:  See Section\
    \ 15 in RFC 6020\n  Interoperability considerations:  None\n  Published specification:\
    \  RFC 6020\n  Applications that use this media type:\n    YANG module validators,\
    \ web servers used for downloading YANG\n    modules, email clients, etc.\n  Additional\
    \ information:\n     Magic Number:  As specified for \"application/xml\" in [RFC3023],\n\
    \                    Section 3.2.\n     File Extension:  .yin\n     Macintosh\
    \ file type code:  'TEXT'\n  Personal and email address for further information:\n\
    \     Martin Bjorklund <mbj@tail-f.com>\n  Intended usage:  COMMON\n  Author:\n\
    \     This specification is a work item of the IETF NETMOD working group,\n  \
    \   with mailing list address <netmod@ietf.org>.\n  Change controller:\n     The\
    \ IESG <iesg@ietf.org>\n"
- title: 15.  Security Considerations
  contents:
  - "15.  Security Considerations\n   This document defines a language with which\
    \ to write and read\n   descriptions of management information.  The language\
    \ itself has no\n   security impact on the Internet.\n   The same considerations\
    \ are relevant as for the base NETCONF protocol\n   (see [RFC4741], Section 9).\n\
    \   Data modeled in YANG might contain sensitive information.  RPCs or\n   notifications\
    \ defined in YANG might transfer sensitive information.\n   Security issues are\
    \ related to the usage of data modeled in YANG.\n   Such issues shall be dealt\
    \ with in documents describing the data\n   models and documents about the interfaces\
    \ used to manipulate the data\n   e.g., the NETCONF documents.\n   Data modeled\
    \ in YANG is dependent upon:\n   o  the security of the transmission infrastructure\
    \ used to send\n      sensitive information.\n   o  the security of applications\
    \ that store or release such sensitive\n      information.\n   o  adequate authentication\
    \ and access control mechanisms to restrict\n      the usage of sensitive data.\n\
    \   YANG parsers need to be robust with respect to malformed documents.\n   Reading\
    \ malformed documents from unknown or untrusted sources could\n   result in an\
    \ attacker gaining privileges of the user running the YANG\n   parser.  In an\
    \ extreme situation, the entire machine could be\n   compromised.\n"
- title: 16.  Contributors
  contents:
  - "16.  Contributors\n   The following people all contributed significantly to the\
    \ initial\n   YANG document:\n    - Andy Bierman (Brocade)\n    - Balazs Lengyel\
    \ (Ericsson)\n    - David Partain (Ericsson)\n    - Juergen Schoenwaelder (Jacobs\
    \ University Bremen)\n    - Phil Shafer (Juniper Networks)\n"
- title: 17.  Acknowledgements
  contents:
  - "17.  Acknowledgements\n   The editor wishes to thank the following individuals,\
    \ who all\n   provided helpful comments on various versions of this document:\n\
    \   Mehmet Ersue, Washam Fan, Joel Halpern, Leif Johansson, Ladislav\n   Lhotka,\
    \ Gerhard Muenz, Tom Petch, Randy Presuhn, David Reid, and Bert\n   Wijnen.\n"
- title: 18.  References
  contents:
  - '18.  References

    '
- title: 18.1.  Normative References
  contents:
  - "18.1.  Normative References\n   [ISO.10646]  International Organization for Standardization,\n\
    \                \"Information Technology - Universal Multiple-Octet Coded\n \
    \               Character Set (UCS)\", ISO Standard 10646:2003, 2003.\n   [RFC2119]\
    \    Bradner, S., \"Key words for use in RFCs to Indicate\n                Requirement\
    \ Levels\", BCP 14, RFC 2119, March 1997.\n   [RFC3023]    Murata, M., St. Laurent,\
    \ S., and D. Kohn, \"XML Media\n                Types\", RFC 3023, January 2001.\n\
    \   [RFC3629]    Yergeau, F., \"UTF-8, a transformation format of ISO\n      \
    \          10646\", STD 63, RFC 3629, November 2003.\n   [RFC3688]    Mealling,\
    \ M., \"The IETF XML Registry\", BCP 81, RFC 3688,\n                January 2004.\n\
    \   [RFC3986]    Berners-Lee, T., Fielding, R., and L. Masinter, \"Uniform\n \
    \               Resource Identifier (URI): Generic Syntax\", STD 66,\n       \
    \         RFC 3986, January 2005.\n   [RFC4648]    Josefsson, S., \"The Base16,\
    \ Base32, and Base64 Data\n                Encodings\", RFC 4648, October 2006.\n\
    \   [RFC4741]    Enns, R., \"NETCONF Configuration Protocol\", RFC 4741,\n   \
    \             December 2006.\n   [RFC5226]    Narten, T. and H. Alvestrand, \"\
    Guidelines for Writing an\n                IANA Considerations Section in RFCs\"\
    , BCP 26, RFC 5226,\n                May 2008.\n   [RFC5234]    Crocker, D. and\
    \ P. Overell, \"Augmented BNF for Syntax\n                Specifications: ABNF\"\
    , STD 68, RFC 5234, January 2008.\n   [RFC5277]    Chisholm, S. and H. Trevino,\
    \ \"NETCONF Event\n                Notifications\", RFC 5277, July 2008.\n   [XML-NAMES]\
    \  Hollander, D., Tobin, R., Thompson, H., Bray, T., and A.\n                Layman,\
    \ \"Namespaces in XML 1.0 (Third Edition)\", World\n                Wide Web Consortium\
    \ Recommendation REC-xml-names-\n                20091208, December 2009,\n  \
    \              <http://www.w3.org/TR/2009/REC-xml-names-20091208>.\n   [XPATH]\
    \      Clark, J. and S. DeRose, \"XML Path Language (XPath)\n                Version\
    \ 1.0\", World Wide Web Consortium\n                Recommendation REC-xpath-19991116,\
    \ November 1999,\n                <http://www.w3.org/TR/1999/REC-xpath-19991116>.\n\
    \   [XSD-TYPES]  Malhotra, A. and P. Biron, \"XML Schema Part 2: Datatypes\n \
    \               Second Edition\", World Wide Web Consortium\n                Recommendation\
    \ REC-xmlschema-2-20041028, October 2004,\n                <http://www.w3.org/TR/2004/REC-xmlschema-2-20041028>.\n"
- title: 18.2.  Informative References
  contents:
  - "18.2.  Informative References\n   [RFC2578]    McCloghrie, K., Ed., Perkins,\
    \ D., Ed., and J.\n                Schoenwaelder, Ed., \"Structure of Management\
    \ Information\n                Version 2 (SMIv2)\", STD 58, RFC 2578, April 1999.\n\
    \   [RFC2579]    McCloghrie, K., Ed., Perkins, D., Ed., and J.\n             \
    \   Schoenwaelder, Ed., \"Textual Conventions for SMIv2\",\n                STD\
    \ 58, RFC 2579, April 1999.\n   [RFC3780]    Strauss, F. and J. Schoenwaelder,\
    \ \"SMIng - Next\n                Generation Structure of Management Information\"\
    ,\n                RFC 3780, May 2004.\n   [RFC4844]    Daigle, L. and Internet\
    \ Architecture Board, \"The RFC\n                Series and RFC Editor\", RFC\
    \ 4844, July 2007.\n   [XPATH2.0]   Berglund, A., Boag, S., Chamberlin, D., Fernandez,\
    \ M.,\n                Kay, M., Robie, J., and J. Simeon, \"XML Path Language\n\
    \                (XPath) 2.0\", World Wide Web Consortium\n                Recommendation\
    \ REC-xpath20-20070123, January 2007,\n                <http://www.w3.org/TR/2007/REC-xpath20-20070123>.\n\
    \   [XSLT]       Clark, J., \"XSL Transformations (XSLT) Version 1.0\",\n    \
    \            World Wide Web Consortium Recommendation REC-xslt-\n            \
    \    19991116, November 1999,\n                <http://www.w3.org/TR/1999/REC-xslt-19991116>.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Martin Bjorklund (editor)\n   Tail-f Systems\n   EMail:\
    \ mbj@tail-f.com\n"
