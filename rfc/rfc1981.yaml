- title: __initial_text__
  contents:
  - '                  Path MTU Discovery for IP version 6

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes Path MTU Discovery for IP version 6.  It\
    \ is\n   largely derived from RFC 1191, which describes Path MTU Discovery for\n\
    \   IP version 4.\n"
- title: Table of Contents
  contents:
  - 'Table of Contents

    '
- title: 1. Introduction
  contents:
  - "1. Introduction\n   When one IPv6 node has a large amount of data to send to\
    \ another\n   node, the data is transmitted in a series of IPv6 packets.  It is\n\
    \   usually preferable that these packets be of the largest size that can\n  \
    \ successfully traverse the path from the source node to the\n   destination node.\
    \  This packet size is referred to as the Path MTU\n   (PMTU), and it is equal\
    \ to the minimum link MTU of all the links in a\n   path.  IPv6 defines a standard\
    \ mechanism for a node to discover the\n   PMTU of an arbitrary path.\n   IPv6\
    \ nodes SHOULD implement Path MTU Discovery in order to discover\n   and take\
    \ advantage of paths with PMTU greater than the IPv6 minimum\n   link MTU [IPv6-SPEC].\
    \  A minimal IPv6 implementation (e.g., in a boot\n   ROM) may choose to omit\
    \ implementation of Path MTU Discovery.\n   Nodes not implementing Path MTU Discovery\
    \ use the IPv6 minimum link\n   MTU defined in [IPv6-SPEC] as the maximum packet\
    \ size.  In most\n   cases, this will result in the use of smaller packets than\
    \ necessary,\n   because most paths have a PMTU greater than the IPv6 minimum\
    \ link\n   MTU.  A node sending packets much smaller than the Path MTU allows\
    \ is\n   wasting network resources and probably getting suboptimal throughput.\n"
- title: 2. Terminology
  contents:
  - "2. Terminology\n   node        - a device that implements IPv6.\n   router  \
    \    - a node that forwards IPv6 packets not explicitly\n                 addressed\
    \ to itself.\n   host        - any node that is not a router.\n   upper layer\
    \ - a protocol layer immediately above IPv6.  Examples are\n                 transport\
    \ protocols such as TCP and UDP, control\n                 protocols such as ICMP,\
    \ routing protocols such as OSPF,\n                 and internet or lower-layer\
    \ protocols being \"tunneled\"\n                 over (i.e., encapsulated in)\
    \ IPv6 such as IPX,\n                 AppleTalk, or IPv6 itself.\n   link    \
    \    - a communication facility or medium over which nodes can\n             \
    \    communicate at the link layer, i.e., the layer\n                 immediately\
    \ below IPv6.  Examples are Ethernets (simple\n                 or bridged); PPP\
    \ links; X.25, Frame Relay, or ATM\n                 networks; and internet (or\
    \ higher) layer \"tunnels\",\n                 such as tunnels over IPv4 or IPv6\
    \ itself.\n   interface   - a node's attachment to a link.\n   address     - an\
    \ IPv6-layer identifier for an interface or a set of\n                 interfaces.\n\
    \   packet      - an IPv6 header plus payload.\n   link MTU    - the maximum transmission\
    \ unit, i.e., maximum packet\n                 size in octets, that can be conveyed\
    \ in one piece over\n                 a link.\n   path        - the set of links\
    \ traversed by a packet between a source\n                 node and a destination\
    \ node\n   path MTU    - the minimum link MTU of all the links in a path between\n\
    \                 a source node and a destination node.\n   PMTU        - path\
    \ MTU\n   Path MTU\n   Discovery   - process by which a node learns the PMTU of\
    \ a path\n   flow        - a sequence of packets sent from a particular source\n\
    \                 to a particular (unicast or multicast) destination for\n   \
    \              which the source desires special handling by the\n            \
    \     intervening routers.\n   flow id     - a combination of a source address\
    \ and a non-zero\n                 flow label.\n"
- title: 3. Protocol overview
  contents:
  - "3. Protocol overview\n   This memo describes a technique to dynamically discover\
    \ the PMTU of a\n   path.  The basic idea is that a source node initially assumes\
    \ that\n   the PMTU of a path is the (known) MTU of the first hop in the path.\n\
    \   If any of the packets sent on that path are too large to be forwarded\n  \
    \ by some node along the path, that node will discard them and return\n   ICMPv6\
    \ Packet Too Big messages [ICMPv6].  Upon receipt of such a\n   message, the source\
    \ node reduces its assumed PMTU for the path based\n   on the MTU of the constricting\
    \ hop as reported in the Packet Too Big\n   message.\n   The Path MTU Discovery\
    \ process ends when the node's estimate of the\n   PMTU is less than or equal\
    \ to the actual PMTU.  Note that several\n   iterations of the packet-sent/Packet-Too-Big-message-received\
    \ cycle\n   may occur before the Path MTU Discovery process ends, as there may\
    \ be\n   links with smaller MTUs further along the path.\n   Alternatively, the\
    \ node may elect to end the discovery process by\n   ceasing to send packets larger\
    \ than the IPv6 minimum link MTU.\n   The PMTU of a path may change over time,\
    \ due to changes in the\n   routing topology.  Reductions of the PMTU are detected\
    \ by Packet Too\n   Big messages.  To detect increases in a path's PMTU, a node\n\
    \   periodically increases its assumed PMTU.  This will almost always\n   result\
    \ in packets being discarded and Packet Too Big messages being\n   generated,\
    \ because in most cases the PMTU of the path will not have\n   changed.  Therefore,\
    \ attempts to detect increases in a path's PMTU\n   should be done infrequently.\n\
    \   Path MTU Discovery supports multicast as well as unicast\n   destinations.\
    \  In the case of a multicast destination, copies of a\n   packet may traverse\
    \ many different paths to many different nodes.\n   Each path may have a different\
    \ PMTU, and a single multicast packet\n   may result in multiple Packet Too Big\
    \ messages, each reporting a\n   different next-hop MTU.  The minimum PMTU value\
    \ across the set of\n   paths in use determines the size of subsequent packets\
    \ sent to the\n   multicast destination.\n   Note that Path MTU Discovery must\
    \ be performed even in cases where a\n   node \"thinks\" a destination is attached\
    \ to the same link as itself.\n   In a situation such as when a neighboring router\
    \ acts as proxy [ND]\n   for some destination, the destination can to appear to\
    \ be directly\n   connected but is in fact more than one hop away.\n"
- title: 4. Protocol Requirements
  contents:
  - "4. Protocol Requirements\n   As discussed in section 1, IPv6 nodes are not required\
    \ to implement\n   Path MTU Discovery.  The requirements in this section apply\
    \ only to\n   those implementations that include Path MTU Discovery.\n   When\
    \ a node receives a Packet Too Big message, it MUST reduce its\n   estimate of\
    \ the PMTU for the relevant path, based on the value of the\n   MTU field in the\
    \ message.  The precise behavior of a node in this\n   circumstance is not specified,\
    \ since different applications may have\n   different requirements, and since\
    \ different implementation\n   architectures may favor different strategies.\n\
    \   After receiving a Packet Too Big message, a node MUST attempt to\n   avoid\
    \ eliciting more such messages in the near future.  The node MUST\n   reduce the\
    \ size of the packets it is sending along the path.  Using a\n   PMTU estimate\
    \ larger than the IPv6 minimum link MTU may continue to\n   elicit Packet Too\
    \ Big messages.  Since each of these messages (and\n   the dropped packets they\
    \ respond to) consume network resources, the\n   node MUST force the Path MTU\
    \ Discovery process to end.\n   Nodes using Path MTU Discovery MUST detect decreases\
    \ in PMTU as fast\n   as possible.  Nodes MAY detect increases in PMTU, but because\
    \ doing\n   so requires sending packets larger than the current estimated PMTU,\n\
    \   and because the likelihood is that the PMTU will not have increased,\n   this\
    \ MUST be done at infrequent intervals.  An attempt to detect an\n   increase\
    \ (by sending a packet larger than the current estimate) MUST\n   NOT be done\
    \ less than 5 minutes after a Packet Too Big message has\n   been received for\
    \ the given path.  The recommended setting for this\n   timer is twice its minimum\
    \ value (10 minutes).\n   A node MUST NOT reduce its estimate of the Path MTU\
    \ below the IPv6\n   minimum link MTU.\n      Note: A node may receive a Packet\
    \ Too Big message reporting a\n      next-hop MTU that is less than the IPv6 minimum\
    \ link MTU.  In that\n      case, the node is not required to reduce the size\
    \ of subsequent\n      packets sent on the path to less than the IPv6 minimun\
    \ link MTU,\n      but rather must include a Fragment header in those packets\
    \ [IPv6-\n      SPEC].\n   A node MUST NOT increase its estimate of the Path MTU\
    \ in response to\n   the contents of a Packet Too Big message.  A message purporting\
    \ to\n   announce an increase in the Path MTU might be a stale packet that has\n\
    \   been floating around in the network, a false packet injected as part\n   of\
    \ a denial-of-service attack, or the result of having multiple paths\n   to the\
    \ destination, each with a different PMTU.\n"
- title: 5. Implementation Issues
  contents:
  - "5. Implementation Issues\n   This section discusses a number of issues related\
    \ to the\n   implementation of Path MTU Discovery.  This is not a specification,\n\
    \   but rather a set of notes provided as an aid for implementors.\n   The issues\
    \ include:\n   - What layer or layers implement Path MTU Discovery?\n   - How\
    \ is the PMTU information cached?\n   - How is stale PMTU information removed?\n\
    \   - What must transport and higher layers do?\n"
- title: 5.1. Layering
  contents:
  - "5.1. Layering\n   In the IP architecture, the choice of what size packet to send\
    \ is\n   made by a protocol at a layer above IP.  This memo refers to such a\n\
    \   protocol as a \"packetization protocol\".  Packetization protocols are\n \
    \  usually transport protocols (for example, TCP) but can also be\n   higher-layer\
    \ protocols (for example, protocols built on top of UDP).\n   Implementing Path\
    \ MTU Discovery in the packetization layers\n   simplifies some of the inter-layer\
    \ issues, but has several drawbacks:\n   the implementation may have to be redone\
    \ for each packetization\n   protocol, it becomes hard to share PMTU information\
    \ between different\n   packetization layers, and the connection-oriented state\
    \ maintained by\n   some packetization layers may not easily extend to save PMTU\n\
    \   information for long periods.\n   It is therefore suggested that the IP layer\
    \ store PMTU information\n   and that the ICMP layer process received Packet Too\
    \ Big messages.\n   The packetization layers may respond to changes in the PMTU,\
    \ by\n   changing the size of the messages they send.  To support this\n   layering,\
    \ packetization layers require a way to learn of changes in\n   the value of MMS_S,\
    \ the \"maximum send transport-message size\".  The\n   MMS_S is derived from\
    \ the Path MTU by subtracting the size of the\n   IPv6 header plus space reserved\
    \ by the IP layer for additional\n   headers (if any).\n   It is possible that\
    \ a packetization layer, perhaps a UDP application\n   outside the kernel, is\
    \ unable to change the size of messages it\n   sends.  This may result in a packet\
    \ size that exceeds the Path MTU.\n   To accommodate such situations, IPv6 defines\
    \ a mechanism that allows\n   large payloads to be divided into fragments, with\
    \ each fragment sent\n   in a separate packet (see [IPv6-SPEC] section \"Fragment\
    \ Header\").\n   However, packetization layers are encouraged to avoid sending\n\
    \   messages that will require fragmentation (for the case against\n   fragmentation,\
    \ see [FRAG]).\n"
- title: 5.2. Storing PMTU information
  contents:
  - "5.2. Storing PMTU information\n   Ideally, a PMTU value should be associated\
    \ with a specific path\n   traversed by packets exchanged between the source and\
    \ destination\n   nodes.  However, in most cases a node will not have enough\n\
    \   information to completely and accurately identify such a path.\n   Rather,\
    \ a node must associate a PMTU value with some local\n   representation of a path.\
    \  It is left to the implementation to select\n   the local representation of\
    \ a path.\n   In the case of a multicast destination address, copies of a packet\n\
    \   may traverse many different paths to reach many different nodes.  The\n  \
    \ local representation of the \"path\" to a multicast destination must in\n  \
    \ fact represent a potentially large set of paths.\n   Minimally, an implementation\
    \ could maintain a single PMTU value to be\n   used for all packets originated\
    \ from the node.  This PMTU value would\n   be the minimum PMTU learned across\
    \ the set of all paths in use by the\n   node.  This approach is likely to result\
    \ in the use of smaller\n   packets than is necessary for many paths.\n   An implementation\
    \ could use the destination address as the local\n   representation of a path.\
    \  The PMTU value associated with a\n   destination would be the minimum PMTU\
    \ learned across the set of all\n   paths in use to that destination.  The set\
    \ of paths in use to a\n   particular destination is expected to be small, in\
    \ many cases\n   consisting of a single path.  This approach will result in the\
    \ use of\n   optimally sized packets on a per-destination basis.  This approach\n\
    \   integrates nicely with the conceptual model of a host as described in\n  \
    \ [ND]: a PMTU value could be stored with the corresponding entry in\n   the destination\
    \ cache.\n   If flows [IPv6-SPEC] are in use, an implementation could use the\
    \ flow\n   id as the local representation of a path.  Packets sent to a\n   particular\
    \ destination but belonging to different flows may use\n   different paths, with\
    \ the choice of path depending on the flow id.\n   This approach will result in\
    \ the use of optimally sized packets on a\n   per-flow basis, providing finer\
    \ granularity than PMTU values\n   maintained on a per-destination basis.\n  \
    \ For source routed packets (i.e. packets containing an IPv6 Routing\n   header\
    \ [IPv6-SPEC]), the source route may further qualify the local\n   representation\
    \ of a path.  In particular, a packet containing a type\n   0 Routing header in\
    \ which all bits in the Strict/Loose Bit Map are\n   equal to 1 contains a complete\
    \ path specification.  An implementation\n   could use source route information\
    \ in the local representation of a\n   path.\n      Note: Some paths may be further\
    \ distinguished by different\n      security classifications.  The details of\
    \ such classifications are\n      beyond the scope of this memo.\n   Initially,\
    \ the PMTU value for a path is assumed to be the (known) MTU\n   of the first-hop\
    \ link.\n   When a Packet Too Big message is received, the node determines which\n\
    \   path the message applies to based on the contents of the Packet Too\n   Big\
    \ message.  For example, if the destination address is used as the\n   local representation\
    \ of a path, the destination address from the\n   original packet would be used\
    \ to determine which path the message\n   applies to.\n      Note: if the original\
    \ packet contained a Routing header, the\n      Routing header should be used\
    \ to determine the location of the\n      destination address within the original\
    \ packet.  If Segments Left\n      is equal to zero, the destination address is\
    \ in the Destination\n      Address field in the IPv6 header.  If Segments Left\
    \ is greater\n      than zero, the destination address is the last address\n \
    \     (Address[n]) in the Routing header.\n   The node then uses the value in\
    \ the MTU field in the Packet Too Big\n   message as a tentative PMTU value, and\
    \ compares the tentative PMTU to\n   the existing PMTU.  If the tentative PMTU\
    \ is less than the existing\n   PMTU estimate, the tentative PMTU replaces the\
    \ existing PMTU as the\n   PMTU value for the path.\n   The packetization layers\
    \ must be notified about decreases in the\n   PMTU.  Any packetization layer instance\
    \ (for example, a TCP\n   connection) that is actively using the path must be\
    \ notified if the\n   PMTU estimate is decreased.\n      Note: even if the Packet\
    \ Too Big message contains an Original\n      Packet Header that refers to a UDP\
    \ packet, the TCP layer must be\n      notified if any of its connections use\
    \ the given path.\n   Also, the instance that sent the packet that elicited the\
    \ Packet Too\n   Big message should be notified that its packet has been dropped,\
    \ even\n   if the PMTU estimate has not changed, so that it may retransmit the\n\
    \   dropped data.\n      Note: An implementation can avoid the use of an asynchronous\n\
    \      notification mechanism for PMTU decreases by postponing\n      notification\
    \ until the next attempt to send a packet larger than\n      the PMTU estimate.\
    \  In this approach, when an attempt is made to\n      SEND a packet that is larger\
    \ than the PMTU estimate, the SEND\n      function should fail and return a suitable\
    \ error indication.  This\n      approach may be more suitable to a connectionless\
    \ packetization\n      layer (such as one using UDP), which (in some implementations)\
    \ may\n      be hard to \"notify\" from the ICMP layer.  In this case, the normal\n\
    \      timeout-based retransmission mechanisms would be used to recover\n    \
    \  from the dropped packets.\n   It is important to understand that the notification\
    \ of the\n   packetization layer instances using the path about the change in\
    \ the\n   PMTU is distinct from the notification of a specific instance that a\n\
    \   packet has been dropped.  The latter should be done as soon as\n   practical\
    \ (i.e., asynchronously from the point of view of the\n   packetization layer\
    \ instance), while the former may be delayed until\n   a packetization layer instance\
    \ wants to create a packet.\n   Retransmission should be done for only for those\
    \ packets that are\n   known to be dropped, as indicated by a Packet Too Big message.\n"
- title: 5.3. Purging stale PMTU information
  contents:
  - "5.3. Purging stale PMTU information\n   Internetwork topology is dynamic; routes\
    \ change over time.  While the\n   local representation of a path may remain constant,\
    \ the actual\n   path(s) in use may change.  Thus, PMTU information cached by\
    \ a node\n   can become stale.\n   If the stale PMTU value is too large, this\
    \ will be discovered almost\n   immediately once a large enough packet is sent\
    \ on the path.  No such\n   mechanism exists for realizing that a stale PMTU value\
    \ is too small,\n   so an implementation should \"age\" cached values.  When a\
    \ PMTU value\n   has not been decreased for a while (on the order of 10 minutes),\
    \ the\n   PMTU estimate should be set to the MTU of the first-hop link, and the\n\
    \   packetization layers should be notified of the change.  This will\n   cause\
    \ the complete Path MTU Discovery process to take place again.\n      Note: an\
    \ implementation should provide a means for changing the\n      timeout duration,\
    \ including setting it to \"infinity\".  For\n      example, nodes attached to\
    \ an FDDI link which is then attached to\n      the rest of the Internet via a\
    \ small MTU serial line are never\n      going to discover a new non-local PMTU,\
    \ so they should not have to\n      put up with dropped packets every 10 minutes.\n\
    \   An upper layer must not retransmit data in response to an increase in\n  \
    \ the PMTU estimate, since this increase never comes in response to an\n   indication\
    \ of a dropped packet.\n   One approach to implementing PMTU aging is to associate\
    \ a timestamp\n   field with a PMTU value.  This field is initialized to a \"\
    reserved\"\n   value, indicating that the PMTU is equal to the MTU of the first\
    \ hop\n   link.  Whenever the PMTU is decreased in response to a Packet Too Big\n\
    \   message, the timestamp is set to the current time.\n   Once a minute, a timer-driven\
    \ procedure runs through all cached PMTU\n   values, and for each PMTU whose timestamp\
    \ is not \"reserved\" and is\n   older than the timeout interval:\n   - The PMTU\
    \ estimate is set to the MTU of the first hop link.\n   - The timestamp is set\
    \ to the \"reserved\" value.\n   - Packetization layers using this path are notified\
    \ of the increase.\n"
- title: 5.4. TCP layer actions
  contents:
  - "5.4. TCP layer actions\n   The TCP layer must track the PMTU for the path(s)\
    \ in use by a\n   connection; it should not send segments that would result in\
    \ packets\n   larger than the PMTU.  A simple implementation could ask the IP\
    \ layer\n   for this value each time it created a new segment, but this could\
    \ be\n   inefficient.  Moreover, TCP implementations that follow the \"slow-\n\
    \   start\" congestion-avoidance algorithm [CONG] typically calculate and\n  \
    \ cache several other values derived from the PMTU.  It may be simpler\n   to\
    \ receive asynchronous notification when the PMTU changes, so that\n   these variables\
    \ may be updated.\n   A TCP implementation must also store the MSS value received\
    \ from its\n   peer, and must not send any segment larger than this MSS, regardless\n\
    \   of the PMTU.  In 4.xBSD-derived implementations, this may require\n   adding\
    \ an additional field to the TCP state record.\n   The value sent in the TCP MSS\
    \ option is independent of the PMTU.\n   This MSS option value is used by the\
    \ other end of the connection,\n   which may be using an unrelated PMTU value.\
    \  See [IPv6-SPEC] sections\n   \"Packet Size Issues\" and \"Maximum Upper-Layer\
    \ Payload Size\" for\n   information on selecting a value for the TCP MSS option.\n\
    \   When a Packet Too Big message is received, it implies that a packet\n   was\
    \ dropped by the node that sent the ICMP message.  It is sufficient\n   to treat\
    \ this as any other dropped segment, and wait until the\n   retransmission timer\
    \ expires to cause retransmission of the segment.\n   If the Path MTU Discovery\
    \ process requires several steps to find the\n   PMTU of the full path, this could\
    \ delay the connection by many\n   round-trip times.\n   Alternatively, the retransmission\
    \ could be done in immediate response\n   to a notification that the Path MTU\
    \ has changed, but only for the\n   specific connection specified by the Packet\
    \ Too Big message.  The\n   packet size used in the retransmission should be no\
    \ larger than the\n   new PMTU.\n      Note: A packetization layer must not retransmit\
    \ in response to\n      every Packet Too Big message, since a burst of several\
    \ oversized\n      segments will give rise to several such messages and hence\
    \ several\n      retransmissions of the same data.  If the new estimated PMTU\
    \ is\n      still wrong, the process repeats, and there is an exponential\n  \
    \    growth in the number of superfluous segments sent.\n      This means that\
    \ the TCP layer must be able to recognize when a\n      Packet Too Big notification\
    \ actually decreases the PMTU that it\n      has already used to send a packet\
    \ on the given connection, and\n      should ignore any other notifications.\n\
    \   Many TCP implementations incorporate \"congestion avoidance\" and\n   \"slow-start\"\
    \ algorithms to improve performance [CONG].  Unlike a\n   retransmission caused\
    \ by a TCP retransmission timeout, a\n   retransmission caused by a Packet Too\
    \ Big message should not change\n   the congestion window.  It should, however,\
    \ trigger the slow-start\n   mechanism (i.e., only one segment should be retransmitted\
    \ until\n   acknowledgements begin to arrive again).\n   TCP performance can be\
    \ reduced if the sender's maximum window size is\n   not an exact multiple of\
    \ the segment size in use (this is not the\n   congestion window size, which is\
    \ always a multiple of the segment\n   size).  In many systems (such as those\
    \ derived from 4.2BSD), the\n   segment size is often set to 1024 octets, and\
    \ the maximum window size\n   (the \"send space\") is usually a multiple of 1024\
    \ octets, so the\n   proper relationship holds by default.  If Path MTU Discovery\
    \ is used,\n   however, the segment size may not be a submultiple of the send\
    \ space,\n   and it may change during a connection; this means that the TCP layer\n\
    \   may need to change the transmission window size when Path MTU\n   Discovery\
    \ changes the PMTU value.  The maximum window size should be\n   set to the greatest\
    \ multiple of the segment size that is less than or\n   equal to the sender's\
    \ buffer space size.\n"
- title: 5.5. Issues for other transport protocols
  contents:
  - "5.5. Issues for other transport protocols\n   Some transport protocols (such\
    \ as ISO TP4 [ISOTP]) are not allowed to\n   repacketize when doing a retransmission.\
    \  That is, once an attempt is\n   made to transmit a segment of a certain size,\
    \ the transport cannot\n   split the contents of the segment into smaller segments\
    \ for\n   retransmission.  In such a case, the original segment can be\n   fragmented\
    \ by the IP layer during retransmission.  Subsequent\n   segments, when transmitted\
    \ for the first time, should be no larger\n   than allowed by the Path MTU.\n\
    \   The Sun Network File System (NFS) uses a Remote Procedure Call (RPC)\n   protocol\
    \ [RPC] that, when used over UDP, in many cases will generate\n   payloads that\
    \ must be fragmented even for the first-hop link.  This\n   might improve performance\
    \ in certain cases, but it is known to cause\n   reliability and performance problems,\
    \ especially when the client and\n   server are separated by routers.\n   It is\
    \ recommended that NFS implementations use Path MTU Discovery\n   whenever routers\
    \ are involved.  Most NFS implementations allow the\n   RPC datagram size to be\
    \ changed at mount-time (indirectly, by\n   changing the effective file system\
    \ block size), but might require\n   some modification to support changes later\
    \ on.\n   Also, since a single NFS operation cannot be split across several UDP\n\
    \   datagrams, certain operations (primarily, those operating on file\n   names\
    \ and directories) require a minimum payload size that if sent in\n   a single\
    \ packet would exceed the PMTU.  NFS implementations should\n   not reduce the\
    \ payload size below this threshold, even if Path MTU\n   Discovery suggests a\
    \ lower value.  In this case the payload will be\n   fragmented by the IP layer.\n"
- title: 5.6. Management interface
  contents:
  - "5.6. Management interface\n   It is suggested that an implementation provide\
    \ a way for a system\n   utility program to:\n   - Specify that Path MTU Discovery\
    \ not be done on a given path.\n   - Change the PMTU value associated with a given\
    \ path.\n   The former can be accomplished by associating a flag with the path;\n\
    \   when a packet is sent on a path with this flag set, the IP layer does\n  \
    \ not send packets larger than the IPv6 minimum link MTU.\n   These features might\
    \ be used to work around an anomalous situation,\n   or by a routing protocol\
    \ implementation that is able to obtain Path\n   MTU values.\n   The implementation\
    \ should also provide a way to change the timeout\n   period for aging stale PMTU\
    \ information.\n"
- title: 6. Security Considerations
  contents:
  - "6. Security Considerations\n   This Path MTU Discovery mechanism makes possible\
    \ two denial-of-\n   service attacks, both based on a malicious party sending\
    \ false Packet\n   Too Big messages to a node.\n   In the first attack, the false\
    \ message indicates a PMTU much smaller\n   than reality.  This should not entirely\
    \ stop data flow, since the\n   victim node should never set its PMTU estimate\
    \ below the IPv6 minimum\n   link MTU.  It will, however, result in suboptimal\
    \ performance.\n   In the second attack, the false message indicates a PMTU larger\
    \ than\n   reality.  If believed, this could cause temporary blockage as the\n\
    \   victim sends packets that will be dropped by some router.  Within one\n  \
    \ round-trip time, the node would discover its mistake (receiving\n   Packet Too\
    \ Big messages from that router), but frequent repetition of\n   this attack could\
    \ cause lots of packets to be dropped.  A node,\n   however, should never raise\
    \ its estimate of the PMTU based on a\n   Packet Too Big message, so should not\
    \ be vulnerable to this attack.\n   A malicious party could also cause problems\
    \ if it could stop a victim\n   from receiving legitimate Packet Too Big messages,\
    \ but in this case\n   there are simpler denial-of-service attacks available.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   We would like to acknowledge the authors of and contributors\
    \ to\n   [RFC-1191], from which the majority of this document was derived.  We\n\
    \   would also like to acknowledge the members of the IPng working group\n   for\
    \ their careful review and constructive criticisms.\n"
- title: Appendix A - Comparison to RFC 1191
  contents:
  - "Appendix A - Comparison to RFC 1191\n   This document is based in large part\
    \ on RFC 1191, which describes\n   Path MTU Discovery for IPv4.  Certain portions\
    \ of RFC 1191 were not\n   needed in this document:\n   router specification \
    \   - Packet Too Big messages and corresponding\n                            \
    \ router behavior are defined in [ICMPv6]\n   Don't Fragment bit      - there\
    \ is no DF bit in IPv6 packets\n   TCP MSS discussion      - selecting a value\
    \ to send in the TCP MSS\n                             option is discussed in\
    \ [IPv6-SPEC]\n   old-style messages      - all Packet Too Big messages report\
    \ the\n                             MTU of the constricting link\n   MTU plateau\
    \ tables      - not needed because there are no old-style\n                  \
    \           messages\n"
- title: References
  contents:
  - "References\n   [CONG]      Van Jacobson.  Congestion Avoidance and Control. \
    \ Proc.\n               SIGCOMM '88 Symposium on Communications Architectures\
    \ and\n               Protocols, pages 314-329.  Stanford, CA, August, 1988.\n\
    \   [FRAG]      C. Kent and J. Mogul.  Fragmentation Considered Harmful.\n   \
    \            In Proc. SIGCOMM '87 Workshop on Frontiers in Computer\n        \
    \       Communications Technology.  August, 1987.\n   [ICMPv6]    Conta, A., and\
    \ S. Deering, \"Internet Control Message\n               Protocol (ICMPv6) for\
    \ the Internet Protocol Version 6\n               (IPv6) Specification\", RFC\
    \ 1885, December 1995.\n   [IPv6-SPEC] Deering, S., and R. Hinden, \"Internet\
    \ Protocol, Version\n               6 (IPv6) Specification\", RFC 1883, December\
    \ 1995.\n   [ISOTP]     ISO.  ISO Transport Protocol Specification: ISO DP 8073.\n\
    \               RFC 905, SRI Network Information Center, April, 1984.\n   [ND]\
    \        Narten, T., Nordmark, E., and W. Simpson, \"Neighbor\n              \
    \ Discovery for IP Version 6 (IPv6)\", Work in Progress.\n   [RFC-1191]  Mogul,\
    \ J., and S. Deering, \"Path MTU Discovery\",\n               RFC 1191, November\
    \ 1990.\n   [RPC]       Sun Microsystems, Inc., \"RPC: Remote Procedure Call\n\
    \               Protocol\", RFC 1057, SRI Network Information Center,\n      \
    \         June, 1988.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Jack McCann\n   Digital Equipment Corporation\n   110\
    \ Spitbrook Road, ZKO3-3/U14\n   Nashua, NH 03062\n   Phone: +1 603 881 2608\n\
    \   Fax:   +1 603 881 0120\n   Email: mccann@zk3.dec.com\n   Stephen E. Deering\n\
    \   Xerox Palo Alto Research Center\n   3333 Coyote Hill Road\n   Palo Alto, CA\
    \ 94304\n   Phone: +1 415 812 4839\n   Fax:   +1 415 812 4471\n   EMail: deering@parc.xerox.com\n\
    \   Jeffrey Mogul\n   Digital Equipment Corporation Western Research Laboratory\n\
    \   250 University Avenue\n   Palo Alto, CA 94301\n   Phone: +1 415 617 3304\n\
    \   EMail: mogul@pa.dec.com\n"
