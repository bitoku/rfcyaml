- title: __initial_text__
  contents:
  - "                  Payload Format for JPEG 2000 Video:\n          Extensions for\
    \ Scalability and Main Header Recovery\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   This memo describes extended uses for the payload header in \"RTP\n\
    \   Payload Format for JPEG 2000 Video Streams\" as specified in RFC 5371,\n \
    \  for better support of JPEG 2000 features such as scalability and main\n   header\
    \ recovery.\n   This memo must be accompanied with a complete implementation of\
    \ \"RTP\n   Payload Format for JPEG 2000 Video Streams\".  That document is a\n\
    \   complete description of the payload header and signaling, this\n   document\
    \ only describes additional processing for the payload header.\n   There is an\
    \ additional media type and Session Description Protocol\n   (SDP) marker signaling\
    \ for implementations of this document.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  3\n     1.1.  Description of the Mechanisms  . . . . . . . . .\
    \ . . . . .  3\n       1.1.1.  Main Header Compensation . . . . . . . . . . .\
    \ . . . .  3\n       1.1.2.  Priority Table . . . . . . . . . . . . . . . . .\
    \ . . .  3\n     1.2.  Motivations for Priority Field Coding  . . . . . . . .\
    \ . .  4\n       1.2.1.  Scenario: Just Enough Resolution . . . . . . . . . .\
    \ .  4\n       1.2.2.  Scenario: Multiple Clients, Single Source  . . . . . .\
    \  4\n     1.3.  Conventions Used in This Document  . . . . . . . . . . . .  4\n\
    \   2.  Payload Format Enhanced Processing . . . . . . . . . . . . . .  5\n  \
    \   2.1.  Enhanced Processing Markers  . . . . . . . . . . . . . . .  5\n   3.\
    \  Priority Mapping Table . . . . . . . . . . . . . . . . . . . .  6\n     3.1.\
    \  Packet-Number-Based Ordering . . . . . . . . . . . . . . .  7\n     3.2.  Progression-Based\
    \ Ordering . . . . . . . . . . . . . . . .  7\n     3.3.  Layer-Based Ordering\
    \ . . . . . . . . . . . . . . . . . . .  9\n     3.4.  Resolution-Based Ordering\
    \  . . . . . . . . . . . . . . . .  9\n     3.5.  Component-Based Ordering . .\
    \ . . . . . . . . . . . . . . . 10\n   4.  JPEG 2000 Main Header Compensation\
    \ Scheme  . . . . . . . . . . 10\n     4.1.  Sender Processing  . . . . . . .\
    \ . . . . . . . . . . . . . 11\n     4.2.  Receiver Processing  . . . . . . .\
    \ . . . . . . . . . . . . 11\n   5.  Media Type Registration  . . . . . . . .\
    \ . . . . . . . . . . . 11\n   6.  SDP Parameters . . . . . . . . . . . . . .\
    \ . . . . . . . . . . 12\n     6.1.  Mapping of the Optional Parameters to SDP\
    \  . . . . . . . . 12\n     6.2.  Usage with the SDP Offer/Answer Model  . . .\
    \ . . . . . . . 13\n       6.2.1.  Examples . . . . . . . . . . . . . . . . .\
    \ . . . . . . 13\n   7.  IANA Considerations  . . . . . . . . . . . . . . . .\
    \ . . . . . 16\n   8.  Security Considerations  . . . . . . . . . . . . . . .\
    \ . . . . 16\n   9.  Congestion Control . . . . . . . . . . . . . . . . . . .\
    \ . . . 16\n   10. Normative References . . . . . . . . . . . . . . . . . . .\
    \ . . 16\n   Appendix A.  Sample Headers in Detail  . . . . . . . . . . . . .\
    \ . 17\n     A.1.  Sample 1: Progressive Image with Single Tile, 3500\n      \
    \     Bytes (i.e., thumbnail)  . . . . . . . . . . . . . . . . . 17\n     A.2.\
    \  Sample 2: Image with 4 Tiles . . . . . . . . . . . . . . . 19\n     A.3.  Sample\
    \ 3: Packing Multiple Tiles in Single Payload,\n           Fragmented Header.\
    \  No Header Compensation,\n           Progressive Image  . . . . . . . . . .\
    \ . . . . . . . . . . 20\n     A.4.  Sample 4: Interlace Image, Single Tile .\
    \ . . . . . . . . . 22\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document is an extension of \"RTP Payload Format for\
    \ JPEG 2000\n   Video Streams\" [RFC5371].  These are additional mechanisms that\
    \ can\n   be used with certain parts of the header in [RFC5371] to support JPEG\n\
    \   2000 features such as scalability and a main header compensation\n   method.\
    \  These mechanisms are described in detail in this document.\n   These are optional\
    \ extensions to RFC 5371 [RFC5371], which one may\n   use to make better use of\
    \ JPEG 2000 features.  These extensions are\n   not required for any implementations\
    \ of RFC 5371 [RFC5371].\n"
- title: 1.1.  Description of the Mechanisms
  contents:
  - '1.1.  Description of the Mechanisms

    '
- title: 1.1.1.  Main Header Compensation
  contents:
  - "1.1.1.  Main Header Compensation\n   JPEG 2000 image header contains essential\
    \ decoding information for\n   the decoder.  If a JPEG 2000 decoder receives JPEG\
    \ 2000 image data\n   without a JPEG 2000 image header, it could not decode the\
    \ JPEG 2000\n   image data properly.  Encoders for JPEG 2000 video very rarely\
    \ change\n   encoding parameters between successive frames.  So, the possibility\n\
    \   of the decoder successively decoding the new JPEG 2000 image data\n   using\
    \ a prior JPEG 2000 image header is very high in this situation.\n   The main\
    \ header compensation scheme used in this document exploits\n   the fact that\
    \ successive JPEG 2000 video images rarely change\n   encoding parameters.  It\
    \ requires receivers to save past JPEG 2000\n   image headers to use in case of\
    \ missing JPEG 2000 image headers in\n   the future.  Signaling of changes to\
    \ the JPEG 2000 image header is\n   done through the payload header.  When the\
    \ mh_id value of the payload\n   header changes, receivers should save the new\
    \ JPEG 2000 header to use\n   for main header recovery.\n"
- title: 1.1.2.  Priority Table
  contents:
  - "1.1.2.  Priority Table\n   JPEG 2000 codestream has rich functionality built\
    \ into it so decoders\n   can easily handle scalable delivery or progressive transmission.\n\
    \   Progressive transmission allows images to be reconstructed with\n   increasing\
    \ pixel accuracy or spatial resolution.  This feature allows\n   the reconstruction\
    \ of images with different resolutions and pixel\n   accuracy, for different target\
    \ devices.  A single image source can\n   provide a codestream that is easily\
    \ processed for smaller image\n   display devices.\n   JPEG 2000 packets contain\
    \ all compressed image data from a specific\n   layer, component, resolution level,\
    \ and/or precinct.  The order in\n   which these JPEG 2000 packets are found in\
    \ the codestream is called\n   the progression order.  The ordering of the JPEG\
    \ 2000 packets can\n   progress along four axes: layer, component, resolution,\
    \ and precinct\n   (or position).\n   Providing a priority field to indicate the\
    \ importance of data\n   contained in a given RTP packet can aid in usage of JPEG\
    \ 2000\n   progressive and scalable functions.\n"
- title: 1.2.  Motivations for Priority Field Coding
  contents:
  - "1.2.  Motivations for Priority Field Coding\n   The JPEG 2000 coding scheme allows\
    \ one to reorder the codestream in\n   many ways.  Even when the coding scheme\
    \ is determined and arranged by\n   the encoder, a decoder can still re-arrange\
    \ the code stream on the\n   fly to suit decode parameters such as re-arranging\
    \ from resolution\n   progressive to quality progressive.\n   Using the priority\
    \ field coding, the decoder gains insight into the\n   codestream without access\
    \ to the full codestream and exposes features\n   of JPEG 2000 to a higher level.\n\
    \   The authors found the scenarios below to utilize this field.  The\n   priority\
    \ field allows more information about the image to be sent\n   without more signaling\
    \ between sender and receivers to leverage JPEG\n   2000 capabilities.\n"
- title: '1.2.1.  Scenario: Just Enough Resolution'
  contents:
  - "1.2.1.  Scenario: Just Enough Resolution\n   The scenario is when rapid scene\
    \ access is more important than higher\n   image quality.  By using the priority\
    \ field, the receiver can decode\n   for its own quality level.  If the sender\
    \ cannot determine the\n   receiver's resolution, the receiver can select which\
    \ parts of the\n   codestream to be decoded or loaded by using the priority field.\n"
- title: '1.2.2.  Scenario: Multiple Clients, Single Source'
  contents:
  - "1.2.2.  Scenario: Multiple Clients, Single Source\n   In a multicast environment,\
    \ there are clients with better visual\n   capability than others (i.e., TV conference\
    \ versus Mobile).  The\n   respective clients can use the priority field to determine\
    \ which\n   packets are vital for their own visual presentation.  The sender only\n\
    \   has to do work on the priority field to optimally serve all the\n   clients\
    \ while only managing a single visual stream.\n"
- title: 1.3.  Conventions Used in This Document
  contents:
  - "1.3.  Conventions Used in This Document\n   The key words \"MUST\", \"MUST NOT\"\
    , \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in RFC 2119.  [RFC2119].\n"
- title: 2.  Payload Format Enhanced Processing
  contents:
  - '2.  Payload Format Enhanced Processing

    '
- title: 2.1.  Enhanced Processing Markers
  contents:
  - "2.1.  Enhanced Processing Markers\n   This section of the document describes\
    \ additional usage in the values\n   of mh_id and priority fields and interpretation\
    \ that differ from RFC\n   5371 [RFC5371].  Implementations of this document should\
    \ follow RFC\n   5371 [RFC5371] first then add additional header processing as\n\
    \   described in this document.  Implementations following this document\n   are\
    \ expected to interoperate with implementations of [RFC5371] and\n   this document\
    \ as well.\n   The RTP payload header format for JPEG 2000 video stream is as\n\
    \   follows:\n    0                   1                   2                  \
    \ 3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |tp |MHF|mh_id|T|     priority  |           tile number         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |reserved       |             fragment offset                   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \             Figure 1: RTP Payload Header Format for JPEG 2000\n   mh_id (Main\
    \ Header Identification): 3 bits\n      Main header identification value.  This\
    \ is used for JPEG 2000 main\n      header recovery.\n      The initial value\
    \ of mh_id MUST be 1 at the beginning of the\n      session.\n      The same mh_id\
    \ value is used as long as the coding parameters\n      described in the main\
    \ header remains unchanged between frames.\n      The mh_id value MUST be incremented\
    \ by 1 every time a new main\n      header is transmitted.  Once the mh_id value\
    \ becomes greater than\n      7, it SHOULD roll over to 1.\n      When mh_id is\
    \ 0, it has special usage for the receiver.  This\n      special usage is described\
    \ in Section 4.2 of this document.\n      Senders should follow Section 4.1 of\
    \ this document for proper\n      mh_id assignment and usage.\n   priority: 8\
    \ bits\n      The priority field indicates the importance of the JPEG 2000\n \
    \     packet included in the payload.  Typically, a higher priority\n      value\
    \ is set in the packets containing JPEG 2000 packets\n      containing the lower\
    \ sub-bands.\n      Special values of priority:\n      0: This is reserved for\
    \ payloads that contain a header (main or\n         tile part header).  This is\
    \ considered the most important.\n      1 to 255:  These values decrease in importance\
    \ as the values\n         increase (i.e., 1 is more important than 2, etc.). \
    \ Applying\n         priority values should correlate directly to the JPEG 2000\n\
    \         codestream in importance.\n      The lower the priority value, the higher\
    \ the importance.  A\n      priority value of 0 is the highest importance and\
    \ 255 is the\n      lowest importance.  We define the priority value 0 as a special\n\
    \      priority value for the headers (the main header or tile-part\n      header).\
    \  If any headers (the main header or tile-part header) are\n      packed into\
    \ the RTP payload, the sender MUST set the priority\n      value to 0.\n     \
    \ Assignment of the values is described in Section 3.\n"
- title: 3.  Priority Mapping Table
  contents:
  - "3.  Priority Mapping Table\n   For the progression order, the priority value\
    \ for each JPEG 2000\n   packet is given by the priority mapping table.\n   This\
    \ document specify several commonly used priority mapping tables,\n   pre-defined\
    \ priority mapping tables: packet-number-based (default),\n   progression-based,\
    \ layer-based, resolution-based, and component-\n   based.\n   Packet number priority\
    \ mapping is REQUIRED to be supported by clients\n   implementing this specification.\
    \  Other priority mapping tables\n   (progression, layer, resolution, and component-based)\
    \ are OPTIONAL to\n   implementations of this specification.\n   Rules that all\
    \ implementations of this specification MUST follow in\n   all priority modes:\n\
    \   o  When there is a header in the packet with a JPEG 2000 packet, the\n   \
    \   sender MUST set the payload packet priority value to 0.\n   o  When there\
    \ are multiple JPEG 2000 packets in the same RTP payload\n      packet, the sender\
    \ MUST set the payload packet priority value to\n      the lowest JPEG 2000 packet\
    \ (i.e., if JPEG 2000 packets with\n      priority: 5,6,7 are packed into a single\
    \ payload, the priority\n      value will be 5).\n"
- title: 3.1.  Packet-Number-Based Ordering
  contents:
  - "3.1.  Packet-Number-Based Ordering\n   Packet-number-based ordering assigns the\
    \ payload packet priority\n   value from the \"JPEG 2000 packet value\" (note:\
    \ JPEG 2000 codestreams\n   are stored in units of packets and each packet has\
    \ a value).  This\n   method is the default method for assigning priority value.\
    \  All\n   implementations of this specification MUST support this method.\n \
    \  If the JPEG 2000 codestream packet value is greater than 255, the\n   sender\
    \ MUST set the payload priority value to 255.\n"
- title: 3.2.  Progression-Based Ordering
  contents:
  - "3.2.  Progression-Based Ordering\n   The sender will assign the payload packet\
    \ priority value only based\n   on layer, resolution, and component ordering of\
    \ the codestream.\n   Progression-based ordering can assign the different priority\
    \ values\n   in the same layer or the resolution level, which it cannot do in\
    \ the\n   layer-based ordering or resolution-based ordering.\n   Unlike the packet-number-based\
    \ ordering, the progression-based\n   ordering does not assign a value in the\
    \ position level, which saves\n   the priority values.  The priority value in\
    \ the position level is not\n   so important because a receiver could recognize\
    \ the position by\n   checking the tile number field.  Therefore, the progression-based\n\
    \   ordering would be useful.\n   The general algorithm is that the ordering is\
    \ based on the triple\n   <layer, resolution, component> and the minimum priority\
    \ is 1.  So, if\n   the codestream is constructed of L layers (layer value ranges\
    \ from 0\n   to L-1), R resolutions (resolution value ranges from 0 to R-1), and\
    \ C\n   components (component value ranges from 0 to C-1), then for a triple\n\
    \   <lval, rval, cval>:\n      the priority value of the codestream in LRCP order\
    \ is calculated\n      as:\n         priority = 1 + cval + (C * rval) + (C * R\
    \ * lval)\n      the priority value of the codestream in RLCP order is calculated\n\
    \      as:\n         priority = 1 + cval + (C * lval) + (C * L * rval)\n     \
    \ the priority value of the codestream in RPCL order is calculated\n      as:\n\
    \         priority = 1 + lval + (L * cval) + (L * C * rval)\n      the priority\
    \ value of which codestream in PCRL order is calculated\n      as:\n         priority\
    \ = 1 + lval + (L * rval) + (L * R * cval)\n      the priority value of which\
    \ codestream in CPRL order is calculated\n      as:\n         priority = 1 + lval\
    \ + (L * rval) + (L * R * cval)\n   For example:\n   If the codestream is ordered\
    \ in LRCP (Layer, Resolution, Component,\n   Position) with 1 layer (L=1), 2 resolutions\
    \ (R=2), 3 components\n   (C=3), and 2 positions, the priority value should be\
    \ (1 + cval +\n   3*rval + 6*lval).  Then an example would have packet numbering\
    \ as so:\n      All the packets in:\n         layer.........0\n         resolution....0\n\
    \         component.....0\n         position......0 or 1\n      then the packet\
    \ priority value : 1\n      All the packets in:\n         layer.........0\n  \
    \       resolution....0\n         component.....1\n         position......0 or\
    \ 1\n      then the packet priority value : 2\n      All the packets in:\n   \
    \      layer.........0\n         resolution....0\n         component.....2\n \
    \        position......0 or 1\n      then the packet priority value : 3\n    \
    \  All the packets in:\n         layer.........0\n         resolution....1\n \
    \        component.....0\n         position......0 or 1\n      then the packet\
    \ priority value : 4\n      All the packets in:\n         layer.........0\n  \
    \       resolution....1\n         component.....1\n         position......0 or\
    \ 1\n      then the packet priority value : 5\n"
- title: 3.3.  Layer-Based Ordering
  contents:
  - "3.3.  Layer-Based Ordering\n   The layer-based priority mapping table simplifies\
    \ the default mapping\n   to just matching JPEG 2000 packets together from the\
    \ same layer.\n   For example:\n      All the packets in layer 0 : packet priority\
    \ value : 1\n      All the packets in layer 1 : packet priority value : 2\n  \
    \    All the packets in layer 2 : packet priority value : 3\n      ...\n     \
    \ All the packets in layer n : packet priority value : n+1\n      All the packets\
    \ in layer 255 : packet priority value : 255\n"
- title: 3.4.  Resolution-Based Ordering
  contents:
  - "3.4.  Resolution-Based Ordering\n   Resolution-based priority mapping table is\
    \ similar to the layer-based\n   order but for JPEG 2000 packets of the same resolution.\n\
    \   For example:\n      All the packets in resolution 0 : packet priority value\
    \ : 1\n      All the packets in resolution 1 : packet priority value : 2\n   \
    \   All the packets in resolution 2 : packet priority value : 3\n      ...\n \
    \     All the packets in resolution n : packet priority value : n+1\n      All\
    \ the packets in resolution 255 : packet priority value : 255\n"
- title: 3.5.  Component-Based Ordering
  contents:
  - "3.5.  Component-Based Ordering\n   Component-based priority mapping table is\
    \ mapping together JPEG 2000\n   components of the same component.\n   For example:\n\
    \      All the packets in component 0 : packet priority value : 1\n      All the\
    \ packets in component 1 : packet priority value : 2\n      All the packets in\
    \ component 2 : packet priority value : 3\n      ...\n      All the packets in\
    \ component n : packet priority value : n+1\n      All the packets in component\
    \ 255 : packet priority value : 255\n"
- title: 4.  JPEG 2000 Main Header Compensation Scheme
  contents:
  - "4.  JPEG 2000 Main Header Compensation Scheme\n   The mh_id field of the payload\
    \ header is used to indicate whether the\n   encoding parameters of the main header\
    \ are the same as the encoding\n   parameters of the previous frame.  The same\
    \ value is set in mh_id of\n   the RTP packet in the same frame.  The mh_id and\
    \ encode parameters\n   are not associated with each other as 1:1, but they are\
    \ used to\n   indicate whether or not the encode parameters of the previous frame\n\
    \   are the same in the event of a lost header.\n   The mh_id field value SHOULD\
    \ be saved from previous frames to be used\n   to recover the current frame's\
    \ main header.  If the mh_id of the\n   current frame has the same value as the\
    \ mh_id value of the previous\n   frame, the previous frame's main header MAY\
    \ be used to decode the\n   current frame, in case of a lost header in the current\
    \ frame.\n   The sender MUST increment mh_id when parameters in the header change\n\
    \   and send a new main header accordingly.\n   The receiver MAY use the mh_id\
    \ and MAY retain the header for such\n   compensation.\n"
- title: 4.1.  Sender Processing
  contents:
  - "4.1.  Sender Processing\n   The sender MUST transmit RTP packets with the same\
    \ mh_id value if the\n   encoder parameters of the current frame are the same\
    \ as the previous\n   frame.  The encoding parameters are the fixed information\
    \ marker\n   segment (SIZ marker) and functional marker segments (COD, COC, RGN,\n\
    \   QCD, QCC, and POC) specified in JPEG 2000 Part 1, Annex A\n   [JPEG2000Pt_1].\n\
    \   If the encode parameters changes, the sender transmitting RTP packets\n  \
    \ MUST increment the mh_id value by one, but when the mh_id value\n   becomes\
    \ greater than 7, a sender MUST set the mh_id value back to 1.\n"
- title: 4.2.  Receiver Processing
  contents:
  - "4.2.  Receiver Processing\n   When the receiver receives the main header completely,\
    \ the RTP\n   sequence number, the mh_id, and the main header should be saved.\n\
    \   Only the last main header that was received completely SHOULD be\n   saved.\
    \  When the mh_id value is 0, the receiver SHOULD NOT save the\n   header.\n \
    \  When the main header is not received, the receiver may compare the\n   current\
    \ payload header's mh_id value with the previous saved mh_id\n   value.  If the\
    \ values match, decoding may be performed by using the\n   previously saved main\
    \ header.\n   If the mh_id field is set to 0, the receiver MUST NOT save the main\n\
    \   header and MUST NOT compensate for lost headers.\n   If the mh_id value changes,\
    \ receivers SHOULD save the current header\n   and save the new mh_id value. \
    \ The old saved header should be deleted\n   from storage.\n   Also, if the decoder\
    \ detects an inconsistency between the header and\n   payload, it is recommended\
    \ to clear the saved mh_id and the saved\n   main header.  Please see Section\
    \ 8 for more explanation.\n"
- title: 5.  Media Type Registration
  contents:
  - "5.  Media Type Registration\n   This document extends the associated media type\
    \ \"video/jpeg2000\" from\n   RFC 5371 [RFC5371].  Here are additional optional\
    \ parameters.\n   Additional optional parameters:\n      mhc:  Main Header Compensation.\
    \  This option is used when a sender\n         and/or receiver is utilizing the\
    \ Main Header Compensation\n         technique as specified in this document.\
    \  Acceptable values\n         when using the Main Header Compensation technique\
    \ is \"1\";\n         otherwise, it should be \"0\".\n         This is a list\
    \ of options to be included when the sender or\n         receiver is utilizing\
    \ the priority table option as specified in\n         this document.\n      pt:\
    \  Priority Table.  This option is followed by a comma-separated\n         list\
    \ of pre-defined priority table definitions to be used by\n         sender or\
    \ receiver.\n         The option appearing front most in the option line is the\
    \ most\n         important and the next are of decreasing importance.\n      \
    \      Acceptable values:\n            progression:  this table follows the progression\
    \ ordering of\n               the codestream.\n            layer:  this table\
    \ follows the layer ordering of the\n               codestream.\n            resolution:\
    \  this table follows the resolution ordering of\n               the codestream.\n\
    \            component:  this table follows the component ordering of the\n  \
    \             codestream.\n            default:  this table follows the packet\
    \ ordering of the\n               codestream.\n"
- title: 6.  SDP Parameters
  contents:
  - '6.  SDP Parameters

    '
- title: 6.1.  Mapping of the Optional Parameters to SDP
  contents:
  - "6.1.  Mapping of the Optional Parameters to SDP\n   The new optional parameters\
    \ mhc and pt, if presented, MUST be\n   included in the \"a=fmtp\" line of SDP.\
    \  These parameters are expressed\n   as a media type string, in the form of a\
    \ semicolon-separated list of\n   parameter=value pairs.\n"
- title: 6.2.  Usage with the SDP Offer/Answer Model
  contents:
  - "6.2.  Usage with the SDP Offer/Answer Model\n   In addition to the SDP Offer/Answer\
    \ section in RFC 5371 [RFC5371]:\n   When offering JPEG 2000 over RTP using SDP\
    \ in an Offer/Answer model\n   [RFC3264], the following rules and limitations\
    \ apply:\n   o  All parameters MUST have an acceptable value for that parameter.\n\
    \   o  All parameters MUST correspond to the parameters of the payload.\n   o\
    \  If the optional parameter \"mhc\" is used, it MUST appear in the\n      offer\
    \ with value \"1\", and if accepted, it SHOULD appear in the\n      answer.\n\
    \   o  If the optional parameter \"pt\" is used, it MUST appear in the\n     \
    \ offer containing a complete comma-separated list indicating which\n      priority\
    \ table definitions the sender supports.  If accepted, it\n      SHOULD appear\
    \ in the answer containing a single priority table\n      definition selected\
    \ from the offer.\n   o  If the optional parameter \"mhc\" is used, it MUST appear\
    \ in the\n      offer with value \"1\", and if accepted, it MUST appear in the\n\
    \      answer.  If the optional parameter \"pt\" is used, it MUST appear in\n\
    \      the offer containing a complete comma-separated list indicating\n     \
    \ which priority table definitions the sender supports.  If\n      accepted, it\
    \ MUST appear in the answer containing a single\n      priority table definition\
    \ selected from the offer.\n   o  In a multicast environment:\n      *  Senders\
    \ should send out one option for a priority table\n         definition for everyone\
    \ in the group.\n      *  Even if a single client in the group does not support\
    \ the\n         extensions outlined in this document, senders MAY use these\n\
    \         mechanisms.  A receiver that doesn't support the mechanisms\n      \
    \   would safely ignore the values.in mh_id and priority field.\n"
- title: 6.2.1.  Examples
  contents:
  - "6.2.1.  Examples\n   Offer/Answer example exchanges are provided.\n"
- title: 6.2.1.1.  Example 1
  contents:
  - "6.2.1.1.  Example 1\n   Alice offers Main Header Compensation functionality,\
    \ YCbCr 422 color\n   space, interlace image with 720-pixel width and 480-pixel\
    \ height, and\n   several priority table options (default, progression, layer,\n\
    \   resolution, component) as below:\n      v=0\n      o=alice 2890844526 2890844526\
    \ IN IP4 host.example\n      s=\n      c=IN IP4 host.example\n      t=0 0\n  \
    \    m=video 49170 RTP/AVP 98\n      a=rtpmap:98 jpeg2000/90000\n      a=fmtp:98\
    \ mhc=1; sampling=YCbCr-4:2:2; interlace=1;\n      pt=default,progression,layer,resolution,\
    \ component;\n      width=720;height=480\n   Bob accepts Main Header Compensation\
    \ functionality, YCbCr-4:2:2 color\n   space, interlace image, default mapping\
    \ table and replies:\n      v=0\n      o=bob 2890844730 2890844731 IN IP4 host.example\n\
    \      s=\n      c=IN IP4 host.example\n      t=0 0\n      m=video 49920 RTP/AVP\
    \ 98\n      a=rtpmap:98 jpeg2000/90000\n      a=fmtp:98 mhc=1; sampling=YCbCr-4:2:2;interlace=1;\n\
    \      pt=default;width=720;height=480\n"
- title: 6.2.1.2.  Example 2
  contents:
  - "6.2.1.2.  Example 2\n   Alice offers Main Header Compensation, YCbCr 420 color\
    \ space,\n   progressive image with 320-pixel width and 240-pixel height, and\n\
    \   layer priority table options as below:\n      v=0\n      o=alice 2890844526\
    \ 2890844526 IN IP4 host.example\n      s=\n      c=IN IP4 host.example\n    \
    \  t=0 0\n      m=video 49170 RTP/AVP 98\n      a=rtpmap:98 jpeg2000/90000\n \
    \     a=fmtp:98 mhc=1; sampling=YCbCr-4:2:0;\n      pt=layer;width=320;height=240\n\
    \   Bob does not accept Main Header Compensation functionality but\n   accepts\
    \ YCbCr-4:2:0 color space, layer-based priority mapping and\n   replies:\n   \
    \   v=0\n      o=bob 2890844730 2890844731 IN IP4 host.example\n      s=\n   \
    \   c=IN IP4 host.example\n      t=0 0\n      m=video 49920 RTP/AVP 98\n     \
    \ a=rtpmap:98 jpeg2000/90000\n      a=fmtp:98 mhc=0; sampling=YCbCr-4:2:0;\n \
    \     pt=layer;width=320;height=240\n"
- title: 6.2.1.3.  Example 3
  contents:
  - "6.2.1.3.  Example 3\n   Alice offers 27 MHz timestamp, Main Header Compensation,\
    \ YCbCr 420\n   color space, progressive image with 320-pixel width and 240-pixel\n\
    \   height, and layer priority table options as below:\n      v=0\n      o=alice\
    \ 2890844526 2890844526 IN IP4 host.example\n      s=\n      c=IN IP4 host.example\n\
    \      t=0 0\n      m=video 49170 RTP/AVP 98 99\n      a=rtpmap:98 jpeg2000/27000000\n\
    \      a=rtpmap:99 jpeg2000/90000\n      a=fmtp:98 mhc=1; sampling=YCbCr-4:2:0;\n\
    \      pt=layer;width=320;height=240\n      a=fmtp:99 mhc=1; sampling=YCbCr-4:2:0;\n\
    \      pt=layer;width=320;height=240\n   Bob can accept payload type with 27 MHz\
    \ timestamp, and does not\n   accept Main Header Compensation functionality but\
    \ accepts YCbCr-4:2:0\n   color space, layer-based priority mapping and replies:\n\
    \      v=0\n      o=bob 2890844730 2890844731 IN IP4 host.example\n      s=\n\
    \      c=IN IP4 host.example\n      t=0 0\n      m=video 49920 RTP/AVP 98\n  \
    \    a=rtpmap:98 jpeg2000/27000000\n      a=fmtp:98 mhc=0; sampling=YCbCr-4:2:0;\n\
    \      pt=layer;width=320;height=240\n"
- title: 7.  IANA Considerations
  contents:
  - "7.  IANA Considerations\n   This document extends the associated media type \"\
    video/jpeg2000\" from\n   5371 [RFC5371].  Additional parameters are specified\
    \ in Section 5 of\n   this document.\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   Please refer to Section 6 of RFC 5371 [RFC5371]\
    \ for Security\n   Considerations regarding this RTP format.  The security issues\n\
    \   regarding enhanced mechanisms presented in this document are\n   discussed\
    \ in that section.\n   The mh_id field can identify a maximum of 7 different main\
    \ headers.\n   If severe packet loss (either random or intentionally introduced\
    \ by\n   an attacker) causes 6 successive updates to the main header to be\n \
    \  lost, the decoder will attempt decompression using an incorrect main\n   header.\
    \  Even if the incorrect main header is passed, the standard\n   JPEG 2000 decoder\
    \ could detect inconsistency of the codestream and\n   process it properly.  It\
    \ is recommended to clear the saved mh_id and\n   the saved main header if the\
    \ decoder detects such an inconsistency.\n"
- title: 9.  Congestion Control
  contents:
  - "9.  Congestion Control\n   Please refer to Section 7 of RFC 5371 [RFC5371] for\
    \ Congestion\n   Control regarding this RTP format.\n"
- title: 10.  Normative References
  contents:
  - "10.  Normative References\n   [RFC5371]       Futemma, S., Leung, A., and E.\
    \ Itakura, \"RTP Payload\n                   Format for JPEG 2000 Video Streams\"\
    , RFC 5371,\n                   October 2008.\n   [RFC2119]       Bradner, S.,\
    \ \"Key words for use in RFCs to Indicate\n                   Requirement Levels\"\
    , BCP 14, RFC 2119, March 1997.\n   [JPEG2000Pt_1]  ISO/IEC JTC1/SC29, ISO/IEC\
    \ 15444-1 | ITU-T Rec.\n                   T.800, \"Information Technology - JPEG\
    \ 2000 Image\n                   Coding System -  Part 1: Core Coding System\"\
    ,\n                   December 2000.\n   [RFC3264]       Rosenberg, J. and H.\
    \ Schulzrinne, \"An Offer/Answer\n                   Model with Session Description\
    \ Protocol (SDP)\",\n                   RFC 3264, June 2002.\n"
- title: Appendix A.  Sample Headers in Detail
  contents:
  - "Appendix A.  Sample Headers in Detail\n   The following figures are sample RTP\
    \ headers demonstrating values\n   that should appear in the RTP header.  The\
    \ packet priority is Packet-\n   Number-Based Priority.\n   For reference, the\
    \ payload header is as follows:\n    0                   1                   2\
    \                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\
    \ 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |tp |MHF|mh_id|T|     priority  |           tile number         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |reserved       |             fragment offset                   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                    Figure 2: JPEG 2000 Payload Header\n"
- title: 'A.1.  Sample 1: Progressive Image with Single Tile, 3500 Bytes (i.e.,'
  contents:
  - "A.1.  Sample 1: Progressive Image with Single Tile, 3500 Bytes (i.e.,\n     \
    \ thumbnail)\n   First Packet: This packet will have the whole main header 210\
    \ bytes\n    0                   1                   2                   3\n \
    \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | 0 | 3 |  1  |1|       0       |               0               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |       0       |                       0                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |FF4F FF51 002F 0000                   ....                     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                Figure 3: Header Sample 1-1 (First Packet)\n   Second Packet:\
    \ This packet will have a tile header and the first tile\n   part LLband 1500\
    \ bytes\n    0                   1                   2                   3\n \
    \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | 0 | 0 |  1  |0|       1       |               0               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |       0       |                      210                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |FF90 000A 0000 0000 2DB3  0001 FF93   ....                     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                Figure 4: Header Sample 1-2 (Second Packet)\n   Third Packet:\
    \ This packet will have the next part in the tile, no\n   tile header 1500 bytes\n\
    \    0                   1                   2                   3\n    0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | 0 | 0 |  1  |0|       2       |               0               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |       0       |                     1710                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |E841 4526 4556 9850 C2EA              ....                     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                Figure 5: Header Sample 1-3 (Third Packet)\n   Fourth Packet:\
    \ Last packet for the image 290 bytes\n    0                   1             \
    \      2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\
    \ 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | 0 | 0 |  1  |0|       3       |               0               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |       0       |                     3210                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |A55D 8B73 3B25 25C7 B9EB ....                         2FBE B153|\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                Figure 6: Header Sample 1-4 (Fourth Packet)\n"
- title: 'A.2.  Sample 2: Image with 4 Tiles'
  contents:
  - "A.2.  Sample 2: Image with 4 Tiles\n   First Packet: This packet will have the\
    \ whole main header 210 bytes\n    0                   1                   2 \
    \                  3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\
    \ 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | 0 | 3 |  1  |1|       0       |               0               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |       0       |                       0                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |FF4F FF51 002F 0000                   ....                     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                Figure 7: Header Sample 2-1 (First Packet)\n   Second Packet:\
    \ This packet will have a first tile part (tile 0) 1400\n   bytes\n    0     \
    \              1                   2                   3\n    0 1 2 3 4 5 6 7\
    \ 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | 0 | 0 |  1  |0|       1       |               0               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |       0       |                      210                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |FF90 000A 0000 0000 0578  0001 FF93   ....                     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                Figure 8: Header Sample 2-2 (Second Packet)\n   Third Packet:\
    \ This packet will have a second tile part (tile 1) 1423\n   bytes\n    0    \
    \               1                   2                   3\n    0 1 2 3 4 5 6 7\
    \ 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | 0 | 0 |  1  |0|       1       |               1               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |       0       |                     1610                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |FF90 000A 0001 0000 058F 0001 FF93    ....                     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                Figure 9: Header Sample 2-3 (Third Packet)\n   Fourth Packet:\
    \ This packet will have a third tile part (tile 2) 1355\n   bytes\n    0     \
    \              1                   2                   3\n    0 1 2 3 4 5 6 7\
    \ 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | 0 | 0 |  1  |0|       1       |               2               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |       0       |                     3033                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |FF90 000A 0002 0000 054B 0001 FF93    ....                     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                 Figure 10: Header Sample 2-4 (4th Packet)\n   Fifth Packet:\
    \ This packet will have a fourth tile part (tile 3) 1290\n   bytes\n    0    \
    \               1                   2                   3\n    0 1 2 3 4 5 6 7\
    \ 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | 0 | 0 |  1  |0|       1       |               3               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |       0       |                     4388                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |FF90 000A 0003 0000 050A 0001 FF93    ....                     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                 Figure 11: Header Sample 2-5 (5th Packet)\n"
- title: 'A.3.  Sample 3: Packing Multiple Tiles in Single Payload, Fragmented'
  contents:
  - "A.3.  Sample 3: Packing Multiple Tiles in Single Payload, Fragmented\n      Header.\
    \  No Header Compensation, Progressive Image\n   First Packet: This packet will\
    \ have the first part of the main header\n   110 bytes\n    0                \
    \   1                   2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3\
    \ 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | 0 | 1 |  0  |1|       0       |               0               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |       0       |                       0                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |FF4F FF51 002F 0000 ....                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                Figure 12: Header Sample 3-1 (First Packet)\n   Second Packet:\
    \ This packet has the second part of the main header.\n   1400 bytes\n    0  \
    \                 1                   2                   3\n    0 1 2 3 4 5 6\
    \ 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | 0 | 2 |  0  |1|       0       |               0               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |       0       |                      110                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |FF64 00FF ....                                                 |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \               Figure 13: Header Sample 3-2 (Second Packet)\n   Third Packet:\
    \ This packet has two tiles, tile 0 and tile 1 1400 bytes\n    0             \
    \      1                   2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1\
    \ 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | 0 | 0 |  0  |1|       1       |               0               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |       0       |                     1510                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |FF90 000A 0000 0000 02BC 0001 FF93 ...                         |\n   // \
    \                                   .                        //\n   |FF90 000A\
    \ 0001 0000 02BC 0001 FF93 ...                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                Figure 14: Header Sample 3-3 (Third Packet)\n   Fourth Packet:\
    \ This packet has one tile, tile 2 1395 bytes\n    0                   1     \
    \              2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7\
    \ 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | 0 | 0 |  0  |0|       1       |               2               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |       0       |                     2910                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |FF90 000A 0002 0000 0573 0001 FF93    ....                     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                 Figure 15: Header Sample 3-4 (4th Packet)\n"
- title: 'A.4.  Sample 4: Interlace Image, Single Tile'
  contents:
  - "A.4.  Sample 4: Interlace Image, Single Tile\n   The codestream of each image\
    \ is ordered in LRCP (Layer, Resolution,\n   Component, Position) with 1 layer,\
    \ 3 resolutions, 3 components and 1\n   position.\n   First packet: This packet\
    \ will have the whole main header for the odd\n   field 210 bytes\n    0     \
    \              1                   2                   3\n    0 1 2 3 4 5 6 7\
    \ 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | 1 | 3 |  1  |1|       0       |               0               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |       0       |                       0                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |FF4F FF51 002F 0000 ....                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                Figure 16: Header Sample 4-1 (First Packet)\n   Second packet:\
    \ This packet will have the first part of the odd\n   field's tile where three\
    \ jp2-packets are included 1400 bytes\n    0                   1             \
    \      2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\
    \ 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | 1 | 0 |  1  |1|       1       |               0               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |       0       |                      210                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |FF90 000A 0000 0000 0578  0001 FF93  ....                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \               Figure 17: Header Sample 4-2 (Second Packet)\n   Third packet:\
    \ This packet will have the second part of the odd\n   field's tile 1400 bytes\n\
    \    0                   1                   2                   3\n    0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | 1 | 0 |  1  |1|       4       |               0               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |       0       |                     1610                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |7F04 E708 27D9 D11D 22CB ...                                   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                Figure 18: Header Sample 4-3 (Third Packet)\n   Fourth packet:\
    \ This packet will have the third part of the odd\n   field's tile 1300 bytes\n\
    \    0                   1                   2                   3\n    0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | 1 | 0 |  1  |1|       7       |               0               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |       0       |                     3010                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |98BD EC9B 2826 DC62 D4AB ...                                   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                 Figure 19: Header Sample 4-4 (4th Packet)\n   Fifth packet:\
    \ This packet will have the whole main header for the\n   even field 210 bytes\n\
    \    0                   1                   2                   3\n    0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | 2 | 3 |  1  |1|       0       |               0               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |       0       |                       0                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |FF4F FF51 002F 0000 ....                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                 Figure 20: Header Sample 4-5 (5th Packet)\n   Sixth packet:\
    \ This packet will have the first part of the even\n   field's tile 1400 bytes\n\
    \    0                   1                   2                   3\n    0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | 2 | 0 |  1  |1|       1       |               0               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |       0       |                     1610                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |FF90 000A 0000 0000 0578  0001 FF93  ....                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                 Figure 21: Header Sample 4-6 (6th Packet)\n   Seventh packet:\
    \ This packet will have the second part of the even\n   field's tile 1400 bytes\n\
    \    0                   1                   2                   3\n    0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | 2 | 0 |  1  |1|       4       |               0               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |       0       |                     3010                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |626C 42F0 166B 6BD0 F8E1 ...                                   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                 Figure 22: Header Sample 4-7 (7th Packet)\n   Eighth packet:\
    \ This packet will have the third part of the even\n   field's tile 1300 bytes\n\
    \    0                   1                   2                   3\n    0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | 2 | 0 |  1  |1|       7       |               0               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |       0       |                     4410                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |8114 41D5 18AB 4A1B ...                                        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                 Figure 23: Header Sample 4-8 (8th Packet)\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Andrew Leung\n   Sony Corporation\n   EMail: andrew@ualberta.net\n\
    \   Satoshi Futemma\n   Sony Corporation\n   1-7-1 Konan\n   Minato-ku\n   Tokyo\
    \  108-0075\n   Japan\n   Phone: +81 3 6748-2111\n   EMail: satosi-f@sm.sony.co.jp\n\
    \   URI:   http://www.sony.net/\n   Eisaburo Itakura\n   Sony Corporation\n  \
    \ 1-7-1 Konan\n   Minato-ku\n   Tokyo  108-0075\n   Japan\n   Phone: +81 3 6748-2111\n\
    \   EMail: itakura@sm.sony.co.jp\n   URI:   http://www.sony.net/\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2008).\n   This document\
    \ is subject to the rights, licenses and restrictions\n   contained in BCP 78,\
    \ and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE\
    \ INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED,\
    \ INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION\
    \ HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY\
    \ OR FITNESS FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
