- title: __initial_text__
  contents:
  - '                 The OAuth 2.0 Authorization Framework

    '
- title: Abstract
  contents:
  - "Abstract\n   The OAuth 2.0 authorization framework enables a third-party\n  \
    \ application to obtain limited access to an HTTP service, either on\n   behalf\
    \ of a resource owner by orchestrating an approval interaction\n   between the\
    \ resource owner and the HTTP service, or by allowing the\n   third-party application\
    \ to obtain access on its own behalf.  This\n   specification replaces and obsoletes\
    \ the OAuth 1.0 protocol described\n   in RFC 5849.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6749.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2012 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................4\n\
    \      1.1. Roles ......................................................6\n  \
    \    1.2. Protocol Flow ..............................................7\n    \
    \  1.3. Authorization Grant ........................................8\n      \
    \     1.3.1. Authorization Code ..................................8\n        \
    \   1.3.2. Implicit ............................................8\n          \
    \ 1.3.3. Resource Owner Password Credentials .................9\n           1.3.4.\
    \ Client Credentials ..................................9\n      1.4. Access Token\
    \ ..............................................10\n      1.5. Refresh Token .............................................10\n\
    \      1.6. TLS Version ...............................................12\n  \
    \    1.7. HTTP Redirections .........................................12\n    \
    \  1.8. Interoperability ..........................................12\n      1.9.\
    \ Notational Conventions ....................................13\n   2. Client\
    \ Registration ............................................13\n      2.1. Client\
    \ Types ..............................................14\n      2.2. Client Identifier\
    \ .........................................15\n      2.3. Client Authentication\
    \ .....................................16\n           2.3.1. Client Password ....................................16\n\
    \           2.3.2. Other Authentication Methods .......................17\n  \
    \    2.4. Unregistered Clients ......................................17\n   3.\
    \ Protocol Endpoints .............................................18\n      3.1.\
    \ Authorization Endpoint ....................................18\n           3.1.1.\
    \ Response Type ......................................19\n           3.1.2. Redirection\
    \ Endpoint ...............................19\n      3.2. Token Endpoint ............................................21\n\
    \           3.2.1. Client Authentication ..............................22\n  \
    \    3.3. Access Token Scope ........................................23\n   4.\
    \ Obtaining Authorization ........................................23\n      4.1.\
    \ Authorization Code Grant ..................................24\n           4.1.1.\
    \ Authorization Request ..............................25\n           4.1.2. Authorization\
    \ Response .............................26\n           4.1.3. Access Token Request\
    \ ...............................29\n           4.1.4. Access Token Response ..............................30\n\
    \      4.2. Implicit Grant ............................................31\n  \
    \         4.2.1. Authorization Request ..............................33\n    \
    \       4.2.2. Access Token Response ..............................35\n      4.3.\
    \ Resource Owner Password Credentials Grant .................37\n           4.3.1.\
    \ Authorization Request and Response .................39\n           4.3.2. Access\
    \ Token Request ...............................39\n           4.3.3. Access Token\
    \ Response ..............................40\n      4.4. Client Credentials Grant\
    \ ..................................40\n           4.4.1. Authorization Request\
    \ and Response .................41\n           4.4.2. Access Token Request ...............................41\n\
    \           4.4.3. Access Token Response ..............................42\n  \
    \    4.5. Extension Grants ..........................................42\n   5.\
    \ Issuing an Access Token ........................................43\n      5.1.\
    \ Successful Response .......................................43\n      5.2. Error\
    \ Response ............................................45\n   6. Refreshing an\
    \ Access Token .....................................47\n   7. Accessing Protected\
    \ Resources ..................................48\n      7.1. Access Token Types\
    \ ........................................49\n      7.2. Error Response ............................................49\n\
    \   8. Extensibility ..................................................50\n  \
    \    8.1. Defining Access Token Types ...............................50\n    \
    \  8.2. Defining New Endpoint Parameters ..........................50\n      8.3.\
    \ Defining New Authorization Grant Types ....................51\n      8.4. Defining\
    \ New Authorization Endpoint Response Types ........51\n      8.5. Defining Additional\
    \ Error Codes ...........................51\n   9. Native Applications ............................................52\n\
    \   10. Security Considerations .......................................53\n  \
    \    10.1. Client Authentication ....................................53\n    \
    \  10.2. Client Impersonation .....................................54\n      10.3.\
    \ Access Tokens ............................................55\n      10.4. Refresh\
    \ Tokens ...........................................55\n      10.5. Authorization\
    \ Codes ......................................56\n      10.6. Authorization Code\
    \ Redirection URI Manipulation ..........56\n      10.7. Resource Owner Password\
    \ Credentials ......................57\n      10.8. Request Confidentiality ..................................58\n\
    \      10.9. Ensuring Endpoint Authenticity ...........................58\n  \
    \    10.10. Credentials-Guessing Attacks ............................58\n    \
    \  10.11. Phishing Attacks ........................................58\n      10.12.\
    \ Cross-Site Request Forgery ..............................59\n      10.13. Clickjacking\
    \ ............................................60\n      10.14. Code Injection\
    \ and Input Validation .....................60\n      10.15. Open Redirectors\
    \ ........................................60\n      10.16. Misuse of Access Token\
    \ to Impersonate Resource\n             Owner in Implicit Flow ..................................61\n\
    \   11. IANA Considerations ...........................................62\n  \
    \    11.1. OAuth Access Token Types Registry ........................62\n    \
    \       11.1.1. Registration Template .............................62\n      11.2.\
    \ OAuth Parameters Registry ................................63\n           11.2.1.\
    \ Registration Template .............................63\n           11.2.2. Initial\
    \ Registry Contents .........................64\n      11.3. OAuth Authorization\
    \ Endpoint Response Types Registry .....66\n           11.3.1. Registration Template\
    \ .............................66\n           11.3.2. Initial Registry Contents\
    \ .........................67\n      11.4. OAuth Extensions Error Registry ..........................67\n\
    \           11.4.1. Registration Template .............................68\n  \
    \ 12. References ....................................................68\n    \
    \  12.1. Normative References .....................................68\n      12.2.\
    \ Informative References ...................................70\n   Appendix A.\
    \ Augmented Backus-Naur Form (ABNF) Syntax ..............71\n     A.1.  \"client_id\"\
    \ Syntax ........................................71\n     A.2.  \"client_secret\"\
    \ Syntax ....................................71\n     A.3.  \"response_type\"\
    \ Syntax ....................................71\n     A.4.  \"scope\" Syntax ............................................72\n\
    \     A.5.  \"state\" Syntax ............................................72\n\
    \     A.6.  \"redirect_uri\" Syntax .....................................72\n\
    \     A.7.  \"error\" Syntax ............................................72\n\
    \     A.8.  \"error_description\" Syntax ................................72\n\
    \     A.9.  \"error_uri\" Syntax ........................................72\n\
    \     A.10. \"grant_type\" Syntax .......................................73\n\
    \     A.11. \"code\" Syntax .............................................73\n\
    \     A.12. \"access_token\" Syntax .....................................73\n\
    \     A.13. \"token_type\" Syntax .......................................73\n\
    \     A.14. \"expires_in\" Syntax .......................................73\n\
    \     A.15. \"username\" Syntax .........................................73\n\
    \     A.16. \"password\" Syntax .........................................73\n\
    \     A.17. \"refresh_token\" Syntax ....................................74\n\
    \     A.18. Endpoint Parameter Syntax .................................74\n  \
    \ Appendix B. Use of application/x-www-form-urlencoded Media Type ...74\n   Appendix\
    \ C. Acknowledgements ......................................75\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   In the traditional client-server authentication model, the\
    \ client\n   requests an access-restricted resource (protected resource) on the\n\
    \   server by authenticating with the server using the resource owner's\n   credentials.\
    \  In order to provide third-party applications access to\n   restricted resources,\
    \ the resource owner shares its credentials with\n   the third party.  This creates\
    \ several problems and limitations:\n   o  Third-party applications are required\
    \ to store the resource\n      owner's credentials for future use, typically a\
    \ password in\n      clear-text.\n   o  Servers are required to support password\
    \ authentication, despite\n      the security weaknesses inherent in passwords.\n\
    \   o  Third-party applications gain overly broad access to the resource\n   \
    \   owner's protected resources, leaving resource owners without any\n      ability\
    \ to restrict duration or access to a limited subset of\n      resources.\n  \
    \ o  Resource owners cannot revoke access to an individual third party\n     \
    \ without revoking access to all third parties, and must do so by\n      changing\
    \ the third party's password.\n   o  Compromise of any third-party application\
    \ results in compromise of\n      the end-user's password and all of the data\
    \ protected by that\n      password.\n   OAuth addresses these issues by introducing\
    \ an authorization layer\n   and separating the role of the client from that of\
    \ the resource\n   owner.  In OAuth, the client requests access to resources controlled\n\
    \   by the resource owner and hosted by the resource server, and is\n   issued\
    \ a different set of credentials than those of the resource\n   owner.\n   Instead\
    \ of using the resource owner's credentials to access protected\n   resources,\
    \ the client obtains an access token -- a string denoting a\n   specific scope,\
    \ lifetime, and other access attributes.  Access tokens\n   are issued to third-party\
    \ clients by an authorization server with the\n   approval of the resource owner.\
    \  The client uses the access token to\n   access the protected resources hosted\
    \ by the resource server.\n   For example, an end-user (resource owner) can grant\
    \ a printing\n   service (client) access to her protected photos stored at a photo-\n\
    \   sharing service (resource server), without sharing her username and\n   password\
    \ with the printing service.  Instead, she authenticates\n   directly with a server\
    \ trusted by the photo-sharing service\n   (authorization server), which issues\
    \ the printing service delegation-\n   specific credentials (access token).\n\
    \   This specification is designed for use with HTTP ([RFC2616]).  The\n   use\
    \ of OAuth over any protocol other than HTTP is out of scope.\n   The OAuth 1.0\
    \ protocol ([RFC5849]), published as an informational\n   document, was the result\
    \ of a small ad hoc community effort.  This\n   Standards Track specification\
    \ builds on the OAuth 1.0 deployment\n   experience, as well as additional use\
    \ cases and extensibility\n   requirements gathered from the wider IETF community.\
    \  The OAuth 2.0\n   protocol is not backward compatible with OAuth 1.0.  The\
    \ two versions\n   may co-exist on the network, and implementations may choose\
    \ to\n   support both.  However, it is the intention of this specification\n \
    \  that new implementations support OAuth 2.0 as specified in this\n   document\
    \ and that OAuth 1.0 is used only to support existing\n   deployments.  The OAuth\
    \ 2.0 protocol shares very few implementation\n   details with the OAuth 1.0 protocol.\
    \  Implementers familiar with\n   OAuth 1.0 should approach this document without\
    \ any assumptions as to\n   its structure and details.\n"
- title: 1.1.  Roles
  contents:
  - "1.1.  Roles\n   OAuth defines four roles:\n   resource owner\n      An entity\
    \ capable of granting access to a protected resource.\n      When the resource\
    \ owner is a person, it is referred to as an\n      end-user.\n   resource server\n\
    \      The server hosting the protected resources, capable of accepting\n    \
    \  and responding to protected resource requests using access tokens.\n   client\n\
    \      An application making protected resource requests on behalf of the\n  \
    \    resource owner and with its authorization.  The term \"client\" does\n  \
    \    not imply any particular implementation characteristics (e.g.,\n      whether\
    \ the application executes on a server, a desktop, or other\n      devices).\n\
    \   authorization server\n      The server issuing access tokens to the client\
    \ after successfully\n      authenticating the resource owner and obtaining authorization.\n\
    \   The interaction between the authorization server and resource server\n   is\
    \ beyond the scope of this specification.  The authorization server\n   may be\
    \ the same server as the resource server or a separate entity.\n   A single authorization\
    \ server may issue access tokens accepted by\n   multiple resource servers.\n"
- title: 1.2.  Protocol Flow
  contents:
  - "1.2.  Protocol Flow\n     +--------+                               +---------------+\n\
    \     |        |--(A)- Authorization Request ->|   Resource    |\n     |     \
    \   |                               |     Owner     |\n     |        |<-(B)--\
    \ Authorization Grant ---|               |\n     |        |                  \
    \             +---------------+\n     |        |\n     |        |            \
    \                   +---------------+\n     |        |--(C)-- Authorization Grant\
    \ -->| Authorization |\n     | Client |                               |     Server\
    \    |\n     |        |<-(D)----- Access Token -------|               |\n    \
    \ |        |                               +---------------+\n     |        |\n\
    \     |        |                               +---------------+\n     |     \
    \   |--(E)----- Access Token ------>|    Resource   |\n     |        |       \
    \                        |     Server    |\n     |        |<-(F)--- Protected\
    \ Resource ---|               |\n     +--------+                             \
    \  +---------------+\n                     Figure 1: Abstract Protocol Flow\n\
    \   The abstract OAuth 2.0 flow illustrated in Figure 1 describes the\n   interaction\
    \ between the four roles and includes the following steps:\n   (A)  The client\
    \ requests authorization from the resource owner.  The\n        authorization\
    \ request can be made directly to the resource owner\n        (as shown), or preferably\
    \ indirectly via the authorization\n        server as an intermediary.\n   (B)\
    \  The client receives an authorization grant, which is a\n        credential\
    \ representing the resource owner's authorization,\n        expressed using one\
    \ of four grant types defined in this\n        specification or using an extension\
    \ grant type.  The\n        authorization grant type depends on the method used\
    \ by the\n        client to request authorization and the types supported by the\n\
    \        authorization server.\n   (C)  The client requests an access token by\
    \ authenticating with the\n        authorization server and presenting the authorization\
    \ grant.\n   (D)  The authorization server authenticates the client and validates\n\
    \        the authorization grant, and if valid, issues an access token.\n   (E)\
    \  The client requests the protected resource from the resource\n        server\
    \ and authenticates by presenting the access token.\n   (F)  The resource server\
    \ validates the access token, and if valid,\n        serves the request.\n   The\
    \ preferred method for the client to obtain an authorization grant\n   from the\
    \ resource owner (depicted in steps (A) and (B)) is to use the\n   authorization\
    \ server as an intermediary, which is illustrated in\n   Figure 3 in Section 4.1.\n"
- title: 1.3.  Authorization Grant
  contents:
  - "1.3.  Authorization Grant\n   An authorization grant is a credential representing\
    \ the resource\n   owner's authorization (to access its protected resources) used\
    \ by the\n   client to obtain an access token.  This specification defines four\n\
    \   grant types -- authorization code, implicit, resource owner password\n   credentials,\
    \ and client credentials -- as well as an extensibility\n   mechanism for defining\
    \ additional types.\n"
- title: 1.3.1.  Authorization Code
  contents:
  - "1.3.1.  Authorization Code\n   The authorization code is obtained by using an\
    \ authorization server\n   as an intermediary between the client and resource\
    \ owner.  Instead of\n   requesting authorization directly from the resource owner,\
    \ the client\n   directs the resource owner to an authorization server (via its\n\
    \   user-agent as defined in [RFC2616]), which in turn directs the\n   resource\
    \ owner back to the client with the authorization code.\n   Before directing the\
    \ resource owner back to the client with the\n   authorization code, the authorization\
    \ server authenticates the\n   resource owner and obtains authorization.  Because\
    \ the resource owner\n   only authenticates with the authorization server, the\
    \ resource\n   owner's credentials are never shared with the client.\n   The authorization\
    \ code provides a few important security benefits,\n   such as the ability to\
    \ authenticate the client, as well as the\n   transmission of the access token\
    \ directly to the client without\n   passing it through the resource owner's user-agent\
    \ and potentially\n   exposing it to others, including the resource owner.\n"
- title: 1.3.2.  Implicit
  contents:
  - "1.3.2.  Implicit\n   The implicit grant is a simplified authorization code flow\
    \ optimized\n   for clients implemented in a browser using a scripting language\
    \ such\n   as JavaScript.  In the implicit flow, instead of issuing the client\n\
    \   an authorization code, the client is issued an access token directly\n   (as\
    \ the result of the resource owner authorization).  The grant type\n   is implicit,\
    \ as no intermediate credentials (such as an authorization\n   code) are issued\
    \ (and later used to obtain an access token).\n   When issuing an access token\
    \ during the implicit grant flow, the\n   authorization server does not authenticate\
    \ the client.  In some\n   cases, the client identity can be verified via the\
    \ redirection URI\n   used to deliver the access token to the client.  The access\
    \ token may\n   be exposed to the resource owner or other applications with access\
    \ to\n   the resource owner's user-agent.\n   Implicit grants improve the responsiveness\
    \ and efficiency of some\n   clients (such as a client implemented as an in-browser\
    \ application),\n   since it reduces the number of round trips required to obtain\
    \ an\n   access token.  However, this convenience should be weighed against\n\
    \   the security implications of using implicit grants, such as those\n   described\
    \ in Sections 10.3 and 10.16, especially when the\n   authorization code grant\
    \ type is available.\n"
- title: 1.3.3.  Resource Owner Password Credentials
  contents:
  - "1.3.3.  Resource Owner Password Credentials\n   The resource owner password credentials\
    \ (i.e., username and password)\n   can be used directly as an authorization grant\
    \ to obtain an access\n   token.  The credentials should only be used when there\
    \ is a high\n   degree of trust between the resource owner and the client (e.g.,\
    \ the\n   client is part of the device operating system or a highly privileged\n\
    \   application), and when other authorization grant types are not\n   available\
    \ (such as an authorization code).\n   Even though this grant type requires direct\
    \ client access to the\n   resource owner credentials, the resource owner credentials\
    \ are used\n   for a single request and are exchanged for an access token.  This\n\
    \   grant type can eliminate the need for the client to store the\n   resource\
    \ owner credentials for future use, by exchanging the\n   credentials with a long-lived\
    \ access token or refresh token.\n"
- title: 1.3.4.  Client Credentials
  contents:
  - "1.3.4.  Client Credentials\n   The client credentials (or other forms of client\
    \ authentication) can\n   be used as an authorization grant when the authorization\
    \ scope is\n   limited to the protected resources under the control of the client,\n\
    \   or to protected resources previously arranged with the authorization\n   server.\
    \  Client credentials are used as an authorization grant\n   typically when the\
    \ client is acting on its own behalf (the client is\n   also the resource owner)\
    \ or is requesting access to protected\n   resources based on an authorization\
    \ previously arranged with the\n   authorization server.\n"
- title: 1.4.  Access Token
  contents:
  - "1.4.  Access Token\n   Access tokens are credentials used to access protected\
    \ resources.  An\n   access token is a string representing an authorization issued\
    \ to the\n   client.  The string is usually opaque to the client.  Tokens\n  \
    \ represent specific scopes and durations of access, granted by the\n   resource\
    \ owner, and enforced by the resource server and authorization\n   server.\n \
    \  The token may denote an identifier used to retrieve the authorization\n   information\
    \ or may self-contain the authorization information in a\n   verifiable manner\
    \ (i.e., a token string consisting of some data and a\n   signature).  Additional\
    \ authentication credentials, which are beyond\n   the scope of this specification,\
    \ may be required in order for the\n   client to use a token.\n   The access token\
    \ provides an abstraction layer, replacing different\n   authorization constructs\
    \ (e.g., username and password) with a single\n   token understood by the resource\
    \ server.  This abstraction enables\n   issuing access tokens more restrictive\
    \ than the authorization grant\n   used to obtain them, as well as removing the\
    \ resource server's need\n   to understand a wide range of authentication methods.\n\
    \   Access tokens can have different formats, structures, and methods of\n   utilization\
    \ (e.g., cryptographic properties) based on the resource\n   server security requirements.\
    \  Access token attributes and the\n   methods used to access protected resources\
    \ are beyond the scope of\n   this specification and are defined by companion\
    \ specifications such\n   as [RFC6750].\n"
- title: 1.5.  Refresh Token
  contents:
  - "1.5.  Refresh Token\n   Refresh tokens are credentials used to obtain access\
    \ tokens.  Refresh\n   tokens are issued to the client by the authorization server\
    \ and are\n   used to obtain a new access token when the current access token\n\
    \   becomes invalid or expires, or to obtain additional access tokens\n   with\
    \ identical or narrower scope (access tokens may have a shorter\n   lifetime and\
    \ fewer permissions than authorized by the resource\n   owner).  Issuing a refresh\
    \ token is optional at the discretion of the\n   authorization server.  If the\
    \ authorization server issues a refresh\n   token, it is included when issuing\
    \ an access token (i.e., step (D) in\n   Figure 1).\n   A refresh token is a string\
    \ representing the authorization granted to\n   the client by the resource owner.\
    \  The string is usually opaque to\n   the client.  The token denotes an identifier\
    \ used to retrieve the\n   authorization information.  Unlike access tokens, refresh\
    \ tokens are\n   intended for use only with authorization servers and are never\
    \ sent\n   to resource servers.\n  +--------+                                \
    \           +---------------+\n  |        |--(A)------- Authorization Grant --------->|\
    \               |\n  |        |                                           |  \
    \             |\n  |        |<-(B)----------- Access Token -------------|    \
    \           |\n  |        |               & Refresh Token             |      \
    \         |\n  |        |                                           |        \
    \       |\n  |        |                            +----------+   |          \
    \     |\n  |        |--(C)---- Access Token ---->|          |   |            \
    \   |\n  |        |                            |          |   |              \
    \ |\n  |        |<-(D)- Protected Resource --| Resource |   | Authorization |\n\
    \  | Client |                            |  Server  |   |     Server    |\n  |\
    \        |--(E)---- Access Token ---->|          |   |               |\n  |  \
    \      |                            |          |   |               |\n  |    \
    \    |<-(F)- Invalid Token Error -|          |   |               |\n  |      \
    \  |                            +----------+   |               |\n  |        |\
    \                                           |               |\n  |        |--(G)-----------\
    \ Refresh Token ----------->|               |\n  |        |                  \
    \                         |               |\n  |        |<-(H)----------- Access\
    \ Token -------------|               |\n  +--------+           & Optional Refresh\
    \ Token        +---------------+\n               Figure 2: Refreshing an Expired\
    \ Access Token\n   The flow illustrated in Figure 2 includes the following steps:\n\
    \   (A)  The client requests an access token by authenticating with the\n    \
    \    authorization server and presenting an authorization grant.\n   (B)  The\
    \ authorization server authenticates the client and validates\n        the authorization\
    \ grant, and if valid, issues an access token\n        and a refresh token.\n\
    \   (C)  The client makes a protected resource request to the resource\n     \
    \   server by presenting the access token.\n   (D)  The resource server validates\
    \ the access token, and if valid,\n        serves the request.\n   (E)  Steps\
    \ (C) and (D) repeat until the access token expires.  If the\n        client knows\
    \ the access token expired, it skips to step (G);\n        otherwise, it makes\
    \ another protected resource request.\n   (F)  Since the access token is invalid,\
    \ the resource server returns\n        an invalid token error.\n   (G)  The client\
    \ requests a new access token by authenticating with\n        the authorization\
    \ server and presenting the refresh token.  The\n        client authentication\
    \ requirements are based on the client type\n        and on the authorization\
    \ server policies.\n   (H)  The authorization server authenticates the client\
    \ and validates\n        the refresh token, and if valid, issues a new access\
    \ token (and,\n        optionally, a new refresh token).\n   Steps (C), (D), (E),\
    \ and (F) are outside the scope of this\n   specification, as described in Section\
    \ 7.\n"
- title: 1.6.  TLS Version
  contents:
  - "1.6.  TLS Version\n   Whenever Transport Layer Security (TLS) is used by this\n\
    \   specification, the appropriate version (or versions) of TLS will vary\n  \
    \ over time, based on the widespread deployment and known security\n   vulnerabilities.\
    \  At the time of this writing, TLS version 1.2\n   [RFC5246] is the most recent\
    \ version, but has a very limited\n   deployment base and might not be readily\
    \ available for\n   implementation.  TLS version 1.0 [RFC2246] is the most widely\n\
    \   deployed version and will provide the broadest interoperability.\n   Implementations\
    \ MAY also support additional transport-layer security\n   mechanisms that meet\
    \ their security requirements.\n"
- title: 1.7.  HTTP Redirections
  contents:
  - "1.7.  HTTP Redirections\n   This specification makes extensive use of HTTP redirections,\
    \ in which\n   the client or the authorization server directs the resource owner's\n\
    \   user-agent to another destination.  While the examples in this\n   specification\
    \ show the use of the HTTP 302 status code, any other\n   method available via\
    \ the user-agent to accomplish this redirection is\n   allowed and is considered\
    \ to be an implementation detail.\n"
- title: 1.8.  Interoperability
  contents:
  - "1.8.  Interoperability\n   OAuth 2.0 provides a rich authorization framework\
    \ with well-defined\n   security properties.  However, as a rich and highly extensible\n\
    \   framework with many optional components, on its own, this\n   specification\
    \ is likely to produce a wide range of non-interoperable\n   implementations.\n\
    \   In addition, this specification leaves a few required components\n   partially\
    \ or fully undefined (e.g., client registration,\n   authorization server capabilities,\
    \ endpoint discovery).  Without\n   these components, clients must be manually\
    \ and specifically\n   configured against a specific authorization server and\
    \ resource\n   server in order to interoperate.\n   This framework was designed\
    \ with the clear expectation that future\n   work will define prescriptive profiles\
    \ and extensions necessary to\n   achieve full web-scale interoperability.\n"
- title: 1.9.  Notational Conventions
  contents:
  - "1.9.  Notational Conventions\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   specification are to be interpreted as described\
    \ in [RFC2119].\n   This specification uses the Augmented Backus-Naur Form (ABNF)\n\
    \   notation of [RFC5234].  Additionally, the rule URI-reference is\n   included\
    \ from \"Uniform Resource Identifier (URI): Generic Syntax\"\n   [RFC3986].\n\
    \   Certain security-related terms are to be understood in the sense\n   defined\
    \ in [RFC4949].  These terms include, but are not limited to,\n   \"attack\",\
    \ \"authentication\", \"authorization\", \"certificate\",\n   \"confidentiality\"\
    , \"credential\", \"encryption\", \"identity\", \"sign\",\n   \"signature\", \"\
    trust\", \"validate\", and \"verify\".\n   Unless otherwise noted, all the protocol\
    \ parameter names and values\n   are case sensitive.\n"
- title: 2.  Client Registration
  contents:
  - "2.  Client Registration\n   Before initiating the protocol, the client registers\
    \ with the\n   authorization server.  The means through which the client registers\n\
    \   with the authorization server are beyond the scope of this\n   specification\
    \ but typically involve end-user interaction with an HTML\n   registration form.\n\
    \   Client registration does not require a direct interaction between the\n  \
    \ client and the authorization server.  When supported by the\n   authorization\
    \ server, registration can rely on other means for\n   establishing trust and\
    \ obtaining the required client properties\n   (e.g., redirection URI, client\
    \ type).  For example, registration can\n   be accomplished using a self-issued\
    \ or third-party-issued assertion,\n   or by the authorization server performing\
    \ client discovery using a\n   trusted channel.\n   When registering a client,\
    \ the client developer SHALL:\n   o  specify the client type as described in Section\
    \ 2.1,\n   o  provide its client redirection URIs as described in Section 3.1.2,\n\
    \      and\n   o  include any other information required by the authorization\
    \ server\n      (e.g., application name, website, description, logo image, the\n\
    \      acceptance of legal terms).\n"
- title: 2.1.  Client Types
  contents:
  - "2.1.  Client Types\n   OAuth defines two client types, based on their ability\
    \ to\n   authenticate securely with the authorization server (i.e., ability to\n\
    \   maintain the confidentiality of their client credentials):\n   confidential\n\
    \      Clients capable of maintaining the confidentiality of their\n      credentials\
    \ (e.g., client implemented on a secure server with\n      restricted access to\
    \ the client credentials), or capable of secure\n      client authentication using\
    \ other means.\n   public\n      Clients incapable of maintaining the confidentiality\
    \ of their\n      credentials (e.g., clients executing on the device used by the\n\
    \      resource owner, such as an installed native application or a web\n    \
    \  browser-based application), and incapable of secure client\n      authentication\
    \ via any other means.\n   The client type designation is based on the authorization\
    \ server's\n   definition of secure authentication and its acceptable exposure\n\
    \   levels of client credentials.  The authorization server SHOULD NOT\n   make\
    \ assumptions about the client type.\n   A client may be implemented as a distributed\
    \ set of components, each\n   with a different client type and security context\
    \ (e.g., a\n   distributed client with both a confidential server-based component\n\
    \   and a public browser-based component).  If the authorization server\n   does\
    \ not provide support for such clients or does not provide\n   guidance with regard\
    \ to their registration, the client SHOULD\n   register each component as a separate\
    \ client.\n   This specification has been designed around the following client\n\
    \   profiles:\n   web application\n      A web application is a confidential client\
    \ running on a web\n      server.  Resource owners access the client via an HTML\
    \ user\n      interface rendered in a user-agent on the device used by the\n \
    \     resource owner.  The client credentials as well as any access\n      token\
    \ issued to the client are stored on the web server and are\n      not exposed\
    \ to or accessible by the resource owner.\n   user-agent-based application\n \
    \     A user-agent-based application is a public client in which the\n      client\
    \ code is downloaded from a web server and executes within a\n      user-agent\
    \ (e.g., web browser) on the device used by the resource\n      owner.  Protocol\
    \ data and credentials are easily accessible (and\n      often visible) to the\
    \ resource owner.  Since such applications\n      reside within the user-agent,\
    \ they can make seamless use of the\n      user-agent capabilities when requesting\
    \ authorization.\n   native application\n      A native application is a public\
    \ client installed and executed on\n      the device used by the resource owner.\
    \  Protocol data and\n      credentials are accessible to the resource owner.\
    \  It is assumed\n      that any client authentication credentials included in\
    \ the\n      application can be extracted.  On the other hand, dynamically\n \
    \     issued credentials such as access tokens or refresh tokens can\n      receive\
    \ an acceptable level of protection.  At a minimum, these\n      credentials are\
    \ protected from hostile servers with which the\n      application may interact.\
    \  On some platforms, these credentials\n      might be protected from other applications\
    \ residing on the same\n      device.\n"
- title: 2.2.  Client Identifier
  contents:
  - "2.2.  Client Identifier\n   The authorization server issues the registered client\
    \ a client\n   identifier -- a unique string representing the registration\n \
    \  information provided by the client.  The client identifier is not a\n   secret;\
    \ it is exposed to the resource owner and MUST NOT be used\n   alone for client\
    \ authentication.  The client identifier is unique to\n   the authorization server.\n\
    \   The client identifier string size is left undefined by this\n   specification.\
    \  The client should avoid making assumptions about the\n   identifier size. \
    \ The authorization server SHOULD document the size\n   of any identifier it issues.\n"
- title: 2.3.  Client Authentication
  contents:
  - "2.3.  Client Authentication\n   If the client type is confidential, the client\
    \ and authorization\n   server establish a client authentication method suitable\
    \ for the\n   security requirements of the authorization server.  The authorization\n\
    \   server MAY accept any form of client authentication meeting its\n   security\
    \ requirements.\n   Confidential clients are typically issued (or establish) a\
    \ set of\n   client credentials used for authenticating with the authorization\n\
    \   server (e.g., password, public/private key pair).\n   The authorization server\
    \ MAY establish a client authentication method\n   with public clients.  However,\
    \ the authorization server MUST NOT rely\n   on public client authentication for\
    \ the purpose of identifying the\n   client.\n   The client MUST NOT use more\
    \ than one authentication method in each\n   request.\n"
- title: 2.3.1.  Client Password
  contents:
  - "2.3.1.  Client Password\n   Clients in possession of a client password MAY use\
    \ the HTTP Basic\n   authentication scheme as defined in [RFC2617] to authenticate\
    \ with\n   the authorization server.  The client identifier is encoded using the\n\
    \   \"application/x-www-form-urlencoded\" encoding algorithm per\n   Appendix\
    \ B, and the encoded value is used as the username; the client\n   password is\
    \ encoded using the same algorithm and used as the\n   password.  The authorization\
    \ server MUST support the HTTP Basic\n   authentication scheme for authenticating\
    \ clients that were issued a\n   client password.\n   For example (with extra\
    \ line breaks for display purposes only):\n     Authorization: Basic czZCaGRSa3F0Mzo3RmpmcDBaQnIxS3REUmJuZlZkbUl3\n\
    \   Alternatively, the authorization server MAY support including the\n   client\
    \ credentials in the request-body using the following\n   parameters:\n   client_id\n\
    \         REQUIRED.  The client identifier issued to the client during\n     \
    \    the registration process described by Section 2.2.\n   client_secret\n  \
    \       REQUIRED.  The client secret.  The client MAY omit the\n         parameter\
    \ if the client secret is an empty string.\n   Including the client credentials\
    \ in the request-body using the two\n   parameters is NOT RECOMMENDED and SHOULD\
    \ be limited to clients unable\n   to directly utilize the HTTP Basic authentication\
    \ scheme (or other\n   password-based HTTP authentication schemes).  The parameters\
    \ can only\n   be transmitted in the request-body and MUST NOT be included in\
    \ the\n   request URI.\n   For example, a request to refresh an access token (Section\
    \ 6) using\n   the body parameters (with extra line breaks for display purposes\n\
    \   only):\n     POST /token HTTP/1.1\n     Host: server.example.com\n     Content-Type:\
    \ application/x-www-form-urlencoded\n     grant_type=refresh_token&refresh_token=tGzv3JOkF0XG5Qx2TlKWIA\n\
    \     &client_id=s6BhdRkqt3&client_secret=7Fjfp0ZBr1KtDRbnfVdmIw\n   The authorization\
    \ server MUST require the use of TLS as described in\n   Section 1.6 when sending\
    \ requests using password authentication.\n   Since this client authentication\
    \ method involves a password, the\n   authorization server MUST protect any endpoint\
    \ utilizing it against\n   brute force attacks.\n"
- title: 2.3.2.  Other Authentication Methods
  contents:
  - "2.3.2.  Other Authentication Methods\n   The authorization server MAY support\
    \ any suitable HTTP authentication\n   scheme matching its security requirements.\
    \  When using other\n   authentication methods, the authorization server MUST\
    \ define a\n   mapping between the client identifier (registration record) and\n\
    \   authentication scheme.\n"
- title: 2.4.  Unregistered Clients
  contents:
  - "2.4.  Unregistered Clients\n   This specification does not exclude the use of\
    \ unregistered clients.\n   However, the use of such clients is beyond the scope\
    \ of this\n   specification and requires additional security analysis and review\
    \ of\n   its interoperability impact.\n"
- title: 3.  Protocol Endpoints
  contents:
  - "3.  Protocol Endpoints\n   The authorization process utilizes two authorization\
    \ server endpoints\n   (HTTP resources):\n   o  Authorization endpoint - used\
    \ by the client to obtain\n      authorization from the resource owner via user-agent\
    \ redirection.\n   o  Token endpoint - used by the client to exchange an authorization\n\
    \      grant for an access token, typically with client authentication.\n   As\
    \ well as one client endpoint:\n   o  Redirection endpoint - used by the authorization\
    \ server to return\n      responses containing authorization credentials to the\
    \ client via\n      the resource owner user-agent.\n   Not every authorization\
    \ grant type utilizes both endpoints.\n   Extension grant types MAY define additional\
    \ endpoints as needed.\n"
- title: 3.1.  Authorization Endpoint
  contents:
  - "3.1.  Authorization Endpoint\n   The authorization endpoint is used to interact\
    \ with the resource\n   owner and obtain an authorization grant.  The authorization\
    \ server\n   MUST first verify the identity of the resource owner.  The way in\n\
    \   which the authorization server authenticates the resource owner\n   (e.g.,\
    \ username and password login, session cookies) is beyond the\n   scope of this\
    \ specification.\n   The means through which the client obtains the location of\
    \ the\n   authorization endpoint are beyond the scope of this specification,\n\
    \   but the location is typically provided in the service documentation.\n   The\
    \ endpoint URI MAY include an \"application/x-www-form-urlencoded\"\n   formatted\
    \ (per Appendix B) query component ([RFC3986] Section 3.4),\n   which MUST be\
    \ retained when adding additional query parameters.  The\n   endpoint URI MUST\
    \ NOT include a fragment component.\n   Since requests to the authorization endpoint\
    \ result in user\n   authentication and the transmission of clear-text credentials\
    \ (in the\n   HTTP response), the authorization server MUST require the use of\
    \ TLS\n   as described in Section 1.6 when sending requests to the\n   authorization\
    \ endpoint.\n   The authorization server MUST support the use of the HTTP \"GET\"\
    \n   method [RFC2616] for the authorization endpoint and MAY support the\n   use\
    \ of the \"POST\" method as well.\n   Parameters sent without a value MUST be\
    \ treated as if they were\n   omitted from the request.  The authorization server\
    \ MUST ignore\n   unrecognized request parameters.  Request and response parameters\n\
    \   MUST NOT be included more than once.\n"
- title: 3.1.1.  Response Type
  contents:
  - "3.1.1.  Response Type\n   The authorization endpoint is used by the authorization\
    \ code grant\n   type and implicit grant type flows.  The client informs the\n\
    \   authorization server of the desired grant type using the following\n   parameter:\n\
    \   response_type\n         REQUIRED.  The value MUST be one of \"code\" for requesting\
    \ an\n         authorization code as described by Section 4.1.1, \"token\" for\n\
    \         requesting an access token (implicit grant) as described by\n      \
    \   Section 4.2.1, or a registered extension value as described by\n         Section\
    \ 8.4.\n   Extension response types MAY contain a space-delimited (%x20) list\
    \ of\n   values, where the order of values does not matter (e.g., response\n \
    \  type \"a b\" is the same as \"b a\").  The meaning of such composite\n   response\
    \ types is defined by their respective specifications.\n   If an authorization\
    \ request is missing the \"response_type\" parameter,\n   or if the response type\
    \ is not understood, the authorization server\n   MUST return an error response\
    \ as described in Section 4.1.2.1.\n"
- title: 3.1.2.  Redirection Endpoint
  contents:
  - "3.1.2.  Redirection Endpoint\n   After completing its interaction with the resource\
    \ owner, the\n   authorization server directs the resource owner's user-agent\
    \ back to\n   the client.  The authorization server redirects the user-agent to\
    \ the\n   client's redirection endpoint previously established with the\n   authorization\
    \ server during the client registration process or when\n   making the authorization\
    \ request.\n   The redirection endpoint URI MUST be an absolute URI as defined\
    \ by\n   [RFC3986] Section 4.3.  The endpoint URI MAY include an\n   \"application/x-www-form-urlencoded\"\
    \ formatted (per Appendix B) query\n   component ([RFC3986] Section 3.4), which\
    \ MUST be retained when adding\n   additional query parameters.  The endpoint\
    \ URI MUST NOT include a\n   fragment component.\n"
- title: 3.1.2.1.  Endpoint Request Confidentiality
  contents:
  - "3.1.2.1.  Endpoint Request Confidentiality\n   The redirection endpoint SHOULD\
    \ require the use of TLS as described\n   in Section 1.6 when the requested response\
    \ type is \"code\" or \"token\",\n   or when the redirection request will result\
    \ in the transmission of\n   sensitive credentials over an open network.  This\
    \ specification does\n   not mandate the use of TLS because at the time of this\
    \ writing,\n   requiring clients to deploy TLS is a significant hurdle for many\n\
    \   client developers.  If TLS is not available, the authorization server\n  \
    \ SHOULD warn the resource owner about the insecure endpoint prior to\n   redirection\
    \ (e.g., display a message during the authorization\n   request).\n   Lack of\
    \ transport-layer security can have a severe impact on the\n   security of the\
    \ client and the protected resources it is authorized\n   to access.  The use\
    \ of transport-layer security is particularly\n   critical when the authorization\
    \ process is used as a form of\n   delegated end-user authentication by the client\
    \ (e.g., third-party\n   sign-in service).\n"
- title: 3.1.2.2.  Registration Requirements
  contents:
  - "3.1.2.2.  Registration Requirements\n   The authorization server MUST require\
    \ the following clients to\n   register their redirection endpoint:\n   o  Public\
    \ clients.\n   o  Confidential clients utilizing the implicit grant type.\n  \
    \ The authorization server SHOULD require all clients to register their\n   redirection\
    \ endpoint prior to utilizing the authorization endpoint.\n   The authorization\
    \ server SHOULD require the client to provide the\n   complete redirection URI\
    \ (the client MAY use the \"state\" request\n   parameter to achieve per-request\
    \ customization).  If requiring the\n   registration of the complete redirection\
    \ URI is not possible, the\n   authorization server SHOULD require the registration\
    \ of the URI\n   scheme, authority, and path (allowing the client to dynamically\
    \ vary\n   only the query component of the redirection URI when requesting\n \
    \  authorization).\n   The authorization server MAY allow the client to register\
    \ multiple\n   redirection endpoints.\n   Lack of a redirection URI registration\
    \ requirement can enable an\n   attacker to use the authorization endpoint as\
    \ an open redirector as\n   described in Section 10.15.\n"
- title: 3.1.2.3.  Dynamic Configuration
  contents:
  - "3.1.2.3.  Dynamic Configuration\n   If multiple redirection URIs have been registered,\
    \ if only part of\n   the redirection URI has been registered, or if no redirection\
    \ URI has\n   been registered, the client MUST include a redirection URI with\
    \ the\n   authorization request using the \"redirect_uri\" request parameter.\n\
    \   When a redirection URI is included in an authorization request, the\n   authorization\
    \ server MUST compare and match the value received\n   against at least one of\
    \ the registered redirection URIs (or URI\n   components) as defined in [RFC3986]\
    \ Section 6, if any redirection\n   URIs were registered.  If the client registration\
    \ included the full\n   redirection URI, the authorization server MUST compare\
    \ the two URIs\n   using simple string comparison as defined in [RFC3986] Section\
    \ 6.2.1.\n"
- title: 3.1.2.4.  Invalid Endpoint
  contents:
  - "3.1.2.4.  Invalid Endpoint\n   If an authorization request fails validation due\
    \ to a missing,\n   invalid, or mismatching redirection URI, the authorization\
    \ server\n   SHOULD inform the resource owner of the error and MUST NOT\n   automatically\
    \ redirect the user-agent to the invalid redirection URI.\n"
- title: 3.1.2.5.  Endpoint Content
  contents:
  - "3.1.2.5.  Endpoint Content\n   The redirection request to the client's endpoint\
    \ typically results in\n   an HTML document response, processed by the user-agent.\
    \  If the HTML\n   response is served directly as the result of the redirection\
    \ request,\n   any script included in the HTML document will execute with full\n\
    \   access to the redirection URI and the credentials it contains.\n   The client\
    \ SHOULD NOT include any third-party scripts (e.g., third-\n   party analytics,\
    \ social plug-ins, ad networks) in the redirection\n   endpoint response.  Instead,\
    \ it SHOULD extract the credentials from\n   the URI and redirect the user-agent\
    \ again to another endpoint without\n   exposing the credentials (in the URI or\
    \ elsewhere).  If third-party\n   scripts are included, the client MUST ensure\
    \ that its own scripts\n   (used to extract and remove the credentials from the\
    \ URI) will\n   execute first.\n"
- title: 3.2.  Token Endpoint
  contents:
  - "3.2.  Token Endpoint\n   The token endpoint is used by the client to obtain an\
    \ access token by\n   presenting its authorization grant or refresh token.  The\
    \ token\n   endpoint is used with every authorization grant except for the\n \
    \  implicit grant type (since an access token is issued directly).\n   The means\
    \ through which the client obtains the location of the token\n   endpoint are\
    \ beyond the scope of this specification, but the location\n   is typically provided\
    \ in the service documentation.\n   The endpoint URI MAY include an \"application/x-www-form-urlencoded\"\
    \n   formatted (per Appendix B) query component ([RFC3986] Section 3.4),\n   which\
    \ MUST be retained when adding additional query parameters.  The\n   endpoint\
    \ URI MUST NOT include a fragment component.\n   Since requests to the token endpoint\
    \ result in the transmission of\n   clear-text credentials (in the HTTP request\
    \ and response), the\n   authorization server MUST require the use of TLS as described\
    \ in\n   Section 1.6 when sending requests to the token endpoint.\n   The client\
    \ MUST use the HTTP \"POST\" method when making access token\n   requests.\n \
    \  Parameters sent without a value MUST be treated as if they were\n   omitted\
    \ from the request.  The authorization server MUST ignore\n   unrecognized request\
    \ parameters.  Request and response parameters\n   MUST NOT be included more than\
    \ once.\n"
- title: 3.2.1.  Client Authentication
  contents:
  - "3.2.1.  Client Authentication\n   Confidential clients or other clients issued\
    \ client credentials MUST\n   authenticate with the authorization server as described\
    \ in\n   Section 2.3 when making requests to the token endpoint.  Client\n   authentication\
    \ is used for:\n   o  Enforcing the binding of refresh tokens and authorization\
    \ codes to\n      the client they were issued to.  Client authentication is critical\n\
    \      when an authorization code is transmitted to the redirection\n      endpoint\
    \ over an insecure channel or when the redirection URI has\n      not been registered\
    \ in full.\n   o  Recovering from a compromised client by disabling the client\
    \ or\n      changing its credentials, thus preventing an attacker from abusing\n\
    \      stolen refresh tokens.  Changing a single set of client\n      credentials\
    \ is significantly faster than revoking an entire set of\n      refresh tokens.\n\
    \   o  Implementing authentication management best practices, which\n      require\
    \ periodic credential rotation.  Rotation of an entire set\n      of refresh tokens\
    \ can be challenging, while rotation of a single\n      set of client credentials\
    \ is significantly easier.\n   A client MAY use the \"client_id\" request parameter\
    \ to identify itself\n   when sending requests to the token endpoint.  In the\n\
    \   \"authorization_code\" \"grant_type\" request to the token endpoint, an\n\
    \   unauthenticated client MUST send its \"client_id\" to prevent itself\n   from\
    \ inadvertently accepting a code intended for a client with a\n   different \"\
    client_id\".  This protects the client from substitution of\n   the authentication\
    \ code.  (It provides no additional security for the\n   protected resource.)\n"
- title: 3.3.  Access Token Scope
  contents:
  - "3.3.  Access Token Scope\n   The authorization and token endpoints allow the\
    \ client to specify the\n   scope of the access request using the \"scope\" request\
    \ parameter.  In\n   turn, the authorization server uses the \"scope\" response\
    \ parameter to\n   inform the client of the scope of the access token issued.\n\
    \   The value of the scope parameter is expressed as a list of space-\n   delimited,\
    \ case-sensitive strings.  The strings are defined by the\n   authorization server.\
    \  If the value contains multiple space-delimited\n   strings, their order does\
    \ not matter, and each string adds an\n   additional access range to the requested\
    \ scope.\n     scope       = scope-token *( SP scope-token )\n     scope-token\
    \ = 1*( %x21 / %x23-5B / %x5D-7E )\n   The authorization server MAY fully or partially\
    \ ignore the scope\n   requested by the client, based on the authorization server\
    \ policy or\n   the resource owner's instructions.  If the issued access token\
    \ scope\n   is different from the one requested by the client, the authorization\n\
    \   server MUST include the \"scope\" response parameter to inform the\n   client\
    \ of the actual scope granted.\n   If the client omits the scope parameter when\
    \ requesting\n   authorization, the authorization server MUST either process the\n\
    \   request using a pre-defined default value or fail the request\n   indicating\
    \ an invalid scope.  The authorization server SHOULD\n   document its scope requirements\
    \ and default value (if defined).\n"
- title: 4.  Obtaining Authorization
  contents:
  - "4.  Obtaining Authorization\n   To request an access token, the client obtains\
    \ authorization from the\n   resource owner.  The authorization is expressed in\
    \ the form of an\n   authorization grant, which the client uses to request the\
    \ access\n   token.  OAuth defines four grant types: authorization code, implicit,\n\
    \   resource owner password credentials, and client credentials.  It also\n  \
    \ provides an extension mechanism for defining additional grant types.\n"
- title: 4.1.  Authorization Code Grant
  contents:
  - "4.1.  Authorization Code Grant\n   The authorization code grant type is used\
    \ to obtain both access\n   tokens and refresh tokens and is optimized for confidential\
    \ clients.\n   Since this is a redirection-based flow, the client must be capable\
    \ of\n   interacting with the resource owner's user-agent (typically a web\n \
    \  browser) and capable of receiving incoming requests (via redirection)\n   from\
    \ the authorization server.\n     +----------+\n     | Resource |\n     |   Owner\
    \  |\n     |          |\n     +----------+\n          ^\n          |\n       \
    \  (B)\n     +----|-----+          Client Identifier      +---------------+\n\
    \     |         -+----(A)-- & Redirection URI ---->|               |\n     | \
    \ User-   |                                 | Authorization |\n     |  Agent \
    \ -+----(B)-- User authenticates --->|     Server    |\n     |          |    \
    \                             |               |\n     |         -+----(C)-- Authorization\
    \ Code ---<|               |\n     +-|----|---+                              \
    \   +---------------+\n       |    |                                         ^\
    \      v\n      (A)  (C)                                        |      |\n   \
    \    |    |                                         |      |\n       ^    v  \
    \                                       |      |\n     +---------+           \
    \                           |      |\n     |         |>---(D)-- Authorization\
    \ Code ---------'      |\n     |  Client |          & Redirection URI        \
    \          |\n     |         |                                             |\n\
    \     |         |<---(E)----- Access Token -------------------'\n     +---------+\
    \       (w/ Optional Refresh Token)\n   Note: The lines illustrating steps (A),\
    \ (B), and (C) are broken into\n   two parts as they pass through the user-agent.\n\
    \                     Figure 3: Authorization Code Flow\n   The flow illustrated\
    \ in Figure 3 includes the following steps:\n   (A)  The client initiates the\
    \ flow by directing the resource owner's\n        user-agent to the authorization\
    \ endpoint.  The client includes\n        its client identifier, requested scope,\
    \ local state, and a\n        redirection URI to which the authorization server\
    \ will send the\n        user-agent back once access is granted (or denied).\n\
    \   (B)  The authorization server authenticates the resource owner (via\n    \
    \    the user-agent) and establishes whether the resource owner\n        grants\
    \ or denies the client's access request.\n   (C)  Assuming the resource owner\
    \ grants access, the authorization\n        server redirects the user-agent back\
    \ to the client using the\n        redirection URI provided earlier (in the request\
    \ or during\n        client registration).  The redirection URI includes an\n\
    \        authorization code and any local state provided by the client\n     \
    \   earlier.\n   (D)  The client requests an access token from the authorization\n\
    \        server's token endpoint by including the authorization code\n       \
    \ received in the previous step.  When making the request, the\n        client\
    \ authenticates with the authorization server.  The client\n        includes the\
    \ redirection URI used to obtain the authorization\n        code for verification.\n\
    \   (E)  The authorization server authenticates the client, validates the\n  \
    \      authorization code, and ensures that the redirection URI\n        received\
    \ matches the URI used to redirect the client in\n        step (C).  If valid,\
    \ the authorization server responds back with\n        an access token and, optionally,\
    \ a refresh token.\n"
- title: 4.1.1.  Authorization Request
  contents:
  - "4.1.1.  Authorization Request\n   The client constructs the request URI by adding\
    \ the following\n   parameters to the query component of the authorization endpoint\
    \ URI\n   using the \"application/x-www-form-urlencoded\" format, per Appendix\
    \ B:\n   response_type\n         REQUIRED.  Value MUST be set to \"code\".\n \
    \  client_id\n         REQUIRED.  The client identifier as described in Section\
    \ 2.2.\n   redirect_uri\n         OPTIONAL.  As described in Section 3.1.2.\n\
    \   scope\n         OPTIONAL.  The scope of the access request as described by\n\
    \         Section 3.3.\n   state\n         RECOMMENDED.  An opaque value used\
    \ by the client to maintain\n         state between the request and callback.\
    \  The authorization\n         server includes this value when redirecting the\
    \ user-agent back\n         to the client.  The parameter SHOULD be used for preventing\n\
    \         cross-site request forgery as described in Section 10.12.\n   The client\
    \ directs the resource owner to the constructed URI using an\n   HTTP redirection\
    \ response, or by other means available to it via the\n   user-agent.\n   For\
    \ example, the client directs the user-agent to make the following\n   HTTP request\
    \ using TLS (with extra line breaks for display purposes\n   only):\n    GET /authorize?response_type=code&client_id=s6BhdRkqt3&state=xyz\n\
    \        &redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb HTTP/1.1\n  \
    \  Host: server.example.com\n   The authorization server validates the request\
    \ to ensure that all\n   required parameters are present and valid.  If the request\
    \ is valid,\n   the authorization server authenticates the resource owner and\
    \ obtains\n   an authorization decision (by asking the resource owner or by\n\
    \   establishing approval via other means).\n   When a decision is established,\
    \ the authorization server directs the\n   user-agent to the provided client redirection\
    \ URI using an HTTP\n   redirection response, or by other means available to it\
    \ via the\n   user-agent.\n"
- title: 4.1.2.  Authorization Response
  contents:
  - "4.1.2.  Authorization Response\n   If the resource owner grants the access request,\
    \ the authorization\n   server issues an authorization code and delivers it to\
    \ the client by\n   adding the following parameters to the query component of\
    \ the\n   redirection URI using the \"application/x-www-form-urlencoded\" format,\n\
    \   per Appendix B:\n   code\n         REQUIRED.  The authorization code generated\
    \ by the\n         authorization server.  The authorization code MUST expire\n\
    \         shortly after it is issued to mitigate the risk of leaks.  A\n     \
    \    maximum authorization code lifetime of 10 minutes is\n         RECOMMENDED.\
    \  The client MUST NOT use the authorization code\n         more than once.  If\
    \ an authorization code is used more than\n         once, the authorization server\
    \ MUST deny the request and SHOULD\n         revoke (when possible) all tokens\
    \ previously issued based on\n         that authorization code.  The authorization\
    \ code is bound to\n         the client identifier and redirection URI.\n   state\n\
    \         REQUIRED if the \"state\" parameter was present in the client\n    \
    \     authorization request.  The exact value received from the\n         client.\n\
    \   For example, the authorization server redirects the user-agent by\n   sending\
    \ the following HTTP response:\n     HTTP/1.1 302 Found\n     Location: https://client.example.com/cb?code=SplxlOBeZQQYbYS6WxSbIA\n\
    \               &state=xyz\n   The client MUST ignore unrecognized response parameters.\
    \  The\n   authorization code string size is left undefined by this\n   specification.\
    \  The client should avoid making assumptions about code\n   value sizes.  The\
    \ authorization server SHOULD document the size of\n   any value it issues.\n"
- title: 4.1.2.1.  Error Response
  contents:
  - "4.1.2.1.  Error Response\n   If the request fails due to a missing, invalid,\
    \ or mismatching\n   redirection URI, or if the client identifier is missing or\
    \ invalid,\n   the authorization server SHOULD inform the resource owner of the\n\
    \   error and MUST NOT automatically redirect the user-agent to the\n   invalid\
    \ redirection URI.\n   If the resource owner denies the access request or if the\
    \ request\n   fails for reasons other than a missing or invalid redirection URI,\n\
    \   the authorization server informs the client by adding the following\n   parameters\
    \ to the query component of the redirection URI using the\n   \"application/x-www-form-urlencoded\"\
    \ format, per Appendix B:\n   error\n         REQUIRED.  A single ASCII [USASCII]\
    \ error code from the\n         following:\n         invalid_request\n       \
    \        The request is missing a required parameter, includes an\n          \
    \     invalid parameter value, includes a parameter more than\n              \
    \ once, or is otherwise malformed.\n         unauthorized_client\n           \
    \    The client is not authorized to request an authorization\n              \
    \ code using this method.\n         access_denied\n               The resource\
    \ owner or authorization server denied the\n               request.\n        \
    \ unsupported_response_type\n               The authorization server does not\
    \ support obtaining an\n               authorization code using this method.\n\
    \         invalid_scope\n               The requested scope is invalid, unknown,\
    \ or malformed.\n         server_error\n               The authorization server\
    \ encountered an unexpected\n               condition that prevented it from fulfilling\
    \ the request.\n               (This error code is needed because a 500 Internal\
    \ Server\n               Error HTTP status code cannot be returned to the client\n\
    \               via an HTTP redirect.)\n         temporarily_unavailable\n   \
    \            The authorization server is currently unable to handle\n        \
    \       the request due to a temporary overloading or maintenance\n          \
    \     of the server.  (This error code is needed because a 503\n             \
    \  Service Unavailable HTTP status code cannot be returned\n               to\
    \ the client via an HTTP redirect.)\n         Values for the \"error\" parameter\
    \ MUST NOT include characters\n         outside the set %x20-21 / %x23-5B / %x5D-7E.\n\
    \   error_description\n         OPTIONAL.  Human-readable ASCII [USASCII] text\
    \ providing\n         additional information, used to assist the client developer\
    \ in\n         understanding the error that occurred.\n         Values for the\
    \ \"error_description\" parameter MUST NOT include\n         characters outside\
    \ the set %x20-21 / %x23-5B / %x5D-7E.\n   error_uri\n         OPTIONAL.  A URI\
    \ identifying a human-readable web page with\n         information about the error,\
    \ used to provide the client\n         developer with additional information about\
    \ the error.\n         Values for the \"error_uri\" parameter MUST conform to\
    \ the\n         URI-reference syntax and thus MUST NOT include characters\n  \
    \       outside the set %x21 / %x23-5B / %x5D-7E.\n   state\n         REQUIRED\
    \ if a \"state\" parameter was present in the client\n         authorization request.\
    \  The exact value received from the\n         client.\n   For example, the authorization\
    \ server redirects the user-agent by\n   sending the following HTTP response:\n\
    \   HTTP/1.1 302 Found\n   Location: https://client.example.com/cb?error=access_denied&state=xyz\n"
- title: 4.1.3.  Access Token Request
  contents:
  - "4.1.3.  Access Token Request\n   The client makes a request to the token endpoint\
    \ by sending the\n   following parameters using the \"application/x-www-form-urlencoded\"\
    \n   format per Appendix B with a character encoding of UTF-8 in the HTTP\n  \
    \ request entity-body:\n   grant_type\n         REQUIRED.  Value MUST be set to\
    \ \"authorization_code\".\n   code\n         REQUIRED.  The authorization code\
    \ received from the\n         authorization server.\n   redirect_uri\n       \
    \  REQUIRED, if the \"redirect_uri\" parameter was included in the\n         authorization\
    \ request as described in Section 4.1.1, and their\n         values MUST be identical.\n\
    \   client_id\n         REQUIRED, if the client is not authenticating with the\n\
    \         authorization server as described in Section 3.2.1.\n   If the client\
    \ type is confidential or the client was issued client\n   credentials (or assigned\
    \ other authentication requirements), the\n   client MUST authenticate with the\
    \ authorization server as described\n   in Section 3.2.1.\n   For example, the\
    \ client makes the following HTTP request using TLS\n   (with extra line breaks\
    \ for display purposes only):\n     POST /token HTTP/1.1\n     Host: server.example.com\n\
    \     Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW\n     Content-Type: application/x-www-form-urlencoded\n\
    \     grant_type=authorization_code&code=SplxlOBeZQQYbYS6WxSbIA\n     &redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb\n\
    \   The authorization server MUST:\n   o  require client authentication for confidential\
    \ clients or for any\n      client that was issued client credentials (or with\
    \ other\n      authentication requirements),\n   o  authenticate the client if\
    \ client authentication is included,\n   o  ensure that the authorization code\
    \ was issued to the authenticated\n      confidential client, or if the client\
    \ is public, ensure that the\n      code was issued to \"client_id\" in the request,\n\
    \   o  verify that the authorization code is valid, and\n   o  ensure that the\
    \ \"redirect_uri\" parameter is present if the\n      \"redirect_uri\" parameter\
    \ was included in the initial authorization\n      request as described in Section\
    \ 4.1.1, and if included ensure that\n      their values are identical.\n"
- title: 4.1.4.  Access Token Response
  contents:
  - "4.1.4.  Access Token Response\n   If the access token request is valid and authorized,\
    \ the\n   authorization server issues an access token and optional refresh\n \
    \  token as described in Section 5.1.  If the request client\n   authentication\
    \ failed or is invalid, the authorization server returns\n   an error response\
    \ as described in Section 5.2.\n   An example successful response:\n     HTTP/1.1\
    \ 200 OK\n     Content-Type: application/json;charset=UTF-8\n     Cache-Control:\
    \ no-store\n     Pragma: no-cache\n     {\n       \"access_token\":\"2YotnFZFEjr1zCsicMWpAA\"\
    ,\n       \"token_type\":\"example\",\n       \"expires_in\":3600,\n       \"\
    refresh_token\":\"tGzv3JOkF0XG5Qx2TlKWIA\",\n       \"example_parameter\":\"example_value\"\
    \n     }\n"
- title: 4.2.  Implicit Grant
  contents:
  - "4.2.  Implicit Grant\n   The implicit grant type is used to obtain access tokens\
    \ (it does not\n   support the issuance of refresh tokens) and is optimized for\
    \ public\n   clients known to operate a particular redirection URI.  These clients\n\
    \   are typically implemented in a browser using a scripting language\n   such\
    \ as JavaScript.\n   Since this is a redirection-based flow, the client must be\
    \ capable of\n   interacting with the resource owner's user-agent (typically a\
    \ web\n   browser) and capable of receiving incoming requests (via redirection)\n\
    \   from the authorization server.\n   Unlike the authorization code grant type,\
    \ in which the client makes\n   separate requests for authorization and for an\
    \ access token, the\n   client receives the access token as the result of the\
    \ authorization\n   request.\n   The implicit grant type does not include client\
    \ authentication, and\n   relies on the presence of the resource owner and the\
    \ registration of\n   the redirection URI.  Because the access token is encoded\
    \ into the\n   redirection URI, it may be exposed to the resource owner and other\n\
    \   applications residing on the same device.\n     +----------+\n     | Resource\
    \ |\n     |  Owner   |\n     |          |\n     +----------+\n          ^\n  \
    \        |\n         (B)\n     +----|-----+          Client Identifier     +---------------+\n\
    \     |         -+----(A)-- & Redirection URI --->|               |\n     |  User-\
    \   |                                | Authorization |\n     |  Agent  -|----(B)--\
    \ User authenticates -->|     Server    |\n     |          |                 \
    \               |               |\n     |          |<---(C)--- Redirection URI\
    \ ----<|               |\n     |          |          with Access Token     +---------------+\n\
    \     |          |            in Fragment\n     |          |                 \
    \               +---------------+\n     |          |----(D)--- Redirection URI\
    \ ---->|   Web-Hosted  |\n     |          |          without Fragment      | \
    \    Client    |\n     |          |                                |    Resource\
    \   |\n     |     (F)  |<---(E)------- Script ---------<|               |\n  \
    \   |          |                                +---------------+\n     +-|--------+\n\
    \       |    |\n      (A)  (G) Access Token\n       |    |\n       ^    v\n  \
    \   +---------+\n     |         |\n     |  Client |\n     |         |\n     +---------+\n\
    \   Note: The lines illustrating steps (A) and (B) are broken into two\n   parts\
    \ as they pass through the user-agent.\n                       Figure 4: Implicit\
    \ Grant Flow\n   The flow illustrated in Figure 4 includes the following steps:\n\
    \   (A)  The client initiates the flow by directing the resource owner's\n   \
    \     user-agent to the authorization endpoint.  The client includes\n       \
    \ its client identifier, requested scope, local state, and a\n        redirection\
    \ URI to which the authorization server will send the\n        user-agent back\
    \ once access is granted (or denied).\n   (B)  The authorization server authenticates\
    \ the resource owner (via\n        the user-agent) and establishes whether the\
    \ resource owner\n        grants or denies the client's access request.\n   (C)\
    \  Assuming the resource owner grants access, the authorization\n        server\
    \ redirects the user-agent back to the client using the\n        redirection URI\
    \ provided earlier.  The redirection URI includes\n        the access token in\
    \ the URI fragment.\n   (D)  The user-agent follows the redirection instructions\
    \ by making a\n        request to the web-hosted client resource (which does not\n\
    \        include the fragment per [RFC2616]).  The user-agent retains the\n  \
    \      fragment information locally.\n   (E)  The web-hosted client resource returns\
    \ a web page (typically an\n        HTML document with an embedded script) capable\
    \ of accessing the\n        full redirection URI including the fragment retained\
    \ by the\n        user-agent, and extracting the access token (and other\n   \
    \     parameters) contained in the fragment.\n   (F)  The user-agent executes\
    \ the script provided by the web-hosted\n        client resource locally, which\
    \ extracts the access token.\n   (G)  The user-agent passes the access token to\
    \ the client.\n   See Sections 1.3.2 and 9 for background on using the implicit\
    \ grant.\n   See Sections 10.3 and 10.16 for important security considerations\n\
    \   when using the implicit grant.\n"
- title: 4.2.1.  Authorization Request
  contents:
  - "4.2.1.  Authorization Request\n   The client constructs the request URI by adding\
    \ the following\n   parameters to the query component of the authorization endpoint\
    \ URI\n   using the \"application/x-www-form-urlencoded\" format, per Appendix\
    \ B:\n   response_type\n         REQUIRED.  Value MUST be set to \"token\".\n\
    \   client_id\n         REQUIRED.  The client identifier as described in Section\
    \ 2.2.\n   redirect_uri\n         OPTIONAL.  As described in Section 3.1.2.\n\
    \   scope\n         OPTIONAL.  The scope of the access request as described by\n\
    \         Section 3.3.\n   state\n         RECOMMENDED.  An opaque value used\
    \ by the client to maintain\n         state between the request and callback.\
    \  The authorization\n         server includes this value when redirecting the\
    \ user-agent back\n         to the client.  The parameter SHOULD be used for preventing\n\
    \         cross-site request forgery as described in Section 10.12.\n   The client\
    \ directs the resource owner to the constructed URI using an\n   HTTP redirection\
    \ response, or by other means available to it via the\n   user-agent.\n   For\
    \ example, the client directs the user-agent to make the following\n   HTTP request\
    \ using TLS (with extra line breaks for display purposes\n   only):\n    GET /authorize?response_type=token&client_id=s6BhdRkqt3&state=xyz\n\
    \        &redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb HTTP/1.1\n  \
    \  Host: server.example.com\n   The authorization server validates the request\
    \ to ensure that all\n   required parameters are present and valid.  The authorization\
    \ server\n   MUST verify that the redirection URI to which it will redirect the\n\
    \   access token matches a redirection URI registered by the client as\n   described\
    \ in Section 3.1.2.\n   If the request is valid, the authorization server authenticates\
    \ the\n   resource owner and obtains an authorization decision (by asking the\n\
    \   resource owner or by establishing approval via other means).\n   When a decision\
    \ is established, the authorization server directs the\n   user-agent to the provided\
    \ client redirection URI using an HTTP\n   redirection response, or by other means\
    \ available to it via the\n   user-agent.\n"
- title: 4.2.2.  Access Token Response
  contents:
  - "4.2.2.  Access Token Response\n   If the resource owner grants the access request,\
    \ the authorization\n   server issues an access token and delivers it to the client\
    \ by adding\n   the following parameters to the fragment component of the redirection\n\
    \   URI using the \"application/x-www-form-urlencoded\" format, per\n   Appendix\
    \ B:\n   access_token\n         REQUIRED.  The access token issued by the authorization\
    \ server.\n   token_type\n         REQUIRED.  The type of the token issued as\
    \ described in\n         Section 7.1.  Value is case insensitive.\n   expires_in\n\
    \         RECOMMENDED.  The lifetime in seconds of the access token.  For\n  \
    \       example, the value \"3600\" denotes that the access token will\n     \
    \    expire in one hour from the time the response was generated.\n         If\
    \ omitted, the authorization server SHOULD provide the\n         expiration time\
    \ via other means or document the default value.\n   scope\n         OPTIONAL,\
    \ if identical to the scope requested by the client;\n         otherwise, REQUIRED.\
    \  The scope of the access token as\n         described by Section 3.3.\n   state\n\
    \         REQUIRED if the \"state\" parameter was present in the client\n    \
    \     authorization request.  The exact value received from the\n         client.\n\
    \   The authorization server MUST NOT issue a refresh token.\n   For example,\
    \ the authorization server redirects the user-agent by\n   sending the following\
    \ HTTP response (with extra line breaks for\n   display purposes only):\n    \
    \ HTTP/1.1 302 Found\n     Location: http://example.com/cb#access_token=2YotnFZFEjr1zCsicMWpAA\n\
    \               &state=xyz&token_type=example&expires_in=3600\n   Developers should\
    \ note that some user-agents do not support the\n   inclusion of a fragment component\
    \ in the HTTP \"Location\" response\n   header field.  Such clients will require\
    \ using other methods for\n   redirecting the client than a 3xx redirection response\
    \ -- for\n   example, returning an HTML page that includes a 'continue' button\n\
    \   with an action linked to the redirection URI.\n   The client MUST ignore unrecognized\
    \ response parameters.  The access\n   token string size is left undefined by\
    \ this specification.  The\n   client should avoid making assumptions about value\
    \ sizes.  The\n   authorization server SHOULD document the size of any value it\
    \ issues.\n"
- title: 4.2.2.1.  Error Response
  contents:
  - "4.2.2.1.  Error Response\n   If the request fails due to a missing, invalid,\
    \ or mismatching\n   redirection URI, or if the client identifier is missing or\
    \ invalid,\n   the authorization server SHOULD inform the resource owner of the\n\
    \   error and MUST NOT automatically redirect the user-agent to the\n   invalid\
    \ redirection URI.\n   If the resource owner denies the access request or if the\
    \ request\n   fails for reasons other than a missing or invalid redirection URI,\n\
    \   the authorization server informs the client by adding the following\n   parameters\
    \ to the fragment component of the redirection URI using the\n   \"application/x-www-form-urlencoded\"\
    \ format, per Appendix B:\n   error\n         REQUIRED.  A single ASCII [USASCII]\
    \ error code from the\n         following:\n         invalid_request\n       \
    \        The request is missing a required parameter, includes an\n          \
    \     invalid parameter value, includes a parameter more than\n              \
    \ once, or is otherwise malformed.\n         unauthorized_client\n           \
    \    The client is not authorized to request an access token\n               using\
    \ this method.\n         access_denied\n               The resource owner or authorization\
    \ server denied the\n               request.\n         unsupported_response_type\n\
    \               The authorization server does not support obtaining an\n     \
    \          access token using this method.\n         invalid_scope\n         \
    \      The requested scope is invalid, unknown, or malformed.\n         server_error\n\
    \               The authorization server encountered an unexpected\n         \
    \      condition that prevented it from fulfilling the request.\n            \
    \   (This error code is needed because a 500 Internal Server\n               Error\
    \ HTTP status code cannot be returned to the client\n               via an HTTP\
    \ redirect.)\n         temporarily_unavailable\n               The authorization\
    \ server is currently unable to handle\n               the request due to a temporary\
    \ overloading or maintenance\n               of the server.  (This error code\
    \ is needed because a 503\n               Service Unavailable HTTP status code\
    \ cannot be returned\n               to the client via an HTTP redirect.)\n  \
    \       Values for the \"error\" parameter MUST NOT include characters\n     \
    \    outside the set %x20-21 / %x23-5B / %x5D-7E.\n   error_description\n    \
    \     OPTIONAL.  Human-readable ASCII [USASCII] text providing\n         additional\
    \ information, used to assist the client developer in\n         understanding\
    \ the error that occurred.\n         Values for the \"error_description\" parameter\
    \ MUST NOT include\n         characters outside the set %x20-21 / %x23-5B / %x5D-7E.\n\
    \   error_uri\n         OPTIONAL.  A URI identifying a human-readable web page\
    \ with\n         information about the error, used to provide the client\n   \
    \      developer with additional information about the error.\n         Values\
    \ for the \"error_uri\" parameter MUST conform to the\n         URI-reference\
    \ syntax and thus MUST NOT include characters\n         outside the set %x21 /\
    \ %x23-5B / %x5D-7E.\n   state\n         REQUIRED if a \"state\" parameter was\
    \ present in the client\n         authorization request.  The exact value received\
    \ from the\n         client.\n   For example, the authorization server redirects\
    \ the user-agent by\n   sending the following HTTP response:\n   HTTP/1.1 302\
    \ Found\n   Location: https://client.example.com/cb#error=access_denied&state=xyz\n"
- title: 4.3.  Resource Owner Password Credentials Grant
  contents:
  - "4.3.  Resource Owner Password Credentials Grant\n   The resource owner password\
    \ credentials grant type is suitable in\n   cases where the resource owner has\
    \ a trust relationship with the\n   client, such as the device operating system\
    \ or a highly privileged\n   application.  The authorization server should take\
    \ special care when\n   enabling this grant type and only allow it when other\
    \ flows are not\n   viable.\n   This grant type is suitable for clients capable\
    \ of obtaining the\n   resource owner's credentials (username and password, typically\
    \ using\n   an interactive form).  It is also used to migrate existing clients\n\
    \   using direct authentication schemes such as HTTP Basic or Digest\n   authentication\
    \ to OAuth by converting the stored credentials to an\n   access token.\n    \
    \ +----------+\n     | Resource |\n     |  Owner   |\n     |          |\n    \
    \ +----------+\n          v\n          |    Resource Owner\n         (A) Password\
    \ Credentials\n          |\n          v\n     +---------+                    \
    \              +---------------+\n     |         |>--(B)---- Resource Owner ------->|\
    \               |\n     |         |         Password Credentials     | Authorization\
    \ |\n     | Client  |                                  |     Server    |\n   \
    \  |         |<--(C)---- Access Token ---------<|               |\n     |    \
    \     |    (w/ Optional Refresh Token)   |               |\n     +---------+ \
    \                                 +---------------+\n            Figure 5: Resource\
    \ Owner Password Credentials Flow\n   The flow illustrated in Figure 5 includes\
    \ the following steps:\n   (A)  The resource owner provides the client with its\
    \ username and\n        password.\n   (B)  The client requests an access token\
    \ from the authorization\n        server's token endpoint by including the credentials\
    \ received\n        from the resource owner.  When making the request, the client\n\
    \        authenticates with the authorization server.\n   (C)  The authorization\
    \ server authenticates the client and validates\n        the resource owner credentials,\
    \ and if valid, issues an access\n        token.\n"
- title: 4.3.1.  Authorization Request and Response
  contents:
  - "4.3.1.  Authorization Request and Response\n   The method through which the client\
    \ obtains the resource owner\n   credentials is beyond the scope of this specification.\
    \  The client\n   MUST discard the credentials once an access token has been obtained.\n"
- title: 4.3.2.  Access Token Request
  contents:
  - "4.3.2.  Access Token Request\n   The client makes a request to the token endpoint\
    \ by adding the\n   following parameters using the \"application/x-www-form-urlencoded\"\
    \n   format per Appendix B with a character encoding of UTF-8 in the HTTP\n  \
    \ request entity-body:\n   grant_type\n         REQUIRED.  Value MUST be set to\
    \ \"password\".\n   username\n         REQUIRED.  The resource owner username.\n\
    \   password\n         REQUIRED.  The resource owner password.\n   scope\n   \
    \      OPTIONAL.  The scope of the access request as described by\n         Section\
    \ 3.3.\n   If the client type is confidential or the client was issued client\n\
    \   credentials (or assigned other authentication requirements), the\n   client\
    \ MUST authenticate with the authorization server as described\n   in Section\
    \ 3.2.1.\n   For example, the client makes the following HTTP request using\n\
    \   transport-layer security (with extra line breaks for display purposes\n  \
    \ only):\n     POST /token HTTP/1.1\n     Host: server.example.com\n     Authorization:\
    \ Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW\n     Content-Type: application/x-www-form-urlencoded\n\
    \     grant_type=password&username=johndoe&password=A3ddj3w\n   The authorization\
    \ server MUST:\n   o  require client authentication for confidential clients or\
    \ for any\n      client that was issued client credentials (or with other\n  \
    \    authentication requirements),\n   o  authenticate the client if client authentication\
    \ is included, and\n   o  validate the resource owner password credentials using\
    \ its\n      existing password validation algorithm.\n   Since this access token\
    \ request utilizes the resource owner's\n   password, the authorization server\
    \ MUST protect the endpoint against\n   brute force attacks (e.g., using rate-limitation\
    \ or generating\n   alerts).\n"
- title: 4.3.3.  Access Token Response
  contents:
  - "4.3.3.  Access Token Response\n   If the access token request is valid and authorized,\
    \ the\n   authorization server issues an access token and optional refresh\n \
    \  token as described in Section 5.1.  If the request failed client\n   authentication\
    \ or is invalid, the authorization server returns an\n   error response as described\
    \ in Section 5.2.\n   An example successful response:\n     HTTP/1.1 200 OK\n\
    \     Content-Type: application/json;charset=UTF-8\n     Cache-Control: no-store\n\
    \     Pragma: no-cache\n     {\n       \"access_token\":\"2YotnFZFEjr1zCsicMWpAA\"\
    ,\n       \"token_type\":\"example\",\n       \"expires_in\":3600,\n       \"\
    refresh_token\":\"tGzv3JOkF0XG5Qx2TlKWIA\",\n       \"example_parameter\":\"example_value\"\
    \n     }\n"
- title: 4.4.  Client Credentials Grant
  contents:
  - "4.4.  Client Credentials Grant\n   The client can request an access token using\
    \ only its client\n   credentials (or other supported means of authentication)\
    \ when the\n   client is requesting access to the protected resources under its\n\
    \   control, or those of another resource owner that have been previously\n  \
    \ arranged with the authorization server (the method of which is beyond\n   the\
    \ scope of this specification).\n   The client credentials grant type MUST only\
    \ be used by confidential\n   clients.\n     +---------+                     \
    \             +---------------+\n     |         |                            \
    \      |               |\n     |         |>--(A)- Client Authentication --->|\
    \ Authorization |\n     | Client  |                                  |     Server\
    \    |\n     |         |<--(B)---- Access Token ---------<|               |\n\
    \     |         |                                  |               |\n     +---------+\
    \                                  +---------------+\n                     Figure\
    \ 6: Client Credentials Flow\n   The flow illustrated in Figure 6 includes the\
    \ following steps:\n   (A)  The client authenticates with the authorization server\
    \ and\n        requests an access token from the token endpoint.\n   (B)  The\
    \ authorization server authenticates the client, and if valid,\n        issues\
    \ an access token.\n"
- title: 4.4.1.  Authorization Request and Response
  contents:
  - "4.4.1.  Authorization Request and Response\n   Since the client authentication\
    \ is used as the authorization grant,\n   no additional authorization request\
    \ is needed.\n"
- title: 4.4.2.  Access Token Request
  contents:
  - "4.4.2.  Access Token Request\n   The client makes a request to the token endpoint\
    \ by adding the\n   following parameters using the \"application/x-www-form-urlencoded\"\
    \n   format per Appendix B with a character encoding of UTF-8 in the HTTP\n  \
    \ request entity-body:\n   grant_type\n         REQUIRED.  Value MUST be set to\
    \ \"client_credentials\".\n   scope\n         OPTIONAL.  The scope of the access\
    \ request as described by\n         Section 3.3.\n   The client MUST authenticate\
    \ with the authorization server as\n   described in Section 3.2.1.\n   For example,\
    \ the client makes the following HTTP request using\n   transport-layer security\
    \ (with extra line breaks for display purposes\n   only):\n     POST /token HTTP/1.1\n\
    \     Host: server.example.com\n     Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW\n\
    \     Content-Type: application/x-www-form-urlencoded\n     grant_type=client_credentials\n\
    \   The authorization server MUST authenticate the client.\n"
- title: 4.4.3.  Access Token Response
  contents:
  - "4.4.3.  Access Token Response\n   If the access token request is valid and authorized,\
    \ the\n   authorization server issues an access token as described in\n   Section\
    \ 5.1.  A refresh token SHOULD NOT be included.  If the request\n   failed client\
    \ authentication or is invalid, the authorization server\n   returns an error\
    \ response as described in Section 5.2.\n   An example successful response:\n\
    \     HTTP/1.1 200 OK\n     Content-Type: application/json;charset=UTF-8\n   \
    \  Cache-Control: no-store\n     Pragma: no-cache\n     {\n       \"access_token\"\
    :\"2YotnFZFEjr1zCsicMWpAA\",\n       \"token_type\":\"example\",\n       \"expires_in\"\
    :3600,\n       \"example_parameter\":\"example_value\"\n     }\n"
- title: 4.5.  Extension Grants
  contents:
  - "4.5.  Extension Grants\n   The client uses an extension grant type by specifying\
    \ the grant type\n   using an absolute URI (defined by the authorization server)\
    \ as the\n   value of the \"grant_type\" parameter of the token endpoint, and\
    \ by\n   adding any additional parameters necessary.\n   For example, to request\
    \ an access token using a Security Assertion\n   Markup Language (SAML) 2.0 assertion\
    \ grant type as defined by\n   [OAuth-SAML2], the client could make the following\
    \ HTTP request using\n   TLS (with extra line breaks for display purposes only):\n\
    \     POST /token HTTP/1.1\n     Host: server.example.com\n     Content-Type:\
    \ application/x-www-form-urlencoded\n     grant_type=urn%3Aietf%3Aparams%3Aoauth%3Agrant-type%3Asaml2-\n\
    \     bearer&assertion=PEFzc2VydGlvbiBJc3N1ZUluc3RhbnQ9IjIwMTEtMDU\n     [...omitted\
    \ for brevity...]aG5TdGF0ZW1lbnQ-PC9Bc3NlcnRpb24-\n   If the access token request\
    \ is valid and authorized, the\n   authorization server issues an access token\
    \ and optional refresh\n   token as described in Section 5.1.  If the request\
    \ failed client\n   authentication or is invalid, the authorization server returns\
    \ an\n   error response as described in Section 5.2.\n"
- title: 5.  Issuing an Access Token
  contents:
  - "5.  Issuing an Access Token\n   If the access token request is valid and authorized,\
    \ the\n   authorization server issues an access token and optional refresh\n \
    \  token as described in Section 5.1.  If the request failed client\n   authentication\
    \ or is invalid, the authorization server returns an\n   error response as described\
    \ in Section 5.2.\n"
- title: 5.1.  Successful Response
  contents:
  - "5.1.  Successful Response\n   The authorization server issues an access token\
    \ and optional refresh\n   token, and constructs the response by adding the following\
    \ parameters\n   to the entity-body of the HTTP response with a 200 (OK) status\
    \ code:\n   access_token\n         REQUIRED.  The access token issued by the authorization\
    \ server.\n   token_type\n         REQUIRED.  The type of the token issued as\
    \ described in\n         Section 7.1.  Value is case insensitive.\n   expires_in\n\
    \         RECOMMENDED.  The lifetime in seconds of the access token.  For\n  \
    \       example, the value \"3600\" denotes that the access token will\n     \
    \    expire in one hour from the time the response was generated.\n         If\
    \ omitted, the authorization server SHOULD provide the\n         expiration time\
    \ via other means or document the default value.\n   refresh_token\n         OPTIONAL.\
    \  The refresh token, which can be used to obtain new\n         access tokens\
    \ using the same authorization grant as described\n         in Section 6.\n  \
    \ scope\n         OPTIONAL, if identical to the scope requested by the client;\n\
    \         otherwise, REQUIRED.  The scope of the access token as\n         described\
    \ by Section 3.3.\n   The parameters are included in the entity-body of the HTTP\
    \ response\n   using the \"application/json\" media type as defined by [RFC4627].\
    \  The\n   parameters are serialized into a JavaScript Object Notation (JSON)\n\
    \   structure by adding each parameter at the highest structure level.\n   Parameter\
    \ names and string values are included as JSON strings.\n   Numerical values are\
    \ included as JSON numbers.  The order of\n   parameters does not matter and can\
    \ vary.\n   The authorization server MUST include the HTTP \"Cache-Control\"\n\
    \   response header field [RFC2616] with a value of \"no-store\" in any\n   response\
    \ containing tokens, credentials, or other sensitive\n   information, as well\
    \ as the \"Pragma\" response header field [RFC2616]\n   with a value of \"no-cache\"\
    .\n   For example:\n     HTTP/1.1 200 OK\n     Content-Type: application/json;charset=UTF-8\n\
    \     Cache-Control: no-store\n     Pragma: no-cache\n     {\n       \"access_token\"\
    :\"2YotnFZFEjr1zCsicMWpAA\",\n       \"token_type\":\"example\",\n       \"expires_in\"\
    :3600,\n       \"refresh_token\":\"tGzv3JOkF0XG5Qx2TlKWIA\",\n       \"example_parameter\"\
    :\"example_value\"\n     }\n   The client MUST ignore unrecognized value names\
    \ in the response.  The\n   sizes of tokens and other values received from the\
    \ authorization\n   server are left undefined.  The client should avoid making\n\
    \   assumptions about value sizes.  The authorization server SHOULD\n   document\
    \ the size of any value it issues.\n"
- title: 5.2.  Error Response
  contents:
  - "5.2.  Error Response\n   The authorization server responds with an HTTP 400 (Bad\
    \ Request)\n   status code (unless specified otherwise) and includes the following\n\
    \   parameters with the response:\n   error\n         REQUIRED.  A single ASCII\
    \ [USASCII] error code from the\n         following:\n         invalid_request\n\
    \               The request is missing a required parameter, includes an\n   \
    \            unsupported parameter value (other than grant type),\n          \
    \     repeats a parameter, includes multiple credentials,\n               utilizes\
    \ more than one mechanism for authenticating the\n               client, or is\
    \ otherwise malformed.\n         invalid_client\n               Client authentication\
    \ failed (e.g., unknown client, no\n               client authentication included,\
    \ or unsupported\n               authentication method).  The authorization server\
    \ MAY\n               return an HTTP 401 (Unauthorized) status code to indicate\n\
    \               which HTTP authentication schemes are supported.  If the\n   \
    \            client attempted to authenticate via the \"Authorization\"\n    \
    \           request header field, the authorization server MUST\n            \
    \   respond with an HTTP 401 (Unauthorized) status code and\n               include\
    \ the \"WWW-Authenticate\" response header field\n               matching the\
    \ authentication scheme used by the client.\n         invalid_grant\n        \
    \       The provided authorization grant (e.g., authorization\n              \
    \ code, resource owner credentials) or refresh token is\n               invalid,\
    \ expired, revoked, does not match the redirection\n               URI used in\
    \ the authorization request, or was issued to\n               another client.\n\
    \         unauthorized_client\n               The authenticated client is not\
    \ authorized to use this\n               authorization grant type.\n         unsupported_grant_type\n\
    \               The authorization grant type is not supported by the\n       \
    \        authorization server.\n         invalid_scope\n               The requested\
    \ scope is invalid, unknown, malformed, or\n               exceeds the scope granted\
    \ by the resource owner.\n         Values for the \"error\" parameter MUST NOT\
    \ include characters\n         outside the set %x20-21 / %x23-5B / %x5D-7E.\n\
    \   error_description\n         OPTIONAL.  Human-readable ASCII [USASCII] text\
    \ providing\n         additional information, used to assist the client developer\
    \ in\n         understanding the error that occurred.\n         Values for the\
    \ \"error_description\" parameter MUST NOT include\n         characters outside\
    \ the set %x20-21 / %x23-5B / %x5D-7E.\n   error_uri\n         OPTIONAL.  A URI\
    \ identifying a human-readable web page with\n         information about the error,\
    \ used to provide the client\n         developer with additional information about\
    \ the error.\n         Values for the \"error_uri\" parameter MUST conform to\
    \ the\n         URI-reference syntax and thus MUST NOT include characters\n  \
    \       outside the set %x21 / %x23-5B / %x5D-7E.\n   The parameters are included\
    \ in the entity-body of the HTTP response\n   using the \"application/json\" media\
    \ type as defined by [RFC4627].  The\n   parameters are serialized into a JSON\
    \ structure by adding each\n   parameter at the highest structure level.  Parameter\
    \ names and string\n   values are included as JSON strings.  Numerical values\
    \ are included\n   as JSON numbers.  The order of parameters does not matter and\
    \ can\n   vary.\n   For example:\n     HTTP/1.1 400 Bad Request\n     Content-Type:\
    \ application/json;charset=UTF-8\n     Cache-Control: no-store\n     Pragma: no-cache\n\
    \     {\n       \"error\":\"invalid_request\"\n     }\n"
- title: 6.  Refreshing an Access Token
  contents:
  - "6.  Refreshing an Access Token\n   If the authorization server issued a refresh\
    \ token to the client, the\n   client makes a refresh request to the token endpoint\
    \ by adding the\n   following parameters using the \"application/x-www-form-urlencoded\"\
    \n   format per Appendix B with a character encoding of UTF-8 in the HTTP\n  \
    \ request entity-body:\n   grant_type\n         REQUIRED.  Value MUST be set to\
    \ \"refresh_token\".\n   refresh_token\n         REQUIRED.  The refresh token\
    \ issued to the client.\n   scope\n         OPTIONAL.  The scope of the access\
    \ request as described by\n         Section 3.3.  The requested scope MUST NOT\
    \ include any scope\n         not originally granted by the resource owner, and\
    \ if omitted is\n         treated as equal to the scope originally granted by\
    \ the\n         resource owner.\n   Because refresh tokens are typically long-lasting\
    \ credentials used to\n   request additional access tokens, the refresh token\
    \ is bound to the\n   client to which it was issued.  If the client type is confidential\
    \ or\n   the client was issued client credentials (or assigned other\n   authentication\
    \ requirements), the client MUST authenticate with the\n   authorization server\
    \ as described in Section 3.2.1.\n   For example, the client makes the following\
    \ HTTP request using\n   transport-layer security (with extra line breaks for\
    \ display purposes\n   only):\n     POST /token HTTP/1.1\n     Host: server.example.com\n\
    \     Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW\n     Content-Type: application/x-www-form-urlencoded\n\
    \     grant_type=refresh_token&refresh_token=tGzv3JOkF0XG5Qx2TlKWIA\n   The authorization\
    \ server MUST:\n   o  require client authentication for confidential clients or\
    \ for any\n      client that was issued client credentials (or with other\n  \
    \    authentication requirements),\n   o  authenticate the client if client authentication\
    \ is included and\n      ensure that the refresh token was issued to the authenticated\n\
    \      client, and\n   o  validate the refresh token.\n   If valid and authorized,\
    \ the authorization server issues an access\n   token as described in Section\
    \ 5.1.  If the request failed\n   verification or is invalid, the authorization\
    \ server returns an error\n   response as described in Section 5.2.\n   The authorization\
    \ server MAY issue a new refresh token, in which case\n   the client MUST discard\
    \ the old refresh token and replace it with the\n   new refresh token.  The authorization\
    \ server MAY revoke the old\n   refresh token after issuing a new refresh token\
    \ to the client.  If a\n   new refresh token is issued, the refresh token scope\
    \ MUST be\n   identical to that of the refresh token included by the client in\
    \ the\n   request.\n"
- title: 7.  Accessing Protected Resources
  contents:
  - "7.  Accessing Protected Resources\n   The client accesses protected resources\
    \ by presenting the access\n   token to the resource server.  The resource server\
    \ MUST validate the\n   access token and ensure that it has not expired and that\
    \ its scope\n   covers the requested resource.  The methods used by the resource\n\
    \   server to validate the access token (as well as any error responses)\n   are\
    \ beyond the scope of this specification but generally involve an\n   interaction\
    \ or coordination between the resource server and the\n   authorization server.\n\
    \   The method in which the client utilizes the access token to\n   authenticate\
    \ with the resource server depends on the type of access\n   token issued by the\
    \ authorization server.  Typically, it involves\n   using the HTTP \"Authorization\"\
    \ request header field [RFC2617] with an\n   authentication scheme defined by\
    \ the specification of the access\n   token type used, such as [RFC6750].\n"
- title: 7.1.  Access Token Types
  contents:
  - "7.1.  Access Token Types\n   The access token type provides the client with the\
    \ information\n   required to successfully utilize the access token to make a\
    \ protected\n   resource request (along with type-specific attributes).  The client\n\
    \   MUST NOT use an access token if it does not understand the token\n   type.\n\
    \   For example, the \"bearer\" token type defined in [RFC6750] is utilized\n\
    \   by simply including the access token string in the request:\n     GET /resource/1\
    \ HTTP/1.1\n     Host: example.com\n     Authorization: Bearer mF_9.B5f-4.1JqM\n\
    \   while the \"mac\" token type defined in [OAuth-HTTP-MAC] is utilized by\n\
    \   issuing a Message Authentication Code (MAC) key together with the\n   access\
    \ token that is used to sign certain components of the HTTP\n   requests:\n  \
    \   GET /resource/1 HTTP/1.1\n     Host: example.com\n     Authorization: MAC\
    \ id=\"h480djs93hd8\",\n                        nonce=\"274312:dj83hs9s\",\n \
    \                       mac=\"kDZvddkndxvhGRXZhvuDjEWhGeE=\"\n   The above examples\
    \ are provided for illustration purposes only.\n   Developers are advised to consult\
    \ the [RFC6750] and [OAuth-HTTP-MAC]\n   specifications before use.\n   Each access\
    \ token type definition specifies the additional attributes\n   (if any) sent\
    \ to the client together with the \"access_token\" response\n   parameter.  It\
    \ also defines the HTTP authentication method used to\n   include the access token\
    \ when making a protected resource request.\n"
- title: 7.2.  Error Response
  contents:
  - "7.2.  Error Response\n   If a resource access request fails, the resource server\
    \ SHOULD inform\n   the client of the error.  While the specifics of such error\
    \ responses\n   are beyond the scope of this specification, this document establishes\n\
    \   a common registry in Section 11.4 for error values to be shared among\n  \
    \ OAuth token authentication schemes.\n   New authentication schemes designed\
    \ primarily for OAuth token\n   authentication SHOULD define a mechanism for providing\
    \ an error\n   status code to the client, in which the error values allowed are\n\
    \   registered in the error registry established by this specification.\n   Such\
    \ schemes MAY limit the set of valid error codes to a subset of\n   the registered\
    \ values.  If the error code is returned using a named\n   parameter, the parameter\
    \ name SHOULD be \"error\".\n   Other schemes capable of being used for OAuth\
    \ token authentication,\n   but not primarily designed for that purpose, MAY bind\
    \ their error\n   values to the registry in the same manner.\n   New authentication\
    \ schemes MAY choose to also specify the use of the\n   \"error_description\"\
    \ and \"error_uri\" parameters to return error\n   information in a manner parallel\
    \ to their usage in this\n   specification.\n"
- title: 8.  Extensibility
  contents:
  - '8.  Extensibility

    '
- title: 8.1.  Defining Access Token Types
  contents:
  - "8.1.  Defining Access Token Types\n   Access token types can be defined in one\
    \ of two ways: registered in\n   the Access Token Types registry (following the\
    \ procedures in\n   Section 11.1), or by using a unique absolute URI as its name.\n\
    \   Types utilizing a URI name SHOULD be limited to vendor-specific\n   implementations\
    \ that are not commonly applicable, and are specific to\n   the implementation\
    \ details of the resource server where they are\n   used.\n   All other types\
    \ MUST be registered.  Type names MUST conform to the\n   type-name ABNF.  If\
    \ the type definition includes a new HTTP\n   authentication scheme, the type\
    \ name SHOULD be identical to the HTTP\n   authentication scheme name (as defined\
    \ by [RFC2617]).  The token type\n   \"example\" is reserved for use in examples.\n\
    \     type-name  = 1*name-char\n     name-char  = \"-\" / \".\" / \"_\" / DIGIT\
    \ / ALPHA\n"
- title: 8.2.  Defining New Endpoint Parameters
  contents:
  - "8.2.  Defining New Endpoint Parameters\n   New request or response parameters\
    \ for use with the authorization\n   endpoint or the token endpoint are defined\
    \ and registered in the\n   OAuth Parameters registry following the procedure\
    \ in Section 11.2.\n   Parameter names MUST conform to the param-name ABNF, and\
    \ parameter\n   values syntax MUST be well-defined (e.g., using ABNF, or a reference\n\
    \   to the syntax of an existing parameter).\n     param-name  = 1*name-char\n\
    \     name-char   = \"-\" / \".\" / \"_\" / DIGIT / ALPHA\n   Unregistered vendor-specific\
    \ parameter extensions that are not\n   commonly applicable and that are specific\
    \ to the implementation\n   details of the authorization server where they are\
    \ used SHOULD\n   utilize a vendor-specific prefix that is not likely to conflict\
    \ with\n   other registered values (e.g., begin with 'companyname_').\n"
- title: 8.3.  Defining New Authorization Grant Types
  contents:
  - "8.3.  Defining New Authorization Grant Types\n   New authorization grant types\
    \ can be defined by assigning them a\n   unique absolute URI for use with the\
    \ \"grant_type\" parameter.  If the\n   extension grant type requires additional\
    \ token endpoint parameters,\n   they MUST be registered in the OAuth Parameters\
    \ registry as described\n   by Section 11.2.\n"
- title: 8.4.  Defining New Authorization Endpoint Response Types
  contents:
  - "8.4.  Defining New Authorization Endpoint Response Types\n   New response types\
    \ for use with the authorization endpoint are\n   defined and registered in the\
    \ Authorization Endpoint Response Types\n   registry following the procedure in\
    \ Section 11.3.  Response type\n   names MUST conform to the response-type ABNF.\n\
    \     response-type  = response-name *( SP response-name )\n     response-name\
    \  = 1*response-char\n     response-char  = \"_\" / DIGIT / ALPHA\n   If a response\
    \ type contains one or more space characters (%x20), it\n   is compared as a space-delimited\
    \ list of values in which the order of\n   values does not matter.  Only one order\
    \ of values can be registered,\n   which covers all other arrangements of the\
    \ same set of values.\n   For example, the response type \"token code\" is left\
    \ undefined by this\n   specification.  However, an extension can define and register\
    \ the\n   \"token code\" response type.  Once registered, the same combination\n\
    \   cannot be registered as \"code token\", but both values can be used to\n \
    \  denote the same response type.\n"
- title: 8.5.  Defining Additional Error Codes
  contents:
  - "8.5.  Defining Additional Error Codes\n   In cases where protocol extensions\
    \ (i.e., access token types,\n   extension parameters, or extension grant types)\
    \ require additional\n   error codes to be used with the authorization code grant\
    \ error\n   response (Section 4.1.2.1), the implicit grant error response\n  \
    \ (Section 4.2.2.1), the token error response (Section 5.2), or the\n   resource\
    \ access error response (Section 7.2), such error codes MAY be\n   defined.\n\
    \   Extension error codes MUST be registered (following the procedures in\n  \
    \ Section 11.4) if the extension they are used in conjunction with is a\n   registered\
    \ access token type, a registered endpoint parameter, or an\n   extension grant\
    \ type.  Error codes used with unregistered extensions\n   MAY be registered.\n\
    \   Error codes MUST conform to the error ABNF and SHOULD be prefixed by\n   an\
    \ identifying name when possible.  For example, an error identifying\n   an invalid\
    \ value set to the extension parameter \"example\" SHOULD be\n   named \"example_invalid\"\
    .\n     error      = 1*error-char\n     error-char = %x20-21 / %x23-5B / %x5D-7E\n"
- title: 9.  Native Applications
  contents:
  - "9.  Native Applications\n   Native applications are clients installed and executed\
    \ on the device\n   used by the resource owner (i.e., desktop application, native\
    \ mobile\n   application).  Native applications require special consideration\n\
    \   related to security, platform capabilities, and overall end-user\n   experience.\n\
    \   The authorization endpoint requires interaction between the client\n   and\
    \ the resource owner's user-agent.  Native applications can invoke\n   an external\
    \ user-agent or embed a user-agent within the application.\n   For example:\n\
    \   o  External user-agent - the native application can capture the\n      response\
    \ from the authorization server using a redirection URI\n      with a scheme registered\
    \ with the operating system to invoke the\n      client as the handler, manual\
    \ copy-and-paste of the credentials,\n      running a local web server, installing\
    \ a user-agent extension, or\n      by providing a redirection URI identifying\
    \ a server-hosted\n      resource under the client's control, which in turn makes\
    \ the\n      response available to the native application.\n   o  Embedded user-agent\
    \ - the native application obtains the response\n      by directly communicating\
    \ with the embedded user-agent by\n      monitoring state changes emitted during\
    \ the resource load, or\n      accessing the user-agent's cookies storage.\n \
    \  When choosing between an external or embedded user-agent, developers\n   should\
    \ consider the following:\n   o  An external user-agent may improve completion\
    \ rate, as the\n      resource owner may already have an active session with the\n\
    \      authorization server, removing the need to re-authenticate.  It\n     \
    \ provides a familiar end-user experience and functionality.  The\n      resource\
    \ owner may also rely on user-agent features or extensions\n      to assist with\
    \ authentication (e.g., password manager, 2-factor\n      device reader).\n  \
    \ o  An embedded user-agent may offer improved usability, as it removes\n    \
    \  the need to switch context and open new windows.\n   o  An embedded user-agent\
    \ poses a security challenge because resource\n      owners are authenticating\
    \ in an unidentified window without access\n      to the visual protections found\
    \ in most external user-agents.  An\n      embedded user-agent educates end-users\
    \ to trust unidentified\n      requests for authentication (making phishing attacks\
    \ easier to\n      execute).\n   When choosing between the implicit grant type\
    \ and the authorization\n   code grant type, the following should be considered:\n\
    \   o  Native applications that use the authorization code grant type\n      SHOULD\
    \ do so without using client credentials, due to the native\n      application's\
    \ inability to keep client credentials confidential.\n   o  When using the implicit\
    \ grant type flow, a refresh token is not\n      returned, which requires repeating\
    \ the authorization process once\n      the access token expires.\n"
- title: 10.  Security Considerations
  contents:
  - "10.  Security Considerations\n   As a flexible and extensible framework, OAuth's\
    \ security\n   considerations depend on many factors.  The following sections\n\
    \   provide implementers with security guidelines focused on the three\n   client\
    \ profiles described in Section 2.1: web application,\n   user-agent-based application,\
    \ and native application.\n   A comprehensive OAuth security model and analysis,\
    \ as well as\n   background for the protocol design, is provided by\n   [OAuth-THREATMODEL].\n"
- title: 10.1.  Client Authentication
  contents:
  - "10.1.  Client Authentication\n   The authorization server establishes client\
    \ credentials with web\n   application clients for the purpose of client authentication.\
    \  The\n   authorization server is encouraged to consider stronger client\n  \
    \ authentication means than a client password.  Web application clients\n   MUST\
    \ ensure confidentiality of client passwords and other client\n   credentials.\n\
    \   The authorization server MUST NOT issue client passwords or other\n   client\
    \ credentials to native application or user-agent-based\n   application clients\
    \ for the purpose of client authentication.  The\n   authorization server MAY\
    \ issue a client password or other credentials\n   for a specific installation\
    \ of a native application client on a\n   specific device.\n   When client authentication\
    \ is not possible, the authorization server\n   SHOULD employ other means to validate\
    \ the client's identity -- for\n   example, by requiring the registration of the\
    \ client redirection URI\n   or enlisting the resource owner to confirm identity.\
    \  A valid\n   redirection URI is not sufficient to verify the client's identity\n\
    \   when asking for resource owner authorization but can be used to\n   prevent\
    \ delivering credentials to a counterfeit client after\n   obtaining resource\
    \ owner authorization.\n   The authorization server must consider the security\
    \ implications of\n   interacting with unauthenticated clients and take measures\
    \ to limit\n   the potential exposure of other credentials (e.g., refresh tokens)\n\
    \   issued to such clients.\n"
- title: 10.2.  Client Impersonation
  contents:
  - "10.2.  Client Impersonation\n   A malicious client can impersonate another client\
    \ and obtain access\n   to protected resources if the impersonated client fails\
    \ to, or is\n   unable to, keep its client credentials confidential.\n   The authorization\
    \ server MUST authenticate the client whenever\n   possible.  If the authorization\
    \ server cannot authenticate the client\n   due to the client's nature, the authorization\
    \ server MUST require the\n   registration of any redirection URI used for receiving\
    \ authorization\n   responses and SHOULD utilize other means to protect resource\
    \ owners\n   from such potentially malicious clients.  For example, the\n   authorization\
    \ server can engage the resource owner to assist in\n   identifying the client\
    \ and its origin.\n   The authorization server SHOULD enforce explicit resource\
    \ owner\n   authentication and provide the resource owner with information about\n\
    \   the client and the requested authorization scope and lifetime.  It is\n  \
    \ up to the resource owner to review the information in the context of\n   the\
    \ current client and to authorize or deny the request.\n   The authorization server\
    \ SHOULD NOT process repeated authorization\n   requests automatically (without\
    \ active resource owner interaction)\n   without authenticating the client or\
    \ relying on other measures to\n   ensure that the repeated request comes from\
    \ the original client and\n   not an impersonator.\n"
- title: 10.3.  Access Tokens
  contents:
  - "10.3.  Access Tokens\n   Access token credentials (as well as any confidential\
    \ access token\n   attributes) MUST be kept confidential in transit and storage,\
    \ and\n   only shared among the authorization server, the resource servers the\n\
    \   access token is valid for, and the client to whom the access token is\n  \
    \ issued.  Access token credentials MUST only be transmitted using TLS\n   as\
    \ described in Section 1.6 with server authentication as defined by\n   [RFC2818].\n\
    \   When using the implicit grant type, the access token is transmitted\n   in\
    \ the URI fragment, which can expose it to unauthorized parties.\n   The authorization\
    \ server MUST ensure that access tokens cannot be\n   generated, modified, or\
    \ guessed to produce valid access tokens by\n   unauthorized parties.\n   The\
    \ client SHOULD request access tokens with the minimal scope\n   necessary.  The\
    \ authorization server SHOULD take the client identity\n   into account when choosing\
    \ how to honor the requested scope and MAY\n   issue an access token with less\
    \ rights than requested.\n   This specification does not provide any methods for\
    \ the resource\n   server to ensure that an access token presented to it by a\
    \ given\n   client was issued to that client by the authorization server.\n"
- title: 10.4.  Refresh Tokens
  contents:
  - "10.4.  Refresh Tokens\n   Authorization servers MAY issue refresh tokens to web\
    \ application\n   clients and native application clients.\n   Refresh tokens MUST\
    \ be kept confidential in transit and storage, and\n   shared only among the authorization\
    \ server and the client to whom the\n   refresh tokens were issued.  The authorization\
    \ server MUST maintain\n   the binding between a refresh token and the client\
    \ to whom it was\n   issued.  Refresh tokens MUST only be transmitted using TLS\
    \ as\n   described in Section 1.6 with server authentication as defined by\n \
    \  [RFC2818].\n   The authorization server MUST verify the binding between the\
    \ refresh\n   token and client identity whenever the client identity can be\n\
    \   authenticated.  When client authentication is not possible, the\n   authorization\
    \ server SHOULD deploy other means to detect refresh\n   token abuse.\n   For\
    \ example, the authorization server could employ refresh token\n   rotation in\
    \ which a new refresh token is issued with every access\n   token refresh response.\
    \  The previous refresh token is invalidated\n   but retained by the authorization\
    \ server.  If a refresh token is\n   compromised and subsequently used by both\
    \ the attacker and the\n   legitimate client, one of them will present an invalidated\
    \ refresh\n   token, which will inform the authorization server of the breach.\n\
    \   The authorization server MUST ensure that refresh tokens cannot be\n   generated,\
    \ modified, or guessed to produce valid refresh tokens by\n   unauthorized parties.\n"
- title: 10.5.  Authorization Codes
  contents:
  - "10.5.  Authorization Codes\n   The transmission of authorization codes SHOULD\
    \ be made over a secure\n   channel, and the client SHOULD require the use of\
    \ TLS with its\n   redirection URI if the URI identifies a network resource. \
    \ Since\n   authorization codes are transmitted via user-agent redirections, they\n\
    \   could potentially be disclosed through user-agent history and HTTP\n   referrer\
    \ headers.\n   Authorization codes operate as plaintext bearer credentials, used\
    \ to\n   verify that the resource owner who granted authorization at the\n   authorization\
    \ server is the same resource owner returning to the\n   client to complete the\
    \ process.  Therefore, if the client relies on\n   the authorization code for\
    \ its own resource owner authentication, the\n   client redirection endpoint MUST\
    \ require the use of TLS.\n   Authorization codes MUST be short lived and single-use.\
    \  If the\n   authorization server observes multiple attempts to exchange an\n\
    \   authorization code for an access token, the authorization server\n   SHOULD\
    \ attempt to revoke all access tokens already granted based on\n   the compromised\
    \ authorization code.\n   If the client can be authenticated, the authorization\
    \ servers MUST\n   authenticate the client and ensure that the authorization code\
    \ was\n   issued to the same client.\n"
- title: 10.6.  Authorization Code Redirection URI Manipulation
  contents:
  - "10.6.  Authorization Code Redirection URI Manipulation\n   When requesting authorization\
    \ using the authorization code grant\n   type, the client can specify a redirection\
    \ URI via the \"redirect_uri\"\n   parameter.  If an attacker can manipulate the\
    \ value of the\n   redirection URI, it can cause the authorization server to redirect\n\
    \   the resource owner user-agent to a URI under the control of the\n   attacker\
    \ with the authorization code.\n   An attacker can create an account at a legitimate\
    \ client and initiate\n   the authorization flow.  When the attacker's user-agent\
    \ is sent to\n   the authorization server to grant access, the attacker grabs\
    \ the\n   authorization URI provided by the legitimate client and replaces the\n\
    \   client's redirection URI with a URI under the control of the\n   attacker.\
    \  The attacker then tricks the victim into following the\n   manipulated link\
    \ to authorize access to the legitimate client.\n   Once at the authorization\
    \ server, the victim is prompted with a\n   normal, valid request on behalf of\
    \ a legitimate and trusted client,\n   and authorizes the request.  The victim\
    \ is then redirected to an\n   endpoint under the control of the attacker with\
    \ the authorization\n   code.  The attacker completes the authorization flow by\
    \ sending the\n   authorization code to the client using the original redirection\
    \ URI\n   provided by the client.  The client exchanges the authorization code\n\
    \   with an access token and links it to the attacker's client account,\n   which\
    \ can now gain access to the protected resources authorized by\n   the victim\
    \ (via the client).\n   In order to prevent such an attack, the authorization\
    \ server MUST\n   ensure that the redirection URI used to obtain the authorization\
    \ code\n   is identical to the redirection URI provided when exchanging the\n\
    \   authorization code for an access token.  The authorization server\n   MUST\
    \ require public clients and SHOULD require confidential clients\n   to register\
    \ their redirection URIs.  If a redirection URI is provided\n   in the request,\
    \ the authorization server MUST validate it against the\n   registered value.\n"
- title: 10.7.  Resource Owner Password Credentials
  contents:
  - "10.7.  Resource Owner Password Credentials\n   The resource owner password credentials\
    \ grant type is often used for\n   legacy or migration reasons.  It reduces the\
    \ overall risk of storing\n   usernames and passwords by the client but does not\
    \ eliminate the need\n   to expose highly privileged credentials to the client.\n\
    \   This grant type carries a higher risk than other grant types because\n   it\
    \ maintains the password anti-pattern this protocol seeks to avoid.\n   The client\
    \ could abuse the password, or the password could\n   unintentionally be disclosed\
    \ to an attacker (e.g., via log files or\n   other records kept by the client).\n\
    \   Additionally, because the resource owner does not have control over\n   the\
    \ authorization process (the resource owner's involvement ends when\n   it hands\
    \ over its credentials to the client), the client can obtain\n   access tokens\
    \ with a broader scope than desired by the resource\n   owner.  The authorization\
    \ server should consider the scope and\n   lifetime of access tokens issued via\
    \ this grant type.\n   The authorization server and client SHOULD minimize use\
    \ of this grant\n   type and utilize other grant types whenever possible.\n"
- title: 10.8.  Request Confidentiality
  contents:
  - "10.8.  Request Confidentiality\n   Access tokens, refresh tokens, resource owner\
    \ passwords, and client\n   credentials MUST NOT be transmitted in the clear.\
    \  Authorization\n   codes SHOULD NOT be transmitted in the clear.\n   The \"\
    state\" and \"scope\" parameters SHOULD NOT include sensitive\n   client or resource\
    \ owner information in plain text, as they can be\n   transmitted over insecure\
    \ channels or stored insecurely.\n"
- title: 10.9.  Ensuring Endpoint Authenticity
  contents:
  - "10.9.  Ensuring Endpoint Authenticity\n   In order to prevent man-in-the-middle\
    \ attacks, the authorization\n   server MUST require the use of TLS with server\
    \ authentication as\n   defined by [RFC2818] for any request sent to the authorization\
    \ and\n   token endpoints.  The client MUST validate the authorization server's\n\
    \   TLS certificate as defined by [RFC6125] and in accordance with its\n   requirements\
    \ for server identity authentication.\n"
- title: 10.10.  Credentials-Guessing Attacks
  contents:
  - "10.10.  Credentials-Guessing Attacks\n   The authorization server MUST prevent\
    \ attackers from guessing access\n   tokens, authorization codes, refresh tokens,\
    \ resource owner\n   passwords, and client credentials.\n   The probability of\
    \ an attacker guessing generated tokens (and other\n   credentials not intended\
    \ for handling by end-users) MUST be less than\n   or equal to 2^(-128) and SHOULD\
    \ be less than or equal to 2^(-160).\n   The authorization server MUST utilize\
    \ other means to protect\n   credentials intended for end-user usage.\n"
- title: 10.11.  Phishing Attacks
  contents:
  - "10.11.  Phishing Attacks\n   Wide deployment of this and similar protocols may\
    \ cause end-users to\n   become inured to the practice of being redirected to\
    \ websites where\n   they are asked to enter their passwords.  If end-users are\
    \ not\n   careful to verify the authenticity of these websites before entering\n\
    \   their credentials, it will be possible for attackers to exploit this\n   practice\
    \ to steal resource owners' passwords.\n   Service providers should attempt to\
    \ educate end-users about the risks\n   phishing attacks pose and should provide\
    \ mechanisms that make it easy\n   for end-users to confirm the authenticity of\
    \ their sites.  Client\n   developers should consider the security implications\
    \ of how they\n   interact with the user-agent (e.g., external, embedded), and\
    \ the\n   ability of the end-user to verify the authenticity of the\n   authorization\
    \ server.\n   To reduce the risk of phishing attacks, the authorization servers\n\
    \   MUST require the use of TLS on every endpoint used for end-user\n   interaction.\n"
- title: 10.12.  Cross-Site Request Forgery
  contents:
  - "10.12.  Cross-Site Request Forgery\n   Cross-site request forgery (CSRF) is an\
    \ exploit in which an attacker\n   causes the user-agent of a victim end-user\
    \ to follow a malicious URI\n   (e.g., provided to the user-agent as a misleading\
    \ link, image, or\n   redirection) to a trusting server (usually established via\
    \ the\n   presence of a valid session cookie).\n   A CSRF attack against the client's\
    \ redirection URI allows an attacker\n   to inject its own authorization code\
    \ or access token, which can\n   result in the client using an access token associated\
    \ with the\n   attacker's protected resources rather than the victim's (e.g.,\
    \ save\n   the victim's bank account information to a protected resource\n   controlled\
    \ by the attacker).\n   The client MUST implement CSRF protection for its redirection\
    \ URI.\n   This is typically accomplished by requiring any request sent to the\n\
    \   redirection URI endpoint to include a value that binds the request to\n  \
    \ the user-agent's authenticated state (e.g., a hash of the session\n   cookie\
    \ used to authenticate the user-agent).  The client SHOULD\n   utilize the \"\
    state\" request parameter to deliver this value to the\n   authorization server\
    \ when making an authorization request.\n   Once authorization has been obtained\
    \ from the end-user, the\n   authorization server redirects the end-user's user-agent\
    \ back to the\n   client with the required binding value contained in the \"state\"\
    \n   parameter.  The binding value enables the client to verify the\n   validity\
    \ of the request by matching the binding value to the\n   user-agent's authenticated\
    \ state.  The binding value used for CSRF\n   protection MUST contain a non-guessable\
    \ value (as described in\n   Section 10.10), and the user-agent's authenticated\
    \ state (e.g.,\n   session cookie, HTML5 local storage) MUST be kept in a location\n\
    \   accessible only to the client and the user-agent (i.e., protected by\n   same-origin\
    \ policy).\n   A CSRF attack against the authorization server's authorization\n\
    \   endpoint can result in an attacker obtaining end-user authorization\n   for\
    \ a malicious client without involving or alerting the end-user.\n   The authorization\
    \ server MUST implement CSRF protection for its\n   authorization endpoint and\
    \ ensure that a malicious client cannot\n   obtain authorization without the awareness\
    \ and explicit consent of\n   the resource owner.\n"
- title: 10.13.  Clickjacking
  contents:
  - "10.13.  Clickjacking\n   In a clickjacking attack, an attacker registers a legitimate\
    \ client\n   and then constructs a malicious site in which it loads the\n   authorization\
    \ server's authorization endpoint web page in a\n   transparent iframe overlaid\
    \ on top of a set of dummy buttons, which\n   are carefully constructed to be\
    \ placed directly under important\n   buttons on the authorization page.  When\
    \ an end-user clicks a\n   misleading visible button, the end-user is actually\
    \ clicking an\n   invisible button on the authorization page (such as an \"Authorize\"\
    \n   button).  This allows an attacker to trick a resource owner into\n   granting\
    \ its client access without the end-user's knowledge.\n   To prevent this form\
    \ of attack, native applications SHOULD use\n   external browsers instead of embedding\
    \ browsers within the\n   application when requesting end-user authorization.\
    \  For most newer\n   browsers, avoidance of iframes can be enforced by the authorization\n\
    \   server using the (non-standard) \"x-frame-options\" header.  This\n   header\
    \ can have two values, \"deny\" and \"sameorigin\", which will block\n   any framing,\
    \ or framing by sites with a different origin,\n   respectively.  For older browsers,\
    \ JavaScript frame-busting\n   techniques can be used but may not be effective\
    \ in all browsers.\n"
- title: 10.14.  Code Injection and Input Validation
  contents:
  - "10.14.  Code Injection and Input Validation\n   A code injection attack occurs\
    \ when an input or otherwise external\n   variable is used by an application unsanitized\
    \ and causes\n   modification to the application logic.  This may allow an attacker\
    \ to\n   gain access to the application device or its data, cause denial of\n\
    \   service, or introduce a wide range of malicious side-effects.\n   The authorization\
    \ server and client MUST sanitize (and validate when\n   possible) any value received\
    \ -- in particular, the value of the\n   \"state\" and \"redirect_uri\" parameters.\n"
- title: 10.15.  Open Redirectors
  contents:
  - "10.15.  Open Redirectors\n   The authorization server, authorization endpoint,\
    \ and client\n   redirection endpoint can be improperly configured and operate\
    \ as open\n   redirectors.  An open redirector is an endpoint using a parameter\
    \ to\n   automatically redirect a user-agent to the location specified by the\n\
    \   parameter value without any validation.\n   Open redirectors can be used in\
    \ phishing attacks, or by an attacker\n   to get end-users to visit malicious\
    \ sites by using the URI authority\n   component of a familiar and trusted destination.\
    \  In addition, if the\n   authorization server allows the client to register\
    \ only part of the\n   redirection URI, an attacker can use an open redirector\
    \ operated by\n   the client to construct a redirection URI that will pass the\n\
    \   authorization server validation but will send the authorization code\n   or\
    \ access token to an endpoint under the control of the attacker.\n"
- title: 10.16.  Misuse of Access Token to Impersonate Resource Owner in Implicit
  contents:
  - "10.16.  Misuse of Access Token to Impersonate Resource Owner in Implicit\n  \
    \      Flow\n   For public clients using implicit flows, this specification does\
    \ not\n   provide any method for the client to determine what client an access\n\
    \   token was issued to.\n   A resource owner may willingly delegate access to\
    \ a resource by\n   granting an access token to an attacker's malicious client.\
    \  This may\n   be due to phishing or some other pretext.  An attacker may also\
    \ steal\n   a token via some other mechanism.  An attacker may then attempt to\n\
    \   impersonate the resource owner by providing the access token to a\n   legitimate\
    \ public client.\n   In the implicit flow (response_type=token), the attacker\
    \ can easily\n   switch the token in the response from the authorization server,\n\
    \   replacing the real access token with the one previously issued to the\n  \
    \ attacker.\n   Servers communicating with native applications that rely on being\n\
    \   passed an access token in the back channel to identify the user of\n   the\
    \ client may be similarly compromised by an attacker creating a\n   compromised\
    \ application that can inject arbitrary stolen access\n   tokens.\n   Any public\
    \ client that makes the assumption that only the resource\n   owner can present\
    \ it with a valid access token for the resource is\n   vulnerable to this type\
    \ of attack.\n   This type of attack may expose information about the resource\
    \ owner\n   at the legitimate client to the attacker (malicious client).  This\n\
    \   will also allow the attacker to perform operations at the legitimate\n   client\
    \ with the same permissions as the resource owner who originally\n   granted the\
    \ access token or authorization code.\n   Authenticating resource owners to clients\
    \ is out of scope for this\n   specification.  Any specification that uses the\
    \ authorization process\n   as a form of delegated end-user authentication to\
    \ the client (e.g.,\n   third-party sign-in service) MUST NOT use the implicit\
    \ flow without\n   additional security mechanisms that would enable the client\
    \ to\n   determine if the access token was issued for its use (e.g., audience-\n\
    \   restricting the access token).\n"
- title: 11.  IANA Considerations
  contents:
  - '11.  IANA Considerations

    '
- title: 11.1.  OAuth Access Token Types Registry
  contents:
  - "11.1.  OAuth Access Token Types Registry\n   This specification establishes the\
    \ OAuth Access Token Types registry.\n   Access token types are registered with\
    \ a Specification Required\n   ([RFC5226]) after a two-week review period on the\n\
    \   oauth-ext-review@ietf.org mailing list, on the advice of one or more\n   Designated\
    \ Experts.  However, to allow for the allocation of values\n   prior to publication,\
    \ the Designated Expert(s) may approve\n   registration once they are satisfied\
    \ that such a specification will\n   be published.\n   Registration requests must\
    \ be sent to the oauth-ext-review@ietf.org\n   mailing list for review and comment,\
    \ with an appropriate subject\n   (e.g., \"Request for access token type: example\"\
    ).\n   Within the review period, the Designated Expert(s) will either\n   approve\
    \ or deny the registration request, communicating this decision\n   to the review\
    \ list and IANA.  Denials should include an explanation\n   and, if applicable,\
    \ suggestions as to how to make the request\n   successful.\n   IANA must only\
    \ accept registry updates from the Designated Expert(s)\n   and should direct\
    \ all requests for registration to the review mailing\n   list.\n"
- title: 11.1.1.  Registration Template
  contents:
  - "11.1.1.  Registration Template\n   Type name:\n      The name requested (e.g.,\
    \ \"example\").\n   Additional Token Endpoint Response Parameters:\n      Additional\
    \ response parameters returned together with the\n      \"access_token\" parameter.\
    \  New parameters MUST be separately\n      registered in the OAuth Parameters\
    \ registry as described by\n      Section 11.2.\n   HTTP Authentication Scheme(s):\n\
    \      The HTTP authentication scheme name(s), if any, used to\n      authenticate\
    \ protected resource requests using access tokens of\n      this type.\n   Change\
    \ controller:\n      For Standards Track RFCs, state \"IETF\".  For others, give\
    \ the name\n      of the responsible party.  Other details (e.g., postal address,\n\
    \      email address, home page URI) may also be included.\n   Specification document(s):\n\
    \      Reference to the document(s) that specify the parameter,\n      preferably\
    \ including a URI that can be used to retrieve a copy of\n      the document(s).\
    \  An indication of the relevant sections may also\n      be included but is not\
    \ required.\n"
- title: 11.2.  OAuth Parameters Registry
  contents:
  - "11.2.  OAuth Parameters Registry\n   This specification establishes the OAuth\
    \ Parameters registry.\n   Additional parameters for inclusion in the authorization\
    \ endpoint\n   request, the authorization endpoint response, the token endpoint\n\
    \   request, or the token endpoint response are registered with a\n   Specification\
    \ Required ([RFC5226]) after a two-week review period on\n   the oauth-ext-review@ietf.org\
    \ mailing list, on the advice of one or\n   more Designated Experts.  However,\
    \ to allow for the allocation of\n   values prior to publication, the Designated\
    \ Expert(s) may approve\n   registration once they are satisfied that such a specification\
    \ will\n   be published.\n   Registration requests must be sent to the oauth-ext-review@ietf.org\n\
    \   mailing list for review and comment, with an appropriate subject\n   (e.g.,\
    \ \"Request for parameter: example\").\n   Within the review period, the Designated\
    \ Expert(s) will either\n   approve or deny the registration request, communicating\
    \ this decision\n   to the review list and IANA.  Denials should include an explanation\n\
    \   and, if applicable, suggestions as to how to make the request\n   successful.\n\
    \   IANA must only accept registry updates from the Designated Expert(s)\n   and\
    \ should direct all requests for registration to the review mailing\n   list.\n"
- title: 11.2.1.  Registration Template
  contents:
  - "11.2.1.  Registration Template\n   Parameter name:\n      The name requested\
    \ (e.g., \"example\").\n   Parameter usage location:\n      The location(s) where\
    \ parameter can be used.  The possible\n      locations are authorization request,\
    \ authorization response, token\n      request, or token response.\n   Change\
    \ controller:\n      For Standards Track RFCs, state \"IETF\".  For others, give\
    \ the name\n      of the responsible party.  Other details (e.g., postal address,\n\
    \      email address, home page URI) may also be included.\n   Specification document(s):\n\
    \      Reference to the document(s) that specify the parameter,\n      preferably\
    \ including a URI that can be used to retrieve a copy of\n      the document(s).\
    \  An indication of the relevant sections may also\n      be included but is not\
    \ required.\n"
- title: 11.2.2.  Initial Registry Contents
  contents:
  - "11.2.2.  Initial Registry Contents\n   The OAuth Parameters registry's initial\
    \ contents are:\n   o  Parameter name: client_id\n   o  Parameter usage location:\
    \ authorization request, token request\n   o  Change controller: IETF\n   o  Specification\
    \ document(s): RFC 6749\n   o  Parameter name: client_secret\n   o  Parameter\
    \ usage location: token request\n   o  Change controller: IETF\n   o  Specification\
    \ document(s): RFC 6749\n   o  Parameter name: response_type\n   o  Parameter\
    \ usage location: authorization request\n   o  Change controller: IETF\n   o \
    \ Specification document(s): RFC 6749\n   o  Parameter name: redirect_uri\n  \
    \ o  Parameter usage location: authorization request, token request\n   o  Change\
    \ controller: IETF\n   o  Specification document(s): RFC 6749\n   o  Parameter\
    \ name: scope\n   o  Parameter usage location: authorization request, authorization\n\
    \      response, token request, token response\n   o  Change controller: IETF\n\
    \   o  Specification document(s): RFC 6749\n   o  Parameter name: state\n   o\
    \  Parameter usage location: authorization request, authorization\n      response\n\
    \   o  Change controller: IETF\n   o  Specification document(s): RFC 6749\n  \
    \ o  Parameter name: code\n   o  Parameter usage location: authorization response,\
    \ token request\n   o  Change controller: IETF\n   o  Specification document(s):\
    \ RFC 6749\n   o  Parameter name: error_description\n   o  Parameter usage location:\
    \ authorization response, token response\n   o  Change controller: IETF\n   o\
    \  Specification document(s): RFC 6749\n   o  Parameter name: error_uri\n   o\
    \  Parameter usage location: authorization response, token response\n   o  Change\
    \ controller: IETF\n   o  Specification document(s): RFC 6749\n   o  Parameter\
    \ name: grant_type\n   o  Parameter usage location: token request\n   o  Change\
    \ controller: IETF\n   o  Specification document(s): RFC 6749\n   o  Parameter\
    \ name: access_token\n   o  Parameter usage location: authorization response,\
    \ token response\n   o  Change controller: IETF\n   o  Specification document(s):\
    \ RFC 6749\n   o  Parameter name: token_type\n   o  Parameter usage location:\
    \ authorization response, token response\n   o  Change controller: IETF\n   o\
    \  Specification document(s): RFC 6749\n   o  Parameter name: expires_in\n   o\
    \  Parameter usage location: authorization response, token response\n   o  Change\
    \ controller: IETF\n   o  Specification document(s): RFC 6749\n   o  Parameter\
    \ name: username\n   o  Parameter usage location: token request\n   o  Change\
    \ controller: IETF\n   o  Specification document(s): RFC 6749\n   o  Parameter\
    \ name: password\n   o  Parameter usage location: token request\n   o  Change\
    \ controller: IETF\n   o  Specification document(s): RFC 6749\n   o  Parameter\
    \ name: refresh_token\n   o  Parameter usage location: token request, token response\n\
    \   o  Change controller: IETF\n   o  Specification document(s): RFC 6749\n"
- title: 11.3.  OAuth Authorization Endpoint Response Types Registry
  contents:
  - "11.3.  OAuth Authorization Endpoint Response Types Registry\n   This specification\
    \ establishes the OAuth Authorization Endpoint\n   Response Types registry.\n\
    \   Additional response types for use with the authorization endpoint are\n  \
    \ registered with a Specification Required ([RFC5226]) after a two-week\n   review\
    \ period on the oauth-ext-review@ietf.org mailing list, on the\n   advice of one\
    \ or more Designated Experts.  However, to allow for the\n   allocation of values\
    \ prior to publication, the Designated Expert(s)\n   may approve registration\
    \ once they are satisfied that such a\n   specification will be published.\n \
    \  Registration requests must be sent to the oauth-ext-review@ietf.org\n   mailing\
    \ list for review and comment, with an appropriate subject\n   (e.g., \"Request\
    \ for response type: example\").\n   Within the review period, the Designated\
    \ Expert(s) will either\n   approve or deny the registration request, communicating\
    \ this decision\n   to the review list and IANA.  Denials should include an explanation\n\
    \   and, if applicable, suggestions as to how to make the request\n   successful.\n\
    \   IANA must only accept registry updates from the Designated Expert(s)\n   and\
    \ should direct all requests for registration to the review mailing\n   list.\n"
- title: 11.3.1.  Registration Template
  contents:
  - "11.3.1.  Registration Template\n   Response type name:\n      The name requested\
    \ (e.g., \"example\").\n   Change controller:\n      For Standards Track RFCs,\
    \ state \"IETF\".  For others, give the name\n      of the responsible party.\
    \  Other details (e.g., postal address,\n      email address, home page URI) may\
    \ also be included.\n   Specification document(s):\n      Reference to the document(s)\
    \ that specify the type, preferably\n      including a URI that can be used to\
    \ retrieve a copy of the\n      document(s).  An indication of the relevant sections\
    \ may also be\n      included but is not required.\n"
- title: 11.3.2.  Initial Registry Contents
  contents:
  - "11.3.2.  Initial Registry Contents\n   The OAuth Authorization Endpoint Response\
    \ Types registry's initial\n   contents are:\n   o  Response type name: code\n\
    \   o  Change controller: IETF\n   o  Specification document(s): RFC 6749\n  \
    \ o  Response type name: token\n   o  Change controller: IETF\n   o  Specification\
    \ document(s): RFC 6749\n"
- title: 11.4.  OAuth Extensions Error Registry
  contents:
  - "11.4.  OAuth Extensions Error Registry\n   This specification establishes the\
    \ OAuth Extensions Error registry.\n   Additional error codes used together with\
    \ other protocol extensions\n   (i.e., extension grant types, access token types,\
    \ or extension\n   parameters) are registered with a Specification Required ([RFC5226])\n\
    \   after a two-week review period on the oauth-ext-review@ietf.org\n   mailing\
    \ list, on the advice of one or more Designated Experts.\n   However, to allow\
    \ for the allocation of values prior to publication,\n   the Designated Expert(s)\
    \ may approve registration once they are\n   satisfied that such a specification\
    \ will be published.\n   Registration requests must be sent to the oauth-ext-review@ietf.org\n\
    \   mailing list for review and comment, with an appropriate subject\n   (e.g.,\
    \ \"Request for error code: example\").\n   Within the review period, the Designated\
    \ Expert(s) will either\n   approve or deny the registration request, communicating\
    \ this decision\n   to the review list and IANA.  Denials should include an explanation\n\
    \   and, if applicable, suggestions as to how to make the request\n   successful.\n\
    \   IANA must only accept registry updates from the Designated Expert(s)\n   and\
    \ should direct all requests for registration to the review mailing\n   list.\n"
- title: 11.4.1.  Registration Template
  contents:
  - "11.4.1.  Registration Template\n   Error name:\n      The name requested (e.g.,\
    \ \"example\").  Values for the error name\n      MUST NOT include characters\
    \ outside the set %x20-21 / %x23-5B /\n      %x5D-7E.\n   Error usage location:\n\
    \      The location(s) where the error can be used.  The possible\n      locations\
    \ are authorization code grant error response\n      (Section 4.1.2.1), implicit\
    \ grant error response\n      (Section 4.2.2.1), token error response (Section\
    \ 5.2), or resource\n      access error response (Section 7.2).\n   Related protocol\
    \ extension:\n      The name of the extension grant type, access token type, or\n\
    \      extension parameter that the error code is used in conjunction\n      with.\n\
    \   Change controller:\n      For Standards Track RFCs, state \"IETF\".  For others,\
    \ give the name\n      of the responsible party.  Other details (e.g., postal\
    \ address,\n      email address, home page URI) may also be included.\n   Specification\
    \ document(s):\n      Reference to the document(s) that specify the error code,\n\
    \      preferably including a URI that can be used to retrieve a copy of\n   \
    \   the document(s).  An indication of the relevant sections may also\n      be\
    \ included but is not required.\n"
- title: 12.  References
  contents:
  - '12.  References

    '
- title: 12.1.  Normative References
  contents:
  - "12.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [RFC2246]  Dierks, T. and C. Allen, \"The TLS Protocol Version 1.0\"\
    ,\n              RFC 2246, January 1999.\n   [RFC2616]  Fielding, R., Gettys,\
    \ J., Mogul, J., Frystyk, H.,\n              Masinter, L., Leach, P., and T. Berners-Lee,\
    \ \"Hypertext\n              Transfer Protocol -- HTTP/1.1\", RFC 2616, June 1999.\n\
    \   [RFC2617]  Franks, J., Hallam-Baker, P., Hostetler, J., Lawrence, S.,\n  \
    \            Leach, P., Luotonen, A., and L. Stewart, \"HTTP\n              Authentication:\
    \ Basic and Digest Access Authentication\",\n              RFC 2617, June 1999.\n\
    \   [RFC2818]  Rescorla, E., \"HTTP Over TLS\", RFC 2818, May 2000.\n   [RFC3629]\
    \  Yergeau, F., \"UTF-8, a transformation format of\n              ISO 10646\"\
    , STD 63, RFC 3629, November 2003.\n   [RFC3986]  Berners-Lee, T., Fielding, R.,\
    \ and L. Masinter, \"Uniform\n              Resource Identifier (URI): Generic\
    \ Syntax\", STD 66,\n              RFC 3986, January 2005.\n   [RFC4627]  Crockford,\
    \ D., \"The application/json Media Type for\n              JavaScript Object Notation\
    \ (JSON)\", RFC 4627, July 2006.\n   [RFC4949]  Shirey, R., \"Internet Security\
    \ Glossary, Version 2\",\n              RFC 4949, August 2007.\n   [RFC5226] \
    \ Narten, T. and H. Alvestrand, \"Guidelines for Writing an\n              IANA\
    \ Considerations Section in RFCs\", BCP 26, RFC 5226,\n              May 2008.\n\
    \   [RFC5234]  Crocker, D. and P. Overell, \"Augmented BNF for Syntax\n      \
    \        Specifications: ABNF\", STD 68, RFC 5234, January 2008.\n   [RFC5246]\
    \  Dierks, T. and E. Rescorla, \"The Transport Layer Security\n              (TLS)\
    \ Protocol Version 1.2\", RFC 5246, August 2008.\n   [RFC6125]  Saint-Andre, P.\
    \ and J. Hodges, \"Representation and\n              Verification of Domain-Based\
    \ Application Service Identity\n              within Internet Public Key Infrastructure\
    \ Using X.509\n              (PKIX) Certificates in the Context of Transport Layer\n\
    \              Security (TLS)\", RFC 6125, March 2011.\n   [USASCII]  American\
    \ National Standards Institute, \"Coded Character\n              Set -- 7-bit\
    \ American Standard Code for Information\n              Interchange\", ANSI X3.4,\
    \ 1986.\n   [W3C.REC-html401-19991224]\n              Raggett, D., Le Hors, A.,\
    \ and I. Jacobs, \"HTML 4.01\n              Specification\", World Wide Web Consortium\n\
    \              Recommendation REC-html401-19991224, December 1999,\n         \
    \     <http://www.w3.org/TR/1999/REC-html401-19991224>.\n   [W3C.REC-xml-20081126]\n\
    \              Bray, T., Paoli, J., Sperberg-McQueen, C., Maler, E.,\n       \
    \       and F. Yergeau, \"Extensible Markup Language (XML) 1.0\n             \
    \ (Fifth Edition)\", World Wide Web Consortium\n               Recommendation\
    \ REC-xml-20081126, November 2008,\n              <http://www.w3.org/TR/2008/REC-xml-20081126>.\n"
- title: 12.2.  Informative References
  contents:
  - "12.2.  Informative References\n   [OAuth-HTTP-MAC]\n              Hammer-Lahav,\
    \ E., Ed., \"HTTP Authentication: MAC Access\n              Authentication\",\
    \ Work in Progress, February 2012.\n   [OAuth-SAML2]\n              Campbell,\
    \ B. and C. Mortimore, \"SAML 2.0 Bearer Assertion\n              Profiles for\
    \ OAuth 2.0\", Work in Progress, September 2012.\n   [OAuth-THREATMODEL]\n   \
    \           Lodderstedt, T., Ed., McGloin, M., and P. Hunt, \"OAuth 2.0\n    \
    \          Threat Model and Security Considerations\", Work\n              in\
    \ Progress, October 2012.\n   [OAuth-WRAP]\n              Hardt, D., Ed., Tom,\
    \ A., Eaton, B., and Y. Goland, \"OAuth\n              Web Resource Authorization\
    \ Profiles\", Work in Progress,\n              January 2010.\n   [RFC5849]  Hammer-Lahav,\
    \ E., \"The OAuth 1.0 Protocol\", RFC 5849,\n              April 2010.\n   [RFC6750]\
    \  Jones, M. and D. Hardt, \"The OAuth 2.0 Authorization\n              Framework:\
    \ Bearer Token Usage\", RFC 6750, October 2012.\n"
- title: Appendix A.  Augmented Backus-Naur Form (ABNF) Syntax
  contents:
  - "Appendix A.  Augmented Backus-Naur Form (ABNF) Syntax\n   This section provides\
    \ Augmented Backus-Naur Form (ABNF) syntax\n   descriptions for the elements defined\
    \ in this specification using the\n   notation of [RFC5234].  The ABNF below is\
    \ defined in terms of Unicode\n   code points [W3C.REC-xml-20081126]; these characters\
    \ are typically\n   encoded in UTF-8.  Elements are presented in the order first\
    \ defined.\n   Some of the definitions that follow use the \"URI-reference\"\n\
    \   definition from [RFC3986].\n   Some of the definitions that follow use these\
    \ common definitions:\n     VSCHAR     = %x20-7E\n     NQCHAR     = %x21 / %x23-5B\
    \ / %x5D-7E\n     NQSCHAR    = %x20-21 / %x23-5B / %x5D-7E\n     UNICODECHARNOCRLF\
    \ = %x09 /%x20-7E / %x80-D7FF /\n                         %xE000-FFFD / %x10000-10FFFF\n\
    \   (The UNICODECHARNOCRLF definition is based upon the Char definition\n   in\
    \ Section 2.2 of [W3C.REC-xml-20081126], but omitting the Carriage\n   Return\
    \ and Linefeed characters.)\n"
- title: A.1.  "client_id" Syntax
  contents:
  - "A.1.  \"client_id\" Syntax\n   The \"client_id\" element is defined in Section\
    \ 2.3.1:\n     client-id     = *VSCHAR\n"
- title: A.2.  "client_secret" Syntax
  contents:
  - "A.2.  \"client_secret\" Syntax\n   The \"client_secret\" element is defined in\
    \ Section 2.3.1:\n     client-secret = *VSCHAR\n"
- title: A.3.  "response_type" Syntax
  contents:
  - "A.3.  \"response_type\" Syntax\n   The \"response_type\" element is defined in\
    \ Sections 3.1.1 and 8.4:\n     response-type = response-name *( SP response-name\
    \ )\n     response-name = 1*response-char\n     response-char = \"_\" / DIGIT\
    \ / ALPHA\n"
- title: A.4.  "scope" Syntax
  contents:
  - "A.4.  \"scope\" Syntax\n   The \"scope\" element is defined in Section 3.3:\n\
    \     scope       = scope-token *( SP scope-token )\n     scope-token = 1*NQCHAR\n"
- title: A.5.  "state" Syntax
  contents:
  - "A.5.  \"state\" Syntax\n   The \"state\" element is defined in Sections 4.1.1,\
    \ 4.1.2, 4.1.2.1,\n   4.2.1, 4.2.2, and 4.2.2.1:\n     state      = 1*VSCHAR\n"
- title: A.6.  "redirect_uri" Syntax
  contents:
  - "A.6.  \"redirect_uri\" Syntax\n   The \"redirect_uri\" element is defined in\
    \ Sections 4.1.1, 4.1.3,\n   and 4.2.1:\n     redirect-uri      = URI-reference\n"
- title: A.7.  "error" Syntax
  contents:
  - "A.7.  \"error\" Syntax\n   The \"error\" element is defined in Sections 4.1.2.1,\
    \ 4.2.2.1, 5.2,\n   7.2, and 8.5:\n     error             = 1*NQSCHAR\n"
- title: A.8.  "error_description" Syntax
  contents:
  - "A.8.  \"error_description\" Syntax\n   The \"error_description\" element is defined\
    \ in Sections 4.1.2.1,\n   4.2.2.1, 5.2, and 7.2:\n     error-description = 1*NQSCHAR\n"
- title: A.9.  "error_uri" Syntax
  contents:
  - "A.9.  \"error_uri\" Syntax\n   The \"error_uri\" element is defined in Sections\
    \ 4.1.2.1, 4.2.2.1, 5.2,\n   and 7.2:\n     error-uri         = URI-reference\n"
- title: A.10.  "grant_type" Syntax
  contents:
  - "A.10.  \"grant_type\" Syntax\n   The \"grant_type\" element is defined in Sections\
    \ 4.1.3, 4.3.2, 4.4.2,\n   4.5, and 6:\n     grant-type = grant-name / URI-reference\n\
    \     grant-name = 1*name-char\n     name-char  = \"-\" / \".\" / \"_\" / DIGIT\
    \ / ALPHA\n"
- title: A.11.  "code" Syntax
  contents:
  - "A.11.  \"code\" Syntax\n   The \"code\" element is defined in Section 4.1.3:\n\
    \     code       = 1*VSCHAR\n"
- title: A.12.  "access_token" Syntax
  contents:
  - "A.12.  \"access_token\" Syntax\n   The \"access_token\" element is defined in\
    \ Sections 4.2.2 and 5.1:\n     access-token = 1*VSCHAR\n"
- title: A.13.  "token_type" Syntax
  contents:
  - "A.13.  \"token_type\" Syntax\n   The \"token_type\" element is defined in Sections\
    \ 4.2.2, 5.1, and 8.1:\n     token-type = type-name / URI-reference\n     type-name\
    \  = 1*name-char\n     name-char  = \"-\" / \".\" / \"_\" / DIGIT / ALPHA\n"
- title: A.14.  "expires_in" Syntax
  contents:
  - "A.14.  \"expires_in\" Syntax\n   The \"expires_in\" element is defined in Sections\
    \ 4.2.2 and 5.1:\n     expires-in = 1*DIGIT\n"
- title: A.15.  "username" Syntax
  contents:
  - "A.15.  \"username\" Syntax\n   The \"username\" element is defined in Section\
    \ 4.3.2:\n     username = *UNICODECHARNOCRLF\n"
- title: A.16.  "password" Syntax
  contents:
  - "A.16.  \"password\" Syntax\n   The \"password\" element is defined in Section\
    \ 4.3.2:\n     password = *UNICODECHARNOCRLF\n"
- title: A.17.  "refresh_token" Syntax
  contents:
  - "A.17.  \"refresh_token\" Syntax\n   The \"refresh_token\" element is defined\
    \ in Sections 5.1 and 6:\n     refresh-token = 1*VSCHAR\n"
- title: A.18.  Endpoint Parameter Syntax
  contents:
  - "A.18.  Endpoint Parameter Syntax\n   The syntax for new endpoint parameters is\
    \ defined in Section 8.2:\n     param-name = 1*name-char\n     name-char  = \"\
    -\" / \".\" / \"_\" / DIGIT / ALPHA\n"
- title: Appendix B.  Use of application/x-www-form-urlencoded Media Type
  contents:
  - "Appendix B.  Use of application/x-www-form-urlencoded Media Type\n   At the time\
    \ of publication of this specification, the\n   \"application/x-www-form-urlencoded\"\
    \ media type was defined in\n   Section 17.13.4 of [W3C.REC-html401-19991224]\
    \ but not registered in\n   the IANA MIME Media Types registry\n   (<http://www.iana.org/assignments/media-types>).\
    \  Furthermore, that\n   definition is incomplete, as it does not consider non-US-ASCII\n\
    \   characters.\n   To address this shortcoming when generating payloads using\
    \ this media\n   type, names and values MUST be encoded using the UTF-8 character\n\
    \   encoding scheme [RFC3629] first; the resulting octet sequence then\n   needs\
    \ to be further encoded using the escaping rules defined in\n   [W3C.REC-html401-19991224].\n\
    \   When parsing data from a payload using this media type, the names and\n  \
    \ values resulting from reversing the name/value encoding consequently\n   need\
    \ to be treated as octet sequences, to be decoded using the UTF-8\n   character\
    \ encoding scheme.\n   For example, the value consisting of the six Unicode code\
    \ points\n   (1) U+0020 (SPACE), (2) U+0025 (PERCENT SIGN),\n   (3) U+0026 (AMPERSAND),\
    \ (4) U+002B (PLUS SIGN),\n   (5) U+00A3 (POUND SIGN), and (6) U+20AC (EURO SIGN)\
    \ would be encoded\n   into the octet sequence below (using hexadecimal notation):\n\
    \     20 25 26 2B C2 A3 E2 82 AC\n   and then represented in the payload as:\n\
    \     +%25%26%2B%C2%A3%E2%82%AC\n"
- title: Appendix C.  Acknowledgements
  contents:
  - "Appendix C.  Acknowledgements\n   The initial OAuth 2.0 protocol specification\
    \ was edited by David\n   Recordon, based on two previous publications: the OAuth\
    \ 1.0 community\n   specification [RFC5849], and OAuth WRAP (OAuth Web Resource\n\
    \   Authorization Profiles) [OAuth-WRAP].  Eran Hammer then edited many\n   of\
    \ the intermediate drafts that evolved into this RFC.  The Security\n   Considerations\
    \ section was drafted by Torsten Lodderstedt, Mark\n   McGloin, Phil Hunt, Anthony\
    \ Nadalin, and John Bradley.  The section\n   on use of the \"application/x-www-form-urlencoded\"\
    \ media type was\n   drafted by Julian Reschke.  The ABNF section was drafted\
    \ by Michael\n   B. Jones.\n   The OAuth 1.0 community specification was edited\
    \ by Eran Hammer and\n   authored by Mark Atwood, Dirk Balfanz, Darren Bounds,\
    \ Richard M.\n   Conlan, Blaine Cook, Leah Culver, Breno de Medeiros, Brian Eaton,\n\
    \   Kellan Elliott-McCrea, Larry Halff, Eran Hammer, Ben Laurie, Chris\n   Messina,\
    \ John Panzer, Sam Quigley, David Recordon, Eran Sandler,\n   Jonathan Sergent,\
    \ Todd Sieling, Brian Slesinsky, and Andy Smith.\n   The OAuth WRAP specification\
    \ was edited by Dick Hardt and authored by\n   Brian Eaton, Yaron Y. Goland, Dick\
    \ Hardt, and Allen Tom.\n   This specification is the work of the OAuth Working\
    \ Group, which\n   includes dozens of active and dedicated participants.  In particular,\n\
    \   the following individuals contributed ideas, feedback, and wording\n   that\
    \ shaped and formed the final specification:\n   Michael Adams, Amanda Anganes,\
    \ Andrew Arnott, Dirk Balfanz, Aiden\n   Bell, John Bradley, Marcos Caceres, Brian\
    \ Campbell, Scott Cantor,\n   Blaine Cook, Roger Crew, Leah Culver, Bill de hOra,\
    \ Andre DeMarre,\n   Brian Eaton, Wesley Eddy, Wolter Eldering, Brian Ellin, Igor\n\
    \   Faynberg, George Fletcher, Tim Freeman, Luca Frosini, Evan Gilbert,\n   Yaron\
    \ Y. Goland, Brent Goldman, Kristoffer Gronowski, Eran Hammer,\n   Dick Hardt,\
    \ Justin Hart, Craig Heath, Phil Hunt, Michael B. Jones,\n   Terry Jones, John\
    \ Kemp, Mark Kent, Raffi Krikorian, Chasen Le Hara,\n   Rasmus Lerdorf, Torsten\
    \ Lodderstedt, Hui-Lan Lu, Casey Lucas, Paul\n   Madsen, Alastair Mair, Eve Maler,\
    \ James Manger, Mark McGloin,\n   Laurence Miao, William Mills, Chuck Mortimore,\
    \ Anthony Nadalin,\n   Julian Reschke, Justin Richer, Peter Saint-Andre, Nat Sakimura,\
    \ Rob\n   Sayre, Marius Scurtescu, Naitik Shah, Luke Shepard, Vlad Skvortsov,\n\
    \   Justin Smith, Haibin Song, Niv Steingarten, Christian Stuebner,\n   Jeremy\
    \ Suriel, Paul Tarjan, Christopher Thomas, Henry S. Thompson,\n   Allen Tom, Franklin\
    \ Tse, Nick Walker, Shane Weeden, and Skylar\n   Woodward.\n   This document was\
    \ produced under the chairmanship of Blaine Cook,\n   Peter Saint-Andre, Hannes\
    \ Tschofenig, Barry Leiba, and Derek Atkins.\n   The area directors included Lisa\
    \ Dusseault, Peter Saint-Andre, and\n   Stephen Farrell.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Dick Hardt (editor)\n   Microsoft\n   EMail: dick.hardt@gmail.com\n\
    \   URI:   http://dickhardt.org/\n"
