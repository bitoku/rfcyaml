- title: __initial_text__
  contents:
  - '              RTP Payload Format for Vorbis Encoded Audio

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes an RTP payload format for transporting Vorbis\n\
    \   encoded audio.  It details the RTP encapsulation mechanism for raw\n   Vorbis\
    \ data and the delivery mechanisms for the decoder probability\n   model (referred\
    \ to as a codebook), as well as other setup\n   information.\n   Also included\
    \ within this memo are media type registrations and the\n   details necessary\
    \ for the use of Vorbis with the Session Description\n   Protocol (SDP).\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  3\n     1.1.  Conformance and Document Conventions . . . . . .\
    \ . . . . .  3\n   2.  Payload Format . . . . . . . . . . . . . . . . . . . .\
    \ . . . .  3\n     2.1.  RTP Header . . . . . . . . . . . . . . . . . . . . .\
    \ . . .  4\n     2.2.  Payload Header . . . . . . . . . . . . . . . . . . . .\
    \ . .  5\n     2.3.  Payload Data . . . . . . . . . . . . . . . . . . . . . .\
    \ .  6\n     2.4.  Example RTP Packet . . . . . . . . . . . . . . . . . . . .\
    \  8\n   3.  Configuration Headers  . . . . . . . . . . . . . . . . . . . .  8\n\
    \     3.1.  In-band Header Transmission  . . . . . . . . . . . . . . .  9\n  \
    \     3.1.1.  Packed Configuration . . . . . . . . . . . . . . . . . 10\n    \
    \ 3.2.  Out of Band Transmission . . . . . . . . . . . . . . . . . 12\n      \
    \ 3.2.1.  Packed Headers . . . . . . . . . . . . . . . . . . . . 12\n     3.3.\
    \  Loss of Configuration Headers  . . . . . . . . . . . . . . 13\n   4.  Comment\
    \ Headers  . . . . . . . . . . . . . . . . . . . . . . . 13\n   5.  Frame Packetization\
    \  . . . . . . . . . . . . . . . . . . . . . 14\n     5.1.  Example Fragmented\
    \ Vorbis Packet . . . . . . . . . . . . . 15\n     5.2.  Packet Loss  . . . .\
    \ . . . . . . . . . . . . . . . . . . . 17\n   6.  IANA Considerations  . . .\
    \ . . . . . . . . . . . . . . . . . . 18\n     6.1.  Packed Headers IANA Considerations\
    \ . . . . . . . . . . . . 19\n   7.  SDP Related Considerations . . . . . . .\
    \ . . . . . . . . . . . 20\n     7.1.  Mapping Media Type Parameters into SDP\
    \ . . . . . . . . . . 20\n       7.1.1.  SDP Example  . . . . . . . . . . . .\
    \ . . . . . . . . . 21\n     7.2.  Usage with the SDP Offer/Answer Model  . .\
    \ . . . . . . . . 22\n   8.  Congestion Control . . . . . . . . . . . . . . .\
    \ . . . . . . . 22\n   9.  Example  . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . 22\n     9.1.  Stream Radio . . . . . . . . . . . . . . . . . .\
    \ . . . . . 22\n   10. Security Considerations  . . . . . . . . . . . . . . .\
    \ . . . . 23\n   11. Copying Conditions . . . . . . . . . . . . . . . . . . .\
    \ . . . 23\n   12. Acknowledgments  . . . . . . . . . . . . . . . . . . . . .\
    \ . . 23\n   13. References . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . 24\n     13.1. Normative References . . . . . . . . . . . . . . . . . . .\
    \ 24\n     13.2. Informative References . . . . . . . . . . . . . . . . . . 25\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Vorbis is a general purpose perceptual audio codec intended\
    \ to allow\n   maximum encoder flexibility, thus allowing it to scale competitively\n\
    \   over an exceptionally wide range of bit rates.  At the high quality/\n   bitrate\
    \ end of the scale (CD or DAT rate stereo, 16/24 bits), it is\n   in the same\
    \ league as MPEG-4 AAC.  Vorbis is also intended for lower\n   and higher sample\
    \ rates (from 8kHz telephony to 192kHz digital\n   masters) and a range of channel\
    \ representations (monaural,\n   polyphonic, stereo, quadraphonic, 5.1, ambisonic,\
    \ or up to 255\n   discrete channels).\n   Vorbis encoded audio is generally encapsulated\
    \ within an Ogg format\n   bitstream [RFC3533], which provides framing and synchronization.\
    \  For\n   the purposes of RTP transport, this layer is unnecessary, and so raw\n\
    \   Vorbis packets are used in the payload.\n"
- title: 1.1.  Conformance and Document Conventions
  contents:
  - "1.1.  Conformance and Document Conventions\n   The key words \"MUST\", \"MUST\
    \ NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\"\
    , \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted\
    \ as described in BCP 14, [RFC2119] and\n   indicate requirement levels for compliant\
    \ implementations.\n   Requirements apply to all implementations unless otherwise\
    \ stated.\n   An implementation is a software module that supports one of the\
    \ media\n   types defined in this document.  Software modules may support\n  \
    \ multiple media types, but conformance is considered individually for\n   each\
    \ type.\n   Implementations that fail to satisfy one or more \"MUST\" requirements\n\
    \   are considered non-compliant.  Implementations that satisfy all\n   \"MUST\"\
    \ requirements, but fail to satisfy one or more \"SHOULD\"\n   requirements, are\
    \ said to be \"conditionally compliant\".  All other\n   implementations are \"\
    unconditionally compliant\".\n"
- title: 2.  Payload Format
  contents:
  - "2.  Payload Format\n   For RTP-based transport of Vorbis-encoded audio, the standard\
    \ RTP\n   header is followed by a 4-octet payload header, and then the payload\n\
    \   data.  The payload headers are used to associate the Vorbis data with\n  \
    \ its associated decoding codebooks as well as indicate if the\n   following packet\
    \ contains fragmented Vorbis data and/or the number of\n   whole Vorbis data frames.\
    \  The payload data contains the raw Vorbis\n   bitstream information.  There\
    \ are 3 types of Vorbis data; an RTP\n   payload MUST contain just one of them\
    \ at a time.\n"
- title: 2.1.  RTP Header
  contents:
  - "2.1.  RTP Header\n   The format of the RTP header is specified in [RFC3550] and\
    \ shown in\n   Figure 1.  This payload format uses the fields of the header in\
    \ a\n   manner consistent with that specification.\n       0                 \
    \  1                   2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |V=2|P|X|  CC   |M|     PT      |       sequence number         |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                           timestamp                           |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |           synchronization source (SSRC) identifier            |\n   \
    \   +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+\n      |\
    \            contributing source (CSRC) identifiers             |\n      |   \
    \                           ...                              |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                           Figure 1: RTP Header\n   The RTP header begins with\
    \ an octet of fields (V, P, X, and CC) to\n   support specialized RTP uses (see\
    \ [RFC3550] and [RFC3551] for\n   details).  For Vorbis RTP, the following values\
    \ are used.\n   Version (V): 2 bits\n   This field identifies the version of RTP.\
    \  The version used by this\n   specification is two (2).\n   Padding (P): 1 bit\n\
    \   Padding MAY be used with this payload format according to Section 5.1\n  \
    \ of [RFC3550].\n   Extension (X): 1 bit\n   The Extension bit is used in accordance\
    \ with [RFC3550].\n   CSRC count (CC): 4 bits\n   The CSRC count is used in accordance\
    \ with [RFC3550].\n   Marker (M): 1 bit\n   Set to zero.  Audio silence suppression\
    \ is not used.  This conforms\n   to Section 4.1 of [VORBIS-SPEC-REF].\n   Payload\
    \ Type (PT): 7 bits\n   An RTP profile for a class of applications is expected\
    \ to assign a\n   payload type for this format, or a dynamically allocated payload\
    \ type\n   SHOULD be chosen that designates the payload as Vorbis.\n   Sequence\
    \ number: 16 bits\n   The sequence number increments by one for each RTP data\
    \ packet sent,\n   and may be used by the receiver to detect packet loss and to\
    \ restore\n   the packet sequence.  This field is detailed further in [RFC3550].\n\
    \   Timestamp: 32 bits\n   A timestamp representing the sampling time of the first\
    \ sample of the\n   first Vorbis packet in the RTP payload.  The clock frequency\
    \ MUST be\n   set to the sample rate of the encoded audio data and is conveyed\
    \ out-\n   of-band (e.g., as an SDP parameter).\n   SSRC/CSRC identifiers:\n \
    \  These two fields, 32 bits each with one SSRC field and a maximum of\n   16\
    \ CSRC fields, are as defined in [RFC3550].\n"
- title: 2.2.  Payload Header
  contents:
  - "2.2.  Payload Header\n   The 4 octets following the RTP Header section are the\
    \ Payload Header.\n   This header is split into a number of bit fields detailing\
    \ the format\n   of the following payload data packets.\n       0            \
    \       1                   2                   3\n       0 1 2 3 4 5 6 7 8 9\
    \ 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                     Ident                     | F |VDT|# pkts.|\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      \
    \                   Figure 2: Payload Header\n   Ident: 24 bits\n   This 24-bit\
    \ field is used to associate the Vorbis data to a decoding\n   Configuration.\
    \  It is stored as a network byte order integer.\n   Fragment type (F): 2 bits\n\
    \   This field is set according to the following list:\n      0 = Not Fragmented\n\
    \      1 = Start Fragment\n      2 = Continuation Fragment\n      3 = End Fragment\n\
    \   Vorbis Data Type (VDT): 2 bits\n   This field specifies the kind of Vorbis\
    \ data stored in this RTP\n   packet.  There are currently three different types\
    \ of Vorbis\n   payloads.  Each packet MUST contain only a single type of Vorbis\n\
    \   packet (e.g., you must not aggregate configuration and comment\n   packets\
    \ in the same RTP payload).\n      0 = Raw Vorbis payload\n      1 = Vorbis Packed\
    \ Configuration payload\n      2 = Legacy Vorbis Comment payload\n      3 = Reserved\n\
    \   The packets with a VDT of value 3 MUST be ignored.\n   The last 4 bits represent\
    \ the number of complete packets in this\n   payload.  This provides for a maximum\
    \ number of 15 Vorbis packets in\n   the payload.  If the payload contains fragmented\
    \ data, the number of\n   packets MUST be set to 0.\n"
- title: 2.3.  Payload Data
  contents:
  - "2.3.  Payload Data\n   Raw Vorbis packets are currently unbounded in length;\
    \ application\n   profiles will likely define a practical limit.  Typical Vorbis\
    \ packet\n   sizes range from very small (2-3 bytes) to quite large (8-12\n  \
    \ kilobytes).  The reference implementation [LIBVORBIS] typically\n   produces\
    \ packets less than ~800 bytes, except for the setup header\n   packets, which\
    \ are ~4-12 kilobytes.  Within an RTP context, to avoid\n   fragmentation, the\
    \ Vorbis data packet size SHOULD be kept\n   sufficiently small so that after\
    \ adding the RTP and payload headers,\n   the complete RTP packet is smaller than\
    \ the path MTU.\n       0                   1                   2            \
    \       3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\
    \ 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |            length             |       vorbis packet data     ..\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      \
    \                 Figure 3: Payload Data Header\n   Each Vorbis payload packet\
    \ starts with a two octet length header,\n   which is used to represent the size\
    \ in bytes of the following data\n   payload, and is followed by the raw Vorbis\
    \ data padded to the nearest\n   byte boundary, as explained by the Vorbis I Specification\n\
    \   [VORBIS-SPEC-REF].  The length value is stored as a network byte\n   order\
    \ integer.\n   For payloads that consist of multiple Vorbis packets, the payload\n\
    \   data consists of the packet length followed by the packet data for\n   each\
    \ of the Vorbis packets in the payload.\n   The Vorbis packet length header is\
    \ the length of the Vorbis data\n   block only and does not include the length\
    \ field.\n   The payload packing of the Vorbis data packets MUST follow the\n\
    \   guidelines set out in [RFC3551], where the oldest Vorbis packet\n   occurs\
    \ immediately after the RTP packet header.  Subsequent Vorbis\n   packets, if\
    \ any, MUST follow in temporal order.\n   Audio channel mapping is in accordance\
    \ with the Vorbis I\n   Specification [VORBIS-SPEC-REF].\n"
- title: 2.4.  Example RTP Packet
  contents:
  - "2.4.  Example RTP Packet\n   Here is an example RTP payload containing two Vorbis\
    \ packets.\n       0                   1                   2                 \
    \  3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n\
    \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   \
    \   | 2 |0|0|  0    |0|      PT     |       sequence number         |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |               timestamp (in sample rate units)                |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \           synchronisation source (SSRC) identifier            |\n      +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+\n\
    \      |            contributing source (CSRC) identifiers             |\n   \
    \   |                              ...                              |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   \
    \   |                     Ident                     | 0 | 0 | 2 pks |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |            length             |          vorbis data         ..\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      ..\
    \                        vorbis data                           |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |            length             |   next vorbis packet data    ..\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      ..\
    \                        vorbis data                          ..\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      ..               vorbis data                    |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                    Figure 4: Example Raw Vorbis Packet\n   The payload data\
    \ section of the RTP packet begins with the 24-bit\n   Ident field followed by\
    \ the one octet bit field header, which has the\n   number of Vorbis frames set\
    \ to 2.  Each of the Vorbis data frames is\n   prefixed by the two octets length\
    \ field.  The Packet Type and\n   Fragment Type are set to 0.  The Configuration\
    \ that will be used to\n   decode the packets is the one indexed by the ident\
    \ value.\n"
- title: 3.  Configuration Headers
  contents:
  - "3.  Configuration Headers\n   Unlike other mainstream audio codecs, Vorbis has\
    \ no statically\n   configured probability model.  Instead, it packs all entropy\
    \ decoding\n   configuration, Vector Quantization and Huffman models into a data\n\
    \   block that must be transmitted to the decoder with the compressed\n   data.\
    \  A decoder also requires information detailing the number of\n   audio channels,\
    \ bitrates, and similar information to configure itself\n   for a particular compressed\
    \ data stream.  These two blocks of\n   information are often referred to collectively\
    \ as the \"codebooks\" for\n   a Vorbis stream, and are included as special \"\
    header\" packets at the\n   start of the compressed data.  In addition, the Vorbis\
    \ I\n   specification [VORBIS-SPEC-REF] requires the presence of a comment\n \
    \  header packet that gives simple metadata about the stream, but this\n   information\
    \ is not required for decoding the frame sequence.\n   Thus, these two codebook\
    \ header packets must be received by the\n   decoder before any audio data can\
    \ be interpreted.  These requirements\n   pose problems in RTP, which is often\
    \ used over unreliable transports.\n   Since this information must be transmitted\
    \ reliably and, as the RTP\n   stream may change certain configuration data mid-session,\
    \ there are\n   different methods for delivering this configuration data to a\
    \ client,\n   both in-band and out-of-band, which are detailed below.  In order\
    \ to\n   set up an initial state for the client application, the configuration\n\
    \   MUST be conveyed via the signalling channel used to set up the\n   session.\
    \  One example of such signalling is SDP [RFC4566] with the\n   Offer/Answer Model\
    \ [RFC3264].  Changes to the configuration MAY be\n   communicated via a re-invite,\
    \ conveying a new SDP, or sent in-band in\n   the RTP channel.  Implementations\
    \ MUST support an in-band delivery of\n   updated codebooks, and SHOULD support\
    \ out-of-band codebook update\n   using a new SDP file.  The changes may be due\
    \ to different codebooks\n   as well as different bitrates of the RTP stream.\n\
    \   For non-chained streams, the recommended Configuration delivery\n   method\
    \ is inside the Packed Configuration (Section 3.1.1) in the SDP\n   as explained\
    \ the Mapping Media Type Parameters into SDP\n   (Section 7.1).\n   The 24-bit\
    \ Ident field is used to map which Configuration will be\n   used to decode a\
    \ packet.  When the Ident field changes, it indicates\n   that a change in the\
    \ stream has taken place.  The client application\n   MUST have in advance the\
    \ correct configuration.  If the client\n   detects a change in the Ident value\
    \ and does not have this\n   information, it MUST NOT decode the raw associated\
    \ Vorbis data until\n   it fetches the correct Configuration.\n"
- title: 3.1.  In-band Header Transmission
  contents:
  - "3.1.  In-band Header Transmission\n   The Packed Configuration (Section 3.1.1)\
    \ Payload is sent in-band with\n   the packet type bits set to match the Vorbis\
    \ Data Type.  Clients MUST\n   be capable of dealing with fragmentation and periodic\
    \ re-transmission\n   of [RFC4588] the configuration headers.  The RTP timestamp\
    \ value MUST\n   reflect the transmission time of the first data packet for which\
    \ this\n   configuration applies.\n"
- title: 3.1.1.  Packed Configuration
  contents:
  - "3.1.1.  Packed Configuration\n   A Vorbis Packed Configuration is indicated with\
    \ the Vorbis Data Type\n   field set to 1.  Of the three headers defined in the\
    \ Vorbis I\n   specification [VORBIS-SPEC-REF], the Identification and the Setup\n\
    \   MUST be packed as they are, while the Comment header MAY be replaced\n   with\
    \ a dummy one.\n   The packed configuration stores Xiph codec configurations in\
    \ a\n   generic way: the first field stores the number of the following\n   packets\
    \ minus one (count field), the next ones represent the size of\n   the headers\
    \ (length fields), and the headers immediately follow the\n   list of length fields.\
    \  The size of the last header is implicit.\n   The count and the length fields\
    \ are encoded using the following\n   logic: the data is in network byte order;\
    \ every byte has the most\n   significant bit used as a flag, and the following\
    \ 7 bits are used to\n   store the value.  The first 7 most significant bits are\
    \ stored in the\n   first byte.  If there are remaining bits, the flag bit is\
    \ set to 1\n   and the subsequent 7 bits are stored in the following byte.  If\
    \ there\n   are remaining bits, set the flag to 1 and the same procedure is\n\
    \   repeated.  The ending byte has the flag bit set to 0.  To decode,\n   simply\
    \ iterate over the bytes until the flag bit is set to 0.  For\n   every byte,\
    \ the data is added to the accumulated value multiplied by\n   128.\n   The headers\
    \ are packed in the same order as they are present in Ogg\n   [VORBIS-SPEC-REF]:\
    \ Identification, Comment, Setup.\n   The 2 byte length tag defines the length\
    \ of the packed headers as the\n   sum of the Configuration, Comment, and Setup\
    \ lengths.\n       0                   1                   2                 \
    \  3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n\
    \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   \
    \   |V=2|P|X|  CC   |M|     PT      |             xxxx              |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                             xxxxx                             |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \           synchronization source (SSRC) identifier            |\n      +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+\n\
    \      |            contributing source (CSRC) identifiers             |\n   \
    \   |                              ...                              |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   \
    \   |                      Ident                    | 0 | 1 |      1|\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |           length              | n. of headers |    length1    |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \    length2    |                  Identification              ..\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      ..                        Identification                       ..\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      ..\
    \                        Identification                       ..\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      ..                        Identification                       ..\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      ..\
    \               Identification                 |    Comment   ..\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      ..                            Comment                          ..\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      ..\
    \                            Comment                          ..\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      ..                            Comment                          ..\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      ..\
    \           Comment            |             Setup            ..\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      ..                            Setup                            ..\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      ..\
    \                            Setup                            ..\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                   Figure 5: Packed Configuration Figure\n   The Ident field\
    \ is set with the value that will be used by the Raw\n   Payload Packets to address\
    \ this Configuration.  The Fragment type is\n   set to 0 because the packet bears\
    \ the full Packed configuration.  The\n   number of the packet is set to 1.\n"
- title: 3.2.  Out of Band Transmission
  contents:
  - "3.2.  Out of Band Transmission\n   The following packet definition MUST be used\
    \ when Configuration is\n   inside in the SDP.\n"
- title: 3.2.1.  Packed Headers
  contents:
  - "3.2.1.  Packed Headers\n   As mentioned above, the RECOMMENDED delivery vector\
    \ for Vorbis\n   configuration data is via a retrieval method that can be performed\n\
    \   using a reliable transport protocol.  As the RTP headers are not\n   required\
    \ for this method of delivery, the structure of the\n   configuration data is\
    \ slightly different.  The packed header starts\n   with a 32-bit (network-byte\
    \ ordered) count field, which details the\n   number of packed headers that are\
    \ contained in the bundle.  The\n   following shows the Packed header payload\
    \ for each chained Vorbis\n   stream.\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                     Number of packed headers                  |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                          Packed header                        |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                          Packed header                        |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      \
    \               Figure 6: Packed Headers Overview\n       0                  \
    \ 1                   2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                   Ident                       |    length    ..\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      ..\
    \              | n. of headers |    length1    |    length2   ..\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      ..              |             Identification Header            ..\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      .................................................................\n\
    \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   \
    \   ..              |         Comment Header                       ..\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      .................................................................\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      ..\
    \                        Comment Header                        |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                          Setup Header                        ..\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      .................................................................\n\
    \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   \
    \   ..                         Setup Header                         |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                      Figure 7: Packed Headers Detail\n   The key difference\
    \ between the in-band format and this one is that\n   there is no need for the\
    \ payload header octet.  In this figure, the\n   comment has a size bigger than\
    \ 127 bytes.\n"
- title: 3.3.  Loss of Configuration Headers
  contents:
  - "3.3.  Loss of Configuration Headers\n   Unlike the loss of raw Vorbis payload\
    \ data, loss of a configuration\n   header leads to a situation where it will\
    \ not be possible to\n   successfully decode the stream.  Implementations MAY\
    \ try to recover\n   from an error by requesting again the missing Configuration\
    \ or, if\n   the delivery method is in-band, by buffering the payloads waiting\
    \ for\n   the Configuration needed to decode them.  The baseline reaction\n  \
    \ SHOULD either be reset or end the RTP session.\n"
- title: 4.  Comment Headers
  contents:
  - "4.  Comment Headers\n   Vorbis Data Type flag set to 2 indicates that the packet\
    \ contains the\n   comment metadata, such as artist name, track title, and so\
    \ on.  These\n   metadata messages are not intended to be fully descriptive but\
    \ rather\n   to offer basic track/song information.  Clients MAY ignore it\n \
    \  completely.  The details on the format of the comments can be found\n   in\
    \ the Vorbis I Specification [VORBIS-SPEC-REF].\n       0                   1\
    \                   2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3\
    \ 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |V=2|P|X|  CC   |M|     PT      |             xxxx              |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                             xxxxx                             |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |           synchronization source (SSRC) identifier            |\n   \
    \   +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+\n      |\
    \            contributing source (CSRC) identifiers             |\n      |   \
    \                           ...                              |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   \
    \   |                      Ident                    | 0 | 2 |      1|\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |            length             |            Comment           ..\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      ..\
    \                           Comment                           ..\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      ..                           Comment                            |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      \
    \                   Figure 8: Comment Packet\n   The 2-byte length field is necessary\
    \ since this packet could be\n   fragmented.\n"
- title: 5.  Frame Packetization
  contents:
  - "5.  Frame Packetization\n   Each RTP payload contains either one Vorbis packet\
    \ fragment or an\n   integer number of complete Vorbis packets (up to a maximum\
    \ of 15\n   packets, since the number of packets is defined by a 4-bit value).\n\
    \   Any Vorbis data packet that is less than path MTU SHOULD be bundled\n   in\
    \ the RTP payload with as many Vorbis packets as will fit, up to a\n   maximum\
    \ of 15, except when such bundling would exceed an\n   application's desired transmission\
    \ latency.  Path MTU is detailed in\n   [RFC1191] and [RFC1981].\n   A fragmented\
    \ packet has a zero in the last four bits of the payload\n   header.  The first\
    \ fragment will set the Fragment type to 1.  Each\n   fragment after the first\
    \ will set the Fragment type to 2 in the\n   payload header.  The consecutive\
    \ fragments MUST be sent without any\n   other payload being sent between the\
    \ first and the last fragment.\n   The RTP payload containing the last fragment\
    \ of the Vorbis packet\n   will have the Fragment type set to 3.  To maintain\
    \ the correct\n   sequence for fragmented packet reception, the timestamp field\
    \ of\n   fragmented packets MUST be the same as the first packet sent, with\n\
    \   the sequence number incremented as normal for the subsequent RTP\n   payloads;\
    \ this will affect the RTCP jitter measurement.  The length\n   field shows the\
    \ fragment length.\n"
- title: 5.1.  Example Fragmented Vorbis Packet
  contents:
  - "5.1.  Example Fragmented Vorbis Packet\n   Here is an example of a fragmented\
    \ Vorbis packet split over three RTP\n   payloads.  Each of them contains the\
    \ standard RTP headers as well as\n   the 4-octet Vorbis headers.\n      Packet\
    \ 1:\n       0                   1                   2                   3\n \
    \      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |V=2|P|X|\
    \  CC   |M|     PT      |           1000                |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                            12345                              |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \           synchronization source (SSRC) identifier            |\n      +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+\n\
    \      |            contributing source (CSRC) identifiers             |\n   \
    \   |                              ...                              |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   \
    \   |                       Ident                   | 1 | 0 |      0|\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |             length            |            vorbis data       ..\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      ..\
    \                        vorbis data                           |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \              Figure 9: Example Fragmented Packet (Packet 1)\n   In this payload,\
    \ the initial sequence number is 1000 and the\n   timestamp is 12345.  The Fragment\
    \ type is set to 1, the number of\n   packets field is set to 0, and as the payload\
    \ is raw Vorbis data, the\n   VDT field is set to 0.\n      Packet 2:\n      \
    \ 0                   1                   2                   3\n       0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |V=2|P|X|  CC   |M|     PT      |           1001                |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                             12345                             |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |           synchronization source (SSRC) identifier            |\n   \
    \   +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+\n      |\
    \            contributing source (CSRC) identifiers             |\n      |   \
    \                           ...                              |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   \
    \   |                       Ident                   | 2 | 0 |      0|\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |             length            |          vorbis data         ..\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      ..\
    \                        vorbis data                           |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \              Figure 10: Example Fragmented Packet (Packet 2)\n   The Fragment\
    \ type field is set to 2, and the number of packets field\n   is set to 0.  For\
    \ large Vorbis fragments, there can be several of\n   these types of payloads.\
    \  The maximum packet size SHOULD be no\n   greater than the path MTU, including\
    \ all RTP and payload headers.\n   The sequence number has been incremented by\
    \ one, but the timestamp\n   field remains the same as the initial payload.\n\
    \      Packet 3:\n       0                   1                   2           \
    \        3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\
    \ 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |V=2|P|X|  CC   |M|     PT      |           1002                |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                             12345                             |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |           synchronization source (SSRC) identifier            |\n   \
    \   +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+\n      |\
    \            contributing source (CSRC) identifiers             |\n      |   \
    \                           ...                              |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   \
    \   |                      Ident                    | 3 | 0 |      0|\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |             length            |          vorbis data         ..\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      ..\
    \                        vorbis data                           |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \              Figure 11: Example Fragmented Packet (Packet 3)\n   This is the\
    \ last Vorbis fragment payload.  The Fragment type is set\n   to 3 and the packet\
    \ count remains set to 0.  As in the previous\n   payloads, the timestamp remains\
    \ set to the first payload timestamp in\n   the sequence and the sequence number\
    \ has been incremented.\n"
- title: 5.2.  Packet Loss
  contents:
  - "5.2.  Packet Loss\n   As there is no error correction within the Vorbis stream,\
    \ packet loss\n   will result in a loss of signal.  Packet loss is more of an\
    \ issue for\n   fragmented Vorbis packets as the client will have to cope with\
    \ the\n   handling of the Fragment Type.  In case of loss of fragments, the\n\
    \   client MUST discard all the remaining Vorbis fragments and decode the\n  \
    \ incomplete packet.  If we use the fragmented Vorbis packet example\n   above\
    \ and the first RTP payload is lost, the client MUST detect that\n   the next\
    \ RTP payload has the packet count field set to 0 and the\n   Fragment type 2\
    \ and MUST drop it.  The next RTP payload, which is the\n   final fragmented packet,\
    \ MUST be dropped in the same manner.  If the\n   missing RTP payload is the last,\
    \ the two fragments received will be\n   kept and the incomplete Vorbis packet\
    \ decoded.\n   Loss of any of the Configuration fragment will result in the loss\
    \ of\n   the full Configuration packet with the result detailed in the Loss of\n\
    \   Configuration Headers (Section 3.3) section.\n"
- title: 6.  IANA Considerations
  contents:
  - "6.  IANA Considerations\n   Type name:  audio\n   Subtype name:  vorbis\n   Required\
    \ parameters:\n      rate:  indicates the RTP timestamp clock rate as described\
    \ in RTP\n         Profile for Audio and Video Conferences with Minimal Control\n\
    \         [RFC3551].\n      channels:  indicates the number of audio channels\
    \ as described in\n         RTP Profile for Audio and Video Conferences with Minimal\n\
    \         Control [RFC3551].\n      configuration:  the base64 [RFC4648] representation\
    \ of the Packed\n         Headers (Section 3.2.1).\n   Encoding considerations:\n\
    \      This media type is framed and contains binary data.\n   Security considerations:\n\
    \      See Section 10 of RFC 5215.\n   Interoperability considerations:\n    \
    \  None\n   Published specification:\n      RFC 5215\n      Ogg Vorbis I specification:\
    \ Codec setup and packet decode.\n      Available from the Xiph website, http://xiph.org/\n\
    \   Applications which use this media type:\n      Audio streaming and conferencing\
    \ tools\n   Additional information:\n      None\n   Person & email address to\
    \ contact for further information:\n      Luca Barbato: <lu_zero@gentoo.org>\n\
    \      IETF Audio/Video Transport Working Group\n   Intended usage:\n      COMMON\n\
    \   Restriction on usage:\n      This media type depends on RTP framing, hence\
    \ is only defined for\n      transfer via RTP [RFC3550].\n   Author:\n      Luca\
    \ Barbato\n   Change controller:\n      IETF AVT Working Group delegated from\
    \ the IESG\n"
- title: 6.1.  Packed Headers IANA Considerations
  contents:
  - "6.1.  Packed Headers IANA Considerations\n   The following IANA considerations\
    \ refers to the split configuration\n   Packed Headers (Section 3.2.1) used within\
    \ RFC 5215.\n   Type name:  audio\n   Subtype name:  vorbis-config\n   Required\
    \ parameters:\n      None\n   Optional parameters:\n      None\n   Encoding considerations:\n\
    \      This media type contains binary data.\n   Security considerations:\n  \
    \    See Section 10 of RFC 5215.\n   Interoperability considerations:\n      None\n\
    \   Published specification:\n      RFC 5215\n   Applications which use this media\
    \ type:\n      Vorbis encoded audio, configuration data\n   Additional information:\n\
    \      None\n   Person & email address to contact for further information:\n \
    \     Luca Barbato: <lu_zero@gentoo.org>\n      IETF Audio/Video Transport Working\
    \ Group\n   Intended usage:  COMMON\n   Restriction on usage:\n      This media\
    \ type doesn't depend on the transport.\n   Author:\n      Luca Barbato\n   Change\
    \ controller:\n      IETF AVT Working Group delegated from the IESG\n"
- title: 7.  SDP Related Considerations
  contents:
  - "7.  SDP Related Considerations\n   The following paragraphs define the mapping\
    \ of the parameters\n   described in the IANA considerations section and their\
    \ usage in the\n   Offer/Answer Model [RFC3264].  In order to be forward compatible,\
    \ the\n   implementation MUST ignore unknown parameters.\n"
- title: 7.1.  Mapping Media Type Parameters into SDP
  contents:
  - "7.1.  Mapping Media Type Parameters into SDP\n   The information carried in the\
    \ Media Type specification has a\n   specific mapping to fields in the Session\
    \ Description Protocol (SDP)\n   [RFC4566], which is commonly used to describe\
    \ RTP sessions.  When SDP\n   is used to specify sessions, the mapping are as\
    \ follows:\n   o  The type name (\"audio\") goes in SDP \"m=\" as the media name.\n\
    \   o  The subtype name (\"vorbis\") goes in SDP \"a=rtpmap\" as the encoding\n\
    \      name.\n   o  The parameter \"rate\" also goes in \"a=rtpmap\" as the clock\
    \ rate.\n   o  The parameter \"channels\" also goes in \"a=rtpmap\" as the channel\n\
    \      count.\n   o  The mandated parameters \"configuration\" MUST be included\
    \ in the\n      SDP \"a=fmtp\" attribute.\n   If the stream comprises chained\
    \ Vorbis files and all of them are\n   known in advance, the Configuration Packet\
    \ for each file SHOULD be\n   passed to the client using the configuration attribute.\n\
    \   The port value is specified by the server application bound to the\n   address\
    \ specified in the c= line.  The channel count value specified\n   in the rtpmap\
    \ attribute SHOULD match the current Vorbis stream or\n   should be considered\
    \ the maximum number of channels to be expected.\n   The timestamp clock rate\
    \ MUST be a multiple of the sample rate; a\n   different payload number MUST be\
    \ used if the clock rate changes.  The\n   Configuration payload delivers the\
    \ exact information, thus the SDP\n   information SHOULD be considered a hint.\
    \  An example is found below.\n"
- title: 7.1.1.  SDP Example
  contents:
  - "7.1.1.  SDP Example\n   The following example shows a basic SDP single stream.\
    \  The first\n   configuration packet is inside the SDP; other configurations\
    \ could be\n   fetched at any time from the URIs provided.  The following base64\n\
    \   [RFC4648] configuration string is folded in this example due to RFC\n   line\
    \ length limitations.\n      c=IN IP4 192.0.2.1\n      m=audio RTP/AVP 98\n  \
    \    a=rtpmap:98 vorbis/44100/2\n      a=fmtp:98 configuration=AAAAAZ2f4g9NAh4aAXZvcmJpcwA...;\n\
    \   Note that the payload format (encoding) names are commonly shown in\n   uppercase.\
    \  Media Type subtypes are commonly shown in lowercase.\n   These names are case-insensitive\
    \ in both places.  Similarly,\n   parameter names are case-insensitive both in\
    \ Media Type types and in\n   the default mapping to the SDP a=fmtp attribute.\
    \  The a=fmtp line is\n   a single line, even if it is shown as multiple lines\
    \ in this document\n   for clarity.\n"
- title: 7.2.  Usage with the SDP Offer/Answer Model
  contents:
  - "7.2.  Usage with the SDP Offer/Answer Model\n   There are no negotiable parameters.\
    \  All of them are declarative.\n"
- title: 8.  Congestion Control
  contents:
  - "8.  Congestion Control\n   The general congestion control considerations for\
    \ transporting RTP\n   data apply to Vorbis audio over RTP as well.  See the RTP\n\
    \   specification [RFC3550] and any applicable RTP profile (e.g.,\n   [RFC3551]).\
    \  Audio data can be encoded using a range of different bit\n   rates, so it is\
    \ possible to adapt network bandwidth by adjusting the\n   encoder bit rate in\
    \ real time or by having multiple copies of content\n   encoded at different bit\
    \ rates.\n"
- title: 9.  Example
  contents:
  - "9.  Example\n   The following example shows a common usage pattern that MAY be\n\
    \   applied in such a situation.  The main scope of this section is to\n   explain\
    \ better usage of the transmission vectors.\n"
- title: 9.1.  Stream Radio
  contents:
  - "9.1.  Stream Radio\n   This is one of the most common situations: there is one\
    \ single server\n   streaming content in multicast, and the clients may start\
    \ a session\n   at a random time.  The content itself could be a mix of a live\
    \ stream\n   (as the webjockey's voice) and stored streams (as the music she\n\
    \   plays).\n   In this situation, we don't know in advance how many codebooks\
    \ we\n   will use.  The clients can join anytime and users expect to start\n \
    \  listening to the content in a short time.\n   Upon joining, the client will\
    \ receive the current Configuration\n   necessary to decode the current stream\
    \ inside the SDP so that the\n   decoding will start immediately after.\n   When\
    \ the streamed content changes, the new Configuration is sent in-\n   band before\
    \ the actual stream, and the Configuration that has to be\n   sent inside the\
    \ SDP is updated.  Since the in-band method is\n   unreliable, an out-of-band\
    \ fallback is provided.\n   The client may choose to fetch the Configuration from\
    \ the alternate\n   source as soon as it discovers a Configuration packet got\
    \ lost in-\n   band, or use selective retransmission [RFC3611] if the server\n\
    \   supports this feature.\n   A server-side optimization would be to keep a hash\
    \ list of the\n   Configurations per session, which avoids packing all of them\
    \ and\n   sending the same Configuration with different Ident tags.\n   A client-side\
    \ optimization would be to keep a tag list of the\n   Configurations per session\
    \ and not process configuration packets that\n   are already known.\n"
- title: 10.  Security Considerations
  contents:
  - "10.  Security Considerations\n   RTP packets using this payload format are subject\
    \ to the security\n   considerations discussed in the RTP specification [RFC3550],\
    \ the\n   base64 specification [RFC4648], and the URI Generic syntax\n   specification\
    \ [RFC3986].  Among other considerations, this implies\n   that the confidentiality\
    \ of the media stream is achieved by using\n   encryption.  Because the data compression\
    \ used with this payload\n   format is applied end-to-end, encryption may be performed\
    \ on the\n   compressed data.\n"
- title: 11.  Copying Conditions
  contents:
  - "11.  Copying Conditions\n   The authors agree to grant third parties the irrevocable\
    \ right to\n   copy, use, and distribute the work, with or without modification,\
    \ in\n   any medium, without royalty, provided that, unless separate\n   permission\
    \ is granted, redistributed modified works do not contain\n   misleading author,\
    \ version, name of work, or endorsement information.\n"
- title: 12.  Acknowledgments
  contents:
  - "12.  Acknowledgments\n   This document is a continuation of the following documents:\n\
    \   Moffitt, J., \"RTP Payload Format for Vorbis Encoded Audio\", February\n \
    \  2001.\n   Kerr, R., \"RTP Payload Format for Vorbis Encoded Audio\", December\n\
    \   2004.\n   The Media Type declaration is a continuation of the following\n\
    \   document:\n   Short, B., \"The audio/rtp-vorbis MIME Type\", January 2008.\n\
    \   Thanks to the AVT, Vorbis Communities / Xiph.Org Foundation including\n  \
    \ Steve Casner, Aaron Colwell, Ross Finlayson, Fluendo, Ramon Garcia,\n   Pascal\
    \ Hennequin, Ralph Giles, Tor-Einar Jarnbjo, Colin Law, John\n   Lazzaro, Jack\
    \ Moffitt, Christopher Montgomery, Colin Perkins, Barry\n   Short, Mike Smith,\
    \ Phil Kerr, Michael Sparks, Magnus Westerlund,\n   David Barrett, Silvia Pfeiffer,\
    \ Stefan Ehmann, Gianni Ceccarelli, and\n   Alessandro Salvatori.  Thanks to the\
    \ LScube Group, in particular\n   Federico Ridolfo, Francesco Varano, Giampaolo\
    \ Mancini, Dario\n   Gallucci, and Juan Carlos De Martin.\n"
- title: 13.  References
  contents:
  - '13.  References

    '
- title: 13.1.  Normative References
  contents:
  - "13.1.  Normative References\n   [RFC1191]          Mogul, J. and S. Deering,\
    \ \"Path MTU discovery\",\n                      RFC 1191, November 1990.\n  \
    \ [RFC1981]          McCann, J., Deering, S., and J. Mogul, \"Path MTU\n     \
    \                 Discovery for IP version 6\", RFC 1981,\n                  \
    \    August 1996.\n   [RFC2119]          Bradner, S., \"Key words for use in RFCs\
    \ to\n                      Indicate Requirement Levels\", BCP 14, RFC 2119,\n\
    \                      March 1997.\n   [RFC3264]          Rosenberg, J. and H.\
    \ Schulzrinne, \"An Offer/Answer\n                      Model with Session Description\
    \ Protocol (SDP)\",\n                      RFC 3264, June 2002.\n   [RFC3550]\
    \          Schulzrinne, H., Casner, S., Frederick, R., and V.\n              \
    \        Jacobson, \"RTP: A Transport Protocol for Real-Time\n               \
    \       Applications\", STD 64, RFC 3550, July 2003.\n   [RFC3551]          Schulzrinne,\
    \ H. and S. Casner, \"RTP Profile for\n                      Audio and Video Conferences\
    \ with Minimal Control\",\n                      STD 65, RFC 3551, July 2003.\n\
    \   [RFC3986]          Berners-Lee, T., Fielding, R., and L. Masinter,\n     \
    \                 \"Uniform Resource Identifier (URI): Generic\n             \
    \         Syntax\", STD 66, RFC 3986, January 2005.\n   [RFC4566]          Handley,\
    \ M., Jacobson, V., and C. Perkins, \"SDP:\n                      Session Description\
    \ Protocol\", RFC 4566,\n                      July 2006.\n   [RFC4648]      \
    \    Josefsson, S., \"The Base16, Base32, and Base64\n                      Data\
    \ Encodings\", RFC 4648, October 2006.\n   [VORBIS-SPEC-REF]  \"Ogg Vorbis I specification:\
    \  Codec setup and\n                      packet decode.  Available from the Xiph\
    \ website,\n                      http://xiph.org/vorbis/doc/Vorbis_I_spec.html\"\
    .\n"
- title: 13.2.  Informative References
  contents:
  - "13.2.  Informative References\n   [LIBVORBIS]        \"libvorbis: Available from\
    \ the dedicated website,\n                      http://vorbis.com/\".\n   [RFC3533]\
    \          Pfeiffer, S., \"The Ogg Encapsulation Format\n                    \
    \  Version 0\", RFC 3533, May 2003.\n   [RFC3611]          Friedman, T., Caceres,\
    \ R., and A. Clark, \"RTP\n                      Control Protocol Extended Reports\
    \ (RTCP XR)\",\n                      RFC 3611, November 2003.\n   [RFC4588] \
    \         Rey, J., Leon, D., Miyazaki, A., Varsa, V., and R.\n               \
    \       Hakenberg, \"RTP Retransmission Payload Format\",\n                  \
    \    RFC 4588, July 2006.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Luca Barbato\n   Xiph.Org Foundation\n   EMail: lu_zero@gentoo.org\n\
    \   URI:   http://xiph.org/\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2008).\n   This document\
    \ is subject to the rights, licenses and restrictions\n   contained in BCP 78,\
    \ and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE\
    \ INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED,\
    \ INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION\
    \ HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY\
    \ OR FITNESS FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
