- title: __initial_text__
  contents:
  - "                     Definitions of Managed Objects\n                     for\
    \ ATM Management Version 8.0\n                              using SMIv2\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   8.4 Support of Proprietary Virtual Interface  by  ifT-able\
    \ ..   14\n   9. ILMI MIB and the ATM Managed Objects .....................  \
    \ 15\n   10. Definitions .............................................   18\n\
    \   11. Acknowledgments .........................................   72\n   12.\
    \ References ..............................................   72\n   13. Security\
    \ Considerations .................................   73\n   14. Authors' Addresses\
    \ ......................................   73\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This memo defines a portion of the Management Information\
    \ Base (MIB)\n   for use with network management protocols in the Internet community.\n\
    \   In particular, it describes objects used for managing ATM-based\n   interfaces,\
    \ devices, networks and services.\n   This memo specifies a MIB module in a manner\
    \ that is both compliant\n   to the SNMPv2 SMI, and semantically identical to\
    \ the peer SNMPv1\n   definitions.\n"
- title: 2.  The SNMPv2 Network Management Framework
  contents:
  - "2.  The SNMPv2 Network Management Framework\n   The SNMPv2 Network Management\
    \ Framework consists of four major\n   components.  They are:\n      0    RFC\
    \ 1442 [1] which defines the SMI, the mechanisms used\n           for describing\
    \ and naming objects for the purpose of\n           management.\n      0    STD\
    \ 17, RFC 1213 [2] defines MIB-II, the core set of\n           managed objects\
    \ for the Internet suite of protocols.\n      0    RFC 1445 [3] which defines\
    \ the administrative and other\n           architectural aspects of the framework.\n\
    \      0    RFC 1448 [4] which defines the protocol used for network\n       \
    \    access to managed objects.\n   The Framework permits new objects to be defined\
    \ for the purpose of\n   experimentation and evaluation.\n"
- title: 3.  Object Definitions
  contents:
  - "3.  Object Definitions\n   Managed objects are accessed via a virtual information\
    \ store, termed\n   the Management Information Base or MIB.  Objects in the MIB\
    \ are\n   defined using the subset of Abstract Syntax Notation One (ASN.1)\n \
    \  defined in the SMI.  In particular, each object type is named by an\n   OBJECT\
    \ IDENTIFIER, an administratively assigned name.  The object\n   type together\
    \ with an object instance serves to uniquely identify a\n   specific instantiation\
    \ of the object.  For human convenience, we\n   often use a textual string, termed\
    \ the descriptor, to also refer to\n   the object type.\n"
- title: 4.  ATM Terminology
  contents:
  - "4.  ATM Terminology\n   Some basic ATM terminologies are described in this section\
    \ to\n   facilitate defining the ATM managed objects.\n"
- title: 4.1.  VCL/VPL and VCC/VPC
  contents:
  - "4.1.  VCL/VPL and VCC/VPC\n   There are two distinct types of ATM virtual connections:\
    \ Virtual\n   Channel Connections (VCCs) and Virtual Path Connection (VPCs). \
    \ As\n   shown in Figures 1 and 2, ATM virtual connections consist of\n   concatenated\
    \ series of virtual links which forms a path between two\n   end points, with\
    \ each concatenation occurring at an ATM switch.\n   Virtual links of VCCs are\
    \ called Virtual Channel Links (VCLs).\n   Virtual links of VPCs are called Virtual\
    \ Path Links (VPLs). The VCI\n   and VPI fields in the ATM cell header associate\
    \ each cell of a VCC\n   with a particular VCL over a given physical link.  The\
    \ VPI field in\n   the ATM cell header associates each cell of a VPC with a particular\n\
    \   VPL over a given physical link.  Switches route cells between VCLs\n   (or\
    \ VPLs) via a cross-connect function according to the cells'\n   VCI/VPI (or VPI)\
    \ values.\n            <-----------------------VCC-------------------------->\n\
    \                      ------------             -----------\n                \
    \      |ATM       |             |ATM       |\n                      |X-Connect\
    \ |             |X-Connect |\n               VCL1   |Point     |    VCL2     |Point\
    \     |  VCL3\n            O---------|----X-----|-------|-----|----X-----|-------O\n\
    \                      |          |             |          |\n               \
    \       ------------             ------------\n                       ATM Switch\
    \               ATM Switch\n            Figure 1: Virtual Channel Links and\n\
    \                      Virtual Channel Connection\n            <-----------------------VPC-------------------------->\n\
    \                      ------------             -----------\n                \
    \      |ATM       |             |ATM       |\n                      |X-Connect\
    \ |             |X-Connect |\n               VPL1   |Point     |    VPL2     |Point\
    \     |  VPL3\n            O---------|----X-----|-------|-----|----X-----|-------O\n\
    \                      |          |             |          |\n               \
    \       ------------             ------------\n                       ATM Switch\
    \               ATM Switch\n            Figure 2: Virtual Path Links and\n   \
    \                   Virtual Path Connection\n   A single ATM end-system or switch\
    \ does not support the whole end-to-\n   end span of a VCC (or VPC).  Rather,\
    \ multiple ATM end- systems and/or\n   switches each support one piece of the\
    \ VCC (or VPC).   That is, each\n   ATM end-system at one end of the VCC/VPC supports\
    \ its end of the\n   VCC/VPC  plus the VCLs or VPLs on its external interfaces,\
    \ and each\n   switch through which the VCC/VPC passes, supports the multiple\n\
    \   VCLs/VPLs on that switch's external interfaces and the cross-\n   connection\
    \ of those VCLs/VPLs through that switch.  Thus, the end-\n   to-end management\
    \ of a VCC or VPC is achieved only by appropriate\n   management of its individual\
    \ pieces in combination.\n   Note that for management purposes, an ATM network\
    \ may be viewed as a\n   large distributed switch by hiding all the network's\
    \ internal\n   connectivity as being internal to the distributed switch (as shown\
    \ in\n   Figure 2a).  This model may for example be used for Customer Network\n\
    \   Management (CNM) purposes.\n            <---------------------VCC--------------------------->\n\
    \                    --------------------------------------\n                \
    \    |                                    |\n                    | ----------\
    \              ---------- |\n                    | | ATM    |              | ATM\
    \    | |\n               VCL1 | | Switch |              | Switch | | VCL3\n  \
    \          O-------|-|--------|------/-------|--------|-|------O\n           \
    \         | |        |              |        | |\n                    | ----------\
    \              ---------- |\n                    |                           \
    \         |\n                    |             ATM Network            |\n    \
    \                --------------------------------------\n            Figure 2a:\
    \ ATM Network modeled as a large distributed\n                       switch\n\
    \   A VCC has a set of traffic characteristics (i.e., bandwidth\n   parameters,\
    \ QoS Class parameters, etc.).  VCLs inherit their traffic\n   characteristics\
    \ from the VCC of which they are a part.  VCCs are bi-\n   directional by definition.\
    \  However, the traffic parameters in the\n   two directions of a connection can\
    \ be symmetric or asymmetric, i.e.,\n   the two directions can have the same or\
    \ different traffic flows.  A\n   uni-directional traffic flow across a VCC is\
    \ achieved by assigning a\n   zero bandwidth in one direction.  Note that in addition\
    \ to the\n   bandwidth required by the user traffic flow, bandwidth is also\n\
    \   required for OAM cell flows, even for the zero-bandwidth direction of\n  \
    \ a uni-directional connection.  These same principles apply to VPCs.\n"
- title: 4.2.  PVC and SVC
  contents:
  - "4.2.  PVC and SVC\n   A Permanent Virtual Connection (PVC) is a provisioned VCC\
    \ or VPC.  A\n   Switched Virtual Connection (SVC) is a switched VCC or VPC that\
    \ is\n   set up in real-time via call set-up signaling procedures.  A PVC (or\n\
    \   an SVC) can be a point-to-point, point-to-multipoint, or multipoint-\n   to-multipoint\
    \ VCC or VPC.\n"
- title: 4.3.  Traffic Management Parameters
  contents:
  - '4.3.  Traffic Management Parameters

    '
- title: 4.3.1.  Traffic Policing and Traffic Shaping Parameters
  contents:
  - "4.3.1.  Traffic Policing and Traffic Shaping Parameters\n   In order to allocate\
    \ resources fairly among different users, some\n   networks police traffic at\
    \ resource access points.  The traffic\n   enforcement or policing taken at a\
    \ UNI is called Usage Parameter\n   Control (UPC) and is activated on an incoming\
    \ VCL or VPL as shown in\n   Figure 3.  The use of the traffic enforcer at the\
    \ ingress of the\n   connection is to make sure that the user traffic does not\
    \ exceed the\n   negotiated traffic parameters such as the peak cell rate associated\n\
    \   with a specific traffic descriptor type.\n                     ----------\
    \             ----------\n              UNI    |  ATM   |    NNI      |  ATM \
    \  |     UNI\n               |     | switch |     |       | switch |      |\n\
    \          O<---|---->X(UPC)   |<----|------>|   (UPC)X<-----|--->O\n        \
    \       | VCL |        |     | VCL   |        |  VCL |\n                     ----------\
    \             ----------\n                         Figure 3: An Example of a UPC\n\
    \   In addition, traffic shaping may be performed on an outgoing VPL or\n   VCL\
    \ at a given ATM interface.  The function of the ATM traffic shaper\n   either\
    \ at the source or an egress point of the connection is to\n   smooth the outgoing\
    \ cell traffic inter-arrival time.  If policing or\n   shaping is not performed\
    \ then the policing or shaping algorithm is\n   not activated.  ATM Forum has\
    \ specified seven traffic descriptor\n   types including one for the best effort\
    \ traffic [9].\n"
- title: 4.3.2.  Cell Loss Priority
  contents:
  - "4.3.2.  Cell Loss Priority\n   To prioritize traffic during resource congestion,\
    \ ATM cells are\n   assigned one of the two types of Cell Loss Priority (CLP),\
    \ CLP=0 and\n   CLP=1.  ATM cells with CLP=0 have a higher priority in regard\
    \ to cell\n   loss than ATM cells with CLP=1.  Therefore, during resource\n  \
    \ congestions, CLP=1 cells are dropped before any CLP=0 cell is\n   dropped.\n"
- title: 4.3.3.  QoS Class
  contents:
  - "4.3.3.  QoS Class\n   A VCC or VPC is associated with one of a number of Quality\
    \ of Service\n   (QoS) classes.  The following service classes have been specified:\n\
    \      Service Class A: Constant bit rate video and Circuit\n                \
    \       emulation\n      Service Class B: Variable bit rate video/audio\n    \
    \  Service Class C: Connection-oriented data\n      Service Class D: Connectionless\
    \ data\n   Four QoS classes numbered 1, 2, 3, and 4 have been specified with the\n\
    \   aim of supporting service classes A, B, C, and D respectively.  The\n   VCLs\
    \ (or VPLs) concatenated to form a VCC (or VPC) will all have the\n   same QoS\
    \ class as that of the VCC (or VPC).  The Cell Loss Ratio\n   (CLR), Cell Delay\
    \ Variation (CDV), and end-to-end Cell Delay (CD)\n   parameters are defined as\
    \ part of QoS Class definition.  In addition,\n   an unspecified QoS Class numbered\
    \ 0 is specified for best effort\n   traffic.\n"
- title: 5.  Overview
  contents:
  - "5.  Overview\n   ATM management objects are used to manage ATM interfaces, ATM\
    \ virtual\n   links,  ATM cross-connects, AAL5 entities and AAL5 connections\n\
    \   supported by ATM hosts, ATM switches and ATM networks.  This section\n   provides\
    \ an overview and background of how to use this MIB and other\n   potential MIBs\
    \ for this purpose.\n   The purpose of this memo is primarily to manage ATM PVCs.\
    \  ATM SVCs\n   are also represented by the management information in this MIB.\n\
    \   However, full management of SVCs may require additional capabilities\n   which\
    \ are beyond the scope of this memo.\n"
- title: 5.1.  Background
  contents:
  - "5.1.  Background\n   In addition to the MIB module defined in this memo, other\
    \ MIB modules\n   are necessary to manage ATM interfaces, links and cross-connects.\n\
    \   Examples include MIB II for general system and interface management\n   (RFC\
    \ 1213 and RFC 1573), the DS3 or SONET MIBs for management of\n   physical interfaces,\
    \ and, as appropriate, MIB modules for\n   applications that make use of ATM,\
    \ such as SMDS.  These MIB modules\n   are outside the scope of this specification.\n\
    \   The current specification of this ATM MIB is based on SNMPv2.\n"
- title: 5.2.  Structure of the MIB
  contents:
  - "5.2.  Structure of the MIB\n   The managed ATM objects are arranged into the\
    \ following groups:\n                (1) ATM interface configuration group\n \
    \               (2) ATM interface DS3 PLCP group\n                (3) ATM interface\
    \ TC Sublayer group\n                (4) ATM interface virtual link (VPL/VCL)\
    \ configuration\n                    groups\n                (5) ATM VP/VC cross-connect\
    \ groups\n                (6) AAL5 connection performance statistics group\n \
    \  Note that, managed objects for activation/deactivation of OAM cell\n   flows\
    \ and ATM traps notifying virtual connection or virtual link\n   failures are\
    \ outside the scope of this memo.\n"
- title: 5.3.  ATM Interface Configuration Group
  contents:
  - "5.3.  ATM Interface Configuration Group\n   This group contains information on\
    \ ATM cell layer configuration of\n   local ATM interfaces on an ATM device in\
    \ addition to the information\n   on such interfaces contained in the ifTable.\n"
- title: 5.4.  ATM Interface DS3 PLCP and TC Layer Groups
  contents:
  - "5.4.  ATM Interface DS3 PLCP and TC Layer Groups\n   These groups provide performance\
    \ statistics of the DS3 PLCP and TC\n   sublayer of local ATM interfaces on a\
    \ managed ATM device.  DS3 PLCP\n   and TC sublayer are currently used to carry\
    \ ATM cells respectively\n   over DS3 and SONET transmission paths.\n"
- title: 5.5.  ATM Virtual Link and Cross-Connect Groups
  contents:
  - "5.5.  ATM Virtual Link and Cross-Connect Groups\n   ATM virtual link and cross-connect\
    \ groups model bi-directional ATM\n   virtual links and ATM cross-connects.  The\
    \ ATM VP/VC link groups are\n   implemented in an ATM host, ATM switch and ATM\
    \ network.  The ATM\n   switch and ATM network also implement the ATM VP/VC cross-connect\n\
    \   groups.  Both link and cross-connect groups are implemented in a\n   carrier's\
    \ network for Customer Network Management (CNM) purposes.\n   The ATM virtual\
    \ link groups are used to create, delete or modify ATM\n   virtual links in an\
    \ ATM host, ATM switch and ATM network.  ATM\n   virtual link groups along with\
    \ the cross-connect groups are used to\n   create, delete or modify ATM cross-connects\
    \ in an ATM switch or ATM\n   network (e.g., for CNM purposes).\n"
- title: 6.  Application of MIB II to ATM
  contents:
  - '6.  Application of MIB II to ATM

    '
- title: 6.1.  The System Group
  contents:
  - "6.1.  The System Group\n   For the purposes of the sysServices object in the\
    \ System Group of MIB\n   II [2], ATM is a data link layer protocol.  Thus, for\
    \ ATM switches\n   and ATM networks, sysServices will have the value \"2\".\n"
- title: 6.2.  The Interface Group
  contents:
  - "6.2.  The Interface Group\n   The Interfaces Group of MIB II defines generic\
    \ managed objects for\n   managing interfaces.  This memo contains the media-specific\n\
    \   extensions to the Interfaces Group for managing ATM interfaces.\n   This memo\
    \ assumes the interpretation of the Interfaces Group to be in\n   accordance with\
    \ [5] which states that the interfaces table (ifTable)\n   contains information\
    \ on the managed resource's interfaces and that\n   each sub-layer below the internetwork\
    \ layer of a network interface is\n   considered an interface.  Thus, the ATM\
    \ cell layer interface is\n   represented as an entry in the ifTable.  This entry\
    \ is concerned with\n   the ATM cell layer as a whole, and not with individual\
    \ virtual\n   connections which are managed via the ATM-specific managed objects\n\
    \   specified in this memo.  The inter-relation of entries in the ifTable\n  \
    \ is defined by Interfaces Stack Group defined in [5].\n"
- title: 6.2.1.  Support of the ATM Cell Layer by ifTable
  contents:
  - "6.2.1.  Support of the ATM Cell Layer by ifTable\n   Some specific interpretations\
    \ of ifTable for the ATM cell layer\n   follow.\n          Object     Use for\
    \ the generic ATM layer\n          ======     =============================\n\
    \          ifIndex    Each ATM port is represented by an ifEntry.\n          ifDescr\
    \    Description of the ATM interface.\n          ifType     The value that is\
    \ allocated for ATM is 37.\n          ifSpeed    The total bandwidth in bits per\
    \ second\n                     for use by the ATM layer.\n          ifPhysAddress\
    \  The interface's address at the ATM protocol\n                     sublayer;\
    \ the ATM address which would be used\n                     as the value of the\
    \ Called Party Address\n                     Information Element (IE) of a signalling\n\
    \                     message for a connection which either:\n               \
    \      - would terminate at this interface, or\n                     - for which\
    \ the Called Party Address IE\n                       would need to be replaced\
    \ by the Called\n                       Party SubAddress IE before the message\n\
    \                       was forwarded to any other interface.\n              \
    \       For an interface on which signalling is\n                     not supported,\
    \ then the interface does not\n                     necessarily have an address,\
    \ but if it\n                     does, then ifPhysAddress is the address which\n\
    \                     would be used as above in the event that\n             \
    \        signalling were supported.  If the interface\n                     has\
    \ multiple such addresses, then ifPhysAddress\n                     is its primary\
    \ address. If the interface has\n                     no addresses, then ifPhysAddress\
    \ is an octet\n                     string of zero length.  Address encoding is\
    \ as\n                     per [9].  Note that addresses assigned for\n      \
    \               purposes other than those listed above (e.g.,\n              \
    \       an address associated with the service provider\n                    \
    \ side of a public network UNI) may be represented\n                     through\
    \ atmInterfaceAdminAddress.\n          ifAdminStatus  See [5].\n          ifOperStatus\
    \   Assumes the value down(2) if the ATM cell\n                     layer or any\
    \ layer below that layer is down.\n          ifLastChange   See [5].\n       \
    \   ifInOctets     The number of received octets over the\n                  \
    \   interface, i.e., the number of received,\n                     assigned cells\
    \ multiplied by 53.\n          ifOutOctets    The number of transmitted octets\
    \ over the\n                     interface, i.e., the number of transmitted,\n\
    \                     assigned cells multiplied by 53.\n          ifInErrors \
    \    The number of cells dropped due to\n                     uncorrectable HEC\
    \ errors.\n          ifInUnknownProtos The number of received cells discarded\n\
    \                     during cell header validation, including\n             \
    \        cells with unrecognized VPI/VCI values,\n                     and cells\
    \ with invalid cell header patterns.\n                     If cells with undefined\
    \ PTI values are discarded,\n                     they are also counted here.\n\
    \          ifOutErrors    See [5].\n          ifName     Textual name (unique\
    \ on this system) of the\n                     interface or an octet string of\
    \ zero length.\n          ifLinkUpDownTrapEnable  Default is disabled (2).\n \
    \         ifConnectorPresent      Set to false (2).\n          ifPromiscuousMode\
    \       Set to false(2).\n          ifHighSpeed    See [5].\n          ifHCInOctets\
    \   The 64-bit version of ifInOctets; supported\n                     if required\
    \ by the compliance statements in [5].\n          ifHCOutOctets  The 64-bit version\
    \ of ifOutOctets; supported\n                     if required by the compliance\
    \ statements in [5].\n"
- title: 7.  Support of the AAL3/4 Based Interfaces
  contents:
  - "7.  Support of the AAL3/4 Based Interfaces\n   For the management of AAL3/4 CPCS\
    \ layer, see [6].\n"
- title: 8.  Support of the AAL5 Managed Objects
  contents:
  - "8.  Support of the AAL5 Managed Objects\n   Support of AAL5 managed objects in\
    \ an ATM switch and ATM host are\n   described below.\n"
- title: 8.1.  Managing AAL5 in a Switch
  contents:
  - "8.1.  Managing AAL5 in a Switch\n   Managing AAL5 in a switch involves:\n   \
    \   (1) performance management of an AAL5 entity as\n          an internal resource\
    \ in a switch\n      (2) performance management of AAL5 per virtual connection\n\
    \   AAL5 in a switch is modeled as shown in Figures 4 and 5.  AAL5 will\n   be\
    \ managed in a switch for only those virtual connections that carry\n   AAL5 and\
    \ are terminated at the AAL5 entity in the switch.  Note that,\n   the virtual\
    \ channels within the ATM UNIs carrying AAL5 will be\n   switched by the ATM switching\
    \ fabric (termed as ATM Entity in the\n   figure) to the virtual channels on a\
    \ proprietary internal interface\n   associated with the AAL5 process (termed\
    \ as AAL5 Entity in the\n   figure). Therefore, performance management of the\
    \ AAL5 resource in\n   the switch will be modeled using the ifTable through an\
    \ internal\n   (pseudo-ATM) virtual interface and the AAL5 performance management\n\
    \   per virtual connection will be supported using an additional AAL5\n   connection\
    \ table in the ATM MIB.  The association between the AAL5\n   virtual link at\
    \ the proprietary virtual, internal interface and the\n   ATM virtual link at\
    \ the ATM interface will be derived from the\n   virtual channel cross-connect\
    \ table and the virtual channel link\n   table in the ATM MIB.\n             \
    \           ___________________________\n                        |           \
    \              |\n                        |     =============       |\n      \
    \                  |     |    AAL5   |       |\n                        |    \
    \ |   Entity  |       |\n                        |     =============       |\n\
    \                        |           |             |\n                       \
    \ |         -----Prop. Virtual Interface\n                        |          \
    \ |             |\n                        |     =============       |\n     \
    \                   |     |   ATM     |       |\n                        |   \
    \  |  Entity   |       |\n                        |     =============       |\n\
    \                        |_____|__|__|__|__|_______|\n                       \
    \       |  |  |  |  |\n                             ---------------- ATM UNIs\n\
    \                              |  |  |  |  |\n                              |\
    \  |  |  |  |\n                              v  v  v  v  v\n                Figure\
    \ 4 : Model of an AAL5 Entity in a Switch\n                            __________________\n\
    \                            |                |\n                            |\
    \   AAL5         |\n                            |________________|\n         \
    \                   |                |\n                            | Prop. Virtual\
    \  |\n                            |  Interface     |\n                       \
    \     |________________|\n               Figure 5 : AAL5 Entity's Interface Stack\
    \ in a Switch\n"
- title: 8.2.  Managing AAL5 in a Host
  contents:
  - "8.2.  Managing AAL5 in a Host\n   Managing AAL5 in a host involves managing the\
    \ AAL5 sublayer interface\n   as shown in Figures 6 and 7.  The AAL5 sublayer\
    \ is stacked directly\n   over the ATM sublayer.  The ifTable is applied to the\
    \ AAL5 sublayer\n   as defined in Section 8.3.\n                        ___________________________\n\
    \                        |                         |\n                       \
    \ |     =============       |\n                        |     |    AAL5   |   \
    \    |\n                        |     |   Entity  |       |\n                \
    \        |     =============       |\n                        |     |   ATM  \
    \   |       |\n                        |     |  Entity   |       |\n         \
    \               |     =============       |\n                        |___________|_____________|\n\
    \                                    |\n                                  __|__\
    \ ATM UNI\n                                    |\n                           \
    \         |\n                                    v\n                Figure 6 :\
    \ Model of an AAL5 Entity in a Host\n                            __________________\n\
    \                            |                |\n                            |\
    \   AAL5         |\n                            |________________|\n         \
    \                   |                |\n                            |   ATM Layer\
    \    |\n                            |________________|\n                     \
    \       |                |\n                            |  Physical Layer|\n \
    \                           |________________|\n                 Figure 7 : AAL5\
    \ Entity's Interface Stack in a Host\n"
- title: 8.3.  Support of AAL5 by ifTable
  contents:
  - "8.3.  Support of AAL5 by ifTable\n   The AAL5 entity in an ATM device (e.g.,\
    \ switch or host) is managed\n   using the ifTable.  There are additional counters\
    \ specified for AAL5\n   than those specified in the ATM B-ICI document [10].\
    \  Specific\n   interpretations of ifTable for the AAL5 CPCS layer are as follows.\n\
    \          Object   Use for AAL5 CPCS layer entity\n          ======   ==============================\n\
    \          ifIndex  Each AAL5 entity is represented by an ifEntry.\n         \
    \ ifDescr  Description of the AAL5 entity.\n          ifType   The value that\
    \ is allocated for AAL5 is 49.\n          ifMtu    Set to the largest PDU size\
    \ for the\n                   AAL5 CPCS layer that can be processed\n        \
    \           by the AAL5 entity.\n          ifSpeed  Set to 0.\n          ifPhysAddress\
    \   An octet string of zero length.\n          ifAdminStatus   See [5].\n    \
    \      ifOperStatus    Assumes the value down(2) if the AAL5 or\n            \
    \       any layer below that layer is down.\n          ifLastChange    See [5].\n\
    \          ifInOctets      The number of received AAL5 CPCS PDU octets.\n    \
    \      ifOutOctets     The number of AAL5 CPCS PDU octets\n                  \
    \ transmitted.\n          ifInUcastPkts   The number of received AAL5 CPCS PDUs\
    \ passed\n                   to a higher-layer.\n          ifOutUcastPkts  The\
    \ number of AAL5 CPCS PDUs received from a\n                   higher-layer for\
    \ transmission.\n                   [Note:  The number of AAL5 PDUs actually\n\
    \                   transmitted is the number received from a\n              \
    \     higher-layer for transmission minus any which\n                   are counted\
    \ by ifOutErrors and ifOutDiscards.]\n          ifInErrors      Number of errored\
    \ AAL5 CPCS PDUs received.\n                   The types of errors counted include\
    \  CRC-32 errors,\n                   SAR time-out errors, and oversized SDU errors.\n\
    \          ifInUnknownProtos Set to 0.\n          ifInDiscards    Number of received\
    \ AAL5 CPCS PDUs discarded.\n                   Possible reason may be input buffer\
    \ overflow.\n          ifOutErrors     Number of AAL5 CPCS PDUs that could not\n\
    \                   be transmitted due to errors.\n          ifOutDiscards   Number\
    \ of AAL5 CPCS PDUs received for\n                   transmission that are discarded.\n\
    \                   Possible reason may be output buffer\n                   overflow.\n\
    \          ifInMulticastPkts  Set to 0.\n          ifInBroadcastPkts  Set to 0.\n\
    \          ifOutMulticastPkts Set to 0.\n          ifOutBroadcastPkts Set to 0.\n\
    \          ifName   Textual name (unique on this system) of the\n            \
    \       AAL5 entity or an octet string of zero length.\n          ifHighSpeed\
    \       Set to 0.\n          ifConnectorPresent Set to false (2).\n          ifPromiscuousMode\
    \ Set to false(2).\n          ifLinkUpDownTrapEnable     Default is disabled (2).\n"
- title: 8.4.  Support of Proprietary Virtual Interface by ifTable
  contents:
  - "8.4.  Support of Proprietary Virtual Interface by ifTable\n   Specific interpretations\
    \ of ifTable for the proprietary virtual,\n   internal interface associated with\
    \ an AAL5 entity in an ATM switch\n   are as follows.\n          Object   Use\
    \ for proprietary virtual, internal interface\n                   associated with\
    \ AAL entities\n          ======   ===============================================\n\
    \          ifIndex  Each proprietary virtual, internal interface\n           \
    \        associated with AAL entities is represented by an\n                 \
    \  ifEntry.\n          ifDescr  Description of the proprietary virtual, internal\n\
    \                   interface associated with AAL entities.\n          ifType\
    \   The value that is allocated for proprietary\n                   virtual, internal\
    \ interface is 53.\n          ifSpeed  See [5].  Set to 0 if the speed is not\n\
    \                   known.\n          ifPhysAddress   See [5]. An octet string\
    \ of zero length\n                   if no address is used for this interface.\n\
    \          ifAdminStatus   See [5].\n          ifOperStatus    See [5].\n    \
    \      ifLastChange    See [5].\n          ifName   Textual name (unique on this\
    \ system) of the\n                   interface or an octet string of zero length.\n\
    \          ifHighSpeed     See [5]. Set to 0 if the speed is not known.\n    \
    \      ifConnectorPresent  Set to false (2).\n          ifLinkUpDownTrapEnable\
    \     Default is disabled (2).\n"
- title: 8.5.  AAL5 Connection Performance Statistics Group
  contents:
  - "8.5.  AAL5 Connection Performance Statistics Group\n   An AAL5 connection table\
    \ is used to provide AAL5 performance\n   information for each AAL5 virtual connection\
    \ that is terminated at\n   the AAL5 entity contained within an ATM switch or\
    \ host.\n"
- title: 9.  ILMI MIB and the ATM Managed Objects
  contents:
  - "9.  ILMI MIB and the ATM Managed Objects\n   The ILMI MIB is specified by the\
    \ ATM Forum in UNI specification [9],\n   to manage local ATM UNIs.  The support\
    \ of the ATM management\n   functions by the ILMI MIB and those contained in this\
    \ memo are\n   compared in Table 1.  In this table, \"yes\" in the \"ILMI MIB\"\
    \  column\n   indicates that the management functions are supported by the ILMI\n\
    \   MIB.  The MIB groups in the \"This memo\" column are the groups listed\n \
    \  in Section 5.2.\n   For that subset of management information which the ILMI\
    \ MIB and this\n   memo have in common, every effort has been made to retain identical\n\
    \   semantics and syntax, even though the MIB objects are identified\n   using\
    \ different OBJECT IDENTIFIERs.\n                       Table 1 - Structuring\
    \ of ATM Managed Objects\n          ______________________________________________________________\n\
    \                        |                                 |This   |ILMI|\n  \
    \        ATM Mgmt.Inf. |ATM Managed Objects              |memo   |MIB |\n    \
    \      ______________|_________________________________|_______|____|\n      \
    \    Local Interface Information:\n          _____________________________________________________________\n\
    \          ATM interface:| (1) port identifier             |ATM MIB|    |\n  \
    \        physical layer| (2) physical transmission types |  gr.1*|yes*|\n    \
    \      configuration | (3) operational status          |MIB II |    |\n      \
    \                  | (4) administrative status       |       |    |\n        \
    \                | (5) last change status          |       |    |\n          _____________________________________________________________\n\
    \          ATM interface:| (1) active VPI/VCI fields       |ATM MIB|    |\n  \
    \        cell layer    | (2) maximum number of VPCs/VCCs |  gr.1 |yes |\n    \
    \      configuration | (3) configured VPCs/VCCs        |       | ** |\n      \
    \                  | (4) ILMI VPI/VCI values         |       |    |\n        \
    \                | (5) ATM address type            |       |    |\n          \
    \              | (6) ATM administrative address  |       |    |\n          _____________________________________________________________\n\
    \          ATM interface:|(1) received/transmitted cells   |       |    |\n  \
    \        cell layer    |(2) cells with HEC error         |MIB II |yes |\n    \
    \      performance   |(3) cell header validation errors|       |    |\n      \
    \    _____________________________________________________________\n         \
    \ ATM interface:|(1)DS3 PLCP severely errored     |ATM MIB|    |\n          PLCP\
    \ & TC     |   framing seconds               | gr.2,3|    |\n          layer \
    \        |(2)DS3 PLCP unavailable seconds  |       |no  |\n          performance\
    \   |(3)DS3 PLCP alarm state          |       |    |\n                       \
    \ |(4)out of cell delineation events|       |    |\n                        |(5)TC\
    \ alarm state                |       |    |\n          _____________________________________________________________\n\
    \          VP/VC link:   |(1)VPI or VPI/VCI value          |ATM MIB|    |\n  \
    \        configuration |(2)VCL or VPL operational status |  gr. 4|yes |\n    \
    \                    |(3)VCL/VPL administrative status |       |*** |\n      \
    \                  |(4)VCL/VPL last change status    |       |    |\n        \
    \                |(5)transmit/receive traffic/QoS  |       |    |\n          \
    \              |   parameters                    |       |    |\n            \
    \            |(6)AAL type                      |       |    |\n              \
    \          |(7)transmit/receive AAL5 SDU size|       |    |\n                \
    \        |(8)AAL5 encapsulation type       |       |    |\n          _____________________________________________________________\n\
    \          _____________________________________________________________\n   \
    \       VP/VC         |(1)cross-connect identifier      |       |    |\n     \
    \     Cross-connect:|(2)port identifier of one        |       |    |\n       \
    \   configuration |   end                           |       |    |\n         \
    \               |(3)port identifier of the other  |ATM MIB|    |\n           \
    \             |   end                           |  gr. 5|no  |\n             \
    \           |(4)VPI or VPI/VCI value          |       |    |\n               \
    \         |   of one end                    |       |    |\n                 \
    \       |(5)VPI or VPI/VCI value of       |       |    |\n                   \
    \     |   the other end                 |       |    |\n                     \
    \   |(6)VC/VP cross-connect           |       |    |\n                       \
    \ |   operational status            |       |    |\n                        |(7)VC/VP\
    \ cross-connect           |       |    |\n                        |   administrative\
    \ status         |       |    |\n                        |(8)VC/VP last change\
    \ status      |       |    |\n          _____________________________________________________________\n\
    \          VCC AAL5 CPCS |(1)PDUs discarded for CRC errors |ATM MIB|    |\n  \
    \        layer:        |(2)PDUs discarded due to         |  gr.6 |    |\n    \
    \      performance   |   reassembly time out           |       |no  |\n      \
    \                  |(3)PDUs discarded due to large   |       |    |\n        \
    \                |   SDUs                          |       |    |\n          _____________________________________________________________\n\
    \          AAL5 entity:  |(1)received/transmitted PDUs     |       |    |\n  \
    \                      |(2)PDUs discarded due to         |       |    |\n    \
    \                    |   protocol errors               |MIB II |no  |\n      \
    \                  |(3)a set of configuration/state  |       |    |\n        \
    \                |   parameters                    |       |    |\n          _____________________________________________________________\n\
    \          *The operational, administrative, and last change status of\n     \
    \     the ATM interface and the physical transmission type shall be\n        \
    \  supported by the interface table in MIB II (RFC 1213, RFC\n          1573).\
    \  ILMI does not contain the administrative and last\n          change status\
    \ of the ATM interface.\n          ** The ILMI MIB does not contain information\
    \ on the ATM\n          address type and the ATM administrative address assigned\
    \ at\n          the ATM interface.\n          ***The ILMI MIB contains local and\
    \ end-to-end operational\n          status of the VPC/VCC segment.  However, it\
    \ does not contain\n          the VPC/VCC administrative and last change status\
    \ and the VCC\n          AAL information.\n"
- title: 10.  Definitions
  contents:
  - "10.  Definitions\n               ATM-MIB DEFINITIONS ::= BEGIN\n            \
    \   IMPORTS\n                  MODULE-IDENTITY, OBJECT-TYPE, OBJECT-IDENTITY,\n\
    \                  Counter32, Integer32, IpAddress\n                      FROM\
    \ SNMPv2-SMI\n                  TEXTUAL-CONVENTION, DisplayString,\n         \
    \         TimeStamp, RowStatus\n                      FROM SNMPv2-TC\n       \
    \           MODULE-COMPLIANCE, OBJECT-GROUP\n                      FROM SNMPv2-CONF\n\
    \                  ifIndex, mib-2\n                      FROM RFC1213-MIB;\n \
    \              atmMIB MODULE-IDENTITY\n                    LAST-UPDATED \"9406072245Z\"\
    \n                    ORGANIZATION \"IETF AToM MIB Working Group\"\n         \
    \           CONTACT-INFO\n                     \"          Masuma Ahmed\n    \
    \                    Postal:  Bellcore\n                                 331 Newman\
    \ Springs Road\n                                 Red Bank, NJ 07701\n        \
    \                         US\n                        Tel:     +1 908 758 2515\n\
    \                        Fax:     +1 908 758 4131\n                        E-mail:\
    \  mxa@mail.bellcore.com\n                                 Kaj Tesink\n      \
    \                  Postal:  Bellcore\n                                 331 Newman\
    \ Springs Road\n                                 Red Bank, NJ 07701\n        \
    \                         US\n                        Tel:     +1 908 758 5254\n\
    \                        Fax:     +1 908 758 4196\n                        E-mail:\
    \  kaj@cc.bellcore.com\"\n                    DESCRIPTION\n                  \
    \   \"This is the MIB Module for ATM and AAL5-related\n                      objects\
    \ for managing ATM interfaces, ATM virtual\n                      links, ATM cross-connects,\
    \ AAL5 entities, and\n                      and AAL5 connections.\"\n        \
    \            ::= { mib-2 37 }\n               atmMIBObjects  OBJECT IDENTIFIER\
    \ ::= {atmMIB 1}\n               -- This ATM MIB Module consists of the following\
    \ groups:\n               -- (1) ATM Interface configuration group\n         \
    \      -- (2) ATM Interface DS3 PLCP group\n               -- (3) ATM Interface\
    \ TC Sublayer group\n               -- (4) ATM Interface VPL configuration group\n\
    \               -- (5) ATM Interface VCL configuration group\n               --\
    \ (6) ATM VP Cross Connect group\n               -- (7) ATM VC Cross Connect group\n\
    \               -- (8) ATM Interface AAL5 VCC performance statistics\n       \
    \        --     group\n               IfIndex ::= TEXTUAL-CONVENTION\n       \
    \             STATUS     current\n                    DESCRIPTION\n          \
    \            \"The value of this object identifies the interface\n           \
    \            for which the entry contains management\n                       information.\
    \ The value of this object for a\n                       particular interface\
    \ has the same value as the\n                       ifIndex object, defined in\
    \ RFC 1213, for the same\n                       interface.\"\n              \
    \      SYNTAX     Integer32\n               AtmTrafficDescrParamIndex ::= TEXTUAL-CONVENTION\n\
    \                    STATUS     current\n                    DESCRIPTION\n   \
    \                   \"The value of this object identifies the row\n          \
    \             in the atmTrafficDescrParamTable.\"\n                    SYNTAX\
    \     Integer32\n               atmTrafficDescriptorTypes  OBJECT IDENTIFIER ::=\n\
    \                                                    {atmMIBObjects 1}\n     \
    \          -- The following values are defined for use as\n               -- possible\
    \ values of the ATM traffic descriptor type.\n               -- ATM Forum specified\
    \ seven types of ATM traffic\n               -- descriptors.\n               atmNoTrafficDescriptor\
    \  OBJECT-IDENTITY\n                    STATUS     current\n                 \
    \   DESCRIPTION\n                      \"This identifies the no ATM traffic descriptor\n\
    \                       type. Parameters 1, 2, 3, 4, and 5 are not used.\n   \
    \                    This traffic descriptor type can be used for\n          \
    \             best effort traffic.\"\n                    ::= { atmTrafficDescriptorTypes\
    \ 1}\n               atmNoClpNoScr  OBJECT-IDENTITY\n                    STATUS\
    \     current\n                    DESCRIPTION\n                     \"This traffic\
    \ descriptor is for no CLP and\n                      no Sustained Cell Rate.\
    \  The use of the\n                      parameter vector for this type:\n   \
    \                   Parameter 1: CLP=0+1 peak cell rate in\n                 \
    \                  cells per second\n                      Parameter 2: not used\n\
    \                      Parameter 3: not used\n                      Parameter\
    \ 4: not used\n                      Parameter 5: not used.\n                \
    \      This traffic descriptor type can be used\n                      for best\
    \ effort traffic.\"\n                  ::= { atmTrafficDescriptorTypes 2}\n  \
    \             atmClpNoTaggingNoScr OBJECT-IDENTITY\n                    STATUS\
    \     current\n                    DESCRIPTION\n                     \"This traffic\
    \ descriptor is for no CLP without\n                      tagging and no Sustained\
    \ Cell Rate.  The use\n                      of the parameter vector for this\
    \ type:\n                      Parameter 1: CLP=0+1 peak cell rate in\n      \
    \                             cells per second\n                      Parameter\
    \ 2: CLP=0 peak cell rate in\n                                   cells per second\n\
    \                      Parameter 3: not used\n                      Parameter\
    \ 4: not used\n                      Parameter 5: not used.\"\n              \
    \      ::= { atmTrafficDescriptorTypes 3}\n               atmClpTaggingNoScr OBJECT-IDENTITY\n\
    \                   STATUS     current\n                   DESCRIPTION\n     \
    \                \"This traffic descriptor is for CLP with\n                 \
    \     tagging and no Sustained Cell Rate.  The\n                      use of the\
    \ parameter vector for this type:\n                      Parameter 1: CLP=0+1\
    \ peak cell rate in\n                                   cells per second\n   \
    \                   Parameter 2: CLP=0 peak cell rate in\n                   \
    \                cells per second with excess\n                              \
    \     traffic tagged as CLP=1\n                      Parameter 3: not used\n \
    \                     Parameter 4: not used\n                      Parameter 5:\
    \ not used.\"\n                   ::= { atmTrafficDescriptorTypes 4}\n       \
    \        atmNoClpScr OBJECT-IDENTITY\n                    STATUS     current\n\
    \                    DESCRIPTION\n                     \"This traffic descriptor\
    \ is for no CLP\n                      with Sustained Cell Rate.  The\n      \
    \                use of the parameter vector for this type:\n                \
    \      Parameter 1: CLP=0+1 peak cell rate in\n                              \
    \     cells per second\n                      Parameter 2: CLP=0+1 sustained cell\
    \ rate in\n                                   cells per second\n             \
    \         Parameter 3: CLP=0+1 maximum burst size\n                          \
    \         in cells\n                      Parameter 4: not used\n            \
    \          Parameter 5: not used.\"\n                   ::= { atmTrafficDescriptorTypes\
    \ 5}\n               atmClpNoTaggingScr OBJECT-IDENTITY\n                    STATUS\
    \     current\n                    DESCRIPTION\n                     \"This traffic\
    \ descriptor is for CLP\n                      with Sustained Cell Rate and no\
    \ tagging.\n                      The use of the parameter vector for this type:\n\
    \                      Parameter 1: CLP=0+1 peak cell rate in\n              \
    \                     cells per second\n                      Parameter 2: CLP=0\
    \ sustained cell rate in\n                                   cells per second\n\
    \                      Parameter 3: CLP=0 maximum burst size in cells\n      \
    \                Parameter 4: not used\n                      Parameter 5: not\
    \ used.\"\n                   ::= { atmTrafficDescriptorTypes 6}\n           \
    \    atmClpTaggingScr OBJECT-IDENTITY\n                    STATUS     current\n\
    \                    DESCRIPTION\n                     \"This traffic descriptor\
    \ is for CLP\n                      with tagging and Sustained Cell Rate.\n  \
    \                    The use of the parameter vector for this type:\n        \
    \              Parameter 1: CLP=0+1 peak cell rate in\n                      \
    \             cells per second\n                      Parameter 2: CLP=0 sustained\
    \ cell rate in\n                                   cells per second with excess\n\
    \                                   traffic tagged as CLP=1\n                \
    \      Parameter 3: CLP=0 maximum burst size in cells\n                      Parameter\
    \ 4: not used\n                      Parameter 5: not used.\"\n              \
    \      ::= { atmTrafficDescriptorTypes 7}\n               --    ATM Interface\
    \ Configuration Parameters Group\n               -- This group contains ATM specific\n\
    \               -- configuration information associated with\n               --\
    \ an ATM interface beyond those\n               -- supported using the ifTable.\n\
    \               atmInterfaceConfTable    OBJECT-TYPE\n                    SYNTAX\
    \      SEQUENCE OF AtmInterfaceConfEntry\n                    MAX-ACCESS   not-accessible\n\
    \                    STATUS       current\n                    DESCRIPTION\n \
    \                    \"This table contains ATM local interface\n             \
    \         configuration parameters, one entry per ATM\n                      interface\
    \ port.\"\n                    ::= { atmMIBObjects 2 }\n               atmInterfaceConfEntry\
    \    OBJECT-TYPE\n                    SYNTAX         AtmInterfaceConfEntry\n \
    \                   MAX-ACCESS     not-accessible\n                    STATUS\
    \         current\n                    DESCRIPTION\n                     \"This\
    \ list contains ATM interface configuration\n                      parameters\
    \ and state variables.\"\n                    INDEX { ifIndex }\n            \
    \        ::= { atmInterfaceConfTable  1}\n               AtmInterfaceConfEntry\
    \    ::= SEQUENCE  {\n                    atmInterfaceMaxVpcs             INTEGER,\n\
    \                    atmInterfaceMaxVccs             INTEGER,\n              \
    \      atmInterfaceConfVpcs            INTEGER,\n                    atmInterfaceConfVccs\
    \            INTEGER,\n                    atmInterfaceMaxActiveVpiBits    INTEGER,\n\
    \                    atmInterfaceMaxActiveVciBits    INTEGER,\n              \
    \      atmInterfaceIlmiVpi             INTEGER,\n                    atmInterfaceIlmiVci\
    \             INTEGER,\n                    atmInterfaceAddressType         INTEGER,\n\
    \                    atmInterfaceAdminAddress        OCTET STRING,\n         \
    \           atmInterfaceMyNeighborIpAddress IpAddress,\n                    atmInterfaceMyNeighborIfName\
    \    DisplayString\n                         }\n               atmInterfaceMaxVpcs\
    \    OBJECT-TYPE\n                    SYNTAX       INTEGER  (0..4096)\n      \
    \              MAX-ACCESS    read-write\n                    STATUS         current\n\
    \                    DESCRIPTION\n                     \"The maximum number of\
    \ VPCs (PVCs and SVCs)\n                      supported at this ATM interface.\
    \  At the ATM UNI,\n                      the maximum number of VPCs (PVCs and\
    \ SVCs)\n                      ranges from 0 to 256 only.\"\n                \
    \    ::= { atmInterfaceConfEntry 1}\n               atmInterfaceMaxVccs    OBJECT-TYPE\n\
    \                    SYNTAX       INTEGER  (0..65536)\n                    MAX-ACCESS\
    \     read-write\n                    STATUS         current\n               \
    \     DESCRIPTION\n                     \"The maximum number of VCCs (PVCs and\
    \ SVCs)\n                      supported at this ATM interface.\"\n          \
    \          ::= { atmInterfaceConfEntry 2}\n               atmInterfaceConfVpcs\
    \    OBJECT-TYPE\n                    SYNTAX       INTEGER  (0..4096)\n      \
    \              MAX-ACCESS     read-only\n                    STATUS         current\n\
    \                    DESCRIPTION\n                     \"The number of VPCs (PVCs\
    \ and SVCs)\n                      configured for use at this ATM interface.\n\
    \                      At the ATM UNI, the configured number of\n            \
    \          VPCs (PVCs and SVCs) can range from\n                      0 to 256\
    \ only.\"\n                    ::= { atmInterfaceConfEntry 3}\n              \
    \ atmInterfaceConfVccs    OBJECT-TYPE\n                    SYNTAX       INTEGER\
    \  (0..65536)\n                    MAX-ACCESS    read-only\n                 \
    \   STATUS        current\n                    DESCRIPTION\n                 \
    \    \"The number of VCCs (PVCs and SVCs)\n                      configured for\
    \ use at the ATM interface.\"\n                    ::= { atmInterfaceConfEntry\
    \ 4}\n               atmInterfaceMaxActiveVpiBits    OBJECT-TYPE\n           \
    \         SYNTAX           INTEGER  (0..12)\n                    MAX-ACCESS  \
    \       read-write\n                    STATUS             current\n         \
    \           DESCRIPTION\n                     \"The  maximum number of active\
    \ VPI bits\n                      configured for use at the ATM interface.\n \
    \                     At the ATM UNI, the maximum number of active\n         \
    \             VPI bits configured for use ranges from\n                      0\
    \ to 8 only.\"\n                    ::= { atmInterfaceConfEntry 5}\n         \
    \      atmInterfaceMaxActiveVciBits    OBJECT-TYPE\n                    SYNTAX\
    \             INTEGER  (0..16)\n                    MAX-ACCESS         read-write\n\
    \                    STATUS             current\n                    DESCRIPTION\n\
    \                     \"The maximum number of active VCI bits\n              \
    \        configured for use at this ATM interface.\"\n                    ::=\
    \ { atmInterfaceConfEntry 6}\n               atmInterfaceIlmiVpi         OBJECT-TYPE\n\
    \                    SYNTAX          INTEGER (0..255)\n                    MAX-ACCESS\
    \       read-write\n                    STATUS           current\n           \
    \         DESCRIPTION\n                     \"The VPI value of the VCC supporting\n\
    \                      the ILMI at this ATM interface.  If the values of\n   \
    \                   atmInterfaceIlmiVpi and atmInterfaceIlmiVci are\n        \
    \              both equal to zero then the ILMI is not\n                     \
    \ supported at this ATM interface.\"\n                    DEFVAL { 0 }\n     \
    \               ::= { atmInterfaceConfEntry 7}\n               atmInterfaceIlmiVci\
    \         OBJECT-TYPE\n                    SYNTAX          INTEGER (0..65535)\n\
    \                    MAX-ACCESS       read-write\n                    STATUS \
    \          current\n                    DESCRIPTION\n                     \"The\
    \ VCI value of the VCC supporting\n                      the ILMI at this ATM\
    \ interface.  If the values of\n                      atmInterfaceIlmiVpi and\
    \ atmInterfaceIlmiVci are\n                      both equal to zero then the ILMI\
    \ is not\n                      supported at this ATM interface.\"\n         \
    \           DEFVAL { 16 }\n                    ::= { atmInterfaceConfEntry 8}\n\
    \               atmInterfaceAddressType    OBJECT-TYPE\n                    SYNTAX\
    \      INTEGER {\n                                         private(1),\n     \
    \                                    nsapE164(2),\n                          \
    \               nativeE164(3),\n                                         other(4)\n\
    \                                        }\n                    MAX-ACCESS   \
    \ read-only\n                    STATUS        current\n                    DESCRIPTION\n\
    \                     \"The type of primary ATM address configured\n         \
    \             for use at this ATM interface.\"\n                    ::= { atmInterfaceConfEntry\
    \ 9 }\n               atmInterfaceAdminAddress    OBJECT-TYPE\n              \
    \      SYNTAX      OCTET STRING (SIZE(0..255))\n                    MAX-ACCESS\
    \    read-only\n                    STATUS        current\n                  \
    \  DESCRIPTION\n                     \"An address assigned for administrative\
    \ purposes,\n                      for example, an address associated with the\n\
    \                      service provider side of a public network UNI.\n      \
    \                If this interface has no assigned administrative\n          \
    \            address, or when the address used for\n                      administrative\
    \  purposes is the same as that used\n                      for ifPhysAddress,\
    \ then this is an octet string of\n                      zero length.\"\n    \
    \                ::= { atmInterfaceConfEntry 10 }\n               atmInterfaceMyNeighborIpAddress\
    \ OBJECT-TYPE\n                    SYNTAX       IpAddress\n                  \
    \  MAX-ACCESS   read-write\n                    STATUS       current\n       \
    \             DESCRIPTION\n                     \"The IP address of the neighbor\
    \ system connected to\n                      the  far end of this interface, to\
    \ which a Network\n                      Management Station can send SNMP messages,\
    \ as IP\n                      datagrams sent to UDP port 161, in order to access\n\
    \                      network management information concerning the\n       \
    \               operation of that system.  Note that the value\n             \
    \         of this object may be obtained in different ways,\n                \
    \      e.g., by manual configuration, or through ILMI\n                      interaction\
    \ with the neighbor system.\"\n                    ::= { atmInterfaceConfEntry\
    \ 11 }\n               atmInterfaceMyNeighborIfName    OBJECT-TYPE\n         \
    \           SYNTAX       DisplayString\n                    MAX-ACCESS   read-write\n\
    \                    STATUS       current\n                    DESCRIPTION\n \
    \                    \"The textual name of the interface on the neighbor\n   \
    \                   system on the far end of this interface, and to\n        \
    \              which this interface connects.  If the neighbor\n             \
    \         system is manageable through SNMP and supports\n                   \
    \   the object ifName, the value of this object must\n                      be\
    \ identical with that of ifName for the ifEntry\n                      of the\
    \ lowest level physical interface\n                      for this port.  If this\
    \ interface does not have a\n                      textual name, the value of\
    \ this object is a zero\n                      length string.  Note that the value\
    \ of this object\n                      may be obtained in different ways, e.g.,\
    \ by manual\n                      configuration, or through ILMI interaction\
    \ with\n                      the neighbor system.\"\n                    ::=\
    \ { atmInterfaceConfEntry 12 }\n               -- The ATM Interface DS3 PLCP Group\n\
    \               -- This group contains the DS3 PLCP configuration and\n      \
    \         -- state parameters of those ATM interfaces\n               -- which\
    \ use DS3 PLCP for carrying ATM cells over DS3.\n               atmInterfaceDs3PlcpTable\
    \    OBJECT-TYPE\n                    SYNTAX      SEQUENCE OF AtmInterfaceDs3PlcpEntry\n\
    \                    MAX-ACCESS   not-accessible\n                    STATUS \
    \      current\n                    DESCRIPTION\n                     \"This table\
    \ contains ATM interface DS3 PLCP\n                      parameters and state\
    \ variables, one entry per\n                      ATM interface port.\"\n    \
    \                ::= { atmMIBObjects 3}\n               atmInterfaceDs3PlcpEntry\
    \    OBJECT-TYPE\n                    SYNTAX       AtmInterfaceDs3PlcpEntry\n\
    \                    MAX-ACCESS   not-accessible\n                    STATUS \
    \      current\n                    DESCRIPTION\n                     \"This list\
    \ contains DS3 PLCP parameters and\n                      state variables at the\
    \ ATM interface.\"\n                    INDEX    {ifIndex }\n                \
    \    ::= { atmInterfaceDs3PlcpTable 1}\n               AtmInterfaceDs3PlcpEntry\
    \    ::= SEQUENCE  {\n                    atmInterfaceDs3PlcpSEFSs         Counter32,\n\
    \                    atmInterfaceDs3PlcpAlarmState    INTEGER,\n             \
    \       atmInterfaceDs3PlcpUASs          Counter32\n                      }\n\
    \               atmInterfaceDs3PlcpSEFSs    OBJECT-TYPE\n                    SYNTAX\
    \       Counter32\n                    MAX-ACCESS   read-only\n              \
    \      STATUS       current\n                    DESCRIPTION\n               \
    \      \"The number of DS3 PLCP Severely Errored Framing\n                   \
    \   Second (SEFS).  Each SEFS represents a\n                      one-second interval\
    \ which contains\n                      one or more SEF event.\"\n           \
    \         ::= { atmInterfaceDs3PlcpEntry 1}\n               atmInterfaceDs3PlcpAlarmState\
    \    OBJECT-TYPE\n                    SYNTAX       INTEGER {\n               \
    \                           noAlarm(1),\n                                    \
    \      receivedFarEndAlarm(2),\n                                          incomingLOF(3)\n\
    \                                                }\n                    MAX-ACCESS\
    \     read-only\n                    STATUS         current\n                \
    \    DESCRIPTION\n                     \"This variable indicates if there is an\n\
    \                      alarm present for the DS3 PLCP.  The value\n          \
    \            receivedFarEndAlarm means that the DS3 PLCP\n                   \
    \   has received an incoming Yellow\n                      Signal, the value incomingLOF\
    \ means that\n                      the DS3 PLCP has declared a loss of frame\
    \ (LOF)\n                      failure condition, and the value noAlarm\n    \
    \                  means that there are no alarms present.\n                 \
    \     Transition from the failure to the no alarm state\n                    \
    \  occurs when no defects (e.g., LOF) are received\n                      for\
    \ more than 10 seconds.\"\n                    ::= { atmInterfaceDs3PlcpEntry\
    \ 2}\n               atmInterfaceDs3PlcpUASs    OBJECT-TYPE\n                \
    \    SYNTAX       Counter32\n                    MAX-ACCESS   read-only\n    \
    \                STATUS       current\n                    DESCRIPTION\n     \
    \                \"The counter associated with the number of\n               \
    \       Unavailable Seconds encountered by the PLCP.\"\n                    ::=\
    \ { atmInterfaceDs3PlcpEntry 3}\n               -- The ATM Interface TC Sublayer\
    \ Group\n               -- This group contains TC sublayer configuration and\n\
    \               -- state parameters of those ATM interfaces\n               --\
    \ which use TC sublayer for carrying ATM cells over\n               -- SONET or\
    \ DS3.\n               atmInterfaceTCTable    OBJECT-TYPE\n                  \
    \  SYNTAX      SEQUENCE OF AtmInterfaceTCEntry\n                    MAX-ACCESS\
    \   not-accessible\n                    STATUS       current\n               \
    \     DESCRIPTION\n                     \"This table contains ATM interface TC\n\
    \                      Sublayer parameters and state variables,\n            \
    \          one entry per ATM interface port.\"\n                    ::= { atmMIBObjects\
    \ 4}\n               atmInterfaceTCEntry    OBJECT-TYPE\n                    SYNTAX\
    \          AtmInterfaceTCEntry\n                    MAX-ACCESS      not-accessible\n\
    \                    STATUS          current\n                    DESCRIPTION\n\
    \                     \"This list contains TC Sublayer parameters\n          \
    \            and state variables at the ATM interface.\"\n                   \
    \ INDEX  {ifIndex }\n                    ::= { atmInterfaceTCTable 1}\n      \
    \         AtmInterfaceTCEntry    ::= SEQUENCE  {\n                    atmInterfaceOCDEvents\
    \      Counter32,\n                    atmInterfaceTCAlarmState   INTEGER\n  \
    \                    }\n               atmInterfaceOCDEvents    OBJECT-TYPE\n\
    \                    SYNTAX        Counter32\n                    MAX-ACCESS \
    \   read-only\n                    STATUS        current\n                   \
    \ DESCRIPTION\n                     \"The number of times the Out of Cell\n  \
    \                    Delineation (OCD) events occur.  If seven\n             \
    \         consecutive ATM cells have Header Error\n                      Control\
    \ (HEC) violations, an OCD event occurs.\n                      A high number\
    \ of OCD events may indicate a\n                      problem with the TC Sublayer.\"\
    \n                    ::= { atmInterfaceTCEntry 1}\n               atmInterfaceTCAlarmState\
    \    OBJECT-TYPE\n                    SYNTAX        INTEGER {\n              \
    \                             noAlarm(1),\n                                  \
    \         lcdFailure(2)\n                                            }\n     \
    \               MAX-ACCESS    read-only\n                    STATUS        current\n\
    \                    DESCRIPTION\n                     \"This variable indicates\
    \ if there is an\n                      alarm present for the TC Sublayer.  The\
    \ value\n                      lcdFailure indicates that a Loss of\n         \
    \             Cell Delineation (LCD) failure state has been\n                \
    \      declared for the TC Sublayer.  Transition from\n                      failure\
    \ to the no alarm state occurs\n                      when 6 consecutive ATM cells\n\
    \                      are received with valid HEC, followed by\n            \
    \          about 10 seconds of acceptable working signal.\"\n                \
    \     ::= { atmInterfaceTCEntry 2}\n               --  ATM Traffic Descriptor\
    \ Parameter Group\n               -- This group contains a set of self-consistent\n\
    \               -- ATM traffic parameters including the\n               -- ATM\
    \ traffic QoS Class.\n               -- The ATM virtual link tables (i.e., VPL\
    \ and VCL tables)\n               -- will use this ATM Traffic Descriptor table\n\
    \               -- to assign traffic parameters and QoS Class\n              \
    \ -- to the receive and transmit directions of\n               -- the ATM virtual\
    \ links (i.e., VPLs and VCLs).\n               -- The ATM VPL or VCL table will\
    \ indicate a row\n               -- in the atmTrafficDescrParamTable\n       \
    \        -- using its atmTrafficDescrParamIndex value.\n               -- The\
    \ management application can then compare a set of\n               -- ATM traffic\
    \ parameters with a single value.\n               -- If no suitable row(s) in\
    \ the atmTrafficDescrParamTable\n               -- exists, the manager must create\
    \ a new row(s) in this\n               -- table. If such a row is created, agent\
    \ checks the\n               -- sanity of that set of ATM traffic parameter values.\n\
    \               -- When creating a new row, the parameter values\n           \
    \    -- will be checked for self-consistency.\n               -- Predefined/template\
    \ rows may be supported.\n               -- A row in the atmTrafficDescrParamTable\
    \ is deleted\n               -- by setting the atmTrafficDescrRowStatus to destroy(6).\n\
    \               -- The agent will check whether this row is still in use\n   \
    \            -- by any entry of the atmVplTable or atmVclTable.\n            \
    \   -- The agent denies the request if the row is still in\n               --\
    \ use.\n               --  The ATM Traffic Descriptor Parameter Table\n      \
    \         atmTrafficDescrParamTable    OBJECT-TYPE\n                    SYNTAX\
    \      SEQUENCE OF AtmTrafficDescrParamEntry\n                    MAX-ACCESS \
    \  not-accessible\n                    STATUS       current\n                \
    \    DESCRIPTION\n                     \"This table contains information on ATM\
    \ traffic\n                      descriptor type and the associated parameters.\"\
    \n                    ::= { atmMIBObjects 5}\n               atmTrafficDescrParamEntry\
    \    OBJECT-TYPE\n                    SYNTAX           AtmTrafficDescrParamEntry\n\
    \                    MAX-ACCESS       not-accessible\n                    STATUS\
    \           current\n                    DESCRIPTION\n                     \"\
    This list contains ATM traffic descriptor\n                      type and the\
    \ associated parameters.\"\n                    INDEX  {atmTrafficDescrParamIndex}\n\
    \                    ::= { atmTrafficDescrParamTable  1}\n               AtmTrafficDescrParamEntry\
    \    ::= SEQUENCE  {\n                 atmTrafficDescrParamIndex   AtmTrafficDescrParamIndex,\n\
    \                 atmTrafficDescrType         OBJECT IDENTIFIER,\n           \
    \      atmTrafficDescrParam1       Integer32,\n                 atmTrafficDescrParam2\
    \       Integer32,\n                 atmTrafficDescrParam3       Integer32,\n\
    \                 atmTrafficDescrParam4       Integer32,\n                 atmTrafficDescrParam5\
    \       Integer32,\n                 atmTrafficQoSClass          INTEGER,\n  \
    \               atmTrafficDescrRowStatus    RowStatus\n                      \
    \        }\n               atmTrafficDescrParamIndex    OBJECT-TYPE\n        \
    \            SYNTAX           AtmTrafficDescrParamIndex\n                    MAX-ACCESS\
    \       not-accessible\n                    STATUS        current\n          \
    \          DESCRIPTION\n                     \"This object is used by the virtual\
    \ link\n                      table (i.e., VPL or VCL table)\n               \
    \       to identify the row of this table.\"\n                    ::= { atmTrafficDescrParamEntry\
    \  1}\n               atmTrafficDescrType    OBJECT-TYPE\n                   \
    \ SYNTAX             OBJECT IDENTIFIER\n                    MAX-ACCESS       \
    \  read-create\n                    STATUS             current\n             \
    \       DESCRIPTION\n                     \"The value of this object identifies\
    \ the type\n                      of ATM traffic descriptor.\n               \
    \       The type may indicate no traffic descriptor or\n                     \
    \ traffic descriptor with one or more parameters.\n                      These\
    \ parameters are specified as a parameter\n                      vector, in the\
    \ corresponding instances of the\n                      objects:\n           \
    \               atmTrafficDescrParam1\n                          atmTrafficDescrParam2\n\
    \                          atmTrafficDescrParam3\n                          atmTrafficDescrParam4\n\
    \                          atmTrafficDescrParam5.\"\n                     DEFVAL\
    \  { atmNoTrafficDescriptor }\n                     ::= { atmTrafficDescrParamEntry\
    \ 2}\n               atmTrafficDescrParam1    OBJECT-TYPE\n                  \
    \  SYNTAX             Integer32\n                    MAX-ACCESS          read-create\n\
    \                    STATUS              current\n                    DESCRIPTION\n\
    \                     \"The first parameter of the ATM traffic descriptor\n  \
    \                    used according to the value of\n                      atmTrafficDescrType.\"\
    \n                    DEFVAL  { 0 }\n                    ::= { atmTrafficDescrParamEntry\
    \ 3}\n               atmTrafficDescrParam2    OBJECT-TYPE\n                  \
    \  SYNTAX             Integer32\n                    MAX-ACCESS          read-create\n\
    \                    STATUS              current\n                    DESCRIPTION\n\
    \                     \"The second parameter of the ATM traffic descriptor\n \
    \                     used according to the value of\n                      atmTrafficDescrType.\"\
    \n                    DEFVAL  { 0 }\n                    ::= { atmTrafficDescrParamEntry\
    \ 4}\n               atmTrafficDescrParam3    OBJECT-TYPE\n                  \
    \  SYNTAX             Integer32\n                    MAX-ACCESS          read-create\n\
    \                    STATUS              current\n                    DESCRIPTION\n\
    \                     \"The third parameter of the ATM traffic descriptor\n  \
    \                    used according to the value of\n                      atmTrafficDescrType.\"\
    \n                    DEFVAL  { 0 }\n                    ::= { atmTrafficDescrParamEntry\
    \ 5}\n               atmTrafficDescrParam4    OBJECT-TYPE\n                  \
    \  SYNTAX             Integer32\n                    MAX-ACCESS          read-create\n\
    \                    STATUS              current\n                    DESCRIPTION\n\
    \                     \"The fourth parameter of the ATM traffic descriptor\n \
    \                     used according to the value of\n                      atmTrafficDescrType.\"\
    \n                    DEFVAL  { 0 }\n                    ::= { atmTrafficDescrParamEntry\
    \ 6}\n               atmTrafficDescrParam5    OBJECT-TYPE\n                  \
    \  SYNTAX             Integer32\n                    MAX-ACCESS          read-create\n\
    \                    STATUS              current\n                    DESCRIPTION\n\
    \                     \"The fifth parameter of the ATM traffic descriptor\n  \
    \                    used according to the value of\n                      atmTrafficDescrType.\"\
    \n                    DEFVAL  { 0 }\n                    ::= { atmTrafficDescrParamEntry\
    \ 7}\n               atmTrafficQoSClass   OBJECT-TYPE\n                    SYNTAX\
    \         INTEGER (0..255)\n                    MAX-ACCESS      read-create\n\
    \                    STATUS          current\n                    DESCRIPTION\n\
    \                     \"The value of this object identifies the QoS Class.\n \
    \                     Four Service classes have been\n                      specified\
    \ in the ATM Forum UNI Specification:\n                      Service Class A:\
    \ Constant bit rate video and\n                                       Circuit\
    \ emulation\n                      Service Class B: Variable bit rate video/audio\n\
    \                      Service Class C: Connection-oriented data\n           \
    \           Service Class D: Connectionless data\n                      Four QoS\
    \ classes numbered 1, 2, 3, and 4 have\n                      been specified with\
    \ the aim to support service\n                      classes A, B, C, and D respectively.\n\
    \                      An unspecified QoS Class numbered `0' is used\n       \
    \               for best effort traffic.\"\n                    DEFVAL  { 0 }\n\
    \                    ::= { atmTrafficDescrParamEntry 8}\n               atmTrafficDescrRowStatus\
    \       OBJECT-TYPE\n                    SYNTAX    RowStatus\n               \
    \     MAX-ACCESS   read-create\n                    STATUS          current\n\
    \                    DESCRIPTION\n                     \"This object is used to\
    \ create\n                      a new row or modify or delete an\n           \
    \           existing row in this table.\"\n                    DEFVAL  { active\
    \ }\n                    ::= {atmTrafficDescrParamEntry 9}\n               --\
    \  ATM Interface Virtual Path Link (VPL) Group\n               -- This group contains\
    \ configuration and state\n               -- information of a bi-directional Virtual\
    \ Path Link\n               -- (VPL)\n               -- This table can be used\
    \ to create, delete or modify\n               -- a VPL that is terminated in an\
    \ ATM host or switch.\n               -- This table can also be used to create,\
    \ delete or\n               -- modify a VPL which is cross-connected to another\n\
    \               -- VPL.\n               -- In the example below, the traffic flows\
    \ on the receive\n               -- and transmit directions of the VPLs are characterized\n\
    \               -- by atmVplReceiveTrafficDescrIndex and\n               -- atmVplTransmitTrafficDescrIndex\
    \ respectively.\n               -- The cross-connected VPLs are identified by\n\
    \               -- atmVplCrossConnectIdentifier.\n               --          \
    \ ________________________________\n               --           |            \
    \                  |\n               --  VPL      | ATM Host, Switch, or Network\
    \ |   VPL\n               -- receive   |                              |  receive\n\
    \               -- ========> X                              X <=======\n     \
    \          -- <======== X                              X ========>\n         \
    \      -- transmit  |                              |  transmit\n             \
    \  --           |______________________________|\n               --  The ATM Interface\
    \ VPL Table\n               atmVplTable    OBJECT-TYPE\n                    SYNTAX\
    \      SEQUENCE OF AtmVplEntry\n                    MAX-ACCESS   not-accessible\n\
    \                    STATUS       current\n                    DESCRIPTION\n \
    \                    \"The Virtual Path Link (VPL) table.  A\n               \
    \       bi-directional VPL is modeled as one entry\n                      in this\
    \ table.\"\n                    ::= { atmMIBObjects 6}\n               atmVplEntry\
    \    OBJECT-TYPE\n                    SYNTAX           AtmVplEntry\n         \
    \           MAX-ACCESS       not-accessible\n                    STATUS      \
    \     current\n                    DESCRIPTION\n                     \"An entry\
    \ in the VPL table.  This entry is\n                      used to model a bi-directional\
    \ VPL.\n                      To create a VPL at an ATM interface,\n         \
    \             either of the following procedures are used:\n                 \
    \     Negotiated VPL establishment\n                    (1) The management application\
    \ creates\n                        a VPL entry in the atmVplTable\n          \
    \              by setting atmVplRowStatus to createAndWait(5).\n             \
    \           This may fail for the following reasons:\n                       \
    \ - The selected VPI value is unavailable,\n                        - The selected\
    \ VPI value is in use.\n                        Otherwise, the agent creates a\
    \ row and\n                        reserves the VPI value on that port.\n    \
    \                (2) The manager selects an existing row(s) in the\n         \
    \               atmTrafficDescrParamTable,\n                        thereby, selecting\
    \ a set of self-consistent\n                        ATM traffic parameters and\
    \ the QoS Class\n                        for receive and transmit directions of\
    \ the VPL.\n                   (2a) If no suitable row(s) in the\n           \
    \             atmTrafficDescrParamTable exists,\n                        the manager\
    \ must create a new row(s)\n                        in that table.\n         \
    \          (2b) The manager characterizes the VPL's traffic\n                \
    \        parameters through setting the\n                        atmVplReceiveTrafficDescrIndex\
    \ and the\n                        atmVplTransmitTrafficDescrIndex values\n  \
    \                      in the VPL table, which point to the rows\n           \
    \             containing desired ATM traffic parameter values\n              \
    \          in the atmTrafficDescrParamTable.  The agent\n                    \
    \    will check the availability of resources and\n                        may\
    \ refuse the request.\n                    (3) The manager activates the VPL by\
    \ setting the\n                        the atmVplRowStatus to active(1).\n   \
    \                     If this set is successful, the agent has\n             \
    \           reserved the resources to satisfy the requested\n                \
    \        traffic parameter values and the QoS Class\n                        for\
    \ that VPL.\n                    (4) If the VPL terminates a VPC in the ATM host\n\
    \                        or switch, the manager turns on the\n               \
    \         atmVplAdminStatus to up(1) to turn the VPL\n                       \
    \ traffic flow on.  Otherwise, the\n                        atmVpCrossConnectTable\
    \  must be used\n                        to cross-connect the VPL to another VPL(s)\n\
    \                        in an ATM switch or network.\n                      One-Shot\
    \ VPL Establishment\n                      A VPL may also be established in one\
    \ step by a\n                      set-request with all necessary VPL parameter\n\
    \                      values and atmVplRowStatus set to createAndGo(4).\n   \
    \                   In contrast to the negotiated VPL establishment\n        \
    \              which allows for detailed error checking\n                    \
    \  (i.e., set errors are explicitly linked to\n                      particular\
    \ resource acquisition failures),\n                      the one-shot VPL establishment\n\
    \                      performs the setup on one operation but\n             \
    \         does not have the advantage of step-wise\n                      error\
    \ checking.\n                      VPL Retirement\n                      A VPL\
    \ is released by setting atmVplRowStatus to\n                      destroy(6),\
    \ and the agent may release all\n                      associated resources.\"\
    \n                    INDEX  {ifIndex, atmVplVpi }\n                    ::= {\
    \ atmVplTable  1}\n               AtmVplEntry    ::= SEQUENCE  {\n           \
    \         atmVplVpi                       INTEGER,\n                    atmVplAdminStatus\
    \               INTEGER,\n                    atmVplOperStatus               \
    \ INTEGER,\n                    atmVplLastChange                TimeStamp,\n \
    \                   atmVplReceiveTrafficDescrIndex\n                         \
    \           AtmTrafficDescrParamIndex,\n                    atmVplTransmitTrafficDescrIndex\n\
    \                                    AtmTrafficDescrParamIndex,\n            \
    \        atmVplCrossConnectIdentifier    INTEGER,\n                    atmVplRowStatus\
    \                 RowStatus\n                       }\n               atmVplVpi\
    \    OBJECT-TYPE\n                    SYNTAX    INTEGER  (1..4095)\n         \
    \           MAX-ACCESS     not-accessible\n                    STATUS        \
    \ current\n                    DESCRIPTION\n                     \"The VPI value\
    \ of the VPL.\n                      Note that the VPI=0 is not used\n       \
    \               for a VPL not associated with a VCL.\n                      The\
    \ maximum VPI value cannot\n                      exceed the value allowable by\
    \ the\n                      atmInterfaceMaxVpiBits.\"\n                    ::=\
    \ { atmVplEntry 1}\n               atmVplAdminStatus   OBJECT-TYPE\n         \
    \           SYNTAX   INTEGER  {\n                                       up(1),\n\
    \                                       down(2)\n                            \
    \               }\n                    MAX-ACCESS   read-create\n            \
    \        STATUS       current\n                    DESCRIPTION\n             \
    \        \"This object is implemented only for a VPL which\n                 \
    \     terminates a VPC (i.e.,\n                      one which is NOT cross-connected\
    \ to other VPLs).\n                      Its value specifies the desired administrative\n\
    \                      state of the VPL.  The up and down states indicate\n  \
    \                    that the traffic flow is enabled and disabled\n         \
    \             respectively for this VPL.\"\n                    DEFVAL { down\
    \ }\n                    ::= { atmVplEntry 2}\n               atmVplOperStatus\
    \   OBJECT-TYPE\n                    SYNTAX   INTEGER  {\n                   \
    \                    up(1),\n                                       down(2),\n\
    \                                       unknown(3)\n                         \
    \                  }\n                    MAX-ACCESS   read-only\n           \
    \         STATUS       current\n                    DESCRIPTION\n            \
    \         \"This object indicates the current operational\n                  \
    \    status of the VPL.  The up and down states\n                      indicate\
    \ that the VPL is currently\n                      operational, or not operational,\
    \ respectively.\n                      The unknown state indicates that the status\
    \ of\n                      this VPL cannot be determined.\"\n               \
    \     ::= { atmVplEntry 3}\n               atmVplLastChange     OBJECT-TYPE\n\
    \                    SYNTAX  TimeStamp\n                    MAX-ACCESS  read-only\n\
    \                    STATUS  current\n                    DESCRIPTION\n      \
    \               \"The value of MIB II's sysUpTime object\n                   \
    \   at the time this VPL entered its current\n                      operational\
    \ state.  If the current state was\n                      entered prior to the\
    \ last re-initialization of the\n                      agent, then this object\
    \ contains a zero value.\"\n                    ::= { atmVplEntry 4 }\n      \
    \         atmVplReceiveTrafficDescrIndex    OBJECT-TYPE\n                    SYNTAX\
    \             AtmTrafficDescrParamIndex\n                    MAX-ACCESS      \
    \   read-create\n                    STATUS             current\n            \
    \        DESCRIPTION\n                     \"The value of this object identifies\
    \ the row\n                      in the atmTrafficDescrParamTable which\n    \
    \                  applies to the receive direction of the VPL.\"\n          \
    \           ::= { atmVplEntry 5}\n               atmVplTransmitTrafficDescrIndex\
    \    OBJECT-TYPE\n                    SYNTAX             AtmTrafficDescrParamIndex\n\
    \                    MAX-ACCESS         read-create\n                    STATUS\
    \             current\n                    DESCRIPTION\n                     \"\
    The value of this object identifies the row\n                      in the atmTrafficDescrParamTable\
    \ which\n                      applies to the transmit direction of the VPL.\"\
    \n                     ::= { atmVplEntry 6}\n               atmVplCrossConnectIdentifier\
    \   OBJECT-TYPE\n                    SYNTAX         INTEGER (0..2147483647)\n\
    \                    MAX-ACCESS      read-only\n                    STATUS   \
    \       current\n                    DESCRIPTION\n                     \"This\
    \ object is implemented only for a VPL\n                      which is cross-connected\
    \ to other VPLs\n                      that belong to the same VPC.  All such\n\
    \                      associated VPLs have the same value of this\n         \
    \             object, and all their cross-connections are\n                  \
    \    identified by entries in the\n                      atmVpCrossConnectTable\
    \ for which\n                      atmVpCrossConnectIndex has the same value.\n\
    \                      The value of this object is initialized by the\n      \
    \                agent after the associated entries in the\n                 \
    \     atmVpCrossConnectTable have been created.\"\n                    ::= {atmVplEntry\
    \ 7}\n               atmVplRowStatus       OBJECT-TYPE\n                    SYNTAX\
    \    RowStatus\n                    MAX-ACCESS   read-create\n               \
    \     STATUS          current\n                    DESCRIPTION\n             \
    \        \"This object is used to create, delete\n                      or modify\
    \ a row in this table.\n                      To create a new VCL, this object\
    \ is\n                      initially set to 'createAndWait' or\n            \
    \          'createAndGo'.  This object must not be\n                      set\
    \ to 'active' unless the following columnar\n                      objects exist\
    \ in this row:\n                      atmVplReceiveTrafficDescrIndex and\n   \
    \                   atmVplTransmitTrafficDescrIndex.\"\n                    DEFVAL\
    \ { active }\n                    ::= {atmVplEntry 8}\n               --  ATM\
    \ Interface Virtual Channel Link (VCL) Group\n               -- This group contains\
    \ configuration and state\n               -- information of a bi-directional Virtual\
    \ Channel\n               -- Link (VCL) at an ATM interface.\n               --\
    \ This table can be used to create, delete or modify\n               -- a VCL\
    \ that is terminated in an ATM host or switch.\n               -- This table can\
    \ also be\n               -- used to create, delete or modify a VCL that is\n\
    \               -- cross-connected to another VCL.\n               --  The ATM\
    \ Interface VCL Table\n               atmVclTable    OBJECT-TYPE\n           \
    \         SYNTAX      SEQUENCE OF AtmVclEntry\n                    MAX-ACCESS\
    \   not-accessible\n                    STATUS       current\n               \
    \     DESCRIPTION\n                     \"The Virtual Channel Link (VCL) table.\
    \  A\n                      bi-directional VCL is modeled as one entry\n     \
    \                 in this table.\"\n                    ::= { atmMIBObjects 7}\n\
    \               atmVclEntry    OBJECT-TYPE\n                    SYNTAX       \
    \    AtmVclEntry\n                    MAX-ACCESS       not-accessible\n      \
    \              STATUS           current\n                    DESCRIPTION\n   \
    \                  \"An entry in the VCL table.  This entry is\n             \
    \         used to model a bi-directional VCL.\n                      To create\
    \ a VCL at an ATM interface,\n                      either of the following procedures\
    \ are used:\n                      Negotiated VCL establishment\n            \
    \        (1) The management application creates\n                        a VCL\
    \ entry in the atmVclTable\n                        by setting atmVclRowStatus\
    \ to createAndWait(5).\n                        This may fail for the following\
    \ reasons:\n                        - The selected VPI/VCI values are unavailable,\n\
    \                        - The selected VPI/VCI values are in use.\n         \
    \               Otherwise, the agent creates a row and\n                     \
    \   reserves the VPI/VCI values on that port.\n                    (2) The manager\
    \ selects an existing row(s) in the\n                        atmTrafficDescrParamTable,\n\
    \                        thereby, selecting a set of self-consistent\n       \
    \                 ATM traffic parameters and the QoS Class\n                 \
    \       for receive and transmit directions of the VCL.\n                   (2a)\
    \ If no suitable row(s) in the\n                        atmTrafficDescrParamTable\
    \ exists,\n                        the manager must create a new row(s)\n    \
    \                    in that table.\n                   (2b) The manager characterizes\
    \ the VCL's traffic\n                        parameters through setting the\n\
    \                        atmVclReceiveTrafficDescrIndex and the\n            \
    \            atmVclTransmitTrafficDescrIndex values\n                        in\
    \ the VCL table, which point to the rows\n                        containing desired\
    \ ATM traffic parameter values\n                        in the atmTrafficDescrParamTable.\
    \  The agent\n                        will check the availability of resources\
    \ and\n                        may refuse the request.\n                    (3)\
    \ The manager activates the VCL by setting the\n                        the atmVclRowStatus\
    \ to active(1).\n                        If this set is successful, the agent\
    \ has\n                        reserved the resources to satisfy the requested\n\
    \                        traffic parameter values and the QoS Class\n        \
    \                for that VCL.\n                    (4) If the VCL terminates\
    \ a VCC in the ATM host\n                        or switch, the manager turns\
    \ on the\n                        atmVclAdminStatus to up(1) to turn the VCL\n\
    \                        traffic flow on.  Otherwise, the\n                  \
    \      atmVcCrossConnectTable  must be used\n                        to cross-connect\
    \ the VCL to another VCL(s)\n                        in an ATM switch or network.\n\
    \                     One-Shot VCL Establishment\n                     A VCL may\
    \ also be established in one step by a\n                     set-request with\
    \ all necessary VCL parameter\n                     values and atmVclRowStatus\
    \ set to createAndGo(4).\n                     In contrast to the negotiated VCL\
    \ establishment\n                     which allows for detailed error checking\n\
    \                     (i.e., set errors are explicitly linked to\n           \
    \          particular resource acquisition failures),\n                     the\
    \ one-shot VCL establishment\n                     performs the setup on one operation\
    \ but\n                     does not have the advantage of step-wise\n       \
    \              error checking.\n                     VCL Retirement\n        \
    \             A VCL is released by setting atmVclRowStatus to\n              \
    \       destroy(6), and the agent may release all\n                     associated\
    \ resources.\"\n                    INDEX  {ifIndex, atmVclVpi, atmVclVci }\n\
    \                    ::= { atmVclTable  1}\n               AtmVclEntry    ::=\
    \ SEQUENCE  {\n                    atmVclVpi                       INTEGER,\n\
    \                    atmVclVci                       INTEGER,\n              \
    \      atmVclAdminStatus               INTEGER,\n                    atmVclOperStatus\
    \                INTEGER,\n                    atmVclLastChange              \
    \  TimeStamp,\n                    atmVclReceiveTrafficDescrIndex\n          \
    \                          AtmTrafficDescrParamIndex,\n                    atmVclTransmitTrafficDescrIndex\n\
    \                                    AtmTrafficDescrParamIndex,\n            \
    \        atmVccAalType                   INTEGER,\n                    atmVccAal5CpcsTransmitSduSize\
    \   INTEGER,\n                    atmVccAal5CpcsReceiveSduSize    INTEGER,\n \
    \                   atmVccAal5EncapsType            INTEGER,\n               \
    \     atmVclCrossConnectIdentifier    INTEGER,\n                    atmVclRowStatus\
    \                 RowStatus\n                           }\n               atmVclVpi\
    \    OBJECT-TYPE\n                    SYNTAX    INTEGER  (0..4095)\n         \
    \           MAX-ACCESS     not-accessible\n                    STATUS        \
    \ current\n                    DESCRIPTION\n                     \"The VPI value\
    \ of the VCL.\n                      The maximum VPI value cannot\n          \
    \            exceed the value allowable by the\n                      atmInterfaceMaxVpiBits.\"\
    \n                    ::= { atmVclEntry 1}\n               atmVclVci    OBJECT-TYPE\n\
    \                    SYNTAX    INTEGER  (0..65535)\n                    MAX-ACCESS\
    \     not-accessible\n                    STATUS         current\n           \
    \         DESCRIPTION\n                     \"The VCI value of the VCL.\n    \
    \                  The maximum VCI value cannot\n                      exceed\
    \ the value allowable by the\n                      atmInterfaceMaxVciBits.\"\n\
    \                    ::= { atmVclEntry 2}\n               atmVclAdminStatus  \
    \ OBJECT-TYPE\n                    SYNTAX   INTEGER  {\n                     \
    \                  up(1),\n                                       down(2)\n  \
    \                                         }\n                    MAX-ACCESS  \
    \ read-create\n                    STATUS       current\n                    DESCRIPTION\n\
    \                     \"This object is implemented only for a VCL which\n    \
    \                  terminates a VCC (i.e.,\n                      one which is\
    \ NOT cross-connected to other VCLs).\n                      Its value specifies\
    \ the desired administrative\n                      state of the VCL.  The up\
    \ and down states indicate\n                      that the traffic flow is enabled\
    \ and disabled\n                      respectively for this VCL.\"\n         \
    \           ::= { atmVclEntry 3}\n               atmVclOperStatus   OBJECT-TYPE\n\
    \                    SYNTAX   INTEGER  {\n                                   \
    \    up(1),\n                                       down(2),\n               \
    \                        unknown(3)\n                                        \
    \   }\n                    MAX-ACCESS   read-only\n                    STATUS\
    \       current\n                    DESCRIPTION\n                     \"This\
    \ object indicates the current operational\n                      status of the\
    \ VCL.  The up and down states\n                      indicate that the VCL is\
    \ currently\n                      operational, or not operational, respectively.\n\
    \                      The unknown state indicates that the status of\n      \
    \                this VCL cannot be determined.\"\n                    ::= { atmVclEntry\
    \ 4}\n               atmVclLastChange     OBJECT-TYPE\n                    SYNTAX\
    \  TimeStamp\n                    MAX-ACCESS  read-only\n                    STATUS\
    \  current\n                    DESCRIPTION\n                     \"The value\
    \ of MIB II's sysUpTime object\n                      at the time this VCL entered\
    \ its current\n                      operational state.  If the current state\
    \ was\n                      entered prior to the last re-initialization of the\n\
    \                      agent, then this object contains a zero value.\"\n    \
    \                ::= { atmVclEntry 5 }\n               atmVclReceiveTrafficDescrIndex\
    \    OBJECT-TYPE\n                    SYNTAX             AtmTrafficDescrParamIndex\n\
    \                    MAX-ACCESS         read-create\n                    STATUS\
    \             current\n                    DESCRIPTION\n                     \"\
    The value of this object identifies the row\n                      in the ATM\
    \ Traffic Descriptor Table which\n                      applies to the receive\
    \ direction of this VCL.\"\n                     ::= { atmVclEntry 6}\n      \
    \         atmVclTransmitTrafficDescrIndex    OBJECT-TYPE\n                   \
    \ SYNTAX             AtmTrafficDescrParamIndex\n                    MAX-ACCESS\
    \         read-create\n                    STATUS             current\n      \
    \              DESCRIPTION\n                     \"The value of this object identifies\
    \ the row\n                      of the ATM Traffic Descriptor Table which applies\n\
    \                      to the transmit direction of this VCL.\"\n            \
    \         ::= { atmVclEntry 7}\n               atmVccAalType    OBJECT-TYPE\n\
    \                    SYNTAX      INTEGER {\n                                 \
    \        aal1(1),\n                                         aal34(2),\n      \
    \                                   aal5(3),\n                               \
    \          other(4),\n                                         unknown(5)\n  \
    \                                      }\n                    MAX-ACCESS    read-create\n\
    \                    STATUS        current\n                    DESCRIPTION\n\
    \                     \"An instance of this object only exists when the\n    \
    \                  local VCL end-point is also the VCC end-point,\n          \
    \            and AAL is in use.\n                      The type of AAL used on\
    \ this VCC.\n                      The AAL type includes AAL1, AAL3/4,\n     \
    \                 and AAL5. The other(4) may be user-defined\n               \
    \       AAL type.  The unknown type indicates that\n                      the\
    \ AAL type cannot be determined.\"\n                    ::= { atmVclEntry 8 }\n\
    \               atmVccAal5CpcsTransmitSduSize OBJECT-TYPE\n                  \
    \  SYNTAX      INTEGER (1..65535)\n                    MAX-ACCESS   read-create\n\
    \                    STATUS       current\n                    DESCRIPTION\n \
    \                    \"An instance of this object only exists when the\n     \
    \                 local VCL end-point is also the VCC end-point,\n           \
    \           and AAL5 is in use.\n                      The maximum AAL5 CPCS SDU\
    \ size in octets that is\n                      supported on the transmit direction\
    \ of this VCC.\"\n                    DEFVAL { 9188 }\n                      \
    \    ::= { atmVclEntry 9 }\n               atmVccAal5CpcsReceiveSduSize OBJECT-TYPE\n\
    \                    SYNTAX      INTEGER (1..65535)\n                    MAX-ACCESS\
    \   read-create\n                    STATUS       current\n                  \
    \  DESCRIPTION\n                     \"An instance of this object only exists\
    \ when the\n                      local VCL end-point is also the VCC end-point,\n\
    \                      and AAL5 is in use.\n                      The maximum\
    \ AAL5 CPCS SDU size in octets that is\n                      supported on the\
    \ receive direction of this VCC.\"\n                    DEFVAL { 9188 }\n    \
    \                      ::= { atmVclEntry 10 }\n               atmVccAal5EncapsType\
    \  OBJECT-TYPE\n                    SYNTAX   INTEGER {\n                     \
    \              vcMultiplexRoutedProtocol(1),\n                               \
    \    vcMultiplexBridgedProtocol8023(2),\n                                   vcMultiplexBridgedProtocol8025(3),\n\
    \                                   vcMultiplexBridgedProtocol8026(4),\n     \
    \                              vcMultiplexLANemulation8023(5),\n             \
    \                      vcMultiplexLANemulation8025(6),\n                     \
    \              llcEncapsulation(7),\n                                   multiprotocolFrameRelaySscs(8),\n\
    \                                   other(9),\n                              \
    \     unknown(10)\n                                      }\n                 \
    \   MAX-ACCESS   read-create\n                    STATUS        current\n    \
    \                DESCRIPTION\n                     \"An instance of this object\
    \ only exists when the\n                      local VCL end-point is also the\
    \ VCC end-point,\n                      and AAL5 is in use.\n                \
    \      The type of data encapsulation used over\n                      the AAL5\
    \ SSCS layer. The definitions reference\n                      RFC 1483 Multiprotocol\
    \ Encapsulation\n                      over ATM AAL5 and to the ATM Forum\n  \
    \                    LAN Emulation specification.\"\n                    DEFVAL\
    \ { llcEncapsulation }\n                          ::= { atmVclEntry 11 }\n   \
    \            atmVclCrossConnectIdentifier   OBJECT-TYPE\n                    SYNTAX\
    \         INTEGER (0..2147483647)\n                    MAX-ACCESS      read-only\n\
    \                    STATUS          current\n                    DESCRIPTION\n\
    \                     \"This object is implemented only for a VCL\n          \
    \            which is cross-connected to other VCLs\n                      that\
    \ belong to the same VCC.  All such\n                      associated VCLs have\
    \ the same value of this\n                      object, and all their cross-connections\
    \ are\n                      identified by entries in the\n                  \
    \    atmVcCrossConnectTable for which\n                      atmVcCrossConnectIndex\
    \ has the same value.\n                      The value of this object is initialized\
    \ by the\n                      agent after the associated entries in the\n  \
    \                    atmVcCrossConnectTable have been created.\"\n           \
    \         ::= {atmVclEntry 12}\n               atmVclRowStatus          OBJECT-TYPE\n\
    \                    SYNTAX       RowStatus\n                    MAX-ACCESS  \
    \ read-create\n                    STATUS       current\n                    DESCRIPTION\n\
    \                     \"This object is used to create, delete or\n           \
    \           modify a row in this table.  To create\n                      a new\
    \ VCL, this object is initially set\n                      to 'createAndWait'\
    \ or 'createAndGo'.\n                      This object must not be set to 'active'\n\
    \                      unless the following columnar objects exist\n         \
    \             in this row:\n                      atmVclReceiveTrafficDescrIndex,\n\
    \                      atmVclTransmitTrafficDescrIndex.\n                    \
    \  In addition, if the local VCL end-point\n                      is also the\
    \ VCC end-point:\n                      atmVccAalType.\n                     \
    \ In addition, for AAL5 connections only:\n                      atmVccAal5CpcsTransmitSduSize,\n\
    \                      atmVccAal5CpcsReceiveSduSize, and\n                   \
    \   atmVccAal5EncapsType.\"\n                    DEFVAL { active }\n         \
    \                 ::= {atmVclEntry 13}\n               --     ATM Virtual Path\
    \ (VP) Cross Connect Group\n               -- This group contains configuration\
    \ and state\n               -- information of all point-to-point,\n          \
    \     -- point-to-multipoint, or multipoint-to-multipoint\n               -- VP\
    \ cross-connects.\n               -- This table has read-create access and can\
    \ be used\n               -- to cross-connect the VPLs together in an ATM switch\n\
    \               -- or network. The atmVpCrossConnectIndex\n               -- is\
    \ used to associate the related\n               -- VPLs that are cross-connected\
    \ together.\n               -- The ATM VP Cross Connect Group\n              \
    \ -- models each bi-directional VPC\n               -- cross-connect as a set\
    \ of entries in\n               -- the atmVpCrossConnectTable. A\n           \
    \    -- point-to-point VPC cross-connect is modeled\n               -- as one\
    \ entry; a point-to-multipoint (N leafs) VPC\n               -- cross-connect\
    \ as N entries in this table; and\n               -- a multipoint-to-multipoint\
    \ (N parties) VPC cross-\n               -- connect as N(N-1)/2 entries in this\
    \ table.\n               -- In the latter cases, all the N (or N(N-1)/2) entries\n\
    \               -- are associated with a single VPC cross-connect by\n       \
    \        -- having the same value of atmVpCrossConnectIndex.\n               --\
    \      _________________________________________\n               --      |   \
    \                                    |\n               --  Low |         ATM Switch\
    \ or Network         | High\n               --  port|                        \
    \               | port\n               -- _____|>> from low to high VPC traffic\
    \ flow >>|______\n               --      |<< from high to low VPC traffic flow\
    \ <<|\n               --      |                                       |\n    \
    \           --      |_______________________________________|\n              \
    \ --\n               -- The terms low and high are chosen to represent\n     \
    \          -- numerical ordering of the two interfaces associated\n          \
    \     -- with a VPC cross-connect. That is, the ATM interface\n              \
    \ -- with the lower value of ifIndex is termed 'low',\n               -- while\
    \ the other ATM interface associated with the\n               -- VPC cross-connect\
    \ is termed 'high'. This terminology\n               -- is used to provide directional\
    \ information; for\n               -- example, the atmVpCrossConnectL2HOperStatus\
    \ applies\n               -- to the low->high direction, and\n               --\
    \ atmVpCrossConnectH2LOperStatus applies to the\n               -- high->low \
    \ direction, as illustrated above.\n               atmVpCrossConnectIndexNext\
    \    OBJECT-TYPE\n                    SYNTAX  INTEGER (0..2147483647)\n      \
    \              MAX-ACCESS  read-only\n                    STATUS  current\n  \
    \                  DESCRIPTION\n                     \"This object contains an\
    \ appropriate value to\n                      be used for atmVpCrossConnectIndex\
    \ when creating\n                      entries in the atmVpCrossConnectTable.\
    \  The value\n                      0 indicates that no unassigned entries are\n\
    \                      available. To obtain the atmVpCrossConnectIndex\n     \
    \                 value for a new entry, the manager issues a\n              \
    \        management protocol retrieval operation to obtain\n                 \
    \     the current value of this object.  After each\n                      retrieval,\
    \ the agent should modify the value to\n                      the next unassigned\
    \ index.\"\n                    ::= { atmMIBObjects 8 }\n               --  The\
    \ ATM VP Cross Connect Table\n               atmVpCrossConnectTable OBJECT-TYPE\n\
    \                    SYNTAX  SEQUENCE OF AtmVpCrossConnectEntry\n            \
    \        MAX-ACCESS  not-accessible\n                    STATUS  current\n   \
    \                 DESCRIPTION\n                     \"The ATM VP Cross Connect\
    \ table.  A bi-\n                      directional VP cross-connect which\n  \
    \                    cross-connects two VPLs is modeled\n                    \
    \  as one entry in this table.\"\n                    ::= { atmMIBObjects 9 }\n\
    \               atmVpCrossConnectEntry OBJECT-TYPE\n                    SYNTAX\
    \  AtmVpCrossConnectEntry\n                    MAX-ACCESS  not-accessible\n  \
    \                  STATUS  current\n                    DESCRIPTION\n        \
    \             \"An entry in the ATM VP Cross Connect table.\n                \
    \      This entry is used to model a bi-directional\n                      ATM\
    \ VP cross-connect which cross-connects\n                      two VPLs.\n   \
    \                   Step-wise Procedures to set up a VP Cross-connect\n      \
    \                Once the entries in the atmVplTable are created,\n          \
    \            the following procedures are used\n                      to cross-connect\
    \ the VPLs together.\n                     (1) The manager obtains a unique\n\
    \                         atmVpCrossConnectIndex by reading the\n            \
    \             atmVpCrossConnectIndexNext object.\n                     (2) Next,\
    \ the manager creates a set of one\n                         or more rows in the\
    \ ATM VP Cross Connect\n                         Table, one for each cross-connection\
    \ between\n                         two VPLs.  Each row is indexed by the ATM\n\
    \                         interface port numbers and VPI values of the\n     \
    \                    two ends of that cross-connection.\n                    \
    \     This set of rows specifies the topology of the\n                       \
    \  VPC cross-connect and is identified by a single\n                         value\
    \ of atmVpCrossConnectIndex.\n                      Negotiated VP Cross-Connect\
    \ Establishment\n                    (2a) The manager creates a row in this table\
    \ by\n                         setting atmVpCrossConnectRowStatus to\n       \
    \                  createAndWait(5).  The agent checks the\n                 \
    \        requested topology and the mutual sanity of\n                       \
    \  the ATM traffic parameters and\n                         QoS Classes, i.e.,\
    \ the row creation fails if:\n                         - the requested topology\
    \ is not supported\n                           by the agent,\n               \
    \          - the traffic/QoS parameter values\n                           associated\
    \ with the requested row are\n                           incompatible with those\
    \ of already existing\n                           rows for this VP cross-connect.\n\
    \                         [For example, for setting up\n                     \
    \    a point-to-point VP cross-connect, the\n                         ATM traffic\
    \ parameters in the receive direction\n                         of a VPL at the\
    \ low end of the cross-connect\n                         must equal to the traffic\
    \ parameters in the\n                         transmit direction of the other\
    \ VPL at the\n                         high end of the cross-connect,\n      \
    \                   otherwise, the row creation fails.]\n                    \
    \     The agent also checks for internal errors\n                         in building\
    \ the cross-connect.\n                         The atmVpCrossConnectIndex values\
    \ in the\n                         corresponding atmVplTable rows are filled\n\
    \                         in by the agent at this point.\n                   \
    \ (2b) The manager promotes the row in the\n                         atmVpCrossConnectTable\
    \ by setting\n                         atmVpCrossConnectRowStatus to active(1).\
    \  If\n                         this set is successful, the agent has reserved\n\
    \                         the resources specified by the ATM traffic\n       \
    \                  parameter and QoS Class values\n                         for\
    \ each direction of the VP cross-connect\n                         in an ATM switch\
    \ or network.\n                     (3) The manager sets the\n               \
    \          atmVpCrossConnectAdminStatus to up(1) in all\n                    \
    \     rows of this VP cross-connect to turn the\n                         traffic\
    \ flow on.\n                      One-Shot VP Cross-Connect Establishment\n  \
    \                    A VP cross-connect may also be established in\n         \
    \             one step by a set-request with all necessary\n                 \
    \     parameter values and atmVpCrossConnectRowStatus\n                      set\
    \ to createAndGo(4).\n                      In contrast to the negotiated VP cross-connect\n\
    \                      establishment which allows for detailed error\n       \
    \               checking (i.e., set errors are explicitly linked\n           \
    \           to particular resource acquisition failures),\n                  \
    \    the one-shot VP cross-connect establishment\n                      performs\
    \ the setup on one operation but does not\n                      have the advantage\
    \ of step-wise error checking.\n                      VP Cross-Connect Retirement\n\
    \                      A VP cross-connect identified by a particular\n       \
    \               value of atmVpCrossConnectIndex is released by:\n            \
    \         (1) Setting atmVpCrossConnectRowStatus of all\n                    \
    \     rows identified by this value of\n                         atmVpCrossConnectIndex\
    \ to destroy(6).\n                         The agent may release all\n       \
    \                  associated resources, and the\n                         atmVpCrossConnectIndex\
    \ values in the\n                         corresponding atmVplTable row are removed.\n\
    \                         Note that a situation when only a subset of\n      \
    \                   the associated rows are deleted corresponds\n            \
    \             to a VP topology change.\n                     (2) After deletion\
    \ of the appropriate\n                         atmVpCrossConnectEntries, the manager\
    \ may\n                         set atmVplRowStatus to destroy(6) the\n      \
    \                   associated VPLs.  The agent releases\n                   \
    \      the resources and removes the associated\n                         rows\
    \ in the atmVplTable.\n                      VP Cross-connect Reconfiguration\n\
    \                      At the discretion of the agent, a VP\n                \
    \      cross-connect may be reconfigured by\n                      adding and/or\
    \ deleting leafs to/from\n                      the VP topology as per the VP\
    \ cross-connect\n                      establishment/retirement procedures.\n\
    \                      Reconfiguration of traffic/QoS parameter\n            \
    \          values requires release of the VP cross-connect\n                 \
    \     before those parameter values may by changed\n                      for\
    \ individual VPLs.\"\n                    INDEX { atmVpCrossConnectIndex,\n  \
    \                        atmVpCrossConnectLowIfIndex,\n                      \
    \    atmVpCrossConnectLowVpi,\n                          atmVpCrossConnectHighIfIndex,\n\
    \                          atmVpCrossConnectHighVpi }\n                    ::=\
    \ { atmVpCrossConnectTable 1 }\n               AtmVpCrossConnectEntry ::= SEQUENCE\
    \ {\n                    atmVpCrossConnectIndex          INTEGER,\n          \
    \          atmVpCrossConnectLowIfIndex     IfIndex,\n                    atmVpCrossConnectLowVpi\
    \         INTEGER,\n                    atmVpCrossConnectHighIfIndex    IfIndex,\n\
    \                    atmVpCrossConnectHighVpi        INTEGER,\n              \
    \      atmVpCrossConnectAdminStatus    INTEGER,\n                    atmVpCrossConnectL2HOperStatus\
    \  INTEGER,\n                    atmVpCrossConnectH2LOperStatus  INTEGER,\n  \
    \                  atmVpCrossConnectL2HLastChange  TimeStamp,\n              \
    \      atmVpCrossConnectH2LLastChange  TimeStamp,\n                    atmVpCrossConnectRowStatus\
    \      RowStatus\n                            }\n               atmVpCrossConnectIndex\
    \ OBJECT-TYPE\n                    SYNTAX  INTEGER (1..2147483647)\n         \
    \           MAX-ACCESS  not-accessible\n                    STATUS  current\n\
    \                    DESCRIPTION\n                     \"A unique value to identify\
    \ this VP cross-connect.\"\n                    ::= { atmVpCrossConnectEntry 1\
    \ }\n               atmVpCrossConnectLowIfIndex OBJECT-TYPE\n                \
    \    SYNTAX  IfIndex\n                    MAX-ACCESS  not-accessible\n       \
    \             STATUS  current\n                    DESCRIPTION\n             \
    \        \"The value of this object is equal to MIB II's\n                   \
    \   ifIndex value of the ATM interface port for this\n                      VP\
    \ cross-connect.  The term low implies\n                      that this ATM interface\
    \ has the numerically lower\n                      ifIndex value than the other\
    \ ATM interface\n                      identified in the same atmVpCrossConnectEntry.\"\
    \n                    ::= { atmVpCrossConnectEntry 2 }\n               atmVpCrossConnectLowVpi\
    \ OBJECT-TYPE\n                    SYNTAX  INTEGER  (1..4095)\n              \
    \      MAX-ACCESS  not-accessible\n                    STATUS  current\n     \
    \               DESCRIPTION\n                     \"The value of this object is\
    \ equal to the VPI\n                      value at the ATM interface\n       \
    \               associated with the VP cross-connect that is\n               \
    \       identified by atmVpCrossConnectLowIfIndex.\n                      The\
    \ VPI value cannot exceed the number\n                      supported by the atmInterfaceMaxVpiBits\n\
    \                      at the low ATM interface port.\"\n                    ::=\
    \ { atmVpCrossConnectEntry 3 }\n               atmVpCrossConnectHighIfIndex OBJECT-TYPE\n\
    \                    SYNTAX  IfIndex\n                    MAX-ACCESS  not-accessible\n\
    \                    STATUS  current\n                    DESCRIPTION\n      \
    \               \"The value of this object is equal to MIB II's\n            \
    \          ifIndex value of the ATM interface port for\n                     \
    \ this VP cross-connect.  The term high\n                      implies that this\
    \ ATM interface has the\n                      numerically higher ifIndex value\
    \ than the\n                      other ATM interface identified in the same\n\
    \                      atmVpCrossConnectEntry.\"\n                    ::= { atmVpCrossConnectEntry\
    \ 4 }\n               atmVpCrossConnectHighVpi OBJECT-TYPE\n                 \
    \   SYNTAX  INTEGER   (1..4095)\n                    MAX-ACCESS  not-accessible\n\
    \                    STATUS  current\n                    DESCRIPTION\n      \
    \               \"The value of this object is equal to the VPI\n             \
    \         value at the ATM interface associated with\n                      the\
    \ VP cross-connect that is identified\n                      by atmVpCrossConnectHighIfIndex.\n\
    \                      The VPI value cannot exceed the number\n              \
    \        supported by the atmInterfaceMaxVpiBits\n                      at the\
    \ high ATM interface port.\"\n                    ::= { atmVpCrossConnectEntry\
    \ 5 }\n               atmVpCrossConnectAdminStatus OBJECT-TYPE\n             \
    \       SYNTAX  INTEGER {\n                                    up(1),\n      \
    \                              down(2)\n                            }\n      \
    \              MAX-ACCESS  read-create\n                    STATUS  current\n\
    \                    DESCRIPTION\n                     \"The value of this object\
    \ identifies the desired\n                      administrative status of this\
    \ bi-directional\n                      VP cross-connect.  The up and down states\n\
    \                      indicate that the traffic flow is enabled\n           \
    \           and disabled respectively on this VP\n                      cross-connect.\"\
    \n                    DEFVAL { down }\n                    ::= { atmVpCrossConnectEntry\
    \ 6 }\n               atmVpCrossConnectL2HOperStatus OBJECT-TYPE\n           \
    \         SYNTAX  INTEGER {\n                              up(1),\n          \
    \                    down(2),\n                              unknown(3)\n    \
    \                            }\n                    MAX-ACCESS  read-only\n  \
    \                  STATUS  current\n                    DESCRIPTION\n        \
    \             \"The value of this object identifies the current\n            \
    \          operational status of the VP cross-connect\n                      in\
    \ one direction; (i.e., from the low to\n                      high direction).\
    \  The up and down states indicate\n                      that this ATM VP cross-connect\
    \ from low\n                      to high direction is operational or not\n  \
    \                    operational respectively.\n                      The unknown\
    \ state indicates that\n                      the state of it cannot be determined.\"\
    \n                    ::= { atmVpCrossConnectEntry 7 }\n               atmVpCrossConnectH2LOperStatus\
    \ OBJECT-TYPE\n                    SYNTAX  INTEGER {\n                       \
    \       up(1),\n                              down(2),\n                     \
    \         unknown(3)\n                                 }\n                   \
    \ MAX-ACCESS  read-only\n                    STATUS  current\n               \
    \     DESCRIPTION\n                     \"The value of this object identifies\
    \ the current\n                      operational status of the VP cross-connect\n\
    \                      in one direction; (i.e., from the high to\n           \
    \           low direction).  The up and down states indicate\n               \
    \       that this ATM VP cross-connect from high\n                      to low\
    \ direction is operational or not\n                      operational respectively.\
    \  The\n                      unknown state indicates that the state\n       \
    \               of it cannot be determined.\"\n                    ::= { atmVpCrossConnectEntry\
    \ 8 }\n               atmVpCrossConnectL2HLastChange OBJECT-TYPE\n           \
    \         SYNTAX  TimeStamp\n                    MAX-ACCESS  read-only\n     \
    \               STATUS  current\n                    DESCRIPTION\n           \
    \          \"The value of MIB II's sysUpTime object\n                      at\
    \ the time this VP cross-connect entered\n                      its current operational\
    \ state in the low to\n                      high direction.  If the current state\
    \ was\n                      entered prior to the last re-initialization of the\n\
    \                      agent, then this object contains a zero value.\"\n    \
    \                ::= { atmVpCrossConnectEntry 9 }\n               atmVpCrossConnectH2LLastChange\
    \ OBJECT-TYPE\n                    SYNTAX  TimeStamp\n                    MAX-ACCESS\
    \  read-only\n                    STATUS  current\n                    DESCRIPTION\n\
    \                     \"The value of MIB II's sysUpTime object at the\n      \
    \                time this VP cross-connect entered its current\n            \
    \          operational state in the high to low direction.\n                 \
    \     If the current state was entered prior to the\n                      last\
    \ re-initialization of the agent,\n                      then this object contains\
    \ a zero value.\"\n                    ::= { atmVpCrossConnectEntry 10 }\n   \
    \            atmVpCrossConnectRowStatus OBJECT-TYPE\n                    SYNTAX\
    \  RowStatus\n                    MAX-ACCESS  read-create\n                  \
    \  STATUS  current\n                    DESCRIPTION\n                     \"The\
    \ status of this entry in the\n                      atmVpCrossConnectTable. \
    \ This object is used to\n                      create a cross-connect for cross-connecting\n\
    \                      VPLs which are created using the atmVplTable\n        \
    \              or to change or delete an existing cross-connect.\n           \
    \           This object must be initially set\n                      to `createAndWait'\
    \ or 'createAndGo'.\n                      This object cannot be set to `active'\n\
    \                      unless the following columnar object exists\n         \
    \             in this row: atmVpCrossConnectAdminStatus.\n                   \
    \   To turn on a VP cross-connect,\n                      the atmVpCrossConnectAdminStatus\n\
    \                      is set to `up'.\"\n                    DEFVAL { active\
    \ }\n                    ::= { atmVpCrossConnectEntry 11 }\n               --\
    \     ATM Virtual Channel (VC) Cross Connect Group\n               -- This group\
    \ contains configuration and state\n               -- information of a bi-directional\
    \ VC cross-connect.\n               -- This group is used to model a bi-directional\n\
    \               -- point-to-point, point-to-multipoint or\n               -- multipoint-to-multipoint\
    \ VC cross-connects.\n               -- This table has read-create access and\
    \ is used\n               -- to cross-connect the VCLs together in an ATM switch\n\
    \               -- or network that belong to a VC connection.\n              \
    \ -- The atmVcCrossConnectIndex is used to associate\n               -- the related\
    \ VCLs that are cross-connected together.\n               -- The step-wise procedures\
    \ described for setting\n               -- up a VP cross-connect are also used\
    \ for setting up\n               -- a VC cross-connect.\n               atmVcCrossConnectIndexNext\
    \    OBJECT-TYPE\n                    SYNTAX  INTEGER (0..2147483647)\n      \
    \              MAX-ACCESS  read-only\n                    STATUS  current\n  \
    \                  DESCRIPTION\n                     \"This object contains an\
    \ appropriate value to\n                      be used for atmVcCrossConnectIndex\
    \ when creating\n                      entries in the atmVcCrossConnectTable.\
    \  The value\n                      0 indicates that no unassigned entries are\n\
    \                      available. To obtain the atmVpCrossConnectIndex\n     \
    \                 value for a new entry, the manager issues a\n              \
    \        management protocol retrieval operation to obtain\n                 \
    \     the current value of this object.  After each\n                      retrieval,\
    \ the agent should modify the value to\n                      the next unassigned\
    \ index.\"\n                    ::= { atmMIBObjects 10 }\n               --  The\
    \ ATM VC Cross Connect Table\n               atmVcCrossConnectTable OBJECT-TYPE\n\
    \                    SYNTAX  SEQUENCE OF AtmVcCrossConnectEntry\n            \
    \        MAX-ACCESS  not-accessible\n                    STATUS  current\n   \
    \                 DESCRIPTION\n                     \"The ATM VC Cross Connect\
    \ table.  A bi-\n                      directional VC cross-connect which\n  \
    \                    cross-connects two end points (i.e., VCLs)\n            \
    \          is modeled as one entry in this table.\"\n                    ::= {\
    \ atmMIBObjects 11 }\n               atmVcCrossConnectEntry OBJECT-TYPE\n    \
    \                SYNTAX  AtmVcCrossConnectEntry\n                    MAX-ACCESS\
    \  not-accessible\n                    STATUS  current\n                    DESCRIPTION\n\
    \                     \"An entry in the ATM VC Cross Connect table.\n        \
    \              This entry is used to model a bi-directional ATM\n            \
    \          VC cross-connect cross-connecting two end points.\n               \
    \       Step-wise Procedures to set up a VC Cross-connect\n                  \
    \    Once the entries in the atmVclTable are created,\n                      the\
    \ following procedures are used\n                      to cross-connect the VCLs\
    \ together to\n                      form a VCC segment.\n                   \
    \  (1) The manager obtains a unique\n                         atmVcCrossConnectIndex\
    \ by reading the\n                         atmVcCrossConnectIndexNext object.\n\
    \                     (2) Next, the manager creates a set of one\n           \
    \              or more rows in the ATM VC Cross Connect\n                    \
    \     Table, one for each cross-connection between\n                         two\
    \ VCLs.  Each row is indexed by the ATM\n                         interface port\
    \ numbers and VPI/VCI values of\n                         the two ends of that\
    \ cross-connection.\n                         This set of rows specifies the topology\
    \ of the\n                         VCC cross-connect and is identified by a single\n\
    \                         value of atmVcCrossConnectIndex.\n                 \
    \     Negotiated VC Cross-Connect Establishment\n                    (2a) The\
    \ manager creates a row in this table by\n                         setting atmVcCrossConnectRowStatus\
    \ to\n                         createAndWait(5).  The agent checks the\n     \
    \                    requested topology and the mutual sanity of\n           \
    \              the ATM traffic parameters and\n                         QoS Classes,\
    \ i.e., the row creation fails if:\n                         - the requested topology\
    \ is not supported\n                           by the agent,\n               \
    \          - the traffic/QoS parameter values\n                           associated\
    \ with the requested row are\n                           incompatible with those\
    \ of already existing\n                           rows for this VC cross-connect.\n\
    \                         [For example, for setting up\n                     \
    \    a point-to-point VC cross-connect, the\n                         ATM traffic\
    \ parameters in the receive direction\n                         of a VCL at the\
    \ low end of the cross-connect\n                         must equal to the traffic\
    \ parameters in the\n                         transmit direction of the other\
    \ VCL at the\n                         high end of the cross-connect,\n      \
    \                   otherwise, the row creation fails.]\n                    \
    \     The agent also checks for internal errors\n                         in building\
    \ the cross-connect.\n                         The atmVcCrossConnectIndex values\
    \ in the\n                         corresponding atmVclTable rows are filled\n\
    \                         in by the agent at this point.\n                   \
    \ (2b) The manager promotes the row in the\n                         atmVcCrossConnectTable\
    \ by setting\n                         atmVcCrossConnectRowStatus to active(1).\
    \  If\n                         this set is successful, the agent has reserved\n\
    \                         the resources specified by the ATM traffic\n       \
    \                  parameter and QoS Class values\n                         for\
    \ each direction of the VC cross-connect\n                         in an ATM switch\
    \ or network.\n                     (3) The manager sets the\n               \
    \          atmVcCrossConnectAdminStatus to up(1)\n                         in\
    \ all rows of this VC cross-connect to\n                         turn the traffic\
    \ flow on.\n                      One-Shot VC Cross-Connect Establishment\n  \
    \                    A VC cross-connect may also be established in\n         \
    \             one step by a set-request with all necessary\n                 \
    \     parameter values and atmVcCrossConnectRowStatus\n                      set\
    \ to createAndGo(4).\n                      In contrast to the negotiated VC cross-connect\n\
    \                      establishment which allows for detailed error\n       \
    \               checking i.e., set errors are explicitly linked to\n         \
    \             particular resource acquisition failures), the\n               \
    \       one-shot VC cross-connect establishment\n                      performs\
    \ the setup on one operation but does\n                      not have the advantage\
    \ of step-wise error\n                      checking.\n                      VC\
    \ Cross-Connect Retirement\n                      A VC cross-connect identified\
    \ by a particular\n                      value of atmVcCrossConnectIndex is released\
    \ by:\n                     (1) Setting atmVcCrossConnectRowStatus of all rows\n\
    \                         identified by this value of\n                      \
    \   atmVcCrossConnectIndex to destroy(6).\n                         The agent\
    \ may release all\n                         associated resources, and the\n  \
    \                       atmVcCrossConnectIndex values in the\n               \
    \          corresponding atmVclTable row are removed.\n                      \
    \   Note that a situation when only a subset of\n                         the\
    \ associated rows are deleted corresponds\n                         to a VC topology\
    \ change.\n                     (2) After deletion of the appropriate\n      \
    \                   atmVcCrossConnectEntries, the manager may\n              \
    \           set atmVclRowStatus to destroy(6) the\n                         associated\
    \ VCLs.  The agent releases\n                         the resources and removes\
    \ the associated\n                         rows in the atmVclTable.\n        \
    \              VC Cross-Connect Reconfiguration\n                      At the\
    \ discretion of the agent, a VC\n                      cross-connect may be reconfigured\
    \ by\n                      adding and/or deleting leafs to/from\n           \
    \           the VC topology as per the VC cross-connect\n                    \
    \  establishment/retirement procedures.\n                      Reconfiguration\
    \ of traffic/QoS parameter\n                      values requires release of the\
    \ VC cross-connect\n                      before those parameter values may by\
    \ changed\n                      for individual VCLs.\"\n                    INDEX\
    \ { atmVcCrossConnectIndex,\n                          atmVcCrossConnectLowIfIndex,\n\
    \                          atmVcCrossConnectLowVpi,\n                        \
    \  atmVcCrossConnectLowVci,\n                          atmVcCrossConnectHighIfIndex,\n\
    \                          atmVcCrossConnectHighVpi,\n                       \
    \   atmVcCrossConnectHighVci }\n                    ::= { atmVcCrossConnectTable\
    \ 1 }\n               AtmVcCrossConnectEntry ::= SEQUENCE {\n                \
    \    atmVcCrossConnectIndex          INTEGER,\n                    atmVcCrossConnectLowIfIndex\
    \     IfIndex,\n                    atmVcCrossConnectLowVpi         INTEGER,\n\
    \                    atmVcCrossConnectLowVci         INTEGER,\n              \
    \      atmVcCrossConnectHighIfIndex    IfIndex,\n                    atmVcCrossConnectHighVpi\
    \        INTEGER,\n                    atmVcCrossConnectHighVci        INTEGER,\n\
    \                    atmVcCrossConnectAdminStatus    INTEGER,\n              \
    \      atmVcCrossConnectL2HOperStatus  INTEGER,\n                    atmVcCrossConnectH2LOperStatus\
    \  INTEGER,\n                    atmVcCrossConnectL2HLastChange  TimeStamp,\n\
    \                    atmVcCrossConnectH2LLastChange  TimeStamp,\n            \
    \        atmVcCrossConnectRowStatus      RowStatus\n                         \
    \   }\n               atmVcCrossConnectIndex OBJECT-TYPE\n                   \
    \ SYNTAX  INTEGER (1..2147483647)\n                    MAX-ACCESS  not-accessible\n\
    \                    STATUS  current\n                    DESCRIPTION\n      \
    \               \"A unique value to identify this VC cross-connect.\"\n      \
    \              ::= { atmVcCrossConnectEntry 1 }\n               atmVcCrossConnectLowIfIndex\
    \ OBJECT-TYPE\n                    SYNTAX  IfIndex\n                    MAX-ACCESS\
    \  not-accessible\n                    STATUS  current\n                    DESCRIPTION\n\
    \                     \"The value of this object is equal to MIB II's\n      \
    \                ifIndex value of the ATM interface port for this\n          \
    \            VC cross-connect.  The term low implies\n                      that\
    \ this ATM interface has the numerically lower\n                      ifIndex\
    \ value than the other ATM interface\n                      identified in the\
    \ same atmVcCrossConnectEntry.\"\n                    ::= { atmVcCrossConnectEntry\
    \ 2 }\n               atmVcCrossConnectLowVpi OBJECT-TYPE\n                  \
    \  SYNTAX  INTEGER  (0..4095)\n                    MAX-ACCESS  not-accessible\n\
    \                    STATUS  current\n                    DESCRIPTION\n      \
    \               \"The value of this object is equal to the VPI\n             \
    \         value at the ATM interface\n                      associated with the\
    \ VC cross-connect that is\n                      identified by atmVcCrossConnectLowIfIndex.\n\
    \                      The VPI value cannot exceed the number\n              \
    \        supported by the atmInterfaceMaxVpiBits\n                      at the\
    \ low ATM interface port.\"\n                    ::= { atmVcCrossConnectEntry\
    \ 3 }\n               atmVcCrossConnectLowVci OBJECT-TYPE\n                  \
    \  SYNTAX  INTEGER  (0..65535)\n                    MAX-ACCESS  not-accessible\n\
    \                    STATUS  current\n                    DESCRIPTION\n      \
    \               \"The value of this object is equal to the VCI\n             \
    \         value at the ATM interface\n                      associated with this\
    \ VC cross-connect that is\n                      identified by atmVcCrossConnectLowIfIndex.\n\
    \                      The VCI value cannot exceed the number\n              \
    \        supported by the atmInterfaceMaxVciBits\n                      at the\
    \ low ATM interface port.\"\n                    ::= { atmVcCrossConnectEntry\
    \ 4 }\n               atmVcCrossConnectHighIfIndex OBJECT-TYPE\n             \
    \       SYNTAX  IfIndex\n                    MAX-ACCESS  not-accessible\n    \
    \                STATUS  current\n                    DESCRIPTION\n          \
    \           \"The value of this object is equal to MIB II's\n                \
    \      ifIndex value for the ATM interface port for\n                      this\
    \ VC cross-connect.  The term high\n                      implies that this VC\
    \ cross-connect\n                      that this ATM interface has the numerically\
    \ higher\n                      ifIndex value than the other ATM interface\n \
    \                     identified in the same atmVcCrossConnectEntry.\"\n     \
    \               ::= { atmVcCrossConnectEntry 5 }\n               atmVcCrossConnectHighVpi\
    \ OBJECT-TYPE\n                    SYNTAX  INTEGER   (0..4095)\n             \
    \       MAX-ACCESS  not-accessible\n                    STATUS  current\n    \
    \                DESCRIPTION\n                     \"The value of this object\
    \ is equal to the VPI\n                      value at the ATM interface\n    \
    \                  associated with the VC cross-connect that is\n            \
    \          identified by atmVcCrossConnectHighIfIndex.\n                     \
    \ The VPI value cannot exceed\n                      the number supported by the\
    \ atmInterfaceMaxVpiBits\n                      at the high ATM interface port.\"\
    \n                    ::= { atmVcCrossConnectEntry 6 }\n               atmVcCrossConnectHighVci\
    \ OBJECT-TYPE\n                    SYNTAX  INTEGER   (0..65535)\n            \
    \        MAX-ACCESS  not-accessible\n                    STATUS  current\n   \
    \                 DESCRIPTION\n                     \"The value of this object\
    \ is equal to the VCI\n                      value at the ATM interface\n    \
    \                  associated with the VC cross-connect that is\n            \
    \          identified by atmVcCrossConnectHighIfIndex.\n                     \
    \ The VCI value cannot exceed\n                      the number supported by the\
    \ atmInterfaceMaxVciBits\n                      at the high ATM interface port.\"\
    \n                    ::= { atmVcCrossConnectEntry 7 }\n               atmVcCrossConnectAdminStatus\
    \ OBJECT-TYPE\n                    SYNTAX  INTEGER {\n                       \
    \       up(1),\n                              down(2)\n                      \
    \        }\n                    MAX-ACCESS  read-create\n                    STATUS\
    \  current\n                    DESCRIPTION\n                     \"The value\
    \ of this object identifies the desired\n                      administrative\
    \ status of this bi-directional\n                      VC cross-connect. The up\
    \ and down states\n                      indicate that the traffic flow is enabled\
    \ or\n                      disabled respectively on this VC cross-connect.\"\n\
    \                    DEFVAL { down }\n                    ::= { atmVcCrossConnectEntry\
    \ 8 }\n               atmVcCrossConnectL2HOperStatus OBJECT-TYPE\n           \
    \         SYNTAX  INTEGER {\n                              up(1),\n          \
    \                    down(2),\n                              unknown(3)\n    \
    \                        }\n                    MAX-ACCESS  read-only\n      \
    \              STATUS  current\n                    DESCRIPTION\n            \
    \         \"The value of this object identifies the current\n                \
    \      operational status of the VC cross-connect\n                      in one\
    \ direction; (i.e., from the low to\n                      high direction).  The\
    \ up and down states indicate\n                      that this ATM VC cross-connect\
    \ from low\n                      to high direction is operational or not\n  \
    \                    operational respectively.  The unknown state\n          \
    \            indicates that the state of it cannot be\n                      determined.\"\
    \n                    ::= { atmVcCrossConnectEntry 9 }\n               atmVcCrossConnectH2LOperStatus\
    \ OBJECT-TYPE\n                    SYNTAX  INTEGER {\n                       \
    \       up(1),\n                              down(2),\n                     \
    \         unknown(3)\n                            }\n                    MAX-ACCESS\
    \  read-only\n                    STATUS  current\n                    DESCRIPTION\n\
    \                     \"The value of this object identifies the current\n    \
    \                  operational status of the VC cross-connect\n              \
    \        in one direction; (i.e., from the high to\n                      low\
    \ direction).  The up and down states indicate\n                      that this\
    \ ATM VC cross-connect from high\n                      to low direction is operational\
    \ or not\n                      operational respectively.  The unknown state\n\
    \                      indicates that the state of it cannot be\n            \
    \          determined.\"\n                    ::= { atmVcCrossConnectEntry 10\
    \ }\n               atmVcCrossConnectL2HLastChange OBJECT-TYPE\n             \
    \       SYNTAX  TimeStamp\n                    MAX-ACCESS  read-only\n       \
    \             STATUS  current\n                    DESCRIPTION\n             \
    \        \"The value of MIB II's sysUpTime object\n                      at the\
    \ time this VC cross-connect entered\n                      its current operational\
    \ state in low to high\n                      direction.  If the current state\
    \ was\n                      entered prior to the last re-initialization of the\n\
    \                      agent, then this object contains a zero value.\"\n    \
    \                ::= { atmVcCrossConnectEntry 11 }\n               atmVcCrossConnectH2LLastChange\
    \ OBJECT-TYPE\n                    SYNTAX  TimeStamp\n                    MAX-ACCESS\
    \  read-only\n                    STATUS  current\n                    DESCRIPTION\n\
    \                     \"The value of MIB II's sysUpTime object\n             \
    \         at the time this VC cross-connect entered\n                      its\
    \ current operational state in high to low\n                      direction. \
    \ If the current state was\n                      entered prior to the last re-initialization\
    \ of the\n                      agent, then this object contains a zero value.\"\
    \n                    ::= { atmVcCrossConnectEntry 12 }\n               atmVcCrossConnectRowStatus\
    \ OBJECT-TYPE\n                    SYNTAX  RowStatus\n                    MAX-ACCESS\
    \  read-create\n                    STATUS  current\n                    DESCRIPTION\n\
    \                     \"The status of this entry in the\n                    \
    \  atmVcCrossConnectTable.  This object is used to\n                      create\
    \ a new cross-connect for cross-connecting\n                      VCLs which are\
    \ created using the atmVclTable\n                      or to change or delete\
    \ existing cross-connect.\n                      This object must be initially\
    \ set to\n                      `createAndWait' or 'createAndGo'.  This object\n\
    \                      cannot be set to `active' unless the following\n      \
    \                columnar object exists in this row:\n                      atmVcCrossConnectAdminStatus.\n\
    \                      To turn on a VC cross-connect,\n                      the\
    \ atmVcCrossConnectAdminStatus\n                      is set to `up'.\"\n    \
    \                ::= { atmVcCrossConnectEntry 13 }\n               -- AAL5 Virtual\
    \ Channel Connection Performance Statistics\n               -- Group\n       \
    \        -- This group contains the AAL5\n               -- performance statistics\
    \ of a VCC at the\n               -- interface associated with an AAL5 entity\
    \ in an ATM\n               -- host or ATM switch.\n               aal5VccTable\
    \    OBJECT-TYPE\n                    SYNTAX      SEQUENCE OF Aal5VccEntry\n \
    \                   MAX-ACCESS   not-accessible\n                    STATUS  \
    \     current\n                    DESCRIPTION\n                     \"This table\
    \ contains AAL5 VCC performance\n                      parameters.\"\n       \
    \             ::= { atmMIBObjects 12 }\n               aal5VccEntry    OBJECT-TYPE\n\
    \                    SYNTAX         Aal5VccEntry\n                    MAX-ACCESS\
    \     not-accessible\n                    STATUS         current\n           \
    \         DESCRIPTION\n                     \"This list contains the AAL5 VCC\n\
    \                      performance parameters.\"\n                    INDEX {\
    \ ifIndex, aal5VccVpi, aal5VccVci }\n                    ::= { aal5VccTable 1\
    \ }\n               Aal5VccEntry    ::= SEQUENCE  {\n                    aal5VccVpi\
    \                        INTEGER,\n                    aal5VccVci            \
    \            INTEGER,\n                    aal5VccCrcErrors                  Counter32,\n\
    \                    aal5VccSarTimeOuts                Counter32,\n          \
    \          aal5VccOverSizedSDUs              Counter32\n                     \
    \    }\n               aal5VccVpi               OBJECT-TYPE\n                \
    \    SYNTAX       INTEGER  (0..4095)\n                    MAX-ACCESS    not-accessible\n\
    \                    STATUS         current\n                    DESCRIPTION\n\
    \                     \"The VPI value of the AAL5 VCC at the\n               \
    \       interface identified by the ifIndex.\"\n                    ::= { aal5VccEntry\
    \ 1 }\n               aal5VccVci               OBJECT-TYPE\n                 \
    \   SYNTAX       INTEGER  (0..65535)\n                    MAX-ACCESS    not-accessible\n\
    \                    STATUS         current\n                    DESCRIPTION\n\
    \                     \"The VCI value of the AAL5 VCC at the\n               \
    \       interface identified by the ifIndex.\"\n                    ::= { aal5VccEntry\
    \ 2 }\n               aal5VccCrcErrors    OBJECT-TYPE\n                    SYNTAX\
    \  Counter32\n                    MAX-ACCESS  read-only\n                    STATUS\
    \           current\n                    DESCRIPTION\n                     \"\
    The number of AAL5 CPCS PDUs received with\n                      CRC-32 errors\
    \ on this AAL5 VCC at the\n                      interface associated with an\
    \ AAL5 entity.\"\n                    ::= { aal5VccEntry 3 }\n               aal5VccSarTimeOuts\
    \    OBJECT-TYPE\n                    SYNTAX  Counter32\n                    MAX-ACCESS\
    \  read-only\n                    STATUS           current\n                 \
    \   DESCRIPTION\n                     \"The number of partially re-assembled AAL5\n\
    \                      CPCS PDUs which were discarded\n                      on\
    \ this AAL5 VCC at the interface associated\n                      with an AAL5\
    \ entity because they\n                      were not fully re-assembled within\
    \ the\n                      required time period.  If the re-assembly\n     \
    \                 timer is not supported, then this object\n                 \
    \     contains a zero value.\"\n                    ::= { aal5VccEntry 4 }\n \
    \              aal5VccOverSizedSDUs    OBJECT-TYPE\n                    SYNTAX\
    \  Counter32\n                    MAX-ACCESS  read-only\n                    STATUS\
    \           current\n                    DESCRIPTION\n                     \"\
    The number of AAL5 CPCS PDUs discarded\n                      on this AAL5 VCC\
    \ at the interface\n                      associated with an AAL5 entity because\
    \ the\n                      AAL5 SDUs were too large.\"\n                   \
    \ ::= { aal5VccEntry 5 }\n               -- Conformance Information\n        \
    \       atmMIBConformance   OBJECT IDENTIFIER ::= { atmMIB 2 }\n             \
    \  atmMIBGroups        OBJECT IDENTIFIER\n                                   \
    \       ::= { atmMIBConformance 1 }\n               atmMIBCompliances   OBJECT\
    \ IDENTIFIER\n                                          ::= { atmMIBConformance\
    \ 2 }\n               -- Compliance Statements\n               atmMIBCompliance\
    \       MODULE-COMPLIANCE\n                    STATUS      current\n         \
    \           DESCRIPTION\n                      \"The compliance statement for\
    \ SNMP entities\n                       including networks which have ATM and\n\
    \                       AAL5 interfaces.\"\n                    MODULE -- this\
    \ module\n                      MANDATORY-GROUPS  {atmInterfaceConfGroup,\n  \
    \                                       atmTrafficDescrGroup}\n              \
    \        OBJECT   atmInterfaceMaxVpcs\n                      MIN-ACCESS read-only\n\
    \                      DESCRIPTION\n                        \"Write access is\
    \ not required.\"\n                      OBJECT   atmInterfaceMaxVccs\n      \
    \                MIN-ACCESS read-only\n                      DESCRIPTION\n   \
    \                     \"Write access is not required.\"\n                    \
    \  OBJECT   atmInterfaceMaxActiveVpiBits\n                      MIN-ACCESS read-only\n\
    \                      DESCRIPTION\n                        \"Write access is\
    \ not required.\"\n                      OBJECT   atmInterfaceMaxActiveVciBits\n\
    \                      MIN-ACCESS read-only\n                      DESCRIPTION\n\
    \                        \"Write access is not required.\"\n                 \
    \     OBJECT   atmInterfaceIlmiVpi\n                      MIN-ACCESS read-only\n\
    \                      DESCRIPTION\n                        \"Write access is\
    \ not required.\"\n                      OBJECT   atmInterfaceIlmiVci\n      \
    \                MIN-ACCESS read-only\n                      DESCRIPTION\n   \
    \                     \"Write access is not required.\"\n                    \
    \  OBJECT   atmInterfaceMyNeighborIpAddress\n                      MIN-ACCESS\
    \ read-only\n                      DESCRIPTION\n                        \"Write\
    \ access is not required.\"\n                      OBJECT   atmInterfaceMyNeighborIfName\n\
    \                      MIN-ACCESS read-only\n                      DESCRIPTION\n\
    \                        \"Write access is not required.\"\n                 \
    \     OBJECT   atmTrafficDescrType\n                      MIN-ACCESS read-only\n\
    \                      DESCRIPTION\n                        \"Write access is\
    \ not required.\"\n                      OBJECT   atmTrafficDescrParam1\n    \
    \                  MIN-ACCESS read-only\n                      DESCRIPTION\n \
    \                       \"Write access is not required.\"\n                  \
    \    OBJECT   atmTrafficDescrParam2\n                      MIN-ACCESS read-only\n\
    \                      DESCRIPTION\n                        \"Write access is\
    \ not required.\"\n                      OBJECT   atmTrafficDescrParam3\n    \
    \                  MIN-ACCESS read-only\n                      DESCRIPTION\n \
    \                       \"Write access is not required.\"\n                  \
    \    OBJECT   atmTrafficDescrParam4\n                      MIN-ACCESS read-only\n\
    \                      DESCRIPTION\n                        \"Write access is\
    \ not required.\"\n                      OBJECT   atmTrafficDescrParam5\n    \
    \                  MIN-ACCESS read-only\n                      DESCRIPTION\n \
    \                       \"Write access is not required.\"\n                  \
    \    OBJECT   atmTrafficQoSClass\n                      MIN-ACCESS read-only\n\
    \                      DESCRIPTION\n                        \"Write access is\
    \ not required.\"\n                      OBJECT   atmTrafficDescrRowStatus\n \
    \                     SYNTAX   INTEGER {active(1)}\n                         \
    \              -- subset of RowStatus\n                      MIN-ACCESS read-only\n\
    \                      DESCRIPTION\n                        \"Write access is\
    \ not required, and only one\n                         of the six enumerated values\
    \ for the\n                         RowStatus textual convention need be\n   \
    \                      supported, specifically: active(1).\"\n               \
    \       GROUP   atmInterfaceDs3PlcpGroup\n                      DESCRIPTION\n\
    \                        \"This group is mandatory only for those\n          \
    \               ATM interfaces which implement the\n                         DS3\
    \ PLCP layer.\"\n                      GROUP   atmInterfaceTCGroup\n         \
    \             DESCRIPTION\n                        \"This group is mandatory only\
    \ for those\n                         ATM interfaces which implement the\n   \
    \                      TC Sublayer.\"\n                      GROUP   atmVpcTerminationGroup\n\
    \                      DESCRIPTION\n                        \"This group is mandatory\
    \ only for those\n                         ATM interfaces which implement ATM\n\
    \                         VPLs that terminate VPCs (i.e., ones which\n       \
    \                  are NOT cross-connected to other VPLs).\"\n               \
    \       GROUP   atmVpCrossConnectGroup\n                      DESCRIPTION\n  \
    \                      \"This group is mandatory only for those\n            \
    \             ATM interfaces which implement ATM\n                         VPLs\
    \ that are not associated with VCLs\n                         and are cross-connected\
    \ to other VPLs.\"\n                      OBJECT   atmVplVpi\n               \
    \       SYNTAX   INTEGER (1..255)\n                      DESCRIPTION\n       \
    \                 \"For ATM UNIs supporting VPCs, the VPI value\n            \
    \             ranges from 1 to 255.\"\n                      OBJECT   atmVplAdminStatus\n\
    \                      MIN-ACCESS read-only\n                      DESCRIPTION\n\
    \                        \"Write access is not required.\"\n                 \
    \     OBJECT   atmVplReceiveTrafficDescrIndex\n                      MIN-ACCESS\
    \ read-only\n                      DESCRIPTION\n                        \"Write\
    \ access is not required.\"\n                      OBJECT   atmVplTransmitTrafficDescrIndex\n\
    \                      MIN-ACCESS read-only\n                      DESCRIPTION\n\
    \                        \"Write access is not required.\"\n                 \
    \     OBJECT   atmVplRowStatus\n                      SYNTAX   INTEGER {active(1)}\n\
    \                                       -- subset of RowStatus\n             \
    \         MIN-ACCESS read-only\n                      DESCRIPTION\n          \
    \              \"Write access is not required, and only one\n                \
    \         of the six enumerated values for the\n                         RowStatus\
    \ textual convention need be\n                         supported, specifically:\
    \ active(1).\"\n                      OBJECT   atmVpCrossConnectLowVpi\n     \
    \                 SYNTAX   INTEGER (1..255)\n                      DESCRIPTION\n\
    \                        \"For ATM UNIs supporting VPCs, the VPI value\n     \
    \                    at the numerically lower ATM interface port\n           \
    \              index number ranges from 1 to 255.\"\n                      OBJECT\
    \   atmVpCrossConnectHighVpi\n                      SYNTAX   INTEGER (1..255)\n\
    \                      DESCRIPTION\n                        \"For ATM UNIs supporting\
    \ VPCs, the VPI value\n                         at the numerically higher ATM\
    \ interface port\n                         index number ranges from 1 to 255.\"\
    \n                      OBJECT   atmVpCrossConnectAdminStatus\n              \
    \        MIN-ACCESS read-only\n                      DESCRIPTION\n           \
    \             \"Write access is not required.\"\n                      OBJECT\
    \   atmVpCrossConnectRowStatus\n                      SYNTAX   INTEGER {active(1)}\n\
    \                                       -- subset of RowStatus\n             \
    \         MIN-ACCESS read-only\n                      DESCRIPTION\n          \
    \              \"Write access is not required, and only one\n                \
    \         of the six enumerated values for the\n                         RowStatus\
    \ textual convention need be\n                         supported, specifically:\
    \ active(1).\"\n                      GROUP   atmVccTerminationGroup\n       \
    \               DESCRIPTION\n                        \"This group is mandatory\
    \ only for those\n                         ATM interfaces which implement ATM\n\
    \                         VCLs that terminate VCCs (i.e., ones which\n       \
    \                  are NOT cross-connected to other VCLs).\"\n               \
    \       GROUP   atmVcCrossConnectGroup\n                      DESCRIPTION\n  \
    \                      \"This group is mandatory only for those\n            \
    \             ATM interfaces which implement ATM\n                         VCLs\
    \ that are cross-connected to\n                         other VCLs.\"\n      \
    \                OBJECT   atmVclVpi\n                      SYNTAX   INTEGER (0..255)\n\
    \                      DESCRIPTION\n                        \"For ATM UNIs supporting\
    \ VCCs, the VPI value\n                         ranges from 0 to 255.\"\n    \
    \                  OBJECT   atmVclAdminStatus\n                      MIN-ACCESS\
    \ read-only\n                      DESCRIPTION\n                        \"Write\
    \ access is not required.\"\n                      OBJECT   atmVclReceiveTrafficDescrIndex\n\
    \                      MIN-ACCESS read-only\n                      DESCRIPTION\n\
    \                        \"Write access is not required.\"\n                 \
    \     OBJECT   atmVclTransmitTrafficDescrIndex\n                      MIN-ACCESS\
    \ read-only\n                      DESCRIPTION\n                        \"Write\
    \ access is not required.\"\n                      OBJECT     atmVccAalType\n\
    \                      MIN-ACCESS read-only\n                      DESCRIPTION\n\
    \                        \"Write access is not required.\"\n                 \
    \     OBJECT   atmVclRowStatus\n                      SYNTAX   INTEGER {active(1)}\n\
    \                                       -- subset of RowStatus\n             \
    \         MIN-ACCESS read-only\n                      DESCRIPTION\n          \
    \              \"Write access is not required, and only one\n                \
    \         of the six enumerated values for the\n                         RowStatus\
    \ textual convention need be\n                         supported, specifically:\
    \ active(1).\"\n                      OBJECT   atmVcCrossConnectLowVpi\n     \
    \                 SYNTAX   INTEGER (0..255)\n                      DESCRIPTION\n\
    \                        \"For ATM UNIs supporting VCCs, the VPI value\n     \
    \                    at the numerically lower ATM interface port\n           \
    \              index number ranges from 0 to 255.\"\n                      OBJECT\
    \   atmVcCrossConnectHighVpi\n                      SYNTAX   INTEGER (0..255)\n\
    \                      DESCRIPTION\n                        \"For ATM UNIs supporting\
    \ VCCs, the VPI value\n                         at the numerically higher ATM\
    \ interface port\n                         index number ranges from 0 to 255.\"\
    \n                      OBJECT   atmVcCrossConnectAdminStatus\n              \
    \        MIN-ACCESS read-only\n                      DESCRIPTION\n           \
    \             \"Write access is not required.\"\n                      OBJECT\
    \   atmVcCrossConnectRowStatus\n                      SYNTAX   INTEGER { active(1)}\n\
    \                                       -- subset of RowStatus\n             \
    \         MIN-ACCESS read-only\n                      DESCRIPTION\n          \
    \              \"Write access is not required, and only one\n                \
    \         of the six enumerated values for the\n                         RowStatus\
    \ textual convention need be\n                         supported, specifically:\
    \ active(1).\"\n                      GROUP   aal5VccGroup\n                 \
    \     DESCRIPTION\n                        \"This group is mandatory for the\n\
    \                         AAL5 virtual connections only.\"\n                 \
    \     OBJECT   aal5VccVpi\n                      SYNTAX   INTEGER (0..255)\n \
    \                     DESCRIPTION\n                        \"For ATM UNIs supporting\
    \ AAL5 VCCs,\n                         the VPI value ranges from 0 to 255.\"\n\
    \                      OBJECT     atmVccAal5CpcsTransmitSduSize\n            \
    \          MIN-ACCESS read-only\n                      DESCRIPTION\n         \
    \               \"Write access is not required.\"\n                      OBJECT\
    \     atmVccAal5CpcsReceiveSduSize\n                      MIN-ACCESS read-only\n\
    \                      DESCRIPTION\n                        \"Write access is\
    \ not required.\"\n                      OBJECT     atmVccAal5EncapsType\n   \
    \                   MIN-ACCESS read-only\n                      DESCRIPTION\n\
    \                        \"Write access is not required.\"\n                 \
    \      ::= { atmMIBCompliances 1 }\n               -- Units of Conformance\n \
    \              atmInterfaceConfGroup    OBJECT-GROUP\n                      OBJECTS\
    \ {\n                            atmInterfaceMaxVpcs, atmInterfaceMaxVccs,\n \
    \                           atmInterfaceConfVpcs, atmInterfaceConfVccs,\n    \
    \                        atmInterfaceMaxActiveVpiBits,\n                     \
    \       atmInterfaceMaxActiveVciBits,\n                            atmInterfaceIlmiVpi,\n\
    \                            atmInterfaceIlmiVci,\n                          \
    \  atmInterfaceAddressType,\n                            atmInterfaceAdminAddress,\n\
    \                            atmInterfaceMyNeighborIpAddress,\n              \
    \              atmInterfaceMyNeighborIfName}\n                      STATUS   \
    \  current\n                      DESCRIPTION\n                        \"A collection\
    \ of objects providing configuration\n                         information about\
    \ an ATM interface.\"\n                      ::= { atmMIBGroups 1 }\n        \
    \       atmTrafficDescrGroup    OBJECT-GROUP\n                      OBJECTS {\n\
    \                          atmTrafficDescrType, atmTrafficDescrParam1,\n     \
    \                     atmTrafficDescrParam2, atmTrafficDescrParam3,\n        \
    \                  atmTrafficDescrParam4, atmTrafficDescrParam5,\n           \
    \               atmTrafficQoSClass, atmTrafficDescrRowStatus}\n              \
    \        STATUS     current\n                      DESCRIPTION\n             \
    \            \"A collection of objects providing information\n               \
    \           about ATM traffic descriptor type and\n                          the\
    \ associated parameters.\"\n                      ::= { atmMIBGroups 2 }\n   \
    \            atmInterfaceDs3PlcpGroup    OBJECT-GROUP\n                      OBJECTS\
    \ {atmInterfaceDs3PlcpSEFSs,\n                          atmInterfaceDs3PlcpAlarmState,\n\
    \                          atmInterfaceDs3PlcpUASs}\n                      STATUS\
    \     current\n                      DESCRIPTION\n                         \"\
    A collection of objects providing information\n                          about\
    \ DS3 PLCP layer at an ATM interface.\"\n                      ::= { atmMIBGroups\
    \ 3 }\n               atmInterfaceTCGroup    OBJECT-GROUP\n                  \
    \    OBJECTS { atmInterfaceOCDEvents,\n                          atmInterfaceTCAlarmState\
    \ }\n                      STATUS     current\n                      DESCRIPTION\n\
    \                         \"A collection of objects providing information\n  \
    \                        about TC sublayer at an ATM interface.\"\n          \
    \            ::= { atmMIBGroups 4 }\n               atmVpcTerminationGroup   \
    \ OBJECT-GROUP\n                      OBJECTS  {atmVplOperStatus, atmVplAdminStatus,\n\
    \                          atmVplLastChange,\n                          atmVplReceiveTrafficDescrIndex,\n\
    \                          atmVplTransmitTrafficDescrIndex,\n                \
    \          atmVplRowStatus }\n                      STATUS     current\n     \
    \                 DESCRIPTION\n                         \"A collection of objects\
    \ providing\n                          information about a VPL at an ATM interface\n\
    \                          which terminates a VPC\n                          (i.e.,\
    \ one which is NOT cross-connected\n                          to other VPLs).\"\
    \n                      ::= { atmMIBGroups 5 }\n               atmVccTerminationGroup\
    \    OBJECT-GROUP\n                      OBJECTS {atmVclOperStatus, atmVclAdminStatus,\n\
    \                          atmVclLastChange,\n                           atmVclReceiveTrafficDescrIndex,\n\
    \                           atmVclTransmitTrafficDescrIndex,\n               \
    \            atmVccAalType, atmVclRowStatus }\n                      STATUS  \
    \   current\n                      DESCRIPTION\n                         \"A collection\
    \ of objects providing information\n                          about a VCL at an\
    \ ATM interface\n                          which terminates a VCC (i.e., one which\
    \ is\n                          NOT cross-connected to other VCLs).\"\n      \
    \                ::= { atmMIBGroups 6 }\n               atmVpCrossConnectGroup\
    \    OBJECT-GROUP\n                      OBJECTS { atmVplReceiveTrafficDescrIndex,\n\
    \                          atmVplTransmitTrafficDescrIndex,\n                \
    \          atmVplOperStatus, atmVplRowStatus,\n                          atmVpCrossConnectAdminStatus,\n\
    \                          atmVpCrossConnectL2HOperStatus,\n                 \
    \         atmVpCrossConnectH2LOperStatus,\n                          atmVpCrossConnectL2HLastChange,\n\
    \                          atmVpCrossConnectH2LLastChange,\n                 \
    \         atmVpCrossConnectRowStatus,\n                          atmVplCrossConnectIdentifier,\n\
    \                          atmVpCrossConnectIndexNext }\n                    \
    \  STATUS     current\n                      DESCRIPTION\n                   \
    \      \"A collection of objects providing\n                          information\
    \ about a VP cross-connect\n                          and the associated VPLs\
    \ that are\n                          cross-connected together.\"\n          \
    \            ::= { atmMIBGroups 7 }\n               atmVcCrossConnectGroup   \
    \ OBJECT-GROUP\n                      OBJECTS { atmVclReceiveTrafficDescrIndex,\n\
    \                          atmVclTransmitTrafficDescrIndex,\n                \
    \          atmVclOperStatus, atmVclRowStatus,\n                          atmVcCrossConnectAdminStatus,\n\
    \                          atmVcCrossConnectL2HOperStatus,\n                 \
    \         atmVcCrossConnectH2LOperStatus,\n                          atmVcCrossConnectL2HLastChange,\n\
    \                          atmVcCrossConnectH2LLastChange,\n                 \
    \         atmVcCrossConnectRowStatus,\n                          atmVclCrossConnectIdentifier,\n\
    \                           atmVcCrossConnectIndexNext }\n                   \
    \   STATUS     current\n                      DESCRIPTION\n                  \
    \       \"A collection of objects providing\n                          information\
    \ about a VC cross-connect\n                          and the associated VCLs\
    \ that are\n                          cross-connected together.\"\n          \
    \            ::= { atmMIBGroups 8 }\n               aal5VccGroup    OBJECT-GROUP\n\
    \                      OBJECTS {atmVccAal5CpcsTransmitSduSize,\n             \
    \             atmVccAal5CpcsReceiveSduSize,\n                          atmVccAal5EncapsType,\n\
    \                          aal5VccCrcErrors, aal5VccSarTimeOuts,\n           \
    \               aal5VccOverSizedSDUs }\n                      STATUS     current\n\
    \                      DESCRIPTION\n                         \"A collection of\
    \ objects providing\n                          AAL5 configuration and performance\
    \ statistics\n                          of a VCC.\"\n                      ::=\
    \ { atmMIBGroups 9 }\n               END\n"
- title: 11.  Acknowledgments
  contents:
  - "11.  Acknowledgments\n   This memo is the result of the work of the AToMMIB Working\
    \ Group.  In\n   particular, the contributions of Keith McCloghrie and Ted Brunner\n\
    \   were critical to the formulation of this specification.\n"
- title: 12.  References
  contents:
  - "12.  References\n   [1] Case, J., McCloghrie, K., Rose, M., and S. Waldbusser,\
    \ \"Structure\n       of Management Information for version 2 of the Simple Network\n\
    \       Management Protocol (SNMPv2)\", RFC 1442, SNMP Research,Inc.,\n      \
    \ Hughes LAN Systems, Dover Beach Consulting, Inc., Carnegie Mellon\n       University,\
    \ April 1993.\n   [2] McCloghrie, K., and M. Rose, Editors, \"Management Information\n\
    \       Base for Network Management of TCP/IP-based internets: MIB-II\",\n   \
    \    STD 17, RFC 1213, Hughes LAN Systems, Performance Systems\n       International,\
    \ March 1991.\n   [3] Galvin, J., and K. McCloghrie, \"Administrative Model for\
    \ version\n       2 of the Simple Network Management Protocol (SNMPv2)\", RFC\
    \ 1445,\n       Trusted Information Systems, Hughes LAN Systems, April 1993.\n\
    \   [4] Case, J., McCloghrie, K., Rose, M., and S. Waldbusser, \"Protocol\n  \
    \     Operations for version 2 of the Simple Network Management\n       Protocol\
    \ (SNMPv2)\", RFC 1448, SNMP Research, Inc., Hughes LAN\n       Systems, Dover\
    \ Beach Consulting, Inc., Carnegie Mellon\n       University, April 1993.\n  \
    \ [5] McCloghrie, K. and F. Kastenholz, \"Evolution of the Interfaces\n      \
    \ Group of MIB-II\", RFC 1573, Hughes LAN Systems, FTP Software,\n       January\
    \ 1994.\n   [6] Brown, T., and K. Tesink, \"Definitions of Managed Objects for\n\
    \       SMDS Interfaces\", RFC 1694, Bellcore, August 1994.\n   [7] Case, J.,\
    \ McCloghrie, K., Rose, M., and S. Waldbusser, \"Textual\n       Conventions for\
    \ SNMPv2\", RFC 1443, SNMP Research,Inc., Hughes LAN\n       Systems, Dover Beach\
    \ Consulting, Inc., Carnegie Mellon\n       University, April 1993.\n   [8] Case,\
    \ J., McCloghrie, K., Rose, M., and S. Waldbusser,\n       \"Conformance Statements\
    \ for SNMPv2\", RFC 1444, SNMP\n       Research,Inc., Hughes LAN Systems, Dover\
    \ Beach Consulting, Inc.,\n       Carnegie Mellon University, April 1993.\n  \
    \ [9] \"ATM Forum UNI Specification, Version 3.0\", September 1993.\n  [10] \"\
    ATM Forum B-ICI Specification, Version 1.0\", September 1993.\n"
- title: 13.  Security Considerations
  contents:
  - "13.  Security Considerations\n   Security issues are not discussed in this memo.\n"
- title: 14.  Authors' Addresses
  contents:
  - "14.  Authors' Addresses\n   Masuma Ahmed\n   Bell Communications Research\n \
    \  Room 1F-217\n   331 Newman Springs Road\n   P.O. Box 7020\n   Red Bank, NJ\
    \  07701-7020\n   Phone: (908) 758-2515\n   EMail: mxa@mail.bellcore.com\n   Kaj\
    \ Tesink\n   Bell Communications Research\n   Room 1A-427\n   331 Newman Springs\
    \ Road\n   P.O. Box 7020\n   Red Bank, NJ  07701-7020\n   Phone: (908) 758-5254\n\
    \   EMail: kaj@cc.bellcore.com\n"
