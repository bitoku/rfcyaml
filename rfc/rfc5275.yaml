- title: __initial_text__
  contents:
  - '             CMS Symmetric Key Management and Distribution

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes a mechanism to manage (i.e., set up,\n \
    \  distribute, and rekey) keys used with symmetric cryptographic\n   algorithms.\
    \  Also defined herein is a mechanism to organize users\n   into groups to support\
    \ distribution of encrypted content using\n   symmetric cryptographic algorithms.\
    \  The mechanism uses the\n   Cryptographic Message Syntax (CMS) protocol and\
    \ Certificate\n   Management over CMS (CMC) protocol to manage the symmetric keys.\
    \  Any\n   member of the group can then later use this distributed shared key\
    \ to\n   decrypt other CMS encrypted objects with the symmetric key.  This\n \
    \  mechanism has been developed to support Secure/Multipurpose Internet\n   Mail\
    \ Extensions (S/MIME) Mail List Agents (MLAs).\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................4\n\
    \      1.1. Conventions Used in This Document ..........................4\n  \
    \    1.2. Applicability to E-mail ....................................5\n    \
    \  1.3. Applicability to Repositories ..............................5\n      1.4.\
    \ Using the Group Key ........................................5\n   2. Architecture\
    \ ....................................................6\n   3. Protocol Interactions\
    \ ...........................................7\n      3.1. Control Attributes\
    \ .........................................8\n           3.1.1. GL Use KEK .........................................10\n\
    \           3.1.2. Delete GL ..........................................14\n  \
    \         3.1.3. Add GL Member ......................................14\n    \
    \       3.1.4. Delete GL Member ...................................15\n      \
    \     3.1.5. Rekey GL ...........................................16\n        \
    \   3.1.6. Add GL Owner .......................................16\n          \
    \ 3.1.7. Remove GL Owner ....................................17\n           3.1.8.\
    \ GL Key Compromise ..................................17\n           3.1.9. GL\
    \ Key Refresh .....................................18\n           3.1.10. GLA\
    \ Query Request and Response ....................18\n                  3.1.10.1.\
    \ GLA Query Request ........................18\n                  3.1.10.2. GLA\
    \ Query Response .......................19\n                  3.1.10.3. Request\
    \ and Response Types ...............19\n           3.1.11. Provide Cert ......................................19\n\
    \           3.1.12. Update Cert .......................................20\n  \
    \         3.1.13. GL Key ............................................21\n    \
    \  3.2. Use of CMC, CMS, and PKIX .................................23\n      \
    \     3.2.1. Protection Layers ..................................23\n        \
    \          3.2.1.1. Minimum Protection ........................23\n          \
    \        3.2.1.2. Additional Protection .....................24\n           3.2.2.\
    \ Combining Requests and Responses ...................24\n           3.2.3. GLA\
    \ Generated Messages .............................26\n           3.2.4. CMC Control\
    \ Attributes and CMS Signed Attributes ...27\n                  3.2.4.1. Using\
    \ cMCStatusInfoExt ....................27\n                  3.2.4.2. Using transactionId\
    \ .......................30\n                  3.2.4.3. Using Nonces and signingTime\
    \ ..............30\n                  3.2.4.4. CMC and CMS Attribute Support\n\
    \                           Requirements ..............................31\n  \
    \         3.2.5. Resubmitted GL Member Messages .....................31\n    \
    \       3.2.6. PKIX Certificate and CRL Profile ...................31\n   4. Administrative\
    \ Messages ........................................32\n      4.1. Assign KEK to\
    \ GL ..........................................32\n      4.2. Delete GL from GLA\
    \ ........................................36\n      4.3. Add Members to GL .........................................38\n\
    \           4.3.1. GLO Initiated Additions ............................39\n  \
    \         4.3.2. Prospective Member Initiated Additions .............47\n    \
    \  4.4. Delete Members from GL ....................................49\n      \
    \     4.4.1. GLO Initiated Deletions ............................50\n        \
    \   4.4.2. Member Initiated Deletions .........................56\n      4.5.\
    \ Request Rekey of GL .......................................57\n           4.5.1.\
    \ GLO Initiated Rekey Requests .......................59\n           4.5.2. GLA\
    \ Initiated Rekey Requests .......................62\n      4.6. Change GLO ................................................63\n\
    \      4.7. Indicate KEK Compromise ...................................65\n  \
    \         4.7.1. GL Member Initiated KEK Compromise Message .........66\n    \
    \       4.7.2. GLO Initiated KEK Compromise Message ...............67\n      4.8.\
    \ Request KEK Refresh .......................................69\n      4.9. GLA\
    \ Query Request and Response ............................70\n      4.10. Update\
    \ Member Certificate ................................73\n           4.10.1. GLO\
    \ and GLA Initiated Update Member Certificate ...73\n           4.10.2. GL Member\
    \ Initiated Update Member Certificate .....75\n   5. Distribution Message ...........................................77\n\
    \      5.1. Distribution Process ......................................78\n  \
    \ 6. Algorithms .....................................................79\n    \
    \  6.1. KEK Generation Algorithm ..................................79\n      6.2.\
    \ Shared KEK Wrap Algorithm .................................79\n      6.3. Shared\
    \ KEK Algorithm ......................................79\n   7. Message Transport\
    \ ..............................................80\n   8. Security Considerations\
    \ ........................................80\n   9. Acknowledgements ...............................................81\n\
    \   10. References ....................................................81\n  \
    \    10.1. Normative References .....................................81\n    \
    \  10.2. Informative References ...................................82\n   Appendix\
    \ A. ASN.1 Module ..........................................83\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   With the ever-expanding use of secure electronic communications\n\
    \   (e.g., S/MIME [MSG]), users require a mechanism to distribute\n   encrypted\
    \ data to multiple recipients (i.e., a group of users).\n   There are essentially\
    \ two ways to encrypt the data for recipients:\n   using asymmetric algorithms\
    \ with public key certificates (PKCs) or\n   symmetric algorithms with symmetric\
    \ keys.\n   With asymmetric algorithms, the originator forms an originator-\n\
    \   determined content-encryption key (CEK) and encrypts the content,\n   using\
    \ a symmetric algorithm.  Then, using an asymmetric algorithm and\n   the recipient's\
    \ PKCs, the originator generates per-recipient\n   information that either (a)\
    \ encrypts the CEK for a particular\n   recipient (ktri RecipientInfo CHOICE)\
    \ or (b) transfers sufficient\n   parameters to enable a particular recipient\
    \ to independently generate\n   the same KEK (kari RecipientInfo CHOICE).  If\
    \ the group is large,\n   processing of the per-recipient information may take\
    \ quite some time,\n   not to mention the time required to collect and validate\
    \ the PKCs for\n   each of the recipients.  Each recipient identifies its per-recipient\n\
    \   information and uses the private key associated with the public key\n   of\
    \ its PKC to decrypt the CEK and hence gain access to the encrypted\n   content.\n\
    \   With symmetric algorithms, the origination process is slightly\n   different.\
    \  Instead of using PKCs, the originator uses a previously\n   distributed secret\
    \ key-encryption key (KEK) to encrypt the CEK (kekri\n   RecipientInfo CHOICE).\
    \  Only one copy of the encrypted CEK is\n   required because all the recipients\
    \ already have the shared KEK\n   needed to decrypt the CEK and hence gain access\
    \ to the encrypted\n   content.\n   The techniques to protect the shared KEK are\
    \ beyond the scope of this\n   document.  Only the members of the list and the\
    \ key manager should\n   have the KEK in order to maintain confidentiality.  Access\
    \ control to\n   the information protected by the KEK is determined by the entity\
    \ that\n   encrypts the information, as all members of the group have access.\n\
    \   If the entity performing the encryption wants to ensure that some\n   subset\
    \ of the group does not gain access to the information, either a\n   different\
    \ KEK should be used (shared only with this smaller group) or\n   asymmetric algorithms\
    \ should be used.\n"
- title: 1.1.  Conventions Used in This Document
  contents:
  - "1.1.  Conventions Used in This Document\n   The key words \"MUST\", \"MUST NOT\"\
    , \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in BCP 14, RFC 2119\n   [RFC2119].\n"
- title: 1.2.  Applicability to E-mail
  contents:
  - "1.2.  Applicability to E-mail\n   One primary audience for this distribution\
    \ mechanism is e-mail.\n   Distribution lists, sometimes referred to as mail lists,\
    \ support the\n   distribution of messages to recipients subscribed to the mail\
    \ list.\n   There are two models for how the mail list can be used.  If the\n\
    \   originator is a member of the mail list, the originator sends\n   messages\
    \ encrypted with the shared KEK to the mail list (e.g.,\n   listserv or majordomo)\
    \ and the message is distributed to the mail\n   list members.  If the originator\
    \ is not a member of the mail list\n   (does not have the shared KEK), the originator\
    \ sends the message\n   (encrypted for the MLA) to the Mail List Agent (MLA),\
    \ and then the\n   MLA uses the shared KEK to encrypt the message for the members.\
    \  In\n   either case, the recipients of the mail list use the previously\n  \
    \ distributed-shared KEK to decrypt the message.\n"
- title: 1.3.  Applicability to Repositories
  contents:
  - "1.3.  Applicability to Repositories\n   Objects can also be distributed via a\
    \ repository (e.g., Lightweight\n   Directory Access Protocol (LDAP) servers,\
    \ X.500 Directory System\n   Agents (DSAs), Web-based servers).  If an object\
    \ is stored in a\n   repository encrypted with a symmetric key algorithm, anyone\
    \ with the\n   shared KEK and access to that object can then decrypt that object.\n\
    \   The encrypted object and the encrypted, shared KEK can be stored in\n   the\
    \ repository.\n"
- title: 1.4.  Using the Group Key
  contents:
  - "1.4.  Using the Group Key\n   This document was written with three specific scenarios\
    \ in mind: two\n   supporting Mail List Agents and one for general message distribution.\n\
    \   Scenario 1 depicts the originator sending a public key (PK) protected\n  \
    \ message to an MLA who then uses the shared KEK(s) to redistribute the\n   message\
    \ to the members of the list.  Scenario 2 depicts the\n   originator sending a\
    \ shared KEK protected message to an MLA who then\n   redistributes the message\
    \ to the members of the list (the MLA only\n   adds additional recipients).  The\
    \ key used by the originator could be\n   a key shared either amongst all recipients\
    \ or just between the member\n   and the MLA.  Note that if the originator uses\
    \ a key shared only with\n   the MLA, then the MLA will need to decrypt the message\
    \ and reencrypt\n   the message for the list recipients.  Scenario 3 shows an\
    \ originator\n   sending a shared KEK protected message to a group of recipients\n\
    \   without an intermediate MLA.\n                   +---->                  \
    \ +---->       +---->\n    PK   +-----+ S |         S    +-----+ S |         S\
    \  |\n   ----> | MLA | --+---->   ----> | MLA | --+---->   ----+---->\n      \
    \   +-----+   |              +-----+   |            |\n                   +---->\
    \                   +---->       +---->\n       Scenario 1               Scenario\
    \ 2           Scenario 3\n"
- title: 2.  Architecture
  contents:
  - "2.  Architecture\n   Figure 1 depicts the architecture to support symmetric key\n\
    \   distribution.  The Group List Agent (GLA) supports two distinct\n   functions\
    \ with two different agents:\n   -  The Key Management Agent (KMA), which is responsible\
    \ for\n      generating the shared KEKs.\n   -  The Group Management Agent (GMA),\
    \ which is responsible for\n      managing the Group List (GL) to which the shared\
    \ KEKs are\n      distributed.\n   +----------------------------------------------+\n\
    \   |              Group List Agent                |    +-------+\n   | +------------+\
    \    + -----------------------+ |    | Group |\n   | |    Key     |    | Group\
    \ Management Agent | |<-->| List  |\n   | | Management |<-->|     +------------+\
    \     | |    | Owner |\n   | |   Agent    |    |     | Group List |     | |  \
    \  +-------+\n   | +------------+    |     +------------+     | |\n   |      \
    \             |       /  |  \\          | |\n   |                   +------------------------+\
    \ |\n   +----------------------------------------------+\n                   \
    \         /     |      \\\n                           /      |       \\\n    \
    \           +----------+ +---------+ +----------+\n               | Member 1 |\
    \ |   ...   | | Member n |\n               +----------+ +---------+ +----------+\n\
    \        Figure 1 - Key Distribution Architecture\n   A GLA may support multiple\
    \ KMAs.  A GLA in general supports only one\n   GMA, but the GMA may support multiple\
    \ GLs.  Multiple KMAs may support\n   a GMA in the same fashion as GLAs support\
    \ multiple KMAs.  Assigning a\n   particular KMA to a GL is beyond the scope of\
    \ this document.\n   Modeling real-world GL implementations shows that there are\
    \ very\n   restrictive GLs, where a human determines GL membership, and very\n\
    \   open GLs, where there are no restrictions on GL membership.  To\n   support\
    \ this spectrum, the mechanism described herein supports both\n   managed (i.e.,\
    \ where access control is applied) and unmanaged (i.e.,\n   where no access control\
    \ is applied) GLs.  The access control\n   mechanism for managed lists is beyond\
    \ the scope of this document.\n   Note: If the distribution for the list is performed\
    \ by an entity\n   other than the originator (e.g., an MLA distributing a mail\
    \ message),\n   this entity can also enforce access control rules.\n   In either\
    \ case, the GL must initially be constructed by an entity\n   hereafter called\
    \ the Group List Owner (GLO).  There may be multiple\n   entities who 'own' the\
    \ GL and who are allowed to make changes to the\n   GL's properties or membership.\
    \  The GLO determines if the GL will be\n   managed or unmanaged and is the only\
    \ entity that may delete the GL.\n   GLO(s) may or may not be GL members.  GLO(s)\
    \ may also set up lists\n   that are closed, where the GLO solely determines GL\
    \ membership.\n   Though Figure 1 depicts the GLA as encompassing both the KMA\
    \ and GMA\n   functions, the two functions could be supported by the same entity\
    \ or\n   they could be supported by two different entities.  If two entities\n\
    \   are used, they could be located on one or two platforms.  There is\n   however\
    \ a close relationship between the KMA and GMA functions.  If\n   the GMA stores\
    \ all information pertaining to the GLs and the KMA\n   merely generates keys,\
    \ a corrupted GMA could cause havoc.  To protect\n   against a corrupted GMA,\
    \ the KMA would be forced to double check the\n   requests it receives to ensure\
    \ that the GMA did not tamper with them.\n   These duplicative checks blur the\
    \ functionality of the two components\n   together.  For this reason, the interactions\
    \ between the KMA and GMA\n   are beyond the scope of this document.\n   Proprietary\
    \ mechanisms may be used to separate the functions by\n   strengthening the trust\
    \ relationship between the two entities.\n   Henceforth, the distinction between\
    \ the two agents is not discussed\n   further; the term GLA will be used to address\
    \ both functions.  It\n   should be noted that a corrupt GLA can always cause\
    \ havoc.\n"
- title: 3.  Protocol Interactions
  contents:
  - "3.  Protocol Interactions\n   There are existing mechanisms (e.g., listserv and\
    \ majordomo) to\n   manage GLs; however, this document does not address securing\
    \ these\n   mechanisms, as they are not standardized.  Instead, it defines\n \
    \  protocol interactions, as depicted in Figure 2, used by the GL\n   members,\
    \ GLA, and GLO(s) to manage GLs and distribute shared KEKs.\n   The interactions\
    \ have been divided into administration messages and\n   distribution messages.\
    \  The administrative messages are the request\n   and response messages needed\
    \ to set up the GL, delete the GL, add\n   members to the GL, delete members of\
    \ the GL, request a group rekey,\n   add owners to the GL, remove owners of the\
    \ GL, indicate a group key\n   compromise, refresh a group key, interrogate the\
    \ GLA, and update\n   members' and owners' public key certificates.  The distribution\n\
    \   messages are the messages that distribute the shared KEKs.  The\n   following\
    \ sections describe the ASN.1 for both the administration and\n   distribution\
    \ messages.  Section 4 describes how to use the\n   administration messages, and\
    \ Section 5 describes how to use the\n   distribution messages.\n      +-----+\
    \                   +----------+\n      | GLO | <---+      +----> | Member 1 |\n\
    \      +-----+     |      |      +----------+\n                  |      |\n  \
    \ +-----+ <------+      |      +----------+\n   | GLA | <-------------+----> |\
    \   ...    |\n   +-----+               |      +----------+\n                 \
    \        |\n                         |      +----------+\n                   \
    \      +----> | Member n |\n                                +----------+\n   \
    \     Figure 2 - Protocol Interactions\n"
- title: 3.1.  Control Attributes
  contents:
  - "3.1.  Control Attributes\n   To avoid creating an entirely new protocol, the\
    \ Certificate\n   Management over CMS (CMC) protocol was chosen as the foundation\
    \ of\n   this protocol.  The main reason for the choice was the layering\n   aspect\
    \ provided by CMC where one or more control attributes are\n   included in message,\
    \ protected with CMS, to request or respond to a\n   desired action.  The CMC\
    \ PKIData structure is used for requests, and\n   the CMC PKIResponse structure\
    \ is used for responses.  The content-\n   types PKIData and PKIResponse are then\
    \ encapsulated in CMS's\n   SignedData or EnvelopedData, or a combination of the\
    \ two (see Section\n   3.2).  The following are the control attributes defined\
    \ in this\n   document:\n         Control\n        Attribute          OID    \
    \      Syntax\n   -------------------  ----------- -----------------\n    glUseKEK\
    \            id-skd 1    GLUseKEK\n    glDelete            id-skd 2    GeneralName\n\
    \    glAddMember         id-skd 3    GLAddMember\n    glDeleteMember      id-skd\
    \ 4    GLDeleteMember\n    glRekey             id-skd 5    GLRekey\n    glAddOwner\
    \          id-skd 6    GLOwnerAdministration\n    glRemoveOwner       id-skd 7\
    \    GLOwnerAdministration\n    glkCompromise       id-skd 8    GeneralName\n\
    \    glkRefresh          id-skd 9    GLKRefresh\n    glaQueryRequest     id-skd\
    \ 11   GLAQueryRequest\n    glaQueryResponse    id-skd 12   GLAQueryResponse\n\
    \    glProvideCert       id-skd 13   GLManageCert\n    glUpdateCert        id-skd\
    \ 14   GLManageCert\n    glKey               id-skd 15   GLKey\n   In the following\
    \ conformance tables, the column headings have the\n   following meanings: O for\
    \ originate, R for receive, and F for\n   forward.  There are three types of implementations:\
    \ GLOs, GLAs, and\n   GL members.  The GLO is an optional component, hence all\
    \ GLO O and\n   GLO R messages are optional, and GLA F messages are optional.\
    \  The\n   first table includes messages that conformant implementations MUST\n\
    \   support.  The second table includes messages that MAY be implemented.\n  \
    \ The second table should be interpreted as follows: if the control\n   attribute\
    \ is implemented by a component, then it must be implemented\n   as indicated.\
    \  For example, if a GLA is implemented that supports the\n   glAddMember control\
    \ attribute, then it MUST support receiving the\n   glAddMember message.  Note\
    \ that \"-\" means not applicable.\n                             Required\n  \
    \        Implementation Requirement       |  Control\n     GLO   |        GLA\
    \        | GL Member | Attribute\n    O  R   |  O      R      F  |  O    R   |\n\
    \   ------- | ----------------- | --------- | ----------\n   MAY  -  | MUST  \
    \  -     MAY |  -   MUST | glProvideCert\n   MAY MAY |  -     MUST   MAY | MUST\
    \  -   | glUpdateCert\n    -   -  | MUST    -      -  |  -   MUST | glKey\n  \
    \                           Optional\n           Implementation Requirement  \
    \    |  Control\n     GLO   |        GLA        | GL Member | Attribute\n    O\
    \   R  |  O      R      F  |  O    R   |\n   ------- | ----------------- | ---------\
    \ | ----------\n   MAY  -  |  -     MAY     -  |  -    -   | glUseKEK\n   MAY\
    \  -  |  -     MAY     -  |  -    -   | glDelete\n   MAY MAY |  -     MUST   MAY\
    \ | MUST  -   | glAddMember\n   MAY MAY |  -     MUST   MAY | MUST  -   | glDeleteMember\n\
    \   MAY  -  |  -     MAY     -  |  -    -   | glRekey\n   MAY  -  |  -     MAY\
    \     -  |  -    -   | glAddOwner\n   MAY  -  |  -     MAY     -  |  -    -  \
    \ | glRemoveOwner\n   MAY MAY |  -     MUST   MAY | MUST  -   | glkCompromise\n\
    \   MAY  -  |  -     MUST    -  | MUST  -   | glkRefresh\n   MAY  -  |  -    \
    \ SHOULD  -  | MAY   -   | glaQueryRequest\n    -  MAY | SHOULD  -      -  | \
    \ -   MAY  | glaQueryResponse\n   glaQueryResponse is carried in the CMC PKIResponse\
    \ content-type, all\n   other control attributes are carried in the CMC PKIData\
    \ content-type.\n   The exception is glUpdateCert, which can be carried in either\
    \ PKIData\n   or PKIResponse.\n   Success and failure messages use CMC (see Section\
    \ 3.2.4).\n"
- title: 3.1.1.  GL Use KEK
  contents:
  - "3.1.1.  GL Use KEK\n   The GLO uses glUseKEK to request that a shared KEK be\
    \ assigned to a\n   GL.  glUseKEK messages MUST be signed by the GLO.  The glUseKEK\n\
    \   control attribute has the syntax GLUseKEK:\n   GLUseKEK ::= SEQUENCE {\n \
    \    glInfo                GLInfo,\n     glOwnerInfo           SEQUENCE SIZE (1..MAX)\
    \ OF GLOwnerInfo,\n     glAdministration      GLAdministration DEFAULT 1,\n  \
    \   glKeyAttributes       GLKeyAttributes OPTIONAL }\n   GLInfo ::= SEQUENCE {\n\
    \     glName     GeneralName,\n     glAddress  GeneralName }\n   GLOwnerInfo ::=\
    \ SEQUENCE {\n     glOwnerName     GeneralName,\n     glOwnerAddress  GeneralName,\n\
    \     certificate     Certificates OPTIONAL }\n   Certificates ::= SEQUENCE {\n\
    \      pKC                [0] Certificate OPTIONAL,\n                        \
    \          -- See [PROFILE]\n      aC                 [1] SEQUENCE SIZE (1.. MAX)\
    \ OF\n                             AttributeCertificate OPTIONAL,\n          \
    \                        -- See [ACPROF]\n      certPath           [2] CertificateSet\
    \ OPTIONAL }\n                                  -- From [CMS]\n   -- CertificateSet\
    \ and CertificateChoices are included only\n   -- for illustrative purposes as\
    \ they are imported from [CMS].\n   CertificateSet ::= SET SIZE (1..MAX) OF CertificateChoices\n\
    \   -- CertificateChoices supports X.509 public key certificates in\n   -- certificates\
    \ and v2 attribute certificates in v2AttrCert.\n   GLAdministration ::= INTEGER\
    \ {\n     unmanaged  (0),\n     managed    (1),\n     closed     (2) }\n   GLKeyAttributes\
    \ ::= SEQUENCE {\n     rekeyControlledByGLO       [0] BOOLEAN DEFAULT FALSE,\n\
    \     recipientsNotMutuallyAware [1] BOOLEAN DEFAULT TRUE,\n     duration    \
    \               [2] INTEGER DEFAULT 0,\n     generationCounter          [3] INTEGER\
    \ DEFAULT 2,\n     requestedAlgorithm         [4] AlgorithmIdentifier\n      \
    \                           DEFAULT { id-aes128-wrap } }\n   The fields in GLUseKEK\
    \ have the following meaning:\n     - glInfo indicates the name of the GL in glName\
    \ and the address of\n       the GL in glAddress.  The glName and glAddress can\
    \ be the same,\n       but this is not always the case.  Both the name and address\
    \ MUST\n       be unique for a given GLA.\n     - glOwnerInfo indicates:\n   \
    \     -- glOwnerName indicates the name of the owner of the GL.  One\n       \
    \    of the names in glOwnerName MUST match one of the names in\n           the\
    \ certificate (either the subject distinguished name or one\n           of the\
    \ subject alternative names) used to sign this\n           SignedData.PKIData\
    \ creating the GL (i.e., the immediate\n           signer).\n        -- glOwnerAddress\
    \ indicates the GL owner's address.\n        -- certificates MAY be included.\
    \  It contains the following\n           three fields:\n            --- certificates.pKC\
    \ includes the encryption certificate for\n                the GLO.  It will be\
    \ used to encrypt responses for the\n                GLO.\n            --- certificates.aC\
    \ MAY be included to convey any attribute\n                certificate (see [ACPROF])\
    \ associated with the\n                encryption certificate of the GLO included\
    \ in\n                certificates.pKC.\n            --- certificates.certPath\
    \ MAY also be included to convey\n                certificates that might aid\
    \ the recipient in\n                constructing valid certification paths for\
    \ the\n                certificate provided in certificates.pKC and the\n    \
    \            attribute certificates provided in certificates.aC.\n           \
    \     Theses certificates are optional because they might\n                already\
    \ be included elsewhere in the message (e.g., in\n                the outer CMS\
    \ layer).\n        -- glAdministration indicates how the GL ought to be\n    \
    \       administered.  The default is for the list to be managed.\n          \
    \ Three values are supported for glAdministration:\n            --- Unmanaged\
    \ - When the GLO sets glAdministration to\n                unmanaged, it is allowing\
    \ prospective members to request\n                addition and deletion from the\
    \ GL without GLO\n                intervention.\n            --- Managed - When\
    \ the GLO sets glAdministration to managed,\n                it is allowing prospective\
    \ members to request addition\n                and deletion from the GL, but the\
    \ request is redirected\n                by the GLA to GLO for review.  The GLO\
    \ makes the\n                determination as to whether to honor the request.\n\
    \            --- Closed - When the GLO sets glAdministration to closed,\n    \
    \            it is not allowing prospective members to request\n             \
    \   addition or deletion from the GL.  The GLA will only\n                accept\
    \ glAddMember and glDeleteMember requests from the\n                GLO.\n   \
    \     -- glKeyAttributes indicates the attributes the GLO wants the\n        \
    \   GLA to assign to the shared KEK.  If this field is omitted,\n           GL\
    \ rekeys will be controlled by the GLA, the recipients are\n           allowed\
    \ to know about one another, the algorithm will be\n           AES-128 (see Section\
    \ 7), the shared KEK will be valid for a\n           calendar month (i.e., first\
    \ of the month until the last day\n           of the month), and two shared KEKs\
    \ will be distributed\n           initially.  The fields in glKeyAttributes have\
    \ the following\n           meaning:\n            --- rekeyControlledByGLO indicates\
    \ whether the GL rekey\n                messages will be generated by the GLO\
    \ or by the GLA.\n                The default is for the GLA to control rekeys.\
    \  If GL\n                rekey is controlled by the GLA, the GL will continue\
    \ to\n                be rekeyed until the GLO deletes the GL or changes the\n\
    \                GL rekey to be GLO controlled.\n            --- recipientsNotMutuallyAware\
    \ indicates that the GLO wants\n                the GLA to distribute the shared\
    \ KEK individually for\n                each of the GL members (i.e., a separate\
    \ glKey message\n                is sent to each recipient).  The default is for\
    \ separate\n                glKey message not to be required.\n              \
    \  Note: This supports lists where one member does not know\n                the\
    \ identities of the other members.  For example, a\n                list is configured\
    \ granting submit permissions to only\n                one member.  All other\
    \ members are 'listening'.  The\n                security policy of the list does\
    \ not allow the members\n                to know who else is on the list.  If\
    \ a glKey is\n                constructed for all of the GL members, information\
    \ about\n                each of the members may be derived from the information\n\
    \                in RecipientInfos.\n                To make sure the glkey message\
    \ does not divulge\n                information about the other recipients, a\
    \ separate glKey\n                message would be sent to each GL member.\n \
    \           --- duration indicates the length of time (in days) during\n     \
    \           which the shared KEK is considered valid.  The value\n           \
    \     zero (0) indicates that the shared KEK is valid for a\n                calendar\
    \ month in the UTC Zulu time zone.  For example,\n                if the duration\
    \ is zero (0), if the GL shared KEK is\n                requested on July 24,\
    \ the first key will be valid until\n                the end of July and the next\
    \ key will be valid for the\n                entire month of August.  If the value\
    \ is not zero (0),\n                the shared KEK will be valid for the number\
    \ of days\n                indicated by the value.  For example, if the value\
    \ of\n                duration is seven (7) and the shared KEK is requested on\n\
    \                Monday but not generated until Tuesday (13 May 2008);\n     \
    \           the shared KEKs will be valid from Tuesday (13 May 2008)\n       \
    \         to Tuesday (20 May 2008).  The exact time of the day is\n          \
    \      determined when the key is generated.\n            --- generationCounter\
    \ indicates the number of keys the GLO\n                wants the GLA to distribute.\
    \  To ensure uninterrupted\n                function of the GL, two (2) shared\
    \ KEKs at a minimum\n                MUST be initially distributed.  The second\
    \ shared KEK is\n                distributed with the first shared KEK, so that\
    \ when the\n                first shared KEK is no longer valid the second key\
    \ can\n                be used.  If the GLA controls rekey, then it also\n   \
    \             indicates the number of shared KEKs the GLO wants\n            \
    \    outstanding at any one time.  See Sections 4.5 and 5 for\n              \
    \  more on rekey.\n            --- requestedAlgorithm indicates the algorithm\
    \ and any\n                parameters the GLO wants the GLA to use with the shared\n\
    \                KEK.  The parameters are conveyed via the\n                SMIMECapabilities\
    \ attribute (see [MSG]).  See Section 6\n                for more on algorithms.\n"
- title: 3.1.2.  Delete GL
  contents:
  - "3.1.2.  Delete GL\n   GLOs use glDelete to request that a GL be deleted from\
    \ the GLA.  The\n   glDelete control attribute has the syntax GeneralName.  The\
    \ glDelete\n   message MUST be signed by the GLO.  The name of the GL to be deleted\n\
    \   is included in GeneralName:\n   DeleteGL ::= GeneralName\n"
- title: 3.1.3.  Add GL Member
  contents:
  - "3.1.3.  Add GL Member\n   GLOs use the glAddMember to request addition of new\
    \ members, and\n   prospective GL members use the glAddMember to request their\
    \ own\n   addition to the GL.  The glAddMember message MUST be signed by either\n\
    \   the GLO or the prospective GL member.  The glAddMember control\n   attribute\
    \ has the syntax GLAddMember:\n   GLAddMember ::= SEQUENCE {\n     glName    GeneralName,\n\
    \     glMember  GLMember }\n   GLMember ::= SEQUENCE {\n     glMemberName    \
    \ GeneralName,\n     glMemberAddress  GeneralName OPTIONAL,\n     certificates\
    \     Certificates OPTIONAL }\n   The fields in GLAddMembers have the following\
    \ meaning:\n     - glName indicates the name of the GL to which the member should\
    \ be\n       added.\n     - glMember indicates the particulars for the GL member.\
    \  Both of\n       the following fields must be unique for a given GL:\n     \
    \   -- glMemberName indicates the name of the GL member.\n        -- glMemberAddress\
    \ indicates the GL member's address.  It MUST\n           be included.\n     \
    \      Note: In some instances, the glMemberName and glMemberAddress\n       \
    \    may be the same, but this is not always the case.\n        -- certificates\
    \ MUST be included.  It contains the following\n           three fields:\n   \
    \         --- certificates.pKC includes the member's encryption\n            \
    \    certificate.  It will be used, at least initially, to\n                encrypt\
    \ the shared KEK for that member.  If the message\n                is generated\
    \ by a prospective GL member, the pKC MUST be\n                included.  If the\
    \ message is generated by a GLO, the pKC\n                SHOULD be included.\n\
    \            --- certificates.aC MAY be included to convey any attribute\n   \
    \             certificate (see [ACPROF]) associated with the member's\n      \
    \          encryption certificate.\n            --- certificates.certPath MAY\
    \ also be included to convey\n                certificates that might aid the\
    \ recipient in\n                constructing valid certification paths for the\n\
    \                certificate provided in certificates.pKC and the\n          \
    \      attribute certificates provided in certificates.aC.\n                These\
    \ certificates are optional because they might\n                already be included\
    \ elsewhere in the message (e.g., in\n                the outer CMS layer).\n"
- title: 3.1.4.  Delete GL Member
  contents:
  - "3.1.4.  Delete GL Member\n   GLOs use the glDeleteMember to request deletion\
    \ of GL members, and GL\n   members use the glDeleteMember to request their own\
    \ removal from the\n   GL.  The glDeleteMember message MUST be signed by either\
    \ the GLO or\n   the GL member.  The glDeleteMember control attribute has the\
    \ syntax\n   GLDeleteMember:\n   GLDeleteMember ::= SEQUENCE {\n     glName  \
    \          GeneralName,\n     glMemberToDelete  GeneralName }\n   The fields in\
    \ GLDeleteMembers have the following meaning:\n     - glName indicates the name\
    \ of the GL from which the member should\n       be removed.\n     - glMemberToDelete\
    \ indicates the name or address of the member to\n       be deleted.\n"
- title: 3.1.5.  Rekey GL
  contents:
  - "3.1.5.  Rekey GL\n   GLOs use the glRekey to request a GL rekey.  The glRekey\
    \ message MUST\n   be signed by the GLO.  The glRekey control attribute has the\
    \ syntax\n   GLRekey:\n   GLRekey ::= SEQUENCE {\n     glName              GeneralName,\n\
    \     glAdministration    GLAdministration OPTIONAL,\n     glNewKeyAttributes\
    \  GLNewKeyAttributes OPTIONAL,\n     glRekeyAllGLKeys    BOOLEAN OPTIONAL }\n\
    \   GLNewKeyAttributes ::= SEQUENCE {\n     rekeyControlledByGLO       [0] BOOLEAN\
    \ OPTIONAL,\n     recipientsNotMutuallyAware [1] BOOLEAN OPTIONAL,\n     duration\
    \                   [2] INTEGER OPTIONAL,\n     generationCounter          [3]\
    \ INTEGER OPTIONAL,\n     requestedAlgorithm         [4] AlgorithmIdentifier OPTIONAL\
    \ }\n   The fields in GLRekey have the following meaning:\n     - glName indicates\
    \ the name of the GL to be rekeyed.\n     - glAdministration indicates if there\
    \ is any change to how the GL\n       should be administered.  See Section 3.1.1\
    \ for the three options.\n       This field is only included if there is a change\
    \ from the\n       previously registered glAdministration.\n     - glNewKeyAttributes\
    \ indicates whether the rekey of the GLO is\n       controlled by the GLA or GL,\
    \ what algorithm and parameters the\n       GLO wishes to use, the duration of\
    \ the key, and how many keys\n       will be issued.  The field is only included\
    \ if there is a change\n       from the previously registered glKeyAttributes.\n\
    \     - glRekeyAllGLKeys indicates whether the GLO wants all of the\n       outstanding\
    \ GL's shared KEKs rekeyed.  If it is set to TRUE then\n       all outstanding\
    \ KEKs MUST be issued.  If it is set to FALSE then\n       all outstanding KEKs\
    \ need not be reissued.\n"
- title: 3.1.6.  Add GL Owner
  contents:
  - "3.1.6.  Add GL Owner\n   GLOs use the glAddOwner to request that a new GLO be\
    \ allowed to\n   administer the GL.  The glAddOwner message MUST be signed by\
    \ a\n   registered GLO.  The glAddOwner control attribute has the syntax\n   GLOwnerAdministration:\n\
    \   GLOwnerAdministration ::= SEQUENCE {\n     glName       GeneralName,\n   \
    \  glOwnerInfo  GLOwnerInfo }\n   The fields in GLAddOwners have the following\
    \ meaning:\n     - glName indicates the name of the GL to which the new GLO should\n\
    \       be associated.\n     - glOwnerInfo indicates the name, address, and certificates\
    \ of the\n       new GLO.  As this message includes names of new GLOs, the\n \
    \      certificates.pKC MUST be included, and it MUST include the\n       encryption\
    \ certificate of the new GLO.\n"
- title: 3.1.7.  Remove GL Owner
  contents:
  - "3.1.7.  Remove GL Owner\n   GLOs use the glRemoveOwner to request that a GLO\
    \ be disassociated\n   with the GL.  The glRemoveOwner message MUST be signed\
    \ by a\n   registered GLO.  The glRemoveOwner control attribute has the syntax\n\
    \   GLOwnerAdministration:\n   GLOwnerAdministration ::= SEQUENCE {\n     glName\
    \       GeneralName,\n     glOwnerInfo  GLOwnerInfo }\n   The fields in GLRemoveOwners\
    \ have the following meaning:\n     - glName indicates the name of the GL to which\
    \ the GLO should be\n       disassociated.\n     - glOwnerInfo indicates the name\
    \ and address of the GLO to be\n       removed.  The certificates field SHOULD\
    \ be omitted, as it will be\n       ignored.\n"
- title: 3.1.8.  GL Key Compromise
  contents:
  - "3.1.8.  GL Key Compromise\n   GL members and GLOs use glkCompromise to indicate\
    \ that the shared KEK\n   possessed has been compromised.  The glKeyCompromise\
    \ control\n   attribute has the syntax GeneralName.  This message is always\n\
    \   redirected by the GLA to the GLO for further action.  The\n   glkCompromise\
    \ MAY be included in an EnvelopedData generated with the\n   compromised shared\
    \ KEK.  The name of the GL to which the compromised\n   key is associated is placed\
    \ in GeneralName:\n   GLKCompromise ::= GeneralName\n"
- title: 3.1.9.  GL Key Refresh
  contents:
  - "3.1.9.  GL Key Refresh\n   GL members use the glkRefresh to request that the\
    \ shared KEK be\n   redistributed to them.  The glkRefresh control attribute has\
    \ the\n   syntax GLKRefresh.\n   GLKRefresh ::= SEQUENCE {\n     glName  GeneralName,\n\
    \     dates   SEQUENCE SIZE (1..MAX) OF Date }\n   Date ::= SEQUENCE {\n     start\
    \ GeneralizedTime,\n     end   GeneralizedTime OPTIONAL }\n   The fields in GLKRefresh\
    \ have the following meaning:\n     - glName indicates the name of the GL for\
    \ which the GL member wants\n       shared KEKs.\n     - dates indicates a date\
    \ range for keys the GL member wants.  The\n       start field indicates the first\
    \ date the GL member wants and the\n       end field indicates the last date.\
    \  The end date MAY be omitted\n       to indicate the GL member wants all keys\
    \ from the specified start\n       date to the current date.  Note that a procedural\
    \ mechanism is\n       needed to restrict users from accessing messages that they\
    \ are\n       not allowed to access.\n"
- title: 3.1.10.  GLA Query Request and Response
  contents:
  - "3.1.10.  GLA Query Request and Response\n   There are situations where GLOs and\
    \ GL members may need to determine\n   some information from the GLA about the\
    \ GL.  GLOs and GL members use\n   the glaQueryRequest, defined in Section 3.1.10.1,\
    \ to request\n   information and GLAs use the glaQueryResponse, defined in Section\n\
    \   3.1.10.2, to return the requested information.  Section 3.1.10.3\n   includes\
    \ one request and response type and value; others may be\n   defined in additional\
    \ documents.\n"
- title: 3.1.10.1.  GLA Query Request
  contents:
  - "3.1.10.1.  GLA Query Request\n   GLOs and GL members use the glaQueryRequest\
    \ to ascertain information\n   about the GLA.  The glaQueryRequest control attribute\
    \ has the syntax\n   GLAQueryRequest:\n   GLAQueryRequest ::= SEQUENCE {\n   \
    \  glaRequestType   OBJECT IDENTIFIER,\n     glaRequestValue  ANY DEFINED BY glaRequestType\
    \ }\n"
- title: 3.1.10.2.  GLA Query Response
  contents:
  - "3.1.10.2.  GLA Query Response\n   GLAs return the glaQueryResponse after receiving\
    \ a GLAQueryRequest.\n   The glaQueryResponse MUST be signed by a GLA.  The glaQueryResponse\n\
    \   control attribute has the syntax GLAQueryResponse:\n   GLAQueryResponse ::=\
    \ SEQUENCE {\n     glaResponseType   OBJECT IDENTIFIER,\n     glaResponseValue\
    \  ANY DEFINED BY glaResponseType }\n"
- title: 3.1.10.3.  Request and Response Types
  contents:
  - "3.1.10.3.  Request and Response Types\n   Requests and responses are registered\
    \ as a pair under the following\n   object identifier arc:\n   id-cmc-glaRR OBJECT\
    \ IDENTIFIER ::= { id-cmc 99 }\n   This document defines one request/response\
    \ pair for GL members and\n   GLOs to query the GLA for the list of algorithm\
    \ it supports.  The\n   following Object Identifier (OID) is included in the glaQueryType\n\
    \   field:\n   id-cmc-gla-skdAlgRequest OBJECT IDENTIFIER ::={ id-cmc-glaRR 1\
    \ }\n   SKDAlgRequest ::= NULL\n   If the GLA supports GLAQueryRequest and GLAQueryResponse\
    \ messages,\n   the GLA may return the following OID in the glaQueryType field:\n\
    \   id-cmc-gla-skdAlgResponse OBJECT IDENTIFIER ::= { id-cmc-glaRR 2 }\n   The\
    \ glaQueryValue has the form of the smimeCapabilities attributes as\n   defined\
    \ in [MSG].\n"
- title: 3.1.11.  Provide Cert
  contents:
  - "3.1.11.  Provide Cert\n   GLAs and GLOs use the glProvideCert to request that\
    \ a GL member\n   provide an updated or new encryption certificate.  The glProvideCert\n\
    \   message MUST be signed by either GLA or GLO.  If the GL member's PKC\n   has\
    \ been revoked, the GLO or GLA MUST NOT use it to generate the\n   EnvelopedData\
    \ that encapsulates the glProvideCert request.  The\n   glProvideCert control\
    \ attribute has the syntax GLManageCert:\n   GLManageCert ::= SEQUENCE {\n   \
    \  glName    GeneralName,\n     glMember  GLMember }\n   The fields in GLManageCert\
    \ have the following meaning:\n     - glName indicates the name of the GL to which\
    \ the GL member's new\n       certificate is to be associated.\n     - glMember\
    \ indicates particulars for the GL member:\n        -- glMemberName indicates\
    \ the GL member's name.\n        -- glMemberAddress indicates the GL member's\
    \ address.  It MAY be\n           omitted.\n        -- certificates SHOULD be\
    \ omitted.\n"
- title: 3.1.12 Update Cert
  contents:
  - "3.1.12 Update Cert\n   GL members and GLOs use the glUpdateCert to provide a\
    \ new certificate\n   for the GL.  GL members can generate an unsolicited glUpdateCert\
    \ or\n   generate a response glUpdateCert as a result of receiving a\n   glProvideCert\
    \ message.  GL members MUST sign the glUpdateCert.  If\n   the GL member's encryption\
    \ certificate has been revoked, the GL\n   member MUST NOT use it to generate\
    \ the EnvelopedData that\n   encapsulates the glUpdateCert request or response.\
    \  The glUpdateCert\n   control attribute has the syntax GLManageCert:\n   GLManageCert\
    \ ::= SEQUENCE {\n     glName    GeneralName,\n     glMember  GLMember }\n   The\
    \ fields in GLManageCert have the following meaning:\n     - glName indicates\
    \ the name of the GL to which the GL member's new\n       certificate should be\
    \ associated.\n     - glMember indicates the particulars for the GL member:\n\
    \        -- glMemberName indicates the GL member's name.\n        -- glMemberAddress\
    \ indicates the GL member's address.  It MAY be\n           omitted.\n       \
    \ -- certificates MAY be omitted if the GLManageCert message is\n           sent\
    \ to request the GL member's certificate; otherwise, it\n           MUST be included.\
    \  It includes the following three fields:\n            --- certificates.pKC includes\
    \ the member's encryption\n                certificate that will be used to encrypt\
    \ the shared KEK\n                for that member.\n            --- certificates.aC\
    \ MAY be included to convey one or more\n                attribute certificates\
    \ associated with the member's\n                encryption certificate.\n    \
    \        --- certificates.certPath MAY also be included to convey\n          \
    \      certificates that might aid the recipient in\n                constructing\
    \ valid certification paths for the\n                certificate provided in certificates.pKC\
    \ and the\n                attribute certificates provided in certificates.aC.\n\
    \                These certificates are optional because they might\n        \
    \        already be included elsewhere in the message (e.g., in\n            \
    \    the outer CMS layer).\n"
- title: 3.1.13.  GL Key
  contents:
  - "3.1.13.  GL Key\n   The GLA uses the glKey to distribute the shared KEK.  The\
    \ glKey\n   message MUST be signed by the GLA.  The glKey control attribute has\n\
    \   the syntax GLKey:\n   GLKey ::= SEQUENCE {\n     glName        GeneralName,\n\
    \     glIdentifier  KEKIdentifier,      -- See [CMS]\n     glkWrapped    RecipientInfos,\
    \     -- See [CMS]\n     glkAlgorithm  AlgorithmIdentifier,\n     glkNotBefore\
    \  GeneralizedTime,\n     glkNotAfter   GeneralizedTime }\n   -- KEKIdentifier\
    \ is included only for illustrative purposes as\n   -- it is imported from [CMS].\n\
    \   KEKIdentifier ::= SEQUENCE {\n     keyIdentifier OCTET STRING,\n     date\
    \ GeneralizedTime OPTIONAL,\n     other OtherKeyAttribute OPTIONAL }\n   The fields\
    \ in GLKey have the following meaning:\n     - glName is the name of the GL.\n\
    \     - glIdentifier is the key identifier of the shared KEK.  See\n       Section\
    \ 6.2.3 of [CMS] for a description of the subfields.\n     - glkWrapped is the\
    \ wrapped shared KEK for the GL for a particular\n       duration.  The RecipientInfos\
    \ MUST be generated as specified in\n       Section 6.2 of [CMS].  The ktri RecipientInfo\
    \ choice MUST be\n       supported.  The key in the EncryptedKey field (i.e.,\
    \ the\n       distributed shared KEK) MUST be generated according to the\n   \
    \    section concerning random number generation in the security\n       considerations\
    \ of [CMS].\n     - glkAlgorithm identifies the algorithm with which the shared\
    \ KEK\n       is used.  Since no encrypted data content is being conveyed at\n\
    \       this point, the parameters encoded with the algorithm should be\n    \
    \   the structure defined for smimeCapabilities rather than encrypted\n      \
    \ content.\n     - glkNotBefore indicates the date at which the shared KEK is\n\
    \       considered valid.  GeneralizedTime values MUST be expressed in\n     \
    \  UTC (Zulu) and MUST include seconds (i.e., times are\n       YYYYMMDDHHMMSSZ),\
    \ even where the number of seconds is zero.\n       GeneralizedTime values MUST\
    \ NOT include fractional seconds.\n     - glkNotAfter indicates the date after\
    \ which the shared KEK is\n       considered invalid.  GeneralizedTime values\
    \ MUST be expressed in\n       UTC (Zulu) and MUST include seconds (i.e., times\
    \ are\n       YYYYMMDDHHMMSSZ), even where the number of seconds is zero.\n  \
    \     GeneralizedTime values MUST NOT include fractional seconds.\n   If the glKey\
    \ message is in response to a glUseKEK message:\n     - The GLA MUST generate\
    \ separate glKey messages for each recipient\n       if glUseKEK.glKeyAttributes.recipientsNotMutuallyAware\
    \ is set to\n       TRUE.  For each recipient, you want to generate a message\
    \ that\n       contains that recipient's key (i.e., one message with one\n   \
    \    attribute).\n     - The GLA MUST generate the requested number of glKey messages.\n\
    \       The value in glUseKEK.glKeyAttributes.generationCounter indicates\n  \
    \     the number of glKey messages requested.\n   If the glKey message is in response\
    \ to a glRekey message:\n     - The GLA MUST generate separate glKey messages\
    \ for each recipient\n       if glRekey.glNewKeyAttributes.recipientsNotMutuallyAware\
    \ is set\n       to TRUE.\n     - The GLA MUST generate the requested number of\
    \ glKey messages.\n       The value in glUseKEK.glKeyAttributes.generationCounter\
    \ indicates\n       the number of glKey messages requested.\n     - The GLA MUST\
    \ generate one glKey message for each outstanding\n       shared KEKs for the\
    \ GL when glRekeyAllGLKeys is set to TRUE.\n   If the glKey message was not in\
    \ response to a glRekey or glUseKEK\n   (e.g., where the GLA controls rekey):\n\
    \     - The GLA MUST generate separate glKey messages for each recipient\n   \
    \    when glUseKEK.glNewKeyAttributes.recipientsNotMutuallyAware that\n      \
    \ set up the GL was set to TRUE.\n     - The GLA MAY generate glKey messages prior\
    \ to the duration on the\n       last outstanding shared KEK expiring, where the\
    \ number of glKey\n       messages generated is generationCounter minus one (1).\
    \  Other\n       distribution mechanisms can also be supported to support this\n\
    \       functionality.\n"
- title: 3.2.  Use of CMC, CMS, and PKIX
  contents:
  - "3.2.  Use of CMC, CMS, and PKIX\n   The following sections outline the use of\
    \ CMC, CMS, and the PKIX\n   certificate and CRL profile.\n"
- title: 3.2.1.  Protection Layers
  contents:
  - "3.2.1.  Protection Layers\n   The following sections outline the protection required\
    \ for the\n   control attributes defined in this document.\n   Note: There are\
    \ multiple ways to encapsulate SignedData and\n   EnvelopedData.  The first is\
    \ to use a MIME wrapper around each\n   ContentInfo, as specified in [MSG].  The\
    \ second is not to use a MIME\n   wrapper around each ContentInfo, as specified\
    \ in Transporting S/MIME\n   Objects in X.400 [X400TRANS].\n"
- title: 3.2.1.1.  Minimum Protection
  contents:
  - "3.2.1.1.  Minimum Protection\n   At a minimum, a SignedData MUST protect each\
    \ request and response\n   encapsulated in PKIData and PKIResponse.  The following\
    \ is a\n   depiction of the minimum wrappings:\n   Minimum Protection\n   ------------------\n\
    \   SignedData\n    PKIData or PKIResponse\n     controlSequence\n   Prior to\
    \ taking any action on any request or response SignedData(s)\n   MUST be processed\
    \ according to [CMS].\n"
- title: 3.2.1.2.  Additional Protection
  contents:
  - "3.2.1.2.  Additional Protection\n   An additional EnvelopedData MAY also be used\
    \ to provide\n   confidentiality of the request and response.  An additional\n\
    \   SignedData MAY also be added to provide authentication and integrity\n   of\
    \ the encapsulated EnvelopedData.  The following is a depiction of\n   the optional\
    \ additional wrappings:\n                                  Authentication and\
    \ Integrity\n   Confidentiality Protection     of Confidentiality Protection\n\
    \   --------------------------     -----------------------------\n   EnvelopedData\
    \                  SignedData\n    SignedData                     EnvelopedData\n\
    \     PKIData or PKIResponse         SignedData\n      controlSequence       \
    \         PKIData or PKIResponse\n                                      controlSequence\n\
    \   If an incoming message is encrypted, the confidentiality of the\n   message\
    \ MUST be preserved.  All EnvelopedData objects MUST be\n   processed as specified\
    \ in [CMS].  If a SignedData is added over an\n   EnvelopedData, a ContentHints\
    \ attribute SHOULD be added.  See Section\n   2.9 of Extended Security Services\
    \ for S/MIME [ESS].\n   If the GLO or GL member applies confidentiality to a request,\
    \ the\n   EnvelopedData MUST include the GLA as a recipient.  If the GLA\n   forwards\
    \ the GL member request to the GLO, then the GLA MUST decrypt\n   the EnvelopedData\
    \ content, strip the confidentiality layer, and apply\n   its own confidentiality\
    \ layer as an EnvelopedData with the GLO as a\n   recipient.\n"
- title: 3.2.2.  Combining Requests and Responses
  contents:
  - "3.2.2.  Combining Requests and Responses\n   Multiple requests and responses\
    \ corresponding to a GL MAY be included\n   in one PKIData.controlSequence or\
    \ PKIResponse.controlSequence.\n   Requests and responses for multiple GLs MAY\
    \ be combined in one\n   PKIData or PKIResponse by using PKIData.cmsSequence and\n\
    \   PKIResponse.cmsSequence.  A separate cmsSequence MUST be used for\n   different\
    \ GLs.  That is, requests corresponding to two different GLs\n   are included\
    \ in different cmsSequences.  The following is a diagram\n   depicting multiple\
    \ requests and responses combined in one PKIData and\n   PKIResponse:\n      \
    \ Multiple Requests and Responses\n   Request                        Response\n\
    \   -------                        --------\n   SignedData                   \
    \   SignedData\n    PKIData                         PKIResponse\n     cmsSequence\
    \                     cmsSequence\n      SignedData                      SignedData\n\
    \       PKIData                         PKIResponse\n        controlSequence \
    \                controlSequence\n         One or more requests            One\
    \ or more responses\n         corresponding to one GL         corresponding to\
    \ one GL\n      SignedData                      SignedData\n       PKIData   \
    \                      PKIResponse\n        controlSequence                 controlSequence\n\
    \         One or more requests            One or more responses\n         corresponding\
    \ to another GL     corresponding to another GL\n   When applying confidentiality\
    \ to multiple requests and responses, all\n   of the requests/responses MAY be\
    \ included in one EnvelopedData.  The\n   following is a depiction:\n   Confidentiality\
    \ of Multiple Requests and Responses\n   Wrapped Together\n   ----------------\n\
    \   EnvelopedData\n    SignedData\n     PKIData\n      cmsSequence\n       SignedData\n\
    \        PKIResponse\n         controlSequence\n          One or more requests\n\
    \          corresponding to one GL\n       SignedData\n        PKIData\n     \
    \    controlSequence\n          One or more requests\n          corresponding\
    \ to one GL\n   Certain combinations of requests in one PKIData.controlSequence\
    \ and\n   one PKIResponse.controlSequence are not allowed.  The invalid\n   combinations\
    \ listed here MUST NOT be generated:\n      Invalid Combinations\n   ---------------------------\n\
    \   glUseKEK   & glDeleteMember\n   glUseKEK   & glRekey\n   glUseKEK   & glDelete\n\
    \   glDelete   & glAddMember\n   glDelete   & glDeleteMember\n   glDelete   &\
    \ glRekey\n   glDelete   & glAddOwner\n   glDelete   & glRemoveOwner\n   To avoid\
    \ unnecessary errors, certain requests and responses SHOULD be\n   processed prior\
    \ to others.  The following is the priority of message\n   processing, if not\
    \ listed it is an implementation decision as to\n   which to process first: glUseKEK\
    \ before glAddMember, glRekey before\n   glAddMember, and glDeleteMember before\
    \ glRekey.  Note that there is a\n   processing priority, but it does not imply\
    \ an ordering within the\n   content.\n"
- title: 3.2.3.  GLA Generated Messages
  contents:
  - "3.2.3.  GLA Generated Messages\n   When the GLA generates a success or fail message,\
    \ it generates one\n   for each request.  SKDFailInfo values of unsupportedDuration,\n\
    \   unsupportedDeliveryMethod, unsupportedAlgorithm, noGLONameMatch,\n   nameAlreadyInUse,\
    \ alreadyAnOwner, and notAnOwner are not returned to\n   GL members.\n   If GLKeyAttributes.recipientsNotMutuallyAware\
    \ is set to TRUE, a\n   separate PKIResponse.cMCStatusInfoExt and PKIData.glKey\
    \ MUST be\n   generated for each recipient.  However, it is valid to send one\n\
    \   message with multiple attributes to the same recipient.\n   If the GL has\
    \ multiple GLOs, the GLA MUST send cMCStatusInfoExt\n   messages to the requesting\
    \ GLO.  The mechanism to determine which GLO\n   made the request is beyond the\
    \ scope of this document.\n   If a GL is managed and the GLA receives a glAddMember,\n\
    \   glDeleteMember, or glkCompromise message, the GLA redirects the\n   request\
    \ to the GLO for review.  An additional, SignedData MUST be\n   applied to the\
    \ redirected request as follows:\n   GLA Forwarded Requests\n   ----------------------\n\
    \   SignedData\n    PKIData\n      cmsSequence\n        SignedData\n         PKIData\n\
    \          controlSequence\n"
- title: 3.2.4.  CMC Control Attributes and CMS Signed Attributes
  contents:
  - "3.2.4.  CMC Control Attributes and CMS Signed Attributes\n   CMC carries control\
    \ attributes as CMS signed attributes.  These\n   attributes are defined in [CMC]\
    \ and [CMS].  Some of these attributes\n   are REQUIRED; others are OPTIONAL.\
    \  The required attributes are as\n   follows: cMCStatusInfoExt transactionId,\
    \ senderNonce, recipientNonce,\n   queryPending, and signingTime.  Other attributes\
    \ can also be used;\n   however, their use is beyond the scope of this document.\
    \  The\n   following sections specify requirements in addition to those already\n\
    \   specified in [CMC] and [CMS].\n"
- title: 3.2.4.1.  Using cMCStatusInfoExt
  contents:
  - "3.2.4.1.  Using cMCStatusInfoExt\n   cMCStatusInfoExt is used by GLAs to indicate\
    \ to GLOs and GL members\n   that a request was unsuccessful.  Two classes of\
    \ failure codes are\n   used within this document.  Errors from the CMCFailInfo\
    \ list, found\n   in Section 5.1.4 of CMC, are encoded as defined in CMC.  Error\
    \ codes\n   defined in this document are encoded using the ExtendedFailInfo field\n\
    \   of the cmcStatusInfoExt structure.  If the same failure code applies\n   to\
    \ multiple commands, a single cmcStatusInfoExt structure can be used\n   with\
    \ multiple items in cMCStatusInfoExt.bodyList.  The GLA MAY also\n   return other\
    \ pertinent information in statusString.  The SKDFailInfo\n   object identifier\
    \ and value are:\n   id-cet-skdFailInfo OBJECT IDENTIFIER ::= { iso(1)\n     identified-organization(3)\
    \ dod(6) internet(1) security(5)\n     mechanisms(5) pkix(7) cet(15) skdFailInfo(1)\
    \ }\n   SKDFailInfo ::= INTEGER {\n     unspecified           (0),\n     closedGL\
    \              (1),\n     unsupportedDuration   (2),\n     noGLACertificate  \
    \    (3),\n     invalidCert           (4),\n     unsupportedAlgorithm  (5),\n\
    \     noGLONameMatch        (6),\n     invalidGLName         (7),\n     nameAlreadyInUse\
    \      (8),\n     noSpam                (9),\n   -- obsolete             (10),\n\
    \     alreadyAMember        (11),\n     notAMember            (12),\n     alreadyAnOwner\
    \        (13),\n     notAnOwner            (14) }\n   The values have the following\
    \ meaning:\n     - unspecified indicates that the GLA is unable or unwilling to\n\
    \       perform the requested action and does not want to indicate the\n     \
    \  reason.\n     - closedGL indicates that members can only be added or deleted\
    \ by\n       the GLO.\n     - unsupportedDuration indicates that the GLA does\
    \ not support\n       generating keys that are valid for the requested duration.\n\
    \     - noGLACertificate indicates that the GLA does not have a valid\n      \
    \ certificate.\n     - invalidCert indicates that the member's encryption certificate\n\
    \       was not verifiable (i.e., signature did not validate,\n       certificate's\
    \ serial number present on a CRL, the certificate\n       expired, etc.).\n  \
    \   - unsupportedAlgorithm indicates the GLA does not support the\n       requested\
    \ algorithm.\n     - noGLONameMatch indicates that one of the names in the certificate\n\
    \       used to sign a request does not match the name of a registered\n     \
    \  GLO.\n     - invalidGLName indicates that the GLA does not support the glName\n\
    \       present in the request.\n     - nameAlreadyInUse indicates that the glName\
    \ is already assigned on\n       the GLA.\n     - noSpam indicates that the prospective\
    \ GL member did not sign the\n       request (i.e., if the name in glMember.glMemberName\
    \ does not\n       match one of the names (either the subject distinguished name\
    \ or\n       one of the subject alternative names) in the certificate used to\n\
    \       sign the request).\n     - alreadyAMember indicates that the prospective\
    \ GL member is\n       already a GL member.\n     - notAMember indicates that\
    \ the prospective GL member to be deleted\n       is not presently a GL member.\n\
    \     - alreadyAnOwner indicates that the prospective GLO is already a\n     \
    \  GLO.\n     - notAnOwner indicates that the prospective GLO to be deleted is\n\
    \       not presently a GLO.\n   cMCStatusInfoExt is used by GLAs to indicate\
    \ to GLOs and GL members\n   that a request was successfully completed.  If the\
    \ request was\n   successful, the GLA returns a cMCStatusInfoExt response with\n\
    \   cMCStatus.success and optionally other pertinent information in\n   statusString.\n\
    \   When the GL is managed and the GLO has reviewed GL member initiated\n   glAddMember,\
    \ glDeleteMember, and glkComrpomise requests, the GLO uses\n   cMCStatusInfoExt\
    \ to indicate the success or failure of the request.\n   If the request is allowed,\
    \ cMCStatus.success is returned and\n   statusString is optionally returned to\
    \ convey additional information.\n   If the request is denied, cMCStatus.failed\
    \ is returned and\n   statusString is optionally returned to convey additional\
    \ information.\n   Additionally, the appropriate SKDFailInfo can be included in\n\
    \   cMCStatusInfoExt.extendedFailInfo.\n   cMCStatusInfoExt is used by GLOs, GLAs,\
    \ and GL members to indicate\n   that signature verification failed.  If the signature\
    \ failed to\n   verify over any control attribute except a cMCStatusInfoExt, a\n\
    \   cMCStatusInfoExt control attribute MUST be returned indicating\n   cMCStatus.failed\
    \ and otherInfo.failInfo.badMessageCheck.  If the\n   signature over the outermost\
    \ PKIData failed, the bodyList value is\n   zero (0).  If the signature over any\
    \ other PKIData failed, the\n   bodyList value is the bodyPartId value from the\
    \ request or response.\n   GLOs and GL members who receive cMCStatusInfoExt messages\
    \ whose\n   signatures are invalid SHOULD generate a new request to avoid\n  \
    \ badMessageCheck message loops.\n   cMCStatusInfoExt is also used by GLOs and\
    \ GLAs to indicate that a\n   request could not be performed immediately.  If\
    \ the request could not\n   be processed immediately by the GLA or GLO, the cMCStatusInfoExt\n\
    \   control attribute MUST be returned indicating cMCStatus.pending and\n   otherInfo.pendInfo.\
    \  When requests are redirected to the GLO for\n   approval (for managed lists),\
    \ the GLA MUST NOT return a\n   cMCStatusInfoExt indicating query pending.\n \
    \  cMCStatusInfoExt is also used by GLAs to indicate that a\n   glaQueryRequest\
    \ is not supported.  If the glaQueryRequest is not\n   supported, the cMCStatusInfoExt\
    \ control attribute MUST be returned\n   indicating cMCStatus.noSupport and statusString\
    \ is optionally\n   returned to convey additional information.\n   cMCStatusInfoExt\
    \ is also used by GL members, GLOs, and GLAs to\n   indicate that the signingTime\
    \ (see Section 3.2.4.3) is not close\n   enough to the locally specified time.\
    \  If the local time is not close\n   enough to the time specified in signingTime,\
    \ a cMCStatus.failed and\n   otherInfo.failInfo.badTime MAY be returned.\n"
- title: 3.2.4.2.  Using transactionId
  contents:
  - "3.2.4.2.  Using transactionId\n   transactionId MAY be included by GLOs, GLAs,\
    \ or GL members to\n   identify a given transaction.  All subsequent requests\
    \ and responses\n   related to the original request MUST include the same transactionId\n\
    \   control attribute.  If GL members include a transactionId and the\n   request\
    \ is redirected to the GLO, the GLA MAY include an additional\n   transactionId\
    \ in the outer PKIData.  If the GLA included an\n   additional transactionId in\
    \ the outer PKIData, when the GLO generates\n   a cMCStatusInfoExt response it\
    \ generates one for the GLA with the\n   GLA's transactionId and one for the GL\
    \ member with the GL member's\n   transactionId.\n"
- title: 3.2.4.3.  Using Nonces and signingTime
  contents:
  - "3.2.4.3.  Using Nonces and signingTime\n   The use of nonces (see Section 5.6\
    \ of [CMC]) and an indication of\n   when the message was signed (see Section\
    \ 11.3 of [CMS]) can be used\n   to provide application-level replay prevention.\n\
    \   To protect the GL, all messages MUST include the signingTime\n   attribute.\
    \  Message originators and recipients can then use the time\n   provided in this\
    \ attribute to determine whether they have previously\n   received the message.\n\
    \   If the originating message includes a senderNonce, the response to\n   the\
    \ message MUST include the received senderNonce value as the\n   recipientNonce\
    \ and a new value as the senderNonce value in the\n   response.\n   If a GLA aggregates\
    \ multiple messages together or forwards a message\n   to a GLO, the GLA MAY optionally\
    \ generate a new nonce value and\n   include that in the wrapping message.  When\
    \ the response comes back\n   from the GLO, the GLA builds a response to the originator(s)\
    \ of the\n   message(s) and deals with each of the nonce values from the\n   originating\
    \ messages.\n   For these attributes, it is necessary to maintain state information\n\
    \   on exchanges to compare one result to another.  The time period for\n   which\
    \ this information is maintained is a local policy.\n"
- title: 3.2.4.4.  CMC and CMS Attribute Support Requirements
  contents:
  - "3.2.4.4.  CMC and CMS Attribute Support Requirements\n   The following are the\
    \ implementation requirements for CMC control\n   attributes and CMS signed attributes\
    \ for an implementation to be\n   considered conformant to this specification:\n\
    \          Implementation Requirement     |\n      GLO    |      GLA      | GL\
    \ Member | Attribute\n    O    R   |  O    R    F  |  O    R   |\n   ---------\
    \ | ------------- | --------- | ----------\n   MUST MUST | MUST MUST  -  | MUST\
    \ MUST | cMCStatusInfoExt\n   MAY  MAY  | MUST MUST  -  | MAY  MAY  | transactionId\n\
    \   MAY  MAY  | MUST MUST  -  | MAY  MAY  | senderNonce\n   MAY  MAY  | MUST MUST\
    \  -  | MAY  MAY  | recepientNonce\n   MUST MUST | MUST MUST  -  | MUST MUST |\
    \ SKDFailInfo\n   MUST MUST | MUST MUST  -  | MUST MUST | signingTime\n"
- title: 3.2.5.  Resubmitted GL Member Messages
  contents:
  - "3.2.5.  Resubmitted GL Member Messages\n   When the GL is managed, the GLA forwards\
    \ the GL member requests to\n   the GLO for GLO approval by creating a new request\
    \ message containing\n   the GL member request(s) as a cmsSequence item.  If the\
    \ GLO approves\n   the request, it can either add a new layer of wrapping and\
    \ send it\n   back to the GLA or create a new message and send it to the GLA.\n\
    \   (Note in this case there are now 3 layers of PKIData messages with\n   appropriate\
    \ signing layers.)\n"
- title: 3.2.6.  PKIX Certificate and CRL Profile
  contents:
  - "3.2.6.  PKIX Certificate and CRL Profile\n   Signatures, certificates, and CRLs\
    \ are verified according to the PKIX\n   profile [PROFILE].\n   Name matching\
    \ is performed according to the PKIX profile [PROFILE].\n   All distinguished\
    \ name forms must follow the UTF8String convention\n   noted in the PKIX profile\
    \ [PROFILE].\n   A certificate per GL would be issued to the GLA.\n   GL policy\
    \ may mandate that the GL member's address be included in the\n   GL member's\
    \ certificate.\n"
- title: 4.  Administrative Messages
  contents:
  - "4.  Administrative Messages\n   There are a number of administrative messages\
    \ that must be exchanged\n   to manage a GL.  The following sections describe\
    \ each request and\n   response message combination in detail.  The procedures\
    \ defined in\n   this section are not prescriptive.\n"
- title: 4.1.  Assign KEK to GL
  contents:
  - "4.1.  Assign KEK to GL\n   Prior to generating a group key, a GL needs to be\
    \ set up and a shared\n   KEK assigned to the GL.  Figure 3 depicts the protocol\
    \ interactions\n   to set up and assign a shared KEK.  Note that error messages\
    \ are not\n   depicted in Figure 3.  Additionally, behavior for the optional\n\
    \   transactionId, senderNonce, and recipientNonce CMC control attributes\n  \
    \ is not addressed in these procedures.\n    +-----+  1     2  +-----+\n    |\
    \ GLA | <-------> | GLO |\n    +-----+           +-----+\n   Figure 3 - Create\
    \ Group List\n   The process is as follows:\n   1 - The GLO is the entity responsible\
    \ for requesting the creation of\n       the GL.  The GLO sends a\n       SignedData.PKIData.controlSequence.glUseKEK\
    \ request to the GLA (1\n       in Figure 3).  The GLO MUST include glName, glAddress,\n\
    \       glOwnerName, glOwnerAddress, and glAdministration.  The GLO MAY\n    \
    \   also include their preferences for the shared KEK in\n       glKeyAttributes\
    \ by indicating whether the GLO controls the rekey\n       in rekeyControlledByGLO,\
    \ whether separate glKey messages should\n       be sent to each recipient in\
    \ recipientsNotMutuallyAware, the\n       requested algorithm to be used with\
    \ the shared KEK in\n       requestedAlgorithm, the duration of the shared KEK,\
    \ and how many\n       shared KEKs should be initially distributed in generationCounter.\n\
    \       The GLO MUST also include the signingTime attribute with this\n      \
    \ request.\n     1.a - If the GLO knows of members to be added to the GL, the\n\
    \           glAddMember request(s) MAY be included in the same\n           controlSequence\
    \ as the glUseKEK request (see Section 3.2.2).\n           The GLO indicates the\
    \ same glName in the glAddMember request\n           as in glUseKEK.glInfo.glName.\
    \  Further glAddMember procedures\n           are covered in Section 4.3.\n  \
    \   1.b - The GLO can apply confidentiality to the request by\n           encapsulating\
    \ the SignedData.PKIData in an EnvelopedData (see\n           Section 3.2.1.2).\n\
    \     1.c - The GLO can also optionally apply another SignedData over the\n  \
    \         EnvelopedData (see Section 3.2.1.2).\n   2 - Upon receipt of the request,\
    \ the GLA checks the signingTime and\n       verifies the signature on the innermost\
    \ SignedData.PKIData.  If\n       an additional SignedData and/or EnvelopedData\
    \ encapsulates the\n       request (see Sections 3.2.1.2 and 3.2.2), the GLA verifies\
    \ the\n       outer signature(s) and/or decrypts the outer layer(s) prior to\n\
    \       verifying the signature on the innermost SignedData.\n     2.a - If the\
    \ signingTime attribute value is not within the locally\n           accepted time\
    \ window, the GLA MAY return a response\n           indicating cMCStatus.failed\
    \ and otherInfo.failInfo.badTime\n           and a signingTime attribute.\n  \
    \   2.b - Else if signature processing continues and if the signatures\n     \
    \      do not verify, the GLA returns a cMCStatusInfoExt response\n          \
    \ indicating cMCStatus.failed and\n           otherInfo.failInfo.badMessageCheck.\
    \  Additionally, a\n           signingTime attribute is included with the response.\n\
    \     2.c - Else if the signatures do verify but the GLA does not have a\n   \
    \        valid certificate, the GLA returns a cMCStatusInfoExt with\n        \
    \   cMCStatus.failed and otherInfo.extendedFailInfo.SKDFailInfo\n           value\
    \ of noValidGLACertificate.  Additionally, a signingTime\n           attribute\
    \ is included with the response.  Instead of\n           immediately returning\
    \ the error code, the GLA attempts to get\n           a certificate, possibly\
    \ using [CMC].\n     2.d - Else the signatures are valid and the GLA does have\
    \ a valid\n           certificate, the GLA checks that one of the names in the\n\
    \           certificate used to sign the request matches one of the names\n  \
    \         in glUseKEK.glOwnerInfo.glOwnerName.\n       2.d.1 - If the names do\
    \ not match, the GLA returns a response\n               indicating cMCStatusInfoExt\
    \ with cMCStatus.failed and\n               otherInfo.extendedFailInfo.SKDFailInfo\
    \ value of\n               noGLONameMatch.  Additionally, a signingTime attribute\
    \ is\n               included with the response.\n       2.d.2 - Else if the names\
    \ all match, the GLA checks that the\n               glName and glAddress are\
    \ not already in use.  The GLA\n               also checks any glAddMember included\
    \ within the\n               controlSequence with this glUseKEK.  Further processing\n\
    \               of the glAddMember is covered in Section 4.3.\n         2.d.2.a\
    \ - If the glName is already in use, the GLA returns a\n                   response\
    \ indicating cMCStatusInfoExt with\n                   cMCStatus.failed and\n\
    \                   otherInfo.extendedFailInfo.SKDFailInfo value of\n        \
    \           nameAlreadyInUse.  Additionally, a signingTime\n                 \
    \  attribute is included with the response.\n         2.d.2.b - Else if the requestedAlgorithm\
    \ is not supported, the\n                   GLA returns a response indicating\
    \ cMCStatusInfoExt\n                   with cMCStatus.failed and\n           \
    \        otherInfo.extendedFailInfo.SKDFailInfo value of\n                   unsupportedAlgorithm.\
    \  Additionally, a signingTime\n                   attribute is included with\
    \ the response.\n         2.d.2.c - Else if the duration cannot be supported,\
    \ determining\n                   this is beyond the scope of this document, the\
    \ GLA\n                   returns a response indicating cMCStatusInfoExt with\n\
    \                   cMCStatus.failed and\n                   otherInfo.extendedFailInfo.SKDFailInfo\
    \ value of\n                   unsupportedDuration.  Additionally, a signingTime\n\
    \                   attribute is included with the response.\n         2.d.2.d\
    \ - Else if the GL cannot be supported for other reasons,\n                  \
    \ which the GLA does not wish to disclose, the GLA\n                   returns\
    \ a response indicating cMCStatusInfoExt with\n                   cMCStatus.failed\
    \ and\n                   otherInfo.extendedFailInfo.SKDFailInfo value of\n  \
    \                 unspecified.  Additionally, a signingTime attribute\n      \
    \             is included with the response.\n         2.d.2.e - Else if the glName\
    \ is not already in use, the\n                   duration can be supported, and\
    \ the requestedAlgorithm\n                   is supported, the GLA MUST return\
    \ a cMCStatusInfoExt\n                   indicating cMCStatus.success and a signingTime\n\
    \                   attribute. (2 in Figure 3).  The GLA also takes\n        \
    \           administrative actions, which are beyond the scope of\n          \
    \         this document, to store the glName, glAddress,\n                   glKeyAttributes,\
    \ glOwnerName, and glOwnerAddress.\n                   The GLA also sends a glKey\
    \ message as described in\n                   section 5.\n           2.d.2.e.1\
    \ - The GLA can apply confidentiality to the response\n                      \
    \ by encapsulating the SignedData.PKIResponse in an\n                       EnvelopedData\
    \ if the request was encapsulated in\n                       an EnvelopedData\
    \ (see Section 3.2.1.2).\n           2.d.2.e.2 - The GLA can also optionally apply\
    \ another\n                       SignedData over the EnvelopedData (see Section\n\
    \                       3.2.1.2).\n   3 - Upon receipt of the cMCStatusInfoExt\
    \ responses, the GLO checks\n       the signingTime and verifies the GLA signature(s).\
    \  If an\n       additional SignedData and/or EnvelopedData encapsulates the\n\
    \       response (see Section 3.2.1.2 or 3.2.2), the GLO verifies the\n      \
    \ outer signature and/or decrypts the outer layer prior to\n       verifying the\
    \ signature on the innermost SignedData.\n     3.a - If the signingTime attribute\
    \ value is not within the locally\n           accepted time window, the GLO MAY\
    \ return a response\n           indicating cMCStatus.failed and otherInfo.failInfo.badTime\n\
    \           and a signingTime attribute.\n     3.b - Else if signature processing\
    \ continues and if the signatures\n           do verify, the GLO MUST check that\
    \ one of the names in the\n           certificate used to sign the response matches\
    \ the name of the\n           GL.\n       3.b.1 - If the name of the GL does not\
    \ match the name present in\n               the certificate used to sign the message,\
    \ the GLO should\n               not believe the response.\n       3.b.2 - Else\
    \ if the name of the GL does match the name present in\n               the certificate\
    \ and:\n         3.b.2.a - If the signatures do verify and the response was\n\
    \                   cMCStatusInfoExt indicating cMCStatus.success, the\n     \
    \              GLO has successfully created the GL.\n         3.b.2.b - Else if\
    \ the signatures are valid and the response is\n                   cMCStatusInfoExt.cMCStatus.failed\
    \ with any reason,\n                   the GLO can reattempt to create the GL\
    \ using the\n                   information provided in the response.  The GLO\
    \ can\n                   also use the glaQueryRequest to determine the\n    \
    \               algorithms and other characteristics supported by the\n      \
    \             GLA (see Section 4.9).\n"
- title: 4.2.  Delete GL from GLA
  contents:
  - "4.2.  Delete GL from GLA\n   From time to time, there are instances when a GL\
    \ is no longer needed.\n   In this case, the GLO deletes the GL.  Figure 4 depicts\
    \ the protocol\n   interactions to delete a GL.  Note that behavior for the optional\n\
    \   transactionId, senderNonce, and recipientNonce CMC control attributes\n  \
    \ is not addressed in these procedures.\n       +-----+   1    2  +-----+\n  \
    \     | GLA | <-------> | GLO |\n       +-----+           +-----+\n      Figure\
    \ 4 - Delete Group List\n   The process is as follows:\n   1 - The GLO is responsible\
    \ for requesting the deletion of the GL.\n       The GLO sends a SignedData.PKIData.controlSequence.glDelete\n\
    \       request to the GLA (1 in Figure 4).  The name of the GL to be\n      \
    \ deleted is included in GeneralName.  The GLO MUST also include\n       the signingTime\
    \ attribute and can also include a transactionId\n       and senderNonce attributes.\n\
    \     1.a - The GLO can optionally apply confidentiality to the request\n    \
    \       by encapsulating the SignedData.PKIData in an EnvelopedData\n        \
    \   (see Section 3.2.1.2).\n     1.b - The GLO MAY optionally apply another SignedData\
    \ over the\n           EnvelopedData (see Section 3.2.1.2).\n   2 - Upon receipt\
    \ of the request, the GLA checks the signingTime and\n       verifies the signature\
    \ on the innermost SignedData.PKIData.  If\n       an additional SignedData and/or\
    \ EnvelopedData encapsulates the\n       request (see Section 3.2.1.2 or 3.2.2),\
    \ the GLA verifies the\n       outer signature and/or decrypts the outer layer\
    \ prior to\n       verifying the signature on the innermost SignedData.\n    \
    \ 2.a - If the signingTime attribute value is not within the locally\n       \
    \    accepted time window, the GLA MAY return a response\n           indicating\
    \ cMCStatus.failed and otherInfo.failInfo.badTime\n           and a signingTime\
    \ attribute.\n     2.b - Else if signature processing continues and if the signatures\n\
    \           cannot be verified, the GLA returns a cMCStatusInfoExt\n         \
    \  response indicating cMCStatus.failed and\n           otherInfo.failInfo.badMessageCheck.\
    \  Additionally, a\n           signingTime attribute is included with the response.\n\
    \     2.c - Else if the signatures verify, the GLA makes sure the GL is\n    \
    \       supported by checking the name of the GL matches a glName\n          \
    \ stored on the GLA.\n       2.c.1 - If the glName is not supported by the GLA,\
    \ the GLA\n               returns a response indicating cMCStatusInfoExt with\n\
    \               cMCStatus.failed and\n               otherInfo.extendedFailInfo.SKDFailInfo\
    \ value of\n               invalidGLName.  Additionally, a signingTime attribute\
    \ is\n               included with the response.\n       2.c.2 - Else if the glName\
    \ is supported by the GLA, the GLA\n               ensures that a registered GLO\
    \ signed the glDelete request\n               by checking if one of the names\
    \ present in the digital\n               signature certificate used to sign the\
    \ glDelete request\n               matches a registered GLO.\n         2.c.2.a\
    \ - If the names do not match, the GLA returns a response\n                  \
    \ indicating cMCStatusInfoExt with cMCStatus.failed and\n                   otherInfo.extendedFailInfo.SKDFailInfo\
    \ value of\n                   noGLONameMatch.  Additionally, a signingTime\n\
    \                   attribute is included with the response.\n         2.c.2.b\
    \ - Else if the names do match, but the GL cannot be\n                   deleted\
    \ for other reasons, which the GLA does not\n                   wish to disclose,\
    \ the GLA returns a response\n                   indicating cMCStatusInfoExt with\
    \ cMCStatus.failed and\n                   otherInfo.extendedFailInfo.SKDFailInfo\
    \ value of\n                   unspecified.  Additionally, a signingTime attribute\n\
    \                   is included with the response.  Actions beyond the\n     \
    \              scope of this document must then be taken to delete\n         \
    \          the GL from the GLA.\n         2.c.2.c - Else if the names do match,\
    \ the GLA returns a\n                   cMCStatusInfoExt indicating cMCStatus.success\
    \ and a\n                   signingTime attribute (2 in Figure 4).  The GLA ought\n\
    \                   not accept further requests for member additions,\n      \
    \             member deletions, or group rekeys for this GL.\n           2.c.2.c.1\
    \ - The GLA can apply confidentiality to the response\n                      \
    \ by encapsulating the SignedData.PKIResponse in an\n                       EnvelopedData\
    \ if the request was encapsulated in\n                       an EnvelopedData\
    \ (see Section 3.2.1.2).\n           2.c.2.c.2 - The GLA MAY optionally apply\
    \ another SignedData\n                       over the EnvelopedData (see Section\
    \ 3.2.1.2).\n   3 - Upon receipt of the cMCStatusInfoExt response, the GLO checks\
    \ the\n       signingTime and verifies the GLA signature(s).  If an additional\n\
    \       SignedData and/or EnvelopedData encapsulates the response (see\n     \
    \  Section 3.2.1.2 or 3.2.2), the GLO verifies the outer signature\n       and/or\
    \ decrypts the outer layer prior to verifying the signature\n       on the innermost\
    \ SignedData.\n     3.a - If the signingTime attribute value is not within the\
    \ locally\n           accepted time window, the GLO MAY return a response\n  \
    \         indicating cMCStatus.failed and otherInfo.failInfo.badTime\n       \
    \    and a signingTime attribute.\n     3.b - Else if signature processing continues\
    \ and if the signatures\n           verify, the GLO checks that one of the names\
    \ in the\n           certificate used to sign the response matches the name of\
    \ the\n           GL.\n       3.b.1 - If the name of the GL does not match the\
    \ name present in\n               the certificate used to sign the message, the\
    \ GLO should\n               not believe the response.\n       3.b.2 - Else if\
    \ the name of the GL does match the name present in\n               the certificate\
    \ and:\n         3.b.2.a - If the signatures verify and the response was\n   \
    \                cMCStatusInfoExt indicating cMCStatus.success, the\n        \
    \           GLO has successfully deleted the GL.\n         3.b.2.b - Else if the\
    \ signatures do verify and the response was\n                   cMCStatusInfoExt.cMCStatus.failed\
    \ with any reason,\n                   the GLO can reattempt to delete the GL\
    \ using the\n                   information provided in the response.\n"
- title: 4.3.  Add Members to GL
  contents:
  - "4.3.  Add Members to GL\n   To add members to GLs, either the GLO or prospective\
    \ members use the\n   glAddMember request.  The GLA processes GLO and prospective\
    \ GL member\n   requests differently though.  GLOs can submit the request at any\
    \ time\n   to add members to the GL, and the GLA, once it has verified the\n \
    \  request came from a registered GLO, should process it.  If a\n   prospective\
    \ member sends the request, the GLA needs to determine how\n   the GL is administered.\
    \  When the GLO initially configured the GL, it\n   set the GL to be unmanaged,\
    \ managed, or closed (see Section 3.1.1).\n   In the unmanaged case, the GLA merely\
    \ processes the member's request.\n   In the managed case, the GLA forwards the\
    \ requests from the\n   prospective members to the GLO for review.  Where there\
    \ are multiple\n   GLOs for a GL, which GLO the request is forwarded to is beyond\
    \ the\n   scope of this document.  The GLO reviews the request and either\n  \
    \ rejects it or submits a reformed request to the GLA.  In the closed\n   case,\
    \ the GLA will not accept requests from prospective members.  The\n   following\
    \ sections describe the processing for the GLO(s), GLA, and\n   prospective GL\
    \ members depending on where the glAddMeber request\n   originated, either from\
    \ a GLO or from prospective members.  Figure 5\n   depicts the protocol interactions\
    \ for the three options.  Note that\n   the error messages are not depicted. \
    \ Additionally, note that\n   behavior for the optional transactionId, senderNonce,\
    \ and\n   recipientNonce CMC control attributes is not addressed in these\n  \
    \ procedures.\n      +-----+  2,B{A}              3  +----------+\n      | GLO\
    \ | <--------+    +-------> | Member 1 |\n      +-----+          |    |      \
    \   +----------+\n               1       |    |\n      +-----+ <--------+    |\
    \      3  +----------+\n      | GLA |  A            +-------> |   ...    |\n \
    \     +-----+ <-------------+         +----------+\n                         \
    \   |\n                            |      3  +----------+\n                  \
    \          +-------> | Member n |\n                                      +----------+\n\
    \         Figure 5 - Member Addition\n   An important decision that needs to be\
    \ made on a group-by-group basis\n   is whether to rekey the group every time\
    \ a new member is added.\n   Typically, unmanaged GLs should not be rekeyed when\
    \ a new member is\n   added, as the overhead associated with rekeying the group\
    \ becomes\n   prohibitive, as the group becomes large.  However, managed and closed\n\
    \   GLs can be rekeyed to maintain the confidentiality of the traffic\n   sent\
    \ by group members.  An option to rekeying managed or closed GLs\n   when a member\
    \ is added is to generate a new GL with a different group\n   key.  Group rekeying\
    \ is discussed in Sections 4.5 and 5.\n"
- title: 4.3.1.  GLO Initiated Additions
  contents:
  - "4.3.1.  GLO Initiated Additions\n   The process for GLO initiated glAddMember\
    \ requests is as follows:\n   1 - The GLO collects the pertinent information for\
    \ the member(s) to\n       be added (this may be done through an out-of-bands\
    \ means).  The\n       GLO then sends a SignedData.PKIData.controlSequence with\
    \ a\n       separate glAddMember request for each member to the GLA (1 in\n  \
    \     Figure 5).  The GLO includes the GL name in glName, the member's\n     \
    \  name in glMember.glMemberName, the member's address in\n       glMember.glMemberAddress,\
    \ and the member's encryption certificate\n       in glMember.certificates.pKC.\
    \  The GLO can also include any\n       attribute certificates associated with\
    \ the member's encryption\n       certificate in glMember.certificates.aC, and\
    \ the certification\n       path associated with the member's encryption and attribute\n\
    \       certificates in glMember.certificates.certPath.  The GLO MUST\n      \
    \ also include the signingTime attribute with this request.\n     1.a - The GLO\
    \ can optionally apply confidentiality to the request\n           by encapsulating\
    \ the SignedData.PKIData in an EnvelopedData\n           (see Section 3.2.1.2).\n\
    \     1.b - The GLO can also optionally apply another SignedData over the\n  \
    \         EnvelopedData (see Section 3.2.1.2).\n   2 - Upon receipt of the request,\
    \ the GLA checks the signingTime and\n       verifies the signature on the innermost\
    \ SignedData.PKIData.  If\n       an additional SignedData and/or EnvelopedData\
    \ encapsulates the\n       request (see Section 3.2.1.2 or 3.2.2), the GLA verifies\
    \ the\n       outer signature and/or decrypts the outer layer prior to\n     \
    \  verifying the signature on the innermost SignedData.\n     2.a - If the signingTime\
    \ attribute value is not within the locally\n           accepted time window,\
    \ the GLA MAY return a response\n           indicating cMCStatus.failed and otherInfo.failInfo.badTime\n\
    \           and a signingTime attribute.\n     2.b - Else if signature processing\
    \ continues and if the signatures\n           cannot be verified, the GLA returns\
    \ a cMCStatusInfoExt\n           response indicating cMCStatus.failed and\n  \
    \         otherInfo.failInfo.badMessageCheck.  Additionally, a\n           signingTime\
    \ attribute is included with the response.\n     2.c - Else if the signatures\
    \ verify, the glAddMember request is\n           included in a controlSequence\
    \ with the glUseKEK request, and\n           the processing in Section 4.1 item\
    \ 2.d is successfully\n           completed, the GLA returns a cMCStatusInfoExt\
    \ indicating\n           cMCStatus.success and a signingTime attribute (2 in Figure\n\
    \           5).\n       2.c.1 - The GLA can apply confidentiality to the response\
    \ by\n               encapsulating the SignedData.PKIData in an EnvelopedData\n\
    \               if the request was encapsulated in an EnvelopedData (see\n   \
    \            Section 3.2.1.2).\n       2.c.2 - The GLA can also optionally apply\
    \ another SignedData over\n               the EnvelopedData (see Section 3.2.1.2).\n\
    \     2.d - Else if the signatures verify and the GLAddMember request is\n   \
    \        not included in a controlSequence with the GLCreate request,\n      \
    \     the GLA makes sure the GL is supported by checking that the\n          \
    \ glName matches a glName stored on the GLA.\n       2.d.1 - If the glName is\
    \ not supported by the GLA, the GLA\n               returns a response indicating\
    \ cMCStatusInfoExt with\n               cMCStatus.failed and\n               otherInfo.extendedFailInfo.SKDFailInfo\
    \ value of\n               invalidGLName.  Additionally, a signingTime attribute\
    \ is\n               included with the response.\n       2.d.2 - Else if the glName\
    \ is supported by the GLA, the GLA\n               checks to see if the glMemberName\
    \ is present on the GL.\n         2.d.2.a - If the glMemberName is present on\
    \ the GL, the GLA\n                   returns a response indicating cMCStatusInfoExt\
    \ with\n                   cMCStatus.failed and\n                   otherInfo.extendedFailInfo.SKDFailInfo\
    \ value of\n                   alreadyAMember.  Additionally, a signingTime\n\
    \                   attribute is included with the response.\n         2.d.2.b\
    \ - Else if the glMemberName is not present on the GL,\n                   the\
    \ GLA checks how the GL is administered.\n           2.d.2.b.1 - If the GL is\
    \ closed, the GLA checks that a\n                       registered GLO signed\
    \ the request by checking\n                       that one of the names in the\
    \ digital signature\n                       certificate used to sign the request\
    \ matches a\n                       registered GLO.\n             2.d.2.b.1.a\
    \ - If the names do not match, the GLA returns a\n                           response\
    \ indicating cMCStatusInfoExt with\n                           cMCStatus.failed\
    \ and\n                           otherInfo.extendedFailInfo.SKDFailInfo value\n\
    \                           of noGLONameMatch.  Additionally, a\n            \
    \               signingTime attribute is included with the\n                 \
    \          response.\n             2.d.2.b.1.b - Else if the names match, the\
    \ GLA verifies the\n                           member's encryption certificate.\n\
    \               2.d.2.b.1.b.1 - If the member's encryption certificate\n     \
    \                          cannot be verified, the GLA can return a\n        \
    \                       response indicating cMCStatusInfoExt with\n          \
    \                     cMCStatus.failed and\n                               otherInfo.extendedFailInfo.SKDFailInfo\n\
    \                               value of invalidCert to the GLO.\n           \
    \                    Additionally, a signingTime attribute is\n              \
    \                 included with the response.  If the GLA\n                  \
    \             does not return a\n                               cMCStatusInfoExt.cMCStatus.failed\n\
    \                               response, the GLA issues a glProvideCert\n   \
    \                            request (see Section 4.10).\n               2.d.2.b.1.b.2\
    \ - Else if the member's certificate\n                               verifies,\
    \ the GLA returns a\n                               cMCStatusInfoExt indicating\n\
    \                               cMCStatus.success and a signingTime\n        \
    \                       attribute (2 in Figure 5).  The GLA also\n           \
    \                    takes administrative actions, which are\n               \
    \                beyond the scope of this document, to add\n                 \
    \              the member to the GL stored on the GLA.\n                     \
    \          The GLA also distributes the shared KEK\n                         \
    \      to the member via the mechanism described\n                           \
    \    in Section 5.\n                 2.d.2.b.1.b.2.a - The GLA applies confidentiality\
    \ to\n                                   the response by encapsulating the\n \
    \                                  SignedData.PKIData in an\n                \
    \                   EnvelopedData if the request was\n                       \
    \            encapsulated in an EnvelopedData (see\n                         \
    \          Section 3.2.1.2).\n                 2.d.2.b.1.b.2.b - The GLA can also\
    \ optionally apply\n                                   another SignedData over\
    \ the\n                                   EnvelopedData (see Section 3.2.1.2).\n\
    \           2.d.2.b.2 - Else if the GL is managed, the GLA checks that\n     \
    \                  either a registered GLO or the prospective member\n       \
    \                signed the request.  For GLOs, one of the names\n           \
    \            in the certificate used to sign the request needs\n             \
    \          to match a registered GLO.  For the prospective\n                 \
    \      member, the name in glMember.glMemberName needs\n                     \
    \  to match one of the names in the certificate used\n                       to\
    \ sign the request.\n             2.d.2.b.2.a - If the signer is neither a registered\
    \ GLO nor\n                           the prospective GL member, the GLA returns\
    \ a\n                           response indicating cMCStatusInfoExt with\n  \
    \                         cMCStatus.failed and\n                           otherInfo.extendedFailInfo.SKDFailInfo\
    \ value\n                           of noSpam.  Additionally, a signingTime\n\
    \                           attribute is included with the response.\n       \
    \      2.d.2.b.2.b - Else if the signer is a registered GLO, the\n           \
    \                GLA verifies the member's encryption\n                      \
    \     certificate.\n               2.d.2.b.2.b.1 - If the member's certificate\
    \ cannot be\n                               verified, the GLA can return a response\n\
    \                               indicating cMCStatusInfoExt with\n           \
    \                    cMCStatus.failed and\n                               otherInfo.extendedFailInfo.SKDFailInfo\n\
    \                               value of invalidCert.  Additionally, a\n     \
    \                          signingTime attribute is included with\n          \
    \                     the response.  If the GLA does not return\n            \
    \                   a cMCStatus.failed response, the GLA MUST\n              \
    \                 issue a glProvideCert request (see\n                       \
    \        Section 4.10).\n               2.d.2.b.2.b.2 - Else if the member's certificate\n\
    \                               verifies, the GLA MUST return a\n            \
    \                   cMCStatusInfoExt indicating\n                            \
    \   cMCStatus.success and a signingTime\n                               attribute\
    \ to the GLO (2 in Figure 5).\n                               The GLA also takes\
    \ administrative\n                               actions, which are beyond the\
    \ scope of\n                               this document, to add the member to\
    \ the\n                               GL stored on the GLA.  The GLA also\n  \
    \                             distributes the shared KEK to the member\n     \
    \                          via the mechanism described in Section 5.\n       \
    \                        The GL policy may mandate that the GL\n             \
    \                  member's address be included in the GL\n                  \
    \             member's certificate.\n                 2.d.2.b.2.b.2.a - The GLA\
    \ applies confidentiality to\n                                   the response\
    \ by encapsulating the\n                                   SignedData.PKIData\
    \ in an\n                                   EnvelopedData if the request was\n\
    \                                   encapsulated in an EnvelopedData (see\n  \
    \                                 Section 3.2.1.2).\n                 2.d.2.b.2.b.2.b\
    \ - The GLA can also optionally apply\n                                   another\
    \ SignedData over the\n                                   EnvelopedData (see Section\
    \ 3.2.1.2).\n             2.d.2.b.2.c - Else if the signer is the prospective\
    \ member,\n                           the GLA forwards the glAddMember request\
    \ (see\n                           Section 3.2.3) to a registered GLO (B{A} in\n\
    \                           Figure 5).  If there is more than one\n          \
    \                 registered GLO, the GLO to which the request\n             \
    \              is forwarded is beyond the scope of this\n                    \
    \       document.  Further processing of the\n                           forwarded\
    \ request by GLOs is addressed in 3\n                           of Section 4.3.2.\n\
    \               2.d.2.b.2.c.1 - The GLA applies confidentiality to the\n     \
    \                          forwarded request by encapsulating the\n          \
    \                     SignedData.PKIData in an EnvelopedData if\n            \
    \                   the original request was encapsulated in\n               \
    \                an EnvelopedData (see Section 3.2.1.2).\n               2.d.2.b.2.c.2\
    \ - The GLA can also optionally apply another\n                              \
    \ SignedData over the EnvelopedData (see\n                               Section\
    \ 3.2.1.2).\n           2.d.2.b.3 - Else if the GL is unmanaged, the GLA checks\
    \ that\n                       either a registered GLO or the prospective member\n\
    \                       signed the request.  For GLOs, one of the names\n    \
    \                   in the certificate used to sign the request needs\n      \
    \                 to match the name of a registered GLO.  For the\n          \
    \             prospective member, the name in\n                       glMember.glMemberName\
    \ needs to match one of the\n                       names in the certificate used\
    \ to sign the\n                       request.\n             2.d.2.b.3.a - If\
    \ the signer is neither a registered GLO nor\n                           the prospective\
    \ member, the GLA returns a\n                           response indicating cMCStatusInfoExt\
    \ with\n                           cMCStatus.failed and\n                    \
    \       otherInfo.extendedFailInfo.SKDFailInfo value\n                       \
    \    of noSpam.  Additionally, a signingTime\n                           attribute\
    \ is included with the response.\n             2.d.2.b.3.b - Else if the signer\
    \ is either a registered GLO\n                           or the prospective member,\
    \ the GLA verifies\n                           the member's encryption certificate.\n\
    \               2.d.2.b.3.b.1 - If the member's certificate cannot be\n      \
    \                         verified, the GLA can return a response\n          \
    \                     indicating cMCStatusInfoExt with\n                     \
    \          cMCStatus.failed and\n                               otherInfo.extendedFailInfo.SKDFailInfo\n\
    \                               value of invalidCert and a signingTime\n     \
    \                          attribute to either the GLO or the\n              \
    \                 prospective member depending on where the\n                \
    \               request originated.  If the GLA does not\n                   \
    \            return a cMCStatus.failed response, the\n                       \
    \        GLA issues a glProvideCert request (see\n                           \
    \    Section 4.10) to either the GLO or\n                               prospective\
    \ member depending on where the\n                               request originated.\n\
    \               2.d.2.b.3.b.2 - Else if the member's certificate\n           \
    \                    verifies, the GLA returns a\n                           \
    \    cMCStatusInfoExt indicating\n                               cMCStatus.success\
    \ and a signingTime\n                               attribute to the GLO (2 in\
    \ Figure 5) if\n                               the GLO signed the request and\
    \ to the GL\n                               member (3 in Figure 5) if the GL member\n\
    \                               signed the request.  The GLA also takes\n    \
    \                           administrative actions, which are beyond\n       \
    \                        the scope of this document, to add the\n            \
    \                   member to the GL stored on the GLA.  The\n               \
    \                GLA also distributes the shared KEK to\n                    \
    \           the member via the mechanism described in\n                      \
    \         Section 5.\n                 2.d.2.b.3.b.2.a - The GLA applies confidentiality\
    \ to\n                                   the response by encapsulating the\n \
    \                                  SignedData.PKIData in an\n                \
    \                   EnvelopedData if the request was\n                       \
    \            encapsulated in an EnvelopedData (see\n                         \
    \          Section 3.2.1.2).\n                 2.d.2.b.3.b.2.b - The GLA can also\
    \ optionally apply\n                                   another SignedData over\
    \ the\n                                   EnvelopedData (see Section 3.2.1.2).\n\
    \   3 - Upon receipt of the cMCStatusInfoExt response, the GLO checks the\n  \
    \     signingTime and verifies the GLA signature(s).  If an additional\n     \
    \  SignedData and/or EnvelopedData encapsulates the response (see\n       Section\
    \ 3.2.1.2 or 3.2.2), the GLO verifies the outer signature\n       and/or decrypts\
    \ the outer layer prior to verifying the signature\n       on the innermost SignedData.\n\
    \     3.a - If the signingTime attribute value is not within the locally\n   \
    \        accepted time window, the GLO MAY return a response\n           indicating\
    \ cMCStatus.failed and otherInfo.failInfo.badTime\n           and a signingTime\
    \ attribute.\n     3.b - Else if signature processing continues and if the signatures\n\
    \           verify, the GLO checks that one of the names in the\n           certificate\
    \ used to sign the response matches the name of the\n           GL.\n       3.b.1\
    \ - If the name of the GL does not match the name present in\n               the\
    \ certificate used to sign the message, the GLO should\n               not believe\
    \ the response.\n       3.b.2 - Else if the name of the GL matches the name present\
    \ in\n               the certificate and:\n         3.b.2.a - If the signatures\
    \ verify and the response is\n                   cMCStatusInfoExt indicating cMCStatus.success,\
    \ the\n                   GLA has added the member to the GL.  If the member\n\
    \                   was added to a managed list and the original request\n   \
    \                was signed by the member, the GLO sends a\n                 \
    \  cMCStatusInfoExt.cMCStatus.success and a signingTime\n                   attribute\
    \ to the GL member.\n         3.b.2.b - Else if the GLO received a\n         \
    \          cMCStatusInfoExt.cMCStatus.failed with any reason,\n              \
    \     the GLO can reattempt to add the member to the GL\n                   using\
    \ the information provided in the response.\n   4 - Upon receipt of the cMCStatusInfoExt\
    \ response, the prospective\n       member checks the signingTime and verifies\
    \ the GLA signatures or\n       GLO signatures.  If an additional SignedData and/or\
    \ EnvelopedData\n       encapsulates the response (see Section 3.2.1.2 or 3.2.2),\
    \ the GLO\n       verifies the outer signature and/or decrypts the outer layer\n\
    \       prior to verifying the signature on the innermost SignedData.\n     4.a\
    \ - If the signingTime attribute value is not within the locally\n           accepted\
    \ time window, the prospective member MAY return a\n           response indicating\
    \ cMCStatus.failed and\n           otherInfo.failInfo.badTime and a signingTime\
    \ attribute.\n     4.b - Else if signature processing continues and if the signatures\n\
    \           verify, the GL member checks that one of the names in the\n      \
    \     certificate used to sign the response matches the name of the\n        \
    \   GL.\n       4.b.1 - If the name of the GL does not match the name present\
    \ in\n               the certificate used to sign the message, the GL member\n\
    \               should not believe the response.\n     4.b.2 - Else if the name\
    \ of the GL matches the name present in the\n               certificate and:\n\
    \         4.b.2.a - If the signatures verify, the prospective member has\n   \
    \                been added to the GL.\n         4.b.2.b - Else if the prospective\
    \ member received a\n                   cMCStatusInfoExt.cMCStatus.failed, for\
    \ any reason,\n                   the prospective member MAY reattempt to add\
    \ itself to\n                   the GL using the information provided in the\n\
    \                   response.\n"
- title: 4.3.2.  Prospective Member Initiated Additions
  contents:
  - "4.3.2.  Prospective Member Initiated Additions\n   The process for prospective\
    \ member initiated glAddMember requests is\n   as follows:\n   1 - The prospective\
    \ GL member sends a\n       SignedData.PKIData.controlSequence.glAddMember request\
    \ to the GLA\n       (A in Figure 5).  The prospective GL member includes: the\
    \ GL name\n       in glName, their name in glMember.glMemberName, their address\
    \ in\n       glMember.glMemberAddress, and their encryption certificate in\n \
    \      glMember.certificates.pKC.  The prospective GL member can also\n      \
    \ include any attribute certificates associated with their\n       encryption\
    \ certificate in glMember.certificates.aC, and the\n       certification path\
    \ associated with their encryption and attribute\n       certificates in glMember.certificates.certPath.\
    \  The prospective\n       member MUST also include the signingTime attribute\
    \ with this\n       request.\n     1.a - The prospective GL member can optionally\
    \ apply\n           confidentiality to the request by encapsulating the\n    \
    \       SignedData.PKIData in an EnvelopedData (see Section 3.2.1.2).\n     1.b\
    \ - The prospective GL member MAY optionally apply another\n           SignedData\
    \ over the EnvelopedData (see Section 3.2.1.2).\n   2 - Upon receipt of the request,\
    \ the GLA verifies the request as per\n       2 in Section 4.3.1.\n   3 - Upon\
    \ receipt of the forwarded request, the GLO checks the\n       signingTime and\
    \ verifies the prospective GL member signature on\n       the innermost SignedData.PKIData\
    \ and the GLA signature on the\n       outer layer.  If an EnvelopedData encapsulates\
    \ the innermost\n       layer (see Section 3.2.1.2 or 3.2.2), the GLO decrypts\
    \ the outer\n       layer prior to verifying the signature on the innermost\n\
    \       SignedData.\n       Note: For cases where the GL is closed and either\
    \ a) a\n       prospective member sends directly to the GLO or b) the GLA has\n\
    \       mistakenly forwarded the request to the GLO, the GLO should first\n  \
    \     determine whether to honor the request.\n     3.a - If the signingTime attribute\
    \ value is not within the locally\n           accepted time window, the GLO MAY\
    \ return a response\n           indicating cMCStatus.failed and otherInfo.failInfo.badTime.\n\
    \     3.b - Else if signature processing continues and if the signatures\n   \
    \        verify, the GLO checks to make sure one of the names in the\n       \
    \    certificate used to sign the request matches the name in\n           glMember.glMemberName.\n\
    \       3.b.1 - If the names do not match, the GLO sends a\n               SignedData.PKIResponse.controlSequence\
    \ message back to\n               the prospective member with\n              \
    \ cMCStatusInfoExt.cMCStatus.failed indicating why the\n               prospective\
    \ member was denied in\n               cMCStausInfo.statusString.  This stops\
    \ people from adding\n               people to GLs without their permission. \
    \ Additionally, a\n               signingTime attribute is included with the response.\n\
    \       3.b.2 - Else if the names match, the GLO determines whether the\n    \
    \           prospective member is allowed to be added.  The mechanism\n      \
    \         is beyond the scope of this document; however, the GLO\n           \
    \    should check to see that the glMember.glMemberName is not\n             \
    \  already on the GL.\n         3.b.2.a - If the GLO determines the prospective\
    \ member is not\n                   allowed to join the GL, the GLO can return\
    \ a\n                   SignedData.PKIResponse.controlSequence message back\n\
    \                   to the prospective member with\n                   cMCStatusInfoExt.cMCtatus.failed\
    \ indicating why the\n                   prospective member was denied in\n  \
    \                 cMCStatus.statusString.  Additionally, a signingTime\n     \
    \              attribute is included with the response.\n         3.b.2.b - Else\
    \ if the GLO determines the prospective member is\n                   allowed\
    \ to join the GL, the GLO verifies the member's\n                   encryption\
    \ certificate.\n           3.b.2.b.1 - If the member's certificate cannot be verified,\n\
    \                       the GLO returns a\n                       SignedData.PKIResponse.controlSequence\
    \ back to\n                       the prospective member with\n              \
    \         cMCStatusInfoExt.cMCtatus.failed indicating that\n                 \
    \      the member's encryption certificate did not\n                       verify\
    \ in cMCStatus.statusString.  Additionally,\n                       a signingTime\
    \ attribute is included with the\n                       response.  If the GLO\
    \ does not return a\n                       cMCStatusInfoExt response, the GLO\
    \ sends a\n                       SignedData.PKIData.controlSequence.glProvideCert\n\
    \                       message to the prospective member requesting a\n     \
    \                  new encryption certificate (see Section 4.10).\n          \
    \ 3.b.2.b.2 - Else if the member's certificate verifies, the\n               \
    \        GLO resubmits the glAddMember request (see\n                       Section\
    \ 3.2.5) to the GLA (1 in Figure 5).\n             3.b.2.b.2.a - The GLO applies\
    \ confidentiality to the new\n                           GLAddMember request by\
    \ encapsulating the\n                           SignedData.PKIData in an EnvelopedData\
    \ if the\n                           initial request was encapsulated in an\n\
    \                           EnvelopedData (see Section 3.2.1.2).\n           \
    \  3.b.2.b.2.b - The GLO can also optionally apply another\n                 \
    \          SignedData over the EnvelopedData (see\n                          \
    \ Section 3.2.1.2).\n   4 - Processing continues as in 2 of Section 4.3.1.\n"
- title: 4.4.  Delete Members from GL
  contents:
  - "4.4.  Delete Members from GL\n   To delete members from GLs, either the GLO or\
    \ members to be removed\n   use the glDeleteMember request.  The GLA processes\
    \ the GLO, and\n   members requesting their own removal make requests differently.\
    \  The\n   GLO can submit the request at any time to delete members from the GL,\n\
    \   and the GLA, once it has verified the request came from a registered\n   GLO,\
    \ should delete the member.  If a member sends the request, the\n   GLA needs\
    \ to determine how the GL is administered.  When the GLO\n   initially configured\
    \ the GL, it set the GL to be unmanaged, managed,\n   or closed (see Section 3.1.1).\
    \  In the unmanaged case, the GLA merely\n   processes the member's request. \
    \ In the managed case, the GLA\n   forwards the requests from the member to the\
    \ GLO for review.  Where\n   there are multiple GLOs for a GL, which GLO the request\
    \ is forwarded\n   to is beyond the scope of this document.  The GLO reviews the\
    \ request\n   and either rejects it or submits a reformed request to the GLA.\
    \  In\n   the closed case, the GLA will not accept requests from members.  The\n\
    \   following sections describe the processing for the GLO(s), GLA, and\n   GL\
    \ members depending on where the request originated, either from a\n   GLO or\
    \ from members wanting to be removed.  Figure 6 depicts the\n   protocol interactions\
    \ for the three options.  Note that the error\n   messages are not depicted. \
    \ Additionally, behavior for the optional\n   transactionId, senderNonce, and\
    \ recipientNonce CMC control attributes\n   is not addressed in these procedures.\n\
    \   +-----+  2,B{A}              3  +----------+\n   | GLO | <--------+    +------->\
    \ | Member 1 |\n   +-----+          |    |         +----------+\n            1\
    \       |    |\n   +-----+ <--------+    |      3  +----------+\n   | GLA |  A\
    \            +-------> |   ...    |\n   +-----+ <-------------+         +----------+\n\
    \                         |\n                         |      3  +----------+\n\
    \                         +-------> | Member n |\n                           \
    \        +----------+\n       Figure 6 - Member Deletion\n   If the member is\
    \ not removed from the GL, it will continue to receive\n   and be able to decrypt\
    \ data protected with the shared KEK and will\n   continue to receive rekeys.\
    \  For unmanaged lists, there is no point\n   to a group rekey because there is\
    \ no guarantee that the member\n   requesting to be removed has not already added\
    \ itself back on the GL\n   under a different name.  For managed and closed GLs,\
    \ the GLO needs to\n   take steps to ensure that the member being deleted is not\
    \ on the GL\n   twice.  After ensuring this, managed and closed GLs can be rekeyed\
    \ to\n   maintain the confidentiality of the traffic sent by group members.\n\
    \   If the GLO is sure the member has been deleted, the group rekey\n   mechanism\
    \ can be used to distribute the new key (see Sections 4.5 and\n   5).\n"
- title: 4.4.1.  GLO Initiated Deletions
  contents:
  - "4.4.1.  GLO Initiated Deletions\n   The process for GLO initiated glDeleteMember\
    \ requests is as follows:\n   1 - The GLO collects the pertinent information for\
    \ the member(s) to\n       be deleted (this can be done through an out-of-band\
    \ means).  The\n       GLO then sends a SignedData.PKIData.controlSequence with\
    \ a\n       separate glDeleteMember request for each member to the GLA (1 in\n\
    \       Figure 6).  The GLO MUST include the GL name in glName and the\n     \
    \  member's name in glMemberToDelete.  If the GL from which the\n       member\
    \ is being deleted is a closed or managed GL, the GLO MUST\n       also generate\
    \ a glRekey request and include it with the\n       glDeletemember request (see\
    \ Section 4.5).  The GLO MUST also\n       include the signingTime attribute with\
    \ this request.\n     1.a - The GLO can optionally apply confidentiality to the\
    \ request\n           by encapsulating the SignedData.PKIData in an EnvelopedData\n\
    \           (see Section 3.2.1.2).\n     1.b - The GLO can also optionally apply\
    \ another SignedData over the\n           EnvelopedData (see Section 3.2.1.2).\n\
    \   2 - Upon receipt of the request, the GLA checks the signingTime\n       attribute\
    \ and verifies the signature on the innermost\n       SignedData.PKIData.  If\
    \ an additional SignedData and/or\n       EnvelopedData encapsulates the request\
    \ (see Section 3.2.1.2 or\n       3.2.2), the GLA verifies the outer signature\
    \ and/or decrypts the\n       outer layer prior to verifying the signature on\
    \ the innermost\n       SignedData.\n     2.a - If the signingTime attribute value\
    \ is not within the locally\n           accepted time window, the GLA MAY return\
    \ a response\n           indicating cMCStatus.failed and otherInfo.failInfo.badTime\n\
    \           and a signingTime attribute.\n     2.b - Else if signature processing\
    \ continues and if the signatures\n           cannot be verified, the GLA returns\
    \ a cMCStatusInfoExt\n           response indicating cMCStatus.failed and\n  \
    \         otherInfo.failInfo.badMessageCheck.  Additionally, a\n           signingTime\
    \ attribute is included with the response.\n     2.c - Else if the signatures\
    \ verify, the GLA makes sure the GL is\n           supported by the GLA by checking\
    \ that the glName matches a\n           glName stored on the GLA.\n       2.c.1\
    \ - If the glName is not supported by the GLA, the GLA\n               returns\
    \ a response indicating cMCStatusInfoExt with\n               cMCStatus.failed\
    \ and\n               otherInfo.extendedFailInfo.SKDFailInfo value of\n      \
    \         invalidGLName.  Additionally, a signingTime attribute is\n         \
    \      included with the response.\n       2.c.2 - Else if the glName is supported\
    \ by the GLA, the GLA\n               checks to see if the glMemberName is present\
    \ on the GL.\n         2.c.2.a - If the glMemberName is not present on the GL,\
    \ the GLA\n                   returns a response indicating cMCStatusInfoExt with\n\
    \                   cMCStatus.failed and\n                   otherInfo.extendedFailInfo.SKDFailInfo\
    \ value of\n                   notAMember.  Additionally, a signingTime attribute\
    \ is\n                   included with the response.\n         2.c.2.b - Else\
    \ if the glMemberName is already on the GL, the\n                   GLA checks\
    \ how the GL is administered.\n           2.c.2.b.1 - If the GL is closed, the\
    \ GLA checks that the\n                       registered GLO signed the request\
    \ by checking\n                       that one of the names in the digital signature\n\
    \                       certificate used to sign the request matches the\n   \
    \                    registered GLO.\n             2.c.2.b.1.a - If the names\
    \ do not match, the GLA returns a\n                           response indicating\
    \ cMCStatusInfoExt with\n                           cMCStatus.failed and\n   \
    \                        otherInfo.extendedFailInfo.SKDFailInfo value\n      \
    \                     of closedGL.  Additionally, a signingTime\n            \
    \               attribute is included with the response.\n             2.c.2.b.1.b\
    \ - Else if the names do match, the GLA returns a\n                          \
    \ cMCStatusInfoExt.cMCStatus.success and a\n                           signingTime\
    \ attribute (2 in Figure 5).  The\n                           GLA also takes administrative\
    \ actions, which\n                           are beyond the scope of this document,\
    \ to\n                           delete the member with the GL stored on the\n\
    \                           GLA.  Note that the GL also needs to be\n        \
    \                   rekeyed as described in Section 5.\n               2.c.2.b.1.b.1\
    \ - The GLA applies confidentiality to the\n                               response\
    \ by encapsulating the\n                               SignedData.PKIData in an\
    \ EnvelopedData if\n                               the request was encapsulated\
    \ in an\n                               EnvelopedData (see Section 3.2.1.2).\n\
    \               2.c.2.b.1.b.2 - The GLA can also optionally apply another\n  \
    \                             SignedData over the EnvelopedData (see\n       \
    \                        Section 3.2.1.2).\n           2.c.2.b.2 - Else if the\
    \ GL is managed, the GLA checks that\n                       either a registered\
    \ GLO or the prospective member\n                       signed the request.  For\
    \ GLOs, one of the names\n                       in the certificate used to sign\
    \ the request needs\n                       to match a registered GLO.  For the\
    \ prospective\n                       member, the name in glMember.glMemberName\
    \ needs\n                       to match one of the names in the certificate used\n\
    \                       to sign the request.\n             2.c.2.b.2.a - If the\
    \ signer is neither a registered GLO nor\n                           the prospective\
    \ GL member, the GLA returns a\n                           response indicating\
    \ cMCStatusInfoExt with\n                           cMCStatus.failed and\n   \
    \                        otherInfo.extendedFailInfo.SKDFailInfo value\n      \
    \                     of noSpam.  Additionally, a signingTime\n              \
    \             attribute is included with the response.\n             2.c.2.b.2.b\
    \ - Else if the signer is a registered GLO, the\n                           GLA\
    \ returns a\n                           cMCStatusInfoExt.cMCStatus.success and\
    \ a\n                           signingTime attribute(2 in Figure 6).  The\n \
    \                          GLA also takes administrative actions, which\n    \
    \                       are beyond the scope of this document, to\n          \
    \                 delete the member with the GL stored on the\n              \
    \             GLA.  Note that the GL will also be rekeyed\n                  \
    \         as described in Section 5.\n               2.c.2.b.2.b.1 - The GLA applies\
    \ confidentiality to the\n                               response by encapsulating\
    \ the\n                               SignedData.PKIData in an EnvelopedData if\n\
    \                               the request was encapsulated in an\n         \
    \                      EnvelopedData (see Section 3.2.1.2).\n               2.c.2.b.2.b.2\
    \ - The GLA can also optionally apply another\n                              \
    \ SignedData over the EnvelopedData (see\n                               Section\
    \ 3.2.1.2).\n             2.c.2.b.2.c - Else if the signer is the prospective\
    \ member,\n                           the GLA forwards the glDeleteMember request\n\
    \                           (see Section 3.2.3) to the GLO (B{A} in\n        \
    \                   Figure 6).  If there is more than one\n                  \
    \         registered GLO, the GLO to which the request\n                     \
    \      is forwarded to is beyond the scope of this\n                         \
    \  document.  Further processing of the\n                           forwarded\
    \ request by GLOs is addressed in 3\n                           of Section 4.4.2.\n\
    \               2.c.2.b.2.c.1 - The GLA applies confidentiality to the\n     \
    \                          forwarded request by encapsulating the\n          \
    \                     SignedData.PKIData in an EnvelopedData if\n            \
    \                   the request was encapsulated in an\n                     \
    \          EnvelopedData (see Section 3.2.1.2).\n               2.c.2.b.2.c.2\
    \ - The GLA can also optionally apply another\n                              \
    \ SignedData over the EnvelopedData (see\n                               Section\
    \ 3.2.1.2).\n           2.c.2.b.3 - Else if the GL is unmanaged, the GLA checks\
    \ that\n                       either a registered GLO or the prospective member\n\
    \                       signed the request.  For GLOs, one of the names\n    \
    \                   in the certificate used to sign the request needs\n      \
    \                 to match the name of a registered GLO.  For the\n          \
    \             prospective member, the name in\n                       glMember.glMemberName\
    \ needs to match one of the\n                       names in the certificate used\
    \ to sign the\n                       request.\n             2.c.2.b.3.a - If\
    \ the signer is neither the GLO nor the\n                           prospective\
    \ member, the GLA returns a\n                           response indicating cMCStatusInfoExt\
    \ with\n                           cMCStatus.failed and\n                    \
    \       otherInfo.extendedFailInfo.SKDFailInfo value\n                       \
    \    of noSpam.  Additionally, a signingTime\n                           attribute\
    \ is included with the response.\n             2.c.2.b.3.b - Else if the signer\
    \ is either a registered GLO\n                           or the member, the GLA\
    \ returns a\n                           cMCStatusInfoExt.cMCStatus.success and\
    \ a\n                           signingTime attribute to the GLO (2 in Figure\n\
    \                           6) if the GLO signed the request and to the\n    \
    \                       GL member (3 in Figure 6) if the GL member\n         \
    \                  signed the request.  The GLA also takes\n                 \
    \          administrative actions, which are beyond the\n                    \
    \       scope of this document, to delete the member\n                       \
    \    with the GL stored on the GLA.\n               2.c.2.b.3.b.1 - The GLA applies\
    \ confidentiality to the\n                               response by encapsulating\
    \ the\n                               SignedData.PKIData in an EnvelopedData if\n\
    \                               the request was encapsulated in an\n         \
    \                      EnvelopedData (see Section 3.2.1.2).\n               2.c.2.b.3.b.2\
    \ - The GLA can also optionally apply another\n                              \
    \ SignedData over the EnvelopedData (see\n                               Section\
    \ 3.2.1.2).\n   3 - Upon receipt of the cMCStatusInfoExt response, the GLO checks\
    \ the\n       signingTime and verifies the GLA signatures.  If an additional\n\
    \       SignedData and/or EnvelopedData encapsulates the response (see\n     \
    \  Section 3.2.1.2 or 3.2.2), the GLO verifies the outer signature\n       and/or\
    \ decrypts the outer layer prior to verifying the signature\n       on the innermost\
    \ SignedData.\n     3.a - If the signingTime attribute value is not within the\
    \ locally\n           accepted time window, the GLO MAY return a response\n  \
    \         indicating cMCStatus.failed and otherInfo.failInfo.badTime\n       \
    \    and a signingTime attribute.\n     3.b - Else if signature processing continues\
    \ and if the signatures\n           do verify, the GLO checks that one of the\
    \ names in the\n           certificate used to sign the response matches the name\
    \ of the\n           GL.\n       3.b.1 - If the name of the GL does not match\
    \ the name present in\n               the certificate used to sign the message,\
    \ the GLO should\n               not believe the response.\n       3.b.2 - Else\
    \ if the name of the GL matches the name present in\n               the certificate\
    \ and:\n         3.b.2.a - If the signatures verify and the response is\n    \
    \               cMCStatusInfoExt.cMCStatus.success, the GLO has\n            \
    \       deleted the member from the GL.  If member was\n                   deleted\
    \ from a managed list and the original request\n                   was signed\
    \ by the member, the GLO sends a\n                   cMCStatusInfoExt.cMCStatus.success\
    \ and a signingTime\n                   attribute to the GL member.\n        \
    \ 3.b.2.b - Else if the GLO received a\n                   cMCStatusInfoExt.cMCStatus.failed\
    \ with any reason,\n                   the GLO may reattempt to delete the member\
    \ from the\n                   GL using the information provided in the response.\n\
    \   4 - Upon receipt of the cMCStatusInfoExt response, the member checks\n   \
    \    the signingTime and verifies the GLA signature(s) or GLO\n       signature(s).\
    \  If an additional SignedData and/or EnvelopedData\n       encapsulates the response\
    \ (see Section 3.2.1.2 or 3.2.2), the GLO\n       verifies the outer signature\
    \ and/or decrypts the outer layer\n       prior to verifying the signature on\
    \ the innermost SignedData.\n     4.a - If the signingTime attribute value is\
    \ not within the locally\n           accepted time window, the prospective member\
    \ MAY return a\n           response indicating cMCStatus.failed and\n        \
    \   otherInfo.failInfo.badTime and a signingTime attribute.\n     4.b - Else if\
    \ signature processing continues and if the signatures\n           verify, the\
    \ GL member checks that one of the names in the\n           certificate used to\
    \ sign the response matches the name of the\n           GL.\n       4.b.1 - If\
    \ the name of the GL does not match the name present in\n               the certificate\
    \ used to sign the message, the GL member\n               should not believe the\
    \ response.\n       4.b.2 - Else if the name of the GL matches the name present\
    \ in\n               the certificate and:\n         4.b.2.a - If the signature(s)\
    \ verify, the member has been\n                   deleted from the GL.\n     \
    \    4.b.2.b - Else if the member received a\n                   cMCStatusInfoExt.cMCStatus.failed\
    \ with any reason,\n                   the member can reattempt to delete itself\
    \ from the GL\n                   using the information provided in the response.\n"
- title: 4.4.2.  Member Initiated Deletions
  contents:
  - "4.4.2.  Member Initiated Deletions\n   The process for member initiated deletion\
    \ of its own membership using\n   the glDeleteMember requests is as follows:\n\
    \   1 - The member sends a\n       SignedData.PKIData.controlSequence.glDeleteMember\
    \ request to the\n       GLA (A in Figure 6).  The member includes the name of\
    \ the GL in\n       glName and the member's own name in glMemberToDelete.  The\
    \ GL\n       member MUST also include the signingTime attribute with this\n  \
    \     request.\n     1.a - The member can optionally apply confidentiality to\
    \ the\n           request by encapsulating the SignedData.PKIData in an\n    \
    \       EnvelopedData (see Section 3.2.1.2).\n     1.b - The member can also optionally\
    \ apply another SignedData over\n           the EnvelopedData (see Section 3.2.1.2).\n\
    \   2 - Upon receipt of the request, the GLA verifies the request as per\n   \
    \    2 in Section 4.4.1.\n   3 - Upon receipt of the forwarded request, the GLO\
    \ checks the\n       signingTime and verifies the member signature on the innermost\n\
    \       SignedData.PKIData and the GLA signature on the outer layer.  If\n   \
    \    an EnvelopedData encapsulates the innermost layer (see Section\n       3.2.1.2\
    \ or 3.2.2), the GLO decrypts the outer layer prior to\n       verifying the signature\
    \ on the innermost SignedData.\n       Note: For cases where the GL is closed\
    \ and either (a) a\n       prospective member sends directly to the GLO or (b)\
    \ the GLA has\n       mistakenly forwarded the request to the GLO, the GLO should\
    \ first\n       determine whether to honor the request.\n     3.a - If the signingTime\
    \ attribute value is not within the locally\n           accepted time window,\
    \ the GLO MAY return a response\n           indicating cMCStatus.failed and otherInfo.failInfo.badTime\n\
    \           and a signingTime attribute.\n     3.b - Else if signature processing\
    \ continues if the signatures\n           cannot be verified, the GLO returns\
    \ a cMCStatusInfoExt\n           response indicating cMCStatus.failed and\n  \
    \         otherInfo.failInfo.badMessageCheck and a signingTime\n           attribute.\n\
    \     3.c - Else if the signatures verify, the GLO checks to make sure\n     \
    \      one of the names in the certificates used to sign the request\n       \
    \    matches the name in glMemberToDelete.\n       3.c.1 - If the names do not\
    \ match, the GLO sends a\n               SignedData.PKIResponse.controlSequence\
    \ message back to\n               the prospective member with\n              \
    \ cMCStatusInfoExt.cMCtatus.failed indicating why the\n               prospective\
    \ member was denied in\n               cMCStatusInfoExt.statusString.  This stops\
    \ people from\n               adding people to GLs without their permission.\n\
    \               Additionally, a signingTime attribute is included with\n     \
    \          the response.\n       3.c.2 - Else if the names match, the GLO resubmits\
    \ the\n               glDeleteMember request (see Section 3.2.5) to the GLA (1\n\
    \               in Figure 6).  The GLO makes sure the glMemberName is\n      \
    \         already on the GL.  The GLO also generates a glRekey\n             \
    \  request and include it with the GLDeleteMember request\n               (see\
    \ Section 4.5).\n         3.c.2.a - The GLO applies confidentiality to the new\n\
    \                   GLDeleteMember request by encapsulating the\n            \
    \       SignedData.PKIData in an EnvelopedData if the initial\n              \
    \     request was encapsulated in an EnvelopedData (see\n                   Section\
    \ 3.2.1.2).\n         3.c.2.b - The GLO can also optionally apply another SignedData\n\
    \                   over the EnvelopedData (see Section 3.2.1.2).\n   4 - Further\
    \ processing is as in 2 of Section 4.4.1.\n"
- title: 4.5.  Request Rekey of GL
  contents:
  - "4.5.  Request Rekey of GL\n   From time to time, the GL will need to be rekeyed.\
    \  Some situations\n   follow:\n     - When a member is removed from a closed\
    \ or managed GL.  In this\n       case, the PKIData.controlSequence containing\
    \ the glDeleteMember\n       ought to contain a glRekey request.\n     - Depending\
    \ on policy, when a member is removed from an unmanaged\n       GL.  If the policy\
    \ is to rekey the GL, the\n       PKIData.controlSequence containing the glDeleteMember\
    \ could also\n       contain a glRekey request or an out-of-bands means could\
    \ be used\n       to tell the GLA to rekey the GL.  Rekeying of unmanaged GLs\
    \ when\n       members are deleted is not advised.\n     - When the current shared\
    \ KEK has been compromised.\n     - When the current shared KEK is about to expire.\
    \  Consider two\n       cases:\n        -- If the GLO controls the GL rekey, the\
    \ GLA should not assume\n           that a new shared KEK should be distributed,\
    \ but instead wait\n           for the glRekey message.\n        -- If the GLA\
    \ controls the GL rekey, the GLA should initiate a\n           glKey message as\
    \ specified in Section 5.\n   If the generationCounter (see Section 3.1.1) is\
    \ set to a value\n   greater than one (1) and the GLO controls the GL rekey, the\
    \ GLO may\n   generate a glRekey any time before the last shared KEK has expired.\n\
    \   To be on the safe side, the GLO ought to request a rekey one (1)\n   duration\
    \ before the last shared KEK expires.\n   The GLA and GLO are the only entities\
    \ allowed to initiate a GL rekey.\n   The GLO indicated whether they are going\
    \ to control rekeys or whether\n   the GLA is going to control rekeys when they\
    \ assigned the shared KEK\n   to GL (see Section 3.1.1).  The GLO initiates a\
    \ GL rekey at any time.\n   The GLA can be configured to automatically rekey the\
    \ GL prior to the\n   expiration of the shared KEK (the length of time before\
    \ the\n   expiration is an implementation decision).  The GLA can also\n   automatically\
    \ rekey GLs that have been compromised, but this is\n   covered in Section 5.\
    \  Figure 7 depicts the protocol interactions to\n   request a GL rekey.  Note\
    \ that error messages are not depicted.\n   Additionally, behavior for the optional\
    \ transactionId, senderNonce,\n   and recipientNonce CMC control attributes is\
    \ not addressed in these\n   procedures.\n   +-----+  1   2,A  +-----+\n   | GLA\
    \ | <-------> | GLO |\n   +-----+           +-----+\n   Figure 7 - GL Rekey Request\n"
- title: 4.5.1.  GLO Initiated Rekey Requests
  contents:
  - "4.5.1.  GLO Initiated Rekey Requests\n   The process for GLO initiated glRekey\
    \ requests is as follows:\n   1 - The GLO sends a SignedData.PKIData.controlSequence.glRekey\n\
    \       request to the GLA (1 in Figure 7).  The GLO includes the glName.\n  \
    \     If glAdministration and glKeyNewAttributes are omitted then there\n    \
    \   is no change from the previously registered GL values for these\n       fields.\
    \  If the GLO wants to force a rekey for all outstanding\n       shared KEKs,\
    \ it includes the glRekeyAllGLKeys set to TRUE.  The\n       GLO MUST also include\
    \ a signingTime attribute with this request.\n     1.a - The GLO can optionally\
    \ apply confidentiality to the request\n           by encapsulating the SignedData.PKIData\
    \ in an EnvelopedData\n           (see Section 3.2.1.2).\n     1.b - The GLO can\
    \ also optionally apply another SignedData over the\n           EnvelopedData\
    \ (see Section 3.2.1.2).\n   2 - Upon receipt of the request, the GLA checks the\
    \ signingTime and\n       verifies the signature on the innermost SignedData.PKIData.\
    \  If\n       an additional SignedData and/or EnvelopedData encapsulates the\n\
    \       request (see Section 3.2.1.2 or 3.2.2), the GLA verifies the\n       outer\
    \ signature and/or decrypts the outer layer prior to\n       verifying the signature\
    \ on the innermost SignedData.\n     2.a - If the signingTime attribute value\
    \ is not within the locally\n           accepted time window, the GLA MAY return\
    \ a response\n           indicating cMCStatus.failed and otherInfo.failInfo.badTime\n\
    \           and a signingTime attribute.\n     2.b - Else if signature processing\
    \ continues and if the signatures\n           do not verify, the GLA returns a\
    \ cMCStatusInfoExt response\n           indicating cMCStatus.failed and\n    \
    \       otherInfo.failInfo.badMessageCheck.  Additionally, a\n           signingTime\
    \ attribute is included with the response.\n     2.c - Else if the signatures\
    \ do verify, the GLA makes sure the GL\n           is supported by the GLA by\
    \ checking that the glName matches a\n           glName stored on the GLA.\n \
    \      2.c.1 - If the glName present does not match a GL stored on the\n     \
    \          GLA, the GLA returns a response indicating\n               cMCStatusInfoExt\
    \ with cMCStatus.failed and\n               otherInfo.extendedFailInfo.SKDFailInfo\
    \ value of\n               invalidGLName.  Additionally, a signingTime attribute\
    \ is\n               included with the response.\n       2.c.2 - Else if the glName\
    \ present matches a GL stored on the\n               GLA, the GLA checks that\
    \ a registered GLO signed the\n               request by checking that one of\
    \ the names in the\n               certificate used to sign the request is a registered\
    \ GLO.\n         2.c.2.a - If the names do not match, the GLA returns a response\n\
    \                   indicating cMCStatusInfoExt with cMCStatus.failed and\n  \
    \                 otherInfo.extendedFailInfo.SKDFailInfo value of\n          \
    \         noGLONameMatch.  Additionally, a signingTime\n                   attribute\
    \ is included with the response.\n         2.c.2.b - Else if the names match,\
    \ the GLA checks the\n                   glNewKeyAttribute values.\n         \
    \  2.c.2.b.1 - If the new value for requestedAlgorithm is not\n              \
    \         supported, the GLA returns a response indicating\n                 \
    \      cMCStatusInfoExt with cMCStatus.failed and\n                       otherInfo.extendedFailInfo.SKDFailInfo\
    \ value of\n                       unsupportedAlgorithm.  Additionally, a\n  \
    \                     signingTime attribute is included with the\n           \
    \            response.\n           2.c.2.b.2 - Else if the new value duration\
    \ is not supportable\n                       (determining this is beyond the scope\
    \ of this\n                       document), the GLA returns a response indicating\n\
    \                       cMCStatusInfoExt with cMCStatus.failed and\n         \
    \              otherInfo.extendedFailInfo.SKDFailInfo value of\n             \
    \          unsupportedDuration.  Additionally, a signingTime\n               \
    \        attribute is included with the response.\n           2.c.2.b.3 - Else\
    \ if the GL is not supportable for other\n                       reasons that\
    \ the GLA does not wish to disclose,\n                       the GLA returns a\
    \ response indicating\n                       cMCStatusInfoExt with cMCStatus.failed\
    \ and\n                       otherInfo.extendedFailInfo.SKDFailInfo value of\n\
    \                       unspecified.  Additionally, a signingTime\n          \
    \             attribute is included with the response.\n           2.c.2.b.4 -\
    \ Else if the new requestedAlgorithm and duration\n                       are\
    \ supportable or the glNewKeyAttributes was\n                       omitted, the\
    \ GLA returns a\n                       cMCStatusInfoExt.cMCStatus.success and\
    \ a\n                       sigingTime attribute (2 in Figure 7).  The GLA\n \
    \                      also uses the glKey message to distribute the\n       \
    \                rekey shared KEK (see Section 5).\n             2.c.2.b.4.a -\
    \ The GLA applies confidentiality to response\n                           by encapsulating\
    \ the SignedData.PKIData in an\n                           EnvelopedData if the\
    \ request was encapsulated\n                           in an EnvelopedData (see\
    \ Section 3.2.1.2).\n             2.c.2.b.4.b - The GLA can also optionally apply\
    \ another\n                           SignedData over the EnvelopedData (see\n\
    \                           Section 3.2.1.2).\n   3 - Upon receipt of the cMCStatusInfoExt\
    \ response, the GLO checks the\n       signingTime and verifies the GLA signature(s).\
    \  If an additional\n       SignedData and/or EnvelopedData encapsulates the forwarded\n\
    \       response (see Section 3.2.1.2 or 3.2.2), the GLO verifies the\n      \
    \ outer signature and/or decrypts the forwarded response prior to\n       verifying\
    \ the signature on the innermost SignedData.\n     3.a - If the signingTime attribute\
    \ value is not within the locally\n           accepted time window, the GLA MAY\
    \ return a response\n           indicating cMCStatus.failed and otherInfo.failInfo.badTime\n\
    \           and a signingTime attribute.\n     3.b - Else if signature processing\
    \ continues and if the signatures\n           verify, the GLO checks that one\
    \ of the names in the\n           certificate used to sign the response matches\
    \ the name of the\n           GL.\n       3.b.1 - If the name of the GL does not\
    \ match the name present in\n               the certificate used to sign the message,\
    \ the GLO should\n               not believe the response.\n       3.b.2 - Else\
    \ if the name of the GL matches the name present in\n               the certificate\
    \ and:\n         3.b.2.a - If the signatures verify and the response is\n    \
    \               cMCStatusInfoExt.cMCStatus.success, the GLO has\n            \
    \       successfully rekeyed the GL.\n         3.b.2.b - Else if the GLO received\
    \ a\n                   cMCStatusInfoExt.cMCStatus.failed with any reason,\n \
    \                  the GLO can reattempt to rekey the GL using the\n         \
    \          information provided in the response.\n"
- title: 4.5.2.  GLA Initiated Rekey Requests
  contents:
  - "4.5.2.  GLA Initiated Rekey Requests\n   If the GLA is in charge of rekeying\
    \ the GL the GLA will automatically\n   issue a glKey message (see Section 5).\
    \  In addition the GLA will\n   generate a cMCStatusInfoExt to indicate to the\
    \ GL that a successful\n   rekey has occurred.  The process for GLA initiated\
    \ rekey is as\n   follows:\n   1 - The GLA generates for all GLOs a\n       SignedData.PKIData.controlSequence.cMCStatusInfoExt.cMCStatus\n\
    \       success and includes a signingTime attribute (A in Figure 7).\n     1.a\
    \ - The GLA can optionally apply confidentiality to the request\n           by\
    \ encapsulating the SignedData.PKIData in an EnvelopedData\n           (see Section\
    \ 3.2.1.2).\n     1.b - The GLA can also optionally apply another SignedData over\
    \ the\n           EnvelopedData (see Section 3.2.1.2).\n   2 - Upon receipt of\
    \ the cMCStatusInfoExt.cMCStatus.success response,\n       the GLO checks the\
    \ signingTime and verifies the GLA signature(s).\n       If an additional SignedData\
    \ and/or EnvelopedData encapsulates the\n       forwarded response (see Section\
    \ 3.2.1.2 or 3.2.2), the GLO MUST\n       verify the outer signature and/or decrypt\
    \ the outer layer prior\n       to verifying the signature on the innermost SignedData.\n\
    \     2.a - If the signingTime attribute value is not within the locally\n   \
    \        accepted time window, the GLO MAY return a response\n           indicating\
    \ cMCStatus.failed and otherInfo.failInfo.badTime\n           and a signingTime\
    \ attribute.\n     2.b - Else if signature processing continues and if the signatures\n\
    \           verify, the GLO checks that one of the names in the\n           certificate\
    \ used to sign the response matches the name of the\n           GL.\n       2.b.1\
    \ - If the name of the GL does not match the name present in\n               the\
    \ certificate used to sign the message, the GLO ought\n               not believe\
    \ the response.\n       2.b.2 - Else if the name of the GL does match the name\
    \ present in\n               the certificate and the response is\n           \
    \    cMCStatusInfoExt.cMCStatus.success, the GLO knows the GLA\n             \
    \  has successfully rekeyed the GL.\n"
- title: 4.6.  Change GLO
  contents:
  - "4.6.  Change GLO\n   Management of managed and closed GLs can become difficult\
    \ for one GLO\n   if the GL membership grows large.  To support distributing the\n\
    \   workload, GLAs support having GLs be managed by multiple GLOs.  The\n   glAddOwner\
    \ and glRemoveOwner messages are designed to support adding\n   and removing registered\
    \ GLOs.  Figure 8 depicts the protocol\n   interactions to send glAddOwner and\
    \ glRemoveOwner messages and the\n   resulting response messages.  Note that error\
    \ messages are not shown.\n   Additionally, behavior for the optional transactionId,\
    \ senderNonce,\n   and recipientNonce CMC control attributes is not addressed\
    \ in these\n   procedures.\n        +-----+   1    2  +-----+\n        | GLA |\
    \ <-------> | GLO |\n        +-----+           +-----+\n   Figure 8 - GLO Add\
    \ and Delete Owners\n   The process for glAddOwner and glDeleteOwner is as follows:\n\
    \   1 - The GLO sends a SignedData.PKIData.controlSequence.glAddOwner or\n   \
    \    glRemoveOwner request to the GLA (1 in Figure 8).  The GLO\n       includes\
    \ the GL name in glName, and the name and address of the\n       GLO in glOwnerName\
    \ and glOwnerAddress, respectively.  The GLO\n       MUST also include the signingTime\
    \ attribute with this request.\n     1.a - The GLO can optionally apply confidentiality\
    \ to the request\n           by encapsulating the SignedData.PKIData in an EnvelopedData\n\
    \           (see Section 3.2.1.2).\n     1.b - The GLO can also optionally apply\
    \ another SignedData over the\n           EnvelopedData (see Section 3.2.1.2).\n\
    \   2 - Upon receipt of the glAddOwner or glRemoveOwner request, the GLA\n   \
    \    checks the signingTime and verifies the GLO signature(s).  If an\n      \
    \ additional SignedData and/or EnvelopedData encapsulates the\n       request\
    \ (see Section 3.2.1.2 or 3.2.2), the GLA verifies the\n       outer signature\
    \ and/or decrypts the outer layer prior to\n       verifying the signature on\
    \ the innermost SignedData.\n     2.a - If the signingTime attribute value is\
    \ not within the locally\n           accepted time window, the GLA MAY return\
    \ a response\n           indicating cMCStatus.failed and otherInfo.failInfo.badTime\n\
    \           and a signingTime attribute.\n     2.b - Else if signature processing\
    \ continues and if the signatures\n           cannot be verified, the GLA returns\
    \ a cMCStatusInfoExt\n           response indicating cMCStatus.failed and\n  \
    \         otherInfo.failInfo.badMessageCheck.  Additionally, a\n           signingTime\
    \ attribute is included with the response.\n     2.c - Else if the signatures\
    \ verify, the GLA makes sure the GL is\n           supported by checking that\
    \ the glName matches a glName stored\n           on the GLA.\n       2.c.1 - If\
    \ the glName is not supported by the GLA, the GLA\n               returns a response\
    \ indicating cMCStatusInfoExt with\n               cMCStatus.failed and\n    \
    \           otherInfo.extendedFailInfo.SKDFailInfo value of\n               invalidGLName.\
    \  Additionally, a signingTime attribute is\n               included with the\
    \ response.\n       2.c.2 - Else if the glName is supported by the GLA, the GLA\n\
    \               ensures that a registered GLO signed the glAddOwner or\n     \
    \          glRemoveOwner request by checking that one of the names\n         \
    \      present in the digital signature certificate used to sign\n           \
    \    the glAddOwner or glDeleteOwner request matches the name\n              \
    \ of a registered GLO.\n         2.c.2.a - If the names do not match, the GLA\
    \ returns a response\n                   indicating cMCStatusInfoExt with cMCStatus.failed\
    \ and\n                   otherInfo.extendedFailInfo.SKDFailInfo value of\n  \
    \                 noGLONameMatch.  Additionally, a signingTime\n             \
    \      attribute is included with the response.\n         2.c.2.b - Else if the\
    \ names match, the GLA returns a\n                   cMCStatusInfoExt.cMCStatus.success\
    \ and a signingTime\n                   attribute (2 in Figure 4).  The GLA also\
    \ takes\n                   administrative actions to associate the new\n    \
    \               glOwnerName with the GL in the case of glAddOwner or\n       \
    \            to disassociate the old glOwnerName with the GL in\n            \
    \       the cased of glRemoveOwner.\n           2.c.2.b.1 - The GLA applies confidentiality\
    \ to the response\n                       by encapsulating the SignedData.PKIResponse\
    \ in an\n                       EnvelopedData if the request was encapsulated\
    \ in\n                       an EnvelopedData (see Section 3.2.1.2).\n       \
    \    2.c.2.b.2 - The GLA can also optionally apply another\n                 \
    \      SignedData over the EnvelopedData (see Section\n                      \
    \ 3.2.1.2).\n   3 - Upon receipt of the cMCStatusInfoExt response, the GLO checks\
    \ the\n       signingTime and verifies the GLA's signature(s).  If an\n      \
    \ additional SignedData and/or EnvelopedData encapsulates the\n       response\
    \ (see Section 3.2.1.2 or 3.2.2), the GLO verifies the\n       outer signature\
    \ and/or decrypts the outer layer prior to\n       verifying the signature on\
    \ the innermost SignedData.\n     3.a - If the signingTime attribute value is\
    \ not within the locally\n           accepted time window, the GLO MAY return\
    \ a response\n           indicating cMCStatus.failed and otherInfo.failInfo.badTime\n\
    \           and a signingTime attribute.\n     3.b - Else if signature processing\
    \ continues and if the signatures\n           verify, the GLO checks that one\
    \ of the names in the\n           certificate used to sign the response matches\
    \ the name of the\n           GL.\n       3.b.1 - If the name of the GL does not\
    \ match the name present in\n               the certificate used to sign the message,\
    \ the GLO should\n               not believe the response.\n       3.b.2 - Else\
    \ if the name of the GL does match the name present in\n               the certificate\
    \ and:\n         3.b.2.a - If the signatures verify and the response was\n   \
    \                cMCStatusInfoExt.cMCStatus.success, the GLO has\n           \
    \        successfully added or removed the GLO.\n         3.b.2.b - Else if the\
    \ signatures verify and the response was\n                   cMCStatusInfoExt.cMCStatus.failed\
    \ with any reason,\n                   the GLO can reattempt to add or delete\
    \ the GLO using\n                   the information provided in the response.\n"
- title: 4.7.  Indicate KEK Compromise
  contents:
  - "4.7.  Indicate KEK Compromise\n   There will be times when the shared KEK is\
    \ compromised.  GL members\n   and GLOs use glkCompromise to tell the GLA that\
    \ the shared KEK has\n   been compromised.  Figure 9 depicts the protocol interactions\
    \ for GL\n   Key Compromise.  Note that error messages are not shown.\n   Additionally,\
    \ behavior for the optional transactionId, senderNonce,\n   and recipientNonce\
    \ CMC control attributes is not addressed in these\n   procedures.\n   +-----+\
    \  2{1}                  4  +----------+\n   | GLO | <----------+    +------->\
    \ | Member 1 |\n   +-----+  5,3{1}    |    |         +----------+\n   +-----+\
    \ <----------+    |      4  +----------+\n   | GLA |  1              +------->\
    \ |   ...    |\n   +-----+ <---------------+         +----------+\n          \
    \                 |      4  +----------+\n                           +------->\
    \ | Member n |\n                                     +----------+\n   Figure 9\
    \ - GL Key Compromise\n"
- title: 4.7.1.  GL Member Initiated KEK Compromise Message
  contents:
  - "4.7.1.  GL Member Initiated KEK Compromise Message\n   The process for GL member\
    \ initiated glkCompromise messages is as\n   follows:\n   1 - The GL member sends\
    \ a\n       SignedData.PKIData.controlSequence.glkCompromise request to the\n\
    \       GLA (1 in Figure 9).  The GL member includes the name of the GL\n    \
    \   in GeneralName.  The GL member MUST also include the signingTime\n       attribute\
    \ with this request.\n     1.a - The GL member can optionally apply confidentiality\
    \ to the\n           request by encapsulating the SignedData.PKIData in an\n \
    \          EnvelopedData (see Section 3.2.1.2).  The glkCompromise can\n     \
    \      be included in an EnvelopedData generated with the\n           compromised\
    \ shared KEK.\n     1.b - The GL member can also optionally apply another SignedData\n\
    \           over the EnvelopedData (see Section 3.2.1.2).\n   2 - Upon receipt\
    \ of the glkCompromise request, the GLA checks the\n       signingTime and verifies\
    \ the GL member signature(s).  If an\n       additional SignedData and/or EnvelopedData\
    \ encapsulates the\n       request (see Section 3.2.1.2 or 3.2.2), the GLA verifies\
    \ the\n       outer signature and/or decrypts the outer layer prior to\n     \
    \  verifying the signature on the innermost SignedData.\n     2.a - If the signingTime\
    \ attribute value is not within the locally\n           accepted time window,\
    \ the GLA MAY return a response\n           indicating cMCStatus.failed and otherInfo.failInfo.badTime\n\
    \           and a signingTime attribute.\n     2.b - Else if signature processing\
    \ continues and if the signatures\n           cannot be verified, the GLA returns\
    \ a cMCStatusInfoExt\n           response indicating cMCStatus.failed and\n  \
    \         otherInfo.failInfo.badMessageCheck.  Additionally, a\n           signingTime\
    \ attribute is included with the response.\n     2.c - Else if the signatures\
    \ verify, the GLA makes sure the GL is\n           supported by checking that\
    \ the indicated GL name matches a\n           glName stored on the GLA.\n    \
    \   2.c.1 - If the glName is not supported by the GLA, the GLA\n             \
    \  returns a response indicating cMCStatusInfoExt with\n               cMCStatus.failed\
    \ and\n               otherInfo.extendedFailInfo.SKDFailInfo value of\n      \
    \         invalidGLName.  Additionally, a signingTime attribute is\n         \
    \      included with the response.\n       2.c.2 - Else if the glName is supported\
    \ by the GLA, the GLA\n               checks who signed the request.  For GLOs,\
    \ one of the\n               names in the certificate used to sign the request\
    \ needs\n               to match a registered GLO.  For the member, the name in\n\
    \               glMember.glMemberName needs to match one of the names in\n   \
    \            the certificate used to sign the request.\n         2.c.2.a - If\
    \ the GLO signed the request, the GLA generates a\n                   glKey message\
    \ as described in Section 5 to rekey the\n                   GL (4 in Figure 9).\n\
    \         2.c.2.b - Else if someone other than the GLO signed the\n          \
    \         request, the GLA forwards the glkCompromise message\n              \
    \     (see Section 3.2.3) to the GLO (2{1} in Figure 9).\n                   If\
    \ there is more than one GLO, to which GLO the\n                   request is\
    \ forwarded is beyond the scope of this\n                   document.  Further\
    \ processing by the GLO is discussed\n                   in Section 4.7.2.\n"
- title: 4.7.2.  GLO Initiated KEK Compromise Message
  contents:
  - "4.7.2.  GLO Initiated KEK Compromise Message\n   The process for GLO initiated\
    \ glkCompromise messages is as follows:\n   1 - The GLO either:\n     1.a - Generates\
    \ the glkCompromise message itself by sending a\n           SignedData.PKIData.controlSequence.glkCompromise\
    \ request to\n           the GLA (5 in Figure 9).  The GLO includes the name of\
    \ the GL\n           in GeneralName.  The GLO MUST also include a signingTime\n\
    \           attribute with this request.\n       1.a.1 - The GLO can optionally\
    \ apply confidentiality to the\n               request by encapsulating the SignedData.PKIData\
    \ in an\n               EnvelopedData (see Section 3.2.1.2).  The glkCompromise\n\
    \               can be included in an EnvelopedData generated with the\n     \
    \          compromised shared KEK.\n       1.a.2 - The GLO can also optionally\
    \ apply another SignedData over\n               the EnvelopedData (see Section\
    \ 3.2.1.2).\n     1.b - Otherwise, checks the signingTime and verifies the GLA\
    \ and GL\n           member signatures on the forwarded glkCompromise message.\
    \  If\n           an additional SignedData and/or EnvelopedData encapsulates\n\
    \           the request (see Section 3.2.1.2 or 3.2.2), the GLO verifies\n   \
    \        the outer signature and/or decrypts the outer layer prior to\n      \
    \     verifying the signature on the innermost SignedData.\n       1.b.1 - If\
    \ the signingTime attribute value is not within the\n               locally accepted\
    \ time window, the GLO MAY return a\n               response indicating cMCStatus.failed\
    \ and\n               otherInfo.failInfo.badTime and a signingTime attribute.\n\
    \       1.b.2 - Else if signature processing continues and if the\n          \
    \     signatures cannot be verified, the GLO returns a\n               cMCStatusInfoExt\
    \ response indicating cMCStatus.failed and\n               otherInfo.failInfo.badMessageCheck.\
    \  Additionally, a\n               signingTime attribute is included with the\
    \ response.\n         1.b.2.a - If the signatures verify, the GLO checks that\
    \ the\n                   names in the certificate match the name of the signer\n\
    \                   (i.e., the name in the certificate used to sign the\n    \
    \               GL member's request is the GL member).\n           1.b.2.a.1 -\
    \ If either name does not match, the GLO ought not\n                       trust\
    \ the signer and it ought not forward the\n                       message to the\
    \ GLA.\n           1.b.2.a.2 - Else if the names match and the signatures\n  \
    \                     verify, the GLO determines whether to forward the\n    \
    \                   glkCompromise message back to the GLA (3{1} in\n         \
    \              Figure 9).  Further processing by the GLA is in 2\n           \
    \            of Section 4.7.1.  The GLO can also return a\n                  \
    \     response to the prospective member with\n                       cMCStatusInfoExt.cMCtatus.success\
    \ indicating that\n                       the glkCompromise message was successfully\n\
    \                       received.\n"
- title: 4.8.  Request KEK Refresh
  contents:
  - "4.8.  Request KEK Refresh\n   There will be times when GL members have irrecoverably\
    \ lost their\n   shared KEK.  The shared KEK is not compromised and a rekey of\
    \ the\n   entire GL is not necessary.  GL members use the glkRefresh message to\n\
    \   request that the shared KEK(s) be redistributed to them.  Figure 10\n   depicts\
    \ the protocol interactions for GL Key Refresh.  Note that\n   error messages\
    \ are not shown.  Additionally, behavior for the\n   optional transactionId, senderNonce,\
    \ and recipientNonce CMC control\n   attributes is not addressed in these procedures.\n\
    \   +-----+   1       2   +----------+\n   | GLA | <-----------> |  Member  |\n\
    \   +-----+               +----------+\n      Figure 10 - GL KEK Refresh\n   The\
    \ process for glkRefresh is as follows:\n   1 - The GL member sends a\n      \
    \ SignedData.PKIData.controlSequence.glkRefresh request to the GLA\n       (1\
    \ in Figure 10).  The GL member includes name of the GL in\n       GeneralName.\
    \  The GL member MUST also include a signingTime\n       attribute with this request.\n\
    \     1.a - The GL member can optionally apply confidentiality to the\n      \
    \     request by encapsulating the SignedData.PKIData in an\n           EnvelopedData\
    \ (see Section 3.2.1.2).\n     1.b - The GL member can also optionally apply another\
    \ SignedData\n           over the EnvelopedData (see Section 3.2.1.2).\n   2 -\
    \ Upon receipt of the glkRefresh request, the GLA checks the\n       signingTime\
    \ and verifies the GL member signature(s).  If an\n       additional SignedData\
    \ and/or EnvelopedData encapsulates the\n       request (see Section 3.2.1.2 or\
    \ 3.2.2), the GLA verifies the\n       outer signature and/or decrypt the outer\
    \ layer prior to verifying\n       the signature on the innermost SignedData.\n\
    \     2.a - If the signingTime attribute value is not within the locally\n   \
    \        accepted time window, the GLA MAY return a response\n           indicating\
    \ cMCStatus.failed and otherInfo.failInfo.badTime\n           and a signingTime\
    \ attribute.\n     2.b - Else if signature processing continues and if the signatures\n\
    \           cannot be verified, the GLA returns a cMCStatusInfoExt\n         \
    \  response indicating cMCStatus.failed and\n           otherInfo.failInfo.badMessageCheck.\
    \  Additionally, a\n           signingTime attribute is included with the response.\n\
    \     2.c - Else if the signatures verify, the GLA makes sure the GL is\n    \
    \       supported by checking that the GLGeneralName matches a glName\n      \
    \     stored on the GLA.\n       2.c.1 - If the name of the GL is not supported\
    \ by the GLA, the\n               GLA returns a response indicating cMCStatusInfoExt\
    \ with\n               cMCStatus.failed and\n               otherInfo.extendedFailInfo.SKDFailInfo\
    \ value of\n               invalidGLName.  Additionally, a signingTime attribute\
    \ is\n               included with the response.\n       2.c.2 - Else if the glName\
    \ is supported by the GLA, the GLA\n               ensures that the GL member\
    \ is on the GL.\n         2.c.2.a - If the glMemberName is not present on the\
    \ GL, the GLA\n                   returns a response indicating cMCStatusInfoExt\
    \ with\n                   cMCStatus.failed and\n                   otherInfo.extendedFailInfo.SKDFailInfo\
    \ value of\n                   noSpam.  Additionally, a signingTime attribute\
    \ is\n                   included with the response.\n         2.c.2.b - Else\
    \ if the glMemberName is present on the GL, the\n                   GLA returns\
    \ a cMCStatusInfoExt.cMCStatus.success, a\n                   signingTime attribute,\
    \ and a glKey message (2 in\n                   Figure 10) as described in Section\
    \ 5.\n"
- title: 4.9.  GLA Query Request and Response
  contents:
  - "4.9.  GLA Query Request and Response\n   There will be certain times when a GLO\
    \ is having trouble setting up a\n   GL because it does not know the algorithm(s)\
    \ or some other\n   characteristic that the GLA supports.  There can also be times\
    \ when\n   prospective GL members or GL members need to know something about the\n\
    \   GLA (these requests are not defined in the document).  The\n   glaQueryRequest\
    \ and glaQueryResponse messages have been defined to\n   support determining this\
    \ information.  Figure 11 depicts the protocol\n   interactions for glaQueryRequest\
    \ and glaQueryResponse.  Note that\n   error messages are not shown.  Additionally,\
    \ behavior for the\n   optional transactionId, senderNonce, and recipientNonce\
    \ CMC control\n   attributes is not addressed in these procedures.\n         +-----+\
    \   1    2  +------------------+\n         | GLA | <-------> | GLO or GL Member\
    \ |\n         +-----+           +------------------+\n   Figure 11 - GLA Query\
    \ Request and Response\n   The process for glaQueryRequest and glaQueryResponse\
    \ is as follows:\n   1 - The GLO, GL member, or prospective GL member sends a\n\
    \       SignedData.PKIData.controlSequence.glaQueryRequest request to the\n  \
    \     GLA (1 in Figure 11).  The GLO, GL member, or prospective GL\n       member\
    \ indicates the information it is interested in receiving\n       from the GLA.\
    \  Additionally, a signingTime attribute is included\n       with this request.\n\
    \     1.a - The GLO, GL member, or prospective GL member can optionally\n    \
    \       apply confidentiality to the request by encapsulating the\n          \
    \ SignedData.PKIData in an EnvelopedData (see Section 3.2.1.2).\n     1.b - The\
    \ GLO, GL member, or prospective GL member can also\n           optionally apply\
    \ another SignedData over the EnvelopedData\n           (see Section 3.2.1.2).\n\
    \   2 - Upon receipt of the glaQueryRequest, the GLA determines if it\n      \
    \ accepts glaQueryRequest messages.\n     2.a - If the GLA does not accept glaQueryRequest\
    \ messages, the GLA\n           returns a cMCStatusInfoExt response indicating\n\
    \           cMCStatus.noSupport and any other information in\n           statusString.\n\
    \     2.b - Else if the GLA does accept GLAQueryRequests, the GLA checks\n   \
    \        the signingTime and verifies the GLO, GL member, or\n           prospective\
    \ GL member signature(s).  If an additional\n           SignedData and/or EnvelopedData\
    \ encapsulates the request (see\n           Section 3.2.1.2 or 3.2.2), the GLA\
    \ verifies the outer\n           signature and/or decrypts the outer layer prior\
    \ to verifying\n           the signature on the innermost SignedData.\n      \
    \ 2.b.1 - If the signingTime attribute value is not within the\n             \
    \  locally accepted time window, the GLA MAY return a\n               response\
    \ indicating cMCStatus.failed and\n               otherInfo.failInfo.badTime and\
    \ a signingTime attribute.\n       2.b.2 - Else if the signature processing continues\
    \ and if the\n               signatures cannot be verified, the GLA returns a\n\
    \               cMCStatusInfoExt response indicating cMCStatus.failed and\n  \
    \             otherInfo.failInfo.badMessageCheck.  Additionally, a\n         \
    \      signingTime attribute is included with the response.\n       2.b.3 - Else\
    \ if the signatures verify, the GLA returns a\n               glaQueryResponse\
    \ (2 in Figure 11) with the correct\n               response if the glaRequestType\
    \ is supported or returns a\n               cMCStatusInfoExt response indicating\
    \ cMCStatus.noSupport\n               if the glaRequestType is not supported.\
    \  Additionally, a\n               signingTime attribute is included with the\
    \ response.\n         2.b.3.a - The GLA applies confidentiality to the response\
    \ by\n                   encapsulating the SignedData.PKIResponse in an\n    \
    \               EnvelopedData if the request was encapsulated in an\n        \
    \           EnvelopedData (see Section 3.2.1.2).\n         2.b.3.b - The GLA can\
    \ also optionally apply another SignedData\n                   over the EnvelopedData\
    \ (see Section 3.2.1.2).\n   3 - Upon receipt of the glaQueryResponse, the GLO,\
    \ GL member, or\n       prospective GL member checks the signingTime and verifies\
    \ the GLA\n       signature(s).  If an additional SignedData and/or EnvelopedData\n\
    \       encapsulates the response (see Section 3.2.1.2 or 3.2.2), the\n      \
    \ GLO, GL member, or prospective GL member verifies the outer\n       signature\
    \ and/or decrypts the outer layer prior to verifying the\n       signature on\
    \ the innermost SignedData.\n     3.a - If the signingTime attribute value is\
    \ not within the locally\n           accepted time window, the GLO, GL member,\
    \ or prospective GL\n           member MAY return a response indicating cMCStatus.failed\
    \ and\n           otherInfo.failInfo.badTime and a signingTime attribute.\n  \
    \   3.b - Else if signature processing continues and if the signatures\n     \
    \      do not verify, the GLO, GL member, or prospective GL member\n         \
    \  returns a cMCStatusInfoExt response indicating\n           cMCStatus.failed\
    \ and otherInfo.failInfo.badMessageCheck.\n           Additionally, a signingTime\
    \ attribute is included with the\n           response.\n     3.c - Else if the\
    \ signatures verify, then the GLO, GL member, or\n           prospective GL member\
    \ checks that one of the names in the\n           certificate used to sign the\
    \ response matches the name of the\n           GL.\n       3.c.1 - If the name\
    \ of the GL does not match the name present in\n               the certificate\
    \ used to sign the message, the GLO ought\n               not believe the response.\n\
    \       3.c.2 - Else if the name of the GL matches the name present in\n     \
    \          the certificate and the response was glaQueryResponse,\n          \
    \     then the GLO, GL member, or prospective GL member may use\n            \
    \   the information contained therein.\n"
- title: 4.10.  Update Member Certificate
  contents:
  - "4.10.  Update Member Certificate\n   When the GLO generates a glAddMember request,\
    \ when the GLA generates\n   a glKey message, or when the GLA processes a glAddMember,\
    \ there can\n   be instances when the GL member's certificate has expired or is\n\
    \   invalid.  In these instances, the GLO or GLA may request that the GL\n   member\
    \ provide a new certificate to avoid the GLA from being unable\n   to generate\
    \ a glKey message for the GL member.  There might also be\n   times when the GL\
    \ member knows that its certificate is about to\n   expire or has been revoked,\
    \ and GL member will not be able to receive\n   GL rekeys.  Behavior for the optional\
    \ transactionId, senderNonce, and\n   recipientNonce CMC control attributes is\
    \ not addressed in these\n   procedures.\n"
- title: 4.10.1.  GLO and GLA Initiated Update Member Certificate
  contents:
  - "4.10.1.  GLO and GLA Initiated Update Member Certificate\n   The process for\
    \ GLO initiated glUpdateCert is as follows:\n   1 - The GLO or GLA sends a\n \
    \      SignedData.PKIData.controlSequence.glProvideCert request to the\n     \
    \  GL member.  The GLO or GLA indicates the GL name in glName and\n       the\
    \ GL member name in glMemberName.  Additionally, a signingTime\n       attribute\
    \ is included with this request.\n     1.a - The GLO or GLA can optionally apply\
    \ confidentiality to the\n           request by encapsulating the SignedData.PKIData\
    \ in an\n           EnvelopedData (see Section 3.2.1.2).  If the GL member's PKC\n\
    \           has been revoked, the GLO or GLA ought not use it to generate\n  \
    \         the EnvelopedData that encapsulates the glProvideCert\n           request.\n\
    \     1.b - The GLO or GLA can also optionally apply another SignedData\n    \
    \       over the EnvelopedData (see Section 3.2.1.2).\n   2 - Upon receipt of\
    \ the glProvideCert message, the GL member checks\n       the signingTime and\
    \ verifies the GLO or GLA signature(s).  If an\n       additional SignedData and/or\
    \ EnvelopedData encapsulates the\n       response (see Section 3.2.1.2 or 3.2.2),\
    \ the GL member verifies\n       the outer signature and/or decrypts the outer\
    \ layer prior to\n       verifying the signature on the innermost SignedData.\n\
    \     2.a - If the signingTime attribute value is not within the locally\n   \
    \        accepted time window, the GL member MAY return a response\n         \
    \  indicating cMCStatus.failed and otherInfo.failInfo.badTime\n           and\
    \ a signingTime attribute.\n     2.b - Else if signature processing continues\
    \ and if the signatures\n           cannot be verified, the GL member returns\
    \ a cMCStatusInfoExt\n           response indicating cMCStatus.failed and\n  \
    \         otherInfo.failInfo.badMessageCheck.  Additionally, a\n           signingTime\
    \ attribute is included with the response.\n     2.c - Else if the signatures\
    \ verify, the GL member generates a\n           Signed.PKIResponse.controlSequence.glUpdateCert\
    \ that includes\n           the GL name in glName, the member's name in\n    \
    \       glMember.glMemberName, the member's encryption certificate in\n      \
    \     glMember.certificates.pKC.  The GL member can also include\n           any\
    \ attribute certificates associated with the member's\n           encryption certificate\
    \ in glMember.certificates.aC, and the\n           certification path associated\
    \ with the member's encryption\n           and attribute certificates in glMember.certificates.certPath.\n\
    \           Additionally, a signingTime attribute is included with the\n     \
    \      response.\n       2.c.1 - The GL member can optionally apply confidentiality\
    \ to the\n               request by encapsulating the SignedData.PKIResponse in\
    \ an\n               EnvelopedData (see Section 3.2.1.2).  If the GL member's\n\
    \               PKC has been revoked, the GL member ought not use it to\n    \
    \           generate the EnvelopedData that encapsulates the\n               glProvideCert\
    \ request.\n       2.c.2 - The GL member can also optionally apply another\n \
    \              SignedData over the EnvelopedData (see Section 3.2.1.2).\n   3\
    \ - Upon receipt of the glUpdateCert message, the GLO or GLA checks\n       the\
    \ signingTime and verifies the GL member signature(s).  If an\n       additional\
    \ SignedData and/or EnvelopedData encapsulates the\n       response (see Section\
    \ 3.2.1.2 or 3.2.2), the GL member verifies\n       the outer signature and/or\
    \ decrypts the outer layer prior to\n       verifying the signature on the innermost\
    \ SignedData.\n     3.a - If the signingTime attribute value is not within the\
    \ locally\n           accepted time window, the GLO or GLA MAY return a response\n\
    \           indicating cMCStatus.failed and otherInfo.failInfo.badTime\n     \
    \      and a signingTime attribute.\n     3.b - Else if signature processing continues\
    \ and if the signatures\n           cannot be verified, the GLO or GLA returns\
    \ a cMCStatusInfoExt\n           response indicating cMCStatus.failed and\n  \
    \         otherInfo.failInfo.badMessageCheck.  Additionally, a\n           signingTime\
    \ attribute is included with the response.\n     3.c - Else if the signatures\
    \ verify, the GLO or GLA verifies the\n           member's encryption certificate.\n\
    \       3.c.1 - If the member's encryption certificate cannot be\n           \
    \    verified, the GLO returns either another glProvideCert\n               request\
    \ or a cMCStatusInfoExt with cMCStatus.failed and\n               the reason why\
    \ in cMCStatus.statusString. glProvideCert\n               should be returned\
    \ only a certain number of times is\n               because if the GL member does\
    \ not have a valid\n               certificate it will never be able to return\
    \ one.\n               Additionally, a signingTime attribute is included with\n\
    \               either response.\n       3.c.2 - Else if the member's encryption\
    \ certificate cannot be\n               verified, the GLA returns another glProvideCert\
    \ request\n               to the GL member or a cMCStatusInfoExt with\n      \
    \         cMCStatus.failed and the reason why in\n               cMCStatus.statusString\
    \ to the GLO. glProvideCert should\n               be returned only a certain\
    \ number of times because if the\n               GL member does not have a valid\
    \ certificate it will never\n               be able to return one.  Additionally,\
    \ a signingTime\n               attribute is included with the response.\n   \
    \    3.c.3 - Else if the member's encryption certificate verifies, the\n     \
    \          GLO or GLA will use it in subsequent glAddMember requests\n       \
    \        and glKey messages associated with the GL member.\n"
- title: 4.10.2.  GL Member Initiated Update Member Certificate
  contents:
  - "4.10.2.  GL Member Initiated Update Member Certificate\n   The process for an\
    \ unsolicited GL member glUpdateCert is as follows:\n   1 - The GL member sends\
    \ a Signed.PKIData.controlSequence.glUpdateCert\n       that includes the GL name\
    \ in glName, the member's name in\n       glMember.glMemberName, the member's\
    \ encryption certificate in\n       glMember.certificates.pKC.  The GL member\
    \ can also include any\n       attribute certificates associated with the member's\
    \ encryption\n       certificate in glMember.certificates.aC, and the certification\n\
    \       path associated with the member's encryption and attribute\n       certificates\
    \ in glMember.certificates.certPath.  The GL member\n       MUST also include\
    \ a signingTime attribute with this request.\n     1.a - The GL member can optionally\
    \ apply confidentiality to the\n           request by encapsulating the SignedData.PKIData\
    \ in an\n           EnvelopedData (see Section 3.2.1.2).  If the GL member's PKC\n\
    \           has been revoked, the GLO or GLA ought not use it to generate\n  \
    \         the EnvelopedData that encapsulates the glProvideCert\n           request.\n\
    \     1.b - The GL member can also optionally apply another SignedData\n     \
    \      over the EnvelopedData (see Section 3.2.1.2).\n   2 - Upon receipt of the\
    \ glUpdateCert message, the GLA checks the\n       signingTime and verifies the\
    \ GL member signature(s).  If an\n       additional SignedData and/or EnvelopedData\
    \ encapsulates the\n       response (see Section 3.2.1.2 or 3.2.2), the GLA verifies\
    \ the\n       outer signature and/or decrypts the outer layer prior to\n     \
    \  verifying the signature on the innermost SignedData.\n     2.a - If the signingTime\
    \ attribute value is not within the locally\n           accepted time window,\
    \ the GLA MAY return a response\n           indicating cMCStatus.failed and otherInfo.failInfo.badTime\n\
    \           and a signingTime attribute.\n     2.b - Else if signature processing\
    \ continues and if the signatures\n           cannot be verified, the GLA returns\
    \ a cMCStatusInfoExt\n           response indicating cMCStatus.failed and\n  \
    \         otherInfo.failInfo.badMessageCheck.\n     2.c - Else if the signatures\
    \ verify, the GLA verifies the member's\n           encryption certificate.\n\
    \       2.c.1 - If the member's encryption certificate cannot be\n           \
    \    verified, the GLA returns another glProvideCert request\n               to\
    \ the GL member or a cMCStatusInfoExt with\n               cMCStatus.failed and\
    \ the reason why in\n               cMCStatus.statusString to the GLO. glProvideCert\
    \ ought\n               not be returned indefinitely;  if the GL member does not\n\
    \               have a valid certificate it will never be able to return\n   \
    \            one.  Additionally, a signingTime attribute is included\n       \
    \        with the response.\n       2.c.2 - Else if the member's encryption certificate\
    \ verifies, the\n               GLA will use it in subsequent glAddMember requests\
    \ and\n               glKey messages associated with the GL member.  The GLA\n\
    \               also forwards the glUpdateCert message to the GLO.\n"
- title: 5.  Distribution Message
  contents:
  - "5.  Distribution Message\n   The GLA uses the glKey message to distribute new,\
    \ shared KEK(s) after\n   receiving glAddMember, glDeleteMember (for closed and\
    \ managed GLs),\n   glRekey, glkCompromise, or glkRefresh requests and returning\
    \ a\n   cMCStatusInfoExt response for the respective request.  Figure 12\n   depicts\
    \ the protocol interactions to send out glKey messages.  Unlike\n   the procedures\
    \ defined for the administrative messages, the\n   procedures defined in this\
    \ section MUST be implemented by GLAs for\n   origination and by GL members on\
    \ reception.  Note that error messages\n   are not shown.  Additionally, behavior\
    \ for the optional\n   transactionId, senderNonce, and recipientNonce CMC control\
    \ attributes\n   is not addressed in these procedures.\n                     1\
    \   +----------+\n               +-------> | Member 1 |\n               |    \
    \     +----------+\n   +-----+     |     1   +----------+\n   | GLA | ----+------->\
    \ |   ...    |\n   +-----+     |         +----------+\n               |     1\
    \   +----------+\n               +-------> | Member n |\n                    \
    \     +----------+\n   Figure 12 - GL Key Distribution\n   If the GL was set up\
    \ with GLKeyAttributes.recipientsNotMutuallyAware\n   set to TRUE, a separate\
    \ glKey message MUST be sent to each GL member\n   so as not to divulge information\
    \ about the other GL members.\n   When the glKey message is generated as a result\
    \ of a:\n     - glAddMember request,\n     - glkComrpomise indication,\n     -\
    \ glkRefresh request,\n     - glDeleteMember request with the GL's glAdministration\
    \ set to\n       managed or closed, and\n     - glRekey request with generationCounter\
    \ set to zero (0).\n   The GLA MUST use either the kari (see Section 12.3.2 of\
    \ [CMS]) or\n   ktri (see Section 12.3.1 of [CMS]) choice in\n   glKey.glkWrapped.RecipientInfo\
    \ to ensure that only the intended\n   recipients receive the shared KEK.  The\
    \ GLA MUST support the ktri\n   choice.\n   When the glKey message is generated\
    \ as a result of a glRekey request\n   with generationCounter greater than zero\
    \ (0) or when the GLA controls\n   rekeys, the GLA MAY use the kari, ktri, or\
    \ kekri (see Section 12.3.3\n   of [CMS]) in glKey.glkWrapped.RecipientInfo to\
    \ ensure that only the\n   intended recipients receive the shared KEK.  The GLA\
    \ MUST support the\n   RecipientInfo.ktri choice.\n"
- title: 5.1.  Distribution Process
  contents:
  - "5.1.  Distribution Process\n   When a glKey message is generated, the process\
    \ is as follows:\n   1 - The GLA MUST send a SignedData.PKIData.controlSequence.glKey\
    \ to\n       each member by including glName, glIdentifier, glkWrapped,\n    \
    \   glkAlgorithm, glkNotBefore, and glkNotAfter.  If the GLA cannot\n       generate\
    \ a glKey message for the GL member because the GL\n       member's PKC has expired\
    \ or is otherwise invalid, the GLA MAY\n       send a glUpdateCert to the GL member\
    \ requesting a new certificate\n       be provided (see Section 4.10).  The number\
    \ of glKey messages\n       generated for the GL is described in Section 3.1.13.\n\
    \       Additionally, a signingTime attribute is included with the\n       distribution\
    \ message(s).\n     1.a - The GLA MAY optionally apply another confidentiality\
    \ layer to\n           the message by encapsulating the SignedData.PKIData in\n\
    \           another EnvelopedData (see Section 3.2.1.2).\n     1.b - The GLA MAY\
    \ also optionally apply another SignedData over the\n           EnvelopedData.SignedData.PKIData\
    \ (see Section 3.2.1.2).\n   2 - Upon receipt of the glKey message, the GL members\
    \ MUST check the\n       signingTime and verify the signature over the innermost\n\
    \       SignedData.PKIData.  If an additional SignedData and/or\n       EnvelopedData\
    \ encapsulates the message (see Section 3.2.1.2 or\n       3.2.2), the GL member\
    \ MUST verify the outer signature and/or\n       decrypt the outer layer prior\
    \ to verifying the signature on the\n       SignedData.PKIData.controlSequence.glKey.\n\
    \     2.a - If the signingTime attribute value is not within the locally\n   \
    \        accepted time window, the GLA MAY return a response\n           indicating\
    \ cMCStatus.failed and otherInfo.failInfo.badTime\n           and a signingTime\
    \ attribute.\n     2.b - Else if signature processing continues and if the signatures\n\
    \           cannot be verified, the GL member MUST return a\n           cMCStatusInfoExt\
    \ response indicating cMCStatus.failed and\n           otherInfo.failInfo.badMessageCheck.\
    \  Additionally, a\n           signingTime attribute is included with the response.\n\
    \     2.c - Else if the signatures verify, the GL member processes the\n     \
    \      RecipientInfos according to [CMS].  Once unwrapped, the GL\n          \
    \ member should store the shared KEK in a safe place.  When\n           stored,\
    \ the glName, glIdentifier, and shared KEK should be\n           associated. \
    \ Additionally, the GL member MUST return a\n           cMCStatusInfoExt indicating\
    \ cMCStatus.success to tell the GLA\n           the KEK was received.\n"
- title: 6.  Algorithms
  contents:
  - "6.  Algorithms\n   This section lists the algorithms that MUST be implemented.\n\
    \   Additional algorithms that SHOULD be implemented are also included.\n   Further\
    \ algorithms MAY also be implemented.\n"
- title: 6.1.  KEK Generation Algorithm
  contents:
  - "6.1.  KEK Generation Algorithm\n   Implementations MUST randomly generate content-encryption\
    \ keys,\n   message-authentication keys, initialization vectors (IVs), and\n \
    \  padding.  Also, the generation of public/private key pairs relies on\n   a\
    \ random numbers.  The use of inadequate pseudo-random number\n   generators (PRNGs)\
    \ to generate cryptographic keys can result in\n   little or no security.  An\
    \ attacker may find it much easier to\n   reproduce the PRNG environment that\
    \ produced the keys, searching the\n   resulting small set of possibilities, rather\
    \ than brute force\n   searching the whole key space.  The generation of quality\
    \ random\n   numbers is difficult.  RFC 4086 [RANDOM] offers important guidance\
    \ in\n   this area, and Appendix 3 of FIPS Pub 186 [FIPS] provides one quality\n\
    \   PRNG technique.\n"
- title: 6.2.  Shared KEK Wrap Algorithm
  contents:
  - "6.2.  Shared KEK Wrap Algorithm\n   In the mechanisms described in Section 5,\
    \ the shared KEK being\n   distributed in glkWrapped MUST be protected by a key\
    \ of equal or\n   greater length (e.g., if an AES 128-bit key is being distributed,\
    \ a\n   key of 128 bits or greater must be used to protect the key).\n   The algorithm\
    \ object identifiers included in glkWrapped are as\n   specified in [CMSALG] and\
    \ [CMSAES].\n"
- title: 6.3.  Shared KEK Algorithm
  contents:
  - "6.3.  Shared KEK Algorithm\n   The shared KEK distributed and indicated in glkAlgorithm\
    \ MUST support\n   the symmetric key-encryption algorithms as specified in [CMSALG]\
    \ and\n   [CMSAES].\n"
- title: 7.  Message Transport
  contents:
  - "7.  Message Transport\n   SMTP [SMTP] MUST be supported.  Other transport mechanisms\
    \ MAY also\n   be supported.\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   As GLOs control setting up and tearing down the\
    \ GL and rekeying the\n   GL, and can control member additions and deletions,\
    \ GLOs play an\n   important role in the management of the GL, and only \"trusted\"\
    \ GLOs\n   should be used.\n   If a member is deleted or removed from a closed\
    \ or a managed GL, the\n   GL needs to be rekeyed.  If the GL is not rekeyed after\
    \ a member is\n   removed or deleted, the member still possesses the group key\
    \ and will\n   be able to continue to decrypt any messages that can be obtained.\n\
    \   Members who store KEKs MUST associate the name of the GLA that\n   distributed\
    \ the key so that the members can make sure subsequent\n   rekeys are originated\
    \ from the same entity.\n   When generating keys, care should be taken to ensure\
    \ that the key\n   size is not too small and duration too long because attackers\
    \ will\n   have more time to attack the key.  Key size should be selected to\n\
    \   adequately protect sensitive business communications.\n   GLOs and GLAs need\
    \ to make sure that the generationCounter and\n   duration are not too large.\
    \  For example, if the GLO indicates that\n   the generationCounter is 14 and\
    \ the duration is one year, then 14\n   keys are generated each with a validity\
    \ period of a year.  An\n   attacker will have at least 13 years to attack the\
    \ final key.\n   Assume that two or more parties have a shared KEK, and the shared\
    \ KEK\n   is used to encrypt a second KEK for confidential distribution to\n \
    \  those parties.  The second KEK might be used to encrypt a third KEK,\n   the\
    \ third KEK might be used to encrypt a fourth KEK, and so on.  If\n   any of the\
    \ KEKs in such a chain is compromised, all of the subsequent\n   KEKs in the chain\
    \ MUST also be considered compromised.\n   An attacker can attack the group's\
    \ shared KEK by attacking one\n   member's copy of the shared KEK or attacking\
    \ multiple members' copies\n   of the shared KEK.  For the attacker, it may be\
    \ easier to either\n   attack the group member with the weakest security protecting\
    \ its copy\n   of the shared KEK or attack multiple group members.\n   An aggregation\
    \ of the information gathered during the attack(s) may\n   lead to the compromise\
    \ of the group's shared KEK.  Mechanisms to\n   protect the shared KEK should\
    \ be commensurate with value of the data\n   being protected.\n   The nonce and\
    \ signingTime attributes are used to protect against\n   replay attacks.  However,\
    \ these provisions are only helpful if\n   entities maintain state information\
    \ about the messages they have sent\n   or received for comparison.  If sufficient\
    \ information is not\n   maintained on each exchange, nonces and signingTime are\
    \ not helpful.\n   Local policy determines the amount and duration of state information\n\
    \   that is maintained.  Additionally, without a unified time source,\n   there\
    \ is the possibility of clocks drifting.  Local policy determines\n   the acceptable\
    \ difference between the local time and signingTime,\n   which must compensate\
    \ for unsynchronized clocks.  Implementations\n   MUST handle messages with siginingTime\
    \ attributes that indicate they\n   were created in the future.\n"
- title: 9. Acknowledgements
  contents:
  - "9. Acknowledgements\n   Thanks to Russ Housley and Jim Schaad for providing much\
    \ of the\n   background and review required to write this document.\n"
- title: 10.  References
  contents:
  - '10.  References

    '
- title: 10.1.  Normative References
  contents:
  - "10.1.  Normative References\n   [RFC2119]    Bradner, S., \"Key words for use\
    \ in RFCs to Indicate\n                Requirement Levels\", BCP 14, RFC 2119,\
    \ March 1997.\n   [CMS]        Housley, R., \"Cryptographic Message Syntax (CMS)\"\
    , RFC\n                3852, July 2004.\n   [CMC]        Schaad, J. and M. Myers,\
    \ \"Certificate Management over\n                CMS (CMC)\", RFC 5272, June 2008.\n\
    \   [PROFILE]    Cooper, D., Santesson, S., Farrell, S., Boeyen, S.,\n       \
    \         Housley, R., and W. Polk, \"Internet X.509 Public Key\n            \
    \    Infrastructure Certificate and Certificate Revocation\n                List\
    \ (CRL) Profile\", RFC 5280, May 2008.\n   [ACPROF]     Farrell, S. and R. Housley,\
    \ \"An Internet Attribute\n                Certificate Profile for Authorization\"\
    , RFC 3281, April\n                2002.\n   [MSG]        Ramsdell, B., Ed., \"\
    Secure/Multipurpose Internet Mail\n                Extensions (S/MIME) Version\
    \ 3.1 Message Specification\",\n                RFC 3851, July 2004.\n   [ESS]\
    \        Hoffman, P., Ed., \"Enhanced Security Services for\n                S/MIME\"\
    , RFC 2634, June 1999.\n   [CMSALG]     Housley, R., \"Cryptographic Message Syntax\
    \ (CMS)\n                Algorithms\", RFC 3370, August 2002.\n   [CMSAES]   \
    \  Schaad, J., \"Use of the Advanced Encryption Standard\n                (AES)\
    \ Encryption Algorithm in Cryptographic Message\n                Syntax (CMS)\"\
    , RFC 3565, July 2003.\n   [SMTP]       Klensin, J., Ed., \"Simple Mail Transfer\
    \ Protocol\", RFC\n                2821, April 2001.\n"
- title: 10.2.  Informative References
  contents:
  - "10.2.  Informative References\n   [X400TRANS]  Hoffman, P. and C. Bonatti, \"\
    Transporting\n                Secure/Multipurpose Internet Mail Extensions (S/MIME)\n\
    \                Objects in X.400\", RFC 3855, July 2004.\n   [RANDOM]     Eastlake,\
    \ D., 3rd, Schiller, J., and S. Crocker,\n                \"Randomness Requirements\
    \ for Security\", BCP 106, RFC\n                4086, June 2005.\n   [FIPS]  \
    \     National Institute of Standards and Technology, FIPS Pub\n             \
    \   186-2: Digital Signature Standard, January 2000.\n"
- title: Appendix A.  ASN.1 Module
  contents:
  - "Appendix A.  ASN.1 Module\n   SMIMESymmetricKeyDistribution\n     { iso(1) member-body(2)\
    \ us(840) rsadsi(113549) pkcs(1)\n       pkcs-9(9) smime(16) modules(0) symkeydist(12)\
    \ }\n   DEFINITIONS IMPLICIT TAGS ::=\n   BEGIN\n   -- EXPORTS All --\n   -- The\
    \ types and values defined in this module are exported for use\n   -- in the other\
    \ ASN.1 modules.  Other applications may use them for\n   -- their own purposes.\n\
    \   IMPORTS\n   -- PKIX Part 1 - Implicit [PROFILE]\n      GeneralName\n     \
    \   FROM PKIX1Implicit88 { iso(1) identified-organization(3) dod(6)\n        \
    \     internet(1) security(5) mechanisms(5) pkix(7) id-mod(0)\n             id-pkix1-implicit(19)\
    \ }\n   -- PKIX Part 1 - Explicit [PROFILE]\n      AlgorithmIdentifier, Certificate\n\
    \        FROM PKIX1Explicit88 { iso(1) identified-organization(3) dod(6)\n   \
    \          internet(1) security(5) mechanisms(5) pkix(7) id-mod(0)\n         \
    \    id-pkix1-explicit(18) }\n   -- Cryptographic Message Syntax [CMS]\n     \
    \ RecipientInfos, KEKIdentifier, CertificateSet\n        FROM CryptographicMessageSyntax2004\
    \ {iso(1) member-body(2)\n          us(840) rsadsi(113549) pkcs(1) pkcs-9(9) smime(16)\
    \ modules(0)\n          cms-2004(24) }\n   -- Advanced Encryption Standard (AES)\
    \ with CMS [CMSAES]\n      id-aes128-wrap\n        FROM CMSAesRsaesOaep { iso(1)\
    \ member-body(2) us(840)\n          rsadsi(113549) pkcs(1) pkcs-9(9) smime(16)\
    \ modules(0)\n          id-mod-cms-aes(19) }\n   -- Attribute Certificate Profile\
    \ [ACPROF]\n      AttributeCertificate FROM\n         PKIXAttributeCertificate\
    \ { iso(1) identified-organization(3)\n         dod(6) internet(1) security(5)\
    \ mechanisms(5) pkix(7)\n         id-mod(0) id-mod-attribute-cert(12) };\n   --\
    \ This defines the GL symmetric key distribution object identifier\n   -- arc.\n\
    \   id-skd OBJECT IDENTIFIER ::= { iso(1) member-body(2) us(840)\n     rsadsi(113549)\
    \ pkcs(1) pkcs-9(9) smime(16) skd(8) }\n   -- This defines the GL Use KEK control\
    \ attribute.\n   id-skd-glUseKEK OBJECT IDENTIFIER ::= { id-skd 1 }\n   GLUseKEK\
    \ ::= SEQUENCE {\n     glInfo                GLInfo,\n     glOwnerInfo       \
    \    SEQUENCE SIZE (1..MAX) OF GLOwnerInfo,\n     glAdministration      GLAdministration\
    \ DEFAULT 1,\n     glKeyAttributes       GLKeyAttributes OPTIONAL }\n   GLInfo\
    \ ::= SEQUENCE {\n     glName     GeneralName,\n     glAddress  GeneralName }\n\
    \   GLOwnerInfo ::= SEQUENCE {\n     glOwnerName     GeneralName,\n     glOwnerAddress\
    \  GeneralName,\n     certificates    Certificates OPTIONAL }\n   GLAdministration\
    \ ::= INTEGER {\n     unmanaged  (0),\n     managed    (1),\n     closed     (2)\
    \ }\n   GLKeyAttributes ::= SEQUENCE {\n     rekeyControlledByGLO       [0] BOOLEAN\
    \ DEFAULT FALSE,\n     recipientsNotMutuallyAware [1] BOOLEAN DEFAULT TRUE,\n\
    \     duration                   [2] INTEGER DEFAULT 0,\n     generationCounter\
    \          [3] INTEGER DEFAULT 2,\n     requestedAlgorithm         [4] AlgorithmIdentifier\n\
    \                                 DEFAULT { id-aes128-wrap } }\n   -- This defines\
    \ the Delete GL control attribute.\n   -- It has the simple type GeneralName.\n\
    \   id-skd-glDelete OBJECT IDENTIFIER ::= { id-skd 2 }\n   DeleteGL ::= GeneralName\n\
    \   -- This defines the Add GL Member control attribute.\n   id-skd-glAddMember\
    \ OBJECT IDENTIFIER ::= { id-skd 3 }\n   GLAddMember ::= SEQUENCE {\n     glName\
    \    GeneralName,\n     glMember  GLMember }\n   GLMember ::= SEQUENCE {\n   \
    \  glMemberName     GeneralName,\n     glMemberAddress  GeneralName OPTIONAL,\n\
    \     certificates     Certificates OPTIONAL }\n   Certificates ::= SEQUENCE {\n\
    \      pKC                [0] Certificate OPTIONAL,\n                        \
    \          -- See [PROFILE]\n      aC                 [1] SEQUENCE SIZE (1.. MAX)\
    \ OF\n                             AttributeCertificate OPTIONAL,\n          \
    \                        -- See [ACPROF]\n      certPath           [2] CertificateSet\
    \ OPTIONAL }\n                                  -- From [CMS]\n   -- This defines\
    \ the Delete GL Member control attribute.\n   id-skd-glDeleteMember OBJECT IDENTIFIER\
    \ ::= { id-skd 4 }\n   GLDeleteMember ::= SEQUENCE {\n     glName            GeneralName,\n\
    \     glMemberToDelete  GeneralName }\n   -- This defines the Delete GL Member\
    \ control attribute.\n   id-skd-glRekey OBJECT IDENTIFIER ::= { id-skd 5 }\n \
    \  GLRekey ::= SEQUENCE {\n     glName              GeneralName,\n     glAdministration\
    \    GLAdministration OPTIONAL,\n     glNewKeyAttributes  GLNewKeyAttributes OPTIONAL,\n\
    \     glRekeyAllGLKeys    BOOLEAN OPTIONAL }\n   GLNewKeyAttributes ::= SEQUENCE\
    \ {\n     rekeyControlledByGLO       [0] BOOLEAN OPTIONAL,\n     recipientsNotMutuallyAware\
    \ [1] BOOLEAN OPTIONAL,\n     duration                   [2] INTEGER OPTIONAL,\n\
    \     generationCounter          [3] INTEGER OPTIONAL,\n     requestedAlgorithm\
    \         [4] AlgorithmIdentifier OPTIONAL }\n   -- This defines the Add and Delete\
    \ GL Owner control attributes.\n   id-skd-glAddOwner OBJECT IDENTIFIER ::= { id-skd\
    \ 6 }\n   id-skd-glRemoveOwner OBJECT IDENTIFIER ::= { id-skd 7 }\n   GLOwnerAdministration\
    \ ::= SEQUENCE {\n     glName       GeneralName,\n     glOwnerInfo  GLOwnerInfo\
    \ }\n   -- This defines the GL Key Compromise control attribute.\n   -- It has\
    \ the simple type GeneralName.\n   id-skd-glKeyCompromise OBJECT IDENTIFIER ::=\
    \ { id-skd 8 }\n   GLKCompromise ::= GeneralName\n   -- This defines the GL Key\
    \ Refresh control attribute.\n   id-skd-glkRefresh OBJECT IDENTIFIER ::= { id-skd\
    \ 9 }\n   GLKRefresh ::= SEQUENCE {\n      glName  GeneralName,\n      dates \
    \  SEQUENCE SIZE (1..MAX) OF Date }\n   Date ::= SEQUENCE {\n     start GeneralizedTime,\n\
    \     end   GeneralizedTime OPTIONAL }\n   -- This defines the GLA Query Request\
    \ control attribute.\n   id-skd-glaQueryRequest OBJECT IDENTIFIER ::= { id-skd\
    \ 11 }\n   GLAQueryRequest ::= SEQUENCE {\n     glaRequestType   OBJECT IDENTIFIER,\n\
    \     glaRequestValue  ANY DEFINED BY glaRequestType }\n   -- This defines the\
    \ GLA Query Response control attribute.\n   id-skd-glaQueryResponse OBJECT IDENTIFIER\
    \ ::= { id-skd 12 }\n   GLAQueryResponse ::= SEQUENCE {\n     glaResponseType\
    \   OBJECT IDENTIFIER,\n     glaResponseValue  ANY DEFINED BY glaResponseType\
    \ }\n   -- This defines the GLA Request/Response (glaRR) arc for\n   -- glaRequestType/glaResponseType.\n\
    \   id-cmc-glaRR OBJECT IDENTIFIER ::= { iso(1)\n     identified-organization(3)\
    \ dod(6) internet(1) security(5)\n     mechanisms(5) pkix(7) cmc(7) glaRR(99)\
    \ }\n   -- This defines the Algorithm Request.\n   id-cmc-gla-skdAlgRequest OBJECT\
    \ IDENTIFIER ::= { id-cmc-glaRR 1 }\n   SKDAlgRequest ::= NULL\n   -- This defines\
    \ the Algorithm Response.\n   id-cmc-gla-skdAlgResponse OBJECT IDENTIFIER ::=\
    \ { id-cmc-glaRR 2 }\n   -- Note that the response for algorithmSupported request\
    \ is the\n   -- smimeCapabilities attribute as defined in MsgSpec [MSG].\n   --\
    \ This defines the control attribute to request an updated\n   -- certificate\
    \ to the GLA.\n   id-skd-glProvideCert OBJECT IDENTIFIER ::= { id-skd 13 }\n \
    \  GLManageCert ::= SEQUENCE {\n     glName    GeneralName,\n     glMember  GLMember\
    \ }\n   -- This defines the control attribute to return an updated\n   -- certificate\
    \ to the GLA.  It has the type GLManageCert.\n   id-skd-glManageCert OBJECT IDENTIFIER\
    \ ::= { id-skd 14 }\n   -- This defines the control attribute to distribute the\
    \ GL shared\n   -- KEK.\n   id-skd-glKey OBJECT IDENTIFIER ::= { id-skd 15 }\n\
    \   GLKey ::= SEQUENCE {\n     glName        GeneralName,\n     glIdentifier \
    \ KEKIdentifier,  -- See [CMS]\n     glkWrapped    RecipientInfos,      -- See\
    \ [CMS]\n     glkAlgorithm  AlgorithmIdentifier,\n     glkNotBefore  GeneralizedTime,\n\
    \     glkNotAfter   GeneralizedTime }\n   -- This defines the CMC error types.\n\
    \   id-cet-skdFailInfo  OBJECT IDENTIFIER ::= { iso(1)\n     identified-organization(3)\
    \ dod(6) internet(1) security(5)\n     mechanisms(5) pkix(7) cet(15) skdFailInfo(1)\
    \ }\n   SKDFailInfo ::= INTEGER {\n     unspecified           (0),\n     closedGL\
    \              (1),\n     unsupportedDuration   (2),\n     noGLACertificate  \
    \    (3),\n     invalidCert           (4),\n     unsupportedAlgorithm  (5),\n\
    \     noGLONameMatch        (6),\n     invalidGLName         (7),\n     nameAlreadyInUse\
    \      (8),\n     noSpam                (9),\n   -- obsolete             (10),\n\
    \     alreadyAMember        (11),\n     notAMember            (12),\n     alreadyAnOwner\
    \        (13),\n     notAnOwner            (14) }\n   END -- SMIMESymmetricKeyDistribution\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Sean Turner\n   IECA, Inc.\n   3057 Nutley Street, Suite\
    \ 106\n   Fairfax, VA 22031\n   USA\n   EMail: turners@ieca.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2008).\n   This document\
    \ is subject to the rights, licenses and restrictions\n   contained in BCP 78,\
    \ and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE\
    \ INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED,\
    \ INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION\
    \ HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY\
    \ OR FITNESS FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
