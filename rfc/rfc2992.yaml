- title: __initial_text__
  contents:
  - '             Analysis of an Equal-Cost Multi-Path Algorithm

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2000).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   Equal-cost multi-path (ECMP) is a routing technique for routing\n\
    \   packets along multiple paths of equal cost.  The forwarding engine\n   identifies\
    \ paths by next-hop.  When forwarding a packet the router\n   must decide which\
    \ next-hop (path) to use.  This document gives an\n   analysis of one method for\
    \ making that decision.  The analysis\n   includes the performance of the algorithm\
    \ and the disruption caused\n   by changes to the set of next-hops.\n"
- title: 1.  Hash-Threshold
  contents:
  - "1.  Hash-Threshold\n   One method for determining which next-hop to use when\
    \ routing with\n   ECMP can be called hash-threshold.  The router first selects\
    \ a key by\n   performing a hash (e.g., CRC16) over the packet header fields that\n\
    \   identify a flow.  The N next-hops have been assigned unique regions\n   in\
    \ the key space.  The router uses the key to determine which region\n   and thus\
    \ which next-hop to use.\n   As an example of hash-threshold, upon receiving a\
    \ packet the router\n   performs a CRC16 on the packet's header fields that define\
    \ the flow\n   (e.g., the source and destination fields of the packet), this is\
    \ the\n   key.  Say for this destination there are 4 next-hops to choose from.\n\
    \   Each next-hop is assigned a region in 16 bit space (the key space).\n   For\
    \ equal usage the router may have chosen to divide it up evenly so\n   each region\
    \ is 65536/4 or 16k large.  The next-hop is chosen by\n   determining which region\
    \ contains the key (i.e., the CRC result).\n"
- title: 2.  Analysis
  contents:
  - "2.  Analysis\n   There are a few concerns when choosing an algorithm for deciding\n\
    \   which next-hop to use.  One is performance, the computational\n   requirements\
    \ to run the algorithm.  Another is disruption (i.e., the\n   changing of which\
    \ path a flow uses).  Balancing is a third concern;\n   however, since the algorithm's\
    \ balancing characteristics are directly\n   related to the chosen hash function\
    \ this analysis does not treat this\n   concern in depth.\n   For this analysis\
    \ we will assume regions of equal size.  If the\n   output of the hash function\
    \ is uniformly distributed the distribution\n   of flows amongst paths will also\
    \ be uniform, and so the algorithm\n   will properly implement ECMP.  One can\
    \ implement non-equal-cost\n   multi-path routing by using regions of unequal\
    \ size; however, non-\n   equal-cost multi-path routing is outside the scope of\
    \ this document.\n"
- title: 2.1.  Performance
  contents:
  - "2.1.  Performance\n   The performance of the hash-threshold algorithm can be\
    \ broken down\n   into three parts: selection of regions for the next-hops, obtaining\n\
    \   the key and comparing the key to the regions to decide which next-hop\n  \
    \ to use.\n   The algorithm doesn't specify the hash function used to obtain the\n\
    \   key.  Its performance in this area will be exactly the performance of\n  \
    \ the hash function.  It is presumed that if this calculation proves to\n   be\
    \ a concern it can be done in hardware parallel to other operations\n   that need\
    \ to complete before deciding which next-hop to use.\n   Since regions are restricted\
    \ to be of equal size the calculation of\n   region boundaries is trivial.  Each\
    \ boundary is exactly regionsize\n   away from the previous boundary starting\
    \ from 0 for the first region.\n   As we will show, for equal sized regions, we\
    \ don't need to store the\n   boundary values.\n   To choose the next-hop we must\
    \ determine which region contains the\n   key.  Because the regions are of equal\
    \ size determining which region\n   contains the key is a simple division operation.\n\
    \                regionsize = keyspace.size / #{nexthops}\n                region\
    \ = key / regionsize;\n   Thus the time required to find the next-hop is dependent\
    \ on the way\n   the next-hops are organized in memory.  The obvious use of an\
    \ array\n   indexed by region yields O(1).\n"
- title: 2.2.  Disruption
  contents:
  - "2.2.  Disruption\n   Protocols such as TCP perform better if the path they flow\
    \ along does\n   not change while the stream is connected.  Disruption is the\n\
    \   measurement of how many flows have their paths changed due to some\n   change\
    \ in the router.  We measure disruption as the fraction of total\n   flows whose\
    \ path changes in response to some change in the router.\n   This can become important\
    \ if one or more of the paths is flapping.\n   For a description of disruption\
    \ and how it affects protocols such as\n   TCP see [1].\n   Some algorithms such\
    \ as round-robin (i.e., upon receiving a packet\n   the least recently used next-hop\
    \ is chosen) are disruptive regardless\n   of any change in the router.  Clearly\
    \ this is not the case with\n   hash-threshold.  As long as the region boundaries\
    \ remain unchanged\n   the same next-hop will be chosen for a given flow.\n  \
    \ Because we have required regions to be equal in size the only reason\n   for\
    \ a change in region boundaries is the addition or removal of a\n   next-hop.\
    \  In this case the regions must all grow or shrink to fill\n   the key space.\
    \  The analysis begins with some examples of this.\n              0123456701234567012345670123456701234567\n\
    \             +-------+-------+-------+-------+-------+\n             |   1  \
    \ |   2   |   3   |   4   |   5   |\n             +-------+-+-----+---+---+-----+-+-------+\n\
    \             |    1    |    2    |    4    |    5    |\n             +---------+---------+---------+---------+\n\
    \              0123456789012345678901234567890123456789\n              Figure\
    \ 1. Before and after deletion of region 3\n   In figure 1. region 3 has been\
    \ deleted.  The remaining regions grow\n   equally and shift to compensate.  In\
    \ this case 1/4 of region 2 is now\n   in region 1, 1/2 (2/4) of region 3 is in\
    \ region 2, 1/2 of region 3 is\n   in region 4 and 1/4 of region 4 is in region\
    \ 5.  Since each of the\n   original regions represent 1/5 of the flows, the total\
    \ disruption is\n   1/5*(1/4 + 1/2 + 1/2 + 1/4) or 3/10.\n   Note that the disruption\
    \ to flows when adding a region is equivalent\n   to that of removing a region.\
    \  That is, we are considering the\n   fraction of total flows that changes regions\
    \ when moving from N to\n   N-1 regions, and that same fraction of flows will\
    \ change when moving\n   from N-1 to N regions.\n              0123456701234567012345670123456701234567\n\
    \             +-------+-------+-------+-------+-------+\n             |   1  \
    \ |   2   |   3   |   4   |   5   |\n             +-------+-+-----+---+---+-----+-+-------+\n\
    \             |    1    |    2    |    3    |    5    |\n             +---------+---------+---------+---------+\n\
    \              0123456789012345678901234567890123456789\n              Figure\
    \ 2. Before and after deletion of region 4\n   In figure 2. region 4 has been\
    \ deleted.  Again the remaining regions\n   grow equally and shift to compensate.\
    \  1/4 of region 2 is now in\n   region 1, 1/2 of region 3 is in region 2, 3/4\
    \ of region 4 is in\n   region 3 and 1/4 of region 4 is in region 5.  Since each\
    \ of the\n   original regions represent 1/5 of the flows the, total disruption\
    \ is\n   7/20.\n   To generalize, upon removing a region K the remaining N-1 regions\n\
    \   grow to fill the 1/N space.  This growth is evenly divided between\n   the\
    \ N-1 regions and so the change in size for each region is 1/N/(N-\n   1) or 1/(N(N-1)).\
    \  This change in size causes non-end regions to\n   move.  The first region grows\
    \ and so the second region is shifted\n   towards K by the change in size of the\
    \ first region.  1/(N(N-1)) of\n   the flows from region 2 are subsumed by the\
    \ change in region 1's\n   size.  2/(N(N-1)) of the flows in region 3 are subsumed\
    \ by region 2.\n   This is because region 2 has shifted by 1/(N(N-1)) and grown\
    \ by\n   1/(N(N-1)).  This continues from both ends until you reach the\n   regions\
    \ that bordered K.  The calculation for the number of flows\n   subsumed from\
    \ the Kth region into the bordering regions accounts for\n   the removal of the\
    \ Kth region.  Thus we have the following equation.\n                        \
    \   K-1              N\n                           ---    i        ---  (i-K)\n\
    \             disruption =  \\     ---    +  \\     ---\n                    \
    \       /   (N)(N-1)    /   (N)(N-1)\n                           ---         \
    \    ---\n                           i=1            i=K+1\n   We can factor 1/((N)(N-1))\
    \ out as it is constant.\n                                /  K-1         N   \
    \     \\\n                          1     |  ---        ---       |\n        \
    \             =   ---    |  \\    i  +  \\   (i-K) |\n                       (N)(N-1)\
    \ |  /          /         |\n                                \\  ---        ---\
    \       /\n                                     1        i=K+1\n   We now use\
    \ the the concrete formulas for the sum of integers.  The\n   first summation\
    \ is (K)(K-1)/2.  For the second summation notice that\n   we are summing the\
    \ integers from 1 to N-K, thus it is (N-K)(N-K+1)/2.\n                       \
    \      (K-1)(K) + (N-K)(N-K+1)\n                           = -----------------------\n\
    \                                   2(N)(N-1)\n   Considering the summations,\
    \ one can see that the least disruption is\n   when K is as close to half way\
    \ between 1 and N as possible.  This can\n   be proven by finding the minimum\
    \ of the concrete formula for K\n   holding N constant.  First break apart the\
    \ quantities and collect.\n                            2K*K - 2K - 2NK + N*N +\
    \ N\n                          = -------------------------\n                 \
    \                   2(N)(N-1)\n                             K*K - K - NK     \
    \ N + 1\n                          = --------------  + -------\n             \
    \                  (N)(N-1)        2(N-1)\n   Since we are minimizing for K the\
    \ right side (N+1)/2(N-1) is constant\n   as is the denominator (N)(N-1) so we\
    \ can drop them.  To minimize we\n   take the derivative.\n                  \
    \           d\n                             -- (K*K - (N+1)K)\n              \
    \               dk\n                             = 2K - (N+1)\n   Which is zero\
    \ when K is (N+1)/2.\n   The last thing to consider is that K must be an integer.\
    \  When N is\n   odd (N+1)/2 will yield an integer, however when N is even (N+1)/2\n\
    \   yields an integer + 1/2.  In the case, because of symmetry, we get\n   the\
    \ least disruption when K is N/2 or N/2 + 1.\n   Now since the formula is quadratic\
    \ with a global minimum half way\n   between 1 and N the maximum possible disruption\
    \ must occur when edge\n   regions (1 and N) are removed.  If K is 1 or N the\
    \ formula reduces to\n   1/2.\n   The minimum possible disruption is obtained\
    \ by letting K=(N+1)/2.  In\n   this case the formula reduces to 1/4 + 1/(4*N).\
    \  So the range of\n   possible disruption is (1/4, 1/2].\n   To minimize disruption\
    \ we recommend adding new regions to the center\n   rather than the ends.\n"
- title: 3.  Comparison to other algorithms
  contents:
  - "3.  Comparison to other algorithms\n   Other algorithms exist to decide which\
    \ next-hop to use.  These\n   algorithms all have different performance and disruptive\n\
    \   characteristics.  Of these algorithms we will only consider ones that\n  \
    \ are not disruptive by design (i.e., if no change to the set of next-\n   hops\
    \ occurs the path a flow takes remains the same).  This will\n   exclude round-robin\
    \ and random choice.  We will look at modulo-N and\n   highest random weight.\n\
    \   Modulo-N is a \"simpler\" form of hash-threshold.  Given N next-hops\n   the\
    \ packet header fields which describe the flow are run through a\n   hash function.\
    \  A final modulo-N is applied to the output of the\n   hash.  This result then\
    \ directly maps to one of the next-hops.\n   Modulo-N is the most disruptive of\
    \ the algorithms; if a next-hop is\n   added or removed the disruption is (N-1)/N.\
    \  The performance of\n   Modulo-N is equivalent to hash-threshold.\n   Highest\
    \ random weight (HRW) is a comparative method similar in some\n   ways to hash-threshold\
    \ with non-fixed sized regions.  For each next-\n   hop, the router seeds a pseudo-random\
    \ number generator with the\n   packet header fields which describe the flow and\
    \ the next-hop to\n   obtain a weight.  The next-hop which receives the highest\
    \ weight is\n   selected.  The advantage with using HRW is that it has minimal\n\
    \   disruption (i.e., disruption due to adding or removing a next-hop is\n   always\
    \ 1/N.)  The disadvantage with HRW is that the next-hop\n   selection is more\
    \ expensive than hash-threshold.  A description of\n   HRW along with comparisons\
    \ to other methods can be found in [2].\n   Although not used for next-hop calculation\
    \ an example usage of HRW\n   can be found in [3].\n   Since each of modulo-N,\
    \ hash-threshold and HRW require a hash on the\n   packet header fields which\
    \ define a flow, we can factor the\n   performance of the hash out of the comparison.\
    \  If the hash can not\n   be done inexpensively (e.g., in hardware) it too must\
    \ be considered\n   when using any of the above methods.\n   The lookup performance\
    \ for hash-threshold, like modulo-N is an\n   optimal O(1).  HRW's lookup performance\
    \ is O(N).\n   Disruptive behavior is the opposite of performance.  HRW is best\
    \ with\n   1/N.  Hash-threshold is between 1/4 and 1/2.  Finally Modulo-N is\n\
    \   (N-1)/N.\n   If the complexity of HRW's next-hop selection process is acceptable\n\
    \   we think it should be considered as an alternative to hash-threshold.\n  \
    \ This could be the case when, for example, per-flow state is kept and\n   thus\
    \ the next-hop choice is made infrequently.\n   However, when HRW's next-hop selection\
    \ is seen as too expensive the\n   obvious choice is hash-threshold as it performs\
    \ as well as modulo-N\n   and is less disruptive.\n"
- title: 4.  Security Considerations
  contents:
  - "4.  Security Considerations\n   This document is an analysis of an algorithm\
    \ used to implement an\n   ECMP routing decision.  This analysis does not directly\
    \ affect the\n   security of the Internet Infrastructure.\n"
- title: 5.  References
  contents:
  - "5.  References\n   [1]  Thaler, D. and C. Hopps, \"Multipath Issues in Unicast\
    \ and\n        Multicast\", RFC 2991, November 2000.\n   [2]  Thaler, D. and C.V.\
    \ Ravishankar, \"Using Name-Based Mappings to\n        Increase Hit Rates\", IEEE/ACM\
    \ Transactions on Networking,\n        February 1998.\n   [3]  Estrin, D., Farinacci,\
    \ D., Helmy, A., Thaler, D., Deering, S.,\n        Handley, M., Jacobson, V.,\
    \ Liu, C., Sharma, P. and L. Wei,\n        \"Protocol Independent Multicast-Sparse\
    \ Mode (PIM-SM): Protocol\n        Specification\", RFC 2362, June 1998.\n"
- title: 6.  Author's Address
  contents:
  - "6.  Author's Address\n   Christian E. Hopps\n   NextHop Technologies, Inc.\n\
    \   517 W. William Street\n   Ann Arbor, MI 48103-4943\n   U.S.A\n   Phone: +1\
    \ 734 936 0291\n   EMail: chopps@nexthop.com\n"
- title: 7.  Full Copyright Statement
  contents:
  - "7.  Full Copyright Statement\n   Copyright (C) The Internet Society (2000). \
    \ All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
