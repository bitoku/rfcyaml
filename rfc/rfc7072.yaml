- contents:
  - '                      A Reputation Query Protocol

    '
  title: __initial_text__
- contents:
  - "Abstract\n   This document defines a mechanism to conduct queries for reputation\n
    \  information over the HyperText Transfer Protocol (HTTP) using\n   JavaScript
    Object Notation (JSON) as the payload meta-format.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7072.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2013 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n
    \  2. Terminology and Definitions .....................................2\n      2.1.
    Key Words ..................................................2\n      2.2. Other
    Definitions ..........................................3\n   3. Description .....................................................3\n
    \     3.1. Overview ...................................................3\n      3.2.
    URI Template ...............................................3\n      3.3. Syntax
    .....................................................4\n      3.4. Response ...................................................6\n
    \     3.5. Protocol Support ...........................................6\n   4.
    IANA Considerations .............................................7\n   5. Security
    Considerations .........................................7\n   6. References ......................................................8\n
    \     6.1. Normative References .......................................8\n      6.2.
    Informative References .....................................8\n   Appendix A.
    Acknowledgements .......................................9\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   This document defines a method to query a reputation data
    service for\n   information about an entity, using the HyperText Transfer Protocol\n
    \  (HTTP) as the transport mechanism and JSON as the payload meta-\n   format.\n
    \  The mechanism is a two-stage query:\n   1.  A client retrieves a template from
    a server that describes the\n       construction of a Universal Resource Identifier
    (URI) that will\n       be the actual query;\n   2.  The client then uses the
    constructed URI to request the\n       reputation data from the server.\n"
  title: 1.  Introduction
- contents:
  - "2.  Terminology and Definitions\n   This section defines terms used in the rest
    of the document.\n"
  - contents:
    - "2.1.  Key Words\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
      \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and
      \"OPTIONAL\" in this\n   document are to be interpreted as described in [KEYWORDS].\n"
    title: 2.1.  Key Words
  - contents:
    - "2.2.  Other Definitions\n   Other terms of importance in this document are
      defined in [RFC7070]\n   and [RFC7071].\n"
    title: 2.2.  Other Definitions
  title: 2.  Terminology and Definitions
- contents:
  - '3.  Description

    '
  - contents:
    - "3.1.  Overview\n   The components to the question being asked are the following:\n
      \  o  The subject of the query;\n   o  The name of the host, or the IP address,
      at which the reputation\n      service is available;\n   o  The name of the
      reputation application, i.e., the context within\n      which the subject is
      being evaluated;\n   o  Optionally, names of the specific reputation assertions
      or\n      attributes that are being requested.\n   There is no discovery protocol
      for finding reputation services.\n   These are typically subscription services,
      negotiated between\n   operators through some out-of-band method.\n   Assertions
      are discussed in [RFC7071].\n   The name of the application, if given, is expected
      to be one\n   registered with IANA in the \"Reputation Applications\" registry,
      which\n   is defined in [RFC7071].  A server receiving a query about an\n   application
      it does not recognize or explicitly support (e.g., by\n   virtue of private
      agreements or experimental extensions) MUST return\n   a 404 error code.\n   A
      reputation query made via [HTTP] encodes the question being asked\n   in an
      HTTP GET method.  The specific syntax of the query itself is\n   specified by
      retrieving a URI template from the reputation service,\n   completing the template,
      and then issuing the query.\n"
    title: 3.1.  Overview
  - contents:
    - "3.2.  URI Template\n   The template file is retrieved by requesting the [WELL-KNOWN-URI]\n
      \  \"repute-template\" from the host providing reputation service, using\n   HTTP.
      \ (The registration for this well-known URI is in Section 4.)\n   The server
      returns the template file in a reply that MUST use the\n   text/plain media
      type (see [MIME]) and SHOULD include an Expires\n   field (see Section 14.21
      of [HTTP]) indicating a duration for which\n   the template is to be considered
      valid by clients and not re-queried.\n   If an Expires field is present, the
      client SHOULD NOT send another\n   query to the same server prior to the timestamp
      in the field.  If no\n   Expires field is present, the client SHOULD wait at
      least one day\n   before sending another query to the same server (i.e., the
      client\n   assumes a default expiration of one day).\n   The template file might
      contain more than one template.  Such a file\n   MUST have each template separated
      by a carriage return (ASCII 0x0D)\n   and newline (ASCII 0x0A) character, as
      is typical for most text-based\n   Internet protocols.\n   Each template in
      the file is expanded using the variables that are\n   the parameters to the
      query.  These parameters are either the subject\n   about which reputation information
      is sought (or details associated\n   with it) or other parameters that are established
      out-of-band with\n   the reputation service; they are not established by any
      automated\n   discovery described here.  The client then attempts to query each\n
      \  expanded template that uses a URI scheme it is capable of querying,\n   in
      the order presented in the file, until the client finds one to\n   which it
      can establish a usable connection and issue the query.\n   For example, given
      the following template:\n   http://{service}/{application}/{subject}/{assertion}\n
      \  A query about the use of the domain \"example.org\" in the \"email-id\"\n
      \  application context to a service run at \"example.com\", where that\n   application
      declares a required \"subject\" parameter, requesting the\n   \"SPAM\" reputation
      assertion, would be formed as follows:\n   http://example.com/email-id/example.org/spam\n"
    title: 3.2.  URI Template
  - contents:
    - "3.3.  Syntax\n   The syntax for the [URI] of the query is constructed using
      a template\n   as per [URI-TEMPLATE].  (See Section 3.2.)  Clients MUST provide
      the\n   following values in the expansion of the template:\n   application:
      \ The name of the application reputation in whose context\n      the request
      is being made.  These names are registered with IANA,\n      and conform to
      the ABNF \"token\" found in [MIME].\n   service:  The hostname or IP address
      to which the query is being\n      sent.  This MUST be the same as the host
      to which the template\n      query was issued.\n   subject:  The subject of
      the query, extracted from some content to be\n      evaluated.  The subject
      portion of the template conforms to the\n      ABNF \"value\" found in [MIME].\n
      \  The following variable can also be provided.  It is not mandatory in\n   this
      model, but a specific application (defined in its own extension\n   document)
      might declare it mandatory in a specific context:\n   assertion:  The name of
      the specific assertion of interest to the\n      client.  Assertion names conform
      to the ABNF \"token\" found in\n      [MIME].  If absent, the client is indicating
      that it requests all\n      available assertion information.\n   If a template
      contains a variable that is not required and the client\n   does not have a
      value to insert, it substitutes the empty string into\n   the template in place
      of that variable.  Service providers crafting\n   templates MUST do so such
      that a client doing an empty variable\n   expansion will still produce a syntactically
      and semantically valid\n   and unambiguous URI.  For example, given this template:\n
      \    http://{service}/{application}/{subject}/{assertion}/{a}/{b}\n   If \"{a}\"
      and \"{b}\" are optional and \"{a}\" expands to the empty\n   string, then the
      resulting URI will have adjacent backslash (\"/\",\n   ASCII 0x2F) characters
      and one path component after the assertion.\n   If the server interpreting the
      URI's path component removes or\n   ignores adjacent backslash characters (such
      as is done with the UNIX\n   filesystem), the server will be unable to distinguish
      an empty \"{a}\"\n   from an empty \"{b}\", and it could serve the wrong response.
      \ Where\n   possible, the template needs to be constructed such that expansion
      of\n   optional variables yields an unambiguous result.  For example, an\n   unambiguous
      version of the above would be:\n     http://{service}/{application}/{subject}/{assertion}/a={a}/b={b}\n
      \  ...or, even better, using URI template set expansions:\n     http://{service}/{application}/{subject}/{assertion}{?a,b}\n
      \  Every application space has a set of assertions applicable to its own\n   context.
      \ [RFC7071] defines a single assertion assumed to exist in\n   any application
      that does not define its own assertion set.\n   Reputation applications can
      extend the set of optional or required\n   query parameters as part of their
      IANA registration actions.  The set\n   enumerated above establishes the base
      set common to all of them.\n   Further, additional required or optional extension
      query parameters\n   might be defined by specific reputation service providers,
      though\n   these are private arrangements between client and server and will
      not\n   be registered with IANA.\n   Authentication between reputation client
      and server is outside the\n   scope of this specification.  It could be provided
      through a variety\n   of available transport-based or object-based mechanisms,
      including a\n   later extension of this specification.\n"
    title: 3.3.  Syntax
  - contents:
    - "3.4.  Response\n   The response is expected to be contained in a media type
      designed to\n   deliver reputons.  A media type designed for this purpose,\n
      \  \"application/reputon+json\", is defined in [RFC7071].\n   If the server
      generates responses that contain an Expires field (see\n   Section 14.21 of
      [HTTP]), that timestamp MUST align with the\n   \"expires\" field within the
      response, if any.  Failing to do so can\n   result in a state where the response
      has expired, but the HTTP reply\n   has not, and the client would in that case
      be unable to get a fresh\n   answer from the reputation server.\n"
    title: 3.4.  Response
  - contents:
    - "3.5.  Protocol Support\n   A client has to implement HTTP in order to retrieve
      the query\n   template as described in Section 3.2.  Accordingly, a server can\n
      \  assume the client will be able to handle a URI template that produces\n   a
      URI for the query using the \"http\" URI scheme.  The template could\n   yield
      a query string that uses some other URI scheme, in which case\n   the client
      could try that URI as well if it supports issuing queries\n   with that URI
      scheme.\n   A server SHOULD include support for providing service over HTTP,
      and\n   publish templates indicating support for this, as a baseline for\n   interoperability
      with arbitrary clients.\n"
    title: 3.5.  Protocol Support
  title: 3.  Description
- contents:
  - "4.  IANA Considerations\n   This document registers the \"repute-template\" well-known
    URI in the\n   \"Well-Known URI\" registry as defined by [WELL-KNOWN-URI], as
    follows:\n   URI suffix:  repute-template\n   Change controller:  IETF\n   Specification
    document(s):  [RFC7072]\n   Related information:  none\n"
  title: 4.  IANA Considerations
- contents:
  - "5.  Security Considerations\n   This document defines particular uses of existing
    protocols for a\n   specific application.  In particular, the basic protocol used
    for\n   this service to retrieve a URI template from a well-known location is\n
    \  basic HTTP, which is not secure without certain extensions.  Security\n   issues
    relevant to use of URI templates are discussed in\n   [URI-TEMPLATE], and those
    relevant to well-known URI definitions and\n   retrieval are discussed in [WELL-KNOWN-URI].\n
    \  The reputation service itself will use HTTP or other transport\n   methods
    to issue queries and receive replies.  Those protocols have\n   registered URI
    schemes and, as such, presumably have documented\n   security considerations.
    \ The protocol described here operates atop\n   those URI schemes, and does not
    itself present new security\n   considerations.\n   Reputation mechanisms represent
    an obvious security concern, in terms\n   of the validity and use of the reputation
    information.  These issues\n   are beyond the scope of this specification.  General
    information\n   pertaining to using or providing reputation services can be found
    in\n   [CONSIDERATIONS].\n   The security considerations applicable to HTTP (see
    Section 15 of\n   [HTTP] apply, since this query mechanism for reputation uses
    that\n   protocol.  If it is desirable to conceal the content of the query and\n
    \  its response, use of encryption techniques such as HTTP over TLS\n   [HTTPS]
    can be used.\n"
  title: 5.  Security Considerations
- contents:
  - '6.  References

    '
  - contents:
    - "6.1.  Normative References\n   [HTTP]     Fielding, R., Gettys, J., Mogul,
      J., Frystyk, H.,\n              Masinter, L., Leach, P., and T. Berners-Lee,
      \"Hypertext\n              Transfer Protocol -- HTTP/1.1\", RFC 2616, June 1999.\n
      \  [KEYWORDS] Bradner, S., \"Key words for use in RFCs to Indicate\n              Requirement
      Levels\", BCP 14, RFC 2119, March 1997.\n   [MIME]     Freed, N. and N. Borenstein,
      \"Multipurpose Internet Mail\n              Extensions (MIME) Part One: Format
      of Internet Message\n              Bodies\", RFC 2045, November 1996.\n   [RFC7070]
      \ Borenstein, N., Kucherawy, M., and A. Sullivan, \"An\n              Architecture
      for Reputation Reporting\", RFC 7070, November\n              2013.\n   [RFC7071]
      \ Borenstein, N. and M. Kucherawy, \"A Media Type for\n              Reputation
      Interchange\", RFC 7071, November 2013.\n   [URI-TEMPLATE]\n              Gregorio,
      J., Fielding, R., Hadley, M., Nottingham, M.,\n              and D. Orchard,
      \"URI Template\", RFC 6570, March 2012.\n   [URI]      Berners-Lee, T., Fielding,
      R., and L. Masinter, \"Uniform\n              Resource Identifier (URI): Generic
      Syntax\", STD 66, RFC\n              3986, January 2005.\n   [WELL-KNOWN-URI]\n
      \             Nottingham, M. and E. Hammer-Lahav, \"Defining Well-Known\n              Uniform
      Resource Identifiers (URIs)\", RFC 5785, April\n              2010.\n"
    title: 6.1.  Normative References
  - contents:
    - "6.2.  Informative References\n   [CONSIDERATIONS]\n              Kucherawy,
      M., \"Operational Considerations Regarding\n              Reputation Services\",
      Work in Progress, May 2013.\n   [HTTPS]    Rescorla, E., \"HTTP Over TLS\",
      RFC 2818, May 2000.\n"
    title: 6.2.  Informative References
  title: 6.  References
- contents:
  - "Appendix A.  Acknowledgements\n   The authors would like to thank the following
    for their contributions\n   to this work: Simon Hunt, Mark Nottingham, David F.
    Skoll, and Mykyta\n   Yevstifeyev.\n"
  title: Appendix A.  Acknowledgements
- contents:
  - "Authors' Addresses\n   Nathaniel Borenstein\n   Mimecast\n   203 Crescent St.,
    Suite 303\n   Waltham, MA 02453\n   USA\n   Phone: +1 781 996 5340\n   EMail:
    nsb@guppylake.com\n   Murray S. Kucherawy\n   270 Upland Drive\n   San Francisco,
    CA 94127\n   USA\n   EMail: superuser@gmail.com\n"
  title: Authors' Addresses
