- title: __initial_text__
  contents:
  - '               TCP Options and Maximum Segment Size (MSS)

    '
- title: Abstract
  contents:
  - "Abstract\n   This memo discusses what value to use with the TCP Maximum Segment\n\
    \   Size (MSS) option, and updates RFC 879 and RFC 2385.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 5741.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc6691.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2012 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   There has been some confusion as to what value to use with\
    \ the TCP\n   MSS option when using IP and TCP options.  RFC 879 [RFC879] states:\n\
    \      The MSS counts only data octets in the segment, it does not count\n   \
    \   the TCP header or the IP header.\n   This statement is unclear about what\
    \ to do about IP and TCP options,\n   since they are part of the headers.  RFC\
    \ 1122 [RFC1122] clarified the\n   MSS option, which is discussed in Appendix\
    \ A, but there still seems\n   to be some confusion.\n"
- title: 1.1.  Terminology
  contents:
  - "1.1.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"\
    SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\"\
    , and \"OPTIONAL\" in this\n   document are to be interpreted as described in\
    \ RFC 2119 [RFC2119].\n"
- title: 2.  The Short Statement
  contents:
  - "2.  The Short Statement\n   When calculating the value to put in the TCP MSS\
    \ option, the MTU\n   value SHOULD be decreased by only the size of the fixed\
    \ IP and TCP\n   headers and SHOULD NOT be decreased to account for any possible\
    \ IP or\n   TCP options; conversely, the sender MUST reduce the TCP data length\n\
    \   to account for any IP or TCP options that it is including in the\n   packets\
    \ that it sends.  The rest of this document just expounds on\n   that statement,\
    \ and the goal is to avoid IP-level fragmentation of\n   TCP packets.\n   The\
    \ size of the fixed TCP header is 20 bytes [RFC793], the size of\n   the fixed\
    \ IPv4 header is 20 bytes [RFC791], and the size of the fixed\n   IPv6 header\
    \ is 40 bytes [RFC2460].  The determination of what MTU\n   value should be used,\
    \ especially in the case of multi-homed hosts, is\n   beyond the scope of this\
    \ document.\n"
- title: 3.  MSS in Other RFCs
  contents:
  - '3.  MSS in Other RFCs

    '
- title: 3.1.  RFC 879
  contents:
  - "3.1.  RFC 879\n   RFC 879 [RFC879] discusses the MSS option and other topics.\
    \  In the\n   Introduction, it states:\n      THE TCP MAXIMUM SEGMENT SIZE IS\
    \ THE IP MAXIMUM DATAGRAM SIZE MINUS\n      FORTY.\n   In Section 13, it states:\n\
    \      The definition of the MSS option can be stated:\n         The maximum number\
    \ of data octets that may be received by the\n         sender of this TCP option\
    \ in TCP segments with no TCP header\n         options transmitted in IP datagrams\
    \ with no IP header options.\n   These are both correct.  However, in the next\
    \ paragraph -- in\n   Section 14 -- it then confuses this by stating that the\
    \ consequence\n   is:\n      When TCP is used in a situation when either the IP\
    \ or TCP headers\n      are not minimum and yet the maximum IP datagram that can\
    \ be\n      received remains 576 octets then the TCP Maximum Segment Size\n  \
    \    option must be used to reduce the limit on data octets allowed in\n     \
    \ a TCP segment.\n         For example, if the IP Security option (11 octets)\
    \ were in use\n         and the IP maximum datagram size remained at 576 octets,\
    \ then\n         the TCP should send the MSS with a value of 525 (536-11).\n \
    \  That is incorrect.  The simpler and more correct statement would be:\n    \
    \  When TCP is used in a situation where either the IP or TCP headers\n      are\
    \ not minimum, the sender must reduce the amount of TCP data in\n      any given\
    \ packet by the number of octets used by the IP and TCP\n      options.\n"
- title: 3.2.  RFC 2385
  contents:
  - "3.2.  RFC 2385\n   RFC 2385 [RFC2385] incorrectly states, in Section 4.3:\n \
    \     As with other options that are added to every segment, the size of\n   \
    \   the MD5 option must be factored into the MSS offered to the other\n      side\
    \ during connection negotiation.  Specifically, the size of the\n      header\
    \ to subtract from the MTU (whether it is the MTU of the\n      outgoing interface\
    \ or IP's minimal MTU of 576 bytes) is now at\n      least 18 bytes larger.\n\
    \   This is incorrect.  The value for the MSS option is only adjusted by\n   the\
    \ fixed IP and TCP headers.\n"
- title: 4.  Clarification from the TCP Large Windows Mailing List
  contents:
  - "4.  Clarification from the TCP Large Windows Mailing List\n   The initial clarification\
    \ was sent to the TCP Large Windows mailing\n   list in 1993 [Borman93]; this\
    \ section is based on that message.\n   The MSS value to be sent in an MSS option\
    \ should be equal to the\n   effective MTU minus the fixed IP and TCP headers.\
    \  By ignoring both\n   IP and TCP options when calculating the value for the\
    \ MSS option, if\n   there are any IP or TCP options to be sent in a packet, then\
    \ the\n   sender must decrease the size of the TCP data accordingly.  The\n  \
    \ reason for this can be seen in the following table:\n                      \
    \    +--------------------+--------------------+\n                          |\
    \ MSS is adjusted    | MSS isn't adjusted |\n                          | to include\
    \ options | to include options |\n     +--------------------+--------------------+--------------------+\n\
    \     | Sender adjusts     | Packets are too    | Packets are the    |\n     |\
    \ packet length      | short              | correct length     |\n     | for options\
    \        |                    |                    |\n     +--------------------+--------------------+--------------------+\n\
    \     | Sender doesn't     | Packets are the    | Packets are too    |\n     |\
    \ adjust packet      | correct length     | long               |\n     | length\
    \ for options |                    |                    |\n     +--------------------+--------------------+--------------------+\n\
    \   The goal is to not send IP datagrams that have to be fragmented, and\n   packets\
    \ sent with the constraints in the lower right of this grid\n   will cause IP\
    \ fragmentation.  Since the sender doesn't know if the\n   received MSS option\
    \ was adjusted to include options, the only way to\n   guarantee that the packets\
    \ are not too long is for the data sender to\n   decrease the TCP data length\
    \ by the size of the IP and TCP options.\n   It follows, then, that since the\
    \ sender will be adjusting the TCP\n   data length when sending IP and TCP options,\
    \ there is no need to\n   include the IP and TCP option lengths in the MSS value.\n\
    \   Another argument against including IP or TCP options in the\n   determination\
    \ of the MSS value is that the MSS is a fixed value, and\n   by their very nature\
    \ the lengths of IP and TCP options are variable,\n   so the MSS value can never\
    \ accurately reflect all possible IP and TCP\n   option combinations.  The only\
    \ one that knows for sure how many IP\n   and TCP options are in any given packet\
    \ is the sender; hence, the\n   sender should be doing the adjustment to the TCP\
    \ data length to\n   account for any IP and TCP options.\n"
- title: 5.  Additional Considerations
  contents:
  - '5.  Additional Considerations

    '
- title: 5.1.  Path MTU Discovery
  contents:
  - "5.1.  Path MTU Discovery\n   The TCP MSS option specifies an upper bound for\
    \ the size of packets\n   that can be received.  Hence, setting the value in the\
    \ MSS option too\n   small can impact the ability for Path MTU Discovery to find\
    \ a larger\n   path MTU.  For more information on Path MTU Discovery, see:\n \
    \     o  \"Path MTU Discovery\" [RFC1191]\n      o  \"TCP Problems with Path MTU\
    \ Discovery\" [RFC2923]\n      o  \"Packetization Layer Path MTU Discovery\" [RFC4821]\n"
- title: 5.2.  Interfaces with Variable MSS Values
  contents:
  - "5.2.  Interfaces with Variable MSS Values\n   The effective MTU can sometimes\
    \ vary, as when used with variable\n   compression, e.g., RObust Header Compression\
    \ (ROHC) [RFC5795].  It is\n   tempting for TCP to want to advertise the largest\
    \ possible MSS, to\n   support the most efficient use of compressed payloads.\n\
    \   Unfortunately, some compression schemes occasionally need to transmit\n  \
    \ full headers (and thus smaller payloads) to resynchronize state at\n   their\
    \ endpoint compressors/decompressors.  If the largest MTU is used\n   to calculate\
    \ the value to advertise in the MSS option, TCP\n   retransmission may interfere\
    \ with compressor resynchronization.\n   As a result, when the effective MTU of\
    \ an interface varies, TCP\n   SHOULD use the smallest effective MTU of the interface\
    \ to calculate\n   the value to advertise in the MSS option.\n"
- title: 5.3.  IPv6 Jumbograms
  contents:
  - "5.3.  IPv6 Jumbograms\n   In order to support TCP over IPv6 jumbograms, implementations\
    \ need to\n   be able to send TCP segments larger than 64K.  RFC 2675 [RFC2675]\n\
    \   defines that a value of 65,535 is to be treated as infinity, and Path\n  \
    \ MTU Discovery [RFC1981] is used to determine the actual MSS.\n"
- title: 5.4.  Avoiding Fragmentation
  contents:
  - "5.4.  Avoiding Fragmentation\n   Packets that are too long will either be fragmented\
    \ or dropped.  If\n   packets are fragmented, intermediary firewalls or middle\
    \ boxes may\n   drop the fragmented packets.  In either case, when packets are\n\
    \   dropped, the connection can fail; hence, it is best to avoid\n   generating\
    \ fragments.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   This document clarifies how to determine what\
    \ value should be used\n   for the MSS option and does not introduce any new security\
    \ concerns.\n"
- title: 7.  References
  contents:
  - '7.  References

    '
- title: 7.1.  Normative References
  contents:
  - "7.1.  Normative References\n   [RFC791]    Postel, J., \"Internet Protocol\"\
    , STD 5, RFC 791,\n               September 1981.\n   [RFC793]    Postel, J.,\
    \ \"Transmission Control Protocol\", STD 7,\n               RFC 793, September\
    \ 1981.\n   [RFC879]    Postel, J., \"The TCP Maximum Segment Size and Related\n\
    \               Topics\", RFC 879, November 1983.\n   [RFC1122]   Braden, R.,\
    \ Ed., \"Requirements for Internet Hosts -\n               Communication Layers\"\
    , STD 3, RFC 1122, October 1989.\n   [RFC2119]   Bradner, S., \"Key words for\
    \ use in RFCs to Indicate\n               Requirement Levels\", BCP 14, RFC 2119,\
    \ March 1997.\n   [RFC2460]   Deering, S. and R. Hinden, \"Internet Protocol,\
    \ Version 6\n               (IPv6) Specification\", RFC 2460, December 1998.\n\
    \   [RFC2675]   Borman, D., Deering, S., and R. Hinden, \"IPv6\n             \
    \  Jumbograms\", RFC 2675, August 1999.\n"
- title: 7.2.  Informative References
  contents:
  - "7.2.  Informative References\n   [Borman93]  Borman, D., \"TCP MSS & Timestamps\"\
    , Message to the tcplw\n               mailing list, January 7, 1993.\n   [RFC1191]\
    \   Mogul, J. and S. Deering, \"Path MTU discovery\", RFC 1191,\n            \
    \   November 1990.\n   [RFC1981]   McCann, J., Deering, S., and J. Mogul, \"Path\
    \ MTU\n               Discovery for IP version 6\", RFC 1981, August 1996.\n \
    \  [RFC2385]   Heffernan, A., \"Protection of BGP Sessions via the TCP\n     \
    \          MD5 Signature Option\", RFC 2385, August 1998.\n   [RFC2923]   Lahey,\
    \ K., \"TCP Problems with Path MTU Discovery\",\n               RFC 2923, September\
    \ 2000.\n   [RFC4821]   Mathis, M. and J. Heffner, \"Packetization Layer Path\
    \ MTU\n               Discovery\", RFC 4821, March 2007.\n   [RFC5795]   Sandlund,\
    \ K., Pelletier, G., and L-E. Jonsson, \"The\n               RObust Header Compression\
    \ (ROHC) Framework\", RFC 5795,\n               March 2010.\n"
- title: Appendix A.  Details from RFC 793 and RFC 1122
  contents:
  - "Appendix A.  Details from RFC 793 and RFC 1122\n   RFC 793 [RFC793] defines the\
    \ MSS option as follows:\n      Maximum Segment Size Option Data:  16 bits\n \
    \        If this option is present, then it communicates the maximum\n       \
    \  receive segment size at the TCP which sends this segment.  This\n         field\
    \ must only be sent in the initial connection request\n         (i.e., in segments\
    \ with the SYN control bit set).  If this\n         option is not used, any segment\
    \ size is allowed.\n   RFC 1122 [RFC1122] provides additional clarification in\n\
    \   Section 4.2.2.6, on pages 85-86.  First, it changes the default\n   behavior\
    \ when the MSS option is not present:\n      If an MSS option is not received\
    \ at connection setup, TCP MUST\n      assume a default send MSS of 536 (576-40)\
    \ [TCP:4].\n   Then, it clarifies how to determine the value to use in the MSS\n\
    \   option:\n      The MSS value to be sent in an MSS option must be less than\
    \ or\n      equal to:\n         MMS_R - 20\n      where MMS_R is the maximum size\
    \ for a transport-layer message that\n      can be received (and reassembled).\
    \  TCP obtains MMS_R and MMS_S\n      from the IP layer; see the generic call\
    \ GET_MAXSIZES in\n      Section 3.4.\n   What is implied in RFC 1122, but not\
    \ explicitly stated, is that the\n   20 is the size of the fixed TCP header. \
    \ The definition of MMS_R is\n   found in Section 3.3.2, on page 57:\n      MMS_R\
    \ is given by:\n         MMS_R = EMTU_R - 20\n      since 20 is the minimum size\
    \ of an IP header.\n   and on page 56 (also Section 3.3.2):\n      We designate\
    \ the largest datagram size that can be reassembled by\n      EMTU_R (\"Effective\
    \ MTU to receive\"); this is sometimes called the\n      \"reassembly buffer size\"\
    .  EMTU_R MUST be greater than or equal to\n      576, SHOULD be either configurable\
    \ or indefinite, and SHOULD be\n      greater than or equal to the MTU of the\
    \ connected network(s).\n   What should be noted here is that EMTU_R is the largest\
    \ datagram size\n   that can be reassembled, not the largest datagram size that\
    \ can be\n   received without fragmentation.  Taking this literally, since most\n\
    \   modern TCP/IP implementations can reassemble a full 64K IP packet,\n   implementations\
    \ should be using 65535 - 20 - 20, or 65495, for the\n   MSS option.  But there\
    \ is more to it than that.  RFC 1122 also\n   states, on page 86:\n      The choice\
    \ of TCP segment size has a strong effect on performance.\n      Larger segments\
    \ increase throughput by amortizing header size and\n      per-datagram processing\
    \ overhead over more data bytes; however, if\n      the packet is so large that\
    \ it causes IP fragmentation, efficiency\n      drops sharply if any fragments\
    \ are lost [IP:9].\n   Since it is guaranteed that any IP datagram that is larger\
    \ than the\n   MTU of the connected network will have to be fragmented to be\n\
    \   received, implementations ignore the \"greater than or\" part of\n   \"SHOULD\
    \ be greater than or equal to the MTU of the connected\n   network(s)\".  Thus,\
    \ the MSS value to be sent in an MSS option must be\n   less than or equal to:\n\
    \      EMTU_R - FixedIPhdrsize - FixedTCPhdrsize\n   where FixedTCPhdrsize is\
    \ 20, and FixedIPhdrsize is 20 for IPv4 and 40\n   for IPv6.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   David Borman\n   Quantum Corporation\n   Mendota Heights,\
    \ MN  55120\n   EMail: david.borman@quantum.com\n"
