- title: __initial_text__
  contents:
  - ''
- title: Double Encryption Procedures for the Secure Real-Time Transport Protocol
  contents:
  - 'Double Encryption Procedures for the Secure Real-Time Transport Protocol

    '
- title: Abstract
  contents:
  - "Abstract\n   In some conferencing scenarios, it is desirable for an intermediary\n\
    \   to be able to manipulate some parameters in Real-time Transport\n   Protocol\
    \ (RTP) packets, while still providing strong end-to-end\n   security guarantees.\
    \  This document defines a cryptographic transform\n   for the Secure Real-time\
    \ Transport Protocol (SRTP) that uses two\n   separate but related cryptographic\
    \ operations to provide hop-by-hop\n   and end-to-end security guarantees.  Both\
    \ the end-to-end and hop-by-\n   hop cryptographic algorithms can utilize an authenticated\
    \ encryption\n   with associated data (AEAD) algorithm or take advantage of future\n\
    \   SRTP transforms with different properties.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 7841.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8723.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2020 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (https://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction\n   2.  Terminology\n   3.  Cryptographic\
    \ Context\n     3.1.  Key Derivation\n   4.  Original Header Block\n   5.  RTP\
    \ Operations\n     5.1.  Encrypting a Packet\n     5.2.  Relaying a Packet\n \
    \    5.3.  Decrypting a Packet\n   6.  RTCP Operations\n   7.  Use with Other\
    \ RTP Mechanisms\n     7.1.  RTP Retransmission (RTX)\n     7.2.  Redundant Audio\
    \ Data (RED)\n     7.3.  Forward Error Correction (FEC)\n     7.4.  DTMF\n   8.\
    \  Recommended Inner and Outer Cryptographic Algorithms\n   9.  Security Considerations\n\
    \   10. IANA Considerations\n     10.1.  DTLS-SRTP\n   11. References\n     11.1.\
    \  Normative References\n     11.2.  Informative References\n   Appendix A.  Encryption\
    \ Overview\n   Acknowledgments\n   Authors' Addresses\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Cloud conferencing systems that are based on switched conferencing\n\
    \   have a central Media Distributor (MD) device that receives media from\n  \
    \ endpoints and distributes it to other endpoints, but does not need to\n   interpret\
    \ or change the media content.  For these systems, it is\n   desirable to have\
    \ one cryptographic key that enables encryption and\n   authentication of the\
    \ media end-to-end while still allowing certain\n   information in the header\
    \ of an RTP packet to be changed by the MD.\n   At the same time, a separate cryptographic\
    \ key provides integrity and\n   optional confidentiality for the media flowing\
    \ between the MD and the\n   endpoints.  The framework document [PRIVATE-MEDIA-FRAMEWORK]\n\
    \   describes this concept in more detail.\n   This specification defines a transform\
    \ for SRTP that uses 1) the AES\n   Galois/Counter Mode (AES-GCM) algorithm [RFC7714]\
    \ to provide\n   encryption and integrity for an RTP packet for the end-to-end\n\
    \   cryptographic key and 2) a hop-by-hop cryptographic encryption and\n   integrity\
    \ between the endpoint and the MD.  The MD decrypts and\n   checks integrity of\
    \ the hop-by-hop security.  The MD MAY change some\n   of the RTP header information\
    \ that would impact the end-to-end\n   integrity.  In that case, the original\
    \ value of any RTP header field\n   that is changed is included in an \"Original\
    \ Header Block\" that is\n   added to the packet.  The new RTP packet is encrypted\
    \ with the hop-\n   by-hop cryptographic algorithm before it is sent.  The receiving\n\
    \   endpoint decrypts and checks integrity using the hop-by-hop\n   cryptographic\
    \ algorithm and then replaces any parameters the MD\n   changed using the information\
    \ in the Original Header Block before\n   decrypting and checking the end-to-end\
    \ integrity.\n   One can think of the double transform as a normal SRTP transform\
    \ for\n   encrypting the RTP in a way such that things that only know half of\n\
    \   the key, can decrypt and modify part of the RTP packet but not other\n   parts,\
    \ including the media payload.\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\"\
    , \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted as described\
    \ in\n   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all\n\
    \   capitals, as shown here.\n   Terms used throughout this document include:\n\
    \   Media Distributor (MD):  A device that receives media from endpoints\n   \
    \   and distributes it to other endpoints, but does not need to\n      interpret\
    \ or change the media content (see also\n      [PRIVATE-MEDIA-FRAMEWORK]).\n \
    \  end-to-end:  The path from one endpoint through one or more MDs to\n      the\
    \ endpoint at the other end.\n   hop-by-hop:  The path from the endpoint to or\
    \ from the MD.\n   Original Header Block (OHB):  An octet string that contains\
    \ the\n      original values from the RTP header that might have been changed\n\
    \      by an MD.\n"
- title: 3.  Cryptographic Context
  contents:
  - "3.  Cryptographic Context\n   This specification uses a cryptographic context\
    \ with two parts:\n   *  An inner (end-to-end) part that is used by endpoints\
    \ that\n      originate and consume media to ensure the integrity of media end-\n\
    \      to-end, and\n   *  An outer (hop-by-hop) part that is used between endpoints\
    \ and MDs\n      to ensure the integrity of media over a single hop and to enable\n\
    \      an MD to modify certain RTP header fields.  RTCP is also handled\n    \
    \  using the hop-by-hop cryptographic part.\n   The RECOMMENDED cipher for the\
    \ hop-by-hop and end-to-end algorithms\n   is AES-GCM.  Other combinations of\
    \ SRTP ciphers that support the\n   procedures in this document can be added to\
    \ the IANA registry.\n   The keys and salt for these algorithms are generated\
    \ with the\n   following steps:\n   *  Generate key and salt values of the length\
    \ required for the\n      combined inner (end-to-end) and outer (hop-by-hop) algorithms.\n\
    \   *  Assign the key and salt values generated for the inner (end-to-\n     \
    \ end) algorithm to the first half of the key and the first half of\n      the\
    \ salt for the double algorithm.\n   *  Assign the key and salt values for the\
    \ outer (hop-by-hop)\n      algorithm to the second half of the key and second\
    \ half of the\n      salt for the double algorithm.  The first half of the key\
    \ is\n      referred to as the inner key while the second half is referred to\n\
    \      as the outer key.  When a key is used by a cryptographic\n      algorithm,\
    \ the salt that is used is the part of the salt generated\n      with that key.\n\
    \   *  the synchronization source (SSRC) is the same for both the inner\n    \
    \  and outer algorithms as it cannot be changed.\n   *  The sequence number (SEQ)\
    \ and rollover counter (ROC) are tracked\n      independently for the inner and\
    \ outer algorithms.\n   If the MD is to be able to modify header fields but not\
    \ decrypt the\n   payload, then it must have a cryptographic key for the outer\n\
    \   algorithm but not the inner (end-to-end) algorithm.  This document\n   does\
    \ not define how the MD should be provisioned with this\n   information.  One\
    \ possible way to provide keying material for the\n   outer (hop-by-hop) algorithm\
    \ is to use [DTLS-TUNNEL].\n"
- title: 3.1.  Key Derivation
  contents:
  - "3.1.  Key Derivation\n   Although SRTP uses a single master key to derive keys\
    \ for an SRTP\n   session, this transform requires separate inner and outer keys.\
    \  In\n   order to allow the inner and outer keys to be managed independently\n\
    \   via the master key, the transforms defined in this document MUST be\n   used\
    \ with the following pseudorandom function (PRF), which preserves\n   the separation\
    \ between the two halves of the key.  Given a positive\n   integer \"n\" representing\
    \ the desired output length, a master key\n   \"k_master\", and an input \"x\"\
    :\n        PRF_double_n(k_master,x) = PRF_(n/2)(inner(k_master),x) ||\n   Here\
    \ \"PRF_double_n(k_master, x)\" represents the AES_CM PRF Key\n   Derivation Function\
    \ (KDF) (see Section 4.3.3 of [RFC3711]) for\n   DOUBLE_AEAD_AES_128_GCM_AEAD_AES_128_GCM\
    \ algorithm and AES_256_CM_PRF\n   KDF [RFC6188] for DOUBLE_AEAD_AES_256_GCM_AEAD_AES_256_GCM\
    \ algorithm.\n   The term \"inner(k_master)\" represents the first half of the\
    \ key;\n   \"outer(k_master)\" represents the second half of the key.\n"
- title: 4.  Original Header Block
  contents:
  - "4.  Original Header Block\n   The OHB contains the original values of any modified\
    \ RTP header\n   fields.  In the encryption process, the OHB is included in an\
    \ SRTP\n   packet as described in Section 5.  In the decryption process, the\n\
    \   receiving endpoint uses it to reconstruct the original RTP header so\n   that\
    \ it can pass the proper additional authenticated data (AAD) value\n   to the\
    \ inner transform.\n   The OHB can reflect modifications to the following fields\
    \ in an RTP\n   header: the payload type (PT), the SEQ, and the marker bit.  All\n\
    \   other fields in the RTP header MUST remain unmodified; since the OHB\n   cannot\
    \ reflect their original values, the receiver will be unable to\n   verify the\
    \ end-to-end integrity of the packet.\n   The OHB has the following syntax (in\
    \ ABNF [RFC5234]):\n   OCTET = %x00-FF\n   PT = OCTET\n   SEQ = 2OCTET\n   Config\
    \ = OCTET\n   OHB = [ PT ] [ SEQ ] Config\n   If present, the PT and SEQ parts\
    \ of the OHB contain the original\n   payload type and sequence number fields,\
    \ respectively.  The final\n   \"Config\" octet of the OHB specifies whether these\
    \ fields are present,\n   and the original value of the marker bit (if necessary):\n\
    \   +-+-+-+-+-+-+-+-+\n   |R R R R B M P Q|\n   +-+-+-+-+-+-+-+-+\n   *  P: PT\
    \ is present\n   *  Q: SEQ is present\n   *  M: Marker bit is present\n   *  B:\
    \ Value of marker bit\n   *  R: Reserved, MUST be set to 0\n   In particular,\
    \ an all-zero OHB Config octet (\"0x00\") indicates that\n   there have been no\
    \ modifications from the original header.\n   If the marker bit is not present\
    \ (M=0), then \"B\" MUST be set to zero.\n   That is, if \"C\" represents the\
    \ value of the Config octet, then the\n   masked value \"C & 0x0C\" MUST NOT have\
    \ the value \"0x80\".\n"
- title: 5.  RTP Operations
  contents:
  - "5.  RTP Operations\n   As implied by the use of the word \"double\" above, this\
    \ transform\n   applies AES-GCM to the SRTP packet twice.  This allows media\n\
    \   distributors to be able to modify some header fields while allowing\n   endpoints\
    \ to verify the end-to-end integrity of a packet.\n   The first, \"inner\" application\
    \ of AES-GCM encrypts the SRTP payload\n   and protects the integrity of a version\
    \ of the SRTP header with\n   extensions truncated.  Omitting extensions from\
    \ the inner integrity\n   check means that they can be modified by an MD holding\
    \ only the outer\n   key.\n   The second, \"outer\" application of AES-GCM encrypts\
    \ the ciphertext\n   produced by the inner encryption (i.e., the encrypted payload\
    \ and\n   authentication tag), plus an OHB that expresses any changes made\n \
    \  between the inner and outer transforms.\n   An MD that has the outer key but\
    \ not the inner key may modify the\n   header fields that can be included in the\
    \ OHB by decrypting,\n   modifying, and re-encrypting the packet.\n"
- title: 5.1.  Encrypting a Packet
  contents:
  - "5.1.  Encrypting a Packet\n   An endpoint encrypts a packet by using the inner\
    \ (end-to-end)\n   cryptographic key and then the outer (hop-by-hop) cryptographic\
    \ key.\n   The encryption also supports a mode for repair packets that only does\n\
    \   the outer (hop-by-hop) encryption.  The processes is as follows:\n   1.  Form\
    \ an RTP packet.  If there are any header extensions, they\n       MUST use [RFC8285].\n\
    \   2.  If the packet is for repair mode data, skip to step 6.\n   3.  Form a\
    \ synthetic RTP packet with the following contents:\n       *  Header: The RTP\
    \ header of the original packet with the\n          following modifications:\n\
    \          -  The X bit is set to zero.\n          -  The header is truncated\
    \ to remove any extensions (i.e.,\n             keep only the first 12 + 4 * CSRC\
    \ count (CC) bytes of the\n             header).\n       *  Payload: The RTP payload\
    \ of the original packet (including\n          padding when present).\n   4. \
    \ Apply the inner cryptographic algorithm to the synthetic RTP\n       packet\
    \ from the previous step.\n   5.  Replace the header of the protected RTP packet\
    \ with the header of\n       the original packet (to restore any header extensions\
    \ and reset\n       the X bit), and append an empty OHB (\"0x00\") to the encrypted\n\
    \       payload (with the authentication tag) obtained from step 4.\n   6.  Apply\
    \ the outer cryptographic algorithm to the RTP packet.  If\n       encrypting\
    \ RTP header extensions hop-by-hop, then [RFC6904] MUST\n       be used when encrypting\
    \ the RTP packet using the outer\n       cryptographic key.\n   When using Encrypted\
    \ Key Transport (EKT) [EKT-SRTP], the EKTField\n   comes after the SRTP packet,\
    \ exactly like using EKT with any other\n   SRTP transform.\n"
- title: 5.2.  Relaying a Packet
  contents:
  - "5.2.  Relaying a Packet\n   The MD has the part of the key for the outer (hop-by-hop)\n\
    \   cryptographic algorithm, but it does not have the part of the key for\n  \
    \ the inner (end-to-end) cryptographic algorithm.  The cryptographic\n   algorithm\
    \ and key used to decrypt a packet and any encrypted RTP\n   header extensions\
    \ would be the same as those used in the endpoint's\n   outer algorithm and key.\n\
    \   In order to modify a packet, the MD decrypts the received packet,\n   modifies\
    \ the packet, updates the OHB with any modifications not\n   already present in\
    \ the OHB, and re-encrypts the packet using the\n   outer (hop-by-hop) cryptographic\
    \ key before transmitting using the\n   following steps:\n   1.  Apply the outer\
    \ (hop-by-hop) cryptographic algorithm to decrypt\n       the packet.  If decrypting\
    \ RTP header extensions hop-by-hop, then\n       [RFC6904] MUST be used.  Note\
    \ that the RTP payload produced by\n       this decryption operation contains\
    \ the original encrypted payload\n       with the tag from the inner transform\
    \ and the OHB appended.\n   2.  Make any desired changes to the fields that are\
    \ allowed to be\n       changed, i.e., PT, SEQ, and M.  The MD MAY also make\n\
    \       modifications to header extensions, without the need to reflect\n    \
    \   these changes in the OHB.\n   3.  Reflect any changes to header fields in\
    \ the OHB:\n       *  If the MD changed a field that is not already in the OHB,\
    \ then\n          it MUST add the original value of the field to the OHB.  Note\n\
    \          that this might result in an increase in the size of the OHB.\n   \
    \    *  If the MD took a field that had previously been modified and\n       \
    \   reset to its original value, then it SHOULD drop the\n          corresponding\
    \ information from the OHB.  Note that this might\n          result in a decrease\
    \ in the size of the OHB.\n       *  Otherwise, the MD MUST NOT modify the OHB.\n\
    \   4.  Apply the outer (hop-by-hop) cryptographic algorithm to the\n       packet.\
    \  If the RTP sequence number has been modified, SRTP\n       processing happens\
    \ as defined in SRTP and will end up using the\n       new sequence number.  If\
    \ encrypting RTP header extensions hop-by-\n       hop, then [RFC6904] MUST be\
    \ used.\n   In order to avoid nonce reuse, the cryptographic contexts used in\n\
    \   steps 1 and 4 MUST use different, independent master keys.  Note that\n  \
    \ this means that the key used for decryption by the MD MUST be\n   different\
    \ from the key used for re-encryption to the end recipient.\n   Note that if multiple\
    \ MDs modify the same packet, then the first MD\n   to alter a given header field\
    \ is the one that adds it to the OHB.  If\n   a subsequent MD changes the value\
    \ of a header field that has already\n   been changed, then the original value\
    \ will already be in the OHB, so\n   no update to the OHB is required.\n   An\
    \ MD that decrypts, modifies, and re-encrypts packets in this way\n   MUST use\
    \ an independent key for each recipient, and MUST NOT re-\n   encrypt the packet\
    \ using the sender's keys.  If the MD decrypts and\n   re-encrypts with the same\
    \ key and salt, it will result in the reuse\n   of a (key, nonce) pair, undermining\
    \ the security of AES-GCM.\n"
- title: 5.3.  Decrypting a Packet
  contents:
  - "5.3.  Decrypting a Packet\n   To decrypt a packet, the endpoint first decrypts\
    \ and verifies using\n   the outer (hop-by-hop) cryptographic key, then uses the\
    \ OHB to\n   reconstruct the original packet, which it decrypts and verifies with\n\
    \   the inner (end-to-end) cryptographic key using the following steps:\n   1.\
    \  Apply the outer cryptographic algorithm to the packet.  If the\n       integrity\
    \ check does not pass, discard the packet.  The result of\n       this is referred\
    \ to as the outer SRTP packet.  If decrypting RTP\n       header extensions hop-by-hop,\
    \ then [RFC6904] MUST be used when\n       decrypting the RTP packet using the\
    \ outer cryptographic key.\n   2.  If the packet is for repair mode data, skip\
    \ the rest of the\n       steps.  Note that the packet that results from the repair\n\
    \       algorithm will still have encrypted data that needs to be\n       decrypted\
    \ as specified by the repair algorithm sections.\n   3.  Remove the inner authentication\
    \ tag and the OHB from the end of\n       the payload of the outer SRTP packet.\n\
    \   4.  Form a new synthetic SRTP packet with:\n       *  Header = Received header,\
    \ with the following modifications:\n          -  Header fields replaced with\
    \ values from OHB (if any).\n          -  The X bit is set to zero.\n        \
    \  -  The header is truncated to remove any extensions (i.e.,\n             keep\
    \ only the first 12 + 4 * CC bytes of the header).\n       *  Payload is the encrypted\
    \ payload from the outer SRTP packet\n          (after the inner tag and OHB have\
    \ been stripped).\n       *  Authentication tag is the inner authentication tag\
    \ from the\n          outer SRTP packet.\n   5.  Apply the inner cryptographic\
    \ algorithm to this synthetic SRTP\n       packet.  Note if the RTP sequence number\
    \ was changed by the MD,\n       the synthetic packet has the original sequence\
    \ number.  If the\n       integrity check does not pass, discard the packet.\n\
    \   Once the packet has been successfully decrypted, the application\n   needs\
    \ to be careful about which information it uses to get the\n   correct behavior.\
    \  The application MUST use only the information\n   found in the synthetic SRTP\
    \ packet and MUST NOT use the other data\n   that was in the outer SRTP packet\
    \ with the following exceptions:\n   *  The PT from the outer SRTP packet is used\
    \ for normal matching to\n      Session Description Protocol (SDP) and codec selection.\n\
    \   *  The sequence number from the outer SRTP packet is used for normal\n   \
    \   RTP ordering.\n   The PT and sequence number from the inner SRTP packet can\
    \ be used for\n   collection of various statistics.\n   If the RTP header of the\
    \ outer packet contains extensions, they MAY\n   be used.  However, because extensions\
    \ are not protected end-to-end,\n   implementations SHOULD reject an RTP packet\
    \ containing headers that\n   would require end-to-end protection.\n"
- title: 6.  RTCP Operations
  contents:
  - "6.  RTCP Operations\n   Unlike RTP, which is encrypted both hop-by-hop and end-to-end\
    \ using\n   two separate cryptographic keys, RTCP is encrypted using only the\n\
    \   outer (hop-by-hop) cryptographic key.  The procedures for RTCP\n   encryption\
    \ are specified in [RFC3711], and this document introduces\n   no additional steps.\n"
- title: 7.  Use with Other RTP Mechanisms
  contents:
  - "7.  Use with Other RTP Mechanisms\n   MDs sometimes interact with RTP media packets\
    \ sent by endpoints,\n   e.g., to provide recovery or receive commands via dual-tone\
    \ multi-\n   frequency (DTMF) signaling.  When media packets are encrypted end-to-\n\
    \   end, these procedures require modification.  (End-to-end\n   interactions,\
    \ including end-to-end recovery, are not affected by end-\n   to-end encryption.)\n\
    \   Repair mechanisms, in general, will need to perform recovery on\n   encrypted\
    \ packets (double-encrypted when using this transform), since\n   the MD does\
    \ not have access to the plaintext of the packet, only an\n   intermediate, E2E-encrypted\
    \ form.\n   When the recovery mechanism calls for the recovery packet itself to\n\
    \   be encrypted, it is encrypted with only the outer, hop-by-hop key.\n   This\
    \ allows an MD to generate recovery packets without having access\n   to the inner,\
    \ end-to-end keys.  However, it also results in recovery\n   packets being triple-encrypted,\
    \ twice for the base transform, and\n   once for the recovery protection.\n"
- title: 7.1.  RTP Retransmission (RTX)
  contents:
  - "7.1.  RTP Retransmission (RTX)\n   When using RTX [RFC4588] with the double transform,\
    \ the cached\n   payloads MUST be the double-encrypted packets, i.e., the bits\
    \ that\n   are sent over the wire to the other side.  When encrypting a\n   retransmission\
    \ packet, it MUST be encrypted like a packet in repair\n   mode (i.e., with only\
    \ the hop-by-hop key).\n   If the MD were to cache the inner, E2E-encrypted payload\
    \ and\n   retransmit it with an RTX original sequence number field prepended,\n\
    \   then the modifications to the payload would cause the inner integrity\n  \
    \ check to fail at the receiver.\n   A typical RTX receiver would decrypt the\
    \ packet, undo the RTX\n   transformation, then process the resulting packet normally\
    \ by using\n   the steps in Section 5.3.\n"
- title: 7.2.  Redundant Audio Data (RED)
  contents:
  - "7.2.  Redundant Audio Data (RED)\n   When using RED [RFC2198] with the double\
    \ transform, the processing at\n   the sender and receiver is the same as when\
    \ using RED with any other\n   SRTP transform.\n   The main difference between\
    \ the double transform and any other\n   transform is that in an intermediated\
    \ environment, usage of RED must\n   be end-to-end.  An MD cannot synthesize RED\
    \ packets, because it lacks\n   access to the plaintext media payloads that are\
    \ combined to form a\n   RED payload.\n   Note that Flexible Forward Error Correction\
    \ (Flex FEC) may often\n   provide similar or better repair capabilities compared\
    \ to RED.  For\n   most applications, Flex FEC is a better choice than RED; in\n\
    \   particular, Flex FEC has modes in which the MD can synthesize\n   recovery\
    \ packets.\n"
- title: 7.3.  Forward Error Correction (FEC)
  contents:
  - "7.3.  Forward Error Correction (FEC)\n   When using Flex FEC [RFC8627] with the\
    \ double transform, repair\n   packets MUST be constructed by first double-encrypting\
    \ the packet,\n   then performing FEC.  Processing of repair packets proceeds\
    \ in the\n   opposite order, performing FEC recovery and then decrypting.  This\n\
    \   ensures that the original media is not revealed to the MD but, at the\n  \
    \ same time, allows the MD to repair media.  When encrypting a packet\n   that\
    \ contains the Flex FEC data, which is already encrypted, it MUST\n   be encrypted\
    \ with only the outer, hop-by-hop transform.\n   The algorithm recommended in\
    \ [WEBRTC-FEC] for repair of video is Flex\n   FEC [RFC8627].  Note that for interoperability\
    \ with WebRTC,\n   [WEBRTC-FEC] recommends not using additional FEC-only \"m=\"\
    \ lines in\n   SDP for the repair packets.\n"
- title: 7.4.  DTMF
  contents:
  - "7.4.  DTMF\n   When DTMF is sent using the mechanism in [RFC4733], it is end-to-end\n\
    \   encrypted; the relay cannot read it, so it cannot be used to control\n   the\
    \ relay.  Other out-of-band methods to control the relay need to be\n   used instead.\n"
- title: 8.  Recommended Inner and Outer Cryptographic Algorithms
  contents:
  - "8.  Recommended Inner and Outer Cryptographic Algorithms\n   This specification\
    \ recommends and defines AES-GCM as both the inner\n   and outer cryptographic\
    \ algorithms, identified as\n   DOUBLE_AEAD_AES_128_GCM_AEAD_AES_128_GCM and\n\
    \   DOUBLE_AEAD_AES_256_GCM_AEAD_AES_256_GCM.  These algorithms provide\n   for\
    \ authenticated encryption and will consume additional processing\n   time double-encrypting\
    \ for hop-by-hop and end-to-end.  However, the\n   approach is secure and simple;\
    \ thus, it is viewed as an acceptable\n   trade-off in processing efficiency.\n\
    \   Note that names for the cryptographic transforms are of the form\n   DOUBLE_(inner\
    \ algorithm)_(outer algorithm).\n   While this document only defines a profile\
    \ based on AES-GCM, it is\n   possible for future documents to define further\
    \ profiles with\n   different inner and outer algorithms in this same framework.\
    \  For\n   example, if a new SRTP transform were defined that encrypts some or\n\
    \   all of the RTP header, it would be reasonable for systems to have the\n  \
    \ option of using that for the outer algorithm.  Similarly, if a new\n   transform\
    \ were defined that provided only integrity, that would also\n   be reasonable\
    \ to use for the outer transform as the payload data is\n   already encrypted\
    \ by the inner transform.\n   The AES-GCM cryptographic algorithm introduces an\
    \ additional 16\n   octets to the length of the packet.  When using AES-GCM for\
    \ both the\n   inner and outer cryptographic algorithms, the total additional\
    \ length\n   is 32 octets.  The OHB will consume an additional 1-4 octets.\n \
    \  Packets in repair mode will carry additional repair data, further\n   increasing\
    \ their size.\n"
- title: 9.  Security Considerations
  contents:
  - "9.  Security Considerations\n   This SRTP transform provides protection against\
    \ two classes of\n   attacker: a network attacker that knows neither the inner\
    \ nor outer\n   keys and a malicious MD that knows the outer key.  Obviously,\
    \ it\n   provides no protections against an attacker that holds both the inner\n\
    \   and outer keys.\n   The protections with regard to the network are the same\
    \ as with the\n   normal SRTP AES-GCM transforms.  The major difference is that\
    \ the\n   double transforms are designed to work better in a group context.  In\n\
    \   such contexts, it is important to note that because these transforms\n   are\
    \ symmetric, they do not protect against attacks within the group.\n   Any member\
    \ of the group can generate valid SRTP packets for any SSRC\n   in use by the\
    \ group.\n   With regard to a malicious MD, the recipient can verify the integrity\n\
    \   of the base header fields and confidentiality and integrity of the\n   payload.\
    \  The recipient has no assurance, however, of the integrity\n   of the header\
    \ extensions in the packet.\n   The main innovation of this transform relative\
    \ to other SRTP\n   transforms is that it allows a partly trusted MD to decrypt,\
    \ modify,\n   and re-encrypt a packet.  When this is done, the cryptographic\n\
    \   contexts used for decryption and re-encryption MUST use different,\n   independent\
    \ master keys.  If the same context is used, the nonce\n   formation rules for\
    \ SRTP will cause the same key and nonce to be used\n   with two different plaintexts,\
    \ which substantially degrades the\n   security of AES-GCM.\n   In other words,\
    \ from the perspective of the MD, re-encrypting packets\n   using this protocol\
    \ will involve the same cryptographic operations as\n   if it had established\
    \ independent AES-GCM crypto contexts with the\n   sender and the receiver.  This\
    \ property allows the use of an MD that\n   supports AES-GCM but does not modify\
    \ any header fields, without\n   requiring any modification to the MD.\n"
- title: 10.  IANA Considerations
  contents:
  - '10.  IANA Considerations

    '
- title: 10.1.  DTLS-SRTP
  contents:
  - "10.1.  DTLS-SRTP\n   IANA has added the following protection profiles to the\
    \ \"DTLS-SRTP\n   Protection Profiles\" registry defined in [RFC5764].\n     |\
    \ Value  | Profile                                  | Reference |\n     | {0x00,\
    \ | DOUBLE_AEAD_AES_128_GCM_AEAD_AES_128_GCM | RFC 8723  |\n     | 0x09}  |  \
    \                                        |           |\n     | {0x00, | DOUBLE_AEAD_AES_256_GCM_AEAD_AES_256_GCM\
    \ | RFC 8723  |\n     | 0x0A}  |                                          |  \
    \         |\n       Table 1: Updates to the DTLS-SRTP Protection Profiles Registry\n\
    \   The SRTP transform parameters for each of these protection profiles\n   are:\n\
    \        | DOUBLE_AEAD_AES_128_GCM_AEAD_AES_128_GCM                |\n       \
    \ | cipher:               | AES_128_GCM then AES_128_GCM    |\n        | cipher_key_length:\
    \    | 256 bits                        |\n        | cipher_salt_length:   | 192\
    \ bits                        |\n        | aead_auth_tag_length: | 256 bits  \
    \                      |\n        | auth_function:        | NULL             \
    \               |\n        | auth_key_length:      | N/A                     \
    \        |\n        | auth_tag_length:      | N/A                            \
    \ |\n        | maximum lifetime:     | at most 2^(31) SRTCP packets    |\n   \
    \                Table 2: SRTP Transform Parameters for\n                  DOUBLE_AEAD_AES_128_GCM_AEAD_AES_128_GCM\n\
    \        | DOUBLE_AEAD_AES_256_GCM_AEAD_AES_256_GCM                |\n       \
    \ | cipher:               | AES_256_GCM then AES_256_GCM    |\n        | cipher_key_length:\
    \    | 512 bits                        |\n        | cipher_salt_length:   | 192\
    \ bits                        |\n        | aead_auth_tag_length: | 256 bits  \
    \                      |\n        | auth_function:        | NULL             \
    \               |\n        | auth_key_length:      | N/A                     \
    \        |\n        | auth_tag_length:      | N/A                            \
    \ |\n        | maximum lifetime:     | at most 2^(31) SRTCP packets    |\n   \
    \                Table 3: SRTP Transform Parameters for\n                  DOUBLE_AEAD_AES_256_GCM_AEAD_AES_256_GCM\n\
    \   The first half of the key and salt is used for the inner (end-to-end)\n  \
    \ algorithm and the second half is used for the outer (hop-by-hop)\n   algorithm.\n"
- title: 11.  References
  contents:
  - '11.  References

    '
- title: 11.1.  Normative References
  contents:
  - "11.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n  \
    \            DOI 10.17487/RFC2119, March 1997,\n              <https://www.rfc-editor.org/info/rfc2119>.\n\
    \   [RFC3711]  Baugher, M., McGrew, D., Naslund, M., Carrara, E., and K.\n   \
    \           Norrman, \"The Secure Real-time Transport Protocol (SRTP)\",\n   \
    \           RFC 3711, DOI 10.17487/RFC3711, March 2004,\n              <https://www.rfc-editor.org/info/rfc3711>.\n\
    \   [RFC5764]  McGrew, D. and E. Rescorla, \"Datagram Transport Layer\n      \
    \        Security (DTLS) Extension to Establish Keys for the Secure\n        \
    \      Real-time Transport Protocol (SRTP)\", RFC 5764,\n              DOI 10.17487/RFC5764,\
    \ May 2010,\n              <https://www.rfc-editor.org/info/rfc5764>.\n   [RFC6188]\
    \  McGrew, D., \"The Use of AES-192 and AES-256 in Secure\n              RTP\"\
    , RFC 6188, DOI 10.17487/RFC6188, March 2011,\n              <https://www.rfc-editor.org/info/rfc6188>.\n\
    \   [RFC6904]  Lennox, J., \"Encryption of Header Extensions in the Secure\n \
    \             Real-time Transport Protocol (SRTP)\", RFC 6904,\n             \
    \ DOI 10.17487/RFC6904, April 2013,\n              <https://www.rfc-editor.org/info/rfc6904>.\n\
    \   [RFC7714]  McGrew, D. and K. Igoe, \"AES-GCM Authenticated Encryption\n  \
    \            in the Secure Real-time Transport Protocol (SRTP)\",\n          \
    \    RFC 7714, DOI 10.17487/RFC7714, December 2015,\n              <https://www.rfc-editor.org/info/rfc7714>.\n\
    \   [RFC8174]  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n     \
    \         2119 Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n        \
    \      May 2017, <https://www.rfc-editor.org/info/rfc8174>.\n   [RFC8285]  Singer,\
    \ D., Desineni, H., and R. Even, Ed., \"A General\n              Mechanism for\
    \ RTP Header Extensions\", RFC 8285,\n              DOI 10.17487/RFC8285, October\
    \ 2017,\n              <https://www.rfc-editor.org/info/rfc8285>.\n"
- title: 11.2.  Informative References
  contents:
  - "11.2.  Informative References\n   [DTLS-TUNNEL]\n              Jones, P., Ellenbogen,\
    \ P., and N. Ohlmeier, \"DTLS Tunnel\n              between a Media Distributor\
    \ and Key Distributor to\n              Facilitate Key Exchange\", Work in Progress,\
    \ Internet-\n              Draft, draft-ietf-perc-dtls-tunnel-06, 16 October 2019,\n\
    \              <https://tools.ietf.org/html/draft-ietf-perc-dtls-tunnel-\n   \
    \           06>.\n   [EKT-SRTP] Jennings, C., Mattsson, J., McGrew, D., Wing,\
    \ D., and F.\n              Andreasen, \"Encrypted Key Transport for DTLS and\
    \ Secure\n              RTP\", Work in Progress, Internet-Draft, draft-ietf-perc-\n\
    \              srtp-ekt-diet-10, 8 July 2019,\n              <https://tools.ietf.org/html/draft-ietf-perc-srtp-ekt-\n\
    \              diet-10>.\n   [PRIVATE-MEDIA-FRAMEWORK]\n              Jones, P.,\
    \ Benham, D., and C. Groves, \"A Solution\n              Framework for Private\
    \ Media in Privacy Enhanced RTP\n              Conferencing (PERC)\", Work in\
    \ Progress, Internet-Draft,\n              draft-ietf-perc-private-media-framework-12,\
    \ 5 June 2019,\n              <https://tools.ietf.org/html/draft-ietf-perc-private-\n\
    \              media-framework-12>.\n   [RFC2198]  Perkins, C., Kouvelas, I.,\
    \ Hodson, O., Hardman, V.,\n              Handley, M., Bolot, J.C., Vega-Garcia,\
    \ A., and S. Fosse-\n              Parisis, \"RTP Payload for Redundant Audio\
    \ Data\", RFC 2198,\n              DOI 10.17487/RFC2198, September 1997,\n   \
    \           <https://www.rfc-editor.org/info/rfc2198>.\n   [RFC4588]  Rey, J.,\
    \ Leon, D., Miyazaki, A., Varsa, V., and R.\n              Hakenberg, \"RTP Retransmission\
    \ Payload Format\", RFC 4588,\n              DOI 10.17487/RFC4588, July 2006,\n\
    \              <https://www.rfc-editor.org/info/rfc4588>.\n   [RFC4733]  Schulzrinne,\
    \ H. and T. Taylor, \"RTP Payload for DTMF\n              Digits, Telephony Tones,\
    \ and Telephony Signals\", RFC 4733,\n              DOI 10.17487/RFC4733, December\
    \ 2006,\n              <https://www.rfc-editor.org/info/rfc4733>.\n   [RFC5234]\
    \  Crocker, D., Ed. and P. Overell, \"Augmented BNF for Syntax\n             \
    \ Specifications: ABNF\", STD 68, RFC 5234,\n              DOI 10.17487/RFC5234,\
    \ January 2008,\n              <https://www.rfc-editor.org/info/rfc5234>.\n  \
    \ [RFC8627]  Zanaty, M., Singh, V., Begen, A., and G. Mandyam, \"RTP\n       \
    \       Payload Format for Flexible Forward Error Correction\n              (FEC)\"\
    , RFC 8627, DOI 10.17487/RFC8627, July 2019,\n              <https://www.rfc-editor.org/info/rfc8627>.\n\
    \   [WEBRTC-FEC]\n              Uberti, J., \"WebRTC Forward Error Correction\n\
    \              Requirements\", Work in Progress, Internet-Draft, draft-\n    \
    \          ietf-rtcweb-fec-10, 16 July 2019,\n              <https://tools.ietf.org/html/draft-ietf-rtcweb-fec-10>.\n"
- title: Appendix A.  Encryption Overview
  contents:
  - "Appendix A.  Encryption Overview\n   The following figures show a double-encrypted\
    \ SRTP packet.  The sides\n   indicate the parts of the packet that are encrypted\
    \ and authenticated\n   by the hop-by-hop and end-to-end operations.\n       \
    \ 0                   1                   2                   3\n        0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n       |V=2|P|X|\
    \  CC   |M|     PT      |       sequence number         |\n       |          \
    \ synchronization source (SSRC) identifier            |\n       |            contributing\
    \ source (CSRC) identifiers             |\n       |                    RTP extension\
    \ (OPTIONAL) ...               |\n   O I |                          payload ...\
    \                          |\n   O I |                               +-------------------------------+\n\
    \   O I |                               | RTP padding   | RTP pad count |\n  \
    \ O +>+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   O\
    \ | |                    E2E authentication tag                     |\n   O |\
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   O | |\
    \                            OHB ...                            |\n   | | |  \
    \                  HBH authentication tag                     |\n   | |\n   |\
    \ +- E2E Encrypted Portion\n   |\n   +--- HBH Encrypted Portion\n    0       \
    \            1                   2                   3\n    0 1 2 3 4 5 6 7 8\
    \ 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   |V=2|P|X|  CC   |M|     PT\
    \      |       sequence number         | I O\n   |                           timestamp\
    \                           | I O\n   |           synchronization source (SSRC)\
    \ identifier            | I O\n   |            contributing source (CSRC) identifiers\
    \             | I O\n   |                    RTP extension (OPTIONAL) ...    \
    \           | | O\n   |                           payload ...                \
    \         | I O\n   |                    E2E authentication tag              \
    \       | | O\n   |                    HBH authentication tag                \
    \     | | |\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   Thank you to Alex Gouaillard, David Benham, Magnus Westerlund,\
    \ Nils\n   Ohlmeier, Roni Even, and Suhas Nandakumar for reviews and\n   improvements\
    \ to this specification.  In addition, thank you to Sergio\n   Garcia Murillo,\
    \ who proposed the change of transporting the OHB\n   information in the RTP payload\
    \ instead of the RTP header.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Cullen Jennings\n   Cisco Systems\n   Email: fluffy@iii.ca\n\
    \   Paul E. Jones\n   Cisco Systems\n   Email: paulej@packetizer.com\n   Richard\
    \ Barnes\n   Cisco Systems\n   Email: rlb@ipv.sx\n   Adam Roach\n"
