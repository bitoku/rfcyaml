- title: __initial_text__
  contents:
  - "                               EADS Defence and Security Systems Limited\n  \
    \              Applying Signaling Compression (SigComp)\n                to the\
    \ Session Initiation Protocol (SIP)\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes some specifics that apply when Signaling\n\
    \   Compression (SigComp) is applied to the Session Initiation Protocol\n   (SIP),\
    \ such as default minimum values of SigComp parameters,\n   compartment and state\
    \ management, and a few issues on SigComp over\n   TCP.  Any implementation of\
    \ SigComp for use with SIP must conform to\n   this document and SigComp, and\
    \ in addition, support the SIP and\n   Session Description Protocol (SDP) static\
    \ dictionary.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \   2. Terminology .....................................................3\n  \
    \ 3. Compliance with This Specification ..............................3\n   4.\
    \ Minimum Values of SigComp Parameters for SIP/SigComp ............3\n      4.1.\
    \ decompression_memory_size (DMS) for SIP/SigComp ............4\n      4.2. state_memory_size\
    \ (SMS) for SIP/SigComp ....................4\n      4.3. cycles_per_bit (CPB)\
    \ for SIP/SigComp .......................5\n      4.4. SigComp_version (SV) for\
    \ SIP/SigComp .......................5\n      4.5. locally available state (LAS)\
    \ for SIP/SigComp ..............5\n   5. Delimiting SIP Messages and SigComp Messages\
    \ on the Same Port ...5\n   6. Continuous Mode over TCP ........................................6\n\
    \   7. Too-Large SIP Messages ..........................................7\n  \
    \ 8. SIP Retransmissions .............................................7\n   9.\
    \ Compartment and State Management for SIP/SigComp ................7\n      9.1.\
    \ Remote Application Identification ..........................8\n      9.2. Identifier\
    \ Comparison Rules ...............................10\n      9.3. Compartment Opening\
    \ and Closure ...........................11\n      9.4. Lack of a Compartment\
    \ .....................................13\n   10. Recommendations for Network\
    \ Administrators ....................13\n   11. Private Agreements ............................................14\n\
    \   12. Backwards Compatibility .......................................14\n  \
    \ 13. Interactions with Transport Layer Security (TLS) ..............14\n   14.\
    \ Example .......................................................15\n   15. Security\
    \ Considerations .......................................17\n   16. IANA Considerations\
    \ ...........................................17\n   17. Acknowledgements ..............................................17\n\
    \   18. References ....................................................18\n  \
    \    18.1. Normative References .....................................18\n    \
    \  18.2. Informative References ...................................19\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   SigComp [RFC3320] is a solution for compressing messages\
    \ generated by\n   application protocols.  Although its primary driver is to compress\n\
    \   SIP [RFC3261] messages, the solution itself has been intentionally\n   designed\
    \ to be application agnostic so that it can be applied to any\n   application\
    \ protocol; this is denoted as ANY/SigComp.  Consequently,\n   many application-dependent\
    \ specifics are left out of the base\n   standard.  It is intended that a separate\
    \ specification be used to\n   describe those specifics when SigComp is applied\
    \ to a particular\n   application protocol.\n   This document binds SigComp and\
    \ SIP; this is denoted as SIP/SigComp.\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and\
    \ \"OPTIONAL\" in this\n   document are to be interpreted as described in RFC\
    \ 2119 [RFC2119].\n"
- title: 3.  Compliance with This Specification
  contents:
  - "3.  Compliance with This Specification\n   Any SigComp implementation that is\
    \ used for the compression of SIP\n   messages MUST conform to this document,\
    \ as well as to [RFC3320].\n   Additionally, it must support the SIP/SDP static\
    \ dictionary, as\n   specified in [RFC3485], and the mechanism for discovering\
    \ SigComp\n   support at the SIP layer, as specified in [RFC3486].\n"
- title: 4.  Minimum Values of SigComp Parameters for SIP/SigComp
  contents:
  - "4.  Minimum Values of SigComp Parameters for SIP/SigComp\n   In order to support\
    \ a wide range of capabilities among endpoints\n   implementing SigComp, SigComp\
    \ defines a few parameters to describe\n   SigComp behavior (see Section 3.3 of\
    \ [RFC3320]).  For each parameter,\n   [RFC3320] specifies a minimum value that\
    \ any SigComp endpoint MUST\n   support for ANY/SigComp.  Those minimum values\
    \ were determined with\n   the consideration of all imaginable devices in which\
    \ SigComp may be\n   implemented.  Scalability was also considered as a key factor.\n\
    \   However, some of the minimum values specified in [RFC3320] are too\n   small\
    \ to allow good performance for SIP message compression.\n   Therefore, they are\
    \ increased for SIP/SigComp as specified in the\n   following sections.  For completeness,\
    \ those parameters that are the\n   same for SIP/SigComp as they are for ANY/SigComp\
    \ are also listed.\n   The new minimum values are specific to SIP/SigComp and,\
    \ thus, do not\n   apply to any other application protocols.  A SIP/SigComp endpoint\
    \ MAY\n   offer additional resources over and above the minimum values\n   specified\
    \ in this document if available; these resources can be\n   advertised to remote\
    \ endpoints as described in Section 9.4.9 of\n   [RFC3320].\n"
- title: 4.1.  decompression_memory_size (DMS) for SIP/SigComp
  contents:
  - "4.1.  decompression_memory_size (DMS) for SIP/SigComp\n   Minimum value for ANY/SigComp:\
    \ 2048 bytes, as specified in Section\n   3.3.1 of [RFC3320].\n   Minimum value\
    \ for SIP/SigComp: 8192 bytes.\n   Reason: a DMS of 2048 bytes is too small for\
    \ SIP message compression\n   as it seriously limits the compression ratio and\
    \ even makes\n   compression impossible for certain messages.  For example, the\n\
    \   condition set by [RFC3320] for SigComp over UDP means: C + 2*B + R +\n   2*S\
    \ + 128 < DMS (each term is described below).  Therefore, if DMS is\n   too small,\
    \ at least one of C, B, R, or S will be severely restricted.\n   On the other\
    \ hand, DMS is memory that is only temporarily needed\n   during decompression\
    \ of a SigComp message (the memory can be\n   reclaimed when the message has been\
    \ decompressed).  Therefore, a\n   requirement of 8 KB should not cause any problems\
    \ for an endpoint\n   that already implements SIP, SigComp, and applications that\
    \ use SIP.\n   C    size of compressed application message, depending on R\n \
    \  B    size of bytecode.  Note: two copies -- one as part of the\n        SigComp\
    \ message and one in UDVM (Universal Decompressor Virtual\n        Machine) memory.\n\
    \   R    size of circular buffer in UDVM memory\n   S    any additional state\
    \ uploaded other than that created from the\n        content of the circular buffer\
    \ at the end of decompression\n        (similar to B, two copies of S are needed)\n\
    \   128  the smallest address in UDVM memory to copy bytecode to\n"
- title: 4.2.  state_memory_size (SMS) for SIP/SigComp
  contents:
  - "4.2.  state_memory_size (SMS) for SIP/SigComp\n   Minimum value for ANY/SigComp:\
    \ 0 (zero) bytes, as specified in\n   Section 3.3.1 of [RFC3320].\n   Minimum\
    \ value for SIP/SigComp: 2048 bytes.\n   Reason: a non-zero SMS allows an endpoint\
    \ to upload a state in the\n   first SIP message sent to a remote endpoint without\
    \ the uncertainty\n   of whether the remote endpoint will have enough memory to\
    \ store such\n   a state.  A non-zero SMS obviously requires the SIP/SigComp\n\
    \   implementation to keep state.  Based on the observation that there is\n  \
    \ little gain from stateless SigComp compression, the assumption is\n   that purely\
    \ stateless SIP implementations are unlikely to provide a\n   SigComp function.\
    \  Stateful implementations should have little\n   problem to keep 2K additional\
    \ state for each compartment (see Section\n   9).\n   Note: SMS is a parameter\
    \ that applies to each individual compartment.\n   An endpoint MAY offer different\
    \ SMS values for different compartments\n   as long as the SMS value is not less\
    \ than 2048 bytes.\n"
- title: 4.3.  cycles_per_bit (CPB) for SIP/SigComp
  contents:
  - "4.3.  cycles_per_bit (CPB) for SIP/SigComp\n   Minimum value for ANY/SigComp:\
    \ 16, as specified in Section 3.3.1 of\n   [RFC3320].\n   Minimum value for SIP/SigComp:\
    \ 16 (same as above).\n"
- title: 4.4.  SigComp_version (SV) for SIP/SigComp
  contents:
  - "4.4.  SigComp_version (SV) for SIP/SigComp\n   For ANY/SigComp: 0x01, as specified\
    \ in Section 3.3.2 of [RFC3320].\n   For SIP/SigComp: >= 0x02 (at least SigComp\
    \ + NACK).\n   Note that this implies that the provisions of [RFC4077] apply.\
    \  That\n   is, decompression failures result in SigComp NACK messages sent back\n\
    \   to the originating compressor.  It also implies that the compressor\n   need\
    \ not make use of the methods detailed in Section 2.4 of [RFC4077]\n   (Detecting\
    \ Support for NACK); for example, it can use optimistic\n   compression methods\
    \ right from the outset.\n"
- title: 4.5.  locally available state (LAS) for SIP/SigComp
  contents:
  - "4.5.  locally available state (LAS) for SIP/SigComp\n   Minimum LAS for ANY/SigComp:\
    \ none, see Section 3.3.3 of [RFC3320].\n   Minimum LAS for SIP/SigComp: the SIP/SDP\
    \ static dictionary as defined\n   in [RFC3485].\n   Note that, since support\
    \ for the static SIP/SDP dictionary is\n   mandatory, it does not need to be advertised.\n"
- title: 5.  Delimiting SIP Messages and SigComp Messages on the Same Port
  contents:
  - "5.  Delimiting SIP Messages and SigComp Messages on the Same Port\n   In order\
    \ to limit the number of ports required by a SigComp-aware\n   endpoint, it is\
    \ possible to allow both SigComp messages and 'vanilla'\n   SIP messages (i.e.,\
    \ uncompressed SIP messages with no SigComp header)\n   to arrive on the same\
    \ port.\n   For a message-based transport such as UDP or Stream Control\n   Transmission\
    \ Protocol (SCTP), distinguishing between SigComp and\n   non-SigComp messages\
    \ can be done per message.  The receiving endpoint\n   checks the first octet\
    \ of the UDP/SCTP payload to determine whether\n   the message has been compressed\
    \ using SigComp.  If the MSBs (Most\n   Significant Bits) of the octet are \"\
    11111\", then the message is\n   considered to be a SigComp message and is parsed\
    \ as per [RFC3320].\n   If the MSBs of the octet take any other value, then the\
    \ message is\n   assumed to be an uncompressed SIP message, and it is passed directly\n\
    \   to the application with no further effect on the SigComp layer.\n   For a\
    \ stream-based transport such as TCP, distinguishing between\n   SigComp and non-SigComp\
    \ messages has to be done per connection.  The\n   receiving endpoint checks the\
    \ first octet of the TCP data stream to\n   determine whether the stream has been\
    \ compressed using SigComp.  If\n   the MSBs of the octet are \"11111\", then\
    \ the stream is considered to\n   contain SigComp messages and is parsed as per\
    \ [RFC3320].  If the MSBs\n   of the octet take any other value, then the stream\
    \ is assumed to\n   contain uncompressed SIP messages, and it is passed directly\
    \ to the\n   application with no further effect on the SigComp layer.  Note that\n\
    \   SigComp message delimiters MUST NOT be used if the stream contains\n   uncompressed\
    \ SIP messages.\n   Applications MUST NOT mix SIP messages and SigComp messages\
    \ on a\n   single TCP connection.  If the TCP connection is used to carry\n  \
    \ SigComp messages, then all messages sent over the connection MUST\n   have a\
    \ SigComp header and be delimited by the use of 0xFFFF, as\n   described in [RFC3320].\n\
    \   Section 11 of [RFC4896] details a simple set of bytecodes, intended\n   to\
    \ be \"well-known\", that implement a null decompression algorithm.\n   These\
    \ bytecodes effectively allow SigComp peers to send selected\n   SigComp messages\
    \ with uncompressed data.  If a SIP implementation has\n   reason to send both\
    \ compressed and uncompressed SIP messages on a\n   single TCP connection, the\
    \ compressor can be instructed to use these\n   bytecodes to send uncompressed\
    \ SIP messages that are also valid\n   SigComp messages.\n"
- title: 6.  Continuous Mode over TCP
  contents:
  - "6.  Continuous Mode over TCP\n   Continuous Mode is a special feature of SigComp,\
    \ which is designed to\n   improve the overall compression ratio for long-lived\
    \ connections.\n   Its use requires pre-agreement between the SigComp compressor\
    \ and\n   decompressor.  Continuous mode is not used with SIP/SigComp.\n   Reason:\
    \ continuous mode requires the transport itself to provide a\n   certain level\
    \ of protection against denial-of-service attacks.  TCP\n   alone is not considered\
    \ to provide enough protection.\n"
- title: 7.  Too-Large SIP Messages
  contents:
  - "7.  Too-Large SIP Messages\n   SigComp does not support the compression of messages\
    \ larger than 64k.\n   Therefore, if a SIP application sending compressed SIP\
    \ messages to\n   another SIP application over a transport connection (e.g., a\
    \ TCP\n   connection) needs to send a SIP message larger than 64k, the SIP\n \
    \  application MUST NOT send the message over the same TCP connection.\n   The\
    \ SIP application SHOULD send the message over a different\n   transport connection\
    \ (to do this, the SIP application may need to\n   establish a new transport connection).\n"
- title: 8.  SIP Retransmissions
  contents:
  - "8.  SIP Retransmissions\n   When SIP messages are retransmitted, they need to\
    \ be re-compressed,\n   taking into account any SigComp states that may have been\
    \ created or\n   invalidated since the previous transmission.  Implementations\
    \ MUST\n   NOT cache the result of compressing the message and retransmit such\
    \ a\n   cached result.\n   The reason for this behavior is that it is impossible\
    \ to know whether\n   the failure causing the retransmission occurred on the message\
    \ being\n   retransmitted or on the response to that message.  If the response\n\
    \   was lost, any state changes effected by the first instance of the\n   retransmitted\
    \ message would already have taken place.  If these state\n   changes removed\
    \ a state that the previously transmitted message\n   relied upon, then retransmission\
    \ of the same compressed message would\n   lead to a decompression failure.\n\
    \   Note that a SIP retransmission may be caused by the original message\n   or\
    \ its response being lost by a decompression failure.  In this case,\n   a NACK\
    \ will have been sent by the decompressor to the compressor,\n   which may use\
    \ the information in this NACK message to adjust its\n   compression parameters.\
    \  Note that, on an unreliable transport, such\n   a NACK message may still be\
    \ lost, so if a compressor used some form\n   of optimistic compression, it MAY\
    \ want to switch to a method less\n   likely to cause any form of decompression\
    \ failure when compressing a\n   SIP retransmission.\n"
- title: 9.  Compartment and State Management for SIP/SigComp
  contents:
  - "9.  Compartment and State Management for SIP/SigComp\n   An application exchanging\
    \ compressed traffic with a remote\n   application has a compartment that contains\
    \ state information needed\n   to compress outgoing messages and to decompress\
    \ incoming messages.\n   To increase the compression efficiency, the application\
    \ must assign\n   distinct compartments to distinct remote applications.\n"
- title: 9.1.  Remote Application Identification
  contents:
  - "9.1.  Remote Application Identification\n   SIP/SigComp applications identify\
    \ remote applications by their SIP/\n   SigComp identifiers.  Each SIP/SigComp\
    \ application MUST have a SIP/\n   SigComp identifier URN (Uniform Resource Name)\
    \ that uniquely\n   identifies the application.  Usage of a URN provides a persistent\
    \ and\n   unique name for the SIP/SigComp identifier.  It also provides an easy\n\
    \   way to guarantee uniqueness.  This URN MUST be persistent as long as\n   the\
    \ application stores compartment state related to other SIP/SigComp\n   applications.\n\
    \   A SIP/SigComp application SHOULD use a UUID (Universally Unique\n   IDentifier)\
    \ URN as its SIP/SigComp identifier, due to the\n   difficulties in equality comparisons\
    \ for other kinds of URNs.  The\n   UUID URN [RFC4122] allows for non-centralized\
    \ computation of a URN\n   based on time, unique names (such as a Media Access\
    \ Control (MAC)\n   address), or a random number generator.  If a URN scheme other\
    \ than\n   UUID is used, the URN MUST be selected such that the application can\n\
    \   be certain that no other SIP/SigComp application would choose the\n   same\
    \ URN value.\n   Note that the definition of SIP/SigComp identifier is similar\
    \ to the\n   definition of instance identifier in [OUTBOUND].  One difference\
    \ is\n   that instance identifiers are only required to be unique within their\n\
    \   AoR (Address of Record) while SIP/SigComp identifiers are required to\n  \
    \ be globally unique.\n   Even if instance identifiers are only required to be\
    \ unique within\n   their AoR, devices may choose to generate globally unique\
    \ instance\n   identifiers.  A device with a globally unique instance identifier\n\
    \   SHOULD use its instance identifier as its SIP/SigComp identifier.\n      Note:\
    \ Using the same value for an entity's instance and\n      SIP/SigComp identifiers\
    \ improves the compression ratio of header\n      fields that carry both identifiers\
    \ (e.g., a Contact header field\n      in a REGISTER request).\n   Server farms\
    \ that share SIP/SigComp state across servers MUST use the\n   same SIP/SigComp\
    \ identifier for all their servers.\n   SIP/SigComp identifiers are carried in\
    \ the 'sigcomp-id' SIP URI\n   (Uniform Resource Identifier) or Via header field\
    \ parameter.  The\n   'sigcomp-id' SIP URI parameter is a 'uri-parameter', as\
    \ defined by\n   the SIP ABNF (Augmented Backus-Naur Form, Section 25.1 of [RFC3261]).\n\
    \   The following is its ABNF [RFC4234]:\n      uri-sip-sigcomp-id = \"sigcomp-id=\"\
    \ 1*paramchar\n   The SIP URI 'sigcomp-id' parameter MUST contain a URN [RFC2141].\n\
    \   The Via 'sigcomp-id' parameter is a 'via-extension', as defined by\n   the\
    \ SIP ABNF (Section 25.1 of [RFC3261]).  The following is its ABNF\n   [RFC4234]:\n\
    \      via-sip-sigcomp-id = \"sigcomp-id\" EQUAL\n                      LDQUOT\
    \ *( qdtext / quoted-pair ) RDQUOT\n   The Via 'sigcomp-id' parameter MUST contain\
    \ a URN [RFC2141].\n   The following is an example of a 'sigcomp-id' SIP URI parameter:\n\
    \      sigcomp-id=urn:uuid:0C67446E-F1A1-11D9-94D3-000A95A0E128\n   The following\
    \ is an example of a Via header field with a 'sigcomp-id'\n   parameter:\n   \
    \   Via: SIP/2.0/UDP server1.example.com:5060\n         ;branch=z9hG4bK87a7\n\
    \         ;comp=sigcomp\n         ;sigcomp-id=\"urn:uuid:0C67446E-F1A1-11D9-94D3-000A95A0E128\"\
    \n   The following is an example of a REGISTER request that carries\n   'sigcomp-id'\
    \ parameters in a Via entry and in the Contact header\n   field.  Additionally,\
    \ it also carries a '+sip.instance' Contact\n   header field parameter.\n    \
    \  REGISTER sip:example.net SIP/2.0\n      Via: SIP/2.0/UDP 192.0.2.247:2078;branch=z9hG4bK-et736vsjirav;\n\
    \        rport;sigcomp-id=\"urn:uuid:2e5fdc76-00be-4314-8202-1116fa82a473\"\n\
    \      From: \"Joe User\" <sip:2145550500@example.net>;tag=6to4gh7t5j\n      To:\
    \  \"Joe User\" <sip:2145550500@example.net>\n      Call-ID: 3c26700c1adb-lu1lz5ri5orr\n\
    \      CSeq: 215196 REGISTER\n      Max-Forwards: 70\n      Contact: <sip:2145550500@192.0.2.247:2078;\n\
    \        sigcomp-id=urn:uuid:2e5fdc76-00be-4314-8202-1116fa82a473>;\n        q=1.0;\
    \ expires=3600;\n        +sip.instance=\"<urn:uuid:2e5fdc76-00be-4314-8202-1116fa82a473>\"\
    \n      Content-Length: 0\n   SIP messages are matched with remote application\
    \ identifiers as\n   follows:\n   Outgoing requests: the remote application identifier\
    \ is the SIP/\n      SigComp identifier of the URI to which the request is sent.\
    \  If\n      the URI does not contain a SIP/SigComp identifier, the remote\n \
    \     application identifier is the IP address plus port of the datagram\n   \
    \   carrying the request for connectionless transport protocols, and\n      the\
    \ transport connection (e.g., a TCP connection) carrying the\n      request for\
    \ connection-oriented transport protocols (this is to\n      support legacy SIP/SigComp\
    \ applications).\n   Incoming responses: the remote application identifier is\
    \ the same as\n      that of the previously sent request that initiated the transaction\n\
    \      to which the response belongs.\n   Incoming requests: the remote application\
    \ identifier is the SIP/\n      SigComp identifier of the top-most Via entry.\
    \  If the Via header\n      field does not contain a SIP/SigComp identifier, the\
    \ remote\n      application identifier is the source IP address plus port of the\n\
    \      datagram carrying the request for connectionless transport\n      protocols,\
    \ and the transport connection (e.g., a TCP connection)\n      carrying the request\
    \ for connection-oriented transport protocols\n      (this is to support legacy\
    \ SIP/SigComp applications).\n   Outgoing responses: the remote application identifier\
    \ is the same as\n      that of the previously received request that initiated\
    \ the\n      transaction to which the response belongs.  Note that, due to\n \
    \     standard SIP Via header field processing, this identifier will be\n    \
    \  present in the top-most Via entry in such responses (as long as it\n      was\
    \ present in the top-most Via entry of the previously received\n      request).\n\
    \   A SIP/SigComp application placing its URI with the 'comp=sigcomp'\n   parameter\
    \ in a header field MUST add a 'sigcomp-id' parameter with\n   its SIP/SigComp\
    \ identifier to that URI.\n   A SIP/SigComp application generating its own Via\
    \ entry containing the\n   'comp=sigcomp' parameter MUST add a 'sigcomp-id' parameter\
    \ with its\n   SIP/SigComp identifier to that Via entry.\n   A given remote application\
    \ identifier is mapped to a particular\n   SigComp compartment ID following the\
    \ rules given in Section 9.3.\n"
- title: 9.2.  Identifier Comparison Rules
  contents:
  - "9.2.  Identifier Comparison Rules\n   Equality comparisons between SIP/SigComp\
    \ identifiers are performed\n   using the rules for URN equality that are specific\
    \ to the scheme in\n   the URN.  If the element performing the comparisons does\
    \ not\n   understand the URN scheme, it performs the comparisons using the\n \
    \  lexical equality rules defined in RFC 2141 [RFC2141].  Lexical\n   equality\
    \ may result in two URNs being considered unequal when they\n   are actually equal.\
    \  In this specific usage of URNs, the only element\n   that provides the URN\
    \ is the SIP/SigComp application identified by\n   that URN.  As a result, the\
    \ SIP/SigComp application SHOULD provide\n   lexically equivalent URNs in each\
    \ registration it generates.  This is\n   likely to be normal behavior in any\
    \ case; applications are not likely\n   to modify the value of their SIP/SigComp\
    \ identifiers so that they\n   remain functionally equivalent yet lexicographically\
    \ different from\n   previous identifiers.\n"
- title: 9.3.  Compartment Opening and Closure
  contents:
  - "9.3.  Compartment Opening and Closure\n   SIP applications need to know when\
    \ to open a new compartment and when\n   to close it.  The lifetime of SIP/SigComp\
    \ compartments is linked to\n   registration state.  Compartments are opened at\
    \ SIP registration time\n   and are typically closed when the registration expires\
    \ or is\n   canceled.\n      Note: Linking the lifetime of SIP/SigComp compartments\
    \ to\n      registration state limits the applicability of this specification.\n\
    \      In particular, SIP user agents that do not register but, for\n      example,\
    \ only handle PUBLISH or SUBSCRIBE/NOTIFY transactions are\n      not able create\
    \ SIP/SigComp compartments following this\n      specification.  Previous revisions\
    \ of this specification also\n      defined compartments valid during a SIP transaction\
    \ or a SIP\n      dialog.  Those compartments covered all possible SIP entities,\n\
    \      including those that do not handle REGISTER transactions.\n      However,\
    \ it was decided to eliminate those types of compartments\n      because the complexity\
    \ they introduced (e.g., edge proxy servers\n      were required to keep dialog\
    \ state) was higher than the benefits\n      they brought in most deployment scenarios.\n\
    \   Usually, any states created during the lifetime of a compartment will\n  \
    \ be \"logically\" deleted when the compartment is closed.  As described\n   in\
    \ Section 6.2 of [RFC3320], a logical deletion can become a physical\n   deletion\
    \ only when no compartment continues to exist that created the\n   (same) state.\n\
    \   A SigComp endpoint may offer to keep a state created upon request\n   from\
    \ a SigComp peer endpoint beyond the default lifetime of a\n   compartment (i.e.,\
    \ beyond the duration of its associated\n   registration).  This may be used to\
    \ improve compression efficiency of\n   subsequent SIP messages generated by the\
    \ same remote application at\n   the SigComp peer endpoint.  To indicate that\
    \ such state will continue\n   to be available, the SigComp endpoint can inform\
    \ its peer SigComp\n   endpoint by announcing the (partial) state ID in the returned\
    \ SigComp\n   parameters at the end of the registration that was supposed to limit\n\
    \   the lifetime of the SigComp state.  That signals the state will be\n   maintained.\
    \  The mandatory support for the SigComp Negative\n   Acknowledgement (NACK) Mechanism\
    \ [RFC4077] in SIP/SigComp ensures\n   that it is possible to recover from synchronization\
    \ errors regarding\n   compartment lifetimes.\n   As an operational concern, bugs\
    \ in the compartment management\n   implementation are likely to lead to sporadic,\
    \ hard-to-diagnose\n   failures.  Decompressors may therefore want to cache old\
    \ state and,\n   if still available, allow access while logging diagnostic\n \
    \  information.  Both compressors and decompressors use the SigComp\n   Negative\
    \ Acknowledgement (NACK) Mechanism [RFC4077] to recover from\n   situations where\
    \ such old state may no longer be available.\n   A REGISTER transaction causes\
    \ an application to open a new\n   compartment to be valid for the duration of\
    \ the registration\n   established by the REGISTER transaction.\n   A SIP application\
    \ that needs to send a compressed SIP REGISTER (i.e.,\n   a user agent generating\
    \ a REGISTER or a proxy server relaying one to\n   its next hop) SHOULD open a\
    \ compartment for the request's remote\n   application identifier.  A SIP application\
    \ that receives a compressed\n   SIP REGISTER (i.e., the registrar or a proxy\
    \ relaying the REGISTER to\n   its next-hop) SHOULD open a compartment for the\
    \ request's remote\n   application identifier.\n   These compartments MAY be closed\
    \ if the REGISTER request is responded\n   with a non-2xx final response, or when\
    \ the registration expires or is\n   canceled.  However, applications MAY also\
    \ choose to keep these\n   compartments open for a longer period of time, as discussed\n\
    \   previously.  For a given successful registration, applications SHOULD\n  \
    \ NOT close their associated compartments until the registration is\n   over.\n\
    \      Note: A SIP network can be configured so that regular SIP traffic\n   \
    \   to and from a user agent traverses a different set of proxies than\n     \
    \ the initial REGISTER transaction.  The path the REGISTER\n      transaction\
    \ follows is typically determined by configuration data.\n      The path subsequent\
    \ requests traverse is determined by the Path\n      [RFC3327] and the Service-Route\
    \ [RFC3308] header fields in the\n      REGISTER transaction and by the Record-Route\
    \ and the Route header\n      fields in dialog-creating transactions.  Previous\
    \ revisions of\n      this document supported the use of different paths for different\n\
    \      types of traffic.  However, for simplicity reasons, this document\n   \
    \   now assumes that networks using compression will be configured so\n      that\
    \ subsequent requests follow the same path as the initial\n      REGISTER transaction\
    \ in order to achieve the best possible\n      compression.  Section 10 provides\
    \ network administrators with\n      recommendations so that they can configure\
    \ the networks properly.\n   If, following the rules above, a SIP application\
    \ is supposed to open\n   a compartment for a remote application identifier for\
    \ which it\n   already has a compartment (e.g., the SIP application registers\n\
    \   towards a second registrar using the same edge proxy server as for\n   its\
    \ registration towards its first registrar), the SIP application\n   MUST use\
    \ the already existing compartment.  That is, the SIP\n   application MUST NOT\
    \ open a new compartment.\n"
- title: 9.4.  Lack of a Compartment
  contents:
  - "9.4.  Lack of a Compartment\n   The use of stateless compression (i.e., compression\
    \ without a\n   compartment) is not typically worthwhile and may even result in\n\
    \   message expansion.  Therefore, if a SIP application does not have a\n   compartment\
    \ for a message it needs to send, it MAY choose not to\n   compress it even in\
    \ the presence of the 'comp=sigcomp' parameter.\n   Section 5 describes how a\
    \ SIP application can send compressed and\n   uncompressed messages over the same\
    \ TCP connection.  Note that RFC\n   3486 [RFC3486] states the following:\n  \
    \    \"If the next-hop URI contains the parameter comp=sigcomp, the\n      client\
    \ SHOULD compress the request using SigComp\".\n   Experience since RFC 3486 [RFC3486]\
    \ was written has shown that\n   stateless compression is, in most cases, not\
    \ worthwhile.  That is why\n   it is not recommended to use it any longer.\n"
- title: 10.  Recommendations for Network Administrators
  contents:
  - "10.  Recommendations for Network Administrators\n   Network administrators can\
    \ configure their networks so that the\n   compression efficiency achieved is\
    \ increased.  The following\n   recommendations help network administrators perform\
    \ their task.\n   For a given user agent, the route sets for incoming requests\
    \ (created\n   by a Path header field) and for outgoing requests (created by a\n\
    \   Service-Route header field) are typically the same.  However,\n   registrars\
    \ can, if they wish, insert proxies in the latter route that\n   do not appear\
    \ in the former route and vice versa.  It is RECOMMENDED\n   that registrars are\
    \ configured so that proxies performing SigComp\n   compression appear in both\
    \ routes.\n   The routes described previously apply to requests sent outside a\n\
    \   dialog.  Requests inside a dialog follow a route constructed using\n   Record-Route\
    \ header fields.  It is RECOMMENDED that the proxies\n   performing SigComp that\
    \ are in the route for requests outside a\n   dialog are configured to place themselves\
    \ (by inserting themselves in\n   the Record-Route header fields) in the routes\
    \ used for requests\n   inside dialogs.\n   When a user agent's registration expires,\
    \ proxy servers performing\n   compression may close their associated SIP/SigComp\
    \ compartment.  If\n   the user agent is involved in a dialog that was established\
    \ before\n   the registration expired, subsequent requests within the dialog may\n\
    \   not be compressed any longer.  In order to avoid this situation, it\n   is\
    \ RECOMMENDED that user agents are registered as long as they are\n   involved\
    \ in a dialog.\n"
- title: 11.  Private Agreements
  contents:
  - "11.  Private Agreements\n   SIP/SigComp implementations that are subject to private\
    \ agreements\n   MAY deviate from this specification, if the private agreements\n\
    \   unambiguously specify so.  Plausible candidates for such deviations\n   include:\n\
    \   o  Minimum values (Section 4).\n   o  Use of continuous mode (Section 6).\n\
    \   o  Compartment definition (Section 9).\n"
- title: 12.  Backwards Compatibility
  contents:
  - "12.  Backwards Compatibility\n   SigComp has a number of parameters that can\
    \ be configured per\n   endpoint.  This document specifies a profile for SigComp\
    \ when used\n   for SIP compression that further constrains the range that some\
    \ of\n   these parameters may take.  Examples of this are Decompressor Memory\n\
    \   Size, State Memory Size, and SigComp Version (support for NACK).\n   Additionally,\
    \ this document specifies how SIP/SigComp applications\n   should perform compartment\
    \ mapping.\n   When this document was written, there were already a few existing\n\
    \   SIP/SigComp deployments.  The rules in this document have been\n   designed\
    \ to maximize interoperability with those legacy SIP/SigComp\n   implementations.\
    \  Nevertheless, implementers should be aware that\n   legacy SIP/SigComp implementations\
    \ may not conform to this\n   specification.  Examples of problems with legacy\
    \ applications would\n   be smaller DMS than mandated in this document, lack of\
    \ NACK support,\n   or a different compartment mapping.\n"
- title: 13.  Interactions with Transport Layer Security (TLS)
  contents:
  - "13.  Interactions with Transport Layer Security (TLS)\n   Endpoints exchanging\
    \ SIP traffic over a TLS [RFC4346] connection can\n   use the compression provided\
    \ by TLS.  Two endpoints exchanging SIP/\n   SigComp traffic over a TLS connection\
    \ that provides compression need\n   to first compress the SIP messages using\
    \ SigComp and then pass them\n   to the TLS layer, which will compress them again.\
    \  When receiving\n   data, the processing order is reversed.\n   However, compressing\
    \ messages this way twice does not typically bring\n   significant gains.  Once\
    \ a message is compressed using SigComp, TLS\n   is not usually able to compress\
    \ it further.  Therefore, TLS will\n   normally only be able to compress SigComp\
    \ code sent between\n   compressor and decompressor.  Since the gain of having\
    \ SigComp code\n   compressed should be minimal in most cases, it is NOT RECOMMENDED\
    \ to\n   use TLS compression when SigComp compression is being used.\n"
- title: 14.  Example
  contents:
  - "14.  Example\n   Figure 1 shows an example message flow where the user agent\
    \ and the\n   outbound proxy exchange compressed SIP traffic.  Compressed messages\n\
    \   are marked with a (c).\n           User Agent      Outbound Proxy       Registrar\n\
    \                |(1) REGISTER (c) |                 |\n                |---------------->|\
    \                 |\n                |                 |(2) REGISTER     |\n \
    \               |                 |---------------->|\n                |     \
    \            |(3) 200 OK       |\n                |                 |<----------------|\n\
    \                |(4) 200 OK (c)   |                 |\n                |<----------------|\
    \                 |\n                |(5) INVITE (c)   |                 |\n \
    \               |---------------->|                 |\n                |     \
    \            |(6) INVITE       |\n                |                 |------------------------------>\n\
    \                |                 |(7) 200 OK       |\n                |    \
    \             |<------------------------------\n                |(8) 200 OK (c)\
    \   |                 |\n                |<----------------|                 |\n\
    \                |(9) ACK (c)      |                 |\n                |---------------->|\
    \                 |\n                |                 |(10) ACK         |\n \
    \               |                 |------------------------------>\n         \
    \       |(11) BYE (c)     |                 |\n                |---------------->|\
    \                 |\n                |                 |(12) BYE         |\n \
    \               |                 |------------------------------>\n         \
    \       |                 |(13) 200 OK      |\n                |             \
    \    |<------------------------------\n                |(14) 200 OK (c)  |   \
    \              |\n                |<----------------|                 |\n    \
    \                     Figure 1: Example Message Flow\n   The user agent in Figure\
    \ 1 is initially configured (e.g., using the\n   SIP configuration framework [CONFIG])\
    \ with the URI of its outbound\n   proxy.  That URI contains the outbound proxy's\
    \ SIP/SigComp\n   identifier, referred to as 'Outbound-id', in a 'sigcomp-id'\n\
    \   parameter.\n   When the user agent sends an initial REGISTER request (1) to\
    \ the\n   outbound proxy's URI, the user agent opens a new compartment for\n \
    \  'Outbound-id'.  This compartment will be valid for the duration of\n   the\
    \ registration, at least.\n   On receiving this REGISTER request (1), the outbound\
    \ proxy opens a\n   new compartment for the SIP/SigComp identifier that appears\
    \ in the\n   'sigcomp-id' parameter of the top-most Via entry.  This identifier,\n\
    \   which is the user agent's SIP/SigComp identifier, is referred to as\n   'UA-id'.\
    \  The compartment opened by the outbound proxy will be valid\n   for the duration\
    \ of the registration, at least.  The outbound proxy\n   adds a Path header field\
    \ with its own URI, which contains the\n   'Outbound-id' SIP/SigComp identifier,\
    \ to the REGISTER request and\n   relays it to the registrar (2).\n   When the\
    \ registrar receives the REGISTER request (2), it constructs\n   the route future\
    \ incoming requests (to the user agent) will follow\n   using the Contact and\
    \ the Path header fields.  Future incoming\n   requests will traverse the outbound\
    \ proxy before reaching the user\n   agent.\n   The registrar also constructs\
    \ the route future outgoing requests\n   (from the user agent) will follow and\
    \ places it in a Service-Route\n   header field in a 200 (OK) response (3).  Future\
    \ outgoing requests\n   will always traverse the outbound proxy.  The registrar\
    \ has ensured\n   that the outbound proxy performing compression handles both\
    \ incoming\n   and outgoing requests.\n   When the outbound proxy receives a 200\
    \ (OK) response (3), it inspects\n   the top-most Via entry.  This entry's SIP/SigComp\
    \ identifier 'UA-id'\n   matches that of the compartment created before.  Therefore,\
    \ the\n   outbound proxy uses that compartment to compress it and relay it to\n\
    \   the user agent.\n   On receiving the 200 (OK) response (4), the user agent\
    \ stores the\n   Service-Route header field in order to use it to send future\
    \ outgoing\n   requests.  The Service-Route header field contains the outbound\n\
    \   proxy's URI, which contains the 'Outbound-id' SIP/SigComp identifier.\n  \
    \ At a later point, the user agent needs to send an INVITE request (5).\n   According\
    \ to the Service-Route header field received previously, the\n   user agent sends\
    \ the INVITE request (5) to the outbound proxy's URI.\n   Since this URI's SIP/SigComp\
    \ identifier 'Outbound-id' matches that of\n   the compartment created before,\
    \ this compartment is used to compress\n   the INVITE request.\n   On receiving\
    \ the INVITE request (5), the outbound proxy Record Routes\n   and relays the\
    \ INVITE request (6) forward.  The outbound proxy Record\n   Routes to ensure\
    \ that all SIP messages related to this new dialog are\n   routed through the\
    \ outbound proxy.\n   Finally, the dialog is terminated by a BYE transaction (11)\
    \ that also\n   traverses the outbound proxy.\n"
- title: 15.  Security Considerations
  contents:
  - "15.  Security Considerations\n   The same security considerations as described\
    \ in [RFC3320] apply to\n   this document.  Note that keeping SigComp states longer\
    \ than the\n   duration of a SIP dialog should not pose new security risks because\n\
    \   the state has been allowed to be created in the first place.\n"
- title: 16.  IANA Considerations
  contents:
  - "16.  IANA Considerations\n   The IANA has registered the 'sigcomp-id' Via header\
    \ field parameter,\n   which is defined in Section 9.1, under the Header Field\
    \ Parameters\n   and Parameter Values subregistry within the SIP Parameters registry:\n\
    \                                                  Predefined\n   Header Field\
    \                  Parameter Name     Values     Reference\n   ----------------------------\
    \  ---------------   ---------   ---------\n   Via                           sigcomp-id\
    \           No       [RFC5049]\n   The IANA has registered the 'sigcomp-id' SIP\
    \ URI parameter, which is\n   defined in Section 9.1, under the SIP/SIPS URI Parameters\
    \ subregistry\n   within the SIP Parameters registry:\n   Parameter Name     Predefined\
    \ Values     Reference\n   --------------     -----------------     ---------\n\
    \   sigcomp-id         No                    [RFC5049]\n"
- title: 17.  Acknowledgements
  contents:
  - "17.  Acknowledgements\n   The authors would like to thank the following people\
    \ for their\n   comments and suggestions: Jan Christoffersson, Joerg Ott, Mark\
    \ West,\n   Pekka Pessi, Robert Sugar, Jonathan Rosenberg, Robert Sparks, Juergen\n\
    \   Schoenwaelder, and Tuukka Karvonen.  Abigail Surtees and Adam Roach\n   performed\
    \ thorough reviews of this document.\n"
- title: 18.  References
  contents:
  - '18.  References

    '
- title: 18.1.  Normative References
  contents:
  - "18.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [RFC2141]  Moats, R., \"URN Syntax\", RFC 2141, May 1997.\n   [RFC3261]\
    \  Rosenberg, J., Schulzrinne, H., Camarillo, G., Johnston,\n              A.,\
    \ Peterson, J., Sparks, R., Handley, M., and E.\n              Schooler, \"SIP:\
    \ Session Initiation Protocol\", RFC 3261,\n              June 2002.\n   [RFC3308]\
    \  Calhoun, P., Luo, W., McPherson, D., and K. Peirce, \"Layer\n             \
    \ Two Tunneling Protocol (L2TP) Differentiated Services\n              Extension\"\
    , RFC 3308, November 2002.\n   [RFC3320]  Price, R., Bormann, C., Christoffersson,\
    \ J., Hannu, H.,\n              Liu, Z., and J. Rosenberg, \"Signaling Compression\n\
    \              (SigComp)\", RFC 3320, January 2003.\n   [RFC3327]  Willis, D.\
    \ and B. Hoeneisen, \"Session Initiation Protocol\n              (SIP) Extension\
    \ Header Field for Registering Non-Adjacent\n              Contacts\", RFC 3327,\
    \ December 2002.\n   [RFC3485]  Garcia-Martin, M., Bormann, C., Ott, J., Price,\
    \ R., and A.\n              Roach, \"The Session Initiation Protocol (SIP) and\
    \ Session\n              Description Protocol (SDP) Static Dictionary for Signaling\n\
    \              Compression (SigComp)\", RFC 3485, February 2003.\n   [RFC3486]\
    \  Camarillo, G., \"Compressing the Session Initiation\n              Protocol\
    \ (SIP)\", RFC 3486, February 2003.\n   [RFC4077]  Roach, A., \"A Negative Acknowledgement\
    \ Mechanism for\n              Signaling Compression\", RFC 4077, May 2005.\n\
    \   [RFC4122]  Leach, P., Mealling, M., and R. Salz, \"A Universally\n       \
    \       Unique IDentifier (UUID) URN Namespace\", RFC 4122, July\n           \
    \   2005.\n   [RFC4234]  Crocker, D., Ed., and P. Overell, \"Augmented BNF for\n\
    \              Syntax Specifications: ABNF\", RFC 4234, October 2005.\n   [RFC4346]\
    \  Dierks, T. and E. Rescorla, \"The Transport Layer Security\n              (TLS)\
    \ Protocol Version 1.1\", RFC 4346, April 2006.\n   [RFC4896]  Surtees, A., West,\
    \ M., and A. Roach, \"Signaling\n              Compression (SigComp) Corrections\
    \ and Clarifications\", RFC\n              4896, June 2007.\n"
- title: 18.2.  Informative References
  contents:
  - "18.2.  Informative References\n   [CONFIG]   Petrie, D. and S. Channabasappa,\
    \ \"A Framework for Session\n              Initiation Protocol User Agent Profile\
    \ Delivery\", Work in\n              Progress, June 2007.\n   [OUTBOUND] Jennings,\
    \ C. and R. Mahy, \"Managing Client Initiated\n              Connections in the\
    \ Session Initiation Protocol  (SIP)\",\n              Work in Progress, March\
    \ 2007.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Carsten Bormann\n   Universitaet Bremen TZI\n   Postfach\
    \ 330440\n   Bremen D-28334\n   Germany\n   Phone: +49 421 218 63921\n   Fax:\
    \   +49 421 218 7000\n   EMail: cabo@tzi.org\n   Zhigang Liu\n   Nokia Research\
    \ Center\n   955 Page Mill Road\n   Palo Alto, CA 94304\n   USA\n   Phone: +1\
    \ 650 796 4578\n   EMail: zhigang.c.liu@nokia.com\n   Richard Price\n   EADS Defence\
    \ and Security Systems Limited\n   Meadows Road\n   Queensway Meadows\n   Newport,\
    \ Gwent NP19 4SS\n   Phone: +44 (0)1633 637874\n   EMail: richard.price@eads.com\n\
    \   Gonzalo Camarillo (editor)\n   Ericsson\n   Hirsalantie 11\n   Jorvas 02420\n\
    \   Finland\n   EMail: Gonzalo.Camarillo@ericsson.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2007).\n   This document\
    \ is subject to the rights, licenses and restrictions\n   contained in BCP 78,\
    \ and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE\
    \ INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED,\
    \ INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION\
    \ HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY\
    \ OR FITNESS FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
